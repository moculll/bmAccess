#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: GSEngineExtent

#include "Basic.hpp"

#include "Engine_structs.hpp"
#include "GSEngineExtent_structs.hpp"


namespace SDK::Params
{

// Function GSEngineExtent.GSEDestructibleMeshGenComponent.CallFloatCurve
// 0x0001 (0x0001 - 0x0000)
struct GSEDestructibleMeshGenComponent_CallFloatCurve final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
//static_assert(alignof(GSEDestructibleMeshGenComponent_CallFloatCurve) == 0x000001, "Wrong alignment on GSEDestructibleMeshGenComponent_CallFloatCurve");
//static_assert(sizeof(GSEDestructibleMeshGenComponent_CallFloatCurve) == 0x000001, "Wrong size on GSEDestructibleMeshGenComponent_CallFloatCurve");
//static_assert(offsetof(GSEDestructibleMeshGenComponent_CallFloatCurve, ReturnValue) == 0x000000, "Member 'GSEDestructibleMeshGenComponent_CallFloatCurve::ReturnValue' has a wrong offset!");

// Function GSEngineExtent.GSEDestructibleMeshGenComponent.SetAllCollisionEnabledForce
// 0x0002 (0x0002 - 0x0000)
struct GSEDestructibleMeshGenComponent_SetAllCollisionEnabledForce final
{
public:
	ECollisionEnabled                             NewType;                                           // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0001(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
//static_assert(alignof(GSEDestructibleMeshGenComponent_SetAllCollisionEnabledForce) == 0x000001, "Wrong alignment on GSEDestructibleMeshGenComponent_SetAllCollisionEnabledForce");
//static_assert(sizeof(GSEDestructibleMeshGenComponent_SetAllCollisionEnabledForce) == 0x000002, "Wrong size on GSEDestructibleMeshGenComponent_SetAllCollisionEnabledForce");
//static_assert(offsetof(GSEDestructibleMeshGenComponent_SetAllCollisionEnabledForce, NewType) == 0x000000, "Member 'GSEDestructibleMeshGenComponent_SetAllCollisionEnabledForce::NewType' has a wrong offset!");
//static_assert(offsetof(GSEDestructibleMeshGenComponent_SetAllCollisionEnabledForce, ReturnValue) == 0x000001, "Member 'GSEDestructibleMeshGenComponent_SetAllCollisionEnabledForce::ReturnValue' has a wrong offset!");

// Function GSEngineExtent.GSEDestructibleMeshGenComponent.SetAllCollisionObjectType
// 0x0002 (0x0002 - 0x0000)
struct GSEDestructibleMeshGenComponent_SetAllCollisionObjectType final
{
public:
	ECollisionChannel                             Channel;                                           // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0001(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
//static_assert(alignof(GSEDestructibleMeshGenComponent_SetAllCollisionObjectType) == 0x000001, "Wrong alignment on GSEDestructibleMeshGenComponent_SetAllCollisionObjectType");
//static_assert(sizeof(GSEDestructibleMeshGenComponent_SetAllCollisionObjectType) == 0x000002, "Wrong size on GSEDestructibleMeshGenComponent_SetAllCollisionObjectType");
//static_assert(offsetof(GSEDestructibleMeshGenComponent_SetAllCollisionObjectType, Channel) == 0x000000, "Member 'GSEDestructibleMeshGenComponent_SetAllCollisionObjectType::Channel' has a wrong offset!");
//static_assert(offsetof(GSEDestructibleMeshGenComponent_SetAllCollisionObjectType, ReturnValue) == 0x000001, "Member 'GSEDestructibleMeshGenComponent_SetAllCollisionObjectType::ReturnValue' has a wrong offset!");

// Function GSEngineExtent.GSEDestructibleMeshGenComponent.SetAllCollisionResponseToAllChannels
// 0x0002 (0x0002 - 0x0000)
struct GSEDestructibleMeshGenComponent_SetAllCollisionResponseToAllChannels final
{
public:
	ECollisionResponse                            NewResponse;                                       // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0001(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
//static_assert(alignof(GSEDestructibleMeshGenComponent_SetAllCollisionResponseToAllChannels) == 0x000001, "Wrong alignment on GSEDestructibleMeshGenComponent_SetAllCollisionResponseToAllChannels");
//static_assert(sizeof(GSEDestructibleMeshGenComponent_SetAllCollisionResponseToAllChannels) == 0x000002, "Wrong size on GSEDestructibleMeshGenComponent_SetAllCollisionResponseToAllChannels");
//static_assert(offsetof(GSEDestructibleMeshGenComponent_SetAllCollisionResponseToAllChannels, NewResponse) == 0x000000, "Member 'GSEDestructibleMeshGenComponent_SetAllCollisionResponseToAllChannels::NewResponse' has a wrong offset!");
//static_assert(offsetof(GSEDestructibleMeshGenComponent_SetAllCollisionResponseToAllChannels, ReturnValue) == 0x000001, "Member 'GSEDestructibleMeshGenComponent_SetAllCollisionResponseToAllChannels::ReturnValue' has a wrong offset!");

// Function GSEngineExtent.GSEDestructibleMeshGenComponent.SetAllCollisionResponseToChannel
// 0x0003 (0x0003 - 0x0000)
struct GSEDestructibleMeshGenComponent_SetAllCollisionResponseToChannel final
{
public:
	ECollisionChannel                             Channel;                                           // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ECollisionResponse                            NewResponse;                                       // 0x0001(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0002(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
//static_assert(alignof(GSEDestructibleMeshGenComponent_SetAllCollisionResponseToChannel) == 0x000001, "Wrong alignment on GSEDestructibleMeshGenComponent_SetAllCollisionResponseToChannel");
//static_assert(sizeof(GSEDestructibleMeshGenComponent_SetAllCollisionResponseToChannel) == 0x000003, "Wrong size on GSEDestructibleMeshGenComponent_SetAllCollisionResponseToChannel");
//static_assert(offsetof(GSEDestructibleMeshGenComponent_SetAllCollisionResponseToChannel, Channel) == 0x000000, "Member 'GSEDestructibleMeshGenComponent_SetAllCollisionResponseToChannel::Channel' has a wrong offset!");
//static_assert(offsetof(GSEDestructibleMeshGenComponent_SetAllCollisionResponseToChannel, NewResponse) == 0x000001, "Member 'GSEDestructibleMeshGenComponent_SetAllCollisionResponseToChannel::NewResponse' has a wrong offset!");
//static_assert(offsetof(GSEDestructibleMeshGenComponent_SetAllCollisionResponseToChannel, ReturnValue) == 0x000002, "Member 'GSEDestructibleMeshGenComponent_SetAllCollisionResponseToChannel::ReturnValue' has a wrong offset!");

// Function GSEngineExtent.GSEDestructibleMeshGenComponent.SetCollisionEnabledForce
// 0x0018 (0x0018 - 0x0000)
struct GSEDestructibleMeshGenComponent_SetCollisionEnabledForce final
{
public:
	ECollisionEnabled                             NewType;                                           // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x7];                                        // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UDestructibleComponent*                 Comp;                                              // 0x0008(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0010(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_11[0x7];                                       // 0x0011(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
//static_assert(alignof(GSEDestructibleMeshGenComponent_SetCollisionEnabledForce) == 0x000008, "Wrong alignment on GSEDestructibleMeshGenComponent_SetCollisionEnabledForce");
//static_assert(sizeof(GSEDestructibleMeshGenComponent_SetCollisionEnabledForce) == 0x000018, "Wrong size on GSEDestructibleMeshGenComponent_SetCollisionEnabledForce");
//static_assert(offsetof(GSEDestructibleMeshGenComponent_SetCollisionEnabledForce, NewType) == 0x000000, "Member 'GSEDestructibleMeshGenComponent_SetCollisionEnabledForce::NewType' has a wrong offset!");
//static_assert(offsetof(GSEDestructibleMeshGenComponent_SetCollisionEnabledForce, Comp) == 0x000008, "Member 'GSEDestructibleMeshGenComponent_SetCollisionEnabledForce::Comp' has a wrong offset!");
//static_assert(offsetof(GSEDestructibleMeshGenComponent_SetCollisionEnabledForce, ReturnValue) == 0x000010, "Member 'GSEDestructibleMeshGenComponent_SetCollisionEnabledForce::ReturnValue' has a wrong offset!");

// Function GSEngineExtent.GSEDestructibleMeshGenComponent.SetCollisionEnabledForceByName
// 0x0020 (0x0020 - 0x0000)
struct GSEDestructibleMeshGenComponent_SetCollisionEnabledForceByName final
{
public:
	ECollisionEnabled                             NewType;                                           // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x7];                                        // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 Name_0;                                            // 0x0008(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0018(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_19[0x7];                                       // 0x0019(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
//static_assert(alignof(GSEDestructibleMeshGenComponent_SetCollisionEnabledForceByName) == 0x000008, "Wrong alignment on GSEDestructibleMeshGenComponent_SetCollisionEnabledForceByName");
//static_assert(sizeof(GSEDestructibleMeshGenComponent_SetCollisionEnabledForceByName) == 0x000020, "Wrong size on GSEDestructibleMeshGenComponent_SetCollisionEnabledForceByName");
//static_assert(offsetof(GSEDestructibleMeshGenComponent_SetCollisionEnabledForceByName, NewType) == 0x000000, "Member 'GSEDestructibleMeshGenComponent_SetCollisionEnabledForceByName::NewType' has a wrong offset!");
//static_assert(offsetof(GSEDestructibleMeshGenComponent_SetCollisionEnabledForceByName, Name_0) == 0x000008, "Member 'GSEDestructibleMeshGenComponent_SetCollisionEnabledForceByName::Name_0' has a wrong offset!");
//static_assert(offsetof(GSEDestructibleMeshGenComponent_SetCollisionEnabledForceByName, ReturnValue) == 0x000018, "Member 'GSEDestructibleMeshGenComponent_SetCollisionEnabledForceByName::ReturnValue' has a wrong offset!");

// Function GSEngineExtent.GSEDestructibleMeshGenComponent.SetCollisionObjectType
// 0x0018 (0x0018 - 0x0000)
struct GSEDestructibleMeshGenComponent_SetCollisionObjectType final
{
public:
	ECollisionChannel                             Channel;                                           // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x7];                                        // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UDestructibleComponent*                 Comp;                                              // 0x0008(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0010(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_11[0x7];                                       // 0x0011(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
//static_assert(alignof(GSEDestructibleMeshGenComponent_SetCollisionObjectType) == 0x000008, "Wrong alignment on GSEDestructibleMeshGenComponent_SetCollisionObjectType");
//static_assert(sizeof(GSEDestructibleMeshGenComponent_SetCollisionObjectType) == 0x000018, "Wrong size on GSEDestructibleMeshGenComponent_SetCollisionObjectType");
//static_assert(offsetof(GSEDestructibleMeshGenComponent_SetCollisionObjectType, Channel) == 0x000000, "Member 'GSEDestructibleMeshGenComponent_SetCollisionObjectType::Channel' has a wrong offset!");
//static_assert(offsetof(GSEDestructibleMeshGenComponent_SetCollisionObjectType, Comp) == 0x000008, "Member 'GSEDestructibleMeshGenComponent_SetCollisionObjectType::Comp' has a wrong offset!");
//static_assert(offsetof(GSEDestructibleMeshGenComponent_SetCollisionObjectType, ReturnValue) == 0x000010, "Member 'GSEDestructibleMeshGenComponent_SetCollisionObjectType::ReturnValue' has a wrong offset!");

// Function GSEngineExtent.GSEDestructibleMeshGenComponent.SetCollisionObjectTypeByName
// 0x0020 (0x0020 - 0x0000)
struct GSEDestructibleMeshGenComponent_SetCollisionObjectTypeByName final
{
public:
	ECollisionChannel                             Channel;                                           // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x7];                                        // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 Name_0;                                            // 0x0008(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0018(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_19[0x7];                                       // 0x0019(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
//static_assert(alignof(GSEDestructibleMeshGenComponent_SetCollisionObjectTypeByName) == 0x000008, "Wrong alignment on GSEDestructibleMeshGenComponent_SetCollisionObjectTypeByName");
//static_assert(sizeof(GSEDestructibleMeshGenComponent_SetCollisionObjectTypeByName) == 0x000020, "Wrong size on GSEDestructibleMeshGenComponent_SetCollisionObjectTypeByName");
//static_assert(offsetof(GSEDestructibleMeshGenComponent_SetCollisionObjectTypeByName, Channel) == 0x000000, "Member 'GSEDestructibleMeshGenComponent_SetCollisionObjectTypeByName::Channel' has a wrong offset!");
//static_assert(offsetof(GSEDestructibleMeshGenComponent_SetCollisionObjectTypeByName, Name_0) == 0x000008, "Member 'GSEDestructibleMeshGenComponent_SetCollisionObjectTypeByName::Name_0' has a wrong offset!");
//static_assert(offsetof(GSEDestructibleMeshGenComponent_SetCollisionObjectTypeByName, ReturnValue) == 0x000018, "Member 'GSEDestructibleMeshGenComponent_SetCollisionObjectTypeByName::ReturnValue' has a wrong offset!");

// Function GSEngineExtent.GSEDestructibleMeshGenComponent.SetCollisionResponseToAllChannels
// 0x0018 (0x0018 - 0x0000)
struct GSEDestructibleMeshGenComponent_SetCollisionResponseToAllChannels final
{
public:
	ECollisionResponse                            NewResponse;                                       // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x7];                                        // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UDestructibleComponent*                 Comp;                                              // 0x0008(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0010(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_11[0x7];                                       // 0x0011(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
//static_assert(alignof(GSEDestructibleMeshGenComponent_SetCollisionResponseToAllChannels) == 0x000008, "Wrong alignment on GSEDestructibleMeshGenComponent_SetCollisionResponseToAllChannels");
//static_assert(sizeof(GSEDestructibleMeshGenComponent_SetCollisionResponseToAllChannels) == 0x000018, "Wrong size on GSEDestructibleMeshGenComponent_SetCollisionResponseToAllChannels");
//static_assert(offsetof(GSEDestructibleMeshGenComponent_SetCollisionResponseToAllChannels, NewResponse) == 0x000000, "Member 'GSEDestructibleMeshGenComponent_SetCollisionResponseToAllChannels::NewResponse' has a wrong offset!");
//static_assert(offsetof(GSEDestructibleMeshGenComponent_SetCollisionResponseToAllChannels, Comp) == 0x000008, "Member 'GSEDestructibleMeshGenComponent_SetCollisionResponseToAllChannels::Comp' has a wrong offset!");
//static_assert(offsetof(GSEDestructibleMeshGenComponent_SetCollisionResponseToAllChannels, ReturnValue) == 0x000010, "Member 'GSEDestructibleMeshGenComponent_SetCollisionResponseToAllChannels::ReturnValue' has a wrong offset!");

// Function GSEngineExtent.GSEDestructibleMeshGenComponent.SetCollisionResponseToAllChannelsByName
// 0x0020 (0x0020 - 0x0000)
struct GSEDestructibleMeshGenComponent_SetCollisionResponseToAllChannelsByName final
{
public:
	ECollisionResponse                            NewResponse;                                       // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x7];                                        // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 Name_0;                                            // 0x0008(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0018(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_19[0x7];                                       // 0x0019(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
//static_assert(alignof(GSEDestructibleMeshGenComponent_SetCollisionResponseToAllChannelsByName) == 0x000008, "Wrong alignment on GSEDestructibleMeshGenComponent_SetCollisionResponseToAllChannelsByName");
//static_assert(sizeof(GSEDestructibleMeshGenComponent_SetCollisionResponseToAllChannelsByName) == 0x000020, "Wrong size on GSEDestructibleMeshGenComponent_SetCollisionResponseToAllChannelsByName");
//static_assert(offsetof(GSEDestructibleMeshGenComponent_SetCollisionResponseToAllChannelsByName, NewResponse) == 0x000000, "Member 'GSEDestructibleMeshGenComponent_SetCollisionResponseToAllChannelsByName::NewResponse' has a wrong offset!");
//static_assert(offsetof(GSEDestructibleMeshGenComponent_SetCollisionResponseToAllChannelsByName, Name_0) == 0x000008, "Member 'GSEDestructibleMeshGenComponent_SetCollisionResponseToAllChannelsByName::Name_0' has a wrong offset!");
//static_assert(offsetof(GSEDestructibleMeshGenComponent_SetCollisionResponseToAllChannelsByName, ReturnValue) == 0x000018, "Member 'GSEDestructibleMeshGenComponent_SetCollisionResponseToAllChannelsByName::ReturnValue' has a wrong offset!");

// Function GSEngineExtent.GSEDestructibleMeshGenComponent.SetCollisionResponseToChannel
// 0x0018 (0x0018 - 0x0000)
struct GSEDestructibleMeshGenComponent_SetCollisionResponseToChannel final
{
public:
	ECollisionChannel                             Channel;                                           // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ECollisionResponse                            NewResponse;                                       // 0x0001(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2[0x6];                                        // 0x0002(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	class UDestructibleComponent*                 Comp;                                              // 0x0008(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0010(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_11[0x7];                                       // 0x0011(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
//static_assert(alignof(GSEDestructibleMeshGenComponent_SetCollisionResponseToChannel) == 0x000008, "Wrong alignment on GSEDestructibleMeshGenComponent_SetCollisionResponseToChannel");
//static_assert(sizeof(GSEDestructibleMeshGenComponent_SetCollisionResponseToChannel) == 0x000018, "Wrong size on GSEDestructibleMeshGenComponent_SetCollisionResponseToChannel");
//static_assert(offsetof(GSEDestructibleMeshGenComponent_SetCollisionResponseToChannel, Channel) == 0x000000, "Member 'GSEDestructibleMeshGenComponent_SetCollisionResponseToChannel::Channel' has a wrong offset!");
//static_assert(offsetof(GSEDestructibleMeshGenComponent_SetCollisionResponseToChannel, NewResponse) == 0x000001, "Member 'GSEDestructibleMeshGenComponent_SetCollisionResponseToChannel::NewResponse' has a wrong offset!");
//static_assert(offsetof(GSEDestructibleMeshGenComponent_SetCollisionResponseToChannel, Comp) == 0x000008, "Member 'GSEDestructibleMeshGenComponent_SetCollisionResponseToChannel::Comp' has a wrong offset!");
//static_assert(offsetof(GSEDestructibleMeshGenComponent_SetCollisionResponseToChannel, ReturnValue) == 0x000010, "Member 'GSEDestructibleMeshGenComponent_SetCollisionResponseToChannel::ReturnValue' has a wrong offset!");

// Function GSEngineExtent.GSEDestructibleMeshGenComponent.SetCollisionResponseToChannelByName
// 0x0020 (0x0020 - 0x0000)
struct GSEDestructibleMeshGenComponent_SetCollisionResponseToChannelByName final
{
public:
	ECollisionChannel                             Channel;                                           // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ECollisionResponse                            NewResponse;                                       // 0x0001(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2[0x6];                                        // 0x0002(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 Name_0;                                            // 0x0008(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0018(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_19[0x7];                                       // 0x0019(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
//static_assert(alignof(GSEDestructibleMeshGenComponent_SetCollisionResponseToChannelByName) == 0x000008, "Wrong alignment on GSEDestructibleMeshGenComponent_SetCollisionResponseToChannelByName");
//static_assert(sizeof(GSEDestructibleMeshGenComponent_SetCollisionResponseToChannelByName) == 0x000020, "Wrong size on GSEDestructibleMeshGenComponent_SetCollisionResponseToChannelByName");
//static_assert(offsetof(GSEDestructibleMeshGenComponent_SetCollisionResponseToChannelByName, Channel) == 0x000000, "Member 'GSEDestructibleMeshGenComponent_SetCollisionResponseToChannelByName::Channel' has a wrong offset!");
//static_assert(offsetof(GSEDestructibleMeshGenComponent_SetCollisionResponseToChannelByName, NewResponse) == 0x000001, "Member 'GSEDestructibleMeshGenComponent_SetCollisionResponseToChannelByName::NewResponse' has a wrong offset!");
//static_assert(offsetof(GSEDestructibleMeshGenComponent_SetCollisionResponseToChannelByName, Name_0) == 0x000008, "Member 'GSEDestructibleMeshGenComponent_SetCollisionResponseToChannelByName::Name_0' has a wrong offset!");
//static_assert(offsetof(GSEDestructibleMeshGenComponent_SetCollisionResponseToChannelByName, ReturnValue) == 0x000018, "Member 'GSEDestructibleMeshGenComponent_SetCollisionResponseToChannelByName::ReturnValue' has a wrong offset!");

// Function GSEngineExtent.EditorFuncLibCommon.UMGTemplate_GetLearnID
// 0x000C (0x000C - 0x0000)
struct EditorFuncLibCommon_UMGTemplate_GetLearnID final
{
public:
	int32                                         UnitID;                                            // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         LearnID;                                           // 0x0004(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         ReturnValue;                                       // 0x0008(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
//static_assert(alignof(EditorFuncLibCommon_UMGTemplate_GetLearnID) == 0x000004, "Wrong alignment on EditorFuncLibCommon_UMGTemplate_GetLearnID");
//static_assert(sizeof(EditorFuncLibCommon_UMGTemplate_GetLearnID) == 0x00000C, "Wrong size on EditorFuncLibCommon_UMGTemplate_GetLearnID");
//static_assert(offsetof(EditorFuncLibCommon_UMGTemplate_GetLearnID, UnitID) == 0x000000, "Member 'EditorFuncLibCommon_UMGTemplate_GetLearnID::UnitID' has a wrong offset!");
//static_assert(offsetof(EditorFuncLibCommon_UMGTemplate_GetLearnID, LearnID) == 0x000004, "Member 'EditorFuncLibCommon_UMGTemplate_GetLearnID::LearnID' has a wrong offset!");
//static_assert(offsetof(EditorFuncLibCommon_UMGTemplate_GetLearnID, ReturnValue) == 0x000008, "Member 'EditorFuncLibCommon_UMGTemplate_GetLearnID::ReturnValue' has a wrong offset!");

// Function GSEngineExtent.GSECameraRig_Rail.GetSplineLength
// 0x0004 (0x0004 - 0x0000)
struct GSECameraRig_Rail_GetSplineLength final
{
public:
	float                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
//static_assert(alignof(GSECameraRig_Rail_GetSplineLength) == 0x000004, "Wrong alignment on GSECameraRig_Rail_GetSplineLength");
//static_assert(sizeof(GSECameraRig_Rail_GetSplineLength) == 0x000004, "Wrong size on GSECameraRig_Rail_GetSplineLength");
//static_assert(offsetof(GSECameraRig_Rail_GetSplineLength, ReturnValue) == 0x000000, "Member 'GSECameraRig_Rail_GetSplineLength::ReturnValue' has a wrong offset!");

// Function GSEngineExtent.GSViewPortRatioUtil.CalcCachedData
// 0x0028 (0x0028 - 0x0000)
struct GSViewPortRatioUtil_CalcCachedData final
{
public:
	class UObject*                                WorldContext;                                      // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         OutRefViewPortWidth;                               // 0x0008(0x0004)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         OutRefViewPortHeight;                              // 0x000C(0x0004)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         OutCfgMaxRatioMin;                                 // 0x0010(0x0004)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         OutCfgMaxRatioMax;                                 // 0x0014(0x0004)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         OutCfgMinRatio;                                    // 0x0018(0x0004)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         OutCfgRefHeightDPIScale;                           // 0x001C(0x0004)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EGSForceRatioType                             OutForceRatioTye;                                  // 0x0020(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EGSConstraintAspectRatioType                  OutConstraintAspectRatioType;                      // 0x0021(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_22[0x2];                                       // 0x0022(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         OutRatio;                                          // 0x0024(0x0004)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
//static_assert(alignof(GSViewPortRatioUtil_CalcCachedData) == 0x000008, "Wrong alignment on GSViewPortRatioUtil_CalcCachedData");
//static_assert(sizeof(GSViewPortRatioUtil_CalcCachedData) == 0x000028, "Wrong size on GSViewPortRatioUtil_CalcCachedData");
//static_assert(offsetof(GSViewPortRatioUtil_CalcCachedData, WorldContext) == 0x000000, "Member 'GSViewPortRatioUtil_CalcCachedData::WorldContext' has a wrong offset!");
//static_assert(offsetof(GSViewPortRatioUtil_CalcCachedData, OutRefViewPortWidth) == 0x000008, "Member 'GSViewPortRatioUtil_CalcCachedData::OutRefViewPortWidth' has a wrong offset!");
//static_assert(offsetof(GSViewPortRatioUtil_CalcCachedData, OutRefViewPortHeight) == 0x00000C, "Member 'GSViewPortRatioUtil_CalcCachedData::OutRefViewPortHeight' has a wrong offset!");
//static_assert(offsetof(GSViewPortRatioUtil_CalcCachedData, OutCfgMaxRatioMin) == 0x000010, "Member 'GSViewPortRatioUtil_CalcCachedData::OutCfgMaxRatioMin' has a wrong offset!");
//static_assert(offsetof(GSViewPortRatioUtil_CalcCachedData, OutCfgMaxRatioMax) == 0x000014, "Member 'GSViewPortRatioUtil_CalcCachedData::OutCfgMaxRatioMax' has a wrong offset!");
//static_assert(offsetof(GSViewPortRatioUtil_CalcCachedData, OutCfgMinRatio) == 0x000018, "Member 'GSViewPortRatioUtil_CalcCachedData::OutCfgMinRatio' has a wrong offset!");
//static_assert(offsetof(GSViewPortRatioUtil_CalcCachedData, OutCfgRefHeightDPIScale) == 0x00001C, "Member 'GSViewPortRatioUtil_CalcCachedData::OutCfgRefHeightDPIScale' has a wrong offset!");
//static_assert(offsetof(GSViewPortRatioUtil_CalcCachedData, OutForceRatioTye) == 0x000020, "Member 'GSViewPortRatioUtil_CalcCachedData::OutForceRatioTye' has a wrong offset!");
//static_assert(offsetof(GSViewPortRatioUtil_CalcCachedData, OutConstraintAspectRatioType) == 0x000021, "Member 'GSViewPortRatioUtil_CalcCachedData::OutConstraintAspectRatioType' has a wrong offset!");
//static_assert(offsetof(GSViewPortRatioUtil_CalcCachedData, OutRatio) == 0x000024, "Member 'GSViewPortRatioUtil_CalcCachedData::OutRatio' has a wrong offset!");

// Function GSEngineExtent.GSViewPortRatioUtil.CalcCameraRatioInner
// 0x0010 (0x0010 - 0x0000)
struct GSViewPortRatioUtil_CalcCameraRatioInner final
{
public:
	int32                                         RefViewPortWidth;                                  // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         RefViewPortHeight;                                 // 0x0004(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         TargetRatio;                                       // 0x0008(0x0004)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EGSConstraintAspectRatioType                  ConstraintAspectRatioType;                         // 0x000C(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_D[0x3];                                        // 0x000D(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
//static_assert(alignof(GSViewPortRatioUtil_CalcCameraRatioInner) == 0x000004, "Wrong alignment on GSViewPortRatioUtil_CalcCameraRatioInner");
//static_assert(sizeof(GSViewPortRatioUtil_CalcCameraRatioInner) == 0x000010, "Wrong size on GSViewPortRatioUtil_CalcCameraRatioInner");
//static_assert(offsetof(GSViewPortRatioUtil_CalcCameraRatioInner, RefViewPortWidth) == 0x000000, "Member 'GSViewPortRatioUtil_CalcCameraRatioInner::RefViewPortWidth' has a wrong offset!");
//static_assert(offsetof(GSViewPortRatioUtil_CalcCameraRatioInner, RefViewPortHeight) == 0x000004, "Member 'GSViewPortRatioUtil_CalcCameraRatioInner::RefViewPortHeight' has a wrong offset!");
//static_assert(offsetof(GSViewPortRatioUtil_CalcCameraRatioInner, TargetRatio) == 0x000008, "Member 'GSViewPortRatioUtil_CalcCameraRatioInner::TargetRatio' has a wrong offset!");
//static_assert(offsetof(GSViewPortRatioUtil_CalcCameraRatioInner, ConstraintAspectRatioType) == 0x00000C, "Member 'GSViewPortRatioUtil_CalcCameraRatioInner::ConstraintAspectRatioType' has a wrong offset!");

// Function GSEngineExtent.GSViewPortRatioUtil.CalcCameraRatioInnerWithRatioType
// 0x0014 (0x0014 - 0x0000)
struct GSViewPortRatioUtil_CalcCameraRatioInnerWithRatioType final
{
public:
	int32                                         RefViewPortWidth;                                  // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         RefViewPortHeight;                                 // 0x0004(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EGSForceRatioType                             InForceRatioType;                                  // 0x0008(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x3];                                        // 0x0009(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         TargetRatio;                                       // 0x000C(0x0004)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EGSConstraintAspectRatioType                  ConstraintAspectRatioType;                         // 0x0010(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_11[0x3];                                       // 0x0011(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
//static_assert(alignof(GSViewPortRatioUtil_CalcCameraRatioInnerWithRatioType) == 0x000004, "Wrong alignment on GSViewPortRatioUtil_CalcCameraRatioInnerWithRatioType");
//static_assert(sizeof(GSViewPortRatioUtil_CalcCameraRatioInnerWithRatioType) == 0x000014, "Wrong size on GSViewPortRatioUtil_CalcCameraRatioInnerWithRatioType");
//static_assert(offsetof(GSViewPortRatioUtil_CalcCameraRatioInnerWithRatioType, RefViewPortWidth) == 0x000000, "Member 'GSViewPortRatioUtil_CalcCameraRatioInnerWithRatioType::RefViewPortWidth' has a wrong offset!");
//static_assert(offsetof(GSViewPortRatioUtil_CalcCameraRatioInnerWithRatioType, RefViewPortHeight) == 0x000004, "Member 'GSViewPortRatioUtil_CalcCameraRatioInnerWithRatioType::RefViewPortHeight' has a wrong offset!");
//static_assert(offsetof(GSViewPortRatioUtil_CalcCameraRatioInnerWithRatioType, InForceRatioType) == 0x000008, "Member 'GSViewPortRatioUtil_CalcCameraRatioInnerWithRatioType::InForceRatioType' has a wrong offset!");
//static_assert(offsetof(GSViewPortRatioUtil_CalcCameraRatioInnerWithRatioType, TargetRatio) == 0x00000C, "Member 'GSViewPortRatioUtil_CalcCameraRatioInnerWithRatioType::TargetRatio' has a wrong offset!");
//static_assert(offsetof(GSViewPortRatioUtil_CalcCameraRatioInnerWithRatioType, ConstraintAspectRatioType) == 0x000010, "Member 'GSViewPortRatioUtil_CalcCameraRatioInnerWithRatioType::ConstraintAspectRatioType' has a wrong offset!");

// Function GSEngineExtent.GSViewPortRatioUtil.GetForceRatioType
// 0x0001 (0x0001 - 0x0000)
struct GSViewPortRatioUtil_GetForceRatioType final
{
public:
	EGSForceRatioType                             ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
//static_assert(alignof(GSViewPortRatioUtil_GetForceRatioType) == 0x000001, "Wrong alignment on GSViewPortRatioUtil_GetForceRatioType");
//static_assert(sizeof(GSViewPortRatioUtil_GetForceRatioType) == 0x000001, "Wrong size on GSViewPortRatioUtil_GetForceRatioType");
//static_assert(offsetof(GSViewPortRatioUtil_GetForceRatioType, ReturnValue) == 0x000000, "Member 'GSViewPortRatioUtil_GetForceRatioType::ReturnValue' has a wrong offset!");

// Function GSEngineExtent.GSViewPortRatioUtil.InitSetCfg
// 0x0010 (0x0010 - 0x0000)
struct GSViewPortRatioUtil_InitSetCfg final
{
public:
	float                                         InCfgMaxRatioMin;                                  // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         InCfgMaxRatioMax;                                  // 0x0004(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         InCfgMinRatio;                                     // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         InCfgRefHeightDPIScale;                            // 0x000C(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
//static_assert(alignof(GSViewPortRatioUtil_InitSetCfg) == 0x000004, "Wrong alignment on GSViewPortRatioUtil_InitSetCfg");
//static_assert(sizeof(GSViewPortRatioUtil_InitSetCfg) == 0x000010, "Wrong size on GSViewPortRatioUtil_InitSetCfg");
//static_assert(offsetof(GSViewPortRatioUtil_InitSetCfg, InCfgMaxRatioMin) == 0x000000, "Member 'GSViewPortRatioUtil_InitSetCfg::InCfgMaxRatioMin' has a wrong offset!");
//static_assert(offsetof(GSViewPortRatioUtil_InitSetCfg, InCfgMaxRatioMax) == 0x000004, "Member 'GSViewPortRatioUtil_InitSetCfg::InCfgMaxRatioMax' has a wrong offset!");
//static_assert(offsetof(GSViewPortRatioUtil_InitSetCfg, InCfgMinRatio) == 0x000008, "Member 'GSViewPortRatioUtil_InitSetCfg::InCfgMinRatio' has a wrong offset!");
//static_assert(offsetof(GSViewPortRatioUtil_InitSetCfg, InCfgRefHeightDPIScale) == 0x00000C, "Member 'GSViewPortRatioUtil_InitSetCfg::InCfgRefHeightDPIScale' has a wrong offset!");

// Function GSEngineExtent.GSViewPortRatioUtil.SetForceRatioType
// 0x0001 (0x0001 - 0x0000)
struct GSViewPortRatioUtil_SetForceRatioType final
{
public:
	EGSForceRatioType                             NewType;                                           // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
//static_assert(alignof(GSViewPortRatioUtil_SetForceRatioType) == 0x000001, "Wrong alignment on GSViewPortRatioUtil_SetForceRatioType");
//static_assert(sizeof(GSViewPortRatioUtil_SetForceRatioType) == 0x000001, "Wrong size on GSViewPortRatioUtil_SetForceRatioType");
//static_assert(offsetof(GSViewPortRatioUtil_SetForceRatioType, NewType) == 0x000000, "Member 'GSViewPortRatioUtil_SetForceRatioType::NewType' has a wrong offset!");

}

