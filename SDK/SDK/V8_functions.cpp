#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: V8

#include "Basic.hpp"

#include "V8_classes.hpp"
#include "V8_parameters.hpp"


namespace SDK
{

// Function V8.DirectoryWatcher.Contains
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// class FString                           File                                                   (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UDirectoryWatcher::Contains(const class FString& File)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("DirectoryWatcher", "Contains");

	Params::DirectoryWatcher_Contains Parms{};

	Parms.File = std::move(File);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function V8.DirectoryWatcher.Unwatch
// (Final, Native, Public, BlueprintCallable)

void UDirectoryWatcher::Unwatch()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("DirectoryWatcher", "Unwatch");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function V8.DirectoryWatcher.Watch
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// class FString                           Directory                                              (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UDirectoryWatcher::Watch(const class FString& Directory)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("DirectoryWatcher", "Watch");

	Params::DirectoryWatcher_Watch Parms{};

	Parms.Directory = std::move(Directory);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function V8.JavascriptComponent.Expose
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// class FString                           ExposedAs                                              (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class UObject*                          Object                                                 (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UJavascriptComponent::Expose(const class FString& ExposedAs, class UObject* Object)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("JavascriptComponent", "Expose");

	Params::JavascriptComponent_Expose Parms{};

	Parms.ExposedAs = std::move(ExposedAs);
	Parms.Object = Object;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function V8.JavascriptComponent.ForceGC
// (Final, Native, Public, BlueprintCallable)

void UJavascriptComponent::ForceGC()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("JavascriptComponent", "ForceGC");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function V8.JavascriptComponent.Invoke
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// class FName                             Name_0                                                 (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UJavascriptComponent::Invoke(class FName Name_0)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("JavascriptComponent", "Invoke");

	Params::JavascriptComponent_Invoke Parms{};

	Parms.Name_0 = Name_0;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// DelegateFunction V8.JavascriptComponent.JavascriptNameSignature__DelegateSignature
// (Public, Delegate)
// Parameters:
// class FName                             Name_0                                                 (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UJavascriptComponent::JavascriptNameSignature__DelegateSignature(class FName Name_0)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("JavascriptComponent", "JavascriptNameSignature__DelegateSignature");

	Params::JavascriptComponent_JavascriptNameSignature__DelegateSignature Parms{};

	Parms.Name_0 = Name_0;

	UObject::ProcessEvent(Func, &Parms);
}


// DelegateFunction V8.JavascriptComponent.JavascriptNoParamSignature__DelegateSignature
// (Public, Delegate)

void UJavascriptComponent::JavascriptNoParamSignature__DelegateSignature()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("JavascriptComponent", "JavascriptNoParamSignature__DelegateSignature");

	UObject::ProcessEvent(Func, nullptr);
}


// DelegateFunction V8.JavascriptComponent.JavascriptTickSignature__DelegateSignature
// (Public, Delegate)
// Parameters:
// float                                   DeltaSeconds                                           (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UJavascriptComponent::JavascriptTickSignature__DelegateSignature(float DeltaSeconds)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("JavascriptComponent", "JavascriptTickSignature__DelegateSignature");

	Params::JavascriptComponent_JavascriptTickSignature__DelegateSignature Parms{};

	Parms.DeltaSeconds = DeltaSeconds;

	UObject::ProcessEvent(Func, &Parms);
}


// Function V8.JavascriptComponent.ResolveAsset
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// class FName                             Name_0                                                 (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    bTryLoad                                               (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class UObject*                          ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class UObject* UJavascriptComponent::ResolveAsset(class FName Name_0, bool bTryLoad)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("JavascriptComponent", "ResolveAsset");

	Params::JavascriptComponent_ResolveAsset Parms{};

	Parms.Name_0 = Name_0;
	Parms.bTryLoad = bTryLoad;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function V8.JavascriptComponent.ResolveClass
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// class FName                             Name_0                                                 (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class UClass*                           ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class UClass* UJavascriptComponent::ResolveClass(class FName Name_0)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("JavascriptComponent", "ResolveClass");

	Params::JavascriptComponent_ResolveClass Parms{};

	Parms.Name_0 = Name_0;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function V8.JavascriptContext.CreateInspector
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// int32                                   Port                                                   (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UJavascriptContext::CreateInspector(int32 Port)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("JavascriptContext", "CreateInspector");

	Params::JavascriptContext_CreateInspector Parms{};

	Parms.Port = Port;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function V8.JavascriptContext.DestroyInspector
// (Final, Native, Public, BlueprintCallable)

void UJavascriptContext::DestroyInspector()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("JavascriptContext", "DestroyInspector");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function V8.JavascriptContext.Expose
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// class FString                           Name_0                                                 (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class UObject*                          Object                                                 (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UJavascriptContext::Expose(const class FString& Name_0, class UObject* Object)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("JavascriptContext", "Expose");

	Params::JavascriptContext_Expose Parms{};

	Parms.Name_0 = std::move(Name_0);
	Parms.Object = Object;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function V8.JavascriptContext.FindPathFile
// (Final, Native, Public, HasOutParams, BlueprintCallable)
// Parameters:
// class FString                           TargetRootPath                                         (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class FString                           TargetFileName                                         (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// TArray<class FString>                   OutFiles                                               (Parm, OutParm, ZeroConstructor, NativeAccessSpecifierPublic)

void UJavascriptContext::FindPathFile(const class FString& TargetRootPath, const class FString& TargetFileName, TArray<class FString>* OutFiles)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("JavascriptContext", "FindPathFile");

	Params::JavascriptContext_FindPathFile Parms{};

	Parms.TargetRootPath = std::move(TargetRootPath);
	Parms.TargetFileName = std::move(TargetFileName);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	if (OutFiles != nullptr)
		*OutFiles = std::move(Parms.OutFiles);
}


// Function V8.JavascriptContext.GetScriptFileFullPath
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// class FString                           Filename                                               (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class FString                           ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class FString UJavascriptContext::GetScriptFileFullPath(const class FString& Filename)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("JavascriptContext", "GetScriptFileFullPath");

	Params::JavascriptContext_GetScriptFileFullPath Parms{};

	Parms.Filename = std::move(Filename);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function V8.JavascriptContext.ReadScriptFile
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// class FString                           Filename                                               (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class FString                           ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class FString UJavascriptContext::ReadScriptFile(const class FString& Filename)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("JavascriptContext", "ReadScriptFile");

	Params::JavascriptContext_ReadScriptFile Parms{};

	Parms.Filename = std::move(Filename);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function V8.JavascriptContext.RegisterConsoleCommand
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// class FString                           Command                                                (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class FString                           Help                                                   (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FJavascriptFunction              Function                                               (Parm, NativeAccessSpecifierPublic)

void UJavascriptContext::RegisterConsoleCommand(const class FString& Command, const class FString& Help, const struct FJavascriptFunction& Function)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("JavascriptContext", "RegisterConsoleCommand");

	Params::JavascriptContext_RegisterConsoleCommand Parms{};

	Parms.Command = std::move(Command);
	Parms.Help = std::move(Help);
	Parms.Function = std::move(Function);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function V8.JavascriptContext.RequestV8GarbageCollection
// (Final, Native, Public, BlueprintCallable)

void UJavascriptContext::RequestV8GarbageCollection()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("JavascriptContext", "RequestV8GarbageCollection");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function V8.JavascriptContext.RunFile
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// class FString                           Filename                                               (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UJavascriptContext::RunFile(const class FString& Filename)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("JavascriptContext", "RunFile");

	Params::JavascriptContext_RunFile Parms{};

	Parms.Filename = std::move(Filename);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function V8.JavascriptContext.RunScript
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// class FString                           Script                                                 (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    bOutput                                                (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class FString                           ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class FString UJavascriptContext::RunScript(const class FString& Script, bool bOutput)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("JavascriptContext", "RunScript");

	Params::JavascriptContext_RunScript Parms{};

	Parms.Script = std::move(Script);
	Parms.bOutput = bOutput;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function V8.JavascriptContext.SetContextId
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// class FString                           Name_0                                                 (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UJavascriptContext::SetContextId(const class FString& Name_0)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("JavascriptContext", "SetContextId");

	Params::JavascriptContext_SetContextId Parms{};

	Parms.Name_0 = std::move(Name_0);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function V8.JavascriptContext.UnregisterConsoleCommand
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// class FString                           Command                                                (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UJavascriptContext::UnregisterConsoleCommand(const class FString& Command)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("JavascriptContext", "UnregisterConsoleCommand");

	Params::JavascriptContext_UnregisterConsoleCommand Parms{};

	Parms.Command = std::move(Command);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function V8.JavascriptContext.WriteAliases
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// class FString                           Target                                                 (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UJavascriptContext::WriteAliases(const class FString& Target)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("JavascriptContext", "WriteAliases");

	Params::JavascriptContext_WriteAliases Parms{};

	Parms.Target = std::move(Target);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function V8.JavascriptContext.WriteDTS
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// class FString                           Target                                                 (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    bIncludingTooltip                                      (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UJavascriptContext::WriteDTS(const class FString& Target, bool bIncludingTooltip)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("JavascriptContext", "WriteDTS");

	Params::JavascriptContext_WriteDTS Parms{};

	Parms.Target = std::move(Target);
	Parms.bIncludingTooltip = bIncludingTooltip;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function V8.JavascriptContext.IsDebugContext
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UJavascriptContext::IsDebugContext() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("JavascriptContext", "IsDebugContext");

	Params::JavascriptContext_IsDebugContext Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function V8.JavascriptDelegate.Fire
// (Final, Native, Public, BlueprintCallable)

void UJavascriptDelegate::Fire()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("JavascriptDelegate", "Fire");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function V8.JavascriptGlobalDelegates.Bind
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// class FString                           Key                                                    (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UJavascriptGlobalDelegates::Bind(const class FString& Key)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("JavascriptGlobalDelegates", "Bind");

	Params::JavascriptGlobalDelegates_Bind Parms{};

	Parms.Key = std::move(Key);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function V8.JavascriptGlobalDelegates.LevelAddedToWorld
// (Event, Public, BlueprintEvent)
// Parameters:
// class ULevel*                           Level                                                  (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class UWorld*                           World                                                  (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UJavascriptGlobalDelegates::LevelAddedToWorld(class ULevel* Level, class UWorld* World)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("JavascriptGlobalDelegates", "LevelAddedToWorld");

	Params::JavascriptGlobalDelegates_LevelAddedToWorld Parms{};

	Parms.Level = Level;
	Parms.World = World;

	UObject::ProcessEvent(Func, &Parms);
}


// Function V8.JavascriptGlobalDelegates.LevelRemovedFromWorld
// (Event, Public, BlueprintEvent)
// Parameters:
// class ULevel*                           Level                                                  (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class UWorld*                           World                                                  (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UJavascriptGlobalDelegates::LevelRemovedFromWorld(class ULevel* Level, class UWorld* World)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("JavascriptGlobalDelegates", "LevelRemovedFromWorld");

	Params::JavascriptGlobalDelegates_LevelRemovedFromWorld Parms{};

	Parms.Level = Level;
	Parms.World = World;

	UObject::ProcessEvent(Func, &Parms);
}


// Function V8.JavascriptGlobalDelegates.OnActorLabelChanged
// (Event, Public, BlueprintEvent)
// Parameters:
// class AActor*                           Actor                                                  (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UJavascriptGlobalDelegates::OnActorLabelChanged(class AActor* Actor)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("JavascriptGlobalDelegates", "OnActorLabelChanged");

	Params::JavascriptGlobalDelegates_OnActorLabelChanged Parms{};

	Parms.Actor = Actor;

	UObject::ProcessEvent(Func, &Parms);
}


// Function V8.JavascriptGlobalDelegates.OnAssetLoaded
// (Event, Public, BlueprintEvent)
// Parameters:
// class UObject*                          Object                                                 (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UJavascriptGlobalDelegates::OnAssetLoaded(class UObject* Object)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("JavascriptGlobalDelegates", "OnAssetLoaded");

	Params::JavascriptGlobalDelegates_OnAssetLoaded Parms{};

	Parms.Object = Object;

	UObject::ProcessEvent(Func, &Parms);
}


// Function V8.JavascriptGlobalDelegates.OnObjectModified
// (Event, Public, BlueprintEvent)
// Parameters:
// class UObject*                          Object                                                 (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UJavascriptGlobalDelegates::OnObjectModified(class UObject* Object)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("JavascriptGlobalDelegates", "OnObjectModified");

	Params::JavascriptGlobalDelegates_OnObjectModified Parms{};

	Parms.Object = Object;

	UObject::ProcessEvent(Func, &Parms);
}


// Function V8.JavascriptGlobalDelegates.OnObjectPropertyChanged_Friendly
// (Event, Public, HasOutParams, BlueprintEvent)
// Parameters:
// class UObject*                          InObject                                               (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// TFieldPath<struct FProperty>            Property                                               (ConstParm, Parm, OutParm, ReferenceParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// TFieldPath<struct FProperty>            MemberProperty                                         (ConstParm, Parm, OutParm, ReferenceParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32                                   ChangeType                                             (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UJavascriptGlobalDelegates::OnObjectPropertyChanged_Friendly(class UObject* InObject, const TFieldPath<struct FProperty>& Property, const TFieldPath<struct FProperty>& MemberProperty, int32 ChangeType)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("JavascriptGlobalDelegates", "OnObjectPropertyChanged_Friendly");

	Params::JavascriptGlobalDelegates_OnObjectPropertyChanged_Friendly Parms{};

	Parms.InObject = InObject;
	Parms.Property = Property;
	Parms.MemberProperty = MemberProperty;
	Parms.ChangeType = ChangeType;

	UObject::ProcessEvent(Func, &Parms);
}


// Function V8.JavascriptGlobalDelegates.OnObjectSaved
// (Event, Public, BlueprintEvent)
// Parameters:
// class UObject*                          Object                                                 (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UJavascriptGlobalDelegates::OnObjectSaved(class UObject* Object)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("JavascriptGlobalDelegates", "OnObjectSaved");

	Params::JavascriptGlobalDelegates_OnObjectSaved Parms{};

	Parms.Object = Object;

	UObject::ProcessEvent(Func, &Parms);
}


// Function V8.JavascriptGlobalDelegates.OnPostDuplicate_Friendly
// (Event, Public, BlueprintEvent)
// Parameters:
// class UWorld*                           World                                                  (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    bDuplicateForPIE                                       (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UJavascriptGlobalDelegates::OnPostDuplicate_Friendly(class UWorld* World, bool bDuplicateForPIE)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("JavascriptGlobalDelegates", "OnPostDuplicate_Friendly");

	Params::JavascriptGlobalDelegates_OnPostDuplicate_Friendly Parms{};

	Parms.World = World;
	Parms.bDuplicateForPIE = bDuplicateForPIE;

	UObject::ProcessEvent(Func, &Parms);
}


// Function V8.JavascriptGlobalDelegates.OnPostWorldCreation
// (Event, Public, BlueprintEvent)
// Parameters:
// class UWorld*                           World                                                  (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UJavascriptGlobalDelegates::OnPostWorldCreation(class UWorld* World)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("JavascriptGlobalDelegates", "OnPostWorldCreation");

	Params::JavascriptGlobalDelegates_OnPostWorldCreation Parms{};

	Parms.World = World;

	UObject::ProcessEvent(Func, &Parms);
}


// Function V8.JavascriptGlobalDelegates.OnPostWorldInitialization_Friendly
// (Event, Public, BlueprintEvent)
// Parameters:
// class UWorld*                           World                                                  (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UJavascriptGlobalDelegates::OnPostWorldInitialization_Friendly(class UWorld* World)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("JavascriptGlobalDelegates", "OnPostWorldInitialization_Friendly");

	Params::JavascriptGlobalDelegates_OnPostWorldInitialization_Friendly Parms{};

	Parms.World = World;

	UObject::ProcessEvent(Func, &Parms);
}


// Function V8.JavascriptGlobalDelegates.OnPreObjectPropertyChanged_Friendly
// (Event, Public, HasOutParams, BlueprintEvent)
// Parameters:
// class UObject*                          InObject                                               (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// TFieldPath<struct FProperty>            Property                                               (ConstParm, Parm, OutParm, ReferenceParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// TFieldPath<struct FProperty>            MemberProperty                                         (ConstParm, Parm, OutParm, ReferenceParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UJavascriptGlobalDelegates::OnPreObjectPropertyChanged_Friendly(class UObject* InObject, const TFieldPath<struct FProperty>& Property, const TFieldPath<struct FProperty>& MemberProperty)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("JavascriptGlobalDelegates", "OnPreObjectPropertyChanged_Friendly");

	Params::JavascriptGlobalDelegates_OnPreObjectPropertyChanged_Friendly Parms{};

	Parms.InObject = InObject;
	Parms.Property = Property;
	Parms.MemberProperty = MemberProperty;

	UObject::ProcessEvent(Func, &Parms);
}


// Function V8.JavascriptGlobalDelegates.OnPreWorldFinishDestroy
// (Event, Public, BlueprintEvent)
// Parameters:
// class UWorld*                           World                                                  (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UJavascriptGlobalDelegates::OnPreWorldFinishDestroy(class UWorld* World)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("JavascriptGlobalDelegates", "OnPreWorldFinishDestroy");

	Params::JavascriptGlobalDelegates_OnPreWorldFinishDestroy Parms{};

	Parms.World = World;

	UObject::ProcessEvent(Func, &Parms);
}


// Function V8.JavascriptGlobalDelegates.OnPreWorldInitialization_Friendly
// (Event, Public, BlueprintEvent)
// Parameters:
// class UWorld*                           World                                                  (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UJavascriptGlobalDelegates::OnPreWorldInitialization_Friendly(class UWorld* World)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("JavascriptGlobalDelegates", "OnPreWorldInitialization_Friendly");

	Params::JavascriptGlobalDelegates_OnPreWorldInitialization_Friendly Parms{};

	Parms.World = World;

	UObject::ProcessEvent(Func, &Parms);
}


// Function V8.JavascriptGlobalDelegates.OnWorldCleanup
// (Event, Public, BlueprintEvent)
// Parameters:
// class UWorld*                           World                                                  (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    bSessionEnded                                          (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    bCleanupResources                                      (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UJavascriptGlobalDelegates::OnWorldCleanup(class UWorld* World, bool bSessionEnded, bool bCleanupResources)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("JavascriptGlobalDelegates", "OnWorldCleanup");

	Params::JavascriptGlobalDelegates_OnWorldCleanup Parms{};

	Parms.World = World;
	Parms.bSessionEnded = bSessionEnded;
	Parms.bCleanupResources = bCleanupResources;

	UObject::ProcessEvent(Func, &Parms);
}


// Function V8.JavascriptGlobalDelegates.PackageCreatedForLoad
// (Event, Public, BlueprintEvent)
// Parameters:
// class UPackage*                         InPackage                                              (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UJavascriptGlobalDelegates::PackageCreatedForLoad(class UPackage* InPackage)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("JavascriptGlobalDelegates", "PackageCreatedForLoad");

	Params::JavascriptGlobalDelegates_PackageCreatedForLoad Parms{};

	Parms.InPackage = InPackage;

	UObject::ProcessEvent(Func, &Parms);
}


// Function V8.JavascriptGlobalDelegates.PostApplyLevelOffset
// (Event, Public, HasOutParams, HasDefaults, BlueprintEvent)
// Parameters:
// class ULevel*                           Level                                                  (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class UWorld*                           World                                                  (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FVector                          Offset                                                 (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    Flag                                                   (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UJavascriptGlobalDelegates::PostApplyLevelOffset(class ULevel* Level, class UWorld* World, const struct FVector& Offset, bool Flag)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("JavascriptGlobalDelegates", "PostApplyLevelOffset");

	Params::JavascriptGlobalDelegates_PostApplyLevelOffset Parms{};

	Parms.Level = Level;
	Parms.World = World;
	Parms.Offset = std::move(Offset);
	Parms.Flag = Flag;

	UObject::ProcessEvent(Func, &Parms);
}


// Function V8.JavascriptGlobalDelegates.PostDemoPlay
// (Event, Public, BlueprintEvent)

void UJavascriptGlobalDelegates::PostDemoPlay()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("JavascriptGlobalDelegates", "PostDemoPlay");

	UObject::ProcessEvent(Func, nullptr);
}


// Function V8.JavascriptGlobalDelegates.PostGarbageCollect
// (Event, Public, BlueprintEvent)

void UJavascriptGlobalDelegates::PostGarbageCollect()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("JavascriptGlobalDelegates", "PostGarbageCollect");

	UObject::ProcessEvent(Func, nullptr);
}


// Function V8.JavascriptGlobalDelegates.PostLoadMapWithWorld
// (Event, Public, BlueprintEvent)
// Parameters:
// class UWorld*                           World                                                  (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UJavascriptGlobalDelegates::PostLoadMapWithWorld(class UWorld* World)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("JavascriptGlobalDelegates", "PostLoadMapWithWorld");

	Params::JavascriptGlobalDelegates_PostLoadMapWithWorld Parms{};

	Parms.World = World;

	UObject::ProcessEvent(Func, &Parms);
}


// Function V8.JavascriptGlobalDelegates.PreGarbageCollectDelegate
// (Event, Public, BlueprintEvent)

void UJavascriptGlobalDelegates::PreGarbageCollectDelegate()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("JavascriptGlobalDelegates", "PreGarbageCollectDelegate");

	UObject::ProcessEvent(Func, nullptr);
}


// Function V8.JavascriptGlobalDelegates.PreLoadMap
// (Event, Public, BlueprintEvent)
// Parameters:
// class FString                           MapName                                                (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UJavascriptGlobalDelegates::PreLoadMap(const class FString& MapName)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("JavascriptGlobalDelegates", "PreLoadMap");

	Params::JavascriptGlobalDelegates_PreLoadMap Parms{};

	Parms.MapName = std::move(MapName);

	UObject::ProcessEvent(Func, &Parms);
}


// Function V8.JavascriptGlobalDelegates.RedirectorFollowed
// (Event, Public, BlueprintEvent)
// Parameters:
// class FString                           PackageName                                            (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class UObject*                          Redirector                                             (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UJavascriptGlobalDelegates::RedirectorFollowed(const class FString& PackageName, class UObject* Redirector)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("JavascriptGlobalDelegates", "RedirectorFollowed");

	Params::JavascriptGlobalDelegates_RedirectorFollowed Parms{};

	Parms.PackageName = std::move(PackageName);
	Parms.Redirector = Redirector;

	UObject::ProcessEvent(Func, &Parms);
}


// Function V8.JavascriptGlobalDelegates.Unbind
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// class FString                           Key                                                    (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UJavascriptGlobalDelegates::Unbind(const class FString& Key)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("JavascriptGlobalDelegates", "Unbind");

	Params::JavascriptGlobalDelegates_Unbind Parms{};

	Parms.Key = std::move(Key);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function V8.JavascriptGlobalDelegates.UnbindAll
// (Final, Native, Public, BlueprintCallable)

void UJavascriptGlobalDelegates::UnbindAll()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("JavascriptGlobalDelegates", "UnbindAll");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function V8.JavascriptIsolate.CreateContext
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// class UJavascriptContext*               ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class UJavascriptContext* UJavascriptIsolate::CreateContext()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("JavascriptIsolate", "CreateContext");

	Params::JavascriptIsolate_CreateContext Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function V8.JavascriptIsolate.GetHeapStatistics
// (Final, Native, Public, HasOutParams, BlueprintCallable)
// Parameters:
// struct FJavascriptHeapStatistics        Statistics                                             (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)

void UJavascriptIsolate::GetHeapStatistics(struct FJavascriptHeapStatistics* Statistics)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("JavascriptIsolate", "GetHeapStatistics");

	Params::JavascriptIsolate_GetHeapStatistics Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	if (Statistics != nullptr)
		*Statistics = std::move(Parms.Statistics);
}


// Function V8.JavascriptIsolate.Init
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// bool                                    bIsEditor                                              (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UJavascriptIsolate::Init(bool bIsEditor)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("JavascriptIsolate", "Init");

	Params::JavascriptIsolate_Init Parms{};

	Parms.bIsEditor = bIsEditor;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function V8.JavascriptLibrary.Actor_GetWorld
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// class AActor*                           Actor                                                  (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class UWorld*                           ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class UWorld* UJavascriptLibrary::Actor_GetWorld(class AActor* Actor)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("JavascriptLibrary", "Actor_GetWorld");

	Params::JavascriptLibrary_Actor_GetWorld Parms{};

	Parms.Actor = Actor;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function V8.JavascriptLibrary.AddDynamicBinding
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// class UClass*                           Outer_0                                                (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class UDynamicBlueprintBinding*         BindingObject                                          (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UJavascriptLibrary::AddDynamicBinding(class UClass* Outer_0, class UDynamicBlueprintBinding* BindingObject)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("JavascriptLibrary", "AddDynamicBinding");

	Params::JavascriptLibrary_AddDynamicBinding Parms{};

	Parms.Outer_0 = Outer_0;
	Parms.BindingObject = BindingObject;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function V8.JavascriptLibrary.AddMessage
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// struct FJavascriptStat                  Stat                                                   (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
// EJavascriptStatOperation                InStatOperation                                        (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UJavascriptLibrary::AddMessage(const struct FJavascriptStat& Stat, EJavascriptStatOperation InStatOperation)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("JavascriptLibrary", "AddMessage");

	Params::JavascriptLibrary_AddMessage Parms{};

	Parms.Stat = std::move(Stat);
	Parms.InStatOperation = InStatOperation;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function V8.JavascriptLibrary.AddMessage_float
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// struct FJavascriptStat                  Stat                                                   (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
// EJavascriptStatOperation                InStatOperation                                        (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   Value                                                  (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    bIsCycle                                               (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UJavascriptLibrary::AddMessage_float(const struct FJavascriptStat& Stat, EJavascriptStatOperation InStatOperation, float Value, bool bIsCycle)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("JavascriptLibrary", "AddMessage_float");

	Params::JavascriptLibrary_AddMessage_float Parms{};

	Parms.Stat = std::move(Stat);
	Parms.InStatOperation = InStatOperation;
	Parms.Value = Value;
	Parms.bIsCycle = bIsCycle;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function V8.JavascriptLibrary.AddMessage_int
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// struct FJavascriptStat                  Stat                                                   (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
// EJavascriptStatOperation                InStatOperation                                        (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32                                   Value                                                  (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    bIsCycle                                               (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UJavascriptLibrary::AddMessage_int(const struct FJavascriptStat& Stat, EJavascriptStatOperation InStatOperation, int32 Value, bool bIsCycle)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("JavascriptLibrary", "AddMessage_int");

	Params::JavascriptLibrary_AddMessage_int Parms{};

	Parms.Stat = std::move(Stat);
	Parms.InStatOperation = InStatOperation;
	Parms.Value = Value;
	Parms.bIsCycle = bIsCycle;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function V8.JavascriptLibrary.CallJS
// (Final, Native, Static, Public, HasOutParams, BlueprintCallable)
// Parameters:
// struct FJavascriptFunction              Function                                               (Parm, NativeAccessSpecifierPublic)
// struct FJavascriptStubStruct            CustomStruct                                           (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)

void UJavascriptLibrary::CallJS(const struct FJavascriptFunction& Function, const struct FJavascriptStubStruct& CustomStruct)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("JavascriptLibrary", "CallJS");

	Params::JavascriptLibrary_CallJS Parms{};

	Parms.Function = std::move(Function);
	Parms.CustomStruct = std::move(CustomStruct);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function V8.JavascriptLibrary.ClipboardCopy
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// class FString                           String                                                 (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UJavascriptLibrary::ClipboardCopy(const class FString& String)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("JavascriptLibrary", "ClipboardCopy");

	Params::JavascriptLibrary_ClipboardCopy Parms{};

	Parms.String = std::move(String);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function V8.JavascriptLibrary.ClipboardPaste
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// class FString                           ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class FString UJavascriptLibrary::ClipboardPaste()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("JavascriptLibrary", "ClipboardPaste");

	Params::JavascriptLibrary_ClipboardPaste Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function V8.JavascriptLibrary.ConvertRelativePathToFull
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// class UObject*                          Object                                                 (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class FString                           RelativePath                                           (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class FString                           ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class FString UJavascriptLibrary::ConvertRelativePathToFull(class UObject* Object, const class FString& RelativePath)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("JavascriptLibrary", "ConvertRelativePathToFull");

	Params::JavascriptLibrary_ConvertRelativePathToFull Parms{};

	Parms.Object = Object;
	Parms.RelativePath = std::move(RelativePath);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function V8.JavascriptLibrary.CreateEnum
// (Final, Native, Static, Public, HasOutParams, BlueprintCallable)
// Parameters:
// class UObject*                          Outer_0                                                (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class FName                             Name_0                                                 (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// TArray<class FName>                     DisplayNames                                           (Parm, ZeroConstructor, NativeAccessSpecifierPublic)
// TArray<class FString>                   Flags_0                                                (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
// class UEnum*                            ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class UEnum* UJavascriptLibrary::CreateEnum(class UObject* Outer_0, class FName Name_0, const TArray<class FName>& DisplayNames, const TArray<class FString>& Flags_0)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("JavascriptLibrary", "CreateEnum");

	Params::JavascriptLibrary_CreateEnum Parms{};

	Parms.Outer_0 = Outer_0;
	Parms.Name_0 = Name_0;
	Parms.DisplayNames = std::move(DisplayNames);
	Parms.Flags_0 = std::move(Flags_0);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function V8.JavascriptLibrary.CreateInternetAddr
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// struct FJavascriptInternetAddr          ReturnValue                                            (Parm, OutParm, ReturnParm, NativeAccessSpecifierPublic)

struct FJavascriptInternetAddr UJavascriptLibrary::CreateInternetAddr()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("JavascriptLibrary", "CreateInternetAddr");

	Params::JavascriptLibrary_CreateInternetAddr Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function V8.JavascriptLibrary.CreateLogCategory
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// class FString                           CategoryName                                           (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// ELogVerbosity_JS                        InDefaultVerbosity                                     (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FJavascriptLogCategory           ReturnValue                                            (Parm, OutParm, ReturnParm, NativeAccessSpecifierPublic)

struct FJavascriptLogCategory UJavascriptLibrary::CreateLogCategory(const class FString& CategoryName, ELogVerbosity_JS InDefaultVerbosity)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("JavascriptLibrary", "CreateLogCategory");

	Params::JavascriptLibrary_CreateLogCategory Parms{};

	Parms.CategoryName = std::move(CategoryName);
	Parms.InDefaultVerbosity = InDefaultVerbosity;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function V8.JavascriptLibrary.CreatePackage
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// class UObject*                          Outer_0                                                (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class FString                           PackageName                                            (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class UPackage*                         ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class UPackage* UJavascriptLibrary::CreatePackage(class UObject* Outer_0, const class FString& PackageName)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("JavascriptLibrary", "CreatePackage");

	Params::JavascriptLibrary_CreatePackage Parms{};

	Parms.Outer_0 = Outer_0;
	Parms.PackageName = std::move(PackageName);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function V8.JavascriptLibrary.CreateSocket
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// class FName                             SocketType                                             (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class FString                           Description                                            (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    bForceUDP                                              (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FJavascriptSocket                ReturnValue                                            (Parm, OutParm, ReturnParm, NativeAccessSpecifierPublic)

struct FJavascriptSocket UJavascriptLibrary::CreateSocket(class FName SocketType, const class FString& Description, bool bForceUDP)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("JavascriptLibrary", "CreateSocket");

	Params::JavascriptLibrary_CreateSocket Parms{};

	Parms.SocketType = SocketType;
	Parms.Description = std::move(Description);
	Parms.bForceUDP = bForceUDP;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function V8.JavascriptLibrary.CreateStreamableManager
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// struct FJavascriptStreamableManager     ReturnValue                                            (Parm, OutParm, ReturnParm, NativeAccessSpecifierPublic)

struct FJavascriptStreamableManager UJavascriptLibrary::CreateStreamableManager()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("JavascriptLibrary", "CreateStreamableManager");

	Params::JavascriptLibrary_CreateStreamableManager Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function V8.JavascriptLibrary.DeleteDirectory
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// class FString                           Path                                                   (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    RequireExists                                          (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    Tree                                                   (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UJavascriptLibrary::DeleteDirectory(const class FString& Path, bool RequireExists, bool Tree)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("JavascriptLibrary", "DeleteDirectory");

	Params::JavascriptLibrary_DeleteDirectory Parms{};

	Parms.Path = std::move(Path);
	Parms.RequireExists = RequireExists;
	Parms.Tree = Tree;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function V8.JavascriptLibrary.DeleteFile
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// class FString                           Filename                                               (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    ReadOnly                                               (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UJavascriptLibrary::DeleteFile(const class FString& Filename, bool ReadOnly)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("JavascriptLibrary", "DeleteFile");

	Params::JavascriptLibrary_DeleteFile Parms{};

	Parms.Filename = std::move(Filename);
	Parms.ReadOnly = ReadOnly;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function V8.JavascriptLibrary.DirectoryExists
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// class FString                           InDirectory                                            (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UJavascriptLibrary::DirectoryExists(const class FString& InDirectory)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("JavascriptLibrary", "DirectoryExists");

	Params::JavascriptLibrary_DirectoryExists Parms{};

	Parms.InDirectory = std::move(InDirectory);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function V8.JavascriptLibrary.Duplicate
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// class UObject*                          Object                                                 (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class UObject*                          Outer_0                                                (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class FName                             Name_0                                                 (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class UObject*                          ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class UObject* UJavascriptLibrary::Duplicate(class UObject* Object, class UObject* Outer_0, class FName Name_0)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("JavascriptLibrary", "Duplicate");

	Params::JavascriptLibrary_Duplicate Parms{};

	Parms.Object = Object;
	Parms.Outer_0 = Outer_0;
	Parms.Name_0 = Name_0;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function V8.JavascriptLibrary.FileExists
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// class FString                           Filename                                               (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UJavascriptLibrary::FileExists(const class FString& Filename)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("JavascriptLibrary", "FileExists");

	Params::JavascriptLibrary_FileExists Parms{};

	Parms.Filename = std::move(Filename);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function V8.JavascriptLibrary.FindObjectWithOuter
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// class UObject*                          Outer_0                                                (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class UClass*                           ClassToLookFor                                         (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class FName                             NameToLookFor                                          (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class UObject*                          ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class UObject* UJavascriptLibrary::FindObjectWithOuter(class UObject* Outer_0, class UClass* ClassToLookFor, class FName NameToLookFor)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("JavascriptLibrary", "FindObjectWithOuter");

	Params::JavascriptLibrary_FindObjectWithOuter Parms{};

	Parms.Outer_0 = Outer_0;
	Parms.ClassToLookFor = ClassToLookFor;
	Parms.NameToLookFor = NameToLookFor;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function V8.JavascriptLibrary.FindPackage
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// class UObject*                          InOuter                                                (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class FString                           PackageName                                            (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class UPackage*                         ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class UPackage* UJavascriptLibrary::FindPackage(class UObject* InOuter, const class FString& PackageName)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("JavascriptLibrary", "FindPackage");

	Params::JavascriptLibrary_FindPackage Parms{};

	Parms.InOuter = InOuter;
	Parms.PackageName = std::move(PackageName);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function V8.JavascriptLibrary.GenerateNavigation
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// class UWorld*                           InWorld                                                (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class ARecastNavMesh*                   NavData                                                (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UJavascriptLibrary::GenerateNavigation(class UWorld* InWorld, class ARecastNavMesh* NavData)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("JavascriptLibrary", "GenerateNavigation");

	Params::JavascriptLibrary_GenerateNavigation Parms{};

	Parms.InWorld = InWorld;
	Parms.NavData = NavData;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function V8.JavascriptLibrary.GetAllActorsOfClassAndTags
// (Final, Native, Static, Public, HasOutParams, BlueprintCallable)
// Parameters:
// class UObject*                          WorldContextObject                                     (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// TSubclassOf<class AActor>               ActorClass                                             (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// TArray<class FName>                     Tags_Accept                                            (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
// TArray<class FName>                     Tags_Deny                                              (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
// TArray<class AActor*>                   OutActors                                              (Parm, OutParm, ZeroConstructor, NativeAccessSpecifierPublic)

void UJavascriptLibrary::GetAllActorsOfClassAndTags(class UObject* WorldContextObject, TSubclassOf<class AActor> ActorClass, const TArray<class FName>& Tags_Accept, const TArray<class FName>& Tags_Deny, TArray<class AActor*>* OutActors)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("JavascriptLibrary", "GetAllActorsOfClassAndTags");

	Params::JavascriptLibrary_GetAllActorsOfClassAndTags Parms{};

	Parms.WorldContextObject = WorldContextObject;
	Parms.ActorClass = ActorClass;
	Parms.Tags_Accept = std::move(Tags_Accept);
	Parms.Tags_Deny = std::move(Tags_Deny);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	if (OutActors != nullptr)
		*OutActors = std::move(Parms.OutActors);
}


// Function V8.JavascriptLibrary.GetAllActorsOfClassAndTagsInCurrentLevel
// (Final, Native, Static, Public, HasOutParams, BlueprintCallable)
// Parameters:
// class UObject*                          WorldContextObject                                     (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// TSubclassOf<class AActor>               ActorClass                                             (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// TArray<class FName>                     Tags_Accept                                            (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
// TArray<class FName>                     Tags_Deny                                              (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
// TArray<class AActor*>                   OutActors                                              (Parm, OutParm, ZeroConstructor, NativeAccessSpecifierPublic)

void UJavascriptLibrary::GetAllActorsOfClassAndTagsInCurrentLevel(class UObject* WorldContextObject, TSubclassOf<class AActor> ActorClass, const TArray<class FName>& Tags_Accept, const TArray<class FName>& Tags_Deny, TArray<class AActor*>* OutActors)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("JavascriptLibrary", "GetAllActorsOfClassAndTagsInCurrentLevel");

	Params::JavascriptLibrary_GetAllActorsOfClassAndTagsInCurrentLevel Parms{};

	Parms.WorldContextObject = WorldContextObject;
	Parms.ActorClass = ActorClass;
	Parms.Tags_Accept = std::move(Tags_Accept);
	Parms.Tags_Deny = std::move(Tags_Deny);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	if (OutActors != nullptr)
		*OutActors = std::move(Parms.OutActors);
}


// Function V8.JavascriptLibrary.GetArchetypePathName
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// class UObject*                          Object                                                 (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class FString                           ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class FString UJavascriptLibrary::GetArchetypePathName(class UObject* Object)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("JavascriptLibrary", "GetArchetypePathName");

	Params::JavascriptLibrary_GetArchetypePathName Parms{};

	Parms.Object = Object;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function V8.JavascriptLibrary.GetBailoutReason
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// struct FJavascriptProfileNode           Node                                                   (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
// class FString                           ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class FString UJavascriptLibrary::GetBailoutReason(const struct FJavascriptProfileNode& Node)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("JavascriptLibrary", "GetBailoutReason");

	Params::JavascriptLibrary_GetBailoutReason Parms{};

	Parms.Node = std::move(Node);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function V8.JavascriptLibrary.GetBlueprintGeneratedClass
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// class UBlueprint*                       Blueprint                                              (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class UClass*                           ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class UClass* UJavascriptLibrary::GetBlueprintGeneratedClass(class UBlueprint* Blueprint)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("JavascriptLibrary", "GetBlueprintGeneratedClass");

	Params::JavascriptLibrary_GetBlueprintGeneratedClass Parms{};

	Parms.Blueprint = Blueprint;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function V8.JavascriptLibrary.GetBlueprintGeneratedClassFromPath
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// class FString                           Path                                                   (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class UClass*                           ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class UClass* UJavascriptLibrary::GetBlueprintGeneratedClassFromPath(const class FString& Path)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("JavascriptLibrary", "GetBlueprintGeneratedClassFromPath");

	Params::JavascriptLibrary_GetBlueprintGeneratedClassFromPath Parms{};

	Parms.Path = std::move(Path);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function V8.JavascriptLibrary.GetCallUid
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// struct FJavascriptProfileNode           Node                                                   (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
// int32                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

int32 UJavascriptLibrary::GetCallUid(const struct FJavascriptProfileNode& Node)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("JavascriptLibrary", "GetCallUid");

	Params::JavascriptLibrary_GetCallUid Parms{};

	Parms.Node = std::move(Node);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function V8.JavascriptLibrary.GetCategoryName
// (Final, Native, Static, Public, HasOutParams, BlueprintCallable)
// Parameters:
// struct FJavascriptLogCategory           Category                                               (ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
// class FName                             ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class FName UJavascriptLibrary::GetCategoryName(const struct FJavascriptLogCategory& Category)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("JavascriptLibrary", "GetCategoryName");

	Params::JavascriptLibrary_GetCategoryName Parms{};

	Parms.Category = std::move(Category);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function V8.JavascriptLibrary.GetChild
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// struct FJavascriptProfileNode           Node                                                   (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
// int32                                   Index_0                                                (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FJavascriptProfileNode           ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)

struct FJavascriptProfileNode UJavascriptLibrary::GetChild(const struct FJavascriptProfileNode& Node, int32 Index_0)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("JavascriptLibrary", "GetChild");

	Params::JavascriptLibrary_GetChild Parms{};

	Parms.Node = std::move(Node);
	Parms.Index_0 = Index_0;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function V8.JavascriptLibrary.GetChildrenCount
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// struct FJavascriptProfileNode           Node                                                   (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
// int32                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

int32 UJavascriptLibrary::GetChildrenCount(const struct FJavascriptProfileNode& Node)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("JavascriptLibrary", "GetChildrenCount");

	Params::JavascriptLibrary_GetChildrenCount Parms{};

	Parms.Node = std::move(Node);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function V8.JavascriptLibrary.GetClassPathName
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// class UClass*                           Class_0                                                (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class FString                           ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class FString UJavascriptLibrary::GetClassPathName(class UClass* Class_0)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("JavascriptLibrary", "GetClassPathName");

	Params::JavascriptLibrary_GetClassPathName Parms{};

	Parms.Class_0 = Class_0;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function V8.JavascriptLibrary.GetColumnNumber
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// struct FJavascriptProfileNode           Node                                                   (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
// int32                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

int32 UJavascriptLibrary::GetColumnNumber(const struct FJavascriptProfileNode& Node)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("JavascriptLibrary", "GetColumnNumber");

	Params::JavascriptLibrary_GetColumnNumber Parms{};

	Parms.Node = std::move(Node);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function V8.JavascriptLibrary.GetComponentsByClass
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// class AActor*                           Actor                                                  (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// TSubclassOf<class UActorComponent>      ComponentClass                                         (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// TArray<class UActorComponent*>          ReturnValue                                            (ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, ContainsInstancedReference, NativeAccessSpecifierPublic)

TArray<class UActorComponent*> UJavascriptLibrary::GetComponentsByClass(class AActor* Actor, TSubclassOf<class UActorComponent> ComponentClass)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("JavascriptLibrary", "GetComponentsByClass");

	Params::JavascriptLibrary_GetComponentsByClass Parms{};

	Parms.Actor = Actor;
	Parms.ComponentClass = ComponentClass;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function V8.JavascriptLibrary.GetCurrentProcessId
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// int32                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

int32 UJavascriptLibrary::GetCurrentProcessId()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("JavascriptLibrary", "GetCurrentProcessId");

	Params::JavascriptLibrary_GetCurrentProcessId Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function V8.JavascriptLibrary.GetDeoptInfo_Reason
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// struct FJavascriptProfileNode           Node                                                   (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
// int32                                   Index_0                                                (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class FString                           ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class FString UJavascriptLibrary::GetDeoptInfo_Reason(const struct FJavascriptProfileNode& Node, int32 Index_0)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("JavascriptLibrary", "GetDeoptInfo_Reason");

	Params::JavascriptLibrary_GetDeoptInfo_Reason Parms{};

	Parms.Node = std::move(Node);
	Parms.Index_0 = Index_0;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function V8.JavascriptLibrary.GetDeoptInfo_Stack
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// struct FJavascriptProfileNode           Node                                                   (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
// int32                                   Index_0                                                (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class FString                           ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class FString UJavascriptLibrary::GetDeoptInfo_Stack(const struct FJavascriptProfileNode& Node, int32 Index_0)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("JavascriptLibrary", "GetDeoptInfo_Stack");

	Params::JavascriptLibrary_GetDeoptInfo_Stack Parms{};

	Parms.Node = std::move(Node);
	Parms.Index_0 = Index_0;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function V8.JavascriptLibrary.GetDeoptInfosCount
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// struct FJavascriptProfileNode           Node                                                   (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
// int32                                   Index_0                                                (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

int32 UJavascriptLibrary::GetDeoptInfosCount(const struct FJavascriptProfileNode& Node, int32 Index_0)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("JavascriptLibrary", "GetDeoptInfosCount");

	Params::JavascriptLibrary_GetDeoptInfosCount Parms{};

	Parms.Node = std::move(Node);
	Parms.Index_0 = Index_0;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function V8.JavascriptLibrary.GetDerivedClasses
// (Final, Native, Static, Public, HasOutParams, BlueprintCallable)
// Parameters:
// class UClass*                           ClassToLookFor                                         (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// TArray<class UClass*>                   Results                                                (Parm, OutParm, ZeroConstructor, NativeAccessSpecifierPublic)
// bool                                    bRecursive                                             (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UJavascriptLibrary::GetDerivedClasses(class UClass* ClassToLookFor, TArray<class UClass*>* Results, bool bRecursive)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("JavascriptLibrary", "GetDerivedClasses");

	Params::JavascriptLibrary_GetDerivedClasses Parms{};

	Parms.ClassToLookFor = ClassToLookFor;
	Parms.bRecursive = bRecursive;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	if (Results != nullptr)
		*Results = std::move(Parms.Results);
}


// Function V8.JavascriptLibrary.GetDir
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// class UObject*                          Object                                                 (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class FString                           WhichDir                                               (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class FString                           ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class FString UJavascriptLibrary::GetDir(class UObject* Object, const class FString& WhichDir)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("JavascriptLibrary", "GetDir");

	Params::JavascriptLibrary_GetDir Parms{};

	Parms.Object = Object;
	Parms.WhichDir = std::move(WhichDir);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function V8.JavascriptLibrary.GetDynamicBinding
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// class UClass*                           Outer_0                                                (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// TSubclassOf<class UDynamicBlueprintBinding>BindingObjectClass                                     (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class UDynamicBlueprintBinding*         ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class UDynamicBlueprintBinding* UJavascriptLibrary::GetDynamicBinding(class UClass* Outer_0, TSubclassOf<class UDynamicBlueprintBinding> BindingObjectClass)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("JavascriptLibrary", "GetDynamicBinding");

	Params::JavascriptLibrary_GetDynamicBinding Parms{};

	Parms.Outer_0 = Outer_0;
	Parms.BindingObjectClass = BindingObjectClass;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function V8.JavascriptLibrary.GetFields
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// class UObject*                          Object                                                 (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    bIncludeSuper                                          (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// TArray<class UField*>                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, NativeAccessSpecifierPublic)

TArray<class UField*> UJavascriptLibrary::GetFields(const class UObject* Object, bool bIncludeSuper)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("JavascriptLibrary", "GetFields");

	Params::JavascriptLibrary_GetFields Parms{};

	Parms.Object = Object;
	Parms.bIncludeSuper = bIncludeSuper;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function V8.JavascriptLibrary.GetFileSize
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// class UObject*                          Object                                                 (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class FString                           Filename                                               (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

int32 UJavascriptLibrary::GetFileSize(class UObject* Object, const class FString& Filename)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("JavascriptLibrary", "GetFileSize");

	Params::JavascriptLibrary_GetFileSize Parms{};

	Parms.Object = Object;
	Parms.Filename = std::move(Filename);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function V8.JavascriptLibrary.GetFunctionName
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// struct FJavascriptProfileNode           Node                                                   (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
// class FString                           ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class FString UJavascriptLibrary::GetFunctionName(const struct FJavascriptProfileNode& Node)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("JavascriptLibrary", "GetFunctionName");

	Params::JavascriptLibrary_GetFunctionName Parms{};

	Parms.Node = std::move(Node);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function V8.JavascriptLibrary.GetFunctionParmsSize
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// class UFunction*                        Function                                               (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

int32 UJavascriptLibrary::GetFunctionParmsSize(class UFunction* Function)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("JavascriptLibrary", "GetFunctionParmsSize");

	Params::JavascriptLibrary_GetFunctionParmsSize Parms{};

	Parms.Function = Function;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function V8.JavascriptLibrary.GetHitCount
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// struct FJavascriptProfileNode           Node                                                   (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
// int32                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

int32 UJavascriptLibrary::GetHitCount(const struct FJavascriptProfileNode& Node)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("JavascriptLibrary", "GetHitCount");

	Params::JavascriptLibrary_GetHitCount Parms{};

	Parms.Node = std::move(Node);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function V8.JavascriptLibrary.GetHitLineCount
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// struct FJavascriptProfileNode           Node                                                   (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
// int32                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

int32 UJavascriptLibrary::GetHitLineCount(const struct FJavascriptProfileNode& Node)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("JavascriptLibrary", "GetHitLineCount");

	Params::JavascriptLibrary_GetHitLineCount Parms{};

	Parms.Node = std::move(Node);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function V8.JavascriptLibrary.GetLastRenderTime
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// class AActor*                           Actor                                                  (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

float UJavascriptLibrary::GetLastRenderTime(class AActor* Actor)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("JavascriptLibrary", "GetLastRenderTime");

	Params::JavascriptLibrary_GetLastRenderTime Parms{};

	Parms.Actor = Actor;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function V8.JavascriptLibrary.GetLevel
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// class AActor*                           Actor                                                  (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class ULevel*                           ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class ULevel* UJavascriptLibrary::GetLevel(class AActor* Actor)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("JavascriptLibrary", "GetLevel");

	Params::JavascriptLibrary_GetLevel Parms{};

	Parms.Actor = Actor;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function V8.JavascriptLibrary.GetLevels
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// class UWorld*                           World                                                  (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// TArray<class ULevel*>                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, NativeAccessSpecifierPublic)

TArray<class ULevel*> UJavascriptLibrary::GetLevels(class UWorld* World)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("JavascriptLibrary", "GetLevels");

	Params::JavascriptLibrary_GetLevels Parms{};

	Parms.World = World;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function V8.JavascriptLibrary.GetLineNumber
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// struct FJavascriptProfileNode           Node                                                   (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
// int32                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

int32 UJavascriptLibrary::GetLineNumber(const struct FJavascriptProfileNode& Node)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("JavascriptLibrary", "GetLineNumber");

	Params::JavascriptLibrary_GetLineNumber Parms{};

	Parms.Node = std::move(Node);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function V8.JavascriptLibrary.GetMetaData
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// class UField*                           Field                                                  (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class FString                           Key                                                    (ConstParm, Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class FString                           ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class FString UJavascriptLibrary::GetMetaData(class UField* Field, const class FString& Key)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("JavascriptLibrary", "GetMetaData");

	Params::JavascriptLibrary_GetMetaData Parms{};

	Parms.Field = Field;
	Parms.Key = std::move(Key);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function V8.JavascriptLibrary.GetModel
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// class UWorld*                           World                                                  (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class UModel*                           ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class UModel* UJavascriptLibrary::GetModel(class UWorld* World)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("JavascriptLibrary", "GetModel");

	Params::JavascriptLibrary_GetModel Parms{};

	Parms.World = World;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function V8.JavascriptLibrary.GetName
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// class UObject*                          Object                                                 (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class FString                           ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class FString UJavascriptLibrary::GetName(class UObject* Object)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("JavascriptLibrary", "GetName");

	Params::JavascriptLibrary_GetName Parms{};

	Parms.Object = Object;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function V8.JavascriptLibrary.GetNodeId
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// struct FJavascriptProfileNode           Node                                                   (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
// int32                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

int32 UJavascriptLibrary::GetNodeId(const struct FJavascriptProfileNode& Node)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("JavascriptLibrary", "GetNodeId");

	Params::JavascriptLibrary_GetNodeId Parms{};

	Parms.Node = std::move(Node);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function V8.JavascriptLibrary.GetObjectsOfClass
// (Final, Native, Static, Public, HasOutParams, BlueprintCallable)
// Parameters:
// class UClass*                           ClassToLookFor                                         (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// TArray<class UObject*>                  Results                                                (Parm, OutParm, ZeroConstructor, NativeAccessSpecifierPublic)
// bool                                    bIncludeDerivedClasses                                 (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32                                   ExcludeFlags                                           (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32                                   ExclusionInternalFlags                                 (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UJavascriptLibrary::GetObjectsOfClass(class UClass* ClassToLookFor, TArray<class UObject*>* Results, bool bIncludeDerivedClasses, int32 ExcludeFlags, int32 ExclusionInternalFlags)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("JavascriptLibrary", "GetObjectsOfClass");

	Params::JavascriptLibrary_GetObjectsOfClass Parms{};

	Parms.ClassToLookFor = ClassToLookFor;
	Parms.bIncludeDerivedClasses = bIncludeDerivedClasses;
	Parms.ExcludeFlags = ExcludeFlags;
	Parms.ExclusionInternalFlags = ExclusionInternalFlags;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	if (Results != nullptr)
		*Results = std::move(Parms.Results);
}


// Function V8.JavascriptLibrary.GetObjectsWithOuter
// (Final, Native, Static, Public, HasOutParams, BlueprintCallable)
// Parameters:
// class UObject*                          Outer_0                                                (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// TArray<class UObject*>                  Results                                                (Parm, OutParm, ZeroConstructor, NativeAccessSpecifierPublic)
// bool                                    bIncludeNestedObjects                                  (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32                                   ExclusionFlags                                         (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32                                   ExclusionInternalFlags                                 (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UJavascriptLibrary::GetObjectsWithOuter(const class UObject* Outer_0, TArray<class UObject*>* Results, bool bIncludeNestedObjects, int32 ExclusionFlags, int32 ExclusionInternalFlags)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("JavascriptLibrary", "GetObjectsWithOuter");

	Params::JavascriptLibrary_GetObjectsWithOuter Parms{};

	Parms.Outer_0 = Outer_0;
	Parms.bIncludeNestedObjects = bIncludeNestedObjects;
	Parms.ExclusionFlags = ExclusionFlags;
	Parms.ExclusionInternalFlags = ExclusionInternalFlags;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	if (Results != nullptr)
		*Results = std::move(Parms.Results);
}


// Function V8.JavascriptLibrary.GetOuter
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// class UObject*                          Object                                                 (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class UObject*                          ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class UObject* UJavascriptLibrary::GetOuter(class UObject* Object)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("JavascriptLibrary", "GetOuter");

	Params::JavascriptLibrary_GetOuter Parms{};

	Parms.Object = Object;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function V8.JavascriptLibrary.GetOutermost
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// class UObject*                          Object                                                 (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class UObject*                          ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class UObject* UJavascriptLibrary::GetOutermost(class UObject* Object)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("JavascriptLibrary", "GetOutermost");

	Params::JavascriptLibrary_GetOutermost Parms{};

	Parms.Object = Object;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function V8.JavascriptLibrary.GetPlatformName
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// class FString                           ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class FString UJavascriptLibrary::GetPlatformName()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("JavascriptLibrary", "GetPlatformName");

	Params::JavascriptLibrary_GetPlatformName Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function V8.JavascriptLibrary.GetScriptId
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// struct FJavascriptProfileNode           Node                                                   (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
// int32                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

int32 UJavascriptLibrary::GetScriptId(const struct FJavascriptProfileNode& Node)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("JavascriptLibrary", "GetScriptId");

	Params::JavascriptLibrary_GetScriptId Parms{};

	Parms.Node = std::move(Node);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function V8.JavascriptLibrary.GetScriptResourceName
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// struct FJavascriptProfileNode           Node                                                   (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
// class FString                           ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class FString UJavascriptLibrary::GetScriptResourceName(const struct FJavascriptProfileNode& Node)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("JavascriptLibrary", "GetScriptResourceName");

	Params::JavascriptLibrary_GetScriptResourceName Parms{};

	Parms.Node = std::move(Node);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function V8.JavascriptLibrary.GetStructProperties
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// class FString                           StructName                                             (ConstParm, Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    bIncludeSuper                                          (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// TArray<struct FJavscriptProperty>       ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, NativeAccessSpecifierPublic)

TArray<struct FJavscriptProperty> UJavascriptLibrary::GetStructProperties(const class FString& StructName, bool bIncludeSuper)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("JavascriptLibrary", "GetStructProperties");

	Params::JavascriptLibrary_GetStructProperties Parms{};

	Parms.StructName = std::move(StructName);
	Parms.bIncludeSuper = bIncludeSuper;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function V8.JavascriptLibrary.GetSuperClasses
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// class UClass*                           InClass                                                (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// TArray<class UClass*>                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, NativeAccessSpecifierPublic)

TArray<class UClass*> UJavascriptLibrary::GetSuperClasses(class UClass* InClass)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("JavascriptLibrary", "GetSuperClasses");

	Params::JavascriptLibrary_GetSuperClasses Parms{};

	Parms.InClass = InClass;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function V8.JavascriptLibrary.GetWorldBounds
// (Final, Native, Static, Public, HasDefaults, BlueprintCallable)
// Parameters:
// class UWorld*                           InWorld                                                (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FBox                             ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)

struct FBox UJavascriptLibrary::GetWorldBounds(class UWorld* InWorld)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("JavascriptLibrary", "GetWorldBounds");

	Params::JavascriptLibrary_GetWorldBounds Parms{};

	Parms.InWorld = InWorld;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function V8.JavascriptLibrary.HandleSeamlessTravelPlayer
// (Final, Native, Static, Public, HasOutParams, BlueprintCallable)
// Parameters:
// class AGameModeBase*                    GameMode                                               (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class AController*                      C                                                      (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UJavascriptLibrary::HandleSeamlessTravelPlayer(class AGameModeBase* GameMode, class AController** C)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("JavascriptLibrary", "HandleSeamlessTravelPlayer");

	Params::JavascriptLibrary_HandleSeamlessTravelPlayer Parms{};

	Parms.GameMode = GameMode;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	if (C != nullptr)
		*C = Parms.C;
}


// Function V8.JavascriptLibrary.HasAnyFlags
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// class UObject*                          Object                                                 (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32                                   Flags_0                                                (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UJavascriptLibrary::HasAnyFlags(class UObject* Object, int32 Flags_0)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("JavascriptLibrary", "HasAnyFlags");

	Params::JavascriptLibrary_HasAnyFlags Parms{};

	Parms.Object = Object;
	Parms.Flags_0 = Flags_0;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function V8.JavascriptLibrary.HasAnyPackageFlags
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// class UPackage*                         Package                                                (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32                                   Flags_0                                                (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UJavascriptLibrary::HasAnyPackageFlags(class UPackage* Package, int32 Flags_0)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("JavascriptLibrary", "HasAnyPackageFlags");

	Params::JavascriptLibrary_HasAnyPackageFlags Parms{};

	Parms.Package = Package;
	Parms.Flags_0 = Flags_0;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function V8.JavascriptLibrary.HasUndo
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// class UEngine*                          Engine                                                 (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UJavascriptLibrary::HasUndo(class UEngine* Engine)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("JavascriptLibrary", "HasUndo");

	Params::JavascriptLibrary_HasUndo Parms{};

	Parms.Engine = Engine;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function V8.JavascriptLibrary.IsAsyncLoadComplete
// (Final, Native, Static, Public, HasOutParams, HasDefaults, BlueprintCallable)
// Parameters:
// struct FJavascriptStreamableManager     Manager                                                (ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
// struct FSoftObjectPath                  Target                                                 (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UJavascriptLibrary::IsAsyncLoadComplete(const struct FJavascriptStreamableManager& Manager, const struct FSoftObjectPath& Target)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("JavascriptLibrary", "IsAsyncLoadComplete");

	Params::JavascriptLibrary_IsAsyncLoadComplete Parms{};

	Parms.Manager = std::move(Manager);
	Parms.Target = std::move(Target);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function V8.JavascriptLibrary.IsGameWorld
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// class UWorld*                           World                                                  (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UJavascriptLibrary::IsGameWorld(class UWorld* World)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("JavascriptLibrary", "IsGameWorld");

	Params::JavascriptLibrary_IsGameWorld Parms{};

	Parms.World = World;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function V8.JavascriptLibrary.IsGeneratedByBlueprint
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// class UClass*                           InClass                                                (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UJavascriptLibrary::IsGeneratedByBlueprint(class UClass* InClass)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("JavascriptLibrary", "IsGeneratedByBlueprint");

	Params::JavascriptLibrary_IsGeneratedByBlueprint Parms{};

	Parms.InClass = InClass;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function V8.JavascriptLibrary.IsPendingKill
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// class AActor*                           InActor                                                (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UJavascriptLibrary::IsPendingKill(class AActor* InActor)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("JavascriptLibrary", "IsPendingKill");

	Params::JavascriptLibrary_IsPendingKill Parms{};

	Parms.InActor = InActor;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function V8.JavascriptLibrary.IsPlayInEditor
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// class UWorld*                           World                                                  (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UJavascriptLibrary::IsPlayInEditor(class UWorld* World)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("JavascriptLibrary", "IsPlayInEditor");

	Params::JavascriptLibrary_IsPlayInEditor Parms{};

	Parms.World = World;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function V8.JavascriptLibrary.IsPlayInPreview
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// class UWorld*                           World                                                  (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UJavascriptLibrary::IsPlayInPreview(class UWorld* World)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("JavascriptLibrary", "IsPlayInPreview");

	Params::JavascriptLibrary_IsPlayInPreview Parms{};

	Parms.World = World;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function V8.JavascriptLibrary.IsRegistered
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// class UActorComponent*                  ActorComponent                                         (Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UJavascriptLibrary::IsRegistered(class UActorComponent* ActorComponent)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("JavascriptLibrary", "IsRegistered");

	Params::JavascriptLibrary_IsRegistered Parms{};

	Parms.ActorComponent = ActorComponent;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function V8.JavascriptLibrary.IsSuppressed
// (Final, Native, Static, Public, HasOutParams, BlueprintCallable)
// Parameters:
// struct FJavascriptLogCategory           Category                                               (ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
// ELogVerbosity_JS                        Verbosity                                              (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UJavascriptLibrary::IsSuppressed(const struct FJavascriptLogCategory& Category, ELogVerbosity_JS Verbosity)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("JavascriptLibrary", "IsSuppressed");

	Params::JavascriptLibrary_IsSuppressed Parms{};

	Parms.Category = std::move(Category);
	Parms.Verbosity = Verbosity;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function V8.JavascriptLibrary.LoadPackage
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// class UPackage*                         InOuter                                                (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class FString                           PackageName                                            (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class UPackage*                         ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class UPackage* UJavascriptLibrary::LoadPackage(class UPackage* InOuter, const class FString& PackageName)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("JavascriptLibrary", "LoadPackage");

	Params::JavascriptLibrary_LoadPackage Parms{};

	Parms.InOuter = InOuter;
	Parms.PackageName = std::move(PackageName);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function V8.JavascriptLibrary.Log
// (Final, Native, Static, Public, HasOutParams, BlueprintCallable)
// Parameters:
// struct FJavascriptLogCategory           Category                                               (ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
// ELogVerbosity_JS                        Verbosity                                              (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class FString                           Message                                                (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class FString                           Filename                                               (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32                                   LineNumber                                             (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UJavascriptLibrary::Log(const struct FJavascriptLogCategory& Category, ELogVerbosity_JS Verbosity, const class FString& Message, const class FString& Filename, int32 LineNumber)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("JavascriptLibrary", "Log");

	Params::JavascriptLibrary_Log Parms{};

	Parms.Category = std::move(Category);
	Parms.Verbosity = Verbosity;
	Parms.Message = std::move(Message);
	Parms.Filename = std::move(Filename);
	Parms.LineNumber = LineNumber;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function V8.JavascriptLibrary.MakeDirectory
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// class FString                           Path                                                   (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    Tree                                                   (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UJavascriptLibrary::MakeDirectory(const class FString& Path, bool Tree)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("JavascriptLibrary", "MakeDirectory");

	Params::JavascriptLibrary_MakeDirectory Parms{};

	Parms.Path = std::move(Path);
	Parms.Tree = Tree;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function V8.JavascriptLibrary.MarkRenderStateDirty
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// class UActorComponent*                  Component                                              (Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UJavascriptLibrary::MarkRenderStateDirty(class UActorComponent* Component)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("JavascriptLibrary", "MarkRenderStateDirty");

	Params::JavascriptLibrary_MarkRenderStateDirty Parms{};

	Parms.Component = Component;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function V8.JavascriptLibrary.NewStat
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// class FName                             InStatName                                             (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class FString                           InStatDesc                                             (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class FName                             InGroupName                                            (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class FName                             InGroupCategory                                        (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class FString                           InGroupDesc                                            (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    bDefaultEnable                                         (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    bShouldClearEveryFrame                                 (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// EJavascriptStatDataType                 InStatType                                             (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    bCycleStat                                             (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    bSortByName                                            (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FJavascriptStat                  ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)

struct FJavascriptStat UJavascriptLibrary::NewStat(class FName InStatName, const class FString& InStatDesc, class FName InGroupName, class FName InGroupCategory, const class FString& InGroupDesc, bool bDefaultEnable, bool bShouldClearEveryFrame, EJavascriptStatDataType InStatType, bool bCycleStat, bool bSortByName)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("JavascriptLibrary", "NewStat");

	Params::JavascriptLibrary_NewStat Parms{};

	Parms.InStatName = InStatName;
	Parms.InStatDesc = std::move(InStatDesc);
	Parms.InGroupName = InGroupName;
	Parms.InGroupCategory = InGroupCategory;
	Parms.InGroupDesc = std::move(InGroupDesc);
	Parms.bDefaultEnable = bDefaultEnable;
	Parms.bShouldClearEveryFrame = bShouldClearEveryFrame;
	Parms.InStatType = InStatType;
	Parms.bCycleStat = bCycleStat;
	Parms.bSortByName = bSortByName;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function V8.JavascriptLibrary.ReadDirectory
// (Final, Native, Static, Public, HasOutParams, BlueprintCallable)
// Parameters:
// class UObject*                          Object                                                 (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class FString                           Directory                                              (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// TArray<struct FDirectoryItem>           OutItems                                               (Parm, OutParm, ZeroConstructor, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UJavascriptLibrary::ReadDirectory(class UObject* Object, const class FString& Directory, TArray<struct FDirectoryItem>* OutItems)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("JavascriptLibrary", "ReadDirectory");

	Params::JavascriptLibrary_ReadDirectory Parms{};

	Parms.Object = Object;
	Parms.Directory = std::move(Directory);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	if (OutItems != nullptr)
		*OutItems = std::move(Parms.OutItems);

	return Parms.ReturnValue;
}


// Function V8.JavascriptLibrary.ReadFile
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// class UObject*                          Object                                                 (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class FString                           Filename                                               (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UJavascriptLibrary::ReadFile(class UObject* Object, const class FString& Filename)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("JavascriptLibrary", "ReadFile");

	Params::JavascriptLibrary_ReadFile Parms{};

	Parms.Object = Object;
	Parms.Filename = std::move(Filename);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function V8.JavascriptLibrary.ReadStringFromFile
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// class UObject*                          Object                                                 (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class FString                           Filename                                               (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class FString                           ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class FString UJavascriptLibrary::ReadStringFromFile(class UObject* Object, const class FString& Filename)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("JavascriptLibrary", "ReadStringFromFile");

	Params::JavascriptLibrary_ReadStringFromFile Parms{};

	Parms.Object = Object;
	Parms.Filename = std::move(Filename);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function V8.JavascriptLibrary.ReadStringFromFileAsync
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// class UObject*                          Object                                                 (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class FString                           Filename                                               (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FJavascriptFunction              Function                                               (Parm, NativeAccessSpecifierPublic)
// struct FReadStringFromFileHandle        ReturnValue                                            (Parm, OutParm, ReturnParm, NativeAccessSpecifierPublic)

struct FReadStringFromFileHandle UJavascriptLibrary::ReadStringFromFileAsync(class UObject* Object, const class FString& Filename, const struct FJavascriptFunction& Function)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("JavascriptLibrary", "ReadStringFromFileAsync");

	Params::JavascriptLibrary_ReadStringFromFileAsync Parms{};

	Parms.Object = Object;
	Parms.Filename = std::move(Filename);
	Parms.Function = std::move(Function);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function V8.JavascriptLibrary.RegisterComponent
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// class UActorComponent*                  ActorComponent                                         (Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UJavascriptLibrary::RegisterComponent(class UActorComponent* ActorComponent)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("JavascriptLibrary", "RegisterComponent");

	Params::JavascriptLibrary_RegisterComponent Parms{};

	Parms.ActorComponent = ActorComponent;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function V8.JavascriptLibrary.RequestAsyncLoad
// (Final, Native, Static, Public, HasOutParams, BlueprintCallable)
// Parameters:
// struct FJavascriptStreamableManager     Manager                                                (ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
// TArray<struct FSoftObjectPath>          TargetsToStream                                        (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
// struct FJavascriptFunction              DelegateToCall                                         (Parm, NativeAccessSpecifierPublic)
// int32                                   Priority                                               (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UJavascriptLibrary::RequestAsyncLoad(const struct FJavascriptStreamableManager& Manager, const TArray<struct FSoftObjectPath>& TargetsToStream, const struct FJavascriptFunction& DelegateToCall, int32 Priority)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("JavascriptLibrary", "RequestAsyncLoad");

	Params::JavascriptLibrary_RequestAsyncLoad Parms{};

	Parms.Manager = std::move(Manager);
	Parms.TargetsToStream = std::move(TargetsToStream);
	Parms.DelegateToCall = std::move(DelegateToCall);
	Parms.Priority = Priority;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function V8.JavascriptLibrary.ReregisterAllComponents
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// class AActor*                           Actor                                                  (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UJavascriptLibrary::ReregisterAllComponents(class AActor* Actor)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("JavascriptLibrary", "ReregisterAllComponents");

	Params::JavascriptLibrary_ReregisterAllComponents Parms{};

	Parms.Actor = Actor;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function V8.JavascriptLibrary.ReregisterComponent
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// class UActorComponent*                  ActorComponent                                         (Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UJavascriptLibrary::ReregisterComponent(class UActorComponent* ActorComponent)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("JavascriptLibrary", "ReregisterComponent");

	Params::JavascriptLibrary_ReregisterComponent Parms{};

	Parms.ActorComponent = ActorComponent;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function V8.JavascriptLibrary.ResolveIp
// (Final, Native, Static, Public, HasOutParams, BlueprintCallable)
// Parameters:
// class FString                           HostName                                               (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class FString                           OutIp                                                  (Parm, OutParm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UJavascriptLibrary::ResolveIp(const class FString& HostName, class FString* OutIp)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("JavascriptLibrary", "ResolveIp");

	Params::JavascriptLibrary_ResolveIp Parms{};

	Parms.HostName = std::move(HostName);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	if (OutIp != nullptr)
		*OutIp = std::move(Parms.OutIp);

	return Parms.ReturnValue;
}


// Function V8.JavascriptLibrary.SegmentIntersection2D
// (Final, Native, Static, Public, HasOutParams, HasDefaults, BlueprintCallable)
// Parameters:
// struct FVector                          SegmentStartA                                          (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FVector                          SegmentEndA                                            (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FVector                          SegmentStartB                                          (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FVector                          SegmentEndB                                            (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FVector                          IntersectionPoint                                      (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UJavascriptLibrary::SegmentIntersection2D(const struct FVector& SegmentStartA, const struct FVector& SegmentEndA, const struct FVector& SegmentStartB, const struct FVector& SegmentEndB, struct FVector* IntersectionPoint)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("JavascriptLibrary", "SegmentIntersection2D");

	Params::JavascriptLibrary_SegmentIntersection2D Parms{};

	Parms.SegmentStartA = std::move(SegmentStartA);
	Parms.SegmentEndA = std::move(SegmentEndA);
	Parms.SegmentStartB = std::move(SegmentStartB);
	Parms.SegmentEndB = std::move(SegmentEndB);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	if (IntersectionPoint != nullptr)
		*IntersectionPoint = std::move(Parms.IntersectionPoint);

	return Parms.ReturnValue;
}


// Function V8.JavascriptLibrary.SendMemoryTo
// (Final, Native, Static, Public, HasOutParams, BlueprintCallable)
// Parameters:
// struct FJavascriptSocket                Socket                                                 (Parm, OutParm, NativeAccessSpecifierPublic)
// struct FJavascriptInternetAddr          ToAddr                                                 (ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
// int32                                   NumBytes                                               (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32                                   BytesSent                                              (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UJavascriptLibrary::SendMemoryTo(struct FJavascriptSocket* Socket, const struct FJavascriptInternetAddr& ToAddr, int32 NumBytes, int32* BytesSent)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("JavascriptLibrary", "SendMemoryTo");

	Params::JavascriptLibrary_SendMemoryTo Parms{};

	Parms.ToAddr = std::move(ToAddr);
	Parms.NumBytes = NumBytes;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	if (Socket != nullptr)
		*Socket = std::move(Parms.Socket);

	if (BytesSent != nullptr)
		*BytesSent = Parms.BytesSent;

	return Parms.ReturnValue;
}


// Function V8.JavascriptLibrary.SetActorFlags
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// class AActor*                           Actor                                                  (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32                                   Flags_0                                                (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UJavascriptLibrary::SetActorFlags(class AActor* Actor, int32 Flags_0)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("JavascriptLibrary", "SetActorFlags");

	Params::JavascriptLibrary_SetActorFlags Parms{};

	Parms.Actor = Actor;
	Parms.Flags_0 = Flags_0;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function V8.JavascriptLibrary.SetClientTravel
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// class UEngine*                          Engine                                                 (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class UWorld*                           InWorld                                                (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class FString                           NextURL                                                (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// ETravelType                             InTravelType                                           (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UJavascriptLibrary::SetClientTravel(class UEngine* Engine, class UWorld* InWorld, const class FString& NextURL, ETravelType InTravelType)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("JavascriptLibrary", "SetClientTravel");

	Params::JavascriptLibrary_SetClientTravel Parms{};

	Parms.Engine = Engine;
	Parms.InWorld = InWorld;
	Parms.NextURL = std::move(NextURL);
	Parms.InTravelType = InTravelType;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function V8.JavascriptLibrary.SetIp
// (Final, Native, Static, Public, HasOutParams, BlueprintCallable)
// Parameters:
// struct FJavascriptInternetAddr          Addr                                                   (Parm, OutParm, NativeAccessSpecifierPublic)
// class FString                           ResolvedAddress                                        (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    bValid                                                 (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UJavascriptLibrary::SetIp(struct FJavascriptInternetAddr* Addr, const class FString& ResolvedAddress, bool* bValid)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("JavascriptLibrary", "SetIp");

	Params::JavascriptLibrary_SetIp Parms{};

	Parms.ResolvedAddress = std::move(ResolvedAddress);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	if (Addr != nullptr)
		*Addr = std::move(Parms.Addr);

	if (bValid != nullptr)
		*bValid = Parms.bValid;
}


// Function V8.JavascriptLibrary.SetMobile
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// class USceneComponent*                  SceneComponent                                         (Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UJavascriptLibrary::SetMobile(class USceneComponent* SceneComponent)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("JavascriptLibrary", "SetMobile");

	Params::JavascriptLibrary_SetMobile Parms{};

	Parms.SceneComponent = SceneComponent;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function V8.JavascriptLibrary.SetMobility
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// class USceneComponent*                  SceneComponent                                         (Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// EComponentMobility                      Type                                                   (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UJavascriptLibrary::SetMobility(class USceneComponent* SceneComponent, EComponentMobility Type)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("JavascriptLibrary", "SetMobility");

	Params::JavascriptLibrary_SetMobility Parms{};

	Parms.SceneComponent = SceneComponent;
	Parms.Type = Type;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function V8.JavascriptLibrary.SetObjectFlags
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// class UObject*                          Obj                                                    (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32                                   Flags_0                                                (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UJavascriptLibrary::SetObjectFlags(class UObject* Obj, int32 Flags_0)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("JavascriptLibrary", "SetObjectFlags");

	Params::JavascriptLibrary_SetObjectFlags Parms{};

	Parms.Obj = Obj;
	Parms.Flags_0 = Flags_0;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function V8.JavascriptLibrary.SetPort
// (Final, Native, Static, Public, HasOutParams, BlueprintCallable)
// Parameters:
// struct FJavascriptInternetAddr          Addr                                                   (Parm, OutParm, NativeAccessSpecifierPublic)
// int32                                   Port                                                   (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UJavascriptLibrary::SetPort(struct FJavascriptInternetAddr* Addr, int32 Port)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("JavascriptLibrary", "SetPort");

	Params::JavascriptLibrary_SetPort Parms{};

	Parms.Port = Port;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	if (Addr != nullptr)
		*Addr = std::move(Parms.Addr);
}


// Function V8.JavascriptLibrary.SetRootComponent
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// class AActor*                           Actor                                                  (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class USceneComponent*                  Component                                              (Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UJavascriptLibrary::SetRootComponent(class AActor* Actor, class USceneComponent* Component)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("JavascriptLibrary", "SetRootComponent");

	Params::JavascriptLibrary_SetRootComponent Parms{};

	Parms.Actor = Actor;
	Parms.Component = Component;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function V8.JavascriptLibrary.SimpleAsyncLoad
// (Final, Native, Static, Public, HasOutParams, HasDefaults, BlueprintCallable)
// Parameters:
// struct FJavascriptStreamableManager     Manager                                                (ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
// struct FSoftObjectPath                  Target                                                 (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32                                   Priority                                               (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UJavascriptLibrary::SimpleAsyncLoad(const struct FJavascriptStreamableManager& Manager, const struct FSoftObjectPath& Target, int32 Priority)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("JavascriptLibrary", "SimpleAsyncLoad");

	Params::JavascriptLibrary_SimpleAsyncLoad Parms{};

	Parms.Manager = std::move(Manager);
	Parms.Target = std::move(Target);
	Parms.Priority = Priority;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function V8.JavascriptLibrary.TryLoadByPath
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// class FString                           Path                                                   (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class UObject*                          ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class UObject* UJavascriptLibrary::TryLoadByPath(const class FString& Path)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("JavascriptLibrary", "TryLoadByPath");

	Params::JavascriptLibrary_TryLoadByPath Parms{};

	Parms.Path = std::move(Path);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function V8.JavascriptLibrary.Unload
// (Final, Native, Static, Public, HasOutParams, HasDefaults, BlueprintCallable)
// Parameters:
// struct FJavascriptStreamableManager     Manager                                                (ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
// struct FSoftObjectPath                  Target                                                 (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UJavascriptLibrary::Unload(const struct FJavascriptStreamableManager& Manager, const struct FSoftObjectPath& Target)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("JavascriptLibrary", "Unload");

	Params::JavascriptLibrary_Unload Parms{};

	Parms.Manager = std::move(Manager);
	Parms.Target = std::move(Target);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function V8.JavascriptLibrary.UnregisterComponent
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// class UActorComponent*                  ActorComponent                                         (Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UJavascriptLibrary::UnregisterComponent(class UActorComponent* ActorComponent)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("JavascriptLibrary", "UnregisterComponent");

	Params::JavascriptLibrary_UnregisterComponent Parms{};

	Parms.ActorComponent = ActorComponent;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function V8.JavascriptLibrary.V8_SetFlagsFromString
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// class FString                           V8Flags                                                (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UJavascriptLibrary::V8_SetFlagsFromString(const class FString& V8Flags)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("JavascriptLibrary", "V8_SetFlagsFromString");

	Params::JavascriptLibrary_V8_SetFlagsFromString Parms{};

	Parms.V8Flags = std::move(V8Flags);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function V8.JavascriptLibrary.V8_SetIdleTaskBudget
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// float                                   BudgetInSeconds                                        (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UJavascriptLibrary::V8_SetIdleTaskBudget(float BudgetInSeconds)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("JavascriptLibrary", "V8_SetIdleTaskBudget");

	Params::JavascriptLibrary_V8_SetIdleTaskBudget Parms{};

	Parms.BudgetInSeconds = BudgetInSeconds;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function V8.JavascriptLibrary.WriteFile
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// class UObject*                          Object                                                 (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class FString                           Filename                                               (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UJavascriptLibrary::WriteFile(class UObject* Object, const class FString& Filename)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("JavascriptLibrary", "WriteFile");

	Params::JavascriptLibrary_WriteFile Parms{};

	Parms.Object = Object;
	Parms.Filename = std::move(Filename);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function V8.JavascriptLibrary.WriteStringToFile
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// class UObject*                          Object                                                 (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class FString                           Filename                                               (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class FString                           Data                                                   (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// EJavascriptEncodingOptions              EncodingOptions                                        (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UJavascriptLibrary::WriteStringToFile(class UObject* Object, const class FString& Filename, const class FString& Data, EJavascriptEncodingOptions EncodingOptions)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("JavascriptLibrary", "WriteStringToFile");

	Params::JavascriptLibrary_WriteStringToFile Parms{};

	Parms.Object = Object;
	Parms.Filename = std::move(Filename);
	Parms.Data = std::move(Data);
	Parms.EncodingOptions = EncodingOptions;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function V8.JavascriptOutputDevice.Log
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// class FName                             Category                                               (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// ELogVerbosity_JS                        Verbosity                                              (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class FString                           Filename                                               (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32                                   LineNumber                                             (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class FString                           Message                                                (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UJavascriptOutputDevice::Log(class FName Category, ELogVerbosity_JS Verbosity, const class FString& Filename, int32 LineNumber, const class FString& Message)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("JavascriptOutputDevice", "Log");

	Params::JavascriptOutputDevice_Log Parms{};

	Parms.Category = Category;
	Parms.Verbosity = Verbosity;
	Parms.Filename = std::move(Filename);
	Parms.LineNumber = LineNumber;
	Parms.Message = std::move(Message);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function V8.JavascriptOutputDevice.Kill
// (Final, Native, Public, BlueprintCallable)

void UJavascriptOutputDevice::Kill()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("JavascriptOutputDevice", "Kill");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function V8.JavascriptOutputDevice.OnMessage
// (Event, Public, BlueprintEvent)
// Parameters:
// class FString                           Message                                                (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// ELogVerbosity_JS                        Verbosity                                              (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class FName                             Category                                               (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UJavascriptOutputDevice::OnMessage(const class FString& Message, ELogVerbosity_JS Verbosity, class FName Category)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("JavascriptOutputDevice", "OnMessage");

	Params::JavascriptOutputDevice_OnMessage Parms{};

	Parms.Message = std::move(Message);
	Parms.Verbosity = Verbosity;
	Parms.Category = Category;

	UObject::ProcessEvent(Func, &Parms);
}


// Function V8.JavascriptProcess.CanLaunchURL
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// class FString                           URL                                                    (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UJavascriptProcess::CanLaunchURL(const class FString& URL)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("JavascriptProcess", "CanLaunchURL");

	Params::JavascriptProcess_CanLaunchURL Parms{};

	Parms.URL = std::move(URL);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function V8.JavascriptProcess.Create
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// class FString                           URL                                                    (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class FString                           Parms_0                                                (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    bLaunchDetached                                        (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    bLaunchHidden                                          (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    bLaunchReallyHidden                                    (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32                                   PriorityModifier                                       (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class FString                           OptionalWorkingDirectory                               (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    bUsePipe                                               (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class UJavascriptProcess*               ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class UJavascriptProcess* UJavascriptProcess::Create(const class FString& URL, const class FString& Parms_0, bool bLaunchDetached, bool bLaunchHidden, bool bLaunchReallyHidden, int32 PriorityModifier, const class FString& OptionalWorkingDirectory, bool bUsePipe)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("JavascriptProcess", "Create");

	Params::JavascriptProcess_Create Parms{};

	Parms.URL = std::move(URL);
	Parms.Parms_0 = std::move(Parms_0);
	Parms.bLaunchDetached = bLaunchDetached;
	Parms.bLaunchHidden = bLaunchHidden;
	Parms.bLaunchReallyHidden = bLaunchReallyHidden;
	Parms.PriorityModifier = PriorityModifier;
	Parms.OptionalWorkingDirectory = std::move(OptionalWorkingDirectory);
	Parms.bUsePipe = bUsePipe;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function V8.JavascriptProcess.GetApplicationName
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// int32                                   ProcessId                                              (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class FString                           ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class FString UJavascriptProcess::GetApplicationName(int32 ProcessId)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("JavascriptProcess", "GetApplicationName");

	Params::JavascriptProcess_GetApplicationName Parms{};

	Parms.ProcessId = ProcessId;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function V8.JavascriptProcess.GetCurrentProcessId
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// int32                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

int32 UJavascriptProcess::GetCurrentProcessId()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("JavascriptProcess", "GetCurrentProcessId");

	Params::JavascriptProcess_GetCurrentProcessId Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function V8.JavascriptProcess.GetEnvironmentVar
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// class FString                           VarName                                                (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class FString                           ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class FString UJavascriptProcess::GetEnvironmentVar(const class FString& VarName)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("JavascriptProcess", "GetEnvironmentVar");

	Params::JavascriptProcess_GetEnvironmentVar Parms{};

	Parms.VarName = std::move(VarName);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function V8.JavascriptProcess.GetString
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// class FString                           Key                                                    (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    bFlag                                                  (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class FString                           ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class FString UJavascriptProcess::GetString(const class FString& Key, bool bFlag)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("JavascriptProcess", "GetString");

	Params::JavascriptProcess_GetString Parms{};

	Parms.Key = std::move(Key);
	Parms.bFlag = bFlag;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function V8.JavascriptProcess.IsApplicationRunning
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// class FString                           ProcName                                               (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UJavascriptProcess::IsApplicationRunning(const class FString& ProcName)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("JavascriptProcess", "IsApplicationRunning");

	Params::JavascriptProcess_IsApplicationRunning Parms{};

	Parms.ProcName = std::move(ProcName);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function V8.JavascriptProcess.IsApplicationRunning_PID
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// int32                                   ProcessId                                              (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UJavascriptProcess::IsApplicationRunning_PID(int32 ProcessId)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("JavascriptProcess", "IsApplicationRunning_PID");

	Params::JavascriptProcess_IsApplicationRunning_PID Parms{};

	Parms.ProcessId = ProcessId;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function V8.JavascriptProcess.LaunchURL
// (Final, Native, Static, Public, HasOutParams, BlueprintCallable)
// Parameters:
// class FString                           URL                                                    (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class FString                           Parms_0                                                (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class FString                           Error                                                  (Parm, OutParm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UJavascriptProcess::LaunchURL(const class FString& URL, const class FString& Parms_0, class FString* Error)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("JavascriptProcess", "LaunchURL");

	Params::JavascriptProcess_LaunchURL Parms{};

	Parms.URL = std::move(URL);
	Parms.Parms_0 = std::move(Parms_0);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	if (Error != nullptr)
		*Error = std::move(Parms.Error);
}


// Function V8.JavascriptProcess.Open
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// class FString                           ProcName                                               (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class UJavascriptProcess*               ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class UJavascriptProcess* UJavascriptProcess::Open(const class FString& ProcName)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("JavascriptProcess", "Open");

	Params::JavascriptProcess_Open Parms{};

	Parms.ProcName = std::move(ProcName);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function V8.JavascriptProcess.Open_PID
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// int32                                   ProcessId                                              (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class UJavascriptProcess*               ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class UJavascriptProcess* UJavascriptProcess::Open_PID(int32 ProcessId)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("JavascriptProcess", "Open_PID");

	Params::JavascriptProcess_Open_PID Parms{};

	Parms.ProcessId = ProcessId;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function V8.JavascriptProcess.SetEnvironmentVar
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// class FString                           VarName                                                (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class FString                           VarValue                                               (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UJavascriptProcess::SetEnvironmentVar(const class FString& VarName, const class FString& VarValue)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("JavascriptProcess", "SetEnvironmentVar");

	Params::JavascriptProcess_SetEnvironmentVar Parms{};

	Parms.VarName = std::move(VarName);
	Parms.VarValue = std::move(VarValue);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function V8.JavascriptProcess.SimulateKeypress
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// int32                                   KeyEvent                                               (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UJavascriptProcess::SimulateKeypress(int32 KeyEvent)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("JavascriptProcess", "SimulateKeypress");

	Params::JavascriptProcess_SimulateKeypress Parms{};

	Parms.KeyEvent = KeyEvent;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function V8.JavascriptProcess.Sleep
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// float                                   Seconds                                                (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UJavascriptProcess::Sleep(float Seconds)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("JavascriptProcess", "Sleep");

	Params::JavascriptProcess_Sleep Parms{};

	Parms.Seconds = Seconds;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function V8.JavascriptProcess.Close
// (Final, Native, Public, BlueprintCallable)

void UJavascriptProcess::Close()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("JavascriptProcess", "Close");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function V8.JavascriptProcess.GetReturnCode
// (Final, Native, Public, HasOutParams, BlueprintCallable)
// Parameters:
// int32                                   ReturnCode                                             (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UJavascriptProcess::GetReturnCode(int32* ReturnCode)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("JavascriptProcess", "GetReturnCode");

	Params::JavascriptProcess_GetReturnCode Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	if (ReturnCode != nullptr)
		*ReturnCode = Parms.ReturnCode;

	return Parms.ReturnValue;
}


// Function V8.JavascriptProcess.IsRunning
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UJavascriptProcess::IsRunning()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("JavascriptProcess", "IsRunning");

	Params::JavascriptProcess_IsRunning Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function V8.JavascriptProcess.ReadArrayFromPipe
// (Final, Native, Public, HasOutParams, BlueprintCallable)
// Parameters:
// TArray<uint8>                           Array                                                  (Parm, OutParm, ZeroConstructor, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UJavascriptProcess::ReadArrayFromPipe(TArray<uint8>* Array)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("JavascriptProcess", "ReadArrayFromPipe");

	Params::JavascriptProcess_ReadArrayFromPipe Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	if (Array != nullptr)
		*Array = std::move(Parms.Array);

	return Parms.ReturnValue;
}


// Function V8.JavascriptProcess.ReadFromPipe
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// class FString                           ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class FString UJavascriptProcess::ReadFromPipe()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("JavascriptProcess", "ReadFromPipe");

	Params::JavascriptProcess_ReadFromPipe Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function V8.JavascriptProcess.Terminate
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// bool                                    KillTree                                               (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UJavascriptProcess::Terminate(bool KillTree)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("JavascriptProcess", "Terminate");

	Params::JavascriptProcess_Terminate Parms{};

	Parms.KillTree = KillTree;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function V8.JavascriptProcess.Wait
// (Final, Native, Public, BlueprintCallable)

void UJavascriptProcess::Wait()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("JavascriptProcess", "Wait");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function V8.JavascriptProcess.WriteToPipe
// (Final, Native, Public, HasOutParams, BlueprintCallable)
// Parameters:
// class FString                           Message                                                (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class FString                           OutWritten                                             (Parm, OutParm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UJavascriptProcess::WriteToPipe(const class FString& Message, class FString* OutWritten)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("JavascriptProcess", "WriteToPipe");

	Params::JavascriptProcess_WriteToPipe Parms{};

	Parms.Message = std::move(Message);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	if (OutWritten != nullptr)
		*OutWritten = std::move(Parms.OutWritten);

	return Parms.ReturnValue;
}


// Function V8.JavascriptProfile.SetIdle
// (Final, Native, Static, Public, HasOutParams, BlueprintCallable)
// Parameters:
// struct FJavascriptCpuProfiler           Profiler                                               (ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
// bool                                    Is_idle                                                (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UJavascriptProfile::SetIdle(const struct FJavascriptCpuProfiler& Profiler, bool Is_idle)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("JavascriptProfile", "SetIdle");

	Params::JavascriptProfile_SetIdle Parms{};

	Parms.Profiler = std::move(Profiler);
	Parms.Is_idle = Is_idle;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function V8.JavascriptProfile.SetSamplingInterval
// (Final, Native, Static, Public, HasOutParams, BlueprintCallable)
// Parameters:
// struct FJavascriptCpuProfiler           Profiler                                               (ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
// int32                                   Us                                                     (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UJavascriptProfile::SetSamplingInterval(const struct FJavascriptCpuProfiler& Profiler, int32 Us)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("JavascriptProfile", "SetSamplingInterval");

	Params::JavascriptProfile_SetSamplingInterval Parms{};

	Parms.Profiler = std::move(Profiler);
	Parms.Us = Us;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function V8.JavascriptProfile.Start
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// class FString                           Title                                                  (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    bRecordSamples                                         (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FJavascriptCpuProfiler           ReturnValue                                            (Parm, OutParm, ReturnParm, NoDestructor, NativeAccessSpecifierPublic)

struct FJavascriptCpuProfiler UJavascriptProfile::Start(const class FString& Title, bool bRecordSamples)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("JavascriptProfile", "Start");

	Params::JavascriptProfile_Start Parms{};

	Parms.Title = std::move(Title);
	Parms.bRecordSamples = bRecordSamples;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function V8.JavascriptProfile.Stop
// (Final, Native, Static, Public, HasOutParams, BlueprintCallable)
// Parameters:
// struct FJavascriptCpuProfiler           Profiler                                               (ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
// class FString                           Title                                                  (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class UJavascriptProfile*               ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class UJavascriptProfile* UJavascriptProfile::Stop(const struct FJavascriptCpuProfiler& Profiler, const class FString& Title)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("JavascriptProfile", "Stop");

	Params::JavascriptProfile_Stop Parms{};

	Parms.Profiler = std::move(Profiler);
	Parms.Title = std::move(Title);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function V8.JavascriptProfile.GetSample
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// int32                                   Index_0                                                (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FJavascriptProfileNode           ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)

struct FJavascriptProfileNode UJavascriptProfile::GetSample(int32 Index_0)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("JavascriptProfile", "GetSample");

	Params::JavascriptProfile_GetSample Parms{};

	Parms.Index_0 = Index_0;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function V8.JavascriptProfile.GetSamplesCount
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// int32                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

int32 UJavascriptProfile::GetSamplesCount()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("JavascriptProfile", "GetSamplesCount");

	Params::JavascriptProfile_GetSamplesCount Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function V8.JavascriptProfile.GetSampleTimestamp
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// int32                                   Index_0                                                (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

float UJavascriptProfile::GetSampleTimestamp(int32 Index_0)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("JavascriptProfile", "GetSampleTimestamp");

	Params::JavascriptProfile_GetSampleTimestamp Parms{};

	Parms.Index_0 = Index_0;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function V8.JavascriptProfile.GetTopDownRoot
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// struct FJavascriptProfileNode           ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)

struct FJavascriptProfileNode UJavascriptProfile::GetTopDownRoot()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("JavascriptProfile", "GetTopDownRoot");

	Params::JavascriptProfile_GetTopDownRoot Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function V8.JavascriptSemaphore.Create
// (Final, Native, Static, Public, HasOutParams, BlueprintCallable)
// Parameters:
// class FName                             Name_0                                                 (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    bCreate                                                (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32                                   MaxLocks                                               (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class UJavascriptSemaphore*             ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class UJavascriptSemaphore* UJavascriptSemaphore::Create(const class FName& Name_0, bool bCreate, int32 MaxLocks)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("JavascriptSemaphore", "Create");

	Params::JavascriptSemaphore_Create Parms{};

	Parms.Name_0 = Name_0;
	Parms.bCreate = bCreate;
	Parms.MaxLocks = MaxLocks;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function V8.JavascriptSemaphore.Dispose
// (Final, Native, Public, BlueprintCallable)

void UJavascriptSemaphore::Dispose()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("JavascriptSemaphore", "Dispose");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function V8.JavascriptSemaphore.Lock
// (Final, Native, Public, BlueprintCallable)

void UJavascriptSemaphore::Lock()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("JavascriptSemaphore", "Lock");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function V8.JavascriptSemaphore.TryLock
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// int32                                   NanosecondsToWait                                      (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UJavascriptSemaphore::TryLock(int32 NanosecondsToWait)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("JavascriptSemaphore", "TryLock");

	Params::JavascriptSemaphore_TryLock Parms{};

	Parms.NanosecondsToWait = NanosecondsToWait;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function V8.JavascriptSemaphore.Unlock
// (Final, Native, Public, BlueprintCallable)

void UJavascriptSemaphore::Unlock()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("JavascriptSemaphore", "Unlock");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function V8.JavascriptSharedMemoryRegion.Create
// (Final, Native, Static, Public, HasOutParams, BlueprintCallable)
// Parameters:
// class FName                             Name_0                                                 (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    bCreate                                                (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    bRead                                                  (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    bWrite                                                 (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32                                   Size                                                   (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class UJavascriptSharedMemoryRegion*    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class UJavascriptSharedMemoryRegion* UJavascriptSharedMemoryRegion::Create(const class FName& Name_0, bool bCreate, bool bRead, bool bWrite, int32 Size)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("JavascriptSharedMemoryRegion", "Create");

	Params::JavascriptSharedMemoryRegion_Create Parms{};

	Parms.Name_0 = Name_0;
	Parms.bCreate = bCreate;
	Parms.bRead = bRead;
	Parms.bWrite = bWrite;
	Parms.Size = Size;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function V8.JavascriptSharedMemoryRegion.Dispose
// (Final, Native, Public, BlueprintCallable)

void UJavascriptSharedMemoryRegion::Dispose()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("JavascriptSharedMemoryRegion", "Dispose");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function V8.JavascriptTestLibrary.AddAnalyticsItem
// (Final, Native, Static, Private, HasOutParams, BlueprintCallable)
// Parameters:
// struct FJavascriptAutomatedTestInstance Test                                                   (ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
// class FString                           InAnalyticsItem                                        (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UJavascriptTestLibrary::AddAnalyticsItem(const struct FJavascriptAutomatedTestInstance& Test, const class FString& InAnalyticsItem)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("JavascriptTestLibrary", "AddAnalyticsItem");

	Params::JavascriptTestLibrary_AddAnalyticsItem Parms{};

	Parms.Test = std::move(Test);
	Parms.InAnalyticsItem = std::move(InAnalyticsItem);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function V8.JavascriptTestLibrary.AddError
// (Final, Native, Static, Private, HasOutParams, BlueprintCallable)
// Parameters:
// struct FJavascriptAutomatedTestInstance Test                                                   (ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
// class FString                           InError                                                (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UJavascriptTestLibrary::AddError(const struct FJavascriptAutomatedTestInstance& Test, const class FString& InError)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("JavascriptTestLibrary", "AddError");

	Params::JavascriptTestLibrary_AddError Parms{};

	Parms.Test = std::move(Test);
	Parms.InError = std::move(InError);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function V8.JavascriptTestLibrary.AddLogItem
// (Final, Native, Static, Private, HasOutParams, BlueprintCallable)
// Parameters:
// struct FJavascriptAutomatedTestInstance Test                                                   (ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
// class FString                           InLogItem                                              (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UJavascriptTestLibrary::AddLogItem(const struct FJavascriptAutomatedTestInstance& Test, const class FString& InLogItem)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("JavascriptTestLibrary", "AddLogItem");

	Params::JavascriptTestLibrary_AddLogItem Parms{};

	Parms.Test = std::move(Test);
	Parms.InLogItem = std::move(InLogItem);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function V8.JavascriptTestLibrary.AddWarning
// (Final, Native, Static, Private, HasOutParams, BlueprintCallable)
// Parameters:
// struct FJavascriptAutomatedTestInstance Test                                                   (ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
// class FString                           InWarning                                              (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UJavascriptTestLibrary::AddWarning(const struct FJavascriptAutomatedTestInstance& Test, const class FString& InWarning)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("JavascriptTestLibrary", "AddWarning");

	Params::JavascriptTestLibrary_AddWarning Parms{};

	Parms.Test = std::move(Test);
	Parms.InWarning = std::move(InWarning);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function V8.JavascriptTestLibrary.BeginPlay
// (Final, Native, Static, Private, BlueprintCallable)
// Parameters:
// class UWorld*                           World                                                  (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UJavascriptTestLibrary::BeginPlay(class UWorld* World)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("JavascriptTestLibrary", "BeginPlay");

	Params::JavascriptTestLibrary_BeginPlay Parms{};

	Parms.World = World;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function V8.JavascriptTestLibrary.ClearExecutionInfo
// (Final, Native, Static, Private, HasOutParams, BlueprintCallable)
// Parameters:
// struct FJavascriptAutomatedTestInstance Test                                                   (ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)

void UJavascriptTestLibrary::ClearExecutionInfo(const struct FJavascriptAutomatedTestInstance& Test)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("JavascriptTestLibrary", "ClearExecutionInfo");

	Params::JavascriptTestLibrary_ClearExecutionInfo Parms{};

	Parms.Test = std::move(Test);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function V8.JavascriptTestLibrary.Create
// (Final, Native, Static, Private, HasOutParams, BlueprintCallable)
// Parameters:
// struct FJavascriptAutomatedTest         Test                                                   (ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
// struct FJavascriptAutomatedTestInstance ReturnValue                                            (Parm, OutParm, ReturnParm, NativeAccessSpecifierPublic)

struct FJavascriptAutomatedTestInstance UJavascriptTestLibrary::Create(const struct FJavascriptAutomatedTest& Test)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("JavascriptTestLibrary", "Create");

	Params::JavascriptTestLibrary_Create Parms{};

	Parms.Test = std::move(Test);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function V8.JavascriptTestLibrary.Destroy
// (Final, Native, Static, Private, HasOutParams, BlueprintCallable)
// Parameters:
// struct FJavascriptAutomatedTestInstance Test                                                   (Parm, OutParm, NativeAccessSpecifierPublic)

void UJavascriptTestLibrary::Destroy(struct FJavascriptAutomatedTestInstance* Test)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("JavascriptTestLibrary", "Destroy");

	Params::JavascriptTestLibrary_Destroy Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	if (Test != nullptr)
		*Test = std::move(Parms.Test);
}


// Function V8.JavascriptTestLibrary.DestroyUObject
// (Final, Native, Static, Private, BlueprintCallable)
// Parameters:
// class UObject*                          Object                                                 (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UJavascriptTestLibrary::DestroyUObject(class UObject* Object)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("JavascriptTestLibrary", "DestroyUObject");

	Params::JavascriptTestLibrary_DestroyUObject Parms{};

	Parms.Object = Object;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function V8.JavascriptTestLibrary.DestroyWorld
// (Final, Native, Static, Private, BlueprintCallable)
// Parameters:
// class UWorld*                           World                                                  (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UJavascriptTestLibrary::DestroyWorld(class UWorld* World)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("JavascriptTestLibrary", "DestroyWorld");

	Params::JavascriptTestLibrary_DestroyWorld Parms{};

	Parms.World = World;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function V8.JavascriptTestLibrary.InitializeActorsForPlay
// (Final, Native, Static, Private, HasOutParams)
// Parameters:
// class UWorld*                           World                                                  (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FURL                             URL                                                    (ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)

void UJavascriptTestLibrary::InitializeActorsForPlay(class UWorld* World, const struct FURL& URL)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("JavascriptTestLibrary", "InitializeActorsForPlay");

	Params::JavascriptTestLibrary_InitializeActorsForPlay Parms{};

	Parms.World = World;
	Parms.URL = std::move(URL);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function V8.JavascriptTestLibrary.NewWorld
// (Final, Native, Static, Private, BlueprintCallable)
// Parameters:
// class UWorld*                           ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class UWorld* UJavascriptTestLibrary::NewWorld()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("JavascriptTestLibrary", "NewWorld");

	Params::JavascriptTestLibrary_NewWorld Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function V8.JavascriptTestLibrary.PopFrameCounter
// (Final, Native, Static, Private, BlueprintCallable)

void UJavascriptTestLibrary::PopFrameCounter()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("JavascriptTestLibrary", "PopFrameCounter");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function V8.JavascriptTestLibrary.PushFrameCounter
// (Final, Native, Static, Private, BlueprintCallable)

void UJavascriptTestLibrary::PushFrameCounter()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("JavascriptTestLibrary", "PushFrameCounter");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function V8.JavascriptTestLibrary.SetContinue
// (Final, Native, Static, Private, HasOutParams, BlueprintCallable)
// Parameters:
// struct FJavascriptAutomatedTestInstance Test                                                   (ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
// bool                                    bInContinue                                            (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UJavascriptTestLibrary::SetContinue(const struct FJavascriptAutomatedTestInstance& Test, bool bInContinue)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("JavascriptTestLibrary", "SetContinue");

	Params::JavascriptTestLibrary_SetContinue Parms{};

	Parms.Test = std::move(Test);
	Parms.bInContinue = bInContinue;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}

}

