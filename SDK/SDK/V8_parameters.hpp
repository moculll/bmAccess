#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: V8

#include "Basic.hpp"

#include "V8_structs.hpp"
#include "CoreUObject_structs.hpp"
#include "Engine_structs.hpp"


namespace SDK::Params
{

// Function V8.DirectoryWatcher.Contains
// 0x0018 (0x0018 - 0x0000)
struct DirectoryWatcher_Contains final
{
public:
	class FString                                 File;                                              // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0010(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_11[0x7];                                       // 0x0011(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
//static_assert(alignof(DirectoryWatcher_Contains) == 0x000008, "Wrong alignment on DirectoryWatcher_Contains");
//static_assert(sizeof(DirectoryWatcher_Contains) == 0x000018, "Wrong size on DirectoryWatcher_Contains");
//static_assert(offsetof(DirectoryWatcher_Contains, File) == 0x000000, "Member 'DirectoryWatcher_Contains::File' has a wrong offset!");
//static_assert(offsetof(DirectoryWatcher_Contains, ReturnValue) == 0x000010, "Member 'DirectoryWatcher_Contains::ReturnValue' has a wrong offset!");

// Function V8.DirectoryWatcher.Watch
// 0x0010 (0x0010 - 0x0000)
struct DirectoryWatcher_Watch final
{
public:
	class FString                                 Directory;                                         // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
//static_assert(alignof(DirectoryWatcher_Watch) == 0x000008, "Wrong alignment on DirectoryWatcher_Watch");
//static_assert(sizeof(DirectoryWatcher_Watch) == 0x000010, "Wrong size on DirectoryWatcher_Watch");
//static_assert(offsetof(DirectoryWatcher_Watch, Directory) == 0x000000, "Member 'DirectoryWatcher_Watch::Directory' has a wrong offset!");

// Function V8.JavascriptComponent.Expose
// 0x0018 (0x0018 - 0x0000)
struct JavascriptComponent_Expose final
{
public:
	class FString                                 ExposedAs;                                         // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UObject*                                Object;                                            // 0x0010(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
//static_assert(alignof(JavascriptComponent_Expose) == 0x000008, "Wrong alignment on JavascriptComponent_Expose");
//static_assert(sizeof(JavascriptComponent_Expose) == 0x000018, "Wrong size on JavascriptComponent_Expose");
//static_assert(offsetof(JavascriptComponent_Expose, ExposedAs) == 0x000000, "Member 'JavascriptComponent_Expose::ExposedAs' has a wrong offset!");
//static_assert(offsetof(JavascriptComponent_Expose, Object) == 0x000010, "Member 'JavascriptComponent_Expose::Object' has a wrong offset!");

// Function V8.JavascriptComponent.Invoke
// 0x0008 (0x0008 - 0x0000)
struct JavascriptComponent_Invoke final
{
public:
	class FName                                   Name_0;                                            // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
//static_assert(alignof(JavascriptComponent_Invoke) == 0x000004, "Wrong alignment on JavascriptComponent_Invoke");
//static_assert(sizeof(JavascriptComponent_Invoke) == 0x000008, "Wrong size on JavascriptComponent_Invoke");
//static_assert(offsetof(JavascriptComponent_Invoke, Name_0) == 0x000000, "Member 'JavascriptComponent_Invoke::Name_0' has a wrong offset!");

// DelegateFunction V8.JavascriptComponent.JavascriptNameSignature__DelegateSignature
// 0x0008 (0x0008 - 0x0000)
struct JavascriptComponent_JavascriptNameSignature__DelegateSignature final
{
public:
	class FName                                   Name_0;                                            // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
//static_assert(alignof(JavascriptComponent_JavascriptNameSignature__DelegateSignature) == 0x000004, "Wrong alignment on JavascriptComponent_JavascriptNameSignature__DelegateSignature");
//static_assert(sizeof(JavascriptComponent_JavascriptNameSignature__DelegateSignature) == 0x000008, "Wrong size on JavascriptComponent_JavascriptNameSignature__DelegateSignature");
//static_assert(offsetof(JavascriptComponent_JavascriptNameSignature__DelegateSignature, Name_0) == 0x000000, "Member 'JavascriptComponent_JavascriptNameSignature__DelegateSignature::Name_0' has a wrong offset!");

// DelegateFunction V8.JavascriptComponent.JavascriptTickSignature__DelegateSignature
// 0x0004 (0x0004 - 0x0000)
struct JavascriptComponent_JavascriptTickSignature__DelegateSignature final
{
public:
	float                                         DeltaSeconds;                                      // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
//static_assert(alignof(JavascriptComponent_JavascriptTickSignature__DelegateSignature) == 0x000004, "Wrong alignment on JavascriptComponent_JavascriptTickSignature__DelegateSignature");
//static_assert(sizeof(JavascriptComponent_JavascriptTickSignature__DelegateSignature) == 0x000004, "Wrong size on JavascriptComponent_JavascriptTickSignature__DelegateSignature");
//static_assert(offsetof(JavascriptComponent_JavascriptTickSignature__DelegateSignature, DeltaSeconds) == 0x000000, "Member 'JavascriptComponent_JavascriptTickSignature__DelegateSignature::DeltaSeconds' has a wrong offset!");

// Function V8.JavascriptComponent.ResolveAsset
// 0x0018 (0x0018 - 0x0000)
struct JavascriptComponent_ResolveAsset final
{
public:
	class FName                                   Name_0;                                            // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bTryLoad;                                          // 0x0008(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UObject*                                ReturnValue;                                       // 0x0010(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
//static_assert(alignof(JavascriptComponent_ResolveAsset) == 0x000008, "Wrong alignment on JavascriptComponent_ResolveAsset");
//static_assert(sizeof(JavascriptComponent_ResolveAsset) == 0x000018, "Wrong size on JavascriptComponent_ResolveAsset");
//static_assert(offsetof(JavascriptComponent_ResolveAsset, Name_0) == 0x000000, "Member 'JavascriptComponent_ResolveAsset::Name_0' has a wrong offset!");
//static_assert(offsetof(JavascriptComponent_ResolveAsset, bTryLoad) == 0x000008, "Member 'JavascriptComponent_ResolveAsset::bTryLoad' has a wrong offset!");
//static_assert(offsetof(JavascriptComponent_ResolveAsset, ReturnValue) == 0x000010, "Member 'JavascriptComponent_ResolveAsset::ReturnValue' has a wrong offset!");

// Function V8.JavascriptComponent.ResolveClass
// 0x0010 (0x0010 - 0x0000)
struct JavascriptComponent_ResolveClass final
{
public:
	class FName                                   Name_0;                                            // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UClass*                                 ReturnValue;                                       // 0x0008(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
//static_assert(alignof(JavascriptComponent_ResolveClass) == 0x000008, "Wrong alignment on JavascriptComponent_ResolveClass");
//static_assert(sizeof(JavascriptComponent_ResolveClass) == 0x000010, "Wrong size on JavascriptComponent_ResolveClass");
//static_assert(offsetof(JavascriptComponent_ResolveClass, Name_0) == 0x000000, "Member 'JavascriptComponent_ResolveClass::Name_0' has a wrong offset!");
//static_assert(offsetof(JavascriptComponent_ResolveClass, ReturnValue) == 0x000008, "Member 'JavascriptComponent_ResolveClass::ReturnValue' has a wrong offset!");

// Function V8.JavascriptContext.CreateInspector
// 0x0004 (0x0004 - 0x0000)
struct JavascriptContext_CreateInspector final
{
public:
	int32                                         Port;                                              // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
//static_assert(alignof(JavascriptContext_CreateInspector) == 0x000004, "Wrong alignment on JavascriptContext_CreateInspector");
//static_assert(sizeof(JavascriptContext_CreateInspector) == 0x000004, "Wrong size on JavascriptContext_CreateInspector");
//static_assert(offsetof(JavascriptContext_CreateInspector, Port) == 0x000000, "Member 'JavascriptContext_CreateInspector::Port' has a wrong offset!");

// Function V8.JavascriptContext.Expose
// 0x0018 (0x0018 - 0x0000)
struct JavascriptContext_Expose final
{
public:
	class FString                                 Name_0;                                            // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UObject*                                Object;                                            // 0x0010(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
//static_assert(alignof(JavascriptContext_Expose) == 0x000008, "Wrong alignment on JavascriptContext_Expose");
//static_assert(sizeof(JavascriptContext_Expose) == 0x000018, "Wrong size on JavascriptContext_Expose");
//static_assert(offsetof(JavascriptContext_Expose, Name_0) == 0x000000, "Member 'JavascriptContext_Expose::Name_0' has a wrong offset!");
//static_assert(offsetof(JavascriptContext_Expose, Object) == 0x000010, "Member 'JavascriptContext_Expose::Object' has a wrong offset!");

// Function V8.JavascriptContext.FindPathFile
// 0x0030 (0x0030 - 0x0000)
struct JavascriptContext_FindPathFile final
{
public:
	class FString                                 TargetRootPath;                                    // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 TargetFileName;                                    // 0x0010(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<class FString>                         OutFiles;                                          // 0x0020(0x0010)(Parm, OutParm, ZeroConstructor, NativeAccessSpecifierPublic)
};
//static_assert(alignof(JavascriptContext_FindPathFile) == 0x000008, "Wrong alignment on JavascriptContext_FindPathFile");
//static_assert(sizeof(JavascriptContext_FindPathFile) == 0x000030, "Wrong size on JavascriptContext_FindPathFile");
//static_assert(offsetof(JavascriptContext_FindPathFile, TargetRootPath) == 0x000000, "Member 'JavascriptContext_FindPathFile::TargetRootPath' has a wrong offset!");
//static_assert(offsetof(JavascriptContext_FindPathFile, TargetFileName) == 0x000010, "Member 'JavascriptContext_FindPathFile::TargetFileName' has a wrong offset!");
//static_assert(offsetof(JavascriptContext_FindPathFile, OutFiles) == 0x000020, "Member 'JavascriptContext_FindPathFile::OutFiles' has a wrong offset!");

// Function V8.JavascriptContext.GetScriptFileFullPath
// 0x0020 (0x0020 - 0x0000)
struct JavascriptContext_GetScriptFileFullPath final
{
public:
	class FString                                 Filename;                                          // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 ReturnValue;                                       // 0x0010(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
//static_assert(alignof(JavascriptContext_GetScriptFileFullPath) == 0x000008, "Wrong alignment on JavascriptContext_GetScriptFileFullPath");
//static_assert(sizeof(JavascriptContext_GetScriptFileFullPath) == 0x000020, "Wrong size on JavascriptContext_GetScriptFileFullPath");
//static_assert(offsetof(JavascriptContext_GetScriptFileFullPath, Filename) == 0x000000, "Member 'JavascriptContext_GetScriptFileFullPath::Filename' has a wrong offset!");
//static_assert(offsetof(JavascriptContext_GetScriptFileFullPath, ReturnValue) == 0x000010, "Member 'JavascriptContext_GetScriptFileFullPath::ReturnValue' has a wrong offset!");

// Function V8.JavascriptContext.ReadScriptFile
// 0x0020 (0x0020 - 0x0000)
struct JavascriptContext_ReadScriptFile final
{
public:
	class FString                                 Filename;                                          // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 ReturnValue;                                       // 0x0010(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
//static_assert(alignof(JavascriptContext_ReadScriptFile) == 0x000008, "Wrong alignment on JavascriptContext_ReadScriptFile");
//static_assert(sizeof(JavascriptContext_ReadScriptFile) == 0x000020, "Wrong size on JavascriptContext_ReadScriptFile");
//static_assert(offsetof(JavascriptContext_ReadScriptFile, Filename) == 0x000000, "Member 'JavascriptContext_ReadScriptFile::Filename' has a wrong offset!");
//static_assert(offsetof(JavascriptContext_ReadScriptFile, ReturnValue) == 0x000010, "Member 'JavascriptContext_ReadScriptFile::ReturnValue' has a wrong offset!");

// Function V8.JavascriptContext.RegisterConsoleCommand
// 0x0030 (0x0030 - 0x0000)
struct JavascriptContext_RegisterConsoleCommand final
{
public:
	class FString                                 Command;                                           // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 Help;                                              // 0x0010(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FJavascriptFunction                    Function;                                          // 0x0020(0x0010)(Parm, NativeAccessSpecifierPublic)
};
//static_assert(alignof(JavascriptContext_RegisterConsoleCommand) == 0x000008, "Wrong alignment on JavascriptContext_RegisterConsoleCommand");
//static_assert(sizeof(JavascriptContext_RegisterConsoleCommand) == 0x000030, "Wrong size on JavascriptContext_RegisterConsoleCommand");
//static_assert(offsetof(JavascriptContext_RegisterConsoleCommand, Command) == 0x000000, "Member 'JavascriptContext_RegisterConsoleCommand::Command' has a wrong offset!");
//static_assert(offsetof(JavascriptContext_RegisterConsoleCommand, Help) == 0x000010, "Member 'JavascriptContext_RegisterConsoleCommand::Help' has a wrong offset!");
//static_assert(offsetof(JavascriptContext_RegisterConsoleCommand, Function) == 0x000020, "Member 'JavascriptContext_RegisterConsoleCommand::Function' has a wrong offset!");

// Function V8.JavascriptContext.RunFile
// 0x0010 (0x0010 - 0x0000)
struct JavascriptContext_RunFile final
{
public:
	class FString                                 Filename;                                          // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
//static_assert(alignof(JavascriptContext_RunFile) == 0x000008, "Wrong alignment on JavascriptContext_RunFile");
//static_assert(sizeof(JavascriptContext_RunFile) == 0x000010, "Wrong size on JavascriptContext_RunFile");
//static_assert(offsetof(JavascriptContext_RunFile, Filename) == 0x000000, "Member 'JavascriptContext_RunFile::Filename' has a wrong offset!");

// Function V8.JavascriptContext.RunScript
// 0x0028 (0x0028 - 0x0000)
struct JavascriptContext_RunScript final
{
public:
	class FString                                 Script;                                            // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bOutput;                                           // 0x0010(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_11[0x7];                                       // 0x0011(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 ReturnValue;                                       // 0x0018(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
//static_assert(alignof(JavascriptContext_RunScript) == 0x000008, "Wrong alignment on JavascriptContext_RunScript");
//static_assert(sizeof(JavascriptContext_RunScript) == 0x000028, "Wrong size on JavascriptContext_RunScript");
//static_assert(offsetof(JavascriptContext_RunScript, Script) == 0x000000, "Member 'JavascriptContext_RunScript::Script' has a wrong offset!");
//static_assert(offsetof(JavascriptContext_RunScript, bOutput) == 0x000010, "Member 'JavascriptContext_RunScript::bOutput' has a wrong offset!");
//static_assert(offsetof(JavascriptContext_RunScript, ReturnValue) == 0x000018, "Member 'JavascriptContext_RunScript::ReturnValue' has a wrong offset!");

// Function V8.JavascriptContext.SetContextId
// 0x0010 (0x0010 - 0x0000)
struct JavascriptContext_SetContextId final
{
public:
	class FString                                 Name_0;                                            // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
//static_assert(alignof(JavascriptContext_SetContextId) == 0x000008, "Wrong alignment on JavascriptContext_SetContextId");
//static_assert(sizeof(JavascriptContext_SetContextId) == 0x000010, "Wrong size on JavascriptContext_SetContextId");
//static_assert(offsetof(JavascriptContext_SetContextId, Name_0) == 0x000000, "Member 'JavascriptContext_SetContextId::Name_0' has a wrong offset!");

// Function V8.JavascriptContext.UnregisterConsoleCommand
// 0x0010 (0x0010 - 0x0000)
struct JavascriptContext_UnregisterConsoleCommand final
{
public:
	class FString                                 Command;                                           // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
//static_assert(alignof(JavascriptContext_UnregisterConsoleCommand) == 0x000008, "Wrong alignment on JavascriptContext_UnregisterConsoleCommand");
//static_assert(sizeof(JavascriptContext_UnregisterConsoleCommand) == 0x000010, "Wrong size on JavascriptContext_UnregisterConsoleCommand");
//static_assert(offsetof(JavascriptContext_UnregisterConsoleCommand, Command) == 0x000000, "Member 'JavascriptContext_UnregisterConsoleCommand::Command' has a wrong offset!");

// Function V8.JavascriptContext.WriteAliases
// 0x0018 (0x0018 - 0x0000)
struct JavascriptContext_WriteAliases final
{
public:
	class FString                                 Target;                                            // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0010(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_11[0x7];                                       // 0x0011(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
//static_assert(alignof(JavascriptContext_WriteAliases) == 0x000008, "Wrong alignment on JavascriptContext_WriteAliases");
//static_assert(sizeof(JavascriptContext_WriteAliases) == 0x000018, "Wrong size on JavascriptContext_WriteAliases");
//static_assert(offsetof(JavascriptContext_WriteAliases, Target) == 0x000000, "Member 'JavascriptContext_WriteAliases::Target' has a wrong offset!");
//static_assert(offsetof(JavascriptContext_WriteAliases, ReturnValue) == 0x000010, "Member 'JavascriptContext_WriteAliases::ReturnValue' has a wrong offset!");

// Function V8.JavascriptContext.WriteDTS
// 0x0018 (0x0018 - 0x0000)
struct JavascriptContext_WriteDTS final
{
public:
	class FString                                 Target;                                            // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bIncludingTooltip;                                 // 0x0010(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0011(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_12[0x6];                                       // 0x0012(0x0006)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
//static_assert(alignof(JavascriptContext_WriteDTS) == 0x000008, "Wrong alignment on JavascriptContext_WriteDTS");
//static_assert(sizeof(JavascriptContext_WriteDTS) == 0x000018, "Wrong size on JavascriptContext_WriteDTS");
//static_assert(offsetof(JavascriptContext_WriteDTS, Target) == 0x000000, "Member 'JavascriptContext_WriteDTS::Target' has a wrong offset!");
//static_assert(offsetof(JavascriptContext_WriteDTS, bIncludingTooltip) == 0x000010, "Member 'JavascriptContext_WriteDTS::bIncludingTooltip' has a wrong offset!");
//static_assert(offsetof(JavascriptContext_WriteDTS, ReturnValue) == 0x000011, "Member 'JavascriptContext_WriteDTS::ReturnValue' has a wrong offset!");

// Function V8.JavascriptContext.IsDebugContext
// 0x0001 (0x0001 - 0x0000)
struct JavascriptContext_IsDebugContext final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
//static_assert(alignof(JavascriptContext_IsDebugContext) == 0x000001, "Wrong alignment on JavascriptContext_IsDebugContext");
//static_assert(sizeof(JavascriptContext_IsDebugContext) == 0x000001, "Wrong size on JavascriptContext_IsDebugContext");
//static_assert(offsetof(JavascriptContext_IsDebugContext, ReturnValue) == 0x000000, "Member 'JavascriptContext_IsDebugContext::ReturnValue' has a wrong offset!");

// Function V8.JavascriptGlobalDelegates.Bind
// 0x0010 (0x0010 - 0x0000)
struct JavascriptGlobalDelegates_Bind final
{
public:
	class FString                                 Key;                                               // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
//static_assert(alignof(JavascriptGlobalDelegates_Bind) == 0x000008, "Wrong alignment on JavascriptGlobalDelegates_Bind");
//static_assert(sizeof(JavascriptGlobalDelegates_Bind) == 0x000010, "Wrong size on JavascriptGlobalDelegates_Bind");
//static_assert(offsetof(JavascriptGlobalDelegates_Bind, Key) == 0x000000, "Member 'JavascriptGlobalDelegates_Bind::Key' has a wrong offset!");

// Function V8.JavascriptGlobalDelegates.LevelAddedToWorld
// 0x0010 (0x0010 - 0x0000)
struct JavascriptGlobalDelegates_LevelAddedToWorld final
{
public:
	class ULevel*                                 Level;                                             // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UWorld*                                 World;                                             // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
//static_assert(alignof(JavascriptGlobalDelegates_LevelAddedToWorld) == 0x000008, "Wrong alignment on JavascriptGlobalDelegates_LevelAddedToWorld");
//static_assert(sizeof(JavascriptGlobalDelegates_LevelAddedToWorld) == 0x000010, "Wrong size on JavascriptGlobalDelegates_LevelAddedToWorld");
//static_assert(offsetof(JavascriptGlobalDelegates_LevelAddedToWorld, Level) == 0x000000, "Member 'JavascriptGlobalDelegates_LevelAddedToWorld::Level' has a wrong offset!");
//static_assert(offsetof(JavascriptGlobalDelegates_LevelAddedToWorld, World) == 0x000008, "Member 'JavascriptGlobalDelegates_LevelAddedToWorld::World' has a wrong offset!");

// Function V8.JavascriptGlobalDelegates.LevelRemovedFromWorld
// 0x0010 (0x0010 - 0x0000)
struct JavascriptGlobalDelegates_LevelRemovedFromWorld final
{
public:
	class ULevel*                                 Level;                                             // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UWorld*                                 World;                                             // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
//static_assert(alignof(JavascriptGlobalDelegates_LevelRemovedFromWorld) == 0x000008, "Wrong alignment on JavascriptGlobalDelegates_LevelRemovedFromWorld");
//static_assert(sizeof(JavascriptGlobalDelegates_LevelRemovedFromWorld) == 0x000010, "Wrong size on JavascriptGlobalDelegates_LevelRemovedFromWorld");
//static_assert(offsetof(JavascriptGlobalDelegates_LevelRemovedFromWorld, Level) == 0x000000, "Member 'JavascriptGlobalDelegates_LevelRemovedFromWorld::Level' has a wrong offset!");
//static_assert(offsetof(JavascriptGlobalDelegates_LevelRemovedFromWorld, World) == 0x000008, "Member 'JavascriptGlobalDelegates_LevelRemovedFromWorld::World' has a wrong offset!");

// Function V8.JavascriptGlobalDelegates.OnActorLabelChanged
// 0x0008 (0x0008 - 0x0000)
struct JavascriptGlobalDelegates_OnActorLabelChanged final
{
public:
	class AActor*                                 Actor;                                             // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
//static_assert(alignof(JavascriptGlobalDelegates_OnActorLabelChanged) == 0x000008, "Wrong alignment on JavascriptGlobalDelegates_OnActorLabelChanged");
//static_assert(sizeof(JavascriptGlobalDelegates_OnActorLabelChanged) == 0x000008, "Wrong size on JavascriptGlobalDelegates_OnActorLabelChanged");
//static_assert(offsetof(JavascriptGlobalDelegates_OnActorLabelChanged, Actor) == 0x000000, "Member 'JavascriptGlobalDelegates_OnActorLabelChanged::Actor' has a wrong offset!");

// Function V8.JavascriptGlobalDelegates.OnAssetLoaded
// 0x0008 (0x0008 - 0x0000)
struct JavascriptGlobalDelegates_OnAssetLoaded final
{
public:
	class UObject*                                Object;                                            // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
//static_assert(alignof(JavascriptGlobalDelegates_OnAssetLoaded) == 0x000008, "Wrong alignment on JavascriptGlobalDelegates_OnAssetLoaded");
//static_assert(sizeof(JavascriptGlobalDelegates_OnAssetLoaded) == 0x000008, "Wrong size on JavascriptGlobalDelegates_OnAssetLoaded");
//static_assert(offsetof(JavascriptGlobalDelegates_OnAssetLoaded, Object) == 0x000000, "Member 'JavascriptGlobalDelegates_OnAssetLoaded::Object' has a wrong offset!");

// Function V8.JavascriptGlobalDelegates.OnObjectModified
// 0x0008 (0x0008 - 0x0000)
struct JavascriptGlobalDelegates_OnObjectModified final
{
public:
	class UObject*                                Object;                                            // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
//static_assert(alignof(JavascriptGlobalDelegates_OnObjectModified) == 0x000008, "Wrong alignment on JavascriptGlobalDelegates_OnObjectModified");
//static_assert(sizeof(JavascriptGlobalDelegates_OnObjectModified) == 0x000008, "Wrong size on JavascriptGlobalDelegates_OnObjectModified");
//static_assert(offsetof(JavascriptGlobalDelegates_OnObjectModified, Object) == 0x000000, "Member 'JavascriptGlobalDelegates_OnObjectModified::Object' has a wrong offset!");

// Function V8.JavascriptGlobalDelegates.OnObjectPropertyChanged_Friendly
// 0x0050 (0x0050 - 0x0000)
struct JavascriptGlobalDelegates_OnObjectPropertyChanged_Friendly final
{
public:
	class UObject*                                InObject;                                          // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TFieldPath<struct FProperty>                  Property;                                          // 0x0008(0x0020)(ConstParm, Parm, OutParm, ReferenceParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TFieldPath<struct FProperty>                  MemberProperty;                                    // 0x0028(0x0020)(ConstParm, Parm, OutParm, ReferenceParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         ChangeType;                                        // 0x0048(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_4C[0x4];                                       // 0x004C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
//static_assert(alignof(JavascriptGlobalDelegates_OnObjectPropertyChanged_Friendly) == 0x000008, "Wrong alignment on JavascriptGlobalDelegates_OnObjectPropertyChanged_Friendly");
//static_assert(sizeof(JavascriptGlobalDelegates_OnObjectPropertyChanged_Friendly) == 0x000050, "Wrong size on JavascriptGlobalDelegates_OnObjectPropertyChanged_Friendly");
//static_assert(offsetof(JavascriptGlobalDelegates_OnObjectPropertyChanged_Friendly, InObject) == 0x000000, "Member 'JavascriptGlobalDelegates_OnObjectPropertyChanged_Friendly::InObject' has a wrong offset!");
//static_assert(offsetof(JavascriptGlobalDelegates_OnObjectPropertyChanged_Friendly, Property) == 0x000008, "Member 'JavascriptGlobalDelegates_OnObjectPropertyChanged_Friendly::Property' has a wrong offset!");
//static_assert(offsetof(JavascriptGlobalDelegates_OnObjectPropertyChanged_Friendly, MemberProperty) == 0x000028, "Member 'JavascriptGlobalDelegates_OnObjectPropertyChanged_Friendly::MemberProperty' has a wrong offset!");
//static_assert(offsetof(JavascriptGlobalDelegates_OnObjectPropertyChanged_Friendly, ChangeType) == 0x000048, "Member 'JavascriptGlobalDelegates_OnObjectPropertyChanged_Friendly::ChangeType' has a wrong offset!");

// Function V8.JavascriptGlobalDelegates.OnObjectSaved
// 0x0008 (0x0008 - 0x0000)
struct JavascriptGlobalDelegates_OnObjectSaved final
{
public:
	class UObject*                                Object;                                            // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
//static_assert(alignof(JavascriptGlobalDelegates_OnObjectSaved) == 0x000008, "Wrong alignment on JavascriptGlobalDelegates_OnObjectSaved");
//static_assert(sizeof(JavascriptGlobalDelegates_OnObjectSaved) == 0x000008, "Wrong size on JavascriptGlobalDelegates_OnObjectSaved");
//static_assert(offsetof(JavascriptGlobalDelegates_OnObjectSaved, Object) == 0x000000, "Member 'JavascriptGlobalDelegates_OnObjectSaved::Object' has a wrong offset!");

// Function V8.JavascriptGlobalDelegates.OnPostDuplicate_Friendly
// 0x0010 (0x0010 - 0x0000)
struct JavascriptGlobalDelegates_OnPostDuplicate_Friendly final
{
public:
	class UWorld*                                 World;                                             // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bDuplicateForPIE;                                  // 0x0008(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
//static_assert(alignof(JavascriptGlobalDelegates_OnPostDuplicate_Friendly) == 0x000008, "Wrong alignment on JavascriptGlobalDelegates_OnPostDuplicate_Friendly");
//static_assert(sizeof(JavascriptGlobalDelegates_OnPostDuplicate_Friendly) == 0x000010, "Wrong size on JavascriptGlobalDelegates_OnPostDuplicate_Friendly");
//static_assert(offsetof(JavascriptGlobalDelegates_OnPostDuplicate_Friendly, World) == 0x000000, "Member 'JavascriptGlobalDelegates_OnPostDuplicate_Friendly::World' has a wrong offset!");
//static_assert(offsetof(JavascriptGlobalDelegates_OnPostDuplicate_Friendly, bDuplicateForPIE) == 0x000008, "Member 'JavascriptGlobalDelegates_OnPostDuplicate_Friendly::bDuplicateForPIE' has a wrong offset!");

// Function V8.JavascriptGlobalDelegates.OnPostWorldCreation
// 0x0008 (0x0008 - 0x0000)
struct JavascriptGlobalDelegates_OnPostWorldCreation final
{
public:
	class UWorld*                                 World;                                             // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
//static_assert(alignof(JavascriptGlobalDelegates_OnPostWorldCreation) == 0x000008, "Wrong alignment on JavascriptGlobalDelegates_OnPostWorldCreation");
//static_assert(sizeof(JavascriptGlobalDelegates_OnPostWorldCreation) == 0x000008, "Wrong size on JavascriptGlobalDelegates_OnPostWorldCreation");
//static_assert(offsetof(JavascriptGlobalDelegates_OnPostWorldCreation, World) == 0x000000, "Member 'JavascriptGlobalDelegates_OnPostWorldCreation::World' has a wrong offset!");

// Function V8.JavascriptGlobalDelegates.OnPostWorldInitialization_Friendly
// 0x0008 (0x0008 - 0x0000)
struct JavascriptGlobalDelegates_OnPostWorldInitialization_Friendly final
{
public:
	class UWorld*                                 World;                                             // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
//static_assert(alignof(JavascriptGlobalDelegates_OnPostWorldInitialization_Friendly) == 0x000008, "Wrong alignment on JavascriptGlobalDelegates_OnPostWorldInitialization_Friendly");
//static_assert(sizeof(JavascriptGlobalDelegates_OnPostWorldInitialization_Friendly) == 0x000008, "Wrong size on JavascriptGlobalDelegates_OnPostWorldInitialization_Friendly");
//static_assert(offsetof(JavascriptGlobalDelegates_OnPostWorldInitialization_Friendly, World) == 0x000000, "Member 'JavascriptGlobalDelegates_OnPostWorldInitialization_Friendly::World' has a wrong offset!");

// Function V8.JavascriptGlobalDelegates.OnPreObjectPropertyChanged_Friendly
// 0x0048 (0x0048 - 0x0000)
struct JavascriptGlobalDelegates_OnPreObjectPropertyChanged_Friendly final
{
public:
	class UObject*                                InObject;                                          // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TFieldPath<struct FProperty>                  Property;                                          // 0x0008(0x0020)(ConstParm, Parm, OutParm, ReferenceParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TFieldPath<struct FProperty>                  MemberProperty;                                    // 0x0028(0x0020)(ConstParm, Parm, OutParm, ReferenceParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
//static_assert(alignof(JavascriptGlobalDelegates_OnPreObjectPropertyChanged_Friendly) == 0x000008, "Wrong alignment on JavascriptGlobalDelegates_OnPreObjectPropertyChanged_Friendly");
//static_assert(sizeof(JavascriptGlobalDelegates_OnPreObjectPropertyChanged_Friendly) == 0x000048, "Wrong size on JavascriptGlobalDelegates_OnPreObjectPropertyChanged_Friendly");
//static_assert(offsetof(JavascriptGlobalDelegates_OnPreObjectPropertyChanged_Friendly, InObject) == 0x000000, "Member 'JavascriptGlobalDelegates_OnPreObjectPropertyChanged_Friendly::InObject' has a wrong offset!");
//static_assert(offsetof(JavascriptGlobalDelegates_OnPreObjectPropertyChanged_Friendly, Property) == 0x000008, "Member 'JavascriptGlobalDelegates_OnPreObjectPropertyChanged_Friendly::Property' has a wrong offset!");
//static_assert(offsetof(JavascriptGlobalDelegates_OnPreObjectPropertyChanged_Friendly, MemberProperty) == 0x000028, "Member 'JavascriptGlobalDelegates_OnPreObjectPropertyChanged_Friendly::MemberProperty' has a wrong offset!");

// Function V8.JavascriptGlobalDelegates.OnPreWorldFinishDestroy
// 0x0008 (0x0008 - 0x0000)
struct JavascriptGlobalDelegates_OnPreWorldFinishDestroy final
{
public:
	class UWorld*                                 World;                                             // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
//static_assert(alignof(JavascriptGlobalDelegates_OnPreWorldFinishDestroy) == 0x000008, "Wrong alignment on JavascriptGlobalDelegates_OnPreWorldFinishDestroy");
//static_assert(sizeof(JavascriptGlobalDelegates_OnPreWorldFinishDestroy) == 0x000008, "Wrong size on JavascriptGlobalDelegates_OnPreWorldFinishDestroy");
//static_assert(offsetof(JavascriptGlobalDelegates_OnPreWorldFinishDestroy, World) == 0x000000, "Member 'JavascriptGlobalDelegates_OnPreWorldFinishDestroy::World' has a wrong offset!");

// Function V8.JavascriptGlobalDelegates.OnPreWorldInitialization_Friendly
// 0x0008 (0x0008 - 0x0000)
struct JavascriptGlobalDelegates_OnPreWorldInitialization_Friendly final
{
public:
	class UWorld*                                 World;                                             // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
//static_assert(alignof(JavascriptGlobalDelegates_OnPreWorldInitialization_Friendly) == 0x000008, "Wrong alignment on JavascriptGlobalDelegates_OnPreWorldInitialization_Friendly");
//static_assert(sizeof(JavascriptGlobalDelegates_OnPreWorldInitialization_Friendly) == 0x000008, "Wrong size on JavascriptGlobalDelegates_OnPreWorldInitialization_Friendly");
//static_assert(offsetof(JavascriptGlobalDelegates_OnPreWorldInitialization_Friendly, World) == 0x000000, "Member 'JavascriptGlobalDelegates_OnPreWorldInitialization_Friendly::World' has a wrong offset!");

// Function V8.JavascriptGlobalDelegates.OnWorldCleanup
// 0x0010 (0x0010 - 0x0000)
struct JavascriptGlobalDelegates_OnWorldCleanup final
{
public:
	class UWorld*                                 World;                                             // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bSessionEnded;                                     // 0x0008(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bCleanupResources;                                 // 0x0009(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_A[0x6];                                        // 0x000A(0x0006)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
//static_assert(alignof(JavascriptGlobalDelegates_OnWorldCleanup) == 0x000008, "Wrong alignment on JavascriptGlobalDelegates_OnWorldCleanup");
//static_assert(sizeof(JavascriptGlobalDelegates_OnWorldCleanup) == 0x000010, "Wrong size on JavascriptGlobalDelegates_OnWorldCleanup");
//static_assert(offsetof(JavascriptGlobalDelegates_OnWorldCleanup, World) == 0x000000, "Member 'JavascriptGlobalDelegates_OnWorldCleanup::World' has a wrong offset!");
//static_assert(offsetof(JavascriptGlobalDelegates_OnWorldCleanup, bSessionEnded) == 0x000008, "Member 'JavascriptGlobalDelegates_OnWorldCleanup::bSessionEnded' has a wrong offset!");
//static_assert(offsetof(JavascriptGlobalDelegates_OnWorldCleanup, bCleanupResources) == 0x000009, "Member 'JavascriptGlobalDelegates_OnWorldCleanup::bCleanupResources' has a wrong offset!");

// Function V8.JavascriptGlobalDelegates.PackageCreatedForLoad
// 0x0008 (0x0008 - 0x0000)
struct JavascriptGlobalDelegates_PackageCreatedForLoad final
{
public:
	class UPackage*                               InPackage;                                         // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
//static_assert(alignof(JavascriptGlobalDelegates_PackageCreatedForLoad) == 0x000008, "Wrong alignment on JavascriptGlobalDelegates_PackageCreatedForLoad");
//static_assert(sizeof(JavascriptGlobalDelegates_PackageCreatedForLoad) == 0x000008, "Wrong size on JavascriptGlobalDelegates_PackageCreatedForLoad");
//static_assert(offsetof(JavascriptGlobalDelegates_PackageCreatedForLoad, InPackage) == 0x000000, "Member 'JavascriptGlobalDelegates_PackageCreatedForLoad::InPackage' has a wrong offset!");

// Function V8.JavascriptGlobalDelegates.PostApplyLevelOffset
// 0x0030 (0x0030 - 0x0000)
struct JavascriptGlobalDelegates_PostApplyLevelOffset final
{
public:
	class ULevel*                                 Level;                                             // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UWorld*                                 World;                                             // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                Offset;                                            // 0x0010(0x0018)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          Flag;                                              // 0x0028(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_29[0x7];                                       // 0x0029(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
//static_assert(alignof(JavascriptGlobalDelegates_PostApplyLevelOffset) == 0x000008, "Wrong alignment on JavascriptGlobalDelegates_PostApplyLevelOffset");
//static_assert(sizeof(JavascriptGlobalDelegates_PostApplyLevelOffset) == 0x000030, "Wrong size on JavascriptGlobalDelegates_PostApplyLevelOffset");
//static_assert(offsetof(JavascriptGlobalDelegates_PostApplyLevelOffset, Level) == 0x000000, "Member 'JavascriptGlobalDelegates_PostApplyLevelOffset::Level' has a wrong offset!");
//static_assert(offsetof(JavascriptGlobalDelegates_PostApplyLevelOffset, World) == 0x000008, "Member 'JavascriptGlobalDelegates_PostApplyLevelOffset::World' has a wrong offset!");
//static_assert(offsetof(JavascriptGlobalDelegates_PostApplyLevelOffset, Offset) == 0x000010, "Member 'JavascriptGlobalDelegates_PostApplyLevelOffset::Offset' has a wrong offset!");
//static_assert(offsetof(JavascriptGlobalDelegates_PostApplyLevelOffset, Flag) == 0x000028, "Member 'JavascriptGlobalDelegates_PostApplyLevelOffset::Flag' has a wrong offset!");

// Function V8.JavascriptGlobalDelegates.PostLoadMapWithWorld
// 0x0008 (0x0008 - 0x0000)
struct JavascriptGlobalDelegates_PostLoadMapWithWorld final
{
public:
	class UWorld*                                 World;                                             // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
//static_assert(alignof(JavascriptGlobalDelegates_PostLoadMapWithWorld) == 0x000008, "Wrong alignment on JavascriptGlobalDelegates_PostLoadMapWithWorld");
//static_assert(sizeof(JavascriptGlobalDelegates_PostLoadMapWithWorld) == 0x000008, "Wrong size on JavascriptGlobalDelegates_PostLoadMapWithWorld");
//static_assert(offsetof(JavascriptGlobalDelegates_PostLoadMapWithWorld, World) == 0x000000, "Member 'JavascriptGlobalDelegates_PostLoadMapWithWorld::World' has a wrong offset!");

// Function V8.JavascriptGlobalDelegates.PreLoadMap
// 0x0010 (0x0010 - 0x0000)
struct JavascriptGlobalDelegates_PreLoadMap final
{
public:
	class FString                                 MapName;                                           // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
//static_assert(alignof(JavascriptGlobalDelegates_PreLoadMap) == 0x000008, "Wrong alignment on JavascriptGlobalDelegates_PreLoadMap");
//static_assert(sizeof(JavascriptGlobalDelegates_PreLoadMap) == 0x000010, "Wrong size on JavascriptGlobalDelegates_PreLoadMap");
//static_assert(offsetof(JavascriptGlobalDelegates_PreLoadMap, MapName) == 0x000000, "Member 'JavascriptGlobalDelegates_PreLoadMap::MapName' has a wrong offset!");

// Function V8.JavascriptGlobalDelegates.RedirectorFollowed
// 0x0018 (0x0018 - 0x0000)
struct JavascriptGlobalDelegates_RedirectorFollowed final
{
public:
	class FString                                 PackageName;                                       // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UObject*                                Redirector;                                        // 0x0010(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
//static_assert(alignof(JavascriptGlobalDelegates_RedirectorFollowed) == 0x000008, "Wrong alignment on JavascriptGlobalDelegates_RedirectorFollowed");
//static_assert(sizeof(JavascriptGlobalDelegates_RedirectorFollowed) == 0x000018, "Wrong size on JavascriptGlobalDelegates_RedirectorFollowed");
//static_assert(offsetof(JavascriptGlobalDelegates_RedirectorFollowed, PackageName) == 0x000000, "Member 'JavascriptGlobalDelegates_RedirectorFollowed::PackageName' has a wrong offset!");
//static_assert(offsetof(JavascriptGlobalDelegates_RedirectorFollowed, Redirector) == 0x000010, "Member 'JavascriptGlobalDelegates_RedirectorFollowed::Redirector' has a wrong offset!");

// Function V8.JavascriptGlobalDelegates.Unbind
// 0x0010 (0x0010 - 0x0000)
struct JavascriptGlobalDelegates_Unbind final
{
public:
	class FString                                 Key;                                               // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
//static_assert(alignof(JavascriptGlobalDelegates_Unbind) == 0x000008, "Wrong alignment on JavascriptGlobalDelegates_Unbind");
//static_assert(sizeof(JavascriptGlobalDelegates_Unbind) == 0x000010, "Wrong size on JavascriptGlobalDelegates_Unbind");
//static_assert(offsetof(JavascriptGlobalDelegates_Unbind, Key) == 0x000000, "Member 'JavascriptGlobalDelegates_Unbind::Key' has a wrong offset!");

// Function V8.JavascriptIsolate.CreateContext
// 0x0008 (0x0008 - 0x0000)
struct JavascriptIsolate_CreateContext final
{
public:
	class UJavascriptContext*                     ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
//static_assert(alignof(JavascriptIsolate_CreateContext) == 0x000008, "Wrong alignment on JavascriptIsolate_CreateContext");
//static_assert(sizeof(JavascriptIsolate_CreateContext) == 0x000008, "Wrong size on JavascriptIsolate_CreateContext");
//static_assert(offsetof(JavascriptIsolate_CreateContext, ReturnValue) == 0x000000, "Member 'JavascriptIsolate_CreateContext::ReturnValue' has a wrong offset!");

// Function V8.JavascriptIsolate.GetHeapStatistics
// 0x0020 (0x0020 - 0x0000)
struct JavascriptIsolate_GetHeapStatistics final
{
public:
	struct FJavascriptHeapStatistics              Statistics;                                        // 0x0000(0x0020)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
};
//static_assert(alignof(JavascriptIsolate_GetHeapStatistics) == 0x000004, "Wrong alignment on JavascriptIsolate_GetHeapStatistics");
//static_assert(sizeof(JavascriptIsolate_GetHeapStatistics) == 0x000020, "Wrong size on JavascriptIsolate_GetHeapStatistics");
//static_assert(offsetof(JavascriptIsolate_GetHeapStatistics, Statistics) == 0x000000, "Member 'JavascriptIsolate_GetHeapStatistics::Statistics' has a wrong offset!");

// Function V8.JavascriptIsolate.Init
// 0x0001 (0x0001 - 0x0000)
struct JavascriptIsolate_Init final
{
public:
	bool                                          bIsEditor;                                         // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
//static_assert(alignof(JavascriptIsolate_Init) == 0x000001, "Wrong alignment on JavascriptIsolate_Init");
//static_assert(sizeof(JavascriptIsolate_Init) == 0x000001, "Wrong size on JavascriptIsolate_Init");
//static_assert(offsetof(JavascriptIsolate_Init, bIsEditor) == 0x000000, "Member 'JavascriptIsolate_Init::bIsEditor' has a wrong offset!");

// Function V8.JavascriptLibrary.Actor_GetWorld
// 0x0010 (0x0010 - 0x0000)
struct JavascriptLibrary_Actor_GetWorld final
{
public:
	class AActor*                                 Actor;                                             // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UWorld*                                 ReturnValue;                                       // 0x0008(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
//static_assert(alignof(JavascriptLibrary_Actor_GetWorld) == 0x000008, "Wrong alignment on JavascriptLibrary_Actor_GetWorld");
//static_assert(sizeof(JavascriptLibrary_Actor_GetWorld) == 0x000010, "Wrong size on JavascriptLibrary_Actor_GetWorld");
//static_assert(offsetof(JavascriptLibrary_Actor_GetWorld, Actor) == 0x000000, "Member 'JavascriptLibrary_Actor_GetWorld::Actor' has a wrong offset!");
//static_assert(offsetof(JavascriptLibrary_Actor_GetWorld, ReturnValue) == 0x000008, "Member 'JavascriptLibrary_Actor_GetWorld::ReturnValue' has a wrong offset!");

// Function V8.JavascriptLibrary.AddDynamicBinding
// 0x0010 (0x0010 - 0x0000)
struct JavascriptLibrary_AddDynamicBinding final
{
public:
	class UClass*                                 Outer_0;                                           // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UDynamicBlueprintBinding*               BindingObject;                                     // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
//static_assert(alignof(JavascriptLibrary_AddDynamicBinding) == 0x000008, "Wrong alignment on JavascriptLibrary_AddDynamicBinding");
//static_assert(sizeof(JavascriptLibrary_AddDynamicBinding) == 0x000010, "Wrong size on JavascriptLibrary_AddDynamicBinding");
//static_assert(offsetof(JavascriptLibrary_AddDynamicBinding, Outer_0) == 0x000000, "Member 'JavascriptLibrary_AddDynamicBinding::Outer_0' has a wrong offset!");
//static_assert(offsetof(JavascriptLibrary_AddDynamicBinding, BindingObject) == 0x000008, "Member 'JavascriptLibrary_AddDynamicBinding::BindingObject' has a wrong offset!");

// Function V8.JavascriptLibrary.AddMessage
// 0x0002 (0x0002 - 0x0000)
struct JavascriptLibrary_AddMessage final
{
public:
	struct FJavascriptStat                        Stat;                                              // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	EJavascriptStatOperation                      InStatOperation;                                   // 0x0001(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
//static_assert(alignof(JavascriptLibrary_AddMessage) == 0x000001, "Wrong alignment on JavascriptLibrary_AddMessage");
//static_assert(sizeof(JavascriptLibrary_AddMessage) == 0x000002, "Wrong size on JavascriptLibrary_AddMessage");
//static_assert(offsetof(JavascriptLibrary_AddMessage, Stat) == 0x000000, "Member 'JavascriptLibrary_AddMessage::Stat' has a wrong offset!");
//static_assert(offsetof(JavascriptLibrary_AddMessage, InStatOperation) == 0x000001, "Member 'JavascriptLibrary_AddMessage::InStatOperation' has a wrong offset!");

// Function V8.JavascriptLibrary.AddMessage_float
// 0x000C (0x000C - 0x0000)
struct JavascriptLibrary_AddMessage_float final
{
public:
	struct FJavascriptStat                        Stat;                                              // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	EJavascriptStatOperation                      InStatOperation;                                   // 0x0001(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2[0x2];                                        // 0x0002(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         Value;                                             // 0x0004(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bIsCycle;                                          // 0x0008(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x3];                                        // 0x0009(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
//static_assert(alignof(JavascriptLibrary_AddMessage_float) == 0x000004, "Wrong alignment on JavascriptLibrary_AddMessage_float");
//static_assert(sizeof(JavascriptLibrary_AddMessage_float) == 0x00000C, "Wrong size on JavascriptLibrary_AddMessage_float");
//static_assert(offsetof(JavascriptLibrary_AddMessage_float, Stat) == 0x000000, "Member 'JavascriptLibrary_AddMessage_float::Stat' has a wrong offset!");
//static_assert(offsetof(JavascriptLibrary_AddMessage_float, InStatOperation) == 0x000001, "Member 'JavascriptLibrary_AddMessage_float::InStatOperation' has a wrong offset!");
//static_assert(offsetof(JavascriptLibrary_AddMessage_float, Value) == 0x000004, "Member 'JavascriptLibrary_AddMessage_float::Value' has a wrong offset!");
//static_assert(offsetof(JavascriptLibrary_AddMessage_float, bIsCycle) == 0x000008, "Member 'JavascriptLibrary_AddMessage_float::bIsCycle' has a wrong offset!");

// Function V8.JavascriptLibrary.AddMessage_int
// 0x000C (0x000C - 0x0000)
struct JavascriptLibrary_AddMessage_int final
{
public:
	struct FJavascriptStat                        Stat;                                              // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	EJavascriptStatOperation                      InStatOperation;                                   // 0x0001(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2[0x2];                                        // 0x0002(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         Value;                                             // 0x0004(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bIsCycle;                                          // 0x0008(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x3];                                        // 0x0009(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
//static_assert(alignof(JavascriptLibrary_AddMessage_int) == 0x000004, "Wrong alignment on JavascriptLibrary_AddMessage_int");
//static_assert(sizeof(JavascriptLibrary_AddMessage_int) == 0x00000C, "Wrong size on JavascriptLibrary_AddMessage_int");
//static_assert(offsetof(JavascriptLibrary_AddMessage_int, Stat) == 0x000000, "Member 'JavascriptLibrary_AddMessage_int::Stat' has a wrong offset!");
//static_assert(offsetof(JavascriptLibrary_AddMessage_int, InStatOperation) == 0x000001, "Member 'JavascriptLibrary_AddMessage_int::InStatOperation' has a wrong offset!");
//static_assert(offsetof(JavascriptLibrary_AddMessage_int, Value) == 0x000004, "Member 'JavascriptLibrary_AddMessage_int::Value' has a wrong offset!");
//static_assert(offsetof(JavascriptLibrary_AddMessage_int, bIsCycle) == 0x000008, "Member 'JavascriptLibrary_AddMessage_int::bIsCycle' has a wrong offset!");

// Function V8.JavascriptLibrary.CallJS
// 0x0018 (0x0018 - 0x0000)
struct JavascriptLibrary_CallJS final
{
public:
	struct FJavascriptFunction                    Function;                                          // 0x0000(0x0010)(Parm, NativeAccessSpecifierPublic)
	struct FJavascriptStubStruct                  CustomStruct;                                      // 0x0010(0x0001)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	uint8                                         Pad_11[0x7];                                       // 0x0011(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
//static_assert(alignof(JavascriptLibrary_CallJS) == 0x000008, "Wrong alignment on JavascriptLibrary_CallJS");
//static_assert(sizeof(JavascriptLibrary_CallJS) == 0x000018, "Wrong size on JavascriptLibrary_CallJS");
//static_assert(offsetof(JavascriptLibrary_CallJS, Function) == 0x000000, "Member 'JavascriptLibrary_CallJS::Function' has a wrong offset!");
//static_assert(offsetof(JavascriptLibrary_CallJS, CustomStruct) == 0x000010, "Member 'JavascriptLibrary_CallJS::CustomStruct' has a wrong offset!");

// Function V8.JavascriptLibrary.ClipboardCopy
// 0x0010 (0x0010 - 0x0000)
struct JavascriptLibrary_ClipboardCopy final
{
public:
	class FString                                 String;                                            // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
//static_assert(alignof(JavascriptLibrary_ClipboardCopy) == 0x000008, "Wrong alignment on JavascriptLibrary_ClipboardCopy");
//static_assert(sizeof(JavascriptLibrary_ClipboardCopy) == 0x000010, "Wrong size on JavascriptLibrary_ClipboardCopy");
//static_assert(offsetof(JavascriptLibrary_ClipboardCopy, String) == 0x000000, "Member 'JavascriptLibrary_ClipboardCopy::String' has a wrong offset!");

// Function V8.JavascriptLibrary.ClipboardPaste
// 0x0010 (0x0010 - 0x0000)
struct JavascriptLibrary_ClipboardPaste final
{
public:
	class FString                                 ReturnValue;                                       // 0x0000(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
//static_assert(alignof(JavascriptLibrary_ClipboardPaste) == 0x000008, "Wrong alignment on JavascriptLibrary_ClipboardPaste");
//static_assert(sizeof(JavascriptLibrary_ClipboardPaste) == 0x000010, "Wrong size on JavascriptLibrary_ClipboardPaste");
//static_assert(offsetof(JavascriptLibrary_ClipboardPaste, ReturnValue) == 0x000000, "Member 'JavascriptLibrary_ClipboardPaste::ReturnValue' has a wrong offset!");

// Function V8.JavascriptLibrary.ConvertRelativePathToFull
// 0x0028 (0x0028 - 0x0000)
struct JavascriptLibrary_ConvertRelativePathToFull final
{
public:
	class UObject*                                Object;                                            // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 RelativePath;                                      // 0x0008(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 ReturnValue;                                       // 0x0018(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
//static_assert(alignof(JavascriptLibrary_ConvertRelativePathToFull) == 0x000008, "Wrong alignment on JavascriptLibrary_ConvertRelativePathToFull");
//static_assert(sizeof(JavascriptLibrary_ConvertRelativePathToFull) == 0x000028, "Wrong size on JavascriptLibrary_ConvertRelativePathToFull");
//static_assert(offsetof(JavascriptLibrary_ConvertRelativePathToFull, Object) == 0x000000, "Member 'JavascriptLibrary_ConvertRelativePathToFull::Object' has a wrong offset!");
//static_assert(offsetof(JavascriptLibrary_ConvertRelativePathToFull, RelativePath) == 0x000008, "Member 'JavascriptLibrary_ConvertRelativePathToFull::RelativePath' has a wrong offset!");
//static_assert(offsetof(JavascriptLibrary_ConvertRelativePathToFull, ReturnValue) == 0x000018, "Member 'JavascriptLibrary_ConvertRelativePathToFull::ReturnValue' has a wrong offset!");

// Function V8.JavascriptLibrary.CreateEnum
// 0x0038 (0x0038 - 0x0000)
struct JavascriptLibrary_CreateEnum final
{
public:
	class UObject*                                Outer_0;                                           // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   Name_0;                                            // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<class FName>                           DisplayNames;                                      // 0x0010(0x0010)(Parm, ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<class FString>                         Flags_0;                                           // 0x0020(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
	class UEnum*                                  ReturnValue;                                       // 0x0030(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
//static_assert(alignof(JavascriptLibrary_CreateEnum) == 0x000008, "Wrong alignment on JavascriptLibrary_CreateEnum");
//static_assert(sizeof(JavascriptLibrary_CreateEnum) == 0x000038, "Wrong size on JavascriptLibrary_CreateEnum");
//static_assert(offsetof(JavascriptLibrary_CreateEnum, Outer_0) == 0x000000, "Member 'JavascriptLibrary_CreateEnum::Outer_0' has a wrong offset!");
//static_assert(offsetof(JavascriptLibrary_CreateEnum, Name_0) == 0x000008, "Member 'JavascriptLibrary_CreateEnum::Name_0' has a wrong offset!");
//static_assert(offsetof(JavascriptLibrary_CreateEnum, DisplayNames) == 0x000010, "Member 'JavascriptLibrary_CreateEnum::DisplayNames' has a wrong offset!");
//static_assert(offsetof(JavascriptLibrary_CreateEnum, Flags_0) == 0x000020, "Member 'JavascriptLibrary_CreateEnum::Flags_0' has a wrong offset!");
//static_assert(offsetof(JavascriptLibrary_CreateEnum, ReturnValue) == 0x000030, "Member 'JavascriptLibrary_CreateEnum::ReturnValue' has a wrong offset!");

// Function V8.JavascriptLibrary.CreateInternetAddr
// 0x0010 (0x0010 - 0x0000)
struct JavascriptLibrary_CreateInternetAddr final
{
public:
	struct FJavascriptInternetAddr                ReturnValue;                                       // 0x0000(0x0010)(Parm, OutParm, ReturnParm, NativeAccessSpecifierPublic)
};
//static_assert(alignof(JavascriptLibrary_CreateInternetAddr) == 0x000008, "Wrong alignment on JavascriptLibrary_CreateInternetAddr");
//static_assert(sizeof(JavascriptLibrary_CreateInternetAddr) == 0x000010, "Wrong size on JavascriptLibrary_CreateInternetAddr");
//static_assert(offsetof(JavascriptLibrary_CreateInternetAddr, ReturnValue) == 0x000000, "Member 'JavascriptLibrary_CreateInternetAddr::ReturnValue' has a wrong offset!");

// Function V8.JavascriptLibrary.CreateLogCategory
// 0x0028 (0x0028 - 0x0000)
struct JavascriptLibrary_CreateLogCategory final
{
public:
	class FString                                 CategoryName;                                      // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ELogVerbosity_JS                              InDefaultVerbosity;                                // 0x0010(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_11[0x7];                                       // 0x0011(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FJavascriptLogCategory                 ReturnValue;                                       // 0x0018(0x0010)(Parm, OutParm, ReturnParm, NativeAccessSpecifierPublic)
};
//static_assert(alignof(JavascriptLibrary_CreateLogCategory) == 0x000008, "Wrong alignment on JavascriptLibrary_CreateLogCategory");
//static_assert(sizeof(JavascriptLibrary_CreateLogCategory) == 0x000028, "Wrong size on JavascriptLibrary_CreateLogCategory");
//static_assert(offsetof(JavascriptLibrary_CreateLogCategory, CategoryName) == 0x000000, "Member 'JavascriptLibrary_CreateLogCategory::CategoryName' has a wrong offset!");
//static_assert(offsetof(JavascriptLibrary_CreateLogCategory, InDefaultVerbosity) == 0x000010, "Member 'JavascriptLibrary_CreateLogCategory::InDefaultVerbosity' has a wrong offset!");
//static_assert(offsetof(JavascriptLibrary_CreateLogCategory, ReturnValue) == 0x000018, "Member 'JavascriptLibrary_CreateLogCategory::ReturnValue' has a wrong offset!");

// Function V8.JavascriptLibrary.CreatePackage
// 0x0020 (0x0020 - 0x0000)
struct JavascriptLibrary_CreatePackage final
{
public:
	class UObject*                                Outer_0;                                           // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 PackageName;                                       // 0x0008(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UPackage*                               ReturnValue;                                       // 0x0018(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
//static_assert(alignof(JavascriptLibrary_CreatePackage) == 0x000008, "Wrong alignment on JavascriptLibrary_CreatePackage");
//static_assert(sizeof(JavascriptLibrary_CreatePackage) == 0x000020, "Wrong size on JavascriptLibrary_CreatePackage");
//static_assert(offsetof(JavascriptLibrary_CreatePackage, Outer_0) == 0x000000, "Member 'JavascriptLibrary_CreatePackage::Outer_0' has a wrong offset!");
//static_assert(offsetof(JavascriptLibrary_CreatePackage, PackageName) == 0x000008, "Member 'JavascriptLibrary_CreatePackage::PackageName' has a wrong offset!");
//static_assert(offsetof(JavascriptLibrary_CreatePackage, ReturnValue) == 0x000018, "Member 'JavascriptLibrary_CreatePackage::ReturnValue' has a wrong offset!");

// Function V8.JavascriptLibrary.CreateSocket
// 0x0030 (0x0030 - 0x0000)
struct JavascriptLibrary_CreateSocket final
{
public:
	class FName                                   SocketType;                                        // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 Description;                                       // 0x0008(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bForceUDP;                                         // 0x0018(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_19[0x7];                                       // 0x0019(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FJavascriptSocket                      ReturnValue;                                       // 0x0020(0x0010)(Parm, OutParm, ReturnParm, NativeAccessSpecifierPublic)
};
//static_assert(alignof(JavascriptLibrary_CreateSocket) == 0x000008, "Wrong alignment on JavascriptLibrary_CreateSocket");
//static_assert(sizeof(JavascriptLibrary_CreateSocket) == 0x000030, "Wrong size on JavascriptLibrary_CreateSocket");
//static_assert(offsetof(JavascriptLibrary_CreateSocket, SocketType) == 0x000000, "Member 'JavascriptLibrary_CreateSocket::SocketType' has a wrong offset!");
//static_assert(offsetof(JavascriptLibrary_CreateSocket, Description) == 0x000008, "Member 'JavascriptLibrary_CreateSocket::Description' has a wrong offset!");
//static_assert(offsetof(JavascriptLibrary_CreateSocket, bForceUDP) == 0x000018, "Member 'JavascriptLibrary_CreateSocket::bForceUDP' has a wrong offset!");
//static_assert(offsetof(JavascriptLibrary_CreateSocket, ReturnValue) == 0x000020, "Member 'JavascriptLibrary_CreateSocket::ReturnValue' has a wrong offset!");

// Function V8.JavascriptLibrary.CreateStreamableManager
// 0x0010 (0x0010 - 0x0000)
struct JavascriptLibrary_CreateStreamableManager final
{
public:
	struct FJavascriptStreamableManager           ReturnValue;                                       // 0x0000(0x0010)(Parm, OutParm, ReturnParm, NativeAccessSpecifierPublic)
};
//static_assert(alignof(JavascriptLibrary_CreateStreamableManager) == 0x000008, "Wrong alignment on JavascriptLibrary_CreateStreamableManager");
//static_assert(sizeof(JavascriptLibrary_CreateStreamableManager) == 0x000010, "Wrong size on JavascriptLibrary_CreateStreamableManager");
//static_assert(offsetof(JavascriptLibrary_CreateStreamableManager, ReturnValue) == 0x000000, "Member 'JavascriptLibrary_CreateStreamableManager::ReturnValue' has a wrong offset!");

// Function V8.JavascriptLibrary.DeleteDirectory
// 0x0018 (0x0018 - 0x0000)
struct JavascriptLibrary_DeleteDirectory final
{
public:
	class FString                                 Path;                                              // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          RequireExists;                                     // 0x0010(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          Tree;                                              // 0x0011(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0012(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_13[0x5];                                       // 0x0013(0x0005)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
//static_assert(alignof(JavascriptLibrary_DeleteDirectory) == 0x000008, "Wrong alignment on JavascriptLibrary_DeleteDirectory");
//static_assert(sizeof(JavascriptLibrary_DeleteDirectory) == 0x000018, "Wrong size on JavascriptLibrary_DeleteDirectory");
//static_assert(offsetof(JavascriptLibrary_DeleteDirectory, Path) == 0x000000, "Member 'JavascriptLibrary_DeleteDirectory::Path' has a wrong offset!");
//static_assert(offsetof(JavascriptLibrary_DeleteDirectory, RequireExists) == 0x000010, "Member 'JavascriptLibrary_DeleteDirectory::RequireExists' has a wrong offset!");
//static_assert(offsetof(JavascriptLibrary_DeleteDirectory, Tree) == 0x000011, "Member 'JavascriptLibrary_DeleteDirectory::Tree' has a wrong offset!");
//static_assert(offsetof(JavascriptLibrary_DeleteDirectory, ReturnValue) == 0x000012, "Member 'JavascriptLibrary_DeleteDirectory::ReturnValue' has a wrong offset!");

// Function V8.JavascriptLibrary.DeleteFile
// 0x0018 (0x0018 - 0x0000)
struct JavascriptLibrary_DeleteFile final
{
public:
	class FString                                 Filename;                                          // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReadOnly;                                          // 0x0010(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0011(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_12[0x6];                                       // 0x0012(0x0006)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
//static_assert(alignof(JavascriptLibrary_DeleteFile) == 0x000008, "Wrong alignment on JavascriptLibrary_DeleteFile");
//static_assert(sizeof(JavascriptLibrary_DeleteFile) == 0x000018, "Wrong size on JavascriptLibrary_DeleteFile");
//static_assert(offsetof(JavascriptLibrary_DeleteFile, Filename) == 0x000000, "Member 'JavascriptLibrary_DeleteFile::Filename' has a wrong offset!");
//static_assert(offsetof(JavascriptLibrary_DeleteFile, ReadOnly) == 0x000010, "Member 'JavascriptLibrary_DeleteFile::ReadOnly' has a wrong offset!");
//static_assert(offsetof(JavascriptLibrary_DeleteFile, ReturnValue) == 0x000011, "Member 'JavascriptLibrary_DeleteFile::ReturnValue' has a wrong offset!");

// Function V8.JavascriptLibrary.DirectoryExists
// 0x0018 (0x0018 - 0x0000)
struct JavascriptLibrary_DirectoryExists final
{
public:
	class FString                                 InDirectory;                                       // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0010(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_11[0x7];                                       // 0x0011(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
//static_assert(alignof(JavascriptLibrary_DirectoryExists) == 0x000008, "Wrong alignment on JavascriptLibrary_DirectoryExists");
//static_assert(sizeof(JavascriptLibrary_DirectoryExists) == 0x000018, "Wrong size on JavascriptLibrary_DirectoryExists");
//static_assert(offsetof(JavascriptLibrary_DirectoryExists, InDirectory) == 0x000000, "Member 'JavascriptLibrary_DirectoryExists::InDirectory' has a wrong offset!");
//static_assert(offsetof(JavascriptLibrary_DirectoryExists, ReturnValue) == 0x000010, "Member 'JavascriptLibrary_DirectoryExists::ReturnValue' has a wrong offset!");

// Function V8.JavascriptLibrary.Duplicate
// 0x0020 (0x0020 - 0x0000)
struct JavascriptLibrary_Duplicate final
{
public:
	class UObject*                                Object;                                            // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UObject*                                Outer_0;                                           // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   Name_0;                                            // 0x0010(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UObject*                                ReturnValue;                                       // 0x0018(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
//static_assert(alignof(JavascriptLibrary_Duplicate) == 0x000008, "Wrong alignment on JavascriptLibrary_Duplicate");
//static_assert(sizeof(JavascriptLibrary_Duplicate) == 0x000020, "Wrong size on JavascriptLibrary_Duplicate");
//static_assert(offsetof(JavascriptLibrary_Duplicate, Object) == 0x000000, "Member 'JavascriptLibrary_Duplicate::Object' has a wrong offset!");
//static_assert(offsetof(JavascriptLibrary_Duplicate, Outer_0) == 0x000008, "Member 'JavascriptLibrary_Duplicate::Outer_0' has a wrong offset!");
//static_assert(offsetof(JavascriptLibrary_Duplicate, Name_0) == 0x000010, "Member 'JavascriptLibrary_Duplicate::Name_0' has a wrong offset!");
//static_assert(offsetof(JavascriptLibrary_Duplicate, ReturnValue) == 0x000018, "Member 'JavascriptLibrary_Duplicate::ReturnValue' has a wrong offset!");

// Function V8.JavascriptLibrary.FileExists
// 0x0018 (0x0018 - 0x0000)
struct JavascriptLibrary_FileExists final
{
public:
	class FString                                 Filename;                                          // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0010(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_11[0x7];                                       // 0x0011(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
//static_assert(alignof(JavascriptLibrary_FileExists) == 0x000008, "Wrong alignment on JavascriptLibrary_FileExists");
//static_assert(sizeof(JavascriptLibrary_FileExists) == 0x000018, "Wrong size on JavascriptLibrary_FileExists");
//static_assert(offsetof(JavascriptLibrary_FileExists, Filename) == 0x000000, "Member 'JavascriptLibrary_FileExists::Filename' has a wrong offset!");
//static_assert(offsetof(JavascriptLibrary_FileExists, ReturnValue) == 0x000010, "Member 'JavascriptLibrary_FileExists::ReturnValue' has a wrong offset!");

// Function V8.JavascriptLibrary.FindObjectWithOuter
// 0x0020 (0x0020 - 0x0000)
struct JavascriptLibrary_FindObjectWithOuter final
{
public:
	class UObject*                                Outer_0;                                           // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UClass*                                 ClassToLookFor;                                    // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   NameToLookFor;                                     // 0x0010(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UObject*                                ReturnValue;                                       // 0x0018(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
//static_assert(alignof(JavascriptLibrary_FindObjectWithOuter) == 0x000008, "Wrong alignment on JavascriptLibrary_FindObjectWithOuter");
//static_assert(sizeof(JavascriptLibrary_FindObjectWithOuter) == 0x000020, "Wrong size on JavascriptLibrary_FindObjectWithOuter");
//static_assert(offsetof(JavascriptLibrary_FindObjectWithOuter, Outer_0) == 0x000000, "Member 'JavascriptLibrary_FindObjectWithOuter::Outer_0' has a wrong offset!");
//static_assert(offsetof(JavascriptLibrary_FindObjectWithOuter, ClassToLookFor) == 0x000008, "Member 'JavascriptLibrary_FindObjectWithOuter::ClassToLookFor' has a wrong offset!");
//static_assert(offsetof(JavascriptLibrary_FindObjectWithOuter, NameToLookFor) == 0x000010, "Member 'JavascriptLibrary_FindObjectWithOuter::NameToLookFor' has a wrong offset!");
//static_assert(offsetof(JavascriptLibrary_FindObjectWithOuter, ReturnValue) == 0x000018, "Member 'JavascriptLibrary_FindObjectWithOuter::ReturnValue' has a wrong offset!");

// Function V8.JavascriptLibrary.FindPackage
// 0x0020 (0x0020 - 0x0000)
struct JavascriptLibrary_FindPackage final
{
public:
	class UObject*                                InOuter;                                           // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 PackageName;                                       // 0x0008(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UPackage*                               ReturnValue;                                       // 0x0018(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
//static_assert(alignof(JavascriptLibrary_FindPackage) == 0x000008, "Wrong alignment on JavascriptLibrary_FindPackage");
//static_assert(sizeof(JavascriptLibrary_FindPackage) == 0x000020, "Wrong size on JavascriptLibrary_FindPackage");
//static_assert(offsetof(JavascriptLibrary_FindPackage, InOuter) == 0x000000, "Member 'JavascriptLibrary_FindPackage::InOuter' has a wrong offset!");
//static_assert(offsetof(JavascriptLibrary_FindPackage, PackageName) == 0x000008, "Member 'JavascriptLibrary_FindPackage::PackageName' has a wrong offset!");
//static_assert(offsetof(JavascriptLibrary_FindPackage, ReturnValue) == 0x000018, "Member 'JavascriptLibrary_FindPackage::ReturnValue' has a wrong offset!");

// Function V8.JavascriptLibrary.GenerateNavigation
// 0x0010 (0x0010 - 0x0000)
struct JavascriptLibrary_GenerateNavigation final
{
public:
	class UWorld*                                 InWorld;                                           // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class ARecastNavMesh*                         NavData;                                           // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
//static_assert(alignof(JavascriptLibrary_GenerateNavigation) == 0x000008, "Wrong alignment on JavascriptLibrary_GenerateNavigation");
//static_assert(sizeof(JavascriptLibrary_GenerateNavigation) == 0x000010, "Wrong size on JavascriptLibrary_GenerateNavigation");
//static_assert(offsetof(JavascriptLibrary_GenerateNavigation, InWorld) == 0x000000, "Member 'JavascriptLibrary_GenerateNavigation::InWorld' has a wrong offset!");
//static_assert(offsetof(JavascriptLibrary_GenerateNavigation, NavData) == 0x000008, "Member 'JavascriptLibrary_GenerateNavigation::NavData' has a wrong offset!");

// Function V8.JavascriptLibrary.GetAllActorsOfClassAndTags
// 0x0040 (0x0040 - 0x0000)
struct JavascriptLibrary_GetAllActorsOfClassAndTags final
{
public:
	class UObject*                                WorldContextObject;                                // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TSubclassOf<class AActor>                     ActorClass;                                        // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<class FName>                           Tags_Accept;                                       // 0x0010(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
	TArray<class FName>                           Tags_Deny;                                         // 0x0020(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
	TArray<class AActor*>                         OutActors;                                         // 0x0030(0x0010)(Parm, OutParm, ZeroConstructor, NativeAccessSpecifierPublic)
};
//static_assert(alignof(JavascriptLibrary_GetAllActorsOfClassAndTags) == 0x000008, "Wrong alignment on JavascriptLibrary_GetAllActorsOfClassAndTags");
//static_assert(sizeof(JavascriptLibrary_GetAllActorsOfClassAndTags) == 0x000040, "Wrong size on JavascriptLibrary_GetAllActorsOfClassAndTags");
//static_assert(offsetof(JavascriptLibrary_GetAllActorsOfClassAndTags, WorldContextObject) == 0x000000, "Member 'JavascriptLibrary_GetAllActorsOfClassAndTags::WorldContextObject' has a wrong offset!");
//static_assert(offsetof(JavascriptLibrary_GetAllActorsOfClassAndTags, ActorClass) == 0x000008, "Member 'JavascriptLibrary_GetAllActorsOfClassAndTags::ActorClass' has a wrong offset!");
//static_assert(offsetof(JavascriptLibrary_GetAllActorsOfClassAndTags, Tags_Accept) == 0x000010, "Member 'JavascriptLibrary_GetAllActorsOfClassAndTags::Tags_Accept' has a wrong offset!");
//static_assert(offsetof(JavascriptLibrary_GetAllActorsOfClassAndTags, Tags_Deny) == 0x000020, "Member 'JavascriptLibrary_GetAllActorsOfClassAndTags::Tags_Deny' has a wrong offset!");
//static_assert(offsetof(JavascriptLibrary_GetAllActorsOfClassAndTags, OutActors) == 0x000030, "Member 'JavascriptLibrary_GetAllActorsOfClassAndTags::OutActors' has a wrong offset!");

// Function V8.JavascriptLibrary.GetAllActorsOfClassAndTagsInCurrentLevel
// 0x0040 (0x0040 - 0x0000)
struct JavascriptLibrary_GetAllActorsOfClassAndTagsInCurrentLevel final
{
public:
	class UObject*                                WorldContextObject;                                // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TSubclassOf<class AActor>                     ActorClass;                                        // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<class FName>                           Tags_Accept;                                       // 0x0010(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
	TArray<class FName>                           Tags_Deny;                                         // 0x0020(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
	TArray<class AActor*>                         OutActors;                                         // 0x0030(0x0010)(Parm, OutParm, ZeroConstructor, NativeAccessSpecifierPublic)
};
//static_assert(alignof(JavascriptLibrary_GetAllActorsOfClassAndTagsInCurrentLevel) == 0x000008, "Wrong alignment on JavascriptLibrary_GetAllActorsOfClassAndTagsInCurrentLevel");
//static_assert(sizeof(JavascriptLibrary_GetAllActorsOfClassAndTagsInCurrentLevel) == 0x000040, "Wrong size on JavascriptLibrary_GetAllActorsOfClassAndTagsInCurrentLevel");
//static_assert(offsetof(JavascriptLibrary_GetAllActorsOfClassAndTagsInCurrentLevel, WorldContextObject) == 0x000000, "Member 'JavascriptLibrary_GetAllActorsOfClassAndTagsInCurrentLevel::WorldContextObject' has a wrong offset!");
//static_assert(offsetof(JavascriptLibrary_GetAllActorsOfClassAndTagsInCurrentLevel, ActorClass) == 0x000008, "Member 'JavascriptLibrary_GetAllActorsOfClassAndTagsInCurrentLevel::ActorClass' has a wrong offset!");
//static_assert(offsetof(JavascriptLibrary_GetAllActorsOfClassAndTagsInCurrentLevel, Tags_Accept) == 0x000010, "Member 'JavascriptLibrary_GetAllActorsOfClassAndTagsInCurrentLevel::Tags_Accept' has a wrong offset!");
//static_assert(offsetof(JavascriptLibrary_GetAllActorsOfClassAndTagsInCurrentLevel, Tags_Deny) == 0x000020, "Member 'JavascriptLibrary_GetAllActorsOfClassAndTagsInCurrentLevel::Tags_Deny' has a wrong offset!");
//static_assert(offsetof(JavascriptLibrary_GetAllActorsOfClassAndTagsInCurrentLevel, OutActors) == 0x000030, "Member 'JavascriptLibrary_GetAllActorsOfClassAndTagsInCurrentLevel::OutActors' has a wrong offset!");

// Function V8.JavascriptLibrary.GetArchetypePathName
// 0x0018 (0x0018 - 0x0000)
struct JavascriptLibrary_GetArchetypePathName final
{
public:
	class UObject*                                Object;                                            // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 ReturnValue;                                       // 0x0008(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
//static_assert(alignof(JavascriptLibrary_GetArchetypePathName) == 0x000008, "Wrong alignment on JavascriptLibrary_GetArchetypePathName");
//static_assert(sizeof(JavascriptLibrary_GetArchetypePathName) == 0x000018, "Wrong size on JavascriptLibrary_GetArchetypePathName");
//static_assert(offsetof(JavascriptLibrary_GetArchetypePathName, Object) == 0x000000, "Member 'JavascriptLibrary_GetArchetypePathName::Object' has a wrong offset!");
//static_assert(offsetof(JavascriptLibrary_GetArchetypePathName, ReturnValue) == 0x000008, "Member 'JavascriptLibrary_GetArchetypePathName::ReturnValue' has a wrong offset!");

// Function V8.JavascriptLibrary.GetBailoutReason
// 0x0018 (0x0018 - 0x0000)
struct JavascriptLibrary_GetBailoutReason final
{
public:
	struct FJavascriptProfileNode                 Node;                                              // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	class FString                                 ReturnValue;                                       // 0x0008(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
//static_assert(alignof(JavascriptLibrary_GetBailoutReason) == 0x000008, "Wrong alignment on JavascriptLibrary_GetBailoutReason");
//static_assert(sizeof(JavascriptLibrary_GetBailoutReason) == 0x000018, "Wrong size on JavascriptLibrary_GetBailoutReason");
//static_assert(offsetof(JavascriptLibrary_GetBailoutReason, Node) == 0x000000, "Member 'JavascriptLibrary_GetBailoutReason::Node' has a wrong offset!");
//static_assert(offsetof(JavascriptLibrary_GetBailoutReason, ReturnValue) == 0x000008, "Member 'JavascriptLibrary_GetBailoutReason::ReturnValue' has a wrong offset!");

// Function V8.JavascriptLibrary.GetBlueprintGeneratedClass
// 0x0010 (0x0010 - 0x0000)
struct JavascriptLibrary_GetBlueprintGeneratedClass final
{
public:
	class UBlueprint*                             Blueprint;                                         // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UClass*                                 ReturnValue;                                       // 0x0008(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
//static_assert(alignof(JavascriptLibrary_GetBlueprintGeneratedClass) == 0x000008, "Wrong alignment on JavascriptLibrary_GetBlueprintGeneratedClass");
//static_assert(sizeof(JavascriptLibrary_GetBlueprintGeneratedClass) == 0x000010, "Wrong size on JavascriptLibrary_GetBlueprintGeneratedClass");
//static_assert(offsetof(JavascriptLibrary_GetBlueprintGeneratedClass, Blueprint) == 0x000000, "Member 'JavascriptLibrary_GetBlueprintGeneratedClass::Blueprint' has a wrong offset!");
//static_assert(offsetof(JavascriptLibrary_GetBlueprintGeneratedClass, ReturnValue) == 0x000008, "Member 'JavascriptLibrary_GetBlueprintGeneratedClass::ReturnValue' has a wrong offset!");

// Function V8.JavascriptLibrary.GetBlueprintGeneratedClassFromPath
// 0x0018 (0x0018 - 0x0000)
struct JavascriptLibrary_GetBlueprintGeneratedClassFromPath final
{
public:
	class FString                                 Path;                                              // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UClass*                                 ReturnValue;                                       // 0x0010(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
//static_assert(alignof(JavascriptLibrary_GetBlueprintGeneratedClassFromPath) == 0x000008, "Wrong alignment on JavascriptLibrary_GetBlueprintGeneratedClassFromPath");
//static_assert(sizeof(JavascriptLibrary_GetBlueprintGeneratedClassFromPath) == 0x000018, "Wrong size on JavascriptLibrary_GetBlueprintGeneratedClassFromPath");
//static_assert(offsetof(JavascriptLibrary_GetBlueprintGeneratedClassFromPath, Path) == 0x000000, "Member 'JavascriptLibrary_GetBlueprintGeneratedClassFromPath::Path' has a wrong offset!");
//static_assert(offsetof(JavascriptLibrary_GetBlueprintGeneratedClassFromPath, ReturnValue) == 0x000010, "Member 'JavascriptLibrary_GetBlueprintGeneratedClassFromPath::ReturnValue' has a wrong offset!");

// Function V8.JavascriptLibrary.GetCallUid
// 0x0010 (0x0010 - 0x0000)
struct JavascriptLibrary_GetCallUid final
{
public:
	struct FJavascriptProfileNode                 Node;                                              // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	int32                                         ReturnValue;                                       // 0x0008(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
//static_assert(alignof(JavascriptLibrary_GetCallUid) == 0x000008, "Wrong alignment on JavascriptLibrary_GetCallUid");
//static_assert(sizeof(JavascriptLibrary_GetCallUid) == 0x000010, "Wrong size on JavascriptLibrary_GetCallUid");
//static_assert(offsetof(JavascriptLibrary_GetCallUid, Node) == 0x000000, "Member 'JavascriptLibrary_GetCallUid::Node' has a wrong offset!");
//static_assert(offsetof(JavascriptLibrary_GetCallUid, ReturnValue) == 0x000008, "Member 'JavascriptLibrary_GetCallUid::ReturnValue' has a wrong offset!");

// Function V8.JavascriptLibrary.GetCategoryName
// 0x0018 (0x0018 - 0x0000)
struct JavascriptLibrary_GetCategoryName final
{
public:
	struct FJavascriptLogCategory                 Category;                                          // 0x0000(0x0010)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
	class FName                                   ReturnValue;                                       // 0x0010(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
//static_assert(alignof(JavascriptLibrary_GetCategoryName) == 0x000008, "Wrong alignment on JavascriptLibrary_GetCategoryName");
//static_assert(sizeof(JavascriptLibrary_GetCategoryName) == 0x000018, "Wrong size on JavascriptLibrary_GetCategoryName");
//static_assert(offsetof(JavascriptLibrary_GetCategoryName, Category) == 0x000000, "Member 'JavascriptLibrary_GetCategoryName::Category' has a wrong offset!");
//static_assert(offsetof(JavascriptLibrary_GetCategoryName, ReturnValue) == 0x000010, "Member 'JavascriptLibrary_GetCategoryName::ReturnValue' has a wrong offset!");

// Function V8.JavascriptLibrary.GetChild
// 0x0018 (0x0018 - 0x0000)
struct JavascriptLibrary_GetChild final
{
public:
	struct FJavascriptProfileNode                 Node;                                              // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	int32                                         Index_0;                                           // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FJavascriptProfileNode                 ReturnValue;                                       // 0x0010(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
};
//static_assert(alignof(JavascriptLibrary_GetChild) == 0x000008, "Wrong alignment on JavascriptLibrary_GetChild");
//static_assert(sizeof(JavascriptLibrary_GetChild) == 0x000018, "Wrong size on JavascriptLibrary_GetChild");
//static_assert(offsetof(JavascriptLibrary_GetChild, Node) == 0x000000, "Member 'JavascriptLibrary_GetChild::Node' has a wrong offset!");
//static_assert(offsetof(JavascriptLibrary_GetChild, Index_0) == 0x000008, "Member 'JavascriptLibrary_GetChild::Index_0' has a wrong offset!");
//static_assert(offsetof(JavascriptLibrary_GetChild, ReturnValue) == 0x000010, "Member 'JavascriptLibrary_GetChild::ReturnValue' has a wrong offset!");

// Function V8.JavascriptLibrary.GetChildrenCount
// 0x0010 (0x0010 - 0x0000)
struct JavascriptLibrary_GetChildrenCount final
{
public:
	struct FJavascriptProfileNode                 Node;                                              // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	int32                                         ReturnValue;                                       // 0x0008(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
//static_assert(alignof(JavascriptLibrary_GetChildrenCount) == 0x000008, "Wrong alignment on JavascriptLibrary_GetChildrenCount");
//static_assert(sizeof(JavascriptLibrary_GetChildrenCount) == 0x000010, "Wrong size on JavascriptLibrary_GetChildrenCount");
//static_assert(offsetof(JavascriptLibrary_GetChildrenCount, Node) == 0x000000, "Member 'JavascriptLibrary_GetChildrenCount::Node' has a wrong offset!");
//static_assert(offsetof(JavascriptLibrary_GetChildrenCount, ReturnValue) == 0x000008, "Member 'JavascriptLibrary_GetChildrenCount::ReturnValue' has a wrong offset!");

// Function V8.JavascriptLibrary.GetClassPathName
// 0x0018 (0x0018 - 0x0000)
struct JavascriptLibrary_GetClassPathName final
{
public:
	class UClass*                                 Class_0;                                           // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 ReturnValue;                                       // 0x0008(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
//static_assert(alignof(JavascriptLibrary_GetClassPathName) == 0x000008, "Wrong alignment on JavascriptLibrary_GetClassPathName");
//static_assert(sizeof(JavascriptLibrary_GetClassPathName) == 0x000018, "Wrong size on JavascriptLibrary_GetClassPathName");
//static_assert(offsetof(JavascriptLibrary_GetClassPathName, Class_0) == 0x000000, "Member 'JavascriptLibrary_GetClassPathName::Class_0' has a wrong offset!");
//static_assert(offsetof(JavascriptLibrary_GetClassPathName, ReturnValue) == 0x000008, "Member 'JavascriptLibrary_GetClassPathName::ReturnValue' has a wrong offset!");

// Function V8.JavascriptLibrary.GetColumnNumber
// 0x0010 (0x0010 - 0x0000)
struct JavascriptLibrary_GetColumnNumber final
{
public:
	struct FJavascriptProfileNode                 Node;                                              // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	int32                                         ReturnValue;                                       // 0x0008(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
//static_assert(alignof(JavascriptLibrary_GetColumnNumber) == 0x000008, "Wrong alignment on JavascriptLibrary_GetColumnNumber");
//static_assert(sizeof(JavascriptLibrary_GetColumnNumber) == 0x000010, "Wrong size on JavascriptLibrary_GetColumnNumber");
//static_assert(offsetof(JavascriptLibrary_GetColumnNumber, Node) == 0x000000, "Member 'JavascriptLibrary_GetColumnNumber::Node' has a wrong offset!");
//static_assert(offsetof(JavascriptLibrary_GetColumnNumber, ReturnValue) == 0x000008, "Member 'JavascriptLibrary_GetColumnNumber::ReturnValue' has a wrong offset!");

// Function V8.JavascriptLibrary.GetComponentsByClass
// 0x0020 (0x0020 - 0x0000)
struct JavascriptLibrary_GetComponentsByClass final
{
public:
	class AActor*                                 Actor;                                             // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TSubclassOf<class UActorComponent>            ComponentClass;                                    // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<class UActorComponent*>                ReturnValue;                                       // 0x0010(0x0010)(ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, ContainsInstancedReference, NativeAccessSpecifierPublic)
};
//static_assert(alignof(JavascriptLibrary_GetComponentsByClass) == 0x000008, "Wrong alignment on JavascriptLibrary_GetComponentsByClass");
//static_assert(sizeof(JavascriptLibrary_GetComponentsByClass) == 0x000020, "Wrong size on JavascriptLibrary_GetComponentsByClass");
//static_assert(offsetof(JavascriptLibrary_GetComponentsByClass, Actor) == 0x000000, "Member 'JavascriptLibrary_GetComponentsByClass::Actor' has a wrong offset!");
//static_assert(offsetof(JavascriptLibrary_GetComponentsByClass, ComponentClass) == 0x000008, "Member 'JavascriptLibrary_GetComponentsByClass::ComponentClass' has a wrong offset!");
//static_assert(offsetof(JavascriptLibrary_GetComponentsByClass, ReturnValue) == 0x000010, "Member 'JavascriptLibrary_GetComponentsByClass::ReturnValue' has a wrong offset!");

// Function V8.JavascriptLibrary.GetCurrentProcessId
// 0x0004 (0x0004 - 0x0000)
struct JavascriptLibrary_GetCurrentProcessId final
{
public:
	int32                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
//static_assert(alignof(JavascriptLibrary_GetCurrentProcessId) == 0x000004, "Wrong alignment on JavascriptLibrary_GetCurrentProcessId");
//static_assert(sizeof(JavascriptLibrary_GetCurrentProcessId) == 0x000004, "Wrong size on JavascriptLibrary_GetCurrentProcessId");
//static_assert(offsetof(JavascriptLibrary_GetCurrentProcessId, ReturnValue) == 0x000000, "Member 'JavascriptLibrary_GetCurrentProcessId::ReturnValue' has a wrong offset!");

// Function V8.JavascriptLibrary.GetDeoptInfo_Reason
// 0x0020 (0x0020 - 0x0000)
struct JavascriptLibrary_GetDeoptInfo_Reason final
{
public:
	struct FJavascriptProfileNode                 Node;                                              // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	int32                                         Index_0;                                           // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 ReturnValue;                                       // 0x0010(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
//static_assert(alignof(JavascriptLibrary_GetDeoptInfo_Reason) == 0x000008, "Wrong alignment on JavascriptLibrary_GetDeoptInfo_Reason");
//static_assert(sizeof(JavascriptLibrary_GetDeoptInfo_Reason) == 0x000020, "Wrong size on JavascriptLibrary_GetDeoptInfo_Reason");
//static_assert(offsetof(JavascriptLibrary_GetDeoptInfo_Reason, Node) == 0x000000, "Member 'JavascriptLibrary_GetDeoptInfo_Reason::Node' has a wrong offset!");
//static_assert(offsetof(JavascriptLibrary_GetDeoptInfo_Reason, Index_0) == 0x000008, "Member 'JavascriptLibrary_GetDeoptInfo_Reason::Index_0' has a wrong offset!");
//static_assert(offsetof(JavascriptLibrary_GetDeoptInfo_Reason, ReturnValue) == 0x000010, "Member 'JavascriptLibrary_GetDeoptInfo_Reason::ReturnValue' has a wrong offset!");

// Function V8.JavascriptLibrary.GetDeoptInfo_Stack
// 0x0020 (0x0020 - 0x0000)
struct JavascriptLibrary_GetDeoptInfo_Stack final
{
public:
	struct FJavascriptProfileNode                 Node;                                              // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	int32                                         Index_0;                                           // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 ReturnValue;                                       // 0x0010(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
//static_assert(alignof(JavascriptLibrary_GetDeoptInfo_Stack) == 0x000008, "Wrong alignment on JavascriptLibrary_GetDeoptInfo_Stack");
//static_assert(sizeof(JavascriptLibrary_GetDeoptInfo_Stack) == 0x000020, "Wrong size on JavascriptLibrary_GetDeoptInfo_Stack");
//static_assert(offsetof(JavascriptLibrary_GetDeoptInfo_Stack, Node) == 0x000000, "Member 'JavascriptLibrary_GetDeoptInfo_Stack::Node' has a wrong offset!");
//static_assert(offsetof(JavascriptLibrary_GetDeoptInfo_Stack, Index_0) == 0x000008, "Member 'JavascriptLibrary_GetDeoptInfo_Stack::Index_0' has a wrong offset!");
//static_assert(offsetof(JavascriptLibrary_GetDeoptInfo_Stack, ReturnValue) == 0x000010, "Member 'JavascriptLibrary_GetDeoptInfo_Stack::ReturnValue' has a wrong offset!");

// Function V8.JavascriptLibrary.GetDeoptInfosCount
// 0x0010 (0x0010 - 0x0000)
struct JavascriptLibrary_GetDeoptInfosCount final
{
public:
	struct FJavascriptProfileNode                 Node;                                              // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	int32                                         Index_0;                                           // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         ReturnValue;                                       // 0x000C(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
//static_assert(alignof(JavascriptLibrary_GetDeoptInfosCount) == 0x000008, "Wrong alignment on JavascriptLibrary_GetDeoptInfosCount");
//static_assert(sizeof(JavascriptLibrary_GetDeoptInfosCount) == 0x000010, "Wrong size on JavascriptLibrary_GetDeoptInfosCount");
//static_assert(offsetof(JavascriptLibrary_GetDeoptInfosCount, Node) == 0x000000, "Member 'JavascriptLibrary_GetDeoptInfosCount::Node' has a wrong offset!");
//static_assert(offsetof(JavascriptLibrary_GetDeoptInfosCount, Index_0) == 0x000008, "Member 'JavascriptLibrary_GetDeoptInfosCount::Index_0' has a wrong offset!");
//static_assert(offsetof(JavascriptLibrary_GetDeoptInfosCount, ReturnValue) == 0x00000C, "Member 'JavascriptLibrary_GetDeoptInfosCount::ReturnValue' has a wrong offset!");

// Function V8.JavascriptLibrary.GetDerivedClasses
// 0x0020 (0x0020 - 0x0000)
struct JavascriptLibrary_GetDerivedClasses final
{
public:
	class UClass*                                 ClassToLookFor;                                    // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<class UClass*>                         Results;                                           // 0x0008(0x0010)(Parm, OutParm, ZeroConstructor, NativeAccessSpecifierPublic)
	bool                                          bRecursive;                                        // 0x0018(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_19[0x7];                                       // 0x0019(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
//static_assert(alignof(JavascriptLibrary_GetDerivedClasses) == 0x000008, "Wrong alignment on JavascriptLibrary_GetDerivedClasses");
//static_assert(sizeof(JavascriptLibrary_GetDerivedClasses) == 0x000020, "Wrong size on JavascriptLibrary_GetDerivedClasses");
//static_assert(offsetof(JavascriptLibrary_GetDerivedClasses, ClassToLookFor) == 0x000000, "Member 'JavascriptLibrary_GetDerivedClasses::ClassToLookFor' has a wrong offset!");
//static_assert(offsetof(JavascriptLibrary_GetDerivedClasses, Results) == 0x000008, "Member 'JavascriptLibrary_GetDerivedClasses::Results' has a wrong offset!");
//static_assert(offsetof(JavascriptLibrary_GetDerivedClasses, bRecursive) == 0x000018, "Member 'JavascriptLibrary_GetDerivedClasses::bRecursive' has a wrong offset!");

// Function V8.JavascriptLibrary.GetDir
// 0x0028 (0x0028 - 0x0000)
struct JavascriptLibrary_GetDir final
{
public:
	class UObject*                                Object;                                            // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 WhichDir;                                          // 0x0008(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 ReturnValue;                                       // 0x0018(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
//static_assert(alignof(JavascriptLibrary_GetDir) == 0x000008, "Wrong alignment on JavascriptLibrary_GetDir");
//static_assert(sizeof(JavascriptLibrary_GetDir) == 0x000028, "Wrong size on JavascriptLibrary_GetDir");
//static_assert(offsetof(JavascriptLibrary_GetDir, Object) == 0x000000, "Member 'JavascriptLibrary_GetDir::Object' has a wrong offset!");
//static_assert(offsetof(JavascriptLibrary_GetDir, WhichDir) == 0x000008, "Member 'JavascriptLibrary_GetDir::WhichDir' has a wrong offset!");
//static_assert(offsetof(JavascriptLibrary_GetDir, ReturnValue) == 0x000018, "Member 'JavascriptLibrary_GetDir::ReturnValue' has a wrong offset!");

// Function V8.JavascriptLibrary.GetDynamicBinding
// 0x0018 (0x0018 - 0x0000)
struct JavascriptLibrary_GetDynamicBinding final
{
public:
	class UClass*                                 Outer_0;                                           // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TSubclassOf<class UDynamicBlueprintBinding>   BindingObjectClass;                                // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UDynamicBlueprintBinding*               ReturnValue;                                       // 0x0010(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
//static_assert(alignof(JavascriptLibrary_GetDynamicBinding) == 0x000008, "Wrong alignment on JavascriptLibrary_GetDynamicBinding");
//static_assert(sizeof(JavascriptLibrary_GetDynamicBinding) == 0x000018, "Wrong size on JavascriptLibrary_GetDynamicBinding");
//static_assert(offsetof(JavascriptLibrary_GetDynamicBinding, Outer_0) == 0x000000, "Member 'JavascriptLibrary_GetDynamicBinding::Outer_0' has a wrong offset!");
//static_assert(offsetof(JavascriptLibrary_GetDynamicBinding, BindingObjectClass) == 0x000008, "Member 'JavascriptLibrary_GetDynamicBinding::BindingObjectClass' has a wrong offset!");
//static_assert(offsetof(JavascriptLibrary_GetDynamicBinding, ReturnValue) == 0x000010, "Member 'JavascriptLibrary_GetDynamicBinding::ReturnValue' has a wrong offset!");

// Function V8.JavascriptLibrary.GetFields
// 0x0020 (0x0020 - 0x0000)
struct JavascriptLibrary_GetFields final
{
public:
	const class UObject*                          Object;                                            // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bIncludeSuper;                                     // 0x0008(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<class UField*>                         ReturnValue;                                       // 0x0010(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, NativeAccessSpecifierPublic)
};
//static_assert(alignof(JavascriptLibrary_GetFields) == 0x000008, "Wrong alignment on JavascriptLibrary_GetFields");
//static_assert(sizeof(JavascriptLibrary_GetFields) == 0x000020, "Wrong size on JavascriptLibrary_GetFields");
//static_assert(offsetof(JavascriptLibrary_GetFields, Object) == 0x000000, "Member 'JavascriptLibrary_GetFields::Object' has a wrong offset!");
//static_assert(offsetof(JavascriptLibrary_GetFields, bIncludeSuper) == 0x000008, "Member 'JavascriptLibrary_GetFields::bIncludeSuper' has a wrong offset!");
//static_assert(offsetof(JavascriptLibrary_GetFields, ReturnValue) == 0x000010, "Member 'JavascriptLibrary_GetFields::ReturnValue' has a wrong offset!");

// Function V8.JavascriptLibrary.GetFileSize
// 0x0020 (0x0020 - 0x0000)
struct JavascriptLibrary_GetFileSize final
{
public:
	class UObject*                                Object;                                            // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 Filename;                                          // 0x0008(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         ReturnValue;                                       // 0x0018(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1C[0x4];                                       // 0x001C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
//static_assert(alignof(JavascriptLibrary_GetFileSize) == 0x000008, "Wrong alignment on JavascriptLibrary_GetFileSize");
//static_assert(sizeof(JavascriptLibrary_GetFileSize) == 0x000020, "Wrong size on JavascriptLibrary_GetFileSize");
//static_assert(offsetof(JavascriptLibrary_GetFileSize, Object) == 0x000000, "Member 'JavascriptLibrary_GetFileSize::Object' has a wrong offset!");
//static_assert(offsetof(JavascriptLibrary_GetFileSize, Filename) == 0x000008, "Member 'JavascriptLibrary_GetFileSize::Filename' has a wrong offset!");
//static_assert(offsetof(JavascriptLibrary_GetFileSize, ReturnValue) == 0x000018, "Member 'JavascriptLibrary_GetFileSize::ReturnValue' has a wrong offset!");

// Function V8.JavascriptLibrary.GetFunctionName
// 0x0018 (0x0018 - 0x0000)
struct JavascriptLibrary_GetFunctionName final
{
public:
	struct FJavascriptProfileNode                 Node;                                              // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	class FString                                 ReturnValue;                                       // 0x0008(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
//static_assert(alignof(JavascriptLibrary_GetFunctionName) == 0x000008, "Wrong alignment on JavascriptLibrary_GetFunctionName");
//static_assert(sizeof(JavascriptLibrary_GetFunctionName) == 0x000018, "Wrong size on JavascriptLibrary_GetFunctionName");
//static_assert(offsetof(JavascriptLibrary_GetFunctionName, Node) == 0x000000, "Member 'JavascriptLibrary_GetFunctionName::Node' has a wrong offset!");
//static_assert(offsetof(JavascriptLibrary_GetFunctionName, ReturnValue) == 0x000008, "Member 'JavascriptLibrary_GetFunctionName::ReturnValue' has a wrong offset!");

// Function V8.JavascriptLibrary.GetFunctionParmsSize
// 0x0010 (0x0010 - 0x0000)
struct JavascriptLibrary_GetFunctionParmsSize final
{
public:
	class UFunction*                              Function;                                          // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         ReturnValue;                                       // 0x0008(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
//static_assert(alignof(JavascriptLibrary_GetFunctionParmsSize) == 0x000008, "Wrong alignment on JavascriptLibrary_GetFunctionParmsSize");
//static_assert(sizeof(JavascriptLibrary_GetFunctionParmsSize) == 0x000010, "Wrong size on JavascriptLibrary_GetFunctionParmsSize");
//static_assert(offsetof(JavascriptLibrary_GetFunctionParmsSize, Function) == 0x000000, "Member 'JavascriptLibrary_GetFunctionParmsSize::Function' has a wrong offset!");
//static_assert(offsetof(JavascriptLibrary_GetFunctionParmsSize, ReturnValue) == 0x000008, "Member 'JavascriptLibrary_GetFunctionParmsSize::ReturnValue' has a wrong offset!");

// Function V8.JavascriptLibrary.GetHitCount
// 0x0010 (0x0010 - 0x0000)
struct JavascriptLibrary_GetHitCount final
{
public:
	struct FJavascriptProfileNode                 Node;                                              // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	int32                                         ReturnValue;                                       // 0x0008(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
//static_assert(alignof(JavascriptLibrary_GetHitCount) == 0x000008, "Wrong alignment on JavascriptLibrary_GetHitCount");
//static_assert(sizeof(JavascriptLibrary_GetHitCount) == 0x000010, "Wrong size on JavascriptLibrary_GetHitCount");
//static_assert(offsetof(JavascriptLibrary_GetHitCount, Node) == 0x000000, "Member 'JavascriptLibrary_GetHitCount::Node' has a wrong offset!");
//static_assert(offsetof(JavascriptLibrary_GetHitCount, ReturnValue) == 0x000008, "Member 'JavascriptLibrary_GetHitCount::ReturnValue' has a wrong offset!");

// Function V8.JavascriptLibrary.GetHitLineCount
// 0x0010 (0x0010 - 0x0000)
struct JavascriptLibrary_GetHitLineCount final
{
public:
	struct FJavascriptProfileNode                 Node;                                              // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	int32                                         ReturnValue;                                       // 0x0008(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
//static_assert(alignof(JavascriptLibrary_GetHitLineCount) == 0x000008, "Wrong alignment on JavascriptLibrary_GetHitLineCount");
//static_assert(sizeof(JavascriptLibrary_GetHitLineCount) == 0x000010, "Wrong size on JavascriptLibrary_GetHitLineCount");
//static_assert(offsetof(JavascriptLibrary_GetHitLineCount, Node) == 0x000000, "Member 'JavascriptLibrary_GetHitLineCount::Node' has a wrong offset!");
//static_assert(offsetof(JavascriptLibrary_GetHitLineCount, ReturnValue) == 0x000008, "Member 'JavascriptLibrary_GetHitLineCount::ReturnValue' has a wrong offset!");

// Function V8.JavascriptLibrary.GetLastRenderTime
// 0x0010 (0x0010 - 0x0000)
struct JavascriptLibrary_GetLastRenderTime final
{
public:
	class AActor*                                 Actor;                                             // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         ReturnValue;                                       // 0x0008(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
//static_assert(alignof(JavascriptLibrary_GetLastRenderTime) == 0x000008, "Wrong alignment on JavascriptLibrary_GetLastRenderTime");
//static_assert(sizeof(JavascriptLibrary_GetLastRenderTime) == 0x000010, "Wrong size on JavascriptLibrary_GetLastRenderTime");
//static_assert(offsetof(JavascriptLibrary_GetLastRenderTime, Actor) == 0x000000, "Member 'JavascriptLibrary_GetLastRenderTime::Actor' has a wrong offset!");
//static_assert(offsetof(JavascriptLibrary_GetLastRenderTime, ReturnValue) == 0x000008, "Member 'JavascriptLibrary_GetLastRenderTime::ReturnValue' has a wrong offset!");

// Function V8.JavascriptLibrary.GetLevel
// 0x0010 (0x0010 - 0x0000)
struct JavascriptLibrary_GetLevel final
{
public:
	class AActor*                                 Actor;                                             // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class ULevel*                                 ReturnValue;                                       // 0x0008(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
//static_assert(alignof(JavascriptLibrary_GetLevel) == 0x000008, "Wrong alignment on JavascriptLibrary_GetLevel");
//static_assert(sizeof(JavascriptLibrary_GetLevel) == 0x000010, "Wrong size on JavascriptLibrary_GetLevel");
//static_assert(offsetof(JavascriptLibrary_GetLevel, Actor) == 0x000000, "Member 'JavascriptLibrary_GetLevel::Actor' has a wrong offset!");
//static_assert(offsetof(JavascriptLibrary_GetLevel, ReturnValue) == 0x000008, "Member 'JavascriptLibrary_GetLevel::ReturnValue' has a wrong offset!");

// Function V8.JavascriptLibrary.GetLevels
// 0x0018 (0x0018 - 0x0000)
struct JavascriptLibrary_GetLevels final
{
public:
	class UWorld*                                 World;                                             // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<class ULevel*>                         ReturnValue;                                       // 0x0008(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, NativeAccessSpecifierPublic)
};
//static_assert(alignof(JavascriptLibrary_GetLevels) == 0x000008, "Wrong alignment on JavascriptLibrary_GetLevels");
//static_assert(sizeof(JavascriptLibrary_GetLevels) == 0x000018, "Wrong size on JavascriptLibrary_GetLevels");
//static_assert(offsetof(JavascriptLibrary_GetLevels, World) == 0x000000, "Member 'JavascriptLibrary_GetLevels::World' has a wrong offset!");
//static_assert(offsetof(JavascriptLibrary_GetLevels, ReturnValue) == 0x000008, "Member 'JavascriptLibrary_GetLevels::ReturnValue' has a wrong offset!");

// Function V8.JavascriptLibrary.GetLineNumber
// 0x0010 (0x0010 - 0x0000)
struct JavascriptLibrary_GetLineNumber final
{
public:
	struct FJavascriptProfileNode                 Node;                                              // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	int32                                         ReturnValue;                                       // 0x0008(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
//static_assert(alignof(JavascriptLibrary_GetLineNumber) == 0x000008, "Wrong alignment on JavascriptLibrary_GetLineNumber");
//static_assert(sizeof(JavascriptLibrary_GetLineNumber) == 0x000010, "Wrong size on JavascriptLibrary_GetLineNumber");
//static_assert(offsetof(JavascriptLibrary_GetLineNumber, Node) == 0x000000, "Member 'JavascriptLibrary_GetLineNumber::Node' has a wrong offset!");
//static_assert(offsetof(JavascriptLibrary_GetLineNumber, ReturnValue) == 0x000008, "Member 'JavascriptLibrary_GetLineNumber::ReturnValue' has a wrong offset!");

// Function V8.JavascriptLibrary.GetMetaData
// 0x0028 (0x0028 - 0x0000)
struct JavascriptLibrary_GetMetaData final
{
public:
	class UField*                                 Field;                                             // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 Key;                                               // 0x0008(0x0010)(ConstParm, Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 ReturnValue;                                       // 0x0018(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
//static_assert(alignof(JavascriptLibrary_GetMetaData) == 0x000008, "Wrong alignment on JavascriptLibrary_GetMetaData");
//static_assert(sizeof(JavascriptLibrary_GetMetaData) == 0x000028, "Wrong size on JavascriptLibrary_GetMetaData");
//static_assert(offsetof(JavascriptLibrary_GetMetaData, Field) == 0x000000, "Member 'JavascriptLibrary_GetMetaData::Field' has a wrong offset!");
//static_assert(offsetof(JavascriptLibrary_GetMetaData, Key) == 0x000008, "Member 'JavascriptLibrary_GetMetaData::Key' has a wrong offset!");
//static_assert(offsetof(JavascriptLibrary_GetMetaData, ReturnValue) == 0x000018, "Member 'JavascriptLibrary_GetMetaData::ReturnValue' has a wrong offset!");

// Function V8.JavascriptLibrary.GetModel
// 0x0010 (0x0010 - 0x0000)
struct JavascriptLibrary_GetModel final
{
public:
	class UWorld*                                 World;                                             // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UModel*                                 ReturnValue;                                       // 0x0008(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
//static_assert(alignof(JavascriptLibrary_GetModel) == 0x000008, "Wrong alignment on JavascriptLibrary_GetModel");
//static_assert(sizeof(JavascriptLibrary_GetModel) == 0x000010, "Wrong size on JavascriptLibrary_GetModel");
//static_assert(offsetof(JavascriptLibrary_GetModel, World) == 0x000000, "Member 'JavascriptLibrary_GetModel::World' has a wrong offset!");
//static_assert(offsetof(JavascriptLibrary_GetModel, ReturnValue) == 0x000008, "Member 'JavascriptLibrary_GetModel::ReturnValue' has a wrong offset!");

// Function V8.JavascriptLibrary.GetName
// 0x0018 (0x0018 - 0x0000)
struct JavascriptLibrary_GetName final
{
public:
	class UObject*                                Object;                                            // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 ReturnValue;                                       // 0x0008(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
//static_assert(alignof(JavascriptLibrary_GetName) == 0x000008, "Wrong alignment on JavascriptLibrary_GetName");
//static_assert(sizeof(JavascriptLibrary_GetName) == 0x000018, "Wrong size on JavascriptLibrary_GetName");
//static_assert(offsetof(JavascriptLibrary_GetName, Object) == 0x000000, "Member 'JavascriptLibrary_GetName::Object' has a wrong offset!");
//static_assert(offsetof(JavascriptLibrary_GetName, ReturnValue) == 0x000008, "Member 'JavascriptLibrary_GetName::ReturnValue' has a wrong offset!");

// Function V8.JavascriptLibrary.GetNodeId
// 0x0010 (0x0010 - 0x0000)
struct JavascriptLibrary_GetNodeId final
{
public:
	struct FJavascriptProfileNode                 Node;                                              // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	int32                                         ReturnValue;                                       // 0x0008(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
//static_assert(alignof(JavascriptLibrary_GetNodeId) == 0x000008, "Wrong alignment on JavascriptLibrary_GetNodeId");
//static_assert(sizeof(JavascriptLibrary_GetNodeId) == 0x000010, "Wrong size on JavascriptLibrary_GetNodeId");
//static_assert(offsetof(JavascriptLibrary_GetNodeId, Node) == 0x000000, "Member 'JavascriptLibrary_GetNodeId::Node' has a wrong offset!");
//static_assert(offsetof(JavascriptLibrary_GetNodeId, ReturnValue) == 0x000008, "Member 'JavascriptLibrary_GetNodeId::ReturnValue' has a wrong offset!");

// Function V8.JavascriptLibrary.GetObjectsOfClass
// 0x0028 (0x0028 - 0x0000)
struct JavascriptLibrary_GetObjectsOfClass final
{
public:
	class UClass*                                 ClassToLookFor;                                    // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<class UObject*>                        Results;                                           // 0x0008(0x0010)(Parm, OutParm, ZeroConstructor, NativeAccessSpecifierPublic)
	bool                                          bIncludeDerivedClasses;                            // 0x0018(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_19[0x3];                                       // 0x0019(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         ExcludeFlags;                                      // 0x001C(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         ExclusionInternalFlags;                            // 0x0020(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_24[0x4];                                       // 0x0024(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
//static_assert(alignof(JavascriptLibrary_GetObjectsOfClass) == 0x000008, "Wrong alignment on JavascriptLibrary_GetObjectsOfClass");
//static_assert(sizeof(JavascriptLibrary_GetObjectsOfClass) == 0x000028, "Wrong size on JavascriptLibrary_GetObjectsOfClass");
//static_assert(offsetof(JavascriptLibrary_GetObjectsOfClass, ClassToLookFor) == 0x000000, "Member 'JavascriptLibrary_GetObjectsOfClass::ClassToLookFor' has a wrong offset!");
//static_assert(offsetof(JavascriptLibrary_GetObjectsOfClass, Results) == 0x000008, "Member 'JavascriptLibrary_GetObjectsOfClass::Results' has a wrong offset!");
//static_assert(offsetof(JavascriptLibrary_GetObjectsOfClass, bIncludeDerivedClasses) == 0x000018, "Member 'JavascriptLibrary_GetObjectsOfClass::bIncludeDerivedClasses' has a wrong offset!");
//static_assert(offsetof(JavascriptLibrary_GetObjectsOfClass, ExcludeFlags) == 0x00001C, "Member 'JavascriptLibrary_GetObjectsOfClass::ExcludeFlags' has a wrong offset!");
//static_assert(offsetof(JavascriptLibrary_GetObjectsOfClass, ExclusionInternalFlags) == 0x000020, "Member 'JavascriptLibrary_GetObjectsOfClass::ExclusionInternalFlags' has a wrong offset!");

// Function V8.JavascriptLibrary.GetObjectsWithOuter
// 0x0028 (0x0028 - 0x0000)
struct JavascriptLibrary_GetObjectsWithOuter final
{
public:
	const class UObject*                          Outer_0;                                           // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<class UObject*>                        Results;                                           // 0x0008(0x0010)(Parm, OutParm, ZeroConstructor, NativeAccessSpecifierPublic)
	bool                                          bIncludeNestedObjects;                             // 0x0018(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_19[0x3];                                       // 0x0019(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         ExclusionFlags;                                    // 0x001C(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         ExclusionInternalFlags;                            // 0x0020(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_24[0x4];                                       // 0x0024(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
//static_assert(alignof(JavascriptLibrary_GetObjectsWithOuter) == 0x000008, "Wrong alignment on JavascriptLibrary_GetObjectsWithOuter");
//static_assert(sizeof(JavascriptLibrary_GetObjectsWithOuter) == 0x000028, "Wrong size on JavascriptLibrary_GetObjectsWithOuter");
//static_assert(offsetof(JavascriptLibrary_GetObjectsWithOuter, Outer_0) == 0x000000, "Member 'JavascriptLibrary_GetObjectsWithOuter::Outer_0' has a wrong offset!");
//static_assert(offsetof(JavascriptLibrary_GetObjectsWithOuter, Results) == 0x000008, "Member 'JavascriptLibrary_GetObjectsWithOuter::Results' has a wrong offset!");
//static_assert(offsetof(JavascriptLibrary_GetObjectsWithOuter, bIncludeNestedObjects) == 0x000018, "Member 'JavascriptLibrary_GetObjectsWithOuter::bIncludeNestedObjects' has a wrong offset!");
//static_assert(offsetof(JavascriptLibrary_GetObjectsWithOuter, ExclusionFlags) == 0x00001C, "Member 'JavascriptLibrary_GetObjectsWithOuter::ExclusionFlags' has a wrong offset!");
//static_assert(offsetof(JavascriptLibrary_GetObjectsWithOuter, ExclusionInternalFlags) == 0x000020, "Member 'JavascriptLibrary_GetObjectsWithOuter::ExclusionInternalFlags' has a wrong offset!");

// Function V8.JavascriptLibrary.GetOuter
// 0x0010 (0x0010 - 0x0000)
struct JavascriptLibrary_GetOuter final
{
public:
	class UObject*                                Object;                                            // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UObject*                                ReturnValue;                                       // 0x0008(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
//static_assert(alignof(JavascriptLibrary_GetOuter) == 0x000008, "Wrong alignment on JavascriptLibrary_GetOuter");
//static_assert(sizeof(JavascriptLibrary_GetOuter) == 0x000010, "Wrong size on JavascriptLibrary_GetOuter");
//static_assert(offsetof(JavascriptLibrary_GetOuter, Object) == 0x000000, "Member 'JavascriptLibrary_GetOuter::Object' has a wrong offset!");
//static_assert(offsetof(JavascriptLibrary_GetOuter, ReturnValue) == 0x000008, "Member 'JavascriptLibrary_GetOuter::ReturnValue' has a wrong offset!");

// Function V8.JavascriptLibrary.GetOutermost
// 0x0010 (0x0010 - 0x0000)
struct JavascriptLibrary_GetOutermost final
{
public:
	class UObject*                                Object;                                            // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UObject*                                ReturnValue;                                       // 0x0008(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
//static_assert(alignof(JavascriptLibrary_GetOutermost) == 0x000008, "Wrong alignment on JavascriptLibrary_GetOutermost");
//static_assert(sizeof(JavascriptLibrary_GetOutermost) == 0x000010, "Wrong size on JavascriptLibrary_GetOutermost");
//static_assert(offsetof(JavascriptLibrary_GetOutermost, Object) == 0x000000, "Member 'JavascriptLibrary_GetOutermost::Object' has a wrong offset!");
//static_assert(offsetof(JavascriptLibrary_GetOutermost, ReturnValue) == 0x000008, "Member 'JavascriptLibrary_GetOutermost::ReturnValue' has a wrong offset!");

// Function V8.JavascriptLibrary.GetPlatformName
// 0x0010 (0x0010 - 0x0000)
struct JavascriptLibrary_GetPlatformName final
{
public:
	class FString                                 ReturnValue;                                       // 0x0000(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
//static_assert(alignof(JavascriptLibrary_GetPlatformName) == 0x000008, "Wrong alignment on JavascriptLibrary_GetPlatformName");
//static_assert(sizeof(JavascriptLibrary_GetPlatformName) == 0x000010, "Wrong size on JavascriptLibrary_GetPlatformName");
//static_assert(offsetof(JavascriptLibrary_GetPlatformName, ReturnValue) == 0x000000, "Member 'JavascriptLibrary_GetPlatformName::ReturnValue' has a wrong offset!");

// Function V8.JavascriptLibrary.GetScriptId
// 0x0010 (0x0010 - 0x0000)
struct JavascriptLibrary_GetScriptId final
{
public:
	struct FJavascriptProfileNode                 Node;                                              // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	int32                                         ReturnValue;                                       // 0x0008(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
//static_assert(alignof(JavascriptLibrary_GetScriptId) == 0x000008, "Wrong alignment on JavascriptLibrary_GetScriptId");
//static_assert(sizeof(JavascriptLibrary_GetScriptId) == 0x000010, "Wrong size on JavascriptLibrary_GetScriptId");
//static_assert(offsetof(JavascriptLibrary_GetScriptId, Node) == 0x000000, "Member 'JavascriptLibrary_GetScriptId::Node' has a wrong offset!");
//static_assert(offsetof(JavascriptLibrary_GetScriptId, ReturnValue) == 0x000008, "Member 'JavascriptLibrary_GetScriptId::ReturnValue' has a wrong offset!");

// Function V8.JavascriptLibrary.GetScriptResourceName
// 0x0018 (0x0018 - 0x0000)
struct JavascriptLibrary_GetScriptResourceName final
{
public:
	struct FJavascriptProfileNode                 Node;                                              // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	class FString                                 ReturnValue;                                       // 0x0008(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
//static_assert(alignof(JavascriptLibrary_GetScriptResourceName) == 0x000008, "Wrong alignment on JavascriptLibrary_GetScriptResourceName");
//static_assert(sizeof(JavascriptLibrary_GetScriptResourceName) == 0x000018, "Wrong size on JavascriptLibrary_GetScriptResourceName");
//static_assert(offsetof(JavascriptLibrary_GetScriptResourceName, Node) == 0x000000, "Member 'JavascriptLibrary_GetScriptResourceName::Node' has a wrong offset!");
//static_assert(offsetof(JavascriptLibrary_GetScriptResourceName, ReturnValue) == 0x000008, "Member 'JavascriptLibrary_GetScriptResourceName::ReturnValue' has a wrong offset!");

// Function V8.JavascriptLibrary.GetStructProperties
// 0x0028 (0x0028 - 0x0000)
struct JavascriptLibrary_GetStructProperties final
{
public:
	class FString                                 StructName;                                        // 0x0000(0x0010)(ConstParm, Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bIncludeSuper;                                     // 0x0010(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_11[0x7];                                       // 0x0011(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<struct FJavscriptProperty>             ReturnValue;                                       // 0x0018(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, NativeAccessSpecifierPublic)
};
//static_assert(alignof(JavascriptLibrary_GetStructProperties) == 0x000008, "Wrong alignment on JavascriptLibrary_GetStructProperties");
//static_assert(sizeof(JavascriptLibrary_GetStructProperties) == 0x000028, "Wrong size on JavascriptLibrary_GetStructProperties");
//static_assert(offsetof(JavascriptLibrary_GetStructProperties, StructName) == 0x000000, "Member 'JavascriptLibrary_GetStructProperties::StructName' has a wrong offset!");
//static_assert(offsetof(JavascriptLibrary_GetStructProperties, bIncludeSuper) == 0x000010, "Member 'JavascriptLibrary_GetStructProperties::bIncludeSuper' has a wrong offset!");
//static_assert(offsetof(JavascriptLibrary_GetStructProperties, ReturnValue) == 0x000018, "Member 'JavascriptLibrary_GetStructProperties::ReturnValue' has a wrong offset!");

// Function V8.JavascriptLibrary.GetSuperClasses
// 0x0018 (0x0018 - 0x0000)
struct JavascriptLibrary_GetSuperClasses final
{
public:
	class UClass*                                 InClass;                                           // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<class UClass*>                         ReturnValue;                                       // 0x0008(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, NativeAccessSpecifierPublic)
};
//static_assert(alignof(JavascriptLibrary_GetSuperClasses) == 0x000008, "Wrong alignment on JavascriptLibrary_GetSuperClasses");
//static_assert(sizeof(JavascriptLibrary_GetSuperClasses) == 0x000018, "Wrong size on JavascriptLibrary_GetSuperClasses");
//static_assert(offsetof(JavascriptLibrary_GetSuperClasses, InClass) == 0x000000, "Member 'JavascriptLibrary_GetSuperClasses::InClass' has a wrong offset!");
//static_assert(offsetof(JavascriptLibrary_GetSuperClasses, ReturnValue) == 0x000008, "Member 'JavascriptLibrary_GetSuperClasses::ReturnValue' has a wrong offset!");

// Function V8.JavascriptLibrary.GetWorldBounds
// 0x0040 (0x0040 - 0x0000)
struct JavascriptLibrary_GetWorldBounds final
{
public:
	class UWorld*                                 InWorld;                                           // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FBox                                   ReturnValue;                                       // 0x0008(0x0038)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
};
//static_assert(alignof(JavascriptLibrary_GetWorldBounds) == 0x000008, "Wrong alignment on JavascriptLibrary_GetWorldBounds");
//static_assert(sizeof(JavascriptLibrary_GetWorldBounds) == 0x000040, "Wrong size on JavascriptLibrary_GetWorldBounds");
//static_assert(offsetof(JavascriptLibrary_GetWorldBounds, InWorld) == 0x000000, "Member 'JavascriptLibrary_GetWorldBounds::InWorld' has a wrong offset!");
//static_assert(offsetof(JavascriptLibrary_GetWorldBounds, ReturnValue) == 0x000008, "Member 'JavascriptLibrary_GetWorldBounds::ReturnValue' has a wrong offset!");

// Function V8.JavascriptLibrary.HandleSeamlessTravelPlayer
// 0x0010 (0x0010 - 0x0000)
struct JavascriptLibrary_HandleSeamlessTravelPlayer final
{
public:
	class AGameModeBase*                          GameMode;                                          // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class AController*                            C;                                                 // 0x0008(0x0008)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
//static_assert(alignof(JavascriptLibrary_HandleSeamlessTravelPlayer) == 0x000008, "Wrong alignment on JavascriptLibrary_HandleSeamlessTravelPlayer");
//static_assert(sizeof(JavascriptLibrary_HandleSeamlessTravelPlayer) == 0x000010, "Wrong size on JavascriptLibrary_HandleSeamlessTravelPlayer");
//static_assert(offsetof(JavascriptLibrary_HandleSeamlessTravelPlayer, GameMode) == 0x000000, "Member 'JavascriptLibrary_HandleSeamlessTravelPlayer::GameMode' has a wrong offset!");
//static_assert(offsetof(JavascriptLibrary_HandleSeamlessTravelPlayer, C) == 0x000008, "Member 'JavascriptLibrary_HandleSeamlessTravelPlayer::C' has a wrong offset!");

// Function V8.JavascriptLibrary.HasAnyFlags
// 0x0010 (0x0010 - 0x0000)
struct JavascriptLibrary_HasAnyFlags final
{
public:
	class UObject*                                Object;                                            // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Flags_0;                                           // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x000C(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_D[0x3];                                        // 0x000D(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
//static_assert(alignof(JavascriptLibrary_HasAnyFlags) == 0x000008, "Wrong alignment on JavascriptLibrary_HasAnyFlags");
//static_assert(sizeof(JavascriptLibrary_HasAnyFlags) == 0x000010, "Wrong size on JavascriptLibrary_HasAnyFlags");
//static_assert(offsetof(JavascriptLibrary_HasAnyFlags, Object) == 0x000000, "Member 'JavascriptLibrary_HasAnyFlags::Object' has a wrong offset!");
//static_assert(offsetof(JavascriptLibrary_HasAnyFlags, Flags_0) == 0x000008, "Member 'JavascriptLibrary_HasAnyFlags::Flags_0' has a wrong offset!");
//static_assert(offsetof(JavascriptLibrary_HasAnyFlags, ReturnValue) == 0x00000C, "Member 'JavascriptLibrary_HasAnyFlags::ReturnValue' has a wrong offset!");

// Function V8.JavascriptLibrary.HasAnyPackageFlags
// 0x0010 (0x0010 - 0x0000)
struct JavascriptLibrary_HasAnyPackageFlags final
{
public:
	class UPackage*                               Package;                                           // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Flags_0;                                           // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x000C(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_D[0x3];                                        // 0x000D(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
//static_assert(alignof(JavascriptLibrary_HasAnyPackageFlags) == 0x000008, "Wrong alignment on JavascriptLibrary_HasAnyPackageFlags");
//static_assert(sizeof(JavascriptLibrary_HasAnyPackageFlags) == 0x000010, "Wrong size on JavascriptLibrary_HasAnyPackageFlags");
//static_assert(offsetof(JavascriptLibrary_HasAnyPackageFlags, Package) == 0x000000, "Member 'JavascriptLibrary_HasAnyPackageFlags::Package' has a wrong offset!");
//static_assert(offsetof(JavascriptLibrary_HasAnyPackageFlags, Flags_0) == 0x000008, "Member 'JavascriptLibrary_HasAnyPackageFlags::Flags_0' has a wrong offset!");
//static_assert(offsetof(JavascriptLibrary_HasAnyPackageFlags, ReturnValue) == 0x00000C, "Member 'JavascriptLibrary_HasAnyPackageFlags::ReturnValue' has a wrong offset!");

// Function V8.JavascriptLibrary.HasUndo
// 0x0010 (0x0010 - 0x0000)
struct JavascriptLibrary_HasUndo final
{
public:
	class UEngine*                                Engine;                                            // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0008(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
//static_assert(alignof(JavascriptLibrary_HasUndo) == 0x000008, "Wrong alignment on JavascriptLibrary_HasUndo");
//static_assert(sizeof(JavascriptLibrary_HasUndo) == 0x000010, "Wrong size on JavascriptLibrary_HasUndo");
//static_assert(offsetof(JavascriptLibrary_HasUndo, Engine) == 0x000000, "Member 'JavascriptLibrary_HasUndo::Engine' has a wrong offset!");
//static_assert(offsetof(JavascriptLibrary_HasUndo, ReturnValue) == 0x000008, "Member 'JavascriptLibrary_HasUndo::ReturnValue' has a wrong offset!");

// Function V8.JavascriptLibrary.IsAsyncLoadComplete
// 0x0030 (0x0030 - 0x0000)
struct JavascriptLibrary_IsAsyncLoadComplete final
{
public:
	struct FJavascriptStreamableManager           Manager;                                           // 0x0000(0x0010)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
	struct FSoftObjectPath                        Target;                                            // 0x0010(0x0018)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0028(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_29[0x7];                                       // 0x0029(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
//static_assert(alignof(JavascriptLibrary_IsAsyncLoadComplete) == 0x000008, "Wrong alignment on JavascriptLibrary_IsAsyncLoadComplete");
//static_assert(sizeof(JavascriptLibrary_IsAsyncLoadComplete) == 0x000030, "Wrong size on JavascriptLibrary_IsAsyncLoadComplete");
//static_assert(offsetof(JavascriptLibrary_IsAsyncLoadComplete, Manager) == 0x000000, "Member 'JavascriptLibrary_IsAsyncLoadComplete::Manager' has a wrong offset!");
//static_assert(offsetof(JavascriptLibrary_IsAsyncLoadComplete, Target) == 0x000010, "Member 'JavascriptLibrary_IsAsyncLoadComplete::Target' has a wrong offset!");
//static_assert(offsetof(JavascriptLibrary_IsAsyncLoadComplete, ReturnValue) == 0x000028, "Member 'JavascriptLibrary_IsAsyncLoadComplete::ReturnValue' has a wrong offset!");

// Function V8.JavascriptLibrary.IsGameWorld
// 0x0010 (0x0010 - 0x0000)
struct JavascriptLibrary_IsGameWorld final
{
public:
	class UWorld*                                 World;                                             // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0008(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
//static_assert(alignof(JavascriptLibrary_IsGameWorld) == 0x000008, "Wrong alignment on JavascriptLibrary_IsGameWorld");
//static_assert(sizeof(JavascriptLibrary_IsGameWorld) == 0x000010, "Wrong size on JavascriptLibrary_IsGameWorld");
//static_assert(offsetof(JavascriptLibrary_IsGameWorld, World) == 0x000000, "Member 'JavascriptLibrary_IsGameWorld::World' has a wrong offset!");
//static_assert(offsetof(JavascriptLibrary_IsGameWorld, ReturnValue) == 0x000008, "Member 'JavascriptLibrary_IsGameWorld::ReturnValue' has a wrong offset!");

// Function V8.JavascriptLibrary.IsGeneratedByBlueprint
// 0x0010 (0x0010 - 0x0000)
struct JavascriptLibrary_IsGeneratedByBlueprint final
{
public:
	class UClass*                                 InClass;                                           // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0008(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
//static_assert(alignof(JavascriptLibrary_IsGeneratedByBlueprint) == 0x000008, "Wrong alignment on JavascriptLibrary_IsGeneratedByBlueprint");
//static_assert(sizeof(JavascriptLibrary_IsGeneratedByBlueprint) == 0x000010, "Wrong size on JavascriptLibrary_IsGeneratedByBlueprint");
//static_assert(offsetof(JavascriptLibrary_IsGeneratedByBlueprint, InClass) == 0x000000, "Member 'JavascriptLibrary_IsGeneratedByBlueprint::InClass' has a wrong offset!");
//static_assert(offsetof(JavascriptLibrary_IsGeneratedByBlueprint, ReturnValue) == 0x000008, "Member 'JavascriptLibrary_IsGeneratedByBlueprint::ReturnValue' has a wrong offset!");

// Function V8.JavascriptLibrary.IsPendingKill
// 0x0010 (0x0010 - 0x0000)
struct JavascriptLibrary_IsPendingKill final
{
public:
	class AActor*                                 InActor;                                           // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0008(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
//static_assert(alignof(JavascriptLibrary_IsPendingKill) == 0x000008, "Wrong alignment on JavascriptLibrary_IsPendingKill");
//static_assert(sizeof(JavascriptLibrary_IsPendingKill) == 0x000010, "Wrong size on JavascriptLibrary_IsPendingKill");
//static_assert(offsetof(JavascriptLibrary_IsPendingKill, InActor) == 0x000000, "Member 'JavascriptLibrary_IsPendingKill::InActor' has a wrong offset!");
//static_assert(offsetof(JavascriptLibrary_IsPendingKill, ReturnValue) == 0x000008, "Member 'JavascriptLibrary_IsPendingKill::ReturnValue' has a wrong offset!");

// Function V8.JavascriptLibrary.IsPlayInEditor
// 0x0010 (0x0010 - 0x0000)
struct JavascriptLibrary_IsPlayInEditor final
{
public:
	class UWorld*                                 World;                                             // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0008(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
//static_assert(alignof(JavascriptLibrary_IsPlayInEditor) == 0x000008, "Wrong alignment on JavascriptLibrary_IsPlayInEditor");
//static_assert(sizeof(JavascriptLibrary_IsPlayInEditor) == 0x000010, "Wrong size on JavascriptLibrary_IsPlayInEditor");
//static_assert(offsetof(JavascriptLibrary_IsPlayInEditor, World) == 0x000000, "Member 'JavascriptLibrary_IsPlayInEditor::World' has a wrong offset!");
//static_assert(offsetof(JavascriptLibrary_IsPlayInEditor, ReturnValue) == 0x000008, "Member 'JavascriptLibrary_IsPlayInEditor::ReturnValue' has a wrong offset!");

// Function V8.JavascriptLibrary.IsPlayInPreview
// 0x0010 (0x0010 - 0x0000)
struct JavascriptLibrary_IsPlayInPreview final
{
public:
	class UWorld*                                 World;                                             // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0008(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
//static_assert(alignof(JavascriptLibrary_IsPlayInPreview) == 0x000008, "Wrong alignment on JavascriptLibrary_IsPlayInPreview");
//static_assert(sizeof(JavascriptLibrary_IsPlayInPreview) == 0x000010, "Wrong size on JavascriptLibrary_IsPlayInPreview");
//static_assert(offsetof(JavascriptLibrary_IsPlayInPreview, World) == 0x000000, "Member 'JavascriptLibrary_IsPlayInPreview::World' has a wrong offset!");
//static_assert(offsetof(JavascriptLibrary_IsPlayInPreview, ReturnValue) == 0x000008, "Member 'JavascriptLibrary_IsPlayInPreview::ReturnValue' has a wrong offset!");

// Function V8.JavascriptLibrary.IsRegistered
// 0x0010 (0x0010 - 0x0000)
struct JavascriptLibrary_IsRegistered final
{
public:
	class UActorComponent*                        ActorComponent;                                    // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0008(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
//static_assert(alignof(JavascriptLibrary_IsRegistered) == 0x000008, "Wrong alignment on JavascriptLibrary_IsRegistered");
//static_assert(sizeof(JavascriptLibrary_IsRegistered) == 0x000010, "Wrong size on JavascriptLibrary_IsRegistered");
//static_assert(offsetof(JavascriptLibrary_IsRegistered, ActorComponent) == 0x000000, "Member 'JavascriptLibrary_IsRegistered::ActorComponent' has a wrong offset!");
//static_assert(offsetof(JavascriptLibrary_IsRegistered, ReturnValue) == 0x000008, "Member 'JavascriptLibrary_IsRegistered::ReturnValue' has a wrong offset!");

// Function V8.JavascriptLibrary.IsSuppressed
// 0x0018 (0x0018 - 0x0000)
struct JavascriptLibrary_IsSuppressed final
{
public:
	struct FJavascriptLogCategory                 Category;                                          // 0x0000(0x0010)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
	ELogVerbosity_JS                              Verbosity;                                         // 0x0010(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0011(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_12[0x6];                                       // 0x0012(0x0006)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
//static_assert(alignof(JavascriptLibrary_IsSuppressed) == 0x000008, "Wrong alignment on JavascriptLibrary_IsSuppressed");
//static_assert(sizeof(JavascriptLibrary_IsSuppressed) == 0x000018, "Wrong size on JavascriptLibrary_IsSuppressed");
//static_assert(offsetof(JavascriptLibrary_IsSuppressed, Category) == 0x000000, "Member 'JavascriptLibrary_IsSuppressed::Category' has a wrong offset!");
//static_assert(offsetof(JavascriptLibrary_IsSuppressed, Verbosity) == 0x000010, "Member 'JavascriptLibrary_IsSuppressed::Verbosity' has a wrong offset!");
//static_assert(offsetof(JavascriptLibrary_IsSuppressed, ReturnValue) == 0x000011, "Member 'JavascriptLibrary_IsSuppressed::ReturnValue' has a wrong offset!");

// Function V8.JavascriptLibrary.LoadPackage
// 0x0020 (0x0020 - 0x0000)
struct JavascriptLibrary_LoadPackage final
{
public:
	class UPackage*                               InOuter;                                           // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 PackageName;                                       // 0x0008(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UPackage*                               ReturnValue;                                       // 0x0018(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
//static_assert(alignof(JavascriptLibrary_LoadPackage) == 0x000008, "Wrong alignment on JavascriptLibrary_LoadPackage");
//static_assert(sizeof(JavascriptLibrary_LoadPackage) == 0x000020, "Wrong size on JavascriptLibrary_LoadPackage");
//static_assert(offsetof(JavascriptLibrary_LoadPackage, InOuter) == 0x000000, "Member 'JavascriptLibrary_LoadPackage::InOuter' has a wrong offset!");
//static_assert(offsetof(JavascriptLibrary_LoadPackage, PackageName) == 0x000008, "Member 'JavascriptLibrary_LoadPackage::PackageName' has a wrong offset!");
//static_assert(offsetof(JavascriptLibrary_LoadPackage, ReturnValue) == 0x000018, "Member 'JavascriptLibrary_LoadPackage::ReturnValue' has a wrong offset!");

// Function V8.JavascriptLibrary.Log
// 0x0040 (0x0040 - 0x0000)
struct JavascriptLibrary_Log final
{
public:
	struct FJavascriptLogCategory                 Category;                                          // 0x0000(0x0010)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
	ELogVerbosity_JS                              Verbosity;                                         // 0x0010(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_11[0x7];                                       // 0x0011(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 Message;                                           // 0x0018(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 Filename;                                          // 0x0028(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         LineNumber;                                        // 0x0038(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_3C[0x4];                                       // 0x003C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
//static_assert(alignof(JavascriptLibrary_Log) == 0x000008, "Wrong alignment on JavascriptLibrary_Log");
//static_assert(sizeof(JavascriptLibrary_Log) == 0x000040, "Wrong size on JavascriptLibrary_Log");
//static_assert(offsetof(JavascriptLibrary_Log, Category) == 0x000000, "Member 'JavascriptLibrary_Log::Category' has a wrong offset!");
//static_assert(offsetof(JavascriptLibrary_Log, Verbosity) == 0x000010, "Member 'JavascriptLibrary_Log::Verbosity' has a wrong offset!");
//static_assert(offsetof(JavascriptLibrary_Log, Message) == 0x000018, "Member 'JavascriptLibrary_Log::Message' has a wrong offset!");
//static_assert(offsetof(JavascriptLibrary_Log, Filename) == 0x000028, "Member 'JavascriptLibrary_Log::Filename' has a wrong offset!");
//static_assert(offsetof(JavascriptLibrary_Log, LineNumber) == 0x000038, "Member 'JavascriptLibrary_Log::LineNumber' has a wrong offset!");

// Function V8.JavascriptLibrary.MakeDirectory
// 0x0018 (0x0018 - 0x0000)
struct JavascriptLibrary_MakeDirectory final
{
public:
	class FString                                 Path;                                              // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          Tree;                                              // 0x0010(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0011(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_12[0x6];                                       // 0x0012(0x0006)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
//static_assert(alignof(JavascriptLibrary_MakeDirectory) == 0x000008, "Wrong alignment on JavascriptLibrary_MakeDirectory");
//static_assert(sizeof(JavascriptLibrary_MakeDirectory) == 0x000018, "Wrong size on JavascriptLibrary_MakeDirectory");
//static_assert(offsetof(JavascriptLibrary_MakeDirectory, Path) == 0x000000, "Member 'JavascriptLibrary_MakeDirectory::Path' has a wrong offset!");
//static_assert(offsetof(JavascriptLibrary_MakeDirectory, Tree) == 0x000010, "Member 'JavascriptLibrary_MakeDirectory::Tree' has a wrong offset!");
//static_assert(offsetof(JavascriptLibrary_MakeDirectory, ReturnValue) == 0x000011, "Member 'JavascriptLibrary_MakeDirectory::ReturnValue' has a wrong offset!");

// Function V8.JavascriptLibrary.MarkRenderStateDirty
// 0x0008 (0x0008 - 0x0000)
struct JavascriptLibrary_MarkRenderStateDirty final
{
public:
	class UActorComponent*                        Component;                                         // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
//static_assert(alignof(JavascriptLibrary_MarkRenderStateDirty) == 0x000008, "Wrong alignment on JavascriptLibrary_MarkRenderStateDirty");
//static_assert(sizeof(JavascriptLibrary_MarkRenderStateDirty) == 0x000008, "Wrong size on JavascriptLibrary_MarkRenderStateDirty");
//static_assert(offsetof(JavascriptLibrary_MarkRenderStateDirty, Component) == 0x000000, "Member 'JavascriptLibrary_MarkRenderStateDirty::Component' has a wrong offset!");

// Function V8.JavascriptLibrary.NewStat
// 0x0040 (0x0040 - 0x0000)
struct JavascriptLibrary_NewStat final
{
public:
	class FName                                   InStatName;                                        // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 InStatDesc;                                        // 0x0008(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   InGroupName;                                       // 0x0018(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   InGroupCategory;                                   // 0x0020(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 InGroupDesc;                                       // 0x0028(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bDefaultEnable;                                    // 0x0038(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bShouldClearEveryFrame;                            // 0x0039(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EJavascriptStatDataType                       InStatType;                                        // 0x003A(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bCycleStat;                                        // 0x003B(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bSortByName;                                       // 0x003C(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FJavascriptStat                        ReturnValue;                                       // 0x003D(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	uint8                                         Pad_3E[0x2];                                       // 0x003E(0x0002)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
//static_assert(alignof(JavascriptLibrary_NewStat) == 0x000008, "Wrong alignment on JavascriptLibrary_NewStat");
//static_assert(sizeof(JavascriptLibrary_NewStat) == 0x000040, "Wrong size on JavascriptLibrary_NewStat");
//static_assert(offsetof(JavascriptLibrary_NewStat, InStatName) == 0x000000, "Member 'JavascriptLibrary_NewStat::InStatName' has a wrong offset!");
//static_assert(offsetof(JavascriptLibrary_NewStat, InStatDesc) == 0x000008, "Member 'JavascriptLibrary_NewStat::InStatDesc' has a wrong offset!");
//static_assert(offsetof(JavascriptLibrary_NewStat, InGroupName) == 0x000018, "Member 'JavascriptLibrary_NewStat::InGroupName' has a wrong offset!");
//static_assert(offsetof(JavascriptLibrary_NewStat, InGroupCategory) == 0x000020, "Member 'JavascriptLibrary_NewStat::InGroupCategory' has a wrong offset!");
//static_assert(offsetof(JavascriptLibrary_NewStat, InGroupDesc) == 0x000028, "Member 'JavascriptLibrary_NewStat::InGroupDesc' has a wrong offset!");
//static_assert(offsetof(JavascriptLibrary_NewStat, bDefaultEnable) == 0x000038, "Member 'JavascriptLibrary_NewStat::bDefaultEnable' has a wrong offset!");
//static_assert(offsetof(JavascriptLibrary_NewStat, bShouldClearEveryFrame) == 0x000039, "Member 'JavascriptLibrary_NewStat::bShouldClearEveryFrame' has a wrong offset!");
//static_assert(offsetof(JavascriptLibrary_NewStat, InStatType) == 0x00003A, "Member 'JavascriptLibrary_NewStat::InStatType' has a wrong offset!");
//static_assert(offsetof(JavascriptLibrary_NewStat, bCycleStat) == 0x00003B, "Member 'JavascriptLibrary_NewStat::bCycleStat' has a wrong offset!");
//static_assert(offsetof(JavascriptLibrary_NewStat, bSortByName) == 0x00003C, "Member 'JavascriptLibrary_NewStat::bSortByName' has a wrong offset!");
//static_assert(offsetof(JavascriptLibrary_NewStat, ReturnValue) == 0x00003D, "Member 'JavascriptLibrary_NewStat::ReturnValue' has a wrong offset!");

// Function V8.JavascriptLibrary.ReadDirectory
// 0x0030 (0x0030 - 0x0000)
struct JavascriptLibrary_ReadDirectory final
{
public:
	class UObject*                                Object;                                            // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 Directory;                                         // 0x0008(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<struct FDirectoryItem>                 OutItems;                                          // 0x0018(0x0010)(Parm, OutParm, ZeroConstructor, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0028(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_29[0x7];                                       // 0x0029(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
//static_assert(alignof(JavascriptLibrary_ReadDirectory) == 0x000008, "Wrong alignment on JavascriptLibrary_ReadDirectory");
//static_assert(sizeof(JavascriptLibrary_ReadDirectory) == 0x000030, "Wrong size on JavascriptLibrary_ReadDirectory");
//static_assert(offsetof(JavascriptLibrary_ReadDirectory, Object) == 0x000000, "Member 'JavascriptLibrary_ReadDirectory::Object' has a wrong offset!");
//static_assert(offsetof(JavascriptLibrary_ReadDirectory, Directory) == 0x000008, "Member 'JavascriptLibrary_ReadDirectory::Directory' has a wrong offset!");
//static_assert(offsetof(JavascriptLibrary_ReadDirectory, OutItems) == 0x000018, "Member 'JavascriptLibrary_ReadDirectory::OutItems' has a wrong offset!");
//static_assert(offsetof(JavascriptLibrary_ReadDirectory, ReturnValue) == 0x000028, "Member 'JavascriptLibrary_ReadDirectory::ReturnValue' has a wrong offset!");

// Function V8.JavascriptLibrary.ReadFile
// 0x0020 (0x0020 - 0x0000)
struct JavascriptLibrary_ReadFile final
{
public:
	class UObject*                                Object;                                            // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 Filename;                                          // 0x0008(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0018(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_19[0x7];                                       // 0x0019(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
//static_assert(alignof(JavascriptLibrary_ReadFile) == 0x000008, "Wrong alignment on JavascriptLibrary_ReadFile");
//static_assert(sizeof(JavascriptLibrary_ReadFile) == 0x000020, "Wrong size on JavascriptLibrary_ReadFile");
//static_assert(offsetof(JavascriptLibrary_ReadFile, Object) == 0x000000, "Member 'JavascriptLibrary_ReadFile::Object' has a wrong offset!");
//static_assert(offsetof(JavascriptLibrary_ReadFile, Filename) == 0x000008, "Member 'JavascriptLibrary_ReadFile::Filename' has a wrong offset!");
//static_assert(offsetof(JavascriptLibrary_ReadFile, ReturnValue) == 0x000018, "Member 'JavascriptLibrary_ReadFile::ReturnValue' has a wrong offset!");

// Function V8.JavascriptLibrary.ReadStringFromFile
// 0x0028 (0x0028 - 0x0000)
struct JavascriptLibrary_ReadStringFromFile final
{
public:
	class UObject*                                Object;                                            // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 Filename;                                          // 0x0008(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 ReturnValue;                                       // 0x0018(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
//static_assert(alignof(JavascriptLibrary_ReadStringFromFile) == 0x000008, "Wrong alignment on JavascriptLibrary_ReadStringFromFile");
//static_assert(sizeof(JavascriptLibrary_ReadStringFromFile) == 0x000028, "Wrong size on JavascriptLibrary_ReadStringFromFile");
//static_assert(offsetof(JavascriptLibrary_ReadStringFromFile, Object) == 0x000000, "Member 'JavascriptLibrary_ReadStringFromFile::Object' has a wrong offset!");
//static_assert(offsetof(JavascriptLibrary_ReadStringFromFile, Filename) == 0x000008, "Member 'JavascriptLibrary_ReadStringFromFile::Filename' has a wrong offset!");
//static_assert(offsetof(JavascriptLibrary_ReadStringFromFile, ReturnValue) == 0x000018, "Member 'JavascriptLibrary_ReadStringFromFile::ReturnValue' has a wrong offset!");

// Function V8.JavascriptLibrary.ReadStringFromFileAsync
// 0x0038 (0x0038 - 0x0000)
struct JavascriptLibrary_ReadStringFromFileAsync final
{
public:
	class UObject*                                Object;                                            // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 Filename;                                          // 0x0008(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FJavascriptFunction                    Function;                                          // 0x0018(0x0010)(Parm, NativeAccessSpecifierPublic)
	struct FReadStringFromFileHandle              ReturnValue;                                       // 0x0028(0x0010)(Parm, OutParm, ReturnParm, NativeAccessSpecifierPublic)
};
//static_assert(alignof(JavascriptLibrary_ReadStringFromFileAsync) == 0x000008, "Wrong alignment on JavascriptLibrary_ReadStringFromFileAsync");
//static_assert(sizeof(JavascriptLibrary_ReadStringFromFileAsync) == 0x000038, "Wrong size on JavascriptLibrary_ReadStringFromFileAsync");
//static_assert(offsetof(JavascriptLibrary_ReadStringFromFileAsync, Object) == 0x000000, "Member 'JavascriptLibrary_ReadStringFromFileAsync::Object' has a wrong offset!");
//static_assert(offsetof(JavascriptLibrary_ReadStringFromFileAsync, Filename) == 0x000008, "Member 'JavascriptLibrary_ReadStringFromFileAsync::Filename' has a wrong offset!");
//static_assert(offsetof(JavascriptLibrary_ReadStringFromFileAsync, Function) == 0x000018, "Member 'JavascriptLibrary_ReadStringFromFileAsync::Function' has a wrong offset!");
//static_assert(offsetof(JavascriptLibrary_ReadStringFromFileAsync, ReturnValue) == 0x000028, "Member 'JavascriptLibrary_ReadStringFromFileAsync::ReturnValue' has a wrong offset!");

// Function V8.JavascriptLibrary.RegisterComponent
// 0x0008 (0x0008 - 0x0000)
struct JavascriptLibrary_RegisterComponent final
{
public:
	class UActorComponent*                        ActorComponent;                                    // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
//static_assert(alignof(JavascriptLibrary_RegisterComponent) == 0x000008, "Wrong alignment on JavascriptLibrary_RegisterComponent");
//static_assert(sizeof(JavascriptLibrary_RegisterComponent) == 0x000008, "Wrong size on JavascriptLibrary_RegisterComponent");
//static_assert(offsetof(JavascriptLibrary_RegisterComponent, ActorComponent) == 0x000000, "Member 'JavascriptLibrary_RegisterComponent::ActorComponent' has a wrong offset!");

// Function V8.JavascriptLibrary.RequestAsyncLoad
// 0x0038 (0x0038 - 0x0000)
struct JavascriptLibrary_RequestAsyncLoad final
{
public:
	struct FJavascriptStreamableManager           Manager;                                           // 0x0000(0x0010)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
	TArray<struct FSoftObjectPath>                TargetsToStream;                                   // 0x0010(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
	struct FJavascriptFunction                    DelegateToCall;                                    // 0x0020(0x0010)(Parm, NativeAccessSpecifierPublic)
	int32                                         Priority;                                          // 0x0030(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_34[0x4];                                       // 0x0034(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
//static_assert(alignof(JavascriptLibrary_RequestAsyncLoad) == 0x000008, "Wrong alignment on JavascriptLibrary_RequestAsyncLoad");
//static_assert(sizeof(JavascriptLibrary_RequestAsyncLoad) == 0x000038, "Wrong size on JavascriptLibrary_RequestAsyncLoad");
//static_assert(offsetof(JavascriptLibrary_RequestAsyncLoad, Manager) == 0x000000, "Member 'JavascriptLibrary_RequestAsyncLoad::Manager' has a wrong offset!");
//static_assert(offsetof(JavascriptLibrary_RequestAsyncLoad, TargetsToStream) == 0x000010, "Member 'JavascriptLibrary_RequestAsyncLoad::TargetsToStream' has a wrong offset!");
//static_assert(offsetof(JavascriptLibrary_RequestAsyncLoad, DelegateToCall) == 0x000020, "Member 'JavascriptLibrary_RequestAsyncLoad::DelegateToCall' has a wrong offset!");
//static_assert(offsetof(JavascriptLibrary_RequestAsyncLoad, Priority) == 0x000030, "Member 'JavascriptLibrary_RequestAsyncLoad::Priority' has a wrong offset!");

// Function V8.JavascriptLibrary.ReregisterAllComponents
// 0x0008 (0x0008 - 0x0000)
struct JavascriptLibrary_ReregisterAllComponents final
{
public:
	class AActor*                                 Actor;                                             // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
//static_assert(alignof(JavascriptLibrary_ReregisterAllComponents) == 0x000008, "Wrong alignment on JavascriptLibrary_ReregisterAllComponents");
//static_assert(sizeof(JavascriptLibrary_ReregisterAllComponents) == 0x000008, "Wrong size on JavascriptLibrary_ReregisterAllComponents");
//static_assert(offsetof(JavascriptLibrary_ReregisterAllComponents, Actor) == 0x000000, "Member 'JavascriptLibrary_ReregisterAllComponents::Actor' has a wrong offset!");

// Function V8.JavascriptLibrary.ReregisterComponent
// 0x0008 (0x0008 - 0x0000)
struct JavascriptLibrary_ReregisterComponent final
{
public:
	class UActorComponent*                        ActorComponent;                                    // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
//static_assert(alignof(JavascriptLibrary_ReregisterComponent) == 0x000008, "Wrong alignment on JavascriptLibrary_ReregisterComponent");
//static_assert(sizeof(JavascriptLibrary_ReregisterComponent) == 0x000008, "Wrong size on JavascriptLibrary_ReregisterComponent");
//static_assert(offsetof(JavascriptLibrary_ReregisterComponent, ActorComponent) == 0x000000, "Member 'JavascriptLibrary_ReregisterComponent::ActorComponent' has a wrong offset!");

// Function V8.JavascriptLibrary.ResolveIp
// 0x0028 (0x0028 - 0x0000)
struct JavascriptLibrary_ResolveIp final
{
public:
	class FString                                 HostName;                                          // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 OutIp;                                             // 0x0010(0x0010)(Parm, OutParm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0020(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_21[0x7];                                       // 0x0021(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
//static_assert(alignof(JavascriptLibrary_ResolveIp) == 0x000008, "Wrong alignment on JavascriptLibrary_ResolveIp");
//static_assert(sizeof(JavascriptLibrary_ResolveIp) == 0x000028, "Wrong size on JavascriptLibrary_ResolveIp");
//static_assert(offsetof(JavascriptLibrary_ResolveIp, HostName) == 0x000000, "Member 'JavascriptLibrary_ResolveIp::HostName' has a wrong offset!");
//static_assert(offsetof(JavascriptLibrary_ResolveIp, OutIp) == 0x000010, "Member 'JavascriptLibrary_ResolveIp::OutIp' has a wrong offset!");
//static_assert(offsetof(JavascriptLibrary_ResolveIp, ReturnValue) == 0x000020, "Member 'JavascriptLibrary_ResolveIp::ReturnValue' has a wrong offset!");

// Function V8.JavascriptLibrary.SegmentIntersection2D
// 0x0080 (0x0080 - 0x0000)
struct JavascriptLibrary_SegmentIntersection2D final
{
public:
	struct FVector                                SegmentStartA;                                     // 0x0000(0x0018)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                SegmentEndA;                                       // 0x0018(0x0018)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                SegmentStartB;                                     // 0x0030(0x0018)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                SegmentEndB;                                       // 0x0048(0x0018)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                IntersectionPoint;                                 // 0x0060(0x0018)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0078(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_79[0x7];                                       // 0x0079(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
//static_assert(alignof(JavascriptLibrary_SegmentIntersection2D) == 0x000008, "Wrong alignment on JavascriptLibrary_SegmentIntersection2D");
//static_assert(sizeof(JavascriptLibrary_SegmentIntersection2D) == 0x000080, "Wrong size on JavascriptLibrary_SegmentIntersection2D");
//static_assert(offsetof(JavascriptLibrary_SegmentIntersection2D, SegmentStartA) == 0x000000, "Member 'JavascriptLibrary_SegmentIntersection2D::SegmentStartA' has a wrong offset!");
//static_assert(offsetof(JavascriptLibrary_SegmentIntersection2D, SegmentEndA) == 0x000018, "Member 'JavascriptLibrary_SegmentIntersection2D::SegmentEndA' has a wrong offset!");
//static_assert(offsetof(JavascriptLibrary_SegmentIntersection2D, SegmentStartB) == 0x000030, "Member 'JavascriptLibrary_SegmentIntersection2D::SegmentStartB' has a wrong offset!");
//static_assert(offsetof(JavascriptLibrary_SegmentIntersection2D, SegmentEndB) == 0x000048, "Member 'JavascriptLibrary_SegmentIntersection2D::SegmentEndB' has a wrong offset!");
//static_assert(offsetof(JavascriptLibrary_SegmentIntersection2D, IntersectionPoint) == 0x000060, "Member 'JavascriptLibrary_SegmentIntersection2D::IntersectionPoint' has a wrong offset!");
//static_assert(offsetof(JavascriptLibrary_SegmentIntersection2D, ReturnValue) == 0x000078, "Member 'JavascriptLibrary_SegmentIntersection2D::ReturnValue' has a wrong offset!");

// Function V8.JavascriptLibrary.SendMemoryTo
// 0x0030 (0x0030 - 0x0000)
struct JavascriptLibrary_SendMemoryTo final
{
public:
	struct FJavascriptSocket                      Socket;                                            // 0x0000(0x0010)(Parm, OutParm, NativeAccessSpecifierPublic)
	struct FJavascriptInternetAddr                ToAddr;                                            // 0x0010(0x0010)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
	int32                                         NumBytes;                                          // 0x0020(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         BytesSent;                                         // 0x0024(0x0004)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0028(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_29[0x7];                                       // 0x0029(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
//static_assert(alignof(JavascriptLibrary_SendMemoryTo) == 0x000008, "Wrong alignment on JavascriptLibrary_SendMemoryTo");
//static_assert(sizeof(JavascriptLibrary_SendMemoryTo) == 0x000030, "Wrong size on JavascriptLibrary_SendMemoryTo");
//static_assert(offsetof(JavascriptLibrary_SendMemoryTo, Socket) == 0x000000, "Member 'JavascriptLibrary_SendMemoryTo::Socket' has a wrong offset!");
//static_assert(offsetof(JavascriptLibrary_SendMemoryTo, ToAddr) == 0x000010, "Member 'JavascriptLibrary_SendMemoryTo::ToAddr' has a wrong offset!");
//static_assert(offsetof(JavascriptLibrary_SendMemoryTo, NumBytes) == 0x000020, "Member 'JavascriptLibrary_SendMemoryTo::NumBytes' has a wrong offset!");
//static_assert(offsetof(JavascriptLibrary_SendMemoryTo, BytesSent) == 0x000024, "Member 'JavascriptLibrary_SendMemoryTo::BytesSent' has a wrong offset!");
//static_assert(offsetof(JavascriptLibrary_SendMemoryTo, ReturnValue) == 0x000028, "Member 'JavascriptLibrary_SendMemoryTo::ReturnValue' has a wrong offset!");

// Function V8.JavascriptLibrary.SetActorFlags
// 0x0010 (0x0010 - 0x0000)
struct JavascriptLibrary_SetActorFlags final
{
public:
	class AActor*                                 Actor;                                             // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Flags_0;                                           // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
//static_assert(alignof(JavascriptLibrary_SetActorFlags) == 0x000008, "Wrong alignment on JavascriptLibrary_SetActorFlags");
//static_assert(sizeof(JavascriptLibrary_SetActorFlags) == 0x000010, "Wrong size on JavascriptLibrary_SetActorFlags");
//static_assert(offsetof(JavascriptLibrary_SetActorFlags, Actor) == 0x000000, "Member 'JavascriptLibrary_SetActorFlags::Actor' has a wrong offset!");
//static_assert(offsetof(JavascriptLibrary_SetActorFlags, Flags_0) == 0x000008, "Member 'JavascriptLibrary_SetActorFlags::Flags_0' has a wrong offset!");

// Function V8.JavascriptLibrary.SetClientTravel
// 0x0028 (0x0028 - 0x0000)
struct JavascriptLibrary_SetClientTravel final
{
public:
	class UEngine*                                Engine;                                            // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UWorld*                                 InWorld;                                           // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 NextURL;                                           // 0x0010(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ETravelType                                   InTravelType;                                      // 0x0020(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_21[0x7];                                       // 0x0021(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
//static_assert(alignof(JavascriptLibrary_SetClientTravel) == 0x000008, "Wrong alignment on JavascriptLibrary_SetClientTravel");
//static_assert(sizeof(JavascriptLibrary_SetClientTravel) == 0x000028, "Wrong size on JavascriptLibrary_SetClientTravel");
//static_assert(offsetof(JavascriptLibrary_SetClientTravel, Engine) == 0x000000, "Member 'JavascriptLibrary_SetClientTravel::Engine' has a wrong offset!");
//static_assert(offsetof(JavascriptLibrary_SetClientTravel, InWorld) == 0x000008, "Member 'JavascriptLibrary_SetClientTravel::InWorld' has a wrong offset!");
//static_assert(offsetof(JavascriptLibrary_SetClientTravel, NextURL) == 0x000010, "Member 'JavascriptLibrary_SetClientTravel::NextURL' has a wrong offset!");
//static_assert(offsetof(JavascriptLibrary_SetClientTravel, InTravelType) == 0x000020, "Member 'JavascriptLibrary_SetClientTravel::InTravelType' has a wrong offset!");

// Function V8.JavascriptLibrary.SetIp
// 0x0028 (0x0028 - 0x0000)
struct JavascriptLibrary_SetIp final
{
public:
	struct FJavascriptInternetAddr                Addr;                                              // 0x0000(0x0010)(Parm, OutParm, NativeAccessSpecifierPublic)
	class FString                                 ResolvedAddress;                                   // 0x0010(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bValid;                                            // 0x0020(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_21[0x7];                                       // 0x0021(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
//static_assert(alignof(JavascriptLibrary_SetIp) == 0x000008, "Wrong alignment on JavascriptLibrary_SetIp");
//static_assert(sizeof(JavascriptLibrary_SetIp) == 0x000028, "Wrong size on JavascriptLibrary_SetIp");
//static_assert(offsetof(JavascriptLibrary_SetIp, Addr) == 0x000000, "Member 'JavascriptLibrary_SetIp::Addr' has a wrong offset!");
//static_assert(offsetof(JavascriptLibrary_SetIp, ResolvedAddress) == 0x000010, "Member 'JavascriptLibrary_SetIp::ResolvedAddress' has a wrong offset!");
//static_assert(offsetof(JavascriptLibrary_SetIp, bValid) == 0x000020, "Member 'JavascriptLibrary_SetIp::bValid' has a wrong offset!");

// Function V8.JavascriptLibrary.SetMobile
// 0x0008 (0x0008 - 0x0000)
struct JavascriptLibrary_SetMobile final
{
public:
	class USceneComponent*                        SceneComponent;                                    // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
//static_assert(alignof(JavascriptLibrary_SetMobile) == 0x000008, "Wrong alignment on JavascriptLibrary_SetMobile");
//static_assert(sizeof(JavascriptLibrary_SetMobile) == 0x000008, "Wrong size on JavascriptLibrary_SetMobile");
//static_assert(offsetof(JavascriptLibrary_SetMobile, SceneComponent) == 0x000000, "Member 'JavascriptLibrary_SetMobile::SceneComponent' has a wrong offset!");

// Function V8.JavascriptLibrary.SetMobility
// 0x0010 (0x0010 - 0x0000)
struct JavascriptLibrary_SetMobility final
{
public:
	class USceneComponent*                        SceneComponent;                                    // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EComponentMobility                            Type;                                              // 0x0008(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
//static_assert(alignof(JavascriptLibrary_SetMobility) == 0x000008, "Wrong alignment on JavascriptLibrary_SetMobility");
//static_assert(sizeof(JavascriptLibrary_SetMobility) == 0x000010, "Wrong size on JavascriptLibrary_SetMobility");
//static_assert(offsetof(JavascriptLibrary_SetMobility, SceneComponent) == 0x000000, "Member 'JavascriptLibrary_SetMobility::SceneComponent' has a wrong offset!");
//static_assert(offsetof(JavascriptLibrary_SetMobility, Type) == 0x000008, "Member 'JavascriptLibrary_SetMobility::Type' has a wrong offset!");

// Function V8.JavascriptLibrary.SetObjectFlags
// 0x0010 (0x0010 - 0x0000)
struct JavascriptLibrary_SetObjectFlags final
{
public:
	class UObject*                                Obj;                                               // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Flags_0;                                           // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
//static_assert(alignof(JavascriptLibrary_SetObjectFlags) == 0x000008, "Wrong alignment on JavascriptLibrary_SetObjectFlags");
//static_assert(sizeof(JavascriptLibrary_SetObjectFlags) == 0x000010, "Wrong size on JavascriptLibrary_SetObjectFlags");
//static_assert(offsetof(JavascriptLibrary_SetObjectFlags, Obj) == 0x000000, "Member 'JavascriptLibrary_SetObjectFlags::Obj' has a wrong offset!");
//static_assert(offsetof(JavascriptLibrary_SetObjectFlags, Flags_0) == 0x000008, "Member 'JavascriptLibrary_SetObjectFlags::Flags_0' has a wrong offset!");

// Function V8.JavascriptLibrary.SetPort
// 0x0018 (0x0018 - 0x0000)
struct JavascriptLibrary_SetPort final
{
public:
	struct FJavascriptInternetAddr                Addr;                                              // 0x0000(0x0010)(Parm, OutParm, NativeAccessSpecifierPublic)
	int32                                         Port;                                              // 0x0010(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_14[0x4];                                       // 0x0014(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
//static_assert(alignof(JavascriptLibrary_SetPort) == 0x000008, "Wrong alignment on JavascriptLibrary_SetPort");
//static_assert(sizeof(JavascriptLibrary_SetPort) == 0x000018, "Wrong size on JavascriptLibrary_SetPort");
//static_assert(offsetof(JavascriptLibrary_SetPort, Addr) == 0x000000, "Member 'JavascriptLibrary_SetPort::Addr' has a wrong offset!");
//static_assert(offsetof(JavascriptLibrary_SetPort, Port) == 0x000010, "Member 'JavascriptLibrary_SetPort::Port' has a wrong offset!");

// Function V8.JavascriptLibrary.SetRootComponent
// 0x0010 (0x0010 - 0x0000)
struct JavascriptLibrary_SetRootComponent final
{
public:
	class AActor*                                 Actor;                                             // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class USceneComponent*                        Component;                                         // 0x0008(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
//static_assert(alignof(JavascriptLibrary_SetRootComponent) == 0x000008, "Wrong alignment on JavascriptLibrary_SetRootComponent");
//static_assert(sizeof(JavascriptLibrary_SetRootComponent) == 0x000010, "Wrong size on JavascriptLibrary_SetRootComponent");
//static_assert(offsetof(JavascriptLibrary_SetRootComponent, Actor) == 0x000000, "Member 'JavascriptLibrary_SetRootComponent::Actor' has a wrong offset!");
//static_assert(offsetof(JavascriptLibrary_SetRootComponent, Component) == 0x000008, "Member 'JavascriptLibrary_SetRootComponent::Component' has a wrong offset!");

// Function V8.JavascriptLibrary.SimpleAsyncLoad
// 0x0030 (0x0030 - 0x0000)
struct JavascriptLibrary_SimpleAsyncLoad final
{
public:
	struct FJavascriptStreamableManager           Manager;                                           // 0x0000(0x0010)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
	struct FSoftObjectPath                        Target;                                            // 0x0010(0x0018)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Priority;                                          // 0x0028(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2C[0x4];                                       // 0x002C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
//static_assert(alignof(JavascriptLibrary_SimpleAsyncLoad) == 0x000008, "Wrong alignment on JavascriptLibrary_SimpleAsyncLoad");
//static_assert(sizeof(JavascriptLibrary_SimpleAsyncLoad) == 0x000030, "Wrong size on JavascriptLibrary_SimpleAsyncLoad");
//static_assert(offsetof(JavascriptLibrary_SimpleAsyncLoad, Manager) == 0x000000, "Member 'JavascriptLibrary_SimpleAsyncLoad::Manager' has a wrong offset!");
//static_assert(offsetof(JavascriptLibrary_SimpleAsyncLoad, Target) == 0x000010, "Member 'JavascriptLibrary_SimpleAsyncLoad::Target' has a wrong offset!");
//static_assert(offsetof(JavascriptLibrary_SimpleAsyncLoad, Priority) == 0x000028, "Member 'JavascriptLibrary_SimpleAsyncLoad::Priority' has a wrong offset!");

// Function V8.JavascriptLibrary.TryLoadByPath
// 0x0018 (0x0018 - 0x0000)
struct JavascriptLibrary_TryLoadByPath final
{
public:
	class FString                                 Path;                                              // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UObject*                                ReturnValue;                                       // 0x0010(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
//static_assert(alignof(JavascriptLibrary_TryLoadByPath) == 0x000008, "Wrong alignment on JavascriptLibrary_TryLoadByPath");
//static_assert(sizeof(JavascriptLibrary_TryLoadByPath) == 0x000018, "Wrong size on JavascriptLibrary_TryLoadByPath");
//static_assert(offsetof(JavascriptLibrary_TryLoadByPath, Path) == 0x000000, "Member 'JavascriptLibrary_TryLoadByPath::Path' has a wrong offset!");
//static_assert(offsetof(JavascriptLibrary_TryLoadByPath, ReturnValue) == 0x000010, "Member 'JavascriptLibrary_TryLoadByPath::ReturnValue' has a wrong offset!");

// Function V8.JavascriptLibrary.Unload
// 0x0028 (0x0028 - 0x0000)
struct JavascriptLibrary_Unload final
{
public:
	struct FJavascriptStreamableManager           Manager;                                           // 0x0000(0x0010)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
	struct FSoftObjectPath                        Target;                                            // 0x0010(0x0018)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
//static_assert(alignof(JavascriptLibrary_Unload) == 0x000008, "Wrong alignment on JavascriptLibrary_Unload");
//static_assert(sizeof(JavascriptLibrary_Unload) == 0x000028, "Wrong size on JavascriptLibrary_Unload");
//static_assert(offsetof(JavascriptLibrary_Unload, Manager) == 0x000000, "Member 'JavascriptLibrary_Unload::Manager' has a wrong offset!");
//static_assert(offsetof(JavascriptLibrary_Unload, Target) == 0x000010, "Member 'JavascriptLibrary_Unload::Target' has a wrong offset!");

// Function V8.JavascriptLibrary.UnregisterComponent
// 0x0008 (0x0008 - 0x0000)
struct JavascriptLibrary_UnregisterComponent final
{
public:
	class UActorComponent*                        ActorComponent;                                    // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
//static_assert(alignof(JavascriptLibrary_UnregisterComponent) == 0x000008, "Wrong alignment on JavascriptLibrary_UnregisterComponent");
//static_assert(sizeof(JavascriptLibrary_UnregisterComponent) == 0x000008, "Wrong size on JavascriptLibrary_UnregisterComponent");
//static_assert(offsetof(JavascriptLibrary_UnregisterComponent, ActorComponent) == 0x000000, "Member 'JavascriptLibrary_UnregisterComponent::ActorComponent' has a wrong offset!");

// Function V8.JavascriptLibrary.V8_SetFlagsFromString
// 0x0010 (0x0010 - 0x0000)
struct JavascriptLibrary_V8_SetFlagsFromString final
{
public:
	class FString                                 V8Flags;                                           // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
//static_assert(alignof(JavascriptLibrary_V8_SetFlagsFromString) == 0x000008, "Wrong alignment on JavascriptLibrary_V8_SetFlagsFromString");
//static_assert(sizeof(JavascriptLibrary_V8_SetFlagsFromString) == 0x000010, "Wrong size on JavascriptLibrary_V8_SetFlagsFromString");
//static_assert(offsetof(JavascriptLibrary_V8_SetFlagsFromString, V8Flags) == 0x000000, "Member 'JavascriptLibrary_V8_SetFlagsFromString::V8Flags' has a wrong offset!");

// Function V8.JavascriptLibrary.V8_SetIdleTaskBudget
// 0x0004 (0x0004 - 0x0000)
struct JavascriptLibrary_V8_SetIdleTaskBudget final
{
public:
	float                                         BudgetInSeconds;                                   // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
//static_assert(alignof(JavascriptLibrary_V8_SetIdleTaskBudget) == 0x000004, "Wrong alignment on JavascriptLibrary_V8_SetIdleTaskBudget");
//static_assert(sizeof(JavascriptLibrary_V8_SetIdleTaskBudget) == 0x000004, "Wrong size on JavascriptLibrary_V8_SetIdleTaskBudget");
//static_assert(offsetof(JavascriptLibrary_V8_SetIdleTaskBudget, BudgetInSeconds) == 0x000000, "Member 'JavascriptLibrary_V8_SetIdleTaskBudget::BudgetInSeconds' has a wrong offset!");

// Function V8.JavascriptLibrary.WriteFile
// 0x0020 (0x0020 - 0x0000)
struct JavascriptLibrary_WriteFile final
{
public:
	class UObject*                                Object;                                            // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 Filename;                                          // 0x0008(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0018(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_19[0x7];                                       // 0x0019(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
//static_assert(alignof(JavascriptLibrary_WriteFile) == 0x000008, "Wrong alignment on JavascriptLibrary_WriteFile");
//static_assert(sizeof(JavascriptLibrary_WriteFile) == 0x000020, "Wrong size on JavascriptLibrary_WriteFile");
//static_assert(offsetof(JavascriptLibrary_WriteFile, Object) == 0x000000, "Member 'JavascriptLibrary_WriteFile::Object' has a wrong offset!");
//static_assert(offsetof(JavascriptLibrary_WriteFile, Filename) == 0x000008, "Member 'JavascriptLibrary_WriteFile::Filename' has a wrong offset!");
//static_assert(offsetof(JavascriptLibrary_WriteFile, ReturnValue) == 0x000018, "Member 'JavascriptLibrary_WriteFile::ReturnValue' has a wrong offset!");

// Function V8.JavascriptLibrary.WriteStringToFile
// 0x0030 (0x0030 - 0x0000)
struct JavascriptLibrary_WriteStringToFile final
{
public:
	class UObject*                                Object;                                            // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 Filename;                                          // 0x0008(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 Data;                                              // 0x0018(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EJavascriptEncodingOptions                    EncodingOptions;                                   // 0x0028(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0029(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2A[0x6];                                       // 0x002A(0x0006)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
//static_assert(alignof(JavascriptLibrary_WriteStringToFile) == 0x000008, "Wrong alignment on JavascriptLibrary_WriteStringToFile");
//static_assert(sizeof(JavascriptLibrary_WriteStringToFile) == 0x000030, "Wrong size on JavascriptLibrary_WriteStringToFile");
//static_assert(offsetof(JavascriptLibrary_WriteStringToFile, Object) == 0x000000, "Member 'JavascriptLibrary_WriteStringToFile::Object' has a wrong offset!");
//static_assert(offsetof(JavascriptLibrary_WriteStringToFile, Filename) == 0x000008, "Member 'JavascriptLibrary_WriteStringToFile::Filename' has a wrong offset!");
//static_assert(offsetof(JavascriptLibrary_WriteStringToFile, Data) == 0x000018, "Member 'JavascriptLibrary_WriteStringToFile::Data' has a wrong offset!");
//static_assert(offsetof(JavascriptLibrary_WriteStringToFile, EncodingOptions) == 0x000028, "Member 'JavascriptLibrary_WriteStringToFile::EncodingOptions' has a wrong offset!");
//static_assert(offsetof(JavascriptLibrary_WriteStringToFile, ReturnValue) == 0x000029, "Member 'JavascriptLibrary_WriteStringToFile::ReturnValue' has a wrong offset!");

// Function V8.JavascriptOutputDevice.Log
// 0x0038 (0x0038 - 0x0000)
struct JavascriptOutputDevice_Log final
{
public:
	class FName                                   Category;                                          // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ELogVerbosity_JS                              Verbosity;                                         // 0x0008(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 Filename;                                          // 0x0010(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         LineNumber;                                        // 0x0020(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_24[0x4];                                       // 0x0024(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 Message;                                           // 0x0028(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
//static_assert(alignof(JavascriptOutputDevice_Log) == 0x000008, "Wrong alignment on JavascriptOutputDevice_Log");
//static_assert(sizeof(JavascriptOutputDevice_Log) == 0x000038, "Wrong size on JavascriptOutputDevice_Log");
//static_assert(offsetof(JavascriptOutputDevice_Log, Category) == 0x000000, "Member 'JavascriptOutputDevice_Log::Category' has a wrong offset!");
//static_assert(offsetof(JavascriptOutputDevice_Log, Verbosity) == 0x000008, "Member 'JavascriptOutputDevice_Log::Verbosity' has a wrong offset!");
//static_assert(offsetof(JavascriptOutputDevice_Log, Filename) == 0x000010, "Member 'JavascriptOutputDevice_Log::Filename' has a wrong offset!");
//static_assert(offsetof(JavascriptOutputDevice_Log, LineNumber) == 0x000020, "Member 'JavascriptOutputDevice_Log::LineNumber' has a wrong offset!");
//static_assert(offsetof(JavascriptOutputDevice_Log, Message) == 0x000028, "Member 'JavascriptOutputDevice_Log::Message' has a wrong offset!");

// Function V8.JavascriptOutputDevice.OnMessage
// 0x0020 (0x0020 - 0x0000)
struct JavascriptOutputDevice_OnMessage final
{
public:
	class FString                                 Message;                                           // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ELogVerbosity_JS                              Verbosity;                                         // 0x0010(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_11[0x3];                                       // 0x0011(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class FName                                   Category;                                          // 0x0014(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1C[0x4];                                       // 0x001C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
//static_assert(alignof(JavascriptOutputDevice_OnMessage) == 0x000008, "Wrong alignment on JavascriptOutputDevice_OnMessage");
//static_assert(sizeof(JavascriptOutputDevice_OnMessage) == 0x000020, "Wrong size on JavascriptOutputDevice_OnMessage");
//static_assert(offsetof(JavascriptOutputDevice_OnMessage, Message) == 0x000000, "Member 'JavascriptOutputDevice_OnMessage::Message' has a wrong offset!");
//static_assert(offsetof(JavascriptOutputDevice_OnMessage, Verbosity) == 0x000010, "Member 'JavascriptOutputDevice_OnMessage::Verbosity' has a wrong offset!");
//static_assert(offsetof(JavascriptOutputDevice_OnMessage, Category) == 0x000014, "Member 'JavascriptOutputDevice_OnMessage::Category' has a wrong offset!");

// Function V8.JavascriptProcess.CanLaunchURL
// 0x0018 (0x0018 - 0x0000)
struct JavascriptProcess_CanLaunchURL final
{
public:
	class FString                                 URL;                                               // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0010(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_11[0x7];                                       // 0x0011(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
//static_assert(alignof(JavascriptProcess_CanLaunchURL) == 0x000008, "Wrong alignment on JavascriptProcess_CanLaunchURL");
//static_assert(sizeof(JavascriptProcess_CanLaunchURL) == 0x000018, "Wrong size on JavascriptProcess_CanLaunchURL");
//static_assert(offsetof(JavascriptProcess_CanLaunchURL, URL) == 0x000000, "Member 'JavascriptProcess_CanLaunchURL::URL' has a wrong offset!");
//static_assert(offsetof(JavascriptProcess_CanLaunchURL, ReturnValue) == 0x000010, "Member 'JavascriptProcess_CanLaunchURL::ReturnValue' has a wrong offset!");

// Function V8.JavascriptProcess.Create
// 0x0048 (0x0048 - 0x0000)
struct JavascriptProcess_Create final
{
public:
	class FString                                 URL;                                               // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 Parms_0;                                           // 0x0010(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bLaunchDetached;                                   // 0x0020(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bLaunchHidden;                                     // 0x0021(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bLaunchReallyHidden;                               // 0x0022(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_23[0x1];                                       // 0x0023(0x0001)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         PriorityModifier;                                  // 0x0024(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 OptionalWorkingDirectory;                          // 0x0028(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bUsePipe;                                          // 0x0038(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_39[0x7];                                       // 0x0039(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UJavascriptProcess*                     ReturnValue;                                       // 0x0040(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
//static_assert(alignof(JavascriptProcess_Create) == 0x000008, "Wrong alignment on JavascriptProcess_Create");
//static_assert(sizeof(JavascriptProcess_Create) == 0x000048, "Wrong size on JavascriptProcess_Create");
//static_assert(offsetof(JavascriptProcess_Create, URL) == 0x000000, "Member 'JavascriptProcess_Create::URL' has a wrong offset!");
//static_assert(offsetof(JavascriptProcess_Create, Parms_0) == 0x000010, "Member 'JavascriptProcess_Create::Parms_0' has a wrong offset!");
//static_assert(offsetof(JavascriptProcess_Create, bLaunchDetached) == 0x000020, "Member 'JavascriptProcess_Create::bLaunchDetached' has a wrong offset!");
//static_assert(offsetof(JavascriptProcess_Create, bLaunchHidden) == 0x000021, "Member 'JavascriptProcess_Create::bLaunchHidden' has a wrong offset!");
//static_assert(offsetof(JavascriptProcess_Create, bLaunchReallyHidden) == 0x000022, "Member 'JavascriptProcess_Create::bLaunchReallyHidden' has a wrong offset!");
//static_assert(offsetof(JavascriptProcess_Create, PriorityModifier) == 0x000024, "Member 'JavascriptProcess_Create::PriorityModifier' has a wrong offset!");
//static_assert(offsetof(JavascriptProcess_Create, OptionalWorkingDirectory) == 0x000028, "Member 'JavascriptProcess_Create::OptionalWorkingDirectory' has a wrong offset!");
//static_assert(offsetof(JavascriptProcess_Create, bUsePipe) == 0x000038, "Member 'JavascriptProcess_Create::bUsePipe' has a wrong offset!");
//static_assert(offsetof(JavascriptProcess_Create, ReturnValue) == 0x000040, "Member 'JavascriptProcess_Create::ReturnValue' has a wrong offset!");

// Function V8.JavascriptProcess.GetApplicationName
// 0x0018 (0x0018 - 0x0000)
struct JavascriptProcess_GetApplicationName final
{
public:
	int32                                         ProcessId;                                         // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_4[0x4];                                        // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 ReturnValue;                                       // 0x0008(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
//static_assert(alignof(JavascriptProcess_GetApplicationName) == 0x000008, "Wrong alignment on JavascriptProcess_GetApplicationName");
//static_assert(sizeof(JavascriptProcess_GetApplicationName) == 0x000018, "Wrong size on JavascriptProcess_GetApplicationName");
//static_assert(offsetof(JavascriptProcess_GetApplicationName, ProcessId) == 0x000000, "Member 'JavascriptProcess_GetApplicationName::ProcessId' has a wrong offset!");
//static_assert(offsetof(JavascriptProcess_GetApplicationName, ReturnValue) == 0x000008, "Member 'JavascriptProcess_GetApplicationName::ReturnValue' has a wrong offset!");

// Function V8.JavascriptProcess.GetCurrentProcessId
// 0x0004 (0x0004 - 0x0000)
struct JavascriptProcess_GetCurrentProcessId final
{
public:
	int32                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
//static_assert(alignof(JavascriptProcess_GetCurrentProcessId) == 0x000004, "Wrong alignment on JavascriptProcess_GetCurrentProcessId");
//static_assert(sizeof(JavascriptProcess_GetCurrentProcessId) == 0x000004, "Wrong size on JavascriptProcess_GetCurrentProcessId");
//static_assert(offsetof(JavascriptProcess_GetCurrentProcessId, ReturnValue) == 0x000000, "Member 'JavascriptProcess_GetCurrentProcessId::ReturnValue' has a wrong offset!");

// Function V8.JavascriptProcess.GetEnvironmentVar
// 0x0020 (0x0020 - 0x0000)
struct JavascriptProcess_GetEnvironmentVar final
{
public:
	class FString                                 VarName;                                           // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 ReturnValue;                                       // 0x0010(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
//static_assert(alignof(JavascriptProcess_GetEnvironmentVar) == 0x000008, "Wrong alignment on JavascriptProcess_GetEnvironmentVar");
//static_assert(sizeof(JavascriptProcess_GetEnvironmentVar) == 0x000020, "Wrong size on JavascriptProcess_GetEnvironmentVar");
//static_assert(offsetof(JavascriptProcess_GetEnvironmentVar, VarName) == 0x000000, "Member 'JavascriptProcess_GetEnvironmentVar::VarName' has a wrong offset!");
//static_assert(offsetof(JavascriptProcess_GetEnvironmentVar, ReturnValue) == 0x000010, "Member 'JavascriptProcess_GetEnvironmentVar::ReturnValue' has a wrong offset!");

// Function V8.JavascriptProcess.GetString
// 0x0028 (0x0028 - 0x0000)
struct JavascriptProcess_GetString final
{
public:
	class FString                                 Key;                                               // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bFlag;                                             // 0x0010(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_11[0x7];                                       // 0x0011(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 ReturnValue;                                       // 0x0018(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
//static_assert(alignof(JavascriptProcess_GetString) == 0x000008, "Wrong alignment on JavascriptProcess_GetString");
//static_assert(sizeof(JavascriptProcess_GetString) == 0x000028, "Wrong size on JavascriptProcess_GetString");
//static_assert(offsetof(JavascriptProcess_GetString, Key) == 0x000000, "Member 'JavascriptProcess_GetString::Key' has a wrong offset!");
//static_assert(offsetof(JavascriptProcess_GetString, bFlag) == 0x000010, "Member 'JavascriptProcess_GetString::bFlag' has a wrong offset!");
//static_assert(offsetof(JavascriptProcess_GetString, ReturnValue) == 0x000018, "Member 'JavascriptProcess_GetString::ReturnValue' has a wrong offset!");

// Function V8.JavascriptProcess.IsApplicationRunning
// 0x0018 (0x0018 - 0x0000)
struct JavascriptProcess_IsApplicationRunning final
{
public:
	class FString                                 ProcName;                                          // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0010(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_11[0x7];                                       // 0x0011(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
//static_assert(alignof(JavascriptProcess_IsApplicationRunning) == 0x000008, "Wrong alignment on JavascriptProcess_IsApplicationRunning");
//static_assert(sizeof(JavascriptProcess_IsApplicationRunning) == 0x000018, "Wrong size on JavascriptProcess_IsApplicationRunning");
//static_assert(offsetof(JavascriptProcess_IsApplicationRunning, ProcName) == 0x000000, "Member 'JavascriptProcess_IsApplicationRunning::ProcName' has a wrong offset!");
//static_assert(offsetof(JavascriptProcess_IsApplicationRunning, ReturnValue) == 0x000010, "Member 'JavascriptProcess_IsApplicationRunning::ReturnValue' has a wrong offset!");

// Function V8.JavascriptProcess.IsApplicationRunning_PID
// 0x0008 (0x0008 - 0x0000)
struct JavascriptProcess_IsApplicationRunning_PID final
{
public:
	int32                                         ProcessId;                                         // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0004(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_5[0x3];                                        // 0x0005(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
//static_assert(alignof(JavascriptProcess_IsApplicationRunning_PID) == 0x000004, "Wrong alignment on JavascriptProcess_IsApplicationRunning_PID");
//static_assert(sizeof(JavascriptProcess_IsApplicationRunning_PID) == 0x000008, "Wrong size on JavascriptProcess_IsApplicationRunning_PID");
//static_assert(offsetof(JavascriptProcess_IsApplicationRunning_PID, ProcessId) == 0x000000, "Member 'JavascriptProcess_IsApplicationRunning_PID::ProcessId' has a wrong offset!");
//static_assert(offsetof(JavascriptProcess_IsApplicationRunning_PID, ReturnValue) == 0x000004, "Member 'JavascriptProcess_IsApplicationRunning_PID::ReturnValue' has a wrong offset!");

// Function V8.JavascriptProcess.LaunchURL
// 0x0030 (0x0030 - 0x0000)
struct JavascriptProcess_LaunchURL final
{
public:
	class FString                                 URL;                                               // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 Parms_0;                                           // 0x0010(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 Error;                                             // 0x0020(0x0010)(Parm, OutParm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
//static_assert(alignof(JavascriptProcess_LaunchURL) == 0x000008, "Wrong alignment on JavascriptProcess_LaunchURL");
//static_assert(sizeof(JavascriptProcess_LaunchURL) == 0x000030, "Wrong size on JavascriptProcess_LaunchURL");
//static_assert(offsetof(JavascriptProcess_LaunchURL, URL) == 0x000000, "Member 'JavascriptProcess_LaunchURL::URL' has a wrong offset!");
//static_assert(offsetof(JavascriptProcess_LaunchURL, Parms_0) == 0x000010, "Member 'JavascriptProcess_LaunchURL::Parms_0' has a wrong offset!");
//static_assert(offsetof(JavascriptProcess_LaunchURL, Error) == 0x000020, "Member 'JavascriptProcess_LaunchURL::Error' has a wrong offset!");

// Function V8.JavascriptProcess.Open
// 0x0018 (0x0018 - 0x0000)
struct JavascriptProcess_Open final
{
public:
	class FString                                 ProcName;                                          // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UJavascriptProcess*                     ReturnValue;                                       // 0x0010(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
//static_assert(alignof(JavascriptProcess_Open) == 0x000008, "Wrong alignment on JavascriptProcess_Open");
//static_assert(sizeof(JavascriptProcess_Open) == 0x000018, "Wrong size on JavascriptProcess_Open");
//static_assert(offsetof(JavascriptProcess_Open, ProcName) == 0x000000, "Member 'JavascriptProcess_Open::ProcName' has a wrong offset!");
//static_assert(offsetof(JavascriptProcess_Open, ReturnValue) == 0x000010, "Member 'JavascriptProcess_Open::ReturnValue' has a wrong offset!");

// Function V8.JavascriptProcess.Open_PID
// 0x0010 (0x0010 - 0x0000)
struct JavascriptProcess_Open_PID final
{
public:
	int32                                         ProcessId;                                         // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_4[0x4];                                        // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UJavascriptProcess*                     ReturnValue;                                       // 0x0008(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
//static_assert(alignof(JavascriptProcess_Open_PID) == 0x000008, "Wrong alignment on JavascriptProcess_Open_PID");
//static_assert(sizeof(JavascriptProcess_Open_PID) == 0x000010, "Wrong size on JavascriptProcess_Open_PID");
//static_assert(offsetof(JavascriptProcess_Open_PID, ProcessId) == 0x000000, "Member 'JavascriptProcess_Open_PID::ProcessId' has a wrong offset!");
//static_assert(offsetof(JavascriptProcess_Open_PID, ReturnValue) == 0x000008, "Member 'JavascriptProcess_Open_PID::ReturnValue' has a wrong offset!");

// Function V8.JavascriptProcess.SetEnvironmentVar
// 0x0020 (0x0020 - 0x0000)
struct JavascriptProcess_SetEnvironmentVar final
{
public:
	class FString                                 VarName;                                           // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 VarValue;                                          // 0x0010(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
//static_assert(alignof(JavascriptProcess_SetEnvironmentVar) == 0x000008, "Wrong alignment on JavascriptProcess_SetEnvironmentVar");
//static_assert(sizeof(JavascriptProcess_SetEnvironmentVar) == 0x000020, "Wrong size on JavascriptProcess_SetEnvironmentVar");
//static_assert(offsetof(JavascriptProcess_SetEnvironmentVar, VarName) == 0x000000, "Member 'JavascriptProcess_SetEnvironmentVar::VarName' has a wrong offset!");
//static_assert(offsetof(JavascriptProcess_SetEnvironmentVar, VarValue) == 0x000010, "Member 'JavascriptProcess_SetEnvironmentVar::VarValue' has a wrong offset!");

// Function V8.JavascriptProcess.SimulateKeypress
// 0x0004 (0x0004 - 0x0000)
struct JavascriptProcess_SimulateKeypress final
{
public:
	int32                                         KeyEvent;                                          // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
//static_assert(alignof(JavascriptProcess_SimulateKeypress) == 0x000004, "Wrong alignment on JavascriptProcess_SimulateKeypress");
//static_assert(sizeof(JavascriptProcess_SimulateKeypress) == 0x000004, "Wrong size on JavascriptProcess_SimulateKeypress");
//static_assert(offsetof(JavascriptProcess_SimulateKeypress, KeyEvent) == 0x000000, "Member 'JavascriptProcess_SimulateKeypress::KeyEvent' has a wrong offset!");

// Function V8.JavascriptProcess.Sleep
// 0x0004 (0x0004 - 0x0000)
struct JavascriptProcess_Sleep final
{
public:
	float                                         Seconds;                                           // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
//static_assert(alignof(JavascriptProcess_Sleep) == 0x000004, "Wrong alignment on JavascriptProcess_Sleep");
//static_assert(sizeof(JavascriptProcess_Sleep) == 0x000004, "Wrong size on JavascriptProcess_Sleep");
//static_assert(offsetof(JavascriptProcess_Sleep, Seconds) == 0x000000, "Member 'JavascriptProcess_Sleep::Seconds' has a wrong offset!");

// Function V8.JavascriptProcess.GetReturnCode
// 0x0008 (0x0008 - 0x0000)
struct JavascriptProcess_GetReturnCode final
{
public:
	int32                                         ReturnCode;                                        // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0004(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_5[0x3];                                        // 0x0005(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
//static_assert(alignof(JavascriptProcess_GetReturnCode) == 0x000004, "Wrong alignment on JavascriptProcess_GetReturnCode");
//static_assert(sizeof(JavascriptProcess_GetReturnCode) == 0x000008, "Wrong size on JavascriptProcess_GetReturnCode");
//static_assert(offsetof(JavascriptProcess_GetReturnCode, ReturnCode) == 0x000000, "Member 'JavascriptProcess_GetReturnCode::ReturnCode' has a wrong offset!");
//static_assert(offsetof(JavascriptProcess_GetReturnCode, ReturnValue) == 0x000004, "Member 'JavascriptProcess_GetReturnCode::ReturnValue' has a wrong offset!");

// Function V8.JavascriptProcess.IsRunning
// 0x0001 (0x0001 - 0x0000)
struct JavascriptProcess_IsRunning final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
//static_assert(alignof(JavascriptProcess_IsRunning) == 0x000001, "Wrong alignment on JavascriptProcess_IsRunning");
//static_assert(sizeof(JavascriptProcess_IsRunning) == 0x000001, "Wrong size on JavascriptProcess_IsRunning");
//static_assert(offsetof(JavascriptProcess_IsRunning, ReturnValue) == 0x000000, "Member 'JavascriptProcess_IsRunning::ReturnValue' has a wrong offset!");

// Function V8.JavascriptProcess.ReadArrayFromPipe
// 0x0018 (0x0018 - 0x0000)
struct JavascriptProcess_ReadArrayFromPipe final
{
public:
	TArray<uint8>                                 Array;                                             // 0x0000(0x0010)(Parm, OutParm, ZeroConstructor, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0010(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_11[0x7];                                       // 0x0011(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
//static_assert(alignof(JavascriptProcess_ReadArrayFromPipe) == 0x000008, "Wrong alignment on JavascriptProcess_ReadArrayFromPipe");
//static_assert(sizeof(JavascriptProcess_ReadArrayFromPipe) == 0x000018, "Wrong size on JavascriptProcess_ReadArrayFromPipe");
//static_assert(offsetof(JavascriptProcess_ReadArrayFromPipe, Array) == 0x000000, "Member 'JavascriptProcess_ReadArrayFromPipe::Array' has a wrong offset!");
//static_assert(offsetof(JavascriptProcess_ReadArrayFromPipe, ReturnValue) == 0x000010, "Member 'JavascriptProcess_ReadArrayFromPipe::ReturnValue' has a wrong offset!");

// Function V8.JavascriptProcess.ReadFromPipe
// 0x0010 (0x0010 - 0x0000)
struct JavascriptProcess_ReadFromPipe final
{
public:
	class FString                                 ReturnValue;                                       // 0x0000(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
//static_assert(alignof(JavascriptProcess_ReadFromPipe) == 0x000008, "Wrong alignment on JavascriptProcess_ReadFromPipe");
//static_assert(sizeof(JavascriptProcess_ReadFromPipe) == 0x000010, "Wrong size on JavascriptProcess_ReadFromPipe");
//static_assert(offsetof(JavascriptProcess_ReadFromPipe, ReturnValue) == 0x000000, "Member 'JavascriptProcess_ReadFromPipe::ReturnValue' has a wrong offset!");

// Function V8.JavascriptProcess.Terminate
// 0x0001 (0x0001 - 0x0000)
struct JavascriptProcess_Terminate final
{
public:
	bool                                          KillTree;                                          // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
//static_assert(alignof(JavascriptProcess_Terminate) == 0x000001, "Wrong alignment on JavascriptProcess_Terminate");
//static_assert(sizeof(JavascriptProcess_Terminate) == 0x000001, "Wrong size on JavascriptProcess_Terminate");
//static_assert(offsetof(JavascriptProcess_Terminate, KillTree) == 0x000000, "Member 'JavascriptProcess_Terminate::KillTree' has a wrong offset!");

// Function V8.JavascriptProcess.WriteToPipe
// 0x0028 (0x0028 - 0x0000)
struct JavascriptProcess_WriteToPipe final
{
public:
	class FString                                 Message;                                           // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 OutWritten;                                        // 0x0010(0x0010)(Parm, OutParm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0020(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_21[0x7];                                       // 0x0021(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
//static_assert(alignof(JavascriptProcess_WriteToPipe) == 0x000008, "Wrong alignment on JavascriptProcess_WriteToPipe");
//static_assert(sizeof(JavascriptProcess_WriteToPipe) == 0x000028, "Wrong size on JavascriptProcess_WriteToPipe");
//static_assert(offsetof(JavascriptProcess_WriteToPipe, Message) == 0x000000, "Member 'JavascriptProcess_WriteToPipe::Message' has a wrong offset!");
//static_assert(offsetof(JavascriptProcess_WriteToPipe, OutWritten) == 0x000010, "Member 'JavascriptProcess_WriteToPipe::OutWritten' has a wrong offset!");
//static_assert(offsetof(JavascriptProcess_WriteToPipe, ReturnValue) == 0x000020, "Member 'JavascriptProcess_WriteToPipe::ReturnValue' has a wrong offset!");

// Function V8.JavascriptProfile.SetIdle
// 0x0010 (0x0010 - 0x0000)
struct JavascriptProfile_SetIdle final
{
public:
	struct FJavascriptCpuProfiler                 Profiler;                                          // 0x0000(0x0008)(ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
	bool                                          Is_idle;                                           // 0x0008(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
//static_assert(alignof(JavascriptProfile_SetIdle) == 0x000008, "Wrong alignment on JavascriptProfile_SetIdle");
//static_assert(sizeof(JavascriptProfile_SetIdle) == 0x000010, "Wrong size on JavascriptProfile_SetIdle");
//static_assert(offsetof(JavascriptProfile_SetIdle, Profiler) == 0x000000, "Member 'JavascriptProfile_SetIdle::Profiler' has a wrong offset!");
//static_assert(offsetof(JavascriptProfile_SetIdle, Is_idle) == 0x000008, "Member 'JavascriptProfile_SetIdle::Is_idle' has a wrong offset!");

// Function V8.JavascriptProfile.SetSamplingInterval
// 0x0010 (0x0010 - 0x0000)
struct JavascriptProfile_SetSamplingInterval final
{
public:
	struct FJavascriptCpuProfiler                 Profiler;                                          // 0x0000(0x0008)(ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
	int32                                         Us;                                                // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
//static_assert(alignof(JavascriptProfile_SetSamplingInterval) == 0x000008, "Wrong alignment on JavascriptProfile_SetSamplingInterval");
//static_assert(sizeof(JavascriptProfile_SetSamplingInterval) == 0x000010, "Wrong size on JavascriptProfile_SetSamplingInterval");
//static_assert(offsetof(JavascriptProfile_SetSamplingInterval, Profiler) == 0x000000, "Member 'JavascriptProfile_SetSamplingInterval::Profiler' has a wrong offset!");
//static_assert(offsetof(JavascriptProfile_SetSamplingInterval, Us) == 0x000008, "Member 'JavascriptProfile_SetSamplingInterval::Us' has a wrong offset!");

// Function V8.JavascriptProfile.Start
// 0x0020 (0x0020 - 0x0000)
struct JavascriptProfile_Start final
{
public:
	class FString                                 Title;                                             // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bRecordSamples;                                    // 0x0010(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_11[0x7];                                       // 0x0011(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FJavascriptCpuProfiler                 ReturnValue;                                       // 0x0018(0x0008)(Parm, OutParm, ReturnParm, NoDestructor, NativeAccessSpecifierPublic)
};
//static_assert(alignof(JavascriptProfile_Start) == 0x000008, "Wrong alignment on JavascriptProfile_Start");
//static_assert(sizeof(JavascriptProfile_Start) == 0x000020, "Wrong size on JavascriptProfile_Start");
//static_assert(offsetof(JavascriptProfile_Start, Title) == 0x000000, "Member 'JavascriptProfile_Start::Title' has a wrong offset!");
//static_assert(offsetof(JavascriptProfile_Start, bRecordSamples) == 0x000010, "Member 'JavascriptProfile_Start::bRecordSamples' has a wrong offset!");
//static_assert(offsetof(JavascriptProfile_Start, ReturnValue) == 0x000018, "Member 'JavascriptProfile_Start::ReturnValue' has a wrong offset!");

// Function V8.JavascriptProfile.Stop
// 0x0020 (0x0020 - 0x0000)
struct JavascriptProfile_Stop final
{
public:
	struct FJavascriptCpuProfiler                 Profiler;                                          // 0x0000(0x0008)(ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
	class FString                                 Title;                                             // 0x0008(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UJavascriptProfile*                     ReturnValue;                                       // 0x0018(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
//static_assert(alignof(JavascriptProfile_Stop) == 0x000008, "Wrong alignment on JavascriptProfile_Stop");
//static_assert(sizeof(JavascriptProfile_Stop) == 0x000020, "Wrong size on JavascriptProfile_Stop");
//static_assert(offsetof(JavascriptProfile_Stop, Profiler) == 0x000000, "Member 'JavascriptProfile_Stop::Profiler' has a wrong offset!");
//static_assert(offsetof(JavascriptProfile_Stop, Title) == 0x000008, "Member 'JavascriptProfile_Stop::Title' has a wrong offset!");
//static_assert(offsetof(JavascriptProfile_Stop, ReturnValue) == 0x000018, "Member 'JavascriptProfile_Stop::ReturnValue' has a wrong offset!");

// Function V8.JavascriptProfile.GetSample
// 0x0010 (0x0010 - 0x0000)
struct JavascriptProfile_GetSample final
{
public:
	int32                                         Index_0;                                           // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_4[0x4];                                        // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FJavascriptProfileNode                 ReturnValue;                                       // 0x0008(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
};
//static_assert(alignof(JavascriptProfile_GetSample) == 0x000008, "Wrong alignment on JavascriptProfile_GetSample");
//static_assert(sizeof(JavascriptProfile_GetSample) == 0x000010, "Wrong size on JavascriptProfile_GetSample");
//static_assert(offsetof(JavascriptProfile_GetSample, Index_0) == 0x000000, "Member 'JavascriptProfile_GetSample::Index_0' has a wrong offset!");
//static_assert(offsetof(JavascriptProfile_GetSample, ReturnValue) == 0x000008, "Member 'JavascriptProfile_GetSample::ReturnValue' has a wrong offset!");

// Function V8.JavascriptProfile.GetSamplesCount
// 0x0004 (0x0004 - 0x0000)
struct JavascriptProfile_GetSamplesCount final
{
public:
	int32                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
//static_assert(alignof(JavascriptProfile_GetSamplesCount) == 0x000004, "Wrong alignment on JavascriptProfile_GetSamplesCount");
//static_assert(sizeof(JavascriptProfile_GetSamplesCount) == 0x000004, "Wrong size on JavascriptProfile_GetSamplesCount");
//static_assert(offsetof(JavascriptProfile_GetSamplesCount, ReturnValue) == 0x000000, "Member 'JavascriptProfile_GetSamplesCount::ReturnValue' has a wrong offset!");

// Function V8.JavascriptProfile.GetSampleTimestamp
// 0x0008 (0x0008 - 0x0000)
struct JavascriptProfile_GetSampleTimestamp final
{
public:
	int32                                         Index_0;                                           // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         ReturnValue;                                       // 0x0004(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
//static_assert(alignof(JavascriptProfile_GetSampleTimestamp) == 0x000004, "Wrong alignment on JavascriptProfile_GetSampleTimestamp");
//static_assert(sizeof(JavascriptProfile_GetSampleTimestamp) == 0x000008, "Wrong size on JavascriptProfile_GetSampleTimestamp");
//static_assert(offsetof(JavascriptProfile_GetSampleTimestamp, Index_0) == 0x000000, "Member 'JavascriptProfile_GetSampleTimestamp::Index_0' has a wrong offset!");
//static_assert(offsetof(JavascriptProfile_GetSampleTimestamp, ReturnValue) == 0x000004, "Member 'JavascriptProfile_GetSampleTimestamp::ReturnValue' has a wrong offset!");

// Function V8.JavascriptProfile.GetTopDownRoot
// 0x0008 (0x0008 - 0x0000)
struct JavascriptProfile_GetTopDownRoot final
{
public:
	struct FJavascriptProfileNode                 ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
};
//static_assert(alignof(JavascriptProfile_GetTopDownRoot) == 0x000008, "Wrong alignment on JavascriptProfile_GetTopDownRoot");
//static_assert(sizeof(JavascriptProfile_GetTopDownRoot) == 0x000008, "Wrong size on JavascriptProfile_GetTopDownRoot");
//static_assert(offsetof(JavascriptProfile_GetTopDownRoot, ReturnValue) == 0x000000, "Member 'JavascriptProfile_GetTopDownRoot::ReturnValue' has a wrong offset!");

// Function V8.JavascriptSemaphore.Create
// 0x0018 (0x0018 - 0x0000)
struct JavascriptSemaphore_Create final
{
public:
	class FName                                   Name_0;                                            // 0x0000(0x0008)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bCreate;                                           // 0x0008(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x3];                                        // 0x0009(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         MaxLocks;                                          // 0x000C(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UJavascriptSemaphore*                   ReturnValue;                                       // 0x0010(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
//static_assert(alignof(JavascriptSemaphore_Create) == 0x000008, "Wrong alignment on JavascriptSemaphore_Create");
//static_assert(sizeof(JavascriptSemaphore_Create) == 0x000018, "Wrong size on JavascriptSemaphore_Create");
//static_assert(offsetof(JavascriptSemaphore_Create, Name_0) == 0x000000, "Member 'JavascriptSemaphore_Create::Name_0' has a wrong offset!");
//static_assert(offsetof(JavascriptSemaphore_Create, bCreate) == 0x000008, "Member 'JavascriptSemaphore_Create::bCreate' has a wrong offset!");
//static_assert(offsetof(JavascriptSemaphore_Create, MaxLocks) == 0x00000C, "Member 'JavascriptSemaphore_Create::MaxLocks' has a wrong offset!");
//static_assert(offsetof(JavascriptSemaphore_Create, ReturnValue) == 0x000010, "Member 'JavascriptSemaphore_Create::ReturnValue' has a wrong offset!");

// Function V8.JavascriptSemaphore.TryLock
// 0x0008 (0x0008 - 0x0000)
struct JavascriptSemaphore_TryLock final
{
public:
	int32                                         NanosecondsToWait;                                 // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0004(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_5[0x3];                                        // 0x0005(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
//static_assert(alignof(JavascriptSemaphore_TryLock) == 0x000004, "Wrong alignment on JavascriptSemaphore_TryLock");
//static_assert(sizeof(JavascriptSemaphore_TryLock) == 0x000008, "Wrong size on JavascriptSemaphore_TryLock");
//static_assert(offsetof(JavascriptSemaphore_TryLock, NanosecondsToWait) == 0x000000, "Member 'JavascriptSemaphore_TryLock::NanosecondsToWait' has a wrong offset!");
//static_assert(offsetof(JavascriptSemaphore_TryLock, ReturnValue) == 0x000004, "Member 'JavascriptSemaphore_TryLock::ReturnValue' has a wrong offset!");

// Function V8.JavascriptSharedMemoryRegion.Create
// 0x0018 (0x0018 - 0x0000)
struct JavascriptSharedMemoryRegion_Create final
{
public:
	class FName                                   Name_0;                                            // 0x0000(0x0008)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bCreate;                                           // 0x0008(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bRead;                                             // 0x0009(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bWrite;                                            // 0x000A(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_B[0x1];                                        // 0x000B(0x0001)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         Size;                                              // 0x000C(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UJavascriptSharedMemoryRegion*          ReturnValue;                                       // 0x0010(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
//static_assert(alignof(JavascriptSharedMemoryRegion_Create) == 0x000008, "Wrong alignment on JavascriptSharedMemoryRegion_Create");
//static_assert(sizeof(JavascriptSharedMemoryRegion_Create) == 0x000018, "Wrong size on JavascriptSharedMemoryRegion_Create");
//static_assert(offsetof(JavascriptSharedMemoryRegion_Create, Name_0) == 0x000000, "Member 'JavascriptSharedMemoryRegion_Create::Name_0' has a wrong offset!");
//static_assert(offsetof(JavascriptSharedMemoryRegion_Create, bCreate) == 0x000008, "Member 'JavascriptSharedMemoryRegion_Create::bCreate' has a wrong offset!");
//static_assert(offsetof(JavascriptSharedMemoryRegion_Create, bRead) == 0x000009, "Member 'JavascriptSharedMemoryRegion_Create::bRead' has a wrong offset!");
//static_assert(offsetof(JavascriptSharedMemoryRegion_Create, bWrite) == 0x00000A, "Member 'JavascriptSharedMemoryRegion_Create::bWrite' has a wrong offset!");
//static_assert(offsetof(JavascriptSharedMemoryRegion_Create, Size) == 0x00000C, "Member 'JavascriptSharedMemoryRegion_Create::Size' has a wrong offset!");
//static_assert(offsetof(JavascriptSharedMemoryRegion_Create, ReturnValue) == 0x000010, "Member 'JavascriptSharedMemoryRegion_Create::ReturnValue' has a wrong offset!");

// Function V8.JavascriptTestLibrary.AddAnalyticsItem
// 0x0020 (0x0020 - 0x0000)
struct JavascriptTestLibrary_AddAnalyticsItem final
{
public:
	struct FJavascriptAutomatedTestInstance       Test;                                              // 0x0000(0x0010)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
	class FString                                 InAnalyticsItem;                                   // 0x0010(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
//static_assert(alignof(JavascriptTestLibrary_AddAnalyticsItem) == 0x000008, "Wrong alignment on JavascriptTestLibrary_AddAnalyticsItem");
//static_assert(sizeof(JavascriptTestLibrary_AddAnalyticsItem) == 0x000020, "Wrong size on JavascriptTestLibrary_AddAnalyticsItem");
//static_assert(offsetof(JavascriptTestLibrary_AddAnalyticsItem, Test) == 0x000000, "Member 'JavascriptTestLibrary_AddAnalyticsItem::Test' has a wrong offset!");
//static_assert(offsetof(JavascriptTestLibrary_AddAnalyticsItem, InAnalyticsItem) == 0x000010, "Member 'JavascriptTestLibrary_AddAnalyticsItem::InAnalyticsItem' has a wrong offset!");

// Function V8.JavascriptTestLibrary.AddError
// 0x0020 (0x0020 - 0x0000)
struct JavascriptTestLibrary_AddError final
{
public:
	struct FJavascriptAutomatedTestInstance       Test;                                              // 0x0000(0x0010)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
	class FString                                 InError;                                           // 0x0010(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
//static_assert(alignof(JavascriptTestLibrary_AddError) == 0x000008, "Wrong alignment on JavascriptTestLibrary_AddError");
//static_assert(sizeof(JavascriptTestLibrary_AddError) == 0x000020, "Wrong size on JavascriptTestLibrary_AddError");
//static_assert(offsetof(JavascriptTestLibrary_AddError, Test) == 0x000000, "Member 'JavascriptTestLibrary_AddError::Test' has a wrong offset!");
//static_assert(offsetof(JavascriptTestLibrary_AddError, InError) == 0x000010, "Member 'JavascriptTestLibrary_AddError::InError' has a wrong offset!");

// Function V8.JavascriptTestLibrary.AddLogItem
// 0x0020 (0x0020 - 0x0000)
struct JavascriptTestLibrary_AddLogItem final
{
public:
	struct FJavascriptAutomatedTestInstance       Test;                                              // 0x0000(0x0010)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
	class FString                                 InLogItem;                                         // 0x0010(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
//static_assert(alignof(JavascriptTestLibrary_AddLogItem) == 0x000008, "Wrong alignment on JavascriptTestLibrary_AddLogItem");
//static_assert(sizeof(JavascriptTestLibrary_AddLogItem) == 0x000020, "Wrong size on JavascriptTestLibrary_AddLogItem");
//static_assert(offsetof(JavascriptTestLibrary_AddLogItem, Test) == 0x000000, "Member 'JavascriptTestLibrary_AddLogItem::Test' has a wrong offset!");
//static_assert(offsetof(JavascriptTestLibrary_AddLogItem, InLogItem) == 0x000010, "Member 'JavascriptTestLibrary_AddLogItem::InLogItem' has a wrong offset!");

// Function V8.JavascriptTestLibrary.AddWarning
// 0x0020 (0x0020 - 0x0000)
struct JavascriptTestLibrary_AddWarning final
{
public:
	struct FJavascriptAutomatedTestInstance       Test;                                              // 0x0000(0x0010)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
	class FString                                 InWarning;                                         // 0x0010(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
//static_assert(alignof(JavascriptTestLibrary_AddWarning) == 0x000008, "Wrong alignment on JavascriptTestLibrary_AddWarning");
//static_assert(sizeof(JavascriptTestLibrary_AddWarning) == 0x000020, "Wrong size on JavascriptTestLibrary_AddWarning");
//static_assert(offsetof(JavascriptTestLibrary_AddWarning, Test) == 0x000000, "Member 'JavascriptTestLibrary_AddWarning::Test' has a wrong offset!");
//static_assert(offsetof(JavascriptTestLibrary_AddWarning, InWarning) == 0x000010, "Member 'JavascriptTestLibrary_AddWarning::InWarning' has a wrong offset!");

// Function V8.JavascriptTestLibrary.BeginPlay
// 0x0008 (0x0008 - 0x0000)
struct JavascriptTestLibrary_BeginPlay final
{
public:
	class UWorld*                                 World;                                             // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
//static_assert(alignof(JavascriptTestLibrary_BeginPlay) == 0x000008, "Wrong alignment on JavascriptTestLibrary_BeginPlay");
//static_assert(sizeof(JavascriptTestLibrary_BeginPlay) == 0x000008, "Wrong size on JavascriptTestLibrary_BeginPlay");
//static_assert(offsetof(JavascriptTestLibrary_BeginPlay, World) == 0x000000, "Member 'JavascriptTestLibrary_BeginPlay::World' has a wrong offset!");

// Function V8.JavascriptTestLibrary.ClearExecutionInfo
// 0x0010 (0x0010 - 0x0000)
struct JavascriptTestLibrary_ClearExecutionInfo final
{
public:
	struct FJavascriptAutomatedTestInstance       Test;                                              // 0x0000(0x0010)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
};
//static_assert(alignof(JavascriptTestLibrary_ClearExecutionInfo) == 0x000008, "Wrong alignment on JavascriptTestLibrary_ClearExecutionInfo");
//static_assert(sizeof(JavascriptTestLibrary_ClearExecutionInfo) == 0x000010, "Wrong size on JavascriptTestLibrary_ClearExecutionInfo");
//static_assert(offsetof(JavascriptTestLibrary_ClearExecutionInfo, Test) == 0x000000, "Member 'JavascriptTestLibrary_ClearExecutionInfo::Test' has a wrong offset!");

// Function V8.JavascriptTestLibrary.Create
// 0x0050 (0x0050 - 0x0000)
struct JavascriptTestLibrary_Create final
{
public:
	struct FJavascriptAutomatedTest               Test;                                              // 0x0000(0x0040)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
	struct FJavascriptAutomatedTestInstance       ReturnValue;                                       // 0x0040(0x0010)(Parm, OutParm, ReturnParm, NativeAccessSpecifierPublic)
};
//static_assert(alignof(JavascriptTestLibrary_Create) == 0x000008, "Wrong alignment on JavascriptTestLibrary_Create");
//static_assert(sizeof(JavascriptTestLibrary_Create) == 0x000050, "Wrong size on JavascriptTestLibrary_Create");
//static_assert(offsetof(JavascriptTestLibrary_Create, Test) == 0x000000, "Member 'JavascriptTestLibrary_Create::Test' has a wrong offset!");
//static_assert(offsetof(JavascriptTestLibrary_Create, ReturnValue) == 0x000040, "Member 'JavascriptTestLibrary_Create::ReturnValue' has a wrong offset!");

// Function V8.JavascriptTestLibrary.Destroy
// 0x0010 (0x0010 - 0x0000)
struct JavascriptTestLibrary_Destroy final
{
public:
	struct FJavascriptAutomatedTestInstance       Test;                                              // 0x0000(0x0010)(Parm, OutParm, NativeAccessSpecifierPublic)
};
//static_assert(alignof(JavascriptTestLibrary_Destroy) == 0x000008, "Wrong alignment on JavascriptTestLibrary_Destroy");
//static_assert(sizeof(JavascriptTestLibrary_Destroy) == 0x000010, "Wrong size on JavascriptTestLibrary_Destroy");
//static_assert(offsetof(JavascriptTestLibrary_Destroy, Test) == 0x000000, "Member 'JavascriptTestLibrary_Destroy::Test' has a wrong offset!");

// Function V8.JavascriptTestLibrary.DestroyUObject
// 0x0008 (0x0008 - 0x0000)
struct JavascriptTestLibrary_DestroyUObject final
{
public:
	class UObject*                                Object;                                            // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
//static_assert(alignof(JavascriptTestLibrary_DestroyUObject) == 0x000008, "Wrong alignment on JavascriptTestLibrary_DestroyUObject");
//static_assert(sizeof(JavascriptTestLibrary_DestroyUObject) == 0x000008, "Wrong size on JavascriptTestLibrary_DestroyUObject");
//static_assert(offsetof(JavascriptTestLibrary_DestroyUObject, Object) == 0x000000, "Member 'JavascriptTestLibrary_DestroyUObject::Object' has a wrong offset!");

// Function V8.JavascriptTestLibrary.DestroyWorld
// 0x0008 (0x0008 - 0x0000)
struct JavascriptTestLibrary_DestroyWorld final
{
public:
	class UWorld*                                 World;                                             // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
//static_assert(alignof(JavascriptTestLibrary_DestroyWorld) == 0x000008, "Wrong alignment on JavascriptTestLibrary_DestroyWorld");
//static_assert(sizeof(JavascriptTestLibrary_DestroyWorld) == 0x000008, "Wrong size on JavascriptTestLibrary_DestroyWorld");
//static_assert(offsetof(JavascriptTestLibrary_DestroyWorld, World) == 0x000000, "Member 'JavascriptTestLibrary_DestroyWorld::World' has a wrong offset!");

// Function V8.JavascriptTestLibrary.InitializeActorsForPlay
// 0x0070 (0x0070 - 0x0000)
struct JavascriptTestLibrary_InitializeActorsForPlay final
{
public:
	class UWorld*                                 World;                                             // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FURL                                   URL;                                               // 0x0008(0x0068)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
};
//static_assert(alignof(JavascriptTestLibrary_InitializeActorsForPlay) == 0x000008, "Wrong alignment on JavascriptTestLibrary_InitializeActorsForPlay");
//static_assert(sizeof(JavascriptTestLibrary_InitializeActorsForPlay) == 0x000070, "Wrong size on JavascriptTestLibrary_InitializeActorsForPlay");
//static_assert(offsetof(JavascriptTestLibrary_InitializeActorsForPlay, World) == 0x000000, "Member 'JavascriptTestLibrary_InitializeActorsForPlay::World' has a wrong offset!");
//static_assert(offsetof(JavascriptTestLibrary_InitializeActorsForPlay, URL) == 0x000008, "Member 'JavascriptTestLibrary_InitializeActorsForPlay::URL' has a wrong offset!");

// Function V8.JavascriptTestLibrary.NewWorld
// 0x0008 (0x0008 - 0x0000)
struct JavascriptTestLibrary_NewWorld final
{
public:
	class UWorld*                                 ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
//static_assert(alignof(JavascriptTestLibrary_NewWorld) == 0x000008, "Wrong alignment on JavascriptTestLibrary_NewWorld");
//static_assert(sizeof(JavascriptTestLibrary_NewWorld) == 0x000008, "Wrong size on JavascriptTestLibrary_NewWorld");
//static_assert(offsetof(JavascriptTestLibrary_NewWorld, ReturnValue) == 0x000000, "Member 'JavascriptTestLibrary_NewWorld::ReturnValue' has a wrong offset!");

// Function V8.JavascriptTestLibrary.SetContinue
// 0x0018 (0x0018 - 0x0000)
struct JavascriptTestLibrary_SetContinue final
{
public:
	struct FJavascriptAutomatedTestInstance       Test;                                              // 0x0000(0x0010)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
	bool                                          bInContinue;                                       // 0x0010(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_11[0x7];                                       // 0x0011(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
//static_assert(alignof(JavascriptTestLibrary_SetContinue) == 0x000008, "Wrong alignment on JavascriptTestLibrary_SetContinue");
//static_assert(sizeof(JavascriptTestLibrary_SetContinue) == 0x000018, "Wrong size on JavascriptTestLibrary_SetContinue");
//static_assert(offsetof(JavascriptTestLibrary_SetContinue, Test) == 0x000000, "Member 'JavascriptTestLibrary_SetContinue::Test' has a wrong offset!");
//static_assert(offsetof(JavascriptTestLibrary_SetContinue, bInContinue) == 0x000010, "Member 'JavascriptTestLibrary_SetContinue::bInContinue' has a wrong offset!");

}

