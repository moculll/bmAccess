#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: CustomLightSystem

#include "Basic.hpp"

#include "Engine_structs.hpp"
#include "Engine_classes.hpp"
#include "CoreUObject_structs.hpp"
#include "CoreUObject_classes.hpp"
#include "CustomLightSystem_structs.hpp"
#include "DeveloperSettings_classes.hpp"


namespace SDK
{

// Class CustomLightSystem.CLSLightManager
// 0x0148 (0x03C0 - 0x0278)
class ACLSLightManager final : public AActor
{
public:
	class ACLSVolumeManager*                      VolumeManager;                                     // 0x0278(0x0008)(ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         LightManagerID;                                    // 0x0280(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_284[0x4];                                      // 0x0284(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<class ADirectionalLight*>              DirectionalLightList;                              // 0x0288(0x0010)(Edit, ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<class ASkyLight*>                      SkyLightList;                                      // 0x0298(0x0010)(Edit, ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<class ASkyAtmosphere*>                 AtmosphericFogList;                                // 0x02A8(0x0010)(Edit, ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<class AExponentialHeightFog*>          ExponentialHeightFogList;                          // 0x02B8(0x0010)(Edit, ZeroConstructor, NativeAccessSpecifierPublic)
	float                                         SpeedAlpha;                                        // 0x02C8(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bIsSwitchActive;                                   // 0x02CC(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bIsAllActorActive;                                 // 0x02CD(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2CE[0x12];                                     // 0x02CE(0x0012)(Fixing Size After Last Property [ Dumper-7 ])
	class ADirectionalLight*                      TargetDLight;                                      // 0x02E0(0x0008)(ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class ADirectionalLight*                      DLight;                                            // 0x02E8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class ASkyLight*                              TargetSLight;                                      // 0x02F0(0x0008)(ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class ASkyLight*                              SLight;                                            // 0x02F8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class ASkyAtmosphere*                         TargetAFog;                                        // 0x0300(0x0008)(ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class ASkyAtmosphere*                         AFog;                                              // 0x0308(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class AExponentialHeightFog*                  TargetEHFog;                                       // 0x0310(0x0008)(ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class AExponentialHeightFog*                  EHFog;                                             // 0x0318(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UMaterialParameterCollection*           MPC;                                               // 0x0320(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class ADirectionalLight*                      OriginalDirectionalLight;                          // 0x0328(0x0008)(ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class ASkyLight*                              OriginalSkyLight;                                  // 0x0330(0x0008)(ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class ASkyAtmosphere*                         OriginalAtmosphericFog;                            // 0x0338(0x0008)(ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class AExponentialHeightFog*                  OriginalExponentialHeightFog;                      // 0x0340(0x0008)(ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         OriginalVloumePercentage;                          // 0x0348(0x0004)(ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_34C[0x4];                                      // 0x034C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class ADirectionalLight*                      TargetDirectionalLight;                            // 0x0350(0x0008)(ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class ASkyLight*                              TargetSkyLight;                                    // 0x0358(0x0008)(ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class ASkyAtmosphere*                         TargetAtmosphericFog;                              // 0x0360(0x0008)(ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class AExponentialHeightFog*                  TargetExponentialHeightFog;                        // 0x0368(0x0008)(ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FCLSMaterialParametersCollectionProperty TargetCLSVolumeMPCProperty;                        // 0x0370(0x0020)(Transient, NativeAccessSpecifierPublic)
	struct FCLSMaterialParametersCollectionProperty OriginalCLSVolumeMPCProperty;                      // 0x0390(0x0020)(Transient, NativeAccessSpecifierPublic)
	float                                         TargetVolumePercentage;                            // 0x03B0(0x0004)(ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         TickTargetVolumePercentage;                        // 0x03B4(0x0004)(ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bOriginlaVolumeChanged;                            // 0x03B8(0x0001)(ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_3B9[0x7];                                      // 0x03B9(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	bool CheckReforenceListValid();
	void ForceUpdateParameters();
	void ForceUpdateTagComponents();
	bool InitializeTagActor(class UCLSTagComponent* TagComponent);
	void SetLightManagerActive(bool NewActive);
	bool SwitchAllLightAndFog(int32 Index_0);
	bool SwitchAtmosphericFog(int32 Index_0);
	bool SwitchDirectionalLight(int32 Index_0);
	bool SwitchExponentialHeightFog(int32 Index_0);
	void SwitchLightAndFog(float Percentage);
	bool SwitchSkyLight(int32 Index_0);
	void SyncLightsAndFogs(class ADirectionalLight* InTargetDirectionalLight, class ASkyLight* InTargetSkyLight, class ASkyAtmosphere* InTargetAtmosphericFog, class AExponentialHeightFog* InTargetExponentialHeightFog, const struct FCLSMaterialParametersCollectionProperty& InTargetCLSVolumeMPCProperty, const struct FCLSMaterialParametersCollectionProperty& InOriginalCLSVolumeMPCProperty, float InTargetVolumePercentage, bool ForceUpdate);

	void DisableAllActor() const;

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"CLSLightManager">();
	}
	static class ACLSLightManager* GetDefaultObj()
	{
		return GetDefaultObjImpl<ACLSLightManager>();
	}
};
//static_assert(alignof(ACLSLightManager) == 0x000008, "Wrong alignment on ACLSLightManager");
//static_assert(sizeof(ACLSLightManager) == 0x0003C0, "Wrong size on ACLSLightManager");
//static_assert(offsetof(ACLSLightManager, VolumeManager) == 0x000278, "Member 'ACLSLightManager::VolumeManager' has a wrong offset!");
//static_assert(offsetof(ACLSLightManager, LightManagerID) == 0x000280, "Member 'ACLSLightManager::LightManagerID' has a wrong offset!");
//static_assert(offsetof(ACLSLightManager, DirectionalLightList) == 0x000288, "Member 'ACLSLightManager::DirectionalLightList' has a wrong offset!");
//static_assert(offsetof(ACLSLightManager, SkyLightList) == 0x000298, "Member 'ACLSLightManager::SkyLightList' has a wrong offset!");
//static_assert(offsetof(ACLSLightManager, AtmosphericFogList) == 0x0002A8, "Member 'ACLSLightManager::AtmosphericFogList' has a wrong offset!");
//static_assert(offsetof(ACLSLightManager, ExponentialHeightFogList) == 0x0002B8, "Member 'ACLSLightManager::ExponentialHeightFogList' has a wrong offset!");
//static_assert(offsetof(ACLSLightManager, SpeedAlpha) == 0x0002C8, "Member 'ACLSLightManager::SpeedAlpha' has a wrong offset!");
//static_assert(offsetof(ACLSLightManager, bIsSwitchActive) == 0x0002CC, "Member 'ACLSLightManager::bIsSwitchActive' has a wrong offset!");
//static_assert(offsetof(ACLSLightManager, bIsAllActorActive) == 0x0002CD, "Member 'ACLSLightManager::bIsAllActorActive' has a wrong offset!");
//static_assert(offsetof(ACLSLightManager, TargetDLight) == 0x0002E0, "Member 'ACLSLightManager::TargetDLight' has a wrong offset!");
//static_assert(offsetof(ACLSLightManager, DLight) == 0x0002E8, "Member 'ACLSLightManager::DLight' has a wrong offset!");
//static_assert(offsetof(ACLSLightManager, TargetSLight) == 0x0002F0, "Member 'ACLSLightManager::TargetSLight' has a wrong offset!");
//static_assert(offsetof(ACLSLightManager, SLight) == 0x0002F8, "Member 'ACLSLightManager::SLight' has a wrong offset!");
//static_assert(offsetof(ACLSLightManager, TargetAFog) == 0x000300, "Member 'ACLSLightManager::TargetAFog' has a wrong offset!");
//static_assert(offsetof(ACLSLightManager, AFog) == 0x000308, "Member 'ACLSLightManager::AFog' has a wrong offset!");
//static_assert(offsetof(ACLSLightManager, TargetEHFog) == 0x000310, "Member 'ACLSLightManager::TargetEHFog' has a wrong offset!");
//static_assert(offsetof(ACLSLightManager, EHFog) == 0x000318, "Member 'ACLSLightManager::EHFog' has a wrong offset!");
//static_assert(offsetof(ACLSLightManager, MPC) == 0x000320, "Member 'ACLSLightManager::MPC' has a wrong offset!");
//static_assert(offsetof(ACLSLightManager, OriginalDirectionalLight) == 0x000328, "Member 'ACLSLightManager::OriginalDirectionalLight' has a wrong offset!");
//static_assert(offsetof(ACLSLightManager, OriginalSkyLight) == 0x000330, "Member 'ACLSLightManager::OriginalSkyLight' has a wrong offset!");
//static_assert(offsetof(ACLSLightManager, OriginalAtmosphericFog) == 0x000338, "Member 'ACLSLightManager::OriginalAtmosphericFog' has a wrong offset!");
//static_assert(offsetof(ACLSLightManager, OriginalExponentialHeightFog) == 0x000340, "Member 'ACLSLightManager::OriginalExponentialHeightFog' has a wrong offset!");
//static_assert(offsetof(ACLSLightManager, OriginalVloumePercentage) == 0x000348, "Member 'ACLSLightManager::OriginalVloumePercentage' has a wrong offset!");
//static_assert(offsetof(ACLSLightManager, TargetDirectionalLight) == 0x000350, "Member 'ACLSLightManager::TargetDirectionalLight' has a wrong offset!");
//static_assert(offsetof(ACLSLightManager, TargetSkyLight) == 0x000358, "Member 'ACLSLightManager::TargetSkyLight' has a wrong offset!");
//static_assert(offsetof(ACLSLightManager, TargetAtmosphericFog) == 0x000360, "Member 'ACLSLightManager::TargetAtmosphericFog' has a wrong offset!");
//static_assert(offsetof(ACLSLightManager, TargetExponentialHeightFog) == 0x000368, "Member 'ACLSLightManager::TargetExponentialHeightFog' has a wrong offset!");
//static_assert(offsetof(ACLSLightManager, TargetCLSVolumeMPCProperty) == 0x000370, "Member 'ACLSLightManager::TargetCLSVolumeMPCProperty' has a wrong offset!");
//static_assert(offsetof(ACLSLightManager, OriginalCLSVolumeMPCProperty) == 0x000390, "Member 'ACLSLightManager::OriginalCLSVolumeMPCProperty' has a wrong offset!");
//static_assert(offsetof(ACLSLightManager, TargetVolumePercentage) == 0x0003B0, "Member 'ACLSLightManager::TargetVolumePercentage' has a wrong offset!");
//static_assert(offsetof(ACLSLightManager, TickTargetVolumePercentage) == 0x0003B4, "Member 'ACLSLightManager::TickTargetVolumePercentage' has a wrong offset!");
//static_assert(offsetof(ACLSLightManager, bOriginlaVolumeChanged) == 0x0003B8, "Member 'ACLSLightManager::bOriginlaVolumeChanged' has a wrong offset!");

// Class CustomLightSystem.CLSAtmosphericFog
// 0x0010 (0x0288 - 0x0278)
class ACLSAtmosphericFog final : public AActor
{
public:
	class USkyAtmosphereComponent*                AtmosphericFogComponent;                           // 0x0278(0x0008)(Edit, BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, EditConst, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UCLSTagComponent*                       TagComponent;                                      // 0x0280(0x0008)(Edit, BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

public:
	void SetVisibility(bool bNewVisibility);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"CLSAtmosphericFog">();
	}
	static class ACLSAtmosphericFog* GetDefaultObj()
	{
		return GetDefaultObjImpl<ACLSAtmosphericFog>();
	}
};
//static_assert(alignof(ACLSAtmosphericFog) == 0x000008, "Wrong alignment on ACLSAtmosphericFog");
//static_assert(sizeof(ACLSAtmosphericFog) == 0x000288, "Wrong size on ACLSAtmosphericFog");
//static_assert(offsetof(ACLSAtmosphericFog, AtmosphericFogComponent) == 0x000278, "Member 'ACLSAtmosphericFog::AtmosphericFogComponent' has a wrong offset!");
//static_assert(offsetof(ACLSAtmosphericFog, TagComponent) == 0x000280, "Member 'ACLSAtmosphericFog::TagComponent' has a wrong offset!");

// Class CustomLightSystem.CLSBaseVolume
// 0x06E8 (0x0998 - 0x02B0)
class ACLSBaseVolume : public AVolume
{
public:
	struct FCLSVolumeProcessParameters            VolumeProcessParameters;                           // 0x02B0(0x0010)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
	struct FCLSMaterialParametersCollectionProperty MaterialParametersCollectionProperty;              // 0x02C0(0x0020)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
	TWeakObjectPtr<class ACLSBaseVolume>          MasterVolume;                                      // 0x02E0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class ADirectionalLight*                      DirectionalLight;                                  // 0x02E8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class ASkyLight*                              SkyLight;                                          // 0x02F0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class ASkyAtmosphere*                         AtmosphericFog;                                    // 0x02F8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class AExponentialHeightFog*                  ExponentialHeightFog;                              // 0x0300(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FCLSPlayerLightProperty                PlayerLightProperty;                               // 0x0308(0x0054)(Edit, BlueprintVisible, NoDestructor, AdvancedDisplay, NativeAccessSpecifierPublic)
	int32                                         VolumeManagerID;                                   // 0x035C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         LengthOfBuffSpace;                                 // 0x0360(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         SortWeight;                                        // 0x0364(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         SpeedAlpha;                                        // 0x0368(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         PlayerLightSpeedAlpha;                             // 0x036C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bUseCustomBlendOutSpeed;                           // 0x0370(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_371[0x3];                                      // 0x0371(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         CustomBlendOutSpeedAlpha;                          // 0x0374(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Level;                                             // 0x0378(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         DynamicLevel;                                      // 0x037C(0x0004)(Edit, ZeroConstructor, DisableEditOnTemplate, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bUseSceneLight;                                    // 0x0380(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bDisableDirectionalLight;                          // 0x0381(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bDisableSkyLight;                                  // 0x0382(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bDisableAtmospheric;                               // 0x0383(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bDisableHeightFog;                                 // 0x0384(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bForceEnableAnyWhere;                              // 0x0385(0x0001)(Edit, BlueprintVisible, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_386[0x12];                                     // 0x0386(0x0012)(Fixing Size After Last Property [ Dumper-7 ])
	class UDirectionalLightComponent*             DirectionalLightComponent;                         // 0x0398(0x0008)(Edit, ExportObject, ZeroConstructor, EditConst, InstancedReference, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	class USkyLightComponent*                     SkyLightComponent;                                 // 0x03A0(0x0008)(Edit, ExportObject, ZeroConstructor, EditConst, InstancedReference, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	class USkyAtmosphereComponent*                AtmosphereComponent;                               // 0x03A8(0x0008)(Edit, ExportObject, ZeroConstructor, EditConst, InstancedReference, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	class UExponentialHeightFogComponent*         ExponentialHeightFogComponent;                     // 0x03B0(0x0008)(Edit, ExportObject, ZeroConstructor, EditConst, InstancedReference, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	class UCustomVariableComponent*               CustomVariableComponent;                           // 0x03B8(0x0008)(Edit, ExportObject, ZeroConstructor, EditConst, InstancedReference, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	struct FCLSLightData                          CLSLightData;                                      // 0x03C0(0x05D0)(Edit, EditConst, NativeAccessSpecifierPrivate)
	uint8                                         Pad_990[0x1];                                      // 0x0990(0x0001)(Fixing Size After Last Property [ Dumper-7 ])
	bool                                          bInVolume;                                         // 0x0991(0x0001)(Edit, ZeroConstructor, Transient, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         Pad_992[0x2];                                      // 0x0992(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         DistanceToPoint;                                   // 0x0994(0x0004)(Edit, ZeroConstructor, Transient, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)

public:
	void CopyClsData2LightComponents();
	void CopyCLsDataFromMaster();
	void SetDynamicLevel(int32 InDynamicLevel);
	void SetForceEnableAnyWhere(bool bInForceEnableAnyWhere);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"CLSBaseVolume">();
	}
	static class ACLSBaseVolume* GetDefaultObj()
	{
		return GetDefaultObjImpl<ACLSBaseVolume>();
	}
};
//static_assert(alignof(ACLSBaseVolume) == 0x000008, "Wrong alignment on ACLSBaseVolume");
//static_assert(sizeof(ACLSBaseVolume) == 0x000998, "Wrong size on ACLSBaseVolume");
//static_assert(offsetof(ACLSBaseVolume, VolumeProcessParameters) == 0x0002B0, "Member 'ACLSBaseVolume::VolumeProcessParameters' has a wrong offset!");
//static_assert(offsetof(ACLSBaseVolume, MaterialParametersCollectionProperty) == 0x0002C0, "Member 'ACLSBaseVolume::MaterialParametersCollectionProperty' has a wrong offset!");
//static_assert(offsetof(ACLSBaseVolume, MasterVolume) == 0x0002E0, "Member 'ACLSBaseVolume::MasterVolume' has a wrong offset!");
//static_assert(offsetof(ACLSBaseVolume, DirectionalLight) == 0x0002E8, "Member 'ACLSBaseVolume::DirectionalLight' has a wrong offset!");
//static_assert(offsetof(ACLSBaseVolume, SkyLight) == 0x0002F0, "Member 'ACLSBaseVolume::SkyLight' has a wrong offset!");
//static_assert(offsetof(ACLSBaseVolume, AtmosphericFog) == 0x0002F8, "Member 'ACLSBaseVolume::AtmosphericFog' has a wrong offset!");
//static_assert(offsetof(ACLSBaseVolume, ExponentialHeightFog) == 0x000300, "Member 'ACLSBaseVolume::ExponentialHeightFog' has a wrong offset!");
//static_assert(offsetof(ACLSBaseVolume, PlayerLightProperty) == 0x000308, "Member 'ACLSBaseVolume::PlayerLightProperty' has a wrong offset!");
//static_assert(offsetof(ACLSBaseVolume, VolumeManagerID) == 0x00035C, "Member 'ACLSBaseVolume::VolumeManagerID' has a wrong offset!");
//static_assert(offsetof(ACLSBaseVolume, LengthOfBuffSpace) == 0x000360, "Member 'ACLSBaseVolume::LengthOfBuffSpace' has a wrong offset!");
//static_assert(offsetof(ACLSBaseVolume, SortWeight) == 0x000364, "Member 'ACLSBaseVolume::SortWeight' has a wrong offset!");
//static_assert(offsetof(ACLSBaseVolume, SpeedAlpha) == 0x000368, "Member 'ACLSBaseVolume::SpeedAlpha' has a wrong offset!");
//static_assert(offsetof(ACLSBaseVolume, PlayerLightSpeedAlpha) == 0x00036C, "Member 'ACLSBaseVolume::PlayerLightSpeedAlpha' has a wrong offset!");
//static_assert(offsetof(ACLSBaseVolume, bUseCustomBlendOutSpeed) == 0x000370, "Member 'ACLSBaseVolume::bUseCustomBlendOutSpeed' has a wrong offset!");
//static_assert(offsetof(ACLSBaseVolume, CustomBlendOutSpeedAlpha) == 0x000374, "Member 'ACLSBaseVolume::CustomBlendOutSpeedAlpha' has a wrong offset!");
//static_assert(offsetof(ACLSBaseVolume, Level) == 0x000378, "Member 'ACLSBaseVolume::Level' has a wrong offset!");
//static_assert(offsetof(ACLSBaseVolume, DynamicLevel) == 0x00037C, "Member 'ACLSBaseVolume::DynamicLevel' has a wrong offset!");
//static_assert(offsetof(ACLSBaseVolume, bUseSceneLight) == 0x000380, "Member 'ACLSBaseVolume::bUseSceneLight' has a wrong offset!");
//static_assert(offsetof(ACLSBaseVolume, bDisableDirectionalLight) == 0x000381, "Member 'ACLSBaseVolume::bDisableDirectionalLight' has a wrong offset!");
//static_assert(offsetof(ACLSBaseVolume, bDisableSkyLight) == 0x000382, "Member 'ACLSBaseVolume::bDisableSkyLight' has a wrong offset!");
//static_assert(offsetof(ACLSBaseVolume, bDisableAtmospheric) == 0x000383, "Member 'ACLSBaseVolume::bDisableAtmospheric' has a wrong offset!");
//static_assert(offsetof(ACLSBaseVolume, bDisableHeightFog) == 0x000384, "Member 'ACLSBaseVolume::bDisableHeightFog' has a wrong offset!");
//static_assert(offsetof(ACLSBaseVolume, bForceEnableAnyWhere) == 0x000385, "Member 'ACLSBaseVolume::bForceEnableAnyWhere' has a wrong offset!");
//static_assert(offsetof(ACLSBaseVolume, DirectionalLightComponent) == 0x000398, "Member 'ACLSBaseVolume::DirectionalLightComponent' has a wrong offset!");
//static_assert(offsetof(ACLSBaseVolume, SkyLightComponent) == 0x0003A0, "Member 'ACLSBaseVolume::SkyLightComponent' has a wrong offset!");
//static_assert(offsetof(ACLSBaseVolume, AtmosphereComponent) == 0x0003A8, "Member 'ACLSBaseVolume::AtmosphereComponent' has a wrong offset!");
//static_assert(offsetof(ACLSBaseVolume, ExponentialHeightFogComponent) == 0x0003B0, "Member 'ACLSBaseVolume::ExponentialHeightFogComponent' has a wrong offset!");
//static_assert(offsetof(ACLSBaseVolume, CustomVariableComponent) == 0x0003B8, "Member 'ACLSBaseVolume::CustomVariableComponent' has a wrong offset!");
//static_assert(offsetof(ACLSBaseVolume, CLSLightData) == 0x0003C0, "Member 'ACLSBaseVolume::CLSLightData' has a wrong offset!");
//static_assert(offsetof(ACLSBaseVolume, bInVolume) == 0x000991, "Member 'ACLSBaseVolume::bInVolume' has a wrong offset!");
//static_assert(offsetof(ACLSBaseVolume, DistanceToPoint) == 0x000994, "Member 'ACLSBaseVolume::DistanceToPoint' has a wrong offset!");

// Class CustomLightSystem.CLSCommandManager
// 0x0018 (0x0290 - 0x0278)
class ACLSCommandManager final : public AActor
{
public:
	class ACLSLightManager*                       LightManager;                                      // 0x0278(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class ACLSVolumeManager*                      VolumeManager;                                     // 0x0280(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         CommandManagerID;                                  // 0x0288(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_28C[0x4];                                      // 0x028C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	void InitializeCommandManager();
	void InterruptAnotherManager();
	void ReactiveAnotherManager();
	void SafelySwitchLightsAndFogs(class ADirectionalLight* InTargetDirectionalLight, class ASkyLight* InTargetSkyLight, class ASkyAtmosphere* InTargetAtmosphericFog, class AExponentialHeightFog* InTargetExponentialHeightFog, const struct FCLSMaterialParametersCollectionProperty& InTargetCLSVolumeMPCProperty, const struct FCLSMaterialParametersCollectionProperty& InOriginalCLSVolumeMPCProperty, float InTargetVolumePercentage, bool ForceUpdate);
	void SwitchLightsAndFogs(class ADirectionalLight* InTargetDirectionalLight, class ASkyLight* InTargetSkyLight, class ASkyAtmosphere* InTargetAtmosphericFog, class AExponentialHeightFog* InTargetExponentialHeightFog, const struct FCLSMaterialParametersCollectionProperty& InTargetCLSVolumeMPCProperty, const struct FCLSMaterialParametersCollectionProperty& InOriginalCLSVolumeMPCProperty, float InTargetVolumePercentage, bool ForceUpdate);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"CLSCommandManager">();
	}
	static class ACLSCommandManager* GetDefaultObj()
	{
		return GetDefaultObjImpl<ACLSCommandManager>();
	}
};
//static_assert(alignof(ACLSCommandManager) == 0x000008, "Wrong alignment on ACLSCommandManager");
//static_assert(sizeof(ACLSCommandManager) == 0x000290, "Wrong size on ACLSCommandManager");
//static_assert(offsetof(ACLSCommandManager, LightManager) == 0x000278, "Member 'ACLSCommandManager::LightManager' has a wrong offset!");
//static_assert(offsetof(ACLSCommandManager, VolumeManager) == 0x000280, "Member 'ACLSCommandManager::VolumeManager' has a wrong offset!");
//static_assert(offsetof(ACLSCommandManager, CommandManagerID) == 0x000288, "Member 'ACLSCommandManager::CommandManagerID' has a wrong offset!");

// Class CustomLightSystem.CLSDirectionalLight
// 0x0010 (0x0288 - 0x0278)
class ACLSDirectionalLight final : public AActor
{
public:
	class UDirectionalLightComponent*             DirectionalLightComponent;                         // 0x0278(0x0008)(Edit, BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, EditConst, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UCLSTagComponent*                       TagComponent;                                      // 0x0280(0x0008)(Edit, BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

public:
	void SetVisibility(bool bNewVisibility) const;

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"CLSDirectionalLight">();
	}
	static class ACLSDirectionalLight* GetDefaultObj()
	{
		return GetDefaultObjImpl<ACLSDirectionalLight>();
	}
};
//static_assert(alignof(ACLSDirectionalLight) == 0x000008, "Wrong alignment on ACLSDirectionalLight");
//static_assert(sizeof(ACLSDirectionalLight) == 0x000288, "Wrong size on ACLSDirectionalLight");
//static_assert(offsetof(ACLSDirectionalLight, DirectionalLightComponent) == 0x000278, "Member 'ACLSDirectionalLight::DirectionalLightComponent' has a wrong offset!");
//static_assert(offsetof(ACLSDirectionalLight, TagComponent) == 0x000280, "Member 'ACLSDirectionalLight::TagComponent' has a wrong offset!");

// Class CustomLightSystem.CLSExponentialHeightFog
// 0x0010 (0x0288 - 0x0278)
class ACLSExponentialHeightFog final : public AActor
{
public:
	class UExponentialHeightFogComponent*         ExponentialHeightFogComponent;                     // 0x0278(0x0008)(Edit, BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, EditConst, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UCLSTagComponent*                       TagComponent;                                      // 0x0280(0x0008)(Edit, BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

public:
	void SetVisibility(bool bNewVisibility) const;

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"CLSExponentialHeightFog">();
	}
	static class ACLSExponentialHeightFog* GetDefaultObj()
	{
		return GetDefaultObjImpl<ACLSExponentialHeightFog>();
	}
};
//static_assert(alignof(ACLSExponentialHeightFog) == 0x000008, "Wrong alignment on ACLSExponentialHeightFog");
//static_assert(sizeof(ACLSExponentialHeightFog) == 0x000288, "Wrong size on ACLSExponentialHeightFog");
//static_assert(offsetof(ACLSExponentialHeightFog, ExponentialHeightFogComponent) == 0x000278, "Member 'ACLSExponentialHeightFog::ExponentialHeightFogComponent' has a wrong offset!");
//static_assert(offsetof(ACLSExponentialHeightFog, TagComponent) == 0x000280, "Member 'ACLSExponentialHeightFog::TagComponent' has a wrong offset!");

// Class CustomLightSystem.CLSFunctionLibrary
// 0x0000 (0x0028 - 0x0028)
class UCLSFunctionLibrary final : public UBlueprintFunctionLibrary
{
public:
	static class ACLSManager* GetCurrentCLSManager();
	static void OverrideEnvLightBlendInSpeed(bool bOverride, float InBlendInSpeed);
	static void RegisterNeedPointLightControlActor(const class FName& InTag, class AActor* InActor);
	static void UnregisterNeedPointLightControlActor(const class FName& InTag);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"CLSFunctionLibrary">();
	}
	static class UCLSFunctionLibrary* GetDefaultObj()
	{
		return GetDefaultObjImpl<UCLSFunctionLibrary>();
	}
};
//static_assert(alignof(UCLSFunctionLibrary) == 0x000008, "Wrong alignment on UCLSFunctionLibrary");
//static_assert(sizeof(UCLSFunctionLibrary) == 0x000028, "Wrong size on UCLSFunctionLibrary");

// Class CustomLightSystem.CLSManager
// 0x2678 (0x28F0 - 0x0278)
class ACLSManager final : public AActor
{
public:
	bool                                          bEnableManager;                                    // 0x0278(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bEnableDebugLog;                                   // 0x0279(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_27A[0x2];                                      // 0x027A(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         ActorLightAttenuationMaxRange;                     // 0x027C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         ActorLightAttenuationMinRange;                     // 0x0280(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         VolumeManagerID;                                   // 0x0284(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UMaterialParameterCollection*           MPC;                                               // 0x0288(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         MarkDirtyDeltaPercentage;                          // 0x0290(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bEnableSkyLightCapture;                            // 0x0294(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bEnableRayTrace;                                   // 0x0295(0x0001)(Edit, BlueprintVisible, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         RayTraceQuality;                                   // 0x0296(0x0001)(Edit, BlueprintVisible, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_297[0x1];                                      // 0x0297(0x0001)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         PlayerLightAttenuation;                            // 0x0298(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         ActorLightAttenuation;                             // 0x029C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UDirectionalLightComponent*             DirectionalLightComponent;                         // 0x02A0(0x0008)(Edit, ExportObject, ZeroConstructor, EditConst, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	class USkyLightComponent*                     SkyLightComponent;                                 // 0x02A8(0x0008)(Edit, ExportObject, ZeroConstructor, EditConst, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	class USkyAtmosphereComponent*                AtmosphereComponent;                               // 0x02B0(0x0008)(Edit, ExportObject, ZeroConstructor, EditConst, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	class UExponentialHeightFogComponent*         HeightFogComponent;                                // 0x02B8(0x0008)(Edit, ExportObject, ZeroConstructor, EditConst, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	class UCustomVariableComponent*               CustomVariableComponent;                           // 0x02C0(0x0008)(Edit, ExportObject, ZeroConstructor, EditConst, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	TWeakObjectPtr<class ACLSBaseVolume>          CurrentTargetVolume;                               // 0x02C8(0x0008)(Edit, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	class FString                                 CurrentVolume;                                     // 0x02D0(0x0010)(Edit, ZeroConstructor, EditConst, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	struct FCLSDirectionalLightBlendData          DirectionalLightBlendData;                         // 0x02E0(0x0528)(Edit, Transient, EditConst, NativeAccessSpecifierPrivate)
	struct FCLSSkyLightBlendData                  SkyLightBlendData;                                 // 0x0808(0x0408)(Edit, Transient, EditConst, NativeAccessSpecifierPrivate)
	struct FCLSAtmosphereBlendData                AtmosphereBlendData;                               // 0x0C10(0x0258)(Edit, Transient, EditConst, NativeAccessSpecifierPrivate)
	struct FCLSHeightFogBlendData                 HeightFogBlendData;                                // 0x0E68(0x02A0)(Edit, Transient, EditConst, NativeAccessSpecifierPrivate)
	struct FCLSOtherBlendData                     OtherBlendData;                                    // 0x1108(0x11B8)(Edit, Transient, EditConst, NativeAccessSpecifierPrivate)
	struct FCLSCustomBlendData                    CustomVariableBlendData;                           // 0x22C0(0x00F0)(Edit, Transient, EditConst, NativeAccessSpecifierPrivate)
	struct FCLSPointLightBlendData                PlayerLightBlendData;                              // 0x23B0(0x0198)(Edit, Transient, EditConst, NativeAccessSpecifierPrivate)
	uint8                                         Pad_2548[0x50];                                    // 0x2548(0x0050)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                LastFrameViewLocation;                             // 0x2598(0x0018)(Edit, ZeroConstructor, Transient, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	struct FVector                                ViewLocationInEditor;                              // 0x25B0(0x0018)(Edit, ZeroConstructor, Transient, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	struct FVector                                PlayerLocation;                                    // 0x25C8(0x0018)(Edit, ZeroConstructor, Transient, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	float                                         MinSwitchDistanceInEditor;                         // 0x25E0(0x0004)(Edit, ZeroConstructor, Transient, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         Pad_25E4[0x4C];                                    // 0x25E4(0x004C)(Fixing Size After Last Property [ Dumper-7 ])
	class AActor*                                 RTXSettingsActor;                                  // 0x2630(0x0008)(Edit, ZeroConstructor, Transient, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	float                                         UpdateDLightTime;                                  // 0x2638(0x0004)(Edit, ZeroConstructor, Transient, EditConst, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	float                                         UpdateDLightTotalTime;                             // 0x263C(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	int32                                         UpdateRadiusThresholdHandle;                       // 0x2640(0x0004)(ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	float                                         VisualShadowRadiusThreshold;                       // 0x2644(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	struct FCLSWatchData                          WatchData;                                         // 0x2648(0x0290)(Transient, NativeAccessSpecifierPrivate)
	uint8                                         Pad_28D8[0x18];                                    // 0x28D8(0x0018)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static void RemoveAllDynamicLevel();

	void SetActorLightAttenuation(float InActorLightAttenuation);
	void SetEnableManager(bool bInEnableManager);
	void SetPlayerLightAttenuation(float InPlayerLightAttenuation);
	struct FCLSWatchData UpdateAndGetWatchData();

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"CLSManager">();
	}
	static class ACLSManager* GetDefaultObj()
	{
		return GetDefaultObjImpl<ACLSManager>();
	}
};
//static_assert(alignof(ACLSManager) == 0x000008, "Wrong alignment on ACLSManager");
//static_assert(sizeof(ACLSManager) == 0x0028F0, "Wrong size on ACLSManager");
//static_assert(offsetof(ACLSManager, bEnableManager) == 0x000278, "Member 'ACLSManager::bEnableManager' has a wrong offset!");
//static_assert(offsetof(ACLSManager, bEnableDebugLog) == 0x000279, "Member 'ACLSManager::bEnableDebugLog' has a wrong offset!");
//static_assert(offsetof(ACLSManager, ActorLightAttenuationMaxRange) == 0x00027C, "Member 'ACLSManager::ActorLightAttenuationMaxRange' has a wrong offset!");
//static_assert(offsetof(ACLSManager, ActorLightAttenuationMinRange) == 0x000280, "Member 'ACLSManager::ActorLightAttenuationMinRange' has a wrong offset!");
//static_assert(offsetof(ACLSManager, VolumeManagerID) == 0x000284, "Member 'ACLSManager::VolumeManagerID' has a wrong offset!");
//static_assert(offsetof(ACLSManager, MPC) == 0x000288, "Member 'ACLSManager::MPC' has a wrong offset!");
//static_assert(offsetof(ACLSManager, MarkDirtyDeltaPercentage) == 0x000290, "Member 'ACLSManager::MarkDirtyDeltaPercentage' has a wrong offset!");
//static_assert(offsetof(ACLSManager, bEnableSkyLightCapture) == 0x000294, "Member 'ACLSManager::bEnableSkyLightCapture' has a wrong offset!");
//static_assert(offsetof(ACLSManager, bEnableRayTrace) == 0x000295, "Member 'ACLSManager::bEnableRayTrace' has a wrong offset!");
//static_assert(offsetof(ACLSManager, RayTraceQuality) == 0x000296, "Member 'ACLSManager::RayTraceQuality' has a wrong offset!");
//static_assert(offsetof(ACLSManager, PlayerLightAttenuation) == 0x000298, "Member 'ACLSManager::PlayerLightAttenuation' has a wrong offset!");
//static_assert(offsetof(ACLSManager, ActorLightAttenuation) == 0x00029C, "Member 'ACLSManager::ActorLightAttenuation' has a wrong offset!");
//static_assert(offsetof(ACLSManager, DirectionalLightComponent) == 0x0002A0, "Member 'ACLSManager::DirectionalLightComponent' has a wrong offset!");
//static_assert(offsetof(ACLSManager, SkyLightComponent) == 0x0002A8, "Member 'ACLSManager::SkyLightComponent' has a wrong offset!");
//static_assert(offsetof(ACLSManager, AtmosphereComponent) == 0x0002B0, "Member 'ACLSManager::AtmosphereComponent' has a wrong offset!");
//static_assert(offsetof(ACLSManager, HeightFogComponent) == 0x0002B8, "Member 'ACLSManager::HeightFogComponent' has a wrong offset!");
//static_assert(offsetof(ACLSManager, CustomVariableComponent) == 0x0002C0, "Member 'ACLSManager::CustomVariableComponent' has a wrong offset!");
//static_assert(offsetof(ACLSManager, CurrentTargetVolume) == 0x0002C8, "Member 'ACLSManager::CurrentTargetVolume' has a wrong offset!");
//static_assert(offsetof(ACLSManager, CurrentVolume) == 0x0002D0, "Member 'ACLSManager::CurrentVolume' has a wrong offset!");
//static_assert(offsetof(ACLSManager, DirectionalLightBlendData) == 0x0002E0, "Member 'ACLSManager::DirectionalLightBlendData' has a wrong offset!");
//static_assert(offsetof(ACLSManager, SkyLightBlendData) == 0x000808, "Member 'ACLSManager::SkyLightBlendData' has a wrong offset!");
//static_assert(offsetof(ACLSManager, AtmosphereBlendData) == 0x000C10, "Member 'ACLSManager::AtmosphereBlendData' has a wrong offset!");
//static_assert(offsetof(ACLSManager, HeightFogBlendData) == 0x000E68, "Member 'ACLSManager::HeightFogBlendData' has a wrong offset!");
//static_assert(offsetof(ACLSManager, OtherBlendData) == 0x001108, "Member 'ACLSManager::OtherBlendData' has a wrong offset!");
//static_assert(offsetof(ACLSManager, CustomVariableBlendData) == 0x0022C0, "Member 'ACLSManager::CustomVariableBlendData' has a wrong offset!");
//static_assert(offsetof(ACLSManager, PlayerLightBlendData) == 0x0023B0, "Member 'ACLSManager::PlayerLightBlendData' has a wrong offset!");
//static_assert(offsetof(ACLSManager, LastFrameViewLocation) == 0x002598, "Member 'ACLSManager::LastFrameViewLocation' has a wrong offset!");
//static_assert(offsetof(ACLSManager, ViewLocationInEditor) == 0x0025B0, "Member 'ACLSManager::ViewLocationInEditor' has a wrong offset!");
//static_assert(offsetof(ACLSManager, PlayerLocation) == 0x0025C8, "Member 'ACLSManager::PlayerLocation' has a wrong offset!");
//static_assert(offsetof(ACLSManager, MinSwitchDistanceInEditor) == 0x0025E0, "Member 'ACLSManager::MinSwitchDistanceInEditor' has a wrong offset!");
//static_assert(offsetof(ACLSManager, RTXSettingsActor) == 0x002630, "Member 'ACLSManager::RTXSettingsActor' has a wrong offset!");
//static_assert(offsetof(ACLSManager, UpdateDLightTime) == 0x002638, "Member 'ACLSManager::UpdateDLightTime' has a wrong offset!");
//static_assert(offsetof(ACLSManager, UpdateDLightTotalTime) == 0x00263C, "Member 'ACLSManager::UpdateDLightTotalTime' has a wrong offset!");
//static_assert(offsetof(ACLSManager, UpdateRadiusThresholdHandle) == 0x002640, "Member 'ACLSManager::UpdateRadiusThresholdHandle' has a wrong offset!");
//static_assert(offsetof(ACLSManager, VisualShadowRadiusThreshold) == 0x002644, "Member 'ACLSManager::VisualShadowRadiusThreshold' has a wrong offset!");
//static_assert(offsetof(ACLSManager, WatchData) == 0x002648, "Member 'ACLSManager::WatchData' has a wrong offset!");

// Class CustomLightSystem.CLSPostVolume
// 0x07C8 (0x1160 - 0x0998)
class ACLSPostVolume : public ACLSBaseVolume
{
public:
	uint8                                         Pad_998[0x8];                                      // 0x0998(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	struct FPostProcessSettings                   Settings;                                          // 0x09A0(0x07B0)(Edit, BlueprintVisible, Interp, NativeAccessSpecifierPublic)
	float                                         PostProcessPriority;                               // 0x1150(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         PostProcessBlendRadius;                            // 0x1154(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         PostProcessBlendWeight;                            // 0x1158(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bPostProcessEnabled;                               // 0x115C(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_115D[0x3];                                     // 0x115D(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	void AddOrUpdateBlendable(TScriptInterface<class IBlendableInterface> InBlendableObject, float InWeight);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"CLSPostVolume">();
	}
	static class ACLSPostVolume* GetDefaultObj()
	{
		return GetDefaultObjImpl<ACLSPostVolume>();
	}
};
//static_assert(alignof(ACLSPostVolume) == 0x000010, "Wrong alignment on ACLSPostVolume");
//static_assert(sizeof(ACLSPostVolume) == 0x001160, "Wrong size on ACLSPostVolume");
//static_assert(offsetof(ACLSPostVolume, Settings) == 0x0009A0, "Member 'ACLSPostVolume::Settings' has a wrong offset!");
//static_assert(offsetof(ACLSPostVolume, PostProcessPriority) == 0x001150, "Member 'ACLSPostVolume::PostProcessPriority' has a wrong offset!");
//static_assert(offsetof(ACLSPostVolume, PostProcessBlendRadius) == 0x001154, "Member 'ACLSPostVolume::PostProcessBlendRadius' has a wrong offset!");
//static_assert(offsetof(ACLSPostVolume, PostProcessBlendWeight) == 0x001158, "Member 'ACLSPostVolume::PostProcessBlendWeight' has a wrong offset!");
//static_assert(offsetof(ACLSPostVolume, bPostProcessEnabled) == 0x00115C, "Member 'ACLSPostVolume::bPostProcessEnabled' has a wrong offset!");

// Class CustomLightSystem.CLSSettings
// 0x0018 (0x0050 - 0x0038)
class UCLSSettings final : public UDeveloperSettings
{
public:
	bool                                          bEnableRTX;                                        // 0x0038(0x0001)(Edit, ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_39[0x7];                                       // 0x0039(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TSubclassOf<class AActor>                     RTXActorClass;                                     // 0x0040(0x0008)(Edit, ZeroConstructor, Config, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bChangeVisualShadowRadiusWhenDLightRotate;         // 0x0048(0x0001)(Edit, ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_49[0x7];                                       // 0x0049(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"CLSSettings">();
	}
	static class UCLSSettings* GetDefaultObj()
	{
		return GetDefaultObjImpl<UCLSSettings>();
	}
};
//static_assert(alignof(UCLSSettings) == 0x000008, "Wrong alignment on UCLSSettings");
//static_assert(sizeof(UCLSSettings) == 0x000050, "Wrong size on UCLSSettings");
//static_assert(offsetof(UCLSSettings, bEnableRTX) == 0x000038, "Member 'UCLSSettings::bEnableRTX' has a wrong offset!");
//static_assert(offsetof(UCLSSettings, RTXActorClass) == 0x000040, "Member 'UCLSSettings::RTXActorClass' has a wrong offset!");
//static_assert(offsetof(UCLSSettings, bChangeVisualShadowRadiusWhenDLightRotate) == 0x000048, "Member 'UCLSSettings::bChangeVisualShadowRadiusWhenDLightRotate' has a wrong offset!");

// Class CustomLightSystem.RTXSettings
// 0x0000 (0x0028 - 0x0028)
class IRTXSettings final : public IInterface
{
public:
	uint8 GetRTXQuality();
	bool IsDLSSRREnabled();
	bool IsRTXEnabled();
	void SetDlssRREnable(bool bEnable);
	void SetRTXEnabled(bool bInEnable);
	void SetRTXQuality(uint8 Quality);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"RTXSettings">();
	}
	static class IRTXSettings* GetDefaultObj()
	{
		return GetDefaultObjImpl<IRTXSettings>();
	}
};
//static_assert(alignof(IRTXSettings) == 0x000008, "Wrong alignment on IRTXSettings");
//static_assert(sizeof(IRTXSettings) == 0x000028, "Wrong size on IRTXSettings");

// Class CustomLightSystem.CLSSkyLight
// 0x0010 (0x0288 - 0x0278)
class ACLSSkyLight final : public AActor
{
public:
	class USkyLightComponent*                     SkyLightComponent;                                 // 0x0278(0x0008)(Edit, BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, EditConst, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UCLSTagComponent*                       TagComponent;                                      // 0x0280(0x0008)(Edit, BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

public:
	void SetVisibility(bool bNewVisibility) const;

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"CLSSkyLight">();
	}
	static class ACLSSkyLight* GetDefaultObj()
	{
		return GetDefaultObjImpl<ACLSSkyLight>();
	}
};
//static_assert(alignof(ACLSSkyLight) == 0x000008, "Wrong alignment on ACLSSkyLight");
//static_assert(sizeof(ACLSSkyLight) == 0x000288, "Wrong size on ACLSSkyLight");
//static_assert(offsetof(ACLSSkyLight, SkyLightComponent) == 0x000278, "Member 'ACLSSkyLight::SkyLightComponent' has a wrong offset!");
//static_assert(offsetof(ACLSSkyLight, TagComponent) == 0x000280, "Member 'ACLSSkyLight::TagComponent' has a wrong offset!");

// Class CustomLightSystem.CLSSplinePrismVolume
// 0x0010 (0x1170 - 0x1160)
class ACLSSplinePrismVolume final : public ACLSPostVolume
{
public:
	class USplineComponent*                       Spline;                                            // 0x1160(0x0008)(Edit, BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, EditConst, InstancedReference, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Height;                                            // 0x1168(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_116C[0x4];                                     // 0x116C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"CLSSplinePrismVolume">();
	}
	static class ACLSSplinePrismVolume* GetDefaultObj()
	{
		return GetDefaultObjImpl<ACLSSplinePrismVolume>();
	}
};
//static_assert(alignof(ACLSSplinePrismVolume) == 0x000010, "Wrong alignment on ACLSSplinePrismVolume");
//static_assert(sizeof(ACLSSplinePrismVolume) == 0x001170, "Wrong size on ACLSSplinePrismVolume");
//static_assert(offsetof(ACLSSplinePrismVolume, Spline) == 0x001160, "Member 'ACLSSplinePrismVolume::Spline' has a wrong offset!");
//static_assert(offsetof(ACLSSplinePrismVolume, Height) == 0x001168, "Member 'ACLSSplinePrismVolume::Height' has a wrong offset!");

// Class CustomLightSystem.CLSTagComponent
// 0x0020 (0x00D0 - 0x00B0)
class UCLSTagComponent final : public UActorComponent
{
public:
	int32                                         LightManagerID;                                    // 0x00B0(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FCLSTagData                            TagData;                                           // 0x00B4(0x000C)(NoDestructor, NativeAccessSpecifierPublic)
	class ACLSBaseVolume*                         TargetVolume;                                      // 0x00C0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class ACLSLightManager*                       Manager;                                           // 0x00C8(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

public:
	void InitializeManager();

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"CLSTagComponent">();
	}
	static class UCLSTagComponent* GetDefaultObj()
	{
		return GetDefaultObjImpl<UCLSTagComponent>();
	}
};
//static_assert(alignof(UCLSTagComponent) == 0x000008, "Wrong alignment on UCLSTagComponent");
//static_assert(sizeof(UCLSTagComponent) == 0x0000D0, "Wrong size on UCLSTagComponent");
//static_assert(offsetof(UCLSTagComponent, LightManagerID) == 0x0000B0, "Member 'UCLSTagComponent::LightManagerID' has a wrong offset!");
//static_assert(offsetof(UCLSTagComponent, TagData) == 0x0000B4, "Member 'UCLSTagComponent::TagData' has a wrong offset!");
//static_assert(offsetof(UCLSTagComponent, TargetVolume) == 0x0000C0, "Member 'UCLSTagComponent::TargetVolume' has a wrong offset!");
//static_assert(offsetof(UCLSTagComponent, Manager) == 0x0000C8, "Member 'UCLSTagComponent::Manager' has a wrong offset!");

// Class CustomLightSystem.CLSVolumeManager
// 0x0160 (0x03D8 - 0x0278)
class ACLSVolumeManager final : public AActor
{
public:
	TArray<class ACLSBaseVolume*>                 Volumes;                                           // 0x0278(0x0010)(ZeroConstructor, Transient, NativeAccessSpecifierPublic)
	class ACLSLightManager*                       LightManager;                                      // 0x0288(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         VolumeManagerID;                                   // 0x0290(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bIsSwitchActive;                                   // 0x0294(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bIsCheckWARP;                                      // 0x0295(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_296[0x2];                                      // 0x0296(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         WARPDistance;                                      // 0x0298(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bIsDebug;                                          // 0x029C(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bIsForcePPV;                                       // 0x029D(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_29E[0x2];                                      // 0x029E(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	class ADirectionalLight*                      ValidDirectionalLight;                             // 0x02A0(0x0008)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class ASkyLight*                              ValidSkyLight;                                     // 0x02A8(0x0008)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class ASkyAtmosphere*                         ValidAtmosphericFog;                               // 0x02B0(0x0008)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class AExponentialHeightFog*                  ValidExponentialHeightFog;                         // 0x02B8(0x0008)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class ACLSBaseVolume*                         ValidCLSBaseVolume;                                // 0x02C0(0x0008)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2C8[0x8];                                      // 0x02C8(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	class ACLSBaseVolume*                         OriginalValidCLSBaseVolume;                        // 0x02D0(0x0008)(ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2D8[0x60];                                     // 0x02D8(0x0060)(Fixing Size After Last Property [ Dumper-7 ])
	class ACLSBaseVolume*                         TemplateValidCLSBaseVolume;                        // 0x0338(0x0008)(ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class ACLSBaseVolume*                         TargetValidCLSBaseVolume;                          // 0x0340(0x0008)(ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_348[0x20];                                     // 0x0348(0x0020)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                TargetPlayerLocation;                              // 0x0368(0x0018)(ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bForceUpdateVolume;                                // 0x0380(0x0001)(ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_381[0x7];                                      // 0x0381(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                LastLocation;                                      // 0x0388(0x0018)(ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         DeltaWARPDistance;                                 // 0x03A0(0x0004)(ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_3A4[0x34];                                     // 0x03A4(0x0034)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	TArray<class ACLSBaseVolume*> CheckOverlapVolumes(const struct FVector& Position);
	bool CheckReforenceVolumeListValid();
	bool CheckValidByWeight(const struct FVector& Position);
	void ForceDortPPV(const struct FVector& ViewLocation);
	TMap<class ACLSBaseVolume*, float> GetValidVolumeByWeight(const struct FVector& Position);
	void InitializeVolumes(class ACLSBaseVolume* InVolume);
	void SetLightManagerActive(bool NewActive);
	void SwitchToValidLightAndFog(const struct FVector& Position);
	void UpdateProperty();
	void UpdateVolume(const struct FVector& Position);

	void RunVolumeProcessParameterCommand(const class FString& TargetParameter) const;
	void SwitchVolumeProcessParameters(class ACLSBaseVolume* TargetVolume) const;

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"CLSVolumeManager">();
	}
	static class ACLSVolumeManager* GetDefaultObj()
	{
		return GetDefaultObjImpl<ACLSVolumeManager>();
	}
};
//static_assert(alignof(ACLSVolumeManager) == 0x000008, "Wrong alignment on ACLSVolumeManager");
//static_assert(sizeof(ACLSVolumeManager) == 0x0003D8, "Wrong size on ACLSVolumeManager");
//static_assert(offsetof(ACLSVolumeManager, Volumes) == 0x000278, "Member 'ACLSVolumeManager::Volumes' has a wrong offset!");
//static_assert(offsetof(ACLSVolumeManager, LightManager) == 0x000288, "Member 'ACLSVolumeManager::LightManager' has a wrong offset!");
//static_assert(offsetof(ACLSVolumeManager, VolumeManagerID) == 0x000290, "Member 'ACLSVolumeManager::VolumeManagerID' has a wrong offset!");
//static_assert(offsetof(ACLSVolumeManager, bIsSwitchActive) == 0x000294, "Member 'ACLSVolumeManager::bIsSwitchActive' has a wrong offset!");
//static_assert(offsetof(ACLSVolumeManager, bIsCheckWARP) == 0x000295, "Member 'ACLSVolumeManager::bIsCheckWARP' has a wrong offset!");
//static_assert(offsetof(ACLSVolumeManager, WARPDistance) == 0x000298, "Member 'ACLSVolumeManager::WARPDistance' has a wrong offset!");
//static_assert(offsetof(ACLSVolumeManager, bIsDebug) == 0x00029C, "Member 'ACLSVolumeManager::bIsDebug' has a wrong offset!");
//static_assert(offsetof(ACLSVolumeManager, bIsForcePPV) == 0x00029D, "Member 'ACLSVolumeManager::bIsForcePPV' has a wrong offset!");
//static_assert(offsetof(ACLSVolumeManager, ValidDirectionalLight) == 0x0002A0, "Member 'ACLSVolumeManager::ValidDirectionalLight' has a wrong offset!");
//static_assert(offsetof(ACLSVolumeManager, ValidSkyLight) == 0x0002A8, "Member 'ACLSVolumeManager::ValidSkyLight' has a wrong offset!");
//static_assert(offsetof(ACLSVolumeManager, ValidAtmosphericFog) == 0x0002B0, "Member 'ACLSVolumeManager::ValidAtmosphericFog' has a wrong offset!");
//static_assert(offsetof(ACLSVolumeManager, ValidExponentialHeightFog) == 0x0002B8, "Member 'ACLSVolumeManager::ValidExponentialHeightFog' has a wrong offset!");
//static_assert(offsetof(ACLSVolumeManager, ValidCLSBaseVolume) == 0x0002C0, "Member 'ACLSVolumeManager::ValidCLSBaseVolume' has a wrong offset!");
//static_assert(offsetof(ACLSVolumeManager, OriginalValidCLSBaseVolume) == 0x0002D0, "Member 'ACLSVolumeManager::OriginalValidCLSBaseVolume' has a wrong offset!");
//static_assert(offsetof(ACLSVolumeManager, TemplateValidCLSBaseVolume) == 0x000338, "Member 'ACLSVolumeManager::TemplateValidCLSBaseVolume' has a wrong offset!");
//static_assert(offsetof(ACLSVolumeManager, TargetValidCLSBaseVolume) == 0x000340, "Member 'ACLSVolumeManager::TargetValidCLSBaseVolume' has a wrong offset!");
//static_assert(offsetof(ACLSVolumeManager, TargetPlayerLocation) == 0x000368, "Member 'ACLSVolumeManager::TargetPlayerLocation' has a wrong offset!");
//static_assert(offsetof(ACLSVolumeManager, bForceUpdateVolume) == 0x000380, "Member 'ACLSVolumeManager::bForceUpdateVolume' has a wrong offset!");
//static_assert(offsetof(ACLSVolumeManager, LastLocation) == 0x000388, "Member 'ACLSVolumeManager::LastLocation' has a wrong offset!");
//static_assert(offsetof(ACLSVolumeManager, DeltaWARPDistance) == 0x0003A0, "Member 'ACLSVolumeManager::DeltaWARPDistance' has a wrong offset!");

// Class CustomLightSystem.CustomVariableComponent
// 0x00D0 (0x0380 - 0x02B0)
class UCustomVariableComponent final : public USceneComponent
{
public:
	EWaterReflectionMode                          WaterReflectionMode;                               // 0x02B0(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2B1[0x3];                                      // 0x02B1(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         GIIntensityScale;                                  // 0x02B4(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         GISpecularFactor;                                  // 0x02B8(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         GIShadowIntensityScale;                            // 0x02BC(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         ReflectionDiffuseBoost;                            // 0x02C0(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         GISkyLightIntensity;                               // 0x02C4(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         GISkyLightIndirectIntensity;                       // 0x02C8(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         SkylightIntensityMultiplier;                       // 0x02CC(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         HZBTraversalRelativeDepthThickness;                // 0x02D0(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         LumenHZBTraversalOverride;                         // 0x02D4(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2D8[0xA8];                                     // 0x02D8(0x00A8)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"CustomVariableComponent">();
	}
	static class UCustomVariableComponent* GetDefaultObj()
	{
		return GetDefaultObjImpl<UCustomVariableComponent>();
	}
};
//static_assert(alignof(UCustomVariableComponent) == 0x000010, "Wrong alignment on UCustomVariableComponent");
//static_assert(sizeof(UCustomVariableComponent) == 0x000380, "Wrong size on UCustomVariableComponent");
//static_assert(offsetof(UCustomVariableComponent, WaterReflectionMode) == 0x0002B0, "Member 'UCustomVariableComponent::WaterReflectionMode' has a wrong offset!");
//static_assert(offsetof(UCustomVariableComponent, GIIntensityScale) == 0x0002B4, "Member 'UCustomVariableComponent::GIIntensityScale' has a wrong offset!");
//static_assert(offsetof(UCustomVariableComponent, GISpecularFactor) == 0x0002B8, "Member 'UCustomVariableComponent::GISpecularFactor' has a wrong offset!");
//static_assert(offsetof(UCustomVariableComponent, GIShadowIntensityScale) == 0x0002BC, "Member 'UCustomVariableComponent::GIShadowIntensityScale' has a wrong offset!");
//static_assert(offsetof(UCustomVariableComponent, ReflectionDiffuseBoost) == 0x0002C0, "Member 'UCustomVariableComponent::ReflectionDiffuseBoost' has a wrong offset!");
//static_assert(offsetof(UCustomVariableComponent, GISkyLightIntensity) == 0x0002C4, "Member 'UCustomVariableComponent::GISkyLightIntensity' has a wrong offset!");
//static_assert(offsetof(UCustomVariableComponent, GISkyLightIndirectIntensity) == 0x0002C8, "Member 'UCustomVariableComponent::GISkyLightIndirectIntensity' has a wrong offset!");
//static_assert(offsetof(UCustomVariableComponent, SkylightIntensityMultiplier) == 0x0002CC, "Member 'UCustomVariableComponent::SkylightIntensityMultiplier' has a wrong offset!");
//static_assert(offsetof(UCustomVariableComponent, HZBTraversalRelativeDepthThickness) == 0x0002D0, "Member 'UCustomVariableComponent::HZBTraversalRelativeDepthThickness' has a wrong offset!");
//static_assert(offsetof(UCustomVariableComponent, LumenHZBTraversalOverride) == 0x0002D4, "Member 'UCustomVariableComponent::LumenHZBTraversalOverride' has a wrong offset!");

// Class CustomLightSystem.CVarVolume
// 0x0070 (0x0320 - 0x02B0)
class ACVarVolume final : public AVolume
{
public:
	TMap<class FString, float>                    CVarFloats;                                        // 0x02B0(0x0050)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
	int32                                         Priority;                                          // 0x0300(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bEnableOnlyInRaytracing;                           // 0x0304(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_305[0x3];                                      // 0x0305(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         EnableOnlyBelowQualityLevel;                       // 0x0308(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          RuntimeTick;                                       // 0x030C(0x0001)(ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	bool                                          IsActive;                                          // 0x030D(0x0001)(ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         Pad_30E[0x2];                                      // 0x030E(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<int32>                                 HandlesCache;                                      // 0x0310(0x0010)(ZeroConstructor, Transient, NativeAccessSpecifierPrivate)

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"CVarVolume">();
	}
	static class ACVarVolume* GetDefaultObj()
	{
		return GetDefaultObjImpl<ACVarVolume>();
	}
};
//static_assert(alignof(ACVarVolume) == 0x000008, "Wrong alignment on ACVarVolume");
//static_assert(sizeof(ACVarVolume) == 0x000320, "Wrong size on ACVarVolume");
//static_assert(offsetof(ACVarVolume, CVarFloats) == 0x0002B0, "Member 'ACVarVolume::CVarFloats' has a wrong offset!");
//static_assert(offsetof(ACVarVolume, Priority) == 0x000300, "Member 'ACVarVolume::Priority' has a wrong offset!");
//static_assert(offsetof(ACVarVolume, bEnableOnlyInRaytracing) == 0x000304, "Member 'ACVarVolume::bEnableOnlyInRaytracing' has a wrong offset!");
//static_assert(offsetof(ACVarVolume, EnableOnlyBelowQualityLevel) == 0x000308, "Member 'ACVarVolume::EnableOnlyBelowQualityLevel' has a wrong offset!");
//static_assert(offsetof(ACVarVolume, RuntimeTick) == 0x00030C, "Member 'ACVarVolume::RuntimeTick' has a wrong offset!");
//static_assert(offsetof(ACVarVolume, IsActive) == 0x00030D, "Member 'ACVarVolume::IsActive' has a wrong offset!");
//static_assert(offsetof(ACVarVolume, HandlesCache) == 0x000310, "Member 'ACVarVolume::HandlesCache' has a wrong offset!");

}

