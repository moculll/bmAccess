#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: b1MinusManaged

#include "Basic.hpp"

#include "b1MinusManaged_classes.hpp"
#include "b1MinusManaged_parameters.hpp"


namespace SDK
{

// Function b1-Managed.DispLib_EditorTestFXToolComp.TickComponentInCS
// (Native, Event, Public, BlueprintEvent)
// Parameters:
// float                                   DeltaTime                                              (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UDispLib_EditorTestFXToolComp::TickComponentInCS(float DeltaTime)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("DispLib_EditorTestFXToolComp", "TickComponentInCS");

	Params::DispLib_EditorTestFXToolComp_TickComponentInCS Parms{};

	Parms.DeltaTime = DeltaTime;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function b1-Managed.DispLib_EditorTestFXToolComp.BeginPlayInCS
// (Native, Event, Public, BlueprintEvent)

void UDispLib_EditorTestFXToolComp::BeginPlayInCS()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("DispLib_EditorTestFXToolComp", "BeginPlayInCS");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function b1-Managed.DispLib_EditorTestFXToolComp.EndPlayInCS
// (Native, Event, Public, BlueprintEvent)
// Parameters:
// EEndPlayReason                          EndPlayReason                                          (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UDispLib_EditorTestFXToolComp::EndPlayInCS(EEndPlayReason EndPlayReason)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("DispLib_EditorTestFXToolComp", "EndPlayInCS");

	Params::DispLib_EditorTestFXToolComp_EndPlayInCS Parms{};

	Parms.EndPlayReason = EndPlayReason;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function b1-Managed.DispLib_EditorTestFXToolComp.ForceCleanAllNiagaraComp
// (Native, Public, BlueprintCallable)

void UDispLib_EditorTestFXToolComp::ForceCleanAllNiagaraComp()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("DispLib_EditorTestFXToolComp", "ForceCleanAllNiagaraComp");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function b1-Managed.BANS_GSBase.GSNotifyDebugPostBeginCS
// (Native, Event, Public, Protected, HasOutParams, BlueprintEvent, Const)
// Parameters:
// struct FUStGSNotifyParam                NotifyParam                                            (Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
// int32                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

int32 UBANS_GSBase::GSNotifyDebugPostBeginCS(const struct FUStGSNotifyParam& NotifyParam) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BANS_GSBase", "GSNotifyDebugPostBeginCS");

	Params::BANS_GSBase_GSNotifyDebugPostBeginCS Parms{};

	Parms.NotifyParam = std::move(NotifyParam);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function b1-Managed.BANS_GSBase.GSNotifyDebugPostTickCS
// (Native, Event, Public, Protected, HasOutParams, BlueprintEvent, Const)
// Parameters:
// struct FUStGSNotifyParam                NotifyParam                                            (Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
// int32                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

int32 UBANS_GSBase::GSNotifyDebugPostTickCS(const struct FUStGSNotifyParam& NotifyParam) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BANS_GSBase", "GSNotifyDebugPostTickCS");

	Params::BANS_GSBase_GSNotifyDebugPostTickCS Parms{};

	Parms.NotifyParam = std::move(NotifyParam);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function b1-Managed.BANS_GSBase.GSNotifyDebugPreBeginCS
// (Native, Event, Public, Protected, HasOutParams, BlueprintEvent, Const)
// Parameters:
// struct FUStGSNotifyParam                NotifyParam                                            (Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
// int32                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

int32 UBANS_GSBase::GSNotifyDebugPreBeginCS(const struct FUStGSNotifyParam& NotifyParam) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BANS_GSBase", "GSNotifyDebugPreBeginCS");

	Params::BANS_GSBase_GSNotifyDebugPreBeginCS Parms{};

	Parms.NotifyParam = std::move(NotifyParam);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function b1-Managed.BANS_GSBase.GSNotifyDebugPreTickCS
// (Native, Event, Public, Protected, HasOutParams, BlueprintEvent, Const)
// Parameters:
// struct FUStGSNotifyParam                NotifyParam                                            (Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
// int32                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

int32 UBANS_GSBase::GSNotifyDebugPreTickCS(const struct FUStGSNotifyParam& NotifyParam) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BANS_GSBase", "GSNotifyDebugPreTickCS");

	Params::BANS_GSBase_GSNotifyDebugPreTickCS Parms{};

	Parms.NotifyParam = std::move(NotifyParam);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function b1-Managed.BANS_GSBase.GSNotifyDebugPostEndCS
// (Native, Event, Public, Protected, HasOutParams, BlueprintEvent, Const)
// Parameters:
// struct FUStGSNotifyParam                NotifyParam                                            (Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
// int32                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

int32 UBANS_GSBase::GSNotifyDebugPostEndCS(const struct FUStGSNotifyParam& NotifyParam) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BANS_GSBase", "GSNotifyDebugPostEndCS");

	Params::BANS_GSBase_GSNotifyDebugPostEndCS Parms{};

	Parms.NotifyParam = std::move(NotifyParam);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function b1-Managed.BANS_GSBase.GSNotifyDebugPreEndCS
// (Native, Event, Public, Protected, HasOutParams, BlueprintEvent, Const)
// Parameters:
// struct FUStGSNotifyParam                NotifyParam                                            (Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
// int32                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

int32 UBANS_GSBase::GSNotifyDebugPreEndCS(const struct FUStGSNotifyParam& NotifyParam) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BANS_GSBase", "GSNotifyDebugPreEndCS");

	Params::BANS_GSBase_GSNotifyDebugPreEndCS Parms{};

	Parms.NotifyParam = std::move(NotifyParam);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function b1-Managed.BANS_GSBase.GetSoftReferences
// (Native, Event, Public, HasOutParams, BlueprintEvent, Const)
// Parameters:
// TArray<struct FSoftObjectPath>          ReturnValue                                            (Parm, OutParm, ReturnParm)

TArray<struct FSoftObjectPath> UBANS_GSBase::GetSoftReferences() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BANS_GSBase", "GetSoftReferences");

	Params::BANS_GSBase_GetSoftReferences Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function b1-Managed.BANS_GSBase.GSValidateInputCS
// (Native, Event, Public, BlueprintEvent, Const)
// Parameters:
// class AActor*                           Actor                                                  (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UBANS_GSBase::GSValidateInputCS(class AActor* Actor) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BANS_GSBase", "GSValidateInputCS");

	Params::BANS_GSBase_GSValidateInputCS Parms{};

	Parms.Actor = Actor;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function b1-Managed.BANS_GSTimedPlayNiagaraFX.GetSoftReferences
// (Native, Event, Public, HasOutParams, BlueprintEvent, Const)
// Parameters:
// TArray<struct FSoftObjectPath>          ReturnValue                                            (Parm, OutParm, ReturnParm)

TArray<struct FSoftObjectPath> UBANS_GSTimedPlayNiagaraFX::GetSoftReferences() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BANS_GSTimedPlayNiagaraFX", "GetSoftReferences");

	Params::BANS_GSTimedPlayNiagaraFX_GetSoftReferences Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function b1-Managed.BANS_GSTimedPlayNiagaraFX.GSNotifyBeginCS
// (Native, Event, Public, Protected, BlueprintEvent, Const)
// Parameters:
// struct FUStGSNotifyParam                NotifyParam                                            (Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
// float                                   TotalDuration                                          (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UBANS_GSTimedPlayNiagaraFX::GSNotifyBeginCS(const struct FUStGSNotifyParam& NotifyParam, float TotalDuration) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BANS_GSTimedPlayNiagaraFX", "GSNotifyBeginCS");

	Params::BANS_GSTimedPlayNiagaraFX_GSNotifyBeginCS Parms{};

	Parms.NotifyParam = std::move(NotifyParam);
	Parms.TotalDuration = TotalDuration;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function b1-Managed.BANS_GSTimedPlayNiagaraFX.GSNotifyEndCS
// (Native, Event, Public, Protected, BlueprintEvent, Const)
// Parameters:
// struct FUStGSNotifyParam                NotifyParam                                            (Parm, ZeroConstructor, IsPlainOldData, NoDestructor)

void UBANS_GSTimedPlayNiagaraFX::GSNotifyEndCS(const struct FUStGSNotifyParam& NotifyParam) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BANS_GSTimedPlayNiagaraFX", "GSNotifyEndCS");

	Params::BANS_GSTimedPlayNiagaraFX_GSNotifyEndCS Parms{};

	Parms.NotifyParam = std::move(NotifyParam);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function b1-Managed.BANS_GSTimedPlayNiagaraFX_WithCondition.GSNotifyBeginCS
// (Native, Event, Public, Protected, BlueprintEvent, Const)
// Parameters:
// struct FUStGSNotifyParam                NotifyParam                                            (Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
// float                                   TotalDuration                                          (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UBANS_GSTimedPlayNiagaraFX_WithCondition::GSNotifyBeginCS(const struct FUStGSNotifyParam& NotifyParam, float TotalDuration) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BANS_GSTimedPlayNiagaraFX_WithCondition", "GSNotifyBeginCS");

	Params::BANS_GSTimedPlayNiagaraFX_WithCondition_GSNotifyBeginCS Parms{};

	Parms.NotifyParam = std::move(NotifyParam);
	Parms.TotalDuration = TotalDuration;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function b1-Managed.BANS_GSTimedPlayNiagaraFX_WithCondition.GSNotifyEndCS
// (Native, Event, Public, Protected, BlueprintEvent, Const)
// Parameters:
// struct FUStGSNotifyParam                NotifyParam                                            (Parm, ZeroConstructor, IsPlainOldData, NoDestructor)

void UBANS_GSTimedPlayNiagaraFX_WithCondition::GSNotifyEndCS(const struct FUStGSNotifyParam& NotifyParam) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BANS_GSTimedPlayNiagaraFX_WithCondition", "GSNotifyEndCS");

	Params::BANS_GSTimedPlayNiagaraFX_WithCondition_GSNotifyEndCS Parms{};

	Parms.NotifyParam = std::move(NotifyParam);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function b1-Managed.DispLib_EditorTreeLODTools.RepleaceOriginMeshAssetToCustomMeshAsset
// (Native, Public, BlueprintCallable)

void ADispLib_EditorTreeLODTools::RepleaceOriginMeshAssetToCustomMeshAsset()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("DispLib_EditorTreeLODTools", "RepleaceOriginMeshAssetToCustomMeshAsset");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function b1-Managed.DispLib_EditorTreeLODTools.RepleaceCustomMeshAssetToReduceMesh
// (Native, Public, BlueprintCallable)

void ADispLib_EditorTreeLODTools::RepleaceCustomMeshAssetToReduceMesh()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("DispLib_EditorTreeLODTools", "RepleaceCustomMeshAssetToReduceMesh");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function b1-Managed.DispLib_EditorTreeLODTools.RepleaceCustomMeshAssetToImposter
// (Native, Public, BlueprintCallable)

void ADispLib_EditorTreeLODTools::RepleaceCustomMeshAssetToImposter()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("DispLib_EditorTreeLODTools", "RepleaceCustomMeshAssetToImposter");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function b1-Managed.DispLib_EditorTreeLODTools.ReceiveTick
// (Native, Event, Public, BlueprintEvent)
// Parameters:
// float                                   DeltaSeconds                                           (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ADispLib_EditorTreeLODTools::ReceiveTick(float DeltaSeconds)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("DispLib_EditorTreeLODTools", "ReceiveTick");

	Params::DispLib_EditorTreeLODTools_ReceiveTick Parms{};

	Parms.DeltaSeconds = DeltaSeconds;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function b1-Managed.DispLib_EditorTreeLODTools.SetAllTreeActorVisibility
// (Native, Public, BlueprintCallable)
// Parameters:
// uint8                                   Visibility                                             (Parm, NoDestructor, HasGetValueTypeHash)

void ADispLib_EditorTreeLODTools::SetAllTreeActorVisibility(uint8 Visibility)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("DispLib_EditorTreeLODTools", "SetAllTreeActorVisibility");

	Params::DispLib_EditorTreeLODTools_SetAllTreeActorVisibility Parms{};

	Parms.Visibility = Visibility;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function b1-Managed.DispLib_EditorTreeLODTools.ToggleAllTreeActorHide
// (Native, Public, BlueprintCallable)

void ADispLib_EditorTreeLODTools::ToggleAllTreeActorHide()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("DispLib_EditorTreeLODTools", "ToggleAllTreeActorHide");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function b1-Managed.DispLib_EditorTreeLODTools.ConverToInstanceActor
// (Native, Public, BlueprintCallable)

void ADispLib_EditorTreeLODTools::ConverToInstanceActor()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("DispLib_EditorTreeLODTools", "ConverToInstanceActor");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function b1-Managed.DispLib_EditorTreeLODTools.LogLevelTreeInfo
// (Native, Public, BlueprintCallable)

void ADispLib_EditorTreeLODTools::LogLevelTreeInfo()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("DispLib_EditorTreeLODTools", "LogLevelTreeInfo");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function b1-Managed.HelloWorldActor.ReceiveBeginPlay
// (Native, Event, Public, Protected, BlueprintEvent)

void AHelloWorldActor::ReceiveBeginPlay()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("HelloWorldActor", "ReceiveBeginPlay");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function b1-Managed.HelloWorldActor.CallMe
// (Native, Public, BlueprintCallable)

void AHelloWorldActor::CallMe()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("HelloWorldActor", "CallMe");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function b1-Managed.BGUFuncLibInput.OpenAcceptNavigationAction
// (Native, Static, Public, BlueprintCallable)
// Parameters:
// uint8                                   bOpen                                                  (Parm, NoDestructor, HasGetValueTypeHash)

void UBGUFuncLibInput::OpenAcceptNavigationAction(uint8 bOpen)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("BGUFuncLibInput", "OpenAcceptNavigationAction");

	Params::BGUFuncLibInput_OpenAcceptNavigationAction Parms{};

	Parms.bOpen = bOpen;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function b1-Managed.BGUFuncLibInput.SetSuperUserInputMode
// (Native, Static, Public, BlueprintCallable)
// Parameters:
// class UObject*                          WorldContext                                           (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// uint8                                   IsOpen                                                 (Parm, NoDestructor, HasGetValueTypeHash)
// EGSInputModeChangeReason                ChangeReason                                           (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UBGUFuncLibInput::SetSuperUserInputMode(class UObject* WorldContext, uint8 IsOpen, EGSInputModeChangeReason ChangeReason)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("BGUFuncLibInput", "SetSuperUserInputMode");

	Params::BGUFuncLibInput_SetSuperUserInputMode Parms{};

	Parms.WorldContext = WorldContext;
	Parms.IsOpen = IsOpen;
	Parms.ChangeReason = ChangeReason;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function b1-Managed.BGUFuncLibInput.IsGamepadType
// (Native, Static, Public, HasOutParams, BlueprintCallable)
// Parameters:
// uint8                                   ReturnValue                                            (Parm, OutParm, ReturnParm, NoDestructor, HasGetValueTypeHash)

uint8 UBGUFuncLibInput::IsGamepadType()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("BGUFuncLibInput", "IsGamepadType");

	Params::BGUFuncLibInput_IsGamepadType Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function b1-Managed.BED_CalliopeNodeBae.GetBranchGraphToEditInCS
// (Native, Event, Public, HasOutParams, BlueprintEvent)
// Parameters:
// class FString                           OutBranchGraphIdentifier                               (Parm, OutParm, ZeroConstructor, HasGetValueTypeHash)
// uint8                                   ReturnValue                                            (Parm, OutParm, ReturnParm, NoDestructor, HasGetValueTypeHash)

uint8 UBED_CalliopeNodeBae::GetBranchGraphToEditInCS(class FString* OutBranchGraphIdentifier)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BED_CalliopeNodeBae", "GetBranchGraphToEditInCS");

	Params::BED_CalliopeNodeBae_GetBranchGraphToEditInCS Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	if (OutBranchGraphIdentifier != nullptr)
		*OutBranchGraphIdentifier = std::move(Parms.OutBranchGraphIdentifier);

	return Parms.ReturnValue;
}


// Function b1-Managed.BED_CalliopeNodeBae.IsBranchGraphNode
// (Native, Event, Public, HasOutParams, BlueprintEvent, Const)
// Parameters:
// uint8                                   ReturnValue                                            (Parm, OutParm, ReturnParm, NoDestructor, HasGetValueTypeHash)

uint8 UBED_CalliopeNodeBae::IsBranchGraphNode() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BED_CalliopeNodeBae", "IsBranchGraphNode");

	Params::BED_CalliopeNodeBae_IsBranchGraphNode Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function b1-Managed.BED_CalliopeNodeBae.IsSupportViewType
// (Native, Event, Public, HasOutParams, BlueprintEvent, Const)
// Parameters:
// ECalliopeViewType                       InViewType                                             (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// uint8                                   ReturnValue                                            (Parm, OutParm, ReturnParm, NoDestructor, HasGetValueTypeHash)

uint8 UBED_CalliopeNodeBae::IsSupportViewType(const ECalliopeViewType& InViewType) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BED_CalliopeNodeBae", "IsSupportViewType");

	Params::BED_CalliopeNodeBae_IsSupportViewType Parms{};

	Parms.InViewType = InViewType;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function b1-Managed.BED_CalliopeNodeBae.GetGuid
// (Native, Event, Public, HasOutParams, BlueprintEvent, Const)
// Parameters:
// struct FCalliopeGuid                    ReturnValue                                            (Parm, OutParm, ReturnParm, NoDestructor, HasGetValueTypeHash)

struct FCalliopeGuid UBED_CalliopeNodeBae::GetGuid() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BED_CalliopeNodeBae", "GetGuid");

	Params::BED_CalliopeNodeBae_GetGuid Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function b1-Managed.BED_CalliopeNodeBae.GetActorGuidOptions
// (Native, Event, Public, HasOutParams, BlueprintEvent, Const)
// Parameters:
// class FString                           PropertyName                                           (Parm, ZeroConstructor, HasGetValueTypeHash)
// TArray<struct FActorGuidOption>         OutOptions                                             (Parm, OutParm)
// int32                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

int32 UBED_CalliopeNodeBae::GetActorGuidOptions(const class FString& PropertyName, TArray<struct FActorGuidOption>* OutOptions) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BED_CalliopeNodeBae", "GetActorGuidOptions");

	Params::BED_CalliopeNodeBae_GetActorGuidOptions Parms{};

	Parms.PropertyName = std::move(PropertyName);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	if (OutOptions != nullptr)
		*OutOptions = std::move(Parms.OutOptions);

	return Parms.ReturnValue;
}


// Function b1-Managed.BED_CalliopeNodeBae.CanManageStates
// (Native, Event, Public, HasOutParams, BlueprintEvent, Const)
// Parameters:
// uint8                                   ReturnValue                                            (Parm, OutParm, ReturnParm, NoDestructor, HasGetValueTypeHash)

uint8 UBED_CalliopeNodeBae::CanManageStates() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BED_CalliopeNodeBae", "CanManageStates");

	Params::BED_CalliopeNodeBae_CanManageStates Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function b1-Managed.BED_CalliopeNodeBae.GetActorGuid
// (Native, Event, Public, HasOutParams, BlueprintEvent, Const)
// Parameters:
// class AActor*                           InActor                                                (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// class FString                           OutActorGuid                                           (Parm, OutParm, ZeroConstructor, HasGetValueTypeHash)
// uint8                                   ReturnValue                                            (Parm, OutParm, ReturnParm, NoDestructor, HasGetValueTypeHash)

uint8 UBED_CalliopeNodeBae::GetActorGuid(class AActor* InActor, class FString* OutActorGuid) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BED_CalliopeNodeBae", "GetActorGuid");

	Params::BED_CalliopeNodeBae_GetActorGuid Parms{};

	Parms.InActor = InActor;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	if (OutActorGuid != nullptr)
		*OutActorGuid = std::move(Parms.OutActorGuid);

	return Parms.ReturnValue;
}


// Function b1-Managed.BED_MovieNode.IsSupportViewType
// (Native, Event, Public, HasOutParams, BlueprintEvent, Const)
// Parameters:
// ECalliopeViewType                       InViewType                                             (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// uint8                                   ReturnValue                                            (Parm, OutParm, ReturnParm, NoDestructor, HasGetValueTypeHash)

uint8 UBED_MovieNode::IsSupportViewType(const ECalliopeViewType& InViewType) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BED_MovieNode", "IsSupportViewType");

	Params::BED_MovieNode_IsSupportViewType Parms{};

	Parms.InViewType = InViewType;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function b1-Managed.BED_MovieNode_PreRoll.GetNodeDescriptionInCS
// (Native, Event, Public, HasOutParams, BlueprintEvent, Const)
// Parameters:
// class FString                           ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash)

class FString UBED_MovieNode_PreRoll::GetNodeDescriptionInCS() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BED_MovieNode_PreRoll", "GetNodeDescriptionInCS");

	Params::BED_MovieNode_PreRoll_GetNodeDescriptionInCS Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function b1-Managed.QuestOverlapCompFunctionBinder.OnCollisionBeginOverlap
// (Native, Public, Private)
// Parameters:
// class UPrimitiveComponent*              OverlappedComponent                                    (ExportObject, Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// class AActor*                           OtherActor                                             (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// class UPrimitiveComponent*              OtherComp                                              (ExportObject, Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// int32                                   OtherBodyIndex                                         (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// uint8                                   bFromSweep                                             (Parm, NoDestructor, HasGetValueTypeHash)
// struct FHitResult                       SweepResult                                            (Parm, IsPlainOldData, NoDestructor)

void UQuestOverlapCompFunctionBinder::OnCollisionBeginOverlap(class UPrimitiveComponent* OverlappedComponent, class AActor* OtherActor, class UPrimitiveComponent* OtherComp, int32 OtherBodyIndex, uint8 bFromSweep, const struct FHitResult& SweepResult)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("QuestOverlapCompFunctionBinder", "OnCollisionBeginOverlap");

	Params::QuestOverlapCompFunctionBinder_OnCollisionBeginOverlap Parms{};

	Parms.OverlappedComponent = OverlappedComponent;
	Parms.OtherActor = OtherActor;
	Parms.OtherComp = OtherComp;
	Parms.OtherBodyIndex = OtherBodyIndex;
	Parms.bFromSweep = bFromSweep;
	Parms.SweepResult = std::move(SweepResult);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function b1-Managed.QuestOverlapCompFunctionBinder.OnCollisionEndOverlap
// (Native, Public, Private)
// Parameters:
// class UPrimitiveComponent*              OverlappedComponent                                    (ExportObject, Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// class AActor*                           OtherActor                                             (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// class UPrimitiveComponent*              OtherComp                                              (ExportObject, Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// int32                                   OtherBodyIndex                                         (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UQuestOverlapCompFunctionBinder::OnCollisionEndOverlap(class UPrimitiveComponent* OverlappedComponent, class AActor* OtherActor, class UPrimitiveComponent* OtherComp, int32 OtherBodyIndex)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("QuestOverlapCompFunctionBinder", "OnCollisionEndOverlap");

	Params::QuestOverlapCompFunctionBinder_OnCollisionEndOverlap Parms{};

	Parms.OverlappedComponent = OverlappedComponent;
	Parms.OtherActor = OtherActor;
	Parms.OtherComp = OtherComp;
	Parms.OtherBodyIndex = OtherBodyIndex;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function b1-Managed.QuestOverlapCompFunctionBinder.OnActorLeave
// (Native, Public, Private)
// Parameters:
// class AActor*                           OverlappedActor                                        (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// class AActor*                           OtherActor                                             (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UQuestOverlapCompFunctionBinder::OnActorLeave(class AActor* OverlappedActor, class AActor* OtherActor)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("QuestOverlapCompFunctionBinder", "OnActorLeave");

	Params::QuestOverlapCompFunctionBinder_OnActorLeave Parms{};

	Parms.OverlappedActor = OverlappedActor;
	Parms.OtherActor = OtherActor;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function b1-Managed.QuestOverlapCompFunctionBinder.OnActorEnter
// (Native, Public, Private)
// Parameters:
// class AActor*                           OverlappedActor                                        (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// class AActor*                           OtherActor                                             (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UQuestOverlapCompFunctionBinder::OnActorEnter(class AActor* OverlappedActor, class AActor* OtherActor)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("QuestOverlapCompFunctionBinder", "OnActorEnter");

	Params::QuestOverlapCompFunctionBinder_OnActorEnter Parms{};

	Parms.OverlappedActor = OverlappedActor;
	Parms.OtherActor = OtherActor;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function b1-Managed.BGUSimpleActorBaseCS.PostInitializeComponentsCS
// (Native, Event, Public, Protected, BlueprintEvent)

void ABGUSimpleActorBaseCS::PostInitializeComponentsCS()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BGUSimpleActorBaseCS", "PostInitializeComponentsCS");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function b1-Managed.BGUSimpleActorBaseCS.ReceiveDestroyed
// (Native, Event, Public, BlueprintEvent)

void ABGUSimpleActorBaseCS::ReceiveDestroyed()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BGUSimpleActorBaseCS", "ReceiveDestroyed");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function b1-Managed.BGUSimpleActorBaseCS.ReceiveEndPlay
// (Native, Event, Public, Protected, BlueprintEvent)
// Parameters:
// EEndPlayReason                          EndPlayReason                                          (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ABGUSimpleActorBaseCS::ReceiveEndPlay(EEndPlayReason EndPlayReason)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BGUSimpleActorBaseCS", "ReceiveEndPlay");

	Params::BGUSimpleActorBaseCS_ReceiveEndPlay Parms{};

	Parms.EndPlayReason = EndPlayReason;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function b1-Managed.BGUSimpleActorBaseCS.BeginPlayCS
// (Native, Event, Public, Protected, BlueprintEvent)

void ABGUSimpleActorBaseCS::BeginPlayCS()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BGUSimpleActorBaseCS", "BeginPlayCS");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function b1-Managed.BGUActorBaseCS.OnConstructionCS
// (Native, Event, Public, Protected, BlueprintEvent)
// Parameters:
// struct FTransform                       Transform                                              (ConstParm, Parm, OutParm, ReferenceParm, IsPlainOldData, NoDestructor)

void ABGUActorBaseCS::OnConstructionCS(const struct FTransform& Transform)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BGUActorBaseCS", "OnConstructionCS");

	Params::BGUActorBaseCS_OnConstructionCS Parms{};

	Parms.Transform = std::move(Transform);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function b1-Managed.BGUActorBaseCS.ReceiveEndPlay
// (Native, Event, Public, Protected, BlueprintEvent)
// Parameters:
// EEndPlayReason                          EndPlayReason                                          (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ABGUActorBaseCS::ReceiveEndPlay(EEndPlayReason EndPlayReason)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BGUActorBaseCS", "ReceiveEndPlay");

	Params::BGUActorBaseCS_ReceiveEndPlay Parms{};

	Parms.EndPlayReason = EndPlayReason;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function b1-Managed.BGUActorBaseCS.GetActorGuidCS
// (Native, Event, Public, Protected, HasOutParams, BlueprintEvent, Const)
// Parameters:
// class FString                           OutActorGuid                                           (Parm, OutParm, ZeroConstructor, HasGetValueTypeHash)
// uint8                                   ReturnValue                                            (Parm, OutParm, ReturnParm, NoDestructor, HasGetValueTypeHash)

uint8 ABGUActorBaseCS::GetActorGuidCS(class FString* OutActorGuid) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BGUActorBaseCS", "GetActorGuidCS");

	Params::BGUActorBaseCS_GetActorGuidCS Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	if (OutActorGuid != nullptr)
		*OutActorGuid = std::move(Parms.OutActorGuid);

	return Parms.ReturnValue;
}


// Function b1-Managed.BGUProceduralSpawnCharacterBase.OnConstructionCS
// (Native, Event, Public, Protected, BlueprintEvent)
// Parameters:
// struct FTransform                       Transform                                              (ConstParm, Parm, OutParm, ReferenceParm, IsPlainOldData, NoDestructor)

void ABGUProceduralSpawnCharacterBase::OnConstructionCS(const struct FTransform& Transform)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BGUProceduralSpawnCharacterBase", "OnConstructionCS");

	Params::BGUProceduralSpawnCharacterBase_OnConstructionCS Parms{};

	Parms.Transform = std::move(Transform);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function b1-Managed.BGUInteractiveActorBase.OnConstructionCS
// (Native, Event, Public, Protected, BlueprintEvent)
// Parameters:
// struct FTransform                       Transform                                              (ConstParm, Parm, OutParm, ReferenceParm, IsPlainOldData, NoDestructor)

void ABGUInteractiveActorBase::OnConstructionCS(const struct FTransform& Transform)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BGUInteractiveActorBase", "OnConstructionCS");

	Params::BGUInteractiveActorBase_OnConstructionCS Parms{};

	Parms.Transform = std::move(Transform);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function b1-Managed.BGUInteractiveActorBase.RefreshInteractDebugRange
// (Native, Public, BlueprintCallable)

void ABGUInteractiveActorBase::RefreshInteractDebugRange()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BGUInteractiveActorBase", "RefreshInteractDebugRange");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function b1-Managed.BGUInteractiveActorBase.OnDestroyDestructible
// (Native, Event, Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// struct FVector                          HitLocation                                            (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// struct FVector                          ImpulseDir                                             (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// float                                   ImpulseStrength                                        (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// float                                   Damage                                                 (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ABGUInteractiveActorBase::OnDestroyDestructible(const struct FVector& HitLocation, const struct FVector& ImpulseDir, float ImpulseStrength, float Damage)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BGUInteractiveActorBase", "OnDestroyDestructible");

	Params::BGUInteractiveActorBase_OnDestroyDestructible Parms{};

	Parms.HitLocation = std::move(HitLocation);
	Parms.ImpulseDir = std::move(ImpulseDir);
	Parms.ImpulseStrength = ImpulseStrength;
	Parms.Damage = Damage;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function b1-Managed.BGUInteractiveActorBase.OnResetDestructible
// (Native, Event, Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// uint8                                   IsDestroyed                                            (Parm, NoDestructor, HasGetValueTypeHash)

void ABGUInteractiveActorBase::OnResetDestructible(uint8 IsDestroyed)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BGUInteractiveActorBase", "OnResetDestructible");

	Params::BGUInteractiveActorBase_OnResetDestructible Parms{};

	Parms.IsDestroyed = IsDestroyed;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function b1-Managed.BGUInteractiveActorBase.OnHitDestructible
// (Native, Event, Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// struct FVector                          HitLocation                                            (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// struct FVector                          ImpulseDir                                             (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// float                                   ImpulseStrength                                        (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// float                                   Damage                                                 (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ABGUInteractiveActorBase::OnHitDestructible(const struct FVector& HitLocation, const struct FVector& ImpulseDir, float ImpulseStrength, float Damage)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BGUInteractiveActorBase", "OnHitDestructible");

	Params::BGUInteractiveActorBase_OnHitDestructible Parms{};

	Parms.HitLocation = std::move(HitLocation);
	Parms.ImpulseDir = std::move(ImpulseDir);
	Parms.ImpulseStrength = ImpulseStrength;
	Parms.Damage = Damage;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function b1-Managed.BGUInteractiveActorBase.CallBPFunc
// (Native, Event, Public, BlueprintCallable, BlueprintEvent)

void ABGUInteractiveActorBase::CallBPFunc()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BGUInteractiveActorBase", "CallBPFunc");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function b1-Managed.BGUTriggerObjBase.OnConstructionCS
// (Native, Event, Public, Protected, BlueprintEvent)
// Parameters:
// struct FTransform                       Transform                                              (ConstParm, Parm, OutParm, ReferenceParm, IsPlainOldData, NoDestructor)

void ABGUTriggerObjBase::OnConstructionCS(const struct FTransform& Transform)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BGUTriggerObjBase", "OnConstructionCS");

	Params::BGUTriggerObjBase_OnConstructionCS Parms{};

	Parms.Transform = std::move(Transform);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function b1-Managed.DisoLib_EditorSGDTool.CleanOneBoneSubMeshCompByRetainObjectsArray
// (Native, Public, BlueprintCallable)

void ADisoLib_EditorSGDTool::CleanOneBoneSubMeshCompByRetainObjectsArray()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("DisoLib_EditorSGDTool", "CleanOneBoneSubMeshCompByRetainObjectsArray");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function b1-Managed.DisoLib_EditorSGDTool.CleanOneBoneSubMeshCompByDelectObjectsArray
// (Native, Public, BlueprintCallable)

void ADisoLib_EditorSGDTool::CleanOneBoneSubMeshCompByDelectObjectsArray()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("DisoLib_EditorSGDTool", "CleanOneBoneSubMeshCompByDelectObjectsArray");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function b1-Managed.DisoLib_EditorSGDTool.SetBoneChildCompsCollisionSetting
// (Native, Public, BlueprintCallable)

void ADisoLib_EditorSGDTool::SetBoneChildCompsCollisionSetting()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("DisoLib_EditorSGDTool", "SetBoneChildCompsCollisionSetting");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function b1-Managed.DisoLib_EditorSGDTool.ToggleBoneChildCompsHidenInGame
// (Native, Public, BlueprintCallable)

void ADisoLib_EditorSGDTool::ToggleBoneChildCompsHidenInGame()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("DisoLib_EditorSGDTool", "ToggleBoneChildCompsHidenInGame");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function b1-Managed.DisoLib_EditorSGDTool.LogBoneChildCompsCPDData
// (Native, Public, BlueprintCallable)

void ADisoLib_EditorSGDTool::LogBoneChildCompsCPDData()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("DisoLib_EditorSGDTool", "LogBoneChildCompsCPDData");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function b1-Managed.DisoLib_EditorSGDTool.ToggleSubMeshCompVisable
// (Native, Public, BlueprintCallable)

void ADisoLib_EditorSGDTool::ToggleSubMeshCompVisable()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("DisoLib_EditorSGDTool", "ToggleSubMeshCompVisable");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function b1-Managed.DisoLib_EditorSGDTool.CreateLevelActorFromUnit
// (Native, Public, BlueprintCallable)

void ADisoLib_EditorSGDTool::CreateLevelActorFromUnit()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("DisoLib_EditorSGDTool", "CreateLevelActorFromUnit");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function b1-Managed.DisoLib_EditorSGDTool.CreateOneBoneSubMeshComp
// (Native, Public, BlueprintCallable)

void ADisoLib_EditorSGDTool::CreateOneBoneSubMeshComp()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("DisoLib_EditorSGDTool", "CreateOneBoneSubMeshComp");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function b1-Managed.DisoLib_EditorSGDTool.CleanOneBoneSubMeshComp
// (Native, Public, BlueprintCallable)

void ADisoLib_EditorSGDTool::CleanOneBoneSubMeshComp()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("DisoLib_EditorSGDTool", "CleanOneBoneSubMeshComp");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function b1-Managed.DisoLib_EditorSGDTool.AddTagToBoneChildComps
// (Native, Public, BlueprintCallable)

void ADisoLib_EditorSGDTool::AddTagToBoneChildComps()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("DisoLib_EditorSGDTool", "AddTagToBoneChildComps");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function b1-Managed.DisoLib_EditorSGDTool.CleanAllSubMeshComp
// (Native, Public, BlueprintCallable)

void ADisoLib_EditorSGDTool::CleanAllSubMeshComp()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("DisoLib_EditorSGDTool", "CleanAllSubMeshComp");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function b1-Managed.DisoLib_EditorSGDTool.CreateSubMeshComp
// (Native, Public, BlueprintCallable)

void ADisoLib_EditorSGDTool::CreateSubMeshComp()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("DisoLib_EditorSGDTool", "CreateSubMeshComp");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function b1-Managed.DisoLib_EditorSGDTool.CreateBoneComp
// (Native, Public, BlueprintCallable)

void ADisoLib_EditorSGDTool::CreateBoneComp()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("DisoLib_EditorSGDTool", "CreateBoneComp");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function b1-Managed.HelloUFromUSharp.ReceiveBeginPlay
// (Native, Event, Public, Protected, BlueprintEvent)

void AHelloUFromUSharp::ReceiveBeginPlay()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("HelloUFromUSharp", "ReceiveBeginPlay");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function b1-Managed.HelloUFromUSharp.CallMe
// (Native, Public, BlueprintCallable)
// Parameters:
// class FString                           Arg1                                                   (Parm, ZeroConstructor, HasGetValueTypeHash)

void AHelloUFromUSharp::CallMe(const class FString& Arg1)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("HelloUFromUSharp", "CallMe");

	Params::HelloUFromUSharp_CallMe Parms{};

	Parms.Arg1 = std::move(Arg1);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function b1-Managed.Bezier_MovementComponentInCS.ReceiveBeginPlay
// (Native, Event, Public, BlueprintEvent)

void UBezier_MovementComponentInCS::ReceiveBeginPlay()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("Bezier_MovementComponentInCS", "ReceiveBeginPlay");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function b1-Managed.Bezier_MovementComponentInCS.ReceiveTick
// (Native, Event, Public, BlueprintEvent)
// Parameters:
// float                                   DeltaSeconds                                           (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UBezier_MovementComponentInCS::ReceiveTick(float DeltaSeconds)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("Bezier_MovementComponentInCS", "ReceiveTick");

	Params::Bezier_MovementComponentInCS_ReceiveTick Parms{};

	Parms.DeltaSeconds = DeltaSeconds;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function b1-Managed.Bezier_MovementComponentInCS.InitMovementParam
// (Native, Public, BlueprintCallable)
// Parameters:
// float                                   _RotateSpeed                                           (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// float                                   _FlySpeed                                              (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// float                                   _DestroyTime                                           (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// float                                   _MaxFlySpeed                                           (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// int32                                   _BezierPathPointNum                                    (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// float                                   _BezierMoveWeight                                      (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// float                                   _AccelerationTime                                      (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// float                                   _ApproachDis                                           (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// uint8                                   _EnableDrawDebugPoint                                  (Parm, NoDestructor, HasGetValueTypeHash)
// class UCurveFloat*                      _SpeedCurve                                            (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// struct FVector                          _ControlAdditionPoint1                                 (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// struct FVector                          _ControlAdditionPoint2                                 (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UBezier_MovementComponentInCS::InitMovementParam(float _RotateSpeed, float _FlySpeed, float _DestroyTime, float _MaxFlySpeed, int32 _BezierPathPointNum, float _BezierMoveWeight, float _AccelerationTime, float _ApproachDis, uint8 _EnableDrawDebugPoint, class UCurveFloat* _SpeedCurve, const struct FVector& _ControlAdditionPoint1, const struct FVector& _ControlAdditionPoint2)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("Bezier_MovementComponentInCS", "InitMovementParam");

	Params::Bezier_MovementComponentInCS_InitMovementParam Parms{};

	Parms._RotateSpeed = _RotateSpeed;
	Parms._FlySpeed = _FlySpeed;
	Parms._DestroyTime = _DestroyTime;
	Parms._MaxFlySpeed = _MaxFlySpeed;
	Parms._BezierPathPointNum = _BezierPathPointNum;
	Parms._BezierMoveWeight = _BezierMoveWeight;
	Parms._AccelerationTime = _AccelerationTime;
	Parms._ApproachDis = _ApproachDis;
	Parms._EnableDrawDebugPoint = _EnableDrawDebugPoint;
	Parms._SpeedCurve = _SpeedCurve;
	Parms._ControlAdditionPoint1 = std::move(_ControlAdditionPoint1);
	Parms._ControlAdditionPoint2 = std::move(_ControlAdditionPoint2);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function b1-Managed.BUS_ActorBaseDataComp.LateECSBeginPlay
// (Native, Event, Public, BlueprintEvent)

void UBUS_ActorBaseDataComp::LateECSBeginPlay()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BUS_ActorBaseDataComp", "LateECSBeginPlay");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function b1-Managed.BUS_ActorBaseDataComp.PreECSBeginPlay
// (Native, Event, Public, BlueprintEvent)

void UBUS_ActorBaseDataComp::PreECSBeginPlay()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BUS_ActorBaseDataComp", "PreECSBeginPlay");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function b1-Managed.BUS_ActorBaseDataComp.OnDestoryInCS
// (Native, Event, Public, Protected, BlueprintEvent)

void UBUS_ActorBaseDataComp::OnDestoryInCS()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BUS_ActorBaseDataComp", "OnDestoryInCS");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function b1-Managed.BUS_ActorBaseDataComp.InitOnNewInCS
// (Native, Event, Public, Protected, BlueprintEvent)

void UBUS_ActorBaseDataComp::InitOnNewInCS()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BUS_ActorBaseDataComp", "InitOnNewInCS");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function b1-Managed.OldMKSpawnTest.SpawnActorCS
// (Native, Public, HasOutParams, BlueprintCallable)
// Parameters:
// class UClass*                           ActorClass                                             (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// class AActor*                           ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

class AActor* AOldMKSpawnTest::SpawnActorCS(class UClass* ActorClass)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("OldMKSpawnTest", "SpawnActorCS");

	Params::OldMKSpawnTest_SpawnActorCS Parms{};

	Parms.ActorClass = ActorClass;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function b1-Managed.BED_FSMNode.IsSupportViewType
// (Native, Event, Public, HasOutParams, BlueprintEvent, Const)
// Parameters:
// ECalliopeViewType                       InViewType                                             (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// uint8                                   ReturnValue                                            (Parm, OutParm, ReturnParm, NoDestructor, HasGetValueTypeHash)

uint8 UBED_FSMNode::IsSupportViewType(const ECalliopeViewType& InViewType) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BED_FSMNode", "IsSupportViewType");

	Params::BED_FSMNode_IsSupportViewType Parms{};

	Parms.InViewType = InViewType;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function b1-Managed.BED_FSMNode_GI_Loading_LoadChapterViewLevel.PostPropertyChanged
// (Native, Event, Public, BlueprintEvent)
// Parameters:
// class FString                           MemberName                                             (Parm, ZeroConstructor, HasGetValueTypeHash)
// class FString                           PropertyName                                           (Parm, ZeroConstructor, HasGetValueTypeHash)

void UBED_FSMNode_GI_Loading_LoadChapterViewLevel::PostPropertyChanged(const class FString& MemberName, const class FString& PropertyName)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BED_FSMNode_GI_Loading_LoadChapterViewLevel", "PostPropertyChanged");

	Params::BED_FSMNode_GI_Loading_LoadChapterViewLevel_PostPropertyChanged Parms{};

	Parms.MemberName = std::move(MemberName);
	Parms.PropertyName = std::move(PropertyName);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function b1-Managed.BED_FSMNode_GI_Loading_LoadChapterViewLevel.GetNodeDescriptionInCS
// (Native, Event, Public, HasOutParams, BlueprintEvent, Const)
// Parameters:
// class FString                           ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash)

class FString UBED_FSMNode_GI_Loading_LoadChapterViewLevel::GetNodeDescriptionInCS() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BED_FSMNode_GI_Loading_LoadChapterViewLevel", "GetNodeDescriptionInCS");

	Params::BED_FSMNode_GI_Loading_LoadChapterViewLevel_GetNodeDescriptionInCS Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function b1-Managed.BED_BehaviorNode.IsSupportViewType
// (Native, Event, Public, HasOutParams, BlueprintEvent, Const)
// Parameters:
// ECalliopeViewType                       InViewType                                             (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// uint8                                   ReturnValue                                            (Parm, OutParm, ReturnParm, NoDestructor, HasGetValueTypeHash)

uint8 UBED_BehaviorNode::IsSupportViewType(const ECalliopeViewType& InViewType) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BED_BehaviorNode", "IsSupportViewType");

	Params::BED_BehaviorNode_IsSupportViewType Parms{};

	Parms.InViewType = InViewType;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function b1-Managed.BED_BehaviorNode_ExitPhasePerformance.GetNodeDescriptionInCS
// (Native, Event, Public, HasOutParams, BlueprintEvent, Const)
// Parameters:
// class FString                           ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash)

class FString UBED_BehaviorNode_ExitPhasePerformance::GetNodeDescriptionInCS() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BED_BehaviorNode_ExitPhasePerformance", "GetNodeDescriptionInCS");

	Params::BED_BehaviorNode_ExitPhasePerformance_GetNodeDescriptionInCS Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function b1-Managed.GSDispLib_PostProcessDebugger.ReceiveBeginPlay
// (Native, Event, Public, Protected, BlueprintEvent)

void AGSDispLib_PostProcessDebugger::ReceiveBeginPlay()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GSDispLib_PostProcessDebugger", "ReceiveBeginPlay");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function b1-Managed.GSDispLib_PostProcessDebugger.ReceiveTick
// (Native, Event, Public, BlueprintEvent)
// Parameters:
// float                                   DeltaSeconds                                           (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void AGSDispLib_PostProcessDebugger::ReceiveTick(float DeltaSeconds)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GSDispLib_PostProcessDebugger", "ReceiveTick");

	Params::GSDispLib_PostProcessDebugger_ReceiveTick Parms{};

	Parms.DeltaSeconds = DeltaSeconds;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function b1-Managed.GSDispLib_PostProcessDebugger.BeginEffect
// (Native, Public, Protected, BlueprintCallable)

void AGSDispLib_PostProcessDebugger::BeginEffect()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GSDispLib_PostProcessDebugger", "BeginEffect");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function b1-Managed.GSDispLib_PostProcessDebugger.StopEffect
// (Native, Public, Protected, BlueprintCallable)

void AGSDispLib_PostProcessDebugger::StopEffect()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GSDispLib_PostProcessDebugger", "StopEffect");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function b1-Managed.BED_QuestNode.IsSupportViewType
// (Native, Event, Public, HasOutParams, BlueprintEvent, Const)
// Parameters:
// ECalliopeViewType                       InViewType                                             (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// uint8                                   ReturnValue                                            (Parm, OutParm, ReturnParm, NoDestructor, HasGetValueTypeHash)

uint8 UBED_QuestNode::IsSupportViewType(const ECalliopeViewType& InViewType) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BED_QuestNode", "IsSupportViewType");

	Params::BED_QuestNode_IsSupportViewType Parms{};

	Parms.InViewType = InViewType;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function b1-Managed.BED_QuestNode_PlayLevelSequence.GetNodeDescriptionInCS
// (Native, Event, Public, HasOutParams, BlueprintEvent, Const)
// Parameters:
// class FString                           ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash)

class FString UBED_QuestNode_PlayLevelSequence::GetNodeDescriptionInCS() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BED_QuestNode_PlayLevelSequence", "GetNodeDescriptionInCS");

	Params::BED_QuestNode_PlayLevelSequence_GetNodeDescriptionInCS Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function b1-Managed.BANS_DispLibTimedModifyMPC.GSNotifyBeginCS
// (Native, Event, Public, Protected, BlueprintEvent, Const)
// Parameters:
// struct FUStGSNotifyParam                NotifyParam                                            (Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
// float                                   TotalDuration                                          (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UBANS_DispLibTimedModifyMPC::GSNotifyBeginCS(const struct FUStGSNotifyParam& NotifyParam, float TotalDuration) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BANS_DispLibTimedModifyMPC", "GSNotifyBeginCS");

	Params::BANS_DispLibTimedModifyMPC_GSNotifyBeginCS Parms{};

	Parms.NotifyParam = std::move(NotifyParam);
	Parms.TotalDuration = TotalDuration;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function b1-Managed.BANS_DispLibTimedModifyMPC.GSNotifyEndCS
// (Native, Event, Public, Protected, BlueprintEvent, Const)
// Parameters:
// struct FUStGSNotifyParam                NotifyParam                                            (Parm, ZeroConstructor, IsPlainOldData, NoDestructor)

void UBANS_DispLibTimedModifyMPC::GSNotifyEndCS(const struct FUStGSNotifyParam& NotifyParam) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BANS_DispLibTimedModifyMPC", "GSNotifyEndCS");

	Params::BANS_DispLibTimedModifyMPC_GSNotifyEndCS Parms{};

	Parms.NotifyParam = std::move(NotifyParam);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function b1-Managed.BED_ComboNode.IsSupportViewType
// (Native, Event, Public, HasOutParams, BlueprintEvent, Const)
// Parameters:
// ECalliopeViewType                       InViewType                                             (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// uint8                                   ReturnValue                                            (Parm, OutParm, ReturnParm, NoDestructor, HasGetValueTypeHash)

uint8 UBED_ComboNode::IsSupportViewType(const ECalliopeViewType& InViewType) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BED_ComboNode", "IsSupportViewType");

	Params::BED_ComboNode_IsSupportViewType Parms{};

	Parms.InViewType = InViewType;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function b1-Managed.BED_ComboNode_State.GetContextOutputsInCS
// (Native, Event, Public, HasOutParams, BlueprintEvent)
// Parameters:
// TArray<class FName>                     ReturnValue                                            (Parm, OutParm, ReturnParm)

TArray<class FName> UBED_ComboNode_State::GetContextOutputsInCS()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BED_ComboNode_State", "GetContextOutputsInCS");

	Params::BED_ComboNode_State_GetContextOutputsInCS Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function b1-Managed.BED_ComboNode_State.PostPropertyChanged
// (Native, Event, Public, BlueprintEvent)
// Parameters:
// class FString                           MemberName                                             (Parm, ZeroConstructor, HasGetValueTypeHash)
// class FString                           PropertyName                                           (Parm, ZeroConstructor, HasGetValueTypeHash)

void UBED_ComboNode_State::PostPropertyChanged(const class FString& MemberName, const class FString& PropertyName)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BED_ComboNode_State", "PostPropertyChanged");

	Params::BED_ComboNode_State_PostPropertyChanged Parms{};

	Parms.MemberName = std::move(MemberName);
	Parms.PropertyName = std::move(PropertyName);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function b1-Managed.BED_ComboNode_State.PostLoadInCS
// (Native, Event, Public, BlueprintEvent)

void UBED_ComboNode_State::PostLoadInCS()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BED_ComboNode_State", "PostLoadInCS");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function b1-Managed.BUI_Widget.OnRemovedFromFocusPath
// (BlueprintCosmetic, Native, Event, Public, BlueprintEvent)
// Parameters:
// struct FFocusEvent                      InFocusEvent                                           (Parm, NoDestructor)

void UBUI_Widget::OnRemovedFromFocusPath(const struct FFocusEvent& InFocusEvent)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BUI_Widget", "OnRemovedFromFocusPath");

	Params::BUI_Widget_OnRemovedFromFocusPath Parms{};

	Parms.InFocusEvent = std::move(InFocusEvent);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function b1-Managed.BUI_Widget.OnAnalogValueChanged
// (Native, Event, Public, HasOutParams, BlueprintEvent)
// Parameters:
// struct FGeometry                        MyGeometry                                             (Parm, IsPlainOldData, NoDestructor)
// struct FAnalogInputEvent                InAnalogInputEvent                                     (Parm)
// struct FEventReply                      ReturnValue                                            (Parm, OutParm, ReturnParm)

struct FEventReply UBUI_Widget::OnAnalogValueChanged(const struct FGeometry& MyGeometry, const struct FAnalogInputEvent& InAnalogInputEvent)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BUI_Widget", "OnAnalogValueChanged");

	Params::BUI_Widget_OnAnalogValueChanged Parms{};

	Parms.MyGeometry = std::move(MyGeometry);
	Parms.InAnalogInputEvent = std::move(InAnalogInputEvent);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function b1-Managed.BUI_Widget.OnAddedToFocusPath
// (BlueprintCosmetic, Native, Event, Public, BlueprintEvent)
// Parameters:
// struct FFocusEvent                      InFocusEvent                                           (Parm, NoDestructor)

void UBUI_Widget::OnAddedToFocusPath(const struct FFocusEvent& InFocusEvent)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BUI_Widget", "OnAddedToFocusPath");

	Params::BUI_Widget_OnAddedToFocusPath Parms{};

	Parms.InFocusEvent = std::move(InFocusEvent);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function b1-Managed.BUI_Widget.OnPreviewKeyDown
// (Native, Event, Public, HasOutParams, BlueprintEvent)
// Parameters:
// struct FGeometry                        MyGeometry                                             (Parm, IsPlainOldData, NoDestructor)
// struct FKeyEvent                        InKeyEvent                                             (Parm)
// struct FEventReply                      ReturnValue                                            (Parm, OutParm, ReturnParm)

struct FEventReply UBUI_Widget::OnPreviewKeyDown(const struct FGeometry& MyGeometry, const struct FKeyEvent& InKeyEvent)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BUI_Widget", "OnPreviewKeyDown");

	Params::BUI_Widget_OnPreviewKeyDown Parms{};

	Parms.MyGeometry = std::move(MyGeometry);
	Parms.InKeyEvent = std::move(InKeyEvent);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function b1-Managed.BUI_Widget.OnFocusChanging
// (BlueprintCosmetic, Native, Event, Public, BlueprintEvent)
// Parameters:
// struct FFocusEvent                      InFocusEvent                                           (ConstParm, Parm, OutParm, ReferenceParm, NoDestructor)

void UBUI_Widget::OnFocusChanging(const struct FFocusEvent& InFocusEvent)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BUI_Widget", "OnFocusChanging");

	Params::BUI_Widget_OnFocusChanging Parms{};

	Parms.InFocusEvent = std::move(InFocusEvent);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function b1-Managed.BUI_Widget.OnInitialized
// (BlueprintCosmetic, Native, Event, Public, BlueprintEvent)

void UBUI_Widget::OnInitialized()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BUI_Widget", "OnInitialized");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function b1-Managed.BUI_Widget.PreConstruct
// (BlueprintCosmetic, Native, Event, Public, BlueprintEvent)
// Parameters:
// uint8                                   IsDesignTime                                           (Parm, NoDestructor, HasGetValueTypeHash)

void UBUI_Widget::PreConstruct(uint8 IsDesignTime)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BUI_Widget", "PreConstruct");

	Params::BUI_Widget_PreConstruct Parms{};

	Parms.IsDesignTime = IsDesignTime;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function b1-Managed.BUI_Widget.OnMouseWheel
// (BlueprintCosmetic, Native, Event, Public, HasOutParams, BlueprintEvent)
// Parameters:
// struct FGeometry                        MyGeometry                                             (Parm, IsPlainOldData, NoDestructor)
// struct FPointerEvent                    MouseEvent                                             (ConstParm, Parm, OutParm, ReferenceParm)
// struct FEventReply                      ReturnValue                                            (Parm, OutParm, ReturnParm)

struct FEventReply UBUI_Widget::OnMouseWheel(const struct FGeometry& MyGeometry, const struct FPointerEvent& MouseEvent)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BUI_Widget", "OnMouseWheel");

	Params::BUI_Widget_OnMouseWheel Parms{};

	Parms.MyGeometry = std::move(MyGeometry);
	Parms.MouseEvent = std::move(MouseEvent);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function b1-Managed.BUI_Widget.Construct
// (BlueprintCosmetic, Native, Event, Public, BlueprintEvent)

void UBUI_Widget::Construct()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BUI_Widget", "Construct");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function b1-Managed.BUI_Widget.OnAnimationSequenceEvent
// (Native, Public, BlueprintCallable)
// Parameters:
// class UWidgetAnimation*                 Animation                                              (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// class FString                           EventName                                              (Parm, ZeroConstructor, HasGetValueTypeHash)

void UBUI_Widget::OnAnimationSequenceEvent(class UWidgetAnimation* Animation, const class FString& EventName)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BUI_Widget", "OnAnimationSequenceEvent");

	Params::BUI_Widget_OnAnimationSequenceEvent Parms{};

	Parms.Animation = Animation;
	Parms.EventName = std::move(EventName);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function b1-Managed.BUI_Widget.OnKeyDown
// (BlueprintCosmetic, Native, Event, Public, HasOutParams, BlueprintEvent)
// Parameters:
// struct FGeometry                        MyGeometry                                             (Parm, IsPlainOldData, NoDestructor)
// struct FKeyEvent                        InKeyEvent                                             (Parm)
// struct FEventReply                      ReturnValue                                            (Parm, OutParm, ReturnParm)

struct FEventReply UBUI_Widget::OnKeyDown(const struct FGeometry& MyGeometry, const struct FKeyEvent& InKeyEvent)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BUI_Widget", "OnKeyDown");

	Params::BUI_Widget_OnKeyDown Parms{};

	Parms.MyGeometry = std::move(MyGeometry);
	Parms.InKeyEvent = std::move(InKeyEvent);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function b1-Managed.BUI_Widget.Destruct
// (BlueprintCosmetic, Native, Event, Public, BlueprintEvent)

void UBUI_Widget::Destruct()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BUI_Widget", "Destruct");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function b1-Managed.BUI_Widget.OnGSOnListItemObjectSet
// (Native, Public, Protected, BlueprintCallable)
// Parameters:
// class UObject*                          ListItemObject                                         (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UBUI_Widget::OnGSOnListItemObjectSet(class UObject* ListItemObject)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BUI_Widget", "OnGSOnListItemObjectSet");

	Params::BUI_Widget_OnGSOnListItemObjectSet Parms{};

	Parms.ListItemObject = ListItemObject;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function b1-Managed.BUI_Widget.OnKeyUp
// (BlueprintCosmetic, Native, Event, Public, HasOutParams, BlueprintEvent)
// Parameters:
// struct FGeometry                        MyGeometry                                             (Parm, IsPlainOldData, NoDestructor)
// struct FKeyEvent                        InKeyEvent                                             (Parm)
// struct FEventReply                      ReturnValue                                            (Parm, OutParm, ReturnParm)

struct FEventReply UBUI_Widget::OnKeyUp(const struct FGeometry& MyGeometry, const struct FKeyEvent& InKeyEvent)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BUI_Widget", "OnKeyUp");

	Params::BUI_Widget_OnKeyUp Parms{};

	Parms.MyGeometry = std::move(MyGeometry);
	Parms.InKeyEvent = std::move(InKeyEvent);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function b1-Managed.BUI_Widget.WoodTestAnimKeyState
// (Native, Public, BlueprintCallable)
// Parameters:
// class FString                           AnimName                                               (Parm, ZeroConstructor, HasGetValueTypeHash)
// class FString                           TargetState                                            (Parm, ZeroConstructor, HasGetValueTypeHash)
// float                                   InStateDelayEasingTime                                 (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// float                                   InStateOverideEasingTime                               (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// uint8                                   IsForce                                                (Parm, NoDestructor, HasGetValueTypeHash)

void UBUI_Widget::WoodTestAnimKeyState(const class FString& AnimName, const class FString& TargetState, float InStateDelayEasingTime, float InStateOverideEasingTime, uint8 IsForce)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BUI_Widget", "WoodTestAnimKeyState");

	Params::BUI_Widget_WoodTestAnimKeyState Parms{};

	Parms.AnimName = std::move(AnimName);
	Parms.TargetState = std::move(TargetState);
	Parms.InStateDelayEasingTime = InStateDelayEasingTime;
	Parms.InStateOverideEasingTime = InStateOverideEasingTime;
	Parms.IsForce = IsForce;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function b1-Managed.BUI_Widget.Tick
// (BlueprintCosmetic, Native, Event, Public, BlueprintEvent)
// Parameters:
// struct FGeometry                        MyGeometry                                             (Parm, IsPlainOldData, NoDestructor)
// float                                   InDeltaTime                                            (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UBUI_Widget::Tick(const struct FGeometry& MyGeometry, float InDeltaTime)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BUI_Widget", "Tick");

	Params::BUI_Widget_Tick Parms{};

	Parms.MyGeometry = std::move(MyGeometry);
	Parms.InDeltaTime = InDeltaTime;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function b1-Managed.BUI_Widget.GSAnimKeyToState
// (Native, Public, BlueprintCallable)
// Parameters:
// class FString                           AnimName                                               (Parm, ZeroConstructor, HasGetValueTypeHash)
// class FString                           TargetState                                            (Parm, ZeroConstructor, HasGetValueTypeHash)
// uint8                                   IsForce                                                (Parm, NoDestructor, HasGetValueTypeHash)
// float                                   InStateDelayEasingTime                                 (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// float                                   InStateOverideEasingTime                               (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UBUI_Widget::GSAnimKeyToState(const class FString& AnimName, const class FString& TargetState, uint8 IsForce, float InStateDelayEasingTime, float InStateOverideEasingTime)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BUI_Widget", "GSAnimKeyToState");

	Params::BUI_Widget_GSAnimKeyToState Parms{};

	Parms.AnimName = std::move(AnimName);
	Parms.TargetState = std::move(TargetState);
	Parms.IsForce = IsForce;
	Parms.InStateDelayEasingTime = InStateDelayEasingTime;
	Parms.InStateOverideEasingTime = InStateOverideEasingTime;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function b1-Managed.BAN_GSBase.GSPostNotifyDebugCS
// (Native, Event, Public, Protected, HasOutParams, BlueprintEvent, Const)
// Parameters:
// struct FUStGSNotifyParam                NotifyParam                                            (Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
// int32                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

int32 UBAN_GSBase::GSPostNotifyDebugCS(const struct FUStGSNotifyParam& NotifyParam) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BAN_GSBase", "GSPostNotifyDebugCS");

	Params::BAN_GSBase_GSPostNotifyDebugCS Parms{};

	Parms.NotifyParam = std::move(NotifyParam);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function b1-Managed.BAN_GSBase.GSPreNotifyDebugCS
// (Native, Event, Public, Protected, HasOutParams, BlueprintEvent, Const)
// Parameters:
// struct FUStGSNotifyParam                NotifyParam                                            (Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
// int32                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

int32 UBAN_GSBase::GSPreNotifyDebugCS(const struct FUStGSNotifyParam& NotifyParam) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BAN_GSBase", "GSPreNotifyDebugCS");

	Params::BAN_GSBase_GSPreNotifyDebugCS Parms{};

	Parms.NotifyParam = std::move(NotifyParam);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function b1-Managed.BAN_GSBase.GetSoftReferences
// (Native, Event, Public, HasOutParams, BlueprintEvent, Const)
// Parameters:
// TArray<struct FSoftObjectPath>          ReturnValue                                            (Parm, OutParm, ReturnParm)

TArray<struct FSoftObjectPath> UBAN_GSBase::GetSoftReferences() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BAN_GSBase", "GetSoftReferences");

	Params::BAN_GSBase_GetSoftReferences Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function b1-Managed.BAN_GSBase.GSValidateInputCS
// (Native, Event, Public, BlueprintEvent, Const)
// Parameters:
// class AActor*                           Actor                                                  (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UBAN_GSBase::GSValidateInputCS(class AActor* Actor) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BAN_GSBase", "GSValidateInputCS");

	Params::BAN_GSBase_GSValidateInputCS Parms{};

	Parms.Actor = Actor;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function b1-Managed.BAN_GSPlayNiagaraFX.GetSoftReferences
// (Native, Event, Public, HasOutParams, BlueprintEvent, Const)
// Parameters:
// TArray<struct FSoftObjectPath>          ReturnValue                                            (Parm, OutParm, ReturnParm)

TArray<struct FSoftObjectPath> UBAN_GSPlayNiagaraFX::GetSoftReferences() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BAN_GSPlayNiagaraFX", "GetSoftReferences");

	Params::BAN_GSPlayNiagaraFX_GetSoftReferences Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function b1-Managed.BAN_GSPlayNiagaraFX.GetAnimNType
// (Native, Event, Public, HasOutParams, BlueprintEvent, Const)
// Parameters:
// EGsEnAnimN                              ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

EGsEnAnimN UBAN_GSPlayNiagaraFX::GetAnimNType() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BAN_GSPlayNiagaraFX", "GetAnimNType");

	Params::BAN_GSPlayNiagaraFX_GetAnimNType Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function b1-Managed.BAN_GSPlayNiagaraFX.GSNotifyCS
// (Native, Event, Public, Protected, BlueprintEvent, Const)
// Parameters:
// struct FUStGSNotifyParam                NotifyParam                                            (Parm, ZeroConstructor, IsPlainOldData, NoDestructor)

void UBAN_GSPlayNiagaraFX::GSNotifyCS(const struct FUStGSNotifyParam& NotifyParam) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BAN_GSPlayNiagaraFX", "GSNotifyCS");

	Params::BAN_GSPlayNiagaraFX_GSNotifyCS Parms{};

	Parms.NotifyParam = std::move(NotifyParam);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function b1-Managed.BAN_GSPlayNiagaraFX_WithCondition.GSNotifyCS
// (Native, Event, Public, Protected, BlueprintEvent, Const)
// Parameters:
// struct FUStGSNotifyParam                NotifyParam                                            (Parm, ZeroConstructor, IsPlainOldData, NoDestructor)

void UBAN_GSPlayNiagaraFX_WithCondition::GSNotifyCS(const struct FUStGSNotifyParam& NotifyParam) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BAN_GSPlayNiagaraFX_WithCondition", "GSNotifyCS");

	Params::BAN_GSPlayNiagaraFX_WithCondition_GSNotifyCS Parms{};

	Parms.NotifyParam = std::move(NotifyParam);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function b1-Managed.BED_FSMNode_Condition_GI_Loading_HasPlayerLoginBtlSvr.GetNodeDescriptionInCS
// (Native, Event, Public, HasOutParams, BlueprintEvent, Const)
// Parameters:
// class FString                           ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash)

class FString UBED_FSMNode_Condition_GI_Loading_HasPlayerLoginBtlSvr::GetNodeDescriptionInCS() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BED_FSMNode_Condition_GI_Loading_HasPlayerLoginBtlSvr", "GetNodeDescriptionInCS");

	Params::BED_FSMNode_Condition_GI_Loading_HasPlayerLoginBtlSvr_GetNodeDescriptionInCS Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function b1-Managed.AutoTestHelperLib.AutoTestInjectInputEvent
// (Native, Static, Public, BlueprintCallable)
// Parameters:
// class UObject*                          WorldContext                                           (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// class FString                           ActionName                                             (Parm, ZeroConstructor, HasGetValueTypeHash)
// ETriggerEvent                           TriggerEvent                                           (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UAutoTestHelperLib::AutoTestInjectInputEvent(class UObject* WorldContext, const class FString& ActionName, ETriggerEvent TriggerEvent)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("AutoTestHelperLib", "AutoTestInjectInputEvent");

	Params::AutoTestHelperLib_AutoTestInjectInputEvent Parms{};

	Parms.WorldContext = WorldContext;
	Parms.ActionName = std::move(ActionName);
	Parms.TriggerEvent = TriggerEvent;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function b1-Managed.AutoTestHelperLib.RebirthPointChoiceClick
// (Native, Static, Public, HasOutParams, BlueprintCallable)
// Parameters:
// class UObject*                          WorldContext                                           (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// class FString                           Choice                                                 (Parm, ZeroConstructor, HasGetValueTypeHash)
// uint8                                   ReturnValue                                            (Parm, OutParm, ReturnParm, NoDestructor, HasGetValueTypeHash)

uint8 UAutoTestHelperLib::RebirthPointChoiceClick(class UObject* WorldContext, const class FString& Choice)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("AutoTestHelperLib", "RebirthPointChoiceClick");

	Params::AutoTestHelperLib_RebirthPointChoiceClick Parms{};

	Parms.WorldContext = WorldContext;
	Parms.Choice = std::move(Choice);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function b1-Managed.AutoTestHelperLib.QAUploadPerformanceData
// (Native, Static, Public, BlueprintCallable)
// Parameters:
// class UObject*                          WorldContext                                           (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// class FString                           Catelog                                                (Parm, ZeroConstructor, HasGetValueTypeHash)
// class FString                           Summary                                                (Parm, ZeroConstructor, HasGetValueTypeHash)
// TArray<class FString>                   FileList                                               (Parm)

void UAutoTestHelperLib::QAUploadPerformanceData(class UObject* WorldContext, const class FString& Catelog, const class FString& Summary, const TArray<class FString>& FileList)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("AutoTestHelperLib", "QAUploadPerformanceData");

	Params::AutoTestHelperLib_QAUploadPerformanceData Parms{};

	Parms.WorldContext = WorldContext;
	Parms.Catelog = std::move(Catelog);
	Parms.Summary = std::move(Summary);
	Parms.FileList = std::move(FileList);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function b1-Managed.AutoTestHelperLib.GetActorLocationByName
// (Native, Static, Public, HasOutParams, BlueprintCallable)
// Parameters:
// class UObject*                          WorldContext                                           (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// class FString                           ActorName                                              (Parm, ZeroConstructor, HasGetValueTypeHash)
// struct FVector                          ActorLocation                                          (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// uint8                                   ReturnValue                                            (Parm, OutParm, ReturnParm, NoDestructor, HasGetValueTypeHash)

uint8 UAutoTestHelperLib::GetActorLocationByName(class UObject* WorldContext, const class FString& ActorName, struct FVector* ActorLocation)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("AutoTestHelperLib", "GetActorLocationByName");

	Params::AutoTestHelperLib_GetActorLocationByName Parms{};

	Parms.WorldContext = WorldContext;
	Parms.ActorName = std::move(ActorName);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	if (ActorLocation != nullptr)
		*ActorLocation = std::move(Parms.ActorLocation);

	return Parms.ReturnValue;
}


// Function b1-Managed.AutoTestHelperLib.IsPlayingCameraMovie
// (Native, Static, Public, HasOutParams, BlueprintCallable)
// Parameters:
// class UObject*                          WorldContext                                           (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// uint8                                   ReturnValue                                            (Parm, OutParm, ReturnParm, NoDestructor, HasGetValueTypeHash)

uint8 UAutoTestHelperLib::IsPlayingCameraMovie(class UObject* WorldContext)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("AutoTestHelperLib", "IsPlayingCameraMovie");

	Params::AutoTestHelperLib_IsPlayingCameraMovie Parms{};

	Parms.WorldContext = WorldContext;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function b1-Managed.AutoTestHelperLib.GetPlayingSequenceID
// (Native, Static, Public, HasOutParams, BlueprintCallable)
// Parameters:
// class UObject*                          WorldContext                                           (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// int32                                   SequenceID                                             (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// uint8                                   ReturnValue                                            (Parm, OutParm, ReturnParm, NoDestructor, HasGetValueTypeHash)

uint8 UAutoTestHelperLib::GetPlayingSequenceID(class UObject* WorldContext, int32* SequenceID)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("AutoTestHelperLib", "GetPlayingSequenceID");

	Params::AutoTestHelperLib_GetPlayingSequenceID Parms{};

	Parms.WorldContext = WorldContext;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	if (SequenceID != nullptr)
		*SequenceID = Parms.SequenceID;

	return Parms.ReturnValue;
}


// Function b1-Managed.AutoTestHelperLib.GetPlayerTargetActor
// (Native, Static, Public, HasOutParams, BlueprintCallable)
// Parameters:
// class UObject*                          WorldContext                                           (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// class ABGUCharacterCS*                  ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

class ABGUCharacterCS* UAutoTestHelperLib::GetPlayerTargetActor(class UObject* WorldContext)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("AutoTestHelperLib", "GetPlayerTargetActor");

	Params::AutoTestHelperLib_GetPlayerTargetActor Parms{};

	Parms.WorldContext = WorldContext;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function b1-Managed.AutoTestHelperLib.GetTamerInViewCount
// (Native, Static, Public, BlueprintCallable)
// Parameters:
// class UObject*                          WorldContext                                           (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UAutoTestHelperLib::GetTamerInViewCount(class UObject* WorldContext)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("AutoTestHelperLib", "GetTamerInViewCount");

	Params::AutoTestHelperLib_GetTamerInViewCount Parms{};

	Parms.WorldContext = WorldContext;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function b1-Managed.AutoTestHelperLib.QAGetCurrentSkillID
// (Native, Static, Public, HasOutParams, BlueprintCallable)
// Parameters:
// class AActor*                           Target                                                 (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// class FString                           ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash)

class FString UAutoTestHelperLib::QAGetCurrentSkillID(class AActor* Target)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("AutoTestHelperLib", "QAGetCurrentSkillID");

	Params::AutoTestHelperLib_QAGetCurrentSkillID Parms{};

	Parms.Target = Target;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function b1-Managed.AutoTestHelperLib.JudgeWidgetVisible
// (Native, Static, Public, HasOutParams, BlueprintCallable)
// Parameters:
// class UWidget*                          Widget                                                 (ExportObject, Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// uint8                                   ReturnValue                                            (Parm, OutParm, ReturnParm, NoDestructor, HasGetValueTypeHash)

uint8 UAutoTestHelperLib::JudgeWidgetVisible(class UWidget* Widget)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("AutoTestHelperLib", "JudgeWidgetVisible");

	Params::AutoTestHelperLib_JudgeWidgetVisible Parms{};

	Parms.Widget = Widget;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function b1-Managed.AutoTestHelperLib.QAGetCurrentAMName
// (Native, Static, Public, HasOutParams, BlueprintCallable)
// Parameters:
// class AActor*                           Target                                                 (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// class FString                           ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash)

class FString UAutoTestHelperLib::QAGetCurrentAMName(class AActor* Target)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("AutoTestHelperLib", "QAGetCurrentAMName");

	Params::AutoTestHelperLib_QAGetCurrentAMName Parms{};

	Parms.Target = Target;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function b1-Managed.AutoTestHelperLib.QAStringArraySort
// (Native, Static, Public, HasOutParams, BlueprintCallable)
// Parameters:
// TArray<class FString>                   StringList                                             (Parm)
// TArray<class FString>                   ReturnValue                                            (Parm, OutParm, ReturnParm)

TArray<class FString> UAutoTestHelperLib::QAStringArraySort(const TArray<class FString>& StringList)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("AutoTestHelperLib", "QAStringArraySort");

	Params::AutoTestHelperLib_QAStringArraySort Parms{};

	Parms.StringList = std::move(StringList);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function b1-Managed.AutoTestHelperLib.GetUnitAllSkillID
// (Native, Static, Public, HasOutParams, BlueprintCallable)
// Parameters:
// class AActor*                           Unit                                                   (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// TArray<int32>                           ReturnValue                                            (Parm, OutParm, ReturnParm)

TArray<int32> UAutoTestHelperLib::GetUnitAllSkillID(class AActor* Unit)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("AutoTestHelperLib", "GetUnitAllSkillID");

	Params::AutoTestHelperLib_GetUnitAllSkillID Parms{};

	Parms.Unit = Unit;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function b1-Managed.AutoTestHelperLib.IsEquippingSpell
// (Native, Static, Public, HasOutParams, BlueprintCallable)
// Parameters:
// class UObject*                          WorldContext                                           (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// int32                                   SpellID                                                (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// uint8                                   ReturnValue                                            (Parm, OutParm, ReturnParm, NoDestructor, HasGetValueTypeHash)

uint8 UAutoTestHelperLib::IsEquippingSpell(class UObject* WorldContext, int32 SpellID)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("AutoTestHelperLib", "IsEquippingSpell");

	Params::AutoTestHelperLib_IsEquippingSpell Parms{};

	Parms.WorldContext = WorldContext;
	Parms.SpellID = SpellID;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function b1-Managed.AutoTestHelperLib.AutoMoveComplete
// (Native, Static, Public, BlueprintCallable)
// Parameters:
// class UObject*                          WorldContext                                           (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UAutoTestHelperLib::AutoMoveComplete(class UObject* WorldContext)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("AutoTestHelperLib", "AutoMoveComplete");

	Params::AutoTestHelperLib_AutoMoveComplete Parms{};

	Parms.WorldContext = WorldContext;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function b1-Managed.AutoTestHelperLib.CameraLockTarget
// (Native, Static, Public, BlueprintCallable)
// Parameters:
// class UObject*                          WorldContext                                           (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// class AActor*                           LockTarget                                             (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UAutoTestHelperLib::CameraLockTarget(class UObject* WorldContext, class AActor* LockTarget)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("AutoTestHelperLib", "CameraLockTarget");

	Params::AutoTestHelperLib_CameraLockTarget Parms{};

	Parms.WorldContext = WorldContext;
	Parms.LockTarget = LockTarget;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function b1-Managed.AutoTestHelperLib.QADrawSkillRange
// (Native, Static, Public, BlueprintCallable)
// Parameters:
// class AActor*                           Unit                                                   (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// int32                                   SkillID                                                (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// float                                   Duration                                               (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UAutoTestHelperLib::QADrawSkillRange(class AActor* Unit, int32 SkillID, float Duration)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("AutoTestHelperLib", "QADrawSkillRange");

	Params::AutoTestHelperLib_QADrawSkillRange Parms{};

	Parms.Unit = Unit;
	Parms.SkillID = SkillID;
	Parms.Duration = Duration;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function b1-Managed.AutoTestHelperLib.SetPlayerAttack
// (Native, Static, Public, BlueprintCallable)
// Parameters:
// class AActor*                           Unit                                                   (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// int32                                   AttackNum                                              (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UAutoTestHelperLib::SetPlayerAttack(class AActor* Unit, int32 AttackNum)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("AutoTestHelperLib", "SetPlayerAttack");

	Params::AutoTestHelperLib_SetPlayerAttack Parms{};

	Parms.Unit = Unit;
	Parms.AttackNum = AttackNum;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function b1-Managed.AutoTestHelperLib.CanUnitBeTarget
// (Native, Static, Public, HasOutParams, BlueprintCallable)
// Parameters:
// class ABGUCharacterCS*                  Enemy                                                  (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// uint8                                   ReturnValue                                            (Parm, OutParm, ReturnParm, NoDestructor, HasGetValueTypeHash)

uint8 UAutoTestHelperLib::CanUnitBeTarget(class ABGUCharacterCS* Enemy)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("AutoTestHelperLib", "CanUnitBeTarget");

	Params::AutoTestHelperLib_CanUnitBeTarget Parms{};

	Parms.Enemy = Enemy;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function b1-Managed.AutoTestHelperLib.GenShiXianFeng
// (Native, Static, Public, HasOutParams, BlueprintCallable)
// Parameters:
// class UWorld*                           World                                                  (Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UAutoTestHelperLib::GenShiXianFeng(class UWorld*& World)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("AutoTestHelperLib", "GenShiXianFeng");

	Params::AutoTestHelperLib_GenShiXianFeng Parms{};

	Parms.World = World;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	World = Parms.World;
}


// Function b1-Managed.AutoTestHelperLib.IsUnitInBattle
// (Native, Static, Public, HasOutParams, BlueprintCallable)
// Parameters:
// class AActor*                           Unit                                                   (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// uint8                                   ReturnValue                                            (Parm, OutParm, ReturnParm, NoDestructor, HasGetValueTypeHash)

uint8 UAutoTestHelperLib::IsUnitInBattle(class AActor* Unit)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("AutoTestHelperLib", "IsUnitInBattle");

	Params::AutoTestHelperLib_IsUnitInBattle Parms{};

	Parms.Unit = Unit;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function b1-Managed.AutoTestHelperLib.FindNearbyUnit
// (Native, Static, Public, HasOutParams, BlueprintCallable)
// Parameters:
// class UObject*                          WorldContext                                           (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// int32                                   AttackRadius                                           (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// class ABGUCharacterCS*                  EnemyUnit                                              (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// class FString                           UnitBP                                                 (Parm, ZeroConstructor, HasGetValueTypeHash)
// uint8                                   ReturnValue                                            (Parm, OutParm, ReturnParm, NoDestructor, HasGetValueTypeHash)

uint8 UAutoTestHelperLib::FindNearbyUnit(class UObject* WorldContext, int32 AttackRadius, class ABGUCharacterCS** EnemyUnit, const class FString& UnitBP)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("AutoTestHelperLib", "FindNearbyUnit");

	Params::AutoTestHelperLib_FindNearbyUnit Parms{};

	Parms.WorldContext = WorldContext;
	Parms.AttackRadius = AttackRadius;
	Parms.UnitBP = std::move(UnitBP);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	if (EnemyUnit != nullptr)
		*EnemyUnit = Parms.EnemyUnit;

	return Parms.ReturnValue;
}


// Function b1-Managed.AutoTestHelperLib.ReadDataTable
// (Native, Static, Public, HasOutParams, BlueprintCallable)
// Parameters:
// int32                                   ID                                                     (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// class FString                           ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash)

class FString UAutoTestHelperLib::ReadDataTable(int32 ID)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("AutoTestHelperLib", "ReadDataTable");

	Params::AutoTestHelperLib_ReadDataTable Parms{};

	Parms.ID = ID;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function b1-Managed.AutoTestHelperLib.HasItemNumber
// (Native, Static, Public, HasOutParams, BlueprintCallable)
// Parameters:
// class UObject*                          WorldContext                                           (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// int32                                   ItemId                                                 (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// int32                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

int32 UAutoTestHelperLib::HasItemNumber(class UObject* WorldContext, int32 ItemId)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("AutoTestHelperLib", "HasItemNumber");

	Params::AutoTestHelperLib_HasItemNumber Parms{};

	Parms.WorldContext = WorldContext;
	Parms.ItemId = ItemId;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function b1-Managed.AutoTestHelperLib.RunToPosition
// (Native, Static, Public, HasOutParams, BlueprintCallable)
// Parameters:
// class UObject*                          WorldContext                                           (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// struct FVector                          TargetLocation                                         (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// int32                                   ReachRadius                                            (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// uint8                                   ReturnValue                                            (Parm, OutParm, ReturnParm, NoDestructor, HasGetValueTypeHash)

uint8 UAutoTestHelperLib::RunToPosition(class UObject* WorldContext, const struct FVector& TargetLocation, int32 ReachRadius)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("AutoTestHelperLib", "RunToPosition");

	Params::AutoTestHelperLib_RunToPosition Parms{};

	Parms.WorldContext = WorldContext;
	Parms.TargetLocation = std::move(TargetLocation);
	Parms.ReachRadius = ReachRadius;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function b1-Managed.AutoTestHelperLib.RemoveGroupAI
// (Native, Static, Public, BlueprintCallable)
// Parameters:
// class UObject*                          WorldContext                                           (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// class AActor*                           OwnerActor                                             (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UAutoTestHelperLib::RemoveGroupAI(class UObject* WorldContext, class AActor* OwnerActor)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("AutoTestHelperLib", "RemoveGroupAI");

	Params::AutoTestHelperLib_RemoveGroupAI Parms{};

	Parms.WorldContext = WorldContext;
	Parms.OwnerActor = OwnerActor;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function b1-Managed.AutoTestHelperLib.SetCurrentHp
// (Native, Static, Public, BlueprintCallable)
// Parameters:
// class AActor*                           Unit                                                   (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// int32                                   Hp                                                     (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UAutoTestHelperLib::SetCurrentHp(class AActor* Unit, int32 Hp)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("AutoTestHelperLib", "SetCurrentHp");

	Params::AutoTestHelperLib_SetCurrentHp Parms{};

	Parms.Unit = Unit;
	Parms.Hp = Hp;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function b1-Managed.AutoTestHelperLib.MouseGoBack
// (Native, Static, Public, BlueprintCallable)
// Parameters:
// class UObject*                          WorldContext                                           (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UAutoTestHelperLib::MouseGoBack(class UObject* WorldContext)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("AutoTestHelperLib", "MouseGoBack");

	Params::AutoTestHelperLib_MouseGoBack Parms{};

	Parms.WorldContext = WorldContext;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function b1-Managed.AutoTestHelperLib.HeavyAttack
// (Native, Static, Public, BlueprintCallable)
// Parameters:
// class UObject*                          WorldContext                                           (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UAutoTestHelperLib::HeavyAttack(class UObject* WorldContext)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("AutoTestHelperLib", "HeavyAttack");

	Params::AutoTestHelperLib_HeavyAttack Parms{};

	Parms.WorldContext = WorldContext;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function b1-Managed.AutoTestHelperLib.LightAttack
// (Native, Static, Public, BlueprintCallable)
// Parameters:
// class UObject*                          WorldContext                                           (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UAutoTestHelperLib::LightAttack(class UObject* WorldContext)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("AutoTestHelperLib", "LightAttack");

	Params::AutoTestHelperLib_LightAttack Parms{};

	Parms.WorldContext = WorldContext;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function b1-Managed.AutoTestHelperLib.ClickButton
// (Native, Static, Public, BlueprintCallable)
// Parameters:
// class UWidget*                          Btn                                                    (ExportObject, Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UAutoTestHelperLib::ClickButton(class UWidget* Btn)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("AutoTestHelperLib", "ClickButton");

	Params::AutoTestHelperLib_ClickButton Parms{};

	Parms.Btn = Btn;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function b1-Managed.AutoTestHelperLib.RunToEnemy
// (Native, Static, Public, HasOutParams, BlueprintCallable)
// Parameters:
// class UObject*                          WorldContext                                           (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// class ABGUCharacterCS*                  Enemy                                                  (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// int32                                   ReachRadius                                            (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// uint8                                   ReturnValue                                            (Parm, OutParm, ReturnParm, NoDestructor, HasGetValueTypeHash)

uint8 UAutoTestHelperLib::RunToEnemy(class UObject* WorldContext, class ABGUCharacterCS* Enemy, int32 ReachRadius)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("AutoTestHelperLib", "RunToEnemy");

	Params::AutoTestHelperLib_RunToEnemy Parms{};

	Parms.WorldContext = WorldContext;
	Parms.Enemy = Enemy;
	Parms.ReachRadius = ReachRadius;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function b1-Managed.AutoTestHelperLib.KillEnemy
// (Native, Static, Public, HasOutParams, BlueprintCallable)
// Parameters:
// class UObject*                          WorldContext                                           (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// class AActor*                           KillTarget                                             (Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UAutoTestHelperLib::KillEnemy(class UObject* WorldContext, class AActor*& KillTarget)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("AutoTestHelperLib", "KillEnemy");

	Params::AutoTestHelperLib_KillEnemy Parms{};

	Parms.WorldContext = WorldContext;
	Parms.KillTarget = KillTarget;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	KillTarget = Parms.KillTarget;
}


// Function b1-Managed.AutoTestHelperLib.QAPauseBT
// (Native, Static, Public, BlueprintCallable)
// Parameters:
// class AActor*                           Unit                                                   (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// uint8                                   Status                                                 (Parm, NoDestructor, HasGetValueTypeHash)

void UAutoTestHelperLib::QAPauseBT(class AActor* Unit, uint8 Status)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("AutoTestHelperLib", "QAPauseBT");

	Params::AutoTestHelperLib_QAPauseBT Parms{};

	Parms.Unit = Unit;
	Parms.Status = Status;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function b1-Managed.AutoTestHelperLib.CastSpell
// (Native, Static, Public, BlueprintCallable)
// Parameters:
// class UObject*                          WorldContext                                           (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// ESpellType                              SkillType                                              (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UAutoTestHelperLib::CastSpell(class UObject* WorldContext, ESpellType SkillType)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("AutoTestHelperLib", "CastSpell");

	Params::AutoTestHelperLib_CastSpell Parms{};

	Parms.WorldContext = WorldContext;
	Parms.SkillType = SkillType;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function b1-Managed.AutoTestHelperLib.Interact
// (Native, Static, Public, HasOutParams, BlueprintCallable)
// Parameters:
// class UObject*                          WorldContext                                           (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// uint8                                   ReturnValue                                            (Parm, OutParm, ReturnParm, NoDestructor, HasGetValueTypeHash)

uint8 UAutoTestHelperLib::Interact(class UObject* WorldContext)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("AutoTestHelperLib", "Interact");

	Params::AutoTestHelperLib_Interact Parms{};

	Parms.WorldContext = WorldContext;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function b1-Managed.AutoTestHelperLib.HasSpell
// (Native, Static, Public, HasOutParams, BlueprintCallable)
// Parameters:
// class UObject*                          WorldContext                                           (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// int32                                   SpellID                                                (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// uint8                                   ReturnValue                                            (Parm, OutParm, ReturnParm, NoDestructor, HasGetValueTypeHash)

uint8 UAutoTestHelperLib::HasSpell(class UObject* WorldContext, int32 SpellID)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("AutoTestHelperLib", "HasSpell");

	Params::AutoTestHelperLib_HasSpell Parms{};

	Parms.WorldContext = WorldContext;
	Parms.SpellID = SpellID;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function b1-Managed.AutoTestHelperLib.SetMaxHp
// (Native, Static, Public, BlueprintCallable)
// Parameters:
// class AActor*                           Unit                                                   (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UAutoTestHelperLib::SetMaxHp(class AActor* Unit)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("AutoTestHelperLib", "SetMaxHp");

	Params::AutoTestHelperLib_SetMaxHp Parms{};

	Parms.Unit = Unit;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function b1-Managed.AutoTestHelperLib.GenActor
// (Native, Static, Public, HasOutParams, BlueprintCallable)
// Parameters:
// class UWorld*                           World                                                  (Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// class UClass*                           ActorClass                                             (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UAutoTestHelperLib::GenActor(class UWorld*& World, class UClass* ActorClass)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("AutoTestHelperLib", "GenActor");

	Params::AutoTestHelperLib_GenActor Parms{};

	Parms.World = World;
	Parms.ActorClass = ActorClass;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	World = Parms.World;
}


// Function b1-Managed.AutoTestHelperLib.FindText
// (Native, Static, Public, HasOutParams, BlueprintCallable)
// Parameters:
// class UObject*                          WorldContext                                           (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// class FString                           Text                                                   (Parm, ZeroConstructor, HasGetValueTypeHash)
// uint8                                   bNeedClick                                             (Parm, NoDestructor, HasGetValueTypeHash)
// uint8                                   ReturnValue                                            (Parm, OutParm, ReturnParm, NoDestructor, HasGetValueTypeHash)

uint8 UAutoTestHelperLib::FindText(class UObject* WorldContext, const class FString& Text, uint8 bNeedClick)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("AutoTestHelperLib", "FindText");

	Params::AutoTestHelperLib_FindText Parms{};

	Parms.WorldContext = WorldContext;
	Parms.Text = std::move(Text);
	Parms.bNeedClick = bNeedClick;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function b1-Managed.AutoTestHelperLib.TestCode
// (Native, Static, Public, BlueprintCallable)
// Parameters:
// class UObject*                          WorldContext                                           (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UAutoTestHelperLib::TestCode(class UObject* WorldContext)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("AutoTestHelperLib", "TestCode");

	Params::AutoTestHelperLib_TestCode Parms{};

	Parms.WorldContext = WorldContext;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function b1-Managed.AutoTestHelperLib.OpenBag
// (Native, Static, Public, BlueprintCallable)
// Parameters:
// class UObject*                          WorldContext                                           (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// uint8                                   IsOpen                                                 (Parm, NoDestructor, HasGetValueTypeHash)

void UAutoTestHelperLib::OpenBag(class UObject* WorldContext, uint8 IsOpen)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("AutoTestHelperLib", "OpenBag");

	Params::AutoTestHelperLib_OpenBag Parms{};

	Parms.WorldContext = WorldContext;
	Parms.IsOpen = IsOpen;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function b1-Managed.AutoTestHelperLib.Dodge
// (Native, Static, Public, BlueprintCallable)
// Parameters:
// class UObject*                          WorldContext                                           (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UAutoTestHelperLib::Dodge(class UObject* WorldContext)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("AutoTestHelperLib", "Dodge");

	Params::AutoTestHelperLib_Dodge Parms{};

	Parms.WorldContext = WorldContext;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function b1-Managed.AutoTestHelperLib.Jump
// (Native, Static, Public, BlueprintCallable)
// Parameters:
// class UObject*                          WorldContext                                           (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UAutoTestHelperLib::Jump(class UObject* WorldContext)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("AutoTestHelperLib", "Jump");

	Params::AutoTestHelperLib_Jump Parms{};

	Parms.WorldContext = WorldContext;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function b1-Managed.BAN_GSClearComboKeyCache.bIsNativeBranchingPointCS
// (Native, Event, Public, HasOutParams, BlueprintEvent, Const)
// Parameters:
// uint8                                   ReturnValue                                            (Parm, OutParm, ReturnParm, NoDestructor, HasGetValueTypeHash)

uint8 UBAN_GSClearComboKeyCache::bIsNativeBranchingPointCS() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BAN_GSClearComboKeyCache", "bIsNativeBranchingPointCS");

	Params::BAN_GSClearComboKeyCache_bIsNativeBranchingPointCS Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function b1-Managed.BAN_GSClearComboKeyCache.GSNotifyCS
// (Native, Event, Public, Protected, BlueprintEvent, Const)
// Parameters:
// struct FUStGSNotifyParam                NotifyParam                                            (Parm, ZeroConstructor, IsPlainOldData, NoDestructor)

void UBAN_GSClearComboKeyCache::GSNotifyCS(const struct FUStGSNotifyParam& NotifyParam) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BAN_GSClearComboKeyCache", "GSNotifyCS");

	Params::BAN_GSClearComboKeyCache_GSNotifyCS Parms{};

	Parms.NotifyParam = std::move(NotifyParam);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function b1-Managed.BAN_DispLibChangeUnitMaterial.GSNotifyCS
// (Native, Event, Public, Protected, BlueprintEvent, Const)
// Parameters:
// struct FUStGSNotifyParam                NotifyParam                                            (Parm, ZeroConstructor, IsPlainOldData, NoDestructor)

void UBAN_DispLibChangeUnitMaterial::GSNotifyCS(const struct FUStGSNotifyParam& NotifyParam) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BAN_DispLibChangeUnitMaterial", "GSNotifyCS");

	Params::BAN_DispLibChangeUnitMaterial_GSNotifyCS Parms{};

	Parms.NotifyParam = std::move(NotifyParam);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function b1-Managed.AutoTest_Template.ReceiveStartTest
// (Native, Event, Public, BlueprintEvent)

void UAutoTest_Template::ReceiveStartTest()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("AutoTest_Template", "ReceiveStartTest");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function b1-Managed.AutoTest_Template.ReceiveTick
// (Native, Event, Public, BlueprintEvent)
// Parameters:
// float                                   DeltaTime                                              (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UAutoTest_Template::ReceiveTick(float DeltaTime)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("AutoTest_Template", "ReceiveTick");

	Params::AutoTest_Template_ReceiveTick Parms{};

	Parms.DeltaTime = DeltaTime;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function b1-Managed.AutoTest_Template.SetupTest
// (Native, Public, BlueprintCallable)

void UAutoTest_Template::SetupTest()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("AutoTest_Template", "SetupTest");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function b1-Managed.AutoTest_Template.StopTest
// (Native, Public, BlueprintCallable)

void UAutoTest_Template::StopTest()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("AutoTest_Template", "StopTest");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function b1-Managed.AutoTest_Template.RunTest
// (Native, Public, BlueprintCallable)

void UAutoTest_Template::RunTest()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("AutoTest_Template", "RunTest");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function b1-Managed.BED_BehaviorNode_OnSkillValidAttackFrameEnded.GetNodeDescriptionInCS
// (Native, Event, Public, HasOutParams, BlueprintEvent, Const)
// Parameters:
// class FString                           ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash)

class FString UBED_BehaviorNode_OnSkillValidAttackFrameEnded::GetNodeDescriptionInCS() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BED_BehaviorNode_OnSkillValidAttackFrameEnded", "GetNodeDescriptionInCS");

	Params::BED_BehaviorNode_OnSkillValidAttackFrameEnded_GetNodeDescriptionInCS Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function b1-Managed.BED_BehaviorNode_OnSkillValidAttackFrameEnded.IsSupportViewType
// (Native, Event, Public, HasOutParams, BlueprintEvent, Const)
// Parameters:
// ECalliopeViewType                       InViewType                                             (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// uint8                                   ReturnValue                                            (Parm, OutParm, ReturnParm, NoDestructor, HasGetValueTypeHash)

uint8 UBED_BehaviorNode_OnSkillValidAttackFrameEnded::IsSupportViewType(const ECalliopeViewType& InViewType) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BED_BehaviorNode_OnSkillValidAttackFrameEnded", "IsSupportViewType");

	Params::BED_BehaviorNode_OnSkillValidAttackFrameEnded_IsSupportViewType Parms{};

	Parms.InViewType = InViewType;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function b1-Managed.DispLib_DBCNiagaraComponent.OnPropertyChanged
// (Native, Event, Public, Protected, BlueprintEvent)
// Parameters:
// class FString                           MemberName                                             (Parm, ZeroConstructor, HasGetValueTypeHash)
// class FString                           PropertyName                                           (Parm, ZeroConstructor, HasGetValueTypeHash)

void UDispLib_DBCNiagaraComponent::OnPropertyChanged(const class FString& MemberName, const class FString& PropertyName)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("DispLib_DBCNiagaraComponent", "OnPropertyChanged");

	Params::DispLib_DBCNiagaraComponent_OnPropertyChanged Parms{};

	Parms.MemberName = std::move(MemberName);
	Parms.PropertyName = std::move(PropertyName);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function b1-Managed.DispLib_DBCNiagaraComponent.TickComponentInCS
// (Native, Event, Public, BlueprintEvent)
// Parameters:
// float                                   DeltaTime                                              (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UDispLib_DBCNiagaraComponent::TickComponentInCS(float DeltaTime)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("DispLib_DBCNiagaraComponent", "TickComponentInCS");

	Params::DispLib_DBCNiagaraComponent_TickComponentInCS Parms{};

	Parms.DeltaTime = DeltaTime;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function b1-Managed.DispLib_DBCNiagaraComponent.BeginPlayInCS
// (Native, Event, Public, BlueprintEvent)

void UDispLib_DBCNiagaraComponent::BeginPlayInCS()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("DispLib_DBCNiagaraComponent", "BeginPlayInCS");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function b1-Managed.DispLib_DBCNiagaraComponent.EndPlayInCS
// (Native, Event, Public, BlueprintEvent)
// Parameters:
// EEndPlayReason                          EndPlayReason                                          (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UDispLib_DBCNiagaraComponent::EndPlayInCS(EEndPlayReason EndPlayReason)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("DispLib_DBCNiagaraComponent", "EndPlayInCS");

	Params::DispLib_DBCNiagaraComponent_EndPlayInCS Parms{};

	Parms.EndPlayReason = EndPlayReason;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function b1-Managed.BED_ProcessNode.IsSupportViewType
// (Native, Event, Public, HasOutParams, BlueprintEvent, Const)
// Parameters:
// ECalliopeViewType                       InViewType                                             (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// uint8                                   ReturnValue                                            (Parm, OutParm, ReturnParm, NoDestructor, HasGetValueTypeHash)

uint8 UBED_ProcessNode::IsSupportViewType(const ECalliopeViewType& InViewType) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BED_ProcessNode", "IsSupportViewType");

	Params::BED_ProcessNode_IsSupportViewType Parms{};

	Parms.InViewType = InViewType;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function b1-Managed.BED_ProcessStateNode.IsBranchGraphNode
// (Native, Event, Public, HasOutParams, BlueprintEvent, Const)
// Parameters:
// uint8                                   ReturnValue                                            (Parm, OutParm, ReturnParm, NoDestructor, HasGetValueTypeHash)

uint8 UBED_ProcessStateNode::IsBranchGraphNode() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BED_ProcessStateNode", "IsBranchGraphNode");

	Params::BED_ProcessStateNode_IsBranchGraphNode Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function b1-Managed.DispLib_DBCSimpleMaterialQualityManager.TickComponentInCS
// (Native, Event, Public, BlueprintEvent)
// Parameters:
// float                                   DeltaTime                                              (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UDispLib_DBCSimpleMaterialQualityManager::TickComponentInCS(float DeltaTime)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("DispLib_DBCSimpleMaterialQualityManager", "TickComponentInCS");

	Params::DispLib_DBCSimpleMaterialQualityManager_TickComponentInCS Parms{};

	Parms.DeltaTime = DeltaTime;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function b1-Managed.DispLib_DBCSimpleMaterialQualityManager.BeginPlayInCS
// (Native, Event, Public, BlueprintEvent)

void UDispLib_DBCSimpleMaterialQualityManager::BeginPlayInCS()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("DispLib_DBCSimpleMaterialQualityManager", "BeginPlayInCS");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function b1-Managed.DispLib_EditorSimpleMayaSceneImporter.DoRebuildScene
// (Native, Public, BlueprintCallable)

void ADispLib_EditorSimpleMayaSceneImporter::DoRebuildScene()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("DispLib_EditorSimpleMayaSceneImporter", "DoRebuildScene");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function b1-Managed.DispLib_EditorSimpleMayaSceneImporter.LogEulerToQuat
// (Native, Public, BlueprintCallable)

void ADispLib_EditorSimpleMayaSceneImporter::LogEulerToQuat()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("DispLib_EditorSimpleMayaSceneImporter", "LogEulerToQuat");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function b1-Managed.BGW_OnlineFriend.OnReadFriendListCompleteCS
// (Native, Event, Public, Protected, BlueprintEvent)
// Parameters:
// uint8                                   bWasSuccessful                                         (Parm, NoDestructor, HasGetValueTypeHash)

void UBGW_OnlineFriend::OnReadFriendListCompleteCS(uint8 bWasSuccessful)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BGW_OnlineFriend", "OnReadFriendListCompleteCS");

	Params::BGW_OnlineFriend_OnReadFriendListCompleteCS Parms{};

	Parms.bWasSuccessful = bWasSuccessful;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function b1-Managed.BSN_Log.OnNotify
// (Native, Event, Public, BlueprintEvent)
// Parameters:
// class UCalliopeLevelSequencePlayer*     InPlayer                                               (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// int32                                   InStatus                                               (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// uint8                                   bInBackwards                                           (Parm, NoDestructor, HasGetValueTypeHash)

void UBSN_Log::OnNotify(class UCalliopeLevelSequencePlayer* InPlayer, int32 InStatus, uint8 bInBackwards)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BSN_Log", "OnNotify");

	Params::BSN_Log_OnNotify Parms{};

	Parms.InPlayer = InPlayer;
	Parms.InStatus = InStatus;
	Parms.bInBackwards = bInBackwards;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function b1-Managed.BANS_DispLibTimedModifyMaterial.GSNotifyBeginCS
// (Native, Event, Public, Protected, BlueprintEvent, Const)
// Parameters:
// struct FUStGSNotifyParam                NotifyParam                                            (Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
// float                                   TotalDuration                                          (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UBANS_DispLibTimedModifyMaterial::GSNotifyBeginCS(const struct FUStGSNotifyParam& NotifyParam, float TotalDuration) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BANS_DispLibTimedModifyMaterial", "GSNotifyBeginCS");

	Params::BANS_DispLibTimedModifyMaterial_GSNotifyBeginCS Parms{};

	Parms.NotifyParam = std::move(NotifyParam);
	Parms.TotalDuration = TotalDuration;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function b1-Managed.BANS_DispLibTimedModifyMaterial.GSNotifyEndCS
// (Native, Event, Public, Protected, BlueprintEvent, Const)
// Parameters:
// struct FUStGSNotifyParam                NotifyParam                                            (Parm, ZeroConstructor, IsPlainOldData, NoDestructor)

void UBANS_DispLibTimedModifyMaterial::GSNotifyEndCS(const struct FUStGSNotifyParam& NotifyParam) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BANS_DispLibTimedModifyMaterial", "GSNotifyEndCS");

	Params::BANS_DispLibTimedModifyMaterial_GSNotifyEndCS Parms{};

	Parms.NotifyParam = std::move(NotifyParam);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function b1-Managed.BED_BehaviorNode_OnTrigerFSMEvent.IsSupportViewType
// (Native, Event, Public, HasOutParams, BlueprintEvent, Const)
// Parameters:
// ECalliopeViewType                       InViewType                                             (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// uint8                                   ReturnValue                                            (Parm, OutParm, ReturnParm, NoDestructor, HasGetValueTypeHash)

uint8 UBED_BehaviorNode_OnTrigerFSMEvent::IsSupportViewType(const ECalliopeViewType& InViewType) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BED_BehaviorNode_OnTrigerFSMEvent", "IsSupportViewType");

	Params::BED_BehaviorNode_OnTrigerFSMEvent_IsSupportViewType Parms{};

	Parms.InViewType = InViewType;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function b1-Managed.BAN_DispLibModifyMaterial.GSNotifyCS
// (Native, Event, Public, Protected, BlueprintEvent, Const)
// Parameters:
// struct FUStGSNotifyParam                NotifyParam                                            (Parm, ZeroConstructor, IsPlainOldData, NoDestructor)

void UBAN_DispLibModifyMaterial::GSNotifyCS(const struct FUStGSNotifyParam& NotifyParam) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BAN_DispLibModifyMaterial", "GSNotifyCS");

	Params::BAN_DispLibModifyMaterial_GSNotifyCS Parms{};

	Parms.NotifyParam = std::move(NotifyParam);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function b1-Managed.DispLib_EditorDBCPreviewToolActor.ReceiveDestroyed
// (Native, Event, Public, BlueprintEvent)

void ADispLib_EditorDBCPreviewToolActor::ReceiveDestroyed()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("DispLib_EditorDBCPreviewToolActor", "ReceiveDestroyed");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function b1-Managed.DispLib_EditorDBCPreviewToolActor.ReceiveEndPlay
// (Native, Event, Public, Protected, BlueprintEvent)
// Parameters:
// EEndPlayReason                          EndPlayReason                                          (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ADispLib_EditorDBCPreviewToolActor::ReceiveEndPlay(EEndPlayReason EndPlayReason)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("DispLib_EditorDBCPreviewToolActor", "ReceiveEndPlay");

	Params::DispLib_EditorDBCPreviewToolActor_ReceiveEndPlay Parms{};

	Parms.EndPlayReason = EndPlayReason;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function b1-Managed.DispLib_EditorDBCPreviewToolActor.OnWorldCleanup
// (Native, Event, Public, BlueprintEvent)
// Parameters:
// class UWorld*                           World                                                  (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// uint8                                   SessionEnded                                           (Parm, NoDestructor, HasGetValueTypeHash)
// uint8                                   CleanupResources                                       (Parm, NoDestructor, HasGetValueTypeHash)

void ADispLib_EditorDBCPreviewToolActor::OnWorldCleanup(class UWorld* World, uint8 SessionEnded, uint8 CleanupResources)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("DispLib_EditorDBCPreviewToolActor", "OnWorldCleanup");

	Params::DispLib_EditorDBCPreviewToolActor_OnWorldCleanup Parms{};

	Parms.World = World;
	Parms.SessionEnded = SessionEnded;
	Parms.CleanupResources = CleanupResources;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function b1-Managed.DispLib_EditorDBCPreviewToolActor.ReceiveTick
// (Native, Event, Public, BlueprintEvent)
// Parameters:
// float                                   DeltaSeconds                                           (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ADispLib_EditorDBCPreviewToolActor::ReceiveTick(float DeltaSeconds)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("DispLib_EditorDBCPreviewToolActor", "ReceiveTick");

	Params::DispLib_EditorDBCPreviewToolActor_ReceiveTick Parms{};

	Parms.DeltaSeconds = DeltaSeconds;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function b1-Managed.BED_StateNode.IsSupportViewType
// (Native, Event, Public, HasOutParams, BlueprintEvent, Const)
// Parameters:
// ECalliopeViewType                       InViewType                                             (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// uint8                                   ReturnValue                                            (Parm, OutParm, ReturnParm, NoDestructor, HasGetValueTypeHash)

uint8 UBED_StateNode::IsSupportViewType(const ECalliopeViewType& InViewType) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BED_StateNode", "IsSupportViewType");

	Params::BED_StateNode_IsSupportViewType Parms{};

	Parms.InViewType = InViewType;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function b1-Managed.DispLib_EditorExportLevelToHoudini.SelectActorsByNotMeragedActorsJson
// (Native, Public, BlueprintCallable)

void ADispLib_EditorExportLevelToHoudini::SelectActorsByNotMeragedActorsJson()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("DispLib_EditorExportLevelToHoudini", "SelectActorsByNotMeragedActorsJson");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function b1-Managed.DispLib_EditorExportLevelToHoudini.ExportActorBoundsDescriptionJson
// (Native, Public, BlueprintCallable)

void ADispLib_EditorExportLevelToHoudini::ExportActorBoundsDescriptionJson()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("DispLib_EditorExportLevelToHoudini", "ExportActorBoundsDescriptionJson");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function b1-Managed.DispLib_EditorExportLevelToHoudini.ExportSplineDescriptionJson
// (Native, Public, BlueprintCallable)

void ADispLib_EditorExportLevelToHoudini::ExportSplineDescriptionJson()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("DispLib_EditorExportLevelToHoudini", "ExportSplineDescriptionJson");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function b1-Managed.DispLib_EditorExportLevelToHoudini.ExportLevelDescriptionJson
// (Native, Public, BlueprintCallable)

void ADispLib_EditorExportLevelToHoudini::ExportLevelDescriptionJson()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("DispLib_EditorExportLevelToHoudini", "ExportLevelDescriptionJson");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function b1-Managed.DispLib_EditorExportLevelToHoudini.SelectActorsByHeightLimit
// (Native, Public, BlueprintCallable)

void ADispLib_EditorExportLevelToHoudini::SelectActorsByHeightLimit()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("DispLib_EditorExportLevelToHoudini", "SelectActorsByHeightLimit");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function b1-Managed.DispLib_EditorExportLevelToHoudini.SelectActorsInLimitBox
// (Native, Public, BlueprintCallable)

void ADispLib_EditorExportLevelToHoudini::SelectActorsInLimitBox()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("DispLib_EditorExportLevelToHoudini", "SelectActorsInLimitBox");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function b1-Managed.DispLib_EditorExportLevelToHoudini.ExportLevelToHoudini
// (Native, Public, BlueprintCallable)

void ADispLib_EditorExportLevelToHoudini::ExportLevelToHoudini()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("DispLib_EditorExportLevelToHoudini", "ExportLevelToHoudini");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function b1-Managed.DispLib_EditorExportLevelToHoudini.ImportLimitBoxInfo
// (Native, Public, BlueprintCallable)

void ADispLib_EditorExportLevelToHoudini::ImportLimitBoxInfo()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("DispLib_EditorExportLevelToHoudini", "ImportLimitBoxInfo");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function b1-Managed.DispLib_EditorExportLevelToHoudini.ExportMeshAssets
// (Native, Public, BlueprintCallable)

void ADispLib_EditorExportLevelToHoudini::ExportMeshAssets()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("DispLib_EditorExportLevelToHoudini", "ExportMeshAssets");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function b1-Managed.PerformerParam_Performer.OnPropertyChanged
// (Native, Event, Public, Protected, BlueprintEvent)
// Parameters:
// class FString                           MemberName                                             (Parm, ZeroConstructor, HasGetValueTypeHash)
// class FString                           PropertyName                                           (Parm, ZeroConstructor, HasGetValueTypeHash)

void UPerformerParam_Performer::OnPropertyChanged(const class FString& MemberName, const class FString& PropertyName)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("PerformerParam_Performer", "OnPropertyChanged");

	Params::PerformerParam_Performer_OnPropertyChanged Parms{};

	Parms.MemberName = std::move(MemberName);
	Parms.PropertyName = std::move(PropertyName);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function b1-Managed.DispLibDebugTest_SpawnAttachedNiagara.SetVisible
// (Native, Public, BlueprintCallable)
// Parameters:
// uint8                                   Vis                                                    (Parm, NoDestructor, HasGetValueTypeHash)
// uint8                                   Child                                                  (Parm, NoDestructor, HasGetValueTypeHash)

void ADispLibDebugTest_SpawnAttachedNiagara::SetVisible(uint8 Vis, uint8 Child)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("DispLibDebugTest_SpawnAttachedNiagara", "SetVisible");

	Params::DispLibDebugTest_SpawnAttachedNiagara_SetVisible Parms{};

	Parms.Vis = Vis;
	Parms.Child = Child;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function b1-Managed.DispLibDebugTest_SpawnAttachedNiagara.SpawnNS
// (Native, Public, BlueprintCallable)

void ADispLibDebugTest_SpawnAttachedNiagara::SpawnNS()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("DispLibDebugTest_SpawnAttachedNiagara", "SpawnNS");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function b1-Managed.BGUAreaBase.OnConstructionCS
// (Native, Event, Public, Protected, BlueprintEvent)
// Parameters:
// struct FTransform                       Transform                                              (ConstParm, Parm, OutParm, ReferenceParm, IsPlainOldData, NoDestructor)

void ABGUAreaBase::OnConstructionCS(const struct FTransform& Transform)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BGUAreaBase", "OnConstructionCS");

	Params::BGUAreaBase_OnConstructionCS Parms{};

	Parms.Transform = std::move(Transform);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function b1-Managed.BGUAreaBase.ReceiveEndPlay
// (Native, Event, Public, Protected, BlueprintEvent)
// Parameters:
// EEndPlayReason                          EndPlayReason                                          (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ABGUAreaBase::ReceiveEndPlay(EEndPlayReason EndPlayReason)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BGUAreaBase", "ReceiveEndPlay");

	Params::BGUAreaBase_ReceiveEndPlay Parms{};

	Parms.EndPlayReason = EndPlayReason;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function b1-Managed.BGUAreaBase.BeginPlayCS
// (Native, Event, Public, Protected, BlueprintEvent)

void ABGUAreaBase::BeginPlayCS()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BGUAreaBase", "BeginPlayCS");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function b1-Managed.BANS_DispLibApplyWindSource.Received_NotifyTick
// (Native, Event, Public, HasOutParams, BlueprintEvent, Const)
// Parameters:
// class USkeletalMeshComponent*           MeshComp                                               (ExportObject, Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// class UAnimSequenceBase*                Animation                                              (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// float                                   FrameDeltaTime                                         (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// struct FAnimNotifyEventReference        EventReference                                         (ConstParm, Parm, OutParm, ReferenceParm)
// uint8                                   ReturnValue                                            (Parm, OutParm, ReturnParm, NoDestructor, HasGetValueTypeHash)

uint8 UBANS_DispLibApplyWindSource::Received_NotifyTick(class USkeletalMeshComponent* MeshComp, class UAnimSequenceBase* Animation, float FrameDeltaTime, const struct FAnimNotifyEventReference& EventReference) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BANS_DispLibApplyWindSource", "Received_NotifyTick");

	Params::BANS_DispLibApplyWindSource_Received_NotifyTick Parms{};

	Parms.MeshComp = MeshComp;
	Parms.Animation = Animation;
	Parms.FrameDeltaTime = FrameDeltaTime;
	Parms.EventReference = std::move(EventReference);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function b1-Managed.BANS_DispLibApplyWindSource.GSNotifyBeginCS
// (Native, Event, Public, Protected, BlueprintEvent, Const)
// Parameters:
// struct FUStGSNotifyParam                NotifyParam                                            (Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
// float                                   TotalDuration                                          (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UBANS_DispLibApplyWindSource::GSNotifyBeginCS(const struct FUStGSNotifyParam& NotifyParam, float TotalDuration) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BANS_DispLibApplyWindSource", "GSNotifyBeginCS");

	Params::BANS_DispLibApplyWindSource_GSNotifyBeginCS Parms{};

	Parms.NotifyParam = std::move(NotifyParam);
	Parms.TotalDuration = TotalDuration;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function b1-Managed.BANS_DispLibApplyWindSource.GSNotifyEndCS
// (Native, Event, Public, Protected, BlueprintEvent, Const)
// Parameters:
// struct FUStGSNotifyParam                NotifyParam                                            (Parm, ZeroConstructor, IsPlainOldData, NoDestructor)

void UBANS_DispLibApplyWindSource::GSNotifyEndCS(const struct FUStGSNotifyParam& NotifyParam) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BANS_DispLibApplyWindSource", "GSNotifyEndCS");

	Params::BANS_DispLibApplyWindSource_GSNotifyEndCS Parms{};

	Parms.NotifyParam = std::move(NotifyParam);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function b1-Managed.BAN_DispLibApplySceneInteractor.GSNotifyCS
// (Native, Event, Public, Protected, BlueprintEvent, Const)
// Parameters:
// struct FUStGSNotifyParam                NotifyParam                                            (Parm, ZeroConstructor, IsPlainOldData, NoDestructor)

void UBAN_DispLibApplySceneInteractor::GSNotifyCS(const struct FUStGSNotifyParam& NotifyParam) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BAN_DispLibApplySceneInteractor", "GSNotifyCS");

	Params::BAN_DispLibApplySceneInteractor_GSNotifyCS Parms{};

	Parms.NotifyParam = std::move(NotifyParam);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function b1-Managed.BAN_DispLibEndDBCEffects.GSNotifyCS
// (Native, Event, Public, Protected, BlueprintEvent, Const)
// Parameters:
// struct FUStGSNotifyParam                NotifyParam                                            (Parm, ZeroConstructor, IsPlainOldData, NoDestructor)

void UBAN_DispLibEndDBCEffects::GSNotifyCS(const struct FUStGSNotifyParam& NotifyParam) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BAN_DispLibEndDBCEffects", "GSNotifyCS");

	Params::BAN_DispLibEndDBCEffects_GSNotifyCS Parms{};

	Parms.NotifyParam = std::move(NotifyParam);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function b1-Managed.DispLib_EditorTreeImposterTool.DoShadowMaskTextureRenderBySceneShot
// (Native, Public, BlueprintCallable)

void ADispLib_EditorTreeImposterTool::DoShadowMaskTextureRenderBySceneShot()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("DispLib_EditorTreeImposterTool", "DoShadowMaskTextureRenderBySceneShot");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function b1-Managed.DispLib_EditorTreeImposterTool.PythonCreatePerformanceTexture
// (Native, Public, BlueprintCallable)
// Parameters:
// class FString                           CaptureRTSize_0                                        (Parm, ZeroConstructor, HasGetValueTypeHash)
// class FString                           PerformanceMatInstanceAssetPath                        (Parm, ZeroConstructor, HasGetValueTypeHash)
// class FString                           ImposterCombinedStdTextureFolderPath                   (Parm, ZeroConstructor, HasGetValueTypeHash)
// class FString                           ImposterDataTextureFolderPath                          (Parm, ZeroConstructor, HasGetValueTypeHash)
// class FString                           TrunkMaskThreshold_0                                   (Parm, ZeroConstructor, HasGetValueTypeHash)
// class FString                           LeafMaskThreshold_0                                    (Parm, ZeroConstructor, HasGetValueTypeHash)

void ADispLib_EditorTreeImposterTool::PythonCreatePerformanceTexture(const class FString& CaptureRTSize_0, const class FString& PerformanceMatInstanceAssetPath, const class FString& ImposterCombinedStdTextureFolderPath, const class FString& ImposterDataTextureFolderPath, const class FString& TrunkMaskThreshold_0, const class FString& LeafMaskThreshold_0)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("DispLib_EditorTreeImposterTool", "PythonCreatePerformanceTexture");

	Params::DispLib_EditorTreeImposterTool_PythonCreatePerformanceTexture Parms{};

	Parms.CaptureRTSize_0 = std::move(CaptureRTSize_0);
	Parms.PerformanceMatInstanceAssetPath = std::move(PerformanceMatInstanceAssetPath);
	Parms.ImposterCombinedStdTextureFolderPath = std::move(ImposterCombinedStdTextureFolderPath);
	Parms.ImposterDataTextureFolderPath = std::move(ImposterDataTextureFolderPath);
	Parms.TrunkMaskThreshold_0 = std::move(TrunkMaskThreshold_0);
	Parms.LeafMaskThreshold_0 = std::move(LeafMaskThreshold_0);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function b1-Managed.DispLib_EditorTreeImposterTool.DoPBRTextureRenderBySceneShot
// (Native, Public, BlueprintCallable)

void ADispLib_EditorTreeImposterTool::DoPBRTextureRenderBySceneShot()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("DispLib_EditorTreeImposterTool", "DoPBRTextureRenderBySceneShot");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function b1-Managed.DispLib_EditorTreeImposterTool.ReceiveTick
// (Native, Event, Public, BlueprintEvent)
// Parameters:
// float                                   DeltaSeconds                                           (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ADispLib_EditorTreeImposterTool::ReceiveTick(float DeltaSeconds)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("DispLib_EditorTreeImposterTool", "ReceiveTick");

	Params::DispLib_EditorTreeImposterTool_ReceiveTick Parms{};

	Parms.DeltaSeconds = DeltaSeconds;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function b1-Managed.DispLib_EditorTreeImposterTool.TestRenderCustomShadowMask
// (Native, Public, BlueprintCallable)
// Parameters:
// int32                                   CardIndex                                              (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// int32                                   ShadowMaskIndex                                        (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ADispLib_EditorTreeImposterTool::TestRenderCustomShadowMask(int32 CardIndex, int32 ShadowMaskIndex)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("DispLib_EditorTreeImposterTool", "TestRenderCustomShadowMask");

	Params::DispLib_EditorTreeImposterTool_TestRenderCustomShadowMask Parms{};

	Parms.CardIndex = CardIndex;
	Parms.ShadowMaskIndex = ShadowMaskIndex;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function b1-Managed.DispLib_EditorTreeImposterTool.CreatFinalImposterMaterial
// (Native, Public, BlueprintCallable)
// Parameters:
// uint8                                   ForceOverrideMat                                       (Parm, NoDestructor, HasGetValueTypeHash)

void ADispLib_EditorTreeImposterTool::CreatFinalImposterMaterial(uint8 ForceOverrideMat)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("DispLib_EditorTreeImposterTool", "CreatFinalImposterMaterial");

	Params::DispLib_EditorTreeImposterTool_CreatFinalImposterMaterial Parms{};

	Parms.ForceOverrideMat = ForceOverrideMat;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function b1-Managed.DispLib_EditorTreeImposterTool.RemoveAllHasGSImposterTask
// (Native, Public, BlueprintCallable)

void ADispLib_EditorTreeImposterTool::RemoveAllHasGSImposterTask()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("DispLib_EditorTreeImposterTool", "RemoveAllHasGSImposterTask");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function b1-Managed.DispLib_EditorTreeImposterTool.SetTaskListFromFolderPath
// (Native, Public, BlueprintCallable)

void ADispLib_EditorTreeImposterTool::SetTaskListFromFolderPath()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("DispLib_EditorTreeImposterTool", "SetTaskListFromFolderPath");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function b1-Managed.DispLib_EditorTreeImposterTool.DoCleanTempMemoryResource
// (Native, Public, BlueprintCallable)

void ADispLib_EditorTreeImposterTool::DoCleanTempMemoryResource()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("DispLib_EditorTreeImposterTool", "DoCleanTempMemoryResource");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function b1-Managed.DispLib_EditorTreeImposterTool.ReleaseGeneratedTextures
// (Native, Public, BlueprintCallable)

void ADispLib_EditorTreeImposterTool::ReleaseGeneratedTextures()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("DispLib_EditorTreeImposterTool", "ReleaseGeneratedTextures");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function b1-Managed.DispLib_EditorTreeImposterTool.DoCreateTreeImposterTask
// (Native, Public, BlueprintCallable)

void ADispLib_EditorTreeImposterTool::DoCreateTreeImposterTask()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("DispLib_EditorTreeImposterTool", "DoCreateTreeImposterTask");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function b1-Managed.DispLib_EditorTreeImposterTool.CreatSceneShotToolActor
// (Native, Public, HasOutParams, BlueprintCallable)
// Parameters:
// uint8                                   ReturnValue                                            (Parm, OutParm, ReturnParm, NoDestructor, HasGetValueTypeHash)

uint8 ADispLib_EditorTreeImposterTool::CreatSceneShotToolActor()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("DispLib_EditorTreeImposterTool", "CreatSceneShotToolActor");

	Params::DispLib_EditorTreeImposterTool_CreatSceneShotToolActor Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function b1-Managed.DispLib_EditorTreeImposterTool.DoSaveImposterCardMesh
// (Native, Public, BlueprintCallable)

void ADispLib_EditorTreeImposterTool::DoSaveImposterCardMesh()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("DispLib_EditorTreeImposterTool", "DoSaveImposterCardMesh");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function b1-Managed.DispLib_EditorTreeImposterTool.DoCombinedFinalTexture
// (Native, Public, HasOutParams, BlueprintCallable)
// Parameters:
// uint8                                   ReturnValue                                            (Parm, OutParm, ReturnParm, NoDestructor, HasGetValueTypeHash)

uint8 ADispLib_EditorTreeImposterTool::DoCombinedFinalTexture()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("DispLib_EditorTreeImposterTool", "DoCombinedFinalTexture");

	Params::DispLib_EditorTreeImposterTool_DoCombinedFinalTexture Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function b1-Managed.DispLib_EditorTreeImposterTool.SetAllTaskBakeZeroLOD
// (Native, Public, BlueprintCallable)

void ADispLib_EditorTreeImposterTool::SetAllTaskBakeZeroLOD()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("DispLib_EditorTreeImposterTool", "SetAllTaskBakeZeroLOD");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function b1-Managed.DispLib_EditorTreeImposterTool.CheckTaskMeshValidity
// (Native, Public, HasOutParams, BlueprintCallable)
// Parameters:
// uint8                                   ReturnValue                                            (Parm, OutParm, ReturnParm, NoDestructor, HasGetValueTypeHash)

uint8 ADispLib_EditorTreeImposterTool::CheckTaskMeshValidity()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("DispLib_EditorTreeImposterTool", "CheckTaskMeshValidity");

	Params::DispLib_EditorTreeImposterTool_CheckTaskMeshValidity Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function b1-Managed.DispLib_EditorTreeImposterTool.RemoveAllInvalidTask
// (Native, Public, BlueprintCallable)

void ADispLib_EditorTreeImposterTool::RemoveAllInvalidTask()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("DispLib_EditorTreeImposterTool", "RemoveAllInvalidTask");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function b1-Managed.DispLib_EditorTreeImposterTool.SetNewLevelEnvActor
// (Native, Public, BlueprintCallable)
// Parameters:
// uint8                                   Visable                                                (Parm, NoDestructor, HasGetValueTypeHash)

void ADispLib_EditorTreeImposterTool::SetNewLevelEnvActor(uint8 Visable)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("DispLib_EditorTreeImposterTool", "SetNewLevelEnvActor");

	Params::DispLib_EditorTreeImposterTool_SetNewLevelEnvActor Parms{};

	Parms.Visable = Visable;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function b1-Managed.DispLib_EditorTreeImposterTool.AutoDelectSceneShot
// (Native, Public, BlueprintCallable)

void ADispLib_EditorTreeImposterTool::AutoDelectSceneShot()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("DispLib_EditorTreeImposterTool", "AutoDelectSceneShot");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function b1-Managed.DispLib_EditorTreeImposterTool.AutoImportSceneShot
// (Native, Public, BlueprintCallable)

void ADispLib_EditorTreeImposterTool::AutoImportSceneShot()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("DispLib_EditorTreeImposterTool", "AutoImportSceneShot");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function b1-Managed.DispLib_EditorTreeImposterTool.CleanAllToolAssets
// (Native, Public, BlueprintCallable)

void ADispLib_EditorTreeImposterTool::CleanAllToolAssets()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("DispLib_EditorTreeImposterTool", "CleanAllToolAssets");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function b1-Managed.DispLib_EditorTreeImposterTool.CheckHDABakeResult
// (Native, Public, HasOutParams, BlueprintCallable)
// Parameters:
// uint8                                   ReturnValue                                            (Parm, OutParm, ReturnParm, NoDestructor, HasGetValueTypeHash)

uint8 ADispLib_EditorTreeImposterTool::CheckHDABakeResult()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("DispLib_EditorTreeImposterTool", "CheckHDABakeResult");

	Params::DispLib_EditorTreeImposterTool_CheckHDABakeResult Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function b1-Managed.DispLib_EditorTreeImposterTool.CreateHDAInstance
// (Native, Public, BlueprintCallable)

void ADispLib_EditorTreeImposterTool::CreateHDAInstance()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("DispLib_EditorTreeImposterTool", "CreateHDAInstance");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function b1-Managed.DispLib_EditorTreeImposterTool.LogForwardVector
// (Native, Public, BlueprintCallable)

void ADispLib_EditorTreeImposterTool::LogForwardVector()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("DispLib_EditorTreeImposterTool", "LogForwardVector");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function b1-Managed.DispLib_EditorTreeImposterTool.ToggleDebugPause
// (Native, Public, BlueprintCallable)

void ADispLib_EditorTreeImposterTool::ToggleDebugPause()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("DispLib_EditorTreeImposterTool", "ToggleDebugPause");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function b1-Managed.DispLib_EditorTreeImposterTool.FillHoudiniData
// (Native, Public, HasOutParams, BlueprintCallable)
// Parameters:
// uint8                                   ReturnValue                                            (Parm, OutParm, ReturnParm, NoDestructor, HasGetValueTypeHash)

uint8 ADispLib_EditorTreeImposterTool::FillHoudiniData()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("DispLib_EditorTreeImposterTool", "FillHoudiniData");

	Params::DispLib_EditorTreeImposterTool_FillHoudiniData Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function b1-Managed.DispLib_EditorTreeImposterTool.SetCurrentTask
// (Native, Public, HasOutParams, BlueprintCallable)
// Parameters:
// int32                                   TaskIndex                                              (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// uint8                                   ReturnValue                                            (Parm, OutParm, ReturnParm, NoDestructor, HasGetValueTypeHash)

uint8 ADispLib_EditorTreeImposterTool::SetCurrentTask(int32 TaskIndex)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("DispLib_EditorTreeImposterTool", "SetCurrentTask");

	Params::DispLib_EditorTreeImposterTool_SetCurrentTask Parms{};

	Parms.TaskIndex = TaskIndex;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function b1-Managed.DispLib_EditorTreeImposterTool.ShowCompare
// (Native, Public, BlueprintCallable)

void ADispLib_EditorTreeImposterTool::ShowCompare()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("DispLib_EditorTreeImposterTool", "ShowCompare");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function b1-Managed.DispLib_EditorTreeImposterTool.DoSetLOD
// (Native, Public, BlueprintCallable)

void ADispLib_EditorTreeImposterTool::DoSetLOD()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("DispLib_EditorTreeImposterTool", "DoSetLOD");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function b1-Managed.BAN_DispLibPlayCameraShake.GSNotifyCS
// (Native, Event, Public, Protected, BlueprintEvent, Const)
// Parameters:
// struct FUStGSNotifyParam                NotifyParam                                            (Parm, ZeroConstructor, IsPlainOldData, NoDestructor)

void UBAN_DispLibPlayCameraShake::GSNotifyCS(const struct FUStGSNotifyParam& NotifyParam) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BAN_DispLibPlayCameraShake", "GSNotifyCS");

	Params::BAN_DispLibPlayCameraShake_GSNotifyCS Parms{};

	Parms.NotifyParam = std::move(NotifyParam);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function b1-Managed.BED_ComboNode_Start.GetContextOutputsInCS
// (Native, Event, Public, HasOutParams, BlueprintEvent)
// Parameters:
// TArray<class FName>                     ReturnValue                                            (Parm, OutParm, ReturnParm)

TArray<class FName> UBED_ComboNode_Start::GetContextOutputsInCS()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BED_ComboNode_Start", "GetContextOutputsInCS");

	Params::BED_ComboNode_Start_GetContextOutputsInCS Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function b1-Managed.BED_ComboNode_Start.PostPropertyChanged
// (Native, Event, Public, BlueprintEvent)
// Parameters:
// class FString                           MemberName                                             (Parm, ZeroConstructor, HasGetValueTypeHash)
// class FString                           PropertyName                                           (Parm, ZeroConstructor, HasGetValueTypeHash)

void UBED_ComboNode_Start::PostPropertyChanged(const class FString& MemberName, const class FString& PropertyName)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BED_ComboNode_Start", "PostPropertyChanged");

	Params::BED_ComboNode_Start_PostPropertyChanged Parms{};

	Parms.MemberName = std::move(MemberName);
	Parms.PropertyName = std::move(PropertyName);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function b1-Managed.BAN_DispLibPlayCustomCameraShake.GSNotifyCS
// (Native, Event, Public, Protected, BlueprintEvent, Const)
// Parameters:
// struct FUStGSNotifyParam                NotifyParam                                            (Parm, ZeroConstructor, IsPlainOldData, NoDestructor)

void UBAN_DispLibPlayCustomCameraShake::GSNotifyCS(const struct FUStGSNotifyParam& NotifyParam) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BAN_DispLibPlayCustomCameraShake", "GSNotifyCS");

	Params::BAN_DispLibPlayCustomCameraShake_GSNotifyCS Parms{};

	Parms.NotifyParam = std::move(NotifyParam);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function b1-Managed.BED_FSMNode_GI_Loading_WaitGamePlayerInit.PostPropertyChanged
// (Native, Event, Public, BlueprintEvent)
// Parameters:
// class FString                           MemberName                                             (Parm, ZeroConstructor, HasGetValueTypeHash)
// class FString                           PropertyName                                           (Parm, ZeroConstructor, HasGetValueTypeHash)

void UBED_FSMNode_GI_Loading_WaitGamePlayerInit::PostPropertyChanged(const class FString& MemberName, const class FString& PropertyName)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BED_FSMNode_GI_Loading_WaitGamePlayerInit", "PostPropertyChanged");

	Params::BED_FSMNode_GI_Loading_WaitGamePlayerInit_PostPropertyChanged Parms{};

	Parms.MemberName = std::move(MemberName);
	Parms.PropertyName = std::move(PropertyName);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function b1-Managed.BED_FSMNode_GI_Loading_WaitGamePlayerInit.GetNodeDescriptionInCS
// (Native, Event, Public, HasOutParams, BlueprintEvent, Const)
// Parameters:
// class FString                           ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash)

class FString UBED_FSMNode_GI_Loading_WaitGamePlayerInit::GetNodeDescriptionInCS() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BED_FSMNode_GI_Loading_WaitGamePlayerInit", "GetNodeDescriptionInCS");

	Params::BED_FSMNode_GI_Loading_WaitGamePlayerInit_GetNodeDescriptionInCS Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function b1-Managed.BED_CalliopeAssetBase.PostDuplicateInCS
// (Native, Event, Public, BlueprintEvent)
// Parameters:
// uint8                                   bDuplicateForPIE                                       (Parm, NoDestructor, HasGetValueTypeHash)

void UBED_CalliopeAssetBase::PostDuplicateInCS(uint8 bDuplicateForPIE)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BED_CalliopeAssetBase", "PostDuplicateInCS");

	Params::BED_CalliopeAssetBase_PostDuplicateInCS Parms{};

	Parms.bDuplicateForPIE = bDuplicateForPIE;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function b1-Managed.BED_CalliopeAssetBase.OnPropertyChanged
// (Native, Event, Public, BlueprintEvent)
// Parameters:
// class FString                           MemberName                                             (Parm, ZeroConstructor, HasGetValueTypeHash)
// class FString                           PropertyName                                           (Parm, ZeroConstructor, HasGetValueTypeHash)

void UBED_CalliopeAssetBase::OnPropertyChanged(const class FString& MemberName, const class FString& PropertyName)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BED_CalliopeAssetBase", "OnPropertyChanged");

	Params::BED_CalliopeAssetBase_OnPropertyChanged Parms{};

	Parms.MemberName = std::move(MemberName);
	Parms.PropertyName = std::move(PropertyName);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function b1-Managed.BED_CalliopeAssetBase.OnNodeDeactivate
// (Native, Event, Public, BlueprintEvent)
// Parameters:
// class UCalliopeNode*                    Node                                                   (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UBED_CalliopeAssetBase::OnNodeDeactivate(class UCalliopeNode* Node)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BED_CalliopeAssetBase", "OnNodeDeactivate");

	Params::BED_CalliopeAssetBase_OnNodeDeactivate Parms{};

	Parms.Node = Node;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function b1-Managed.BED_CalliopeAssetBase.OnNodeActivate
// (Native, Event, Public, BlueprintEvent)
// Parameters:
// class UCalliopeNode*                    Node                                                   (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UBED_CalliopeAssetBase::OnNodeActivate(class UCalliopeNode* Node)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BED_CalliopeAssetBase", "OnNodeActivate");

	Params::BED_CalliopeAssetBase_OnNodeActivate Parms{};

	Parms.Node = Node;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function b1-Managed.BED_CalliopeAssetBase.UnregisterNode
// (Native, Event, Public, BlueprintEvent)
// Parameters:
// struct FCalliopeGuid                    NodeGuid                                               (ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, HasGetValueTypeHash)

void UBED_CalliopeAssetBase::UnregisterNode(const struct FCalliopeGuid& NodeGuid)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BED_CalliopeAssetBase", "UnregisterNode");

	Params::BED_CalliopeAssetBase_UnregisterNode Parms{};

	Parms.NodeGuid = std::move(NodeGuid);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function b1-Managed.BED_CalliopeAssetBase.ExportToData
// (Native, Event, Public, HasOutParams, BlueprintEvent)
// Parameters:
// uint8                                   ReturnValue                                            (Parm, OutParm, ReturnParm, NoDestructor, HasGetValueTypeHash)

uint8 UBED_CalliopeAssetBase::ExportToData()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BED_CalliopeAssetBase", "ExportToData");

	Params::BED_CalliopeAssetBase_ExportToData Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function b1-Managed.BED_CalliopeAssetBase.RegisterNode
// (Native, Event, Public, BlueprintEvent)
// Parameters:
// struct FCalliopeGuid                    NewGuid                                                (ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, HasGetValueTypeHash)
// class UCalliopeNode*                    NewNode                                                (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UBED_CalliopeAssetBase::RegisterNode(const struct FCalliopeGuid& NewGuid, class UCalliopeNode* NewNode)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BED_CalliopeAssetBase", "RegisterNode");

	Params::BED_CalliopeAssetBase_RegisterNode Parms{};

	Parms.NewGuid = std::move(NewGuid);
	Parms.NewNode = NewNode;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function b1-Managed.BED_CalliopeAssetBase.GetObserveActorNodes
// (Native, Public, HasOutParams, BlueprintCallable)
// Parameters:
// TArray<class UBED_QuestNode_ObserveByCondition*>ReturnValue                                            (Parm, OutParm, ReturnParm)

TArray<class UBED_QuestNode_ObserveByCondition*> UBED_CalliopeAssetBase::GetObserveActorNodes()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BED_CalliopeAssetBase", "GetObserveActorNodes");

	Params::BED_CalliopeAssetBase_GetObserveActorNodes Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function b1-Managed.BED_CalliopeAssetBase.ExportDataByExtern
// (Native, Public, HasOutParams, BlueprintCallable)
// Parameters:
// uint8                                   ReturnValue                                            (Parm, OutParm, ReturnParm, NoDestructor, HasGetValueTypeHash)

uint8 UBED_CalliopeAssetBase::ExportDataByExtern()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BED_CalliopeAssetBase", "ExportDataByExtern");

	Params::BED_CalliopeAssetBase_ExportDataByExtern Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function b1-Managed.BED_CalliopeAssetBase.GetSubGraphNodes
// (Native, Public, HasOutParams, BlueprintCallable)
// Parameters:
// TArray<class UBED_QuestNode_SubGraph*>  ReturnValue                                            (Parm, OutParm, ReturnParm)

TArray<class UBED_QuestNode_SubGraph*> UBED_CalliopeAssetBase::GetSubGraphNodes()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BED_CalliopeAssetBase", "GetSubGraphNodes");

	Params::BED_CalliopeAssetBase_GetSubGraphNodes Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function b1-Managed.BED_CalliopeAssetBase.GetExtraDefaultOutputNodesInBranchGraph
// (Native, Event, Public, HasOutParams, BlueprintEvent, Const)
// Parameters:
// TArray<class UClass*>                   OutClasses                                             (Parm, OutParm)
// int32                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

int32 UBED_CalliopeAssetBase::GetExtraDefaultOutputNodesInBranchGraph(TArray<class UClass*>* OutClasses) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BED_CalliopeAssetBase", "GetExtraDefaultOutputNodesInBranchGraph");

	Params::BED_CalliopeAssetBase_GetExtraDefaultOutputNodesInBranchGraph Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	if (OutClasses != nullptr)
		*OutClasses = std::move(Parms.OutClasses);

	return Parms.ReturnValue;
}


// Function b1-Managed.BED_CalliopeAssetBase.GetExtraDefaultInputNodesInBranchGraph
// (Native, Event, Public, HasOutParams, BlueprintEvent, Const)
// Parameters:
// TArray<class UClass*>                   OutClasses                                             (Parm, OutParm)
// int32                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

int32 UBED_CalliopeAssetBase::GetExtraDefaultInputNodesInBranchGraph(TArray<class UClass*>* OutClasses) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BED_CalliopeAssetBase", "GetExtraDefaultInputNodesInBranchGraph");

	Params::BED_CalliopeAssetBase_GetExtraDefaultInputNodesInBranchGraph Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	if (OutClasses != nullptr)
		*OutClasses = std::move(Parms.OutClasses);

	return Parms.ReturnValue;
}


// Function b1-Managed.BED_CalliopeAssetBase.GetRerouteNodeClassInBranchGraph
// (Native, Event, Public, HasOutParams, BlueprintEvent, Const)
// Parameters:
// class UClass*                           ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

class UClass* UBED_CalliopeAssetBase::GetRerouteNodeClassInBranchGraph() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BED_CalliopeAssetBase", "GetRerouteNodeClassInBranchGraph");

	Params::BED_CalliopeAssetBase_GetRerouteNodeClassInBranchGraph Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function b1-Managed.BED_CalliopeAssetBase.GetStartNodeClassInBranchGraph
// (Native, Event, Public, HasOutParams, BlueprintEvent, Const)
// Parameters:
// class UClass*                           ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

class UClass* UBED_CalliopeAssetBase::GetStartNodeClassInBranchGraph() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BED_CalliopeAssetBase", "GetStartNodeClassInBranchGraph");

	Params::BED_CalliopeAssetBase_GetStartNodeClassInBranchGraph Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function b1-Managed.BED_CalliopeAssetBase.GetExtraDefaultOutputNodes
// (Native, Event, Public, HasOutParams, BlueprintEvent, Const)
// Parameters:
// TArray<class UClass*>                   OutClasses                                             (Parm, OutParm)
// int32                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

int32 UBED_CalliopeAssetBase::GetExtraDefaultOutputNodes(TArray<class UClass*>* OutClasses) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BED_CalliopeAssetBase", "GetExtraDefaultOutputNodes");

	Params::BED_CalliopeAssetBase_GetExtraDefaultOutputNodes Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	if (OutClasses != nullptr)
		*OutClasses = std::move(Parms.OutClasses);

	return Parms.ReturnValue;
}


// Function b1-Managed.BED_CalliopeAssetBase.GetExtraDefaultInputNodes
// (Native, Event, Public, HasOutParams, BlueprintEvent, Const)
// Parameters:
// TArray<class UClass*>                   OutClasses                                             (Parm, OutParm)
// int32                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

int32 UBED_CalliopeAssetBase::GetExtraDefaultInputNodes(TArray<class UClass*>* OutClasses) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BED_CalliopeAssetBase", "GetExtraDefaultInputNodes");

	Params::BED_CalliopeAssetBase_GetExtraDefaultInputNodes Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	if (OutClasses != nullptr)
		*OutClasses = std::move(Parms.OutClasses);

	return Parms.ReturnValue;
}


// Function b1-Managed.BED_CalliopeAssetBase.GetRerouteNodeClass
// (Native, Event, Public, HasOutParams, BlueprintEvent, Const)
// Parameters:
// class UClass*                           ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

class UClass* UBED_CalliopeAssetBase::GetRerouteNodeClass() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BED_CalliopeAssetBase", "GetRerouteNodeClass");

	Params::BED_CalliopeAssetBase_GetRerouteNodeClass Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function b1-Managed.BED_CalliopeAssetBase.PostStartInstance
// (Native, Event, Public, BlueprintEvent, Const)

void UBED_CalliopeAssetBase::PostStartInstance() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BED_CalliopeAssetBase", "PostStartInstance");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function b1-Managed.BED_CalliopeAssetBase.PreFinishInstance
// (Native, Event, Public, BlueprintEvent, Const)

void UBED_CalliopeAssetBase::PreFinishInstance() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BED_CalliopeAssetBase", "PreFinishInstance");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function b1-Managed.BED_CalliopeAssetBase.GetStartNodeClass
// (Native, Event, Public, HasOutParams, BlueprintEvent, Const)
// Parameters:
// class UClass*                           ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

class UClass* UBED_CalliopeAssetBase::GetStartNodeClass() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BED_CalliopeAssetBase", "GetStartNodeClass");

	Params::BED_CalliopeAssetBase_GetStartNodeClass Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function b1-Managed.BED_CalliopeAssetBase.GetCustomOutputs
// (Native, Event, Public, HasOutParams, BlueprintEvent, Const)
// Parameters:
// TArray<class FName>                     ReturnValue                                            (Parm, OutParm, ReturnParm)

TArray<class FName> UBED_CalliopeAssetBase::GetCustomOutputs() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BED_CalliopeAssetBase", "GetCustomOutputs");

	Params::BED_CalliopeAssetBase_GetCustomOutputs Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function b1-Managed.BED_CalliopeAssetBase.GetCustomInputs
// (Native, Event, Public, HasOutParams, BlueprintEvent, Const)
// Parameters:
// TArray<class FName>                     ReturnValue                                            (Parm, OutParm, ReturnParm)

TArray<class FName> UBED_CalliopeAssetBase::GetCustomInputs() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BED_CalliopeAssetBase", "GetCustomInputs");

	Params::BED_CalliopeAssetBase_GetCustomInputs Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function b1-Managed.BED_CalliopeAssetBase.GetViewType
// (Native, Event, Public, HasOutParams, BlueprintEvent, Const)
// Parameters:
// ECalliopeViewType                       ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

ECalliopeViewType UBED_CalliopeAssetBase::GetViewType() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BED_CalliopeAssetBase", "GetViewType");

	Params::BED_CalliopeAssetBase_GetViewType Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function b1-Managed.BED_CalliopeAssetBase.GetNodes
// (Native, Event, Public, HasOutParams, BlueprintEvent, Const)
// Parameters:
// TMap<struct FCalliopeGuid, class UCalliopeNode*>ReturnValue                                            (Parm, OutParm, ReturnParm)

TMap<struct FCalliopeGuid, class UCalliopeNode*> UBED_CalliopeAssetBase::GetNodes() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BED_CalliopeAssetBase", "GetNodes");

	Params::BED_CalliopeAssetBase_GetNodes Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function b1-Managed.BED_CalliopeAssetBase.GetNode
// (Native, Event, Public, HasOutParams, BlueprintEvent, Const)
// Parameters:
// struct FCalliopeGuid                    InGuid                                                 (ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, HasGetValueTypeHash)
// class UCalliopeNode*                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

class UCalliopeNode* UBED_CalliopeAssetBase::GetNode(const struct FCalliopeGuid& InGuid) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BED_CalliopeAssetBase", "GetNode");

	Params::BED_CalliopeAssetBase_GetNode Parms{};

	Parms.InGuid = std::move(InGuid);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function b1-Managed.BED_CalliopeAssetBase.GetActorGuidOptions
// (Native, Event, Public, HasOutParams, BlueprintEvent, Const)
// Parameters:
// class FString                           PropertyName                                           (Parm, ZeroConstructor, HasGetValueTypeHash)
// TArray<struct FActorGuidOption>         OutOptions                                             (Parm, OutParm)
// int32                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

int32 UBED_CalliopeAssetBase::GetActorGuidOptions(const class FString& PropertyName, TArray<struct FActorGuidOption>* OutOptions) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BED_CalliopeAssetBase", "GetActorGuidOptions");

	Params::BED_CalliopeAssetBase_GetActorGuidOptions Parms{};

	Parms.PropertyName = std::move(PropertyName);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	if (OutOptions != nullptr)
		*OutOptions = std::move(Parms.OutOptions);

	return Parms.ReturnValue;
}


// Function b1-Managed.BED_CalliopeAssetBase.CanManageStates
// (Native, Event, Public, HasOutParams, BlueprintEvent, Const)
// Parameters:
// uint8                                   ReturnValue                                            (Parm, OutParm, ReturnParm, NoDestructor, HasGetValueTypeHash)

uint8 UBED_CalliopeAssetBase::CanManageStates() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BED_CalliopeAssetBase", "CanManageStates");

	Params::BED_CalliopeAssetBase_CanManageStates Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function b1-Managed.BED_CalliopeAssetBase.GetActorGuid
// (Native, Event, Public, HasOutParams, BlueprintEvent, Const)
// Parameters:
// class AActor*                           InActor                                                (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// class FString                           OutActorGuid                                           (Parm, OutParm, ZeroConstructor, HasGetValueTypeHash)
// uint8                                   ReturnValue                                            (Parm, OutParm, ReturnParm, NoDestructor, HasGetValueTypeHash)

uint8 UBED_CalliopeAssetBase::GetActorGuid(class AActor* InActor, class FString* OutActorGuid) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BED_CalliopeAssetBase", "GetActorGuid");

	Params::BED_CalliopeAssetBase_GetActorGuid Parms{};

	Parms.InActor = InActor;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	if (OutActorGuid != nullptr)
		*OutActorGuid = std::move(Parms.OutActorGuid);

	return Parms.ReturnValue;
}


// Function b1-Managed.BED_SkillAsset.GetExtraDefaultOutputNodesInBranchGraph
// (Native, Event, Public, HasOutParams, BlueprintEvent, Const)
// Parameters:
// TArray<class UClass*>                   OutClasses                                             (Parm, OutParm)
// int32                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

int32 UBED_SkillAsset::GetExtraDefaultOutputNodesInBranchGraph(TArray<class UClass*>* OutClasses) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BED_SkillAsset", "GetExtraDefaultOutputNodesInBranchGraph");

	Params::BED_SkillAsset_GetExtraDefaultOutputNodesInBranchGraph Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	if (OutClasses != nullptr)
		*OutClasses = std::move(Parms.OutClasses);

	return Parms.ReturnValue;
}


// Function b1-Managed.BED_SkillAsset.GetExtraDefaultInputNodesInBranchGraph
// (Native, Event, Public, HasOutParams, BlueprintEvent, Const)
// Parameters:
// TArray<class UClass*>                   OutClasses                                             (Parm, OutParm)
// int32                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

int32 UBED_SkillAsset::GetExtraDefaultInputNodesInBranchGraph(TArray<class UClass*>* OutClasses) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BED_SkillAsset", "GetExtraDefaultInputNodesInBranchGraph");

	Params::BED_SkillAsset_GetExtraDefaultInputNodesInBranchGraph Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	if (OutClasses != nullptr)
		*OutClasses = std::move(Parms.OutClasses);

	return Parms.ReturnValue;
}


// Function b1-Managed.BED_SkillAsset.GetRerouteNodeClassInBranchGraph
// (Native, Event, Public, HasOutParams, BlueprintEvent, Const)
// Parameters:
// class UClass*                           ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

class UClass* UBED_SkillAsset::GetRerouteNodeClassInBranchGraph() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BED_SkillAsset", "GetRerouteNodeClassInBranchGraph");

	Params::BED_SkillAsset_GetRerouteNodeClassInBranchGraph Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function b1-Managed.BED_SkillAsset.GetStartNodeClassInBranchGraph
// (Native, Event, Public, HasOutParams, BlueprintEvent, Const)
// Parameters:
// class UClass*                           ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

class UClass* UBED_SkillAsset::GetStartNodeClassInBranchGraph() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BED_SkillAsset", "GetStartNodeClassInBranchGraph");

	Params::BED_SkillAsset_GetStartNodeClassInBranchGraph Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function b1-Managed.BED_SkillAsset.GetExtraDefaultOutputNodes
// (Native, Event, Public, HasOutParams, BlueprintEvent, Const)
// Parameters:
// TArray<class UClass*>                   OutClasses                                             (Parm, OutParm)
// int32                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

int32 UBED_SkillAsset::GetExtraDefaultOutputNodes(TArray<class UClass*>* OutClasses) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BED_SkillAsset", "GetExtraDefaultOutputNodes");

	Params::BED_SkillAsset_GetExtraDefaultOutputNodes Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	if (OutClasses != nullptr)
		*OutClasses = std::move(Parms.OutClasses);

	return Parms.ReturnValue;
}


// Function b1-Managed.BED_SkillAsset.GetExtraDefaultInputNodes
// (Native, Event, Public, HasOutParams, BlueprintEvent, Const)
// Parameters:
// TArray<class UClass*>                   OutClasses                                             (Parm, OutParm)
// int32                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

int32 UBED_SkillAsset::GetExtraDefaultInputNodes(TArray<class UClass*>* OutClasses) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BED_SkillAsset", "GetExtraDefaultInputNodes");

	Params::BED_SkillAsset_GetExtraDefaultInputNodes Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	if (OutClasses != nullptr)
		*OutClasses = std::move(Parms.OutClasses);

	return Parms.ReturnValue;
}


// Function b1-Managed.BED_SkillAsset.GetRerouteNodeClass
// (Native, Event, Public, HasOutParams, BlueprintEvent, Const)
// Parameters:
// class UClass*                           ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

class UClass* UBED_SkillAsset::GetRerouteNodeClass() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BED_SkillAsset", "GetRerouteNodeClass");

	Params::BED_SkillAsset_GetRerouteNodeClass Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function b1-Managed.BED_SkillAsset.GetStartNodeClass
// (Native, Event, Public, HasOutParams, BlueprintEvent, Const)
// Parameters:
// class UClass*                           ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

class UClass* UBED_SkillAsset::GetStartNodeClass() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BED_SkillAsset", "GetStartNodeClass");

	Params::BED_SkillAsset_GetStartNodeClass Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function b1-Managed.BED_SkillAsset.GetViewType
// (Native, Event, Public, HasOutParams, BlueprintEvent, Const)
// Parameters:
// ECalliopeViewType                       ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

ECalliopeViewType UBED_SkillAsset::GetViewType() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BED_SkillAsset", "GetViewType");

	Params::BED_SkillAsset_GetViewType Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function b1-Managed.BAN_DispLibPlayDBCDataAsset.GSNotifyCS
// (Native, Event, Public, Protected, BlueprintEvent, Const)
// Parameters:
// struct FUStGSNotifyParam                NotifyParam                                            (Parm, ZeroConstructor, IsPlainOldData, NoDestructor)

void UBAN_DispLibPlayDBCDataAsset::GSNotifyCS(const struct FUStGSNotifyParam& NotifyParam) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BAN_DispLibPlayDBCDataAsset", "GSNotifyCS");

	Params::BAN_DispLibPlayDBCDataAsset_GSNotifyCS Parms{};

	Parms.NotifyParam = std::move(NotifyParam);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function b1-Managed.PlayerTransactionEventCollection.InteractTransactionStart
// (Net, NetReliable, Native, Event, Public, NetServer)
// Parameters:
// struct FPlayerTransactionInteractStartParamsParam                                                  (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UPlayerTransactionEventCollection::InteractTransactionStart(const struct FPlayerTransactionInteractStartParams& Param)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("PlayerTransactionEventCollection", "InteractTransactionStart");

	Params::PlayerTransactionEventCollection_InteractTransactionStart Parms{};

	Parms.Param = std::move(Param);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function b1-Managed.BAN_DispLibSimpleRibbonTrailsArray.GetSoftReferences
// (Native, Event, Public, HasOutParams, BlueprintEvent, Const)
// Parameters:
// TArray<struct FSoftObjectPath>          ReturnValue                                            (Parm, OutParm, ReturnParm)

TArray<struct FSoftObjectPath> UBAN_DispLibSimpleRibbonTrailsArray::GetSoftReferences() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BAN_DispLibSimpleRibbonTrailsArray", "GetSoftReferences");

	Params::BAN_DispLibSimpleRibbonTrailsArray_GetSoftReferences Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function b1-Managed.StructGCTest.DestroyFX
// (Native, Public, BlueprintCallable)

void AStructGCTest::DestroyFX()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("StructGCTest", "DestroyFX");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function b1-Managed.StructGCTest.DoCheck
// (Native, Public, BlueprintCallable)

void AStructGCTest::DoCheck()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("StructGCTest", "DoCheck");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function b1-Managed.StructGCTest.DoInit
// (Native, Public, BlueprintCallable)

void AStructGCTest::DoInit()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("StructGCTest", "DoInit");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function b1-Managed.BGWGameInstanceCS.OnGameModeMatchStateSetCS
// (Native, Event, Public, BlueprintEvent)
// Parameters:
// class FName                             NewMatchState                                          (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UBGWGameInstanceCS::OnGameModeMatchStateSetCS(class FName NewMatchState)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BGWGameInstanceCS", "OnGameModeMatchStateSetCS");

	Params::BGWGameInstanceCS_OnGameModeMatchStateSetCS Parms{};

	Parms.NewMatchState = NewMatchState;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function b1-Managed.BGWGameInstanceCS.ReceiveTickEvenWhenPaused
// (Native, Event, Public, BlueprintEvent)
// Parameters:
// float                                   DeltaSeconds                                           (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// int32                                   TickGroup                                              (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UBGWGameInstanceCS::ReceiveTickEvenWhenPaused(float DeltaSeconds, int32 TickGroup)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BGWGameInstanceCS", "ReceiveTickEvenWhenPaused");

	Params::BGWGameInstanceCS_ReceiveTickEvenWhenPaused Parms{};

	Parms.DeltaSeconds = DeltaSeconds;
	Parms.TickGroup = TickGroup;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function b1-Managed.BGWGameInstanceCS.GetOnlineSessionClassCS
// (Native, Event, Public, HasOutParams, BlueprintEvent)
// Parameters:
// class UClass*                           ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

class UClass* UBGWGameInstanceCS::GetOnlineSessionClassCS()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BGWGameInstanceCS", "GetOnlineSessionClassCS");

	Params::BGWGameInstanceCS_GetOnlineSessionClassCS Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function b1-Managed.BGWGameInstanceCS.StartGameInstanceForCS
// (Native, Event, Public, BlueprintEvent)
// Parameters:
// EStartGameInstanceTypeForCS             StartType                                              (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UBGWGameInstanceCS::StartGameInstanceForCS(EStartGameInstanceTypeForCS StartType)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BGWGameInstanceCS", "StartGameInstanceForCS");

	Params::BGWGameInstanceCS_StartGameInstanceForCS Parms{};

	Parms.StartType = StartType;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function b1-Managed.BGWGameInstanceCS.OnWorldTickStartCS
// (Native, Event, Public, BlueprintEvent)
// Parameters:
// class UWorld*                           World                                                  (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UBGWGameInstanceCS::OnWorldTickStartCS(class UWorld* World)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BGWGameInstanceCS", "OnWorldTickStartCS");

	Params::BGWGameInstanceCS_OnWorldTickStartCS Parms{};

	Parms.World = World;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function b1-Managed.BGWGameInstanceCS.OnPostActorTickCS
// (Native, Event, Public, BlueprintEvent)
// Parameters:
// class UWorld*                           World                                                  (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UBGWGameInstanceCS::OnPostActorTickCS(class UWorld* World)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BGWGameInstanceCS", "OnPostActorTickCS");

	Params::BGWGameInstanceCS_OnPostActorTickCS Parms{};

	Parms.World = World;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function b1-Managed.BGWGameInstanceCS.OnWorldChangedCS
// (Native, Event, Public, BlueprintEvent)
// Parameters:
// class UWorld*                           OldWorld                                               (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// class UWorld*                           NewWorld                                               (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UBGWGameInstanceCS::OnWorldChangedCS(class UWorld* OldWorld, class UWorld* NewWorld)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BGWGameInstanceCS", "OnWorldChangedCS");

	Params::BGWGameInstanceCS_OnWorldChangedCS Parms{};

	Parms.OldWorld = OldWorld;
	Parms.NewWorld = NewWorld;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function b1-Managed.BGWGameInstanceCS.ReceiveShutdown
// (Native, Event, Public, BlueprintEvent)

void UBGWGameInstanceCS::ReceiveShutdown()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BGWGameInstanceCS", "ReceiveShutdown");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function b1-Managed.BGWGameInstanceCS.ReceiveInit
// (Native, Event, Public, BlueprintEvent)

void UBGWGameInstanceCS::ReceiveInit()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BGWGameInstanceCS", "ReceiveInit");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function b1-Managed.BGWGameInstanceCS.ReceiveTick
// (Native, Event, Public, BlueprintEvent)
// Parameters:
// float                                   DeltaSeconds                                           (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// int32                                   TickGroup                                              (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UBGWGameInstanceCS::ReceiveTick(float DeltaSeconds, int32 TickGroup)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BGWGameInstanceCS", "ReceiveTick");

	Params::BGWGameInstanceCS_ReceiveTick Parms{};

	Parms.DeltaSeconds = DeltaSeconds;
	Parms.TickGroup = TickGroup;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function b1-Managed.BAN_DispLibUnitArtFresnel.GSNotifyCS
// (Native, Event, Public, Protected, BlueprintEvent, Const)
// Parameters:
// struct FUStGSNotifyParam                NotifyParam                                            (Parm, ZeroConstructor, IsPlainOldData, NoDestructor)

void UBAN_DispLibUnitArtFresnel::GSNotifyCS(const struct FUStGSNotifyParam& NotifyParam) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BAN_DispLibUnitArtFresnel", "GSNotifyCS");

	Params::BAN_DispLibUnitArtFresnel_GSNotifyCS Parms{};

	Parms.NotifyParam = std::move(NotifyParam);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function b1-Managed.BGU_DispLibDBCCarrierActor.PostInitializeComponentsCS
// (Native, Event, Public, Protected, BlueprintEvent)

void ABGU_DispLibDBCCarrierActor::PostInitializeComponentsCS()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BGU_DispLibDBCCarrierActor", "PostInitializeComponentsCS");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function b1-Managed.BGU_DispLibDBCCarrierActor.ApplyWorldOffsetCS
// (Native, Event, Public, Protected, BlueprintEvent)
// Parameters:
// struct FVector                          InOffset                                               (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// uint8                                   bWorldShift                                            (Parm, NoDestructor, HasGetValueTypeHash)

void ABGU_DispLibDBCCarrierActor::ApplyWorldOffsetCS(const struct FVector& InOffset, uint8 bWorldShift)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BGU_DispLibDBCCarrierActor", "ApplyWorldOffsetCS");

	Params::BGU_DispLibDBCCarrierActor_ApplyWorldOffsetCS Parms{};

	Parms.InOffset = std::move(InOffset);
	Parms.bWorldShift = bWorldShift;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function b1-Managed.BED_FSMNode_GI_Loading_WaitLocalPlayerFillLoginOption.PostPropertyChanged
// (Native, Event, Public, BlueprintEvent)
// Parameters:
// class FString                           MemberName                                             (Parm, ZeroConstructor, HasGetValueTypeHash)
// class FString                           PropertyName                                           (Parm, ZeroConstructor, HasGetValueTypeHash)

void UBED_FSMNode_GI_Loading_WaitLocalPlayerFillLoginOption::PostPropertyChanged(const class FString& MemberName, const class FString& PropertyName)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BED_FSMNode_GI_Loading_WaitLocalPlayerFillLoginOption", "PostPropertyChanged");

	Params::BED_FSMNode_GI_Loading_WaitLocalPlayerFillLoginOption_PostPropertyChanged Parms{};

	Parms.MemberName = std::move(MemberName);
	Parms.PropertyName = std::move(PropertyName);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function b1-Managed.BED_FSMNode_GI_Loading_WaitLocalPlayerFillLoginOption.GetNodeDescriptionInCS
// (Native, Event, Public, HasOutParams, BlueprintEvent, Const)
// Parameters:
// class FString                           ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash)

class FString UBED_FSMNode_GI_Loading_WaitLocalPlayerFillLoginOption::GetNodeDescriptionInCS() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BED_FSMNode_GI_Loading_WaitLocalPlayerFillLoginOption", "GetNodeDescriptionInCS");

	Params::BED_FSMNode_GI_Loading_WaitLocalPlayerFillLoginOption_GetNodeDescriptionInCS Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function b1-Managed.BWS_EnvInteractiveCapture.RemoveInteractor
// (Native, Public, BlueprintCallable)
// Parameters:
// int32                                   InteractorID                                           (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ABWS_EnvInteractiveCapture::RemoveInteractor(int32 InteractorID)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BWS_EnvInteractiveCapture", "RemoveInteractor");

	Params::BWS_EnvInteractiveCapture_RemoveInteractor Parms{};

	Parms.InteractorID = InteractorID;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function b1-Managed.BWS_EnvInteractiveCapture.AddInteractor
// (Native, Public, HasOutParams, BlueprintCallable)
// Parameters:
// class UPrimitiveComponent*              PrimComp                                               (ExportObject, Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// int32                                   InteractiveType                                        (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// struct FVector                          Size                                                   (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// float                                   Intensity                                              (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// float                                   Duration                                               (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// int32                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

int32 ABWS_EnvInteractiveCapture::AddInteractor(class UPrimitiveComponent* PrimComp, int32 InteractiveType, const struct FVector& Size, float Intensity, float Duration)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BWS_EnvInteractiveCapture", "AddInteractor");

	Params::BWS_EnvInteractiveCapture_AddInteractor Parms{};

	Parms.PrimComp = PrimComp;
	Parms.InteractiveType = InteractiveType;
	Parms.Size = std::move(Size);
	Parms.Intensity = Intensity;
	Parms.Duration = Duration;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function b1-Managed.BWS_EnvInteractiveCapture.OnTickCapture
// (Native, Public, BlueprintCallable)

void ABWS_EnvInteractiveCapture::OnTickCapture()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BWS_EnvInteractiveCapture", "OnTickCapture");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function b1-Managed.BWS_EnvInteractiveCapture.OnEnableDebug
// (Native, Event, Public, BlueprintCallable, BlueprintEvent)

void ABWS_EnvInteractiveCapture::OnEnableDebug()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BWS_EnvInteractiveCapture", "OnEnableDebug");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function b1-Managed.BWS_EnvInteractiveCapture.TriggerOnce
// (Native, Public, HasOutParams, BlueprintCallable)
// Parameters:
// struct FVector                          Position                                               (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// struct FVector                          Size                                                   (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// int32                                   InteractiveType                                        (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// float                                   Intensity                                              (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// float                                   Duration                                               (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// int32                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

int32 ABWS_EnvInteractiveCapture::TriggerOnce(const struct FVector& Position, const struct FVector& Size, int32 InteractiveType, float Intensity, float Duration)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BWS_EnvInteractiveCapture", "TriggerOnce");

	Params::BWS_EnvInteractiveCapture_TriggerOnce Parms{};

	Parms.Position = std::move(Position);
	Parms.Size = std::move(Size);
	Parms.InteractiveType = InteractiveType;
	Parms.Intensity = Intensity;
	Parms.Duration = Duration;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function b1-Managed.BWS_EnvInteractiveCapture.OnLateInit
// (Native, Event, Public, BlueprintCallable, BlueprintEvent)

void ABWS_EnvInteractiveCapture::OnLateInit()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BWS_EnvInteractiveCapture", "OnLateInit");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function b1-Managed.BWS_EnvInteractiveCapture.Init
// (Native, Public, BlueprintCallable)

void ABWS_EnvInteractiveCapture::Init()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BWS_EnvInteractiveCapture", "Init");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function b1-Managed.BWS_DispLibImageProcessor.InitParameters
// (Native, Public, BlueprintCallable)

void UBWS_DispLibImageProcessor::InitParameters()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BWS_DispLibImageProcessor", "InitParameters");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function b1-Managed.BWS_DispLibImageProcessor.CombileRGB
// (Native, Public, BlueprintCallable)
// Parameters:
// class UTexture*                         RChannel                                               (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// class UTexture*                         GChannel                                               (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// class UTexture*                         BChannel                                               (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// class UTextureRenderTarget2D*           DstTex                                                 (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// uint8                                   IsFlipVerticalAxis                                     (Parm, NoDestructor, HasGetValueTypeHash)

void UBWS_DispLibImageProcessor::CombileRGB(class UTexture* RChannel, class UTexture* GChannel, class UTexture* BChannel, class UTextureRenderTarget2D* DstTex, uint8 IsFlipVerticalAxis)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BWS_DispLibImageProcessor", "CombileRGB");

	Params::BWS_DispLibImageProcessor_CombileRGB Parms{};

	Parms.RChannel = RChannel;
	Parms.GChannel = GChannel;
	Parms.BChannel = BChannel;
	Parms.DstTex = DstTex;
	Parms.IsFlipVerticalAxis = IsFlipVerticalAxis;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function b1-Managed.BWS_DispLibImageProcessor.KawaseBlur
// (Native, Public, BlueprintCallable)
// Parameters:
// class UTexture*                         SrcTex                                                 (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// class UTextureRenderTarget2D*           DstTex                                                 (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// uint8                                   IsFlipVerticalAxis                                     (Parm, NoDestructor, HasGetValueTypeHash)

void UBWS_DispLibImageProcessor::KawaseBlur(class UTexture* SrcTex, class UTextureRenderTarget2D* DstTex, uint8 IsFlipVerticalAxis)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BWS_DispLibImageProcessor", "KawaseBlur");

	Params::BWS_DispLibImageProcessor_KawaseBlur Parms{};

	Parms.SrcTex = SrcTex;
	Parms.DstTex = DstTex;
	Parms.IsFlipVerticalAxis = IsFlipVerticalAxis;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function b1-Managed.BWS_DispLibImageProcessor.Init
// (Native, Public, BlueprintCallable)
// Parameters:
// class UObject*                          WorldContext                                           (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// class FString                           ConfigPath                                             (Parm, ZeroConstructor, HasGetValueTypeHash)

void UBWS_DispLibImageProcessor::Init(class UObject* WorldContext, const class FString& ConfigPath)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BWS_DispLibImageProcessor", "Init");

	Params::BWS_DispLibImageProcessor_Init Parms{};

	Parms.WorldContext = WorldContext;
	Parms.ConfigPath = std::move(ConfigPath);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function b1-Managed.BWS_DispLibImageProcessor.Blit
// (Native, Public, BlueprintCallable)
// Parameters:
// class UTexture*                         SrcTex                                                 (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// class UTexture*                         BlendTex                                               (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// class UTextureRenderTarget2D*           DstTex                                                 (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// float                                   BlendAlpha                                             (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// uint8                                   IsFlipVerticalAxis                                     (Parm, NoDestructor, HasGetValueTypeHash)

void UBWS_DispLibImageProcessor::Blit(class UTexture* SrcTex, class UTexture* BlendTex, class UTextureRenderTarget2D* DstTex, float BlendAlpha, uint8 IsFlipVerticalAxis)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BWS_DispLibImageProcessor", "Blit");

	Params::BWS_DispLibImageProcessor_Blit Parms{};

	Parms.SrcTex = SrcTex;
	Parms.BlendTex = BlendTex;
	Parms.DstTex = DstTex;
	Parms.BlendAlpha = BlendAlpha;
	Parms.IsFlipVerticalAxis = IsFlipVerticalAxis;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function b1-Managed.GSDispLib_PostProcessActor.OnAlreadyFinish
// (Native, Event, Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// class UGSDispLib_PostProcessContext*    Context                                                (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void AGSDispLib_PostProcessActor::OnAlreadyFinish(class UGSDispLib_PostProcessContext* Context)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GSDispLib_PostProcessActor", "OnAlreadyFinish");

	Params::GSDispLib_PostProcessActor_OnAlreadyFinish Parms{};

	Parms.Context = Context;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function b1-Managed.GSDispLib_PostProcessActor.OnAlreadyBegin
// (Native, Event, Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// class UGSDispLib_PostProcessContext*    Context                                                (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void AGSDispLib_PostProcessActor::OnAlreadyBegin(class UGSDispLib_PostProcessContext* Context)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GSDispLib_PostProcessActor", "OnAlreadyBegin");

	Params::GSDispLib_PostProcessActor_OnAlreadyBegin Parms{};

	Parms.Context = Context;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function b1-Managed.GSDispLib_PostProcessActor.OnEnterFinish
// (Native, Event, Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// class UGSDispLib_PostProcessContext*    Context                                                (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void AGSDispLib_PostProcessActor::OnEnterFinish(class UGSDispLib_PostProcessContext* Context)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GSDispLib_PostProcessActor", "OnEnterFinish");

	Params::GSDispLib_PostProcessActor_OnEnterFinish Parms{};

	Parms.Context = Context;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function b1-Managed.GSDispLib_PostProcessActor.OnEnterBegin
// (Native, Event, Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// class UGSDispLib_PostProcessContext*    Context                                                (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void AGSDispLib_PostProcessActor::OnEnterBegin(class UGSDispLib_PostProcessContext* Context)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GSDispLib_PostProcessActor", "OnEnterBegin");

	Params::GSDispLib_PostProcessActor_OnEnterBegin Parms{};

	Parms.Context = Context;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function b1-Managed.GSDispLib_PostProcessActor.OnEffectTick
// (Native, Event, Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// float                                   DeltaTime                                              (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// float                                   Progress_0                                             (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// class UGSDispLib_PostProcessContext*    Context                                                (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void AGSDispLib_PostProcessActor::OnEffectTick(float DeltaTime, float Progress_0, class UGSDispLib_PostProcessContext* Context)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GSDispLib_PostProcessActor", "OnEffectTick");

	Params::GSDispLib_PostProcessActor_OnEffectTick Parms{};

	Parms.DeltaTime = DeltaTime;
	Parms.Progress_0 = Progress_0;
	Parms.Context = Context;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function b1-Managed.GSDispLib_PostProcessActor.OnEndFinish
// (Native, Event, Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// class UGSDispLib_PostProcessContext*    Context                                                (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void AGSDispLib_PostProcessActor::OnEndFinish(class UGSDispLib_PostProcessContext* Context)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GSDispLib_PostProcessActor", "OnEndFinish");

	Params::GSDispLib_PostProcessActor_OnEndFinish Parms{};

	Parms.Context = Context;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function b1-Managed.GSDispLib_PostProcessActor.OnEndBegin
// (Native, Event, Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// class UGSDispLib_PostProcessContext*    Context                                                (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void AGSDispLib_PostProcessActor::OnEndBegin(class UGSDispLib_PostProcessContext* Context)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GSDispLib_PostProcessActor", "OnEndBegin");

	Params::GSDispLib_PostProcessActor_OnEndBegin Parms{};

	Parms.Context = Context;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function b1-Managed.GSDispLib_PostProcessActor.OnInit
// (Native, Event, Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// class UGSDispLib_PostProcessContext*    Context                                                (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// struct FUDispLib_PostPorcessCommonConf  Conf                                                   (Parm, HasGetValueTypeHash)

void AGSDispLib_PostProcessActor::OnInit(class UGSDispLib_PostProcessContext* Context, const struct FUDispLib_PostPorcessCommonConf& Conf)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GSDispLib_PostProcessActor", "OnInit");

	Params::GSDispLib_PostProcessActor_OnInit Parms{};

	Parms.Context = Context;
	Parms.Conf = std::move(Conf);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function b1-Managed.GSDispLib_PP_VaFogOfWar.OnAlreadyBegin
// (Native, Event, Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// class UGSDispLib_PostProcessContext*    Context                                                (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void AGSDispLib_PP_VaFogOfWar::OnAlreadyBegin(class UGSDispLib_PostProcessContext* Context)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GSDispLib_PP_VaFogOfWar", "OnAlreadyBegin");

	Params::GSDispLib_PP_VaFogOfWar_OnAlreadyBegin Parms{};

	Parms.Context = Context;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function b1-Managed.GSDispLib_PP_VaFogOfWar.OnEnterFinish
// (Native, Event, Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// class UGSDispLib_PostProcessContext*    Context                                                (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void AGSDispLib_PP_VaFogOfWar::OnEnterFinish(class UGSDispLib_PostProcessContext* Context)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GSDispLib_PP_VaFogOfWar", "OnEnterFinish");

	Params::GSDispLib_PP_VaFogOfWar_OnEnterFinish Parms{};

	Parms.Context = Context;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function b1-Managed.GSDispLib_PP_VaFogOfWar.OnEffectTick
// (Native, Event, Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// float                                   DeltaTime                                              (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// float                                   Progress_0                                             (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// class UGSDispLib_PostProcessContext*    Context                                                (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void AGSDispLib_PP_VaFogOfWar::OnEffectTick(float DeltaTime, float Progress_0, class UGSDispLib_PostProcessContext* Context)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GSDispLib_PP_VaFogOfWar", "OnEffectTick");

	Params::GSDispLib_PP_VaFogOfWar_OnEffectTick Parms{};

	Parms.DeltaTime = DeltaTime;
	Parms.Progress_0 = Progress_0;
	Parms.Context = Context;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function b1-Managed.GSDispLib_PP_VaFogOfWar.OnEnterBegin
// (Native, Event, Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// class UGSDispLib_PostProcessContext*    Context                                                (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void AGSDispLib_PP_VaFogOfWar::OnEnterBegin(class UGSDispLib_PostProcessContext* Context)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GSDispLib_PP_VaFogOfWar", "OnEnterBegin");

	Params::GSDispLib_PP_VaFogOfWar_OnEnterBegin Parms{};

	Parms.Context = Context;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function b1-Managed.GSDispLib_PP_VaFogOfWar.OnEndFinish
// (Native, Event, Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// class UGSDispLib_PostProcessContext*    Context                                                (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void AGSDispLib_PP_VaFogOfWar::OnEndFinish(class UGSDispLib_PostProcessContext* Context)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GSDispLib_PP_VaFogOfWar", "OnEndFinish");

	Params::GSDispLib_PP_VaFogOfWar_OnEndFinish Parms{};

	Parms.Context = Context;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function b1-Managed.GSDispLib_PP_VaFogOfWar.OnEndBegin
// (Native, Event, Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// class UGSDispLib_PostProcessContext*    Context                                                (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void AGSDispLib_PP_VaFogOfWar::OnEndBegin(class UGSDispLib_PostProcessContext* Context)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GSDispLib_PP_VaFogOfWar", "OnEndBegin");

	Params::GSDispLib_PP_VaFogOfWar_OnEndBegin Parms{};

	Parms.Context = Context;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function b1-Managed.GSDispLib_PP_VaFogOfWar.OnInit
// (Native, Event, Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// class UGSDispLib_PostProcessContext*    Context                                                (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// struct FUDispLib_PostPorcessCommonConf  Conf                                                   (Parm, HasGetValueTypeHash)

void AGSDispLib_PP_VaFogOfWar::OnInit(class UGSDispLib_PostProcessContext* Context, const struct FUDispLib_PostPorcessCommonConf& Conf)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GSDispLib_PP_VaFogOfWar", "OnInit");

	Params::GSDispLib_PP_VaFogOfWar_OnInit Parms{};

	Parms.Context = Context;
	Parms.Conf = std::move(Conf);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function b1-Managed.BED_QuestNode_StartWaveSpawnByChallenge.GetNodeDescriptionInCS
// (Native, Event, Public, HasOutParams, BlueprintEvent, Const)
// Parameters:
// class FString                           ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash)

class FString UBED_QuestNode_StartWaveSpawnByChallenge::GetNodeDescriptionInCS() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BED_QuestNode_StartWaveSpawnByChallenge", "GetNodeDescriptionInCS");

	Params::BED_QuestNode_StartWaveSpawnByChallenge_GetNodeDescriptionInCS Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function b1-Managed.BUAnimPerformer.BlueprintInitializeAnimation
// (Native, Event, Public, BlueprintEvent)

void UBUAnimPerformer::BlueprintInitializeAnimation()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BUAnimPerformer", "BlueprintInitializeAnimation");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function b1-Managed.BUAnimPerformer.BlueprintUpdateAnimation
// (Native, Event, Public, BlueprintEvent)
// Parameters:
// float                                   DeltaTimeX                                             (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UBUAnimPerformer::BlueprintUpdateAnimation(float DeltaTimeX)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BUAnimPerformer", "BlueprintUpdateAnimation");

	Params::BUAnimPerformer_BlueprintUpdateAnimation Parms{};

	Parms.DeltaTimeX = DeltaTimeX;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function b1-Managed.BUAnimPerformer.GetRandomBlinkAnim
// (Native, Public, Private, HasOutParams, BlueprintCallable)
// Parameters:
// struct FAnimUpdateContext               Context                                                (Parm, OutParm, ReferenceParm)
// struct FAnimNodeReference               Node                                                   (Parm, OutParm, ReferenceParm, NoDestructor)

void UBUAnimPerformer::GetRandomBlinkAnim(struct FAnimUpdateContext& Context, struct FAnimNodeReference& Node)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BUAnimPerformer", "GetRandomBlinkAnim");

	Params::BUAnimPerformer_GetRandomBlinkAnim Parms{};

	Parms.Context = std::move(Context);
	Parms.Node = std::move(Node);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	Context = std::move(Parms.Context);
	Node = std::move(Parms.Node);
}


// Function b1-Managed.SplineFlyMoveTriggerCompFunctionBinder.OnCollisionBeginOverlap
// (Native, Public, Private)
// Parameters:
// class UPrimitiveComponent*              OverlappedComponent                                    (ExportObject, Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// class AActor*                           OtherActor                                             (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// class UPrimitiveComponent*              OtherComp                                              (ExportObject, Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// int32                                   OtherBodyIndex                                         (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// uint8                                   bFromSweep                                             (Parm, NoDestructor, HasGetValueTypeHash)
// struct FHitResult                       SweepResult                                            (Parm, IsPlainOldData, NoDestructor)

void USplineFlyMoveTriggerCompFunctionBinder::OnCollisionBeginOverlap(class UPrimitiveComponent* OverlappedComponent, class AActor* OtherActor, class UPrimitiveComponent* OtherComp, int32 OtherBodyIndex, uint8 bFromSweep, const struct FHitResult& SweepResult)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SplineFlyMoveTriggerCompFunctionBinder", "OnCollisionBeginOverlap");

	Params::SplineFlyMoveTriggerCompFunctionBinder_OnCollisionBeginOverlap Parms{};

	Parms.OverlappedComponent = OverlappedComponent;
	Parms.OtherActor = OtherActor;
	Parms.OtherComp = OtherComp;
	Parms.OtherBodyIndex = OtherBodyIndex;
	Parms.bFromSweep = bFromSweep;
	Parms.SweepResult = std::move(SweepResult);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function b1-Managed.SplineFlyMoveTriggerCompFunctionBinder.OnCollisionEndOverlap
// (Native, Public, Private)
// Parameters:
// class UPrimitiveComponent*              OverlappedComponent                                    (ExportObject, Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// class AActor*                           OtherActor                                             (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// class UPrimitiveComponent*              OtherComp                                              (ExportObject, Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// int32                                   OtherBodyIndex                                         (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void USplineFlyMoveTriggerCompFunctionBinder::OnCollisionEndOverlap(class UPrimitiveComponent* OverlappedComponent, class AActor* OtherActor, class UPrimitiveComponent* OtherComp, int32 OtherBodyIndex)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SplineFlyMoveTriggerCompFunctionBinder", "OnCollisionEndOverlap");

	Params::SplineFlyMoveTriggerCompFunctionBinder_OnCollisionEndOverlap Parms{};

	Parms.OverlappedComponent = OverlappedComponent;
	Parms.OtherActor = OtherActor;
	Parms.OtherComp = OtherComp;
	Parms.OtherBodyIndex = OtherBodyIndex;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function b1-Managed.BED_FSMNode_GI_Loading_LoadingUIFadeIn.PostPropertyChanged
// (Native, Event, Public, BlueprintEvent)
// Parameters:
// class FString                           MemberName                                             (Parm, ZeroConstructor, HasGetValueTypeHash)
// class FString                           PropertyName                                           (Parm, ZeroConstructor, HasGetValueTypeHash)

void UBED_FSMNode_GI_Loading_LoadingUIFadeIn::PostPropertyChanged(const class FString& MemberName, const class FString& PropertyName)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BED_FSMNode_GI_Loading_LoadingUIFadeIn", "PostPropertyChanged");

	Params::BED_FSMNode_GI_Loading_LoadingUIFadeIn_PostPropertyChanged Parms{};

	Parms.MemberName = std::move(MemberName);
	Parms.PropertyName = std::move(PropertyName);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function b1-Managed.BED_FSMNode_GI_Loading_LoadingUIFadeIn.GetNodeDescriptionInCS
// (Native, Event, Public, HasOutParams, BlueprintEvent, Const)
// Parameters:
// class FString                           ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash)

class FString UBED_FSMNode_GI_Loading_LoadingUIFadeIn::GetNodeDescriptionInCS() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BED_FSMNode_GI_Loading_LoadingUIFadeIn", "GetNodeDescriptionInCS");

	Params::BED_FSMNode_GI_Loading_LoadingUIFadeIn_GetNodeDescriptionInCS Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function b1-Managed.BGUZBBCreatorActorBase.ReceiveTick
// (Native, Event, Public, BlueprintEvent)
// Parameters:
// float                                   DeltaSeconds                                           (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ABGUZBBCreatorActorBase::ReceiveTick(float DeltaSeconds)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BGUZBBCreatorActorBase", "ReceiveTick");

	Params::BGUZBBCreatorActorBase_ReceiveTick Parms{};

	Parms.DeltaSeconds = DeltaSeconds;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function b1-Managed.BED_FSMNode_GI_Loading_LoginByRoleData.PostPropertyChanged
// (Native, Event, Public, BlueprintEvent)
// Parameters:
// class FString                           MemberName                                             (Parm, ZeroConstructor, HasGetValueTypeHash)
// class FString                           PropertyName                                           (Parm, ZeroConstructor, HasGetValueTypeHash)

void UBED_FSMNode_GI_Loading_LoginByRoleData::PostPropertyChanged(const class FString& MemberName, const class FString& PropertyName)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BED_FSMNode_GI_Loading_LoginByRoleData", "PostPropertyChanged");

	Params::BED_FSMNode_GI_Loading_LoginByRoleData_PostPropertyChanged Parms{};

	Parms.MemberName = std::move(MemberName);
	Parms.PropertyName = std::move(PropertyName);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function b1-Managed.BED_FSMNode_GI_Loading_LoginByRoleData.GetNodeDescriptionInCS
// (Native, Event, Public, HasOutParams, BlueprintEvent, Const)
// Parameters:
// class FString                           ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash)

class FString UBED_FSMNode_GI_Loading_LoginByRoleData::GetNodeDescriptionInCS() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BED_FSMNode_GI_Loading_LoginByRoleData", "GetNodeDescriptionInCS");

	Params::BED_FSMNode_GI_Loading_LoginByRoleData_GetNodeDescriptionInCS Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function b1-Managed.BED_ProcessMachineNode.OnRefreshAssetInCS
// (Native, Event, Public, BlueprintEvent, Const)

void UBED_ProcessMachineNode::OnRefreshAssetInCS() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BED_ProcessMachineNode", "OnRefreshAssetInCS");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function b1-Managed.BED_ProcessMachineNode_Junction.GetContextOutputsInCS
// (Native, Event, Public, HasOutParams, BlueprintEvent)
// Parameters:
// TArray<class FName>                     ReturnValue                                            (Parm, OutParm, ReturnParm)

TArray<class FName> UBED_ProcessMachineNode_Junction::GetContextOutputsInCS()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BED_ProcessMachineNode_Junction", "GetContextOutputsInCS");

	Params::BED_ProcessMachineNode_Junction_GetContextOutputsInCS Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function b1-Managed.BED_ProcessMachineNode_Junction.PostPropertyChanged
// (Native, Event, Public, BlueprintEvent)
// Parameters:
// class FString                           MemberName                                             (Parm, ZeroConstructor, HasGetValueTypeHash)
// class FString                           PropertyName                                           (Parm, ZeroConstructor, HasGetValueTypeHash)

void UBED_ProcessMachineNode_Junction::PostPropertyChanged(const class FString& MemberName, const class FString& PropertyName)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BED_ProcessMachineNode_Junction", "PostPropertyChanged");

	Params::BED_ProcessMachineNode_Junction_PostPropertyChanged Parms{};

	Parms.MemberName = std::move(MemberName);
	Parms.PropertyName = std::move(PropertyName);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function b1-Managed.BED_ProcessMachineNode_Junction.GetNodeDescriptionInCS
// (Native, Event, Public, HasOutParams, BlueprintEvent, Const)
// Parameters:
// class FString                           ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash)

class FString UBED_ProcessMachineNode_Junction::GetNodeDescriptionInCS() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BED_ProcessMachineNode_Junction", "GetNodeDescriptionInCS");

	Params::BED_ProcessMachineNode_Junction_GetNodeDescriptionInCS Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function b1-Managed.BED_ProcessMachineNode_Junction.IsSupportViewType
// (Native, Event, Public, HasOutParams, BlueprintEvent, Const)
// Parameters:
// ECalliopeViewType                       InViewType                                             (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// uint8                                   ReturnValue                                            (Parm, OutParm, ReturnParm, NoDestructor, HasGetValueTypeHash)

uint8 UBED_ProcessMachineNode_Junction::IsSupportViewType(const ECalliopeViewType& InViewType) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BED_ProcessMachineNode_Junction", "IsSupportViewType");

	Params::BED_ProcessMachineNode_Junction_IsSupportViewType Parms{};

	Parms.InViewType = InViewType;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function b1-Managed.BED_FSMNode_GI_Loading_LockSaveArchiveByTravelLevel.PostPropertyChanged
// (Native, Event, Public, BlueprintEvent)
// Parameters:
// class FString                           MemberName                                             (Parm, ZeroConstructor, HasGetValueTypeHash)
// class FString                           PropertyName                                           (Parm, ZeroConstructor, HasGetValueTypeHash)

void UBED_FSMNode_GI_Loading_LockSaveArchiveByTravelLevel::PostPropertyChanged(const class FString& MemberName, const class FString& PropertyName)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BED_FSMNode_GI_Loading_LockSaveArchiveByTravelLevel", "PostPropertyChanged");

	Params::BED_FSMNode_GI_Loading_LockSaveArchiveByTravelLevel_PostPropertyChanged Parms{};

	Parms.MemberName = std::move(MemberName);
	Parms.PropertyName = std::move(PropertyName);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function b1-Managed.BED_FSMNode_GI_Loading_LockSaveArchiveByTravelLevel.GetNodeDescriptionInCS
// (Native, Event, Public, HasOutParams, BlueprintEvent, Const)
// Parameters:
// class FString                           ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash)

class FString UBED_FSMNode_GI_Loading_LockSaveArchiveByTravelLevel::GetNodeDescriptionInCS() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BED_FSMNode_GI_Loading_LockSaveArchiveByTravelLevel", "GetNodeDescriptionInCS");

	Params::BED_FSMNode_GI_Loading_LockSaveArchiveByTravelLevel_GetNodeDescriptionInCS Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function b1-Managed.BGWDataAsset_StreamingLevelStateConfig.SubLevelNamesGetter
// (Native, Public)

void UBGWDataAsset_StreamingLevelStateConfig::SubLevelNamesGetter()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BGWDataAsset_StreamingLevelStateConfig", "SubLevelNamesGetter");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function b1-Managed.BGUDynamicSDFGenerator2.ReceiveBeginPlay
// (Native, Event, Public, Protected, BlueprintEvent)

void ABGUDynamicSDFGenerator2::ReceiveBeginPlay()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BGUDynamicSDFGenerator2", "ReceiveBeginPlay");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function b1-Managed.BGUDynamicSDFGenerator2.ReceiveTick
// (Native, Event, Public, BlueprintEvent)
// Parameters:
// float                                   DeltaTime                                              (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ABGUDynamicSDFGenerator2::ReceiveTick(float DeltaTime)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BGUDynamicSDFGenerator2", "ReceiveTick");

	Params::BGUDynamicSDFGenerator2_ReceiveTick Parms{};

	Parms.DeltaTime = DeltaTime;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function b1-Managed.DispLibEntityBase.PostInitializeComponentsCS
// (Native, Event, Public, Protected, BlueprintEvent)

void ADispLibEntityBase::PostInitializeComponentsCS()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("DispLibEntityBase", "PostInitializeComponentsCS");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function b1-Managed.DispLibEntityBase.ApplyWorldOffsetCS
// (Native, Event, Public, Protected, BlueprintEvent)
// Parameters:
// struct FVector                          InOffset                                               (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// uint8                                   bWorldShift                                            (Parm, NoDestructor, HasGetValueTypeHash)

void ADispLibEntityBase::ApplyWorldOffsetCS(const struct FVector& InOffset, uint8 bWorldShift)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("DispLibEntityBase", "ApplyWorldOffsetCS");

	Params::DispLibEntityBase_ApplyWorldOffsetCS Parms{};

	Parms.InOffset = std::move(InOffset);
	Parms.bWorldShift = bWorldShift;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function b1-Managed.DispLibEntityBase.ReceiveBeginPlay
// (Native, Event, Public, Protected, BlueprintEvent)

void ADispLibEntityBase::ReceiveBeginPlay()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("DispLibEntityBase", "ReceiveBeginPlay");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function b1-Managed.DispLibDispWorld.ReceiveEndPlay
// (Native, Event, Public, Protected, BlueprintEvent)
// Parameters:
// EEndPlayReason                          EndPlayReason                                          (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ADispLibDispWorld::ReceiveEndPlay(EEndPlayReason EndPlayReason)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("DispLibDispWorld", "ReceiveEndPlay");

	Params::DispLibDispWorld_ReceiveEndPlay Parms{};

	Parms.EndPlayReason = EndPlayReason;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function b1-Managed.DispLibDispWorld.BeginPlayCS
// (Native, Event, Public, Protected, BlueprintEvent)

void ADispLibDispWorld::BeginPlayCS()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("DispLibDispWorld", "BeginPlayCS");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function b1-Managed.BED_FSMNode_GI_Loading_WaitPostLoadMap.PostPropertyChanged
// (Native, Event, Public, BlueprintEvent)
// Parameters:
// class FString                           MemberName                                             (Parm, ZeroConstructor, HasGetValueTypeHash)
// class FString                           PropertyName                                           (Parm, ZeroConstructor, HasGetValueTypeHash)

void UBED_FSMNode_GI_Loading_WaitPostLoadMap::PostPropertyChanged(const class FString& MemberName, const class FString& PropertyName)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BED_FSMNode_GI_Loading_WaitPostLoadMap", "PostPropertyChanged");

	Params::BED_FSMNode_GI_Loading_WaitPostLoadMap_PostPropertyChanged Parms{};

	Parms.MemberName = std::move(MemberName);
	Parms.PropertyName = std::move(PropertyName);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function b1-Managed.BED_FSMNode_GI_Loading_WaitPostLoadMap.GetNodeDescriptionInCS
// (Native, Event, Public, HasOutParams, BlueprintEvent, Const)
// Parameters:
// class FString                           ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash)

class FString UBED_FSMNode_GI_Loading_WaitPostLoadMap::GetNodeDescriptionInCS() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BED_FSMNode_GI_Loading_WaitPostLoadMap", "GetNodeDescriptionInCS");

	Params::BED_FSMNode_GI_Loading_WaitPostLoadMap_GetNodeDescriptionInCS Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function b1-Managed.DispLib_DBCWEFMMotorComp.TickComponentInCS
// (Native, Event, Public, BlueprintEvent)
// Parameters:
// float                                   DeltaTime                                              (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UDispLib_DBCWEFMMotorComp::TickComponentInCS(float DeltaTime)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("DispLib_DBCWEFMMotorComp", "TickComponentInCS");

	Params::DispLib_DBCWEFMMotorComp_TickComponentInCS Parms{};

	Parms.DeltaTime = DeltaTime;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function b1-Managed.DispLib_DBCWEFMMotorComp.OnPropertyChanged
// (Native, Event, Public, Protected, BlueprintEvent)
// Parameters:
// class FString                           MemberName                                             (Parm, ZeroConstructor, HasGetValueTypeHash)
// class FString                           PropertyName                                           (Parm, ZeroConstructor, HasGetValueTypeHash)

void UDispLib_DBCWEFMMotorComp::OnPropertyChanged(const class FString& MemberName, const class FString& PropertyName)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("DispLib_DBCWEFMMotorComp", "OnPropertyChanged");

	Params::DispLib_DBCWEFMMotorComp_OnPropertyChanged Parms{};

	Parms.MemberName = std::move(MemberName);
	Parms.PropertyName = std::move(PropertyName);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function b1-Managed.DispLib_DBCWEFMMotorComp.BeginPlayInCS
// (Native, Event, Public, BlueprintEvent)

void UDispLib_DBCWEFMMotorComp::BeginPlayInCS()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("DispLib_DBCWEFMMotorComp", "BeginPlayInCS");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function b1-Managed.DispLib_DBCWEFMMotorComp.EditorTestDoOnceWindEvent
// (Native, Public, BlueprintCallable)

void UDispLib_DBCWEFMMotorComp::EditorTestDoOnceWindEvent()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("DispLib_DBCWEFMMotorComp", "EditorTestDoOnceWindEvent");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function b1-Managed.DispLib_EditorZakkaComp.ReceiveTick
// (Native, Event, Public, BlueprintEvent)
// Parameters:
// float                                   DeltaSeconds                                           (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UDispLib_EditorZakkaComp::ReceiveTick(float DeltaSeconds)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("DispLib_EditorZakkaComp", "ReceiveTick");

	Params::DispLib_EditorZakkaComp_ReceiveTick Parms{};

	Parms.DeltaSeconds = DeltaSeconds;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function b1-Managed.DispLib_SplineMoveComp.TickComponentInCS
// (Native, Event, Public, BlueprintEvent)
// Parameters:
// float                                   DeltaTime                                              (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UDispLib_SplineMoveComp::TickComponentInCS(float DeltaTime)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("DispLib_SplineMoveComp", "TickComponentInCS");

	Params::DispLib_SplineMoveComp_TickComponentInCS Parms{};

	Parms.DeltaTime = DeltaTime;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function b1-Managed.DispLib_SplineMoveComp.BeginPlayInCS
// (Native, Event, Public, BlueprintEvent)

void UDispLib_SplineMoveComp::BeginPlayInCS()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("DispLib_SplineMoveComp", "BeginPlayInCS");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function b1-Managed.GooseCurveTest.TickComponentInCS
// (Native, Event, Public, BlueprintEvent)
// Parameters:
// float                                   DeltaTime                                              (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UGooseCurveTest::TickComponentInCS(float DeltaTime)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GooseCurveTest", "TickComponentInCS");

	Params::GooseCurveTest_TickComponentInCS Parms{};

	Parms.DeltaTime = DeltaTime;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function b1-Managed.GooseCurveTest.BeginPlayInCS
// (Native, Event, Public, BlueprintEvent)

void UGooseCurveTest::BeginPlayInCS()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GooseCurveTest", "BeginPlayInCS");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function b1-Managed.BED_GuideNode_Base.IsSupportViewType
// (Native, Event, Public, HasOutParams, BlueprintEvent, Const)
// Parameters:
// ECalliopeViewType                       InViewType                                             (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// uint8                                   ReturnValue                                            (Parm, OutParm, ReturnParm, NoDestructor, HasGetValueTypeHash)

uint8 UBED_GuideNode_Base::IsSupportViewType(const ECalliopeViewType& InViewType) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BED_GuideNode_Base", "IsSupportViewType");

	Params::BED_GuideNode_Base_IsSupportViewType Parms{};

	Parms.InViewType = InViewType;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function b1-Managed.BED_GuideNode_Wait.GetNodeDescriptionInCS
// (Native, Event, Public, HasOutParams, BlueprintEvent, Const)
// Parameters:
// class FString                           ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash)

class FString UBED_GuideNode_Wait::GetNodeDescriptionInCS() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BED_GuideNode_Wait", "GetNodeDescriptionInCS");

	Params::BED_GuideNode_Wait_GetNodeDescriptionInCS Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function b1-Managed.BANS_AdjustTransformBySpline.GSNotifyBeginCS
// (Native, Event, Public, Protected, BlueprintEvent, Const)
// Parameters:
// struct FUStGSNotifyParam                NotifyParam                                            (Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
// float                                   TotalDuration                                          (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UBANS_AdjustTransformBySpline::GSNotifyBeginCS(const struct FUStGSNotifyParam& NotifyParam, float TotalDuration) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BANS_AdjustTransformBySpline", "GSNotifyBeginCS");

	Params::BANS_AdjustTransformBySpline_GSNotifyBeginCS Parms{};

	Parms.NotifyParam = std::move(NotifyParam);
	Parms.TotalDuration = TotalDuration;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function b1-Managed.BANS_AdjustTransformBySpline.GSNotifyTickCS
// (Native, Event, Public, Protected, BlueprintEvent, Const)
// Parameters:
// struct FUStGSNotifyParam                NotifyParam                                            (Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
// float                                   FrameDeltaTime                                         (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UBANS_AdjustTransformBySpline::GSNotifyTickCS(const struct FUStGSNotifyParam& NotifyParam, float FrameDeltaTime) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BANS_AdjustTransformBySpline", "GSNotifyTickCS");

	Params::BANS_AdjustTransformBySpline_GSNotifyTickCS Parms{};

	Parms.NotifyParam = std::move(NotifyParam);
	Parms.FrameDeltaTime = FrameDeltaTime;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function b1-Managed.BANS_AdjustTransformBySpline.GSNotifyEndCS
// (Native, Event, Public, Protected, BlueprintEvent, Const)
// Parameters:
// struct FUStGSNotifyParam                NotifyParam                                            (Parm, ZeroConstructor, IsPlainOldData, NoDestructor)

void UBANS_AdjustTransformBySpline::GSNotifyEndCS(const struct FUStGSNotifyParam& NotifyParam) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BANS_AdjustTransformBySpline", "GSNotifyEndCS");

	Params::BANS_AdjustTransformBySpline_GSNotifyEndCS Parms{};

	Parms.NotifyParam = std::move(NotifyParam);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function b1-Managed.BANS_CostAttrByChargeLevel.GSNotifyBeginCS
// (Native, Event, Public, Protected, BlueprintEvent, Const)
// Parameters:
// struct FUStGSNotifyParam                NotifyParam                                            (Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
// float                                   TotalDuration                                          (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UBANS_CostAttrByChargeLevel::GSNotifyBeginCS(const struct FUStGSNotifyParam& NotifyParam, float TotalDuration) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BANS_CostAttrByChargeLevel", "GSNotifyBeginCS");

	Params::BANS_CostAttrByChargeLevel_GSNotifyBeginCS Parms{};

	Parms.NotifyParam = std::move(NotifyParam);
	Parms.TotalDuration = TotalDuration;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function b1-Managed.BED_FSMNode_GI_Loading_ResetNewGameplusArchive.PostPropertyChanged
// (Native, Event, Public, BlueprintEvent)
// Parameters:
// class FString                           MemberName                                             (Parm, ZeroConstructor, HasGetValueTypeHash)
// class FString                           PropertyName                                           (Parm, ZeroConstructor, HasGetValueTypeHash)

void UBED_FSMNode_GI_Loading_ResetNewGameplusArchive::PostPropertyChanged(const class FString& MemberName, const class FString& PropertyName)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BED_FSMNode_GI_Loading_ResetNewGameplusArchive", "PostPropertyChanged");

	Params::BED_FSMNode_GI_Loading_ResetNewGameplusArchive_PostPropertyChanged Parms{};

	Parms.MemberName = std::move(MemberName);
	Parms.PropertyName = std::move(PropertyName);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function b1-Managed.BED_FSMNode_GI_Loading_ResetNewGameplusArchive.GetNodeDescriptionInCS
// (Native, Event, Public, HasOutParams, BlueprintEvent, Const)
// Parameters:
// class FString                           ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash)

class FString UBED_FSMNode_GI_Loading_ResetNewGameplusArchive::GetNodeDescriptionInCS() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BED_FSMNode_GI_Loading_ResetNewGameplusArchive", "GetNodeDescriptionInCS");

	Params::BED_FSMNode_GI_Loading_ResetNewGameplusArchive_GetNodeDescriptionInCS Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function b1-Managed.BANS_GSCantInteractState.GSNotifyBeginCS
// (Native, Event, Public, Protected, BlueprintEvent, Const)
// Parameters:
// struct FUStGSNotifyParam                NotifyParam                                            (Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
// float                                   TotalDuration                                          (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UBANS_GSCantInteractState::GSNotifyBeginCS(const struct FUStGSNotifyParam& NotifyParam, float TotalDuration) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BANS_GSCantInteractState", "GSNotifyBeginCS");

	Params::BANS_GSCantInteractState_GSNotifyBeginCS Parms{};

	Parms.NotifyParam = std::move(NotifyParam);
	Parms.TotalDuration = TotalDuration;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function b1-Managed.BANS_GSCantInteractState.GSNotifyTickCS
// (Native, Event, Public, Protected, BlueprintEvent, Const)
// Parameters:
// struct FUStGSNotifyParam                NotifyParam                                            (Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
// float                                   FrameDeltaTime                                         (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UBANS_GSCantInteractState::GSNotifyTickCS(const struct FUStGSNotifyParam& NotifyParam, float FrameDeltaTime) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BANS_GSCantInteractState", "GSNotifyTickCS");

	Params::BANS_GSCantInteractState_GSNotifyTickCS Parms{};

	Parms.NotifyParam = std::move(NotifyParam);
	Parms.FrameDeltaTime = FrameDeltaTime;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function b1-Managed.BANS_GSCantInteractState.GSNotifyEndCS
// (Native, Event, Public, Protected, BlueprintEvent, Const)
// Parameters:
// struct FUStGSNotifyParam                NotifyParam                                            (Parm, ZeroConstructor, IsPlainOldData, NoDestructor)

void UBANS_GSCantInteractState::GSNotifyEndCS(const struct FUStGSNotifyParam& NotifyParam) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BANS_GSCantInteractState", "GSNotifyEndCS");

	Params::BANS_GSCantInteractState_GSNotifyEndCS Parms{};

	Parms.NotifyParam = std::move(NotifyParam);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function b1-Managed.BANS_GSCameraArmLocationZCurve.GSNotifyBeginCS
// (Native, Event, Public, Protected, BlueprintEvent, Const)
// Parameters:
// struct FUStGSNotifyParam                NotifyParam                                            (Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
// float                                   TotalDuration                                          (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UBANS_GSCameraArmLocationZCurve::GSNotifyBeginCS(const struct FUStGSNotifyParam& NotifyParam, float TotalDuration) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BANS_GSCameraArmLocationZCurve", "GSNotifyBeginCS");

	Params::BANS_GSCameraArmLocationZCurve_GSNotifyBeginCS Parms{};

	Parms.NotifyParam = std::move(NotifyParam);
	Parms.TotalDuration = TotalDuration;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function b1-Managed.BANS_GSCameraArmLocationZCurve.GSNotifyEndCS
// (Native, Event, Public, Protected, BlueprintEvent, Const)
// Parameters:
// struct FUStGSNotifyParam                NotifyParam                                            (Parm, ZeroConstructor, IsPlainOldData, NoDestructor)

void UBANS_GSCameraArmLocationZCurve::GSNotifyEndCS(const struct FUStGSNotifyParam& NotifyParam) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BANS_GSCameraArmLocationZCurve", "GSNotifyEndCS");

	Params::BANS_GSCameraArmLocationZCurve_GSNotifyEndCS Parms{};

	Parms.NotifyParam = std::move(NotifyParam);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function b1-Managed.BANS_GSItemSkillKeyCache.GSNotifyBeginCS
// (Native, Event, Public, Protected, BlueprintEvent, Const)
// Parameters:
// struct FUStGSNotifyParam                NotifyParam                                            (Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
// float                                   TotalDuration                                          (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UBANS_GSItemSkillKeyCache::GSNotifyBeginCS(const struct FUStGSNotifyParam& NotifyParam, float TotalDuration) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BANS_GSItemSkillKeyCache", "GSNotifyBeginCS");

	Params::BANS_GSItemSkillKeyCache_GSNotifyBeginCS Parms{};

	Parms.NotifyParam = std::move(NotifyParam);
	Parms.TotalDuration = TotalDuration;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function b1-Managed.GlobalAudioMgr.GetUApplicationLifecycleComponent
// (Native, Public, HasOutParams, BlueprintCallable)
// Parameters:
// class UApplicationLifecycleComponent*   ReturnValue                                            (ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

class UApplicationLifecycleComponent* AGlobalAudioMgr::GetUApplicationLifecycleComponent()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GlobalAudioMgr", "GetUApplicationLifecycleComponent");

	Params::GlobalAudioMgr_GetUApplicationLifecycleComponent Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function b1-Managed.GlobalAudioMgr.BeginPlay
// (Native, Public, BlueprintCallable)

void AGlobalAudioMgr::BeginPlay()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GlobalAudioMgr", "BeginPlay");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function b1-Managed.BUI_DebugComm.Destruct
// (BlueprintCosmetic, Native, Event, Public, BlueprintEvent)

void UBUI_DebugComm::Destruct()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BUI_DebugComm", "Destruct");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function b1-Managed.BANS_GSItemSkillWindow.GSNotifyBeginCS
// (Native, Event, Public, Protected, BlueprintEvent, Const)
// Parameters:
// struct FUStGSNotifyParam                NotifyParam                                            (Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
// float                                   TotalDuration                                          (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UBANS_GSItemSkillWindow::GSNotifyBeginCS(const struct FUStGSNotifyParam& NotifyParam, float TotalDuration) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BANS_GSItemSkillWindow", "GSNotifyBeginCS");

	Params::BANS_GSItemSkillWindow_GSNotifyBeginCS Parms{};

	Parms.NotifyParam = std::move(NotifyParam);
	Parms.TotalDuration = TotalDuration;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function b1-Managed.BED_FSMNode_GI_Loading_SaveArchiveInTravelLevel.PostPropertyChanged
// (Native, Event, Public, BlueprintEvent)
// Parameters:
// class FString                           MemberName                                             (Parm, ZeroConstructor, HasGetValueTypeHash)
// class FString                           PropertyName                                           (Parm, ZeroConstructor, HasGetValueTypeHash)

void UBED_FSMNode_GI_Loading_SaveArchiveInTravelLevel::PostPropertyChanged(const class FString& MemberName, const class FString& PropertyName)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BED_FSMNode_GI_Loading_SaveArchiveInTravelLevel", "PostPropertyChanged");

	Params::BED_FSMNode_GI_Loading_SaveArchiveInTravelLevel_PostPropertyChanged Parms{};

	Parms.MemberName = std::move(MemberName);
	Parms.PropertyName = std::move(PropertyName);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function b1-Managed.BED_FSMNode_GI_Loading_SaveArchiveInTravelLevel.GetNodeDescriptionInCS
// (Native, Event, Public, HasOutParams, BlueprintEvent, Const)
// Parameters:
// class FString                           ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash)

class FString UBED_FSMNode_GI_Loading_SaveArchiveInTravelLevel::GetNodeDescriptionInCS() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BED_FSMNode_GI_Loading_SaveArchiveInTravelLevel", "GetNodeDescriptionInCS");

	Params::BED_FSMNode_GI_Loading_SaveArchiveInTravelLevel_GetNodeDescriptionInCS Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function b1-Managed.BANS_GSPausePhysics.GSNotifyBeginCS
// (Native, Event, Public, Protected, BlueprintEvent, Const)
// Parameters:
// struct FUStGSNotifyParam                NotifyParam                                            (Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
// float                                   TotalDuration                                          (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UBANS_GSPausePhysics::GSNotifyBeginCS(const struct FUStGSNotifyParam& NotifyParam, float TotalDuration) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BANS_GSPausePhysics", "GSNotifyBeginCS");

	Params::BANS_GSPausePhysics_GSNotifyBeginCS Parms{};

	Parms.NotifyParam = std::move(NotifyParam);
	Parms.TotalDuration = TotalDuration;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function b1-Managed.BANS_GSPausePhysics.GSNotifyTickCS
// (Native, Event, Public, Protected, BlueprintEvent, Const)
// Parameters:
// struct FUStGSNotifyParam                NotifyParam                                            (Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
// float                                   FrameDeltaTime                                         (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UBANS_GSPausePhysics::GSNotifyTickCS(const struct FUStGSNotifyParam& NotifyParam, float FrameDeltaTime) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BANS_GSPausePhysics", "GSNotifyTickCS");

	Params::BANS_GSPausePhysics_GSNotifyTickCS Parms{};

	Parms.NotifyParam = std::move(NotifyParam);
	Parms.FrameDeltaTime = FrameDeltaTime;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function b1-Managed.BANS_GSPausePhysics.GSNotifyEndCS
// (Native, Event, Public, Protected, BlueprintEvent, Const)
// Parameters:
// struct FUStGSNotifyParam                NotifyParam                                            (Parm, ZeroConstructor, IsPlainOldData, NoDestructor)

void UBANS_GSPausePhysics::GSNotifyEndCS(const struct FUStGSNotifyParam& NotifyParam) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BANS_GSPausePhysics", "GSNotifyEndCS");

	Params::BANS_GSPausePhysics_GSNotifyEndCS Parms{};

	Parms.NotifyParam = std::move(NotifyParam);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function b1-Managed.B1ReplicationGraphNode_TamerMonster.GatherActorListsForConnectionCS
// (Native, Event, Public, BlueprintEvent)
// Parameters:
// class APlayerController*                PlayerController                                       (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UB1ReplicationGraphNode_TamerMonster::GatherActorListsForConnectionCS(class APlayerController* PlayerController)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("B1ReplicationGraphNode_TamerMonster", "GatherActorListsForConnectionCS");

	Params::B1ReplicationGraphNode_TamerMonster_GatherActorListsForConnectionCS Parms{};

	Parms.PlayerController = PlayerController;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function b1-Managed.B1ReplicationGraphNode_TamerMonster.PostServerReplicateActorCS
// (Native, Event, Public, BlueprintEvent)

void UB1ReplicationGraphNode_TamerMonster::PostServerReplicateActorCS()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("B1ReplicationGraphNode_TamerMonster", "PostServerReplicateActorCS");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function b1-Managed.BANS_GSPoleDrink.GSNotifyBeginCS
// (Native, Event, Public, Protected, BlueprintEvent, Const)
// Parameters:
// struct FUStGSNotifyParam                NotifyParam                                            (Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
// float                                   TotalDuration                                          (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UBANS_GSPoleDrink::GSNotifyBeginCS(const struct FUStGSNotifyParam& NotifyParam, float TotalDuration) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BANS_GSPoleDrink", "GSNotifyBeginCS");

	Params::BANS_GSPoleDrink_GSNotifyBeginCS Parms{};

	Parms.NotifyParam = std::move(NotifyParam);
	Parms.TotalDuration = TotalDuration;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function b1-Managed.BANS_GSPoleDrink.GSNotifyEndCS
// (Native, Event, Public, Protected, BlueprintEvent, Const)
// Parameters:
// struct FUStGSNotifyParam                NotifyParam                                            (Parm, ZeroConstructor, IsPlainOldData, NoDestructor)

void UBANS_GSPoleDrink::GSNotifyEndCS(const struct FUStGSNotifyParam& NotifyParam) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BANS_GSPoleDrink", "GSNotifyEndCS");

	Params::BANS_GSPoleDrink_GSNotifyEndCS Parms{};

	Parms.NotifyParam = std::move(NotifyParam);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function b1-Managed.BED_FSMNode_GI_Loading_ShowArchiveMarkInStartGame.PostPropertyChanged
// (Native, Event, Public, BlueprintEvent)
// Parameters:
// class FString                           MemberName                                             (Parm, ZeroConstructor, HasGetValueTypeHash)
// class FString                           PropertyName                                           (Parm, ZeroConstructor, HasGetValueTypeHash)

void UBED_FSMNode_GI_Loading_ShowArchiveMarkInStartGame::PostPropertyChanged(const class FString& MemberName, const class FString& PropertyName)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BED_FSMNode_GI_Loading_ShowArchiveMarkInStartGame", "PostPropertyChanged");

	Params::BED_FSMNode_GI_Loading_ShowArchiveMarkInStartGame_PostPropertyChanged Parms{};

	Parms.MemberName = std::move(MemberName);
	Parms.PropertyName = std::move(PropertyName);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function b1-Managed.BED_FSMNode_GI_Loading_ShowArchiveMarkInStartGame.GetNodeDescriptionInCS
// (Native, Event, Public, HasOutParams, BlueprintEvent, Const)
// Parameters:
// class FString                           ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash)

class FString UBED_FSMNode_GI_Loading_ShowArchiveMarkInStartGame::GetNodeDescriptionInCS() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BED_FSMNode_GI_Loading_ShowArchiveMarkInStartGame", "GetNodeDescriptionInCS");

	Params::BED_FSMNode_GI_Loading_ShowArchiveMarkInStartGame_GetNodeDescriptionInCS Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function b1-Managed.BANS_GSSetCloudMoveEnabled.GSNotifyBeginCS
// (Native, Event, Public, Protected, BlueprintEvent, Const)
// Parameters:
// struct FUStGSNotifyParam                NotifyParam                                            (Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
// float                                   TotalDuration                                          (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UBANS_GSSetCloudMoveEnabled::GSNotifyBeginCS(const struct FUStGSNotifyParam& NotifyParam, float TotalDuration) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BANS_GSSetCloudMoveEnabled", "GSNotifyBeginCS");

	Params::BANS_GSSetCloudMoveEnabled_GSNotifyBeginCS Parms{};

	Parms.NotifyParam = std::move(NotifyParam);
	Parms.TotalDuration = TotalDuration;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function b1-Managed.BANS_GSBlendPhysicForDeath.GSNotifyBeginCS
// (Native, Event, Public, Protected, BlueprintEvent, Const)
// Parameters:
// struct FUStGSNotifyParam                NotifyParam                                            (Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
// float                                   TotalDuration                                          (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UBANS_GSBlendPhysicForDeath::GSNotifyBeginCS(const struct FUStGSNotifyParam& NotifyParam, float TotalDuration) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BANS_GSBlendPhysicForDeath", "GSNotifyBeginCS");

	Params::BANS_GSBlendPhysicForDeath_GSNotifyBeginCS Parms{};

	Parms.NotifyParam = std::move(NotifyParam);
	Parms.TotalDuration = TotalDuration;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function b1-Managed.BANS_GSCallDeathDissolve.GSNotifyBeginCS
// (Native, Event, Public, Protected, BlueprintEvent, Const)
// Parameters:
// struct FUStGSNotifyParam                NotifyParam                                            (Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
// float                                   TotalDuration                                          (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UBANS_GSCallDeathDissolve::GSNotifyBeginCS(const struct FUStGSNotifyParam& NotifyParam, float TotalDuration) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BANS_GSCallDeathDissolve", "GSNotifyBeginCS");

	Params::BANS_GSCallDeathDissolve_GSNotifyBeginCS Parms{};

	Parms.NotifyParam = std::move(NotifyParam);
	Parms.TotalDuration = TotalDuration;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function b1-Managed.BANS_GSCostAttrByBuff.GSNotifyBeginCS
// (Native, Event, Public, Protected, BlueprintEvent, Const)
// Parameters:
// struct FUStGSNotifyParam                NotifyParam                                            (Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
// float                                   TotalDuration                                          (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UBANS_GSCostAttrByBuff::GSNotifyBeginCS(const struct FUStGSNotifyParam& NotifyParam, float TotalDuration) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BANS_GSCostAttrByBuff", "GSNotifyBeginCS");

	Params::BANS_GSCostAttrByBuff_GSNotifyBeginCS Parms{};

	Parms.NotifyParam = std::move(NotifyParam);
	Parms.TotalDuration = TotalDuration;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function b1-Managed.BANS_GSCostAttrByBuff.GSNotifyEndCS
// (Native, Event, Public, Protected, BlueprintEvent, Const)
// Parameters:
// struct FUStGSNotifyParam                NotifyParam                                            (Parm, ZeroConstructor, IsPlainOldData, NoDestructor)

void UBANS_GSCostAttrByBuff::GSNotifyEndCS(const struct FUStGSNotifyParam& NotifyParam) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BANS_GSCostAttrByBuff", "GSNotifyEndCS");

	Params::BANS_GSCostAttrByBuff_GSNotifyEndCS Parms{};

	Parms.NotifyParam = std::move(NotifyParam);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function b1-Managed.BED_FSMNode_GI_Loading_ShowMessageBoxAndWaitConfirm.PostPropertyChanged
// (Native, Event, Public, BlueprintEvent)
// Parameters:
// class FString                           MemberName                                             (Parm, ZeroConstructor, HasGetValueTypeHash)
// class FString                           PropertyName                                           (Parm, ZeroConstructor, HasGetValueTypeHash)

void UBED_FSMNode_GI_Loading_ShowMessageBoxAndWaitConfirm::PostPropertyChanged(const class FString& MemberName, const class FString& PropertyName)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BED_FSMNode_GI_Loading_ShowMessageBoxAndWaitConfirm", "PostPropertyChanged");

	Params::BED_FSMNode_GI_Loading_ShowMessageBoxAndWaitConfirm_PostPropertyChanged Parms{};

	Parms.MemberName = std::move(MemberName);
	Parms.PropertyName = std::move(PropertyName);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function b1-Managed.BED_FSMNode_GI_Loading_ShowMessageBoxAndWaitConfirm.GetNodeDescriptionInCS
// (Native, Event, Public, HasOutParams, BlueprintEvent, Const)
// Parameters:
// class FString                           ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash)

class FString UBED_FSMNode_GI_Loading_ShowMessageBoxAndWaitConfirm::GetNodeDescriptionInCS() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BED_FSMNode_GI_Loading_ShowMessageBoxAndWaitConfirm", "GetNodeDescriptionInCS");

	Params::BED_FSMNode_GI_Loading_ShowMessageBoxAndWaitConfirm_GetNodeDescriptionInCS Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function b1-Managed.BANS_GSCricketJumpUp.GSNotifyBeginCS
// (Native, Event, Public, Protected, BlueprintEvent, Const)
// Parameters:
// struct FUStGSNotifyParam                NotifyParam                                            (Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
// float                                   TotalDuration                                          (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UBANS_GSCricketJumpUp::GSNotifyBeginCS(const struct FUStGSNotifyParam& NotifyParam, float TotalDuration) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BANS_GSCricketJumpUp", "GSNotifyBeginCS");

	Params::BANS_GSCricketJumpUp_GSNotifyBeginCS Parms{};

	Parms.NotifyParam = std::move(NotifyParam);
	Parms.TotalDuration = TotalDuration;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function b1-Managed.BANS_GSCricketJumpUp.GSNotifyEndCS
// (Native, Event, Public, Protected, BlueprintEvent, Const)
// Parameters:
// struct FUStGSNotifyParam                NotifyParam                                            (Parm, ZeroConstructor, IsPlainOldData, NoDestructor)

void UBANS_GSCricketJumpUp::GSNotifyEndCS(const struct FUStGSNotifyParam& NotifyParam) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BANS_GSCricketJumpUp", "GSNotifyEndCS");

	Params::BANS_GSCricketJumpUp_GSNotifyEndCS Parms{};

	Parms.NotifyParam = std::move(NotifyParam);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function b1-Managed.BANS_GSDetonateBuff.GSNotifyBeginCS
// (Native, Event, Public, Protected, BlueprintEvent, Const)
// Parameters:
// struct FUStGSNotifyParam                NotifyParam                                            (Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
// float                                   TotalDuration                                          (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UBANS_GSDetonateBuff::GSNotifyBeginCS(const struct FUStGSNotifyParam& NotifyParam, float TotalDuration) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BANS_GSDetonateBuff", "GSNotifyBeginCS");

	Params::BANS_GSDetonateBuff_GSNotifyBeginCS Parms{};

	Parms.NotifyParam = std::move(NotifyParam);
	Parms.TotalDuration = TotalDuration;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function b1-Managed.BANS_GSCloudWindow.GSNotifyBeginCS
// (Native, Event, Public, Protected, BlueprintEvent, Const)
// Parameters:
// struct FUStGSNotifyParam                NotifyParam                                            (Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
// float                                   TotalDuration                                          (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UBANS_GSCloudWindow::GSNotifyBeginCS(const struct FUStGSNotifyParam& NotifyParam, float TotalDuration) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BANS_GSCloudWindow", "GSNotifyBeginCS");

	Params::BANS_GSCloudWindow_GSNotifyBeginCS Parms{};

	Parms.NotifyParam = std::move(NotifyParam);
	Parms.TotalDuration = TotalDuration;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function b1-Managed.BANS_GSEmpty.GSAllowCrossSection
// (Native, Event, Public, HasOutParams, BlueprintEvent, Const)
// Parameters:
// uint8                                   ReturnValue                                            (Parm, OutParm, ReturnParm, NoDestructor, HasGetValueTypeHash)

uint8 UBANS_GSEmpty::GSAllowCrossSection() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BANS_GSEmpty", "GSAllowCrossSection");

	Params::BANS_GSEmpty_GSAllowCrossSection Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function b1-Managed.BANS_GSEmpty.GSNotifyBeginCS
// (Native, Event, Public, Protected, BlueprintEvent, Const)
// Parameters:
// struct FUStGSNotifyParam                NotifyParam                                            (Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
// float                                   TotalDuration                                          (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UBANS_GSEmpty::GSNotifyBeginCS(const struct FUStGSNotifyParam& NotifyParam, float TotalDuration) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BANS_GSEmpty", "GSNotifyBeginCS");

	Params::BANS_GSEmpty_GSNotifyBeginCS Parms{};

	Parms.NotifyParam = std::move(NotifyParam);
	Parms.TotalDuration = TotalDuration;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function b1-Managed.BANS_GSEmpty.GSNotifyTickCS
// (Native, Event, Public, Protected, BlueprintEvent, Const)
// Parameters:
// struct FUStGSNotifyParam                NotifyParam                                            (Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
// float                                   FrameDeltaTime                                         (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UBANS_GSEmpty::GSNotifyTickCS(const struct FUStGSNotifyParam& NotifyParam, float FrameDeltaTime) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BANS_GSEmpty", "GSNotifyTickCS");

	Params::BANS_GSEmpty_GSNotifyTickCS Parms{};

	Parms.NotifyParam = std::move(NotifyParam);
	Parms.FrameDeltaTime = FrameDeltaTime;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function b1-Managed.BANS_GSEmpty.GSNotifyEndCS
// (Native, Event, Public, Protected, BlueprintEvent, Const)
// Parameters:
// struct FUStGSNotifyParam                NotifyParam                                            (Parm, ZeroConstructor, IsPlainOldData, NoDestructor)

void UBANS_GSEmpty::GSNotifyEndCS(const struct FUStGSNotifyParam& NotifyParam) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BANS_GSEmpty", "GSNotifyEndCS");

	Params::BANS_GSEmpty_GSNotifyEndCS Parms{};

	Parms.NotifyParam = std::move(NotifyParam);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function b1-Managed.BANS_GSHatch.GSNotifyBeginCS
// (Native, Event, Public, Protected, BlueprintEvent, Const)
// Parameters:
// struct FUStGSNotifyParam                NotifyParam                                            (Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
// float                                   TotalDuration                                          (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UBANS_GSHatch::GSNotifyBeginCS(const struct FUStGSNotifyParam& NotifyParam, float TotalDuration) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BANS_GSHatch", "GSNotifyBeginCS");

	Params::BANS_GSHatch_GSNotifyBeginCS Parms{};

	Parms.NotifyParam = std::move(NotifyParam);
	Parms.TotalDuration = TotalDuration;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function b1-Managed.BANS_GSHatch.GSNotifyEndCS
// (Native, Event, Public, Protected, BlueprintEvent, Const)
// Parameters:
// struct FUStGSNotifyParam                NotifyParam                                            (Parm, ZeroConstructor, IsPlainOldData, NoDestructor)

void UBANS_GSHatch::GSNotifyEndCS(const struct FUStGSNotifyParam& NotifyParam) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BANS_GSHatch", "GSNotifyEndCS");

	Params::BANS_GSHatch_GSNotifyEndCS Parms{};

	Parms.NotifyParam = std::move(NotifyParam);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function b1-Managed.GSLocalPlayerCS.GetGameLoginOptionsCS
// (Native, Event, Public, HasOutParams, BlueprintEvent, Const)
// Parameters:
// class FString                           ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash)

class FString UGSLocalPlayerCS::GetGameLoginOptionsCS() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GSLocalPlayerCS", "GetGameLoginOptionsCS");

	Params::GSLocalPlayerCS_GetGameLoginOptionsCS Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function b1-Managed.BGUPerformerControlConfigComp.GetParamDisplayNameCS
// (Native, Event, Public, HasOutParams, BlueprintEvent)
// Parameters:
// class FString                           PropertyName                                           (Parm, ZeroConstructor, HasGetValueTypeHash)
// struct FCalliopeGuid                    ConfigGuid                                             (ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, HasGetValueTypeHash)
// class FString                           ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash)

class FString UBGUPerformerControlConfigComp::GetParamDisplayNameCS(const class FString& PropertyName, const struct FCalliopeGuid& ConfigGuid)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BGUPerformerControlConfigComp", "GetParamDisplayNameCS");

	Params::BGUPerformerControlConfigComp_GetParamDisplayNameCS Parms{};

	Parms.PropertyName = std::move(PropertyName);
	Parms.ConfigGuid = std::move(ConfigGuid);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function b1-Managed.BGUPerformerControlConfigComp.GetPossibleParamsCS
// (Native, Event, Public, HasOutParams, BlueprintEvent)
// Parameters:
// class FString                           ParentPropertyName                                     (Parm, ZeroConstructor, HasGetValueTypeHash)
// class FString                           PropertyName                                           (Parm, ZeroConstructor, HasGetValueTypeHash)
// TArray<struct FCalliopeGuid>            OutParamArray                                          (Parm, OutParm)

void UBGUPerformerControlConfigComp::GetPossibleParamsCS(const class FString& ParentPropertyName, const class FString& PropertyName, TArray<struct FCalliopeGuid>* OutParamArray)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BGUPerformerControlConfigComp", "GetPossibleParamsCS");

	Params::BGUPerformerControlConfigComp_GetPossibleParamsCS Parms{};

	Parms.ParentPropertyName = std::move(ParentPropertyName);
	Parms.PropertyName = std::move(PropertyName);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	if (OutParamArray != nullptr)
		*OutParamArray = std::move(Parms.OutParamArray);
}


// Function b1-Managed.BANS_GSMyriapodsFootStep.GSNotifyBeginCS
// (Native, Event, Public, Protected, BlueprintEvent, Const)
// Parameters:
// struct FUStGSNotifyParam                NotifyParam                                            (Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
// float                                   TotalDuration                                          (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UBANS_GSMyriapodsFootStep::GSNotifyBeginCS(const struct FUStGSNotifyParam& NotifyParam, float TotalDuration) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BANS_GSMyriapodsFootStep", "GSNotifyBeginCS");

	Params::BANS_GSMyriapodsFootStep_GSNotifyBeginCS Parms{};

	Parms.NotifyParam = std::move(NotifyParam);
	Parms.TotalDuration = TotalDuration;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function b1-Managed.BANS_GSMyriapodsFootStep.GSNotifyEndCS
// (Native, Event, Public, Protected, BlueprintEvent, Const)
// Parameters:
// struct FUStGSNotifyParam                NotifyParam                                            (Parm, ZeroConstructor, IsPlainOldData, NoDestructor)

void UBANS_GSMyriapodsFootStep::GSNotifyEndCS(const struct FUStGSNotifyParam& NotifyParam) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BANS_GSMyriapodsFootStep", "GSNotifyEndCS");

	Params::BANS_GSMyriapodsFootStep_GSNotifyEndCS Parms{};

	Parms.NotifyParam = std::move(NotifyParam);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function b1-Managed.BANS_GSPlayerInteractWindow.GSNotifyBeginCS
// (Native, Event, Public, Protected, BlueprintEvent, Const)
// Parameters:
// struct FUStGSNotifyParam                NotifyParam                                            (Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
// float                                   TotalDuration                                          (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UBANS_GSPlayerInteractWindow::GSNotifyBeginCS(const struct FUStGSNotifyParam& NotifyParam, float TotalDuration) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BANS_GSPlayerInteractWindow", "GSNotifyBeginCS");

	Params::BANS_GSPlayerInteractWindow_GSNotifyBeginCS Parms{};

	Parms.NotifyParam = std::move(NotifyParam);
	Parms.TotalDuration = TotalDuration;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function b1-Managed.BAN_GSCallMultiPointsRegister.GSNotifyCS
// (Native, Event, Public, Protected, BlueprintEvent, Const)
// Parameters:
// struct FUStGSNotifyParam                NotifyParam                                            (Parm, ZeroConstructor, IsPlainOldData, NoDestructor)

void UBAN_GSCallMultiPointsRegister::GSNotifyCS(const struct FUStGSNotifyParam& NotifyParam) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BAN_GSCallMultiPointsRegister", "GSNotifyCS");

	Params::BAN_GSCallMultiPointsRegister_GSNotifyCS Parms{};

	Parms.NotifyParam = std::move(NotifyParam);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function b1-Managed.BANS_GSReleaseBlockState.GSNotifyBeginCS
// (Native, Event, Public, Protected, BlueprintEvent, Const)
// Parameters:
// struct FUStGSNotifyParam                NotifyParam                                            (Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
// float                                   TotalDuration                                          (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UBANS_GSReleaseBlockState::GSNotifyBeginCS(const struct FUStGSNotifyParam& NotifyParam, float TotalDuration) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BANS_GSReleaseBlockState", "GSNotifyBeginCS");

	Params::BANS_GSReleaseBlockState_GSNotifyBeginCS Parms{};

	Parms.NotifyParam = std::move(NotifyParam);
	Parms.TotalDuration = TotalDuration;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function b1-Managed.BANS_GSSlowTime_LifeSaving.GSNotifyBeginCS
// (Native, Event, Public, Protected, BlueprintEvent, Const)
// Parameters:
// struct FUStGSNotifyParam                NotifyParam                                            (Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
// float                                   TotalDuration                                          (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UBANS_GSSlowTime_LifeSaving::GSNotifyBeginCS(const struct FUStGSNotifyParam& NotifyParam, float TotalDuration) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BANS_GSSlowTime_LifeSaving", "GSNotifyBeginCS");

	Params::BANS_GSSlowTime_LifeSaving_GSNotifyBeginCS Parms{};

	Parms.NotifyParam = std::move(NotifyParam);
	Parms.TotalDuration = TotalDuration;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function b1-Managed.PerformerAction_PlayBeginLoopMontage.OnMontageBlendingOut
// (Native, Public)
// Parameters:
// class UAnimMontage*                     InMontage                                              (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// uint8                                   bInterrupted                                           (Parm, NoDestructor, HasGetValueTypeHash)

void UPerformerAction_PlayBeginLoopMontage::OnMontageBlendingOut(class UAnimMontage* InMontage, uint8 bInterrupted)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("PerformerAction_PlayBeginLoopMontage", "OnMontageBlendingOut");

	Params::PerformerAction_PlayBeginLoopMontage_OnMontageBlendingOut Parms{};

	Parms.InMontage = InMontage;
	Parms.bInterrupted = bInterrupted;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function b1-Managed.BANS_GSTriggerEffect.GSValidateInputCS
// (Native, Event, Public, BlueprintEvent, Const)
// Parameters:
// class AActor*                           Actor                                                  (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UBANS_GSTriggerEffect::GSValidateInputCS(class AActor* Actor) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BANS_GSTriggerEffect", "GSValidateInputCS");

	Params::BANS_GSTriggerEffect_GSValidateInputCS Parms{};

	Parms.Actor = Actor;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function b1-Managed.BANS_GSTriggerEffect.GSNotifyBeginCS
// (Native, Event, Public, Protected, BlueprintEvent, Const)
// Parameters:
// struct FUStGSNotifyParam                NotifyParam                                            (Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
// float                                   TotalDuration                                          (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UBANS_GSTriggerEffect::GSNotifyBeginCS(const struct FUStGSNotifyParam& NotifyParam, float TotalDuration) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BANS_GSTriggerEffect", "GSNotifyBeginCS");

	Params::BANS_GSTriggerEffect_GSNotifyBeginCS Parms{};

	Parms.NotifyParam = std::move(NotifyParam);
	Parms.TotalDuration = TotalDuration;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function b1-Managed.BANS_GSTriggerEffect.GSNotifyTickCS
// (Native, Event, Public, Protected, BlueprintEvent, Const)
// Parameters:
// struct FUStGSNotifyParam                NotifyParam                                            (Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
// float                                   FrameDeltaTime                                         (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UBANS_GSTriggerEffect::GSNotifyTickCS(const struct FUStGSNotifyParam& NotifyParam, float FrameDeltaTime) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BANS_GSTriggerEffect", "GSNotifyTickCS");

	Params::BANS_GSTriggerEffect_GSNotifyTickCS Parms{};

	Parms.NotifyParam = std::move(NotifyParam);
	Parms.FrameDeltaTime = FrameDeltaTime;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function b1-Managed.BANS_GSTriggerEffect.GSNotifyEndCS
// (Native, Event, Public, Protected, BlueprintEvent, Const)
// Parameters:
// struct FUStGSNotifyParam                NotifyParam                                            (Parm, ZeroConstructor, IsPlainOldData, NoDestructor)

void UBANS_GSTriggerEffect::GSNotifyEndCS(const struct FUStGSNotifyParam& NotifyParam) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BANS_GSTriggerEffect", "GSNotifyEndCS");

	Params::BANS_GSTriggerEffect_GSNotifyEndCS Parms{};

	Parms.NotifyParam = std::move(NotifyParam);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function b1-Managed.BANS_GSTryHRCouonterAttack.GSNotifyBeginCS
// (Native, Event, Public, Protected, BlueprintEvent, Const)
// Parameters:
// struct FUStGSNotifyParam                NotifyParam                                            (Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
// float                                   TotalDuration                                          (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UBANS_GSTryHRCouonterAttack::GSNotifyBeginCS(const struct FUStGSNotifyParam& NotifyParam, float TotalDuration) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BANS_GSTryHRCouonterAttack", "GSNotifyBeginCS");

	Params::BANS_GSTryHRCouonterAttack_GSNotifyBeginCS Parms{};

	Parms.NotifyParam = std::move(NotifyParam);
	Parms.TotalDuration = TotalDuration;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function b1-Managed.BANS_GSTryHRCouonterAttack.GSNotifyTickCS
// (Native, Event, Public, Protected, BlueprintEvent, Const)
// Parameters:
// struct FUStGSNotifyParam                NotifyParam                                            (Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
// float                                   FrameDeltaTime                                         (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UBANS_GSTryHRCouonterAttack::GSNotifyTickCS(const struct FUStGSNotifyParam& NotifyParam, float FrameDeltaTime) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BANS_GSTryHRCouonterAttack", "GSNotifyTickCS");

	Params::BANS_GSTryHRCouonterAttack_GSNotifyTickCS Parms{};

	Parms.NotifyParam = std::move(NotifyParam);
	Parms.FrameDeltaTime = FrameDeltaTime;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function b1-Managed.BUAnimHumanoidCS_LinkedInstanceBase.BlueprintThreadSafeUpdateAnimation
// (Native, Event, Public, BlueprintEvent)
// Parameters:
// float                                   DeltaTime                                              (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UBUAnimHumanoidCS_LinkedInstanceBase::BlueprintThreadSafeUpdateAnimation(float DeltaTime)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BUAnimHumanoidCS_LinkedInstanceBase", "BlueprintThreadSafeUpdateAnimation");

	Params::BUAnimHumanoidCS_LinkedInstanceBase_BlueprintThreadSafeUpdateAnimation Parms{};

	Parms.DeltaTime = DeltaTime;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function b1-Managed.BUAnimHumanoidCS_LinkedInstanceBase.BlueprintInitializeAnimation
// (Native, Event, Public, BlueprintEvent)

void UBUAnimHumanoidCS_LinkedInstanceBase::BlueprintInitializeAnimation()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BUAnimHumanoidCS_LinkedInstanceBase", "BlueprintInitializeAnimation");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function b1-Managed.BUAnimHumanoidCS_LinkedInstanceBase.BlueprintUpdateAnimation
// (Native, Event, Public, BlueprintEvent)
// Parameters:
// float                                   DeltaTimeX                                             (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UBUAnimHumanoidCS_LinkedInstanceBase::BlueprintUpdateAnimation(float DeltaTimeX)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BUAnimHumanoidCS_LinkedInstanceBase", "BlueprintUpdateAnimation");

	Params::BUAnimHumanoidCS_LinkedInstanceBase_BlueprintUpdateAnimation Parms{};

	Parms.DeltaTimeX = DeltaTimeX;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function b1-Managed.BANS_LifeSavingHairBlocking.GSNotifyBeginCS
// (Native, Event, Public, Protected, BlueprintEvent, Const)
// Parameters:
// struct FUStGSNotifyParam                NotifyParam                                            (Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
// float                                   TotalDuration                                          (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UBANS_LifeSavingHairBlocking::GSNotifyBeginCS(const struct FUStGSNotifyParam& NotifyParam, float TotalDuration) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BANS_LifeSavingHairBlocking", "GSNotifyBeginCS");

	Params::BANS_LifeSavingHairBlocking_GSNotifyBeginCS Parms{};

	Parms.NotifyParam = std::move(NotifyParam);
	Parms.TotalDuration = TotalDuration;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function b1-Managed.BANS_LifeSavingHairBlocking.GSNotifyEndCS
// (Native, Event, Public, Protected, BlueprintEvent, Const)
// Parameters:
// struct FUStGSNotifyParam                NotifyParam                                            (Parm, ZeroConstructor, IsPlainOldData, NoDestructor)

void UBANS_LifeSavingHairBlocking::GSNotifyEndCS(const struct FUStGSNotifyParam& NotifyParam) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BANS_LifeSavingHairBlocking", "GSNotifyEndCS");

	Params::BANS_LifeSavingHairBlocking_GSNotifyEndCS Parms{};

	Parms.NotifyParam = std::move(NotifyParam);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function b1-Managed.BANS_LifeSavingHairWindow.GSNotifyBeginCS
// (Native, Event, Public, Protected, BlueprintEvent, Const)
// Parameters:
// struct FUStGSNotifyParam                NotifyParam                                            (Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
// float                                   TotalDuration                                          (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UBANS_LifeSavingHairWindow::GSNotifyBeginCS(const struct FUStGSNotifyParam& NotifyParam, float TotalDuration) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BANS_LifeSavingHairWindow", "GSNotifyBeginCS");

	Params::BANS_LifeSavingHairWindow_GSNotifyBeginCS Parms{};

	Parms.NotifyParam = std::move(NotifyParam);
	Parms.TotalDuration = TotalDuration;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function b1-Managed.BANS_LifeSavingHairWindow.GSNotifyEndCS
// (Native, Event, Public, Protected, BlueprintEvent, Const)
// Parameters:
// struct FUStGSNotifyParam                NotifyParam                                            (Parm, ZeroConstructor, IsPlainOldData, NoDestructor)

void UBANS_LifeSavingHairWindow::GSNotifyEndCS(const struct FUStGSNotifyParam& NotifyParam) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BANS_LifeSavingHairWindow", "GSNotifyEndCS");

	Params::BANS_LifeSavingHairWindow_GSNotifyEndCS Parms{};

	Parms.NotifyParam = std::move(NotifyParam);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function b1-Managed.GSEQG_AreaPointGenerator.DoItemGenerationCS
// (Native, Event, Public, BlueprintEvent, Const)
// Parameters:
// TArray<struct FVector>                  ContextLocations                                       (ConstParm, Parm, OutParm, ReferenceParm)

void UGSEQG_AreaPointGenerator::DoItemGenerationCS(const TArray<struct FVector>& ContextLocations) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GSEQG_AreaPointGenerator", "DoItemGenerationCS");

	Params::GSEQG_AreaPointGenerator_DoItemGenerationCS Parms{};

	Parms.ContextLocations = std::move(ContextLocations);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function b1-Managed.BUAnimHumanoidCS_SpecialMove.UpdateGroundAdditive
// (Native, Public, Private, HasOutParams, BlueprintCallable)
// Parameters:
// struct FAnimUpdateContext               Context                                                (Parm, OutParm, ReferenceParm)
// struct FAnimNodeReference               Node                                                   (Parm, OutParm, ReferenceParm, NoDestructor)

void UBUAnimHumanoidCS_SpecialMove::UpdateGroundAdditive(struct FAnimUpdateContext& Context, struct FAnimNodeReference& Node)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BUAnimHumanoidCS_SpecialMove", "UpdateGroundAdditive");

	Params::BUAnimHumanoidCS_SpecialMove_UpdateGroundAdditive Parms{};

	Parms.Context = std::move(Context);
	Parms.Node = std::move(Node);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	Context = std::move(Parms.Context);
	Node = std::move(Parms.Node);
}


// Function b1-Managed.BUAnimHumanoidCS_SpecialMove.UpdateGroundJump
// (Native, Public, Private, HasOutParams, BlueprintCallable)
// Parameters:
// struct FAnimUpdateContext               Context                                                (Parm, OutParm, ReferenceParm)
// struct FAnimNodeReference               Node                                                   (Parm, OutParm, ReferenceParm, NoDestructor)

void UBUAnimHumanoidCS_SpecialMove::UpdateGroundJump(struct FAnimUpdateContext& Context, struct FAnimNodeReference& Node)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BUAnimHumanoidCS_SpecialMove", "UpdateGroundJump");

	Params::BUAnimHumanoidCS_SpecialMove_UpdateGroundJump Parms{};

	Parms.Context = std::move(Context);
	Parms.Node = std::move(Node);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	Context = std::move(Parms.Context);
	Node = std::move(Parms.Node);
}


// Function b1-Managed.BUAnimHumanoidCS_SpecialMove.GetAnimCloudLand
// (Native, Public, Private, HasOutParams, BlueprintCallable, BlueprintPure)
// Parameters:
// class UAnimSequence*                    AnimCloudLand                                          (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UBUAnimHumanoidCS_SpecialMove::GetAnimCloudLand(class UAnimSequence** AnimCloudLand)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BUAnimHumanoidCS_SpecialMove", "GetAnimCloudLand");

	Params::BUAnimHumanoidCS_SpecialMove_GetAnimCloudLand Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	if (AnimCloudLand != nullptr)
		*AnimCloudLand = Parms.AnimCloudLand;
}


// Function b1-Managed.BUAnimHumanoidCS_SpecialMove.SetupLandAnim
// (Native, Public, Private, HasOutParams, BlueprintCallable)
// Parameters:
// struct FAnimUpdateContext               Context                                                (Parm, OutParm, ReferenceParm)
// struct FAnimNodeReference               Node                                                   (Parm, OutParm, ReferenceParm, NoDestructor)

void UBUAnimHumanoidCS_SpecialMove::SetupLandAnim(struct FAnimUpdateContext& Context, struct FAnimNodeReference& Node)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BUAnimHumanoidCS_SpecialMove", "SetupLandAnim");

	Params::BUAnimHumanoidCS_SpecialMove_SetupLandAnim Parms{};

	Parms.Context = std::move(Context);
	Parms.Node = std::move(Node);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	Context = std::move(Parms.Context);
	Node = std::move(Parms.Node);
}


// Function b1-Managed.BANS_GSVigorKeyCache.GSNotifyBeginCS
// (Native, Event, Public, Protected, BlueprintEvent, Const)
// Parameters:
// struct FUStGSNotifyParam                NotifyParam                                            (Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
// float                                   TotalDuration                                          (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UBANS_GSVigorKeyCache::GSNotifyBeginCS(const struct FUStGSNotifyParam& NotifyParam, float TotalDuration) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BANS_GSVigorKeyCache", "GSNotifyBeginCS");

	Params::BANS_GSVigorKeyCache_GSNotifyBeginCS Parms{};

	Parms.NotifyParam = std::move(NotifyParam);
	Parms.TotalDuration = TotalDuration;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function b1-Managed.BANS_GSVigorWindow.GSNotifyBeginCS
// (Native, Event, Public, Protected, BlueprintEvent, Const)
// Parameters:
// struct FUStGSNotifyParam                NotifyParam                                            (Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
// float                                   TotalDuration                                          (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UBANS_GSVigorWindow::GSNotifyBeginCS(const struct FUStGSNotifyParam& NotifyParam, float TotalDuration) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BANS_GSVigorWindow", "GSNotifyBeginCS");

	Params::BANS_GSVigorWindow_GSNotifyBeginCS Parms{};

	Parms.NotifyParam = std::move(NotifyParam);
	Parms.TotalDuration = TotalDuration;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function b1-Managed.BANS_GSRotateWithCamFwd.GSNotifyBeginCS
// (Native, Event, Public, Protected, BlueprintEvent, Const)
// Parameters:
// struct FUStGSNotifyParam                NotifyParam                                            (Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
// float                                   TotalDuration                                          (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UBANS_GSRotateWithCamFwd::GSNotifyBeginCS(const struct FUStGSNotifyParam& NotifyParam, float TotalDuration) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BANS_GSRotateWithCamFwd", "GSNotifyBeginCS");

	Params::BANS_GSRotateWithCamFwd_GSNotifyBeginCS Parms{};

	Parms.NotifyParam = std::move(NotifyParam);
	Parms.TotalDuration = TotalDuration;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function b1-Managed.BANS_GSRotateWithCamFwd.GSNotifyTickCS
// (Native, Event, Public, Protected, BlueprintEvent, Const)
// Parameters:
// struct FUStGSNotifyParam                NotifyParam                                            (Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
// float                                   FrameDeltaTime                                         (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UBANS_GSRotateWithCamFwd::GSNotifyTickCS(const struct FUStGSNotifyParam& NotifyParam, float FrameDeltaTime) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BANS_GSRotateWithCamFwd", "GSNotifyTickCS");

	Params::BANS_GSRotateWithCamFwd_GSNotifyTickCS Parms{};

	Parms.NotifyParam = std::move(NotifyParam);
	Parms.FrameDeltaTime = FrameDeltaTime;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function b1-Managed.BANS_GSRotateWithCamFwd.GSNotifyEndCS
// (Native, Event, Public, Protected, BlueprintEvent, Const)
// Parameters:
// struct FUStGSNotifyParam                NotifyParam                                            (Parm, ZeroConstructor, IsPlainOldData, NoDestructor)

void UBANS_GSRotateWithCamFwd::GSNotifyEndCS(const struct FUStGSNotifyParam& NotifyParam) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BANS_GSRotateWithCamFwd", "GSNotifyEndCS");

	Params::BANS_GSRotateWithCamFwd_GSNotifyEndCS Parms{};

	Parms.NotifyParam = std::move(NotifyParam);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function b1-Managed.BANS_OnSpiderSkillEntangleStiffEnded.GSNotifyBeginCS
// (Native, Event, Public, Protected, BlueprintEvent, Const)
// Parameters:
// struct FUStGSNotifyParam                NotifyParam                                            (Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
// float                                   TotalDuration                                          (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UBANS_OnSpiderSkillEntangleStiffEnded::GSNotifyBeginCS(const struct FUStGSNotifyParam& NotifyParam, float TotalDuration) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BANS_OnSpiderSkillEntangleStiffEnded", "GSNotifyBeginCS");

	Params::BANS_OnSpiderSkillEntangleStiffEnded_GSNotifyBeginCS Parms{};

	Parms.NotifyParam = std::move(NotifyParam);
	Parms.TotalDuration = TotalDuration;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function b1-Managed.BANS_OnSpiderSkillEntangleStiffEnded.GSNotifyTickCS
// (Native, Event, Public, Protected, BlueprintEvent, Const)
// Parameters:
// struct FUStGSNotifyParam                NotifyParam                                            (Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
// float                                   FrameDeltaTime                                         (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UBANS_OnSpiderSkillEntangleStiffEnded::GSNotifyTickCS(const struct FUStGSNotifyParam& NotifyParam, float FrameDeltaTime) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BANS_OnSpiderSkillEntangleStiffEnded", "GSNotifyTickCS");

	Params::BANS_OnSpiderSkillEntangleStiffEnded_GSNotifyTickCS Parms{};

	Parms.NotifyParam = std::move(NotifyParam);
	Parms.FrameDeltaTime = FrameDeltaTime;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function b1-Managed.BANS_OnSpiderSkillEntangleStiffEnded.GSNotifyEndCS
// (Native, Event, Public, Protected, BlueprintEvent, Const)
// Parameters:
// struct FUStGSNotifyParam                NotifyParam                                            (Parm, ZeroConstructor, IsPlainOldData, NoDestructor)

void UBANS_OnSpiderSkillEntangleStiffEnded::GSNotifyEndCS(const struct FUStGSNotifyParam& NotifyParam) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BANS_OnSpiderSkillEntangleStiffEnded", "GSNotifyEndCS");

	Params::BANS_OnSpiderSkillEntangleStiffEnded_GSNotifyEndCS Parms{};

	Parms.NotifyParam = std::move(NotifyParam);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function b1-Managed.BANS_PlayWaterSplash.GSNotifyBeginCS
// (Native, Event, Public, Protected, BlueprintEvent, Const)
// Parameters:
// struct FUStGSNotifyParam                NotifyParam                                            (Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
// float                                   TotalDuration                                          (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UBANS_PlayWaterSplash::GSNotifyBeginCS(const struct FUStGSNotifyParam& NotifyParam, float TotalDuration) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BANS_PlayWaterSplash", "GSNotifyBeginCS");

	Params::BANS_PlayWaterSplash_GSNotifyBeginCS Parms{};

	Parms.NotifyParam = std::move(NotifyParam);
	Parms.TotalDuration = TotalDuration;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function b1-Managed.BANS_PlayWaterSplash.GSNotifyTickCS
// (Native, Event, Public, Protected, BlueprintEvent, Const)
// Parameters:
// struct FUStGSNotifyParam                NotifyParam                                            (Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
// float                                   FrameDeltaTime                                         (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UBANS_PlayWaterSplash::GSNotifyTickCS(const struct FUStGSNotifyParam& NotifyParam, float FrameDeltaTime) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BANS_PlayWaterSplash", "GSNotifyTickCS");

	Params::BANS_PlayWaterSplash_GSNotifyTickCS Parms{};

	Parms.NotifyParam = std::move(NotifyParam);
	Parms.FrameDeltaTime = FrameDeltaTime;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function b1-Managed.BANS_PlayWaterSplash.GSNotifyEndCS
// (Native, Event, Public, Protected, BlueprintEvent, Const)
// Parameters:
// struct FUStGSNotifyParam                NotifyParam                                            (Parm, ZeroConstructor, IsPlainOldData, NoDestructor)

void UBANS_PlayWaterSplash::GSNotifyEndCS(const struct FUStGSNotifyParam& NotifyParam) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BANS_PlayWaterSplash", "GSNotifyEndCS");

	Params::BANS_PlayWaterSplash_GSNotifyEndCS Parms{};

	Parms.NotifyParam = std::move(NotifyParam);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function b1-Managed.BGW_ILRuntimeCLRBinding.GenerateClrBindingCode_AutoTest
// (Native, Static, Public, BlueprintCallable)
// Parameters:
// int32                                   bClrbinding                                            (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UBGW_ILRuntimeCLRBinding::GenerateClrBindingCode_AutoTest(int32 bClrbinding)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("BGW_ILRuntimeCLRBinding", "GenerateClrBindingCode_AutoTest");

	Params::BGW_ILRuntimeCLRBinding_GenerateClrBindingCode_AutoTest Parms{};

	Parms.bClrbinding = bClrbinding;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function b1-Managed.BANS_StopMontagePreLand.GSNotifyBeginCS
// (Native, Event, Public, Protected, BlueprintEvent, Const)
// Parameters:
// struct FUStGSNotifyParam                NotifyParam                                            (Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
// float                                   TotalDuration                                          (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UBANS_StopMontagePreLand::GSNotifyBeginCS(const struct FUStGSNotifyParam& NotifyParam, float TotalDuration) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BANS_StopMontagePreLand", "GSNotifyBeginCS");

	Params::BANS_StopMontagePreLand_GSNotifyBeginCS Parms{};

	Parms.NotifyParam = std::move(NotifyParam);
	Parms.TotalDuration = TotalDuration;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function b1-Managed.BANS_StopMontagePreLand.GSNotifyTickCS
// (Native, Event, Public, Protected, BlueprintEvent, Const)
// Parameters:
// struct FUStGSNotifyParam                NotifyParam                                            (Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
// float                                   FrameDeltaTime                                         (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UBANS_StopMontagePreLand::GSNotifyTickCS(const struct FUStGSNotifyParam& NotifyParam, float FrameDeltaTime) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BANS_StopMontagePreLand", "GSNotifyTickCS");

	Params::BANS_StopMontagePreLand_GSNotifyTickCS Parms{};

	Parms.NotifyParam = std::move(NotifyParam);
	Parms.FrameDeltaTime = FrameDeltaTime;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function b1-Managed.BANS_StopMontagePreLand.GSNotifyEndCS
// (Native, Event, Public, Protected, BlueprintEvent, Const)
// Parameters:
// struct FUStGSNotifyParam                NotifyParam                                            (Parm, ZeroConstructor, IsPlainOldData, NoDestructor)

void UBANS_StopMontagePreLand::GSNotifyEndCS(const struct FUStGSNotifyParam& NotifyParam) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BANS_StopMontagePreLand", "GSNotifyEndCS");

	Params::BANS_StopMontagePreLand_GSNotifyEndCS Parms{};

	Parms.NotifyParam = std::move(NotifyParam);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function b1-Managed.BANS_StopMontageWhenLand.GSNotifyBeginCS
// (Native, Event, Public, Protected, BlueprintEvent, Const)
// Parameters:
// struct FUStGSNotifyParam                NotifyParam                                            (Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
// float                                   TotalDuration                                          (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UBANS_StopMontageWhenLand::GSNotifyBeginCS(const struct FUStGSNotifyParam& NotifyParam, float TotalDuration) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BANS_StopMontageWhenLand", "GSNotifyBeginCS");

	Params::BANS_StopMontageWhenLand_GSNotifyBeginCS Parms{};

	Parms.NotifyParam = std::move(NotifyParam);
	Parms.TotalDuration = TotalDuration;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function b1-Managed.BANS_StopMontageWhenLand.GSNotifyTickCS
// (Native, Event, Public, Protected, BlueprintEvent, Const)
// Parameters:
// struct FUStGSNotifyParam                NotifyParam                                            (Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
// float                                   FrameDeltaTime                                         (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UBANS_StopMontageWhenLand::GSNotifyTickCS(const struct FUStGSNotifyParam& NotifyParam, float FrameDeltaTime) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BANS_StopMontageWhenLand", "GSNotifyTickCS");

	Params::BANS_StopMontageWhenLand_GSNotifyTickCS Parms{};

	Parms.NotifyParam = std::move(NotifyParam);
	Parms.FrameDeltaTime = FrameDeltaTime;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function b1-Managed.BANS_StopMontageWhenLand.GSNotifyEndCS
// (Native, Event, Public, Protected, BlueprintEvent, Const)
// Parameters:
// struct FUStGSNotifyParam                NotifyParam                                            (Parm, ZeroConstructor, IsPlainOldData, NoDestructor)

void UBANS_StopMontageWhenLand::GSNotifyEndCS(const struct FUStGSNotifyParam& NotifyParam) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BANS_StopMontageWhenLand", "GSNotifyEndCS");

	Params::BANS_StopMontageWhenLand_GSNotifyEndCS Parms{};

	Parms.NotifyParam = std::move(NotifyParam);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function b1-Managed.BED_BehaviorNode_BeAttackedNumFromSkill.GetNodeDescriptionInCS
// (Native, Event, Public, HasOutParams, BlueprintEvent, Const)
// Parameters:
// class FString                           ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash)

class FString UBED_BehaviorNode_BeAttackedNumFromSkill::GetNodeDescriptionInCS() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BED_BehaviorNode_BeAttackedNumFromSkill", "GetNodeDescriptionInCS");

	Params::BED_BehaviorNode_BeAttackedNumFromSkill_GetNodeDescriptionInCS Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function b1-Managed.BED_BehaviorNode_BeAttackedNumFromSkill.IsSupportViewType
// (Native, Event, Public, HasOutParams, BlueprintEvent, Const)
// Parameters:
// ECalliopeViewType                       InViewType                                             (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// uint8                                   ReturnValue                                            (Parm, OutParm, ReturnParm, NoDestructor, HasGetValueTypeHash)

uint8 UBED_BehaviorNode_BeAttackedNumFromSkill::IsSupportViewType(const ECalliopeViewType& InViewType) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BED_BehaviorNode_BeAttackedNumFromSkill", "IsSupportViewType");

	Params::BED_BehaviorNode_BeAttackedNumFromSkill_IsSupportViewType Parms{};

	Parms.InViewType = InViewType;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function b1-Managed.BANS_Teleport.GSNotifyBeginCS
// (Native, Event, Public, Protected, BlueprintEvent, Const)
// Parameters:
// struct FUStGSNotifyParam                NotifyParam                                            (Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
// float                                   TotalDuration                                          (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UBANS_Teleport::GSNotifyBeginCS(const struct FUStGSNotifyParam& NotifyParam, float TotalDuration) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BANS_Teleport", "GSNotifyBeginCS");

	Params::BANS_Teleport_GSNotifyBeginCS Parms{};

	Parms.NotifyParam = std::move(NotifyParam);
	Parms.TotalDuration = TotalDuration;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function b1-Managed.BED_ProcessMachineNode_GroupStart.GetNodeDescriptionInCS
// (Native, Event, Public, HasOutParams, BlueprintEvent, Const)
// Parameters:
// class FString                           ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash)

class FString UBED_ProcessMachineNode_GroupStart::GetNodeDescriptionInCS() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BED_ProcessMachineNode_GroupStart", "GetNodeDescriptionInCS");

	Params::BED_ProcessMachineNode_GroupStart_GetNodeDescriptionInCS Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function b1-Managed.BANS_ToggleWeaponStatus.GSNotifyBeginCS
// (Native, Event, Public, Protected, BlueprintEvent, Const)
// Parameters:
// struct FUStGSNotifyParam                NotifyParam                                            (Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
// float                                   TotalDuration                                          (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UBANS_ToggleWeaponStatus::GSNotifyBeginCS(const struct FUStGSNotifyParam& NotifyParam, float TotalDuration) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BANS_ToggleWeaponStatus", "GSNotifyBeginCS");

	Params::BANS_ToggleWeaponStatus_GSNotifyBeginCS Parms{};

	Parms.NotifyParam = std::move(NotifyParam);
	Parms.TotalDuration = TotalDuration;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function b1-Managed.BANS_ToggleWeaponStatus.GSNotifyEndCS
// (Native, Event, Public, Protected, BlueprintEvent, Const)
// Parameters:
// struct FUStGSNotifyParam                NotifyParam                                            (Parm, ZeroConstructor, IsPlainOldData, NoDestructor)

void UBANS_ToggleWeaponStatus::GSNotifyEndCS(const struct FUStGSNotifyParam& NotifyParam) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BANS_ToggleWeaponStatus", "GSNotifyEndCS");

	Params::BANS_ToggleWeaponStatus_GSNotifyEndCS Parms{};

	Parms.NotifyParam = std::move(NotifyParam);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function b1-Managed.BANS_TriggerBanTrans2DaSheng.GSNotifyBeginCS
// (Native, Event, Public, Protected, BlueprintEvent, Const)
// Parameters:
// struct FUStGSNotifyParam                NotifyParam                                            (Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
// float                                   TotalDuration                                          (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UBANS_TriggerBanTrans2DaSheng::GSNotifyBeginCS(const struct FUStGSNotifyParam& NotifyParam, float TotalDuration) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BANS_TriggerBanTrans2DaSheng", "GSNotifyBeginCS");

	Params::BANS_TriggerBanTrans2DaSheng_GSNotifyBeginCS Parms{};

	Parms.NotifyParam = std::move(NotifyParam);
	Parms.TotalDuration = TotalDuration;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function b1-Managed.BED_BehaviorNode_OnAllSummonBeKilled.GetNodeDescriptionInCS
// (Native, Event, Public, HasOutParams, BlueprintEvent, Const)
// Parameters:
// class FString                           ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash)

class FString UBED_BehaviorNode_OnAllSummonBeKilled::GetNodeDescriptionInCS() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BED_BehaviorNode_OnAllSummonBeKilled", "GetNodeDescriptionInCS");

	Params::BED_BehaviorNode_OnAllSummonBeKilled_GetNodeDescriptionInCS Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function b1-Managed.BED_BehaviorNode_OnAllSummonBeKilled.IsSupportViewType
// (Native, Event, Public, HasOutParams, BlueprintEvent, Const)
// Parameters:
// ECalliopeViewType                       InViewType                                             (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// uint8                                   ReturnValue                                            (Parm, OutParm, ReturnParm, NoDestructor, HasGetValueTypeHash)

uint8 UBED_BehaviorNode_OnAllSummonBeKilled::IsSupportViewType(const ECalliopeViewType& InViewType) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BED_BehaviorNode_OnAllSummonBeKilled", "IsSupportViewType");

	Params::BED_BehaviorNode_OnAllSummonBeKilled_IsSupportViewType Parms{};

	Parms.InViewType = InViewType;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function b1-Managed.BGU_QuestActor.OnPropertyChanged
// (Native, Event, Public, Protected, BlueprintEvent)
// Parameters:
// class FString                           MemberName                                             (Parm, ZeroConstructor, HasGetValueTypeHash)
// class FString                           PropertyName                                           (Parm, ZeroConstructor, HasGetValueTypeHash)

void ABGU_QuestActor::OnPropertyChanged(const class FString& MemberName, const class FString& PropertyName)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BGU_QuestActor", "OnPropertyChanged");

	Params::BGU_QuestActor_OnPropertyChanged Parms{};

	Parms.MemberName = std::move(MemberName);
	Parms.PropertyName = std::move(PropertyName);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function b1-Managed.BGU_QuestActor.ReceiveEndPlay
// (Native, Event, Public, Protected, BlueprintEvent)
// Parameters:
// EEndPlayReason                          EndPlayReason                                          (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ABGU_QuestActor::ReceiveEndPlay(EEndPlayReason EndPlayReason)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BGU_QuestActor", "ReceiveEndPlay");

	Params::BGU_QuestActor_ReceiveEndPlay Parms{};

	Parms.EndPlayReason = EndPlayReason;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function b1-Managed.BGU_QuestActor.OnDisableDynamicObstacle
// (Native, Event, Public, BlueprintEvent)

void ABGU_QuestActor::OnDisableDynamicObstacle()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BGU_QuestActor", "OnDisableDynamicObstacle");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function b1-Managed.BGU_QuestActor.OnEnableDynamicObstacle
// (Native, Event, Public, BlueprintEvent)

void ABGU_QuestActor::OnEnableDynamicObstacle()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BGU_QuestActor", "OnEnableDynamicObstacle");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function b1-Managed.BGU_QuestActor.OnCollisionBeginOverlap
// (Native, Event, Public, BlueprintEvent)
// Parameters:
// class UPrimitiveComponent*              OverlappedComponent                                    (ExportObject, Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// class AActor*                           OtherActor                                             (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// class UPrimitiveComponent*              OtherComp                                              (ExportObject, Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// int32                                   OtherBodyIndex                                         (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// uint8                                   bFromSweep                                             (Parm, NoDestructor, HasGetValueTypeHash)
// struct FHitResult                       SweepResult                                            (Parm, IsPlainOldData, NoDestructor)

void ABGU_QuestActor::OnCollisionBeginOverlap(class UPrimitiveComponent* OverlappedComponent, class AActor* OtherActor, class UPrimitiveComponent* OtherComp, int32 OtherBodyIndex, uint8 bFromSweep, const struct FHitResult& SweepResult)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BGU_QuestActor", "OnCollisionBeginOverlap");

	Params::BGU_QuestActor_OnCollisionBeginOverlap Parms{};

	Parms.OverlappedComponent = OverlappedComponent;
	Parms.OtherActor = OtherActor;
	Parms.OtherComp = OtherComp;
	Parms.OtherBodyIndex = OtherBodyIndex;
	Parms.bFromSweep = bFromSweep;
	Parms.SweepResult = std::move(SweepResult);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function b1-Managed.BGU_QuestActor.OnCollisionEndOverlap
// (Native, Event, Public, BlueprintEvent)
// Parameters:
// class UPrimitiveComponent*              OverlappedComponent                                    (ExportObject, Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// class AActor*                           OtherActor                                             (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// class UPrimitiveComponent*              OtherComp                                              (ExportObject, Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// int32                                   OtherBodyIndex                                         (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ABGU_QuestActor::OnCollisionEndOverlap(class UPrimitiveComponent* OverlappedComponent, class AActor* OtherActor, class UPrimitiveComponent* OtherComp, int32 OtherBodyIndex)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BGU_QuestActor", "OnCollisionEndOverlap");

	Params::BGU_QuestActor_OnCollisionEndOverlap Parms{};

	Parms.OverlappedComponent = OverlappedComponent;
	Parms.OtherActor = OtherActor;
	Parms.OtherComp = OtherComp;
	Parms.OtherBodyIndex = OtherBodyIndex;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function b1-Managed.BANS_TriggerSealingSpell.GSNotifyBeginCS
// (Native, Event, Public, Protected, BlueprintEvent, Const)
// Parameters:
// struct FUStGSNotifyParam                NotifyParam                                            (Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
// float                                   TotalDuration                                          (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UBANS_TriggerSealingSpell::GSNotifyBeginCS(const struct FUStGSNotifyParam& NotifyParam, float TotalDuration) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BANS_TriggerSealingSpell", "GSNotifyBeginCS");

	Params::BANS_TriggerSealingSpell_GSNotifyBeginCS Parms{};

	Parms.NotifyParam = std::move(NotifyParam);
	Parms.TotalDuration = TotalDuration;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function b1-Managed.BANS_TriggerTrans2DaSheng.GSNotifyBeginCS
// (Native, Event, Public, Protected, BlueprintEvent, Const)
// Parameters:
// struct FUStGSNotifyParam                NotifyParam                                            (Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
// float                                   TotalDuration                                          (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UBANS_TriggerTrans2DaSheng::GSNotifyBeginCS(const struct FUStGSNotifyParam& NotifyParam, float TotalDuration) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BANS_TriggerTrans2DaSheng", "GSNotifyBeginCS");

	Params::BANS_TriggerTrans2DaSheng_GSNotifyBeginCS Parms{};

	Parms.NotifyParam = std::move(NotifyParam);
	Parms.TotalDuration = TotalDuration;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function b1-Managed.BANS_UnhideAndPlayAnim.GSNotifyBeginCS
// (Native, Event, Public, Protected, BlueprintEvent, Const)
// Parameters:
// struct FUStGSNotifyParam                NotifyParam                                            (Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
// float                                   TotalDuration                                          (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UBANS_UnhideAndPlayAnim::GSNotifyBeginCS(const struct FUStGSNotifyParam& NotifyParam, float TotalDuration) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BANS_UnhideAndPlayAnim", "GSNotifyBeginCS");

	Params::BANS_UnhideAndPlayAnim_GSNotifyBeginCS Parms{};

	Parms.NotifyParam = std::move(NotifyParam);
	Parms.TotalDuration = TotalDuration;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function b1-Managed.BANS_UnhideAndPlayAnim.GSNotifyEndCS
// (Native, Event, Public, Protected, BlueprintEvent, Const)
// Parameters:
// struct FUStGSNotifyParam                NotifyParam                                            (Parm, ZeroConstructor, IsPlainOldData, NoDestructor)

void UBANS_UnhideAndPlayAnim::GSNotifyEndCS(const struct FUStGSNotifyParam& NotifyParam) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BANS_UnhideAndPlayAnim", "GSNotifyEndCS");

	Params::BANS_UnhideAndPlayAnim_GSNotifyEndCS Parms{};

	Parms.NotifyParam = std::move(NotifyParam);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function b1-Managed.BED_BehaviorNode_AMNotify.GetNodeDescriptionInCS
// (Native, Event, Public, HasOutParams, BlueprintEvent, Const)
// Parameters:
// class FString                           ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash)

class FString UBED_BehaviorNode_AMNotify::GetNodeDescriptionInCS() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BED_BehaviorNode_AMNotify", "GetNodeDescriptionInCS");

	Params::BED_BehaviorNode_AMNotify_GetNodeDescriptionInCS Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function b1-Managed.BED_BehaviorNode_AMNotify.IsSupportViewType
// (Native, Event, Public, HasOutParams, BlueprintEvent, Const)
// Parameters:
// ECalliopeViewType                       InViewType                                             (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// uint8                                   ReturnValue                                            (Parm, OutParm, ReturnParm, NoDestructor, HasGetValueTypeHash)

uint8 UBED_BehaviorNode_AMNotify::IsSupportViewType(const ECalliopeViewType& InViewType) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BED_BehaviorNode_AMNotify", "IsSupportViewType");

	Params::BED_BehaviorNode_AMNotify_IsSupportViewType Parms{};

	Parms.InViewType = InViewType;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function b1-Managed.BAN_ExitPhasePerformance.bIsNativeBranchingPointCS
// (Native, Event, Public, HasOutParams, BlueprintEvent, Const)
// Parameters:
// uint8                                   ReturnValue                                            (Parm, OutParm, ReturnParm, NoDestructor, HasGetValueTypeHash)

uint8 UBAN_ExitPhasePerformance::bIsNativeBranchingPointCS() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BAN_ExitPhasePerformance", "bIsNativeBranchingPointCS");

	Params::BAN_ExitPhasePerformance_bIsNativeBranchingPointCS Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function b1-Managed.BAN_ExitPhasePerformance.GSNotifyCS
// (Native, Event, Public, Protected, BlueprintEvent, Const)
// Parameters:
// struct FUStGSNotifyParam                NotifyParam                                            (Parm, ZeroConstructor, IsPlainOldData, NoDestructor)

void UBAN_ExitPhasePerformance::GSNotifyCS(const struct FUStGSNotifyParam& NotifyParam) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BAN_ExitPhasePerformance", "GSNotifyCS");

	Params::BAN_ExitPhasePerformance_GSNotifyCS Parms{};

	Parms.NotifyParam = std::move(NotifyParam);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function b1-Managed.BANS_GSTriggerTransEffect.GetSoftReferences
// (Native, Event, Public, HasOutParams, BlueprintEvent, Const)
// Parameters:
// TArray<struct FSoftObjectPath>          ReturnValue                                            (Parm, OutParm, ReturnParm)

TArray<struct FSoftObjectPath> UBANS_GSTriggerTransEffect::GetSoftReferences() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BANS_GSTriggerTransEffect", "GetSoftReferences");

	Params::BANS_GSTriggerTransEffect_GetSoftReferences Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function b1-Managed.BANS_GSTriggerTransEffect.GSNotifyBeginCS
// (Native, Event, Public, Protected, BlueprintEvent, Const)
// Parameters:
// struct FUStGSNotifyParam                NotifyParam                                            (Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
// float                                   TotalDuration                                          (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UBANS_GSTriggerTransEffect::GSNotifyBeginCS(const struct FUStGSNotifyParam& NotifyParam, float TotalDuration) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BANS_GSTriggerTransEffect", "GSNotifyBeginCS");

	Params::BANS_GSTriggerTransEffect_GSNotifyBeginCS Parms{};

	Parms.NotifyParam = std::move(NotifyParam);
	Parms.TotalDuration = TotalDuration;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function b1-Managed.BAN_GSApplyEnvironmentMask.GSNotifyCS
// (Native, Event, Public, Protected, BlueprintEvent, Const)
// Parameters:
// struct FUStGSNotifyParam                NotifyParam                                            (Parm, ZeroConstructor, IsPlainOldData, NoDestructor)

void UBAN_GSApplyEnvironmentMask::GSNotifyCS(const struct FUStGSNotifyParam& NotifyParam) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BAN_GSApplyEnvironmentMask", "GSNotifyCS");

	Params::BAN_GSApplyEnvironmentMask_GSNotifyCS Parms{};

	Parms.NotifyParam = std::move(NotifyParam);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function b1-Managed.BGUEnvironmentItemStateMachineActorBase.PlayAkEventWithDialogue
// (Native, Public, HasOutParams, BlueprintCallable)
// Parameters:
// class UAkComponent*                     AkComp                                                 (ExportObject, Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// class UAkAudioEvent*                    AkEvent                                                (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// int32                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

int32 ABGUEnvironmentItemStateMachineActorBase::PlayAkEventWithDialogue(class UAkComponent* AkComp, class UAkAudioEvent* AkEvent)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BGUEnvironmentItemStateMachineActorBase", "PlayAkEventWithDialogue");

	Params::BGUEnvironmentItemStateMachineActorBase_PlayAkEventWithDialogue Parms{};

	Parms.AkComp = AkComp;
	Parms.AkEvent = AkEvent;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function b1-Managed.BGUEnvironmentItemStateMachineActorBase.OnCollisionBeginOverlap
// (Native, Event, Public, BlueprintEvent)
// Parameters:
// class AActor*                           OtherActor                                             (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ABGUEnvironmentItemStateMachineActorBase::OnCollisionBeginOverlap(class AActor* OtherActor)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BGUEnvironmentItemStateMachineActorBase", "OnCollisionBeginOverlap");

	Params::BGUEnvironmentItemStateMachineActorBase_OnCollisionBeginOverlap Parms{};

	Parms.OtherActor = OtherActor;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function b1-Managed.BGUEnvironmentItemStateMachineActorBase.OnResetToOverlapDisable
// (Native, Event, Public, BlueprintEvent)

void ABGUEnvironmentItemStateMachineActorBase::OnResetToOverlapDisable()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BGUEnvironmentItemStateMachineActorBase", "OnResetToOverlapDisable");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function b1-Managed.BGUEnvironmentItemStateMachineActorBase.OnResetToOverlapEnable
// (Native, Event, Public, BlueprintEvent)

void ABGUEnvironmentItemStateMachineActorBase::OnResetToOverlapEnable()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BGUEnvironmentItemStateMachineActorBase", "OnResetToOverlapEnable");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function b1-Managed.BGUEnvironmentItemStateMachineActorBase.OnCollisionEndOverlap
// (Native, Event, Public, BlueprintEvent)
// Parameters:
// class AActor*                           OtherActor                                             (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ABGUEnvironmentItemStateMachineActorBase::OnCollisionEndOverlap(class AActor* OtherActor)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BGUEnvironmentItemStateMachineActorBase", "OnCollisionEndOverlap");

	Params::BGUEnvironmentItemStateMachineActorBase_OnCollisionEndOverlap Parms{};

	Parms.OtherActor = OtherActor;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function b1-Managed.BGUEnvironmentItemStateMachineActorBase.OnDisableOverlap
// (Native, Event, Public, BlueprintEvent)

void ABGUEnvironmentItemStateMachineActorBase::OnDisableOverlap()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BGUEnvironmentItemStateMachineActorBase", "OnDisableOverlap");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function b1-Managed.BGUEnvironmentItemStateMachineActorBase.OnEnableOverlap
// (Native, Event, Public, BlueprintEvent)

void ABGUEnvironmentItemStateMachineActorBase::OnEnableOverlap()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BGUEnvironmentItemStateMachineActorBase", "OnEnableOverlap");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function b1-Managed.BGUEnvironmentItemStateMachineActorBase.OnGSReset
// (Native, Event, Public, BlueprintEvent)

void ABGUEnvironmentItemStateMachineActorBase::OnGSReset()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BGUEnvironmentItemStateMachineActorBase", "OnGSReset");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function b1-Managed.BAN_GSCloudMoveAkEvent.GetSoftReferences
// (Native, Event, Public, HasOutParams, BlueprintEvent, Const)
// Parameters:
// TArray<struct FSoftObjectPath>          ReturnValue                                            (Parm, OutParm, ReturnParm)

TArray<struct FSoftObjectPath> UBAN_GSCloudMoveAkEvent::GetSoftReferences() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BAN_GSCloudMoveAkEvent", "GetSoftReferences");

	Params::BAN_GSCloudMoveAkEvent_GetSoftReferences Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function b1-Managed.BAN_GSCloudMoveAkEvent.GSNotifyCS
// (Native, Event, Public, Protected, BlueprintEvent, Const)
// Parameters:
// struct FUStGSNotifyParam                NotifyParam                                            (Parm, ZeroConstructor, IsPlainOldData, NoDestructor)

void UBAN_GSCloudMoveAkEvent::GSNotifyCS(const struct FUStGSNotifyParam& NotifyParam) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BAN_GSCloudMoveAkEvent", "GSNotifyCS");

	Params::BAN_GSCloudMoveAkEvent_GSNotifyCS Parms{};

	Parms.NotifyParam = std::move(NotifyParam);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function b1-Managed.BAN_GSDestroyProjectile_ExceptID.bIsNativeBranchingPointCS
// (Native, Event, Public, HasOutParams, BlueprintEvent, Const)
// Parameters:
// uint8                                   ReturnValue                                            (Parm, OutParm, ReturnParm, NoDestructor, HasGetValueTypeHash)

uint8 UBAN_GSDestroyProjectile_ExceptID::bIsNativeBranchingPointCS() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BAN_GSDestroyProjectile_ExceptID", "bIsNativeBranchingPointCS");

	Params::BAN_GSDestroyProjectile_ExceptID_bIsNativeBranchingPointCS Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function b1-Managed.BAN_GSDestroyProjectile_ExceptID.GSNotifyCS
// (Native, Event, Public, Protected, BlueprintEvent, Const)
// Parameters:
// struct FUStGSNotifyParam                NotifyParam                                            (Parm, ZeroConstructor, IsPlainOldData, NoDestructor)

void UBAN_GSDestroyProjectile_ExceptID::GSNotifyCS(const struct FUStGSNotifyParam& NotifyParam) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BAN_GSDestroyProjectile_ExceptID", "GSNotifyCS");

	Params::BAN_GSDestroyProjectile_ExceptID_GSNotifyCS Parms{};

	Parms.NotifyParam = std::move(NotifyParam);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function b1-Managed.BGW_ILRuntimeCrossBinding.GenerateCrossBindingCode_AutoTest
// (Native, Static, Public, BlueprintCallable)

void UBGW_ILRuntimeCrossBinding::GenerateCrossBindingCode_AutoTest()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("BGW_ILRuntimeCrossBinding", "GenerateCrossBindingCode_AutoTest");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function b1-Managed.BANS_GSJumpReady.GSNotifyBeginCS
// (Native, Event, Public, Protected, BlueprintEvent, Const)
// Parameters:
// struct FUStGSNotifyParam                NotifyParam                                            (Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
// float                                   TotalDuration                                          (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UBANS_GSJumpReady::GSNotifyBeginCS(const struct FUStGSNotifyParam& NotifyParam, float TotalDuration) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BANS_GSJumpReady", "GSNotifyBeginCS");

	Params::BANS_GSJumpReady_GSNotifyBeginCS Parms{};

	Parms.NotifyParam = std::move(NotifyParam);
	Parms.TotalDuration = TotalDuration;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function b1-Managed.BANS_GSJumpReady.GSNotifyEndCS
// (Native, Event, Public, Protected, BlueprintEvent, Const)
// Parameters:
// struct FUStGSNotifyParam                NotifyParam                                            (Parm, ZeroConstructor, IsPlainOldData, NoDestructor)

void UBANS_GSJumpReady::GSNotifyEndCS(const struct FUStGSNotifyParam& NotifyParam) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BANS_GSJumpReady", "GSNotifyEndCS");

	Params::BANS_GSJumpReady_GSNotifyEndCS Parms{};

	Parms.NotifyParam = std::move(NotifyParam);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function b1-Managed.BAN_GSMagicallyChangeFadeOut.GSNotifyCS
// (Native, Event, Public, Protected, BlueprintEvent, Const)
// Parameters:
// struct FUStGSNotifyParam                NotifyParam                                            (Parm, ZeroConstructor, IsPlainOldData, NoDestructor)

void UBAN_GSMagicallyChangeFadeOut::GSNotifyCS(const struct FUStGSNotifyParam& NotifyParam) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BAN_GSMagicallyChangeFadeOut", "GSNotifyCS");

	Params::BAN_GSMagicallyChangeFadeOut_GSNotifyCS Parms{};

	Parms.NotifyParam = std::move(NotifyParam);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function b1-Managed.BAN_GSStopInteractTargetIdleFX.GSNotifyCS
// (Native, Event, Public, Protected, BlueprintEvent, Const)
// Parameters:
// struct FUStGSNotifyParam                NotifyParam                                            (Parm, ZeroConstructor, IsPlainOldData, NoDestructor)

void UBAN_GSStopInteractTargetIdleFX::GSNotifyCS(const struct FUStGSNotifyParam& NotifyParam) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BAN_GSStopInteractTargetIdleFX", "GSNotifyCS");

	Params::BAN_GSStopInteractTargetIdleFX_GSNotifyCS Parms{};

	Parms.NotifyParam = std::move(NotifyParam);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function b1-Managed.BAN_GSFinishMedicineTalkAnim.bIsNativeBranchingPointCS
// (Native, Event, Public, HasOutParams, BlueprintEvent, Const)
// Parameters:
// uint8                                   ReturnValue                                            (Parm, OutParm, ReturnParm, NoDestructor, HasGetValueTypeHash)

uint8 UBAN_GSFinishMedicineTalkAnim::bIsNativeBranchingPointCS() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BAN_GSFinishMedicineTalkAnim", "bIsNativeBranchingPointCS");

	Params::BAN_GSFinishMedicineTalkAnim_bIsNativeBranchingPointCS Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function b1-Managed.BAN_GSFinishMedicineTalkAnim.GSNotifyCS
// (Native, Event, Public, Protected, BlueprintEvent, Const)
// Parameters:
// struct FUStGSNotifyParam                NotifyParam                                            (Parm, ZeroConstructor, IsPlainOldData, NoDestructor)

void UBAN_GSFinishMedicineTalkAnim::GSNotifyCS(const struct FUStGSNotifyParam& NotifyParam) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BAN_GSFinishMedicineTalkAnim", "GSNotifyCS");

	Params::BAN_GSFinishMedicineTalkAnim_GSNotifyCS Parms{};

	Parms.NotifyParam = std::move(NotifyParam);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function b1-Managed.BAN_GSItemTeleportTriggerPrepare.bIsNativeBranchingPointCS
// (Native, Event, Public, HasOutParams, BlueprintEvent, Const)
// Parameters:
// uint8                                   ReturnValue                                            (Parm, OutParm, ReturnParm, NoDestructor, HasGetValueTypeHash)

uint8 UBAN_GSItemTeleportTriggerPrepare::bIsNativeBranchingPointCS() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BAN_GSItemTeleportTriggerPrepare", "bIsNativeBranchingPointCS");

	Params::BAN_GSItemTeleportTriggerPrepare_bIsNativeBranchingPointCS Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function b1-Managed.BAN_GSItemTeleportTriggerPrepare.GSNotifyCS
// (Native, Event, Public, Protected, BlueprintEvent, Const)
// Parameters:
// struct FUStGSNotifyParam                NotifyParam                                            (Parm, ZeroConstructor, IsPlainOldData, NoDestructor)

void UBAN_GSItemTeleportTriggerPrepare::GSNotifyCS(const struct FUStGSNotifyParam& NotifyParam) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BAN_GSItemTeleportTriggerPrepare", "GSNotifyCS");

	Params::BAN_GSItemTeleportTriggerPrepare_GSNotifyCS Parms{};

	Parms.NotifyParam = std::move(NotifyParam);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function b1-Managed.BAN_InteractTriggerFinish.bIsNativeBranchingPointCS
// (Native, Event, Public, HasOutParams, BlueprintEvent, Const)
// Parameters:
// uint8                                   ReturnValue                                            (Parm, OutParm, ReturnParm, NoDestructor, HasGetValueTypeHash)

uint8 UBAN_InteractTriggerFinish::bIsNativeBranchingPointCS() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BAN_InteractTriggerFinish", "bIsNativeBranchingPointCS");

	Params::BAN_InteractTriggerFinish_bIsNativeBranchingPointCS Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function b1-Managed.BAN_InteractTriggerFinish.GSNotifyCS
// (Native, Event, Public, Protected, BlueprintEvent, Const)
// Parameters:
// struct FUStGSNotifyParam                NotifyParam                                            (Parm, ZeroConstructor, IsPlainOldData, NoDestructor)

void UBAN_InteractTriggerFinish::GSNotifyCS(const struct FUStGSNotifyParam& NotifyParam) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BAN_InteractTriggerFinish", "GSNotifyCS");

	Params::BAN_InteractTriggerFinish_GSNotifyCS Parms{};

	Parms.NotifyParam = std::move(NotifyParam);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function b1-Managed.BAN_GSIGuideRebirthFinish.bIsNativeBranchingPointCS
// (Native, Event, Public, HasOutParams, BlueprintEvent, Const)
// Parameters:
// uint8                                   ReturnValue                                            (Parm, OutParm, ReturnParm, NoDestructor, HasGetValueTypeHash)

uint8 UBAN_GSIGuideRebirthFinish::bIsNativeBranchingPointCS() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BAN_GSIGuideRebirthFinish", "bIsNativeBranchingPointCS");

	Params::BAN_GSIGuideRebirthFinish_bIsNativeBranchingPointCS Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function b1-Managed.BAN_GSIGuideRebirthFinish.GSNotifyCS
// (Native, Event, Public, Protected, BlueprintEvent, Const)
// Parameters:
// struct FUStGSNotifyParam                NotifyParam                                            (Parm, ZeroConstructor, IsPlainOldData, NoDestructor)

void UBAN_GSIGuideRebirthFinish::GSNotifyCS(const struct FUStGSNotifyParam& NotifyParam) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BAN_GSIGuideRebirthFinish", "GSNotifyCS");

	Params::BAN_GSIGuideRebirthFinish_GSNotifyCS Parms{};

	Parms.NotifyParam = std::move(NotifyParam);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function b1-Managed.BSN_MediaPlay.GetDisplayName
// (Native, Event, Public, HasOutParams, BlueprintEvent)
// Parameters:
// class FString                           ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash)

class FString UBSN_MediaPlay::GetDisplayName()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BSN_MediaPlay", "GetDisplayName");

	Params::BSN_MediaPlay_GetDisplayName Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function b1-Managed.BSN_MediaPlay.OnNotify
// (Native, Event, Public, BlueprintEvent)
// Parameters:
// class UCalliopeLevelSequencePlayer*     Player                                                 (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// int32                                   InStatus                                               (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// uint8                                   bInBackwards                                           (Parm, NoDestructor, HasGetValueTypeHash)

void UBSN_MediaPlay::OnNotify(class UCalliopeLevelSequencePlayer* Player, int32 InStatus, uint8 bInBackwards)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BSN_MediaPlay", "OnNotify");

	Params::BSN_MediaPlay_OnNotify Parms{};

	Parms.Player = Player;
	Parms.InStatus = InStatus;
	Parms.bInBackwards = bInBackwards;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function b1-Managed.BAN_GSItemTeleportTrigger.bIsNativeBranchingPointCS
// (Native, Event, Public, HasOutParams, BlueprintEvent, Const)
// Parameters:
// uint8                                   ReturnValue                                            (Parm, OutParm, ReturnParm, NoDestructor, HasGetValueTypeHash)

uint8 UBAN_GSItemTeleportTrigger::bIsNativeBranchingPointCS() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BAN_GSItemTeleportTrigger", "bIsNativeBranchingPointCS");

	Params::BAN_GSItemTeleportTrigger_bIsNativeBranchingPointCS Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function b1-Managed.BAN_GSItemTeleportTrigger.GSNotifyCS
// (Native, Event, Public, Protected, BlueprintEvent, Const)
// Parameters:
// struct FUStGSNotifyParam                NotifyParam                                            (Parm, ZeroConstructor, IsPlainOldData, NoDestructor)

void UBAN_GSItemTeleportTrigger::GSNotifyCS(const struct FUStGSNotifyParam& NotifyParam) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BAN_GSItemTeleportTrigger", "GSNotifyCS");

	Params::BAN_GSItemTeleportTrigger_GSNotifyCS Parms{};

	Parms.NotifyParam = std::move(NotifyParam);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function b1-Managed.BAN_GSRecreateClothing.GSNotifyCS
// (Native, Event, Public, Protected, BlueprintEvent, Const)
// Parameters:
// struct FUStGSNotifyParam                NotifyParam                                            (Parm, ZeroConstructor, IsPlainOldData, NoDestructor)

void UBAN_GSRecreateClothing::GSNotifyCS(const struct FUStGSNotifyParam& NotifyParam) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BAN_GSRecreateClothing", "GSNotifyCS");

	Params::BAN_GSRecreateClothing_GSNotifyCS Parms{};

	Parms.NotifyParam = std::move(NotifyParam);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function b1-Managed.BAN_GSSimulatePhysics.GSNotifyCS
// (Native, Event, Public, Protected, BlueprintEvent, Const)
// Parameters:
// struct FUStGSNotifyParam                NotifyParam                                            (Parm, ZeroConstructor, IsPlainOldData, NoDestructor)

void UBAN_GSSimulatePhysics::GSNotifyCS(const struct FUStGSNotifyParam& NotifyParam) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BAN_GSSimulatePhysics", "GSNotifyCS");

	Params::BAN_GSSimulatePhysics_GSNotifyCS Parms{};

	Parms.NotifyParam = std::move(NotifyParam);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function b1-Managed.BAN_GSTriggerWinePartner.bIsNativeBranchingPointCS
// (Native, Event, Public, HasOutParams, BlueprintEvent, Const)
// Parameters:
// uint8                                   ReturnValue                                            (Parm, OutParm, ReturnParm, NoDestructor, HasGetValueTypeHash)

uint8 UBAN_GSTriggerWinePartner::bIsNativeBranchingPointCS() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BAN_GSTriggerWinePartner", "bIsNativeBranchingPointCS");

	Params::BAN_GSTriggerWinePartner_bIsNativeBranchingPointCS Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function b1-Managed.BAN_GSTriggerWinePartner.GSNotifyCS
// (Native, Event, Public, Protected, BlueprintEvent, Const)
// Parameters:
// struct FUStGSNotifyParam                NotifyParam                                            (Parm, ZeroConstructor, IsPlainOldData, NoDestructor)

void UBAN_GSTriggerWinePartner::GSNotifyCS(const struct FUStGSNotifyParam& NotifyParam) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BAN_GSTriggerWinePartner", "GSNotifyCS");

	Params::BAN_GSTriggerWinePartner_GSNotifyCS Parms{};

	Parms.NotifyParam = std::move(NotifyParam);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function b1-Managed.BAN_GainItem.GSNotifyCS
// (Native, Event, Public, Protected, BlueprintEvent, Const)
// Parameters:
// struct FUStGSNotifyParam                NotifyParam                                            (Parm, ZeroConstructor, IsPlainOldData, NoDestructor)

void UBAN_GainItem::GSNotifyCS(const struct FUStGSNotifyParam& NotifyParam) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BAN_GainItem", "GSNotifyCS");

	Params::BAN_GainItem_GSNotifyCS Parms{};

	Parms.NotifyParam = std::move(NotifyParam);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function b1-Managed.BAN_GSFinishSeedSubmitAnim.bIsNativeBranchingPointCS
// (Native, Event, Public, HasOutParams, BlueprintEvent, Const)
// Parameters:
// uint8                                   ReturnValue                                            (Parm, OutParm, ReturnParm, NoDestructor, HasGetValueTypeHash)

uint8 UBAN_GSFinishSeedSubmitAnim::bIsNativeBranchingPointCS() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BAN_GSFinishSeedSubmitAnim", "bIsNativeBranchingPointCS");

	Params::BAN_GSFinishSeedSubmitAnim_bIsNativeBranchingPointCS Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function b1-Managed.BAN_GSFinishSeedSubmitAnim.GSNotifyCS
// (Native, Event, Public, Protected, BlueprintEvent, Const)
// Parameters:
// struct FUStGSNotifyParam                NotifyParam                                            (Parm, ZeroConstructor, IsPlainOldData, NoDestructor)

void UBAN_GSFinishSeedSubmitAnim::GSNotifyCS(const struct FUStGSNotifyParam& NotifyParam) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BAN_GSFinishSeedSubmitAnim", "GSNotifyCS");

	Params::BAN_GSFinishSeedSubmitAnim_GSNotifyCS Parms{};

	Parms.NotifyParam = std::move(NotifyParam);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function b1-Managed.BAN_PlayDBCWithTargetInfo.GSNotifyCS
// (Native, Event, Public, Protected, BlueprintEvent, Const)
// Parameters:
// struct FUStGSNotifyParam                NotifyParam                                            (Parm, ZeroConstructor, IsPlainOldData, NoDestructor)

void UBAN_PlayDBCWithTargetInfo::GSNotifyCS(const struct FUStGSNotifyParam& NotifyParam) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BAN_PlayDBCWithTargetInfo", "GSNotifyCS");

	Params::BAN_PlayDBCWithTargetInfo_GSNotifyCS Parms{};

	Parms.NotifyParam = std::move(NotifyParam);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function b1-Managed.BAN_Suicide.bIsNativeBranchingPointCS
// (Native, Event, Public, HasOutParams, BlueprintEvent, Const)
// Parameters:
// uint8                                   ReturnValue                                            (Parm, OutParm, ReturnParm, NoDestructor, HasGetValueTypeHash)

uint8 UBAN_Suicide::bIsNativeBranchingPointCS() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BAN_Suicide", "bIsNativeBranchingPointCS");

	Params::BAN_Suicide_bIsNativeBranchingPointCS Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function b1-Managed.BAN_Suicide.GSNotifyCS
// (Native, Event, Public, Protected, BlueprintEvent, Const)
// Parameters:
// struct FUStGSNotifyParam                NotifyParam                                            (Parm, ZeroConstructor, IsPlainOldData, NoDestructor)

void UBAN_Suicide::GSNotifyCS(const struct FUStGSNotifyParam& NotifyParam) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BAN_Suicide", "GSNotifyCS");

	Params::BAN_Suicide_GSNotifyCS Parms{};

	Parms.NotifyParam = std::move(NotifyParam);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function b1-Managed.BAN_SwitchTransSpellSolution.bIsNativeBranchingPointCS
// (Native, Event, Public, HasOutParams, BlueprintEvent, Const)
// Parameters:
// uint8                                   ReturnValue                                            (Parm, OutParm, ReturnParm, NoDestructor, HasGetValueTypeHash)

uint8 UBAN_SwitchTransSpellSolution::bIsNativeBranchingPointCS() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BAN_SwitchTransSpellSolution", "bIsNativeBranchingPointCS");

	Params::BAN_SwitchTransSpellSolution_bIsNativeBranchingPointCS Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function b1-Managed.BAN_SwitchTransSpellSolution.GetNotifyName
// (Native, Event, Public, HasOutParams, BlueprintEvent, Const)
// Parameters:
// class FString                           ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash)

class FString UBAN_SwitchTransSpellSolution::GetNotifyName() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BAN_SwitchTransSpellSolution", "GetNotifyName");

	Params::BAN_SwitchTransSpellSolution_GetNotifyName Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function b1-Managed.BAN_SwitchTransSpellSolution.GSNotifyCS
// (Native, Event, Public, Protected, BlueprintEvent, Const)
// Parameters:
// struct FUStGSNotifyParam                NotifyParam                                            (Parm, ZeroConstructor, IsPlainOldData, NoDestructor)

void UBAN_SwitchTransSpellSolution::GSNotifyCS(const struct FUStGSNotifyParam& NotifyParam) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BAN_SwitchTransSpellSolution", "GSNotifyCS");

	Params::BAN_SwitchTransSpellSolution_GSNotifyCS Parms{};

	Parms.NotifyParam = std::move(NotifyParam);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function b1-Managed.GSEventCollectionBase.InitializeCS
// (Native, Event, Public, BlueprintEvent)

void UGSEventCollectionBase::InitializeCS()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GSEventCollectionBase", "InitializeCS");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function b1-Managed.GSEventCollectionBase.EndPlayInCS
// (Native, Event, Public, BlueprintEvent)
// Parameters:
// EEndPlayReason                          EndPlayReason                                          (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UGSEventCollectionBase::EndPlayInCS(EEndPlayReason EndPlayReason)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GSEventCollectionBase", "EndPlayInCS");

	Params::GSEventCollectionBase_EndPlayInCS Parms{};

	Parms.EndPlayReason = EndPlayReason;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function b1-Managed.BUS_GSEventCollection.Evt_TriggerSkillEffect_Transmit_SPTransmitRollBack_Client
// (Net, NetReliable, Native, Event, Public, NetClient)
// Parameters:
// int32                                   EffectID                                               (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// struct FEffectInstReq                   EffectInstReq                                          (Parm, NoDestructor, HasGetValueTypeHash)
// class AActor*                           InnerTarget                                            (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// uint8                                   bWithRPCEvent                                          (Parm, NoDestructor, HasGetValueTypeHash)
// int32                                   PredictionKeyId                                        (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// class AActor*                           __TriggerActor                                         (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UBUS_GSEventCollection::Evt_TriggerSkillEffect_Transmit_SPTransmitRollBack_Client(int32 EffectID, const struct FEffectInstReq& EffectInstReq, class AActor* InnerTarget, uint8 bWithRPCEvent, int32 PredictionKeyId, class AActor* __TriggerActor)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BUS_GSEventCollection", "Evt_TriggerSkillEffect_Transmit_SPTransmitRollBack_Client");

	Params::BUS_GSEventCollection_Evt_TriggerSkillEffect_Transmit_SPTransmitRollBack_Client Parms{};

	Parms.EffectID = EffectID;
	Parms.EffectInstReq = std::move(EffectInstReq);
	Parms.InnerTarget = InnerTarget;
	Parms.bWithRPCEvent = bWithRPCEvent;
	Parms.PredictionKeyId = PredictionKeyId;
	Parms.__TriggerActor = __TriggerActor;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function b1-Managed.BUS_GSEventCollection.Evt_TriggerSkillEffect_Transmit_SPTransmitConfirm_Client
// (Net, NetReliable, Native, Event, Public, NetClient)
// Parameters:
// int32                                   EffectID                                               (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// struct FEffectInstReq                   EffectInstReq                                          (Parm, NoDestructor, HasGetValueTypeHash)
// class AActor*                           InnerTarget                                            (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// uint8                                   bWithRPCEvent                                          (Parm, NoDestructor, HasGetValueTypeHash)
// int32                                   PredictionKeyId                                        (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// class AActor*                           __TriggerActor                                         (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UBUS_GSEventCollection::Evt_TriggerSkillEffect_Transmit_SPTransmitConfirm_Client(int32 EffectID, const struct FEffectInstReq& EffectInstReq, class AActor* InnerTarget, uint8 bWithRPCEvent, int32 PredictionKeyId, class AActor* __TriggerActor)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BUS_GSEventCollection", "Evt_TriggerSkillEffect_Transmit_SPTransmitConfirm_Client");

	Params::BUS_GSEventCollection_Evt_TriggerSkillEffect_Transmit_SPTransmitConfirm_Client Parms{};

	Parms.EffectID = EffectID;
	Parms.EffectInstReq = std::move(EffectInstReq);
	Parms.InnerTarget = InnerTarget;
	Parms.bWithRPCEvent = bWithRPCEvent;
	Parms.PredictionKeyId = PredictionKeyId;
	Parms.__TriggerActor = __TriggerActor;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function b1-Managed.BUS_GSEventCollection.Evt_TestEventCollectionVectorMultiCast_Multicast_Invoke
// (Net, Native, Event, NetMulticast, Public)
// Parameters:
// struct FVector                          Vector                                                 (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UBUS_GSEventCollection::Evt_TestEventCollectionVectorMultiCast_Multicast_Invoke(const struct FVector& Vector)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BUS_GSEventCollection", "Evt_TestEventCollectionVectorMultiCast_Multicast_Invoke");

	Params::BUS_GSEventCollection_Evt_TestEventCollectionVectorMultiCast_Multicast_Invoke Parms{};

	Parms.Vector = std::move(Vector);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function b1-Managed.BUS_GSEventCollection.Evt_TestEventCollectionStringMultiCast_Multicast_Invoke
// (Net, Native, Event, NetMulticast, Public)
// Parameters:
// class FString                           P1                                                     (Parm, ZeroConstructor, HasGetValueTypeHash)

void UBUS_GSEventCollection::Evt_TestEventCollectionStringMultiCast_Multicast_Invoke(const class FString& P1)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BUS_GSEventCollection", "Evt_TestEventCollectionStringMultiCast_Multicast_Invoke");

	Params::BUS_GSEventCollection_Evt_TestEventCollectionStringMultiCast_Multicast_Invoke Parms{};

	Parms.P1 = std::move(P1);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function b1-Managed.BUS_GSEventCollection.Evt_TriggerNormalDamageEffect_SPTransmitRollBack_Client
// (Net, NetReliable, Native, Event, Public, NetClient)
// Parameters:
// class AActor*                           Attacker                                               (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// struct FSkillDamageConfig               SkillDamageConfig                                      (Parm, ZeroConstructor, HasGetValueTypeHash)
// struct FEffectInstReq                   EffectInstReq                                          (Parm, NoDestructor, HasGetValueTypeHash)
// struct FBattleAttrSnapShot              Attacker_AttrMemData                                   (Parm, NoDestructor, HasGetValueTypeHash)
// int32                                   PredictionKeyId                                        (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// class AActor*                           __TriggerActor                                         (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UBUS_GSEventCollection::Evt_TriggerNormalDamageEffect_SPTransmitRollBack_Client(class AActor* Attacker, const struct FSkillDamageConfig& SkillDamageConfig, const struct FEffectInstReq& EffectInstReq, const struct FBattleAttrSnapShot& Attacker_AttrMemData, int32 PredictionKeyId, class AActor* __TriggerActor)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BUS_GSEventCollection", "Evt_TriggerNormalDamageEffect_SPTransmitRollBack_Client");

	Params::BUS_GSEventCollection_Evt_TriggerNormalDamageEffect_SPTransmitRollBack_Client Parms{};

	Parms.Attacker = Attacker;
	Parms.SkillDamageConfig = std::move(SkillDamageConfig);
	Parms.EffectInstReq = std::move(EffectInstReq);
	Parms.Attacker_AttrMemData = std::move(Attacker_AttrMemData);
	Parms.PredictionKeyId = PredictionKeyId;
	Parms.__TriggerActor = __TriggerActor;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function b1-Managed.BUS_GSEventCollection.Evt_TestEventCollectionObjectMultiCast_Multicast_Invoke
// (Net, Native, Event, NetMulticast, Public)
// Parameters:
// class UObject*                          Object                                                 (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UBUS_GSEventCollection::Evt_TestEventCollectionObjectMultiCast_Multicast_Invoke(class UObject* Object)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BUS_GSEventCollection", "Evt_TestEventCollectionObjectMultiCast_Multicast_Invoke");

	Params::BUS_GSEventCollection_Evt_TestEventCollectionObjectMultiCast_Multicast_Invoke Parms{};

	Parms.Object = Object;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function b1-Managed.BUS_GSEventCollection.Evt_SceneObjTransitByEventNoSaveState_Multicast_Invoke
// (Net, Native, Event, NetMulticast, Public)
// Parameters:
// struct FGameplayTag                     Tag                                                    (Parm, NoDestructor, HasGetValueTypeHash)

void UBUS_GSEventCollection::Evt_SceneObjTransitByEventNoSaveState_Multicast_Invoke(const struct FGameplayTag& Tag)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BUS_GSEventCollection", "Evt_SceneObjTransitByEventNoSaveState_Multicast_Invoke");

	Params::BUS_GSEventCollection_Evt_SceneObjTransitByEventNoSaveState_Multicast_Invoke Parms{};

	Parms.Tag = std::move(Tag);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function b1-Managed.BUS_GSEventCollection.Evt_TriggerNormalDamageEffect_SPTransmitConfirm_Client
// (Net, NetReliable, Native, Event, Public, NetClient)
// Parameters:
// class AActor*                           Attacker                                               (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// struct FSkillDamageConfig               SkillDamageConfig                                      (Parm, ZeroConstructor, HasGetValueTypeHash)
// struct FEffectInstReq                   EffectInstReq                                          (Parm, NoDestructor, HasGetValueTypeHash)
// struct FBattleAttrSnapShot              Attacker_AttrMemData                                   (Parm, NoDestructor, HasGetValueTypeHash)
// int32                                   PredictionKeyId                                        (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// class AActor*                           __TriggerActor                                         (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UBUS_GSEventCollection::Evt_TriggerNormalDamageEffect_SPTransmitConfirm_Client(class AActor* Attacker, const struct FSkillDamageConfig& SkillDamageConfig, const struct FEffectInstReq& EffectInstReq, const struct FBattleAttrSnapShot& Attacker_AttrMemData, int32 PredictionKeyId, class AActor* __TriggerActor)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BUS_GSEventCollection", "Evt_TriggerNormalDamageEffect_SPTransmitConfirm_Client");

	Params::BUS_GSEventCollection_Evt_TriggerNormalDamageEffect_SPTransmitConfirm_Client Parms{};

	Parms.Attacker = Attacker;
	Parms.SkillDamageConfig = std::move(SkillDamageConfig);
	Parms.EffectInstReq = std::move(EffectInstReq);
	Parms.Attacker_AttrMemData = std::move(Attacker_AttrMemData);
	Parms.PredictionKeyId = PredictionKeyId;
	Parms.__TriggerActor = __TriggerActor;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function b1-Managed.BUS_GSEventCollection.Evt_TestEventCollectionActorMultiCast_Multicast_Invoke
// (Net, Native, Event, NetMulticast, Public)
// Parameters:
// class AActor*                           Actor                                                  (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UBUS_GSEventCollection::Evt_TestEventCollectionActorMultiCast_Multicast_Invoke(class AActor* Actor)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BUS_GSEventCollection", "Evt_TestEventCollectionActorMultiCast_Multicast_Invoke");

	Params::BUS_GSEventCollection_Evt_TestEventCollectionActorMultiCast_Multicast_Invoke Parms{};

	Parms.Actor = Actor;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function b1-Managed.BUS_GSEventCollection.Evt_TestEventCollectionFloatMultiCast_Multicast_Invoke
// (Net, Native, Event, NetMulticast, Public)
// Parameters:
// float                                   P1                                                     (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UBUS_GSEventCollection::Evt_TestEventCollectionFloatMultiCast_Multicast_Invoke(float P1)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BUS_GSEventCollection", "Evt_TestEventCollectionFloatMultiCast_Multicast_Invoke");

	Params::BUS_GSEventCollection_Evt_TestEventCollectionFloatMultiCast_Multicast_Invoke Parms{};

	Parms.P1 = P1;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function b1-Managed.BUS_GSEventCollection.Evt_TestEventCollectionNameMultiCast_Multicast_Invoke
// (Net, Native, Event, NetMulticast, Public)
// Parameters:
// class FName                             P1                                                     (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UBUS_GSEventCollection::Evt_TestEventCollectionNameMultiCast_Multicast_Invoke(class FName P1)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BUS_GSEventCollection", "Evt_TestEventCollectionNameMultiCast_Multicast_Invoke");

	Params::BUS_GSEventCollection_Evt_TestEventCollectionNameMultiCast_Multicast_Invoke Parms{};

	Parms.P1 = P1;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function b1-Managed.BUS_GSEventCollection.Evt_ClientMultiCastRPCTest2_SPTransmitRollBack_Client
// (Net, NetReliable, Native, Event, Public, NetClient)
// Parameters:
// class UAnimMontage*                     Montage                                                (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// float                                   PlayTimeRate                                           (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// float                                   MontagePosOffset                                       (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// class FName                             StartSectionName                                       (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// EMontageBindReason                      Reason                                                 (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// int32                                   PredictionKeyId                                        (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// class AActor*                           __TriggerActor                                         (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UBUS_GSEventCollection::Evt_ClientMultiCastRPCTest2_SPTransmitRollBack_Client(class UAnimMontage* Montage, float PlayTimeRate, float MontagePosOffset, class FName StartSectionName, EMontageBindReason Reason, int32 PredictionKeyId, class AActor* __TriggerActor)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BUS_GSEventCollection", "Evt_ClientMultiCastRPCTest2_SPTransmitRollBack_Client");

	Params::BUS_GSEventCollection_Evt_ClientMultiCastRPCTest2_SPTransmitRollBack_Client Parms{};

	Parms.Montage = Montage;
	Parms.PlayTimeRate = PlayTimeRate;
	Parms.MontagePosOffset = MontagePosOffset;
	Parms.StartSectionName = StartSectionName;
	Parms.Reason = Reason;
	Parms.PredictionKeyId = PredictionKeyId;
	Parms.__TriggerActor = __TriggerActor;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function b1-Managed.BUS_GSEventCollection.Evt_TestEventCollectionIntMultiCast_Multicast_Invoke
// (Net, Native, Event, NetMulticast, Public)
// Parameters:
// int32                                   P1                                                     (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UBUS_GSEventCollection::Evt_TestEventCollectionIntMultiCast_Multicast_Invoke(int32 P1)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BUS_GSEventCollection", "Evt_TestEventCollectionIntMultiCast_Multicast_Invoke");

	Params::BUS_GSEventCollection_Evt_TestEventCollectionIntMultiCast_Multicast_Invoke Parms{};

	Parms.P1 = P1;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function b1-Managed.BUS_GSEventCollection.Evt_ClientMultiCastRPCTest2_SPTransmitConfirm_Client
// (Net, NetReliable, Native, Event, Public, NetClient)
// Parameters:
// class UAnimMontage*                     Montage                                                (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// float                                   PlayTimeRate                                           (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// float                                   MontagePosOffset                                       (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// class FName                             StartSectionName                                       (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// EMontageBindReason                      Reason                                                 (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// int32                                   PredictionKeyId                                        (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// class AActor*                           __TriggerActor                                         (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UBUS_GSEventCollection::Evt_ClientMultiCastRPCTest2_SPTransmitConfirm_Client(class UAnimMontage* Montage, float PlayTimeRate, float MontagePosOffset, class FName StartSectionName, EMontageBindReason Reason, int32 PredictionKeyId, class AActor* __TriggerActor)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BUS_GSEventCollection", "Evt_ClientMultiCastRPCTest2_SPTransmitConfirm_Client");

	Params::BUS_GSEventCollection_Evt_ClientMultiCastRPCTest2_SPTransmitConfirm_Client Parms{};

	Parms.Montage = Montage;
	Parms.PlayTimeRate = PlayTimeRate;
	Parms.MontagePosOffset = MontagePosOffset;
	Parms.StartSectionName = StartSectionName;
	Parms.Reason = Reason;
	Parms.PredictionKeyId = PredictionKeyId;
	Parms.__TriggerActor = __TriggerActor;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function b1-Managed.BUS_GSEventCollection.Evt_BattleLogicChangeEquipIllusion_Multicast_Invoke
// (Net, Native, Event, NetMulticast, Public)
// Parameters:
// class FString                           EquipIllusionConfigPath                                (Parm, ZeroConstructor, HasGetValueTypeHash)

void UBUS_GSEventCollection::Evt_BattleLogicChangeEquipIllusion_Multicast_Invoke(const class FString& EquipIllusionConfigPath)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BUS_GSEventCollection", "Evt_BattleLogicChangeEquipIllusion_Multicast_Invoke");

	Params::BUS_GSEventCollection_Evt_BattleLogicChangeEquipIllusion_Multicast_Invoke Parms{};

	Parms.EquipIllusionConfigPath = std::move(EquipIllusionConfigPath);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function b1-Managed.BUS_GSEventCollection.Evt_BattleLogicResetEquipIllusion_Multicast_Invoke
// (Net, Native, Event, NetMulticast, Public)

void UBUS_GSEventCollection::Evt_BattleLogicResetEquipIllusion_Multicast_Invoke()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BUS_GSEventCollection", "Evt_BattleLogicResetEquipIllusion_Multicast_Invoke");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function b1-Managed.BUS_GSEventCollection.Evt_TriggerSkillEffect_TransmitSPTransmitMultiCast
// (Net, NetReliable, Native, Event, NetMulticast, Public)
// Parameters:
// int32                                   EffectID                                               (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// struct FEffectInstReq                   EffectInstReq                                          (Parm, NoDestructor, HasGetValueTypeHash)
// class AActor*                           InnerTarget                                            (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// uint8                                   bWithRPCEvent                                          (Parm, NoDestructor, HasGetValueTypeHash)
// class AActor*                           __TriggerActor                                         (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UBUS_GSEventCollection::Evt_TriggerSkillEffect_TransmitSPTransmitMultiCast(int32 EffectID, const struct FEffectInstReq& EffectInstReq, class AActor* InnerTarget, uint8 bWithRPCEvent, class AActor* __TriggerActor)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BUS_GSEventCollection", "Evt_TriggerSkillEffect_TransmitSPTransmitMultiCast");

	Params::BUS_GSEventCollection_Evt_TriggerSkillEffect_TransmitSPTransmitMultiCast Parms{};

	Parms.EffectID = EffectID;
	Parms.EffectInstReq = std::move(EffectInstReq);
	Parms.InnerTarget = InnerTarget;
	Parms.bWithRPCEvent = bWithRPCEvent;
	Parms.__TriggerActor = __TriggerActor;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function b1-Managed.BUS_GSEventCollection.Evt_SetAMScaleRateByPosMultiCast_Multicast_Invoke
// (Net, NetReliable, Native, Event, NetMulticast, Public)
// Parameters:
// EAMScaleType                            AMScaleType                                            (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// EAMScaleRateAxis                        AMScaleAxis                                            (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// float                                   LandingTraceLength                                     (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// float                                   PureScaleValue                                         (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// int32                                   CachedDataID                                           (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// uint8                                   AttackRangeLimit                                       (Parm, NoDestructor, HasGetValueTypeHash)
// uint8                                   DebugMode                                              (Parm, NoDestructor, HasGetValueTypeHash)
// float                                   TotalDuration                                          (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// float                                   NotifyBeginTime                                        (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// float                                   NotifyEndTime                                          (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// float                                   AMScaleMinRate                                         (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// float                                   AMScaleMaxRate                                         (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// float                                   AMScaleMoveOffset                                      (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// float                                   AMScaleMoveOffsetZ                                     (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UBUS_GSEventCollection::Evt_SetAMScaleRateByPosMultiCast_Multicast_Invoke(EAMScaleType AMScaleType, EAMScaleRateAxis AMScaleAxis, float LandingTraceLength, float PureScaleValue, int32 CachedDataID, uint8 AttackRangeLimit, uint8 DebugMode, float TotalDuration, float NotifyBeginTime, float NotifyEndTime, float AMScaleMinRate, float AMScaleMaxRate, float AMScaleMoveOffset, float AMScaleMoveOffsetZ)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BUS_GSEventCollection", "Evt_SetAMScaleRateByPosMultiCast_Multicast_Invoke");

	Params::BUS_GSEventCollection_Evt_SetAMScaleRateByPosMultiCast_Multicast_Invoke Parms{};

	Parms.AMScaleType = AMScaleType;
	Parms.AMScaleAxis = AMScaleAxis;
	Parms.LandingTraceLength = LandingTraceLength;
	Parms.PureScaleValue = PureScaleValue;
	Parms.CachedDataID = CachedDataID;
	Parms.AttackRangeLimit = AttackRangeLimit;
	Parms.DebugMode = DebugMode;
	Parms.TotalDuration = TotalDuration;
	Parms.NotifyBeginTime = NotifyBeginTime;
	Parms.NotifyEndTime = NotifyEndTime;
	Parms.AMScaleMinRate = AMScaleMinRate;
	Parms.AMScaleMaxRate = AMScaleMaxRate;
	Parms.AMScaleMoveOffset = AMScaleMoveOffset;
	Parms.AMScaleMoveOffsetZ = AMScaleMoveOffsetZ;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function b1-Managed.BUS_GSEventCollection.Evt_TestEventCollectionMultiCast_Multicast_Invoke
// (Net, Native, Event, NetMulticast, Public)

void UBUS_GSEventCollection::Evt_TestEventCollectionMultiCast_Multicast_Invoke()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BUS_GSEventCollection", "Evt_TestEventCollectionMultiCast_Multicast_Invoke");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function b1-Managed.BUS_GSEventCollection.Evt_MoveWithAnimMontageCMultiCast_RollBack_Client
// (Net, NetReliable, Native, Event, Public, NetClient)
// Parameters:
// class UAnimMontage*                     Montage                                                (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// float                                   Scale                                                  (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// float                                   PlayTimeRate                                           (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// float                                   MontagePosOffset                                       (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// class FName                             StartSectionName                                       (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// EMontageBindReason                      Reason                                                 (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// int32                                   PredictionKeyId                                        (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UBUS_GSEventCollection::Evt_MoveWithAnimMontageCMultiCast_RollBack_Client(class UAnimMontage* Montage, float Scale, float PlayTimeRate, float MontagePosOffset, class FName StartSectionName, EMontageBindReason Reason, int32 PredictionKeyId)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BUS_GSEventCollection", "Evt_MoveWithAnimMontageCMultiCast_RollBack_Client");

	Params::BUS_GSEventCollection_Evt_MoveWithAnimMontageCMultiCast_RollBack_Client Parms{};

	Parms.Montage = Montage;
	Parms.Scale = Scale;
	Parms.PlayTimeRate = PlayTimeRate;
	Parms.MontagePosOffset = MontagePosOffset;
	Parms.StartSectionName = StartSectionName;
	Parms.Reason = Reason;
	Parms.PredictionKeyId = PredictionKeyId;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function b1-Managed.BUS_GSEventCollection.Evt_MoveWithAnimMontageCMultiCast_Confirm_Client
// (Net, NetReliable, Native, Event, Public, NetClient)
// Parameters:
// class UAnimMontage*                     Montage                                                (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// float                                   Scale                                                  (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// float                                   PlayTimeRate                                           (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// float                                   MontagePosOffset                                       (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// class FName                             StartSectionName                                       (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// EMontageBindReason                      Reason                                                 (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// int32                                   PredictionKeyId                                        (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UBUS_GSEventCollection::Evt_MoveWithAnimMontageCMultiCast_Confirm_Client(class UAnimMontage* Montage, float Scale, float PlayTimeRate, float MontagePosOffset, class FName StartSectionName, EMontageBindReason Reason, int32 PredictionKeyId)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BUS_GSEventCollection", "Evt_MoveWithAnimMontageCMultiCast_Confirm_Client");

	Params::BUS_GSEventCollection_Evt_MoveWithAnimMontageCMultiCast_Confirm_Client Parms{};

	Parms.Montage = Montage;
	Parms.Scale = Scale;
	Parms.PlayTimeRate = PlayTimeRate;
	Parms.MontagePosOffset = MontagePosOffset;
	Parms.StartSectionName = StartSectionName;
	Parms.Reason = Reason;
	Parms.PredictionKeyId = PredictionKeyId;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function b1-Managed.BUS_GSEventCollection.Evt_TriggerNormalDamageEffectSPTransmitMultiCast
// (Net, NetReliable, Native, Event, NetMulticast, Public)
// Parameters:
// class AActor*                           Attacker                                               (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// struct FSkillDamageConfig               SkillDamageConfig                                      (Parm, ZeroConstructor, HasGetValueTypeHash)
// struct FEffectInstReq                   EffectInstReq                                          (Parm, NoDestructor, HasGetValueTypeHash)
// struct FBattleAttrSnapShot              Attacker_AttrMemData                                   (Parm, NoDestructor, HasGetValueTypeHash)
// class AActor*                           __TriggerActor                                         (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UBUS_GSEventCollection::Evt_TriggerNormalDamageEffectSPTransmitMultiCast(class AActor* Attacker, const struct FSkillDamageConfig& SkillDamageConfig, const struct FEffectInstReq& EffectInstReq, const struct FBattleAttrSnapShot& Attacker_AttrMemData, class AActor* __TriggerActor)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BUS_GSEventCollection", "Evt_TriggerNormalDamageEffectSPTransmitMultiCast");

	Params::BUS_GSEventCollection_Evt_TriggerNormalDamageEffectSPTransmitMultiCast Parms{};

	Parms.Attacker = Attacker;
	Parms.SkillDamageConfig = std::move(SkillDamageConfig);
	Parms.EffectInstReq = std::move(EffectInstReq);
	Parms.Attacker_AttrMemData = std::move(Attacker_AttrMemData);
	Parms.__TriggerActor = __TriggerActor;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function b1-Managed.BUS_GSEventCollection.Evt_TriggerSkillEffect_Transmit_RollBack_Client
// (Net, NetReliable, Native, Event, Public, NetClient)
// Parameters:
// int32                                   EffectID                                               (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// struct FEffectInstReq                   EffectInstReq                                          (Parm, NoDestructor, HasGetValueTypeHash)
// class AActor*                           InnerTarget                                            (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// uint8                                   bWithRPCEvent                                          (Parm, NoDestructor, HasGetValueTypeHash)
// int32                                   PredictionKeyId                                        (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UBUS_GSEventCollection::Evt_TriggerSkillEffect_Transmit_RollBack_Client(int32 EffectID, const struct FEffectInstReq& EffectInstReq, class AActor* InnerTarget, uint8 bWithRPCEvent, int32 PredictionKeyId)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BUS_GSEventCollection", "Evt_TriggerSkillEffect_Transmit_RollBack_Client");

	Params::BUS_GSEventCollection_Evt_TriggerSkillEffect_Transmit_RollBack_Client Parms{};

	Parms.EffectID = EffectID;
	Parms.EffectInstReq = std::move(EffectInstReq);
	Parms.InnerTarget = InnerTarget;
	Parms.bWithRPCEvent = bWithRPCEvent;
	Parms.PredictionKeyId = PredictionKeyId;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function b1-Managed.BUS_GSEventCollection.Evt_TriggerSkillEffect_TransmitSPTransmitServer
// (Net, NetReliable, Native, Event, Public, NetServer)
// Parameters:
// int32                                   EffectID                                               (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// struct FEffectInstReq                   EffectInstReq                                          (Parm, NoDestructor, HasGetValueTypeHash)
// class AActor*                           InnerTarget                                            (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// uint8                                   bWithRPCEvent                                          (Parm, NoDestructor, HasGetValueTypeHash)
// int32                                   PredictionKeyId                                        (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// int32                                   ParentPredictionKeyId                                  (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// class AActor*                           __TriggerActor                                         (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UBUS_GSEventCollection::Evt_TriggerSkillEffect_TransmitSPTransmitServer(int32 EffectID, const struct FEffectInstReq& EffectInstReq, class AActor* InnerTarget, uint8 bWithRPCEvent, int32 PredictionKeyId, int32 ParentPredictionKeyId, class AActor* __TriggerActor)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BUS_GSEventCollection", "Evt_TriggerSkillEffect_TransmitSPTransmitServer");

	Params::BUS_GSEventCollection_Evt_TriggerSkillEffect_TransmitSPTransmitServer Parms{};

	Parms.EffectID = EffectID;
	Parms.EffectInstReq = std::move(EffectInstReq);
	Parms.InnerTarget = InnerTarget;
	Parms.bWithRPCEvent = bWithRPCEvent;
	Parms.PredictionKeyId = PredictionKeyId;
	Parms.ParentPredictionKeyId = ParentPredictionKeyId;
	Parms.__TriggerActor = __TriggerActor;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function b1-Managed.BUS_GSEventCollection.Evt_SetTargetInfoWithCameraLockingServer_Invoke
// (Net, NetReliable, Native, Event, Public, NetServer)
// Parameters:
// struct FUnitLockTargetInfo              NewTargetInfo                                          (Parm, ZeroConstructor, HasGetValueTypeHash)

void UBUS_GSEventCollection::Evt_SetTargetInfoWithCameraLockingServer_Invoke(const struct FUnitLockTargetInfo& NewTargetInfo)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BUS_GSEventCollection", "Evt_SetTargetInfoWithCameraLockingServer_Invoke");

	Params::BUS_GSEventCollection_Evt_SetTargetInfoWithCameraLockingServer_Invoke Parms{};

	Parms.NewTargetInfo = std::move(NewTargetInfo);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function b1-Managed.BUS_GSEventCollection.Evt_ClientMultiCastRPCTest2SPTransmitMultiCast
// (Net, NetReliable, Native, Event, NetMulticast, Public)
// Parameters:
// class UAnimMontage*                     Montage                                                (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// float                                   PlayTimeRate                                           (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// float                                   MontagePosOffset                                       (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// class FName                             StartSectionName                                       (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// EMontageBindReason                      Reason                                                 (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// class AActor*                           __TriggerActor                                         (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UBUS_GSEventCollection::Evt_ClientMultiCastRPCTest2SPTransmitMultiCast(class UAnimMontage* Montage, float PlayTimeRate, float MontagePosOffset, class FName StartSectionName, EMontageBindReason Reason, class AActor* __TriggerActor)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BUS_GSEventCollection", "Evt_ClientMultiCastRPCTest2SPTransmitMultiCast");

	Params::BUS_GSEventCollection_Evt_ClientMultiCastRPCTest2SPTransmitMultiCast Parms{};

	Parms.Montage = Montage;
	Parms.PlayTimeRate = PlayTimeRate;
	Parms.MontagePosOffset = MontagePosOffset;
	Parms.StartSectionName = StartSectionName;
	Parms.Reason = Reason;
	Parms.__TriggerActor = __TriggerActor;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function b1-Managed.BUS_GSEventCollection.Evt_UnitCastSkillTryCMultiCast_RollBack_Client
// (Net, NetReliable, Native, Event, Public, NetClient)
// Parameters:
// struct FCastSkillInfo                   CSI                                                    (Parm, NoDestructor, HasGetValueTypeHash)
// int32                                   PredictionKeyId                                        (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UBUS_GSEventCollection::Evt_UnitCastSkillTryCMultiCast_RollBack_Client(const struct FCastSkillInfo& CSI, int32 PredictionKeyId)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BUS_GSEventCollection", "Evt_UnitCastSkillTryCMultiCast_RollBack_Client");

	Params::BUS_GSEventCollection_Evt_UnitCastSkillTryCMultiCast_RollBack_Client Parms{};

	Parms.CSI = std::move(CSI);
	Parms.PredictionKeyId = PredictionKeyId;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function b1-Managed.BUS_GSEventCollection.Evt_ChallenegeRebirthTeleport_Multicast_Invoke
// (Net, Native, Event, NetMulticast, Public)
// Parameters:
// class FString                           P1                                                     (Parm, ZeroConstructor, HasGetValueTypeHash)

void UBUS_GSEventCollection::Evt_ChallenegeRebirthTeleport_Multicast_Invoke(const class FString& P1)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BUS_GSEventCollection", "Evt_ChallenegeRebirthTeleport_Multicast_Invoke");

	Params::BUS_GSEventCollection_Evt_ChallenegeRebirthTeleport_Multicast_Invoke Parms{};

	Parms.P1 = std::move(P1);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function b1-Managed.BUS_GSEventCollection.Evt_ChangeMotionMatchingState_Multicast_Invoke
// (Net, Native, Event, NetMulticast, Public)
// Parameters:
// EState_MM                               MMState                                                (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UBUS_GSEventCollection::Evt_ChangeMotionMatchingState_Multicast_Invoke(EState_MM MMState)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BUS_GSEventCollection", "Evt_ChangeMotionMatchingState_Multicast_Invoke");

	Params::BUS_GSEventCollection_Evt_ChangeMotionMatchingState_Multicast_Invoke Parms{};

	Parms.MMState = MMState;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function b1-Managed.BUS_GSEventCollection.Evt_TriggerSkillEffect_Transmit_Confirm_Client
// (Net, NetReliable, Native, Event, Public, NetClient)
// Parameters:
// int32                                   EffectID                                               (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// struct FEffectInstReq                   EffectInstReq                                          (Parm, NoDestructor, HasGetValueTypeHash)
// class AActor*                           InnerTarget                                            (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// uint8                                   bWithRPCEvent                                          (Parm, NoDestructor, HasGetValueTypeHash)
// int32                                   PredictionKeyId                                        (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UBUS_GSEventCollection::Evt_TriggerSkillEffect_Transmit_Confirm_Client(int32 EffectID, const struct FEffectInstReq& EffectInstReq, class AActor* InnerTarget, uint8 bWithRPCEvent, int32 PredictionKeyId)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BUS_GSEventCollection", "Evt_TriggerSkillEffect_Transmit_Confirm_Client");

	Params::BUS_GSEventCollection_Evt_TriggerSkillEffect_Transmit_Confirm_Client Parms{};

	Parms.EffectID = EffectID;
	Parms.EffectInstReq = std::move(EffectInstReq);
	Parms.InnerTarget = InnerTarget;
	Parms.bWithRPCEvent = bWithRPCEvent;
	Parms.PredictionKeyId = PredictionKeyId;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function b1-Managed.BUS_GSEventCollection.Evt_OnlineChallengeBeginToUI_Multicast_Invoke
// (Net, NetReliable, Native, Event, NetMulticast, Public)
// Parameters:
// int32                                   P1                                                     (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// int32                                   P2                                                     (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UBUS_GSEventCollection::Evt_OnlineChallengeBeginToUI_Multicast_Invoke(int32 P1, int32 P2)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BUS_GSEventCollection", "Evt_OnlineChallengeBeginToUI_Multicast_Invoke");

	Params::BUS_GSEventCollection_Evt_OnlineChallengeBeginToUI_Multicast_Invoke Parms{};

	Parms.P1 = P1;
	Parms.P2 = P2;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function b1-Managed.BUS_GSEventCollection.Evt_OnBuffLayerChangedNotify_Multicast_Invoke
// (Net, NetReliable, Native, Event, NetMulticast, Public)
// Parameters:
// int32                                   BuffID                                                 (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// int32                                   Layer_OldValue                                         (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// int32                                   Layer_NewValue                                         (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UBUS_GSEventCollection::Evt_OnBuffLayerChangedNotify_Multicast_Invoke(int32 BuffID, int32 Layer_OldValue, int32 Layer_NewValue)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BUS_GSEventCollection", "Evt_OnBuffLayerChangedNotify_Multicast_Invoke");

	Params::BUS_GSEventCollection_Evt_OnBuffLayerChangedNotify_Multicast_Invoke Parms{};

	Parms.BuffID = BuffID;
	Parms.Layer_OldValue = Layer_OldValue;
	Parms.Layer_NewValue = Layer_NewValue;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function b1-Managed.BUS_GSEventCollection.Evt_TriggerNormalDamageEffectSPTransmitServer
// (Net, NetReliable, Native, Event, Public, NetServer)
// Parameters:
// class AActor*                           Attacker                                               (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// struct FSkillDamageConfig               SkillDamageConfig                                      (Parm, ZeroConstructor, HasGetValueTypeHash)
// struct FEffectInstReq                   EffectInstReq                                          (Parm, NoDestructor, HasGetValueTypeHash)
// struct FBattleAttrSnapShot              Attacker_AttrMemData                                   (Parm, NoDestructor, HasGetValueTypeHash)
// int32                                   PredictionKeyId                                        (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// int32                                   ParentPredictionKeyId                                  (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// class AActor*                           __TriggerActor                                         (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UBUS_GSEventCollection::Evt_TriggerNormalDamageEffectSPTransmitServer(class AActor* Attacker, const struct FSkillDamageConfig& SkillDamageConfig, const struct FEffectInstReq& EffectInstReq, const struct FBattleAttrSnapShot& Attacker_AttrMemData, int32 PredictionKeyId, int32 ParentPredictionKeyId, class AActor* __TriggerActor)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BUS_GSEventCollection", "Evt_TriggerNormalDamageEffectSPTransmitServer");

	Params::BUS_GSEventCollection_Evt_TriggerNormalDamageEffectSPTransmitServer Parms{};

	Parms.Attacker = Attacker;
	Parms.SkillDamageConfig = std::move(SkillDamageConfig);
	Parms.EffectInstReq = std::move(EffectInstReq);
	Parms.Attacker_AttrMemData = std::move(Attacker_AttrMemData);
	Parms.PredictionKeyId = PredictionKeyId;
	Parms.ParentPredictionKeyId = ParentPredictionKeyId;
	Parms.__TriggerActor = __TriggerActor;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function b1-Managed.BUS_GSEventCollection.Evt_TriggerSkillEffectByBuff_Multicast_Invoke
// (Net, Native, Event, NetMulticast, Public)
// Parameters:
// int32                                   BuffID                                                 (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// class AActor*                           Target                                                 (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// int32                                   EffectIdx                                              (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// struct FEffectInstReq                   EffectInstReq                                          (Parm, NoDestructor, HasGetValueTypeHash)
// uint8                                   bIsPeriodical                                          (Parm, NoDestructor, HasGetValueTypeHash)

void UBUS_GSEventCollection::Evt_TriggerSkillEffectByBuff_Multicast_Invoke(int32 BuffID, class AActor* Target, int32 EffectIdx, const struct FEffectInstReq& EffectInstReq, uint8 bIsPeriodical)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BUS_GSEventCollection", "Evt_TriggerSkillEffectByBuff_Multicast_Invoke");

	Params::BUS_GSEventCollection_Evt_TriggerSkillEffectByBuff_Multicast_Invoke Parms{};

	Parms.BuffID = BuffID;
	Parms.Target = Target;
	Parms.EffectIdx = EffectIdx;
	Parms.EffectInstReq = std::move(EffectInstReq);
	Parms.bIsPeriodical = bIsPeriodical;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function b1-Managed.BUS_GSEventCollection.Evt_RelieveImmobilizedClient_Multicast_Invoke
// (Net, Native, Event, NetMulticast, Public)

void UBUS_GSEventCollection::Evt_RelieveImmobilizedClient_Multicast_Invoke()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BUS_GSEventCollection", "Evt_RelieveImmobilizedClient_Multicast_Invoke");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function b1-Managed.BUS_GSEventCollection.Evt_TriggerNormalDamageEffect_RollBack_Client
// (Net, NetReliable, Native, Event, Public, NetClient)
// Parameters:
// class AActor*                           Attacker                                               (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// struct FSkillDamageConfig               SkillDamageConfig                                      (Parm, ZeroConstructor, HasGetValueTypeHash)
// struct FEffectInstReq                   EffectInstReq                                          (Parm, NoDestructor, HasGetValueTypeHash)
// struct FBattleAttrSnapShot              Attacker_AttrMemData                                   (Parm, NoDestructor, HasGetValueTypeHash)
// int32                                   PredictionKeyId                                        (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UBUS_GSEventCollection::Evt_TriggerNormalDamageEffect_RollBack_Client(class AActor* Attacker, const struct FSkillDamageConfig& SkillDamageConfig, const struct FEffectInstReq& EffectInstReq, const struct FBattleAttrSnapShot& Attacker_AttrMemData, int32 PredictionKeyId)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BUS_GSEventCollection", "Evt_TriggerNormalDamageEffect_RollBack_Client");

	Params::BUS_GSEventCollection_Evt_TriggerNormalDamageEffect_RollBack_Client Parms{};

	Parms.Attacker = Attacker;
	Parms.SkillDamageConfig = std::move(SkillDamageConfig);
	Parms.EffectInstReq = std::move(EffectInstReq);
	Parms.Attacker_AttrMemData = std::move(Attacker_AttrMemData);
	Parms.PredictionKeyId = PredictionKeyId;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function b1-Managed.BUS_GSEventCollection.Evt_UnitCastSkillTryCMultiCast_Confirm_Client
// (Net, NetReliable, Native, Event, Public, NetClient)
// Parameters:
// struct FCastSkillInfo                   CSI                                                    (Parm, NoDestructor, HasGetValueTypeHash)
// int32                                   PredictionKeyId                                        (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UBUS_GSEventCollection::Evt_UnitCastSkillTryCMultiCast_Confirm_Client(const struct FCastSkillInfo& CSI, int32 PredictionKeyId)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BUS_GSEventCollection", "Evt_UnitCastSkillTryCMultiCast_Confirm_Client");

	Params::BUS_GSEventCollection_Evt_UnitCastSkillTryCMultiCast_Confirm_Client Parms{};

	Parms.CSI = std::move(CSI);
	Parms.PredictionKeyId = PredictionKeyId;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function b1-Managed.BUS_GSEventCollection.Evt_TriggerSkillEffectBySkill_RollBack_Client
// (Net, NetReliable, Native, Event, Public, NetClient)
// Parameters:
// int32                                   EffectID                                               (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// class AActor*                           Caster                                                 (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// class AActor*                           Target                                                 (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// struct FEffectInstReq                   EffectInstReq                                          (Parm, NoDestructor, HasGetValueTypeHash)
// int32                                   PredictionKeyId                                        (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UBUS_GSEventCollection::Evt_TriggerSkillEffectBySkill_RollBack_Client(int32 EffectID, class AActor* Caster, class AActor* Target, const struct FEffectInstReq& EffectInstReq, int32 PredictionKeyId)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BUS_GSEventCollection", "Evt_TriggerSkillEffectBySkill_RollBack_Client");

	Params::BUS_GSEventCollection_Evt_TriggerSkillEffectBySkill_RollBack_Client Parms{};

	Parms.EffectID = EffectID;
	Parms.Caster = Caster;
	Parms.Target = Target;
	Parms.EffectInstReq = std::move(EffectInstReq);
	Parms.PredictionKeyId = PredictionKeyId;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function b1-Managed.BUS_GSEventCollection.Evt_CastSkillWithAnimMontage_RollBack_Client
// (Net, NetReliable, Native, Event, Public, NetClient)
// Parameters:
// class UAnimMontage*                     Montage                                                (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// float                                   PlayTimeRate                                           (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// float                                   MontagePosOffset                                       (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// class FName                             StartSectionName                                       (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// EMontageBindReason                      Reason                                                 (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// int32                                   PredictionKeyId                                        (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UBUS_GSEventCollection::Evt_CastSkillWithAnimMontage_RollBack_Client(class UAnimMontage* Montage, float PlayTimeRate, float MontagePosOffset, class FName StartSectionName, EMontageBindReason Reason, int32 PredictionKeyId)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BUS_GSEventCollection", "Evt_CastSkillWithAnimMontage_RollBack_Client");

	Params::BUS_GSEventCollection_Evt_CastSkillWithAnimMontage_RollBack_Client Parms{};

	Parms.Montage = Montage;
	Parms.PlayTimeRate = PlayTimeRate;
	Parms.MontagePosOffset = MontagePosOffset;
	Parms.StartSectionName = StartSectionName;
	Parms.Reason = Reason;
	Parms.PredictionKeyId = PredictionKeyId;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function b1-Managed.BUS_GSEventCollection.Evt_TriggerNormalDamageEffect_Confirm_Client
// (Net, NetReliable, Native, Event, Public, NetClient)
// Parameters:
// class AActor*                           Attacker                                               (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// struct FSkillDamageConfig               SkillDamageConfig                                      (Parm, ZeroConstructor, HasGetValueTypeHash)
// struct FEffectInstReq                   EffectInstReq                                          (Parm, NoDestructor, HasGetValueTypeHash)
// struct FBattleAttrSnapShot              Attacker_AttrMemData                                   (Parm, NoDestructor, HasGetValueTypeHash)
// int32                                   PredictionKeyId                                        (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UBUS_GSEventCollection::Evt_TriggerNormalDamageEffect_Confirm_Client(class AActor* Attacker, const struct FSkillDamageConfig& SkillDamageConfig, const struct FEffectInstReq& EffectInstReq, const struct FBattleAttrSnapShot& Attacker_AttrMemData, int32 PredictionKeyId)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BUS_GSEventCollection", "Evt_TriggerNormalDamageEffect_Confirm_Client");

	Params::BUS_GSEventCollection_Evt_TriggerNormalDamageEffect_Confirm_Client Parms{};

	Parms.Attacker = Attacker;
	Parms.SkillDamageConfig = std::move(SkillDamageConfig);
	Parms.EffectInstReq = std::move(EffectInstReq);
	Parms.Attacker_AttrMemData = std::move(Attacker_AttrMemData);
	Parms.PredictionKeyId = PredictionKeyId;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function b1-Managed.BUS_GSEventCollection.Evt_TriggerSkillEffectBySkill_Confirm_Client
// (Net, NetReliable, Native, Event, Public, NetClient)
// Parameters:
// int32                                   EffectID                                               (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// class AActor*                           Caster                                                 (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// class AActor*                           Target                                                 (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// struct FEffectInstReq                   EffectInstReq                                          (Parm, NoDestructor, HasGetValueTypeHash)
// int32                                   PredictionKeyId                                        (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UBUS_GSEventCollection::Evt_TriggerSkillEffectBySkill_Confirm_Client(int32 EffectID, class AActor* Caster, class AActor* Target, const struct FEffectInstReq& EffectInstReq, int32 PredictionKeyId)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BUS_GSEventCollection", "Evt_TriggerSkillEffectBySkill_Confirm_Client");

	Params::BUS_GSEventCollection_Evt_TriggerSkillEffectBySkill_Confirm_Client Parms{};

	Parms.EffectID = EffectID;
	Parms.Caster = Caster;
	Parms.Target = Target;
	Parms.EffectInstReq = std::move(EffectInstReq);
	Parms.PredictionKeyId = PredictionKeyId;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function b1-Managed.BUS_GSEventCollection.Evt_OnClientBeginPlayReqForInitEquip_Invoke
// (Net, Native, Event, Public, NetServer)

void UBUS_GSEventCollection::Evt_OnClientBeginPlayReqForInitEquip_Invoke()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BUS_GSEventCollection", "Evt_OnClientBeginPlayReqForInitEquip_Invoke");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function b1-Managed.BUS_GSEventCollection.Evt_SceneObjTransitByEvent_Multicast_Invoke
// (Net, Native, Event, NetMulticast, Public)
// Parameters:
// struct FGameplayTag                     Tag                                                    (Parm, NoDestructor, HasGetValueTypeHash)

void UBUS_GSEventCollection::Evt_SceneObjTransitByEvent_Multicast_Invoke(const struct FGameplayTag& Tag)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BUS_GSEventCollection", "Evt_SceneObjTransitByEvent_Multicast_Invoke");

	Params::BUS_GSEventCollection_Evt_SceneObjTransitByEvent_Multicast_Invoke Parms{};

	Parms.Tag = std::move(Tag);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function b1-Managed.BUS_GSEventCollection.Evt_TeleportWithRebirthPointFailedMultiCast
// (Net, Native, Event, NetMulticast, Public)
// Parameters:
// int32                                   RebirthPointConfigID                                   (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// ETeleportReason                         TeleportReason                                         (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UBUS_GSEventCollection::Evt_TeleportWithRebirthPointFailedMultiCast(int32 RebirthPointConfigID, ETeleportReason TeleportReason)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BUS_GSEventCollection", "Evt_TeleportWithRebirthPointFailedMultiCast");

	Params::BUS_GSEventCollection_Evt_TeleportWithRebirthPointFailedMultiCast Parms{};

	Parms.RebirthPointConfigID = RebirthPointConfigID;
	Parms.TeleportReason = TeleportReason;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function b1-Managed.BUS_GSEventCollection.Evt_CastSkillWithAnimMontage_Confirm_Client
// (Net, NetReliable, Native, Event, Public, NetClient)
// Parameters:
// class UAnimMontage*                     Montage                                                (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// float                                   PlayTimeRate                                           (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// float                                   MontagePosOffset                                       (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// class FName                             StartSectionName                                       (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// EMontageBindReason                      Reason                                                 (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// int32                                   PredictionKeyId                                        (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UBUS_GSEventCollection::Evt_CastSkillWithAnimMontage_Confirm_Client(class UAnimMontage* Montage, float PlayTimeRate, float MontagePosOffset, class FName StartSectionName, EMontageBindReason Reason, int32 PredictionKeyId)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BUS_GSEventCollection", "Evt_CastSkillWithAnimMontage_Confirm_Client");

	Params::BUS_GSEventCollection_Evt_CastSkillWithAnimMontage_Confirm_Client Parms{};

	Parms.Montage = Montage;
	Parms.PlayTimeRate = PlayTimeRate;
	Parms.MontagePosOffset = MontagePosOffset;
	Parms.StartSectionName = StartSectionName;
	Parms.Reason = Reason;
	Parms.PredictionKeyId = PredictionKeyId;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function b1-Managed.BUS_GSEventCollection.Evt_BattleLogicChangeEquip_Multicast_Invoke
// (Net, Native, Event, NetMulticast, Public)
// Parameters:
// EquipPosition                           EquipPosition                                          (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// int32                                   EquipID                                                (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UBUS_GSEventCollection::Evt_BattleLogicChangeEquip_Multicast_Invoke(EquipPosition EquipPosition, int32 EquipID)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BUS_GSEventCollection", "Evt_BattleLogicChangeEquip_Multicast_Invoke");

	Params::BUS_GSEventCollection_Evt_BattleLogicChangeEquip_Multicast_Invoke Parms{};

	Parms.EquipPosition = EquipPosition;
	Parms.EquipID = EquipID;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function b1-Managed.BUS_GSEventCollection.Evt_ClientMultiCastRPCTest2SPTransmitServer
// (Net, NetReliable, Native, Event, Public, NetServer)
// Parameters:
// class UAnimMontage*                     Montage                                                (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// float                                   PlayTimeRate                                           (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// float                                   MontagePosOffset                                       (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// class FName                             StartSectionName                                       (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// EMontageBindReason                      Reason                                                 (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// int32                                   PredictionKeyId                                        (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// int32                                   ParentPredictionKeyId                                  (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// class AActor*                           __TriggerActor                                         (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UBUS_GSEventCollection::Evt_ClientMultiCastRPCTest2SPTransmitServer(class UAnimMontage* Montage, float PlayTimeRate, float MontagePosOffset, class FName StartSectionName, EMontageBindReason Reason, int32 PredictionKeyId, int32 ParentPredictionKeyId, class AActor* __TriggerActor)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BUS_GSEventCollection", "Evt_ClientMultiCastRPCTest2SPTransmitServer");

	Params::BUS_GSEventCollection_Evt_ClientMultiCastRPCTest2SPTransmitServer Parms{};

	Parms.Montage = Montage;
	Parms.PlayTimeRate = PlayTimeRate;
	Parms.MontagePosOffset = MontagePosOffset;
	Parms.StartSectionName = StartSectionName;
	Parms.Reason = Reason;
	Parms.PredictionKeyId = PredictionKeyId;
	Parms.ParentPredictionKeyId = ParentPredictionKeyId;
	Parms.__TriggerActor = __TriggerActor;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function b1-Managed.BUS_GSEventCollection.Evt_OnlineChallengeEndToUI_Multicast_Invoke
// (Net, NetReliable, Native, Event, NetMulticast, Public)
// Parameters:
// int32                                   P1                                                     (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UBUS_GSEventCollection::Evt_OnlineChallengeEndToUI_Multicast_Invoke(int32 P1)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BUS_GSEventCollection", "Evt_OnlineChallengeEndToUI_Multicast_Invoke");

	Params::BUS_GSEventCollection_Evt_OnlineChallengeEndToUI_Multicast_Invoke Parms{};

	Parms.P1 = P1;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function b1-Managed.BUS_GSEventCollection.Evt_ClientMultiCastRPCTest2_RollBack_Client
// (Net, NetReliable, Native, Event, Public, NetClient)
// Parameters:
// class UAnimMontage*                     Montage                                                (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// float                                   PlayTimeRate                                           (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// float                                   MontagePosOffset                                       (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// class FName                             StartSectionName                                       (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// EMontageBindReason                      Reason                                                 (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// int32                                   PredictionKeyId                                        (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UBUS_GSEventCollection::Evt_ClientMultiCastRPCTest2_RollBack_Client(class UAnimMontage* Montage, float PlayTimeRate, float MontagePosOffset, class FName StartSectionName, EMontageBindReason Reason, int32 PredictionKeyId)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BUS_GSEventCollection", "Evt_ClientMultiCastRPCTest2_RollBack_Client");

	Params::BUS_GSEventCollection_Evt_ClientMultiCastRPCTest2_RollBack_Client Parms{};

	Parms.Montage = Montage;
	Parms.PlayTimeRate = PlayTimeRate;
	Parms.MontagePosOffset = MontagePosOffset;
	Parms.StartSectionName = StartSectionName;
	Parms.Reason = Reason;
	Parms.PredictionKeyId = PredictionKeyId;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function b1-Managed.BUS_GSEventCollection.Evt_FTB_IncreaseAttrFloat_Multicast_Invoke
// (Net, Native, Event, NetMulticast, Public)
// Parameters:
// EBGUAttrFloat                           AttrID                                                 (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// float                                   IncreaseValue                                          (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UBUS_GSEventCollection::Evt_FTB_IncreaseAttrFloat_Multicast_Invoke(EBGUAttrFloat AttrID, float IncreaseValue)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BUS_GSEventCollection", "Evt_FTB_IncreaseAttrFloat_Multicast_Invoke");

	Params::BUS_GSEventCollection_Evt_FTB_IncreaseAttrFloat_Multicast_Invoke Parms{};

	Parms.AttrID = AttrID;
	Parms.IncreaseValue = IncreaseValue;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function b1-Managed.BUS_GSEventCollection.Evt_SkillRotateTraceActor_Multicast_Invoke
// (Net, Native, Event, NetMulticast, Public)
// Parameters:
// class AActor*                           TargetActor                                            (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// float                                   TurnSpeed                                              (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UBUS_GSEventCollection::Evt_SkillRotateTraceActor_Multicast_Invoke(class AActor* TargetActor, float TurnSpeed)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BUS_GSEventCollection", "Evt_SkillRotateTraceActor_Multicast_Invoke");

	Params::BUS_GSEventCollection_Evt_SkillRotateTraceActor_Multicast_Invoke Parms{};

	Parms.TargetActor = TargetActor;
	Parms.TurnSpeed = TurnSpeed;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function b1-Managed.BUS_GSEventCollection.Evt_ClientMultiCastRPCTest2_Confirm_Client
// (Net, NetReliable, Native, Event, Public, NetClient)
// Parameters:
// class UAnimMontage*                     Montage                                                (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// float                                   PlayTimeRate                                           (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// float                                   MontagePosOffset                                       (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// class FName                             StartSectionName                                       (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// EMontageBindReason                      Reason                                                 (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// int32                                   PredictionKeyId                                        (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UBUS_GSEventCollection::Evt_ClientMultiCastRPCTest2_Confirm_Client(class UAnimMontage* Montage, float PlayTimeRate, float MontagePosOffset, class FName StartSectionName, EMontageBindReason Reason, int32 PredictionKeyId)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BUS_GSEventCollection", "Evt_ClientMultiCastRPCTest2_Confirm_Client");

	Params::BUS_GSEventCollection_Evt_ClientMultiCastRPCTest2_Confirm_Client Parms{};

	Parms.Montage = Montage;
	Parms.PlayTimeRate = PlayTimeRate;
	Parms.MontagePosOffset = MontagePosOffset;
	Parms.StartSectionName = StartSectionName;
	Parms.Reason = Reason;
	Parms.PredictionKeyId = PredictionKeyId;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function b1-Managed.BUS_GSEventCollection.Evt_BuffInstsDictOnRemove_Multicast_Invoke
// (Net, NetReliable, Native, Event, NetMulticast, Public)
// Parameters:
// int32                                   P1                                                     (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UBUS_GSEventCollection::Evt_BuffInstsDictOnRemove_Multicast_Invoke(int32 P1)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BUS_GSEventCollection", "Evt_BuffInstsDictOnRemove_Multicast_Invoke");

	Params::BUS_GSEventCollection_Evt_BuffInstsDictOnRemove_Multicast_Invoke Parms{};

	Parms.P1 = P1;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function b1-Managed.BUS_GSEventCollection.Evt_BuffRemoveImmediately_Multicast_Invoke
// (Net, NetReliable, Native, Event, NetMulticast, Public)
// Parameters:
// int32                                   BuffID                                                 (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// EBuffEffectTriggerType                  RemoveTriggerType                                      (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// uint8                                   WithTriggerRemmoveEffect                               (Parm, NoDestructor, HasGetValueTypeHash)

void UBUS_GSEventCollection::Evt_BuffRemoveImmediately_Multicast_Invoke(int32 BuffID, EBuffEffectTriggerType RemoveTriggerType, uint8 WithTriggerRemmoveEffect)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BUS_GSEventCollection", "Evt_BuffRemoveImmediately_Multicast_Invoke");

	Params::BUS_GSEventCollection_Evt_BuffRemoveImmediately_Multicast_Invoke Parms{};

	Parms.BuffID = BuffID;
	Parms.RemoveTriggerType = RemoveTriggerType;
	Parms.WithTriggerRemmoveEffect = WithTriggerRemmoveEffect;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function b1-Managed.BUS_GSEventCollection.Evt_ShouledUpdateBuffTime_Multicast_Invoke
// (Net, NetReliable, Native, Event, NetMulticast, Public)
// Parameters:
// uint8                                   P1                                                     (Parm, NoDestructor, HasGetValueTypeHash)

void UBUS_GSEventCollection::Evt_ShouledUpdateBuffTime_Multicast_Invoke(uint8 P1)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BUS_GSEventCollection", "Evt_ShouledUpdateBuffTime_Multicast_Invoke");

	Params::BUS_GSEventCollection_Evt_ShouledUpdateBuffTime_Multicast_Invoke Parms{};

	Parms.P1 = P1;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function b1-Managed.BUS_GSEventCollection.Evt_SpawnBulletFXByReason_Multicast_Invoke
// (Net, Native, Event, NetMulticast, Public)
// Parameters:
// EBGUBulletDispReason                    BulletDispReason                                       (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// struct FEffectInstReq                   EffectInstReq                                          (Parm, NoDestructor, HasGetValueTypeHash)
// class AActor*                           BeHitActor                                             (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UBUS_GSEventCollection::Evt_SpawnBulletFXByReason_Multicast_Invoke(EBGUBulletDispReason BulletDispReason, const struct FEffectInstReq& EffectInstReq, class AActor* BeHitActor)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BUS_GSEventCollection", "Evt_SpawnBulletFXByReason_Multicast_Invoke");

	Params::BUS_GSEventCollection_Evt_SpawnBulletFXByReason_Multicast_Invoke Parms{};

	Parms.BulletDispReason = BulletDispReason;
	Parms.EffectInstReq = std::move(EffectInstReq);
	Parms.BeHitActor = BeHitActor;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function b1-Managed.BUS_GSEventCollection.Evt_TriggerResetAllActors_Multicast_Invoke
// (Net, NetReliable, Native, Event, NetMulticast, Public)

void UBUS_GSEventCollection::Evt_TriggerResetAllActors_Multicast_Invoke()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BUS_GSEventCollection", "Evt_TriggerResetAllActors_Multicast_Invoke");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function b1-Managed.BUS_GSEventCollection.Evt_MoveWithAnimMontageCMultiCastMultiCast
// (Net, NetReliable, Native, Event, NetMulticast, Public)
// Parameters:
// class UAnimMontage*                     Montage                                                (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// float                                   Scale                                                  (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// float                                   PlayTimeRate                                           (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// float                                   MontagePosOffset                                       (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// class FName                             StartSectionName                                       (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// EMontageBindReason                      Reason                                                 (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UBUS_GSEventCollection::Evt_MoveWithAnimMontageCMultiCastMultiCast(class UAnimMontage* Montage, float Scale, float PlayTimeRate, float MontagePosOffset, class FName StartSectionName, EMontageBindReason Reason)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BUS_GSEventCollection", "Evt_MoveWithAnimMontageCMultiCastMultiCast");

	Params::BUS_GSEventCollection_Evt_MoveWithAnimMontageCMultiCastMultiCast Parms{};

	Parms.Montage = Montage;
	Parms.Scale = Scale;
	Parms.PlayTimeRate = PlayTimeRate;
	Parms.MontagePosOffset = MontagePosOffset;
	Parms.StartSectionName = StartSectionName;
	Parms.Reason = Reason;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function b1-Managed.BUS_GSEventCollection.Evt_TriggrtInteractOnOtherClientMultiCast
// (Net, Native, Event, NetMulticast, Public)
// Parameters:
// class AActor*                           Target                                                 (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UBUS_GSEventCollection::Evt_TriggrtInteractOnOtherClientMultiCast(class AActor* Target)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BUS_GSEventCollection", "Evt_TriggrtInteractOnOtherClientMultiCast");

	Params::BUS_GSEventCollection_Evt_TriggrtInteractOnOtherClientMultiCast Parms{};

	Parms.Target = Target;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function b1-Managed.BUS_GSEventCollection.Evt_InteractGroup_Update_Multicast_Invoke
// (Net, NetReliable, Native, Event, NetMulticast, Public)
// Parameters:
// int32                                   GroupId                                                (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// EBGUInteractUnitState                   InteractUnitState                                      (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UBUS_GSEventCollection::Evt_InteractGroup_Update_Multicast_Invoke(int32 GroupId, EBGUInteractUnitState InteractUnitState)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BUS_GSEventCollection", "Evt_InteractGroup_Update_Multicast_Invoke");

	Params::BUS_GSEventCollection_Evt_InteractGroup_Update_Multicast_Invoke Parms{};

	Parms.GroupId = GroupId;
	Parms.InteractUnitState = InteractUnitState;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function b1-Managed.BUS_GSEventCollection.Evt_OnIncreaseMaxPELevel_Multicast_Invoke
// (Net, Native, Event, NetMulticast, Public)
// Parameters:
// int32                                   P1                                                     (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UBUS_GSEventCollection::Evt_OnIncreaseMaxPELevel_Multicast_Invoke(int32 P1)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BUS_GSEventCollection", "Evt_OnIncreaseMaxPELevel_Multicast_Invoke");

	Params::BUS_GSEventCollection_Evt_OnIncreaseMaxPELevel_Multicast_Invoke Parms{};

	Parms.P1 = P1;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function b1-Managed.BUS_GSEventCollection.Evt_TriggerRootMotionJump_RollBack_Client
// (Net, NetReliable, Native, Event, Public, NetClient)
// Parameters:
// int32                                   PredictionKeyId                                        (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UBUS_GSEventCollection::Evt_TriggerRootMotionJump_RollBack_Client(int32 PredictionKeyId)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BUS_GSEventCollection", "Evt_TriggerRootMotionJump_RollBack_Client");

	Params::BUS_GSEventCollection_Evt_TriggerRootMotionJump_RollBack_Client Parms{};

	Parms.PredictionKeyId = PredictionKeyId;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function b1-Managed.BUS_GSEventCollection.Evt_SwitchNoInteraction_Multicast_Invoke
// (Net, NetReliable, Native, Event, NetMulticast, Public)
// Parameters:
// uint8                                   P1                                                     (Parm, NoDestructor, HasGetValueTypeHash)

void UBUS_GSEventCollection::Evt_SwitchNoInteraction_Multicast_Invoke(uint8 P1)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BUS_GSEventCollection", "Evt_SwitchNoInteraction_Multicast_Invoke");

	Params::BUS_GSEventCollection_Evt_SwitchNoInteraction_Multicast_Invoke Parms{};

	Parms.P1 = P1;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function b1-Managed.BUS_GSEventCollection.Evt_TriggerSkillEffect_TransmitMultiCast
// (Net, NetReliable, Native, Event, NetMulticast, Public)
// Parameters:
// int32                                   EffectID                                               (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// struct FEffectInstReq                   EffectInstReq                                          (Parm, NoDestructor, HasGetValueTypeHash)
// class AActor*                           InnerTarget                                            (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// uint8                                   bWithRPCEvent                                          (Parm, NoDestructor, HasGetValueTypeHash)

void UBUS_GSEventCollection::Evt_TriggerSkillEffect_TransmitMultiCast(int32 EffectID, const struct FEffectInstReq& EffectInstReq, class AActor* InnerTarget, uint8 bWithRPCEvent)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BUS_GSEventCollection", "Evt_TriggerSkillEffect_TransmitMultiCast");

	Params::BUS_GSEventCollection_Evt_TriggerSkillEffect_TransmitMultiCast Parms{};

	Parms.EffectID = EffectID;
	Parms.EffectInstReq = std::move(EffectInstReq);
	Parms.InnerTarget = InnerTarget;
	Parms.bWithRPCEvent = bWithRPCEvent;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function b1-Managed.BUS_GSEventCollection.Evt_TeleportWithRebirthPointFailedServer
// (Net, Native, Event, Public, NetServer)
// Parameters:
// int32                                   RebirthPointConfigID                                   (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// ETeleportReason                         TeleportReason                                         (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UBUS_GSEventCollection::Evt_TeleportWithRebirthPointFailedServer(int32 RebirthPointConfigID, ETeleportReason TeleportReason)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BUS_GSEventCollection", "Evt_TeleportWithRebirthPointFailedServer");

	Params::BUS_GSEventCollection_Evt_TeleportWithRebirthPointFailedServer Parms{};

	Parms.RebirthPointConfigID = RebirthPointConfigID;
	Parms.TeleportReason = TeleportReason;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function b1-Managed.BUS_GSEventCollection.Evt_MoveWithAnimMontage_Multicast_Invoke
// (Net, NetReliable, Native, Event, NetMulticast, Public)
// Parameters:
// class UAnimMontage*                     Montage                                                (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// float                                   Scale                                                  (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// float                                   PlayTimeRate                                           (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// float                                   MontagePosOffset                                       (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// class FName                             StartSectionName                                       (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// EMontageBindReason                      Reason                                                 (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UBUS_GSEventCollection::Evt_MoveWithAnimMontage_Multicast_Invoke(class UAnimMontage* Montage, float Scale, float PlayTimeRate, float MontagePosOffset, class FName StartSectionName, EMontageBindReason Reason)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BUS_GSEventCollection", "Evt_MoveWithAnimMontage_Multicast_Invoke");

	Params::BUS_GSEventCollection_Evt_MoveWithAnimMontage_Multicast_Invoke Parms{};

	Parms.Montage = Montage;
	Parms.Scale = Scale;
	Parms.PlayTimeRate = PlayTimeRate;
	Parms.MontagePosOffset = MontagePosOffset;
	Parms.StartSectionName = StartSectionName;
	Parms.Reason = Reason;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function b1-Managed.BUS_GSEventCollection.Evt_TriggerRootMotionJump_Confirm_Client
// (Net, NetReliable, Native, Event, Public, NetClient)
// Parameters:
// int32                                   PredictionKeyId                                        (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UBUS_GSEventCollection::Evt_TriggerRootMotionJump_Confirm_Client(int32 PredictionKeyId)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BUS_GSEventCollection", "Evt_TriggerRootMotionJump_Confirm_Client");

	Params::BUS_GSEventCollection_Evt_TriggerRootMotionJump_Confirm_Client Parms{};

	Parms.PredictionKeyId = PredictionKeyId;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function b1-Managed.BUS_GSEventCollection.Evt_InitDaShenEquipData_Multicast_Invoke
// (Net, Native, Event, NetMulticast, Public)
// Parameters:
// EquipPosition                           EquipPosition                                          (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// int32                                   EquipID                                                (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UBUS_GSEventCollection::Evt_InitDaShenEquipData_Multicast_Invoke(EquipPosition EquipPosition, int32 EquipID)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BUS_GSEventCollection", "Evt_InitDaShenEquipData_Multicast_Invoke");

	Params::BUS_GSEventCollection_Evt_InitDaShenEquipData_Multicast_Invoke Parms{};

	Parms.EquipPosition = EquipPosition;
	Parms.EquipID = EquipID;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function b1-Managed.BUS_GSEventCollection.Evt_UnitCastSkillTryCMultiCastMultiCast
// (Net, NetReliable, Native, Event, NetMulticast, Public)
// Parameters:
// struct FCastSkillInfo                   CSI                                                    (Parm, NoDestructor, HasGetValueTypeHash)

void UBUS_GSEventCollection::Evt_UnitCastSkillTryCMultiCastMultiCast(const struct FCastSkillInfo& CSI)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BUS_GSEventCollection", "Evt_UnitCastSkillTryCMultiCastMultiCast");

	Params::BUS_GSEventCollection_Evt_UnitCastSkillTryCMultiCastMultiCast Parms{};

	Parms.CSI = std::move(CSI);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function b1-Managed.BUS_GSEventCollection.Evt_UnitStateTriggerCMultiCastMultiCast
// (Net, Native, Event, NetMulticast, Public)
// Parameters:
// EBUStateTrigger                         TriggerId                                              (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// float                                   Time                                                   (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// uint8                                   NeedForceUpdate                                        (Parm, NoDestructor, HasGetValueTypeHash)

void UBUS_GSEventCollection::Evt_UnitStateTriggerCMultiCastMultiCast(EBUStateTrigger TriggerId, float Time, uint8 NeedForceUpdate)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BUS_GSEventCollection", "Evt_UnitStateTriggerCMultiCastMultiCast");

	Params::BUS_GSEventCollection_Evt_UnitStateTriggerCMultiCastMultiCast Parms{};

	Parms.TriggerId = TriggerId;
	Parms.Time = Time;
	Parms.NeedForceUpdate = NeedForceUpdate;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function b1-Managed.BUS_GSEventCollection.Evt_MoveWithAnimMontageCMultiCastServer
// (Net, NetReliable, Native, Event, Public, NetServer)
// Parameters:
// class UAnimMontage*                     Montage                                                (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// float                                   Scale                                                  (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// float                                   PlayTimeRate                                           (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// float                                   MontagePosOffset                                       (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// class FName                             StartSectionName                                       (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// EMontageBindReason                      Reason                                                 (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// int32                                   PredictionKeyId                                        (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// int32                                   ParentPredictionKeyId                                  (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UBUS_GSEventCollection::Evt_MoveWithAnimMontageCMultiCastServer(class UAnimMontage* Montage, float Scale, float PlayTimeRate, float MontagePosOffset, class FName StartSectionName, EMontageBindReason Reason, int32 PredictionKeyId, int32 ParentPredictionKeyId)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BUS_GSEventCollection", "Evt_MoveWithAnimMontageCMultiCastServer");

	Params::BUS_GSEventCollection_Evt_MoveWithAnimMontageCMultiCastServer Parms{};

	Parms.Montage = Montage;
	Parms.Scale = Scale;
	Parms.PlayTimeRate = PlayTimeRate;
	Parms.MontagePosOffset = MontagePosOffset;
	Parms.StartSectionName = StartSectionName;
	Parms.Reason = Reason;
	Parms.PredictionKeyId = PredictionKeyId;
	Parms.ParentPredictionKeyId = ParentPredictionKeyId;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function b1-Managed.BUS_GSEventCollection.Evt_UnitRebirth_ByItem_Multicast_Invoke
// (Net, NetReliable, Native, Event, NetMulticast, Public)
// Parameters:
// ERebirthType                            RebirthType                                            (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UBUS_GSEventCollection::Evt_UnitRebirth_ByItem_Multicast_Invoke(ERebirthType RebirthType)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BUS_GSEventCollection", "Evt_UnitRebirth_ByItem_Multicast_Invoke");

	Params::BUS_GSEventCollection_Evt_UnitRebirth_ByItem_Multicast_Invoke Parms{};

	Parms.RebirthType = RebirthType;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function b1-Managed.BUS_GSEventCollection.Evt_BuffInstsDictOnAdd_Multicast_Invoke
// (Net, NetReliable, Native, Event, NetMulticast, Public)
// Parameters:
// int32                                   BuffID                                                 (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// float                                   Duration                                               (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// EBuffSourceType                         BuffSourceType                                         (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// class AActor*                           Caster                                                 (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UBUS_GSEventCollection::Evt_BuffInstsDictOnAdd_Multicast_Invoke(int32 BuffID, float Duration, EBuffSourceType BuffSourceType, class AActor* Caster)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BUS_GSEventCollection", "Evt_BuffInstsDictOnAdd_Multicast_Invoke");

	Params::BUS_GSEventCollection_Evt_BuffInstsDictOnAdd_Multicast_Invoke Parms{};

	Parms.BuffID = BuffID;
	Parms.Duration = Duration;
	Parms.BuffSourceType = BuffSourceType;
	Parms.Caster = Caster;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function b1-Managed.BUS_GSEventCollection.Evt_SetActorLocationGM_Multicast_Invoke
// (Net, Native, Event, NetMulticast, Public)
// Parameters:
// struct FVector                          NewLocation                                            (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// uint8                                   bSweep                                                 (Parm, NoDestructor, HasGetValueTypeHash)
// uint8                                   bTeleport                                              (Parm, NoDestructor, HasGetValueTypeHash)

void UBUS_GSEventCollection::Evt_SetActorLocationGM_Multicast_Invoke(const struct FVector& NewLocation, uint8 bSweep, uint8 bTeleport)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BUS_GSEventCollection", "Evt_SetActorLocationGM_Multicast_Invoke");

	Params::BUS_GSEventCollection_Evt_SetActorLocationGM_Multicast_Invoke Parms{};

	Parms.NewLocation = std::move(NewLocation);
	Parms.bSweep = bSweep;
	Parms.bTeleport = bTeleport;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function b1-Managed.BUS_GSEventCollection.Evt_TriggerGainKeyItem_Multicast_Invoke
// (Net, Native, Event, NetMulticast, Public)

void UBUS_GSEventCollection::Evt_TriggerGainKeyItem_Multicast_Invoke()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BUS_GSEventCollection", "Evt_TriggerGainKeyItem_Multicast_Invoke");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function b1-Managed.BUS_GSEventCollection.Evt_TriggerSkillEffectBySkillMultiCast
// (Net, NetReliable, Native, Event, NetMulticast, Public)
// Parameters:
// int32                                   EffectID                                               (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// class AActor*                           Caster                                                 (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// class AActor*                           Target                                                 (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// struct FEffectInstReq                   EffectInstReq                                          (Parm, NoDestructor, HasGetValueTypeHash)

void UBUS_GSEventCollection::Evt_TriggerSkillEffectBySkillMultiCast(int32 EffectID, class AActor* Caster, class AActor* Target, const struct FEffectInstReq& EffectInstReq)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BUS_GSEventCollection", "Evt_TriggerSkillEffectBySkillMultiCast");

	Params::BUS_GSEventCollection_Evt_TriggerSkillEffectBySkillMultiCast Parms{};

	Parms.EffectID = EffectID;
	Parms.Caster = Caster;
	Parms.Target = Target;
	Parms.EffectInstReq = std::move(EffectInstReq);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function b1-Managed.BUS_GSEventCollection.Evt_TriggrtInteractOnOtherClientServer
// (Net, Native, Event, Public, NetServer)
// Parameters:
// class AActor*                           Target                                                 (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UBUS_GSEventCollection::Evt_TriggrtInteractOnOtherClientServer(class AActor* Target)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BUS_GSEventCollection", "Evt_TriggrtInteractOnOtherClientServer");

	Params::BUS_GSEventCollection_Evt_TriggrtInteractOnOtherClientServer Parms{};

	Parms.Target = Target;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function b1-Managed.BUS_GSEventCollection.Evt_TriggerNormalDamageEffectMultiCast
// (Net, NetReliable, Native, Event, NetMulticast, Public)
// Parameters:
// class AActor*                           Attacker                                               (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// struct FSkillDamageConfig               SkillDamageConfig                                      (Parm, ZeroConstructor, HasGetValueTypeHash)
// struct FEffectInstReq                   EffectInstReq                                          (Parm, NoDestructor, HasGetValueTypeHash)
// struct FBattleAttrSnapShot              Attacker_AttrMemData                                   (Parm, NoDestructor, HasGetValueTypeHash)

void UBUS_GSEventCollection::Evt_TriggerNormalDamageEffectMultiCast(class AActor* Attacker, const struct FSkillDamageConfig& SkillDamageConfig, const struct FEffectInstReq& EffectInstReq, const struct FBattleAttrSnapShot& Attacker_AttrMemData)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BUS_GSEventCollection", "Evt_TriggerNormalDamageEffectMultiCast");

	Params::BUS_GSEventCollection_Evt_TriggerNormalDamageEffectMultiCast Parms{};

	Parms.Attacker = Attacker;
	Parms.SkillDamageConfig = std::move(SkillDamageConfig);
	Parms.EffectInstReq = std::move(EffectInstReq);
	Parms.Attacker_AttrMemData = std::move(Attacker_AttrMemData);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function b1-Managed.BUS_GSEventCollection.Evt_SetActorTransform_Multicast_Invoke
// (Net, NetReliable, Native, Event, NetMulticast, Public)
// Parameters:
// struct FTransform                       NewTransform                                           (Parm, IsPlainOldData, NoDestructor)
// uint8                                   bSweep                                                 (Parm, NoDestructor, HasGetValueTypeHash)
// uint8                                   bTeleport                                              (Parm, NoDestructor, HasGetValueTypeHash)

void UBUS_GSEventCollection::Evt_SetActorTransform_Multicast_Invoke(const struct FTransform& NewTransform, uint8 bSweep, uint8 bTeleport)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BUS_GSEventCollection", "Evt_SetActorTransform_Multicast_Invoke");

	Params::BUS_GSEventCollection_Evt_SetActorTransform_Multicast_Invoke Parms{};

	Parms.NewTransform = std::move(NewTransform);
	Parms.bSweep = bSweep;
	Parms.bTeleport = bTeleport;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function b1-Managed.BUS_GSEventCollection.Evt_UnitUnequipFaBao_Multicast_Invoke
// (Net, Native, Event, NetMulticast, Public)

void UBUS_GSEventCollection::Evt_UnitUnequipFaBao_Multicast_Invoke()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BUS_GSEventCollection", "Evt_UnitUnequipFaBao_Multicast_Invoke");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function b1-Managed.BUS_GSEventCollection.Evt_TriggerSkillEffect_TransmitServer
// (Net, NetReliable, Native, Event, Public, NetServer)
// Parameters:
// int32                                   EffectID                                               (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// struct FEffectInstReq                   EffectInstReq                                          (Parm, NoDestructor, HasGetValueTypeHash)
// class AActor*                           InnerTarget                                            (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// uint8                                   bWithRPCEvent                                          (Parm, NoDestructor, HasGetValueTypeHash)
// int32                                   PredictionKeyId                                        (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// int32                                   ParentPredictionKeyId                                  (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UBUS_GSEventCollection::Evt_TriggerSkillEffect_TransmitServer(int32 EffectID, const struct FEffectInstReq& EffectInstReq, class AActor* InnerTarget, uint8 bWithRPCEvent, int32 PredictionKeyId, int32 ParentPredictionKeyId)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BUS_GSEventCollection", "Evt_TriggerSkillEffect_TransmitServer");

	Params::BUS_GSEventCollection_Evt_TriggerSkillEffect_TransmitServer Parms{};

	Parms.EffectID = EffectID;
	Parms.EffectInstReq = std::move(EffectInstReq);
	Parms.InnerTarget = InnerTarget;
	Parms.bWithRPCEvent = bWithRPCEvent;
	Parms.PredictionKeyId = PredictionKeyId;
	Parms.ParentPredictionKeyId = ParentPredictionKeyId;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function b1-Managed.BUS_GSEventCollection.Evt_DeactivateTalent_Multicast_Invoke
// (Net, Native, Event, NetMulticast, Public)
// Parameters:
// int32                                   P1                                                     (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UBUS_GSEventCollection::Evt_DeactivateTalent_Multicast_Invoke(int32 P1)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BUS_GSEventCollection", "Evt_DeactivateTalent_Multicast_Invoke");

	Params::BUS_GSEventCollection_Evt_DeactivateTalent_Multicast_Invoke Parms{};

	Parms.P1 = P1;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function b1-Managed.BUS_GSEventCollection.Evt_CastSkillWithAnimMontageMultiCast
// (Net, NetReliable, Native, Event, NetMulticast, Public)
// Parameters:
// class UAnimMontage*                     Montage                                                (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// float                                   PlayTimeRate                                           (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// float                                   MontagePosOffset                                       (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// class FName                             StartSectionName                                       (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// EMontageBindReason                      Reason                                                 (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UBUS_GSEventCollection::Evt_CastSkillWithAnimMontageMultiCast(class UAnimMontage* Montage, float PlayTimeRate, float MontagePosOffset, class FName StartSectionName, EMontageBindReason Reason)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BUS_GSEventCollection", "Evt_CastSkillWithAnimMontageMultiCast");

	Params::BUS_GSEventCollection_Evt_CastSkillWithAnimMontageMultiCast Parms{};

	Parms.Montage = Montage;
	Parms.PlayTimeRate = PlayTimeRate;
	Parms.MontagePosOffset = MontagePosOffset;
	Parms.StartSectionName = StartSectionName;
	Parms.Reason = Reason;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function b1-Managed.BUS_GSEventCollection.Evt_RemoveBuffNotify_Multicast_Invoke
// (Net, NetReliable, Native, Event, NetMulticast, Public)
// Parameters:
// int32                                   P1                                                     (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// int32                                   P2                                                     (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UBUS_GSEventCollection::Evt_RemoveBuffNotify_Multicast_Invoke(int32 P1, int32 P2)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BUS_GSEventCollection", "Evt_RemoveBuffNotify_Multicast_Invoke");

	Params::BUS_GSEventCollection_Evt_RemoveBuffNotify_Multicast_Invoke Parms{};

	Parms.P1 = P1;
	Parms.P2 = P2;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function b1-Managed.BUS_GSEventCollection.Evt_TriggerFallDying_Multicast_Invoke
// (Net, Native, Event, NetMulticast, Public)
// Parameters:
// class AActor*                           Actor                                                  (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UBUS_GSEventCollection::Evt_TriggerFallDying_Multicast_Invoke(class AActor* Actor)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BUS_GSEventCollection", "Evt_TriggerFallDying_Multicast_Invoke");

	Params::BUS_GSEventCollection_Evt_TriggerFallDying_Multicast_Invoke Parms{};

	Parms.Actor = Actor;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function b1-Managed.BUS_GSEventCollection.Evt_OnProjectileDead_Multicast_Invoke
// (Net, Native, Event, NetMulticast, Public)
// Parameters:
// EBGUBulletDestroyReason                 Reason                                                 (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UBUS_GSEventCollection::Evt_OnProjectileDead_Multicast_Invoke(EBGUBulletDestroyReason Reason)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BUS_GSEventCollection", "Evt_OnProjectileDead_Multicast_Invoke");

	Params::BUS_GSEventCollection_Evt_OnProjectileDead_Multicast_Invoke Parms{};

	Parms.Reason = Reason;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function b1-Managed.BUS_GSEventCollection.Evt_UpdateBuffCaster_Multicast_Invoke
// (Net, NetReliable, Native, Event, NetMulticast, Public)
// Parameters:
// class AActor*                           Actor1                                                 (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// class AActor*                           Actor2                                                 (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// int32                                   P1                                                     (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UBUS_GSEventCollection::Evt_UpdateBuffCaster_Multicast_Invoke(class AActor* Actor1, class AActor* Actor2, int32 P1)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BUS_GSEventCollection", "Evt_UpdateBuffCaster_Multicast_Invoke");

	Params::BUS_GSEventCollection_Evt_UpdateBuffCaster_Multicast_Invoke Parms{};

	Parms.Actor1 = Actor1;
	Parms.Actor2 = Actor2;
	Parms.P1 = P1;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function b1-Managed.BUS_GSEventCollection.Evt_UnitCastSkillTry_Multicast_Invoke
// (Net, Native, Event, NetMulticast, Public)
// Parameters:
// struct FCastSkillInfo                   CSI                                                    (Parm, NoDestructor, HasGetValueTypeHash)

void UBUS_GSEventCollection::Evt_UnitCastSkillTry_Multicast_Invoke(const struct FCastSkillInfo& CSI)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BUS_GSEventCollection", "Evt_UnitCastSkillTry_Multicast_Invoke");

	Params::BUS_GSEventCollection_Evt_UnitCastSkillTry_Multicast_Invoke Parms{};

	Parms.CSI = std::move(CSI);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function b1-Managed.BUS_GSEventCollection.Evt_SmartCastSkillTry_RollBack_Client
// (Net, NetReliable, Native, Event, Public, NetClient)
// Parameters:
// int32                                   ID                                                     (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// TArray<int32>                           RuleIDList                                             (Parm)
// EMontageBindReason                      Reason                                                 (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// ESkillDirection                         SkillDirection                                         (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// uint8                                   bNeedCheckSkillCanCast                                 (Parm, NoDestructor, HasGetValueTypeHash)
// int32                                   PredictionKeyId                                        (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UBUS_GSEventCollection::Evt_SmartCastSkillTry_RollBack_Client(int32 ID, const TArray<int32>& RuleIDList, EMontageBindReason Reason, ESkillDirection SkillDirection, uint8 bNeedCheckSkillCanCast, int32 PredictionKeyId)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BUS_GSEventCollection", "Evt_SmartCastSkillTry_RollBack_Client");

	Params::BUS_GSEventCollection_Evt_SmartCastSkillTry_RollBack_Client Parms{};

	Parms.ID = ID;
	Parms.RuleIDList = std::move(RuleIDList);
	Parms.Reason = Reason;
	Parms.SkillDirection = SkillDirection;
	Parms.bNeedCheckSkillCanCast = bNeedCheckSkillCanCast;
	Parms.PredictionKeyId = PredictionKeyId;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function b1-Managed.BUS_GSEventCollection.Evt_RoleLevelChange_Multicast_Invoke
// (Net, Native, Event, NetMulticast, Public)
// Parameters:
// int32                                   OldRoleLevel                                           (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// int32                                   NewRoleLevel                                           (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UBUS_GSEventCollection::Evt_RoleLevelChange_Multicast_Invoke(int32 OldRoleLevel, int32 NewRoleLevel)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BUS_GSEventCollection", "Evt_RoleLevelChange_Multicast_Invoke");

	Params::BUS_GSEventCollection_Evt_RoleLevelChange_Multicast_Invoke Parms{};

	Parms.OldRoleLevel = OldRoleLevel;
	Parms.NewRoleLevel = NewRoleLevel;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function b1-Managed.BUS_GSEventCollection.Evt_SmartCastSkillTry_Confirm_Client
// (Net, NetReliable, Native, Event, Public, NetClient)
// Parameters:
// int32                                   ID                                                     (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// TArray<int32>                           RuleIDList                                             (Parm)
// EMontageBindReason                      Reason                                                 (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// ESkillDirection                         SkillDirection                                         (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// uint8                                   bNeedCheckSkillCanCast                                 (Parm, NoDestructor, HasGetValueTypeHash)
// int32                                   PredictionKeyId                                        (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UBUS_GSEventCollection::Evt_SmartCastSkillTry_Confirm_Client(int32 ID, const TArray<int32>& RuleIDList, EMontageBindReason Reason, ESkillDirection SkillDirection, uint8 bNeedCheckSkillCanCast, int32 PredictionKeyId)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BUS_GSEventCollection", "Evt_SmartCastSkillTry_Confirm_Client");

	Params::BUS_GSEventCollection_Evt_SmartCastSkillTry_Confirm_Client Parms{};

	Parms.ID = ID;
	Parms.RuleIDList = std::move(RuleIDList);
	Parms.Reason = Reason;
	Parms.SkillDirection = SkillDirection;
	Parms.bNeedCheckSkillCanCast = bNeedCheckSkillCanCast;
	Parms.PredictionKeyId = PredictionKeyId;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function b1-Managed.BUS_GSEventCollection.Evt_RecoveryPartDamageValueMultiCast
// (Net, Native, Event, NetMulticast, Public)
// Parameters:
// int32                                   P1                                                     (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UBUS_GSEventCollection::Evt_RecoveryPartDamageValueMultiCast(int32 P1)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BUS_GSEventCollection", "Evt_RecoveryPartDamageValueMultiCast");

	Params::BUS_GSEventCollection_Evt_RecoveryPartDamageValueMultiCast Parms{};

	Parms.P1 = P1;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function b1-Managed.BUS_GSEventCollection.Evt_UnitStateTriggerCMultiCastServer
// (Net, Native, Event, Public, NetServer)
// Parameters:
// EBUStateTrigger                         TriggerId                                              (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// float                                   Time                                                   (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// uint8                                   NeedForceUpdate                                        (Parm, NoDestructor, HasGetValueTypeHash)

void UBUS_GSEventCollection::Evt_UnitStateTriggerCMultiCastServer(EBUStateTrigger TriggerId, float Time, uint8 NeedForceUpdate)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BUS_GSEventCollection", "Evt_UnitStateTriggerCMultiCastServer");

	Params::BUS_GSEventCollection_Evt_UnitStateTriggerCMultiCastServer Parms{};

	Parms.TriggerId = TriggerId;
	Parms.Time = Time;
	Parms.NeedForceUpdate = NeedForceUpdate;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function b1-Managed.BUS_GSEventCollection.Evt_TriggerJumpSkill_RollBack_Client
// (Net, NetReliable, Native, Event, Public, NetClient)
// Parameters:
// ESkillDirection                         StartJumpDir                                           (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// struct FVector2D                        CurrentInput                                           (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// int32                                   PredictionKeyId                                        (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UBUS_GSEventCollection::Evt_TriggerJumpSkill_RollBack_Client(ESkillDirection StartJumpDir, const struct FVector2D& CurrentInput, int32 PredictionKeyId)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BUS_GSEventCollection", "Evt_TriggerJumpSkill_RollBack_Client");

	Params::BUS_GSEventCollection_Evt_TriggerJumpSkill_RollBack_Client Parms{};

	Parms.StartJumpDir = StartJumpDir;
	Parms.CurrentInput = std::move(CurrentInput);
	Parms.PredictionKeyId = PredictionKeyId;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function b1-Managed.BUS_GSEventCollection.Evt_UnitCastSkillTryCMultiCastServer
// (Net, NetReliable, Native, Event, Public, NetServer)
// Parameters:
// struct FCastSkillInfo                   CSI                                                    (Parm, NoDestructor, HasGetValueTypeHash)
// int32                                   PredictionKeyId                                        (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// int32                                   ParentPredictionKeyId                                  (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UBUS_GSEventCollection::Evt_UnitCastSkillTryCMultiCastServer(const struct FCastSkillInfo& CSI, int32 PredictionKeyId, int32 ParentPredictionKeyId)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BUS_GSEventCollection", "Evt_UnitCastSkillTryCMultiCastServer");

	Params::BUS_GSEventCollection_Evt_UnitCastSkillTryCMultiCastServer Parms{};

	Parms.CSI = std::move(CSI);
	Parms.PredictionKeyId = PredictionKeyId;
	Parms.ParentPredictionKeyId = ParentPredictionKeyId;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function b1-Managed.BUS_GSEventCollection.Evt_ClientMultiCastRPCTest2MultiCast
// (Net, NetReliable, Native, Event, NetMulticast, Public)
// Parameters:
// class UAnimMontage*                     Montage                                                (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// float                                   PlayTimeRate                                           (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// float                                   MontagePosOffset                                       (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// class FName                             StartSectionName                                       (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// EMontageBindReason                      Reason                                                 (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UBUS_GSEventCollection::Evt_ClientMultiCastRPCTest2MultiCast(class UAnimMontage* Montage, float PlayTimeRate, float MontagePosOffset, class FName StartSectionName, EMontageBindReason Reason)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BUS_GSEventCollection", "Evt_ClientMultiCastRPCTest2MultiCast");

	Params::BUS_GSEventCollection_Evt_ClientMultiCastRPCTest2MultiCast Parms{};

	Parms.Montage = Montage;
	Parms.PlayTimeRate = PlayTimeRate;
	Parms.MontagePosOffset = MontagePosOffset;
	Parms.StartSectionName = StartSectionName;
	Parms.Reason = Reason;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function b1-Managed.BUS_GSEventCollection.Evt_ClientMultiCastRPCTest1MultiCast
// (Net, Native, Event, NetMulticast, Public)
// Parameters:
// class UAnimMontage*                     Montage                                                (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// float                                   PlayTimeRate                                           (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// float                                   MontagePosOffset                                       (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// class FName                             StartSectionName                                       (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// EMontageBindReason                      Reason                                                 (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UBUS_GSEventCollection::Evt_ClientMultiCastRPCTest1MultiCast(class UAnimMontage* Montage, float PlayTimeRate, float MontagePosOffset, class FName StartSectionName, EMontageBindReason Reason)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BUS_GSEventCollection", "Evt_ClientMultiCastRPCTest1MultiCast");

	Params::BUS_GSEventCollection_Evt_ClientMultiCastRPCTest1MultiCast Parms{};

	Parms.Montage = Montage;
	Parms.PlayTimeRate = PlayTimeRate;
	Parms.MontagePosOffset = MontagePosOffset;
	Parms.StartSectionName = StartSectionName;
	Parms.Reason = Reason;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function b1-Managed.BUS_GSEventCollection.Evt_TriggerJumpSkill_Confirm_Client
// (Net, NetReliable, Native, Event, Public, NetClient)
// Parameters:
// ESkillDirection                         StartJumpDir                                           (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// struct FVector2D                        CurrentInput                                           (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// int32                                   PredictionKeyId                                        (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UBUS_GSEventCollection::Evt_TriggerJumpSkill_Confirm_Client(ESkillDirection StartJumpDir, const struct FVector2D& CurrentInput, int32 PredictionKeyId)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BUS_GSEventCollection", "Evt_TriggerJumpSkill_Confirm_Client");

	Params::BUS_GSEventCollection_Evt_TriggerJumpSkill_Confirm_Client Parms{};

	Parms.StartJumpDir = StartJumpDir;
	Parms.CurrentInput = std::move(CurrentInput);
	Parms.PredictionKeyId = PredictionKeyId;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function b1-Managed.BUS_GSEventCollection.Evt_UnitEquipFaBao_Multicast_Invoke
// (Net, Native, Event, NetMulticast, Public)
// Parameters:
// int32                                   P1                                                     (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UBUS_GSEventCollection::Evt_UnitEquipFaBao_Multicast_Invoke(int32 P1)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BUS_GSEventCollection", "Evt_UnitEquipFaBao_Multicast_Invoke");

	Params::BUS_GSEventCollection_Evt_UnitEquipFaBao_Multicast_Invoke Parms{};

	Parms.P1 = P1;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function b1-Managed.BUS_GSEventCollection.Evt_ActivateTalent_Multicast_Invoke
// (Net, Native, Event, NetMulticast, Public)
// Parameters:
// int32                                   TalentID                                               (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// int32                                   ChangeLevel                                            (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UBUS_GSEventCollection::Evt_ActivateTalent_Multicast_Invoke(int32 TalentID, int32 ChangeLevel)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BUS_GSEventCollection", "Evt_ActivateTalent_Multicast_Invoke");

	Params::BUS_GSEventCollection_Evt_ActivateTalent_Multicast_Invoke Parms{};

	Parms.TalentID = TalentID;
	Parms.ChangeLevel = ChangeLevel;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function b1-Managed.BUS_GSEventCollection.Evt_TriggerSkillEffectBySkillServer
// (Net, NetReliable, Native, Event, Public, NetServer)
// Parameters:
// int32                                   EffectID                                               (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// class AActor*                           Caster                                                 (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// class AActor*                           Target                                                 (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// struct FEffectInstReq                   EffectInstReq                                          (Parm, NoDestructor, HasGetValueTypeHash)
// int32                                   PredictionKeyId                                        (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// int32                                   ParentPredictionKeyId                                  (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UBUS_GSEventCollection::Evt_TriggerSkillEffectBySkillServer(int32 EffectID, class AActor* Caster, class AActor* Target, const struct FEffectInstReq& EffectInstReq, int32 PredictionKeyId, int32 ParentPredictionKeyId)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BUS_GSEventCollection", "Evt_TriggerSkillEffectBySkillServer");

	Params::BUS_GSEventCollection_Evt_TriggerSkillEffectBySkillServer Parms{};

	Parms.EffectID = EffectID;
	Parms.Caster = Caster;
	Parms.Target = Target;
	Parms.EffectInstReq = std::move(EffectInstReq);
	Parms.PredictionKeyId = PredictionKeyId;
	Parms.ParentPredictionKeyId = ParentPredictionKeyId;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function b1-Managed.BUS_GSEventCollection.Evt_TriggerEndSave_Multicast_Invoke
// (Net, NetReliable, Native, Event, NetMulticast, Public)
// Parameters:
// uint8                                   Success                                                (Parm, NoDestructor, HasGetValueTypeHash)
// class AActor*                           Saver                                                  (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// class AActor*                           BeSaver                                                (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UBUS_GSEventCollection::Evt_TriggerEndSave_Multicast_Invoke(uint8 Success, class AActor* Saver, class AActor* BeSaver)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BUS_GSEventCollection", "Evt_TriggerEndSave_Multicast_Invoke");

	Params::BUS_GSEventCollection_Evt_TriggerEndSave_Multicast_Invoke Parms{};

	Parms.Success = Success;
	Parms.Saver = Saver;
	Parms.BeSaver = BeSaver;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function b1-Managed.BUS_GSEventCollection.Evt_TriggerNormalDamageEffectServer
// (Net, NetReliable, Native, Event, Public, NetServer)
// Parameters:
// class AActor*                           Attacker                                               (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// struct FSkillDamageConfig               SkillDamageConfig                                      (Parm, ZeroConstructor, HasGetValueTypeHash)
// struct FEffectInstReq                   EffectInstReq                                          (Parm, NoDestructor, HasGetValueTypeHash)
// struct FBattleAttrSnapShot              Attacker_AttrMemData                                   (Parm, NoDestructor, HasGetValueTypeHash)
// int32                                   PredictionKeyId                                        (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// int32                                   ParentPredictionKeyId                                  (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UBUS_GSEventCollection::Evt_TriggerNormalDamageEffectServer(class AActor* Attacker, const struct FSkillDamageConfig& SkillDamageConfig, const struct FEffectInstReq& EffectInstReq, const struct FBattleAttrSnapShot& Attacker_AttrMemData, int32 PredictionKeyId, int32 ParentPredictionKeyId)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BUS_GSEventCollection", "Evt_TriggerNormalDamageEffectServer");

	Params::BUS_GSEventCollection_Evt_TriggerNormalDamageEffectServer Parms{};

	Parms.Attacker = Attacker;
	Parms.SkillDamageConfig = std::move(SkillDamageConfig);
	Parms.EffectInstReq = std::move(EffectInstReq);
	Parms.Attacker_AttrMemData = std::move(Attacker_AttrMemData);
	Parms.PredictionKeyId = PredictionKeyId;
	Parms.ParentPredictionKeyId = ParentPredictionKeyId;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function b1-Managed.BUS_GSEventCollection.Evt_UnitStatePredic_RollBack_Client
// (Net, NetReliable, Native, Event, Public, NetClient)
// Parameters:
// EBGUUnitState                           UnitState                                              (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// uint8                                   NeedForceUpdate                                        (Parm, NoDestructor, HasGetValueTypeHash)
// float                                   Time                                                   (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// int32                                   PredictionKeyId                                        (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UBUS_GSEventCollection::Evt_UnitStatePredic_RollBack_Client(EBGUUnitState UnitState, uint8 NeedForceUpdate, float Time, int32 PredictionKeyId)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BUS_GSEventCollection", "Evt_UnitStatePredic_RollBack_Client");

	Params::BUS_GSEventCollection_Evt_UnitStatePredic_RollBack_Client Parms{};

	Parms.UnitState = UnitState;
	Parms.NeedForceUpdate = NeedForceUpdate;
	Parms.Time = Time;
	Parms.PredictionKeyId = PredictionKeyId;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function b1-Managed.BUS_GSEventCollection.Evt_TriggerRootMotionJumpMultiCast
// (Net, NetReliable, Native, Event, NetMulticast, Public)

void UBUS_GSEventCollection::Evt_TriggerRootMotionJumpMultiCast()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BUS_GSEventCollection", "Evt_TriggerRootMotionJumpMultiCast");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function b1-Managed.BUS_GSEventCollection.Evt_GMUnitSuicide_Multicast_Invoke
// (Net, NetReliable, Native, Event, NetMulticast, Public)

void UBUS_GSEventCollection::Evt_GMUnitSuicide_Multicast_Invoke()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BUS_GSEventCollection", "Evt_GMUnitSuicide_Multicast_Invoke");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function b1-Managed.BUS_GSEventCollection.Evt_BuffAllRemove_Multicast_Invoke
// (Net, NetReliable, Native, Event, NetMulticast, Public)
// Parameters:
// EBuffEffectTriggerType                  RemoveTriggerType                                      (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// uint8                                   WithTriggerRemmoveEffect                               (Parm, NoDestructor, HasGetValueTypeHash)

void UBUS_GSEventCollection::Evt_BuffAllRemove_Multicast_Invoke(EBuffEffectTriggerType RemoveTriggerType, uint8 WithTriggerRemmoveEffect)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BUS_GSEventCollection", "Evt_BuffAllRemove_Multicast_Invoke");

	Params::BUS_GSEventCollection_Evt_BuffAllRemove_Multicast_Invoke Parms{};

	Parms.RemoveTriggerType = RemoveTriggerType;
	Parms.WithTriggerRemmoveEffect = WithTriggerRemmoveEffect;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function b1-Managed.BUS_GSEventCollection.Evt_AddBuffNotify_Multicast_Invoke
// (Net, NetReliable, Native, Event, NetMulticast, Public)
// Parameters:
// uint8                                   IsHasBuffBefore                                        (Parm, NoDestructor, HasGetValueTypeHash)
// class AActor*                           Caster                                                 (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// int32                                   BuffID                                                 (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// float                                   BuffDuration                                           (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UBUS_GSEventCollection::Evt_AddBuffNotify_Multicast_Invoke(uint8 IsHasBuffBefore, class AActor* Caster, int32 BuffID, float BuffDuration)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BUS_GSEventCollection", "Evt_AddBuffNotify_Multicast_Invoke");

	Params::BUS_GSEventCollection_Evt_AddBuffNotify_Multicast_Invoke Parms{};

	Parms.IsHasBuffBefore = IsHasBuffBefore;
	Parms.Caster = Caster;
	Parms.BuffID = BuffID;
	Parms.BuffDuration = BuffDuration;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function b1-Managed.BUS_GSEventCollection.Evt_UnitStatePredic_Confirm_Client
// (Net, NetReliable, Native, Event, Public, NetClient)
// Parameters:
// EBGUUnitState                           UnitState                                              (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// uint8                                   NeedForceUpdate                                        (Parm, NoDestructor, HasGetValueTypeHash)
// float                                   Time                                                   (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// int32                                   PredictionKeyId                                        (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UBUS_GSEventCollection::Evt_UnitStatePredic_Confirm_Client(EBGUUnitState UnitState, uint8 NeedForceUpdate, float Time, int32 PredictionKeyId)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BUS_GSEventCollection", "Evt_UnitStatePredic_Confirm_Client");

	Params::BUS_GSEventCollection_Evt_UnitStatePredic_Confirm_Client Parms{};

	Parms.UnitState = UnitState;
	Parms.NeedForceUpdate = NeedForceUpdate;
	Parms.Time = Time;
	Parms.PredictionKeyId = PredictionKeyId;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function b1-Managed.BUS_GSEventCollection.Evt_CastSkillWithAnimMontageServer
// (Net, NetReliable, Native, Event, Public, NetServer)
// Parameters:
// class UAnimMontage*                     Montage                                                (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// float                                   PlayTimeRate                                           (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// float                                   MontagePosOffset                                       (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// class FName                             StartSectionName                                       (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// EMontageBindReason                      Reason                                                 (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// int32                                   PredictionKeyId                                        (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// int32                                   ParentPredictionKeyId                                  (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UBUS_GSEventCollection::Evt_CastSkillWithAnimMontageServer(class UAnimMontage* Montage, float PlayTimeRate, float MontagePosOffset, class FName StartSectionName, EMontageBindReason Reason, int32 PredictionKeyId, int32 ParentPredictionKeyId)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BUS_GSEventCollection", "Evt_CastSkillWithAnimMontageServer");

	Params::BUS_GSEventCollection_Evt_CastSkillWithAnimMontageServer Parms{};

	Parms.Montage = Montage;
	Parms.PlayTimeRate = PlayTimeRate;
	Parms.MontagePosOffset = MontagePosOffset;
	Parms.StartSectionName = StartSectionName;
	Parms.Reason = Reason;
	Parms.PredictionKeyId = PredictionKeyId;
	Parms.ParentPredictionKeyId = ParentPredictionKeyId;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function b1-Managed.BUS_GSEventCollection.Evt_ClientMultiCastRPCTest1Server
// (Net, Native, Event, Public, NetServer)
// Parameters:
// class UAnimMontage*                     Montage                                                (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// float                                   PlayTimeRate                                           (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// float                                   MontagePosOffset                                       (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// class FName                             StartSectionName                                       (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// EMontageBindReason                      Reason                                                 (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UBUS_GSEventCollection::Evt_ClientMultiCastRPCTest1Server(class UAnimMontage* Montage, float PlayTimeRate, float MontagePosOffset, class FName StartSectionName, EMontageBindReason Reason)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BUS_GSEventCollection", "Evt_ClientMultiCastRPCTest1Server");

	Params::BUS_GSEventCollection_Evt_ClientMultiCastRPCTest1Server Parms{};

	Parms.Montage = Montage;
	Parms.PlayTimeRate = PlayTimeRate;
	Parms.MontagePosOffset = MontagePosOffset;
	Parms.StartSectionName = StartSectionName;
	Parms.Reason = Reason;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function b1-Managed.BUS_GSEventCollection.Evt_RecoveryPartDamageValueServer
// (Net, Native, Event, Public, NetServer)
// Parameters:
// int32                                   P1                                                     (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UBUS_GSEventCollection::Evt_RecoveryPartDamageValueServer(int32 P1)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BUS_GSEventCollection", "Evt_RecoveryPartDamageValueServer");

	Params::BUS_GSEventCollection_Evt_RecoveryPartDamageValueServer Parms{};

	Parms.P1 = P1;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function b1-Managed.BUS_GSEventCollection.Evt_ClientMultiCastRPCTest2Server
// (Net, NetReliable, Native, Event, Public, NetServer)
// Parameters:
// class UAnimMontage*                     Montage                                                (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// float                                   PlayTimeRate                                           (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// float                                   MontagePosOffset                                       (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// class FName                             StartSectionName                                       (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// EMontageBindReason                      Reason                                                 (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// int32                                   PredictionKeyId                                        (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// int32                                   ParentPredictionKeyId                                  (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UBUS_GSEventCollection::Evt_ClientMultiCastRPCTest2Server(class UAnimMontage* Montage, float PlayTimeRate, float MontagePosOffset, class FName StartSectionName, EMontageBindReason Reason, int32 PredictionKeyId, int32 ParentPredictionKeyId)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BUS_GSEventCollection", "Evt_ClientMultiCastRPCTest2Server");

	Params::BUS_GSEventCollection_Evt_ClientMultiCastRPCTest2Server Parms{};

	Parms.Montage = Montage;
	Parms.PlayTimeRate = PlayTimeRate;
	Parms.MontagePosOffset = MontagePosOffset;
	Parms.StartSectionName = StartSectionName;
	Parms.Reason = Reason;
	Parms.PredictionKeyId = PredictionKeyId;
	Parms.ParentPredictionKeyId = ParentPredictionKeyId;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function b1-Managed.BUS_GSEventCollection.Evt_FinishRescue_Multicast_Invoke
// (Net, NetReliable, Native, Event, NetMulticast, Public)
// Parameters:
// class AActor*                           Target                                                 (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UBUS_GSEventCollection::Evt_FinishRescue_Multicast_Invoke(class AActor* Target)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BUS_GSEventCollection", "Evt_FinishRescue_Multicast_Invoke");

	Params::BUS_GSEventCollection_Evt_FinishRescue_Multicast_Invoke Parms{};

	Parms.Target = Target;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function b1-Managed.BUS_GSEventCollection.Evt_OnlineChallengeBeginMultiCast
// (Net, Native, Event, NetMulticast, Public)
// Parameters:
// int32                                   P1                                                     (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// int32                                   P2                                                     (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UBUS_GSEventCollection::Evt_OnlineChallengeBeginMultiCast(int32 P1, int32 P2)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BUS_GSEventCollection", "Evt_OnlineChallengeBeginMultiCast");

	Params::BUS_GSEventCollection_Evt_OnlineChallengeBeginMultiCast Parms{};

	Parms.P1 = P1;
	Parms.P2 = P2;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function b1-Managed.BUS_GSEventCollection.Evt_Camera_ClearCamLockMultiCast
// (Net, Native, Event, NetMulticast, Public)

void UBUS_GSEventCollection::Evt_Camera_ClearCamLockMultiCast()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BUS_GSEventCollection", "Evt_Camera_ClearCamLockMultiCast");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function b1-Managed.BUS_GSEventCollection.Evt_SkillRotate_Multicast_Invoke
// (Net, Native, Event, NetMulticast, Public)
// Parameters:
// int32                                   P1                                                     (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UBUS_GSEventCollection::Evt_SkillRotate_Multicast_Invoke(int32 P1)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BUS_GSEventCollection", "Evt_SkillRotate_Multicast_Invoke");

	Params::BUS_GSEventCollection_Evt_SkillRotate_Multicast_Invoke Parms{};

	Parms.P1 = P1;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function b1-Managed.BUS_GSEventCollection.Evt_RebirthTeleportFinish_Invoke
// (Net, Native, Event, Public, NetServer)
// Parameters:
// ERebirthType                            State                                                  (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UBUS_GSEventCollection::Evt_RebirthTeleportFinish_Invoke(ERebirthType State)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BUS_GSEventCollection", "Evt_RebirthTeleportFinish_Invoke");

	Params::BUS_GSEventCollection_Evt_RebirthTeleportFinish_Invoke Parms{};

	Parms.State = State;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function b1-Managed.BUS_GSEventCollection.Evt_UnitRebirth_Multicast_Invoke
// (Net, NetReliable, Native, Event, NetMulticast, Public)
// Parameters:
// ERebirthType                            RebirthType                                            (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UBUS_GSEventCollection::Evt_UnitRebirth_Multicast_Invoke(ERebirthType RebirthType)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BUS_GSEventCollection", "Evt_UnitRebirth_Multicast_Invoke");

	Params::BUS_GSEventCollection_Evt_UnitRebirth_Multicast_Invoke Parms{};

	Parms.RebirthType = RebirthType;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function b1-Managed.BUS_GSEventCollection.Evt_FinishRescueInteract_Invoke
// (Net, NetReliable, Native, Event, Public, NetServer)
// Parameters:
// class AActor*                           Target                                                 (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UBUS_GSEventCollection::Evt_FinishRescueInteract_Invoke(class AActor* Target)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BUS_GSEventCollection", "Evt_FinishRescueInteract_Invoke");

	Params::BUS_GSEventCollection_Evt_FinishRescueInteract_Invoke Parms{};

	Parms.Target = Target;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function b1-Managed.BUS_GSEventCollection.Evt_DropCollectionItemMultiCast
// (Net, Native, Event, NetMulticast, Public)
// Parameters:
// class AActor*                           Player                                                 (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// int32                                   DropId                                                 (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// int32                                   DropLevel                                              (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UBUS_GSEventCollection::Evt_DropCollectionItemMultiCast(class AActor* Player, int32 DropId, int32 DropLevel)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BUS_GSEventCollection", "Evt_DropCollectionItemMultiCast");

	Params::BUS_GSEventCollection_Evt_DropCollectionItemMultiCast Parms{};

	Parms.Player = Player;
	Parms.DropId = DropId;
	Parms.DropLevel = DropLevel;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function b1-Managed.BUS_GSEventCollection.Evt_TestPredict_RollBack_Client
// (Net, NetReliable, Native, Event, Public, NetClient)
// Parameters:
// int32                                   PredictionKeyId                                        (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UBUS_GSEventCollection::Evt_TestPredict_RollBack_Client(int32 PredictionKeyId)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BUS_GSEventCollection", "Evt_TestPredict_RollBack_Client");

	Params::BUS_GSEventCollection_Evt_TestPredict_RollBack_Client Parms{};

	Parms.PredictionKeyId = PredictionKeyId;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function b1-Managed.BUS_GSEventCollection.Evt_InputActionReleaseMultiCast
// (Net, Native, Event, NetMulticast, Public)
// Parameters:
// class FString                           P1                                                     (Parm, ZeroConstructor, HasGetValueTypeHash)

void UBUS_GSEventCollection::Evt_InputActionReleaseMultiCast(const class FString& P1)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BUS_GSEventCollection", "Evt_InputActionReleaseMultiCast");

	Params::BUS_GSEventCollection_Evt_InputActionReleaseMultiCast Parms{};

	Parms.P1 = std::move(P1);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function b1-Managed.BUS_GSEventCollection.Evt_ChargeSkillSuccessMultiCast
// (Net, Native, Event, NetMulticast, Public)
// Parameters:
// int32                                   P1                                                     (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UBUS_GSEventCollection::Evt_ChargeSkillSuccessMultiCast(int32 P1)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BUS_GSEventCollection", "Evt_ChargeSkillSuccessMultiCast");

	Params::BUS_GSEventCollection_Evt_ChargeSkillSuccessMultiCast Parms{};

	Parms.P1 = P1;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function b1-Managed.BUS_GSEventCollection.Evt_BuffRemove_Multicast_Invoke
// (Net, NetReliable, Native, Event, NetMulticast, Public)
// Parameters:
// int32                                   BuffID                                                 (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// EBuffEffectTriggerType                  RemoveTriggerType                                      (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// int32                                   Layer                                                  (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// uint8                                   WithTriggerRemmoveEffect                               (Parm, NoDestructor, HasGetValueTypeHash)

void UBUS_GSEventCollection::Evt_BuffRemove_Multicast_Invoke(int32 BuffID, EBuffEffectTriggerType RemoveTriggerType, int32 Layer, uint8 WithTriggerRemmoveEffect)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BUS_GSEventCollection", "Evt_BuffRemove_Multicast_Invoke");

	Params::BUS_GSEventCollection_Evt_BuffRemove_Multicast_Invoke Parms{};

	Parms.BuffID = BuffID;
	Parms.RemoveTriggerType = RemoveTriggerType;
	Parms.Layer = Layer;
	Parms.WithTriggerRemmoveEffect = WithTriggerRemmoveEffect;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function b1-Managed.BUS_GSEventCollection.Evt_TriggerRootMotionJumpServer
// (Net, NetReliable, Native, Event, Public, NetServer)
// Parameters:
// int32                                   PredictionKeyId                                        (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// int32                                   ParentPredictionKeyId                                  (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UBUS_GSEventCollection::Evt_TriggerRootMotionJumpServer(int32 PredictionKeyId, int32 ParentPredictionKeyId)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BUS_GSEventCollection", "Evt_TriggerRootMotionJumpServer");

	Params::BUS_GSEventCollection_Evt_TriggerRootMotionJumpServer Parms{};

	Parms.PredictionKeyId = PredictionKeyId;
	Parms.ParentPredictionKeyId = ParentPredictionKeyId;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function b1-Managed.BUS_GSEventCollection.Evt_StopSlotAnimationMultiCast
// (Net, Native, Event, NetMulticast, Public)
// Parameters:
// float                                   P1                                                     (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UBUS_GSEventCollection::Evt_StopSlotAnimationMultiCast(float P1)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BUS_GSEventCollection", "Evt_StopSlotAnimationMultiCast");

	Params::BUS_GSEventCollection_Evt_StopSlotAnimationMultiCast Parms{};

	Parms.P1 = P1;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function b1-Managed.BUS_GSEventCollection.Evt_TestPredict_Confirm_Client
// (Net, NetReliable, Native, Event, Public, NetClient)
// Parameters:
// int32                                   PredictionKeyId                                        (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UBUS_GSEventCollection::Evt_TestPredict_Confirm_Client(int32 PredictionKeyId)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BUS_GSEventCollection", "Evt_TestPredict_Confirm_Client");

	Params::BUS_GSEventCollection_Evt_TestPredict_Confirm_Client Parms{};

	Parms.PredictionKeyId = PredictionKeyId;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function b1-Managed.BUS_GSEventCollection.Evt_NotifyGraphClientMultiCast
// (Net, Native, Event, NetMulticast, Public)
// Parameters:
// class FString                           FinalGuid                                              (Parm, ZeroConstructor, HasGetValueTypeHash)
// struct FGameplayTag                     NotifyTag                                              (Parm, NoDestructor, HasGetValueTypeHash)

void UBUS_GSEventCollection::Evt_NotifyGraphClientMultiCast(const class FString& FinalGuid, const struct FGameplayTag& NotifyTag)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BUS_GSEventCollection", "Evt_NotifyGraphClientMultiCast");

	Params::BUS_GSEventCollection_Evt_NotifyGraphClientMultiCast Parms{};

	Parms.FinalGuid = std::move(FinalGuid);
	Parms.NotifyTag = std::move(NotifyTag);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function b1-Managed.BUS_GSEventCollection.Evt_TriggerPlayerRestMultiCast
// (Net, Native, Event, NetMulticast, Public)

void UBUS_GSEventCollection::Evt_TriggerPlayerRestMultiCast()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BUS_GSEventCollection", "Evt_TriggerPlayerRestMultiCast");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function b1-Managed.BUS_GSEventCollection.Evt_SetTargetInfoServer_Invoke
// (Net, NetReliable, Native, Event, Public, NetServer)
// Parameters:
// struct FUnitLockTargetInfo              NewTargetInfo                                          (Parm, ZeroConstructor, HasGetValueTypeHash)

void UBUS_GSEventCollection::Evt_SetTargetInfoServer_Invoke(const struct FUnitLockTargetInfo& NewTargetInfo)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BUS_GSEventCollection", "Evt_SetTargetInfoServer_Invoke");

	Params::BUS_GSEventCollection_Evt_SetTargetInfoServer_Invoke Parms{};

	Parms.NewTargetInfo = std::move(NewTargetInfo);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function b1-Managed.BUS_GSEventCollection.Evt_SmartCastSkillTryMultiCast
// (Net, NetReliable, Native, Event, NetMulticast, Public)
// Parameters:
// int32                                   ID                                                     (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// TArray<int32>                           RuleIDList                                             (Parm)
// EMontageBindReason                      Reason                                                 (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// ESkillDirection                         SkillDirection                                         (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// uint8                                   bNeedCheckSkillCanCast                                 (Parm, NoDestructor, HasGetValueTypeHash)

void UBUS_GSEventCollection::Evt_SmartCastSkillTryMultiCast(int32 ID, const TArray<int32>& RuleIDList, EMontageBindReason Reason, ESkillDirection SkillDirection, uint8 bNeedCheckSkillCanCast)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BUS_GSEventCollection", "Evt_SmartCastSkillTryMultiCast");

	Params::BUS_GSEventCollection_Evt_SmartCastSkillTryMultiCast Parms{};

	Parms.ID = ID;
	Parms.RuleIDList = std::move(RuleIDList);
	Parms.Reason = Reason;
	Parms.SkillDirection = SkillDirection;
	Parms.bNeedCheckSkillCanCast = bNeedCheckSkillCanCast;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function b1-Managed.BUS_GSEventCollection.Evt_OnlineChallengeBeginServer
// (Net, Native, Event, Public, NetServer)
// Parameters:
// int32                                   P1                                                     (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// int32                                   P2                                                     (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UBUS_GSEventCollection::Evt_OnlineChallengeBeginServer(int32 P1, int32 P2)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BUS_GSEventCollection", "Evt_OnlineChallengeBeginServer");

	Params::BUS_GSEventCollection_Evt_OnlineChallengeBeginServer Parms{};

	Parms.P1 = P1;
	Parms.P2 = P2;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function b1-Managed.BUS_GSEventCollection.Evt_RotateToTargetSvrMultiCast
// (Net, Native, Event, NetMulticast, Public)
// Parameters:
// float                                   P1                                                     (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UBUS_GSEventCollection::Evt_RotateToTargetSvrMultiCast(float P1)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BUS_GSEventCollection", "Evt_RotateToTargetSvrMultiCast");

	Params::BUS_GSEventCollection_Evt_RotateToTargetSvrMultiCast Parms{};

	Parms.P1 = P1;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function b1-Managed.BUS_GSEventCollection.Evt_ExecuteCommandGMMultiCast
// (Net, NetReliable, Native, Event, NetMulticast, Public)
// Parameters:
// TArray<class FString>                   P                                                      (Parm)

void UBUS_GSEventCollection::Evt_ExecuteCommandGMMultiCast(const TArray<class FString>& P)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BUS_GSEventCollection", "Evt_ExecuteCommandGMMultiCast");

	Params::BUS_GSEventCollection_Evt_ExecuteCommandGMMultiCast Parms{};

	Parms.P = std::move(P);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function b1-Managed.BUS_GSEventCollection.Evt_InputActionPressMultiCast
// (Net, Native, Event, NetMulticast, Public)
// Parameters:
// class FString                           P1                                                     (Parm, ZeroConstructor, HasGetValueTypeHash)

void UBUS_GSEventCollection::Evt_InputActionPressMultiCast(const class FString& P1)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BUS_GSEventCollection", "Evt_InputActionPressMultiCast");

	Params::BUS_GSEventCollection_Evt_InputActionPressMultiCast Parms{};

	Parms.P1 = std::move(P1);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function b1-Managed.BUS_GSEventCollection.Evt_TriggerHitInPartMultiCast
// (Net, Native, Event, NetMulticast, Public)
// Parameters:
// int32                                   PartId                                                 (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// float                                   HitHP                                                  (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// int32                                   HitWeight                                              (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UBUS_GSEventCollection::Evt_TriggerHitInPartMultiCast(int32 PartId, float HitHP, int32 HitWeight)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BUS_GSEventCollection", "Evt_TriggerHitInPartMultiCast");

	Params::BUS_GSEventCollection_Evt_TriggerHitInPartMultiCast Parms{};

	Parms.PartId = PartId;
	Parms.HitHP = HitHP;
	Parms.HitWeight = HitWeight;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function b1-Managed.BUS_GSEventCollection.Evt_Camera_ClearCamLockServer
// (Net, Native, Event, Public, NetServer)

void UBUS_GSEventCollection::Evt_Camera_ClearCamLockServer()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BUS_GSEventCollection", "Evt_Camera_ClearCamLockServer");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function b1-Managed.BUS_GSEventCollection.Evt_UnitDead_Multicast_Invoke
// (Net, NetReliable, Native, Event, NetMulticast, Public)
// Parameters:
// class AActor*                           Attacker                                               (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// EDeadReason                             DeadReason                                             (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// int32                                   DmgID                                                  (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// int32                                   StiffLevel                                             (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// class UAnimMontage*                     BeAttackedAM                                           (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// struct FEffectInstReq                   EffectInstReq                                          (Parm, NoDestructor, HasGetValueTypeHash)
// uint8                                   bIsDotDmg                                              (Parm, NoDestructor, HasGetValueTypeHash)
// EAbnormalStateType                      AbnormalStateType                                      (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UBUS_GSEventCollection::Evt_UnitDead_Multicast_Invoke(class AActor* Attacker, EDeadReason DeadReason, int32 DmgID, int32 StiffLevel, class UAnimMontage* BeAttackedAM, const struct FEffectInstReq& EffectInstReq, uint8 bIsDotDmg, EAbnormalStateType AbnormalStateType)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BUS_GSEventCollection", "Evt_UnitDead_Multicast_Invoke");

	Params::BUS_GSEventCollection_Evt_UnitDead_Multicast_Invoke Parms{};

	Parms.Attacker = Attacker;
	Parms.DeadReason = DeadReason;
	Parms.DmgID = DmgID;
	Parms.StiffLevel = StiffLevel;
	Parms.BeAttackedAM = BeAttackedAM;
	Parms.EffectInstReq = std::move(EffectInstReq);
	Parms.bIsDotDmg = bIsDotDmg;
	Parms.AbnormalStateType = AbnormalStateType;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function b1-Managed.BUS_GSEventCollection.Evt_TriggerJumpSkillMultiCast
// (Net, NetReliable, Native, Event, NetMulticast, Public)
// Parameters:
// ESkillDirection                         StartJumpDir                                           (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// struct FVector2D                        CurrentInput                                           (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UBUS_GSEventCollection::Evt_TriggerJumpSkillMultiCast(ESkillDirection StartJumpDir, const struct FVector2D& CurrentInput)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BUS_GSEventCollection", "Evt_TriggerJumpSkillMultiCast");

	Params::BUS_GSEventCollection_Evt_TriggerJumpSkillMultiCast Parms{};

	Parms.StartJumpDir = StartJumpDir;
	Parms.CurrentInput = std::move(CurrentInput);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function b1-Managed.BUS_GSEventCollection.Evt_DropCollectionItemServer
// (Net, Native, Event, Public, NetServer)
// Parameters:
// class AActor*                           Player                                                 (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// int32                                   DropId                                                 (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// int32                                   DropLevel                                              (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UBUS_GSEventCollection::Evt_DropCollectionItemServer(class AActor* Player, int32 DropId, int32 DropLevel)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BUS_GSEventCollection", "Evt_DropCollectionItemServer");

	Params::BUS_GSEventCollection_Evt_DropCollectionItemServer Parms{};

	Parms.Player = Player;
	Parms.DropId = DropId;
	Parms.DropLevel = DropLevel;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function b1-Managed.BUS_GSEventCollection.Evt_BuffAdd_Multicast_Invoke
// (Net, NetReliable, Native, Event, NetMulticast, Public)
// Parameters:
// int32                                   BuffID                                                 (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// class AActor*                           Caster                                                 (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// class AActor*                           RootCaster                                             (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// float                                   Duration                                               (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// EBuffSourceType                         BuffSourceType                                         (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// uint8                                   bRecursed                                              (Parm, NoDestructor, HasGetValueTypeHash)
// struct FBattleAttrSnapShot              BattleAttrSnapShot                                     (Parm, NoDestructor, HasGetValueTypeHash)

void UBUS_GSEventCollection::Evt_BuffAdd_Multicast_Invoke(int32 BuffID, class AActor* Caster, class AActor* RootCaster, float Duration, EBuffSourceType BuffSourceType, uint8 bRecursed, const struct FBattleAttrSnapShot& BattleAttrSnapShot)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BUS_GSEventCollection", "Evt_BuffAdd_Multicast_Invoke");

	Params::BUS_GSEventCollection_Evt_BuffAdd_Multicast_Invoke Parms{};

	Parms.BuffID = BuffID;
	Parms.Caster = Caster;
	Parms.RootCaster = RootCaster;
	Parms.Duration = Duration;
	Parms.BuffSourceType = BuffSourceType;
	Parms.bRecursed = bRecursed;
	Parms.BattleAttrSnapShot = std::move(BattleAttrSnapShot);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function b1-Managed.BUS_GSEventCollection.BeginPlayInCS
// (Native, Event, Public, BlueprintEvent)

void UBUS_GSEventCollection::BeginPlayInCS()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BUS_GSEventCollection", "BeginPlayInCS");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function b1-Managed.BUS_GSEventCollection.Evt_ChargeSkillSuccessServer
// (Net, Native, Event, Public, NetServer)
// Parameters:
// int32                                   P1                                                     (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UBUS_GSEventCollection::Evt_ChargeSkillSuccessServer(int32 P1)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BUS_GSEventCollection", "Evt_ChargeSkillSuccessServer");

	Params::BUS_GSEventCollection_Evt_ChargeSkillSuccessServer Parms{};

	Parms.P1 = P1;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function b1-Managed.BUS_GSEventCollection.Evt_InputActionReleaseServer
// (Net, Native, Event, Public, NetServer)
// Parameters:
// class FString                           P1                                                     (Parm, ZeroConstructor, HasGetValueTypeHash)

void UBUS_GSEventCollection::Evt_InputActionReleaseServer(const class FString& P1)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BUS_GSEventCollection", "Evt_InputActionReleaseServer");

	Params::BUS_GSEventCollection_Evt_InputActionReleaseServer Parms{};

	Parms.P1 = std::move(P1);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function b1-Managed.BUS_GSEventCollection.Evt_UnitStatePredicMultiCast
// (Net, NetReliable, Native, Event, NetMulticast, Public)
// Parameters:
// EBGUUnitState                           UnitState                                              (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// uint8                                   NeedForceUpdate                                        (Parm, NoDestructor, HasGetValueTypeHash)
// float                                   Time                                                   (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UBUS_GSEventCollection::Evt_UnitStatePredicMultiCast(EBGUUnitState UnitState, uint8 NeedForceUpdate, float Time)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BUS_GSEventCollection", "Evt_UnitStatePredicMultiCast");

	Params::BUS_GSEventCollection_Evt_UnitStatePredicMultiCast Parms{};

	Parms.UnitState = UnitState;
	Parms.NeedForceUpdate = NeedForceUpdate;
	Parms.Time = Time;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function b1-Managed.BUS_GSEventCollection.Evt_StopSlotAnimationServer
// (Net, Native, Event, Public, NetServer)
// Parameters:
// float                                   P1                                                     (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UBUS_GSEventCollection::Evt_StopSlotAnimationServer(float P1)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BUS_GSEventCollection", "Evt_StopSlotAnimationServer");

	Params::BUS_GSEventCollection_Evt_StopSlotAnimationServer Parms{};

	Parms.P1 = P1;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function b1-Managed.BUS_GSEventCollection.Evt_SmartCastSkillTryServer
// (Net, NetReliable, Native, Event, Public, NetServer)
// Parameters:
// int32                                   ID                                                     (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// TArray<int32>                           RuleIDList                                             (Parm)
// EMontageBindReason                      Reason                                                 (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// ESkillDirection                         SkillDirection                                         (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// uint8                                   bNeedCheckSkillCanCast                                 (Parm, NoDestructor, HasGetValueTypeHash)
// int32                                   PredictionKeyId                                        (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// int32                                   ParentPredictionKeyId                                  (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UBUS_GSEventCollection::Evt_SmartCastSkillTryServer(int32 ID, const TArray<int32>& RuleIDList, EMontageBindReason Reason, ESkillDirection SkillDirection, uint8 bNeedCheckSkillCanCast, int32 PredictionKeyId, int32 ParentPredictionKeyId)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BUS_GSEventCollection", "Evt_SmartCastSkillTryServer");

	Params::BUS_GSEventCollection_Evt_SmartCastSkillTryServer Parms{};

	Parms.ID = ID;
	Parms.RuleIDList = std::move(RuleIDList);
	Parms.Reason = Reason;
	Parms.SkillDirection = SkillDirection;
	Parms.bNeedCheckSkillCanCast = bNeedCheckSkillCanCast;
	Parms.PredictionKeyId = PredictionKeyId;
	Parms.ParentPredictionKeyId = ParentPredictionKeyId;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function b1-Managed.BUS_GSEventCollection.Evt_TriggerPlayerRestServer
// (Net, Native, Event, Public, NetServer)

void UBUS_GSEventCollection::Evt_TriggerPlayerRestServer()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BUS_GSEventCollection", "Evt_TriggerPlayerRestServer");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function b1-Managed.BUS_GSEventCollection.Evt_RotateToTargetSvrServer
// (Net, Native, Event, Public, NetServer)
// Parameters:
// float                                   P1                                                     (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UBUS_GSEventCollection::Evt_RotateToTargetSvrServer(float P1)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BUS_GSEventCollection", "Evt_RotateToTargetSvrServer");

	Params::BUS_GSEventCollection_Evt_RotateToTargetSvrServer Parms{};

	Parms.P1 = P1;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function b1-Managed.BUS_GSEventCollection.Evt_NotifyGraphClientServer
// (Net, Native, Event, Public, NetServer)
// Parameters:
// class FString                           FinalGuid                                              (Parm, ZeroConstructor, HasGetValueTypeHash)
// struct FGameplayTag                     NotifyTag                                              (Parm, NoDestructor, HasGetValueTypeHash)

void UBUS_GSEventCollection::Evt_NotifyGraphClientServer(const class FString& FinalGuid, const struct FGameplayTag& NotifyTag)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BUS_GSEventCollection", "Evt_NotifyGraphClientServer");

	Params::BUS_GSEventCollection_Evt_NotifyGraphClientServer Parms{};

	Parms.FinalGuid = std::move(FinalGuid);
	Parms.NotifyTag = std::move(NotifyTag);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function b1-Managed.BUS_GSEventCollection.Evt_TriggerHitInPartServer
// (Net, Native, Event, Public, NetServer)
// Parameters:
// int32                                   PartId                                                 (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// float                                   HitHP                                                  (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// int32                                   HitWeight                                              (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UBUS_GSEventCollection::Evt_TriggerHitInPartServer(int32 PartId, float HitHP, int32 HitWeight)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BUS_GSEventCollection", "Evt_TriggerHitInPartServer");

	Params::BUS_GSEventCollection_Evt_TriggerHitInPartServer Parms{};

	Parms.PartId = PartId;
	Parms.HitHP = HitHP;
	Parms.HitWeight = HitWeight;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function b1-Managed.BUS_GSEventCollection.EndPlayInCS
// (Native, Event, Public, BlueprintEvent)
// Parameters:
// EEndPlayReason                          EndPlayReason                                          (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UBUS_GSEventCollection::EndPlayInCS(EEndPlayReason EndPlayReason)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BUS_GSEventCollection", "EndPlayInCS");

	Params::BUS_GSEventCollection_EndPlayInCS Parms{};

	Parms.EndPlayReason = EndPlayReason;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function b1-Managed.BUS_GSEventCollection.Evt_ExecuteCommandGMServer
// (Net, NetReliable, Native, Event, Public, NetServer)
// Parameters:
// TArray<class FString>                   P                                                      (Parm)

void UBUS_GSEventCollection::Evt_ExecuteCommandGMServer(const TArray<class FString>& P)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BUS_GSEventCollection", "Evt_ExecuteCommandGMServer");

	Params::BUS_GSEventCollection_Evt_ExecuteCommandGMServer Parms{};

	Parms.P = std::move(P);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function b1-Managed.BUS_GSEventCollection.Evt_TriggerJumpSkillServer
// (Net, NetReliable, Native, Event, Public, NetServer)
// Parameters:
// ESkillDirection                         StartJumpDir                                           (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// struct FVector2D                        CurrentInput                                           (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// int32                                   PredictionKeyId                                        (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// int32                                   ParentPredictionKeyId                                  (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UBUS_GSEventCollection::Evt_TriggerJumpSkillServer(ESkillDirection StartJumpDir, const struct FVector2D& CurrentInput, int32 PredictionKeyId, int32 ParentPredictionKeyId)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BUS_GSEventCollection", "Evt_TriggerJumpSkillServer");

	Params::BUS_GSEventCollection_Evt_TriggerJumpSkillServer Parms{};

	Parms.StartJumpDir = StartJumpDir;
	Parms.CurrentInput = std::move(CurrentInput);
	Parms.PredictionKeyId = PredictionKeyId;
	Parms.ParentPredictionKeyId = ParentPredictionKeyId;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function b1-Managed.BUS_GSEventCollection.Evt_ClearTargetInfo_Invoke
// (Net, NetReliable, Native, Event, Public, NetServer)

void UBUS_GSEventCollection::Evt_ClearTargetInfo_Invoke()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BUS_GSEventCollection", "Evt_ClearTargetInfo_Invoke");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function b1-Managed.BUS_GSEventCollection.Evt_InputActionPressServer
// (Net, Native, Event, Public, NetServer)
// Parameters:
// class FString                           P1                                                     (Parm, ZeroConstructor, HasGetValueTypeHash)

void UBUS_GSEventCollection::Evt_InputActionPressServer(const class FString& P1)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BUS_GSEventCollection", "Evt_InputActionPressServer");

	Params::BUS_GSEventCollection_Evt_InputActionPressServer Parms{};

	Parms.P1 = std::move(P1);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function b1-Managed.BUS_GSEventCollection.Evt_TeleportFinish_Invoke
// (Net, Native, Event, Public, NetServer)

void UBUS_GSEventCollection::Evt_TeleportFinish_Invoke()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BUS_GSEventCollection", "Evt_TeleportFinish_Invoke");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function b1-Managed.BUS_GSEventCollection.Evt_UnitStatePredicServer
// (Net, NetReliable, Native, Event, Public, NetServer)
// Parameters:
// EBGUUnitState                           UnitState                                              (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// uint8                                   NeedForceUpdate                                        (Parm, NoDestructor, HasGetValueTypeHash)
// float                                   Time                                                   (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// int32                                   PredictionKeyId                                        (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// int32                                   ParentPredictionKeyId                                  (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UBUS_GSEventCollection::Evt_UnitStatePredicServer(EBGUUnitState UnitState, uint8 NeedForceUpdate, float Time, int32 PredictionKeyId, int32 ParentPredictionKeyId)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BUS_GSEventCollection", "Evt_UnitStatePredicServer");

	Params::BUS_GSEventCollection_Evt_UnitStatePredicServer Parms{};

	Parms.UnitState = UnitState;
	Parms.NeedForceUpdate = NeedForceUpdate;
	Parms.Time = Time;
	Parms.PredictionKeyId = PredictionKeyId;
	Parms.ParentPredictionKeyId = ParentPredictionKeyId;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function b1-Managed.BUS_GSEventCollection.Evt_ClientRPCTest_Invoke
// (Net, Native, Event, Public, NetClient)
// Parameters:
// int32                                   P1                                                     (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// class AActor*                           P2                                                     (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UBUS_GSEventCollection::Evt_ClientRPCTest_Invoke(int32 P1, class AActor* P2)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BUS_GSEventCollection", "Evt_ClientRPCTest_Invoke");

	Params::BUS_GSEventCollection_Evt_ClientRPCTest_Invoke Parms{};

	Parms.P1 = P1;
	Parms.P2 = P2;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function b1-Managed.BUS_GSEventCollection.Evt_TestPredictMultiCast
// (Net, NetReliable, Native, Event, NetMulticast, Public)

void UBUS_GSEventCollection::Evt_TestPredictMultiCast()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BUS_GSEventCollection", "Evt_TestPredictMultiCast");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function b1-Managed.BUS_GSEventCollection.Evt_ServerRPCTest_Invoke
// (Net, Native, Event, Public, NetServer)
// Parameters:
// int32                                   P1                                                     (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// struct FVector                          P2                                                     (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UBUS_GSEventCollection::Evt_ServerRPCTest_Invoke(int32 P1, const struct FVector& P2)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BUS_GSEventCollection", "Evt_ServerRPCTest_Invoke");

	Params::BUS_GSEventCollection_Evt_ServerRPCTest_Invoke Parms{};

	Parms.P1 = P1;
	Parms.P2 = std::move(P2);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function b1-Managed.BUS_GSEventCollection.Evt_TeleportBegin_Invoke
// (Net, Native, Event, Public, NetServer)

void UBUS_GSEventCollection::Evt_TeleportBegin_Invoke()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BUS_GSEventCollection", "Evt_TeleportBegin_Invoke");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function b1-Managed.BUS_GSEventCollection.Evt_TestPredictServer
// (Net, NetReliable, Native, Event, Public, NetServer)
// Parameters:
// int32                                   PredictionKeyId                                        (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// int32                                   ParentPredictionKeyId                                  (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UBUS_GSEventCollection::Evt_TestPredictServer(int32 PredictionKeyId, int32 ParentPredictionKeyId)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BUS_GSEventCollection", "Evt_TestPredictServer");

	Params::BUS_GSEventCollection_Evt_TestPredictServer Parms{};

	Parms.PredictionKeyId = PredictionKeyId;
	Parms.ParentPredictionKeyId = ParentPredictionKeyId;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function b1-Managed.BED_MovieNode_SetStreamingManagerViewSource.GetNodeDescriptionInCS
// (Native, Event, Public, HasOutParams, BlueprintEvent, Const)
// Parameters:
// class FString                           ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash)

class FString UBED_MovieNode_SetStreamingManagerViewSource::GetNodeDescriptionInCS() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BED_MovieNode_SetStreamingManagerViewSource", "GetNodeDescriptionInCS");

	Params::BED_MovieNode_SetStreamingManagerViewSource_GetNodeDescriptionInCS Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function b1-Managed.BUAbnormalDispMuseum.ReceiveTick
// (Native, Event, Public, BlueprintEvent)
// Parameters:
// float                                   DeltaSeconds                                           (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ABUAbnormalDispMuseum::ReceiveTick(float DeltaSeconds)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BUAbnormalDispMuseum", "ReceiveTick");

	Params::BUAbnormalDispMuseum_ReceiveTick Parms{};

	Parms.DeltaSeconds = DeltaSeconds;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function b1-Managed.BUAbnormalDispMuseum.GenSKMuseumData
// (Native, Public, BlueprintCallable)

void ABUAbnormalDispMuseum::GenSKMuseumData()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BUAbnormalDispMuseum", "GenSKMuseumData");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function b1-Managed.BUAbnormalDispMuseum.UpdateData
// (Native, Public, BlueprintCallable)

void ABUAbnormalDispMuseum::UpdateData()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BUAbnormalDispMuseum", "UpdateData");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function b1-Managed.BUAbnormalDispMuseum.SpawnGrid
// (Native, Public, BlueprintCallable)

void ABUAbnormalDispMuseum::SpawnGrid()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BUAbnormalDispMuseum", "SpawnGrid");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function b1-Managed.BUAbnormalDispMuseum.Preview
// (Native, Public, BlueprintCallable)

void ABUAbnormalDispMuseum::Preview()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BUAbnormalDispMuseum", "Preview");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function b1-Managed.BGULightFlickerComp.TickComponentInCS
// (Native, Event, Public, BlueprintEvent)
// Parameters:
// float                                   DeltaTime                                              (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UBGULightFlickerComp::TickComponentInCS(float DeltaTime)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BGULightFlickerComp", "TickComponentInCS");

	Params::BGULightFlickerComp_TickComponentInCS Parms{};

	Parms.DeltaTime = DeltaTime;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function b1-Managed.BGULightFlickerComp.ReceiveBeginPlay
// (Native, Event, Public, BlueprintEvent)

void UBGULightFlickerComp::ReceiveBeginPlay()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BGULightFlickerComp", "ReceiveBeginPlay");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function b1-Managed.BGULightFlickerComp.OverrideProperty
// (Native, Public, BlueprintCallable)
// Parameters:
// float                                   FlickRange_0                                           (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// float                                   FlickTimeRandomMin_0                                   (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// float                                   FlickTimeRandomMax_0                                   (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// float                                   RandomRemapPower_0                                     (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// float                                   DestroyTime_0                                          (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// struct FVector                          PosFlickRange_0                                        (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UBGULightFlickerComp::OverrideProperty(float FlickRange_0, float FlickTimeRandomMin_0, float FlickTimeRandomMax_0, float RandomRemapPower_0, float DestroyTime_0, const struct FVector& PosFlickRange_0)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BGULightFlickerComp", "OverrideProperty");

	Params::BGULightFlickerComp_OverrideProperty Parms{};

	Parms.FlickRange_0 = FlickRange_0;
	Parms.FlickTimeRandomMin_0 = FlickTimeRandomMin_0;
	Parms.FlickTimeRandomMax_0 = FlickTimeRandomMax_0;
	Parms.RandomRemapPower_0 = RandomRemapPower_0;
	Parms.DestroyTime_0 = DestroyTime_0;
	Parms.PosFlickRange_0 = std::move(PosFlickRange_0);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function b1-Managed.BGULightFlickerForSequenceComp.TickComponentInCS
// (Native, Event, Public, BlueprintEvent)
// Parameters:
// float                                   DeltaTime                                              (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UBGULightFlickerForSequenceComp::TickComponentInCS(float DeltaTime)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BGULightFlickerForSequenceComp", "TickComponentInCS");

	Params::BGULightFlickerForSequenceComp_TickComponentInCS Parms{};

	Parms.DeltaTime = DeltaTime;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function b1-Managed.BGULightFlickerForSequenceComp.ReceiveBeginPlay
// (Native, Event, Public, BlueprintEvent)

void UBGULightFlickerForSequenceComp::ReceiveBeginPlay()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BGULightFlickerForSequenceComp", "ReceiveBeginPlay");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function b1-Managed.BGUCharacterCS.PreDestroyFromReplicationCS
// (Native, Event, Public, Protected, BlueprintEvent)

void ABGUCharacterCS::PreDestroyFromReplicationCS()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BGUCharacterCS", "PreDestroyFromReplicationCS");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function b1-Managed.BGUCharacterCS.PostInitializeComponentsCS
// (Native, Event, Public, Protected, BlueprintEvent)

void ABGUCharacterCS::PostInitializeComponentsCS()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BGUCharacterCS", "PostInitializeComponentsCS");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function b1-Managed.BGUCharacterCS.OnMovementModeChangedCS
// (Native, Event, Public, Protected, BlueprintEvent)
// Parameters:
// EMovementMode                           PrevMovementMode                                       (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// EMovementMode                           NewMovementMode                                        (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// uint8                                   PrevCustomMode                                         (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// uint8                                   NewCustomMode                                          (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ABGUCharacterCS::OnMovementModeChangedCS(EMovementMode PrevMovementMode, EMovementMode NewMovementMode, uint8 PrevCustomMode, uint8 NewCustomMode)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BGUCharacterCS", "OnMovementModeChangedCS");

	Params::BGUCharacterCS_OnMovementModeChangedCS Parms{};

	Parms.PrevMovementMode = PrevMovementMode;
	Parms.NewMovementMode = NewMovementMode;
	Parms.PrevCustomMode = PrevCustomMode;
	Parms.NewCustomMode = NewCustomMode;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function b1-Managed.BGUCharacterCS.GetGSAuthorityPlayerCS
// (Native, Event, Public, HasOutParams, BlueprintEvent)
// Parameters:
// class APlayerController*                ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

class APlayerController* ABGUCharacterCS::GetGSAuthorityPlayerCS()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BGUCharacterCS", "GetGSAuthorityPlayerCS");

	Params::BGUCharacterCS_GetGSAuthorityPlayerCS Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function b1-Managed.BGUCharacterCS.PostNetReceiveRoleCS
// (Native, Event, Public, BlueprintEvent)

void ABGUCharacterCS::PostNetReceiveRoleCS()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BGUCharacterCS", "PostNetReceiveRoleCS");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function b1-Managed.BGUCharacterCS.IsPlayerCharacterCS
// (Native, Event, Public, HasOutParams, BlueprintEvent)
// Parameters:
// uint8                                   ReturnValue                                            (Parm, OutParm, ReturnParm, NoDestructor, HasGetValueTypeHash)

uint8 ABGUCharacterCS::IsPlayerCharacterCS()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BGUCharacterCS", "IsPlayerCharacterCS");

	Params::BGUCharacterCS_IsPlayerCharacterCS Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function b1-Managed.BGUCharacterCS.OnActorChannelOpen
// (Native, Event, Public, Protected, BlueprintEvent)
// Parameters:
// class UNetConnection*                   Connection                                             (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ABGUCharacterCS::OnActorChannelOpen(class UNetConnection* Connection)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BGUCharacterCS", "OnActorChannelOpen");

	Params::BGUCharacterCS_OnActorChannelOpen Parms{};

	Parms.Connection = Connection;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function b1-Managed.BGUCharacterCS.ReceiveDestroyed
// (Native, Event, Public, BlueprintEvent)

void ABGUCharacterCS::ReceiveDestroyed()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BGUCharacterCS", "ReceiveDestroyed");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function b1-Managed.BGUCharacterCS.ReceiveBeginPlay
// (Native, Event, Public, Protected, BlueprintEvent)

void ABGUCharacterCS::ReceiveBeginPlay()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BGUCharacterCS", "ReceiveBeginPlay");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function b1-Managed.BGUCharacterCS.ReceiveEndPlay
// (Native, Event, Public, Protected, BlueprintEvent)
// Parameters:
// EEndPlayReason                          EndPlayReason                                          (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ABGUCharacterCS::ReceiveEndPlay(EEndPlayReason EndPlayReason)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BGUCharacterCS", "ReceiveEndPlay");

	Params::BGUCharacterCS_ReceiveEndPlay Parms{};

	Parms.EndPlayReason = EndPlayReason;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function b1-Managed.BGUCharacterCS.GetActorGuidCS
// (Native, Event, Public, Protected, HasOutParams, BlueprintEvent, Const)
// Parameters:
// class FString                           OutActorGuid                                           (Parm, OutParm, ZeroConstructor, HasGetValueTypeHash)
// uint8                                   ReturnValue                                            (Parm, OutParm, ReturnParm, NoDestructor, HasGetValueTypeHash)

uint8 ABGUCharacterCS::GetActorGuidCS(class FString* OutActorGuid) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BGUCharacterCS", "GetActorGuidCS");

	Params::BGUCharacterCS_GetActorGuidCS Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	if (OutActorGuid != nullptr)
		*OutActorGuid = std::move(Parms.OutActorGuid);

	return Parms.ReturnValue;
}


// Function b1-Managed.BED_MovieNode_Transformation.GetNodeDescriptionInCS
// (Native, Event, Public, HasOutParams, BlueprintEvent, Const)
// Parameters:
// class FString                           ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash)

class FString UBED_MovieNode_Transformation::GetNodeDescriptionInCS() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BED_MovieNode_Transformation", "GetNodeDescriptionInCS");

	Params::BED_MovieNode_Transformation_GetNodeDescriptionInCS Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function b1-Managed.BED_TaskNode.IsSupportViewType
// (Native, Event, Public, HasOutParams, BlueprintEvent, Const)
// Parameters:
// ECalliopeViewType                       InViewType                                             (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// uint8                                   ReturnValue                                            (Parm, OutParm, ReturnParm, NoDestructor, HasGetValueTypeHash)

uint8 UBED_TaskNode::IsSupportViewType(const ECalliopeViewType& InViewType) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BED_TaskNode", "IsSupportViewType");

	Params::BED_TaskNode_IsSupportViewType Parms{};

	Parms.InViewType = InViewType;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function b1-Managed.BED_FSMNode_GI_Global_WXLogin.PostPropertyChanged
// (Native, Event, Public, BlueprintEvent)
// Parameters:
// class FString                           MemberName                                             (Parm, ZeroConstructor, HasGetValueTypeHash)
// class FString                           PropertyName                                           (Parm, ZeroConstructor, HasGetValueTypeHash)

void UBED_FSMNode_GI_Global_WXLogin::PostPropertyChanged(const class FString& MemberName, const class FString& PropertyName)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BED_FSMNode_GI_Global_WXLogin", "PostPropertyChanged");

	Params::BED_FSMNode_GI_Global_WXLogin_PostPropertyChanged Parms{};

	Parms.MemberName = std::move(MemberName);
	Parms.PropertyName = std::move(PropertyName);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function b1-Managed.BED_FSMNode_GI_Global_WXLogin.GetNodeDescriptionInCS
// (Native, Event, Public, HasOutParams, BlueprintEvent, Const)
// Parameters:
// class FString                           ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash)

class FString UBED_FSMNode_GI_Global_WXLogin::GetNodeDescriptionInCS() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BED_FSMNode_GI_Global_WXLogin", "GetNodeDescriptionInCS");

	Params::BED_FSMNode_GI_Global_WXLogin_GetNodeDescriptionInCS Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function b1-Managed.BED_FSMNode_GI_Global_InBenchMark.PostPropertyChanged
// (Native, Event, Public, BlueprintEvent)
// Parameters:
// class FString                           MemberName                                             (Parm, ZeroConstructor, HasGetValueTypeHash)
// class FString                           PropertyName                                           (Parm, ZeroConstructor, HasGetValueTypeHash)

void UBED_FSMNode_GI_Global_InBenchMark::PostPropertyChanged(const class FString& MemberName, const class FString& PropertyName)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BED_FSMNode_GI_Global_InBenchMark", "PostPropertyChanged");

	Params::BED_FSMNode_GI_Global_InBenchMark_PostPropertyChanged Parms{};

	Parms.MemberName = std::move(MemberName);
	Parms.PropertyName = std::move(PropertyName);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function b1-Managed.BED_FSMNode_GI_Global_InBenchMark.GetNodeDescriptionInCS
// (Native, Event, Public, HasOutParams, BlueprintEvent, Const)
// Parameters:
// class FString                           ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash)

class FString UBED_FSMNode_GI_Global_InBenchMark::GetNodeDescriptionInCS() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BED_FSMNode_GI_Global_InBenchMark", "GetNodeDescriptionInCS");

	Params::BED_FSMNode_GI_Global_InBenchMark_GetNodeDescriptionInCS Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function b1-Managed.BGW_OnlineAchievement.OnAchievementsWrittenCompleteCS
// (Native, Event, Public, Protected, BlueprintEvent)
// Parameters:
// uint8                                   bWasSuccessful                                         (Parm, NoDestructor, HasGetValueTypeHash)

void UBGW_OnlineAchievement::OnAchievementsWrittenCompleteCS(uint8 bWasSuccessful)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BGW_OnlineAchievement", "OnAchievementsWrittenCompleteCS");

	Params::BGW_OnlineAchievement_OnAchievementsWrittenCompleteCS Parms{};

	Parms.bWasSuccessful = bWasSuccessful;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function b1-Managed.BGW_OnlineAchievement.OnQueryAchievementsCompleteCS
// (Native, Event, Public, Protected, BlueprintEvent)
// Parameters:
// uint8                                   bWasSuccessful                                         (Parm, NoDestructor, HasGetValueTypeHash)

void UBGW_OnlineAchievement::OnQueryAchievementsCompleteCS(uint8 bWasSuccessful)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BGW_OnlineAchievement", "OnQueryAchievementsCompleteCS");

	Params::BGW_OnlineAchievement_OnQueryAchievementsCompleteCS Parms{};

	Parms.bWasSuccessful = bWasSuccessful;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function b1-Managed.BGW_OnlineAchievement.OnStatUpdatedCompleteCS
// (Native, Event, Public, Protected, BlueprintEvent)
// Parameters:
// uint8                                   bWasSuccessful                                         (Parm, NoDestructor, HasGetValueTypeHash)

void UBGW_OnlineAchievement::OnStatUpdatedCompleteCS(uint8 bWasSuccessful)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BGW_OnlineAchievement", "OnStatUpdatedCompleteCS");

	Params::BGW_OnlineAchievement_OnStatUpdatedCompleteCS Parms{};

	Parms.bWasSuccessful = bWasSuccessful;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function b1-Managed.BANS_GSToNextSectionWhenLand.GSNotifyBeginCS
// (Native, Event, Public, Protected, BlueprintEvent, Const)
// Parameters:
// struct FUStGSNotifyParam                NotifyParam                                            (Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
// float                                   TotalDuration                                          (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UBANS_GSToNextSectionWhenLand::GSNotifyBeginCS(const struct FUStGSNotifyParam& NotifyParam, float TotalDuration) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BANS_GSToNextSectionWhenLand", "GSNotifyBeginCS");

	Params::BANS_GSToNextSectionWhenLand_GSNotifyBeginCS Parms{};

	Parms.NotifyParam = std::move(NotifyParam);
	Parms.TotalDuration = TotalDuration;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function b1-Managed.BANS_GSToNextSectionWhenLand.GSNotifyTickCS
// (Native, Event, Public, Protected, BlueprintEvent, Const)
// Parameters:
// struct FUStGSNotifyParam                NotifyParam                                            (Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
// float                                   FrameDeltaTime                                         (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UBANS_GSToNextSectionWhenLand::GSNotifyTickCS(const struct FUStGSNotifyParam& NotifyParam, float FrameDeltaTime) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BANS_GSToNextSectionWhenLand", "GSNotifyTickCS");

	Params::BANS_GSToNextSectionWhenLand_GSNotifyTickCS Parms{};

	Parms.NotifyParam = std::move(NotifyParam);
	Parms.FrameDeltaTime = FrameDeltaTime;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function b1-Managed.BANS_GSToNextSectionWhenLand.GSNotifyEndCS
// (Native, Event, Public, Protected, BlueprintEvent, Const)
// Parameters:
// struct FUStGSNotifyParam                NotifyParam                                            (Parm, ZeroConstructor, IsPlainOldData, NoDestructor)

void UBANS_GSToNextSectionWhenLand::GSNotifyEndCS(const struct FUStGSNotifyParam& NotifyParam) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BANS_GSToNextSectionWhenLand", "GSNotifyEndCS");

	Params::BANS_GSToNextSectionWhenLand_GSNotifyEndCS Parms{};

	Parms.NotifyParam = std::move(NotifyParam);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function b1-Managed.BUS_MFNegativeOverlapComp.OverlapBegin
// (Native, Public, Private)
// Parameters:
// class UPrimitiveComponent*              OverlappedComponent                                    (ExportObject, Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// class AActor*                           OtherActor                                             (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// class UPrimitiveComponent*              OtherComponent                                         (ExportObject, Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UBUS_MFNegativeOverlapComp::OverlapBegin(class UPrimitiveComponent* OverlappedComponent, class AActor* OtherActor, class UPrimitiveComponent* OtherComponent)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BUS_MFNegativeOverlapComp", "OverlapBegin");

	Params::BUS_MFNegativeOverlapComp_OverlapBegin Parms{};

	Parms.OverlappedComponent = OverlappedComponent;
	Parms.OtherActor = OtherActor;
	Parms.OtherComponent = OtherComponent;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function b1-Managed.BUS_MFNegativeOverlapComp.OverlapEnd
// (Native, Public, Private)
// Parameters:
// class UPrimitiveComponent*              OverlappedComponent                                    (ExportObject, Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// class AActor*                           OtherActor                                             (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// class UPrimitiveComponent*              OtherComponent                                         (ExportObject, Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UBUS_MFNegativeOverlapComp::OverlapEnd(class UPrimitiveComponent* OverlappedComponent, class AActor* OtherActor, class UPrimitiveComponent* OtherComponent)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BUS_MFNegativeOverlapComp", "OverlapEnd");

	Params::BUS_MFNegativeOverlapComp_OverlapEnd Parms{};

	Parms.OverlappedComponent = OverlappedComponent;
	Parms.OtherActor = OtherActor;
	Parms.OtherComponent = OtherComponent;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function b1-Managed.BED_FSMNode_GI_Loading_CacheArchiveDataForClient.PostPropertyChanged
// (Native, Event, Public, BlueprintEvent)
// Parameters:
// class FString                           MemberName                                             (Parm, ZeroConstructor, HasGetValueTypeHash)
// class FString                           PropertyName                                           (Parm, ZeroConstructor, HasGetValueTypeHash)

void UBED_FSMNode_GI_Loading_CacheArchiveDataForClient::PostPropertyChanged(const class FString& MemberName, const class FString& PropertyName)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BED_FSMNode_GI_Loading_CacheArchiveDataForClient", "PostPropertyChanged");

	Params::BED_FSMNode_GI_Loading_CacheArchiveDataForClient_PostPropertyChanged Parms{};

	Parms.MemberName = std::move(MemberName);
	Parms.PropertyName = std::move(PropertyName);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function b1-Managed.BED_FSMNode_GI_Loading_CacheArchiveDataForClient.GetNodeDescriptionInCS
// (Native, Event, Public, HasOutParams, BlueprintEvent, Const)
// Parameters:
// class FString                           ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash)

class FString UBED_FSMNode_GI_Loading_CacheArchiveDataForClient::GetNodeDescriptionInCS() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BED_FSMNode_GI_Loading_CacheArchiveDataForClient", "GetNodeDescriptionInCS");

	Params::BED_FSMNode_GI_Loading_CacheArchiveDataForClient_GetNodeDescriptionInCS Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function b1-Managed.BED_FSMNode_Condition_GI_Loading_TravelUrlIsListen.GetNodeDescriptionInCS
// (Native, Event, Public, HasOutParams, BlueprintEvent, Const)
// Parameters:
// class FString                           ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash)

class FString UBED_FSMNode_Condition_GI_Loading_TravelUrlIsListen::GetNodeDescriptionInCS() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BED_FSMNode_Condition_GI_Loading_TravelUrlIsListen", "GetNodeDescriptionInCS");

	Params::BED_FSMNode_Condition_GI_Loading_TravelUrlIsListen_GetNodeDescriptionInCS Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function b1-Managed.BGULandscapeReaderActor.CacheLandscapeData
// (Native, Public, BlueprintCallable)

void ABGULandscapeReaderActor::CacheLandscapeData()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BGULandscapeReaderActor", "CacheLandscapeData");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function b1-Managed.BED_FSMNode_GI_Loading_CheckGSSdkUserConfig.PostPropertyChanged
// (Native, Event, Public, BlueprintEvent)
// Parameters:
// class FString                           MemberName                                             (Parm, ZeroConstructor, HasGetValueTypeHash)
// class FString                           PropertyName                                           (Parm, ZeroConstructor, HasGetValueTypeHash)

void UBED_FSMNode_GI_Loading_CheckGSSdkUserConfig::PostPropertyChanged(const class FString& MemberName, const class FString& PropertyName)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BED_FSMNode_GI_Loading_CheckGSSdkUserConfig", "PostPropertyChanged");

	Params::BED_FSMNode_GI_Loading_CheckGSSdkUserConfig_PostPropertyChanged Parms{};

	Parms.MemberName = std::move(MemberName);
	Parms.PropertyName = std::move(PropertyName);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function b1-Managed.BED_FSMNode_GI_Loading_CheckGSSdkUserConfig.GetNodeDescriptionInCS
// (Native, Event, Public, HasOutParams, BlueprintEvent, Const)
// Parameters:
// class FString                           ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash)

class FString UBED_FSMNode_GI_Loading_CheckGSSdkUserConfig::GetNodeDescriptionInCS() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BED_FSMNode_GI_Loading_CheckGSSdkUserConfig", "GetNodeDescriptionInCS");

	Params::BED_FSMNode_GI_Loading_CheckGSSdkUserConfig_GetNodeDescriptionInCS Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function b1-Managed.BED_FSMNode_SubGraph.PostPropertyChanged
// (Native, Event, Public, BlueprintEvent)
// Parameters:
// class FString                           MemberName                                             (Parm, ZeroConstructor, HasGetValueTypeHash)
// class FString                           PropertyName                                           (Parm, ZeroConstructor, HasGetValueTypeHash)

void UBED_FSMNode_SubGraph::PostPropertyChanged(const class FString& MemberName, const class FString& PropertyName)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BED_FSMNode_SubGraph", "PostPropertyChanged");

	Params::BED_FSMNode_SubGraph_PostPropertyChanged Parms{};

	Parms.MemberName = std::move(MemberName);
	Parms.PropertyName = std::move(PropertyName);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function b1-Managed.BED_FSMNode_SubGraph.PrePropertyChanged
// (Native, Event, Public, BlueprintEvent)
// Parameters:
// class FString                           PropertyName                                           (Parm, ZeroConstructor, HasGetValueTypeHash)

void UBED_FSMNode_SubGraph::PrePropertyChanged(const class FString& PropertyName)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BED_FSMNode_SubGraph", "PrePropertyChanged");

	Params::BED_FSMNode_SubGraph_PrePropertyChanged Parms{};

	Parms.PropertyName = std::move(PropertyName);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function b1-Managed.BED_FSMNode_SubGraph.GetAssetToEditInCS
// (Native, Event, Public, HasOutParams, BlueprintEvent)
// Parameters:
// class UObject*                          ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

class UObject* UBED_FSMNode_SubGraph::GetAssetToEditInCS()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BED_FSMNode_SubGraph", "GetAssetToEditInCS");

	Params::BED_FSMNode_SubGraph_GetAssetToEditInCS Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function b1-Managed.BED_FSMNode_SubGraph.GetNodeDescriptionInCS
// (Native, Event, Public, HasOutParams, BlueprintEvent, Const)
// Parameters:
// class FString                           ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash)

class FString UBED_FSMNode_SubGraph::GetNodeDescriptionInCS() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BED_FSMNode_SubGraph", "GetNodeDescriptionInCS");

	Params::BED_FSMNode_SubGraph_GetNodeDescriptionInCS Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function b1-Managed.BED_FSMNode_GI_Global_SubG_GI_Loading_BackToStandAlone.OnCreateGraphNodeInCS
// (Native, Event, Public, BlueprintEvent)

void UBED_FSMNode_GI_Global_SubG_GI_Loading_BackToStandAlone::OnCreateGraphNodeInCS()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BED_FSMNode_GI_Global_SubG_GI_Loading_BackToStandAlone", "OnCreateGraphNodeInCS");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function b1-Managed.BED_FSMNode_GI_Global_SubG_GI_Loading_BackToStandAlone.GetNodeDescriptionInCS
// (Native, Event, Public, HasOutParams, BlueprintEvent, Const)
// Parameters:
// class FString                           ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash)

class FString UBED_FSMNode_GI_Global_SubG_GI_Loading_BackToStandAlone::GetNodeDescriptionInCS() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BED_FSMNode_GI_Global_SubG_GI_Loading_BackToStandAlone", "GetNodeDescriptionInCS");

	Params::BED_FSMNode_GI_Global_SubG_GI_Loading_BackToStandAlone_GetNodeDescriptionInCS Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function b1-Managed.BUS_ItemInteractAreaSystem_CPU.OnActorLeave
// (Native, Public, Private)
// Parameters:
// class UPrimitiveComponent*              OverlappedComponent                                    (ExportObject, Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// class AActor*                           OtherActor                                             (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// class UPrimitiveComponent*              OtherComp                                              (ExportObject, Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// int32                                   OtherBodyIndex                                         (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UBUS_ItemInteractAreaSystem_CPU::OnActorLeave(class UPrimitiveComponent* OverlappedComponent, class AActor* OtherActor, class UPrimitiveComponent* OtherComp, int32 OtherBodyIndex)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BUS_ItemInteractAreaSystem_CPU", "OnActorLeave");

	Params::BUS_ItemInteractAreaSystem_CPU_OnActorLeave Parms{};

	Parms.OverlappedComponent = OverlappedComponent;
	Parms.OtherActor = OtherActor;
	Parms.OtherComp = OtherComp;
	Parms.OtherBodyIndex = OtherBodyIndex;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function b1-Managed.BUS_ItemInteractAreaSystem_CPU.OnActorEnter
// (Native, Public, Private)
// Parameters:
// class AActor*                           OverlappedActor                                        (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// class AActor*                           OtherActor                                             (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UBUS_ItemInteractAreaSystem_CPU::OnActorEnter(class AActor* OverlappedActor, class AActor* OtherActor)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BUS_ItemInteractAreaSystem_CPU", "OnActorEnter");

	Params::BUS_ItemInteractAreaSystem_CPU_OnActorEnter Parms{};

	Parms.OverlappedActor = OverlappedActor;
	Parms.OtherActor = OtherActor;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function b1-Managed.BANS_GSChangeMIParam.GSNotifyBeginCS
// (Native, Event, Public, Protected, BlueprintEvent, Const)
// Parameters:
// struct FUStGSNotifyParam                NotifyParam                                            (Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
// float                                   TotalDuration                                          (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UBANS_GSChangeMIParam::GSNotifyBeginCS(const struct FUStGSNotifyParam& NotifyParam, float TotalDuration) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BANS_GSChangeMIParam", "GSNotifyBeginCS");

	Params::BANS_GSChangeMIParam_GSNotifyBeginCS Parms{};

	Parms.NotifyParam = std::move(NotifyParam);
	Parms.TotalDuration = TotalDuration;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function b1-Managed.BANS_GSChangeMIParam.GSNotifyTickCS
// (Native, Event, Public, Protected, BlueprintEvent, Const)
// Parameters:
// struct FUStGSNotifyParam                NotifyParam                                            (Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
// float                                   FrameDeltaTime                                         (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UBANS_GSChangeMIParam::GSNotifyTickCS(const struct FUStGSNotifyParam& NotifyParam, float FrameDeltaTime) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BANS_GSChangeMIParam", "GSNotifyTickCS");

	Params::BANS_GSChangeMIParam_GSNotifyTickCS Parms{};

	Parms.NotifyParam = std::move(NotifyParam);
	Parms.FrameDeltaTime = FrameDeltaTime;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function b1-Managed.BANS_GSChangeMIParam.GSNotifyEndCS
// (Native, Event, Public, Protected, BlueprintEvent, Const)
// Parameters:
// struct FUStGSNotifyParam                NotifyParam                                            (Parm, ZeroConstructor, IsPlainOldData, NoDestructor)

void UBANS_GSChangeMIParam::GSNotifyEndCS(const struct FUStGSNotifyParam& NotifyParam) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BANS_GSChangeMIParam", "GSNotifyEndCS");

	Params::BANS_GSChangeMIParam_GSNotifyEndCS Parms{};

	Parms.NotifyParam = std::move(NotifyParam);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function b1-Managed.BED_FSMNode_GI_Loading_ECSWorldReset.PostPropertyChanged
// (Native, Event, Public, BlueprintEvent)
// Parameters:
// class FString                           MemberName                                             (Parm, ZeroConstructor, HasGetValueTypeHash)
// class FString                           PropertyName                                           (Parm, ZeroConstructor, HasGetValueTypeHash)

void UBED_FSMNode_GI_Loading_ECSWorldReset::PostPropertyChanged(const class FString& MemberName, const class FString& PropertyName)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BED_FSMNode_GI_Loading_ECSWorldReset", "PostPropertyChanged");

	Params::BED_FSMNode_GI_Loading_ECSWorldReset_PostPropertyChanged Parms{};

	Parms.MemberName = std::move(MemberName);
	Parms.PropertyName = std::move(PropertyName);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function b1-Managed.BED_FSMNode_GI_Loading_ECSWorldReset.GetNodeDescriptionInCS
// (Native, Event, Public, HasOutParams, BlueprintEvent, Const)
// Parameters:
// class FString                           ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash)

class FString UBED_FSMNode_GI_Loading_ECSWorldReset::GetNodeDescriptionInCS() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BED_FSMNode_GI_Loading_ECSWorldReset", "GetNodeDescriptionInCS");

	Params::BED_FSMNode_GI_Loading_ECSWorldReset_GetNodeDescriptionInCS Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function b1-Managed.FunctionBinder_AudioSystem.RoomSetSwitch
// (Native, Public, Private)
// Parameters:
// class FString                           SwitchGroup                                            (Parm, ZeroConstructor, HasGetValueTypeHash)
// class FString                           SwitchState                                            (Parm, ZeroConstructor, HasGetValueTypeHash)

void UFunctionBinder_AudioSystem::RoomSetSwitch(const class FString& SwitchGroup, const class FString& SwitchState)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("FunctionBinder_AudioSystem", "RoomSetSwitch");

	Params::FunctionBinder_AudioSystem_RoomSetSwitch Parms{};

	Parms.SwitchGroup = std::move(SwitchGroup);
	Parms.SwitchState = std::move(SwitchState);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function b1-Managed.BGUNeutralAnimalSpawnArea.ReceiveDestroyed
// (Native, Event, Public, BlueprintEvent)

void ABGUNeutralAnimalSpawnArea::ReceiveDestroyed()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BGUNeutralAnimalSpawnArea", "ReceiveDestroyed");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function b1-Managed.BED_FSMNode_GI_Global_InBattleOnLineLS.PostPropertyChanged
// (Native, Event, Public, BlueprintEvent)
// Parameters:
// class FString                           MemberName                                             (Parm, ZeroConstructor, HasGetValueTypeHash)
// class FString                           PropertyName                                           (Parm, ZeroConstructor, HasGetValueTypeHash)

void UBED_FSMNode_GI_Global_InBattleOnLineLS::PostPropertyChanged(const class FString& MemberName, const class FString& PropertyName)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BED_FSMNode_GI_Global_InBattleOnLineLS", "PostPropertyChanged");

	Params::BED_FSMNode_GI_Global_InBattleOnLineLS_PostPropertyChanged Parms{};

	Parms.MemberName = std::move(MemberName);
	Parms.PropertyName = std::move(PropertyName);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function b1-Managed.BED_FSMNode_GI_Global_InBattleOnLineLS.GetNodeDescriptionInCS
// (Native, Event, Public, HasOutParams, BlueprintEvent, Const)
// Parameters:
// class FString                           ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash)

class FString UBED_FSMNode_GI_Global_InBattleOnLineLS::GetNodeDescriptionInCS() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BED_FSMNode_GI_Global_InBattleOnLineLS", "GetNodeDescriptionInCS");

	Params::BED_FSMNode_GI_Global_InBattleOnLineLS_GetNodeDescriptionInCS Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function b1-Managed.BANS_GSTouchItem.GSNotifyBeginCS
// (Native, Event, Public, Protected, BlueprintEvent, Const)
// Parameters:
// struct FUStGSNotifyParam                NotifyParam                                            (Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
// float                                   TotalDuration                                          (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UBANS_GSTouchItem::GSNotifyBeginCS(const struct FUStGSNotifyParam& NotifyParam, float TotalDuration) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BANS_GSTouchItem", "GSNotifyBeginCS");

	Params::BANS_GSTouchItem_GSNotifyBeginCS Parms{};

	Parms.NotifyParam = std::move(NotifyParam);
	Parms.TotalDuration = TotalDuration;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function b1-Managed.BANS_GSTouchItem.GSNotifyTickCS
// (Native, Event, Public, Protected, BlueprintEvent, Const)
// Parameters:
// struct FUStGSNotifyParam                NotifyParam                                            (Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
// float                                   FrameDeltaTime                                         (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UBANS_GSTouchItem::GSNotifyTickCS(const struct FUStGSNotifyParam& NotifyParam, float FrameDeltaTime) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BANS_GSTouchItem", "GSNotifyTickCS");

	Params::BANS_GSTouchItem_GSNotifyTickCS Parms{};

	Parms.NotifyParam = std::move(NotifyParam);
	Parms.FrameDeltaTime = FrameDeltaTime;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function b1-Managed.BANS_GSTouchItem.GSNotifyEndCS
// (Native, Event, Public, Protected, BlueprintEvent, Const)
// Parameters:
// struct FUStGSNotifyParam                NotifyParam                                            (Parm, ZeroConstructor, IsPlainOldData, NoDestructor)

void UBANS_GSTouchItem::GSNotifyEndCS(const struct FUStGSNotifyParam& NotifyParam) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BANS_GSTouchItem", "GSNotifyEndCS");

	Params::BANS_GSTouchItem_GSNotifyEndCS Parms{};

	Parms.NotifyParam = std::move(NotifyParam);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function b1-Managed.BED_FSMNode_GI_GlobalAnyState.PostPropertyChanged
// (Native, Event, Public, BlueprintEvent)
// Parameters:
// class FString                           MemberName                                             (Parm, ZeroConstructor, HasGetValueTypeHash)
// class FString                           PropertyName                                           (Parm, ZeroConstructor, HasGetValueTypeHash)

void UBED_FSMNode_GI_GlobalAnyState::PostPropertyChanged(const class FString& MemberName, const class FString& PropertyName)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BED_FSMNode_GI_GlobalAnyState", "PostPropertyChanged");

	Params::BED_FSMNode_GI_GlobalAnyState_PostPropertyChanged Parms{};

	Parms.MemberName = std::move(MemberName);
	Parms.PropertyName = std::move(PropertyName);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function b1-Managed.BANS_GSCameraFixedParam.GSNotifyBeginCS
// (Native, Event, Public, Protected, BlueprintEvent, Const)
// Parameters:
// struct FUStGSNotifyParam                NotifyParam                                            (Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
// float                                   TotalDuration                                          (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UBANS_GSCameraFixedParam::GSNotifyBeginCS(const struct FUStGSNotifyParam& NotifyParam, float TotalDuration) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BANS_GSCameraFixedParam", "GSNotifyBeginCS");

	Params::BANS_GSCameraFixedParam_GSNotifyBeginCS Parms{};

	Parms.NotifyParam = std::move(NotifyParam);
	Parms.TotalDuration = TotalDuration;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function b1-Managed.BANS_GSCameraFixedParam.GSNotifyEndCS
// (Native, Event, Public, Protected, BlueprintEvent, Const)
// Parameters:
// struct FUStGSNotifyParam                NotifyParam                                            (Parm, ZeroConstructor, IsPlainOldData, NoDestructor)

void UBANS_GSCameraFixedParam::GSNotifyEndCS(const struct FUStGSNotifyParam& NotifyParam) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BANS_GSCameraFixedParam", "GSNotifyEndCS");

	Params::BANS_GSCameraFixedParam_GSNotifyEndCS Parms{};

	Parms.NotifyParam = std::move(NotifyParam);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function b1-Managed.BED_QuestNode_LogicalAnd.CanUserAddInputInCS
// (Native, Event, Public, HasOutParams, BlueprintEvent, Const)
// Parameters:
// uint8                                   ReturnValue                                            (Parm, OutParm, ReturnParm, NoDestructor, HasGetValueTypeHash)

uint8 UBED_QuestNode_LogicalAnd::CanUserAddInputInCS() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BED_QuestNode_LogicalAnd", "CanUserAddInputInCS");

	Params::BED_QuestNode_LogicalAnd_CanUserAddInputInCS Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function b1-Managed.BED_FSMNode_GI_Global_SubG_GI_Global_WXLogin.OnCreateGraphNodeInCS
// (Native, Event, Public, BlueprintEvent)

void UBED_FSMNode_GI_Global_SubG_GI_Global_WXLogin::OnCreateGraphNodeInCS()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BED_FSMNode_GI_Global_SubG_GI_Global_WXLogin", "OnCreateGraphNodeInCS");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function b1-Managed.BED_FSMNode_GI_Global_SubG_GI_Global_WXLogin.GetNodeDescriptionInCS
// (Native, Event, Public, HasOutParams, BlueprintEvent, Const)
// Parameters:
// class FString                           ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash)

class FString UBED_FSMNode_GI_Global_SubG_GI_Global_WXLogin::GetNodeDescriptionInCS() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BED_FSMNode_GI_Global_SubG_GI_Global_WXLogin", "GetNodeDescriptionInCS");

	Params::BED_FSMNode_GI_Global_SubG_GI_Global_WXLogin_GetNodeDescriptionInCS Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function b1-Managed.ListViewDemoEntryWidget.OnItemSelectionChangedCallback
// (Native, Public, BlueprintCallable)
// Parameters:
// uint8                                   IsSelected                                             (Parm, NoDestructor, HasGetValueTypeHash)

void UListViewDemoEntryWidget::OnItemSelectionChangedCallback(uint8 IsSelected)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("ListViewDemoEntryWidget", "OnItemSelectionChangedCallback");

	Params::ListViewDemoEntryWidget_OnItemSelectionChangedCallback Parms{};

	Parms.IsSelected = IsSelected;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function b1-Managed.ListViewDemoEntryWidget.OnListItemObjectSetCallback
// (Native, Public, BlueprintCallable)
// Parameters:
// class UObject*                          ListItemObject                                         (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UListViewDemoEntryWidget::OnListItemObjectSetCallback(class UObject* ListItemObject)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("ListViewDemoEntryWidget", "OnListItemObjectSetCallback");

	Params::ListViewDemoEntryWidget_OnListItemObjectSetCallback Parms{};

	Parms.ListItemObject = ListItemObject;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function b1-Managed.BED_FSMNode_GI_Global_InBattleOnLineClient.PostPropertyChanged
// (Native, Event, Public, BlueprintEvent)
// Parameters:
// class FString                           MemberName                                             (Parm, ZeroConstructor, HasGetValueTypeHash)
// class FString                           PropertyName                                           (Parm, ZeroConstructor, HasGetValueTypeHash)

void UBED_FSMNode_GI_Global_InBattleOnLineClient::PostPropertyChanged(const class FString& MemberName, const class FString& PropertyName)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BED_FSMNode_GI_Global_InBattleOnLineClient", "PostPropertyChanged");

	Params::BED_FSMNode_GI_Global_InBattleOnLineClient_PostPropertyChanged Parms{};

	Parms.MemberName = std::move(MemberName);
	Parms.PropertyName = std::move(PropertyName);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function b1-Managed.BED_FSMNode_GI_Global_InBattleOnLineClient.GetNodeDescriptionInCS
// (Native, Event, Public, HasOutParams, BlueprintEvent, Const)
// Parameters:
// class FString                           ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash)

class FString UBED_FSMNode_GI_Global_InBattleOnLineClient::GetNodeDescriptionInCS() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BED_FSMNode_GI_Global_InBattleOnLineClient", "GetNodeDescriptionInCS");

	Params::BED_FSMNode_GI_Global_InBattleOnLineClient_GetNodeDescriptionInCS Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function b1-Managed.BED_FSMNode_GI_Loading_OpenLoadingScreen.PostPropertyChanged
// (Native, Event, Public, BlueprintEvent)
// Parameters:
// class FString                           MemberName                                             (Parm, ZeroConstructor, HasGetValueTypeHash)
// class FString                           PropertyName                                           (Parm, ZeroConstructor, HasGetValueTypeHash)

void UBED_FSMNode_GI_Loading_OpenLoadingScreen::PostPropertyChanged(const class FString& MemberName, const class FString& PropertyName)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BED_FSMNode_GI_Loading_OpenLoadingScreen", "PostPropertyChanged");

	Params::BED_FSMNode_GI_Loading_OpenLoadingScreen_PostPropertyChanged Parms{};

	Parms.MemberName = std::move(MemberName);
	Parms.PropertyName = std::move(PropertyName);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function b1-Managed.BED_FSMNode_GI_Loading_OpenLoadingScreen.GetNodeDescriptionInCS
// (Native, Event, Public, HasOutParams, BlueprintEvent, Const)
// Parameters:
// class FString                           ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash)

class FString UBED_FSMNode_GI_Loading_OpenLoadingScreen::GetNodeDescriptionInCS() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BED_FSMNode_GI_Loading_OpenLoadingScreen", "GetNodeDescriptionInCS");

	Params::BED_FSMNode_GI_Loading_OpenLoadingScreen_GetNodeDescriptionInCS Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function b1-Managed.BED_FSMNode_GI_Global_InBattleStandAlone.PostPropertyChanged
// (Native, Event, Public, BlueprintEvent)
// Parameters:
// class FString                           MemberName                                             (Parm, ZeroConstructor, HasGetValueTypeHash)
// class FString                           PropertyName                                           (Parm, ZeroConstructor, HasGetValueTypeHash)

void UBED_FSMNode_GI_Global_InBattleStandAlone::PostPropertyChanged(const class FString& MemberName, const class FString& PropertyName)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BED_FSMNode_GI_Global_InBattleStandAlone", "PostPropertyChanged");

	Params::BED_FSMNode_GI_Global_InBattleStandAlone_PostPropertyChanged Parms{};

	Parms.MemberName = std::move(MemberName);
	Parms.PropertyName = std::move(PropertyName);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function b1-Managed.BED_FSMNode_GI_Global_InBattleStandAlone.GetNodeDescriptionInCS
// (Native, Event, Public, HasOutParams, BlueprintEvent, Const)
// Parameters:
// class FString                           ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash)

class FString UBED_FSMNode_GI_Global_InBattleStandAlone::GetNodeDescriptionInCS() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BED_FSMNode_GI_Global_InBattleStandAlone", "GetNodeDescriptionInCS");

	Params::BED_FSMNode_GI_Global_InBattleStandAlone_GetNodeDescriptionInCS Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function b1-Managed.BED_FSMNode_GI_Global_SubG_GI_Loading_InitWXLogin.OnCreateGraphNodeInCS
// (Native, Event, Public, BlueprintEvent)

void UBED_FSMNode_GI_Global_SubG_GI_Loading_InitWXLogin::OnCreateGraphNodeInCS()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BED_FSMNode_GI_Global_SubG_GI_Loading_InitWXLogin", "OnCreateGraphNodeInCS");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function b1-Managed.BED_FSMNode_GI_Global_SubG_GI_Loading_InitWXLogin.GetNodeDescriptionInCS
// (Native, Event, Public, HasOutParams, BlueprintEvent, Const)
// Parameters:
// class FString                           ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash)

class FString UBED_FSMNode_GI_Global_SubG_GI_Loading_InitWXLogin::GetNodeDescriptionInCS() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BED_FSMNode_GI_Global_SubG_GI_Loading_InitWXLogin", "GetNodeDescriptionInCS");

	Params::BED_FSMNode_GI_Global_SubG_GI_Loading_InitWXLogin_GetNodeDescriptionInCS Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function b1-Managed.BED_DialogueNode_OnPlayerApproached.GetNodeDescriptionInCS
// (Native, Event, Public, HasOutParams, BlueprintEvent, Const)
// Parameters:
// class FString                           ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash)

class FString UBED_DialogueNode_OnPlayerApproached::GetNodeDescriptionInCS() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BED_DialogueNode_OnPlayerApproached", "GetNodeDescriptionInCS");

	Params::BED_DialogueNode_OnPlayerApproached_GetNodeDescriptionInCS Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function b1-Managed.BED_DialogueNode_OnPlayerApproached.IsSupportViewType
// (Native, Event, Public, HasOutParams, BlueprintEvent, Const)
// Parameters:
// ECalliopeViewType                       InViewType                                             (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// uint8                                   ReturnValue                                            (Parm, OutParm, ReturnParm, NoDestructor, HasGetValueTypeHash)

uint8 UBED_DialogueNode_OnPlayerApproached::IsSupportViewType(const ECalliopeViewType& InViewType) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BED_DialogueNode_OnPlayerApproached", "IsSupportViewType");

	Params::BED_DialogueNode_OnPlayerApproached_IsSupportViewType Parms{};

	Parms.InViewType = InViewType;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function b1-Managed.BED_FSMNode_GI_Global_WaitGameStart.PostPropertyChanged
// (Native, Event, Public, BlueprintEvent)
// Parameters:
// class FString                           MemberName                                             (Parm, ZeroConstructor, HasGetValueTypeHash)
// class FString                           PropertyName                                           (Parm, ZeroConstructor, HasGetValueTypeHash)

void UBED_FSMNode_GI_Global_WaitGameStart::PostPropertyChanged(const class FString& MemberName, const class FString& PropertyName)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BED_FSMNode_GI_Global_WaitGameStart", "PostPropertyChanged");

	Params::BED_FSMNode_GI_Global_WaitGameStart_PostPropertyChanged Parms{};

	Parms.MemberName = std::move(MemberName);
	Parms.PropertyName = std::move(PropertyName);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function b1-Managed.BED_FSMNode_GI_Global_WaitGameStart.GetNodeDescriptionInCS
// (Native, Event, Public, HasOutParams, BlueprintEvent, Const)
// Parameters:
// class FString                           ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash)

class FString UBED_FSMNode_GI_Global_WaitGameStart::GetNodeDescriptionInCS() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BED_FSMNode_GI_Global_WaitGameStart", "GetNodeDescriptionInCS");

	Params::BED_FSMNode_GI_Global_WaitGameStart_GetNodeDescriptionInCS Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function b1-Managed.BED_FSMNode_GI_Global_SubG_GI_Loading_ServerLogin.OnCreateGraphNodeInCS
// (Native, Event, Public, BlueprintEvent)

void UBED_FSMNode_GI_Global_SubG_GI_Loading_ServerLogin::OnCreateGraphNodeInCS()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BED_FSMNode_GI_Global_SubG_GI_Loading_ServerLogin", "OnCreateGraphNodeInCS");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function b1-Managed.BED_FSMNode_GI_Global_SubG_GI_Loading_ServerLogin.GetNodeDescriptionInCS
// (Native, Event, Public, HasOutParams, BlueprintEvent, Const)
// Parameters:
// class FString                           ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash)

class FString UBED_FSMNode_GI_Global_SubG_GI_Loading_ServerLogin::GetNodeDescriptionInCS() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BED_FSMNode_GI_Global_SubG_GI_Loading_ServerLogin", "GetNodeDescriptionInCS");

	Params::BED_FSMNode_GI_Global_SubG_GI_Loading_ServerLogin_GetNodeDescriptionInCS Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function b1-Managed.BGUNvFlowCameraBlockLogic.ReceiveTick
// (Native, Event, Public, BlueprintEvent)
// Parameters:
// float                                   DeltaSeconds                                           (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UBGUNvFlowCameraBlockLogic::ReceiveTick(float DeltaSeconds)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BGUNvFlowCameraBlockLogic", "ReceiveTick");

	Params::BGUNvFlowCameraBlockLogic_ReceiveTick Parms{};

	Parms.DeltaSeconds = DeltaSeconds;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function b1-Managed.BGUNvFlowCameraBlockLogic.Init
// (Native, Public, BlueprintCallable)
// Parameters:
// class USceneComponent*                  Cam                                                    (ExportObject, Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// class USceneComponent*                  Actor                                                  (ExportObject, Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// class UCapsuleComponent*                Blocker                                                (ExportObject, Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UBGUNvFlowCameraBlockLogic::Init(class USceneComponent* Cam, class USceneComponent* Actor, class UCapsuleComponent* Blocker)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BGUNvFlowCameraBlockLogic", "Init");

	Params::BGUNvFlowCameraBlockLogic_Init Parms{};

	Parms.Cam = Cam;
	Parms.Actor = Actor;
	Parms.Blocker = Blocker;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function b1-Managed.BGUDialogueProxyActor.OnConstructionCS
// (Native, Event, Public, Protected, BlueprintEvent)
// Parameters:
// struct FTransform                       Transform                                              (ConstParm, Parm, OutParm, ReferenceParm, IsPlainOldData, NoDestructor)

void ABGUDialogueProxyActor::OnConstructionCS(const struct FTransform& Transform)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BGUDialogueProxyActor", "OnConstructionCS");

	Params::BGUDialogueProxyActor_OnConstructionCS Parms{};

	Parms.Transform = std::move(Transform);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function b1-Managed.BGUAiWeakInteractionActorBase.OnConstructionCS
// (Native, Event, Public, Protected, BlueprintEvent)
// Parameters:
// struct FTransform                       Transform                                              (ConstParm, Parm, OutParm, ReferenceParm, IsPlainOldData, NoDestructor)

void ABGUAiWeakInteractionActorBase::OnConstructionCS(const struct FTransform& Transform)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BGUAiWeakInteractionActorBase", "OnConstructionCS");

	Params::BGUAiWeakInteractionActorBase_OnConstructionCS Parms{};

	Parms.Transform = std::move(Transform);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function b1-Managed.BED_FSMNode_GI_Loading_CheckArchiveDataIsValid.PostPropertyChanged
// (Native, Event, Public, BlueprintEvent)
// Parameters:
// class FString                           MemberName                                             (Parm, ZeroConstructor, HasGetValueTypeHash)
// class FString                           PropertyName                                           (Parm, ZeroConstructor, HasGetValueTypeHash)

void UBED_FSMNode_GI_Loading_CheckArchiveDataIsValid::PostPropertyChanged(const class FString& MemberName, const class FString& PropertyName)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BED_FSMNode_GI_Loading_CheckArchiveDataIsValid", "PostPropertyChanged");

	Params::BED_FSMNode_GI_Loading_CheckArchiveDataIsValid_PostPropertyChanged Parms{};

	Parms.MemberName = std::move(MemberName);
	Parms.PropertyName = std::move(PropertyName);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function b1-Managed.BED_FSMNode_GI_Loading_CheckArchiveDataIsValid.GetNodeDescriptionInCS
// (Native, Event, Public, HasOutParams, BlueprintEvent, Const)
// Parameters:
// class FString                           ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash)

class FString UBED_FSMNode_GI_Loading_CheckArchiveDataIsValid::GetNodeDescriptionInCS() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BED_FSMNode_GI_Loading_CheckArchiveDataIsValid", "GetNodeDescriptionInCS");

	Params::BED_FSMNode_GI_Loading_CheckArchiveDataIsValid_GetNodeDescriptionInCS Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function b1-Managed.BUAnimInstanceBase.BlueprintInitializeAnimation
// (Native, Event, Public, BlueprintEvent)

void UBUAnimInstanceBase::BlueprintInitializeAnimation()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BUAnimInstanceBase", "BlueprintInitializeAnimation");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function b1-Managed.BUAnimHumanoidCS.BlueprintThreadSafeUpdateAnimation
// (Native, Event, Public, BlueprintEvent)
// Parameters:
// float                                   DeltaTimeX                                             (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UBUAnimHumanoidCS::BlueprintThreadSafeUpdateAnimation(float DeltaTimeX)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BUAnimHumanoidCS", "BlueprintThreadSafeUpdateAnimation");

	Params::BUAnimHumanoidCS_BlueprintThreadSafeUpdateAnimation Parms{};

	Parms.DeltaTimeX = DeltaTimeX;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function b1-Managed.BAN_GSAkEvent.bIsNativeBranchingPointCS
// (Native, Event, Public, HasOutParams, BlueprintEvent, Const)
// Parameters:
// uint8                                   ReturnValue                                            (Parm, OutParm, ReturnParm, NoDestructor, HasGetValueTypeHash)

uint8 UBAN_GSAkEvent::bIsNativeBranchingPointCS() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BAN_GSAkEvent", "bIsNativeBranchingPointCS");

	Params::BAN_GSAkEvent_bIsNativeBranchingPointCS Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function b1-Managed.BAN_GSAkEvent.GetSoftReferences
// (Native, Event, Public, HasOutParams, BlueprintEvent, Const)
// Parameters:
// TArray<struct FSoftObjectPath>          ReturnValue                                            (Parm, OutParm, ReturnParm)

TArray<struct FSoftObjectPath> UBAN_GSAkEvent::GetSoftReferences() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BAN_GSAkEvent", "GetSoftReferences");

	Params::BAN_GSAkEvent_GetSoftReferences Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function b1-Managed.BAN_GSAkEvent.GSNotifyCS
// (Native, Event, Public, Protected, BlueprintEvent, Const)
// Parameters:
// struct FUStGSNotifyParam                NotifyParam                                            (Parm, ZeroConstructor, IsPlainOldData, NoDestructor)

void UBAN_GSAkEvent::GSNotifyCS(const struct FUStGSNotifyParam& NotifyParam) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BAN_GSAkEvent", "GSNotifyCS");

	Params::BAN_GSAkEvent_GSNotifyCS Parms{};

	Parms.NotifyParam = std::move(NotifyParam);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function b1-Managed.BED_QuestNode_ObserveOnlineCondition.PostPropertyChanged
// (Native, Event, Public, BlueprintEvent)
// Parameters:
// class FString                           MemberName                                             (Parm, ZeroConstructor, HasGetValueTypeHash)
// class FString                           PropertyName                                           (Parm, ZeroConstructor, HasGetValueTypeHash)

void UBED_QuestNode_ObserveOnlineCondition::PostPropertyChanged(const class FString& MemberName, const class FString& PropertyName)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BED_QuestNode_ObserveOnlineCondition", "PostPropertyChanged");

	Params::BED_QuestNode_ObserveOnlineCondition_PostPropertyChanged Parms{};

	Parms.MemberName = std::move(MemberName);
	Parms.PropertyName = std::move(PropertyName);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function b1-Managed.BED_QuestNode_ObserveOnlineCondition.GetNodeDescriptionInCS
// (Native, Event, Public, HasOutParams, BlueprintEvent, Const)
// Parameters:
// class FString                           ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash)

class FString UBED_QuestNode_ObserveOnlineCondition::GetNodeDescriptionInCS() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BED_QuestNode_ObserveOnlineCondition", "GetNodeDescriptionInCS");

	Params::BED_QuestNode_ObserveOnlineCondition_GetNodeDescriptionInCS Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function b1-Managed.BED_FSMNode_GI_Global_SubG_GI_Loading_ReplayBattle.OnCreateGraphNodeInCS
// (Native, Event, Public, BlueprintEvent)

void UBED_FSMNode_GI_Global_SubG_GI_Loading_ReplayBattle::OnCreateGraphNodeInCS()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BED_FSMNode_GI_Global_SubG_GI_Loading_ReplayBattle", "OnCreateGraphNodeInCS");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function b1-Managed.BED_FSMNode_GI_Global_SubG_GI_Loading_ReplayBattle.GetNodeDescriptionInCS
// (Native, Event, Public, HasOutParams, BlueprintEvent, Const)
// Parameters:
// class FString                           ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash)

class FString UBED_FSMNode_GI_Global_SubG_GI_Loading_ReplayBattle::GetNodeDescriptionInCS() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BED_FSMNode_GI_Global_SubG_GI_Loading_ReplayBattle", "GetNodeDescriptionInCS");

	Params::BED_FSMNode_GI_Global_SubG_GI_Loading_ReplayBattle_GetNodeDescriptionInCS Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function b1-Managed.BED_FSMNode_GI_Loading_FillIsInToilet.PostPropertyChanged
// (Native, Event, Public, BlueprintEvent)
// Parameters:
// class FString                           MemberName                                             (Parm, ZeroConstructor, HasGetValueTypeHash)
// class FString                           PropertyName                                           (Parm, ZeroConstructor, HasGetValueTypeHash)

void UBED_FSMNode_GI_Loading_FillIsInToilet::PostPropertyChanged(const class FString& MemberName, const class FString& PropertyName)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BED_FSMNode_GI_Loading_FillIsInToilet", "PostPropertyChanged");

	Params::BED_FSMNode_GI_Loading_FillIsInToilet_PostPropertyChanged Parms{};

	Parms.MemberName = std::move(MemberName);
	Parms.PropertyName = std::move(PropertyName);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function b1-Managed.BED_FSMNode_GI_Loading_FillIsInToilet.GetNodeDescriptionInCS
// (Native, Event, Public, HasOutParams, BlueprintEvent, Const)
// Parameters:
// class FString                           ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash)

class FString UBED_FSMNode_GI_Loading_FillIsInToilet::GetNodeDescriptionInCS() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BED_FSMNode_GI_Loading_FillIsInToilet", "GetNodeDescriptionInCS");

	Params::BED_FSMNode_GI_Loading_FillIsInToilet_GetNodeDescriptionInCS Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function b1-Managed.GSEQG_SyncAnimationGuestPointGenerator.DoItemGenerationCS
// (Native, Event, Public, BlueprintEvent, Const)
// Parameters:
// TArray<struct FVector>                  ContextLocations                                       (ConstParm, Parm, OutParm, ReferenceParm)

void UGSEQG_SyncAnimationGuestPointGenerator::DoItemGenerationCS(const TArray<struct FVector>& ContextLocations) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GSEQG_SyncAnimationGuestPointGenerator", "DoItemGenerationCS");

	Params::GSEQG_SyncAnimationGuestPointGenerator_DoItemGenerationCS Parms{};

	Parms.ContextLocations = std::move(ContextLocations);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function b1-Managed.BED_QuestNode_GainItemPerformance.GetNodeDescriptionInCS
// (Native, Event, Public, HasOutParams, BlueprintEvent, Const)
// Parameters:
// class FString                           ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash)

class FString UBED_QuestNode_GainItemPerformance::GetNodeDescriptionInCS() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BED_QuestNode_GainItemPerformance", "GetNodeDescriptionInCS");

	Params::BED_QuestNode_GainItemPerformance_GetNodeDescriptionInCS Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function b1-Managed.BED_FSMNode_GI_Loading_CreateNewRoleData.PostPropertyChanged
// (Native, Event, Public, BlueprintEvent)
// Parameters:
// class FString                           MemberName                                             (Parm, ZeroConstructor, HasGetValueTypeHash)
// class FString                           PropertyName                                           (Parm, ZeroConstructor, HasGetValueTypeHash)

void UBED_FSMNode_GI_Loading_CreateNewRoleData::PostPropertyChanged(const class FString& MemberName, const class FString& PropertyName)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BED_FSMNode_GI_Loading_CreateNewRoleData", "PostPropertyChanged");

	Params::BED_FSMNode_GI_Loading_CreateNewRoleData_PostPropertyChanged Parms{};

	Parms.MemberName = std::move(MemberName);
	Parms.PropertyName = std::move(PropertyName);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function b1-Managed.BED_FSMNode_GI_Loading_CreateNewRoleData.GetNodeDescriptionInCS
// (Native, Event, Public, HasOutParams, BlueprintEvent, Const)
// Parameters:
// class FString                           ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash)

class FString UBED_FSMNode_GI_Loading_CreateNewRoleData::GetNodeDescriptionInCS() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BED_FSMNode_GI_Loading_CreateNewRoleData", "GetNodeDescriptionInCS");

	Params::BED_FSMNode_GI_Loading_CreateNewRoleData_GetNodeDescriptionInCS Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function b1-Managed.BGUFunctionLibraryCS.ProjectWorldLocationToWidgetPositionWithSZInS
// (Native, Static, Public, HasOutParams, BlueprintCallable)
// Parameters:
// class APlayerController*                PlayerController                                       (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// struct FVector                          WorldPos                                               (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// struct FVector2D                        ScreenPos                                              (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UBGUFunctionLibraryCS::ProjectWorldLocationToWidgetPositionWithSZInS(class APlayerController* PlayerController, const struct FVector& WorldPos, struct FVector2D* ScreenPos)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("BGUFunctionLibraryCS", "ProjectWorldLocationToWidgetPositionWithSZInS");

	Params::BGUFunctionLibraryCS_ProjectWorldLocationToWidgetPositionWithSZInS Parms{};

	Parms.PlayerController = PlayerController;
	Parms.WorldPos = std::move(WorldPos);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	if (ScreenPos != nullptr)
		*ScreenPos = std::move(Parms.ScreenPos);
}


// Function b1-Managed.BGUFunctionLibraryCS.CalTransformRelativeToParentTransformOffset
// (Native, Static, Public, HasOutParams, BlueprintCallable)
// Parameters:
// struct FTransform                       SelfTransform                                          (Parm, IsPlainOldData, NoDestructor)
// struct FTransform                       ParentTransform                                        (Parm, IsPlainOldData, NoDestructor)
// struct FTransform                       ParentTransformOffset                                  (Parm, IsPlainOldData, NoDestructor)
// struct FTransform                       ReturnValue                                            (Parm, OutParm, ReturnParm, IsPlainOldData, NoDestructor)

struct FTransform UBGUFunctionLibraryCS::CalTransformRelativeToParentTransformOffset(const struct FTransform& SelfTransform, const struct FTransform& ParentTransform, const struct FTransform& ParentTransformOffset)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("BGUFunctionLibraryCS", "CalTransformRelativeToParentTransformOffset");

	Params::BGUFunctionLibraryCS_CalTransformRelativeToParentTransformOffset Parms{};

	Parms.SelfTransform = std::move(SelfTransform);
	Parms.ParentTransform = std::move(ParentTransform);
	Parms.ParentTransformOffset = std::move(ParentTransformOffset);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function b1-Managed.BGUFunctionLibraryCS.RotateLevelRelativeToParentTransform
// (Native, Static, Public, BlueprintCallable)
// Parameters:
// class UObject*                          WorldContextObject                                     (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// class FName                             LevelName                                              (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// struct FTransform                       ParentTransform                                        (Parm, IsPlainOldData, NoDestructor)
// struct FTransform                       ParentTransformOffset                                  (Parm, IsPlainOldData, NoDestructor)

void UBGUFunctionLibraryCS::RotateLevelRelativeToParentTransform(class UObject* WorldContextObject, class FName LevelName, const struct FTransform& ParentTransform, const struct FTransform& ParentTransformOffset)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("BGUFunctionLibraryCS", "RotateLevelRelativeToParentTransform");

	Params::BGUFunctionLibraryCS_RotateLevelRelativeToParentTransform Parms{};

	Parms.WorldContextObject = WorldContextObject;
	Parms.LevelName = LevelName;
	Parms.ParentTransform = std::move(ParentTransform);
	Parms.ParentTransformOffset = std::move(ParentTransformOffset);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function b1-Managed.BGUFunctionLibraryCS.ExportTamerListToNewDAByWeaponInfo
// (Native, Static, Public, HasOutParams, BlueprintCallable)
// Parameters:
// class AActor*                           Actor                                                  (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// class FString                           OldTamer                                               (Parm, ZeroConstructor, HasGetValueTypeHash)
// class FString                           NewTimer                                               (Parm, ZeroConstructor, HasGetValueTypeHash)
// class FString                           BlameName                                              (Parm, ZeroConstructor, HasGetValueTypeHash)
// uint8                                   ReturnValue                                            (Parm, OutParm, ReturnParm, NoDestructor, HasGetValueTypeHash)

uint8 UBGUFunctionLibraryCS::ExportTamerListToNewDAByWeaponInfo(class AActor* Actor, const class FString& OldTamer, const class FString& NewTimer, const class FString& BlameName)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("BGUFunctionLibraryCS", "ExportTamerListToNewDAByWeaponInfo");

	Params::BGUFunctionLibraryCS_ExportTamerListToNewDAByWeaponInfo Parms{};

	Parms.Actor = Actor;
	Parms.OldTamer = std::move(OldTamer);
	Parms.NewTimer = std::move(NewTimer);
	Parms.BlameName = std::move(BlameName);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function b1-Managed.BGUFunctionLibraryCS.GetGuibeiBoneTransformFromLastTick
// (Native, Static, Public, HasOutParams, BlueprintCallable)
// Parameters:
// class UAnimSequence*                    AnimSeq                                                (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// float                                   CurTime                                                (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// float                                   LastTime                                               (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// class FName                             BoneName                                               (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// struct FTransform                       ReturnValue                                            (Parm, OutParm, ReturnParm, IsPlainOldData, NoDestructor)

struct FTransform UBGUFunctionLibraryCS::GetGuibeiBoneTransformFromLastTick(class UAnimSequence* AnimSeq, float CurTime, float LastTime, class FName BoneName)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("BGUFunctionLibraryCS", "GetGuibeiBoneTransformFromLastTick");

	Params::BGUFunctionLibraryCS_GetGuibeiBoneTransformFromLastTick Parms{};

	Parms.AnimSeq = AnimSeq;
	Parms.CurTime = CurTime;
	Parms.LastTime = LastTime;
	Parms.BoneName = BoneName;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function b1-Managed.BGUFunctionLibraryCS.BGUCheckSpecialConsumeItemUseAble
// (Native, Static, Public, HasOutParams, BlueprintCallable)
// Parameters:
// class UObject*                          WorldContext                                           (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// int32                                   ItemId                                                 (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// uint8                                   bShowTips                                              (Parm, NoDestructor, HasGetValueTypeHash)
// uint8                                   ReturnValue                                            (Parm, OutParm, ReturnParm, NoDestructor, HasGetValueTypeHash)

uint8 UBGUFunctionLibraryCS::BGUCheckSpecialConsumeItemUseAble(class UObject* WorldContext, int32 ItemId, uint8 bShowTips)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("BGUFunctionLibraryCS", "BGUCheckSpecialConsumeItemUseAble");

	Params::BGUFunctionLibraryCS_BGUCheckSpecialConsumeItemUseAble Parms{};

	Parms.WorldContext = WorldContext;
	Parms.ItemId = ItemId;
	Parms.bShowTips = bShowTips;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function b1-Managed.BGUFunctionLibraryCS.BGUSetPlayerInSequenceTransition
// (Native, Static, Public, BlueprintCallable)
// Parameters:
// class AActor*                           Owner                                                  (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// uint8                                   bValue                                                 (Parm, NoDestructor, HasGetValueTypeHash)

void UBGUFunctionLibraryCS::BGUSetPlayerInSequenceTransition(class AActor* Owner, uint8 bValue)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("BGUFunctionLibraryCS", "BGUSetPlayerInSequenceTransition");

	Params::BGUFunctionLibraryCS_BGUSetPlayerInSequenceTransition Parms{};

	Parms.Owner = Owner;
	Parms.bValue = bValue;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function b1-Managed.BGUFunctionLibraryCS.BGUTryCastSpellWithStartSection
// (Native, Static, Public, HasOutParams, BlueprintCallable)
// Parameters:
// class AActor*                           Unit                                                   (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// int32                                   SkillID                                                (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// class FName                             MontageStartSectionName                                (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// int32                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

int32 UBGUFunctionLibraryCS::BGUTryCastSpellWithStartSection(class AActor* Unit, int32 SkillID, class FName MontageStartSectionName)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("BGUFunctionLibraryCS", "BGUTryCastSpellWithStartSection");

	Params::BGUFunctionLibraryCS_BGUTryCastSpellWithStartSection Parms{};

	Parms.Unit = Unit;
	Parms.SkillID = SkillID;
	Parms.MontageStartSectionName = MontageStartSectionName;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function b1-Managed.BGUFunctionLibraryCS.BGUSetDispInteractActorAttachTo
// (Native, Static, Public, BlueprintCallable)
// Parameters:
// class AActor*                           AttachTo                                               (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UBGUFunctionLibraryCS::BGUSetDispInteractActorAttachTo(class AActor* AttachTo)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("BGUFunctionLibraryCS", "BGUSetDispInteractActorAttachTo");

	Params::BGUFunctionLibraryCS_BGUSetDispInteractActorAttachTo Parms{};

	Parms.AttachTo = AttachTo;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function b1-Managed.BGUFunctionLibraryCS.PauseCamShakeWithControlByActor
// (Native, Static, Public, BlueprintCallable)
// Parameters:
// class AActor*                           Target                                                 (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// uint8                                   bPause                                                 (Parm, NoDestructor, HasGetValueTypeHash)

void UBGUFunctionLibraryCS::PauseCamShakeWithControlByActor(class AActor* Target, uint8 bPause)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("BGUFunctionLibraryCS", "PauseCamShakeWithControlByActor");

	Params::BGUFunctionLibraryCS_PauseCamShakeWithControlByActor Parms{};

	Parms.Target = Target;
	Parms.bPause = bPause;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function b1-Managed.BGUFunctionLibraryCS.PlayCamShakeWithControlByClass
// (Native, Static, Public, BlueprintCallable)
// Parameters:
// class UClass*                           CameraShakeCls                                         (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// class AActor*                           Target                                                 (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UBGUFunctionLibraryCS::PlayCamShakeWithControlByClass(class UClass* CameraShakeCls, class AActor* Target)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("BGUFunctionLibraryCS", "PlayCamShakeWithControlByClass");

	Params::BGUFunctionLibraryCS_PlayCamShakeWithControlByClass Parms{};

	Parms.CameraShakeCls = CameraShakeCls;
	Parms.Target = Target;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function b1-Managed.BGUFunctionLibraryCS.ExportTamerListToNewDAByBlame
// (Native, Static, Public, HasOutParams, BlueprintCallable)
// Parameters:
// class AActor*                           Actor                                                  (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// class FString                           OldTamer                                               (Parm, ZeroConstructor, HasGetValueTypeHash)
// class FString                           NewTimer                                               (Parm, ZeroConstructor, HasGetValueTypeHash)
// class FString                           BlameName                                              (Parm, ZeroConstructor, HasGetValueTypeHash)
// uint8                                   ReturnValue                                            (Parm, OutParm, ReturnParm, NoDestructor, HasGetValueTypeHash)

uint8 UBGUFunctionLibraryCS::ExportTamerListToNewDAByBlame(class AActor* Actor, const class FString& OldTamer, const class FString& NewTimer, const class FString& BlameName)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("BGUFunctionLibraryCS", "ExportTamerListToNewDAByBlame");

	Params::BGUFunctionLibraryCS_ExportTamerListToNewDAByBlame Parms{};

	Parms.Actor = Actor;
	Parms.OldTamer = std::move(OldTamer);
	Parms.NewTimer = std::move(NewTimer);
	Parms.BlameName = std::move(BlameName);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function b1-Managed.BGUFunctionLibraryCS.ExportBulletSkillToDataAsset
// (Native, Static, Public, BlueprintCallable)
// Parameters:
// class ABUTamerActor*                    TM                                                     (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UBGUFunctionLibraryCS::ExportBulletSkillToDataAsset(class ABUTamerActor* TM)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("BGUFunctionLibraryCS", "ExportBulletSkillToDataAsset");

	Params::BGUFunctionLibraryCS_ExportBulletSkillToDataAsset Parms{};

	Parms.TM = TM;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function b1-Managed.BGUFunctionLibraryCS.BGUSpawnActorAndECSBeginPlay
// (Native, Static, Public, HasOutParams, BlueprintCallable)
// Parameters:
// class UWorld*                           _World                                                 (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// class UClass*                           ActorClass                                             (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// class AActor*                           ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

class AActor* UBGUFunctionLibraryCS::BGUSpawnActorAndECSBeginPlay(class UWorld* _World, class UClass* ActorClass)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("BGUFunctionLibraryCS", "BGUSpawnActorAndECSBeginPlay");

	Params::BGUFunctionLibraryCS_BGUSpawnActorAndECSBeginPlay Parms{};

	Parms._World = _World;
	Parms.ActorClass = ActorClass;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function b1-Managed.BGUFunctionLibraryCS.BGUDisablePlayerGuiBeiCamera
// (Native, Static, Public, BlueprintCallable)
// Parameters:
// class UObject*                          WorldContext                                           (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UBGUFunctionLibraryCS::BGUDisablePlayerGuiBeiCamera(class UObject* WorldContext)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("BGUFunctionLibraryCS", "BGUDisablePlayerGuiBeiCamera");

	Params::BGUFunctionLibraryCS_BGUDisablePlayerGuiBeiCamera Parms{};

	Parms.WorldContext = WorldContext;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function b1-Managed.BGUFunctionLibraryCS.GenerateNavMeshBoundsVolumes
// (Native, Static, Public, BlueprintCallable)
// Parameters:
// class AActor*                           TempleteActor                                          (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UBGUFunctionLibraryCS::GenerateNavMeshBoundsVolumes(class AActor* TempleteActor)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("BGUFunctionLibraryCS", "GenerateNavMeshBoundsVolumes");

	Params::BGUFunctionLibraryCS_GenerateNavMeshBoundsVolumes Parms{};

	Parms.TempleteActor = TempleteActor;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function b1-Managed.BGUFunctionLibraryCS.BGUEnablePlayerGuiBeiCamera
// (Native, Static, Public, BlueprintCallable)
// Parameters:
// class UObject*                          WorldContext                                           (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// struct FRotator                         CurInverseAnimRotation                                 (Parm, ZeroConstructor, IsPlainOldData, NoDestructor)

void UBGUFunctionLibraryCS::BGUEnablePlayerGuiBeiCamera(class UObject* WorldContext, const struct FRotator& CurInverseAnimRotation)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("BGUFunctionLibraryCS", "BGUEnablePlayerGuiBeiCamera");

	Params::BGUFunctionLibraryCS_BGUEnablePlayerGuiBeiCamera Parms{};

	Parms.WorldContext = WorldContext;
	Parms.CurInverseAnimRotation = std::move(CurInverseAnimRotation);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function b1-Managed.BGUFunctionLibraryCS.BGUGetMultiPointCurrentUnit
// (Native, Static, Public, HasOutParams, BlueprintCallable)
// Parameters:
// class AActor*                           Actor                                                  (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// int32                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

int32 UBGUFunctionLibraryCS::BGUGetMultiPointCurrentUnit(class AActor* Actor)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("BGUFunctionLibraryCS", "BGUGetMultiPointCurrentUnit");

	Params::BGUFunctionLibraryCS_BGUGetMultiPointCurrentUnit Parms{};

	Parms.Actor = Actor;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function b1-Managed.BGUFunctionLibraryCS.BGUPlatformPatroMoveSingle
// (Native, Static, Public, BlueprintCallable)
// Parameters:
// class AActor*                           Unit                                                   (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// struct FVector                          BeginPos                                               (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// struct FVector                          EndPos                                                 (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// float                                   Speed                                                  (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// int32                                   PlayerCount                                            (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// float                                   Range                                                  (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UBGUFunctionLibraryCS::BGUPlatformPatroMoveSingle(class AActor* Unit, const struct FVector& BeginPos, const struct FVector& EndPos, float Speed, int32 PlayerCount, float Range)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("BGUFunctionLibraryCS", "BGUPlatformPatroMoveSingle");

	Params::BGUFunctionLibraryCS_BGUPlatformPatroMoveSingle Parms{};

	Parms.Unit = Unit;
	Parms.BeginPos = std::move(BeginPos);
	Parms.EndPos = std::move(EndPos);
	Parms.Speed = Speed;
	Parms.PlayerCount = PlayerCount;
	Parms.Range = Range;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function b1-Managed.BGUFunctionLibraryCS.BGUCalcCharacterRotOnSlope
// (Native, Static, Public, HasOutParams, BlueprintCallable)
// Parameters:
// class ACharacter*                       OwnerChr                                               (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// struct FVector                          SurfaceNormal_Normalized                               (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// struct FRotator                         ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor)

struct FRotator UBGUFunctionLibraryCS::BGUCalcCharacterRotOnSlope(class ACharacter* OwnerChr, struct FVector* SurfaceNormal_Normalized)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("BGUFunctionLibraryCS", "BGUCalcCharacterRotOnSlope");

	Params::BGUFunctionLibraryCS_BGUCalcCharacterRotOnSlope Parms{};

	Parms.OwnerChr = OwnerChr;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	if (SurfaceNormal_Normalized != nullptr)
		*SurfaceNormal_Normalized = std::move(Parms.SurfaceNormal_Normalized);

	return Parms.ReturnValue;
}


// Function b1-Managed.BGUFunctionLibraryCS.BGUTryDestroyDestructible
// (Native, Static, Public, BlueprintCallable)
// Parameters:
// class AActor*                           DestructibleActor                                      (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UBGUFunctionLibraryCS::BGUTryDestroyDestructible(class AActor* DestructibleActor)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("BGUFunctionLibraryCS", "BGUTryDestroyDestructible");

	Params::BGUFunctionLibraryCS_BGUTryDestroyDestructible Parms{};

	Parms.DestructibleActor = DestructibleActor;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function b1-Managed.BGUFunctionLibraryCS.ExportAllTamerToDataAsset
// (Native, Static, Public, BlueprintCallable)

void UBGUFunctionLibraryCS::ExportAllTamerToDataAsset()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("BGUFunctionLibraryCS", "ExportAllTamerToDataAsset");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function b1-Managed.BGUFunctionLibraryCS.BGUClosestPerceivedTarget
// (Native, Static, Public, HasOutParams, BlueprintCallable, BlueprintPure)
// Parameters:
// class AActor*                           Unit                                                   (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// class AActor*                           ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

class AActor* UBGUFunctionLibraryCS::BGUClosestPerceivedTarget(class AActor* Unit)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("BGUFunctionLibraryCS", "BGUClosestPerceivedTarget");

	Params::BGUFunctionLibraryCS_BGUClosestPerceivedTarget Parms{};

	Parms.Unit = Unit;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function b1-Managed.BGUFunctionLibraryCS.BGUPlayerCameraLockTarget
// (Native, Static, Public, BlueprintCallable)
// Parameters:
// class AActor*                           Player                                                 (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// class AActor*                           Target                                                 (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UBGUFunctionLibraryCS::BGUPlayerCameraLockTarget(class AActor* Player, class AActor* Target)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("BGUFunctionLibraryCS", "BGUPlayerCameraLockTarget");

	Params::BGUFunctionLibraryCS_BGUPlayerCameraLockTarget Parms{};

	Parms.Player = Player;
	Parms.Target = Target;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function b1-Managed.BGUFunctionLibraryCS.TestProfileSimpleOverlap
// (Native, Static, Public, BlueprintCallable)
// Parameters:
// class UObject*                          WorldContext                                           (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UBGUFunctionLibraryCS::TestProfileSimpleOverlap(class UObject* WorldContext)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("BGUFunctionLibraryCS", "TestProfileSimpleOverlap");

	Params::BGUFunctionLibraryCS_TestProfileSimpleOverlap Parms{};

	Parms.WorldContext = WorldContext;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function b1-Managed.BGUFunctionLibraryCS.SetCineCameraFocalLength
// (Native, Static, Public, BlueprintCallable)
// Parameters:
// class ACineCameraActor*                 CineCameraActor                                        (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// float                                   NewFocalLength                                         (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UBGUFunctionLibraryCS::SetCineCameraFocalLength(class ACineCameraActor* CineCameraActor, float NewFocalLength)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("BGUFunctionLibraryCS", "SetCineCameraFocalLength");

	Params::BGUFunctionLibraryCS_SetCineCameraFocalLength Parms{};

	Parms.CineCameraActor = CineCameraActor;
	Parms.NewFocalLength = NewFocalLength;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function b1-Managed.BGUFunctionLibraryCS.GetCineCameraFocalLength
// (Native, Static, Public, HasOutParams, BlueprintCallable, BlueprintPure)
// Parameters:
// class ACineCameraActor*                 CineCameraActor                                        (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// float                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

float UBGUFunctionLibraryCS::GetCineCameraFocalLength(class ACineCameraActor* CineCameraActor)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("BGUFunctionLibraryCS", "GetCineCameraFocalLength");

	Params::BGUFunctionLibraryCS_GetCineCameraFocalLength Parms{};

	Parms.CineCameraActor = CineCameraActor;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function b1-Managed.BGUFunctionLibraryCS.CanActivateConsoleCommad
// (Native, Static, Public, HasOutParams, BlueprintCallable)
// Parameters:
// uint8                                   ReturnValue                                            (Parm, OutParm, ReturnParm, NoDestructor, HasGetValueTypeHash)

uint8 UBGUFunctionLibraryCS::CanActivateConsoleCommad()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("BGUFunctionLibraryCS", "CanActivateConsoleCommad");

	Params::BGUFunctionLibraryCS_CanActivateConsoleCommad Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function b1-Managed.BGUFunctionLibraryCS.CastMagicallyChangeSkill
// (Native, Static, Public, BlueprintCallable)
// Parameters:
// class AActor*                           Unit                                                   (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// class UBGWDataAsset_MagicallyChangeConfig*Config                                                 (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// int32                                   SkillID                                                (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// int32                                   RecoverSkillID                                         (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UBGUFunctionLibraryCS::CastMagicallyChangeSkill(class AActor* Unit, class UBGWDataAsset_MagicallyChangeConfig* Config, int32 SkillID, int32 RecoverSkillID)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("BGUFunctionLibraryCS", "CastMagicallyChangeSkill");

	Params::BGUFunctionLibraryCS_CastMagicallyChangeSkill Parms{};

	Parms.Unit = Unit;
	Parms.Config = Config;
	Parms.SkillID = SkillID;
	Parms.RecoverSkillID = RecoverSkillID;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function b1-Managed.BGUFunctionLibraryCS.BGUOneHitBreakImmobility
// (Native, Static, Public, BlueprintCallable)
// Parameters:
// class AActor*                           Unit                                                   (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UBGUFunctionLibraryCS::BGUOneHitBreakImmobility(class AActor* Unit)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("BGUFunctionLibraryCS", "BGUOneHitBreakImmobility");

	Params::BGUFunctionLibraryCS_BGUOneHitBreakImmobility Parms{};

	Parms.Unit = Unit;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function b1-Managed.BGUFunctionLibraryCS.BGURemoveBuffImmediately
// (Native, Static, Public, BlueprintCallable)
// Parameters:
// class AActor*                           Unit                                                   (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// int32                                   BuffID                                                 (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// EBuffEffectTriggerType                  EffectTriggerType                                      (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UBGUFunctionLibraryCS::BGURemoveBuffImmediately(class AActor* Unit, int32 BuffID, EBuffEffectTriggerType EffectTriggerType)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("BGUFunctionLibraryCS", "BGURemoveBuffImmediately");

	Params::BGUFunctionLibraryCS_BGURemoveBuffImmediately Parms{};

	Parms.Unit = Unit;
	Parms.BuffID = BuffID;
	Parms.EffectTriggerType = EffectTriggerType;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function b1-Managed.BGUFunctionLibraryCS.ClampAndAlignToLandScape
// (Native, Static, Public, BlueprintCallable)
// Parameters:
// class AActor*                           Unit                                                   (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// uint8                                   ClampToLand                                            (Parm, NoDestructor, HasGetValueTypeHash)
// uint8                                   AlignToLand                                            (Parm, NoDestructor, HasGetValueTypeHash)
// float                                   DeltaTime                                              (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// float                                   InterpSpd                                              (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UBGUFunctionLibraryCS::ClampAndAlignToLandScape(class AActor* Unit, uint8 ClampToLand, uint8 AlignToLand, float DeltaTime, float InterpSpd)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("BGUFunctionLibraryCS", "ClampAndAlignToLandScape");

	Params::BGUFunctionLibraryCS_ClampAndAlignToLandScape Parms{};

	Parms.Unit = Unit;
	Parms.ClampToLand = ClampToLand;
	Parms.AlignToLand = AlignToLand;
	Parms.DeltaTime = DeltaTime;
	Parms.InterpSpd = InterpSpd;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function b1-Managed.BGUFunctionLibraryCS.BGURemoveSkillSuperArmor
// (Native, Static, Public, BlueprintCallable)
// Parameters:
// class AActor*                           Unit                                                   (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UBGUFunctionLibraryCS::BGURemoveSkillSuperArmor(class AActor* Unit)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("BGUFunctionLibraryCS", "BGURemoveSkillSuperArmor");

	Params::BGUFunctionLibraryCS_BGURemoveSkillSuperArmor Parms{};

	Parms.Unit = Unit;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function b1-Managed.BGUFunctionLibraryCS.PrepareForSkillRecording
// (Native, Static, Public, HasOutParams, BlueprintCallable)
// Parameters:
// class UWorld*                           World                                                  (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// class UClass*                           UnitClass                                              (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// int32                                   ResID                                                  (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// int32                                   SkillID                                                (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// uint8                                   bNeedsSpawnNewUnit                                     (Parm, NoDestructor, HasGetValueTypeHash)
// class ABGUCharacterCS*                  SpawnedUnit                                            (Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// class UAnimMontage*                     PlayedMontage                                          (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UBGUFunctionLibraryCS::PrepareForSkillRecording(class UWorld* World, class UClass* UnitClass, int32 ResID, int32 SkillID, uint8 bNeedsSpawnNewUnit, class ABGUCharacterCS*& SpawnedUnit, class UAnimMontage** PlayedMontage)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("BGUFunctionLibraryCS", "PrepareForSkillRecording");

	Params::BGUFunctionLibraryCS_PrepareForSkillRecording Parms{};

	Parms.World = World;
	Parms.UnitClass = UnitClass;
	Parms.ResID = ResID;
	Parms.SkillID = SkillID;
	Parms.bNeedsSpawnNewUnit = bNeedsSpawnNewUnit;
	Parms.SpawnedUnit = SpawnedUnit;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	SpawnedUnit = Parms.SpawnedUnit;

	if (PlayedMontage != nullptr)
		*PlayedMontage = Parms.PlayedMontage;
}


// Function b1-Managed.BGUFunctionLibraryCS.BGUSpawnActorNoBeginPlay
// (Native, Static, Public, HasOutParams, BlueprintCallable)
// Parameters:
// class UWorld*                           _World                                                 (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// class UClass*                           ActorClass                                             (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// class AActor*                           ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

class AActor* UBGUFunctionLibraryCS::BGUSpawnActorNoBeginPlay(class UWorld* _World, class UClass* ActorClass)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("BGUFunctionLibraryCS", "BGUSpawnActorNoBeginPlay");

	Params::BGUFunctionLibraryCS_BGUSpawnActorNoBeginPlay Parms{};

	Parms._World = _World;
	Parms.ActorClass = ActorClass;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function b1-Managed.BGUFunctionLibraryCS.EnterMonsterSkillCamera
// (Native, Static, Public, BlueprintCallable)
// Parameters:
// class AActor*                           Monster                                                (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// int32                                   CameraID                                               (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UBGUFunctionLibraryCS::EnterMonsterSkillCamera(class AActor* Monster, int32 CameraID)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("BGUFunctionLibraryCS", "EnterMonsterSkillCamera");

	Params::BGUFunctionLibraryCS_EnterMonsterSkillCamera Parms{};

	Parms.Monster = Monster;
	Parms.CameraID = CameraID;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function b1-Managed.BGUFunctionLibraryCS.BGUSetCanTriggerGroupAI
// (Native, Static, Public, BlueprintCallable)
// Parameters:
// class UObject*                          WorldContext                                           (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// uint8                                   CanTrigger                                             (Parm, NoDestructor, HasGetValueTypeHash)

void UBGUFunctionLibraryCS::BGUSetCanTriggerGroupAI(class UObject* WorldContext, uint8 CanTrigger)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("BGUFunctionLibraryCS", "BGUSetCanTriggerGroupAI");

	Params::BGUFunctionLibraryCS_BGUSetCanTriggerGroupAI Parms{};

	Parms.WorldContext = WorldContext;
	Parms.CanTrigger = CanTrigger;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function b1-Managed.BGUFunctionLibraryCS.GetUnitLockTargetActor
// (Native, Static, Public, HasOutParams, BlueprintCallable, BlueprintPure)
// Parameters:
// class AActor*                           Unit                                                   (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// class AActor*                           ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

class AActor* UBGUFunctionLibraryCS::GetUnitLockTargetActor(class AActor* Unit)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("BGUFunctionLibraryCS", "GetUnitLockTargetActor");

	Params::BGUFunctionLibraryCS_GetUnitLockTargetActor Parms{};

	Parms.Unit = Unit;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function b1-Managed.BGUFunctionLibraryCS.ExitMonsterSkillCamera
// (Native, Static, Public, BlueprintCallable)
// Parameters:
// class AActor*                           Monster                                                (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UBGUFunctionLibraryCS::ExitMonsterSkillCamera(class AActor* Monster)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("BGUFunctionLibraryCS", "ExitMonsterSkillCamera");

	Params::BGUFunctionLibraryCS_ExitMonsterSkillCamera Parms{};

	Parms.Monster = Monster;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function b1-Managed.BGUFunctionLibraryCS.GetCameraFocusDistance
// (Native, Static, Public, HasOutParams, BlueprintCallable, BlueprintPure)
// Parameters:
// class ACameraActor*                     CameraActor                                            (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// float                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

float UBGUFunctionLibraryCS::GetCameraFocusDistance(class ACameraActor* CameraActor)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("BGUFunctionLibraryCS", "GetCameraFocusDistance");

	Params::BGUFunctionLibraryCS_GetCameraFocusDistance Parms{};

	Parms.CameraActor = CameraActor;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function b1-Managed.BGUFunctionLibraryCS.SetCameraFocusDistance
// (Native, Static, Public, BlueprintCallable)
// Parameters:
// class ACameraActor*                     CameraActor                                            (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// float                                   NewFocusDistance                                       (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UBGUFunctionLibraryCS::SetCameraFocusDistance(class ACameraActor* CameraActor, float NewFocusDistance)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("BGUFunctionLibraryCS", "SetCameraFocusDistance");

	Params::BGUFunctionLibraryCS_SetCameraFocusDistance Parms{};

	Parms.CameraActor = CameraActor;
	Parms.NewFocusDistance = NewFocusDistance;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function b1-Managed.BGUFunctionLibraryCS.EnterPlayerSkillCamera
// (Native, Static, Public, BlueprintCallable)
// Parameters:
// class UObject*                          WorldContext                                           (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// int32                                   CameraID                                               (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UBGUFunctionLibraryCS::EnterPlayerSkillCamera(class UObject* WorldContext, int32 CameraID)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("BGUFunctionLibraryCS", "EnterPlayerSkillCamera");

	Params::BGUFunctionLibraryCS_EnterPlayerSkillCamera Parms{};

	Parms.WorldContext = WorldContext;
	Parms.CameraID = CameraID;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function b1-Managed.BGUFunctionLibraryCS.BGUSetUnitCritRateBase
// (Native, Static, Public, BlueprintCallable)
// Parameters:
// class AActor*                           Unit                                                   (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// float                                   CritRate                                               (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UBGUFunctionLibraryCS::BGUSetUnitCritRateBase(class AActor* Unit, float CritRate)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("BGUFunctionLibraryCS", "BGUSetUnitCritRateBase");

	Params::BGUFunctionLibraryCS_BGUSetUnitCritRateBase Parms{};

	Parms.Unit = Unit;
	Parms.CritRate = CritRate;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function b1-Managed.BGUFunctionLibraryCS.BGUHandleAbnormalState
// (Native, Static, Public, BlueprintCallable)
// Parameters:
// class AActor*                           Attacker                                               (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// class AActor*                           Victim                                                 (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// struct FAbnormalStateAccConfig          Config                                                 (Parm, HasGetValueTypeHash)
// float                                   AddValue                                               (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UBGUFunctionLibraryCS::BGUHandleAbnormalState(class AActor* Attacker, class AActor* Victim, const struct FAbnormalStateAccConfig& Config, float AddValue)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("BGUFunctionLibraryCS", "BGUHandleAbnormalState");

	Params::BGUFunctionLibraryCS_BGUHandleAbnormalState Parms{};

	Parms.Attacker = Attacker;
	Parms.Victim = Victim;
	Parms.Config = std::move(Config);
	Parms.AddValue = AddValue;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function b1-Managed.BGUFunctionLibraryCS.TryGetComponentByFName
// (Native, Static, Public, HasOutParams, BlueprintCallable)
// Parameters:
// class AActor*                           Actor                                                  (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// class FName                             Name_0                                                 (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// class UActorComponent*                  ReturnValue                                            (ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

class UActorComponent* UBGUFunctionLibraryCS::TryGetComponentByFName(class AActor* Actor, class FName Name_0)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("BGUFunctionLibraryCS", "TryGetComponentByFName");

	Params::BGUFunctionLibraryCS_TryGetComponentByFName Parms{};

	Parms.Actor = Actor;
	Parms.Name_0 = Name_0;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function b1-Managed.BGUFunctionLibraryCS.BGUGetCurrentUserType
// (Native, Static, Public, HasOutParams, BlueprintCallable, BlueprintPure)
// Parameters:
// int32                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

int32 UBGUFunctionLibraryCS::BGUGetCurrentUserType()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("BGUFunctionLibraryCS", "BGUGetCurrentUserType");

	Params::BGUFunctionLibraryCS_BGUGetCurrentUserType Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function b1-Managed.BGUFunctionLibraryCS.BGUCallPointsRegister
// (Native, Static, Public, BlueprintCallable)
// Parameters:
// class AActor*                           OwnerCharacter                                         (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// int32                                   RequestID                                              (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// EPointsGenType                          GenType                                                (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// struct FPointsGenExtParam               ExtParam                                               (Parm, HasGetValueTypeHash)

void UBGUFunctionLibraryCS::BGUCallPointsRegister(class AActor* OwnerCharacter, int32 RequestID, EPointsGenType GenType, const struct FPointsGenExtParam& ExtParam)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("BGUFunctionLibraryCS", "BGUCallPointsRegister");

	Params::BGUFunctionLibraryCS_BGUCallPointsRegister Parms{};

	Parms.OwnerCharacter = OwnerCharacter;
	Parms.RequestID = RequestID;
	Parms.GenType = GenType;
	Parms.ExtParam = std::move(ExtParam);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function b1-Managed.BGUFunctionLibraryCS.BGUSetSkillSuperArmor
// (Native, Static, Public, BlueprintCallable)
// Parameters:
// class AActor*                           Unit                                                   (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// class UAnimMontage*                     BreakSkillSupperArmorAM                                (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// float                                   SkillSuperArmorValue                                   (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UBGUFunctionLibraryCS::BGUSetSkillSuperArmor(class AActor* Unit, class UAnimMontage* BreakSkillSupperArmorAM, float SkillSuperArmorValue)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("BGUFunctionLibraryCS", "BGUSetSkillSuperArmor");

	Params::BGUFunctionLibraryCS_BGUSetSkillSuperArmor Parms{};

	Parms.Unit = Unit;
	Parms.BreakSkillSupperArmorAM = BreakSkillSupperArmorAM;
	Parms.SkillSuperArmorValue = SkillSuperArmorValue;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function b1-Managed.BGUFunctionLibraryCS.BGUSetUnitSimpleState
// (Native, Static, Public, BlueprintCallable)
// Parameters:
// class AActor*                           Unit                                                   (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// EBGUSimpleState                         SimpleState                                            (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// uint8                                   IsRemove                                               (Parm, NoDestructor, HasGetValueTypeHash)

void UBGUFunctionLibraryCS::BGUSetUnitSimpleState(class AActor* Unit, EBGUSimpleState SimpleState, uint8 IsRemove)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("BGUFunctionLibraryCS", "BGUSetUnitSimpleState");

	Params::BGUFunctionLibraryCS_BGUSetUnitSimpleState Parms{};

	Parms.Unit = Unit;
	Parms.SimpleState = SimpleState;
	Parms.IsRemove = IsRemove;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function b1-Managed.BGUFunctionLibraryCS.BGUUnitCastFaBaoSkill
// (Native, Static, Public, BlueprintCallable)
// Parameters:
// class AActor*                           Unit                                                   (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UBGUFunctionLibraryCS::BGUUnitCastFaBaoSkill(class AActor* Unit)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("BGUFunctionLibraryCS", "BGUUnitCastFaBaoSkill");

	Params::BGUFunctionLibraryCS_BGUUnitCastFaBaoSkill Parms{};

	Parms.Unit = Unit;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function b1-Managed.BGUFunctionLibraryCS.TriggerEffectToTarget
// (Native, Static, Public, BlueprintCallable)
// Parameters:
// class AActor*                           Unit                                                   (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// int32                                   EffectID                                               (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// class AActor*                           Target                                                 (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UBGUFunctionLibraryCS::TriggerEffectToTarget(class AActor* Unit, int32 EffectID, class AActor* Target)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("BGUFunctionLibraryCS", "TriggerEffectToTarget");

	Params::BGUFunctionLibraryCS_TriggerEffectToTarget Parms{};

	Parms.Unit = Unit;
	Parms.EffectID = EffectID;
	Parms.Target = Target;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function b1-Managed.BGUFunctionLibraryCS.CheckCurCeilingHeight
// (Native, Static, Public, HasOutParams, BlueprintCallable)
// Parameters:
// class ACharacter*                       Character                                              (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// float                                   LineTraceLength                                        (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// float                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

float UBGUFunctionLibraryCS::CheckCurCeilingHeight(class ACharacter* Character, float LineTraceLength)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("BGUFunctionLibraryCS", "CheckCurCeilingHeight");

	Params::BGUFunctionLibraryCS_CheckCurCeilingHeight Parms{};

	Parms.Character = Character;
	Parms.LineTraceLength = LineTraceLength;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function b1-Managed.BGUFunctionLibraryCS.BGUHasUnitSimpleState
// (Native, Static, Public, HasOutParams, BlueprintCallable, BlueprintPure)
// Parameters:
// class AActor*                           Unit                                                   (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// EBGUSimpleState                         SimpleState                                            (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// uint8                                   ReturnValue                                            (Parm, OutParm, ReturnParm, NoDestructor, HasGetValueTypeHash)

uint8 UBGUFunctionLibraryCS::BGUHasUnitSimpleState(class AActor* Unit, EBGUSimpleState SimpleState)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("BGUFunctionLibraryCS", "BGUHasUnitSimpleState");

	Params::BGUFunctionLibraryCS_BGUHasUnitSimpleState Parms{};

	Parms.Unit = Unit;
	Parms.SimpleState = SimpleState;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function b1-Managed.BGUFunctionLibraryCS.ExitPlayerSkillCamera
// (Native, Static, Public, BlueprintCallable)
// Parameters:
// class UObject*                          WorldContext                                           (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UBGUFunctionLibraryCS::ExitPlayerSkillCamera(class UObject* WorldContext)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("BGUFunctionLibraryCS", "ExitPlayerSkillCamera");

	Params::BGUFunctionLibraryCS_ExitPlayerSkillCamera Parms{};

	Parms.WorldContext = WorldContext;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function b1-Managed.BGUFunctionLibraryCS.EnterWeakPerformState
// (Native, Static, Public, BlueprintCallable)
// Parameters:
// class UObject*                          InWorldContext                                         (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// int32                                   ConfigID                                               (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UBGUFunctionLibraryCS::EnterWeakPerformState(class UObject* InWorldContext, int32 ConfigID)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("BGUFunctionLibraryCS", "EnterWeakPerformState");

	Params::BGUFunctionLibraryCS_EnterWeakPerformState Parms{};

	Parms.InWorldContext = InWorldContext;
	Parms.ConfigID = ConfigID;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function b1-Managed.BGUFunctionLibraryCS.HandleAiConversation
// (Native, Static, Public, BlueprintCallable)
// Parameters:
// class AActor*                           Caster                                                 (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// int32                                   ConversationContentID                                  (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UBGUFunctionLibraryCS::HandleAiConversation(class AActor* Caster, int32 ConversationContentID)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("BGUFunctionLibraryCS", "HandleAiConversation");

	Params::BGUFunctionLibraryCS_HandleAiConversation Parms{};

	Parms.Caster = Caster;
	Parms.ConversationContentID = ConversationContentID;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function b1-Managed.BGUFunctionLibraryCS.SetTamerStrategyArea
// (Native, Static, Public, BlueprintCallable)
// Parameters:
// class UObject*                          InWorldContext                                         (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// ETamerStrategyArea                      InArea                                                 (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UBGUFunctionLibraryCS::SetTamerStrategyArea(class UObject* InWorldContext, ETamerStrategyArea InArea)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("BGUFunctionLibraryCS", "SetTamerStrategyArea");

	Params::BGUFunctionLibraryCS_SetTamerStrategyArea Parms{};

	Parms.InWorldContext = InWorldContext;
	Parms.InArea = InArea;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function b1-Managed.BGUFunctionLibraryCS.GetProjectBranchName
// (Native, Static, Public, HasOutParams, BlueprintCallable)
// Parameters:
// class FString                           ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash)

class FString UBGUFunctionLibraryCS::GetProjectBranchName()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("BGUFunctionLibraryCS", "GetProjectBranchName");

	Params::BGUFunctionLibraryCS_GetProjectBranchName Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function b1-Managed.BGUFunctionLibraryCS.BGUGetActiveGameMode
// (Native, Static, Public, HasOutParams, BlueprintCallable, BlueprintPure)
// Parameters:
// int32                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

int32 UBGUFunctionLibraryCS::BGUGetActiveGameMode()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("BGUFunctionLibraryCS", "BGUGetActiveGameMode");

	Params::BGUFunctionLibraryCS_BGUGetActiveGameMode Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function b1-Managed.BGUFunctionLibraryCS.TriggerSwitchPhysics
// (Native, Static, Public, HasOutParams, BlueprintCallable)
// Parameters:
// class AActor*                           Unit                                                   (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// int32                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

int32 UBGUFunctionLibraryCS::TriggerSwitchPhysics(class AActor* Unit)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("BGUFunctionLibraryCS", "TriggerSwitchPhysics");

	Params::BGUFunctionLibraryCS_TriggerSwitchPhysics Parms{};

	Parms.Unit = Unit;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function b1-Managed.BGUFunctionLibraryCS.SwitchFreeCameraMode
// (Native, Static, Public, BlueprintCallable)
// Parameters:
// class UObject*                          InWorldContext                                         (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UBGUFunctionLibraryCS::SwitchFreeCameraMode(class UObject* InWorldContext)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("BGUFunctionLibraryCS", "SwitchFreeCameraMode");

	Params::BGUFunctionLibraryCS_SwitchFreeCameraMode Parms{};

	Parms.InWorldContext = InWorldContext;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function b1-Managed.BGUFunctionLibraryCS.DestroyAllProjectile
// (Native, Static, Public, BlueprintCallable)
// Parameters:
// class AActor*                           Unit                                                   (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UBGUFunctionLibraryCS::DestroyAllProjectile(class AActor* Unit)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("BGUFunctionLibraryCS", "DestroyAllProjectile");

	Params::BGUFunctionLibraryCS_DestroyAllProjectile Parms{};

	Parms.Unit = Unit;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function b1-Managed.BGUFunctionLibraryCS.BGUGetCachedPointSet
// (Native, Static, Public, HasOutParams, BlueprintCallable)
// Parameters:
// class AActor*                           OwnerCharacter                                         (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// int32                                   RequestID                                              (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// TArray<struct FVector>                  ReturnValue                                            (Parm, OutParm, ReturnParm)

TArray<struct FVector> UBGUFunctionLibraryCS::BGUGetCachedPointSet(class AActor* OwnerCharacter, int32 RequestID)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("BGUFunctionLibraryCS", "BGUGetCachedPointSet");

	Params::BGUFunctionLibraryCS_BGUGetCachedPointSet Parms{};

	Parms.OwnerCharacter = OwnerCharacter;
	Parms.RequestID = RequestID;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function b1-Managed.BGUFunctionLibraryCS.ExitWeakPerformState
// (Native, Static, Public, BlueprintCallable)
// Parameters:
// class UObject*                          InWorldContext                                         (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UBGUFunctionLibraryCS::ExitWeakPerformState(class UObject* InWorldContext)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("BGUFunctionLibraryCS", "ExitWeakPerformState");

	Params::BGUFunctionLibraryCS_ExitWeakPerformState Parms{};

	Parms.InWorldContext = InWorldContext;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function b1-Managed.BGUFunctionLibraryCS.BGUPlatformPatroRota
// (Native, Static, Public, BlueprintCallable)
// Parameters:
// class AActor*                           Unit                                                   (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// int32                                   MaxRate                                                (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// float                                   Speed                                                  (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UBGUFunctionLibraryCS::BGUPlatformPatroRota(class AActor* Unit, int32 MaxRate, float Speed)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("BGUFunctionLibraryCS", "BGUPlatformPatroRota");

	Params::BGUFunctionLibraryCS_BGUPlatformPatroRota Parms{};

	Parms.Unit = Unit;
	Parms.MaxRate = MaxRate;
	Parms.Speed = Speed;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function b1-Managed.BGUFunctionLibraryCS.BGUPlatformPatroMove
// (Native, Static, Public, BlueprintCallable)
// Parameters:
// class AActor*                           Unit                                                   (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// struct FVector                          BeginPos                                               (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// struct FVector                          EndPos                                                 (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// float                                   Speed                                                  (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UBGUFunctionLibraryCS::BGUPlatformPatroMove(class AActor* Unit, const struct FVector& BeginPos, const struct FVector& EndPos, float Speed)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("BGUFunctionLibraryCS", "BGUPlatformPatroMove");

	Params::BGUFunctionLibraryCS_BGUPlatformPatroMove Parms{};

	Parms.Unit = Unit;
	Parms.BeginPos = std::move(BeginPos);
	Parms.EndPos = std::move(EndPos);
	Parms.Speed = Speed;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function b1-Managed.BGUFunctionLibraryCS.ClearPhysAnimSetting
// (Native, Static, Public, HasOutParams, BlueprintCallable)
// Parameters:
// class AActor*                           Unit                                                   (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// int32                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

int32 UBGUFunctionLibraryCS::ClearPhysAnimSetting(class AActor* Unit)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("BGUFunctionLibraryCS", "ClearPhysAnimSetting");

	Params::BGUFunctionLibraryCS_ClearPhysAnimSetting Parms{};

	Parms.Unit = Unit;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function b1-Managed.BGUFunctionLibraryCS.SkipCurrentSequence
// (Native, Static, Public, BlueprintCallable)
// Parameters:
// class UObject*                          WorldContext                                           (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UBGUFunctionLibraryCS::SkipCurrentSequence(class UObject* WorldContext)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("BGUFunctionLibraryCS", "SkipCurrentSequence");

	Params::BGUFunctionLibraryCS_SkipCurrentSequence Parms{};

	Parms.WorldContext = WorldContext;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function b1-Managed.BGUFunctionLibraryCS.BGUSetSecondFogData
// (Native, Static, Public, BlueprintCallable)
// Parameters:
// class UExponentialHeightFogComponent*   Ehfcomp                                                (ExportObject, Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// struct FExponentialHeightFogData        SecondFogData                                          (Parm, NoDestructor)

void UBGUFunctionLibraryCS::BGUSetSecondFogData(class UExponentialHeightFogComponent* Ehfcomp, const struct FExponentialHeightFogData& SecondFogData)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("BGUFunctionLibraryCS", "BGUSetSecondFogData");

	Params::BGUFunctionLibraryCS_BGUSetSecondFogData Parms{};

	Parms.Ehfcomp = Ehfcomp;
	Parms.SecondFogData = std::move(SecondFogData);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function b1-Managed.BGUFunctionLibraryCS.BGUGetWeaponByIndex
// (Native, Static, Public, HasOutParams, BlueprintCallable)
// Parameters:
// class AActor*                           Owner                                                  (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// int32                                   Index_0                                                (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// class AActor*                           ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

class AActor* UBGUFunctionLibraryCS::BGUGetWeaponByIndex(class AActor* Owner, int32 Index_0)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("BGUFunctionLibraryCS", "BGUGetWeaponByIndex");

	Params::BGUFunctionLibraryCS_BGUGetWeaponByIndex Parms{};

	Parms.Owner = Owner;
	Parms.Index_0 = Index_0;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function b1-Managed.BGUFunctionLibraryCS.FindTraceStatResult
// (Native, Static, Public, HasOutParams, BlueprintCallable)
// Parameters:
// class UObject*                          WorldContext                                           (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// class FString                           Name_0                                                 (Parm, ZeroConstructor, HasGetValueTypeHash)
// float                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

float UBGUFunctionLibraryCS::FindTraceStatResult(class UObject* WorldContext, const class FString& Name_0)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("BGUFunctionLibraryCS", "FindTraceStatResult");

	Params::BGUFunctionLibraryCS_FindTraceStatResult Parms{};

	Parms.WorldContext = WorldContext;
	Parms.Name_0 = std::move(Name_0);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function b1-Managed.BGUFunctionLibraryCS.BGUUnitUnequipFaBao
// (Native, Static, Public, BlueprintCallable)
// Parameters:
// class AActor*                           Unit                                                   (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UBGUFunctionLibraryCS::BGUUnitUnequipFaBao(class AActor* Unit)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("BGUFunctionLibraryCS", "BGUUnitUnequipFaBao");

	Params::BGUFunctionLibraryCS_BGUUnitUnequipFaBao Parms{};

	Parms.Unit = Unit;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function b1-Managed.BGUFunctionLibraryCS.DisablePhysicalMove
// (Native, Static, Public, BlueprintCallable)
// Parameters:
// class AActor*                           Unit                                                   (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// uint8                                   bDisable                                               (Parm, NoDestructor, HasGetValueTypeHash)

void UBGUFunctionLibraryCS::DisablePhysicalMove(class AActor* Unit, uint8 bDisable)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("BGUFunctionLibraryCS", "DisablePhysicalMove");

	Params::BGUFunctionLibraryCS_DisablePhysicalMove Parms{};

	Parms.Unit = Unit;
	Parms.bDisable = bDisable;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function b1-Managed.BGUFunctionLibraryCS.BGUTriggerUnitState
// (Native, Static, Public, BlueprintCallable)
// Parameters:
// class AActor*                           Actor                                                  (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// EBUStateTrigger                         StateTrigger                                           (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// float                                   Time                                                   (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UBGUFunctionLibraryCS::BGUTriggerUnitState(class AActor* Actor, EBUStateTrigger StateTrigger, float Time)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("BGUFunctionLibraryCS", "BGUTriggerUnitState");

	Params::BGUFunctionLibraryCS_BGUTriggerUnitState Parms{};

	Parms.Actor = Actor;
	Parms.StateTrigger = StateTrigger;
	Parms.Time = Time;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function b1-Managed.BGUFunctionLibraryCS.BGURemoveImmobility
// (Native, Static, Public, BlueprintCallable)
// Parameters:
// class AActor*                           Unit                                                   (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UBGUFunctionLibraryCS::BGURemoveImmobility(class AActor* Unit)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("BGUFunctionLibraryCS", "BGURemoveImmobility");

	Params::BGUFunctionLibraryCS_BGURemoveImmobility Parms{};

	Parms.Unit = Unit;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function b1-Managed.BGUFunctionLibraryCS.BGUToggleGlobalURO
// (Native, Static, Public, BlueprintCallable)
// Parameters:
// class UObject*                          UObj                                                   (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// uint8                                   bEnable                                                (Parm, NoDestructor, HasGetValueTypeHash)

void UBGUFunctionLibraryCS::BGUToggleGlobalURO(class UObject* UObj, uint8 bEnable)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("BGUFunctionLibraryCS", "BGUToggleGlobalURO");

	Params::BGUFunctionLibraryCS_BGUToggleGlobalURO Parms{};

	Parms.UObj = UObj;
	Parms.bEnable = bEnable;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function b1-Managed.BGUFunctionLibraryCS.SwitchLanguageEnZh
// (Native, Static, Public, BlueprintCallable)

void UBGUFunctionLibraryCS::SwitchLanguageEnZh()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("BGUFunctionLibraryCS", "SwitchLanguageEnZh");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function b1-Managed.BGUFunctionLibraryCS.BGUSpawnGhostActor
// (Native, Static, Public, BlueprintCallable)
// Parameters:
// class AActor*                           Target                                                 (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// class FString                           DAPath                                                 (Parm, ZeroConstructor, HasGetValueTypeHash)

void UBGUFunctionLibraryCS::BGUSpawnGhostActor(class AActor* Target, const class FString& DAPath)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("BGUFunctionLibraryCS", "BGUSpawnGhostActor");

	Params::BGUFunctionLibraryCS_BGUSpawnGhostActor Parms{};

	Parms.Target = Target;
	Parms.DAPath = std::move(DAPath);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function b1-Managed.BGUFunctionLibraryCS.BGUSetBehaviorTree
// (Native, Static, Public, BlueprintCallable)
// Parameters:
// class AActor*                           Unit                                                   (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// class UBehaviorTree*                    BT                                                     (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UBGUFunctionLibraryCS::BGUSetBehaviorTree(class AActor* Unit, class UBehaviorTree* BT)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("BGUFunctionLibraryCS", "BGUSetBehaviorTree");

	Params::BGUFunctionLibraryCS_BGUSetBehaviorTree Parms{};

	Parms.Unit = Unit;
	Parms.BT = BT;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function b1-Managed.BGUFunctionLibraryCS.KJLSpawnProjectile
// (Native, Static, Public, BlueprintCallable)
// Parameters:
// class AActor*                           BulletSpawner                                          (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// class AActor*                           Target                                                 (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// class FString                           PointGeneratorTag                                      (Parm, ZeroConstructor, HasGetValueTypeHash)
// int32                                   BulletID                                               (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// float                                   LimitDistance_ToPlayer                                 (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// class UNiagaraSystem*                   LightningBeam                                          (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// class FString                           LightningEndParamName                                  (Parm, ZeroConstructor, HasGetValueTypeHash)
// TArray<class FString>                   SocketList                                             (Parm)
// int32                                   DummyBulletNum                                         (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// struct FVector                          EndPos_Noise                                           (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// class UNiagaraComponent*                DummyNiagara                                           (ExportObject, Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// float                                   DummyActiveDistance                                    (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// struct FVector2D                        RandomInterval                                         (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UBGUFunctionLibraryCS::KJLSpawnProjectile(class AActor* BulletSpawner, class AActor* Target, const class FString& PointGeneratorTag, int32 BulletID, float LimitDistance_ToPlayer, class UNiagaraSystem* LightningBeam, const class FString& LightningEndParamName, const TArray<class FString>& SocketList, int32 DummyBulletNum, const struct FVector& EndPos_Noise, class UNiagaraComponent* DummyNiagara, float DummyActiveDistance, const struct FVector2D& RandomInterval)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("BGUFunctionLibraryCS", "KJLSpawnProjectile");

	Params::BGUFunctionLibraryCS_KJLSpawnProjectile Parms{};

	Parms.BulletSpawner = BulletSpawner;
	Parms.Target = Target;
	Parms.PointGeneratorTag = std::move(PointGeneratorTag);
	Parms.BulletID = BulletID;
	Parms.LimitDistance_ToPlayer = LimitDistance_ToPlayer;
	Parms.LightningBeam = LightningBeam;
	Parms.LightningEndParamName = std::move(LightningEndParamName);
	Parms.SocketList = std::move(SocketList);
	Parms.DummyBulletNum = DummyBulletNum;
	Parms.EndPos_Noise = std::move(EndPos_Noise);
	Parms.DummyNiagara = DummyNiagara;
	Parms.DummyActiveDistance = DummyActiveDistance;
	Parms.RandomInterval = std::move(RandomInterval);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function b1-Managed.BGUFunctionLibraryCS.PlayFacialAnimTest
// (Native, Static, Public, BlueprintCallable)
// Parameters:
// uint8                                   bPlay                                                  (Parm, NoDestructor, HasGetValueTypeHash)
// class AActor*                           Unit                                                   (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// class UAnimSequence*                    FacialAnim                                             (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// float                                   TimeOffset                                             (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// float                                   AutoBlendOutTime                                       (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UBGUFunctionLibraryCS::PlayFacialAnimTest(uint8 bPlay, class AActor* Unit, class UAnimSequence* FacialAnim, float TimeOffset, float AutoBlendOutTime)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("BGUFunctionLibraryCS", "PlayFacialAnimTest");

	Params::BGUFunctionLibraryCS_PlayFacialAnimTest Parms{};

	Parms.bPlay = bPlay;
	Parms.Unit = Unit;
	Parms.FacialAnim = FacialAnim;
	Parms.TimeOffset = TimeOffset;
	Parms.AutoBlendOutTime = AutoBlendOutTime;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function b1-Managed.BGUFunctionLibraryCS.InteruptPigsyStory
// (Native, Static, Public, BlueprintCallable)
// Parameters:
// class AActor*                           Unit                                                   (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UBGUFunctionLibraryCS::InteruptPigsyStory(class AActor* Unit)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("BGUFunctionLibraryCS", "InteruptPigsyStory");

	Params::BGUFunctionLibraryCS_InteruptPigsyStory Parms{};

	Parms.Unit = Unit;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function b1-Managed.BGUFunctionLibraryCS.BGUFullTransEnergy
// (Native, Static, Public, BlueprintCallable)
// Parameters:
// class UObject*                          WorldContext                                           (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UBGUFunctionLibraryCS::BGUFullTransEnergy(class UObject* WorldContext)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("BGUFunctionLibraryCS", "BGUFullTransEnergy");

	Params::BGUFunctionLibraryCS_BGUFullTransEnergy Parms{};

	Parms.WorldContext = WorldContext;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function b1-Managed.BGUFunctionLibraryCS.TimeLineNoiseTest
// (Native, Static, Public, BlueprintCallable)
// Parameters:
// float                                   TotalTime                                              (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// int32                                   TimePointNum                                           (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// float                                   NoiseInterregional                                     (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// class UCurveFloat*                      CurveFloat                                             (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// ERichCurveInterpMode                    InterpMode                                             (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UBGUFunctionLibraryCS::TimeLineNoiseTest(float TotalTime, int32 TimePointNum, float NoiseInterregional, class UCurveFloat* CurveFloat, ERichCurveInterpMode InterpMode)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("BGUFunctionLibraryCS", "TimeLineNoiseTest");

	Params::BGUFunctionLibraryCS_TimeLineNoiseTest Parms{};

	Parms.TotalTime = TotalTime;
	Parms.TimePointNum = TimePointNum;
	Parms.NoiseInterregional = NoiseInterregional;
	Parms.CurveFloat = CurveFloat;
	Parms.InterpMode = InterpMode;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function b1-Managed.BGUFunctionLibraryCS.BGUAISetSpeedRate
// (Native, Static, Public, BlueprintCallable)
// Parameters:
// class AActor*                           Unit                                                   (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// float                                   SpeedRate                                              (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UBGUFunctionLibraryCS::BGUAISetSpeedRate(class AActor* Unit, float SpeedRate)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("BGUFunctionLibraryCS", "BGUAISetSpeedRate");

	Params::BGUFunctionLibraryCS_BGUAISetSpeedRate Parms{};

	Parms.Unit = Unit;
	Parms.SpeedRate = SpeedRate;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function b1-Managed.BGUFunctionLibraryCS.BGUPlayLockTarget
// (Native, Static, Public, BlueprintCallable)
// Parameters:
// class AActor*                           Owner                                                  (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// class ABGUCharacterCS*                  TargetChr                                              (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UBGUFunctionLibraryCS::BGUPlayLockTarget(class AActor* Owner, class ABGUCharacterCS* TargetChr)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("BGUFunctionLibraryCS", "BGUPlayLockTarget");

	Params::BGUFunctionLibraryCS_BGUPlayLockTarget Parms{};

	Parms.Owner = Owner;
	Parms.TargetChr = TargetChr;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function b1-Managed.BGUFunctionLibraryCS.SwitchCameraGroup
// (Native, Static, Public, BlueprintCallable)
// Parameters:
// class UObject*                          WorldContext                                           (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// int32                                   CameraGroupId                                          (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UBGUFunctionLibraryCS::SwitchCameraGroup(class UObject* WorldContext, int32 CameraGroupId)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("BGUFunctionLibraryCS", "SwitchCameraGroup");

	Params::BGUFunctionLibraryCS_SwitchCameraGroup Parms{};

	Parms.WorldContext = WorldContext;
	Parms.CameraGroupId = CameraGroupId;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function b1-Managed.BGUFunctionLibraryCS.BGUUnitEquipFaBao
// (Native, Static, Public, BlueprintCallable)
// Parameters:
// class AActor*                           Unit                                                   (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// int32                                   FaBaoID                                                (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UBGUFunctionLibraryCS::BGUUnitEquipFaBao(class AActor* Unit, int32 FaBaoID)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("BGUFunctionLibraryCS", "BGUUnitEquipFaBao");

	Params::BGUFunctionLibraryCS_BGUUnitEquipFaBao Parms{};

	Parms.Unit = Unit;
	Parms.FaBaoID = FaBaoID;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function b1-Managed.BGUFunctionLibraryCS.SetTrainDummyInfo
// (Native, Static, Public, HasOutParams, BlueprintCallable)
// Parameters:
// class UObject*                          WorldContext                                           (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// class FString                           TrainDummyClassPath                                    (Parm, ZeroConstructor, HasGetValueTypeHash)
// int32                                   PlayerRoleDataConfigID                                 (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// class FString                           TrainDummyConfigPath                                   (Parm, ZeroConstructor, HasGetValueTypeHash)
// class FString                           CqgPath                                                (Parm, ZeroConstructor, HasGetValueTypeHash)
// float                                   DPSCalTime                                             (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// uint8                                   ReturnValue                                            (Parm, OutParm, ReturnParm, NoDestructor, HasGetValueTypeHash)

uint8 UBGUFunctionLibraryCS::SetTrainDummyInfo(class UObject* WorldContext, const class FString& TrainDummyClassPath, int32 PlayerRoleDataConfigID, const class FString& TrainDummyConfigPath, const class FString& CqgPath, float DPSCalTime)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("BGUFunctionLibraryCS", "SetTrainDummyInfo");

	Params::BGUFunctionLibraryCS_SetTrainDummyInfo Parms{};

	Parms.WorldContext = WorldContext;
	Parms.TrainDummyClassPath = std::move(TrainDummyClassPath);
	Parms.PlayerRoleDataConfigID = PlayerRoleDataConfigID;
	Parms.TrainDummyConfigPath = std::move(TrainDummyConfigPath);
	Parms.CqgPath = std::move(CqgPath);
	Parms.DPSCalTime = DPSCalTime;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function b1-Managed.BGUFunctionLibraryCS.BGUShowDialogueUI
// (Native, Static, Public, BlueprintCallable)
// Parameters:
// class AActor*                           Unit                                                   (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// class FString                           DialogContent                                          (Parm, ZeroConstructor, HasGetValueTypeHash)
// float                                   Duration                                               (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UBGUFunctionLibraryCS::BGUShowDialogueUI(class AActor* Unit, const class FString& DialogContent, float Duration)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("BGUFunctionLibraryCS", "BGUShowDialogueUI");

	Params::BGUFunctionLibraryCS_BGUShowDialogueUI Parms{};

	Parms.Unit = Unit;
	Parms.DialogContent = std::move(DialogContent);
	Parms.Duration = Duration;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function b1-Managed.BGUFunctionLibraryCS.ResetPhysSetting
// (Native, Static, Public, BlueprintCallable)
// Parameters:
// class AActor*                           Actor                                                  (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UBGUFunctionLibraryCS::ResetPhysSetting(class AActor* Actor)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("BGUFunctionLibraryCS", "ResetPhysSetting");

	Params::BGUFunctionLibraryCS_ResetPhysSetting Parms{};

	Parms.Actor = Actor;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function b1-Managed.BGUFunctionLibraryCS.IsUEDebugGMLevel
// (Native, Static, Public, HasOutParams, BlueprintCallable)
// Parameters:
// uint8                                   ReturnValue                                            (Parm, OutParm, ReturnParm, NoDestructor, HasGetValueTypeHash)

uint8 UBGUFunctionLibraryCS::IsUEDebugGMLevel()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("BGUFunctionLibraryCS", "IsUEDebugGMLevel");

	Params::BGUFunctionLibraryCS_IsUEDebugGMLevel Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function b1-Managed.BGUFunctionLibraryCS.BGURemoveAllBuff
// (Native, Static, Public, BlueprintCallable)
// Parameters:
// class AActor*                           Unit                                                   (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// EBuffEffectTriggerType                  EffectTriggerType                                      (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UBGUFunctionLibraryCS::BGURemoveAllBuff(class AActor* Unit, EBuffEffectTriggerType EffectTriggerType)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("BGUFunctionLibraryCS", "BGURemoveAllBuff");

	Params::BGUFunctionLibraryCS_BGURemoveAllBuff Parms{};

	Parms.Unit = Unit;
	Parms.EffectTriggerType = EffectTriggerType;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function b1-Managed.BGUFunctionLibraryCS.BGUStartSceneQTE
// (Native, Static, Public, BlueprintCallable)
// Parameters:
// class AActor*                           Unit                                                   (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// int32                                   QTEID                                                  (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// class AActor*                           TargetCharacter                                        (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UBGUFunctionLibraryCS::BGUStartSceneQTE(class AActor* Unit, int32 QTEID, class AActor* TargetCharacter)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("BGUFunctionLibraryCS", "BGUStartSceneQTE");

	Params::BGUFunctionLibraryCS_BGUStartSceneQTE Parms{};

	Parms.Unit = Unit;
	Parms.QTEID = QTEID;
	Parms.TargetCharacter = TargetCharacter;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function b1-Managed.BGUFunctionLibraryCS.BGUSetImmobility
// (Native, Static, Public, BlueprintCallable)
// Parameters:
// class AActor*                           Unit                                                   (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// float                                   Timer                                                  (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UBGUFunctionLibraryCS::BGUSetImmobility(class AActor* Unit, float Timer)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("BGUFunctionLibraryCS", "BGUSetImmobility");

	Params::BGUFunctionLibraryCS_BGUSetImmobility Parms{};

	Parms.Unit = Unit;
	Parms.Timer = Timer;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function b1-Managed.BGUFunctionLibraryCS.ToggleCloudMove
// (Native, Static, Public, BlueprintCallable)
// Parameters:
// class AActor*                           Unit                                                   (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UBGUFunctionLibraryCS::ToggleCloudMove(class AActor* Unit)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("BGUFunctionLibraryCS", "ToggleCloudMove");

	Params::BGUFunctionLibraryCS_ToggleCloudMove Parms{};

	Parms.Unit = Unit;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function b1-Managed.BGUFunctionLibraryCS.BGUTryCastSpell
// (Native, Static, Public, HasOutParams, BlueprintCallable)
// Parameters:
// class AActor*                           Unit                                                   (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// int32                                   SkillID                                                (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// ECastSkillSourceType                    SourceType                                             (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// uint8                                   IsUseComboingSection                                   (Parm, NoDestructor, HasGetValueTypeHash)
// int32                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

int32 UBGUFunctionLibraryCS::BGUTryCastSpell(class AActor* Unit, int32 SkillID, ECastSkillSourceType SourceType, uint8 IsUseComboingSection)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("BGUFunctionLibraryCS", "BGUTryCastSpell");

	Params::BGUFunctionLibraryCS_BGUTryCastSpell Parms{};

	Parms.Unit = Unit;
	Parms.SkillID = SkillID;
	Parms.SourceType = SourceType;
	Parms.IsUseComboingSection = IsUseComboingSection;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function b1-Managed.BGUFunctionLibraryCS.BGUSetAttrValue
// (Native, Static, Public, BlueprintCallable)
// Parameters:
// class AActor*                           Unit                                                   (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// EBGUAttrFloat                           AttrID                                                 (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// float                                   TargetValue                                            (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UBGUFunctionLibraryCS::BGUSetAttrValue(class AActor* Unit, EBGUAttrFloat AttrID, float TargetValue)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("BGUFunctionLibraryCS", "BGUSetAttrValue");

	Params::BGUFunctionLibraryCS_BGUSetAttrValue Parms{};

	Parms.Unit = Unit;
	Parms.AttrID = AttrID;
	Parms.TargetValue = TargetValue;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function b1-Managed.BGUFunctionLibraryCS.BGUGetWeaponNum
// (Native, Static, Public, HasOutParams, BlueprintCallable)
// Parameters:
// class AActor*                           Unit                                                   (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// int32                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

int32 UBGUFunctionLibraryCS::BGUGetWeaponNum(class AActor* Unit)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("BGUFunctionLibraryCS", "BGUGetWeaponNum");

	Params::BGUFunctionLibraryCS_BGUGetWeaponNum Parms{};

	Parms.Unit = Unit;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function b1-Managed.BGUFunctionLibraryCS.SetSolverCenter
// (Native, Static, Public, BlueprintCallable)
// Parameters:
// class AActor*                           Unit                                                   (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UBGUFunctionLibraryCS::SetSolverCenter(class AActor* Unit)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("BGUFunctionLibraryCS", "SetSolverCenter");

	Params::BGUFunctionLibraryCS_SetSolverCenter Parms{};

	Parms.Unit = Unit;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function b1-Managed.BGUFunctionLibraryCS.SummonEventTest
// (Native, Static, Public, BlueprintCallable)
// Parameters:
// class AActor*                           Unit                                                   (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UBGUFunctionLibraryCS::SummonEventTest(class AActor* Unit)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("BGUFunctionLibraryCS", "SummonEventTest");

	Params::BGUFunctionLibraryCS_SummonEventTest Parms{};

	Parms.Unit = Unit;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function b1-Managed.BGUFunctionLibraryCS.BGUGetFloatAttr
// (Native, Static, Public, HasOutParams, BlueprintCallable, BlueprintPure)
// Parameters:
// class AActor*                           Unit                                                   (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// EBGUAttrFloat                           AttrID                                                 (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// float                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

float UBGUFunctionLibraryCS::BGUGetFloatAttr(class AActor* Unit, EBGUAttrFloat AttrID)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("BGUFunctionLibraryCS", "BGUGetFloatAttr");

	Params::BGUFunctionLibraryCS_BGUGetFloatAttr Parms{};

	Parms.Unit = Unit;
	Parms.AttrID = AttrID;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function b1-Managed.BGUFunctionLibraryCS.GenerateGrayBox
// (Native, Static, Public, BlueprintCallable)
// Parameters:
// class AActor*                           TempleteActor                                          (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UBGUFunctionLibraryCS::GenerateGrayBox(class AActor* TempleteActor)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("BGUFunctionLibraryCS", "GenerateGrayBox");

	Params::BGUFunctionLibraryCS_GenerateGrayBox Parms{};

	Parms.TempleteActor = TempleteActor;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function b1-Managed.BGUFunctionLibraryCS.GlobalEventTest
// (Native, Static, Public, BlueprintCallable)
// Parameters:
// class AActor*                           Unit                                                   (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// int32                                   Times                                                  (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UBGUFunctionLibraryCS::GlobalEventTest(class AActor* Unit, int32 Times)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("BGUFunctionLibraryCS", "GlobalEventTest");

	Params::BGUFunctionLibraryCS_GlobalEventTest Parms{};

	Parms.Unit = Unit;
	Parms.Times = Times;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function b1-Managed.BGUFunctionLibraryCS.SeqChangeEquip2
// (Native, Static, Public, BlueprintCallable)
// Parameters:
// class ABGUPerformerActor*               SeqActor                                               (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UBGUFunctionLibraryCS::SeqChangeEquip2(class ABGUPerformerActor* SeqActor)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("BGUFunctionLibraryCS", "SeqChangeEquip2");

	Params::BGUFunctionLibraryCS_SeqChangeEquip2 Parms{};

	Parms.SeqActor = SeqActor;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function b1-Managed.BGUFunctionLibraryCS.BGUHasUnitState
// (Native, Static, Public, HasOutParams, BlueprintCallable, BlueprintPure)
// Parameters:
// class AActor*                           Unit                                                   (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// EBGUUnitState                           UnitState                                              (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// uint8                                   ReturnValue                                            (Parm, OutParm, ReturnParm, NoDestructor, HasGetValueTypeHash)

uint8 UBGUFunctionLibraryCS::BGUHasUnitState(class AActor* Unit, EBGUUnitState UnitState)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("BGUFunctionLibraryCS", "BGUHasUnitState");

	Params::BGUFunctionLibraryCS_BGUHasUnitState Parms{};

	Parms.Unit = Unit;
	Parms.UnitState = UnitState;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function b1-Managed.BGUFunctionLibraryCS.IsDebugGMLevel
// (Native, Static, Public, HasOutParams, BlueprintCallable)
// Parameters:
// uint8                                   ReturnValue                                            (Parm, OutParm, ReturnParm, NoDestructor, HasGetValueTypeHash)

uint8 UBGUFunctionLibraryCS::IsDebugGMLevel()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("BGUFunctionLibraryCS", "IsDebugGMLevel");

	Params::BGUFunctionLibraryCS_IsDebugGMLevel Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function b1-Managed.BGUFunctionLibraryCS.IsCheatGMLevel
// (Native, Static, Public, HasOutParams, BlueprintCallable)
// Parameters:
// uint8                                   ReturnValue                                            (Parm, OutParm, ReturnParm, NoDestructor, HasGetValueTypeHash)

uint8 UBGUFunctionLibraryCS::IsCheatGMLevel()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("BGUFunctionLibraryCS", "IsCheatGMLevel");

	Params::BGUFunctionLibraryCS_IsCheatGMLevel Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function b1-Managed.BGUFunctionLibraryCS.BGUHideLevelUI
// (Native, Static, Public, BlueprintCallable)
// Parameters:
// class AActor*                           Unit                                                   (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UBGUFunctionLibraryCS::BGUHideLevelUI(class AActor* Unit)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("BGUFunctionLibraryCS", "BGUHideLevelUI");

	Params::BGUFunctionLibraryCS_BGUHideLevelUI Parms{};

	Parms.Unit = Unit;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function b1-Managed.BGUFunctionLibraryCS.BreakCloudMove
// (Native, Static, Public, BlueprintCallable)
// Parameters:
// class AActor*                           Unit                                                   (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// int32                                   BreakAnimId                                            (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UBGUFunctionLibraryCS::BreakCloudMove(class AActor* Unit, int32 BreakAnimId)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("BGUFunctionLibraryCS", "BreakCloudMove");

	Params::BGUFunctionLibraryCS_BreakCloudMove Parms{};

	Parms.Unit = Unit;
	Parms.BreakAnimId = BreakAnimId;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function b1-Managed.BGUFunctionLibraryCS.BGUClearWeapon
// (Native, Static, Public, BlueprintCallable)
// Parameters:
// class AActor*                           Owner                                                  (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UBGUFunctionLibraryCS::BGUClearWeapon(class AActor* Owner)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("BGUFunctionLibraryCS", "BGUClearWeapon");

	Params::BGUFunctionLibraryCS_BGUClearWeapon Parms{};

	Parms.Owner = Owner;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function b1-Managed.BGUFunctionLibraryCS.SetPhysSetting
// (Native, Static, Public, BlueprintCallable)
// Parameters:
// class AActor*                           Actor                                                  (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// EPhysAnimType                           Type                                                   (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UBGUFunctionLibraryCS::SetPhysSetting(class AActor* Actor, EPhysAnimType Type)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("BGUFunctionLibraryCS", "SetPhysSetting");

	Params::BGUFunctionLibraryCS_SetPhysSetting Parms{};

	Parms.Actor = Actor;
	Parms.Type = Type;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function b1-Managed.BGUFunctionLibraryCS.TestInputEvent
// (Native, Static, Public, BlueprintCallable)
// Parameters:
// struct FKeyEvent                        A                                                      (Parm)

void UBGUFunctionLibraryCS::TestInputEvent(const struct FKeyEvent& A)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("BGUFunctionLibraryCS", "TestInputEvent");

	Params::BGUFunctionLibraryCS_TestInputEvent Parms{};

	Parms.A = std::move(A);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function b1-Managed.BGUFunctionLibraryCS.RunEQSForDebug
// (Native, Static, Public, BlueprintCallable)
// Parameters:
// class AActor*                           Querier                                                (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// class UEnvQuery*                        Env                                                    (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UBGUFunctionLibraryCS::RunEQSForDebug(class AActor* Querier, class UEnvQuery* Env)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("BGUFunctionLibraryCS", "RunEQSForDebug");

	Params::BGUFunctionLibraryCS_RunEQSForDebug Parms{};

	Parms.Querier = Querier;
	Parms.Env = Env;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function b1-Managed.BGUFunctionLibraryCS.PlayPigsyStory
// (Native, Static, Public, BlueprintCallable)
// Parameters:
// class AActor*                           Unit                                                   (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UBGUFunctionLibraryCS::PlayPigsyStory(class AActor* Unit)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("BGUFunctionLibraryCS", "PlayPigsyStory");

	Params::BGUFunctionLibraryCS_PlayPigsyStory Parms{};

	Parms.Unit = Unit;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function b1-Managed.BGUFunctionLibraryCS.BGUHasBuffByID
// (Native, Static, Public, HasOutParams, BlueprintCallable, BlueprintPure)
// Parameters:
// class AActor*                           Unit                                                   (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// int32                                   BuffID                                                 (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// uint8                                   ReturnValue                                            (Parm, OutParm, ReturnParm, NoDestructor, HasGetValueTypeHash)

uint8 UBGUFunctionLibraryCS::BGUHasBuffByID(class AActor* Unit, int32 BuffID)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("BGUFunctionLibraryCS", "BGUHasBuffByID");

	Params::BGUFunctionLibraryCS_BGUHasBuffByID Parms{};

	Parms.Unit = Unit;
	Parms.BuffID = BuffID;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function b1-Managed.BGUFunctionLibraryCS.BGUIsEnemyTeam
// (Native, Static, Public, HasOutParams, BlueprintCallable)
// Parameters:
// class AActor*                           SelfUnit                                               (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// class AActor*                           OtherUnit                                              (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// uint8                                   ReturnValue                                            (Parm, OutParm, ReturnParm, NoDestructor, HasGetValueTypeHash)

uint8 UBGUFunctionLibraryCS::BGUIsEnemyTeam(class AActor* SelfUnit, class AActor* OtherUnit)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("BGUFunctionLibraryCS", "BGUIsEnemyTeam");

	Params::BGUFunctionLibraryCS_BGUIsEnemyTeam Parms{};

	Parms.SelfUnit = SelfUnit;
	Parms.OtherUnit = OtherUnit;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function b1-Managed.BGUFunctionLibraryCS.SeqChangeEquip
// (Native, Static, Public, BlueprintCallable)
// Parameters:
// class ABGUPerformerActor*               SeqActor                                               (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// int32                                   EquipID                                                (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UBGUFunctionLibraryCS::SeqChangeEquip(class ABGUPerformerActor* SeqActor, int32 EquipID)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("BGUFunctionLibraryCS", "SeqChangeEquip");

	Params::BGUFunctionLibraryCS_SeqChangeEquip Parms{};

	Parms.SeqActor = SeqActor;
	Parms.EquipID = EquipID;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function b1-Managed.BGUFunctionLibraryCS.TriggerEffect
// (Native, Static, Public, BlueprintCallable)
// Parameters:
// class AActor*                           Unit                                                   (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// int32                                   EffectID                                               (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UBGUFunctionLibraryCS::TriggerEffect(class AActor* Unit, int32 EffectID)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("BGUFunctionLibraryCS", "TriggerEffect");

	Params::BGUFunctionLibraryCS_TriggerEffect Parms{};

	Parms.Unit = Unit;
	Parms.EffectID = EffectID;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function b1-Managed.BGUFunctionLibraryCS.BGUSpawnActor
// (Native, Static, Public, HasOutParams, BlueprintCallable)
// Parameters:
// class UWorld*                           _World                                                 (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// class UClass*                           ActorClass                                             (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// struct FVector                          Location                                               (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// struct FRotator                         Rotation                                               (Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
// class AActor*                           ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

class AActor* UBGUFunctionLibraryCS::BGUSpawnActor(class UWorld* _World, class UClass* ActorClass, const struct FVector& Location, const struct FRotator& Rotation)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("BGUFunctionLibraryCS", "BGUSpawnActor");

	Params::BGUFunctionLibraryCS_BGUSpawnActor Parms{};

	Parms._World = _World;
	Parms.ActorClass = ActorClass;
	Parms.Location = std::move(Location);
	Parms.Rotation = std::move(Rotation);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function b1-Managed.BGUFunctionLibraryCS.BGURemoveBuff
// (Native, Static, Public, BlueprintCallable)
// Parameters:
// class AActor*                           Unit                                                   (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// int32                                   BuffID                                                 (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// EBuffEffectTriggerType                  EffectTriggerType                                      (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// int32                                   Layer                                                  (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UBGUFunctionLibraryCS::BGURemoveBuff(class AActor* Unit, int32 BuffID, EBuffEffectTriggerType EffectTriggerType, int32 Layer)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("BGUFunctionLibraryCS", "BGURemoveBuff");

	Params::BGUFunctionLibraryCS_BGURemoveBuff Parms{};

	Parms.Unit = Unit;
	Parms.BuffID = BuffID;
	Parms.EffectTriggerType = EffectTriggerType;
	Parms.Layer = Layer;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function b1-Managed.BGUFunctionLibraryCS.BGUIsUnitDead
// (Native, Static, Public, HasOutParams, BlueprintCallable, BlueprintPure)
// Parameters:
// class AActor*                           Unit                                                   (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// uint8                                   ReturnValue                                            (Parm, OutParm, ReturnParm, NoDestructor, HasGetValueTypeHash)

uint8 UBGUFunctionLibraryCS::BGUIsUnitDead(class AActor* Unit)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("BGUFunctionLibraryCS", "BGUIsUnitDead");

	Params::BGUFunctionLibraryCS_BGUIsUnitDead Parms{};

	Parms.Unit = Unit;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function b1-Managed.BGUFunctionLibraryCS.StopFetchTick
// (Native, Static, Public, BlueprintCallable)
// Parameters:
// class UObject*                          WorldContext                                           (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UBGUFunctionLibraryCS::StopFetchTick(class UObject* WorldContext)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("BGUFunctionLibraryCS", "StopFetchTick");

	Params::BGUFunctionLibraryCS_StopFetchTick Parms{};

	Parms.WorldContext = WorldContext;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function b1-Managed.BGUFunctionLibraryCS.RefreshGameDB
// (Native, Static, Public, BlueprintCallable)

void UBGUFunctionLibraryCS::RefreshGameDB()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("BGUFunctionLibraryCS", "RefreshGameDB");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function b1-Managed.BGUFunctionLibraryCS.GetAllEquipId
// (Native, Static, Public, HasOutParams, BlueprintCallable)
// Parameters:
// TArray<int32>                           ReturnValue                                            (Parm, OutParm, ReturnParm)

TArray<int32> UBGUFunctionLibraryCS::GetAllEquipId()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("BGUFunctionLibraryCS", "GetAllEquipId");

	Params::BGUFunctionLibraryCS_GetAllEquipId Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function b1-Managed.BGUFunctionLibraryCS.RunGMCommand
// (Native, Static, Public, BlueprintCallable)
// Parameters:
// class AActor*                           Actor                                                  (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// class FString                           Cmd                                                    (Parm, ZeroConstructor, HasGetValueTypeHash)
// uint8                                   JustRunInBin                                           (Parm, NoDestructor, HasGetValueTypeHash)

void UBGUFunctionLibraryCS::RunGMCommand(class AActor* Actor, const class FString& Cmd, uint8 JustRunInBin)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("BGUFunctionLibraryCS", "RunGMCommand");

	Params::BGUFunctionLibraryCS_RunGMCommand Parms{};

	Parms.Actor = Actor;
	Parms.Cmd = std::move(Cmd);
	Parms.JustRunInBin = JustRunInBin;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function b1-Managed.BGUFunctionLibraryCS.BGUShowFPSUI
// (Native, Static, Public, BlueprintCallable)
// Parameters:
// class AActor*                           Unit                                                   (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UBGUFunctionLibraryCS::BGUShowFPSUI(class AActor* Unit)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("BGUFunctionLibraryCS", "BGUShowFPSUI");

	Params::BGUFunctionLibraryCS_BGUShowFPSUI Parms{};

	Parms.Unit = Unit;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function b1-Managed.BGUFunctionLibraryCS.GetAttrValue
// (Native, Static, Public, HasOutParams, BlueprintCallable, BlueprintPure)
// Parameters:
// class AActor*                           Unit                                                   (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// EBGUAttrFloat                           AttrID                                                 (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// float                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

float UBGUFunctionLibraryCS::GetAttrValue(class AActor* Unit, EBGUAttrFloat AttrID)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("BGUFunctionLibraryCS", "GetAttrValue");

	Params::BGUFunctionLibraryCS_GetAttrValue Parms{};

	Parms.Unit = Unit;
	Parms.AttrID = AttrID;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function b1-Managed.BGUFunctionLibraryCS.SetCameraFOV
// (Native, Static, Public, BlueprintCallable)
// Parameters:
// class ACameraActor*                     CameraActor                                            (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// float                                   NewFOV                                                 (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UBGUFunctionLibraryCS::SetCameraFOV(class ACameraActor* CameraActor, float NewFOV)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("BGUFunctionLibraryCS", "SetCameraFOV");

	Params::BGUFunctionLibraryCS_SetCameraFOV Parms{};

	Parms.CameraActor = CameraActor;
	Parms.NewFOV = NewFOV;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function b1-Managed.BGUFunctionLibraryCS.BGUGetTarget
// (Native, Static, Public, HasOutParams, BlueprintCallable, BlueprintPure)
// Parameters:
// class AActor*                           Unit                                                   (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// class AActor*                           ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

class AActor* UBGUFunctionLibraryCS::BGUGetTarget(class AActor* Unit)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("BGUFunctionLibraryCS", "BGUGetTarget");

	Params::BGUFunctionLibraryCS_BGUGetTarget Parms{};

	Parms.Unit = Unit;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function b1-Managed.BGUFunctionLibraryCS.GetCameraFOV
// (Native, Static, Public, HasOutParams, BlueprintCallable, BlueprintPure)
// Parameters:
// class ACameraActor*                     CameraActor                                            (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// float                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

float UBGUFunctionLibraryCS::GetCameraFOV(class ACameraActor* CameraActor)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("BGUFunctionLibraryCS", "GetCameraFOV");

	Params::BGUFunctionLibraryCS_GetCameraFOV Parms{};

	Parms.CameraActor = CameraActor;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function b1-Managed.BGUFunctionLibraryCS.CanShutdown
// (Native, Static, Public, HasOutParams, BlueprintCallable)
// Parameters:
// class UObject*                          WorldContext                                           (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// uint8                                   ReturnValue                                            (Parm, OutParm, ReturnParm, NoDestructor, HasGetValueTypeHash)

uint8 UBGUFunctionLibraryCS::CanShutdown(class UObject* WorldContext)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("BGUFunctionLibraryCS", "CanShutdown");

	Params::BGUFunctionLibraryCS_CanShutdown Parms{};

	Parms.WorldContext = WorldContext;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function b1-Managed.BGUFunctionLibraryCS.BGUTestEnum
// (Native, Static, Public, BlueprintCallable)
// Parameters:
// class AActor*                           Unit                                                   (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// EBGUSimpleState                         SimpleState                                            (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UBGUFunctionLibraryCS::BGUTestEnum(class AActor* Unit, EBGUSimpleState SimpleState)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("BGUFunctionLibraryCS", "BGUTestEnum");

	Params::BGUFunctionLibraryCS_BGUTestEnum Parms{};

	Parms.Unit = Unit;
	Parms.SimpleState = SimpleState;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function b1-Managed.BGUFunctionLibraryCS.PlayUISound
// (Native, Static, Public, HasOutParams, BlueprintCallable)
// Parameters:
// class UObject*                          InWorldContext                                         (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// class UAkAudioEvent*                    InAudioEvent                                           (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// int32                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

int32 UBGUFunctionLibraryCS::PlayUISound(class UObject* InWorldContext, class UAkAudioEvent* InAudioEvent)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("BGUFunctionLibraryCS", "PlayUISound");

	Params::BGUFunctionLibraryCS_PlayUISound Parms{};

	Parms.InWorldContext = InWorldContext;
	Parms.InAudioEvent = InAudioEvent;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function b1-Managed.BGUFunctionLibraryCS.BGUCostAttr
// (Native, Static, Public, BlueprintCallable)
// Parameters:
// class AActor*                           Unit                                                   (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// EAttrCostType                           AttrCostType                                           (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// float                                   CostBase                                               (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// float                                   CostRatio                                              (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UBGUFunctionLibraryCS::BGUCostAttr(class AActor* Unit, EAttrCostType AttrCostType, float CostBase, float CostRatio)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("BGUFunctionLibraryCS", "BGUCostAttr");

	Params::BGUFunctionLibraryCS_BGUCostAttr Parms{};

	Parms.Unit = Unit;
	Parms.AttrCostType = AttrCostType;
	Parms.CostBase = CostBase;
	Parms.CostRatio = CostRatio;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function b1-Managed.BGUFunctionLibraryCS.ChangeEquip
// (Native, Static, Public, BlueprintCallable)
// Parameters:
// class APawn*                            Actor                                                  (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// int32                                   ID                                                     (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UBGUFunctionLibraryCS::ChangeEquip(class APawn* Actor, int32 ID)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("BGUFunctionLibraryCS", "ChangeEquip");

	Params::BGUFunctionLibraryCS_ChangeEquip Parms{};

	Parms.Actor = Actor;
	Parms.ID = ID;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function b1-Managed.BGUFunctionLibraryCS.DicSortTest
// (Native, Static, Public, BlueprintCallable)
// Parameters:
// class AActor*                           Unit                                                   (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UBGUFunctionLibraryCS::DicSortTest(class AActor* Unit)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("BGUFunctionLibraryCS", "DicSortTest");

	Params::BGUFunctionLibraryCS_DicSortTest Parms{};

	Parms.Unit = Unit;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function b1-Managed.BGUFunctionLibraryCS.BGUGetResID
// (Native, Static, Public, HasOutParams, BlueprintCallable)
// Parameters:
// class AActor*                           Unit                                                   (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// int32                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

int32 UBGUFunctionLibraryCS::BGUGetResID(class AActor* Unit)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("BGUFunctionLibraryCS", "BGUGetResID");

	Params::BGUFunctionLibraryCS_BGUGetResID Parms{};

	Parms.Unit = Unit;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function b1-Managed.BGUFunctionLibraryCS.UnitSuicide
// (Native, Static, Public, BlueprintCallable)
// Parameters:
// class AActor*                           Unit                                                   (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UBGUFunctionLibraryCS::UnitSuicide(class AActor* Unit)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("BGUFunctionLibraryCS", "UnitSuicide");

	Params::BGUFunctionLibraryCS_UnitSuicide Parms{};

	Parms.Unit = Unit;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function b1-Managed.BGUFunctionLibraryCS.BGUHasBuff
// (Native, Static, Public, HasOutParams, BlueprintCallable, BlueprintPure)
// Parameters:
// class AActor*                           Unit                                                   (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// EBPBuffID                               BuffID                                                 (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// uint8                                   ReturnValue                                            (Parm, OutParm, ReturnParm, NoDestructor, HasGetValueTypeHash)

uint8 UBGUFunctionLibraryCS::BGUHasBuff(class AActor* Unit, EBPBuffID BuffID)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("BGUFunctionLibraryCS", "BGUHasBuff");

	Params::BGUFunctionLibraryCS_BGUHasBuff Parms{};

	Parms.Unit = Unit;
	Parms.BuffID = BuffID;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function b1-Managed.BGUFunctionLibraryCS.TestVector
// (Native, Static, Public, BlueprintCallable)
// Parameters:
// struct FVector                          A                                                      (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UBGUFunctionLibraryCS::TestVector(const struct FVector& A)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("BGUFunctionLibraryCS", "TestVector");

	Params::BGUFunctionLibraryCS_TestVector Parms{};

	Parms.A = std::move(A);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function b1-Managed.BGUFunctionLibraryCS.BGUDBCTest
// (Native, Static, Public, BlueprintCallable)
// Parameters:
// class AActor*                           Owner                                                  (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// class FString                           DBCPath                                                (Parm, ZeroConstructor, HasGetValueTypeHash)

void UBGUFunctionLibraryCS::BGUDBCTest(class AActor* Owner, const class FString& DBCPath)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("BGUFunctionLibraryCS", "BGUDBCTest");

	Params::BGUFunctionLibraryCS_BGUDBCTest Parms{};

	Parms.Owner = Owner;
	Parms.DBCPath = std::move(DBCPath);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function b1-Managed.BGUFunctionLibraryCS.GetRTForFX
// (Native, Static, Public, HasOutParams, BlueprintCallable, BlueprintPure)
// Parameters:
// class AActor*                           OwnerActor                                             (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// ERenderTargetType                       RTType                                                 (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// class UTextureRenderTarget2D*           ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

class UTextureRenderTarget2D* UBGUFunctionLibraryCS::GetRTForFX(class AActor* OwnerActor, ERenderTargetType RTType)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("BGUFunctionLibraryCS", "GetRTForFX");

	Params::BGUFunctionLibraryCS_GetRTForFX Parms{};

	Parms.OwnerActor = OwnerActor;
	Parms.RTType = RTType;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function b1-Managed.BGUFunctionLibraryCS.BGUAddBuff
// (Native, Static, Public, BlueprintCallable)
// Parameters:
// class AActor*                           Caster                                                 (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// class AActor*                           Target                                                 (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// int32                                   BuffID                                                 (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// EBuffSourceType                         BuffSourceType                                         (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// float                                   BuffDurationTimer                                      (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UBGUFunctionLibraryCS::BGUAddBuff(class AActor* Caster, class AActor* Target, int32 BuffID, EBuffSourceType BuffSourceType, float BuffDurationTimer)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("BGUFunctionLibraryCS", "BGUAddBuff");

	Params::BGUFunctionLibraryCS_BGUAddBuff Parms{};

	Parms.Caster = Caster;
	Parms.Target = Target;
	Parms.BuffID = BuffID;
	Parms.BuffSourceType = BuffSourceType;
	Parms.BuffDurationTimer = BuffDurationTimer;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function b1-Managed.BGUFunctionLibraryCS.GM_AddAttr
// (Native, Static, Public, BlueprintCallable)
// Parameters:
// class AActor*                           Unit                                                   (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// EBGUAttrFloat                           AttrType                                               (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// float                                   AddValue                                               (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UBGUFunctionLibraryCS::GM_AddAttr(class AActor* Unit, EBGUAttrFloat AttrType, float AddValue)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("BGUFunctionLibraryCS", "GM_AddAttr");

	Params::BGUFunctionLibraryCS_GM_AddAttr Parms{};

	Parms.Unit = Unit;
	Parms.AttrType = AttrType;
	Parms.AddValue = AddValue;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function b1-Managed.BGUFunctionLibraryCS.BGUGMDead
// (Native, Static, Public, BlueprintCallable)
// Parameters:
// class AActor*                           Unit                                                   (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UBGUFunctionLibraryCS::BGUGMDead(class AActor* Unit)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("BGUFunctionLibraryCS", "BGUGMDead");

	Params::BGUFunctionLibraryCS_BGUGMDead Parms{};

	Parms.Unit = Unit;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function b1-Managed.BED_FSMNode_GI_Loading_QuitGame.PostPropertyChanged
// (Native, Event, Public, BlueprintEvent)
// Parameters:
// class FString                           MemberName                                             (Parm, ZeroConstructor, HasGetValueTypeHash)
// class FString                           PropertyName                                           (Parm, ZeroConstructor, HasGetValueTypeHash)

void UBED_FSMNode_GI_Loading_QuitGame::PostPropertyChanged(const class FString& MemberName, const class FString& PropertyName)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BED_FSMNode_GI_Loading_QuitGame", "PostPropertyChanged");

	Params::BED_FSMNode_GI_Loading_QuitGame_PostPropertyChanged Parms{};

	Parms.MemberName = std::move(MemberName);
	Parms.PropertyName = std::move(PropertyName);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function b1-Managed.BED_FSMNode_GI_Loading_QuitGame.GetNodeDescriptionInCS
// (Native, Event, Public, HasOutParams, BlueprintEvent, Const)
// Parameters:
// class FString                           ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash)

class FString UBED_FSMNode_GI_Loading_QuitGame::GetNodeDescriptionInCS() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BED_FSMNode_GI_Loading_QuitGame", "GetNodeDescriptionInCS");

	Params::BED_FSMNode_GI_Loading_QuitGame_GetNodeDescriptionInCS Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function b1-Managed.BED_FSMNode_GI_Loading_InitClientPlayerContainer.PostPropertyChanged
// (Native, Event, Public, BlueprintEvent)
// Parameters:
// class FString                           MemberName                                             (Parm, ZeroConstructor, HasGetValueTypeHash)
// class FString                           PropertyName                                           (Parm, ZeroConstructor, HasGetValueTypeHash)

void UBED_FSMNode_GI_Loading_InitClientPlayerContainer::PostPropertyChanged(const class FString& MemberName, const class FString& PropertyName)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BED_FSMNode_GI_Loading_InitClientPlayerContainer", "PostPropertyChanged");

	Params::BED_FSMNode_GI_Loading_InitClientPlayerContainer_PostPropertyChanged Parms{};

	Parms.MemberName = std::move(MemberName);
	Parms.PropertyName = std::move(PropertyName);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function b1-Managed.BED_FSMNode_GI_Loading_InitClientPlayerContainer.GetNodeDescriptionInCS
// (Native, Event, Public, HasOutParams, BlueprintEvent, Const)
// Parameters:
// class FString                           ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash)

class FString UBED_FSMNode_GI_Loading_InitClientPlayerContainer::GetNodeDescriptionInCS() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BED_FSMNode_GI_Loading_InitClientPlayerContainer", "GetNodeDescriptionInCS");

	Params::BED_FSMNode_GI_Loading_InitClientPlayerContainer_GetNodeDescriptionInCS Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function b1-Managed.BED_FSMNode_GI_Loading_RequestTemplateCreateArchiveData.PostPropertyChanged
// (Native, Event, Public, BlueprintEvent)
// Parameters:
// class FString                           MemberName                                             (Parm, ZeroConstructor, HasGetValueTypeHash)
// class FString                           PropertyName                                           (Parm, ZeroConstructor, HasGetValueTypeHash)

void UBED_FSMNode_GI_Loading_RequestTemplateCreateArchiveData::PostPropertyChanged(const class FString& MemberName, const class FString& PropertyName)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BED_FSMNode_GI_Loading_RequestTemplateCreateArchiveData", "PostPropertyChanged");

	Params::BED_FSMNode_GI_Loading_RequestTemplateCreateArchiveData_PostPropertyChanged Parms{};

	Parms.MemberName = std::move(MemberName);
	Parms.PropertyName = std::move(PropertyName);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function b1-Managed.BED_FSMNode_GI_Loading_RequestTemplateCreateArchiveData.GetNodeDescriptionInCS
// (Native, Event, Public, HasOutParams, BlueprintEvent, Const)
// Parameters:
// class FString                           ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash)

class FString UBED_FSMNode_GI_Loading_RequestTemplateCreateArchiveData::GetNodeDescriptionInCS() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BED_FSMNode_GI_Loading_RequestTemplateCreateArchiveData", "GetNodeDescriptionInCS");

	Params::BED_FSMNode_GI_Loading_RequestTemplateCreateArchiveData_GetNodeDescriptionInCS Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function b1-Managed.BED_FSMNode_GI_Loading_GMRecordRebirthPos.PostPropertyChanged
// (Native, Event, Public, BlueprintEvent)
// Parameters:
// class FString                           MemberName                                             (Parm, ZeroConstructor, HasGetValueTypeHash)
// class FString                           PropertyName                                           (Parm, ZeroConstructor, HasGetValueTypeHash)

void UBED_FSMNode_GI_Loading_GMRecordRebirthPos::PostPropertyChanged(const class FString& MemberName, const class FString& PropertyName)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BED_FSMNode_GI_Loading_GMRecordRebirthPos", "PostPropertyChanged");

	Params::BED_FSMNode_GI_Loading_GMRecordRebirthPos_PostPropertyChanged Parms{};

	Parms.MemberName = std::move(MemberName);
	Parms.PropertyName = std::move(PropertyName);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function b1-Managed.BED_FSMNode_GI_Loading_GMRecordRebirthPos.GetNodeDescriptionInCS
// (Native, Event, Public, HasOutParams, BlueprintEvent, Const)
// Parameters:
// class FString                           ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash)

class FString UBED_FSMNode_GI_Loading_GMRecordRebirthPos::GetNodeDescriptionInCS() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BED_FSMNode_GI_Loading_GMRecordRebirthPos", "GetNodeDescriptionInCS");

	Params::BED_FSMNode_GI_Loading_GMRecordRebirthPos_GetNodeDescriptionInCS Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function b1-Managed.BUAnim_PostProcess_Wukong.BlueprintInitializeAnimation
// (Native, Event, Public, BlueprintEvent)

void UBUAnim_PostProcess_Wukong::BlueprintInitializeAnimation()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BUAnim_PostProcess_Wukong", "BlueprintInitializeAnimation");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function b1-Managed.BUAnim_PostProcess_Wukong.BlueprintUpdateAnimation
// (Native, Event, Public, BlueprintEvent)
// Parameters:
// float                                   DeltaTimeX                                             (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UBUAnim_PostProcess_Wukong::BlueprintUpdateAnimation(float DeltaTimeX)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BUAnim_PostProcess_Wukong", "BlueprintUpdateAnimation");

	Params::BUAnim_PostProcess_Wukong_BlueprintUpdateAnimation Parms{};

	Parms.DeltaTimeX = DeltaTimeX;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function b1-Managed.BED_FSMNode_GI_Loading_RequestTemplatePostEnterLevelFinish.PostPropertyChanged
// (Native, Event, Public, BlueprintEvent)
// Parameters:
// class FString                           MemberName                                             (Parm, ZeroConstructor, HasGetValueTypeHash)
// class FString                           PropertyName                                           (Parm, ZeroConstructor, HasGetValueTypeHash)

void UBED_FSMNode_GI_Loading_RequestTemplatePostEnterLevelFinish::PostPropertyChanged(const class FString& MemberName, const class FString& PropertyName)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BED_FSMNode_GI_Loading_RequestTemplatePostEnterLevelFinish", "PostPropertyChanged");

	Params::BED_FSMNode_GI_Loading_RequestTemplatePostEnterLevelFinish_PostPropertyChanged Parms{};

	Parms.MemberName = std::move(MemberName);
	Parms.PropertyName = std::move(PropertyName);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function b1-Managed.BED_FSMNode_GI_Loading_RequestTemplatePostEnterLevelFinish.GetNodeDescriptionInCS
// (Native, Event, Public, HasOutParams, BlueprintEvent, Const)
// Parameters:
// class FString                           ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash)

class FString UBED_FSMNode_GI_Loading_RequestTemplatePostEnterLevelFinish::GetNodeDescriptionInCS() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BED_FSMNode_GI_Loading_RequestTemplatePostEnterLevelFinish", "GetNodeDescriptionInCS");

	Params::BED_FSMNode_GI_Loading_RequestTemplatePostEnterLevelFinish_GetNodeDescriptionInCS Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function b1-Managed.BED_FSMNode_GI_Loading_LoadingUIBeginFadeAway.PostPropertyChanged
// (Native, Event, Public, BlueprintEvent)
// Parameters:
// class FString                           MemberName                                             (Parm, ZeroConstructor, HasGetValueTypeHash)
// class FString                           PropertyName                                           (Parm, ZeroConstructor, HasGetValueTypeHash)

void UBED_FSMNode_GI_Loading_LoadingUIBeginFadeAway::PostPropertyChanged(const class FString& MemberName, const class FString& PropertyName)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BED_FSMNode_GI_Loading_LoadingUIBeginFadeAway", "PostPropertyChanged");

	Params::BED_FSMNode_GI_Loading_LoadingUIBeginFadeAway_PostPropertyChanged Parms{};

	Parms.MemberName = std::move(MemberName);
	Parms.PropertyName = std::move(PropertyName);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function b1-Managed.BED_FSMNode_GI_Loading_LoadingUIBeginFadeAway.GetNodeDescriptionInCS
// (Native, Event, Public, HasOutParams, BlueprintEvent, Const)
// Parameters:
// class FString                           ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash)

class FString UBED_FSMNode_GI_Loading_LoadingUIBeginFadeAway::GetNodeDescriptionInCS() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BED_FSMNode_GI_Loading_LoadingUIBeginFadeAway", "GetNodeDescriptionInCS");

	Params::BED_FSMNode_GI_Loading_LoadingUIBeginFadeAway_GetNodeDescriptionInCS Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function b1-Managed.BED_FSMNode_GI_Loading_RequestTemplatePreSaveArchive.PostPropertyChanged
// (Native, Event, Public, BlueprintEvent)
// Parameters:
// class FString                           MemberName                                             (Parm, ZeroConstructor, HasGetValueTypeHash)
// class FString                           PropertyName                                           (Parm, ZeroConstructor, HasGetValueTypeHash)

void UBED_FSMNode_GI_Loading_RequestTemplatePreSaveArchive::PostPropertyChanged(const class FString& MemberName, const class FString& PropertyName)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BED_FSMNode_GI_Loading_RequestTemplatePreSaveArchive", "PostPropertyChanged");

	Params::BED_FSMNode_GI_Loading_RequestTemplatePreSaveArchive_PostPropertyChanged Parms{};

	Parms.MemberName = std::move(MemberName);
	Parms.PropertyName = std::move(PropertyName);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function b1-Managed.BED_FSMNode_GI_Loading_RequestTemplatePreSaveArchive.GetNodeDescriptionInCS
// (Native, Event, Public, HasOutParams, BlueprintEvent, Const)
// Parameters:
// class FString                           ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash)

class FString UBED_FSMNode_GI_Loading_RequestTemplatePreSaveArchive::GetNodeDescriptionInCS() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BED_FSMNode_GI_Loading_RequestTemplatePreSaveArchive", "GetNodeDescriptionInCS");

	Params::BED_FSMNode_GI_Loading_RequestTemplatePreSaveArchive_GetNodeDescriptionInCS Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function b1-Managed.BED_FSMNode_GI_Loading_GSGRecoverMuseum.PostPropertyChanged
// (Native, Event, Public, BlueprintEvent)
// Parameters:
// class FString                           MemberName                                             (Parm, ZeroConstructor, HasGetValueTypeHash)
// class FString                           PropertyName                                           (Parm, ZeroConstructor, HasGetValueTypeHash)

void UBED_FSMNode_GI_Loading_GSGRecoverMuseum::PostPropertyChanged(const class FString& MemberName, const class FString& PropertyName)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BED_FSMNode_GI_Loading_GSGRecoverMuseum", "PostPropertyChanged");

	Params::BED_FSMNode_GI_Loading_GSGRecoverMuseum_PostPropertyChanged Parms{};

	Parms.MemberName = std::move(MemberName);
	Parms.PropertyName = std::move(PropertyName);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function b1-Managed.BED_FSMNode_GI_Loading_GSGRecoverMuseum.GetNodeDescriptionInCS
// (Native, Event, Public, HasOutParams, BlueprintEvent, Const)
// Parameters:
// class FString                           ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash)

class FString UBED_FSMNode_GI_Loading_GSGRecoverMuseum::GetNodeDescriptionInCS() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BED_FSMNode_GI_Loading_GSGRecoverMuseum", "GetNodeDescriptionInCS");

	Params::BED_FSMNode_GI_Loading_GSGRecoverMuseum_GetNodeDescriptionInCS Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function b1-Managed.BAN_GSPlayAtkFXOnGround.GSNotifyCS
// (Native, Event, Public, Protected, BlueprintEvent, Const)
// Parameters:
// struct FUStGSNotifyParam                NotifyParam                                            (Parm, ZeroConstructor, IsPlainOldData, NoDestructor)

void UBAN_GSPlayAtkFXOnGround::GSNotifyCS(const struct FUStGSNotifyParam& NotifyParam) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BAN_GSPlayAtkFXOnGround", "GSNotifyCS");

	Params::BAN_GSPlayAtkFXOnGround_GSNotifyCS Parms{};

	Parms.NotifyParam = std::move(NotifyParam);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function b1-Managed.BUS_AreaOverlapComp.OnActorLeave_EnterArea
// (Native, Public, Private)
// Parameters:
// class UPrimitiveComponent*              OverlappedComponent                                    (ExportObject, Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// class AActor*                           OtherActor                                             (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// class UPrimitiveComponent*              OtherComp                                              (ExportObject, Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// int32                                   OtherBodyIndex                                         (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UBUS_AreaOverlapComp::OnActorLeave_EnterArea(class UPrimitiveComponent* OverlappedComponent, class AActor* OtherActor, class UPrimitiveComponent* OtherComp, int32 OtherBodyIndex)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BUS_AreaOverlapComp", "OnActorLeave_EnterArea");

	Params::BUS_AreaOverlapComp_OnActorLeave_EnterArea Parms{};

	Parms.OverlappedComponent = OverlappedComponent;
	Parms.OtherActor = OtherActor;
	Parms.OtherComp = OtherComp;
	Parms.OtherBodyIndex = OtherBodyIndex;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function b1-Managed.BUS_AreaOverlapComp.OnActorEnter_EnterArea
// (Native, Public, Private)
// Parameters:
// class UPrimitiveComponent*              OverlappedComponent                                    (ExportObject, Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// class AActor*                           OtherActor                                             (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// class UPrimitiveComponent*              OtherComp                                              (ExportObject, Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// int32                                   OtherBodyIndex                                         (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// uint8                                   bFromSweep                                             (Parm, NoDestructor, HasGetValueTypeHash)
// struct FHitResult                       SweepResult                                            (Parm, IsPlainOldData, NoDestructor)

void UBUS_AreaOverlapComp::OnActorEnter_EnterArea(class UPrimitiveComponent* OverlappedComponent, class AActor* OtherActor, class UPrimitiveComponent* OtherComp, int32 OtherBodyIndex, uint8 bFromSweep, const struct FHitResult& SweepResult)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BUS_AreaOverlapComp", "OnActorEnter_EnterArea");

	Params::BUS_AreaOverlapComp_OnActorEnter_EnterArea Parms{};

	Parms.OverlappedComponent = OverlappedComponent;
	Parms.OtherActor = OtherActor;
	Parms.OtherComp = OtherComp;
	Parms.OtherBodyIndex = OtherBodyIndex;
	Parms.bFromSweep = bFromSweep;
	Parms.SweepResult = std::move(SweepResult);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function b1-Managed.BUS_AreaOverlapComp.OnActorLeaveActor
// (Native, Public, Private)
// Parameters:
// class AActor*                           OverlappedActor                                        (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// class AActor*                           OtherActor                                             (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UBUS_AreaOverlapComp::OnActorLeaveActor(class AActor* OverlappedActor, class AActor* OtherActor)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BUS_AreaOverlapComp", "OnActorLeaveActor");

	Params::BUS_AreaOverlapComp_OnActorLeaveActor Parms{};

	Parms.OverlappedActor = OverlappedActor;
	Parms.OtherActor = OtherActor;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function b1-Managed.BUS_AreaOverlapComp.OnActorEnterActor
// (Native, Public, Private)
// Parameters:
// class AActor*                           OverlappedActor                                        (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// class AActor*                           OtherActor                                             (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UBUS_AreaOverlapComp::OnActorEnterActor(class AActor* OverlappedActor, class AActor* OtherActor)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BUS_AreaOverlapComp", "OnActorEnterActor");

	Params::BUS_AreaOverlapComp_OnActorEnterActor Parms{};

	Parms.OverlappedActor = OverlappedActor;
	Parms.OtherActor = OtherActor;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function b1-Managed.BUS_DeadZoneLogicComp.PlayerCliffFallRollBack
// (Native, Public, Private)

void UBUS_DeadZoneLogicComp::PlayerCliffFallRollBack()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BUS_DeadZoneLogicComp", "PlayerCliffFallRollBack");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function b1-Managed.BED_FSMNode_GI_Loading_FillLoginRoleData.PostPropertyChanged
// (Native, Event, Public, BlueprintEvent)
// Parameters:
// class FString                           MemberName                                             (Parm, ZeroConstructor, HasGetValueTypeHash)
// class FString                           PropertyName                                           (Parm, ZeroConstructor, HasGetValueTypeHash)

void UBED_FSMNode_GI_Loading_FillLoginRoleData::PostPropertyChanged(const class FString& MemberName, const class FString& PropertyName)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BED_FSMNode_GI_Loading_FillLoginRoleData", "PostPropertyChanged");

	Params::BED_FSMNode_GI_Loading_FillLoginRoleData_PostPropertyChanged Parms{};

	Parms.MemberName = std::move(MemberName);
	Parms.PropertyName = std::move(PropertyName);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function b1-Managed.BED_FSMNode_GI_Loading_FillLoginRoleData.GetNodeDescriptionInCS
// (Native, Event, Public, HasOutParams, BlueprintEvent, Const)
// Parameters:
// class FString                           ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash)

class FString UBED_FSMNode_GI_Loading_FillLoginRoleData::GetNodeDescriptionInCS() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BED_FSMNode_GI_Loading_FillLoginRoleData", "GetNodeDescriptionInCS");

	Params::BED_FSMNode_GI_Loading_FillLoginRoleData_GetNodeDescriptionInCS Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function b1-Managed.BED_FSMNode_GI_Loading_MarkFirstStartGameFlag.PostPropertyChanged
// (Native, Event, Public, BlueprintEvent)
// Parameters:
// class FString                           MemberName                                             (Parm, ZeroConstructor, HasGetValueTypeHash)
// class FString                           PropertyName                                           (Parm, ZeroConstructor, HasGetValueTypeHash)

void UBED_FSMNode_GI_Loading_MarkFirstStartGameFlag::PostPropertyChanged(const class FString& MemberName, const class FString& PropertyName)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BED_FSMNode_GI_Loading_MarkFirstStartGameFlag", "PostPropertyChanged");

	Params::BED_FSMNode_GI_Loading_MarkFirstStartGameFlag_PostPropertyChanged Parms{};

	Parms.MemberName = std::move(MemberName);
	Parms.PropertyName = std::move(PropertyName);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function b1-Managed.BED_FSMNode_GI_Loading_MarkFirstStartGameFlag.GetNodeDescriptionInCS
// (Native, Event, Public, HasOutParams, BlueprintEvent, Const)
// Parameters:
// class FString                           ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash)

class FString UBED_FSMNode_GI_Loading_MarkFirstStartGameFlag::GetNodeDescriptionInCS() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BED_FSMNode_GI_Loading_MarkFirstStartGameFlag", "GetNodeDescriptionInCS");

	Params::BED_FSMNode_GI_Loading_MarkFirstStartGameFlag_GetNodeDescriptionInCS Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function b1-Managed.BED_FSMNode_GI_Loading_GSGBtlOnBattleStart.PostPropertyChanged
// (Native, Event, Public, BlueprintEvent)
// Parameters:
// class FString                           MemberName                                             (Parm, ZeroConstructor, HasGetValueTypeHash)
// class FString                           PropertyName                                           (Parm, ZeroConstructor, HasGetValueTypeHash)

void UBED_FSMNode_GI_Loading_GSGBtlOnBattleStart::PostPropertyChanged(const class FString& MemberName, const class FString& PropertyName)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BED_FSMNode_GI_Loading_GSGBtlOnBattleStart", "PostPropertyChanged");

	Params::BED_FSMNode_GI_Loading_GSGBtlOnBattleStart_PostPropertyChanged Parms{};

	Parms.MemberName = std::move(MemberName);
	Parms.PropertyName = std::move(PropertyName);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function b1-Managed.BED_FSMNode_GI_Loading_GSGBtlOnBattleStart.GetNodeDescriptionInCS
// (Native, Event, Public, HasOutParams, BlueprintEvent, Const)
// Parameters:
// class FString                           ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash)

class FString UBED_FSMNode_GI_Loading_GSGBtlOnBattleStart::GetNodeDescriptionInCS() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BED_FSMNode_GI_Loading_GSGBtlOnBattleStart", "GetNodeDescriptionInCS");

	Params::BED_FSMNode_GI_Loading_GSGBtlOnBattleStart_GetNodeDescriptionInCS Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function b1-Managed.BED_FSMNode_GI_Loading_InitNewArchiveData.PostPropertyChanged
// (Native, Event, Public, BlueprintEvent)
// Parameters:
// class FString                           MemberName                                             (Parm, ZeroConstructor, HasGetValueTypeHash)
// class FString                           PropertyName                                           (Parm, ZeroConstructor, HasGetValueTypeHash)

void UBED_FSMNode_GI_Loading_InitNewArchiveData::PostPropertyChanged(const class FString& MemberName, const class FString& PropertyName)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BED_FSMNode_GI_Loading_InitNewArchiveData", "PostPropertyChanged");

	Params::BED_FSMNode_GI_Loading_InitNewArchiveData_PostPropertyChanged Parms{};

	Parms.MemberName = std::move(MemberName);
	Parms.PropertyName = std::move(PropertyName);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function b1-Managed.BED_FSMNode_GI_Loading_InitNewArchiveData.GetNodeDescriptionInCS
// (Native, Event, Public, HasOutParams, BlueprintEvent, Const)
// Parameters:
// class FString                           ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash)

class FString UBED_FSMNode_GI_Loading_InitNewArchiveData::GetNodeDescriptionInCS() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BED_FSMNode_GI_Loading_InitNewArchiveData", "GetNodeDescriptionInCS");

	Params::BED_FSMNode_GI_Loading_InitNewArchiveData_GetNodeDescriptionInCS Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function b1-Managed.AnimNotify_GSFootStep.GSNotifyCS
// (Native, Event, Public, Protected, BlueprintEvent, Const)
// Parameters:
// struct FUStGSNotifyParam                NotifyParam                                            (Parm, ZeroConstructor, IsPlainOldData, NoDestructor)

void UAnimNotify_GSFootStep::GSNotifyCS(const struct FUStGSNotifyParam& NotifyParam) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("AnimNotify_GSFootStep", "GSNotifyCS");

	Params::AnimNotify_GSFootStep_GSNotifyCS Parms{};

	Parms.NotifyParam = std::move(NotifyParam);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function b1-Managed.BGW_ChapterView820Mgr.OnEntranceSeqFinished
// (Native, Public, Private)

void UBGW_ChapterView820Mgr::OnEntranceSeqFinished()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BGW_ChapterView820Mgr", "OnEntranceSeqFinished");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function b1-Managed.BGW_ChapterView820Mgr.OnLeaveSeqFinished
// (Native, Public, Private)

void UBGW_ChapterView820Mgr::OnLeaveSeqFinished()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BGW_ChapterView820Mgr", "OnLeaveSeqFinished");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function b1-Managed.BGW_ChapterView820Mgr.OnAKBStateEndFunc
// (Native, Public)
// Parameters:
// class FName                             BeginStateName                                         (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// class FName                             EndStateName                                           (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// uint8                                   IsForceImSet                                           (Parm, NoDestructor, HasGetValueTypeHash)

void UBGW_ChapterView820Mgr::OnAKBStateEndFunc(class FName BeginStateName, class FName EndStateName, uint8 IsForceImSet)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BGW_ChapterView820Mgr", "OnAKBStateEndFunc");

	Params::BGW_ChapterView820Mgr_OnAKBStateEndFunc Parms{};

	Parms.BeginStateName = BeginStateName;
	Parms.EndStateName = EndStateName;
	Parms.IsForceImSet = IsForceImSet;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function b1-Managed.BANS_GSSweepCheck.GSValidateInputCS
// (Native, Event, Public, BlueprintEvent, Const)
// Parameters:
// class AActor*                           Actor                                                  (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UBANS_GSSweepCheck::GSValidateInputCS(class AActor* Actor) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BANS_GSSweepCheck", "GSValidateInputCS");

	Params::BANS_GSSweepCheck_GSValidateInputCS Parms{};

	Parms.Actor = Actor;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function b1-Managed.BANS_GSSweepCheck.GSNotifyBeginCS
// (Native, Event, Public, Protected, BlueprintEvent, Const)
// Parameters:
// struct FUStGSNotifyParam                NotifyParam                                            (Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
// float                                   TotalDuration                                          (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UBANS_GSSweepCheck::GSNotifyBeginCS(const struct FUStGSNotifyParam& NotifyParam, float TotalDuration) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BANS_GSSweepCheck", "GSNotifyBeginCS");

	Params::BANS_GSSweepCheck_GSNotifyBeginCS Parms{};

	Parms.NotifyParam = std::move(NotifyParam);
	Parms.TotalDuration = TotalDuration;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function b1-Managed.BANS_GSSweepCheck.GSNotifyTickCS
// (Native, Event, Public, Protected, BlueprintEvent, Const)
// Parameters:
// struct FUStGSNotifyParam                NotifyParam                                            (Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
// float                                   FrameDeltaTime                                         (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UBANS_GSSweepCheck::GSNotifyTickCS(const struct FUStGSNotifyParam& NotifyParam, float FrameDeltaTime) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BANS_GSSweepCheck", "GSNotifyTickCS");

	Params::BANS_GSSweepCheck_GSNotifyTickCS Parms{};

	Parms.NotifyParam = std::move(NotifyParam);
	Parms.FrameDeltaTime = FrameDeltaTime;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function b1-Managed.BANS_GSSweepCheck.AddAssistBreakFrozenEffectID
// (Native, Public, HasOutParams, BlueprintCallable, Const)
// Parameters:
// int32                                   AssistBreakFrozenEffectID                              (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// uint8                                   ReturnValue                                            (Parm, OutParm, ReturnParm, NoDestructor, HasGetValueTypeHash)

uint8 UBANS_GSSweepCheck::AddAssistBreakFrozenEffectID(int32 AssistBreakFrozenEffectID) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BANS_GSSweepCheck", "AddAssistBreakFrozenEffectID");

	Params::BANS_GSSweepCheck_AddAssistBreakFrozenEffectID Parms{};

	Parms.AssistBreakFrozenEffectID = AssistBreakFrozenEffectID;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function b1-Managed.BANS_GSSweepCheck.GSNotifyEndCS
// (Native, Event, Public, Protected, BlueprintEvent, Const)
// Parameters:
// struct FUStGSNotifyParam                NotifyParam                                            (Parm, ZeroConstructor, IsPlainOldData, NoDestructor)

void UBANS_GSSweepCheck::GSNotifyEndCS(const struct FUStGSNotifyParam& NotifyParam) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BANS_GSSweepCheck", "GSNotifyEndCS");

	Params::BANS_GSSweepCheck_GSNotifyEndCS Parms{};

	Parms.NotifyParam = std::move(NotifyParam);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function b1-Managed.BANS_GSSweepCheck.ReplaceEffectIDByPreID
// (Native, Public, HasOutParams, BlueprintCallable, Const)
// Parameters:
// int32                                   OldPreID                                               (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// int32                                   NewPreID                                               (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// uint8                                   ReturnValue                                            (Parm, OutParm, ReturnParm, NoDestructor, HasGetValueTypeHash)

uint8 UBANS_GSSweepCheck::ReplaceEffectIDByPreID(int32 OldPreID, int32 NewPreID) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BANS_GSSweepCheck", "ReplaceEffectIDByPreID");

	Params::BANS_GSSweepCheck_ReplaceEffectIDByPreID Parms{};

	Parms.OldPreID = OldPreID;
	Parms.NewPreID = NewPreID;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function b1-Managed.BANS_GSSweepCheck.ResetSweepCheckChanel
// (Native, Public, BlueprintCallable, Const)
// Parameters:
// ECollisionChannel                       NewCollisionChanel                                     (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UBANS_GSSweepCheck::ResetSweepCheckChanel(ECollisionChannel NewCollisionChanel) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BANS_GSSweepCheck", "ResetSweepCheckChanel");

	Params::BANS_GSSweepCheck_ResetSweepCheckChanel Parms{};

	Parms.NewCollisionChanel = NewCollisionChanel;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function b1-Managed.BANS_GSSweepCheck.HasAbnormalStateData
// (Native, Public, HasOutParams, BlueprintCallable, Const)
// Parameters:
// uint8                                   ReturnValue                                            (Parm, OutParm, ReturnParm, NoDestructor, HasGetValueTypeHash)

uint8 UBANS_GSSweepCheck::HasAbnormalStateData() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BANS_GSSweepCheck", "HasAbnormalStateData");

	Params::BANS_GSSweepCheck_HasAbnormalStateData Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function b1-Managed.BED_FSMNode_GI_Loading_GSGOnBattleDestroy.PostPropertyChanged
// (Native, Event, Public, BlueprintEvent)
// Parameters:
// class FString                           MemberName                                             (Parm, ZeroConstructor, HasGetValueTypeHash)
// class FString                           PropertyName                                           (Parm, ZeroConstructor, HasGetValueTypeHash)

void UBED_FSMNode_GI_Loading_GSGOnBattleDestroy::PostPropertyChanged(const class FString& MemberName, const class FString& PropertyName)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BED_FSMNode_GI_Loading_GSGOnBattleDestroy", "PostPropertyChanged");

	Params::BED_FSMNode_GI_Loading_GSGOnBattleDestroy_PostPropertyChanged Parms{};

	Parms.MemberName = std::move(MemberName);
	Parms.PropertyName = std::move(PropertyName);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function b1-Managed.BED_FSMNode_GI_Loading_GSGOnBattleDestroy.GetNodeDescriptionInCS
// (Native, Event, Public, HasOutParams, BlueprintEvent, Const)
// Parameters:
// class FString                           ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash)

class FString UBED_FSMNode_GI_Loading_GSGOnBattleDestroy::GetNodeDescriptionInCS() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BED_FSMNode_GI_Loading_GSGOnBattleDestroy", "GetNodeDescriptionInCS");

	Params::BED_FSMNode_GI_Loading_GSGOnBattleDestroy_GetNodeDescriptionInCS Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function b1-Managed.BANS_GSCastTTTB.GSNotifyBeginCS
// (Native, Event, Public, Protected, BlueprintEvent, Const)
// Parameters:
// struct FUStGSNotifyParam                NotifyParam                                            (Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
// float                                   TotalDuration                                          (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UBANS_GSCastTTTB::GSNotifyBeginCS(const struct FUStGSNotifyParam& NotifyParam, float TotalDuration) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BANS_GSCastTTTB", "GSNotifyBeginCS");

	Params::BANS_GSCastTTTB_GSNotifyBeginCS Parms{};

	Parms.NotifyParam = std::move(NotifyParam);
	Parms.TotalDuration = TotalDuration;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function b1-Managed.BANS_GSCastTTTB.GSNotifyTickCS
// (Native, Event, Public, Protected, BlueprintEvent, Const)
// Parameters:
// struct FUStGSNotifyParam                NotifyParam                                            (Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
// float                                   FrameDeltaTime                                         (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UBANS_GSCastTTTB::GSNotifyTickCS(const struct FUStGSNotifyParam& NotifyParam, float FrameDeltaTime) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BANS_GSCastTTTB", "GSNotifyTickCS");

	Params::BANS_GSCastTTTB_GSNotifyTickCS Parms{};

	Parms.NotifyParam = std::move(NotifyParam);
	Parms.FrameDeltaTime = FrameDeltaTime;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function b1-Managed.BANS_GSCastTTTB.GSNotifyEndCS
// (Native, Event, Public, Protected, BlueprintEvent, Const)
// Parameters:
// struct FUStGSNotifyParam                NotifyParam                                            (Parm, ZeroConstructor, IsPlainOldData, NoDestructor)

void UBANS_GSCastTTTB::GSNotifyEndCS(const struct FUStGSNotifyParam& NotifyParam) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BANS_GSCastTTTB", "GSNotifyEndCS");

	Params::BANS_GSCastTTTB_GSNotifyEndCS Parms{};

	Parms.NotifyParam = std::move(NotifyParam);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function b1-Managed.BED_QuestNode_Counter.GetNodeDescriptionInCS
// (Native, Event, Public, HasOutParams, BlueprintEvent, Const)
// Parameters:
// class FString                           ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash)

class FString UBED_QuestNode_Counter::GetNodeDescriptionInCS() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BED_QuestNode_Counter", "GetNodeDescriptionInCS");

	Params::BED_QuestNode_Counter_GetNodeDescriptionInCS Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function b1-Managed.BED_QuestNode_Counter.GetStatusStringInCS
// (Native, Event, Public, HasOutParams, BlueprintEvent, Const)
// Parameters:
// class FString                           ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash)

class FString UBED_QuestNode_Counter::GetStatusStringInCS() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BED_QuestNode_Counter", "GetStatusStringInCS");

	Params::BED_QuestNode_Counter_GetStatusStringInCS Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function b1-Managed.BED_FSMNode_GI_Loading_LoadingUIWaitUserInput.PostPropertyChanged
// (Native, Event, Public, BlueprintEvent)
// Parameters:
// class FString                           MemberName                                             (Parm, ZeroConstructor, HasGetValueTypeHash)
// class FString                           PropertyName                                           (Parm, ZeroConstructor, HasGetValueTypeHash)

void UBED_FSMNode_GI_Loading_LoadingUIWaitUserInput::PostPropertyChanged(const class FString& MemberName, const class FString& PropertyName)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BED_FSMNode_GI_Loading_LoadingUIWaitUserInput", "PostPropertyChanged");

	Params::BED_FSMNode_GI_Loading_LoadingUIWaitUserInput_PostPropertyChanged Parms{};

	Parms.MemberName = std::move(MemberName);
	Parms.PropertyName = std::move(PropertyName);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function b1-Managed.BED_FSMNode_GI_Loading_LoadingUIWaitUserInput.GetNodeDescriptionInCS
// (Native, Event, Public, HasOutParams, BlueprintEvent, Const)
// Parameters:
// class FString                           ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash)

class FString UBED_FSMNode_GI_Loading_LoadingUIWaitUserInput::GetNodeDescriptionInCS() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BED_FSMNode_GI_Loading_LoadingUIWaitUserInput", "GetNodeDescriptionInCS");

	Params::BED_FSMNode_GI_Loading_LoadingUIWaitUserInput_GetNodeDescriptionInCS Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function b1-Managed.BUBirthPoint.ReceiveBeginPlay
// (Native, Event, Public, Protected, BlueprintEvent)

void ABUBirthPoint::ReceiveBeginPlay()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BUBirthPoint", "ReceiveBeginPlay");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function b1-Managed.BUBirthPoint.ReceiveEndPlay
// (Native, Event, Public, Protected, BlueprintEvent)
// Parameters:
// EEndPlayReason                          EndPlayReason                                          (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ABUBirthPoint::ReceiveEndPlay(EEndPlayReason EndPlayReason)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BUBirthPoint", "ReceiveEndPlay");

	Params::BUBirthPoint_ReceiveEndPlay Parms{};

	Parms.EndPlayReason = EndPlayReason;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function b1-Managed.BED_FSMNode_GI_Global_OpenMainMenuLevel.PostPropertyChanged
// (Native, Event, Public, BlueprintEvent)
// Parameters:
// class FString                           MemberName                                             (Parm, ZeroConstructor, HasGetValueTypeHash)
// class FString                           PropertyName                                           (Parm, ZeroConstructor, HasGetValueTypeHash)

void UBED_FSMNode_GI_Global_OpenMainMenuLevel::PostPropertyChanged(const class FString& MemberName, const class FString& PropertyName)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BED_FSMNode_GI_Global_OpenMainMenuLevel", "PostPropertyChanged");

	Params::BED_FSMNode_GI_Global_OpenMainMenuLevel_PostPropertyChanged Parms{};

	Parms.MemberName = std::move(MemberName);
	Parms.PropertyName = std::move(PropertyName);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function b1-Managed.BED_FSMNode_GI_Global_OpenMainMenuLevel.GetNodeDescriptionInCS
// (Native, Event, Public, HasOutParams, BlueprintEvent, Const)
// Parameters:
// class FString                           ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash)

class FString UBED_FSMNode_GI_Global_OpenMainMenuLevel::GetNodeDescriptionInCS() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BED_FSMNode_GI_Global_OpenMainMenuLevel", "GetNodeDescriptionInCS");

	Params::BED_FSMNode_GI_Global_OpenMainMenuLevel_GetNodeDescriptionInCS Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function b1-Managed.BUS_FXAnimalCommComp.StartEscape
// (Native, Public, Private)
// Parameters:
// class UPrimitiveComponent*              OverlappedComponent                                    (ExportObject, Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// class AActor*                           OtherActor                                             (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// class UPrimitiveComponent*              OtherComp                                              (ExportObject, Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// int32                                   OtherBodyIndex                                         (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// uint8                                   bFromSweep                                             (Parm, NoDestructor, HasGetValueTypeHash)
// struct FHitResult                       SweepResult                                            (Parm, IsPlainOldData, NoDestructor)

void UBUS_FXAnimalCommComp::StartEscape(class UPrimitiveComponent* OverlappedComponent, class AActor* OtherActor, class UPrimitiveComponent* OtherComp, int32 OtherBodyIndex, uint8 bFromSweep, const struct FHitResult& SweepResult)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BUS_FXAnimalCommComp", "StartEscape");

	Params::BUS_FXAnimalCommComp_StartEscape Parms{};

	Parms.OverlappedComponent = OverlappedComponent;
	Parms.OtherActor = OtherActor;
	Parms.OtherComp = OtherComp;
	Parms.OtherBodyIndex = OtherBodyIndex;
	Parms.bFromSweep = bFromSweep;
	Parms.SweepResult = std::move(SweepResult);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function b1-Managed.BED_FSMNode_GI_Global_SubG_GI_Loading_820DemoStartUp.OnCreateGraphNodeInCS
// (Native, Event, Public, BlueprintEvent)

void UBED_FSMNode_GI_Global_SubG_GI_Loading_820DemoStartUp::OnCreateGraphNodeInCS()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BED_FSMNode_GI_Global_SubG_GI_Loading_820DemoStartUp", "OnCreateGraphNodeInCS");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function b1-Managed.BED_FSMNode_GI_Global_SubG_GI_Loading_820DemoStartUp.GetNodeDescriptionInCS
// (Native, Event, Public, HasOutParams, BlueprintEvent, Const)
// Parameters:
// class FString                           ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash)

class FString UBED_FSMNode_GI_Global_SubG_GI_Loading_820DemoStartUp::GetNodeDescriptionInCS() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BED_FSMNode_GI_Global_SubG_GI_Loading_820DemoStartUp", "GetNodeDescriptionInCS");

	Params::BED_FSMNode_GI_Global_SubG_GI_Loading_820DemoStartUp_GetNodeDescriptionInCS Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function b1-Managed.BED_FSMNode_GI_Loading_OpenLevelByIdInContext.PostPropertyChanged
// (Native, Event, Public, BlueprintEvent)
// Parameters:
// class FString                           MemberName                                             (Parm, ZeroConstructor, HasGetValueTypeHash)
// class FString                           PropertyName                                           (Parm, ZeroConstructor, HasGetValueTypeHash)

void UBED_FSMNode_GI_Loading_OpenLevelByIdInContext::PostPropertyChanged(const class FString& MemberName, const class FString& PropertyName)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BED_FSMNode_GI_Loading_OpenLevelByIdInContext", "PostPropertyChanged");

	Params::BED_FSMNode_GI_Loading_OpenLevelByIdInContext_PostPropertyChanged Parms{};

	Parms.MemberName = std::move(MemberName);
	Parms.PropertyName = std::move(PropertyName);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function b1-Managed.BED_FSMNode_GI_Loading_OpenLevelByIdInContext.GetNodeDescriptionInCS
// (Native, Event, Public, HasOutParams, BlueprintEvent, Const)
// Parameters:
// class FString                           ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash)

class FString UBED_FSMNode_GI_Loading_OpenLevelByIdInContext::GetNodeDescriptionInCS() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BED_FSMNode_GI_Loading_OpenLevelByIdInContext", "GetNodeDescriptionInCS");

	Params::BED_FSMNode_GI_Loading_OpenLevelByIdInContext_GetNodeDescriptionInCS Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function b1-Managed.BED_FSMNode_GI_Global_SubG_GI_Loading_GameLevelPass.OnCreateGraphNodeInCS
// (Native, Event, Public, BlueprintEvent)

void UBED_FSMNode_GI_Global_SubG_GI_Loading_GameLevelPass::OnCreateGraphNodeInCS()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BED_FSMNode_GI_Global_SubG_GI_Loading_GameLevelPass", "OnCreateGraphNodeInCS");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function b1-Managed.BED_FSMNode_GI_Global_SubG_GI_Loading_GameLevelPass.GetNodeDescriptionInCS
// (Native, Event, Public, HasOutParams, BlueprintEvent, Const)
// Parameters:
// class FString                           ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash)

class FString UBED_FSMNode_GI_Global_SubG_GI_Loading_GameLevelPass::GetNodeDescriptionInCS() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BED_FSMNode_GI_Global_SubG_GI_Loading_GameLevelPass", "GetNodeDescriptionInCS");

	Params::BED_FSMNode_GI_Global_SubG_GI_Loading_GameLevelPass_GetNodeDescriptionInCS Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function b1-Managed.BED_FSMNode_GI_Global_SubG_GI_Loading_PartyRoomServer.OnCreateGraphNodeInCS
// (Native, Event, Public, BlueprintEvent)

void UBED_FSMNode_GI_Global_SubG_GI_Loading_PartyRoomServer::OnCreateGraphNodeInCS()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BED_FSMNode_GI_Global_SubG_GI_Loading_PartyRoomServer", "OnCreateGraphNodeInCS");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function b1-Managed.BED_FSMNode_GI_Global_SubG_GI_Loading_PartyRoomServer.GetNodeDescriptionInCS
// (Native, Event, Public, HasOutParams, BlueprintEvent, Const)
// Parameters:
// class FString                           ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash)

class FString UBED_FSMNode_GI_Global_SubG_GI_Loading_PartyRoomServer::GetNodeDescriptionInCS() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BED_FSMNode_GI_Global_SubG_GI_Loading_PartyRoomServer", "GetNodeDescriptionInCS");

	Params::BED_FSMNode_GI_Global_SubG_GI_Loading_PartyRoomServer_GetNodeDescriptionInCS Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function b1-Managed.BUI_DraggableV2.OnPreviewMouseButtonDown
// (BlueprintCosmetic, Native, Event, Public, HasOutParams, BlueprintEvent)
// Parameters:
// struct FGeometry                        MyGeometry                                             (Parm, IsPlainOldData, NoDestructor)
// struct FPointerEvent                    MouseEvent                                             (ConstParm, Parm, OutParm, ReferenceParm)
// struct FEventReply                      ReturnValue                                            (Parm, OutParm, ReturnParm)

struct FEventReply UBUI_DraggableV2::OnPreviewMouseButtonDown(const struct FGeometry& MyGeometry, const struct FPointerEvent& MouseEvent)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BUI_DraggableV2", "OnPreviewMouseButtonDown");

	Params::BUI_DraggableV2_OnPreviewMouseButtonDown Parms{};

	Parms.MyGeometry = std::move(MyGeometry);
	Parms.MouseEvent = std::move(MouseEvent);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function b1-Managed.BUI_DraggableV2.OnMouseButtonDown
// (BlueprintCosmetic, Native, Event, Public, HasOutParams, BlueprintEvent)
// Parameters:
// struct FGeometry                        MyGeometry                                             (Parm, IsPlainOldData, NoDestructor)
// struct FPointerEvent                    MouseEvent                                             (ConstParm, Parm, OutParm, ReferenceParm)
// struct FEventReply                      ReturnValue                                            (Parm, OutParm, ReturnParm)

struct FEventReply UBUI_DraggableV2::OnMouseButtonDown(const struct FGeometry& MyGeometry, const struct FPointerEvent& MouseEvent)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BUI_DraggableV2", "OnMouseButtonDown");

	Params::BUI_DraggableV2_OnMouseButtonDown Parms{};

	Parms.MyGeometry = std::move(MyGeometry);
	Parms.MouseEvent = std::move(MouseEvent);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function b1-Managed.BUI_DraggableV2.OnDragCancelled
// (BlueprintCosmetic, Native, Event, Public, BlueprintEvent)
// Parameters:
// struct FPointerEvent                    MouseEvent                                             (ConstParm, Parm, OutParm, ReferenceParm)
// class UDragDropOperation*               Operation                                              (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UBUI_DraggableV2::OnDragCancelled(const struct FPointerEvent& MouseEvent, class UDragDropOperation* Operation)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BUI_DraggableV2", "OnDragCancelled");

	Params::BUI_DraggableV2_OnDragCancelled Parms{};

	Parms.MouseEvent = std::move(MouseEvent);
	Parms.Operation = Operation;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function b1-Managed.BUI_DraggableV2.OnMouseButtonUp
// (BlueprintCosmetic, Native, Event, Public, HasOutParams, BlueprintEvent)
// Parameters:
// struct FGeometry                        MyGeometry                                             (Parm, IsPlainOldData, NoDestructor)
// struct FPointerEvent                    MouseEvent                                             (ConstParm, Parm, OutParm, ReferenceParm)
// struct FEventReply                      ReturnValue                                            (Parm, OutParm, ReturnParm)

struct FEventReply UBUI_DraggableV2::OnMouseButtonUp(const struct FGeometry& MyGeometry, const struct FPointerEvent& MouseEvent)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BUI_DraggableV2", "OnMouseButtonUp");

	Params::BUI_DraggableV2_OnMouseButtonUp Parms{};

	Parms.MyGeometry = std::move(MyGeometry);
	Parms.MouseEvent = std::move(MouseEvent);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function b1-Managed.BUI_DraggableV2.OnMouseLeave
// (BlueprintCosmetic, Native, Event, Public, BlueprintEvent)
// Parameters:
// struct FPointerEvent                    MouseEvent                                             (ConstParm, Parm, OutParm, ReferenceParm)

void UBUI_DraggableV2::OnMouseLeave(const struct FPointerEvent& MouseEvent)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BUI_DraggableV2", "OnMouseLeave");

	Params::BUI_DraggableV2_OnMouseLeave Parms{};

	Parms.MouseEvent = std::move(MouseEvent);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function b1-Managed.BUI_DraggableV2.OnMouseMove
// (BlueprintCosmetic, Native, Event, Public, HasOutParams, BlueprintEvent)
// Parameters:
// struct FGeometry                        MyGeometry                                             (Parm, IsPlainOldData, NoDestructor)
// struct FPointerEvent                    MouseEvent                                             (ConstParm, Parm, OutParm, ReferenceParm)
// struct FEventReply                      ReturnValue                                            (Parm, OutParm, ReturnParm)

struct FEventReply UBUI_DraggableV2::OnMouseMove(const struct FGeometry& MyGeometry, const struct FPointerEvent& MouseEvent)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BUI_DraggableV2", "OnMouseMove");

	Params::BUI_DraggableV2_OnMouseMove Parms{};

	Parms.MyGeometry = std::move(MyGeometry);
	Parms.MouseEvent = std::move(MouseEvent);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function b1-Managed.BUI_DraggableV2.Tick
// (BlueprintCosmetic, Native, Event, Public, BlueprintEvent)
// Parameters:
// struct FGeometry                        MyGeometry                                             (Parm, IsPlainOldData, NoDestructor)
// float                                   InDeltaTime                                            (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UBUI_DraggableV2::Tick(const struct FGeometry& MyGeometry, float InDeltaTime)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BUI_DraggableV2", "Tick");

	Params::BUI_DraggableV2_Tick Parms{};

	Parms.MyGeometry = std::move(MyGeometry);
	Parms.InDeltaTime = InDeltaTime;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function b1-Managed.BUS_NeutralFXAnimalSpawnLogicComp.StartEscapeWitchSpdCheck
// (Native, Public, Private)
// Parameters:
// class UPrimitiveComponent*              OverlappedComponent                                    (ExportObject, Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// class AActor*                           OtherActor                                             (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// class UPrimitiveComponent*              OtherComp                                              (ExportObject, Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// int32                                   OtherBodyIndex                                         (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// uint8                                   bFromSweep                                             (Parm, NoDestructor, HasGetValueTypeHash)
// struct FHitResult                       SweepResult                                            (Parm, IsPlainOldData, NoDestructor)

void UBUS_NeutralFXAnimalSpawnLogicComp::StartEscapeWitchSpdCheck(class UPrimitiveComponent* OverlappedComponent, class AActor* OtherActor, class UPrimitiveComponent* OtherComp, int32 OtherBodyIndex, uint8 bFromSweep, const struct FHitResult& SweepResult)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BUS_NeutralFXAnimalSpawnLogicComp", "StartEscapeWitchSpdCheck");

	Params::BUS_NeutralFXAnimalSpawnLogicComp_StartEscapeWitchSpdCheck Parms{};

	Parms.OverlappedComponent = OverlappedComponent;
	Parms.OtherActor = OtherActor;
	Parms.OtherComp = OtherComp;
	Parms.OtherBodyIndex = OtherBodyIndex;
	Parms.bFromSweep = bFromSweep;
	Parms.SweepResult = std::move(SweepResult);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function b1-Managed.BUS_NeutralFXAnimalSpawnLogicComp.StartEscape
// (Native, Public, Private)
// Parameters:
// class UPrimitiveComponent*              OverlappedComponent                                    (ExportObject, Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// class AActor*                           OtherActor                                             (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// class UPrimitiveComponent*              OtherComp                                              (ExportObject, Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// int32                                   OtherBodyIndex                                         (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// uint8                                   bFromSweep                                             (Parm, NoDestructor, HasGetValueTypeHash)
// struct FHitResult                       SweepResult                                            (Parm, IsPlainOldData, NoDestructor)

void UBUS_NeutralFXAnimalSpawnLogicComp::StartEscape(class UPrimitiveComponent* OverlappedComponent, class AActor* OtherActor, class UPrimitiveComponent* OtherComp, int32 OtherBodyIndex, uint8 bFromSweep, const struct FHitResult& SweepResult)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BUS_NeutralFXAnimalSpawnLogicComp", "StartEscape");

	Params::BUS_NeutralFXAnimalSpawnLogicComp_StartEscape Parms{};

	Parms.OverlappedComponent = OverlappedComponent;
	Parms.OtherActor = OtherActor;
	Parms.OtherComp = OtherComp;
	Parms.OtherBodyIndex = OtherBodyIndex;
	Parms.bFromSweep = bFromSweep;
	Parms.SweepResult = std::move(SweepResult);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function b1-Managed.BED_FSMNode_GI_Loading_NetConectionFailurePreprocess.PostPropertyChanged
// (Native, Event, Public, BlueprintEvent)
// Parameters:
// class FString                           MemberName                                             (Parm, ZeroConstructor, HasGetValueTypeHash)
// class FString                           PropertyName                                           (Parm, ZeroConstructor, HasGetValueTypeHash)

void UBED_FSMNode_GI_Loading_NetConectionFailurePreprocess::PostPropertyChanged(const class FString& MemberName, const class FString& PropertyName)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BED_FSMNode_GI_Loading_NetConectionFailurePreprocess", "PostPropertyChanged");

	Params::BED_FSMNode_GI_Loading_NetConectionFailurePreprocess_PostPropertyChanged Parms{};

	Parms.MemberName = std::move(MemberName);
	Parms.PropertyName = std::move(PropertyName);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function b1-Managed.BED_FSMNode_GI_Loading_NetConectionFailurePreprocess.GetNodeDescriptionInCS
// (Native, Event, Public, HasOutParams, BlueprintEvent, Const)
// Parameters:
// class FString                           ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash)

class FString UBED_FSMNode_GI_Loading_NetConectionFailurePreprocess::GetNodeDescriptionInCS() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BED_FSMNode_GI_Loading_NetConectionFailurePreprocess", "GetNodeDescriptionInCS");

	Params::BED_FSMNode_GI_Loading_NetConectionFailurePreprocess_GetNodeDescriptionInCS Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function b1-Managed.BGUTreeBirdSpawnMgr.DrawDebug_OnlyInEditor
// (Native, Public, BlueprintCallable)

void ABGUTreeBirdSpawnMgr::DrawDebug_OnlyInEditor()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BGUTreeBirdSpawnMgr", "DrawDebug_OnlyInEditor");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function b1-Managed.BGUTreeBirdSpawnMgr.CollectAllTreesInfo
// (Native, Public, BlueprintCallable)

void ABGUTreeBirdSpawnMgr::CollectAllTreesInfo()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BGUTreeBirdSpawnMgr", "CollectAllTreesInfo");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function b1-Managed.BED_FSMNode_GI_Loading_ReleaseSaveArchiveByTravelLevel.PostPropertyChanged
// (Native, Event, Public, BlueprintEvent)
// Parameters:
// class FString                           MemberName                                             (Parm, ZeroConstructor, HasGetValueTypeHash)
// class FString                           PropertyName                                           (Parm, ZeroConstructor, HasGetValueTypeHash)

void UBED_FSMNode_GI_Loading_ReleaseSaveArchiveByTravelLevel::PostPropertyChanged(const class FString& MemberName, const class FString& PropertyName)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BED_FSMNode_GI_Loading_ReleaseSaveArchiveByTravelLevel", "PostPropertyChanged");

	Params::BED_FSMNode_GI_Loading_ReleaseSaveArchiveByTravelLevel_PostPropertyChanged Parms{};

	Parms.MemberName = std::move(MemberName);
	Parms.PropertyName = std::move(PropertyName);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function b1-Managed.BED_FSMNode_GI_Loading_ReleaseSaveArchiveByTravelLevel.GetNodeDescriptionInCS
// (Native, Event, Public, HasOutParams, BlueprintEvent, Const)
// Parameters:
// class FString                           ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash)

class FString UBED_FSMNode_GI_Loading_ReleaseSaveArchiveByTravelLevel::GetNodeDescriptionInCS() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BED_FSMNode_GI_Loading_ReleaseSaveArchiveByTravelLevel", "GetNodeDescriptionInCS");

	Params::BED_FSMNode_GI_Loading_ReleaseSaveArchiveByTravelLevel_GetNodeDescriptionInCS Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function b1-Managed.BANS_GSPlayAMInAMing.GSNotifyBeginCS
// (Native, Event, Public, Protected, BlueprintEvent, Const)
// Parameters:
// struct FUStGSNotifyParam                NotifyParam                                            (Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
// float                                   TotalDuration                                          (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UBANS_GSPlayAMInAMing::GSNotifyBeginCS(const struct FUStGSNotifyParam& NotifyParam, float TotalDuration) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BANS_GSPlayAMInAMing", "GSNotifyBeginCS");

	Params::BANS_GSPlayAMInAMing_GSNotifyBeginCS Parms{};

	Parms.NotifyParam = std::move(NotifyParam);
	Parms.TotalDuration = TotalDuration;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function b1-Managed.BANS_GSPlayAMInAMing.GSNotifyTickCS
// (Native, Event, Public, Protected, BlueprintEvent, Const)
// Parameters:
// struct FUStGSNotifyParam                NotifyParam                                            (Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
// float                                   FrameDeltaTime                                         (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UBANS_GSPlayAMInAMing::GSNotifyTickCS(const struct FUStGSNotifyParam& NotifyParam, float FrameDeltaTime) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BANS_GSPlayAMInAMing", "GSNotifyTickCS");

	Params::BANS_GSPlayAMInAMing_GSNotifyTickCS Parms{};

	Parms.NotifyParam = std::move(NotifyParam);
	Parms.FrameDeltaTime = FrameDeltaTime;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function b1-Managed.BANS_GSPlayAMInAMing.GSNotifyEndCS
// (Native, Event, Public, Protected, BlueprintEvent, Const)
// Parameters:
// struct FUStGSNotifyParam                NotifyParam                                            (Parm, ZeroConstructor, IsPlainOldData, NoDestructor)

void UBANS_GSPlayAMInAMing::GSNotifyEndCS(const struct FUStGSNotifyParam& NotifyParam) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BANS_GSPlayAMInAMing", "GSNotifyEndCS");

	Params::BANS_GSPlayAMInAMing_GSNotifyEndCS Parms{};

	Parms.NotifyParam = std::move(NotifyParam);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function b1-Managed.BUI_AnimWidget.OnAnimationSequenceEvent
// (Native, Public, Protected, BlueprintCallable)
// Parameters:
// int32                                   Param                                                  (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UBUI_AnimWidget::OnAnimationSequenceEvent(int32 Param)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BUI_AnimWidget", "OnAnimationSequenceEvent");

	Params::BUI_AnimWidget_OnAnimationSequenceEvent Parms{};

	Parms.Param = Param;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function b1-Managed.BED_FSMNode_GI_Loading_PausePsoCachePrecompile.PostPropertyChanged
// (Native, Event, Public, BlueprintEvent)
// Parameters:
// class FString                           MemberName                                             (Parm, ZeroConstructor, HasGetValueTypeHash)
// class FString                           PropertyName                                           (Parm, ZeroConstructor, HasGetValueTypeHash)

void UBED_FSMNode_GI_Loading_PausePsoCachePrecompile::PostPropertyChanged(const class FString& MemberName, const class FString& PropertyName)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BED_FSMNode_GI_Loading_PausePsoCachePrecompile", "PostPropertyChanged");

	Params::BED_FSMNode_GI_Loading_PausePsoCachePrecompile_PostPropertyChanged Parms{};

	Parms.MemberName = std::move(MemberName);
	Parms.PropertyName = std::move(PropertyName);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function b1-Managed.BED_FSMNode_GI_Loading_PausePsoCachePrecompile.GetNodeDescriptionInCS
// (Native, Event, Public, HasOutParams, BlueprintEvent, Const)
// Parameters:
// class FString                           ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash)

class FString UBED_FSMNode_GI_Loading_PausePsoCachePrecompile::GetNodeDescriptionInCS() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BED_FSMNode_GI_Loading_PausePsoCachePrecompile", "GetNodeDescriptionInCS");

	Params::BED_FSMNode_GI_Loading_PausePsoCachePrecompile_GetNodeDescriptionInCS Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function b1-Managed.BGUProjectileBaseActor.ProjectileAbilityCheck_ByBPConfig
// (Native, Public, HasOutParams, BlueprintCallable)
// Parameters:
// uint8                                   ReturnValue                                            (Parm, OutParm, ReturnParm, NoDestructor, HasGetValueTypeHash)

uint8 ABGUProjectileBaseActor::ProjectileAbilityCheck_ByBPConfig()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BGUProjectileBaseActor", "ProjectileAbilityCheck_ByBPConfig");

	Params::BGUProjectileBaseActor_ProjectileAbilityCheck_ByBPConfig Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function b1-Managed.BGUProjectileBaseActor.OnConstructionCS
// (Native, Event, Public, Protected, BlueprintEvent)
// Parameters:
// struct FTransform                       Transform                                              (ConstParm, Parm, OutParm, ReferenceParm, IsPlainOldData, NoDestructor)

void ABGUProjectileBaseActor::OnConstructionCS(const struct FTransform& Transform)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BGUProjectileBaseActor", "OnConstructionCS");

	Params::BGUProjectileBaseActor_OnConstructionCS Parms{};

	Parms.Transform = std::move(Transform);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function b1-Managed.BGUProjectileBaseActor.GetStaticMeshCompChildsNum
// (Native, Public, HasOutParams, BlueprintCallable)
// Parameters:
// int32                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

int32 ABGUProjectileBaseActor::GetStaticMeshCompChildsNum()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BGUProjectileBaseActor", "GetStaticMeshCompChildsNum");

	Params::BGUProjectileBaseActor_GetStaticMeshCompChildsNum Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function b1-Managed.BGUProjectileBaseActor.BeginPlayCS
// (Native, Event, Public, Protected, BlueprintEvent)

void ABGUProjectileBaseActor::BeginPlayCS()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BGUProjectileBaseActor", "BeginPlayCS");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function b1-Managed.BGUProjectileBaseActor.CheckDrawSignCondition
// (Native, Event, Public, HasOutParams, BlueprintEvent)
// Parameters:
// class AActor*                           HitActor                                               (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// uint8                                   ReturnValue                                            (Parm, OutParm, ReturnParm, NoDestructor, HasGetValueTypeHash)

uint8 ABGUProjectileBaseActor::CheckDrawSignCondition(class AActor* HitActor)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BGUProjectileBaseActor", "CheckDrawSignCondition");

	Params::BGUProjectileBaseActor_CheckDrawSignCondition Parms{};

	Parms.HitActor = HitActor;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function b1-Managed.BGUProjectileBaseActor.GetProjectileMovement
// (Native, Public, HasOutParams, BlueprintCallable, BlueprintPure)
// Parameters:
// class UBGUProjectileMovementComponent*  ReturnValue                                            (ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

class UBGUProjectileMovementComponent* ABGUProjectileBaseActor::GetProjectileMovement()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BGUProjectileBaseActor", "GetProjectileMovement");

	Params::BGUProjectileBaseActor_GetProjectileMovement Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function b1-Managed.BGUProjectileBaseActor.GetProjectileID
// (Native, Public, HasOutParams, BlueprintCallable, BlueprintPure)
// Parameters:
// int32                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

int32 ABGUProjectileBaseActor::GetProjectileID()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BGUProjectileBaseActor", "GetProjectileID");

	Params::BGUProjectileBaseActor_GetProjectileID Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function b1-Managed.BGUProjectileBaseActor.SwitchFinished
// (Native, Event, Public, BlueprintEvent)

void ABGUProjectileBaseActor::SwitchFinished()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BGUProjectileBaseActor", "SwitchFinished");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function b1-Managed.BGUProjectileBaseActor.SpawnFinished
// (Native, Event, Public, BlueprintEvent)
// Parameters:
// struct FProjectileSpawnEventInfo        ProjectileSpawnEventInfo                               (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ABGUProjectileBaseActor::SpawnFinished(const struct FProjectileSpawnEventInfo& ProjectileSpawnEventInfo)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BGUProjectileBaseActor", "SpawnFinished");

	Params::BGUProjectileBaseActor_SpawnFinished Parms{};

	Parms.ProjectileSpawnEventInfo = std::move(ProjectileSpawnEventInfo);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function b1-Managed.BGUProjectileBaseActor.SwitchBegin
// (Native, Event, Public, BlueprintEvent)

void ABGUProjectileBaseActor::SwitchBegin()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BGUProjectileBaseActor", "SwitchBegin");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function b1-Managed.BGUProjectileBaseActor.OnDrawSign
// (Native, Event, Public, BlueprintEvent)
// Parameters:
// class AActor*                           HitActor                                               (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// struct FTransform                       HitTransform                                           (Parm, IsPlainOldData, NoDestructor)

void ABGUProjectileBaseActor::OnDrawSign(class AActor* HitActor, const struct FTransform& HitTransform)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BGUProjectileBaseActor", "OnDrawSign");

	Params::BGUProjectileBaseActor_OnDrawSign Parms{};

	Parms.HitActor = HitActor;
	Parms.HitTransform = std::move(HitTransform);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function b1-Managed.BGUProjectileBaseActor.SwitchPre
// (Native, Event, Public, BlueprintEvent)

void ABGUProjectileBaseActor::SwitchPre()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BGUProjectileBaseActor", "SwitchPre");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function b1-Managed.BGUProjectileBaseActor.OnDead
// (Native, Event, Public, BlueprintEvent)

void ABGUProjectileBaseActor::OnDead()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BGUProjectileBaseActor", "OnDead");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function b1-Managed.BED_FSMNode_GI_Loading_GSGEnterLevel.PostPropertyChanged
// (Native, Event, Public, BlueprintEvent)
// Parameters:
// class FString                           MemberName                                             (Parm, ZeroConstructor, HasGetValueTypeHash)
// class FString                           PropertyName                                           (Parm, ZeroConstructor, HasGetValueTypeHash)

void UBED_FSMNode_GI_Loading_GSGEnterLevel::PostPropertyChanged(const class FString& MemberName, const class FString& PropertyName)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BED_FSMNode_GI_Loading_GSGEnterLevel", "PostPropertyChanged");

	Params::BED_FSMNode_GI_Loading_GSGEnterLevel_PostPropertyChanged Parms{};

	Parms.MemberName = std::move(MemberName);
	Parms.PropertyName = std::move(PropertyName);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function b1-Managed.BED_FSMNode_GI_Loading_GSGEnterLevel.GetNodeDescriptionInCS
// (Native, Event, Public, HasOutParams, BlueprintEvent, Const)
// Parameters:
// class FString                           ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash)

class FString UBED_FSMNode_GI_Loading_GSGEnterLevel::GetNodeDescriptionInCS() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BED_FSMNode_GI_Loading_GSGEnterLevel", "GetNodeDescriptionInCS");

	Params::BED_FSMNode_GI_Loading_GSGEnterLevel_GetNodeDescriptionInCS Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function b1-Managed.BED_FSMNode_GI_Loading_PostLogin.PostPropertyChanged
// (Native, Event, Public, BlueprintEvent)
// Parameters:
// class FString                           MemberName                                             (Parm, ZeroConstructor, HasGetValueTypeHash)
// class FString                           PropertyName                                           (Parm, ZeroConstructor, HasGetValueTypeHash)

void UBED_FSMNode_GI_Loading_PostLogin::PostPropertyChanged(const class FString& MemberName, const class FString& PropertyName)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BED_FSMNode_GI_Loading_PostLogin", "PostPropertyChanged");

	Params::BED_FSMNode_GI_Loading_PostLogin_PostPropertyChanged Parms{};

	Parms.MemberName = std::move(MemberName);
	Parms.PropertyName = std::move(PropertyName);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function b1-Managed.BED_FSMNode_GI_Loading_PostLogin.GetNodeDescriptionInCS
// (Native, Event, Public, HasOutParams, BlueprintEvent, Const)
// Parameters:
// class FString                           ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash)

class FString UBED_FSMNode_GI_Loading_PostLogin::GetNodeDescriptionInCS() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BED_FSMNode_GI_Loading_PostLogin", "GetNodeDescriptionInCS");

	Params::BED_FSMNode_GI_Loading_PostLogin_GetNodeDescriptionInCS Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function b1-Managed.BED_BehaviorNode_RemoveBuff.GetNodeDescriptionInCS
// (Native, Event, Public, HasOutParams, BlueprintEvent, Const)
// Parameters:
// class FString                           ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash)

class FString UBED_BehaviorNode_RemoveBuff::GetNodeDescriptionInCS() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BED_BehaviorNode_RemoveBuff", "GetNodeDescriptionInCS");

	Params::BED_BehaviorNode_RemoveBuff_GetNodeDescriptionInCS Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function b1-Managed.BED_FSMNode_GI_Loading_RequestTemplatePostSaveArchiveFinish.PostPropertyChanged
// (Native, Event, Public, BlueprintEvent)
// Parameters:
// class FString                           MemberName                                             (Parm, ZeroConstructor, HasGetValueTypeHash)
// class FString                           PropertyName                                           (Parm, ZeroConstructor, HasGetValueTypeHash)

void UBED_FSMNode_GI_Loading_RequestTemplatePostSaveArchiveFinish::PostPropertyChanged(const class FString& MemberName, const class FString& PropertyName)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BED_FSMNode_GI_Loading_RequestTemplatePostSaveArchiveFinish", "PostPropertyChanged");

	Params::BED_FSMNode_GI_Loading_RequestTemplatePostSaveArchiveFinish_PostPropertyChanged Parms{};

	Parms.MemberName = std::move(MemberName);
	Parms.PropertyName = std::move(PropertyName);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function b1-Managed.BED_FSMNode_GI_Loading_RequestTemplatePostSaveArchiveFinish.GetNodeDescriptionInCS
// (Native, Event, Public, HasOutParams, BlueprintEvent, Const)
// Parameters:
// class FString                           ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash)

class FString UBED_FSMNode_GI_Loading_RequestTemplatePostSaveArchiveFinish::GetNodeDescriptionInCS() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BED_FSMNode_GI_Loading_RequestTemplatePostSaveArchiveFinish", "GetNodeDescriptionInCS");

	Params::BED_FSMNode_GI_Loading_RequestTemplatePostSaveArchiveFinish_GetNodeDescriptionInCS Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function b1-Managed.BGP_AIPlayerControllerCS.GSRpcSendClient
// (Net, NetReliable, Native, Event, Public, NetClient)
// Parameters:
// TArray<uint8>                           SendData                                               (Parm)

void ABGP_AIPlayerControllerCS::GSRpcSendClient(const TArray<uint8>& SendData)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BGP_AIPlayerControllerCS", "GSRpcSendClient");

	Params::BGP_AIPlayerControllerCS_GSRpcSendClient Parms{};

	Parms.SendData = std::move(SendData);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function b1-Managed.BGP_AIPlayerControllerCS.GSRpcSendServer
// (Net, NetReliable, Native, Event, Public, NetServer)
// Parameters:
// TArray<uint8>                           SendData                                               (Parm)

void ABGP_AIPlayerControllerCS::GSRpcSendServer(const TArray<uint8>& SendData)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BGP_AIPlayerControllerCS", "GSRpcSendServer");

	Params::BGP_AIPlayerControllerCS_GSRpcSendServer Parms{};

	Parms.SendData = std::move(SendData);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function b1-Managed.BSN_NotifyActor.OnPreviewNotify
// (Native, Event, Public, BlueprintEvent)
// Parameters:
// class UObject*                          InPlaybackContext                                      (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// int32                                   InStatus                                               (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// uint8                                   bInBackwards                                           (Parm, NoDestructor, HasGetValueTypeHash)

void UBSN_NotifyActor::OnPreviewNotify(class UObject* InPlaybackContext, int32 InStatus, uint8 bInBackwards)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BSN_NotifyActor", "OnPreviewNotify");

	Params::BSN_NotifyActor_OnPreviewNotify Parms{};

	Parms.InPlaybackContext = InPlaybackContext;
	Parms.InStatus = InStatus;
	Parms.bInBackwards = bInBackwards;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function b1-Managed.BSN_NotifyActor.OnNotify
// (Native, Event, Public, BlueprintEvent)
// Parameters:
// class UCalliopeLevelSequencePlayer*     InPlayer                                               (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// int32                                   InStatus                                               (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// uint8                                   bInBackwards                                           (Parm, NoDestructor, HasGetValueTypeHash)

void UBSN_NotifyActor::OnNotify(class UCalliopeLevelSequencePlayer* InPlayer, int32 InStatus, uint8 bInBackwards)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BSN_NotifyActor", "OnNotify");

	Params::BSN_NotifyActor_OnNotify Parms{};

	Parms.InPlayer = InPlayer;
	Parms.InStatus = InStatus;
	Parms.bInBackwards = bInBackwards;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function b1-Managed.BSN_TriggerCustomEvent.OnNotify
// (Native, Event, Public, BlueprintEvent)
// Parameters:
// class UCalliopeLevelSequencePlayer*     InPlayer                                               (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// int32                                   InStatus                                               (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// uint8                                   bInBackwards                                           (Parm, NoDestructor, HasGetValueTypeHash)

void UBSN_TriggerCustomEvent::OnNotify(class UCalliopeLevelSequencePlayer* InPlayer, int32 InStatus, uint8 bInBackwards)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BSN_TriggerCustomEvent", "OnNotify");

	Params::BSN_TriggerCustomEvent_OnNotify Parms{};

	Parms.InPlayer = InPlayer;
	Parms.InStatus = InStatus;
	Parms.bInBackwards = bInBackwards;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function b1-Managed.PerformerParam_Overlap.OnPropertyChanged
// (Native, Event, Public, Protected, BlueprintEvent)
// Parameters:
// class FString                           MemberName                                             (Parm, ZeroConstructor, HasGetValueTypeHash)
// class FString                           PropertyName                                           (Parm, ZeroConstructor, HasGetValueTypeHash)

void UPerformerParam_Overlap::OnPropertyChanged(const class FString& MemberName, const class FString& PropertyName)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("PerformerParam_Overlap", "OnPropertyChanged");

	Params::PerformerParam_Overlap_OnPropertyChanged Parms{};

	Parms.MemberName = std::move(MemberName);
	Parms.PropertyName = std::move(PropertyName);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function b1-Managed.BAN_GSReplaceDropItem.bIsNativeBranchingPointCS
// (Native, Event, Public, HasOutParams, BlueprintEvent, Const)
// Parameters:
// uint8                                   ReturnValue                                            (Parm, OutParm, ReturnParm, NoDestructor, HasGetValueTypeHash)

uint8 UBAN_GSReplaceDropItem::bIsNativeBranchingPointCS() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BAN_GSReplaceDropItem", "bIsNativeBranchingPointCS");

	Params::BAN_GSReplaceDropItem_bIsNativeBranchingPointCS Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function b1-Managed.BAN_GSReplaceDropItem.GSNotifyCS
// (Native, Event, Public, Protected, BlueprintEvent, Const)
// Parameters:
// struct FUStGSNotifyParam                NotifyParam                                            (Parm, ZeroConstructor, IsPlainOldData, NoDestructor)

void UBAN_GSReplaceDropItem::GSNotifyCS(const struct FUStGSNotifyParam& NotifyParam) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BAN_GSReplaceDropItem", "GSNotifyCS");

	Params::BAN_GSReplaceDropItem_GSNotifyCS Parms{};

	Parms.NotifyParam = std::move(NotifyParam);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function b1-Managed.BED_BehaviorNode_TriggerAttackStiff.GetNodeDescriptionInCS
// (Native, Event, Public, HasOutParams, BlueprintEvent, Const)
// Parameters:
// class FString                           ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash)

class FString UBED_BehaviorNode_TriggerAttackStiff::GetNodeDescriptionInCS() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BED_BehaviorNode_TriggerAttackStiff", "GetNodeDescriptionInCS");

	Params::BED_BehaviorNode_TriggerAttackStiff_GetNodeDescriptionInCS Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function b1-Managed.BED_BehaviorNode_TriggerAttackStiff.IsSupportViewType
// (Native, Event, Public, HasOutParams, BlueprintEvent, Const)
// Parameters:
// ECalliopeViewType                       InViewType                                             (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// uint8                                   ReturnValue                                            (Parm, OutParm, ReturnParm, NoDestructor, HasGetValueTypeHash)

uint8 UBED_BehaviorNode_TriggerAttackStiff::IsSupportViewType(const ECalliopeViewType& InViewType) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BED_BehaviorNode_TriggerAttackStiff", "IsSupportViewType");

	Params::BED_BehaviorNode_TriggerAttackStiff_IsSupportViewType Parms{};

	Parms.InViewType = InViewType;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function b1-Managed.GSEQT_HasProjectileInRange.GetDescriptionDetailsCS
// (Native, Event, Public, HasOutParams, BlueprintEvent, Const)
// Parameters:
// class FString                           ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash)

class FString UGSEQT_HasProjectileInRange::GetDescriptionDetailsCS() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GSEQT_HasProjectileInRange", "GetDescriptionDetailsCS");

	Params::GSEQT_HasProjectileInRange_GetDescriptionDetailsCS Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function b1-Managed.GSEQT_HasProjectileInRange.GetDescriptionTitleCS
// (Native, Event, Public, HasOutParams, BlueprintEvent, Const)
// Parameters:
// class FString                           ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash)

class FString UGSEQT_HasProjectileInRange::GetDescriptionTitleCS() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GSEQT_HasProjectileInRange", "GetDescriptionTitleCS");

	Params::GSEQT_HasProjectileInRange_GetDescriptionTitleCS Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function b1-Managed.GSEQT_HasProjectileInRange.ShouldPrepareContext
// (Native, Event, Public, HasOutParams, BlueprintEvent, Const)
// Parameters:
// uint8                                   ReturnValue                                            (Parm, OutParm, ReturnParm, NoDestructor, HasGetValueTypeHash)

uint8 UGSEQT_HasProjectileInRange::ShouldPrepareContext() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GSEQT_HasProjectileInRange", "ShouldPrepareContext");

	Params::GSEQT_HasProjectileInRange_ShouldPrepareContext Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function b1-Managed.GSEQT_HasProjectileInRange.PostProcessItems
// (Native, Event, Public, BlueprintEvent, Const)

void UGSEQT_HasProjectileInRange::PostProcessItems() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GSEQT_HasProjectileInRange", "PostProcessItems");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function b1-Managed.GSEQT_HasProjectileInRange.PreProcessItems
// (Native, Event, Public, BlueprintEvent, Const)
// Parameters:
// TArray<class AActor*>                   ContextActors                                          (ConstParm, Parm, OutParm, ReferenceParm)
// TArray<struct FVector>                  ContextLocations                                       (ConstParm, Parm, OutParm, ReferenceParm)

void UGSEQT_HasProjectileInRange::PreProcessItems(const TArray<class AActor*>& ContextActors, const TArray<struct FVector>& ContextLocations) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GSEQT_HasProjectileInRange", "PreProcessItems");

	Params::GSEQT_HasProjectileInRange_PreProcessItems Parms{};

	Parms.ContextActors = std::move(ContextActors);
	Parms.ContextLocations = std::move(ContextLocations);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function b1-Managed.GSEQT_HasProjectileInRange.ProcessItemCS
// (Native, Event, Public, HasOutParams, BlueprintEvent, Const)
// Parameters:
// class UWorld*                           World                                                  (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// struct FVector                          ItemLocation                                           (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// class AActor*                           ItemActor                                              (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// class AActor*                           Querier                                                (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// uint8                                   ReturnValue                                            (Parm, OutParm, ReturnParm, NoDestructor, HasGetValueTypeHash)

uint8 UGSEQT_HasProjectileInRange::ProcessItemCS(class UWorld* World, const struct FVector& ItemLocation, class AActor* ItemActor, class AActor* Querier) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GSEQT_HasProjectileInRange", "ProcessItemCS");

	Params::GSEQT_HasProjectileInRange_ProcessItemCS Parms{};

	Parms.World = World;
	Parms.ItemLocation = std::move(ItemLocation);
	Parms.ItemActor = ItemActor;
	Parms.Querier = Querier;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function b1-Managed.BED_FSMNode_Condition_GI_Loading_IsDriverVersionMismatch.GetNodeDescriptionInCS
// (Native, Event, Public, HasOutParams, BlueprintEvent, Const)
// Parameters:
// class FString                           ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash)

class FString UBED_FSMNode_Condition_GI_Loading_IsDriverVersionMismatch::GetNodeDescriptionInCS() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BED_FSMNode_Condition_GI_Loading_IsDriverVersionMismatch", "GetNodeDescriptionInCS");

	Params::BED_FSMNode_Condition_GI_Loading_IsDriverVersionMismatch_GetNodeDescriptionInCS Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function b1-Managed.BANSM_Base.AddPreciseDodgeAttackWarningAndSocket
// (Native, Public, Protected, BlueprintCallable)
// Parameters:
// class UAnimMontage*                     AnimMontage                                            (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// float                                   PreTimeSeconds                                         (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// float                                   PostTimeSeconds                                        (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// float                                   CheckSphereRadius                                      (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// int32                                   AddSocketNumPerAnim                                    (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UBANSM_Base::AddPreciseDodgeAttackWarningAndSocket(class UAnimMontage* AnimMontage, float PreTimeSeconds, float PostTimeSeconds, float CheckSphereRadius, int32 AddSocketNumPerAnim)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BANSM_Base", "AddPreciseDodgeAttackWarningAndSocket");

	Params::BANSM_Base_AddPreciseDodgeAttackWarningAndSocket Parms{};

	Parms.AnimMontage = AnimMontage;
	Parms.PreTimeSeconds = PreTimeSeconds;
	Parms.PostTimeSeconds = PostTimeSeconds;
	Parms.CheckSphereRadius = CheckSphereRadius;
	Parms.AddSocketNumPerAnim = AddSocketNumPerAnim;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function b1-Managed.BANSM_Base.ClearGeneratedAttackWarningsByTrack
// (Native, Public, Private, BlueprintCallable)
// Parameters:
// class UAnimMontage*                     AnimMontage                                            (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UBANSM_Base::ClearGeneratedAttackWarningsByTrack(class UAnimMontage* AnimMontage)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BANSM_Base", "ClearGeneratedAttackWarningsByTrack");

	Params::BANSM_Base_ClearGeneratedAttackWarningsByTrack Parms{};

	Parms.AnimMontage = AnimMontage;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function b1-Managed.BANSM_Base.AddPlayerWaterSplash_BySweepCheck
// (Native, Public, Private, BlueprintCallable)
// Parameters:
// class UAnimMontage*                     AnimMontage                                            (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// class FName                             _SocketName                                            (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// float                                   SweepRadius                                            (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// float                                   PointBetweenMin                                        (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// float                                   SampleStep                                             (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UBANSM_Base::AddPlayerWaterSplash_BySweepCheck(class UAnimMontage* AnimMontage, class FName _SocketName, float SweepRadius, float PointBetweenMin, float SampleStep)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BANSM_Base", "AddPlayerWaterSplash_BySweepCheck");

	Params::BANSM_Base_AddPlayerWaterSplash_BySweepCheck Parms{};

	Parms.AnimMontage = AnimMontage;
	Parms._SocketName = _SocketName;
	Parms.SweepRadius = SweepRadius;
	Parms.PointBetweenMin = PointBetweenMin;
	Parms.SampleStep = SampleStep;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function b1-Managed.BANSM_Base.UpdateExtraSocketAttackWarning
// (Native, Public, Private, BlueprintCallable)
// Parameters:
// class UAnimMontage*                     AnimMontage                                            (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// int32                                   LengthFrame                                            (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UBANSM_Base::UpdateExtraSocketAttackWarning(class UAnimMontage* AnimMontage, int32 LengthFrame)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BANSM_Base", "UpdateExtraSocketAttackWarning");

	Params::BANSM_Base_UpdateExtraSocketAttackWarning Parms{};

	Parms.AnimMontage = AnimMontage;
	Parms.LengthFrame = LengthFrame;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function b1-Managed.BANSM_Base.AddExtraSocketAttackWarning
// (Native, Public, Private, BlueprintCallable)
// Parameters:
// class UAnimMontage*                     AnimMontage                                            (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// int32                                   SocketNum                                              (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// float                                   SocketRadius                                           (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// int32                                   LengthFrame                                            (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UBANSM_Base::AddExtraSocketAttackWarning(class UAnimMontage* AnimMontage, int32 SocketNum, float SocketRadius, int32 LengthFrame)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BANSM_Base", "AddExtraSocketAttackWarning");

	Params::BANSM_Base_AddExtraSocketAttackWarning Parms{};

	Parms.AnimMontage = AnimMontage;
	Parms.SocketNum = SocketNum;
	Parms.SocketRadius = SocketRadius;
	Parms.LengthFrame = LengthFrame;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function b1-Managed.BANSM_Base.AddSweepCheckAttackWarning
// (Native, Public, Private, BlueprintCallable)
// Parameters:
// class UAnimMontage*                     AnimMontage                                            (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// float                                   CheckSphereRadiusIncrease                              (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UBANSM_Base::AddSweepCheckAttackWarning(class UAnimMontage* AnimMontage, float CheckSphereRadiusIncrease)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BANSM_Base", "AddSweepCheckAttackWarning");

	Params::BANSM_Base_AddSweepCheckAttackWarning Parms{};

	Parms.AnimMontage = AnimMontage;
	Parms.CheckSphereRadiusIncrease = CheckSphereRadiusIncrease;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function b1-Managed.BANSM_Base.RefreshAttackWarning
// (Native, Public, Protected, BlueprintCallable)
// Parameters:
// class UAnimMontage*                     AnimMontage                                            (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// float                                   PreTimeSeconds                                         (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// float                                   PostTimeSeconds                                        (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UBANSM_Base::RefreshAttackWarning(class UAnimMontage* AnimMontage, float PreTimeSeconds, float PostTimeSeconds)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BANSM_Base", "RefreshAttackWarning");

	Params::BANSM_Base_RefreshAttackWarning Parms{};

	Parms.AnimMontage = AnimMontage;
	Parms.PreTimeSeconds = PreTimeSeconds;
	Parms.PostTimeSeconds = PostTimeSeconds;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function b1-Managed.BANSM_Base.GenerateNotifyState
// (Native, Public, Protected, BlueprintCallable)

void UBANSM_Base::GenerateNotifyState()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BANSM_Base", "GenerateNotifyState");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function b1-Managed.BANSM_Base.MarkNotifyState
// (Native, Event, Public, Protected, BlueprintCallable, BlueprintEvent)
// Parameters:
// class UAnimSequenceBase*                AnimSeq                                                (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// float                                   StartTime                                              (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// float                                   EndTime                                                (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UBANSM_Base::MarkNotifyState(class UAnimSequenceBase* AnimSeq, float StartTime, float EndTime)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BANSM_Base", "MarkNotifyState");

	Params::BANSM_Base_MarkNotifyState Parms{};

	Parms.AnimSeq = AnimSeq;
	Parms.StartTime = StartTime;
	Parms.EndTime = EndTime;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function b1-Managed.BANSM_Base.GenerateNotify
// (Native, Public, Protected, BlueprintCallable)

void UBANSM_Base::GenerateNotify()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BANSM_Base", "GenerateNotify");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function b1-Managed.BANSM_Base.CheckState
// (Native, Event, Public, Protected, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// class UAnimSequenceBase*                AnimBase                                               (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// float                                   CurTime                                                (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// uint8                                   ReturnValue                                            (Parm, OutParm, ReturnParm, NoDestructor, HasGetValueTypeHash)

uint8 UBANSM_Base::CheckState(class UAnimSequenceBase* AnimBase, float CurTime)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BANSM_Base", "CheckState");

	Params::BANSM_Base_CheckState Parms{};

	Parms.AnimBase = AnimBase;
	Parms.CurTime = CurTime;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function b1-Managed.BANSM_Base.MarkNotify
// (Native, Event, Public, Protected, BlueprintCallable, BlueprintEvent)
// Parameters:
// class UAnimSequenceBase*                AnimSeq                                                (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// float                                   StartTime                                              (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UBANSM_Base::MarkNotify(class UAnimSequenceBase* AnimSeq, float StartTime)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BANSM_Base", "MarkNotify");

	Params::BANSM_Base_MarkNotify Parms{};

	Parms.AnimSeq = AnimSeq;
	Parms.StartTime = StartTime;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function b1-Managed.BANSM_Base.GetSupportedClass
// (Native, Event, Public, HasOutParams, BlueprintCallable, BlueprintEvent, Const)
// Parameters:
// class UClass*                           ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

class UClass* UBANSM_Base::GetSupportedClass() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BANSM_Base", "GetSupportedClass");

	Params::BANSM_Base_GetSupportedClass Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function b1-Managed.BANSM_MarkFoot.CheckState
// (Native, Event, Public, Protected, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// class UAnimSequenceBase*                AnimBase                                               (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// float                                   CurTime                                                (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// uint8                                   ReturnValue                                            (Parm, OutParm, ReturnParm, NoDestructor, HasGetValueTypeHash)

uint8 UBANSM_MarkFoot::CheckState(class UAnimSequenceBase* AnimBase, float CurTime)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BANSM_MarkFoot", "CheckState");

	Params::BANSM_MarkFoot_CheckState Parms{};

	Parms.AnimBase = AnimBase;
	Parms.CurTime = CurTime;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function b1-Managed.BED_FSMNode_Condition_GI_Loading_IsInContextLevel.GetNodeDescriptionInCS
// (Native, Event, Public, HasOutParams, BlueprintEvent, Const)
// Parameters:
// class FString                           ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash)

class FString UBED_FSMNode_Condition_GI_Loading_IsInContextLevel::GetNodeDescriptionInCS() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BED_FSMNode_Condition_GI_Loading_IsInContextLevel", "GetNodeDescriptionInCS");

	Params::BED_FSMNode_Condition_GI_Loading_IsInContextLevel_GetNodeDescriptionInCS Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function b1-Managed.BGUTortoiseLevelStreamingMgrActor.OnSingleSetLevelsStateFinished
// (Native, Public, Private)
// Parameters:
// class FString                           LevelKeyword                                           (Parm, ZeroConstructor, HasGetValueTypeHash)
// class FString                           LevelState                                             (Parm, ZeroConstructor, HasGetValueTypeHash)
// int32                                   OperationID                                            (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ABGUTortoiseLevelStreamingMgrActor::OnSingleSetLevelsStateFinished(const class FString& LevelKeyword, const class FString& LevelState, int32 OperationID)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BGUTortoiseLevelStreamingMgrActor", "OnSingleSetLevelsStateFinished");

	Params::BGUTortoiseLevelStreamingMgrActor_OnSingleSetLevelsStateFinished Parms{};

	Parms.LevelKeyword = std::move(LevelKeyword);
	Parms.LevelState = std::move(LevelState);
	Parms.OperationID = OperationID;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function b1-Managed.BGUTortoiseLevelStreamingMgrActor.OnAllSetLevelsStateFinished
// (Native, Public, Private)

void ABGUTortoiseLevelStreamingMgrActor::OnAllSetLevelsStateFinished()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BGUTortoiseLevelStreamingMgrActor", "OnAllSetLevelsStateFinished");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function b1-Managed.BED_FSMNode_Condition_GI_Loading_IsInMap.GetNodeDescriptionInCS
// (Native, Event, Public, HasOutParams, BlueprintEvent, Const)
// Parameters:
// class FString                           ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash)

class FString UBED_FSMNode_Condition_GI_Loading_IsInMap::GetNodeDescriptionInCS() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BED_FSMNode_Condition_GI_Loading_IsInMap", "GetNodeDescriptionInCS");

	Params::BED_FSMNode_Condition_GI_Loading_IsInMap_GetNodeDescriptionInCS Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function b1-Managed.BGWDataAsset_TortoiseLevelStreamingConfig.SubLevelNamesGetter
// (Native, Public, BlueprintCallable)

void UBGWDataAsset_TortoiseLevelStreamingConfig::SubLevelNamesGetter()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BGWDataAsset_TortoiseLevelStreamingConfig", "SubLevelNamesGetter");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function b1-Managed.BED_FSMNode_Condition_GI_Loading_IsInServer.GetNodeDescriptionInCS
// (Native, Event, Public, HasOutParams, BlueprintEvent, Const)
// Parameters:
// class FString                           ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash)

class FString UBED_FSMNode_Condition_GI_Loading_IsInServer::GetNodeDescriptionInCS() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BED_FSMNode_Condition_GI_Loading_IsInServer", "GetNodeDescriptionInCS");

	Params::BED_FSMNode_Condition_GI_Loading_IsInServer_GetNodeDescriptionInCS Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function b1-Managed.BANS_GSShooterMode.GSNotifyBeginCS
// (Native, Event, Public, Protected, BlueprintEvent, Const)
// Parameters:
// struct FUStGSNotifyParam                NotifyParam                                            (Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
// float                                   TotalDuration                                          (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UBANS_GSShooterMode::GSNotifyBeginCS(const struct FUStGSNotifyParam& NotifyParam, float TotalDuration) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BANS_GSShooterMode", "GSNotifyBeginCS");

	Params::BANS_GSShooterMode_GSNotifyBeginCS Parms{};

	Parms.NotifyParam = std::move(NotifyParam);
	Parms.TotalDuration = TotalDuration;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function b1-Managed.BANS_GSShooterMode.GSNotifyTickCS
// (Native, Event, Public, Protected, BlueprintEvent, Const)
// Parameters:
// struct FUStGSNotifyParam                NotifyParam                                            (Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
// float                                   FrameDeltaTime                                         (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UBANS_GSShooterMode::GSNotifyTickCS(const struct FUStGSNotifyParam& NotifyParam, float FrameDeltaTime) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BANS_GSShooterMode", "GSNotifyTickCS");

	Params::BANS_GSShooterMode_GSNotifyTickCS Parms{};

	Parms.NotifyParam = std::move(NotifyParam);
	Parms.FrameDeltaTime = FrameDeltaTime;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function b1-Managed.BANS_GSShooterMode.GSNotifyEndCS
// (Native, Event, Public, Protected, BlueprintEvent, Const)
// Parameters:
// struct FUStGSNotifyParam                NotifyParam                                            (Parm, ZeroConstructor, IsPlainOldData, NoDestructor)

void UBANS_GSShooterMode::GSNotifyEndCS(const struct FUStGSNotifyParam& NotifyParam) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BANS_GSShooterMode", "GSNotifyEndCS");

	Params::BANS_GSShooterMode_GSNotifyEndCS Parms{};

	Parms.NotifyParam = std::move(NotifyParam);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function b1-Managed.BED_FSMNode_GI_Loading_InitDispLibWorld.PostPropertyChanged
// (Native, Event, Public, BlueprintEvent)
// Parameters:
// class FString                           MemberName                                             (Parm, ZeroConstructor, HasGetValueTypeHash)
// class FString                           PropertyName                                           (Parm, ZeroConstructor, HasGetValueTypeHash)

void UBED_FSMNode_GI_Loading_InitDispLibWorld::PostPropertyChanged(const class FString& MemberName, const class FString& PropertyName)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BED_FSMNode_GI_Loading_InitDispLibWorld", "PostPropertyChanged");

	Params::BED_FSMNode_GI_Loading_InitDispLibWorld_PostPropertyChanged Parms{};

	Parms.MemberName = std::move(MemberName);
	Parms.PropertyName = std::move(PropertyName);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function b1-Managed.BED_FSMNode_GI_Loading_InitDispLibWorld.GetNodeDescriptionInCS
// (Native, Event, Public, HasOutParams, BlueprintEvent, Const)
// Parameters:
// class FString                           ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash)

class FString UBED_FSMNode_GI_Loading_InitDispLibWorld::GetNodeDescriptionInCS() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BED_FSMNode_GI_Loading_InitDispLibWorld", "GetNodeDescriptionInCS");

	Params::BED_FSMNode_GI_Loading_InitDispLibWorld_GetNodeDescriptionInCS Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function b1-Managed.BUS_SpringArmComponent.CalcSmoothLocation
// (Native, Event, Public, Protected, HasOutParams, BlueprintEvent)
// Parameters:
// struct FVector                          Current                                                (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// struct FVector                          Target                                                 (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// float                                   DeltaTime                                              (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// struct FVector                          SmoothSpeed                                            (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// struct FVector                          ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

struct FVector UBUS_SpringArmComponent::CalcSmoothLocation(const struct FVector& Current, const struct FVector& Target, float DeltaTime, const struct FVector& SmoothSpeed)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BUS_SpringArmComponent", "CalcSmoothLocation");

	Params::BUS_SpringArmComponent_CalcSmoothLocation Parms{};

	Parms.Current = std::move(Current);
	Parms.Target = std::move(Target);
	Parms.DeltaTime = DeltaTime;
	Parms.SmoothSpeed = std::move(SmoothSpeed);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function b1-Managed.BUS_SpringArmComponent.BlendLocationsInCS
// (Native, Event, Public, Protected, HasOutParams, BlueprintEvent)
// Parameters:
// struct FVector                          OriginArmLocation                                      (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// struct FVector                          DesiredArmLocation                                     (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// struct FHitResult                       HitResult                                              (ConstParm, Parm, OutParm, ReferenceParm, IsPlainOldData, NoDestructor)
// float                                   DeltaTime                                              (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// struct FVector                          ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

struct FVector UBUS_SpringArmComponent::BlendLocationsInCS(const struct FVector& OriginArmLocation, const struct FVector& DesiredArmLocation, const struct FHitResult& HitResult, float DeltaTime)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BUS_SpringArmComponent", "BlendLocationsInCS");

	Params::BUS_SpringArmComponent_BlendLocationsInCS Parms{};

	Parms.OriginArmLocation = std::move(OriginArmLocation);
	Parms.DesiredArmLocation = std::move(DesiredArmLocation);
	Parms.HitResult = std::move(HitResult);
	Parms.DeltaTime = DeltaTime;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function b1-Managed.OverlapBoxBinder.OnActorLeave
// (Native, Public, Private)
// Parameters:
// class AActor*                           OverlappedActor                                        (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// class AActor*                           OtherActor                                             (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UOverlapBoxBinder::OnActorLeave(class AActor* OverlappedActor, class AActor* OtherActor)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("OverlapBoxBinder", "OnActorLeave");

	Params::OverlapBoxBinder_OnActorLeave Parms{};

	Parms.OverlappedActor = OverlappedActor;
	Parms.OtherActor = OtherActor;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function b1-Managed.OverlapBoxBinder.OnActorEnter
// (Native, Public, Private)
// Parameters:
// class AActor*                           OverlappedActor                                        (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// class AActor*                           OtherActor                                             (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UOverlapBoxBinder::OnActorEnter(class AActor* OverlappedActor, class AActor* OtherActor)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("OverlapBoxBinder", "OnActorEnter");

	Params::OverlapBoxBinder_OnActorEnter Parms{};

	Parms.OverlappedActor = OverlappedActor;
	Parms.OtherActor = OtherActor;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function b1-Managed.BED_FSMNode_GI_Loading_LoadCharacterViewLevel.PostPropertyChanged
// (Native, Event, Public, BlueprintEvent)
// Parameters:
// class FString                           MemberName                                             (Parm, ZeroConstructor, HasGetValueTypeHash)
// class FString                           PropertyName                                           (Parm, ZeroConstructor, HasGetValueTypeHash)

void UBED_FSMNode_GI_Loading_LoadCharacterViewLevel::PostPropertyChanged(const class FString& MemberName, const class FString& PropertyName)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BED_FSMNode_GI_Loading_LoadCharacterViewLevel", "PostPropertyChanged");

	Params::BED_FSMNode_GI_Loading_LoadCharacterViewLevel_PostPropertyChanged Parms{};

	Parms.MemberName = std::move(MemberName);
	Parms.PropertyName = std::move(PropertyName);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function b1-Managed.BED_FSMNode_GI_Loading_LoadCharacterViewLevel.GetNodeDescriptionInCS
// (Native, Event, Public, HasOutParams, BlueprintEvent, Const)
// Parameters:
// class FString                           ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash)

class FString UBED_FSMNode_GI_Loading_LoadCharacterViewLevel::GetNodeDescriptionInCS() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BED_FSMNode_GI_Loading_LoadCharacterViewLevel", "GetNodeDescriptionInCS");

	Params::BED_FSMNode_GI_Loading_LoadCharacterViewLevel_GetNodeDescriptionInCS Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function b1-Managed.BGW_CommLevelMgr.OnAKBStateEndFunc
// (Native, Public)
// Parameters:
// class FName                             BeginStateName                                         (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// class FName                             EndStateName                                           (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// uint8                                   IsForceImSet                                           (Parm, NoDestructor, HasGetValueTypeHash)

void UBGW_CommLevelMgr::OnAKBStateEndFunc(class FName BeginStateName, class FName EndStateName, uint8 IsForceImSet)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BGW_CommLevelMgr", "OnAKBStateEndFunc");

	Params::BGW_CommLevelMgr_OnAKBStateEndFunc Parms{};

	Parms.BeginStateName = BeginStateName;
	Parms.EndStateName = EndStateName;
	Parms.IsForceImSet = IsForceImSet;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function b1-Managed.BGUProjectileSpawnPreviewActor.ReceiveTick
// (Native, Event, Public, BlueprintEvent)
// Parameters:
// float                                   DeltaSeconds                                           (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ABGUProjectileSpawnPreviewActor::ReceiveTick(float DeltaSeconds)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BGUProjectileSpawnPreviewActor", "ReceiveTick");

	Params::BGUProjectileSpawnPreviewActor_ReceiveTick Parms{};

	Parms.DeltaSeconds = DeltaSeconds;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function b1-Managed.BUAnimSimple.BlueprintInitializeAnimation
// (Native, Event, Public, BlueprintEvent)

void UBUAnimSimple::BlueprintInitializeAnimation()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BUAnimSimple", "BlueprintInitializeAnimation");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function b1-Managed.BUAnimSimple.GetRandomIdleAnim
// (Native, Public, Private, HasOutParams, BlueprintCallable)
// Parameters:
// struct FAnimUpdateContext               Context                                                (Parm, OutParm, ReferenceParm)
// struct FAnimNodeReference               Node                                                   (Parm, OutParm, ReferenceParm, NoDestructor)

void UBUAnimSimple::GetRandomIdleAnim(struct FAnimUpdateContext& Context, struct FAnimNodeReference& Node)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BUAnimSimple", "GetRandomIdleAnim");

	Params::BUAnimSimple_GetRandomIdleAnim Parms{};

	Parms.Context = std::move(Context);
	Parms.Node = std::move(Node);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	Context = std::move(Parms.Context);
	Node = std::move(Parms.Node);
}


// Function b1-Managed.BUS_DestructibleEnvSurfaceVolumeRelativeComp.BeginPlayInCS
// (Native, Event, Public, BlueprintEvent)

void UBUS_DestructibleEnvSurfaceVolumeRelativeComp::BeginPlayInCS()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BUS_DestructibleEnvSurfaceVolumeRelativeComp", "BeginPlayInCS");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function b1-Managed.BUS_FoliageInteractSoundCompImpl.OnCollisionBeginOverlap
// (Native, Public, Private)
// Parameters:
// class UPrimitiveComponent*              OverlappedComponent                                    (ExportObject, Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// class AActor*                           OtherActor                                             (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// class UPrimitiveComponent*              OtherComp                                              (ExportObject, Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// int32                                   OtherBodyIndex                                         (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// uint8                                   bFromSweep                                             (Parm, NoDestructor, HasGetValueTypeHash)
// struct FHitResult                       SweepResult                                            (Parm, IsPlainOldData, NoDestructor)

void UBUS_FoliageInteractSoundCompImpl::OnCollisionBeginOverlap(class UPrimitiveComponent* OverlappedComponent, class AActor* OtherActor, class UPrimitiveComponent* OtherComp, int32 OtherBodyIndex, uint8 bFromSweep, const struct FHitResult& SweepResult)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BUS_FoliageInteractSoundCompImpl", "OnCollisionBeginOverlap");

	Params::BUS_FoliageInteractSoundCompImpl_OnCollisionBeginOverlap Parms{};

	Parms.OverlappedComponent = OverlappedComponent;
	Parms.OtherActor = OtherActor;
	Parms.OtherComp = OtherComp;
	Parms.OtherBodyIndex = OtherBodyIndex;
	Parms.bFromSweep = bFromSweep;
	Parms.SweepResult = std::move(SweepResult);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function b1-Managed.BUS_FoliageInteractSoundCompImpl.OnCollisionEndOverlap
// (Native, Public, Private)
// Parameters:
// class UPrimitiveComponent*              OverlappedComponent                                    (ExportObject, Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// class AActor*                           OtherActor                                             (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// class UPrimitiveComponent*              OtherComp                                              (ExportObject, Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// int32                                   OtherBodyIndex                                         (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// uint8                                   bFromSweep                                             (Parm, NoDestructor, HasGetValueTypeHash)
// struct FHitResult                       SweepResult                                            (Parm, IsPlainOldData, NoDestructor)

void UBUS_FoliageInteractSoundCompImpl::OnCollisionEndOverlap(class UPrimitiveComponent* OverlappedComponent, class AActor* OtherActor, class UPrimitiveComponent* OtherComp, int32 OtherBodyIndex, uint8 bFromSweep, const struct FHitResult& SweepResult)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BUS_FoliageInteractSoundCompImpl", "OnCollisionEndOverlap");

	Params::BUS_FoliageInteractSoundCompImpl_OnCollisionEndOverlap Parms{};

	Parms.OverlappedComponent = OverlappedComponent;
	Parms.OtherActor = OtherActor;
	Parms.OtherComp = OtherComp;
	Parms.OtherBodyIndex = OtherBodyIndex;
	Parms.bFromSweep = bFromSweep;
	Parms.SweepResult = std::move(SweepResult);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function b1-Managed.BGUNetDefaultEmptyActor.PostInitializeComponentsCS
// (Native, Event, Public, Protected, BlueprintEvent)

void ABGUNetDefaultEmptyActor::PostInitializeComponentsCS()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BGUNetDefaultEmptyActor", "PostInitializeComponentsCS");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function b1-Managed.BGUNetDefaultEmptyActor.ReceiveBeginPlay
// (Native, Event, Public, Protected, BlueprintEvent)

void ABGUNetDefaultEmptyActor::ReceiveBeginPlay()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BGUNetDefaultEmptyActor", "ReceiveBeginPlay");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function b1-Managed.BGUNetDefaultEmptyActor.OnConstructionCS
// (Native, Event, Public, Protected, BlueprintEvent)
// Parameters:
// struct FTransform                       Transform                                              (ConstParm, Parm, OutParm, ReferenceParm, IsPlainOldData, NoDestructor)

void ABGUNetDefaultEmptyActor::OnConstructionCS(const struct FTransform& Transform)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BGUNetDefaultEmptyActor", "OnConstructionCS");

	Params::BGUNetDefaultEmptyActor_OnConstructionCS Parms{};

	Parms.Transform = std::move(Transform);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function b1-Managed.BGUNetDefaultEmptyActor.OnPossessedCS
// (Native, Event, Public, BlueprintEvent)
// Parameters:
// class AController*                      NewController                                          (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ABGUNetDefaultEmptyActor::OnPossessedCS(class AController* NewController)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BGUNetDefaultEmptyActor", "OnPossessedCS");

	Params::BGUNetDefaultEmptyActor_OnPossessedCS Parms{};

	Parms.NewController = NewController;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function b1-Managed.BGUNetDefaultEmptyActor.ReceiveTick
// (Native, Event, Public, BlueprintEvent)
// Parameters:
// float                                   DeltaSeconds                                           (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ABGUNetDefaultEmptyActor::ReceiveTick(float DeltaSeconds)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BGUNetDefaultEmptyActor", "ReceiveTick");

	Params::BGUNetDefaultEmptyActor_ReceiveTick Parms{};

	Parms.DeltaSeconds = DeltaSeconds;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function b1-Managed.BUS_PlayerApproachedNotifyComp.PlayerApproached_BeginOverlap
// (Native, Public, Private)
// Parameters:
// class UPrimitiveComponent*              OverlappedComponent                                    (ExportObject, Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// class AActor*                           OtherActor                                             (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// class UPrimitiveComponent*              OtherComp                                              (ExportObject, Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// int32                                   OtherBodyIndex                                         (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// uint8                                   bFromSweep                                             (Parm, NoDestructor, HasGetValueTypeHash)
// struct FHitResult                       SweepResult                                            (Parm, IsPlainOldData, NoDestructor)

void UBUS_PlayerApproachedNotifyComp::PlayerApproached_BeginOverlap(class UPrimitiveComponent* OverlappedComponent, class AActor* OtherActor, class UPrimitiveComponent* OtherComp, int32 OtherBodyIndex, uint8 bFromSweep, const struct FHitResult& SweepResult)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BUS_PlayerApproachedNotifyComp", "PlayerApproached_BeginOverlap");

	Params::BUS_PlayerApproachedNotifyComp_PlayerApproached_BeginOverlap Parms{};

	Parms.OverlappedComponent = OverlappedComponent;
	Parms.OtherActor = OtherActor;
	Parms.OtherComp = OtherComp;
	Parms.OtherBodyIndex = OtherBodyIndex;
	Parms.bFromSweep = bFromSweep;
	Parms.SweepResult = std::move(SweepResult);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function b1-Managed.BGW_PlatformEventMgr.OnNetworkInitializedChangeCS
// (Native, Event, Public, Protected, BlueprintEvent)
// Parameters:
// uint8                                   bIsNetworkInitialized                                  (Parm, NoDestructor, HasGetValueTypeHash)

void UBGW_PlatformEventMgr::OnNetworkInitializedChangeCS(uint8 bIsNetworkInitialized)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BGW_PlatformEventMgr", "OnNetworkInitializedChangeCS");

	Params::BGW_PlatformEventMgr_OnNetworkInitializedChangeCS Parms{};

	Parms.bIsNetworkInitialized = bIsNetworkInitialized;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function b1-Managed.BGW_PlatformEventMgr.OnApplicationReactivatedCS
// (Native, Event, Public, Protected, BlueprintEvent)

void UBGW_PlatformEventMgr::OnApplicationReactivatedCS()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BGW_PlatformEventMgr", "OnApplicationReactivatedCS");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function b1-Managed.BGW_PlatformEventMgr.OnApplicationDeactivateCS
// (Native, Event, Public, Protected, BlueprintEvent)

void UBGW_PlatformEventMgr::OnApplicationDeactivateCS()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BGW_PlatformEventMgr", "OnApplicationDeactivateCS");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function b1-Managed.BGW_PlatformEventMgr.OnApplicationTerminateCS
// (Native, Event, Public, Protected, BlueprintEvent)

void UBGW_PlatformEventMgr::OnApplicationTerminateCS()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BGW_PlatformEventMgr", "OnApplicationTerminateCS");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function b1-Managed.BGW_PlatformEventMgr.OnApplicationSuspendCS
// (Native, Event, Public, Protected, BlueprintEvent)

void UBGW_PlatformEventMgr::OnApplicationSuspendCS()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BGW_PlatformEventMgr", "OnApplicationSuspendCS");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function b1-Managed.BGW_PlatformEventMgr.OnApplicationPreExitCS
// (Native, Event, Public, Protected, BlueprintEvent)

void UBGW_PlatformEventMgr::OnApplicationPreExitCS()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BGW_PlatformEventMgr", "OnApplicationPreExitCS");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function b1-Managed.BGW_PlatformEventMgr.OnApplicationResumeCS
// (Native, Event, Public, Protected, BlueprintEvent)

void UBGW_PlatformEventMgr::OnApplicationResumeCS()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BGW_PlatformEventMgr", "OnApplicationResumeCS");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function b1-Managed.BGW_PlatformEventMgr.OnUserLoginChangeCS
// (Native, Event, Public, Protected, BlueprintEvent)
// Parameters:
// uint8                                   bIsSignIn                                              (Parm, NoDestructor, HasGetValueTypeHash)
// int32                                   PlatformUserId                                         (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// int32                                   UserIndex                                              (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UBGW_PlatformEventMgr::OnUserLoginChangeCS(uint8 bIsSignIn, int32 PlatformUserId, int32 UserIndex)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BGW_PlatformEventMgr", "OnUserLoginChangeCS");

	Params::BGW_PlatformEventMgr_OnUserLoginChangeCS Parms{};

	Parms.bIsSignIn = bIsSignIn;
	Parms.PlatformUserId = PlatformUserId;
	Parms.UserIndex = UserIndex;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function b1-Managed.BGW_PlatformEventMgr.OnApplicationExitCS
// (Native, Event, Public, Protected, BlueprintEvent)

void UBGW_PlatformEventMgr::OnApplicationExitCS()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BGW_PlatformEventMgr", "OnApplicationExitCS");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function b1-Managed.BGW_PlatformEventMgr.OnApplicationInitCS
// (Native, Event, Public, Protected, BlueprintEvent)

void UBGW_PlatformEventMgr::OnApplicationInitCS()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BGW_PlatformEventMgr", "OnApplicationInitCS");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function b1-Managed.BED_FSMNode_Condition_GI_Loading_OpenSeamlessLevelTravel.GetNodeDescriptionInCS
// (Native, Event, Public, HasOutParams, BlueprintEvent, Const)
// Parameters:
// class FString                           ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash)

class FString UBED_FSMNode_Condition_GI_Loading_OpenSeamlessLevelTravel::GetNodeDescriptionInCS() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BED_FSMNode_Condition_GI_Loading_OpenSeamlessLevelTravel", "GetNodeDescriptionInCS");

	Params::BED_FSMNode_Condition_GI_Loading_OpenSeamlessLevelTravel_GetNodeDescriptionInCS Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function b1-Managed.IL2CPPStructPersistTest.PrintStruct
// (Native, Public, BlueprintCallable)
// Parameters:
// struct FCppTestStructOuter              Input                                                  (Parm)

void AIL2CPPStructPersistTest::PrintStruct(const struct FCppTestStructOuter& Input)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("IL2CPPStructPersistTest", "PrintStruct");

	Params::IL2CPPStructPersistTest_PrintStruct Parms{};

	Parms.Input = std::move(Input);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function b1-Managed.BED_FSMNode_Condition_GI_Global_IsIgnoreWXLogin.GetNodeDescriptionInCS
// (Native, Event, Public, HasOutParams, BlueprintEvent, Const)
// Parameters:
// class FString                           ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash)

class FString UBED_FSMNode_Condition_GI_Global_IsIgnoreWXLogin::GetNodeDescriptionInCS() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BED_FSMNode_Condition_GI_Global_IsIgnoreWXLogin", "GetNodeDescriptionInCS");

	Params::BED_FSMNode_Condition_GI_Global_IsIgnoreWXLogin_GetNodeDescriptionInCS Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function b1-Managed.BGUMotionMatchingDebugComp.TickComponentInCS
// (Native, Event, Public, BlueprintEvent)
// Parameters:
// float                                   DeltaTime                                              (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UBGUMotionMatchingDebugComp::TickComponentInCS(float DeltaTime)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BGUMotionMatchingDebugComp", "TickComponentInCS");

	Params::BGUMotionMatchingDebugComp_TickComponentInCS Parms{};

	Parms.DeltaTime = DeltaTime;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function b1-Managed.BGUMotionMatchingDebugComp.BeginPlayInCS
// (Native, Event, Public, BlueprintEvent)

void UBGUMotionMatchingDebugComp::BeginPlayInCS()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BGUMotionMatchingDebugComp", "BeginPlayInCS");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function b1-Managed.BGUMotionMatchingDebugComp.StopDebugPlayer
// (Native, Public, BlueprintCallable)

void UBGUMotionMatchingDebugComp::StopDebugPlayer()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BGUMotionMatchingDebugComp", "StopDebugPlayer");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function b1-Managed.BGUMotionMatchingDebugComp.Restart
// (Native, Public, BlueprintCallable)

void UBGUMotionMatchingDebugComp::Restart()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BGUMotionMatchingDebugComp", "Restart");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function b1-Managed.MovieInstance.OnLoadLevelStreamingFinish
// (Native, Public, Private)
// Parameters:
// int32                                   ActionID                                               (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// int32                                   Linkage                                                (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UMovieInstance::OnLoadLevelStreamingFinish(int32 ActionID, int32 Linkage)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MovieInstance", "OnLoadLevelStreamingFinish");

	Params::MovieInstance_OnLoadLevelStreamingFinish Parms{};

	Parms.ActionID = ActionID;
	Parms.Linkage = Linkage;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function b1-Managed.MovieInstance.OnSequencePlayFinished
// (Native, Public, Private)

void UMovieInstance::OnSequencePlayFinished()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MovieInstance", "OnSequencePlayFinished");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function b1-Managed.MovieInstance.OnSequencePlayStopped
// (Native, Public, Private)

void UMovieInstance::OnSequencePlayStopped()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MovieInstance", "OnSequencePlayStopped");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function b1-Managed.BED_MovieNode_PerformerAddBuff.GetNodeDescriptionInCS
// (Native, Event, Public, HasOutParams, BlueprintEvent, Const)
// Parameters:
// class FString                           ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash)

class FString UBED_MovieNode_PerformerAddBuff::GetNodeDescriptionInCS() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BED_MovieNode_PerformerAddBuff", "GetNodeDescriptionInCS");

	Params::BED_MovieNode_PerformerAddBuff_GetNodeDescriptionInCS Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function b1-Managed.InputActionEventReceiver.PostApplicationActivationChanged
// (Native, Event, Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// uint8                                   IsActive                                               (Parm, NoDestructor, HasGetValueTypeHash)

void UInputActionEventReceiver::PostApplicationActivationChanged(uint8 IsActive)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("InputActionEventReceiver", "PostApplicationActivationChanged");

	Params::InputActionEventReceiver_PostApplicationActivationChanged Parms{};

	Parms.IsActive = IsActive;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function b1-Managed.InputActionEventReceiver.GetRichTextInlineIconInfo
// (Native, Event, Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// int32                                   BasePixelHeight                                        (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// int32                                   BaselineOffset                                         (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// int32                                   ConnectIconOffset                                      (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UInputActionEventReceiver::GetRichTextInlineIconInfo(int32* BasePixelHeight, int32* BaselineOffset, int32* ConnectIconOffset)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("InputActionEventReceiver", "GetRichTextInlineIconInfo");

	Params::InputActionEventReceiver_GetRichTextInlineIconInfo Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	if (BasePixelHeight != nullptr)
		*BasePixelHeight = Parms.BasePixelHeight;

	if (BaselineOffset != nullptr)
		*BaselineOffset = Parms.BaselineOffset;

	if (ConnectIconOffset != nullptr)
		*ConnectIconOffset = Parms.ConnectIconOffset;
}


// Function b1-Managed.InputActionEventReceiver.TryGetTextureInfoByName
// (Native, Event, Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// class FString                           Name_0                                                 (Parm, ZeroConstructor, HasGetValueTypeHash)
// float                                   Offset                                                 (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// int32                                   BgType                                                 (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// uint8                                   ReturnValue                                            (Parm, OutParm, ReturnParm, NoDestructor, HasGetValueTypeHash)

uint8 UInputActionEventReceiver::TryGetTextureInfoByName(const class FString& Name_0, float* Offset, int32* BgType)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("InputActionEventReceiver", "TryGetTextureInfoByName");

	Params::InputActionEventReceiver_TryGetTextureInfoByName Parms{};

	Parms.Name_0 = std::move(Name_0);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	if (Offset != nullptr)
		*Offset = Parms.Offset;

	if (BgType != nullptr)
		*BgType = Parms.BgType;

	return Parms.ReturnValue;
}


// Function b1-Managed.InputActionEventReceiver.TryGetTextureByAction
// (Native, Event, Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// class UInputAction*                     InputAction                                            (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// float                                   Offset                                                 (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// class UTexture2D*                       Texture                                                (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// int32                                   BgType                                                 (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// float                                   ChordOffset                                            (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// class UTexture2D*                       ChordTexture                                           (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// class UTexture2D*                       ConnectTexture                                         (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// class UTexture2D*                       NoneTexture                                            (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// uint8                                   ReturnValue                                            (Parm, OutParm, ReturnParm, NoDestructor, HasGetValueTypeHash)

uint8 UInputActionEventReceiver::TryGetTextureByAction(class UInputAction* InputAction, float* Offset, class UTexture2D** Texture, int32* BgType, float* ChordOffset, class UTexture2D** ChordTexture, class UTexture2D** ConnectTexture, class UTexture2D** NoneTexture)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("InputActionEventReceiver", "TryGetTextureByAction");

	Params::InputActionEventReceiver_TryGetTextureByAction Parms{};

	Parms.InputAction = InputAction;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	if (Offset != nullptr)
		*Offset = Parms.Offset;

	if (Texture != nullptr)
		*Texture = Parms.Texture;

	if (BgType != nullptr)
		*BgType = Parms.BgType;

	if (ChordOffset != nullptr)
		*ChordOffset = Parms.ChordOffset;

	if (ChordTexture != nullptr)
		*ChordTexture = Parms.ChordTexture;

	if (ConnectTexture != nullptr)
		*ConnectTexture = Parms.ConnectTexture;

	if (NoneTexture != nullptr)
		*NoneTexture = Parms.NoneTexture;

	return Parms.ReturnValue;
}


// Function b1-Managed.InputActionEventReceiver.IsInputDebuggerOpen
// (Native, Event, Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// uint8                                   ReturnValue                                            (Parm, OutParm, ReturnParm, NoDestructor, HasGetValueTypeHash)

uint8 UInputActionEventReceiver::IsInputDebuggerOpen()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("InputActionEventReceiver", "IsInputDebuggerOpen");

	Params::InputActionEventReceiver_IsInputDebuggerOpen Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function b1-Managed.InputActionEventReceiver.TryGetInlineTexture
// (Native, Event, Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// class FString                           ActionTag                                              (Parm, ZeroConstructor, HasGetValueTypeHash)
// EGSInputRichTextMarkUpType              MarkUpType                                             (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// class UTexture2D*                       InlineTexture                                          (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// class UTexture2D*                       InlineChordTexture                                     (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// class UTexture2D*                       ConnectTexture                                         (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// uint8                                   ReturnValue                                            (Parm, OutParm, ReturnParm, NoDestructor, HasGetValueTypeHash)

uint8 UInputActionEventReceiver::TryGetInlineTexture(const class FString& ActionTag, EGSInputRichTextMarkUpType MarkUpType, class UTexture2D** InlineTexture, class UTexture2D** InlineChordTexture, class UTexture2D** ConnectTexture)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("InputActionEventReceiver", "TryGetInlineTexture");

	Params::InputActionEventReceiver_TryGetInlineTexture Parms{};

	Parms.ActionTag = std::move(ActionTag);
	Parms.MarkUpType = MarkUpType;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	if (InlineTexture != nullptr)
		*InlineTexture = Parms.InlineTexture;

	if (InlineChordTexture != nullptr)
		*InlineChordTexture = Parms.InlineChordTexture;

	if (ConnectTexture != nullptr)
		*ConnectTexture = Parms.ConnectTexture;

	return Parms.ReturnValue;
}


// Function b1-Managed.InputActionEventReceiver.InputActionTrigger
// (Native, Event, Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// class FString                           ActionName                                             (Parm, ZeroConstructor, HasGetValueTypeHash)
// ETriggerEvent                           TriggerEvent                                           (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// EInputActionValueType                   InputActionValueType                                   (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// struct FVector                          InputActionValue                                       (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UInputActionEventReceiver::InputActionTrigger(const class FString& ActionName, ETriggerEvent TriggerEvent, EInputActionValueType InputActionValueType, const struct FVector& InputActionValue)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("InputActionEventReceiver", "InputActionTrigger");

	Params::InputActionEventReceiver_InputActionTrigger Parms{};

	Parms.ActionName = std::move(ActionName);
	Parms.TriggerEvent = TriggerEvent;
	Parms.InputActionValueType = InputActionValueType;
	Parms.InputActionValue = std::move(InputActionValue);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function b1-Managed.InputActionEventReceiver.FetchDebugInfo
// (Native, Event, Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// TArray<class FString>                   DebugLines                                             (Parm, OutParm)
// TArray<struct FColor>                   DebugColors                                            (Parm, OutParm)

void UInputActionEventReceiver::FetchDebugInfo(TArray<class FString>* DebugLines, TArray<struct FColor>* DebugColors)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("InputActionEventReceiver", "FetchDebugInfo");

	Params::InputActionEventReceiver_FetchDebugInfo Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	if (DebugLines != nullptr)
		*DebugLines = std::move(Parms.DebugLines);

	if (DebugColors != nullptr)
		*DebugColors = std::move(Parms.DebugColors);
}


// Function b1-Managed.BGULevelStateFunctionBinder.OnRequestUpdateLevelState
// (Native, Public, Private)

void UBGULevelStateFunctionBinder::OnRequestUpdateLevelState()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BGULevelStateFunctionBinder", "OnRequestUpdateLevelState");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function b1-Managed.BGULevelStateFunctionBinder.OnSetLevelsStateFinished
// (Native, Public, Private)
// Parameters:
// class FString                           LevelKeyword                                           (Parm, ZeroConstructor, HasGetValueTypeHash)
// class FString                           LevelState                                             (Parm, ZeroConstructor, HasGetValueTypeHash)
// int32                                   OperationID                                            (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UBGULevelStateFunctionBinder::OnSetLevelsStateFinished(const class FString& LevelKeyword, const class FString& LevelState, int32 OperationID)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BGULevelStateFunctionBinder", "OnSetLevelsStateFinished");

	Params::BGULevelStateFunctionBinder_OnSetLevelsStateFinished Parms{};

	Parms.LevelKeyword = std::move(LevelKeyword);
	Parms.LevelState = std::move(LevelState);
	Parms.OperationID = OperationID;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function b1-Managed.UGSKeyEvent.OnAnalogInputEvent
// (Native, Public, Private)
// Parameters:
// struct FAnalogInputEvent                AnalogInputEvent                                       (Parm)

void UUGSKeyEvent::OnAnalogInputEvent(const struct FAnalogInputEvent& AnalogInputEvent)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("UGSKeyEvent", "OnAnalogInputEvent");

	Params::UGSKeyEvent_OnAnalogInputEvent Parms{};

	Parms.AnalogInputEvent = std::move(AnalogInputEvent);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function b1-Managed.UGSKeyEvent.OnMouseWheelEvent
// (Native, Public, Private)
// Parameters:
// struct FPointerEvent                    InWheelEvent                                           (Parm)

void UUGSKeyEvent::OnMouseWheelEvent(const struct FPointerEvent& InWheelEvent)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("UGSKeyEvent", "OnMouseWheelEvent");

	Params::UGSKeyEvent_OnMouseWheelEvent Parms{};

	Parms.InWheelEvent = std::move(InWheelEvent);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function b1-Managed.UGSKeyEvent.OnMouseDownEvent
// (Native, Public, Private)
// Parameters:
// struct FPointerEvent                    InMouseEvent                                           (Parm)

void UUGSKeyEvent::OnMouseDownEvent(const struct FPointerEvent& InMouseEvent)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("UGSKeyEvent", "OnMouseDownEvent");

	Params::UGSKeyEvent_OnMouseDownEvent Parms{};

	Parms.InMouseEvent = std::move(InMouseEvent);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function b1-Managed.UGSKeyEvent.OnMouseUpEvent
// (Native, Public, Private)
// Parameters:
// struct FPointerEvent                    InMouseEvent                                           (Parm)

void UUGSKeyEvent::OnMouseUpEvent(const struct FPointerEvent& InMouseEvent)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("UGSKeyEvent", "OnMouseUpEvent");

	Params::UGSKeyEvent_OnMouseUpEvent Parms{};

	Parms.InMouseEvent = std::move(InMouseEvent);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function b1-Managed.UGSKeyEvent.OnKeyDownEvent
// (Native, Public, Private)
// Parameters:
// struct FKeyEvent                        InKeyEvent                                             (Parm)

void UUGSKeyEvent::OnKeyDownEvent(const struct FKeyEvent& InKeyEvent)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("UGSKeyEvent", "OnKeyDownEvent");

	Params::UGSKeyEvent_OnKeyDownEvent Parms{};

	Parms.InKeyEvent = std::move(InKeyEvent);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function b1-Managed.UGSKeyEvent.OnKeyUpEvent
// (Native, Public, Private)
// Parameters:
// struct FKeyEvent                        InKeyEvent                                             (Parm)

void UUGSKeyEvent::OnKeyUpEvent(const struct FKeyEvent& InKeyEvent)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("UGSKeyEvent", "OnKeyUpEvent");

	Params::UGSKeyEvent_OnKeyUpEvent Parms{};

	Parms.InKeyEvent = std::move(InKeyEvent);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function b1-Managed.UGSInputSettingsPreProcEvent.OnMouseButtonDownEvent
// (Native, Public, Private)
// Parameters:
// struct FPointerEvent                    InMouseEvent                                           (Parm)

void UUGSInputSettingsPreProcEvent::OnMouseButtonDownEvent(const struct FPointerEvent& InMouseEvent)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("UGSInputSettingsPreProcEvent", "OnMouseButtonDownEvent");

	Params::UGSInputSettingsPreProcEvent_OnMouseButtonDownEvent Parms{};

	Parms.InMouseEvent = std::move(InMouseEvent);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function b1-Managed.UGSInputSettingsPreProcEvent.OnMouseButtonUpEvent
// (Native, Public, Private)
// Parameters:
// struct FPointerEvent                    InMouseEvent                                           (Parm)

void UUGSInputSettingsPreProcEvent::OnMouseButtonUpEvent(const struct FPointerEvent& InMouseEvent)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("UGSInputSettingsPreProcEvent", "OnMouseButtonUpEvent");

	Params::UGSInputSettingsPreProcEvent_OnMouseButtonUpEvent Parms{};

	Parms.InMouseEvent = std::move(InMouseEvent);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function b1-Managed.UGSInputSettingsPreProcEvent.OnKeyDownEvent
// (Native, Public, Private)
// Parameters:
// struct FKeyEvent                        InKeyEvent                                             (Parm)

void UUGSInputSettingsPreProcEvent::OnKeyDownEvent(const struct FKeyEvent& InKeyEvent)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("UGSInputSettingsPreProcEvent", "OnKeyDownEvent");

	Params::UGSInputSettingsPreProcEvent_OnKeyDownEvent Parms{};

	Parms.InKeyEvent = std::move(InKeyEvent);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function b1-Managed.UGSInputSettingsPreProcEvent.OnKeyUpEvent
// (Native, Public, Private)
// Parameters:
// struct FKeyEvent                        InKeyEvent                                             (Parm)

void UUGSInputSettingsPreProcEvent::OnKeyUpEvent(const struct FKeyEvent& InKeyEvent)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("UGSInputSettingsPreProcEvent", "OnKeyUpEvent");

	Params::UGSInputSettingsPreProcEvent_OnKeyUpEvent Parms{};

	Parms.InKeyEvent = std::move(InKeyEvent);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function b1-Managed.InputPreProcEvent.OnMouseButtonDoubleClickEvent
// (Native, Public)
// Parameters:
// struct FPointerEvent                    InMouseEvent                                           (Parm)

void UInputPreProcEvent::OnMouseButtonDoubleClickEvent(const struct FPointerEvent& InMouseEvent)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("InputPreProcEvent", "OnMouseButtonDoubleClickEvent");

	Params::InputPreProcEvent_OnMouseButtonDoubleClickEvent Parms{};

	Parms.InMouseEvent = std::move(InMouseEvent);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function b1-Managed.InputPreProcEvent.OnInputTypeChangeTrigger
// (Native, Public)
// Parameters:
// EGSInputType                            InputType                                              (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UInputPreProcEvent::OnInputTypeChangeTrigger(EGSInputType InputType)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("InputPreProcEvent", "OnInputTypeChangeTrigger");

	Params::InputPreProcEvent_OnInputTypeChangeTrigger Parms{};

	Parms.InputType = InputType;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function b1-Managed.InputPreProcEvent.OnMouseButtonDownEvent
// (Native, Public)
// Parameters:
// struct FPointerEvent                    InMouseEvent                                           (Parm)

void UInputPreProcEvent::OnMouseButtonDownEvent(const struct FPointerEvent& InMouseEvent)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("InputPreProcEvent", "OnMouseButtonDownEvent");

	Params::InputPreProcEvent_OnMouseButtonDownEvent Parms{};

	Parms.InMouseEvent = std::move(InMouseEvent);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function b1-Managed.InputPreProcEvent.OnAnyKeyTriggerEvent
// (Native, Public)
// Parameters:
// struct FKey                             Key                                                    (Parm, HasGetValueTypeHash)

void UInputPreProcEvent::OnAnyKeyTriggerEvent(const struct FKey& Key)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("InputPreProcEvent", "OnAnyKeyTriggerEvent");

	Params::InputPreProcEvent_OnAnyKeyTriggerEvent Parms{};

	Parms.Key = std::move(Key);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function b1-Managed.InputPreProcEvent.OnMouseButtonUpEvent
// (Native, Public)
// Parameters:
// struct FPointerEvent                    InMouseEvent                                           (Parm)

void UInputPreProcEvent::OnMouseButtonUpEvent(const struct FPointerEvent& InMouseEvent)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("InputPreProcEvent", "OnMouseButtonUpEvent");

	Params::InputPreProcEvent_OnMouseButtonUpEvent Parms{};

	Parms.InMouseEvent = std::move(InMouseEvent);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function b1-Managed.InputPreProcEvent.OnAnalogInputEvent
// (Native, Public)
// Parameters:
// struct FAnalogInputEvent                InAnalogInputEvent                                     (Parm)

void UInputPreProcEvent::OnAnalogInputEvent(const struct FAnalogInputEvent& InAnalogInputEvent)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("InputPreProcEvent", "OnAnalogInputEvent");

	Params::InputPreProcEvent_OnAnalogInputEvent Parms{};

	Parms.InAnalogInputEvent = std::move(InAnalogInputEvent);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function b1-Managed.InputPreProcEvent.OnMouseWheelEvent
// (Native, Public)
// Parameters:
// struct FPointerEvent                    InMouseEvent                                           (Parm)

void UInputPreProcEvent::OnMouseWheelEvent(const struct FPointerEvent& InMouseEvent)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("InputPreProcEvent", "OnMouseWheelEvent");

	Params::InputPreProcEvent_OnMouseWheelEvent Parms{};

	Parms.InMouseEvent = std::move(InMouseEvent);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function b1-Managed.InputPreProcEvent.OnMouseMoveEvent
// (Native, Public)
// Parameters:
// struct FPointerEvent                    InMouseEvent                                           (Parm)

void UInputPreProcEvent::OnMouseMoveEvent(const struct FPointerEvent& InMouseEvent)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("InputPreProcEvent", "OnMouseMoveEvent");

	Params::InputPreProcEvent_OnMouseMoveEvent Parms{};

	Parms.InMouseEvent = std::move(InMouseEvent);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function b1-Managed.InputPreProcEvent.OnKeyDownEvent
// (Native, Public)
// Parameters:
// struct FKeyEvent                        InKeyEvent                                             (Parm)

void UInputPreProcEvent::OnKeyDownEvent(const struct FKeyEvent& InKeyEvent)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("InputPreProcEvent", "OnKeyDownEvent");

	Params::InputPreProcEvent_OnKeyDownEvent Parms{};

	Parms.InKeyEvent = std::move(InKeyEvent);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function b1-Managed.InputPreProcEvent.OnInputTrigger
// (Native, Public)
// Parameters:
// EGSInputType                            InputType                                              (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UInputPreProcEvent::OnInputTrigger(EGSInputType InputType)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("InputPreProcEvent", "OnInputTrigger");

	Params::InputPreProcEvent_OnInputTrigger Parms{};

	Parms.InputType = InputType;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function b1-Managed.InputPreProcEvent.OnKeyUpEvent
// (Native, Public)
// Parameters:
// struct FKeyEvent                        InKeyEvent                                             (Parm)

void UInputPreProcEvent::OnKeyUpEvent(const struct FKeyEvent& InKeyEvent)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("InputPreProcEvent", "OnKeyUpEvent");

	Params::InputPreProcEvent_OnKeyUpEvent Parms{};

	Parms.InKeyEvent = std::move(InKeyEvent);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function b1-Managed.UGSOverlayCS.OnChildAddToGSOverlayCS
// (Native, Event, Public, BlueprintEvent)
// Parameters:
// class UWidget*                          Widget                                                 (ExportObject, Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UUGSOverlayCS::OnChildAddToGSOverlayCS(class UWidget* Widget)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("UGSOverlayCS", "OnChildAddToGSOverlayCS");

	Params::UGSOverlayCS_OnChildAddToGSOverlayCS Parms{};

	Parms.Widget = Widget;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function b1-Managed.BGP_PlayerCameraManagerCS.OnViewTargetChangedCS
// (Native, Event, Public, BlueprintEvent)
// Parameters:
// class APlayerController*                PC                                                     (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// class AActor*                           OldViewTarget                                          (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// class AActor*                           NewViewTarget                                          (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ABGP_PlayerCameraManagerCS::OnViewTargetChangedCS(class APlayerController* PC, class AActor* OldViewTarget, class AActor* NewViewTarget)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BGP_PlayerCameraManagerCS", "OnViewTargetChangedCS");

	Params::BGP_PlayerCameraManagerCS_OnViewTargetChangedCS Parms{};

	Parms.PC = PC;
	Parms.OldViewTarget = OldViewTarget;
	Parms.NewViewTarget = NewViewTarget;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function b1-Managed.BGP_PlayerCameraManagerCS.OnBlendCompleteCS
// (Native, Event, Public, BlueprintEvent)

void ABGP_PlayerCameraManagerCS::OnBlendCompleteCS()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BGP_PlayerCameraManagerCS", "OnBlendCompleteCS");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function b1-Managed.BGP_PlayerCameraManagerCS.SetViewTargetCS
// (Native, Event, Public, BlueprintEvent)
// Parameters:
// class AActor*                           NewViewTarget                                          (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// struct FViewTargetTransitionParams      TransitionParams                                       (Parm, NoDestructor)

void ABGP_PlayerCameraManagerCS::SetViewTargetCS(class AActor* NewViewTarget, const struct FViewTargetTransitionParams& TransitionParams)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BGP_PlayerCameraManagerCS", "SetViewTargetCS");

	Params::BGP_PlayerCameraManagerCS_SetViewTargetCS Parms{};

	Parms.NewViewTarget = NewViewTarget;
	Parms.TransitionParams = std::move(TransitionParams);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function b1-Managed.BGP_PlayerCameraManagerCS.UpdateCameraCS
// (Native, Event, Public, BlueprintEvent)
// Parameters:
// float                                   DeltaTime                                              (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ABGP_PlayerCameraManagerCS::UpdateCameraCS(float DeltaTime)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BGP_PlayerCameraManagerCS", "UpdateCameraCS");

	Params::BGP_PlayerCameraManagerCS_UpdateCameraCS Parms{};

	Parms.DeltaTime = DeltaTime;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function b1-Managed.BGP_PlayerCameraManagerCS.ReceiveEndPlay
// (Native, Event, Public, Protected, BlueprintEvent)
// Parameters:
// EEndPlayReason                          EndPlayReason                                          (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ABGP_PlayerCameraManagerCS::ReceiveEndPlay(EEndPlayReason EndPlayReason)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BGP_PlayerCameraManagerCS", "ReceiveEndPlay");

	Params::BGP_PlayerCameraManagerCS_ReceiveEndPlay Parms{};

	Parms.EndPlayReason = EndPlayReason;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function b1-Managed.BANS_GSSetCurveValueToMesh.GSNotifyBeginCS
// (Native, Event, Public, Protected, BlueprintEvent, Const)
// Parameters:
// struct FUStGSNotifyParam                NotifyParam                                            (Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
// float                                   TotalDuration                                          (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UBANS_GSSetCurveValueToMesh::GSNotifyBeginCS(const struct FUStGSNotifyParam& NotifyParam, float TotalDuration) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BANS_GSSetCurveValueToMesh", "GSNotifyBeginCS");

	Params::BANS_GSSetCurveValueToMesh_GSNotifyBeginCS Parms{};

	Parms.NotifyParam = std::move(NotifyParam);
	Parms.TotalDuration = TotalDuration;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function b1-Managed.BANS_GSSetCurveValueToMesh.GSNotifyEndCS
// (Native, Event, Public, Protected, BlueprintEvent, Const)
// Parameters:
// struct FUStGSNotifyParam                NotifyParam                                            (Parm, ZeroConstructor, IsPlainOldData, NoDestructor)

void UBANS_GSSetCurveValueToMesh::GSNotifyEndCS(const struct FUStGSNotifyParam& NotifyParam) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BANS_GSSetCurveValueToMesh", "GSNotifyEndCS");

	Params::BANS_GSSetCurveValueToMesh_GSNotifyEndCS Parms{};

	Parms.NotifyParam = std::move(NotifyParam);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function b1-Managed.BANS_GSSetCurveValueToMesh.GetAnimNSType
// (Native, Event, Public, HasOutParams, BlueprintEvent, Const)
// Parameters:
// EGsEnAnimNS                             ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

EGsEnAnimNS UBANS_GSSetCurveValueToMesh::GetAnimNSType() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BANS_GSSetCurveValueToMesh", "GetAnimNSType");

	Params::BANS_GSSetCurveValueToMesh_GetAnimNSType Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function b1-Managed.BANS_GSSetCurveValueToMesh.FilterByRule
// (Native, Public, HasOutParams, BlueprintCallable, Const)
// Parameters:
// TArray<class FString>                   LogArr                                                 (Parm, OutParm)
// class USkeletalMesh*                    SKMesh                                                 (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// TArray<class FName>                     WhiteParamNameList                                     (Parm)
// uint8                                   TotallyBelongToDBC                                     (Parm, OutParm, NoDestructor, HasGetValueTypeHash)
// uint8                                   ReturnValue                                            (Parm, OutParm, ReturnParm, NoDestructor, HasGetValueTypeHash)

uint8 UBANS_GSSetCurveValueToMesh::FilterByRule(TArray<class FString>* LogArr, class USkeletalMesh* SKMesh, const TArray<class FName>& WhiteParamNameList, uint8* TotallyBelongToDBC) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BANS_GSSetCurveValueToMesh", "FilterByRule");

	Params::BANS_GSSetCurveValueToMesh_FilterByRule Parms{};

	Parms.SKMesh = SKMesh;
	Parms.WhiteParamNameList = std::move(WhiteParamNameList);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	if (LogArr != nullptr)
		*LogArr = std::move(Parms.LogArr);

	if (TotallyBelongToDBC != nullptr)
		*TotallyBelongToDBC = Parms.TotallyBelongToDBC;

	return Parms.ReturnValue;
}


// Function b1-Managed.BGW_OnlinePresence.OnSetPresenceCompleteCS
// (Native, Event, Public, Protected, BlueprintEvent)
// Parameters:
// uint8                                   bWasSuccessful                                         (Parm, NoDestructor, HasGetValueTypeHash)

void UBGW_OnlinePresence::OnSetPresenceCompleteCS(uint8 bWasSuccessful)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BGW_OnlinePresence", "OnSetPresenceCompleteCS");

	Params::BGW_OnlinePresence_OnSetPresenceCompleteCS Parms{};

	Parms.bWasSuccessful = bWasSuccessful;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function b1-Managed.BED_BehaviorNode_CastSkillByScore.GetNodeDescriptionInCS
// (Native, Event, Public, HasOutParams, BlueprintEvent, Const)
// Parameters:
// class FString                           ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash)

class FString UBED_BehaviorNode_CastSkillByScore::GetNodeDescriptionInCS() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BED_BehaviorNode_CastSkillByScore", "GetNodeDescriptionInCS");

	Params::BED_BehaviorNode_CastSkillByScore_GetNodeDescriptionInCS Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function b1-Managed.BED_ProcessMachineNode_TemplateBase.GetContextOutputsInCS
// (Native, Event, Public, HasOutParams, BlueprintEvent)
// Parameters:
// TArray<class FName>                     ReturnValue                                            (Parm, OutParm, ReturnParm)

TArray<class FName> UBED_ProcessMachineNode_TemplateBase::GetContextOutputsInCS()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BED_ProcessMachineNode_TemplateBase", "GetContextOutputsInCS");

	Params::BED_ProcessMachineNode_TemplateBase_GetContextOutputsInCS Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function b1-Managed.BED_ProcessMachineNode_ResetGroup.GetContextOutputsInCS
// (Native, Event, Public, HasOutParams, BlueprintEvent)
// Parameters:
// TArray<class FName>                     ReturnValue                                            (Parm, OutParm, ReturnParm)

TArray<class FName> UBED_ProcessMachineNode_ResetGroup::GetContextOutputsInCS()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BED_ProcessMachineNode_ResetGroup", "GetContextOutputsInCS");

	Params::BED_ProcessMachineNode_ResetGroup_GetContextOutputsInCS Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function b1-Managed.BED_ProcessMachineNode_ResetGroup.GetNodeDescriptionInCS
// (Native, Event, Public, HasOutParams, BlueprintEvent, Const)
// Parameters:
// class FString                           ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash)

class FString UBED_ProcessMachineNode_ResetGroup::GetNodeDescriptionInCS() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BED_ProcessMachineNode_ResetGroup", "GetNodeDescriptionInCS");

	Params::BED_ProcessMachineNode_ResetGroup_GetNodeDescriptionInCS Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function b1-Managed.BED_ProcessMachineNode_ResetGroup.OnRefreshAssetInCS
// (Native, Event, Public, BlueprintEvent, Const)

void UBED_ProcessMachineNode_ResetGroup::OnRefreshAssetInCS() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BED_ProcessMachineNode_ResetGroup", "OnRefreshAssetInCS");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function b1-Managed.BED_BehaviorNode_Log.IsSupportViewType
// (Native, Event, Public, HasOutParams, BlueprintEvent, Const)
// Parameters:
// ECalliopeViewType                       InViewType                                             (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// uint8                                   ReturnValue                                            (Parm, OutParm, ReturnParm, NoDestructor, HasGetValueTypeHash)

uint8 UBED_BehaviorNode_Log::IsSupportViewType(const ECalliopeViewType& InViewType) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BED_BehaviorNode_Log", "IsSupportViewType");

	Params::BED_BehaviorNode_Log_IsSupportViewType Parms{};

	Parms.InViewType = InViewType;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function b1-Managed.BED_BehaviorNode_WeightRandom.GetContextOutputsInCS
// (Native, Event, Public, HasOutParams, BlueprintEvent)
// Parameters:
// TArray<class FName>                     ReturnValue                                            (Parm, OutParm, ReturnParm)

TArray<class FName> UBED_BehaviorNode_WeightRandom::GetContextOutputsInCS()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BED_BehaviorNode_WeightRandom", "GetContextOutputsInCS");

	Params::BED_BehaviorNode_WeightRandom_GetContextOutputsInCS Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function b1-Managed.BED_BehaviorNode_WeightRandom.OnRefreshAssetInCS
// (Native, Event, Public, BlueprintEvent, Const)

void UBED_BehaviorNode_WeightRandom::OnRefreshAssetInCS() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BED_BehaviorNode_WeightRandom", "OnRefreshAssetInCS");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function b1-Managed.BED_BehaviorNode_WeightRandom.IsSupportViewType
// (Native, Event, Public, HasOutParams, BlueprintEvent, Const)
// Parameters:
// ECalliopeViewType                       InViewType                                             (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// uint8                                   ReturnValue                                            (Parm, OutParm, ReturnParm, NoDestructor, HasGetValueTypeHash)

uint8 UBED_BehaviorNode_WeightRandom::IsSupportViewType(const ECalliopeViewType& InViewType) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BED_BehaviorNode_WeightRandom", "IsSupportViewType");

	Params::BED_BehaviorNode_WeightRandom_IsSupportViewType Parms{};

	Parms.InViewType = InViewType;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function b1-Managed.BGUCineCameraActor.ReceiveBeginPlay
// (Native, Event, Public, Protected, BlueprintEvent)

void ABGUCineCameraActor::ReceiveBeginPlay()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BGUCineCameraActor", "ReceiveBeginPlay");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function b1-Managed.BGUCineCameraActor.ReceiveEndPlay
// (Native, Event, Public, Protected, BlueprintEvent)
// Parameters:
// EEndPlayReason                          EndPlayReason                                          (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ABGUCineCameraActor::ReceiveEndPlay(EEndPlayReason EndPlayReason)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BGUCineCameraActor", "ReceiveEndPlay");

	Params::BGUCineCameraActor_ReceiveEndPlay Parms{};

	Parms.EndPlayReason = EndPlayReason;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function b1-Managed.BED_DialogueAsset.GetExtraDefaultOutputNodesInBranchGraph
// (Native, Event, Public, HasOutParams, BlueprintEvent, Const)
// Parameters:
// TArray<class UClass*>                   OutClasses                                             (Parm, OutParm)
// int32                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

int32 UBED_DialogueAsset::GetExtraDefaultOutputNodesInBranchGraph(TArray<class UClass*>* OutClasses) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BED_DialogueAsset", "GetExtraDefaultOutputNodesInBranchGraph");

	Params::BED_DialogueAsset_GetExtraDefaultOutputNodesInBranchGraph Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	if (OutClasses != nullptr)
		*OutClasses = std::move(Parms.OutClasses);

	return Parms.ReturnValue;
}


// Function b1-Managed.BED_DialogueAsset.GetExtraDefaultInputNodesInBranchGraph
// (Native, Event, Public, HasOutParams, BlueprintEvent, Const)
// Parameters:
// TArray<class UClass*>                   OutClasses                                             (Parm, OutParm)
// int32                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

int32 UBED_DialogueAsset::GetExtraDefaultInputNodesInBranchGraph(TArray<class UClass*>* OutClasses) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BED_DialogueAsset", "GetExtraDefaultInputNodesInBranchGraph");

	Params::BED_DialogueAsset_GetExtraDefaultInputNodesInBranchGraph Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	if (OutClasses != nullptr)
		*OutClasses = std::move(Parms.OutClasses);

	return Parms.ReturnValue;
}


// Function b1-Managed.BED_DialogueAsset.GetRerouteNodeClassInBranchGraph
// (Native, Event, Public, HasOutParams, BlueprintEvent, Const)
// Parameters:
// class UClass*                           ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

class UClass* UBED_DialogueAsset::GetRerouteNodeClassInBranchGraph() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BED_DialogueAsset", "GetRerouteNodeClassInBranchGraph");

	Params::BED_DialogueAsset_GetRerouteNodeClassInBranchGraph Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function b1-Managed.BED_DialogueAsset.GetStartNodeClassInBranchGraph
// (Native, Event, Public, HasOutParams, BlueprintEvent, Const)
// Parameters:
// class UClass*                           ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

class UClass* UBED_DialogueAsset::GetStartNodeClassInBranchGraph() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BED_DialogueAsset", "GetStartNodeClassInBranchGraph");

	Params::BED_DialogueAsset_GetStartNodeClassInBranchGraph Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function b1-Managed.BED_DialogueAsset.GetExtraDefaultOutputNodes
// (Native, Event, Public, HasOutParams, BlueprintEvent, Const)
// Parameters:
// TArray<class UClass*>                   OutClasses                                             (Parm, OutParm)
// int32                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

int32 UBED_DialogueAsset::GetExtraDefaultOutputNodes(TArray<class UClass*>* OutClasses) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BED_DialogueAsset", "GetExtraDefaultOutputNodes");

	Params::BED_DialogueAsset_GetExtraDefaultOutputNodes Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	if (OutClasses != nullptr)
		*OutClasses = std::move(Parms.OutClasses);

	return Parms.ReturnValue;
}


// Function b1-Managed.BED_DialogueAsset.GetExtraDefaultInputNodes
// (Native, Event, Public, HasOutParams, BlueprintEvent, Const)
// Parameters:
// TArray<class UClass*>                   OutClasses                                             (Parm, OutParm)
// int32                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

int32 UBED_DialogueAsset::GetExtraDefaultInputNodes(TArray<class UClass*>* OutClasses) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BED_DialogueAsset", "GetExtraDefaultInputNodes");

	Params::BED_DialogueAsset_GetExtraDefaultInputNodes Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	if (OutClasses != nullptr)
		*OutClasses = std::move(Parms.OutClasses);

	return Parms.ReturnValue;
}


// Function b1-Managed.BED_DialogueAsset.GetRerouteNodeClass
// (Native, Event, Public, HasOutParams, BlueprintEvent, Const)
// Parameters:
// class UClass*                           ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

class UClass* UBED_DialogueAsset::GetRerouteNodeClass() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BED_DialogueAsset", "GetRerouteNodeClass");

	Params::BED_DialogueAsset_GetRerouteNodeClass Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function b1-Managed.BED_DialogueAsset.GetStartNodeClass
// (Native, Event, Public, HasOutParams, BlueprintEvent, Const)
// Parameters:
// class UClass*                           ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

class UClass* UBED_DialogueAsset::GetStartNodeClass() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BED_DialogueAsset", "GetStartNodeClass");

	Params::BED_DialogueAsset_GetStartNodeClass Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function b1-Managed.BED_DialogueAsset.GetViewType
// (Native, Event, Public, HasOutParams, BlueprintEvent, Const)
// Parameters:
// ECalliopeViewType                       ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

ECalliopeViewType UBED_DialogueAsset::GetViewType() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BED_DialogueAsset", "GetViewType");

	Params::BED_DialogueAsset_GetViewType Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function b1-Managed.BED_FSMNode_GI_Global_SubG_GI_Loading_TravelLevel.OnCreateGraphNodeInCS
// (Native, Event, Public, BlueprintEvent)

void UBED_FSMNode_GI_Global_SubG_GI_Loading_TravelLevel::OnCreateGraphNodeInCS()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BED_FSMNode_GI_Global_SubG_GI_Loading_TravelLevel", "OnCreateGraphNodeInCS");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function b1-Managed.BED_FSMNode_GI_Global_SubG_GI_Loading_TravelLevel.PostPropertyChanged
// (Native, Event, Public, BlueprintEvent)
// Parameters:
// class FString                           MemberName                                             (Parm, ZeroConstructor, HasGetValueTypeHash)
// class FString                           PropertyName                                           (Parm, ZeroConstructor, HasGetValueTypeHash)

void UBED_FSMNode_GI_Global_SubG_GI_Loading_TravelLevel::PostPropertyChanged(const class FString& MemberName, const class FString& PropertyName)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BED_FSMNode_GI_Global_SubG_GI_Loading_TravelLevel", "PostPropertyChanged");

	Params::BED_FSMNode_GI_Global_SubG_GI_Loading_TravelLevel_PostPropertyChanged Parms{};

	Parms.MemberName = std::move(MemberName);
	Parms.PropertyName = std::move(PropertyName);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function b1-Managed.BED_FSMNode_GI_Global_SubG_GI_Loading_TravelLevel.GetNodeDescriptionInCS
// (Native, Event, Public, HasOutParams, BlueprintEvent, Const)
// Parameters:
// class FString                           ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash)

class FString UBED_FSMNode_GI_Global_SubG_GI_Loading_TravelLevel::GetNodeDescriptionInCS() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BED_FSMNode_GI_Global_SubG_GI_Loading_TravelLevel", "GetNodeDescriptionInCS");

	Params::BED_FSMNode_GI_Global_SubG_GI_Loading_TravelLevel_GetNodeDescriptionInCS Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function b1-Managed.BED_ProcessStateNode_LogicalAnd.CanUserAddInputInCS
// (Native, Event, Public, HasOutParams, BlueprintEvent, Const)
// Parameters:
// uint8                                   ReturnValue                                            (Parm, OutParm, ReturnParm, NoDestructor, HasGetValueTypeHash)

uint8 UBED_ProcessStateNode_LogicalAnd::CanUserAddInputInCS() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BED_ProcessStateNode_LogicalAnd", "CanUserAddInputInCS");

	Params::BED_ProcessStateNode_LogicalAnd_CanUserAddInputInCS Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function b1-Managed.BED_FSMNode_Condition_GI_Loading_BattleLevelTravelNeedWaitCameraBlend.GetNodeDescriptionInCS
// (Native, Event, Public, HasOutParams, BlueprintEvent, Const)
// Parameters:
// class FString                           ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash)

class FString UBED_FSMNode_Condition_GI_Loading_BattleLevelTravelNeedWaitCameraBlend::GetNodeDescriptionInCS() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BED_FSMNode_Condition_GI_Loading_BattleLevelTravelNeedWaitCameraBlend", "GetNodeDescriptionInCS");

	Params::BED_FSMNode_Condition_GI_Loading_BattleLevelTravelNeedWaitCameraBlend_GetNodeDescriptionInCS Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function b1-Managed.BED_FSMNode_Condition_GI_Loading_CheckGlobalTravelMode.GetNodeDescriptionInCS
// (Native, Event, Public, HasOutParams, BlueprintEvent, Const)
// Parameters:
// class FString                           ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash)

class FString UBED_FSMNode_Condition_GI_Loading_CheckGlobalTravelMode::GetNodeDescriptionInCS() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BED_FSMNode_Condition_GI_Loading_CheckGlobalTravelMode", "GetNodeDescriptionInCS");

	Params::BED_FSMNode_Condition_GI_Loading_CheckGlobalTravelMode_GetNodeDescriptionInCS Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function b1-Managed.BED_FSMNode_Condition_GI_Loading_CheckGMFlagsSupportUnknownTravel.GetNodeDescriptionInCS
// (Native, Event, Public, HasOutParams, BlueprintEvent, Const)
// Parameters:
// class FString                           ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash)

class FString UBED_FSMNode_Condition_GI_Loading_CheckGMFlagsSupportUnknownTravel::GetNodeDescriptionInCS() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BED_FSMNode_Condition_GI_Loading_CheckGMFlagsSupportUnknownTravel", "GetNodeDescriptionInCS");

	Params::BED_FSMNode_Condition_GI_Loading_CheckGMFlagsSupportUnknownTravel_GetNodeDescriptionInCS Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function b1-Managed.BED_FSMNode_Condition_GI_Loading_DetermineTravelLevelByHandlingArchive.GetNodeDescriptionInCS
// (Native, Event, Public, HasOutParams, BlueprintEvent, Const)
// Parameters:
// class FString                           ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash)

class FString UBED_FSMNode_Condition_GI_Loading_DetermineTravelLevelByHandlingArchive::GetNodeDescriptionInCS() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BED_FSMNode_Condition_GI_Loading_DetermineTravelLevelByHandlingArchive", "GetNodeDescriptionInCS");

	Params::BED_FSMNode_Condition_GI_Loading_DetermineTravelLevelByHandlingArchive_GetNodeDescriptionInCS Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function b1-Managed.BED_FSMNode_Condition_GI_Loading_HasArchive.GetNodeDescriptionInCS
// (Native, Event, Public, HasOutParams, BlueprintEvent, Const)
// Parameters:
// class FString                           ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash)

class FString UBED_FSMNode_Condition_GI_Loading_HasArchive::GetNodeDescriptionInCS() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BED_FSMNode_Condition_GI_Loading_HasArchive", "GetNodeDescriptionInCS");

	Params::BED_FSMNode_Condition_GI_Loading_HasArchive_GetNodeDescriptionInCS Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function b1-Managed.BED_FSMNode_Condition_GI_Loading_HasArchiveIdInContext.GetNodeDescriptionInCS
// (Native, Event, Public, HasOutParams, BlueprintEvent, Const)
// Parameters:
// class FString                           ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash)

class FString UBED_FSMNode_Condition_GI_Loading_HasArchiveIdInContext::GetNodeDescriptionInCS() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BED_FSMNode_Condition_GI_Loading_HasArchiveIdInContext", "GetNodeDescriptionInCS");

	Params::BED_FSMNode_Condition_GI_Loading_HasArchiveIdInContext_GetNodeDescriptionInCS Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function b1-Managed.TriggerCompFunctionBinder.OnCollisionEndOverlap
// (Native, Public, Private)
// Parameters:
// class UPrimitiveComponent*              OverlappedComponent                                    (ExportObject, Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// class AActor*                           OtherActor                                             (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// class UPrimitiveComponent*              OtherComp                                              (ExportObject, Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// int32                                   OtherBodyIndex                                         (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UTriggerCompFunctionBinder::OnCollisionEndOverlap(class UPrimitiveComponent* OverlappedComponent, class AActor* OtherActor, class UPrimitiveComponent* OtherComp, int32 OtherBodyIndex)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("TriggerCompFunctionBinder", "OnCollisionEndOverlap");

	Params::TriggerCompFunctionBinder_OnCollisionEndOverlap Parms{};

	Parms.OverlappedComponent = OverlappedComponent;
	Parms.OtherActor = OtherActor;
	Parms.OtherComp = OtherComp;
	Parms.OtherBodyIndex = OtherBodyIndex;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function b1-Managed.TriggerCompFunctionBinder.OnCollisionOverlap
// (Native, Public, Private)
// Parameters:
// class UPrimitiveComponent*              OverlappedComponent                                    (ExportObject, Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// class AActor*                           OtherActor                                             (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// class UPrimitiveComponent*              OtherComp                                              (ExportObject, Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// int32                                   OtherBodyIndex                                         (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// uint8                                   bFromSweep                                             (Parm, NoDestructor, HasGetValueTypeHash)
// struct FHitResult                       SweepResult                                            (Parm, IsPlainOldData, NoDestructor)

void UTriggerCompFunctionBinder::OnCollisionOverlap(class UPrimitiveComponent* OverlappedComponent, class AActor* OtherActor, class UPrimitiveComponent* OtherComp, int32 OtherBodyIndex, uint8 bFromSweep, const struct FHitResult& SweepResult)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("TriggerCompFunctionBinder", "OnCollisionOverlap");

	Params::TriggerCompFunctionBinder_OnCollisionOverlap Parms{};

	Parms.OverlappedComponent = OverlappedComponent;
	Parms.OtherActor = OtherActor;
	Parms.OtherComp = OtherComp;
	Parms.OtherBodyIndex = OtherBodyIndex;
	Parms.bFromSweep = bFromSweep;
	Parms.SweepResult = std::move(SweepResult);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function b1-Managed.BED_FSMNode_Condition_GI_Loading_IsEnableLoadingUserInput.GetNodeDescriptionInCS
// (Native, Event, Public, HasOutParams, BlueprintEvent, Const)
// Parameters:
// class FString                           ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash)

class FString UBED_FSMNode_Condition_GI_Loading_IsEnableLoadingUserInput::GetNodeDescriptionInCS() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BED_FSMNode_Condition_GI_Loading_IsEnableLoadingUserInput", "GetNodeDescriptionInCS");

	Params::BED_FSMNode_Condition_GI_Loading_IsEnableLoadingUserInput_GetNodeDescriptionInCS Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function b1-Managed.BED_FSMNode_Condition_GI_Loading_IsFirstStartGame.GetNodeDescriptionInCS
// (Native, Event, Public, HasOutParams, BlueprintEvent, Const)
// Parameters:
// class FString                           ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash)

class FString UBED_FSMNode_Condition_GI_Loading_IsFirstStartGame::GetNodeDescriptionInCS() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BED_FSMNode_Condition_GI_Loading_IsFirstStartGame", "GetNodeDescriptionInCS");

	Params::BED_FSMNode_Condition_GI_Loading_IsFirstStartGame_GetNodeDescriptionInCS Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function b1-Managed.BED_FSMNode_Condition_GI_Loading_IsInBattleLevel.GetNodeDescriptionInCS
// (Native, Event, Public, HasOutParams, BlueprintEvent, Const)
// Parameters:
// class FString                           ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash)

class FString UBED_FSMNode_Condition_GI_Loading_IsInBattleLevel::GetNodeDescriptionInCS() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BED_FSMNode_Condition_GI_Loading_IsInBattleLevel", "GetNodeDescriptionInCS");

	Params::BED_FSMNode_Condition_GI_Loading_IsInBattleLevel_GetNodeDescriptionInCS Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function b1-Managed.BED_FSMNode_Condition_GI_Loading_IsInDedicateServer.GetNodeDescriptionInCS
// (Native, Event, Public, HasOutParams, BlueprintEvent, Const)
// Parameters:
// class FString                           ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash)

class FString UBED_FSMNode_Condition_GI_Loading_IsInDedicateServer::GetNodeDescriptionInCS() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BED_FSMNode_Condition_GI_Loading_IsInDedicateServer", "GetNodeDescriptionInCS");

	Params::BED_FSMNode_Condition_GI_Loading_IsInDedicateServer_GetNodeDescriptionInCS Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function b1-Managed.PCSEW_Base.MainThread
// (Native, Public)

void UPCSEW_Base::MainThread()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("PCSEW_Base", "MainThread");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function b1-Managed.BED_FSMNode_Condition_GI_Loading_IsInDefaultBattleLevel.GetNodeDescriptionInCS
// (Native, Event, Public, HasOutParams, BlueprintEvent, Const)
// Parameters:
// class FString                           ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash)

class FString UBED_FSMNode_Condition_GI_Loading_IsInDefaultBattleLevel::GetNodeDescriptionInCS() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BED_FSMNode_Condition_GI_Loading_IsInDefaultBattleLevel", "GetNodeDescriptionInCS");

	Params::BED_FSMNode_Condition_GI_Loading_IsInDefaultBattleLevel_GetNodeDescriptionInCS Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function b1-Managed.BED_FSMNode_Condition_GI_Loading_IsInListenServer.GetNodeDescriptionInCS
// (Native, Event, Public, HasOutParams, BlueprintEvent, Const)
// Parameters:
// class FString                           ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash)

class FString UBED_FSMNode_Condition_GI_Loading_IsInListenServer::GetNodeDescriptionInCS() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BED_FSMNode_Condition_GI_Loading_IsInListenServer", "GetNodeDescriptionInCS");

	Params::BED_FSMNode_Condition_GI_Loading_IsInListenServer_GetNodeDescriptionInCS Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function b1-Managed.BED_QuestNode_SetPlayerRebirthPoint.GetNodeDescriptionInCS
// (Native, Event, Public, HasOutParams, BlueprintEvent, Const)
// Parameters:
// class FString                           ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash)

class FString UBED_QuestNode_SetPlayerRebirthPoint::GetNodeDescriptionInCS() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BED_QuestNode_SetPlayerRebirthPoint", "GetNodeDescriptionInCS");

	Params::BED_QuestNode_SetPlayerRebirthPoint_GetNodeDescriptionInCS Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function b1-Managed.BED_FSMNode_Condition_GI_Loading_IsInNetClient.GetNodeDescriptionInCS
// (Native, Event, Public, HasOutParams, BlueprintEvent, Const)
// Parameters:
// class FString                           ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash)

class FString UBED_FSMNode_Condition_GI_Loading_IsInNetClient::GetNodeDescriptionInCS() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BED_FSMNode_Condition_GI_Loading_IsInNetClient", "GetNodeDescriptionInCS");

	Params::BED_FSMNode_Condition_GI_Loading_IsInNetClient_GetNodeDescriptionInCS Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function b1-Managed.BED_FSMNode_Condition_GI_Loading_IsInPIEClient.GetNodeDescriptionInCS
// (Native, Event, Public, HasOutParams, BlueprintEvent, Const)
// Parameters:
// class FString                           ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash)

class FString UBED_FSMNode_Condition_GI_Loading_IsInPIEClient::GetNodeDescriptionInCS() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BED_FSMNode_Condition_GI_Loading_IsInPIEClient", "GetNodeDescriptionInCS");

	Params::BED_FSMNode_Condition_GI_Loading_IsInPIEClient_GetNodeDescriptionInCS Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function b1-Managed.BED_FSMNode_Condition_GI_Loading_IsInPreviewSeqContext.GetNodeDescriptionInCS
// (Native, Event, Public, HasOutParams, BlueprintEvent, Const)
// Parameters:
// class FString                           ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash)

class FString UBED_FSMNode_Condition_GI_Loading_IsInPreviewSeqContext::GetNodeDescriptionInCS() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BED_FSMNode_Condition_GI_Loading_IsInPreviewSeqContext", "GetNodeDescriptionInCS");

	Params::BED_FSMNode_Condition_GI_Loading_IsInPreviewSeqContext_GetNodeDescriptionInCS Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function b1-Managed.BED_FSMNode_Condition_GI_Loading_IsInStartUpLevel.GetNodeDescriptionInCS
// (Native, Event, Public, HasOutParams, BlueprintEvent, Const)
// Parameters:
// class FString                           ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash)

class FString UBED_FSMNode_Condition_GI_Loading_IsInStartUpLevel::GetNodeDescriptionInCS() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BED_FSMNode_Condition_GI_Loading_IsInStartUpLevel", "GetNodeDescriptionInCS");

	Params::BED_FSMNode_Condition_GI_Loading_IsInStartUpLevel_GetNodeDescriptionInCS Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function b1-Managed.BED_FSMNode_Condition_GI_Loading_IsInToilet.GetNodeDescriptionInCS
// (Native, Event, Public, HasOutParams, BlueprintEvent, Const)
// Parameters:
// class FString                           ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash)

class FString UBED_FSMNode_Condition_GI_Loading_IsInToilet::GetNodeDescriptionInCS() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BED_FSMNode_Condition_GI_Loading_IsInToilet", "GetNodeDescriptionInCS");

	Params::BED_FSMNode_Condition_GI_Loading_IsInToilet_GetNodeDescriptionInCS Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function b1-Managed.BED_FSMNode_Condition_GI_Loading_IsNeedCloseLoadingScreen.GetNodeDescriptionInCS
// (Native, Event, Public, HasOutParams, BlueprintEvent, Const)
// Parameters:
// class FString                           ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash)

class FString UBED_FSMNode_Condition_GI_Loading_IsNeedCloseLoadingScreen::GetNodeDescriptionInCS() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BED_FSMNode_Condition_GI_Loading_IsNeedCloseLoadingScreen", "GetNodeDescriptionInCS");

	Params::BED_FSMNode_Condition_GI_Loading_IsNeedCloseLoadingScreen_GetNodeDescriptionInCS Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function b1-Managed.BED_FSMNode_Condition_GI_Loading_IsNeedOpenLoadingScreen.GetNodeDescriptionInCS
// (Native, Event, Public, HasOutParams, BlueprintEvent, Const)
// Parameters:
// class FString                           ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash)

class FString UBED_FSMNode_Condition_GI_Loading_IsNeedOpenLoadingScreen::GetNodeDescriptionInCS() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BED_FSMNode_Condition_GI_Loading_IsNeedOpenLoadingScreen", "GetNodeDescriptionInCS");

	Params::BED_FSMNode_Condition_GI_Loading_IsNeedOpenLoadingScreen_GetNodeDescriptionInCS Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function b1-Managed.BED_FSMNode_Condition_GI_Loading_IsNeedPostLeaveLevel.GetNodeDescriptionInCS
// (Native, Event, Public, HasOutParams, BlueprintEvent, Const)
// Parameters:
// class FString                           ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash)

class FString UBED_FSMNode_Condition_GI_Loading_IsNeedPostLeaveLevel::GetNodeDescriptionInCS() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BED_FSMNode_Condition_GI_Loading_IsNeedPostLeaveLevel", "GetNodeDescriptionInCS");

	Params::BED_FSMNode_Condition_GI_Loading_IsNeedPostLeaveLevel_GetNodeDescriptionInCS Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function b1-Managed.BED_FSMNode_Condition_GI_Loading_IsNeedPreEnterLevel.GetNodeDescriptionInCS
// (Native, Event, Public, HasOutParams, BlueprintEvent, Const)
// Parameters:
// class FString                           ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash)

class FString UBED_FSMNode_Condition_GI_Loading_IsNeedPreEnterLevel::GetNodeDescriptionInCS() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BED_FSMNode_Condition_GI_Loading_IsNeedPreEnterLevel", "GetNodeDescriptionInCS");

	Params::BED_FSMNode_Condition_GI_Loading_IsNeedPreEnterLevel_GetNodeDescriptionInCS Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function b1-Managed.BED_FSMNode_Condition_GI_Loading_IsNeedPreStartGameProcess.GetNodeDescriptionInCS
// (Native, Event, Public, HasOutParams, BlueprintEvent, Const)
// Parameters:
// class FString                           ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash)

class FString UBED_FSMNode_Condition_GI_Loading_IsNeedPreStartGameProcess::GetNodeDescriptionInCS() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BED_FSMNode_Condition_GI_Loading_IsNeedPreStartGameProcess", "GetNodeDescriptionInCS");

	Params::BED_FSMNode_Condition_GI_Loading_IsNeedPreStartGameProcess_GetNodeDescriptionInCS Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function b1-Managed.BED_FSMNode_Condition_GI_Loading_IsNeedResetGameInstanceData.GetNodeDescriptionInCS
// (Native, Event, Public, HasOutParams, BlueprintEvent, Const)
// Parameters:
// class FString                           ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash)

class FString UBED_FSMNode_Condition_GI_Loading_IsNeedResetGameInstanceData::GetNodeDescriptionInCS() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BED_FSMNode_Condition_GI_Loading_IsNeedResetGameInstanceData", "GetNodeDescriptionInCS");

	Params::BED_FSMNode_Condition_GI_Loading_IsNeedResetGameInstanceData_GetNodeDescriptionInCS Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function b1-Managed.BED_FSMNode_Condition_GI_Loading_IsPlayGoDownloadIncomplete.GetNodeDescriptionInCS
// (Native, Event, Public, HasOutParams, BlueprintEvent, Const)
// Parameters:
// class FString                           ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash)

class FString UBED_FSMNode_Condition_GI_Loading_IsPlayGoDownloadIncomplete::GetNodeDescriptionInCS() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BED_FSMNode_Condition_GI_Loading_IsPlayGoDownloadIncomplete", "GetNodeDescriptionInCS");

	Params::BED_FSMNode_Condition_GI_Loading_IsPlayGoDownloadIncomplete_GetNodeDescriptionInCS Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function b1-Managed.BED_FSMNode_Condition_GI_Loading_IsReplayWorldLoadFinish.GetNodeDescriptionInCS
// (Native, Event, Public, HasOutParams, BlueprintEvent, Const)
// Parameters:
// class FString                           ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash)

class FString UBED_FSMNode_Condition_GI_Loading_IsReplayWorldLoadFinish::GetNodeDescriptionInCS() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BED_FSMNode_Condition_GI_Loading_IsReplayWorldLoadFinish", "GetNodeDescriptionInCS");

	Params::BED_FSMNode_Condition_GI_Loading_IsReplayWorldLoadFinish_GetNodeDescriptionInCS Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function b1-Managed.BED_FSMNode_Condition_GI_Loading_IsStandAlone.GetNodeDescriptionInCS
// (Native, Event, Public, HasOutParams, BlueprintEvent, Const)
// Parameters:
// class FString                           ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash)

class FString UBED_FSMNode_Condition_GI_Loading_IsStandAlone::GetNodeDescriptionInCS() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BED_FSMNode_Condition_GI_Loading_IsStandAlone", "GetNodeDescriptionInCS");

	Params::BED_FSMNode_Condition_GI_Loading_IsStandAlone_GetNodeDescriptionInCS Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function b1-Managed.BED_FSMNode_Condition_GI_Loading_MonsterTeleportArchiveExist.GetNodeDescriptionInCS
// (Native, Event, Public, HasOutParams, BlueprintEvent, Const)
// Parameters:
// class FString                           ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash)

class FString UBED_FSMNode_Condition_GI_Loading_MonsterTeleportArchiveExist::GetNodeDescriptionInCS() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BED_FSMNode_Condition_GI_Loading_MonsterTeleportArchiveExist", "GetNodeDescriptionInCS");

	Params::BED_FSMNode_Condition_GI_Loading_MonsterTeleportArchiveExist_GetNodeDescriptionInCS Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function b1-Managed.BED_FSMNode_Condition_GI_Loading_NeedSwitchPlayerGameMode.GetNodeDescriptionInCS
// (Native, Event, Public, HasOutParams, BlueprintEvent, Const)
// Parameters:
// class FString                           ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash)

class FString UBED_FSMNode_Condition_GI_Loading_NeedSwitchPlayerGameMode::GetNodeDescriptionInCS() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BED_FSMNode_Condition_GI_Loading_NeedSwitchPlayerGameMode", "GetNodeDescriptionInCS");

	Params::BED_FSMNode_Condition_GI_Loading_NeedSwitchPlayerGameMode_GetNodeDescriptionInCS Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function b1-Managed.BED_FSMNode_Condition_GI_Loading_PlayerGameStateCheck.GetNodeDescriptionInCS
// (Native, Event, Public, HasOutParams, BlueprintEvent, Const)
// Parameters:
// class FString                           ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash)

class FString UBED_FSMNode_Condition_GI_Loading_PlayerGameStateCheck::GetNodeDescriptionInCS() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BED_FSMNode_Condition_GI_Loading_PlayerGameStateCheck", "GetNodeDescriptionInCS");

	Params::BED_FSMNode_Condition_GI_Loading_PlayerGameStateCheck_GetNodeDescriptionInCS Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function b1-Managed.BED_FSMNode_Condition_GI_Loading_SwitchFillContextArchiveDataType.GetNodeDescriptionInCS
// (Native, Event, Public, HasOutParams, BlueprintEvent, Const)
// Parameters:
// class FString                           ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash)

class FString UBED_FSMNode_Condition_GI_Loading_SwitchFillContextArchiveDataType::GetNodeDescriptionInCS() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BED_FSMNode_Condition_GI_Loading_SwitchFillContextArchiveDataType", "GetNodeDescriptionInCS");

	Params::BED_FSMNode_Condition_GI_Loading_SwitchFillContextArchiveDataType_GetNodeDescriptionInCS Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function b1-Managed.BED_FSMNode_Condition_GI_Loading_SwitchSaveArchiveDegree.GetNodeDescriptionInCS
// (Native, Event, Public, HasOutParams, BlueprintEvent, Const)
// Parameters:
// class FString                           ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash)

class FString UBED_FSMNode_Condition_GI_Loading_SwitchSaveArchiveDegree::GetNodeDescriptionInCS() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BED_FSMNode_Condition_GI_Loading_SwitchSaveArchiveDegree", "GetNodeDescriptionInCS");

	Params::BED_FSMNode_Condition_GI_Loading_SwitchSaveArchiveDegree_GetNodeDescriptionInCS Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function b1-Managed.BED_FSMNode_Condition_GI_Loading_SwitchTeleportType.GetNodeDescriptionInCS
// (Native, Event, Public, HasOutParams, BlueprintEvent, Const)
// Parameters:
// class FString                           ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash)

class FString UBED_FSMNode_Condition_GI_Loading_SwitchTeleportType::GetNodeDescriptionInCS() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BED_FSMNode_Condition_GI_Loading_SwitchTeleportType", "GetNodeDescriptionInCS");

	Params::BED_FSMNode_Condition_GI_Loading_SwitchTeleportType_GetNodeDescriptionInCS Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function b1-Managed.BUS_ProjectileBaseDataComp.LateECSBeginPlay
// (Native, Event, Public, BlueprintEvent)

void UBUS_ProjectileBaseDataComp::LateECSBeginPlay()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BUS_ProjectileBaseDataComp", "LateECSBeginPlay");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function b1-Managed.BED_FSMNode_Condition_GI_Loading_TeleportNeedLevelTravel.GetNodeDescriptionInCS
// (Native, Event, Public, HasOutParams, BlueprintEvent, Const)
// Parameters:
// class FString                           ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash)

class FString UBED_FSMNode_Condition_GI_Loading_TeleportNeedLevelTravel::GetNodeDescriptionInCS() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BED_FSMNode_Condition_GI_Loading_TeleportNeedLevelTravel", "GetNodeDescriptionInCS");

	Params::BED_FSMNode_Condition_GI_Loading_TeleportNeedLevelTravel_GetNodeDescriptionInCS Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function b1-Managed.BED_FSMNode_Condition_GI_Loading_TravelUrlHasHost.GetNodeDescriptionInCS
// (Native, Event, Public, HasOutParams, BlueprintEvent, Const)
// Parameters:
// class FString                           ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash)

class FString UBED_FSMNode_Condition_GI_Loading_TravelUrlHasHost::GetNodeDescriptionInCS() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BED_FSMNode_Condition_GI_Loading_TravelUrlHasHost", "GetNodeDescriptionInCS");

	Params::BED_FSMNode_Condition_GI_Loading_TravelUrlHasHost_GetNodeDescriptionInCS Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function b1-Managed.BED_FSMNode_Condition_PS_Transaction_TaskCondition.GetNodeDescriptionInCS
// (Native, Event, Public, HasOutParams, BlueprintEvent, Const)
// Parameters:
// class FString                           ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash)

class FString UBED_FSMNode_Condition_PS_Transaction_TaskCondition::GetNodeDescriptionInCS() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BED_FSMNode_Condition_PS_Transaction_TaskCondition", "GetNodeDescriptionInCS");

	Params::BED_FSMNode_Condition_PS_Transaction_TaskCondition_GetNodeDescriptionInCS Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function b1-Managed.BED_FSMNode_GI_Global_AsClientInGame.PostPropertyChanged
// (Native, Event, Public, BlueprintEvent)
// Parameters:
// class FString                           MemberName                                             (Parm, ZeroConstructor, HasGetValueTypeHash)
// class FString                           PropertyName                                           (Parm, ZeroConstructor, HasGetValueTypeHash)

void UBED_FSMNode_GI_Global_AsClientInGame::PostPropertyChanged(const class FString& MemberName, const class FString& PropertyName)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BED_FSMNode_GI_Global_AsClientInGame", "PostPropertyChanged");

	Params::BED_FSMNode_GI_Global_AsClientInGame_PostPropertyChanged Parms{};

	Parms.MemberName = std::move(MemberName);
	Parms.PropertyName = std::move(PropertyName);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function b1-Managed.BED_FSMNode_GI_Global_AsClientInGame.GetNodeDescriptionInCS
// (Native, Event, Public, HasOutParams, BlueprintEvent, Const)
// Parameters:
// class FString                           ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash)

class FString UBED_FSMNode_GI_Global_AsClientInGame::GetNodeDescriptionInCS() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BED_FSMNode_GI_Global_AsClientInGame", "GetNodeDescriptionInCS");

	Params::BED_FSMNode_GI_Global_AsClientInGame_GetNodeDescriptionInCS Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function b1-Managed.BED_FSMNode_GI_Global_AsListenServerInGame.PostPropertyChanged
// (Native, Event, Public, BlueprintEvent)
// Parameters:
// class FString                           MemberName                                             (Parm, ZeroConstructor, HasGetValueTypeHash)
// class FString                           PropertyName                                           (Parm, ZeroConstructor, HasGetValueTypeHash)

void UBED_FSMNode_GI_Global_AsListenServerInGame::PostPropertyChanged(const class FString& MemberName, const class FString& PropertyName)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BED_FSMNode_GI_Global_AsListenServerInGame", "PostPropertyChanged");

	Params::BED_FSMNode_GI_Global_AsListenServerInGame_PostPropertyChanged Parms{};

	Parms.MemberName = std::move(MemberName);
	Parms.PropertyName = std::move(PropertyName);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function b1-Managed.BED_FSMNode_GI_Global_AsListenServerInGame.GetNodeDescriptionInCS
// (Native, Event, Public, HasOutParams, BlueprintEvent, Const)
// Parameters:
// class FString                           ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash)

class FString UBED_FSMNode_GI_Global_AsListenServerInGame::GetNodeDescriptionInCS() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BED_FSMNode_GI_Global_AsListenServerInGame", "GetNodeDescriptionInCS");

	Params::BED_FSMNode_GI_Global_AsListenServerInGame_GetNodeDescriptionInCS Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function b1-Managed.BED_FSMNode_GI_Global_InBattleOnLineDS.PostPropertyChanged
// (Native, Event, Public, BlueprintEvent)
// Parameters:
// class FString                           MemberName                                             (Parm, ZeroConstructor, HasGetValueTypeHash)
// class FString                           PropertyName                                           (Parm, ZeroConstructor, HasGetValueTypeHash)

void UBED_FSMNode_GI_Global_InBattleOnLineDS::PostPropertyChanged(const class FString& MemberName, const class FString& PropertyName)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BED_FSMNode_GI_Global_InBattleOnLineDS", "PostPropertyChanged");

	Params::BED_FSMNode_GI_Global_InBattleOnLineDS_PostPropertyChanged Parms{};

	Parms.MemberName = std::move(MemberName);
	Parms.PropertyName = std::move(PropertyName);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function b1-Managed.BED_FSMNode_GI_Global_InBattleOnLineDS.GetNodeDescriptionInCS
// (Native, Event, Public, HasOutParams, BlueprintEvent, Const)
// Parameters:
// class FString                           ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash)

class FString UBED_FSMNode_GI_Global_InBattleOnLineDS::GetNodeDescriptionInCS() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BED_FSMNode_GI_Global_InBattleOnLineDS", "GetNodeDescriptionInCS");

	Params::BED_FSMNode_GI_Global_InBattleOnLineDS_GetNodeDescriptionInCS Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function b1-Managed.BED_FSMNode_GI_Global_InBattleParty.PostPropertyChanged
// (Native, Event, Public, BlueprintEvent)
// Parameters:
// class FString                           MemberName                                             (Parm, ZeroConstructor, HasGetValueTypeHash)
// class FString                           PropertyName                                           (Parm, ZeroConstructor, HasGetValueTypeHash)

void UBED_FSMNode_GI_Global_InBattleParty::PostPropertyChanged(const class FString& MemberName, const class FString& PropertyName)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BED_FSMNode_GI_Global_InBattleParty", "PostPropertyChanged");

	Params::BED_FSMNode_GI_Global_InBattleParty_PostPropertyChanged Parms{};

	Parms.MemberName = std::move(MemberName);
	Parms.PropertyName = std::move(PropertyName);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function b1-Managed.BED_FSMNode_GI_Global_InBattleParty.GetNodeDescriptionInCS
// (Native, Event, Public, HasOutParams, BlueprintEvent, Const)
// Parameters:
// class FString                           ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash)

class FString UBED_FSMNode_GI_Global_InBattleParty::GetNodeDescriptionInCS() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BED_FSMNode_GI_Global_InBattleParty", "GetNodeDescriptionInCS");

	Params::BED_FSMNode_GI_Global_InBattleParty_GetNodeDescriptionInCS Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function b1-Managed.BED_FSMNode_GI_Global_InBattleWaitingStartNewGame.PostPropertyChanged
// (Native, Event, Public, BlueprintEvent)
// Parameters:
// class FString                           MemberName                                             (Parm, ZeroConstructor, HasGetValueTypeHash)
// class FString                           PropertyName                                           (Parm, ZeroConstructor, HasGetValueTypeHash)

void UBED_FSMNode_GI_Global_InBattleWaitingStartNewGame::PostPropertyChanged(const class FString& MemberName, const class FString& PropertyName)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BED_FSMNode_GI_Global_InBattleWaitingStartNewGame", "PostPropertyChanged");

	Params::BED_FSMNode_GI_Global_InBattleWaitingStartNewGame_PostPropertyChanged Parms{};

	Parms.MemberName = std::move(MemberName);
	Parms.PropertyName = std::move(PropertyName);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function b1-Managed.BED_FSMNode_GI_Global_InBattleWaitingStartNewGame.GetNodeDescriptionInCS
// (Native, Event, Public, HasOutParams, BlueprintEvent, Const)
// Parameters:
// class FString                           ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash)

class FString UBED_FSMNode_GI_Global_InBattleWaitingStartNewGame::GetNodeDescriptionInCS() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BED_FSMNode_GI_Global_InBattleWaitingStartNewGame", "GetNodeDescriptionInCS");

	Params::BED_FSMNode_GI_Global_InBattleWaitingStartNewGame_GetNodeDescriptionInCS Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function b1-Managed.BUS_AudioTriggerComp.BeginPlayInCS
// (Native, Event, Public, BlueprintEvent)

void UBUS_AudioTriggerComp::BeginPlayInCS()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BUS_AudioTriggerComp", "BeginPlayInCS");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function b1-Managed.BED_FSMNode_GI_Global_MainMenu.PostPropertyChanged
// (Native, Event, Public, BlueprintEvent)
// Parameters:
// class FString                           MemberName                                             (Parm, ZeroConstructor, HasGetValueTypeHash)
// class FString                           PropertyName                                           (Parm, ZeroConstructor, HasGetValueTypeHash)

void UBED_FSMNode_GI_Global_MainMenu::PostPropertyChanged(const class FString& MemberName, const class FString& PropertyName)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BED_FSMNode_GI_Global_MainMenu", "PostPropertyChanged");

	Params::BED_FSMNode_GI_Global_MainMenu_PostPropertyChanged Parms{};

	Parms.MemberName = std::move(MemberName);
	Parms.PropertyName = std::move(PropertyName);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function b1-Managed.BED_FSMNode_GI_Global_MainMenu.GetNodeDescriptionInCS
// (Native, Event, Public, HasOutParams, BlueprintEvent, Const)
// Parameters:
// class FString                           ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash)

class FString UBED_FSMNode_GI_Global_MainMenu::GetNodeDescriptionInCS() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BED_FSMNode_GI_Global_MainMenu", "GetNodeDescriptionInCS");

	Params::BED_FSMNode_GI_Global_MainMenu_GetNodeDescriptionInCS Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function b1-Managed.BED_FSMNode_GI_Global_SubG_GI_Global_BenchMark.OnCreateGraphNodeInCS
// (Native, Event, Public, BlueprintEvent)

void UBED_FSMNode_GI_Global_SubG_GI_Global_BenchMark::OnCreateGraphNodeInCS()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BED_FSMNode_GI_Global_SubG_GI_Global_BenchMark", "OnCreateGraphNodeInCS");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function b1-Managed.BED_FSMNode_GI_Global_SubG_GI_Global_BenchMark.GetNodeDescriptionInCS
// (Native, Event, Public, HasOutParams, BlueprintEvent, Const)
// Parameters:
// class FString                           ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash)

class FString UBED_FSMNode_GI_Global_SubG_GI_Global_BenchMark::GetNodeDescriptionInCS() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BED_FSMNode_GI_Global_SubG_GI_Global_BenchMark", "GetNodeDescriptionInCS");

	Params::BED_FSMNode_GI_Global_SubG_GI_Global_BenchMark_GetNodeDescriptionInCS Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function b1-Managed.BED_FSMNode_GI_Global_SubG_GI_Loading_820DemoReSetGameData.OnCreateGraphNodeInCS
// (Native, Event, Public, BlueprintEvent)

void UBED_FSMNode_GI_Global_SubG_GI_Loading_820DemoReSetGameData::OnCreateGraphNodeInCS()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BED_FSMNode_GI_Global_SubG_GI_Loading_820DemoReSetGameData", "OnCreateGraphNodeInCS");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function b1-Managed.BED_FSMNode_GI_Global_SubG_GI_Loading_820DemoReSetGameData.GetNodeDescriptionInCS
// (Native, Event, Public, HasOutParams, BlueprintEvent, Const)
// Parameters:
// class FString                           ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash)

class FString UBED_FSMNode_GI_Global_SubG_GI_Loading_820DemoReSetGameData::GetNodeDescriptionInCS() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BED_FSMNode_GI_Global_SubG_GI_Loading_820DemoReSetGameData", "GetNodeDescriptionInCS");

	Params::BED_FSMNode_GI_Global_SubG_GI_Loading_820DemoReSetGameData_GetNodeDescriptionInCS Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function b1-Managed.BED_FSMNode_GI_Global_SubG_GI_Loading_BackToMainMenu.OnCreateGraphNodeInCS
// (Native, Event, Public, BlueprintEvent)

void UBED_FSMNode_GI_Global_SubG_GI_Loading_BackToMainMenu::OnCreateGraphNodeInCS()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BED_FSMNode_GI_Global_SubG_GI_Loading_BackToMainMenu", "OnCreateGraphNodeInCS");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function b1-Managed.BED_FSMNode_GI_Global_SubG_GI_Loading_BackToMainMenu.GetNodeDescriptionInCS
// (Native, Event, Public, HasOutParams, BlueprintEvent, Const)
// Parameters:
// class FString                           ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash)

class FString UBED_FSMNode_GI_Global_SubG_GI_Loading_BackToMainMenu::GetNodeDescriptionInCS() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BED_FSMNode_GI_Global_SubG_GI_Loading_BackToMainMenu", "GetNodeDescriptionInCS");

	Params::BED_FSMNode_GI_Global_SubG_GI_Loading_BackToMainMenu_GetNodeDescriptionInCS Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function b1-Managed.BED_FSMNode_GI_Global_SubG_GI_Loading_CheckGSSdkServerConfig.OnCreateGraphNodeInCS
// (Native, Event, Public, BlueprintEvent)

void UBED_FSMNode_GI_Global_SubG_GI_Loading_CheckGSSdkServerConfig::OnCreateGraphNodeInCS()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BED_FSMNode_GI_Global_SubG_GI_Loading_CheckGSSdkServerConfig", "OnCreateGraphNodeInCS");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function b1-Managed.BED_FSMNode_GI_Global_SubG_GI_Loading_CheckGSSdkServerConfig.GetNodeDescriptionInCS
// (Native, Event, Public, HasOutParams, BlueprintEvent, Const)
// Parameters:
// class FString                           ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash)

class FString UBED_FSMNode_GI_Global_SubG_GI_Loading_CheckGSSdkServerConfig::GetNodeDescriptionInCS() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BED_FSMNode_GI_Global_SubG_GI_Loading_CheckGSSdkServerConfig", "GetNodeDescriptionInCS");

	Params::BED_FSMNode_GI_Global_SubG_GI_Loading_CheckGSSdkServerConfig_GetNodeDescriptionInCS Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function b1-Managed.BED_FSMNode_GI_Global_SubG_GI_Loading_HandleDisConnect.OnCreateGraphNodeInCS
// (Native, Event, Public, BlueprintEvent)

void UBED_FSMNode_GI_Global_SubG_GI_Loading_HandleDisConnect::OnCreateGraphNodeInCS()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BED_FSMNode_GI_Global_SubG_GI_Loading_HandleDisConnect", "OnCreateGraphNodeInCS");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function b1-Managed.BED_FSMNode_GI_Global_SubG_GI_Loading_HandleDisConnect.GetNodeDescriptionInCS
// (Native, Event, Public, HasOutParams, BlueprintEvent, Const)
// Parameters:
// class FString                           ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash)

class FString UBED_FSMNode_GI_Global_SubG_GI_Loading_HandleDisConnect::GetNodeDescriptionInCS() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BED_FSMNode_GI_Global_SubG_GI_Loading_HandleDisConnect", "GetNodeDescriptionInCS");

	Params::BED_FSMNode_GI_Global_SubG_GI_Loading_HandleDisConnect_GetNodeDescriptionInCS Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function b1-Managed.BED_FSMNode_GI_Global_SubG_GI_Loading_PartyRoomClient.OnCreateGraphNodeInCS
// (Native, Event, Public, BlueprintEvent)

void UBED_FSMNode_GI_Global_SubG_GI_Loading_PartyRoomClient::OnCreateGraphNodeInCS()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BED_FSMNode_GI_Global_SubG_GI_Loading_PartyRoomClient", "OnCreateGraphNodeInCS");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function b1-Managed.BED_FSMNode_GI_Global_SubG_GI_Loading_PartyRoomClient.GetNodeDescriptionInCS
// (Native, Event, Public, HasOutParams, BlueprintEvent, Const)
// Parameters:
// class FString                           ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash)

class FString UBED_FSMNode_GI_Global_SubG_GI_Loading_PartyRoomClient::GetNodeDescriptionInCS() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BED_FSMNode_GI_Global_SubG_GI_Loading_PartyRoomClient", "GetNodeDescriptionInCS");

	Params::BED_FSMNode_GI_Global_SubG_GI_Loading_PartyRoomClient_GetNodeDescriptionInCS Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function b1-Managed.BED_FSMNode_GI_Global_SubG_GI_Loading_PostWXLoginFinish.OnCreateGraphNodeInCS
// (Native, Event, Public, BlueprintEvent)

void UBED_FSMNode_GI_Global_SubG_GI_Loading_PostWXLoginFinish::OnCreateGraphNodeInCS()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BED_FSMNode_GI_Global_SubG_GI_Loading_PostWXLoginFinish", "OnCreateGraphNodeInCS");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function b1-Managed.BED_FSMNode_GI_Global_SubG_GI_Loading_PostWXLoginFinish.GetNodeDescriptionInCS
// (Native, Event, Public, HasOutParams, BlueprintEvent, Const)
// Parameters:
// class FString                           ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash)

class FString UBED_FSMNode_GI_Global_SubG_GI_Loading_PostWXLoginFinish::GetNodeDescriptionInCS() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BED_FSMNode_GI_Global_SubG_GI_Loading_PostWXLoginFinish", "GetNodeDescriptionInCS");

	Params::BED_FSMNode_GI_Global_SubG_GI_Loading_PostWXLoginFinish_GetNodeDescriptionInCS Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function b1-Managed.BED_FSMNode_GI_Global_SubG_GI_Loading_PreEnterMainMenu.OnCreateGraphNodeInCS
// (Native, Event, Public, BlueprintEvent)

void UBED_FSMNode_GI_Global_SubG_GI_Loading_PreEnterMainMenu::OnCreateGraphNodeInCS()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BED_FSMNode_GI_Global_SubG_GI_Loading_PreEnterMainMenu", "OnCreateGraphNodeInCS");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function b1-Managed.BED_FSMNode_GI_Global_SubG_GI_Loading_PreEnterMainMenu.GetNodeDescriptionInCS
// (Native, Event, Public, HasOutParams, BlueprintEvent, Const)
// Parameters:
// class FString                           ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash)

class FString UBED_FSMNode_GI_Global_SubG_GI_Loading_PreEnterMainMenu::GetNodeDescriptionInCS() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BED_FSMNode_GI_Global_SubG_GI_Loading_PreEnterMainMenu", "GetNodeDescriptionInCS");

	Params::BED_FSMNode_GI_Global_SubG_GI_Loading_PreEnterMainMenu_GetNodeDescriptionInCS Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function b1-Managed.BED_FSMNode_GI_Global_SubG_GI_Loading_PreviewSequence.OnCreateGraphNodeInCS
// (Native, Event, Public, BlueprintEvent)

void UBED_FSMNode_GI_Global_SubG_GI_Loading_PreviewSequence::OnCreateGraphNodeInCS()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BED_FSMNode_GI_Global_SubG_GI_Loading_PreviewSequence", "OnCreateGraphNodeInCS");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function b1-Managed.BED_FSMNode_GI_Global_SubG_GI_Loading_PreviewSequence.GetNodeDescriptionInCS
// (Native, Event, Public, HasOutParams, BlueprintEvent, Const)
// Parameters:
// class FString                           ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash)

class FString UBED_FSMNode_GI_Global_SubG_GI_Loading_PreviewSequence::GetNodeDescriptionInCS() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BED_FSMNode_GI_Global_SubG_GI_Loading_PreviewSequence", "GetNodeDescriptionInCS");

	Params::BED_FSMNode_GI_Global_SubG_GI_Loading_PreviewSequence_GetNodeDescriptionInCS Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function b1-Managed.BED_FSMNode_GI_Global_SubG_GI_Loading_SaveArchiveAndWaitFinish.OnCreateGraphNodeInCS
// (Native, Event, Public, BlueprintEvent)

void UBED_FSMNode_GI_Global_SubG_GI_Loading_SaveArchiveAndWaitFinish::OnCreateGraphNodeInCS()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BED_FSMNode_GI_Global_SubG_GI_Loading_SaveArchiveAndWaitFinish", "OnCreateGraphNodeInCS");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function b1-Managed.BED_FSMNode_GI_Global_SubG_GI_Loading_SaveArchiveAndWaitFinish.GetNodeDescriptionInCS
// (Native, Event, Public, HasOutParams, BlueprintEvent, Const)
// Parameters:
// class FString                           ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash)

class FString UBED_FSMNode_GI_Global_SubG_GI_Loading_SaveArchiveAndWaitFinish::GetNodeDescriptionInCS() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BED_FSMNode_GI_Global_SubG_GI_Loading_SaveArchiveAndWaitFinish", "GetNodeDescriptionInCS");

	Params::BED_FSMNode_GI_Global_SubG_GI_Loading_SaveArchiveAndWaitFinish_GetNodeDescriptionInCS Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function b1-Managed.BED_FSMNode_GI_Global_SubG_GI_Loading_SetConfigAndPrecompilePSO.OnCreateGraphNodeInCS
// (Native, Event, Public, BlueprintEvent)

void UBED_FSMNode_GI_Global_SubG_GI_Loading_SetConfigAndPrecompilePSO::OnCreateGraphNodeInCS()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BED_FSMNode_GI_Global_SubG_GI_Loading_SetConfigAndPrecompilePSO", "OnCreateGraphNodeInCS");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function b1-Managed.BED_FSMNode_GI_Global_SubG_GI_Loading_SetConfigAndPrecompilePSO.GetNodeDescriptionInCS
// (Native, Event, Public, HasOutParams, BlueprintEvent, Const)
// Parameters:
// class FString                           ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash)

class FString UBED_FSMNode_GI_Global_SubG_GI_Loading_SetConfigAndPrecompilePSO::GetNodeDescriptionInCS() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BED_FSMNode_GI_Global_SubG_GI_Loading_SetConfigAndPrecompilePSO", "GetNodeDescriptionInCS");

	Params::BED_FSMNode_GI_Global_SubG_GI_Loading_SetConfigAndPrecompilePSO_GetNodeDescriptionInCS Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function b1-Managed.BED_FSMNode_GI_Global_SubG_GI_Loading_StartNewGame.OnCreateGraphNodeInCS
// (Native, Event, Public, BlueprintEvent)

void UBED_FSMNode_GI_Global_SubG_GI_Loading_StartNewGame::OnCreateGraphNodeInCS()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BED_FSMNode_GI_Global_SubG_GI_Loading_StartNewGame", "OnCreateGraphNodeInCS");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function b1-Managed.BED_FSMNode_GI_Global_SubG_GI_Loading_StartNewGame.GetNodeDescriptionInCS
// (Native, Event, Public, HasOutParams, BlueprintEvent, Const)
// Parameters:
// class FString                           ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash)

class FString UBED_FSMNode_GI_Global_SubG_GI_Loading_StartNewGame::GetNodeDescriptionInCS() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BED_FSMNode_GI_Global_SubG_GI_Loading_StartNewGame", "GetNodeDescriptionInCS");

	Params::BED_FSMNode_GI_Global_SubG_GI_Loading_StartNewGame_GetNodeDescriptionInCS Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function b1-Managed.BED_FSMNode_GI_Global_SubG_GI_Loading_StartNewGamePlus.OnCreateGraphNodeInCS
// (Native, Event, Public, BlueprintEvent)

void UBED_FSMNode_GI_Global_SubG_GI_Loading_StartNewGamePlus::OnCreateGraphNodeInCS()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BED_FSMNode_GI_Global_SubG_GI_Loading_StartNewGamePlus", "OnCreateGraphNodeInCS");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function b1-Managed.BED_FSMNode_GI_Global_SubG_GI_Loading_StartNewGamePlus.GetNodeDescriptionInCS
// (Native, Event, Public, HasOutParams, BlueprintEvent, Const)
// Parameters:
// class FString                           ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash)

class FString UBED_FSMNode_GI_Global_SubG_GI_Loading_StartNewGamePlus::GetNodeDescriptionInCS() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BED_FSMNode_GI_Global_SubG_GI_Loading_StartNewGamePlus", "GetNodeDescriptionInCS");

	Params::BED_FSMNode_GI_Global_SubG_GI_Loading_StartNewGamePlus_GetNodeDescriptionInCS Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function b1-Managed.BED_FSMNode_GI_Global_SubG_GI_Loading_StartUp.OnCreateGraphNodeInCS
// (Native, Event, Public, BlueprintEvent)

void UBED_FSMNode_GI_Global_SubG_GI_Loading_StartUp::OnCreateGraphNodeInCS()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BED_FSMNode_GI_Global_SubG_GI_Loading_StartUp", "OnCreateGraphNodeInCS");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function b1-Managed.BED_FSMNode_GI_Global_SubG_GI_Loading_StartUp.GetNodeDescriptionInCS
// (Native, Event, Public, HasOutParams, BlueprintEvent, Const)
// Parameters:
// class FString                           ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash)

class FString UBED_FSMNode_GI_Global_SubG_GI_Loading_StartUp::GetNodeDescriptionInCS() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BED_FSMNode_GI_Global_SubG_GI_Loading_StartUp", "GetNodeDescriptionInCS");

	Params::BED_FSMNode_GI_Global_SubG_GI_Loading_StartUp_GetNodeDescriptionInCS Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function b1-Managed.BED_FSMNode_GI_Global_SubG_GI_Loading_Teleport.OnCreateGraphNodeInCS
// (Native, Event, Public, BlueprintEvent)

void UBED_FSMNode_GI_Global_SubG_GI_Loading_Teleport::OnCreateGraphNodeInCS()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BED_FSMNode_GI_Global_SubG_GI_Loading_Teleport", "OnCreateGraphNodeInCS");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function b1-Managed.BED_FSMNode_GI_Global_SubG_GI_Loading_Teleport.GetNodeDescriptionInCS
// (Native, Event, Public, HasOutParams, BlueprintEvent, Const)
// Parameters:
// class FString                           ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash)

class FString UBED_FSMNode_GI_Global_SubG_GI_Loading_Teleport::GetNodeDescriptionInCS() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BED_FSMNode_GI_Global_SubG_GI_Loading_Teleport", "GetNodeDescriptionInCS");

	Params::BED_FSMNode_GI_Global_SubG_GI_Loading_Teleport_GetNodeDescriptionInCS Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function b1-Managed.BED_FSMNode_GI_Global_SubG_GI_Loading_ToiletClient.OnCreateGraphNodeInCS
// (Native, Event, Public, BlueprintEvent)

void UBED_FSMNode_GI_Global_SubG_GI_Loading_ToiletClient::OnCreateGraphNodeInCS()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BED_FSMNode_GI_Global_SubG_GI_Loading_ToiletClient", "OnCreateGraphNodeInCS");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function b1-Managed.BED_FSMNode_GI_Global_SubG_GI_Loading_ToiletClient.GetNodeDescriptionInCS
// (Native, Event, Public, HasOutParams, BlueprintEvent, Const)
// Parameters:
// class FString                           ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash)

class FString UBED_FSMNode_GI_Global_SubG_GI_Loading_ToiletClient::GetNodeDescriptionInCS() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BED_FSMNode_GI_Global_SubG_GI_Loading_ToiletClient", "GetNodeDescriptionInCS");

	Params::BED_FSMNode_GI_Global_SubG_GI_Loading_ToiletClient_GetNodeDescriptionInCS Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function b1-Managed.BED_FSMNode_GI_Global_SubG_GI_Loading_ToiletDedicateServer.OnCreateGraphNodeInCS
// (Native, Event, Public, BlueprintEvent)

void UBED_FSMNode_GI_Global_SubG_GI_Loading_ToiletDedicateServer::OnCreateGraphNodeInCS()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BED_FSMNode_GI_Global_SubG_GI_Loading_ToiletDedicateServer", "OnCreateGraphNodeInCS");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function b1-Managed.BED_FSMNode_GI_Global_SubG_GI_Loading_ToiletDedicateServer.GetNodeDescriptionInCS
// (Native, Event, Public, HasOutParams, BlueprintEvent, Const)
// Parameters:
// class FString                           ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash)

class FString UBED_FSMNode_GI_Global_SubG_GI_Loading_ToiletDedicateServer::GetNodeDescriptionInCS() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BED_FSMNode_GI_Global_SubG_GI_Loading_ToiletDedicateServer", "GetNodeDescriptionInCS");

	Params::BED_FSMNode_GI_Global_SubG_GI_Loading_ToiletDedicateServer_GetNodeDescriptionInCS Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function b1-Managed.BED_FSMNode_GI_Global_SubG_GI_Loading_ToiletListenServer.OnCreateGraphNodeInCS
// (Native, Event, Public, BlueprintEvent)

void UBED_FSMNode_GI_Global_SubG_GI_Loading_ToiletListenServer::OnCreateGraphNodeInCS()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BED_FSMNode_GI_Global_SubG_GI_Loading_ToiletListenServer", "OnCreateGraphNodeInCS");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function b1-Managed.BED_FSMNode_GI_Global_SubG_GI_Loading_ToiletListenServer.GetNodeDescriptionInCS
// (Native, Event, Public, HasOutParams, BlueprintEvent, Const)
// Parameters:
// class FString                           ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash)

class FString UBED_FSMNode_GI_Global_SubG_GI_Loading_ToiletListenServer::GetNodeDescriptionInCS() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BED_FSMNode_GI_Global_SubG_GI_Loading_ToiletListenServer", "GetNodeDescriptionInCS");

	Params::BED_FSMNode_GI_Global_SubG_GI_Loading_ToiletListenServer_GetNodeDescriptionInCS Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function b1-Managed.BED_FSMNode_GI_Global_SubG_GI_Loading_ToiletStandAlone.OnCreateGraphNodeInCS
// (Native, Event, Public, BlueprintEvent)

void UBED_FSMNode_GI_Global_SubG_GI_Loading_ToiletStandAlone::OnCreateGraphNodeInCS()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BED_FSMNode_GI_Global_SubG_GI_Loading_ToiletStandAlone", "OnCreateGraphNodeInCS");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function b1-Managed.BED_FSMNode_GI_Global_SubG_GI_Loading_ToiletStandAlone.GetNodeDescriptionInCS
// (Native, Event, Public, HasOutParams, BlueprintEvent, Const)
// Parameters:
// class FString                           ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash)

class FString UBED_FSMNode_GI_Global_SubG_GI_Loading_ToiletStandAlone::GetNodeDescriptionInCS() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BED_FSMNode_GI_Global_SubG_GI_Loading_ToiletStandAlone", "GetNodeDescriptionInCS");

	Params::BED_FSMNode_GI_Global_SubG_GI_Loading_ToiletStandAlone_GetNodeDescriptionInCS Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function b1-Managed.BED_FSMNode_GI_Global_SubG_GI_Loading_TravelToNextChapter.OnCreateGraphNodeInCS
// (Native, Event, Public, BlueprintEvent)

void UBED_FSMNode_GI_Global_SubG_GI_Loading_TravelToNextChapter::OnCreateGraphNodeInCS()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BED_FSMNode_GI_Global_SubG_GI_Loading_TravelToNextChapter", "OnCreateGraphNodeInCS");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function b1-Managed.BED_FSMNode_GI_Global_SubG_GI_Loading_TravelToNextChapter.GetNodeDescriptionInCS
// (Native, Event, Public, HasOutParams, BlueprintEvent, Const)
// Parameters:
// class FString                           ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash)

class FString UBED_FSMNode_GI_Global_SubG_GI_Loading_TravelToNextChapter::GetNodeDescriptionInCS() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BED_FSMNode_GI_Global_SubG_GI_Loading_TravelToNextChapter", "GetNodeDescriptionInCS");

	Params::BED_FSMNode_GI_Global_SubG_GI_Loading_TravelToNextChapter_GetNodeDescriptionInCS Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function b1-Managed.BED_FSMNode_GI_Global_SubG_GI_Loading_UnKnowLevelTravel.OnCreateGraphNodeInCS
// (Native, Event, Public, BlueprintEvent)

void UBED_FSMNode_GI_Global_SubG_GI_Loading_UnKnowLevelTravel::OnCreateGraphNodeInCS()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BED_FSMNode_GI_Global_SubG_GI_Loading_UnKnowLevelTravel", "OnCreateGraphNodeInCS");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function b1-Managed.BED_FSMNode_GI_Global_SubG_GI_Loading_UnKnowLevelTravel.GetNodeDescriptionInCS
// (Native, Event, Public, HasOutParams, BlueprintEvent, Const)
// Parameters:
// class FString                           ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash)

class FString UBED_FSMNode_GI_Global_SubG_GI_Loading_UnKnowLevelTravel::GetNodeDescriptionInCS() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BED_FSMNode_GI_Global_SubG_GI_Loading_UnKnowLevelTravel", "GetNodeDescriptionInCS");

	Params::BED_FSMNode_GI_Global_SubG_GI_Loading_UnKnowLevelTravel_GetNodeDescriptionInCS Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function b1-Managed.BED_FSMNode_GI_Global_WaittingSelectLevel820Demo.PostPropertyChanged
// (Native, Event, Public, BlueprintEvent)
// Parameters:
// class FString                           MemberName                                             (Parm, ZeroConstructor, HasGetValueTypeHash)
// class FString                           PropertyName                                           (Parm, ZeroConstructor, HasGetValueTypeHash)

void UBED_FSMNode_GI_Global_WaittingSelectLevel820Demo::PostPropertyChanged(const class FString& MemberName, const class FString& PropertyName)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BED_FSMNode_GI_Global_WaittingSelectLevel820Demo", "PostPropertyChanged");

	Params::BED_FSMNode_GI_Global_WaittingSelectLevel820Demo_PostPropertyChanged Parms{};

	Parms.MemberName = std::move(MemberName);
	Parms.PropertyName = std::move(PropertyName);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function b1-Managed.BED_FSMNode_GI_Global_WaittingSelectLevel820Demo.GetNodeDescriptionInCS
// (Native, Event, Public, HasOutParams, BlueprintEvent, Const)
// Parameters:
// class FString                           ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash)

class FString UBED_FSMNode_GI_Global_WaittingSelectLevel820Demo::GetNodeDescriptionInCS() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BED_FSMNode_GI_Global_WaittingSelectLevel820Demo", "GetNodeDescriptionInCS");

	Params::BED_FSMNode_GI_Global_WaittingSelectLevel820Demo_GetNodeDescriptionInCS Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function b1-Managed.BED_FSMNode_GI_LoadingAnyState.PostPropertyChanged
// (Native, Event, Public, BlueprintEvent)
// Parameters:
// class FString                           MemberName                                             (Parm, ZeroConstructor, HasGetValueTypeHash)
// class FString                           PropertyName                                           (Parm, ZeroConstructor, HasGetValueTypeHash)

void UBED_FSMNode_GI_LoadingAnyState::PostPropertyChanged(const class FString& MemberName, const class FString& PropertyName)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BED_FSMNode_GI_LoadingAnyState", "PostPropertyChanged");

	Params::BED_FSMNode_GI_LoadingAnyState_PostPropertyChanged Parms{};

	Parms.MemberName = std::move(MemberName);
	Parms.PropertyName = std::move(PropertyName);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function b1-Managed.BED_MovieNode_BeforePlay.GetNodeDescriptionInCS
// (Native, Event, Public, HasOutParams, BlueprintEvent, Const)
// Parameters:
// class FString                           ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash)

class FString UBED_MovieNode_BeforePlay::GetNodeDescriptionInCS() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BED_MovieNode_BeforePlay", "GetNodeDescriptionInCS");

	Params::BED_MovieNode_BeforePlay_GetNodeDescriptionInCS Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function b1-Managed.BED_FSMNode_GI_Loading_AdjustPSOCachePrecompileBatch.PostPropertyChanged
// (Native, Event, Public, BlueprintEvent)
// Parameters:
// class FString                           MemberName                                             (Parm, ZeroConstructor, HasGetValueTypeHash)
// class FString                           PropertyName                                           (Parm, ZeroConstructor, HasGetValueTypeHash)

void UBED_FSMNode_GI_Loading_AdjustPSOCachePrecompileBatch::PostPropertyChanged(const class FString& MemberName, const class FString& PropertyName)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BED_FSMNode_GI_Loading_AdjustPSOCachePrecompileBatch", "PostPropertyChanged");

	Params::BED_FSMNode_GI_Loading_AdjustPSOCachePrecompileBatch_PostPropertyChanged Parms{};

	Parms.MemberName = std::move(MemberName);
	Parms.PropertyName = std::move(PropertyName);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function b1-Managed.BED_FSMNode_GI_Loading_AdjustPSOCachePrecompileBatch.GetNodeDescriptionInCS
// (Native, Event, Public, HasOutParams, BlueprintEvent, Const)
// Parameters:
// class FString                           ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash)

class FString UBED_FSMNode_GI_Loading_AdjustPSOCachePrecompileBatch::GetNodeDescriptionInCS() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BED_FSMNode_GI_Loading_AdjustPSOCachePrecompileBatch", "GetNodeDescriptionInCS");

	Params::BED_FSMNode_GI_Loading_AdjustPSOCachePrecompileBatch_GetNodeDescriptionInCS Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function b1-Managed.BED_FSMNode_GI_Loading_ChangeGameDefaultMap.PostPropertyChanged
// (Native, Event, Public, BlueprintEvent)
// Parameters:
// class FString                           MemberName                                             (Parm, ZeroConstructor, HasGetValueTypeHash)
// class FString                           PropertyName                                           (Parm, ZeroConstructor, HasGetValueTypeHash)

void UBED_FSMNode_GI_Loading_ChangeGameDefaultMap::PostPropertyChanged(const class FString& MemberName, const class FString& PropertyName)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BED_FSMNode_GI_Loading_ChangeGameDefaultMap", "PostPropertyChanged");

	Params::BED_FSMNode_GI_Loading_ChangeGameDefaultMap_PostPropertyChanged Parms{};

	Parms.MemberName = std::move(MemberName);
	Parms.PropertyName = std::move(PropertyName);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function b1-Managed.BED_FSMNode_GI_Loading_ChangeGameDefaultMap.GetNodeDescriptionInCS
// (Native, Event, Public, HasOutParams, BlueprintEvent, Const)
// Parameters:
// class FString                           ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash)

class FString UBED_FSMNode_GI_Loading_ChangeGameDefaultMap::GetNodeDescriptionInCS() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BED_FSMNode_GI_Loading_ChangeGameDefaultMap", "GetNodeDescriptionInCS");

	Params::BED_FSMNode_GI_Loading_ChangeGameDefaultMap_GetNodeDescriptionInCS Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function b1-Managed.BED_FSMNode_GI_Loading_CheckGSSdkServerConfig.PostPropertyChanged
// (Native, Event, Public, BlueprintEvent)
// Parameters:
// class FString                           MemberName                                             (Parm, ZeroConstructor, HasGetValueTypeHash)
// class FString                           PropertyName                                           (Parm, ZeroConstructor, HasGetValueTypeHash)

void UBED_FSMNode_GI_Loading_CheckGSSdkServerConfig::PostPropertyChanged(const class FString& MemberName, const class FString& PropertyName)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BED_FSMNode_GI_Loading_CheckGSSdkServerConfig", "PostPropertyChanged");

	Params::BED_FSMNode_GI_Loading_CheckGSSdkServerConfig_PostPropertyChanged Parms{};

	Parms.MemberName = std::move(MemberName);
	Parms.PropertyName = std::move(PropertyName);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function b1-Managed.BED_FSMNode_GI_Loading_CheckGSSdkServerConfig.GetNodeDescriptionInCS
// (Native, Event, Public, HasOutParams, BlueprintEvent, Const)
// Parameters:
// class FString                           ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash)

class FString UBED_FSMNode_GI_Loading_CheckGSSdkServerConfig::GetNodeDescriptionInCS() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BED_FSMNode_GI_Loading_CheckGSSdkServerConfig", "GetNodeDescriptionInCS");

	Params::BED_FSMNode_GI_Loading_CheckGSSdkServerConfig_GetNodeDescriptionInCS Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function b1-Managed.BED_FSMNode_GI_Loading_CloseLoadingScreen.PostPropertyChanged
// (Native, Event, Public, BlueprintEvent)
// Parameters:
// class FString                           MemberName                                             (Parm, ZeroConstructor, HasGetValueTypeHash)
// class FString                           PropertyName                                           (Parm, ZeroConstructor, HasGetValueTypeHash)

void UBED_FSMNode_GI_Loading_CloseLoadingScreen::PostPropertyChanged(const class FString& MemberName, const class FString& PropertyName)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BED_FSMNode_GI_Loading_CloseLoadingScreen", "PostPropertyChanged");

	Params::BED_FSMNode_GI_Loading_CloseLoadingScreen_PostPropertyChanged Parms{};

	Parms.MemberName = std::move(MemberName);
	Parms.PropertyName = std::move(PropertyName);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function b1-Managed.BED_FSMNode_GI_Loading_CloseLoadingScreen.GetNodeDescriptionInCS
// (Native, Event, Public, HasOutParams, BlueprintEvent, Const)
// Parameters:
// class FString                           ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash)

class FString UBED_FSMNode_GI_Loading_CloseLoadingScreen::GetNodeDescriptionInCS() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BED_FSMNode_GI_Loading_CloseLoadingScreen", "GetNodeDescriptionInCS");

	Params::BED_FSMNode_GI_Loading_CloseLoadingScreen_GetNodeDescriptionInCS Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function b1-Managed.BED_FSMNode_GI_Loading_ECSWorldBeginPlay.PostPropertyChanged
// (Native, Event, Public, BlueprintEvent)
// Parameters:
// class FString                           MemberName                                             (Parm, ZeroConstructor, HasGetValueTypeHash)
// class FString                           PropertyName                                           (Parm, ZeroConstructor, HasGetValueTypeHash)

void UBED_FSMNode_GI_Loading_ECSWorldBeginPlay::PostPropertyChanged(const class FString& MemberName, const class FString& PropertyName)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BED_FSMNode_GI_Loading_ECSWorldBeginPlay", "PostPropertyChanged");

	Params::BED_FSMNode_GI_Loading_ECSWorldBeginPlay_PostPropertyChanged Parms{};

	Parms.MemberName = std::move(MemberName);
	Parms.PropertyName = std::move(PropertyName);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function b1-Managed.BED_FSMNode_GI_Loading_ECSWorldBeginPlay.GetNodeDescriptionInCS
// (Native, Event, Public, HasOutParams, BlueprintEvent, Const)
// Parameters:
// class FString                           ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash)

class FString UBED_FSMNode_GI_Loading_ECSWorldBeginPlay::GetNodeDescriptionInCS() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BED_FSMNode_GI_Loading_ECSWorldBeginPlay", "GetNodeDescriptionInCS");

	Params::BED_FSMNode_GI_Loading_ECSWorldBeginPlay_GetNodeDescriptionInCS Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function b1-Managed.QuestCovertTimerOverlapComp.OnCollisionBeginOverlap
// (Native, Public, Private)
// Parameters:
// class UPrimitiveComponent*              OverlappedComponent                                    (ExportObject, Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// class AActor*                           OtherActor                                             (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// class UPrimitiveComponent*              OtherComp                                              (ExportObject, Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// int32                                   OtherBodyIndex                                         (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// uint8                                   bFromSweep                                             (Parm, NoDestructor, HasGetValueTypeHash)
// struct FHitResult                       SweepResult                                            (Parm, IsPlainOldData, NoDestructor)

void UQuestCovertTimerOverlapComp::OnCollisionBeginOverlap(class UPrimitiveComponent* OverlappedComponent, class AActor* OtherActor, class UPrimitiveComponent* OtherComp, int32 OtherBodyIndex, uint8 bFromSweep, const struct FHitResult& SweepResult)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("QuestCovertTimerOverlapComp", "OnCollisionBeginOverlap");

	Params::QuestCovertTimerOverlapComp_OnCollisionBeginOverlap Parms{};

	Parms.OverlappedComponent = OverlappedComponent;
	Parms.OtherActor = OtherActor;
	Parms.OtherComp = OtherComp;
	Parms.OtherBodyIndex = OtherBodyIndex;
	Parms.bFromSweep = bFromSweep;
	Parms.SweepResult = std::move(SweepResult);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function b1-Managed.QuestCovertTimerOverlapComp.OnCollisionEndOverlap
// (Native, Public, Private)
// Parameters:
// class UPrimitiveComponent*              OverlappedComponent                                    (ExportObject, Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// class AActor*                           OtherActor                                             (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// class UPrimitiveComponent*              OtherComp                                              (ExportObject, Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// int32                                   OtherBodyIndex                                         (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UQuestCovertTimerOverlapComp::OnCollisionEndOverlap(class UPrimitiveComponent* OverlappedComponent, class AActor* OtherActor, class UPrimitiveComponent* OtherComp, int32 OtherBodyIndex)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("QuestCovertTimerOverlapComp", "OnCollisionEndOverlap");

	Params::QuestCovertTimerOverlapComp_OnCollisionEndOverlap Parms{};

	Parms.OverlappedComponent = OverlappedComponent;
	Parms.OtherActor = OtherActor;
	Parms.OtherComp = OtherComp;
	Parms.OtherBodyIndex = OtherBodyIndex;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function b1-Managed.BED_FSMNode_GI_Loading_EngineHandleDisconnect.PostPropertyChanged
// (Native, Event, Public, BlueprintEvent)
// Parameters:
// class FString                           MemberName                                             (Parm, ZeroConstructor, HasGetValueTypeHash)
// class FString                           PropertyName                                           (Parm, ZeroConstructor, HasGetValueTypeHash)

void UBED_FSMNode_GI_Loading_EngineHandleDisconnect::PostPropertyChanged(const class FString& MemberName, const class FString& PropertyName)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BED_FSMNode_GI_Loading_EngineHandleDisconnect", "PostPropertyChanged");

	Params::BED_FSMNode_GI_Loading_EngineHandleDisconnect_PostPropertyChanged Parms{};

	Parms.MemberName = std::move(MemberName);
	Parms.PropertyName = std::move(PropertyName);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function b1-Managed.BED_FSMNode_GI_Loading_EngineHandleDisconnect.GetNodeDescriptionInCS
// (Native, Event, Public, HasOutParams, BlueprintEvent, Const)
// Parameters:
// class FString                           ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash)

class FString UBED_FSMNode_GI_Loading_EngineHandleDisconnect::GetNodeDescriptionInCS() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BED_FSMNode_GI_Loading_EngineHandleDisconnect", "GetNodeDescriptionInCS");

	Params::BED_FSMNode_GI_Loading_EngineHandleDisconnect_GetNodeDescriptionInCS Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function b1-Managed.BED_FSMNode_GI_Loading_FillLocalBPCRoleData.PostPropertyChanged
// (Native, Event, Public, BlueprintEvent)
// Parameters:
// class FString                           MemberName                                             (Parm, ZeroConstructor, HasGetValueTypeHash)
// class FString                           PropertyName                                           (Parm, ZeroConstructor, HasGetValueTypeHash)

void UBED_FSMNode_GI_Loading_FillLocalBPCRoleData::PostPropertyChanged(const class FString& MemberName, const class FString& PropertyName)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BED_FSMNode_GI_Loading_FillLocalBPCRoleData", "PostPropertyChanged");

	Params::BED_FSMNode_GI_Loading_FillLocalBPCRoleData_PostPropertyChanged Parms{};

	Parms.MemberName = std::move(MemberName);
	Parms.PropertyName = std::move(PropertyName);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function b1-Managed.BED_FSMNode_GI_Loading_FillLocalBPCRoleData.GetNodeDescriptionInCS
// (Native, Event, Public, HasOutParams, BlueprintEvent, Const)
// Parameters:
// class FString                           ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash)

class FString UBED_FSMNode_GI_Loading_FillLocalBPCRoleData::GetNodeDescriptionInCS() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BED_FSMNode_GI_Loading_FillLocalBPCRoleData", "GetNodeDescriptionInCS");

	Params::BED_FSMNode_GI_Loading_FillLocalBPCRoleData_GetNodeDescriptionInCS Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function b1-Managed.BED_FSMNode_GI_Loading_FirstStartGameSettings.PostPropertyChanged
// (Native, Event, Public, BlueprintEvent)
// Parameters:
// class FString                           MemberName                                             (Parm, ZeroConstructor, HasGetValueTypeHash)
// class FString                           PropertyName                                           (Parm, ZeroConstructor, HasGetValueTypeHash)

void UBED_FSMNode_GI_Loading_FirstStartGameSettings::PostPropertyChanged(const class FString& MemberName, const class FString& PropertyName)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BED_FSMNode_GI_Loading_FirstStartGameSettings", "PostPropertyChanged");

	Params::BED_FSMNode_GI_Loading_FirstStartGameSettings_PostPropertyChanged Parms{};

	Parms.MemberName = std::move(MemberName);
	Parms.PropertyName = std::move(PropertyName);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function b1-Managed.BED_FSMNode_GI_Loading_FirstStartGameSettings.GetNodeDescriptionInCS
// (Native, Event, Public, HasOutParams, BlueprintEvent, Const)
// Parameters:
// class FString                           ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash)

class FString UBED_FSMNode_GI_Loading_FirstStartGameSettings::GetNodeDescriptionInCS() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BED_FSMNode_GI_Loading_FirstStartGameSettings", "GetNodeDescriptionInCS");

	Params::BED_FSMNode_GI_Loading_FirstStartGameSettings_GetNodeDescriptionInCS Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function b1-Managed.BED_FSMNode_GI_Loading_GSGBtlOnBattleDestroy.PostPropertyChanged
// (Native, Event, Public, BlueprintEvent)
// Parameters:
// class FString                           MemberName                                             (Parm, ZeroConstructor, HasGetValueTypeHash)
// class FString                           PropertyName                                           (Parm, ZeroConstructor, HasGetValueTypeHash)

void UBED_FSMNode_GI_Loading_GSGBtlOnBattleDestroy::PostPropertyChanged(const class FString& MemberName, const class FString& PropertyName)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BED_FSMNode_GI_Loading_GSGBtlOnBattleDestroy", "PostPropertyChanged");

	Params::BED_FSMNode_GI_Loading_GSGBtlOnBattleDestroy_PostPropertyChanged Parms{};

	Parms.MemberName = std::move(MemberName);
	Parms.PropertyName = std::move(PropertyName);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function b1-Managed.BED_FSMNode_GI_Loading_GSGBtlOnBattleDestroy.GetNodeDescriptionInCS
// (Native, Event, Public, HasOutParams, BlueprintEvent, Const)
// Parameters:
// class FString                           ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash)

class FString UBED_FSMNode_GI_Loading_GSGBtlOnBattleDestroy::GetNodeDescriptionInCS() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BED_FSMNode_GI_Loading_GSGBtlOnBattleDestroy", "GetNodeDescriptionInCS");

	Params::BED_FSMNode_GI_Loading_GSGBtlOnBattleDestroy_GetNodeDescriptionInCS Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function b1-Managed.BED_FSMNode_GI_Loading_GSGEnterBattleLevel.PostPropertyChanged
// (Native, Event, Public, BlueprintEvent)
// Parameters:
// class FString                           MemberName                                             (Parm, ZeroConstructor, HasGetValueTypeHash)
// class FString                           PropertyName                                           (Parm, ZeroConstructor, HasGetValueTypeHash)

void UBED_FSMNode_GI_Loading_GSGEnterBattleLevel::PostPropertyChanged(const class FString& MemberName, const class FString& PropertyName)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BED_FSMNode_GI_Loading_GSGEnterBattleLevel", "PostPropertyChanged");

	Params::BED_FSMNode_GI_Loading_GSGEnterBattleLevel_PostPropertyChanged Parms{};

	Parms.MemberName = std::move(MemberName);
	Parms.PropertyName = std::move(PropertyName);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function b1-Managed.BED_FSMNode_GI_Loading_GSGEnterBattleLevel.GetNodeDescriptionInCS
// (Native, Event, Public, HasOutParams, BlueprintEvent, Const)
// Parameters:
// class FString                           ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash)

class FString UBED_FSMNode_GI_Loading_GSGEnterBattleLevel::GetNodeDescriptionInCS() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BED_FSMNode_GI_Loading_GSGEnterBattleLevel", "GetNodeDescriptionInCS");

	Params::BED_FSMNode_GI_Loading_GSGEnterBattleLevel_GetNodeDescriptionInCS Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function b1-Managed.BED_FSMNode_GI_Loading_GSGExitLevel.PostPropertyChanged
// (Native, Event, Public, BlueprintEvent)
// Parameters:
// class FString                           MemberName                                             (Parm, ZeroConstructor, HasGetValueTypeHash)
// class FString                           PropertyName                                           (Parm, ZeroConstructor, HasGetValueTypeHash)

void UBED_FSMNode_GI_Loading_GSGExitLevel::PostPropertyChanged(const class FString& MemberName, const class FString& PropertyName)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BED_FSMNode_GI_Loading_GSGExitLevel", "PostPropertyChanged");

	Params::BED_FSMNode_GI_Loading_GSGExitLevel_PostPropertyChanged Parms{};

	Parms.MemberName = std::move(MemberName);
	Parms.PropertyName = std::move(PropertyName);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function b1-Managed.BED_FSMNode_GI_Loading_GSGExitLevel.GetNodeDescriptionInCS
// (Native, Event, Public, HasOutParams, BlueprintEvent, Const)
// Parameters:
// class FString                           ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash)

class FString UBED_FSMNode_GI_Loading_GSGExitLevel::GetNodeDescriptionInCS() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BED_FSMNode_GI_Loading_GSGExitLevel", "GetNodeDescriptionInCS");

	Params::BED_FSMNode_GI_Loading_GSGExitLevel_GetNodeDescriptionInCS Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function b1-Managed.BED_FSMNode_GI_Loading_GSGOnBattleStart.PostPropertyChanged
// (Native, Event, Public, BlueprintEvent)
// Parameters:
// class FString                           MemberName                                             (Parm, ZeroConstructor, HasGetValueTypeHash)
// class FString                           PropertyName                                           (Parm, ZeroConstructor, HasGetValueTypeHash)

void UBED_FSMNode_GI_Loading_GSGOnBattleStart::PostPropertyChanged(const class FString& MemberName, const class FString& PropertyName)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BED_FSMNode_GI_Loading_GSGOnBattleStart", "PostPropertyChanged");

	Params::BED_FSMNode_GI_Loading_GSGOnBattleStart_PostPropertyChanged Parms{};

	Parms.MemberName = std::move(MemberName);
	Parms.PropertyName = std::move(PropertyName);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function b1-Managed.BED_FSMNode_GI_Loading_GSGOnBattleStart.GetNodeDescriptionInCS
// (Native, Event, Public, HasOutParams, BlueprintEvent, Const)
// Parameters:
// class FString                           ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash)

class FString UBED_FSMNode_GI_Loading_GSGOnBattleStart::GetNodeDescriptionInCS() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BED_FSMNode_GI_Loading_GSGOnBattleStart", "GetNodeDescriptionInCS");

	Params::BED_FSMNode_GI_Loading_GSGOnBattleStart_GetNodeDescriptionInCS Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function b1-Managed.BED_FSMNode_GI_Loading_GSGShowBattleUI.PostPropertyChanged
// (Native, Event, Public, BlueprintEvent)
// Parameters:
// class FString                           MemberName                                             (Parm, ZeroConstructor, HasGetValueTypeHash)
// class FString                           PropertyName                                           (Parm, ZeroConstructor, HasGetValueTypeHash)

void UBED_FSMNode_GI_Loading_GSGShowBattleUI::PostPropertyChanged(const class FString& MemberName, const class FString& PropertyName)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BED_FSMNode_GI_Loading_GSGShowBattleUI", "PostPropertyChanged");

	Params::BED_FSMNode_GI_Loading_GSGShowBattleUI_PostPropertyChanged Parms{};

	Parms.MemberName = std::move(MemberName);
	Parms.PropertyName = std::move(PropertyName);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function b1-Managed.BED_FSMNode_GI_Loading_GSGShowBattleUI.GetNodeDescriptionInCS
// (Native, Event, Public, HasOutParams, BlueprintEvent, Const)
// Parameters:
// class FString                           ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash)

class FString UBED_FSMNode_GI_Loading_GSGShowBattleUI::GetNodeDescriptionInCS() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BED_FSMNode_GI_Loading_GSGShowBattleUI", "GetNodeDescriptionInCS");

	Params::BED_FSMNode_GI_Loading_GSGShowBattleUI_GetNodeDescriptionInCS Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function b1-Managed.BED_FSMNode_GI_Loading_GSGShowLoginUI.PostPropertyChanged
// (Native, Event, Public, BlueprintEvent)
// Parameters:
// class FString                           MemberName                                             (Parm, ZeroConstructor, HasGetValueTypeHash)
// class FString                           PropertyName                                           (Parm, ZeroConstructor, HasGetValueTypeHash)

void UBED_FSMNode_GI_Loading_GSGShowLoginUI::PostPropertyChanged(const class FString& MemberName, const class FString& PropertyName)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BED_FSMNode_GI_Loading_GSGShowLoginUI", "PostPropertyChanged");

	Params::BED_FSMNode_GI_Loading_GSGShowLoginUI_PostPropertyChanged Parms{};

	Parms.MemberName = std::move(MemberName);
	Parms.PropertyName = std::move(PropertyName);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function b1-Managed.BED_FSMNode_GI_Loading_GSGShowLoginUI.GetNodeDescriptionInCS
// (Native, Event, Public, HasOutParams, BlueprintEvent, Const)
// Parameters:
// class FString                           ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash)

class FString UBED_FSMNode_GI_Loading_GSGShowLoginUI::GetNodeDescriptionInCS() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BED_FSMNode_GI_Loading_GSGShowLoginUI", "GetNodeDescriptionInCS");

	Params::BED_FSMNode_GI_Loading_GSGShowLoginUI_GetNodeDescriptionInCS Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function b1-Managed.BED_FSMNode_GI_Loading_GSGShowWXlogin.PostPropertyChanged
// (Native, Event, Public, BlueprintEvent)
// Parameters:
// class FString                           MemberName                                             (Parm, ZeroConstructor, HasGetValueTypeHash)
// class FString                           PropertyName                                           (Parm, ZeroConstructor, HasGetValueTypeHash)

void UBED_FSMNode_GI_Loading_GSGShowWXlogin::PostPropertyChanged(const class FString& MemberName, const class FString& PropertyName)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BED_FSMNode_GI_Loading_GSGShowWXlogin", "PostPropertyChanged");

	Params::BED_FSMNode_GI_Loading_GSGShowWXlogin_PostPropertyChanged Parms{};

	Parms.MemberName = std::move(MemberName);
	Parms.PropertyName = std::move(PropertyName);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function b1-Managed.BED_FSMNode_GI_Loading_GSGShowWXlogin.GetNodeDescriptionInCS
// (Native, Event, Public, HasOutParams, BlueprintEvent, Const)
// Parameters:
// class FString                           ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash)

class FString UBED_FSMNode_GI_Loading_GSGShowWXlogin::GetNodeDescriptionInCS() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BED_FSMNode_GI_Loading_GSGShowWXlogin", "GetNodeDescriptionInCS");

	Params::BED_FSMNode_GI_Loading_GSGShowWXlogin_GetNodeDescriptionInCS Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function b1-Managed.BGW_OnlineSubsystem.OnQueryIsOwnAdditionContentCompleteCS
// (Native, Event, Public, Protected, BlueprintEvent)
// Parameters:
// class FString                           EntitlementId                                          (Parm, ZeroConstructor, HasGetValueTypeHash)
// uint8                                   bWasSuccessful                                         (Parm, NoDestructor, HasGetValueTypeHash)

void UBGW_OnlineSubsystem::OnQueryIsOwnAdditionContentCompleteCS(const class FString& EntitlementId, uint8 bWasSuccessful)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BGW_OnlineSubsystem", "OnQueryIsOwnAdditionContentCompleteCS");

	Params::BGW_OnlineSubsystem_OnQueryIsOwnAdditionContentCompleteCS Parms{};

	Parms.EntitlementId = std::move(EntitlementId);
	Parms.bWasSuccessful = bWasSuccessful;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function b1-Managed.BGW_OnlineSubsystem.OnShowStoreUIClosedCS
// (Native, Event, Public, Protected, BlueprintEvent)
// Parameters:
// uint8                                   bPurchased                                             (Parm, NoDestructor, HasGetValueTypeHash)

void UBGW_OnlineSubsystem::OnShowStoreUIClosedCS(uint8 bPurchased)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BGW_OnlineSubsystem", "OnShowStoreUIClosedCS");

	Params::BGW_OnlineSubsystem_OnShowStoreUIClosedCS Parms{};

	Parms.bPurchased = bPurchased;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function b1-Managed.BED_FSMNode_GI_Loading_InitCollectionSpawnActorState.PostPropertyChanged
// (Native, Event, Public, BlueprintEvent)
// Parameters:
// class FString                           MemberName                                             (Parm, ZeroConstructor, HasGetValueTypeHash)
// class FString                           PropertyName                                           (Parm, ZeroConstructor, HasGetValueTypeHash)

void UBED_FSMNode_GI_Loading_InitCollectionSpawnActorState::PostPropertyChanged(const class FString& MemberName, const class FString& PropertyName)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BED_FSMNode_GI_Loading_InitCollectionSpawnActorState", "PostPropertyChanged");

	Params::BED_FSMNode_GI_Loading_InitCollectionSpawnActorState_PostPropertyChanged Parms{};

	Parms.MemberName = std::move(MemberName);
	Parms.PropertyName = std::move(PropertyName);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function b1-Managed.BED_FSMNode_GI_Loading_InitCollectionSpawnActorState.GetNodeDescriptionInCS
// (Native, Event, Public, HasOutParams, BlueprintEvent, Const)
// Parameters:
// class FString                           ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash)

class FString UBED_FSMNode_GI_Loading_InitCollectionSpawnActorState::GetNodeDescriptionInCS() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BED_FSMNode_GI_Loading_InitCollectionSpawnActorState", "GetNodeDescriptionInCS");

	Params::BED_FSMNode_GI_Loading_InitCollectionSpawnActorState_GetNodeDescriptionInCS Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function b1-Managed.BED_FSMNode_GI_Loading_InitLocalPlayerContainer.PostPropertyChanged
// (Native, Event, Public, BlueprintEvent)
// Parameters:
// class FString                           MemberName                                             (Parm, ZeroConstructor, HasGetValueTypeHash)
// class FString                           PropertyName                                           (Parm, ZeroConstructor, HasGetValueTypeHash)

void UBED_FSMNode_GI_Loading_InitLocalPlayerContainer::PostPropertyChanged(const class FString& MemberName, const class FString& PropertyName)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BED_FSMNode_GI_Loading_InitLocalPlayerContainer", "PostPropertyChanged");

	Params::BED_FSMNode_GI_Loading_InitLocalPlayerContainer_PostPropertyChanged Parms{};

	Parms.MemberName = std::move(MemberName);
	Parms.PropertyName = std::move(PropertyName);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function b1-Managed.BED_FSMNode_GI_Loading_InitLocalPlayerContainer.GetNodeDescriptionInCS
// (Native, Event, Public, HasOutParams, BlueprintEvent, Const)
// Parameters:
// class FString                           ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash)

class FString UBED_FSMNode_GI_Loading_InitLocalPlayerContainer::GetNodeDescriptionInCS() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BED_FSMNode_GI_Loading_InitLocalPlayerContainer", "GetNodeDescriptionInCS");

	Params::BED_FSMNode_GI_Loading_InitLocalPlayerContainer_GetNodeDescriptionInCS Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function b1-Managed.BED_FSMNode_GI_Loading_LoadCommLevel.PostPropertyChanged
// (Native, Event, Public, BlueprintEvent)
// Parameters:
// class FString                           MemberName                                             (Parm, ZeroConstructor, HasGetValueTypeHash)
// class FString                           PropertyName                                           (Parm, ZeroConstructor, HasGetValueTypeHash)

void UBED_FSMNode_GI_Loading_LoadCommLevel::PostPropertyChanged(const class FString& MemberName, const class FString& PropertyName)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BED_FSMNode_GI_Loading_LoadCommLevel", "PostPropertyChanged");

	Params::BED_FSMNode_GI_Loading_LoadCommLevel_PostPropertyChanged Parms{};

	Parms.MemberName = std::move(MemberName);
	Parms.PropertyName = std::move(PropertyName);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function b1-Managed.BED_FSMNode_GI_Loading_LoadCommLevel.GetNodeDescriptionInCS
// (Native, Event, Public, HasOutParams, BlueprintEvent, Const)
// Parameters:
// class FString                           ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash)

class FString UBED_FSMNode_GI_Loading_LoadCommLevel::GetNodeDescriptionInCS() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BED_FSMNode_GI_Loading_LoadCommLevel", "GetNodeDescriptionInCS");

	Params::BED_FSMNode_GI_Loading_LoadCommLevel_GetNodeDescriptionInCS Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function b1-Managed.BED_FSMNode_GI_Loading_LoadingUIFadeAway.PostPropertyChanged
// (Native, Event, Public, BlueprintEvent)
// Parameters:
// class FString                           MemberName                                             (Parm, ZeroConstructor, HasGetValueTypeHash)
// class FString                           PropertyName                                           (Parm, ZeroConstructor, HasGetValueTypeHash)

void UBED_FSMNode_GI_Loading_LoadingUIFadeAway::PostPropertyChanged(const class FString& MemberName, const class FString& PropertyName)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BED_FSMNode_GI_Loading_LoadingUIFadeAway", "PostPropertyChanged");

	Params::BED_FSMNode_GI_Loading_LoadingUIFadeAway_PostPropertyChanged Parms{};

	Parms.MemberName = std::move(MemberName);
	Parms.PropertyName = std::move(PropertyName);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function b1-Managed.BED_FSMNode_GI_Loading_LoadingUIFadeAway.GetNodeDescriptionInCS
// (Native, Event, Public, HasOutParams, BlueprintEvent, Const)
// Parameters:
// class FString                           ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash)

class FString UBED_FSMNode_GI_Loading_LoadingUIFadeAway::GetNodeDescriptionInCS() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BED_FSMNode_GI_Loading_LoadingUIFadeAway", "GetNodeDescriptionInCS");

	Params::BED_FSMNode_GI_Loading_LoadingUIFadeAway_GetNodeDescriptionInCS Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function b1-Managed.BED_FSMNode_GI_Loading_LoadingUILinearTime.PostPropertyChanged
// (Native, Event, Public, BlueprintEvent)
// Parameters:
// class FString                           MemberName                                             (Parm, ZeroConstructor, HasGetValueTypeHash)
// class FString                           PropertyName                                           (Parm, ZeroConstructor, HasGetValueTypeHash)

void UBED_FSMNode_GI_Loading_LoadingUILinearTime::PostPropertyChanged(const class FString& MemberName, const class FString& PropertyName)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BED_FSMNode_GI_Loading_LoadingUILinearTime", "PostPropertyChanged");

	Params::BED_FSMNode_GI_Loading_LoadingUILinearTime_PostPropertyChanged Parms{};

	Parms.MemberName = std::move(MemberName);
	Parms.PropertyName = std::move(PropertyName);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function b1-Managed.BED_FSMNode_GI_Loading_LoadingUILinearTime.GetNodeDescriptionInCS
// (Native, Event, Public, HasOutParams, BlueprintEvent, Const)
// Parameters:
// class FString                           ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash)

class FString UBED_FSMNode_GI_Loading_LoadingUILinearTime::GetNodeDescriptionInCS() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BED_FSMNode_GI_Loading_LoadingUILinearTime", "GetNodeDescriptionInCS");

	Params::BED_FSMNode_GI_Loading_LoadingUILinearTime_GetNodeDescriptionInCS Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function b1-Managed.BED_FSMNode_GI_Loading_MarkCanFinishLoopMovie.PostPropertyChanged
// (Native, Event, Public, BlueprintEvent)
// Parameters:
// class FString                           MemberName                                             (Parm, ZeroConstructor, HasGetValueTypeHash)
// class FString                           PropertyName                                           (Parm, ZeroConstructor, HasGetValueTypeHash)

void UBED_FSMNode_GI_Loading_MarkCanFinishLoopMovie::PostPropertyChanged(const class FString& MemberName, const class FString& PropertyName)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BED_FSMNode_GI_Loading_MarkCanFinishLoopMovie", "PostPropertyChanged");

	Params::BED_FSMNode_GI_Loading_MarkCanFinishLoopMovie_PostPropertyChanged Parms{};

	Parms.MemberName = std::move(MemberName);
	Parms.PropertyName = std::move(PropertyName);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function b1-Managed.BED_FSMNode_GI_Loading_MarkCanFinishLoopMovie.GetNodeDescriptionInCS
// (Native, Event, Public, HasOutParams, BlueprintEvent, Const)
// Parameters:
// class FString                           ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash)

class FString UBED_FSMNode_GI_Loading_MarkCanFinishLoopMovie::GetNodeDescriptionInCS() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BED_FSMNode_GI_Loading_MarkCanFinishLoopMovie", "GetNodeDescriptionInCS");

	Params::BED_FSMNode_GI_Loading_MarkCanFinishLoopMovie_GetNodeDescriptionInCS Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function b1-Managed.BED_FSMNode_GI_Loading_MarkNewGameplusReady.PostPropertyChanged
// (Native, Event, Public, BlueprintEvent)
// Parameters:
// class FString                           MemberName                                             (Parm, ZeroConstructor, HasGetValueTypeHash)
// class FString                           PropertyName                                           (Parm, ZeroConstructor, HasGetValueTypeHash)

void UBED_FSMNode_GI_Loading_MarkNewGameplusReady::PostPropertyChanged(const class FString& MemberName, const class FString& PropertyName)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BED_FSMNode_GI_Loading_MarkNewGameplusReady", "PostPropertyChanged");

	Params::BED_FSMNode_GI_Loading_MarkNewGameplusReady_PostPropertyChanged Parms{};

	Parms.MemberName = std::move(MemberName);
	Parms.PropertyName = std::move(PropertyName);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function b1-Managed.BED_FSMNode_GI_Loading_MarkNewGameplusReady.GetNodeDescriptionInCS
// (Native, Event, Public, HasOutParams, BlueprintEvent, Const)
// Parameters:
// class FString                           ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash)

class FString UBED_FSMNode_GI_Loading_MarkNewGameplusReady::GetNodeDescriptionInCS() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BED_FSMNode_GI_Loading_MarkNewGameplusReady", "GetNodeDescriptionInCS");

	Params::BED_FSMNode_GI_Loading_MarkNewGameplusReady_GetNodeDescriptionInCS Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function b1-Managed.BED_FSMNode_GI_Loading_NextChapterReqAndArchive.PostPropertyChanged
// (Native, Event, Public, BlueprintEvent)
// Parameters:
// class FString                           MemberName                                             (Parm, ZeroConstructor, HasGetValueTypeHash)
// class FString                           PropertyName                                           (Parm, ZeroConstructor, HasGetValueTypeHash)

void UBED_FSMNode_GI_Loading_NextChapterReqAndArchive::PostPropertyChanged(const class FString& MemberName, const class FString& PropertyName)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BED_FSMNode_GI_Loading_NextChapterReqAndArchive", "PostPropertyChanged");

	Params::BED_FSMNode_GI_Loading_NextChapterReqAndArchive_PostPropertyChanged Parms{};

	Parms.MemberName = std::move(MemberName);
	Parms.PropertyName = std::move(PropertyName);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function b1-Managed.BED_FSMNode_GI_Loading_NextChapterReqAndArchive.GetNodeDescriptionInCS
// (Native, Event, Public, HasOutParams, BlueprintEvent, Const)
// Parameters:
// class FString                           ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash)

class FString UBED_FSMNode_GI_Loading_NextChapterReqAndArchive::GetNodeDescriptionInCS() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BED_FSMNode_GI_Loading_NextChapterReqAndArchive", "GetNodeDescriptionInCS");

	Params::BED_FSMNode_GI_Loading_NextChapterReqAndArchive_GetNodeDescriptionInCS Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function b1-Managed.BED_FSMNode_GI_Loading_OpenLevelByName.PostPropertyChanged
// (Native, Event, Public, BlueprintEvent)
// Parameters:
// class FString                           MemberName                                             (Parm, ZeroConstructor, HasGetValueTypeHash)
// class FString                           PropertyName                                           (Parm, ZeroConstructor, HasGetValueTypeHash)

void UBED_FSMNode_GI_Loading_OpenLevelByName::PostPropertyChanged(const class FString& MemberName, const class FString& PropertyName)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BED_FSMNode_GI_Loading_OpenLevelByName", "PostPropertyChanged");

	Params::BED_FSMNode_GI_Loading_OpenLevelByName_PostPropertyChanged Parms{};

	Parms.MemberName = std::move(MemberName);
	Parms.PropertyName = std::move(PropertyName);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function b1-Managed.BED_FSMNode_GI_Loading_OpenLevelByName.GetNodeDescriptionInCS
// (Native, Event, Public, HasOutParams, BlueprintEvent, Const)
// Parameters:
// class FString                           ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash)

class FString UBED_FSMNode_GI_Loading_OpenLevelByName::GetNodeDescriptionInCS() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BED_FSMNode_GI_Loading_OpenLevelByName", "GetNodeDescriptionInCS");

	Params::BED_FSMNode_GI_Loading_OpenLevelByName_GetNodeDescriptionInCS Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function b1-Managed.BED_FSMNode_GI_Loading_OpenLevelDefaultBattle.PostPropertyChanged
// (Native, Event, Public, BlueprintEvent)
// Parameters:
// class FString                           MemberName                                             (Parm, ZeroConstructor, HasGetValueTypeHash)
// class FString                           PropertyName                                           (Parm, ZeroConstructor, HasGetValueTypeHash)

void UBED_FSMNode_GI_Loading_OpenLevelDefaultBattle::PostPropertyChanged(const class FString& MemberName, const class FString& PropertyName)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BED_FSMNode_GI_Loading_OpenLevelDefaultBattle", "PostPropertyChanged");

	Params::BED_FSMNode_GI_Loading_OpenLevelDefaultBattle_PostPropertyChanged Parms{};

	Parms.MemberName = std::move(MemberName);
	Parms.PropertyName = std::move(PropertyName);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function b1-Managed.BED_FSMNode_GI_Loading_OpenLevelDefaultBattle.GetNodeDescriptionInCS
// (Native, Event, Public, HasOutParams, BlueprintEvent, Const)
// Parameters:
// class FString                           ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash)

class FString UBED_FSMNode_GI_Loading_OpenLevelDefaultBattle::GetNodeDescriptionInCS() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BED_FSMNode_GI_Loading_OpenLevelDefaultBattle", "GetNodeDescriptionInCS");

	Params::BED_FSMNode_GI_Loading_OpenLevelDefaultBattle_GetNodeDescriptionInCS Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function b1-Managed.BED_FSMNode_GI_Loading_OpenLevelStartUp.PostPropertyChanged
// (Native, Event, Public, BlueprintEvent)
// Parameters:
// class FString                           MemberName                                             (Parm, ZeroConstructor, HasGetValueTypeHash)
// class FString                           PropertyName                                           (Parm, ZeroConstructor, HasGetValueTypeHash)

void UBED_FSMNode_GI_Loading_OpenLevelStartUp::PostPropertyChanged(const class FString& MemberName, const class FString& PropertyName)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BED_FSMNode_GI_Loading_OpenLevelStartUp", "PostPropertyChanged");

	Params::BED_FSMNode_GI_Loading_OpenLevelStartUp_PostPropertyChanged Parms{};

	Parms.MemberName = std::move(MemberName);
	Parms.PropertyName = std::move(PropertyName);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function b1-Managed.BED_FSMNode_GI_Loading_OpenLevelStartUp.GetNodeDescriptionInCS
// (Native, Event, Public, HasOutParams, BlueprintEvent, Const)
// Parameters:
// class FString                           ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash)

class FString UBED_FSMNode_GI_Loading_OpenLevelStartUp::GetNodeDescriptionInCS() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BED_FSMNode_GI_Loading_OpenLevelStartUp", "GetNodeDescriptionInCS");

	Params::BED_FSMNode_GI_Loading_OpenLevelStartUp_GetNodeDescriptionInCS Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function b1-Managed.BED_FSMNode_GI_Loading_PauseGame.PostPropertyChanged
// (Native, Event, Public, BlueprintEvent)
// Parameters:
// class FString                           MemberName                                             (Parm, ZeroConstructor, HasGetValueTypeHash)
// class FString                           PropertyName                                           (Parm, ZeroConstructor, HasGetValueTypeHash)

void UBED_FSMNode_GI_Loading_PauseGame::PostPropertyChanged(const class FString& MemberName, const class FString& PropertyName)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BED_FSMNode_GI_Loading_PauseGame", "PostPropertyChanged");

	Params::BED_FSMNode_GI_Loading_PauseGame_PostPropertyChanged Parms{};

	Parms.MemberName = std::move(MemberName);
	Parms.PropertyName = std::move(PropertyName);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function b1-Managed.BED_FSMNode_GI_Loading_PauseGame.GetNodeDescriptionInCS
// (Native, Event, Public, HasOutParams, BlueprintEvent, Const)
// Parameters:
// class FString                           ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash)

class FString UBED_FSMNode_GI_Loading_PauseGame::GetNodeDescriptionInCS() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BED_FSMNode_GI_Loading_PauseGame", "GetNodeDescriptionInCS");

	Params::BED_FSMNode_GI_Loading_PauseGame_GetNodeDescriptionInCS Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function b1-Managed.BED_FSMNode_GI_Loading_PlayerDataInitPreEnterLevel.PostPropertyChanged
// (Native, Event, Public, BlueprintEvent)
// Parameters:
// class FString                           MemberName                                             (Parm, ZeroConstructor, HasGetValueTypeHash)
// class FString                           PropertyName                                           (Parm, ZeroConstructor, HasGetValueTypeHash)

void UBED_FSMNode_GI_Loading_PlayerDataInitPreEnterLevel::PostPropertyChanged(const class FString& MemberName, const class FString& PropertyName)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BED_FSMNode_GI_Loading_PlayerDataInitPreEnterLevel", "PostPropertyChanged");

	Params::BED_FSMNode_GI_Loading_PlayerDataInitPreEnterLevel_PostPropertyChanged Parms{};

	Parms.MemberName = std::move(MemberName);
	Parms.PropertyName = std::move(PropertyName);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function b1-Managed.BED_FSMNode_GI_Loading_PlayerDataInitPreEnterLevel.GetNodeDescriptionInCS
// (Native, Event, Public, HasOutParams, BlueprintEvent, Const)
// Parameters:
// class FString                           ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash)

class FString UBED_FSMNode_GI_Loading_PlayerDataInitPreEnterLevel::GetNodeDescriptionInCS() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BED_FSMNode_GI_Loading_PlayerDataInitPreEnterLevel", "GetNodeDescriptionInCS");

	Params::BED_FSMNode_GI_Loading_PlayerDataInitPreEnterLevel_GetNodeDescriptionInCS Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function b1-Managed.BED_FSMNode_GI_Loading_PlayerTeleportToTemplatetargetPos.PostPropertyChanged
// (Native, Event, Public, BlueprintEvent)
// Parameters:
// class FString                           MemberName                                             (Parm, ZeroConstructor, HasGetValueTypeHash)
// class FString                           PropertyName                                           (Parm, ZeroConstructor, HasGetValueTypeHash)

void UBED_FSMNode_GI_Loading_PlayerTeleportToTemplatetargetPos::PostPropertyChanged(const class FString& MemberName, const class FString& PropertyName)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BED_FSMNode_GI_Loading_PlayerTeleportToTemplatetargetPos", "PostPropertyChanged");

	Params::BED_FSMNode_GI_Loading_PlayerTeleportToTemplatetargetPos_PostPropertyChanged Parms{};

	Parms.MemberName = std::move(MemberName);
	Parms.PropertyName = std::move(PropertyName);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function b1-Managed.BED_FSMNode_GI_Loading_PlayerTeleportToTemplatetargetPos.GetNodeDescriptionInCS
// (Native, Event, Public, HasOutParams, BlueprintEvent, Const)
// Parameters:
// class FString                           ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash)

class FString UBED_FSMNode_GI_Loading_PlayerTeleportToTemplatetargetPos::GetNodeDescriptionInCS() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BED_FSMNode_GI_Loading_PlayerTeleportToTemplatetargetPos", "GetNodeDescriptionInCS");

	Params::BED_FSMNode_GI_Loading_PlayerTeleportToTemplatetargetPos_GetNodeDescriptionInCS Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function b1-Managed.BED_FSMNode_GI_Loading_PlayGoDownloadIncompleteImpl.PostPropertyChanged
// (Native, Event, Public, BlueprintEvent)
// Parameters:
// class FString                           MemberName                                             (Parm, ZeroConstructor, HasGetValueTypeHash)
// class FString                           PropertyName                                           (Parm, ZeroConstructor, HasGetValueTypeHash)

void UBED_FSMNode_GI_Loading_PlayGoDownloadIncompleteImpl::PostPropertyChanged(const class FString& MemberName, const class FString& PropertyName)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BED_FSMNode_GI_Loading_PlayGoDownloadIncompleteImpl", "PostPropertyChanged");

	Params::BED_FSMNode_GI_Loading_PlayGoDownloadIncompleteImpl_PostPropertyChanged Parms{};

	Parms.MemberName = std::move(MemberName);
	Parms.PropertyName = std::move(PropertyName);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function b1-Managed.BED_FSMNode_GI_Loading_PlayGoDownloadIncompleteImpl.GetNodeDescriptionInCS
// (Native, Event, Public, HasOutParams, BlueprintEvent, Const)
// Parameters:
// class FString                           ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash)

class FString UBED_FSMNode_GI_Loading_PlayGoDownloadIncompleteImpl::GetNodeDescriptionInCS() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BED_FSMNode_GI_Loading_PlayGoDownloadIncompleteImpl", "GetNodeDescriptionInCS");

	Params::BED_FSMNode_GI_Loading_PlayGoDownloadIncompleteImpl_GetNodeDescriptionInCS Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function b1-Managed.BGWDataAsset_MagicallyChangeConfig.ReadConfigFromUnit
// (Native, Public, BlueprintCallable)
// Parameters:
// class ABUTamerActor*                    Tamer                                                  (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UBGWDataAsset_MagicallyChangeConfig::ReadConfigFromUnit(class ABUTamerActor* Tamer)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BGWDataAsset_MagicallyChangeConfig", "ReadConfigFromUnit");

	Params::BGWDataAsset_MagicallyChangeConfig_ReadConfigFromUnit Parms{};

	Parms.Tamer = Tamer;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function b1-Managed.BED_FSMNode_GI_Loading_PostSeamlessLevelTravel.PostPropertyChanged
// (Native, Event, Public, BlueprintEvent)
// Parameters:
// class FString                           MemberName                                             (Parm, ZeroConstructor, HasGetValueTypeHash)
// class FString                           PropertyName                                           (Parm, ZeroConstructor, HasGetValueTypeHash)

void UBED_FSMNode_GI_Loading_PostSeamlessLevelTravel::PostPropertyChanged(const class FString& MemberName, const class FString& PropertyName)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BED_FSMNode_GI_Loading_PostSeamlessLevelTravel", "PostPropertyChanged");

	Params::BED_FSMNode_GI_Loading_PostSeamlessLevelTravel_PostPropertyChanged Parms{};

	Parms.MemberName = std::move(MemberName);
	Parms.PropertyName = std::move(PropertyName);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function b1-Managed.BED_FSMNode_GI_Loading_PostSeamlessLevelTravel.GetNodeDescriptionInCS
// (Native, Event, Public, HasOutParams, BlueprintEvent, Const)
// Parameters:
// class FString                           ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash)

class FString UBED_FSMNode_GI_Loading_PostSeamlessLevelTravel::GetNodeDescriptionInCS() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BED_FSMNode_GI_Loading_PostSeamlessLevelTravel", "GetNodeDescriptionInCS");

	Params::BED_FSMNode_GI_Loading_PostSeamlessLevelTravel_GetNodeDescriptionInCS Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function b1-Managed.BED_FSMNode_GI_Loading_PreLogin.PostPropertyChanged
// (Native, Event, Public, BlueprintEvent)
// Parameters:
// class FString                           MemberName                                             (Parm, ZeroConstructor, HasGetValueTypeHash)
// class FString                           PropertyName                                           (Parm, ZeroConstructor, HasGetValueTypeHash)

void UBED_FSMNode_GI_Loading_PreLogin::PostPropertyChanged(const class FString& MemberName, const class FString& PropertyName)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BED_FSMNode_GI_Loading_PreLogin", "PostPropertyChanged");

	Params::BED_FSMNode_GI_Loading_PreLogin_PostPropertyChanged Parms{};

	Parms.MemberName = std::move(MemberName);
	Parms.PropertyName = std::move(PropertyName);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function b1-Managed.BED_FSMNode_GI_Loading_PreLogin.GetNodeDescriptionInCS
// (Native, Event, Public, HasOutParams, BlueprintEvent, Const)
// Parameters:
// class FString                           ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash)

class FString UBED_FSMNode_GI_Loading_PreLogin::GetNodeDescriptionInCS() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BED_FSMNode_GI_Loading_PreLogin", "GetNodeDescriptionInCS");

	Params::BED_FSMNode_GI_Loading_PreLogin_GetNodeDescriptionInCS Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function b1-Managed.BED_FSMNode_GI_Loading_PrepareFadeAway.PostPropertyChanged
// (Native, Event, Public, BlueprintEvent)
// Parameters:
// class FString                           MemberName                                             (Parm, ZeroConstructor, HasGetValueTypeHash)
// class FString                           PropertyName                                           (Parm, ZeroConstructor, HasGetValueTypeHash)

void UBED_FSMNode_GI_Loading_PrepareFadeAway::PostPropertyChanged(const class FString& MemberName, const class FString& PropertyName)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BED_FSMNode_GI_Loading_PrepareFadeAway", "PostPropertyChanged");

	Params::BED_FSMNode_GI_Loading_PrepareFadeAway_PostPropertyChanged Parms{};

	Parms.MemberName = std::move(MemberName);
	Parms.PropertyName = std::move(PropertyName);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function b1-Managed.BED_FSMNode_GI_Loading_PrepareFadeAway.GetNodeDescriptionInCS
// (Native, Event, Public, HasOutParams, BlueprintEvent, Const)
// Parameters:
// class FString                           ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash)

class FString UBED_FSMNode_GI_Loading_PrepareFadeAway::GetNodeDescriptionInCS() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BED_FSMNode_GI_Loading_PrepareFadeAway", "GetNodeDescriptionInCS");

	Params::BED_FSMNode_GI_Loading_PrepareFadeAway_GetNodeDescriptionInCS Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function b1-Managed.BED_FSMNode_GI_Loading_ReadLatestArchive.PostPropertyChanged
// (Native, Event, Public, BlueprintEvent)
// Parameters:
// class FString                           MemberName                                             (Parm, ZeroConstructor, HasGetValueTypeHash)
// class FString                           PropertyName                                           (Parm, ZeroConstructor, HasGetValueTypeHash)

void UBED_FSMNode_GI_Loading_ReadLatestArchive::PostPropertyChanged(const class FString& MemberName, const class FString& PropertyName)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BED_FSMNode_GI_Loading_ReadLatestArchive", "PostPropertyChanged");

	Params::BED_FSMNode_GI_Loading_ReadLatestArchive_PostPropertyChanged Parms{};

	Parms.MemberName = std::move(MemberName);
	Parms.PropertyName = std::move(PropertyName);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function b1-Managed.BED_FSMNode_GI_Loading_ReadLatestArchive.GetNodeDescriptionInCS
// (Native, Event, Public, HasOutParams, BlueprintEvent, Const)
// Parameters:
// class FString                           ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash)

class FString UBED_FSMNode_GI_Loading_ReadLatestArchive::GetNodeDescriptionInCS() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BED_FSMNode_GI_Loading_ReadLatestArchive", "GetNodeDescriptionInCS");

	Params::BED_FSMNode_GI_Loading_ReadLatestArchive_GetNodeDescriptionInCS Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function b1-Managed.BED_FSMNode_GI_Loading_RequestFadeAway.PostPropertyChanged
// (Native, Event, Public, BlueprintEvent)
// Parameters:
// class FString                           MemberName                                             (Parm, ZeroConstructor, HasGetValueTypeHash)
// class FString                           PropertyName                                           (Parm, ZeroConstructor, HasGetValueTypeHash)

void UBED_FSMNode_GI_Loading_RequestFadeAway::PostPropertyChanged(const class FString& MemberName, const class FString& PropertyName)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BED_FSMNode_GI_Loading_RequestFadeAway", "PostPropertyChanged");

	Params::BED_FSMNode_GI_Loading_RequestFadeAway_PostPropertyChanged Parms{};

	Parms.MemberName = std::move(MemberName);
	Parms.PropertyName = std::move(PropertyName);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function b1-Managed.BED_FSMNode_GI_Loading_RequestFadeAway.GetNodeDescriptionInCS
// (Native, Event, Public, HasOutParams, BlueprintEvent, Const)
// Parameters:
// class FString                           ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash)

class FString UBED_FSMNode_GI_Loading_RequestFadeAway::GetNodeDescriptionInCS() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BED_FSMNode_GI_Loading_RequestFadeAway", "GetNodeDescriptionInCS");

	Params::BED_FSMNode_GI_Loading_RequestFadeAway_GetNodeDescriptionInCS Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function b1-Managed.BED_FSMNode_GI_Loading_RequestTemplateLoadArchiveData.PostPropertyChanged
// (Native, Event, Public, BlueprintEvent)
// Parameters:
// class FString                           MemberName                                             (Parm, ZeroConstructor, HasGetValueTypeHash)
// class FString                           PropertyName                                           (Parm, ZeroConstructor, HasGetValueTypeHash)

void UBED_FSMNode_GI_Loading_RequestTemplateLoadArchiveData::PostPropertyChanged(const class FString& MemberName, const class FString& PropertyName)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BED_FSMNode_GI_Loading_RequestTemplateLoadArchiveData", "PostPropertyChanged");

	Params::BED_FSMNode_GI_Loading_RequestTemplateLoadArchiveData_PostPropertyChanged Parms{};

	Parms.MemberName = std::move(MemberName);
	Parms.PropertyName = std::move(PropertyName);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function b1-Managed.BED_FSMNode_GI_Loading_RequestTemplateLoadArchiveData.GetNodeDescriptionInCS
// (Native, Event, Public, HasOutParams, BlueprintEvent, Const)
// Parameters:
// class FString                           ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash)

class FString UBED_FSMNode_GI_Loading_RequestTemplateLoadArchiveData::GetNodeDescriptionInCS() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BED_FSMNode_GI_Loading_RequestTemplateLoadArchiveData", "GetNodeDescriptionInCS");

	Params::BED_FSMNode_GI_Loading_RequestTemplateLoadArchiveData_GetNodeDescriptionInCS Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function b1-Managed.BED_FSMNode_GI_Loading_RequestTemplateOpenLevel.PostPropertyChanged
// (Native, Event, Public, BlueprintEvent)
// Parameters:
// class FString                           MemberName                                             (Parm, ZeroConstructor, HasGetValueTypeHash)
// class FString                           PropertyName                                           (Parm, ZeroConstructor, HasGetValueTypeHash)

void UBED_FSMNode_GI_Loading_RequestTemplateOpenLevel::PostPropertyChanged(const class FString& MemberName, const class FString& PropertyName)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BED_FSMNode_GI_Loading_RequestTemplateOpenLevel", "PostPropertyChanged");

	Params::BED_FSMNode_GI_Loading_RequestTemplateOpenLevel_PostPropertyChanged Parms{};

	Parms.MemberName = std::move(MemberName);
	Parms.PropertyName = std::move(PropertyName);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function b1-Managed.BED_FSMNode_GI_Loading_RequestTemplateOpenLevel.GetNodeDescriptionInCS
// (Native, Event, Public, HasOutParams, BlueprintEvent, Const)
// Parameters:
// class FString                           ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash)

class FString UBED_FSMNode_GI_Loading_RequestTemplateOpenLevel::GetNodeDescriptionInCS() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BED_FSMNode_GI_Loading_RequestTemplateOpenLevel", "GetNodeDescriptionInCS");

	Params::BED_FSMNode_GI_Loading_RequestTemplateOpenLevel_GetNodeDescriptionInCS Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function b1-Managed.BED_QuestNode_RunProcessGraph.PostPropertyChanged
// (Native, Event, Public, BlueprintEvent)
// Parameters:
// class FString                           MemberName                                             (Parm, ZeroConstructor, HasGetValueTypeHash)
// class FString                           PropertyName                                           (Parm, ZeroConstructor, HasGetValueTypeHash)

void UBED_QuestNode_RunProcessGraph::PostPropertyChanged(const class FString& MemberName, const class FString& PropertyName)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BED_QuestNode_RunProcessGraph", "PostPropertyChanged");

	Params::BED_QuestNode_RunProcessGraph_PostPropertyChanged Parms{};

	Parms.MemberName = std::move(MemberName);
	Parms.PropertyName = std::move(PropertyName);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function b1-Managed.BED_QuestNode_RunProcessGraph.PrePropertyChanged
// (Native, Event, Public, BlueprintEvent)
// Parameters:
// class FString                           PropertyName                                           (Parm, ZeroConstructor, HasGetValueTypeHash)

void UBED_QuestNode_RunProcessGraph::PrePropertyChanged(const class FString& PropertyName)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BED_QuestNode_RunProcessGraph", "PrePropertyChanged");

	Params::BED_QuestNode_RunProcessGraph_PrePropertyChanged Parms{};

	Parms.PropertyName = std::move(PropertyName);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function b1-Managed.BED_QuestNode_RunProcessGraph.GetAssetToEditInCS
// (Native, Event, Public, HasOutParams, BlueprintEvent)
// Parameters:
// class UObject*                          ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

class UObject* UBED_QuestNode_RunProcessGraph::GetAssetToEditInCS()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BED_QuestNode_RunProcessGraph", "GetAssetToEditInCS");

	Params::BED_QuestNode_RunProcessGraph_GetAssetToEditInCS Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function b1-Managed.BED_QuestNode_RunProcessGraph.GetNodeDescriptionInCS
// (Native, Event, Public, HasOutParams, BlueprintEvent, Const)
// Parameters:
// class FString                           ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash)

class FString UBED_QuestNode_RunProcessGraph::GetNodeDescriptionInCS() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BED_QuestNode_RunProcessGraph", "GetNodeDescriptionInCS");

	Params::BED_QuestNode_RunProcessGraph_GetNodeDescriptionInCS Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function b1-Managed.BED_FSMNode_GI_Loading_RequestTemplatePerformActionsFromArchive.PostPropertyChanged
// (Native, Event, Public, BlueprintEvent)
// Parameters:
// class FString                           MemberName                                             (Parm, ZeroConstructor, HasGetValueTypeHash)
// class FString                           PropertyName                                           (Parm, ZeroConstructor, HasGetValueTypeHash)

void UBED_FSMNode_GI_Loading_RequestTemplatePerformActionsFromArchive::PostPropertyChanged(const class FString& MemberName, const class FString& PropertyName)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BED_FSMNode_GI_Loading_RequestTemplatePerformActionsFromArchive", "PostPropertyChanged");

	Params::BED_FSMNode_GI_Loading_RequestTemplatePerformActionsFromArchive_PostPropertyChanged Parms{};

	Parms.MemberName = std::move(MemberName);
	Parms.PropertyName = std::move(PropertyName);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function b1-Managed.BED_FSMNode_GI_Loading_RequestTemplatePerformActionsFromArchive.GetNodeDescriptionInCS
// (Native, Event, Public, HasOutParams, BlueprintEvent, Const)
// Parameters:
// class FString                           ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash)

class FString UBED_FSMNode_GI_Loading_RequestTemplatePerformActionsFromArchive::GetNodeDescriptionInCS() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BED_FSMNode_GI_Loading_RequestTemplatePerformActionsFromArchive", "GetNodeDescriptionInCS");

	Params::BED_FSMNode_GI_Loading_RequestTemplatePerformActionsFromArchive_GetNodeDescriptionInCS Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function b1-Managed.BED_FSMNode_GI_Loading_RequestTemplatePostGSLoginFinish.PostPropertyChanged
// (Native, Event, Public, BlueprintEvent)
// Parameters:
// class FString                           MemberName                                             (Parm, ZeroConstructor, HasGetValueTypeHash)
// class FString                           PropertyName                                           (Parm, ZeroConstructor, HasGetValueTypeHash)

void UBED_FSMNode_GI_Loading_RequestTemplatePostGSLoginFinish::PostPropertyChanged(const class FString& MemberName, const class FString& PropertyName)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BED_FSMNode_GI_Loading_RequestTemplatePostGSLoginFinish", "PostPropertyChanged");

	Params::BED_FSMNode_GI_Loading_RequestTemplatePostGSLoginFinish_PostPropertyChanged Parms{};

	Parms.MemberName = std::move(MemberName);
	Parms.PropertyName = std::move(PropertyName);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function b1-Managed.BED_FSMNode_GI_Loading_RequestTemplatePostGSLoginFinish.GetNodeDescriptionInCS
// (Native, Event, Public, HasOutParams, BlueprintEvent, Const)
// Parameters:
// class FString                           ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash)

class FString UBED_FSMNode_GI_Loading_RequestTemplatePostGSLoginFinish::GetNodeDescriptionInCS() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BED_FSMNode_GI_Loading_RequestTemplatePostGSLoginFinish", "GetNodeDescriptionInCS");

	Params::BED_FSMNode_GI_Loading_RequestTemplatePostGSLoginFinish_GetNodeDescriptionInCS Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function b1-Managed.BED_FSMNode_GI_Loading_RequestTemplatePreLeaveLevel.PostPropertyChanged
// (Native, Event, Public, BlueprintEvent)
// Parameters:
// class FString                           MemberName                                             (Parm, ZeroConstructor, HasGetValueTypeHash)
// class FString                           PropertyName                                           (Parm, ZeroConstructor, HasGetValueTypeHash)

void UBED_FSMNode_GI_Loading_RequestTemplatePreLeaveLevel::PostPropertyChanged(const class FString& MemberName, const class FString& PropertyName)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BED_FSMNode_GI_Loading_RequestTemplatePreLeaveLevel", "PostPropertyChanged");

	Params::BED_FSMNode_GI_Loading_RequestTemplatePreLeaveLevel_PostPropertyChanged Parms{};

	Parms.MemberName = std::move(MemberName);
	Parms.PropertyName = std::move(PropertyName);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function b1-Managed.BED_FSMNode_GI_Loading_RequestTemplatePreLeaveLevel.GetNodeDescriptionInCS
// (Native, Event, Public, HasOutParams, BlueprintEvent, Const)
// Parameters:
// class FString                           ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash)

class FString UBED_FSMNode_GI_Loading_RequestTemplatePreLeaveLevel::GetNodeDescriptionInCS() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BED_FSMNode_GI_Loading_RequestTemplatePreLeaveLevel", "GetNodeDescriptionInCS");

	Params::BED_FSMNode_GI_Loading_RequestTemplatePreLeaveLevel_GetNodeDescriptionInCS Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function b1-Managed.BED_FSMNode_GI_Loading_RequestTemplateTravelLevelBegin.PostPropertyChanged
// (Native, Event, Public, BlueprintEvent)
// Parameters:
// class FString                           MemberName                                             (Parm, ZeroConstructor, HasGetValueTypeHash)
// class FString                           PropertyName                                           (Parm, ZeroConstructor, HasGetValueTypeHash)

void UBED_FSMNode_GI_Loading_RequestTemplateTravelLevelBegin::PostPropertyChanged(const class FString& MemberName, const class FString& PropertyName)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BED_FSMNode_GI_Loading_RequestTemplateTravelLevelBegin", "PostPropertyChanged");

	Params::BED_FSMNode_GI_Loading_RequestTemplateTravelLevelBegin_PostPropertyChanged Parms{};

	Parms.MemberName = std::move(MemberName);
	Parms.PropertyName = std::move(PropertyName);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function b1-Managed.BED_FSMNode_GI_Loading_RequestTemplateTravelLevelBegin.GetNodeDescriptionInCS
// (Native, Event, Public, HasOutParams, BlueprintEvent, Const)
// Parameters:
// class FString                           ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash)

class FString UBED_FSMNode_GI_Loading_RequestTemplateTravelLevelBegin::GetNodeDescriptionInCS() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BED_FSMNode_GI_Loading_RequestTemplateTravelLevelBegin", "GetNodeDescriptionInCS");

	Params::BED_FSMNode_GI_Loading_RequestTemplateTravelLevelBegin_GetNodeDescriptionInCS Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function b1-Managed.BED_FSMNode_GI_Loading_RequestTemplateTravelLevelEnd.PostPropertyChanged
// (Native, Event, Public, BlueprintEvent)
// Parameters:
// class FString                           MemberName                                             (Parm, ZeroConstructor, HasGetValueTypeHash)
// class FString                           PropertyName                                           (Parm, ZeroConstructor, HasGetValueTypeHash)

void UBED_FSMNode_GI_Loading_RequestTemplateTravelLevelEnd::PostPropertyChanged(const class FString& MemberName, const class FString& PropertyName)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BED_FSMNode_GI_Loading_RequestTemplateTravelLevelEnd", "PostPropertyChanged");

	Params::BED_FSMNode_GI_Loading_RequestTemplateTravelLevelEnd_PostPropertyChanged Parms{};

	Parms.MemberName = std::move(MemberName);
	Parms.PropertyName = std::move(PropertyName);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function b1-Managed.BED_FSMNode_GI_Loading_RequestTemplateTravelLevelEnd.GetNodeDescriptionInCS
// (Native, Event, Public, HasOutParams, BlueprintEvent, Const)
// Parameters:
// class FString                           ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash)

class FString UBED_FSMNode_GI_Loading_RequestTemplateTravelLevelEnd::GetNodeDescriptionInCS() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BED_FSMNode_GI_Loading_RequestTemplateTravelLevelEnd", "GetNodeDescriptionInCS");

	Params::BED_FSMNode_GI_Loading_RequestTemplateTravelLevelEnd_GetNodeDescriptionInCS Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function b1-Managed.BED_FSMNode_GI_Loading_Reset820DemoGameData.PostPropertyChanged
// (Native, Event, Public, BlueprintEvent)
// Parameters:
// class FString                           MemberName                                             (Parm, ZeroConstructor, HasGetValueTypeHash)
// class FString                           PropertyName                                           (Parm, ZeroConstructor, HasGetValueTypeHash)

void UBED_FSMNode_GI_Loading_Reset820DemoGameData::PostPropertyChanged(const class FString& MemberName, const class FString& PropertyName)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BED_FSMNode_GI_Loading_Reset820DemoGameData", "PostPropertyChanged");

	Params::BED_FSMNode_GI_Loading_Reset820DemoGameData_PostPropertyChanged Parms{};

	Parms.MemberName = std::move(MemberName);
	Parms.PropertyName = std::move(PropertyName);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function b1-Managed.BED_FSMNode_GI_Loading_Reset820DemoGameData.GetNodeDescriptionInCS
// (Native, Event, Public, HasOutParams, BlueprintEvent, Const)
// Parameters:
// class FString                           ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash)

class FString UBED_FSMNode_GI_Loading_Reset820DemoGameData::GetNodeDescriptionInCS() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BED_FSMNode_GI_Loading_Reset820DemoGameData", "GetNodeDescriptionInCS");

	Params::BED_FSMNode_GI_Loading_Reset820DemoGameData_GetNodeDescriptionInCS Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function b1-Managed.BED_FSMNode_GI_Loading_ResetGameInstanceData.PostPropertyChanged
// (Native, Event, Public, BlueprintEvent)
// Parameters:
// class FString                           MemberName                                             (Parm, ZeroConstructor, HasGetValueTypeHash)
// class FString                           PropertyName                                           (Parm, ZeroConstructor, HasGetValueTypeHash)

void UBED_FSMNode_GI_Loading_ResetGameInstanceData::PostPropertyChanged(const class FString& MemberName, const class FString& PropertyName)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BED_FSMNode_GI_Loading_ResetGameInstanceData", "PostPropertyChanged");

	Params::BED_FSMNode_GI_Loading_ResetGameInstanceData_PostPropertyChanged Parms{};

	Parms.MemberName = std::move(MemberName);
	Parms.PropertyName = std::move(PropertyName);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function b1-Managed.BED_FSMNode_GI_Loading_ResetGameInstanceData.GetNodeDescriptionInCS
// (Native, Event, Public, HasOutParams, BlueprintEvent, Const)
// Parameters:
// class FString                           ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash)

class FString UBED_FSMNode_GI_Loading_ResetGameInstanceData::GetNodeDescriptionInCS() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BED_FSMNode_GI_Loading_ResetGameInstanceData", "GetNodeDescriptionInCS");

	Params::BED_FSMNode_GI_Loading_ResetGameInstanceData_GetNodeDescriptionInCS Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function b1-Managed.BED_FSMNode_GI_Loading_ResumeGame.PostPropertyChanged
// (Native, Event, Public, BlueprintEvent)
// Parameters:
// class FString                           MemberName                                             (Parm, ZeroConstructor, HasGetValueTypeHash)
// class FString                           PropertyName                                           (Parm, ZeroConstructor, HasGetValueTypeHash)

void UBED_FSMNode_GI_Loading_ResumeGame::PostPropertyChanged(const class FString& MemberName, const class FString& PropertyName)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BED_FSMNode_GI_Loading_ResumeGame", "PostPropertyChanged");

	Params::BED_FSMNode_GI_Loading_ResumeGame_PostPropertyChanged Parms{};

	Parms.MemberName = std::move(MemberName);
	Parms.PropertyName = std::move(PropertyName);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function b1-Managed.BED_FSMNode_GI_Loading_ResumeGame.GetNodeDescriptionInCS
// (Native, Event, Public, HasOutParams, BlueprintEvent, Const)
// Parameters:
// class FString                           ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash)

class FString UBED_FSMNode_GI_Loading_ResumeGame::GetNodeDescriptionInCS() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BED_FSMNode_GI_Loading_ResumeGame", "GetNodeDescriptionInCS");

	Params::BED_FSMNode_GI_Loading_ResumeGame_GetNodeDescriptionInCS Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function b1-Managed.BGG_GameMode.GetSeamlessTravelActorListCS
// (Native, Event, Public, HasOutParams, BlueprintEvent)
// Parameters:
// uint8                                   bToTransition                                          (Parm, NoDestructor, HasGetValueTypeHash)
// TArray<class AActor*>                   ActorList                                              (Parm, OutParm)

void ABGG_GameMode::GetSeamlessTravelActorListCS(uint8 bToTransition, TArray<class AActor*>* ActorList)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BGG_GameMode", "GetSeamlessTravelActorListCS");

	Params::BGG_GameMode_GetSeamlessTravelActorListCS Parms{};

	Parms.bToTransition = bToTransition;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	if (ActorList != nullptr)
		*ActorList = std::move(Parms.ActorList);
}


// Function b1-Managed.BGG_GameMode.PostSeamlessTravelCS
// (Native, Event, Public, BlueprintEvent)

void ABGG_GameMode::PostSeamlessTravelCS()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BGG_GameMode", "PostSeamlessTravelCS");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function b1-Managed.BGG_GameMode.ChoosePlayerStart
// (Native, Event, Public, HasOutParams, BlueprintEvent)
// Parameters:
// class AController*                      Player                                                 (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// class AActor*                           ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

class AActor* ABGG_GameMode::ChoosePlayerStart(class AController* Player)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BGG_GameMode", "ChoosePlayerStart");

	Params::BGG_GameMode_ChoosePlayerStart Parms{};

	Parms.Player = Player;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function b1-Managed.BGG_GameMode.StartPlayCS
// (Native, Event, Public, BlueprintEvent)

void ABGG_GameMode::StartPlayCS()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BGG_GameMode", "StartPlayCS");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function b1-Managed.BGG_GameModeStartUp.BeginPlayCS
// (Native, Event, Public, BlueprintEvent)

void ABGG_GameModeStartUp::BeginPlayCS()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BGG_GameModeStartUp", "BeginPlayCS");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function b1-Managed.BED_FSMNode_GI_Loading_ResumePsoCachePrecompile.PostPropertyChanged
// (Native, Event, Public, BlueprintEvent)
// Parameters:
// class FString                           MemberName                                             (Parm, ZeroConstructor, HasGetValueTypeHash)
// class FString                           PropertyName                                           (Parm, ZeroConstructor, HasGetValueTypeHash)

void UBED_FSMNode_GI_Loading_ResumePsoCachePrecompile::PostPropertyChanged(const class FString& MemberName, const class FString& PropertyName)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BED_FSMNode_GI_Loading_ResumePsoCachePrecompile", "PostPropertyChanged");

	Params::BED_FSMNode_GI_Loading_ResumePsoCachePrecompile_PostPropertyChanged Parms{};

	Parms.MemberName = std::move(MemberName);
	Parms.PropertyName = std::move(PropertyName);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function b1-Managed.BED_FSMNode_GI_Loading_ResumePsoCachePrecompile.GetNodeDescriptionInCS
// (Native, Event, Public, HasOutParams, BlueprintEvent, Const)
// Parameters:
// class FString                           ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash)

class FString UBED_FSMNode_GI_Loading_ResumePsoCachePrecompile::GetNodeDescriptionInCS() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BED_FSMNode_GI_Loading_ResumePsoCachePrecompile", "GetNodeDescriptionInCS");

	Params::BED_FSMNode_GI_Loading_ResumePsoCachePrecompile_GetNodeDescriptionInCS Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function b1-Managed.BED_FSMNode_GI_Loading_SaveArchiveAndWaitFinish.PostPropertyChanged
// (Native, Event, Public, BlueprintEvent)
// Parameters:
// class FString                           MemberName                                             (Parm, ZeroConstructor, HasGetValueTypeHash)
// class FString                           PropertyName                                           (Parm, ZeroConstructor, HasGetValueTypeHash)

void UBED_FSMNode_GI_Loading_SaveArchiveAndWaitFinish::PostPropertyChanged(const class FString& MemberName, const class FString& PropertyName)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BED_FSMNode_GI_Loading_SaveArchiveAndWaitFinish", "PostPropertyChanged");

	Params::BED_FSMNode_GI_Loading_SaveArchiveAndWaitFinish_PostPropertyChanged Parms{};

	Parms.MemberName = std::move(MemberName);
	Parms.PropertyName = std::move(PropertyName);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function b1-Managed.BED_FSMNode_GI_Loading_SaveArchiveAndWaitFinish.GetNodeDescriptionInCS
// (Native, Event, Public, HasOutParams, BlueprintEvent, Const)
// Parameters:
// class FString                           ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash)

class FString UBED_FSMNode_GI_Loading_SaveArchiveAndWaitFinish::GetNodeDescriptionInCS() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BED_FSMNode_GI_Loading_SaveArchiveAndWaitFinish", "GetNodeDescriptionInCS");

	Params::BED_FSMNode_GI_Loading_SaveArchiveAndWaitFinish_GetNodeDescriptionInCS Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function b1-Managed.BED_FSMNode_GI_Loading_ServerBattleReady.PostPropertyChanged
// (Native, Event, Public, BlueprintEvent)
// Parameters:
// class FString                           MemberName                                             (Parm, ZeroConstructor, HasGetValueTypeHash)
// class FString                           PropertyName                                           (Parm, ZeroConstructor, HasGetValueTypeHash)

void UBED_FSMNode_GI_Loading_ServerBattleReady::PostPropertyChanged(const class FString& MemberName, const class FString& PropertyName)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BED_FSMNode_GI_Loading_ServerBattleReady", "PostPropertyChanged");

	Params::BED_FSMNode_GI_Loading_ServerBattleReady_PostPropertyChanged Parms{};

	Parms.MemberName = std::move(MemberName);
	Parms.PropertyName = std::move(PropertyName);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function b1-Managed.BED_FSMNode_GI_Loading_ServerBattleReady.GetNodeDescriptionInCS
// (Native, Event, Public, HasOutParams, BlueprintEvent, Const)
// Parameters:
// class FString                           ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash)

class FString UBED_FSMNode_GI_Loading_ServerBattleReady::GetNodeDescriptionInCS() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BED_FSMNode_GI_Loading_ServerBattleReady", "GetNodeDescriptionInCS");

	Params::BED_FSMNode_GI_Loading_ServerBattleReady_GetNodeDescriptionInCS Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function b1-Managed.BGUCameraRig_Crane.ReceiveBeginPlay
// (Native, Event, Public, Protected, BlueprintEvent)

void ABGUCameraRig_Crane::ReceiveBeginPlay()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BGUCameraRig_Crane", "ReceiveBeginPlay");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function b1-Managed.BGUCameraRig_Crane.ReceiveEndPlay
// (Native, Event, Public, Protected, BlueprintEvent)
// Parameters:
// EEndPlayReason                          EndPlayReason                                          (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ABGUCameraRig_Crane::ReceiveEndPlay(EEndPlayReason EndPlayReason)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BGUCameraRig_Crane", "ReceiveEndPlay");

	Params::BGUCameraRig_Crane_ReceiveEndPlay Parms{};

	Parms.EndPlayReason = EndPlayReason;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function b1-Managed.AudioTriggerCompFunctionBinder.AudioCallback
// (Native, Public, Protected)
// Parameters:
// EAkCallbackType                         CallbackType                                           (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// class UAkCallbackInfo*                  CallbackInfo                                           (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UAudioTriggerCompFunctionBinder::AudioCallback(EAkCallbackType CallbackType, class UAkCallbackInfo* CallbackInfo)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("AudioTriggerCompFunctionBinder", "AudioCallback");

	Params::AudioTriggerCompFunctionBinder_AudioCallback Parms{};

	Parms.CallbackType = CallbackType;
	Parms.CallbackInfo = CallbackInfo;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function b1-Managed.BANS_GSSlowIK.GSNotifyBeginCS
// (Native, Event, Public, Protected, BlueprintEvent, Const)
// Parameters:
// struct FUStGSNotifyParam                NotifyParam                                            (Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
// float                                   TotalDuration                                          (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UBANS_GSSlowIK::GSNotifyBeginCS(const struct FUStGSNotifyParam& NotifyParam, float TotalDuration) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BANS_GSSlowIK", "GSNotifyBeginCS");

	Params::BANS_GSSlowIK_GSNotifyBeginCS Parms{};

	Parms.NotifyParam = std::move(NotifyParam);
	Parms.TotalDuration = TotalDuration;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function b1-Managed.BANS_GSSlowIK.GSNotifyTickCS
// (Native, Event, Public, Protected, BlueprintEvent, Const)
// Parameters:
// struct FUStGSNotifyParam                NotifyParam                                            (Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
// float                                   FrameDeltaTime                                         (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UBANS_GSSlowIK::GSNotifyTickCS(const struct FUStGSNotifyParam& NotifyParam, float FrameDeltaTime) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BANS_GSSlowIK", "GSNotifyTickCS");

	Params::BANS_GSSlowIK_GSNotifyTickCS Parms{};

	Parms.NotifyParam = std::move(NotifyParam);
	Parms.FrameDeltaTime = FrameDeltaTime;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function b1-Managed.BANS_GSSlowIK.GSNotifyEndCS
// (Native, Event, Public, Protected, BlueprintEvent, Const)
// Parameters:
// struct FUStGSNotifyParam                NotifyParam                                            (Parm, ZeroConstructor, IsPlainOldData, NoDestructor)

void UBANS_GSSlowIK::GSNotifyEndCS(const struct FUStGSNotifyParam& NotifyParam) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BANS_GSSlowIK", "GSNotifyEndCS");

	Params::BANS_GSSlowIK_GSNotifyEndCS Parms{};

	Parms.NotifyParam = std::move(NotifyParam);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function b1-Managed.BED_FSMNode_GI_Loading_SetPSOCacheUsageMask.PostPropertyChanged
// (Native, Event, Public, BlueprintEvent)
// Parameters:
// class FString                           MemberName                                             (Parm, ZeroConstructor, HasGetValueTypeHash)
// class FString                           PropertyName                                           (Parm, ZeroConstructor, HasGetValueTypeHash)

void UBED_FSMNode_GI_Loading_SetPSOCacheUsageMask::PostPropertyChanged(const class FString& MemberName, const class FString& PropertyName)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BED_FSMNode_GI_Loading_SetPSOCacheUsageMask", "PostPropertyChanged");

	Params::BED_FSMNode_GI_Loading_SetPSOCacheUsageMask_PostPropertyChanged Parms{};

	Parms.MemberName = std::move(MemberName);
	Parms.PropertyName = std::move(PropertyName);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function b1-Managed.BED_FSMNode_GI_Loading_SetPSOCacheUsageMask.GetNodeDescriptionInCS
// (Native, Event, Public, HasOutParams, BlueprintEvent, Const)
// Parameters:
// class FString                           ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash)

class FString UBED_FSMNode_GI_Loading_SetPSOCacheUsageMask::GetNodeDescriptionInCS() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BED_FSMNode_GI_Loading_SetPSOCacheUsageMask", "GetNodeDescriptionInCS");

	Params::BED_FSMNode_GI_Loading_SetPSOCacheUsageMask_GetNodeDescriptionInCS Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function b1-Managed.BED_FSMNode_GI_Loading_ShowAgreementPolicyInStartGame.PostPropertyChanged
// (Native, Event, Public, BlueprintEvent)
// Parameters:
// class FString                           MemberName                                             (Parm, ZeroConstructor, HasGetValueTypeHash)
// class FString                           PropertyName                                           (Parm, ZeroConstructor, HasGetValueTypeHash)

void UBED_FSMNode_GI_Loading_ShowAgreementPolicyInStartGame::PostPropertyChanged(const class FString& MemberName, const class FString& PropertyName)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BED_FSMNode_GI_Loading_ShowAgreementPolicyInStartGame", "PostPropertyChanged");

	Params::BED_FSMNode_GI_Loading_ShowAgreementPolicyInStartGame_PostPropertyChanged Parms{};

	Parms.MemberName = std::move(MemberName);
	Parms.PropertyName = std::move(PropertyName);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function b1-Managed.BED_FSMNode_GI_Loading_ShowAgreementPolicyInStartGame.GetNodeDescriptionInCS
// (Native, Event, Public, HasOutParams, BlueprintEvent, Const)
// Parameters:
// class FString                           ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash)

class FString UBED_FSMNode_GI_Loading_ShowAgreementPolicyInStartGame::GetNodeDescriptionInCS() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BED_FSMNode_GI_Loading_ShowAgreementPolicyInStartGame", "GetNodeDescriptionInCS");

	Params::BED_FSMNode_GI_Loading_ShowAgreementPolicyInStartGame_GetNodeDescriptionInCS Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function b1-Managed.GSProcBarV4.GSOnConstruct
// (Native, Public)

void UGSProcBarV4::GSOnConstruct()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GSProcBarV4", "GSOnConstruct");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function b1-Managed.BED_FSMNode_GI_Loading_ShowGameDisclaimerInStartGame.PostPropertyChanged
// (Native, Event, Public, BlueprintEvent)
// Parameters:
// class FString                           MemberName                                             (Parm, ZeroConstructor, HasGetValueTypeHash)
// class FString                           PropertyName                                           (Parm, ZeroConstructor, HasGetValueTypeHash)

void UBED_FSMNode_GI_Loading_ShowGameDisclaimerInStartGame::PostPropertyChanged(const class FString& MemberName, const class FString& PropertyName)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BED_FSMNode_GI_Loading_ShowGameDisclaimerInStartGame", "PostPropertyChanged");

	Params::BED_FSMNode_GI_Loading_ShowGameDisclaimerInStartGame_PostPropertyChanged Parms{};

	Parms.MemberName = std::move(MemberName);
	Parms.PropertyName = std::move(PropertyName);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function b1-Managed.BED_FSMNode_GI_Loading_ShowGameDisclaimerInStartGame.GetNodeDescriptionInCS
// (Native, Event, Public, HasOutParams, BlueprintEvent, Const)
// Parameters:
// class FString                           ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash)

class FString UBED_FSMNode_GI_Loading_ShowGameDisclaimerInStartGame::GetNodeDescriptionInCS() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BED_FSMNode_GI_Loading_ShowGameDisclaimerInStartGame", "GetNodeDescriptionInCS");

	Params::BED_FSMNode_GI_Loading_ShowGameDisclaimerInStartGame_GetNodeDescriptionInCS Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function b1-Managed.BED_FSMNode_GI_Loading_ShowHealthyGamingAdviceInStartGame.PostPropertyChanged
// (Native, Event, Public, BlueprintEvent)
// Parameters:
// class FString                           MemberName                                             (Parm, ZeroConstructor, HasGetValueTypeHash)
// class FString                           PropertyName                                           (Parm, ZeroConstructor, HasGetValueTypeHash)

void UBED_FSMNode_GI_Loading_ShowHealthyGamingAdviceInStartGame::PostPropertyChanged(const class FString& MemberName, const class FString& PropertyName)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BED_FSMNode_GI_Loading_ShowHealthyGamingAdviceInStartGame", "PostPropertyChanged");

	Params::BED_FSMNode_GI_Loading_ShowHealthyGamingAdviceInStartGame_PostPropertyChanged Parms{};

	Parms.MemberName = std::move(MemberName);
	Parms.PropertyName = std::move(PropertyName);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function b1-Managed.BED_FSMNode_GI_Loading_ShowHealthyGamingAdviceInStartGame.GetNodeDescriptionInCS
// (Native, Event, Public, HasOutParams, BlueprintEvent, Const)
// Parameters:
// class FString                           ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash)

class FString UBED_FSMNode_GI_Loading_ShowHealthyGamingAdviceInStartGame::GetNodeDescriptionInCS() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BED_FSMNode_GI_Loading_ShowHealthyGamingAdviceInStartGame", "GetNodeDescriptionInCS");

	Params::BED_FSMNode_GI_Loading_ShowHealthyGamingAdviceInStartGame_GetNodeDescriptionInCS Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function b1-Managed.BED_FSMNode_GI_Loading_ShowLogoInStartGame.PostPropertyChanged
// (Native, Event, Public, BlueprintEvent)
// Parameters:
// class FString                           MemberName                                             (Parm, ZeroConstructor, HasGetValueTypeHash)
// class FString                           PropertyName                                           (Parm, ZeroConstructor, HasGetValueTypeHash)

void UBED_FSMNode_GI_Loading_ShowLogoInStartGame::PostPropertyChanged(const class FString& MemberName, const class FString& PropertyName)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BED_FSMNode_GI_Loading_ShowLogoInStartGame", "PostPropertyChanged");

	Params::BED_FSMNode_GI_Loading_ShowLogoInStartGame_PostPropertyChanged Parms{};

	Parms.MemberName = std::move(MemberName);
	Parms.PropertyName = std::move(PropertyName);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function b1-Managed.BED_FSMNode_GI_Loading_ShowLogoInStartGame.GetNodeDescriptionInCS
// (Native, Event, Public, HasOutParams, BlueprintEvent, Const)
// Parameters:
// class FString                           ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash)

class FString UBED_FSMNode_GI_Loading_ShowLogoInStartGame::GetNodeDescriptionInCS() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BED_FSMNode_GI_Loading_ShowLogoInStartGame", "GetNodeDescriptionInCS");

	Params::BED_FSMNode_GI_Loading_ShowLogoInStartGame_GetNodeDescriptionInCS Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function b1-Managed.BED_FSMNode_GI_Loading_ShowReplayUI.PostPropertyChanged
// (Native, Event, Public, BlueprintEvent)
// Parameters:
// class FString                           MemberName                                             (Parm, ZeroConstructor, HasGetValueTypeHash)
// class FString                           PropertyName                                           (Parm, ZeroConstructor, HasGetValueTypeHash)

void UBED_FSMNode_GI_Loading_ShowReplayUI::PostPropertyChanged(const class FString& MemberName, const class FString& PropertyName)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BED_FSMNode_GI_Loading_ShowReplayUI", "PostPropertyChanged");

	Params::BED_FSMNode_GI_Loading_ShowReplayUI_PostPropertyChanged Parms{};

	Parms.MemberName = std::move(MemberName);
	Parms.PropertyName = std::move(PropertyName);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function b1-Managed.BED_FSMNode_GI_Loading_ShowReplayUI.GetNodeDescriptionInCS
// (Native, Event, Public, HasOutParams, BlueprintEvent, Const)
// Parameters:
// class FString                           ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash)

class FString UBED_FSMNode_GI_Loading_ShowReplayUI::GetNodeDescriptionInCS() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BED_FSMNode_GI_Loading_ShowReplayUI", "GetNodeDescriptionInCS");

	Params::BED_FSMNode_GI_Loading_ShowReplayUI_GetNodeDescriptionInCS Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function b1-Managed.BED_FSMNode_GI_Loading_SpawnCharacterForClient.PostPropertyChanged
// (Native, Event, Public, BlueprintEvent)
// Parameters:
// class FString                           MemberName                                             (Parm, ZeroConstructor, HasGetValueTypeHash)
// class FString                           PropertyName                                           (Parm, ZeroConstructor, HasGetValueTypeHash)

void UBED_FSMNode_GI_Loading_SpawnCharacterForClient::PostPropertyChanged(const class FString& MemberName, const class FString& PropertyName)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BED_FSMNode_GI_Loading_SpawnCharacterForClient", "PostPropertyChanged");

	Params::BED_FSMNode_GI_Loading_SpawnCharacterForClient_PostPropertyChanged Parms{};

	Parms.MemberName = std::move(MemberName);
	Parms.PropertyName = std::move(PropertyName);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function b1-Managed.BED_FSMNode_GI_Loading_SpawnCharacterForClient.GetNodeDescriptionInCS
// (Native, Event, Public, HasOutParams, BlueprintEvent, Const)
// Parameters:
// class FString                           ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash)

class FString UBED_FSMNode_GI_Loading_SpawnCharacterForClient::GetNodeDescriptionInCS() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BED_FSMNode_GI_Loading_SpawnCharacterForClient", "GetNodeDescriptionInCS");

	Params::BED_FSMNode_GI_Loading_SpawnCharacterForClient_GetNodeDescriptionInCS Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function b1-Managed.BED_FSMNode_GI_Loading_SpawnPlayerPawnWithOutECSBeginPlay.PostPropertyChanged
// (Native, Event, Public, BlueprintEvent)
// Parameters:
// class FString                           MemberName                                             (Parm, ZeroConstructor, HasGetValueTypeHash)
// class FString                           PropertyName                                           (Parm, ZeroConstructor, HasGetValueTypeHash)

void UBED_FSMNode_GI_Loading_SpawnPlayerPawnWithOutECSBeginPlay::PostPropertyChanged(const class FString& MemberName, const class FString& PropertyName)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BED_FSMNode_GI_Loading_SpawnPlayerPawnWithOutECSBeginPlay", "PostPropertyChanged");

	Params::BED_FSMNode_GI_Loading_SpawnPlayerPawnWithOutECSBeginPlay_PostPropertyChanged Parms{};

	Parms.MemberName = std::move(MemberName);
	Parms.PropertyName = std::move(PropertyName);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function b1-Managed.BED_FSMNode_GI_Loading_SpawnPlayerPawnWithOutECSBeginPlay.GetNodeDescriptionInCS
// (Native, Event, Public, HasOutParams, BlueprintEvent, Const)
// Parameters:
// class FString                           ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash)

class FString UBED_FSMNode_GI_Loading_SpawnPlayerPawnWithOutECSBeginPlay::GetNodeDescriptionInCS() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BED_FSMNode_GI_Loading_SpawnPlayerPawnWithOutECSBeginPlay", "GetNodeDescriptionInCS");

	Params::BED_FSMNode_GI_Loading_SpawnPlayerPawnWithOutECSBeginPlay_GetNodeDescriptionInCS Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function b1-Managed.BUS_BGUDataCompBase.LateECSBeginPlay
// (Native, Event, Public, BlueprintEvent)

void UBUS_BGUDataCompBase::LateECSBeginPlay()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BUS_BGUDataCompBase", "LateECSBeginPlay");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function b1-Managed.BUS_BGUDataCompBase.PreECSBeginPlay
// (Native, Event, Public, BlueprintEvent)

void UBUS_BGUDataCompBase::PreECSBeginPlay()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BUS_BGUDataCompBase", "PreECSBeginPlay");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function b1-Managed.BUS_BGUDataCompBase.OnDestoryInCS
// (Native, Event, Public, Protected, BlueprintEvent)

void UBUS_BGUDataCompBase::OnDestoryInCS()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BUS_BGUDataCompBase", "OnDestoryInCS");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function b1-Managed.BUS_BGUDataCompBase.InitOnNewInCS
// (Native, Event, Public, Protected, BlueprintEvent)

void UBUS_BGUDataCompBase::InitOnNewInCS()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BUS_BGUDataCompBase", "InitOnNewInCS");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function b1-Managed.BUS_BGUDataComp.LateECSBeginPlay
// (Native, Event, Public, BlueprintEvent)

void UBUS_BGUDataComp::LateECSBeginPlay()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BUS_BGUDataComp", "LateECSBeginPlay");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function b1-Managed.BED_FSMNode_GI_Loading_StartNewGamePlus.PostPropertyChanged
// (Native, Event, Public, BlueprintEvent)
// Parameters:
// class FString                           MemberName                                             (Parm, ZeroConstructor, HasGetValueTypeHash)
// class FString                           PropertyName                                           (Parm, ZeroConstructor, HasGetValueTypeHash)

void UBED_FSMNode_GI_Loading_StartNewGamePlus::PostPropertyChanged(const class FString& MemberName, const class FString& PropertyName)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BED_FSMNode_GI_Loading_StartNewGamePlus", "PostPropertyChanged");

	Params::BED_FSMNode_GI_Loading_StartNewGamePlus_PostPropertyChanged Parms{};

	Parms.MemberName = std::move(MemberName);
	Parms.PropertyName = std::move(PropertyName);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function b1-Managed.BED_FSMNode_GI_Loading_StartNewGamePlus.GetNodeDescriptionInCS
// (Native, Event, Public, HasOutParams, BlueprintEvent, Const)
// Parameters:
// class FString                           ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash)

class FString UBED_FSMNode_GI_Loading_StartNewGamePlus::GetNodeDescriptionInCS() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BED_FSMNode_GI_Loading_StartNewGamePlus", "GetNodeDescriptionInCS");

	Params::BED_FSMNode_GI_Loading_StartNewGamePlus_GetNodeDescriptionInCS Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function b1-Managed.GuidingRootWidget.OnMouseButtonDown
// (BlueprintCosmetic, Native, Event, Public, HasOutParams, BlueprintEvent)
// Parameters:
// struct FGeometry                        MyGeometry                                             (Parm, IsPlainOldData, NoDestructor)
// struct FPointerEvent                    MouseEvent                                             (ConstParm, Parm, OutParm, ReferenceParm)
// struct FEventReply                      ReturnValue                                            (Parm, OutParm, ReturnParm)

struct FEventReply UGuidingRootWidget::OnMouseButtonDown(const struct FGeometry& MyGeometry, const struct FPointerEvent& MouseEvent)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GuidingRootWidget", "OnMouseButtonDown");

	Params::GuidingRootWidget_OnMouseButtonDown Parms{};

	Parms.MyGeometry = std::move(MyGeometry);
	Parms.MouseEvent = std::move(MouseEvent);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function b1-Managed.GuidingRootWidget.OnMouseButtonUp
// (BlueprintCosmetic, Native, Event, Public, HasOutParams, BlueprintEvent)
// Parameters:
// struct FGeometry                        MyGeometry                                             (Parm, IsPlainOldData, NoDestructor)
// struct FPointerEvent                    MouseEvent                                             (ConstParm, Parm, OutParm, ReferenceParm)
// struct FEventReply                      ReturnValue                                            (Parm, OutParm, ReturnParm)

struct FEventReply UGuidingRootWidget::OnMouseButtonUp(const struct FGeometry& MyGeometry, const struct FPointerEvent& MouseEvent)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GuidingRootWidget", "OnMouseButtonUp");

	Params::GuidingRootWidget_OnMouseButtonUp Parms{};

	Parms.MyGeometry = std::move(MyGeometry);
	Parms.MouseEvent = std::move(MouseEvent);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function b1-Managed.GuidingRootWidget.OnInitialized
// (BlueprintCosmetic, Native, Event, Public, BlueprintEvent)

void UGuidingRootWidget::OnInitialized()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GuidingRootWidget", "OnInitialized");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function b1-Managed.BED_FSMNode_GI_Loading_SubG_GI_Loading_BattleLevelTravel.OnCreateGraphNodeInCS
// (Native, Event, Public, BlueprintEvent)

void UBED_FSMNode_GI_Loading_SubG_GI_Loading_BattleLevelTravel::OnCreateGraphNodeInCS()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BED_FSMNode_GI_Loading_SubG_GI_Loading_BattleLevelTravel", "OnCreateGraphNodeInCS");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function b1-Managed.BED_FSMNode_GI_Loading_SubG_GI_Loading_BattleLevelTravel.GetNodeDescriptionInCS
// (Native, Event, Public, HasOutParams, BlueprintEvent, Const)
// Parameters:
// class FString                           ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash)

class FString UBED_FSMNode_GI_Loading_SubG_GI_Loading_BattleLevelTravel::GetNodeDescriptionInCS() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BED_FSMNode_GI_Loading_SubG_GI_Loading_BattleLevelTravel", "GetNodeDescriptionInCS");

	Params::BED_FSMNode_GI_Loading_SubG_GI_Loading_BattleLevelTravel_GetNodeDescriptionInCS Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function b1-Managed.BUS_PerformerDestructibleDestroyComp.TickComponentInCS
// (Native, Event, Public, BlueprintEvent)
// Parameters:
// float                                   DeltaTime                                              (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UBUS_PerformerDestructibleDestroyComp::TickComponentInCS(float DeltaTime)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BUS_PerformerDestructibleDestroyComp", "TickComponentInCS");

	Params::BUS_PerformerDestructibleDestroyComp_TickComponentInCS Parms{};

	Parms.DeltaTime = DeltaTime;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function b1-Managed.BUS_PerformerDestructibleDestroyComp.SetEnableDestroyDestructible
// (Native, Public, BlueprintCallable)
// Parameters:
// uint8                                   IsEnabled                                              (Parm, NoDestructor, HasGetValueTypeHash)

void UBUS_PerformerDestructibleDestroyComp::SetEnableDestroyDestructible(uint8 IsEnabled)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BUS_PerformerDestructibleDestroyComp", "SetEnableDestroyDestructible");

	Params::BUS_PerformerDestructibleDestroyComp_SetEnableDestroyDestructible Parms{};

	Parms.IsEnabled = IsEnabled;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function b1-Managed.BUS_PerformerDestructibleDestroyComp.BeginPlayInCS
// (Native, Event, Public, BlueprintEvent)

void UBUS_PerformerDestructibleDestroyComp::BeginPlayInCS()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BUS_PerformerDestructibleDestroyComp", "BeginPlayInCS");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function b1-Managed.BUI_Button.OnMouseButtonDoubleClick
// (BlueprintCosmetic, Native, Event, Public, HasOutParams, BlueprintEvent)
// Parameters:
// struct FGeometry                        InMyGeometry                                           (Parm, IsPlainOldData, NoDestructor)
// struct FPointerEvent                    InMouseEvent                                           (ConstParm, Parm, OutParm, ReferenceParm)
// struct FEventReply                      ReturnValue                                            (Parm, OutParm, ReturnParm)

struct FEventReply UBUI_Button::OnMouseButtonDoubleClick(const struct FGeometry& InMyGeometry, const struct FPointerEvent& InMouseEvent)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BUI_Button", "OnMouseButtonDoubleClick");

	Params::BUI_Button_OnMouseButtonDoubleClick Parms{};

	Parms.InMyGeometry = std::move(InMyGeometry);
	Parms.InMouseEvent = std::move(InMouseEvent);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function b1-Managed.BUI_Button.OnAnalogValueChanged
// (Native, Event, Public, HasOutParams, BlueprintEvent)
// Parameters:
// struct FGeometry                        MyGeometry                                             (Parm, IsPlainOldData, NoDestructor)
// struct FAnalogInputEvent                InAnalogInputEvent                                     (Parm)
// struct FEventReply                      ReturnValue                                            (Parm, OutParm, ReturnParm)

struct FEventReply UBUI_Button::OnAnalogValueChanged(const struct FGeometry& MyGeometry, const struct FAnalogInputEvent& InAnalogInputEvent)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BUI_Button", "OnAnalogValueChanged");

	Params::BUI_Button_OnAnalogValueChanged Parms{};

	Parms.MyGeometry = std::move(MyGeometry);
	Parms.InAnalogInputEvent = std::move(InAnalogInputEvent);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function b1-Managed.BUI_Button.OnAddedToFocusPath
// (BlueprintCosmetic, Native, Event, Public, BlueprintEvent)
// Parameters:
// struct FFocusEvent                      InFocusEvent                                           (Parm, NoDestructor)

void UBUI_Button::OnAddedToFocusPath(const struct FFocusEvent& InFocusEvent)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BUI_Button", "OnAddedToFocusPath");

	Params::BUI_Button_OnAddedToFocusPath Parms{};

	Parms.InFocusEvent = std::move(InFocusEvent);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function b1-Managed.BUI_Button.OnMouseButtonDown
// (BlueprintCosmetic, Native, Event, Public, HasOutParams, BlueprintEvent)
// Parameters:
// struct FGeometry                        MyGeometry                                             (Parm, IsPlainOldData, NoDestructor)
// struct FPointerEvent                    MouseEvent                                             (ConstParm, Parm, OutParm, ReferenceParm)
// struct FEventReply                      ReturnValue                                            (Parm, OutParm, ReturnParm)

struct FEventReply UBUI_Button::OnMouseButtonDown(const struct FGeometry& MyGeometry, const struct FPointerEvent& MouseEvent)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BUI_Button", "OnMouseButtonDown");

	Params::BUI_Button_OnMouseButtonDown Parms{};

	Parms.MyGeometry = std::move(MyGeometry);
	Parms.MouseEvent = std::move(MouseEvent);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function b1-Managed.BUI_Button.OnPreviewKeyDown
// (Native, Event, Public, HasOutParams, BlueprintEvent)
// Parameters:
// struct FGeometry                        MyGeometry                                             (Parm, IsPlainOldData, NoDestructor)
// struct FKeyEvent                        InKeyEvent                                             (Parm)
// struct FEventReply                      ReturnValue                                            (Parm, OutParm, ReturnParm)

struct FEventReply UBUI_Button::OnPreviewKeyDown(const struct FGeometry& MyGeometry, const struct FKeyEvent& InKeyEvent)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BUI_Button", "OnPreviewKeyDown");

	Params::BUI_Button_OnPreviewKeyDown Parms{};

	Parms.MyGeometry = std::move(MyGeometry);
	Parms.InKeyEvent = std::move(InKeyEvent);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function b1-Managed.BUI_Button.OnMouseButtonUp
// (BlueprintCosmetic, Native, Event, Public, HasOutParams, BlueprintEvent)
// Parameters:
// struct FGeometry                        MyGeometry                                             (Parm, IsPlainOldData, NoDestructor)
// struct FPointerEvent                    MouseEvent                                             (ConstParm, Parm, OutParm, ReferenceParm)
// struct FEventReply                      ReturnValue                                            (Parm, OutParm, ReturnParm)

struct FEventReply UBUI_Button::OnMouseButtonUp(const struct FGeometry& MyGeometry, const struct FPointerEvent& MouseEvent)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BUI_Button", "OnMouseButtonUp");

	Params::BUI_Button_OnMouseButtonUp Parms{};

	Parms.MyGeometry = std::move(MyGeometry);
	Parms.MouseEvent = std::move(MouseEvent);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function b1-Managed.BUI_Button.OnMouseEnter
// (BlueprintCosmetic, Native, Event, Public, BlueprintEvent)
// Parameters:
// struct FGeometry                        MyGeometry                                             (Parm, IsPlainOldData, NoDestructor)
// struct FPointerEvent                    MouseEvent                                             (ConstParm, Parm, OutParm, ReferenceParm)

void UBUI_Button::OnMouseEnter(const struct FGeometry& MyGeometry, const struct FPointerEvent& MouseEvent)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BUI_Button", "OnMouseEnter");

	Params::BUI_Button_OnMouseEnter Parms{};

	Parms.MyGeometry = std::move(MyGeometry);
	Parms.MouseEvent = std::move(MouseEvent);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function b1-Managed.BUI_Button.OnMouseLeave
// (BlueprintCosmetic, Native, Event, Public, BlueprintEvent)
// Parameters:
// struct FPointerEvent                    MouseEvent                                             (ConstParm, Parm, OutParm, ReferenceParm)

void UBUI_Button::OnMouseLeave(const struct FPointerEvent& MouseEvent)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BUI_Button", "OnMouseLeave");

	Params::BUI_Button_OnMouseLeave Parms{};

	Parms.MouseEvent = std::move(MouseEvent);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function b1-Managed.BUI_Button.OnMouseMove
// (BlueprintCosmetic, Native, Event, Public, HasOutParams, BlueprintEvent)
// Parameters:
// struct FGeometry                        MyGeometry                                             (Parm, IsPlainOldData, NoDestructor)
// struct FPointerEvent                    MouseEvent                                             (ConstParm, Parm, OutParm, ReferenceParm)
// struct FEventReply                      ReturnValue                                            (Parm, OutParm, ReturnParm)

struct FEventReply UBUI_Button::OnMouseMove(const struct FGeometry& MyGeometry, const struct FPointerEvent& MouseEvent)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BUI_Button", "OnMouseMove");

	Params::BUI_Button_OnMouseMove Parms{};

	Parms.MyGeometry = std::move(MyGeometry);
	Parms.MouseEvent = std::move(MouseEvent);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function b1-Managed.BUI_Button.OnKeyDown
// (BlueprintCosmetic, Native, Event, Public, HasOutParams, BlueprintEvent)
// Parameters:
// struct FGeometry                        MyGeometry                                             (Parm, IsPlainOldData, NoDestructor)
// struct FKeyEvent                        InKeyEvent                                             (Parm)
// struct FEventReply                      ReturnValue                                            (Parm, OutParm, ReturnParm)

struct FEventReply UBUI_Button::OnKeyDown(const struct FGeometry& MyGeometry, const struct FKeyEvent& InKeyEvent)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BUI_Button", "OnKeyDown");

	Params::BUI_Button_OnKeyDown Parms{};

	Parms.MyGeometry = std::move(MyGeometry);
	Parms.InKeyEvent = std::move(InKeyEvent);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function b1-Managed.BUI_Button.OnCustomWidgetNavigation
// (Native, Public, Private, HasOutParams)
// Parameters:
// EUINavigation                           Navigation_0                                           (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// class UWidget*                          ReturnValue                                            (ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

class UWidget* UBUI_Button::OnCustomWidgetNavigation(EUINavigation Navigation_0)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BUI_Button", "OnCustomWidgetNavigation");

	Params::BUI_Button_OnCustomWidgetNavigation Parms{};

	Parms.Navigation_0 = Navigation_0;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function b1-Managed.BUI_Button.GetIsMouseEnterSetFocus
// (Native, Public, HasOutParams, BlueprintCallable)
// Parameters:
// uint8                                   ReturnValue                                            (Parm, OutParm, ReturnParm, NoDestructor, HasGetValueTypeHash)

uint8 UBUI_Button::GetIsMouseEnterSetFocus()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BUI_Button", "GetIsMouseEnterSetFocus");

	Params::BUI_Button_GetIsMouseEnterSetFocus Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function b1-Managed.BUI_Button.SetIsMouseEnterSetFocus
// (Native, Public, BlueprintCallable)
// Parameters:
// uint8                                   InIsMouseEnterSetFocus                                 (Parm, NoDestructor, HasGetValueTypeHash)

void UBUI_Button::SetIsMouseEnterSetFocus(uint8 InIsMouseEnterSetFocus)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BUI_Button", "SetIsMouseEnterSetFocus");

	Params::BUI_Button_SetIsMouseEnterSetFocus Parms{};

	Parms.InIsMouseEnterSetFocus = InIsMouseEnterSetFocus;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function b1-Managed.BUI_Button.OnKeyUp
// (BlueprintCosmetic, Native, Event, Public, HasOutParams, BlueprintEvent)
// Parameters:
// struct FGeometry                        MyGeometry                                             (Parm, IsPlainOldData, NoDestructor)
// struct FKeyEvent                        InKeyEvent                                             (Parm)
// struct FEventReply                      ReturnValue                                            (Parm, OutParm, ReturnParm)

struct FEventReply UBUI_Button::OnKeyUp(const struct FGeometry& MyGeometry, const struct FKeyEvent& InKeyEvent)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BUI_Button", "OnKeyUp");

	Params::BUI_Button_OnKeyUp Parms{};

	Parms.MyGeometry = std::move(MyGeometry);
	Parms.InKeyEvent = std::move(InKeyEvent);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function b1-Managed.BUI_Button.SetFocusOn
// (Native, Public, HasOutParams, BlueprintCallable)
// Parameters:
// EFocusReason                            Reason                                                 (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// uint8                                   ReturnValue                                            (Parm, OutParm, ReturnParm, NoDestructor, HasGetValueTypeHash)

uint8 UBUI_Button::SetFocusOn(EFocusReason Reason)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BUI_Button", "SetFocusOn");

	Params::BUI_Button_SetFocusOn Parms{};

	Parms.Reason = Reason;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function b1-Managed.BAN_X2_PlayDBCDataAsset.GSNotifyCS
// (Native, Event, Public, Protected, BlueprintEvent, Const)
// Parameters:
// struct FUStGSNotifyParam                NotifyParam                                            (Parm, ZeroConstructor, IsPlainOldData, NoDestructor)

void UBAN_X2_PlayDBCDataAsset::GSNotifyCS(const struct FUStGSNotifyParam& NotifyParam) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BAN_X2_PlayDBCDataAsset", "GSNotifyCS");

	Params::BAN_X2_PlayDBCDataAsset_GSNotifyCS Parms{};

	Parms.NotifyParam = std::move(NotifyParam);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function b1-Managed.BED_FSMNode_GI_Loading_SubG_GI_Loading_ClientEnvInit.OnCreateGraphNodeInCS
// (Native, Event, Public, BlueprintEvent)

void UBED_FSMNode_GI_Loading_SubG_GI_Loading_ClientEnvInit::OnCreateGraphNodeInCS()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BED_FSMNode_GI_Loading_SubG_GI_Loading_ClientEnvInit", "OnCreateGraphNodeInCS");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function b1-Managed.BED_FSMNode_GI_Loading_SubG_GI_Loading_ClientEnvInit.GetNodeDescriptionInCS
// (Native, Event, Public, HasOutParams, BlueprintEvent, Const)
// Parameters:
// class FString                           ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash)

class FString UBED_FSMNode_GI_Loading_SubG_GI_Loading_ClientEnvInit::GetNodeDescriptionInCS() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BED_FSMNode_GI_Loading_SubG_GI_Loading_ClientEnvInit", "GetNodeDescriptionInCS");

	Params::BED_FSMNode_GI_Loading_SubG_GI_Loading_ClientEnvInit_GetNodeDescriptionInCS Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function b1-Managed.BAN_GSTryHRCounterattack.bIsNativeBranchingPointCS
// (Native, Event, Public, HasOutParams, BlueprintEvent, Const)
// Parameters:
// uint8                                   ReturnValue                                            (Parm, OutParm, ReturnParm, NoDestructor, HasGetValueTypeHash)

uint8 UBAN_GSTryHRCounterattack::bIsNativeBranchingPointCS() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BAN_GSTryHRCounterattack", "bIsNativeBranchingPointCS");

	Params::BAN_GSTryHRCounterattack_bIsNativeBranchingPointCS Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function b1-Managed.BAN_GSTryHRCounterattack.GSNotifyCS
// (Native, Event, Public, Protected, BlueprintEvent, Const)
// Parameters:
// struct FUStGSNotifyParam                NotifyParam                                            (Parm, ZeroConstructor, IsPlainOldData, NoDestructor)

void UBAN_GSTryHRCounterattack::GSNotifyCS(const struct FUStGSNotifyParam& NotifyParam) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BAN_GSTryHRCounterattack", "GSNotifyCS");

	Params::BAN_GSTryHRCounterattack_GSNotifyCS Parms{};

	Parms.NotifyParam = std::move(NotifyParam);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function b1-Managed.BED_FSMNode_GI_Loading_SubG_GI_Loading_GSLogin.OnCreateGraphNodeInCS
// (Native, Event, Public, BlueprintEvent)

void UBED_FSMNode_GI_Loading_SubG_GI_Loading_GSLogin::OnCreateGraphNodeInCS()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BED_FSMNode_GI_Loading_SubG_GI_Loading_GSLogin", "OnCreateGraphNodeInCS");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function b1-Managed.BED_FSMNode_GI_Loading_SubG_GI_Loading_GSLogin.GetNodeDescriptionInCS
// (Native, Event, Public, HasOutParams, BlueprintEvent, Const)
// Parameters:
// class FString                           ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash)

class FString UBED_FSMNode_GI_Loading_SubG_GI_Loading_GSLogin::GetNodeDescriptionInCS() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BED_FSMNode_GI_Loading_SubG_GI_Loading_GSLogin", "GetNodeDescriptionInCS");

	Params::BED_FSMNode_GI_Loading_SubG_GI_Loading_GSLogin_GetNodeDescriptionInCS Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function b1-Managed.BED_FSMNode_GI_Loading_SubG_GI_Loading_HandleArchiveInTravelLevel.OnCreateGraphNodeInCS
// (Native, Event, Public, BlueprintEvent)

void UBED_FSMNode_GI_Loading_SubG_GI_Loading_HandleArchiveInTravelLevel::OnCreateGraphNodeInCS()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BED_FSMNode_GI_Loading_SubG_GI_Loading_HandleArchiveInTravelLevel", "OnCreateGraphNodeInCS");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function b1-Managed.BED_FSMNode_GI_Loading_SubG_GI_Loading_HandleArchiveInTravelLevel.GetNodeDescriptionInCS
// (Native, Event, Public, HasOutParams, BlueprintEvent, Const)
// Parameters:
// class FString                           ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash)

class FString UBED_FSMNode_GI_Loading_SubG_GI_Loading_HandleArchiveInTravelLevel::GetNodeDescriptionInCS() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BED_FSMNode_GI_Loading_SubG_GI_Loading_HandleArchiveInTravelLevel", "GetNodeDescriptionInCS");

	Params::BED_FSMNode_GI_Loading_SubG_GI_Loading_HandleArchiveInTravelLevel_GetNodeDescriptionInCS Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function b1-Managed.BED_FSMNode_GI_Loading_SubG_GI_Loading_HideLoadingUI.OnCreateGraphNodeInCS
// (Native, Event, Public, BlueprintEvent)

void UBED_FSMNode_GI_Loading_SubG_GI_Loading_HideLoadingUI::OnCreateGraphNodeInCS()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BED_FSMNode_GI_Loading_SubG_GI_Loading_HideLoadingUI", "OnCreateGraphNodeInCS");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function b1-Managed.BED_FSMNode_GI_Loading_SubG_GI_Loading_HideLoadingUI.GetNodeDescriptionInCS
// (Native, Event, Public, HasOutParams, BlueprintEvent, Const)
// Parameters:
// class FString                           ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash)

class FString UBED_FSMNode_GI_Loading_SubG_GI_Loading_HideLoadingUI::GetNodeDescriptionInCS() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BED_FSMNode_GI_Loading_SubG_GI_Loading_HideLoadingUI", "GetNodeDescriptionInCS");

	Params::BED_FSMNode_GI_Loading_SubG_GI_Loading_HideLoadingUI_GetNodeDescriptionInCS Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function b1-Managed.BED_FSMNode_GI_Loading_SubG_GI_Loading_PostLeaveLevel.OnCreateGraphNodeInCS
// (Native, Event, Public, BlueprintEvent)

void UBED_FSMNode_GI_Loading_SubG_GI_Loading_PostLeaveLevel::OnCreateGraphNodeInCS()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BED_FSMNode_GI_Loading_SubG_GI_Loading_PostLeaveLevel", "OnCreateGraphNodeInCS");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function b1-Managed.BED_FSMNode_GI_Loading_SubG_GI_Loading_PostLeaveLevel.GetNodeDescriptionInCS
// (Native, Event, Public, HasOutParams, BlueprintEvent, Const)
// Parameters:
// class FString                           ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash)

class FString UBED_FSMNode_GI_Loading_SubG_GI_Loading_PostLeaveLevel::GetNodeDescriptionInCS() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BED_FSMNode_GI_Loading_SubG_GI_Loading_PostLeaveLevel", "GetNodeDescriptionInCS");

	Params::BED_FSMNode_GI_Loading_SubG_GI_Loading_PostLeaveLevel_GetNodeDescriptionInCS Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function b1-Managed.BUS_AKMgrComp.OnAkCompAutoDestroyed
// (Native, Public)
// Parameters:
// class UAkComponent*                     AkComp                                                 (ExportObject, Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UBUS_AKMgrComp::OnAkCompAutoDestroyed(class UAkComponent* AkComp)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BUS_AKMgrComp", "OnAkCompAutoDestroyed");

	Params::BUS_AKMgrComp_OnAkCompAutoDestroyed Parms{};

	Parms.AkComp = AkComp;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function b1-Managed.BUS_AKMgrComp.OnAkEventCallBack
// (Native, Public, Private)
// Parameters:
// EAkCallbackType                         CallbackType                                           (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// class UAkCallbackInfo*                  CallbackInfo                                           (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UBUS_AKMgrComp::OnAkEventCallBack(EAkCallbackType CallbackType, class UAkCallbackInfo* CallbackInfo)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BUS_AKMgrComp", "OnAkEventCallBack");

	Params::BUS_AKMgrComp_OnAkEventCallBack Parms{};

	Parms.CallbackType = CallbackType;
	Parms.CallbackInfo = CallbackInfo;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function b1-Managed.BAN_SpawnLightningFXActor.GetSoftReferences
// (Native, Event, Public, HasOutParams, BlueprintEvent, Const)
// Parameters:
// TArray<struct FSoftObjectPath>          ReturnValue                                            (Parm, OutParm, ReturnParm)

TArray<struct FSoftObjectPath> UBAN_SpawnLightningFXActor::GetSoftReferences() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BAN_SpawnLightningFXActor", "GetSoftReferences");

	Params::BAN_SpawnLightningFXActor_GetSoftReferences Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function b1-Managed.BAN_SpawnLightningFXActor.GSNotifyCS
// (Native, Event, Public, Protected, BlueprintEvent, Const)
// Parameters:
// struct FUStGSNotifyParam                NotifyParam                                            (Parm, ZeroConstructor, IsPlainOldData, NoDestructor)

void UBAN_SpawnLightningFXActor::GSNotifyCS(const struct FUStGSNotifyParam& NotifyParam) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BAN_SpawnLightningFXActor", "GSNotifyCS");

	Params::BAN_SpawnLightningFXActor_GSNotifyCS Parms{};

	Parms.NotifyParam = std::move(NotifyParam);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function b1-Managed.BED_FSMNode_GI_Loading_SubG_GI_Loading_PreEnterLevel.OnCreateGraphNodeInCS
// (Native, Event, Public, BlueprintEvent)

void UBED_FSMNode_GI_Loading_SubG_GI_Loading_PreEnterLevel::OnCreateGraphNodeInCS()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BED_FSMNode_GI_Loading_SubG_GI_Loading_PreEnterLevel", "OnCreateGraphNodeInCS");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function b1-Managed.BED_FSMNode_GI_Loading_SubG_GI_Loading_PreEnterLevel.GetNodeDescriptionInCS
// (Native, Event, Public, HasOutParams, BlueprintEvent, Const)
// Parameters:
// class FString                           ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash)

class FString UBED_FSMNode_GI_Loading_SubG_GI_Loading_PreEnterLevel::GetNodeDescriptionInCS() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BED_FSMNode_GI_Loading_SubG_GI_Loading_PreEnterLevel", "GetNodeDescriptionInCS");

	Params::BED_FSMNode_GI_Loading_SubG_GI_Loading_PreEnterLevel_GetNodeDescriptionInCS Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function b1-Managed.BED_FSMNode_GI_Loading_SubG_GI_Loading_ResetGameInstanceDataAndSaveArchive.OnCreateGraphNodeInCS
// (Native, Event, Public, BlueprintEvent)

void UBED_FSMNode_GI_Loading_SubG_GI_Loading_ResetGameInstanceDataAndSaveArchive::OnCreateGraphNodeInCS()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BED_FSMNode_GI_Loading_SubG_GI_Loading_ResetGameInstanceDataAndSaveArchive", "OnCreateGraphNodeInCS");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function b1-Managed.BED_FSMNode_GI_Loading_SubG_GI_Loading_ResetGameInstanceDataAndSaveArchive.GetNodeDescriptionInCS
// (Native, Event, Public, HasOutParams, BlueprintEvent, Const)
// Parameters:
// class FString                           ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash)

class FString UBED_FSMNode_GI_Loading_SubG_GI_Loading_ResetGameInstanceDataAndSaveArchive::GetNodeDescriptionInCS() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BED_FSMNode_GI_Loading_SubG_GI_Loading_ResetGameInstanceDataAndSaveArchive", "GetNodeDescriptionInCS");

	Params::BED_FSMNode_GI_Loading_SubG_GI_Loading_ResetGameInstanceDataAndSaveArchive_GetNodeDescriptionInCS Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function b1-Managed.BED_FSMNode_GI_Loading_SubG_GI_Loading_ReStartGSLogin.OnCreateGraphNodeInCS
// (Native, Event, Public, BlueprintEvent)

void UBED_FSMNode_GI_Loading_SubG_GI_Loading_ReStartGSLogin::OnCreateGraphNodeInCS()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BED_FSMNode_GI_Loading_SubG_GI_Loading_ReStartGSLogin", "OnCreateGraphNodeInCS");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function b1-Managed.BED_FSMNode_GI_Loading_SubG_GI_Loading_ReStartGSLogin.GetNodeDescriptionInCS
// (Native, Event, Public, HasOutParams, BlueprintEvent, Const)
// Parameters:
// class FString                           ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash)

class FString UBED_FSMNode_GI_Loading_SubG_GI_Loading_ReStartGSLogin::GetNodeDescriptionInCS() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BED_FSMNode_GI_Loading_SubG_GI_Loading_ReStartGSLogin", "GetNodeDescriptionInCS");

	Params::BED_FSMNode_GI_Loading_SubG_GI_Loading_ReStartGSLogin_GetNodeDescriptionInCS Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function b1-Managed.BED_FSMNode_GI_Loading_SubG_GI_Loading_SaveArchiveAndWaitFinish.OnCreateGraphNodeInCS
// (Native, Event, Public, BlueprintEvent)

void UBED_FSMNode_GI_Loading_SubG_GI_Loading_SaveArchiveAndWaitFinish::OnCreateGraphNodeInCS()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BED_FSMNode_GI_Loading_SubG_GI_Loading_SaveArchiveAndWaitFinish", "OnCreateGraphNodeInCS");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function b1-Managed.BED_FSMNode_GI_Loading_SubG_GI_Loading_SaveArchiveAndWaitFinish.GetNodeDescriptionInCS
// (Native, Event, Public, HasOutParams, BlueprintEvent, Const)
// Parameters:
// class FString                           ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash)

class FString UBED_FSMNode_GI_Loading_SubG_GI_Loading_SaveArchiveAndWaitFinish::GetNodeDescriptionInCS() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BED_FSMNode_GI_Loading_SubG_GI_Loading_SaveArchiveAndWaitFinish", "GetNodeDescriptionInCS");

	Params::BED_FSMNode_GI_Loading_SubG_GI_Loading_SaveArchiveAndWaitFinish_GetNodeDescriptionInCS Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function b1-Managed.BED_FSMNode_GI_Loading_TeleportTemplateBegin.PostPropertyChanged
// (Native, Event, Public, BlueprintEvent)
// Parameters:
// class FString                           MemberName                                             (Parm, ZeroConstructor, HasGetValueTypeHash)
// class FString                           PropertyName                                           (Parm, ZeroConstructor, HasGetValueTypeHash)

void UBED_FSMNode_GI_Loading_TeleportTemplateBegin::PostPropertyChanged(const class FString& MemberName, const class FString& PropertyName)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BED_FSMNode_GI_Loading_TeleportTemplateBegin", "PostPropertyChanged");

	Params::BED_FSMNode_GI_Loading_TeleportTemplateBegin_PostPropertyChanged Parms{};

	Parms.MemberName = std::move(MemberName);
	Parms.PropertyName = std::move(PropertyName);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function b1-Managed.BED_FSMNode_GI_Loading_TeleportTemplateBegin.GetNodeDescriptionInCS
// (Native, Event, Public, HasOutParams, BlueprintEvent, Const)
// Parameters:
// class FString                           ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash)

class FString UBED_FSMNode_GI_Loading_TeleportTemplateBegin::GetNodeDescriptionInCS() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BED_FSMNode_GI_Loading_TeleportTemplateBegin", "GetNodeDescriptionInCS");

	Params::BED_FSMNode_GI_Loading_TeleportTemplateBegin_GetNodeDescriptionInCS Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function b1-Managed.BED_FSMNode_GI_Loading_TeleportTemplateEnd.PostPropertyChanged
// (Native, Event, Public, BlueprintEvent)
// Parameters:
// class FString                           MemberName                                             (Parm, ZeroConstructor, HasGetValueTypeHash)
// class FString                           PropertyName                                           (Parm, ZeroConstructor, HasGetValueTypeHash)

void UBED_FSMNode_GI_Loading_TeleportTemplateEnd::PostPropertyChanged(const class FString& MemberName, const class FString& PropertyName)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BED_FSMNode_GI_Loading_TeleportTemplateEnd", "PostPropertyChanged");

	Params::BED_FSMNode_GI_Loading_TeleportTemplateEnd_PostPropertyChanged Parms{};

	Parms.MemberName = std::move(MemberName);
	Parms.PropertyName = std::move(PropertyName);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function b1-Managed.BED_FSMNode_GI_Loading_TeleportTemplateEnd.GetNodeDescriptionInCS
// (Native, Event, Public, HasOutParams, BlueprintEvent, Const)
// Parameters:
// class FString                           ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash)

class FString UBED_FSMNode_GI_Loading_TeleportTemplateEnd::GetNodeDescriptionInCS() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BED_FSMNode_GI_Loading_TeleportTemplateEnd", "GetNodeDescriptionInCS");

	Params::BED_FSMNode_GI_Loading_TeleportTemplateEnd_GetNodeDescriptionInCS Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function b1-Managed.BED_FSMNode_GI_Loading_TriggerBackToStandAlone.PostPropertyChanged
// (Native, Event, Public, BlueprintEvent)
// Parameters:
// class FString                           MemberName                                             (Parm, ZeroConstructor, HasGetValueTypeHash)
// class FString                           PropertyName                                           (Parm, ZeroConstructor, HasGetValueTypeHash)

void UBED_FSMNode_GI_Loading_TriggerBackToStandAlone::PostPropertyChanged(const class FString& MemberName, const class FString& PropertyName)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BED_FSMNode_GI_Loading_TriggerBackToStandAlone", "PostPropertyChanged");

	Params::BED_FSMNode_GI_Loading_TriggerBackToStandAlone_PostPropertyChanged Parms{};

	Parms.MemberName = std::move(MemberName);
	Parms.PropertyName = std::move(PropertyName);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function b1-Managed.BED_FSMNode_GI_Loading_TriggerBackToStandAlone.GetNodeDescriptionInCS
// (Native, Event, Public, HasOutParams, BlueprintEvent, Const)
// Parameters:
// class FString                           ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash)

class FString UBED_FSMNode_GI_Loading_TriggerBackToStandAlone::GetNodeDescriptionInCS() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BED_FSMNode_GI_Loading_TriggerBackToStandAlone", "GetNodeDescriptionInCS");

	Params::BED_FSMNode_GI_Loading_TriggerBackToStandAlone_GetNodeDescriptionInCS Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function b1-Managed.BED_FSMNode_GI_Loading_TriggerTeleportAndWaitFinish.PostPropertyChanged
// (Native, Event, Public, BlueprintEvent)
// Parameters:
// class FString                           MemberName                                             (Parm, ZeroConstructor, HasGetValueTypeHash)
// class FString                           PropertyName                                           (Parm, ZeroConstructor, HasGetValueTypeHash)

void UBED_FSMNode_GI_Loading_TriggerTeleportAndWaitFinish::PostPropertyChanged(const class FString& MemberName, const class FString& PropertyName)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BED_FSMNode_GI_Loading_TriggerTeleportAndWaitFinish", "PostPropertyChanged");

	Params::BED_FSMNode_GI_Loading_TriggerTeleportAndWaitFinish_PostPropertyChanged Parms{};

	Parms.MemberName = std::move(MemberName);
	Parms.PropertyName = std::move(PropertyName);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function b1-Managed.BED_FSMNode_GI_Loading_TriggerTeleportAndWaitFinish.GetNodeDescriptionInCS
// (Native, Event, Public, HasOutParams, BlueprintEvent, Const)
// Parameters:
// class FString                           ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash)

class FString UBED_FSMNode_GI_Loading_TriggerTeleportAndWaitFinish::GetNodeDescriptionInCS() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BED_FSMNode_GI_Loading_TriggerTeleportAndWaitFinish", "GetNodeDescriptionInCS");

	Params::BED_FSMNode_GI_Loading_TriggerTeleportAndWaitFinish_GetNodeDescriptionInCS Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function b1-Managed.BED_FSMNode_GI_Loading_UnlockScopeReplayScrubComplete.PostPropertyChanged
// (Native, Event, Public, BlueprintEvent)
// Parameters:
// class FString                           MemberName                                             (Parm, ZeroConstructor, HasGetValueTypeHash)
// class FString                           PropertyName                                           (Parm, ZeroConstructor, HasGetValueTypeHash)

void UBED_FSMNode_GI_Loading_UnlockScopeReplayScrubComplete::PostPropertyChanged(const class FString& MemberName, const class FString& PropertyName)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BED_FSMNode_GI_Loading_UnlockScopeReplayScrubComplete", "PostPropertyChanged");

	Params::BED_FSMNode_GI_Loading_UnlockScopeReplayScrubComplete_PostPropertyChanged Parms{};

	Parms.MemberName = std::move(MemberName);
	Parms.PropertyName = std::move(PropertyName);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function b1-Managed.BED_FSMNode_GI_Loading_UnlockScopeReplayScrubComplete.GetNodeDescriptionInCS
// (Native, Event, Public, HasOutParams, BlueprintEvent, Const)
// Parameters:
// class FString                           ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash)

class FString UBED_FSMNode_GI_Loading_UnlockScopeReplayScrubComplete::GetNodeDescriptionInCS() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BED_FSMNode_GI_Loading_UnlockScopeReplayScrubComplete", "GetNodeDescriptionInCS");

	Params::BED_FSMNode_GI_Loading_UnlockScopeReplayScrubComplete_GetNodeDescriptionInCS Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function b1-Managed.BED_FSMNode_GI_Loading_UnrealTravelToServer.PostPropertyChanged
// (Native, Event, Public, BlueprintEvent)
// Parameters:
// class FString                           MemberName                                             (Parm, ZeroConstructor, HasGetValueTypeHash)
// class FString                           PropertyName                                           (Parm, ZeroConstructor, HasGetValueTypeHash)

void UBED_FSMNode_GI_Loading_UnrealTravelToServer::PostPropertyChanged(const class FString& MemberName, const class FString& PropertyName)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BED_FSMNode_GI_Loading_UnrealTravelToServer", "PostPropertyChanged");

	Params::BED_FSMNode_GI_Loading_UnrealTravelToServer_PostPropertyChanged Parms{};

	Parms.MemberName = std::move(MemberName);
	Parms.PropertyName = std::move(PropertyName);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function b1-Managed.BED_FSMNode_GI_Loading_UnrealTravelToServer.GetNodeDescriptionInCS
// (Native, Event, Public, HasOutParams, BlueprintEvent, Const)
// Parameters:
// class FString                           ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash)

class FString UBED_FSMNode_GI_Loading_UnrealTravelToServer::GetNodeDescriptionInCS() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BED_FSMNode_GI_Loading_UnrealTravelToServer", "GetNodeDescriptionInCS");

	Params::BED_FSMNode_GI_Loading_UnrealTravelToServer_GetNodeDescriptionInCS Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function b1-Managed.BED_FSMNode_GI_Loading_WaitAllAssetLoadFinsh.PostPropertyChanged
// (Native, Event, Public, BlueprintEvent)
// Parameters:
// class FString                           MemberName                                             (Parm, ZeroConstructor, HasGetValueTypeHash)
// class FString                           PropertyName                                           (Parm, ZeroConstructor, HasGetValueTypeHash)

void UBED_FSMNode_GI_Loading_WaitAllAssetLoadFinsh::PostPropertyChanged(const class FString& MemberName, const class FString& PropertyName)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BED_FSMNode_GI_Loading_WaitAllAssetLoadFinsh", "PostPropertyChanged");

	Params::BED_FSMNode_GI_Loading_WaitAllAssetLoadFinsh_PostPropertyChanged Parms{};

	Parms.MemberName = std::move(MemberName);
	Parms.PropertyName = std::move(PropertyName);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function b1-Managed.BED_FSMNode_GI_Loading_WaitAllAssetLoadFinsh.GetNodeDescriptionInCS
// (Native, Event, Public, HasOutParams, BlueprintEvent, Const)
// Parameters:
// class FString                           ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash)

class FString UBED_FSMNode_GI_Loading_WaitAllAssetLoadFinsh::GetNodeDescriptionInCS() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BED_FSMNode_GI_Loading_WaitAllAssetLoadFinsh", "GetNodeDescriptionInCS");

	Params::BED_FSMNode_GI_Loading_WaitAllAssetLoadFinsh_GetNodeDescriptionInCS Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function b1-Managed.BED_FSMNode_GI_Loading_WaitCheck820DemoGameVersion.PostPropertyChanged
// (Native, Event, Public, BlueprintEvent)
// Parameters:
// class FString                           MemberName                                             (Parm, ZeroConstructor, HasGetValueTypeHash)
// class FString                           PropertyName                                           (Parm, ZeroConstructor, HasGetValueTypeHash)

void UBED_FSMNode_GI_Loading_WaitCheck820DemoGameVersion::PostPropertyChanged(const class FString& MemberName, const class FString& PropertyName)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BED_FSMNode_GI_Loading_WaitCheck820DemoGameVersion", "PostPropertyChanged");

	Params::BED_FSMNode_GI_Loading_WaitCheck820DemoGameVersion_PostPropertyChanged Parms{};

	Parms.MemberName = std::move(MemberName);
	Parms.PropertyName = std::move(PropertyName);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function b1-Managed.BED_FSMNode_GI_Loading_WaitCheck820DemoGameVersion.GetNodeDescriptionInCS
// (Native, Event, Public, HasOutParams, BlueprintEvent, Const)
// Parameters:
// class FString                           ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash)

class FString UBED_FSMNode_GI_Loading_WaitCheck820DemoGameVersion::GetNodeDescriptionInCS() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BED_FSMNode_GI_Loading_WaitCheck820DemoGameVersion", "GetNodeDescriptionInCS");

	Params::BED_FSMNode_GI_Loading_WaitCheck820DemoGameVersion_GetNodeDescriptionInCS Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function b1-Managed.BED_FSMNode_GI_Loading_WaitFirstPlayerLogin.PostPropertyChanged
// (Native, Event, Public, BlueprintEvent)
// Parameters:
// class FString                           MemberName                                             (Parm, ZeroConstructor, HasGetValueTypeHash)
// class FString                           PropertyName                                           (Parm, ZeroConstructor, HasGetValueTypeHash)

void UBED_FSMNode_GI_Loading_WaitFirstPlayerLogin::PostPropertyChanged(const class FString& MemberName, const class FString& PropertyName)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BED_FSMNode_GI_Loading_WaitFirstPlayerLogin", "PostPropertyChanged");

	Params::BED_FSMNode_GI_Loading_WaitFirstPlayerLogin_PostPropertyChanged Parms{};

	Parms.MemberName = std::move(MemberName);
	Parms.PropertyName = std::move(PropertyName);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function b1-Managed.BED_FSMNode_GI_Loading_WaitFirstPlayerLogin.GetNodeDescriptionInCS
// (Native, Event, Public, HasOutParams, BlueprintEvent, Const)
// Parameters:
// class FString                           ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash)

class FString UBED_FSMNode_GI_Loading_WaitFirstPlayerLogin::GetNodeDescriptionInCS() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BED_FSMNode_GI_Loading_WaitFirstPlayerLogin", "GetNodeDescriptionInCS");

	Params::BED_FSMNode_GI_Loading_WaitFirstPlayerLogin_GetNodeDescriptionInCS Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function b1-Managed.BED_FSMNode_GI_Loading_WaitGSLoginSuccess.PostPropertyChanged
// (Native, Event, Public, BlueprintEvent)
// Parameters:
// class FString                           MemberName                                             (Parm, ZeroConstructor, HasGetValueTypeHash)
// class FString                           PropertyName                                           (Parm, ZeroConstructor, HasGetValueTypeHash)

void UBED_FSMNode_GI_Loading_WaitGSLoginSuccess::PostPropertyChanged(const class FString& MemberName, const class FString& PropertyName)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BED_FSMNode_GI_Loading_WaitGSLoginSuccess", "PostPropertyChanged");

	Params::BED_FSMNode_GI_Loading_WaitGSLoginSuccess_PostPropertyChanged Parms{};

	Parms.MemberName = std::move(MemberName);
	Parms.PropertyName = std::move(PropertyName);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function b1-Managed.BED_FSMNode_GI_Loading_WaitGSLoginSuccess.GetNodeDescriptionInCS
// (Native, Event, Public, HasOutParams, BlueprintEvent, Const)
// Parameters:
// class FString                           ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash)

class FString UBED_FSMNode_GI_Loading_WaitGSLoginSuccess::GetNodeDescriptionInCS() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BED_FSMNode_GI_Loading_WaitGSLoginSuccess", "GetNodeDescriptionInCS");

	Params::BED_FSMNode_GI_Loading_WaitGSLoginSuccess_GetNodeDescriptionInCS Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function b1-Managed.BgmVolumeFunctionBinder.OnCollisionBeginOverlap
// (Native, Public, Private)
// Parameters:
// class UPrimitiveComponent*              OverlappedComponent                                    (ExportObject, Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// class AActor*                           OtherActor                                             (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// class UPrimitiveComponent*              OtherComp                                              (ExportObject, Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// int32                                   OtherBodyIndex                                         (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// uint8                                   bFromSweep                                             (Parm, NoDestructor, HasGetValueTypeHash)
// struct FHitResult                       SweepResult                                            (Parm, IsPlainOldData, NoDestructor)

void UBgmVolumeFunctionBinder::OnCollisionBeginOverlap(class UPrimitiveComponent* OverlappedComponent, class AActor* OtherActor, class UPrimitiveComponent* OtherComp, int32 OtherBodyIndex, uint8 bFromSweep, const struct FHitResult& SweepResult)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BgmVolumeFunctionBinder", "OnCollisionBeginOverlap");

	Params::BgmVolumeFunctionBinder_OnCollisionBeginOverlap Parms{};

	Parms.OverlappedComponent = OverlappedComponent;
	Parms.OtherActor = OtherActor;
	Parms.OtherComp = OtherComp;
	Parms.OtherBodyIndex = OtherBodyIndex;
	Parms.bFromSweep = bFromSweep;
	Parms.SweepResult = std::move(SweepResult);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function b1-Managed.BgmVolumeFunctionBinder.OnCollisionEndOverlap
// (Native, Public, Private)
// Parameters:
// class UPrimitiveComponent*              OverlappedComponent                                    (ExportObject, Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// class AActor*                           OtherActor                                             (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// class UPrimitiveComponent*              OtherComp                                              (ExportObject, Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// int32                                   OtherBodyIndex                                         (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// uint8                                   bFromSweep                                             (Parm, NoDestructor, HasGetValueTypeHash)
// struct FHitResult                       SweepResult                                            (Parm, IsPlainOldData, NoDestructor)

void UBgmVolumeFunctionBinder::OnCollisionEndOverlap(class UPrimitiveComponent* OverlappedComponent, class AActor* OtherActor, class UPrimitiveComponent* OtherComp, int32 OtherBodyIndex, uint8 bFromSweep, const struct FHitResult& SweepResult)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BgmVolumeFunctionBinder", "OnCollisionEndOverlap");

	Params::BgmVolumeFunctionBinder_OnCollisionEndOverlap Parms{};

	Parms.OverlappedComponent = OverlappedComponent;
	Parms.OtherActor = OtherActor;
	Parms.OtherComp = OtherComp;
	Parms.OtherBodyIndex = OtherBodyIndex;
	Parms.bFromSweep = bFromSweep;
	Parms.SweepResult = std::move(SweepResult);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function b1-Managed.BgmVolumeFunctionBinder.OnActorLeave
// (Native, Public, Private)
// Parameters:
// class AActor*                           OverlapActor                                           (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// class AActor*                           OtherActor                                             (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UBgmVolumeFunctionBinder::OnActorLeave(class AActor* OverlapActor, class AActor* OtherActor)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BgmVolumeFunctionBinder", "OnActorLeave");

	Params::BgmVolumeFunctionBinder_OnActorLeave Parms{};

	Parms.OverlapActor = OverlapActor;
	Parms.OtherActor = OtherActor;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function b1-Managed.BgmVolumeFunctionBinder.OnActorEnter
// (Native, Public, Private)
// Parameters:
// class AActor*                           OverlapActor                                           (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// class AActor*                           OtherActor                                             (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UBgmVolumeFunctionBinder::OnActorEnter(class AActor* OverlapActor, class AActor* OtherActor)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BgmVolumeFunctionBinder", "OnActorEnter");

	Params::BgmVolumeFunctionBinder_OnActorEnter Parms{};

	Parms.OverlapActor = OverlapActor;
	Parms.OtherActor = OtherActor;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function b1-Managed.BAN_GSLaunchCharacter.bIsNativeBranchingPointCS
// (Native, Event, Public, HasOutParams, BlueprintEvent, Const)
// Parameters:
// uint8                                   ReturnValue                                            (Parm, OutParm, ReturnParm, NoDestructor, HasGetValueTypeHash)

uint8 UBAN_GSLaunchCharacter::bIsNativeBranchingPointCS() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BAN_GSLaunchCharacter", "bIsNativeBranchingPointCS");

	Params::BAN_GSLaunchCharacter_bIsNativeBranchingPointCS Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function b1-Managed.BAN_GSLaunchCharacter.GSNotifyCS
// (Native, Event, Public, Protected, BlueprintEvent, Const)
// Parameters:
// struct FUStGSNotifyParam                NotifyParam                                            (Parm, ZeroConstructor, IsPlainOldData, NoDestructor)

void UBAN_GSLaunchCharacter::GSNotifyCS(const struct FUStGSNotifyParam& NotifyParam) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BAN_GSLaunchCharacter", "GSNotifyCS");

	Params::BAN_GSLaunchCharacter_GSNotifyCS Parms{};

	Parms.NotifyParam = std::move(NotifyParam);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function b1-Managed.BED_FSMNode_GI_Loading_WaitImportantAssetLoadFinsh.PostPropertyChanged
// (Native, Event, Public, BlueprintEvent)
// Parameters:
// class FString                           MemberName                                             (Parm, ZeroConstructor, HasGetValueTypeHash)
// class FString                           PropertyName                                           (Parm, ZeroConstructor, HasGetValueTypeHash)

void UBED_FSMNode_GI_Loading_WaitImportantAssetLoadFinsh::PostPropertyChanged(const class FString& MemberName, const class FString& PropertyName)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BED_FSMNode_GI_Loading_WaitImportantAssetLoadFinsh", "PostPropertyChanged");

	Params::BED_FSMNode_GI_Loading_WaitImportantAssetLoadFinsh_PostPropertyChanged Parms{};

	Parms.MemberName = std::move(MemberName);
	Parms.PropertyName = std::move(PropertyName);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function b1-Managed.BED_FSMNode_GI_Loading_WaitImportantAssetLoadFinsh.GetNodeDescriptionInCS
// (Native, Event, Public, HasOutParams, BlueprintEvent, Const)
// Parameters:
// class FString                           ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash)

class FString UBED_FSMNode_GI_Loading_WaitImportantAssetLoadFinsh::GetNodeDescriptionInCS() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BED_FSMNode_GI_Loading_WaitImportantAssetLoadFinsh", "GetNodeDescriptionInCS");

	Params::BED_FSMNode_GI_Loading_WaitImportantAssetLoadFinsh_GetNodeDescriptionInCS Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function b1-Managed.BED_FSMNode_GI_Loading_WaitLevelStreamingLoad.PostPropertyChanged
// (Native, Event, Public, BlueprintEvent)
// Parameters:
// class FString                           MemberName                                             (Parm, ZeroConstructor, HasGetValueTypeHash)
// class FString                           PropertyName                                           (Parm, ZeroConstructor, HasGetValueTypeHash)

void UBED_FSMNode_GI_Loading_WaitLevelStreamingLoad::PostPropertyChanged(const class FString& MemberName, const class FString& PropertyName)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BED_FSMNode_GI_Loading_WaitLevelStreamingLoad", "PostPropertyChanged");

	Params::BED_FSMNode_GI_Loading_WaitLevelStreamingLoad_PostPropertyChanged Parms{};

	Parms.MemberName = std::move(MemberName);
	Parms.PropertyName = std::move(PropertyName);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function b1-Managed.BED_FSMNode_GI_Loading_WaitLevelStreamingLoad.GetNodeDescriptionInCS
// (Native, Event, Public, HasOutParams, BlueprintEvent, Const)
// Parameters:
// class FString                           ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash)

class FString UBED_FSMNode_GI_Loading_WaitLevelStreamingLoad::GetNodeDescriptionInCS() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BED_FSMNode_GI_Loading_WaitLevelStreamingLoad", "GetNodeDescriptionInCS");

	Params::BED_FSMNode_GI_Loading_WaitLevelStreamingLoad_GetNodeDescriptionInCS Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function b1-Managed.GSEQC_ProjectileContext.ProvideActorsSetCS
// (Native, Event, Public, BlueprintEvent, Const)
// Parameters:
// class UObject*                          QuerierObject                                          (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// class AActor*                           QuerierActor                                           (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UGSEQC_ProjectileContext::ProvideActorsSetCS(class UObject* QuerierObject, class AActor* QuerierActor) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GSEQC_ProjectileContext", "ProvideActorsSetCS");

	Params::GSEQC_ProjectileContext_ProvideActorsSetCS Parms{};

	Parms.QuerierObject = QuerierObject;
	Parms.QuerierActor = QuerierActor;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function b1-Managed.BED_FSMNode_GI_Loading_WaitLocalPlayerStartPlay.PostPropertyChanged
// (Native, Event, Public, BlueprintEvent)
// Parameters:
// class FString                           MemberName                                             (Parm, ZeroConstructor, HasGetValueTypeHash)
// class FString                           PropertyName                                           (Parm, ZeroConstructor, HasGetValueTypeHash)

void UBED_FSMNode_GI_Loading_WaitLocalPlayerStartPlay::PostPropertyChanged(const class FString& MemberName, const class FString& PropertyName)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BED_FSMNode_GI_Loading_WaitLocalPlayerStartPlay", "PostPropertyChanged");

	Params::BED_FSMNode_GI_Loading_WaitLocalPlayerStartPlay_PostPropertyChanged Parms{};

	Parms.MemberName = std::move(MemberName);
	Parms.PropertyName = std::move(PropertyName);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function b1-Managed.BED_FSMNode_GI_Loading_WaitLocalPlayerStartPlay.GetNodeDescriptionInCS
// (Native, Event, Public, HasOutParams, BlueprintEvent, Const)
// Parameters:
// class FString                           ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash)

class FString UBED_FSMNode_GI_Loading_WaitLocalPlayerStartPlay::GetNodeDescriptionInCS() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BED_FSMNode_GI_Loading_WaitLocalPlayerStartPlay", "GetNodeDescriptionInCS");

	Params::BED_FSMNode_GI_Loading_WaitLocalPlayerStartPlay_GetNodeDescriptionInCS Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function b1-Managed.BED_FSMNode_GI_Loading_WaitMatchStart.PostPropertyChanged
// (Native, Event, Public, BlueprintEvent)
// Parameters:
// class FString                           MemberName                                             (Parm, ZeroConstructor, HasGetValueTypeHash)
// class FString                           PropertyName                                           (Parm, ZeroConstructor, HasGetValueTypeHash)

void UBED_FSMNode_GI_Loading_WaitMatchStart::PostPropertyChanged(const class FString& MemberName, const class FString& PropertyName)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BED_FSMNode_GI_Loading_WaitMatchStart", "PostPropertyChanged");

	Params::BED_FSMNode_GI_Loading_WaitMatchStart_PostPropertyChanged Parms{};

	Parms.MemberName = std::move(MemberName);
	Parms.PropertyName = std::move(PropertyName);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function b1-Managed.BED_FSMNode_GI_Loading_WaitMatchStart.GetNodeDescriptionInCS
// (Native, Event, Public, HasOutParams, BlueprintEvent, Const)
// Parameters:
// class FString                           ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash)

class FString UBED_FSMNode_GI_Loading_WaitMatchStart::GetNodeDescriptionInCS() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BED_FSMNode_GI_Loading_WaitMatchStart", "GetNodeDescriptionInCS");

	Params::BED_FSMNode_GI_Loading_WaitMatchStart_GetNodeDescriptionInCS Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function b1-Managed.BAN_GSSetCachePoint.bIsNativeBranchingPointCS
// (Native, Event, Public, HasOutParams, BlueprintEvent, Const)
// Parameters:
// uint8                                   ReturnValue                                            (Parm, OutParm, ReturnParm, NoDestructor, HasGetValueTypeHash)

uint8 UBAN_GSSetCachePoint::bIsNativeBranchingPointCS() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BAN_GSSetCachePoint", "bIsNativeBranchingPointCS");

	Params::BAN_GSSetCachePoint_bIsNativeBranchingPointCS Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function b1-Managed.BAN_GSSetCachePoint.GSNotifyCS
// (Native, Event, Public, Protected, BlueprintEvent, Const)
// Parameters:
// struct FUStGSNotifyParam                NotifyParam                                            (Parm, ZeroConstructor, IsPlainOldData, NoDestructor)

void UBAN_GSSetCachePoint::GSNotifyCS(const struct FUStGSNotifyParam& NotifyParam) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BAN_GSSetCachePoint", "GSNotifyCS");

	Params::BAN_GSSetCachePoint_GSNotifyCS Parms{};

	Parms.NotifyParam = std::move(NotifyParam);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function b1-Managed.BED_FSMNode_GI_Loading_WaitPlayerCameraBlend.PostPropertyChanged
// (Native, Event, Public, BlueprintEvent)
// Parameters:
// class FString                           MemberName                                             (Parm, ZeroConstructor, HasGetValueTypeHash)
// class FString                           PropertyName                                           (Parm, ZeroConstructor, HasGetValueTypeHash)

void UBED_FSMNode_GI_Loading_WaitPlayerCameraBlend::PostPropertyChanged(const class FString& MemberName, const class FString& PropertyName)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BED_FSMNode_GI_Loading_WaitPlayerCameraBlend", "PostPropertyChanged");

	Params::BED_FSMNode_GI_Loading_WaitPlayerCameraBlend_PostPropertyChanged Parms{};

	Parms.MemberName = std::move(MemberName);
	Parms.PropertyName = std::move(PropertyName);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function b1-Managed.BED_FSMNode_GI_Loading_WaitPlayerCameraBlend.GetNodeDescriptionInCS
// (Native, Event, Public, HasOutParams, BlueprintEvent, Const)
// Parameters:
// class FString                           ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash)

class FString UBED_FSMNode_GI_Loading_WaitPlayerCameraBlend::GetNodeDescriptionInCS() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BED_FSMNode_GI_Loading_WaitPlayerCameraBlend", "GetNodeDescriptionInCS");

	Params::BED_FSMNode_GI_Loading_WaitPlayerCameraBlend_GetNodeDescriptionInCS Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function b1-Managed.BAN_GSQTEDecHP.GSNotifyCS
// (Native, Event, Public, Protected, BlueprintEvent, Const)
// Parameters:
// struct FUStGSNotifyParam                NotifyParam                                            (Parm, ZeroConstructor, IsPlainOldData, NoDestructor)

void UBAN_GSQTEDecHP::GSNotifyCS(const struct FUStGSNotifyParam& NotifyParam) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BAN_GSQTEDecHP", "GSNotifyCS");

	Params::BAN_GSQTEDecHP_GSNotifyCS Parms{};

	Parms.NotifyParam = std::move(NotifyParam);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function b1-Managed.BED_FSMNode_GI_Loading_WaitPostLoadMapClient.PostPropertyChanged
// (Native, Event, Public, BlueprintEvent)
// Parameters:
// class FString                           MemberName                                             (Parm, ZeroConstructor, HasGetValueTypeHash)
// class FString                           PropertyName                                           (Parm, ZeroConstructor, HasGetValueTypeHash)

void UBED_FSMNode_GI_Loading_WaitPostLoadMapClient::PostPropertyChanged(const class FString& MemberName, const class FString& PropertyName)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BED_FSMNode_GI_Loading_WaitPostLoadMapClient", "PostPropertyChanged");

	Params::BED_FSMNode_GI_Loading_WaitPostLoadMapClient_PostPropertyChanged Parms{};

	Parms.MemberName = std::move(MemberName);
	Parms.PropertyName = std::move(PropertyName);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function b1-Managed.BED_FSMNode_GI_Loading_WaitPostLoadMapClient.GetNodeDescriptionInCS
// (Native, Event, Public, HasOutParams, BlueprintEvent, Const)
// Parameters:
// class FString                           ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash)

class FString UBED_FSMNode_GI_Loading_WaitPostLoadMapClient::GetNodeDescriptionInCS() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BED_FSMNode_GI_Loading_WaitPostLoadMapClient", "GetNodeDescriptionInCS");

	Params::BED_FSMNode_GI_Loading_WaitPostLoadMapClient_GetNodeDescriptionInCS Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function b1-Managed.BED_FSMNode_GI_Loading_WaitPsoCachePrecompileFinish.PostPropertyChanged
// (Native, Event, Public, BlueprintEvent)
// Parameters:
// class FString                           MemberName                                             (Parm, ZeroConstructor, HasGetValueTypeHash)
// class FString                           PropertyName                                           (Parm, ZeroConstructor, HasGetValueTypeHash)

void UBED_FSMNode_GI_Loading_WaitPsoCachePrecompileFinish::PostPropertyChanged(const class FString& MemberName, const class FString& PropertyName)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BED_FSMNode_GI_Loading_WaitPsoCachePrecompileFinish", "PostPropertyChanged");

	Params::BED_FSMNode_GI_Loading_WaitPsoCachePrecompileFinish_PostPropertyChanged Parms{};

	Parms.MemberName = std::move(MemberName);
	Parms.PropertyName = std::move(PropertyName);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function b1-Managed.BED_FSMNode_GI_Loading_WaitPsoCachePrecompileFinish.GetNodeDescriptionInCS
// (Native, Event, Public, HasOutParams, BlueprintEvent, Const)
// Parameters:
// class FString                           ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash)

class FString UBED_FSMNode_GI_Loading_WaitPsoCachePrecompileFinish::GetNodeDescriptionInCS() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BED_FSMNode_GI_Loading_WaitPsoCachePrecompileFinish", "GetNodeDescriptionInCS");

	Params::BED_FSMNode_GI_Loading_WaitPsoCachePrecompileFinish_GetNodeDescriptionInCS Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function b1-Managed.BED_FSMNode_GI_Loading_WaitReplayPlayerSpawn.PostPropertyChanged
// (Native, Event, Public, BlueprintEvent)
// Parameters:
// class FString                           MemberName                                             (Parm, ZeroConstructor, HasGetValueTypeHash)
// class FString                           PropertyName                                           (Parm, ZeroConstructor, HasGetValueTypeHash)

void UBED_FSMNode_GI_Loading_WaitReplayPlayerSpawn::PostPropertyChanged(const class FString& MemberName, const class FString& PropertyName)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BED_FSMNode_GI_Loading_WaitReplayPlayerSpawn", "PostPropertyChanged");

	Params::BED_FSMNode_GI_Loading_WaitReplayPlayerSpawn_PostPropertyChanged Parms{};

	Parms.MemberName = std::move(MemberName);
	Parms.PropertyName = std::move(PropertyName);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function b1-Managed.BED_FSMNode_GI_Loading_WaitReplayPlayerSpawn.GetNodeDescriptionInCS
// (Native, Event, Public, HasOutParams, BlueprintEvent, Const)
// Parameters:
// class FString                           ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash)

class FString UBED_FSMNode_GI_Loading_WaitReplayPlayerSpawn::GetNodeDescriptionInCS() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BED_FSMNode_GI_Loading_WaitReplayPlayerSpawn", "GetNodeDescriptionInCS");

	Params::BED_FSMNode_GI_Loading_WaitReplayPlayerSpawn_GetNodeDescriptionInCS Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function b1-Managed.BAN_GSReSetHoldShield.bIsNativeBranchingPointCS
// (Native, Event, Public, HasOutParams, BlueprintEvent, Const)
// Parameters:
// uint8                                   ReturnValue                                            (Parm, OutParm, ReturnParm, NoDestructor, HasGetValueTypeHash)

uint8 UBAN_GSReSetHoldShield::bIsNativeBranchingPointCS() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BAN_GSReSetHoldShield", "bIsNativeBranchingPointCS");

	Params::BAN_GSReSetHoldShield_bIsNativeBranchingPointCS Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function b1-Managed.BAN_GSReSetHoldShield.GSValidateInputCS
// (Native, Event, Public, BlueprintEvent, Const)
// Parameters:
// class AActor*                           Actor                                                  (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UBAN_GSReSetHoldShield::GSValidateInputCS(class AActor* Actor) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BAN_GSReSetHoldShield", "GSValidateInputCS");

	Params::BAN_GSReSetHoldShield_GSValidateInputCS Parms{};

	Parms.Actor = Actor;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function b1-Managed.BAN_GSReSetHoldShield.GSNotifyCS
// (Native, Event, Public, Protected, BlueprintEvent, Const)
// Parameters:
// struct FUStGSNotifyParam                NotifyParam                                            (Parm, ZeroConstructor, IsPlainOldData, NoDestructor)

void UBAN_GSReSetHoldShield::GSNotifyCS(const struct FUStGSNotifyParam& NotifyParam) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BAN_GSReSetHoldShield", "GSNotifyCS");

	Params::BAN_GSReSetHoldShield_GSNotifyCS Parms{};

	Parms.NotifyParam = std::move(NotifyParam);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function b1-Managed.BED_FSMNode_GI_Loading_WaitStartGamePsoPrecompileFinish.PostPropertyChanged
// (Native, Event, Public, BlueprintEvent)
// Parameters:
// class FString                           MemberName                                             (Parm, ZeroConstructor, HasGetValueTypeHash)
// class FString                           PropertyName                                           (Parm, ZeroConstructor, HasGetValueTypeHash)

void UBED_FSMNode_GI_Loading_WaitStartGamePsoPrecompileFinish::PostPropertyChanged(const class FString& MemberName, const class FString& PropertyName)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BED_FSMNode_GI_Loading_WaitStartGamePsoPrecompileFinish", "PostPropertyChanged");

	Params::BED_FSMNode_GI_Loading_WaitStartGamePsoPrecompileFinish_PostPropertyChanged Parms{};

	Parms.MemberName = std::move(MemberName);
	Parms.PropertyName = std::move(PropertyName);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function b1-Managed.BED_FSMNode_GI_Loading_WaitStartGamePsoPrecompileFinish.GetNodeDescriptionInCS
// (Native, Event, Public, HasOutParams, BlueprintEvent, Const)
// Parameters:
// class FString                           ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash)

class FString UBED_FSMNode_GI_Loading_WaitStartGamePsoPrecompileFinish::GetNodeDescriptionInCS() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BED_FSMNode_GI_Loading_WaitStartGamePsoPrecompileFinish", "GetNodeDescriptionInCS");

	Params::BED_FSMNode_GI_Loading_WaitStartGamePsoPrecompileFinish_GetNodeDescriptionInCS Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function b1-Managed.BED_FSMNode_GI_Loading_WaitTick.PostPropertyChanged
// (Native, Event, Public, BlueprintEvent)
// Parameters:
// class FString                           MemberName                                             (Parm, ZeroConstructor, HasGetValueTypeHash)
// class FString                           PropertyName                                           (Parm, ZeroConstructor, HasGetValueTypeHash)

void UBED_FSMNode_GI_Loading_WaitTick::PostPropertyChanged(const class FString& MemberName, const class FString& PropertyName)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BED_FSMNode_GI_Loading_WaitTick", "PostPropertyChanged");

	Params::BED_FSMNode_GI_Loading_WaitTick_PostPropertyChanged Parms{};

	Parms.MemberName = std::move(MemberName);
	Parms.PropertyName = std::move(PropertyName);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function b1-Managed.BED_FSMNode_GI_Loading_WaitTick.GetNodeDescriptionInCS
// (Native, Event, Public, HasOutParams, BlueprintEvent, Const)
// Parameters:
// class FString                           ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash)

class FString UBED_FSMNode_GI_Loading_WaitTick::GetNodeDescriptionInCS() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BED_FSMNode_GI_Loading_WaitTick", "GetNodeDescriptionInCS");

	Params::BED_FSMNode_GI_Loading_WaitTick_GetNodeDescriptionInCS Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function b1-Managed.BANS_JumpWindow.GSNotifyBeginCS
// (Native, Event, Public, Protected, BlueprintEvent, Const)
// Parameters:
// struct FUStGSNotifyParam                NotifyParam                                            (Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
// float                                   TotalDuration                                          (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UBANS_JumpWindow::GSNotifyBeginCS(const struct FUStGSNotifyParam& NotifyParam, float TotalDuration) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BANS_JumpWindow", "GSNotifyBeginCS");

	Params::BANS_JumpWindow_GSNotifyBeginCS Parms{};

	Parms.NotifyParam = std::move(NotifyParam);
	Parms.TotalDuration = TotalDuration;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function b1-Managed.BANS_JumpWindow.GSNotifyTickCS
// (Native, Event, Public, Protected, BlueprintEvent, Const)
// Parameters:
// struct FUStGSNotifyParam                NotifyParam                                            (Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
// float                                   FrameDeltaTime                                         (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UBANS_JumpWindow::GSNotifyTickCS(const struct FUStGSNotifyParam& NotifyParam, float FrameDeltaTime) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BANS_JumpWindow", "GSNotifyTickCS");

	Params::BANS_JumpWindow_GSNotifyTickCS Parms{};

	Parms.NotifyParam = std::move(NotifyParam);
	Parms.FrameDeltaTime = FrameDeltaTime;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function b1-Managed.BANS_JumpWindow.GSNotifyEndCS
// (Native, Event, Public, Protected, BlueprintEvent, Const)
// Parameters:
// struct FUStGSNotifyParam                NotifyParam                                            (Parm, ZeroConstructor, IsPlainOldData, NoDestructor)

void UBANS_JumpWindow::GSNotifyEndCS(const struct FUStGSNotifyParam& NotifyParam) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BANS_JumpWindow", "GSNotifyEndCS");

	Params::BANS_JumpWindow_GSNotifyEndCS Parms{};

	Parms.NotifyParam = std::move(NotifyParam);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function b1-Managed.BUI_ReplayPanel.OnPlayOrPauseButtonClicked
// (Native, Public, Private)

void UBUI_ReplayPanel::OnPlayOrPauseButtonClicked()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BUI_ReplayPanel", "OnPlayOrPauseButtonClicked");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function b1-Managed.BUI_ReplayPanel.OnForwardButtonClicked
// (Native, Public, Private)

void UBUI_ReplayPanel::OnForwardButtonClicked()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BUI_ReplayPanel", "OnForwardButtonClicked");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function b1-Managed.BUI_ReplayPanel.OnSliderValueChanged
// (Native, Public, Private)
// Parameters:
// float                                   Value                                                  (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UBUI_ReplayPanel::OnSliderValueChanged(float Value)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BUI_ReplayPanel", "OnSliderValueChanged");

	Params::BUI_ReplayPanel_OnSliderValueChanged Parms{};

	Parms.Value = Value;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function b1-Managed.BUI_ReplayPanel.OnMouseCaptureBegin
// (Native, Public, Private)

void UBUI_ReplayPanel::OnMouseCaptureBegin()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BUI_ReplayPanel", "OnMouseCaptureBegin");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function b1-Managed.BUI_ReplayPanel.OnBackButtonClicked
// (Native, Public, Private)

void UBUI_ReplayPanel::OnBackButtonClicked()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BUI_ReplayPanel", "OnBackButtonClicked");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function b1-Managed.BUI_ReplayPanel.OnStopButtonClicked
// (Native, Public, Private)

void UBUI_ReplayPanel::OnStopButtonClicked()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BUI_ReplayPanel", "OnStopButtonClicked");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function b1-Managed.BUI_ReplayPanel.OnMouseCaptureEnd
// (Native, Public, Private)

void UBUI_ReplayPanel::OnMouseCaptureEnd()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BUI_ReplayPanel", "OnMouseCaptureEnd");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function b1-Managed.BED_FSMNode_GI_Loading_WaitUntilGameStateInit.PostPropertyChanged
// (Native, Event, Public, BlueprintEvent)
// Parameters:
// class FString                           MemberName                                             (Parm, ZeroConstructor, HasGetValueTypeHash)
// class FString                           PropertyName                                           (Parm, ZeroConstructor, HasGetValueTypeHash)

void UBED_FSMNode_GI_Loading_WaitUntilGameStateInit::PostPropertyChanged(const class FString& MemberName, const class FString& PropertyName)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BED_FSMNode_GI_Loading_WaitUntilGameStateInit", "PostPropertyChanged");

	Params::BED_FSMNode_GI_Loading_WaitUntilGameStateInit_PostPropertyChanged Parms{};

	Parms.MemberName = std::move(MemberName);
	Parms.PropertyName = std::move(PropertyName);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function b1-Managed.BED_FSMNode_GI_Loading_WaitUntilGameStateInit.GetNodeDescriptionInCS
// (Native, Event, Public, HasOutParams, BlueprintEvent, Const)
// Parameters:
// class FString                           ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash)

class FString UBED_FSMNode_GI_Loading_WaitUntilGameStateInit::GetNodeDescriptionInCS() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BED_FSMNode_GI_Loading_WaitUntilGameStateInit", "GetNodeDescriptionInCS");

	Params::BED_FSMNode_GI_Loading_WaitUntilGameStateInit_GetNodeDescriptionInCS Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function b1-Managed.BANS_GSTireMarks.GSNotifyBeginCS
// (Native, Event, Public, Protected, BlueprintEvent, Const)
// Parameters:
// struct FUStGSNotifyParam                NotifyParam                                            (Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
// float                                   TotalDuration                                          (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UBANS_GSTireMarks::GSNotifyBeginCS(const struct FUStGSNotifyParam& NotifyParam, float TotalDuration) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BANS_GSTireMarks", "GSNotifyBeginCS");

	Params::BANS_GSTireMarks_GSNotifyBeginCS Parms{};

	Parms.NotifyParam = std::move(NotifyParam);
	Parms.TotalDuration = TotalDuration;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function b1-Managed.BANS_GSTireMarks.GSNotifyTickCS
// (Native, Event, Public, Protected, BlueprintEvent, Const)
// Parameters:
// struct FUStGSNotifyParam                NotifyParam                                            (Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
// float                                   FrameDeltaTime                                         (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UBANS_GSTireMarks::GSNotifyTickCS(const struct FUStGSNotifyParam& NotifyParam, float FrameDeltaTime) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BANS_GSTireMarks", "GSNotifyTickCS");

	Params::BANS_GSTireMarks_GSNotifyTickCS Parms{};

	Parms.NotifyParam = std::move(NotifyParam);
	Parms.FrameDeltaTime = FrameDeltaTime;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function b1-Managed.BANS_GSTireMarks.GSNotifyEndCS
// (Native, Event, Public, Protected, BlueprintEvent, Const)
// Parameters:
// struct FUStGSNotifyParam                NotifyParam                                            (Parm, ZeroConstructor, IsPlainOldData, NoDestructor)

void UBANS_GSTireMarks::GSNotifyEndCS(const struct FUStGSNotifyParam& NotifyParam) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BANS_GSTireMarks", "GSNotifyEndCS");

	Params::BANS_GSTireMarks_GSNotifyEndCS Parms{};

	Parms.NotifyParam = std::move(NotifyParam);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function b1-Managed.BED_FSMNode_PS_TransactionAnyState.PostPropertyChanged
// (Native, Event, Public, BlueprintEvent)
// Parameters:
// class FString                           MemberName                                             (Parm, ZeroConstructor, HasGetValueTypeHash)
// class FString                           PropertyName                                           (Parm, ZeroConstructor, HasGetValueTypeHash)

void UBED_FSMNode_PS_TransactionAnyState::PostPropertyChanged(const class FString& MemberName, const class FString& PropertyName)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BED_FSMNode_PS_TransactionAnyState", "PostPropertyChanged");

	Params::BED_FSMNode_PS_TransactionAnyState_PostPropertyChanged Parms{};

	Parms.MemberName = std::move(MemberName);
	Parms.PropertyName = std::move(PropertyName);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function b1-Managed.BED_FSMNode_PS_Transaction_TransactionTask.PostPropertyChanged
// (Native, Event, Public, BlueprintEvent)
// Parameters:
// class FString                           MemberName                                             (Parm, ZeroConstructor, HasGetValueTypeHash)
// class FString                           PropertyName                                           (Parm, ZeroConstructor, HasGetValueTypeHash)

void UBED_FSMNode_PS_Transaction_TransactionTask::PostPropertyChanged(const class FString& MemberName, const class FString& PropertyName)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BED_FSMNode_PS_Transaction_TransactionTask", "PostPropertyChanged");

	Params::BED_FSMNode_PS_Transaction_TransactionTask_PostPropertyChanged Parms{};

	Parms.MemberName = std::move(MemberName);
	Parms.PropertyName = std::move(PropertyName);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function b1-Managed.BED_FSMNode_PS_Transaction_TransactionTask.GetNodeDescriptionInCS
// (Native, Event, Public, HasOutParams, BlueprintEvent, Const)
// Parameters:
// class FString                           ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash)

class FString UBED_FSMNode_PS_Transaction_TransactionTask::GetNodeDescriptionInCS() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BED_FSMNode_PS_Transaction_TransactionTask", "GetNodeDescriptionInCS");

	Params::BED_FSMNode_PS_Transaction_TransactionTask_GetNodeDescriptionInCS Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function b1-Managed.BED_GuideAsset.GetRerouteNodeClass
// (Native, Event, Public, HasOutParams, BlueprintEvent, Const)
// Parameters:
// class UClass*                           ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

class UClass* UBED_GuideAsset::GetRerouteNodeClass() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BED_GuideAsset", "GetRerouteNodeClass");

	Params::BED_GuideAsset_GetRerouteNodeClass Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function b1-Managed.BED_GuideAsset.GetStartNodeClass
// (Native, Event, Public, HasOutParams, BlueprintEvent, Const)
// Parameters:
// class UClass*                           ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

class UClass* UBED_GuideAsset::GetStartNodeClass() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BED_GuideAsset", "GetStartNodeClass");

	Params::BED_GuideAsset_GetStartNodeClass Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function b1-Managed.BED_GuideAsset.GetViewType
// (Native, Event, Public, HasOutParams, BlueprintEvent, Const)
// Parameters:
// ECalliopeViewType                       ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

ECalliopeViewType UBED_GuideAsset::GetViewType() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BED_GuideAsset", "GetViewType");

	Params::BED_GuideAsset_GetViewType Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function b1-Managed.MovieNodeInstance_Timer.OnCompletion
// (Native, Public, Protected)

void UMovieNodeInstance_Timer::OnCompletion()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MovieNodeInstance_Timer", "OnCompletion");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function b1-Managed.MovieNodeInstance_Timer.OnStep
// (Native, Public, Protected)

void UMovieNodeInstance_Timer::OnStep()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MovieNodeInstance_Timer", "OnStep");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function b1-Managed.BANS_GSTriggerSkillCam.GSValidateInputCS
// (Native, Event, Public, BlueprintEvent, Const)
// Parameters:
// class AActor*                           Actor                                                  (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UBANS_GSTriggerSkillCam::GSValidateInputCS(class AActor* Actor) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BANS_GSTriggerSkillCam", "GSValidateInputCS");

	Params::BANS_GSTriggerSkillCam_GSValidateInputCS Parms{};

	Parms.Actor = Actor;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function b1-Managed.BANS_GSTriggerSkillCam.GSNotifyBeginCS
// (Native, Event, Public, Protected, BlueprintEvent, Const)
// Parameters:
// struct FUStGSNotifyParam                NotifyParam                                            (Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
// float                                   TotalDuration                                          (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UBANS_GSTriggerSkillCam::GSNotifyBeginCS(const struct FUStGSNotifyParam& NotifyParam, float TotalDuration) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BANS_GSTriggerSkillCam", "GSNotifyBeginCS");

	Params::BANS_GSTriggerSkillCam_GSNotifyBeginCS Parms{};

	Parms.NotifyParam = std::move(NotifyParam);
	Parms.TotalDuration = TotalDuration;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function b1-Managed.BANS_GSTriggerSkillCam.GSNotifyTickCS
// (Native, Event, Public, Protected, BlueprintEvent, Const)
// Parameters:
// struct FUStGSNotifyParam                NotifyParam                                            (Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
// float                                   FrameDeltaTime                                         (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UBANS_GSTriggerSkillCam::GSNotifyTickCS(const struct FUStGSNotifyParam& NotifyParam, float FrameDeltaTime) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BANS_GSTriggerSkillCam", "GSNotifyTickCS");

	Params::BANS_GSTriggerSkillCam_GSNotifyTickCS Parms{};

	Parms.NotifyParam = std::move(NotifyParam);
	Parms.FrameDeltaTime = FrameDeltaTime;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function b1-Managed.BANS_GSTriggerSkillCam.GSNotifyEndCS
// (Native, Event, Public, Protected, BlueprintEvent, Const)
// Parameters:
// struct FUStGSNotifyParam                NotifyParam                                            (Parm, ZeroConstructor, IsPlainOldData, NoDestructor)

void UBANS_GSTriggerSkillCam::GSNotifyEndCS(const struct FUStGSNotifyParam& NotifyParam) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BANS_GSTriggerSkillCam", "GSNotifyEndCS");

	Params::BANS_GSTriggerSkillCam_GSNotifyEndCS Parms{};

	Parms.NotifyParam = std::move(NotifyParam);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function b1-Managed.BED_GuideNode_Listener.GetContextOutputsInCS
// (Native, Event, Public, HasOutParams, BlueprintEvent)
// Parameters:
// TArray<class FName>                     ReturnValue                                            (Parm, OutParm, ReturnParm)

TArray<class FName> UBED_GuideNode_Listener::GetContextOutputsInCS()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BED_GuideNode_Listener", "GetContextOutputsInCS");

	Params::BED_GuideNode_Listener_GetContextOutputsInCS Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function b1-Managed.BGUFuncLibProjectile.GetAllProjectileBPPathFromDesc_without_C
// (Native, Static, Public, HasOutParams, BlueprintCallable)
// Parameters:
// TArray<class FString>                   CurrentUsedBPPath                                      (Parm, OutParm)

void UBGUFuncLibProjectile::GetAllProjectileBPPathFromDesc_without_C(TArray<class FString>* CurrentUsedBPPath)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("BGUFuncLibProjectile", "GetAllProjectileBPPathFromDesc_without_C");

	Params::BGUFuncLibProjectile_GetAllProjectileBPPathFromDesc_without_C Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	if (CurrentUsedBPPath != nullptr)
		*CurrentUsedBPPath = std::move(Parms.CurrentUsedBPPath);
}


// Function b1-Managed.BGUFuncLibProjectile.GetAllProjectileBPPathFromDesc_with_C
// (Native, Static, Public, HasOutParams, BlueprintCallable)
// Parameters:
// TArray<class FString>                   CurrentUsedBPPath                                      (Parm, OutParm)

void UBGUFuncLibProjectile::GetAllProjectileBPPathFromDesc_with_C(TArray<class FString>* CurrentUsedBPPath)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("BGUFuncLibProjectile", "GetAllProjectileBPPathFromDesc_with_C");

	Params::BGUFuncLibProjectile_GetAllProjectileBPPathFromDesc_with_C Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	if (CurrentUsedBPPath != nullptr)
		*CurrentUsedBPPath = std::move(Parms.CurrentUsedBPPath);
}


// Function b1-Managed.BGUFuncLibProjectile.ProjectileAssetMoveCompToBP_Single
// (Native, Static, Public, HasOutParams, BlueprintCallable)
// Parameters:
// class ABGUProjectileBaseActor*          ProjectileBaseActor_CDO                                (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// class UBlueprint*                       BP                                                     (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// class FString                           ErrorLog                                               (Parm, OutParm, ZeroConstructor, HasGetValueTypeHash)
// uint8                                   bNeedLoadData                                          (Parm, NoDestructor, HasGetValueTypeHash)

void UBGUFuncLibProjectile::ProjectileAssetMoveCompToBP_Single(class ABGUProjectileBaseActor* ProjectileBaseActor_CDO, class UBlueprint* BP, class FString* ErrorLog, uint8 bNeedLoadData)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("BGUFuncLibProjectile", "ProjectileAssetMoveCompToBP_Single");

	Params::BGUFuncLibProjectile_ProjectileAssetMoveCompToBP_Single Parms{};

	Parms.ProjectileBaseActor_CDO = ProjectileBaseActor_CDO;
	Parms.BP = BP;
	Parms.bNeedLoadData = bNeedLoadData;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	if (ErrorLog != nullptr)
		*ErrorLog = std::move(Parms.ErrorLog);
}


// Function b1-Managed.BGUFuncLibProjectile.ProjectileAssetMoveCompToBP_Full
// (Native, Static, Public, HasOutParams, BlueprintCallable)
// Parameters:
// class FString                           ErrorLog                                               (Parm, OutParm, ZeroConstructor, HasGetValueTypeHash)

void UBGUFuncLibProjectile::ProjectileAssetMoveCompToBP_Full(class FString* ErrorLog)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("BGUFuncLibProjectile", "ProjectileAssetMoveCompToBP_Full");

	Params::BGUFuncLibProjectile_ProjectileAssetMoveCompToBP_Full Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	if (ErrorLog != nullptr)
		*ErrorLog = std::move(Parms.ErrorLog);
}


// Function b1-Managed.BGUFuncLibProjectile.CreateInteractCompForProjectile
// (Native, Static, Public, HasOutParams, BlueprintCallable)
// Parameters:
// class ABGUProjectileBaseActor*          ProjectileBaseActor_CDO                                (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// class UBlueprint*                       BP                                                     (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// class FString                           ErrorLog                                               (Parm, OutParm, ZeroConstructor, HasGetValueTypeHash)
// uint8                                   ReturnValue                                            (Parm, OutParm, ReturnParm, NoDestructor, HasGetValueTypeHash)

uint8 UBGUFuncLibProjectile::CreateInteractCompForProjectile(class ABGUProjectileBaseActor* ProjectileBaseActor_CDO, class UBlueprint* BP, class FString* ErrorLog)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("BGUFuncLibProjectile", "CreateInteractCompForProjectile");

	Params::BGUFuncLibProjectile_CreateInteractCompForProjectile Parms{};

	Parms.ProjectileBaseActor_CDO = ProjectileBaseActor_CDO;
	Parms.BP = BP;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	if (ErrorLog != nullptr)
		*ErrorLog = std::move(Parms.ErrorLog);

	return Parms.ReturnValue;
}


// Function b1-Managed.BGUFuncLibProjectile.CheckEffectsUsedInBulletExpand
// (Native, Static, Public, HasOutParams, BlueprintCallable)
// Parameters:
// class FString                           ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash)

class FString UBGUFuncLibProjectile::CheckEffectsUsedInBulletExpand()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("BGUFuncLibProjectile", "CheckEffectsUsedInBulletExpand");

	Params::BGUFuncLibProjectile_CheckEffectsUsedInBulletExpand Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function b1-Managed.BGUFuncLibProjectile.ModifyProjectileCheckShapeType
// (Native, Static, Public, HasOutParams, BlueprintCallable)
// Parameters:
// class ABGUProjectileBaseActor*          ProjectileBaseActor_CDO                                (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// class UBlueprint*                       BP                                                     (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// EProjectileCheckShapeType               CheckShape                                             (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// class FString                           ErrorLog                                               (Parm, OutParm, ZeroConstructor, HasGetValueTypeHash)
// uint8                                   ReturnValue                                            (Parm, OutParm, ReturnParm, NoDestructor, HasGetValueTypeHash)

uint8 UBGUFuncLibProjectile::ModifyProjectileCheckShapeType(class ABGUProjectileBaseActor* ProjectileBaseActor_CDO, class UBlueprint* BP, EProjectileCheckShapeType CheckShape, class FString* ErrorLog)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("BGUFuncLibProjectile", "ModifyProjectileCheckShapeType");

	Params::BGUFuncLibProjectile_ModifyProjectileCheckShapeType Parms{};

	Parms.ProjectileBaseActor_CDO = ProjectileBaseActor_CDO;
	Parms.BP = BP;
	Parms.CheckShape = CheckShape;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	if (ErrorLog != nullptr)
		*ErrorLog = std::move(Parms.ErrorLog);

	return Parms.ReturnValue;
}


// Function b1-Managed.BGUFuncLibProjectile.CreateCheckCompForProjectile
// (Native, Static, Public, HasOutParams, BlueprintCallable)
// Parameters:
// class ABGUProjectileBaseActor*          ProjectileBaseActor_CDO                                (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// class UBlueprint*                       BP                                                     (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// EProjectileCheckShapeType               CheckShape                                             (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// class FString                           ErrorLog                                               (Parm, OutParm, ZeroConstructor, HasGetValueTypeHash)
// uint8                                   bNeedLoadData                                          (Parm, NoDestructor, HasGetValueTypeHash)
// uint8                                   ReturnValue                                            (Parm, OutParm, ReturnParm, NoDestructor, HasGetValueTypeHash)

uint8 UBGUFuncLibProjectile::CreateCheckCompForProjectile(class ABGUProjectileBaseActor* ProjectileBaseActor_CDO, class UBlueprint* BP, EProjectileCheckShapeType CheckShape, class FString* ErrorLog, uint8 bNeedLoadData)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("BGUFuncLibProjectile", "CreateCheckCompForProjectile");

	Params::BGUFuncLibProjectile_CreateCheckCompForProjectile Parms{};

	Parms.ProjectileBaseActor_CDO = ProjectileBaseActor_CDO;
	Parms.BP = BP;
	Parms.CheckShape = CheckShape;
	Parms.bNeedLoadData = bNeedLoadData;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	if (ErrorLog != nullptr)
		*ErrorLog = std::move(Parms.ErrorLog);

	return Parms.ReturnValue;
}


// Function b1-Managed.BGUFuncLibProjectile.ProjectileAssetCheck_Single
// (Native, Static, Public, HasOutParams, BlueprintCallable)
// Parameters:
// class ABGUProjectileBaseActor*          ProjectileBaseActor_CDO                                (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// class FString                           ErrorLog                                               (Parm, OutParm, ZeroConstructor, HasGetValueTypeHash)
// uint8                                   bNeedLoadData                                          (Parm, NoDestructor, HasGetValueTypeHash)
// uint8                                   ReturnValue                                            (Parm, OutParm, ReturnParm, NoDestructor, HasGetValueTypeHash)

uint8 UBGUFuncLibProjectile::ProjectileAssetCheck_Single(class ABGUProjectileBaseActor* ProjectileBaseActor_CDO, class FString* ErrorLog, uint8 bNeedLoadData)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("BGUFuncLibProjectile", "ProjectileAssetCheck_Single");

	Params::BGUFuncLibProjectile_ProjectileAssetCheck_Single Parms{};

	Parms.ProjectileBaseActor_CDO = ProjectileBaseActor_CDO;
	Parms.bNeedLoadData = bNeedLoadData;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	if (ErrorLog != nullptr)
		*ErrorLog = std::move(Parms.ErrorLog);

	return Parms.ReturnValue;
}


// Function b1-Managed.BGUFuncLibProjectile.ProjectileAssetCheck_Full
// (Native, Static, Public, HasOutParams, BlueprintCallable)
// Parameters:
// class FString                           ErrorLog                                               (Parm, OutParm, ZeroConstructor, HasGetValueTypeHash)
// TArray<class FString>                   MarkDirtyList                                          (Parm, OutParm)
// uint8                                   ReturnValue                                            (Parm, OutParm, ReturnParm, NoDestructor, HasGetValueTypeHash)

uint8 UBGUFuncLibProjectile::ProjectileAssetCheck_Full(class FString* ErrorLog, TArray<class FString>* MarkDirtyList)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("BGUFuncLibProjectile", "ProjectileAssetCheck_Full");

	Params::BGUFuncLibProjectile_ProjectileAssetCheck_Full Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	if (ErrorLog != nullptr)
		*ErrorLog = std::move(Parms.ErrorLog);

	if (MarkDirtyList != nullptr)
		*MarkDirtyList = std::move(Parms.MarkDirtyList);

	return Parms.ReturnValue;
}


// Function b1-Managed.BGUFuncLibProjectile.CheckBuffDispUsedInBullet
// (Native, Static, Public, HasOutParams, BlueprintCallable)
// Parameters:
// TArray<int32>                           ReturnValue                                            (Parm, OutParm, ReturnParm)

TArray<int32> UBGUFuncLibProjectile::CheckBuffDispUsedInBullet()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("BGUFuncLibProjectile", "CheckBuffDispUsedInBullet");

	Params::BGUFuncLibProjectile_CheckBuffDispUsedInBullet Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function b1-Managed.BGUFuncLibProjectile.FindProjectileAboutFlame
// (Native, Static, Public, HasOutParams, BlueprintCallable)
// Parameters:
// class FString                           ErrorLog                                               (Parm, OutParm, ZeroConstructor, HasGetValueTypeHash)
// uint8                                   ReturnValue                                            (Parm, OutParm, ReturnParm, NoDestructor, HasGetValueTypeHash)

uint8 UBGUFuncLibProjectile::FindProjectileAboutFlame(class FString* ErrorLog)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("BGUFuncLibProjectile", "FindProjectileAboutFlame");

	Params::BGUFuncLibProjectile_FindProjectileAboutFlame Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	if (ErrorLog != nullptr)
		*ErrorLog = std::move(Parms.ErrorLog);

	return Parms.ReturnValue;
}


// Function b1-Managed.BGUFuncLibProjectile.CheckOutAllProjectileBP
// (Native, Static, Public, HasOutParams, BlueprintCallable)
// Parameters:
// class FString                           CheckOutMap                                            (Parm, OutParm, ZeroConstructor, HasGetValueTypeHash)
// uint8                                   ReturnValue                                            (Parm, OutParm, ReturnParm, NoDestructor, HasGetValueTypeHash)

uint8 UBGUFuncLibProjectile::CheckOutAllProjectileBP(class FString* CheckOutMap)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("BGUFuncLibProjectile", "CheckOutAllProjectileBP");

	Params::BGUFuncLibProjectile_CheckOutAllProjectileBP Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	if (CheckOutMap != nullptr)
		*CheckOutMap = std::move(Parms.CheckOutMap);

	return Parms.ReturnValue;
}


// Function b1-Managed.BGUFuncLibProjectile.CheckBuffUsedInBullet
// (Native, Static, Public, HasOutParams, BlueprintCallable)
// Parameters:
// TArray<int32>                           ReturnValue                                            (Parm, OutParm, ReturnParm)

TArray<int32> UBGUFuncLibProjectile::CheckBuffUsedInBullet()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("BGUFuncLibProjectile", "CheckBuffUsedInBullet");

	Params::BGUFuncLibProjectile_CheckBuffUsedInBullet Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function b1-Managed.BGUFuncLibProjectile.CheckCompHasChildComp
// (Native, Static, Public, HasOutParams, BlueprintCallable)
// Parameters:
// TArray<class FString>                   ErrorBPPathList                                        (Parm, OutParm)

void UBGUFuncLibProjectile::CheckCompHasChildComp(TArray<class FString>* ErrorBPPathList)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("BGUFuncLibProjectile", "CheckCompHasChildComp");

	Params::BGUFuncLibProjectile_CheckCompHasChildComp Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	if (ErrorBPPathList != nullptr)
		*ErrorBPPathList = std::move(Parms.ErrorBPPathList);
}


// Function b1-Managed.BGUFuncLibProjectile.GetCtrProjectileByID
// (Native, Static, Public, HasOutParams, BlueprintCallable)
// Parameters:
// class ABGUCharacterCS*                  CurCharacter                                           (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// int32                                   ProjectileID                                           (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// class AActor*                           ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

class AActor* UBGUFuncLibProjectile::GetCtrProjectileByID(class ABGUCharacterCS* CurCharacter, int32 ProjectileID)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("BGUFuncLibProjectile", "GetCtrProjectileByID");

	Params::BGUFuncLibProjectile_GetCtrProjectileByID Parms{};

	Parms.CurCharacter = CurCharacter;
	Parms.ProjectileID = ProjectileID;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function b1-Managed.BGUFuncLibProjectile.GetBuffEffectTypes
// (Native, Static, Public, HasOutParams, BlueprintCallable)
// Parameters:
// int32                                   BuffID                                                 (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// TArray<EBuffAndSkillEffectType>         ReturnValue                                            (Parm, OutParm, ReturnParm)

TArray<EBuffAndSkillEffectType> UBGUFuncLibProjectile::GetBuffEffectTypes(int32 BuffID)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("BGUFuncLibProjectile", "GetBuffEffectTypes");

	Params::BGUFuncLibProjectile_GetBuffEffectTypes Parms{};

	Parms.BuffID = BuffID;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function b1-Managed.BGUFuncLibProjectile.GetProjectileType
// (Native, Static, Public, HasOutParams, BlueprintCallable)
// Parameters:
// int32                                   ProjectileID                                           (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// int32                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

int32 UBGUFuncLibProjectile::GetProjectileType(int32 ProjectileID)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("BGUFuncLibProjectile", "GetProjectileType");

	Params::BGUFuncLibProjectile_GetProjectileType Parms{};

	Parms.ProjectileID = ProjectileID;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function b1-Managed.BED_GuideNode_Mark.GetNodeDescriptionInCS
// (Native, Event, Public, HasOutParams, BlueprintEvent, Const)
// Parameters:
// class FString                           ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash)

class FString UBED_GuideNode_Mark::GetNodeDescriptionInCS() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BED_GuideNode_Mark", "GetNodeDescriptionInCS");

	Params::BED_GuideNode_Mark_GetNodeDescriptionInCS Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function b1-Managed.BED_MovieNode_Delay.GetNodeDescriptionInCS
// (Native, Event, Public, HasOutParams, BlueprintEvent, Const)
// Parameters:
// class FString                           ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash)

class FString UBED_MovieNode_Delay::GetNodeDescriptionInCS() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BED_MovieNode_Delay", "GetNodeDescriptionInCS");

	Params::BED_MovieNode_Delay_GetNodeDescriptionInCS Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function b1-Managed.BANS_GSRebirthPointInteract.GSNotifyBeginCS
// (Native, Event, Public, Protected, BlueprintEvent, Const)
// Parameters:
// struct FUStGSNotifyParam                NotifyParam                                            (Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
// float                                   TotalDuration                                          (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UBANS_GSRebirthPointInteract::GSNotifyBeginCS(const struct FUStGSNotifyParam& NotifyParam, float TotalDuration) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BANS_GSRebirthPointInteract", "GSNotifyBeginCS");

	Params::BANS_GSRebirthPointInteract_GSNotifyBeginCS Parms{};

	Parms.NotifyParam = std::move(NotifyParam);
	Parms.TotalDuration = TotalDuration;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function b1-Managed.BANS_GSRebirthPointInteract.GSNotifyTickCS
// (Native, Event, Public, Protected, BlueprintEvent, Const)
// Parameters:
// struct FUStGSNotifyParam                NotifyParam                                            (Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
// float                                   FrameDeltaTime                                         (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UBANS_GSRebirthPointInteract::GSNotifyTickCS(const struct FUStGSNotifyParam& NotifyParam, float FrameDeltaTime) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BANS_GSRebirthPointInteract", "GSNotifyTickCS");

	Params::BANS_GSRebirthPointInteract_GSNotifyTickCS Parms{};

	Parms.NotifyParam = std::move(NotifyParam);
	Parms.FrameDeltaTime = FrameDeltaTime;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function b1-Managed.BANS_GSRebirthPointInteract.GSNotifyEndCS
// (Native, Event, Public, Protected, BlueprintEvent, Const)
// Parameters:
// struct FUStGSNotifyParam                NotifyParam                                            (Parm, ZeroConstructor, IsPlainOldData, NoDestructor)

void UBANS_GSRebirthPointInteract::GSNotifyEndCS(const struct FUStGSNotifyParam& NotifyParam) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BANS_GSRebirthPointInteract", "GSNotifyEndCS");

	Params::BANS_GSRebirthPointInteract_GSNotifyEndCS Parms{};

	Parms.NotifyParam = std::move(NotifyParam);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function b1-Managed.BED_MovieNode_PerformerExitPhasePerformance.GetNodeDescriptionInCS
// (Native, Event, Public, HasOutParams, BlueprintEvent, Const)
// Parameters:
// class FString                           ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash)

class FString UBED_MovieNode_PerformerExitPhasePerformance::GetNodeDescriptionInCS() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BED_MovieNode_PerformerExitPhasePerformance", "GetNodeDescriptionInCS");

	Params::BED_MovieNode_PerformerExitPhasePerformance_GetNodeDescriptionInCS Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function b1-Managed.BED_MovieNode_ConditionQuery.GetNodeDescriptionInCS
// (Native, Event, Public, HasOutParams, BlueprintEvent, Const)
// Parameters:
// class FString                           ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash)

class FString UBED_MovieNode_ConditionQuery::GetNodeDescriptionInCS() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BED_MovieNode_ConditionQuery", "GetNodeDescriptionInCS");

	Params::BED_MovieNode_ConditionQuery_GetNodeDescriptionInCS Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function b1-Managed.BED_MovieNode_PlayerSetCloudMoveEnabled.GetNodeDescriptionInCS
// (Native, Event, Public, HasOutParams, BlueprintEvent, Const)
// Parameters:
// class FString                           ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash)

class FString UBED_MovieNode_PlayerSetCloudMoveEnabled::GetNodeDescriptionInCS() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BED_MovieNode_PlayerSetCloudMoveEnabled", "GetNodeDescriptionInCS");

	Params::BED_MovieNode_PlayerSetCloudMoveEnabled_GetNodeDescriptionInCS Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function b1-Managed.BAN_GSRemoveBuffByID.bIsNativeBranchingPointCS
// (Native, Event, Public, HasOutParams, BlueprintEvent, Const)
// Parameters:
// uint8                                   ReturnValue                                            (Parm, OutParm, ReturnParm, NoDestructor, HasGetValueTypeHash)

uint8 UBAN_GSRemoveBuffByID::bIsNativeBranchingPointCS() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BAN_GSRemoveBuffByID", "bIsNativeBranchingPointCS");

	Params::BAN_GSRemoveBuffByID_bIsNativeBranchingPointCS Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function b1-Managed.BAN_GSRemoveBuffByID.GSNotifyCS
// (Native, Event, Public, Protected, BlueprintEvent, Const)
// Parameters:
// struct FUStGSNotifyParam                NotifyParam                                            (Parm, ZeroConstructor, IsPlainOldData, NoDestructor)

void UBAN_GSRemoveBuffByID::GSNotifyCS(const struct FUStGSNotifyParam& NotifyParam) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BAN_GSRemoveBuffByID", "GSNotifyCS");

	Params::BAN_GSRemoveBuffByID_GSNotifyCS Parms{};

	Parms.NotifyParam = std::move(NotifyParam);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function b1-Managed.BED_MovieNode_SetStreamingLevelStateInfo.GetNodeDescriptionInCS
// (Native, Event, Public, HasOutParams, BlueprintEvent, Const)
// Parameters:
// class FString                           ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash)

class FString UBED_MovieNode_SetStreamingLevelStateInfo::GetNodeDescriptionInCS() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BED_MovieNode_SetStreamingLevelStateInfo", "GetNodeDescriptionInCS");

	Params::BED_MovieNode_SetStreamingLevelStateInfo_GetNodeDescriptionInCS Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function b1-Managed.BUAnimHumanoidCS_AdvancedMonsterLocomotion.ShouldMoveTurnSwitchLockToFree
// (Native, Public, Private, HasOutParams, BlueprintCallable, BlueprintPure)
// Parameters:
// uint8                                   ReturnValue                                            (Parm, OutParm, ReturnParm, NoDestructor, HasGetValueTypeHash)

uint8 UBUAnimHumanoidCS_AdvancedMonsterLocomotion::ShouldMoveTurnSwitchLockToFree()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BUAnimHumanoidCS_AdvancedMonsterLocomotion", "ShouldMoveTurnSwitchLockToFree");

	Params::BUAnimHumanoidCS_AdvancedMonsterLocomotion_ShouldMoveTurnSwitchLockToFree Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function b1-Managed.BUAnimHumanoidCS_AdvancedMonsterLocomotion.UpdateMoveLoopStateMachine
// (Native, Public, Private, HasOutParams, BlueprintCallable)
// Parameters:
// struct FAnimUpdateContext               Context                                                (Parm, OutParm, ReferenceParm)
// struct FAnimNodeReference               Node                                                   (Parm, OutParm, ReferenceParm, NoDestructor)

void UBUAnimHumanoidCS_AdvancedMonsterLocomotion::UpdateMoveLoopStateMachine(struct FAnimUpdateContext& Context, struct FAnimNodeReference& Node)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BUAnimHumanoidCS_AdvancedMonsterLocomotion", "UpdateMoveLoopStateMachine");

	Params::BUAnimHumanoidCS_AdvancedMonsterLocomotion_UpdateMoveLoopStateMachine Parms{};

	Parms.Context = std::move(Context);
	Parms.Node = std::move(Node);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	Context = std::move(Parms.Context);
	Node = std::move(Parms.Node);
}


// Function b1-Managed.BUAnimHumanoidCS_AdvancedMonsterLocomotion.ShouldMoveLoopLeftTransFR
// (Native, Public, Private, HasOutParams, BlueprintCallable, BlueprintPure)
// Parameters:
// uint8                                   ReturnValue                                            (Parm, OutParm, ReturnParm, NoDestructor, HasGetValueTypeHash)

uint8 UBUAnimHumanoidCS_AdvancedMonsterLocomotion::ShouldMoveLoopLeftTransFR()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BUAnimHumanoidCS_AdvancedMonsterLocomotion", "ShouldMoveLoopLeftTransFR");

	Params::BUAnimHumanoidCS_AdvancedMonsterLocomotion_ShouldMoveLoopLeftTransFR Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function b1-Managed.BUAnimHumanoidCS_AdvancedMonsterLocomotion.ShouldMoveLoopLeftTransBL
// (Native, Public, Private, HasOutParams, BlueprintCallable, BlueprintPure)
// Parameters:
// uint8                                   ReturnValue                                            (Parm, OutParm, ReturnParm, NoDestructor, HasGetValueTypeHash)

uint8 UBUAnimHumanoidCS_AdvancedMonsterLocomotion::ShouldMoveLoopLeftTransBL()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BUAnimHumanoidCS_AdvancedMonsterLocomotion", "ShouldMoveLoopLeftTransBL");

	Params::BUAnimHumanoidCS_AdvancedMonsterLocomotion_ShouldMoveLoopLeftTransBL Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function b1-Managed.BUAnimHumanoidCS_AdvancedMonsterLocomotion.ShouldMoveLoopLeftTransFL
// (Native, Public, Private, HasOutParams, BlueprintCallable, BlueprintPure)
// Parameters:
// uint8                                   ReturnValue                                            (Parm, OutParm, ReturnParm, NoDestructor, HasGetValueTypeHash)

uint8 UBUAnimHumanoidCS_AdvancedMonsterLocomotion::ShouldMoveLoopLeftTransFL()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BUAnimHumanoidCS_AdvancedMonsterLocomotion", "ShouldMoveLoopLeftTransFL");

	Params::BUAnimHumanoidCS_AdvancedMonsterLocomotion_ShouldMoveLoopLeftTransFL Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function b1-Managed.BUAnimHumanoidCS_AdvancedMonsterLocomotion.ShouldMoveLoopLeftTransBR
// (Native, Public, Private, HasOutParams, BlueprintCallable, BlueprintPure)
// Parameters:
// uint8                                   ReturnValue                                            (Parm, OutParm, ReturnParm, NoDestructor, HasGetValueTypeHash)

uint8 UBUAnimHumanoidCS_AdvancedMonsterLocomotion::ShouldMoveLoopLeftTransBR()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BUAnimHumanoidCS_AdvancedMonsterLocomotion", "ShouldMoveLoopLeftTransBR");

	Params::BUAnimHumanoidCS_AdvancedMonsterLocomotion_ShouldMoveLoopLeftTransBR Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function b1-Managed.BUAnimHumanoidCS_AdvancedMonsterLocomotion.UpdateMoveLoopLF2LBOutput
// (Native, Public, Private, HasOutParams, BlueprintCallable)
// Parameters:
// struct FAnimUpdateContext               Context                                                (Parm, OutParm, ReferenceParm)
// struct FAnimNodeReference               Node                                                   (Parm, OutParm, ReferenceParm, NoDestructor)

void UBUAnimHumanoidCS_AdvancedMonsterLocomotion::UpdateMoveLoopLF2LBOutput(struct FAnimUpdateContext& Context, struct FAnimNodeReference& Node)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BUAnimHumanoidCS_AdvancedMonsterLocomotion", "UpdateMoveLoopLF2LBOutput");

	Params::BUAnimHumanoidCS_AdvancedMonsterLocomotion_UpdateMoveLoopLF2LBOutput Parms{};

	Parms.Context = std::move(Context);
	Parms.Node = std::move(Node);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	Context = std::move(Parms.Context);
	Node = std::move(Parms.Node);
}


// Function b1-Managed.BUAnimHumanoidCS_AdvancedMonsterLocomotion.UpdateMoveLoopRF2RBOutput
// (Native, Public, Private, HasOutParams, BlueprintCallable)
// Parameters:
// struct FAnimUpdateContext               Context                                                (Parm, OutParm, ReferenceParm)
// struct FAnimNodeReference               Node                                                   (Parm, OutParm, ReferenceParm, NoDestructor)

void UBUAnimHumanoidCS_AdvancedMonsterLocomotion::UpdateMoveLoopRF2RBOutput(struct FAnimUpdateContext& Context, struct FAnimNodeReference& Node)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BUAnimHumanoidCS_AdvancedMonsterLocomotion", "UpdateMoveLoopRF2RBOutput");

	Params::BUAnimHumanoidCS_AdvancedMonsterLocomotion_UpdateMoveLoopRF2RBOutput Parms{};

	Parms.Context = std::move(Context);
	Parms.Node = std::move(Node);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	Context = std::move(Parms.Context);
	Node = std::move(Parms.Node);
}


// Function b1-Managed.BUAnimHumanoidCS_AdvancedMonsterLocomotion.UpdateMoveLoopRB2RFOutput
// (Native, Public, Private, HasOutParams, BlueprintCallable)
// Parameters:
// struct FAnimUpdateContext               Context                                                (Parm, OutParm, ReferenceParm)
// struct FAnimNodeReference               Node                                                   (Parm, OutParm, ReferenceParm, NoDestructor)

void UBUAnimHumanoidCS_AdvancedMonsterLocomotion::UpdateMoveLoopRB2RFOutput(struct FAnimUpdateContext& Context, struct FAnimNodeReference& Node)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BUAnimHumanoidCS_AdvancedMonsterLocomotion", "UpdateMoveLoopRB2RFOutput");

	Params::BUAnimHumanoidCS_AdvancedMonsterLocomotion_UpdateMoveLoopRB2RFOutput Parms{};

	Parms.Context = std::move(Context);
	Parms.Node = std::move(Node);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	Context = std::move(Parms.Context);
	Node = std::move(Parms.Node);
}


// Function b1-Managed.BUAnimHumanoidCS_AdvancedMonsterLocomotion.UpdateMoveLoopLB2LFOutput
// (Native, Public, Private, HasOutParams, BlueprintCallable)
// Parameters:
// struct FAnimUpdateContext               Context                                                (Parm, OutParm, ReferenceParm)
// struct FAnimNodeReference               Node                                                   (Parm, OutParm, ReferenceParm, NoDestructor)

void UBUAnimHumanoidCS_AdvancedMonsterLocomotion::UpdateMoveLoopLB2LFOutput(struct FAnimUpdateContext& Context, struct FAnimNodeReference& Node)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BUAnimHumanoidCS_AdvancedMonsterLocomotion", "UpdateMoveLoopLB2LFOutput");

	Params::BUAnimHumanoidCS_AdvancedMonsterLocomotion_UpdateMoveLoopLB2LFOutput Parms{};

	Parms.Context = std::move(Context);
	Parms.Node = std::move(Node);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	Context = std::move(Parms.Context);
	Node = std::move(Parms.Node);
}


// Function b1-Managed.BUAnimHumanoidCS_AdvancedMonsterLocomotion.SetupMoveLoopAdditiveAnim
// (Native, Public, Private, HasOutParams, BlueprintCallable)
// Parameters:
// struct FAnimUpdateContext               Context                                                (Parm, OutParm, ReferenceParm)
// struct FAnimNodeReference               Node                                                   (Parm, OutParm, ReferenceParm, NoDestructor)

void UBUAnimHumanoidCS_AdvancedMonsterLocomotion::SetupMoveLoopAdditiveAnim(struct FAnimUpdateContext& Context, struct FAnimNodeReference& Node)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BUAnimHumanoidCS_AdvancedMonsterLocomotion", "SetupMoveLoopAdditiveAnim");

	Params::BUAnimHumanoidCS_AdvancedMonsterLocomotion_SetupMoveLoopAdditiveAnim Parms{};

	Parms.Context = std::move(Context);
	Parms.Node = std::move(Node);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	Context = std::move(Parms.Context);
	Node = std::move(Parms.Node);
}


// Function b1-Managed.BUAnimHumanoidCS_AdvancedMonsterLocomotion.ShouldMoveTurnSwitchLock
// (Native, Public, Private, HasOutParams, BlueprintCallable, BlueprintPure)
// Parameters:
// uint8                                   ReturnValue                                            (Parm, OutParm, ReturnParm, NoDestructor, HasGetValueTypeHash)

uint8 UBUAnimHumanoidCS_AdvancedMonsterLocomotion::ShouldMoveTurnSwitchLock()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BUAnimHumanoidCS_AdvancedMonsterLocomotion", "ShouldMoveTurnSwitchLock");

	Params::BUAnimHumanoidCS_AdvancedMonsterLocomotion_ShouldMoveTurnSwitchLock Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function b1-Managed.BUAnimHumanoidCS_AdvancedMonsterLocomotion.ShouldMoveTurnSwitchFree
// (Native, Public, Private, HasOutParams, BlueprintCallable, BlueprintPure)
// Parameters:
// uint8                                   ReturnValue                                            (Parm, OutParm, ReturnParm, NoDestructor, HasGetValueTypeHash)

uint8 UBUAnimHumanoidCS_AdvancedMonsterLocomotion::ShouldMoveTurnSwitchFree()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BUAnimHumanoidCS_AdvancedMonsterLocomotion", "ShouldMoveTurnSwitchFree");

	Params::BUAnimHumanoidCS_AdvancedMonsterLocomotion_ShouldMoveTurnSwitchFree Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function b1-Managed.BUAnimHumanoidCS_AdvancedMonsterLocomotion.UpdateMoveLoopSimpleAnim
// (Native, Public, Private, HasOutParams, BlueprintCallable)
// Parameters:
// struct FAnimUpdateContext               Context                                                (Parm, OutParm, ReferenceParm)
// struct FAnimNodeReference               Node                                                   (Parm, OutParm, ReferenceParm, NoDestructor)

void UBUAnimHumanoidCS_AdvancedMonsterLocomotion::UpdateMoveLoopSimpleAnim(struct FAnimUpdateContext& Context, struct FAnimNodeReference& Node)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BUAnimHumanoidCS_AdvancedMonsterLocomotion", "UpdateMoveLoopSimpleAnim");

	Params::BUAnimHumanoidCS_AdvancedMonsterLocomotion_UpdateMoveLoopSimpleAnim Parms{};

	Parms.Context = std::move(Context);
	Parms.Node = std::move(Node);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	Context = std::move(Parms.Context);
	Node = std::move(Parms.Node);
}


// Function b1-Managed.BUAnimHumanoidCS_AdvancedMonsterLocomotion.ShouldMoveLoopTransToBL
// (Native, Public, Private, HasOutParams, BlueprintCallable, BlueprintPure)
// Parameters:
// uint8                                   ReturnValue                                            (Parm, OutParm, ReturnParm, NoDestructor, HasGetValueTypeHash)

uint8 UBUAnimHumanoidCS_AdvancedMonsterLocomotion::ShouldMoveLoopTransToBL()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BUAnimHumanoidCS_AdvancedMonsterLocomotion", "ShouldMoveLoopTransToBL");

	Params::BUAnimHumanoidCS_AdvancedMonsterLocomotion_ShouldMoveLoopTransToBL Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function b1-Managed.BUAnimHumanoidCS_AdvancedMonsterLocomotion.UpdateMoveLoopTransAnim
// (Native, Public, Private, HasOutParams, BlueprintCallable)
// Parameters:
// struct FAnimUpdateContext               Context                                                (Parm, OutParm, ReferenceParm)
// struct FAnimNodeReference               Node                                                   (Parm, OutParm, ReferenceParm, NoDestructor)

void UBUAnimHumanoidCS_AdvancedMonsterLocomotion::UpdateMoveLoopTransAnim(struct FAnimUpdateContext& Context, struct FAnimNodeReference& Node)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BUAnimHumanoidCS_AdvancedMonsterLocomotion", "UpdateMoveLoopTransAnim");

	Params::BUAnimHumanoidCS_AdvancedMonsterLocomotion_UpdateMoveLoopTransAnim Parms{};

	Parms.Context = std::move(Context);
	Parms.Node = std::move(Node);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	Context = std::move(Parms.Context);
	Node = std::move(Parms.Node);
}


// Function b1-Managed.BUAnimHumanoidCS_AdvancedMonsterLocomotion.ShouldMoveLoopTransToBR
// (Native, Public, Private, HasOutParams, BlueprintCallable, BlueprintPure)
// Parameters:
// uint8                                   ReturnValue                                            (Parm, OutParm, ReturnParm, NoDestructor, HasGetValueTypeHash)

uint8 UBUAnimHumanoidCS_AdvancedMonsterLocomotion::ShouldMoveLoopTransToBR()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BUAnimHumanoidCS_AdvancedMonsterLocomotion", "ShouldMoveLoopTransToBR");

	Params::BUAnimHumanoidCS_AdvancedMonsterLocomotion_ShouldMoveLoopTransToBR Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function b1-Managed.BUAnimHumanoidCS_AdvancedMonsterLocomotion.ShouldMoveLoopTransToFR
// (Native, Public, Private, HasOutParams, BlueprintCallable, BlueprintPure)
// Parameters:
// uint8                                   ReturnValue                                            (Parm, OutParm, ReturnParm, NoDestructor, HasGetValueTypeHash)

uint8 UBUAnimHumanoidCS_AdvancedMonsterLocomotion::ShouldMoveLoopTransToFR()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BUAnimHumanoidCS_AdvancedMonsterLocomotion", "ShouldMoveLoopTransToFR");

	Params::BUAnimHumanoidCS_AdvancedMonsterLocomotion_ShouldMoveLoopTransToFR Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function b1-Managed.BUAnimHumanoidCS_AdvancedMonsterLocomotion.ShouldMoveLoopTransToFL
// (Native, Public, Private, HasOutParams, BlueprintCallable, BlueprintPure)
// Parameters:
// uint8                                   ReturnValue                                            (Parm, OutParm, ReturnParm, NoDestructor, HasGetValueTypeHash)

uint8 UBUAnimHumanoidCS_AdvancedMonsterLocomotion::ShouldMoveLoopTransToFL()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BUAnimHumanoidCS_AdvancedMonsterLocomotion", "ShouldMoveLoopTransToFL");

	Params::BUAnimHumanoidCS_AdvancedMonsterLocomotion_ShouldMoveLoopTransToFL Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function b1-Managed.BUAnimHumanoidCS_AdvancedMonsterLocomotion.UpdateMoveLoopBwdAnim
// (Native, Public, Private, HasOutParams, BlueprintCallable)
// Parameters:
// struct FAnimUpdateContext               Context                                                (Parm, OutParm, ReferenceParm)
// struct FAnimNodeReference               Node                                                   (Parm, OutParm, ReferenceParm, NoDestructor)

void UBUAnimHumanoidCS_AdvancedMonsterLocomotion::UpdateMoveLoopBwdAnim(struct FAnimUpdateContext& Context, struct FAnimNodeReference& Node)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BUAnimHumanoidCS_AdvancedMonsterLocomotion", "UpdateMoveLoopBwdAnim");

	Params::BUAnimHumanoidCS_AdvancedMonsterLocomotion_UpdateMoveLoopBwdAnim Parms{};

	Parms.Context = std::move(Context);
	Parms.Node = std::move(Node);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	Context = std::move(Parms.Context);
	Node = std::move(Parms.Node);
}


// Function b1-Managed.BUAnimHumanoidCS_AdvancedMonsterLocomotion.UpdateMoveLoopFwdAnim
// (Native, Public, Private, HasOutParams, BlueprintCallable)
// Parameters:
// struct FAnimUpdateContext               Context                                                (Parm, OutParm, ReferenceParm)
// struct FAnimNodeReference               Node                                                   (Parm, OutParm, ReferenceParm, NoDestructor)

void UBUAnimHumanoidCS_AdvancedMonsterLocomotion::UpdateMoveLoopFwdAnim(struct FAnimUpdateContext& Context, struct FAnimNodeReference& Node)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BUAnimHumanoidCS_AdvancedMonsterLocomotion", "UpdateMoveLoopFwdAnim");

	Params::BUAnimHumanoidCS_AdvancedMonsterLocomotion_UpdateMoveLoopFwdAnim Parms{};

	Parms.Context = std::move(Context);
	Parms.Node = std::move(Node);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	Context = std::move(Parms.Context);
	Node = std::move(Parms.Node);
}


// Function b1-Managed.BUAnimHumanoidCS_AdvancedMonsterLocomotion.ShouldMoveLoopLeftFwd
// (Native, Public, Private, HasOutParams, BlueprintCallable, BlueprintPure)
// Parameters:
// uint8                                   ReturnValue                                            (Parm, OutParm, ReturnParm, NoDestructor, HasGetValueTypeHash)

uint8 UBUAnimHumanoidCS_AdvancedMonsterLocomotion::ShouldMoveLoopLeftFwd()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BUAnimHumanoidCS_AdvancedMonsterLocomotion", "ShouldMoveLoopLeftFwd");

	Params::BUAnimHumanoidCS_AdvancedMonsterLocomotion_ShouldMoveLoopLeftFwd Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function b1-Managed.BUAnimHumanoidCS_AdvancedMonsterLocomotion.ShouldMoveLoopLeftBwd
// (Native, Public, Private, HasOutParams, BlueprintCallable, BlueprintPure)
// Parameters:
// uint8                                   ReturnValue                                            (Parm, OutParm, ReturnParm, NoDestructor, HasGetValueTypeHash)

uint8 UBUAnimHumanoidCS_AdvancedMonsterLocomotion::ShouldMoveLoopLeftBwd()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BUAnimHumanoidCS_AdvancedMonsterLocomotion", "ShouldMoveLoopLeftBwd");

	Params::BUAnimHumanoidCS_AdvancedMonsterLocomotion_ShouldMoveLoopLeftBwd Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function b1-Managed.BUAnimHumanoidCS_AdvancedMonsterLocomotion.ShouldMoveLoopBLToFL
// (Native, Public, Private, HasOutParams, BlueprintCallable, BlueprintPure)
// Parameters:
// uint8                                   ReturnValue                                            (Parm, OutParm, ReturnParm, NoDestructor, HasGetValueTypeHash)

uint8 UBUAnimHumanoidCS_AdvancedMonsterLocomotion::ShouldMoveLoopBLToFL()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BUAnimHumanoidCS_AdvancedMonsterLocomotion", "ShouldMoveLoopBLToFL");

	Params::BUAnimHumanoidCS_AdvancedMonsterLocomotion_ShouldMoveLoopBLToFL Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function b1-Managed.BUAnimHumanoidCS_AdvancedMonsterLocomotion.ShouldMoveLoopLeftBL
// (Native, Public, Private, HasOutParams, BlueprintCallable, BlueprintPure)
// Parameters:
// uint8                                   ReturnValue                                            (Parm, OutParm, ReturnParm, NoDestructor, HasGetValueTypeHash)

uint8 UBUAnimHumanoidCS_AdvancedMonsterLocomotion::ShouldMoveLoopLeftBL()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BUAnimHumanoidCS_AdvancedMonsterLocomotion", "ShouldMoveLoopLeftBL");

	Params::BUAnimHumanoidCS_AdvancedMonsterLocomotion_ShouldMoveLoopLeftBL Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function b1-Managed.BUAnimHumanoidCS_AdvancedMonsterLocomotion.SetupMoveStartOutput
// (Native, Public, Private, HasOutParams, BlueprintCallable)
// Parameters:
// struct FAnimUpdateContext               Context                                                (Parm, OutParm, ReferenceParm)
// struct FAnimNodeReference               Node                                                   (Parm, OutParm, ReferenceParm, NoDestructor)

void UBUAnimHumanoidCS_AdvancedMonsterLocomotion::SetupMoveStartOutput(struct FAnimUpdateContext& Context, struct FAnimNodeReference& Node)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BUAnimHumanoidCS_AdvancedMonsterLocomotion", "SetupMoveStartOutput");

	Params::BUAnimHumanoidCS_AdvancedMonsterLocomotion_SetupMoveStartOutput Parms{};

	Parms.Context = std::move(Context);
	Parms.Node = std::move(Node);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	Context = std::move(Parms.Context);
	Node = std::move(Parms.Node);
}


// Function b1-Managed.BUAnimHumanoidCS_AdvancedMonsterLocomotion.UpdateMoveLoopFLAnim
// (Native, Public, Private, HasOutParams, BlueprintCallable)
// Parameters:
// struct FAnimUpdateContext               Context                                                (Parm, OutParm, ReferenceParm)
// struct FAnimNodeReference               Node                                                   (Parm, OutParm, ReferenceParm, NoDestructor)

void UBUAnimHumanoidCS_AdvancedMonsterLocomotion::UpdateMoveLoopFLAnim(struct FAnimUpdateContext& Context, struct FAnimNodeReference& Node)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BUAnimHumanoidCS_AdvancedMonsterLocomotion", "UpdateMoveLoopFLAnim");

	Params::BUAnimHumanoidCS_AdvancedMonsterLocomotion_UpdateMoveLoopFLAnim Parms{};

	Parms.Context = std::move(Context);
	Parms.Node = std::move(Node);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	Context = std::move(Parms.Context);
	Node = std::move(Parms.Node);
}


// Function b1-Managed.BUAnimHumanoidCS_AdvancedMonsterLocomotion.UpdateMoveLoopFRAnim
// (Native, Public, Private, HasOutParams, BlueprintCallable)
// Parameters:
// struct FAnimUpdateContext               Context                                                (Parm, OutParm, ReferenceParm)
// struct FAnimNodeReference               Node                                                   (Parm, OutParm, ReferenceParm, NoDestructor)

void UBUAnimHumanoidCS_AdvancedMonsterLocomotion::UpdateMoveLoopFRAnim(struct FAnimUpdateContext& Context, struct FAnimNodeReference& Node)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BUAnimHumanoidCS_AdvancedMonsterLocomotion", "UpdateMoveLoopFRAnim");

	Params::BUAnimHumanoidCS_AdvancedMonsterLocomotion_UpdateMoveLoopFRAnim Parms{};

	Parms.Context = std::move(Context);
	Parms.Node = std::move(Node);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	Context = std::move(Parms.Context);
	Node = std::move(Parms.Node);
}


// Function b1-Managed.BUAnimHumanoidCS_AdvancedMonsterLocomotion.UpdateMoveLoopBLAnim
// (Native, Public, Private, HasOutParams, BlueprintCallable)
// Parameters:
// struct FAnimUpdateContext               Context                                                (Parm, OutParm, ReferenceParm)
// struct FAnimNodeReference               Node                                                   (Parm, OutParm, ReferenceParm, NoDestructor)

void UBUAnimHumanoidCS_AdvancedMonsterLocomotion::UpdateMoveLoopBLAnim(struct FAnimUpdateContext& Context, struct FAnimNodeReference& Node)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BUAnimHumanoidCS_AdvancedMonsterLocomotion", "UpdateMoveLoopBLAnim");

	Params::BUAnimHumanoidCS_AdvancedMonsterLocomotion_UpdateMoveLoopBLAnim Parms{};

	Parms.Context = std::move(Context);
	Parms.Node = std::move(Node);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	Context = std::move(Parms.Context);
	Node = std::move(Parms.Node);
}


// Function b1-Managed.BUAnimHumanoidCS_AdvancedMonsterLocomotion.UpdateMoveLoopBRAnim
// (Native, Public, Private, HasOutParams, BlueprintCallable)
// Parameters:
// struct FAnimUpdateContext               Context                                                (Parm, OutParm, ReferenceParm)
// struct FAnimNodeReference               Node                                                   (Parm, OutParm, ReferenceParm, NoDestructor)

void UBUAnimHumanoidCS_AdvancedMonsterLocomotion::UpdateMoveLoopBRAnim(struct FAnimUpdateContext& Context, struct FAnimNodeReference& Node)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BUAnimHumanoidCS_AdvancedMonsterLocomotion", "UpdateMoveLoopBRAnim");

	Params::BUAnimHumanoidCS_AdvancedMonsterLocomotion_UpdateMoveLoopBRAnim Parms{};

	Parms.Context = std::move(Context);
	Parms.Node = std::move(Node);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	Context = std::move(Parms.Context);
	Node = std::move(Parms.Node);
}


// Function b1-Managed.BUAnimHumanoidCS_AdvancedMonsterLocomotion.UpdateMoveLoopOutput
// (Native, Public, Private, HasOutParams, BlueprintCallable)
// Parameters:
// struct FAnimUpdateContext               Context                                                (Parm, OutParm, ReferenceParm)
// struct FAnimNodeReference               Node                                                   (Parm, OutParm, ReferenceParm, NoDestructor)

void UBUAnimHumanoidCS_AdvancedMonsterLocomotion::UpdateMoveLoopOutput(struct FAnimUpdateContext& Context, struct FAnimNodeReference& Node)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BUAnimHumanoidCS_AdvancedMonsterLocomotion", "UpdateMoveLoopOutput");

	Params::BUAnimHumanoidCS_AdvancedMonsterLocomotion_UpdateMoveLoopOutput Parms{};

	Parms.Context = std::move(Context);
	Parms.Node = std::move(Node);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	Context = std::move(Parms.Context);
	Node = std::move(Parms.Node);
}


// Function b1-Managed.BUAnimHumanoidCS_AdvancedMonsterLocomotion.UpdateMoveStopOutput
// (Native, Public, Private, HasOutParams, BlueprintCallable)
// Parameters:
// struct FAnimUpdateContext               Context                                                (Parm, OutParm, ReferenceParm)
// struct FAnimNodeReference               Node                                                   (Parm, OutParm, ReferenceParm, NoDestructor)

void UBUAnimHumanoidCS_AdvancedMonsterLocomotion::UpdateMoveStopOutput(struct FAnimUpdateContext& Context, struct FAnimNodeReference& Node)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BUAnimHumanoidCS_AdvancedMonsterLocomotion", "UpdateMoveStopOutput");

	Params::BUAnimHumanoidCS_AdvancedMonsterLocomotion_UpdateMoveStopOutput Parms{};

	Parms.Context = std::move(Context);
	Parms.Node = std::move(Node);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	Context = std::move(Parms.Context);
	Node = std::move(Parms.Node);
}


// Function b1-Managed.BUAnimHumanoidCS_AdvancedMonsterLocomotion.ShouldMoveLoopLeftFL
// (Native, Public, Private, HasOutParams, BlueprintCallable, BlueprintPure)
// Parameters:
// uint8                                   ReturnValue                                            (Parm, OutParm, ReturnParm, NoDestructor, HasGetValueTypeHash)

uint8 UBUAnimHumanoidCS_AdvancedMonsterLocomotion::ShouldMoveLoopLeftFL()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BUAnimHumanoidCS_AdvancedMonsterLocomotion", "ShouldMoveLoopLeftFL");

	Params::BUAnimHumanoidCS_AdvancedMonsterLocomotion_ShouldMoveLoopLeftFL Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function b1-Managed.BUAnimHumanoidCS_AdvancedMonsterLocomotion.ShouldMoveLoopLeftFR
// (Native, Public, Private, HasOutParams, BlueprintCallable, BlueprintPure)
// Parameters:
// uint8                                   ReturnValue                                            (Parm, OutParm, ReturnParm, NoDestructor, HasGetValueTypeHash)

uint8 UBUAnimHumanoidCS_AdvancedMonsterLocomotion::ShouldMoveLoopLeftFR()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BUAnimHumanoidCS_AdvancedMonsterLocomotion", "ShouldMoveLoopLeftFR");

	Params::BUAnimHumanoidCS_AdvancedMonsterLocomotion_ShouldMoveLoopLeftFR Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function b1-Managed.BUAnimHumanoidCS_AdvancedMonsterLocomotion.UpdateMoveTurnOutput
// (Native, Public, Private, HasOutParams, BlueprintCallable)
// Parameters:
// struct FAnimUpdateContext               Context                                                (Parm, OutParm, ReferenceParm)
// struct FAnimNodeReference               Node                                                   (Parm, OutParm, ReferenceParm, NoDestructor)

void UBUAnimHumanoidCS_AdvancedMonsterLocomotion::UpdateMoveTurnOutput(struct FAnimUpdateContext& Context, struct FAnimNodeReference& Node)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BUAnimHumanoidCS_AdvancedMonsterLocomotion", "UpdateMoveTurnOutput");

	Params::BUAnimHumanoidCS_AdvancedMonsterLocomotion_UpdateMoveTurnOutput Parms{};

	Parms.Context = std::move(Context);
	Parms.Node = std::move(Node);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	Context = std::move(Parms.Context);
	Node = std::move(Parms.Node);
}


// Function b1-Managed.BUAnimHumanoidCS_AdvancedMonsterLocomotion.ShouldMoveLoopLeftBR
// (Native, Public, Private, HasOutParams, BlueprintCallable, BlueprintPure)
// Parameters:
// uint8                                   ReturnValue                                            (Parm, OutParm, ReturnParm, NoDestructor, HasGetValueTypeHash)

uint8 UBUAnimHumanoidCS_AdvancedMonsterLocomotion::ShouldMoveLoopLeftBR()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BUAnimHumanoidCS_AdvancedMonsterLocomotion", "ShouldMoveLoopLeftBR");

	Params::BUAnimHumanoidCS_AdvancedMonsterLocomotion_ShouldMoveLoopLeftBR Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function b1-Managed.BUAnimHumanoidCS_AdvancedMonsterLocomotion.ShouldMoveLoopFLToBL
// (Native, Public, Private, HasOutParams, BlueprintCallable, BlueprintPure)
// Parameters:
// uint8                                   ReturnValue                                            (Parm, OutParm, ReturnParm, NoDestructor, HasGetValueTypeHash)

uint8 UBUAnimHumanoidCS_AdvancedMonsterLocomotion::ShouldMoveLoopFLToBL()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BUAnimHumanoidCS_AdvancedMonsterLocomotion", "ShouldMoveLoopFLToBL");

	Params::BUAnimHumanoidCS_AdvancedMonsterLocomotion_ShouldMoveLoopFLToBL Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function b1-Managed.BUAnimHumanoidCS_AdvancedMonsterLocomotion.ShouldMoveLoopFRToBR
// (Native, Public, Private, HasOutParams, BlueprintCallable, BlueprintPure)
// Parameters:
// uint8                                   ReturnValue                                            (Parm, OutParm, ReturnParm, NoDestructor, HasGetValueTypeHash)

uint8 UBUAnimHumanoidCS_AdvancedMonsterLocomotion::ShouldMoveLoopFRToBR()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BUAnimHumanoidCS_AdvancedMonsterLocomotion", "ShouldMoveLoopFRToBR");

	Params::BUAnimHumanoidCS_AdvancedMonsterLocomotion_ShouldMoveLoopFRToBR Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function b1-Managed.BUAnimHumanoidCS_AdvancedMonsterLocomotion.ShouldMoveLoopBRToFR
// (Native, Public, Private, HasOutParams, BlueprintCallable, BlueprintPure)
// Parameters:
// uint8                                   ReturnValue                                            (Parm, OutParm, ReturnParm, NoDestructor, HasGetValueTypeHash)

uint8 UBUAnimHumanoidCS_AdvancedMonsterLocomotion::ShouldMoveLoopBRToFR()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BUAnimHumanoidCS_AdvancedMonsterLocomotion", "ShouldMoveLoopBRToFR");

	Params::BUAnimHumanoidCS_AdvancedMonsterLocomotion_ShouldMoveLoopBRToFR Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function b1-Managed.BUAnimHumanoidCS_AdvancedMonsterLocomotion.ShouldMoveLoopToBwd
// (Native, Public, Private, HasOutParams, BlueprintCallable, BlueprintPure)
// Parameters:
// uint8                                   ReturnValue                                            (Parm, OutParm, ReturnParm, NoDestructor, HasGetValueTypeHash)

uint8 UBUAnimHumanoidCS_AdvancedMonsterLocomotion::ShouldMoveLoopToBwd()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BUAnimHumanoidCS_AdvancedMonsterLocomotion", "ShouldMoveLoopToBwd");

	Params::BUAnimHumanoidCS_AdvancedMonsterLocomotion_ShouldMoveLoopToBwd Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function b1-Managed.BUAnimHumanoidCS_AdvancedMonsterLocomotion.ShouldMoveLoopToFwd
// (Native, Public, Private, HasOutParams, BlueprintCallable, BlueprintPure)
// Parameters:
// uint8                                   ReturnValue                                            (Parm, OutParm, ReturnParm, NoDestructor, HasGetValueTypeHash)

uint8 UBUAnimHumanoidCS_AdvancedMonsterLocomotion::ShouldMoveLoopToFwd()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BUAnimHumanoidCS_AdvancedMonsterLocomotion", "ShouldMoveLoopToFwd");

	Params::BUAnimHumanoidCS_AdvancedMonsterLocomotion_ShouldMoveLoopToFwd Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function b1-Managed.BUAnimHumanoidCS_AdvancedMonsterLocomotion.SetupMoveLoopOutput
// (Native, Public, Private, HasOutParams, BlueprintCallable)
// Parameters:
// struct FAnimUpdateContext               Context                                                (Parm, OutParm, ReferenceParm)
// struct FAnimNodeReference               Node                                                   (Parm, OutParm, ReferenceParm, NoDestructor)

void UBUAnimHumanoidCS_AdvancedMonsterLocomotion::SetupMoveLoopOutput(struct FAnimUpdateContext& Context, struct FAnimNodeReference& Node)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BUAnimHumanoidCS_AdvancedMonsterLocomotion", "SetupMoveLoopOutput");

	Params::BUAnimHumanoidCS_AdvancedMonsterLocomotion_SetupMoveLoopOutput Parms{};

	Parms.Context = std::move(Context);
	Parms.Node = std::move(Node);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	Context = std::move(Parms.Context);
	Node = std::move(Parms.Node);
}


// Function b1-Managed.BUAnimHumanoidCS_AdvancedMonsterLocomotion.UpdateMoveStartAnim
// (Native, Public, Private, HasOutParams, BlueprintCallable)
// Parameters:
// struct FAnimUpdateContext               Context                                                (Parm, OutParm, ReferenceParm)
// struct FAnimNodeReference               Node                                                   (Parm, OutParm, ReferenceParm, NoDestructor)

void UBUAnimHumanoidCS_AdvancedMonsterLocomotion::UpdateMoveStartAnim(struct FAnimUpdateContext& Context, struct FAnimNodeReference& Node)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BUAnimHumanoidCS_AdvancedMonsterLocomotion", "UpdateMoveStartAnim");

	Params::BUAnimHumanoidCS_AdvancedMonsterLocomotion_UpdateMoveStartAnim Parms{};

	Parms.Context = std::move(Context);
	Parms.Node = std::move(Node);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	Context = std::move(Parms.Context);
	Node = std::move(Parms.Node);
}


// Function b1-Managed.BUAnimHumanoidCS_AdvancedMonsterLocomotion.SetupMoveStopOutput
// (Native, Public, Private, HasOutParams, BlueprintCallable)
// Parameters:
// struct FAnimUpdateContext               Context                                                (Parm, OutParm, ReferenceParm)
// struct FAnimNodeReference               Node                                                   (Parm, OutParm, ReferenceParm, NoDestructor)

void UBUAnimHumanoidCS_AdvancedMonsterLocomotion::SetupMoveStopOutput(struct FAnimUpdateContext& Context, struct FAnimNodeReference& Node)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BUAnimHumanoidCS_AdvancedMonsterLocomotion", "SetupMoveStopOutput");

	Params::BUAnimHumanoidCS_AdvancedMonsterLocomotion_SetupMoveStopOutput Parms{};

	Parms.Context = std::move(Context);
	Parms.Node = std::move(Node);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	Context = std::move(Parms.Context);
	Node = std::move(Parms.Node);
}


// Function b1-Managed.BUAnimHumanoidCS_AdvancedMonsterLocomotion.SetupMoveTurnOutput
// (Native, Public, Private, HasOutParams, BlueprintCallable)
// Parameters:
// struct FAnimUpdateContext               Context                                                (Parm, OutParm, ReferenceParm)
// struct FAnimNodeReference               Node                                                   (Parm, OutParm, ReferenceParm, NoDestructor)

void UBUAnimHumanoidCS_AdvancedMonsterLocomotion::SetupMoveTurnOutput(struct FAnimUpdateContext& Context, struct FAnimNodeReference& Node)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BUAnimHumanoidCS_AdvancedMonsterLocomotion", "SetupMoveTurnOutput");

	Params::BUAnimHumanoidCS_AdvancedMonsterLocomotion_SetupMoveTurnOutput Parms{};

	Parms.Context = std::move(Context);
	Parms.Node = std::move(Node);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	Context = std::move(Parms.Context);
	Node = std::move(Parms.Node);
}


// Function b1-Managed.BUAnimHumanoidCS_AdvancedMonsterLocomotion.UpdateMoveTurnAnim
// (Native, Public, Private, HasOutParams, BlueprintCallable)
// Parameters:
// struct FAnimUpdateContext               Context                                                (Parm, OutParm, ReferenceParm)
// struct FAnimNodeReference               Node                                                   (Parm, OutParm, ReferenceParm, NoDestructor)

void UBUAnimHumanoidCS_AdvancedMonsterLocomotion::UpdateMoveTurnAnim(struct FAnimUpdateContext& Context, struct FAnimNodeReference& Node)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BUAnimHumanoidCS_AdvancedMonsterLocomotion", "UpdateMoveTurnAnim");

	Params::BUAnimHumanoidCS_AdvancedMonsterLocomotion_UpdateMoveTurnAnim Parms{};

	Parms.Context = std::move(Context);
	Parms.Node = std::move(Node);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	Context = std::move(Parms.Context);
	Node = std::move(Parms.Node);
}


// Function b1-Managed.BUAnimHumanoidCS_AdvancedMonsterLocomotion.UpdateMoveStopAnim
// (Native, Public, Private, HasOutParams, BlueprintCallable)
// Parameters:
// struct FAnimUpdateContext               Context                                                (Parm, OutParm, ReferenceParm)
// struct FAnimNodeReference               Node                                                   (Parm, OutParm, ReferenceParm, NoDestructor)

void UBUAnimHumanoidCS_AdvancedMonsterLocomotion::UpdateMoveStopAnim(struct FAnimUpdateContext& Context, struct FAnimNodeReference& Node)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BUAnimHumanoidCS_AdvancedMonsterLocomotion", "UpdateMoveStopAnim");

	Params::BUAnimHumanoidCS_AdvancedMonsterLocomotion_UpdateMoveStopAnim Parms{};

	Parms.Context = std::move(Context);
	Parms.Node = std::move(Node);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	Context = std::move(Parms.Context);
	Node = std::move(Parms.Node);
}


// Function b1-Managed.BUAnimHumanoidCS_AdvancedMonsterLocomotion.SetupMoveStartAnim
// (Native, Public, Private, HasOutParams, BlueprintCallable)
// Parameters:
// struct FAnimUpdateContext               Context                                                (Parm, OutParm, ReferenceParm)
// struct FAnimNodeReference               Node                                                   (Parm, OutParm, ReferenceParm, NoDestructor)

void UBUAnimHumanoidCS_AdvancedMonsterLocomotion::SetupMoveStartAnim(struct FAnimUpdateContext& Context, struct FAnimNodeReference& Node)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BUAnimHumanoidCS_AdvancedMonsterLocomotion", "SetupMoveStartAnim");

	Params::BUAnimHumanoidCS_AdvancedMonsterLocomotion_SetupMoveStartAnim Parms{};

	Parms.Context = std::move(Context);
	Parms.Node = std::move(Node);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	Context = std::move(Parms.Context);
	Node = std::move(Parms.Node);
}


// Function b1-Managed.BUAnimHumanoidCS_AdvancedMonsterLocomotion.ShouldMoveLoopToFL
// (Native, Public, Private, HasOutParams, BlueprintCallable, BlueprintPure)
// Parameters:
// uint8                                   ReturnValue                                            (Parm, OutParm, ReturnParm, NoDestructor, HasGetValueTypeHash)

uint8 UBUAnimHumanoidCS_AdvancedMonsterLocomotion::ShouldMoveLoopToFL()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BUAnimHumanoidCS_AdvancedMonsterLocomotion", "ShouldMoveLoopToFL");

	Params::BUAnimHumanoidCS_AdvancedMonsterLocomotion_ShouldMoveLoopToFL Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function b1-Managed.BUAnimHumanoidCS_AdvancedMonsterLocomotion.ShouldMoveLoopToFR
// (Native, Public, Private, HasOutParams, BlueprintCallable, BlueprintPure)
// Parameters:
// uint8                                   ReturnValue                                            (Parm, OutParm, ReturnParm, NoDestructor, HasGetValueTypeHash)

uint8 UBUAnimHumanoidCS_AdvancedMonsterLocomotion::ShouldMoveLoopToFR()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BUAnimHumanoidCS_AdvancedMonsterLocomotion", "ShouldMoveLoopToFR");

	Params::BUAnimHumanoidCS_AdvancedMonsterLocomotion_ShouldMoveLoopToFR Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function b1-Managed.BUAnimHumanoidCS_AdvancedMonsterLocomotion.ShouldMoveLoopToBL
// (Native, Public, Private, HasOutParams, BlueprintCallable, BlueprintPure)
// Parameters:
// uint8                                   ReturnValue                                            (Parm, OutParm, ReturnParm, NoDestructor, HasGetValueTypeHash)

uint8 UBUAnimHumanoidCS_AdvancedMonsterLocomotion::ShouldMoveLoopToBL()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BUAnimHumanoidCS_AdvancedMonsterLocomotion", "ShouldMoveLoopToBL");

	Params::BUAnimHumanoidCS_AdvancedMonsterLocomotion_ShouldMoveLoopToBL Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function b1-Managed.BUAnimHumanoidCS_AdvancedMonsterLocomotion.ShouldMoveLoopToBR
// (Native, Public, Private, HasOutParams, BlueprintCallable, BlueprintPure)
// Parameters:
// uint8                                   ReturnValue                                            (Parm, OutParm, ReturnParm, NoDestructor, HasGetValueTypeHash)

uint8 UBUAnimHumanoidCS_AdvancedMonsterLocomotion::ShouldMoveLoopToBR()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BUAnimHumanoidCS_AdvancedMonsterLocomotion", "ShouldMoveLoopToBR");

	Params::BUAnimHumanoidCS_AdvancedMonsterLocomotion_ShouldMoveLoopToBR Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function b1-Managed.BUAnimHumanoidCS_AdvancedMonsterLocomotion.SetupMoveTurnAnim
// (Native, Public, Private, HasOutParams, BlueprintCallable)
// Parameters:
// struct FAnimUpdateContext               Context                                                (Parm, OutParm, ReferenceParm)
// struct FAnimNodeReference               Node                                                   (Parm, OutParm, ReferenceParm, NoDestructor)

void UBUAnimHumanoidCS_AdvancedMonsterLocomotion::SetupMoveTurnAnim(struct FAnimUpdateContext& Context, struct FAnimNodeReference& Node)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BUAnimHumanoidCS_AdvancedMonsterLocomotion", "SetupMoveTurnAnim");

	Params::BUAnimHumanoidCS_AdvancedMonsterLocomotion_SetupMoveTurnAnim Parms{};

	Parms.Context = std::move(Context);
	Parms.Node = std::move(Node);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	Context = std::move(Parms.Context);
	Node = std::move(Parms.Node);
}


// Function b1-Managed.BUAnimHumanoidCS_AdvancedMonsterLocomotion.SetupMoveStopAnim
// (Native, Public, Private, HasOutParams, BlueprintCallable)
// Parameters:
// struct FAnimUpdateContext               Context                                                (Parm, OutParm, ReferenceParm)
// struct FAnimNodeReference               Node                                                   (Parm, OutParm, ReferenceParm, NoDestructor)

void UBUAnimHumanoidCS_AdvancedMonsterLocomotion::SetupMoveStopAnim(struct FAnimUpdateContext& Context, struct FAnimNodeReference& Node)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BUAnimHumanoidCS_AdvancedMonsterLocomotion", "SetupMoveStopAnim");

	Params::BUAnimHumanoidCS_AdvancedMonsterLocomotion_SetupMoveStopAnim Parms{};

	Parms.Context = std::move(Context);
	Parms.Node = std::move(Node);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	Context = std::move(Parms.Context);
	Node = std::move(Parms.Node);
}


// Function b1-Managed.BUAnimHumanoidCS_AdvancedMonsterLocomotion.SetupMoveLoopAnim
// (Native, Public, Private, HasOutParams, BlueprintCallable)
// Parameters:
// struct FAnimUpdateContext               Context                                                (Parm, OutParm, ReferenceParm)
// struct FAnimNodeReference               Node                                                   (Parm, OutParm, ReferenceParm, NoDestructor)

void UBUAnimHumanoidCS_AdvancedMonsterLocomotion::SetupMoveLoopAnim(struct FAnimUpdateContext& Context, struct FAnimNodeReference& Node)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BUAnimHumanoidCS_AdvancedMonsterLocomotion", "SetupMoveLoopAnim");

	Params::BUAnimHumanoidCS_AdvancedMonsterLocomotion_SetupMoveLoopAnim Parms{};

	Parms.Context = std::move(Context);
	Parms.Node = std::move(Node);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	Context = std::move(Parms.Context);
	Node = std::move(Parms.Node);
}


// Function b1-Managed.BUAnimHumanoidCS_AdvancedMonsterLocomotion.SetupIdleOutput
// (Native, Public, Private, HasOutParams, BlueprintCallable)
// Parameters:
// struct FAnimUpdateContext               Context                                                (Parm, OutParm, ReferenceParm)
// struct FAnimNodeReference               Node                                                   (Parm, OutParm, ReferenceParm, NoDestructor)

void UBUAnimHumanoidCS_AdvancedMonsterLocomotion::SetupIdleOutput(struct FAnimUpdateContext& Context, struct FAnimNodeReference& Node)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BUAnimHumanoidCS_AdvancedMonsterLocomotion", "SetupIdleOutput");

	Params::BUAnimHumanoidCS_AdvancedMonsterLocomotion_SetupIdleOutput Parms{};

	Parms.Context = std::move(Context);
	Parms.Node = std::move(Node);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	Context = std::move(Parms.Context);
	Node = std::move(Parms.Node);
}


// Function b1-Managed.BUAnimHumanoidCS_AdvancedMonsterLocomotion.SetupIdleAnim
// (Native, Public, Private, HasOutParams, BlueprintCallable)
// Parameters:
// struct FAnimUpdateContext               Context                                                (Parm, OutParm, ReferenceParm)
// struct FAnimNodeReference               Node                                                   (Parm, OutParm, ReferenceParm, NoDestructor)

void UBUAnimHumanoidCS_AdvancedMonsterLocomotion::SetupIdleAnim(struct FAnimUpdateContext& Context, struct FAnimNodeReference& Node)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BUAnimHumanoidCS_AdvancedMonsterLocomotion", "SetupIdleAnim");

	Params::BUAnimHumanoidCS_AdvancedMonsterLocomotion_SetupIdleAnim Parms{};

	Parms.Context = std::move(Context);
	Parms.Node = std::move(Node);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	Context = std::move(Parms.Context);
	Node = std::move(Parms.Node);
}


// Function b1-Managed.BUAnimHumanoidCS_AdvancedMonsterLocomotion.ShouldToMove
// (Native, Public, Private, HasOutParams, BlueprintCallable, BlueprintPure)
// Parameters:
// uint8                                   ReturnValue                                            (Parm, OutParm, ReturnParm, NoDestructor, HasGetValueTypeHash)

uint8 UBUAnimHumanoidCS_AdvancedMonsterLocomotion::ShouldToMove()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BUAnimHumanoidCS_AdvancedMonsterLocomotion", "ShouldToMove");

	Params::BUAnimHumanoidCS_AdvancedMonsterLocomotion_ShouldToMove Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function b1-Managed.GPUSplineMesh.ReceiveTick
// (Native, Event, Public, BlueprintEvent)
// Parameters:
// float                                   DeltaSeconds                                           (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void AGPUSplineMesh::ReceiveTick(float DeltaSeconds)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GPUSplineMesh", "ReceiveTick");

	Params::GPUSplineMesh_ReceiveTick Parms{};

	Parms.DeltaSeconds = DeltaSeconds;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function b1-Managed.BED_StateNode_CustomEnter.GetContextOutputsInCS
// (Native, Event, Public, HasOutParams, BlueprintEvent)
// Parameters:
// TArray<class FName>                     ReturnValue                                            (Parm, OutParm, ReturnParm)

TArray<class FName> UBED_StateNode_CustomEnter::GetContextOutputsInCS()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BED_StateNode_CustomEnter", "GetContextOutputsInCS");

	Params::BED_StateNode_CustomEnter_GetContextOutputsInCS Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function b1-Managed.BED_StateNode_CustomExit.GetContextInputsInCS
// (Native, Event, Public, HasOutParams, BlueprintEvent)
// Parameters:
// TArray<class FName>                     ReturnValue                                            (Parm, OutParm, ReturnParm)

TArray<class FName> UBED_StateNode_CustomExit::GetContextInputsInCS()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BED_StateNode_CustomExit", "GetContextInputsInCS");

	Params::BED_StateNode_CustomExit_GetContextInputsInCS Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function b1-Managed.BGU_EQSPointRecorderActor.ReceiveDestroyed
// (Native, Event, Public, BlueprintEvent)

void ABGU_EQSPointRecorderActor::ReceiveDestroyed()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BGU_EQSPointRecorderActor", "ReceiveDestroyed");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function b1-Managed.BGU_EQSPointRecorderActor.OnPostEditMove
// (Native, Event, Public, Protected, BlueprintEvent)
// Parameters:
// uint8                                   bFinish                                                (Parm, NoDestructor, HasGetValueTypeHash)

void ABGU_EQSPointRecorderActor::OnPostEditMove(uint8 bFinish)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BGU_EQSPointRecorderActor", "OnPostEditMove");

	Params::BGU_EQSPointRecorderActor_OnPostEditMove Parms{};

	Parms.bFinish = bFinish;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function b1-Managed.BGU_EQSPointRecorderActor.BeginPlayCS
// (Native, Event, Public, Protected, BlueprintEvent)

void ABGU_EQSPointRecorderActor::BeginPlayCS()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BGU_EQSPointRecorderActor", "BeginPlayCS");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function b1-Managed.BGU_EQSPointRecorderActor.PreviewRecordSpawnPoints
// (Native, Public, BlueprintCallable)

void ABGU_EQSPointRecorderActor::PreviewRecordSpawnPoints()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BGU_EQSPointRecorderActor", "PreviewRecordSpawnPoints");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function b1-Managed.BGU_EQSPointRecorderActor.ClearGenerateEQSActors
// (Native, Public, BlueprintCallable)

void ABGU_EQSPointRecorderActor::ClearGenerateEQSActors()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BGU_EQSPointRecorderActor", "ClearGenerateEQSActors");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function b1-Managed.BGU_EQSPointRecorderActor.PreviewCustomPoints
// (Native, Public, BlueprintCallable)

void ABGU_EQSPointRecorderActor::PreviewCustomPoints()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BGU_EQSPointRecorderActor", "PreviewCustomPoints");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function b1-Managed.BGU_EQSPointRecorderActor.RecordCustomPoints
// (Native, Public, BlueprintCallable)

void ABGU_EQSPointRecorderActor::RecordCustomPoints()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BGU_EQSPointRecorderActor", "RecordCustomPoints");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function b1-Managed.BGU_EQSPointRecorderActor.ClearCustomPoints
// (Native, Public, BlueprintCallable)

void ABGU_EQSPointRecorderActor::ClearCustomPoints()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BGU_EQSPointRecorderActor", "ClearCustomPoints");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function b1-Managed.BGU_EQSPointRecorderActor.ClearSpawnPoints
// (Native, Public, BlueprintCallable)

void ABGU_EQSPointRecorderActor::ClearSpawnPoints()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BGU_EQSPointRecorderActor", "ClearSpawnPoints");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function b1-Managed.BGU_EQSPointRecorderActor.RecordEQSPoints
// (Native, Public, BlueprintCallable)

void ABGU_EQSPointRecorderActor::RecordEQSPoints()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BGU_EQSPointRecorderActor", "RecordEQSPoints");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function b1-Managed.BGU_EQSPointRecorderActor.RunEQSQuery
// (Native, Public, BlueprintCallable)

void ABGU_EQSPointRecorderActor::RunEQSQuery()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BGU_EQSPointRecorderActor", "RunEQSQuery");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function b1-Managed.BGU_EQSPointRecorderActor.ClearRecord
// (Native, Public, BlueprintCallable)

void ABGU_EQSPointRecorderActor::ClearRecord()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BGU_EQSPointRecorderActor", "ClearRecord");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function b1-Managed.BED_BehaviorNode_ControlChildActor.GetNodeDescriptionInCS
// (Native, Event, Public, HasOutParams, BlueprintEvent, Const)
// Parameters:
// class FString                           ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash)

class FString UBED_BehaviorNode_ControlChildActor::GetNodeDescriptionInCS() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BED_BehaviorNode_ControlChildActor", "GetNodeDescriptionInCS");

	Params::BED_BehaviorNode_ControlChildActor_GetNodeDescriptionInCS Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function b1-Managed.BED_BehaviorNode_PlayLevelSeq.GetNodeDescriptionInCS
// (Native, Event, Public, HasOutParams, BlueprintEvent, Const)
// Parameters:
// class FString                           ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash)

class FString UBED_BehaviorNode_PlayLevelSeq::GetNodeDescriptionInCS() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BED_BehaviorNode_PlayLevelSeq", "GetNodeDescriptionInCS");

	Params::BED_BehaviorNode_PlayLevelSeq_GetNodeDescriptionInCS Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function b1-Managed.BED_MovieNode_PerformerPostEvent.GetNodeDescriptionInCS
// (Native, Event, Public, HasOutParams, BlueprintEvent, Const)
// Parameters:
// class FString                           ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash)

class FString UBED_MovieNode_PerformerPostEvent::GetNodeDescriptionInCS() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BED_MovieNode_PerformerPostEvent", "GetNodeDescriptionInCS");

	Params::BED_MovieNode_PerformerPostEvent_GetNodeDescriptionInCS Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function b1-Managed.BGWDataAsset_PatrolGroupSettings.ClearSinglePatrolGroupSetting
// (Native, Public, BlueprintCallable)

void UBGWDataAsset_PatrolGroupSettings::ClearSinglePatrolGroupSetting()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BGWDataAsset_PatrolGroupSettings", "ClearSinglePatrolGroupSetting");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function b1-Managed.BGWDataAsset_PatrolGroupSettings.ApplySinglePatrolGroupSetting
// (Native, Public, BlueprintCallable)

void UBGWDataAsset_PatrolGroupSettings::ApplySinglePatrolGroupSetting()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BGWDataAsset_PatrolGroupSettings", "ApplySinglePatrolGroupSetting");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function b1-Managed.BGWDataAsset_PatrolGroupSettings.ClearAllPatrolGroupSettings
// (Native, Public, BlueprintCallable)

void UBGWDataAsset_PatrolGroupSettings::ClearAllPatrolGroupSettings()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BGWDataAsset_PatrolGroupSettings", "ClearAllPatrolGroupSettings");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function b1-Managed.BGWDataAsset_PatrolGroupSettings.ApplyAllPatrolGroupSettings
// (Native, Public, BlueprintCallable)

void UBGWDataAsset_PatrolGroupSettings::ApplyAllPatrolGroupSettings()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BGWDataAsset_PatrolGroupSettings", "ApplyAllPatrolGroupSettings");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function b1-Managed.BGWDataAsset_PatrolGroupSettings.ClearRepeatedSettings
// (Native, Public, BlueprintCallable)

void UBGWDataAsset_PatrolGroupSettings::ClearRepeatedSettings()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BGWDataAsset_PatrolGroupSettings", "ClearRepeatedSettings");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function b1-Managed.BUAnimInteractiveActor.BlueprintInitializeAnimation
// (Native, Event, Public, BlueprintEvent)

void UBUAnimInteractiveActor::BlueprintInitializeAnimation()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BUAnimInteractiveActor", "BlueprintInitializeAnimation");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function b1-Managed.BGUItemInteractArea_CPU.BeginPlayCS
// (Native, Event, Public, Protected, BlueprintEvent)

void ABGUItemInteractArea_CPU::BeginPlayCS()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BGUItemInteractArea_CPU", "BeginPlayCS");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function b1-Managed.BGU_CharacterAI.OnRep_PlayerStateCS
// (Native, Event, Public, BlueprintEvent)

void ABGU_CharacterAI::OnRep_PlayerStateCS()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BGU_CharacterAI", "OnRep_PlayerStateCS");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function b1-Managed.BGUPlayerCharacterCS.SetupPlayerInputComponentCS
// (Native, Event, Public, Protected, BlueprintEvent)
// Parameters:
// class UInputComponent*                  PlayerInputComponent_0                                 (ExportObject, Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ABGUPlayerCharacterCS::SetupPlayerInputComponentCS(class UInputComponent* PlayerInputComponent_0)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BGUPlayerCharacterCS", "SetupPlayerInputComponentCS");

	Params::BGUPlayerCharacterCS_SetupPlayerInputComponentCS Parms{};

	Parms.PlayerInputComponent_0 = PlayerInputComponent_0;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function b1-Managed.BGUPlayerCharacterCS.OnRep_PlayerStateCS
// (Native, Event, Public, BlueprintEvent)

void ABGUPlayerCharacterCS::OnRep_PlayerStateCS()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BGUPlayerCharacterCS", "OnRep_PlayerStateCS");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function b1-Managed.BGUPlayerCharacterCS.IsPlayerCharacterCS
// (Native, Event, Public, HasOutParams, BlueprintEvent)
// Parameters:
// uint8                                   ReturnValue                                            (Parm, OutParm, ReturnParm, NoDestructor, HasGetValueTypeHash)

uint8 ABGUPlayerCharacterCS::IsPlayerCharacterCS()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BGUPlayerCharacterCS", "IsPlayerCharacterCS");

	Params::BGUPlayerCharacterCS_IsPlayerCharacterCS Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function b1-Managed.BGUPlayerCharacterCS.ReceiveBeginPlay
// (Native, Event, Public, Protected, BlueprintEvent)

void ABGUPlayerCharacterCS::ReceiveBeginPlay()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BGUPlayerCharacterCS", "ReceiveBeginPlay");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function b1-Managed.BGUPlayerCharacterCS.OnConstructionCS
// (Native, Event, Public, Protected, BlueprintEvent)
// Parameters:
// struct FTransform                       Transform                                              (ConstParm, Parm, OutParm, ReferenceParm, IsPlainOldData, NoDestructor)

void ABGUPlayerCharacterCS::OnConstructionCS(const struct FTransform& Transform)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BGUPlayerCharacterCS", "OnConstructionCS");

	Params::BGUPlayerCharacterCS_OnConstructionCS Parms{};

	Parms.Transform = std::move(Transform);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function b1-Managed.BGUPlayerCharacterCS.ReceiveEndPlay
// (Native, Event, Public, Protected, BlueprintEvent)
// Parameters:
// EEndPlayReason                          EndPlayReason                                          (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ABGUPlayerCharacterCS::ReceiveEndPlay(EEndPlayReason EndPlayReason)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BGUPlayerCharacterCS", "ReceiveEndPlay");

	Params::BGUPlayerCharacterCS_ReceiveEndPlay Parms{};

	Parms.EndPlayReason = EndPlayReason;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function b1-Managed.BGUPlayerCharacterCS.OnPossessedCS
// (Native, Event, Public, BlueprintEvent)
// Parameters:
// class AController*                      NewController                                          (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ABGUPlayerCharacterCS::OnPossessedCS(class AController* NewController)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BGUPlayerCharacterCS", "OnPossessedCS");

	Params::BGUPlayerCharacterCS_OnPossessedCS Parms{};

	Parms.NewController = NewController;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function b1-Managed.BGUEQSFunctionBinder.OnEQSFinish
// (Native, Public, Private)
// Parameters:
// TArray<struct FVector>                  Results                                                (Parm)
// TArray<float>                           Scores                                                 (Parm)
// struct FGSEQSExParam                    ExParam                                                (Parm, NoDestructor)
// int32                                   QueryID                                                (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UBGUEQSFunctionBinder::OnEQSFinish(const TArray<struct FVector>& Results, const TArray<float>& Scores, const struct FGSEQSExParam& ExParam, int32 QueryID)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BGUEQSFunctionBinder", "OnEQSFinish");

	Params::BGUEQSFunctionBinder_OnEQSFinish Parms{};

	Parms.Results = std::move(Results);
	Parms.Scores = std::move(Scores);
	Parms.ExParam = std::move(ExParam);
	Parms.QueryID = QueryID;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function b1-Managed.BED_QuestNode_PlayDBCEfxToInteract.GetNodeDescriptionInCS
// (Native, Event, Public, HasOutParams, BlueprintEvent, Const)
// Parameters:
// class FString                           ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash)

class FString UBED_QuestNode_PlayDBCEfxToInteract::GetNodeDescriptionInCS() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BED_QuestNode_PlayDBCEfxToInteract", "GetNodeDescriptionInCS");

	Params::BED_QuestNode_PlayDBCEfxToInteract_GetNodeDescriptionInCS Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function b1-Managed.BED_SkillNode.IsSupportViewType
// (Native, Event, Public, HasOutParams, BlueprintEvent, Const)
// Parameters:
// ECalliopeViewType                       InViewType                                             (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// uint8                                   ReturnValue                                            (Parm, OutParm, ReturnParm, NoDestructor, HasGetValueTypeHash)

uint8 UBED_SkillNode::IsSupportViewType(const ECalliopeViewType& InViewType) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BED_SkillNode", "IsSupportViewType");

	Params::BED_SkillNode_IsSupportViewType Parms{};

	Parms.InViewType = InViewType;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function b1-Managed.BGUPlayMontageBinder.OnInterrupted
// (Native, Public)
// Parameters:
// int32                                   _ReqIdx                                                (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// class UAnimInstance*                    AnimInstance                                           (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// class UAnimMontage*                     Montage                                                (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UBGUPlayMontageBinder::OnInterrupted(int32 _ReqIdx, class UAnimInstance* AnimInstance, class UAnimMontage* Montage)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BGUPlayMontageBinder", "OnInterrupted");

	Params::BGUPlayMontageBinder_OnInterrupted Parms{};

	Parms._ReqIdx = _ReqIdx;
	Parms.AnimInstance = AnimInstance;
	Parms.Montage = Montage;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function b1-Managed.BGUPlayMontageBinder.OnCompleted
// (Native, Public, Private)
// Parameters:
// int32                                   _ReqIdx                                                (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// class UAnimInstance*                    AnimInstance                                           (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// class UAnimMontage*                     Montage                                                (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UBGUPlayMontageBinder::OnCompleted(int32 _ReqIdx, class UAnimInstance* AnimInstance, class UAnimMontage* Montage)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BGUPlayMontageBinder", "OnCompleted");

	Params::BGUPlayMontageBinder_OnCompleted Parms{};

	Parms._ReqIdx = _ReqIdx;
	Parms.AnimInstance = AnimInstance;
	Parms.Montage = Montage;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function b1-Managed.BGUPlayMontageBinder.OnBlendOut
// (Native, Public, Private)
// Parameters:
// int32                                   _ReqIdx                                                (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// class UAnimInstance*                    AnimInstance                                           (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// class UAnimMontage*                     Montage                                                (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UBGUPlayMontageBinder::OnBlendOut(int32 _ReqIdx, class UAnimInstance* AnimInstance, class UAnimMontage* Montage)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BGUPlayMontageBinder", "OnBlendOut");

	Params::BGUPlayMontageBinder_OnBlendOut Parms{};

	Parms._ReqIdx = _ReqIdx;
	Parms.AnimInstance = AnimInstance;
	Parms.Montage = Montage;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function b1-Managed.CustomShadowComp.TickComponentInCS
// (Native, Event, Public, BlueprintEvent)
// Parameters:
// float                                   DeltaTime                                              (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UCustomShadowComp::TickComponentInCS(float DeltaTime)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CustomShadowComp", "TickComponentInCS");

	Params::CustomShadowComp_TickComponentInCS Parms{};

	Parms.DeltaTime = DeltaTime;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function b1-Managed.CustomShadowComp.BeginPlayInCS
// (Native, Event, Public, BlueprintEvent)

void UCustomShadowComp::BeginPlayInCS()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CustomShadowComp", "BeginPlayInCS");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function b1-Managed.CustomShadowComp.Tick
// (Native, Public, BlueprintCallable)

void UCustomShadowComp::Tick()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CustomShadowComp", "Tick");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function b1-Managed.CustomShadowComp.Init
// (Native, Public, BlueprintCallable)

void UCustomShadowComp::Init()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CustomShadowComp", "Init");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function b1-Managed.GSBackgroundBlurCS.SetCommParams
// (Native, Public, BlueprintCallable)
// Parameters:
// struct FMatCommParams                   InCommParams                                           (Parm, NoDestructor, HasGetValueTypeHash)

void UGSBackgroundBlurCS::SetCommParams(const struct FMatCommParams& InCommParams)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GSBackgroundBlurCS", "SetCommParams");

	Params::GSBackgroundBlurCS_SetCommParams Parms{};

	Parms.InCommParams = std::move(InCommParams);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function b1-Managed.GSBackgroundBlurCS.GSOnConstruct
// (Native, Public, BlueprintCallable)

void UGSBackgroundBlurCS::GSOnConstruct()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GSBackgroundBlurCS", "GSOnConstruct");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function b1-Managed.BAN_GSPlayerJump.bIsNativeBranchingPointCS
// (Native, Event, Public, HasOutParams, BlueprintEvent, Const)
// Parameters:
// uint8                                   ReturnValue                                            (Parm, OutParm, ReturnParm, NoDestructor, HasGetValueTypeHash)

uint8 UBAN_GSPlayerJump::bIsNativeBranchingPointCS() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BAN_GSPlayerJump", "bIsNativeBranchingPointCS");

	Params::BAN_GSPlayerJump_bIsNativeBranchingPointCS Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function b1-Managed.BAN_GSPlayerJump.GSNotifyCS
// (Native, Event, Public, Protected, BlueprintEvent, Const)
// Parameters:
// struct FUStGSNotifyParam                NotifyParam                                            (Parm, ZeroConstructor, IsPlainOldData, NoDestructor)

void UBAN_GSPlayerJump::GSNotifyCS(const struct FUStGSNotifyParam& NotifyParam) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BAN_GSPlayerJump", "GSNotifyCS");

	Params::BAN_GSPlayerJump_GSNotifyCS Parms{};

	Parms.NotifyParam = std::move(NotifyParam);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function b1-Managed.BSN_MediaCache.GetDisplayName
// (Native, Event, Public, HasOutParams, BlueprintEvent)
// Parameters:
// class FString                           ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash)

class FString UBSN_MediaCache::GetDisplayName()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BSN_MediaCache", "GetDisplayName");

	Params::BSN_MediaCache_GetDisplayName Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function b1-Managed.BSN_MediaCache.OnNotify
// (Native, Event, Public, BlueprintEvent)
// Parameters:
// class UCalliopeLevelSequencePlayer*     Player                                                 (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// int32                                   InStatus                                               (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// uint8                                   bInBackwards                                           (Parm, NoDestructor, HasGetValueTypeHash)

void UBSN_MediaCache::OnNotify(class UCalliopeLevelSequencePlayer* Player, int32 InStatus, uint8 bInBackwards)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BSN_MediaCache", "OnNotify");

	Params::BSN_MediaCache_OnNotify Parms{};

	Parms.Player = Player;
	Parms.InStatus = InStatus;
	Parms.bInBackwards = bInBackwards;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function b1-Managed.BAN_GSPlayCameraShake.GSNotifyCS
// (Native, Event, Public, Protected, BlueprintEvent, Const)
// Parameters:
// struct FUStGSNotifyParam                NotifyParam                                            (Parm, ZeroConstructor, IsPlainOldData, NoDestructor)

void UBAN_GSPlayCameraShake::GSNotifyCS(const struct FUStGSNotifyParam& NotifyParam) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BAN_GSPlayCameraShake", "GSNotifyCS");

	Params::BAN_GSPlayCameraShake_GSNotifyCS Parms{};

	Parms.NotifyParam = std::move(NotifyParam);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function b1-Managed.BSNS_ShowSpecialUIV2.GetDisplayName
// (Native, Event, Public, HasOutParams, BlueprintEvent)
// Parameters:
// class FString                           ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash)

class FString UBSNS_ShowSpecialUIV2::GetDisplayName()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BSNS_ShowSpecialUIV2", "GetDisplayName");

	Params::BSNS_ShowSpecialUIV2_GetDisplayName Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function b1-Managed.BSNS_ShowSpecialUIV2.OnNotifyBegin
// (Native, Event, Public, BlueprintEvent)
// Parameters:
// class UCalliopeLevelSequencePlayer*     InPlayer                                               (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// int32                                   InStatus                                               (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// uint8                                   bInBackwards                                           (Parm, NoDestructor, HasGetValueTypeHash)

void UBSNS_ShowSpecialUIV2::OnNotifyBegin(class UCalliopeLevelSequencePlayer* InPlayer, int32 InStatus, uint8 bInBackwards)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BSNS_ShowSpecialUIV2", "OnNotifyBegin");

	Params::BSNS_ShowSpecialUIV2_OnNotifyBegin Parms{};

	Parms.InPlayer = InPlayer;
	Parms.InStatus = InStatus;
	Parms.bInBackwards = bInBackwards;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function b1-Managed.BSNS_ShowSpecialUIV2.OnNotifyEnd
// (Native, Event, Public, BlueprintEvent)
// Parameters:
// class UCalliopeLevelSequencePlayer*     Player                                                 (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// int32                                   InStatus                                               (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// uint8                                   bInBackwards                                           (Parm, NoDestructor, HasGetValueTypeHash)

void UBSNS_ShowSpecialUIV2::OnNotifyEnd(class UCalliopeLevelSequencePlayer* Player, int32 InStatus, uint8 bInBackwards)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BSNS_ShowSpecialUIV2", "OnNotifyEnd");

	Params::BSNS_ShowSpecialUIV2_OnNotifyEnd Parms{};

	Parms.Player = Player;
	Parms.InStatus = InStatus;
	Parms.bInBackwards = bInBackwards;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function b1-Managed.BUI_MapWidget.Construct
// (BlueprintCosmetic, Native, Event, Public, BlueprintEvent)

void UBUI_MapWidget::Construct()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BUI_MapWidget", "Construct");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function b1-Managed.BANS_GSAddBuff.GSNotifyBeginCS
// (Native, Event, Public, Protected, BlueprintEvent, Const)
// Parameters:
// struct FUStGSNotifyParam                NotifyParam                                            (Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
// float                                   TotalDuration                                          (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UBANS_GSAddBuff::GSNotifyBeginCS(const struct FUStGSNotifyParam& NotifyParam, float TotalDuration) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BANS_GSAddBuff", "GSNotifyBeginCS");

	Params::BANS_GSAddBuff_GSNotifyBeginCS Parms{};

	Parms.NotifyParam = std::move(NotifyParam);
	Parms.TotalDuration = TotalDuration;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function b1-Managed.BANS_GSAddBuff.GSNotifyTickCS
// (Native, Event, Public, Protected, BlueprintEvent, Const)
// Parameters:
// struct FUStGSNotifyParam                NotifyParam                                            (Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
// float                                   FrameDeltaTime                                         (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UBANS_GSAddBuff::GSNotifyTickCS(const struct FUStGSNotifyParam& NotifyParam, float FrameDeltaTime) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BANS_GSAddBuff", "GSNotifyTickCS");

	Params::BANS_GSAddBuff_GSNotifyTickCS Parms{};

	Parms.NotifyParam = std::move(NotifyParam);
	Parms.FrameDeltaTime = FrameDeltaTime;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function b1-Managed.BANS_GSAddBuff.GSNotifyEndCS
// (Native, Event, Public, Protected, BlueprintEvent, Const)
// Parameters:
// struct FUStGSNotifyParam                NotifyParam                                            (Parm, ZeroConstructor, IsPlainOldData, NoDestructor)

void UBANS_GSAddBuff::GSNotifyEndCS(const struct FUStGSNotifyParam& NotifyParam) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BANS_GSAddBuff", "GSNotifyEndCS");

	Params::BANS_GSAddBuff_GSNotifyEndCS Parms{};

	Parms.NotifyParam = std::move(NotifyParam);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function b1-Managed.BGP_PlayerControllerCS.GetSeamlessTravelActorListCS
// (Native, Event, Public, HasOutParams, BlueprintEvent)
// Parameters:
// uint8                                   bToEntry                                               (Parm, NoDestructor, HasGetValueTypeHash)
// TArray<class AActor*>                   ActorList                                              (Parm, OutParm)

void ABGP_PlayerControllerCS::GetSeamlessTravelActorListCS(uint8 bToEntry, TArray<class AActor*>* ActorList)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BGP_PlayerControllerCS", "GetSeamlessTravelActorListCS");

	Params::BGP_PlayerControllerCS_GetSeamlessTravelActorListCS Parms{};

	Parms.bToEntry = bToEntry;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	if (ActorList != nullptr)
		*ActorList = std::move(Parms.ActorList);
}


// Function b1-Managed.BGP_PlayerControllerCS.OnRep_PlayerStateCS
// (Native, Event, Public, BlueprintEvent)

void ABGP_PlayerControllerCS::OnRep_PlayerStateCS()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BGP_PlayerControllerCS", "OnRep_PlayerStateCS");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function b1-Managed.BGP_PlayerControllerCS.InitInputSystemCS
// (Native, Event, Public, BlueprintEvent)

void ABGP_PlayerControllerCS::InitInputSystemCS()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BGP_PlayerControllerCS", "InitInputSystemCS");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function b1-Managed.BGP_PlayerControllerCS.ConsoleCommandCS
// (Native, Event, Public, BlueprintEvent)
// Parameters:
// class FString                           Command                                                (Parm, ZeroConstructor, HasGetValueTypeHash)

void ABGP_PlayerControllerCS::ConsoleCommandCS(const class FString& Command)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BGP_PlayerControllerCS", "ConsoleCommandCS");

	Params::BGP_PlayerControllerCS_ConsoleCommandCS Parms{};

	Parms.Command = std::move(Command);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function b1-Managed.BGP_PlayerControllerCS.ReceiveEndPlay
// (Native, Event, Public, Protected, BlueprintEvent)
// Parameters:
// EEndPlayReason                          EndPlayReason                                          (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ABGP_PlayerControllerCS::ReceiveEndPlay(EEndPlayReason EndPlayReason)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BGP_PlayerControllerCS", "ReceiveEndPlay");

	Params::BGP_PlayerControllerCS_ReceiveEndPlay Parms{};

	Parms.EndPlayReason = EndPlayReason;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function b1-Managed.BGP_PlayerControllerCS.BeginPlayCS
// (Native, Event, Public, BlueprintEvent)

void ABGP_PlayerControllerCS::BeginPlayCS()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BGP_PlayerControllerCS", "BeginPlayCS");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function b1-Managed.BGP_PlayerControllerCS.OnControlledPawnChange
// (Native, Public)
// Parameters:
// class AActor*                           OldPawn                                                (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// class AActor*                           NewPawn                                                (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ABGP_PlayerControllerCS::OnControlledPawnChange(class AActor* OldPawn, class AActor* NewPawn)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BGP_PlayerControllerCS", "OnControlledPawnChange");

	Params::BGP_PlayerControllerCS_OnControlledPawnChange Parms{};

	Parms.OldPawn = OldPawn;
	Parms.NewPawn = NewPawn;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function b1-Managed.BGP_PlayerControllerCS.GSRpcSendClient
// (Net, NetReliable, Native, Event, Public, NetClient)
// Parameters:
// TArray<uint8>                           SendData                                               (Parm)

void ABGP_PlayerControllerCS::GSRpcSendClient(const TArray<uint8>& SendData)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BGP_PlayerControllerCS", "GSRpcSendClient");

	Params::BGP_PlayerControllerCS_GSRpcSendClient Parms{};

	Parms.SendData = std::move(SendData);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function b1-Managed.BGP_PlayerControllerCS.GSRpcSendServer
// (Net, NetReliable, Native, Event, Public, NetServer)
// Parameters:
// TArray<uint8>                           SendData                                               (Parm)

void ABGP_PlayerControllerCS::GSRpcSendServer(const TArray<uint8>& SendData)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BGP_PlayerControllerCS", "GSRpcSendServer");

	Params::BGP_PlayerControllerCS_GSRpcSendServer Parms{};

	Parms.SendData = std::move(SendData);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function b1-Managed.BGP_PlayerControllerCS.GetPlayerViewPointCS
// (Native, Event, Public, HasOutParams, BlueprintEvent, Const)
// Parameters:
// struct FVector                          Out_Location                                           (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// struct FRotator                         Out_Rotation                                           (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
// uint8                                   ReturnValue                                            (Parm, OutParm, ReturnParm, NoDestructor, HasGetValueTypeHash)

uint8 ABGP_PlayerControllerCS::GetPlayerViewPointCS(struct FVector* Out_Location, struct FRotator* Out_Rotation) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BGP_PlayerControllerCS", "GetPlayerViewPointCS");

	Params::BGP_PlayerControllerCS_GetPlayerViewPointCS Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	if (Out_Location != nullptr)
		*Out_Location = std::move(Parms.Out_Location);

	if (Out_Rotation != nullptr)
		*Out_Rotation = std::move(Parms.Out_Rotation);

	return Parms.ReturnValue;
}


// Function b1-Managed.BGP_ReplayPlayerController.OnRep_PawnCS
// (Native, Event, Public, BlueprintEvent)

void ABGP_ReplayPlayerController::OnRep_PawnCS()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BGP_ReplayPlayerController", "OnRep_PawnCS");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function b1-Managed.B1NetReplicationGraphConnectionCS.NotifyActorChannelCleanedUpCS
// (Native, Event, Public, BlueprintEvent)
// Parameters:
// class UActorChannel*                    Channel                                                (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// int32                                   CloseReason                                            (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UB1NetReplicationGraphConnectionCS::NotifyActorChannelCleanedUpCS(class UActorChannel* Channel, int32 CloseReason)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("B1NetReplicationGraphConnectionCS", "NotifyActorChannelCleanedUpCS");

	Params::B1NetReplicationGraphConnectionCS_NotifyActorChannelCleanedUpCS Parms{};

	Parms.Channel = Channel;
	Parms.CloseReason = CloseReason;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function b1-Managed.B1NetReplicationGraphConnectionCS.NotifyActorChannelRemovedCS
// (Native, Event, Public, BlueprintEvent)
// Parameters:
// class AActor*                           Actor                                                  (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UB1NetReplicationGraphConnectionCS::NotifyActorChannelRemovedCS(class AActor* Actor)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("B1NetReplicationGraphConnectionCS", "NotifyActorChannelRemovedCS");

	Params::B1NetReplicationGraphConnectionCS_NotifyActorChannelRemovedCS Parms{};

	Parms.Actor = Actor;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function b1-Managed.B1NetReplicationGraphConnectionCS.NotifyActorChannelAddedCS
// (Native, Event, Public, BlueprintEvent)
// Parameters:
// class AActor*                           Actor                                                  (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// class UActorChannel*                    Channel                                                (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UB1NetReplicationGraphConnectionCS::NotifyActorChannelAddedCS(class AActor* Actor, class UActorChannel* Channel)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("B1NetReplicationGraphConnectionCS", "NotifyActorChannelAddedCS");

	Params::B1NetReplicationGraphConnectionCS_NotifyActorChannelAddedCS Parms{};

	Parms.Actor = Actor;
	Parms.Channel = Channel;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function b1-Managed.BMPS_Base.GetCategoryTextCS
// (Native, Event, Public, HasOutParams, BlueprintEvent, Const)
// Parameters:
// class FString                           ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash)

class FString UBMPS_Base::GetCategoryTextCS() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BMPS_Base", "GetCategoryTextCS");

	Params::BMPS_Base_GetCategoryTextCS Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function b1-Managed.BMPS_Base.GetFooterTextCS
// (Native, Event, Public, HasOutParams, BlueprintEvent, Const)
// Parameters:
// class FString                           ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash)

class FString UBMPS_Base::GetFooterTextCS() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BMPS_Base", "GetFooterTextCS");

	Params::BMPS_Base_GetFooterTextCS Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function b1-Managed.BMPS_CLS.TeardownForPipelineCS
// (Native, Event, Public, Protected, BlueprintEvent)
// Parameters:
// class UMoviePipeline*                   InPipeline                                             (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UBMPS_CLS::TeardownForPipelineCS(class UMoviePipeline* InPipeline)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BMPS_CLS", "TeardownForPipelineCS");

	Params::BMPS_CLS_TeardownForPipelineCS Parms{};

	Parms.InPipeline = InPipeline;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function b1-Managed.BMPS_CLS.SetupForPipelineCS
// (Native, Event, Public, Protected, BlueprintEvent)
// Parameters:
// class UMoviePipeline*                   InPipeline                                             (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UBMPS_CLS::SetupForPipelineCS(class UMoviePipeline* InPipeline)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BMPS_CLS", "SetupForPipelineCS");

	Params::BMPS_CLS_SetupForPipelineCS Parms{};

	Parms.InPipeline = InPipeline;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function b1-Managed.BMPS_CLS.IgnoreTransientFiltersCS
// (Native, Event, Public, Protected, HasOutParams, BlueprintEvent, Const)
// Parameters:
// uint8                                   ReturnValue                                            (Parm, OutParm, ReturnParm, NoDestructor, HasGetValueTypeHash)

uint8 UBMPS_CLS::IgnoreTransientFiltersCS() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BMPS_CLS", "IgnoreTransientFiltersCS");

	Params::BMPS_CLS_IgnoreTransientFiltersCS Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function b1-Managed.BMPS_CLS.GetDisplayTextCS
// (Native, Event, Public, HasOutParams, BlueprintEvent, Const)
// Parameters:
// class FString                           ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash)

class FString UBMPS_CLS::GetDisplayTextCS() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BMPS_CLS", "GetDisplayTextCS");

	Params::BMPS_CLS_GetDisplayTextCS Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function b1-Managed.ProcessTimerFunctionFinder.OnCompletion
// (Native, Public, Private)

void UProcessTimerFunctionFinder::OnCompletion()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("ProcessTimerFunctionFinder", "OnCompletion");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function b1-Managed.ProcessTimerFunctionFinder.OnStep
// (Native, Public, Private)

void UProcessTimerFunctionFinder::OnStep()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("ProcessTimerFunctionFinder", "OnStep");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function b1-Managed.BANS_GSAttackIK.GSNotifyBeginCS
// (Native, Event, Public, Protected, BlueprintEvent, Const)
// Parameters:
// struct FUStGSNotifyParam                NotifyParam                                            (Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
// float                                   TotalDuration                                          (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UBANS_GSAttackIK::GSNotifyBeginCS(const struct FUStGSNotifyParam& NotifyParam, float TotalDuration) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BANS_GSAttackIK", "GSNotifyBeginCS");

	Params::BANS_GSAttackIK_GSNotifyBeginCS Parms{};

	Parms.NotifyParam = std::move(NotifyParam);
	Parms.TotalDuration = TotalDuration;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function b1-Managed.BANS_GSAttackIK.GSNotifyTickCS
// (Native, Event, Public, Protected, BlueprintEvent, Const)
// Parameters:
// struct FUStGSNotifyParam                NotifyParam                                            (Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
// float                                   FrameDeltaTime                                         (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UBANS_GSAttackIK::GSNotifyTickCS(const struct FUStGSNotifyParam& NotifyParam, float FrameDeltaTime) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BANS_GSAttackIK", "GSNotifyTickCS");

	Params::BANS_GSAttackIK_GSNotifyTickCS Parms{};

	Parms.NotifyParam = std::move(NotifyParam);
	Parms.FrameDeltaTime = FrameDeltaTime;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function b1-Managed.BANS_GSAttackIK.GSNotifyEndCS
// (Native, Event, Public, Protected, BlueprintEvent, Const)
// Parameters:
// struct FUStGSNotifyParam                NotifyParam                                            (Parm, ZeroConstructor, IsPlainOldData, NoDestructor)

void UBANS_GSAttackIK::GSNotifyEndCS(const struct FUStGSNotifyParam& NotifyParam) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BANS_GSAttackIK", "GSNotifyEndCS");

	Params::BANS_GSAttackIK_GSNotifyEndCS Parms{};

	Parms.NotifyParam = std::move(NotifyParam);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function b1-Managed.BMPS_Equip.SetupForPipelineCS
// (Native, Event, Public, Protected, BlueprintEvent)
// Parameters:
// class UMoviePipeline*                   InPipeline                                             (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UBMPS_Equip::SetupForPipelineCS(class UMoviePipeline* InPipeline)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BMPS_Equip", "SetupForPipelineCS");

	Params::BMPS_Equip_SetupForPipelineCS Parms{};

	Parms.InPipeline = InPipeline;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function b1-Managed.BMPS_Equip.GetDisplayTextCS
// (Native, Event, Public, HasOutParams, BlueprintEvent, Const)
// Parameters:
// class FString                           ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash)

class FString UBMPS_Equip::GetDisplayTextCS() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BMPS_Equip", "GetDisplayTextCS");

	Params::BMPS_Equip_GetDisplayTextCS Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function b1-Managed.BMPS_LevelStreaming.TeardownForPipelineCS
// (Native, Event, Public, Protected, BlueprintEvent)
// Parameters:
// class UMoviePipeline*                   InPipeline                                             (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UBMPS_LevelStreaming::TeardownForPipelineCS(class UMoviePipeline* InPipeline)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BMPS_LevelStreaming", "TeardownForPipelineCS");

	Params::BMPS_LevelStreaming_TeardownForPipelineCS Parms{};

	Parms.InPipeline = InPipeline;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function b1-Managed.BMPS_LevelStreaming.SetupForPipelineCS
// (Native, Event, Public, Protected, BlueprintEvent)
// Parameters:
// class UMoviePipeline*                   InPipeline                                             (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UBMPS_LevelStreaming::SetupForPipelineCS(class UMoviePipeline* InPipeline)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BMPS_LevelStreaming", "SetupForPipelineCS");

	Params::BMPS_LevelStreaming_SetupForPipelineCS Parms{};

	Parms.InPipeline = InPipeline;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function b1-Managed.BMPS_LevelStreaming.RefreshCurrentLevelNames
// (Native, Public)

void UBMPS_LevelStreaming::RefreshCurrentLevelNames()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BMPS_LevelStreaming", "RefreshCurrentLevelNames");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function b1-Managed.BMPS_LevelStreaming.GetDisplayTextCS
// (Native, Event, Public, HasOutParams, BlueprintEvent, Const)
// Parameters:
// class FString                           ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash)

class FString UBMPS_LevelStreaming::GetDisplayTextCS() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BMPS_LevelStreaming", "GetDisplayTextCS");

	Params::BMPS_LevelStreaming_GetDisplayTextCS Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function b1-Managed.UGSSuperArmorDescCustomizationHelper.FindDescIdByRowName
// (Native, Event, Public, HasOutParams, BlueprintEvent)
// Parameters:
// class FName                             RowName                                                (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// int32                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

int32 UUGSSuperArmorDescCustomizationHelper::FindDescIdByRowName(class FName RowName)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("UGSSuperArmorDescCustomizationHelper", "FindDescIdByRowName");

	Params::UGSSuperArmorDescCustomizationHelper_FindDescIdByRowName Parms{};

	Parms.RowName = RowName;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function b1-Managed.UGSSuperArmorDescCustomizationHelper.GetRowNameByDescId
// (Native, Event, Public, HasOutParams, BlueprintEvent)
// Parameters:
// int32                                   DescID                                                 (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// class FName                             RowName                                                (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// uint8                                   ReturnValue                                            (Parm, OutParm, ReturnParm, NoDestructor, HasGetValueTypeHash)

uint8 UUGSSuperArmorDescCustomizationHelper::GetRowNameByDescId(int32 DescID, class FName* RowName)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("UGSSuperArmorDescCustomizationHelper", "GetRowNameByDescId");

	Params::UGSSuperArmorDescCustomizationHelper_GetRowNameByDescId Parms{};

	Parms.DescID = DescID;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	if (RowName != nullptr)
		*RowName = Parms.RowName;

	return Parms.ReturnValue;
}


// Function b1-Managed.UGSSuperArmorDescCustomizationHelper.OnGetRowStrings
// (Native, Event, Public, HasOutParams, BlueprintEvent)
// Parameters:
// TArray<class FString>                   OutStrings                                             (Parm, OutParm)
// TArray<uint8>                           OutRestrictedItems                                     (Parm, OutParm)

void UUGSSuperArmorDescCustomizationHelper::OnGetRowStrings(TArray<class FString>* OutStrings, TArray<uint8>* OutRestrictedItems)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("UGSSuperArmorDescCustomizationHelper", "OnGetRowStrings");

	Params::UGSSuperArmorDescCustomizationHelper_OnGetRowStrings Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	if (OutStrings != nullptr)
		*OutStrings = std::move(Parms.OutStrings);

	if (OutRestrictedItems != nullptr)
		*OutRestrictedItems = std::move(Parms.OutRestrictedItems);
}


// Function b1-Managed.BMPS_PerformerConfig.AfterLevelSequenceActorInitializedCS
// (Native, Event, Public, Protected, BlueprintEvent)
// Parameters:
// class UMoviePipeline*                   InPipeline                                             (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UBMPS_PerformerConfig::AfterLevelSequenceActorInitializedCS(class UMoviePipeline* InPipeline)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BMPS_PerformerConfig", "AfterLevelSequenceActorInitializedCS");

	Params::BMPS_PerformerConfig_AfterLevelSequenceActorInitializedCS Parms{};

	Parms.InPipeline = InPipeline;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function b1-Managed.BMPS_PerformerConfig.GetDisplayTextCS
// (Native, Event, Public, HasOutParams, BlueprintEvent, Const)
// Parameters:
// class FString                           ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash)

class FString UBMPS_PerformerConfig::GetDisplayTextCS() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BMPS_PerformerConfig", "GetDisplayTextCS");

	Params::BMPS_PerformerConfig_GetDisplayTextCS Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function b1-Managed.BSNS_CricketWinFinish.OnNotifyBegin
// (Native, Event, Public, BlueprintEvent)
// Parameters:
// class UCalliopeLevelSequencePlayer*     InPlayer                                               (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// int32                                   InStatus                                               (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// uint8                                   bInBackwards                                           (Parm, NoDestructor, HasGetValueTypeHash)

void UBSNS_CricketWinFinish::OnNotifyBegin(class UCalliopeLevelSequencePlayer* InPlayer, int32 InStatus, uint8 bInBackwards)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BSNS_CricketWinFinish", "OnNotifyBegin");

	Params::BSNS_CricketWinFinish_OnNotifyBegin Parms{};

	Parms.InPlayer = InPlayer;
	Parms.InStatus = InStatus;
	Parms.bInBackwards = bInBackwards;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function b1-Managed.BSNS_CricketWinFinish.OnNotifyEnd
// (Native, Event, Public, BlueprintEvent)
// Parameters:
// class UCalliopeLevelSequencePlayer*     InPlayer                                               (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// int32                                   InStatus                                               (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// uint8                                   bInBackwards                                           (Parm, NoDestructor, HasGetValueTypeHash)

void UBSNS_CricketWinFinish::OnNotifyEnd(class UCalliopeLevelSequencePlayer* InPlayer, int32 InStatus, uint8 bInBackwards)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BSNS_CricketWinFinish", "OnNotifyEnd");

	Params::BSNS_CricketWinFinish_OnNotifyEnd Parms{};

	Parms.InPlayer = InPlayer;
	Parms.InStatus = InStatus;
	Parms.bInBackwards = bInBackwards;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function b1-Managed.BED_TaskNode_SubGraph.GetContextOutputsInCS
// (Native, Event, Public, HasOutParams, BlueprintEvent)
// Parameters:
// TArray<class FName>                     ReturnValue                                            (Parm, OutParm, ReturnParm)

TArray<class FName> UBED_TaskNode_SubGraph::GetContextOutputsInCS()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BED_TaskNode_SubGraph", "GetContextOutputsInCS");

	Params::BED_TaskNode_SubGraph_GetContextOutputsInCS Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function b1-Managed.BED_TaskNode_SubGraph.GetContextInputsInCS
// (Native, Event, Public, HasOutParams, BlueprintEvent)
// Parameters:
// TArray<class FName>                     ReturnValue                                            (Parm, OutParm, ReturnParm)

TArray<class FName> UBED_TaskNode_SubGraph::GetContextInputsInCS()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BED_TaskNode_SubGraph", "GetContextInputsInCS");

	Params::BED_TaskNode_SubGraph_GetContextInputsInCS Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function b1-Managed.BED_TaskNode_SubGraph.PostPropertyChanged
// (Native, Event, Public, BlueprintEvent)
// Parameters:
// class FString                           MemberName                                             (Parm, ZeroConstructor, HasGetValueTypeHash)
// class FString                           PropertyName                                           (Parm, ZeroConstructor, HasGetValueTypeHash)

void UBED_TaskNode_SubGraph::PostPropertyChanged(const class FString& MemberName, const class FString& PropertyName)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BED_TaskNode_SubGraph", "PostPropertyChanged");

	Params::BED_TaskNode_SubGraph_PostPropertyChanged Parms{};

	Parms.MemberName = std::move(MemberName);
	Parms.PropertyName = std::move(PropertyName);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function b1-Managed.BED_TaskNode_SubGraph.PrePropertyChanged
// (Native, Event, Public, BlueprintEvent)
// Parameters:
// class FString                           PropertyName                                           (Parm, ZeroConstructor, HasGetValueTypeHash)

void UBED_TaskNode_SubGraph::PrePropertyChanged(const class FString& PropertyName)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BED_TaskNode_SubGraph", "PrePropertyChanged");

	Params::BED_TaskNode_SubGraph_PrePropertyChanged Parms{};

	Parms.PropertyName = std::move(PropertyName);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function b1-Managed.BED_TaskNode_SubGraph.GetAssetToEditInCS
// (Native, Event, Public, HasOutParams, BlueprintEvent)
// Parameters:
// class UObject*                          ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

class UObject* UBED_TaskNode_SubGraph::GetAssetToEditInCS()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BED_TaskNode_SubGraph", "GetAssetToEditInCS");

	Params::BED_TaskNode_SubGraph_GetAssetToEditInCS Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function b1-Managed.BED_TaskNode_SubGraph.GetNodeDescriptionInCS
// (Native, Event, Public, HasOutParams, BlueprintEvent, Const)
// Parameters:
// class FString                           ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash)

class FString UBED_TaskNode_SubGraph::GetNodeDescriptionInCS() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BED_TaskNode_SubGraph", "GetNodeDescriptionInCS");

	Params::BED_TaskNode_SubGraph_GetNodeDescriptionInCS Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function b1-Managed.BSNS_GSDispInteract.OnNotifyBegin
// (Native, Event, Public, BlueprintEvent)
// Parameters:
// class UCalliopeLevelSequencePlayer*     InPlayer                                               (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// int32                                   InStatus                                               (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// uint8                                   bInBackwards                                           (Parm, NoDestructor, HasGetValueTypeHash)

void UBSNS_GSDispInteract::OnNotifyBegin(class UCalliopeLevelSequencePlayer* InPlayer, int32 InStatus, uint8 bInBackwards)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BSNS_GSDispInteract", "OnNotifyBegin");

	Params::BSNS_GSDispInteract_OnNotifyBegin Parms{};

	Parms.InPlayer = InPlayer;
	Parms.InStatus = InStatus;
	Parms.bInBackwards = bInBackwards;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function b1-Managed.BSNS_GSDispInteract.OnNotifyEnd
// (Native, Event, Public, BlueprintEvent)
// Parameters:
// class UCalliopeLevelSequencePlayer*     InPlayer                                               (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// int32                                   InStatus                                               (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// uint8                                   bInBackwards                                           (Parm, NoDestructor, HasGetValueTypeHash)

void UBSNS_GSDispInteract::OnNotifyEnd(class UCalliopeLevelSequencePlayer* InPlayer, int32 InStatus, uint8 bInBackwards)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BSNS_GSDispInteract", "OnNotifyEnd");

	Params::BSNS_GSDispInteract_OnNotifyEnd Parms{};

	Parms.InPlayer = InPlayer;
	Parms.InStatus = InStatus;
	Parms.bInBackwards = bInBackwards;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function b1-Managed.BSNS_SetSDFSolverCenter.OnNotifyBegin
// (Native, Event, Public, BlueprintEvent)
// Parameters:
// class UCalliopeLevelSequencePlayer*     InPlayer                                               (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// int32                                   InStatus                                               (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// uint8                                   bInBackwards                                           (Parm, NoDestructor, HasGetValueTypeHash)

void UBSNS_SetSDFSolverCenter::OnNotifyBegin(class UCalliopeLevelSequencePlayer* InPlayer, int32 InStatus, uint8 bInBackwards)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BSNS_SetSDFSolverCenter", "OnNotifyBegin");

	Params::BSNS_SetSDFSolverCenter_OnNotifyBegin Parms{};

	Parms.InPlayer = InPlayer;
	Parms.InStatus = InStatus;
	Parms.bInBackwards = bInBackwards;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function b1-Managed.BSNS_SetSDFSolverCenter.OnNotifyEnd
// (Native, Event, Public, BlueprintEvent)
// Parameters:
// class UCalliopeLevelSequencePlayer*     InPlayer                                               (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// int32                                   InStatus                                               (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// uint8                                   bInBackwards                                           (Parm, NoDestructor, HasGetValueTypeHash)

void UBSNS_SetSDFSolverCenter::OnNotifyEnd(class UCalliopeLevelSequencePlayer* InPlayer, int32 InStatus, uint8 bInBackwards)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BSNS_SetSDFSolverCenter", "OnNotifyEnd");

	Params::BSNS_SetSDFSolverCenter_OnNotifyEnd Parms{};

	Parms.InPlayer = InPlayer;
	Parms.InStatus = InStatus;
	Parms.bInBackwards = bInBackwards;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function b1-Managed.BED_Behavior_CheckCurrentCastSkillId.PostPropertyChanged
// (Native, Event, Public, BlueprintEvent)
// Parameters:
// class FString                           MemberName                                             (Parm, ZeroConstructor, HasGetValueTypeHash)
// class FString                           PropertyName                                           (Parm, ZeroConstructor, HasGetValueTypeHash)

void UBED_Behavior_CheckCurrentCastSkillId::PostPropertyChanged(const class FString& MemberName, const class FString& PropertyName)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BED_Behavior_CheckCurrentCastSkillId", "PostPropertyChanged");

	Params::BED_Behavior_CheckCurrentCastSkillId_PostPropertyChanged Parms{};

	Parms.MemberName = std::move(MemberName);
	Parms.PropertyName = std::move(PropertyName);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function b1-Managed.BSNS_StopAllAnimMontage.OnNotifyBegin
// (Native, Event, Public, BlueprintEvent)
// Parameters:
// class UCalliopeLevelSequencePlayer*     Player                                                 (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// int32                                   InStatus                                               (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// uint8                                   bInBackwards                                           (Parm, NoDestructor, HasGetValueTypeHash)

void UBSNS_StopAllAnimMontage::OnNotifyBegin(class UCalliopeLevelSequencePlayer* Player, int32 InStatus, uint8 bInBackwards)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BSNS_StopAllAnimMontage", "OnNotifyBegin");

	Params::BSNS_StopAllAnimMontage_OnNotifyBegin Parms{};

	Parms.Player = Player;
	Parms.InStatus = InStatus;
	Parms.bInBackwards = bInBackwards;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function b1-Managed.BSN_ForceTrigger.OnNotify
// (Native, Event, Public, BlueprintEvent)
// Parameters:
// class UCalliopeLevelSequencePlayer*     InPlayer                                               (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// int32                                   InStatus                                               (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// uint8                                   bInBackwards                                           (Parm, NoDestructor, HasGetValueTypeHash)

void UBSN_ForceTrigger::OnNotify(class UCalliopeLevelSequencePlayer* InPlayer, int32 InStatus, uint8 bInBackwards)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BSN_ForceTrigger", "OnNotify");

	Params::BSN_ForceTrigger_OnNotify Parms{};

	Parms.InPlayer = InPlayer;
	Parms.InStatus = InStatus;
	Parms.bInBackwards = bInBackwards;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function b1-Managed.BANS_GSSetBattleMainCon.GSNotifyBeginCS
// (Native, Event, Public, Protected, BlueprintEvent, Const)
// Parameters:
// struct FUStGSNotifyParam                NotifyParam                                            (Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
// float                                   TotalDuration                                          (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UBANS_GSSetBattleMainCon::GSNotifyBeginCS(const struct FUStGSNotifyParam& NotifyParam, float TotalDuration) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BANS_GSSetBattleMainCon", "GSNotifyBeginCS");

	Params::BANS_GSSetBattleMainCon_GSNotifyBeginCS Parms{};

	Parms.NotifyParam = std::move(NotifyParam);
	Parms.TotalDuration = TotalDuration;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function b1-Managed.OverlapBoxFunctionBinder.OnActorLeave
// (Native, Public, Private)
// Parameters:
// class AActor*                           OverlappedActor                                        (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// class AActor*                           OtherActor                                             (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UOverlapBoxFunctionBinder::OnActorLeave(class AActor* OverlappedActor, class AActor* OtherActor)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("OverlapBoxFunctionBinder", "OnActorLeave");

	Params::OverlapBoxFunctionBinder_OnActorLeave Parms{};

	Parms.OverlappedActor = OverlappedActor;
	Parms.OtherActor = OtherActor;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function b1-Managed.OverlapBoxFunctionBinder.OnActorEnter
// (Native, Public, Private)
// Parameters:
// class AActor*                           OverlappedActor                                        (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// class AActor*                           OtherActor                                             (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UOverlapBoxFunctionBinder::OnActorEnter(class AActor* OverlappedActor, class AActor* OtherActor)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("OverlapBoxFunctionBinder", "OnActorEnter");

	Params::OverlapBoxFunctionBinder_OnActorEnter Parms{};

	Parms.OverlappedActor = OverlappedActor;
	Parms.OtherActor = OtherActor;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function b1-Managed.BGUPhysicalAnimTail.ReceiveBeginPlay
// (Native, Event, Public, BlueprintEvent)

void UBGUPhysicalAnimTail::ReceiveBeginPlay()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BGUPhysicalAnimTail", "ReceiveBeginPlay");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function b1-Managed.BGUPhysicalAnimTail.InitializePhysicalAnimation
// (Native, Public, BlueprintCallable)

void UBGUPhysicalAnimTail::InitializePhysicalAnimation()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BGUPhysicalAnimTail", "InitializePhysicalAnimation");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function b1-Managed.BANS_GSSetDmgNumCanEnable.GSNotifyBeginCS
// (Native, Event, Public, Protected, BlueprintEvent, Const)
// Parameters:
// struct FUStGSNotifyParam                NotifyParam                                            (Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
// float                                   TotalDuration                                          (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UBANS_GSSetDmgNumCanEnable::GSNotifyBeginCS(const struct FUStGSNotifyParam& NotifyParam, float TotalDuration) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BANS_GSSetDmgNumCanEnable", "GSNotifyBeginCS");

	Params::BANS_GSSetDmgNumCanEnable_GSNotifyBeginCS Parms{};

	Parms.NotifyParam = std::move(NotifyParam);
	Parms.TotalDuration = TotalDuration;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function b1-Managed.BAN_GSFallDyingCheck.bIsNativeBranchingPointCS
// (Native, Event, Public, HasOutParams, BlueprintEvent, Const)
// Parameters:
// uint8                                   ReturnValue                                            (Parm, OutParm, ReturnParm, NoDestructor, HasGetValueTypeHash)

uint8 UBAN_GSFallDyingCheck::bIsNativeBranchingPointCS() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BAN_GSFallDyingCheck", "bIsNativeBranchingPointCS");

	Params::BAN_GSFallDyingCheck_bIsNativeBranchingPointCS Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function b1-Managed.BAN_GSFallDyingCheck.GSNotifyCS
// (Native, Event, Public, Protected, BlueprintEvent, Const)
// Parameters:
// struct FUStGSNotifyParam                NotifyParam                                            (Parm, ZeroConstructor, IsPlainOldData, NoDestructor)

void UBAN_GSFallDyingCheck::GSNotifyCS(const struct FUStGSNotifyParam& NotifyParam) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BAN_GSFallDyingCheck", "GSNotifyCS");

	Params::BAN_GSFallDyingCheck_GSNotifyCS Parms{};

	Parms.NotifyParam = std::move(NotifyParam);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function b1-Managed.BAN_GSMagicallyChange.bIsNativeBranchingPointCS
// (Native, Event, Public, HasOutParams, BlueprintEvent, Const)
// Parameters:
// uint8                                   ReturnValue                                            (Parm, OutParm, ReturnParm, NoDestructor, HasGetValueTypeHash)

uint8 UBAN_GSMagicallyChange::bIsNativeBranchingPointCS() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BAN_GSMagicallyChange", "bIsNativeBranchingPointCS");

	Params::BAN_GSMagicallyChange_bIsNativeBranchingPointCS Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function b1-Managed.BAN_GSMagicallyChange.GSNotifyCS
// (Native, Event, Public, Protected, BlueprintEvent, Const)
// Parameters:
// struct FUStGSNotifyParam                NotifyParam                                            (Parm, ZeroConstructor, IsPlainOldData, NoDestructor)

void UBAN_GSMagicallyChange::GSNotifyCS(const struct FUStGSNotifyParam& NotifyParam) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BAN_GSMagicallyChange", "GSNotifyCS");

	Params::BAN_GSMagicallyChange_GSNotifyCS Parms{};

	Parms.NotifyParam = std::move(NotifyParam);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function b1-Managed.BAN_GSMagicallyChangeRecover.bIsNativeBranchingPointCS
// (Native, Event, Public, HasOutParams, BlueprintEvent, Const)
// Parameters:
// uint8                                   ReturnValue                                            (Parm, OutParm, ReturnParm, NoDestructor, HasGetValueTypeHash)

uint8 UBAN_GSMagicallyChangeRecover::bIsNativeBranchingPointCS() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BAN_GSMagicallyChangeRecover", "bIsNativeBranchingPointCS");

	Params::BAN_GSMagicallyChangeRecover_bIsNativeBranchingPointCS Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function b1-Managed.BAN_GSMagicallyChangeRecover.GSNotifyCS
// (Native, Event, Public, Protected, BlueprintEvent, Const)
// Parameters:
// struct FUStGSNotifyParam                NotifyParam                                            (Parm, ZeroConstructor, IsPlainOldData, NoDestructor)

void UBAN_GSMagicallyChangeRecover::GSNotifyCS(const struct FUStGSNotifyParam& NotifyParam) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BAN_GSMagicallyChangeRecover", "GSNotifyCS");

	Params::BAN_GSMagicallyChangeRecover_GSNotifyCS Parms{};

	Parms.NotifyParam = std::move(NotifyParam);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function b1-Managed.BAN_GSTriggerSplineMoveDBC.GSNotifyCS
// (Native, Event, Public, Protected, BlueprintEvent, Const)
// Parameters:
// struct FUStGSNotifyParam                NotifyParam                                            (Parm, ZeroConstructor, IsPlainOldData, NoDestructor)

void UBAN_GSTriggerSplineMoveDBC::GSNotifyCS(const struct FUStGSNotifyParam& NotifyParam) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BAN_GSTriggerSplineMoveDBC", "GSNotifyCS");

	Params::BAN_GSTriggerSplineMoveDBC_GSNotifyCS Parms{};

	Parms.NotifyParam = std::move(NotifyParam);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function b1-Managed.BAN_GSPlayMappedSoundFX.GSNotifyCS
// (Native, Event, Public, Protected, BlueprintEvent, Const)
// Parameters:
// struct FUStGSNotifyParam                NotifyParam                                            (Parm, ZeroConstructor, IsPlainOldData, NoDestructor)

void UBAN_GSPlayMappedSoundFX::GSNotifyCS(const struct FUStGSNotifyParam& NotifyParam) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BAN_GSPlayMappedSoundFX", "GSNotifyCS");

	Params::BAN_GSPlayMappedSoundFX_GSNotifyCS Parms{};

	Parms.NotifyParam = std::move(NotifyParam);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function b1-Managed.BUAnimWheel.BlueprintUpdateAnimation
// (Native, Event, Public, BlueprintEvent)
// Parameters:
// float                                   DeltaTimeX                                             (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UBUAnimWheel::BlueprintUpdateAnimation(float DeltaTimeX)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BUAnimWheel", "BlueprintUpdateAnimation");

	Params::BUAnimWheel_BlueprintUpdateAnimation Parms{};

	Parms.DeltaTimeX = DeltaTimeX;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function b1-Managed.BAN_ShowCommTips.GSNotifyCS
// (Native, Event, Public, Protected, BlueprintEvent, Const)
// Parameters:
// struct FUStGSNotifyParam                NotifyParam                                            (Parm, ZeroConstructor, IsPlainOldData, NoDestructor)

void UBAN_ShowCommTips::GSNotifyCS(const struct FUStGSNotifyParam& NotifyParam) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BAN_ShowCommTips", "GSNotifyCS");

	Params::BAN_ShowCommTips_GSNotifyCS Parms{};

	Parms.NotifyParam = std::move(NotifyParam);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function b1-Managed.BGS_GSEventCollection.Evt_BGS_OnlineChallengeStateTrigger_Multicast_Invoke
// (Net, NetReliable, Native, Event, NetMulticast, Public)
// Parameters:
// int32                                   P1                                                     (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// int32                                   P2                                                     (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UBGS_GSEventCollection::Evt_BGS_OnlineChallengeStateTrigger_Multicast_Invoke(int32 P1, int32 P2)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BGS_GSEventCollection", "Evt_BGS_OnlineChallengeStateTrigger_Multicast_Invoke");

	Params::BGS_GSEventCollection_Evt_BGS_OnlineChallengeStateTrigger_Multicast_Invoke Parms{};

	Parms.P1 = P1;
	Parms.P2 = P2;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function b1-Managed.BGS_GSEventCollection.Evt_BGS_NotifyCopyHatredInfo_Multicast_Invoke
// (Net, Native, Event, NetMulticast, Public)
// Parameters:
// class AActor*                           OriginActor                                            (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// class AActor*                           CopyActor                                              (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// uint8                                   bRemoveOriginHatredInfo                                (Parm, NoDestructor, HasGetValueTypeHash)

void UBGS_GSEventCollection::Evt_BGS_NotifyCopyHatredInfo_Multicast_Invoke(class AActor* OriginActor, class AActor* CopyActor, uint8 bRemoveOriginHatredInfo)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BGS_GSEventCollection", "Evt_BGS_NotifyCopyHatredInfo_Multicast_Invoke");

	Params::BGS_GSEventCollection_Evt_BGS_NotifyCopyHatredInfo_Multicast_Invoke Parms{};

	Parms.OriginActor = OriginActor;
	Parms.CopyActor = CopyActor;
	Parms.bRemoveOriginHatredInfo = bRemoveOriginHatredInfo;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function b1-Managed.BGS_GSEventCollection.Evt_BGS_SwitchTickRateLogic_Multicast_Invoke
// (Net, Native, Event, NetMulticast, Public)
// Parameters:
// int32                                   P1                                                     (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UBGS_GSEventCollection::Evt_BGS_SwitchTickRateLogic_Multicast_Invoke(int32 P1)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BGS_GSEventCollection", "Evt_BGS_SwitchTickRateLogic_Multicast_Invoke");

	Params::BGS_GSEventCollection_Evt_BGS_SwitchTickRateLogic_Multicast_Invoke Parms{};

	Parms.P1 = P1;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function b1-Managed.BGS_GSEventCollection.Evt_BGS_SendOnlineScreenMsg_Multicast_Invoke
// (Net, Native, Event, NetMulticast, Public)
// Parameters:
// EScreenMsgType                          ScreenMsgType                                          (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// class FString                           Msg                                                    (Parm, ZeroConstructor, HasGetValueTypeHash)
// int32                                   TipsDuration                                           (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UBGS_GSEventCollection::Evt_BGS_SendOnlineScreenMsg_Multicast_Invoke(EScreenMsgType ScreenMsgType, const class FString& Msg, int32 TipsDuration)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BGS_GSEventCollection", "Evt_BGS_SendOnlineScreenMsg_Multicast_Invoke");

	Params::BGS_GSEventCollection_Evt_BGS_SendOnlineScreenMsg_Multicast_Invoke Parms{};

	Parms.ScreenMsgType = ScreenMsgType;
	Parms.Msg = std::move(Msg);
	Parms.TipsDuration = TipsDuration;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function b1-Managed.BGS_GSEventCollection.Evt_BGS_NotifySwitchTarget_Multicast_Invoke
// (Net, Native, Event, NetMulticast, Public)
// Parameters:
// class AActor*                           OldTarget                                              (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// class AActor*                           NewTarget                                              (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// uint8                                   TriggerTaunt                                           (Parm, NoDestructor, HasGetValueTypeHash)
// ETargetSourceType                       TargetSourceType                                       (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UBGS_GSEventCollection::Evt_BGS_NotifySwitchTarget_Multicast_Invoke(class AActor* OldTarget, class AActor* NewTarget, uint8 TriggerTaunt, ETargetSourceType TargetSourceType)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BGS_GSEventCollection", "Evt_BGS_NotifySwitchTarget_Multicast_Invoke");

	Params::BGS_GSEventCollection_Evt_BGS_NotifySwitchTarget_Multicast_Invoke Parms{};

	Parms.OldTarget = OldTarget;
	Parms.NewTarget = NewTarget;
	Parms.TriggerTaunt = TriggerTaunt;
	Parms.TargetSourceType = TargetSourceType;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function b1-Managed.BGS_GSEventCollection.Evt_BGS_OnPlayerPostLogin_Multicast_Invoke
// (Net, NetReliable, Native, Event, NetMulticast, Public)
// Parameters:
// class APlayerController*                NewPlayer                                              (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UBGS_GSEventCollection::Evt_BGS_OnPlayerPostLogin_Multicast_Invoke(class APlayerController* NewPlayer)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BGS_GSEventCollection", "Evt_BGS_OnPlayerPostLogin_Multicast_Invoke");

	Params::BGS_GSEventCollection_Evt_BGS_OnPlayerPostLogin_Multicast_Invoke Parms{};

	Parms.NewPlayer = NewPlayer;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function b1-Managed.BGS_GSEventCollection.Evt_BGS_OnUnitTransited_Multicast_Invoke
// (Net, NetReliable, Native, Event, NetMulticast, Public)
// Parameters:
// class AActor*                           OldUnit                                                (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// class AActor*                           NewlySpawnedUnit                                       (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UBGS_GSEventCollection::Evt_BGS_OnUnitTransited_Multicast_Invoke(class AActor* OldUnit, class AActor* NewlySpawnedUnit)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BGS_GSEventCollection", "Evt_BGS_OnUnitTransited_Multicast_Invoke");

	Params::BGS_GSEventCollection_Evt_BGS_OnUnitTransited_Multicast_Invoke Parms{};

	Parms.OldUnit = OldUnit;
	Parms.NewlySpawnedUnit = NewlySpawnedUnit;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function b1-Managed.BGS_GSEventCollection.Evt_BGS_OnPlayerLogOut_Multicast_Invoke
// (Net, NetReliable, Native, Event, NetMulticast, Public)
// Parameters:
// class AController*                      Exitting                                               (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UBGS_GSEventCollection::Evt_BGS_OnPlayerLogOut_Multicast_Invoke(class AController* Exitting)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BGS_GSEventCollection", "Evt_BGS_OnPlayerLogOut_Multicast_Invoke");

	Params::BGS_GSEventCollection_Evt_BGS_OnPlayerLogOut_Multicast_Invoke Parms{};

	Parms.Exitting = Exitting;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function b1-Managed.BGS_GSEventCollection.Evt_BGS_ItemFullOnline_Multicast_Invoke
// (Net, Native, Event, NetMulticast, Public)
// Parameters:
// int32                                   P1                                                     (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UBGS_GSEventCollection::Evt_BGS_ItemFullOnline_Multicast_Invoke(int32 P1)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BGS_GSEventCollection", "Evt_BGS_ItemFullOnline_Multicast_Invoke");

	Params::BGS_GSEventCollection_Evt_BGS_ItemFullOnline_Multicast_Invoke Parms{};

	Parms.P1 = P1;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function b1-Managed.BGS_GSEventCollection.Evt_OnlineDebugInfoEnd_Multicast_Invoke
// (Net, Native, Event, NetMulticast, Public)

void UBGS_GSEventCollection::Evt_OnlineDebugInfoEnd_Multicast_Invoke()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BGS_GSEventCollection", "Evt_OnlineDebugInfoEnd_Multicast_Invoke");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function b1-Managed.BGS_GSEventCollection.Evt_BGS_TestGameState_Multicast_Invoke
// (Net, Native, Event, NetMulticast, Public)
// Parameters:
// int32                                   P1                                                     (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UBGS_GSEventCollection::Evt_BGS_TestGameState_Multicast_Invoke(int32 P1)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BGS_GSEventCollection", "Evt_BGS_TestGameState_Multicast_Invoke");

	Params::BGS_GSEventCollection_Evt_BGS_TestGameState_Multicast_Invoke Parms{};

	Parms.P1 = P1;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function b1-Managed.BGS_GSEventCollection.Evt_BGS_PlayerLogOut_Multicast_Invoke
// (Net, NetReliable, Native, Event, NetMulticast, Public)
// Parameters:
// class APlayerState*                     PlayerState                                            (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UBGS_GSEventCollection::Evt_BGS_PlayerLogOut_Multicast_Invoke(class APlayerState* PlayerState)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BGS_GSEventCollection", "Evt_BGS_PlayerLogOut_Multicast_Invoke");

	Params::BGS_GSEventCollection_Evt_BGS_PlayerLogOut_Multicast_Invoke Parms{};

	Parms.PlayerState = PlayerState;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function b1-Managed.BGS_GSEventCollection.Evt_BGS_PlayerJoin_Multicast_Invoke
// (Net, NetReliable, Native, Event, NetMulticast, Public)
// Parameters:
// class APlayerState*                     PlayerState                                            (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UBGS_GSEventCollection::Evt_BGS_PlayerJoin_Multicast_Invoke(class APlayerState* PlayerState)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BGS_GSEventCollection", "Evt_BGS_PlayerJoin_Multicast_Invoke");

	Params::BGS_GSEventCollection_Evt_BGS_PlayerJoin_Multicast_Invoke Parms{};

	Parms.PlayerState = PlayerState;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function b1-Managed.BGS_GSEventCollection.Evt_CrusadeSuccess_Multicast_Invoke
// (Net, Native, Event, NetMulticast, Public)

void UBGS_GSEventCollection::Evt_CrusadeSuccess_Multicast_Invoke()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BGS_GSEventCollection", "Evt_CrusadeSuccess_Multicast_Invoke");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function b1-Managed.BGS_GSEventCollection.Evt_PostMulticastAkEventMultiCast
// (Net, Native, Event, NetMulticast, Public)
// Parameters:
// class UAkAudioEvent*                    AkEvent                                                (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UBGS_GSEventCollection::Evt_PostMulticastAkEventMultiCast(class UAkAudioEvent* AkEvent)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BGS_GSEventCollection", "Evt_PostMulticastAkEventMultiCast");

	Params::BGS_GSEventCollection_Evt_PostMulticastAkEventMultiCast Parms{};

	Parms.AkEvent = AkEvent;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function b1-Managed.BGS_GSEventCollection.Evt_BGS_UnitDead_Multicast_Invoke
// (Net, NetReliable, Native, Event, NetMulticast, Public)
// Parameters:
// class FString                           UnitGuid                                               (Parm, ZeroConstructor, HasGetValueTypeHash)
// EDeadReason                             DeadReason                                             (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UBGS_GSEventCollection::Evt_BGS_UnitDead_Multicast_Invoke(const class FString& UnitGuid, EDeadReason DeadReason)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BGS_GSEventCollection", "Evt_BGS_UnitDead_Multicast_Invoke");

	Params::BGS_GSEventCollection_Evt_BGS_UnitDead_Multicast_Invoke Parms{};

	Parms.UnitGuid = std::move(UnitGuid);
	Parms.DeadReason = DeadReason;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function b1-Managed.BGS_GSEventCollection.Evt_BGS_TriggerShortcutMultiCast
// (Net, Native, Event, NetMulticast, Public)
// Parameters:
// uint8                                   b1                                                     (Parm, NoDestructor, HasGetValueTypeHash)
// int32                                   P2                                                     (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UBGS_GSEventCollection::Evt_BGS_TriggerShortcutMultiCast(uint8 b1, int32 P2)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BGS_GSEventCollection", "Evt_BGS_TriggerShortcutMultiCast");

	Params::BGS_GSEventCollection_Evt_BGS_TriggerShortcutMultiCast Parms{};

	Parms.b1 = b1;
	Parms.P2 = P2;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function b1-Managed.BGS_GSEventCollection.Evt_TeamWipeOut_Multicast_Invoke
// (Net, Native, Event, NetMulticast, Public)

void UBGS_GSEventCollection::Evt_TeamWipeOut_Multicast_Invoke()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BGS_GSEventCollection", "Evt_TeamWipeOut_Multicast_Invoke");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function b1-Managed.BGS_GSEventCollection.Evt_PostMulticastAkEventServer
// (Net, Native, Event, Public, NetServer)
// Parameters:
// class UAkAudioEvent*                    AkEvent                                                (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UBGS_GSEventCollection::Evt_PostMulticastAkEventServer(class UAkAudioEvent* AkEvent)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BGS_GSEventCollection", "Evt_PostMulticastAkEventServer");

	Params::BGS_GSEventCollection_Evt_PostMulticastAkEventServer Parms{};

	Parms.AkEvent = AkEvent;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function b1-Managed.BGS_GSEventCollection.Evt_BGS_TriggerShortcutServer
// (Net, Native, Event, Public, NetServer)
// Parameters:
// uint8                                   b1                                                     (Parm, NoDestructor, HasGetValueTypeHash)
// int32                                   P2                                                     (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UBGS_GSEventCollection::Evt_BGS_TriggerShortcutServer(uint8 b1, int32 P2)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BGS_GSEventCollection", "Evt_BGS_TriggerShortcutServer");

	Params::BGS_GSEventCollection_Evt_BGS_TriggerShortcutServer Parms{};

	Parms.b1 = b1;
	Parms.P2 = P2;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function b1-Managed.BGS_GSEventCollection.BeginPlayInCS
// (Native, Event, Public, BlueprintEvent)

void UBGS_GSEventCollection::BeginPlayInCS()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BGS_GSEventCollection", "BeginPlayInCS");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function b1-Managed.BGS_GSEventCollection.EndPlayInCS
// (Native, Event, Public, BlueprintEvent)
// Parameters:
// EEndPlayReason                          EndPlayReason                                          (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UBGS_GSEventCollection::EndPlayInCS(EEndPlayReason EndPlayReason)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BGS_GSEventCollection", "EndPlayInCS");

	Params::BGS_GSEventCollection_EndPlayInCS Parms{};

	Parms.EndPlayReason = EndPlayReason;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function b1-Managed.BPS_GSEventCollection.Evt_BPS_ServerNotifyClientAuthorityTamerDead_Invoke
// (Net, NetReliable, Native, Event, Public, NetServer)
// Parameters:
// TArray<class FString>                   Guids                                                  (Parm)

void UBPS_GSEventCollection::Evt_BPS_ServerNotifyClientAuthorityTamerDead_Invoke(const TArray<class FString>& Guids)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BPS_GSEventCollection", "Evt_BPS_ServerNotifyClientAuthorityTamerDead_Invoke");

	Params::BPS_GSEventCollection_Evt_BPS_ServerNotifyClientAuthorityTamerDead_Invoke Parms{};

	Parms.Guids = std::move(Guids);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function b1-Managed.BPS_GSEventCollection.Evt_BPS_ServerNotifyClientTamerBackToLoad_Invoke
// (Net, NetReliable, Native, Event, Public, NetServer)
// Parameters:
// TArray<class FString>                   Guids                                                  (Parm)

void UBPS_GSEventCollection::Evt_BPS_ServerNotifyClientTamerBackToLoad_Invoke(const TArray<class FString>& Guids)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BPS_GSEventCollection", "Evt_BPS_ServerNotifyClientTamerBackToLoad_Invoke");

	Params::BPS_GSEventCollection_Evt_BPS_ServerNotifyClientTamerBackToLoad_Invoke Parms{};

	Parms.Guids = std::move(Guids);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function b1-Managed.BPS_GSEventCollection.Evt_BPS_SwitchPlayerTransState_Multicast_Invoke
// (Net, NetReliable, Native, Event, NetMulticast, Public)
// Parameters:
// class AActor*                           OldActor                                               (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// int32                                   NewActorResId                                          (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UBPS_GSEventCollection::Evt_BPS_SwitchPlayerTransState_Multicast_Invoke(class AActor* OldActor, int32 NewActorResId)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BPS_GSEventCollection", "Evt_BPS_SwitchPlayerTransState_Multicast_Invoke");

	Params::BPS_GSEventCollection_Evt_BPS_SwitchPlayerTransState_Multicast_Invoke Parms{};

	Parms.OldActor = OldActor;
	Parms.NewActorResId = NewActorResId;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function b1-Managed.BPS_GSEventCollection.Evt_BPS_ClientInitCharacterNetRole_Invoke
// (Net, NetReliable, Native, Event, Public, NetClient)
// Parameters:
// TArray<struct FTamerRoleSync>           Guids                                                  (Parm)

void UBPS_GSEventCollection::Evt_BPS_ClientInitCharacterNetRole_Invoke(const TArray<struct FTamerRoleSync>& Guids)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BPS_GSEventCollection", "Evt_BPS_ClientInitCharacterNetRole_Invoke");

	Params::BPS_GSEventCollection_Evt_BPS_ClientInitCharacterNetRole_Invoke Parms{};

	Parms.Guids = std::move(Guids);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function b1-Managed.BPS_GSEventCollection.Evt_BPS_TestPlayerState_Multicast_Invoke
// (Net, Native, Event, NetMulticast, Public)
// Parameters:
// int32                                   P1                                                     (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UBPS_GSEventCollection::Evt_BPS_TestPlayerState_Multicast_Invoke(int32 P1)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BPS_GSEventCollection", "Evt_BPS_TestPlayerState_Multicast_Invoke");

	Params::BPS_GSEventCollection_Evt_BPS_TestPlayerState_Multicast_Invoke Parms{};

	Parms.P1 = P1;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function b1-Managed.BPS_GSEventCollection.Evt_BPS_ServerSpawnDynamicTamer_Invoke
// (Net, NetReliable, Native, Event, Public, NetServer)
// Parameters:
// struct FDynamicTamerSpawnReq            TamerClass                                             (Parm, HasGetValueTypeHash)

void UBPS_GSEventCollection::Evt_BPS_ServerSpawnDynamicTamer_Invoke(const struct FDynamicTamerSpawnReq& TamerClass)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BPS_GSEventCollection", "Evt_BPS_ServerSpawnDynamicTamer_Invoke");

	Params::BPS_GSEventCollection_Evt_BPS_ServerSpawnDynamicTamer_Invoke Parms{};

	Parms.TamerClass = std::move(TamerClass);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function b1-Managed.BPS_GSEventCollection.Evt_CloseConnectionWithResult_Invoke
// (Net, NetReliable, Native, Event, Public, NetClient)
// Parameters:
// EGSNetCloseResult                       CloseResult                                            (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UBPS_GSEventCollection::Evt_CloseConnectionWithResult_Invoke(EGSNetCloseResult CloseResult)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BPS_GSEventCollection", "Evt_CloseConnectionWithResult_Invoke");

	Params::BPS_GSEventCollection_Evt_CloseConnectionWithResult_Invoke Parms{};

	Parms.CloseResult = CloseResult;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function b1-Managed.BPS_GSEventCollection.Evt_SendServantReq_Multicast_Invoke
// (Net, NetReliable, Native, Event, NetMulticast, Public)
// Parameters:
// struct FServantReq                      InServantReq                                           (Parm, HasGetValueTypeHash)

void UBPS_GSEventCollection::Evt_SendServantReq_Multicast_Invoke(const struct FServantReq& InServantReq)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BPS_GSEventCollection", "Evt_SendServantReq_Multicast_Invoke");

	Params::BPS_GSEventCollection_Evt_SendServantReq_Multicast_Invoke Parms{};

	Parms.InServantReq = std::move(InServantReq);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function b1-Managed.BPS_GSEventCollection.Evt_BPS_ServerActivateTamer_Invoke
// (Net, NetReliable, Native, Event, Public, NetServer)
// Parameters:
// TArray<class FString>                   Guids                                                  (Parm)

void UBPS_GSEventCollection::Evt_BPS_ServerActivateTamer_Invoke(const TArray<class FString>& Guids)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BPS_GSEventCollection", "Evt_BPS_ServerActivateTamer_Invoke");

	Params::BPS_GSEventCollection_Evt_BPS_ServerActivateTamer_Invoke Parms{};

	Parms.Guids = std::move(Guids);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function b1-Managed.BPS_GSEventCollection.Evt_TmpTransSendDropItem_Invoke
// (Net, NetReliable, Native, Event, Public, NetServer)
// Parameters:
// int32                                   P1                                                     (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UBPS_GSEventCollection::Evt_TmpTransSendDropItem_Invoke(int32 P1)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BPS_GSEventCollection", "Evt_TmpTransSendDropItem_Invoke");

	Params::BPS_GSEventCollection_Evt_TmpTransSendDropItem_Invoke Parms{};

	Parms.P1 = P1;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function b1-Managed.BPS_GSEventCollection.Evt_BPS_SyncRoleDataTmp_Invoke
// (Net, NetReliable, Native, Event, Public, NetServer)
// Parameters:
// TArray<uint8>                           RoleData                                               (Parm)

void UBPS_GSEventCollection::Evt_BPS_SyncRoleDataTmp_Invoke(const TArray<uint8>& RoleData)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BPS_GSEventCollection", "Evt_BPS_SyncRoleDataTmp_Invoke");

	Params::BPS_GSEventCollection_Evt_BPS_SyncRoleDataTmp_Invoke Parms{};

	Parms.RoleData = std::move(RoleData);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function b1-Managed.BPS_GSEventCollection.BeginPlayInCS
// (Native, Event, Public, BlueprintEvent)

void UBPS_GSEventCollection::BeginPlayInCS()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BPS_GSEventCollection", "BeginPlayInCS");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function b1-Managed.BPS_GSEventCollection.EndPlayInCS
// (Native, Event, Public, BlueprintEvent)
// Parameters:
// EEndPlayReason                          EndPlayReason                                          (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UBPS_GSEventCollection::EndPlayInCS(EEndPlayReason EndPlayReason)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BPS_GSEventCollection", "EndPlayInCS");

	Params::BPS_GSEventCollection_EndPlayInCS Parms{};

	Parms.EndPlayReason = EndPlayReason;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function b1-Managed.BPS_GSEventCollection.Evt_RequestSummon_Invoke
// (Net, NetReliable, Native, Event, Public, NetServer)
// Parameters:
// struct FSummonReq                       InSummonReq                                            (Parm, HasGetValueTypeHash)

void UBPS_GSEventCollection::Evt_RequestSummon_Invoke(const struct FSummonReq& InSummonReq)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BPS_GSEventCollection", "Evt_RequestSummon_Invoke");

	Params::BPS_GSEventCollection_Evt_RequestSummon_Invoke Parms{};

	Parms.InSummonReq = std::move(InSummonReq);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function b1-Managed.BUS_SkillSequenceComp.OnFinished
// (Native, Public, Private)

void UBUS_SkillSequenceComp::OnFinished()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BUS_SkillSequenceComp", "OnFinished");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function b1-Managed.BGUFuncLibSkillCS.BGUCalcSkillMontageScaleRate
// (Native, Static, Public, HasOutParams, BlueprintCallable)
// Parameters:
// class ACharacter*                       Unit                                                   (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// struct FVector                          TargetPos                                              (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// float                                   NotifyBeginTime                                        (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// float                                   NotifyEndTime                                          (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// float                                   AMScaleMinRate                                         (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// float                                   AMScaleMaxRate                                         (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// float                                   AMScaleMoveOffset                                      (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// float                                   AMScaleMoveOffsetZ                                     (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// uint8                                   EnableDebug                                            (Parm, NoDestructor, HasGetValueTypeHash)
// struct FVector                          ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

struct FVector UBGUFuncLibSkillCS::BGUCalcSkillMontageScaleRate(class ACharacter* Unit, const struct FVector& TargetPos, float NotifyBeginTime, float NotifyEndTime, float AMScaleMinRate, float AMScaleMaxRate, float AMScaleMoveOffset, float AMScaleMoveOffsetZ, uint8 EnableDebug)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("BGUFuncLibSkillCS", "BGUCalcSkillMontageScaleRate");

	Params::BGUFuncLibSkillCS_BGUCalcSkillMontageScaleRate Parms{};

	Parms.Unit = Unit;
	Parms.TargetPos = std::move(TargetPos);
	Parms.NotifyBeginTime = NotifyBeginTime;
	Parms.NotifyEndTime = NotifyEndTime;
	Parms.AMScaleMinRate = AMScaleMinRate;
	Parms.AMScaleMaxRate = AMScaleMaxRate;
	Parms.AMScaleMoveOffset = AMScaleMoveOffset;
	Parms.AMScaleMoveOffsetZ = AMScaleMoveOffsetZ;
	Parms.EnableDebug = EnableDebug;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function b1-Managed.BGUFuncLibSkillCS.BGUGetLastSkillCastTime
// (Native, Static, Public, HasOutParams, BlueprintCallable, BlueprintPure)
// Parameters:
// class AActor*                           Unit                                                   (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// int32                                   SkillID                                                (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// float                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

float UBGUFuncLibSkillCS::BGUGetLastSkillCastTime(class AActor* Unit, int32 SkillID)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("BGUFuncLibSkillCS", "BGUGetLastSkillCastTime");

	Params::BGUFuncLibSkillCS_BGUGetLastSkillCastTime Parms{};

	Parms.Unit = Unit;
	Parms.SkillID = SkillID;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function b1-Managed.BGUFuncLibSkillCS.BGUGetCastingSkillID
// (Native, Static, Public, HasOutParams, BlueprintCallable)
// Parameters:
// class ACharacter*                       Unit                                                   (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// int32                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

int32 UBGUFuncLibSkillCS::BGUGetCastingSkillID(class ACharacter* Unit)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("BGUFuncLibSkillCS", "BGUGetCastingSkillID");

	Params::BGUFuncLibSkillCS_BGUGetCastingSkillID Parms{};

	Parms.Unit = Unit;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function b1-Managed.BGUFuncLibSkillCS.BGUGetLastSkillID
// (Native, Static, Public, HasOutParams, BlueprintCallable)
// Parameters:
// class AActor*                           Unit                                                   (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// int32                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

int32 UBGUFuncLibSkillCS::BGUGetLastSkillID(class AActor* Unit)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("BGUFuncLibSkillCS", "BGUGetLastSkillID");

	Params::BGUFuncLibSkillCS_BGUGetLastSkillID Parms{};

	Parms.Unit = Unit;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function b1-Managed.GSEQG_PointsOnSphere.DoItemGenerationCS
// (Native, Event, Public, BlueprintEvent, Const)
// Parameters:
// TArray<struct FVector>                  ContextLocations                                       (ConstParm, Parm, OutParm, ReferenceParm)

void UGSEQG_PointsOnSphere::DoItemGenerationCS(const TArray<struct FVector>& ContextLocations) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GSEQG_PointsOnSphere", "DoItemGenerationCS");

	Params::GSEQG_PointsOnSphere_DoItemGenerationCS Parms{};

	Parms.ContextLocations = std::move(ContextLocations);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function b1-Managed.BAIT_Combo.OnPropertyChanged
// (Native, Event, Public, Protected, BlueprintEvent)
// Parameters:
// class FString                           MemberName                                             (Parm, ZeroConstructor, HasGetValueTypeHash)
// class FString                           PropertyName                                           (Parm, ZeroConstructor, HasGetValueTypeHash)

void UBAIT_Combo::OnPropertyChanged(const class FString& MemberName, const class FString& PropertyName)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BAIT_Combo", "OnPropertyChanged");

	Params::BAIT_Combo_OnPropertyChanged Parms{};

	Parms.MemberName = std::move(MemberName);
	Parms.PropertyName = std::move(PropertyName);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function b1-Managed.BAIT_Combo.QACalcTrueComboArray
// (Native, Public, HasOutParams, BlueprintCallable)
// Parameters:
// TArray<class FString>                   ReturnValue                                            (Parm, OutParm, ReturnParm)

TArray<class FString> UBAIT_Combo::QACalcTrueComboArray()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BAIT_Combo", "QACalcTrueComboArray");

	Params::BAIT_Combo_QACalcTrueComboArray Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function b1-Managed.BAIT_Combo.QACalcSkillArray
// (Native, Public, HasOutParams, BlueprintCallable)
// Parameters:
// class FString                           ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash)

class FString UBAIT_Combo::QACalcSkillArray()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BAIT_Combo", "QACalcSkillArray");

	Params::BAIT_Combo_QACalcSkillArray Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function b1-Managed.BAIT_SwitchAttackAndWander.OnPropertyChanged
// (Native, Event, Public, Protected, BlueprintEvent)
// Parameters:
// class FString                           MemberName                                             (Parm, ZeroConstructor, HasGetValueTypeHash)
// class FString                           PropertyName                                           (Parm, ZeroConstructor, HasGetValueTypeHash)

void UBAIT_SwitchAttackAndWander::OnPropertyChanged(const class FString& MemberName, const class FString& PropertyName)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BAIT_SwitchAttackAndWander", "OnPropertyChanged");

	Params::BAIT_SwitchAttackAndWander_OnPropertyChanged Parms{};

	Parms.MemberName = std::move(MemberName);
	Parms.PropertyName = std::move(PropertyName);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function b1-Managed.BGURuntimeMeshActor.ReceiveBeginPlay
// (Native, Event, Public, Protected, BlueprintEvent)

void ABGURuntimeMeshActor::ReceiveBeginPlay()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BGURuntimeMeshActor", "ReceiveBeginPlay");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function b1-Managed.BGURuntimeMeshActor.OnSliceRuntimeMesh
// (Native, Event, Public, BlueprintEvent)
// Parameters:
// struct FVector                          PlanePosition                                          (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// struct FVector                          PlaneNormal                                            (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// float                                   ApplyForce                                             (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ABGURuntimeMeshActor::OnSliceRuntimeMesh(const struct FVector& PlanePosition, const struct FVector& PlaneNormal, float ApplyForce)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BGURuntimeMeshActor", "OnSliceRuntimeMesh");

	Params::BGURuntimeMeshActor_OnSliceRuntimeMesh Parms{};

	Parms.PlanePosition = std::move(PlanePosition);
	Parms.PlaneNormal = std::move(PlaneNormal);
	Parms.ApplyForce = ApplyForce;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function b1-Managed.B1ReplicationGraphCS.RemoveNetworkActorCS
// (Native, Event, Public, BlueprintEvent)
// Parameters:
// class AActor*                           Actor                                                  (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UB1ReplicationGraphCS::RemoveNetworkActorCS(class AActor* Actor)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("B1ReplicationGraphCS", "RemoveNetworkActorCS");

	Params::B1ReplicationGraphCS_RemoveNetworkActorCS Parms{};

	Parms.Actor = Actor;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function b1-Managed.B1ReplicationGraphCS.AddNetworkActorCS
// (Native, Event, Public, BlueprintEvent)
// Parameters:
// class AActor*                           Actor                                                  (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UB1ReplicationGraphCS::AddNetworkActorCS(class AActor* Actor)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("B1ReplicationGraphCS", "AddNetworkActorCS");

	Params::B1ReplicationGraphCS_AddNetworkActorCS Parms{};

	Parms.Actor = Actor;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function b1-Managed.BANS_GSMatchingTransform.GSNotifyBeginCS
// (Native, Event, Public, Protected, BlueprintEvent, Const)
// Parameters:
// struct FUStGSNotifyParam                NotifyParam                                            (Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
// float                                   TotalDuration                                          (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UBANS_GSMatchingTransform::GSNotifyBeginCS(const struct FUStGSNotifyParam& NotifyParam, float TotalDuration) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BANS_GSMatchingTransform", "GSNotifyBeginCS");

	Params::BANS_GSMatchingTransform_GSNotifyBeginCS Parms{};

	Parms.NotifyParam = std::move(NotifyParam);
	Parms.TotalDuration = TotalDuration;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function b1-Managed.BANS_GSMatchingTransform.GSNotifyEndCS
// (Native, Event, Public, Protected, BlueprintEvent, Const)
// Parameters:
// struct FUStGSNotifyParam                NotifyParam                                            (Parm, ZeroConstructor, IsPlainOldData, NoDestructor)

void UBANS_GSMatchingTransform::GSNotifyEndCS(const struct FUStGSNotifyParam& NotifyParam) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BANS_GSMatchingTransform", "GSNotifyEndCS");

	Params::BANS_GSMatchingTransform_GSNotifyEndCS Parms{};

	Parms.NotifyParam = std::move(NotifyParam);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function b1-Managed.BUCircusBase.CollectRelativeTamerData
// (Native, Public, BlueprintCallable)

void ABUCircusBase::CollectRelativeTamerData()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BUCircusBase", "CollectRelativeTamerData");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function b1-Managed.BANS_GSMagicWindow.GSNotifyBeginCS
// (Native, Event, Public, Protected, BlueprintEvent, Const)
// Parameters:
// struct FUStGSNotifyParam                NotifyParam                                            (Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
// float                                   TotalDuration                                          (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UBANS_GSMagicWindow::GSNotifyBeginCS(const struct FUStGSNotifyParam& NotifyParam, float TotalDuration) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BANS_GSMagicWindow", "GSNotifyBeginCS");

	Params::BANS_GSMagicWindow_GSNotifyBeginCS Parms{};

	Parms.NotifyParam = std::move(NotifyParam);
	Parms.TotalDuration = TotalDuration;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function b1-Managed.BGUShadowActorBase.OnConstructionCS
// (Native, Event, Public, Protected, BlueprintEvent)
// Parameters:
// struct FTransform                       Transform                                              (ConstParm, Parm, OutParm, ReferenceParm, IsPlainOldData, NoDestructor)

void ABGUShadowActorBase::OnConstructionCS(const struct FTransform& Transform)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BGUShadowActorBase", "OnConstructionCS");

	Params::BGUShadowActorBase_OnConstructionCS Parms{};

	Parms.Transform = std::move(Transform);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function b1-Managed.BANS_GSAttackRangeOffset.GSNotifyBeginCS
// (Native, Event, Public, Protected, BlueprintEvent, Const)
// Parameters:
// struct FUStGSNotifyParam                NotifyParam                                            (Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
// float                                   TotalDuration                                          (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UBANS_GSAttackRangeOffset::GSNotifyBeginCS(const struct FUStGSNotifyParam& NotifyParam, float TotalDuration) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BANS_GSAttackRangeOffset", "GSNotifyBeginCS");

	Params::BANS_GSAttackRangeOffset_GSNotifyBeginCS Parms{};

	Parms.NotifyParam = std::move(NotifyParam);
	Parms.TotalDuration = TotalDuration;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function b1-Managed.BANS_GSAttackRangeOffset.GSNotifyTickCS
// (Native, Event, Public, Protected, BlueprintEvent, Const)
// Parameters:
// struct FUStGSNotifyParam                NotifyParam                                            (Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
// float                                   FrameDeltaTime                                         (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UBANS_GSAttackRangeOffset::GSNotifyTickCS(const struct FUStGSNotifyParam& NotifyParam, float FrameDeltaTime) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BANS_GSAttackRangeOffset", "GSNotifyTickCS");

	Params::BANS_GSAttackRangeOffset_GSNotifyTickCS Parms{};

	Parms.NotifyParam = std::move(NotifyParam);
	Parms.FrameDeltaTime = FrameDeltaTime;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function b1-Managed.BANS_GSAttackRangeOffset.GSNotifyEndCS
// (Native, Event, Public, Protected, BlueprintEvent, Const)
// Parameters:
// struct FUStGSNotifyParam                NotifyParam                                            (Parm, ZeroConstructor, IsPlainOldData, NoDestructor)

void UBANS_GSAttackRangeOffset::GSNotifyEndCS(const struct FUStGSNotifyParam& NotifyParam) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BANS_GSAttackRangeOffset", "GSNotifyEndCS");

	Params::BANS_GSAttackRangeOffset_GSNotifyEndCS Parms{};

	Parms.NotifyParam = std::move(NotifyParam);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function b1-Managed.BGUDroppableDestructionActorBase.SetFloatValueToMaterialAdvect
// (Native, Event, Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// class FName                             ParamName                                              (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// float                                   FloatValue                                             (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ABGUDroppableDestructionActorBase::SetFloatValueToMaterialAdvect(class FName ParamName, float FloatValue)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BGUDroppableDestructionActorBase", "SetFloatValueToMaterialAdvect");

	Params::BGUDroppableDestructionActorBase_SetFloatValueToMaterialAdvect Parms{};

	Parms.ParamName = ParamName;
	Parms.FloatValue = FloatValue;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function b1-Managed.BANS_GSSetCollisionEnabledByTag.GSNotifyBeginCS
// (Native, Event, Public, Protected, BlueprintEvent, Const)
// Parameters:
// struct FUStGSNotifyParam                NotifyParam                                            (Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
// float                                   TotalDuration                                          (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UBANS_GSSetCollisionEnabledByTag::GSNotifyBeginCS(const struct FUStGSNotifyParam& NotifyParam, float TotalDuration) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BANS_GSSetCollisionEnabledByTag", "GSNotifyBeginCS");

	Params::BANS_GSSetCollisionEnabledByTag_GSNotifyBeginCS Parms{};

	Parms.NotifyParam = std::move(NotifyParam);
	Parms.TotalDuration = TotalDuration;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function b1-Managed.BANS_GSSetCollisionEnabledByTag.GSNotifyEndCS
// (Native, Event, Public, Protected, BlueprintEvent, Const)
// Parameters:
// struct FUStGSNotifyParam                NotifyParam                                            (Parm, ZeroConstructor, IsPlainOldData, NoDestructor)

void UBANS_GSSetCollisionEnabledByTag::GSNotifyEndCS(const struct FUStGSNotifyParam& NotifyParam) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BANS_GSSetCollisionEnabledByTag", "GSNotifyEndCS");

	Params::BANS_GSSetCollisionEnabledByTag_GSNotifyEndCS Parms{};

	Parms.NotifyParam = std::move(NotifyParam);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function b1-Managed.BANS_FloatingHitState.GSNotifyBeginCS
// (Native, Event, Public, Protected, BlueprintEvent, Const)
// Parameters:
// struct FUStGSNotifyParam                NotifyParam                                            (Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
// float                                   TotalDuration                                          (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UBANS_FloatingHitState::GSNotifyBeginCS(const struct FUStGSNotifyParam& NotifyParam, float TotalDuration) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BANS_FloatingHitState", "GSNotifyBeginCS");

	Params::BANS_FloatingHitState_GSNotifyBeginCS Parms{};

	Parms.NotifyParam = std::move(NotifyParam);
	Parms.TotalDuration = TotalDuration;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function b1-Managed.BGUSafeLandVolume.BeginPlayCS
// (Native, Event, Public, Protected, BlueprintEvent)

void ABGUSafeLandVolume::BeginPlayCS()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BGUSafeLandVolume", "BeginPlayCS");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function b1-Managed.BUS_SafeLandVolumeComp.OnActorLeave
// (Native, Public, Private)
// Parameters:
// class UPrimitiveComponent*              OverlappedComponent                                    (ExportObject, Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// class AActor*                           OtherActor                                             (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// class UPrimitiveComponent*              OtherComp                                              (ExportObject, Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// int32                                   OtherBodyIndex                                         (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UBUS_SafeLandVolumeComp::OnActorLeave(class UPrimitiveComponent* OverlappedComponent, class AActor* OtherActor, class UPrimitiveComponent* OtherComp, int32 OtherBodyIndex)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BUS_SafeLandVolumeComp", "OnActorLeave");

	Params::BUS_SafeLandVolumeComp_OnActorLeave Parms{};

	Parms.OverlappedComponent = OverlappedComponent;
	Parms.OtherActor = OtherActor;
	Parms.OtherComp = OtherComp;
	Parms.OtherBodyIndex = OtherBodyIndex;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function b1-Managed.BUS_SafeLandVolumeComp.OnActorEnter
// (Native, Public, Private)
// Parameters:
// class AActor*                           OverlappedActor                                        (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// class AActor*                           OtherActor                                             (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UBUS_SafeLandVolumeComp::OnActorEnter(class AActor* OverlappedActor, class AActor* OtherActor)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BUS_SafeLandVolumeComp", "OnActorEnter");

	Params::BUS_SafeLandVolumeComp_OnActorEnter Parms{};

	Parms.OverlappedActor = OverlappedActor;
	Parms.OtherActor = OtherActor;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function b1-Managed.BANS_GSAttachEquipCompToSocket.GSNotifyBeginCS
// (Native, Event, Public, Protected, BlueprintEvent, Const)
// Parameters:
// struct FUStGSNotifyParam                NotifyParam                                            (Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
// float                                   TotalDuration                                          (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UBANS_GSAttachEquipCompToSocket::GSNotifyBeginCS(const struct FUStGSNotifyParam& NotifyParam, float TotalDuration) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BANS_GSAttachEquipCompToSocket", "GSNotifyBeginCS");

	Params::BANS_GSAttachEquipCompToSocket_GSNotifyBeginCS Parms{};

	Parms.NotifyParam = std::move(NotifyParam);
	Parms.TotalDuration = TotalDuration;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function b1-Managed.BANS_GSAttachEquipCompToSocket.GSNotifyEndCS
// (Native, Event, Public, Protected, BlueprintEvent, Const)
// Parameters:
// struct FUStGSNotifyParam                NotifyParam                                            (Parm, ZeroConstructor, IsPlainOldData, NoDestructor)

void UBANS_GSAttachEquipCompToSocket::GSNotifyEndCS(const struct FUStGSNotifyParam& NotifyParam) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BANS_GSAttachEquipCompToSocket", "GSNotifyEndCS");

	Params::BANS_GSAttachEquipCompToSocket_GSNotifyEndCS Parms{};

	Parms.NotifyParam = std::move(NotifyParam);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function b1-Managed.BGUSpiderNavigationActor.ReceiveTick
// (Native, Event, Public, BlueprintEvent)
// Parameters:
// float                                   DeltaSeconds                                           (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ABGUSpiderNavigationActor::ReceiveTick(float DeltaSeconds)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BGUSpiderNavigationActor", "ReceiveTick");

	Params::BGUSpiderNavigationActor_ReceiveTick Parms{};

	Parms.DeltaSeconds = DeltaSeconds;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function b1-Managed.BGUSpiderNavigationActor.RecordSpiderNavPoint
// (Native, Public, BlueprintCallable)

void ABGUSpiderNavigationActor::RecordSpiderNavPoint()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BGUSpiderNavigationActor", "RecordSpiderNavPoint");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function b1-Managed.BGUSpiderNavigationActor.HideSpiderNavPoint
// (Native, Public, BlueprintCallable)

void ABGUSpiderNavigationActor::HideSpiderNavPoint()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BGUSpiderNavigationActor", "HideSpiderNavPoint");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function b1-Managed.BGUSpiderNavigationActor.ShowSpiderNavPoint
// (Native, Public, BlueprintCallable)

void ABGUSpiderNavigationActor::ShowSpiderNavPoint()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BGUSpiderNavigationActor", "ShowSpiderNavPoint");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function b1-Managed.BPS_PlayerStateDataCompB1.LateECSBeginPlay
// (Native, Event, Public, BlueprintEvent)

void UBPS_PlayerStateDataCompB1::LateECSBeginPlay()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BPS_PlayerStateDataCompB1", "LateECSBeginPlay");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function b1-Managed.BPS_PlayerStateDataCompB1.PreECSBeginPlay
// (Native, Event, Public, BlueprintEvent)

void UBPS_PlayerStateDataCompB1::PreECSBeginPlay()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BPS_PlayerStateDataCompB1", "PreECSBeginPlay");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function b1-Managed.BUTamerActor.GetHighLODMeshConfig
// (Native, Event, Public, Protected, HasOutParams, BlueprintEvent)
// Parameters:
// struct FTamerHighLODRootMeshConfig      OutMeshConfig                                          (Parm, OutParm)
// uint8                                   ReturnValue                                            (Parm, OutParm, ReturnParm, NoDestructor, HasGetValueTypeHash)

uint8 ABUTamerActor::GetHighLODMeshConfig(struct FTamerHighLODRootMeshConfig* OutMeshConfig)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BUTamerActor", "GetHighLODMeshConfig");

	Params::BUTamerActor_GetHighLODMeshConfig Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	if (OutMeshConfig != nullptr)
		*OutMeshConfig = std::move(Parms.OutMeshConfig);

	return Parms.ReturnValue;
}


// Function b1-Managed.BUTamerActor.OnConstructionCS
// (Native, Event, Public, Protected, BlueprintEvent)
// Parameters:
// struct FTransform                       Transform                                              (ConstParm, Parm, OutParm, ReferenceParm, IsPlainOldData, NoDestructor)

void ABUTamerActor::OnConstructionCS(const struct FTransform& Transform)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BUTamerActor", "OnConstructionCS");

	Params::BUTamerActor_OnConstructionCS Parms{};

	Parms.Transform = std::move(Transform);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function b1-Managed.BUTamerActor.ReceiveEndPlay
// (Native, Event, Public, Protected, BlueprintEvent)
// Parameters:
// EEndPlayReason                          EndPlayReason                                          (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ABUTamerActor::ReceiveEndPlay(EEndPlayReason EndPlayReason)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BUTamerActor", "ReceiveEndPlay");

	Params::BUTamerActor_ReceiveEndPlay Parms{};

	Parms.EndPlayReason = EndPlayReason;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function b1-Managed.BUTamerActor.CopyPropertiesFromTamerActor
// (Native, Public, BlueprintCallable)
// Parameters:
// class ABUTamerActor*                    TamerActor                                             (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ABUTamerActor::CopyPropertiesFromTamerActor(class ABUTamerActor* TamerActor)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BUTamerActor", "CopyPropertiesFromTamerActor");

	Params::BUTamerActor_CopyPropertiesFromTamerActor Parms{};

	Parms.TamerActor = TamerActor;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function b1-Managed.BUTamerActor.CopyPropertiesFromUnitActor
// (Native, Public, BlueprintCallable)
// Parameters:
// class ABGUCharacterCS*                  Unit                                                   (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ABUTamerActor::CopyPropertiesFromUnitActor(class ABGUCharacterCS* Unit)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BUTamerActor", "CopyPropertiesFromUnitActor");

	Params::BUTamerActor_CopyPropertiesFromUnitActor Parms{};

	Parms.Unit = Unit;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function b1-Managed.BUTamerActor.BeginPlayCS
// (Native, Event, Public, Protected, BlueprintEvent)

void ABUTamerActor::BeginPlayCS()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BUTamerActor", "BeginPlayCS");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function b1-Managed.BUTamerActor.CopyPropertiesFromUnit
// (Native, Public, BlueprintCallable)

void ABUTamerActor::CopyPropertiesFromUnit()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BUTamerActor", "CopyPropertiesFromUnit");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function b1-Managed.BUTamerActor.GetMonster
// (Native, Public, HasOutParams, BlueprintCallable, BlueprintPure)
// Parameters:
// class ABGUCharacterCS*                  ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

class ABGUCharacterCS* ABUTamerActor::GetMonster()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BUTamerActor", "GetMonster");

	Params::BUTamerActor_GetMonster Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function b1-Managed.BUTamerActor.GetActorGuidCS
// (Native, Event, Public, Protected, HasOutParams, BlueprintEvent, Const)
// Parameters:
// class FString                           OutActorGuid                                           (Parm, OutParm, ZeroConstructor, HasGetValueTypeHash)
// uint8                                   ReturnValue                                            (Parm, OutParm, ReturnParm, NoDestructor, HasGetValueTypeHash)

uint8 ABUTamerActor::GetActorGuidCS(class FString* OutActorGuid) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BUTamerActor", "GetActorGuidCS");

	Params::BUTamerActor_GetActorGuidCS Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	if (OutActorGuid != nullptr)
		*OutActorGuid = std::move(Parms.OutActorGuid);

	return Parms.ReturnValue;
}


// Function b1-Managed.BGUTrainDummyMgrActor.BeginPlayCS
// (Native, Event, Public, Protected, BlueprintEvent)

void ABGUTrainDummyMgrActor::BeginPlayCS()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BGUTrainDummyMgrActor", "BeginPlayCS");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function b1-Managed.BUAnim_PostProcess_Quadruped.BlueprintInitializeAnimation
// (Native, Event, Public, BlueprintEvent)

void UBUAnim_PostProcess_Quadruped::BlueprintInitializeAnimation()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BUAnim_PostProcess_Quadruped", "BlueprintInitializeAnimation");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function b1-Managed.BUAnim_PostProcess_Quadruped.BlueprintUpdateAnimation
// (Native, Event, Public, BlueprintEvent)
// Parameters:
// float                                   DeltaTimeX                                             (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UBUAnim_PostProcess_Quadruped::BlueprintUpdateAnimation(float DeltaTimeX)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BUAnim_PostProcess_Quadruped", "BlueprintUpdateAnimation");

	Params::BUAnim_PostProcess_Quadruped_BlueprintUpdateAnimation Parms{};

	Parms.DeltaTimeX = DeltaTimeX;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function b1-Managed.BANSM_AttackRotation.CheckState
// (Native, Event, Public, Protected, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// class UAnimSequenceBase*                AnimBase                                               (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// float                                   CurTime                                                (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// uint8                                   ReturnValue                                            (Parm, OutParm, ReturnParm, NoDestructor, HasGetValueTypeHash)

uint8 UBANSM_AttackRotation::CheckState(class UAnimSequenceBase* AnimBase, float CurTime)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BANSM_AttackRotation", "CheckState");

	Params::BANSM_AttackRotation_CheckState Parms{};

	Parms.AnimBase = AnimBase;
	Parms.CurTime = CurTime;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function b1-Managed.OverlapCompFunctionBinder.OnActorLeave
// (Native, Public, Private)
// Parameters:
// class AActor*                           OverlappedActor                                        (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// class AActor*                           OtherActor                                             (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UOverlapCompFunctionBinder::OnActorLeave(class AActor* OverlappedActor, class AActor* OtherActor)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("OverlapCompFunctionBinder", "OnActorLeave");

	Params::OverlapCompFunctionBinder_OnActorLeave Parms{};

	Parms.OverlappedActor = OverlappedActor;
	Parms.OtherActor = OtherActor;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function b1-Managed.OverlapCompFunctionBinder.OnActorEnter
// (Native, Public, Private)
// Parameters:
// class AActor*                           OverlappedActor                                        (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// class AActor*                           OtherActor                                             (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UOverlapCompFunctionBinder::OnActorEnter(class AActor* OverlappedActor, class AActor* OtherActor)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("OverlapCompFunctionBinder", "OnActorEnter");

	Params::OverlapCompFunctionBinder_OnActorEnter Parms{};

	Parms.OverlappedActor = OverlappedActor;
	Parms.OtherActor = OtherActor;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function b1-Managed.BGP_PlayerStateCS.PostInitializeComponentsCS
// (Native, Event, Public, BlueprintEvent)

void ABGP_PlayerStateCS::PostInitializeComponentsCS()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BGP_PlayerStateCS", "PostInitializeComponentsCS");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function b1-Managed.BGP_PlayerStateCS.ReceiveDestroyed
// (Native, Event, Public, BlueprintEvent)

void ABGP_PlayerStateCS::ReceiveDestroyed()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BGP_PlayerStateCS", "ReceiveDestroyed");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function b1-Managed.BGP_PlayerStateCS.ReceiveEndPlay
// (Native, Event, Public, Protected, BlueprintEvent)
// Parameters:
// EEndPlayReason                          EndPlayReason                                          (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ABGP_PlayerStateCS::ReceiveEndPlay(EEndPlayReason EndPlayReason)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BGP_PlayerStateCS", "ReceiveEndPlay");

	Params::BGP_PlayerStateCS_ReceiveEndPlay Parms{};

	Parms.EndPlayReason = EndPlayReason;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function b1-Managed.BGUSpiderWebActorBase.ReceiveBeginPlay
// (Native, Event, Public, Protected, BlueprintEvent)

void ABGUSpiderWebActorBase::ReceiveBeginPlay()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BGUSpiderWebActorBase", "ReceiveBeginPlay");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function b1-Managed.BGUSpiderWebActorBase.ReceiveData
// (Native, Event, Public, BlueprintEvent)

void ABGUSpiderWebActorBase::ReceiveData()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BGUSpiderWebActorBase", "ReceiveData");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function b1-Managed.BGW_CameraAdapterMgr.OnViewPortResized
// (Native, Public)
// Parameters:
// int32                                   NewWidth                                               (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// int32                                   NewHeight                                              (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UBGW_CameraAdapterMgr::OnViewPortResized(int32 NewWidth, int32 NewHeight)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BGW_CameraAdapterMgr", "OnViewPortResized");

	Params::BGW_CameraAdapterMgr_OnViewPortResized Parms{};

	Parms.NewWidth = NewWidth;
	Parms.NewHeight = NewHeight;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function b1-Managed.BUS_MovementSystem.AIFlyPathMoveMode_Pathfinding_OnDynamicCollisionAlert
// (Native, Public)
// Parameters:
// struct FDonNavigationDynamicCollisionPayloadData                                                   (Parm)

void UBUS_MovementSystem::AIFlyPathMoveMode_Pathfinding_OnDynamicCollisionAlert(const struct FDonNavigationDynamicCollisionPayload& Data)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BUS_MovementSystem", "AIFlyPathMoveMode_Pathfinding_OnDynamicCollisionAlert");

	Params::BUS_MovementSystem_AIFlyPathMoveMode_Pathfinding_OnDynamicCollisionAlert Parms{};

	Parms.Data = std::move(Data);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function b1-Managed.BUS_MovementSystem.AIFlyPathMoveMode_Pathfinding_OnFinish
// (Native, Public)
// Parameters:
// struct FDoNNavigationQueryData          Data                                                   (Parm)

void UBUS_MovementSystem::AIFlyPathMoveMode_Pathfinding_OnFinish(const struct FDoNNavigationQueryData& Data)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BUS_MovementSystem", "AIFlyPathMoveMode_Pathfinding_OnFinish");

	Params::BUS_MovementSystem_AIFlyPathMoveMode_Pathfinding_OnFinish Parms{};

	Parms.Data = std::move(Data);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function b1-Managed.BUS_MovementSystem.OnAIPathMoveModeMoveComplete
// (Native, Public)
// Parameters:
// int32                                   MoveRequestID                                          (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// EPathFollowingResult                    Result                                                 (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UBUS_MovementSystem::OnAIPathMoveModeMoveComplete(int32 MoveRequestID, EPathFollowingResult Result)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BUS_MovementSystem", "OnAIPathMoveModeMoveComplete");

	Params::BUS_MovementSystem_OnAIPathMoveModeMoveComplete Parms{};

	Parms.MoveRequestID = MoveRequestID;
	Parms.Result = Result;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function b1-Managed.BGUGateStateMachineActor.OnResetToGateClose
// (Native, Event, Public, BlueprintCallable, BlueprintEvent)

void ABGUGateStateMachineActor::OnResetToGateClose()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BGUGateStateMachineActor", "OnResetToGateClose");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function b1-Managed.BGUGateStateMachineActor.OnResetToGateOpen
// (Native, Event, Public, BlueprintCallable, BlueprintEvent)

void ABGUGateStateMachineActor::OnResetToGateOpen()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BGUGateStateMachineActor", "OnResetToGateOpen");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function b1-Managed.BGUGateStateMachineActor.OnGateClose
// (Native, Event, Public, BlueprintCallable, BlueprintEvent)

void ABGUGateStateMachineActor::OnGateClose()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BGUGateStateMachineActor", "OnGateClose");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function b1-Managed.BGUGateStateMachineActor.OnGateOpen
// (Native, Event, Public, BlueprintCallable, BlueprintEvent)

void ABGUGateStateMachineActor::OnGateOpen()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BGUGateStateMachineActor", "OnGateOpen");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function b1-Managed.B1_StartupGameMode.ReceiveEndPlay
// (Native, Event, Public, Protected, BlueprintEvent)
// Parameters:
// EEndPlayReason                          EndPlayReason                                          (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void AB1_StartupGameMode::ReceiveEndPlay(EEndPlayReason EndPlayReason)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("B1_StartupGameMode", "ReceiveEndPlay");

	Params::B1_StartupGameMode_ReceiveEndPlay Parms{};

	Parms.EndPlayReason = EndPlayReason;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function b1-Managed.BUS_ExtendConfigComp.PreSaveCS
// (Native, Event, Public, BlueprintEvent)

void UBUS_ExtendConfigComp::PreSaveCS()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BUS_ExtendConfigComp", "PreSaveCS");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function b1-Managed.BUAnimHumanoidCS_MotionMatching.SetupDefaultMMPoseData
// (Native, Public, Private, HasOutParams, BlueprintCallable)
// Parameters:
// struct FAnimUpdateContext               Context                                                (Parm, OutParm, ReferenceParm)
// struct FAnimNodeReference               Node                                                   (Parm, OutParm, ReferenceParm, NoDestructor)

void UBUAnimHumanoidCS_MotionMatching::SetupDefaultMMPoseData(struct FAnimUpdateContext& Context, struct FAnimNodeReference& Node)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BUAnimHumanoidCS_MotionMatching", "SetupDefaultMMPoseData");

	Params::BUAnimHumanoidCS_MotionMatching_SetupDefaultMMPoseData Parms{};

	Parms.Context = std::move(Context);
	Parms.Node = std::move(Node);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	Context = std::move(Parms.Context);
	Node = std::move(Parms.Node);
}


// Function b1-Managed.BGUBaseOnUnitRotateComponent.TickComponentGS
// (Native, Event, Public, BlueprintEvent)
// Parameters:
// float                                   DeltaSeconds                                           (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UBGUBaseOnUnitRotateComponent::TickComponentGS(float DeltaSeconds)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BGUBaseOnUnitRotateComponent", "TickComponentGS");

	Params::BGUBaseOnUnitRotateComponent_TickComponentGS Parms{};

	Parms.DeltaSeconds = DeltaSeconds;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function b1-Managed.BGUBaseOnUnitRotateComponent.BeginPlayGS
// (Native, Event, Public, BlueprintEvent)

void UBGUBaseOnUnitRotateComponent::BeginPlayGS()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BGUBaseOnUnitRotateComponent", "BeginPlayGS");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function b1-Managed.BGUBaseOnUnitRotateComponent.BGUSetBaseOnUnitRotation
// (Native, Public, BlueprintCallable)
// Parameters:
// class AActor*                           BaseUnit                                               (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// struct FRotator                         TargteRotation                                         (Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
// struct FVector                          OffsetVector                                           (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UBGUBaseOnUnitRotateComponent::BGUSetBaseOnUnitRotation(class AActor* BaseUnit, const struct FRotator& TargteRotation, const struct FVector& OffsetVector)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BGUBaseOnUnitRotateComponent", "BGUSetBaseOnUnitRotation");

	Params::BGUBaseOnUnitRotateComponent_BGUSetBaseOnUnitRotation Parms{};

	Parms.BaseUnit = BaseUnit;
	Parms.TargteRotation = std::move(TargteRotation);
	Parms.OffsetVector = std::move(OffsetVector);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function b1-Managed.BAN_GSDestroyProjectileByID.bIsNativeBranchingPointCS
// (Native, Event, Public, HasOutParams, BlueprintEvent, Const)
// Parameters:
// uint8                                   ReturnValue                                            (Parm, OutParm, ReturnParm, NoDestructor, HasGetValueTypeHash)

uint8 UBAN_GSDestroyProjectileByID::bIsNativeBranchingPointCS() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BAN_GSDestroyProjectileByID", "bIsNativeBranchingPointCS");

	Params::BAN_GSDestroyProjectileByID_bIsNativeBranchingPointCS Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function b1-Managed.BAN_GSDestroyProjectileByID.GSNotifyCS
// (Native, Event, Public, Protected, BlueprintEvent, Const)
// Parameters:
// struct FUStGSNotifyParam                NotifyParam                                            (Parm, ZeroConstructor, IsPlainOldData, NoDestructor)

void UBAN_GSDestroyProjectileByID::GSNotifyCS(const struct FUStGSNotifyParam& NotifyParam) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BAN_GSDestroyProjectileByID", "GSNotifyCS");

	Params::BAN_GSDestroyProjectileByID_GSNotifyCS Parms{};

	Parms.NotifyParam = std::move(NotifyParam);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function b1-Managed.BGUCreateDeadConfigComp.BeginPlayInCS
// (Native, Event, Public, BlueprintEvent)

void UBGUCreateDeadConfigComp::BeginPlayInCS()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BGUCreateDeadConfigComp", "BeginPlayInCS");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function b1-Managed.BGUCreateDeadConfigComp.ReceiveTick
// (Native, Event, Public, BlueprintEvent)
// Parameters:
// float                                   DeltaSeconds                                           (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UBGUCreateDeadConfigComp::ReceiveTick(float DeltaSeconds)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BGUCreateDeadConfigComp", "ReceiveTick");

	Params::BGUCreateDeadConfigComp_ReceiveTick Parms{};

	Parms.DeltaSeconds = DeltaSeconds;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function b1-Managed.BAIT_FlyMoveTo.Pathfinding_OnDynamicCollisionAlert
// (Native, Public, BlueprintCallable)
// Parameters:
// struct FDonNavigationDynamicCollisionPayloadData                                                   (Parm)

void UBAIT_FlyMoveTo::Pathfinding_OnDynamicCollisionAlert(const struct FDonNavigationDynamicCollisionPayload& Data)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BAIT_FlyMoveTo", "Pathfinding_OnDynamicCollisionAlert");

	Params::BAIT_FlyMoveTo_Pathfinding_OnDynamicCollisionAlert Parms{};

	Parms.Data = std::move(Data);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function b1-Managed.BAIT_FlyMoveTo.Pathfinding_OnFinish
// (Native, Public, BlueprintCallable)
// Parameters:
// struct FDoNNavigationQueryData          Data                                                   (Parm)

void UBAIT_FlyMoveTo::Pathfinding_OnFinish(const struct FDoNNavigationQueryData& Data)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BAIT_FlyMoveTo", "Pathfinding_OnFinish");

	Params::BAIT_FlyMoveTo_Pathfinding_OnFinish Parms{};

	Parms.Data = std::move(Data);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function b1-Managed.BANS_RespectCollisionInASS.GSAllowCrossSection
// (Native, Event, Public, HasOutParams, BlueprintEvent, Const)
// Parameters:
// uint8                                   ReturnValue                                            (Parm, OutParm, ReturnParm, NoDestructor, HasGetValueTypeHash)

uint8 UBANS_RespectCollisionInASS::GSAllowCrossSection() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BANS_RespectCollisionInASS", "GSAllowCrossSection");

	Params::BANS_RespectCollisionInASS_GSAllowCrossSection Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function b1-Managed.BANS_RespectCollisionInASS.GSNotifyBeginCS
// (Native, Event, Public, Protected, BlueprintEvent, Const)
// Parameters:
// struct FUStGSNotifyParam                NotifyParam                                            (Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
// float                                   TotalDuration                                          (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UBANS_RespectCollisionInASS::GSNotifyBeginCS(const struct FUStGSNotifyParam& NotifyParam, float TotalDuration) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BANS_RespectCollisionInASS", "GSNotifyBeginCS");

	Params::BANS_RespectCollisionInASS_GSNotifyBeginCS Parms{};

	Parms.NotifyParam = std::move(NotifyParam);
	Parms.TotalDuration = TotalDuration;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function b1-Managed.BANS_RespectCollisionInASS.GSNotifyEndCS
// (Native, Event, Public, Protected, BlueprintEvent, Const)
// Parameters:
// struct FUStGSNotifyParam                NotifyParam                                            (Parm, ZeroConstructor, IsPlainOldData, NoDestructor)

void UBANS_RespectCollisionInASS::GSNotifyEndCS(const struct FUStGSNotifyParam& NotifyParam) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BANS_RespectCollisionInASS", "GSNotifyEndCS");

	Params::BANS_RespectCollisionInASS_GSNotifyEndCS Parms{};

	Parms.NotifyParam = std::move(NotifyParam);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function b1-Managed.BGUCameraActor.ReceiveBeginPlay
// (Native, Event, Public, Protected, BlueprintEvent)

void ABGUCameraActor::ReceiveBeginPlay()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BGUCameraActor", "ReceiveBeginPlay");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function b1-Managed.BGUCameraActor.ReceiveEndPlay
// (Native, Event, Public, Protected, BlueprintEvent)
// Parameters:
// EEndPlayReason                          EndPlayReason                                          (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ABGUCameraActor::ReceiveEndPlay(EEndPlayReason EndPlayReason)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BGUCameraActor", "ReceiveEndPlay");

	Params::BGUCameraActor_ReceiveEndPlay Parms{};

	Parms.EndPlayReason = EndPlayReason;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function b1-Managed.BGUCameraRig_Rail.ReceiveBeginPlay
// (Native, Event, Public, Protected, BlueprintEvent)

void ABGUCameraRig_Rail::ReceiveBeginPlay()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BGUCameraRig_Rail", "ReceiveBeginPlay");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function b1-Managed.BGUCameraRig_Rail.ReceiveEndPlay
// (Native, Event, Public, Protected, BlueprintEvent)
// Parameters:
// EEndPlayReason                          EndPlayReason                                          (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ABGUCameraRig_Rail::ReceiveEndPlay(EEndPlayReason EndPlayReason)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BGUCameraRig_Rail", "ReceiveEndPlay");

	Params::BGUCameraRig_Rail_ReceiveEndPlay Parms{};

	Parms.EndPlayReason = EndPlayReason;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function b1-Managed.BANS_GSDispInteract.GSNotifyBeginCS
// (Native, Event, Public, Protected, BlueprintEvent, Const)
// Parameters:
// struct FUStGSNotifyParam                NotifyParam                                            (Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
// float                                   TotalDuration                                          (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UBANS_GSDispInteract::GSNotifyBeginCS(const struct FUStGSNotifyParam& NotifyParam, float TotalDuration) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BANS_GSDispInteract", "GSNotifyBeginCS");

	Params::BANS_GSDispInteract_GSNotifyBeginCS Parms{};

	Parms.NotifyParam = std::move(NotifyParam);
	Parms.TotalDuration = TotalDuration;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function b1-Managed.BANS_GSDispInteract.GSNotifyTickCS
// (Native, Event, Public, Protected, BlueprintEvent, Const)
// Parameters:
// struct FUStGSNotifyParam                NotifyParam                                            (Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
// float                                   FrameDeltaTime                                         (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UBANS_GSDispInteract::GSNotifyTickCS(const struct FUStGSNotifyParam& NotifyParam, float FrameDeltaTime) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BANS_GSDispInteract", "GSNotifyTickCS");

	Params::BANS_GSDispInteract_GSNotifyTickCS Parms{};

	Parms.NotifyParam = std::move(NotifyParam);
	Parms.FrameDeltaTime = FrameDeltaTime;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function b1-Managed.BANS_GSDispInteract.GSNotifyEndCS
// (Native, Event, Public, Protected, BlueprintEvent, Const)
// Parameters:
// struct FUStGSNotifyParam                NotifyParam                                            (Parm, ZeroConstructor, IsPlainOldData, NoDestructor)

void UBANS_GSDispInteract::GSNotifyEndCS(const struct FUStGSNotifyParam& NotifyParam) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BANS_GSDispInteract", "GSNotifyEndCS");

	Params::BANS_GSDispInteract_GSNotifyEndCS Parms{};

	Parms.NotifyParam = std::move(NotifyParam);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function b1-Managed.BED_ProcessStateNode_PlayLevelSequence.GetNodeDescriptionInCS
// (Native, Event, Public, HasOutParams, BlueprintEvent, Const)
// Parameters:
// class FString                           ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash)

class FString UBED_ProcessStateNode_PlayLevelSequence::GetNodeDescriptionInCS() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BED_ProcessStateNode_PlayLevelSequence", "GetNodeDescriptionInCS");

	Params::BED_ProcessStateNode_PlayLevelSequence_GetNodeDescriptionInCS Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function b1-Managed.BGUFXActorBase.ReceiveBeginPlay
// (Native, Event, Public, Protected, BlueprintEvent)

void ABGUFXActorBase::ReceiveBeginPlay()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BGUFXActorBase", "ReceiveBeginPlay");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function b1-Managed.BGUFXActorBase.SetFloatValueToMaterialAdvect
// (Native, Event, Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// class FName                             ParamName                                              (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// float                                   FloatValue                                             (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ABGUFXActorBase::SetFloatValueToMaterialAdvect(class FName ParamName, float FloatValue)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BGUFXActorBase", "SetFloatValueToMaterialAdvect");

	Params::BGUFXActorBase_SetFloatValueToMaterialAdvect Parms{};

	Parms.ParamName = ParamName;
	Parms.FloatValue = FloatValue;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function b1-Managed.BGUFXActorBase.OnDestroyDestructible
// (Native, Event, Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// struct FVector                          HitLocation                                            (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// struct FVector                          ImpulseDir                                             (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// float                                   ImpulseStrength                                        (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// float                                   Damage                                                 (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ABGUFXActorBase::OnDestroyDestructible(const struct FVector& HitLocation, const struct FVector& ImpulseDir, float ImpulseStrength, float Damage)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BGUFXActorBase", "OnDestroyDestructible");

	Params::BGUFXActorBase_OnDestroyDestructible Parms{};

	Parms.HitLocation = std::move(HitLocation);
	Parms.ImpulseDir = std::move(ImpulseDir);
	Parms.ImpulseStrength = ImpulseStrength;
	Parms.Damage = Damage;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function b1-Managed.BGUFXActorBase.OnResetDestructible
// (Native, Event, Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// uint8                                   IsDestroyed                                            (Parm, NoDestructor, HasGetValueTypeHash)

void ABGUFXActorBase::OnResetDestructible(uint8 IsDestroyed)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BGUFXActorBase", "OnResetDestructible");

	Params::BGUFXActorBase_OnResetDestructible Parms{};

	Parms.IsDestroyed = IsDestroyed;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function b1-Managed.BGUFXActorBase.OnHitDestructible
// (Native, Event, Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// struct FVector                          HitLocation                                            (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// struct FVector                          ImpulseDir                                             (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// float                                   ImpulseStrength                                        (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// float                                   Damage                                                 (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ABGUFXActorBase::OnHitDestructible(const struct FVector& HitLocation, const struct FVector& ImpulseDir, float ImpulseStrength, float Damage)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BGUFXActorBase", "OnHitDestructible");

	Params::BGUFXActorBase_OnHitDestructible Parms{};

	Parms.HitLocation = std::move(HitLocation);
	Parms.ImpulseDir = std::move(ImpulseDir);
	Parms.ImpulseStrength = ImpulseStrength;
	Parms.Damage = Damage;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function b1-Managed.BGUFXActorBase.IsDead
// (Native, Public, HasOutParams, BlueprintCallable)
// Parameters:
// uint8                                   ReturnValue                                            (Parm, OutParm, ReturnParm, NoDestructor, HasGetValueTypeHash)

uint8 ABGUFXActorBase::IsDead()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BGUFXActorBase", "IsDead");

	Params::BGUFXActorBase_IsDead Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function b1-Managed.BGUDropItemActorCS.OnPlayDropEffect
// (Native, Event, Public, BlueprintCallable, BlueprintEvent)

void ABGUDropItemActorCS::OnPlayDropEffect()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BGUDropItemActorCS", "OnPlayDropEffect");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function b1-Managed.BGUDropItemActorCS.DropItemBPFunc
// (Native, Event, Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// float                                   FloatParam                                             (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ABGUDropItemActorCS::DropItemBPFunc(float FloatParam)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BGUDropItemActorCS", "DropItemBPFunc");

	Params::BGUDropItemActorCS_DropItemBPFunc Parms{};

	Parms.FloatParam = FloatParam;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function b1-Managed.BAN_GSAIJumpStart.bIsNativeBranchingPointCS
// (Native, Event, Public, HasOutParams, BlueprintEvent, Const)
// Parameters:
// uint8                                   ReturnValue                                            (Parm, OutParm, ReturnParm, NoDestructor, HasGetValueTypeHash)

uint8 UBAN_GSAIJumpStart::bIsNativeBranchingPointCS() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BAN_GSAIJumpStart", "bIsNativeBranchingPointCS");

	Params::BAN_GSAIJumpStart_bIsNativeBranchingPointCS Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function b1-Managed.BAN_GSAIJumpStart.GSNotifyCS
// (Native, Event, Public, Protected, BlueprintEvent, Const)
// Parameters:
// struct FUStGSNotifyParam                NotifyParam                                            (Parm, ZeroConstructor, IsPlainOldData, NoDestructor)

void UBAN_GSAIJumpStart::GSNotifyCS(const struct FUStGSNotifyParam& NotifyParam) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BAN_GSAIJumpStart", "GSNotifyCS");

	Params::BAN_GSAIJumpStart_GSNotifyCS Parms{};

	Parms.NotifyParam = std::move(NotifyParam);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function b1-Managed.BGUMeditationPointBase.ReceiveBeginPlay
// (Native, Event, Public, Protected, BlueprintEvent)

void ABGUMeditationPointBase::ReceiveBeginPlay()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BGUMeditationPointBase", "ReceiveBeginPlay");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function b1-Managed.BED_TaskNode_GamePass.GetNodeDescriptionInCS
// (Native, Event, Public, HasOutParams, BlueprintEvent, Const)
// Parameters:
// class FString                           ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash)

class FString UBED_TaskNode_GamePass::GetNodeDescriptionInCS() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BED_TaskNode_GamePass", "GetNodeDescriptionInCS");

	Params::BED_TaskNode_GamePass_GetNodeDescriptionInCS Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function b1-Managed.BGUPerformerActorCS.PostInitializeComponentsCS
// (Native, Event, Public, Protected, BlueprintEvent)

void ABGUPerformerActorCS::PostInitializeComponentsCS()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BGUPerformerActorCS", "PostInitializeComponentsCS");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function b1-Managed.BGUPerformerActorCS.OnConstructionCS
// (Native, Event, Public, Protected, BlueprintEvent)
// Parameters:
// struct FTransform                       Transform                                              (ConstParm, Parm, OutParm, ReferenceParm, IsPlainOldData, NoDestructor)

void ABGUPerformerActorCS::OnConstructionCS(const struct FTransform& Transform)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BGUPerformerActorCS", "OnConstructionCS");

	Params::BGUPerformerActorCS_OnConstructionCS Parms{};

	Parms.Transform = std::move(Transform);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function b1-Managed.BGUPerformerActorCS.BeginPlayCS
// (Native, Event, Public, Protected, BlueprintEvent)

void ABGUPerformerActorCS::BeginPlayCS()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BGUPerformerActorCS", "BeginPlayCS");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function b1-Managed.BGUPerformerActorCS.EquipFinish
// (Native, Event, Public, BlueprintEvent)
// Parameters:
// int32                                   EquipID                                                (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ABGUPerformerActorCS::EquipFinish(int32 EquipID)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BGUPerformerActorCS", "EquipFinish");

	Params::BGUPerformerActorCS_EquipFinish Parms{};

	Parms.EquipID = EquipID;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function b1-Managed.BGUPerformerActorCS.GetActorGuidCS
// (Native, Event, Public, Protected, HasOutParams, BlueprintEvent, Const)
// Parameters:
// class FString                           OutActorGuid                                           (Parm, OutParm, ZeroConstructor, HasGetValueTypeHash)
// uint8                                   ReturnValue                                            (Parm, OutParm, ReturnParm, NoDestructor, HasGetValueTypeHash)

uint8 ABGUPerformerActorCS::GetActorGuidCS(class FString* OutActorGuid) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BGUPerformerActorCS", "GetActorGuidCS");

	Params::BGUPerformerActorCS_GetActorGuidCS Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	if (OutActorGuid != nullptr)
		*OutActorGuid = std::move(Parms.OutActorGuid);

	return Parms.ReturnValue;
}


// Function b1-Managed.GSEQG_WanderPointGenerator.DoItemGenerationCS
// (Native, Event, Public, BlueprintEvent, Const)
// Parameters:
// TArray<struct FVector>                  ContextLocations                                       (ConstParm, Parm, OutParm, ReferenceParm)

void UGSEQG_WanderPointGenerator::DoItemGenerationCS(const TArray<struct FVector>& ContextLocations) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GSEQG_WanderPointGenerator", "DoItemGenerationCS");

	Params::GSEQG_WanderPointGenerator_DoItemGenerationCS Parms{};

	Parms.ContextLocations = std::move(ContextLocations);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function b1-Managed.BAN_GSFindSceneLocation.bIsNativeBranchingPointCS
// (Native, Event, Public, HasOutParams, BlueprintEvent, Const)
// Parameters:
// uint8                                   ReturnValue                                            (Parm, OutParm, ReturnParm, NoDestructor, HasGetValueTypeHash)

uint8 UBAN_GSFindSceneLocation::bIsNativeBranchingPointCS() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BAN_GSFindSceneLocation", "bIsNativeBranchingPointCS");

	Params::BAN_GSFindSceneLocation_bIsNativeBranchingPointCS Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function b1-Managed.BAN_GSFindSceneLocation.GSNotifyCS
// (Native, Event, Public, Protected, BlueprintEvent, Const)
// Parameters:
// struct FUStGSNotifyParam                NotifyParam                                            (Parm, ZeroConstructor, IsPlainOldData, NoDestructor)

void UBAN_GSFindSceneLocation::GSNotifyCS(const struct FUStGSNotifyParam& NotifyParam) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BAN_GSFindSceneLocation", "GSNotifyCS");

	Params::BAN_GSFindSceneLocation_GSNotifyCS Parms{};

	Parms.NotifyParam = std::move(NotifyParam);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function b1-Managed.BUS_GroupAIAreaCompImpl.OverlapBegin
// (Native, Public, Protected)
// Parameters:
// class AActor*                           OverlappedActor                                        (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// class AActor*                           OtherActor                                             (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UBUS_GroupAIAreaCompImpl::OverlapBegin(class AActor* OverlappedActor, class AActor* OtherActor)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BUS_GroupAIAreaCompImpl", "OverlapBegin");

	Params::BUS_GroupAIAreaCompImpl_OverlapBegin Parms{};

	Parms.OverlappedActor = OverlappedActor;
	Parms.OtherActor = OtherActor;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function b1-Managed.BUS_GroupAIAreaCompImpl.OverlapEnd
// (Native, Public, Protected)
// Parameters:
// class UPrimitiveComponent*              OverlappedComponent                                    (ExportObject, Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// class AActor*                           OtherActor                                             (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// class UPrimitiveComponent*              OtherComp                                              (ExportObject, Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// int32                                   OtherBodyIndex                                         (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UBUS_GroupAIAreaCompImpl::OverlapEnd(class UPrimitiveComponent* OverlappedComponent, class AActor* OtherActor, class UPrimitiveComponent* OtherComp, int32 OtherBodyIndex)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BUS_GroupAIAreaCompImpl", "OverlapEnd");

	Params::BUS_GroupAIAreaCompImpl_OverlapEnd Parms{};

	Parms.OverlappedComponent = OverlappedComponent;
	Parms.OtherActor = OtherActor;
	Parms.OtherComp = OtherComp;
	Parms.OtherBodyIndex = OtherBodyIndex;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function b1-Managed.BGUCutDeathActor.PreviewPhy
// (Native, Public, BlueprintCallable)
// Parameters:
// class ABGUCharacterCS*                  OwnerChar                                              (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ABGUCutDeathActor::PreviewPhy(class ABGUCharacterCS* OwnerChar)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BGUCutDeathActor", "PreviewPhy");

	Params::BGUCutDeathActor_PreviewPhy Parms{};

	Parms.OwnerChar = OwnerChar;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function b1-Managed.BUS_LandingZoneComp.OnCollisionBeginOverlap
// (Native, Public, Private)
// Parameters:
// class UPrimitiveComponent*              OverlappedComponent                                    (ExportObject, Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// class AActor*                           OtherActor                                             (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// class UPrimitiveComponent*              OtherComp                                              (ExportObject, Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// int32                                   OtherBodyIndex                                         (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// uint8                                   bFromSweep                                             (Parm, NoDestructor, HasGetValueTypeHash)
// struct FHitResult                       SweepResult                                            (Parm, IsPlainOldData, NoDestructor)

void UBUS_LandingZoneComp::OnCollisionBeginOverlap(class UPrimitiveComponent* OverlappedComponent, class AActor* OtherActor, class UPrimitiveComponent* OtherComp, int32 OtherBodyIndex, uint8 bFromSweep, const struct FHitResult& SweepResult)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BUS_LandingZoneComp", "OnCollisionBeginOverlap");

	Params::BUS_LandingZoneComp_OnCollisionBeginOverlap Parms{};

	Parms.OverlappedComponent = OverlappedComponent;
	Parms.OtherActor = OtherActor;
	Parms.OtherComp = OtherComp;
	Parms.OtherBodyIndex = OtherBodyIndex;
	Parms.bFromSweep = bFromSweep;
	Parms.SweepResult = std::move(SweepResult);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function b1-Managed.BUS_LandingZoneComp.OnCollisionEndOverlap
// (Native, Public, Private)
// Parameters:
// class UPrimitiveComponent*              OverlappedComponent                                    (ExportObject, Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// class AActor*                           OtherActor                                             (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// class UPrimitiveComponent*              OtherComp                                              (ExportObject, Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// int32                                   OtherBodyIndex                                         (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UBUS_LandingZoneComp::OnCollisionEndOverlap(class UPrimitiveComponent* OverlappedComponent, class AActor* OtherActor, class UPrimitiveComponent* OtherComp, int32 OtherBodyIndex)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BUS_LandingZoneComp", "OnCollisionEndOverlap");

	Params::BUS_LandingZoneComp_OnCollisionEndOverlap Parms{};

	Parms.OverlappedComponent = OverlappedComponent;
	Parms.OtherActor = OtherActor;
	Parms.OtherComp = OtherComp;
	Parms.OtherBodyIndex = OtherBodyIndex;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function b1-Managed.BGUDynamicSDFGenerator.BeginPlayCS
// (Native, Event, Public, Protected, BlueprintEvent)

void ABGUDynamicSDFGenerator::BeginPlayCS()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BGUDynamicSDFGenerator", "BeginPlayCS");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function b1-Managed.BAN_GSGhost.GSNotifyCS
// (Native, Event, Public, Protected, BlueprintEvent, Const)
// Parameters:
// struct FUStGSNotifyParam                NotifyParam                                            (Parm, ZeroConstructor, IsPlainOldData, NoDestructor)

void UBAN_GSGhost::GSNotifyCS(const struct FUStGSNotifyParam& NotifyParam) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BAN_GSGhost", "GSNotifyCS");

	Params::BAN_GSGhost_GSNotifyCS Parms{};

	Parms.NotifyParam = std::move(NotifyParam);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function b1-Managed.BSNS_EnableUnitIK.OnPreviewNotifyBegin
// (Native, Event, Public, BlueprintEvent)
// Parameters:
// class UObject*                          InPlaybackContext                                      (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// int32                                   InStatus                                               (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// uint8                                   bInBackwards                                           (Parm, NoDestructor, HasGetValueTypeHash)

void UBSNS_EnableUnitIK::OnPreviewNotifyBegin(class UObject* InPlaybackContext, int32 InStatus, uint8 bInBackwards)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BSNS_EnableUnitIK", "OnPreviewNotifyBegin");

	Params::BSNS_EnableUnitIK_OnPreviewNotifyBegin Parms{};

	Parms.InPlaybackContext = InPlaybackContext;
	Parms.InStatus = InStatus;
	Parms.bInBackwards = bInBackwards;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function b1-Managed.BSNS_EnableUnitIK.OnPreviewNotifyEnd
// (Native, Event, Public, BlueprintEvent)
// Parameters:
// class UObject*                          InPlaybackContext                                      (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// int32                                   InStatus                                               (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// uint8                                   bInBackwards                                           (Parm, NoDestructor, HasGetValueTypeHash)

void UBSNS_EnableUnitIK::OnPreviewNotifyEnd(class UObject* InPlaybackContext, int32 InStatus, uint8 bInBackwards)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BSNS_EnableUnitIK", "OnPreviewNotifyEnd");

	Params::BSNS_EnableUnitIK_OnPreviewNotifyEnd Parms{};

	Parms.InPlaybackContext = InPlaybackContext;
	Parms.InStatus = InStatus;
	Parms.bInBackwards = bInBackwards;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function b1-Managed.BSNS_EnableUnitIK.OnNotifyBegin
// (Native, Event, Public, BlueprintEvent)
// Parameters:
// class UCalliopeLevelSequencePlayer*     InPlayer                                               (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// int32                                   InStatus                                               (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// uint8                                   bInBackwards                                           (Parm, NoDestructor, HasGetValueTypeHash)

void UBSNS_EnableUnitIK::OnNotifyBegin(class UCalliopeLevelSequencePlayer* InPlayer, int32 InStatus, uint8 bInBackwards)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BSNS_EnableUnitIK", "OnNotifyBegin");

	Params::BSNS_EnableUnitIK_OnNotifyBegin Parms{};

	Parms.InPlayer = InPlayer;
	Parms.InStatus = InStatus;
	Parms.bInBackwards = bInBackwards;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function b1-Managed.BSNS_EnableUnitIK.OnNotifyEnd
// (Native, Event, Public, BlueprintEvent)
// Parameters:
// class UCalliopeLevelSequencePlayer*     InPlayer                                               (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// int32                                   InStatus                                               (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// uint8                                   bInBackwards                                           (Parm, NoDestructor, HasGetValueTypeHash)

void UBSNS_EnableUnitIK::OnNotifyEnd(class UCalliopeLevelSequencePlayer* InPlayer, int32 InStatus, uint8 bInBackwards)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BSNS_EnableUnitIK", "OnNotifyEnd");

	Params::BSNS_EnableUnitIK_OnNotifyEnd Parms{};

	Parms.InPlayer = InPlayer;
	Parms.InStatus = InStatus;
	Parms.bInBackwards = bInBackwards;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function b1-Managed.BAN_GSQTESceneNotify.GSNotifyCS
// (Native, Event, Public, Protected, BlueprintEvent, Const)
// Parameters:
// struct FUStGSNotifyParam                NotifyParam                                            (Parm, ZeroConstructor, IsPlainOldData, NoDestructor)

void UBAN_GSQTESceneNotify::GSNotifyCS(const struct FUStGSNotifyParam& NotifyParam) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BAN_GSQTESceneNotify", "GSNotifyCS");

	Params::BAN_GSQTESceneNotify_GSNotifyCS Parms{};

	Parms.NotifyParam = std::move(NotifyParam);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function b1-Managed.BUS_SpawnMultiPointComp.PreviewRecordSpawnPoints
// (Native, Public, BlueprintCallable)

void UBUS_SpawnMultiPointComp::PreviewRecordSpawnPoints()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BUS_SpawnMultiPointComp", "PreviewRecordSpawnPoints");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function b1-Managed.BUS_SpawnMultiPointComp.ClearGenerateActors
// (Native, Public, BlueprintCallable)

void UBUS_SpawnMultiPointComp::ClearGenerateActors()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BUS_SpawnMultiPointComp", "ClearGenerateActors");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function b1-Managed.BUS_SpawnMultiPointComp.RecordSpawnPoints
// (Native, Public, BlueprintCallable)

void UBUS_SpawnMultiPointComp::RecordSpawnPoints()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BUS_SpawnMultiPointComp", "RecordSpawnPoints");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function b1-Managed.BUS_SpawnMultiPointComp.RunEQSQuery
// (Native, Public, BlueprintCallable)

void UBUS_SpawnMultiPointComp::RunEQSQuery()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BUS_SpawnMultiPointComp", "RunEQSQuery");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function b1-Managed.SpawnMultiPointCompFunctionBinder.OnReplenish
// (Native, Public)

void USpawnMultiPointCompFunctionBinder::OnReplenish()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SpawnMultiPointCompFunctionBinder", "OnReplenish");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function b1-Managed.BAN_GSNotifyBehaviorGraph.bIsNativeBranchingPointCS
// (Native, Event, Public, HasOutParams, BlueprintEvent, Const)
// Parameters:
// uint8                                   ReturnValue                                            (Parm, OutParm, ReturnParm, NoDestructor, HasGetValueTypeHash)

uint8 UBAN_GSNotifyBehaviorGraph::bIsNativeBranchingPointCS() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BAN_GSNotifyBehaviorGraph", "bIsNativeBranchingPointCS");

	Params::BAN_GSNotifyBehaviorGraph_bIsNativeBranchingPointCS Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function b1-Managed.BAN_GSNotifyBehaviorGraph.GSNotifyCS
// (Native, Event, Public, Protected, BlueprintEvent, Const)
// Parameters:
// struct FUStGSNotifyParam                NotifyParam                                            (Parm, ZeroConstructor, IsPlainOldData, NoDestructor)

void UBAN_GSNotifyBehaviorGraph::GSNotifyCS(const struct FUStGSNotifyParam& NotifyParam) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BAN_GSNotifyBehaviorGraph", "GSNotifyCS");

	Params::BAN_GSNotifyBehaviorGraph_GSNotifyCS Parms{};

	Parms.NotifyParam = std::move(NotifyParam);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function b1-Managed.BANS_X2_PlayDBCDataAsset.GSNotifyBeginCS
// (Native, Event, Public, Protected, BlueprintEvent, Const)
// Parameters:
// struct FUStGSNotifyParam                NotifyParam                                            (Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
// float                                   TotalDuration                                          (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UBANS_X2_PlayDBCDataAsset::GSNotifyBeginCS(const struct FUStGSNotifyParam& NotifyParam, float TotalDuration) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BANS_X2_PlayDBCDataAsset", "GSNotifyBeginCS");

	Params::BANS_X2_PlayDBCDataAsset_GSNotifyBeginCS Parms{};

	Parms.NotifyParam = std::move(NotifyParam);
	Parms.TotalDuration = TotalDuration;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function b1-Managed.BANS_X2_PlayDBCDataAsset.GSNotifyEndCS
// (Native, Event, Public, Protected, BlueprintEvent, Const)
// Parameters:
// struct FUStGSNotifyParam                NotifyParam                                            (Parm, ZeroConstructor, IsPlainOldData, NoDestructor)

void UBANS_X2_PlayDBCDataAsset::GSNotifyEndCS(const struct FUStGSNotifyParam& NotifyParam) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BANS_X2_PlayDBCDataAsset", "GSNotifyEndCS");

	Params::BANS_X2_PlayDBCDataAsset_GSNotifyEndCS Parms{};

	Parms.NotifyParam = std::move(NotifyParam);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function b1-Managed.BAN_ShowShrineMain.GSNotifyCS
// (Native, Event, Public, Protected, BlueprintEvent, Const)
// Parameters:
// struct FUStGSNotifyParam                NotifyParam                                            (Parm, ZeroConstructor, IsPlainOldData, NoDestructor)

void UBAN_ShowShrineMain::GSNotifyCS(const struct FUStGSNotifyParam& NotifyParam) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BAN_ShowShrineMain", "GSNotifyCS");

	Params::BAN_ShowShrineMain_GSNotifyCS Parms{};

	Parms.NotifyParam = std::move(NotifyParam);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function b1-Managed.BANS_PlaySkillSequence.GetSoftReferences
// (Native, Event, Public, HasOutParams, BlueprintEvent, Const)
// Parameters:
// TArray<struct FSoftObjectPath>          ReturnValue                                            (Parm, OutParm, ReturnParm)

TArray<struct FSoftObjectPath> UBANS_PlaySkillSequence::GetSoftReferences() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BANS_PlaySkillSequence", "GetSoftReferences");

	Params::BANS_PlaySkillSequence_GetSoftReferences Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function b1-Managed.BANS_PlaySkillSequence.GSNotifyBeginCS
// (Native, Event, Public, Protected, BlueprintEvent, Const)
// Parameters:
// struct FUStGSNotifyParam                NotifyParam                                            (Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
// float                                   TotalDuration                                          (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UBANS_PlaySkillSequence::GSNotifyBeginCS(const struct FUStGSNotifyParam& NotifyParam, float TotalDuration) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BANS_PlaySkillSequence", "GSNotifyBeginCS");

	Params::BANS_PlaySkillSequence_GSNotifyBeginCS Parms{};

	Parms.NotifyParam = std::move(NotifyParam);
	Parms.TotalDuration = TotalDuration;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function b1-Managed.BUS_UpdraftComp.OnActorLeave
// (Native, Public, Private)
// Parameters:
// class UPrimitiveComponent*              OverlappedComponent                                    (ExportObject, Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// class AActor*                           OtherActor                                             (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// class UPrimitiveComponent*              OtherComp                                              (ExportObject, Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// int32                                   OtherBodyIndex                                         (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UBUS_UpdraftComp::OnActorLeave(class UPrimitiveComponent* OverlappedComponent, class AActor* OtherActor, class UPrimitiveComponent* OtherComp, int32 OtherBodyIndex)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BUS_UpdraftComp", "OnActorLeave");

	Params::BUS_UpdraftComp_OnActorLeave Parms{};

	Parms.OverlappedComponent = OverlappedComponent;
	Parms.OtherActor = OtherActor;
	Parms.OtherComp = OtherComp;
	Parms.OtherBodyIndex = OtherBodyIndex;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function b1-Managed.BUS_UpdraftComp.OnActorEnter
// (Native, Public, Private)
// Parameters:
// class AActor*                           OverlappedActor                                        (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// class AActor*                           OtherActor                                             (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UBUS_UpdraftComp::OnActorEnter(class AActor* OverlappedActor, class AActor* OtherActor)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BUS_UpdraftComp", "OnActorEnter");

	Params::BUS_UpdraftComp_OnActorEnter Parms{};

	Parms.OverlappedActor = OverlappedActor;
	Parms.OtherActor = OtherActor;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function b1-Managed.BANS_GSFaBaoCastSucceed.GSNotifyBeginCS
// (Native, Event, Public, Protected, BlueprintEvent, Const)
// Parameters:
// struct FUStGSNotifyParam                NotifyParam                                            (Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
// float                                   TotalDuration                                          (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UBANS_GSFaBaoCastSucceed::GSNotifyBeginCS(const struct FUStGSNotifyParam& NotifyParam, float TotalDuration) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BANS_GSFaBaoCastSucceed", "GSNotifyBeginCS");

	Params::BANS_GSFaBaoCastSucceed_GSNotifyBeginCS Parms{};

	Parms.NotifyParam = std::move(NotifyParam);
	Parms.TotalDuration = TotalDuration;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function b1-Managed.BUAnimEquipPreview.BlueprintInitializeAnimation
// (Native, Event, Public, BlueprintEvent)

void UBUAnimEquipPreview::BlueprintInitializeAnimation()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BUAnimEquipPreview", "BlueprintInitializeAnimation");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function b1-Managed.BUAnimEquipPreview.BlueprintUpdateAnimation
// (Native, Event, Public, BlueprintEvent)
// Parameters:
// float                                   DeltaTimeX                                             (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UBUAnimEquipPreview::BlueprintUpdateAnimation(float DeltaTimeX)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BUAnimEquipPreview", "BlueprintUpdateAnimation");

	Params::BUAnimEquipPreview_BlueprintUpdateAnimation Parms{};

	Parms.DeltaTimeX = DeltaTimeX;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function b1-Managed.BUAnimEquipPreview.BlueprintBeginPlay
// (Native, Event, Public, BlueprintEvent)

void UBUAnimEquipPreview::BlueprintBeginPlay()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BUAnimEquipPreview", "BlueprintBeginPlay");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function b1-Managed.BUAnimEquipHeadPostProcess.BlueprintInitializeAnimation
// (Native, Event, Public, BlueprintEvent)

void UBUAnimEquipHeadPostProcess::BlueprintInitializeAnimation()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BUAnimEquipHeadPostProcess", "BlueprintInitializeAnimation");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function b1-Managed.BUAnimModularMesh.BlueprintThreadSafeUpdateAnimation
// (Native, Event, Public, BlueprintEvent)
// Parameters:
// float                                   DeltaTime                                              (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UBUAnimModularMesh::BlueprintThreadSafeUpdateAnimation(float DeltaTime)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BUAnimModularMesh", "BlueprintThreadSafeUpdateAnimation");

	Params::BUAnimModularMesh_BlueprintThreadSafeUpdateAnimation Parms{};

	Parms.DeltaTime = DeltaTime;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function b1-Managed.BUAnimModularMesh.BlueprintInitializeAnimation
// (Native, Event, Public, BlueprintEvent)

void UBUAnimModularMesh::BlueprintInitializeAnimation()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BUAnimModularMesh", "BlueprintInitializeAnimation");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function b1-Managed.BUS_DestructibleActorRelativeDestroyComp.BeginPlayInCS
// (Native, Event, Public, BlueprintEvent)

void UBUS_DestructibleActorRelativeDestroyComp::BeginPlayInCS()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BUS_DestructibleActorRelativeDestroyComp", "BeginPlayInCS");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function b1-Managed.BUS_SceneWindEffectActorComp.TickComponentInCS
// (Native, Event, Public, BlueprintEvent)
// Parameters:
// float                                   DeltaTime                                              (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UBUS_SceneWindEffectActorComp::TickComponentInCS(float DeltaTime)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BUS_SceneWindEffectActorComp", "TickComponentInCS");

	Params::BUS_SceneWindEffectActorComp_TickComponentInCS Parms{};

	Parms.DeltaTime = DeltaTime;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function b1-Managed.BUS_SceneWindEffectActorComp.BeginPlayInCS
// (Native, Event, Public, BlueprintEvent)

void UBUS_SceneWindEffectActorComp::BeginPlayInCS()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BUS_SceneWindEffectActorComp", "BeginPlayInCS");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function b1-Managed.BANS_FBIK_StandBar.GSNotifyBeginCS
// (Native, Event, Public, Protected, BlueprintEvent, Const)
// Parameters:
// struct FUStGSNotifyParam                NotifyParam                                            (Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
// float                                   TotalDuration                                          (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UBANS_FBIK_StandBar::GSNotifyBeginCS(const struct FUStGSNotifyParam& NotifyParam, float TotalDuration) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BANS_FBIK_StandBar", "GSNotifyBeginCS");

	Params::BANS_FBIK_StandBar_GSNotifyBeginCS Parms{};

	Parms.NotifyParam = std::move(NotifyParam);
	Parms.TotalDuration = TotalDuration;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function b1-Managed.BANS_FBIK_StandBar.GSNotifyTickCS
// (Native, Event, Public, Protected, BlueprintEvent, Const)
// Parameters:
// struct FUStGSNotifyParam                NotifyParam                                            (Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
// float                                   FrameDeltaTime                                         (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UBANS_FBIK_StandBar::GSNotifyTickCS(const struct FUStGSNotifyParam& NotifyParam, float FrameDeltaTime) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BANS_FBIK_StandBar", "GSNotifyTickCS");

	Params::BANS_FBIK_StandBar_GSNotifyTickCS Parms{};

	Parms.NotifyParam = std::move(NotifyParam);
	Parms.FrameDeltaTime = FrameDeltaTime;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function b1-Managed.BANS_FBIK_StandBar.GSNotifyEndCS
// (Native, Event, Public, Protected, BlueprintEvent, Const)
// Parameters:
// struct FUStGSNotifyParam                NotifyParam                                            (Parm, ZeroConstructor, IsPlainOldData, NoDestructor)

void UBANS_FBIK_StandBar::GSNotifyEndCS(const struct FUStGSNotifyParam& NotifyParam) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BANS_FBIK_StandBar", "GSNotifyEndCS");

	Params::BANS_FBIK_StandBar_GSNotifyEndCS Parms{};

	Parms.NotifyParam = std::move(NotifyParam);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function b1-Managed.BGUEnvironmentSurfaceEffectMgr.ReceiveBeginPlay
// (Native, Event, Public, Protected, BlueprintEvent)

void ABGUEnvironmentSurfaceEffectMgr::ReceiveBeginPlay()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BGUEnvironmentSurfaceEffectMgr", "ReceiveBeginPlay");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function b1-Managed.BGUEnvironmentSurfaceEffectMgr.ReceiveDestroyed
// (Native, Event, Public, BlueprintEvent)

void ABGUEnvironmentSurfaceEffectMgr::ReceiveDestroyed()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BGUEnvironmentSurfaceEffectMgr", "ReceiveDestroyed");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function b1-Managed.BGUEnvironmentSurfaceEffectMgr.ReceiveEndPlay
// (Native, Event, Public, Protected, BlueprintEvent)
// Parameters:
// EEndPlayReason                          EndPlayReason                                          (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ABGUEnvironmentSurfaceEffectMgr::ReceiveEndPlay(EEndPlayReason EndPlayReason)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BGUEnvironmentSurfaceEffectMgr", "ReceiveEndPlay");

	Params::BGUEnvironmentSurfaceEffectMgr_ReceiveEndPlay Parms{};

	Parms.EndPlayReason = EndPlayReason;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function b1-Managed.BGUEnvironmentSurfaceEffectMgr.ReceiveTick
// (Native, Event, Public, BlueprintEvent)
// Parameters:
// float                                   DeltaSeconds                                           (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ABGUEnvironmentSurfaceEffectMgr::ReceiveTick(float DeltaSeconds)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BGUEnvironmentSurfaceEffectMgr", "ReceiveTick");

	Params::BGUEnvironmentSurfaceEffectMgr_ReceiveTick Parms{};

	Parms.DeltaSeconds = DeltaSeconds;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function b1-Managed.BUI_LoadingScreenPreview.OnSelectionChanged
// (Native, Public, Private)
// Parameters:
// class FString                           SelectedItem                                           (Parm, ZeroConstructor, HasGetValueTypeHash)
// ESelectInfo                             SelectionType                                          (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UBUI_LoadingScreenPreview::OnSelectionChanged(const class FString& SelectedItem, ESelectInfo SelectionType)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BUI_LoadingScreenPreview", "OnSelectionChanged");

	Params::BUI_LoadingScreenPreview_OnSelectionChanged Parms{};

	Parms.SelectedItem = std::move(SelectedItem);
	Parms.SelectionType = SelectionType;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function b1-Managed.BUI_LoadingScreenPreview.OnTextCommitted
// (Native, Public, Private)
// Parameters:
// class FText                             Text                                                   (Parm)
// ETextCommit                             CommitMethod                                           (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UBUI_LoadingScreenPreview::OnTextCommitted(const class FText& Text, ETextCommit CommitMethod)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BUI_LoadingScreenPreview", "OnTextCommitted");

	Params::BUI_LoadingScreenPreview_OnTextCommitted Parms{};

	Parms.Text = std::move(Text);
	Parms.CommitMethod = CommitMethod;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function b1-Managed.BGW_OnlineActivity.OnResetAllActiveActivitiesCompleteCS
// (Native, Event, Public, Protected, BlueprintEvent)
// Parameters:
// uint8                                   bWasSuccessful                                         (Parm, NoDestructor, HasGetValueTypeHash)

void UBGW_OnlineActivity::OnResetAllActiveActivitiesCompleteCS(uint8 bWasSuccessful)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BGW_OnlineActivity", "OnResetAllActiveActivitiesCompleteCS");

	Params::BGW_OnlineActivity_OnResetAllActiveActivitiesCompleteCS Parms{};

	Parms.bWasSuccessful = bWasSuccessful;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function b1-Managed.BGW_OnlineActivity.OnSetActivityAvailabilityCompleteCS
// (Native, Event, Public, Protected, BlueprintEvent)
// Parameters:
// uint8                                   bWasSuccessful                                         (Parm, NoDestructor, HasGetValueTypeHash)

void UBGW_OnlineActivity::OnSetActivityAvailabilityCompleteCS(uint8 bWasSuccessful)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BGW_OnlineActivity", "OnSetActivityAvailabilityCompleteCS");

	Params::BGW_OnlineActivity_OnSetActivityAvailabilityCompleteCS Parms{};

	Parms.bWasSuccessful = bWasSuccessful;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function b1-Managed.BGW_OnlineActivity.OnGameActivityActivationCompleteCS
// (Native, Event, Public, Protected, BlueprintEvent)
// Parameters:
// class FString                           SActivityId                                            (Parm, ZeroConstructor, HasGetValueTypeHash)
// class FString                           SSessionStr                                            (Parm, ZeroConstructor, HasGetValueTypeHash)

void UBGW_OnlineActivity::OnGameActivityActivationCompleteCS(const class FString& SActivityId, const class FString& SSessionStr)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BGW_OnlineActivity", "OnGameActivityActivationCompleteCS");

	Params::BGW_OnlineActivity_OnGameActivityActivationCompleteCS Parms{};

	Parms.SActivityId = std::move(SActivityId);
	Parms.SSessionStr = std::move(SSessionStr);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function b1-Managed.BGW_OnlineActivity.OnSetActivityPriorityCompleteCS
// (Native, Event, Public, Protected, BlueprintEvent)
// Parameters:
// uint8                                   bWasSuccessful                                         (Parm, NoDestructor, HasGetValueTypeHash)

void UBGW_OnlineActivity::OnSetActivityPriorityCompleteCS(uint8 bWasSuccessful)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BGW_OnlineActivity", "OnSetActivityPriorityCompleteCS");

	Params::BGW_OnlineActivity_OnSetActivityPriorityCompleteCS Parms{};

	Parms.bWasSuccessful = bWasSuccessful;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function b1-Managed.BGW_OnlineActivity.OnResumeActivityCompleteCS
// (Native, Event, Public, Protected, BlueprintEvent)
// Parameters:
// uint8                                   bWasSuccessful                                         (Parm, NoDestructor, HasGetValueTypeHash)

void UBGW_OnlineActivity::OnResumeActivityCompleteCS(uint8 bWasSuccessful)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BGW_OnlineActivity", "OnResumeActivityCompleteCS");

	Params::BGW_OnlineActivity_OnResumeActivityCompleteCS Parms{};

	Parms.bWasSuccessful = bWasSuccessful;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function b1-Managed.BGW_OnlineActivity.OnStartActivityCompleteCS
// (Native, Event, Public, Protected, BlueprintEvent)
// Parameters:
// uint8                                   bWasSuccessful                                         (Parm, NoDestructor, HasGetValueTypeHash)

void UBGW_OnlineActivity::OnStartActivityCompleteCS(uint8 bWasSuccessful)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BGW_OnlineActivity", "OnStartActivityCompleteCS");

	Params::BGW_OnlineActivity_OnStartActivityCompleteCS Parms{};

	Parms.bWasSuccessful = bWasSuccessful;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function b1-Managed.BGW_OnlineActivity.OnEndActivityCompleteCS
// (Native, Event, Public, Protected, BlueprintEvent)
// Parameters:
// uint8                                   bWasSuccessful                                         (Parm, NoDestructor, HasGetValueTypeHash)

void UBGW_OnlineActivity::OnEndActivityCompleteCS(uint8 bWasSuccessful)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BGW_OnlineActivity", "OnEndActivityCompleteCS");

	Params::BGW_OnlineActivity_OnEndActivityCompleteCS Parms{};

	Parms.bWasSuccessful = bWasSuccessful;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function b1-Managed.BGW_OnlineCloud.OnWriteUserCloudFileCompleteCS
// (Native, Event, Public, Protected, BlueprintEvent)
// Parameters:
// class FString                           Filename                                               (Parm, ZeroConstructor, HasGetValueTypeHash)
// uint8                                   bWasSuccessful                                         (Parm, NoDestructor, HasGetValueTypeHash)

void UBGW_OnlineCloud::OnWriteUserCloudFileCompleteCS(const class FString& Filename, uint8 bWasSuccessful)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BGW_OnlineCloud", "OnWriteUserCloudFileCompleteCS");

	Params::BGW_OnlineCloud_OnWriteUserCloudFileCompleteCS Parms{};

	Parms.Filename = std::move(Filename);
	Parms.bWasSuccessful = bWasSuccessful;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function b1-Managed.BGW_OnlineCloud.OnEnumerateUserFilesCompleteCS
// (Native, Event, Public, Protected, BlueprintEvent)
// Parameters:
// uint8                                   bWasSuccessful                                         (Parm, NoDestructor, HasGetValueTypeHash)

void UBGW_OnlineCloud::OnEnumerateUserFilesCompleteCS(uint8 bWasSuccessful)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BGW_OnlineCloud", "OnEnumerateUserFilesCompleteCS");

	Params::BGW_OnlineCloud_OnEnumerateUserFilesCompleteCS Parms{};

	Parms.bWasSuccessful = bWasSuccessful;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function b1-Managed.BGW_OnlineCloud.OnDeleteUserFilesCompleteCS
// (Native, Event, Public, Protected, BlueprintEvent)
// Parameters:
// class FString                           Filename                                               (Parm, ZeroConstructor, HasGetValueTypeHash)
// uint8                                   bWasSuccessful                                         (Parm, NoDestructor, HasGetValueTypeHash)

void UBGW_OnlineCloud::OnDeleteUserFilesCompleteCS(const class FString& Filename, uint8 bWasSuccessful)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BGW_OnlineCloud", "OnDeleteUserFilesCompleteCS");

	Params::BGW_OnlineCloud_OnDeleteUserFilesCompleteCS Parms{};

	Parms.Filename = std::move(Filename);
	Parms.bWasSuccessful = bWasSuccessful;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function b1-Managed.BGW_OnlineCloud.OnReadUserFilesCompleteCS
// (Native, Event, Public, Protected, BlueprintEvent)
// Parameters:
// class FString                           Filename                                               (Parm, ZeroConstructor, HasGetValueTypeHash)
// uint8                                   bWasSuccessful                                         (Parm, NoDestructor, HasGetValueTypeHash)

void UBGW_OnlineCloud::OnReadUserFilesCompleteCS(const class FString& Filename, uint8 bWasSuccessful)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BGW_OnlineCloud", "OnReadUserFilesCompleteCS");

	Params::BGW_OnlineCloud_OnReadUserFilesCompleteCS Parms{};

	Parms.Filename = std::move(Filename);
	Parms.bWasSuccessful = bWasSuccessful;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function b1-Managed.BGW_OnlineIdentity.OnGetUserPrivilegeCompleteCS
// (Native, Event, Public, Protected, BlueprintEvent)
// Parameters:
// EBGWUserPrivileges                      Privilege                                              (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// EBGWPrivilegeResult                     PrivilegeResult                                        (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UBGW_OnlineIdentity::OnGetUserPrivilegeCompleteCS(EBGWUserPrivileges Privilege, EBGWPrivilegeResult PrivilegeResult)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BGW_OnlineIdentity", "OnGetUserPrivilegeCompleteCS");

	Params::BGW_OnlineIdentity_OnGetUserPrivilegeCompleteCS Parms{};

	Parms.Privilege = Privilege;
	Parms.PrivilegeResult = PrivilegeResult;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function b1-Managed.BGW_OnlineIdentity.OnRecvAntiAddictionActionCS
// (Native, Event, Public, Protected, BlueprintEvent)
// Parameters:
// class FString                           RecvActionsJsonStr                                     (Parm, ZeroConstructor, HasGetValueTypeHash)

void UBGW_OnlineIdentity::OnRecvAntiAddictionActionCS(const class FString& RecvActionsJsonStr)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BGW_OnlineIdentity", "OnRecvAntiAddictionActionCS");

	Params::BGW_OnlineIdentity_OnRecvAntiAddictionActionCS Parms{};

	Parms.RecvActionsJsonStr = std::move(RecvActionsJsonStr);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function b1-Managed.BGW_OnlineIdentity.OnLoginCompletedCS
// (Native, Event, Public, Protected, BlueprintEvent)
// Parameters:
// uint8                                   bSuccessful                                            (Parm, NoDestructor, HasGetValueTypeHash)

void UBGW_OnlineIdentity::OnLoginCompletedCS(uint8 bSuccessful)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BGW_OnlineIdentity", "OnLoginCompletedCS");

	Params::BGW_OnlineIdentity_OnLoginCompletedCS Parms{};

	Parms.bSuccessful = bSuccessful;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function b1-Managed.BGW_OnlineSession.OnSessionUserInviteAcceptedCS
// (Native, Event, Public, Protected, BlueprintEvent)
// Parameters:
// uint8                                   bWasSuccess                                            (Parm, NoDestructor, HasGetValueTypeHash)

void UBGW_OnlineSession::OnSessionUserInviteAcceptedCS(uint8 bWasSuccess)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BGW_OnlineSession", "OnSessionUserInviteAcceptedCS");

	Params::BGW_OnlineSession_OnSessionUserInviteAcceptedCS Parms{};

	Parms.bWasSuccess = bWasSuccess;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function b1-Managed.BGW_OnlineSession.OnFindSessionByIdCompleteCS
// (Native, Event, Public, Protected, BlueprintEvent)
// Parameters:
// uint8                                   Success                                                (Parm, NoDestructor, HasGetValueTypeHash)

void UBGW_OnlineSession::OnFindSessionByIdCompleteCS(uint8 Success)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BGW_OnlineSession", "OnFindSessionByIdCompleteCS");

	Params::BGW_OnlineSession_OnFindSessionByIdCompleteCS Parms{};

	Parms.Success = Success;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function b1-Managed.BGW_OnlineSession.OnDestroySessionCompleteCS
// (Native, Event, Public, Protected, BlueprintEvent)
// Parameters:
// EBGWOnlineSessionType                   SessionType                                            (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// uint8                                   Success                                                (Parm, NoDestructor, HasGetValueTypeHash)

void UBGW_OnlineSession::OnDestroySessionCompleteCS(EBGWOnlineSessionType SessionType, uint8 Success)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BGW_OnlineSession", "OnDestroySessionCompleteCS");

	Params::BGW_OnlineSession_OnDestroySessionCompleteCS Parms{};

	Parms.SessionType = SessionType;
	Parms.Success = Success;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function b1-Managed.BGW_OnlineSession.OnSearchSessionsCompleteCS
// (Native, Event, Public, Protected, BlueprintEvent)
// Parameters:
// uint8                                   Success                                                (Parm, NoDestructor, HasGetValueTypeHash)

void UBGW_OnlineSession::OnSearchSessionsCompleteCS(uint8 Success)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BGW_OnlineSession", "OnSearchSessionsCompleteCS");

	Params::BGW_OnlineSession_OnSearchSessionsCompleteCS Parms{};

	Parms.Success = Success;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function b1-Managed.BGW_OnlineSession.OnSessionInviteReceivedCS
// (Native, Event, Public, Protected, BlueprintEvent)

void UBGW_OnlineSession::OnSessionInviteReceivedCS()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BGW_OnlineSession", "OnSessionInviteReceivedCS");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function b1-Managed.BGW_OnlineSession.OnCreateSessionCompleteCS
// (Native, Event, Public, Protected, BlueprintEvent)
// Parameters:
// uint8                                   Success                                                (Parm, NoDestructor, HasGetValueTypeHash)

void UBGW_OnlineSession::OnCreateSessionCompleteCS(uint8 Success)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BGW_OnlineSession", "OnCreateSessionCompleteCS");

	Params::BGW_OnlineSession_OnCreateSessionCompleteCS Parms{};

	Parms.Success = Success;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function b1-Managed.BGW_OnlineSession.OnJoinSessionCompleteCS
// (Native, Event, Public, Protected, BlueprintEvent)
// Parameters:
// EBGWJoinSessionResult                   Result                                                 (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UBGW_OnlineSession::OnJoinSessionCompleteCS(EBGWJoinSessionResult Result)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BGW_OnlineSession", "OnJoinSessionCompleteCS");

	Params::BGW_OnlineSession_OnJoinSessionCompleteCS Parms{};

	Parms.Result = Result;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function b1-Managed.BAN_GSSetCustomDepthStencil.GSNotifyCS
// (Native, Event, Public, Protected, BlueprintEvent, Const)
// Parameters:
// struct FUStGSNotifyParam                NotifyParam                                            (Parm, ZeroConstructor, IsPlainOldData, NoDestructor)

void UBAN_GSSetCustomDepthStencil::GSNotifyCS(const struct FUStGSNotifyParam& NotifyParam) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BAN_GSSetCustomDepthStencil", "GSNotifyCS");

	Params::BAN_GSSetCustomDepthStencil_GSNotifyCS Parms{};

	Parms.NotifyParam = std::move(NotifyParam);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function b1-Managed.BED_MovieNode_ManipulateStreamingSource.GetNodeDescriptionInCS
// (Native, Event, Public, HasOutParams, BlueprintEvent, Const)
// Parameters:
// class FString                           ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash)

class FString UBED_MovieNode_ManipulateStreamingSource::GetNodeDescriptionInCS() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BED_MovieNode_ManipulateStreamingSource", "GetNodeDescriptionInCS");

	Params::BED_MovieNode_ManipulateStreamingSource_GetNodeDescriptionInCS Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function b1-Managed.BANS_GSAttackState.GSOnSectionManuallyChanged
// (Native, Event, Public, BlueprintEvent, Const)
// Parameters:
// class ABGUCharacter*                    OwnerChar                                              (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// float                                   RemainingDuration                                      (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UBANS_GSAttackState::GSOnSectionManuallyChanged(class ABGUCharacter* OwnerChar, float RemainingDuration) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BANS_GSAttackState", "GSOnSectionManuallyChanged");

	Params::BANS_GSAttackState_GSOnSectionManuallyChanged Parms{};

	Parms.OwnerChar = OwnerChar;
	Parms.RemainingDuration = RemainingDuration;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function b1-Managed.BANS_GSAttackState.GSAllowCrossSection
// (Native, Event, Public, HasOutParams, BlueprintEvent, Const)
// Parameters:
// uint8                                   ReturnValue                                            (Parm, OutParm, ReturnParm, NoDestructor, HasGetValueTypeHash)

uint8 UBANS_GSAttackState::GSAllowCrossSection() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BANS_GSAttackState", "GSAllowCrossSection");

	Params::BANS_GSAttackState_GSAllowCrossSection Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function b1-Managed.BANS_GSAttackState.GSNotifyBeginCS
// (Native, Event, Public, Protected, BlueprintEvent, Const)
// Parameters:
// struct FUStGSNotifyParam                NotifyParam                                            (Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
// float                                   TotalDuration                                          (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UBANS_GSAttackState::GSNotifyBeginCS(const struct FUStGSNotifyParam& NotifyParam, float TotalDuration) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BANS_GSAttackState", "GSNotifyBeginCS");

	Params::BANS_GSAttackState_GSNotifyBeginCS Parms{};

	Parms.NotifyParam = std::move(NotifyParam);
	Parms.TotalDuration = TotalDuration;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function b1-Managed.BANS_GSAttackState.GSNotifyEndCS
// (Native, Event, Public, Protected, BlueprintEvent, Const)
// Parameters:
// struct FUStGSNotifyParam                NotifyParam                                            (Parm, ZeroConstructor, IsPlainOldData, NoDestructor)

void UBANS_GSAttackState::GSNotifyEndCS(const struct FUStGSNotifyParam& NotifyParam) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BANS_GSAttackState", "GSNotifyEndCS");

	Params::BANS_GSAttackState_GSNotifyEndCS Parms{};

	Parms.NotifyParam = std::move(NotifyParam);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function b1-Managed.BED_ProcessMachineNode_ReportOSS.GetNodeDescriptionInCS
// (Native, Event, Public, HasOutParams, BlueprintEvent, Const)
// Parameters:
// class FString                           ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash)

class FString UBED_ProcessMachineNode_ReportOSS::GetNodeDescriptionInCS() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BED_ProcessMachineNode_ReportOSS", "GetNodeDescriptionInCS");

	Params::BED_ProcessMachineNode_ReportOSS_GetNodeDescriptionInCS Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function b1-Managed.BED_QuestNode_ChallengeSuccess.GetNodeDescriptionInCS
// (Native, Event, Public, HasOutParams, BlueprintEvent, Const)
// Parameters:
// class FString                           ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash)

class FString UBED_QuestNode_ChallengeSuccess::GetNodeDescriptionInCS() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BED_QuestNode_ChallengeSuccess", "GetNodeDescriptionInCS");

	Params::BED_QuestNode_ChallengeSuccess_GetNodeDescriptionInCS Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function b1-Managed.BED_QuestNode_SetInteractState.GetNodeDescriptionInCS
// (Native, Event, Public, HasOutParams, BlueprintEvent, Const)
// Parameters:
// class FString                           ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash)

class FString UBED_QuestNode_SetInteractState::GetNodeDescriptionInCS() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BED_QuestNode_SetInteractState", "GetNodeDescriptionInCS");

	Params::BED_QuestNode_SetInteractState_GetNodeDescriptionInCS Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function b1-Managed.BED_QuestNode_StopWaveSpawnByChallenge.GetNodeDescriptionInCS
// (Native, Event, Public, HasOutParams, BlueprintEvent, Const)
// Parameters:
// class FString                           ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash)

class FString UBED_QuestNode_StopWaveSpawnByChallenge::GetNodeDescriptionInCS() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BED_QuestNode_StopWaveSpawnByChallenge", "GetNodeDescriptionInCS");

	Params::BED_QuestNode_StopWaveSpawnByChallenge_GetNodeDescriptionInCS Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function b1-Managed.BED_BehaviorNode_BeHurt.GetNodeDescriptionInCS
// (Native, Event, Public, HasOutParams, BlueprintEvent, Const)
// Parameters:
// class FString                           ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash)

class FString UBED_BehaviorNode_BeHurt::GetNodeDescriptionInCS() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BED_BehaviorNode_BeHurt", "GetNodeDescriptionInCS");

	Params::BED_BehaviorNode_BeHurt_GetNodeDescriptionInCS Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function b1-Managed.BED_BehaviorNode_BeHurt.IsSupportViewType
// (Native, Event, Public, HasOutParams, BlueprintEvent, Const)
// Parameters:
// ECalliopeViewType                       InViewType                                             (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// uint8                                   ReturnValue                                            (Parm, OutParm, ReturnParm, NoDestructor, HasGetValueTypeHash)

uint8 UBED_BehaviorNode_BeHurt::IsSupportViewType(const ECalliopeViewType& InViewType) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BED_BehaviorNode_BeHurt", "IsSupportViewType");

	Params::BED_BehaviorNode_BeHurt_IsSupportViewType Parms{};

	Parms.InViewType = InViewType;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function b1-Managed.BED_ProcessStateNode_ObserveRoleData.GetNodeDescriptionInCS
// (Native, Event, Public, HasOutParams, BlueprintEvent, Const)
// Parameters:
// class FString                           ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash)

class FString UBED_ProcessStateNode_ObserveRoleData::GetNodeDescriptionInCS() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BED_ProcessStateNode_ObserveRoleData", "GetNodeDescriptionInCS");

	Params::BED_ProcessStateNode_ObserveRoleData_GetNodeDescriptionInCS Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function b1-Managed.BANS_GSCallMultiPointsRegister.GSNotifyBeginCS
// (Native, Event, Public, Protected, BlueprintEvent, Const)
// Parameters:
// struct FUStGSNotifyParam                NotifyParam                                            (Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
// float                                   TotalDuration                                          (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UBANS_GSCallMultiPointsRegister::GSNotifyBeginCS(const struct FUStGSNotifyParam& NotifyParam, float TotalDuration) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BANS_GSCallMultiPointsRegister", "GSNotifyBeginCS");

	Params::BANS_GSCallMultiPointsRegister_GSNotifyBeginCS Parms{};

	Parms.NotifyParam = std::move(NotifyParam);
	Parms.TotalDuration = TotalDuration;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function b1-Managed.GSImage.SetCommParams
// (Native, Public, BlueprintCallable)
// Parameters:
// struct FMatCommParams                   InCommParams                                           (Parm, NoDestructor, HasGetValueTypeHash)

void UGSImage::SetCommParams(const struct FMatCommParams& InCommParams)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GSImage", "SetCommParams");

	Params::GSImage_SetCommParams Parms{};

	Parms.InCommParams = std::move(InCommParams);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function b1-Managed.GSImage.GSOnConstruct
// (Native, Public, BlueprintCallable)

void UGSImage::GSOnConstruct()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GSImage", "GSOnConstruct");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function b1-Managed.GSImage.SetUseTimer
// (Native, Public, BlueprintCallable)
// Parameters:
// uint8                                   InUseTimer                                             (Parm, NoDestructor, HasGetValueTypeHash)

void UGSImage::SetUseTimer(uint8 InUseTimer)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GSImage", "SetUseTimer");

	Params::GSImage_SetUseTimer Parms{};

	Parms.InUseTimer = InUseTimer;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function b1-Managed.GSScrollBox.OnMouseEnter
// (BlueprintCosmetic, Native, Event, Public, BlueprintEvent)
// Parameters:
// struct FGeometry                        MyGeometry                                             (Parm, IsPlainOldData, NoDestructor)
// struct FPointerEvent                    MouseEvent                                             (ConstParm, Parm, OutParm, ReferenceParm)

void b1MinusManaged::UGSScrollBox::OnMouseEnter(const struct FGeometry& MyGeometry, const struct FPointerEvent& MouseEvent)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GSScrollBox", "OnMouseEnter");

	Params::GSScrollBox_OnMouseEnter Parms{};

	Parms.MyGeometry = std::move(MyGeometry);
	Parms.MouseEvent = std::move(MouseEvent);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function b1-Managed.GSScrollBox.OnMouseLeave
// (BlueprintCosmetic, Native, Event, Public, BlueprintEvent)
// Parameters:
// struct FPointerEvent                    MouseEvent                                             (ConstParm, Parm, OutParm, ReferenceParm)

void b1MinusManaged::UGSScrollBox::OnMouseLeave(const struct FPointerEvent& MouseEvent)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GSScrollBox", "OnMouseLeave");

	Params::GSScrollBox_OnMouseLeave Parms{};

	Parms.MouseEvent = std::move(MouseEvent);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function b1-Managed.GSScrollBox.ScrollOffsetChanged
// (Native, Public, Private)
// Parameters:
// float                                   CurrentOffset                                          (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void b1MinusManaged::UGSScrollBox::ScrollOffsetChanged(float CurrentOffset)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GSScrollBox", "ScrollOffsetChanged");

	Params::GSScrollBox_ScrollOffsetChanged Parms{};

	Parms.CurrentOffset = CurrentOffset;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function b1-Managed.B1OnlineSessionCS.HandleDisconnectCS
// (Native, Event, Public, BlueprintEvent)
// Parameters:
// class UWorld*                           World                                                  (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// class UNetDriver*                       NetDriver                                              (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UB1OnlineSessionCS::HandleDisconnectCS(class UWorld* World, class UNetDriver* NetDriver)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("B1OnlineSessionCS", "HandleDisconnectCS");

	Params::B1OnlineSessionCS_HandleDisconnectCS Parms{};

	Parms.World = World;
	Parms.NetDriver = NetDriver;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function b1-Managed.B1ReplicationGraphNode_ClientAlwaysRelevant.GatherActorListsForConnectionCS
// (Native, Event, Public, BlueprintEvent)
// Parameters:
// class APlayerController*                PlayerController                                       (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UB1ReplicationGraphNode_ClientAlwaysRelevant::GatherActorListsForConnectionCS(class APlayerController* PlayerController)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("B1ReplicationGraphNode_ClientAlwaysRelevant", "GatherActorListsForConnectionCS");

	Params::B1ReplicationGraphNode_ClientAlwaysRelevant_GatherActorListsForConnectionCS Parms{};

	Parms.PlayerController = PlayerController;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function b1-Managed.B1ReplicationGraphNode_ClientAlwaysRelevant.NotifyRemoveNetworkActorCS
// (Native, Event, Public, HasOutParams, BlueprintEvent)
// Parameters:
// class AActor*                           Actor                                                  (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// uint8                                   bWarnIfNotFound                                        (Parm, NoDestructor, HasGetValueTypeHash)
// uint8                                   ReturnValue                                            (Parm, OutParm, ReturnParm, NoDestructor, HasGetValueTypeHash)

uint8 UB1ReplicationGraphNode_ClientAlwaysRelevant::NotifyRemoveNetworkActorCS(class AActor* Actor, uint8 bWarnIfNotFound)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("B1ReplicationGraphNode_ClientAlwaysRelevant", "NotifyRemoveNetworkActorCS");

	Params::B1ReplicationGraphNode_ClientAlwaysRelevant_NotifyRemoveNetworkActorCS Parms{};

	Parms.Actor = Actor;
	Parms.bWarnIfNotFound = bWarnIfNotFound;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function b1-Managed.B1ReplicationGraphNode_ClientAlwaysRelevant.NotifyAddNetworkActorCS
// (Native, Event, Public, BlueprintEvent)
// Parameters:
// class AActor*                           Actor                                                  (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UB1ReplicationGraphNode_ClientAlwaysRelevant::NotifyAddNetworkActorCS(class AActor* Actor)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("B1ReplicationGraphNode_ClientAlwaysRelevant", "NotifyAddNetworkActorCS");

	Params::B1ReplicationGraphNode_ClientAlwaysRelevant_NotifyAddNetworkActorCS Parms{};

	Parms.Actor = Actor;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function b1-Managed.BANS_GSSetSkillSuperArmor.GSAllowCrossSection
// (Native, Event, Public, HasOutParams, BlueprintEvent, Const)
// Parameters:
// uint8                                   ReturnValue                                            (Parm, OutParm, ReturnParm, NoDestructor, HasGetValueTypeHash)

uint8 UBANS_GSSetSkillSuperArmor::GSAllowCrossSection() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BANS_GSSetSkillSuperArmor", "GSAllowCrossSection");

	Params::BANS_GSSetSkillSuperArmor_GSAllowCrossSection Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function b1-Managed.BANS_GSSetSkillSuperArmor.UpdateSkillSuperArmorLevelInfo
// (Native, Public, Private, HasOutParams, BlueprintCallable, Const)
// Parameters:
// uint8                                   ReturnValue                                            (Parm, OutParm, ReturnParm, NoDestructor, HasGetValueTypeHash)

uint8 UBANS_GSSetSkillSuperArmor::UpdateSkillSuperArmorLevelInfo() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BANS_GSSetSkillSuperArmor", "UpdateSkillSuperArmorLevelInfo");

	Params::BANS_GSSetSkillSuperArmor_UpdateSkillSuperArmorLevelInfo Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function b1-Managed.BANS_GSSetSkillSuperArmor.GSNotifyBeginCS
// (Native, Event, Public, Protected, BlueprintEvent, Const)
// Parameters:
// struct FUStGSNotifyParam                NotifyParam                                            (Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
// float                                   TotalDuration                                          (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UBANS_GSSetSkillSuperArmor::GSNotifyBeginCS(const struct FUStGSNotifyParam& NotifyParam, float TotalDuration) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BANS_GSSetSkillSuperArmor", "GSNotifyBeginCS");

	Params::BANS_GSSetSkillSuperArmor_GSNotifyBeginCS Parms{};

	Parms.NotifyParam = std::move(NotifyParam);
	Parms.TotalDuration = TotalDuration;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function b1-Managed.BANS_GSSetSkillSuperArmor.GSNotifyEndCS
// (Native, Event, Public, Protected, BlueprintEvent, Const)
// Parameters:
// struct FUStGSNotifyParam                NotifyParam                                            (Parm, ZeroConstructor, IsPlainOldData, NoDestructor)

void UBANS_GSSetSkillSuperArmor::GSNotifyEndCS(const struct FUStGSNotifyParam& NotifyParam) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BANS_GSSetSkillSuperArmor", "GSNotifyEndCS");

	Params::BANS_GSSetSkillSuperArmor_GSNotifyEndCS Parms{};

	Parms.NotifyParam = std::move(NotifyParam);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function b1-Managed.B1ReplicationGraphNode_PlayerRelatedActor.GatherActorListsForConnectionCS
// (Native, Event, Public, BlueprintEvent)
// Parameters:
// class APlayerController*                PlayerController                                       (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UB1ReplicationGraphNode_PlayerRelatedActor::GatherActorListsForConnectionCS(class APlayerController* PlayerController)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("B1ReplicationGraphNode_PlayerRelatedActor", "GatherActorListsForConnectionCS");

	Params::B1ReplicationGraphNode_PlayerRelatedActor_GatherActorListsForConnectionCS Parms{};

	Parms.PlayerController = PlayerController;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function b1-Managed.B1ReplicationGraphOnline.ShouldServerMultiCastRPCForPlayerCS
// (Native, Event, Public, HasOutParams, BlueprintEvent)
// Parameters:
// class APlayerController*                Controller                                             (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// class AActor*                           Actor                                                  (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// int64                                   FuncAddr                                               (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// uint8                                   ReturnValue                                            (Parm, OutParm, ReturnParm, NoDestructor, HasGetValueTypeHash)

uint8 UB1ReplicationGraphOnline::ShouldServerMultiCastRPCForPlayerCS(class APlayerController* Controller, class AActor* Actor, int64 FuncAddr)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("B1ReplicationGraphOnline", "ShouldServerMultiCastRPCForPlayerCS");

	Params::B1ReplicationGraphOnline_ShouldServerMultiCastRPCForPlayerCS Parms{};

	Parms.Controller = Controller;
	Parms.Actor = Actor;
	Parms.FuncAddr = FuncAddr;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function b1-Managed.B1ReplicationGraphOnline.InitGlobalActorClassSettingsCS
// (Native, Event, Public, BlueprintEvent)

void UB1ReplicationGraphOnline::InitGlobalActorClassSettingsCS()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("B1ReplicationGraphOnline", "InitGlobalActorClassSettingsCS");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function b1-Managed.B1ReplicationGraphOnline.InitConnectionGraphNodesCS
// (Native, Event, Public, BlueprintEvent)
// Parameters:
// class UNetReplicationGraphConnection*   RepGraphConnection                                     (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UB1ReplicationGraphOnline::InitConnectionGraphNodesCS(class UNetReplicationGraphConnection* RepGraphConnection)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("B1ReplicationGraphOnline", "InitConnectionGraphNodesCS");

	Params::B1ReplicationGraphOnline_InitConnectionGraphNodesCS Parms{};

	Parms.RepGraphConnection = RepGraphConnection;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function b1-Managed.B1ReplicationGraphOnline.RemoveNetworkActorCS
// (Native, Event, Public, BlueprintEvent)
// Parameters:
// class AActor*                           Actor                                                  (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UB1ReplicationGraphOnline::RemoveNetworkActorCS(class AActor* Actor)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("B1ReplicationGraphOnline", "RemoveNetworkActorCS");

	Params::B1ReplicationGraphOnline_RemoveNetworkActorCS Parms{};

	Parms.Actor = Actor;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function b1-Managed.B1ReplicationGraphOnline.GSNetworkRemapPathCS
// (Native, Event, Public, HasOutParams, BlueprintEvent)
// Parameters:
// class UObject*                          Outer_0                                                (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// class FString                           OriginName                                             (Parm, ZeroConstructor, HasGetValueTypeHash)
// class FString                           Name_0                                                 (Parm, OutParm, ZeroConstructor, HasGetValueTypeHash)

void UB1ReplicationGraphOnline::GSNetworkRemapPathCS(class UObject* Outer_0, const class FString& OriginName, class FString* Name_0)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("B1ReplicationGraphOnline", "GSNetworkRemapPathCS");

	Params::B1ReplicationGraphOnline_GSNetworkRemapPathCS Parms{};

	Parms.Outer_0 = Outer_0;
	Parms.OriginName = std::move(OriginName);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	if (Name_0 != nullptr)
		*Name_0 = std::move(Parms.Name_0);
}


// Function b1-Managed.B1ReplicationGraphOnline.AddNetworkActorCS
// (Native, Event, Public, BlueprintEvent)
// Parameters:
// class AActor*                           Actor                                                  (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UB1ReplicationGraphOnline::AddNetworkActorCS(class AActor* Actor)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("B1ReplicationGraphOnline", "AddNetworkActorCS");

	Params::B1ReplicationGraphOnline_AddNetworkActorCS Parms{};

	Parms.Actor = Actor;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function b1-Managed.BED_BehaviorNode_CastSkill.GetNodeDescriptionInCS
// (Native, Event, Public, HasOutParams, BlueprintEvent, Const)
// Parameters:
// class FString                           ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash)

class FString UBED_BehaviorNode_CastSkill::GetNodeDescriptionInCS() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BED_BehaviorNode_CastSkill", "GetNodeDescriptionInCS");

	Params::BED_BehaviorNode_CastSkill_GetNodeDescriptionInCS Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function b1-Managed.MovieNodeInstance_PlayerBlendPosition.OnBlendPositionTimeout
// (Native, Public, Private)

void UMovieNodeInstance_PlayerBlendPosition::OnBlendPositionTimeout()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MovieNodeInstance_PlayerBlendPosition", "OnBlendPositionTimeout");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function b1-Managed.BGW_WorldSettings.ReceiveDestroyed
// (Native, Event, Public, BlueprintEvent)

void ABGW_WorldSettings::ReceiveDestroyed()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BGW_WorldSettings", "ReceiveDestroyed");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function b1-Managed.BGW_WorldSettings.OnLevelPreSave
// (Native, Public, Private)
// Parameters:
// class ULevel*                           Level                                                  (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// class UWorld*                           World                                                  (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ABGW_WorldSettings::OnLevelPreSave(class ULevel* Level, class UWorld* World)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BGW_WorldSettings", "OnLevelPreSave");

	Params::BGW_WorldSettings_OnLevelPreSave Parms{};

	Parms.Level = Level;
	Parms.World = World;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function b1-Managed.BED_BehaviorNode_EnterState.GetNodeDescriptionInCS
// (Native, Event, Public, HasOutParams, BlueprintEvent, Const)
// Parameters:
// class FString                           ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash)

class FString UBED_BehaviorNode_EnterState::GetNodeDescriptionInCS() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BED_BehaviorNode_EnterState", "GetNodeDescriptionInCS");

	Params::BED_BehaviorNode_EnterState_GetNodeDescriptionInCS Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function b1-Managed.BED_BehaviorNode_EnterState.IsSupportViewType
// (Native, Event, Public, HasOutParams, BlueprintEvent, Const)
// Parameters:
// ECalliopeViewType                       InViewType                                             (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// uint8                                   ReturnValue                                            (Parm, OutParm, ReturnParm, NoDestructor, HasGetValueTypeHash)

uint8 UBED_BehaviorNode_EnterState::IsSupportViewType(const ECalliopeViewType& InViewType) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BED_BehaviorNode_EnterState", "IsSupportViewType");

	Params::BED_BehaviorNode_EnterState_IsSupportViewType Parms{};

	Parms.InViewType = InViewType;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function b1-Managed.QuestTimerFuncBinder.OnCompletion
// (Native, Public, Protected)

void UQuestTimerFuncBinder::OnCompletion()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("QuestTimerFuncBinder", "OnCompletion");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function b1-Managed.QuestTimerFuncBinder.OnStep
// (Native, Public, Protected)

void UQuestTimerFuncBinder::OnStep()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("QuestTimerFuncBinder", "OnStep");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function b1-Managed.GSEQT_FlyPathFinding.OnPropertyChanged
// (Native, Event, Public, BlueprintEvent)
// Parameters:
// class FString                           MemberName                                             (Parm, ZeroConstructor, HasGetValueTypeHash)
// class FString                           PropertyName                                           (Parm, ZeroConstructor, HasGetValueTypeHash)

void UGSEQT_FlyPathFinding::OnPropertyChanged(const class FString& MemberName, const class FString& PropertyName)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GSEQT_FlyPathFinding", "OnPropertyChanged");

	Params::GSEQT_FlyPathFinding_OnPropertyChanged Parms{};

	Parms.MemberName = std::move(MemberName);
	Parms.PropertyName = std::move(PropertyName);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function b1-Managed.GSEQT_FlyPathFinding.ShouldUseCustomItemScore
// (Native, Event, Public, HasOutParams, BlueprintEvent, Const)
// Parameters:
// uint8                                   ReturnValue                                            (Parm, OutParm, ReturnParm, NoDestructor, HasGetValueTypeHash)

uint8 UGSEQT_FlyPathFinding::ShouldUseCustomItemScore() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GSEQT_FlyPathFinding", "ShouldUseCustomItemScore");

	Params::GSEQT_FlyPathFinding_ShouldUseCustomItemScore Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function b1-Managed.GSEQT_FlyPathFinding.ProcessCustomItemScoreCS
// (Native, Event, Public, BlueprintEvent, Const)
// Parameters:
// struct FGSEnvQueryTestItem              Item                                                   (ConstParm, Parm, OutParm, ReferenceParm)

void UGSEQT_FlyPathFinding::ProcessCustomItemScoreCS(const struct FGSEnvQueryTestItem& Item) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GSEQT_FlyPathFinding", "ProcessCustomItemScoreCS");

	Params::GSEQT_FlyPathFinding_ProcessCustomItemScoreCS Parms{};

	Parms.Item = std::move(Item);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function b1-Managed.GSEQT_FlyPathFinding.GetDescriptionDetailsCS
// (Native, Event, Public, HasOutParams, BlueprintEvent, Const)
// Parameters:
// class FString                           ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash)

class FString UGSEQT_FlyPathFinding::GetDescriptionDetailsCS() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GSEQT_FlyPathFinding", "GetDescriptionDetailsCS");

	Params::GSEQT_FlyPathFinding_GetDescriptionDetailsCS Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function b1-Managed.GSEQT_FlyPathFinding.GetDescriptionTitleCS
// (Native, Event, Public, HasOutParams, BlueprintEvent, Const)
// Parameters:
// class FString                           ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash)

class FString UGSEQT_FlyPathFinding::GetDescriptionTitleCS() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GSEQT_FlyPathFinding", "GetDescriptionTitleCS");

	Params::GSEQT_FlyPathFinding_GetDescriptionTitleCS Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function b1-Managed.GSEQT_FlyPathFinding.ShouldPrepareContext
// (Native, Event, Public, HasOutParams, BlueprintEvent, Const)
// Parameters:
// uint8                                   ReturnValue                                            (Parm, OutParm, ReturnParm, NoDestructor, HasGetValueTypeHash)

uint8 UGSEQT_FlyPathFinding::ShouldPrepareContext() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GSEQT_FlyPathFinding", "ShouldPrepareContext");

	Params::GSEQT_FlyPathFinding_ShouldPrepareContext Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function b1-Managed.GSEQT_FlyPathFinding.PostProcessItems
// (Native, Event, Public, BlueprintEvent, Const)

void UGSEQT_FlyPathFinding::PostProcessItems() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GSEQT_FlyPathFinding", "PostProcessItems");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function b1-Managed.GSEQT_FlyPathFinding.PreProcessItems
// (Native, Event, Public, BlueprintEvent, Const)
// Parameters:
// TArray<class AActor*>                   ContextActors                                          (ConstParm, Parm, OutParm, ReferenceParm)
// TArray<struct FVector>                  ContextLocations                                       (ConstParm, Parm, OutParm, ReferenceParm)

void UGSEQT_FlyPathFinding::PreProcessItems(const TArray<class AActor*>& ContextActors, const TArray<struct FVector>& ContextLocations) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GSEQT_FlyPathFinding", "PreProcessItems");

	Params::GSEQT_FlyPathFinding_PreProcessItems Parms{};

	Parms.ContextActors = std::move(ContextActors);
	Parms.ContextLocations = std::move(ContextLocations);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function b1-Managed.BUAnimQuadruped.BlueprintThreadSafeUpdateAnimation
// (Native, Event, Public, BlueprintEvent)
// Parameters:
// float                                   DeltaTime                                              (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UBUAnimQuadruped::BlueprintThreadSafeUpdateAnimation(float DeltaTime)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BUAnimQuadruped", "BlueprintThreadSafeUpdateAnimation");

	Params::BUAnimQuadruped_BlueprintThreadSafeUpdateAnimation Parms{};

	Parms.DeltaTime = DeltaTime;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function b1-Managed.BED_MovieNode_PlayerLockTarget.GetNodeDescriptionInCS
// (Native, Event, Public, HasOutParams, BlueprintEvent, Const)
// Parameters:
// class FString                           ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash)

class FString UBED_MovieNode_PlayerLockTarget::GetNodeDescriptionInCS() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BED_MovieNode_PlayerLockTarget", "GetNodeDescriptionInCS");

	Params::BED_MovieNode_PlayerLockTarget_GetNodeDescriptionInCS Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function b1-Managed.BGUChapterSurpriseActor.ReceiveTick
// (Native, Event, Public, BlueprintEvent)
// Parameters:
// float                                   DeltaSeconds                                           (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ABGUChapterSurpriseActor::ReceiveTick(float DeltaSeconds)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BGUChapterSurpriseActor", "ReceiveTick");

	Params::BGUChapterSurpriseActor_ReceiveTick Parms{};

	Parms.DeltaSeconds = DeltaSeconds;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function b1-Managed.BGUChapterSurpriseActor.OnConstructionCS
// (Native, Public, BlueprintCallable)

void ABGUChapterSurpriseActor::OnConstructionCS()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BGUChapterSurpriseActor", "OnConstructionCS");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function b1-Managed.BGUFuncLibProceduralMap.BuildProceduralDungeonsInfo
// (Native, Static, Public, HasOutParams, BlueprintCallable)
// Parameters:
// struct FMapProceduralInfo               MapInfo                                                (Parm, OutParm, ReferenceParm, HasGetValueTypeHash)
// uint8                                   ReturnValue                                            (Parm, OutParm, ReturnParm, NoDestructor, HasGetValueTypeHash)

uint8 UBGUFuncLibProceduralMap::BuildProceduralDungeonsInfo(struct FMapProceduralInfo& MapInfo)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("BGUFuncLibProceduralMap", "BuildProceduralDungeonsInfo");

	Params::BGUFuncLibProceduralMap_BuildProceduralDungeonsInfo Parms{};

	Parms.MapInfo = std::move(MapInfo);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	MapInfo = std::move(Parms.MapInfo);

	return Parms.ReturnValue;
}


// Function b1-Managed.BGUFuncLibProceduralMap.GenerateProceduralMapData
// (Native, Static, Public, HasOutParams, BlueprintCallable)
// Parameters:
// struct FMapProceduralInfo               MapInfo                                                (Parm, OutParm, ReferenceParm, HasGetValueTypeHash)
// uint8                                   ReturnValue                                            (Parm, OutParm, ReturnParm, NoDestructor, HasGetValueTypeHash)

uint8 UBGUFuncLibProceduralMap::GenerateProceduralMapData(struct FMapProceduralInfo& MapInfo)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("BGUFuncLibProceduralMap", "GenerateProceduralMapData");

	Params::BGUFuncLibProceduralMap_GenerateProceduralMapData Parms{};

	Parms.MapInfo = std::move(MapInfo);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	MapInfo = std::move(Parms.MapInfo);

	return Parms.ReturnValue;
}


// Function b1-Managed.BGUFuncLibProceduralMap.BuildWildernessLinearInfo
// (Native, Static, Public, HasOutParams, BlueprintCallable)
// Parameters:
// struct FMapProceduralInfo               MapInfo                                                (Parm, OutParm, ReferenceParm, HasGetValueTypeHash)
// uint8                                   ReturnValue                                            (Parm, OutParm, ReturnParm, NoDestructor, HasGetValueTypeHash)

uint8 UBGUFuncLibProceduralMap::BuildWildernessLinearInfo(struct FMapProceduralInfo& MapInfo)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("BGUFuncLibProceduralMap", "BuildWildernessLinearInfo");

	Params::BGUFuncLibProceduralMap_BuildWildernessLinearInfo Parms{};

	Parms.MapInfo = std::move(MapInfo);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	MapInfo = std::move(Parms.MapInfo);

	return Parms.ReturnValue;
}


// Function b1-Managed.BGUFuncLibProceduralMap.InitProceduralMapConfig
// (Native, Static, Public, HasOutParams, BlueprintCallable)
// Parameters:
// class UBGWProceduralMapConfigDataAsset* MapConfigDataAsset                                     (Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// class UBGWProceduralMapBlockMappingDataAsset*MapBlockMappingInfo                                    (Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// class UBGWCustomLightConfigDataAsset*   MapLightInfo                                           (Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// struct FMapProceduralInfo               MapInfo                                                (Parm, OutParm, HasGetValueTypeHash)

void UBGUFuncLibProceduralMap::InitProceduralMapConfig(class UBGWProceduralMapConfigDataAsset*& MapConfigDataAsset, class UBGWProceduralMapBlockMappingDataAsset*& MapBlockMappingInfo, class UBGWCustomLightConfigDataAsset*& MapLightInfo, struct FMapProceduralInfo* MapInfo)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("BGUFuncLibProceduralMap", "InitProceduralMapConfig");

	Params::BGUFuncLibProceduralMap_InitProceduralMapConfig Parms{};

	Parms.MapConfigDataAsset = MapConfigDataAsset;
	Parms.MapBlockMappingInfo = MapBlockMappingInfo;
	Parms.MapLightInfo = MapLightInfo;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	MapConfigDataAsset = Parms.MapConfigDataAsset;
	MapBlockMappingInfo = Parms.MapBlockMappingInfo;
	MapLightInfo = Parms.MapLightInfo;

	if (MapInfo != nullptr)
		*MapInfo = std::move(Parms.MapInfo);
}


// Function b1-Managed.BGUFuncLibProceduralMap.MapPopulateWithPoints
// (Native, Static, Public, HasOutParams, BlueprintCallable)
// Parameters:
// struct FMapProceduralInfo               MapInfo                                                (Parm, OutParm, ReferenceParm, HasGetValueTypeHash)

void UBGUFuncLibProceduralMap::MapPopulateWithPoints(struct FMapProceduralInfo& MapInfo)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("BGUFuncLibProceduralMap", "MapPopulateWithPoints");

	Params::BGUFuncLibProceduralMap_MapPopulateWithPoints Parms{};

	Parms.MapInfo = std::move(MapInfo);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	MapInfo = std::move(Parms.MapInfo);
}


// Function b1-Managed.BGUFuncLibProceduralMap.MapConnectAllPoints
// (Native, Static, Public, HasOutParams, BlueprintCallable)
// Parameters:
// struct FMapProceduralInfo               MapInfo                                                (Parm, OutParm, ReferenceParm, HasGetValueTypeHash)
// EMapCatFlag                             AllowedGeneralCatDir                                   (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// EMapCatFlag                             AllowedEntranceOutCatDir                               (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// EMapCatFlag                             AllowedExitInCatDir                                    (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UBGUFuncLibProceduralMap::MapConnectAllPoints(struct FMapProceduralInfo& MapInfo, EMapCatFlag AllowedGeneralCatDir, EMapCatFlag AllowedEntranceOutCatDir, EMapCatFlag AllowedExitInCatDir)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("BGUFuncLibProceduralMap", "MapConnectAllPoints");

	Params::BGUFuncLibProceduralMap_MapConnectAllPoints Parms{};

	Parms.MapInfo = std::move(MapInfo);
	Parms.AllowedGeneralCatDir = AllowedGeneralCatDir;
	Parms.AllowedEntranceOutCatDir = AllowedEntranceOutCatDir;
	Parms.AllowedExitInCatDir = AllowedExitInCatDir;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	MapInfo = std::move(Parms.MapInfo);
}


// Function b1-Managed.BGUFuncLibProceduralMap.BuildDemoMapInfo
// (Native, Static, Public, HasOutParams, BlueprintCallable)
// Parameters:
// struct FMapProceduralInfo               MapInfo                                                (Parm, OutParm, ReferenceParm, HasGetValueTypeHash)
// uint8                                   ReturnValue                                            (Parm, OutParm, ReturnParm, NoDestructor, HasGetValueTypeHash)

uint8 UBGUFuncLibProceduralMap::BuildDemoMapInfo(struct FMapProceduralInfo& MapInfo)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("BGUFuncLibProceduralMap", "BuildDemoMapInfo");

	Params::BGUFuncLibProceduralMap_BuildDemoMapInfo Parms{};

	Parms.MapInfo = std::move(MapInfo);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	MapInfo = std::move(Parms.MapInfo);

	return Parms.ReturnValue;
}


// Function b1-Managed.BAIS_SurroundObstacleTick.OnPropertyChanged
// (Native, Event, Public, Protected, BlueprintEvent)
// Parameters:
// class FString                           MemberName                                             (Parm, ZeroConstructor, HasGetValueTypeHash)
// class FString                           PropertyName                                           (Parm, ZeroConstructor, HasGetValueTypeHash)

void UBAIS_SurroundObstacleTick::OnPropertyChanged(const class FString& MemberName, const class FString& PropertyName)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BAIS_SurroundObstacleTick", "OnPropertyChanged");

	Params::BAIS_SurroundObstacleTick_OnPropertyChanged Parms{};

	Parms.MemberName = std::move(MemberName);
	Parms.PropertyName = std::move(PropertyName);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function b1-Managed.BGUWeaponBase.SetWeaponHasCollision
// (Native, Public, BlueprintCallable)

void ABGUWeaponBase::SetWeaponHasCollision()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BGUWeaponBase", "SetWeaponHasCollision");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function b1-Managed.BGUWeaponBase.Tool_CheckBoxChildren
// (Native, Public, HasOutParams, BlueprintCallable)
// Parameters:
// uint8                                   ReturnValue                                            (Parm, OutParm, ReturnParm, NoDestructor, HasGetValueTypeHash)

uint8 ABGUWeaponBase::Tool_CheckBoxChildren()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BGUWeaponBase", "Tool_CheckBoxChildren");

	Params::BGUWeaponBase_Tool_CheckBoxChildren Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function b1-Managed.BGUWeaponBase.Tool_SetRelativeTrans
// (Native, Public, BlueprintCallable)

void ABGUWeaponBase::Tool_SetRelativeTrans()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BGUWeaponBase", "Tool_SetRelativeTrans");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function b1-Managed.BGUWeaponBase.Tool_ReadWriteTrans
// (Native, Public, BlueprintCallable)

void ABGUWeaponBase::Tool_ReadWriteTrans()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BGUWeaponBase", "Tool_ReadWriteTrans");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function b1-Managed.BGUWeaponBase.SetMeshNoCollision
// (Native, Public, BlueprintCallable)

void ABGUWeaponBase::SetMeshNoCollision()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BGUWeaponBase", "SetMeshNoCollision");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function b1-Managed.BGUWeaponBase.WeaponBPFunc
// (Native, Event, Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// float                                   FloatParam                                             (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ABGUWeaponBase::WeaponBPFunc(float FloatParam)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BGUWeaponBase", "WeaponBPFunc");

	Params::BGUWeaponBase_WeaponBPFunc Parms{};

	Parms.FloatParam = FloatParam;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function b1-Managed.BGUCopyABPSettingComp.BeginPlayInCS
// (Native, Event, Public, BlueprintEvent)

void UBGUCopyABPSettingComp::BeginPlayInCS()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BGUCopyABPSettingComp", "BeginPlayInCS");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function b1-Managed.BGUSkillPreviewSystem.TickComponentInCS
// (Native, Event, Public, BlueprintEvent)
// Parameters:
// float                                   DeltaTime                                              (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UBGUSkillPreviewSystem::TickComponentInCS(float DeltaTime)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BGUSkillPreviewSystem", "TickComponentInCS");

	Params::BGUSkillPreviewSystem_TickComponentInCS Parms{};

	Parms.DeltaTime = DeltaTime;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function b1-Managed.BGUSkillPreviewSystem.BeginPlayInCS
// (Native, Event, Public, BlueprintEvent)

void UBGUSkillPreviewSystem::BeginPlayInCS()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BGUSkillPreviewSystem", "BeginPlayInCS");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function b1-Managed.BGUSkillPreviewSystem.StopTestAndOutputConfig
// (Native, Public, BlueprintCallable)

void UBGUSkillPreviewSystem::StopTestAndOutputConfig()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BGUSkillPreviewSystem", "StopTestAndOutputConfig");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function b1-Managed.BGUSkillPreviewSystem.OnSetPreviewConfig
// (Native, Public, BlueprintCallable)
// Parameters:
// struct FZBBPreviewConfig                Config                                                 (Parm, HasGetValueTypeHash)

void UBGUSkillPreviewSystem::OnSetPreviewConfig(const struct FZBBPreviewConfig& Config)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BGUSkillPreviewSystem", "OnSetPreviewConfig");

	Params::BGUSkillPreviewSystem_OnSetPreviewConfig Parms{};

	Parms.Config = std::move(Config);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function b1-Managed.BGUSkillPreviewSystem.DrawforDebug
// (Native, Public, BlueprintCallable)
// Parameters:
// uint8                                   DrawAll                                                (Parm, NoDestructor, HasGetValueTypeHash)
// int32                                   SectorNum                                              (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UBGUSkillPreviewSystem::DrawforDebug(uint8 DrawAll, int32 SectorNum)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BGUSkillPreviewSystem", "DrawforDebug");

	Params::BGUSkillPreviewSystem_DrawforDebug Parms{};

	Parms.DrawAll = DrawAll;
	Parms.SectorNum = SectorNum;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function b1-Managed.ActorCompContainerCS.ApplyWorldOffsetCS
// (Native, Event, Public, BlueprintEvent)
// Parameters:
// struct FVector                          InOffset                                               (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// uint8                                   bWorldShift                                            (Parm, NoDestructor, HasGetValueTypeHash)

void UActorCompContainerCS::ApplyWorldOffsetCS(const struct FVector& InOffset, uint8 bWorldShift)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("ActorCompContainerCS", "ApplyWorldOffsetCS");

	Params::ActorCompContainerCS_ApplyWorldOffsetCS Parms{};

	Parms.InOffset = std::move(InOffset);
	Parms.bWorldShift = bWorldShift;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function b1-Managed.ActorCompContainerCS.EndPlayInCS
// (Native, Event, Public, BlueprintEvent)
// Parameters:
// EEndPlayReason                          EndPlayReason                                          (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UActorCompContainerCS::EndPlayInCS(EEndPlayReason EndPlayReason)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("ActorCompContainerCS", "EndPlayInCS");

	Params::ActorCompContainerCS_EndPlayInCS Parms{};

	Parms.EndPlayReason = EndPlayReason;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function b1-Managed.BGUPOMDecalActor.OnConstructionCS
// (Native, Event, Public, Protected, BlueprintEvent)
// Parameters:
// struct FTransform                       Transform                                              (ConstParm, Parm, OutParm, ReferenceParm, IsPlainOldData, NoDestructor)

void ABGUPOMDecalActor::OnConstructionCS(const struct FTransform& Transform)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BGUPOMDecalActor", "OnConstructionCS");

	Params::BGUPOMDecalActor_OnConstructionCS Parms{};

	Parms.Transform = std::move(Transform);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function b1-Managed.BED_BehaviorNode_OnUnitTrans.GetNodeDescriptionInCS
// (Native, Event, Public, HasOutParams, BlueprintEvent, Const)
// Parameters:
// class FString                           ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash)

class FString UBED_BehaviorNode_OnUnitTrans::GetNodeDescriptionInCS() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BED_BehaviorNode_OnUnitTrans", "GetNodeDescriptionInCS");

	Params::BED_BehaviorNode_OnUnitTrans_GetNodeDescriptionInCS Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function b1-Managed.BED_BehaviorNode_OnUnitTrans.IsSupportViewType
// (Native, Event, Public, HasOutParams, BlueprintEvent, Const)
// Parameters:
// ECalliopeViewType                       InViewType                                             (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// uint8                                   ReturnValue                                            (Parm, OutParm, ReturnParm, NoDestructor, HasGetValueTypeHash)

uint8 UBED_BehaviorNode_OnUnitTrans::IsSupportViewType(const ECalliopeViewType& InViewType) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BED_BehaviorNode_OnUnitTrans", "IsSupportViewType");

	Params::BED_BehaviorNode_OnUnitTrans_IsSupportViewType Parms{};

	Parms.InViewType = InViewType;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function b1-Managed.BED_QuestNode_AddBuff.GetNodeDescriptionInCS
// (Native, Event, Public, HasOutParams, BlueprintEvent, Const)
// Parameters:
// class FString                           ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash)

class FString UBED_QuestNode_AddBuff::GetNodeDescriptionInCS() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BED_QuestNode_AddBuff", "GetNodeDescriptionInCS");

	Params::BED_QuestNode_AddBuff_GetNodeDescriptionInCS Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function b1-Managed.BGWDataAsset_UnitDeathDispConfig.SetDefaultDBCAsset
// (Native, Public, BlueprintCallable)
// Parameters:
// class UBUC_DispLibDispBaseConfigDataAsset*_NormalDissolveDBC                                     (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// class UBUC_DispLibDispBaseConfigDataAsset*Burn_AbnormalStateDeadDBC                              (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// class UBUC_DispLibDispBaseConfigDataAsset*Burn_AbnormalStateDissolveDBC                          (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// class UBUC_DispLibDispBaseConfigDataAsset*Thunder_AbnormalStateDeadDBC                           (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// class UBUC_DispLibDispBaseConfigDataAsset*Thunder_AbnormalStateDissolveDBC                       (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// class UBUC_DispLibDispBaseConfigDataAsset*Poison_AbnormalStateDeadDBC                            (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// class UBUC_DispLibDispBaseConfigDataAsset*Poison_AbnormalStateDissolveDBC                        (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// class UBUC_DispLibDispBaseConfigDataAsset*Freeze_AbnormalStateDeadDBC                            (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// class UBUC_DispLibDispBaseConfigDataAsset*Freeze_AbnormalStateDissolveDBC                        (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// class UBUC_DispLibDispBaseConfigDataAsset*Yin_AbnormalStateDeadDBC                               (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// class UBUC_DispLibDispBaseConfigDataAsset*Yin_AbnormalStateDissolveDBC                           (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// class UBUC_DispLibDispBaseConfigDataAsset*Yang_AbnormalStateDeadDBC                              (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// class UBUC_DispLibDispBaseConfigDataAsset*Yang_AbnormalStateDissolveDBC                          (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UBGWDataAsset_UnitDeathDispConfig::SetDefaultDBCAsset(class UBUC_DispLibDispBaseConfigDataAsset* _NormalDissolveDBC, class UBUC_DispLibDispBaseConfigDataAsset* Burn_AbnormalStateDeadDBC, class UBUC_DispLibDispBaseConfigDataAsset* Burn_AbnormalStateDissolveDBC, class UBUC_DispLibDispBaseConfigDataAsset* Thunder_AbnormalStateDeadDBC, class UBUC_DispLibDispBaseConfigDataAsset* Thunder_AbnormalStateDissolveDBC, class UBUC_DispLibDispBaseConfigDataAsset* Poison_AbnormalStateDeadDBC, class UBUC_DispLibDispBaseConfigDataAsset* Poison_AbnormalStateDissolveDBC, class UBUC_DispLibDispBaseConfigDataAsset* Freeze_AbnormalStateDeadDBC, class UBUC_DispLibDispBaseConfigDataAsset* Freeze_AbnormalStateDissolveDBC, class UBUC_DispLibDispBaseConfigDataAsset* Yin_AbnormalStateDeadDBC, class UBUC_DispLibDispBaseConfigDataAsset* Yin_AbnormalStateDissolveDBC, class UBUC_DispLibDispBaseConfigDataAsset* Yang_AbnormalStateDeadDBC, class UBUC_DispLibDispBaseConfigDataAsset* Yang_AbnormalStateDissolveDBC)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BGWDataAsset_UnitDeathDispConfig", "SetDefaultDBCAsset");

	Params::BGWDataAsset_UnitDeathDispConfig_SetDefaultDBCAsset Parms{};

	Parms._NormalDissolveDBC = _NormalDissolveDBC;
	Parms.Burn_AbnormalStateDeadDBC = Burn_AbnormalStateDeadDBC;
	Parms.Burn_AbnormalStateDissolveDBC = Burn_AbnormalStateDissolveDBC;
	Parms.Thunder_AbnormalStateDeadDBC = Thunder_AbnormalStateDeadDBC;
	Parms.Thunder_AbnormalStateDissolveDBC = Thunder_AbnormalStateDissolveDBC;
	Parms.Poison_AbnormalStateDeadDBC = Poison_AbnormalStateDeadDBC;
	Parms.Poison_AbnormalStateDissolveDBC = Poison_AbnormalStateDissolveDBC;
	Parms.Freeze_AbnormalStateDeadDBC = Freeze_AbnormalStateDeadDBC;
	Parms.Freeze_AbnormalStateDissolveDBC = Freeze_AbnormalStateDissolveDBC;
	Parms.Yin_AbnormalStateDeadDBC = Yin_AbnormalStateDeadDBC;
	Parms.Yin_AbnormalStateDissolveDBC = Yin_AbnormalStateDissolveDBC;
	Parms.Yang_AbnormalStateDeadDBC = Yang_AbnormalStateDeadDBC;
	Parms.Yang_AbnormalStateDissolveDBC = Yang_AbnormalStateDissolveDBC;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function b1-Managed.BED_MovieNode_ShowOrHiddenStreamingLevel.GetNodeDescriptionInCS
// (Native, Event, Public, HasOutParams, BlueprintEvent, Const)
// Parameters:
// class FString                           ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash)

class FString UBED_MovieNode_ShowOrHiddenStreamingLevel::GetNodeDescriptionInCS() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BED_MovieNode_ShowOrHiddenStreamingLevel", "GetNodeDescriptionInCS");

	Params::BED_MovieNode_ShowOrHiddenStreamingLevel_GetNodeDescriptionInCS Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function b1-Managed.BED_QuestNode_PlayAnimMontage.GetNodeDescriptionInCS
// (Native, Event, Public, HasOutParams, BlueprintEvent, Const)
// Parameters:
// class FString                           ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash)

class FString UBED_QuestNode_PlayAnimMontage::GetNodeDescriptionInCS() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BED_QuestNode_PlayAnimMontage", "GetNodeDescriptionInCS");

	Params::BED_QuestNode_PlayAnimMontage_GetNodeDescriptionInCS Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function b1-Managed.BUS_DispInteractAreaComp.OnActorLeave
// (Native, Public, Private)
// Parameters:
// class UPrimitiveComponent*              OverlappedComponent                                    (ExportObject, Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// class AActor*                           OtherActor                                             (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// class UPrimitiveComponent*              OtherComp                                              (ExportObject, Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// int32                                   OtherBodyIndex                                         (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UBUS_DispInteractAreaComp::OnActorLeave(class UPrimitiveComponent* OverlappedComponent, class AActor* OtherActor, class UPrimitiveComponent* OtherComp, int32 OtherBodyIndex)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BUS_DispInteractAreaComp", "OnActorLeave");

	Params::BUS_DispInteractAreaComp_OnActorLeave Parms{};

	Parms.OverlappedComponent = OverlappedComponent;
	Parms.OtherActor = OtherActor;
	Parms.OtherComp = OtherComp;
	Parms.OtherBodyIndex = OtherBodyIndex;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function b1-Managed.BUS_DispInteractAreaComp.OnActorEnter
// (Native, Public, Private)
// Parameters:
// class AActor*                           OverlappedActor                                        (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// class AActor*                           OtherActor                                             (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UBUS_DispInteractAreaComp::OnActorEnter(class AActor* OverlappedActor, class AActor* OtherActor)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BUS_DispInteractAreaComp", "OnActorEnter");

	Params::BUS_DispInteractAreaComp_OnActorEnter Parms{};

	Parms.OverlappedActor = OverlappedActor;
	Parms.OtherActor = OtherActor;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function b1-Managed.BGUDispInteractAreaVolume.BeginPlayCS
// (Native, Event, Public, Protected, BlueprintEvent)

void ABGUDispInteractAreaVolume::BeginPlayCS()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BGUDispInteractAreaVolume", "BeginPlayCS");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function b1-Managed.BGUDispInteractAreaVolume.UpdateLandScapeInfo
// (Native, Public, BlueprintCallable)

void ABGUDispInteractAreaVolume::UpdateLandScapeInfo()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BGUDispInteractAreaVolume", "UpdateLandScapeInfo");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function b1-Managed.BGUDispInteractActor.BeginPlayCS
// (Native, Event, Public, Protected, BlueprintEvent)

void ABGUDispInteractActor::BeginPlayCS()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BGUDispInteractActor", "BeginPlayCS");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function b1-Managed.BUS_ManualSplineMoveCompImpl.OnCollisionBeginOverlap
// (Native, Public, Private)
// Parameters:
// class UPrimitiveComponent*              OverlappedComponent                                    (ExportObject, Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// class AActor*                           OtherActor                                             (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// class UPrimitiveComponent*              OtherComp                                              (ExportObject, Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// int32                                   OtherBodyIndex                                         (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// uint8                                   bFromSweep                                             (Parm, NoDestructor, HasGetValueTypeHash)
// struct FHitResult                       SweepResult                                            (Parm, IsPlainOldData, NoDestructor)

void UBUS_ManualSplineMoveCompImpl::OnCollisionBeginOverlap(class UPrimitiveComponent* OverlappedComponent, class AActor* OtherActor, class UPrimitiveComponent* OtherComp, int32 OtherBodyIndex, uint8 bFromSweep, const struct FHitResult& SweepResult)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BUS_ManualSplineMoveCompImpl", "OnCollisionBeginOverlap");

	Params::BUS_ManualSplineMoveCompImpl_OnCollisionBeginOverlap Parms{};

	Parms.OverlappedComponent = OverlappedComponent;
	Parms.OtherActor = OtherActor;
	Parms.OtherComp = OtherComp;
	Parms.OtherBodyIndex = OtherBodyIndex;
	Parms.bFromSweep = bFromSweep;
	Parms.SweepResult = std::move(SweepResult);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function b1-Managed.BUS_ManualSplineMoveCompImpl.OnCollisionEndOverlap
// (Native, Public, Private)
// Parameters:
// class UPrimitiveComponent*              OverlappedComponent                                    (ExportObject, Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// class AActor*                           OtherActor                                             (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// class UPrimitiveComponent*              OtherComp                                              (ExportObject, Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// int32                                   OtherBodyIndex                                         (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UBUS_ManualSplineMoveCompImpl::OnCollisionEndOverlap(class UPrimitiveComponent* OverlappedComponent, class AActor* OtherActor, class UPrimitiveComponent* OtherComp, int32 OtherBodyIndex)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BUS_ManualSplineMoveCompImpl", "OnCollisionEndOverlap");

	Params::BUS_ManualSplineMoveCompImpl_OnCollisionEndOverlap Parms{};

	Parms.OverlappedComponent = OverlappedComponent;
	Parms.OtherActor = OtherActor;
	Parms.OtherComp = OtherComp;
	Parms.OtherBodyIndex = OtherBodyIndex;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function b1-Managed.BED_QuestNode_RaiseAwardProbability.GetNodeDescriptionInCS
// (Native, Event, Public, HasOutParams, BlueprintEvent, Const)
// Parameters:
// class FString                           ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash)

class FString UBED_QuestNode_RaiseAwardProbability::GetNodeDescriptionInCS() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BED_QuestNode_RaiseAwardProbability", "GetNodeDescriptionInCS");

	Params::BED_QuestNode_RaiseAwardProbability_GetNodeDescriptionInCS Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function b1-Managed.BULayerSceneInfoActor.BeginPlayCS
// (Native, Event, Public, BlueprintEvent)

void ABULayerSceneInfoActor::BeginPlayCS()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BULayerSceneInfoActor", "BeginPlayCS");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function b1-Managed.BSNS_PauseAI.OnNotifyBegin
// (Native, Event, Public, BlueprintEvent)
// Parameters:
// class UCalliopeLevelSequencePlayer*     InPlayer                                               (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// int32                                   InStatus                                               (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// uint8                                   bInBackwards                                           (Parm, NoDestructor, HasGetValueTypeHash)

void UBSNS_PauseAI::OnNotifyBegin(class UCalliopeLevelSequencePlayer* InPlayer, int32 InStatus, uint8 bInBackwards)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BSNS_PauseAI", "OnNotifyBegin");

	Params::BSNS_PauseAI_OnNotifyBegin Parms{};

	Parms.InPlayer = InPlayer;
	Parms.InStatus = InStatus;
	Parms.bInBackwards = bInBackwards;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function b1-Managed.BSNS_PauseAI.OnNotifyEnd
// (Native, Event, Public, BlueprintEvent)
// Parameters:
// class UCalliopeLevelSequencePlayer*     InPlayer                                               (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// int32                                   InStatus                                               (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// uint8                                   bInBackwards                                           (Parm, NoDestructor, HasGetValueTypeHash)

void UBSNS_PauseAI::OnNotifyEnd(class UCalliopeLevelSequencePlayer* InPlayer, int32 InStatus, uint8 bInBackwards)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BSNS_PauseAI", "OnNotifyEnd");

	Params::BSNS_PauseAI_OnNotifyEnd Parms{};

	Parms.InPlayer = InPlayer;
	Parms.InStatus = InStatus;
	Parms.bInBackwards = bInBackwards;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function b1-Managed.BGUModularMgrActor.ReceiveDestroyed
// (Native, Event, Public, BlueprintEvent)

void ABGUModularMgrActor::ReceiveDestroyed()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BGUModularMgrActor", "ReceiveDestroyed");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function b1-Managed.BGUModularMgrActor.SpawnModularActors
// (Native, Public, BlueprintCallable)

void ABGUModularMgrActor::SpawnModularActors()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BGUModularMgrActor", "SpawnModularActors");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function b1-Managed.BSN_PostAkEventOnUnit.GetDurationTime
// (Native, Event, Public, Protected, HasOutParams, BlueprintEvent)
// Parameters:
// float                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

float UBSN_PostAkEventOnUnit::GetDurationTime()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BSN_PostAkEventOnUnit", "GetDurationTime");

	Params::BSN_PostAkEventOnUnit_GetDurationTime Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function b1-Managed.BSN_PostAkEventOnUnit.OnPreviewNotify
// (Native, Event, Public, BlueprintEvent)
// Parameters:
// class UObject*                          InPlaybackContext                                      (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// int32                                   InStatus                                               (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// uint8                                   bInBackwards                                           (Parm, NoDestructor, HasGetValueTypeHash)

void UBSN_PostAkEventOnUnit::OnPreviewNotify(class UObject* InPlaybackContext, int32 InStatus, uint8 bInBackwards)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BSN_PostAkEventOnUnit", "OnPreviewNotify");

	Params::BSN_PostAkEventOnUnit_OnPreviewNotify Parms{};

	Parms.InPlaybackContext = InPlaybackContext;
	Parms.InStatus = InStatus;
	Parms.bInBackwards = bInBackwards;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function b1-Managed.BSN_PostAkEventOnUnit.GetDisplayName
// (Native, Event, Public, HasOutParams, BlueprintEvent)
// Parameters:
// class FString                           ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash)

class FString UBSN_PostAkEventOnUnit::GetDisplayName()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BSN_PostAkEventOnUnit", "GetDisplayName");

	Params::BSN_PostAkEventOnUnit_GetDisplayName Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function b1-Managed.BSN_PostAkEventOnUnit.OnNotify
// (Native, Event, Public, BlueprintEvent)
// Parameters:
// class UCalliopeLevelSequencePlayer*     InPlayer                                               (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// int32                                   InStatus                                               (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// uint8                                   bInBackwards                                           (Parm, NoDestructor, HasGetValueTypeHash)

void UBSN_PostAkEventOnUnit::OnNotify(class UCalliopeLevelSequencePlayer* InPlayer, int32 InStatus, uint8 bInBackwards)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BSN_PostAkEventOnUnit", "OnNotify");

	Params::BSN_PostAkEventOnUnit_OnNotify Parms{};

	Parms.InPlayer = InPlayer;
	Parms.InStatus = InStatus;
	Parms.bInBackwards = bInBackwards;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function b1-Managed.BGUProceduralMapGenerator.OnProceduralStreamLevelLoaded
// (Native, Public, Private)
// Parameters:
// int32                                   ID                                                     (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// int32                                   Linkage                                                (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ABGUProceduralMapGenerator::OnProceduralStreamLevelLoaded(int32 ID, int32 Linkage)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BGUProceduralMapGenerator", "OnProceduralStreamLevelLoaded");

	Params::BGUProceduralMapGenerator_OnProceduralStreamLevelLoaded Parms{};

	Parms.ID = ID;
	Parms.Linkage = Linkage;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function b1-Managed.BED_MovieNode_PerformerCatchTarget.GetNodeDescriptionInCS
// (Native, Event, Public, HasOutParams, BlueprintEvent, Const)
// Parameters:
// class FString                           ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash)

class FString UBED_MovieNode_PerformerCatchTarget::GetNodeDescriptionInCS() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BED_MovieNode_PerformerCatchTarget", "GetNodeDescriptionInCS");

	Params::BED_MovieNode_PerformerCatchTarget_GetNodeDescriptionInCS Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function b1-Managed.BSN_NotifyPlayEnd.OnNotify
// (Native, Event, Public, BlueprintEvent)
// Parameters:
// class UCalliopeLevelSequencePlayer*     InPlayer                                               (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// int32                                   InStatus                                               (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// uint8                                   bInBackwards                                           (Parm, NoDestructor, HasGetValueTypeHash)

void UBSN_NotifyPlayEnd::OnNotify(class UCalliopeLevelSequencePlayer* InPlayer, int32 InStatus, uint8 bInBackwards)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BSN_NotifyPlayEnd", "OnNotify");

	Params::BSN_NotifyPlayEnd_OnNotify Parms{};

	Parms.InPlayer = InPlayer;
	Parms.InStatus = InStatus;
	Parms.bInBackwards = bInBackwards;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function b1-Managed.BGUProceduralSpawnSceneItemBase.OnConstructionCS
// (Native, Event, Public, Protected, BlueprintEvent)
// Parameters:
// struct FTransform                       Transform                                              (ConstParm, Parm, OutParm, ReferenceParm, IsPlainOldData, NoDestructor)

void ABGUProceduralSpawnSceneItemBase::OnConstructionCS(const struct FTransform& Transform)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BGUProceduralSpawnSceneItemBase", "OnConstructionCS");

	Params::BGUProceduralSpawnSceneItemBase_OnConstructionCS Parms{};

	Parms.Transform = std::move(Transform);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function b1-Managed.BGUBulletBaseCS.BulletDataMigrateTool
// (Native, Public, BlueprintCallable)

void ABGUBulletBaseCS::BulletDataMigrateTool()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BGUBulletBaseCS", "BulletDataMigrateTool");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function b1-Managed.BGUMagicFieldBaseCS.MagicFieldDataMigrateTool
// (Native, Public, BlueprintCallable)

void ABGUMagicFieldBaseCS::MagicFieldDataMigrateTool()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BGUMagicFieldBaseCS", "MagicFieldDataMigrateTool");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function b1-Managed.BUS_SceneInactiveActorComp.TickComponentInCS
// (Native, Event, Public, BlueprintEvent)
// Parameters:
// float                                   DeltaTime                                              (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UBUS_SceneInactiveActorComp::TickComponentInCS(float DeltaTime)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BUS_SceneInactiveActorComp", "TickComponentInCS");

	Params::BUS_SceneInactiveActorComp_TickComponentInCS Parms{};

	Parms.DeltaTime = DeltaTime;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function b1-Managed.BUS_SceneInactiveActorComp.BeginPlayInCS
// (Native, Event, Public, BlueprintEvent)

void UBUS_SceneInactiveActorComp::BeginPlayInCS()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BUS_SceneInactiveActorComp", "BeginPlayInCS");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function b1-Managed.BUS_SceneInactiveActorComp.GetSceneActorActivationInfo
// (Native, Public, HasOutParams, BlueprintCallable)
// Parameters:
// TArray<struct FFGSSceneActorActivationInfo>ReturnValue                                            (Parm, OutParm, ReturnParm)

TArray<struct FFGSSceneActorActivationInfo> UBUS_SceneInactiveActorComp::GetSceneActorActivationInfo()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BUS_SceneInactiveActorComp", "GetSceneActorActivationInfo");

	Params::BUS_SceneInactiveActorComp_GetSceneActorActivationInfo Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function b1-Managed.BUS_SceneInactiveActorComp.EndPlayInCS
// (Native, Event, Public, BlueprintEvent)
// Parameters:
// EEndPlayReason                          EndPlayReason                                          (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UBUS_SceneInactiveActorComp::EndPlayInCS(EEndPlayReason EndPlayReason)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BUS_SceneInactiveActorComp", "EndPlayInCS");

	Params::BUS_SceneInactiveActorComp_EndPlayInCS Parms{};

	Parms.EndPlayReason = EndPlayReason;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function b1-Managed.BUS_SceneInactiveActorComp.TryRemoveActivationInfo
// (Native, Public, BlueprintCallable)
// Parameters:
// EGSSceneActorActivationType             SceneActorActivationType                               (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// class FName                             Tag                                                    (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UBUS_SceneInactiveActorComp::TryRemoveActivationInfo(EGSSceneActorActivationType SceneActorActivationType, class FName Tag)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BUS_SceneInactiveActorComp", "TryRemoveActivationInfo");

	Params::BUS_SceneInactiveActorComp_TryRemoveActivationInfo Parms{};

	Parms.SceneActorActivationType = SceneActorActivationType;
	Parms.Tag = Tag;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function b1-Managed.BUS_SceneInactiveActorComp.TryAddActivationInfo
// (Native, Public, BlueprintCallable)
// Parameters:
// struct FFGSSceneActorActivationInfo     ActivationInfo                                         (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UBUS_SceneInactiveActorComp::TryAddActivationInfo(const struct FFGSSceneActorActivationInfo& ActivationInfo)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BUS_SceneInactiveActorComp", "TryAddActivationInfo");

	Params::BUS_SceneInactiveActorComp_TryAddActivationInfo Parms{};

	Parms.ActivationInfo = std::move(ActivationInfo);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function b1-Managed.BGUSceneItemBase.BeginPlayCS
// (Native, Event, Public, Protected, BlueprintEvent)

void ABGUSceneItemBase::BeginPlayCS()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BGUSceneItemBase", "BeginPlayCS");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function b1-Managed.BED_QuestNode_TrainDummyResultReport.GetNodeDescriptionInCS
// (Native, Event, Public, HasOutParams, BlueprintEvent, Const)
// Parameters:
// class FString                           ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash)

class FString UBED_QuestNode_TrainDummyResultReport::GetNodeDescriptionInCS() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BED_QuestNode_TrainDummyResultReport", "GetNodeDescriptionInCS");

	Params::BED_QuestNode_TrainDummyResultReport_GetNodeDescriptionInCS Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function b1-Managed.BUS_SeqHelperActorComp.BeginPlayInCS
// (Native, Event, Public, BlueprintEvent)

void UBUS_SeqHelperActorComp::BeginPlayInCS()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BUS_SeqHelperActorComp", "BeginPlayInCS");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function b1-Managed.BUS_SeqHelperActorComp.PerformPerceivePlayer
// (Native, Public, BlueprintCallable)
// Parameters:
// class FName                             Tag                                                    (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UBUS_SeqHelperActorComp::PerformPerceivePlayer(class FName Tag)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BUS_SeqHelperActorComp", "PerformPerceivePlayer");

	Params::BUS_SeqHelperActorComp_PerformPerceivePlayer Parms{};

	Parms.Tag = Tag;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function b1-Managed.BUS_SeqHelperActorComp.PerformMoveToLocation
// (Native, Public, BlueprintCallable)
// Parameters:
// class FName                             Tag                                                    (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// struct FVector                          Position                                               (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// EAIMoveSpeedType                        SpeedRateType                                          (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// float                                   AcceptableRadius                                       (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// EBGUMoveAIType                          MoveAIType                                             (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// uint8                                   IncludeSelfRadius                                      (Parm, NoDestructor, HasGetValueTypeHash)
// uint8                                   IncludeTargetRadius                                    (Parm, NoDestructor, HasGetValueTypeHash)

void UBUS_SeqHelperActorComp::PerformMoveToLocation(class FName Tag, const struct FVector& Position, EAIMoveSpeedType SpeedRateType, float AcceptableRadius, EBGUMoveAIType MoveAIType, uint8 IncludeSelfRadius, uint8 IncludeTargetRadius)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BUS_SeqHelperActorComp", "PerformMoveToLocation");

	Params::BUS_SeqHelperActorComp_PerformMoveToLocation Parms{};

	Parms.Tag = Tag;
	Parms.Position = std::move(Position);
	Parms.SpeedRateType = SpeedRateType;
	Parms.AcceptableRadius = AcceptableRadius;
	Parms.MoveAIType = MoveAIType;
	Parms.IncludeSelfRadius = IncludeSelfRadius;
	Parms.IncludeTargetRadius = IncludeTargetRadius;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function b1-Managed.BUS_SeqHelperActorComp.PerformMoveToPlayer
// (Native, Public, BlueprintCallable)
// Parameters:
// class FName                             Tag                                                    (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// EAIMoveSpeedType                        SpeedRateType                                          (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// float                                   AcceptableRadius                                       (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// EBGUMoveAIType                          MoveAIType                                             (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// uint8                                   IncludeSelfRadius                                      (Parm, NoDestructor, HasGetValueTypeHash)
// uint8                                   IncludeTargetRadius                                    (Parm, NoDestructor, HasGetValueTypeHash)

void UBUS_SeqHelperActorComp::PerformMoveToPlayer(class FName Tag, EAIMoveSpeedType SpeedRateType, float AcceptableRadius, EBGUMoveAIType MoveAIType, uint8 IncludeSelfRadius, uint8 IncludeTargetRadius)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BUS_SeqHelperActorComp", "PerformMoveToPlayer");

	Params::BUS_SeqHelperActorComp_PerformMoveToPlayer Parms{};

	Parms.Tag = Tag;
	Parms.SpeedRateType = SpeedRateType;
	Parms.AcceptableRadius = AcceptableRadius;
	Parms.MoveAIType = MoveAIType;
	Parms.IncludeSelfRadius = IncludeSelfRadius;
	Parms.IncludeTargetRadius = IncludeTargetRadius;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function b1-Managed.BUS_SeqHelperActorComp.SpawnPlayerPartner
// (Native, Public, BlueprintCallable)
// Parameters:
// class UClass*                           Class_0                                                (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// struct FTransform                       Transform                                              (Parm, IsPlainOldData, NoDestructor)
// class FName                             Tag                                                    (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// uint8                                   PauseAI                                                (Parm, NoDestructor, HasGetValueTypeHash)

void UBUS_SeqHelperActorComp::SpawnPlayerPartner(class UClass* Class_0, const struct FTransform& Transform, class FName Tag, uint8 PauseAI)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BUS_SeqHelperActorComp", "SpawnPlayerPartner");

	Params::BUS_SeqHelperActorComp_SpawnPlayerPartner Parms{};

	Parms.Class_0 = Class_0;
	Parms.Transform = std::move(Transform);
	Parms.Tag = Tag;
	Parms.PauseAI = PauseAI;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function b1-Managed.BUS_SeqHelperActorComp.UpdateSimpleStates
// (Native, Public, BlueprintCallable)
// Parameters:
// class FName                             Tag                                                    (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// EBGUSimpleState                         SimpleState                                            (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// uint8                                   IsRemoving                                             (Parm, NoDestructor, HasGetValueTypeHash)

void UBUS_SeqHelperActorComp::UpdateSimpleStates(class FName Tag, EBGUSimpleState SimpleState, uint8 IsRemoving)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BUS_SeqHelperActorComp", "UpdateSimpleStates");

	Params::BUS_SeqHelperActorComp_UpdateSimpleStates Parms{};

	Parms.Tag = Tag;
	Parms.SimpleState = SimpleState;
	Parms.IsRemoving = IsRemoving;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function b1-Managed.BUS_SeqHelperActorComp.NotifyUnitDead
// (Native, Public, BlueprintCallable)
// Parameters:
// class FName                             Tag                                                    (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UBUS_SeqHelperActorComp::NotifyUnitDead(class FName Tag)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BUS_SeqHelperActorComp", "NotifyUnitDead");

	Params::BUS_SeqHelperActorComp_NotifyUnitDead Parms{};

	Parms.Tag = Tag;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function b1-Managed.BUS_SeqHelperActorComp.SetVisibility
// (Native, Public, BlueprintCallable)
// Parameters:
// class FName                             Tag                                                    (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// uint8                                   IsHidden                                               (Parm, NoDestructor, HasGetValueTypeHash)
// uint8                                   EnableCollision                                        (Parm, NoDestructor, HasGetValueTypeHash)

void UBUS_SeqHelperActorComp::SetVisibility(class FName Tag, uint8 IsHidden, uint8 EnableCollision)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BUS_SeqHelperActorComp", "SetVisibility");

	Params::BUS_SeqHelperActorComp_SetVisibility Parms{};

	Parms.Tag = Tag;
	Parms.IsHidden = IsHidden;
	Parms.EnableCollision = EnableCollision;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function b1-Managed.BUS_SeqHelperActorComp.CatchAsTarget
// (Native, Public, BlueprintCallable)
// Parameters:
// class FName                             SelfTag                                                (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// class FName                             TargetTag                                              (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UBUS_SeqHelperActorComp::CatchAsTarget(class FName SelfTag, class FName TargetTag)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BUS_SeqHelperActorComp", "CatchAsTarget");

	Params::BUS_SeqHelperActorComp_CatchAsTarget Parms{};

	Parms.SelfTag = SelfTag;
	Parms.TargetTag = TargetTag;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function b1-Managed.BUS_SeqHelperActorComp.PerformPatrol
// (Native, Public, BlueprintCallable)
// Parameters:
// class FName                             Tag                                                    (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UBUS_SeqHelperActorComp::PerformPatrol(class FName Tag)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BUS_SeqHelperActorComp", "PerformPatrol");

	Params::BUS_SeqHelperActorComp_PerformPatrol Parms{};

	Parms.Tag = Tag;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function b1-Managed.BUS_SeqHelperActorComp.PlayMontage
// (Native, Public, BlueprintCallable)
// Parameters:
// class FName                             Tag                                                    (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// class UAnimMontage*                     MontageToPlay                                          (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UBUS_SeqHelperActorComp::PlayMontage(class FName Tag, class UAnimMontage* MontageToPlay)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BUS_SeqHelperActorComp", "PlayMontage");

	Params::BUS_SeqHelperActorComp_PlayMontage Parms{};

	Parms.Tag = Tag;
	Parms.MontageToPlay = MontageToPlay;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function b1-Managed.BUS_SeqHelperActorComp.ExitStealth
// (Native, Public, BlueprintCallable)

void UBUS_SeqHelperActorComp::ExitStealth()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BUS_SeqHelperActorComp", "ExitStealth");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function b1-Managed.BUS_SeqHelperActorComp.DisableAI
// (Native, Public, BlueprintCallable)
// Parameters:
// class FName                             Tag                                                    (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UBUS_SeqHelperActorComp::DisableAI(class FName Tag)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BUS_SeqHelperActorComp", "DisableAI");

	Params::BUS_SeqHelperActorComp_DisableAI Parms{};

	Parms.Tag = Tag;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function b1-Managed.BUS_SeqHelperActorComp.EnableAI
// (Native, Public, BlueprintCallable)
// Parameters:
// class FName                             Tag                                                    (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UBUS_SeqHelperActorComp::EnableAI(class FName Tag)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BUS_SeqHelperActorComp", "EnableAI");

	Params::BUS_SeqHelperActorComp_EnableAI Parms{};

	Parms.Tag = Tag;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function b1-Managed.BUS_SeqHelperActorComp.AddBuff
// (Native, Public, BlueprintCallable)
// Parameters:
// class FName                             Tag                                                    (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// uint8                                   IsRemoving                                             (Parm, NoDestructor, HasGetValueTypeHash)
// int32                                   BuffID                                                 (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// float                                   Duration                                               (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UBUS_SeqHelperActorComp::AddBuff(class FName Tag, uint8 IsRemoving, int32 BuffID, float Duration)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BUS_SeqHelperActorComp", "AddBuff");

	Params::BUS_SeqHelperActorComp_AddBuff Parms{};

	Parms.Tag = Tag;
	Parms.IsRemoving = IsRemoving;
	Parms.BuffID = BuffID;
	Parms.Duration = Duration;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function b1-Managed.BGUSplineActor.ProjectPointsToNavigation
// (Native, Public, BlueprintCallable)

void ABGUSplineActor::ProjectPointsToNavigation()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BGUSplineActor", "ProjectPointsToNavigation");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function b1-Managed.BAN_GSParkourAnimInfo.bIsNativeBranchingPointCS
// (Native, Event, Public, HasOutParams, BlueprintEvent, Const)
// Parameters:
// uint8                                   ReturnValue                                            (Parm, OutParm, ReturnParm, NoDestructor, HasGetValueTypeHash)

uint8 UBAN_GSParkourAnimInfo::bIsNativeBranchingPointCS() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BAN_GSParkourAnimInfo", "bIsNativeBranchingPointCS");

	Params::BAN_GSParkourAnimInfo_bIsNativeBranchingPointCS Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function b1-Managed.BAN_GSParkourAnimInfo.GSNotifyCS
// (Native, Event, Public, Protected, BlueprintEvent, Const)
// Parameters:
// struct FUStGSNotifyParam                NotifyParam                                            (Parm, ZeroConstructor, IsPlainOldData, NoDestructor)

void UBAN_GSParkourAnimInfo::GSNotifyCS(const struct FUStGSNotifyParam& NotifyParam) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BAN_GSParkourAnimInfo", "GSNotifyCS");

	Params::BAN_GSParkourAnimInfo_GSNotifyCS Parms{};

	Parms.NotifyParam = std::move(NotifyParam);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function b1-Managed.BAN_GSParkourAnimInfo.SetAnimMovementValue
// (Native, Public, BlueprintCallable, Const)
// Parameters:
// struct FVector                          Movement                                               (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UBAN_GSParkourAnimInfo::SetAnimMovementValue(const struct FVector& Movement) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BAN_GSParkourAnimInfo", "SetAnimMovementValue");

	Params::BAN_GSParkourAnimInfo_SetAnimMovementValue Parms{};

	Parms.Movement = std::move(Movement);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function b1-Managed.BGAnimSpider.BlueprintInitializeAnimation
// (Native, Event, Public, BlueprintEvent)

void UBGAnimSpider::BlueprintInitializeAnimation()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BGAnimSpider", "BlueprintInitializeAnimation");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function b1-Managed.BGAnimSpider.BlueprintUpdateAnimation
// (Native, Event, Public, BlueprintEvent)
// Parameters:
// float                                   DeltaSeconds                                           (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UBGAnimSpider::BlueprintUpdateAnimation(float DeltaSeconds)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BGAnimSpider", "BlueprintUpdateAnimation");

	Params::BGAnimSpider_BlueprintUpdateAnimation Parms{};

	Parms.DeltaSeconds = DeltaSeconds;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function b1-Managed.BAN_GSDetachMultipleWeapons.bIsNativeBranchingPointCS
// (Native, Event, Public, HasOutParams, BlueprintEvent, Const)
// Parameters:
// uint8                                   ReturnValue                                            (Parm, OutParm, ReturnParm, NoDestructor, HasGetValueTypeHash)

uint8 UBAN_GSDetachMultipleWeapons::bIsNativeBranchingPointCS() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BAN_GSDetachMultipleWeapons", "bIsNativeBranchingPointCS");

	Params::BAN_GSDetachMultipleWeapons_bIsNativeBranchingPointCS Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function b1-Managed.BAN_GSDetachMultipleWeapons.GSNotifyCS
// (Native, Event, Public, Protected, BlueprintEvent, Const)
// Parameters:
// struct FUStGSNotifyParam                NotifyParam                                            (Parm, ZeroConstructor, IsPlainOldData, NoDestructor)

void UBAN_GSDetachMultipleWeapons::GSNotifyCS(const struct FUStGSNotifyParam& NotifyParam) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BAN_GSDetachMultipleWeapons", "GSNotifyCS");

	Params::BAN_GSDetachMultipleWeapons_GSNotifyCS Parms{};

	Parms.NotifyParam = std::move(NotifyParam);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function b1-Managed.BUAnimHumanoidCS_PlayerLocomotion.SetupSequenceTransitionAnim
// (Native, Public, Private, HasOutParams, BlueprintCallable)
// Parameters:
// struct FAnimUpdateContext               Context                                                (Parm, OutParm, ReferenceParm)
// struct FAnimNodeReference               Node                                                   (Parm, OutParm, ReferenceParm, NoDestructor)

void UBUAnimHumanoidCS_PlayerLocomotion::SetupSequenceTransitionAnim(struct FAnimUpdateContext& Context, struct FAnimNodeReference& Node)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BUAnimHumanoidCS_PlayerLocomotion", "SetupSequenceTransitionAnim");

	Params::BUAnimHumanoidCS_PlayerLocomotion_SetupSequenceTransitionAnim Parms{};

	Parms.Context = std::move(Context);
	Parms.Node = std::move(Node);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	Context = std::move(Parms.Context);
	Node = std::move(Parms.Node);
}


// Function b1-Managed.BUAnimHumanoidCS_PlayerLocomotion.GetRandomIdleAnim
// (Native, Public, Private, HasOutParams, BlueprintCallable)
// Parameters:
// struct FAnimUpdateContext               Context                                                (Parm, OutParm, ReferenceParm)
// struct FAnimNodeReference               Node                                                   (Parm, OutParm, ReferenceParm, NoDestructor)

void UBUAnimHumanoidCS_PlayerLocomotion::GetRandomIdleAnim(struct FAnimUpdateContext& Context, struct FAnimNodeReference& Node)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BUAnimHumanoidCS_PlayerLocomotion", "GetRandomIdleAnim");

	Params::BUAnimHumanoidCS_PlayerLocomotion_GetRandomIdleAnim Parms{};

	Parms.Context = std::move(Context);
	Parms.Node = std::move(Node);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	Context = std::move(Parms.Context);
	Node = std::move(Parms.Node);
}


// Function b1-Managed.BUAnimHumanoidCS_PlayerLocomotion.SetUpRushStopAnim
// (Native, Public, Private, HasOutParams, BlueprintCallable)
// Parameters:
// struct FAnimUpdateContext               Context                                                (Parm, OutParm, ReferenceParm)
// struct FAnimNodeReference               Node                                                   (Parm, OutParm, ReferenceParm, NoDestructor)

void UBUAnimHumanoidCS_PlayerLocomotion::SetUpRushStopAnim(struct FAnimUpdateContext& Context, struct FAnimNodeReference& Node)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BUAnimHumanoidCS_PlayerLocomotion", "SetUpRushStopAnim");

	Params::BUAnimHumanoidCS_PlayerLocomotion_SetUpRushStopAnim Parms{};

	Parms.Context = std::move(Context);
	Parms.Node = std::move(Node);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	Context = std::move(Parms.Context);
	Node = std::move(Parms.Node);
}


// Function b1-Managed.BUAnimHumanoidCS_PlayerLocomotion.OnEnterSeqMove
// (Native, Public, Private, BlueprintCallable)

void UBUAnimHumanoidCS_PlayerLocomotion::OnEnterSeqMove()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BUAnimHumanoidCS_PlayerLocomotion", "OnEnterSeqMove");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function b1-Managed.BUAnimHumanoidCS_PlayerLocomotion.OnLeftSeqMove
// (Native, Public, Private, BlueprintCallable)

void UBUAnimHumanoidCS_PlayerLocomotion::OnLeftSeqMove()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BUAnimHumanoidCS_PlayerLocomotion", "OnLeftSeqMove");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function b1-Managed.BANS_GSSwitchMovementMode.GSNotifyBeginCS
// (Native, Event, Public, Protected, BlueprintEvent, Const)
// Parameters:
// struct FUStGSNotifyParam                NotifyParam                                            (Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
// float                                   TotalDuration                                          (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UBANS_GSSwitchMovementMode::GSNotifyBeginCS(const struct FUStGSNotifyParam& NotifyParam, float TotalDuration) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BANS_GSSwitchMovementMode", "GSNotifyBeginCS");

	Params::BANS_GSSwitchMovementMode_GSNotifyBeginCS Parms{};

	Parms.NotifyParam = std::move(NotifyParam);
	Parms.TotalDuration = TotalDuration;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function b1-Managed.BANS_GSSwitchMovementMode.GSNotifyEndCS
// (Native, Event, Public, Protected, BlueprintEvent, Const)
// Parameters:
// struct FUStGSNotifyParam                NotifyParam                                            (Parm, ZeroConstructor, IsPlainOldData, NoDestructor)

void UBANS_GSSwitchMovementMode::GSNotifyEndCS(const struct FUStGSNotifyParam& NotifyParam) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BANS_GSSwitchMovementMode", "GSNotifyEndCS");

	Params::BANS_GSSwitchMovementMode_GSNotifyEndCS Parms{};

	Parms.NotifyParam = std::move(NotifyParam);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function b1-Managed.BED_BehaviorNode_PlayPigsyStory.IsSupportViewType
// (Native, Event, Public, HasOutParams, BlueprintEvent, Const)
// Parameters:
// ECalliopeViewType                       InViewType                                             (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// uint8                                   ReturnValue                                            (Parm, OutParm, ReturnParm, NoDestructor, HasGetValueTypeHash)

uint8 UBED_BehaviorNode_PlayPigsyStory::IsSupportViewType(const ECalliopeViewType& InViewType) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BED_BehaviorNode_PlayPigsyStory", "IsSupportViewType");

	Params::BED_BehaviorNode_PlayPigsyStory_IsSupportViewType Parms{};

	Parms.InViewType = InViewType;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function b1-Managed.BGU_DebugActor.OnConstructionCS
// (Native, Event, Public, Protected, BlueprintEvent)
// Parameters:
// struct FTransform                       Transform                                              (ConstParm, Parm, OutParm, ReferenceParm, IsPlainOldData, NoDestructor)

void ABGU_DebugActor::OnConstructionCS(const struct FTransform& Transform)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BGU_DebugActor", "OnConstructionCS");

	Params::BGU_DebugActor_OnConstructionCS Parms{};

	Parms.Transform = std::move(Transform);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function b1-Managed.BGU_DebugActor.BeginPlayCS
// (Native, Event, Public, Protected, BlueprintEvent)

void ABGU_DebugActor::BeginPlayCS()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BGU_DebugActor", "BeginPlayCS");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function b1-Managed.BUS_AIComp.OnTargetPerceptionUpdated
// (Native, Public, Private)
// Parameters:
// class AActor*                           Target                                                 (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// struct FAIStimulus                      Stimulus                                               (Parm, NoDestructor)

void UBUS_AIComp::OnTargetPerceptionUpdated(class AActor* Target, const struct FAIStimulus& Stimulus)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BUS_AIComp", "OnTargetPerceptionUpdated");

	Params::BUS_AIComp_OnTargetPerceptionUpdated Parms{};

	Parms.Target = Target;
	Parms.Stimulus = std::move(Stimulus);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function b1-Managed.BUI_ProjectileDebugInfo.OnRegistOwner
// (Native, Public, BlueprintCallable)
// Parameters:
// class ABGUProjectileBaseActor*          ProjectileBaseActor                                    (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UBUI_ProjectileDebugInfo::OnRegistOwner(class ABGUProjectileBaseActor* ProjectileBaseActor)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BUI_ProjectileDebugInfo", "OnRegistOwner");

	Params::BUI_ProjectileDebugInfo_OnRegistOwner Parms{};

	Parms.ProjectileBaseActor = ProjectileBaseActor;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function b1-Managed.BUS_PlayerCameraCompUObj.OnSwitchCameraGroupTo
// (Native, Public, Private)
// Parameters:
// int32                                   TargetCameraGroupId                                    (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// float                                   Alpha                                                  (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// float                                   BlendTime                                              (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UBUS_PlayerCameraCompUObj::OnSwitchCameraGroupTo(int32 TargetCameraGroupId, float Alpha, float BlendTime)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BUS_PlayerCameraCompUObj", "OnSwitchCameraGroupTo");

	Params::BUS_PlayerCameraCompUObj_OnSwitchCameraGroupTo Parms{};

	Parms.TargetCameraGroupId = TargetCameraGroupId;
	Parms.Alpha = Alpha;
	Parms.BlendTime = BlendTime;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function b1-Managed.FlowOverlapCompFunctionBinder.OnCollisionBeginOverlap
// (Native, Public, Private)
// Parameters:
// class UPrimitiveComponent*              OverlappedComponent                                    (ExportObject, Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// class AActor*                           OtherActor                                             (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// class UPrimitiveComponent*              OtherComp                                              (ExportObject, Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// int32                                   OtherBodyIndex                                         (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// uint8                                   bFromSweep                                             (Parm, NoDestructor, HasGetValueTypeHash)
// struct FHitResult                       SweepResult                                            (Parm, IsPlainOldData, NoDestructor)

void UFlowOverlapCompFunctionBinder::OnCollisionBeginOverlap(class UPrimitiveComponent* OverlappedComponent, class AActor* OtherActor, class UPrimitiveComponent* OtherComp, int32 OtherBodyIndex, uint8 bFromSweep, const struct FHitResult& SweepResult)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("FlowOverlapCompFunctionBinder", "OnCollisionBeginOverlap");

	Params::FlowOverlapCompFunctionBinder_OnCollisionBeginOverlap Parms{};

	Parms.OverlappedComponent = OverlappedComponent;
	Parms.OtherActor = OtherActor;
	Parms.OtherComp = OtherComp;
	Parms.OtherBodyIndex = OtherBodyIndex;
	Parms.bFromSweep = bFromSweep;
	Parms.SweepResult = std::move(SweepResult);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function b1-Managed.FlowOverlapCompFunctionBinder.OnCollisionEndOverlap
// (Native, Public, Private)
// Parameters:
// class UPrimitiveComponent*              OverlappedComponent                                    (ExportObject, Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// class AActor*                           OtherActor                                             (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// class UPrimitiveComponent*              OtherComp                                              (ExportObject, Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// int32                                   OtherBodyIndex                                         (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UFlowOverlapCompFunctionBinder::OnCollisionEndOverlap(class UPrimitiveComponent* OverlappedComponent, class AActor* OtherActor, class UPrimitiveComponent* OtherComp, int32 OtherBodyIndex)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("FlowOverlapCompFunctionBinder", "OnCollisionEndOverlap");

	Params::FlowOverlapCompFunctionBinder_OnCollisionEndOverlap Parms{};

	Parms.OverlappedComponent = OverlappedComponent;
	Parms.OtherActor = OtherActor;
	Parms.OtherComp = OtherComp;
	Parms.OtherBodyIndex = OtherBodyIndex;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function b1-Managed.GSCameraGraph.CameraGraphNode_AutoMoveTrailCamera
// (Native, Public, BlueprintCallable)
// Parameters:
// uint8                                   bEnable                                                (Parm, NoDestructor, HasGetValueTypeHash)

void UGSCameraGraph::CameraGraphNode_AutoMoveTrailCamera(uint8 bEnable)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GSCameraGraph", "CameraGraphNode_AutoMoveTrailCamera");

	Params::GSCameraGraph_CameraGraphNode_AutoMoveTrailCamera Parms{};

	Parms.bEnable = bEnable;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function b1-Managed.GSCameraGraph.CameraGraphNode_LerpPostProcess
// (Native, Public, BlueprintCallable)
// Parameters:
// uint8                                   bEnable                                                (Parm, NoDestructor, HasGetValueTypeHash)

void UGSCameraGraph::CameraGraphNode_LerpPostProcess(uint8 bEnable)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GSCameraGraph", "CameraGraphNode_LerpPostProcess");

	Params::GSCameraGraph_CameraGraphNode_LerpPostProcess Parms{};

	Parms.bEnable = bEnable;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function b1-Managed.GSCameraGraph.CameraGraphNode_CloudMoveLimit
// (Native, Public, BlueprintCallable)
// Parameters:
// uint8                                   bEnable                                                (Parm, NoDestructor, HasGetValueTypeHash)

void UGSCameraGraph::CameraGraphNode_CloudMoveLimit(uint8 bEnable)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GSCameraGraph", "CameraGraphNode_CloudMoveLimit");

	Params::GSCameraGraph_CameraGraphNode_CloudMoveLimit Parms{};

	Parms.bEnable = bEnable;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function b1-Managed.GSCameraGraph.CameraGraphNode_InverseCamera
// (Native, Public, BlueprintCallable)
// Parameters:
// uint8                                   bEnable                                                (Parm, NoDestructor, HasGetValueTypeHash)

void UGSCameraGraph::CameraGraphNode_InverseCamera(uint8 bEnable)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GSCameraGraph", "CameraGraphNode_InverseCamera");

	Params::GSCameraGraph_CameraGraphNode_InverseCamera Parms{};

	Parms.bEnable = bEnable;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function b1-Managed.GSCameraGraph.CameraGraphNode_TraceVelocity
// (Native, Public, BlueprintCallable)
// Parameters:
// uint8                                   bEnable                                                (Parm, NoDestructor, HasGetValueTypeHash)

void UGSCameraGraph::CameraGraphNode_TraceVelocity(uint8 bEnable)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GSCameraGraph", "CameraGraphNode_TraceVelocity");

	Params::GSCameraGraph_CameraGraphNode_TraceVelocity Parms{};

	Parms.bEnable = bEnable;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function b1-Managed.GSCameraGraph.CameraGraphNode_ShootSuction
// (Native, Public, BlueprintCallable)
// Parameters:
// uint8                                   bEnable                                                (Parm, NoDestructor, HasGetValueTypeHash)

void UGSCameraGraph::CameraGraphNode_ShootSuction(uint8 bEnable)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GSCameraGraph", "CameraGraphNode_ShootSuction");

	Params::GSCameraGraph_CameraGraphNode_ShootSuction Parms{};

	Parms.bEnable = bEnable;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function b1-Managed.GSCameraGraph.CameraGraphNode_GuiBeiCamera
// (Native, Public, BlueprintCallable)
// Parameters:
// uint8                                   bEnable                                                (Parm, NoDestructor, HasGetValueTypeHash)

void UGSCameraGraph::CameraGraphNode_GuiBeiCamera(uint8 bEnable)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GSCameraGraph", "CameraGraphNode_GuiBeiCamera");

	Params::GSCameraGraph_CameraGraphNode_GuiBeiCamera Parms{};

	Parms.bEnable = bEnable;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function b1-Managed.GSCameraGraph.CameraGraphNode_PlayerSkill
// (Native, Public, BlueprintCallable)
// Parameters:
// uint8                                   bEnable                                                (Parm, NoDestructor, HasGetValueTypeHash)

void UGSCameraGraph::CameraGraphNode_PlayerSkill(uint8 bEnable)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GSCameraGraph", "CameraGraphNode_PlayerSkill");

	Params::GSCameraGraph_CameraGraphNode_PlayerSkill Parms{};

	Parms.bEnable = bEnable;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function b1-Managed.GSCameraGraph.CameraGraphNode_AxisSmooth
// (Native, Public, BlueprintCallable)
// Parameters:
// uint8                                   bEnable                                                (Parm, NoDestructor, HasGetValueTypeHash)
// uint8                                   IsXAxisFixed                                           (Parm, NoDestructor, HasGetValueTypeHash)
// uint8                                   IsYAxisFixed                                           (Parm, NoDestructor, HasGetValueTypeHash)
// uint8                                   IsZAxisFixed                                           (Parm, NoDestructor, HasGetValueTypeHash)
// float                                   SmoothSpeed                                            (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// float                                   CameraLagSpeed                                         (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UGSCameraGraph::CameraGraphNode_AxisSmooth(uint8 bEnable, uint8 IsXAxisFixed, uint8 IsYAxisFixed, uint8 IsZAxisFixed, float SmoothSpeed, float CameraLagSpeed)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GSCameraGraph", "CameraGraphNode_AxisSmooth");

	Params::GSCameraGraph_CameraGraphNode_AxisSmooth Parms{};

	Parms.bEnable = bEnable;
	Parms.IsXAxisFixed = IsXAxisFixed;
	Parms.IsYAxisFixed = IsYAxisFixed;
	Parms.IsZAxisFixed = IsZAxisFixed;
	Parms.SmoothSpeed = SmoothSpeed;
	Parms.CameraLagSpeed = CameraLagSpeed;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function b1-Managed.GSCameraGraph.CameraGraphNode_GiantSkill
// (Native, Public, BlueprintCallable)
// Parameters:
// uint8                                   bEnable                                                (Parm, NoDestructor, HasGetValueTypeHash)

void UGSCameraGraph::CameraGraphNode_GiantSkill(uint8 bEnable)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GSCameraGraph", "CameraGraphNode_GiantSkill");

	Params::GSCameraGraph_CameraGraphNode_GiantSkill Parms{};

	Parms.bEnable = bEnable;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function b1-Managed.GSCameraGraph.CameraGraphNode_SplineMove
// (Native, Public, BlueprintCallable)
// Parameters:
// uint8                                   bEnable                                                (Parm, NoDestructor, HasGetValueTypeHash)
// float                                   CameraPitchAdditive                                    (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// float                                   CameraYawAdditive                                      (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UGSCameraGraph::CameraGraphNode_SplineMove(uint8 bEnable, float CameraPitchAdditive, float CameraYawAdditive)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GSCameraGraph", "CameraGraphNode_SplineMove");

	Params::GSCameraGraph_CameraGraphNode_SplineMove Parms{};

	Parms.bEnable = bEnable;
	Parms.CameraPitchAdditive = CameraPitchAdditive;
	Parms.CameraYawAdditive = CameraYawAdditive;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function b1-Managed.GSCameraGraph.CameraGraphNode_FixedParam
// (Native, Public, BlueprintCallable)
// Parameters:
// uint8                                   bEnable                                                (Parm, NoDestructor, HasGetValueTypeHash)

void UGSCameraGraph::CameraGraphNode_FixedParam(uint8 bEnable)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GSCameraGraph", "CameraGraphNode_FixedParam");

	Params::GSCameraGraph_CameraGraphNode_FixedParam Parms{};

	Parms.bEnable = bEnable;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function b1-Managed.GSCameraGraph.CameraGraphNode_LockSkill
// (Native, Public, BlueprintCallable)
// Parameters:
// uint8                                   bEnable                                                (Parm, NoDestructor, HasGetValueTypeHash)

void UGSCameraGraph::CameraGraphNode_LockSkill(uint8 bEnable)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GSCameraGraph", "CameraGraphNode_LockSkill");

	Params::GSCameraGraph_CameraGraphNode_LockSkill Parms{};

	Parms.bEnable = bEnable;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function b1-Managed.GSCameraGraph.CameraGraphNode_AutoTrail
// (Native, Public, BlueprintCallable)
// Parameters:
// uint8                                   bEnable                                                (Parm, NoDestructor, HasGetValueTypeHash)
// float                                   InCameraRotationRate                                   (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// float                                   InCameraRotationAccelerate                             (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// float                                   InCameraRotationVelocityThreshold                      (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// float                                   InFallingAdjustAngleLimit                              (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// float                                   InFallingAdjustSpeedPercent                            (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UGSCameraGraph::CameraGraphNode_AutoTrail(uint8 bEnable, float InCameraRotationRate, float InCameraRotationAccelerate, float InCameraRotationVelocityThreshold, float InFallingAdjustAngleLimit, float InFallingAdjustSpeedPercent)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GSCameraGraph", "CameraGraphNode_AutoTrail");

	Params::GSCameraGraph_CameraGraphNode_AutoTrail Parms{};

	Parms.bEnable = bEnable;
	Parms.InCameraRotationRate = InCameraRotationRate;
	Parms.InCameraRotationAccelerate = InCameraRotationAccelerate;
	Parms.InCameraRotationVelocityThreshold = InCameraRotationVelocityThreshold;
	Parms.InFallingAdjustAngleLimit = InFallingAdjustAngleLimit;
	Parms.InFallingAdjustSpeedPercent = InFallingAdjustSpeedPercent;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function b1-Managed.GSCameraGraph.CameraGraphNode_Player
// (Native, Public, BlueprintCallable)
// Parameters:
// uint8                                   bEnable                                                (Parm, NoDestructor, HasGetValueTypeHash)

void UGSCameraGraph::CameraGraphNode_Player(uint8 bEnable)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GSCameraGraph", "CameraGraphNode_Player");

	Params::GSCameraGraph_CameraGraphNode_Player Parms{};

	Parms.bEnable = bEnable;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function b1-Managed.GSCameraGraph.CameraGraphNode_Curve
// (Native, Public, BlueprintCallable)
// Parameters:
// uint8                                   bEnable                                                (Parm, NoDestructor, HasGetValueTypeHash)

void UGSCameraGraph::CameraGraphNode_Curve(uint8 bEnable)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GSCameraGraph", "CameraGraphNode_Curve");

	Params::GSCameraGraph_CameraGraphNode_Curve Parms{};

	Parms.bEnable = bEnable;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function b1-Managed.GSCameraGraph.CameraGraphNode_Giant
// (Native, Public, BlueprintCallable)
// Parameters:
// uint8                                   bEnable                                                (Parm, NoDestructor, HasGetValueTypeHash)

void UGSCameraGraph::CameraGraphNode_Giant(uint8 bEnable)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GSCameraGraph", "CameraGraphNode_Giant");

	Params::GSCameraGraph_CameraGraphNode_Giant Parms{};

	Parms.bEnable = bEnable;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function b1-Managed.GSCameraGraph.CameraGraphNode_Lock
// (Native, Public, BlueprintCallable)
// Parameters:
// uint8                                   bEnable                                                (Parm, NoDestructor, HasGetValueTypeHash)

void UGSCameraGraph::CameraGraphNode_Lock(uint8 bEnable)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GSCameraGraph", "CameraGraphNode_Lock");

	Params::GSCameraGraph_CameraGraphNode_Lock Parms{};

	Parms.bEnable = bEnable;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function b1-Managed.GSCameraGraph.CameraGraphNode_Dead
// (Native, Public, BlueprintCallable)
// Parameters:
// uint8                                   bEnable                                                (Parm, NoDestructor, HasGetValueTypeHash)
// float                                   ArmLength                                              (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// float                                   ArmLengthSpeed                                         (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// float                                   CameraPitch                                            (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// float                                   CameraPitchSpeed                                       (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UGSCameraGraph::CameraGraphNode_Dead(uint8 bEnable, float ArmLength, float ArmLengthSpeed, float CameraPitch, float CameraPitchSpeed)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GSCameraGraph", "CameraGraphNode_Dead");

	Params::GSCameraGraph_CameraGraphNode_Dead Parms{};

	Parms.bEnable = bEnable;
	Parms.ArmLength = ArmLength;
	Parms.ArmLengthSpeed = ArmLengthSpeed;
	Parms.CameraPitch = CameraPitch;
	Parms.CameraPitchSpeed = CameraPitchSpeed;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function b1-Managed.GSCameraGraph.TargetExtendIDEqual
// (Native, Public, HasOutParams, BlueprintCallable, BlueprintPure)
// Parameters:
// int32                                   ExtendID                                               (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// uint8                                   ReturnValue                                            (Parm, OutParm, ReturnParm, NoDestructor, HasGetValueTypeHash)

uint8 UGSCameraGraph::TargetExtendIDEqual(int32 ExtendID)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GSCameraGraph", "TargetExtendIDEqual");

	Params::GSCameraGraph_TargetExtendIDEqual Parms{};

	Parms.ExtendID = ExtendID;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function b1-Managed.GSCameraGraph.CameraGraphNode_G4
// (Native, Public, BlueprintCallable)
// Parameters:
// uint8                                   bEnable                                                (Parm, NoDestructor, HasGetValueTypeHash)

void UGSCameraGraph::CameraGraphNode_G4(uint8 bEnable)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GSCameraGraph", "CameraGraphNode_G4");

	Params::GSCameraGraph_CameraGraphNode_G4 Parms{};

	Parms.bEnable = bEnable;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function b1-Managed.GSCameraGraph.OnCameraGraphTick
// (Native, Event, Public, Protected, BlueprintEvent)

void UGSCameraGraph::OnCameraGraphTick()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GSCameraGraph", "OnCameraGraphTick");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function b1-Managed.GSCameraGraph.IsUseGuiBeiCamera
// (Native, Public, HasOutParams, BlueprintCallable, BlueprintPure)
// Parameters:
// uint8                                   ReturnValue                                            (Parm, OutParm, ReturnParm, NoDestructor, HasGetValueTypeHash)

uint8 UGSCameraGraph::IsUseGuiBeiCamera()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GSCameraGraph", "IsUseGuiBeiCamera");

	Params::GSCameraGraph_IsUseGuiBeiCamera Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function b1-Managed.GSCameraGraph.HasNoCameraInput
// (Native, Public, HasOutParams, BlueprintCallable, BlueprintPure)
// Parameters:
// float                                   DurationTime                                           (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// uint8                                   ReturnValue                                            (Parm, OutParm, ReturnParm, NoDestructor, HasGetValueTypeHash)

uint8 UGSCameraGraph::HasNoCameraInput(float DurationTime)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GSCameraGraph", "HasNoCameraInput");

	Params::GSCameraGraph_HasNoCameraInput Parms{};

	Parms.DurationTime = DurationTime;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function b1-Managed.GSCameraGraph.TargetResIDEqual
// (Native, Public, HasOutParams, BlueprintCallable, BlueprintPure)
// Parameters:
// int32                                   TargetResID                                            (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// uint8                                   ReturnValue                                            (Parm, OutParm, ReturnParm, NoDestructor, HasGetValueTypeHash)

uint8 UGSCameraGraph::TargetResIDEqual(int32 TargetResID)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GSCameraGraph", "TargetResIDEqual");

	Params::GSCameraGraph_TargetResIDEqual Parms{};

	Parms.TargetResID = TargetResID;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function b1-Managed.GSCameraGraph.HasTarget
// (Native, Public, HasOutParams, BlueprintCallable, BlueprintPure)
// Parameters:
// uint8                                   ReturnValue                                            (Parm, OutParm, ReturnParm, NoDestructor, HasGetValueTypeHash)

uint8 UGSCameraGraph::HasTarget()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GSCameraGraph", "HasTarget");

	Params::GSCameraGraph_HasTarget Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function b1-Managed.GSCameraGraph.IsLocked
// (Native, Public, HasOutParams, BlueprintCallable, BlueprintPure)
// Parameters:
// uint8                                   ReturnValue                                            (Parm, OutParm, ReturnParm, NoDestructor, HasGetValueTypeHash)

uint8 UGSCameraGraph::IsLocked()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GSCameraGraph", "IsLocked");

	Params::GSCameraGraph_IsLocked Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function b1-Managed.GSCameraGraph.IsG4Mode
// (Native, Public, HasOutParams, BlueprintCallable, BlueprintPure)
// Parameters:
// uint8                                   ReturnValue                                            (Parm, OutParm, ReturnParm, NoDestructor, HasGetValueTypeHash)

uint8 UGSCameraGraph::IsG4Mode()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GSCameraGraph", "IsG4Mode");

	Params::GSCameraGraph_IsG4Mode Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function b1-Managed.BANSM_ComboWindow.CheckState
// (Native, Event, Public, Protected, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// class UAnimSequenceBase*                AnimBase                                               (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// float                                   CurTime                                                (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// uint8                                   ReturnValue                                            (Parm, OutParm, ReturnParm, NoDestructor, HasGetValueTypeHash)

uint8 UBANSM_ComboWindow::CheckState(class UAnimSequenceBase* AnimBase, float CurTime)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BANSM_ComboWindow", "CheckState");

	Params::BANSM_ComboWindow_CheckState Parms{};

	Parms.AnimBase = AnimBase;
	Parms.CurTime = CurTime;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function b1-Managed.BED_TaskNode_PushTaskStageState.GetNodeDescriptionInCS
// (Native, Event, Public, HasOutParams, BlueprintEvent, Const)
// Parameters:
// class FString                           ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash)

class FString UBED_TaskNode_PushTaskStageState::GetNodeDescriptionInCS() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BED_TaskNode_PushTaskStageState", "GetNodeDescriptionInCS");

	Params::BED_TaskNode_PushTaskStageState_GetNodeDescriptionInCS Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function b1-Managed.BANS_GSPreMontageSectionJumpDetection.GetJumpableSectionPrefix
// (Native, Event, Public, HasOutParams, BlueprintEvent, Const)
// Parameters:
// class FString                           ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash)

class FString UBANS_GSPreMontageSectionJumpDetection::GetJumpableSectionPrefix() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BANS_GSPreMontageSectionJumpDetection", "GetJumpableSectionPrefix");

	Params::BANS_GSPreMontageSectionJumpDetection_GetJumpableSectionPrefix Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function b1-Managed.BANS_GSPreMontageSectionJumpDetection.GSNotifyBeginCS
// (Native, Event, Public, Protected, BlueprintEvent, Const)
// Parameters:
// struct FUStGSNotifyParam                NotifyParam                                            (Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
// float                                   TotalDuration                                          (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UBANS_GSPreMontageSectionJumpDetection::GSNotifyBeginCS(const struct FUStGSNotifyParam& NotifyParam, float TotalDuration) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BANS_GSPreMontageSectionJumpDetection", "GSNotifyBeginCS");

	Params::BANS_GSPreMontageSectionJumpDetection_GSNotifyBeginCS Parms{};

	Parms.NotifyParam = std::move(NotifyParam);
	Parms.TotalDuration = TotalDuration;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function b1-Managed.BANS_GSPreMontageSectionJumpDetection.GetAnimNSType
// (Native, Event, Public, HasOutParams, BlueprintEvent, Const)
// Parameters:
// EGsEnAnimNS                             ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

EGsEnAnimNS UBANS_GSPreMontageSectionJumpDetection::GetAnimNSType() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BANS_GSPreMontageSectionJumpDetection", "GetAnimNSType");

	Params::BANS_GSPreMontageSectionJumpDetection_GetAnimNSType Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function b1-Managed.BANS_GSPreMontageSectionJumpDetection.GSNotifyEndCS
// (Native, Event, Public, Protected, BlueprintEvent, Const)
// Parameters:
// struct FUStGSNotifyParam                NotifyParam                                            (Parm, ZeroConstructor, IsPlainOldData, NoDestructor)

void UBANS_GSPreMontageSectionJumpDetection::GSNotifyEndCS(const struct FUStGSNotifyParam& NotifyParam) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BANS_GSPreMontageSectionJumpDetection", "GSNotifyEndCS");

	Params::BANS_GSPreMontageSectionJumpDetection_GSNotifyEndCS Parms{};

	Parms.NotifyParam = std::move(NotifyParam);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function b1-Managed.BUS_MovePhysicsTransformCompImpl.OnRootCompHit
// (Native, Public, Private)
// Parameters:
// class UPrimitiveComponent*              HitComp                                                (ExportObject, Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// class AActor*                           OtherActor                                             (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// class UPrimitiveComponent*              OtherComp                                              (ExportObject, Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// struct FVector                          HitImpule                                              (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// struct FHitResult                       Hit                                                    (Parm, IsPlainOldData, NoDestructor)

void UBUS_MovePhysicsTransformCompImpl::OnRootCompHit(class UPrimitiveComponent* HitComp, class AActor* OtherActor, class UPrimitiveComponent* OtherComp, const struct FVector& HitImpule, const struct FHitResult& Hit)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BUS_MovePhysicsTransformCompImpl", "OnRootCompHit");

	Params::BUS_MovePhysicsTransformCompImpl_OnRootCompHit Parms{};

	Parms.HitComp = HitComp;
	Parms.OtherActor = OtherActor;
	Parms.OtherComp = OtherComp;
	Parms.HitImpule = std::move(HitImpule);
	Parms.Hit = std::move(Hit);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function b1-Managed.BUS_PatrolCompImpl.OnTriggerBoxOverlap
// (Native, Public, Private)
// Parameters:
// class AActor*                           OverlapActor                                           (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// class AActor*                           OtherActor                                             (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UBUS_PatrolCompImpl::OnTriggerBoxOverlap(class AActor* OverlapActor, class AActor* OtherActor)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BUS_PatrolCompImpl", "OnTriggerBoxOverlap");

	Params::BUS_PatrolCompImpl_OnTriggerBoxOverlap Parms{};

	Parms.OverlapActor = OverlapActor;
	Parms.OtherActor = OtherActor;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function b1-Managed.BGG_GameModeB1.GetDefaultPawnClassForController
// (Native, Event, Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// class AController*                      InController                                           (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// class UClass*                           ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

class UClass* ABGG_GameModeB1::GetDefaultPawnClassForController(class AController* InController)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BGG_GameModeB1", "GetDefaultPawnClassForController");

	Params::BGG_GameModeB1_GetDefaultPawnClassForController Parms{};

	Parms.InController = InController;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function b1-Managed.BGG_GameModeB1.HandleMatchIsWaitingToStartCS
// (Native, Event, Public, BlueprintEvent)

void ABGG_GameModeB1::HandleMatchIsWaitingToStartCS()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BGG_GameModeB1", "HandleMatchIsWaitingToStartCS");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function b1-Managed.BGG_GameModeB1.ReceiveEndPlay
// (Native, Event, Public, Protected, BlueprintEvent)
// Parameters:
// EEndPlayReason                          EndPlayReason                                          (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ABGG_GameModeB1::ReceiveEndPlay(EEndPlayReason EndPlayReason)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BGG_GameModeB1", "ReceiveEndPlay");

	Params::BGG_GameModeB1_ReceiveEndPlay Parms{};

	Parms.EndPlayReason = EndPlayReason;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function b1-Managed.BGG_GameModeB1.BeginPlayCS
// (Native, Event, Public, BlueprintEvent)

void ABGG_GameModeB1::BeginPlayCS()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BGG_GameModeB1", "BeginPlayCS");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function b1-Managed.BGG_GameModeB1.PostLoginCS
// (Native, Event, Public, BlueprintEvent)
// Parameters:
// class APlayerController*                NewPlayer                                              (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ABGG_GameModeB1::PostLoginCS(class APlayerController* NewPlayer)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BGG_GameModeB1", "PostLoginCS");

	Params::BGG_GameModeB1_PostLoginCS Parms{};

	Parms.NewPlayer = NewPlayer;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function b1-Managed.BGG_GameModeB1.ReceiveTick
// (Native, Event, Public, BlueprintEvent)
// Parameters:
// float                                   DeltaSeconds                                           (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ABGG_GameModeB1::ReceiveTick(float DeltaSeconds)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BGG_GameModeB1", "ReceiveTick");

	Params::BGG_GameModeB1_ReceiveTick Parms{};

	Parms.DeltaSeconds = DeltaSeconds;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function b1-Managed.BGG_GameModeB1.LoginOutCS
// (Native, Event, Public, BlueprintEvent)
// Parameters:
// class AController*                      Exiting                                                (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ABGG_GameModeB1::LoginOutCS(class AController* Exiting)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BGG_GameModeB1", "LoginOutCS");

	Params::BGG_GameModeB1_LoginOutCS Parms{};

	Parms.Exiting = Exiting;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function b1-Managed.BGG_GameModeB1.PreLoginCS
// (Native, Event, Public, HasOutParams, BlueprintEvent)
// Parameters:
// class FString                           Options                                                (Parm, ZeroConstructor, HasGetValueTypeHash)
// class FString                           LoginAddress                                           (Parm, ZeroConstructor, HasGetValueTypeHash)
// class FString                           UniqueId                                               (Parm, ZeroConstructor, HasGetValueTypeHash)
// class FString                           ErrorMessage                                           (Parm, OutParm, ZeroConstructor, HasGetValueTypeHash)

void ABGG_GameModeB1::PreLoginCS(const class FString& Options, const class FString& LoginAddress, const class FString& UniqueId, class FString* ErrorMessage)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BGG_GameModeB1", "PreLoginCS");

	Params::BGG_GameModeB1_PreLoginCS Parms{};

	Parms.Options = std::move(Options);
	Parms.LoginAddress = std::move(LoginAddress);
	Parms.UniqueId = std::move(UniqueId);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	if (ErrorMessage != nullptr)
		*ErrorMessage = std::move(Parms.ErrorMessage);
}


// Function b1-Managed.BANS_GSAMCurveMove.GSNotifyBeginCS
// (Native, Event, Public, Protected, BlueprintEvent, Const)
// Parameters:
// struct FUStGSNotifyParam                NotifyParam                                            (Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
// float                                   TotalDuration                                          (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UBANS_GSAMCurveMove::GSNotifyBeginCS(const struct FUStGSNotifyParam& NotifyParam, float TotalDuration) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BANS_GSAMCurveMove", "GSNotifyBeginCS");

	Params::BANS_GSAMCurveMove_GSNotifyBeginCS Parms{};

	Parms.NotifyParam = std::move(NotifyParam);
	Parms.TotalDuration = TotalDuration;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function b1-Managed.BANS_GSAMCurveMove.GSNotifyEndCS
// (Native, Event, Public, Protected, BlueprintEvent, Const)
// Parameters:
// struct FUStGSNotifyParam                NotifyParam                                            (Parm, ZeroConstructor, IsPlainOldData, NoDestructor)

void UBANS_GSAMCurveMove::GSNotifyEndCS(const struct FUStGSNotifyParam& NotifyParam) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BANS_GSAMCurveMove", "GSNotifyEndCS");

	Params::BANS_GSAMCurveMove_GSNotifyEndCS Parms{};

	Parms.NotifyParam = std::move(NotifyParam);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function b1-Managed.BUS_SeqHelperComp.BeginPlayInCS
// (Native, Event, Public, BlueprintEvent)

void UBUS_SeqHelperComp::BeginPlayInCS()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BUS_SeqHelperComp", "BeginPlayInCS");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function b1-Managed.BUS_SeqHelperComp.SetCharacterCollisionProfile
// (Native, Public, BlueprintCallable)
// Parameters:
// class FName                             CollisionProfileName                                   (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UBUS_SeqHelperComp::SetCharacterCollisionProfile(class FName CollisionProfileName)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BUS_SeqHelperComp", "SetCharacterCollisionProfile");

	Params::BUS_SeqHelperComp_SetCharacterCollisionProfile Parms{};

	Parms.CollisionProfileName = CollisionProfileName;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function b1-Managed.BUS_SeqHelperComp.OverrideAIPerceptionSetting
// (Native, Public, BlueprintCallable)
// Parameters:
// uint8                                   InEnableVisualize                                      (Parm, NoDestructor, HasGetValueTypeHash)
// float                                   InSightRange                                           (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// float                                   InVisionAngleDegrees                                   (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// float                                   InHearRange                                            (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// float                                   InPursuitRange                                         (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UBUS_SeqHelperComp::OverrideAIPerceptionSetting(uint8 InEnableVisualize, float InSightRange, float InVisionAngleDegrees, float InHearRange, float InPursuitRange)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BUS_SeqHelperComp", "OverrideAIPerceptionSetting");

	Params::BUS_SeqHelperComp_OverrideAIPerceptionSetting Parms{};

	Parms.InEnableVisualize = InEnableVisualize;
	Parms.InSightRange = InSightRange;
	Parms.InVisionAngleDegrees = InVisionAngleDegrees;
	Parms.InHearRange = InHearRange;
	Parms.InPursuitRange = InPursuitRange;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function b1-Managed.BUS_SeqHelperComp.SetMoveToTargetTransform
// (Native, Public, BlueprintCallable)
// Parameters:
// struct FTransform                       Transform                                              (Parm, IsPlainOldData, NoDestructor)

void UBUS_SeqHelperComp::SetMoveToTargetTransform(const struct FTransform& Transform)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BUS_SeqHelperComp", "SetMoveToTargetTransform");

	Params::BUS_SeqHelperComp_SetMoveToTargetTransform Parms{};

	Parms.Transform = std::move(Transform);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function b1-Managed.BUS_SeqHelperComp.PerformMoveToLocation
// (Native, Public, BlueprintCallable)
// Parameters:
// struct FVector                          Position                                               (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// EAIMoveSpeedType                        SpeedRateType                                          (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// float                                   AcceptableRadius                                       (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// EBGUMoveAIType                          MoveAIType                                             (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// uint8                                   IncludeSelfRadius                                      (Parm, NoDestructor, HasGetValueTypeHash)
// uint8                                   IncludeTargetRadius                                    (Parm, NoDestructor, HasGetValueTypeHash)

void UBUS_SeqHelperComp::PerformMoveToLocation(const struct FVector& Position, EAIMoveSpeedType SpeedRateType, float AcceptableRadius, EBGUMoveAIType MoveAIType, uint8 IncludeSelfRadius, uint8 IncludeTargetRadius)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BUS_SeqHelperComp", "PerformMoveToLocation");

	Params::BUS_SeqHelperComp_PerformMoveToLocation Parms{};

	Parms.Position = std::move(Position);
	Parms.SpeedRateType = SpeedRateType;
	Parms.AcceptableRadius = AcceptableRadius;
	Parms.MoveAIType = MoveAIType;
	Parms.IncludeSelfRadius = IncludeSelfRadius;
	Parms.IncludeTargetRadius = IncludeTargetRadius;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function b1-Managed.BUS_SeqHelperComp.PerformPerceivePlayer
// (Native, Public, BlueprintCallable)

void UBUS_SeqHelperComp::PerformPerceivePlayer()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BUS_SeqHelperComp", "PerformPerceivePlayer");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function b1-Managed.BUS_SeqHelperComp.PerformMoveToPlayer
// (Native, Public, BlueprintCallable)
// Parameters:
// EAIMoveSpeedType                        SpeedRateType                                          (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// float                                   AcceptableRadius                                       (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// EBGUMoveAIType                          MoveAIType                                             (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// uint8                                   IncludeSelfRadius                                      (Parm, NoDestructor, HasGetValueTypeHash)
// uint8                                   IncludeTargetRadius                                    (Parm, NoDestructor, HasGetValueTypeHash)

void UBUS_SeqHelperComp::PerformMoveToPlayer(EAIMoveSpeedType SpeedRateType, float AcceptableRadius, EBGUMoveAIType MoveAIType, uint8 IncludeSelfRadius, uint8 IncludeTargetRadius)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BUS_SeqHelperComp", "PerformMoveToPlayer");

	Params::BUS_SeqHelperComp_PerformMoveToPlayer Parms{};

	Parms.SpeedRateType = SpeedRateType;
	Parms.AcceptableRadius = AcceptableRadius;
	Parms.MoveAIType = MoveAIType;
	Parms.IncludeSelfRadius = IncludeSelfRadius;
	Parms.IncludeTargetRadius = IncludeTargetRadius;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function b1-Managed.BUS_SeqHelperComp.UpdateSimpleStates
// (Native, Public, BlueprintCallable)
// Parameters:
// EBGUSimpleState                         SimpleState                                            (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// uint8                                   IsRemoving                                             (Parm, NoDestructor, HasGetValueTypeHash)

void UBUS_SeqHelperComp::UpdateSimpleStates(EBGUSimpleState SimpleState, uint8 IsRemoving)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BUS_SeqHelperComp", "UpdateSimpleStates");

	Params::BUS_SeqHelperComp_UpdateSimpleStates Parms{};

	Parms.SimpleState = SimpleState;
	Parms.IsRemoving = IsRemoving;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function b1-Managed.BUS_SeqHelperComp.NotifyUnitDead
// (Native, Public, BlueprintCallable)

void UBUS_SeqHelperComp::NotifyUnitDead()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BUS_SeqHelperComp", "NotifyUnitDead");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function b1-Managed.BUS_SeqHelperComp.PerformPatrol
// (Native, Public, BlueprintCallable)

void UBUS_SeqHelperComp::PerformPatrol()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BUS_SeqHelperComp", "PerformPatrol");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function b1-Managed.BUS_SeqHelperComp.PerformJump
// (Native, Public, BlueprintCallable)
// Parameters:
// class UAnimMontage*                     JumpMontage                                            (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// float                                   JumpForce                                              (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UBUS_SeqHelperComp::PerformJump(class UAnimMontage* JumpMontage, float JumpForce)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BUS_SeqHelperComp", "PerformJump");

	Params::BUS_SeqHelperComp_PerformJump Parms{};

	Parms.JumpMontage = JumpMontage;
	Parms.JumpForce = JumpForce;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function b1-Managed.BUS_SeqHelperComp.DisableAI
// (Native, Public, BlueprintCallable)

void UBUS_SeqHelperComp::DisableAI()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BUS_SeqHelperComp", "DisableAI");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function b1-Managed.BUS_SeqHelperComp.EnableAI
// (Native, Public, BlueprintCallable)

void UBUS_SeqHelperComp::EnableAI()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BUS_SeqHelperComp", "EnableAI");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function b1-Managed.GSEaseFunc.EaseInOutQuint
// (Native, Static, Public, HasOutParams, BlueprintCallable)
// Parameters:
// float                                   Start                                                  (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// float                                   End                                                    (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// float                                   Alpha                                                  (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// float                                   Param                                                  (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// float                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

float UGSEaseFunc::EaseInOutQuint(float Start, float End, float Alpha, float Param)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("GSEaseFunc", "EaseInOutQuint");

	Params::GSEaseFunc_EaseInOutQuint Parms{};

	Parms.Start = Start;
	Parms.End = End;
	Parms.Alpha = Alpha;
	Parms.Param = Param;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function b1-Managed.GSEaseFunc.BackEaseInOut
// (Native, Static, Public, HasOutParams, BlueprintCallable)
// Parameters:
// float                                   Start                                                  (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// float                                   End                                                    (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// float                                   Alpha                                                  (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// float                                   Param                                                  (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// float                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

float UGSEaseFunc::BackEaseInOut(float Start, float End, float Alpha, float Param)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("GSEaseFunc", "BackEaseInOut");

	Params::GSEaseFunc_BackEaseInOut Parms{};

	Parms.Start = Start;
	Parms.End = End;
	Parms.Alpha = Alpha;
	Parms.Param = Param;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function b1-Managed.GSEaseFunc.EaseTransform
// (Native, Static, Public, HasOutParams, BlueprintCallable)
// Parameters:
// ENGSEasingFunc                          ENGSEasingFunc                                         (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// struct FTransform                       Start                                                  (Parm, IsPlainOldData, NoDestructor)
// struct FTransform                       End                                                    (Parm, IsPlainOldData, NoDestructor)
// float                                   Alpha                                                  (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// float                                   Param                                                  (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// float                                   BlendExp                                               (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// int32                                   Steps                                                  (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// struct FTransform                       ReturnValue                                            (Parm, OutParm, ReturnParm, IsPlainOldData, NoDestructor)

struct FTransform UGSEaseFunc::EaseTransform(ENGSEasingFunc ENGSEasingFunc, const struct FTransform& Start, const struct FTransform& End, float Alpha, float Param, float BlendExp, int32 Steps)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("GSEaseFunc", "EaseTransform");

	Params::GSEaseFunc_EaseTransform Parms{};

	Parms.ENGSEasingFunc = ENGSEasingFunc;
	Parms.Start = std::move(Start);
	Parms.End = std::move(End);
	Parms.Alpha = Alpha;
	Parms.Param = Param;
	Parms.BlendExp = BlendExp;
	Parms.Steps = Steps;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function b1-Managed.GSEaseFunc.EaseInQuart
// (Native, Static, Public, HasOutParams, BlueprintCallable)
// Parameters:
// float                                   Start                                                  (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// float                                   End                                                    (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// float                                   Alpha                                                  (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// float                                   Param                                                  (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// float                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

float UGSEaseFunc::EaseInQuart(float Start, float End, float Alpha, float Param)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("GSEaseFunc", "EaseInQuart");

	Params::GSEaseFunc_EaseInQuart Parms{};

	Parms.Start = Start;
	Parms.End = End;
	Parms.Alpha = Alpha;
	Parms.Param = Param;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function b1-Managed.GSEaseFunc.BackEaseOut
// (Native, Static, Public, HasOutParams, BlueprintCallable)
// Parameters:
// float                                   Start                                                  (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// float                                   End                                                    (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// float                                   Alpha                                                  (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// float                                   Param                                                  (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// float                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

float UGSEaseFunc::BackEaseOut(float Start, float End, float Alpha, float Param)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("GSEaseFunc", "BackEaseOut");

	Params::GSEaseFunc_BackEaseOut Parms{};

	Parms.Start = Start;
	Parms.End = End;
	Parms.Alpha = Alpha;
	Parms.Param = Param;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function b1-Managed.GSEaseFunc.EaseRotator
// (Native, Static, Public, HasOutParams, BlueprintCallable)
// Parameters:
// ENGSEasingFunc                          ENGSEasingFunc                                         (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// struct FRotator                         Start                                                  (Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
// struct FRotator                         End                                                    (Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
// float                                   Alpha                                                  (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// float                                   Param                                                  (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// float                                   BlendExp                                               (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// int32                                   Steps                                                  (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// struct FRotator                         ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor)

struct FRotator UGSEaseFunc::EaseRotator(ENGSEasingFunc ENGSEasingFunc, const struct FRotator& Start, const struct FRotator& End, float Alpha, float Param, float BlendExp, int32 Steps)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("GSEaseFunc", "EaseRotator");

	Params::GSEaseFunc_EaseRotator Parms{};

	Parms.ENGSEasingFunc = ENGSEasingFunc;
	Parms.Start = std::move(Start);
	Parms.End = std::move(End);
	Parms.Alpha = Alpha;
	Parms.Param = Param;
	Parms.BlendExp = BlendExp;
	Parms.Steps = Steps;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function b1-Managed.GSEaseFunc.BackEaseIn
// (Native, Static, Public, HasOutParams, BlueprintCallable)
// Parameters:
// float                                   Start                                                  (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// float                                   End                                                    (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// float                                   Alpha                                                  (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// float                                   Param                                                  (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// float                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

float UGSEaseFunc::BackEaseIn(float Start, float End, float Alpha, float Param)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("GSEaseFunc", "BackEaseIn");

	Params::GSEaseFunc_BackEaseIn Parms{};

	Parms.Start = Start;
	Parms.End = End;
	Parms.Alpha = Alpha;
	Parms.Param = Param;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function b1-Managed.GSEaseFunc.EaseVector
// (Native, Static, Public, HasOutParams, BlueprintCallable)
// Parameters:
// ENGSEasingFunc                          ENGSEasingFunc                                         (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// struct FVector                          Start                                                  (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// struct FVector                          End                                                    (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// float                                   Alpha                                                  (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// float                                   Param                                                  (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// float                                   BlendExp                                               (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// int32                                   Steps                                                  (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// struct FVector                          ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

struct FVector UGSEaseFunc::EaseVector(ENGSEasingFunc ENGSEasingFunc, const struct FVector& Start, const struct FVector& End, float Alpha, float Param, float BlendExp, int32 Steps)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("GSEaseFunc", "EaseVector");

	Params::GSEaseFunc_EaseVector Parms{};

	Parms.ENGSEasingFunc = ENGSEasingFunc;
	Parms.Start = std::move(Start);
	Parms.End = std::move(End);
	Parms.Alpha = Alpha;
	Parms.Param = Param;
	Parms.BlendExp = BlendExp;
	Parms.Steps = Steps;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function b1-Managed.GSEaseFunc.EaseColor
// (Native, Static, Public, HasOutParams, BlueprintCallable)
// Parameters:
// ENGSEasingFunc                          ENGSEasingFunc                                         (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// struct FColor                           Start                                                  (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// struct FColor                           End                                                    (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// float                                   Alpha                                                  (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// float                                   Param                                                  (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// float                                   BlendExp                                               (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// int32                                   Steps                                                  (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// struct FColor                           ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

struct FColor UGSEaseFunc::EaseColor(ENGSEasingFunc ENGSEasingFunc, const struct FColor& Start, const struct FColor& End, float Alpha, float Param, float BlendExp, int32 Steps)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("GSEaseFunc", "EaseColor");

	Params::GSEaseFunc_EaseColor Parms{};

	Parms.ENGSEasingFunc = ENGSEasingFunc;
	Parms.Start = std::move(Start);
	Parms.End = std::move(End);
	Parms.Alpha = Alpha;
	Parms.Param = Param;
	Parms.BlendExp = BlendExp;
	Parms.Steps = Steps;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function b1-Managed.GSEaseFunc.Ease
// (Native, Static, Public, HasOutParams, BlueprintCallable)
// Parameters:
// ENGSEasingFunc                          ENGSEasingFunc                                         (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// float                                   Start                                                  (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// float                                   End                                                    (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// float                                   Alpha                                                  (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// float                                   Param                                                  (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// float                                   BlendExp                                               (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// int32                                   Steps                                                  (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// float                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

float UGSEaseFunc::Ease(ENGSEasingFunc ENGSEasingFunc, float Start, float End, float Alpha, float Param, float BlendExp, int32 Steps)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("GSEaseFunc", "Ease");

	Params::GSEaseFunc_Ease Parms{};

	Parms.ENGSEasingFunc = ENGSEasingFunc;
	Parms.Start = Start;
	Parms.End = End;
	Parms.Alpha = Alpha;
	Parms.Param = Param;
	Parms.BlendExp = BlendExp;
	Parms.Steps = Steps;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function b1-Managed.GSEaseFunc.Sin
// (Native, Static, Public, HasOutParams, BlueprintCallable)
// Parameters:
// float                                   Start                                                  (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// float                                   End                                                    (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// float                                   Alpha                                                  (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// float                                   Param                                                  (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// float                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

float UGSEaseFunc::Sin(float Start, float End, float Alpha, float Param)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("GSEaseFunc", "Sin");

	Params::GSEaseFunc_Sin Parms{};

	Parms.Start = Start;
	Parms.End = End;
	Parms.Alpha = Alpha;
	Parms.Param = Param;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function b1-Managed.BGUFuncLibNonRuntime.BGUMigrateDataFromUnitCommDesc_OverrideData
// (Native, Static, Public, BlueprintCallable)
// Parameters:
// class FString                           BlameName                                              (Parm, ZeroConstructor, HasGetValueTypeHash)

void UBGUFuncLibNonRuntime::BGUMigrateDataFromUnitCommDesc_OverrideData(const class FString& BlameName)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("BGUFuncLibNonRuntime", "BGUMigrateDataFromUnitCommDesc_OverrideData");

	Params::BGUFuncLibNonRuntime_BGUMigrateDataFromUnitCommDesc_OverrideData Parms{};

	Parms.BlameName = std::move(BlameName);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function b1-Managed.BGUFuncLibNonRuntime.BGUEditorRecordSubLevelsInLevelPackage
// (Native, Static, Public, BlueprintCallable)
// Parameters:
// class FString                           LevelAsset                                             (Parm, ZeroConstructor, HasGetValueTypeHash)
// class FString                           RecordFilePath                                         (Parm, ZeroConstructor, HasGetValueTypeHash)

void UBGUFuncLibNonRuntime::BGUEditorRecordSubLevelsInLevelPackage(const class FString& LevelAsset, const class FString& RecordFilePath)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("BGUFuncLibNonRuntime", "BGUEditorRecordSubLevelsInLevelPackage");

	Params::BGUFuncLibNonRuntime_BGUEditorRecordSubLevelsInLevelPackage Parms{};

	Parms.LevelAsset = std::move(LevelAsset);
	Parms.RecordFilePath = std::move(RecordFilePath);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function b1-Managed.BGUFuncLibNonRuntime.BGUAutoAddFootSyncMarkerToAnimSequence
// (Native, Static, Public, HasOutParams, BlueprintCallable)
// Parameters:
// class UAnimSequence*                    AnimSequence                                           (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// class FName                             LeftFootBoneName                                       (Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// class FName                             RightFootBoneName                                      (Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// float                                   GroundFootLimitHeight                                  (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// uint8                                   ReturnValue                                            (Parm, OutParm, ReturnParm, NoDestructor, HasGetValueTypeHash)

uint8 UBGUFuncLibNonRuntime::BGUAutoAddFootSyncMarkerToAnimSequence(class UAnimSequence* AnimSequence, class FName& LeftFootBoneName, class FName& RightFootBoneName, float GroundFootLimitHeight)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("BGUFuncLibNonRuntime", "BGUAutoAddFootSyncMarkerToAnimSequence");

	Params::BGUFuncLibNonRuntime_BGUAutoAddFootSyncMarkerToAnimSequence Parms{};

	Parms.AnimSequence = AnimSequence;
	Parms.LeftFootBoneName = LeftFootBoneName;
	Parms.RightFootBoneName = RightFootBoneName;
	Parms.GroundFootLimitHeight = GroundFootLimitHeight;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	LeftFootBoneName = Parms.LeftFootBoneName;
	RightFootBoneName = Parms.RightFootBoneName;

	return Parms.ReturnValue;
}


// Function b1-Managed.BGUFuncLibNonRuntime.BGUDeserializeActorTransformsFromJson
// (Native, Static, Public, HasOutParams, BlueprintCallable)
// Parameters:
// class FString                           JsonPath                                               (Parm, ZeroConstructor, HasGetValueTypeHash)
// TArray<class AActor*>                   ActorsToDeserialize                                    (Parm, OutParm, ReferenceParm)

void UBGUFuncLibNonRuntime::BGUDeserializeActorTransformsFromJson(const class FString& JsonPath, TArray<class AActor*>& ActorsToDeserialize)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("BGUFuncLibNonRuntime", "BGUDeserializeActorTransformsFromJson");

	Params::BGUFuncLibNonRuntime_BGUDeserializeActorTransformsFromJson Parms{};

	Parms.JsonPath = std::move(JsonPath);
	Parms.ActorsToDeserialize = std::move(ActorsToDeserialize);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	ActorsToDeserialize = std::move(Parms.ActorsToDeserialize);
}


// Function b1-Managed.BGUFuncLibNonRuntime.BGUGetLeftFootHeightByFootStepConfig
// (Native, Static, Public, HasOutParams, BlueprintCallable, BlueprintPure)
// Parameters:
// int32                                   ResID                                                  (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// class USkeletalMeshComponent*           Mesh                                                   (ExportObject, Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// float                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

float UBGUFuncLibNonRuntime::BGUGetLeftFootHeightByFootStepConfig(int32 ResID, class USkeletalMeshComponent* Mesh)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("BGUFuncLibNonRuntime", "BGUGetLeftFootHeightByFootStepConfig");

	Params::BGUFuncLibNonRuntime_BGUGetLeftFootHeightByFootStepConfig Parms{};

	Parms.ResID = ResID;
	Parms.Mesh = Mesh;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function b1-Managed.BGUFuncLibNonRuntime.BGUMigrateDataFromSkillEffectDesc
// (Native, Static, Public, BlueprintCallable)
// Parameters:
// class FString                           BlameName                                              (Parm, ZeroConstructor, HasGetValueTypeHash)

void UBGUFuncLibNonRuntime::BGUMigrateDataFromSkillEffectDesc(const class FString& BlameName)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("BGUFuncLibNonRuntime", "BGUMigrateDataFromSkillEffectDesc");

	Params::BGUFuncLibNonRuntime_BGUMigrateDataFromSkillEffectDesc Parms{};

	Parms.BlameName = std::move(BlameName);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function b1-Managed.BGUFuncLibNonRuntime.BGUSerializeActorTransformsToJson
// (Native, Static, Public, BlueprintCallable)
// Parameters:
// class FString                           JsonPath                                               (Parm, ZeroConstructor, HasGetValueTypeHash)
// TArray<class AActor*>                   Actors                                                 (Parm)

void UBGUFuncLibNonRuntime::BGUSerializeActorTransformsToJson(const class FString& JsonPath, const TArray<class AActor*>& Actors)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("BGUFuncLibNonRuntime", "BGUSerializeActorTransformsToJson");

	Params::BGUFuncLibNonRuntime_BGUSerializeActorTransformsToJson Parms{};

	Parms.JsonPath = std::move(JsonPath);
	Parms.Actors = std::move(Actors);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function b1-Managed.BGUFuncLibNonRuntime.Analysis_BuffUseSpecialHitPartID
// (Native, Static, Public, BlueprintCallable)

void UBGUFuncLibNonRuntime::Analysis_BuffUseSpecialHitPartID()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("BGUFuncLibNonRuntime", "Analysis_BuffUseSpecialHitPartID");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function b1-Managed.BGUFuncLibNonRuntime.AddMagicallyChangeFadeOutNotify
// (Native, Static, Public, BlueprintCallable)
// Parameters:
// class UAnimMontage*                     Montage                                                (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UBGUFuncLibNonRuntime::AddMagicallyChangeFadeOutNotify(class UAnimMontage* Montage)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("BGUFuncLibNonRuntime", "AddMagicallyChangeFadeOutNotify");

	Params::BGUFuncLibNonRuntime_AddMagicallyChangeFadeOutNotify Parms{};

	Parms.Montage = Montage;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function b1-Managed.BGUFuncLibNonRuntime.BGUEditorRecordSubLevelsInWorld
// (Native, Static, Public, BlueprintCallable)
// Parameters:
// class UObject*                          WorldContext                                           (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// class FString                           RecordFilePath                                         (Parm, ZeroConstructor, HasGetValueTypeHash)

void UBGUFuncLibNonRuntime::BGUEditorRecordSubLevelsInWorld(class UObject* WorldContext, const class FString& RecordFilePath)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("BGUFuncLibNonRuntime", "BGUEditorRecordSubLevelsInWorld");

	Params::BGUFuncLibNonRuntime_BGUEditorRecordSubLevelsInWorld Parms{};

	Parms.WorldContext = WorldContext;
	Parms.RecordFilePath = std::move(RecordFilePath);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function b1-Managed.BGUFuncLibNonRuntime.BGUAddNofityStateByPelvisSpeed
// (Native, Static, Public, BlueprintCallable)
// Parameters:
// class UAnimMontage*                     AnimMontage                                            (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// float                                   SpeedThreshold                                         (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// int32                                   BuffID                                                 (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// class UClass*                           NewNotifyStateClass                                    (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// uint8                                   FirstRemoveAddBuffID                                   (Parm, NoDestructor, HasGetValueTypeHash)
// class FString                           SocketName                                             (Parm, ZeroConstructor, HasGetValueTypeHash)
// float                                   TickTime                                               (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UBGUFuncLibNonRuntime::BGUAddNofityStateByPelvisSpeed(class UAnimMontage* AnimMontage, float SpeedThreshold, int32 BuffID, class UClass* NewNotifyStateClass, uint8 FirstRemoveAddBuffID, const class FString& SocketName, float TickTime)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("BGUFuncLibNonRuntime", "BGUAddNofityStateByPelvisSpeed");

	Params::BGUFuncLibNonRuntime_BGUAddNofityStateByPelvisSpeed Parms{};

	Parms.AnimMontage = AnimMontage;
	Parms.SpeedThreshold = SpeedThreshold;
	Parms.BuffID = BuffID;
	Parms.NewNotifyStateClass = NewNotifyStateClass;
	Parms.FirstRemoveAddBuffID = FirstRemoveAddBuffID;
	Parms.SocketName = std::move(SocketName);
	Parms.TickTime = TickTime;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function b1-Managed.BGUFuncLibNonRuntime.BGUMigrateDataFromUnitCommDesc
// (Native, Static, Public, BlueprintCallable)
// Parameters:
// class FString                           BlameName                                              (Parm, ZeroConstructor, HasGetValueTypeHash)

void UBGUFuncLibNonRuntime::BGUMigrateDataFromUnitCommDesc(const class FString& BlameName)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("BGUFuncLibNonRuntime", "BGUMigrateDataFromUnitCommDesc");

	Params::BGUFuncLibNonRuntime_BGUMigrateDataFromUnitCommDesc Parms{};

	Parms.BlameName = std::move(BlameName);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function b1-Managed.BGUFuncLibNonRuntime.GetTemplateClassFromUnitAsset
// (Native, Static, Public, HasOutParams, BlueprintCallable)
// Parameters:
// class UAssetDataArray*                  Assets                                                 (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// class UClass*                           ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

class UClass* UBGUFuncLibNonRuntime::GetTemplateClassFromUnitAsset(class UAssetDataArray* Assets)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("BGUFuncLibNonRuntime", "GetTemplateClassFromUnitAsset");

	Params::BGUFuncLibNonRuntime_GetTemplateClassFromUnitAsset Parms{};

	Parms.Assets = Assets;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function b1-Managed.BGUFuncLibNonRuntime.BGUSetUpDefaultFootstepAudio
// (Native, Static, Public, HasOutParams, BlueprintCallable)
// Parameters:
// class ABUTamerActor*                    TamerActor                                             (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// struct FSoftObjectPath                  AudioPath                                              (Parm, OutParm, ZeroConstructor, ReferenceParm, HasGetValueTypeHash)
// uint8                                   ReturnValue                                            (Parm, OutParm, ReturnParm, NoDestructor, HasGetValueTypeHash)

uint8 UBGUFuncLibNonRuntime::BGUSetUpDefaultFootstepAudio(class ABUTamerActor* TamerActor, struct FSoftObjectPath& AudioPath)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("BGUFuncLibNonRuntime", "BGUSetUpDefaultFootstepAudio");

	Params::BGUFuncLibNonRuntime_BGUSetUpDefaultFootstepAudio Parms{};

	Parms.TamerActor = TamerActor;
	Parms.AudioPath = std::move(AudioPath);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	AudioPath = std::move(Parms.AudioPath);

	return Parms.ReturnValue;
}


// Function b1-Managed.BGUFuncLibNonRuntime.Analysis_BuffUseSimpleState
// (Native, Static, Public, BlueprintCallable)

void UBGUFuncLibNonRuntime::Analysis_BuffUseSimpleState()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("BGUFuncLibNonRuntime", "Analysis_BuffUseSimpleState");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function b1-Managed.BGUFuncLibNonRuntime.CheckUnitCapsuleCollisions
// (Native, Static, Public, HasOutParams, BlueprintCallable)
// Parameters:
// class UObject*                          WorldContext                                           (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// class FString                           ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash)

class FString UBGUFuncLibNonRuntime::CheckUnitCapsuleCollisions(class UObject* WorldContext)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("BGUFuncLibNonRuntime", "CheckUnitCapsuleCollisions");

	Params::BGUFuncLibNonRuntime_CheckUnitCapsuleCollisions Parms{};

	Parms.WorldContext = WorldContext;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function b1-Managed.BGUFuncLibNonRuntime.GetAllSummonBPPathFromDesc
// (Native, Static, Public, HasOutParams, BlueprintCallable)
// Parameters:
// TArray<class FString>                   CurrentUsedBPPath                                      (Parm, OutParm)

void UBGUFuncLibNonRuntime::GetAllSummonBPPathFromDesc(TArray<class FString>* CurrentUsedBPPath)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("BGUFuncLibNonRuntime", "GetAllSummonBPPathFromDesc");

	Params::BGUFuncLibNonRuntime_GetAllSummonBPPathFromDesc Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	if (CurrentUsedBPPath != nullptr)
		*CurrentUsedBPPath = std::move(Parms.CurrentUsedBPPath);
}


// Function b1-Managed.BGUFuncLibNonRuntime.CheckBeAttacked2Resources
// (Native, Static, Public, HasOutParams, BlueprintCallable)
// Parameters:
// uint8                                   bCheckBasicRuleOnly                                    (Parm, NoDestructor, HasGetValueTypeHash)
// class FString                           ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash)

class FString UBGUFuncLibNonRuntime::CheckBeAttacked2Resources(uint8 bCheckBasicRuleOnly)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("BGUFuncLibNonRuntime", "CheckBeAttacked2Resources");

	Params::BGUFuncLibNonRuntime_CheckBeAttacked2Resources Parms{};

	Parms.bCheckBasicRuleOnly = bCheckBasicRuleOnly;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function b1-Managed.BGUFuncLibNonRuntime.UpdateHitAudioPreloadList
// (Native, Static, Public, HasOutParams, BlueprintCallable)
// Parameters:
// TArray<class FString>                   PathList_Exist                                         (Parm, OutParm)
// int32                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

int32 UBGUFuncLibNonRuntime::UpdateHitAudioPreloadList(TArray<class FString>* PathList_Exist)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("BGUFuncLibNonRuntime", "UpdateHitAudioPreloadList");

	Params::BGUFuncLibNonRuntime_UpdateHitAudioPreloadList Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	if (PathList_Exist != nullptr)
		*PathList_Exist = std::move(Parms.PathList_Exist);

	return Parms.ReturnValue;
}


// Function b1-Managed.BGUFuncLibNonRuntime.GetOriFilePathByAssetPath
// (Native, Static, Public, HasOutParams, BlueprintCallable)
// Parameters:
// class FString                           AssetPathName                                          (Parm, ZeroConstructor, HasGetValueTypeHash)
// class FString                           AssetName                                              (Parm, ZeroConstructor, HasGetValueTypeHash)
// class FString                           ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash)

class FString UBGUFuncLibNonRuntime::GetOriFilePathByAssetPath(const class FString& AssetPathName, const class FString& AssetName)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("BGUFuncLibNonRuntime", "GetOriFilePathByAssetPath");

	Params::BGUFuncLibNonRuntime_GetOriFilePathByAssetPath Parms{};

	Parms.AssetPathName = std::move(AssetPathName);
	Parms.AssetName = std::move(AssetName);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function b1-Managed.BGUFuncLibNonRuntime.BGUAutoAddFootLockCurve
// (Native, Static, Public, HasOutParams, BlueprintCallable)
// Parameters:
// class UAnimSequence*                    AnimSequence                                           (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// class FName                             LeftFootBoneName                                       (Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// class FName                             RightFootBoneName                                      (Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// float                                   FootLockHeight                                         (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// float                                   FootUnlockHeight                                       (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// float                                   FootLockSpeed                                          (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// float                                   FootUnlockSpeed                                        (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UBGUFuncLibNonRuntime::BGUAutoAddFootLockCurve(class UAnimSequence* AnimSequence, class FName& LeftFootBoneName, class FName& RightFootBoneName, float FootLockHeight, float FootUnlockHeight, float FootLockSpeed, float FootUnlockSpeed)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("BGUFuncLibNonRuntime", "BGUAutoAddFootLockCurve");

	Params::BGUFuncLibNonRuntime_BGUAutoAddFootLockCurve Parms{};

	Parms.AnimSequence = AnimSequence;
	Parms.LeftFootBoneName = LeftFootBoneName;
	Parms.RightFootBoneName = RightFootBoneName;
	Parms.FootLockHeight = FootLockHeight;
	Parms.FootUnlockHeight = FootUnlockHeight;
	Parms.FootLockSpeed = FootLockSpeed;
	Parms.FootUnlockSpeed = FootUnlockSpeed;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	LeftFootBoneName = Parms.LeftFootBoneName;
	RightFootBoneName = Parms.RightFootBoneName;
}


// Function b1-Managed.BGUFuncLibNonRuntime.BindNormalStiffAMInUBAC
// (Native, Static, Public, BlueprintCallable)
// Parameters:
// class UBGWDataAsset_UnitBeAttackedConfig*UBAC                                                   (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UBGUFuncLibNonRuntime::BindNormalStiffAMInUBAC(class UBGWDataAsset_UnitBeAttackedConfig* UBAC)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("BGUFuncLibNonRuntime", "BindNormalStiffAMInUBAC");

	Params::BGUFuncLibNonRuntime_BindNormalStiffAMInUBAC Parms{};

	Parms.UBAC = UBAC;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function b1-Managed.BGUFuncLibNonRuntime.SetActorCompEditorOnly
// (Native, Static, Public, BlueprintCallable)
// Parameters:
// class UActorComponent*                  ActorComp                                              (ExportObject, Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// uint8                                   bIsEditorOnly                                          (Parm, NoDestructor, HasGetValueTypeHash)

void UBGUFuncLibNonRuntime::SetActorCompEditorOnly(class UActorComponent* ActorComp, uint8 bIsEditorOnly)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("BGUFuncLibNonRuntime", "SetActorCompEditorOnly");

	Params::BGUFuncLibNonRuntime_SetActorCompEditorOnly Parms{};

	Parms.ActorComp = ActorComp;
	Parms.bIsEditorOnly = bIsEditorOnly;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function b1-Managed.BGUFuncLibNonRuntime.GetAllProjectileBPPath
// (Native, Static, Public, HasOutParams, BlueprintCallable)
// Parameters:
// TArray<class FString>                   PathList_Exist                                         (Parm, OutParm)

void UBGUFuncLibNonRuntime::GetAllProjectileBPPath(TArray<class FString>* PathList_Exist)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("BGUFuncLibNonRuntime", "GetAllProjectileBPPath");

	Params::BGUFuncLibNonRuntime_GetAllProjectileBPPath Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	if (PathList_Exist != nullptr)
		*PathList_Exist = std::move(Parms.PathList_Exist);
}


// Function b1-Managed.BGUFuncLibNonRuntime.BindDeathDispAMInUDDC
// (Native, Static, Public, BlueprintCallable)
// Parameters:
// class UBGWDataAsset_UnitDeathDispConfig*UDDC                                                   (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UBGUFuncLibNonRuntime::BindDeathDispAMInUDDC(class UBGWDataAsset_UnitDeathDispConfig* UDDC)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("BGUFuncLibNonRuntime", "BindDeathDispAMInUDDC");

	Params::BGUFuncLibNonRuntime_BindDeathDispAMInUDDC Parms{};

	Parms.UDDC = UDDC;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function b1-Managed.BGUFuncLibNonRuntime.GetResIDFromUnitAsset
// (Native, Static, Public, HasOutParams, BlueprintCallable)
// Parameters:
// class UAssetDataArray*                  Assets                                                 (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// int32                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

int32 UBGUFuncLibNonRuntime::GetResIDFromUnitAsset(class UAssetDataArray* Assets)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("BGUFuncLibNonRuntime", "GetResIDFromUnitAsset");

	Params::BGUFuncLibNonRuntime_GetResIDFromUnitAsset Parms{};

	Parms.Assets = Assets;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function b1-Managed.BGUFuncLibNonRuntime.CheckHitMoveCapsules
// (Native, Static, Public, HasOutParams, BlueprintCallable)
// Parameters:
// class UObject*                          WorldContext                                           (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// class FString                           ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash)

class FString UBGUFuncLibNonRuntime::CheckHitMoveCapsules(class UObject* WorldContext)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("BGUFuncLibNonRuntime", "CheckHitMoveCapsules");

	Params::BGUFuncLibNonRuntime_CheckHitMoveCapsules Parms{};

	Parms.WorldContext = WorldContext;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function b1-Managed.BGUFuncLibNonRuntime.ProjectileSpawnTest
// (Native, Static, Public, BlueprintCallable)
// Parameters:
// class AActor*                           Spawnner                                               (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// class AActor*                           Target                                                 (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// class UBGWDataAsset_ProjectileSpawnConfig*ProjectileSpawnConfig                                  (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UBGUFuncLibNonRuntime::ProjectileSpawnTest(class AActor* Spawnner, class AActor* Target, class UBGWDataAsset_ProjectileSpawnConfig* ProjectileSpawnConfig)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("BGUFuncLibNonRuntime", "ProjectileSpawnTest");

	Params::BGUFuncLibNonRuntime_ProjectileSpawnTest Parms{};

	Parms.Spawnner = Spawnner;
	Parms.Target = Target;
	Parms.ProjectileSpawnConfig = ProjectileSpawnConfig;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function b1-Managed.BGUFuncLibNonRuntime.GetResIDFromAsset
// (Native, Static, Public, HasOutParams, BlueprintCallable)
// Parameters:
// class UAssetDataArray*                  Assets                                                 (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// TArray<class UShapeComponent*>          ReturnValue                                            (Parm, OutParm, ReturnParm)

TArray<class UShapeComponent*> UBGUFuncLibNonRuntime::GetResIDFromAsset(class UAssetDataArray* Assets)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("BGUFuncLibNonRuntime", "GetResIDFromAsset");

	Params::BGUFuncLibNonRuntime_GetResIDFromAsset Parms{};

	Parms.Assets = Assets;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function b1-Managed.BGUFuncLibNonRuntime.BGUCopyABPSetting
// (Native, Static, Public, BlueprintCallable)
// Parameters:
// class UBGWDataAsset_AbpHumanoidSetting* Src                                                    (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// class UBGWDataAsset_AbpHumanoidSetting* Dest                                                   (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UBGUFuncLibNonRuntime::BGUCopyABPSetting(class UBGWDataAsset_AbpHumanoidSetting* Src, class UBGWDataAsset_AbpHumanoidSetting* Dest)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("BGUFuncLibNonRuntime", "BGUCopyABPSetting");

	Params::BGUFuncLibNonRuntime_BGUCopyABPSetting Parms{};

	Parms.Src = Src;
	Parms.Dest = Dest;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function b1-Managed.BGUFuncLibNonRuntime.ScanCBGTemplate
// (Native, Static, Public, BlueprintCallable)

void UBGUFuncLibNonRuntime::ScanCBGTemplate()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("BGUFuncLibNonRuntime", "ScanCBGTemplate");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function b1-Managed.BGUFuncLibNonRuntime.CheckBuffRemove
// (Native, Static, Public, BlueprintCallable)

void UBGUFuncLibNonRuntime::CheckBuffRemove()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("BGUFuncLibNonRuntime", "CheckBuffRemove");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function b1-Managed.BGUFuncLibNonRuntime.BGUIsFileExist
// (Native, Static, Public, HasOutParams, BlueprintCallable)
// Parameters:
// class FString                           PathWithGameHead                                       (Parm, ZeroConstructor, HasGetValueTypeHash)
// class FString                           FullPath                                               (Parm, OutParm, ZeroConstructor, HasGetValueTypeHash)
// uint8                                   ReturnValue                                            (Parm, OutParm, ReturnParm, NoDestructor, HasGetValueTypeHash)

uint8 UBGUFuncLibNonRuntime::BGUIsFileExist(const class FString& PathWithGameHead, class FString* FullPath)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("BGUFuncLibNonRuntime", "BGUIsFileExist");

	Params::BGUFuncLibNonRuntime_BGUIsFileExist Parms{};

	Parms.PathWithGameHead = std::move(PathWithGameHead);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	if (FullPath != nullptr)
		*FullPath = std::move(Parms.FullPath);

	return Parms.ReturnValue;
}


// Function b1-Managed.BGUFuncLibNonRuntime.SkillSVaild
// (Native, Static, Public, HasOutParams, BlueprintCallable)
// Parameters:
// class AActor*                           Unit                                                   (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// int32                                   SkillID                                                (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// uint8                                   ReturnValue                                            (Parm, OutParm, ReturnParm, NoDestructor, HasGetValueTypeHash)

uint8 UBGUFuncLibNonRuntime::SkillSVaild(class AActor* Unit, int32 SkillID)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("BGUFuncLibNonRuntime", "SkillSVaild");

	Params::BGUFuncLibNonRuntime_SkillSVaild Parms{};

	Parms.Unit = Unit;
	Parms.SkillID = SkillID;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function b1-Managed.BGUFuncLibNonRuntime.TestCode
// (Native, Static, Public, HasOutParams, BlueprintCallable)
// Parameters:
// class FString                           ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash)

class FString UBGUFuncLibNonRuntime::TestCode()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("BGUFuncLibNonRuntime", "TestCode");

	Params::BGUFuncLibNonRuntime_TestCode Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function b1-Managed.BGUFuncLibNonRuntime.GetCDO
// (Native, Static, Public, HasOutParams, BlueprintCallable)
// Parameters:
// class UAssetDataArray*                  Assets                                                 (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// class UObject*                          ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

class UObject* UBGUFuncLibNonRuntime::GetCDO(class UAssetDataArray* Assets)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("BGUFuncLibNonRuntime", "GetCDO");

	Params::BGUFuncLibNonRuntime_GetCDO Parms{};

	Parms.Assets = Assets;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function b1-Managed.BUI_Startup.OnChangeNeverShowStartupUI
// (Native, Public)
// Parameters:
// uint8                                   bChecked                                               (Parm, NoDestructor, HasGetValueTypeHash)

void UBUI_Startup::OnChangeNeverShowStartupUI(uint8 bChecked)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BUI_Startup", "OnChangeNeverShowStartupUI");

	Params::BUI_Startup_OnChangeNeverShowStartupUI Parms{};

	Parms.bChecked = bChecked;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function b1-Managed.BUI_Startup.OnChangeDoEnableEnemyBar
// (Native, Public, BlueprintCallable)
// Parameters:
// uint8                                   bChecked                                               (Parm, NoDestructor, HasGetValueTypeHash)

void UBUI_Startup::OnChangeDoEnableEnemyBar(uint8 bChecked)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BUI_Startup", "OnChangeDoEnableEnemyBar");

	Params::BUI_Startup_OnChangeDoEnableEnemyBar Parms{};

	Parms.bChecked = bChecked;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function b1-Managed.BUI_Startup.OnLevelSelectionChanged
// (Native, Public)
// Parameters:
// class FString                           SelectedItem                                           (Parm, ZeroConstructor, HasGetValueTypeHash)
// ESelectInfo                             SelectionType                                          (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UBUI_Startup::OnLevelSelectionChanged(const class FString& SelectedItem, ESelectInfo SelectionType)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BUI_Startup", "OnLevelSelectionChanged");

	Params::BUI_Startup_OnLevelSelectionChanged Parms{};

	Parms.SelectedItem = std::move(SelectedItem);
	Parms.SelectionType = SelectionType;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function b1-Managed.BUI_Startup.OnChangeApplyByDefault
// (Native, Public)
// Parameters:
// uint8                                   bChecked                                               (Parm, NoDestructor, HasGetValueTypeHash)

void UBUI_Startup::OnChangeApplyByDefault(uint8 bChecked)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BUI_Startup", "OnChangeApplyByDefault");

	Params::BUI_Startup_OnChangeApplyByDefault Parms{};

	Parms.bChecked = bChecked;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function b1-Managed.BUI_Startup.OnChangeDoLockEnemyHP
// (Native, Public)
// Parameters:
// uint8                                   bChecked                                               (Parm, NoDestructor, HasGetValueTypeHash)

void UBUI_Startup::OnChangeDoLockEnemyHP(uint8 bChecked)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BUI_Startup", "OnChangeDoLockEnemyHP");

	Params::BUI_Startup_OnChangeDoLockEnemyHP Parms{};

	Parms.bChecked = bChecked;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function b1-Managed.BUI_Startup.OnChangeDoLockStamina
// (Native, Public)
// Parameters:
// uint8                                   bChecked                                               (Parm, NoDestructor, HasGetValueTypeHash)

void UBUI_Startup::OnChangeDoLockStamina(uint8 bChecked)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BUI_Startup", "OnChangeDoLockStamina");

	Params::BUI_Startup_OnChangeDoLockStamina Parms{};

	Parms.bChecked = bChecked;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function b1-Managed.BUI_Startup.OnChangeDoInvincible
// (Native, Public)
// Parameters:
// uint8                                   bChecked                                               (Parm, NoDestructor, HasGetValueTypeHash)

void UBUI_Startup::OnChangeDoInvincible(uint8 bChecked)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BUI_Startup", "OnChangeDoInvincible");

	Params::BUI_Startup_OnChangeDoInvincible Parms{};

	Parms.bChecked = bChecked;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function b1-Managed.BUI_Startup.OnChangeDoLock60FPS
// (Native, Public, BlueprintCallable)
// Parameters:
// uint8                                   bChecked                                               (Parm, NoDestructor, HasGetValueTypeHash)

void UBUI_Startup::OnChangeDoLock60FPS(uint8 bChecked)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BUI_Startup", "OnChangeDoLock60FPS");

	Params::BUI_Startup_OnChangeDoLock60FPS Parms{};

	Parms.bChecked = bChecked;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function b1-Managed.BUI_Startup.OnCMDTextCommitted
// (Native, Public)
// Parameters:
// class FText                             Text                                                   (Parm)
// ETextCommit                             CommitMethod                                           (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UBUI_Startup::OnCMDTextCommitted(const class FText& Text, ETextCommit CommitMethod)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BUI_Startup", "OnCMDTextCommitted");

	Params::BUI_Startup_OnCMDTextCommitted Parms{};

	Parms.Text = std::move(Text);
	Parms.CommitMethod = CommitMethod;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function b1-Managed.BUI_Startup.OnCancelAllEnemyCD
// (Native, Public)
// Parameters:
// uint8                                   bChecked                                               (Parm, NoDestructor, HasGetValueTypeHash)

void UBUI_Startup::OnCancelAllEnemyCD(uint8 bChecked)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BUI_Startup", "OnCancelAllEnemyCD");

	Params::BUI_Startup_OnCancelAllEnemyCD Parms{};

	Parms.bChecked = bChecked;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function b1-Managed.BUI_Startup.OnChangeDoToggleUI
// (Native, Public)
// Parameters:
// uint8                                   bChecked                                               (Parm, NoDestructor, HasGetValueTypeHash)

void UBUI_Startup::OnChangeDoToggleUI(uint8 bChecked)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BUI_Startup", "OnChangeDoToggleUI");

	Params::BUI_Startup_OnChangeDoToggleUI Parms{};

	Parms.bChecked = bChecked;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function b1-Managed.BUI_Startup.OnToggleAllEnemyAI
// (Native, Public)
// Parameters:
// uint8                                   bChecked                                               (Parm, NoDestructor, HasGetValueTypeHash)

void UBUI_Startup::OnToggleAllEnemyAI(uint8 bChecked)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BUI_Startup", "OnToggleAllEnemyAI");

	Params::BUI_Startup_OnToggleAllEnemyAI Parms{};

	Parms.bChecked = bChecked;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function b1-Managed.BUI_Startup.OnChangeDoLockHP2
// (Native, Public)
// Parameters:
// uint8                                   bChecked                                               (Parm, NoDestructor, HasGetValueTypeHash)

void UBUI_Startup::OnChangeDoLockHP2(uint8 bChecked)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BUI_Startup", "OnChangeDoLockHP2");

	Params::BUI_Startup_OnChangeDoLockHP2 Parms{};

	Parms.bChecked = bChecked;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function b1-Managed.BUI_Startup.OnClick_OpenLevel
// (Native, Public)

void UBUI_Startup::OnClick_OpenLevel()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BUI_Startup", "OnClick_OpenLevel");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function b1-Managed.BUI_Startup.OnChangeDoVSync
// (Native, Public, BlueprintCallable)
// Parameters:
// uint8                                   bChecked                                               (Parm, NoDestructor, HasGetValueTypeHash)

void UBUI_Startup::OnChangeDoVSync(uint8 bChecked)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BUI_Startup", "OnChangeDoVSync");

	Params::BUI_Startup_OnChangeDoVSync Parms{};

	Parms.bChecked = bChecked;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function b1-Managed.BUI_Startup.OnSetInvisible
// (Native, Public)
// Parameters:
// uint8                                   bChecked                                               (Parm, NoDestructor, HasGetValueTypeHash)

void UBUI_Startup::OnSetInvisible(uint8 bChecked)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BUI_Startup", "OnSetInvisible");

	Params::BUI_Startup_OnSetInvisible Parms{};

	Parms.bChecked = bChecked;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function b1-Managed.BGUFuncLibSelectTargetsCS.DeadPhyReset
// (Native, Static, Public, BlueprintCallable)
// Parameters:
// class AActor*                           Unit                                                   (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UBGUFuncLibSelectTargetsCS::DeadPhyReset(class AActor* Unit)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("BGUFuncLibSelectTargetsCS", "DeadPhyReset");

	Params::BGUFuncLibSelectTargetsCS_DeadPhyReset Parms{};

	Parms.Unit = Unit;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function b1-Managed.BGUFuncLibSelectTargetsCS.DeadPhyTest
// (Native, Static, Public, BlueprintCallable)
// Parameters:
// class AActor*                           Unit                                                   (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UBGUFuncLibSelectTargetsCS::DeadPhyTest(class AActor* Unit)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("BGUFuncLibSelectTargetsCS", "DeadPhyTest");

	Params::BGUFuncLibSelectTargetsCS_DeadPhyTest Parms{};

	Parms.Unit = Unit;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function b1-Managed.BGUFuncLibMeshCS.GetChildBones
// (Native, Static, Public, HasOutParams, BlueprintCallable)
// Parameters:
// class USkeletalMeshComponent*           SkeletalMeshComp                                       (ExportObject, Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// class FName                             BaseBoneName                                           (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// TArray<class FName>                     ChildBoneNames                                         (Parm, OutParm, ReferenceParm)
// int32                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

int32 UBGUFuncLibMeshCS::GetChildBones(class USkeletalMeshComponent* SkeletalMeshComp, class FName BaseBoneName, TArray<class FName>& ChildBoneNames)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("BGUFuncLibMeshCS", "GetChildBones");

	Params::BGUFuncLibMeshCS_GetChildBones Parms{};

	Parms.SkeletalMeshComp = SkeletalMeshComp;
	Parms.BaseBoneName = BaseBoneName;
	Parms.ChildBoneNames = std::move(ChildBoneNames);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	ChildBoneNames = std::move(Parms.ChildBoneNames);

	return Parms.ReturnValue;
}


// Function b1-Managed.BED_StateNode_Fork.CanUserAddOutputInCS
// (Native, Event, Public, HasOutParams, BlueprintEvent, Const)
// Parameters:
// uint8                                   ReturnValue                                            (Parm, OutParm, ReturnParm, NoDestructor, HasGetValueTypeHash)

uint8 UBED_StateNode_Fork::CanUserAddOutputInCS() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BED_StateNode_Fork", "CanUserAddOutputInCS");

	Params::BED_StateNode_Fork_CanUserAddOutputInCS Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function b1-Managed.BGUFuncLibResCS.GetLevelStreamingStateVolumeControlledLevelInfo
// (Native, Static, Public, HasOutParams, BlueprintCallable)
// Parameters:
// class ABGWLevelStreamingStateVolume*    Volume                                                 (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// class FString                           ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash)

class FString UBGUFuncLibResCS::GetLevelStreamingStateVolumeControlledLevelInfo(class ABGWLevelStreamingStateVolume* Volume)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("BGUFuncLibResCS", "GetLevelStreamingStateVolumeControlledLevelInfo");

	Params::BGUFuncLibResCS_GetLevelStreamingStateVolumeControlledLevelInfo Parms{};

	Parms.Volume = Volume;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function b1-Managed.BGUFuncLibResCS.GetLevelAllLevelStreamingDataAssetConfigByCPG
// (Native, Static, Public, HasOutParams, BlueprintCallable)
// Parameters:
// class FString                           LevelName                                              (Parm, ZeroConstructor, HasGetValueTypeHash)
// class FString                           ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash)

class FString UBGUFuncLibResCS::GetLevelAllLevelStreamingDataAssetConfigByCPG(const class FString& LevelName)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("BGUFuncLibResCS", "GetLevelAllLevelStreamingDataAssetConfigByCPG");

	Params::BGUFuncLibResCS_GetLevelAllLevelStreamingDataAssetConfigByCPG Parms{};

	Parms.LevelName = std::move(LevelName);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function b1-Managed.BGUFuncLibResCS.BGUAddLifeSavingHairWindowToDeathMontage
// (Native, Static, Public, BlueprintCallable)
// Parameters:
// class UAnimMontage*                     InMontage                                              (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UBGUFuncLibResCS::BGUAddLifeSavingHairWindowToDeathMontage(class UAnimMontage* InMontage)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("BGUFuncLibResCS", "BGUAddLifeSavingHairWindowToDeathMontage");

	Params::BGUFuncLibResCS_BGUAddLifeSavingHairWindowToDeathMontage Parms{};

	Parms.InMontage = InMontage;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function b1-Managed.BGUFuncLibResCS.BGUCopyInfoFromUnitComm2UnitDead
// (Native, Static, Public, BlueprintCallable)

void UBGUFuncLibResCS::BGUCopyInfoFromUnitComm2UnitDead()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("BGUFuncLibResCS", "BGUCopyInfoFromUnitComm2UnitDead");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function b1-Managed.BGUFuncLibResCS.BGUAddBlendPhysicToDeathMontage
// (Native, Static, Public, BlueprintCallable)
// Parameters:
// class UAnimMontage*                     InMontage                                              (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// float                                   Thresholds                                             (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// class FName                             BoneName                                               (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UBGUFuncLibResCS::BGUAddBlendPhysicToDeathMontage(class UAnimMontage* InMontage, float Thresholds, class FName BoneName)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("BGUFuncLibResCS", "BGUAddBlendPhysicToDeathMontage");

	Params::BGUFuncLibResCS_BGUAddBlendPhysicToDeathMontage Parms{};

	Parms.InMontage = InMontage;
	Parms.Thresholds = Thresholds;
	Parms.BoneName = BoneName;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function b1-Managed.BGUFuncLibResCS.BGUGetNewSweepCheckGroupIdInAM
// (Native, Static, Public, HasOutParams, BlueprintCallable, BlueprintPure)
// Parameters:
// class UAnimMontage*                     InMontage                                              (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// int32                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

int32 UBGUFuncLibResCS::BGUGetNewSweepCheckGroupIdInAM(class UAnimMontage* InMontage)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("BGUFuncLibResCS", "BGUGetNewSweepCheckGroupIdInAM");

	Params::BGUFuncLibResCS_BGUGetNewSweepCheckGroupIdInAM Parms{};

	Parms.InMontage = InMontage;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function b1-Managed.BGUFuncLibResCS.BGUSetUnitNameForUBAConfig
// (Native, Static, Public, BlueprintCallable)
// Parameters:
// class UBGWDataAsset_UnitBeAttackedConfig*UBAConfig                                              (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// class FString                           NormalStiffAMPath                                      (Parm, ZeroConstructor, HasGetValueTypeHash)
// class FString                           UnitResName                                            (Parm, ZeroConstructor, HasGetValueTypeHash)

void UBGUFuncLibResCS::BGUSetUnitNameForUBAConfig(class UBGWDataAsset_UnitBeAttackedConfig* UBAConfig, const class FString& NormalStiffAMPath, const class FString& UnitResName)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("BGUFuncLibResCS", "BGUSetUnitNameForUBAConfig");

	Params::BGUFuncLibResCS_BGUSetUnitNameForUBAConfig Parms{};

	Parms.UBAConfig = UBAConfig;
	Parms.NormalStiffAMPath = std::move(NormalStiffAMPath);
	Parms.UnitResName = std::move(UnitResName);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function b1-Managed.BGUFuncLibResCS.BGUSetUnitNameForUDDConfig
// (Native, Static, Public, BlueprintCallable)
// Parameters:
// class UBGWDataAsset_UnitDeathDispConfig*UDDConfig                                              (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// class FString                           NormalDeadAMPath                                       (Parm, ZeroConstructor, HasGetValueTypeHash)
// class FString                           UnitResName                                            (Parm, ZeroConstructor, HasGetValueTypeHash)

void UBGUFuncLibResCS::BGUSetUnitNameForUDDConfig(class UBGWDataAsset_UnitDeathDispConfig* UDDConfig, const class FString& NormalDeadAMPath, const class FString& UnitResName)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("BGUFuncLibResCS", "BGUSetUnitNameForUDDConfig");

	Params::BGUFuncLibResCS_BGUSetUnitNameForUDDConfig Parms{};

	Parms.UDDConfig = UDDConfig;
	Parms.NormalDeadAMPath = std::move(NormalDeadAMPath);
	Parms.UnitResName = std::move(UnitResName);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function b1-Managed.BGUFuncLibResCS.BGUAddNotifyStateToMontage
// (Native, Static, Public, BlueprintCallable)
// Parameters:
// class UAnimMontage*                     InMontage                                              (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// class FName                             TrackName                                              (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// float                                   StartPos                                               (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// float                                   Duration                                               (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// class UClass*                           NotifyClass                                            (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// uint8                                   bRemoveOldTrack                                        (Parm, NoDestructor, HasGetValueTypeHash)

void UBGUFuncLibResCS::BGUAddNotifyStateToMontage(class UAnimMontage* InMontage, class FName TrackName, float StartPos, float Duration, class UClass* NotifyClass, uint8 bRemoveOldTrack)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("BGUFuncLibResCS", "BGUAddNotifyStateToMontage");

	Params::BGUFuncLibResCS_BGUAddNotifyStateToMontage Parms{};

	Parms.InMontage = InMontage;
	Parms.TrackName = TrackName;
	Parms.StartPos = StartPos;
	Parms.Duration = Duration;
	Parms.NotifyClass = NotifyClass;
	Parms.bRemoveOldTrack = bRemoveOldTrack;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function b1-Managed.BGUFuncLibResCS.CheckoutAndSavePackage
// (Native, Static, Public, HasOutParams, BlueprintCallable)
// Parameters:
// TArray<class UObject*>                  Objects                                                (Parm)
// TArray<class UPackage*>                 FailedPackages                                         (Parm, OutParm)
// uint8                                   bCheckDirty                                            (Parm, NoDestructor, HasGetValueTypeHash)
// uint8                                   bPromptToSave                                          (Parm, NoDestructor, HasGetValueTypeHash)
// uint8                                   bAlreadyCheckedOut                                     (Parm, NoDestructor, HasGetValueTypeHash)
// uint8                                   bCanBeDeclined                                         (Parm, NoDestructor, HasGetValueTypeHash)
// uint8                                   ReturnValue                                            (Parm, OutParm, ReturnParm, NoDestructor, HasGetValueTypeHash)

uint8 UBGUFuncLibResCS::CheckoutAndSavePackage(const TArray<class UObject*>& Objects, TArray<class UPackage*>* FailedPackages, uint8 bCheckDirty, uint8 bPromptToSave, uint8 bAlreadyCheckedOut, uint8 bCanBeDeclined)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("BGUFuncLibResCS", "CheckoutAndSavePackage");

	Params::BGUFuncLibResCS_CheckoutAndSavePackage Parms{};

	Parms.Objects = std::move(Objects);
	Parms.bCheckDirty = bCheckDirty;
	Parms.bPromptToSave = bPromptToSave;
	Parms.bAlreadyCheckedOut = bAlreadyCheckedOut;
	Parms.bCanBeDeclined = bCanBeDeclined;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	if (FailedPackages != nullptr)
		*FailedPackages = std::move(Parms.FailedPackages);

	return Parms.ReturnValue;
}


// Function b1-Managed.BGUFuncLibResCS.BGUCopyAndRenameDEADAM
// (Native, Static, Public, HasOutParams, BlueprintCallable)
// Parameters:
// int32                                   BeginResID                                             (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// int32                                   EndResID                                               (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// TArray<class FString>                   NeedDeleteDeadAMCatalogList                            (Parm, OutParm)
// TArray<struct FMoveAMPath>              Result                                                 (Parm, OutParm)

void UBGUFuncLibResCS::BGUCopyAndRenameDEADAM(int32 BeginResID, int32 EndResID, TArray<class FString>* NeedDeleteDeadAMCatalogList, TArray<struct FMoveAMPath>* Result)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("BGUFuncLibResCS", "BGUCopyAndRenameDEADAM");

	Params::BGUFuncLibResCS_BGUCopyAndRenameDEADAM Parms{};

	Parms.BeginResID = BeginResID;
	Parms.EndResID = EndResID;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	if (NeedDeleteDeadAMCatalogList != nullptr)
		*NeedDeleteDeadAMCatalogList = std::move(Parms.NeedDeleteDeadAMCatalogList);

	if (Result != nullptr)
		*Result = std::move(Parms.Result);
}


// Function b1-Managed.BGUFuncLibResCS.BGUCopyAndRenameBHAM
// (Native, Static, Public, HasOutParams, BlueprintCallable)
// Parameters:
// class UObject*                          WorldContext                                           (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// uint8                                   IsB1                                                   (Parm, NoDestructor, HasGetValueTypeHash)
// int32                                   BeginResID                                             (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// int32                                   EndResID                                               (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// TArray<class FString>                   NeedDeleteBHCatalogList                                (Parm, OutParm)
// TArray<struct FMoveAMPath>              Result                                                 (Parm, OutParm)

void UBGUFuncLibResCS::BGUCopyAndRenameBHAM(class UObject* WorldContext, uint8 IsB1, int32 BeginResID, int32 EndResID, TArray<class FString>* NeedDeleteBHCatalogList, TArray<struct FMoveAMPath>* Result)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("BGUFuncLibResCS", "BGUCopyAndRenameBHAM");

	Params::BGUFuncLibResCS_BGUCopyAndRenameBHAM Parms{};

	Parms.WorldContext = WorldContext;
	Parms.IsB1 = IsB1;
	Parms.BeginResID = BeginResID;
	Parms.EndResID = EndResID;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	if (NeedDeleteBHCatalogList != nullptr)
		*NeedDeleteBHCatalogList = std::move(Parms.NeedDeleteBHCatalogList);

	if (Result != nullptr)
		*Result = std::move(Parms.Result);
}


// Function b1-Managed.BGUFuncLibAICS.BGUAISetUnitsTargetAsPlayerByTamerActorTag
// (Native, Static, Public, BlueprintCallable)
// Parameters:
// class UObject*                          WorldContextObject                                     (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// class FName                             MatchTag                                               (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UBGUFuncLibAICS::BGUAISetUnitsTargetAsPlayerByTamerActorTag(class UObject* WorldContextObject, class FName MatchTag)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("BGUFuncLibAICS", "BGUAISetUnitsTargetAsPlayerByTamerActorTag");

	Params::BGUFuncLibAICS_BGUAISetUnitsTargetAsPlayerByTamerActorTag Parms{};

	Parms.WorldContextObject = WorldContextObject;
	Parms.MatchTag = MatchTag;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function b1-Managed.BGUFuncLibAICS.BGURequestAIWallAndCellMoveToLocation
// (Native, Static, Public, HasOutParams, BlueprintCallable)
// Parameters:
// class AActor*                           Unit                                                   (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// struct FVector                          Position                                               (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// EAIMoveSpeedType                        SpeedRateType                                          (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// float                                   TurnSpeed                                              (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// float                                   AcceptableRadius                                       (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// uint8                                   IncludeSelfRadius                                      (Parm, NoDestructor, HasGetValueTypeHash)
// int32                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

int32 UBGUFuncLibAICS::BGURequestAIWallAndCellMoveToLocation(class AActor* Unit, const struct FVector& Position, EAIMoveSpeedType SpeedRateType, float TurnSpeed, float AcceptableRadius, uint8 IncludeSelfRadius)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("BGUFuncLibAICS", "BGURequestAIWallAndCellMoveToLocation");

	Params::BGUFuncLibAICS_BGURequestAIWallAndCellMoveToLocation Parms{};

	Parms.Unit = Unit;
	Parms.Position = std::move(Position);
	Parms.SpeedRateType = SpeedRateType;
	Parms.TurnSpeed = TurnSpeed;
	Parms.AcceptableRadius = AcceptableRadius;
	Parms.IncludeSelfRadius = IncludeSelfRadius;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function b1-Managed.BGUFuncLibAICS.BGURequestAIMoveToLocationWithMM
// (Native, Static, Public, HasOutParams, BlueprintCallable)
// Parameters:
// class AActor*                           Unit                                                   (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// struct FVector                          Position                                               (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// EAIMoveSpeedType                        SpeedRateType                                          (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// float                                   AcceptableRadius                                       (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// EBGUMoveAIType                          MoveAIType                                             (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// uint8                                   IncludeSelfRadius                                      (Parm, NoDestructor, HasGetValueTypeHash)
// uint8                                   IncludeTargetRadius                                    (Parm, NoDestructor, HasGetValueTypeHash)
// EState_MM                               MotionMatchingState                                    (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// int32                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

int32 UBGUFuncLibAICS::BGURequestAIMoveToLocationWithMM(class AActor* Unit, const struct FVector& Position, EAIMoveSpeedType SpeedRateType, float AcceptableRadius, EBGUMoveAIType MoveAIType, uint8 IncludeSelfRadius, uint8 IncludeTargetRadius, EState_MM MotionMatchingState)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("BGUFuncLibAICS", "BGURequestAIMoveToLocationWithMM");

	Params::BGUFuncLibAICS_BGURequestAIMoveToLocationWithMM Parms{};

	Parms.Unit = Unit;
	Parms.Position = std::move(Position);
	Parms.SpeedRateType = SpeedRateType;
	Parms.AcceptableRadius = AcceptableRadius;
	Parms.MoveAIType = MoveAIType;
	Parms.IncludeSelfRadius = IncludeSelfRadius;
	Parms.IncludeTargetRadius = IncludeTargetRadius;
	Parms.MotionMatchingState = MotionMatchingState;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function b1-Managed.BGUFuncLibAICS.BGURequestAIUseSkillWithSkillID
// (Native, Static, Public, HasOutParams, BlueprintCallable)
// Parameters:
// class AActor*                           Unit                                                   (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// int32                                   SkillID                                                (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// ECastSkillSourceType                    SourceType                                             (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// int32                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

int32 UBGUFuncLibAICS::BGURequestAIUseSkillWithSkillID(class AActor* Unit, int32 SkillID, ECastSkillSourceType SourceType)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("BGUFuncLibAICS", "BGURequestAIUseSkillWithSkillID");

	Params::BGUFuncLibAICS_BGURequestAIUseSkillWithSkillID Parms{};

	Parms.Unit = Unit;
	Parms.SkillID = SkillID;
	Parms.SourceType = SourceType;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function b1-Managed.BGUFuncLibAICS.BGUAISetUnitsTargetAsPlayer
// (Native, Static, Public, BlueprintCallable)
// Parameters:
// class UObject*                          WorldContextObject                                     (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UBGUFuncLibAICS::BGUAISetUnitsTargetAsPlayer(class UObject* WorldContextObject)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("BGUFuncLibAICS", "BGUAISetUnitsTargetAsPlayer");

	Params::BGUFuncLibAICS_BGUAISetUnitsTargetAsPlayer Parms{};

	Parms.WorldContextObject = WorldContextObject;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function b1-Managed.BGUFuncLibAICS.BGURequestAIMoveToLocation
// (Native, Static, Public, HasOutParams, BlueprintCallable)
// Parameters:
// class AActor*                           Unit                                                   (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// struct FVector                          Position                                               (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// EAIMoveSpeedType                        SpeedRateType                                          (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// float                                   AcceptableRadius                                       (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// EBGUMoveAIType                          MoveAIType                                             (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// uint8                                   IncludeSelfRadius                                      (Parm, NoDestructor, HasGetValueTypeHash)
// uint8                                   IncludeTargetRadius                                    (Parm, NoDestructor, HasGetValueTypeHash)
// int32                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

int32 UBGUFuncLibAICS::BGURequestAIMoveToLocation(class AActor* Unit, const struct FVector& Position, EAIMoveSpeedType SpeedRateType, float AcceptableRadius, EBGUMoveAIType MoveAIType, uint8 IncludeSelfRadius, uint8 IncludeTargetRadius)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("BGUFuncLibAICS", "BGURequestAIMoveToLocation");

	Params::BGUFuncLibAICS_BGURequestAIMoveToLocation Parms{};

	Parms.Unit = Unit;
	Parms.Position = std::move(Position);
	Parms.SpeedRateType = SpeedRateType;
	Parms.AcceptableRadius = AcceptableRadius;
	Parms.MoveAIType = MoveAIType;
	Parms.IncludeSelfRadius = IncludeSelfRadius;
	Parms.IncludeTargetRadius = IncludeTargetRadius;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function b1-Managed.BGUFuncLibAICS.BGUAISetUnitTargetAsPlayer
// (Native, Static, Public, BlueprintCallable)
// Parameters:
// class AActor*                           Unit                                                   (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UBGUFuncLibAICS::BGUAISetUnitTargetAsPlayer(class AActor* Unit)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("BGUFuncLibAICS", "BGUAISetUnitTargetAsPlayer");

	Params::BGUFuncLibAICS_BGUAISetUnitTargetAsPlayer Parms{};

	Parms.Unit = Unit;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function b1-Managed.BGUFuncLibAICS.BGURequestAIMontageMoveTo
// (Native, Static, Public, HasOutParams, BlueprintCallable)
// Parameters:
// class AActor*                           Unit                                                   (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// class UAnimMontage*                     Montage                                                (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// float                                   ScaleRate                                              (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// float                                   PlayTimeRate                                           (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// float                                   PosOffset                                              (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// int32                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

int32 UBGUFuncLibAICS::BGURequestAIMontageMoveTo(class AActor* Unit, class UAnimMontage* Montage, float ScaleRate, float PlayTimeRate, float PosOffset)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("BGUFuncLibAICS", "BGURequestAIMontageMoveTo");

	Params::BGUFuncLibAICS_BGURequestAIMontageMoveTo Parms{};

	Parms.Unit = Unit;
	Parms.Montage = Montage;
	Parms.ScaleRate = ScaleRate;
	Parms.PlayTimeRate = PlayTimeRate;
	Parms.PosOffset = PosOffset;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function b1-Managed.BGUFuncLibAICS.BGUUpdateUnitBattleState
// (Native, Static, Public, BlueprintCallable)
// Parameters:
// class ABGUCharacterCS*                  Unit                                                   (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// uint8                                   IsInBattle                                             (Parm, NoDestructor, HasGetValueTypeHash)

void UBGUFuncLibAICS::BGUUpdateUnitBattleState(class ABGUCharacterCS* Unit, uint8 IsInBattle)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("BGUFuncLibAICS", "BGUUpdateUnitBattleState");

	Params::BGUFuncLibAICS_BGUUpdateUnitBattleState Parms{};

	Parms.Unit = Unit;
	Parms.IsInBattle = IsInBattle;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function b1-Managed.BGUFuncLibAICS.BGUCancelAICurrentMove
// (Native, Static, Public, BlueprintCallable)
// Parameters:
// class AActor*                           Unit                                                   (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UBGUFuncLibAICS::BGUCancelAICurrentMove(class AActor* Unit)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("BGUFuncLibAICS", "BGUCancelAICurrentMove");

	Params::BGUFuncLibAICS_BGUCancelAICurrentMove Parms{};

	Parms.Unit = Unit;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function b1-Managed.BGUFuncLibAICS.BGUAITriggerFSMEvent
// (Native, Static, Public, BlueprintCallable)
// Parameters:
// class AActor*                           Unit                                                   (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// EBGUFSMEventName                        FSMEvent                                               (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UBGUFuncLibAICS::BGUAITriggerFSMEvent(class AActor* Unit, EBGUFSMEventName FSMEvent)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("BGUFuncLibAICS", "BGUAITriggerFSMEvent");

	Params::BGUFuncLibAICS_BGUAITriggerFSMEvent Parms{};

	Parms.Unit = Unit;
	Parms.FSMEvent = FSMEvent;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function b1-Managed.BGUFuncLibAICS.BGUAISwitchSideWalk
// (Native, Static, Public, BlueprintCallable)
// Parameters:
// class AActor*                           Unit                                                   (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// uint8                                   bEnable                                                (Parm, NoDestructor, HasGetValueTypeHash)

void UBGUFuncLibAICS::BGUAISwitchSideWalk(class AActor* Unit, uint8 bEnable)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("BGUFuncLibAICS", "BGUAISwitchSideWalk");

	Params::BGUFuncLibAICS_BGUAISwitchSideWalk Parms{};

	Parms.Unit = Unit;
	Parms.bEnable = bEnable;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function b1-Managed.BGUFuncLibAICS.BGUCancelAIMoveTo
// (Native, Static, Public, BlueprintCallable)
// Parameters:
// class AActor*                           Unit                                                   (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// int32                                   RequestIdx                                             (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UBGUFuncLibAICS::BGUCancelAIMoveTo(class AActor* Unit, int32 RequestIdx)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("BGUFuncLibAICS", "BGUCancelAIMoveTo");

	Params::BGUFuncLibAICS_BGUCancelAIMoveTo Parms{};

	Parms.Unit = Unit;
	Parms.RequestIdx = RequestIdx;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function b1-Managed.BGUFuncLibAICS.BGUAISideWalk
// (Native, Static, Public, HasOutParams, BlueprintCallable)
// Parameters:
// class AActor*                           Unit                                                   (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// float                                   MoveForwardValue                                       (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// float                                   MoveHorizonValue                                       (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// int32                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

int32 UBGUFuncLibAICS::BGUAISideWalk(class AActor* Unit, float MoveForwardValue, float MoveHorizonValue)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("BGUFuncLibAICS", "BGUAISideWalk");

	Params::BGUFuncLibAICS_BGUAISideWalk Parms{};

	Parms.Unit = Unit;
	Parms.MoveForwardValue = MoveForwardValue;
	Parms.MoveHorizonValue = MoveHorizonValue;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function b1-Managed.BGUFunclibEditorUtility.GetAllSkeletalActorWithoutPerfFromSelected
// (Native, Static, Public, HasOutParams, BlueprintCallable)
// Parameters:
// TArray<class FString>                   SelectedLevels                                         (Parm)
// TArray<struct FLevelSkeletalMeshCheckInfoHelper>ReturnValue                                            (Parm, OutParm, ReturnParm)

TArray<struct FLevelSkeletalMeshCheckInfoHelper> UBGUFunclibEditorUtility::GetAllSkeletalActorWithoutPerfFromSelected(const TArray<class FString>& SelectedLevels)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("BGUFunclibEditorUtility", "GetAllSkeletalActorWithoutPerfFromSelected");

	Params::BGUFunclibEditorUtility_GetAllSkeletalActorWithoutPerfFromSelected Parms{};

	Parms.SelectedLevels = std::move(SelectedLevels);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function b1-Managed.BGUFunclibEditorUtility.SetupSkeletalActorInactiveInfo
// (Native, Static, Public, BlueprintCallable)
// Parameters:
// class AActor*                           InActor                                                (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UBGUFunclibEditorUtility::SetupSkeletalActorInactiveInfo(class AActor* InActor)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("BGUFunclibEditorUtility", "SetupSkeletalActorInactiveInfo");

	Params::BGUFunclibEditorUtility_SetupSkeletalActorInactiveInfo Parms{};

	Parms.InActor = InActor;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function b1-Managed.BGUFunclibEditorUtility.PrintSkeletalMeshPerfInfoCSV
// (Native, Static, Public, BlueprintCallable)
// Parameters:
// TArray<struct FLevelSkeletalMeshCheckInfoHelper>LevelSkeletalMeshInfo                                  (Parm)
// class FString                           CSVPath                                                (Parm, ZeroConstructor, HasGetValueTypeHash)

void UBGUFunclibEditorUtility::PrintSkeletalMeshPerfInfoCSV(const TArray<struct FLevelSkeletalMeshCheckInfoHelper>& LevelSkeletalMeshInfo, const class FString& CSVPath)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("BGUFunclibEditorUtility", "PrintSkeletalMeshPerfInfoCSV");

	Params::BGUFunclibEditorUtility_PrintSkeletalMeshPerfInfoCSV Parms{};

	Parms.LevelSkeletalMeshInfo = std::move(LevelSkeletalMeshInfo);
	Parms.CSVPath = std::move(CSVPath);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function b1-Managed.BGUFunclibEditorUtility.CheckIsActorInactiveManaged
// (Native, Static, Public, HasOutParams, BlueprintCallable)
// Parameters:
// class AActor*                           Actor                                                  (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// uint8                                   ReturnValue                                            (Parm, OutParm, ReturnParm, NoDestructor, HasGetValueTypeHash)

uint8 UBGUFunclibEditorUtility::CheckIsActorInactiveManaged(class AActor* Actor)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("BGUFunclibEditorUtility", "CheckIsActorInactiveManaged");

	Params::BGUFunclibEditorUtility_CheckIsActorInactiveManaged Parms{};

	Parms.Actor = Actor;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function b1-Managed.BGUFunclibEditorUtility.GetAllSkeletalActorInLevel
// (Native, Static, Public, HasOutParams, BlueprintCallable)
// Parameters:
// class ULevel*                           Level                                                  (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// TArray<class AActor*>                   ReturnValue                                            (Parm, OutParm, ReturnParm)

TArray<class AActor*> UBGUFunclibEditorUtility::GetAllSkeletalActorInLevel(class ULevel* Level)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("BGUFunclibEditorUtility", "GetAllSkeletalActorInLevel");

	Params::BGUFunclibEditorUtility_GetAllSkeletalActorInLevel Parms{};

	Parms.Level = Level;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function b1-Managed.BGUFunclibEditorUtility.SwitchDebugWidgetState
// (Native, Static, Public, BlueprintCallable)
// Parameters:
// class AActor*                           Actor                                                  (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UBGUFunclibEditorUtility::SwitchDebugWidgetState(class AActor* Actor)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("BGUFunclibEditorUtility", "SwitchDebugWidgetState");

	Params::BGUFunclibEditorUtility_SwitchDebugWidgetState Parms{};

	Parms.Actor = Actor;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function b1-Managed.BGUFunclibEditorUtility.GetAMPathBySkillID
// (Native, Static, Public, HasOutParams, BlueprintCallable)
// Parameters:
// int32                                   SkillID                                                (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// class FString                           ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash)

class FString UBGUFunclibEditorUtility::GetAMPathBySkillID(int32 SkillID)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("BGUFunclibEditorUtility", "GetAMPathBySkillID");

	Params::BGUFunclibEditorUtility_GetAMPathBySkillID Parms{};

	Parms.SkillID = SkillID;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function b1-Managed.BGUFunclibEditorUtility.GetSkillIDByAMPath
// (Native, Static, Public, HasOutParams, BlueprintCallable)
// Parameters:
// class FString                           AMPath                                                 (Parm, ZeroConstructor, HasGetValueTypeHash)
// TArray<int32>                           ReturnValue                                            (Parm, OutParm, ReturnParm)

TArray<int32> UBGUFunclibEditorUtility::GetSkillIDByAMPath(const class FString& AMPath)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("BGUFunclibEditorUtility", "GetSkillIDByAMPath");

	Params::BGUFunclibEditorUtility_GetSkillIDByAMPath Parms{};

	Parms.AMPath = std::move(AMPath);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function b1-Managed.BGUFunclibEditorUtility.PrintStringsToCSV
// (Native, Static, Public, BlueprintCallable)
// Parameters:
// TArray<class FString>                   Infos                                                  (Parm)
// class FString                           CSVPath                                                (Parm, ZeroConstructor, HasGetValueTypeHash)

void UBGUFunclibEditorUtility::PrintStringsToCSV(const TArray<class FString>& Infos, const class FString& CSVPath)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("BGUFunclibEditorUtility", "PrintStringsToCSV");

	Params::BGUFunclibEditorUtility_PrintStringsToCSV Parms{};

	Parms.Infos = std::move(Infos);
	Parms.CSVPath = std::move(CSVPath);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function b1-Managed.BGUFuncLibReplication.GetActorNetRole
// (Native, Static, Public, HasOutParams, BlueprintCallable)
// Parameters:
// class AActor*                           Owner                                                  (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// int32                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

int32 UBGUFuncLibReplication::GetActorNetRole(class AActor* Owner)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("BGUFuncLibReplication", "GetActorNetRole");

	Params::BGUFuncLibReplication_GetActorNetRole Parms{};

	Parms.Owner = Owner;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function b1-Managed.BED_StateAsset.GetExtraDefaultOutputNodesInBranchGraph
// (Native, Event, Public, HasOutParams, BlueprintEvent, Const)
// Parameters:
// TArray<class UClass*>                   OutClasses                                             (Parm, OutParm)
// int32                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

int32 UBED_StateAsset::GetExtraDefaultOutputNodesInBranchGraph(TArray<class UClass*>* OutClasses) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BED_StateAsset", "GetExtraDefaultOutputNodesInBranchGraph");

	Params::BED_StateAsset_GetExtraDefaultOutputNodesInBranchGraph Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	if (OutClasses != nullptr)
		*OutClasses = std::move(Parms.OutClasses);

	return Parms.ReturnValue;
}


// Function b1-Managed.BED_StateAsset.GetExtraDefaultInputNodesInBranchGraph
// (Native, Event, Public, HasOutParams, BlueprintEvent, Const)
// Parameters:
// TArray<class UClass*>                   OutClasses                                             (Parm, OutParm)
// int32                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

int32 UBED_StateAsset::GetExtraDefaultInputNodesInBranchGraph(TArray<class UClass*>* OutClasses) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BED_StateAsset", "GetExtraDefaultInputNodesInBranchGraph");

	Params::BED_StateAsset_GetExtraDefaultInputNodesInBranchGraph Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	if (OutClasses != nullptr)
		*OutClasses = std::move(Parms.OutClasses);

	return Parms.ReturnValue;
}


// Function b1-Managed.BED_StateAsset.GetRerouteNodeClassInBranchGraph
// (Native, Event, Public, HasOutParams, BlueprintEvent, Const)
// Parameters:
// class UClass*                           ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

class UClass* UBED_StateAsset::GetRerouteNodeClassInBranchGraph() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BED_StateAsset", "GetRerouteNodeClassInBranchGraph");

	Params::BED_StateAsset_GetRerouteNodeClassInBranchGraph Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function b1-Managed.BED_StateAsset.GetStartNodeClassInBranchGraph
// (Native, Event, Public, HasOutParams, BlueprintEvent, Const)
// Parameters:
// class UClass*                           ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

class UClass* UBED_StateAsset::GetStartNodeClassInBranchGraph() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BED_StateAsset", "GetStartNodeClassInBranchGraph");

	Params::BED_StateAsset_GetStartNodeClassInBranchGraph Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function b1-Managed.BED_StateAsset.GetExtraDefaultOutputNodes
// (Native, Event, Public, HasOutParams, BlueprintEvent, Const)
// Parameters:
// TArray<class UClass*>                   OutClasses                                             (Parm, OutParm)
// int32                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

int32 UBED_StateAsset::GetExtraDefaultOutputNodes(TArray<class UClass*>* OutClasses) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BED_StateAsset", "GetExtraDefaultOutputNodes");

	Params::BED_StateAsset_GetExtraDefaultOutputNodes Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	if (OutClasses != nullptr)
		*OutClasses = std::move(Parms.OutClasses);

	return Parms.ReturnValue;
}


// Function b1-Managed.BED_StateAsset.GetExtraDefaultInputNodes
// (Native, Event, Public, HasOutParams, BlueprintEvent, Const)
// Parameters:
// TArray<class UClass*>                   OutClasses                                             (Parm, OutParm)
// int32                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

int32 UBED_StateAsset::GetExtraDefaultInputNodes(TArray<class UClass*>* OutClasses) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BED_StateAsset", "GetExtraDefaultInputNodes");

	Params::BED_StateAsset_GetExtraDefaultInputNodes Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	if (OutClasses != nullptr)
		*OutClasses = std::move(Parms.OutClasses);

	return Parms.ReturnValue;
}


// Function b1-Managed.BED_StateAsset.GetRerouteNodeClass
// (Native, Event, Public, HasOutParams, BlueprintEvent, Const)
// Parameters:
// class UClass*                           ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

class UClass* UBED_StateAsset::GetRerouteNodeClass() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BED_StateAsset", "GetRerouteNodeClass");

	Params::BED_StateAsset_GetRerouteNodeClass Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function b1-Managed.BED_StateAsset.GetStartNodeClass
// (Native, Event, Public, HasOutParams, BlueprintEvent, Const)
// Parameters:
// class UClass*                           ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

class UClass* UBED_StateAsset::GetStartNodeClass() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BED_StateAsset", "GetStartNodeClass");

	Params::BED_StateAsset_GetStartNodeClass Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function b1-Managed.BED_StateAsset.GetViewType
// (Native, Event, Public, HasOutParams, BlueprintEvent, Const)
// Parameters:
// ECalliopeViewType                       ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

ECalliopeViewType UBED_StateAsset::GetViewType() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BED_StateAsset", "GetViewType");

	Params::BED_StateAsset_GetViewType Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function b1-Managed.BGUFuncLibAnim.BGUSetPlayerLocomotionLockMoveDirection
// (Native, Static, Public, BlueprintCallable)
// Parameters:
// class AActor*                           Owner                                                  (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// ELockMoveDirectionSix                   Direction                                              (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UBGUFuncLibAnim::BGUSetPlayerLocomotionLockMoveDirection(class AActor* Owner, ELockMoveDirectionSix Direction)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("BGUFuncLibAnim", "BGUSetPlayerLocomotionLockMoveDirection");

	Params::BGUFuncLibAnim_BGUSetPlayerLocomotionLockMoveDirection Parms{};

	Parms.Owner = Owner;
	Parms.Direction = Direction;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function b1-Managed.BGUFuncLibAnim.BGUTryFindCPGIdleNodeWithoutResetGroup
// (Native, Static, Public, HasOutParams, BlueprintCallable)
// Parameters:
// class UBED_ProcessAsset*                CPG                                                    (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// EIdleProcessActionType                  TargetAction                                           (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// uint8                                   ReturnValue                                            (Parm, OutParm, ReturnParm, NoDestructor, HasGetValueTypeHash)

uint8 UBGUFuncLibAnim::BGUTryFindCPGIdleNodeWithoutResetGroup(class UBED_ProcessAsset* CPG, EIdleProcessActionType TargetAction)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("BGUFuncLibAnim", "BGUTryFindCPGIdleNodeWithoutResetGroup");

	Params::BGUFuncLibAnim_BGUTryFindCPGIdleNodeWithoutResetGroup Parms{};

	Parms.CPG = CPG;
	Parms.TargetAction = TargetAction;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function b1-Managed.BGUFuncLibAnim.BGUPlayerLocomotionEnterLockMoveState
// (Native, Static, Public, BlueprintCallable)
// Parameters:
// class AActor*                           Owner                                                  (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UBGUFuncLibAnim::BGUPlayerLocomotionEnterLockMoveState(class AActor* Owner)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("BGUFuncLibAnim", "BGUPlayerLocomotionEnterLockMoveState");

	Params::BGUFuncLibAnim_BGUPlayerLocomotionEnterLockMoveState Parms{};

	Parms.Owner = Owner;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function b1-Managed.BGUFuncLibAnim.BGUPlayerLocomotionLockTurnStopDir
// (Native, Static, Public, BlueprintCallable)
// Parameters:
// class AActor*                           Owner                                                  (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// ELockMoveDirectionSix                   Direction                                              (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UBGUFuncLibAnim::BGUPlayerLocomotionLockTurnStopDir(class AActor* Owner, ELockMoveDirectionSix Direction)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("BGUFuncLibAnim", "BGUPlayerLocomotionLockTurnStopDir");

	Params::BGUFuncLibAnim_BGUPlayerLocomotionLockTurnStopDir Parms{};

	Parms.Owner = Owner;
	Parms.Direction = Direction;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function b1-Managed.BGUFuncLibAnim.BGUSetMonsterLocomotionLockMoveDir
// (Native, Static, Public, BlueprintCallable)
// Parameters:
// class AActor*                           Owner                                                  (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// EMoveDirectionEight                     MoveDir                                                (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UBGUFuncLibAnim::BGUSetMonsterLocomotionLockMoveDir(class AActor* Owner, EMoveDirectionEight MoveDir)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("BGUFuncLibAnim", "BGUSetMonsterLocomotionLockMoveDir");

	Params::BGUFuncLibAnim_BGUSetMonsterLocomotionLockMoveDir Parms{};

	Parms.Owner = Owner;
	Parms.MoveDir = MoveDir;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function b1-Managed.BGUFuncLibAnim.BGUMonsterLocomotionEnterMoveLoop
// (Native, Static, Public, BlueprintCallable)
// Parameters:
// class AActor*                           Owner                                                  (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// class UAnimInstance*                    MonsterLocomotionAnimInst                              (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UBGUFuncLibAnim::BGUMonsterLocomotionEnterMoveLoop(class AActor* Owner, class UAnimInstance* MonsterLocomotionAnimInst)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("BGUFuncLibAnim", "BGUMonsterLocomotionEnterMoveLoop");

	Params::BGUFuncLibAnim_BGUMonsterLocomotionEnterMoveLoop Parms{};

	Parms.Owner = Owner;
	Parms.MonsterLocomotionAnimInst = MonsterLocomotionAnimInst;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function b1-Managed.BGUFuncLibAnim.BGUMonsterLocomotionLockStopRight
// (Native, Static, Public, BlueprintCallable)
// Parameters:
// class AActor*                           Owner                                                  (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// class UAnimInstance*                    MonsterLocomotionAnimInst                              (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UBGUFuncLibAnim::BGUMonsterLocomotionLockStopRight(class AActor* Owner, class UAnimInstance* MonsterLocomotionAnimInst)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("BGUFuncLibAnim", "BGUMonsterLocomotionLockStopRight");

	Params::BGUFuncLibAnim_BGUMonsterLocomotionLockStopRight Parms{};

	Parms.Owner = Owner;
	Parms.MonsterLocomotionAnimInst = MonsterLocomotionAnimInst;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function b1-Managed.BGUFuncLibAnim.BGUMonsterLocomotionLockStopLeft
// (Native, Static, Public, BlueprintCallable)
// Parameters:
// class AActor*                           Owner                                                  (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// class UAnimInstance*                    MonsterLocomotionAnimInst                              (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UBGUFuncLibAnim::BGUMonsterLocomotionLockStopLeft(class AActor* Owner, class UAnimInstance* MonsterLocomotionAnimInst)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("BGUFuncLibAnim", "BGUMonsterLocomotionLockStopLeft");

	Params::BGUFuncLibAnim_BGUMonsterLocomotionLockStopLeft Parms{};

	Parms.Owner = Owner;
	Parms.MonsterLocomotionAnimInst = MonsterLocomotionAnimInst;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function b1-Managed.BGUFuncLibAnim.BGUSetCharacterMontagePlaying
// (Native, Static, Public, BlueprintCallable)
// Parameters:
// class AActor*                           Owner                                                  (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// uint8                                   IsPlaying                                              (Parm, NoDestructor, HasGetValueTypeHash)

void UBGUFuncLibAnim::BGUSetCharacterMontagePlaying(class AActor* Owner, uint8 IsPlaying)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("BGUFuncLibAnim", "BGUSetCharacterMontagePlaying");

	Params::BGUFuncLibAnim_BGUSetCharacterMontagePlaying Parms{};

	Parms.Owner = Owner;
	Parms.IsPlaying = IsPlaying;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function b1-Managed.BGUFuncLibAnim.BGUPlayerLocomotionStartIdle
// (Native, Static, Public, BlueprintCallable)
// Parameters:
// class AActor*                           Owner                                                  (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UBGUFuncLibAnim::BGUPlayerLocomotionStartIdle(class AActor* Owner)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("BGUFuncLibAnim", "BGUPlayerLocomotionStartIdle");

	Params::BGUFuncLibAnim_BGUPlayerLocomotionStartIdle Parms{};

	Parms.Owner = Owner;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function b1-Managed.BGUFuncLibAnim.BGUSplineMoveEnterStopState
// (Native, Static, Public, BlueprintCallable)
// Parameters:
// class AActor*                           Owner                                                  (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UBGUFuncLibAnim::BGUSplineMoveEnterStopState(class AActor* Owner)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("BGUFuncLibAnim", "BGUSplineMoveEnterStopState");

	Params::BGUFuncLibAnim_BGUSplineMoveEnterStopState Parms{};

	Parms.Owner = Owner;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function b1-Managed.BGUFuncLibAnim.BGUSetParkourMoveAnimState
// (Native, Static, Public, BlueprintCallable)
// Parameters:
// class AActor*                           Owner                                                  (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// EParkourMoveAnimState                   State                                                  (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UBGUFuncLibAnim::BGUSetParkourMoveAnimState(class AActor* Owner, EParkourMoveAnimState State)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("BGUFuncLibAnim", "BGUSetParkourMoveAnimState");

	Params::BGUFuncLibAnim_BGUSetParkourMoveAnimState Parms{};

	Parms.Owner = Owner;
	Parms.State = State;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function b1-Managed.BGUFuncLibAnim.BGUSetGlideMoveAnimState
// (Native, Static, Public, BlueprintCallable)
// Parameters:
// class AActor*                           Owner                                                  (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// EGlideMoveAnimState                     State                                                  (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UBGUFuncLibAnim::BGUSetGlideMoveAnimState(class AActor* Owner, EGlideMoveAnimState State)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("BGUFuncLibAnim", "BGUSetGlideMoveAnimState");

	Params::BGUFuncLibAnim_BGUSetGlideMoveAnimState Parms{};

	Parms.Owner = Owner;
	Parms.State = State;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function b1-Managed.BGUFuncLibAnim.BGURootMotionJumpStart
// (Native, Static, Public, BlueprintCallable)
// Parameters:
// class AActor*                           Owner                                                  (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UBGUFuncLibAnim::BGURootMotionJumpStart(class AActor* Owner)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("BGUFuncLibAnim", "BGURootMotionJumpStart");

	Params::BGUFuncLibAnim_BGURootMotionJumpStart Parms{};

	Parms.Owner = Owner;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function b1-Managed.BGUFuncLibAnim.BGUActorTryPlayMontage
// (Native, Static, Public, HasOutParams, BlueprintCallable)
// Parameters:
// class AActor*                           Owner                                                  (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// class UAnimMontage*                     Montage                                                (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// class FName                             StartSectionName                                       (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// EMontageBindReason                      Reason                                                 (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// float                                   Scale                                                  (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// float                                   PlayTimeRate                                           (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// float                                   MontagePosOffset                                       (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// float                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

float UBGUFuncLibAnim::BGUActorTryPlayMontage(class AActor* Owner, class UAnimMontage* Montage, class FName StartSectionName, EMontageBindReason Reason, float Scale, float PlayTimeRate, float MontagePosOffset)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("BGUFuncLibAnim", "BGUActorTryPlayMontage");

	Params::BGUFuncLibAnim_BGUActorTryPlayMontage Parms{};

	Parms.Owner = Owner;
	Parms.Montage = Montage;
	Parms.StartSectionName = StartSectionName;
	Parms.Reason = Reason;
	Parms.Scale = Scale;
	Parms.PlayTimeRate = PlayTimeRate;
	Parms.MontagePosOffset = MontagePosOffset;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function b1-Managed.BGUFuncLibAnim.BGUSetUseSnapshotPose
// (Native, Static, Public, BlueprintCallable)
// Parameters:
// class AActor*                           Owner                                                  (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// uint8                                   bUseSnapshot                                           (Parm, NoDestructor, HasGetValueTypeHash)
// float                                   BlendTime                                              (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UBGUFuncLibAnim::BGUSetUseSnapshotPose(class AActor* Owner, uint8 bUseSnapshot, float BlendTime)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("BGUFuncLibAnim", "BGUSetUseSnapshotPose");

	Params::BGUFuncLibAnim_BGUSetUseSnapshotPose Parms{};

	Parms.Owner = Owner;
	Parms.bUseSnapshot = bUseSnapshot;
	Parms.BlendTime = BlendTime;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function b1-Managed.BGUFuncLibAnim.BGURootMotionJumpEnd
// (Native, Static, Public, BlueprintCallable)
// Parameters:
// class AActor*                           Owner                                                  (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UBGUFuncLibAnim::BGURootMotionJumpEnd(class AActor* Owner)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("BGUFuncLibAnim", "BGURootMotionJumpEnd");

	Params::BGUFuncLibAnim_BGURootMotionJumpEnd Parms{};

	Parms.Owner = Owner;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function b1-Managed.BED_TaskAsset.GetExtraDefaultOutputNodesInBranchGraph
// (Native, Event, Public, HasOutParams, BlueprintEvent, Const)
// Parameters:
// TArray<class UClass*>                   OutClasses                                             (Parm, OutParm)
// int32                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

int32 UBED_TaskAsset::GetExtraDefaultOutputNodesInBranchGraph(TArray<class UClass*>* OutClasses) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BED_TaskAsset", "GetExtraDefaultOutputNodesInBranchGraph");

	Params::BED_TaskAsset_GetExtraDefaultOutputNodesInBranchGraph Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	if (OutClasses != nullptr)
		*OutClasses = std::move(Parms.OutClasses);

	return Parms.ReturnValue;
}


// Function b1-Managed.BED_TaskAsset.GetExtraDefaultInputNodesInBranchGraph
// (Native, Event, Public, HasOutParams, BlueprintEvent, Const)
// Parameters:
// TArray<class UClass*>                   OutClasses                                             (Parm, OutParm)
// int32                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

int32 UBED_TaskAsset::GetExtraDefaultInputNodesInBranchGraph(TArray<class UClass*>* OutClasses) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BED_TaskAsset", "GetExtraDefaultInputNodesInBranchGraph");

	Params::BED_TaskAsset_GetExtraDefaultInputNodesInBranchGraph Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	if (OutClasses != nullptr)
		*OutClasses = std::move(Parms.OutClasses);

	return Parms.ReturnValue;
}


// Function b1-Managed.BED_TaskAsset.GetRerouteNodeClassInBranchGraph
// (Native, Event, Public, HasOutParams, BlueprintEvent, Const)
// Parameters:
// class UClass*                           ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

class UClass* UBED_TaskAsset::GetRerouteNodeClassInBranchGraph() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BED_TaskAsset", "GetRerouteNodeClassInBranchGraph");

	Params::BED_TaskAsset_GetRerouteNodeClassInBranchGraph Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function b1-Managed.BED_TaskAsset.GetStartNodeClassInBranchGraph
// (Native, Event, Public, HasOutParams, BlueprintEvent, Const)
// Parameters:
// class UClass*                           ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

class UClass* UBED_TaskAsset::GetStartNodeClassInBranchGraph() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BED_TaskAsset", "GetStartNodeClassInBranchGraph");

	Params::BED_TaskAsset_GetStartNodeClassInBranchGraph Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function b1-Managed.BED_TaskAsset.GetExtraDefaultOutputNodes
// (Native, Event, Public, HasOutParams, BlueprintEvent, Const)
// Parameters:
// TArray<class UClass*>                   OutClasses                                             (Parm, OutParm)
// int32                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

int32 UBED_TaskAsset::GetExtraDefaultOutputNodes(TArray<class UClass*>* OutClasses) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BED_TaskAsset", "GetExtraDefaultOutputNodes");

	Params::BED_TaskAsset_GetExtraDefaultOutputNodes Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	if (OutClasses != nullptr)
		*OutClasses = std::move(Parms.OutClasses);

	return Parms.ReturnValue;
}


// Function b1-Managed.BED_TaskAsset.GetExtraDefaultInputNodes
// (Native, Event, Public, HasOutParams, BlueprintEvent, Const)
// Parameters:
// TArray<class UClass*>                   OutClasses                                             (Parm, OutParm)
// int32                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

int32 UBED_TaskAsset::GetExtraDefaultInputNodes(TArray<class UClass*>* OutClasses) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BED_TaskAsset", "GetExtraDefaultInputNodes");

	Params::BED_TaskAsset_GetExtraDefaultInputNodes Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	if (OutClasses != nullptr)
		*OutClasses = std::move(Parms.OutClasses);

	return Parms.ReturnValue;
}


// Function b1-Managed.BED_TaskAsset.GetRerouteNodeClass
// (Native, Event, Public, HasOutParams, BlueprintEvent, Const)
// Parameters:
// class UClass*                           ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

class UClass* UBED_TaskAsset::GetRerouteNodeClass() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BED_TaskAsset", "GetRerouteNodeClass");

	Params::BED_TaskAsset_GetRerouteNodeClass Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function b1-Managed.BED_TaskAsset.GetActorGuidOptions
// (Native, Event, Public, HasOutParams, BlueprintEvent, Const)
// Parameters:
// class FString                           PropertyName                                           (Parm, ZeroConstructor, HasGetValueTypeHash)
// TArray<struct FActorGuidOption>         OutOptions                                             (Parm, OutParm)
// int32                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

int32 UBED_TaskAsset::GetActorGuidOptions(const class FString& PropertyName, TArray<struct FActorGuidOption>* OutOptions) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BED_TaskAsset", "GetActorGuidOptions");

	Params::BED_TaskAsset_GetActorGuidOptions Parms{};

	Parms.PropertyName = std::move(PropertyName);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	if (OutOptions != nullptr)
		*OutOptions = std::move(Parms.OutOptions);

	return Parms.ReturnValue;
}


// Function b1-Managed.BED_TaskAsset.GetStartNodeClass
// (Native, Event, Public, HasOutParams, BlueprintEvent, Const)
// Parameters:
// class UClass*                           ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

class UClass* UBED_TaskAsset::GetStartNodeClass() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BED_TaskAsset", "GetStartNodeClass");

	Params::BED_TaskAsset_GetStartNodeClass Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function b1-Managed.BED_TaskAsset.IsEditorOnlyCS
// (Native, Event, Public, HasOutParams, BlueprintEvent, Const)
// Parameters:
// uint8                                   ReturnValue                                            (Parm, OutParm, ReturnParm, NoDestructor, HasGetValueTypeHash)

uint8 UBED_TaskAsset::IsEditorOnlyCS() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BED_TaskAsset", "IsEditorOnlyCS");

	Params::BED_TaskAsset_IsEditorOnlyCS Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function b1-Managed.BED_TaskAsset.GetViewType
// (Native, Event, Public, HasOutParams, BlueprintEvent, Const)
// Parameters:
// ECalliopeViewType                       ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

ECalliopeViewType UBED_TaskAsset::GetViewType() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BED_TaskAsset", "GetViewType");

	Params::BED_TaskAsset_GetViewType Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function b1-Managed.BGGGameStateStartUpCS.ReceiveEndPlay
// (Native, Event, Public, Protected, BlueprintEvent)
// Parameters:
// EEndPlayReason                          EndPlayReason                                          (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ABGGGameStateStartUpCS::ReceiveEndPlay(EEndPlayReason EndPlayReason)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BGGGameStateStartUpCS", "ReceiveEndPlay");

	Params::BGGGameStateStartUpCS_ReceiveEndPlay Parms{};

	Parms.EndPlayReason = EndPlayReason;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function b1-Managed.BGUFuncLibGMCS.TestReleaseECSWorldObjRef
// (Native, Static, Public, BlueprintCallable)
// Parameters:
// class ABGUCharacterCS*                  Chr                                                    (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UBGUFuncLibGMCS::TestReleaseECSWorldObjRef(class ABGUCharacterCS* Chr)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("BGUFuncLibGMCS", "TestReleaseECSWorldObjRef");

	Params::BGUFuncLibGMCS_TestReleaseECSWorldObjRef Parms{};

	Parms.Chr = Chr;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function b1-Managed.BGUFuncLibGMCS.TestDestroyECSWorldObj
// (Native, Static, Public, BlueprintCallable)
// Parameters:
// class ABGUCharacterCS*                  Chr                                                    (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UBGUFuncLibGMCS::TestDestroyECSWorldObj(class ABGUCharacterCS* Chr)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("BGUFuncLibGMCS", "TestDestroyECSWorldObj");

	Params::BGUFuncLibGMCS_TestDestroyECSWorldObj Parms{};

	Parms.Chr = Chr;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function b1-Managed.BGUFuncLibGMCS.PrintTestECSWorldObj
// (Native, Static, Public, BlueprintCallable)
// Parameters:
// class ABGUCharacterCS*                  Chr                                                    (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UBGUFuncLibGMCS::PrintTestECSWorldObj(class ABGUCharacterCS* Chr)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("BGUFuncLibGMCS", "PrintTestECSWorldObj");

	Params::BGUFuncLibGMCS_PrintTestECSWorldObj Parms{};

	Parms.Chr = Chr;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function b1-Managed.BGUFuncLibGMCS.IsShenZhenDebug
// (Native, Static, Public, HasOutParams, BlueprintCallable)
// Parameters:
// uint8                                   ReturnValue                                            (Parm, OutParm, ReturnParm, NoDestructor, HasGetValueTypeHash)

uint8 UBGUFuncLibGMCS::IsShenZhenDebug()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("BGUFuncLibGMCS", "IsShenZhenDebug");

	Params::BGUFuncLibGMCS_IsShenZhenDebug Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function b1-Managed.BGUFuncLibGMCS.TestECSWorldObj
// (Native, Static, Public, BlueprintCallable)
// Parameters:
// class ABGUCharacterCS*                  Chr                                                    (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UBGUFuncLibGMCS::TestECSWorldObj(class ABGUCharacterCS* Chr)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("BGUFuncLibGMCS", "TestECSWorldObj");

	Params::BGUFuncLibGMCS_TestECSWorldObj Parms{};

	Parms.Chr = Chr;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function b1-Managed.BGUFuncLibWXLogin.QywxLoginSuccess
// (Native, Static, Public, BlueprintCallable)
// Parameters:
// class UObject*                          WorldCtx                                               (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// TArray<class FString>                   Params_0                                               (Parm)

void UBGUFuncLibWXLogin::QywxLoginSuccess(class UObject* WorldCtx, const TArray<class FString>& Params_0)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("BGUFuncLibWXLogin", "QywxLoginSuccess");

	Params::BGUFuncLibWXLogin_QywxLoginSuccess Parms{};

	Parms.WorldCtx = WorldCtx;
	Parms.Params_0 = std::move(Params_0);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function b1-Managed.BGUFuncLibWXLogin.WriteLoginCookie
// (Native, Static, Public, HasOutParams, BlueprintCallable)
// Parameters:
// class UObject*                          WorldCtx                                               (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// class FString                           Val                                                    (Parm, ZeroConstructor, HasGetValueTypeHash)
// int32                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

int32 UBGUFuncLibWXLogin::WriteLoginCookie(class UObject* WorldCtx, const class FString& Val)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("BGUFuncLibWXLogin", "WriteLoginCookie");

	Params::BGUFuncLibWXLogin_WriteLoginCookie Parms{};

	Parms.WorldCtx = WorldCtx;
	Parms.Val = std::move(Val);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function b1-Managed.BGUFuncLibWXLogin.ReadLoginCookie
// (Native, Static, Public, HasOutParams, BlueprintCallable)
// Parameters:
// class UObject*                          WorldCtx                                               (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// class FString                           ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash)

class FString UBGUFuncLibWXLogin::ReadLoginCookie(class UObject* WorldCtx)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("BGUFuncLibWXLogin", "ReadLoginCookie");

	Params::BGUFuncLibWXLogin_ReadLoginCookie Parms{};

	Parms.WorldCtx = WorldCtx;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function b1-Managed.BGUFuncLibWXLogin.SaveUserInfo
// (Native, Static, Public, HasOutParams, BlueprintCallable)
// Parameters:
// class UObject*                          WorldCtx                                               (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// class FString                           Val                                                    (Parm, ZeroConstructor, HasGetValueTypeHash)
// int32                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

int32 UBGUFuncLibWXLogin::SaveUserInfo(class UObject* WorldCtx, const class FString& Val)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("BGUFuncLibWXLogin", "SaveUserInfo");

	Params::BGUFuncLibWXLogin_SaveUserInfo Parms{};

	Parms.WorldCtx = WorldCtx;
	Parms.Val = std::move(Val);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function b1-Managed.BGUFuncLibWXLogin.LoadUserInfo
// (Native, Static, Public, HasOutParams, BlueprintCallable)
// Parameters:
// class UObject*                          WorldCtx                                               (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// TArray<class FString>                   ReturnValue                                            (Parm, OutParm, ReturnParm)

TArray<class FString> UBGUFuncLibWXLogin::LoadUserInfo(class UObject* WorldCtx)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("BGUFuncLibWXLogin", "LoadUserInfo");

	Params::BGUFuncLibWXLogin_LoadUserInfo Parms{};

	Parms.WorldCtx = WorldCtx;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function b1-Managed.BGUFuncLibWXLogin.GetIpList
// (Native, Static, Public, HasOutParams, BlueprintCallable)
// Parameters:
// class UObject*                          WorldCtx                                               (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// class FString                           ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash)

class FString UBGUFuncLibWXLogin::GetIpList(class UObject* WorldCtx)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("BGUFuncLibWXLogin", "GetIpList");

	Params::BGUFuncLibWXLogin_GetIpList Parms{};

	Parms.WorldCtx = WorldCtx;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function b1-Managed.FOnAkPostEventCallbackWrapper.Callback
// (Native, Public, Private)
// Parameters:
// EAkCallbackType                         CallbackType                                           (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// class UAkCallbackInfo*                  CallbackInfo                                           (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UFOnAkPostEventCallbackWrapper::Callback(EAkCallbackType CallbackType, class UAkCallbackInfo* CallbackInfo)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("FOnAkPostEventCallbackWrapper", "Callback");

	Params::FOnAkPostEventCallbackWrapper_Callback Parms{};

	Parms.CallbackType = CallbackType;
	Parms.CallbackInfo = CallbackInfo;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function b1-Managed.BAN_GSPlayLevelSequence.bIsNativeBranchingPointCS
// (Native, Event, Public, HasOutParams, BlueprintEvent, Const)
// Parameters:
// uint8                                   ReturnValue                                            (Parm, OutParm, ReturnParm, NoDestructor, HasGetValueTypeHash)

uint8 UBAN_GSPlayLevelSequence::bIsNativeBranchingPointCS() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BAN_GSPlayLevelSequence", "bIsNativeBranchingPointCS");

	Params::BAN_GSPlayLevelSequence_bIsNativeBranchingPointCS Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function b1-Managed.BAN_GSPlayLevelSequence.GSNotifyCS
// (Native, Event, Public, Protected, BlueprintEvent, Const)
// Parameters:
// struct FUStGSNotifyParam                NotifyParam                                            (Parm, ZeroConstructor, IsPlainOldData, NoDestructor)

void UBAN_GSPlayLevelSequence::GSNotifyCS(const struct FUStGSNotifyParam& NotifyParam) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BAN_GSPlayLevelSequence", "GSNotifyCS");

	Params::BAN_GSPlayLevelSequence_GSNotifyCS Parms{};

	Parms.NotifyParam = std::move(NotifyParam);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function b1-Managed.GSEQC_SummonContext.ProvideActorsSetCS
// (Native, Event, Public, BlueprintEvent, Const)
// Parameters:
// class UObject*                          QuerierObject                                          (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// class AActor*                           QuerierActor                                           (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UGSEQC_SummonContext::ProvideActorsSetCS(class UObject* QuerierObject, class AActor* QuerierActor) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GSEQC_SummonContext", "ProvideActorsSetCS");

	Params::GSEQC_SummonContext_ProvideActorsSetCS Parms{};

	Parms.QuerierObject = QuerierObject;
	Parms.QuerierActor = QuerierActor;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function b1-Managed.ReplicationTest.RunPrintInServer
// (Native, Public, Private, BlueprintCallable)

void AReplicationTest::RunPrintInServer()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("ReplicationTest", "RunPrintInServer");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function b1-Managed.ReplicationTest.PrintMulticast
// (Net, NetReliable, Native, Event, NetMulticast, Public, Private, BlueprintCallable)

void AReplicationTest::PrintMulticast()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("ReplicationTest", "PrintMulticast");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function b1-Managed.ReplicationTest.PrintInServer
// (Net, NetReliable, Native, Event, Public, Private, NetServer, BlueprintCallable)

void AReplicationTest::PrintInServer()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("ReplicationTest", "PrintInServer");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function b1-Managed.GSRetainerBox.OnViewWidgetSizeChangedEvent
// (Native, Event, Public, BlueprintEvent)
// Parameters:
// struct FVector2D                        Size                                                   (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void b1MinusManaged::UGSRetainerBox::OnViewWidgetSizeChangedEvent(const struct FVector2D& Size)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GSRetainerBox", "OnViewWidgetSizeChangedEvent");

	Params::GSRetainerBox_OnViewWidgetSizeChangedEvent Parms{};

	Parms.Size = std::move(Size);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function b1-Managed.BANS_GSSetCurveValueForCamOffset.GSNotifyBeginCS
// (Native, Event, Public, Protected, BlueprintEvent, Const)
// Parameters:
// struct FUStGSNotifyParam                NotifyParam                                            (Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
// float                                   TotalDuration                                          (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UBANS_GSSetCurveValueForCamOffset::GSNotifyBeginCS(const struct FUStGSNotifyParam& NotifyParam, float TotalDuration) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BANS_GSSetCurveValueForCamOffset", "GSNotifyBeginCS");

	Params::BANS_GSSetCurveValueForCamOffset_GSNotifyBeginCS Parms{};

	Parms.NotifyParam = std::move(NotifyParam);
	Parms.TotalDuration = TotalDuration;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function b1-Managed.BANS_GSSetCurveValueForCamOffset.GSNotifyEndCS
// (Native, Event, Public, Protected, BlueprintEvent, Const)
// Parameters:
// struct FUStGSNotifyParam                NotifyParam                                            (Parm, ZeroConstructor, IsPlainOldData, NoDestructor)

void UBANS_GSSetCurveValueForCamOffset::GSNotifyEndCS(const struct FUStGSNotifyParam& NotifyParam) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BANS_GSSetCurveValueForCamOffset", "GSNotifyEndCS");

	Params::BANS_GSSetCurveValueForCamOffset_GSNotifyEndCS Parms{};

	Parms.NotifyParam = std::move(NotifyParam);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function b1-Managed.FGSOnAKBStateBeginWrapper.Callback
// (Native, Public, Private)
// Parameters:
// class FName                             BeginStateName                                         (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// class FName                             EndStateName                                           (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// uint8                                   IsFromForceSetStateImmediately                         (Parm, NoDestructor, HasGetValueTypeHash)

void UFGSOnAKBStateBeginWrapper::Callback(class FName BeginStateName, class FName EndStateName, uint8 IsFromForceSetStateImmediately)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("FGSOnAKBStateBeginWrapper", "Callback");

	Params::FGSOnAKBStateBeginWrapper_Callback Parms{};

	Parms.BeginStateName = BeginStateName;
	Parms.EndStateName = EndStateName;
	Parms.IsFromForceSetStateImmediately = IsFromForceSetStateImmediately;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function b1-Managed.FOnMultiLineEditableTextBoxCommittedEventWrapper.Callback
// (Native, Public, Private)
// Parameters:
// class FText                             Text                                                   (Parm)
// ETextCommit                             CommitMethod                                           (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UFOnMultiLineEditableTextBoxCommittedEventWrapper::Callback(const class FText& Text, ETextCommit CommitMethod)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("FOnMultiLineEditableTextBoxCommittedEventWrapper", "Callback");

	Params::FOnMultiLineEditableTextBoxCommittedEventWrapper_Callback Parms{};

	Parms.Text = std::move(Text);
	Parms.CommitMethod = CommitMethod;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function b1-Managed.BANS_GSComboKeyCache.GSNotifyBeginCS
// (Native, Event, Public, Protected, BlueprintEvent, Const)
// Parameters:
// struct FUStGSNotifyParam                NotifyParam                                            (Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
// float                                   TotalDuration                                          (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UBANS_GSComboKeyCache::GSNotifyBeginCS(const struct FUStGSNotifyParam& NotifyParam, float TotalDuration) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BANS_GSComboKeyCache", "GSNotifyBeginCS");

	Params::BANS_GSComboKeyCache_GSNotifyBeginCS Parms{};

	Parms.NotifyParam = std::move(NotifyParam);
	Parms.TotalDuration = TotalDuration;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function b1-Managed.FOnButtonPressedEventWrapper.Callback
// (Native, Public, Private)

void UFOnButtonPressedEventWrapper::Callback()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("FOnButtonPressedEventWrapper", "Callback");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function b1-Managed.BED_ProcessStateNode_ExecutionSequence.CanUserAddOutputInCS
// (Native, Event, Public, HasOutParams, BlueprintEvent, Const)
// Parameters:
// uint8                                   ReturnValue                                            (Parm, OutParm, ReturnParm, NoDestructor, HasGetValueTypeHash)

uint8 UBED_ProcessStateNode_ExecutionSequence::CanUserAddOutputInCS() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BED_ProcessStateNode_ExecutionSequence", "CanUserAddOutputInCS");

	Params::BED_ProcessStateNode_ExecutionSequence_CanUserAddOutputInCS Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function b1-Managed.BED_BehaviorNode_LogicalOr.CanUserAddInputInCS
// (Native, Event, Public, HasOutParams, BlueprintEvent, Const)
// Parameters:
// uint8                                   ReturnValue                                            (Parm, OutParm, ReturnParm, NoDestructor, HasGetValueTypeHash)

uint8 UBED_BehaviorNode_LogicalOr::CanUserAddInputInCS() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BED_BehaviorNode_LogicalOr", "CanUserAddInputInCS");

	Params::BED_BehaviorNode_LogicalOr_CanUserAddInputInCS Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function b1-Managed.BED_BehaviorNode_LogicalOr.IsSupportViewType
// (Native, Event, Public, HasOutParams, BlueprintEvent, Const)
// Parameters:
// ECalliopeViewType                       InViewType                                             (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// uint8                                   ReturnValue                                            (Parm, OutParm, ReturnParm, NoDestructor, HasGetValueTypeHash)

uint8 UBED_BehaviorNode_LogicalOr::IsSupportViewType(const ECalliopeViewType& InViewType) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BED_BehaviorNode_LogicalOr", "IsSupportViewType");

	Params::BED_BehaviorNode_LogicalOr_IsSupportViewType Parms{};

	Parms.InViewType = InViewType;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function b1-Managed.BGWDataAsset_ProjectileSpawnConfig.AboutEffectCaster
// (Native, Public, HasOutParams, BlueprintCallable)
// Parameters:
// uint8                                   ReturnValue                                            (Parm, OutParm, ReturnParm, NoDestructor, HasGetValueTypeHash)

uint8 UBGWDataAsset_ProjectileSpawnConfig::AboutEffectCaster()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BGWDataAsset_ProjectileSpawnConfig", "AboutEffectCaster");

	Params::BGWDataAsset_ProjectileSpawnConfig_AboutEffectCaster Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function b1-Managed.BED_BehaviorNode_DetectUnitOnce.GetNodeDescriptionInCS
// (Native, Event, Public, HasOutParams, BlueprintEvent, Const)
// Parameters:
// class FString                           ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash)

class FString UBED_BehaviorNode_DetectUnitOnce::GetNodeDescriptionInCS() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BED_BehaviorNode_DetectUnitOnce", "GetNodeDescriptionInCS");

	Params::BED_BehaviorNode_DetectUnitOnce_GetNodeDescriptionInCS Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function b1-Managed.BED_BehaviorNode_DetectUnitOnce.IsSupportViewType
// (Native, Event, Public, HasOutParams, BlueprintEvent, Const)
// Parameters:
// ECalliopeViewType                       InViewType                                             (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// uint8                                   ReturnValue                                            (Parm, OutParm, ReturnParm, NoDestructor, HasGetValueTypeHash)

uint8 UBED_BehaviorNode_DetectUnitOnce::IsSupportViewType(const ECalliopeViewType& InViewType) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BED_BehaviorNode_DetectUnitOnce", "IsSupportViewType");

	Params::BED_BehaviorNode_DetectUnitOnce_IsSupportViewType Parms{};

	Parms.InViewType = InViewType;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function b1-Managed.BED_TaskNode_ObserveUnitsDeadWithOrder.PostPropertyChanged
// (Native, Event, Public, BlueprintEvent)
// Parameters:
// class FString                           MemberName                                             (Parm, ZeroConstructor, HasGetValueTypeHash)
// class FString                           PropertyName                                           (Parm, ZeroConstructor, HasGetValueTypeHash)

void UBED_TaskNode_ObserveUnitsDeadWithOrder::PostPropertyChanged(const class FString& MemberName, const class FString& PropertyName)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BED_TaskNode_ObserveUnitsDeadWithOrder", "PostPropertyChanged");

	Params::BED_TaskNode_ObserveUnitsDeadWithOrder_PostPropertyChanged Parms{};

	Parms.MemberName = std::move(MemberName);
	Parms.PropertyName = std::move(PropertyName);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function b1-Managed.BED_TaskNode_ObserveUnitsDeadWithOrder.GetNodeDescriptionInCS
// (Native, Event, Public, HasOutParams, BlueprintEvent, Const)
// Parameters:
// class FString                           ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash)

class FString UBED_TaskNode_ObserveUnitsDeadWithOrder::GetNodeDescriptionInCS() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BED_TaskNode_ObserveUnitsDeadWithOrder", "GetNodeDescriptionInCS");

	Params::BED_TaskNode_ObserveUnitsDeadWithOrder_GetNodeDescriptionInCS Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function b1-Managed.BED_TaskNode_ObserveUnitsDeadWithOrder.OnRefreshAssetInCS
// (Native, Event, Public, BlueprintEvent, Const)

void UBED_TaskNode_ObserveUnitsDeadWithOrder::OnRefreshAssetInCS() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BED_TaskNode_ObserveUnitsDeadWithOrder", "OnRefreshAssetInCS");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function b1-Managed.BAN_GSPlayBeamFX.GetSoftReferences
// (Native, Event, Public, HasOutParams, BlueprintEvent, Const)
// Parameters:
// TArray<struct FSoftObjectPath>          ReturnValue                                            (Parm, OutParm, ReturnParm)

TArray<struct FSoftObjectPath> UBAN_GSPlayBeamFX::GetSoftReferences() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BAN_GSPlayBeamFX", "GetSoftReferences");

	Params::BAN_GSPlayBeamFX_GetSoftReferences Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function b1-Managed.BAN_GSPlayBeamFX.GSNotifyCS
// (Native, Event, Public, Protected, BlueprintEvent, Const)
// Parameters:
// struct FUStGSNotifyParam                NotifyParam                                            (Parm, ZeroConstructor, IsPlainOldData, NoDestructor)

void UBAN_GSPlayBeamFX::GSNotifyCS(const struct FUStGSNotifyParam& NotifyParam) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BAN_GSPlayBeamFX", "GSNotifyCS");

	Params::BAN_GSPlayBeamFX_GSNotifyCS Parms{};

	Parms.NotifyParam = std::move(NotifyParam);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function b1-Managed.BED_MovieNode_PerformerTriggerSkillEffect.GetNodeDescriptionInCS
// (Native, Event, Public, HasOutParams, BlueprintEvent, Const)
// Parameters:
// class FString                           ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash)

class FString UBED_MovieNode_PerformerTriggerSkillEffect::GetNodeDescriptionInCS() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BED_MovieNode_PerformerTriggerSkillEffect", "GetNodeDescriptionInCS");

	Params::BED_MovieNode_PerformerTriggerSkillEffect_GetNodeDescriptionInCS Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function b1-Managed.BGWDataAsset_HitAudioPreloadList.UpdateConfig
// (Native, Public, BlueprintCallable)

void UBGWDataAsset_HitAudioPreloadList::UpdateConfig()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BGWDataAsset_HitAudioPreloadList", "UpdateConfig");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function b1-Managed.BED_MovieAsset.GetExtraDefaultOutputNodesInBranchGraph
// (Native, Event, Public, HasOutParams, BlueprintEvent, Const)
// Parameters:
// TArray<class UClass*>                   OutClasses                                             (Parm, OutParm)
// int32                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

int32 UBED_MovieAsset::GetExtraDefaultOutputNodesInBranchGraph(TArray<class UClass*>* OutClasses) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BED_MovieAsset", "GetExtraDefaultOutputNodesInBranchGraph");

	Params::BED_MovieAsset_GetExtraDefaultOutputNodesInBranchGraph Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	if (OutClasses != nullptr)
		*OutClasses = std::move(Parms.OutClasses);

	return Parms.ReturnValue;
}


// Function b1-Managed.BED_MovieAsset.GetExtraDefaultInputNodesInBranchGraph
// (Native, Event, Public, HasOutParams, BlueprintEvent, Const)
// Parameters:
// TArray<class UClass*>                   OutClasses                                             (Parm, OutParm)
// int32                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

int32 UBED_MovieAsset::GetExtraDefaultInputNodesInBranchGraph(TArray<class UClass*>* OutClasses) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BED_MovieAsset", "GetExtraDefaultInputNodesInBranchGraph");

	Params::BED_MovieAsset_GetExtraDefaultInputNodesInBranchGraph Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	if (OutClasses != nullptr)
		*OutClasses = std::move(Parms.OutClasses);

	return Parms.ReturnValue;
}


// Function b1-Managed.BED_MovieAsset.GetRerouteNodeClassInBranchGraph
// (Native, Event, Public, HasOutParams, BlueprintEvent, Const)
// Parameters:
// class UClass*                           ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

class UClass* UBED_MovieAsset::GetRerouteNodeClassInBranchGraph() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BED_MovieAsset", "GetRerouteNodeClassInBranchGraph");

	Params::BED_MovieAsset_GetRerouteNodeClassInBranchGraph Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function b1-Managed.BED_MovieAsset.GetStartNodeClassInBranchGraph
// (Native, Event, Public, HasOutParams, BlueprintEvent, Const)
// Parameters:
// class UClass*                           ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

class UClass* UBED_MovieAsset::GetStartNodeClassInBranchGraph() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BED_MovieAsset", "GetStartNodeClassInBranchGraph");

	Params::BED_MovieAsset_GetStartNodeClassInBranchGraph Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function b1-Managed.BED_MovieAsset.GetExtraDefaultOutputNodes
// (Native, Event, Public, HasOutParams, BlueprintEvent, Const)
// Parameters:
// TArray<class UClass*>                   OutClasses                                             (Parm, OutParm)
// int32                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

int32 UBED_MovieAsset::GetExtraDefaultOutputNodes(TArray<class UClass*>* OutClasses) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BED_MovieAsset", "GetExtraDefaultOutputNodes");

	Params::BED_MovieAsset_GetExtraDefaultOutputNodes Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	if (OutClasses != nullptr)
		*OutClasses = std::move(Parms.OutClasses);

	return Parms.ReturnValue;
}


// Function b1-Managed.BED_MovieAsset.GetExtraDefaultInputNodes
// (Native, Event, Public, HasOutParams, BlueprintEvent, Const)
// Parameters:
// TArray<class UClass*>                   OutClasses                                             (Parm, OutParm)
// int32                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

int32 UBED_MovieAsset::GetExtraDefaultInputNodes(TArray<class UClass*>* OutClasses) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BED_MovieAsset", "GetExtraDefaultInputNodes");

	Params::BED_MovieAsset_GetExtraDefaultInputNodes Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	if (OutClasses != nullptr)
		*OutClasses = std::move(Parms.OutClasses);

	return Parms.ReturnValue;
}


// Function b1-Managed.BED_MovieAsset.GetRerouteNodeClass
// (Native, Event, Public, HasOutParams, BlueprintEvent, Const)
// Parameters:
// class UClass*                           ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

class UClass* UBED_MovieAsset::GetRerouteNodeClass() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BED_MovieAsset", "GetRerouteNodeClass");

	Params::BED_MovieAsset_GetRerouteNodeClass Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function b1-Managed.BED_MovieAsset.GetStartNodeClass
// (Native, Event, Public, HasOutParams, BlueprintEvent, Const)
// Parameters:
// class UClass*                           ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

class UClass* UBED_MovieAsset::GetStartNodeClass() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BED_MovieAsset", "GetStartNodeClass");

	Params::BED_MovieAsset_GetStartNodeClass Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function b1-Managed.BED_MovieAsset.GetViewType
// (Native, Event, Public, HasOutParams, BlueprintEvent, Const)
// Parameters:
// ECalliopeViewType                       ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

ECalliopeViewType UBED_MovieAsset::GetViewType() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BED_MovieAsset", "GetViewType");

	Params::BED_MovieAsset_GetViewType Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function b1-Managed.BED_ComboAsset.GetExtraDefaultOutputNodesInBranchGraph
// (Native, Event, Public, HasOutParams, BlueprintEvent, Const)
// Parameters:
// TArray<class UClass*>                   OutClasses                                             (Parm, OutParm)
// int32                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

int32 UBED_ComboAsset::GetExtraDefaultOutputNodesInBranchGraph(TArray<class UClass*>* OutClasses) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BED_ComboAsset", "GetExtraDefaultOutputNodesInBranchGraph");

	Params::BED_ComboAsset_GetExtraDefaultOutputNodesInBranchGraph Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	if (OutClasses != nullptr)
		*OutClasses = std::move(Parms.OutClasses);

	return Parms.ReturnValue;
}


// Function b1-Managed.BED_ComboAsset.GetExtraDefaultInputNodesInBranchGraph
// (Native, Event, Public, HasOutParams, BlueprintEvent, Const)
// Parameters:
// TArray<class UClass*>                   OutClasses                                             (Parm, OutParm)
// int32                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

int32 UBED_ComboAsset::GetExtraDefaultInputNodesInBranchGraph(TArray<class UClass*>* OutClasses) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BED_ComboAsset", "GetExtraDefaultInputNodesInBranchGraph");

	Params::BED_ComboAsset_GetExtraDefaultInputNodesInBranchGraph Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	if (OutClasses != nullptr)
		*OutClasses = std::move(Parms.OutClasses);

	return Parms.ReturnValue;
}


// Function b1-Managed.BED_ComboAsset.GetRerouteNodeClassInBranchGraph
// (Native, Event, Public, HasOutParams, BlueprintEvent, Const)
// Parameters:
// class UClass*                           ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

class UClass* UBED_ComboAsset::GetRerouteNodeClassInBranchGraph() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BED_ComboAsset", "GetRerouteNodeClassInBranchGraph");

	Params::BED_ComboAsset_GetRerouteNodeClassInBranchGraph Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function b1-Managed.BED_ComboAsset.GetStartNodeClassInBranchGraph
// (Native, Event, Public, HasOutParams, BlueprintEvent, Const)
// Parameters:
// class UClass*                           ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

class UClass* UBED_ComboAsset::GetStartNodeClassInBranchGraph() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BED_ComboAsset", "GetStartNodeClassInBranchGraph");

	Params::BED_ComboAsset_GetStartNodeClassInBranchGraph Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function b1-Managed.BED_ComboAsset.GetExtraDefaultOutputNodes
// (Native, Event, Public, HasOutParams, BlueprintEvent, Const)
// Parameters:
// TArray<class UClass*>                   OutClasses                                             (Parm, OutParm)
// int32                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

int32 UBED_ComboAsset::GetExtraDefaultOutputNodes(TArray<class UClass*>* OutClasses) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BED_ComboAsset", "GetExtraDefaultOutputNodes");

	Params::BED_ComboAsset_GetExtraDefaultOutputNodes Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	if (OutClasses != nullptr)
		*OutClasses = std::move(Parms.OutClasses);

	return Parms.ReturnValue;
}


// Function b1-Managed.BED_ComboAsset.GetExtraDefaultInputNodes
// (Native, Event, Public, HasOutParams, BlueprintEvent, Const)
// Parameters:
// TArray<class UClass*>                   OutClasses                                             (Parm, OutParm)
// int32                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

int32 UBED_ComboAsset::GetExtraDefaultInputNodes(TArray<class UClass*>* OutClasses) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BED_ComboAsset", "GetExtraDefaultInputNodes");

	Params::BED_ComboAsset_GetExtraDefaultInputNodes Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	if (OutClasses != nullptr)
		*OutClasses = std::move(Parms.OutClasses);

	return Parms.ReturnValue;
}


// Function b1-Managed.BED_ComboAsset.GetRerouteNodeClass
// (Native, Event, Public, HasOutParams, BlueprintEvent, Const)
// Parameters:
// class UClass*                           ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

class UClass* UBED_ComboAsset::GetRerouteNodeClass() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BED_ComboAsset", "GetRerouteNodeClass");

	Params::BED_ComboAsset_GetRerouteNodeClass Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function b1-Managed.BED_ComboAsset.GetStartNodeClass
// (Native, Event, Public, HasOutParams, BlueprintEvent, Const)
// Parameters:
// class UClass*                           ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

class UClass* UBED_ComboAsset::GetStartNodeClass() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BED_ComboAsset", "GetStartNodeClass");

	Params::BED_ComboAsset_GetStartNodeClass Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function b1-Managed.BED_ComboAsset.GetViewType
// (Native, Event, Public, HasOutParams, BlueprintEvent, Const)
// Parameters:
// ECalliopeViewType                       ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

ECalliopeViewType UBED_ComboAsset::GetViewType() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BED_ComboAsset", "GetViewType");

	Params::BED_ComboAsset_GetViewType Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function b1-Managed.BED_QuestAsset.OnPropertyChanged
// (Native, Event, Public, BlueprintEvent)
// Parameters:
// class FString                           MemberName                                             (Parm, ZeroConstructor, HasGetValueTypeHash)
// class FString                           PropertyName                                           (Parm, ZeroConstructor, HasGetValueTypeHash)

void UBED_QuestAsset::OnPropertyChanged(const class FString& MemberName, const class FString& PropertyName)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BED_QuestAsset", "OnPropertyChanged");

	Params::BED_QuestAsset_OnPropertyChanged Parms{};

	Parms.MemberName = std::move(MemberName);
	Parms.PropertyName = std::move(PropertyName);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function b1-Managed.BED_QuestAsset.GetExtraDefaultOutputNodesInBranchGraph
// (Native, Event, Public, HasOutParams, BlueprintEvent, Const)
// Parameters:
// TArray<class UClass*>                   OutClasses                                             (Parm, OutParm)
// int32                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

int32 UBED_QuestAsset::GetExtraDefaultOutputNodesInBranchGraph(TArray<class UClass*>* OutClasses) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BED_QuestAsset", "GetExtraDefaultOutputNodesInBranchGraph");

	Params::BED_QuestAsset_GetExtraDefaultOutputNodesInBranchGraph Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	if (OutClasses != nullptr)
		*OutClasses = std::move(Parms.OutClasses);

	return Parms.ReturnValue;
}


// Function b1-Managed.BED_QuestAsset.GetExtraDefaultInputNodesInBranchGraph
// (Native, Event, Public, HasOutParams, BlueprintEvent, Const)
// Parameters:
// TArray<class UClass*>                   OutClasses                                             (Parm, OutParm)
// int32                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

int32 UBED_QuestAsset::GetExtraDefaultInputNodesInBranchGraph(TArray<class UClass*>* OutClasses) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BED_QuestAsset", "GetExtraDefaultInputNodesInBranchGraph");

	Params::BED_QuestAsset_GetExtraDefaultInputNodesInBranchGraph Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	if (OutClasses != nullptr)
		*OutClasses = std::move(Parms.OutClasses);

	return Parms.ReturnValue;
}


// Function b1-Managed.BED_QuestAsset.GetRerouteNodeClassInBranchGraph
// (Native, Event, Public, HasOutParams, BlueprintEvent, Const)
// Parameters:
// class UClass*                           ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

class UClass* UBED_QuestAsset::GetRerouteNodeClassInBranchGraph() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BED_QuestAsset", "GetRerouteNodeClassInBranchGraph");

	Params::BED_QuestAsset_GetRerouteNodeClassInBranchGraph Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function b1-Managed.BED_QuestAsset.GetStartNodeClassInBranchGraph
// (Native, Event, Public, HasOutParams, BlueprintEvent, Const)
// Parameters:
// class UClass*                           ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

class UClass* UBED_QuestAsset::GetStartNodeClassInBranchGraph() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BED_QuestAsset", "GetStartNodeClassInBranchGraph");

	Params::BED_QuestAsset_GetStartNodeClassInBranchGraph Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function b1-Managed.BED_QuestAsset.GetExtraDefaultOutputNodes
// (Native, Event, Public, HasOutParams, BlueprintEvent, Const)
// Parameters:
// TArray<class UClass*>                   OutClasses                                             (Parm, OutParm)
// int32                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

int32 UBED_QuestAsset::GetExtraDefaultOutputNodes(TArray<class UClass*>* OutClasses) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BED_QuestAsset", "GetExtraDefaultOutputNodes");

	Params::BED_QuestAsset_GetExtraDefaultOutputNodes Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	if (OutClasses != nullptr)
		*OutClasses = std::move(Parms.OutClasses);

	return Parms.ReturnValue;
}


// Function b1-Managed.BED_QuestAsset.GetExtraDefaultInputNodes
// (Native, Event, Public, HasOutParams, BlueprintEvent, Const)
// Parameters:
// TArray<class UClass*>                   OutClasses                                             (Parm, OutParm)
// int32                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

int32 UBED_QuestAsset::GetExtraDefaultInputNodes(TArray<class UClass*>* OutClasses) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BED_QuestAsset", "GetExtraDefaultInputNodes");

	Params::BED_QuestAsset_GetExtraDefaultInputNodes Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	if (OutClasses != nullptr)
		*OutClasses = std::move(Parms.OutClasses);

	return Parms.ReturnValue;
}


// Function b1-Managed.BED_QuestAsset.GetRerouteNodeClass
// (Native, Event, Public, HasOutParams, BlueprintEvent, Const)
// Parameters:
// class UClass*                           ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

class UClass* UBED_QuestAsset::GetRerouteNodeClass() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BED_QuestAsset", "GetRerouteNodeClass");

	Params::BED_QuestAsset_GetRerouteNodeClass Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function b1-Managed.BED_QuestAsset.GetStartNodeClass
// (Native, Event, Public, HasOutParams, BlueprintEvent, Const)
// Parameters:
// class UClass*                           ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

class UClass* UBED_QuestAsset::GetStartNodeClass() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BED_QuestAsset", "GetStartNodeClass");

	Params::BED_QuestAsset_GetStartNodeClass Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function b1-Managed.BED_QuestAsset.GetViewType
// (Native, Event, Public, HasOutParams, BlueprintEvent, Const)
// Parameters:
// ECalliopeViewType                       ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

ECalliopeViewType UBED_QuestAsset::GetViewType() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BED_QuestAsset", "GetViewType");

	Params::BED_QuestAsset_GetViewType Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function b1-Managed.BED_ComboNode_Condition.GetContextOutputsInCS
// (Native, Event, Public, HasOutParams, BlueprintEvent)
// Parameters:
// TArray<class FName>                     ReturnValue                                            (Parm, OutParm, ReturnParm)

TArray<class FName> UBED_ComboNode_Condition::GetContextOutputsInCS()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BED_ComboNode_Condition", "GetContextOutputsInCS");

	Params::BED_ComboNode_Condition_GetContextOutputsInCS Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function b1-Managed.BED_ComboNode_Condition.PostPropertyChanged
// (Native, Event, Public, BlueprintEvent)
// Parameters:
// class FString                           MemberName                                             (Parm, ZeroConstructor, HasGetValueTypeHash)
// class FString                           PropertyName                                           (Parm, ZeroConstructor, HasGetValueTypeHash)

void UBED_ComboNode_Condition::PostPropertyChanged(const class FString& MemberName, const class FString& PropertyName)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BED_ComboNode_Condition", "PostPropertyChanged");

	Params::BED_ComboNode_Condition_PostPropertyChanged Parms{};

	Parms.MemberName = std::move(MemberName);
	Parms.PropertyName = std::move(PropertyName);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function b1-Managed.BGWDreamTeleportPointsComp.OnBeforeTeleportMontageEnded
// (Native, Public)

void UBGWDreamTeleportPointsComp::OnBeforeTeleportMontageEnded()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BGWDreamTeleportPointsComp", "OnBeforeTeleportMontageEnded");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function b1-Managed.BGWDreamTeleportPointsComp.OnAfterTeleportMontageEnded
// (Native, Public)

void UBGWDreamTeleportPointsComp::OnAfterTeleportMontageEnded()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BGWDreamTeleportPointsComp", "OnAfterTeleportMontageEnded");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function b1-Managed.UGSSdkHttpRequestCallbackListener.OnReponseComplete
// (Native, Event, Public, BlueprintEvent)
// Parameters:
// uint8                                   bSuccess                                               (Parm, NoDestructor, HasGetValueTypeHash)
// int32                                   HttpCode                                               (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// TArray<uint8>                           Content                                                (ConstParm, Parm, OutParm, ReferenceParm)

void UUGSSdkHttpRequestCallbackListener::OnReponseComplete(uint8 bSuccess, int32 HttpCode, const TArray<uint8>& Content)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("UGSSdkHttpRequestCallbackListener", "OnReponseComplete");

	Params::UGSSdkHttpRequestCallbackListener_OnReponseComplete Parms{};

	Parms.bSuccess = bSuccess;
	Parms.HttpCode = HttpCode;
	Parms.Content = std::move(Content);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function b1-Managed.BSNS_DisablePhysicalMove.OnNotifyBegin
// (Native, Event, Public, BlueprintEvent)
// Parameters:
// class UCalliopeLevelSequencePlayer*     InPlayer                                               (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// int32                                   InStatus                                               (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// uint8                                   bInBackwards                                           (Parm, NoDestructor, HasGetValueTypeHash)

void UBSNS_DisablePhysicalMove::OnNotifyBegin(class UCalliopeLevelSequencePlayer* InPlayer, int32 InStatus, uint8 bInBackwards)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BSNS_DisablePhysicalMove", "OnNotifyBegin");

	Params::BSNS_DisablePhysicalMove_OnNotifyBegin Parms{};

	Parms.InPlayer = InPlayer;
	Parms.InStatus = InStatus;
	Parms.bInBackwards = bInBackwards;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function b1-Managed.BSNS_DisablePhysicalMove.OnNotifyEnd
// (Native, Event, Public, BlueprintEvent)
// Parameters:
// class UCalliopeLevelSequencePlayer*     InPlayer                                               (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// int32                                   InStatus                                               (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// uint8                                   bInBackwards                                           (Parm, NoDestructor, HasGetValueTypeHash)

void UBSNS_DisablePhysicalMove::OnNotifyEnd(class UCalliopeLevelSequencePlayer* InPlayer, int32 InStatus, uint8 bInBackwards)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BSNS_DisablePhysicalMove", "OnNotifyEnd");

	Params::BSNS_DisablePhysicalMove_OnNotifyEnd Parms{};

	Parms.InPlayer = InPlayer;
	Parms.InStatus = InStatus;
	Parms.bInBackwards = bInBackwards;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function b1-Managed.BED_BehaviorNode_TriggerAttackStiff_ListenAttacker.GetNodeDescriptionInCS
// (Native, Event, Public, HasOutParams, BlueprintEvent, Const)
// Parameters:
// class FString                           ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash)

class FString UBED_BehaviorNode_TriggerAttackStiff_ListenAttacker::GetNodeDescriptionInCS() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BED_BehaviorNode_TriggerAttackStiff_ListenAttacker", "GetNodeDescriptionInCS");

	Params::BED_BehaviorNode_TriggerAttackStiff_ListenAttacker_GetNodeDescriptionInCS Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function b1-Managed.BED_BehaviorNode_TriggerAttackStiff_ListenAttacker.IsSupportViewType
// (Native, Event, Public, HasOutParams, BlueprintEvent, Const)
// Parameters:
// ECalliopeViewType                       InViewType                                             (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// uint8                                   ReturnValue                                            (Parm, OutParm, ReturnParm, NoDestructor, HasGetValueTypeHash)

uint8 UBED_BehaviorNode_TriggerAttackStiff_ListenAttacker::IsSupportViewType(const ECalliopeViewType& InViewType) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BED_BehaviorNode_TriggerAttackStiff_ListenAttacker", "IsSupportViewType");

	Params::BED_BehaviorNode_TriggerAttackStiff_ListenAttacker_IsSupportViewType Parms{};

	Parms.InViewType = InViewType;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function b1-Managed.BED_ProcessMachineNode_Terminate.IsSupportViewType
// (Native, Event, Public, HasOutParams, BlueprintEvent, Const)
// Parameters:
// ECalliopeViewType                       InViewType                                             (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// uint8                                   ReturnValue                                            (Parm, OutParm, ReturnParm, NoDestructor, HasGetValueTypeHash)

uint8 UBED_ProcessMachineNode_Terminate::IsSupportViewType(const ECalliopeViewType& InViewType) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BED_ProcessMachineNode_Terminate", "IsSupportViewType");

	Params::BED_ProcessMachineNode_Terminate_IsSupportViewType Parms{};

	Parms.InViewType = InViewType;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function b1-Managed.BED_BehaviorNode_Random.GetNodeDescriptionInCS
// (Native, Event, Public, HasOutParams, BlueprintEvent, Const)
// Parameters:
// class FString                           ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash)

class FString UBED_BehaviorNode_Random::GetNodeDescriptionInCS() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BED_BehaviorNode_Random", "GetNodeDescriptionInCS");

	Params::BED_BehaviorNode_Random_GetNodeDescriptionInCS Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function b1-Managed.BED_BehaviorNode_Random.IsSupportViewType
// (Native, Event, Public, HasOutParams, BlueprintEvent, Const)
// Parameters:
// ECalliopeViewType                       InViewType                                             (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// uint8                                   ReturnValue                                            (Parm, OutParm, ReturnParm, NoDestructor, HasGetValueTypeHash)

uint8 UBED_BehaviorNode_Random::IsSupportViewType(const ECalliopeViewType& InViewType) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BED_BehaviorNode_Random", "IsSupportViewType");

	Params::BED_BehaviorNode_Random_IsSupportViewType Parms{};

	Parms.InViewType = InViewType;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function b1-Managed.UBGWFunctionLibraryCS.SetMapAreaColorDataForEditorUtil
// (Native, Static, Public, HasOutParams, BlueprintCallable)
// Parameters:
// int32                                   MapId                                                  (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// class UGSMapAreaBaseData*               TargetBaseData                                         (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// class FString                           ErrMsg                                                 (Parm, OutParm, ZeroConstructor, HasGetValueTypeHash)
// int32                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

int32 UUBGWFunctionLibraryCS::SetMapAreaColorDataForEditorUtil(int32 MapId, class UGSMapAreaBaseData* TargetBaseData, class FString* ErrMsg)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("UBGWFunctionLibraryCS", "SetMapAreaColorDataForEditorUtil");

	Params::UBGWFunctionLibraryCS_SetMapAreaColorDataForEditorUtil Parms{};

	Parms.MapId = MapId;
	Parms.TargetBaseData = TargetBaseData;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	if (ErrMsg != nullptr)
		*ErrMsg = std::move(Parms.ErrMsg);

	return Parms.ReturnValue;
}


// Function b1-Managed.UBGWFunctionLibraryCS.TestCalcPosToMapAreaIDInGame
// (Native, Static, Public, HasOutParams, BlueprintCallable)
// Parameters:
// int32                                   MapId                                                  (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// struct FVector2D                        Pos                                                    (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// class UObject*                          WorldContext                                           (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// int32                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

int32 UUBGWFunctionLibraryCS::TestCalcPosToMapAreaIDInGame(int32 MapId, const struct FVector2D& Pos, class UObject* WorldContext)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("UBGWFunctionLibraryCS", "TestCalcPosToMapAreaIDInGame");

	Params::UBGWFunctionLibraryCS_TestCalcPosToMapAreaIDInGame Parms{};

	Parms.MapId = MapId;
	Parms.Pos = std::move(Pos);
	Parms.WorldContext = WorldContext;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function b1-Managed.UBGWFunctionLibraryCS.HasSequenceAlreadyPlayed
// (Native, Static, Public, HasOutParams, BlueprintCallable)
// Parameters:
// class AActor*                           WorldCtx                                               (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// int32                                   SeqID                                                  (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// uint8                                   ReturnValue                                            (Parm, OutParm, ReturnParm, NoDestructor, HasGetValueTypeHash)

uint8 UUBGWFunctionLibraryCS::HasSequenceAlreadyPlayed(class AActor* WorldCtx, int32 SeqID)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("UBGWFunctionLibraryCS", "HasSequenceAlreadyPlayed");

	Params::UBGWFunctionLibraryCS_HasSequenceAlreadyPlayed Parms{};

	Parms.WorldCtx = WorldCtx;
	Parms.SeqID = SeqID;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function b1-Managed.UBGWFunctionLibraryCS.TestCalcPosToMapAreaID
// (Native, Static, Public, HasOutParams, BlueprintCallable)
// Parameters:
// struct FVector2D                        Pos                                                    (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// class UGSMapAreaBaseData*               MapAreaBaseData                                        (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// class UGSMapAreaDetailData*             MapAreaDetailData                                      (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// int32                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

int32 UUBGWFunctionLibraryCS::TestCalcPosToMapAreaID(const struct FVector2D& Pos, class UGSMapAreaBaseData* MapAreaBaseData, class UGSMapAreaDetailData* MapAreaDetailData)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("UBGWFunctionLibraryCS", "TestCalcPosToMapAreaID");

	Params::UBGWFunctionLibraryCS_TestCalcPosToMapAreaID Parms{};

	Parms.Pos = std::move(Pos);
	Parms.MapAreaBaseData = MapAreaBaseData;
	Parms.MapAreaDetailData = MapAreaDetailData;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function b1-Managed.UBGWFunctionLibraryCS.WoodTmpTestGC
// (Native, Static, Public, BlueprintCallable)

void UUBGWFunctionLibraryCS::WoodTmpTestGC()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("UBGWFunctionLibraryCS", "WoodTmpTestGC");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function b1-Managed.UBGWFunctionLibraryCS.TestPlayMedia
// (Native, Static, Public, BlueprintCallable)
// Parameters:
// class UMediaPlayer*                     MediaPlayerStop                                        (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// class UMediaPlayer*                     MediaPlayerOpen                                        (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// class UMediaSource*                     MediaSource                                            (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UUBGWFunctionLibraryCS::TestPlayMedia(class UMediaPlayer* MediaPlayerStop, class UMediaPlayer* MediaPlayerOpen, class UMediaSource* MediaSource)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("UBGWFunctionLibraryCS", "TestPlayMedia");

	Params::UBGWFunctionLibraryCS_TestPlayMedia Parms{};

	Parms.MediaPlayerStop = MediaPlayerStop;
	Parms.MediaPlayerOpen = MediaPlayerOpen;
	Parms.MediaSource = MediaSource;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function b1-Managed.BGGGameStateCS.HandleMatchIsWaitingToStartCS
// (Native, Event, Public, Protected, BlueprintEvent)

void ABGGGameStateCS::HandleMatchIsWaitingToStartCS()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BGGGameStateCS", "HandleMatchIsWaitingToStartCS");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function b1-Managed.BGGGameStateCS.PostInitializeComponentsCS
// (Native, Event, Public, BlueprintEvent)

void ABGGGameStateCS::PostInitializeComponentsCS()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BGGGameStateCS", "PostInitializeComponentsCS");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function b1-Managed.BGGGameStateCS.OnPostTickDispatchEventCS
// (Native, Event, Public, BlueprintEvent)

void ABGGGameStateCS::OnPostTickDispatchEventCS()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BGGGameStateCS", "OnPostTickDispatchEventCS");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function b1-Managed.BGGGameStateCS.IsGSEventDebuggerOpenCS
// (Native, Event, Public, HasOutParams, BlueprintEvent)
// Parameters:
// uint8                                   ReturnValue                                            (Parm, OutParm, ReturnParm, NoDestructor, HasGetValueTypeHash)

uint8 ABGGGameStateCS::IsGSEventDebuggerOpenCS()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BGGGameStateCS", "IsGSEventDebuggerOpenCS");

	Params::BGGGameStateCS_IsGSEventDebuggerOpenCS Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function b1-Managed.BGGGameStateCS.HandleMatchHasStartedCS
// (Native, Event, Public, Protected, BlueprintEvent)

void ABGGGameStateCS::HandleMatchHasStartedCS()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BGGGameStateCS", "HandleMatchHasStartedCS");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function b1-Managed.BGGGameStateCS.HandleMatchHasEndedCS
// (Native, Event, Public, Protected, BlueprintEvent)

void ABGGGameStateCS::HandleMatchHasEndedCS()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BGGGameStateCS", "HandleMatchHasEndedCS");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function b1-Managed.BGGGameStateCS.OnTickDispatchEventCS
// (Native, Event, Public, BlueprintEvent)
// Parameters:
// float                                   DeltaTime                                              (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ABGGGameStateCS::OnTickDispatchEventCS(float DeltaTime)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BGGGameStateCS", "OnTickDispatchEventCS");

	Params::BGGGameStateCS_OnTickDispatchEventCS Parms{};

	Parms.DeltaTime = DeltaTime;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function b1-Managed.BGGGameStateCS.HandleLeavingMapCS
// (Native, Event, Public, Protected, BlueprintEvent)

void ABGGGameStateCS::HandleLeavingMapCS()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BGGGameStateCS", "HandleLeavingMapCS");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function b1-Managed.BGGGameStateCS.HandleBeginPlayCS
// (Native, Event, Public, Protected, BlueprintEvent)

void ABGGGameStateCS::HandleBeginPlayCS()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BGGGameStateCS", "HandleBeginPlayCS");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function b1-Managed.BGGGameStateCS.ReceiveDestroyed
// (Native, Event, Public, BlueprintEvent)

void ABGGGameStateCS::ReceiveDestroyed()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BGGGameStateCS", "ReceiveDestroyed");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function b1-Managed.BGGGameStateCS.ReceiveEndPlay
// (Native, Event, Public, Protected, BlueprintEvent)
// Parameters:
// EEndPlayReason                          EndPlayReason                                          (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ABGGGameStateCS::ReceiveEndPlay(EEndPlayReason EndPlayReason)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BGGGameStateCS", "ReceiveEndPlay");

	Params::BGGGameStateCS_ReceiveEndPlay Parms{};

	Parms.EndPlayReason = EndPlayReason;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function b1-Managed.BGGGameStateCS.BeginPlayCS
// (Native, Event, Public, BlueprintEvent)

void ABGGGameStateCS::BeginPlayCS()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BGGGameStateCS", "BeginPlayCS");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function b1-Managed.BGG_GameStateDataCompB1.LateECSBeginPlay
// (Native, Event, Public, BlueprintEvent)

void UBGG_GameStateDataCompB1::LateECSBeginPlay()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BGG_GameStateDataCompB1", "LateECSBeginPlay");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function b1-Managed.BGG_GameStateDataCompB1.PreECSBeginPlay
// (Native, Event, Public, BlueprintEvent)

void UBGG_GameStateDataCompB1::PreECSBeginPlay()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BGG_GameStateDataCompB1", "PreECSBeginPlay");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function b1-Managed.BGP_PlayerControllerB1.OnRep_PawnCS
// (Native, Event, Public, BlueprintEvent)

void ABGP_PlayerControllerB1::OnRep_PawnCS()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BGP_PlayerControllerB1", "OnRep_PawnCS");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function b1-Managed.BSN_GainItem.OnNotify
// (Native, Event, Public, BlueprintEvent)
// Parameters:
// class UCalliopeLevelSequencePlayer*     InPlayer                                               (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// int32                                   InStatus                                               (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// uint8                                   bInBackwards                                           (Parm, NoDestructor, HasGetValueTypeHash)

void UBSN_GainItem::OnNotify(class UCalliopeLevelSequencePlayer* InPlayer, int32 InStatus, uint8 bInBackwards)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BSN_GainItem", "OnNotify");

	Params::BSN_GainItem_OnNotify Parms{};

	Parms.InPlayer = InPlayer;
	Parms.InStatus = InStatus;
	Parms.bInBackwards = bInBackwards;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function b1-Managed.BGWCellPatitionWorldSubSystem.OnWorldBeginPlayCS
// (Native, Event, Public, BlueprintEvent)
// Parameters:
// class UWorld*                           InWorld                                                (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UBGWCellPatitionWorldSubSystem::OnWorldBeginPlayCS(class UWorld* InWorld)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BGWCellPatitionWorldSubSystem", "OnWorldBeginPlayCS");

	Params::BGWCellPatitionWorldSubSystem_OnWorldBeginPlayCS Parms{};

	Parms.InWorld = InWorld;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function b1-Managed.BGWCellPatitionWorldSubSystem.PostInitializeCS
// (Native, Event, Public, BlueprintEvent)

void UBGWCellPatitionWorldSubSystem::PostInitializeCS()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BGWCellPatitionWorldSubSystem", "PostInitializeCS");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function b1-Managed.BGWCellPatitionWorldSubSystem.OnTickCS
// (Native, Event, Public, BlueprintEvent)
// Parameters:
// float                                   DeltaTime                                              (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UBGWCellPatitionWorldSubSystem::OnTickCS(float DeltaTime)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BGWCellPatitionWorldSubSystem", "OnTickCS");

	Params::BGWCellPatitionWorldSubSystem_OnTickCS Parms{};

	Parms.DeltaTime = DeltaTime;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function b1-Managed.BGWCellPatitionWorldSubSystem.DoesSupportWorldTypeCS
// (Native, Event, Public, HasOutParams, BlueprintEvent, Const)
// Parameters:
// int32                                   WorldType                                              (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// uint8                                   ReturnValue                                            (Parm, OutParm, ReturnParm, NoDestructor, HasGetValueTypeHash)

uint8 UBGWCellPatitionWorldSubSystem::DoesSupportWorldTypeCS(int32 WorldType) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BGWCellPatitionWorldSubSystem", "DoesSupportWorldTypeCS");

	Params::BGWCellPatitionWorldSubSystem_DoesSupportWorldTypeCS Parms{};

	Parms.WorldType = WorldType;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function b1-Managed.BGWTickRateOptimizeWorldSubSystem.OnWorldBeginPlayCS
// (Native, Event, Public, BlueprintEvent)
// Parameters:
// class UWorld*                           InWorld                                                (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UBGWTickRateOptimizeWorldSubSystem::OnWorldBeginPlayCS(class UWorld* InWorld)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BGWTickRateOptimizeWorldSubSystem", "OnWorldBeginPlayCS");

	Params::BGWTickRateOptimizeWorldSubSystem_OnWorldBeginPlayCS Parms{};

	Parms.InWorld = InWorld;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function b1-Managed.BGWTickRateOptimizeWorldSubSystem.DoesSupportWorldTypeCS
// (Native, Event, Public, HasOutParams, BlueprintEvent, Const)
// Parameters:
// int32                                   WorldType                                              (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// uint8                                   ReturnValue                                            (Parm, OutParm, ReturnParm, NoDestructor, HasGetValueTypeHash)

uint8 UBGWTickRateOptimizeWorldSubSystem::DoesSupportWorldTypeCS(int32 WorldType) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BGWTickRateOptimizeWorldSubSystem", "DoesSupportWorldTypeCS");

	Params::BGWTickRateOptimizeWorldSubSystem_DoesSupportWorldTypeCS Parms{};

	Parms.WorldType = WorldType;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function b1-Managed.BANSM_AttackState.CheckState
// (Native, Event, Public, Protected, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// class UAnimSequenceBase*                AnimBase                                               (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// float                                   CurTime                                                (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// uint8                                   ReturnValue                                            (Parm, OutParm, ReturnParm, NoDestructor, HasGetValueTypeHash)

uint8 UBANSM_AttackState::CheckState(class UAnimSequenceBase* AnimBase, float CurTime)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BANSM_AttackState", "CheckState");

	Params::BANSM_AttackState_CheckState Parms{};

	Parms.AnimBase = AnimBase;
	Parms.CurTime = CurTime;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function b1-Managed.BED_BehaviorNode_DetectUnit.GetNodeDescriptionInCS
// (Native, Event, Public, HasOutParams, BlueprintEvent, Const)
// Parameters:
// class FString                           ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash)

class FString UBED_BehaviorNode_DetectUnit::GetNodeDescriptionInCS() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BED_BehaviorNode_DetectUnit", "GetNodeDescriptionInCS");

	Params::BED_BehaviorNode_DetectUnit_GetNodeDescriptionInCS Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function b1-Managed.BED_BehaviorNode_DetectUnit.IsSupportViewType
// (Native, Event, Public, HasOutParams, BlueprintEvent, Const)
// Parameters:
// ECalliopeViewType                       InViewType                                             (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// uint8                                   ReturnValue                                            (Parm, OutParm, ReturnParm, NoDestructor, HasGetValueTypeHash)

uint8 UBED_BehaviorNode_DetectUnit::IsSupportViewType(const ECalliopeViewType& InViewType) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BED_BehaviorNode_DetectUnit", "IsSupportViewType");

	Params::BED_BehaviorNode_DetectUnit_IsSupportViewType Parms{};

	Parms.InViewType = InViewType;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function b1-Managed.BANS_ChangeAimOffset.GSNotifyBeginCS
// (Native, Event, Public, Protected, BlueprintEvent, Const)
// Parameters:
// struct FUStGSNotifyParam                NotifyParam                                            (Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
// float                                   TotalDuration                                          (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UBANS_ChangeAimOffset::GSNotifyBeginCS(const struct FUStGSNotifyParam& NotifyParam, float TotalDuration) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BANS_ChangeAimOffset", "GSNotifyBeginCS");

	Params::BANS_ChangeAimOffset_GSNotifyBeginCS Parms{};

	Parms.NotifyParam = std::move(NotifyParam);
	Parms.TotalDuration = TotalDuration;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function b1-Managed.BANS_ChangeAimOffset.GSNotifyEndCS
// (Native, Event, Public, Protected, BlueprintEvent, Const)
// Parameters:
// struct FUStGSNotifyParam                NotifyParam                                            (Parm, ZeroConstructor, IsPlainOldData, NoDestructor)

void UBANS_ChangeAimOffset::GSNotifyEndCS(const struct FUStGSNotifyParam& NotifyParam) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BANS_ChangeAimOffset", "GSNotifyEndCS");

	Params::BANS_ChangeAimOffset_GSNotifyEndCS Parms{};

	Parms.NotifyParam = std::move(NotifyParam);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function b1-Managed.BED_BehaviorNode_GameDataCounter.IsSupportViewType
// (Native, Event, Public, HasOutParams, BlueprintEvent, Const)
// Parameters:
// ECalliopeViewType                       InViewType                                             (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// uint8                                   ReturnValue                                            (Parm, OutParm, ReturnParm, NoDestructor, HasGetValueTypeHash)

uint8 UBED_BehaviorNode_GameDataCounter::IsSupportViewType(const ECalliopeViewType& InViewType) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BED_BehaviorNode_GameDataCounter", "IsSupportViewType");

	Params::BED_BehaviorNode_GameDataCounter_IsSupportViewType Parms{};

	Parms.InViewType = InViewType;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function b1-Managed.BANS_GSAbortWindow.GSNotifyBeginCS
// (Native, Event, Public, Protected, BlueprintEvent, Const)
// Parameters:
// struct FUStGSNotifyParam                NotifyParam                                            (Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
// float                                   TotalDuration                                          (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UBANS_GSAbortWindow::GSNotifyBeginCS(const struct FUStGSNotifyParam& NotifyParam, float TotalDuration) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BANS_GSAbortWindow", "GSNotifyBeginCS");

	Params::BANS_GSAbortWindow_GSNotifyBeginCS Parms{};

	Parms.NotifyParam = std::move(NotifyParam);
	Parms.TotalDuration = TotalDuration;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function b1-Managed.BANS_GSCanBlendToDeadAM.GSNotifyBeginCS
// (Native, Event, Public, Protected, BlueprintEvent, Const)
// Parameters:
// struct FUStGSNotifyParam                NotifyParam                                            (Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
// float                                   TotalDuration                                          (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UBANS_GSCanBlendToDeadAM::GSNotifyBeginCS(const struct FUStGSNotifyParam& NotifyParam, float TotalDuration) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BANS_GSCanBlendToDeadAM", "GSNotifyBeginCS");

	Params::BANS_GSCanBlendToDeadAM_GSNotifyBeginCS Parms{};

	Parms.NotifyParam = std::move(NotifyParam);
	Parms.TotalDuration = TotalDuration;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function b1-Managed.BANS_GSCanBlendToDeadAM.GSNotifyEndCS
// (Native, Event, Public, Protected, BlueprintEvent, Const)
// Parameters:
// struct FUStGSNotifyParam                NotifyParam                                            (Parm, ZeroConstructor, IsPlainOldData, NoDestructor)

void UBANS_GSCanBlendToDeadAM::GSNotifyEndCS(const struct FUStGSNotifyParam& NotifyParam) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BANS_GSCanBlendToDeadAM", "GSNotifyEndCS");

	Params::BANS_GSCanBlendToDeadAM_GSNotifyEndCS Parms{};

	Parms.NotifyParam = std::move(NotifyParam);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function b1-Managed.BANS_GSDisableEnterGlide.GSNotifyBeginCS
// (Native, Event, Public, Protected, BlueprintEvent, Const)
// Parameters:
// struct FUStGSNotifyParam                NotifyParam                                            (Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
// float                                   TotalDuration                                          (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UBANS_GSDisableEnterGlide::GSNotifyBeginCS(const struct FUStGSNotifyParam& NotifyParam, float TotalDuration) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BANS_GSDisableEnterGlide", "GSNotifyBeginCS");

	Params::BANS_GSDisableEnterGlide_GSNotifyBeginCS Parms{};

	Parms.NotifyParam = std::move(NotifyParam);
	Parms.TotalDuration = TotalDuration;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function b1-Managed.BANS_GSDisableEnterGlide.GSNotifyEndCS
// (Native, Event, Public, Protected, BlueprintEvent, Const)
// Parameters:
// struct FUStGSNotifyParam                NotifyParam                                            (Parm, ZeroConstructor, IsPlainOldData, NoDestructor)

void UBANS_GSDisableEnterGlide::GSNotifyEndCS(const struct FUStGSNotifyParam& NotifyParam) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BANS_GSDisableEnterGlide", "GSNotifyEndCS");

	Params::BANS_GSDisableEnterGlide_GSNotifyEndCS Parms{};

	Parms.NotifyParam = std::move(NotifyParam);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function b1-Managed.BED_QuestNode_PlayerCastSkill.PostPropertyChanged
// (Native, Event, Public, BlueprintEvent)
// Parameters:
// class FString                           MemberName                                             (Parm, ZeroConstructor, HasGetValueTypeHash)
// class FString                           PropertyName                                           (Parm, ZeroConstructor, HasGetValueTypeHash)

void UBED_QuestNode_PlayerCastSkill::PostPropertyChanged(const class FString& MemberName, const class FString& PropertyName)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BED_QuestNode_PlayerCastSkill", "PostPropertyChanged");

	Params::BED_QuestNode_PlayerCastSkill_PostPropertyChanged Parms{};

	Parms.MemberName = std::move(MemberName);
	Parms.PropertyName = std::move(PropertyName);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function b1-Managed.BED_QuestNode_PlayerCastSkill.GetNodeDescriptionInCS
// (Native, Event, Public, HasOutParams, BlueprintEvent, Const)
// Parameters:
// class FString                           ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash)

class FString UBED_QuestNode_PlayerCastSkill::GetNodeDescriptionInCS() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BED_QuestNode_PlayerCastSkill", "GetNodeDescriptionInCS");

	Params::BED_QuestNode_PlayerCastSkill_GetNodeDescriptionInCS Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function b1-Managed.BANS_GSMoveWindow.GSNotifyBeginCS
// (Native, Event, Public, Protected, BlueprintEvent, Const)
// Parameters:
// struct FUStGSNotifyParam                NotifyParam                                            (Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
// float                                   TotalDuration                                          (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UBANS_GSMoveWindow::GSNotifyBeginCS(const struct FUStGSNotifyParam& NotifyParam, float TotalDuration) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BANS_GSMoveWindow", "GSNotifyBeginCS");

	Params::BANS_GSMoveWindow_GSNotifyBeginCS Parms{};

	Parms.NotifyParam = std::move(NotifyParam);
	Parms.TotalDuration = TotalDuration;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function b1-Managed.BANS_GSProcessDeathInASS.GSNotifyBeginCS
// (Native, Event, Public, Protected, BlueprintEvent, Const)
// Parameters:
// struct FUStGSNotifyParam                NotifyParam                                            (Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
// float                                   TotalDuration                                          (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UBANS_GSProcessDeathInASS::GSNotifyBeginCS(const struct FUStGSNotifyParam& NotifyParam, float TotalDuration) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BANS_GSProcessDeathInASS", "GSNotifyBeginCS");

	Params::BANS_GSProcessDeathInASS_GSNotifyBeginCS Parms{};

	Parms.NotifyParam = std::move(NotifyParam);
	Parms.TotalDuration = TotalDuration;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function b1-Managed.BANS_GSSliceRuntimeMesh.GSNotifyBeginCS
// (Native, Event, Public, Protected, BlueprintEvent, Const)
// Parameters:
// struct FUStGSNotifyParam                NotifyParam                                            (Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
// float                                   TotalDuration                                          (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UBANS_GSSliceRuntimeMesh::GSNotifyBeginCS(const struct FUStGSNotifyParam& NotifyParam, float TotalDuration) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BANS_GSSliceRuntimeMesh", "GSNotifyBeginCS");

	Params::BANS_GSSliceRuntimeMesh_GSNotifyBeginCS Parms{};

	Parms.NotifyParam = std::move(NotifyParam);
	Parms.TotalDuration = TotalDuration;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function b1-Managed.BANS_GSSliceRuntimeMesh.GSNotifyTickCS
// (Native, Event, Public, Protected, BlueprintEvent, Const)
// Parameters:
// struct FUStGSNotifyParam                NotifyParam                                            (Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
// float                                   FrameDeltaTime                                         (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UBANS_GSSliceRuntimeMesh::GSNotifyTickCS(const struct FUStGSNotifyParam& NotifyParam, float FrameDeltaTime) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BANS_GSSliceRuntimeMesh", "GSNotifyTickCS");

	Params::BANS_GSSliceRuntimeMesh_GSNotifyTickCS Parms{};

	Parms.NotifyParam = std::move(NotifyParam);
	Parms.FrameDeltaTime = FrameDeltaTime;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function b1-Managed.BANS_GSSliceRuntimeMesh.GSNotifyEndCS
// (Native, Event, Public, Protected, BlueprintEvent, Const)
// Parameters:
// struct FUStGSNotifyParam                NotifyParam                                            (Parm, ZeroConstructor, IsPlainOldData, NoDestructor)

void UBANS_GSSliceRuntimeMesh::GSNotifyEndCS(const struct FUStGSNotifyParam& NotifyParam) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BANS_GSSliceRuntimeMesh", "GSNotifyEndCS");

	Params::BANS_GSSliceRuntimeMesh_GSNotifyEndCS Parms{};

	Parms.NotifyParam = std::move(NotifyParam);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function b1-Managed.BED_QuestNode_SetAwardState.GetNodeDescriptionInCS
// (Native, Event, Public, HasOutParams, BlueprintEvent, Const)
// Parameters:
// class FString                           ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash)

class FString UBED_QuestNode_SetAwardState::GetNodeDescriptionInCS() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BED_QuestNode_SetAwardState", "GetNodeDescriptionInCS");

	Params::BED_QuestNode_SetAwardState_GetNodeDescriptionInCS Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function b1-Managed.BANS_GSModifyDestructible.GSNotifyBeginCS
// (Native, Event, Public, Protected, BlueprintEvent, Const)
// Parameters:
// struct FUStGSNotifyParam                NotifyParam                                            (Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
// float                                   TotalDuration                                          (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UBANS_GSModifyDestructible::GSNotifyBeginCS(const struct FUStGSNotifyParam& NotifyParam, float TotalDuration) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BANS_GSModifyDestructible", "GSNotifyBeginCS");

	Params::BANS_GSModifyDestructible_GSNotifyBeginCS Parms{};

	Parms.NotifyParam = std::move(NotifyParam);
	Parms.TotalDuration = TotalDuration;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function b1-Managed.BANS_GSModifyDestructible.GSNotifyTickCS
// (Native, Event, Public, Protected, BlueprintEvent, Const)
// Parameters:
// struct FUStGSNotifyParam                NotifyParam                                            (Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
// float                                   FrameDeltaTime                                         (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UBANS_GSModifyDestructible::GSNotifyTickCS(const struct FUStGSNotifyParam& NotifyParam, float FrameDeltaTime) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BANS_GSModifyDestructible", "GSNotifyTickCS");

	Params::BANS_GSModifyDestructible_GSNotifyTickCS Parms{};

	Parms.NotifyParam = std::move(NotifyParam);
	Parms.FrameDeltaTime = FrameDeltaTime;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function b1-Managed.BANS_GSModifyDestructible.GSNotifyEndCS
// (Native, Event, Public, Protected, BlueprintEvent, Const)
// Parameters:
// struct FUStGSNotifyParam                NotifyParam                                            (Parm, ZeroConstructor, IsPlainOldData, NoDestructor)

void UBANS_GSModifyDestructible::GSNotifyEndCS(const struct FUStGSNotifyParam& NotifyParam) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BANS_GSModifyDestructible", "GSNotifyEndCS");

	Params::BANS_GSModifyDestructible_GSNotifyEndCS Parms{};

	Parms.NotifyParam = std::move(NotifyParam);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function b1-Managed.BANS_GSDestroyWeapon.GSNotifyBeginCS
// (Native, Event, Public, Protected, BlueprintEvent, Const)
// Parameters:
// struct FUStGSNotifyParam                NotifyParam                                            (Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
// float                                   TotalDuration                                          (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UBANS_GSDestroyWeapon::GSNotifyBeginCS(const struct FUStGSNotifyParam& NotifyParam, float TotalDuration) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BANS_GSDestroyWeapon", "GSNotifyBeginCS");

	Params::BANS_GSDestroyWeapon_GSNotifyBeginCS Parms{};

	Parms.NotifyParam = std::move(NotifyParam);
	Parms.TotalDuration = TotalDuration;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function b1-Managed.BED_TaskNode_ObserveSequence.GetNodeDescriptionInCS
// (Native, Event, Public, HasOutParams, BlueprintEvent, Const)
// Parameters:
// class FString                           ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash)

class FString UBED_TaskNode_ObserveSequence::GetNodeDescriptionInCS() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BED_TaskNode_ObserveSequence", "GetNodeDescriptionInCS");

	Params::BED_TaskNode_ObserveSequence_GetNodeDescriptionInCS Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function b1-Managed.BANS_GSAddPostProcessMat.GSNotifyBeginCS
// (Native, Event, Public, Protected, BlueprintEvent, Const)
// Parameters:
// struct FUStGSNotifyParam                NotifyParam                                            (Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
// float                                   TotalDuration                                          (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UBANS_GSAddPostProcessMat::GSNotifyBeginCS(const struct FUStGSNotifyParam& NotifyParam, float TotalDuration) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BANS_GSAddPostProcessMat", "GSNotifyBeginCS");

	Params::BANS_GSAddPostProcessMat_GSNotifyBeginCS Parms{};

	Parms.NotifyParam = std::move(NotifyParam);
	Parms.TotalDuration = TotalDuration;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function b1-Managed.BANS_GSAddPostProcessMat.GSNotifyEndCS
// (Native, Event, Public, Protected, BlueprintEvent, Const)
// Parameters:
// struct FUStGSNotifyParam                NotifyParam                                            (Parm, ZeroConstructor, IsPlainOldData, NoDestructor)

void UBANS_GSAddPostProcessMat::GSNotifyEndCS(const struct FUStGSNotifyParam& NotifyParam) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BANS_GSAddPostProcessMat", "GSNotifyEndCS");

	Params::BANS_GSAddPostProcessMat_GSNotifyEndCS Parms{};

	Parms.NotifyParam = std::move(NotifyParam);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function b1-Managed.BANS_GSAutoCheckBlock.GSNotifyBeginCS
// (Native, Event, Public, Protected, BlueprintEvent, Const)
// Parameters:
// struct FUStGSNotifyParam                NotifyParam                                            (Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
// float                                   TotalDuration                                          (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UBANS_GSAutoCheckBlock::GSNotifyBeginCS(const struct FUStGSNotifyParam& NotifyParam, float TotalDuration) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BANS_GSAutoCheckBlock", "GSNotifyBeginCS");

	Params::BANS_GSAutoCheckBlock_GSNotifyBeginCS Parms{};

	Parms.NotifyParam = std::move(NotifyParam);
	Parms.TotalDuration = TotalDuration;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function b1-Managed.BANS_GSAutoCheckBlock.GSNotifyEndCS
// (Native, Event, Public, Protected, BlueprintEvent, Const)
// Parameters:
// struct FUStGSNotifyParam                NotifyParam                                            (Parm, ZeroConstructor, IsPlainOldData, NoDestructor)

void UBANS_GSAutoCheckBlock::GSNotifyEndCS(const struct FUStGSNotifyParam& NotifyParam) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BANS_GSAutoCheckBlock", "GSNotifyEndCS");

	Params::BANS_GSAutoCheckBlock_GSNotifyEndCS Parms{};

	Parms.NotifyParam = std::move(NotifyParam);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function b1-Managed.BED_TaskNode_QueryCompoundCondition.GetNodeDescriptionInCS
// (Native, Event, Public, HasOutParams, BlueprintEvent, Const)
// Parameters:
// class FString                           ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash)

class FString UBED_TaskNode_QueryCompoundCondition::GetNodeDescriptionInCS() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BED_TaskNode_QueryCompoundCondition", "GetNodeDescriptionInCS");

	Params::BED_TaskNode_QueryCompoundCondition_GetNodeDescriptionInCS Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function b1-Managed.BANS_GSCatchAndThrow.GSNotifyBeginCS
// (Native, Event, Public, Protected, BlueprintEvent, Const)
// Parameters:
// struct FUStGSNotifyParam                NotifyParam                                            (Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
// float                                   TotalDuration                                          (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UBANS_GSCatchAndThrow::GSNotifyBeginCS(const struct FUStGSNotifyParam& NotifyParam, float TotalDuration) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BANS_GSCatchAndThrow", "GSNotifyBeginCS");

	Params::BANS_GSCatchAndThrow_GSNotifyBeginCS Parms{};

	Parms.NotifyParam = std::move(NotifyParam);
	Parms.TotalDuration = TotalDuration;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function b1-Managed.BANS_GSCatchAndThrow.GSNotifyTickCS
// (Native, Event, Public, Protected, BlueprintEvent, Const)
// Parameters:
// struct FUStGSNotifyParam                NotifyParam                                            (Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
// float                                   FrameDeltaTime                                         (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UBANS_GSCatchAndThrow::GSNotifyTickCS(const struct FUStGSNotifyParam& NotifyParam, float FrameDeltaTime) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BANS_GSCatchAndThrow", "GSNotifyTickCS");

	Params::BANS_GSCatchAndThrow_GSNotifyTickCS Parms{};

	Parms.NotifyParam = std::move(NotifyParam);
	Parms.FrameDeltaTime = FrameDeltaTime;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function b1-Managed.BANS_GSCatchAndThrow.GSNotifyEndCS
// (Native, Event, Public, Protected, BlueprintEvent, Const)
// Parameters:
// struct FUStGSNotifyParam                NotifyParam                                            (Parm, ZeroConstructor, IsPlainOldData, NoDestructor)

void UBANS_GSCatchAndThrow::GSNotifyEndCS(const struct FUStGSNotifyParam& NotifyParam) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BANS_GSCatchAndThrow", "GSNotifyEndCS");

	Params::BANS_GSCatchAndThrow_GSNotifyEndCS Parms{};

	Parms.NotifyParam = std::move(NotifyParam);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function b1-Managed.BANS_GSAimOffsetBlendOutToBlendIn.GSNotifyBeginCS
// (Native, Event, Public, Protected, BlueprintEvent, Const)
// Parameters:
// struct FUStGSNotifyParam                NotifyParam                                            (Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
// float                                   TotalDuration                                          (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UBANS_GSAimOffsetBlendOutToBlendIn::GSNotifyBeginCS(const struct FUStGSNotifyParam& NotifyParam, float TotalDuration) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BANS_GSAimOffsetBlendOutToBlendIn", "GSNotifyBeginCS");

	Params::BANS_GSAimOffsetBlendOutToBlendIn_GSNotifyBeginCS Parms{};

	Parms.NotifyParam = std::move(NotifyParam);
	Parms.TotalDuration = TotalDuration;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function b1-Managed.BANS_GSAimOffsetBlendOutToBlendIn.GSNotifyEndCS
// (Native, Event, Public, Protected, BlueprintEvent, Const)
// Parameters:
// struct FUStGSNotifyParam                NotifyParam                                            (Parm, ZeroConstructor, IsPlainOldData, NoDestructor)

void UBANS_GSAimOffsetBlendOutToBlendIn::GSNotifyEndCS(const struct FUStGSNotifyParam& NotifyParam) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BANS_GSAimOffsetBlendOutToBlendIn", "GSNotifyEndCS");

	Params::BANS_GSAimOffsetBlendOutToBlendIn_GSNotifyEndCS Parms{};

	Parms.NotifyParam = std::move(NotifyParam);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function b1-Managed.BANS_GSAISkillFeature.GSNotifyBeginCS
// (Native, Event, Public, Protected, BlueprintEvent, Const)
// Parameters:
// struct FUStGSNotifyParam                NotifyParam                                            (Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
// float                                   TotalDuration                                          (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UBANS_GSAISkillFeature::GSNotifyBeginCS(const struct FUStGSNotifyParam& NotifyParam, float TotalDuration) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BANS_GSAISkillFeature", "GSNotifyBeginCS");

	Params::BANS_GSAISkillFeature_GSNotifyBeginCS Parms{};

	Parms.NotifyParam = std::move(NotifyParam);
	Parms.TotalDuration = TotalDuration;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function b1-Managed.BANS_GSAddBuffByID.GSValidateInputCS
// (Native, Event, Public, BlueprintEvent, Const)
// Parameters:
// class AActor*                           Actor                                                  (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UBANS_GSAddBuffByID::GSValidateInputCS(class AActor* Actor) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BANS_GSAddBuffByID", "GSValidateInputCS");

	Params::BANS_GSAddBuffByID_GSValidateInputCS Parms{};

	Parms.Actor = Actor;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function b1-Managed.BANS_GSAddBuffByID.GSNotifyBeginCS
// (Native, Event, Public, Protected, BlueprintEvent, Const)
// Parameters:
// struct FUStGSNotifyParam                NotifyParam                                            (Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
// float                                   TotalDuration                                          (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UBANS_GSAddBuffByID::GSNotifyBeginCS(const struct FUStGSNotifyParam& NotifyParam, float TotalDuration) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BANS_GSAddBuffByID", "GSNotifyBeginCS");

	Params::BANS_GSAddBuffByID_GSNotifyBeginCS Parms{};

	Parms.NotifyParam = std::move(NotifyParam);
	Parms.TotalDuration = TotalDuration;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function b1-Managed.BANS_GSAddBuffByID.GSNotifyTickCS
// (Native, Event, Public, Protected, BlueprintEvent, Const)
// Parameters:
// struct FUStGSNotifyParam                NotifyParam                                            (Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
// float                                   FrameDeltaTime                                         (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UBANS_GSAddBuffByID::GSNotifyTickCS(const struct FUStGSNotifyParam& NotifyParam, float FrameDeltaTime) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BANS_GSAddBuffByID", "GSNotifyTickCS");

	Params::BANS_GSAddBuffByID_GSNotifyTickCS Parms{};

	Parms.NotifyParam = std::move(NotifyParam);
	Parms.FrameDeltaTime = FrameDeltaTime;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function b1-Managed.BANS_GSAddBuffByID.GSNotifyEndCS
// (Native, Event, Public, Protected, BlueprintEvent, Const)
// Parameters:
// struct FUStGSNotifyParam                NotifyParam                                            (Parm, ZeroConstructor, IsPlainOldData, NoDestructor)

void UBANS_GSAddBuffByID::GSNotifyEndCS(const struct FUStGSNotifyParam& NotifyParam) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BANS_GSAddBuffByID", "GSNotifyEndCS");

	Params::BANS_GSAddBuffByID_GSNotifyEndCS Parms{};

	Parms.NotifyParam = std::move(NotifyParam);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function b1-Managed.BED_MovieNode_PerformerRemoveBuff.GetNodeDescriptionInCS
// (Native, Event, Public, HasOutParams, BlueprintEvent, Const)
// Parameters:
// class FString                           ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash)

class FString UBED_MovieNode_PerformerRemoveBuff::GetNodeDescriptionInCS() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BED_MovieNode_PerformerRemoveBuff", "GetNodeDescriptionInCS");

	Params::BED_MovieNode_PerformerRemoveBuff_GetNodeDescriptionInCS Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function b1-Managed.BANS_GSAlignAttackToSlope.GSNotifyBeginCS
// (Native, Event, Public, Protected, BlueprintEvent, Const)
// Parameters:
// struct FUStGSNotifyParam                NotifyParam                                            (Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
// float                                   TotalDuration                                          (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UBANS_GSAlignAttackToSlope::GSNotifyBeginCS(const struct FUStGSNotifyParam& NotifyParam, float TotalDuration) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BANS_GSAlignAttackToSlope", "GSNotifyBeginCS");

	Params::BANS_GSAlignAttackToSlope_GSNotifyBeginCS Parms{};

	Parms.NotifyParam = std::move(NotifyParam);
	Parms.TotalDuration = TotalDuration;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function b1-Managed.BANS_GSAlignAttackToSlope.GSNotifyTickCS
// (Native, Event, Public, Protected, BlueprintEvent, Const)
// Parameters:
// struct FUStGSNotifyParam                NotifyParam                                            (Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
// float                                   FrameDeltaTime                                         (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UBANS_GSAlignAttackToSlope::GSNotifyTickCS(const struct FUStGSNotifyParam& NotifyParam, float FrameDeltaTime) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BANS_GSAlignAttackToSlope", "GSNotifyTickCS");

	Params::BANS_GSAlignAttackToSlope_GSNotifyTickCS Parms{};

	Parms.NotifyParam = std::move(NotifyParam);
	Parms.FrameDeltaTime = FrameDeltaTime;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function b1-Managed.BANS_GSAlignAttackToSlope.GSNotifyEndCS
// (Native, Event, Public, Protected, BlueprintEvent, Const)
// Parameters:
// struct FUStGSNotifyParam                NotifyParam                                            (Parm, ZeroConstructor, IsPlainOldData, NoDestructor)

void UBANS_GSAlignAttackToSlope::GSNotifyEndCS(const struct FUStGSNotifyParam& NotifyParam) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BANS_GSAlignAttackToSlope", "GSNotifyEndCS");

	Params::BANS_GSAlignAttackToSlope_GSNotifyEndCS Parms{};

	Parms.NotifyParam = std::move(NotifyParam);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function b1-Managed.BANS_GSAttackIKCancle.GSNotifyBeginCS
// (Native, Event, Public, Protected, BlueprintEvent, Const)
// Parameters:
// struct FUStGSNotifyParam                NotifyParam                                            (Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
// float                                   TotalDuration                                          (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UBANS_GSAttackIKCancle::GSNotifyBeginCS(const struct FUStGSNotifyParam& NotifyParam, float TotalDuration) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BANS_GSAttackIKCancle", "GSNotifyBeginCS");

	Params::BANS_GSAttackIKCancle_GSNotifyBeginCS Parms{};

	Parms.NotifyParam = std::move(NotifyParam);
	Parms.TotalDuration = TotalDuration;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function b1-Managed.BANS_GSAttackIKCancle.GSNotifyTickCS
// (Native, Event, Public, Protected, BlueprintEvent, Const)
// Parameters:
// struct FUStGSNotifyParam                NotifyParam                                            (Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
// float                                   FrameDeltaTime                                         (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UBANS_GSAttackIKCancle::GSNotifyTickCS(const struct FUStGSNotifyParam& NotifyParam, float FrameDeltaTime) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BANS_GSAttackIKCancle", "GSNotifyTickCS");

	Params::BANS_GSAttackIKCancle_GSNotifyTickCS Parms{};

	Parms.NotifyParam = std::move(NotifyParam);
	Parms.FrameDeltaTime = FrameDeltaTime;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function b1-Managed.BANS_GSAttackIKCancle.GSNotifyEndCS
// (Native, Event, Public, Protected, BlueprintEvent, Const)
// Parameters:
// struct FUStGSNotifyParam                NotifyParam                                            (Parm, ZeroConstructor, IsPlainOldData, NoDestructor)

void UBANS_GSAttackIKCancle::GSNotifyEndCS(const struct FUStGSNotifyParam& NotifyParam) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BANS_GSAttackIKCancle", "GSNotifyEndCS");

	Params::BANS_GSAttackIKCancle_GSNotifyEndCS Parms{};

	Parms.NotifyParam = std::move(NotifyParam);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function b1-Managed.BED_MovieNode_PlayEnd.GetNodeDescriptionInCS
// (Native, Event, Public, HasOutParams, BlueprintEvent, Const)
// Parameters:
// class FString                           ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash)

class FString UBED_MovieNode_PlayEnd::GetNodeDescriptionInCS() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BED_MovieNode_PlayEnd", "GetNodeDescriptionInCS");

	Params::BED_MovieNode_PlayEnd_GetNodeDescriptionInCS Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function b1-Managed.BANS_GSAttackRotation.GSOnSectionManuallyChanged
// (Native, Event, Public, BlueprintEvent, Const)
// Parameters:
// class ABGUCharacter*                    OwnerChar                                              (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// float                                   RemainingDuration                                      (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UBANS_GSAttackRotation::GSOnSectionManuallyChanged(class ABGUCharacter* OwnerChar, float RemainingDuration) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BANS_GSAttackRotation", "GSOnSectionManuallyChanged");

	Params::BANS_GSAttackRotation_GSOnSectionManuallyChanged Parms{};

	Parms.OwnerChar = OwnerChar;
	Parms.RemainingDuration = RemainingDuration;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function b1-Managed.BANS_GSAttackRotation.GSAllowCrossSection
// (Native, Event, Public, HasOutParams, BlueprintEvent, Const)
// Parameters:
// uint8                                   ReturnValue                                            (Parm, OutParm, ReturnParm, NoDestructor, HasGetValueTypeHash)

uint8 UBANS_GSAttackRotation::GSAllowCrossSection() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BANS_GSAttackRotation", "GSAllowCrossSection");

	Params::BANS_GSAttackRotation_GSAllowCrossSection Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function b1-Managed.BANS_GSAttackRotation.GSNotifyBeginCS
// (Native, Event, Public, Protected, BlueprintEvent, Const)
// Parameters:
// struct FUStGSNotifyParam                NotifyParam                                            (Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
// float                                   TotalDuration                                          (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UBANS_GSAttackRotation::GSNotifyBeginCS(const struct FUStGSNotifyParam& NotifyParam, float TotalDuration) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BANS_GSAttackRotation", "GSNotifyBeginCS");

	Params::BANS_GSAttackRotation_GSNotifyBeginCS Parms{};

	Parms.NotifyParam = std::move(NotifyParam);
	Parms.TotalDuration = TotalDuration;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function b1-Managed.BANS_GSAttackRotation.GSNotifyEndCS
// (Native, Event, Public, Protected, BlueprintEvent, Const)
// Parameters:
// struct FUStGSNotifyParam                NotifyParam                                            (Parm, ZeroConstructor, IsPlainOldData, NoDestructor)

void UBANS_GSAttackRotation::GSNotifyEndCS(const struct FUStGSNotifyParam& NotifyParam) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BANS_GSAttackRotation", "GSNotifyEndCS");

	Params::BANS_GSAttackRotation_GSNotifyEndCS Parms{};

	Parms.NotifyParam = std::move(NotifyParam);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function b1-Managed.BANS_GSAttackRotation.MarkDirty
// (Native, Public, HasOutParams, BlueprintCallable, Const)
// Parameters:
// uint8                                   ReturnValue                                            (Parm, OutParm, ReturnParm, NoDestructor, HasGetValueTypeHash)

uint8 UBANS_GSAttackRotation::MarkDirty() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BANS_GSAttackRotation", "MarkDirty");

	Params::BANS_GSAttackRotation_MarkDirty Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function b1-Managed.BANS_GSAttackRotationForUpperBody.GSNotifyBeginCS
// (Native, Event, Public, Protected, BlueprintEvent, Const)
// Parameters:
// struct FUStGSNotifyParam                NotifyParam                                            (Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
// float                                   TotalDuration                                          (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UBANS_GSAttackRotationForUpperBody::GSNotifyBeginCS(const struct FUStGSNotifyParam& NotifyParam, float TotalDuration) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BANS_GSAttackRotationForUpperBody", "GSNotifyBeginCS");

	Params::BANS_GSAttackRotationForUpperBody_GSNotifyBeginCS Parms{};

	Parms.NotifyParam = std::move(NotifyParam);
	Parms.TotalDuration = TotalDuration;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function b1-Managed.BANS_GSAttackRotationForUpperBody.GSNotifyEndCS
// (Native, Event, Public, Protected, BlueprintEvent, Const)
// Parameters:
// struct FUStGSNotifyParam                NotifyParam                                            (Parm, ZeroConstructor, IsPlainOldData, NoDestructor)

void UBANS_GSAttackRotationForUpperBody::GSNotifyEndCS(const struct FUStGSNotifyParam& NotifyParam) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BANS_GSAttackRotationForUpperBody", "GSNotifyEndCS");

	Params::BANS_GSAttackRotationForUpperBody_GSNotifyEndCS Parms{};

	Parms.NotifyParam = std::move(NotifyParam);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function b1-Managed.BANS_GSBlendPhysic.GSNotifyBeginCS
// (Native, Event, Public, Protected, BlueprintEvent, Const)
// Parameters:
// struct FUStGSNotifyParam                NotifyParam                                            (Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
// float                                   TotalDuration                                          (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UBANS_GSBlendPhysic::GSNotifyBeginCS(const struct FUStGSNotifyParam& NotifyParam, float TotalDuration) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BANS_GSBlendPhysic", "GSNotifyBeginCS");

	Params::BANS_GSBlendPhysic_GSNotifyBeginCS Parms{};

	Parms.NotifyParam = std::move(NotifyParam);
	Parms.TotalDuration = TotalDuration;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function b1-Managed.BED_MovieNode_PerformerSyncTransformToRefObj.GetNodeDescriptionInCS
// (Native, Event, Public, HasOutParams, BlueprintEvent, Const)
// Parameters:
// class FString                           ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash)

class FString UBED_MovieNode_PerformerSyncTransformToRefObj::GetNodeDescriptionInCS() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BED_MovieNode_PerformerSyncTransformToRefObj", "GetNodeDescriptionInCS");

	Params::BED_MovieNode_PerformerSyncTransformToRefObj_GetNodeDescriptionInCS Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function b1-Managed.BANS_GSCalcAMScale.GSAllowCrossSection
// (Native, Event, Public, HasOutParams, BlueprintEvent, Const)
// Parameters:
// uint8                                   ReturnValue                                            (Parm, OutParm, ReturnParm, NoDestructor, HasGetValueTypeHash)

uint8 UBANS_GSCalcAMScale::GSAllowCrossSection() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BANS_GSCalcAMScale", "GSAllowCrossSection");

	Params::BANS_GSCalcAMScale_GSAllowCrossSection Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function b1-Managed.BANS_GSCalcAMScale.GSValidateInputCS
// (Native, Event, Public, BlueprintEvent, Const)
// Parameters:
// class AActor*                           Actor                                                  (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UBANS_GSCalcAMScale::GSValidateInputCS(class AActor* Actor) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BANS_GSCalcAMScale", "GSValidateInputCS");

	Params::BANS_GSCalcAMScale_GSValidateInputCS Parms{};

	Parms.Actor = Actor;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function b1-Managed.BANS_GSCalcAMScale.GSNotifyBeginCS
// (Native, Event, Public, Protected, BlueprintEvent, Const)
// Parameters:
// struct FUStGSNotifyParam                NotifyParam                                            (Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
// float                                   TotalDuration                                          (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UBANS_GSCalcAMScale::GSNotifyBeginCS(const struct FUStGSNotifyParam& NotifyParam, float TotalDuration) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BANS_GSCalcAMScale", "GSNotifyBeginCS");

	Params::BANS_GSCalcAMScale_GSNotifyBeginCS Parms{};

	Parms.NotifyParam = std::move(NotifyParam);
	Parms.TotalDuration = TotalDuration;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function b1-Managed.BANS_GSCamArmLengthCurve.GSNotifyBeginCS
// (Native, Event, Public, Protected, BlueprintEvent, Const)
// Parameters:
// struct FUStGSNotifyParam                NotifyParam                                            (Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
// float                                   TotalDuration                                          (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UBANS_GSCamArmLengthCurve::GSNotifyBeginCS(const struct FUStGSNotifyParam& NotifyParam, float TotalDuration) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BANS_GSCamArmLengthCurve", "GSNotifyBeginCS");

	Params::BANS_GSCamArmLengthCurve_GSNotifyBeginCS Parms{};

	Parms.NotifyParam = std::move(NotifyParam);
	Parms.TotalDuration = TotalDuration;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function b1-Managed.BANS_GSCamArmLengthCurve.GSNotifyTickCS
// (Native, Event, Public, Protected, BlueprintEvent, Const)
// Parameters:
// struct FUStGSNotifyParam                NotifyParam                                            (Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
// float                                   FrameDeltaTime                                         (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UBANS_GSCamArmLengthCurve::GSNotifyTickCS(const struct FUStGSNotifyParam& NotifyParam, float FrameDeltaTime) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BANS_GSCamArmLengthCurve", "GSNotifyTickCS");

	Params::BANS_GSCamArmLengthCurve_GSNotifyTickCS Parms{};

	Parms.NotifyParam = std::move(NotifyParam);
	Parms.FrameDeltaTime = FrameDeltaTime;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function b1-Managed.BANS_GSCamArmLengthCurve.GSNotifyEndCS
// (Native, Event, Public, Protected, BlueprintEvent, Const)
// Parameters:
// struct FUStGSNotifyParam                NotifyParam                                            (Parm, ZeroConstructor, IsPlainOldData, NoDestructor)

void UBANS_GSCamArmLengthCurve::GSNotifyEndCS(const struct FUStGSNotifyParam& NotifyParam) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BANS_GSCamArmLengthCurve", "GSNotifyEndCS");

	Params::BANS_GSCamArmLengthCurve_GSNotifyEndCS Parms{};

	Parms.NotifyParam = std::move(NotifyParam);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function b1-Managed.BANS_GSCamPitchCurve.GSNotifyBeginCS
// (Native, Event, Public, Protected, BlueprintEvent, Const)
// Parameters:
// struct FUStGSNotifyParam                NotifyParam                                            (Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
// float                                   TotalDuration                                          (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UBANS_GSCamPitchCurve::GSNotifyBeginCS(const struct FUStGSNotifyParam& NotifyParam, float TotalDuration) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BANS_GSCamPitchCurve", "GSNotifyBeginCS");

	Params::BANS_GSCamPitchCurve_GSNotifyBeginCS Parms{};

	Parms.NotifyParam = std::move(NotifyParam);
	Parms.TotalDuration = TotalDuration;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function b1-Managed.BANS_GSCamPitchCurve.GSNotifyTickCS
// (Native, Event, Public, Protected, BlueprintEvent, Const)
// Parameters:
// struct FUStGSNotifyParam                NotifyParam                                            (Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
// float                                   FrameDeltaTime                                         (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UBANS_GSCamPitchCurve::GSNotifyTickCS(const struct FUStGSNotifyParam& NotifyParam, float FrameDeltaTime) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BANS_GSCamPitchCurve", "GSNotifyTickCS");

	Params::BANS_GSCamPitchCurve_GSNotifyTickCS Parms{};

	Parms.NotifyParam = std::move(NotifyParam);
	Parms.FrameDeltaTime = FrameDeltaTime;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function b1-Managed.BANS_GSCamPitchCurve.GSNotifyEndCS
// (Native, Event, Public, Protected, BlueprintEvent, Const)
// Parameters:
// struct FUStGSNotifyParam                NotifyParam                                            (Parm, ZeroConstructor, IsPlainOldData, NoDestructor)

void UBANS_GSCamPitchCurve::GSNotifyEndCS(const struct FUStGSNotifyParam& NotifyParam) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BANS_GSCamPitchCurve", "GSNotifyEndCS");

	Params::BANS_GSCamPitchCurve_GSNotifyEndCS Parms{};

	Parms.NotifyParam = std::move(NotifyParam);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function b1-Managed.BANS_GSCamSASOCurve.GSNotifyBeginCS
// (Native, Event, Public, Protected, BlueprintEvent, Const)
// Parameters:
// struct FUStGSNotifyParam                NotifyParam                                            (Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
// float                                   TotalDuration                                          (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UBANS_GSCamSASOCurve::GSNotifyBeginCS(const struct FUStGSNotifyParam& NotifyParam, float TotalDuration) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BANS_GSCamSASOCurve", "GSNotifyBeginCS");

	Params::BANS_GSCamSASOCurve_GSNotifyBeginCS Parms{};

	Parms.NotifyParam = std::move(NotifyParam);
	Parms.TotalDuration = TotalDuration;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function b1-Managed.BANS_GSCamSASOCurve.GSNotifyTickCS
// (Native, Event, Public, Protected, BlueprintEvent, Const)
// Parameters:
// struct FUStGSNotifyParam                NotifyParam                                            (Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
// float                                   FrameDeltaTime                                         (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UBANS_GSCamSASOCurve::GSNotifyTickCS(const struct FUStGSNotifyParam& NotifyParam, float FrameDeltaTime) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BANS_GSCamSASOCurve", "GSNotifyTickCS");

	Params::BANS_GSCamSASOCurve_GSNotifyTickCS Parms{};

	Parms.NotifyParam = std::move(NotifyParam);
	Parms.FrameDeltaTime = FrameDeltaTime;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function b1-Managed.BANS_GSCamSASOCurve.GSNotifyEndCS
// (Native, Event, Public, Protected, BlueprintEvent, Const)
// Parameters:
// struct FUStGSNotifyParam                NotifyParam                                            (Parm, ZeroConstructor, IsPlainOldData, NoDestructor)

void UBANS_GSCamSASOCurve::GSNotifyEndCS(const struct FUStGSNotifyParam& NotifyParam) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BANS_GSCamSASOCurve", "GSNotifyEndCS");

	Params::BANS_GSCamSASOCurve_GSNotifyEndCS Parms{};

	Parms.NotifyParam = std::move(NotifyParam);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function b1-Managed.BANS_GSCastDingShen.GSNotifyBeginCS
// (Native, Event, Public, Protected, BlueprintEvent, Const)
// Parameters:
// struct FUStGSNotifyParam                NotifyParam                                            (Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
// float                                   TotalDuration                                          (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UBANS_GSCastDingShen::GSNotifyBeginCS(const struct FUStGSNotifyParam& NotifyParam, float TotalDuration) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BANS_GSCastDingShen", "GSNotifyBeginCS");

	Params::BANS_GSCastDingShen_GSNotifyBeginCS Parms{};

	Parms.NotifyParam = std::move(NotifyParam);
	Parms.TotalDuration = TotalDuration;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function b1-Managed.BANS_GSCastingState.GSNotifyBeginCS
// (Native, Event, Public, Protected, BlueprintEvent, Const)
// Parameters:
// struct FUStGSNotifyParam                NotifyParam                                            (Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
// float                                   TotalDuration                                          (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UBANS_GSCastingState::GSNotifyBeginCS(const struct FUStGSNotifyParam& NotifyParam, float TotalDuration) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BANS_GSCastingState", "GSNotifyBeginCS");

	Params::BANS_GSCastingState_GSNotifyBeginCS Parms{};

	Parms.NotifyParam = std::move(NotifyParam);
	Parms.TotalDuration = TotalDuration;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function b1-Managed.BANS_GSCastingState.GSNotifyTickCS
// (Native, Event, Public, Protected, BlueprintEvent, Const)
// Parameters:
// struct FUStGSNotifyParam                NotifyParam                                            (Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
// float                                   FrameDeltaTime                                         (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UBANS_GSCastingState::GSNotifyTickCS(const struct FUStGSNotifyParam& NotifyParam, float FrameDeltaTime) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BANS_GSCastingState", "GSNotifyTickCS");

	Params::BANS_GSCastingState_GSNotifyTickCS Parms{};

	Parms.NotifyParam = std::move(NotifyParam);
	Parms.FrameDeltaTime = FrameDeltaTime;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function b1-Managed.BANS_GSCastingState.GSNotifyEndCS
// (Native, Event, Public, Protected, BlueprintEvent, Const)
// Parameters:
// struct FUStGSNotifyParam                NotifyParam                                            (Parm, ZeroConstructor, IsPlainOldData, NoDestructor)

void UBANS_GSCastingState::GSNotifyEndCS(const struct FUStGSNotifyParam& NotifyParam) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BANS_GSCastingState", "GSNotifyEndCS");

	Params::BANS_GSCastingState_GSNotifyEndCS Parms{};

	Parms.NotifyParam = std::move(NotifyParam);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function b1-Managed.BANS_GSChargeKeyCache.GSNotifyBeginCS
// (Native, Event, Public, Protected, BlueprintEvent, Const)
// Parameters:
// struct FUStGSNotifyParam                NotifyParam                                            (Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
// float                                   TotalDuration                                          (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UBANS_GSChargeKeyCache::GSNotifyBeginCS(const struct FUStGSNotifyParam& NotifyParam, float TotalDuration) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BANS_GSChargeKeyCache", "GSNotifyBeginCS");

	Params::BANS_GSChargeKeyCache_GSNotifyBeginCS Parms{};

	Parms.NotifyParam = std::move(NotifyParam);
	Parms.TotalDuration = TotalDuration;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function b1-Managed.BANS_GSChargeKeyCache.GSNotifyEndCS
// (Native, Event, Public, Protected, BlueprintEvent, Const)
// Parameters:
// struct FUStGSNotifyParam                NotifyParam                                            (Parm, ZeroConstructor, IsPlainOldData, NoDestructor)

void UBANS_GSChargeKeyCache::GSNotifyEndCS(const struct FUStGSNotifyParam& NotifyParam) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BANS_GSChargeKeyCache", "GSNotifyEndCS");

	Params::BANS_GSChargeKeyCache_GSNotifyEndCS Parms{};

	Parms.NotifyParam = std::move(NotifyParam);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function b1-Managed.BED_QuestNode_CustomOutput.GetNodeDescriptionInCS
// (Native, Event, Public, HasOutParams, BlueprintEvent, Const)
// Parameters:
// class FString                           ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash)

class FString UBED_QuestNode_CustomOutput::GetNodeDescriptionInCS() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BED_QuestNode_CustomOutput", "GetNodeDescriptionInCS");

	Params::BED_QuestNode_CustomOutput_GetNodeDescriptionInCS Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function b1-Managed.BANS_GSCloseCollisionCompHitMove.GSNotifyBeginCS
// (Native, Event, Public, Protected, BlueprintEvent, Const)
// Parameters:
// struct FUStGSNotifyParam                NotifyParam                                            (Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
// float                                   TotalDuration                                          (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UBANS_GSCloseCollisionCompHitMove::GSNotifyBeginCS(const struct FUStGSNotifyParam& NotifyParam, float TotalDuration) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BANS_GSCloseCollisionCompHitMove", "GSNotifyBeginCS");

	Params::BANS_GSCloseCollisionCompHitMove_GSNotifyBeginCS Parms{};

	Parms.NotifyParam = std::move(NotifyParam);
	Parms.TotalDuration = TotalDuration;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function b1-Managed.BANS_GSCloseCollisionCompHitMove.GSNotifyEndCS
// (Native, Event, Public, Protected, BlueprintEvent, Const)
// Parameters:
// struct FUStGSNotifyParam                NotifyParam                                            (Parm, ZeroConstructor, IsPlainOldData, NoDestructor)

void UBANS_GSCloseCollisionCompHitMove::GSNotifyEndCS(const struct FUStGSNotifyParam& NotifyParam) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BANS_GSCloseCollisionCompHitMove", "GSNotifyEndCS");

	Params::BANS_GSCloseCollisionCompHitMove_GSNotifyEndCS Parms{};

	Parms.NotifyParam = std::move(NotifyParam);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function b1-Managed.BANS_GSCloseGravity.GSNotifyBeginCS
// (Native, Event, Public, Protected, BlueprintEvent, Const)
// Parameters:
// struct FUStGSNotifyParam                NotifyParam                                            (Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
// float                                   TotalDuration                                          (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UBANS_GSCloseGravity::GSNotifyBeginCS(const struct FUStGSNotifyParam& NotifyParam, float TotalDuration) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BANS_GSCloseGravity", "GSNotifyBeginCS");

	Params::BANS_GSCloseGravity_GSNotifyBeginCS Parms{};

	Parms.NotifyParam = std::move(NotifyParam);
	Parms.TotalDuration = TotalDuration;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function b1-Managed.BANS_GSCloseGravity.GSNotifyEndCS
// (Native, Event, Public, Protected, BlueprintEvent, Const)
// Parameters:
// struct FUStGSNotifyParam                NotifyParam                                            (Parm, ZeroConstructor, IsPlainOldData, NoDestructor)

void UBANS_GSCloseGravity::GSNotifyEndCS(const struct FUStGSNotifyParam& NotifyParam) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BANS_GSCloseGravity", "GSNotifyEndCS");

	Params::BANS_GSCloseGravity_GSNotifyEndCS Parms{};

	Parms.NotifyParam = std::move(NotifyParam);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function b1-Managed.BANS_GSCloseHitMove.GSNotifyBeginCS
// (Native, Event, Public, Protected, BlueprintEvent, Const)
// Parameters:
// struct FUStGSNotifyParam                NotifyParam                                            (Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
// float                                   TotalDuration                                          (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UBANS_GSCloseHitMove::GSNotifyBeginCS(const struct FUStGSNotifyParam& NotifyParam, float TotalDuration) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BANS_GSCloseHitMove", "GSNotifyBeginCS");

	Params::BANS_GSCloseHitMove_GSNotifyBeginCS Parms{};

	Parms.NotifyParam = std::move(NotifyParam);
	Parms.TotalDuration = TotalDuration;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function b1-Managed.BANS_GSCloseHitMove.GSNotifyEndCS
// (Native, Event, Public, Protected, BlueprintEvent, Const)
// Parameters:
// struct FUStGSNotifyParam                NotifyParam                                            (Parm, ZeroConstructor, IsPlainOldData, NoDestructor)

void UBANS_GSCloseHitMove::GSNotifyEndCS(const struct FUStGSNotifyParam& NotifyParam) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BANS_GSCloseHitMove", "GSNotifyEndCS");

	Params::BANS_GSCloseHitMove_GSNotifyEndCS Parms{};

	Parms.NotifyParam = std::move(NotifyParam);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function b1-Managed.BED_QuestNode_LevelStream.GetNodeDescriptionInCS
// (Native, Event, Public, HasOutParams, BlueprintEvent, Const)
// Parameters:
// class FString                           ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash)

class FString UBED_QuestNode_LevelStream::GetNodeDescriptionInCS() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BED_QuestNode_LevelStream", "GetNodeDescriptionInCS");

	Params::BED_QuestNode_LevelStream_GetNodeDescriptionInCS Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function b1-Managed.BANS_GSCollisionResponseToChannel.GetCollisionChannelIndex_Capsule
// (Native, Public, HasOutParams, BlueprintCallable, Const)
// Parameters:
// TArray<int32>                           ReturnValue                                            (Parm, OutParm, ReturnParm)

TArray<int32> UBANS_GSCollisionResponseToChannel::GetCollisionChannelIndex_Capsule() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BANS_GSCollisionResponseToChannel", "GetCollisionChannelIndex_Capsule");

	Params::BANS_GSCollisionResponseToChannel_GetCollisionChannelIndex_Capsule Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function b1-Managed.BANS_GSCollisionResponseToChannel.GSNotifyBeginCS
// (Native, Event, Public, Protected, BlueprintEvent, Const)
// Parameters:
// struct FUStGSNotifyParam                NotifyParam                                            (Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
// float                                   TotalDuration                                          (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UBANS_GSCollisionResponseToChannel::GSNotifyBeginCS(const struct FUStGSNotifyParam& NotifyParam, float TotalDuration) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BANS_GSCollisionResponseToChannel", "GSNotifyBeginCS");

	Params::BANS_GSCollisionResponseToChannel_GSNotifyBeginCS Parms{};

	Parms.NotifyParam = std::move(NotifyParam);
	Parms.TotalDuration = TotalDuration;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function b1-Managed.BANS_GSCollisionResponseToChannel.GetCollisionChannelIndex_Mesh
// (Native, Public, HasOutParams, BlueprintCallable, Const)
// Parameters:
// TArray<int32>                           ReturnValue                                            (Parm, OutParm, ReturnParm)

TArray<int32> UBANS_GSCollisionResponseToChannel::GetCollisionChannelIndex_Mesh() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BANS_GSCollisionResponseToChannel", "GetCollisionChannelIndex_Mesh");

	Params::BANS_GSCollisionResponseToChannel_GetCollisionChannelIndex_Mesh Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function b1-Managed.BANS_GSCollisionResponseToChannel.GSNotifyEndCS
// (Native, Event, Public, Protected, BlueprintEvent, Const)
// Parameters:
// struct FUStGSNotifyParam                NotifyParam                                            (Parm, ZeroConstructor, IsPlainOldData, NoDestructor)

void UBANS_GSCollisionResponseToChannel::GSNotifyEndCS(const struct FUStGSNotifyParam& NotifyParam) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BANS_GSCollisionResponseToChannel", "GSNotifyEndCS");

	Params::BANS_GSCollisionResponseToChannel_GSNotifyEndCS Parms{};

	Parms.NotifyParam = std::move(NotifyParam);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function b1-Managed.BANS_GSComboWindow.GSNotifyBeginCS
// (Native, Event, Public, Protected, BlueprintEvent, Const)
// Parameters:
// struct FUStGSNotifyParam                NotifyParam                                            (Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
// float                                   TotalDuration                                          (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UBANS_GSComboWindow::GSNotifyBeginCS(const struct FUStGSNotifyParam& NotifyParam, float TotalDuration) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BANS_GSComboWindow", "GSNotifyBeginCS");

	Params::BANS_GSComboWindow_GSNotifyBeginCS Parms{};

	Parms.NotifyParam = std::move(NotifyParam);
	Parms.TotalDuration = TotalDuration;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function b1-Managed.BANS_GSComboWindow.GetAnimNSType
// (Native, Event, Public, HasOutParams, BlueprintEvent, Const)
// Parameters:
// EGsEnAnimNS                             ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

EGsEnAnimNS UBANS_GSComboWindow::GetAnimNSType() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BANS_GSComboWindow", "GetAnimNSType");

	Params::BANS_GSComboWindow_GetAnimNSType Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function b1-Managed.BANS_GSCostAttrBySkillEffect.GSNotifyBeginCS
// (Native, Event, Public, Protected, BlueprintEvent, Const)
// Parameters:
// struct FUStGSNotifyParam                NotifyParam                                            (Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
// float                                   TotalDuration                                          (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UBANS_GSCostAttrBySkillEffect::GSNotifyBeginCS(const struct FUStGSNotifyParam& NotifyParam, float TotalDuration) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BANS_GSCostAttrBySkillEffect", "GSNotifyBeginCS");

	Params::BANS_GSCostAttrBySkillEffect_GSNotifyBeginCS Parms{};

	Parms.NotifyParam = std::move(NotifyParam);
	Parms.TotalDuration = TotalDuration;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function b1-Managed.BANS_GSCostAttrBySkillEffect.GSNotifyEndCS
// (Native, Event, Public, Protected, BlueprintEvent, Const)
// Parameters:
// struct FUStGSNotifyParam                NotifyParam                                            (Parm, ZeroConstructor, IsPlainOldData, NoDestructor)

void UBANS_GSCostAttrBySkillEffect::GSNotifyEndCS(const struct FUStGSNotifyParam& NotifyParam) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BANS_GSCostAttrBySkillEffect", "GSNotifyEndCS");

	Params::BANS_GSCostAttrBySkillEffect_GSNotifyEndCS Parms{};

	Parms.NotifyParam = std::move(NotifyParam);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function b1-Managed.BED_QuestNode_NotifyActor.GetNodeDescriptionInCS
// (Native, Event, Public, HasOutParams, BlueprintEvent, Const)
// Parameters:
// class FString                           ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash)

class FString UBED_QuestNode_NotifyActor::GetNodeDescriptionInCS() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BED_QuestNode_NotifyActor", "GetNodeDescriptionInCS");

	Params::BED_QuestNode_NotifyActor_GetNodeDescriptionInCS Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function b1-Managed.BANS_GSCostStamina.GSNotifyBeginCS
// (Native, Event, Public, Protected, BlueprintEvent, Const)
// Parameters:
// struct FUStGSNotifyParam                NotifyParam                                            (Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
// float                                   TotalDuration                                          (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UBANS_GSCostStamina::GSNotifyBeginCS(const struct FUStGSNotifyParam& NotifyParam, float TotalDuration) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BANS_GSCostStamina", "GSNotifyBeginCS");

	Params::BANS_GSCostStamina_GSNotifyBeginCS Parms{};

	Parms.NotifyParam = std::move(NotifyParam);
	Parms.TotalDuration = TotalDuration;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function b1-Managed.BANS_GSCostStamina.GSNotifyTickCS
// (Native, Event, Public, Protected, BlueprintEvent, Const)
// Parameters:
// struct FUStGSNotifyParam                NotifyParam                                            (Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
// float                                   FrameDeltaTime                                         (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UBANS_GSCostStamina::GSNotifyTickCS(const struct FUStGSNotifyParam& NotifyParam, float FrameDeltaTime) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BANS_GSCostStamina", "GSNotifyTickCS");

	Params::BANS_GSCostStamina_GSNotifyTickCS Parms{};

	Parms.NotifyParam = std::move(NotifyParam);
	Parms.FrameDeltaTime = FrameDeltaTime;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function b1-Managed.BANS_GSCostStamina.GSNotifyEndCS
// (Native, Event, Public, Protected, BlueprintEvent, Const)
// Parameters:
// struct FUStGSNotifyParam                NotifyParam                                            (Parm, ZeroConstructor, IsPlainOldData, NoDestructor)

void UBANS_GSCostStamina::GSNotifyEndCS(const struct FUStGSNotifyParam& NotifyParam) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BANS_GSCostStamina", "GSNotifyEndCS");

	Params::BANS_GSCostStamina_GSNotifyEndCS Parms{};

	Parms.NotifyParam = std::move(NotifyParam);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function b1-Managed.BANS_GSDashHitWallCheck.GSNotifyBeginCS
// (Native, Event, Public, Protected, BlueprintEvent, Const)
// Parameters:
// struct FUStGSNotifyParam                NotifyParam                                            (Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
// float                                   TotalDuration                                          (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UBANS_GSDashHitWallCheck::GSNotifyBeginCS(const struct FUStGSNotifyParam& NotifyParam, float TotalDuration) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BANS_GSDashHitWallCheck", "GSNotifyBeginCS");

	Params::BANS_GSDashHitWallCheck_GSNotifyBeginCS Parms{};

	Parms.NotifyParam = std::move(NotifyParam);
	Parms.TotalDuration = TotalDuration;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function b1-Managed.BANS_GSDashHitWallCheck.GSNotifyTickCS
// (Native, Event, Public, Protected, BlueprintEvent, Const)
// Parameters:
// struct FUStGSNotifyParam                NotifyParam                                            (Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
// float                                   FrameDeltaTime                                         (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UBANS_GSDashHitWallCheck::GSNotifyTickCS(const struct FUStGSNotifyParam& NotifyParam, float FrameDeltaTime) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BANS_GSDashHitWallCheck", "GSNotifyTickCS");

	Params::BANS_GSDashHitWallCheck_GSNotifyTickCS Parms{};

	Parms.NotifyParam = std::move(NotifyParam);
	Parms.FrameDeltaTime = FrameDeltaTime;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function b1-Managed.BANS_GSDashHitWallCheck.GSNotifyEndCS
// (Native, Event, Public, Protected, BlueprintEvent, Const)
// Parameters:
// struct FUStGSNotifyParam                NotifyParam                                            (Parm, ZeroConstructor, IsPlainOldData, NoDestructor)

void UBANS_GSDashHitWallCheck::GSNotifyEndCS(const struct FUStGSNotifyParam& NotifyParam) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BANS_GSDashHitWallCheck", "GSNotifyEndCS");

	Params::BANS_GSDashHitWallCheck_GSNotifyEndCS Parms{};

	Parms.NotifyParam = std::move(NotifyParam);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function b1-Managed.BANS_GSDodgeComboKeyCache.GSNotifyBeginCS
// (Native, Event, Public, Protected, BlueprintEvent, Const)
// Parameters:
// struct FUStGSNotifyParam                NotifyParam                                            (Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
// float                                   TotalDuration                                          (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UBANS_GSDodgeComboKeyCache::GSNotifyBeginCS(const struct FUStGSNotifyParam& NotifyParam, float TotalDuration) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BANS_GSDodgeComboKeyCache", "GSNotifyBeginCS");

	Params::BANS_GSDodgeComboKeyCache_GSNotifyBeginCS Parms{};

	Parms.NotifyParam = std::move(NotifyParam);
	Parms.TotalDuration = TotalDuration;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function b1-Managed.BANS_GSDodgeWindow.GSNotifyBeginCS
// (Native, Event, Public, Protected, BlueprintEvent, Const)
// Parameters:
// struct FUStGSNotifyParam                NotifyParam                                            (Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
// float                                   TotalDuration                                          (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UBANS_GSDodgeWindow::GSNotifyBeginCS(const struct FUStGSNotifyParam& NotifyParam, float TotalDuration) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BANS_GSDodgeWindow", "GSNotifyBeginCS");

	Params::BANS_GSDodgeWindow_GSNotifyBeginCS Parms{};

	Parms.NotifyParam = std::move(NotifyParam);
	Parms.TotalDuration = TotalDuration;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function b1-Managed.BGW_ExceptionUIMgr.Get
// (Native, Static, Public, HasOutParams, BlueprintCallable)
// Parameters:
// class UObject*                          WorldCtx                                               (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// class UBGW_ExceptionUIMgr*              ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

class UBGW_ExceptionUIMgr* UBGW_ExceptionUIMgr::Get(class UObject* WorldCtx)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("BGW_ExceptionUIMgr", "Get");

	Params::BGW_ExceptionUIMgr_Get Parms{};

	Parms.WorldCtx = WorldCtx;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function b1-Managed.BGW_ExceptionUIMgr.OnCloseExceptionUI
// (Native, Public, BlueprintCallable)

void UBGW_ExceptionUIMgr::OnCloseExceptionUI()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BGW_ExceptionUIMgr", "OnCloseExceptionUI");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function b1-Managed.BANS_GSEnableIK.GSNotifyBeginCS
// (Native, Event, Public, Protected, BlueprintEvent, Const)
// Parameters:
// struct FUStGSNotifyParam                NotifyParam                                            (Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
// float                                   TotalDuration                                          (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UBANS_GSEnableIK::GSNotifyBeginCS(const struct FUStGSNotifyParam& NotifyParam, float TotalDuration) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BANS_GSEnableIK", "GSNotifyBeginCS");

	Params::BANS_GSEnableIK_GSNotifyBeginCS Parms{};

	Parms.NotifyParam = std::move(NotifyParam);
	Parms.TotalDuration = TotalDuration;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function b1-Managed.BANS_GSEnableIK.GSNotifyEndCS
// (Native, Event, Public, Protected, BlueprintEvent, Const)
// Parameters:
// struct FUStGSNotifyParam                NotifyParam                                            (Parm, ZeroConstructor, IsPlainOldData, NoDestructor)

void UBANS_GSEnableIK::GSNotifyEndCS(const struct FUStGSNotifyParam& NotifyParam) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BANS_GSEnableIK", "GSNotifyEndCS");

	Params::BANS_GSEnableIK_GSNotifyEndCS Parms{};

	Parms.NotifyParam = std::move(NotifyParam);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function b1-Managed.BED_ProcessStateNode_ResetDetect.GetContextOutputsInCS
// (Native, Event, Public, HasOutParams, BlueprintEvent)
// Parameters:
// TArray<class FName>                     ReturnValue                                            (Parm, OutParm, ReturnParm)

TArray<class FName> UBED_ProcessStateNode_ResetDetect::GetContextOutputsInCS()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BED_ProcessStateNode_ResetDetect", "GetContextOutputsInCS");

	Params::BED_ProcessStateNode_ResetDetect_GetContextOutputsInCS Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function b1-Managed.BED_ProcessStateNode_ResetDetect.PostPropertyChanged
// (Native, Event, Public, BlueprintEvent)
// Parameters:
// class FString                           MemberName                                             (Parm, ZeroConstructor, HasGetValueTypeHash)
// class FString                           PropertyName                                           (Parm, ZeroConstructor, HasGetValueTypeHash)

void UBED_ProcessStateNode_ResetDetect::PostPropertyChanged(const class FString& MemberName, const class FString& PropertyName)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BED_ProcessStateNode_ResetDetect", "PostPropertyChanged");

	Params::BED_ProcessStateNode_ResetDetect_PostPropertyChanged Parms{};

	Parms.MemberName = std::move(MemberName);
	Parms.PropertyName = std::move(PropertyName);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function b1-Managed.BED_ProcessStateNode_ResetDetect.GetNodeDescriptionInCS
// (Native, Event, Public, HasOutParams, BlueprintEvent, Const)
// Parameters:
// class FString                           ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash)

class FString UBED_ProcessStateNode_ResetDetect::GetNodeDescriptionInCS() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BED_ProcessStateNode_ResetDetect", "GetNodeDescriptionInCS");

	Params::BED_ProcessStateNode_ResetDetect_GetNodeDescriptionInCS Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function b1-Managed.BANS_GSEnableMontageFootstep.GSNotifyBeginCS
// (Native, Event, Public, Protected, BlueprintEvent, Const)
// Parameters:
// struct FUStGSNotifyParam                NotifyParam                                            (Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
// float                                   TotalDuration                                          (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UBANS_GSEnableMontageFootstep::GSNotifyBeginCS(const struct FUStGSNotifyParam& NotifyParam, float TotalDuration) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BANS_GSEnableMontageFootstep", "GSNotifyBeginCS");

	Params::BANS_GSEnableMontageFootstep_GSNotifyBeginCS Parms{};

	Parms.NotifyParam = std::move(NotifyParam);
	Parms.TotalDuration = TotalDuration;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function b1-Managed.BANS_GSEnableMontageFootstep.GSNotifyEndCS
// (Native, Event, Public, Protected, BlueprintEvent, Const)
// Parameters:
// struct FUStGSNotifyParam                NotifyParam                                            (Parm, ZeroConstructor, IsPlainOldData, NoDestructor)

void UBANS_GSEnableMontageFootstep::GSNotifyEndCS(const struct FUStGSNotifyParam& NotifyParam) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BANS_GSEnableMontageFootstep", "GSNotifyEndCS");

	Params::BANS_GSEnableMontageFootstep_GSNotifyEndCS Parms{};

	Parms.NotifyParam = std::move(NotifyParam);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function b1-Managed.QATamerDescriber.QADescribeAnimBySkillID
// (Native, Static, Public, HasOutParams, BlueprintCallable)
// Parameters:
// int32                                   SkillID                                                (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// class FString                           ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash)

class FString UQATamerDescriber::QADescribeAnimBySkillID(int32 SkillID)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("QATamerDescriber", "QADescribeAnimBySkillID");

	Params::QATamerDescriber_QADescribeAnimBySkillID Parms{};

	Parms.SkillID = SkillID;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function b1-Managed.QATamerDescriber.QADescribeAnimByMontage
// (Native, Static, Public, HasOutParams, BlueprintCallable)
// Parameters:
// class UAnimMontage*                     Montage                                                (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// class FString                           ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash)

class FString UQATamerDescriber::QADescribeAnimByMontage(class UAnimMontage* Montage)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("QATamerDescriber", "QADescribeAnimByMontage");

	Params::QATamerDescriber_QADescribeAnimByMontage Parms{};

	Parms.Montage = Montage;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function b1-Managed.QATamerDescriber.QADescribeBattleArena
// (Native, Static, Public, HasOutParams, BlueprintCallable)
// Parameters:
// class ABUTamerActor*                    TM                                                     (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// class FString                           ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash)

class FString UQATamerDescriber::QADescribeBattleArena(class ABUTamerActor* TM)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("QATamerDescriber", "QADescribeBattleArena");

	Params::QATamerDescriber_QADescribeBattleArena Parms{};

	Parms.TM = TM;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function b1-Managed.QATamerDescriber.QADescribeEngagement
// (Native, Static, Public, HasOutParams, BlueprintCallable)
// Parameters:
// class ABUTamerActor*                    TM                                                     (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// class FString                           ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash)

class FString UQATamerDescriber::QADescribeEngagement(class ABUTamerActor* TM)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("QATamerDescriber", "QADescribeEngagement");

	Params::QATamerDescriber_QADescribeEngagement Parms{};

	Parms.TM = TM;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function b1-Managed.QATamerDescriber.QADescribeBeAttacked
// (Native, Static, Public, HasOutParams, BlueprintCallable)
// Parameters:
// class ABUTamerActor*                    TM                                                     (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// class FString                           ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash)

class FString UQATamerDescriber::QADescribeBeAttacked(class ABUTamerActor* TM)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("QATamerDescriber", "QADescribeBeAttacked");

	Params::QATamerDescriber_QADescribeBeAttacked Parms{};

	Parms.TM = TM;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function b1-Managed.QATamerDescriber.QADescribeCounter
// (Native, Static, Public, HasOutParams, BlueprintCallable)
// Parameters:
// class ABUTamerActor*                    TM                                                     (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// class FString                           ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash)

class FString UQATamerDescriber::QADescribeCounter(class ABUTamerActor* TM)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("QATamerDescriber", "QADescribeCounter");

	Params::QATamerDescriber_QADescribeCounter Parms{};

	Parms.TM = TM;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function b1-Managed.QATamerDescriber.QAGetBTTaskNodes
// (Native, Static, Public, Private, HasOutParams, BlueprintCallable)
// Parameters:
// class UBehaviorTree*                    BT                                                     (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// struct FBehaviorTreeNodeData            ReturnValue                                            (Parm, OutParm, ReturnParm)

struct FBehaviorTreeNodeData UQATamerDescriber::QAGetBTTaskNodes(class UBehaviorTree* BT)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("QATamerDescriber", "QAGetBTTaskNodes");

	Params::QATamerDescriber_QAGetBTTaskNodes Parms{};

	Parms.BT = BT;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function b1-Managed.QATamerDescriber.QADescribeBattle
// (Native, Static, Public, HasOutParams, BlueprintCallable)
// Parameters:
// class ABUTamerActor*                    TM                                                     (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// class FString                           ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash)

class FString UQATamerDescriber::QADescribeBattle(class ABUTamerActor* TM)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("QATamerDescriber", "QADescribeBattle");

	Params::QATamerDescriber_QADescribeBattle Parms{};

	Parms.TM = TM;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function b1-Managed.QATamerDescriber.QADescribeSkill
// (Native, Static, Public, HasOutParams, BlueprintCallable)
// Parameters:
// class ABUTamerActor*                    TM                                                     (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// class FString                           ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash)

class FString UQATamerDescriber::QADescribeSkill(class ABUTamerActor* TM)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("QATamerDescriber", "QADescribeSkill");

	Params::QATamerDescriber_QADescribeSkill Parms{};

	Parms.TM = TM;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function b1-Managed.QATamerDescriber.QADescribeDeath
// (Native, Static, Public, HasOutParams, BlueprintCallable)
// Parameters:
// class ABUTamerActor*                    TM                                                     (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// class FString                           ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash)

class FString UQATamerDescriber::QADescribeDeath(class ABUTamerActor* TM)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("QATamerDescriber", "QADescribeDeath");

	Params::QATamerDescriber_QADescribeDeath Parms{};

	Parms.TM = TM;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function b1-Managed.QATamerDescriber.QADescribeArt
// (Native, Static, Public, HasOutParams, BlueprintCallable)
// Parameters:
// class ABUTamerActor*                    TM                                                     (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// class FString                           ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash)

class FString UQATamerDescriber::QADescribeArt(class ABUTamerActor* TM)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("QATamerDescriber", "QADescribeArt");

	Params::QATamerDescriber_QADescribeArt Parms{};

	Parms.TM = TM;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function b1-Managed.QATamerDescriber.QADescribeISO
// (Native, Static, Public, HasOutParams, BlueprintCallable)
// Parameters:
// class ABUTamerActor*                    TM                                                     (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// class FString                           ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash)

class FString UQATamerDescriber::QADescribeISO(class ABUTamerActor* TM)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("QATamerDescriber", "QADescribeISO");

	Params::QATamerDescriber_QADescribeISO Parms{};

	Parms.TM = TM;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function b1-Managed.QATamerDescriber.QADescribeBT
// (Native, Static, Public, HasOutParams, BlueprintCallable)
// Parameters:
// class UBehaviorTree*                    BT                                                     (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// class FString                           ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash)

class FString UQATamerDescriber::QADescribeBT(class UBehaviorTree* BT)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("QATamerDescriber", "QADescribeBT");

	Params::QATamerDescriber_QADescribeBT Parms{};

	Parms.BT = BT;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function b1-Managed.BANS_GSHiddenBossBar.GSNotifyBeginCS
// (Native, Event, Public, Protected, BlueprintEvent, Const)
// Parameters:
// struct FUStGSNotifyParam                NotifyParam                                            (Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
// float                                   TotalDuration                                          (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UBANS_GSHiddenBossBar::GSNotifyBeginCS(const struct FUStGSNotifyParam& NotifyParam, float TotalDuration) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BANS_GSHiddenBossBar", "GSNotifyBeginCS");

	Params::BANS_GSHiddenBossBar_GSNotifyBeginCS Parms{};

	Parms.NotifyParam = std::move(NotifyParam);
	Parms.TotalDuration = TotalDuration;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function b1-Managed.BANS_GSHiddenBossBar.GSNotifyEndCS
// (Native, Event, Public, Protected, BlueprintEvent, Const)
// Parameters:
// struct FUStGSNotifyParam                NotifyParam                                            (Parm, ZeroConstructor, IsPlainOldData, NoDestructor)

void UBANS_GSHiddenBossBar::GSNotifyEndCS(const struct FUStGSNotifyParam& NotifyParam) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BANS_GSHiddenBossBar", "GSNotifyEndCS");

	Params::BANS_GSHiddenBossBar_GSNotifyEndCS Parms{};

	Parms.NotifyParam = std::move(NotifyParam);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function b1-Managed.UGSReplayCSharpFuncLibCS.PostProcessGameSpecificDemoHeaderCS
// (Native, Event, Public, BlueprintCallable, BlueprintEvent)

void UUGSReplayCSharpFuncLibCS::PostProcessGameSpecificDemoHeaderCS()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("UGSReplayCSharpFuncLibCS", "PostProcessGameSpecificDemoHeaderCS");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function b1-Managed.UGSReplayCSharpFuncLibCS.PreProcessGameSpecificDemoHeaderCS
// (Native, Event, Public, BlueprintCallable, BlueprintEvent)

void UUGSReplayCSharpFuncLibCS::PreProcessGameSpecificDemoHeaderCS()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("UGSReplayCSharpFuncLibCS", "PreProcessGameSpecificDemoHeaderCS");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function b1-Managed.UGSReplayCSharpFuncLibCS.ProcessGameSpecificDemoHeaderCS
// (Native, Event, Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// class FString                           GameSpecificData                                       (Parm, ZeroConstructor, HasGetValueTypeHash)
// class FString                           Error                                                  (Parm, OutParm, ZeroConstructor, HasGetValueTypeHash)

void UUGSReplayCSharpFuncLibCS::ProcessGameSpecificDemoHeaderCS(const class FString& GameSpecificData, class FString* Error)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("UGSReplayCSharpFuncLibCS", "ProcessGameSpecificDemoHeaderCS");

	Params::UGSReplayCSharpFuncLibCS_ProcessGameSpecificDemoHeaderCS Parms{};

	Parms.GameSpecificData = std::move(GameSpecificData);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	if (Error != nullptr)
		*Error = std::move(Parms.Error);
}


// Function b1-Managed.UGSReplayCSharpFuncLibCS.WriteGameSpecificDemoHeaderCS
// (Native, Event, Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// TArray<class FString>                   GameSpecificData                                       (Parm, OutParm)

void UUGSReplayCSharpFuncLibCS::WriteGameSpecificDemoHeaderCS(TArray<class FString>* GameSpecificData)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("UGSReplayCSharpFuncLibCS", "WriteGameSpecificDemoHeaderCS");

	Params::UGSReplayCSharpFuncLibCS_WriteGameSpecificDemoHeaderCS Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	if (GameSpecificData != nullptr)
		*GameSpecificData = std::move(Parms.GameSpecificData);
}


// Function b1-Managed.UGSReplayCSharpFuncLibCS.OnReplaySeverConnectionInit
// (Native, Event, Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// class UWorld*                           World                                                  (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// class UNetConnection*                   SeverConnection                                        (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UUGSReplayCSharpFuncLibCS::OnReplaySeverConnectionInit(class UWorld* World, class UNetConnection* SeverConnection)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("UGSReplayCSharpFuncLibCS", "OnReplaySeverConnectionInit");

	Params::UGSReplayCSharpFuncLibCS_OnReplaySeverConnectionInit Parms{};

	Parms.World = World;
	Parms.SeverConnection = SeverConnection;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function b1-Managed.UGSReplayCSharpFuncLibCS.OnReplayScrubComplete
// (Native, Event, Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// class UWorld*                           World                                                  (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UUGSReplayCSharpFuncLibCS::OnReplayScrubComplete(class UWorld* World)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("UGSReplayCSharpFuncLibCS", "OnReplayScrubComplete");

	Params::UGSReplayCSharpFuncLibCS_OnReplayScrubComplete Parms{};

	Parms.World = World;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function b1-Managed.UGSReplayCSharpFuncLibCS.GSNetworkRemapPathCS
// (Native, Event, Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// class UObject*                          Outer_0                                                (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// class FString                           OriginName                                             (Parm, ZeroConstructor, HasGetValueTypeHash)
// class FString                           Name_0                                                 (Parm, OutParm, ZeroConstructor, HasGetValueTypeHash)

void UUGSReplayCSharpFuncLibCS::GSNetworkRemapPathCS(class UObject* Outer_0, const class FString& OriginName, class FString* Name_0)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("UGSReplayCSharpFuncLibCS", "GSNetworkRemapPathCS");

	Params::UGSReplayCSharpFuncLibCS_GSNetworkRemapPathCS Parms{};

	Parms.Outer_0 = Outer_0;
	Parms.OriginName = std::move(OriginName);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	if (Name_0 != nullptr)
		*Name_0 = std::move(Parms.Name_0);
}


// Function b1-Managed.UGSReplayCSharpFuncLibCS.OnReplayStarted
// (Native, Event, Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// class UWorld*                           World                                                  (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UUGSReplayCSharpFuncLibCS::OnReplayStarted(class UWorld* World)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("UGSReplayCSharpFuncLibCS", "OnReplayStarted");

	Params::UGSReplayCSharpFuncLibCS_OnReplayStarted Parms{};

	Parms.World = World;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function b1-Managed.UGSReplayCSharpFuncLibCS.OnPostDemoPlay
// (Native, Event, Public, BlueprintCallable, BlueprintEvent)

void UUGSReplayCSharpFuncLibCS::OnPostDemoPlay()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("UGSReplayCSharpFuncLibCS", "OnPostDemoPlay");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function b1-Managed.BANS_GSJumpToPosition.GSNotifyBeginCS
// (Native, Event, Public, Protected, BlueprintEvent, Const)
// Parameters:
// struct FUStGSNotifyParam                NotifyParam                                            (Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
// float                                   TotalDuration                                          (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UBANS_GSJumpToPosition::GSNotifyBeginCS(const struct FUStGSNotifyParam& NotifyParam, float TotalDuration) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BANS_GSJumpToPosition", "GSNotifyBeginCS");

	Params::BANS_GSJumpToPosition_GSNotifyBeginCS Parms{};

	Parms.NotifyParam = std::move(NotifyParam);
	Parms.TotalDuration = TotalDuration;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function b1-Managed.BANS_GSMarkRolling.GSNotifyBeginCS
// (Native, Event, Public, Protected, BlueprintEvent, Const)
// Parameters:
// struct FUStGSNotifyParam                NotifyParam                                            (Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
// float                                   TotalDuration                                          (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UBANS_GSMarkRolling::GSNotifyBeginCS(const struct FUStGSNotifyParam& NotifyParam, float TotalDuration) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BANS_GSMarkRolling", "GSNotifyBeginCS");

	Params::BANS_GSMarkRolling_GSNotifyBeginCS Parms{};

	Parms.NotifyParam = std::move(NotifyParam);
	Parms.TotalDuration = TotalDuration;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function b1-Managed.BANS_GSMarkRolling.GSNotifyEndCS
// (Native, Event, Public, Protected, BlueprintEvent, Const)
// Parameters:
// struct FUStGSNotifyParam                NotifyParam                                            (Parm, ZeroConstructor, IsPlainOldData, NoDestructor)

void UBANS_GSMarkRolling::GSNotifyEndCS(const struct FUStGSNotifyParam& NotifyParam) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BANS_GSMarkRolling", "GSNotifyEndCS");

	Params::BANS_GSMarkRolling_GSNotifyEndCS Parms{};

	Parms.NotifyParam = std::move(NotifyParam);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function b1-Managed.BANS_GSMontageJumpToSectionWhenHasBuff.GetJumpableSectionPrefix
// (Native, Event, Public, HasOutParams, BlueprintEvent, Const)
// Parameters:
// class FString                           ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash)

class FString UBANS_GSMontageJumpToSectionWhenHasBuff::GetJumpableSectionPrefix() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BANS_GSMontageJumpToSectionWhenHasBuff", "GetJumpableSectionPrefix");

	Params::BANS_GSMontageJumpToSectionWhenHasBuff_GetJumpableSectionPrefix Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function b1-Managed.BANS_GSMontageJumpToSectionWhenHasBuff.GSAllowCrossSection
// (Native, Event, Public, HasOutParams, BlueprintEvent, Const)
// Parameters:
// uint8                                   ReturnValue                                            (Parm, OutParm, ReturnParm, NoDestructor, HasGetValueTypeHash)

uint8 UBANS_GSMontageJumpToSectionWhenHasBuff::GSAllowCrossSection() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BANS_GSMontageJumpToSectionWhenHasBuff", "GSAllowCrossSection");

	Params::BANS_GSMontageJumpToSectionWhenHasBuff_GSAllowCrossSection Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function b1-Managed.BANS_GSMontageJumpToSectionWhenHasBuff.GSNotifyBeginCS
// (Native, Event, Public, Protected, BlueprintEvent, Const)
// Parameters:
// struct FUStGSNotifyParam                NotifyParam                                            (Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
// float                                   TotalDuration                                          (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UBANS_GSMontageJumpToSectionWhenHasBuff::GSNotifyBeginCS(const struct FUStGSNotifyParam& NotifyParam, float TotalDuration) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BANS_GSMontageJumpToSectionWhenHasBuff", "GSNotifyBeginCS");

	Params::BANS_GSMontageJumpToSectionWhenHasBuff_GSNotifyBeginCS Parms{};

	Parms.NotifyParam = std::move(NotifyParam);
	Parms.TotalDuration = TotalDuration;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function b1-Managed.BANS_GSMontageJumpToSectionWhenHasBuff.GSNotifyTickCS
// (Native, Event, Public, Protected, BlueprintEvent, Const)
// Parameters:
// struct FUStGSNotifyParam                NotifyParam                                            (Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
// float                                   FrameDeltaTime                                         (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UBANS_GSMontageJumpToSectionWhenHasBuff::GSNotifyTickCS(const struct FUStGSNotifyParam& NotifyParam, float FrameDeltaTime) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BANS_GSMontageJumpToSectionWhenHasBuff", "GSNotifyTickCS");

	Params::BANS_GSMontageJumpToSectionWhenHasBuff_GSNotifyTickCS Parms{};

	Parms.NotifyParam = std::move(NotifyParam);
	Parms.FrameDeltaTime = FrameDeltaTime;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function b1-Managed.BANS_GSMontageJumpToSectionWhenHasBuff.GetAnimNSType
// (Native, Event, Public, HasOutParams, BlueprintEvent, Const)
// Parameters:
// EGsEnAnimNS                             ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

EGsEnAnimNS UBANS_GSMontageJumpToSectionWhenHasBuff::GetAnimNSType() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BANS_GSMontageJumpToSectionWhenHasBuff", "GetAnimNSType");

	Params::BANS_GSMontageJumpToSectionWhenHasBuff_GetAnimNSType Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function b1-Managed.BANS_GSMontageJumpToSectionWhenHasBuff.GSNotifyEndCS
// (Native, Event, Public, Protected, BlueprintEvent, Const)
// Parameters:
// struct FUStGSNotifyParam                NotifyParam                                            (Parm, ZeroConstructor, IsPlainOldData, NoDestructor)

void UBANS_GSMontageJumpToSectionWhenHasBuff::GSNotifyEndCS(const struct FUStGSNotifyParam& NotifyParam) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BANS_GSMontageJumpToSectionWhenHasBuff", "GSNotifyEndCS");

	Params::BANS_GSMontageJumpToSectionWhenHasBuff_GSNotifyEndCS Parms{};

	Parms.NotifyParam = std::move(NotifyParam);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function b1-Managed.BED_BehaviorNode_BeAttackedNumFromSkillEffect.GetNodeDescriptionInCS
// (Native, Event, Public, HasOutParams, BlueprintEvent, Const)
// Parameters:
// class FString                           ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash)

class FString UBED_BehaviorNode_BeAttackedNumFromSkillEffect::GetNodeDescriptionInCS() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BED_BehaviorNode_BeAttackedNumFromSkillEffect", "GetNodeDescriptionInCS");

	Params::BED_BehaviorNode_BeAttackedNumFromSkillEffect_GetNodeDescriptionInCS Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function b1-Managed.BED_BehaviorNode_BeAttackedNumFromSkillEffect.IsSupportViewType
// (Native, Event, Public, HasOutParams, BlueprintEvent, Const)
// Parameters:
// ECalliopeViewType                       InViewType                                             (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// uint8                                   ReturnValue                                            (Parm, OutParm, ReturnParm, NoDestructor, HasGetValueTypeHash)

uint8 UBED_BehaviorNode_BeAttackedNumFromSkillEffect::IsSupportViewType(const ECalliopeViewType& InViewType) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BED_BehaviorNode_BeAttackedNumFromSkillEffect", "IsSupportViewType");

	Params::BED_BehaviorNode_BeAttackedNumFromSkillEffect_IsSupportViewType Parms{};

	Parms.InViewType = InViewType;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function b1-Managed.BANS_GSPauseAI.GSNotifyBeginCS
// (Native, Event, Public, Protected, BlueprintEvent, Const)
// Parameters:
// struct FUStGSNotifyParam                NotifyParam                                            (Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
// float                                   TotalDuration                                          (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UBANS_GSPauseAI::GSNotifyBeginCS(const struct FUStGSNotifyParam& NotifyParam, float TotalDuration) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BANS_GSPauseAI", "GSNotifyBeginCS");

	Params::BANS_GSPauseAI_GSNotifyBeginCS Parms{};

	Parms.NotifyParam = std::move(NotifyParam);
	Parms.TotalDuration = TotalDuration;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function b1-Managed.BANS_GSPauseAI.GSNotifyEndCS
// (Native, Event, Public, Protected, BlueprintEvent, Const)
// Parameters:
// struct FUStGSNotifyParam                NotifyParam                                            (Parm, ZeroConstructor, IsPlainOldData, NoDestructor)

void UBANS_GSPauseAI::GSNotifyEndCS(const struct FUStGSNotifyParam& NotifyParam) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BANS_GSPauseAI", "GSNotifyEndCS");

	Params::BANS_GSPauseAI_GSNotifyEndCS Parms{};

	Parms.NotifyParam = std::move(NotifyParam);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function b1-Managed.BANS_GSPerfectChargeState.GSNotifyBeginCS
// (Native, Event, Public, Protected, BlueprintEvent, Const)
// Parameters:
// struct FUStGSNotifyParam                NotifyParam                                            (Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
// float                                   TotalDuration                                          (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UBANS_GSPerfectChargeState::GSNotifyBeginCS(const struct FUStGSNotifyParam& NotifyParam, float TotalDuration) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BANS_GSPerfectChargeState", "GSNotifyBeginCS");

	Params::BANS_GSPerfectChargeState_GSNotifyBeginCS Parms{};

	Parms.NotifyParam = std::move(NotifyParam);
	Parms.TotalDuration = TotalDuration;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function b1-Managed.BANS_GSPerfectChargeState.GSNotifyEndCS
// (Native, Event, Public, Protected, BlueprintEvent, Const)
// Parameters:
// struct FUStGSNotifyParam                NotifyParam                                            (Parm, ZeroConstructor, IsPlainOldData, NoDestructor)

void UBANS_GSPerfectChargeState::GSNotifyEndCS(const struct FUStGSNotifyParam& NotifyParam) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BANS_GSPerfectChargeState", "GSNotifyEndCS");

	Params::BANS_GSPerfectChargeState_GSNotifyEndCS Parms{};

	Parms.NotifyParam = std::move(NotifyParam);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function b1-Managed.BANS_GSPlayCameraShake.GSNotifyBeginCS
// (Native, Event, Public, Protected, BlueprintEvent, Const)
// Parameters:
// struct FUStGSNotifyParam                NotifyParam                                            (Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
// float                                   TotalDuration                                          (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UBANS_GSPlayCameraShake::GSNotifyBeginCS(const struct FUStGSNotifyParam& NotifyParam, float TotalDuration) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BANS_GSPlayCameraShake", "GSNotifyBeginCS");

	Params::BANS_GSPlayCameraShake_GSNotifyBeginCS Parms{};

	Parms.NotifyParam = std::move(NotifyParam);
	Parms.TotalDuration = TotalDuration;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function b1-Managed.BANS_GSPlayCameraShake.GSNotifyTickCS
// (Native, Event, Public, Protected, BlueprintEvent, Const)
// Parameters:
// struct FUStGSNotifyParam                NotifyParam                                            (Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
// float                                   FrameDeltaTime                                         (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UBANS_GSPlayCameraShake::GSNotifyTickCS(const struct FUStGSNotifyParam& NotifyParam, float FrameDeltaTime) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BANS_GSPlayCameraShake", "GSNotifyTickCS");

	Params::BANS_GSPlayCameraShake_GSNotifyTickCS Parms{};

	Parms.NotifyParam = std::move(NotifyParam);
	Parms.FrameDeltaTime = FrameDeltaTime;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function b1-Managed.BANS_GSPlayCameraShake.GSNotifyEndCS
// (Native, Event, Public, Protected, BlueprintEvent, Const)
// Parameters:
// struct FUStGSNotifyParam                NotifyParam                                            (Parm, ZeroConstructor, IsPlainOldData, NoDestructor)

void UBANS_GSPlayCameraShake::GSNotifyEndCS(const struct FUStGSNotifyParam& NotifyParam) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BANS_GSPlayCameraShake", "GSNotifyEndCS");

	Params::BANS_GSPlayCameraShake_GSNotifyEndCS Parms{};

	Parms.NotifyParam = std::move(NotifyParam);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function b1-Managed.BANS_GSPlayDummyAnim.GSNotifyBeginCS
// (Native, Event, Public, Protected, BlueprintEvent, Const)
// Parameters:
// struct FUStGSNotifyParam                NotifyParam                                            (Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
// float                                   TotalDuration                                          (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UBANS_GSPlayDummyAnim::GSNotifyBeginCS(const struct FUStGSNotifyParam& NotifyParam, float TotalDuration) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BANS_GSPlayDummyAnim", "GSNotifyBeginCS");

	Params::BANS_GSPlayDummyAnim_GSNotifyBeginCS Parms{};

	Parms.NotifyParam = std::move(NotifyParam);
	Parms.TotalDuration = TotalDuration;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function b1-Managed.BANS_GSPlayDummyAnim.GSNotifyEndCS
// (Native, Event, Public, Protected, BlueprintEvent, Const)
// Parameters:
// struct FUStGSNotifyParam                NotifyParam                                            (Parm, ZeroConstructor, IsPlainOldData, NoDestructor)

void UBANS_GSPlayDummyAnim::GSNotifyEndCS(const struct FUStGSNotifyParam& NotifyParam) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BANS_GSPlayDummyAnim", "GSNotifyEndCS");

	Params::BANS_GSPlayDummyAnim_GSNotifyEndCS Parms{};

	Parms.NotifyParam = std::move(NotifyParam);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function b1-Managed.BED_BehaviorNode_NotifyExclusiveItem.GetNodeDescriptionInCS
// (Native, Event, Public, HasOutParams, BlueprintEvent, Const)
// Parameters:
// class FString                           ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash)

class FString UBED_BehaviorNode_NotifyExclusiveItem::GetNodeDescriptionInCS() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BED_BehaviorNode_NotifyExclusiveItem", "GetNodeDescriptionInCS");

	Params::BED_BehaviorNode_NotifyExclusiveItem_GetNodeDescriptionInCS Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function b1-Managed.BANS_GSSetCharacterModuleConstraintProfile.GSNotifyBeginCS
// (Native, Event, Public, Protected, BlueprintEvent, Const)
// Parameters:
// struct FUStGSNotifyParam                NotifyParam                                            (Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
// float                                   TotalDuration                                          (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UBANS_GSSetCharacterModuleConstraintProfile::GSNotifyBeginCS(const struct FUStGSNotifyParam& NotifyParam, float TotalDuration) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BANS_GSSetCharacterModuleConstraintProfile", "GSNotifyBeginCS");

	Params::BANS_GSSetCharacterModuleConstraintProfile_GSNotifyBeginCS Parms{};

	Parms.NotifyParam = std::move(NotifyParam);
	Parms.TotalDuration = TotalDuration;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function b1-Managed.BANS_GSSetCharacterModuleConstraintProfile.GSNotifyEndCS
// (Native, Event, Public, Protected, BlueprintEvent, Const)
// Parameters:
// struct FUStGSNotifyParam                NotifyParam                                            (Parm, ZeroConstructor, IsPlainOldData, NoDestructor)

void UBANS_GSSetCharacterModuleConstraintProfile::GSNotifyEndCS(const struct FUStGSNotifyParam& NotifyParam) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BANS_GSSetCharacterModuleConstraintProfile", "GSNotifyEndCS");

	Params::BANS_GSSetCharacterModuleConstraintProfile_GSNotifyEndCS Parms{};

	Parms.NotifyParam = std::move(NotifyParam);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function b1-Managed.BED_BehaviorNode_SimpleState.GetNodeDescriptionInCS
// (Native, Event, Public, HasOutParams, BlueprintEvent, Const)
// Parameters:
// class FString                           ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash)

class FString UBED_BehaviorNode_SimpleState::GetNodeDescriptionInCS() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BED_BehaviorNode_SimpleState", "GetNodeDescriptionInCS");

	Params::BED_BehaviorNode_SimpleState_GetNodeDescriptionInCS Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function b1-Managed.BANS_GSSpawnActorAndSyncAnimation.GSNotifyBeginCS
// (Native, Event, Public, Protected, BlueprintEvent, Const)
// Parameters:
// struct FUStGSNotifyParam                NotifyParam                                            (Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
// float                                   TotalDuration                                          (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UBANS_GSSpawnActorAndSyncAnimation::GSNotifyBeginCS(const struct FUStGSNotifyParam& NotifyParam, float TotalDuration) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BANS_GSSpawnActorAndSyncAnimation", "GSNotifyBeginCS");

	Params::BANS_GSSpawnActorAndSyncAnimation_GSNotifyBeginCS Parms{};

	Parms.NotifyParam = std::move(NotifyParam);
	Parms.TotalDuration = TotalDuration;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function b1-Managed.BANS_GSSpawnActorAndSyncAnimation.GSNotifyEndCS
// (Native, Event, Public, Protected, BlueprintEvent, Const)
// Parameters:
// struct FUStGSNotifyParam                NotifyParam                                            (Parm, ZeroConstructor, IsPlainOldData, NoDestructor)

void UBANS_GSSpawnActorAndSyncAnimation::GSNotifyEndCS(const struct FUStGSNotifyParam& NotifyParam) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BANS_GSSpawnActorAndSyncAnimation", "GSNotifyEndCS");

	Params::BANS_GSSpawnActorAndSyncAnimation_GSNotifyEndCS Parms{};

	Parms.NotifyParam = std::move(NotifyParam);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function b1-Managed.BANS_GSSpawnActorAndSyncAnimation.GetAnimNSType
// (Native, Event, Public, HasOutParams, BlueprintEvent, Const)
// Parameters:
// EGsEnAnimNS                             ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

EGsEnAnimNS UBANS_GSSpawnActorAndSyncAnimation::GetAnimNSType() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BANS_GSSpawnActorAndSyncAnimation", "GetAnimNSType");

	Params::BANS_GSSpawnActorAndSyncAnimation_GetAnimNSType Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function b1-Managed.BANS_GSSwitchAimingSetting.GSNotifyBeginCS
// (Native, Event, Public, Protected, BlueprintEvent, Const)
// Parameters:
// struct FUStGSNotifyParam                NotifyParam                                            (Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
// float                                   TotalDuration                                          (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UBANS_GSSwitchAimingSetting::GSNotifyBeginCS(const struct FUStGSNotifyParam& NotifyParam, float TotalDuration) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BANS_GSSwitchAimingSetting", "GSNotifyBeginCS");

	Params::BANS_GSSwitchAimingSetting_GSNotifyBeginCS Parms{};

	Parms.NotifyParam = std::move(NotifyParam);
	Parms.TotalDuration = TotalDuration;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function b1-Managed.BANS_GSSwitchAimingSetting.GSNotifyEndCS
// (Native, Event, Public, Protected, BlueprintEvent, Const)
// Parameters:
// struct FUStGSNotifyParam                NotifyParam                                            (Parm, ZeroConstructor, IsPlainOldData, NoDestructor)

void UBANS_GSSwitchAimingSetting::GSNotifyEndCS(const struct FUStGSNotifyParam& NotifyParam) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BANS_GSSwitchAimingSetting", "GSNotifyEndCS");

	Params::BANS_GSSwitchAimingSetting_GSNotifyEndCS Parms{};

	Parms.NotifyParam = std::move(NotifyParam);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function b1-Managed.BANS_GSSwitchCollisionProfile.GSNotifyBeginCS
// (Native, Event, Public, Protected, BlueprintEvent, Const)
// Parameters:
// struct FUStGSNotifyParam                NotifyParam                                            (Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
// float                                   TotalDuration                                          (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UBANS_GSSwitchCollisionProfile::GSNotifyBeginCS(const struct FUStGSNotifyParam& NotifyParam, float TotalDuration) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BANS_GSSwitchCollisionProfile", "GSNotifyBeginCS");

	Params::BANS_GSSwitchCollisionProfile_GSNotifyBeginCS Parms{};

	Parms.NotifyParam = std::move(NotifyParam);
	Parms.TotalDuration = TotalDuration;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function b1-Managed.BANS_GSSwitchCollisionProfile.GSNotifyEndCS
// (Native, Event, Public, Protected, BlueprintEvent, Const)
// Parameters:
// struct FUStGSNotifyParam                NotifyParam                                            (Parm, ZeroConstructor, IsPlainOldData, NoDestructor)

void UBANS_GSSwitchCollisionProfile::GSNotifyEndCS(const struct FUStGSNotifyParam& NotifyParam) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BANS_GSSwitchCollisionProfile", "GSNotifyEndCS");

	Params::BANS_GSSwitchCollisionProfile_GSNotifyEndCS Parms{};

	Parms.NotifyParam = std::move(NotifyParam);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function b1-Managed.BANS_GSSyncAnimationsIgnoreHitMove.GSNotifyBeginCS
// (Native, Event, Public, Protected, BlueprintEvent, Const)
// Parameters:
// struct FUStGSNotifyParam                NotifyParam                                            (Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
// float                                   TotalDuration                                          (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UBANS_GSSyncAnimationsIgnoreHitMove::GSNotifyBeginCS(const struct FUStGSNotifyParam& NotifyParam, float TotalDuration) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BANS_GSSyncAnimationsIgnoreHitMove", "GSNotifyBeginCS");

	Params::BANS_GSSyncAnimationsIgnoreHitMove_GSNotifyBeginCS Parms{};

	Parms.NotifyParam = std::move(NotifyParam);
	Parms.TotalDuration = TotalDuration;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function b1-Managed.BANS_GSSyncAnimationsIgnoreHitMove.GSNotifyTickCS
// (Native, Event, Public, Protected, BlueprintEvent, Const)
// Parameters:
// struct FUStGSNotifyParam                NotifyParam                                            (Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
// float                                   FrameDeltaTime                                         (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UBANS_GSSyncAnimationsIgnoreHitMove::GSNotifyTickCS(const struct FUStGSNotifyParam& NotifyParam, float FrameDeltaTime) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BANS_GSSyncAnimationsIgnoreHitMove", "GSNotifyTickCS");

	Params::BANS_GSSyncAnimationsIgnoreHitMove_GSNotifyTickCS Parms{};

	Parms.NotifyParam = std::move(NotifyParam);
	Parms.FrameDeltaTime = FrameDeltaTime;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function b1-Managed.BANS_GSSyncAnimationsIgnoreHitMove.GSNotifyEndCS
// (Native, Event, Public, Protected, BlueprintEvent, Const)
// Parameters:
// struct FUStGSNotifyParam                NotifyParam                                            (Parm, ZeroConstructor, IsPlainOldData, NoDestructor)

void UBANS_GSSyncAnimationsIgnoreHitMove::GSNotifyEndCS(const struct FUStGSNotifyParam& NotifyParam) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BANS_GSSyncAnimationsIgnoreHitMove", "GSNotifyEndCS");

	Params::BANS_GSSyncAnimationsIgnoreHitMove_GSNotifyEndCS Parms{};

	Parms.NotifyParam = std::move(NotifyParam);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function b1-Managed.BANS_GSHitMoveCollisionScale.GSNotifyBeginCS
// (Native, Event, Public, Protected, BlueprintEvent, Const)
// Parameters:
// struct FUStGSNotifyParam                NotifyParam                                            (Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
// float                                   TotalDuration                                          (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UBANS_GSHitMoveCollisionScale::GSNotifyBeginCS(const struct FUStGSNotifyParam& NotifyParam, float TotalDuration) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BANS_GSHitMoveCollisionScale", "GSNotifyBeginCS");

	Params::BANS_GSHitMoveCollisionScale_GSNotifyBeginCS Parms{};

	Parms.NotifyParam = std::move(NotifyParam);
	Parms.TotalDuration = TotalDuration;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function b1-Managed.BANS_GSHitMoveCollisionScale.GSNotifyEndCS
// (Native, Event, Public, Protected, BlueprintEvent, Const)
// Parameters:
// struct FUStGSNotifyParam                NotifyParam                                            (Parm, ZeroConstructor, IsPlainOldData, NoDestructor)

void UBANS_GSHitMoveCollisionScale::GSNotifyEndCS(const struct FUStGSNotifyParam& NotifyParam) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BANS_GSHitMoveCollisionScale", "GSNotifyEndCS");

	Params::BANS_GSHitMoveCollisionScale_GSNotifyEndCS Parms{};

	Parms.NotifyParam = std::move(NotifyParam);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function b1-Managed.BED_MovieNode_Cut.GetNodeDescriptionInCS
// (Native, Event, Public, HasOutParams, BlueprintEvent, Const)
// Parameters:
// class FString                           ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash)

class FString UBED_MovieNode_Cut::GetNodeDescriptionInCS() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BED_MovieNode_Cut", "GetNodeDescriptionInCS");

	Params::BED_MovieNode_Cut_GetNodeDescriptionInCS Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function b1-Managed.BANS_GSJumpToCeiling.GSNotifyBeginCS
// (Native, Event, Public, Protected, BlueprintEvent, Const)
// Parameters:
// struct FUStGSNotifyParam                NotifyParam                                            (Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
// float                                   TotalDuration                                          (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UBANS_GSJumpToCeiling::GSNotifyBeginCS(const struct FUStGSNotifyParam& NotifyParam, float TotalDuration) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BANS_GSJumpToCeiling", "GSNotifyBeginCS");

	Params::BANS_GSJumpToCeiling_GSNotifyBeginCS Parms{};

	Parms.NotifyParam = std::move(NotifyParam);
	Parms.TotalDuration = TotalDuration;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function b1-Managed.BANS_GSJumpToCeiling.GSNotifyTickCS
// (Native, Event, Public, Protected, BlueprintEvent, Const)
// Parameters:
// struct FUStGSNotifyParam                NotifyParam                                            (Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
// float                                   FrameDeltaTime                                         (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UBANS_GSJumpToCeiling::GSNotifyTickCS(const struct FUStGSNotifyParam& NotifyParam, float FrameDeltaTime) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BANS_GSJumpToCeiling", "GSNotifyTickCS");

	Params::BANS_GSJumpToCeiling_GSNotifyTickCS Parms{};

	Parms.NotifyParam = std::move(NotifyParam);
	Parms.FrameDeltaTime = FrameDeltaTime;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function b1-Managed.BANS_GSJumpToCeiling.GSNotifyEndCS
// (Native, Event, Public, Protected, BlueprintEvent, Const)
// Parameters:
// struct FUStGSNotifyParam                NotifyParam                                            (Parm, ZeroConstructor, IsPlainOldData, NoDestructor)

void UBANS_GSJumpToCeiling::GSNotifyEndCS(const struct FUStGSNotifyParam& NotifyParam) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BANS_GSJumpToCeiling", "GSNotifyEndCS");

	Params::BANS_GSJumpToCeiling_GSNotifyEndCS Parms{};

	Parms.NotifyParam = std::move(NotifyParam);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function b1-Managed.BANS_GSLimitCharacterOnLand.GSNotifyTickCS
// (Native, Event, Public, Protected, BlueprintEvent, Const)
// Parameters:
// struct FUStGSNotifyParam                NotifyParam                                            (Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
// float                                   FrameDeltaTime                                         (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UBANS_GSLimitCharacterOnLand::GSNotifyTickCS(const struct FUStGSNotifyParam& NotifyParam, float FrameDeltaTime) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BANS_GSLimitCharacterOnLand", "GSNotifyTickCS");

	Params::BANS_GSLimitCharacterOnLand_GSNotifyTickCS Parms{};

	Parms.NotifyParam = std::move(NotifyParam);
	Parms.FrameDeltaTime = FrameDeltaTime;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function b1-Managed.BED_QuestNode_SaveArchive.GetNodeDescriptionInCS
// (Native, Event, Public, HasOutParams, BlueprintEvent, Const)
// Parameters:
// class FString                           ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash)

class FString UBED_QuestNode_SaveArchive::GetNodeDescriptionInCS() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BED_QuestNode_SaveArchive", "GetNodeDescriptionInCS");

	Params::BED_QuestNode_SaveArchive_GetNodeDescriptionInCS Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function b1-Managed.BANS_GSMagicKeyCache.GSNotifyBeginCS
// (Native, Event, Public, Protected, BlueprintEvent, Const)
// Parameters:
// struct FUStGSNotifyParam                NotifyParam                                            (Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
// float                                   TotalDuration                                          (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UBANS_GSMagicKeyCache::GSNotifyBeginCS(const struct FUStGSNotifyParam& NotifyParam, float TotalDuration) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BANS_GSMagicKeyCache", "GSNotifyBeginCS");

	Params::BANS_GSMagicKeyCache_GSNotifyBeginCS Parms{};

	Parms.NotifyParam = std::move(NotifyParam);
	Parms.TotalDuration = TotalDuration;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function b1-Managed.BANS_GSMoveToSceneItem.GSNotifyBeginCS
// (Native, Event, Public, Protected, BlueprintEvent, Const)
// Parameters:
// struct FUStGSNotifyParam                NotifyParam                                            (Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
// float                                   TotalDuration                                          (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UBANS_GSMoveToSceneItem::GSNotifyBeginCS(const struct FUStGSNotifyParam& NotifyParam, float TotalDuration) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BANS_GSMoveToSceneItem", "GSNotifyBeginCS");

	Params::BANS_GSMoveToSceneItem_GSNotifyBeginCS Parms{};

	Parms.NotifyParam = std::move(NotifyParam);
	Parms.TotalDuration = TotalDuration;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function b1-Managed.BANS_GSMoveToSceneItem.GSNotifyEndCS
// (Native, Event, Public, Protected, BlueprintEvent, Const)
// Parameters:
// struct FUStGSNotifyParam                NotifyParam                                            (Parm, ZeroConstructor, IsPlainOldData, NoDestructor)

void UBANS_GSMoveToSceneItem::GSNotifyEndCS(const struct FUStGSNotifyParam& NotifyParam) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BANS_GSMoveToSceneItem", "GSNotifyEndCS");

	Params::BANS_GSMoveToSceneItem_GSNotifyEndCS Parms{};

	Parms.NotifyParam = std::move(NotifyParam);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function b1-Managed.BED_QuestNode_Teleport.GetNodeDescriptionInCS
// (Native, Event, Public, HasOutParams, BlueprintEvent, Const)
// Parameters:
// class FString                           ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash)

class FString UBED_QuestNode_Teleport::GetNodeDescriptionInCS() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BED_QuestNode_Teleport", "GetNodeDescriptionInCS");

	Params::BED_QuestNode_Teleport_GetNodeDescriptionInCS Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function b1-Managed.BANS_GSPhysicsForce.GSNotifyBeginCS
// (Native, Event, Public, Protected, BlueprintEvent, Const)
// Parameters:
// struct FUStGSNotifyParam                NotifyParam                                            (Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
// float                                   TotalDuration                                          (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UBANS_GSPhysicsForce::GSNotifyBeginCS(const struct FUStGSNotifyParam& NotifyParam, float TotalDuration) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BANS_GSPhysicsForce", "GSNotifyBeginCS");

	Params::BANS_GSPhysicsForce_GSNotifyBeginCS Parms{};

	Parms.NotifyParam = std::move(NotifyParam);
	Parms.TotalDuration = TotalDuration;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function b1-Managed.BANS_GSPhysicsForce.GSNotifyTickCS
// (Native, Event, Public, Protected, BlueprintEvent, Const)
// Parameters:
// struct FUStGSNotifyParam                NotifyParam                                            (Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
// float                                   FrameDeltaTime                                         (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UBANS_GSPhysicsForce::GSNotifyTickCS(const struct FUStGSNotifyParam& NotifyParam, float FrameDeltaTime) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BANS_GSPhysicsForce", "GSNotifyTickCS");

	Params::BANS_GSPhysicsForce_GSNotifyTickCS Parms{};

	Parms.NotifyParam = std::move(NotifyParam);
	Parms.FrameDeltaTime = FrameDeltaTime;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function b1-Managed.BANS_GSPhysicsForce.GSNotifyEndCS
// (Native, Event, Public, Protected, BlueprintEvent, Const)
// Parameters:
// struct FUStGSNotifyParam                NotifyParam                                            (Parm, ZeroConstructor, IsPlainOldData, NoDestructor)

void UBANS_GSPhysicsForce::GSNotifyEndCS(const struct FUStGSNotifyParam& NotifyParam) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BANS_GSPhysicsForce", "GSNotifyEndCS");

	Params::BANS_GSPhysicsForce_GSNotifyEndCS Parms{};

	Parms.NotifyParam = std::move(NotifyParam);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function b1-Managed.BANS_GSSetAMSpeedRate.GetModifySpeedRate
// (Native, Event, Public, HasOutParams, BlueprintEvent, Const)
// Parameters:
// float                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

float UBANS_GSSetAMSpeedRate::GetModifySpeedRate() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BANS_GSSetAMSpeedRate", "GetModifySpeedRate");

	Params::BANS_GSSetAMSpeedRate_GetModifySpeedRate Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function b1-Managed.BANS_GSSetAMSpeedRate.GSValidateInputCS
// (Native, Event, Public, BlueprintEvent, Const)
// Parameters:
// class AActor*                           Actor                                                  (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UBANS_GSSetAMSpeedRate::GSValidateInputCS(class AActor* Actor) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BANS_GSSetAMSpeedRate", "GSValidateInputCS");

	Params::BANS_GSSetAMSpeedRate_GSValidateInputCS Parms{};

	Parms.Actor = Actor;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function b1-Managed.BANS_GSSetAMSpeedRate.GSNotifyBeginCS
// (Native, Event, Public, Protected, BlueprintEvent, Const)
// Parameters:
// struct FUStGSNotifyParam                NotifyParam                                            (Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
// float                                   TotalDuration                                          (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UBANS_GSSetAMSpeedRate::GSNotifyBeginCS(const struct FUStGSNotifyParam& NotifyParam, float TotalDuration) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BANS_GSSetAMSpeedRate", "GSNotifyBeginCS");

	Params::BANS_GSSetAMSpeedRate_GSNotifyBeginCS Parms{};

	Parms.NotifyParam = std::move(NotifyParam);
	Parms.TotalDuration = TotalDuration;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function b1-Managed.BANS_GSSetAMSpeedRate.GetAnimNSType
// (Native, Event, Public, HasOutParams, BlueprintEvent, Const)
// Parameters:
// EGsEnAnimNS                             ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

EGsEnAnimNS UBANS_GSSetAMSpeedRate::GetAnimNSType() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BANS_GSSetAMSpeedRate", "GetAnimNSType");

	Params::BANS_GSSetAMSpeedRate_GetAnimNSType Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function b1-Managed.BANS_GSSetAMSpeedRate.GSNotifyEndCS
// (Native, Event, Public, Protected, BlueprintEvent, Const)
// Parameters:
// struct FUStGSNotifyParam                NotifyParam                                            (Parm, ZeroConstructor, IsPlainOldData, NoDestructor)

void UBANS_GSSetAMSpeedRate::GSNotifyEndCS(const struct FUStGSNotifyParam& NotifyParam) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BANS_GSSetAMSpeedRate", "GSNotifyEndCS");

	Params::BANS_GSSetAMSpeedRate_GSNotifyEndCS Parms{};

	Parms.NotifyParam = std::move(NotifyParam);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function b1-Managed.BANS_GSSetCompVisibility.GSNotifyBeginCS
// (Native, Event, Public, Protected, BlueprintEvent, Const)
// Parameters:
// struct FUStGSNotifyParam                NotifyParam                                            (Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
// float                                   TotalDuration                                          (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UBANS_GSSetCompVisibility::GSNotifyBeginCS(const struct FUStGSNotifyParam& NotifyParam, float TotalDuration) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BANS_GSSetCompVisibility", "GSNotifyBeginCS");

	Params::BANS_GSSetCompVisibility_GSNotifyBeginCS Parms{};

	Parms.NotifyParam = std::move(NotifyParam);
	Parms.TotalDuration = TotalDuration;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function b1-Managed.BANS_GSSetCompVisibility.GSNotifyTickCS
// (Native, Event, Public, Protected, BlueprintEvent, Const)
// Parameters:
// struct FUStGSNotifyParam                NotifyParam                                            (Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
// float                                   FrameDeltaTime                                         (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UBANS_GSSetCompVisibility::GSNotifyTickCS(const struct FUStGSNotifyParam& NotifyParam, float FrameDeltaTime) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BANS_GSSetCompVisibility", "GSNotifyTickCS");

	Params::BANS_GSSetCompVisibility_GSNotifyTickCS Parms{};

	Parms.NotifyParam = std::move(NotifyParam);
	Parms.FrameDeltaTime = FrameDeltaTime;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function b1-Managed.BANS_GSSetCompVisibility.GSNotifyEndCS
// (Native, Event, Public, Protected, BlueprintEvent, Const)
// Parameters:
// struct FUStGSNotifyParam                NotifyParam                                            (Parm, ZeroConstructor, IsPlainOldData, NoDestructor)

void UBANS_GSSetCompVisibility::GSNotifyEndCS(const struct FUStGSNotifyParam& NotifyParam) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BANS_GSSetCompVisibility", "GSNotifyEndCS");

	Params::BANS_GSSetCompVisibility_GSNotifyEndCS Parms{};

	Parms.NotifyParam = std::move(NotifyParam);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function b1-Managed.BED_ComboNode_Skill.GetNodeDescriptionInCS
// (Native, Event, Public, HasOutParams, BlueprintEvent, Const)
// Parameters:
// class FString                           ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash)

class FString UBED_ComboNode_Skill::GetNodeDescriptionInCS() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BED_ComboNode_Skill", "GetNodeDescriptionInCS");

	Params::BED_ComboNode_Skill_GetNodeDescriptionInCS Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function b1-Managed.BANS_GSSlowTime.GSNotifyBeginCS
// (Native, Event, Public, Protected, BlueprintEvent, Const)
// Parameters:
// struct FUStGSNotifyParam                NotifyParam                                            (Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
// float                                   TotalDuration                                          (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UBANS_GSSlowTime::GSNotifyBeginCS(const struct FUStGSNotifyParam& NotifyParam, float TotalDuration) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BANS_GSSlowTime", "GSNotifyBeginCS");

	Params::BANS_GSSlowTime_GSNotifyBeginCS Parms{};

	Parms.NotifyParam = std::move(NotifyParam);
	Parms.TotalDuration = TotalDuration;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function b1-Managed.BANS_GSSpawnBullets.GSValidateInputCS
// (Native, Event, Public, BlueprintEvent, Const)
// Parameters:
// class AActor*                           InActor                                                (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UBANS_GSSpawnBullets::GSValidateInputCS(class AActor* InActor) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BANS_GSSpawnBullets", "GSValidateInputCS");

	Params::BANS_GSSpawnBullets_GSValidateInputCS Parms{};

	Parms.InActor = InActor;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function b1-Managed.BANS_GSSpawnBullets.GSNotifyBeginCS
// (Native, Event, Public, Protected, BlueprintEvent, Const)
// Parameters:
// struct FUStGSNotifyParam                NotifyParam                                            (Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
// float                                   TotalDuration                                          (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UBANS_GSSpawnBullets::GSNotifyBeginCS(const struct FUStGSNotifyParam& NotifyParam, float TotalDuration) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BANS_GSSpawnBullets", "GSNotifyBeginCS");

	Params::BANS_GSSpawnBullets_GSNotifyBeginCS Parms{};

	Parms.NotifyParam = std::move(NotifyParam);
	Parms.TotalDuration = TotalDuration;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function b1-Managed.BANS_GSSpawnBullets.GSNotifyEndCS
// (Native, Event, Public, Protected, BlueprintEvent, Const)
// Parameters:
// struct FUStGSNotifyParam                NotifyParam                                            (Parm, ZeroConstructor, IsPlainOldData, NoDestructor)

void UBANS_GSSpawnBullets::GSNotifyEndCS(const struct FUStGSNotifyParam& NotifyParam) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BANS_GSSpawnBullets", "GSNotifyEndCS");

	Params::BANS_GSSpawnBullets_GSNotifyEndCS Parms{};

	Parms.NotifyParam = std::move(NotifyParam);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function b1-Managed.BANS_GSSpawnBullets.MarkDirty
// (Native, Public, HasOutParams, BlueprintCallable, Const)
// Parameters:
// uint8                                   ReturnValue                                            (Parm, OutParm, ReturnParm, NoDestructor, HasGetValueTypeHash)

uint8 UBANS_GSSpawnBullets::MarkDirty() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BANS_GSSpawnBullets", "MarkDirty");

	Params::BANS_GSSpawnBullets_MarkDirty Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function b1-Managed.BGW_GameInstance_B1.ProcessNianHuiLogic
// (Native, Event, Public, BlueprintEvent)

void UBGW_GameInstance_B1::ProcessNianHuiLogic()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BGW_GameInstance_B1", "ProcessNianHuiLogic");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function b1-Managed.BGW_GameInstance_B1.ReceiveInit
// (Native, Event, Public, BlueprintEvent)

void UBGW_GameInstance_B1::ReceiveInit()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BGW_GameInstance_B1", "ReceiveInit");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function b1-Managed.BANS_GSSwitchPlayerCamID.GSNotifyBeginCS
// (Native, Event, Public, Protected, BlueprintEvent, Const)
// Parameters:
// struct FUStGSNotifyParam                NotifyParam                                            (Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
// float                                   TotalDuration                                          (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UBANS_GSSwitchPlayerCamID::GSNotifyBeginCS(const struct FUStGSNotifyParam& NotifyParam, float TotalDuration) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BANS_GSSwitchPlayerCamID", "GSNotifyBeginCS");

	Params::BANS_GSSwitchPlayerCamID_GSNotifyBeginCS Parms{};

	Parms.NotifyParam = std::move(NotifyParam);
	Parms.TotalDuration = TotalDuration;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function b1-Managed.BANS_GSSwitchPlayerCamID.GSNotifyEndCS
// (Native, Event, Public, Protected, BlueprintEvent, Const)
// Parameters:
// struct FUStGSNotifyParam                NotifyParam                                            (Parm, ZeroConstructor, IsPlainOldData, NoDestructor)

void UBANS_GSSwitchPlayerCamID::GSNotifyEndCS(const struct FUStGSNotifyParam& NotifyParam) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BANS_GSSwitchPlayerCamID", "GSNotifyEndCS");

	Params::BANS_GSSwitchPlayerCamID_GSNotifyEndCS Parms{};

	Parms.NotifyParam = std::move(NotifyParam);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function b1-Managed.BANS_GSTestIn426.GSNotifyBeginCS
// (Native, Event, Public, Protected, BlueprintEvent, Const)
// Parameters:
// struct FUStGSNotifyParam                NotifyParam                                            (Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
// float                                   TotalDuration                                          (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UBANS_GSTestIn426::GSNotifyBeginCS(const struct FUStGSNotifyParam& NotifyParam, float TotalDuration) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BANS_GSTestIn426", "GSNotifyBeginCS");

	Params::BANS_GSTestIn426_GSNotifyBeginCS Parms{};

	Parms.NotifyParam = std::move(NotifyParam);
	Parms.TotalDuration = TotalDuration;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function b1-Managed.BANS_GSTestIn426.GSNotifyTickCS
// (Native, Event, Public, Protected, BlueprintEvent, Const)
// Parameters:
// struct FUStGSNotifyParam                NotifyParam                                            (Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
// float                                   FrameDeltaTime                                         (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UBANS_GSTestIn426::GSNotifyTickCS(const struct FUStGSNotifyParam& NotifyParam, float FrameDeltaTime) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BANS_GSTestIn426", "GSNotifyTickCS");

	Params::BANS_GSTestIn426_GSNotifyTickCS Parms{};

	Parms.NotifyParam = std::move(NotifyParam);
	Parms.FrameDeltaTime = FrameDeltaTime;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function b1-Managed.BANS_GSTestIn426.GSNotifyEndCS
// (Native, Event, Public, Protected, BlueprintEvent, Const)
// Parameters:
// struct FUStGSNotifyParam                NotifyParam                                            (Parm, ZeroConstructor, IsPlainOldData, NoDestructor)

void UBANS_GSTestIn426::GSNotifyEndCS(const struct FUStGSNotifyParam& NotifyParam) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BANS_GSTestIn426", "GSNotifyEndCS");

	Params::BANS_GSTestIn426_GSNotifyEndCS Parms{};

	Parms.NotifyParam = std::move(NotifyParam);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function b1-Managed.BANS_GSWeaponAimTo.GSNotifyBeginCS
// (Native, Event, Public, Protected, BlueprintEvent, Const)
// Parameters:
// struct FUStGSNotifyParam                NotifyParam                                            (Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
// float                                   TotalDuration                                          (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UBANS_GSWeaponAimTo::GSNotifyBeginCS(const struct FUStGSNotifyParam& NotifyParam, float TotalDuration) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BANS_GSWeaponAimTo", "GSNotifyBeginCS");

	Params::BANS_GSWeaponAimTo_GSNotifyBeginCS Parms{};

	Parms.NotifyParam = std::move(NotifyParam);
	Parms.TotalDuration = TotalDuration;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function b1-Managed.BANS_GSWeaponAimTo.GSNotifyEndCS
// (Native, Event, Public, Protected, BlueprintEvent, Const)
// Parameters:
// struct FUStGSNotifyParam                NotifyParam                                            (Parm, ZeroConstructor, IsPlainOldData, NoDestructor)

void UBANS_GSWeaponAimTo::GSNotifyEndCS(const struct FUStGSNotifyParam& NotifyParam) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BANS_GSWeaponAimTo", "GSNotifyEndCS");

	Params::BANS_GSWeaponAimTo_GSNotifyEndCS Parms{};

	Parms.NotifyParam = std::move(NotifyParam);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function b1-Managed.BANS_GSWeponHide.GSNotifyBeginCS
// (Native, Event, Public, Protected, BlueprintEvent, Const)
// Parameters:
// struct FUStGSNotifyParam                NotifyParam                                            (Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
// float                                   TotalDuration                                          (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UBANS_GSWeponHide::GSNotifyBeginCS(const struct FUStGSNotifyParam& NotifyParam, float TotalDuration) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BANS_GSWeponHide", "GSNotifyBeginCS");

	Params::BANS_GSWeponHide_GSNotifyBeginCS Parms{};

	Parms.NotifyParam = std::move(NotifyParam);
	Parms.TotalDuration = TotalDuration;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function b1-Managed.BANS_GSWeponHide.GSNotifyEndCS
// (Native, Event, Public, Protected, BlueprintEvent, Const)
// Parameters:
// struct FUStGSNotifyParam                NotifyParam                                            (Parm, ZeroConstructor, IsPlainOldData, NoDestructor)

void UBANS_GSWeponHide::GSNotifyEndCS(const struct FUStGSNotifyParam& NotifyParam) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BANS_GSWeponHide", "GSNotifyEndCS");

	Params::BANS_GSWeponHide_GSNotifyEndCS Parms{};

	Parms.NotifyParam = std::move(NotifyParam);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function b1-Managed.BGU_ValidateMgrFuncLib.ImArtDev
// (Native, Static, Public, BlueprintCallable)
// Parameters:
// class AActor*                           Actor                                                  (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UBGU_ValidateMgrFuncLib::ImArtDev(class AActor* Actor)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("BGU_ValidateMgrFuncLib", "ImArtDev");

	Params::BGU_ValidateMgrFuncLib_ImArtDev Parms{};

	Parms.Actor = Actor;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function b1-Managed.BANS_PlayRotAMByCamRotInAM.GSNotifyBeginCS
// (Native, Event, Public, Protected, BlueprintEvent, Const)
// Parameters:
// struct FUStGSNotifyParam                NotifyParam                                            (Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
// float                                   TotalDuration                                          (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UBANS_PlayRotAMByCamRotInAM::GSNotifyBeginCS(const struct FUStGSNotifyParam& NotifyParam, float TotalDuration) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BANS_PlayRotAMByCamRotInAM", "GSNotifyBeginCS");

	Params::BANS_PlayRotAMByCamRotInAM_GSNotifyBeginCS Parms{};

	Parms.NotifyParam = std::move(NotifyParam);
	Parms.TotalDuration = TotalDuration;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function b1-Managed.BANS_PlayRotAMByCamRotInAM.GSNotifyTickCS
// (Native, Event, Public, Protected, BlueprintEvent, Const)
// Parameters:
// struct FUStGSNotifyParam                NotifyParam                                            (Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
// float                                   FrameDeltaTime                                         (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UBANS_PlayRotAMByCamRotInAM::GSNotifyTickCS(const struct FUStGSNotifyParam& NotifyParam, float FrameDeltaTime) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BANS_PlayRotAMByCamRotInAM", "GSNotifyTickCS");

	Params::BANS_PlayRotAMByCamRotInAM_GSNotifyTickCS Parms{};

	Parms.NotifyParam = std::move(NotifyParam);
	Parms.FrameDeltaTime = FrameDeltaTime;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function b1-Managed.BANS_PlayRotAMByCamRotInAM.GSNotifyEndCS
// (Native, Event, Public, Protected, BlueprintEvent, Const)
// Parameters:
// struct FUStGSNotifyParam                NotifyParam                                            (Parm, ZeroConstructor, IsPlainOldData, NoDestructor)

void UBANS_PlayRotAMByCamRotInAM::GSNotifyEndCS(const struct FUStGSNotifyParam& NotifyParam) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BANS_PlayRotAMByCamRotInAM", "GSNotifyEndCS");

	Params::BANS_PlayRotAMByCamRotInAM_GSNotifyEndCS Parms{};

	Parms.NotifyParam = std::move(NotifyParam);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function b1-Managed.BANS_SetCurveValueToHair.GetAnimNSType
// (Native, Event, Public, HasOutParams, BlueprintEvent, Const)
// Parameters:
// EGsEnAnimNS                             ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

EGsEnAnimNS UBANS_SetCurveValueToHair::GetAnimNSType() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BANS_SetCurveValueToHair", "GetAnimNSType");

	Params::BANS_SetCurveValueToHair_GetAnimNSType Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function b1-Managed.BED_ProcessMachineNode_Battle.GetContextOutputsInCS
// (Native, Event, Public, HasOutParams, BlueprintEvent)
// Parameters:
// TArray<class FName>                     ReturnValue                                            (Parm, OutParm, ReturnParm)

TArray<class FName> UBED_ProcessMachineNode_Battle::GetContextOutputsInCS()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BED_ProcessMachineNode_Battle", "GetContextOutputsInCS");

	Params::BED_ProcessMachineNode_Battle_GetContextOutputsInCS Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function b1-Managed.BANS_SetMPCParam.GSNotifyBeginCS
// (Native, Event, Public, Protected, BlueprintEvent, Const)
// Parameters:
// struct FUStGSNotifyParam                NotifyParam                                            (Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
// float                                   TotalDuration                                          (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UBANS_SetMPCParam::GSNotifyBeginCS(const struct FUStGSNotifyParam& NotifyParam, float TotalDuration) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BANS_SetMPCParam", "GSNotifyBeginCS");

	Params::BANS_SetMPCParam_GSNotifyBeginCS Parms{};

	Parms.NotifyParam = std::move(NotifyParam);
	Parms.TotalDuration = TotalDuration;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function b1-Managed.BANS_SwicthMoveState.GSNotifyBeginCS
// (Native, Event, Public, Protected, BlueprintEvent, Const)
// Parameters:
// struct FUStGSNotifyParam                NotifyParam                                            (Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
// float                                   TotalDuration                                          (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UBANS_SwicthMoveState::GSNotifyBeginCS(const struct FUStGSNotifyParam& NotifyParam, float TotalDuration) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BANS_SwicthMoveState", "GSNotifyBeginCS");

	Params::BANS_SwicthMoveState_GSNotifyBeginCS Parms{};

	Parms.NotifyParam = std::move(NotifyParam);
	Parms.TotalDuration = TotalDuration;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function b1-Managed.BANS_SwicthMoveState.GSNotifyEndCS
// (Native, Event, Public, Protected, BlueprintEvent, Const)
// Parameters:
// struct FUStGSNotifyParam                NotifyParam                                            (Parm, ZeroConstructor, IsPlainOldData, NoDestructor)

void UBANS_SwicthMoveState::GSNotifyEndCS(const struct FUStGSNotifyParam& NotifyParam) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BANS_SwicthMoveState", "GSNotifyEndCS");

	Params::BANS_SwicthMoveState_GSNotifyEndCS Parms{};

	Parms.NotifyParam = std::move(NotifyParam);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function b1-Managed.BAN_EnterSkillCameraGroup.bIsNativeBranchingPointCS
// (Native, Event, Public, HasOutParams, BlueprintEvent, Const)
// Parameters:
// uint8                                   ReturnValue                                            (Parm, OutParm, ReturnParm, NoDestructor, HasGetValueTypeHash)

uint8 UBAN_EnterSkillCameraGroup::bIsNativeBranchingPointCS() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BAN_EnterSkillCameraGroup", "bIsNativeBranchingPointCS");

	Params::BAN_EnterSkillCameraGroup_bIsNativeBranchingPointCS Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function b1-Managed.BAN_EnterSkillCameraGroup.GSNotifyCS
// (Native, Event, Public, Protected, BlueprintEvent, Const)
// Parameters:
// struct FUStGSNotifyParam                NotifyParam                                            (Parm, ZeroConstructor, IsPlainOldData, NoDestructor)

void UBAN_EnterSkillCameraGroup::GSNotifyCS(const struct FUStGSNotifyParam& NotifyParam) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BAN_EnterSkillCameraGroup", "GSNotifyCS");

	Params::BAN_EnterSkillCameraGroup_GSNotifyCS Parms{};

	Parms.NotifyParam = std::move(NotifyParam);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function b1-Managed.BED_ProcessMachineNode_Story.GetNodeDescriptionInCS
// (Native, Event, Public, HasOutParams, BlueprintEvent, Const)
// Parameters:
// class FString                           ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash)

class FString UBED_ProcessMachineNode_Story::GetNodeDescriptionInCS() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BED_ProcessMachineNode_Story", "GetNodeDescriptionInCS");

	Params::BED_ProcessMachineNode_Story_GetNodeDescriptionInCS Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function b1-Managed.BANS_GSHandleBattleMessage.bIsNativeBranchingPointCS
// (Native, Event, Public, HasOutParams, BlueprintEvent, Const)
// Parameters:
// uint8                                   ReturnValue                                            (Parm, OutParm, ReturnParm, NoDestructor, HasGetValueTypeHash)

uint8 UBANS_GSHandleBattleMessage::bIsNativeBranchingPointCS() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BANS_GSHandleBattleMessage", "bIsNativeBranchingPointCS");

	Params::BANS_GSHandleBattleMessage_bIsNativeBranchingPointCS Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function b1-Managed.BANS_GSHandleBattleMessage.GSNotifyCS
// (Native, Event, Public, Protected, BlueprintEvent, Const)
// Parameters:
// struct FUStGSNotifyParam                NotifyParam                                            (Parm, ZeroConstructor, IsPlainOldData, NoDestructor)

void UBANS_GSHandleBattleMessage::GSNotifyCS(const struct FUStGSNotifyParam& NotifyParam) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BANS_GSHandleBattleMessage", "GSNotifyCS");

	Params::BANS_GSHandleBattleMessage_GSNotifyCS Parms{};

	Parms.NotifyParam = std::move(NotifyParam);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function b1-Managed.BAN_GSSummonUnit.GSNotifyCS
// (Native, Event, Public, Protected, BlueprintEvent, Const)
// Parameters:
// struct FUStGSNotifyParam                NotifyParam                                            (Parm, ZeroConstructor, IsPlainOldData, NoDestructor)

void UBAN_GSSummonUnit::GSNotifyCS(const struct FUStGSNotifyParam& NotifyParam) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BAN_GSSummonUnit", "GSNotifyCS");

	Params::BAN_GSSummonUnit_GSNotifyCS Parms{};

	Parms.NotifyParam = std::move(NotifyParam);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function b1-Managed.BAN_ShowMapTips.GSNotifyCS
// (Native, Event, Public, Protected, BlueprintEvent, Const)
// Parameters:
// struct FUStGSNotifyParam                NotifyParam                                            (Parm, ZeroConstructor, IsPlainOldData, NoDestructor)

void UBAN_ShowMapTips::GSNotifyCS(const struct FUStGSNotifyParam& NotifyParam) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BAN_ShowMapTips", "GSNotifyCS");

	Params::BAN_ShowMapTips_GSNotifyCS Parms{};

	Parms.NotifyParam = std::move(NotifyParam);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function b1-Managed.BANS_SpawnFXByDispConfig.GSNotifyBeginCS
// (Native, Event, Public, Protected, BlueprintEvent, Const)
// Parameters:
// struct FUStGSNotifyParam                NotifyParam                                            (Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
// float                                   TotalDuration                                          (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UBANS_SpawnFXByDispConfig::GSNotifyBeginCS(const struct FUStGSNotifyParam& NotifyParam, float TotalDuration) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BANS_SpawnFXByDispConfig", "GSNotifyBeginCS");

	Params::BANS_SpawnFXByDispConfig_GSNotifyBeginCS Parms{};

	Parms.NotifyParam = std::move(NotifyParam);
	Parms.TotalDuration = TotalDuration;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function b1-Managed.BANS_SpawnFXByDispConfig.GSNotifyEndCS
// (Native, Event, Public, Protected, BlueprintEvent, Const)
// Parameters:
// struct FUStGSNotifyParam                NotifyParam                                            (Parm, ZeroConstructor, IsPlainOldData, NoDestructor)

void UBANS_SpawnFXByDispConfig::GSNotifyEndCS(const struct FUStGSNotifyParam& NotifyParam) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BANS_SpawnFXByDispConfig", "GSNotifyEndCS");

	Params::BANS_SpawnFXByDispConfig_GSNotifyEndCS Parms{};

	Parms.NotifyParam = std::move(NotifyParam);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function b1-Managed.BANS_SweepHitSceneItems.GSNotifyBeginCS
// (Native, Event, Public, Protected, BlueprintEvent, Const)
// Parameters:
// struct FUStGSNotifyParam                NotifyParam                                            (Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
// float                                   TotalDuration                                          (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UBANS_SweepHitSceneItems::GSNotifyBeginCS(const struct FUStGSNotifyParam& NotifyParam, float TotalDuration) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BANS_SweepHitSceneItems", "GSNotifyBeginCS");

	Params::BANS_SweepHitSceneItems_GSNotifyBeginCS Parms{};

	Parms.NotifyParam = std::move(NotifyParam);
	Parms.TotalDuration = TotalDuration;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function b1-Managed.BANS_SweepHitSceneItems.GSNotifyTickCS
// (Native, Event, Public, Protected, BlueprintEvent, Const)
// Parameters:
// struct FUStGSNotifyParam                NotifyParam                                            (Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
// float                                   FrameDeltaTime                                         (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UBANS_SweepHitSceneItems::GSNotifyTickCS(const struct FUStGSNotifyParam& NotifyParam, float FrameDeltaTime) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BANS_SweepHitSceneItems", "GSNotifyTickCS");

	Params::BANS_SweepHitSceneItems_GSNotifyTickCS Parms{};

	Parms.NotifyParam = std::move(NotifyParam);
	Parms.FrameDeltaTime = FrameDeltaTime;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function b1-Managed.BANS_SweepHitSceneItems.GSNotifyEndCS
// (Native, Event, Public, Protected, BlueprintEvent, Const)
// Parameters:
// struct FUStGSNotifyParam                NotifyParam                                            (Parm, ZeroConstructor, IsPlainOldData, NoDestructor)

void UBANS_SweepHitSceneItems::GSNotifyEndCS(const struct FUStGSNotifyParam& NotifyParam) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BANS_SweepHitSceneItems", "GSNotifyEndCS");

	Params::BANS_SweepHitSceneItems_GSNotifyEndCS Parms{};

	Parms.NotifyParam = std::move(NotifyParam);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function b1-Managed.GSSecondOrderDynamicsUtil.CurSecOrdDynUpdate
// (Native, Static, Public, HasOutParams, BlueprintCallable)
// Parameters:
// float                                   T                                                      (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// float                                   X                                                      (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// float                                   XD                                                     (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// float                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

float UGSSecondOrderDynamicsUtil::CurSecOrdDynUpdate(float T, float X, float XD)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("GSSecondOrderDynamicsUtil", "CurSecOrdDynUpdate");

	Params::GSSecondOrderDynamicsUtil_CurSecOrdDynUpdate Parms{};

	Parms.T = T;
	Parms.X = X;
	Parms.XD = XD;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function b1-Managed.GSSecondOrderDynamicsUtil.InitCurSecOrdDyn
// (Native, Static, Public, BlueprintCallable)
// Parameters:
// float                                   F                                                      (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// float                                   Z                                                      (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// float                                   R                                                      (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// float                                   X0                                                     (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UGSSecondOrderDynamicsUtil::InitCurSecOrdDyn(float F, float Z, float R, float X0)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("GSSecondOrderDynamicsUtil", "InitCurSecOrdDyn");

	Params::GSSecondOrderDynamicsUtil_InitCurSecOrdDyn Parms{};

	Parms.F = F;
	Parms.Z = Z;
	Parms.R = R;
	Parms.X0 = X0;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function b1-Managed.BANS_GSSyncAnimations.GSNotifyBeginCS
// (Native, Event, Public, Protected, BlueprintEvent, Const)
// Parameters:
// struct FUStGSNotifyParam                NotifyParam                                            (Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
// float                                   TotalDuration                                          (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UBANS_GSSyncAnimations::GSNotifyBeginCS(const struct FUStGSNotifyParam& NotifyParam, float TotalDuration) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BANS_GSSyncAnimations", "GSNotifyBeginCS");

	Params::BANS_GSSyncAnimations_GSNotifyBeginCS Parms{};

	Parms.NotifyParam = std::move(NotifyParam);
	Parms.TotalDuration = TotalDuration;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function b1-Managed.BANS_GSSyncAnimations.GSNotifyTickCS
// (Native, Event, Public, Protected, BlueprintEvent, Const)
// Parameters:
// struct FUStGSNotifyParam                NotifyParam                                            (Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
// float                                   FrameDeltaTime                                         (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UBANS_GSSyncAnimations::GSNotifyTickCS(const struct FUStGSNotifyParam& NotifyParam, float FrameDeltaTime) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BANS_GSSyncAnimations", "GSNotifyTickCS");

	Params::BANS_GSSyncAnimations_GSNotifyTickCS Parms{};

	Parms.NotifyParam = std::move(NotifyParam);
	Parms.FrameDeltaTime = FrameDeltaTime;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function b1-Managed.BANS_GSSyncAnimations.GetAnimNSType
// (Native, Event, Public, HasOutParams, BlueprintEvent, Const)
// Parameters:
// EGsEnAnimNS                             ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

EGsEnAnimNS UBANS_GSSyncAnimations::GetAnimNSType() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BANS_GSSyncAnimations", "GetAnimNSType");

	Params::BANS_GSSyncAnimations_GetAnimNSType Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function b1-Managed.BANS_GSSyncAnimations.GSNotifyEndCS
// (Native, Event, Public, Protected, BlueprintEvent, Const)
// Parameters:
// struct FUStGSNotifyParam                NotifyParam                                            (Parm, ZeroConstructor, IsPlainOldData, NoDestructor)

void UBANS_GSSyncAnimations::GSNotifyEndCS(const struct FUStGSNotifyParam& NotifyParam) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BANS_GSSyncAnimations", "GSNotifyEndCS");

	Params::BANS_GSSyncAnimations_GSNotifyEndCS Parms{};

	Parms.NotifyParam = std::move(NotifyParam);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function b1-Managed.BANS_TriggerSkillCameraGroup.GSNotifyBeginCS
// (Native, Event, Public, Protected, BlueprintEvent, Const)
// Parameters:
// struct FUStGSNotifyParam                NotifyParam                                            (Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
// float                                   TotalDuration                                          (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UBANS_TriggerSkillCameraGroup::GSNotifyBeginCS(const struct FUStGSNotifyParam& NotifyParam, float TotalDuration) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BANS_TriggerSkillCameraGroup", "GSNotifyBeginCS");

	Params::BANS_TriggerSkillCameraGroup_GSNotifyBeginCS Parms{};

	Parms.NotifyParam = std::move(NotifyParam);
	Parms.TotalDuration = TotalDuration;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function b1-Managed.BANS_TriggerSkillCameraGroup.GSNotifyEndCS
// (Native, Event, Public, Protected, BlueprintEvent, Const)
// Parameters:
// struct FUStGSNotifyParam                NotifyParam                                            (Parm, ZeroConstructor, IsPlainOldData, NoDestructor)

void UBANS_TriggerSkillCameraGroup::GSNotifyEndCS(const struct FUStGSNotifyParam& NotifyParam) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BANS_TriggerSkillCameraGroup", "GSNotifyEndCS");

	Params::BANS_TriggerSkillCameraGroup_GSNotifyEndCS Parms{};

	Parms.NotifyParam = std::move(NotifyParam);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function b1-Managed.BED_BehaviorNode_MulticastCachedPointSet.GetNodeDescriptionInCS
// (Native, Event, Public, HasOutParams, BlueprintEvent, Const)
// Parameters:
// class FString                           ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash)

class FString UBED_BehaviorNode_MulticastCachedPointSet::GetNodeDescriptionInCS() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BED_BehaviorNode_MulticastCachedPointSet", "GetNodeDescriptionInCS");

	Params::BED_BehaviorNode_MulticastCachedPointSet_GetNodeDescriptionInCS Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function b1-Managed.BANS_GSAttachDropItemToSocket.GSNotifyBeginCS
// (Native, Event, Public, Protected, BlueprintEvent, Const)
// Parameters:
// struct FUStGSNotifyParam                NotifyParam                                            (Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
// float                                   TotalDuration                                          (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UBANS_GSAttachDropItemToSocket::GSNotifyBeginCS(const struct FUStGSNotifyParam& NotifyParam, float TotalDuration) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BANS_GSAttachDropItemToSocket", "GSNotifyBeginCS");

	Params::BANS_GSAttachDropItemToSocket_GSNotifyBeginCS Parms{};

	Parms.NotifyParam = std::move(NotifyParam);
	Parms.TotalDuration = TotalDuration;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function b1-Managed.BANS_GSAttachDropItemToSocket.GSNotifyEndCS
// (Native, Event, Public, Protected, BlueprintEvent, Const)
// Parameters:
// struct FUStGSNotifyParam                NotifyParam                                            (Parm, ZeroConstructor, IsPlainOldData, NoDestructor)

void UBANS_GSAttachDropItemToSocket::GSNotifyEndCS(const struct FUStGSNotifyParam& NotifyParam) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BANS_GSAttachDropItemToSocket", "GSNotifyEndCS");

	Params::BANS_GSAttachDropItemToSocket_GSNotifyEndCS Parms{};

	Parms.NotifyParam = std::move(NotifyParam);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function b1-Managed.BED_ProcessMachineNode_State.GetBranchGraphToEditInCS
// (Native, Event, Public, HasOutParams, BlueprintEvent)
// Parameters:
// class FString                           OutBranchGraphIdentifier                               (Parm, OutParm, ZeroConstructor, HasGetValueTypeHash)
// uint8                                   ReturnValue                                            (Parm, OutParm, ReturnParm, NoDestructor, HasGetValueTypeHash)

uint8 UBED_ProcessMachineNode_State::GetBranchGraphToEditInCS(class FString* OutBranchGraphIdentifier)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BED_ProcessMachineNode_State", "GetBranchGraphToEditInCS");

	Params::BED_ProcessMachineNode_State_GetBranchGraphToEditInCS Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	if (OutBranchGraphIdentifier != nullptr)
		*OutBranchGraphIdentifier = std::move(Parms.OutBranchGraphIdentifier);

	return Parms.ReturnValue;
}


// Function b1-Managed.BED_ProcessMachineNode_State.GetContextOutputsInCS
// (Native, Event, Public, HasOutParams, BlueprintEvent)
// Parameters:
// TArray<class FName>                     ReturnValue                                            (Parm, OutParm, ReturnParm)

TArray<class FName> UBED_ProcessMachineNode_State::GetContextOutputsInCS()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BED_ProcessMachineNode_State", "GetContextOutputsInCS");

	Params::BED_ProcessMachineNode_State_GetContextOutputsInCS Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function b1-Managed.BED_ProcessMachineNode_State.PostPropertyChanged
// (Native, Event, Public, BlueprintEvent)
// Parameters:
// class FString                           MemberName                                             (Parm, ZeroConstructor, HasGetValueTypeHash)
// class FString                           PropertyName                                           (Parm, ZeroConstructor, HasGetValueTypeHash)

void UBED_ProcessMachineNode_State::PostPropertyChanged(const class FString& MemberName, const class FString& PropertyName)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BED_ProcessMachineNode_State", "PostPropertyChanged");

	Params::BED_ProcessMachineNode_State_PostPropertyChanged Parms{};

	Parms.MemberName = std::move(MemberName);
	Parms.PropertyName = std::move(PropertyName);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function b1-Managed.BED_ProcessMachineNode_State.GetNodeDescriptionInCS
// (Native, Event, Public, HasOutParams, BlueprintEvent, Const)
// Parameters:
// class FString                           ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash)

class FString UBED_ProcessMachineNode_State::GetNodeDescriptionInCS() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BED_ProcessMachineNode_State", "GetNodeDescriptionInCS");

	Params::BED_ProcessMachineNode_State_GetNodeDescriptionInCS Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function b1-Managed.BAN_GSCollectTrigger.bIsNativeBranchingPointCS
// (Native, Event, Public, HasOutParams, BlueprintEvent, Const)
// Parameters:
// uint8                                   ReturnValue                                            (Parm, OutParm, ReturnParm, NoDestructor, HasGetValueTypeHash)

uint8 UBAN_GSCollectTrigger::bIsNativeBranchingPointCS() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BAN_GSCollectTrigger", "bIsNativeBranchingPointCS");

	Params::BAN_GSCollectTrigger_bIsNativeBranchingPointCS Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function b1-Managed.BAN_GSCollectTrigger.GSNotifyCS
// (Native, Event, Public, Protected, BlueprintEvent, Const)
// Parameters:
// struct FUStGSNotifyParam                NotifyParam                                            (Parm, ZeroConstructor, IsPlainOldData, NoDestructor)

void UBAN_GSCollectTrigger::GSNotifyCS(const struct FUStGSNotifyParam& NotifyParam) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BAN_GSCollectTrigger", "GSNotifyCS");

	Params::BAN_GSCollectTrigger_GSNotifyCS Parms{};

	Parms.NotifyParam = std::move(NotifyParam);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function b1-Managed.BAN_GSEndForcePerformance.bIsNativeBranchingPointCS
// (Native, Event, Public, HasOutParams, BlueprintEvent, Const)
// Parameters:
// uint8                                   ReturnValue                                            (Parm, OutParm, ReturnParm, NoDestructor, HasGetValueTypeHash)

uint8 UBAN_GSEndForcePerformance::bIsNativeBranchingPointCS() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BAN_GSEndForcePerformance", "bIsNativeBranchingPointCS");

	Params::BAN_GSEndForcePerformance_bIsNativeBranchingPointCS Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function b1-Managed.BAN_GSEndForcePerformance.GSNotifyCS
// (Native, Event, Public, Protected, BlueprintEvent, Const)
// Parameters:
// struct FUStGSNotifyParam                NotifyParam                                            (Parm, ZeroConstructor, IsPlainOldData, NoDestructor)

void UBAN_GSEndForcePerformance::GSNotifyCS(const struct FUStGSNotifyParam& NotifyParam) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BAN_GSEndForcePerformance", "GSNotifyCS");

	Params::BAN_GSEndForcePerformance_GSNotifyCS Parms{};

	Parms.NotifyParam = std::move(NotifyParam);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function b1-Managed.BED_QuestNode_BackToCheckPoint.GetNodeDescriptionInCS
// (Native, Event, Public, HasOutParams, BlueprintEvent, Const)
// Parameters:
// class FString                           ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash)

class FString UBED_QuestNode_BackToCheckPoint::GetNodeDescriptionInCS() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BED_QuestNode_BackToCheckPoint", "GetNodeDescriptionInCS");

	Params::BED_QuestNode_BackToCheckPoint_GetNodeDescriptionInCS Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function b1-Managed.BAN_GSSetSimpleState.GSNotifyCS
// (Native, Event, Public, Protected, BlueprintEvent, Const)
// Parameters:
// struct FUStGSNotifyParam                NotifyParam                                            (Parm, ZeroConstructor, IsPlainOldData, NoDestructor)

void UBAN_GSSetSimpleState::GSNotifyCS(const struct FUStGSNotifyParam& NotifyParam) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BAN_GSSetSimpleState", "GSNotifyCS");

	Params::BAN_GSSetSimpleState_GSNotifyCS Parms{};

	Parms.NotifyParam = std::move(NotifyParam);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function b1-Managed.BAN_GSAIJumpEnd.bIsNativeBranchingPointCS
// (Native, Event, Public, HasOutParams, BlueprintEvent, Const)
// Parameters:
// uint8                                   ReturnValue                                            (Parm, OutParm, ReturnParm, NoDestructor, HasGetValueTypeHash)

uint8 UBAN_GSAIJumpEnd::bIsNativeBranchingPointCS() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BAN_GSAIJumpEnd", "bIsNativeBranchingPointCS");

	Params::BAN_GSAIJumpEnd_bIsNativeBranchingPointCS Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function b1-Managed.BAN_GSAIJumpEnd.GSNotifyCS
// (Native, Event, Public, Protected, BlueprintEvent, Const)
// Parameters:
// struct FUStGSNotifyParam                NotifyParam                                            (Parm, ZeroConstructor, IsPlainOldData, NoDestructor)

void UBAN_GSAIJumpEnd::GSNotifyCS(const struct FUStGSNotifyParam& NotifyParam) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BAN_GSAIJumpEnd", "GSNotifyCS");

	Params::BAN_GSAIJumpEnd_GSNotifyCS Parms{};

	Parms.NotifyParam = std::move(NotifyParam);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function b1-Managed.BED_MovieNode_PerformerHiddenInGame.GetNodeDescriptionInCS
// (Native, Event, Public, HasOutParams, BlueprintEvent, Const)
// Parameters:
// class FString                           ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash)

class FString UBED_MovieNode_PerformerHiddenInGame::GetNodeDescriptionInCS() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BED_MovieNode_PerformerHiddenInGame", "GetNodeDescriptionInCS");

	Params::BED_MovieNode_PerformerHiddenInGame_GetNodeDescriptionInCS Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function b1-Managed.BAN_GSCallPointsRegister.bIsNativeBranchingPointCS
// (Native, Event, Public, HasOutParams, BlueprintEvent, Const)
// Parameters:
// uint8                                   ReturnValue                                            (Parm, OutParm, ReturnParm, NoDestructor, HasGetValueTypeHash)

uint8 UBAN_GSCallPointsRegister::bIsNativeBranchingPointCS() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BAN_GSCallPointsRegister", "bIsNativeBranchingPointCS");

	Params::BAN_GSCallPointsRegister_bIsNativeBranchingPointCS Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function b1-Managed.BAN_GSCallPointsRegister.GSNotifyCS
// (Native, Event, Public, Protected, BlueprintEvent, Const)
// Parameters:
// struct FUStGSNotifyParam                NotifyParam                                            (Parm, ZeroConstructor, IsPlainOldData, NoDestructor)

void UBAN_GSCallPointsRegister::GSNotifyCS(const struct FUStGSNotifyParam& NotifyParam) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BAN_GSCallPointsRegister", "GSNotifyCS");

	Params::BAN_GSCallPointsRegister_GSNotifyCS Parms{};

	Parms.NotifyParam = std::move(NotifyParam);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function b1-Managed.CanvasCoordTransMainWidget.OnTickCallback
// (Native, Public, BlueprintCallable)
// Parameters:
// float                                   DeltaTime                                              (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UCanvasCoordTransMainWidget::OnTickCallback(float DeltaTime)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CanvasCoordTransMainWidget", "OnTickCallback");

	Params::CanvasCoordTransMainWidget_OnTickCallback Parms{};

	Parms.DeltaTime = DeltaTime;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function b1-Managed.BANS_GSCallPointsRegister.GSNotifyBeginCS
// (Native, Event, Public, Protected, BlueprintEvent, Const)
// Parameters:
// struct FUStGSNotifyParam                NotifyParam                                            (Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
// float                                   TotalDuration                                          (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UBANS_GSCallPointsRegister::GSNotifyBeginCS(const struct FUStGSNotifyParam& NotifyParam, float TotalDuration) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BANS_GSCallPointsRegister", "GSNotifyBeginCS");

	Params::BANS_GSCallPointsRegister_GSNotifyBeginCS Parms{};

	Parms.NotifyParam = std::move(NotifyParam);
	Parms.TotalDuration = TotalDuration;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function b1-Managed.BED_QuestNode_PostAkEvent.GetNodeDescriptionInCS
// (Native, Event, Public, HasOutParams, BlueprintEvent, Const)
// Parameters:
// class FString                           ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash)

class FString UBED_QuestNode_PostAkEvent::GetNodeDescriptionInCS() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BED_QuestNode_PostAkEvent", "GetNodeDescriptionInCS");

	Params::BED_QuestNode_PostAkEvent_GetNodeDescriptionInCS Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function b1-Managed.BAN_GSIncreaseChargeLevel.bIsNativeBranchingPointCS
// (Native, Event, Public, HasOutParams, BlueprintEvent, Const)
// Parameters:
// uint8                                   ReturnValue                                            (Parm, OutParm, ReturnParm, NoDestructor, HasGetValueTypeHash)

uint8 UBAN_GSIncreaseChargeLevel::bIsNativeBranchingPointCS() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BAN_GSIncreaseChargeLevel", "bIsNativeBranchingPointCS");

	Params::BAN_GSIncreaseChargeLevel_bIsNativeBranchingPointCS Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function b1-Managed.BAN_GSIncreaseChargeLevel.GSNotifyCS
// (Native, Event, Public, Protected, BlueprintEvent, Const)
// Parameters:
// struct FUStGSNotifyParam                NotifyParam                                            (Parm, ZeroConstructor, IsPlainOldData, NoDestructor)

void UBAN_GSIncreaseChargeLevel::GSNotifyCS(const struct FUStGSNotifyParam& NotifyParam) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BAN_GSIncreaseChargeLevel", "GSNotifyCS");

	Params::BAN_GSIncreaseChargeLevel_GSNotifyCS Parms{};

	Parms.NotifyParam = std::move(NotifyParam);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function b1-Managed.BAN_GSAttachWeaponToSocket.bIsNativeBranchingPointCS
// (Native, Event, Public, HasOutParams, BlueprintEvent, Const)
// Parameters:
// uint8                                   ReturnValue                                            (Parm, OutParm, ReturnParm, NoDestructor, HasGetValueTypeHash)

uint8 UBAN_GSAttachWeaponToSocket::bIsNativeBranchingPointCS() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BAN_GSAttachWeaponToSocket", "bIsNativeBranchingPointCS");

	Params::BAN_GSAttachWeaponToSocket_bIsNativeBranchingPointCS Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function b1-Managed.BAN_GSAttachWeaponToSocket.GSNotifyCS
// (Native, Event, Public, Protected, BlueprintEvent, Const)
// Parameters:
// struct FUStGSNotifyParam                NotifyParam                                            (Parm, ZeroConstructor, IsPlainOldData, NoDestructor)

void UBAN_GSAttachWeaponToSocket::GSNotifyCS(const struct FUStGSNotifyParam& NotifyParam) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BAN_GSAttachWeaponToSocket", "GSNotifyCS");

	Params::BAN_GSAttachWeaponToSocket_GSNotifyCS Parms{};

	Parms.NotifyParam = std::move(NotifyParam);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function b1-Managed.BAN_GSAwakePartner.bIsNativeBranchingPointCS
// (Native, Event, Public, HasOutParams, BlueprintEvent, Const)
// Parameters:
// uint8                                   ReturnValue                                            (Parm, OutParm, ReturnParm, NoDestructor, HasGetValueTypeHash)

uint8 UBAN_GSAwakePartner::bIsNativeBranchingPointCS() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BAN_GSAwakePartner", "bIsNativeBranchingPointCS");

	Params::BAN_GSAwakePartner_bIsNativeBranchingPointCS Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function b1-Managed.BAN_GSAwakePartner.GSNotifyCS
// (Native, Event, Public, Protected, BlueprintEvent, Const)
// Parameters:
// struct FUStGSNotifyParam                NotifyParam                                            (Parm, ZeroConstructor, IsPlainOldData, NoDestructor)

void UBAN_GSAwakePartner::GSNotifyCS(const struct FUStGSNotifyParam& NotifyParam) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BAN_GSAwakePartner", "GSNotifyCS");

	Params::BAN_GSAwakePartner_GSNotifyCS Parms{};

	Parms.NotifyParam = std::move(NotifyParam);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function b1-Managed.BAN_GSB1SpawnDecalActor.GSNotifyCS
// (Native, Event, Public, Protected, BlueprintEvent, Const)
// Parameters:
// struct FUStGSNotifyParam                NotifyParam                                            (Parm, ZeroConstructor, IsPlainOldData, NoDestructor)

void UBAN_GSB1SpawnDecalActor::GSNotifyCS(const struct FUStGSNotifyParam& NotifyParam) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BAN_GSB1SpawnDecalActor", "GSNotifyCS");

	Params::BAN_GSB1SpawnDecalActor_GSNotifyCS Parms{};

	Parms.NotifyParam = std::move(NotifyParam);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function b1-Managed.BAN_GSCallMasterUseSkill.bIsNativeBranchingPointCS
// (Native, Event, Public, HasOutParams, BlueprintEvent, Const)
// Parameters:
// uint8                                   ReturnValue                                            (Parm, OutParm, ReturnParm, NoDestructor, HasGetValueTypeHash)

uint8 UBAN_GSCallMasterUseSkill::bIsNativeBranchingPointCS() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BAN_GSCallMasterUseSkill", "bIsNativeBranchingPointCS");

	Params::BAN_GSCallMasterUseSkill_bIsNativeBranchingPointCS Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function b1-Managed.BAN_GSCallMasterUseSkill.GSNotifyCS
// (Native, Event, Public, Protected, BlueprintEvent, Const)
// Parameters:
// struct FUStGSNotifyParam                NotifyParam                                            (Parm, ZeroConstructor, IsPlainOldData, NoDestructor)

void UBAN_GSCallMasterUseSkill::GSNotifyCS(const struct FUStGSNotifyParam& NotifyParam) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BAN_GSCallMasterUseSkill", "GSNotifyCS");

	Params::BAN_GSCallMasterUseSkill_GSNotifyCS Parms{};

	Parms.NotifyParam = std::move(NotifyParam);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function b1-Managed.BAN_GSDestroyFXCompByTag.GSNotifyCS
// (Native, Event, Public, Protected, BlueprintEvent, Const)
// Parameters:
// struct FUStGSNotifyParam                NotifyParam                                            (Parm, ZeroConstructor, IsPlainOldData, NoDestructor)

void UBAN_GSDestroyFXCompByTag::GSNotifyCS(const struct FUStGSNotifyParam& NotifyParam) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BAN_GSDestroyFXCompByTag", "GSNotifyCS");

	Params::BAN_GSDestroyFXCompByTag_GSNotifyCS Parms{};

	Parms.NotifyParam = std::move(NotifyParam);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function b1-Managed.BGUStaminaBarUIComp.TickComponentGS
// (Native, Event, Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// float                                   DeltaTime                                              (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UBGUStaminaBarUIComp::TickComponentGS(float DeltaTime)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BGUStaminaBarUIComp", "TickComponentGS");

	Params::BGUStaminaBarUIComp_TickComponentGS Parms{};

	Parms.DeltaTime = DeltaTime;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function b1-Managed.BGUStaminaBarUIComp.BeginPlayGS
// (Native, Event, Public, BlueprintEvent)

void UBGUStaminaBarUIComp::BeginPlayGS()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BGUStaminaBarUIComp", "BeginPlayGS");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function b1-Managed.BGUStaminaBarUIComp.SetGSEnabled
// (Native, Public, BlueprintCallable)
// Parameters:
// uint8                                   IsEnabled                                              (Parm, NoDestructor, HasGetValueTypeHash)

void UBGUStaminaBarUIComp::SetGSEnabled(uint8 IsEnabled)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BGUStaminaBarUIComp", "SetGSEnabled");

	Params::BGUStaminaBarUIComp_SetGSEnabled Parms{};

	Parms.IsEnabled = IsEnabled;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function b1-Managed.BAN_GSDetachWeapon.bIsNativeBranchingPointCS
// (Native, Event, Public, HasOutParams, BlueprintEvent, Const)
// Parameters:
// uint8                                   ReturnValue                                            (Parm, OutParm, ReturnParm, NoDestructor, HasGetValueTypeHash)

uint8 UBAN_GSDetachWeapon::bIsNativeBranchingPointCS() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BAN_GSDetachWeapon", "bIsNativeBranchingPointCS");

	Params::BAN_GSDetachWeapon_bIsNativeBranchingPointCS Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function b1-Managed.BAN_GSDetachWeapon.GSNotifyCS
// (Native, Event, Public, Protected, BlueprintEvent, Const)
// Parameters:
// struct FUStGSNotifyParam                NotifyParam                                            (Parm, ZeroConstructor, IsPlainOldData, NoDestructor)

void UBAN_GSDetachWeapon::GSNotifyCS(const struct FUStGSNotifyParam& NotifyParam) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BAN_GSDetachWeapon", "GSNotifyCS");

	Params::BAN_GSDetachWeapon_GSNotifyCS Parms{};

	Parms.NotifyParam = std::move(NotifyParam);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function b1-Managed.BAN_GSEnableAIPerception.bIsNativeBranchingPointCS
// (Native, Event, Public, HasOutParams, BlueprintEvent, Const)
// Parameters:
// uint8                                   ReturnValue                                            (Parm, OutParm, ReturnParm, NoDestructor, HasGetValueTypeHash)

uint8 UBAN_GSEnableAIPerception::bIsNativeBranchingPointCS() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BAN_GSEnableAIPerception", "bIsNativeBranchingPointCS");

	Params::BAN_GSEnableAIPerception_bIsNativeBranchingPointCS Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function b1-Managed.BAN_GSEnableAIPerception.GSNotifyCS
// (Native, Event, Public, Protected, BlueprintEvent, Const)
// Parameters:
// struct FUStGSNotifyParam                NotifyParam                                            (Parm, ZeroConstructor, IsPlainOldData, NoDestructor)

void UBAN_GSEnableAIPerception::GSNotifyCS(const struct FUStGSNotifyParam& NotifyParam) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BAN_GSEnableAIPerception", "GSNotifyCS");

	Params::BAN_GSEnableAIPerception_GSNotifyCS Parms{};

	Parms.NotifyParam = std::move(NotifyParam);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function b1-Managed.B1X2_DispWorld.ReceiveEndPlay
// (Native, Event, Public, Protected, BlueprintEvent)
// Parameters:
// EEndPlayReason                          EndPlayReason                                          (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void AB1X2_DispWorld::ReceiveEndPlay(EEndPlayReason EndPlayReason)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("B1X2_DispWorld", "ReceiveEndPlay");

	Params::B1X2_DispWorld_ReceiveEndPlay Parms{};

	Parms.EndPlayReason = EndPlayReason;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function b1-Managed.AnimNotify_GSFootStep_FootL.GSNotifyCS
// (Native, Event, Public, Protected, BlueprintEvent, Const)
// Parameters:
// struct FUStGSNotifyParam                NotifyParam                                            (Parm, ZeroConstructor, IsPlainOldData, NoDestructor)

void UAnimNotify_GSFootStep_FootL::GSNotifyCS(const struct FUStGSNotifyParam& NotifyParam) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("AnimNotify_GSFootStep_FootL", "GSNotifyCS");

	Params::AnimNotify_GSFootStep_FootL_GSNotifyCS Parms{};

	Parms.NotifyParam = std::move(NotifyParam);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function b1-Managed.AnimNotify_GSFootStep_FootR.GSNotifyCS
// (Native, Event, Public, Protected, BlueprintEvent, Const)
// Parameters:
// struct FUStGSNotifyParam                NotifyParam                                            (Parm, ZeroConstructor, IsPlainOldData, NoDestructor)

void UAnimNotify_GSFootStep_FootR::GSNotifyCS(const struct FUStGSNotifyParam& NotifyParam) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("AnimNotify_GSFootStep_FootR", "GSNotifyCS");

	Params::AnimNotify_GSFootStep_FootR_GSNotifyCS Parms{};

	Parms.NotifyParam = std::move(NotifyParam);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function b1-Managed.AnimNotifyState_GSFootSlide.GSNotifyBeginCS
// (Native, Event, Public, Protected, BlueprintEvent, Const)
// Parameters:
// struct FUStGSNotifyParam                NotifyParam                                            (Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
// float                                   TotalDuration                                          (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UAnimNotifyState_GSFootSlide::GSNotifyBeginCS(const struct FUStGSNotifyParam& NotifyParam, float TotalDuration) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("AnimNotifyState_GSFootSlide", "GSNotifyBeginCS");

	Params::AnimNotifyState_GSFootSlide_GSNotifyBeginCS Parms{};

	Parms.NotifyParam = std::move(NotifyParam);
	Parms.TotalDuration = TotalDuration;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function b1-Managed.BED_QuestNode_AwardPrizesRandom.PostPropertyChanged
// (Native, Event, Public, BlueprintEvent)
// Parameters:
// class FString                           MemberName                                             (Parm, ZeroConstructor, HasGetValueTypeHash)
// class FString                           PropertyName                                           (Parm, ZeroConstructor, HasGetValueTypeHash)

void UBED_QuestNode_AwardPrizesRandom::PostPropertyChanged(const class FString& MemberName, const class FString& PropertyName)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BED_QuestNode_AwardPrizesRandom", "PostPropertyChanged");

	Params::BED_QuestNode_AwardPrizesRandom_PostPropertyChanged Parms{};

	Parms.MemberName = std::move(MemberName);
	Parms.PropertyName = std::move(PropertyName);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function b1-Managed.BED_QuestNode_AwardPrizesRandom.GetNodeDescriptionInCS
// (Native, Event, Public, HasOutParams, BlueprintEvent, Const)
// Parameters:
// class FString                           ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash)

class FString UBED_QuestNode_AwardPrizesRandom::GetNodeDescriptionInCS() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BED_QuestNode_AwardPrizesRandom", "GetNodeDescriptionInCS");

	Params::BED_QuestNode_AwardPrizesRandom_GetNodeDescriptionInCS Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function b1-Managed.BANS_GSMontageJumpToSection.GetJumpableSectionPrefix
// (Native, Event, Public, HasOutParams, BlueprintEvent, Const)
// Parameters:
// class FString                           ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash)

class FString UBANS_GSMontageJumpToSection::GetJumpableSectionPrefix() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BANS_GSMontageJumpToSection", "GetJumpableSectionPrefix");

	Params::BANS_GSMontageJumpToSection_GetJumpableSectionPrefix Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function b1-Managed.BANS_GSMontageJumpToSection.GSAllowCrossSection
// (Native, Event, Public, HasOutParams, BlueprintEvent, Const)
// Parameters:
// uint8                                   ReturnValue                                            (Parm, OutParm, ReturnParm, NoDestructor, HasGetValueTypeHash)

uint8 UBANS_GSMontageJumpToSection::GSAllowCrossSection() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BANS_GSMontageJumpToSection", "GSAllowCrossSection");

	Params::BANS_GSMontageJumpToSection_GSAllowCrossSection Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function b1-Managed.BANS_GSMontageJumpToSection.GSNotifyBeginCS
// (Native, Event, Public, Protected, BlueprintEvent, Const)
// Parameters:
// struct FUStGSNotifyParam                NotifyParam                                            (Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
// float                                   TotalDuration                                          (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UBANS_GSMontageJumpToSection::GSNotifyBeginCS(const struct FUStGSNotifyParam& NotifyParam, float TotalDuration) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BANS_GSMontageJumpToSection", "GSNotifyBeginCS");

	Params::BANS_GSMontageJumpToSection_GSNotifyBeginCS Parms{};

	Parms.NotifyParam = std::move(NotifyParam);
	Parms.TotalDuration = TotalDuration;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function b1-Managed.BANS_GSMontageJumpToSection.GetAnimNSType
// (Native, Event, Public, HasOutParams, BlueprintEvent, Const)
// Parameters:
// EGsEnAnimNS                             ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

EGsEnAnimNS UBANS_GSMontageJumpToSection::GetAnimNSType() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BANS_GSMontageJumpToSection", "GetAnimNSType");

	Params::BANS_GSMontageJumpToSection_GetAnimNSType Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function b1-Managed.BAN_GSMontageJumpToSectionByCondition.bIsNativeBranchingPointCS
// (Native, Event, Public, HasOutParams, BlueprintEvent, Const)
// Parameters:
// uint8                                   ReturnValue                                            (Parm, OutParm, ReturnParm, NoDestructor, HasGetValueTypeHash)

uint8 UBAN_GSMontageJumpToSectionByCondition::bIsNativeBranchingPointCS() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BAN_GSMontageJumpToSectionByCondition", "bIsNativeBranchingPointCS");

	Params::BAN_GSMontageJumpToSectionByCondition_bIsNativeBranchingPointCS Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function b1-Managed.BAN_GSMontageJumpToSectionByCondition.GetJumpableSectionPrefix
// (Native, Event, Public, HasOutParams, BlueprintEvent, Const)
// Parameters:
// class FString                           ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash)

class FString UBAN_GSMontageJumpToSectionByCondition::GetJumpableSectionPrefix() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BAN_GSMontageJumpToSectionByCondition", "GetJumpableSectionPrefix");

	Params::BAN_GSMontageJumpToSectionByCondition_GetJumpableSectionPrefix Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function b1-Managed.BAN_GSMontageJumpToSectionByCondition.GetAnimNType
// (Native, Event, Public, HasOutParams, BlueprintEvent, Const)
// Parameters:
// EGsEnAnimN                              ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

EGsEnAnimN UBAN_GSMontageJumpToSectionByCondition::GetAnimNType() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BAN_GSMontageJumpToSectionByCondition", "GetAnimNType");

	Params::BAN_GSMontageJumpToSectionByCondition_GetAnimNType Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function b1-Managed.BAN_GSMontageJumpToSectionByCondition.GSNotifyCS
// (Native, Event, Public, Protected, BlueprintEvent, Const)
// Parameters:
// struct FUStGSNotifyParam                NotifyParam                                            (Parm, ZeroConstructor, IsPlainOldData, NoDestructor)

void UBAN_GSMontageJumpToSectionByCondition::GSNotifyCS(const struct FUStGSNotifyParam& NotifyParam) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BAN_GSMontageJumpToSectionByCondition", "GSNotifyCS");

	Params::BAN_GSMontageJumpToSectionByCondition_GSNotifyCS Parms{};

	Parms.NotifyParam = std::move(NotifyParam);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function b1-Managed.BED_QuestNode_SpawnBossTrace.GetNodeDescriptionInCS
// (Native, Event, Public, HasOutParams, BlueprintEvent, Const)
// Parameters:
// class FString                           ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash)

class FString UBED_QuestNode_SpawnBossTrace::GetNodeDescriptionInCS() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BED_QuestNode_SpawnBossTrace", "GetNodeDescriptionInCS");

	Params::BED_QuestNode_SpawnBossTrace_GetNodeDescriptionInCS Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function b1-Managed.BAN_GSMoveActor.GSNotifyCS
// (Native, Event, Public, Protected, BlueprintEvent, Const)
// Parameters:
// struct FUStGSNotifyParam                NotifyParam                                            (Parm, ZeroConstructor, IsPlainOldData, NoDestructor)

void UBAN_GSMoveActor::GSNotifyCS(const struct FUStGSNotifyParam& NotifyParam) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BAN_GSMoveActor", "GSNotifyCS");

	Params::BAN_GSMoveActor_GSNotifyCS Parms{};

	Parms.NotifyParam = std::move(NotifyParam);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function b1-Managed.BAN_GSParkourLandCanMove.bIsNativeBranchingPointCS
// (Native, Event, Public, HasOutParams, BlueprintEvent, Const)
// Parameters:
// uint8                                   ReturnValue                                            (Parm, OutParm, ReturnParm, NoDestructor, HasGetValueTypeHash)

uint8 UBAN_GSParkourLandCanMove::bIsNativeBranchingPointCS() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BAN_GSParkourLandCanMove", "bIsNativeBranchingPointCS");

	Params::BAN_GSParkourLandCanMove_bIsNativeBranchingPointCS Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function b1-Managed.BAN_GSParkourLandCanMove.GSNotifyCS
// (Native, Event, Public, Protected, BlueprintEvent, Const)
// Parameters:
// struct FUStGSNotifyParam                NotifyParam                                            (Parm, ZeroConstructor, IsPlainOldData, NoDestructor)

void UBAN_GSParkourLandCanMove::GSNotifyCS(const struct FUStGSNotifyParam& NotifyParam) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BAN_GSParkourLandCanMove", "GSNotifyCS");

	Params::BAN_GSParkourLandCanMove_GSNotifyCS Parms{};

	Parms.NotifyParam = std::move(NotifyParam);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function b1-Managed.BAN_GSPlayDummyAnim.bIsNativeBranchingPointCS
// (Native, Event, Public, HasOutParams, BlueprintEvent, Const)
// Parameters:
// uint8                                   ReturnValue                                            (Parm, OutParm, ReturnParm, NoDestructor, HasGetValueTypeHash)

uint8 UBAN_GSPlayDummyAnim::bIsNativeBranchingPointCS() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BAN_GSPlayDummyAnim", "bIsNativeBranchingPointCS");

	Params::BAN_GSPlayDummyAnim_bIsNativeBranchingPointCS Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function b1-Managed.BAN_GSPlayDummyAnim.GSNotifyCS
// (Native, Event, Public, Protected, BlueprintEvent, Const)
// Parameters:
// struct FUStGSNotifyParam                NotifyParam                                            (Parm, ZeroConstructor, IsPlainOldData, NoDestructor)

void UBAN_GSPlayDummyAnim::GSNotifyCS(const struct FUStGSNotifyParam& NotifyParam) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BAN_GSPlayDummyAnim", "GSNotifyCS");

	Params::BAN_GSPlayDummyAnim_GSNotifyCS Parms{};

	Parms.NotifyParam = std::move(NotifyParam);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function b1-Managed.BAN_GSPlaySequence.bIsNativeBranchingPointCS
// (Native, Event, Public, HasOutParams, BlueprintEvent, Const)
// Parameters:
// uint8                                   ReturnValue                                            (Parm, OutParm, ReturnParm, NoDestructor, HasGetValueTypeHash)

uint8 UBAN_GSPlaySequence::bIsNativeBranchingPointCS() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BAN_GSPlaySequence", "bIsNativeBranchingPointCS");

	Params::BAN_GSPlaySequence_bIsNativeBranchingPointCS Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function b1-Managed.BAN_GSPlaySequence.GetSoftReferences
// (Native, Event, Public, HasOutParams, BlueprintEvent, Const)
// Parameters:
// TArray<struct FSoftObjectPath>          ReturnValue                                            (Parm, OutParm, ReturnParm)

TArray<struct FSoftObjectPath> UBAN_GSPlaySequence::GetSoftReferences() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BAN_GSPlaySequence", "GetSoftReferences");

	Params::BAN_GSPlaySequence_GetSoftReferences Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function b1-Managed.BAN_GSPlaySequence.GSNotifyCS
// (Native, Event, Public, Protected, BlueprintEvent, Const)
// Parameters:
// struct FUStGSNotifyParam                NotifyParam                                            (Parm, ZeroConstructor, IsPlainOldData, NoDestructor)

void UBAN_GSPlaySequence::GSNotifyCS(const struct FUStGSNotifyParam& NotifyParam) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BAN_GSPlaySequence", "GSNotifyCS");

	Params::BAN_GSPlaySequence_GSNotifyCS Parms{};

	Parms.NotifyParam = std::move(NotifyParam);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function b1-Managed.BAN_GSRagDoll.GSNotifyCS
// (Native, Event, Public, Protected, BlueprintEvent, Const)
// Parameters:
// struct FUStGSNotifyParam                NotifyParam                                            (Parm, ZeroConstructor, IsPlainOldData, NoDestructor)

void UBAN_GSRagDoll::GSNotifyCS(const struct FUStGSNotifyParam& NotifyParam) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BAN_GSRagDoll", "GSNotifyCS");

	Params::BAN_GSRagDoll_GSNotifyCS Parms{};

	Parms.NotifyParam = std::move(NotifyParam);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function b1-Managed.BAN_GSRemoveSceneItemData.bIsNativeBranchingPointCS
// (Native, Event, Public, HasOutParams, BlueprintEvent, Const)
// Parameters:
// uint8                                   ReturnValue                                            (Parm, OutParm, ReturnParm, NoDestructor, HasGetValueTypeHash)

uint8 UBAN_GSRemoveSceneItemData::bIsNativeBranchingPointCS() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BAN_GSRemoveSceneItemData", "bIsNativeBranchingPointCS");

	Params::BAN_GSRemoveSceneItemData_bIsNativeBranchingPointCS Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function b1-Managed.BAN_GSRemoveSceneItemData.GSNotifyCS
// (Native, Event, Public, Protected, BlueprintEvent, Const)
// Parameters:
// struct FUStGSNotifyParam                NotifyParam                                            (Parm, ZeroConstructor, IsPlainOldData, NoDestructor)

void UBAN_GSRemoveSceneItemData::GSNotifyCS(const struct FUStGSNotifyParam& NotifyParam) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BAN_GSRemoveSceneItemData", "GSNotifyCS");

	Params::BAN_GSRemoveSceneItemData_GSNotifyCS Parms{};

	Parms.NotifyParam = std::move(NotifyParam);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function b1-Managed.BAN_GSSetActorScale.bIsNativeBranchingPointCS
// (Native, Event, Public, HasOutParams, BlueprintEvent, Const)
// Parameters:
// uint8                                   ReturnValue                                            (Parm, OutParm, ReturnParm, NoDestructor, HasGetValueTypeHash)

uint8 UBAN_GSSetActorScale::bIsNativeBranchingPointCS() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BAN_GSSetActorScale", "bIsNativeBranchingPointCS");

	Params::BAN_GSSetActorScale_bIsNativeBranchingPointCS Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function b1-Managed.BAN_GSSetActorScale.GSNotifyCS
// (Native, Event, Public, Protected, BlueprintEvent, Const)
// Parameters:
// struct FUStGSNotifyParam                NotifyParam                                            (Parm, ZeroConstructor, IsPlainOldData, NoDestructor)

void UBAN_GSSetActorScale::GSNotifyCS(const struct FUStGSNotifyParam& NotifyParam) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BAN_GSSetActorScale", "GSNotifyCS");

	Params::BAN_GSSetActorScale_GSNotifyCS Parms{};

	Parms.NotifyParam = std::move(NotifyParam);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function b1-Managed.BED_MovieNode_PerformerSetTransform.GetNodeDescriptionInCS
// (Native, Event, Public, HasOutParams, BlueprintEvent, Const)
// Parameters:
// class FString                           ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash)

class FString UBED_MovieNode_PerformerSetTransform::GetNodeDescriptionInCS() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BED_MovieNode_PerformerSetTransform", "GetNodeDescriptionInCS");

	Params::BED_MovieNode_PerformerSetTransform_GetNodeDescriptionInCS Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function b1-Managed.BAN_GSSetCompVisibility.bIsNativeBranchingPointCS
// (Native, Event, Public, HasOutParams, BlueprintEvent, Const)
// Parameters:
// uint8                                   ReturnValue                                            (Parm, OutParm, ReturnParm, NoDestructor, HasGetValueTypeHash)

uint8 UBAN_GSSetCompVisibility::bIsNativeBranchingPointCS() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BAN_GSSetCompVisibility", "bIsNativeBranchingPointCS");

	Params::BAN_GSSetCompVisibility_bIsNativeBranchingPointCS Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function b1-Managed.BAN_GSSetCompVisibility.GSNotifyCS
// (Native, Event, Public, Protected, BlueprintEvent, Const)
// Parameters:
// struct FUStGSNotifyParam                NotifyParam                                            (Parm, ZeroConstructor, IsPlainOldData, NoDestructor)

void UBAN_GSSetCompVisibility::GSNotifyCS(const struct FUStGSNotifyParam& NotifyParam) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BAN_GSSetCompVisibility", "GSNotifyCS");

	Params::BAN_GSSetCompVisibility_GSNotifyCS Parms{};

	Parms.NotifyParam = std::move(NotifyParam);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function b1-Managed.BAN_GSSetFPStateEnd.GSNotifyCS
// (Native, Event, Public, Protected, BlueprintEvent, Const)
// Parameters:
// struct FUStGSNotifyParam                NotifyParam                                            (Parm, ZeroConstructor, IsPlainOldData, NoDestructor)

void UBAN_GSSetFPStateEnd::GSNotifyCS(const struct FUStGSNotifyParam& NotifyParam) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BAN_GSSetFPStateEnd", "GSNotifyCS");

	Params::BAN_GSSetFPStateEnd_GSNotifyCS Parms{};

	Parms.NotifyParam = std::move(NotifyParam);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function b1-Managed.BAN_GSSpawnStaticMeshActor.GSNotifyCS
// (Native, Event, Public, Protected, BlueprintEvent, Const)
// Parameters:
// struct FUStGSNotifyParam                NotifyParam                                            (Parm, ZeroConstructor, IsPlainOldData, NoDestructor)

void UBAN_GSSpawnStaticMeshActor::GSNotifyCS(const struct FUStGSNotifyParam& NotifyParam) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BAN_GSSpawnStaticMeshActor", "GSNotifyCS");

	Params::BAN_GSSpawnStaticMeshActor_GSNotifyCS Parms{};

	Parms.NotifyParam = std::move(NotifyParam);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function b1-Managed.BAN_GSSpawnLightningActor.GSNotifyCS
// (Native, Event, Public, Protected, BlueprintEvent, Const)
// Parameters:
// struct FUStGSNotifyParam                NotifyParam                                            (Parm, ZeroConstructor, IsPlainOldData, NoDestructor)

void UBAN_GSSpawnLightningActor::GSNotifyCS(const struct FUStGSNotifyParam& NotifyParam) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BAN_GSSpawnLightningActor", "GSNotifyCS");

	Params::BAN_GSSpawnLightningActor_GSNotifyCS Parms{};

	Parms.NotifyParam = std::move(NotifyParam);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function b1-Managed.BAN_GSSpawnSceneItem.bIsNativeBranchingPointCS
// (Native, Event, Public, HasOutParams, BlueprintEvent, Const)
// Parameters:
// uint8                                   ReturnValue                                            (Parm, OutParm, ReturnParm, NoDestructor, HasGetValueTypeHash)

uint8 UBAN_GSSpawnSceneItem::bIsNativeBranchingPointCS() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BAN_GSSpawnSceneItem", "bIsNativeBranchingPointCS");

	Params::BAN_GSSpawnSceneItem_bIsNativeBranchingPointCS Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function b1-Managed.BAN_GSSpawnSceneItem.GSNotifyCS
// (Native, Event, Public, Protected, BlueprintEvent, Const)
// Parameters:
// struct FUStGSNotifyParam                NotifyParam                                            (Parm, ZeroConstructor, IsPlainOldData, NoDestructor)

void UBAN_GSSpawnSceneItem::GSNotifyCS(const struct FUStGSNotifyParam& NotifyParam) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BAN_GSSpawnSceneItem", "GSNotifyCS");

	Params::BAN_GSSpawnSceneItem_GSNotifyCS Parms{};

	Parms.NotifyParam = std::move(NotifyParam);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function b1-Managed.BED_MovieNode_Timer.GetNodeDescriptionInCS
// (Native, Event, Public, HasOutParams, BlueprintEvent, Const)
// Parameters:
// class FString                           ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash)

class FString UBED_MovieNode_Timer::GetNodeDescriptionInCS() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BED_MovieNode_Timer", "GetNodeDescriptionInCS");

	Params::BED_MovieNode_Timer_GetNodeDescriptionInCS Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function b1-Managed.BAN_GSSplineFlyMove.bIsNativeBranchingPointCS
// (Native, Event, Public, HasOutParams, BlueprintEvent, Const)
// Parameters:
// uint8                                   ReturnValue                                            (Parm, OutParm, ReturnParm, NoDestructor, HasGetValueTypeHash)

uint8 UBAN_GSSplineFlyMove::bIsNativeBranchingPointCS() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BAN_GSSplineFlyMove", "bIsNativeBranchingPointCS");

	Params::BAN_GSSplineFlyMove_bIsNativeBranchingPointCS Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function b1-Managed.BAN_GSSplineFlyMove.GSNotifyCS
// (Native, Event, Public, Protected, BlueprintEvent, Const)
// Parameters:
// struct FUStGSNotifyParam                NotifyParam                                            (Parm, ZeroConstructor, IsPlainOldData, NoDestructor)

void UBAN_GSSplineFlyMove::GSNotifyCS(const struct FUStGSNotifyParam& NotifyParam) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BAN_GSSplineFlyMove", "GSNotifyCS");

	Params::BAN_GSSplineFlyMove_GSNotifyCS Parms{};

	Parms.NotifyParam = std::move(NotifyParam);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function b1-Managed.BAN_GSSwitchMovementMode.bIsNativeBranchingPointCS
// (Native, Event, Public, HasOutParams, BlueprintEvent, Const)
// Parameters:
// uint8                                   ReturnValue                                            (Parm, OutParm, ReturnParm, NoDestructor, HasGetValueTypeHash)

uint8 UBAN_GSSwitchMovementMode::bIsNativeBranchingPointCS() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BAN_GSSwitchMovementMode", "bIsNativeBranchingPointCS");

	Params::BAN_GSSwitchMovementMode_bIsNativeBranchingPointCS Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function b1-Managed.BAN_GSSwitchMovementMode.GSNotifyCS
// (Native, Event, Public, Protected, BlueprintEvent, Const)
// Parameters:
// struct FUStGSNotifyParam                NotifyParam                                            (Parm, ZeroConstructor, IsPlainOldData, NoDestructor)

void UBAN_GSSwitchMovementMode::GSNotifyCS(const struct FUStGSNotifyParam& NotifyParam) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BAN_GSSwitchMovementMode", "GSNotifyCS");

	Params::BAN_GSSwitchMovementMode_GSNotifyCS Parms{};

	Parms.NotifyParam = std::move(NotifyParam);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function b1-Managed.BAN_GSTriggerChargeSkill.bIsNativeBranchingPointCS
// (Native, Event, Public, HasOutParams, BlueprintEvent, Const)
// Parameters:
// uint8                                   ReturnValue                                            (Parm, OutParm, ReturnParm, NoDestructor, HasGetValueTypeHash)

uint8 UBAN_GSTriggerChargeSkill::bIsNativeBranchingPointCS() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BAN_GSTriggerChargeSkill", "bIsNativeBranchingPointCS");

	Params::BAN_GSTriggerChargeSkill_bIsNativeBranchingPointCS Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function b1-Managed.BAN_GSTriggerChargeSkill.GSValidateInputCS
// (Native, Event, Public, BlueprintEvent, Const)
// Parameters:
// class AActor*                           Actor                                                  (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UBAN_GSTriggerChargeSkill::GSValidateInputCS(class AActor* Actor) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BAN_GSTriggerChargeSkill", "GSValidateInputCS");

	Params::BAN_GSTriggerChargeSkill_GSValidateInputCS Parms{};

	Parms.Actor = Actor;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function b1-Managed.BAN_GSTriggerChargeSkill.GSNotifyCS
// (Native, Event, Public, Protected, BlueprintEvent, Const)
// Parameters:
// struct FUStGSNotifyParam                NotifyParam                                            (Parm, ZeroConstructor, IsPlainOldData, NoDestructor)

void UBAN_GSTriggerChargeSkill::GSNotifyCS(const struct FUStGSNotifyParam& NotifyParam) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BAN_GSTriggerChargeSkill", "GSNotifyCS");

	Params::BAN_GSTriggerChargeSkill_GSNotifyCS Parms{};

	Parms.NotifyParam = std::move(NotifyParam);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function b1-Managed.BAN_GSTriggerCostItem.bIsNativeBranchingPointCS
// (Native, Event, Public, HasOutParams, BlueprintEvent, Const)
// Parameters:
// uint8                                   ReturnValue                                            (Parm, OutParm, ReturnParm, NoDestructor, HasGetValueTypeHash)

uint8 UBAN_GSTriggerCostItem::bIsNativeBranchingPointCS() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BAN_GSTriggerCostItem", "bIsNativeBranchingPointCS");

	Params::BAN_GSTriggerCostItem_bIsNativeBranchingPointCS Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function b1-Managed.BAN_GSTriggerCostItem.GSNotifyCS
// (Native, Event, Public, Protected, BlueprintEvent, Const)
// Parameters:
// struct FUStGSNotifyParam                NotifyParam                                            (Parm, ZeroConstructor, IsPlainOldData, NoDestructor)

void UBAN_GSTriggerCostItem::GSNotifyCS(const struct FUStGSNotifyParam& NotifyParam) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BAN_GSTriggerCostItem", "GSNotifyCS");

	Params::BAN_GSTriggerCostItem_GSNotifyCS Parms{};

	Parms.NotifyParam = std::move(NotifyParam);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function b1-Managed.BUI_FOnButtonReleasedEvent_LamdaHolder.LamdaCB
// (Native, Public)

void UBUI_FOnButtonReleasedEvent_LamdaHolder::LamdaCB()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BUI_FOnButtonReleasedEvent_LamdaHolder", "LamdaCB");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function b1-Managed.BAN_GSTriggerEffect.bIsNativeBranchingPointCS
// (Native, Event, Public, HasOutParams, BlueprintEvent, Const)
// Parameters:
// uint8                                   ReturnValue                                            (Parm, OutParm, ReturnParm, NoDestructor, HasGetValueTypeHash)

uint8 UBAN_GSTriggerEffect::bIsNativeBranchingPointCS() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BAN_GSTriggerEffect", "bIsNativeBranchingPointCS");

	Params::BAN_GSTriggerEffect_bIsNativeBranchingPointCS Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function b1-Managed.BAN_GSTriggerEffect.GSValidateInputCS
// (Native, Event, Public, BlueprintEvent, Const)
// Parameters:
// class AActor*                           Actor                                                  (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UBAN_GSTriggerEffect::GSValidateInputCS(class AActor* Actor) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BAN_GSTriggerEffect", "GSValidateInputCS");

	Params::BAN_GSTriggerEffect_GSValidateInputCS Parms{};

	Parms.Actor = Actor;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function b1-Managed.BAN_GSTriggerEffect.GSNotifyCS
// (Native, Event, Public, Protected, BlueprintEvent, Const)
// Parameters:
// struct FUStGSNotifyParam                NotifyParam                                            (Parm, ZeroConstructor, IsPlainOldData, NoDestructor)

void UBAN_GSTriggerEffect::GSNotifyCS(const struct FUStGSNotifyParam& NotifyParam) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BAN_GSTriggerEffect", "GSNotifyCS");

	Params::BAN_GSTriggerEffect_GSNotifyCS Parms{};

	Parms.NotifyParam = std::move(NotifyParam);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function b1-Managed.BAN_GSTryAttachSceneItem.bIsNativeBranchingPointCS
// (Native, Event, Public, HasOutParams, BlueprintEvent, Const)
// Parameters:
// uint8                                   ReturnValue                                            (Parm, OutParm, ReturnParm, NoDestructor, HasGetValueTypeHash)

uint8 UBAN_GSTryAttachSceneItem::bIsNativeBranchingPointCS() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BAN_GSTryAttachSceneItem", "bIsNativeBranchingPointCS");

	Params::BAN_GSTryAttachSceneItem_bIsNativeBranchingPointCS Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function b1-Managed.BAN_GSTryAttachSceneItem.GSNotifyCS
// (Native, Event, Public, Protected, BlueprintEvent, Const)
// Parameters:
// struct FUStGSNotifyParam                NotifyParam                                            (Parm, ZeroConstructor, IsPlainOldData, NoDestructor)

void UBAN_GSTryAttachSceneItem::GSNotifyCS(const struct FUStGSNotifyParam& NotifyParam) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BAN_GSTryAttachSceneItem", "GSNotifyCS");

	Params::BAN_GSTryAttachSceneItem_GSNotifyCS Parms{};

	Parms.NotifyParam = std::move(NotifyParam);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function b1-Managed.BAN_GSTryFindSceneItem.bIsNativeBranchingPointCS
// (Native, Event, Public, HasOutParams, BlueprintEvent, Const)
// Parameters:
// uint8                                   ReturnValue                                            (Parm, OutParm, ReturnParm, NoDestructor, HasGetValueTypeHash)

uint8 UBAN_GSTryFindSceneItem::bIsNativeBranchingPointCS() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BAN_GSTryFindSceneItem", "bIsNativeBranchingPointCS");

	Params::BAN_GSTryFindSceneItem_bIsNativeBranchingPointCS Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function b1-Managed.BAN_GSTryFindSceneItem.GSNotifyCS
// (Native, Event, Public, Protected, BlueprintEvent, Const)
// Parameters:
// struct FUStGSNotifyParam                NotifyParam                                            (Parm, ZeroConstructor, IsPlainOldData, NoDestructor)

void UBAN_GSTryFindSceneItem::GSNotifyCS(const struct FUStGSNotifyParam& NotifyParam) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BAN_GSTryFindSceneItem", "GSNotifyCS");

	Params::BAN_GSTryFindSceneItem_GSNotifyCS Parms{};

	Parms.NotifyParam = std::move(NotifyParam);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function b1-Managed.BAN_HandleAiConversation.bIsNativeBranchingPointCS
// (Native, Event, Public, HasOutParams, BlueprintEvent, Const)
// Parameters:
// uint8                                   ReturnValue                                            (Parm, OutParm, ReturnParm, NoDestructor, HasGetValueTypeHash)

uint8 UBAN_HandleAiConversation::bIsNativeBranchingPointCS() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BAN_HandleAiConversation", "bIsNativeBranchingPointCS");

	Params::BAN_HandleAiConversation_bIsNativeBranchingPointCS Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function b1-Managed.BAN_HandleAiConversation.GSNotifyCS
// (Native, Event, Public, Protected, BlueprintEvent, Const)
// Parameters:
// struct FUStGSNotifyParam                NotifyParam                                            (Parm, ZeroConstructor, IsPlainOldData, NoDestructor)

void UBAN_HandleAiConversation::GSNotifyCS(const struct FUStGSNotifyParam& NotifyParam) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BAN_HandleAiConversation", "GSNotifyCS");

	Params::BAN_HandleAiConversation_GSNotifyCS Parms{};

	Parms.NotifyParam = std::move(NotifyParam);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function b1-Managed.BAN_SkillValidAttackEnded.bIsNativeBranchingPointCS
// (Native, Event, Public, HasOutParams, BlueprintEvent, Const)
// Parameters:
// uint8                                   ReturnValue                                            (Parm, OutParm, ReturnParm, NoDestructor, HasGetValueTypeHash)

uint8 UBAN_SkillValidAttackEnded::bIsNativeBranchingPointCS() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BAN_SkillValidAttackEnded", "bIsNativeBranchingPointCS");

	Params::BAN_SkillValidAttackEnded_bIsNativeBranchingPointCS Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function b1-Managed.BAN_SkillValidAttackEnded.GSNotifyCS
// (Native, Event, Public, Protected, BlueprintEvent, Const)
// Parameters:
// struct FUStGSNotifyParam                NotifyParam                                            (Parm, ZeroConstructor, IsPlainOldData, NoDestructor)

void UBAN_SkillValidAttackEnded::GSNotifyCS(const struct FUStGSNotifyParam& NotifyParam) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BAN_SkillValidAttackEnded", "GSNotifyCS");

	Params::BAN_SkillValidAttackEnded_GSNotifyCS Parms{};

	Parms.NotifyParam = std::move(NotifyParam);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function b1-Managed.BUI_DebugDrawRoundRect.SetRefRectPosCenter
// (Native, Public, BlueprintCallable)
// Parameters:
// struct FVector2D                        RefPos                                                 (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UBUI_DebugDrawRoundRect::SetRefRectPosCenter(const struct FVector2D& RefPos)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BUI_DebugDrawRoundRect", "SetRefRectPosCenter");

	Params::BUI_DebugDrawRoundRect_SetRefRectPosCenter Parms{};

	Parms.RefPos = std::move(RefPos);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function b1-Managed.BUI_DebugDrawRoundRect.ConstructDebugShow
// (Native, Public, BlueprintCallable)

void UBUI_DebugDrawRoundRect::ConstructDebugShow()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BUI_DebugDrawRoundRect", "ConstructDebugShow");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function b1-Managed.BUI_DebugDrawRoundRect.SetRadiusCfg
// (Native, Public, BlueprintCallable)
// Parameters:
// struct FVector4                         InRadiusCfg                                            (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UBUI_DebugDrawRoundRect::SetRadiusCfg(const struct FVector4& InRadiusCfg)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BUI_DebugDrawRoundRect", "SetRadiusCfg");

	Params::BUI_DebugDrawRoundRect_SetRadiusCfg Parms{};

	Parms.InRadiusCfg = std::move(InRadiusCfg);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function b1-Managed.BUI_DebugDrawRoundRect.UpdateShow
// (Native, Public, BlueprintCallable)

void UBUI_DebugDrawRoundRect::UpdateShow()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BUI_DebugDrawRoundRect", "UpdateShow");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function b1-Managed.BAN_SpawnLightningFXActor_MultiSockets.GSNotifyCS
// (Native, Event, Public, Protected, BlueprintEvent, Const)
// Parameters:
// struct FUStGSNotifyParam                NotifyParam                                            (Parm, ZeroConstructor, IsPlainOldData, NoDestructor)

void UBAN_SpawnLightningFXActor_MultiSockets::GSNotifyCS(const struct FUStGSNotifyParam& NotifyParam) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BAN_SpawnLightningFXActor_MultiSockets", "GSNotifyCS");

	Params::BAN_SpawnLightningFXActor_MultiSockets_GSNotifyCS Parms{};

	Parms.NotifyParam = std::move(NotifyParam);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function b1-Managed.BAN_TeleportPlayerTo.bIsNativeBranchingPointCS
// (Native, Event, Public, HasOutParams, BlueprintEvent, Const)
// Parameters:
// uint8                                   ReturnValue                                            (Parm, OutParm, ReturnParm, NoDestructor, HasGetValueTypeHash)

uint8 UBAN_TeleportPlayerTo::bIsNativeBranchingPointCS() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BAN_TeleportPlayerTo", "bIsNativeBranchingPointCS");

	Params::BAN_TeleportPlayerTo_bIsNativeBranchingPointCS Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function b1-Managed.BAN_TeleportPlayerTo.GSNotifyCS
// (Native, Event, Public, Protected, BlueprintEvent, Const)
// Parameters:
// struct FUStGSNotifyParam                NotifyParam                                            (Parm, ZeroConstructor, IsPlainOldData, NoDestructor)

void UBAN_TeleportPlayerTo::GSNotifyCS(const struct FUStGSNotifyParam& NotifyParam) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BAN_TeleportPlayerTo", "GSNotifyCS");

	Params::BAN_TeleportPlayerTo_GSNotifyCS Parms{};

	Parms.NotifyParam = std::move(NotifyParam);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function b1-Managed.BANS_GSAttackWarnning.GSNotifyBeginCS
// (Native, Event, Public, Protected, BlueprintEvent, Const)
// Parameters:
// struct FUStGSNotifyParam                NotifyParam                                            (Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
// float                                   TotalDuration                                          (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UBANS_GSAttackWarnning::GSNotifyBeginCS(const struct FUStGSNotifyParam& NotifyParam, float TotalDuration) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BANS_GSAttackWarnning", "GSNotifyBeginCS");

	Params::BANS_GSAttackWarnning_GSNotifyBeginCS Parms{};

	Parms.NotifyParam = std::move(NotifyParam);
	Parms.TotalDuration = TotalDuration;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function b1-Managed.BANS_GSAttackWarnning.GSNotifyTickCS
// (Native, Event, Public, Protected, BlueprintEvent, Const)
// Parameters:
// struct FUStGSNotifyParam                NotifyParam                                            (Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
// float                                   FrameDeltaTime                                         (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UBANS_GSAttackWarnning::GSNotifyTickCS(const struct FUStGSNotifyParam& NotifyParam, float FrameDeltaTime) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BANS_GSAttackWarnning", "GSNotifyTickCS");

	Params::BANS_GSAttackWarnning_GSNotifyTickCS Parms{};

	Parms.NotifyParam = std::move(NotifyParam);
	Parms.FrameDeltaTime = FrameDeltaTime;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function b1-Managed.BANS_GSAttackWarnning.GSNotifyEndCS
// (Native, Event, Public, Protected, BlueprintEvent, Const)
// Parameters:
// struct FUStGSNotifyParam                NotifyParam                                            (Parm, ZeroConstructor, IsPlainOldData, NoDestructor)

void UBANS_GSAttackWarnning::GSNotifyEndCS(const struct FUStGSNotifyParam& NotifyParam) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BANS_GSAttackWarnning", "GSNotifyEndCS");

	Params::BANS_GSAttackWarnning_GSNotifyEndCS Parms{};

	Parms.NotifyParam = std::move(NotifyParam);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function b1-Managed.BED_ProcessStateNode_QueryCompoundCondition.GetNodeDescriptionInCS
// (Native, Event, Public, HasOutParams, BlueprintEvent, Const)
// Parameters:
// class FString                           ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash)

class FString UBED_ProcessStateNode_QueryCompoundCondition::GetNodeDescriptionInCS() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BED_ProcessStateNode_QueryCompoundCondition", "GetNodeDescriptionInCS");

	Params::BED_ProcessStateNode_QueryCompoundCondition_GetNodeDescriptionInCS Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function b1-Managed.BGU_TempExportForDS.ReceiveBeginPlay
// (Native, Event, Public, Protected, BlueprintEvent)

void ABGU_TempExportForDS::ReceiveBeginPlay()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BGU_TempExportForDS", "ReceiveBeginPlay");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function b1-Managed.BUI_ExceptionPanel.OnCloseButtonDown
// (Native, Public)

void UBUI_ExceptionPanel::OnCloseButtonDown()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BUI_ExceptionPanel", "OnCloseButtonDown");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function b1-Managed.BGUDestructibleActorBase.ReceiveTick
// (Native, Event, Public, BlueprintEvent)
// Parameters:
// float                                   DeltaSeconds                                           (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ABGUDestructibleActorBase::ReceiveTick(float DeltaSeconds)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BGUDestructibleActorBase", "ReceiveTick");

	Params::BGUDestructibleActorBase_ReceiveTick Parms{};

	Parms.DeltaSeconds = DeltaSeconds;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function b1-Managed.BGUDestructibleActorBase.ResetDestructedEffect
// (Native, Event, Public, BlueprintCallable, BlueprintEvent)

void ABGUDestructibleActorBase::ResetDestructedEffect()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BGUDestructibleActorBase", "ResetDestructedEffect");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function b1-Managed.BGUDestructibleActorBase.PlayDestructedEffect
// (Native, Event, Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// float                                   SinkDelay                                              (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// float                                   SinkVelocity                                           (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// class AActor*                           AtkActor                                               (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ABGUDestructibleActorBase::PlayDestructedEffect(float SinkDelay, float SinkVelocity, class AActor* AtkActor)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BGUDestructibleActorBase", "PlayDestructedEffect");

	Params::BGUDestructibleActorBase_PlayDestructedEffect Parms{};

	Parms.SinkDelay = SinkDelay;
	Parms.SinkVelocity = SinkVelocity;
	Parms.AtkActor = AtkActor;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function b1-Managed.BGUDestructibleActorBase.InitDestructedEffect
// (Native, Event, Public, BlueprintCallable, BlueprintEvent)

void ABGUDestructibleActorBase::InitDestructedEffect()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BGUDestructibleActorBase", "InitDestructedEffect");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function b1-Managed.BGUDestructibleActorBase.DisableCollision
// (Native, Public, BlueprintCallable)

void ABGUDestructibleActorBase::DisableCollision()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BGUDestructibleActorBase", "DisableCollision");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function b1-Managed.BED_QuestNode_PlayerCastMagic.GetNodeDescriptionInCS
// (Native, Event, Public, HasOutParams, BlueprintEvent, Const)
// Parameters:
// class FString                           ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash)

class FString UBED_QuestNode_PlayerCastMagic::GetNodeDescriptionInCS() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BED_QuestNode_PlayerCastMagic", "GetNodeDescriptionInCS");

	Params::BED_QuestNode_PlayerCastMagic_GetNodeDescriptionInCS Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function b1-Managed.BUI_GM_OP_Editable.OnClickChangeValue
// (Native, Public)

void UBUI_GM_OP_Editable::OnClickChangeValue()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BUI_GM_OP_Editable", "OnClickChangeValue");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function b1-Managed.BED_QuestNode_PlayerUseItem.GetNodeDescriptionInCS
// (Native, Event, Public, HasOutParams, BlueprintEvent, Const)
// Parameters:
// class FString                           ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash)

class FString UBED_QuestNode_PlayerUseItem::GetNodeDescriptionInCS() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BED_QuestNode_PlayerUseItem", "GetNodeDescriptionInCS");

	Params::BED_QuestNode_PlayerUseItem_GetNodeDescriptionInCS Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function b1-Managed.BGUSeqAKBActor.GetPredicToStateCfgEasingTime
// (Native, Public, HasOutParams, BlueprintCallable)
// Parameters:
// class FName                             TargetState                                            (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// float                                   PredicCfgEasingTime                                    (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// float                                   PredicCfgDelayEasingTime                               (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ABGUSeqAKBActor::GetPredicToStateCfgEasingTime(class FName TargetState, float* PredicCfgEasingTime, float* PredicCfgDelayEasingTime)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BGUSeqAKBActor", "GetPredicToStateCfgEasingTime");

	Params::BGUSeqAKBActor_GetPredicToStateCfgEasingTime Parms{};

	Parms.TargetState = TargetState;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	if (PredicCfgEasingTime != nullptr)
		*PredicCfgEasingTime = Parms.PredicCfgEasingTime;

	if (PredicCfgDelayEasingTime != nullptr)
		*PredicCfgDelayEasingTime = Parms.PredicCfgDelayEasingTime;
}


// Function b1-Managed.BGUSeqAKBActor.GSBeforeInitAddBindingActor
// (Native, Public, BlueprintCallable)
// Parameters:
// class FName                             BindingActorTagName                                    (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// class AActor*                           InActor                                                (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ABGUSeqAKBActor::GSBeforeInitAddBindingActor(class FName BindingActorTagName, class AActor* InActor)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BGUSeqAKBActor", "GSBeforeInitAddBindingActor");

	Params::BGUSeqAKBActor_GSBeforeInitAddBindingActor Parms{};

	Parms.BindingActorTagName = BindingActorTagName;
	Parms.InActor = InActor;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function b1-Managed.BGUSeqAKBActor.OnAKBStateInteruptFunc
// (Native, Public)
// Parameters:
// class FName                             BegineState                                            (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// class FName                             EndState                                               (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// uint8                                   IsForceImSet                                           (Parm, NoDestructor, HasGetValueTypeHash)

void ABGUSeqAKBActor::OnAKBStateInteruptFunc(class FName BegineState, class FName EndState, uint8 IsForceImSet)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BGUSeqAKBActor", "OnAKBStateInteruptFunc");

	Params::BGUSeqAKBActor_OnAKBStateInteruptFunc Parms{};

	Parms.BegineState = BegineState;
	Parms.EndState = EndState;
	Parms.IsForceImSet = IsForceImSet;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function b1-Managed.BGUSeqAKBActor.WoodTestAnimKeyState
// (Native, Public, BlueprintCallable)
// Parameters:
// class FString                           AnimName                                               (Parm, ZeroConstructor, HasGetValueTypeHash)
// class FString                           TargetState                                            (Parm, ZeroConstructor, HasGetValueTypeHash)
// float                                   InStateDelayEasingTime                                 (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// uint8                                   IsForce                                                (Parm, NoDestructor, HasGetValueTypeHash)

void ABGUSeqAKBActor::WoodTestAnimKeyState(const class FString& AnimName, const class FString& TargetState, float InStateDelayEasingTime, uint8 IsForce)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BGUSeqAKBActor", "WoodTestAnimKeyState");

	Params::BGUSeqAKBActor_WoodTestAnimKeyState Parms{};

	Parms.AnimName = std::move(AnimName);
	Parms.TargetState = std::move(TargetState);
	Parms.InStateDelayEasingTime = InStateDelayEasingTime;
	Parms.IsForce = IsForce;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function b1-Managed.BGUSeqAKBActor.OnAKBStateBeginFunc
// (Native, Public)
// Parameters:
// class FName                             BegineState                                            (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// class FName                             EndState                                               (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// uint8                                   IsForceImSet                                           (Parm, NoDestructor, HasGetValueTypeHash)

void ABGUSeqAKBActor::OnAKBStateBeginFunc(class FName BegineState, class FName EndState, uint8 IsForceImSet)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BGUSeqAKBActor", "OnAKBStateBeginFunc");

	Params::BGUSeqAKBActor_OnAKBStateBeginFunc Parms{};

	Parms.BegineState = BegineState;
	Parms.EndState = EndState;
	Parms.IsForceImSet = IsForceImSet;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function b1-Managed.BGUSeqAKBActor.OnAKBStateEndFunc
// (Native, Public)
// Parameters:
// class FName                             BegineState                                            (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// class FName                             EndState                                               (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// uint8                                   IsForceImSet                                           (Parm, NoDestructor, HasGetValueTypeHash)

void ABGUSeqAKBActor::OnAKBStateEndFunc(class FName BegineState, class FName EndState, uint8 IsForceImSet)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BGUSeqAKBActor", "OnAKBStateEndFunc");

	Params::BGUSeqAKBActor_OnAKBStateEndFunc Parms{};

	Parms.BegineState = BegineState;
	Parms.EndState = EndState;
	Parms.IsForceImSet = IsForceImSet;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function b1-Managed.BGUSeqAKBActor.ToState
// (Native, Public, BlueprintCallable)
// Parameters:
// class FName                             TargetState                                            (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// float                                   InStateDelayEasingTime                                 (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// float                                   InStateOverideEasingTime                               (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ABGUSeqAKBActor::ToState(class FName TargetState, float InStateDelayEasingTime, float InStateOverideEasingTime)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BGUSeqAKBActor", "ToState");

	Params::BGUSeqAKBActor_ToState Parms{};

	Parms.TargetState = TargetState;
	Parms.InStateDelayEasingTime = InStateDelayEasingTime;
	Parms.InStateOverideEasingTime = InStateOverideEasingTime;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function b1-Managed.BGUSeqAKBActor.GSInit
// (Native, Public, BlueprintCallable)

void ABGUSeqAKBActor::GSInit()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BGUSeqAKBActor", "GSInit");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function b1-Managed.BGUSeqAKBActor.DoTick
// (Native, Public, BlueprintCallable)
// Parameters:
// float                                   DeltaSeconds                                           (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ABGUSeqAKBActor::DoTick(float DeltaSeconds)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BGUSeqAKBActor", "DoTick");

	Params::BGUSeqAKBActor_DoTick Parms{};

	Parms.DeltaSeconds = DeltaSeconds;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function b1-Managed.BGUEquipPreviewActorBase.OnConstructionCS
// (Native, Event, Public, Protected, BlueprintEvent)
// Parameters:
// struct FTransform                       Transform                                              (ConstParm, Parm, OutParm, ReferenceParm, IsPlainOldData, NoDestructor)

void ABGUEquipPreviewActorBase::OnConstructionCS(const struct FTransform& Transform)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BGUEquipPreviewActorBase", "OnConstructionCS");

	Params::BGUEquipPreviewActorBase_OnConstructionCS Parms{};

	Parms.Transform = std::move(Transform);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function b1-Managed.BGUTransPreviewActorBase.OnConstructionCS
// (Native, Event, Public, Protected, BlueprintEvent)
// Parameters:
// struct FTransform                       Transform                                              (ConstParm, Parm, OutParm, ReferenceParm, IsPlainOldData, NoDestructor)

void ABGUTransPreviewActorBase::OnConstructionCS(const struct FTransform& Transform)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BGUTransPreviewActorBase", "OnConstructionCS");

	Params::BGUTransPreviewActorBase_OnConstructionCS Parms{};

	Parms.Transform = std::move(Transform);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function b1-Managed.BGUBoundCircleComp.TickComponentGS
// (Native, Event, Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// float                                   DeltaTime                                              (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UBGUBoundCircleComp::TickComponentGS(float DeltaTime)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BGUBoundCircleComp", "TickComponentGS");

	Params::BGUBoundCircleComp_TickComponentGS Parms{};

	Parms.DeltaTime = DeltaTime;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function b1-Managed.BGUBoundCircleComp.BeginPlayGS
// (Native, Event, Public, BlueprintEvent)

void UBGUBoundCircleComp::BeginPlayGS()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BGUBoundCircleComp", "BeginPlayGS");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function b1-Managed.BGUBoundCircleComp.GSTmpBeginPlay
// (Native, Public, BlueprintCallable)

void UBGUBoundCircleComp::GSTmpBeginPlay()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BGUBoundCircleComp", "GSTmpBeginPlay");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function b1-Managed.BGUBoundCircleComp.SetGSEnabled
// (Native, Public, BlueprintCallable)
// Parameters:
// uint8                                   IsEnabled                                              (Parm, NoDestructor, HasGetValueTypeHash)

void UBGUBoundCircleComp::SetGSEnabled(uint8 IsEnabled)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BGUBoundCircleComp", "SetGSEnabled");

	Params::BGUBoundCircleComp_SetGSEnabled Parms{};

	Parms.IsEnabled = IsEnabled;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function b1-Managed.BGUBoundCircleComp.AddDragVec
// (Native, Public, BlueprintCallable)
// Parameters:
// struct FVector                          DragVectorInWorld                                      (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// float                                   DragFactor                                             (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UBGUBoundCircleComp::AddDragVec(const struct FVector& DragVectorInWorld, float DragFactor)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BGUBoundCircleComp", "AddDragVec");

	Params::BGUBoundCircleComp_AddDragVec Parms{};

	Parms.DragVectorInWorld = std::move(DragVectorInWorld);
	Parms.DragFactor = DragFactor;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function b1-Managed.BUS_LeavesSkillManageComp.TickComponentInCS
// (Native, Event, Public, BlueprintEvent)
// Parameters:
// float                                   DeltaTime                                              (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UBUS_LeavesSkillManageComp::TickComponentInCS(float DeltaTime)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BUS_LeavesSkillManageComp", "TickComponentInCS");

	Params::BUS_LeavesSkillManageComp_TickComponentInCS Parms{};

	Parms.DeltaTime = DeltaTime;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function b1-Managed.BUS_LeavesSkillManageComp.BeginPlayInCS
// (Native, Event, Public, BlueprintEvent)

void UBUS_LeavesSkillManageComp::BeginPlayInCS()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BUS_LeavesSkillManageComp", "BeginPlayInCS");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function b1-Managed.BUS_LeavesSkillManageComp.EndPlayInCS
// (Native, Event, Public, BlueprintEvent)
// Parameters:
// EEndPlayReason                          EndPlayReason                                          (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UBUS_LeavesSkillManageComp::EndPlayInCS(EEndPlayReason EndPlayReason)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BUS_LeavesSkillManageComp", "EndPlayInCS");

	Params::BUS_LeavesSkillManageComp_EndPlayInCS Parms{};

	Parms.EndPlayReason = EndPlayReason;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function b1-Managed.BGUFunctionLibraryManaged.FixFontForPIEPreviewInEditorDebug
// (Native, Static, Public, BlueprintCallable)
// Parameters:
// class UUserWidget*                      TargetWidget                                           (ExportObject, Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UBGUFunctionLibraryManaged::FixFontForPIEPreviewInEditorDebug(class UUserWidget* TargetWidget)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("BGUFunctionLibraryManaged", "FixFontForPIEPreviewInEditorDebug");

	Params::BGUFunctionLibraryManaged_FixFontForPIEPreviewInEditorDebug Parms{};

	Parms.TargetWidget = TargetWidget;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function b1-Managed.BGUFunctionLibraryManaged.BatchReplaceMapSpawnerWithTamer
// (Native, Static, Public, BlueprintCallable)
// Parameters:
// class UObject*                          WorldContext                                           (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UBGUFunctionLibraryManaged::BatchReplaceMapSpawnerWithTamer(class UObject* WorldContext)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("BGUFunctionLibraryManaged", "BatchReplaceMapSpawnerWithTamer");

	Params::BGUFunctionLibraryManaged_BatchReplaceMapSpawnerWithTamer Parms{};

	Parms.WorldContext = WorldContext;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function b1-Managed.BGUFunctionLibraryManaged.IsContainNonexistentTaskStage
// (Native, Static, Public, HasOutParams, BlueprintCallable)
// Parameters:
// class UBED_CalliopeAssetBase*           InAsset                                                (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// uint8                                   ReturnValue                                            (Parm, OutParm, ReturnParm, NoDestructor, HasGetValueTypeHash)

uint8 UBGUFunctionLibraryManaged::IsContainNonexistentTaskStage(class UBED_CalliopeAssetBase* InAsset)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("BGUFunctionLibraryManaged", "IsContainNonexistentTaskStage");

	Params::BGUFunctionLibraryManaged_IsContainNonexistentTaskStage Parms{};

	Parms.InAsset = InAsset;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function b1-Managed.BGUFunctionLibraryManaged.SetShaderPipelineCacheEnabled
// (Native, Static, Public, BlueprintCallable)
// Parameters:
// class UObject*                          WorldContext                                           (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// uint8                                   IsEnable                                               (Parm, NoDestructor, HasGetValueTypeHash)
// class APlayerController*                TargetPlayerController                                 (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UBGUFunctionLibraryManaged::SetShaderPipelineCacheEnabled(class UObject* WorldContext, uint8 IsEnable, class APlayerController* TargetPlayerController)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("BGUFunctionLibraryManaged", "SetShaderPipelineCacheEnabled");

	Params::BGUFunctionLibraryManaged_SetShaderPipelineCacheEnabled Parms{};

	Parms.WorldContext = WorldContext;
	Parms.IsEnable = IsEnable;
	Parms.TargetPlayerController = TargetPlayerController;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function b1-Managed.BGUFunctionLibraryManaged.AutoGenTamerFromUnitBlueprint
// (Native, Static, Public, BlueprintCallable)
// Parameters:
// class UObject*                          WorldContext                                           (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// class FString                           Folder                                                 (Parm, ZeroConstructor, HasGetValueTypeHash)
// uint8                                   bRecursive                                             (Parm, NoDestructor, HasGetValueTypeHash)

void UBGUFunctionLibraryManaged::AutoGenTamerFromUnitBlueprint(class UObject* WorldContext, const class FString& Folder, uint8 bRecursive)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("BGUFunctionLibraryManaged", "AutoGenTamerFromUnitBlueprint");

	Params::BGUFunctionLibraryManaged_AutoGenTamerFromUnitBlueprint Parms{};

	Parms.WorldContext = WorldContext;
	Parms.Folder = std::move(Folder);
	Parms.bRecursive = bRecursive;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function b1-Managed.BGUFunctionLibraryManaged.BatchReplaceMapUnitWithTamer
// (Native, Static, Public, BlueprintCallable)
// Parameters:
// class UObject*                          WorldContext                                           (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UBGUFunctionLibraryManaged::BatchReplaceMapUnitWithTamer(class UObject* WorldContext)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("BGUFunctionLibraryManaged", "BatchReplaceMapUnitWithTamer");

	Params::BGUFunctionLibraryManaged_BatchReplaceMapUnitWithTamer Parms{};

	Parms.WorldContext = WorldContext;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function b1-Managed.BGUFunctionLibraryManaged.ConvertToTamerPathFromBPPath
// (Native, Static, Public, HasOutParams, BlueprintCallable)
// Parameters:
// class UObject*                          WorldContext                                           (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// class FString                           BPPath                                                 (Parm, ZeroConstructor, HasGetValueTypeHash)
// class FString                           ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash)

class FString UBGUFunctionLibraryManaged::ConvertToTamerPathFromBPPath(class UObject* WorldContext, const class FString& BPPath)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("BGUFunctionLibraryManaged", "ConvertToTamerPathFromBPPath");

	Params::BGUFunctionLibraryManaged_ConvertToTamerPathFromBPPath Parms{};

	Parms.WorldContext = WorldContext;
	Parms.BPPath = std::move(BPPath);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function b1-Managed.BGUFunctionLibraryManaged.UnRegGSGridConScreenAdapter
// (Native, Static, Public, BlueprintCallable)
// Parameters:
// class UObject*                          WorldContext                                           (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// class UGSGridConScreenAdapter*          RefGSGridConScreenAdapter                              (ExportObject, Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UBGUFunctionLibraryManaged::UnRegGSGridConScreenAdapter(class UObject* WorldContext, class UGSGridConScreenAdapter* RefGSGridConScreenAdapter)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("BGUFunctionLibraryManaged", "UnRegGSGridConScreenAdapter");

	Params::BGUFunctionLibraryManaged_UnRegGSGridConScreenAdapter Parms{};

	Parms.WorldContext = WorldContext;
	Parms.RefGSGridConScreenAdapter = RefGSGridConScreenAdapter;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function b1-Managed.BGUFunctionLibraryManaged.IsAnyStoryNodeHasGainItem
// (Native, Static, Public, HasOutParams, BlueprintCallable)
// Parameters:
// class UBED_CalliopeAssetBase*           InAsset                                                (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// uint8                                   ReturnValue                                            (Parm, OutParm, ReturnParm, NoDestructor, HasGetValueTypeHash)

uint8 UBGUFunctionLibraryManaged::IsAnyStoryNodeHasGainItem(class UBED_CalliopeAssetBase* InAsset)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("BGUFunctionLibraryManaged", "IsAnyStoryNodeHasGainItem");

	Params::BGUFunctionLibraryManaged_IsAnyStoryNodeHasGainItem Parms{};

	Parms.InAsset = InAsset;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function b1-Managed.BGUFunctionLibraryManaged.BGUChangeChapterLightBase
// (Native, Static, Public, BlueprintCallable)
// Parameters:
// class UObject*                          WorldContext                                           (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// float                                   LightBase                                              (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UBGUFunctionLibraryManaged::BGUChangeChapterLightBase(class UObject* WorldContext, float LightBase)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("BGUFunctionLibraryManaged", "BGUChangeChapterLightBase");

	Params::BGUFunctionLibraryManaged_BGUChangeChapterLightBase Parms{};

	Parms.WorldContext = WorldContext;
	Parms.LightBase = LightBase;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function b1-Managed.BGUFunctionLibraryManaged.RegGSGridConScreenAdapter
// (Native, Static, Public, BlueprintCallable)
// Parameters:
// class UObject*                          WorldContext                                           (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// class UGSGridConScreenAdapter*          RefGSGridConScreenAdapter                              (ExportObject, Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UBGUFunctionLibraryManaged::RegGSGridConScreenAdapter(class UObject* WorldContext, class UGSGridConScreenAdapter* RefGSGridConScreenAdapter)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("BGUFunctionLibraryManaged", "RegGSGridConScreenAdapter");

	Params::BGUFunctionLibraryManaged_RegGSGridConScreenAdapter Parms{};

	Parms.WorldContext = WorldContext;
	Parms.RefGSGridConScreenAdapter = RefGSGridConScreenAdapter;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function b1-Managed.BGUFunctionLibraryManaged.CreateTamerFromUnitClass
// (Native, Static, Public, HasOutParams, BlueprintCallable)
// Parameters:
// class UObject*                          WorldContext                                           (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// class UClass*                           UnitClass                                              (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// class UObject*                          TamerObject                                            (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// class UClass*                           TamerClass                                             (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// uint8                                   ReturnValue                                            (Parm, OutParm, ReturnParm, NoDestructor, HasGetValueTypeHash)

uint8 UBGUFunctionLibraryManaged::CreateTamerFromUnitClass(class UObject* WorldContext, class UClass* UnitClass, class UObject** TamerObject, class UClass** TamerClass)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("BGUFunctionLibraryManaged", "CreateTamerFromUnitClass");

	Params::BGUFunctionLibraryManaged_CreateTamerFromUnitClass Parms{};

	Parms.WorldContext = WorldContext;
	Parms.UnitClass = UnitClass;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	if (TamerObject != nullptr)
		*TamerObject = Parms.TamerObject;

	if (TamerClass != nullptr)
		*TamerClass = Parms.TamerClass;

	return Parms.ReturnValue;
}


// Function b1-Managed.BGUFunctionLibraryManaged.CreateTamerFromBPPath
// (Native, Static, Public, HasOutParams, BlueprintCallable)
// Parameters:
// class UObject*                          WorldContext                                           (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// class FString                           BPPath                                                 (Parm, ZeroConstructor, HasGetValueTypeHash)
// class UObject*                          TamerObject                                            (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// class UClass*                           TamerClass                                             (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// uint8                                   ReturnValue                                            (Parm, OutParm, ReturnParm, NoDestructor, HasGetValueTypeHash)

uint8 UBGUFunctionLibraryManaged::CreateTamerFromBPPath(class UObject* WorldContext, const class FString& BPPath, class UObject** TamerObject, class UClass** TamerClass)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("BGUFunctionLibraryManaged", "CreateTamerFromBPPath");

	Params::BGUFunctionLibraryManaged_CreateTamerFromBPPath Parms{};

	Parms.WorldContext = WorldContext;
	Parms.BPPath = std::move(BPPath);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	if (TamerObject != nullptr)
		*TamerObject = Parms.TamerObject;

	if (TamerClass != nullptr)
		*TamerClass = Parms.TamerClass;

	return Parms.ReturnValue;
}


// Function b1-Managed.BGUFunctionLibraryManaged.FixTransactionalTamer
// (Native, Static, Public, BlueprintCallable)
// Parameters:
// class UObject*                          WorldContext                                           (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UBGUFunctionLibraryManaged::FixTransactionalTamer(class UObject* WorldContext)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("BGUFunctionLibraryManaged", "FixTransactionalTamer");

	Params::BGUFunctionLibraryManaged_FixTransactionalTamer Parms{};

	Parms.WorldContext = WorldContext;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function b1-Managed.BGUFunctionLibraryManaged.BGUActiveUIBlackOut
// (Native, Static, Public, BlueprintCallable)
// Parameters:
// class UObject*                          WorldContext                                           (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// uint8                                   IsActive                                               (Parm, NoDestructor, HasGetValueTypeHash)

void UBGUFunctionLibraryManaged::BGUActiveUIBlackOut(class UObject* WorldContext, uint8 IsActive)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("BGUFunctionLibraryManaged", "BGUActiveUIBlackOut");

	Params::BGUFunctionLibraryManaged_BGUActiveUIBlackOut Parms{};

	Parms.WorldContext = WorldContext;
	Parms.IsActive = IsActive;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function b1-Managed.BGUFunctionLibraryManaged.FindAllNodeByClass
// (Native, Static, Public, HasOutParams, BlueprintCallable)
// Parameters:
// class UBED_CalliopeAssetBase*           InAsset                                                (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// class UClass*                           NodeClass                                              (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// TArray<class UBED_CalliopeNodeBae*>     Nodes                                                  (Parm, OutParm)

void UBGUFunctionLibraryManaged::FindAllNodeByClass(class UBED_CalliopeAssetBase* InAsset, class UClass* NodeClass, TArray<class UBED_CalliopeNodeBae*>* Nodes)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("BGUFunctionLibraryManaged", "FindAllNodeByClass");

	Params::BGUFunctionLibraryManaged_FindAllNodeByClass Parms{};

	Parms.InAsset = InAsset;
	Parms.NodeClass = NodeClass;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	if (Nodes != nullptr)
		*Nodes = std::move(Parms.Nodes);
}


// Function b1-Managed.BGUFunctionLibraryManaged.BGUSaveTempWidget
// (Native, Static, Public, BlueprintCallable)
// Parameters:
// class UUserWidget*                      TmpWidget                                              (ExportObject, Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UBGUFunctionLibraryManaged::BGUSaveTempWidget(class UUserWidget* TmpWidget)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("BGUFunctionLibraryManaged", "BGUSaveTempWidget");

	Params::BGUFunctionLibraryManaged_BGUSaveTempWidget Parms{};

	Parms.TmpWidget = TmpWidget;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function b1-Managed.BGUFunctionLibraryManaged.BGUSetPageActive
// (Native, Static, Public, BlueprintCallable)
// Parameters:
// class UObject*                          WorldContext                                           (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// EUIPageID                               PageId                                                 (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// uint8                                   IsActive                                               (Parm, NoDestructor, HasGetValueTypeHash)

void UBGUFunctionLibraryManaged::BGUSetPageActive(class UObject* WorldContext, EUIPageID PageId, uint8 IsActive)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("BGUFunctionLibraryManaged", "BGUSetPageActive");

	Params::BGUFunctionLibraryManaged_BGUSetPageActive Parms{};

	Parms.WorldContext = WorldContext;
	Parms.PageId = PageId;
	Parms.IsActive = IsActive;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function b1-Managed.BGUFunctionLibraryManaged.FindOrLoadClass
// (Native, Static, Public, HasOutParams, BlueprintCallable)
// Parameters:
// class FString                           ClassName                                              (Parm, ZeroConstructor, HasGetValueTypeHash)
// class UClass*                           ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

class UClass* UBGUFunctionLibraryManaged::FindOrLoadClass(const class FString& ClassName)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("BGUFunctionLibraryManaged", "FindOrLoadClass");

	Params::BGUFunctionLibraryManaged_FindOrLoadClass Parms{};

	Parms.ClassName = std::move(ClassName);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function b1-Managed.BGUFunctionLibraryManaged.BGUSwitchPage
// (Native, Static, Public, BlueprintCallable)
// Parameters:
// class UObject*                          WorldContext                                           (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// EUIPageID                               PageId                                                 (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UBGUFunctionLibraryManaged::BGUSwitchPage(class UObject* WorldContext, EUIPageID PageId)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("BGUFunctionLibraryManaged", "BGUSwitchPage");

	Params::BGUFunctionLibraryManaged_BGUSwitchPage Parms{};

	Parms.WorldContext = WorldContext;
	Parms.PageId = PageId;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function b1-Managed.BGUFunctionLibraryManaged.RunScriptGM
// (Native, Static, Public, BlueprintCallable)
// Parameters:
// class FString                           GMCommand                                              (Parm, ZeroConstructor, HasGetValueTypeHash)
// class UObject*                          WorldContext                                           (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UBGUFunctionLibraryManaged::RunScriptGM(const class FString& GMCommand, class UObject* WorldContext)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("BGUFunctionLibraryManaged", "RunScriptGM");

	Params::BGUFunctionLibraryManaged_RunScriptGM Parms{};

	Parms.GMCommand = std::move(GMCommand);
	Parms.WorldContext = WorldContext;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function b1-Managed.BGWConsoleCommands.GenerateArrow
// (Native, Static, Public, Private)

void UBGWConsoleCommands::GenerateArrow()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("BGWConsoleCommands", "GenerateArrow");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function b1-Managed.BGW_PlayerController_U3.SetupInputComponentCS
// (Native, Event, Public, Protected, BlueprintEvent)

void ABGW_PlayerController_U3::SetupInputComponentCS()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BGW_PlayerController_U3", "SetupInputComponentCS");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function b1-Managed.BGW_PlayerController_U3.ProcessPlayerInputCS
// (Native, Event, Public, Protected, BlueprintEvent)
// Parameters:
// float                                   DeltaTime                                              (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// uint8                                   bGamePaused                                            (Parm, NoDestructor, HasGetValueTypeHash)

void ABGW_PlayerController_U3::ProcessPlayerInputCS(float DeltaTime, uint8 bGamePaused)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BGW_PlayerController_U3", "ProcessPlayerInputCS");

	Params::BGW_PlayerController_U3_ProcessPlayerInputCS Parms{};

	Parms.DeltaTime = DeltaTime;
	Parms.bGamePaused = bGamePaused;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function b1-Managed.BGW_PlayerController_U3.OnAxisMoveSidewaysGamepad
// (Native, Public, Private)
// Parameters:
// float                                   AxisValue                                              (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ABGW_PlayerController_U3::OnAxisMoveSidewaysGamepad(float AxisValue)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BGW_PlayerController_U3", "OnAxisMoveSidewaysGamepad");

	Params::BGW_PlayerController_U3_OnAxisMoveSidewaysGamepad Parms{};

	Parms.AxisValue = AxisValue;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function b1-Managed.BGW_PlayerController_U3.OnAxisMoveForwardGamepad
// (Native, Public, Private)
// Parameters:
// float                                   AxisValue                                              (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ABGW_PlayerController_U3::OnAxisMoveForwardGamepad(float AxisValue)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BGW_PlayerController_U3", "OnAxisMoveForwardGamepad");

	Params::BGW_PlayerController_U3_OnAxisMoveForwardGamepad Parms{};

	Parms.AxisValue = AxisValue;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function b1-Managed.BGW_PlayerController_U3.OnAxisMoveSideways
// (Native, Public, Private)
// Parameters:
// float                                   AxisValue                                              (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ABGW_PlayerController_U3::OnAxisMoveSideways(float AxisValue)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BGW_PlayerController_U3", "OnAxisMoveSideways");

	Params::BGW_PlayerController_U3_OnAxisMoveSideways Parms{};

	Parms.AxisValue = AxisValue;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function b1-Managed.BGW_PlayerController_U3.OnAxisMoveForward
// (Native, Public, Private)
// Parameters:
// float                                   AxisValue                                              (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ABGW_PlayerController_U3::OnAxisMoveForward(float AxisValue)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BGW_PlayerController_U3", "OnAxisMoveForward");

	Params::BGW_PlayerController_U3_OnAxisMoveForward Parms{};

	Parms.AxisValue = AxisValue;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function b1-Managed.BGW_ChapterViewMgrV2.OnEntranceSeqFinished
// (Native, Public, Private)

void UBGW_ChapterViewMgrV2::OnEntranceSeqFinished()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BGW_ChapterViewMgrV2", "OnEntranceSeqFinished");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function b1-Managed.BGW_ChapterViewMgrV2.OnLeaveSeqFinished
// (Native, Public, Private)

void UBGW_ChapterViewMgrV2::OnLeaveSeqFinished()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BGW_ChapterViewMgrV2", "OnLeaveSeqFinished");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function b1-Managed.BGW_ChapterViewMgrV2.OnAKBStateEndFunc
// (Native, Public)
// Parameters:
// class FName                             BeginStateName                                         (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// class FName                             EndStateName                                           (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// uint8                                   IsForceImSet                                           (Parm, NoDestructor, HasGetValueTypeHash)

void UBGW_ChapterViewMgrV2::OnAKBStateEndFunc(class FName BeginStateName, class FName EndStateName, uint8 IsForceImSet)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BGW_ChapterViewMgrV2", "OnAKBStateEndFunc");

	Params::BGW_ChapterViewMgrV2_OnAKBStateEndFunc Parms{};

	Parms.BeginStateName = BeginStateName;
	Parms.EndStateName = EndStateName;
	Parms.IsForceImSet = IsForceImSet;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function b1-Managed.BGW_ChapterViewMgr.OnSurpriseSeqFinished
// (Native, Public, Private)

void UBGW_ChapterViewMgr::OnSurpriseSeqFinished()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BGW_ChapterViewMgr", "OnSurpriseSeqFinished");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function b1-Managed.BGW_ChapterViewMgr.OnEntranceSeqFinished
// (Native, Public, Private)

void UBGW_ChapterViewMgr::OnEntranceSeqFinished()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BGW_ChapterViewMgr", "OnEntranceSeqFinished");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function b1-Managed.BGW_ChapterViewMgr.OnChapterSeqFinished
// (Native, Public, Private)

void UBGW_ChapterViewMgr::OnChapterSeqFinished()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BGW_ChapterViewMgr", "OnChapterSeqFinished");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function b1-Managed.BGW_ChapterViewMgr.OnLeaveSeqFinished
// (Native, Public, Private)

void UBGW_ChapterViewMgr::OnLeaveSeqFinished()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BGW_ChapterViewMgr", "OnLeaveSeqFinished");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function b1-Managed.BGW_ChapterViewMgr.OnAKBStateEndFunc
// (Native, Public)
// Parameters:
// class FName                             BeginStateName                                         (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// class FName                             EndStateName                                           (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// uint8                                   IsForceImSet                                           (Parm, NoDestructor, HasGetValueTypeHash)

void UBGW_ChapterViewMgr::OnAKBStateEndFunc(class FName BeginStateName, class FName EndStateName, uint8 IsForceImSet)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BGW_ChapterViewMgr", "OnAKBStateEndFunc");

	Params::BGW_ChapterViewMgr_OnAKBStateEndFunc Parms{};

	Parms.BeginStateName = BeginStateName;
	Parms.EndStateName = EndStateName;
	Parms.IsForceImSet = IsForceImSet;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function b1-Managed.BED_FSMAsset.GetExtraDefaultOutputNodesInBranchGraph
// (Native, Event, Public, HasOutParams, BlueprintEvent, Const)
// Parameters:
// TArray<class UClass*>                   OutClasses                                             (Parm, OutParm)
// int32                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

int32 UBED_FSMAsset::GetExtraDefaultOutputNodesInBranchGraph(TArray<class UClass*>* OutClasses) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BED_FSMAsset", "GetExtraDefaultOutputNodesInBranchGraph");

	Params::BED_FSMAsset_GetExtraDefaultOutputNodesInBranchGraph Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	if (OutClasses != nullptr)
		*OutClasses = std::move(Parms.OutClasses);

	return Parms.ReturnValue;
}


// Function b1-Managed.BED_FSMAsset.GetExtraDefaultInputNodesInBranchGraph
// (Native, Event, Public, HasOutParams, BlueprintEvent, Const)
// Parameters:
// TArray<class UClass*>                   OutClasses                                             (Parm, OutParm)
// int32                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

int32 UBED_FSMAsset::GetExtraDefaultInputNodesInBranchGraph(TArray<class UClass*>* OutClasses) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BED_FSMAsset", "GetExtraDefaultInputNodesInBranchGraph");

	Params::BED_FSMAsset_GetExtraDefaultInputNodesInBranchGraph Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	if (OutClasses != nullptr)
		*OutClasses = std::move(Parms.OutClasses);

	return Parms.ReturnValue;
}


// Function b1-Managed.BED_FSMAsset.GetRerouteNodeClassInBranchGraph
// (Native, Event, Public, HasOutParams, BlueprintEvent, Const)
// Parameters:
// class UClass*                           ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

class UClass* UBED_FSMAsset::GetRerouteNodeClassInBranchGraph() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BED_FSMAsset", "GetRerouteNodeClassInBranchGraph");

	Params::BED_FSMAsset_GetRerouteNodeClassInBranchGraph Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function b1-Managed.BED_FSMAsset.GetStartNodeClassInBranchGraph
// (Native, Event, Public, HasOutParams, BlueprintEvent, Const)
// Parameters:
// class UClass*                           ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

class UClass* UBED_FSMAsset::GetStartNodeClassInBranchGraph() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BED_FSMAsset", "GetStartNodeClassInBranchGraph");

	Params::BED_FSMAsset_GetStartNodeClassInBranchGraph Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function b1-Managed.BED_FSMAsset.GetExtraDefaultOutputNodes
// (Native, Event, Public, HasOutParams, BlueprintEvent, Const)
// Parameters:
// TArray<class UClass*>                   OutClasses                                             (Parm, OutParm)
// int32                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

int32 UBED_FSMAsset::GetExtraDefaultOutputNodes(TArray<class UClass*>* OutClasses) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BED_FSMAsset", "GetExtraDefaultOutputNodes");

	Params::BED_FSMAsset_GetExtraDefaultOutputNodes Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	if (OutClasses != nullptr)
		*OutClasses = std::move(Parms.OutClasses);

	return Parms.ReturnValue;
}


// Function b1-Managed.BED_FSMAsset.GetExtraDefaultInputNodes
// (Native, Event, Public, HasOutParams, BlueprintEvent, Const)
// Parameters:
// TArray<class UClass*>                   OutClasses                                             (Parm, OutParm)
// int32                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

int32 UBED_FSMAsset::GetExtraDefaultInputNodes(TArray<class UClass*>* OutClasses) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BED_FSMAsset", "GetExtraDefaultInputNodes");

	Params::BED_FSMAsset_GetExtraDefaultInputNodes Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	if (OutClasses != nullptr)
		*OutClasses = std::move(Parms.OutClasses);

	return Parms.ReturnValue;
}


// Function b1-Managed.BED_FSMAsset.GetRerouteNodeClass
// (Native, Event, Public, HasOutParams, BlueprintEvent, Const)
// Parameters:
// class UClass*                           ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

class UClass* UBED_FSMAsset::GetRerouteNodeClass() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BED_FSMAsset", "GetRerouteNodeClass");

	Params::BED_FSMAsset_GetRerouteNodeClass Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function b1-Managed.BED_FSMAsset.GetStartNodeClass
// (Native, Event, Public, HasOutParams, BlueprintEvent, Const)
// Parameters:
// class UClass*                           ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

class UClass* UBED_FSMAsset::GetStartNodeClass() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BED_FSMAsset", "GetStartNodeClass");

	Params::BED_FSMAsset_GetStartNodeClass Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function b1-Managed.BED_FSMAsset.GetViewType
// (Native, Event, Public, HasOutParams, BlueprintEvent, Const)
// Parameters:
// ECalliopeViewType                       ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

ECalliopeViewType UBED_FSMAsset::GetViewType() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BED_FSMAsset", "GetViewType");

	Params::BED_FSMAsset_GetViewType Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function b1-Managed.BED_BehaviorNode_BeKilled.GetNodeDescriptionInCS
// (Native, Event, Public, HasOutParams, BlueprintEvent, Const)
// Parameters:
// class FString                           ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash)

class FString UBED_BehaviorNode_BeKilled::GetNodeDescriptionInCS() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BED_BehaviorNode_BeKilled", "GetNodeDescriptionInCS");

	Params::BED_BehaviorNode_BeKilled_GetNodeDescriptionInCS Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function b1-Managed.BED_BehaviorNode_BeKilled.IsSupportViewType
// (Native, Event, Public, HasOutParams, BlueprintEvent, Const)
// Parameters:
// ECalliopeViewType                       InViewType                                             (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// uint8                                   ReturnValue                                            (Parm, OutParm, ReturnParm, NoDestructor, HasGetValueTypeHash)

uint8 UBED_BehaviorNode_BeKilled::IsSupportViewType(const ECalliopeViewType& InViewType) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BED_BehaviorNode_BeKilled", "IsSupportViewType");

	Params::BED_BehaviorNode_BeKilled_IsSupportViewType Parms{};

	Parms.InViewType = InViewType;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function b1-Managed.BED_BehaviorNode_GenAndCachePointSet.GetNodeDescriptionInCS
// (Native, Event, Public, HasOutParams, BlueprintEvent, Const)
// Parameters:
// class FString                           ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash)

class FString UBED_BehaviorNode_GenAndCachePointSet::GetNodeDescriptionInCS() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BED_BehaviorNode_GenAndCachePointSet", "GetNodeDescriptionInCS");

	Params::BED_BehaviorNode_GenAndCachePointSet_GetNodeDescriptionInCS Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function b1-Managed.BED_BehaviorNode_TriggerSkillEffect.GetNodeDescriptionInCS
// (Native, Event, Public, HasOutParams, BlueprintEvent, Const)
// Parameters:
// class FString                           ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash)

class FString UBED_BehaviorNode_TriggerSkillEffect::GetNodeDescriptionInCS() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BED_BehaviorNode_TriggerSkillEffect", "GetNodeDescriptionInCS");

	Params::BED_BehaviorNode_TriggerSkillEffect_GetNodeDescriptionInCS Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function b1-Managed.BED_MovieNode_LoadOrUnloadStreamingLevel.GetNodeDescriptionInCS
// (Native, Event, Public, HasOutParams, BlueprintEvent, Const)
// Parameters:
// class FString                           ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash)

class FString UBED_MovieNode_LoadOrUnloadStreamingLevel::GetNodeDescriptionInCS() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BED_MovieNode_LoadOrUnloadStreamingLevel", "GetNodeDescriptionInCS");

	Params::BED_MovieNode_LoadOrUnloadStreamingLevel_GetNodeDescriptionInCS Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function b1-Managed.BED_MovieNode_PlayFromMarkedFrame.GetNodeDescriptionInCS
// (Native, Event, Public, HasOutParams, BlueprintEvent, Const)
// Parameters:
// class FString                           ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash)

class FString UBED_MovieNode_PlayFromMarkedFrame::GetNodeDescriptionInCS() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BED_MovieNode_PlayFromMarkedFrame", "GetNodeDescriptionInCS");

	Params::BED_MovieNode_PlayFromMarkedFrame_GetNodeDescriptionInCS Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function b1-Managed.BED_ProcessStateNode_ObserveSequence.GetNodeDescriptionInCS
// (Native, Event, Public, HasOutParams, BlueprintEvent, Const)
// Parameters:
// class FString                           ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash)

class FString UBED_ProcessStateNode_ObserveSequence::GetNodeDescriptionInCS() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BED_ProcessStateNode_ObserveSequence", "GetNodeDescriptionInCS");

	Params::BED_ProcessStateNode_ObserveSequence_GetNodeDescriptionInCS Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function b1-Managed.BED_ProcessMachineNode_NPCState.GetBranchGraphToEditInCS
// (Native, Event, Public, HasOutParams, BlueprintEvent)
// Parameters:
// class FString                           OutBranchGraphIdentifier                               (Parm, OutParm, ZeroConstructor, HasGetValueTypeHash)
// uint8                                   ReturnValue                                            (Parm, OutParm, ReturnParm, NoDestructor, HasGetValueTypeHash)

uint8 UBED_ProcessMachineNode_NPCState::GetBranchGraphToEditInCS(class FString* OutBranchGraphIdentifier)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BED_ProcessMachineNode_NPCState", "GetBranchGraphToEditInCS");

	Params::BED_ProcessMachineNode_NPCState_GetBranchGraphToEditInCS Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	if (OutBranchGraphIdentifier != nullptr)
		*OutBranchGraphIdentifier = std::move(Parms.OutBranchGraphIdentifier);

	return Parms.ReturnValue;
}


// Function b1-Managed.BED_ProcessMachineNode_NPCState.GetContextOutputsInCS
// (Native, Event, Public, HasOutParams, BlueprintEvent)
// Parameters:
// TArray<class FName>                     ReturnValue                                            (Parm, OutParm, ReturnParm)

TArray<class FName> UBED_ProcessMachineNode_NPCState::GetContextOutputsInCS()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BED_ProcessMachineNode_NPCState", "GetContextOutputsInCS");

	Params::BED_ProcessMachineNode_NPCState_GetContextOutputsInCS Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function b1-Managed.BED_ProcessMachineNode_NPCState.PostPropertyChanged
// (Native, Event, Public, BlueprintEvent)
// Parameters:
// class FString                           MemberName                                             (Parm, ZeroConstructor, HasGetValueTypeHash)
// class FString                           PropertyName                                           (Parm, ZeroConstructor, HasGetValueTypeHash)

void UBED_ProcessMachineNode_NPCState::PostPropertyChanged(const class FString& MemberName, const class FString& PropertyName)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BED_ProcessMachineNode_NPCState", "PostPropertyChanged");

	Params::BED_ProcessMachineNode_NPCState_PostPropertyChanged Parms{};

	Parms.MemberName = std::move(MemberName);
	Parms.PropertyName = std::move(PropertyName);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function b1-Managed.BED_ProcessMachineNode_NPCState.GetNodeDescriptionInCS
// (Native, Event, Public, HasOutParams, BlueprintEvent, Const)
// Parameters:
// class FString                           ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash)

class FString UBED_ProcessMachineNode_NPCState::GetNodeDescriptionInCS() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BED_ProcessMachineNode_NPCState", "GetNodeDescriptionInCS");

	Params::BED_ProcessMachineNode_NPCState_GetNodeDescriptionInCS Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function b1-Managed.BED_ProcessMachineNode_SaveArchive.GetNodeDescriptionInCS
// (Native, Event, Public, HasOutParams, BlueprintEvent, Const)
// Parameters:
// class FString                           ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash)

class FString UBED_ProcessMachineNode_SaveArchive::GetNodeDescriptionInCS() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BED_ProcessMachineNode_SaveArchive", "GetNodeDescriptionInCS");

	Params::BED_ProcessMachineNode_SaveArchive_GetNodeDescriptionInCS Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function b1-Managed.BED_QuestNode_QuitGame.GetNodeDescriptionInCS
// (Native, Event, Public, HasOutParams, BlueprintEvent, Const)
// Parameters:
// class FString                           ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash)

class FString UBED_QuestNode_QuitGame::GetNodeDescriptionInCS() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BED_QuestNode_QuitGame", "GetNodeDescriptionInCS");

	Params::BED_QuestNode_QuitGame_GetNodeDescriptionInCS Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function b1-Managed.BED_QuestNode_PlayerCondition.PostPropertyChanged
// (Native, Event, Public, BlueprintEvent)
// Parameters:
// class FString                           MemberName                                             (Parm, ZeroConstructor, HasGetValueTypeHash)
// class FString                           PropertyName                                           (Parm, ZeroConstructor, HasGetValueTypeHash)

void UBED_QuestNode_PlayerCondition::PostPropertyChanged(const class FString& MemberName, const class FString& PropertyName)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BED_QuestNode_PlayerCondition", "PostPropertyChanged");

	Params::BED_QuestNode_PlayerCondition_PostPropertyChanged Parms{};

	Parms.MemberName = std::move(MemberName);
	Parms.PropertyName = std::move(PropertyName);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function b1-Managed.BED_QuestNode_PlayerCondition.GetNodeDescriptionInCS
// (Native, Event, Public, HasOutParams, BlueprintEvent, Const)
// Parameters:
// class FString                           ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash)

class FString UBED_QuestNode_PlayerCondition::GetNodeDescriptionInCS() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BED_QuestNode_PlayerCondition", "GetNodeDescriptionInCS");

	Params::BED_QuestNode_PlayerCondition_GetNodeDescriptionInCS Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function b1-Managed.BED_QuestNode_PlayerMoveToTrainDummyTarget.GetNodeDescriptionInCS
// (Native, Event, Public, HasOutParams, BlueprintEvent, Const)
// Parameters:
// class FString                           ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash)

class FString UBED_QuestNode_PlayerMoveToTrainDummyTarget::GetNodeDescriptionInCS() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BED_QuestNode_PlayerMoveToTrainDummyTarget", "GetNodeDescriptionInCS");

	Params::BED_QuestNode_PlayerMoveToTrainDummyTarget_GetNodeDescriptionInCS Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function b1-Managed.BED_QuestNode_PlayerLockTrainDummyTarget.GetNodeDescriptionInCS
// (Native, Event, Public, HasOutParams, BlueprintEvent, Const)
// Parameters:
// class FString                           ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash)

class FString UBED_QuestNode_PlayerLockTrainDummyTarget::GetNodeDescriptionInCS() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BED_QuestNode_PlayerLockTrainDummyTarget", "GetNodeDescriptionInCS");

	Params::BED_QuestNode_PlayerLockTrainDummyTarget_GetNodeDescriptionInCS Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function b1-Managed.BED_QuestNode_UnitTeleport.GetNodeDescriptionInCS
// (Native, Event, Public, HasOutParams, BlueprintEvent, Const)
// Parameters:
// class FString                           ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash)

class FString UBED_QuestNode_UnitTeleport::GetNodeDescriptionInCS() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BED_QuestNode_UnitTeleport", "GetNodeDescriptionInCS");

	Params::BED_QuestNode_UnitTeleport_GetNodeDescriptionInCS Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function b1-Managed.GSUIMiscUtil.GSUpdateABSMatSrcPosSizeForImg
// (Native, Static, Public, BlueprintCallable)
// Parameters:
// class UImage*                           RefImage                                               (ExportObject, Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UGSUIMiscUtil::GSUpdateABSMatSrcPosSizeForImg(class UImage* RefImage)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("GSUIMiscUtil", "GSUpdateABSMatSrcPosSizeForImg");

	Params::GSUIMiscUtil_GSUpdateABSMatSrcPosSizeForImg Parms{};

	Parms.RefImage = RefImage;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function b1-Managed.GSUIMiscUtil.GSUpdateABSMatCoverPosForImg
// (Native, Static, Public, BlueprintCallable)
// Parameters:
// class UImage*                           RefImage                                               (ExportObject, Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// struct FVector2D                        ScreenRefPos                                           (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UGSUIMiscUtil::GSUpdateABSMatCoverPosForImg(class UImage* RefImage, const struct FVector2D& ScreenRefPos)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("GSUIMiscUtil", "GSUpdateABSMatCoverPosForImg");

	Params::GSUIMiscUtil_GSUpdateABSMatCoverPosForImg Parms{};

	Parms.RefImage = RefImage;
	Parms.ScreenRefPos = std::move(ScreenRefPos);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function b1-Managed.GSUIMiscUtil.GSUpdateABSMatSrcPosSize
// (Native, Static, Public, BlueprintCallable)
// Parameters:
// class UWidget*                          RefWidget                                              (ExportObject, Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// class UMaterialInstanceDynamic*         RefABSDynamicInst                                      (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UGSUIMiscUtil::GSUpdateABSMatSrcPosSize(class UWidget* RefWidget, class UMaterialInstanceDynamic* RefABSDynamicInst)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("GSUIMiscUtil", "GSUpdateABSMatSrcPosSize");

	Params::GSUIMiscUtil_GSUpdateABSMatSrcPosSize Parms{};

	Parms.RefWidget = RefWidget;
	Parms.RefABSDynamicInst = RefABSDynamicInst;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function b1-Managed.GSUIMiscUtil.GSUpdateABSMatCoverPos
// (Native, Static, Public, BlueprintCallable)
// Parameters:
// class UMaterialInstanceDynamic*         RefABSDynamicInst                                      (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// struct FVector2D                        ScreenRefPos                                           (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UGSUIMiscUtil::GSUpdateABSMatCoverPos(class UMaterialInstanceDynamic* RefABSDynamicInst, const struct FVector2D& ScreenRefPos)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("GSUIMiscUtil", "GSUpdateABSMatCoverPos");

	Params::GSUIMiscUtil_GSUpdateABSMatCoverPos Parms{};

	Parms.RefABSDynamicInst = RefABSDynamicInst;
	Parms.ScreenRefPos = std::move(ScreenRefPos);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function b1-Managed.UDSSettingFunctionBinder.OnMonitorAsPrimaryChange
// (Native, Public, Protected)
// Parameters:
// int32                                   MonitorIdx                                             (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UUDSSettingFunctionBinder::OnMonitorAsPrimaryChange(int32 MonitorIdx)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("UDSSettingFunctionBinder", "OnMonitorAsPrimaryChange");

	Params::UDSSettingFunctionBinder_OnMonitorAsPrimaryChange Parms{};

	Parms.MonitorIdx = MonitorIdx;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function b1-Managed.UDSSettingFunctionBinder.OnViewportResizedEvent
// (Native, Public, Protected)
// Parameters:
// struct FIntPoint                        NewSize                                                (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UUDSSettingFunctionBinder::OnViewportResizedEvent(const struct FIntPoint& NewSize)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("UDSSettingFunctionBinder", "OnViewportResizedEvent");

	Params::UDSSettingFunctionBinder_OnViewportResizedEvent Parms{};

	Parms.NewSize = std::move(NewSize);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function b1-Managed.UDSSettingFunctionBinder.OnCultureChangedEvent
// (Native, Public, Protected)

void UUDSSettingFunctionBinder::OnCultureChangedEvent()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("UDSSettingFunctionBinder", "OnCultureChangedEvent");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function b1-Managed.BED_ProcessMachineNode_Idle.GetContextOutputsInCS
// (Native, Event, Public, HasOutParams, BlueprintEvent)
// Parameters:
// TArray<class FName>                     ReturnValue                                            (Parm, OutParm, ReturnParm)

TArray<class FName> UBED_ProcessMachineNode_Idle::GetContextOutputsInCS()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BED_ProcessMachineNode_Idle", "GetContextOutputsInCS");

	Params::BED_ProcessMachineNode_Idle_GetContextOutputsInCS Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function b1-Managed.BED_ProcessMachineNode_Idle.PostPropertyChanged
// (Native, Event, Public, BlueprintEvent)
// Parameters:
// class FString                           MemberName                                             (Parm, ZeroConstructor, HasGetValueTypeHash)
// class FString                           PropertyName                                           (Parm, ZeroConstructor, HasGetValueTypeHash)

void UBED_ProcessMachineNode_Idle::PostPropertyChanged(const class FString& MemberName, const class FString& PropertyName)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BED_ProcessMachineNode_Idle", "PostPropertyChanged");

	Params::BED_ProcessMachineNode_Idle_PostPropertyChanged Parms{};

	Parms.MemberName = std::move(MemberName);
	Parms.PropertyName = std::move(PropertyName);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function b1-Managed.GSTileView.OnMouseEnter
// (BlueprintCosmetic, Native, Event, Public, BlueprintEvent)
// Parameters:
// struct FGeometry                        MyGeometry                                             (Parm, IsPlainOldData, NoDestructor)
// struct FPointerEvent                    MouseEvent                                             (ConstParm, Parm, OutParm, ReferenceParm)

void b1MinusManaged::UGSTileView::OnMouseEnter(const struct FGeometry& MyGeometry, const struct FPointerEvent& MouseEvent)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GSTileView", "OnMouseEnter");

	Params::GSTileView_OnMouseEnter Parms{};

	Parms.MyGeometry = std::move(MyGeometry);
	Parms.MouseEvent = std::move(MouseEvent);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function b1-Managed.GSTileView.OnMouseLeave
// (BlueprintCosmetic, Native, Event, Public, BlueprintEvent)
// Parameters:
// struct FPointerEvent                    MouseEvent                                             (ConstParm, Parm, OutParm, ReferenceParm)

void b1MinusManaged::UGSTileView::OnMouseLeave(const struct FPointerEvent& MouseEvent)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GSTileView", "OnMouseLeave");

	Params::GSTileView_OnMouseLeave Parms{};

	Parms.MouseEvent = std::move(MouseEvent);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function b1-Managed.GSTileView.PreConstruct
// (BlueprintCosmetic, Native, Event, Public, BlueprintEvent)
// Parameters:
// uint8                                   IsDesignTime                                           (Parm, NoDestructor, HasGetValueTypeHash)

void b1MinusManaged::UGSTileView::PreConstruct(uint8 IsDesignTime)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GSTileView", "PreConstruct");

	Params::GSTileView_PreConstruct Parms{};

	Parms.IsDesignTime = IsDesignTime;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function b1-Managed.GSTileViewPanel.OnViewWidgetSizeChangedEvent
// (Native, Event, Public, BlueprintEvent)
// Parameters:
// struct FVector2D                        Size                                                   (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UGSTileViewPanel::OnViewWidgetSizeChangedEvent(const struct FVector2D& Size)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GSTileViewPanel", "OnViewWidgetSizeChangedEvent");

	Params::GSTileViewPanel_OnViewWidgetSizeChangedEvent Parms{};

	Parms.Size = std::move(Size);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function b1-Managed.GSTileViewPanel.OnEntryWidgetGeneratedEvent
// (Native, Event, Public, BlueprintEvent)
// Parameters:
// class UUserWidget*                      Widget                                                 (ExportObject, Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UGSTileViewPanel::OnEntryWidgetGeneratedEvent(class UUserWidget* Widget)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GSTileViewPanel", "OnEntryWidgetGeneratedEvent");

	Params::GSTileViewPanel_OnEntryWidgetGeneratedEvent Parms{};

	Parms.Widget = Widget;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function b1-Managed.GSTileViewPanel.OnEntryWidgetReleasedEvent
// (Native, Event, Public, BlueprintEvent)
// Parameters:
// class UUserWidget*                      Widget                                                 (ExportObject, Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UGSTileViewPanel::OnEntryWidgetReleasedEvent(class UUserWidget* Widget)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GSTileViewPanel", "OnEntryWidgetReleasedEvent");

	Params::GSTileViewPanel_OnEntryWidgetReleasedEvent Parms{};

	Parms.Widget = Widget;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function b1-Managed.GSTileViewPanel.ItemScrolledIntoViewEvent
// (Native, Event, Public, BlueprintEvent)
// Parameters:
// class UObject*                          Item                                                   (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// class UUserWidget*                      Widget                                                 (ExportObject, Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UGSTileViewPanel::ItemScrolledIntoViewEvent(class UObject* Item, class UUserWidget* Widget)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GSTileViewPanel", "ItemScrolledIntoViewEvent");

	Params::GSTileViewPanel_ItemScrolledIntoViewEvent Parms{};

	Parms.Item = Item;
	Parms.Widget = Widget;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function b1-Managed.GSTileViewPanel.OnEntryInitializedEvent
// (Native, Event, Public, BlueprintEvent)
// Parameters:
// class UObject*                          Item                                                   (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// class UUserWidget*                      Widget                                                 (ExportObject, Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UGSTileViewPanel::OnEntryInitializedEvent(class UObject* Item, class UUserWidget* Widget)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GSTileViewPanel", "OnEntryInitializedEvent");

	Params::GSTileViewPanel_OnEntryInitializedEvent Parms{};

	Parms.Item = Item;
	Parms.Widget = Widget;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function b1-Managed.BED_CalliopeInteractor.SetCustomOutputNodeEventName
// (Native, Event, Public, HasOutParams, BlueprintEvent)
// Parameters:
// class UCalliopeNode*                    Node                                                   (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// class FName                             InEventName                                            (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// uint8                                   ReturnValue                                            (Parm, OutParm, ReturnParm, NoDestructor, HasGetValueTypeHash)

uint8 UBED_CalliopeInteractor::SetCustomOutputNodeEventName(class UCalliopeNode* Node, const class FName& InEventName)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BED_CalliopeInteractor", "SetCustomOutputNodeEventName");

	Params::BED_CalliopeInteractor_SetCustomOutputNodeEventName Parms{};

	Parms.Node = Node;
	Parms.InEventName = InEventName;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function b1-Managed.BED_CalliopeInteractor.SetCustomInputNodeEventName
// (Native, Event, Public, HasOutParams, BlueprintEvent)
// Parameters:
// class UCalliopeNode*                    Node                                                   (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// class FName                             InEventName                                            (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// uint8                                   ReturnValue                                            (Parm, OutParm, ReturnParm, NoDestructor, HasGetValueTypeHash)

uint8 UBED_CalliopeInteractor::SetCustomInputNodeEventName(class UCalliopeNode* Node, const class FName& InEventName)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BED_CalliopeInteractor", "SetCustomInputNodeEventName");

	Params::BED_CalliopeInteractor_SetCustomInputNodeEventName Parms{};

	Parms.Node = Node;
	Parms.InEventName = InEventName;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function b1-Managed.BED_CalliopeInteractor.GetExecutionMultiGateNodeClasses
// (Native, Event, Public, HasOutParams, BlueprintEvent, Const)
// Parameters:
// TArray<class UClass*>                   OutClasses                                             (Parm, OutParm)
// int32                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

int32 UBED_CalliopeInteractor::GetExecutionMultiGateNodeClasses(TArray<class UClass*>* OutClasses) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BED_CalliopeInteractor", "GetExecutionMultiGateNodeClasses");

	Params::BED_CalliopeInteractor_GetExecutionMultiGateNodeClasses Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	if (OutClasses != nullptr)
		*OutClasses = std::move(Parms.OutClasses);

	return Parms.ReturnValue;
}


// Function b1-Managed.BED_CalliopeInteractor.GetExecutionSequenceNodeClasses
// (Native, Event, Public, HasOutParams, BlueprintEvent, Const)
// Parameters:
// TArray<class UClass*>                   OutClasses                                             (Parm, OutParm)
// int32                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

int32 UBED_CalliopeInteractor::GetExecutionSequenceNodeClasses(TArray<class UClass*>* OutClasses) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BED_CalliopeInteractor", "GetExecutionSequenceNodeClasses");

	Params::BED_CalliopeInteractor_GetExecutionSequenceNodeClasses Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	if (OutClasses != nullptr)
		*OutClasses = std::move(Parms.OutClasses);

	return Parms.ReturnValue;
}


// Function b1-Managed.BED_CalliopeInteractor.GetComponentObserverNodeClasses
// (Native, Event, Public, HasOutParams, BlueprintEvent, Const)
// Parameters:
// TArray<class UClass*>                   OutClasses                                             (Parm, OutParm)
// int32                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

int32 UBED_CalliopeInteractor::GetComponentObserverNodeClasses(TArray<class UClass*>* OutClasses) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BED_CalliopeInteractor", "GetComponentObserverNodeClasses");

	Params::BED_CalliopeInteractor_GetComponentObserverNodeClasses Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	if (OutClasses != nullptr)
		*OutClasses = std::move(Parms.OutClasses);

	return Parms.ReturnValue;
}


// Function b1-Managed.BED_CalliopeInteractor.GetCustomOutputNodeEventName
// (Native, Event, Public, HasOutParams, BlueprintEvent, Const)
// Parameters:
// class UCalliopeNode*                    Node                                                   (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// class FName                             OutEventName                                           (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// uint8                                   ReturnValue                                            (Parm, OutParm, ReturnParm, NoDestructor, HasGetValueTypeHash)

uint8 UBED_CalliopeInteractor::GetCustomOutputNodeEventName(class UCalliopeNode* Node, class FName* OutEventName) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BED_CalliopeInteractor", "GetCustomOutputNodeEventName");

	Params::BED_CalliopeInteractor_GetCustomOutputNodeEventName Parms{};

	Parms.Node = Node;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	if (OutEventName != nullptr)
		*OutEventName = Parms.OutEventName;

	return Parms.ReturnValue;
}


// Function b1-Managed.BED_CalliopeInteractor.GetCustomInputNodeEventName
// (Native, Event, Public, HasOutParams, BlueprintEvent, Const)
// Parameters:
// class UCalliopeNode*                    Node                                                   (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// class FName                             OutEventName                                           (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// uint8                                   ReturnValue                                            (Parm, OutParm, ReturnParm, NoDestructor, HasGetValueTypeHash)

uint8 UBED_CalliopeInteractor::GetCustomInputNodeEventName(class UCalliopeNode* Node, class FName* OutEventName) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BED_CalliopeInteractor", "GetCustomInputNodeEventName");

	Params::BED_CalliopeInteractor_GetCustomInputNodeEventName Parms{};

	Parms.Node = Node;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	if (OutEventName != nullptr)
		*OutEventName = Parms.OutEventName;

	return Parms.ReturnValue;
}


// Function b1-Managed.BED_CalliopeInteractor.GetCustomOutputNodeClasses
// (Native, Event, Public, HasOutParams, BlueprintEvent, Const)
// Parameters:
// TArray<class UClass*>                   OutClasses                                             (Parm, OutParm)
// int32                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

int32 UBED_CalliopeInteractor::GetCustomOutputNodeClasses(TArray<class UClass*>* OutClasses) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BED_CalliopeInteractor", "GetCustomOutputNodeClasses");

	Params::BED_CalliopeInteractor_GetCustomOutputNodeClasses Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	if (OutClasses != nullptr)
		*OutClasses = std::move(Parms.OutClasses);

	return Parms.ReturnValue;
}


// Function b1-Managed.BED_CalliopeInteractor.GetCustomInputNodeClasses
// (Native, Event, Public, HasOutParams, BlueprintEvent, Const)
// Parameters:
// TArray<class UClass*>                   OutClasses                                             (Parm, OutParm)
// int32                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

int32 UBED_CalliopeInteractor::GetCustomInputNodeClasses(TArray<class UClass*>* OutClasses) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BED_CalliopeInteractor", "GetCustomInputNodeClasses");

	Params::BED_CalliopeInteractor_GetCustomInputNodeClasses Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	if (OutClasses != nullptr)
		*OutClasses = std::move(Parms.OutClasses);

	return Parms.ReturnValue;
}


// Function b1-Managed.BED_CalliopeInteractor.GetSubGraphNodeClasses
// (Native, Event, Public, HasOutParams, BlueprintEvent, Const)
// Parameters:
// TArray<class UClass*>                   OutClasses                                             (Parm, OutParm)
// int32                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

int32 UBED_CalliopeInteractor::GetSubGraphNodeClasses(TArray<class UClass*>* OutClasses) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BED_CalliopeInteractor", "GetSubGraphNodeClasses");

	Params::BED_CalliopeInteractor_GetSubGraphNodeClasses Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	if (OutClasses != nullptr)
		*OutClasses = std::move(Parms.OutClasses);

	return Parms.ReturnValue;
}


// Function b1-Managed.BED_CalliopeInteractor.GetRerouteNodeClasses
// (Native, Event, Public, HasOutParams, BlueprintEvent, Const)
// Parameters:
// TArray<class UClass*>                   OutClasses                                             (Parm, OutParm)
// int32                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

int32 UBED_CalliopeInteractor::GetRerouteNodeClasses(TArray<class UClass*>* OutClasses) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BED_CalliopeInteractor", "GetRerouteNodeClasses");

	Params::BED_CalliopeInteractor_GetRerouteNodeClasses Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	if (OutClasses != nullptr)
		*OutClasses = std::move(Parms.OutClasses);

	return Parms.ReturnValue;
}


// Function b1-Managed.BED_CalliopeInteractor.GetFinishNodeClasses
// (Native, Event, Public, HasOutParams, BlueprintEvent, Const)
// Parameters:
// TArray<class UClass*>                   OutClasses                                             (Parm, OutParm)
// int32                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

int32 UBED_CalliopeInteractor::GetFinishNodeClasses(TArray<class UClass*>* OutClasses) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BED_CalliopeInteractor", "GetFinishNodeClasses");

	Params::BED_CalliopeInteractor_GetFinishNodeClasses Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	if (OutClasses != nullptr)
		*OutClasses = std::move(Parms.OutClasses);

	return Parms.ReturnValue;
}


// Function b1-Managed.BED_CalliopeInteractor.GetStartNodeClasses
// (Native, Event, Public, HasOutParams, BlueprintEvent, Const)
// Parameters:
// TArray<class UClass*>                   OutClasses                                             (Parm, OutParm)
// int32                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

int32 UBED_CalliopeInteractor::GetStartNodeClasses(TArray<class UClass*>* OutClasses) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BED_CalliopeInteractor", "GetStartNodeClasses");

	Params::BED_CalliopeInteractor_GetStartNodeClasses Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	if (OutClasses != nullptr)
		*OutClasses = std::move(Parms.OutClasses);

	return Parms.ReturnValue;
}


// Function b1-Managed.BED_BehaviorAsset.GetExtraDefaultOutputNodesInBranchGraph
// (Native, Event, Public, HasOutParams, BlueprintEvent, Const)
// Parameters:
// TArray<class UClass*>                   OutClasses                                             (Parm, OutParm)
// int32                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

int32 UBED_BehaviorAsset::GetExtraDefaultOutputNodesInBranchGraph(TArray<class UClass*>* OutClasses) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BED_BehaviorAsset", "GetExtraDefaultOutputNodesInBranchGraph");

	Params::BED_BehaviorAsset_GetExtraDefaultOutputNodesInBranchGraph Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	if (OutClasses != nullptr)
		*OutClasses = std::move(Parms.OutClasses);

	return Parms.ReturnValue;
}


// Function b1-Managed.BED_BehaviorAsset.GetExtraDefaultInputNodesInBranchGraph
// (Native, Event, Public, HasOutParams, BlueprintEvent, Const)
// Parameters:
// TArray<class UClass*>                   OutClasses                                             (Parm, OutParm)
// int32                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

int32 UBED_BehaviorAsset::GetExtraDefaultInputNodesInBranchGraph(TArray<class UClass*>* OutClasses) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BED_BehaviorAsset", "GetExtraDefaultInputNodesInBranchGraph");

	Params::BED_BehaviorAsset_GetExtraDefaultInputNodesInBranchGraph Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	if (OutClasses != nullptr)
		*OutClasses = std::move(Parms.OutClasses);

	return Parms.ReturnValue;
}


// Function b1-Managed.BED_BehaviorAsset.GetRerouteNodeClassInBranchGraph
// (Native, Event, Public, HasOutParams, BlueprintEvent, Const)
// Parameters:
// class UClass*                           ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

class UClass* UBED_BehaviorAsset::GetRerouteNodeClassInBranchGraph() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BED_BehaviorAsset", "GetRerouteNodeClassInBranchGraph");

	Params::BED_BehaviorAsset_GetRerouteNodeClassInBranchGraph Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function b1-Managed.BED_BehaviorAsset.GetStartNodeClassInBranchGraph
// (Native, Event, Public, HasOutParams, BlueprintEvent, Const)
// Parameters:
// class UClass*                           ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

class UClass* UBED_BehaviorAsset::GetStartNodeClassInBranchGraph() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BED_BehaviorAsset", "GetStartNodeClassInBranchGraph");

	Params::BED_BehaviorAsset_GetStartNodeClassInBranchGraph Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function b1-Managed.BED_BehaviorAsset.GetExtraDefaultOutputNodes
// (Native, Event, Public, HasOutParams, BlueprintEvent, Const)
// Parameters:
// TArray<class UClass*>                   OutClasses                                             (Parm, OutParm)
// int32                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

int32 UBED_BehaviorAsset::GetExtraDefaultOutputNodes(TArray<class UClass*>* OutClasses) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BED_BehaviorAsset", "GetExtraDefaultOutputNodes");

	Params::BED_BehaviorAsset_GetExtraDefaultOutputNodes Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	if (OutClasses != nullptr)
		*OutClasses = std::move(Parms.OutClasses);

	return Parms.ReturnValue;
}


// Function b1-Managed.BED_BehaviorAsset.GetExtraDefaultInputNodes
// (Native, Event, Public, HasOutParams, BlueprintEvent, Const)
// Parameters:
// TArray<class UClass*>                   OutClasses                                             (Parm, OutParm)
// int32                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

int32 UBED_BehaviorAsset::GetExtraDefaultInputNodes(TArray<class UClass*>* OutClasses) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BED_BehaviorAsset", "GetExtraDefaultInputNodes");

	Params::BED_BehaviorAsset_GetExtraDefaultInputNodes Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	if (OutClasses != nullptr)
		*OutClasses = std::move(Parms.OutClasses);

	return Parms.ReturnValue;
}


// Function b1-Managed.BED_BehaviorAsset.GetRerouteNodeClass
// (Native, Event, Public, HasOutParams, BlueprintEvent, Const)
// Parameters:
// class UClass*                           ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

class UClass* UBED_BehaviorAsset::GetRerouteNodeClass() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BED_BehaviorAsset", "GetRerouteNodeClass");

	Params::BED_BehaviorAsset_GetRerouteNodeClass Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function b1-Managed.BED_BehaviorAsset.GetStartNodeClass
// (Native, Event, Public, HasOutParams, BlueprintEvent, Const)
// Parameters:
// class UClass*                           ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

class UClass* UBED_BehaviorAsset::GetStartNodeClass() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BED_BehaviorAsset", "GetStartNodeClass");

	Params::BED_BehaviorAsset_GetStartNodeClass Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function b1-Managed.BED_BehaviorAsset.GetViewType
// (Native, Event, Public, HasOutParams, BlueprintEvent, Const)
// Parameters:
// ECalliopeViewType                       ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

ECalliopeViewType UBED_BehaviorAsset::GetViewType() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BED_BehaviorAsset", "GetViewType");

	Params::BED_BehaviorAsset_GetViewType Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function b1-Managed.BED_BehaviorNode_AddBuff.GetNodeDescriptionInCS
// (Native, Event, Public, HasOutParams, BlueprintEvent, Const)
// Parameters:
// class FString                           ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash)

class FString UBED_BehaviorNode_AddBuff::GetNodeDescriptionInCS() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BED_BehaviorNode_AddBuff", "GetNodeDescriptionInCS");

	Params::BED_BehaviorNode_AddBuff_GetNodeDescriptionInCS Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function b1-Managed.BED_BehaviorNode_DetectExclusiveItemState.GetNodeDescriptionInCS
// (Native, Event, Public, HasOutParams, BlueprintEvent, Const)
// Parameters:
// class FString                           ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash)

class FString UBED_BehaviorNode_DetectExclusiveItemState::GetNodeDescriptionInCS() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BED_BehaviorNode_DetectExclusiveItemState", "GetNodeDescriptionInCS");

	Params::BED_BehaviorNode_DetectExclusiveItemState_GetNodeDescriptionInCS Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function b1-Managed.BED_BehaviorNode_DetectForce.GetNodeDescriptionInCS
// (Native, Event, Public, HasOutParams, BlueprintEvent, Const)
// Parameters:
// class FString                           ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash)

class FString UBED_BehaviorNode_DetectForce::GetNodeDescriptionInCS() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BED_BehaviorNode_DetectForce", "GetNodeDescriptionInCS");

	Params::BED_BehaviorNode_DetectForce_GetNodeDescriptionInCS Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function b1-Managed.BED_BehaviorNode_ExitState.GetNodeDescriptionInCS
// (Native, Event, Public, HasOutParams, BlueprintEvent, Const)
// Parameters:
// class FString                           ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash)

class FString UBED_BehaviorNode_ExitState::GetNodeDescriptionInCS() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BED_BehaviorNode_ExitState", "GetNodeDescriptionInCS");

	Params::BED_BehaviorNode_ExitState_GetNodeDescriptionInCS Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function b1-Managed.BED_BehaviorNode_ExitState.IsSupportViewType
// (Native, Event, Public, HasOutParams, BlueprintEvent, Const)
// Parameters:
// ECalliopeViewType                       InViewType                                             (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// uint8                                   ReturnValue                                            (Parm, OutParm, ReturnParm, NoDestructor, HasGetValueTypeHash)

uint8 UBED_BehaviorNode_ExitState::IsSupportViewType(const ECalliopeViewType& InViewType) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BED_BehaviorNode_ExitState", "IsSupportViewType");

	Params::BED_BehaviorNode_ExitState_IsSupportViewType Parms{};

	Parms.InViewType = InViewType;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function b1-Managed.BED_BehaviorNode_LogicalAnd.CanUserAddInputInCS
// (Native, Event, Public, HasOutParams, BlueprintEvent, Const)
// Parameters:
// uint8                                   ReturnValue                                            (Parm, OutParm, ReturnParm, NoDestructor, HasGetValueTypeHash)

uint8 UBED_BehaviorNode_LogicalAnd::CanUserAddInputInCS() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BED_BehaviorNode_LogicalAnd", "CanUserAddInputInCS");

	Params::BED_BehaviorNode_LogicalAnd_CanUserAddInputInCS Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function b1-Managed.BED_BehaviorNode_LogicalAnd.IsSupportViewType
// (Native, Event, Public, HasOutParams, BlueprintEvent, Const)
// Parameters:
// ECalliopeViewType                       InViewType                                             (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// uint8                                   ReturnValue                                            (Parm, OutParm, ReturnParm, NoDestructor, HasGetValueTypeHash)

uint8 UBED_BehaviorNode_LogicalAnd::IsSupportViewType(const ECalliopeViewType& InViewType) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BED_BehaviorNode_LogicalAnd", "IsSupportViewType");

	Params::BED_BehaviorNode_LogicalAnd_IsSupportViewType Parms{};

	Parms.InViewType = InViewType;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function b1-Managed.BED_BehaviorNode_Sequence.CanUserAddOutputInCS
// (Native, Event, Public, HasOutParams, BlueprintEvent, Const)
// Parameters:
// uint8                                   ReturnValue                                            (Parm, OutParm, ReturnParm, NoDestructor, HasGetValueTypeHash)

uint8 UBED_BehaviorNode_Sequence::CanUserAddOutputInCS() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BED_BehaviorNode_Sequence", "CanUserAddOutputInCS");

	Params::BED_BehaviorNode_Sequence_CanUserAddOutputInCS Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function b1-Managed.BED_BehaviorNode_Sequence.IsSupportViewType
// (Native, Event, Public, HasOutParams, BlueprintEvent, Const)
// Parameters:
// ECalliopeViewType                       InViewType                                             (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// uint8                                   ReturnValue                                            (Parm, OutParm, ReturnParm, NoDestructor, HasGetValueTypeHash)

uint8 UBED_BehaviorNode_Sequence::IsSupportViewType(const ECalliopeViewType& InViewType) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BED_BehaviorNode_Sequence", "IsSupportViewType");

	Params::BED_BehaviorNode_Sequence_IsSupportViewType Parms{};

	Parms.InViewType = InViewType;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function b1-Managed.BED_BehaviorNode_Start.IsSupportViewType
// (Native, Event, Public, HasOutParams, BlueprintEvent, Const)
// Parameters:
// ECalliopeViewType                       InViewType                                             (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// uint8                                   ReturnValue                                            (Parm, OutParm, ReturnParm, NoDestructor, HasGetValueTypeHash)

uint8 UBED_BehaviorNode_Start::IsSupportViewType(const ECalliopeViewType& InViewType) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BED_BehaviorNode_Start", "IsSupportViewType");

	Params::BED_BehaviorNode_Start_IsSupportViewType Parms{};

	Parms.InViewType = InViewType;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function b1-Managed.BED_BehaviorNode_UnitStateTrigger.GetNodeDescriptionInCS
// (Native, Event, Public, HasOutParams, BlueprintEvent, Const)
// Parameters:
// class FString                           ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash)

class FString UBED_BehaviorNode_UnitStateTrigger::GetNodeDescriptionInCS() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BED_BehaviorNode_UnitStateTrigger", "GetNodeDescriptionInCS");

	Params::BED_BehaviorNode_UnitStateTrigger_GetNodeDescriptionInCS Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function b1-Managed.BED_MovieNode_CustomEvent.GetNodeDescriptionInCS
// (Native, Event, Public, HasOutParams, BlueprintEvent, Const)
// Parameters:
// class FString                           ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash)

class FString UBED_MovieNode_CustomEvent::GetNodeDescriptionInCS() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BED_MovieNode_CustomEvent", "GetNodeDescriptionInCS");

	Params::BED_MovieNode_CustomEvent_GetNodeDescriptionInCS Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function b1-Managed.BED_MovieNode_PerformerStopWaiting.GetNodeDescriptionInCS
// (Native, Event, Public, HasOutParams, BlueprintEvent, Const)
// Parameters:
// class FString                           ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash)

class FString UBED_MovieNode_PerformerStopWaiting::GetNodeDescriptionInCS() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BED_MovieNode_PerformerStopWaiting", "GetNodeDescriptionInCS");

	Params::BED_MovieNode_PerformerStopWaiting_GetNodeDescriptionInCS Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function b1-Managed.BED_MovieNode_Start.GetNodeDescriptionInCS
// (Native, Event, Public, HasOutParams, BlueprintEvent, Const)
// Parameters:
// class FString                           ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash)

class FString UBED_MovieNode_Start::GetNodeDescriptionInCS() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BED_MovieNode_Start", "GetNodeDescriptionInCS");

	Params::BED_MovieNode_Start_GetNodeDescriptionInCS Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function b1-Managed.BED_ProcessAsset.PostRefreshAssetInCS
// (Native, Event, Public, BlueprintEvent)

void UBED_ProcessAsset::PostRefreshAssetInCS()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BED_ProcessAsset", "PostRefreshAssetInCS");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function b1-Managed.BED_ProcessAsset.OnRefreshAssetInCS
// (Native, Event, Public, BlueprintEvent)

void UBED_ProcessAsset::OnRefreshAssetInCS()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BED_ProcessAsset", "OnRefreshAssetInCS");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function b1-Managed.BED_ProcessAsset.OnPropertyChanged
// (Native, Event, Public, BlueprintEvent)
// Parameters:
// class FString                           MemberName                                             (Parm, ZeroConstructor, HasGetValueTypeHash)
// class FString                           PropertyName                                           (Parm, ZeroConstructor, HasGetValueTypeHash)

void UBED_ProcessAsset::OnPropertyChanged(const class FString& MemberName, const class FString& PropertyName)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BED_ProcessAsset", "OnPropertyChanged");

	Params::BED_ProcessAsset_OnPropertyChanged Parms{};

	Parms.MemberName = std::move(MemberName);
	Parms.PropertyName = std::move(PropertyName);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function b1-Managed.BED_ProcessAsset.UnregisterNode
// (Native, Event, Public, BlueprintEvent)
// Parameters:
// struct FCalliopeGuid                    NodeGuid                                               (ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, HasGetValueTypeHash)

void UBED_ProcessAsset::UnregisterNode(const struct FCalliopeGuid& NodeGuid)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BED_ProcessAsset", "UnregisterNode");

	Params::BED_ProcessAsset_UnregisterNode Parms{};

	Parms.NodeGuid = std::move(NodeGuid);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function b1-Managed.BED_ProcessAsset.RegisterNode
// (Native, Event, Public, BlueprintEvent)
// Parameters:
// struct FCalliopeGuid                    NewGuid                                                (ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, HasGetValueTypeHash)
// class UCalliopeNode*                    NewNode                                                (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UBED_ProcessAsset::RegisterNode(const struct FCalliopeGuid& NewGuid, class UCalliopeNode* NewNode)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BED_ProcessAsset", "RegisterNode");

	Params::BED_ProcessAsset_RegisterNode Parms{};

	Parms.NewGuid = std::move(NewGuid);
	Parms.NewNode = NewNode;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function b1-Managed.BED_ProcessAsset.HasRevertCondition
// (Native, Public, HasOutParams, BlueprintCallable)
// Parameters:
// uint8                                   ReturnValue                                            (Parm, OutParm, ReturnParm, NoDestructor, HasGetValueTypeHash)

uint8 UBED_ProcessAsset::HasRevertCondition()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BED_ProcessAsset", "HasRevertCondition");

	Params::BED_ProcessAsset_HasRevertCondition Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function b1-Managed.BED_ProcessAsset.GetExtraDefaultOutputNodesInBranchGraph
// (Native, Event, Public, HasOutParams, BlueprintEvent, Const)
// Parameters:
// TArray<class UClass*>                   OutClasses                                             (Parm, OutParm)
// int32                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

int32 UBED_ProcessAsset::GetExtraDefaultOutputNodesInBranchGraph(TArray<class UClass*>* OutClasses) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BED_ProcessAsset", "GetExtraDefaultOutputNodesInBranchGraph");

	Params::BED_ProcessAsset_GetExtraDefaultOutputNodesInBranchGraph Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	if (OutClasses != nullptr)
		*OutClasses = std::move(Parms.OutClasses);

	return Parms.ReturnValue;
}


// Function b1-Managed.BED_ProcessAsset.GetExtraDefaultInputNodesInBranchGraph
// (Native, Event, Public, HasOutParams, BlueprintEvent, Const)
// Parameters:
// TArray<class UClass*>                   OutClasses                                             (Parm, OutParm)
// int32                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

int32 UBED_ProcessAsset::GetExtraDefaultInputNodesInBranchGraph(TArray<class UClass*>* OutClasses) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BED_ProcessAsset", "GetExtraDefaultInputNodesInBranchGraph");

	Params::BED_ProcessAsset_GetExtraDefaultInputNodesInBranchGraph Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	if (OutClasses != nullptr)
		*OutClasses = std::move(Parms.OutClasses);

	return Parms.ReturnValue;
}


// Function b1-Managed.BED_ProcessAsset.GetRerouteNodeClassInBranchGraph
// (Native, Event, Public, HasOutParams, BlueprintEvent, Const)
// Parameters:
// class UClass*                           ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

class UClass* UBED_ProcessAsset::GetRerouteNodeClassInBranchGraph() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BED_ProcessAsset", "GetRerouteNodeClassInBranchGraph");

	Params::BED_ProcessAsset_GetRerouteNodeClassInBranchGraph Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function b1-Managed.BED_ProcessAsset.GetStartNodeClassInBranchGraph
// (Native, Event, Public, HasOutParams, BlueprintEvent, Const)
// Parameters:
// class UClass*                           ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

class UClass* UBED_ProcessAsset::GetStartNodeClassInBranchGraph() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BED_ProcessAsset", "GetStartNodeClassInBranchGraph");

	Params::BED_ProcessAsset_GetStartNodeClassInBranchGraph Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function b1-Managed.BED_ProcessAsset.GetExtraDefaultOutputNodes
// (Native, Event, Public, HasOutParams, BlueprintEvent, Const)
// Parameters:
// TArray<class UClass*>                   OutClasses                                             (Parm, OutParm)
// int32                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

int32 UBED_ProcessAsset::GetExtraDefaultOutputNodes(TArray<class UClass*>* OutClasses) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BED_ProcessAsset", "GetExtraDefaultOutputNodes");

	Params::BED_ProcessAsset_GetExtraDefaultOutputNodes Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	if (OutClasses != nullptr)
		*OutClasses = std::move(Parms.OutClasses);

	return Parms.ReturnValue;
}


// Function b1-Managed.BED_ProcessAsset.GetExtraDefaultInputNodes
// (Native, Event, Public, HasOutParams, BlueprintEvent, Const)
// Parameters:
// TArray<class UClass*>                   OutClasses                                             (Parm, OutParm)
// int32                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

int32 UBED_ProcessAsset::GetExtraDefaultInputNodes(TArray<class UClass*>* OutClasses) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BED_ProcessAsset", "GetExtraDefaultInputNodes");

	Params::BED_ProcessAsset_GetExtraDefaultInputNodes Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	if (OutClasses != nullptr)
		*OutClasses = std::move(Parms.OutClasses);

	return Parms.ReturnValue;
}


// Function b1-Managed.BED_ProcessAsset.GetRerouteNodeClass
// (Native, Event, Public, HasOutParams, BlueprintEvent, Const)
// Parameters:
// class UClass*                           ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

class UClass* UBED_ProcessAsset::GetRerouteNodeClass() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BED_ProcessAsset", "GetRerouteNodeClass");

	Params::BED_ProcessAsset_GetRerouteNodeClass Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function b1-Managed.BED_ProcessAsset.GetStartNodeClass
// (Native, Event, Public, HasOutParams, BlueprintEvent, Const)
// Parameters:
// class UClass*                           ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

class UClass* UBED_ProcessAsset::GetStartNodeClass() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BED_ProcessAsset", "GetStartNodeClass");

	Params::BED_ProcessAsset_GetStartNodeClass Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function b1-Managed.BED_ProcessAsset.CanManageStates
// (Native, Event, Public, HasOutParams, BlueprintEvent, Const)
// Parameters:
// uint8                                   ReturnValue                                            (Parm, OutParm, ReturnParm, NoDestructor, HasGetValueTypeHash)

uint8 UBED_ProcessAsset::CanManageStates() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BED_ProcessAsset", "CanManageStates");

	Params::BED_ProcessAsset_CanManageStates Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function b1-Managed.BED_ProcessAsset.IsEditorOnlyCS
// (Native, Event, Public, HasOutParams, BlueprintEvent, Const)
// Parameters:
// uint8                                   ReturnValue                                            (Parm, OutParm, ReturnParm, NoDestructor, HasGetValueTypeHash)

uint8 UBED_ProcessAsset::IsEditorOnlyCS() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BED_ProcessAsset", "IsEditorOnlyCS");

	Params::BED_ProcessAsset_IsEditorOnlyCS Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function b1-Managed.BED_ProcessAsset.GetViewType
// (Native, Event, Public, HasOutParams, BlueprintEvent, Const)
// Parameters:
// ECalliopeViewType                       ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

ECalliopeViewType UBED_ProcessAsset::GetViewType() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BED_ProcessAsset", "GetViewType");

	Params::BED_ProcessAsset_GetViewType Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function b1-Managed.BED_ProcessStateNode_DetectStart.GetContextOutputsInCS
// (Native, Event, Public, HasOutParams, BlueprintEvent)
// Parameters:
// TArray<class FName>                     ReturnValue                                            (Parm, OutParm, ReturnParm)

TArray<class FName> UBED_ProcessStateNode_DetectStart::GetContextOutputsInCS()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BED_ProcessStateNode_DetectStart", "GetContextOutputsInCS");

	Params::BED_ProcessStateNode_DetectStart_GetContextOutputsInCS Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function b1-Managed.BED_ProcessStateNode_DetectStart.PostPropertyChanged
// (Native, Event, Public, BlueprintEvent)
// Parameters:
// class FString                           MemberName                                             (Parm, ZeroConstructor, HasGetValueTypeHash)
// class FString                           PropertyName                                           (Parm, ZeroConstructor, HasGetValueTypeHash)

void UBED_ProcessStateNode_DetectStart::PostPropertyChanged(const class FString& MemberName, const class FString& PropertyName)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BED_ProcessStateNode_DetectStart", "PostPropertyChanged");

	Params::BED_ProcessStateNode_DetectStart_PostPropertyChanged Parms{};

	Parms.MemberName = std::move(MemberName);
	Parms.PropertyName = std::move(PropertyName);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function b1-Managed.BED_ProcessStateNode_DetectStart.GetNodeDescriptionInCS
// (Native, Event, Public, HasOutParams, BlueprintEvent, Const)
// Parameters:
// class FString                           ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash)

class FString UBED_ProcessStateNode_DetectStart::GetNodeDescriptionInCS() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BED_ProcessStateNode_DetectStart", "GetNodeDescriptionInCS");

	Params::BED_ProcessStateNode_DetectStart_GetNodeDescriptionInCS Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function b1-Managed.BED_ProcessStateNode_DisableDetect.GetContextOutputsInCS
// (Native, Event, Public, HasOutParams, BlueprintEvent)
// Parameters:
// TArray<class FName>                     ReturnValue                                            (Parm, OutParm, ReturnParm)

TArray<class FName> UBED_ProcessStateNode_DisableDetect::GetContextOutputsInCS()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BED_ProcessStateNode_DisableDetect", "GetContextOutputsInCS");

	Params::BED_ProcessStateNode_DisableDetect_GetContextOutputsInCS Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function b1-Managed.BED_ProcessStateNode_DisableDetect.PostPropertyChanged
// (Native, Event, Public, BlueprintEvent)
// Parameters:
// class FString                           MemberName                                             (Parm, ZeroConstructor, HasGetValueTypeHash)
// class FString                           PropertyName                                           (Parm, ZeroConstructor, HasGetValueTypeHash)

void UBED_ProcessStateNode_DisableDetect::PostPropertyChanged(const class FString& MemberName, const class FString& PropertyName)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BED_ProcessStateNode_DisableDetect", "PostPropertyChanged");

	Params::BED_ProcessStateNode_DisableDetect_PostPropertyChanged Parms{};

	Parms.MemberName = std::move(MemberName);
	Parms.PropertyName = std::move(PropertyName);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function b1-Managed.BED_ProcessStateNode_DisableDetect.GetNodeDescriptionInCS
// (Native, Event, Public, HasOutParams, BlueprintEvent, Const)
// Parameters:
// class FString                           ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash)

class FString UBED_ProcessStateNode_DisableDetect::GetNodeDescriptionInCS() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BED_ProcessStateNode_DisableDetect", "GetNodeDescriptionInCS");

	Params::BED_ProcessStateNode_DisableDetect_GetNodeDescriptionInCS Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function b1-Managed.BED_ProcessStateNode_EnableDetect.GetContextOutputsInCS
// (Native, Event, Public, HasOutParams, BlueprintEvent)
// Parameters:
// TArray<class FName>                     ReturnValue                                            (Parm, OutParm, ReturnParm)

TArray<class FName> UBED_ProcessStateNode_EnableDetect::GetContextOutputsInCS()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BED_ProcessStateNode_EnableDetect", "GetContextOutputsInCS");

	Params::BED_ProcessStateNode_EnableDetect_GetContextOutputsInCS Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function b1-Managed.BED_ProcessStateNode_EnableDetect.PostPropertyChanged
// (Native, Event, Public, BlueprintEvent)
// Parameters:
// class FString                           MemberName                                             (Parm, ZeroConstructor, HasGetValueTypeHash)
// class FString                           PropertyName                                           (Parm, ZeroConstructor, HasGetValueTypeHash)

void UBED_ProcessStateNode_EnableDetect::PostPropertyChanged(const class FString& MemberName, const class FString& PropertyName)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BED_ProcessStateNode_EnableDetect", "PostPropertyChanged");

	Params::BED_ProcessStateNode_EnableDetect_PostPropertyChanged Parms{};

	Parms.MemberName = std::move(MemberName);
	Parms.PropertyName = std::move(PropertyName);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function b1-Managed.BED_ProcessStateNode_EnableDetect.GetNodeDescriptionInCS
// (Native, Event, Public, HasOutParams, BlueprintEvent, Const)
// Parameters:
// class FString                           ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash)

class FString UBED_ProcessStateNode_EnableDetect::GetNodeDescriptionInCS() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BED_ProcessStateNode_EnableDetect", "GetNodeDescriptionInCS");

	Params::BED_ProcessStateNode_EnableDetect_GetNodeDescriptionInCS Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function b1-Managed.BED_ProcessStateNode_Log.GetNodeDescriptionInCS
// (Native, Event, Public, HasOutParams, BlueprintEvent, Const)
// Parameters:
// class FString                           ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash)

class FString UBED_ProcessStateNode_Log::GetNodeDescriptionInCS() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BED_ProcessStateNode_Log", "GetNodeDescriptionInCS");

	Params::BED_ProcessStateNode_Log_GetNodeDescriptionInCS Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function b1-Managed.BED_ProcessStateNode_LogicalOr.CanUserAddInputInCS
// (Native, Event, Public, HasOutParams, BlueprintEvent, Const)
// Parameters:
// uint8                                   ReturnValue                                            (Parm, OutParm, ReturnParm, NoDestructor, HasGetValueTypeHash)

uint8 UBED_ProcessStateNode_LogicalOr::CanUserAddInputInCS() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BED_ProcessStateNode_LogicalOr", "CanUserAddInputInCS");

	Params::BED_ProcessStateNode_LogicalOr_CanUserAddInputInCS Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function b1-Managed.BED_ProcessStateNode_NotifySelf.GetContextOutputsInCS
// (Native, Event, Public, HasOutParams, BlueprintEvent)
// Parameters:
// TArray<class FName>                     ReturnValue                                            (Parm, OutParm, ReturnParm)

TArray<class FName> UBED_ProcessStateNode_NotifySelf::GetContextOutputsInCS()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BED_ProcessStateNode_NotifySelf", "GetContextOutputsInCS");

	Params::BED_ProcessStateNode_NotifySelf_GetContextOutputsInCS Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function b1-Managed.BED_ProcessStateNode_NotifySelf.PostPropertyChanged
// (Native, Event, Public, BlueprintEvent)
// Parameters:
// class FString                           MemberName                                             (Parm, ZeroConstructor, HasGetValueTypeHash)
// class FString                           PropertyName                                           (Parm, ZeroConstructor, HasGetValueTypeHash)

void UBED_ProcessStateNode_NotifySelf::PostPropertyChanged(const class FString& MemberName, const class FString& PropertyName)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BED_ProcessStateNode_NotifySelf", "PostPropertyChanged");

	Params::BED_ProcessStateNode_NotifySelf_PostPropertyChanged Parms{};

	Parms.MemberName = std::move(MemberName);
	Parms.PropertyName = std::move(PropertyName);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function b1-Managed.BED_ProcessStateNode_NotifySelf.GetNodeDescriptionInCS
// (Native, Event, Public, HasOutParams, BlueprintEvent, Const)
// Parameters:
// class FString                           ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash)

class FString UBED_ProcessStateNode_NotifySelf::GetNodeDescriptionInCS() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BED_ProcessStateNode_NotifySelf", "GetNodeDescriptionInCS");

	Params::BED_ProcessStateNode_NotifySelf_GetNodeDescriptionInCS Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function b1-Managed.BED_ProcessStateNode_ObserveActor.GetNodeDescriptionInCS
// (Native, Event, Public, HasOutParams, BlueprintEvent, Const)
// Parameters:
// class FString                           ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash)

class FString UBED_ProcessStateNode_ObserveActor::GetNodeDescriptionInCS() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BED_ProcessStateNode_ObserveActor", "GetNodeDescriptionInCS");

	Params::BED_ProcessStateNode_ObserveActor_GetNodeDescriptionInCS Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function b1-Managed.BED_ProcessStateNode_Timer.GetNodeDescriptionInCS
// (Native, Event, Public, HasOutParams, BlueprintEvent, Const)
// Parameters:
// class FString                           ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash)

class FString UBED_ProcessStateNode_Timer::GetNodeDescriptionInCS() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BED_ProcessStateNode_Timer", "GetNodeDescriptionInCS");

	Params::BED_ProcessStateNode_Timer_GetNodeDescriptionInCS Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function b1-Managed.BED_ProcessMachineNode_Fork.CanUserAddOutputInCS
// (Native, Event, Public, HasOutParams, BlueprintEvent, Const)
// Parameters:
// uint8                                   ReturnValue                                            (Parm, OutParm, ReturnParm, NoDestructor, HasGetValueTypeHash)

uint8 UBED_ProcessMachineNode_Fork::CanUserAddOutputInCS() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BED_ProcessMachineNode_Fork", "CanUserAddOutputInCS");

	Params::BED_ProcessMachineNode_Fork_CanUserAddOutputInCS Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function b1-Managed.BED_ProcessMachineNode_Fork.IsSupportViewType
// (Native, Event, Public, HasOutParams, BlueprintEvent, Const)
// Parameters:
// ECalliopeViewType                       InViewType                                             (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// uint8                                   ReturnValue                                            (Parm, OutParm, ReturnParm, NoDestructor, HasGetValueTypeHash)

uint8 UBED_ProcessMachineNode_Fork::IsSupportViewType(const ECalliopeViewType& InViewType) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BED_ProcessMachineNode_Fork", "IsSupportViewType");

	Params::BED_ProcessMachineNode_Fork_IsSupportViewType Parms{};

	Parms.InViewType = InViewType;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function b1-Managed.BUI_DataValidatePanel.OnCheckDisplayFull
// (Native, Public, Private)
// Parameters:
// uint8                                   bIsChecked                                             (Parm, NoDestructor, HasGetValueTypeHash)

void UBUI_DataValidatePanel::OnCheckDisplayFull(uint8 bIsChecked)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BUI_DataValidatePanel", "OnCheckDisplayFull");

	Params::BUI_DataValidatePanel_OnCheckDisplayFull Parms{};

	Parms.bIsChecked = bIsChecked;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function b1-Managed.BUI_DataValidatePanel.OnClickOpenLog
// (Native, Public, Private)

void UBUI_DataValidatePanel::OnClickOpenLog()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BUI_DataValidatePanel", "OnClickOpenLog");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function b1-Managed.BUI_DataValidatePanel.OnClickClose
// (Native, Public, Private, BlueprintCallable)

void UBUI_DataValidatePanel::OnClickClose()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BUI_DataValidatePanel", "OnClickClose");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function b1-Managed.BED_ProcessMachineNode_Join.CanUserAddInputInCS
// (Native, Event, Public, HasOutParams, BlueprintEvent, Const)
// Parameters:
// uint8                                   ReturnValue                                            (Parm, OutParm, ReturnParm, NoDestructor, HasGetValueTypeHash)

uint8 UBED_ProcessMachineNode_Join::CanUserAddInputInCS() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BED_ProcessMachineNode_Join", "CanUserAddInputInCS");

	Params::BED_ProcessMachineNode_Join_CanUserAddInputInCS Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function b1-Managed.BED_ProcessMachineNode_Join.IsSupportViewType
// (Native, Event, Public, HasOutParams, BlueprintEvent, Const)
// Parameters:
// ECalliopeViewType                       InViewType                                             (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// uint8                                   ReturnValue                                            (Parm, OutParm, ReturnParm, NoDestructor, HasGetValueTypeHash)

uint8 UBED_ProcessMachineNode_Join::IsSupportViewType(const ECalliopeViewType& InViewType) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BED_ProcessMachineNode_Join", "IsSupportViewType");

	Params::BED_ProcessMachineNode_Join_IsSupportViewType Parms{};

	Parms.InViewType = InViewType;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function b1-Managed.BED_QuestNode_AiConversation.GetNodeDescriptionInCS
// (Native, Event, Public, HasOutParams, BlueprintEvent, Const)
// Parameters:
// class FString                           ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash)

class FString UBED_QuestNode_AiConversation::GetNodeDescriptionInCS() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BED_QuestNode_AiConversation", "GetNodeDescriptionInCS");

	Params::BED_QuestNode_AiConversation_GetNodeDescriptionInCS Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function b1-Managed.BED_QuestNode_GainItem.GetNodeDescriptionInCS
// (Native, Event, Public, HasOutParams, BlueprintEvent, Const)
// Parameters:
// class FString                           ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash)

class FString UBED_QuestNode_GainItem::GetNodeDescriptionInCS() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BED_QuestNode_GainItem", "GetNodeDescriptionInCS");

	Params::BED_QuestNode_GainItem_GetNodeDescriptionInCS Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function b1-Managed.BED_QuestNode_GamePass.GetNodeDescriptionInCS
// (Native, Event, Public, HasOutParams, BlueprintEvent, Const)
// Parameters:
// class FString                           ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash)

class FString UBED_QuestNode_GamePass::GetNodeDescriptionInCS() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BED_QuestNode_GamePass", "GetNodeDescriptionInCS");

	Params::BED_QuestNode_GamePass_GetNodeDescriptionInCS Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function b1-Managed.BED_QuestNode_OlineScreenMsg.GetNodeDescriptionInCS
// (Native, Event, Public, HasOutParams, BlueprintEvent, Const)
// Parameters:
// class FString                           ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash)

class FString UBED_QuestNode_OlineScreenMsg::GetNodeDescriptionInCS() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BED_QuestNode_OlineScreenMsg", "GetNodeDescriptionInCS");

	Params::BED_QuestNode_OlineScreenMsg_GetNodeDescriptionInCS Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function b1-Managed.BED_QuestNode_RemoveBuff.GetNodeDescriptionInCS
// (Native, Event, Public, HasOutParams, BlueprintEvent, Const)
// Parameters:
// class FString                           ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash)

class FString UBED_QuestNode_RemoveBuff::GetNodeDescriptionInCS() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BED_QuestNode_RemoveBuff", "GetNodeDescriptionInCS");

	Params::BED_QuestNode_RemoveBuff_GetNodeDescriptionInCS Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function b1-Managed.BED_QuestNode_SwitchCameraGroup.GetNodeDescriptionInCS
// (Native, Event, Public, HasOutParams, BlueprintEvent, Const)
// Parameters:
// class FString                           ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash)

class FString UBED_QuestNode_SwitchCameraGroup::GetNodeDescriptionInCS() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BED_QuestNode_SwitchCameraGroup", "GetNodeDescriptionInCS");

	Params::BED_QuestNode_SwitchCameraGroup_GetNodeDescriptionInCS Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function b1-Managed.BED_ComboNode_Restart.GetContextOutputsInCS
// (Native, Event, Public, HasOutParams, BlueprintEvent)
// Parameters:
// TArray<class FName>                     ReturnValue                                            (Parm, OutParm, ReturnParm)

TArray<class FName> UBED_ComboNode_Restart::GetContextOutputsInCS()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BED_ComboNode_Restart", "GetContextOutputsInCS");

	Params::BED_ComboNode_Restart_GetContextOutputsInCS Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function b1-Managed.BED_ComboNode_Restart.GetContextInputsInCS
// (Native, Event, Public, HasOutParams, BlueprintEvent)
// Parameters:
// TArray<class FName>                     ReturnValue                                            (Parm, OutParm, ReturnParm)

TArray<class FName> UBED_ComboNode_Restart::GetContextInputsInCS()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BED_ComboNode_Restart", "GetContextInputsInCS");

	Params::BED_ComboNode_Restart_GetContextInputsInCS Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function b1-Managed.BED_QuestNode_BlendToCamera.GetNodeDescriptionInCS
// (Native, Event, Public, HasOutParams, BlueprintEvent, Const)
// Parameters:
// class FString                           ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash)

class FString UBED_QuestNode_BlendToCamera::GetNodeDescriptionInCS() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BED_QuestNode_BlendToCamera", "GetNodeDescriptionInCS");

	Params::BED_QuestNode_BlendToCamera_GetNodeDescriptionInCS Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function b1-Managed.BED_QuestNode_CustomInput.GetNodeDescriptionInCS
// (Native, Event, Public, HasOutParams, BlueprintEvent, Const)
// Parameters:
// class FString                           ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash)

class FString UBED_QuestNode_CustomInput::GetNodeDescriptionInCS() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BED_QuestNode_CustomInput", "GetNodeDescriptionInCS");

	Params::BED_QuestNode_CustomInput_GetNodeDescriptionInCS Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function b1-Managed.BED_QuestNode_ExecutionSequence.CanUserAddOutputInCS
// (Native, Event, Public, HasOutParams, BlueprintEvent, Const)
// Parameters:
// uint8                                   ReturnValue                                            (Parm, OutParm, ReturnParm, NoDestructor, HasGetValueTypeHash)

uint8 UBED_QuestNode_ExecutionSequence::CanUserAddOutputInCS() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BED_QuestNode_ExecutionSequence", "CanUserAddOutputInCS");

	Params::BED_QuestNode_ExecutionSequence_CanUserAddOutputInCS Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function b1-Managed.BED_QuestNode_Log.GetNodeDescriptionInCS
// (Native, Event, Public, HasOutParams, BlueprintEvent, Const)
// Parameters:
// class FString                           ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash)

class FString UBED_QuestNode_Log::GetNodeDescriptionInCS() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BED_QuestNode_Log", "GetNodeDescriptionInCS");

	Params::BED_QuestNode_Log_GetNodeDescriptionInCS Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function b1-Managed.BED_QuestNode_Log.IsSupportViewType
// (Native, Event, Public, HasOutParams, BlueprintEvent, Const)
// Parameters:
// ECalliopeViewType                       InViewType                                             (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// uint8                                   ReturnValue                                            (Parm, OutParm, ReturnParm, NoDestructor, HasGetValueTypeHash)

uint8 UBED_QuestNode_Log::IsSupportViewType(const ECalliopeViewType& InViewType) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BED_QuestNode_Log", "IsSupportViewType");

	Params::BED_QuestNode_Log_IsSupportViewType Parms{};

	Parms.InViewType = InViewType;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function b1-Managed.BED_QuestNode_LogicalOr.CanUserAddInputInCS
// (Native, Event, Public, HasOutParams, BlueprintEvent, Const)
// Parameters:
// uint8                                   ReturnValue                                            (Parm, OutParm, ReturnParm, NoDestructor, HasGetValueTypeHash)

uint8 UBED_QuestNode_LogicalOr::CanUserAddInputInCS() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BED_QuestNode_LogicalOr", "CanUserAddInputInCS");

	Params::BED_QuestNode_LogicalOr_CanUserAddInputInCS Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function b1-Managed.BED_QuestNode_ObserveByCondition.PostPropertyChanged
// (Native, Event, Public, BlueprintEvent)
// Parameters:
// class FString                           MemberName                                             (Parm, ZeroConstructor, HasGetValueTypeHash)
// class FString                           PropertyName                                           (Parm, ZeroConstructor, HasGetValueTypeHash)

void UBED_QuestNode_ObserveByCondition::PostPropertyChanged(const class FString& MemberName, const class FString& PropertyName)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BED_QuestNode_ObserveByCondition", "PostPropertyChanged");

	Params::BED_QuestNode_ObserveByCondition_PostPropertyChanged Parms{};

	Parms.MemberName = std::move(MemberName);
	Parms.PropertyName = std::move(PropertyName);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function b1-Managed.BED_QuestNode_ObserveByCondition.GetNodeDescriptionInCS
// (Native, Event, Public, HasOutParams, BlueprintEvent, Const)
// Parameters:
// class FString                           ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash)

class FString UBED_QuestNode_ObserveByCondition::GetNodeDescriptionInCS() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BED_QuestNode_ObserveByCondition", "GetNodeDescriptionInCS");

	Params::BED_QuestNode_ObserveByCondition_GetNodeDescriptionInCS Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function b1-Managed.BED_QuestNode_SubGraph.GetContextOutputsInCS
// (Native, Event, Public, HasOutParams, BlueprintEvent)
// Parameters:
// TArray<class FName>                     ReturnValue                                            (Parm, OutParm, ReturnParm)

TArray<class FName> UBED_QuestNode_SubGraph::GetContextOutputsInCS()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BED_QuestNode_SubGraph", "GetContextOutputsInCS");

	Params::BED_QuestNode_SubGraph_GetContextOutputsInCS Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function b1-Managed.BED_QuestNode_SubGraph.GetContextInputsInCS
// (Native, Event, Public, HasOutParams, BlueprintEvent)
// Parameters:
// TArray<class FName>                     ReturnValue                                            (Parm, OutParm, ReturnParm)

TArray<class FName> UBED_QuestNode_SubGraph::GetContextInputsInCS()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BED_QuestNode_SubGraph", "GetContextInputsInCS");

	Params::BED_QuestNode_SubGraph_GetContextInputsInCS Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function b1-Managed.BED_QuestNode_SubGraph.PostPropertyChanged
// (Native, Event, Public, BlueprintEvent)
// Parameters:
// class FString                           MemberName                                             (Parm, ZeroConstructor, HasGetValueTypeHash)
// class FString                           PropertyName                                           (Parm, ZeroConstructor, HasGetValueTypeHash)

void UBED_QuestNode_SubGraph::PostPropertyChanged(const class FString& MemberName, const class FString& PropertyName)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BED_QuestNode_SubGraph", "PostPropertyChanged");

	Params::BED_QuestNode_SubGraph_PostPropertyChanged Parms{};

	Parms.MemberName = std::move(MemberName);
	Parms.PropertyName = std::move(PropertyName);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function b1-Managed.BED_QuestNode_SubGraph.PrePropertyChanged
// (Native, Event, Public, BlueprintEvent)
// Parameters:
// class FString                           PropertyName                                           (Parm, ZeroConstructor, HasGetValueTypeHash)

void UBED_QuestNode_SubGraph::PrePropertyChanged(const class FString& PropertyName)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BED_QuestNode_SubGraph", "PrePropertyChanged");

	Params::BED_QuestNode_SubGraph_PrePropertyChanged Parms{};

	Parms.PropertyName = std::move(PropertyName);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function b1-Managed.BED_QuestNode_SubGraph.GetAssetToEditInCS
// (Native, Event, Public, HasOutParams, BlueprintEvent)
// Parameters:
// class UObject*                          ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

class UObject* UBED_QuestNode_SubGraph::GetAssetToEditInCS()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BED_QuestNode_SubGraph", "GetAssetToEditInCS");

	Params::BED_QuestNode_SubGraph_GetAssetToEditInCS Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function b1-Managed.BED_QuestNode_SubGraph.GetNodeDescriptionInCS
// (Native, Event, Public, HasOutParams, BlueprintEvent, Const)
// Parameters:
// class FString                           ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash)

class FString UBED_QuestNode_SubGraph::GetNodeDescriptionInCS() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BED_QuestNode_SubGraph", "GetNodeDescriptionInCS");

	Params::BED_QuestNode_SubGraph_GetNodeDescriptionInCS Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function b1-Managed.BED_QuestNode_Timer.GetNodeDescriptionInCS
// (Native, Event, Public, HasOutParams, BlueprintEvent, Const)
// Parameters:
// class FString                           ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash)

class FString UBED_QuestNode_Timer::GetNodeDescriptionInCS() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BED_QuestNode_Timer", "GetNodeDescriptionInCS");

	Params::BED_QuestNode_Timer_GetNodeDescriptionInCS Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function b1-Managed.BED_StateNode_Join.CanUserAddInputInCS
// (Native, Event, Public, HasOutParams, BlueprintEvent, Const)
// Parameters:
// uint8                                   ReturnValue                                            (Parm, OutParm, ReturnParm, NoDestructor, HasGetValueTypeHash)

uint8 UBED_StateNode_Join::CanUserAddInputInCS() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BED_StateNode_Join", "CanUserAddInputInCS");

	Params::BED_StateNode_Join_CanUserAddInputInCS Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function b1-Managed.BED_StateNode_Junction.GetNodeDescriptionInCS
// (Native, Event, Public, HasOutParams, BlueprintEvent, Const)
// Parameters:
// class FString                           ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash)

class FString UBED_StateNode_Junction::GetNodeDescriptionInCS() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BED_StateNode_Junction", "GetNodeDescriptionInCS");

	Params::BED_StateNode_Junction_GetNodeDescriptionInCS Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function b1-Managed.BED_StateNode_Single.GetContextOutputsInCS
// (Native, Event, Public, HasOutParams, BlueprintEvent)
// Parameters:
// TArray<class FName>                     ReturnValue                                            (Parm, OutParm, ReturnParm)

TArray<class FName> UBED_StateNode_Single::GetContextOutputsInCS()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BED_StateNode_Single", "GetContextOutputsInCS");

	Params::BED_StateNode_Single_GetContextOutputsInCS Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function b1-Managed.BED_StateNode_Single.GetContextInputsInCS
// (Native, Event, Public, HasOutParams, BlueprintEvent)
// Parameters:
// TArray<class FName>                     ReturnValue                                            (Parm, OutParm, ReturnParm)

TArray<class FName> UBED_StateNode_Single::GetContextInputsInCS()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BED_StateNode_Single", "GetContextInputsInCS");

	Params::BED_StateNode_Single_GetContextInputsInCS Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function b1-Managed.BED_StateNode_Single.PostPropertyChanged
// (Native, Event, Public, BlueprintEvent)
// Parameters:
// class FString                           MemberName                                             (Parm, ZeroConstructor, HasGetValueTypeHash)
// class FString                           PropertyName                                           (Parm, ZeroConstructor, HasGetValueTypeHash)

void UBED_StateNode_Single::PostPropertyChanged(const class FString& MemberName, const class FString& PropertyName)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BED_StateNode_Single", "PostPropertyChanged");

	Params::BED_StateNode_Single_PostPropertyChanged Parms{};

	Parms.MemberName = std::move(MemberName);
	Parms.PropertyName = std::move(PropertyName);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function b1-Managed.BED_StateNode_Single.GetAssetToEditInCS
// (Native, Event, Public, HasOutParams, BlueprintEvent)
// Parameters:
// class UObject*                          ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

class UObject* UBED_StateNode_Single::GetAssetToEditInCS()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BED_StateNode_Single", "GetAssetToEditInCS");

	Params::BED_StateNode_Single_GetAssetToEditInCS Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function b1-Managed.BED_StateNode_Single.PrePropertyChanged
// (Native, Event, Public, BlueprintEvent)
// Parameters:
// class FString                           PropertyName                                           (Parm, ZeroConstructor, HasGetValueTypeHash)

void UBED_StateNode_Single::PrePropertyChanged(const class FString& PropertyName)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BED_StateNode_Single", "PrePropertyChanged");

	Params::BED_StateNode_Single_PrePropertyChanged Parms{};

	Parms.PropertyName = std::move(PropertyName);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function b1-Managed.BED_StateNode_Single.JumpToEnterStateNode
// (Native, Public, Private)

void UBED_StateNode_Single::JumpToEnterStateNode()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BED_StateNode_Single", "JumpToEnterStateNode");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function b1-Managed.BED_StateNode_Single.GetNodeDescriptionInCS
// (Native, Event, Public, HasOutParams, BlueprintEvent, Const)
// Parameters:
// class FString                           ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash)

class FString UBED_StateNode_Single::GetNodeDescriptionInCS() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BED_StateNode_Single", "GetNodeDescriptionInCS");

	Params::BED_StateNode_Single_GetNodeDescriptionInCS Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function b1-Managed.BED_StateNode_Single.SetSubGraphAssetInPIE
// (Native, Event, Public, BlueprintEvent, Const)
// Parameters:
// class UCalliopeAsset*                   InSubGraphAsset                                        (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UBED_StateNode_Single::SetSubGraphAssetInPIE(class UCalliopeAsset* InSubGraphAsset) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BED_StateNode_Single", "SetSubGraphAssetInPIE");

	Params::BED_StateNode_Single_SetSubGraphAssetInPIE Parms{};

	Parms.InSubGraphAsset = InSubGraphAsset;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function b1-Managed.BED_StateNode_Single.OnSelectNodeInCS
// (Native, Event, Public, BlueprintEvent, Const)

void UBED_StateNode_Single::OnSelectNodeInCS() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BED_StateNode_Single", "OnSelectNodeInCS");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function b1-Managed.BED_StateNode_Single.IsSubGraphNode
// (Native, Event, Public, HasOutParams, BlueprintEvent, Const)
// Parameters:
// uint8                                   ReturnValue                                            (Parm, OutParm, ReturnParm, NoDestructor, HasGetValueTypeHash)

uint8 UBED_StateNode_Single::IsSubGraphNode() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BED_StateNode_Single", "IsSubGraphNode");

	Params::BED_StateNode_Single_IsSubGraphNode Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function b1-Managed.BED_TaskNode_ExecutionSequence.CanUserAddOutputInCS
// (Native, Event, Public, HasOutParams, BlueprintEvent, Const)
// Parameters:
// uint8                                   ReturnValue                                            (Parm, OutParm, ReturnParm, NoDestructor, HasGetValueTypeHash)

uint8 UBED_TaskNode_ExecutionSequence::CanUserAddOutputInCS() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BED_TaskNode_ExecutionSequence", "CanUserAddOutputInCS");

	Params::BED_TaskNode_ExecutionSequence_CanUserAddOutputInCS Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function b1-Managed.BED_TaskNode_LogicalAnd.CanUserAddInputInCS
// (Native, Event, Public, HasOutParams, BlueprintEvent, Const)
// Parameters:
// uint8                                   ReturnValue                                            (Parm, OutParm, ReturnParm, NoDestructor, HasGetValueTypeHash)

uint8 UBED_TaskNode_LogicalAnd::CanUserAddInputInCS() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BED_TaskNode_LogicalAnd", "CanUserAddInputInCS");

	Params::BED_TaskNode_LogicalAnd_CanUserAddInputInCS Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function b1-Managed.BED_TaskNode_ObserveUnitByCondition.PostPropertyChanged
// (Native, Event, Public, BlueprintEvent)
// Parameters:
// class FString                           MemberName                                             (Parm, ZeroConstructor, HasGetValueTypeHash)
// class FString                           PropertyName                                           (Parm, ZeroConstructor, HasGetValueTypeHash)

void UBED_TaskNode_ObserveUnitByCondition::PostPropertyChanged(const class FString& MemberName, const class FString& PropertyName)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BED_TaskNode_ObserveUnitByCondition", "PostPropertyChanged");

	Params::BED_TaskNode_ObserveUnitByCondition_PostPropertyChanged Parms{};

	Parms.MemberName = std::move(MemberName);
	Parms.PropertyName = std::move(PropertyName);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function b1-Managed.BED_TaskNode_ObserveUnitByCondition.GetNodeDescriptionInCS
// (Native, Event, Public, HasOutParams, BlueprintEvent, Const)
// Parameters:
// class FString                           ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash)

class FString UBED_TaskNode_ObserveUnitByCondition::GetNodeDescriptionInCS() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BED_TaskNode_ObserveUnitByCondition", "GetNodeDescriptionInCS");

	Params::BED_TaskNode_ObserveUnitByCondition_GetNodeDescriptionInCS Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function b1-Managed.BED_TaskNode_ObserveRoleData.GetNodeDescriptionInCS
// (Native, Event, Public, HasOutParams, BlueprintEvent, Const)
// Parameters:
// class FString                           ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash)

class FString UBED_TaskNode_ObserveRoleData::GetNodeDescriptionInCS() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BED_TaskNode_ObserveRoleData", "GetNodeDescriptionInCS");

	Params::BED_TaskNode_ObserveRoleData_GetNodeDescriptionInCS Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function b1-Managed.BUI_EnemyBloodBarPure.DoFreeOwner
// (Native, Public, BlueprintCallable)

void UBUI_EnemyBloodBarPure::DoFreeOwner()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BUI_EnemyBloodBarPure", "DoFreeOwner");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function b1-Managed.BUI_EnemyBloodBarPure.DoShowOut
// (Native, Public, BlueprintCallable)

void UBUI_EnemyBloodBarPure::DoShowOut()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BUI_EnemyBloodBarPure", "DoShowOut");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function b1-Managed.BUI_EnemyBloodBarPure.DoGSInit
// (Native, Public, BlueprintCallable)
// Parameters:
// class AActor*                           OwnerCharacter                                         (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UBUI_EnemyBloodBarPure::DoGSInit(class AActor* OwnerCharacter)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BUI_EnemyBloodBarPure", "DoGSInit");

	Params::BUI_EnemyBloodBarPure_DoGSInit Parms{};

	Parms.OwnerCharacter = OwnerCharacter;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function b1-Managed.BUI_EnemyBloodBarPure.DoShowIn
// (Native, Public, BlueprintCallable)
// Parameters:
// class AActor*                           Owner                                                  (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UBUI_EnemyBloodBarPure::DoShowIn(class AActor* Owner)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BUI_EnemyBloodBarPure", "DoShowIn");

	Params::BUI_EnemyBloodBarPure_DoShowIn Parms{};

	Parms.Owner = Owner;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function b1-Managed.BUI_BossBar.GSInit
// (Native, Public, BlueprintCallable)
// Parameters:
// class AActor*                           InOwnerCharacter                                       (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UBUI_BossBar::GSInit(class AActor* InOwnerCharacter)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BUI_BossBar", "GSInit");

	Params::BUI_BossBar_GSInit Parms{};

	Parms.InOwnerCharacter = InOwnerCharacter;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function b1-Managed.BED_TaskNode_RunProcessGraph.PostPropertyChanged
// (Native, Event, Public, BlueprintEvent)
// Parameters:
// class FString                           MemberName                                             (Parm, ZeroConstructor, HasGetValueTypeHash)
// class FString                           PropertyName                                           (Parm, ZeroConstructor, HasGetValueTypeHash)

void UBED_TaskNode_RunProcessGraph::PostPropertyChanged(const class FString& MemberName, const class FString& PropertyName)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BED_TaskNode_RunProcessGraph", "PostPropertyChanged");

	Params::BED_TaskNode_RunProcessGraph_PostPropertyChanged Parms{};

	Parms.MemberName = std::move(MemberName);
	Parms.PropertyName = std::move(PropertyName);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function b1-Managed.BED_TaskNode_RunProcessGraph.PrePropertyChanged
// (Native, Event, Public, BlueprintEvent)
// Parameters:
// class FString                           PropertyName                                           (Parm, ZeroConstructor, HasGetValueTypeHash)

void UBED_TaskNode_RunProcessGraph::PrePropertyChanged(const class FString& PropertyName)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BED_TaskNode_RunProcessGraph", "PrePropertyChanged");

	Params::BED_TaskNode_RunProcessGraph_PrePropertyChanged Parms{};

	Parms.PropertyName = std::move(PropertyName);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function b1-Managed.BED_TaskNode_RunProcessGraph.GetAssetToEditInCS
// (Native, Event, Public, HasOutParams, BlueprintEvent)
// Parameters:
// class UObject*                          ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

class UObject* UBED_TaskNode_RunProcessGraph::GetAssetToEditInCS()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BED_TaskNode_RunProcessGraph", "GetAssetToEditInCS");

	Params::BED_TaskNode_RunProcessGraph_GetAssetToEditInCS Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function b1-Managed.BED_TaskNode_RunProcessGraph.GetNodeDescriptionInCS
// (Native, Event, Public, HasOutParams, BlueprintEvent, Const)
// Parameters:
// class FString                           ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash)

class FString UBED_TaskNode_RunProcessGraph::GetNodeDescriptionInCS() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BED_TaskNode_RunProcessGraph", "GetNodeDescriptionInCS");

	Params::BED_TaskNode_RunProcessGraph_GetNodeDescriptionInCS Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function b1-Managed.BED_TaskNode_SaveArchive.GetNodeDescriptionInCS
// (Native, Event, Public, HasOutParams, BlueprintEvent, Const)
// Parameters:
// class FString                           ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash)

class FString UBED_TaskNode_SaveArchive::GetNodeDescriptionInCS() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BED_TaskNode_SaveArchive", "GetNodeDescriptionInCS");

	Params::BED_TaskNode_SaveArchive_GetNodeDescriptionInCS Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function b1-Managed.SkillsRefCheckToolUtility.Run
// (Native, Event, Public, BlueprintCallable, BlueprintEvent)

void USkillsRefCheckToolUtility::Run()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SkillsRefCheckToolUtility", "Run");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function b1-Managed.SkillsRefCheckToolUtility.CheckMontage
// (Native, Event, Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// int32                                   SkillID                                                (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// class FString                           Path                                                   (Parm, ZeroConstructor, HasGetValueTypeHash)

void USkillsRefCheckToolUtility::CheckMontage(int32 SkillID, const class FString& Path)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SkillsRefCheckToolUtility", "CheckMontage");

	Params::SkillsRefCheckToolUtility_CheckMontage Parms{};

	Parms.SkillID = SkillID;
	Parms.Path = std::move(Path);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function b1-Managed.SkillsRefCheckToolUtility.CheckNotify
// (Native, Public, BlueprintCallable)
// Parameters:
// int32                                   SkillID                                                (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// struct FAnimNotifyEvent                 Notify                                                 (Parm)

void USkillsRefCheckToolUtility::CheckNotify(int32 SkillID, const struct FAnimNotifyEvent& Notify)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SkillsRefCheckToolUtility", "CheckNotify");

	Params::SkillsRefCheckToolUtility_CheckNotify Parms{};

	Parms.SkillID = SkillID;
	Parms.Notify = std::move(Notify);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function b1-Managed.GSMovePanel.SetOffset
// (Native, Public, BlueprintCallable)
// Parameters:
// float                                   Offset_0                                               (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UGSMovePanel::SetOffset(float Offset_0)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GSMovePanel", "SetOffset");

	Params::GSMovePanel_SetOffset Parms{};

	Parms.Offset_0 = Offset_0;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function b1-Managed.GSMovePanel.SetScale
// (Native, Public, BlueprintCallable)
// Parameters:
// float                                   Scale_0                                                (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UGSMovePanel::SetScale(float Scale_0)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GSMovePanel", "SetScale");

	Params::GSMovePanel_SetScale Parms{};

	Parms.Scale_0 = Scale_0;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function b1-Managed.GSMovePanel.SetSpeed
// (Native, Public, BlueprintCallable)
// Parameters:
// float                                   Speed_0                                                (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UGSMovePanel::SetSpeed(float Speed_0)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GSMovePanel", "SetSpeed");

	Params::GSMovePanel_SetSpeed Parms{};

	Parms.Speed_0 = Speed_0;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function b1-Managed.BST_PostAudioOnUnit.GetDurationTime
// (Native, Event, Public, HasOutParams, BlueprintEvent)
// Parameters:
// float                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

float UBST_PostAudioOnUnit::GetDurationTime()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BST_PostAudioOnUnit", "GetDurationTime");

	Params::BST_PostAudioOnUnit_GetDurationTime Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function b1-Managed.BST_PostAudioOnUnit.GetDisplayName
// (Native, Event, Public, HasOutParams, BlueprintEvent)
// Parameters:
// class FString                           ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash)

class FString UBST_PostAudioOnUnit::GetDisplayName()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BST_PostAudioOnUnit", "GetDisplayName");

	Params::BST_PostAudioOnUnit_GetDisplayName Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function b1-Managed.BST_PostAudioOnUnit.Evaluate
// (Native, Event, Public, BlueprintEvent)
// Parameters:
// class UMovieSceneCalliopeSectionData*   InSectionData                                          (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UBST_PostAudioOnUnit::Evaluate(class UMovieSceneCalliopeSectionData* InSectionData)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BST_PostAudioOnUnit", "Evaluate");

	Params::BST_PostAudioOnUnit_Evaluate Parms{};

	Parms.InSectionData = InSectionData;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function b1-Managed.BST_PostAudioOnUnit.SetEvent_Editor
// (Native, Public, BlueprintCallable)
// Parameters:
// class UAkAudioEvent*                    Event                                                  (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UBST_PostAudioOnUnit::SetEvent_Editor(class UAkAudioEvent* Event)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BST_PostAudioOnUnit", "SetEvent_Editor");

	Params::BST_PostAudioOnUnit_SetEvent_Editor Parms{};

	Parms.Event = Event;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function b1-Managed.BST_PostAudioOnUnit.SectionBeingDestroyed
// (Native, Event, Public, BlueprintEvent, Const)
// Parameters:
// class UMovieSceneCalliopeSectionData*   InSectionData                                          (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UBST_PostAudioOnUnit::SectionBeingDestroyed(class UMovieSceneCalliopeSectionData* InSectionData) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BST_PostAudioOnUnit", "SectionBeingDestroyed");

	Params::BST_PostAudioOnUnit_SectionBeingDestroyed Parms{};

	Parms.InSectionData = InSectionData;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function b1-Managed.BST_PostAudioOnUnit.MakeSectionData
// (Native, Event, Public, HasOutParams, BlueprintEvent, Const)
// Parameters:
// class UMovieSceneCalliopeSectionData*   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

class UMovieSceneCalliopeSectionData* UBST_PostAudioOnUnit::MakeSectionData() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BST_PostAudioOnUnit", "MakeSectionData");

	Params::BST_PostAudioOnUnit_MakeSectionData Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function b1-Managed.SequenceSectionContext_PostAudioOnUnit.PostEventCallbackHandler
// (Native, Public)
// Parameters:
// EAkCallbackType                         CallbackType                                           (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// class UAkCallbackInfo*                  CallbackInfo                                           (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void USequenceSectionContext_PostAudioOnUnit::PostEventCallbackHandler(EAkCallbackType CallbackType, class UAkCallbackInfo* CallbackInfo)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SequenceSectionContext_PostAudioOnUnit", "PostEventCallbackHandler");

	Params::SequenceSectionContext_PostAudioOnUnit_PostEventCallbackHandler Parms{};

	Parms.CallbackType = CallbackType;
	Parms.CallbackInfo = CallbackInfo;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function b1-Managed.BSNS_MarkCannotBeSkip.OnNotifyBegin
// (Native, Event, Public, BlueprintEvent)
// Parameters:
// class UCalliopeLevelSequencePlayer*     InPlayer                                               (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// int32                                   InStatus                                               (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// uint8                                   bInBackwards                                           (Parm, NoDestructor, HasGetValueTypeHash)

void UBSNS_MarkCannotBeSkip::OnNotifyBegin(class UCalliopeLevelSequencePlayer* InPlayer, int32 InStatus, uint8 bInBackwards)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BSNS_MarkCannotBeSkip", "OnNotifyBegin");

	Params::BSNS_MarkCannotBeSkip_OnNotifyBegin Parms{};

	Parms.InPlayer = InPlayer;
	Parms.InStatus = InStatus;
	Parms.bInBackwards = bInBackwards;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function b1-Managed.BSNS_MarkCannotBeSkip.OnNotifyEnd
// (Native, Event, Public, BlueprintEvent)
// Parameters:
// class UCalliopeLevelSequencePlayer*     InPlayer                                               (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// int32                                   InStatus                                               (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// uint8                                   bInBackwards                                           (Parm, NoDestructor, HasGetValueTypeHash)

void UBSNS_MarkCannotBeSkip::OnNotifyEnd(class UCalliopeLevelSequencePlayer* InPlayer, int32 InStatus, uint8 bInBackwards)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BSNS_MarkCannotBeSkip", "OnNotifyEnd");

	Params::BSNS_MarkCannotBeSkip_OnNotifyEnd Parms{};

	Parms.InPlayer = InPlayer;
	Parms.InStatus = InStatus;
	Parms.bInBackwards = bInBackwards;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function b1-Managed.BSNS_ShowSpecialUI.GetDisplayName
// (Native, Event, Public, HasOutParams, BlueprintEvent)
// Parameters:
// class FString                           ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash)

class FString UBSNS_ShowSpecialUI::GetDisplayName()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BSNS_ShowSpecialUI", "GetDisplayName");

	Params::BSNS_ShowSpecialUI_GetDisplayName Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function b1-Managed.BSNS_ShowSpecialUI.OnNotifyBegin
// (Native, Event, Public, BlueprintEvent)
// Parameters:
// class UCalliopeLevelSequencePlayer*     InPlayer                                               (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// int32                                   InStatus                                               (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// uint8                                   bInBackwards                                           (Parm, NoDestructor, HasGetValueTypeHash)

void UBSNS_ShowSpecialUI::OnNotifyBegin(class UCalliopeLevelSequencePlayer* InPlayer, int32 InStatus, uint8 bInBackwards)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BSNS_ShowSpecialUI", "OnNotifyBegin");

	Params::BSNS_ShowSpecialUI_OnNotifyBegin Parms{};

	Parms.InPlayer = InPlayer;
	Parms.InStatus = InStatus;
	Parms.bInBackwards = bInBackwards;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function b1-Managed.BSN_AddBuffOnUnit.OnPreviewNotify
// (Native, Event, Public, BlueprintEvent)
// Parameters:
// class UObject*                          InPlaybackContext                                      (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// int32                                   InStatus                                               (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// uint8                                   bInBackwards                                           (Parm, NoDestructor, HasGetValueTypeHash)

void UBSN_AddBuffOnUnit::OnPreviewNotify(class UObject* InPlaybackContext, int32 InStatus, uint8 bInBackwards)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BSN_AddBuffOnUnit", "OnPreviewNotify");

	Params::BSN_AddBuffOnUnit_OnPreviewNotify Parms{};

	Parms.InPlaybackContext = InPlaybackContext;
	Parms.InStatus = InStatus;
	Parms.bInBackwards = bInBackwards;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function b1-Managed.BSN_AddBuffOnUnit.OnNotify
// (Native, Event, Public, BlueprintEvent)
// Parameters:
// class UCalliopeLevelSequencePlayer*     InPlayer                                               (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// int32                                   InStatus                                               (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// uint8                                   bInBackwards                                           (Parm, NoDestructor, HasGetValueTypeHash)

void UBSN_AddBuffOnUnit::OnNotify(class UCalliopeLevelSequencePlayer* InPlayer, int32 InStatus, uint8 bInBackwards)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BSN_AddBuffOnUnit", "OnNotify");

	Params::BSN_AddBuffOnUnit_OnNotify Parms{};

	Parms.InPlayer = InPlayer;
	Parms.InStatus = InStatus;
	Parms.bInBackwards = bInBackwards;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function b1-Managed.BSN_ChangeBT.OnNotify
// (Native, Event, Public, BlueprintEvent)
// Parameters:
// class UCalliopeLevelSequencePlayer*     InPlayer                                               (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// int32                                   InStatus                                               (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// uint8                                   bInBackwards                                           (Parm, NoDestructor, HasGetValueTypeHash)

void UBSN_ChangeBT::OnNotify(class UCalliopeLevelSequencePlayer* InPlayer, int32 InStatus, uint8 bInBackwards)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BSN_ChangeBT", "OnNotify");

	Params::BSN_ChangeBT_OnNotify Parms{};

	Parms.InPlayer = InPlayer;
	Parms.InStatus = InStatus;
	Parms.bInBackwards = bInBackwards;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function b1-Managed.BSN_DetachCameraInSkillSequence.OnNotify
// (Native, Event, Public, BlueprintEvent)
// Parameters:
// class UCalliopeLevelSequencePlayer*     InPlayer                                               (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// int32                                   InStatus                                               (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// uint8                                   bInBackwards                                           (Parm, NoDestructor, HasGetValueTypeHash)

void UBSN_DetachCameraInSkillSequence::OnNotify(class UCalliopeLevelSequencePlayer* InPlayer, int32 InStatus, uint8 bInBackwards)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BSN_DetachCameraInSkillSequence", "OnNotify");

	Params::BSN_DetachCameraInSkillSequence_OnNotify Parms{};

	Parms.InPlayer = InPlayer;
	Parms.InStatus = InStatus;
	Parms.bInBackwards = bInBackwards;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function b1-Managed.BSN_HideUI.OnNotify
// (Native, Event, Public, BlueprintEvent)
// Parameters:
// class UCalliopeLevelSequencePlayer*     InPlayer                                               (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// int32                                   InStatus                                               (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// uint8                                   bInBackwards                                           (Parm, NoDestructor, HasGetValueTypeHash)

void UBSN_HideUI::OnNotify(class UCalliopeLevelSequencePlayer* InPlayer, int32 InStatus, uint8 bInBackwards)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BSN_HideUI", "OnNotify");

	Params::BSN_HideUI_OnNotify Parms{};

	Parms.InPlayer = InPlayer;
	Parms.InStatus = InStatus;
	Parms.bInBackwards = bInBackwards;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function b1-Managed.BSN_RemoveBuffOnUnit.OnPreviewNotify
// (Native, Event, Public, BlueprintEvent)
// Parameters:
// class UObject*                          InPlaybackContext                                      (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// int32                                   InStatus                                               (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// uint8                                   bInBackwards                                           (Parm, NoDestructor, HasGetValueTypeHash)

void UBSN_RemoveBuffOnUnit::OnPreviewNotify(class UObject* InPlaybackContext, int32 InStatus, uint8 bInBackwards)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BSN_RemoveBuffOnUnit", "OnPreviewNotify");

	Params::BSN_RemoveBuffOnUnit_OnPreviewNotify Parms{};

	Parms.InPlaybackContext = InPlaybackContext;
	Parms.InStatus = InStatus;
	Parms.bInBackwards = bInBackwards;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function b1-Managed.BSN_RemoveBuffOnUnit.OnNotify
// (Native, Event, Public, BlueprintEvent)
// Parameters:
// class UCalliopeLevelSequencePlayer*     InPlayer                                               (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// int32                                   InStatus                                               (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// uint8                                   bInBackwards                                           (Parm, NoDestructor, HasGetValueTypeHash)

void UBSN_RemoveBuffOnUnit::OnNotify(class UCalliopeLevelSequencePlayer* InPlayer, int32 InStatus, uint8 bInBackwards)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BSN_RemoveBuffOnUnit", "OnNotify");

	Params::BSN_RemoveBuffOnUnit_OnNotify Parms{};

	Parms.InPlayer = InPlayer;
	Parms.InStatus = InStatus;
	Parms.bInBackwards = bInBackwards;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function b1-Managed.BSN_SetUnitTransform.OnPreviewNotify
// (Native, Event, Public, BlueprintEvent)
// Parameters:
// class UObject*                          InPlaybackContext                                      (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// int32                                   InStatus                                               (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// uint8                                   bInBackwards                                           (Parm, NoDestructor, HasGetValueTypeHash)

void UBSN_SetUnitTransform::OnPreviewNotify(class UObject* InPlaybackContext, int32 InStatus, uint8 bInBackwards)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BSN_SetUnitTransform", "OnPreviewNotify");

	Params::BSN_SetUnitTransform_OnPreviewNotify Parms{};

	Parms.InPlaybackContext = InPlaybackContext;
	Parms.InStatus = InStatus;
	Parms.bInBackwards = bInBackwards;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function b1-Managed.BSN_SetUnitTransform.OnNotify
// (Native, Event, Public, BlueprintEvent)
// Parameters:
// class UCalliopeLevelSequencePlayer*     InPlayer                                               (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// int32                                   InStatus                                               (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// uint8                                   bInBackwards                                           (Parm, NoDestructor, HasGetValueTypeHash)

void UBSN_SetUnitTransform::OnNotify(class UCalliopeLevelSequencePlayer* InPlayer, int32 InStatus, uint8 bInBackwards)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BSN_SetUnitTransform", "OnNotify");

	Params::BSN_SetUnitTransform_OnNotify Parms{};

	Parms.InPlayer = InPlayer;
	Parms.InStatus = InStatus;
	Parms.bInBackwards = bInBackwards;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function b1-Managed.BSN_ShowUI.OnNotify
// (Native, Event, Public, BlueprintEvent)
// Parameters:
// class UCalliopeLevelSequencePlayer*     InPlayer                                               (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// int32                                   InStatus                                               (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// uint8                                   bInBackwards                                           (Parm, NoDestructor, HasGetValueTypeHash)

void UBSN_ShowUI::OnNotify(class UCalliopeLevelSequencePlayer* InPlayer, int32 InStatus, uint8 bInBackwards)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BSN_ShowUI", "OnNotify");

	Params::BSN_ShowUI_OnNotify Parms{};

	Parms.InPlayer = InPlayer;
	Parms.InStatus = InStatus;
	Parms.bInBackwards = bInBackwards;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function b1-Managed.FWidgetAnimationDynamicEventWrapper.Callback
// (Native, Public, Private)

void UFWidgetAnimationDynamicEventWrapper::Callback()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("FWidgetAnimationDynamicEventWrapper", "Callback");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function b1-Managed.FOnMovieSceneSequencePlayerEventWrapper.Callback
// (Native, Public, Private)

void UFOnMovieSceneSequencePlayerEventWrapper::Callback()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("FOnMovieSceneSequencePlayerEventWrapper", "Callback");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function b1-Managed.FOnUserScrolledEventWrapper.Callback
// (Native, Public, Private)
// Parameters:
// float                                   CurrentOffset                                          (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UFOnUserScrolledEventWrapper::Callback(float CurrentOffset)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("FOnUserScrolledEventWrapper", "Callback");

	Params::FOnUserScrolledEventWrapper_Callback Parms{};

	Parms.CurrentOffset = CurrentOffset;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function b1-Managed.FOnPointerEventWrapper.Callback
// (Native, Public, Private, HasOutParams)
// Parameters:
// struct FGeometry                        Geometry                                               (Parm, IsPlainOldData, NoDestructor)
// struct FPointerEvent                    PointerEvent                                           (Parm)
// struct FEventReply                      ReturnValue                                            (Parm, OutParm, ReturnParm)

struct FEventReply UFOnPointerEventWrapper::Callback(const struct FGeometry& Geometry, const struct FPointerEvent& PointerEvent)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("FOnPointerEventWrapper", "Callback");

	Params::FOnPointerEventWrapper_Callback Parms{};

	Parms.Geometry = std::move(Geometry);
	Parms.PointerEvent = std::move(PointerEvent);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function b1-Managed.FGSOnAKBStateInteruptWrapper.Callback
// (Native, Public, Private)
// Parameters:
// class FName                             BeginStateName                                         (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// class FName                             EndStateName                                           (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// uint8                                   IsFromForceSetStateImmediately                         (Parm, NoDestructor, HasGetValueTypeHash)

void UFGSOnAKBStateInteruptWrapper::Callback(class FName BeginStateName, class FName EndStateName, uint8 IsFromForceSetStateImmediately)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("FGSOnAKBStateInteruptWrapper", "Callback");

	Params::FGSOnAKBStateInteruptWrapper_Callback Parms{};

	Parms.BeginStateName = BeginStateName;
	Parms.EndStateName = EndStateName;
	Parms.IsFromForceSetStateImmediately = IsFromForceSetStateImmediately;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function b1-Managed.FGSOnAKBStateEndWrapper.Callback
// (Native, Public, Private)
// Parameters:
// class FName                             BeginStateName                                         (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// class FName                             EndStateName                                           (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// uint8                                   IsFromForceSetStateImmediately                         (Parm, NoDestructor, HasGetValueTypeHash)

void UFGSOnAKBStateEndWrapper::Callback(class FName BeginStateName, class FName EndStateName, uint8 IsFromForceSetStateImmediately)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("FGSOnAKBStateEndWrapper", "Callback");

	Params::FGSOnAKBStateEndWrapper_Callback Parms{};

	Parms.BeginStateName = BeginStateName;
	Parms.EndStateName = EndStateName;
	Parms.IsFromForceSetStateImmediately = IsFromForceSetStateImmediately;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function b1-Managed.FOnSelectionChangedWrapper.Callback
// (Native, Public, Private)
// Parameters:
// class FString                           SelectedItem                                           (Parm, ZeroConstructor, HasGetValueTypeHash)
// ESelectInfo                             SelectionType                                          (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UFOnSelectionChangedWrapper::Callback(const class FString& SelectedItem, ESelectInfo SelectionType)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("FOnSelectionChangedWrapper", "Callback");

	Params::FOnSelectionChangedWrapper_Callback Parms{};

	Parms.SelectedItem = std::move(SelectedItem);
	Parms.SelectionType = SelectionType;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function b1-Managed.FOnCheckBoxComponentStateChangedWrapper.Callback
// (Native, Public, Private)
// Parameters:
// uint8                                   bIsChecked                                             (Parm, NoDestructor, HasGetValueTypeHash)

void UFOnCheckBoxComponentStateChangedWrapper::Callback(uint8 bIsChecked)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("FOnCheckBoxComponentStateChangedWrapper", "Callback");

	Params::FOnCheckBoxComponentStateChangedWrapper_Callback Parms{};

	Parms.bIsChecked = bIsChecked;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function b1-Managed.FOnButtonClickedEventWrapper.Callback
// (Native, Public, Private)

void UFOnButtonClickedEventWrapper::Callback()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("FOnButtonClickedEventWrapper", "Callback");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function b1-Managed.FOnMediaPlayerMediaEventWrapper.Callback
// (Native, Public, Private)

void UFOnMediaPlayerMediaEventWrapper::Callback()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("FOnMediaPlayerMediaEventWrapper", "Callback");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function b1-Managed.FOnBinkMediaPlayerMediaReachedEndWrapper.Callback
// (Native, Public, Private)

void UFOnBinkMediaPlayerMediaReachedEndWrapper::Callback()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("FOnBinkMediaPlayerMediaReachedEndWrapper", "Callback");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function b1-Managed.FGSOnButtonCheckStateChangedWrapper.Callback
// (Native, Public, Private)
// Parameters:
// int32                                   GSID                                                   (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// uint8                                   bIsChecked                                             (Parm, NoDestructor, HasGetValueTypeHash)

void UFGSOnButtonCheckStateChangedWrapper::Callback(int32 GSID, uint8 bIsChecked)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("FGSOnButtonCheckStateChangedWrapper", "Callback");

	Params::FGSOnButtonCheckStateChangedWrapper_Callback Parms{};

	Parms.GSID = GSID;
	Parms.bIsChecked = bIsChecked;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function b1-Managed.FOnMultiLineEditableTextChangedEventWrapper.Callback
// (Native, Public, Private)
// Parameters:
// class FText                             Text                                                   (Parm)

void UFOnMultiLineEditableTextChangedEventWrapper::Callback(const class FText& Text)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("FOnMultiLineEditableTextChangedEventWrapper", "Callback");

	Params::FOnMultiLineEditableTextChangedEventWrapper_Callback Parms{};

	Parms.Text = std::move(Text);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function b1-Managed.FOnEditableTextBoxCommittedEventWrapper.Callback
// (Native, Public, Private)
// Parameters:
// class FText                             Text                                                   (Parm)
// ETextCommit                             CommitMethod                                           (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UFOnEditableTextBoxCommittedEventWrapper::Callback(const class FText& Text, ETextCommit CommitMethod)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("FOnEditableTextBoxCommittedEventWrapper", "Callback");

	Params::FOnEditableTextBoxCommittedEventWrapper_Callback Parms{};

	Parms.Text = std::move(Text);
	Parms.CommitMethod = CommitMethod;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function b1-Managed.FOnEditableTextBoxChangedEventWrapper.Callback
// (Native, Public, Private)
// Parameters:
// class FText                             Text                                                   (Parm)

void UFOnEditableTextBoxChangedEventWrapper::Callback(const class FText& Text)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("FOnEditableTextBoxChangedEventWrapper", "Callback");

	Params::FOnEditableTextBoxChangedEventWrapper_Callback Parms{};

	Parms.Text = std::move(Text);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function b1-Managed.FOnFloatValueChangedEventWrapper.Callback
// (Native, Public, Private)
// Parameters:
// float                                   Value                                                  (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UFOnFloatValueChangedEventWrapper::Callback(float Value)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("FOnFloatValueChangedEventWrapper", "Callback");

	Params::FOnFloatValueChangedEventWrapper_Callback Parms{};

	Parms.Value = Value;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function b1-Managed.FOnInputActionWrapper.Callback
// (Native, Public, Private)

void UFOnInputActionWrapper::Callback()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("FOnInputActionWrapper", "Callback");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function b1-Managed.FOnIsSelectingKeyChangedWrapper.Callback
// (Native, Public, Private)

void UFOnIsSelectingKeyChangedWrapper::Callback()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("FOnIsSelectingKeyChangedWrapper", "Callback");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function b1-Managed.FOnKeySelectedWrapper.Callback
// (Native, Public, Private)
// Parameters:
// struct FInputChord                      SelectedKey                                            (Parm, HasGetValueTypeHash)

void UFOnKeySelectedWrapper::Callback(const struct FInputChord& SelectedKey)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("FOnKeySelectedWrapper", "Callback");

	Params::FOnKeySelectedWrapper_Callback Parms{};

	Parms.SelectedKey = std::move(SelectedKey);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function b1-Managed.FOnEditableTextChangedEventWrapper.Callback
// (Native, Public, Private)
// Parameters:
// class FText                             Text                                                   (Parm)

void UFOnEditableTextChangedEventWrapper::Callback(const class FText& Text)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("FOnEditableTextChangedEventWrapper", "Callback");

	Params::FOnEditableTextChangedEventWrapper_Callback Parms{};

	Parms.Text = std::move(Text);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function b1-Managed.FDownloadImageDelegateWrapper.Callback
// (Native, Public, Private)
// Parameters:
// class UTexture2DDynamic*                Texture                                                (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UFDownloadImageDelegateWrapper::Callback(class UTexture2DDynamic* Texture)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("FDownloadImageDelegateWrapper", "Callback");

	Params::FDownloadImageDelegateWrapper_Callback Parms{};

	Parms.Texture = Texture;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function b1-Managed.MouseInputControlActor.ReceiveBeginPlay
// (Native, Event, Public, Protected, BlueprintEvent)

void AMouseInputControlActor::ReceiveBeginPlay()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MouseInputControlActor", "ReceiveBeginPlay");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function b1-Managed.MouseInputControlActor.OnTouchPressed
// (Native, Public, Private)

void AMouseInputControlActor::OnTouchPressed()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MouseInputControlActor", "OnTouchPressed");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function b1-Managed.FluidHeightmapFogComponent.RenderHeightmap
// (Native, Public, Private, BlueprintCallable)

void UFluidHeightmapFogComponent::RenderHeightmap()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("FluidHeightmapFogComponent", "RenderHeightmap");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function b1-Managed.FluidHeightmapFogComponent.InitComp
// (Native, Public, BlueprintCallable)

void UFluidHeightmapFogComponent::InitComp()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("FluidHeightmapFogComponent", "InitComp");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function b1-Managed.FluidSimulationComponent.TickComponentInCS
// (Native, Event, Public, BlueprintEvent)
// Parameters:
// float                                   DeltaTime                                              (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UFluidSimulationComponent::TickComponentInCS(float DeltaTime)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("FluidSimulationComponent", "TickComponentInCS");

	Params::FluidSimulationComponent_TickComponentInCS Parms{};

	Parms.DeltaTime = DeltaTime;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function b1-Managed.FluidSimulationComponent.BeginPlayInCS
// (Native, Event, Public, BlueprintEvent)

void UFluidSimulationComponent::BeginPlayInCS()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("FluidSimulationComponent", "BeginPlayInCS");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function b1-Managed.FluidSimulationComponent.RemoveActor
// (Native, Public, BlueprintCallable)
// Parameters:
// class AActor*                           Actor                                                  (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UFluidSimulationComponent::RemoveActor(class AActor* Actor)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("FluidSimulationComponent", "RemoveActor");

	Params::FluidSimulationComponent_RemoveActor Parms{};

	Parms.Actor = Actor;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function b1-Managed.FluidSimulationComponent.AddActor
// (Native, Public, BlueprintCallable)
// Parameters:
// class AActor*                           Actor                                                  (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UFluidSimulationComponent::AddActor(class AActor* Actor)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("FluidSimulationComponent", "AddActor");

	Params::FluidSimulationComponent_AddActor Parms{};

	Parms.Actor = Actor;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function b1-Managed.LandscapeBpBrushTest.Initialize
// (Native, Event, Public, BlueprintEvent)
// Parameters:
// struct FTransform                       InLandscapeTransform                                   (Parm, IsPlainOldData, NoDestructor)
// struct FIntPoint                        InLandscapeSize                                        (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// struct FIntPoint                        InLandscapeRenderTargetSize                            (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ULandscapeBpBrushTest::Initialize(const struct FTransform& InLandscapeTransform, const struct FIntPoint& InLandscapeSize, const struct FIntPoint& InLandscapeRenderTargetSize)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("LandscapeBpBrushTest", "Initialize");

	Params::LandscapeBpBrushTest_Initialize Parms{};

	Parms.InLandscapeTransform = std::move(InLandscapeTransform);
	Parms.InLandscapeSize = std::move(InLandscapeSize);
	Parms.InLandscapeRenderTargetSize = std::move(InLandscapeRenderTargetSize);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function b1-Managed.LandscapeBpBrushTest.Render
// (Native, Event, Public, HasOutParams, BlueprintEvent)
// Parameters:
// uint8                                   InIsHeightmap                                          (Parm, NoDestructor, HasGetValueTypeHash)
// class UTextureRenderTarget2D*           InCombinedResult                                       (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// class FName                             InWeightmapLayerName                                   (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// class UTextureRenderTarget2D*           ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

class UTextureRenderTarget2D* ULandscapeBpBrushTest::Render(uint8 InIsHeightmap, class UTextureRenderTarget2D* InCombinedResult, class FName InWeightmapLayerName)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("LandscapeBpBrushTest", "Render");

	Params::LandscapeBpBrushTest_Render Parms{};

	Parms.InIsHeightmap = InIsHeightmap;
	Parms.InCombinedResult = InCombinedResult;
	Parms.InWeightmapLayerName = InWeightmapLayerName;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function b1-Managed.LandscapeLayerBrush.ReceiveTick
// (Native, Event, Public, BlueprintEvent)
// Parameters:
// float                                   DeltaSeconds                                           (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ULandscapeLayerBrush::ReceiveTick(float DeltaSeconds)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("LandscapeLayerBrush", "ReceiveTick");

	Params::LandscapeLayerBrush_ReceiveTick Parms{};

	Parms.DeltaSeconds = DeltaSeconds;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function b1-Managed.LandscapeLayerBrush.Initialize
// (Native, Event, Public, BlueprintEvent)
// Parameters:
// struct FTransform                       InLandscapeTransform                                   (Parm, IsPlainOldData, NoDestructor)
// struct FIntPoint                        InLandscapeSize                                        (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// struct FIntPoint                        InLandscapeRenderTargetSize                            (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ULandscapeLayerBrush::Initialize(const struct FTransform& InLandscapeTransform, const struct FIntPoint& InLandscapeSize, const struct FIntPoint& InLandscapeRenderTargetSize)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("LandscapeLayerBrush", "Initialize");

	Params::LandscapeLayerBrush_Initialize Parms{};

	Parms.InLandscapeTransform = std::move(InLandscapeTransform);
	Parms.InLandscapeSize = std::move(InLandscapeSize);
	Parms.InLandscapeRenderTargetSize = std::move(InLandscapeRenderTargetSize);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function b1-Managed.LandscapeLayerBrush.Render
// (Native, Event, Public, HasOutParams, BlueprintEvent)
// Parameters:
// uint8                                   InIsHeightmap                                          (Parm, NoDestructor, HasGetValueTypeHash)
// class UTextureRenderTarget2D*           InCombinedResult                                       (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// class FName                             InWeightmapLayerName                                   (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// class UTextureRenderTarget2D*           ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

class UTextureRenderTarget2D* ULandscapeLayerBrush::Render(uint8 InIsHeightmap, class UTextureRenderTarget2D* InCombinedResult, class FName InWeightmapLayerName)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("LandscapeLayerBrush", "Render");

	Params::LandscapeLayerBrush_Render Parms{};

	Parms.InIsHeightmap = InIsHeightmap;
	Parms.InCombinedResult = InCombinedResult;
	Parms.InWeightmapLayerName = InWeightmapLayerName;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function b1-Managed.LandscapeRoadBrush.ReceiveTick
// (Native, Event, Public, BlueprintEvent)
// Parameters:
// float                                   DeltaSeconds                                           (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ULandscapeRoadBrush::ReceiveTick(float DeltaSeconds)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("LandscapeRoadBrush", "ReceiveTick");

	Params::LandscapeRoadBrush_ReceiveTick Parms{};

	Parms.DeltaSeconds = DeltaSeconds;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function b1-Managed.LandscapeRoadBrush.Initialize
// (Native, Event, Public, BlueprintEvent)
// Parameters:
// struct FTransform                       InLandscapeTransform                                   (Parm, IsPlainOldData, NoDestructor)
// struct FIntPoint                        InLandscapeSize                                        (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// struct FIntPoint                        InLandscapeRenderTargetSize                            (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ULandscapeRoadBrush::Initialize(const struct FTransform& InLandscapeTransform, const struct FIntPoint& InLandscapeSize, const struct FIntPoint& InLandscapeRenderTargetSize)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("LandscapeRoadBrush", "Initialize");

	Params::LandscapeRoadBrush_Initialize Parms{};

	Parms.InLandscapeTransform = std::move(InLandscapeTransform);
	Parms.InLandscapeSize = std::move(InLandscapeSize);
	Parms.InLandscapeRenderTargetSize = std::move(InLandscapeRenderTargetSize);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function b1-Managed.LandscapeRoadBrush.Render
// (Native, Event, Public, HasOutParams, BlueprintEvent)
// Parameters:
// uint8                                   InIsHeightmap                                          (Parm, NoDestructor, HasGetValueTypeHash)
// class UTextureRenderTarget2D*           InCombinedResult                                       (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// class FName                             InWeightmapLayerName                                   (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// class UTextureRenderTarget2D*           ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

class UTextureRenderTarget2D* ULandscapeRoadBrush::Render(uint8 InIsHeightmap, class UTextureRenderTarget2D* InCombinedResult, class FName InWeightmapLayerName)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("LandscapeRoadBrush", "Render");

	Params::LandscapeRoadBrush_Render Parms{};

	Parms.InIsHeightmap = InIsHeightmap;
	Parms.InCombinedResult = InCombinedResult;
	Parms.InWeightmapLayerName = InWeightmapLayerName;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function b1-Managed.LandscapeRoadSpline.ReceiveTick
// (Native, Event, Public, BlueprintEvent)
// Parameters:
// float                                   DeltaSeconds                                           (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ALandscapeRoadSpline::ReceiveTick(float DeltaSeconds)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("LandscapeRoadSpline", "ReceiveTick");

	Params::LandscapeRoadSpline_ReceiveTick Parms{};

	Parms.DeltaSeconds = DeltaSeconds;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function b1-Managed.BANS_GSB1TimedPlayNiagaraFX.GetSoftReferences
// (Native, Event, Public, HasOutParams, BlueprintEvent, Const)
// Parameters:
// TArray<struct FSoftObjectPath>          ReturnValue                                            (Parm, OutParm, ReturnParm)

TArray<struct FSoftObjectPath> UBANS_GSB1TimedPlayNiagaraFX::GetSoftReferences() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BANS_GSB1TimedPlayNiagaraFX", "GetSoftReferences");

	Params::BANS_GSB1TimedPlayNiagaraFX_GetSoftReferences Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function b1-Managed.BANS_GSB1TimedPlayNiagaraFX.GSNotifyBeginCS
// (Native, Event, Public, Protected, BlueprintEvent, Const)
// Parameters:
// struct FUStGSNotifyParam                NotifyParam                                            (Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
// float                                   TotalDuration                                          (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UBANS_GSB1TimedPlayNiagaraFX::GSNotifyBeginCS(const struct FUStGSNotifyParam& NotifyParam, float TotalDuration) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BANS_GSB1TimedPlayNiagaraFX", "GSNotifyBeginCS");

	Params::BANS_GSB1TimedPlayNiagaraFX_GSNotifyBeginCS Parms{};

	Parms.NotifyParam = std::move(NotifyParam);
	Parms.TotalDuration = TotalDuration;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function b1-Managed.BANS_GSB1TimedPlayNiagaraFX.GSNotifyEndCS
// (Native, Event, Public, Protected, BlueprintEvent, Const)
// Parameters:
// struct FUStGSNotifyParam                NotifyParam                                            (Parm, ZeroConstructor, IsPlainOldData, NoDestructor)

void UBANS_GSB1TimedPlayNiagaraFX::GSNotifyEndCS(const struct FUStGSNotifyParam& NotifyParam) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BANS_GSB1TimedPlayNiagaraFX", "GSNotifyEndCS");

	Params::BANS_GSB1TimedPlayNiagaraFX_GSNotifyEndCS Parms{};

	Parms.NotifyParam = std::move(NotifyParam);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function b1-Managed.BGG_GameModeB1Net.ReceiveEndPlay
// (Native, Event, Public, Protected, BlueprintEvent)
// Parameters:
// EEndPlayReason                          EndPlayReason                                          (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ABGG_GameModeB1Net::ReceiveEndPlay(EEndPlayReason EndPlayReason)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BGG_GameModeB1Net", "ReceiveEndPlay");

	Params::BGG_GameModeB1Net_ReceiveEndPlay Parms{};

	Parms.EndPlayReason = EndPlayReason;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function b1-Managed.BGG_GameModeB1Net.BeginPlayCS
// (Native, Event, Public, BlueprintEvent)

void ABGG_GameModeB1Net::BeginPlayCS()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BGG_GameModeB1Net", "BeginPlayCS");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function b1-Managed.BGG_GameModeB1Net.PostLoginCS
// (Native, Event, Public, BlueprintEvent)
// Parameters:
// class APlayerController*                NewPlayer                                              (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ABGG_GameModeB1Net::PostLoginCS(class APlayerController* NewPlayer)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BGG_GameModeB1Net", "PostLoginCS");

	Params::BGG_GameModeB1Net_PostLoginCS Parms{};

	Parms.NewPlayer = NewPlayer;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function b1-Managed.MyTestHttpListener.OnRequestProgress
// (Native, Event, Public, BlueprintEvent)
// Parameters:
// int32                                   SentBytes                                              (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// int32                                   LReceivedBytes                                         (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// int32                                   LTotalBytes                                            (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UMyTestHttpListener::OnRequestProgress(int32 SentBytes, int32 LReceivedBytes, int32 LTotalBytes)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MyTestHttpListener", "OnRequestProgress");

	Params::MyTestHttpListener_OnRequestProgress Parms{};

	Parms.SentBytes = SentBytes;
	Parms.LReceivedBytes = LReceivedBytes;
	Parms.LTotalBytes = LTotalBytes;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function b1-Managed.MyTestHttpListener.OnReponseComplete
// (Native, Event, Public, BlueprintEvent)
// Parameters:
// uint8                                   bSuccess                                               (Parm, NoDestructor, HasGetValueTypeHash)
// int32                                   HttpCode                                               (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// TArray<uint8>                           Content                                                (ConstParm, Parm, OutParm, ReferenceParm)

void UMyTestHttpListener::OnReponseComplete(uint8 bSuccess, int32 HttpCode, const TArray<uint8>& Content)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MyTestHttpListener", "OnReponseComplete");

	Params::MyTestHttpListener_OnReponseComplete Parms{};

	Parms.bSuccess = bSuccess;
	Parms.HttpCode = HttpCode;
	Parms.Content = std::move(Content);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function b1-Managed.MyTestHttpListener.IsNeedProgress
// (Native, Event, Public, HasOutParams, BlueprintEvent, Const)
// Parameters:
// uint8                                   ReturnValue                                            (Parm, OutParm, ReturnParm, NoDestructor, HasGetValueTypeHash)

uint8 UMyTestHttpListener::IsNeedProgress() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MyTestHttpListener", "IsNeedProgress");

	Params::MyTestHttpListener_IsNeedProgress Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function b1-Managed.SharpPerfTest.ReceiveBeginPlay
// (Native, Event, Public, Protected, BlueprintEvent)

void ASharpPerfTest::ReceiveBeginPlay()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SharpPerfTest", "ReceiveBeginPlay");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function b1-Managed.SharpPerfTest.ReceiveTick
// (Native, Event, Public, BlueprintEvent)
// Parameters:
// float                                   DeltaSeconds                                           (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ASharpPerfTest::ReceiveTick(float DeltaSeconds)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SharpPerfTest", "ReceiveTick");

	Params::SharpPerfTest_ReceiveTick Parms{};

	Parms.DeltaSeconds = DeltaSeconds;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function b1-Managed.SharpPerfTest.TickInCS
// (Native, Event, Public, Protected, BlueprintEvent)
// Parameters:
// float                                   DeltaTime                                              (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ASharpPerfTest::TickInCS(float DeltaTime)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SharpPerfTest", "TickInCS");

	Params::SharpPerfTest_TickInCS Parms{};

	Parms.DeltaTime = DeltaTime;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function b1-Managed.SharpPerfTest.DelegateCB
// (Native, Public)
// Parameters:
// int32                                   P1                                                     (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// int32                                   P2                                                     (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// int32                                   P3                                                     (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// int32                                   P4                                                     (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ASharpPerfTest::DelegateCB(int32 P1, int32 P2, int32 P3, int32 P4)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SharpPerfTest", "DelegateCB");

	Params::SharpPerfTest_DelegateCB Parms{};

	Parms.P1 = P1;
	Parms.P2 = P2;
	Parms.P3 = P3;
	Parms.P4 = P4;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function b1-Managed.IL2CPPUnitTestFuncLib.GetIL2CPPTestValue
// (Native, Static, Public, HasOutParams, BlueprintCallable, BlueprintPure)
// Parameters:
// int32                                   TestVal                                                (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// int32                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

int32 UIL2CPPUnitTestFuncLib::GetIL2CPPTestValue(int32 TestVal)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("IL2CPPUnitTestFuncLib", "GetIL2CPPTestValue");

	Params::IL2CPPUnitTestFuncLib_GetIL2CPPTestValue Parms{};

	Parms.TestVal = TestVal;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function b1-Managed.IL2CPPUnitTest.BeginPlayInCS
// (Native, Event, Public, Protected, BlueprintEvent)

void AIL2CPPUnitTest::BeginPlayInCS()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("IL2CPPUnitTest", "BeginPlayInCS");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function b1-Managed.IL2CPPUnitTest.IntRetTest2
// (Native, Event, Public, Protected, HasOutParams, BlueprintEvent)
// Parameters:
// int32                                   P1                                                     (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// float                                   P2                                                     (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// uint8                                   bP3                                                    (Parm, NoDestructor, HasGetValueTypeHash)
// int32                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

int32 AIL2CPPUnitTest::IntRetTest2(int32 P1, float P2, uint8 bP3)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("IL2CPPUnitTest", "IntRetTest2");

	Params::IL2CPPUnitTest_IntRetTest2 Parms{};

	Parms.P1 = P1;
	Parms.P2 = P2;
	Parms.bP3 = bP3;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function b1-Managed.IL2CPPUnitTest.BoolRetTest
// (Native, Event, Public, Protected, HasOutParams, BlueprintEvent)
// Parameters:
// int32                                   P1                                                     (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// float                                   P2                                                     (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// uint8                                   bP3                                                    (Parm, NoDestructor, HasGetValueTypeHash)
// uint8                                   ReturnValue                                            (Parm, OutParm, ReturnParm, NoDestructor, HasGetValueTypeHash)

uint8 AIL2CPPUnitTest::BoolRetTest(int32 P1, float P2, uint8 bP3)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("IL2CPPUnitTest", "BoolRetTest");

	Params::IL2CPPUnitTest_BoolRetTest Parms{};

	Parms.P1 = P1;
	Parms.P2 = P2;
	Parms.bP3 = bP3;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function b1-Managed.IL2CPPUnitTest.IntRetTest
// (Native, Event, Public, Protected, HasOutParams, BlueprintEvent)
// Parameters:
// int32                                   P1                                                     (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// float                                   P2                                                     (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// uint8                                   bP3                                                    (Parm, NoDestructor, HasGetValueTypeHash)
// int32                                   Out1                                                   (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// int32                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

int32 AIL2CPPUnitTest::IntRetTest(int32 P1, float P2, uint8 bP3, int32* Out1)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("IL2CPPUnitTest", "IntRetTest");

	Params::IL2CPPUnitTest_IntRetTest Parms{};

	Parms.P1 = P1;
	Parms.P2 = P2;
	Parms.bP3 = bP3;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	if (Out1 != nullptr)
		*Out1 = Parms.Out1;

	return Parms.ReturnValue;
}


// Function b1-Managed.IL2CPPUnitTest.TickInCS
// (Native, Event, Public, Protected, BlueprintEvent)
// Parameters:
// float                                   DeltaTime                                              (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void AIL2CPPUnitTest::TickInCS(float DeltaTime)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("IL2CPPUnitTest", "TickInCS");

	Params::IL2CPPUnitTest_TickInCS Parms{};

	Parms.DeltaTime = DeltaTime;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function b1-Managed.IL2CPPUnitTest.TestPassComplexStruct
// (Native, Public, BlueprintCallable)
// Parameters:
// struct FIL2CPPUnitTestStructOuter       OuterStruct                                            (Parm, HasGetValueTypeHash)

void AIL2CPPUnitTest::TestPassComplexStruct(const struct FIL2CPPUnitTestStructOuter& OuterStruct)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("IL2CPPUnitTest", "TestPassComplexStruct");

	Params::IL2CPPUnitTest_TestPassComplexStruct Parms{};

	Parms.OuterStruct = std::move(OuterStruct);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function b1-Managed.IL2CPPUnitTest.DelegateCB
// (Native, Public)
// Parameters:
// int32                                   P1                                                     (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// int32                                   P2                                                     (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// int32                                   P3                                                     (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// int32                                   P4                                                     (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void AIL2CPPUnitTest::DelegateCB(int32 P1, int32 P2, int32 P3, int32 P4)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("IL2CPPUnitTest", "DelegateCB");

	Params::IL2CPPUnitTest_DelegateCB Parms{};

	Parms.P1 = P1;
	Parms.P2 = P2;
	Parms.P3 = P3;
	Parms.P4 = P4;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function b1-Managed.IL2CPPUnitTest.CallInBP
// (Native, Public, BlueprintCallable)
// Parameters:
// class FString                           CheckIt                                                (Parm, ZeroConstructor, HasGetValueTypeHash)

void AIL2CPPUnitTest::CallInBP(const class FString& CheckIt)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("IL2CPPUnitTest", "CallInBP");

	Params::IL2CPPUnitTest_CallInBP Parms{};

	Parms.CheckIt = std::move(CheckIt);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function b1-Managed.GSGridConScreenAdapter.UpdateForAdaptInEditorMode
// (Native, Public, BlueprintCallable)
// Parameters:
// float                                   DeltaTime                                              (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// int32                                   RefViewPortWidth                                       (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// int32                                   RefViewPortHeight                                      (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UGSGridConScreenAdapter::UpdateForAdaptInEditorMode(float DeltaTime, int32 RefViewPortWidth, int32 RefViewPortHeight)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GSGridConScreenAdapter", "UpdateForAdaptInEditorMode");

	Params::GSGridConScreenAdapter_UpdateForAdaptInEditorMode Parms{};

	Parms.DeltaTime = DeltaTime;
	Parms.RefViewPortWidth = RefViewPortWidth;
	Parms.RefViewPortHeight = RefViewPortHeight;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function b1-Managed.GSGridConScreenAdapter.UpdateForAdapt
// (Native, Public, BlueprintCallable)
// Parameters:
// float                                   DeltaTime                                              (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UGSGridConScreenAdapter::UpdateForAdapt(float DeltaTime)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GSGridConScreenAdapter", "UpdateForAdapt");

	Params::GSGridConScreenAdapter_UpdateForAdapt Parms{};

	Parms.DeltaTime = DeltaTime;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function b1-Managed.GSProcBar.SetMaxIncPercent
// (Native, Public, BlueprintCallable)
// Parameters:
// float                                   InMaxIncPercent                                        (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UGSProcBar::SetMaxIncPercent(float InMaxIncPercent)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GSProcBar", "SetMaxIncPercent");

	Params::GSProcBar_SetMaxIncPercent Parms{};

	Parms.InMaxIncPercent = InMaxIncPercent;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function b1-Managed.GSButton.GSOnLostFocused
// (Native, Public, BlueprintCallable)
// Parameters:
// struct FFocusEvent                      FocusEvent                                             (Parm, NoDestructor)

void UGSButton::GSOnLostFocused(const struct FFocusEvent& FocusEvent)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GSButton", "GSOnLostFocused");

	Params::GSButton_GSOnLostFocused Parms{};

	Parms.FocusEvent = std::move(FocusEvent);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function b1-Managed.GSButton.GSOnConstruct
// (Native, Public)

void UGSButton::GSOnConstruct()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GSButton", "GSOnConstruct");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function b1-Managed.GSButton.GSOnUnhovered
// (Native, Public)

void UGSButton::GSOnUnhovered()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GSButton", "GSOnUnhovered");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function b1-Managed.GSButton.GSOnReleased
// (Native, Public)

void UGSButton::GSOnReleased()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GSButton", "GSOnReleased");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function b1-Managed.GSButton.GSOnFocused
// (Native, Public, BlueprintCallable)
// Parameters:
// struct FFocusEvent                      FocusEvent                                             (Parm, NoDestructor)

void UGSButton::GSOnFocused(const struct FFocusEvent& FocusEvent)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GSButton", "GSOnFocused");

	Params::GSButton_GSOnFocused Parms{};

	Parms.FocusEvent = std::move(FocusEvent);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function b1-Managed.GSButton.GSOnHovered
// (Native, Public)

void UGSButton::GSOnHovered()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GSButton", "GSOnHovered");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function b1-Managed.GSButton.GSOnClicked
// (Native, Public)

void UGSButton::GSOnClicked()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GSButton", "GSOnClicked");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function b1-Managed.GSButton.GSOnPressed
// (Native, Public)

void UGSButton::GSOnPressed()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GSButton", "GSOnPressed");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function b1-Managed.GSRoundRectCS.CalcMappingRoundRectPoint
// (Native, Event, Public, HasOutParams, BlueprintEvent)
// Parameters:
// struct FVector2D                        PosInViewPort                                          (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// uint8                                   IsInFront                                              (Parm, NoDestructor, HasGetValueTypeHash)
// struct FVector2D                        InnerContentRectSize                                   (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// struct FVector2D                        InnerContentRectAlign                                  (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// uint8                                   IsOuter                                                (Parm, NoDestructor, HasGetValueTypeHash)
// struct FVector2D                        BorderPosRefRoundRect                                  (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// float                                   RectAngle                                              (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// int32                                   OutIndicatorType                                       (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// uint8                                   ReturnValue                                            (Parm, OutParm, ReturnParm, NoDestructor, HasGetValueTypeHash)

uint8 UGSRoundRectCS::CalcMappingRoundRectPoint(const struct FVector2D& PosInViewPort, uint8 IsInFront, const struct FVector2D& InnerContentRectSize, const struct FVector2D& InnerContentRectAlign, uint8 IsOuter, struct FVector2D* BorderPosRefRoundRect, float* RectAngle, int32* OutIndicatorType)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GSRoundRectCS", "CalcMappingRoundRectPoint");

	Params::GSRoundRectCS_CalcMappingRoundRectPoint Parms{};

	Parms.PosInViewPort = std::move(PosInViewPort);
	Parms.IsInFront = IsInFront;
	Parms.InnerContentRectSize = std::move(InnerContentRectSize);
	Parms.InnerContentRectAlign = std::move(InnerContentRectAlign);
	Parms.IsOuter = IsOuter;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	if (BorderPosRefRoundRect != nullptr)
		*BorderPosRefRoundRect = std::move(Parms.BorderPosRefRoundRect);

	if (RectAngle != nullptr)
		*RectAngle = Parms.RectAngle;

	if (OutIndicatorType != nullptr)
		*OutIndicatorType = Parms.OutIndicatorType;

	return Parms.ReturnValue;
}


// Function b1-Managed.GSRoundRectCS.GetLastUpdateCenterPos
// (Native, Public, HasOutParams, BlueprintCallable)
// Parameters:
// struct FVector2D                        ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

struct FVector2D UGSRoundRectCS::GetLastUpdateCenterPos()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GSRoundRectCS", "GetLastUpdateCenterPos");

	Params::GSRoundRectCS_GetLastUpdateCenterPos Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function b1-Managed.GSRoundRectCS.GSStartDebugDraw
// (Native, Public, BlueprintCallable)

void UGSRoundRectCS::GSStartDebugDraw()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GSRoundRectCS", "GSStartDebugDraw");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function b1-Managed.GSRoundRectCS.GSOnConstruct
// (Native, Public, BlueprintCallable)

void UGSRoundRectCS::GSOnConstruct()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GSRoundRectCS", "GSOnConstruct");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function b1-Managed.GSRoundRectCS.IsInRoundRect
// (Native, Public, HasOutParams, BlueprintCallable)
// Parameters:
// struct FVector2D                        PosInViewPort                                          (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// uint8                                   ReturnValue                                            (Parm, OutParm, ReturnParm, NoDestructor, HasGetValueTypeHash)

uint8 UGSRoundRectCS::IsInRoundRect(const struct FVector2D& PosInViewPort)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GSRoundRectCS", "IsInRoundRect");

	Params::GSRoundRectCS_IsInRoundRect Parms{};

	Parms.PosInViewPort = std::move(PosInViewPort);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function b1-Managed.GSRoundRectCS.SetDebugDraw
// (Native, Public, BlueprintCallable)
// Parameters:
// uint8                                   IsDebugDraw                                            (Parm, NoDestructor, HasGetValueTypeHash)

void UGSRoundRectCS::SetDebugDraw(uint8 IsDebugDraw)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GSRoundRectCS", "SetDebugDraw");

	Params::GSRoundRectCS_SetDebugDraw Parms{};

	Parms.IsDebugDraw = IsDebugDraw;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function b1-Managed.GSRoundRectCS.GetDebugDraw
// (Native, Public, HasOutParams, BlueprintCallable)
// Parameters:
// uint8                                   ReturnValue                                            (Parm, OutParm, ReturnParm, NoDestructor, HasGetValueTypeHash)

uint8 UGSRoundRectCS::GetDebugDraw()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GSRoundRectCS", "GetDebugDraw");

	Params::GSRoundRectCS_GetDebugDraw Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function b1-Managed.GSRoundRectCS.DebugTick
// (Native, Public, BlueprintCallable)

void UGSRoundRectCS::DebugTick()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GSRoundRectCS", "DebugTick");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function b1-Managed.BED_LevelConfUtil.GetLevelStreamingBoundingBox
// (Native, Static, Public, HasOutParams, BlueprintCallable)
// Parameters:
// class ULevelStreaming*                  LevelStreaming                                         (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// struct FVector                          Center                                                 (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// struct FVector                          BoxExtent                                              (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UBED_LevelConfUtil::GetLevelStreamingBoundingBox(class ULevelStreaming* LevelStreaming, struct FVector* Center, struct FVector* BoxExtent)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("BED_LevelConfUtil", "GetLevelStreamingBoundingBox");

	Params::BED_LevelConfUtil_GetLevelStreamingBoundingBox Parms{};

	Parms.LevelStreaming = LevelStreaming;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	if (Center != nullptr)
		*Center = std::move(Parms.Center);

	if (BoxExtent != nullptr)
		*BoxExtent = std::move(Parms.BoxExtent);
}


// Function b1-Managed.BED_BehaviorNode_AiConversation.GetNodeDescriptionInCS
// (Native, Event, Public, HasOutParams, BlueprintEvent, Const)
// Parameters:
// class FString                           ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash)

class FString UBED_BehaviorNode_AiConversation::GetNodeDescriptionInCS() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BED_BehaviorNode_AiConversation", "GetNodeDescriptionInCS");

	Params::BED_BehaviorNode_AiConversation_GetNodeDescriptionInCS Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function b1-Managed.BED_BehaviorNode_AiConversation.OnRefreshAssetInCS
// (Native, Event, Public, BlueprintEvent, Const)

void UBED_BehaviorNode_AiConversation::OnRefreshAssetInCS() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BED_BehaviorNode_AiConversation", "OnRefreshAssetInCS");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function b1-Managed.BED_BehaviorNode_AiConversation.IsSupportViewType
// (Native, Event, Public, HasOutParams, BlueprintEvent, Const)
// Parameters:
// ECalliopeViewType                       InViewType                                             (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// uint8                                   ReturnValue                                            (Parm, OutParm, ReturnParm, NoDestructor, HasGetValueTypeHash)

uint8 UBED_BehaviorNode_AiConversation::IsSupportViewType(const ECalliopeViewType& InViewType) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BED_BehaviorNode_AiConversation", "IsSupportViewType");

	Params::BED_BehaviorNode_AiConversation_IsSupportViewType Parms{};

	Parms.InViewType = InViewType;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function b1-Managed.BGWAssetLoaderRequestCS.ExecuteCS
// (Native, Event, Public, Protected, BlueprintEvent, Const)

void UBGWAssetLoaderRequestCS::ExecuteCS() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BGWAssetLoaderRequestCS", "ExecuteCS");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function b1-Managed.BGW_CharacterViewMgr.OnAKBStateEndFunc
// (Native, Public)
// Parameters:
// class FName                             BeginStateName                                         (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// class FName                             EndStateName                                           (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// uint8                                   IsForceImSet                                           (Parm, NoDestructor, HasGetValueTypeHash)

void UBGW_CharacterViewMgr::OnAKBStateEndFunc(class FName BeginStateName, class FName EndStateName, uint8 IsForceImSet)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BGW_CharacterViewMgr", "OnAKBStateEndFunc");

	Params::BGW_CharacterViewMgr_OnAKBStateEndFunc Parms{};

	Parms.BeginStateName = BeginStateName;
	Parms.EndStateName = EndStateName;
	Parms.IsForceImSet = IsForceImSet;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function b1-Managed.BGW_LevelStreamingManger.OnUnloadLevelStreamingFinish
// (Native, Public)
// Parameters:
// int32                                   ActionID                                               (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// int32                                   Linkage                                                (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UBGW_LevelStreamingManger::OnUnloadLevelStreamingFinish(int32 ActionID, int32 Linkage)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BGW_LevelStreamingManger", "OnUnloadLevelStreamingFinish");

	Params::BGW_LevelStreamingManger_OnUnloadLevelStreamingFinish Parms{};

	Parms.ActionID = ActionID;
	Parms.Linkage = Linkage;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function b1-Managed.BGW_LevelStreamingManger.OnLoadLevelStreamingFinish
// (Native, Public)
// Parameters:
// int32                                   ActionID                                               (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// int32                                   Linkage                                                (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UBGW_LevelStreamingManger::OnLoadLevelStreamingFinish(int32 ActionID, int32 Linkage)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BGW_LevelStreamingManger", "OnLoadLevelStreamingFinish");

	Params::BGW_LevelStreamingManger_OnLoadLevelStreamingFinish Parms{};

	Parms.ActionID = ActionID;
	Parms.Linkage = Linkage;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function b1-Managed.LevelStreamingCallbackHolder.OnStreamingLevelLoaded
// (Native, Public)

void ULevelStreamingCallbackHolder::OnStreamingLevelLoaded()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("LevelStreamingCallbackHolder", "OnStreamingLevelLoaded");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function b1-Managed.LevelStreamingCallbackHolder.OnStreamingLevelShown
// (Native, Public)

void ULevelStreamingCallbackHolder::OnStreamingLevelShown()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("LevelStreamingCallbackHolder", "OnStreamingLevelShown");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function b1-Managed.GSEQC_CachedEnterBattlePoint.ProvideSingleLocationCS
// (Native, Event, Public, BlueprintEvent, Const)
// Parameters:
// class UObject*                          QuerierObject                                          (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// class AActor*                           QuerierActor                                           (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UGSEQC_CachedEnterBattlePoint::ProvideSingleLocationCS(class UObject* QuerierObject, class AActor* QuerierActor) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GSEQC_CachedEnterBattlePoint", "ProvideSingleLocationCS");

	Params::GSEQC_CachedEnterBattlePoint_ProvideSingleLocationCS Parms{};

	Parms.QuerierObject = QuerierObject;
	Parms.QuerierActor = QuerierActor;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function b1-Managed.GSEQC_CachedGroupAIHotZonePoint.ProvideSingleLocationCS
// (Native, Event, Public, BlueprintEvent, Const)
// Parameters:
// class UObject*                          QuerierObject                                          (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// class AActor*                           QuerierActor                                           (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UGSEQC_CachedGroupAIHotZonePoint::ProvideSingleLocationCS(class UObject* QuerierObject, class AActor* QuerierActor) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GSEQC_CachedGroupAIHotZonePoint", "ProvideSingleLocationCS");

	Params::GSEQC_CachedGroupAIHotZonePoint_ProvideSingleLocationCS Parms{};

	Parms.QuerierObject = QuerierObject;
	Parms.QuerierActor = QuerierActor;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function b1-Managed.GSEQC_CachedSceneItem.ProvideActorsSetCS
// (Native, Event, Public, BlueprintEvent, Const)
// Parameters:
// class UObject*                          QuerierObject                                          (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// class AActor*                           QuerierActor                                           (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UGSEQC_CachedSceneItem::ProvideActorsSetCS(class UObject* QuerierObject, class AActor* QuerierActor) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GSEQC_CachedSceneItem", "ProvideActorsSetCS");

	Params::GSEQC_CachedSceneItem_ProvideActorsSetCS Parms{};

	Parms.QuerierObject = QuerierObject;
	Parms.QuerierActor = QuerierActor;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function b1-Managed.GSEQG_NeutralAnimalSpawnPoints.DoItemGenerationCS
// (Native, Event, Public, BlueprintEvent, Const)
// Parameters:
// TArray<struct FVector>                  ContextLocations                                       (ConstParm, Parm, OutParm, ReferenceParm)

void UGSEQG_NeutralAnimalSpawnPoints::DoItemGenerationCS(const TArray<struct FVector>& ContextLocations) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GSEQG_NeutralAnimalSpawnPoints", "DoItemGenerationCS");

	Params::GSEQG_NeutralAnimalSpawnPoints_DoItemGenerationCS Parms{};

	Parms.ContextLocations = std::move(ContextLocations);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function b1-Managed.GSEQC_QATargetLocationContext.ProvideLocationsSetCS
// (Native, Event, Public, BlueprintEvent, Const)
// Parameters:
// class UObject*                          QuerierObject                                          (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// class AActor*                           QuerierActor                                           (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UGSEQC_QATargetLocationContext::ProvideLocationsSetCS(class UObject* QuerierObject, class AActor* QuerierActor) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GSEQC_QATargetLocationContext", "ProvideLocationsSetCS");

	Params::GSEQC_QATargetLocationContext_ProvideLocationsSetCS Parms{};

	Parms.QuerierObject = QuerierObject;
	Parms.QuerierActor = QuerierActor;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function b1-Managed.GSEQC_SkillBaseTargetContext.ProvideActorsSetCS
// (Native, Event, Public, BlueprintEvent, Const)
// Parameters:
// class UObject*                          QuerierObject                                          (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// class AActor*                           QuerierActor                                           (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UGSEQC_SkillBaseTargetContext::ProvideActorsSetCS(class UObject* QuerierObject, class AActor* QuerierActor) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GSEQC_SkillBaseTargetContext", "ProvideActorsSetCS");

	Params::GSEQC_SkillBaseTargetContext_ProvideActorsSetCS Parms{};

	Parms.QuerierObject = QuerierObject;
	Parms.QuerierActor = QuerierActor;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function b1-Managed.GSEQG_ActorsByTag.DoItemGenerationCS
// (Native, Event, Public, BlueprintEvent, Const)
// Parameters:
// TArray<struct FVector>                  ContextLocations                                       (ConstParm, Parm, OutParm, ReferenceParm)

void UGSEQG_ActorsByTag::DoItemGenerationCS(const TArray<struct FVector>& ContextLocations) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GSEQG_ActorsByTag", "DoItemGenerationCS");

	Params::GSEQG_ActorsByTag_DoItemGenerationCS Parms{};

	Parms.ContextLocations = std::move(ContextLocations);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function b1-Managed.GSEQG_LandingPointGenerator.DoItemGenerationCS
// (Native, Event, Public, BlueprintEvent, Const)
// Parameters:
// TArray<struct FVector>                  ContextLocations                                       (ConstParm, Parm, OutParm, ReferenceParm)

void UGSEQG_LandingPointGenerator::DoItemGenerationCS(const TArray<struct FVector>& ContextLocations) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GSEQG_LandingPointGenerator", "DoItemGenerationCS");

	Params::GSEQG_LandingPointGenerator_DoItemGenerationCS Parms{};

	Parms.ContextLocations = std::move(ContextLocations);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function b1-Managed.GSEQG_SummonSpawnPointGenerator.DoItemGenerationCS
// (Native, Event, Public, BlueprintEvent, Const)
// Parameters:
// TArray<struct FVector>                  ContextLocations                                       (ConstParm, Parm, OutParm, ReferenceParm)

void UGSEQG_SummonSpawnPointGenerator::DoItemGenerationCS(const TArray<struct FVector>& ContextLocations) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GSEQG_SummonSpawnPointGenerator", "DoItemGenerationCS");

	Params::GSEQG_SummonSpawnPointGenerator_DoItemGenerationCS Parms{};

	Parms.ContextLocations = std::move(ContextLocations);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function b1-Managed.GSEQC_CaptainContext.ProvideSingleActorCS
// (Native, Event, Public, BlueprintEvent, Const)
// Parameters:
// class UObject*                          QuerierObject                                          (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// class AActor*                           QuerierActor                                           (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UGSEQC_CaptainContext::ProvideSingleActorCS(class UObject* QuerierObject, class AActor* QuerierActor) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GSEQC_CaptainContext", "ProvideSingleActorCS");

	Params::GSEQC_CaptainContext_ProvideSingleActorCS Parms{};

	Parms.QuerierObject = QuerierObject;
	Parms.QuerierActor = QuerierActor;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function b1-Managed.GSEQC_PlayerContext.ProvideActorsSetCS
// (Native, Event, Public, BlueprintEvent, Const)
// Parameters:
// class UObject*                          QuerierObject                                          (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// class AActor*                           QuerierActor                                           (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UGSEQC_PlayerContext::ProvideActorsSetCS(class UObject* QuerierObject, class AActor* QuerierActor) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GSEQC_PlayerContext", "ProvideActorsSetCS");

	Params::GSEQC_PlayerContext_ProvideActorsSetCS Parms{};

	Parms.QuerierObject = QuerierObject;
	Parms.QuerierActor = QuerierActor;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function b1-Managed.GSEQC_QuerierNavProjectLocation.ProvideLocationsSetCS
// (Native, Event, Public, BlueprintEvent, Const)
// Parameters:
// class UObject*                          QuerierObject                                          (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// class AActor*                           QuerierActor                                           (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UGSEQC_QuerierNavProjectLocation::ProvideLocationsSetCS(class UObject* QuerierObject, class AActor* QuerierActor) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GSEQC_QuerierNavProjectLocation", "ProvideLocationsSetCS");

	Params::GSEQC_QuerierNavProjectLocation_ProvideLocationsSetCS Parms{};

	Parms.QuerierObject = QuerierObject;
	Parms.QuerierActor = QuerierActor;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function b1-Managed.GSEQC_TargetContext.ProvideActorsSetCS
// (Native, Event, Public, BlueprintEvent, Const)
// Parameters:
// class UObject*                          QuerierObject                                          (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// class AActor*                           QuerierActor                                           (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UGSEQC_TargetContext::ProvideActorsSetCS(class UObject* QuerierObject, class AActor* QuerierActor) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GSEQC_TargetContext", "ProvideActorsSetCS");

	Params::GSEQC_TargetContext_ProvideActorsSetCS Parms{};

	Parms.QuerierObject = QuerierObject;
	Parms.QuerierActor = QuerierActor;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function b1-Managed.TileViewDemoEntryWidget.OnItemSelectionChangedCallback
// (Native, Public, BlueprintCallable)
// Parameters:
// uint8                                   IsSelected                                             (Parm, NoDestructor, HasGetValueTypeHash)

void UTileViewDemoEntryWidget::OnItemSelectionChangedCallback(uint8 IsSelected)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("TileViewDemoEntryWidget", "OnItemSelectionChangedCallback");

	Params::TileViewDemoEntryWidget_OnItemSelectionChangedCallback Parms{};

	Parms.IsSelected = IsSelected;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function b1-Managed.TileViewDemoEntryWidget.OnListItemObjectSetCallback
// (Native, Public, BlueprintCallable)
// Parameters:
// class UObject*                          ListItemObject                                         (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UTileViewDemoEntryWidget::OnListItemObjectSetCallback(class UObject* ListItemObject)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("TileViewDemoEntryWidget", "OnListItemObjectSetCallback");

	Params::TileViewDemoEntryWidget_OnListItemObjectSetCallback Parms{};

	Parms.ListItemObject = ListItemObject;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function b1-Managed.GSEQC_TeamContext.ProvideActorsSetCS
// (Native, Event, Public, BlueprintEvent, Const)
// Parameters:
// class UObject*                          QuerierObject                                          (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// class AActor*                           QuerierActor                                           (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UGSEQC_TeamContext::ProvideActorsSetCS(class UObject* QuerierObject, class AActor* QuerierActor) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GSEQC_TeamContext", "ProvideActorsSetCS");

	Params::GSEQC_TeamContext_ProvideActorsSetCS Parms{};

	Parms.QuerierObject = QuerierObject;
	Parms.QuerierActor = QuerierActor;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function b1-Managed.GSEQG_CertainPointGenerator.DoItemGenerationCS
// (Native, Event, Public, BlueprintEvent, Const)
// Parameters:
// TArray<struct FVector>                  ContextLocations                                       (ConstParm, Parm, OutParm, ReferenceParm)

void UGSEQG_CertainPointGenerator::DoItemGenerationCS(const TArray<struct FVector>& ContextLocations) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GSEQG_CertainPointGenerator", "DoItemGenerationCS");

	Params::GSEQG_CertainPointGenerator_DoItemGenerationCS Parms{};

	Parms.ContextLocations = std::move(ContextLocations);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function b1-Managed.GSEQG_CircleAroundProjectile.DoItemGenerationCS
// (Native, Event, Public, BlueprintEvent, Const)
// Parameters:
// TArray<struct FVector>                  ContextLocations                                       (ConstParm, Parm, OutParm, ReferenceParm)

void UGSEQG_CircleAroundProjectile::DoItemGenerationCS(const TArray<struct FVector>& ContextLocations) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GSEQG_CircleAroundProjectile", "DoItemGenerationCS");

	Params::GSEQG_CircleAroundProjectile_DoItemGenerationCS Parms{};

	Parms.ContextLocations = std::move(ContextLocations);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function b1-Managed.GSEQG_SphericalLineTracePointGenerator.DoItemGenerationCS
// (Native, Event, Public, BlueprintEvent, Const)
// Parameters:
// TArray<struct FVector>                  ContextLocations                                       (ConstParm, Parm, OutParm, ReferenceParm)

void UGSEQG_SphericalLineTracePointGenerator::DoItemGenerationCS(const TArray<struct FVector>& ContextLocations) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GSEQG_SphericalLineTracePointGenerator", "DoItemGenerationCS");

	Params::GSEQG_SphericalLineTracePointGenerator_DoItemGenerationCS Parms{};

	Parms.ContextLocations = std::move(ContextLocations);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function b1-Managed.GSEQT_CheckAngle.ShouldPrepareContext
// (Native, Event, Public, HasOutParams, BlueprintEvent, Const)
// Parameters:
// uint8                                   ReturnValue                                            (Parm, OutParm, ReturnParm, NoDestructor, HasGetValueTypeHash)

uint8 UGSEQT_CheckAngle::ShouldPrepareContext() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GSEQT_CheckAngle", "ShouldPrepareContext");

	Params::GSEQT_CheckAngle_ShouldPrepareContext Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function b1-Managed.GSEQT_CheckAngle.ProcessItemCS
// (Native, Event, Public, HasOutParams, BlueprintEvent, Const)
// Parameters:
// class UWorld*                           World                                                  (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// struct FVector                          ItemLocation                                           (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// class AActor*                           ItemActor                                              (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// class AActor*                           Querier                                                (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// uint8                                   ReturnValue                                            (Parm, OutParm, ReturnParm, NoDestructor, HasGetValueTypeHash)

uint8 UGSEQT_CheckAngle::ProcessItemCS(class UWorld* World, const struct FVector& ItemLocation, class AActor* ItemActor, class AActor* Querier) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GSEQT_CheckAngle", "ProcessItemCS");

	Params::GSEQT_CheckAngle_ProcessItemCS Parms{};

	Parms.World = World;
	Parms.ItemLocation = std::move(ItemLocation);
	Parms.ItemActor = ItemActor;
	Parms.Querier = Querier;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function b1-Managed.GSEQT_OverlapByObjectType.GetDescriptionTitleCS
// (Native, Event, Public, HasOutParams, BlueprintEvent, Const)
// Parameters:
// class FString                           ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash)

class FString UGSEQT_OverlapByObjectType::GetDescriptionTitleCS() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GSEQT_OverlapByObjectType", "GetDescriptionTitleCS");

	Params::GSEQT_OverlapByObjectType_GetDescriptionTitleCS Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function b1-Managed.GSEQT_OverlapByObjectType.ShouldPrepareContext
// (Native, Event, Public, HasOutParams, BlueprintEvent, Const)
// Parameters:
// uint8                                   ReturnValue                                            (Parm, OutParm, ReturnParm, NoDestructor, HasGetValueTypeHash)

uint8 UGSEQT_OverlapByObjectType::ShouldPrepareContext() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GSEQT_OverlapByObjectType", "ShouldPrepareContext");

	Params::GSEQT_OverlapByObjectType_ShouldPrepareContext Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function b1-Managed.GSEQT_OverlapByObjectType.ProcessItemCS
// (Native, Event, Public, HasOutParams, BlueprintEvent, Const)
// Parameters:
// class UWorld*                           World                                                  (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// struct FVector                          ItemLocation                                           (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// class AActor*                           ItemActor                                              (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// class AActor*                           Querier                                                (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// uint8                                   ReturnValue                                            (Parm, OutParm, ReturnParm, NoDestructor, HasGetValueTypeHash)

uint8 UGSEQT_OverlapByObjectType::ProcessItemCS(class UWorld* World, const struct FVector& ItemLocation, class AActor* ItemActor, class AActor* Querier) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GSEQT_OverlapByObjectType", "ProcessItemCS");

	Params::GSEQT_OverlapByObjectType_ProcessItemCS Parms{};

	Parms.World = World;
	Parms.ItemLocation = std::move(ItemLocation);
	Parms.ItemActor = ItemActor;
	Parms.Querier = Querier;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function b1-Managed.GSEQT_STByResID.ShouldPrepareContext
// (Native, Event, Public, HasOutParams, BlueprintEvent, Const)
// Parameters:
// uint8                                   ReturnValue                                            (Parm, OutParm, ReturnParm, NoDestructor, HasGetValueTypeHash)

uint8 UGSEQT_STByResID::ShouldPrepareContext() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GSEQT_STByResID", "ShouldPrepareContext");

	Params::GSEQT_STByResID_ShouldPrepareContext Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function b1-Managed.GSEQT_STByResID.ProcessItemCS
// (Native, Event, Public, HasOutParams, BlueprintEvent, Const)
// Parameters:
// class UWorld*                           World                                                  (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// struct FVector                          ItemLocation                                           (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// class AActor*                           ItemActor                                              (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// class AActor*                           Querier                                                (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// uint8                                   ReturnValue                                            (Parm, OutParm, ReturnParm, NoDestructor, HasGetValueTypeHash)

uint8 UGSEQT_STByResID::ProcessItemCS(class UWorld* World, const struct FVector& ItemLocation, class AActor* ItemActor, class AActor* Querier) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GSEQT_STByResID", "ProcessItemCS");

	Params::GSEQT_STByResID_ProcessItemCS Parms{};

	Parms.World = World;
	Parms.ItemLocation = std::move(ItemLocation);
	Parms.ItemActor = ItemActor;
	Parms.Querier = Querier;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function b1-Managed.GSEQT_STPriority.ShouldPrepareContext
// (Native, Event, Public, HasOutParams, BlueprintEvent, Const)
// Parameters:
// uint8                                   ReturnValue                                            (Parm, OutParm, ReturnParm, NoDestructor, HasGetValueTypeHash)

uint8 UGSEQT_STPriority::ShouldPrepareContext() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GSEQT_STPriority", "ShouldPrepareContext");

	Params::GSEQT_STPriority_ShouldPrepareContext Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function b1-Managed.GSEQT_STPriority.ProcessItemCS
// (Native, Event, Public, HasOutParams, BlueprintEvent, Const)
// Parameters:
// class UWorld*                           World                                                  (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// struct FVector                          ItemLocation                                           (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// class AActor*                           ItemActor                                              (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// class AActor*                           Querier                                                (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// uint8                                   ReturnValue                                            (Parm, OutParm, ReturnParm, NoDestructor, HasGetValueTypeHash)

uint8 UGSEQT_STPriority::ProcessItemCS(class UWorld* World, const struct FVector& ItemLocation, class AActor* ItemActor, class AActor* Querier) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GSEQT_STPriority", "ProcessItemCS");

	Params::GSEQT_STPriority_ProcessItemCS Parms{};

	Parms.World = World;
	Parms.ItemLocation = std::move(ItemLocation);
	Parms.ItemActor = ItemActor;
	Parms.Querier = Querier;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function b1-Managed.BGUAudioSystem.ReceiveBeginPlay
// (Native, Event, Public, BlueprintEvent)

void UBGUAudioSystem::ReceiveBeginPlay()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BGUAudioSystem", "ReceiveBeginPlay");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function b1-Managed.BGUAudioSystem.OnDead
// (Native, Public)
// Parameters:
// class AActor*                           Attacker                                               (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UBGUAudioSystem::OnDead(class AActor* Attacker)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BGUAudioSystem", "OnDead");

	Params::BGUAudioSystem_OnDead Parms{};

	Parms.Attacker = Attacker;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function b1-Managed.BGWTeleportNamedPoint.ReceiveBeginPlay
// (Native, Event, Public, Protected, BlueprintEvent)

void ABGWTeleportNamedPoint::ReceiveBeginPlay()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BGWTeleportNamedPoint", "ReceiveBeginPlay");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function b1-Managed.BGWTeleportNamedPoint.ReceiveEndPlay
// (Native, Event, Public, Protected, BlueprintEvent)
// Parameters:
// EEndPlayReason                          EndPlayReason                                          (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ABGWTeleportNamedPoint::ReceiveEndPlay(EEndPlayReason EndPlayReason)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BGWTeleportNamedPoint", "ReceiveEndPlay");

	Params::BGWTeleportNamedPoint_ReceiveEndPlay Parms{};

	Parms.EndPlayReason = EndPlayReason;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function b1-Managed.BUAnimationAnalyzer.GenerateNewAACSAsset
// (Native, Static, Public, Private, HasOutParams, BlueprintCallable)
// Parameters:
// class UAnimationAnalyzer*               OrgAA                                                  (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// class UBUAnimationAnalyzer*             ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

class UBUAnimationAnalyzer* UBUAnimationAnalyzer::GenerateNewAACSAsset(class UAnimationAnalyzer* OrgAA)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("BUAnimationAnalyzer", "GenerateNewAACSAsset");

	Params::BUAnimationAnalyzer_GenerateNewAACSAsset Parms{};

	Parms.OrgAA = OrgAA;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function b1-Managed.BUAnimationAnalyzer.RequireAnimationsLoadAtDesiredReferences
// (Native, Event, Public, HasOutParams, BlueprintEvent)
// Parameters:
// int32                                   Ref                                                    (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// uint8                                   bLoadAll                                               (Parm, NoDestructor, HasGetValueTypeHash)
// class UObject*                          Obj                                                    (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// int32                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

int32 UBUAnimationAnalyzer::RequireAnimationsLoadAtDesiredReferences(int32 Ref, uint8 bLoadAll, class UObject* Obj)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BUAnimationAnalyzer", "RequireAnimationsLoadAtDesiredReferences");

	Params::BUAnimationAnalyzer_RequireAnimationsLoadAtDesiredReferences Parms{};

	Parms.Ref = Ref;
	Parms.bLoadAll = bLoadAll;
	Parms.Obj = Obj;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function b1-Managed.BUAnimationAnalyzer.CheckIsFirstLoadRequireDesireAsset
// (Native, Event, Public, HasOutParams, BlueprintEvent)
// Parameters:
// int32                                   Ref                                                    (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// uint8                                   ReturnValue                                            (Parm, OutParm, ReturnParm, NoDestructor, HasGetValueTypeHash)

uint8 UBUAnimationAnalyzer::CheckIsFirstLoadRequireDesireAsset(int32 Ref)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BUAnimationAnalyzer", "CheckIsFirstLoadRequireDesireAsset");

	Params::BUAnimationAnalyzer_CheckIsFirstLoadRequireDesireAsset Parms{};

	Parms.Ref = Ref;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function b1-Managed.BUAnimationAnalyzer.MMAnimationSeqUsingNotify_Inner
// (Native, Event, Public, BlueprintEvent)
// Parameters:
// int32                                   Ref                                                    (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// class AActor*                           Owner                                                  (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UBUAnimationAnalyzer::MMAnimationSeqUsingNotify_Inner(int32 Ref, class AActor* Owner)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BUAnimationAnalyzer", "MMAnimationSeqUsingNotify_Inner");

	Params::BUAnimationAnalyzer_MMAnimationSeqUsingNotify_Inner Parms{};

	Parms.Ref = Ref;
	Parms.Owner = Owner;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function b1-Managed.BUAnimationAnalyzer.AddToABPSettingSameToAA
// (Native, Public, Private, HasOutParams, BlueprintCallable)
// Parameters:
// class UBGWDataAsset_AbpHumanoidSetting* ABP_Setting                                            (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// class FString                           OrgAAPackageName                                       (Parm, ZeroConstructor, HasGetValueTypeHash)
// uint8                                   ReturnValue                                            (Parm, OutParm, ReturnParm, NoDestructor, HasGetValueTypeHash)

uint8 UBUAnimationAnalyzer::AddToABPSettingSameToAA(class UBGWDataAsset_AbpHumanoidSetting* ABP_Setting, const class FString& OrgAAPackageName)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BUAnimationAnalyzer", "AddToABPSettingSameToAA");

	Params::BUAnimationAnalyzer_AddToABPSettingSameToAA Parms{};

	Parms.ABP_Setting = ABP_Setting;
	Parms.OrgAAPackageName = std::move(OrgAAPackageName);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function b1-Managed.BUAnimationAnalyzer.FindABPSettingSameToAA
// (Native, Public, Private, HasOutParams, BlueprintCallable)
// Parameters:
// class UBGWDataAsset_AbpHumanoidSetting* ABP_Setting                                            (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// class FString                           OrgAAPackageName                                       (Parm, ZeroConstructor, HasGetValueTypeHash)
// uint8                                   ReturnValue                                            (Parm, OutParm, ReturnParm, NoDestructor, HasGetValueTypeHash)

uint8 UBUAnimationAnalyzer::FindABPSettingSameToAA(class UBGWDataAsset_AbpHumanoidSetting* ABP_Setting, const class FString& OrgAAPackageName)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BUAnimationAnalyzer", "FindABPSettingSameToAA");

	Params::BUAnimationAnalyzer_FindABPSettingSameToAA Parms{};

	Parms.ABP_Setting = ABP_Setting;
	Parms.OrgAAPackageName = std::move(OrgAAPackageName);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function b1-Managed.BGAnimDragon.BlueprintThreadSafeUpdateAnimation
// (Native, Event, Public, BlueprintEvent)
// Parameters:
// float                                   DeltaSeconds                                           (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UBGAnimDragon::BlueprintThreadSafeUpdateAnimation(float DeltaSeconds)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BGAnimDragon", "BlueprintThreadSafeUpdateAnimation");

	Params::BGAnimDragon_BlueprintThreadSafeUpdateAnimation Parms{};

	Parms.DeltaSeconds = DeltaSeconds;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function b1-Managed.BGAnimDragon.BlueprintInitializeAnimation
// (Native, Event, Public, BlueprintEvent)

void UBGAnimDragon::BlueprintInitializeAnimation()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BGAnimDragon", "BlueprintInitializeAnimation");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function b1-Managed.BGAnimDragon.BlueprintUpdateAnimation
// (Native, Event, Public, BlueprintEvent)
// Parameters:
// float                                   DeltaTimeX                                             (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UBGAnimDragon::BlueprintUpdateAnimation(float DeltaTimeX)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BGAnimDragon", "BlueprintUpdateAnimation");

	Params::BGAnimDragon_BlueprintUpdateAnimation Parms{};

	Parms.DeltaTimeX = DeltaTimeX;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function b1-Managed.BUAnimHumanoidCS_CloudLocomotion.SetupIdleAnim
// (Native, Public, Private, HasOutParams, BlueprintCallable)
// Parameters:
// struct FAnimUpdateContext               Context                                                (Parm, OutParm, ReferenceParm)
// struct FAnimNodeReference               Node                                                   (Parm, OutParm, ReferenceParm, NoDestructor)

void UBUAnimHumanoidCS_CloudLocomotion::SetupIdleAnim(struct FAnimUpdateContext& Context, struct FAnimNodeReference& Node)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BUAnimHumanoidCS_CloudLocomotion", "SetupIdleAnim");

	Params::BUAnimHumanoidCS_CloudLocomotion_SetupIdleAnim Parms{};

	Parms.Context = std::move(Context);
	Parms.Node = std::move(Node);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	Context = std::move(Parms.Context);
	Node = std::move(Parms.Node);
}


// Function b1-Managed.BUAnimHumanoidCS_QuadrupedLocomotion.SetupLandStopAnim
// (Native, Public, Private, HasOutParams, BlueprintCallable)
// Parameters:
// struct FAnimUpdateContext               Context                                                (Parm, OutParm, ReferenceParm)
// struct FAnimNodeReference               Node                                                   (Parm, OutParm, ReferenceParm, NoDestructor)

void UBUAnimHumanoidCS_QuadrupedLocomotion::SetupLandStopAnim(struct FAnimUpdateContext& Context, struct FAnimNodeReference& Node)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BUAnimHumanoidCS_QuadrupedLocomotion", "SetupLandStopAnim");

	Params::BUAnimHumanoidCS_QuadrupedLocomotion_SetupLandStopAnim Parms{};

	Parms.Context = std::move(Context);
	Parms.Node = std::move(Node);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	Context = std::move(Parms.Context);
	Node = std::move(Parms.Node);
}


// Function b1-Managed.BUAnimHumanoidCS_QuadrupedLocomotion.SetupLandMoveAnim
// (Native, Public, Private, HasOutParams, BlueprintCallable)
// Parameters:
// struct FAnimUpdateContext               Context                                                (Parm, OutParm, ReferenceParm)
// struct FAnimNodeReference               Node                                                   (Parm, OutParm, ReferenceParm, NoDestructor)

void UBUAnimHumanoidCS_QuadrupedLocomotion::SetupLandMoveAnim(struct FAnimUpdateContext& Context, struct FAnimNodeReference& Node)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BUAnimHumanoidCS_QuadrupedLocomotion", "SetupLandMoveAnim");

	Params::BUAnimHumanoidCS_QuadrupedLocomotion_SetupLandMoveAnim Parms{};

	Parms.Context = std::move(Context);
	Parms.Node = std::move(Node);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	Context = std::move(Parms.Context);
	Node = std::move(Parms.Node);
}


// Function b1-Managed.BUAnimHumanoidCS_QuadrupedLocomotion.GetRandomIdleAnim
// (Native, Public, Private, HasOutParams, BlueprintCallable)
// Parameters:
// struct FAnimUpdateContext               Context                                                (Parm, OutParm, ReferenceParm)
// struct FAnimNodeReference               Node                                                   (Parm, OutParm, ReferenceParm, NoDestructor)

void UBUAnimHumanoidCS_QuadrupedLocomotion::GetRandomIdleAnim(struct FAnimUpdateContext& Context, struct FAnimNodeReference& Node)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BUAnimHumanoidCS_QuadrupedLocomotion", "GetRandomIdleAnim");

	Params::BUAnimHumanoidCS_QuadrupedLocomotion_GetRandomIdleAnim Parms{};

	Parms.Context = std::move(Context);
	Parms.Node = std::move(Node);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	Context = std::move(Parms.Context);
	Node = std::move(Parms.Node);
}


// Function b1-Managed.BUAnimHumanoidCS_QuadrupedLocomotion.SetupFallAnim
// (Native, Public, Private, HasOutParams, BlueprintCallable)
// Parameters:
// struct FAnimUpdateContext               Context                                                (Parm, OutParm, ReferenceParm)
// struct FAnimNodeReference               Node                                                   (Parm, OutParm, ReferenceParm, NoDestructor)

void UBUAnimHumanoidCS_QuadrupedLocomotion::SetupFallAnim(struct FAnimUpdateContext& Context, struct FAnimNodeReference& Node)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BUAnimHumanoidCS_QuadrupedLocomotion", "SetupFallAnim");

	Params::BUAnimHumanoidCS_QuadrupedLocomotion_SetupFallAnim Parms{};

	Parms.Context = std::move(Context);
	Parms.Node = std::move(Node);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	Context = std::move(Parms.Context);
	Node = std::move(Parms.Node);
}


// Function b1-Managed.BUAnimHumanoidCS_AnimCurveBodySeparation.UpdateBodySeparationBlend
// (Native, Public, Private, HasOutParams, BlueprintCallable)
// Parameters:
// struct FAnimUpdateContext               Context                                                (Parm, OutParm, ReferenceParm)
// struct FAnimNodeReference               Node                                                   (Parm, OutParm, ReferenceParm, NoDestructor)

void UBUAnimHumanoidCS_AnimCurveBodySeparation::UpdateBodySeparationBlend(struct FAnimUpdateContext& Context, struct FAnimNodeReference& Node)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BUAnimHumanoidCS_AnimCurveBodySeparation", "UpdateBodySeparationBlend");

	Params::BUAnimHumanoidCS_AnimCurveBodySeparation_UpdateBodySeparationBlend Parms{};

	Parms.Context = std::move(Context);
	Parms.Node = std::move(Node);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	Context = std::move(Parms.Context);
	Node = std::move(Parms.Node);
}


// Function b1-Managed.BUAnimHumanoidCS_AnimCurveBodySeparation.InitBodySeparationBlend
// (Native, Public, Private, HasOutParams, BlueprintCallable)
// Parameters:
// struct FAnimUpdateContext               Context                                                (Parm, OutParm, ReferenceParm)
// struct FAnimNodeReference               Node                                                   (Parm, OutParm, ReferenceParm, NoDestructor)

void UBUAnimHumanoidCS_AnimCurveBodySeparation::InitBodySeparationBlend(struct FAnimUpdateContext& Context, struct FAnimNodeReference& Node)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BUAnimHumanoidCS_AnimCurveBodySeparation", "InitBodySeparationBlend");

	Params::BUAnimHumanoidCS_AnimCurveBodySeparation_InitBodySeparationBlend Parms{};

	Parms.Context = std::move(Context);
	Parms.Node = std::move(Node);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	Context = std::move(Parms.Context);
	Node = std::move(Parms.Node);
}


// Function b1-Managed.BUAnim_PostProcess.BlueprintInitializeAnimation
// (Native, Event, Public, BlueprintEvent)

void UBUAnim_PostProcess::BlueprintInitializeAnimation()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BUAnim_PostProcess", "BlueprintInitializeAnimation");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function b1-Managed.BUAnim_PostProcess.BlueprintUpdateAnimation
// (Native, Event, Public, BlueprintEvent)
// Parameters:
// float                                   DeltaTimeX                                             (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UBUAnim_PostProcess::BlueprintUpdateAnimation(float DeltaTimeX)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BUAnim_PostProcess", "BlueprintUpdateAnimation");

	Params::BUAnim_PostProcess_BlueprintUpdateAnimation Parms{};

	Parms.DeltaTimeX = DeltaTimeX;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function b1-Managed.TestCaseUI.OnInitialized
// (BlueprintCosmetic, Native, Event, Public, BlueprintEvent)

void UTestCaseUI::OnInitialized()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("TestCaseUI", "OnInitialized");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function b1-Managed.TestCaseUI.CustomTick
// (Native, Public, Protected, BlueprintCallable)
// Parameters:
// struct FGeometry                        MyGeometry                                             (Parm, IsPlainOldData, NoDestructor)
// float                                   InDeltaTime                                            (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UTestCaseUI::CustomTick(const struct FGeometry& MyGeometry, float InDeltaTime)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("TestCaseUI", "CustomTick");

	Params::TestCaseUI_CustomTick Parms{};

	Parms.MyGeometry = std::move(MyGeometry);
	Parms.InDeltaTime = InDeltaTime;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function b1-Managed.BUI_FOnButtonClickedEvent_LamdaHolder.LamdaCB
// (Native, Public)

void UBUI_FOnButtonClickedEvent_LamdaHolder::LamdaCB()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BUI_FOnButtonClickedEvent_LamdaHolder", "LamdaCB");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function b1-Managed.BUI_RoundRectDemo.UpdatePosRefWorldPos
// (Native, Public, BlueprintCallable)
// Parameters:
// class UWidget*                          TargetWidget                                           (ExportObject, Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// struct FVector                          WorldPos                                               (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UBUI_RoundRectDemo::UpdatePosRefWorldPos(class UWidget* TargetWidget, const struct FVector& WorldPos)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BUI_RoundRectDemo", "UpdatePosRefWorldPos");

	Params::BUI_RoundRectDemo_UpdatePosRefWorldPos Parms{};

	Parms.TargetWidget = TargetWidget;
	Parms.WorldPos = std::move(WorldPos);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function b1-Managed.BUI_RoundRectDemo.UpdateShow
// (Native, Public, BlueprintCallable)
// Parameters:
// float                                   InDeltaTime                                            (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UBUI_RoundRectDemo::UpdateShow(float InDeltaTime)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BUI_RoundRectDemo", "UpdateShow");

	Params::BUI_RoundRectDemo_UpdateShow Parms{};

	Parms.InDeltaTime = InDeltaTime;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function b1-Managed.BUI_GM_OP_DIY.OnClickDoDelete
// (Native, Public, Private)

void UBUI_GM_OP_DIY::OnClickDoDelete()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BUI_GM_OP_DIY", "OnClickDoDelete");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function b1-Managed.BUI_GM_OP_DIY.OnClickDoSave
// (Native, Public, Private)

void UBUI_GM_OP_DIY::OnClickDoSave()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BUI_GM_OP_DIY", "OnClickDoSave");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function b1-Managed.BUI_GM_OP_DIY.OnClickDoCmds
// (Native, Public, Private)

void UBUI_GM_OP_DIY::OnClickDoCmds()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BUI_GM_OP_DIY", "OnClickDoCmds");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function b1-Managed.BUI_CommErrorTips.OnConfirmButtonDown
// (Native, Public)

void UBUI_CommErrorTips::OnConfirmButtonDown()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BUI_CommErrorTips", "OnConfirmButtonDown");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function b1-Managed.BUI_InputIconWidget.UpdateKeyboard
// (Native, Public, BlueprintCallable)

void UBUI_InputIconWidget::UpdateKeyboard()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BUI_InputIconWidget", "UpdateKeyboard");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function b1-Managed.BUI_InputIconWidget.UpdateGamepad
// (Native, Public, BlueprintCallable)

void UBUI_InputIconWidget::UpdateGamepad()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BUI_InputIconWidget", "UpdateGamepad");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function b1-Managed.BUI_MouseButtonEvent.OnUserWidgetAnimationSequenceEvent
// (Native, Public, BlueprintCallable)
// Parameters:
// int32                                   Param                                                  (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UBUI_MouseButtonEvent::OnUserWidgetAnimationSequenceEvent(int32 Param)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BUI_MouseButtonEvent", "OnUserWidgetAnimationSequenceEvent");

	Params::BUI_MouseButtonEvent_OnUserWidgetAnimationSequenceEvent Parms{};

	Parms.Param = Param;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function b1-Managed.BUI_MouseButtonEvent.OnMouseButtonDown
// (BlueprintCosmetic, Native, Event, Public, HasOutParams, BlueprintEvent)
// Parameters:
// struct FGeometry                        MyGeometry                                             (Parm, IsPlainOldData, NoDestructor)
// struct FPointerEvent                    MouseEvent                                             (ConstParm, Parm, OutParm, ReferenceParm)
// struct FEventReply                      ReturnValue                                            (Parm, OutParm, ReturnParm)

struct FEventReply UBUI_MouseButtonEvent::OnMouseButtonDown(const struct FGeometry& MyGeometry, const struct FPointerEvent& MouseEvent)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BUI_MouseButtonEvent", "OnMouseButtonDown");

	Params::BUI_MouseButtonEvent_OnMouseButtonDown Parms{};

	Parms.MyGeometry = std::move(MyGeometry);
	Parms.MouseEvent = std::move(MouseEvent);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function b1-Managed.BUI_MouseButtonEvent.OnMouseButtonUp
// (BlueprintCosmetic, Native, Event, Public, HasOutParams, BlueprintEvent)
// Parameters:
// struct FGeometry                        MyGeometry                                             (Parm, IsPlainOldData, NoDestructor)
// struct FPointerEvent                    MouseEvent                                             (ConstParm, Parm, OutParm, ReferenceParm)
// struct FEventReply                      ReturnValue                                            (Parm, OutParm, ReturnParm)

struct FEventReply UBUI_MouseButtonEvent::OnMouseButtonUp(const struct FGeometry& MyGeometry, const struct FPointerEvent& MouseEvent)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BUI_MouseButtonEvent", "OnMouseButtonUp");

	Params::BUI_MouseButtonEvent_OnMouseButtonUp Parms{};

	Parms.MyGeometry = std::move(MyGeometry);
	Parms.MouseEvent = std::move(MouseEvent);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function b1-Managed.BUI_MouseButtonEvent.OnMouseLeave
// (BlueprintCosmetic, Native, Event, Public, BlueprintEvent)
// Parameters:
// struct FPointerEvent                    MouseEvent                                             (ConstParm, Parm, OutParm, ReferenceParm)

void UBUI_MouseButtonEvent::OnMouseLeave(const struct FPointerEvent& MouseEvent)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BUI_MouseButtonEvent", "OnMouseLeave");

	Params::BUI_MouseButtonEvent_OnMouseLeave Parms{};

	Parms.MouseEvent = std::move(MouseEvent);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function b1-Managed.BUI_MouseButtonEvent.OnMouseEnter
// (BlueprintCosmetic, Native, Event, Public, BlueprintEvent)
// Parameters:
// struct FGeometry                        MyGeometry                                             (Parm, IsPlainOldData, NoDestructor)
// struct FPointerEvent                    MouseEvent                                             (ConstParm, Parm, OutParm, ReferenceParm)

void UBUI_MouseButtonEvent::OnMouseEnter(const struct FGeometry& MyGeometry, const struct FPointerEvent& MouseEvent)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BUI_MouseButtonEvent", "OnMouseEnter");

	Params::BUI_MouseButtonEvent_OnMouseEnter Parms{};

	Parms.MyGeometry = std::move(MyGeometry);
	Parms.MouseEvent = std::move(MouseEvent);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function b1-Managed.BUI_MouseButtonEvent.OnMouseMove
// (BlueprintCosmetic, Native, Event, Public, HasOutParams, BlueprintEvent)
// Parameters:
// struct FGeometry                        MyGeometry                                             (Parm, IsPlainOldData, NoDestructor)
// struct FPointerEvent                    MouseEvent                                             (ConstParm, Parm, OutParm, ReferenceParm)
// struct FEventReply                      ReturnValue                                            (Parm, OutParm, ReturnParm)

struct FEventReply UBUI_MouseButtonEvent::OnMouseMove(const struct FGeometry& MyGeometry, const struct FPointerEvent& MouseEvent)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BUI_MouseButtonEvent", "OnMouseMove");

	Params::BUI_MouseButtonEvent_OnMouseMove Parms{};

	Parms.MyGeometry = std::move(MyGeometry);
	Parms.MouseEvent = std::move(MouseEvent);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function b1-Managed.BUI_MouseButtonEvent.Tick
// (BlueprintCosmetic, Native, Event, Public, BlueprintEvent)
// Parameters:
// struct FGeometry                        MyGeometry                                             (Parm, IsPlainOldData, NoDestructor)
// float                                   InDeltaTime                                            (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UBUI_MouseButtonEvent::Tick(const struct FGeometry& MyGeometry, float InDeltaTime)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BUI_MouseButtonEvent", "Tick");

	Params::BUI_MouseButtonEvent_Tick Parms{};

	Parms.MyGeometry = std::move(MyGeometry);
	Parms.InDeltaTime = InDeltaTime;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function b1-Managed.BUI_NotifyValidatePanel.OnClickClose
// (Native, Public, Private)

void UBUI_NotifyValidatePanel::OnClickClose()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BUI_NotifyValidatePanel", "OnClickClose");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function b1-Managed.BUI_UnitDebugInfo.OnRegistOwner
// (Native, Public, BlueprintCallable)
// Parameters:
// class ABGUCharacterCS*                  UnitActor                                              (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UBUI_UnitDebugInfo::OnRegistOwner(class ABGUCharacterCS* UnitActor)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BUI_UnitDebugInfo", "OnRegistOwner");

	Params::BUI_UnitDebugInfo_OnRegistOwner Parms{};

	Parms.UnitActor = UnitActor;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function b1-Managed.BUI_ZBBPanel.GenerateReport
// (Native, Public)
// Parameters:
// class FString                           SelectedItem                                           (Parm, ZeroConstructor, HasGetValueTypeHash)
// ESelectInfo                             SelectionType                                          (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UBUI_ZBBPanel::GenerateReport(const class FString& SelectedItem, ESelectInfo SelectionType)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BUI_ZBBPanel", "GenerateReport");

	Params::BUI_ZBBPanel_GenerateReport Parms{};

	Parms.SelectedItem = std::move(SelectedItem);
	Parms.SelectionType = SelectionType;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function b1-Managed.BUI_ZBBPanel.ShowZBBInfo
// (Native, Public, Private)

void UBUI_ZBBPanel::ShowZBBInfo()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BUI_ZBBPanel", "ShowZBBInfo");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function b1-Managed.BP_ActorTouchDraggingController.ReceiveBeginPlay
// (Native, Event, Public, Protected, BlueprintEvent)

void ABP_ActorTouchDraggingController::ReceiveBeginPlay()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_ActorTouchDraggingController", "ReceiveBeginPlay");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function b1-Managed.BP_ActorTouchDraggingController.OnTouchReleased
// (Native, Public, Private)

void ABP_ActorTouchDraggingController::OnTouchReleased()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_ActorTouchDraggingController", "OnTouchReleased");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function b1-Managed.BP_ActorTouchDraggingController.OnTouchPressed
// (Native, Public, Private)

void ABP_ActorTouchDraggingController::OnTouchPressed()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_ActorTouchDraggingController", "OnTouchPressed");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function b1-Managed.BP_ActorTouchDraggingController.OnTick
// (Native, Public, BlueprintCallable)
// Parameters:
// float                                   DeltaTime                                              (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ABP_ActorTouchDraggingController::OnTick(float DeltaTime)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_ActorTouchDraggingController", "OnTick");

	Params::BP_ActorTouchDraggingController_OnTick Parms{};

	Parms.DeltaTime = DeltaTime;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function b1-Managed.WBP_ActorDraggingController.OnMouseButtonDown
// (BlueprintCosmetic, Native, Event, Public, HasOutParams, BlueprintEvent)
// Parameters:
// struct FGeometry                        MyGeometry                                             (Parm, IsPlainOldData, NoDestructor)
// struct FPointerEvent                    MouseEvent                                             (ConstParm, Parm, OutParm, ReferenceParm)
// struct FEventReply                      ReturnValue                                            (Parm, OutParm, ReturnParm)

struct FEventReply UWBP_ActorDraggingController::OnMouseButtonDown(const struct FGeometry& MyGeometry, const struct FPointerEvent& MouseEvent)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("WBP_ActorDraggingController", "OnMouseButtonDown");

	Params::WBP_ActorDraggingController_OnMouseButtonDown Parms{};

	Parms.MyGeometry = std::move(MyGeometry);
	Parms.MouseEvent = std::move(MouseEvent);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function b1-Managed.WBP_ActorDraggingController.OnDragCancelled
// (BlueprintCosmetic, Native, Event, Public, BlueprintEvent)
// Parameters:
// struct FPointerEvent                    PointerEvent                                           (ConstParm, Parm, OutParm, ReferenceParm)
// class UDragDropOperation*               Operation                                              (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UWBP_ActorDraggingController::OnDragCancelled(const struct FPointerEvent& PointerEvent, class UDragDropOperation* Operation)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("WBP_ActorDraggingController", "OnDragCancelled");

	Params::WBP_ActorDraggingController_OnDragCancelled Parms{};

	Parms.PointerEvent = std::move(PointerEvent);
	Parms.Operation = Operation;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function b1-Managed.WBP_ActorDraggingController.OnDragDetected
// (BlueprintCosmetic, Native, Event, Public, HasOutParams, BlueprintEvent)
// Parameters:
// struct FGeometry                        MyGeometry                                             (Parm, IsPlainOldData, NoDestructor)
// struct FPointerEvent                    PointerEvent                                           (ConstParm, Parm, OutParm, ReferenceParm)
// class UDragDropOperation*               Operation                                              (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UWBP_ActorDraggingController::OnDragDetected(const struct FGeometry& MyGeometry, const struct FPointerEvent& PointerEvent, class UDragDropOperation** Operation)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("WBP_ActorDraggingController", "OnDragDetected");

	Params::WBP_ActorDraggingController_OnDragDetected Parms{};

	Parms.MyGeometry = std::move(MyGeometry);
	Parms.PointerEvent = std::move(PointerEvent);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	if (Operation != nullptr)
		*Operation = Parms.Operation;
}


// Function b1-Managed.WBP_ActorDraggingController.OnMouseButtonDownCallback
// (Native, Public, HasOutParams, BlueprintCallable)
// Parameters:
// struct FGeometry                        MyGeometry                                             (Parm, IsPlainOldData, NoDestructor)
// struct FPointerEvent                    MouseEvent                                             (Parm)
// struct FEventReply                      ReturnValue                                            (Parm, OutParm, ReturnParm)

struct FEventReply UWBP_ActorDraggingController::OnMouseButtonDownCallback(const struct FGeometry& MyGeometry, const struct FPointerEvent& MouseEvent)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("WBP_ActorDraggingController", "OnMouseButtonDownCallback");

	Params::WBP_ActorDraggingController_OnMouseButtonDownCallback Parms{};

	Parms.MyGeometry = std::move(MyGeometry);
	Parms.MouseEvent = std::move(MouseEvent);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function b1-Managed.WBP_ActorDraggingController.OnDragOver
// (BlueprintCosmetic, Native, Event, Public, HasOutParams, BlueprintEvent)
// Parameters:
// struct FGeometry                        MyGeometry                                             (Parm, IsPlainOldData, NoDestructor)
// struct FPointerEvent                    PointerEvent                                           (Parm)
// class UDragDropOperation*               Operation                                              (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// uint8                                   ReturnValue                                            (Parm, OutParm, ReturnParm, NoDestructor, HasGetValueTypeHash)

uint8 UWBP_ActorDraggingController::OnDragOver(const struct FGeometry& MyGeometry, const struct FPointerEvent& PointerEvent, class UDragDropOperation* Operation)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("WBP_ActorDraggingController", "OnDragOver");

	Params::WBP_ActorDraggingController_OnDragOver Parms{};

	Parms.MyGeometry = std::move(MyGeometry);
	Parms.PointerEvent = std::move(PointerEvent);
	Parms.Operation = Operation;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function b1-Managed.WBP_ActorDraggingController.OnDragCancelledCallback
// (Native, Public, BlueprintCallable)
// Parameters:
// struct FPointerEvent                    PointerEvent                                           (Parm)
// class UDragDropOperation*               Operation                                              (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UWBP_ActorDraggingController::OnDragCancelledCallback(const struct FPointerEvent& PointerEvent, class UDragDropOperation* Operation)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("WBP_ActorDraggingController", "OnDragCancelledCallback");

	Params::WBP_ActorDraggingController_OnDragCancelledCallback Parms{};

	Parms.PointerEvent = std::move(PointerEvent);
	Parms.Operation = Operation;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function b1-Managed.WBP_ActorDraggingController.OnDragDetectedCallback
// (Native, Public, BlueprintCallable)
// Parameters:
// struct FGeometry                        MyGeometry                                             (Parm, IsPlainOldData, NoDestructor)
// struct FPointerEvent                    PointerEvent                                           (Parm)

void UWBP_ActorDraggingController::OnDragDetectedCallback(const struct FGeometry& MyGeometry, const struct FPointerEvent& PointerEvent)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("WBP_ActorDraggingController", "OnDragDetectedCallback");

	Params::WBP_ActorDraggingController_OnDragDetectedCallback Parms{};

	Parms.MyGeometry = std::move(MyGeometry);
	Parms.PointerEvent = std::move(PointerEvent);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function b1-Managed.WBP_ActorDraggingController.OnDragOverCallback
// (Native, Public, HasOutParams, BlueprintCallable)
// Parameters:
// struct FGeometry                        MyGeometry                                             (Parm, IsPlainOldData, NoDestructor)
// struct FPointerEvent                    PointerEvent                                           (Parm)
// class UDragDropOperation*               Operation                                              (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// uint8                                   ReturnValue                                            (Parm, OutParm, ReturnParm, NoDestructor, HasGetValueTypeHash)

uint8 UWBP_ActorDraggingController::OnDragOverCallback(const struct FGeometry& MyGeometry, const struct FPointerEvent& PointerEvent, class UDragDropOperation* Operation)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("WBP_ActorDraggingController", "OnDragOverCallback");

	Params::WBP_ActorDraggingController_OnDragOverCallback Parms{};

	Parms.MyGeometry = std::move(MyGeometry);
	Parms.PointerEvent = std::move(PointerEvent);
	Parms.Operation = Operation;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function b1-Managed.UI_EditorUtilSample.OnClickDoSth
// (Native, Public, Private)

void UUI_EditorUtilSample::OnClickDoSth()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("UI_EditorUtilSample", "OnClickDoSth");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function b1-Managed.UI_EditorUtilSample.ConstructCS
// (Native, Public, BlueprintCallable)
// Parameters:
// class UObject*                          Widget                                                 (ExportObject, Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UUI_EditorUtilSample::ConstructCS(class UObject* Widget)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("UI_EditorUtilSample", "ConstructCS");

	Params::UI_EditorUtilSample_ConstructCS Parms{};

	Parms.Widget = Widget;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function b1-Managed.UI_EditorUtilSample.TickCS
// (Native, Public, BlueprintCallable)
// Parameters:
// struct FGeometry                        MyGeometry                                             (Parm, IsPlainOldData, NoDestructor)
// float                                   InDeltaTime                                            (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UUI_EditorUtilSample::TickCS(const struct FGeometry& MyGeometry, float InDeltaTime)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("UI_EditorUtilSample", "TickCS");

	Params::UI_EditorUtilSample_TickCS Parms{};

	Parms.MyGeometry = std::move(MyGeometry);
	Parms.InDeltaTime = InDeltaTime;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function b1-Managed.BUI_GMCameraPanel.CheckBox_CameraGroup01_OnCheckStateChanged
// (Native, Public, BlueprintCallable)
// Parameters:
// uint8                                   bChecked                                               (Parm, NoDestructor, HasGetValueTypeHash)

void UBUI_GMCameraPanel::CheckBox_CameraGroup01_OnCheckStateChanged(uint8 bChecked)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BUI_GMCameraPanel", "CheckBox_CameraGroup01_OnCheckStateChanged");

	Params::BUI_GMCameraPanel_CheckBox_CameraGroup01_OnCheckStateChanged Parms{};

	Parms.bChecked = bChecked;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function b1-Managed.BUI_GMCameraPanel.CheckBox_UnlockDefault_OnCheckStateChanged
// (Native, Public, BlueprintCallable)
// Parameters:
// uint8                                   bChecked                                               (Parm, NoDestructor, HasGetValueTypeHash)

void UBUI_GMCameraPanel::CheckBox_UnlockDefault_OnCheckStateChanged(uint8 bChecked)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BUI_GMCameraPanel", "CheckBox_UnlockDefault_OnCheckStateChanged");

	Params::BUI_GMCameraPanel_CheckBox_UnlockDefault_OnCheckStateChanged Parms{};

	Parms.bChecked = bChecked;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function b1-Managed.BUI_GMCameraPanel.CheckBox_CameraGroup03_OnCheckStateChanged
// (Native, Public, BlueprintCallable)
// Parameters:
// uint8                                   bChecked                                               (Parm, NoDestructor, HasGetValueTypeHash)

void UBUI_GMCameraPanel::CheckBox_CameraGroup03_OnCheckStateChanged(uint8 bChecked)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BUI_GMCameraPanel", "CheckBox_CameraGroup03_OnCheckStateChanged");

	Params::BUI_GMCameraPanel_CheckBox_CameraGroup03_OnCheckStateChanged Parms{};

	Parms.bChecked = bChecked;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function b1-Managed.BUI_GMCameraPanel.CheckBox_CameraGroup02_OnCheckStateChanged
// (Native, Public, BlueprintCallable)
// Parameters:
// uint8                                   bChecked                                               (Parm, NoDestructor, HasGetValueTypeHash)

void UBUI_GMCameraPanel::CheckBox_CameraGroup02_OnCheckStateChanged(uint8 bChecked)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BUI_GMCameraPanel", "CheckBox_CameraGroup02_OnCheckStateChanged");

	Params::BUI_GMCameraPanel_CheckBox_CameraGroup02_OnCheckStateChanged Parms{};

	Parms.bChecked = bChecked;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function b1-Managed.BUI_GMCameraPanel.CheckBox_LockDefault_OnCheckStateChanged
// (Native, Public, BlueprintCallable)
// Parameters:
// uint8                                   bChecked                                               (Parm, NoDestructor, HasGetValueTypeHash)

void UBUI_GMCameraPanel::CheckBox_LockDefault_OnCheckStateChanged(uint8 bChecked)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BUI_GMCameraPanel", "CheckBox_LockDefault_OnCheckStateChanged");

	Params::BUI_GMCameraPanel_CheckBox_LockDefault_OnCheckStateChanged Parms{};

	Parms.bChecked = bChecked;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function b1-Managed.BUI_GMCameraPanel.CheckBox_UnlockClose_OnCheckStateChanged
// (Native, Public, BlueprintCallable)
// Parameters:
// uint8                                   bChecked                                               (Parm, NoDestructor, HasGetValueTypeHash)

void UBUI_GMCameraPanel::CheckBox_UnlockClose_OnCheckStateChanged(uint8 bChecked)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BUI_GMCameraPanel", "CheckBox_UnlockClose_OnCheckStateChanged");

	Params::BUI_GMCameraPanel_CheckBox_UnlockClose_OnCheckStateChanged Parms{};

	Parms.bChecked = bChecked;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function b1-Managed.BUI_GMCameraPanel.CheckBox_UnlockFree_OnCheckStateChanged
// (Native, Public, BlueprintCallable)
// Parameters:
// uint8                                   bChecked                                               (Parm, NoDestructor, HasGetValueTypeHash)

void UBUI_GMCameraPanel::CheckBox_UnlockFree_OnCheckStateChanged(uint8 bChecked)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BUI_GMCameraPanel", "CheckBox_UnlockFree_OnCheckStateChanged");

	Params::BUI_GMCameraPanel_CheckBox_UnlockFree_OnCheckStateChanged Parms{};

	Parms.bChecked = bChecked;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function b1-Managed.BUI_GMCameraPanel.CheckBox_LockClose_OnCheckStateChanged
// (Native, Public, BlueprintCallable)
// Parameters:
// uint8                                   bChecked                                               (Parm, NoDestructor, HasGetValueTypeHash)

void UBUI_GMCameraPanel::CheckBox_LockClose_OnCheckStateChanged(uint8 bChecked)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BUI_GMCameraPanel", "CheckBox_LockClose_OnCheckStateChanged");

	Params::BUI_GMCameraPanel_CheckBox_LockClose_OnCheckStateChanged Parms{};

	Parms.bChecked = bChecked;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function b1-Managed.BUI_GMCameraPanel.CheckBox_UnlockFar_OnCheckStateChanged
// (Native, Public, BlueprintCallable)
// Parameters:
// uint8                                   bChecked                                               (Parm, NoDestructor, HasGetValueTypeHash)

void UBUI_GMCameraPanel::CheckBox_UnlockFar_OnCheckStateChanged(uint8 bChecked)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BUI_GMCameraPanel", "CheckBox_UnlockFar_OnCheckStateChanged");

	Params::BUI_GMCameraPanel_CheckBox_UnlockFar_OnCheckStateChanged Parms{};

	Parms.bChecked = bChecked;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function b1-Managed.BUI_GMCameraPanel.CheckBox_UnlockMid_OnCheckStateChanged
// (Native, Public, BlueprintCallable)
// Parameters:
// uint8                                   bChecked                                               (Parm, NoDestructor, HasGetValueTypeHash)

void UBUI_GMCameraPanel::CheckBox_UnlockMid_OnCheckStateChanged(uint8 bChecked)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BUI_GMCameraPanel", "CheckBox_UnlockMid_OnCheckStateChanged");

	Params::BUI_GMCameraPanel_CheckBox_UnlockMid_OnCheckStateChanged Parms{};

	Parms.bChecked = bChecked;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function b1-Managed.BUI_GMCameraPanel.CheckBox_LockMid_OnCheckStateChanged
// (Native, Public, BlueprintCallable)
// Parameters:
// uint8                                   bChecked                                               (Parm, NoDestructor, HasGetValueTypeHash)

void UBUI_GMCameraPanel::CheckBox_LockMid_OnCheckStateChanged(uint8 bChecked)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BUI_GMCameraPanel", "CheckBox_LockMid_OnCheckStateChanged");

	Params::BUI_GMCameraPanel_CheckBox_LockMid_OnCheckStateChanged Parms{};

	Parms.bChecked = bChecked;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function b1-Managed.BUI_GMCameraPanel.CheckBox_LockFar_OnCheckStateChanged
// (Native, Public, BlueprintCallable)
// Parameters:
// uint8                                   bChecked                                               (Parm, NoDestructor, HasGetValueTypeHash)

void UBUI_GMCameraPanel::CheckBox_LockFar_OnCheckStateChanged(uint8 bChecked)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BUI_GMCameraPanel", "CheckBox_LockFar_OnCheckStateChanged");

	Params::BUI_GMCameraPanel_CheckBox_LockFar_OnCheckStateChanged Parms{};

	Parms.bChecked = bChecked;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function b1-Managed.BUI_GMDIYPanel.OnClickDoReturnCmdList
// (Native, Public, Private)

void UBUI_GMDIYPanel::OnClickDoReturnCmdList()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BUI_GMDIYPanel", "OnClickDoReturnCmdList");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function b1-Managed.BUI_GMDIYPanel.OnClickDoSaveCmds
// (Native, Public, Private)

void UBUI_GMDIYPanel::OnClickDoSaveCmds()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BUI_GMDIYPanel", "OnClickDoSaveCmds");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function b1-Managed.BUI_GMOptimizePanel.OnToOriginMapBtnClicked
// (Native, Public)

void UBUI_GMOptimizePanel::OnToOriginMapBtnClicked()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BUI_GMOptimizePanel", "OnToOriginMapBtnClicked");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function b1-Managed.BUI_GMOptimizePanel.OnToHFMBtnClicked
// (Native, Public)

void UBUI_GMOptimizePanel::OnToHFMBtnClicked()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BUI_GMOptimizePanel", "OnToHFMBtnClicked");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function b1-Managed.BUI_GMOptimizePanel.OnToHFSBtnClicked
// (Native, Public)

void UBUI_GMOptimizePanel::OnToHFSBtnClicked()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BUI_GMOptimizePanel", "OnToHFSBtnClicked");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function b1-Managed.BUI_GMOptimizePanel.OnRunBtnClicked
// (Native, Public)

void UBUI_GMOptimizePanel::OnRunBtnClicked()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BUI_GMOptimizePanel", "OnRunBtnClicked");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function b1-Managed.BUI_GMRootPanel.OnClickToHatredAndTargetPanel
// (Native, Public)

void UBUI_GMRootPanel::OnClickToHatredAndTargetPanel()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BUI_GMRootPanel", "OnClickToHatredAndTargetPanel");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function b1-Managed.BUI_GMRootPanel.OnClickToCalliopePanel
// (Native, Public)

void UBUI_GMRootPanel::OnClickToCalliopePanel()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BUI_GMRootPanel", "OnClickToCalliopePanel");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function b1-Managed.BUI_GMRootPanel.OnClickToOptimizePanel
// (Native, Public)

void UBUI_GMRootPanel::OnClickToOptimizePanel()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BUI_GMRootPanel", "OnClickToOptimizePanel");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function b1-Managed.BUI_GMRootPanel.OnClickToTeleportPanel
// (Native, Public)

void UBUI_GMRootPanel::OnClickToTeleportPanel()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BUI_GMRootPanel", "OnClickToTeleportPanel");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function b1-Managed.BUI_GMRootPanel.OnClickToDefaultPanel
// (Native, Public)

void UBUI_GMRootPanel::OnClickToDefaultPanel()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BUI_GMRootPanel", "OnClickToDefaultPanel");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function b1-Managed.BUI_GMRootPanel.OnClickToCameraPanel
// (Native, Public)

void UBUI_GMRootPanel::OnClickToCameraPanel()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BUI_GMRootPanel", "OnClickToCameraPanel");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function b1-Managed.BUI_GMRootPanel.OnClickToSkillPanel
// (Native, Public)

void UBUI_GMRootPanel::OnClickToSkillPanel()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BUI_GMRootPanel", "OnClickToSkillPanel");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function b1-Managed.BUI_GMRootPanel.OnClickToDIYPanel
// (Native, Public)

void UBUI_GMRootPanel::OnClickToDIYPanel()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BUI_GMRootPanel", "OnClickToDIYPanel");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function b1-Managed.BUI_GMSkillPanel.OnToggleJYBS
// (Native, Public)
// Parameters:
// uint8                                   IsChecked                                              (Parm, NoDestructor, HasGetValueTypeHash)

void UBUI_GMSkillPanel::OnToggleJYBS(uint8 IsChecked)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BUI_GMSkillPanel", "OnToggleJYBS");

	Params::BUI_GMSkillPanel_OnToggleJYBS Parms{};

	Parms.IsChecked = IsChecked;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function b1-Managed.BUI_GMSkillPanel.OnToggleFTXD
// (Native, Public)
// Parameters:
// uint8                                   IsChecked                                              (Parm, NoDestructor, HasGetValueTypeHash)

void UBUI_GMSkillPanel::OnToggleFTXD(uint8 IsChecked)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BUI_GMSkillPanel", "OnToggleFTXD");

	Params::BUI_GMSkillPanel_OnToggleFTXD Parms{};

	Parms.IsChecked = IsChecked;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function b1-Managed.BUI_GMSkillPanel.OnToggleTTTB
// (Native, Public)
// Parameters:
// uint8                                   IsChecked                                              (Parm, NoDestructor, HasGetValueTypeHash)

void UBUI_GMSkillPanel::OnToggleTTTB(uint8 IsChecked)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BUI_GMSkillPanel", "OnToggleTTTB");

	Params::BUI_GMSkillPanel_OnToggleTTTB Parms{};

	Parms.IsChecked = IsChecked;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function b1-Managed.BUI_GMSkillPanel.OnToggleCCG
// (Native, Public)
// Parameters:
// uint8                                   IsChecked                                              (Parm, NoDestructor, HasGetValueTypeHash)

void UBUI_GMSkillPanel::OnToggleCCG(uint8 IsChecked)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BUI_GMSkillPanel", "OnToggleCCG");

	Params::BUI_GMSkillPanel_OnToggleCCG Parms{};

	Parms.IsChecked = IsChecked;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function b1-Managed.BUI_GMSkillPanel.OnToggleZZG
// (Native, Public)
// Parameters:
// uint8                                   IsChecked                                              (Parm, NoDestructor, HasGetValueTypeHash)

void UBUI_GMSkillPanel::OnToggleZZG(uint8 IsChecked)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BUI_GMSkillPanel", "OnToggleZZG");

	Params::BUI_GMSkillPanel_OnToggleZZG Parms{};

	Parms.IsChecked = IsChecked;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function b1-Managed.BUI_GMSkillPanel.OnToggleJC
// (Native, Public)
// Parameters:
// uint8                                   IsChecked                                              (Parm, NoDestructor, HasGetValueTypeHash)

void UBUI_GMSkillPanel::OnToggleJC(uint8 IsChecked)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BUI_GMSkillPanel", "OnToggleJC");

	Params::BUI_GMSkillPanel_OnToggleJC Parms{};

	Parms.IsChecked = IsChecked;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function b1-Managed.BUI_GMSkillPanel.OnToggleFS
// (Native, Public)
// Parameters:
// uint8                                   IsChecked                                              (Parm, NoDestructor, HasGetValueTypeHash)

void UBUI_GMSkillPanel::OnToggleFS(uint8 IsChecked)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BUI_GMSkillPanel", "OnToggleFS");

	Params::BUI_GMSkillPanel_OnToggleFS Parms{};

	Parms.IsChecked = IsChecked;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function b1-Managed.BUI_GMSkillPanel.OnToggleDS
// (Native, Public)
// Parameters:
// uint8                                   IsChecked                                              (Parm, NoDestructor, HasGetValueTypeHash)

void UBUI_GMSkillPanel::OnToggleDS(uint8 IsChecked)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BUI_GMSkillPanel", "OnToggleDS");

	Params::BUI_GMSkillPanel_OnToggleDS Parms{};

	Parms.IsChecked = IsChecked;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function b1-Managed.BUI_GMUI.OnChangeDoEnableEnemyBar
// (Native, Public, BlueprintCallable)
// Parameters:
// uint8                                   IsChecked                                              (Parm, NoDestructor, HasGetValueTypeHash)

void UBUI_GMUI::OnChangeDoEnableEnemyBar(uint8 IsChecked)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BUI_GMUI", "OnChangeDoEnableEnemyBar");

	Params::BUI_GMUI_OnChangeDoEnableEnemyBar Parms{};

	Parms.IsChecked = IsChecked;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function b1-Managed.BUI_GMUI.OnClickFullBloodBottle
// (Native, Public)

void UBUI_GMUI::OnClickFullBloodBottle()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BUI_GMUI", "OnClickFullBloodBottle");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function b1-Managed.BUI_GMUI.OnClickDoRemoveAllBuff
// (Native, Public)

void UBUI_GMUI::OnClickDoRemoveAllBuff()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BUI_GMUI", "OnClickDoRemoveAllBuff");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function b1-Managed.BUI_GMUI.OnClick999BloodBottle
// (Native, Public)

void UBUI_GMUI::OnClick999BloodBottle()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BUI_GMUI", "OnClick999BloodBottle");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function b1-Managed.BUI_GMUI.OnChangeDoLockEnemyHP
// (Native, Public)
// Parameters:
// uint8                                   IsChecked                                              (Parm, NoDestructor, HasGetValueTypeHash)

void UBUI_GMUI::OnChangeDoLockEnemyHP(uint8 IsChecked)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BUI_GMUI", "OnChangeDoLockEnemyHP");

	Params::BUI_GMUI_OnChangeDoLockEnemyHP Parms{};

	Parms.IsChecked = IsChecked;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function b1-Managed.BUI_GMUI.OnChangeDoLockStamina
// (Native, Public)
// Parameters:
// uint8                                   IsChecked                                              (Parm, NoDestructor, HasGetValueTypeHash)

void UBUI_GMUI::OnChangeDoLockStamina(uint8 IsChecked)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BUI_GMUI", "OnChangeDoLockStamina");

	Params::BUI_GMUI_OnChangeDoLockStamina Parms{};

	Parms.IsChecked = IsChecked;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function b1-Managed.BUI_GMUI.OnChangeDoInvincible
// (Native, Public)
// Parameters:
// uint8                                   IsChecked                                              (Parm, NoDestructor, HasGetValueTypeHash)

void UBUI_GMUI::OnChangeDoInvincible(uint8 IsChecked)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BUI_GMUI", "OnChangeDoInvincible");

	Params::BUI_GMUI_OnChangeDoInvincible Parms{};

	Parms.IsChecked = IsChecked;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function b1-Managed.BUI_GMUI.OnClickDoAddBuff100
// (Native, Public)

void UBUI_GMUI::OnClickDoAddBuff100()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BUI_GMUI", "OnClickDoAddBuff100");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function b1-Managed.BUI_GMUI.OnClickKillAllEnemy
// (Native, Public)

void UBUI_GMUI::OnClickKillAllEnemy()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BUI_GMUI", "OnClickKillAllEnemy");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function b1-Managed.BUI_GMUI.OnClickDoInvincible
// (Native, Public)

void UBUI_GMUI::OnClickDoInvincible()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BUI_GMUI", "OnClickDoInvincible");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function b1-Managed.BUI_GMUI.OnClickDoSetConfigs
// (Native, Public)

void UBUI_GMUI::OnClickDoSetConfigs()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BUI_GMUI", "OnClickDoSetConfigs");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function b1-Managed.BUI_GMUI.OnCancelAllEnemyCD
// (Native, Public)
// Parameters:
// uint8                                   bCancel                                                (Parm, NoDestructor, HasGetValueTypeHash)

void UBUI_GMUI::OnCancelAllEnemyCD(uint8 bCancel)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BUI_GMUI", "OnCancelAllEnemyCD");

	Params::BUI_GMUI_OnCancelAllEnemyCD Parms{};

	Parms.bCancel = bCancel;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function b1-Managed.BUI_GMUI.OnToggleAllEnemyAI
// (Native, Public)
// Parameters:
// uint8                                   IsChecked                                              (Parm, NoDestructor, HasGetValueTypeHash)

void UBUI_GMUI::OnToggleAllEnemyAI(uint8 IsChecked)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BUI_GMUI", "OnToggleAllEnemyAI");

	Params::BUI_GMUI_OnToggleAllEnemyAI Parms{};

	Parms.IsChecked = IsChecked;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function b1-Managed.BUI_GMUI.OnChangeDoToggleUI
// (Native, Public)
// Parameters:
// uint8                                   IsChecked                                              (Parm, NoDestructor, HasGetValueTypeHash)

void UBUI_GMUI::OnChangeDoToggleUI(uint8 IsChecked)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BUI_GMUI", "OnChangeDoToggleUI");

	Params::BUI_GMUI_OnChangeDoToggleUI Parms{};

	Parms.IsChecked = IsChecked;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function b1-Managed.BUI_GMUI.OnChangeDoLockHP2
// (Native, Public)
// Parameters:
// uint8                                   IsChecked                                              (Parm, NoDestructor, HasGetValueTypeHash)

void UBUI_GMUI::OnChangeDoLockHP2(uint8 IsChecked)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BUI_GMUI", "OnChangeDoLockHP2");

	Params::BUI_GMUI_OnChangeDoLockHP2 Parms{};

	Parms.IsChecked = IsChecked;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function b1-Managed.BUI_GMUI.OnClickDoLockHP
// (Native, Public)

void UBUI_GMUI::OnClickDoLockHP()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BUI_GMUI", "OnClickDoLockHP");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function b1-Managed.BUI_GMUI.OnClickDoFullMP
// (Native, Public)

void UBUI_GMUI::OnClickDoFullMP()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BUI_GMUI", "OnClickDoFullMP");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function b1-Managed.BUI_GMUI.OnClickDoFullHP
// (Native, Public)

void UBUI_GMUI::OnClickDoFullHP()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BUI_GMUI", "OnClickDoFullHP");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function b1-Managed.BUI_GMUI.OnSetInvisible
// (Native, Public)
// Parameters:
// uint8                                   IsChecked                                              (Parm, NoDestructor, HasGetValueTypeHash)

void UBUI_GMUI::OnSetInvisible(uint8 IsChecked)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BUI_GMUI", "OnSetInvisible");

	Params::BUI_GMUI_OnSetInvisible Parms{};

	Parms.IsChecked = IsChecked;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function b1-Managed.BUI_GM_AIRootPanel.OnSwitchButtonPress
// (Native, Public, Private)

void UBUI_GM_AIRootPanel::OnSwitchButtonPress()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BUI_GM_AIRootPanel", "OnSwitchButtonPress");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function b1-Managed.UI_CSharpBasic.OnClickClose
// (Native, Public, Private)

void UUI_CSharpBasic::OnClickClose()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("UI_CSharpBasic", "OnClickClose");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function b1-Managed.BUI_GM_CalliopePanel.RefreshInstanceListWithFilter
// (Native, Public, HasOutParams, BlueprintCallable)
// Parameters:
// class FString                           InFilterStr                                            (Parm, ZeroConstructor, HasGetValueTypeHash)
// TArray<class FName>                     Instances                                              (Parm, OutParm)

void UBUI_GM_CalliopePanel::RefreshInstanceListWithFilter(const class FString& InFilterStr, TArray<class FName>* Instances)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BUI_GM_CalliopePanel", "RefreshInstanceListWithFilter");

	Params::BUI_GM_CalliopePanel_RefreshInstanceListWithFilter Parms{};

	Parms.InFilterStr = std::move(InFilterStr);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	if (Instances != nullptr)
		*Instances = std::move(Parms.Instances);
}


// Function b1-Managed.BUI_GM_CalliopePanel.GetInstanceDebugInfo
// (Native, Public, HasOutParams, BlueprintCallable)
// Parameters:
// class FName                             InInstanceName                                         (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// class FString                           ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash)

class FString UBUI_GM_CalliopePanel::GetInstanceDebugInfo(class FName InInstanceName)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BUI_GM_CalliopePanel", "GetInstanceDebugInfo");

	Params::BUI_GM_CalliopePanel_GetInstanceDebugInfo Parms{};

	Parms.InInstanceName = InInstanceName;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function b1-Managed.BUI_GM_HatredAndTargetPanel.RefreshInstanceListWithFilterRadius
// (Native, Public, Private, HasOutParams, BlueprintCallable)
// Parameters:
// class FString                           _FilterRadius                                          (Parm, ZeroConstructor, HasGetValueTypeHash)
// TArray<class FName>                     Instances                                              (Parm, OutParm)
// TArray<class AActor*>                   Units                                                  (Parm, OutParm)

void UBUI_GM_HatredAndTargetPanel::RefreshInstanceListWithFilterRadius(const class FString& _FilterRadius, TArray<class FName>* Instances, TArray<class AActor*>* Units)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BUI_GM_HatredAndTargetPanel", "RefreshInstanceListWithFilterRadius");

	Params::BUI_GM_HatredAndTargetPanel_RefreshInstanceListWithFilterRadius Parms{};

	Parms._FilterRadius = std::move(_FilterRadius);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	if (Instances != nullptr)
		*Instances = std::move(Parms.Instances);

	if (Units != nullptr)
		*Units = std::move(Parms.Units);
}


// Function b1-Managed.BUI_GM_HatredAndTargetPanel.SetNeedShowDebugTargetInfos
// (Native, Public, Private, BlueprintCallable)
// Parameters:
// class AActor*                           Target                                                 (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// int32                                   Value                                                  (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UBUI_GM_HatredAndTargetPanel::SetNeedShowDebugTargetInfos(class AActor* Target, int32 Value)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BUI_GM_HatredAndTargetPanel", "SetNeedShowDebugTargetInfos");

	Params::BUI_GM_HatredAndTargetPanel_SetNeedShowDebugTargetInfos Parms{};

	Parms.Target = Target;
	Parms.Value = Value;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function b1-Managed.BUI_GM_HatredAndTargetPanel.GetDebugTargetInfo
// (Native, Public, Private, HasOutParams, BlueprintCallable)
// Parameters:
// class AActor*                           Target                                                 (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// int32                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

int32 UBUI_GM_HatredAndTargetPanel::GetDebugTargetInfo(class AActor* Target)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BUI_GM_HatredAndTargetPanel", "GetDebugTargetInfo");

	Params::BUI_GM_HatredAndTargetPanel_GetDebugTargetInfo Parms{};

	Parms.Target = Target;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function b1-Managed.BUI_GM_HatredAndTargetPanel.CleanTargetInfos
// (Native, Public, Private, BlueprintCallable)

void UBUI_GM_HatredAndTargetPanel::CleanTargetInfos()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BUI_GM_HatredAndTargetPanel", "CleanTargetInfos");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function b1-Managed.BUI_DependWidget.TryUpdateDependPos
// (Native, Public, BlueprintCallable)

void UBUI_DependWidget::TryUpdateDependPos()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BUI_DependWidget", "TryUpdateDependPos");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function b1-Managed.BUI_LoopWidget.SetActiveLoop
// (Native, Public, BlueprintCallable)
// Parameters:
// uint8                                   InActiveLoop                                           (Parm, NoDestructor, HasGetValueTypeHash)

void UBUI_LoopWidget::SetActiveLoop(uint8 InActiveLoop)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BUI_LoopWidget", "SetActiveLoop");

	Params::BUI_LoopWidget_SetActiveLoop Parms{};

	Parms.InActiveLoop = InActiveLoop;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function b1-Managed.BUI_LoopWidget.GetActiveLoop
// (Native, Public, HasOutParams, BlueprintCallable)
// Parameters:
// uint8                                   ReturnValue                                            (Parm, OutParm, ReturnParm, NoDestructor, HasGetValueTypeHash)

uint8 UBUI_LoopWidget::GetActiveLoop()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BUI_LoopWidget", "GetActiveLoop");

	Params::BUI_LoopWidget_GetActiveLoop Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function b1-Managed.BUI_LoopWidget.Reset
// (Native, Public, HasOutParams, BlueprintCallable)
// Parameters:
// uint8                                   ReturnValue                                            (Parm, OutParm, ReturnParm, NoDestructor, HasGetValueTypeHash)

uint8 UBUI_LoopWidget::Reset()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BUI_LoopWidget", "Reset");

	Params::BUI_LoopWidget_Reset Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function b1-Managed.BUI_RoundRectDemoOne.UpdatePosRefWorldPos
// (Native, Public, BlueprintCallable)
// Parameters:
// class UWidget*                          TargetWidget                                           (ExportObject, Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// struct FVector                          WorldPos                                               (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UBUI_RoundRectDemoOne::UpdatePosRefWorldPos(class UWidget* TargetWidget, const struct FVector& WorldPos)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BUI_RoundRectDemoOne", "UpdatePosRefWorldPos");

	Params::BUI_RoundRectDemoOne_UpdatePosRefWorldPos Parms{};

	Parms.TargetWidget = TargetWidget;
	Parms.WorldPos = std::move(WorldPos);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function b1-Managed.BUI_RoundRectDemoOne.UpdateShow
// (Native, Public, BlueprintCallable)
// Parameters:
// float                                   InDeltaTime                                            (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UBUI_RoundRectDemoOne::UpdateShow(float InDeltaTime)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BUI_RoundRectDemoOne", "UpdateShow");

	Params::BUI_RoundRectDemoOne_UpdateShow Parms{};

	Parms.InDeltaTime = InDeltaTime;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function b1-Managed.BUI_MSimNum.OnShowAnimFinished
// (Native, Public, Private)

void UBUI_MSimNum::OnShowAnimFinished()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BUI_MSimNum", "OnShowAnimFinished");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function b1-Managed.BUI_BarCSharp.PlayUninterruptBarAnimation
// (Native, Public, Private)

void UBUI_BarCSharp::PlayUninterruptBarAnimation()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BUI_BarCSharp", "PlayUninterruptBarAnimation");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function b1-Managed.BUI_BarCSharp.UpdateBarWithCurLength
// (Native, Public, Private)
// Parameters:
// class UNamedSlot*                       InBarSlot                                              (ExportObject, Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UBUI_BarCSharp::UpdateBarWithCurLength(class UNamedSlot* InBarSlot)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BUI_BarCSharp", "UpdateBarWithCurLength");

	Params::BUI_BarCSharp_UpdateBarWithCurLength Parms{};

	Parms.InBarSlot = InBarSlot;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function b1-Managed.BUI_BarCSharp.InitSetCurAndMaxValue
// (Native, Public, BlueprintCallable)
// Parameters:
// float                                   InMaxValue                                             (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// float                                   InCurValue                                             (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// uint8                                   InIsReCalcMaxLen                                       (Parm, NoDestructor, HasGetValueTypeHash)

void UBUI_BarCSharp::InitSetCurAndMaxValue(float InMaxValue, float InCurValue, uint8 InIsReCalcMaxLen)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BUI_BarCSharp", "InitSetCurAndMaxValue");

	Params::BUI_BarCSharp_InitSetCurAndMaxValue Parms{};

	Parms.InMaxValue = InMaxValue;
	Parms.InCurValue = InCurValue;
	Parms.InIsReCalcMaxLen = InIsReCalcMaxLen;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function b1-Managed.BUI_BarCSharp.CalcBarLengthByValue
// (Native, Public, Private, HasOutParams)
// Parameters:
// float                                   InValue                                                (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// float                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

float UBUI_BarCSharp::CalcBarLengthByValue(float InValue)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BUI_BarCSharp", "CalcBarLengthByValue");

	Params::BUI_BarCSharp_CalcBarLengthByValue Parms{};

	Parms.InValue = InValue;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function b1-Managed.BUI_BarCSharp.UninterruptDecrease
// (Native, Public, Private)
// Parameters:
// float                                   DecreaseValueIn                                        (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UBUI_BarCSharp::UninterruptDecrease(float DecreaseValueIn)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BUI_BarCSharp", "UninterruptDecrease");

	Params::BUI_BarCSharp_UninterruptDecrease Parms{};

	Parms.DecreaseValueIn = DecreaseValueIn;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function b1-Managed.BUI_BarCSharp.UpdateCurMaxValue
// (Native, Public, Private)
// Parameters:
// float                                   InValue                                                (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UBUI_BarCSharp::UpdateCurMaxValue(float InValue)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BUI_BarCSharp", "UpdateCurMaxValue");

	Params::BUI_BarCSharp_UpdateCurMaxValue Parms{};

	Parms.InValue = InValue;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function b1-Managed.BUI_BarCSharp.UpdateBarByLength
// (Native, Public, Private)
// Parameters:
// class UWidget*                          InBarWidget                                            (ExportObject, Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// float                                   InBarLength                                            (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UBUI_BarCSharp::UpdateBarByLength(class UWidget* InBarWidget, float InBarLength)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BUI_BarCSharp", "UpdateBarByLength");

	Params::BUI_BarCSharp_UpdateBarByLength Parms{};

	Parms.InBarWidget = InBarWidget;
	Parms.InBarLength = InBarLength;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function b1-Managed.BUI_BarCSharp.UpdateBarByValue
// (Native, Public, Private)
// Parameters:
// class UNamedSlot*                       InBarSlot                                              (ExportObject, Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// float                                   InValue                                                (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UBUI_BarCSharp::UpdateBarByValue(class UNamedSlot* InBarSlot, float InValue)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BUI_BarCSharp", "UpdateBarByValue");

	Params::BUI_BarCSharp_UpdateBarByValue Parms{};

	Parms.InBarSlot = InBarSlot;
	Parms.InValue = InValue;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function b1-Managed.BUI_BarCSharp.CalcCurBarLength
// (Native, Public, Private, HasOutParams)
// Parameters:
// float                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

float UBUI_BarCSharp::CalcCurBarLength()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BUI_BarCSharp", "CalcCurBarLength");

	Params::BUI_BarCSharp_CalcCurBarLength Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function b1-Managed.BUI_BarCSharp.BarChangeValue
// (Native, Public, BlueprintCallable)
// Parameters:
// float                                   ChangeValue                                            (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UBUI_BarCSharp::BarChangeValue(float ChangeValue)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BUI_BarCSharp", "BarChangeValue");

	Params::BUI_BarCSharp_BarChangeValue Parms{};

	Parms.ChangeValue = ChangeValue;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function b1-Managed.BUI_BarCSharp.ChangeMaxValue
// (Native, Public, BlueprintCallable)
// Parameters:
// float                                   InValue                                                (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UBUI_BarCSharp::ChangeMaxValue(float InValue)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BUI_BarCSharp", "ChangeMaxValue");

	Params::BUI_BarCSharp_ChangeMaxValue Parms{};

	Parms.InValue = InValue;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function b1-Managed.BUI_BarCSharp.ValueIncrease
// (Native, Public, BlueprintCallable)
// Parameters:
// float                                   IncreaseValueIn                                        (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UBUI_BarCSharp::ValueIncrease(float IncreaseValueIn)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BUI_BarCSharp", "ValueIncrease");

	Params::BUI_BarCSharp_ValueIncrease Parms{};

	Parms.IncreaseValueIn = IncreaseValueIn;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function b1-Managed.BUI_BarCSharp.ValueDecrease
// (Native, Public, BlueprintCallable)
// Parameters:
// float                                   DecreaseValueIn                                        (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UBUI_BarCSharp::ValueDecrease(float DecreaseValueIn)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BUI_BarCSharp", "ValueDecrease");

	Params::BUI_BarCSharp_ValueDecrease Parms{};

	Parms.DecreaseValueIn = DecreaseValueIn;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function b1-Managed.BUI_BarFloat.OnAnimationFinished
// (Native, Public, Private)

void UBUI_BarFloat::OnAnimationFinished()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BUI_BarFloat", "OnAnimationFinished");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function b1-Managed.BUI_EnemyBar.GSInit
// (Native, Public, BlueprintCallable)
// Parameters:
// class AActor*                           InOwnerCharacter                                       (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UBUI_EnemyBar::GSInit(class AActor* InOwnerCharacter)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BUI_EnemyBar", "GSInit");

	Params::BUI_EnemyBar_GSInit Parms{};

	Parms.InOwnerCharacter = InOwnerCharacter;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function b1-Managed.AutoTest_UnitPicTaker.GetUnitsInFolder
// (Native, Public, BlueprintCallable)

void UAutoTest_UnitPicTaker::GetUnitsInFolder()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("AutoTest_UnitPicTaker", "GetUnitsInFolder");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function b1-Managed.AutoTest_DingShenEffectCheckTool.GetTamersInFolder
// (Native, Public, BlueprintCallable)

void UAutoTest_DingShenEffectCheckTool::GetTamersInFolder()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("AutoTest_DingShenEffectCheckTool", "GetTamersInFolder");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function b1-Managed.AutoTest_UnitCastAllSkill.GetTamersInFolder
// (Native, Public, BlueprintCallable)

void UAutoTest_UnitCastAllSkill::GetTamersInFolder()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("AutoTest_UnitCastAllSkill", "GetTamersInFolder");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function b1-Managed.AutoTest_BattleWithUnit.GetTamersInFolder
// (Native, Public, BlueprintCallable)

void UAutoTest_BattleWithUnit::GetTamersInFolder()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("AutoTest_BattleWithUnit", "GetTamersInFolder");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}

}

