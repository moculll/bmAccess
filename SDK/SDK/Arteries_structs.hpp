#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: Arteries

#include "Basic.hpp"

#include "CoreUObject_structs.hpp"


namespace SDK
{

// Enum Arteries.EArteriesGroupType
// NumValues: 0x0004
enum class EArteriesGroupType : uint8
{
	Point                                    = 0,
	Primitive                                = 1,
	Object                                   = 2,
	EArteriesGroupType_MAX                   = 3,
};

// Enum Arteries.EArteriesAlignType
// NumValues: 0x0004
enum class EArteriesAlignType : uint8
{
	Start                                    = 0,
	Center                                   = 1,
	End                                      = 2,
	EArteriesAlignType_MAX                   = 3,
};

// Enum Arteries.EArteriesTangentOutputType
// NumValues: 0x0004
enum class EArteriesTangentOutputType : uint8
{
	None                                     = 0,
	Flatten                                  = 1,
	Normal                                   = 2,
	EArteriesTangentOutputType_MAX           = 3,
};

// ScriptStruct Arteries.ArteriesElement
// 0x0198 (0x0198 - 0x0000)
struct FArteriesElement
{
public:
	uint8                                         Pad_0[0x8];                                        // 0x0000(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	TMap<class FName, int32>                      IntValues;                                         // 0x0008(0x0050)(Edit, NativeAccessSpecifierPublic)
	TMap<class FName, float>                      FloatValues;                                       // 0x0058(0x0050)(Edit, NativeAccessSpecifierPublic)
	TMap<class FName, struct FVector2D>           Vec2Values;                                        // 0x00A8(0x0050)(Edit, NativeAccessSpecifierPublic)
	TMap<class FName, struct FVector>             Vec3Values;                                        // 0x00F8(0x0050)(Edit, NativeAccessSpecifierPublic)
	TMap<class FName, class FString>              StrValues;                                         // 0x0148(0x0050)(Edit, NativeAccessSpecifierPublic)
};
//static_assert(alignof(FArteriesElement) == 0x000008, "Wrong alignment on FArteriesElement");
//static_assert(sizeof(FArteriesElement) == 0x000198, "Wrong size on FArteriesElement");
//static_assert(offsetof(FArteriesElement, IntValues) == 0x000008, "Member 'FArteriesElement::IntValues' has a wrong offset!");
//static_assert(offsetof(FArteriesElement, FloatValues) == 0x000058, "Member 'FArteriesElement::FloatValues' has a wrong offset!");
//static_assert(offsetof(FArteriesElement, Vec2Values) == 0x0000A8, "Member 'FArteriesElement::Vec2Values' has a wrong offset!");
//static_assert(offsetof(FArteriesElement, Vec3Values) == 0x0000F8, "Member 'FArteriesElement::Vec3Values' has a wrong offset!");
//static_assert(offsetof(FArteriesElement, StrValues) == 0x000148, "Member 'FArteriesElement::StrValues' has a wrong offset!");

// ScriptStruct Arteries.ArteriesGroup
// 0x0010 (0x0010 - 0x0000)
struct FArteriesGroup
{
public:
	TArray<int32>                                 IDs;                                               // 0x0000(0x0010)(Edit, ZeroConstructor, NativeAccessSpecifierPublic)
};
//static_assert(alignof(FArteriesGroup) == 0x000008, "Wrong alignment on FArteriesGroup");
//static_assert(sizeof(FArteriesGroup) == 0x000010, "Wrong size on FArteriesGroup");
//static_assert(offsetof(FArteriesGroup, IDs) == 0x000000, "Member 'FArteriesGroup::IDs' has a wrong offset!");

// ScriptStruct Arteries.ArteriesPointGroup
// 0x0010 (0x0020 - 0x0010)
struct FArteriesPointGroup final : public FArteriesGroup
{
public:
	uint8                                         Pad_10[0x10];                                      // 0x0010(0x0010)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
//static_assert(alignof(FArteriesPointGroup) == 0x000008, "Wrong alignment on FArteriesPointGroup");
//static_assert(sizeof(FArteriesPointGroup) == 0x000020, "Wrong size on FArteriesPointGroup");

// ScriptStruct Arteries.ArteriesPrimitiveGroup
// 0x0010 (0x0020 - 0x0010)
struct FArteriesPrimitiveGroup final : public FArteriesGroup
{
public:
	uint8                                         Pad_10[0x10];                                      // 0x0010(0x0010)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
//static_assert(alignof(FArteriesPrimitiveGroup) == 0x000008, "Wrong alignment on FArteriesPrimitiveGroup");
//static_assert(sizeof(FArteriesPrimitiveGroup) == 0x000020, "Wrong size on FArteriesPrimitiveGroup");

// ScriptStruct Arteries.ArteriesEdgeGroup
// 0x0020 (0x0020 - 0x0000)
struct FArteriesEdgeGroup final
{
public:
	TArray<struct FIntPoint>                      IDs;                                               // 0x0000(0x0010)(Edit, ZeroConstructor, NativeAccessSpecifierPublic)
	uint8                                         Pad_10[0x10];                                      // 0x0010(0x0010)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
//static_assert(alignof(FArteriesEdgeGroup) == 0x000008, "Wrong alignment on FArteriesEdgeGroup");
//static_assert(sizeof(FArteriesEdgeGroup) == 0x000020, "Wrong size on FArteriesEdgeGroup");
//static_assert(offsetof(FArteriesEdgeGroup, IDs) == 0x000000, "Member 'FArteriesEdgeGroup::IDs' has a wrong offset!");

// ScriptStruct Arteries.ArteriesGroupRange
// 0x001C (0x001C - 0x0000)
struct FArteriesGroupRange final
{
public:
	class FName                                   Name;                                              // 0x0000(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Start;                                             // 0x0008(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         End;                                               // 0x000C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Select;                                            // 0x0010(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Of;                                                // 0x0014(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Offset;                                            // 0x0018(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
//static_assert(alignof(FArteriesGroupRange) == 0x000004, "Wrong alignment on FArteriesGroupRange");
//static_assert(sizeof(FArteriesGroupRange) == 0x00001C, "Wrong size on FArteriesGroupRange");
//static_assert(offsetof(FArteriesGroupRange, Name) == 0x000000, "Member 'FArteriesGroupRange::Name' has a wrong offset!");
//static_assert(offsetof(FArteriesGroupRange, Start) == 0x000008, "Member 'FArteriesGroupRange::Start' has a wrong offset!");
//static_assert(offsetof(FArteriesGroupRange, End) == 0x00000C, "Member 'FArteriesGroupRange::End' has a wrong offset!");
//static_assert(offsetof(FArteriesGroupRange, Select) == 0x000010, "Member 'FArteriesGroupRange::Select' has a wrong offset!");
//static_assert(offsetof(FArteriesGroupRange, Of) == 0x000014, "Member 'FArteriesGroupRange::Of' has a wrong offset!");
//static_assert(offsetof(FArteriesGroupRange, Offset) == 0x000018, "Member 'FArteriesGroupRange::Offset' has a wrong offset!");

// ScriptStruct Arteries.ArteriesInstances
// 0x0010 (0x0010 - 0x0000)
struct FArteriesInstances final
{
public:
	TArray<struct FTransform>                     Transforms;                                        // 0x0000(0x0010)(Edit, ZeroConstructor, NativeAccessSpecifierPublic)
};
//static_assert(alignof(FArteriesInstances) == 0x000008, "Wrong alignment on FArteriesInstances");
//static_assert(sizeof(FArteriesInstances) == 0x000010, "Wrong size on FArteriesInstances");
//static_assert(offsetof(FArteriesInstances, Transforms) == 0x000000, "Member 'FArteriesInstances::Transforms' has a wrong offset!");

// ScriptStruct Arteries.ArteriesPoint
// 0x0028 (0x01C0 - 0x0198)
struct FArteriesPoint final : public FArteriesElement
{
public:
	struct FVector                                Position;                                          // 0x0198(0x0018)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1B0[0x10];                                     // 0x01B0(0x0010)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
//static_assert(alignof(FArteriesPoint) == 0x000008, "Wrong alignment on FArteriesPoint");
//static_assert(sizeof(FArteriesPoint) == 0x0001C0, "Wrong size on FArteriesPoint");
//static_assert(offsetof(FArteriesPoint, Position) == 0x000198, "Member 'FArteriesPoint::Position' has a wrong offset!");

// ScriptStruct Arteries.ArteriesPrimitive
// 0x0028 (0x01C0 - 0x0198)
struct FArteriesPrimitive final : public FArteriesElement
{
public:
	class UMaterialInterface*                     Material;                                          // 0x0198(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         bClosed : 1;                                       // 0x01A0(0x0001)(BitIndex: 0x00, PropSize: 0x0001 (Edit, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         Pad_1A1[0x1F];                                     // 0x01A1(0x001F)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
//static_assert(alignof(FArteriesPrimitive) == 0x000008, "Wrong alignment on FArteriesPrimitive");
//static_assert(sizeof(FArteriesPrimitive) == 0x0001C0, "Wrong size on FArteriesPrimitive");
//static_assert(offsetof(FArteriesPrimitive, Material) == 0x000198, "Member 'FArteriesPrimitive::Material' has a wrong offset!");

}

