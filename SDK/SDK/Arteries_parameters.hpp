#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: Arteries

#include "Basic.hpp"

#include "CoreUObject_structs.hpp"
#include "Arteries_structs.hpp"


namespace SDK::Params
{

// Function Arteries.ArteriesLibrary.BeginDeferredActorSpawnFromClass
// 0x0080 (0x0080 - 0x0000)
struct ArteriesLibrary_BeginDeferredActorSpawnFromClass final
{
public:
	const class UObject*                          WorldContextObject;                                // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TSubclassOf<class AArteriesActor>             ActorClass;                                        // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FTransform                             SpawnTransform;                                    // 0x0010(0x0060)(ConstParm, Parm, OutParm, ReferenceParm, IsPlainOldData, NoDestructor, AdvancedDisplay, NativeAccessSpecifierPublic)
	class AArteriesActor*                         ReturnValue;                                       // 0x0070(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_78[0x8];                                       // 0x0078(0x0008)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
//static_assert(alignof(ArteriesLibrary_BeginDeferredActorSpawnFromClass) == 0x000010, "Wrong alignment on ArteriesLibrary_BeginDeferredActorSpawnFromClass");
//static_assert(sizeof(ArteriesLibrary_BeginDeferredActorSpawnFromClass) == 0x000080, "Wrong size on ArteriesLibrary_BeginDeferredActorSpawnFromClass");
//static_assert(offsetof(ArteriesLibrary_BeginDeferredActorSpawnFromClass, WorldContextObject) == 0x000000, "Member 'ArteriesLibrary_BeginDeferredActorSpawnFromClass::WorldContextObject' has a wrong offset!");
//static_assert(offsetof(ArteriesLibrary_BeginDeferredActorSpawnFromClass, ActorClass) == 0x000008, "Member 'ArteriesLibrary_BeginDeferredActorSpawnFromClass::ActorClass' has a wrong offset!");
//static_assert(offsetof(ArteriesLibrary_BeginDeferredActorSpawnFromClass, SpawnTransform) == 0x000010, "Member 'ArteriesLibrary_BeginDeferredActorSpawnFromClass::SpawnTransform' has a wrong offset!");
//static_assert(offsetof(ArteriesLibrary_BeginDeferredActorSpawnFromClass, ReturnValue) == 0x000070, "Member 'ArteriesLibrary_BeginDeferredActorSpawnFromClass::ReturnValue' has a wrong offset!");

// Function Arteries.ArteriesLibrary.FinishSpawningActor
// 0x0018 (0x0018 - 0x0000)
struct ArteriesLibrary_FinishSpawningActor final
{
public:
	class AArteriesActor*                         Actor;                                             // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          AttachToCaller;                                    // 0x0008(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class AArteriesActor*                         ReturnValue;                                       // 0x0010(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
//static_assert(alignof(ArteriesLibrary_FinishSpawningActor) == 0x000008, "Wrong alignment on ArteriesLibrary_FinishSpawningActor");
//static_assert(sizeof(ArteriesLibrary_FinishSpawningActor) == 0x000018, "Wrong size on ArteriesLibrary_FinishSpawningActor");
//static_assert(offsetof(ArteriesLibrary_FinishSpawningActor, Actor) == 0x000000, "Member 'ArteriesLibrary_FinishSpawningActor::Actor' has a wrong offset!");
//static_assert(offsetof(ArteriesLibrary_FinishSpawningActor, AttachToCaller) == 0x000008, "Member 'ArteriesLibrary_FinishSpawningActor::AttachToCaller' has a wrong offset!");
//static_assert(offsetof(ArteriesLibrary_FinishSpawningActor, ReturnValue) == 0x000010, "Member 'ArteriesLibrary_FinishSpawningActor::ReturnValue' has a wrong offset!");

// Function Arteries.ArteriesActor.Build
// 0x0001 (0x0001 - 0x0000)
struct ArteriesActor_Build final
{
public:
	bool                                          bForceRebuild;                                     // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
//static_assert(alignof(ArteriesActor_Build) == 0x000001, "Wrong alignment on ArteriesActor_Build");
//static_assert(sizeof(ArteriesActor_Build) == 0x000001, "Wrong size on ArteriesActor_Build");
//static_assert(offsetof(ArteriesActor_Build, bForceRebuild) == 0x000000, "Member 'ArteriesActor_Build::bForceRebuild' has a wrong offset!");

// Function Arteries.ArteriesActor.Increment
// 0x0008 (0x0008 - 0x0000)
struct ArteriesActor_Increment final
{
public:
	class FName                                   GroupName;                                         // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
//static_assert(alignof(ArteriesActor_Increment) == 0x000004, "Wrong alignment on ArteriesActor_Increment");
//static_assert(sizeof(ArteriesActor_Increment) == 0x000008, "Wrong size on ArteriesActor_Increment");
//static_assert(offsetof(ArteriesActor_Increment, GroupName) == 0x000000, "Member 'ArteriesActor_Increment::GroupName' has a wrong offset!");

// DelegateFunction Arteries.ArteriesActor.OnBuildCompleted__DelegateSignature
// 0x0070 (0x0070 - 0x0000)
struct ArteriesActor_OnBuildCompleted__DelegateSignature final
{
public:
	class UArteriesObject*                        Object;                                            // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_8[0x8];                                        // 0x0008(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	struct FTransform                             Transform;                                         // 0x0010(0x0060)(Parm, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
};
//static_assert(alignof(ArteriesActor_OnBuildCompleted__DelegateSignature) == 0x000010, "Wrong alignment on ArteriesActor_OnBuildCompleted__DelegateSignature");
//static_assert(sizeof(ArteriesActor_OnBuildCompleted__DelegateSignature) == 0x000070, "Wrong size on ArteriesActor_OnBuildCompleted__DelegateSignature");
//static_assert(offsetof(ArteriesActor_OnBuildCompleted__DelegateSignature, Object) == 0x000000, "Member 'ArteriesActor_OnBuildCompleted__DelegateSignature::Object' has a wrong offset!");
//static_assert(offsetof(ArteriesActor_OnBuildCompleted__DelegateSignature, Transform) == 0x000010, "Member 'ArteriesActor_OnBuildCompleted__DelegateSignature::Transform' has a wrong offset!");

// Function Arteries.ArteriesActor.WaitForCount
// 0x0010 (0x0010 - 0x0000)
struct ArteriesActor_WaitForCount final
{
public:
	class FName                                   GroupName;                                         // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Count;                                             // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Timeout;                                           // 0x000C(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
//static_assert(alignof(ArteriesActor_WaitForCount) == 0x000004, "Wrong alignment on ArteriesActor_WaitForCount");
//static_assert(sizeof(ArteriesActor_WaitForCount) == 0x000010, "Wrong size on ArteriesActor_WaitForCount");
//static_assert(offsetof(ArteriesActor_WaitForCount, GroupName) == 0x000000, "Member 'ArteriesActor_WaitForCount::GroupName' has a wrong offset!");
//static_assert(offsetof(ArteriesActor_WaitForCount, Count) == 0x000008, "Member 'ArteriesActor_WaitForCount::Count' has a wrong offset!");
//static_assert(offsetof(ArteriesActor_WaitForCount, Timeout) == 0x00000C, "Member 'ArteriesActor_WaitForCount::Timeout' has a wrong offset!");

// Function Arteries.ArteriesObject.Box
// 0x0060 (0x0060 - 0x0000)
struct ArteriesObject_Box final
{
public:
	struct FVector                                Origin;                                            // 0x0000(0x0018)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FRotator                               Rotation;                                          // 0x0018(0x0018)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, NativeAccessSpecifierPublic)
	struct FVector                                Size;                                              // 0x0030(0x0018)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         NumPointsX;                                        // 0x0048(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         NumPointsY;                                        // 0x004C(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         NumPointsZ;                                        // 0x0050(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_54[0x4];                                       // 0x0054(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UArteriesObject*                        ReturnValue;                                       // 0x0058(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
//static_assert(alignof(ArteriesObject_Box) == 0x000008, "Wrong alignment on ArteriesObject_Box");
//static_assert(sizeof(ArteriesObject_Box) == 0x000060, "Wrong size on ArteriesObject_Box");
//static_assert(offsetof(ArteriesObject_Box, Origin) == 0x000000, "Member 'ArteriesObject_Box::Origin' has a wrong offset!");
//static_assert(offsetof(ArteriesObject_Box, Rotation) == 0x000018, "Member 'ArteriesObject_Box::Rotation' has a wrong offset!");
//static_assert(offsetof(ArteriesObject_Box, Size) == 0x000030, "Member 'ArteriesObject_Box::Size' has a wrong offset!");
//static_assert(offsetof(ArteriesObject_Box, NumPointsX) == 0x000048, "Member 'ArteriesObject_Box::NumPointsX' has a wrong offset!");
//static_assert(offsetof(ArteriesObject_Box, NumPointsY) == 0x00004C, "Member 'ArteriesObject_Box::NumPointsY' has a wrong offset!");
//static_assert(offsetof(ArteriesObject_Box, NumPointsZ) == 0x000050, "Member 'ArteriesObject_Box::NumPointsZ' has a wrong offset!");
//static_assert(offsetof(ArteriesObject_Box, ReturnValue) == 0x000058, "Member 'ArteriesObject_Box::ReturnValue' has a wrong offset!");

// Function Arteries.ArteriesObject.Circle
// 0x0050 (0x0050 - 0x0000)
struct ArteriesObject_Circle final
{
public:
	struct FVector                                Origin;                                            // 0x0000(0x0018)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FRotator                               Rotation;                                          // 0x0018(0x0018)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, NativeAccessSpecifierPublic)
	struct FVector2D                              Radius;                                            // 0x0030(0x0010)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         NumPoints_0;                                       // 0x0040(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_44[0x4];                                       // 0x0044(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UArteriesObject*                        ReturnValue;                                       // 0x0048(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
//static_assert(alignof(ArteriesObject_Circle) == 0x000008, "Wrong alignment on ArteriesObject_Circle");
//static_assert(sizeof(ArteriesObject_Circle) == 0x000050, "Wrong size on ArteriesObject_Circle");
//static_assert(offsetof(ArteriesObject_Circle, Origin) == 0x000000, "Member 'ArteriesObject_Circle::Origin' has a wrong offset!");
//static_assert(offsetof(ArteriesObject_Circle, Rotation) == 0x000018, "Member 'ArteriesObject_Circle::Rotation' has a wrong offset!");
//static_assert(offsetof(ArteriesObject_Circle, Radius) == 0x000030, "Member 'ArteriesObject_Circle::Radius' has a wrong offset!");
//static_assert(offsetof(ArteriesObject_Circle, NumPoints_0) == 0x000040, "Member 'ArteriesObject_Circle::NumPoints_0' has a wrong offset!");
//static_assert(offsetof(ArteriesObject_Circle, ReturnValue) == 0x000048, "Member 'ArteriesObject_Circle::ReturnValue' has a wrong offset!");

// Function Arteries.ArteriesObject.Flatten
// 0x00C0 (0x00C0 - 0x0000)
struct ArteriesObject_Flatten final
{
public:
	struct FTransform                             Transform_0;                                       // 0x0000(0x0060)(ConstParm, Parm, OutParm, ReferenceParm, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	struct FTransform                             ReturnValue;                                       // 0x0060(0x0060)(Parm, OutParm, ReturnParm, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
};
//static_assert(alignof(ArteriesObject_Flatten) == 0x000010, "Wrong alignment on ArteriesObject_Flatten");
//static_assert(sizeof(ArteriesObject_Flatten) == 0x0000C0, "Wrong size on ArteriesObject_Flatten");
//static_assert(offsetof(ArteriesObject_Flatten, Transform_0) == 0x000000, "Member 'ArteriesObject_Flatten::Transform_0' has a wrong offset!");
//static_assert(offsetof(ArteriesObject_Flatten, ReturnValue) == 0x000060, "Member 'ArteriesObject_Flatten::ReturnValue' has a wrong offset!");

// Function Arteries.ArteriesObject.Grid
// 0x0050 (0x0050 - 0x0000)
struct ArteriesObject_Grid final
{
public:
	struct FVector                                Origin;                                            // 0x0000(0x0018)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FRotator                               Rotation;                                          // 0x0018(0x0018)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, NativeAccessSpecifierPublic)
	struct FVector2D                              Size;                                              // 0x0030(0x0010)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         NumPointsX;                                        // 0x0040(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         NumPointsY;                                        // 0x0044(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UArteriesObject*                        ReturnValue;                                       // 0x0048(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
//static_assert(alignof(ArteriesObject_Grid) == 0x000008, "Wrong alignment on ArteriesObject_Grid");
//static_assert(sizeof(ArteriesObject_Grid) == 0x000050, "Wrong size on ArteriesObject_Grid");
//static_assert(offsetof(ArteriesObject_Grid, Origin) == 0x000000, "Member 'ArteriesObject_Grid::Origin' has a wrong offset!");
//static_assert(offsetof(ArteriesObject_Grid, Rotation) == 0x000018, "Member 'ArteriesObject_Grid::Rotation' has a wrong offset!");
//static_assert(offsetof(ArteriesObject_Grid, Size) == 0x000030, "Member 'ArteriesObject_Grid::Size' has a wrong offset!");
//static_assert(offsetof(ArteriesObject_Grid, NumPointsX) == 0x000040, "Member 'ArteriesObject_Grid::NumPointsX' has a wrong offset!");
//static_assert(offsetof(ArteriesObject_Grid, NumPointsY) == 0x000044, "Member 'ArteriesObject_Grid::NumPointsY' has a wrong offset!");
//static_assert(offsetof(ArteriesObject_Grid, ReturnValue) == 0x000048, "Member 'ArteriesObject_Grid::ReturnValue' has a wrong offset!");

// Function Arteries.ArteriesObject.Line
// 0x0040 (0x0040 - 0x0000)
struct ArteriesObject_Line final
{
public:
	struct FVector                                Origin;                                            // 0x0000(0x0018)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                Direction;                                         // 0x0018(0x0018)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Length;                                            // 0x0030(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         NumPoints_0;                                       // 0x0034(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UArteriesObject*                        ReturnValue;                                       // 0x0038(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
//static_assert(alignof(ArteriesObject_Line) == 0x000008, "Wrong alignment on ArteriesObject_Line");
//static_assert(sizeof(ArteriesObject_Line) == 0x000040, "Wrong size on ArteriesObject_Line");
//static_assert(offsetof(ArteriesObject_Line, Origin) == 0x000000, "Member 'ArteriesObject_Line::Origin' has a wrong offset!");
//static_assert(offsetof(ArteriesObject_Line, Direction) == 0x000018, "Member 'ArteriesObject_Line::Direction' has a wrong offset!");
//static_assert(offsetof(ArteriesObject_Line, Length) == 0x000030, "Member 'ArteriesObject_Line::Length' has a wrong offset!");
//static_assert(offsetof(ArteriesObject_Line, NumPoints_0) == 0x000034, "Member 'ArteriesObject_Line::NumPoints_0' has a wrong offset!");
//static_assert(offsetof(ArteriesObject_Line, ReturnValue) == 0x000038, "Member 'ArteriesObject_Line::ReturnValue' has a wrong offset!");

// Function Arteries.ArteriesObject.Merge
// 0x0030 (0x0030 - 0x0000)
struct ArteriesObject_Merge final
{
public:
	class UArteriesObject*                        Obj0;                                              // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UArteriesObject*                        Obj1;                                              // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UArteriesObject*                        Obj2;                                              // 0x0010(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UArteriesObject*                        Obj3;                                              // 0x0018(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UArteriesObject*                        Obj4;                                              // 0x0020(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UArteriesObject*                        ReturnValue;                                       // 0x0028(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
//static_assert(alignof(ArteriesObject_Merge) == 0x000008, "Wrong alignment on ArteriesObject_Merge");
//static_assert(sizeof(ArteriesObject_Merge) == 0x000030, "Wrong size on ArteriesObject_Merge");
//static_assert(offsetof(ArteriesObject_Merge, Obj0) == 0x000000, "Member 'ArteriesObject_Merge::Obj0' has a wrong offset!");
//static_assert(offsetof(ArteriesObject_Merge, Obj1) == 0x000008, "Member 'ArteriesObject_Merge::Obj1' has a wrong offset!");
//static_assert(offsetof(ArteriesObject_Merge, Obj2) == 0x000010, "Member 'ArteriesObject_Merge::Obj2' has a wrong offset!");
//static_assert(offsetof(ArteriesObject_Merge, Obj3) == 0x000018, "Member 'ArteriesObject_Merge::Obj3' has a wrong offset!");
//static_assert(offsetof(ArteriesObject_Merge, Obj4) == 0x000020, "Member 'ArteriesObject_Merge::Obj4' has a wrong offset!");
//static_assert(offsetof(ArteriesObject_Merge, ReturnValue) == 0x000028, "Member 'ArteriesObject_Merge::ReturnValue' has a wrong offset!");

// Function Arteries.ArteriesObject.MergeArray
// 0x0018 (0x0018 - 0x0000)
struct ArteriesObject_MergeArray final
{
public:
	TArray<class UArteriesObject*>                Objs;                                              // 0x0000(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
	class UArteriesObject*                        ReturnValue;                                       // 0x0010(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
//static_assert(alignof(ArteriesObject_MergeArray) == 0x000008, "Wrong alignment on ArteriesObject_MergeArray");
//static_assert(sizeof(ArteriesObject_MergeArray) == 0x000018, "Wrong size on ArteriesObject_MergeArray");
//static_assert(offsetof(ArteriesObject_MergeArray, Objs) == 0x000000, "Member 'ArteriesObject_MergeArray::Objs' has a wrong offset!");
//static_assert(offsetof(ArteriesObject_MergeArray, ReturnValue) == 0x000010, "Member 'ArteriesObject_MergeArray::ReturnValue' has a wrong offset!");

// Function Arteries.ArteriesObject.New
// 0x0008 (0x0008 - 0x0000)
struct ArteriesObject_New final
{
public:
	class UArteriesObject*                        ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
//static_assert(alignof(ArteriesObject_New) == 0x000008, "Wrong alignment on ArteriesObject_New");
//static_assert(sizeof(ArteriesObject_New) == 0x000008, "Wrong size on ArteriesObject_New");
//static_assert(offsetof(ArteriesObject_New, ReturnValue) == 0x000000, "Member 'ArteriesObject_New::ReturnValue' has a wrong offset!");

// Function Arteries.ArteriesObject.Sphere
// 0x0058 (0x0058 - 0x0000)
struct ArteriesObject_Sphere final
{
public:
	struct FVector                                Origin;                                            // 0x0000(0x0018)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FRotator                               Rotation;                                          // 0x0018(0x0018)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, NativeAccessSpecifierPublic)
	struct FVector                                Radius;                                            // 0x0030(0x0018)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Rows;                                              // 0x0048(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Columns;                                           // 0x004C(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UArteriesObject*                        ReturnValue;                                       // 0x0050(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
//static_assert(alignof(ArteriesObject_Sphere) == 0x000008, "Wrong alignment on ArteriesObject_Sphere");
//static_assert(sizeof(ArteriesObject_Sphere) == 0x000058, "Wrong size on ArteriesObject_Sphere");
//static_assert(offsetof(ArteriesObject_Sphere, Origin) == 0x000000, "Member 'ArteriesObject_Sphere::Origin' has a wrong offset!");
//static_assert(offsetof(ArteriesObject_Sphere, Rotation) == 0x000018, "Member 'ArteriesObject_Sphere::Rotation' has a wrong offset!");
//static_assert(offsetof(ArteriesObject_Sphere, Radius) == 0x000030, "Member 'ArteriesObject_Sphere::Radius' has a wrong offset!");
//static_assert(offsetof(ArteriesObject_Sphere, Rows) == 0x000048, "Member 'ArteriesObject_Sphere::Rows' has a wrong offset!");
//static_assert(offsetof(ArteriesObject_Sphere, Columns) == 0x00004C, "Member 'ArteriesObject_Sphere::Columns' has a wrong offset!");
//static_assert(offsetof(ArteriesObject_Sphere, ReturnValue) == 0x000050, "Member 'ArteriesObject_Sphere::ReturnValue' has a wrong offset!");

// Function Arteries.ArteriesObject.Torus
// 0x0050 (0x0050 - 0x0000)
struct ArteriesObject_Torus final
{
public:
	struct FVector                                Origin;                                            // 0x0000(0x0018)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FRotator                               Rotation;                                          // 0x0018(0x0018)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, NativeAccessSpecifierPublic)
	struct FVector2D                              Radius;                                            // 0x0030(0x0010)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Rows;                                              // 0x0040(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Columns;                                           // 0x0044(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UArteriesObject*                        ReturnValue;                                       // 0x0048(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
//static_assert(alignof(ArteriesObject_Torus) == 0x000008, "Wrong alignment on ArteriesObject_Torus");
//static_assert(sizeof(ArteriesObject_Torus) == 0x000050, "Wrong size on ArteriesObject_Torus");
//static_assert(offsetof(ArteriesObject_Torus, Origin) == 0x000000, "Member 'ArteriesObject_Torus::Origin' has a wrong offset!");
//static_assert(offsetof(ArteriesObject_Torus, Rotation) == 0x000018, "Member 'ArteriesObject_Torus::Rotation' has a wrong offset!");
//static_assert(offsetof(ArteriesObject_Torus, Radius) == 0x000030, "Member 'ArteriesObject_Torus::Radius' has a wrong offset!");
//static_assert(offsetof(ArteriesObject_Torus, Rows) == 0x000040, "Member 'ArteriesObject_Torus::Rows' has a wrong offset!");
//static_assert(offsetof(ArteriesObject_Torus, Columns) == 0x000044, "Member 'ArteriesObject_Torus::Columns' has a wrong offset!");
//static_assert(offsetof(ArteriesObject_Torus, ReturnValue) == 0x000048, "Member 'ArteriesObject_Torus::ReturnValue' has a wrong offset!");

// Function Arteries.ArteriesObject.Tube
// 0x0058 (0x0058 - 0x0000)
struct ArteriesObject_Tube final
{
public:
	struct FVector                                Origin;                                            // 0x0000(0x0018)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FRotator                               Rotation;                                          // 0x0018(0x0018)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, NativeAccessSpecifierPublic)
	struct FVector2D                              Radius;                                            // 0x0030(0x0010)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Height;                                            // 0x0040(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Rows;                                              // 0x0044(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Columns;                                           // 0x0048(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_4C[0x4];                                       // 0x004C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UArteriesObject*                        ReturnValue;                                       // 0x0050(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
//static_assert(alignof(ArteriesObject_Tube) == 0x000008, "Wrong alignment on ArteriesObject_Tube");
//static_assert(sizeof(ArteriesObject_Tube) == 0x000058, "Wrong size on ArteriesObject_Tube");
//static_assert(offsetof(ArteriesObject_Tube, Origin) == 0x000000, "Member 'ArteriesObject_Tube::Origin' has a wrong offset!");
//static_assert(offsetof(ArteriesObject_Tube, Rotation) == 0x000018, "Member 'ArteriesObject_Tube::Rotation' has a wrong offset!");
//static_assert(offsetof(ArteriesObject_Tube, Radius) == 0x000030, "Member 'ArteriesObject_Tube::Radius' has a wrong offset!");
//static_assert(offsetof(ArteriesObject_Tube, Height) == 0x000040, "Member 'ArteriesObject_Tube::Height' has a wrong offset!");
//static_assert(offsetof(ArteriesObject_Tube, Rows) == 0x000044, "Member 'ArteriesObject_Tube::Rows' has a wrong offset!");
//static_assert(offsetof(ArteriesObject_Tube, Columns) == 0x000048, "Member 'ArteriesObject_Tube::Columns' has a wrong offset!");
//static_assert(offsetof(ArteriesObject_Tube, ReturnValue) == 0x000050, "Member 'ArteriesObject_Tube::ReturnValue' has a wrong offset!");

// Function Arteries.ArteriesObject.Add
// 0x0080 (0x0080 - 0x0000)
struct ArteriesObject_Add final
{
public:
	class UObject*                                Source;                                            // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_8[0x8];                                        // 0x0008(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	struct FTransform                             Transform_0;                                       // 0x0010(0x0060)(Parm, IsPlainOldData, NoDestructor, AdvancedDisplay, NativeAccessSpecifierPublic)
	class UArteriesObject*                        ReturnValue;                                       // 0x0070(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_78[0x8];                                       // 0x0078(0x0008)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
//static_assert(alignof(ArteriesObject_Add) == 0x000010, "Wrong alignment on ArteriesObject_Add");
//static_assert(sizeof(ArteriesObject_Add) == 0x000080, "Wrong size on ArteriesObject_Add");
//static_assert(offsetof(ArteriesObject_Add, Source) == 0x000000, "Member 'ArteriesObject_Add::Source' has a wrong offset!");
//static_assert(offsetof(ArteriesObject_Add, Transform_0) == 0x000010, "Member 'ArteriesObject_Add::Transform_0' has a wrong offset!");
//static_assert(offsetof(ArteriesObject_Add, ReturnValue) == 0x000070, "Member 'ArteriesObject_Add::ReturnValue' has a wrong offset!");

// Function Arteries.ArteriesObject.Arc
// 0x0020 (0x0020 - 0x0000)
struct ArteriesObject_Arc final
{
public:
	class FString                                 Groups;                                            // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         NumSegments;                                       // 0x0010(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Angle;                                             // 0x0014(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UArteriesObject*                        ReturnValue;                                       // 0x0018(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
//static_assert(alignof(ArteriesObject_Arc) == 0x000008, "Wrong alignment on ArteriesObject_Arc");
//static_assert(sizeof(ArteriesObject_Arc) == 0x000020, "Wrong size on ArteriesObject_Arc");
//static_assert(offsetof(ArteriesObject_Arc, Groups) == 0x000000, "Member 'ArteriesObject_Arc::Groups' has a wrong offset!");
//static_assert(offsetof(ArteriesObject_Arc, NumSegments) == 0x000010, "Member 'ArteriesObject_Arc::NumSegments' has a wrong offset!");
//static_assert(offsetof(ArteriesObject_Arc, Angle) == 0x000014, "Member 'ArteriesObject_Arc::Angle' has a wrong offset!");
//static_assert(offsetof(ArteriesObject_Arc, ReturnValue) == 0x000018, "Member 'ArteriesObject_Arc::ReturnValue' has a wrong offset!");

// Function Arteries.ArteriesObject.Blast
// 0x0030 (0x0030 - 0x0000)
struct ArteriesObject_Blast final
{
public:
	class FString                                 Groups;                                            // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 Tags;                                              // 0x0010(0x0010)(Parm, ZeroConstructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          DeleteNonSelected;                                 // 0x0020(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_21[0x7];                                       // 0x0021(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UArteriesObject*                        ReturnValue;                                       // 0x0028(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
//static_assert(alignof(ArteriesObject_Blast) == 0x000008, "Wrong alignment on ArteriesObject_Blast");
//static_assert(sizeof(ArteriesObject_Blast) == 0x000030, "Wrong size on ArteriesObject_Blast");
//static_assert(offsetof(ArteriesObject_Blast, Groups) == 0x000000, "Member 'ArteriesObject_Blast::Groups' has a wrong offset!");
//static_assert(offsetof(ArteriesObject_Blast, Tags) == 0x000010, "Member 'ArteriesObject_Blast::Tags' has a wrong offset!");
//static_assert(offsetof(ArteriesObject_Blast, DeleteNonSelected) == 0x000020, "Member 'ArteriesObject_Blast::DeleteNonSelected' has a wrong offset!");
//static_assert(offsetof(ArteriesObject_Blast, ReturnValue) == 0x000028, "Member 'ArteriesObject_Blast::ReturnValue' has a wrong offset!");

// Function Arteries.ArteriesObject.BreakPoints
// 0x0018 (0x0018 - 0x0000)
struct ArteriesObject_BreakPoints final
{
public:
	class FString                                 Groups;                                            // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UArteriesObject*                        ReturnValue;                                       // 0x0010(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
//static_assert(alignof(ArteriesObject_BreakPoints) == 0x000008, "Wrong alignment on ArteriesObject_BreakPoints");
//static_assert(sizeof(ArteriesObject_BreakPoints) == 0x000018, "Wrong size on ArteriesObject_BreakPoints");
//static_assert(offsetof(ArteriesObject_BreakPoints, Groups) == 0x000000, "Member 'ArteriesObject_BreakPoints::Groups' has a wrong offset!");
//static_assert(offsetof(ArteriesObject_BreakPoints, ReturnValue) == 0x000010, "Member 'ArteriesObject_BreakPoints::ReturnValue' has a wrong offset!");

// Function Arteries.ArteriesObject.Bridge
// 0x0018 (0x0018 - 0x0000)
struct ArteriesObject_Bridge final
{
public:
	class FName                                   StartGroupName;                                    // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   EndGroupName;                                      // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UArteriesObject*                        ReturnValue;                                       // 0x0010(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
//static_assert(alignof(ArteriesObject_Bridge) == 0x000008, "Wrong alignment on ArteriesObject_Bridge");
//static_assert(sizeof(ArteriesObject_Bridge) == 0x000018, "Wrong size on ArteriesObject_Bridge");
//static_assert(offsetof(ArteriesObject_Bridge, StartGroupName) == 0x000000, "Member 'ArteriesObject_Bridge::StartGroupName' has a wrong offset!");
//static_assert(offsetof(ArteriesObject_Bridge, EndGroupName) == 0x000008, "Member 'ArteriesObject_Bridge::EndGroupName' has a wrong offset!");
//static_assert(offsetof(ArteriesObject_Bridge, ReturnValue) == 0x000010, "Member 'ArteriesObject_Bridge::ReturnValue' has a wrong offset!");

// Function Arteries.ArteriesObject.Carve
// 0x0018 (0x0018 - 0x0000)
struct ArteriesObject_Carve final
{
public:
	EArteriesAlignType                            StartAlign;                                        // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x3];                                        // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         StartU;                                            // 0x0004(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EArteriesAlignType                            EndAlign;                                          // 0x0008(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x3];                                        // 0x0009(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         EndU;                                              // 0x000C(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UArteriesObject*                        ReturnValue;                                       // 0x0010(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
//static_assert(alignof(ArteriesObject_Carve) == 0x000008, "Wrong alignment on ArteriesObject_Carve");
//static_assert(sizeof(ArteriesObject_Carve) == 0x000018, "Wrong size on ArteriesObject_Carve");
//static_assert(offsetof(ArteriesObject_Carve, StartAlign) == 0x000000, "Member 'ArteriesObject_Carve::StartAlign' has a wrong offset!");
//static_assert(offsetof(ArteriesObject_Carve, StartU) == 0x000004, "Member 'ArteriesObject_Carve::StartU' has a wrong offset!");
//static_assert(offsetof(ArteriesObject_Carve, EndAlign) == 0x000008, "Member 'ArteriesObject_Carve::EndAlign' has a wrong offset!");
//static_assert(offsetof(ArteriesObject_Carve, EndU) == 0x00000C, "Member 'ArteriesObject_Carve::EndU' has a wrong offset!");
//static_assert(offsetof(ArteriesObject_Carve, ReturnValue) == 0x000010, "Member 'ArteriesObject_Carve::ReturnValue' has a wrong offset!");

// Function Arteries.ArteriesObject.Clean
// 0x0008 (0x0008 - 0x0000)
struct ArteriesObject_Clean final
{
public:
	class UArteriesObject*                        ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
//static_assert(alignof(ArteriesObject_Clean) == 0x000008, "Wrong alignment on ArteriesObject_Clean");
//static_assert(sizeof(ArteriesObject_Clean) == 0x000008, "Wrong size on ArteriesObject_Clean");
//static_assert(offsetof(ArteriesObject_Clean, ReturnValue) == 0x000000, "Member 'ArteriesObject_Clean::ReturnValue' has a wrong offset!");

// Function Arteries.ArteriesObject.Clip
// 0x0048 (0x0048 - 0x0000)
struct ArteriesObject_Clip final
{
public:
	class FString                                 Groups;                                            // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                PlaneNormal;                                       // 0x0010(0x0018)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         PlaneDist;                                         // 0x0028(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   PositiveGroup;                                     // 0x002C(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   NegativeGroup;                                     // 0x0034(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_3C[0x4];                                       // 0x003C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UArteriesObject*                        ReturnValue;                                       // 0x0040(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
//static_assert(alignof(ArteriesObject_Clip) == 0x000008, "Wrong alignment on ArteriesObject_Clip");
//static_assert(sizeof(ArteriesObject_Clip) == 0x000048, "Wrong size on ArteriesObject_Clip");
//static_assert(offsetof(ArteriesObject_Clip, Groups) == 0x000000, "Member 'ArteriesObject_Clip::Groups' has a wrong offset!");
//static_assert(offsetof(ArteriesObject_Clip, PlaneNormal) == 0x000010, "Member 'ArteriesObject_Clip::PlaneNormal' has a wrong offset!");
//static_assert(offsetof(ArteriesObject_Clip, PlaneDist) == 0x000028, "Member 'ArteriesObject_Clip::PlaneDist' has a wrong offset!");
//static_assert(offsetof(ArteriesObject_Clip, PositiveGroup) == 0x00002C, "Member 'ArteriesObject_Clip::PositiveGroup' has a wrong offset!");
//static_assert(offsetof(ArteriesObject_Clip, NegativeGroup) == 0x000034, "Member 'ArteriesObject_Clip::NegativeGroup' has a wrong offset!");
//static_assert(offsetof(ArteriesObject_Clip, ReturnValue) == 0x000040, "Member 'ArteriesObject_Clip::ReturnValue' has a wrong offset!");

// Function Arteries.ArteriesObject.Copy
// 0x0008 (0x0008 - 0x0000)
struct ArteriesObject_Copy final
{
public:
	class UArteriesObject*                        ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
//static_assert(alignof(ArteriesObject_Copy) == 0x000008, "Wrong alignment on ArteriesObject_Copy");
//static_assert(sizeof(ArteriesObject_Copy) == 0x000008, "Wrong size on ArteriesObject_Copy");
//static_assert(offsetof(ArteriesObject_Copy, ReturnValue) == 0x000000, "Member 'ArteriesObject_Copy::ReturnValue' has a wrong offset!");

// Function Arteries.ArteriesObject.CopyAndTransform
// 0x0080 (0x0080 - 0x0000)
struct ArteriesObject_CopyAndTransform final
{
public:
	int32                                         NumCopies;                                         // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_4[0xC];                                        // 0x0004(0x000C)(Fixing Size After Last Property [ Dumper-7 ])
	struct FTransform                             Transform_0;                                       // 0x0010(0x0060)(Parm, IsPlainOldData, NoDestructor, AdvancedDisplay, NativeAccessSpecifierPublic)
	class UArteriesObject*                        ReturnValue;                                       // 0x0070(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_78[0x8];                                       // 0x0078(0x0008)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
//static_assert(alignof(ArteriesObject_CopyAndTransform) == 0x000010, "Wrong alignment on ArteriesObject_CopyAndTransform");
//static_assert(sizeof(ArteriesObject_CopyAndTransform) == 0x000080, "Wrong size on ArteriesObject_CopyAndTransform");
//static_assert(offsetof(ArteriesObject_CopyAndTransform, NumCopies) == 0x000000, "Member 'ArteriesObject_CopyAndTransform::NumCopies' has a wrong offset!");
//static_assert(offsetof(ArteriesObject_CopyAndTransform, Transform_0) == 0x000010, "Member 'ArteriesObject_CopyAndTransform::Transform_0' has a wrong offset!");
//static_assert(offsetof(ArteriesObject_CopyAndTransform, ReturnValue) == 0x000070, "Member 'ArteriesObject_CopyAndTransform::ReturnValue' has a wrong offset!");

// Function Arteries.ArteriesObject.CopyToPoints
// 0x0090 (0x0090 - 0x0000)
struct ArteriesObject_CopyToPoints final
{
public:
	class FString                                 Groups;                                            // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UObject*                                Source;                                            // 0x0010(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_18[0x8];                                       // 0x0018(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	struct FTransform                             LocalTransform;                                    // 0x0020(0x0060)(Parm, IsPlainOldData, NoDestructor, AdvancedDisplay, NativeAccessSpecifierPublic)
	class UArteriesObject*                        ReturnValue;                                       // 0x0080(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_88[0x8];                                       // 0x0088(0x0008)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
//static_assert(alignof(ArteriesObject_CopyToPoints) == 0x000010, "Wrong alignment on ArteriesObject_CopyToPoints");
//static_assert(sizeof(ArteriesObject_CopyToPoints) == 0x000090, "Wrong size on ArteriesObject_CopyToPoints");
//static_assert(offsetof(ArteriesObject_CopyToPoints, Groups) == 0x000000, "Member 'ArteriesObject_CopyToPoints::Groups' has a wrong offset!");
//static_assert(offsetof(ArteriesObject_CopyToPoints, Source) == 0x000010, "Member 'ArteriesObject_CopyToPoints::Source' has a wrong offset!");
//static_assert(offsetof(ArteriesObject_CopyToPoints, LocalTransform) == 0x000020, "Member 'ArteriesObject_CopyToPoints::LocalTransform' has a wrong offset!");
//static_assert(offsetof(ArteriesObject_CopyToPoints, ReturnValue) == 0x000080, "Member 'ArteriesObject_CopyToPoints::ReturnValue' has a wrong offset!");

// Function Arteries.ArteriesObject.Divide
// 0x0010 (0x0010 - 0x0000)
struct ArteriesObject_Divide final
{
public:
	float                                         Tolerance;                                         // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_4[0x4];                                        // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UArteriesObject*                        ReturnValue;                                       // 0x0008(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
//static_assert(alignof(ArteriesObject_Divide) == 0x000008, "Wrong alignment on ArteriesObject_Divide");
//static_assert(sizeof(ArteriesObject_Divide) == 0x000010, "Wrong size on ArteriesObject_Divide");
//static_assert(offsetof(ArteriesObject_Divide, Tolerance) == 0x000000, "Member 'ArteriesObject_Divide::Tolerance' has a wrong offset!");
//static_assert(offsetof(ArteriesObject_Divide, ReturnValue) == 0x000008, "Member 'ArteriesObject_Divide::ReturnValue' has a wrong offset!");

// Function Arteries.ArteriesObject.Facet
// 0x0010 (0x0010 - 0x0000)
struct ArteriesObject_Facet final
{
public:
	float                                         Tolerance;                                         // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_4[0x4];                                        // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UArteriesObject*                        ReturnValue;                                       // 0x0008(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
//static_assert(alignof(ArteriesObject_Facet) == 0x000008, "Wrong alignment on ArteriesObject_Facet");
//static_assert(sizeof(ArteriesObject_Facet) == 0x000010, "Wrong size on ArteriesObject_Facet");
//static_assert(offsetof(ArteriesObject_Facet, Tolerance) == 0x000000, "Member 'ArteriesObject_Facet::Tolerance' has a wrong offset!");
//static_assert(offsetof(ArteriesObject_Facet, ReturnValue) == 0x000008, "Member 'ArteriesObject_Facet::ReturnValue' has a wrong offset!");

// Function Arteries.ArteriesObject.Fuse
// 0x0020 (0x0020 - 0x0000)
struct ArteriesObject_Fuse final
{
public:
	class FString                                 Groups;                                            // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         SnapDist;                                          // 0x0010(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_14[0x4];                                       // 0x0014(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UArteriesObject*                        ReturnValue;                                       // 0x0018(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
//static_assert(alignof(ArteriesObject_Fuse) == 0x000008, "Wrong alignment on ArteriesObject_Fuse");
//static_assert(sizeof(ArteriesObject_Fuse) == 0x000020, "Wrong size on ArteriesObject_Fuse");
//static_assert(offsetof(ArteriesObject_Fuse, Groups) == 0x000000, "Member 'ArteriesObject_Fuse::Groups' has a wrong offset!");
//static_assert(offsetof(ArteriesObject_Fuse, SnapDist) == 0x000010, "Member 'ArteriesObject_Fuse::SnapDist' has a wrong offset!");
//static_assert(offsetof(ArteriesObject_Fuse, ReturnValue) == 0x000018, "Member 'ArteriesObject_Fuse::ReturnValue' has a wrong offset!");

// Function Arteries.ArteriesObject.Ground
// 0x0008 (0x0008 - 0x0000)
struct ArteriesObject_Ground final
{
public:
	class UArteriesObject*                        ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
//static_assert(alignof(ArteriesObject_Ground) == 0x000008, "Wrong alignment on ArteriesObject_Ground");
//static_assert(sizeof(ArteriesObject_Ground) == 0x000008, "Wrong size on ArteriesObject_Ground");
//static_assert(offsetof(ArteriesObject_Ground, ReturnValue) == 0x000000, "Member 'ArteriesObject_Ground::ReturnValue' has a wrong offset!");

// Function Arteries.ArteriesObject.GroupRange
// 0x0018 (0x0018 - 0x0000)
struct ArteriesObject_GroupRange final
{
public:
	TArray<struct FArteriesGroupRange>            Groups;                                            // 0x0000(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
	class UArteriesObject*                        ReturnValue;                                       // 0x0010(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
//static_assert(alignof(ArteriesObject_GroupRange) == 0x000008, "Wrong alignment on ArteriesObject_GroupRange");
//static_assert(sizeof(ArteriesObject_GroupRange) == 0x000018, "Wrong size on ArteriesObject_GroupRange");
//static_assert(offsetof(ArteriesObject_GroupRange, Groups) == 0x000000, "Member 'ArteriesObject_GroupRange::Groups' has a wrong offset!");
//static_assert(offsetof(ArteriesObject_GroupRange, ReturnValue) == 0x000010, "Member 'ArteriesObject_GroupRange::ReturnValue' has a wrong offset!");

// Function Arteries.ArteriesObject.Hole
// 0x0030 (0x0030 - 0x0000)
struct ArteriesObject_Hole final
{
public:
	class FString                                 OuterGroups;                                       // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 InnerGroups;                                       // 0x0010(0x0010)(Parm, ZeroConstructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Tolerance;                                         // 0x0020(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_24[0x4];                                       // 0x0024(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UArteriesObject*                        ReturnValue;                                       // 0x0028(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
//static_assert(alignof(ArteriesObject_Hole) == 0x000008, "Wrong alignment on ArteriesObject_Hole");
//static_assert(sizeof(ArteriesObject_Hole) == 0x000030, "Wrong size on ArteriesObject_Hole");
//static_assert(offsetof(ArteriesObject_Hole, OuterGroups) == 0x000000, "Member 'ArteriesObject_Hole::OuterGroups' has a wrong offset!");
//static_assert(offsetof(ArteriesObject_Hole, InnerGroups) == 0x000010, "Member 'ArteriesObject_Hole::InnerGroups' has a wrong offset!");
//static_assert(offsetof(ArteriesObject_Hole, Tolerance) == 0x000020, "Member 'ArteriesObject_Hole::Tolerance' has a wrong offset!");
//static_assert(offsetof(ArteriesObject_Hole, ReturnValue) == 0x000028, "Member 'ArteriesObject_Hole::ReturnValue' has a wrong offset!");

// Function Arteries.ArteriesObject.MakeGrids
// 0x0028 (0x0028 - 0x0000)
struct ArteriesObject_MakeGrids final
{
public:
	class FString                                 Groups;                                            // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         GridSize;                                          // 0x0010(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         MinGrids;                                          // 0x0014(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          OBBOnly;                                           // 0x0018(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_19[0x7];                                       // 0x0019(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UArteriesObject*                        ReturnValue;                                       // 0x0020(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
//static_assert(alignof(ArteriesObject_MakeGrids) == 0x000008, "Wrong alignment on ArteriesObject_MakeGrids");
//static_assert(sizeof(ArteriesObject_MakeGrids) == 0x000028, "Wrong size on ArteriesObject_MakeGrids");
//static_assert(offsetof(ArteriesObject_MakeGrids, Groups) == 0x000000, "Member 'ArteriesObject_MakeGrids::Groups' has a wrong offset!");
//static_assert(offsetof(ArteriesObject_MakeGrids, GridSize) == 0x000010, "Member 'ArteriesObject_MakeGrids::GridSize' has a wrong offset!");
//static_assert(offsetof(ArteriesObject_MakeGrids, MinGrids) == 0x000014, "Member 'ArteriesObject_MakeGrids::MinGrids' has a wrong offset!");
//static_assert(offsetof(ArteriesObject_MakeGrids, OBBOnly) == 0x000018, "Member 'ArteriesObject_MakeGrids::OBBOnly' has a wrong offset!");
//static_assert(offsetof(ArteriesObject_MakeGrids, ReturnValue) == 0x000020, "Member 'ArteriesObject_MakeGrids::ReturnValue' has a wrong offset!");

// Function Arteries.ArteriesObject.Measure
// 0x0010 (0x0010 - 0x0000)
struct ArteriesObject_Measure final
{
public:
	class FName                                   Name_0;                                            // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UArteriesObject*                        ReturnValue;                                       // 0x0008(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
//static_assert(alignof(ArteriesObject_Measure) == 0x000008, "Wrong alignment on ArteriesObject_Measure");
//static_assert(sizeof(ArteriesObject_Measure) == 0x000010, "Wrong size on ArteriesObject_Measure");
//static_assert(offsetof(ArteriesObject_Measure, Name_0) == 0x000000, "Member 'ArteriesObject_Measure::Name_0' has a wrong offset!");
//static_assert(offsetof(ArteriesObject_Measure, ReturnValue) == 0x000008, "Member 'ArteriesObject_Measure::ReturnValue' has a wrong offset!");

// Function Arteries.ArteriesObject.PolyBevel
// 0x0030 (0x0030 - 0x0000)
struct ArteriesObject_PolyBevel final
{
public:
	EArteriesGroupType                            GroupType;                                         // 0x0000(0x0001)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x7];                                        // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 Groups;                                            // 0x0008(0x0010)(Parm, ZeroConstructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Distance;                                          // 0x0018(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Divisions;                                         // 0x001C(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bBevelSingleCurve;                                 // 0x0020(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_21[0x7];                                       // 0x0021(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UArteriesObject*                        ReturnValue;                                       // 0x0028(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
//static_assert(alignof(ArteriesObject_PolyBevel) == 0x000008, "Wrong alignment on ArteriesObject_PolyBevel");
//static_assert(sizeof(ArteriesObject_PolyBevel) == 0x000030, "Wrong size on ArteriesObject_PolyBevel");
//static_assert(offsetof(ArteriesObject_PolyBevel, GroupType) == 0x000000, "Member 'ArteriesObject_PolyBevel::GroupType' has a wrong offset!");
//static_assert(offsetof(ArteriesObject_PolyBevel, Groups) == 0x000008, "Member 'ArteriesObject_PolyBevel::Groups' has a wrong offset!");
//static_assert(offsetof(ArteriesObject_PolyBevel, Distance) == 0x000018, "Member 'ArteriesObject_PolyBevel::Distance' has a wrong offset!");
//static_assert(offsetof(ArteriesObject_PolyBevel, Divisions) == 0x00001C, "Member 'ArteriesObject_PolyBevel::Divisions' has a wrong offset!");
//static_assert(offsetof(ArteriesObject_PolyBevel, bBevelSingleCurve) == 0x000020, "Member 'ArteriesObject_PolyBevel::bBevelSingleCurve' has a wrong offset!");
//static_assert(offsetof(ArteriesObject_PolyBevel, ReturnValue) == 0x000028, "Member 'ArteriesObject_PolyBevel::ReturnValue' has a wrong offset!");

// Function Arteries.ArteriesObject.PolyExpand
// 0x0030 (0x0030 - 0x0000)
struct ArteriesObject_PolyExpand final
{
public:
	class FString                                 Groups;                                            // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Offset;                                            // 0x0010(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   CurveGroup;                                        // 0x0014(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   SurfaceGroup;                                      // 0x001C(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          OutputTangents;                                    // 0x0024(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          DeleteSource;                                      // 0x0025(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_26[0x2];                                       // 0x0026(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	class UArteriesObject*                        ReturnValue;                                       // 0x0028(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
//static_assert(alignof(ArteriesObject_PolyExpand) == 0x000008, "Wrong alignment on ArteriesObject_PolyExpand");
//static_assert(sizeof(ArteriesObject_PolyExpand) == 0x000030, "Wrong size on ArteriesObject_PolyExpand");
//static_assert(offsetof(ArteriesObject_PolyExpand, Groups) == 0x000000, "Member 'ArteriesObject_PolyExpand::Groups' has a wrong offset!");
//static_assert(offsetof(ArteriesObject_PolyExpand, Offset) == 0x000010, "Member 'ArteriesObject_PolyExpand::Offset' has a wrong offset!");
//static_assert(offsetof(ArteriesObject_PolyExpand, CurveGroup) == 0x000014, "Member 'ArteriesObject_PolyExpand::CurveGroup' has a wrong offset!");
//static_assert(offsetof(ArteriesObject_PolyExpand, SurfaceGroup) == 0x00001C, "Member 'ArteriesObject_PolyExpand::SurfaceGroup' has a wrong offset!");
//static_assert(offsetof(ArteriesObject_PolyExpand, OutputTangents) == 0x000024, "Member 'ArteriesObject_PolyExpand::OutputTangents' has a wrong offset!");
//static_assert(offsetof(ArteriesObject_PolyExpand, DeleteSource) == 0x000025, "Member 'ArteriesObject_PolyExpand::DeleteSource' has a wrong offset!");
//static_assert(offsetof(ArteriesObject_PolyExpand, ReturnValue) == 0x000028, "Member 'ArteriesObject_PolyExpand::ReturnValue' has a wrong offset!");

// Function Arteries.ArteriesObject.PolyExtrude
// 0x0038 (0x0038 - 0x0000)
struct ArteriesObject_PolyExtrude final
{
public:
	class FString                                 Groups;                                            // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Distance;                                          // 0x0010(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Inset;                                             // 0x0014(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   FrontGroup;                                        // 0x0018(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   SideGroup;                                         // 0x0020(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          DeleteSource;                                      // 0x0028(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_29[0x7];                                       // 0x0029(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UArteriesObject*                        ReturnValue;                                       // 0x0030(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
//static_assert(alignof(ArteriesObject_PolyExtrude) == 0x000008, "Wrong alignment on ArteriesObject_PolyExtrude");
//static_assert(sizeof(ArteriesObject_PolyExtrude) == 0x000038, "Wrong size on ArteriesObject_PolyExtrude");
//static_assert(offsetof(ArteriesObject_PolyExtrude, Groups) == 0x000000, "Member 'ArteriesObject_PolyExtrude::Groups' has a wrong offset!");
//static_assert(offsetof(ArteriesObject_PolyExtrude, Distance) == 0x000010, "Member 'ArteriesObject_PolyExtrude::Distance' has a wrong offset!");
//static_assert(offsetof(ArteriesObject_PolyExtrude, Inset) == 0x000014, "Member 'ArteriesObject_PolyExtrude::Inset' has a wrong offset!");
//static_assert(offsetof(ArteriesObject_PolyExtrude, FrontGroup) == 0x000018, "Member 'ArteriesObject_PolyExtrude::FrontGroup' has a wrong offset!");
//static_assert(offsetof(ArteriesObject_PolyExtrude, SideGroup) == 0x000020, "Member 'ArteriesObject_PolyExtrude::SideGroup' has a wrong offset!");
//static_assert(offsetof(ArteriesObject_PolyExtrude, DeleteSource) == 0x000028, "Member 'ArteriesObject_PolyExtrude::DeleteSource' has a wrong offset!");
//static_assert(offsetof(ArteriesObject_PolyExtrude, ReturnValue) == 0x000030, "Member 'ArteriesObject_PolyExtrude::ReturnValue' has a wrong offset!");

// Function Arteries.ArteriesObject.Resample
// 0x0018 (0x0018 - 0x0000)
struct ArteriesObject_Resample final
{
public:
	bool                                          ByEdge;                                            // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x3];                                        // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         SegmentLength;                                     // 0x0004(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         NumSegments;                                       // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EArteriesTangentOutputType                    OutputType;                                        // 0x000C(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_D[0x3];                                        // 0x000D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class UArteriesObject*                        ReturnValue;                                       // 0x0010(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
//static_assert(alignof(ArteriesObject_Resample) == 0x000008, "Wrong alignment on ArteriesObject_Resample");
//static_assert(sizeof(ArteriesObject_Resample) == 0x000018, "Wrong size on ArteriesObject_Resample");
//static_assert(offsetof(ArteriesObject_Resample, ByEdge) == 0x000000, "Member 'ArteriesObject_Resample::ByEdge' has a wrong offset!");
//static_assert(offsetof(ArteriesObject_Resample, SegmentLength) == 0x000004, "Member 'ArteriesObject_Resample::SegmentLength' has a wrong offset!");
//static_assert(offsetof(ArteriesObject_Resample, NumSegments) == 0x000008, "Member 'ArteriesObject_Resample::NumSegments' has a wrong offset!");
//static_assert(offsetof(ArteriesObject_Resample, OutputType) == 0x00000C, "Member 'ArteriesObject_Resample::OutputType' has a wrong offset!");
//static_assert(offsetof(ArteriesObject_Resample, ReturnValue) == 0x000010, "Member 'ArteriesObject_Resample::ReturnValue' has a wrong offset!");

// Function Arteries.ArteriesObject.Reverse
// 0x0018 (0x0018 - 0x0000)
struct ArteriesObject_Reverse final
{
public:
	class FString                                 Groups;                                            // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UArteriesObject*                        ReturnValue;                                       // 0x0010(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
//static_assert(alignof(ArteriesObject_Reverse) == 0x000008, "Wrong alignment on ArteriesObject_Reverse");
//static_assert(sizeof(ArteriesObject_Reverse) == 0x000018, "Wrong size on ArteriesObject_Reverse");
//static_assert(offsetof(ArteriesObject_Reverse, Groups) == 0x000000, "Member 'ArteriesObject_Reverse::Groups' has a wrong offset!");
//static_assert(offsetof(ArteriesObject_Reverse, ReturnValue) == 0x000010, "Member 'ArteriesObject_Reverse::ReturnValue' has a wrong offset!");

// Function Arteries.ArteriesObject.Road
// 0x0010 (0x0010 - 0x0000)
struct ArteriesObject_Road final
{
public:
	float                                         DefaultWidth;                                      // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_4[0x4];                                        // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UArteriesObject*                        ReturnValue;                                       // 0x0008(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
//static_assert(alignof(ArteriesObject_Road) == 0x000008, "Wrong alignment on ArteriesObject_Road");
//static_assert(sizeof(ArteriesObject_Road) == 0x000010, "Wrong size on ArteriesObject_Road");
//static_assert(offsetof(ArteriesObject_Road, DefaultWidth) == 0x000000, "Member 'ArteriesObject_Road::DefaultWidth' has a wrong offset!");
//static_assert(offsetof(ArteriesObject_Road, ReturnValue) == 0x000008, "Member 'ArteriesObject_Road::ReturnValue' has a wrong offset!");

// Function Arteries.ArteriesObject.Scatter
// 0x0028 (0x0028 - 0x0000)
struct ArteriesObject_Scatter final
{
public:
	class FString                                 Groups;                                            // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Seed;                                              // 0x0010(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Count;                                             // 0x0014(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Density;                                           // 0x0018(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Iterations;                                        // 0x001C(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UArteriesObject*                        ReturnValue;                                       // 0x0020(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
//static_assert(alignof(ArteriesObject_Scatter) == 0x000008, "Wrong alignment on ArteriesObject_Scatter");
//static_assert(sizeof(ArteriesObject_Scatter) == 0x000028, "Wrong size on ArteriesObject_Scatter");
//static_assert(offsetof(ArteriesObject_Scatter, Groups) == 0x000000, "Member 'ArteriesObject_Scatter::Groups' has a wrong offset!");
//static_assert(offsetof(ArteriesObject_Scatter, Seed) == 0x000010, "Member 'ArteriesObject_Scatter::Seed' has a wrong offset!");
//static_assert(offsetof(ArteriesObject_Scatter, Count) == 0x000014, "Member 'ArteriesObject_Scatter::Count' has a wrong offset!");
//static_assert(offsetof(ArteriesObject_Scatter, Density) == 0x000018, "Member 'ArteriesObject_Scatter::Density' has a wrong offset!");
//static_assert(offsetof(ArteriesObject_Scatter, Iterations) == 0x00001C, "Member 'ArteriesObject_Scatter::Iterations' has a wrong offset!");
//static_assert(offsetof(ArteriesObject_Scatter, ReturnValue) == 0x000020, "Member 'ArteriesObject_Scatter::ReturnValue' has a wrong offset!");

// Function Arteries.ArteriesObject.SetMaterial
// 0x0048 (0x0048 - 0x0000)
struct ArteriesObject_SetMaterial final
{
public:
	class FString                                 Groups;                                            // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UMaterialInterface*                     Material;                                          // 0x0010(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector2D                              UVScale;                                           // 0x0018(0x0010)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector2D                              UVOffset;                                          // 0x0028(0x0010)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         UVRotation;                                        // 0x0038(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          NullOnly;                                          // 0x003C(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_3D[0x3];                                       // 0x003D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class UArteriesObject*                        ReturnValue;                                       // 0x0040(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
//static_assert(alignof(ArteriesObject_SetMaterial) == 0x000008, "Wrong alignment on ArteriesObject_SetMaterial");
//static_assert(sizeof(ArteriesObject_SetMaterial) == 0x000048, "Wrong size on ArteriesObject_SetMaterial");
//static_assert(offsetof(ArteriesObject_SetMaterial, Groups) == 0x000000, "Member 'ArteriesObject_SetMaterial::Groups' has a wrong offset!");
//static_assert(offsetof(ArteriesObject_SetMaterial, Material) == 0x000010, "Member 'ArteriesObject_SetMaterial::Material' has a wrong offset!");
//static_assert(offsetof(ArteriesObject_SetMaterial, UVScale) == 0x000018, "Member 'ArteriesObject_SetMaterial::UVScale' has a wrong offset!");
//static_assert(offsetof(ArteriesObject_SetMaterial, UVOffset) == 0x000028, "Member 'ArteriesObject_SetMaterial::UVOffset' has a wrong offset!");
//static_assert(offsetof(ArteriesObject_SetMaterial, UVRotation) == 0x000038, "Member 'ArteriesObject_SetMaterial::UVRotation' has a wrong offset!");
//static_assert(offsetof(ArteriesObject_SetMaterial, NullOnly) == 0x00003C, "Member 'ArteriesObject_SetMaterial::NullOnly' has a wrong offset!");
//static_assert(offsetof(ArteriesObject_SetMaterial, ReturnValue) == 0x000040, "Member 'ArteriesObject_SetMaterial::ReturnValue' has a wrong offset!");

// Function Arteries.ArteriesObject.SortByAttribute
// 0x0010 (0x0010 - 0x0000)
struct ArteriesObject_SortByAttribute final
{
public:
	class FName                                   AttrName;                                          // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UArteriesObject*                        ReturnValue;                                       // 0x0008(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
//static_assert(alignof(ArteriesObject_SortByAttribute) == 0x000008, "Wrong alignment on ArteriesObject_SortByAttribute");
//static_assert(sizeof(ArteriesObject_SortByAttribute) == 0x000010, "Wrong size on ArteriesObject_SortByAttribute");
//static_assert(offsetof(ArteriesObject_SortByAttribute, AttrName) == 0x000000, "Member 'ArteriesObject_SortByAttribute::AttrName' has a wrong offset!");
//static_assert(offsetof(ArteriesObject_SortByAttribute, ReturnValue) == 0x000008, "Member 'ArteriesObject_SortByAttribute::ReturnValue' has a wrong offset!");

// Function Arteries.ArteriesObject.SortRandomly
// 0x0010 (0x0010 - 0x0000)
struct ArteriesObject_SortRandomly final
{
public:
	int32                                         Seed;                                              // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_4[0x4];                                        // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UArteriesObject*                        ReturnValue;                                       // 0x0008(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
//static_assert(alignof(ArteriesObject_SortRandomly) == 0x000008, "Wrong alignment on ArteriesObject_SortRandomly");
//static_assert(sizeof(ArteriesObject_SortRandomly) == 0x000010, "Wrong size on ArteriesObject_SortRandomly");
//static_assert(offsetof(ArteriesObject_SortRandomly, Seed) == 0x000000, "Member 'ArteriesObject_SortRandomly::Seed' has a wrong offset!");
//static_assert(offsetof(ArteriesObject_SortRandomly, ReturnValue) == 0x000008, "Member 'ArteriesObject_SortRandomly::ReturnValue' has a wrong offset!");

// Function Arteries.ArteriesObject.SubDivide
// 0x0020 (0x0020 - 0x0000)
struct ArteriesObject_SubDivide final
{
public:
	class FString                                 Groups;                                            // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         MinLength;                                         // 0x0010(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_14[0x4];                                       // 0x0014(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UArteriesObject*                        ReturnValue;                                       // 0x0018(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
//static_assert(alignof(ArteriesObject_SubDivide) == 0x000008, "Wrong alignment on ArteriesObject_SubDivide");
//static_assert(sizeof(ArteriesObject_SubDivide) == 0x000020, "Wrong size on ArteriesObject_SubDivide");
//static_assert(offsetof(ArteriesObject_SubDivide, Groups) == 0x000000, "Member 'ArteriesObject_SubDivide::Groups' has a wrong offset!");
//static_assert(offsetof(ArteriesObject_SubDivide, MinLength) == 0x000010, "Member 'ArteriesObject_SubDivide::MinLength' has a wrong offset!");
//static_assert(offsetof(ArteriesObject_SubDivide, ReturnValue) == 0x000018, "Member 'ArteriesObject_SubDivide::ReturnValue' has a wrong offset!");

// Function Arteries.ArteriesObject.Sweep
// 0x0010 (0x0010 - 0x0000)
struct ArteriesObject_Sweep final
{
public:
	class UArteriesObject*                        BackBones;                                         // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UArteriesObject*                        ReturnValue;                                       // 0x0008(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
//static_assert(alignof(ArteriesObject_Sweep) == 0x000008, "Wrong alignment on ArteriesObject_Sweep");
//static_assert(sizeof(ArteriesObject_Sweep) == 0x000010, "Wrong size on ArteriesObject_Sweep");
//static_assert(offsetof(ArteriesObject_Sweep, BackBones) == 0x000000, "Member 'ArteriesObject_Sweep::BackBones' has a wrong offset!");
//static_assert(offsetof(ArteriesObject_Sweep, ReturnValue) == 0x000008, "Member 'ArteriesObject_Sweep::ReturnValue' has a wrong offset!");

// Function Arteries.ArteriesObject.Transform
// 0x0068 (0x0068 - 0x0000)
struct ArteriesObject_Transform final
{
public:
	EArteriesGroupType                            GroupType;                                         // 0x0000(0x0001)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x7];                                        // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 Groups;                                            // 0x0008(0x0010)(Parm, ZeroConstructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FRotator                               Rotation;                                          // 0x0018(0x0018)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, NativeAccessSpecifierPublic)
	struct FVector                                Translation;                                       // 0x0030(0x0018)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                Scale;                                             // 0x0048(0x0018)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UArteriesObject*                        ReturnValue;                                       // 0x0060(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
//static_assert(alignof(ArteriesObject_Transform) == 0x000008, "Wrong alignment on ArteriesObject_Transform");
//static_assert(sizeof(ArteriesObject_Transform) == 0x000068, "Wrong size on ArteriesObject_Transform");
//static_assert(offsetof(ArteriesObject_Transform, GroupType) == 0x000000, "Member 'ArteriesObject_Transform::GroupType' has a wrong offset!");
//static_assert(offsetof(ArteriesObject_Transform, Groups) == 0x000008, "Member 'ArteriesObject_Transform::Groups' has a wrong offset!");
//static_assert(offsetof(ArteriesObject_Transform, Rotation) == 0x000018, "Member 'ArteriesObject_Transform::Rotation' has a wrong offset!");
//static_assert(offsetof(ArteriesObject_Transform, Translation) == 0x000030, "Member 'ArteriesObject_Transform::Translation' has a wrong offset!");
//static_assert(offsetof(ArteriesObject_Transform, Scale) == 0x000048, "Member 'ArteriesObject_Transform::Scale' has a wrong offset!");
//static_assert(offsetof(ArteriesObject_Transform, ReturnValue) == 0x000060, "Member 'ArteriesObject_Transform::ReturnValue' has a wrong offset!");

// Function Arteries.ArteriesObject.Triangulate
// 0x0008 (0x0008 - 0x0000)
struct ArteriesObject_Triangulate final
{
public:
	class UArteriesObject*                        ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
//static_assert(alignof(ArteriesObject_Triangulate) == 0x000008, "Wrong alignment on ArteriesObject_Triangulate");
//static_assert(sizeof(ArteriesObject_Triangulate) == 0x000008, "Wrong size on ArteriesObject_Triangulate");
//static_assert(offsetof(ArteriesObject_Triangulate, ReturnValue) == 0x000000, "Member 'ArteriesObject_Triangulate::ReturnValue' has a wrong offset!");

// Function Arteries.ArteriesObject.Voronoi
// 0x0028 (0x0028 - 0x0000)
struct ArteriesObject_Voronoi final
{
public:
	class FString                                 Groups;                                            // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Seed;                                              // 0x0010(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Count;                                             // 0x0014(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Density;                                           // 0x0018(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Iterations;                                        // 0x001C(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UArteriesObject*                        ReturnValue;                                       // 0x0020(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
//static_assert(alignof(ArteriesObject_Voronoi) == 0x000008, "Wrong alignment on ArteriesObject_Voronoi");
//static_assert(sizeof(ArteriesObject_Voronoi) == 0x000028, "Wrong size on ArteriesObject_Voronoi");
//static_assert(offsetof(ArteriesObject_Voronoi, Groups) == 0x000000, "Member 'ArteriesObject_Voronoi::Groups' has a wrong offset!");
//static_assert(offsetof(ArteriesObject_Voronoi, Seed) == 0x000010, "Member 'ArteriesObject_Voronoi::Seed' has a wrong offset!");
//static_assert(offsetof(ArteriesObject_Voronoi, Count) == 0x000014, "Member 'ArteriesObject_Voronoi::Count' has a wrong offset!");
//static_assert(offsetof(ArteriesObject_Voronoi, Density) == 0x000018, "Member 'ArteriesObject_Voronoi::Density' has a wrong offset!");
//static_assert(offsetof(ArteriesObject_Voronoi, Iterations) == 0x00001C, "Member 'ArteriesObject_Voronoi::Iterations' has a wrong offset!");
//static_assert(offsetof(ArteriesObject_Voronoi, ReturnValue) == 0x000020, "Member 'ArteriesObject_Voronoi::ReturnValue' has a wrong offset!");

// Function Arteries.ArteriesObject.GetPointInt
// 0x0010 (0x0010 - 0x0000)
struct ArteriesObject_GetPointInt final
{
public:
	class FName                                   Key;                                               // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Index_0;                                           // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         ReturnValue;                                       // 0x000C(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
//static_assert(alignof(ArteriesObject_GetPointInt) == 0x000004, "Wrong alignment on ArteriesObject_GetPointInt");
//static_assert(sizeof(ArteriesObject_GetPointInt) == 0x000010, "Wrong size on ArteriesObject_GetPointInt");
//static_assert(offsetof(ArteriesObject_GetPointInt, Key) == 0x000000, "Member 'ArteriesObject_GetPointInt::Key' has a wrong offset!");
//static_assert(offsetof(ArteriesObject_GetPointInt, Index_0) == 0x000008, "Member 'ArteriesObject_GetPointInt::Index_0' has a wrong offset!");
//static_assert(offsetof(ArteriesObject_GetPointInt, ReturnValue) == 0x00000C, "Member 'ArteriesObject_GetPointInt::ReturnValue' has a wrong offset!");

// Function Arteries.ArteriesObject.GetPointTransform
// 0x0070 (0x0070 - 0x0000)
struct ArteriesObject_GetPointTransform final
{
public:
	int32                                         Index_0;                                           // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_4[0xC];                                        // 0x0004(0x000C)(Fixing Size After Last Property [ Dumper-7 ])
	struct FTransform                             ReturnValue;                                       // 0x0010(0x0060)(Parm, OutParm, ReturnParm, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
};
//static_assert(alignof(ArteriesObject_GetPointTransform) == 0x000010, "Wrong alignment on ArteriesObject_GetPointTransform");
//static_assert(sizeof(ArteriesObject_GetPointTransform) == 0x000070, "Wrong size on ArteriesObject_GetPointTransform");
//static_assert(offsetof(ArteriesObject_GetPointTransform, Index_0) == 0x000000, "Member 'ArteriesObject_GetPointTransform::Index_0' has a wrong offset!");
//static_assert(offsetof(ArteriesObject_GetPointTransform, ReturnValue) == 0x000010, "Member 'ArteriesObject_GetPointTransform::ReturnValue' has a wrong offset!");

// Function Arteries.ArteriesObject.GetPrimitiveInt
// 0x0010 (0x0010 - 0x0000)
struct ArteriesObject_GetPrimitiveInt final
{
public:
	class FName                                   Key;                                               // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Index_0;                                           // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         ReturnValue;                                       // 0x000C(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
//static_assert(alignof(ArteriesObject_GetPrimitiveInt) == 0x000004, "Wrong alignment on ArteriesObject_GetPrimitiveInt");
//static_assert(sizeof(ArteriesObject_GetPrimitiveInt) == 0x000010, "Wrong size on ArteriesObject_GetPrimitiveInt");
//static_assert(offsetof(ArteriesObject_GetPrimitiveInt, Key) == 0x000000, "Member 'ArteriesObject_GetPrimitiveInt::Key' has a wrong offset!");
//static_assert(offsetof(ArteriesObject_GetPrimitiveInt, Index_0) == 0x000008, "Member 'ArteriesObject_GetPrimitiveInt::Index_0' has a wrong offset!");
//static_assert(offsetof(ArteriesObject_GetPrimitiveInt, ReturnValue) == 0x00000C, "Member 'ArteriesObject_GetPrimitiveInt::ReturnValue' has a wrong offset!");

// Function Arteries.ArteriesObject.LastPoint
// 0x0004 (0x0004 - 0x0000)
struct ArteriesObject_LastPoint final
{
public:
	int32                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
//static_assert(alignof(ArteriesObject_LastPoint) == 0x000004, "Wrong alignment on ArteriesObject_LastPoint");
//static_assert(sizeof(ArteriesObject_LastPoint) == 0x000004, "Wrong size on ArteriesObject_LastPoint");
//static_assert(offsetof(ArteriesObject_LastPoint, ReturnValue) == 0x000000, "Member 'ArteriesObject_LastPoint::ReturnValue' has a wrong offset!");

// Function Arteries.ArteriesObject.LastPrimitive
// 0x0004 (0x0004 - 0x0000)
struct ArteriesObject_LastPrimitive final
{
public:
	int32                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
//static_assert(alignof(ArteriesObject_LastPrimitive) == 0x000004, "Wrong alignment on ArteriesObject_LastPrimitive");
//static_assert(sizeof(ArteriesObject_LastPrimitive) == 0x000004, "Wrong size on ArteriesObject_LastPrimitive");
//static_assert(offsetof(ArteriesObject_LastPrimitive, ReturnValue) == 0x000000, "Member 'ArteriesObject_LastPrimitive::ReturnValue' has a wrong offset!");

// Function Arteries.ArteriesObject.NumPoints
// 0x0004 (0x0004 - 0x0000)
struct ArteriesObject_NumPoints final
{
public:
	int32                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
//static_assert(alignof(ArteriesObject_NumPoints) == 0x000004, "Wrong alignment on ArteriesObject_NumPoints");
//static_assert(sizeof(ArteriesObject_NumPoints) == 0x000004, "Wrong size on ArteriesObject_NumPoints");
//static_assert(offsetof(ArteriesObject_NumPoints, ReturnValue) == 0x000000, "Member 'ArteriesObject_NumPoints::ReturnValue' has a wrong offset!");

// Function Arteries.ArteriesObject.NumPrimitives
// 0x0004 (0x0004 - 0x0000)
struct ArteriesObject_NumPrimitives final
{
public:
	int32                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
//static_assert(alignof(ArteriesObject_NumPrimitives) == 0x000004, "Wrong alignment on ArteriesObject_NumPrimitives");
//static_assert(sizeof(ArteriesObject_NumPrimitives) == 0x000004, "Wrong size on ArteriesObject_NumPrimitives");
//static_assert(offsetof(ArteriesObject_NumPrimitives, ReturnValue) == 0x000000, "Member 'ArteriesObject_NumPrimitives::ReturnValue' has a wrong offset!");

// Function Arteries.ArteriesObject.PointInGroup
// 0x0010 (0x0010 - 0x0000)
struct ArteriesObject_PointInGroup final
{
public:
	class FName                                   GroupName;                                         // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Index_0;                                           // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x000C(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_D[0x3];                                        // 0x000D(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
//static_assert(alignof(ArteriesObject_PointInGroup) == 0x000004, "Wrong alignment on ArteriesObject_PointInGroup");
//static_assert(sizeof(ArteriesObject_PointInGroup) == 0x000010, "Wrong size on ArteriesObject_PointInGroup");
//static_assert(offsetof(ArteriesObject_PointInGroup, GroupName) == 0x000000, "Member 'ArteriesObject_PointInGroup::GroupName' has a wrong offset!");
//static_assert(offsetof(ArteriesObject_PointInGroup, Index_0) == 0x000008, "Member 'ArteriesObject_PointInGroup::Index_0' has a wrong offset!");
//static_assert(offsetof(ArteriesObject_PointInGroup, ReturnValue) == 0x00000C, "Member 'ArteriesObject_PointInGroup::ReturnValue' has a wrong offset!");

// Function Arteries.ArteriesObject.PrimitiveInGroup
// 0x0010 (0x0010 - 0x0000)
struct ArteriesObject_PrimitiveInGroup final
{
public:
	class FName                                   GroupName;                                         // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Index_0;                                           // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x000C(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_D[0x3];                                        // 0x000D(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
//static_assert(alignof(ArteriesObject_PrimitiveInGroup) == 0x000004, "Wrong alignment on ArteriesObject_PrimitiveInGroup");
//static_assert(sizeof(ArteriesObject_PrimitiveInGroup) == 0x000010, "Wrong size on ArteriesObject_PrimitiveInGroup");
//static_assert(offsetof(ArteriesObject_PrimitiveInGroup, GroupName) == 0x000000, "Member 'ArteriesObject_PrimitiveInGroup::GroupName' has a wrong offset!");
//static_assert(offsetof(ArteriesObject_PrimitiveInGroup, Index_0) == 0x000008, "Member 'ArteriesObject_PrimitiveInGroup::Index_0' has a wrong offset!");
//static_assert(offsetof(ArteriesObject_PrimitiveInGroup, ReturnValue) == 0x00000C, "Member 'ArteriesObject_PrimitiveInGroup::ReturnValue' has a wrong offset!");

}

