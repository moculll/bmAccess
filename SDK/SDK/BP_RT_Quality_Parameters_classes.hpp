#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: BP_RT_Quality_Parameters

#include "Basic.hpp"

#include "High_structs.hpp"
#include "Film_structs.hpp"
#include "Engine_structs.hpp"
#include "Engine_classes.hpp"
#include "CoreUObject_structs.hpp"
#include "Enum_RT_Quality_Preset_structs.hpp"
#include "VeryHigh_structs.hpp"
#include "Medium_structs.hpp"
#include "Low_structs.hpp"
#include "Disable_structs.hpp"
#include "Xbox_structs.hpp"
#include "PS5_structs.hpp"
#include "RTXDI_Quality_structs.hpp"


namespace SDK
{

// BlueprintGeneratedClass BP_RT_Quality_Parameters.BP_RT_Quality_Parameters_C
// 0x115B8 (0x11830 - 0x0278)
class ABP_RT_Quality_Parameters_C : public AActor
{
public:
	struct FPointerToUberGraphFrame               UberGraphFrame;                                    // 0x0278(0x0008)(ZeroConstructor, Transient, DuplicateTransient)
	class USceneComponent*                        DefaultSceneRoot;                                  // 0x0280(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class FString                                 Enable_Reflection;                                 // 0x0288(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, HasGetValueTypeHash)
	class FString                                 Enable_AO;                                         // 0x0298(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, HasGetValueTypeHash)
	class FString                                 Enable_Shadow;                                     // 0x02A8(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, HasGetValueTypeHash)
	class FString                                 Enable_Translucensy;                               // 0x02B8(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, HasGetValueTypeHash)
	class FString                                 Enable_Translucency_Height_Fog;                    // 0x02C8(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, HasGetValueTypeHash)
	class FString                                 Enable_Translucency_Shadows;                       // 0x02D8(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, HasGetValueTypeHash)
	class FString                                 Enable_Refraction;                                 // 0x02E8(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, HasGetValueTypeHash)
	class FString                                 Translucency_Max_Roughness;                        // 0x02F8(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, HasGetValueTypeHash)
	class FString                                 Translucency_Max_Ray_Distance_;                    // 0x0308(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, HasGetValueTypeHash)
	class FString                                 Max_Refraction_Rays;                               // 0x0318(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, HasGetValueTypeHash)
	class FString                                 Evaluate_Materials_in_Shadow;                      // 0x0328(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, HasGetValueTypeHash)
	class FString                                 Shadow_Enable_Two_Sided_Geometry;                  // 0x0338(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, HasGetValueTypeHash)
	class FString                                 Enable_Height_Fog_in_Reflection;                   // 0x0348(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, HasGetValueTypeHash)
	class FString                                 Reflection_Sort_Materials;                         // 0x0358(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, HasGetValueTypeHash)
	class FString                                 Enable_Reflection_Shadow;                          // 0x0368(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, HasGetValueTypeHash)
	class FString                                 Reflection_Max_Roughness;                          // 0x0378(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, HasGetValueTypeHash)
	class FString                                 Reflection_Screen_Percentage;                      // 0x0388(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, HasGetValueTypeHash)
	struct FVector                                Box_Reletive_Scale;                                // 0x0398(0x0018)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Hidden_in_Game;                                    // 0x03B0(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_3B1[0x7];                                      // 0x03B1(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 Normal_Bias;                                       // 0x03B8(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, HasGetValueTypeHash)
	class FString                                 Debug_Force_Opaque;                                // 0x03C8(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, HasGetValueTypeHash)
	class FString                                 Debug_Disable_Triangle_Cull;                       // 0x03D8(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, HasGetValueTypeHash)
	class FString                                 Reflection_Max_Ray_Distance;                       // 0x03E8(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, HasGetValueTypeHash)
	class FString                                 Reflection_Min_Ray_Distance;                       // 0x03F8(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, HasGetValueTypeHash)
	class FString                                 Reflection_Max_Bounces;                            // 0x0408(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, HasGetValueTypeHash)
	class FString                                 Reflection_SPP;                                    // 0x0418(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, HasGetValueTypeHash)
	class FString                                 Shadow_SPP;                                        // 0x0428(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, HasGetValueTypeHash)
	class FString                                 Enable_Reflection_Denoiser;                        // 0x0438(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, HasGetValueTypeHash)
	class FString                                 Enable_Shadow_Denoiser;                            // 0x0448(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, HasGetValueTypeHash)
	Enum_RT_Quality_Preset                        Enum_RT_QualitySwitch;                             // 0x0458(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_459[0x7];                                      // 0x0459(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 GI_type;                                           // 0x0460(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, HasGetValueTypeHash)
	class FString                                 Enable_GI_Denoiser;                                // 0x0470(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, HasGetValueTypeHash)
	class FString                                 GI_EvalSkyLight;                                   // 0x0480(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, HasGetValueTypeHash)
	class FString                                 GI_MaxBounce;                                      // 0x0490(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, HasGetValueTypeHash)
	class FString                                 GI_MaxRayDistance;                                 // 0x04A0(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, HasGetValueTypeHash)
	class FString                                 GI_SPP;                                            // 0x04B0(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, HasGetValueTypeHash)
	class FString                                 GI_Screen_Percentage;                              // 0x04C0(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, HasGetValueTypeHash)
	class FString                                 GI_UseRussianRoulette_;                            // 0x04D0(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, HasGetValueTypeHash)
	class FString                                 Enable_RT_SkyLight;                                // 0x04E0(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, HasGetValueTypeHash)
	class FString                                 Enable_SkyLight_Denoiser;                          // 0x04F0(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, HasGetValueTypeHash)
	class FString                                 SkyLight_Enable_Two_Sided_Geomtry;                 // 0x0500(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, HasGetValueTypeHash)
	class FString                                 SkyLight_MaxRay_Distance;                          // 0x0510(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, HasGetValueTypeHash)
	class FString                                 SkyLight_SPP;                                      // 0x0520(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, HasGetValueTypeHash)
	class FString                                 Enable_Materials;                                  // 0x0530(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, HasGetValueTypeHash)
	struct FVeryHigh                              Very_High;                                         // 0x0540(0x1ED0)(Edit, BlueprintVisible, HasGetValueTypeHash)
	struct FHigh                                  High;                                              // 0x2410(0x1ED0)(Edit, BlueprintVisible, HasGetValueTypeHash)
	struct FMedium                                Medium;                                            // 0x42E0(0x1ED0)(Edit, BlueprintVisible, HasGetValueTypeHash)
	struct FLow                                   Low;                                               // 0x61B0(0x1ED0)(Edit, BlueprintVisible, HasGetValueTypeHash)
	struct FFilm                                  Film;                                              // 0x8080(0x1ED0)(Edit, BlueprintVisible, DisableEditOnInstance, HasGetValueTypeHash)
	struct FDisable                               Disable;                                           // 0x9F50(0x1ED0)(Edit, BlueprintVisible, DisableEditOnInstance, HasGetValueTypeHash)
	struct FXbox                                  Xbox;                                              // 0xBE20(0x1ED0)(Edit, BlueprintVisible, DisableEditOnInstance, HasGetValueTypeHash)
	struct FPS5                                   PS5;                                               // 0xDCF0(0x1ED0)(Edit, BlueprintVisible, DisableEditOnInstance, HasGetValueTypeHash)
	class FString                                 RT_Enable_Reflection_Capture_;                     // 0xFBC0(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, HasGetValueTypeHash)
	class FString                                 AO_Enable_Material;                                // 0xFBD0(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, HasGetValueTypeHash)
	class FString                                 AO_Enable_Two_Sided_Geometry;                      // 0xFBE0(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, HasGetValueTypeHash)
	class FString                                 Enable_Landscape_Detect_Texture_Streaming;         // 0xFBF0(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, HasGetValueTypeHash)
	class FString                                 Enable_Landscape_LOD_UpdateEveryFrame;             // 0xFC00(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, HasGetValueTypeHash)
	class FString                                 Enable_Instanced_Static_Mesh;                      // 0xFC10(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, HasGetValueTypeHash)
	class FString                                 Enable_Instanced_Static_Meshes_Culling;            // 0xFC20(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, HasGetValueTypeHash)
	class FString                                 Instanced_Static_Meshes_Culling_Radius;            // 0xFC30(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, HasGetValueTypeHash)
	class FString                                 Shadow_Max_Batch_Size;                             // 0xFC40(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, HasGetValueTypeHash)
	class FString                                 GI_Diffuse_Threshold;                              // 0xFC50(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, HasGetValueTypeHash)
	class FString                                 Shadow_Denoiser_Max_Batch_Size;                    // 0xFC60(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, HasGetValueTypeHash)
	class FString                                 Enable_Landscape_In_RT;                            // 0xFC70(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, HasGetValueTypeHash)
	class FString                                 RTX_Switch;                                        // 0xFC80(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, HasGetValueTypeHash)
	class FString                                 Enable_Reflection_Test_Roughness;                  // 0xFC90(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, HasGetValueTypeHash)
	double                                        UseShaderWPO;                                      // 0xFCA0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class FString                                 Reflection_Sky_Light_Contribution;                 // 0xFCA8(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, HasGetValueTypeHash)
	class FString                                 GI_Sort_Materials;                                 // 0xFCB8(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, HasGetValueTypeHash)
	class FString                                 GI_Enable_Two_Sided_Geometry;                      // 0xFCC8(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, HasGetValueTypeHash)
	class FString                                 Final_Gather_Distance;                             // 0xFCD8(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, HasGetValueTypeHash)
	class FString                                 Hybrid_Translucency_DepthThreshold_;               // 0xFCE8(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, HasGetValueTypeHash)
	class FString                                 Hybrid_Translucency_Layers;                        // 0xFCF8(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, HasGetValueTypeHash)
	class FString                                 Translucency_Mask_;                                // 0xFD08(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, HasGetValueTypeHash)
	class FString                                 SkyLight_Enable_Materials;                         // 0xFD18(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, HasGetValueTypeHash)
	class FString                                 Shadows_Support_Translucency;                      // 0xFD28(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, HasGetValueTypeHash)
	class FString                                 Support_Light_Function;                            // 0xFD38(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, HasGetValueTypeHash)
	class FString                                 Light_Channel_Support;                             // 0xFD48(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, HasGetValueTypeHash)
	class FString                                 Translucency_Roughness_Multiplier_;                // 0xFD58(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, HasGetValueTypeHash)
	class FString                                 Reflections_Roughness_Multiplier_;                 // 0xFD68(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, HasGetValueTypeHash)
	class FString                                 Hybrid_Reflection;                                 // 0xFD78(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, HasGetValueTypeHash)
	class FString                                 PerMinusLight_Shadow_Casting;                      // 0xFD88(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, HasGetValueTypeHash)
	class FString                                 ParallelMeshBatchSize;                             // 0xFD98(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, HasGetValueTypeHash)
	class FString                                 BuildRayTracingMeshForCaustics;                    // 0xFDA8(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, HasGetValueTypeHash)
	class FString                                 Exclude_Translucents_From_Shadows_;                // 0xFDB8(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, HasGetValueTypeHash)
	class FString                                 Auto_Instance_;                                    // 0xFDC8(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, HasGetValueTypeHash)
	class FString                                 Parallel_Mesh_Batch_Setup_;                        // 0xFDD8(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, HasGetValueTypeHash)
	class FString                                 NonBlockingPipelineCreation_;                      // 0xFDE8(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, HasGetValueTypeHash)
	class FString                                 Enable_Mesh_Caustics;                              // 0xFDF8(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, HasGetValueTypeHash)
	class FString                                 Water_Caustics_Type;                               // 0xFE08(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, HasGetValueTypeHash)
	class FString                                 Water_Caustics_Refractive_Intensity_;              // 0xFE18(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, HasGetValueTypeHash)
	class FString                                 Water_Caustics_Reflective_Intensity_;              // 0xFE28(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, HasGetValueTypeHash)
	class FString                                 Water_Caustics_Fresnel_Base_Reflect_Fraction_;     // 0xFE38(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, HasGetValueTypeHash)
	class FString                                 Water_Caustics_Map_Size_X__;                       // 0xFE48(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, HasGetValueTypeHash)
	class FString                                 Water_Caustics_Map_Size_Y;                         // 0xFE58(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, HasGetValueTypeHash)
	class FString                                 Water_Caustics_Num_Denoise_Passes_;                // 0xFE68(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, HasGetValueTypeHash)
	class FString                                 Water_Caustics_Min_Reflection_Ray_Distance_;       // 0xFE78(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, HasGetValueTypeHash)
	class FString                                 Water_Caustics_Max_Reflection_Ray_Distance_;       // 0xFE88(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, HasGetValueTypeHash)
	class FString                                 Water_Caustics_Min_Refraction_Ray_Distance_;       // 0xFE98(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, HasGetValueTypeHash)
	class FString                                 Water_Caustics_Max_Refraction_Ray_Distance_;       // 0xFEA8(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, HasGetValueTypeHash)
	class FString                                 Water_Caustics_Rect_Light_Temporal_Weight_;        // 0xFEB8(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, HasGetValueTypeHash)
	class FString                                 Mesh_Caustics_Resolution_;                         // 0xFEC8(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, HasGetValueTypeHash)
	class FString                                 Mesh_Caustics_Intensity_;                          // 0xFED8(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, HasGetValueTypeHash)
	class FString                                 Water_Caustics_Buffer_Scale_;                      // 0xFEE8(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, HasGetValueTypeHash)
	class FString                                 Mesh_Caustics_Buffer_Scale_;                       // 0xFEF8(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, HasGetValueTypeHash)
	class FString                                 Mesh_Caustics_Temporal_Strength_;                  // 0xFF08(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, HasGetValueTypeHash)
	class FString                                 Mesh_Caustics_Jitter_;                             // 0xFF18(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, HasGetValueTypeHash)
	class FString                                 Mesh_Caustics_Enable_Dispersion_;                  // 0xFF28(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, HasGetValueTypeHash)
	class FString                                 Mesh_Caustics_Translucent_Reflection_Mode;         // 0xFF38(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, HasGetValueTypeHash)
	class FString                                 Mesh_Caustics_Max_Trace_Depth_;                    // 0xFF48(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, HasGetValueTypeHash)
	class FString                                 Mesh_Caustics_Adaptive_Photon_Size_;               // 0xFF58(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, HasGetValueTypeHash)
	class FString                                 Mesh_Caustics_Enable_Temporal_Filter_;             // 0xFF68(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, HasGetValueTypeHash)
	class FString                                 Mesh_Caustics_Adaptive_Smooth_;                    // 0xFF78(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, HasGetValueTypeHash)
	class FString                                 Mesh_Caustics_Adaptive_Update_Speed_;              // 0xFF88(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, HasGetValueTypeHash)
	class FString                                 Mesh_Caustics_Adaptive_Variance_Gain_;             // 0xFF98(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, HasGetValueTypeHash)
	class FString                                 Mesh_Caustics_Fixed_Light_;                        // 0xFFA8(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, HasGetValueTypeHash)
	class FString                                 Mesh_Caustics_Max_Intensity_;                      // 0xFFB8(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, HasGetValueTypeHash)
	class FString                                 Translucency_Enable_Absorption_;                   // 0xFFC8(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, HasGetValueTypeHash)
	class FString                                 Mesh_Caustics_Soft_Caustics_Sample_;               // 0xFFD8(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, HasGetValueTypeHash)
	class FString                                 Water_Caustics_Refract_Back_Face_Culling_Threshold_; // 0xFFE8(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, HasGetValueTypeHash)
	class FString                                 Water_Caustics_Reflect_Back_Face_Culling_Threshold_; // 0xFFF8(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, HasGetValueTypeHash)
	class FString                                 Water_Caustics_Map_Cascades_;                      // 0x10008(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, HasGetValueTypeHash)
	class FString                                 Water_Caustics_Map_Force_Level_;                   // 0x10018(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, HasGetValueTypeHash)
	class FString                                 Water_Caustics_Map_Cascade_Scale_;                 // 0x10028(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, HasGetValueTypeHash)
	class FString                                 Water_Caustics_Show_Photon_;                       // 0x10038(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, HasGetValueTypeHash)
	class FString                                 Water_Caustics_Photon_Scale;                       // 0x10048(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, HasGetValueTypeHash)
	class FString                                 Mesh_Caustics_Enable_Advanced_Soft_Caustics_;      // 0x10058(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, HasGetValueTypeHash)
	class FString                                 Mesh_Caustics_Mid_Cull_Color_Threshold_;           // 0x10068(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, HasGetValueTypeHash)
	class FString                                 Mesh_Caustics_Final_Cull_Color_Threshold_;         // 0x10078(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, HasGetValueTypeHash)
	class FString                                 Water_Caustics_Cascade_Sampling_Offset_X_;         // 0x10088(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, HasGetValueTypeHash)
	class FString                                 Water_Caustics_Cascade_Sampling_Offset_Y;          // 0x10098(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, HasGetValueTypeHash)
	class FString                                 Water_Caustics_Cascade_Sampling_UVScale_X_;        // 0x100A8(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, HasGetValueTypeHash)
	class FString                                 Water_Caustics_Cascade_Sampling_UVScale_Y_;        // 0x100B8(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, HasGetValueTypeHash)
	class FString                                 Sharpness;                                         // 0x100C8(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, HasGetValueTypeHash)
	class FString                                 DLSS_Enable;                                       // 0x100D8(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, HasGetValueTypeHash)
	class FString                                 Translucency_Enable_TAA_Before_DLSS_;              // 0x100E8(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, HasGetValueTypeHash)
	class FString                                 GI_Max_Light_Count_;                               // 0x100F8(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, HasGetValueTypeHash)
	class FString                                 AO_SPP;                                            // 0x10108(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, HasGetValueTypeHash)
	class FString                                 GI_Denoiser_Type;                                  // 0x10118(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, HasGetValueTypeHash)
	class FString                                 GI_Apply_AO;                                       // 0x10128(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, HasGetValueTypeHash)
	class FString                                 GI_Denoiser_Color_Clamp;                           // 0x10138(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, HasGetValueTypeHash)
	class FString                                 GI_Denoiser_Normal_Tolerance;                      // 0x10148(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, HasGetValueTypeHash)
	class FString                                 Spatial_Normal_Tolerance;                          // 0x10158(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, HasGetValueTypeHash)
	class FString                                 Particle_Reapply_TAA_after_DLSS;                   // 0x10168(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, HasGetValueTypeHash)
	class FString                                 Refraction_Background_Sample_Fallback_;            // 0x10178(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, HasGetValueTypeHash)
	class FString                                 GI_Denoise_History_Length;                         // 0x10188(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, HasGetValueTypeHash)
	class FString                                 Spatial_Filter_Iteration;                          // 0x10198(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, HasGetValueTypeHash)
	class FString                                 Translucency_Ignore_Backface_Opacity;              // 0x101A8(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, HasGetValueTypeHash)
	class FString                                 Use_Scene_Light_Dir;                               // 0x101B8(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, HasGetValueTypeHash)
	class FString                                 Enable_Volumetric_Shadow;                          // 0x101C8(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, HasGetValueTypeHash)
	class FString                                 Absorption_Force_Shading_On_Opaque_Objects;        // 0x101D8(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, HasGetValueTypeHash)
	class FString                                 Mesh_Caustics_Max_Ray_Distance;                    // 0x101E8(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, HasGetValueTypeHash)
	class FString                                 Mesh_Caustics_Temporal_Color_Tolerance;            // 0x101F8(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, HasGetValueTypeHash)
	class FString                                 GI_Diffuse_Boost;                                  // 0x10208(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, HasGetValueTypeHash)
	class FString                                 Reflected_Translucency_Mode;                       // 0x10218(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, HasGetValueTypeHash)
	class FString                                 Reflected_Translucency_Max_Bounces;                // 0x10228(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, HasGetValueTypeHash)
	class FString                                 Reflected_Translucency_Transmission_Threshold;     // 0x10238(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, HasGetValueTypeHash)
	class FString                                 Half_Res_Refraction;                               // 0x10248(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, HasGetValueTypeHash)
	class FString                                 AO_Denoiser_History_Convolution_Sample_Count_;     // 0x10258(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, HasGetValueTypeHash)
	class FString                                 Frames_Until_Feature_Desturction;                  // 0x10268(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, HasGetValueTypeHash)
	class FString                                 Dilate_Motion_Vectors;                             // 0x10278(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, HasGetValueTypeHash)
	class FString                                 Reflections_TAA;                                   // 0x10288(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, HasGetValueTypeHash)
	class FString                                 Water_Reflections_TAA;                             // 0x10298(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, HasGetValueTypeHash)
	class FString                                 Instanced_Static_Meshes_Culling_Angle;             // 0x102A8(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, HasGetValueTypeHash)
	uint8                                         Pad_102B8[0x8];                                    // 0x102B8(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	struct FPostProcessSettings                   RTX_Post_Process_Settings;                         // 0x102C0(0x07B0)(Edit, BlueprintVisible, DisableEditOnInstance)
	double                                        RTX_Post_Process_Weight;                           // 0x10A70(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class FString                                 Enable_Translucency_in_Reflection;                 // 0x10A78(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, HasGetValueTypeHash)
	bool                                          Unbound;                                           // 0x10A88(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_10A89[0x7];                                    // 0x10A89(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	double                                        RTX_Post_Process_Priority;                         // 0x10A90(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class FString                                 FinalGather_UseReservoirResampling;                // 0x10A98(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, HasGetValueTypeHash)
	class FString                                 GI_Metalic_Support;                                // 0x10AA8(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, HasGetValueTypeHash)
	class FString                                 GI_Denoiser_Spatial_Filter_Type;                   // 0x10AB8(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, HasGetValueTypeHash)
	class FString                                 GI_Denoiser_Use_SH;                                // 0x10AC8(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, HasGetValueTypeHash)
	class FString                                 GI_Denoiser_SH_Sharpness;                          // 0x10AD8(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, HasGetValueTypeHash)
	class FString                                 ATrous_Depth_Tolerance_;                           // 0x10AE8(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, HasGetValueTypeHash)
	class FString                                 Final_Gather_SkyLight_Intensity_;                  // 0x10AF8(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, HasGetValueTypeHash)
	class FString                                 Final_Gather_SkyLight_IndirectMultiplier_;         // 0x10B08(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, HasGetValueTypeHash)
	class FString                                 Instanced_Static_Meshes_Evaluate_WPO;              // 0x10B18(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, HasGetValueTypeHash)
	class FString                                 Instanced_Static_Meshes_Simulation_Count;          // 0x10B28(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, HasGetValueTypeHash)
	class FString                                 Shadow_UseBiasForSkipWPOEval;                      // 0x10B38(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, HasGetValueTypeHash)
	class FString                                 Shadow_MaxBiasForInexactGeometry;                  // 0x10B48(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, HasGetValueTypeHash)
	class FString                                 Enable_Ray_Tracing_Culling;                        // 0x10B58(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, HasGetValueTypeHash)
	class FString                                 Ray_Tracing_Culling_Angle;                         // 0x10B68(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, HasGetValueTypeHash)
	class FString                                 Ray_Tracing_Culling_Radius;                        // 0x10B78(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, HasGetValueTypeHash)
	class FString                                 Sky_Light_Screen_Percentage;                       // 0x10B88(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, HasGetValueTypeHash)
	class FString                                 FinalGather_Iterations_;                           // 0x10B98(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, HasGetValueTypeHash)
	class FString                                 FinalGather_Filter_Width;                          // 0x10BA8(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, HasGetValueTypeHash)
	class FString                                 GI_Firefly_Suppression;                            // 0x10BB8(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, HasGetValueTypeHash)
	class FString                                 Reflections_EnableTwoSidedGeometry_;               // 0x10BC8(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, HasGetValueTypeHash)
	class FString                                 GeometryCache;                                     // 0x10BD8(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, HasGetValueTypeHash)
	class FString                                 StaticMeshes;                                      // 0x10BE8(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, HasGetValueTypeHash)
	class FString                                 StaticMeshes_Enable_WPO_;                          // 0x10BF8(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, HasGetValueTypeHash)
	class FString                                 StaticMeshes_Enable_WPO_Culling;                   // 0x10C08(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, HasGetValueTypeHash)
	class FString                                 StaticMeshes_WPO_Culling_Radius_;                  // 0x10C18(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, HasGetValueTypeHash)
	class FString                                 SkeletalMeshes_;                                   // 0x10C28(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, HasGetValueTypeHash)
	class FString                                 ProceduralMeshes_;                                 // 0x10C38(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, HasGetValueTypeHash)
	class FString                                 NiagaraMeshes;                                     // 0x10C48(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, HasGetValueTypeHash)
	class FString                                 NiagaraRibbons;                                    // 0x10C58(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, HasGetValueTypeHash)
	class FString                                 NiagaraSprites;                                    // 0x10C68(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, HasGetValueTypeHash)
	class FString                                 GI_Directional_Light;                              // 0x10C78(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, HasGetValueTypeHash)
	class FString                                 GI_Point_Light;                                    // 0x10C88(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, HasGetValueTypeHash)
	class FString                                 GI_Rect_Light;                                     // 0x10C98(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, HasGetValueTypeHash)
	class FString                                 GI_Sky_Light;                                      // 0x10CA8(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, HasGetValueTypeHash)
	class FString                                 GI_Spot_Light;                                     // 0x10CB8(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, HasGetValueTypeHash)
	class FString                                 Shadows_Directional;                               // 0x10CC8(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, HasGetValueTypeHash)
	class FString                                 Shadows_Point;                                     // 0x10CD8(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, HasGetValueTypeHash)
	class FString                                 Shadows_Rect;                                      // 0x10CE8(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, HasGetValueTypeHash)
	class FString                                 Shadows_Spot;                                      // 0x10CF8(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, HasGetValueTypeHash)
	class FString                                 AO_UseBiasForSkipWPOEval_;                         // 0x10D08(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, HasGetValueTypeHash)
	class FString                                 AO_MaxBiasForInexactGeometry_;                     // 0x10D18(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, HasGetValueTypeHash)
	class FString                                 GI_Reservoir_Update_Interval_;                     // 0x10D28(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, HasGetValueTypeHash)
	class FString                                 Final_Gather_Normal_From_Depth;                    // 0x10D38(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, HasGetValueTypeHash)
	class FString                                 Final_Gather_Max_Reuse_Weight;                     // 0x10D48(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, HasGetValueTypeHash)
	class FString                                 Final_Gather_Aggressive_Reservoir_Reuse_;          // 0x10D58(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, HasGetValueTypeHash)
	class FString                                 GIDenoise_ATrous_Filter_Width;                     // 0x10D68(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, HasGetValueTypeHash)
	class FString                                 WaterCaustics_ReflectiveNormalScale_;              // 0x10D78(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, HasGetValueTypeHash)
	class FString                                 WaterCaustics_RefractiveNormalScale_;              // 0x10D88(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, HasGetValueTypeHash)
	class FString                                 Max_Under_Coat_Bounces_;                           // 0x10D98(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, HasGetValueTypeHash)
	bool                                          Enable_Adaptive_Reflection_Based_On_Player_Speed;  // 0x10DA8(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_10DA9[0x7];                                    // 0x10DA9(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 DynamicGeometryLastRenderTimeUpdateDistance_;      // 0x10DB0(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, HasGetValueTypeHash)
	double                                        RTX_Tick_Interval;                                 // 0x10DC0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        Player_Max_Velocity_Threshold;                     // 0x10DC8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        Adaptive_Screen_Res_Factor;                        // 0x10DD0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        Player_Current_Velocity;                           // 0x10DD8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Enable_Adaptive_Screen_Res;                        // 0x10DE0(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Use_Adaptive_Water_Caustics_Map_Resolution;        // 0x10DE1(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Enable_Adaptive_RTX_Render;                        // 0x10DE2(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_10DE3[0x5];                                    // 0x10DE3(0x0005)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 Enable_RTX_DI;                                     // 0x10DE8(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, HasGetValueTypeHash)
	class FString                                 Enable_NRD;                                        // 0x10DF8(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, HasGetValueTypeHash)
	ERTXDI_Quality                                RTXDI_Quality;                                     // 0x10E08(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_10E09[0x7];                                    // 0x10E09(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 GI_Accumulate_Emissive;                            // 0x10E10(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, HasGetValueTypeHash)
	class FString                                 GI_MultiBounce_Interval;                           // 0x10E20(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, HasGetValueTypeHash)
	bool                                          RTX_Gate;                                          // 0x10E30(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_10E31[0x7];                                    // 0x10E31(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 Enable_Ray_Traced_DOF;                             // 0x10E38(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, HasGetValueTypeHash)
	class FString                                 Transmission_Sampling_Distance_Culling_;           // 0x10E48(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, HasGetValueTypeHash)
	class FString                                 Translucency_AtmosphericFog_;                      // 0x10E58(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, HasGetValueTypeHash)
	class FString                                 Exclude_Decals_;                                   // 0x10E68(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, HasGetValueTypeHash)
	class FString                                 Water_Caustics_View_Culling;                       // 0x10E78(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, HasGetValueTypeHash)
	class FString                                 Shadows_LODTransitionStart_;                       // 0x10E88(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, HasGetValueTypeHash)
	class FString                                 Shadows_LODTransitionEnd_;                         // 0x10E98(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, HasGetValueTypeHash)
	class FString                                 Water_Caustics_Enable_Shadow_Ray;                  // 0x10EA8(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, HasGetValueTypeHash)
	class FString                                 Water_Caustics_Shadow_Ray_Max_Distance;            // 0x10EB8(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, HasGetValueTypeHash)
	class FString                                 Translucency_Enable_GI;                            // 0x10EC8(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, HasGetValueTypeHash)
	class FString                                 HalfResSceneColor_TAA;                             // 0x10ED8(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, HasGetValueTypeHash)
	class FString                                 Enable_ExperimentalDeferred_Reflection;            // 0x10EE8(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, HasGetValueTypeHash)
	class FString                                 Contact_Shadow;                                    // 0x10EF8(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, HasGetValueTypeHash)
	class FString                                 Shadow_CSM_Max_Cascade;                            // 0x10F08(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, HasGetValueTypeHash)
	class FString                                 Shadows_Accept_First_Hit;                          // 0x10F18(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, HasGetValueTypeHash)
	class FString                                 Auto_Exposure;                                     // 0x10F28(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, HasGetValueTypeHash)
	class FString                                 Water_Caustics_Epsilon_Area;                       // 0x10F38(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, HasGetValueTypeHash)
	class FString                                 Spatial_Reservoir_Samples_;                        // 0x10F48(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, HasGetValueTypeHash)
	class FString                                 PrimaryRays_ReflectionCaptures;                    // 0x10F58(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, HasGetValueTypeHash)
	class FString                                 GeometryCollection;                                // 0x10F68(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, HasGetValueTypeHash)
	class FString                                 Nanite_Shadow_Mode_HybirdMode_DepthThreshold;      // 0x10F78(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, HasGetValueTypeHash)
	class FString                                 Nanite_Shadow_Mode_HybirdMode_RayTraceNear;        // 0x10F88(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, HasGetValueTypeHash)
	class FString                                 Translucency_UseLumenLighting_;                    // 0x10F98(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, HasGetValueTypeHash)
	class FString                                 GI_Enable_Simple_RefractShadow_;                   // 0x10FA8(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, HasGetValueTypeHash)
	class FString                                 Reflection_Diffuse_Boost;                          // 0x10FB8(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, HasGetValueTypeHash)
	class FString                                 First_Layer_Reflection_GI_Max_Roughness;           // 0x10FC8(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, HasGetValueTypeHash)
	class FString                                 UniformLightSelection;                             // 0x10FD8(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, HasGetValueTypeHash)
	class FString                                 GI_SER;                                            // 0x10FE8(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, HasGetValueTypeHash)
	class FString                                 FinalGather_UseTraceRayInline;                     // 0x10FF8(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, HasGetValueTypeHash)
	class FString                                 GI_EnableTransmission;                             // 0x11008(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, HasGetValueTypeHash)
	class FString                                 TransmissionHitThreshold;                          // 0x11018(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, HasGetValueTypeHash)
	class FString                                 Shadows_AvoidSelfIntersectionTraceDistance;        // 0x11028(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, HasGetValueTypeHash)
	class FString                                 Shadows_SupportTwoSidedFoliage;                    // 0x11038(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, HasGetValueTypeHash)
	class FString                                 Reflection_SER;                                    // 0x11048(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, HasGetValueTypeHash)
	class FString                                 First_Layer_Reflection_GI;                         // 0x11058(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, HasGetValueTypeHash)
	class FString                                 Reflection_GI_Screen_Percentage_;                  // 0x11068(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, HasGetValueTypeHash)
	class FString                                 _Reflection_GI_Denoise;                            // 0x11078(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, HasGetValueTypeHash)
	class FString                                 Reflection_Restir_GI_;                             // 0x11088(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, HasGetValueTypeHash)
	class FString                                 Translucency_SER;                                  // 0x11098(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, HasGetValueTypeHash)
	class FString                                 PrimaryRays_ReflectionMinRayDistance;              // 0x110A8(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, HasGetValueTypeHash)
	class FString                                 PrimaryRays_RefractionMinRayDistance;              // 0x110B8(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, HasGetValueTypeHash)
	class FString                                 Lumen_HW_RayTracing;                               // 0x110C8(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, HasGetValueTypeHash)
	class FString                                 Lumen_HW_Lighting_Mode;                            // 0x110D8(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, HasGetValueTypeHash)
	class FString                                 Lumen_Reflections_Allow_;                          // 0x110E8(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, HasGetValueTypeHash)
	class FString                                 Lumen_HW_Reflections;                              // 0x110F8(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, HasGetValueTypeHash)
	class FString                                 Lumen_Reflections_MaxRoughnessToTrace;             // 0x11108(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, HasGetValueTypeHash)
	class FString                                 Lumen_HW_Reflections_Trace_Translucent;            // 0x11118(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, HasGetValueTypeHash)
	class FString                                 Lumen_HW_Reflections_Trace_Translucent_MaxHitCount; // 0x11128(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, HasGetValueTypeHash)
	class FString                                 Lumen_HW_Reflections_Trace_Translucent_TMax;       // 0x11138(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, HasGetValueTypeHash)
	class FString                                 Lumen_HW_Reflections_Trace_Translucent_TMin;       // 0x11148(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, HasGetValueTypeHash)
	class FString                                 Lumen_HW_Reflections_Trace_Translucent_Type;       // 0x11158(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, HasGetValueTypeHash)
	class FString                                 Lumen_TranslucencyReflections_FrontLayer_Allow_;   // 0x11168(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, HasGetValueTypeHash)
	class FString                                 Lumen_TranslucencyReflections_FrontLayer_Enable_;  // 0x11178(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, HasGetValueTypeHash)
	class FString                                 Lumen_DiffuseIndirect_Allow_;                      // 0x11188(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, HasGetValueTypeHash)
	class FString                                 LumenScene_FarField_;                              // 0x11198(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, HasGetValueTypeHash)
	class FString                                 ScreenProbeGather_ScreenTraces;                    // 0x111A8(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, HasGetValueTypeHash)
	class FString                                 LumenScene_Radiosity_;                             // 0x111B8(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, HasGetValueTypeHash)
	class FString                                 Lumen_Visualize_CardPlacement_;                    // 0x111C8(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, HasGetValueTypeHash)
	class FString                                 Lumen_Reflections_ScreenTraces_;                   // 0x111D8(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, HasGetValueTypeHash)
	class FString                                 DynamicGlobalIlluminationMethod;                   // 0x111E8(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, HasGetValueTypeHash)
	class FString                                 ReflectionMethod;                                  // 0x111F8(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, HasGetValueTypeHash)
	class FString                                 Reflections_MaxRoughnessToTraceForFoliage;         // 0x11208(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, HasGetValueTypeHash)
	class FString                                 Lumen_Reflection_SER;                              // 0x11218(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, HasGetValueTypeHash)
	class FString                                 Shadows_UseTraceRayInline;                         // 0x11228(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, HasGetValueTypeHash)
	class FString                                 DLSS_Preset;                                       // 0x11238(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, HasGetValueTypeHash)
	class FString                                 DLSS_PreferNISSharpen;                             // 0x11248(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, HasGetValueTypeHash)
	class FString                                 Lumen_ScreenProbeGather_SER;                       // 0x11258(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, HasGetValueTypeHash)
	class FString                                 Lumen_RadianceCache_SER;                           // 0x11268(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, HasGetValueTypeHash)
	class FString                                 GenerateRTSceneDepth__;                            // 0x11278(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, HasGetValueTypeHash)
	class FString                                 Lighting_MaxLights;                                // 0x11288(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, HasGetValueTypeHash)
	class FString                                 Lighting_MaxShadowLights;                          // 0x11298(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, HasGetValueTypeHash)
	class FString                                 Lighting_ObeyShadows;                              // 0x112A8(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, HasGetValueTypeHash)
	class FString                                 GI_MaxShadowDistance;                              // 0x112B8(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, HasGetValueTypeHash)
	class FString                                 PrioritizeDirectional;                             // 0x112C8(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, HasGetValueTypeHash)
	class FString                                 Shadow_MaxLights;                                  // 0x112D8(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, HasGetValueTypeHash)
	class FString                                 Shadow_MaxDenoisedLights;                          // 0x112E8(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, HasGetValueTypeHash)
	class FString                                 Shadow_FallbackToSharp;                            // 0x112F8(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, HasGetValueTypeHash)
	class FString                                 RTSceneDepthTolerance;                             // 0x11308(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, HasGetValueTypeHash)
	class FString                                 TemporalReservoirSamples;                          // 0x11318(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, HasGetValueTypeHash)
	class FString                                 Shadows_PointLightMode;                            // 0x11328(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, HasGetValueTypeHash)
	class FString                                 ReSTIRMode;                                        // 0x11338(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, HasGetValueTypeHash)
	class FString                                 IntensityScale;                                    // 0x11348(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, HasGetValueTypeHash)
	class FString                                 FinalGather_SpatialSearchRadiusRatio;              // 0x11358(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, HasGetValueTypeHash)
	float                                         UseRasterCaustics;                                 // 0x11368(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_1136C[0x4];                                    // 0x1136C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 VolumetricScatteringIntensityScale_;               // 0x11370(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, HasGetValueTypeHash)
	class FString                                 SkyLightLeakFactor;                                // 0x11380(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, HasGetValueTypeHash)
	class FString                                 UseSkeletalMeshLODBias;                            // 0x11390(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, HasGetValueTypeHash)
	class FString                                 DiffuseIndirectTechnique;                          // 0x113A0(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, HasGetValueTypeHash)
	class FString                                 Relax_Atrous_DiffuseLobeAngleFraction;             // 0x113B0(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, HasGetValueTypeHash)
	class FString                                 Relax_Atrous_DiffuseMinLuminanceWeight;            // 0x113C0(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, HasGetValueTypeHash)
	class FString                                 Relax_Atrous_DiffusePhiLuminance;                  // 0x113D0(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, HasGetValueTypeHash)
	class FString                                 Relax_Atrous_Iterations;                           // 0x113E0(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, HasGetValueTypeHash)
	class FString                                 Relax_FireflySupression;                           // 0x113F0(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, HasGetValueTypeHash)
	class FString                                 Relax_HistoryFix_FrameNum;                         // 0x11400(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, HasGetValueTypeHash)
	class FString                                 Relax_DiffuseFastMaxAccumulatedFrameNum;           // 0x11410(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, HasGetValueTypeHash)
	class FString                                 Relax_DiffuseMaxAccumulatedFrameNum;               // 0x11420(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, HasGetValueTypeHash)
	class FString                                 Relax_DisocclusionThreshold;                       // 0x11430(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, HasGetValueTypeHash)
	class FString                                 NiagaraRibbons_Reorientation;                      // 0x11440(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, HasGetValueTypeHash)
	class FString                                 NiagaraSprites_Reorientation;                      // 0x11450(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, HasGetValueTypeHash)
	class FString                                 ReorientedNiagara_CullingDistance;                 // 0x11460(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, HasGetValueTypeHash)
	class FString                                 UseLumenSkyLightLookup;                            // 0x11470(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, HasGetValueTypeHash)
	class FString                                 AsyncBuild;                                        // 0x11480(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, HasGetValueTypeHash)
	class FString                                 DLSS_RR_Enable;                                    // 0x11490(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, HasGetValueTypeHash)
	class FString                                 FinalGather_MaxIntensity;                          // 0x114A0(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, HasGetValueTypeHash)
	class FString                                 MaxBuiltPrimitivesPerFrame;                        // 0x114B0(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, HasGetValueTypeHash)
	class FString                                 TransmissionIntensityScale_;                       // 0x114C0(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, HasGetValueTypeHash)
	class FString                                 CreatePointsInHalfRes_;                            // 0x114D0(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, HasGetValueTypeHash)
	class FString                                 NaniteDepth_UseTraceRayInline;                     // 0x114E0(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, HasGetValueTypeHash)
	class FString                                 Sharc_Enable;                                      // 0x114F0(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, HasGetValueTypeHash)
	class FString                                 GI_Enable_Sharc;                                   // 0x11500(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, HasGetValueTypeHash)
	class FString                                 ReorientedNiagara_CullingAngle;                    // 0x11510(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, HasGetValueTypeHash)
	class FString                                 RT_Shadows_Mode;                                   // 0x11520(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, HasGetValueTypeHash)
	class FString                                 DLSSDRandomFactor_;                                // 0x11530(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, HasGetValueTypeHash)
	class FString                                 ReorientedSprite_HalfRes;                          // 0x11540(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, HasGetValueTypeHash)
	class FString                                 Sharc_DownscaleFactor;                             // 0x11550(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, HasGetValueTypeHash)
	class FString                                 HeterogeneousVolumes_RayTracedShadowMode;          // 0x11560(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, HasGetValueTypeHash)
	class FString                                 InstancedStaticMeshes_EnableInstancesCluster;      // 0x11570(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, HasGetValueTypeHash)
	class FString                                 InstancedStaticMeshes_InstancesClusterThreshold;   // 0x11580(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, HasGetValueTypeHash)
	class FString                                 InstancedStaticMeshes_Culling_ClusterSize;         // 0x11590(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, HasGetValueTypeHash)
	class FString                                 InstancedStaticMeshes_LodBias;                     // 0x115A0(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, HasGetValueTypeHash)
	class FString                                 Foliage_UseRTDepthInRTPasses;                      // 0x115B0(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, HasGetValueTypeHash)
	class FString                                 Sharc_Mode;                                        // 0x115C0(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, HasGetValueTypeHash)
	class FString                                 SingleLayer_Reflection;                            // 0x115D0(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, HasGetValueTypeHash)
	class FString                                 SpatialSampleMaxShadowDistance;                    // 0x115E0(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, HasGetValueTypeHash)
	class FString                                 Reflections_MinClearCoatLevel;                     // 0x115F0(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, HasGetValueTypeHash)
	class FString                                 ShadowRayInSpatialReuse;                           // 0x11600(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, HasGetValueTypeHash)
	class FString                                 DirectionalFakeHairSurfaceDensity;                 // 0x11610(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, HasGetValueTypeHash)
	class FString                                 ShadowIntensityScale;                              // 0x11620(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, HasGetValueTypeHash)
	class FString                                 GI_SpecularFactor;                                 // 0x11630(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, HasGetValueTypeHash)
	class FString                                 SpecularMaxRoughness;                              // 0x11640(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, HasGetValueTypeHash)
	class FString                                 SpecularLobeAngleFraction;                         // 0x11650(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, HasGetValueTypeHash)
	class FString                                 SpecularBlurRadius;                                // 0x11660(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, HasGetValueTypeHash)
	class FString                                 NRD_Specular_Denoiser;                             // 0x11670(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, HasGetValueTypeHash)
	class FString                                 Hybrid_Inset_Shadow;                               // 0x11680(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, HasGetValueTypeHash)
	class FString                                 Reflections_GIHybrid;                              // 0x11690(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, HasGetValueTypeHash)
	class FString                                 Niagara_UseRayTracingShadow;                       // 0x116A0(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, HasGetValueTypeHash)
	class FString                                 Niagara_Shadow_SupportLocalLight;                  // 0x116B0(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, HasGetValueTypeHash)
	class FString                                 SpecularLobeAngleSlack;                            // 0x116C0(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, HasGetValueTypeHash)
	class FString                                 ReflectionGI_EnableVisibilityTest_;                // 0x116D0(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, HasGetValueTypeHash)
	class FString                                 ContactShadows_PatchRTShadow;                      // 0x116E0(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, HasGetValueTypeHash)
	class FString                                 Particle_IndirectLightingScale;                    // 0x116F0(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, HasGetValueTypeHash)
	class FString                                 RayTMinOffset;                                     // 0x11700(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, HasGetValueTypeHash)
	class FString                                 FoliageExpandOffset;                               // 0x11710(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, HasGetValueTypeHash)
	class FString                                 HalfRes_DLSSDRandomFactor;                         // 0x11720(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, HasGetValueTypeHash)
	class FString                                 SpecularMinLuminanceWeight;                        // 0x11730(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, HasGetValueTypeHash)
	class FString                                 HalfRes_DLSSRR_GI_IntensityScale;                  // 0x11740(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, HasGetValueTypeHash)
	bool                                          Enable_GI_Intensity_Override;                      // 0x11750(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_11751[0x7];                                    // 0x11751(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 GI_LightCullingDistance;                           // 0x11758(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, HasGetValueTypeHash)
	class FString                                 Transmission_HairScale;                            // 0x11768(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, HasGetValueTypeHash)
	class FString                                 VolumetricFog_GridPixelSize;                       // 0x11778(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, HasGetValueTypeHash)
	class FString                                 VolumetricFog_GridSizeZ;                           // 0x11788(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, HasGetValueTypeHash)
	class FString                                 SingleLayer_Reflection_ScreenPercentage;           // 0x11798(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, HasGetValueTypeHash)
	class FString                                 SingleLayer_Reflection_GI_ScreenPercentage;        // 0x117A8(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, HasGetValueTypeHash)
	class FString                                 SingleLayer_Reflection_GI_Enable;                  // 0x117B8(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, HasGetValueTypeHash)
	class FString                                 SLW_Enable_Reflection;                             // 0x117C8(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, HasGetValueTypeHash)
	class FString                                 Reflections_OpaqueSurfaces;                        // 0x117D8(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, HasGetValueTypeHash)
	bool                                          RT_Artist_Parameter_Override;                      // 0x117E8(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_117E9[0x7];                                    // 0x117E9(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 MaxPatchContactShadowLength;                       // 0x117F0(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, HasGetValueTypeHash)
	class FString                                 Reflections_ForceDisableSkyLight;                  // 0x11800(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, HasGetValueTypeHash)
	class FString                                 Tonemapper_Sharpen;                                // 0x11810(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, HasGetValueTypeHash)
	class FString                                 InstancedStaticMeshes_SimulationClusterRadius;     // 0x11820(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, HasGetValueTypeHash)

public:
	void Adaptive_Reflection_and_Water_Caustics_Based_on_Player_Speed();
	void Check_DLSSRR();
	void Construct_RT_Parameter();
	void Enable_DLSS_RR(bool Enable_DLSSRR);
	void Enable_DLSS_RR_0(bool Enable_DLSSD);
	void ExecuteUbergraph_BP_RT_Quality_Parameters(int32 EntryPoint);
	void Force_Override_RT_Parameters__On_AA_Status();
	void Force_Override_RT_Parameters__On_Screen_Res();
	void Force_Override_RT_Parameters_DLAA_Quality();
	void GI_Intensity_Override();
	void Ini_RT_Parameter(const struct FRT_Parameters& RT_Parameters);
	void Override_Light_Source_Radius_And_Specular_Scale();
	void Override_RT_Parameters_Based_on_Screenpercentage();
	void RT_Custom_Preset(const struct FRT_Parameters& RTX_Parameters);
	void RTX_Force_Override();
	void RTX_Switch_DLSS_From_UI(const class FString& AA_Method, const class FString& DLSS_Quality, bool Enable_Override_From_UI);
	void RTX_Switch_Preset_From_UI(Enum_RT_Quality_Preset RTX_Preset);
	void SetText_Display();
	void Swtich_RT_MPC();

public:
	static class UClass* StaticClass()
	{
		return StaticBPGeneratedClassImpl<"BP_RT_Quality_Parameters_C">();
	}
	static class ABP_RT_Quality_Parameters_C* GetDefaultObj()
	{
		return GetDefaultObjImpl<ABP_RT_Quality_Parameters_C>();
	}
};
//static_assert(alignof(ABP_RT_Quality_Parameters_C) == 0x000010, "Wrong alignment on ABP_RT_Quality_Parameters_C");
//static_assert(sizeof(ABP_RT_Quality_Parameters_C) == 0x011830, "Wrong size on ABP_RT_Quality_Parameters_C");
//static_assert(offsetof(ABP_RT_Quality_Parameters_C, UberGraphFrame) == 0x000278, "Member 'ABP_RT_Quality_Parameters_C::UberGraphFrame' has a wrong offset!");
//static_assert(offsetof(ABP_RT_Quality_Parameters_C, DefaultSceneRoot) == 0x000280, "Member 'ABP_RT_Quality_Parameters_C::DefaultSceneRoot' has a wrong offset!");
//static_assert(offsetof(ABP_RT_Quality_Parameters_C, Enable_Reflection) == 0x000288, "Member 'ABP_RT_Quality_Parameters_C::Enable_Reflection' has a wrong offset!");
//static_assert(offsetof(ABP_RT_Quality_Parameters_C, Enable_AO) == 0x000298, "Member 'ABP_RT_Quality_Parameters_C::Enable_AO' has a wrong offset!");
//static_assert(offsetof(ABP_RT_Quality_Parameters_C, Enable_Shadow) == 0x0002A8, "Member 'ABP_RT_Quality_Parameters_C::Enable_Shadow' has a wrong offset!");
//static_assert(offsetof(ABP_RT_Quality_Parameters_C, Enable_Translucensy) == 0x0002B8, "Member 'ABP_RT_Quality_Parameters_C::Enable_Translucensy' has a wrong offset!");
//static_assert(offsetof(ABP_RT_Quality_Parameters_C, Enable_Translucency_Height_Fog) == 0x0002C8, "Member 'ABP_RT_Quality_Parameters_C::Enable_Translucency_Height_Fog' has a wrong offset!");
//static_assert(offsetof(ABP_RT_Quality_Parameters_C, Enable_Translucency_Shadows) == 0x0002D8, "Member 'ABP_RT_Quality_Parameters_C::Enable_Translucency_Shadows' has a wrong offset!");
//static_assert(offsetof(ABP_RT_Quality_Parameters_C, Enable_Refraction) == 0x0002E8, "Member 'ABP_RT_Quality_Parameters_C::Enable_Refraction' has a wrong offset!");
//static_assert(offsetof(ABP_RT_Quality_Parameters_C, Translucency_Max_Roughness) == 0x0002F8, "Member 'ABP_RT_Quality_Parameters_C::Translucency_Max_Roughness' has a wrong offset!");
//static_assert(offsetof(ABP_RT_Quality_Parameters_C, Translucency_Max_Ray_Distance_) == 0x000308, "Member 'ABP_RT_Quality_Parameters_C::Translucency_Max_Ray_Distance_' has a wrong offset!");
//static_assert(offsetof(ABP_RT_Quality_Parameters_C, Max_Refraction_Rays) == 0x000318, "Member 'ABP_RT_Quality_Parameters_C::Max_Refraction_Rays' has a wrong offset!");
//static_assert(offsetof(ABP_RT_Quality_Parameters_C, Evaluate_Materials_in_Shadow) == 0x000328, "Member 'ABP_RT_Quality_Parameters_C::Evaluate_Materials_in_Shadow' has a wrong offset!");
//static_assert(offsetof(ABP_RT_Quality_Parameters_C, Shadow_Enable_Two_Sided_Geometry) == 0x000338, "Member 'ABP_RT_Quality_Parameters_C::Shadow_Enable_Two_Sided_Geometry' has a wrong offset!");
//static_assert(offsetof(ABP_RT_Quality_Parameters_C, Enable_Height_Fog_in_Reflection) == 0x000348, "Member 'ABP_RT_Quality_Parameters_C::Enable_Height_Fog_in_Reflection' has a wrong offset!");
//static_assert(offsetof(ABP_RT_Quality_Parameters_C, Reflection_Sort_Materials) == 0x000358, "Member 'ABP_RT_Quality_Parameters_C::Reflection_Sort_Materials' has a wrong offset!");
//static_assert(offsetof(ABP_RT_Quality_Parameters_C, Enable_Reflection_Shadow) == 0x000368, "Member 'ABP_RT_Quality_Parameters_C::Enable_Reflection_Shadow' has a wrong offset!");
//static_assert(offsetof(ABP_RT_Quality_Parameters_C, Reflection_Max_Roughness) == 0x000378, "Member 'ABP_RT_Quality_Parameters_C::Reflection_Max_Roughness' has a wrong offset!");
//static_assert(offsetof(ABP_RT_Quality_Parameters_C, Reflection_Screen_Percentage) == 0x000388, "Member 'ABP_RT_Quality_Parameters_C::Reflection_Screen_Percentage' has a wrong offset!");
//static_assert(offsetof(ABP_RT_Quality_Parameters_C, Box_Reletive_Scale) == 0x000398, "Member 'ABP_RT_Quality_Parameters_C::Box_Reletive_Scale' has a wrong offset!");
//static_assert(offsetof(ABP_RT_Quality_Parameters_C, Hidden_in_Game) == 0x0003B0, "Member 'ABP_RT_Quality_Parameters_C::Hidden_in_Game' has a wrong offset!");
//static_assert(offsetof(ABP_RT_Quality_Parameters_C, Normal_Bias) == 0x0003B8, "Member 'ABP_RT_Quality_Parameters_C::Normal_Bias' has a wrong offset!");
//static_assert(offsetof(ABP_RT_Quality_Parameters_C, Debug_Force_Opaque) == 0x0003C8, "Member 'ABP_RT_Quality_Parameters_C::Debug_Force_Opaque' has a wrong offset!");
//static_assert(offsetof(ABP_RT_Quality_Parameters_C, Debug_Disable_Triangle_Cull) == 0x0003D8, "Member 'ABP_RT_Quality_Parameters_C::Debug_Disable_Triangle_Cull' has a wrong offset!");
//static_assert(offsetof(ABP_RT_Quality_Parameters_C, Reflection_Max_Ray_Distance) == 0x0003E8, "Member 'ABP_RT_Quality_Parameters_C::Reflection_Max_Ray_Distance' has a wrong offset!");
//static_assert(offsetof(ABP_RT_Quality_Parameters_C, Reflection_Min_Ray_Distance) == 0x0003F8, "Member 'ABP_RT_Quality_Parameters_C::Reflection_Min_Ray_Distance' has a wrong offset!");
//static_assert(offsetof(ABP_RT_Quality_Parameters_C, Reflection_Max_Bounces) == 0x000408, "Member 'ABP_RT_Quality_Parameters_C::Reflection_Max_Bounces' has a wrong offset!");
//static_assert(offsetof(ABP_RT_Quality_Parameters_C, Reflection_SPP) == 0x000418, "Member 'ABP_RT_Quality_Parameters_C::Reflection_SPP' has a wrong offset!");
//static_assert(offsetof(ABP_RT_Quality_Parameters_C, Shadow_SPP) == 0x000428, "Member 'ABP_RT_Quality_Parameters_C::Shadow_SPP' has a wrong offset!");
//static_assert(offsetof(ABP_RT_Quality_Parameters_C, Enable_Reflection_Denoiser) == 0x000438, "Member 'ABP_RT_Quality_Parameters_C::Enable_Reflection_Denoiser' has a wrong offset!");
//static_assert(offsetof(ABP_RT_Quality_Parameters_C, Enable_Shadow_Denoiser) == 0x000448, "Member 'ABP_RT_Quality_Parameters_C::Enable_Shadow_Denoiser' has a wrong offset!");
//static_assert(offsetof(ABP_RT_Quality_Parameters_C, Enum_RT_QualitySwitch) == 0x000458, "Member 'ABP_RT_Quality_Parameters_C::Enum_RT_QualitySwitch' has a wrong offset!");
//static_assert(offsetof(ABP_RT_Quality_Parameters_C, GI_type) == 0x000460, "Member 'ABP_RT_Quality_Parameters_C::GI_type' has a wrong offset!");
//static_assert(offsetof(ABP_RT_Quality_Parameters_C, Enable_GI_Denoiser) == 0x000470, "Member 'ABP_RT_Quality_Parameters_C::Enable_GI_Denoiser' has a wrong offset!");
//static_assert(offsetof(ABP_RT_Quality_Parameters_C, GI_EvalSkyLight) == 0x000480, "Member 'ABP_RT_Quality_Parameters_C::GI_EvalSkyLight' has a wrong offset!");
//static_assert(offsetof(ABP_RT_Quality_Parameters_C, GI_MaxBounce) == 0x000490, "Member 'ABP_RT_Quality_Parameters_C::GI_MaxBounce' has a wrong offset!");
//static_assert(offsetof(ABP_RT_Quality_Parameters_C, GI_MaxRayDistance) == 0x0004A0, "Member 'ABP_RT_Quality_Parameters_C::GI_MaxRayDistance' has a wrong offset!");
//static_assert(offsetof(ABP_RT_Quality_Parameters_C, GI_SPP) == 0x0004B0, "Member 'ABP_RT_Quality_Parameters_C::GI_SPP' has a wrong offset!");
//static_assert(offsetof(ABP_RT_Quality_Parameters_C, GI_Screen_Percentage) == 0x0004C0, "Member 'ABP_RT_Quality_Parameters_C::GI_Screen_Percentage' has a wrong offset!");
//static_assert(offsetof(ABP_RT_Quality_Parameters_C, GI_UseRussianRoulette_) == 0x0004D0, "Member 'ABP_RT_Quality_Parameters_C::GI_UseRussianRoulette_' has a wrong offset!");
//static_assert(offsetof(ABP_RT_Quality_Parameters_C, Enable_RT_SkyLight) == 0x0004E0, "Member 'ABP_RT_Quality_Parameters_C::Enable_RT_SkyLight' has a wrong offset!");
//static_assert(offsetof(ABP_RT_Quality_Parameters_C, Enable_SkyLight_Denoiser) == 0x0004F0, "Member 'ABP_RT_Quality_Parameters_C::Enable_SkyLight_Denoiser' has a wrong offset!");
//static_assert(offsetof(ABP_RT_Quality_Parameters_C, SkyLight_Enable_Two_Sided_Geomtry) == 0x000500, "Member 'ABP_RT_Quality_Parameters_C::SkyLight_Enable_Two_Sided_Geomtry' has a wrong offset!");
//static_assert(offsetof(ABP_RT_Quality_Parameters_C, SkyLight_MaxRay_Distance) == 0x000510, "Member 'ABP_RT_Quality_Parameters_C::SkyLight_MaxRay_Distance' has a wrong offset!");
//static_assert(offsetof(ABP_RT_Quality_Parameters_C, SkyLight_SPP) == 0x000520, "Member 'ABP_RT_Quality_Parameters_C::SkyLight_SPP' has a wrong offset!");
//static_assert(offsetof(ABP_RT_Quality_Parameters_C, Enable_Materials) == 0x000530, "Member 'ABP_RT_Quality_Parameters_C::Enable_Materials' has a wrong offset!");
//static_assert(offsetof(ABP_RT_Quality_Parameters_C, Very_High) == 0x000540, "Member 'ABP_RT_Quality_Parameters_C::Very_High' has a wrong offset!");
//static_assert(offsetof(ABP_RT_Quality_Parameters_C, High) == 0x002410, "Member 'ABP_RT_Quality_Parameters_C::High' has a wrong offset!");
//static_assert(offsetof(ABP_RT_Quality_Parameters_C, Medium) == 0x0042E0, "Member 'ABP_RT_Quality_Parameters_C::Medium' has a wrong offset!");
//static_assert(offsetof(ABP_RT_Quality_Parameters_C, Low) == 0x0061B0, "Member 'ABP_RT_Quality_Parameters_C::Low' has a wrong offset!");
//static_assert(offsetof(ABP_RT_Quality_Parameters_C, Film) == 0x008080, "Member 'ABP_RT_Quality_Parameters_C::Film' has a wrong offset!");
//static_assert(offsetof(ABP_RT_Quality_Parameters_C, Disable) == 0x009F50, "Member 'ABP_RT_Quality_Parameters_C::Disable' has a wrong offset!");
//static_assert(offsetof(ABP_RT_Quality_Parameters_C, Xbox) == 0x00BE20, "Member 'ABP_RT_Quality_Parameters_C::Xbox' has a wrong offset!");
//static_assert(offsetof(ABP_RT_Quality_Parameters_C, PS5) == 0x00DCF0, "Member 'ABP_RT_Quality_Parameters_C::PS5' has a wrong offset!");
//static_assert(offsetof(ABP_RT_Quality_Parameters_C, RT_Enable_Reflection_Capture_) == 0x00FBC0, "Member 'ABP_RT_Quality_Parameters_C::RT_Enable_Reflection_Capture_' has a wrong offset!");
//static_assert(offsetof(ABP_RT_Quality_Parameters_C, AO_Enable_Material) == 0x00FBD0, "Member 'ABP_RT_Quality_Parameters_C::AO_Enable_Material' has a wrong offset!");
//static_assert(offsetof(ABP_RT_Quality_Parameters_C, AO_Enable_Two_Sided_Geometry) == 0x00FBE0, "Member 'ABP_RT_Quality_Parameters_C::AO_Enable_Two_Sided_Geometry' has a wrong offset!");
//static_assert(offsetof(ABP_RT_Quality_Parameters_C, Enable_Landscape_Detect_Texture_Streaming) == 0x00FBF0, "Member 'ABP_RT_Quality_Parameters_C::Enable_Landscape_Detect_Texture_Streaming' has a wrong offset!");
//static_assert(offsetof(ABP_RT_Quality_Parameters_C, Enable_Landscape_LOD_UpdateEveryFrame) == 0x00FC00, "Member 'ABP_RT_Quality_Parameters_C::Enable_Landscape_LOD_UpdateEveryFrame' has a wrong offset!");
//static_assert(offsetof(ABP_RT_Quality_Parameters_C, Enable_Instanced_Static_Mesh) == 0x00FC10, "Member 'ABP_RT_Quality_Parameters_C::Enable_Instanced_Static_Mesh' has a wrong offset!");
//static_assert(offsetof(ABP_RT_Quality_Parameters_C, Enable_Instanced_Static_Meshes_Culling) == 0x00FC20, "Member 'ABP_RT_Quality_Parameters_C::Enable_Instanced_Static_Meshes_Culling' has a wrong offset!");
//static_assert(offsetof(ABP_RT_Quality_Parameters_C, Instanced_Static_Meshes_Culling_Radius) == 0x00FC30, "Member 'ABP_RT_Quality_Parameters_C::Instanced_Static_Meshes_Culling_Radius' has a wrong offset!");
//static_assert(offsetof(ABP_RT_Quality_Parameters_C, Shadow_Max_Batch_Size) == 0x00FC40, "Member 'ABP_RT_Quality_Parameters_C::Shadow_Max_Batch_Size' has a wrong offset!");
//static_assert(offsetof(ABP_RT_Quality_Parameters_C, GI_Diffuse_Threshold) == 0x00FC50, "Member 'ABP_RT_Quality_Parameters_C::GI_Diffuse_Threshold' has a wrong offset!");
//static_assert(offsetof(ABP_RT_Quality_Parameters_C, Shadow_Denoiser_Max_Batch_Size) == 0x00FC60, "Member 'ABP_RT_Quality_Parameters_C::Shadow_Denoiser_Max_Batch_Size' has a wrong offset!");
//static_assert(offsetof(ABP_RT_Quality_Parameters_C, Enable_Landscape_In_RT) == 0x00FC70, "Member 'ABP_RT_Quality_Parameters_C::Enable_Landscape_In_RT' has a wrong offset!");
//static_assert(offsetof(ABP_RT_Quality_Parameters_C, RTX_Switch) == 0x00FC80, "Member 'ABP_RT_Quality_Parameters_C::RTX_Switch' has a wrong offset!");
//static_assert(offsetof(ABP_RT_Quality_Parameters_C, Enable_Reflection_Test_Roughness) == 0x00FC90, "Member 'ABP_RT_Quality_Parameters_C::Enable_Reflection_Test_Roughness' has a wrong offset!");
//static_assert(offsetof(ABP_RT_Quality_Parameters_C, UseShaderWPO) == 0x00FCA0, "Member 'ABP_RT_Quality_Parameters_C::UseShaderWPO' has a wrong offset!");
//static_assert(offsetof(ABP_RT_Quality_Parameters_C, Reflection_Sky_Light_Contribution) == 0x00FCA8, "Member 'ABP_RT_Quality_Parameters_C::Reflection_Sky_Light_Contribution' has a wrong offset!");
//static_assert(offsetof(ABP_RT_Quality_Parameters_C, GI_Sort_Materials) == 0x00FCB8, "Member 'ABP_RT_Quality_Parameters_C::GI_Sort_Materials' has a wrong offset!");
//static_assert(offsetof(ABP_RT_Quality_Parameters_C, GI_Enable_Two_Sided_Geometry) == 0x00FCC8, "Member 'ABP_RT_Quality_Parameters_C::GI_Enable_Two_Sided_Geometry' has a wrong offset!");
//static_assert(offsetof(ABP_RT_Quality_Parameters_C, Final_Gather_Distance) == 0x00FCD8, "Member 'ABP_RT_Quality_Parameters_C::Final_Gather_Distance' has a wrong offset!");
//static_assert(offsetof(ABP_RT_Quality_Parameters_C, Hybrid_Translucency_DepthThreshold_) == 0x00FCE8, "Member 'ABP_RT_Quality_Parameters_C::Hybrid_Translucency_DepthThreshold_' has a wrong offset!");
//static_assert(offsetof(ABP_RT_Quality_Parameters_C, Hybrid_Translucency_Layers) == 0x00FCF8, "Member 'ABP_RT_Quality_Parameters_C::Hybrid_Translucency_Layers' has a wrong offset!");
//static_assert(offsetof(ABP_RT_Quality_Parameters_C, Translucency_Mask_) == 0x00FD08, "Member 'ABP_RT_Quality_Parameters_C::Translucency_Mask_' has a wrong offset!");
//static_assert(offsetof(ABP_RT_Quality_Parameters_C, SkyLight_Enable_Materials) == 0x00FD18, "Member 'ABP_RT_Quality_Parameters_C::SkyLight_Enable_Materials' has a wrong offset!");
//static_assert(offsetof(ABP_RT_Quality_Parameters_C, Shadows_Support_Translucency) == 0x00FD28, "Member 'ABP_RT_Quality_Parameters_C::Shadows_Support_Translucency' has a wrong offset!");
//static_assert(offsetof(ABP_RT_Quality_Parameters_C, Support_Light_Function) == 0x00FD38, "Member 'ABP_RT_Quality_Parameters_C::Support_Light_Function' has a wrong offset!");
//static_assert(offsetof(ABP_RT_Quality_Parameters_C, Light_Channel_Support) == 0x00FD48, "Member 'ABP_RT_Quality_Parameters_C::Light_Channel_Support' has a wrong offset!");
//static_assert(offsetof(ABP_RT_Quality_Parameters_C, Translucency_Roughness_Multiplier_) == 0x00FD58, "Member 'ABP_RT_Quality_Parameters_C::Translucency_Roughness_Multiplier_' has a wrong offset!");
//static_assert(offsetof(ABP_RT_Quality_Parameters_C, Reflections_Roughness_Multiplier_) == 0x00FD68, "Member 'ABP_RT_Quality_Parameters_C::Reflections_Roughness_Multiplier_' has a wrong offset!");
//static_assert(offsetof(ABP_RT_Quality_Parameters_C, Hybrid_Reflection) == 0x00FD78, "Member 'ABP_RT_Quality_Parameters_C::Hybrid_Reflection' has a wrong offset!");
//static_assert(offsetof(ABP_RT_Quality_Parameters_C, PerMinusLight_Shadow_Casting) == 0x00FD88, "Member 'ABP_RT_Quality_Parameters_C::PerMinusLight_Shadow_Casting' has a wrong offset!");
//static_assert(offsetof(ABP_RT_Quality_Parameters_C, ParallelMeshBatchSize) == 0x00FD98, "Member 'ABP_RT_Quality_Parameters_C::ParallelMeshBatchSize' has a wrong offset!");
//static_assert(offsetof(ABP_RT_Quality_Parameters_C, BuildRayTracingMeshForCaustics) == 0x00FDA8, "Member 'ABP_RT_Quality_Parameters_C::BuildRayTracingMeshForCaustics' has a wrong offset!");
//static_assert(offsetof(ABP_RT_Quality_Parameters_C, Exclude_Translucents_From_Shadows_) == 0x00FDB8, "Member 'ABP_RT_Quality_Parameters_C::Exclude_Translucents_From_Shadows_' has a wrong offset!");
//static_assert(offsetof(ABP_RT_Quality_Parameters_C, Auto_Instance_) == 0x00FDC8, "Member 'ABP_RT_Quality_Parameters_C::Auto_Instance_' has a wrong offset!");
//static_assert(offsetof(ABP_RT_Quality_Parameters_C, Parallel_Mesh_Batch_Setup_) == 0x00FDD8, "Member 'ABP_RT_Quality_Parameters_C::Parallel_Mesh_Batch_Setup_' has a wrong offset!");
//static_assert(offsetof(ABP_RT_Quality_Parameters_C, NonBlockingPipelineCreation_) == 0x00FDE8, "Member 'ABP_RT_Quality_Parameters_C::NonBlockingPipelineCreation_' has a wrong offset!");
//static_assert(offsetof(ABP_RT_Quality_Parameters_C, Enable_Mesh_Caustics) == 0x00FDF8, "Member 'ABP_RT_Quality_Parameters_C::Enable_Mesh_Caustics' has a wrong offset!");
//static_assert(offsetof(ABP_RT_Quality_Parameters_C, Water_Caustics_Type) == 0x00FE08, "Member 'ABP_RT_Quality_Parameters_C::Water_Caustics_Type' has a wrong offset!");
//static_assert(offsetof(ABP_RT_Quality_Parameters_C, Water_Caustics_Refractive_Intensity_) == 0x00FE18, "Member 'ABP_RT_Quality_Parameters_C::Water_Caustics_Refractive_Intensity_' has a wrong offset!");
//static_assert(offsetof(ABP_RT_Quality_Parameters_C, Water_Caustics_Reflective_Intensity_) == 0x00FE28, "Member 'ABP_RT_Quality_Parameters_C::Water_Caustics_Reflective_Intensity_' has a wrong offset!");
//static_assert(offsetof(ABP_RT_Quality_Parameters_C, Water_Caustics_Fresnel_Base_Reflect_Fraction_) == 0x00FE38, "Member 'ABP_RT_Quality_Parameters_C::Water_Caustics_Fresnel_Base_Reflect_Fraction_' has a wrong offset!");
//static_assert(offsetof(ABP_RT_Quality_Parameters_C, Water_Caustics_Map_Size_X__) == 0x00FE48, "Member 'ABP_RT_Quality_Parameters_C::Water_Caustics_Map_Size_X__' has a wrong offset!");
//static_assert(offsetof(ABP_RT_Quality_Parameters_C, Water_Caustics_Map_Size_Y) == 0x00FE58, "Member 'ABP_RT_Quality_Parameters_C::Water_Caustics_Map_Size_Y' has a wrong offset!");
//static_assert(offsetof(ABP_RT_Quality_Parameters_C, Water_Caustics_Num_Denoise_Passes_) == 0x00FE68, "Member 'ABP_RT_Quality_Parameters_C::Water_Caustics_Num_Denoise_Passes_' has a wrong offset!");
//static_assert(offsetof(ABP_RT_Quality_Parameters_C, Water_Caustics_Min_Reflection_Ray_Distance_) == 0x00FE78, "Member 'ABP_RT_Quality_Parameters_C::Water_Caustics_Min_Reflection_Ray_Distance_' has a wrong offset!");
//static_assert(offsetof(ABP_RT_Quality_Parameters_C, Water_Caustics_Max_Reflection_Ray_Distance_) == 0x00FE88, "Member 'ABP_RT_Quality_Parameters_C::Water_Caustics_Max_Reflection_Ray_Distance_' has a wrong offset!");
//static_assert(offsetof(ABP_RT_Quality_Parameters_C, Water_Caustics_Min_Refraction_Ray_Distance_) == 0x00FE98, "Member 'ABP_RT_Quality_Parameters_C::Water_Caustics_Min_Refraction_Ray_Distance_' has a wrong offset!");
//static_assert(offsetof(ABP_RT_Quality_Parameters_C, Water_Caustics_Max_Refraction_Ray_Distance_) == 0x00FEA8, "Member 'ABP_RT_Quality_Parameters_C::Water_Caustics_Max_Refraction_Ray_Distance_' has a wrong offset!");
//static_assert(offsetof(ABP_RT_Quality_Parameters_C, Water_Caustics_Rect_Light_Temporal_Weight_) == 0x00FEB8, "Member 'ABP_RT_Quality_Parameters_C::Water_Caustics_Rect_Light_Temporal_Weight_' has a wrong offset!");
//static_assert(offsetof(ABP_RT_Quality_Parameters_C, Mesh_Caustics_Resolution_) == 0x00FEC8, "Member 'ABP_RT_Quality_Parameters_C::Mesh_Caustics_Resolution_' has a wrong offset!");
//static_assert(offsetof(ABP_RT_Quality_Parameters_C, Mesh_Caustics_Intensity_) == 0x00FED8, "Member 'ABP_RT_Quality_Parameters_C::Mesh_Caustics_Intensity_' has a wrong offset!");
//static_assert(offsetof(ABP_RT_Quality_Parameters_C, Water_Caustics_Buffer_Scale_) == 0x00FEE8, "Member 'ABP_RT_Quality_Parameters_C::Water_Caustics_Buffer_Scale_' has a wrong offset!");
//static_assert(offsetof(ABP_RT_Quality_Parameters_C, Mesh_Caustics_Buffer_Scale_) == 0x00FEF8, "Member 'ABP_RT_Quality_Parameters_C::Mesh_Caustics_Buffer_Scale_' has a wrong offset!");
//static_assert(offsetof(ABP_RT_Quality_Parameters_C, Mesh_Caustics_Temporal_Strength_) == 0x00FF08, "Member 'ABP_RT_Quality_Parameters_C::Mesh_Caustics_Temporal_Strength_' has a wrong offset!");
//static_assert(offsetof(ABP_RT_Quality_Parameters_C, Mesh_Caustics_Jitter_) == 0x00FF18, "Member 'ABP_RT_Quality_Parameters_C::Mesh_Caustics_Jitter_' has a wrong offset!");
//static_assert(offsetof(ABP_RT_Quality_Parameters_C, Mesh_Caustics_Enable_Dispersion_) == 0x00FF28, "Member 'ABP_RT_Quality_Parameters_C::Mesh_Caustics_Enable_Dispersion_' has a wrong offset!");
//static_assert(offsetof(ABP_RT_Quality_Parameters_C, Mesh_Caustics_Translucent_Reflection_Mode) == 0x00FF38, "Member 'ABP_RT_Quality_Parameters_C::Mesh_Caustics_Translucent_Reflection_Mode' has a wrong offset!");
//static_assert(offsetof(ABP_RT_Quality_Parameters_C, Mesh_Caustics_Max_Trace_Depth_) == 0x00FF48, "Member 'ABP_RT_Quality_Parameters_C::Mesh_Caustics_Max_Trace_Depth_' has a wrong offset!");
//static_assert(offsetof(ABP_RT_Quality_Parameters_C, Mesh_Caustics_Adaptive_Photon_Size_) == 0x00FF58, "Member 'ABP_RT_Quality_Parameters_C::Mesh_Caustics_Adaptive_Photon_Size_' has a wrong offset!");
//static_assert(offsetof(ABP_RT_Quality_Parameters_C, Mesh_Caustics_Enable_Temporal_Filter_) == 0x00FF68, "Member 'ABP_RT_Quality_Parameters_C::Mesh_Caustics_Enable_Temporal_Filter_' has a wrong offset!");
//static_assert(offsetof(ABP_RT_Quality_Parameters_C, Mesh_Caustics_Adaptive_Smooth_) == 0x00FF78, "Member 'ABP_RT_Quality_Parameters_C::Mesh_Caustics_Adaptive_Smooth_' has a wrong offset!");
//static_assert(offsetof(ABP_RT_Quality_Parameters_C, Mesh_Caustics_Adaptive_Update_Speed_) == 0x00FF88, "Member 'ABP_RT_Quality_Parameters_C::Mesh_Caustics_Adaptive_Update_Speed_' has a wrong offset!");
//static_assert(offsetof(ABP_RT_Quality_Parameters_C, Mesh_Caustics_Adaptive_Variance_Gain_) == 0x00FF98, "Member 'ABP_RT_Quality_Parameters_C::Mesh_Caustics_Adaptive_Variance_Gain_' has a wrong offset!");
//static_assert(offsetof(ABP_RT_Quality_Parameters_C, Mesh_Caustics_Fixed_Light_) == 0x00FFA8, "Member 'ABP_RT_Quality_Parameters_C::Mesh_Caustics_Fixed_Light_' has a wrong offset!");
//static_assert(offsetof(ABP_RT_Quality_Parameters_C, Mesh_Caustics_Max_Intensity_) == 0x00FFB8, "Member 'ABP_RT_Quality_Parameters_C::Mesh_Caustics_Max_Intensity_' has a wrong offset!");
//static_assert(offsetof(ABP_RT_Quality_Parameters_C, Translucency_Enable_Absorption_) == 0x00FFC8, "Member 'ABP_RT_Quality_Parameters_C::Translucency_Enable_Absorption_' has a wrong offset!");
//static_assert(offsetof(ABP_RT_Quality_Parameters_C, Mesh_Caustics_Soft_Caustics_Sample_) == 0x00FFD8, "Member 'ABP_RT_Quality_Parameters_C::Mesh_Caustics_Soft_Caustics_Sample_' has a wrong offset!");
//static_assert(offsetof(ABP_RT_Quality_Parameters_C, Water_Caustics_Refract_Back_Face_Culling_Threshold_) == 0x00FFE8, "Member 'ABP_RT_Quality_Parameters_C::Water_Caustics_Refract_Back_Face_Culling_Threshold_' has a wrong offset!");
//static_assert(offsetof(ABP_RT_Quality_Parameters_C, Water_Caustics_Reflect_Back_Face_Culling_Threshold_) == 0x00FFF8, "Member 'ABP_RT_Quality_Parameters_C::Water_Caustics_Reflect_Back_Face_Culling_Threshold_' has a wrong offset!");
//static_assert(offsetof(ABP_RT_Quality_Parameters_C, Water_Caustics_Map_Cascades_) == 0x010008, "Member 'ABP_RT_Quality_Parameters_C::Water_Caustics_Map_Cascades_' has a wrong offset!");
//static_assert(offsetof(ABP_RT_Quality_Parameters_C, Water_Caustics_Map_Force_Level_) == 0x010018, "Member 'ABP_RT_Quality_Parameters_C::Water_Caustics_Map_Force_Level_' has a wrong offset!");
//static_assert(offsetof(ABP_RT_Quality_Parameters_C, Water_Caustics_Map_Cascade_Scale_) == 0x010028, "Member 'ABP_RT_Quality_Parameters_C::Water_Caustics_Map_Cascade_Scale_' has a wrong offset!");
//static_assert(offsetof(ABP_RT_Quality_Parameters_C, Water_Caustics_Show_Photon_) == 0x010038, "Member 'ABP_RT_Quality_Parameters_C::Water_Caustics_Show_Photon_' has a wrong offset!");
//static_assert(offsetof(ABP_RT_Quality_Parameters_C, Water_Caustics_Photon_Scale) == 0x010048, "Member 'ABP_RT_Quality_Parameters_C::Water_Caustics_Photon_Scale' has a wrong offset!");
//static_assert(offsetof(ABP_RT_Quality_Parameters_C, Mesh_Caustics_Enable_Advanced_Soft_Caustics_) == 0x010058, "Member 'ABP_RT_Quality_Parameters_C::Mesh_Caustics_Enable_Advanced_Soft_Caustics_' has a wrong offset!");
//static_assert(offsetof(ABP_RT_Quality_Parameters_C, Mesh_Caustics_Mid_Cull_Color_Threshold_) == 0x010068, "Member 'ABP_RT_Quality_Parameters_C::Mesh_Caustics_Mid_Cull_Color_Threshold_' has a wrong offset!");
//static_assert(offsetof(ABP_RT_Quality_Parameters_C, Mesh_Caustics_Final_Cull_Color_Threshold_) == 0x010078, "Member 'ABP_RT_Quality_Parameters_C::Mesh_Caustics_Final_Cull_Color_Threshold_' has a wrong offset!");
//static_assert(offsetof(ABP_RT_Quality_Parameters_C, Water_Caustics_Cascade_Sampling_Offset_X_) == 0x010088, "Member 'ABP_RT_Quality_Parameters_C::Water_Caustics_Cascade_Sampling_Offset_X_' has a wrong offset!");
//static_assert(offsetof(ABP_RT_Quality_Parameters_C, Water_Caustics_Cascade_Sampling_Offset_Y) == 0x010098, "Member 'ABP_RT_Quality_Parameters_C::Water_Caustics_Cascade_Sampling_Offset_Y' has a wrong offset!");
//static_assert(offsetof(ABP_RT_Quality_Parameters_C, Water_Caustics_Cascade_Sampling_UVScale_X_) == 0x0100A8, "Member 'ABP_RT_Quality_Parameters_C::Water_Caustics_Cascade_Sampling_UVScale_X_' has a wrong offset!");
//static_assert(offsetof(ABP_RT_Quality_Parameters_C, Water_Caustics_Cascade_Sampling_UVScale_Y_) == 0x0100B8, "Member 'ABP_RT_Quality_Parameters_C::Water_Caustics_Cascade_Sampling_UVScale_Y_' has a wrong offset!");
//static_assert(offsetof(ABP_RT_Quality_Parameters_C, Sharpness) == 0x0100C8, "Member 'ABP_RT_Quality_Parameters_C::Sharpness' has a wrong offset!");
//static_assert(offsetof(ABP_RT_Quality_Parameters_C, DLSS_Enable) == 0x0100D8, "Member 'ABP_RT_Quality_Parameters_C::DLSS_Enable' has a wrong offset!");
//static_assert(offsetof(ABP_RT_Quality_Parameters_C, Translucency_Enable_TAA_Before_DLSS_) == 0x0100E8, "Member 'ABP_RT_Quality_Parameters_C::Translucency_Enable_TAA_Before_DLSS_' has a wrong offset!");
//static_assert(offsetof(ABP_RT_Quality_Parameters_C, GI_Max_Light_Count_) == 0x0100F8, "Member 'ABP_RT_Quality_Parameters_C::GI_Max_Light_Count_' has a wrong offset!");
//static_assert(offsetof(ABP_RT_Quality_Parameters_C, AO_SPP) == 0x010108, "Member 'ABP_RT_Quality_Parameters_C::AO_SPP' has a wrong offset!");
//static_assert(offsetof(ABP_RT_Quality_Parameters_C, GI_Denoiser_Type) == 0x010118, "Member 'ABP_RT_Quality_Parameters_C::GI_Denoiser_Type' has a wrong offset!");
//static_assert(offsetof(ABP_RT_Quality_Parameters_C, GI_Apply_AO) == 0x010128, "Member 'ABP_RT_Quality_Parameters_C::GI_Apply_AO' has a wrong offset!");
//static_assert(offsetof(ABP_RT_Quality_Parameters_C, GI_Denoiser_Color_Clamp) == 0x010138, "Member 'ABP_RT_Quality_Parameters_C::GI_Denoiser_Color_Clamp' has a wrong offset!");
//static_assert(offsetof(ABP_RT_Quality_Parameters_C, GI_Denoiser_Normal_Tolerance) == 0x010148, "Member 'ABP_RT_Quality_Parameters_C::GI_Denoiser_Normal_Tolerance' has a wrong offset!");
//static_assert(offsetof(ABP_RT_Quality_Parameters_C, Spatial_Normal_Tolerance) == 0x010158, "Member 'ABP_RT_Quality_Parameters_C::Spatial_Normal_Tolerance' has a wrong offset!");
//static_assert(offsetof(ABP_RT_Quality_Parameters_C, Particle_Reapply_TAA_after_DLSS) == 0x010168, "Member 'ABP_RT_Quality_Parameters_C::Particle_Reapply_TAA_after_DLSS' has a wrong offset!");
//static_assert(offsetof(ABP_RT_Quality_Parameters_C, Refraction_Background_Sample_Fallback_) == 0x010178, "Member 'ABP_RT_Quality_Parameters_C::Refraction_Background_Sample_Fallback_' has a wrong offset!");
//static_assert(offsetof(ABP_RT_Quality_Parameters_C, GI_Denoise_History_Length) == 0x010188, "Member 'ABP_RT_Quality_Parameters_C::GI_Denoise_History_Length' has a wrong offset!");
//static_assert(offsetof(ABP_RT_Quality_Parameters_C, Spatial_Filter_Iteration) == 0x010198, "Member 'ABP_RT_Quality_Parameters_C::Spatial_Filter_Iteration' has a wrong offset!");
//static_assert(offsetof(ABP_RT_Quality_Parameters_C, Translucency_Ignore_Backface_Opacity) == 0x0101A8, "Member 'ABP_RT_Quality_Parameters_C::Translucency_Ignore_Backface_Opacity' has a wrong offset!");
//static_assert(offsetof(ABP_RT_Quality_Parameters_C, Use_Scene_Light_Dir) == 0x0101B8, "Member 'ABP_RT_Quality_Parameters_C::Use_Scene_Light_Dir' has a wrong offset!");
//static_assert(offsetof(ABP_RT_Quality_Parameters_C, Enable_Volumetric_Shadow) == 0x0101C8, "Member 'ABP_RT_Quality_Parameters_C::Enable_Volumetric_Shadow' has a wrong offset!");
//static_assert(offsetof(ABP_RT_Quality_Parameters_C, Absorption_Force_Shading_On_Opaque_Objects) == 0x0101D8, "Member 'ABP_RT_Quality_Parameters_C::Absorption_Force_Shading_On_Opaque_Objects' has a wrong offset!");
//static_assert(offsetof(ABP_RT_Quality_Parameters_C, Mesh_Caustics_Max_Ray_Distance) == 0x0101E8, "Member 'ABP_RT_Quality_Parameters_C::Mesh_Caustics_Max_Ray_Distance' has a wrong offset!");
//static_assert(offsetof(ABP_RT_Quality_Parameters_C, Mesh_Caustics_Temporal_Color_Tolerance) == 0x0101F8, "Member 'ABP_RT_Quality_Parameters_C::Mesh_Caustics_Temporal_Color_Tolerance' has a wrong offset!");
//static_assert(offsetof(ABP_RT_Quality_Parameters_C, GI_Diffuse_Boost) == 0x010208, "Member 'ABP_RT_Quality_Parameters_C::GI_Diffuse_Boost' has a wrong offset!");
//static_assert(offsetof(ABP_RT_Quality_Parameters_C, Reflected_Translucency_Mode) == 0x010218, "Member 'ABP_RT_Quality_Parameters_C::Reflected_Translucency_Mode' has a wrong offset!");
//static_assert(offsetof(ABP_RT_Quality_Parameters_C, Reflected_Translucency_Max_Bounces) == 0x010228, "Member 'ABP_RT_Quality_Parameters_C::Reflected_Translucency_Max_Bounces' has a wrong offset!");
//static_assert(offsetof(ABP_RT_Quality_Parameters_C, Reflected_Translucency_Transmission_Threshold) == 0x010238, "Member 'ABP_RT_Quality_Parameters_C::Reflected_Translucency_Transmission_Threshold' has a wrong offset!");
//static_assert(offsetof(ABP_RT_Quality_Parameters_C, Half_Res_Refraction) == 0x010248, "Member 'ABP_RT_Quality_Parameters_C::Half_Res_Refraction' has a wrong offset!");
//static_assert(offsetof(ABP_RT_Quality_Parameters_C, AO_Denoiser_History_Convolution_Sample_Count_) == 0x010258, "Member 'ABP_RT_Quality_Parameters_C::AO_Denoiser_History_Convolution_Sample_Count_' has a wrong offset!");
//static_assert(offsetof(ABP_RT_Quality_Parameters_C, Frames_Until_Feature_Desturction) == 0x010268, "Member 'ABP_RT_Quality_Parameters_C::Frames_Until_Feature_Desturction' has a wrong offset!");
//static_assert(offsetof(ABP_RT_Quality_Parameters_C, Dilate_Motion_Vectors) == 0x010278, "Member 'ABP_RT_Quality_Parameters_C::Dilate_Motion_Vectors' has a wrong offset!");
//static_assert(offsetof(ABP_RT_Quality_Parameters_C, Reflections_TAA) == 0x010288, "Member 'ABP_RT_Quality_Parameters_C::Reflections_TAA' has a wrong offset!");
//static_assert(offsetof(ABP_RT_Quality_Parameters_C, Water_Reflections_TAA) == 0x010298, "Member 'ABP_RT_Quality_Parameters_C::Water_Reflections_TAA' has a wrong offset!");
//static_assert(offsetof(ABP_RT_Quality_Parameters_C, Instanced_Static_Meshes_Culling_Angle) == 0x0102A8, "Member 'ABP_RT_Quality_Parameters_C::Instanced_Static_Meshes_Culling_Angle' has a wrong offset!");
//static_assert(offsetof(ABP_RT_Quality_Parameters_C, RTX_Post_Process_Settings) == 0x0102C0, "Member 'ABP_RT_Quality_Parameters_C::RTX_Post_Process_Settings' has a wrong offset!");
//static_assert(offsetof(ABP_RT_Quality_Parameters_C, RTX_Post_Process_Weight) == 0x010A70, "Member 'ABP_RT_Quality_Parameters_C::RTX_Post_Process_Weight' has a wrong offset!");
//static_assert(offsetof(ABP_RT_Quality_Parameters_C, Enable_Translucency_in_Reflection) == 0x010A78, "Member 'ABP_RT_Quality_Parameters_C::Enable_Translucency_in_Reflection' has a wrong offset!");
//static_assert(offsetof(ABP_RT_Quality_Parameters_C, Unbound) == 0x010A88, "Member 'ABP_RT_Quality_Parameters_C::Unbound' has a wrong offset!");
//static_assert(offsetof(ABP_RT_Quality_Parameters_C, RTX_Post_Process_Priority) == 0x010A90, "Member 'ABP_RT_Quality_Parameters_C::RTX_Post_Process_Priority' has a wrong offset!");
//static_assert(offsetof(ABP_RT_Quality_Parameters_C, FinalGather_UseReservoirResampling) == 0x010A98, "Member 'ABP_RT_Quality_Parameters_C::FinalGather_UseReservoirResampling' has a wrong offset!");
//static_assert(offsetof(ABP_RT_Quality_Parameters_C, GI_Metalic_Support) == 0x010AA8, "Member 'ABP_RT_Quality_Parameters_C::GI_Metalic_Support' has a wrong offset!");
//static_assert(offsetof(ABP_RT_Quality_Parameters_C, GI_Denoiser_Spatial_Filter_Type) == 0x010AB8, "Member 'ABP_RT_Quality_Parameters_C::GI_Denoiser_Spatial_Filter_Type' has a wrong offset!");
//static_assert(offsetof(ABP_RT_Quality_Parameters_C, GI_Denoiser_Use_SH) == 0x010AC8, "Member 'ABP_RT_Quality_Parameters_C::GI_Denoiser_Use_SH' has a wrong offset!");
//static_assert(offsetof(ABP_RT_Quality_Parameters_C, GI_Denoiser_SH_Sharpness) == 0x010AD8, "Member 'ABP_RT_Quality_Parameters_C::GI_Denoiser_SH_Sharpness' has a wrong offset!");
//static_assert(offsetof(ABP_RT_Quality_Parameters_C, ATrous_Depth_Tolerance_) == 0x010AE8, "Member 'ABP_RT_Quality_Parameters_C::ATrous_Depth_Tolerance_' has a wrong offset!");
//static_assert(offsetof(ABP_RT_Quality_Parameters_C, Final_Gather_SkyLight_Intensity_) == 0x010AF8, "Member 'ABP_RT_Quality_Parameters_C::Final_Gather_SkyLight_Intensity_' has a wrong offset!");
//static_assert(offsetof(ABP_RT_Quality_Parameters_C, Final_Gather_SkyLight_IndirectMultiplier_) == 0x010B08, "Member 'ABP_RT_Quality_Parameters_C::Final_Gather_SkyLight_IndirectMultiplier_' has a wrong offset!");
//static_assert(offsetof(ABP_RT_Quality_Parameters_C, Instanced_Static_Meshes_Evaluate_WPO) == 0x010B18, "Member 'ABP_RT_Quality_Parameters_C::Instanced_Static_Meshes_Evaluate_WPO' has a wrong offset!");
//static_assert(offsetof(ABP_RT_Quality_Parameters_C, Instanced_Static_Meshes_Simulation_Count) == 0x010B28, "Member 'ABP_RT_Quality_Parameters_C::Instanced_Static_Meshes_Simulation_Count' has a wrong offset!");
//static_assert(offsetof(ABP_RT_Quality_Parameters_C, Shadow_UseBiasForSkipWPOEval) == 0x010B38, "Member 'ABP_RT_Quality_Parameters_C::Shadow_UseBiasForSkipWPOEval' has a wrong offset!");
//static_assert(offsetof(ABP_RT_Quality_Parameters_C, Shadow_MaxBiasForInexactGeometry) == 0x010B48, "Member 'ABP_RT_Quality_Parameters_C::Shadow_MaxBiasForInexactGeometry' has a wrong offset!");
//static_assert(offsetof(ABP_RT_Quality_Parameters_C, Enable_Ray_Tracing_Culling) == 0x010B58, "Member 'ABP_RT_Quality_Parameters_C::Enable_Ray_Tracing_Culling' has a wrong offset!");
//static_assert(offsetof(ABP_RT_Quality_Parameters_C, Ray_Tracing_Culling_Angle) == 0x010B68, "Member 'ABP_RT_Quality_Parameters_C::Ray_Tracing_Culling_Angle' has a wrong offset!");
//static_assert(offsetof(ABP_RT_Quality_Parameters_C, Ray_Tracing_Culling_Radius) == 0x010B78, "Member 'ABP_RT_Quality_Parameters_C::Ray_Tracing_Culling_Radius' has a wrong offset!");
//static_assert(offsetof(ABP_RT_Quality_Parameters_C, Sky_Light_Screen_Percentage) == 0x010B88, "Member 'ABP_RT_Quality_Parameters_C::Sky_Light_Screen_Percentage' has a wrong offset!");
//static_assert(offsetof(ABP_RT_Quality_Parameters_C, FinalGather_Iterations_) == 0x010B98, "Member 'ABP_RT_Quality_Parameters_C::FinalGather_Iterations_' has a wrong offset!");
//static_assert(offsetof(ABP_RT_Quality_Parameters_C, FinalGather_Filter_Width) == 0x010BA8, "Member 'ABP_RT_Quality_Parameters_C::FinalGather_Filter_Width' has a wrong offset!");
//static_assert(offsetof(ABP_RT_Quality_Parameters_C, GI_Firefly_Suppression) == 0x010BB8, "Member 'ABP_RT_Quality_Parameters_C::GI_Firefly_Suppression' has a wrong offset!");
//static_assert(offsetof(ABP_RT_Quality_Parameters_C, Reflections_EnableTwoSidedGeometry_) == 0x010BC8, "Member 'ABP_RT_Quality_Parameters_C::Reflections_EnableTwoSidedGeometry_' has a wrong offset!");
//static_assert(offsetof(ABP_RT_Quality_Parameters_C, GeometryCache) == 0x010BD8, "Member 'ABP_RT_Quality_Parameters_C::GeometryCache' has a wrong offset!");
//static_assert(offsetof(ABP_RT_Quality_Parameters_C, StaticMeshes) == 0x010BE8, "Member 'ABP_RT_Quality_Parameters_C::StaticMeshes' has a wrong offset!");
//static_assert(offsetof(ABP_RT_Quality_Parameters_C, StaticMeshes_Enable_WPO_) == 0x010BF8, "Member 'ABP_RT_Quality_Parameters_C::StaticMeshes_Enable_WPO_' has a wrong offset!");
//static_assert(offsetof(ABP_RT_Quality_Parameters_C, StaticMeshes_Enable_WPO_Culling) == 0x010C08, "Member 'ABP_RT_Quality_Parameters_C::StaticMeshes_Enable_WPO_Culling' has a wrong offset!");
//static_assert(offsetof(ABP_RT_Quality_Parameters_C, StaticMeshes_WPO_Culling_Radius_) == 0x010C18, "Member 'ABP_RT_Quality_Parameters_C::StaticMeshes_WPO_Culling_Radius_' has a wrong offset!");
//static_assert(offsetof(ABP_RT_Quality_Parameters_C, SkeletalMeshes_) == 0x010C28, "Member 'ABP_RT_Quality_Parameters_C::SkeletalMeshes_' has a wrong offset!");
//static_assert(offsetof(ABP_RT_Quality_Parameters_C, ProceduralMeshes_) == 0x010C38, "Member 'ABP_RT_Quality_Parameters_C::ProceduralMeshes_' has a wrong offset!");
//static_assert(offsetof(ABP_RT_Quality_Parameters_C, NiagaraMeshes) == 0x010C48, "Member 'ABP_RT_Quality_Parameters_C::NiagaraMeshes' has a wrong offset!");
//static_assert(offsetof(ABP_RT_Quality_Parameters_C, NiagaraRibbons) == 0x010C58, "Member 'ABP_RT_Quality_Parameters_C::NiagaraRibbons' has a wrong offset!");
//static_assert(offsetof(ABP_RT_Quality_Parameters_C, NiagaraSprites) == 0x010C68, "Member 'ABP_RT_Quality_Parameters_C::NiagaraSprites' has a wrong offset!");
//static_assert(offsetof(ABP_RT_Quality_Parameters_C, GI_Directional_Light) == 0x010C78, "Member 'ABP_RT_Quality_Parameters_C::GI_Directional_Light' has a wrong offset!");
//static_assert(offsetof(ABP_RT_Quality_Parameters_C, GI_Point_Light) == 0x010C88, "Member 'ABP_RT_Quality_Parameters_C::GI_Point_Light' has a wrong offset!");
//static_assert(offsetof(ABP_RT_Quality_Parameters_C, GI_Rect_Light) == 0x010C98, "Member 'ABP_RT_Quality_Parameters_C::GI_Rect_Light' has a wrong offset!");
//static_assert(offsetof(ABP_RT_Quality_Parameters_C, GI_Sky_Light) == 0x010CA8, "Member 'ABP_RT_Quality_Parameters_C::GI_Sky_Light' has a wrong offset!");
//static_assert(offsetof(ABP_RT_Quality_Parameters_C, GI_Spot_Light) == 0x010CB8, "Member 'ABP_RT_Quality_Parameters_C::GI_Spot_Light' has a wrong offset!");
//static_assert(offsetof(ABP_RT_Quality_Parameters_C, Shadows_Directional) == 0x010CC8, "Member 'ABP_RT_Quality_Parameters_C::Shadows_Directional' has a wrong offset!");
//static_assert(offsetof(ABP_RT_Quality_Parameters_C, Shadows_Point) == 0x010CD8, "Member 'ABP_RT_Quality_Parameters_C::Shadows_Point' has a wrong offset!");
//static_assert(offsetof(ABP_RT_Quality_Parameters_C, Shadows_Rect) == 0x010CE8, "Member 'ABP_RT_Quality_Parameters_C::Shadows_Rect' has a wrong offset!");
//static_assert(offsetof(ABP_RT_Quality_Parameters_C, Shadows_Spot) == 0x010CF8, "Member 'ABP_RT_Quality_Parameters_C::Shadows_Spot' has a wrong offset!");
//static_assert(offsetof(ABP_RT_Quality_Parameters_C, AO_UseBiasForSkipWPOEval_) == 0x010D08, "Member 'ABP_RT_Quality_Parameters_C::AO_UseBiasForSkipWPOEval_' has a wrong offset!");
//static_assert(offsetof(ABP_RT_Quality_Parameters_C, AO_MaxBiasForInexactGeometry_) == 0x010D18, "Member 'ABP_RT_Quality_Parameters_C::AO_MaxBiasForInexactGeometry_' has a wrong offset!");
//static_assert(offsetof(ABP_RT_Quality_Parameters_C, GI_Reservoir_Update_Interval_) == 0x010D28, "Member 'ABP_RT_Quality_Parameters_C::GI_Reservoir_Update_Interval_' has a wrong offset!");
//static_assert(offsetof(ABP_RT_Quality_Parameters_C, Final_Gather_Normal_From_Depth) == 0x010D38, "Member 'ABP_RT_Quality_Parameters_C::Final_Gather_Normal_From_Depth' has a wrong offset!");
//static_assert(offsetof(ABP_RT_Quality_Parameters_C, Final_Gather_Max_Reuse_Weight) == 0x010D48, "Member 'ABP_RT_Quality_Parameters_C::Final_Gather_Max_Reuse_Weight' has a wrong offset!");
//static_assert(offsetof(ABP_RT_Quality_Parameters_C, Final_Gather_Aggressive_Reservoir_Reuse_) == 0x010D58, "Member 'ABP_RT_Quality_Parameters_C::Final_Gather_Aggressive_Reservoir_Reuse_' has a wrong offset!");
//static_assert(offsetof(ABP_RT_Quality_Parameters_C, GIDenoise_ATrous_Filter_Width) == 0x010D68, "Member 'ABP_RT_Quality_Parameters_C::GIDenoise_ATrous_Filter_Width' has a wrong offset!");
//static_assert(offsetof(ABP_RT_Quality_Parameters_C, WaterCaustics_ReflectiveNormalScale_) == 0x010D78, "Member 'ABP_RT_Quality_Parameters_C::WaterCaustics_ReflectiveNormalScale_' has a wrong offset!");
//static_assert(offsetof(ABP_RT_Quality_Parameters_C, WaterCaustics_RefractiveNormalScale_) == 0x010D88, "Member 'ABP_RT_Quality_Parameters_C::WaterCaustics_RefractiveNormalScale_' has a wrong offset!");
//static_assert(offsetof(ABP_RT_Quality_Parameters_C, Max_Under_Coat_Bounces_) == 0x010D98, "Member 'ABP_RT_Quality_Parameters_C::Max_Under_Coat_Bounces_' has a wrong offset!");
//static_assert(offsetof(ABP_RT_Quality_Parameters_C, Enable_Adaptive_Reflection_Based_On_Player_Speed) == 0x010DA8, "Member 'ABP_RT_Quality_Parameters_C::Enable_Adaptive_Reflection_Based_On_Player_Speed' has a wrong offset!");
//static_assert(offsetof(ABP_RT_Quality_Parameters_C, DynamicGeometryLastRenderTimeUpdateDistance_) == 0x010DB0, "Member 'ABP_RT_Quality_Parameters_C::DynamicGeometryLastRenderTimeUpdateDistance_' has a wrong offset!");
//static_assert(offsetof(ABP_RT_Quality_Parameters_C, RTX_Tick_Interval) == 0x010DC0, "Member 'ABP_RT_Quality_Parameters_C::RTX_Tick_Interval' has a wrong offset!");
//static_assert(offsetof(ABP_RT_Quality_Parameters_C, Player_Max_Velocity_Threshold) == 0x010DC8, "Member 'ABP_RT_Quality_Parameters_C::Player_Max_Velocity_Threshold' has a wrong offset!");
//static_assert(offsetof(ABP_RT_Quality_Parameters_C, Adaptive_Screen_Res_Factor) == 0x010DD0, "Member 'ABP_RT_Quality_Parameters_C::Adaptive_Screen_Res_Factor' has a wrong offset!");
//static_assert(offsetof(ABP_RT_Quality_Parameters_C, Player_Current_Velocity) == 0x010DD8, "Member 'ABP_RT_Quality_Parameters_C::Player_Current_Velocity' has a wrong offset!");
//static_assert(offsetof(ABP_RT_Quality_Parameters_C, Enable_Adaptive_Screen_Res) == 0x010DE0, "Member 'ABP_RT_Quality_Parameters_C::Enable_Adaptive_Screen_Res' has a wrong offset!");
//static_assert(offsetof(ABP_RT_Quality_Parameters_C, Use_Adaptive_Water_Caustics_Map_Resolution) == 0x010DE1, "Member 'ABP_RT_Quality_Parameters_C::Use_Adaptive_Water_Caustics_Map_Resolution' has a wrong offset!");
//static_assert(offsetof(ABP_RT_Quality_Parameters_C, Enable_Adaptive_RTX_Render) == 0x010DE2, "Member 'ABP_RT_Quality_Parameters_C::Enable_Adaptive_RTX_Render' has a wrong offset!");
//static_assert(offsetof(ABP_RT_Quality_Parameters_C, Enable_RTX_DI) == 0x010DE8, "Member 'ABP_RT_Quality_Parameters_C::Enable_RTX_DI' has a wrong offset!");
//static_assert(offsetof(ABP_RT_Quality_Parameters_C, Enable_NRD) == 0x010DF8, "Member 'ABP_RT_Quality_Parameters_C::Enable_NRD' has a wrong offset!");
//static_assert(offsetof(ABP_RT_Quality_Parameters_C, RTXDI_Quality) == 0x010E08, "Member 'ABP_RT_Quality_Parameters_C::RTXDI_Quality' has a wrong offset!");
//static_assert(offsetof(ABP_RT_Quality_Parameters_C, GI_Accumulate_Emissive) == 0x010E10, "Member 'ABP_RT_Quality_Parameters_C::GI_Accumulate_Emissive' has a wrong offset!");
//static_assert(offsetof(ABP_RT_Quality_Parameters_C, GI_MultiBounce_Interval) == 0x010E20, "Member 'ABP_RT_Quality_Parameters_C::GI_MultiBounce_Interval' has a wrong offset!");
//static_assert(offsetof(ABP_RT_Quality_Parameters_C, RTX_Gate) == 0x010E30, "Member 'ABP_RT_Quality_Parameters_C::RTX_Gate' has a wrong offset!");
//static_assert(offsetof(ABP_RT_Quality_Parameters_C, Enable_Ray_Traced_DOF) == 0x010E38, "Member 'ABP_RT_Quality_Parameters_C::Enable_Ray_Traced_DOF' has a wrong offset!");
//static_assert(offsetof(ABP_RT_Quality_Parameters_C, Transmission_Sampling_Distance_Culling_) == 0x010E48, "Member 'ABP_RT_Quality_Parameters_C::Transmission_Sampling_Distance_Culling_' has a wrong offset!");
//static_assert(offsetof(ABP_RT_Quality_Parameters_C, Translucency_AtmosphericFog_) == 0x010E58, "Member 'ABP_RT_Quality_Parameters_C::Translucency_AtmosphericFog_' has a wrong offset!");
//static_assert(offsetof(ABP_RT_Quality_Parameters_C, Exclude_Decals_) == 0x010E68, "Member 'ABP_RT_Quality_Parameters_C::Exclude_Decals_' has a wrong offset!");
//static_assert(offsetof(ABP_RT_Quality_Parameters_C, Water_Caustics_View_Culling) == 0x010E78, "Member 'ABP_RT_Quality_Parameters_C::Water_Caustics_View_Culling' has a wrong offset!");
//static_assert(offsetof(ABP_RT_Quality_Parameters_C, Shadows_LODTransitionStart_) == 0x010E88, "Member 'ABP_RT_Quality_Parameters_C::Shadows_LODTransitionStart_' has a wrong offset!");
//static_assert(offsetof(ABP_RT_Quality_Parameters_C, Shadows_LODTransitionEnd_) == 0x010E98, "Member 'ABP_RT_Quality_Parameters_C::Shadows_LODTransitionEnd_' has a wrong offset!");
//static_assert(offsetof(ABP_RT_Quality_Parameters_C, Water_Caustics_Enable_Shadow_Ray) == 0x010EA8, "Member 'ABP_RT_Quality_Parameters_C::Water_Caustics_Enable_Shadow_Ray' has a wrong offset!");
//static_assert(offsetof(ABP_RT_Quality_Parameters_C, Water_Caustics_Shadow_Ray_Max_Distance) == 0x010EB8, "Member 'ABP_RT_Quality_Parameters_C::Water_Caustics_Shadow_Ray_Max_Distance' has a wrong offset!");
//static_assert(offsetof(ABP_RT_Quality_Parameters_C, Translucency_Enable_GI) == 0x010EC8, "Member 'ABP_RT_Quality_Parameters_C::Translucency_Enable_GI' has a wrong offset!");
//static_assert(offsetof(ABP_RT_Quality_Parameters_C, HalfResSceneColor_TAA) == 0x010ED8, "Member 'ABP_RT_Quality_Parameters_C::HalfResSceneColor_TAA' has a wrong offset!");
//static_assert(offsetof(ABP_RT_Quality_Parameters_C, Enable_ExperimentalDeferred_Reflection) == 0x010EE8, "Member 'ABP_RT_Quality_Parameters_C::Enable_ExperimentalDeferred_Reflection' has a wrong offset!");
//static_assert(offsetof(ABP_RT_Quality_Parameters_C, Contact_Shadow) == 0x010EF8, "Member 'ABP_RT_Quality_Parameters_C::Contact_Shadow' has a wrong offset!");
//static_assert(offsetof(ABP_RT_Quality_Parameters_C, Shadow_CSM_Max_Cascade) == 0x010F08, "Member 'ABP_RT_Quality_Parameters_C::Shadow_CSM_Max_Cascade' has a wrong offset!");
//static_assert(offsetof(ABP_RT_Quality_Parameters_C, Shadows_Accept_First_Hit) == 0x010F18, "Member 'ABP_RT_Quality_Parameters_C::Shadows_Accept_First_Hit' has a wrong offset!");
//static_assert(offsetof(ABP_RT_Quality_Parameters_C, Auto_Exposure) == 0x010F28, "Member 'ABP_RT_Quality_Parameters_C::Auto_Exposure' has a wrong offset!");
//static_assert(offsetof(ABP_RT_Quality_Parameters_C, Water_Caustics_Epsilon_Area) == 0x010F38, "Member 'ABP_RT_Quality_Parameters_C::Water_Caustics_Epsilon_Area' has a wrong offset!");
//static_assert(offsetof(ABP_RT_Quality_Parameters_C, Spatial_Reservoir_Samples_) == 0x010F48, "Member 'ABP_RT_Quality_Parameters_C::Spatial_Reservoir_Samples_' has a wrong offset!");
//static_assert(offsetof(ABP_RT_Quality_Parameters_C, PrimaryRays_ReflectionCaptures) == 0x010F58, "Member 'ABP_RT_Quality_Parameters_C::PrimaryRays_ReflectionCaptures' has a wrong offset!");
//static_assert(offsetof(ABP_RT_Quality_Parameters_C, GeometryCollection) == 0x010F68, "Member 'ABP_RT_Quality_Parameters_C::GeometryCollection' has a wrong offset!");
//static_assert(offsetof(ABP_RT_Quality_Parameters_C, Nanite_Shadow_Mode_HybirdMode_DepthThreshold) == 0x010F78, "Member 'ABP_RT_Quality_Parameters_C::Nanite_Shadow_Mode_HybirdMode_DepthThreshold' has a wrong offset!");
//static_assert(offsetof(ABP_RT_Quality_Parameters_C, Nanite_Shadow_Mode_HybirdMode_RayTraceNear) == 0x010F88, "Member 'ABP_RT_Quality_Parameters_C::Nanite_Shadow_Mode_HybirdMode_RayTraceNear' has a wrong offset!");
//static_assert(offsetof(ABP_RT_Quality_Parameters_C, Translucency_UseLumenLighting_) == 0x010F98, "Member 'ABP_RT_Quality_Parameters_C::Translucency_UseLumenLighting_' has a wrong offset!");
//static_assert(offsetof(ABP_RT_Quality_Parameters_C, GI_Enable_Simple_RefractShadow_) == 0x010FA8, "Member 'ABP_RT_Quality_Parameters_C::GI_Enable_Simple_RefractShadow_' has a wrong offset!");
//static_assert(offsetof(ABP_RT_Quality_Parameters_C, Reflection_Diffuse_Boost) == 0x010FB8, "Member 'ABP_RT_Quality_Parameters_C::Reflection_Diffuse_Boost' has a wrong offset!");
//static_assert(offsetof(ABP_RT_Quality_Parameters_C, First_Layer_Reflection_GI_Max_Roughness) == 0x010FC8, "Member 'ABP_RT_Quality_Parameters_C::First_Layer_Reflection_GI_Max_Roughness' has a wrong offset!");
//static_assert(offsetof(ABP_RT_Quality_Parameters_C, UniformLightSelection) == 0x010FD8, "Member 'ABP_RT_Quality_Parameters_C::UniformLightSelection' has a wrong offset!");
//static_assert(offsetof(ABP_RT_Quality_Parameters_C, GI_SER) == 0x010FE8, "Member 'ABP_RT_Quality_Parameters_C::GI_SER' has a wrong offset!");
//static_assert(offsetof(ABP_RT_Quality_Parameters_C, FinalGather_UseTraceRayInline) == 0x010FF8, "Member 'ABP_RT_Quality_Parameters_C::FinalGather_UseTraceRayInline' has a wrong offset!");
//static_assert(offsetof(ABP_RT_Quality_Parameters_C, GI_EnableTransmission) == 0x011008, "Member 'ABP_RT_Quality_Parameters_C::GI_EnableTransmission' has a wrong offset!");
//static_assert(offsetof(ABP_RT_Quality_Parameters_C, TransmissionHitThreshold) == 0x011018, "Member 'ABP_RT_Quality_Parameters_C::TransmissionHitThreshold' has a wrong offset!");
//static_assert(offsetof(ABP_RT_Quality_Parameters_C, Shadows_AvoidSelfIntersectionTraceDistance) == 0x011028, "Member 'ABP_RT_Quality_Parameters_C::Shadows_AvoidSelfIntersectionTraceDistance' has a wrong offset!");
//static_assert(offsetof(ABP_RT_Quality_Parameters_C, Shadows_SupportTwoSidedFoliage) == 0x011038, "Member 'ABP_RT_Quality_Parameters_C::Shadows_SupportTwoSidedFoliage' has a wrong offset!");
//static_assert(offsetof(ABP_RT_Quality_Parameters_C, Reflection_SER) == 0x011048, "Member 'ABP_RT_Quality_Parameters_C::Reflection_SER' has a wrong offset!");
//static_assert(offsetof(ABP_RT_Quality_Parameters_C, First_Layer_Reflection_GI) == 0x011058, "Member 'ABP_RT_Quality_Parameters_C::First_Layer_Reflection_GI' has a wrong offset!");
//static_assert(offsetof(ABP_RT_Quality_Parameters_C, Reflection_GI_Screen_Percentage_) == 0x011068, "Member 'ABP_RT_Quality_Parameters_C::Reflection_GI_Screen_Percentage_' has a wrong offset!");
//static_assert(offsetof(ABP_RT_Quality_Parameters_C, _Reflection_GI_Denoise) == 0x011078, "Member 'ABP_RT_Quality_Parameters_C::_Reflection_GI_Denoise' has a wrong offset!");
//static_assert(offsetof(ABP_RT_Quality_Parameters_C, Reflection_Restir_GI_) == 0x011088, "Member 'ABP_RT_Quality_Parameters_C::Reflection_Restir_GI_' has a wrong offset!");
//static_assert(offsetof(ABP_RT_Quality_Parameters_C, Translucency_SER) == 0x011098, "Member 'ABP_RT_Quality_Parameters_C::Translucency_SER' has a wrong offset!");
//static_assert(offsetof(ABP_RT_Quality_Parameters_C, PrimaryRays_ReflectionMinRayDistance) == 0x0110A8, "Member 'ABP_RT_Quality_Parameters_C::PrimaryRays_ReflectionMinRayDistance' has a wrong offset!");
//static_assert(offsetof(ABP_RT_Quality_Parameters_C, PrimaryRays_RefractionMinRayDistance) == 0x0110B8, "Member 'ABP_RT_Quality_Parameters_C::PrimaryRays_RefractionMinRayDistance' has a wrong offset!");
//static_assert(offsetof(ABP_RT_Quality_Parameters_C, Lumen_HW_RayTracing) == 0x0110C8, "Member 'ABP_RT_Quality_Parameters_C::Lumen_HW_RayTracing' has a wrong offset!");
//static_assert(offsetof(ABP_RT_Quality_Parameters_C, Lumen_HW_Lighting_Mode) == 0x0110D8, "Member 'ABP_RT_Quality_Parameters_C::Lumen_HW_Lighting_Mode' has a wrong offset!");
//static_assert(offsetof(ABP_RT_Quality_Parameters_C, Lumen_Reflections_Allow_) == 0x0110E8, "Member 'ABP_RT_Quality_Parameters_C::Lumen_Reflections_Allow_' has a wrong offset!");
//static_assert(offsetof(ABP_RT_Quality_Parameters_C, Lumen_HW_Reflections) == 0x0110F8, "Member 'ABP_RT_Quality_Parameters_C::Lumen_HW_Reflections' has a wrong offset!");
//static_assert(offsetof(ABP_RT_Quality_Parameters_C, Lumen_Reflections_MaxRoughnessToTrace) == 0x011108, "Member 'ABP_RT_Quality_Parameters_C::Lumen_Reflections_MaxRoughnessToTrace' has a wrong offset!");
//static_assert(offsetof(ABP_RT_Quality_Parameters_C, Lumen_HW_Reflections_Trace_Translucent) == 0x011118, "Member 'ABP_RT_Quality_Parameters_C::Lumen_HW_Reflections_Trace_Translucent' has a wrong offset!");
//static_assert(offsetof(ABP_RT_Quality_Parameters_C, Lumen_HW_Reflections_Trace_Translucent_MaxHitCount) == 0x011128, "Member 'ABP_RT_Quality_Parameters_C::Lumen_HW_Reflections_Trace_Translucent_MaxHitCount' has a wrong offset!");
//static_assert(offsetof(ABP_RT_Quality_Parameters_C, Lumen_HW_Reflections_Trace_Translucent_TMax) == 0x011138, "Member 'ABP_RT_Quality_Parameters_C::Lumen_HW_Reflections_Trace_Translucent_TMax' has a wrong offset!");
//static_assert(offsetof(ABP_RT_Quality_Parameters_C, Lumen_HW_Reflections_Trace_Translucent_TMin) == 0x011148, "Member 'ABP_RT_Quality_Parameters_C::Lumen_HW_Reflections_Trace_Translucent_TMin' has a wrong offset!");
//static_assert(offsetof(ABP_RT_Quality_Parameters_C, Lumen_HW_Reflections_Trace_Translucent_Type) == 0x011158, "Member 'ABP_RT_Quality_Parameters_C::Lumen_HW_Reflections_Trace_Translucent_Type' has a wrong offset!");
//static_assert(offsetof(ABP_RT_Quality_Parameters_C, Lumen_TranslucencyReflections_FrontLayer_Allow_) == 0x011168, "Member 'ABP_RT_Quality_Parameters_C::Lumen_TranslucencyReflections_FrontLayer_Allow_' has a wrong offset!");
//static_assert(offsetof(ABP_RT_Quality_Parameters_C, Lumen_TranslucencyReflections_FrontLayer_Enable_) == 0x011178, "Member 'ABP_RT_Quality_Parameters_C::Lumen_TranslucencyReflections_FrontLayer_Enable_' has a wrong offset!");
//static_assert(offsetof(ABP_RT_Quality_Parameters_C, Lumen_DiffuseIndirect_Allow_) == 0x011188, "Member 'ABP_RT_Quality_Parameters_C::Lumen_DiffuseIndirect_Allow_' has a wrong offset!");
//static_assert(offsetof(ABP_RT_Quality_Parameters_C, LumenScene_FarField_) == 0x011198, "Member 'ABP_RT_Quality_Parameters_C::LumenScene_FarField_' has a wrong offset!");
//static_assert(offsetof(ABP_RT_Quality_Parameters_C, ScreenProbeGather_ScreenTraces) == 0x0111A8, "Member 'ABP_RT_Quality_Parameters_C::ScreenProbeGather_ScreenTraces' has a wrong offset!");
//static_assert(offsetof(ABP_RT_Quality_Parameters_C, LumenScene_Radiosity_) == 0x0111B8, "Member 'ABP_RT_Quality_Parameters_C::LumenScene_Radiosity_' has a wrong offset!");
//static_assert(offsetof(ABP_RT_Quality_Parameters_C, Lumen_Visualize_CardPlacement_) == 0x0111C8, "Member 'ABP_RT_Quality_Parameters_C::Lumen_Visualize_CardPlacement_' has a wrong offset!");
//static_assert(offsetof(ABP_RT_Quality_Parameters_C, Lumen_Reflections_ScreenTraces_) == 0x0111D8, "Member 'ABP_RT_Quality_Parameters_C::Lumen_Reflections_ScreenTraces_' has a wrong offset!");
//static_assert(offsetof(ABP_RT_Quality_Parameters_C, DynamicGlobalIlluminationMethod) == 0x0111E8, "Member 'ABP_RT_Quality_Parameters_C::DynamicGlobalIlluminationMethod' has a wrong offset!");
//static_assert(offsetof(ABP_RT_Quality_Parameters_C, ReflectionMethod) == 0x0111F8, "Member 'ABP_RT_Quality_Parameters_C::ReflectionMethod' has a wrong offset!");
//static_assert(offsetof(ABP_RT_Quality_Parameters_C, Reflections_MaxRoughnessToTraceForFoliage) == 0x011208, "Member 'ABP_RT_Quality_Parameters_C::Reflections_MaxRoughnessToTraceForFoliage' has a wrong offset!");
//static_assert(offsetof(ABP_RT_Quality_Parameters_C, Lumen_Reflection_SER) == 0x011218, "Member 'ABP_RT_Quality_Parameters_C::Lumen_Reflection_SER' has a wrong offset!");
//static_assert(offsetof(ABP_RT_Quality_Parameters_C, Shadows_UseTraceRayInline) == 0x011228, "Member 'ABP_RT_Quality_Parameters_C::Shadows_UseTraceRayInline' has a wrong offset!");
//static_assert(offsetof(ABP_RT_Quality_Parameters_C, DLSS_Preset) == 0x011238, "Member 'ABP_RT_Quality_Parameters_C::DLSS_Preset' has a wrong offset!");
//static_assert(offsetof(ABP_RT_Quality_Parameters_C, DLSS_PreferNISSharpen) == 0x011248, "Member 'ABP_RT_Quality_Parameters_C::DLSS_PreferNISSharpen' has a wrong offset!");
//static_assert(offsetof(ABP_RT_Quality_Parameters_C, Lumen_ScreenProbeGather_SER) == 0x011258, "Member 'ABP_RT_Quality_Parameters_C::Lumen_ScreenProbeGather_SER' has a wrong offset!");
//static_assert(offsetof(ABP_RT_Quality_Parameters_C, Lumen_RadianceCache_SER) == 0x011268, "Member 'ABP_RT_Quality_Parameters_C::Lumen_RadianceCache_SER' has a wrong offset!");
//static_assert(offsetof(ABP_RT_Quality_Parameters_C, GenerateRTSceneDepth__) == 0x011278, "Member 'ABP_RT_Quality_Parameters_C::GenerateRTSceneDepth__' has a wrong offset!");
//static_assert(offsetof(ABP_RT_Quality_Parameters_C, Lighting_MaxLights) == 0x011288, "Member 'ABP_RT_Quality_Parameters_C::Lighting_MaxLights' has a wrong offset!");
//static_assert(offsetof(ABP_RT_Quality_Parameters_C, Lighting_MaxShadowLights) == 0x011298, "Member 'ABP_RT_Quality_Parameters_C::Lighting_MaxShadowLights' has a wrong offset!");
//static_assert(offsetof(ABP_RT_Quality_Parameters_C, Lighting_ObeyShadows) == 0x0112A8, "Member 'ABP_RT_Quality_Parameters_C::Lighting_ObeyShadows' has a wrong offset!");
//static_assert(offsetof(ABP_RT_Quality_Parameters_C, GI_MaxShadowDistance) == 0x0112B8, "Member 'ABP_RT_Quality_Parameters_C::GI_MaxShadowDistance' has a wrong offset!");
//static_assert(offsetof(ABP_RT_Quality_Parameters_C, PrioritizeDirectional) == 0x0112C8, "Member 'ABP_RT_Quality_Parameters_C::PrioritizeDirectional' has a wrong offset!");
//static_assert(offsetof(ABP_RT_Quality_Parameters_C, Shadow_MaxLights) == 0x0112D8, "Member 'ABP_RT_Quality_Parameters_C::Shadow_MaxLights' has a wrong offset!");
//static_assert(offsetof(ABP_RT_Quality_Parameters_C, Shadow_MaxDenoisedLights) == 0x0112E8, "Member 'ABP_RT_Quality_Parameters_C::Shadow_MaxDenoisedLights' has a wrong offset!");
//static_assert(offsetof(ABP_RT_Quality_Parameters_C, Shadow_FallbackToSharp) == 0x0112F8, "Member 'ABP_RT_Quality_Parameters_C::Shadow_FallbackToSharp' has a wrong offset!");
//static_assert(offsetof(ABP_RT_Quality_Parameters_C, RTSceneDepthTolerance) == 0x011308, "Member 'ABP_RT_Quality_Parameters_C::RTSceneDepthTolerance' has a wrong offset!");
//static_assert(offsetof(ABP_RT_Quality_Parameters_C, TemporalReservoirSamples) == 0x011318, "Member 'ABP_RT_Quality_Parameters_C::TemporalReservoirSamples' has a wrong offset!");
//static_assert(offsetof(ABP_RT_Quality_Parameters_C, Shadows_PointLightMode) == 0x011328, "Member 'ABP_RT_Quality_Parameters_C::Shadows_PointLightMode' has a wrong offset!");
//static_assert(offsetof(ABP_RT_Quality_Parameters_C, ReSTIRMode) == 0x011338, "Member 'ABP_RT_Quality_Parameters_C::ReSTIRMode' has a wrong offset!");
//static_assert(offsetof(ABP_RT_Quality_Parameters_C, IntensityScale) == 0x011348, "Member 'ABP_RT_Quality_Parameters_C::IntensityScale' has a wrong offset!");
//static_assert(offsetof(ABP_RT_Quality_Parameters_C, FinalGather_SpatialSearchRadiusRatio) == 0x011358, "Member 'ABP_RT_Quality_Parameters_C::FinalGather_SpatialSearchRadiusRatio' has a wrong offset!");
//static_assert(offsetof(ABP_RT_Quality_Parameters_C, UseRasterCaustics) == 0x011368, "Member 'ABP_RT_Quality_Parameters_C::UseRasterCaustics' has a wrong offset!");
//static_assert(offsetof(ABP_RT_Quality_Parameters_C, VolumetricScatteringIntensityScale_) == 0x011370, "Member 'ABP_RT_Quality_Parameters_C::VolumetricScatteringIntensityScale_' has a wrong offset!");
//static_assert(offsetof(ABP_RT_Quality_Parameters_C, SkyLightLeakFactor) == 0x011380, "Member 'ABP_RT_Quality_Parameters_C::SkyLightLeakFactor' has a wrong offset!");
//static_assert(offsetof(ABP_RT_Quality_Parameters_C, UseSkeletalMeshLODBias) == 0x011390, "Member 'ABP_RT_Quality_Parameters_C::UseSkeletalMeshLODBias' has a wrong offset!");
//static_assert(offsetof(ABP_RT_Quality_Parameters_C, DiffuseIndirectTechnique) == 0x0113A0, "Member 'ABP_RT_Quality_Parameters_C::DiffuseIndirectTechnique' has a wrong offset!");
//static_assert(offsetof(ABP_RT_Quality_Parameters_C, Relax_Atrous_DiffuseLobeAngleFraction) == 0x0113B0, "Member 'ABP_RT_Quality_Parameters_C::Relax_Atrous_DiffuseLobeAngleFraction' has a wrong offset!");
//static_assert(offsetof(ABP_RT_Quality_Parameters_C, Relax_Atrous_DiffuseMinLuminanceWeight) == 0x0113C0, "Member 'ABP_RT_Quality_Parameters_C::Relax_Atrous_DiffuseMinLuminanceWeight' has a wrong offset!");
//static_assert(offsetof(ABP_RT_Quality_Parameters_C, Relax_Atrous_DiffusePhiLuminance) == 0x0113D0, "Member 'ABP_RT_Quality_Parameters_C::Relax_Atrous_DiffusePhiLuminance' has a wrong offset!");
//static_assert(offsetof(ABP_RT_Quality_Parameters_C, Relax_Atrous_Iterations) == 0x0113E0, "Member 'ABP_RT_Quality_Parameters_C::Relax_Atrous_Iterations' has a wrong offset!");
//static_assert(offsetof(ABP_RT_Quality_Parameters_C, Relax_FireflySupression) == 0x0113F0, "Member 'ABP_RT_Quality_Parameters_C::Relax_FireflySupression' has a wrong offset!");
//static_assert(offsetof(ABP_RT_Quality_Parameters_C, Relax_HistoryFix_FrameNum) == 0x011400, "Member 'ABP_RT_Quality_Parameters_C::Relax_HistoryFix_FrameNum' has a wrong offset!");
//static_assert(offsetof(ABP_RT_Quality_Parameters_C, Relax_DiffuseFastMaxAccumulatedFrameNum) == 0x011410, "Member 'ABP_RT_Quality_Parameters_C::Relax_DiffuseFastMaxAccumulatedFrameNum' has a wrong offset!");
//static_assert(offsetof(ABP_RT_Quality_Parameters_C, Relax_DiffuseMaxAccumulatedFrameNum) == 0x011420, "Member 'ABP_RT_Quality_Parameters_C::Relax_DiffuseMaxAccumulatedFrameNum' has a wrong offset!");
//static_assert(offsetof(ABP_RT_Quality_Parameters_C, Relax_DisocclusionThreshold) == 0x011430, "Member 'ABP_RT_Quality_Parameters_C::Relax_DisocclusionThreshold' has a wrong offset!");
//static_assert(offsetof(ABP_RT_Quality_Parameters_C, NiagaraRibbons_Reorientation) == 0x011440, "Member 'ABP_RT_Quality_Parameters_C::NiagaraRibbons_Reorientation' has a wrong offset!");
//static_assert(offsetof(ABP_RT_Quality_Parameters_C, NiagaraSprites_Reorientation) == 0x011450, "Member 'ABP_RT_Quality_Parameters_C::NiagaraSprites_Reorientation' has a wrong offset!");
//static_assert(offsetof(ABP_RT_Quality_Parameters_C, ReorientedNiagara_CullingDistance) == 0x011460, "Member 'ABP_RT_Quality_Parameters_C::ReorientedNiagara_CullingDistance' has a wrong offset!");
//static_assert(offsetof(ABP_RT_Quality_Parameters_C, UseLumenSkyLightLookup) == 0x011470, "Member 'ABP_RT_Quality_Parameters_C::UseLumenSkyLightLookup' has a wrong offset!");
//static_assert(offsetof(ABP_RT_Quality_Parameters_C, AsyncBuild) == 0x011480, "Member 'ABP_RT_Quality_Parameters_C::AsyncBuild' has a wrong offset!");
//static_assert(offsetof(ABP_RT_Quality_Parameters_C, DLSS_RR_Enable) == 0x011490, "Member 'ABP_RT_Quality_Parameters_C::DLSS_RR_Enable' has a wrong offset!");
//static_assert(offsetof(ABP_RT_Quality_Parameters_C, FinalGather_MaxIntensity) == 0x0114A0, "Member 'ABP_RT_Quality_Parameters_C::FinalGather_MaxIntensity' has a wrong offset!");
//static_assert(offsetof(ABP_RT_Quality_Parameters_C, MaxBuiltPrimitivesPerFrame) == 0x0114B0, "Member 'ABP_RT_Quality_Parameters_C::MaxBuiltPrimitivesPerFrame' has a wrong offset!");
//static_assert(offsetof(ABP_RT_Quality_Parameters_C, TransmissionIntensityScale_) == 0x0114C0, "Member 'ABP_RT_Quality_Parameters_C::TransmissionIntensityScale_' has a wrong offset!");
//static_assert(offsetof(ABP_RT_Quality_Parameters_C, CreatePointsInHalfRes_) == 0x0114D0, "Member 'ABP_RT_Quality_Parameters_C::CreatePointsInHalfRes_' has a wrong offset!");
//static_assert(offsetof(ABP_RT_Quality_Parameters_C, NaniteDepth_UseTraceRayInline) == 0x0114E0, "Member 'ABP_RT_Quality_Parameters_C::NaniteDepth_UseTraceRayInline' has a wrong offset!");
//static_assert(offsetof(ABP_RT_Quality_Parameters_C, Sharc_Enable) == 0x0114F0, "Member 'ABP_RT_Quality_Parameters_C::Sharc_Enable' has a wrong offset!");
//static_assert(offsetof(ABP_RT_Quality_Parameters_C, GI_Enable_Sharc) == 0x011500, "Member 'ABP_RT_Quality_Parameters_C::GI_Enable_Sharc' has a wrong offset!");
//static_assert(offsetof(ABP_RT_Quality_Parameters_C, ReorientedNiagara_CullingAngle) == 0x011510, "Member 'ABP_RT_Quality_Parameters_C::ReorientedNiagara_CullingAngle' has a wrong offset!");
//static_assert(offsetof(ABP_RT_Quality_Parameters_C, RT_Shadows_Mode) == 0x011520, "Member 'ABP_RT_Quality_Parameters_C::RT_Shadows_Mode' has a wrong offset!");
//static_assert(offsetof(ABP_RT_Quality_Parameters_C, DLSSDRandomFactor_) == 0x011530, "Member 'ABP_RT_Quality_Parameters_C::DLSSDRandomFactor_' has a wrong offset!");
//static_assert(offsetof(ABP_RT_Quality_Parameters_C, ReorientedSprite_HalfRes) == 0x011540, "Member 'ABP_RT_Quality_Parameters_C::ReorientedSprite_HalfRes' has a wrong offset!");
//static_assert(offsetof(ABP_RT_Quality_Parameters_C, Sharc_DownscaleFactor) == 0x011550, "Member 'ABP_RT_Quality_Parameters_C::Sharc_DownscaleFactor' has a wrong offset!");
//static_assert(offsetof(ABP_RT_Quality_Parameters_C, HeterogeneousVolumes_RayTracedShadowMode) == 0x011560, "Member 'ABP_RT_Quality_Parameters_C::HeterogeneousVolumes_RayTracedShadowMode' has a wrong offset!");
//static_assert(offsetof(ABP_RT_Quality_Parameters_C, InstancedStaticMeshes_EnableInstancesCluster) == 0x011570, "Member 'ABP_RT_Quality_Parameters_C::InstancedStaticMeshes_EnableInstancesCluster' has a wrong offset!");
//static_assert(offsetof(ABP_RT_Quality_Parameters_C, InstancedStaticMeshes_InstancesClusterThreshold) == 0x011580, "Member 'ABP_RT_Quality_Parameters_C::InstancedStaticMeshes_InstancesClusterThreshold' has a wrong offset!");
//static_assert(offsetof(ABP_RT_Quality_Parameters_C, InstancedStaticMeshes_Culling_ClusterSize) == 0x011590, "Member 'ABP_RT_Quality_Parameters_C::InstancedStaticMeshes_Culling_ClusterSize' has a wrong offset!");
//static_assert(offsetof(ABP_RT_Quality_Parameters_C, InstancedStaticMeshes_LodBias) == 0x0115A0, "Member 'ABP_RT_Quality_Parameters_C::InstancedStaticMeshes_LodBias' has a wrong offset!");
//static_assert(offsetof(ABP_RT_Quality_Parameters_C, Foliage_UseRTDepthInRTPasses) == 0x0115B0, "Member 'ABP_RT_Quality_Parameters_C::Foliage_UseRTDepthInRTPasses' has a wrong offset!");
//static_assert(offsetof(ABP_RT_Quality_Parameters_C, Sharc_Mode) == 0x0115C0, "Member 'ABP_RT_Quality_Parameters_C::Sharc_Mode' has a wrong offset!");
//static_assert(offsetof(ABP_RT_Quality_Parameters_C, SingleLayer_Reflection) == 0x0115D0, "Member 'ABP_RT_Quality_Parameters_C::SingleLayer_Reflection' has a wrong offset!");
//static_assert(offsetof(ABP_RT_Quality_Parameters_C, SpatialSampleMaxShadowDistance) == 0x0115E0, "Member 'ABP_RT_Quality_Parameters_C::SpatialSampleMaxShadowDistance' has a wrong offset!");
//static_assert(offsetof(ABP_RT_Quality_Parameters_C, Reflections_MinClearCoatLevel) == 0x0115F0, "Member 'ABP_RT_Quality_Parameters_C::Reflections_MinClearCoatLevel' has a wrong offset!");
//static_assert(offsetof(ABP_RT_Quality_Parameters_C, ShadowRayInSpatialReuse) == 0x011600, "Member 'ABP_RT_Quality_Parameters_C::ShadowRayInSpatialReuse' has a wrong offset!");
//static_assert(offsetof(ABP_RT_Quality_Parameters_C, DirectionalFakeHairSurfaceDensity) == 0x011610, "Member 'ABP_RT_Quality_Parameters_C::DirectionalFakeHairSurfaceDensity' has a wrong offset!");
//static_assert(offsetof(ABP_RT_Quality_Parameters_C, ShadowIntensityScale) == 0x011620, "Member 'ABP_RT_Quality_Parameters_C::ShadowIntensityScale' has a wrong offset!");
//static_assert(offsetof(ABP_RT_Quality_Parameters_C, GI_SpecularFactor) == 0x011630, "Member 'ABP_RT_Quality_Parameters_C::GI_SpecularFactor' has a wrong offset!");
//static_assert(offsetof(ABP_RT_Quality_Parameters_C, SpecularMaxRoughness) == 0x011640, "Member 'ABP_RT_Quality_Parameters_C::SpecularMaxRoughness' has a wrong offset!");
//static_assert(offsetof(ABP_RT_Quality_Parameters_C, SpecularLobeAngleFraction) == 0x011650, "Member 'ABP_RT_Quality_Parameters_C::SpecularLobeAngleFraction' has a wrong offset!");
//static_assert(offsetof(ABP_RT_Quality_Parameters_C, SpecularBlurRadius) == 0x011660, "Member 'ABP_RT_Quality_Parameters_C::SpecularBlurRadius' has a wrong offset!");
//static_assert(offsetof(ABP_RT_Quality_Parameters_C, NRD_Specular_Denoiser) == 0x011670, "Member 'ABP_RT_Quality_Parameters_C::NRD_Specular_Denoiser' has a wrong offset!");
//static_assert(offsetof(ABP_RT_Quality_Parameters_C, Hybrid_Inset_Shadow) == 0x011680, "Member 'ABP_RT_Quality_Parameters_C::Hybrid_Inset_Shadow' has a wrong offset!");
//static_assert(offsetof(ABP_RT_Quality_Parameters_C, Reflections_GIHybrid) == 0x011690, "Member 'ABP_RT_Quality_Parameters_C::Reflections_GIHybrid' has a wrong offset!");
//static_assert(offsetof(ABP_RT_Quality_Parameters_C, Niagara_UseRayTracingShadow) == 0x0116A0, "Member 'ABP_RT_Quality_Parameters_C::Niagara_UseRayTracingShadow' has a wrong offset!");
//static_assert(offsetof(ABP_RT_Quality_Parameters_C, Niagara_Shadow_SupportLocalLight) == 0x0116B0, "Member 'ABP_RT_Quality_Parameters_C::Niagara_Shadow_SupportLocalLight' has a wrong offset!");
//static_assert(offsetof(ABP_RT_Quality_Parameters_C, SpecularLobeAngleSlack) == 0x0116C0, "Member 'ABP_RT_Quality_Parameters_C::SpecularLobeAngleSlack' has a wrong offset!");
//static_assert(offsetof(ABP_RT_Quality_Parameters_C, ReflectionGI_EnableVisibilityTest_) == 0x0116D0, "Member 'ABP_RT_Quality_Parameters_C::ReflectionGI_EnableVisibilityTest_' has a wrong offset!");
//static_assert(offsetof(ABP_RT_Quality_Parameters_C, ContactShadows_PatchRTShadow) == 0x0116E0, "Member 'ABP_RT_Quality_Parameters_C::ContactShadows_PatchRTShadow' has a wrong offset!");
//static_assert(offsetof(ABP_RT_Quality_Parameters_C, Particle_IndirectLightingScale) == 0x0116F0, "Member 'ABP_RT_Quality_Parameters_C::Particle_IndirectLightingScale' has a wrong offset!");
//static_assert(offsetof(ABP_RT_Quality_Parameters_C, RayTMinOffset) == 0x011700, "Member 'ABP_RT_Quality_Parameters_C::RayTMinOffset' has a wrong offset!");
//static_assert(offsetof(ABP_RT_Quality_Parameters_C, FoliageExpandOffset) == 0x011710, "Member 'ABP_RT_Quality_Parameters_C::FoliageExpandOffset' has a wrong offset!");
//static_assert(offsetof(ABP_RT_Quality_Parameters_C, HalfRes_DLSSDRandomFactor) == 0x011720, "Member 'ABP_RT_Quality_Parameters_C::HalfRes_DLSSDRandomFactor' has a wrong offset!");
//static_assert(offsetof(ABP_RT_Quality_Parameters_C, SpecularMinLuminanceWeight) == 0x011730, "Member 'ABP_RT_Quality_Parameters_C::SpecularMinLuminanceWeight' has a wrong offset!");
//static_assert(offsetof(ABP_RT_Quality_Parameters_C, HalfRes_DLSSRR_GI_IntensityScale) == 0x011740, "Member 'ABP_RT_Quality_Parameters_C::HalfRes_DLSSRR_GI_IntensityScale' has a wrong offset!");
//static_assert(offsetof(ABP_RT_Quality_Parameters_C, Enable_GI_Intensity_Override) == 0x011750, "Member 'ABP_RT_Quality_Parameters_C::Enable_GI_Intensity_Override' has a wrong offset!");
//static_assert(offsetof(ABP_RT_Quality_Parameters_C, GI_LightCullingDistance) == 0x011758, "Member 'ABP_RT_Quality_Parameters_C::GI_LightCullingDistance' has a wrong offset!");
//static_assert(offsetof(ABP_RT_Quality_Parameters_C, Transmission_HairScale) == 0x011768, "Member 'ABP_RT_Quality_Parameters_C::Transmission_HairScale' has a wrong offset!");
//static_assert(offsetof(ABP_RT_Quality_Parameters_C, VolumetricFog_GridPixelSize) == 0x011778, "Member 'ABP_RT_Quality_Parameters_C::VolumetricFog_GridPixelSize' has a wrong offset!");
//static_assert(offsetof(ABP_RT_Quality_Parameters_C, VolumetricFog_GridSizeZ) == 0x011788, "Member 'ABP_RT_Quality_Parameters_C::VolumetricFog_GridSizeZ' has a wrong offset!");
//static_assert(offsetof(ABP_RT_Quality_Parameters_C, SingleLayer_Reflection_ScreenPercentage) == 0x011798, "Member 'ABP_RT_Quality_Parameters_C::SingleLayer_Reflection_ScreenPercentage' has a wrong offset!");
//static_assert(offsetof(ABP_RT_Quality_Parameters_C, SingleLayer_Reflection_GI_ScreenPercentage) == 0x0117A8, "Member 'ABP_RT_Quality_Parameters_C::SingleLayer_Reflection_GI_ScreenPercentage' has a wrong offset!");
//static_assert(offsetof(ABP_RT_Quality_Parameters_C, SingleLayer_Reflection_GI_Enable) == 0x0117B8, "Member 'ABP_RT_Quality_Parameters_C::SingleLayer_Reflection_GI_Enable' has a wrong offset!");
//static_assert(offsetof(ABP_RT_Quality_Parameters_C, SLW_Enable_Reflection) == 0x0117C8, "Member 'ABP_RT_Quality_Parameters_C::SLW_Enable_Reflection' has a wrong offset!");
//static_assert(offsetof(ABP_RT_Quality_Parameters_C, Reflections_OpaqueSurfaces) == 0x0117D8, "Member 'ABP_RT_Quality_Parameters_C::Reflections_OpaqueSurfaces' has a wrong offset!");
//static_assert(offsetof(ABP_RT_Quality_Parameters_C, RT_Artist_Parameter_Override) == 0x0117E8, "Member 'ABP_RT_Quality_Parameters_C::RT_Artist_Parameter_Override' has a wrong offset!");
//static_assert(offsetof(ABP_RT_Quality_Parameters_C, MaxPatchContactShadowLength) == 0x0117F0, "Member 'ABP_RT_Quality_Parameters_C::MaxPatchContactShadowLength' has a wrong offset!");
//static_assert(offsetof(ABP_RT_Quality_Parameters_C, Reflections_ForceDisableSkyLight) == 0x011800, "Member 'ABP_RT_Quality_Parameters_C::Reflections_ForceDisableSkyLight' has a wrong offset!");
//static_assert(offsetof(ABP_RT_Quality_Parameters_C, Tonemapper_Sharpen) == 0x011810, "Member 'ABP_RT_Quality_Parameters_C::Tonemapper_Sharpen' has a wrong offset!");
//static_assert(offsetof(ABP_RT_Quality_Parameters_C, InstancedStaticMeshes_SimulationClusterRadius) == 0x011820, "Member 'ABP_RT_Quality_Parameters_C::InstancedStaticMeshes_SimulationClusterRadius' has a wrong offset!");

}

