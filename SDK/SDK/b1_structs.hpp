#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: b1

#include "Basic.hpp"

#include "AIModule_structs.hpp"
#include "CoreUObject_structs.hpp"
#include "Engine_structs.hpp"
#include "PhysicsCore_structs.hpp"
#include "GameplayTags_structs.hpp"


namespace SDK
{

// Enum b1.EBGUFSMEventName
// NumValues: 0x000E
enum class EBGUFSMEventName : uint8
{
	FSM_EVENT_LIFE_HASTARGET                 = 0,
	FSM_EVENT_LIFE_GOHOME                    = 10,
	FSM_EVENT_LIFE_ARRIVEHOME                = 11,
	FSM_EVENT_LIFE_GAZEANDSURROUND           = 12,
	FSM_EVENT_LIFE_DIE                       = 1,
	FSM_EVENT_LIFE_REVIVE                    = 2,
	FSM_EVENT_LIFE_STANDBY                   = 3,
	FSM_EVENT_NONCOMBAT_WARNNING             = 4,
	FSM_EVENT_NONCOMBAT_IDLE                 = 5,
	FSM_EVENT_BATTLE_BEHIT                   = 6,
	FSM_EVENT_BATTLE_ATTACK                  = 7,
	FSM_EVENT_BATTLE_WANDER                  = 8,
	FSM_EVENT_BATTLE_STALEMATE               = 9,
	FSM_EVENT_MAX                            = 13,
};

// Enum b1.EBGURunEQSObjReason
// NumValues: 0x0006
enum class EBGURunEQSObjReason : uint8
{
	None                                     = 0,
	Teleport                                 = 1,
	Summon                                   = 2,
	RandomPatrol                             = 3,
	GenPointSet                              = 4,
	EBGURunEQSObjReason_MAX                  = 5,
};

// Enum b1.EGsEnAnimNS
// NumValues: 0x001D
enum class EGsEnAnimNS : uint8
{
	None                                     = 0,
	AttackState                              = 1,
	AttackRotation                           = 2,
	SweepCheck                               = 3,
	ComboWindow                              = 4,
	EditorHelper                             = 5,
	DevLineHit                               = 6,
	AddState                                 = 7,
	AddBuff                                  = 8,
	SlowTime                                 = 9,
	CalcAMScale                              = 10,
	CastDingShen                             = 11,
	SetCurveValueToMesh                      = 12,
	HeadLock                                 = 13,
	HandAndFootLock                          = 14,
	ChangeMoveMode                           = 15,
	ZatoiSPScore                             = 16,
	AMSpeedRate                              = 17,
	AMCurveMove                              = 18,
	Aiming                                   = 19,
	Shooting                                 = 20,
	Casting                                  = 21,
	MoveAttackState                          = 22,
	AISkillFeature                           = 23,
	MontageJumpToSection                     = 24,
	AbortWindow                              = 25,
	SetCurveValueToHair                      = 26,
	SyncAnimation                            = 27,
	Max                                      = 28,
};

// Enum b1.EGsEnAnimN
// NumValues: 0x0004
enum class EGsEnAnimN : uint8
{
	None                                     = 0,
	MontageJumpToSection                     = 1,
	PlayerNiagaraFX                          = 2,
	Max                                      = 3,
};

// Enum b1.EBGDrawDebugType
// NumValues: 0x0004
enum class EBGDrawDebugType : uint8
{
	None                                     = 0,
	Movement                                 = 1,
	QTE                                      = 2,
	MAX                                      = 3,
};

// Enum b1.EGSNetCloseResult
// NumValues: 0x0004
enum class EGSNetCloseResult : uint32
{
	Test                                     = 0,
	Unknown                                  = 1,
	Success                                  = 2,
	EGSNetCloseResult_MAX                    = 3,
};

// Enum b1.ESweepCheckType
// NumValues: 0x0003
enum class ESweepCheckType : uint8
{
	SweepCheck                               = 0,
	AttackWarning                            = 1,
	Max                                      = 2,
};

// Enum b1.ETamerType
// NumValues: 0x0005
enum class ETamerType : uint32
{
	None                                     = 0,
	LevelLoaded                              = 1,
	Spawned                                  = 2,
	Summoned                                 = 3,
	ETamerType_MAX                           = 4,
};

// Enum b1.ECustomTickGroup
// NumValues: 0x0006
enum class ECustomTickGroup : uint8
{
	ECustomTickGroup_None                    = 0,
	PreAnimation                             = 101,
	BeforeStartPhsics                        = 111,
	BeforePostPhsics                         = 141,
	BeforePostUpdateWork                     = 151,
	ECustomTickGroup_MAX                     = 152,
};

// Enum b1.EStartGameInstanceTypeForCS
// NumValues: 0x0008
enum class EStartGameInstanceTypeForCS : uint8
{
	StartCS_UnKnow                           = 0,
	StartCS_StandAlone                       = 1,
	StartCS_DedicateServer                   = 2,
	StartCS_PIE_Standalone                   = 3,
	StartCS_PIE_ListenServer                 = 4,
	StartCS_PIE_Client                       = 5,
	StartCS_PIE_DedicateServer               = 6,
	StartCS_MAX                              = 7,
};

// Enum b1.ESortType
// NumValues: 0x0004
enum class ESortType : uint8
{
	None                                     = 0,
	big_to_small                             = 1,
	Small_to_big                             = 2,
	ESortType_MAX                            = 3,
};

// Enum b1.EGSStatType
// NumValues: 0x0005
enum class EGSStatType : uint8
{
	NONE                                     = 0,
	CYCLE                                    = 1,
	MEMORY                                   = 2,
	NUM                                      = 3,
	EGSStatType_MAX                          = 4,
};

// Enum b1.EVolumeStreamingMethod
// NumValues: 0x0004
enum class EVolumeStreamingMethod : uint8
{
	StreamingLevel                           = 0,
	WorldCompositionGroup                    = 1,
	WorldPartition                           = 2,
	EVolumeStreamingMethod_MAX               = 3,
};

// Enum b1.EOnlineActivityOutcomeType
// NumValues: 0x0004
enum class EOnlineActivityOutcomeType : uint8
{
	Completed                                = 0,
	Failed                                   = 1,
	Cancelled                                = 2,
	EOnlineActivityOutcomeType_MAX           = 3,
};

// Enum b1.EFriendsListsType
// NumValues: 0x0005
enum class EFriendsListsType : uint8
{
	Default                                  = 0,
	OnlinePlayers                            = 1,
	InGamePlayers                            = 2,
	InGameAndSessionPlayers                  = 3,
	EFriendsListsType_MAX                    = 4,
};

// Enum b1.EFriendsStateType
// NumValues: 0x0007
enum class EFriendsStateType : uint8
{
	Online                                   = 0,
	Offline                                  = 1,
	Away                                     = 2,
	ExtendedAway                             = 3,
	DoNotDisturb                             = 4,
	Chat                                     = 5,
	EFriendsStateType_MAX                    = 6,
};

// Enum b1.EBGWLoginStatus
// NumValues: 0x0004
enum class EBGWLoginStatus : uint8
{
	NotLoggedIn                              = 0,
	UsingLocalProfile                        = 1,
	LoggedIn                                 = 2,
	EBGWLoginStatus_MAX                      = 3,
};

// Enum b1.EBGWUserPrivileges
// NumValues: 0x0006
enum class EBGWUserPrivileges : uint8
{
	CanPlay                                  = 0,
	CanPlayOnline                            = 1,
	CanCommunicateOnline                     = 2,
	CanUseUserGeneratedContent               = 3,
	CanUserCrossPlay                         = 4,
	EBGWUserPrivileges_MAX                   = 5,
};

// Enum b1.EBGWPrivilegeResult
// NumValues: 0x000B
enum class EBGWPrivilegeResult : uint8
{
	Unknown                                  = 0,
	Available                                = 1,
	UserNotLoggedIn                          = 2,
	LicenseInvalid                           = 3,
	VersionOutdated                          = 4,
	NetworkConnectionUnavailable             = 5,
	AgeRestricted                            = 6,
	AccountTypeRestricted                    = 7,
	AccountUseRestricted                     = 8,
	PlatformFailure                          = 9,
	EBGWPrivilegeResult_MAX                  = 10,
};

// Enum b1.EOnlinePresenceStateType
// NumValues: 0x0007
enum class EOnlinePresenceStateType : uint8
{
	Online                                   = 0,
	Offline                                  = 1,
	Away                                     = 2,
	ExtendedAway                             = 3,
	DoNotDisturb                             = 4,
	Chat                                     = 5,
	EOnlinePresenceStateType_MAX             = 6,
};

// Enum b1.EBGWOnlineSessionState
// NumValues: 0x0009
enum class EBGWOnlineSessionState : uint8
{
	NoSession                                = 0,
	Creating                                 = 1,
	Pending                                  = 2,
	Starting                                 = 3,
	InProgress                               = 4,
	Ending                                   = 5,
	Ended                                    = 6,
	Destroying                               = 7,
	EBGWOnlineSessionState_MAX               = 8,
};

// Enum b1.EBGWOnlineSessionType
// NumValues: 0x0005
enum class EBGWOnlineSessionType : uint8
{
	InvalidSession                           = 0,
	GameSession                              = 1,
	PlayerSession                            = 2,
	PartySession                             = 3,
	EBGWOnlineSessionType_MAX                = 4,
};

// Enum b1.EBGWJoinSessionResult
// NumValues: 0x0007
enum class EBGWJoinSessionResult : uint8
{
	Success                                  = 0,
	SessionIsFull                            = 1,
	SessionDoesNotExist                      = 2,
	CouldNotRetrieveAddress                  = 3,
	AlreadyInSession                         = 4,
	UnknownError                             = 5,
	EBGWJoinSessionResult_MAX                = 6,
};

// Enum b1.EBGWSubsystemType
// NumValues: 0x0008
enum class EBGWSubsystemType : uint8
{
	Unknown                                  = 0,
	NULLL                                    = 1,
	Steam                                    = 2,
	Epic                                     = 3,
	TENCENT                                  = 4,
	GDK                                      = 5,
	PS5                                      = 6,
	EBGWSubsystemType_MAX                    = 7,
};

// Enum b1.ECameraBlendType
// NumValues: 0x0004
enum class ECameraBlendType : uint8
{
	None                                     = 0,
	BlendBySpeed                             = 1,
	BlendByTime                              = 2,
	MAX                                      = 255,
};

// Enum b1.ERefRotatorType
// NumValues: 0x0005
enum class ERefRotatorType : uint8
{
	Zero                                     = 0,
	RefByController                          = 1,
	RefByPlayer                              = 2,
	RefByPlayerQTE                           = 3,
	MAX                                      = 255,
};

// Enum b1.EBGUEQCQueryType
// NumValues: 0x0006
enum class EBGUEQCQueryType : uint8
{
	None                                     = 0,
	SingleActor                              = 1,
	SingleLocation                           = 2,
	ActorSet                                 = 3,
	LocationSet                              = 4,
	EBGUEQCQueryType_MAX                     = 5,
};

// Enum b1.EBUHandFootType
// NumValues: 0x0006
enum class EBUHandFootType : uint8
{
	None                                     = 0,
	LeftHand                                 = 1,
	RightHand                                = 2,
	LeftFoot                                 = 3,
	RightFoot                                = 4,
	EBUHandFootType_MAX                      = 5,
};

// Enum b1.EBUTargetFilter
// NumValues: 0x0005
enum class EBUTargetFilter : uint8
{
	Default                                  = 0,
	MySelf                                   = 1,
	TeamMate                                 = 2,
	Enemy                                    = 4,
	EBUTargetFilter_MAX                      = 5,
};

// Enum b1.EBGUFSMStateName
// NumValues: 0x0010
enum class EBGUFSMStateName : uint8
{
	FSM_STATE_LIFE                           = 0,
	FSM_STATE_LIFE_RETURNHOME                = 9,
	FSM_STATE_LIFE_DEAD                      = 1,
	FSM_STATE_BATTLE                         = 2,
	FSM_STATE_BATTLE_ATTACK                  = 3,
	FSM_STATE_BATTLE_WANDER                  = 4,
	FSM_STATE_BATTLE_STALEMATE               = 5,
	FSM_STATE_NONCOMBAT                      = 6,
	FSM_STATE_NONCOMBAT_WARNNING             = 7,
	FSM_STATE_NONCOMBAT_IDLE                 = 8,
	FSM_STATE_REVOLVEAROUND                  = 11,
	FSM_STATE_NEUTRALANIMAL_PATROL           = 12,
	FSM_STATE_NEUTRALANIMAL_BATTLE           = 13,
	FSM_STATE_NEUTRALANIMAL_ESCAPE           = 14,
	FSM_STATE_INVALID                        = 20,
	FSM_STATE_MAX                            = 21,
};

// Enum b1.ESweepCheckHitFilterType
// NumValues: 0x0004
enum class ESweepCheckHitFilterType : uint8
{
	Zero                                     = 0,
	NotInSameTeam                            = 1,
	FilterMaster                             = 2,
	MAX                                      = 255,
};

// Enum b1.EBeamFXTargetActorType
// NumValues: 0x0004
enum class EBeamFXTargetActorType : uint8
{
	Zero                                     = 0,
	Self                                     = 1,
	CameraLockActor                          = 2,
	MAX                                      = 255,
};

// Enum b1.EGSBlendTypeG
// NumValues: 0x0006
enum class EGSBlendTypeG : uint8
{
	GSNone                                   = 0,
	GSLinear                                 = 1,
	GSEaseIn                                 = 2,
	GSEaseOut                                = 3,
	GSEaseInOut                              = 4,
	MAX                                      = 255,
};

// Enum b1.EGSSweepCheckShapeType
// NumValues: 0x0005
enum class EGSSweepCheckShapeType : uint8
{
	Zero                                     = 0,
	BoxShape                                 = 1,
	SphereShape                              = 2,
	CapsuleShape                             = 3,
	MAX                                      = 255,
};

// Enum b1.EBBKeyType
// NumValues: 0x000C
enum class EBBKeyType : uint8
{
	BOOL_TYPE                                = 0,
	CLASS_TYPE                               = 1,
	ENUM_TYPE                                = 2,
	FLOAT_TYPE                               = 3,
	INT_TYPE                                 = 4,
	NAME_TYPE                                = 5,
	NATIVE_ENUM_TYPE                         = 6,
	OBJECT_TYPE                              = 7,
	ROTATOR_TYPE                             = 8,
	STRING_TYPE                              = 9,
	VECTOR_TYPE                              = 10,
	EBBKeyType_MAX                           = 11,
};

// Enum b1.EBGWStreamingVolumeUsage
// NumValues: 0x0006
enum class EBGWStreamingVolumeUsage : uint8
{
	Loading                                  = 0,
	LoadingAndVisibility                     = 1,
	VisibilityBlockingOnLoad                 = 2,
	BlockingOnLoad                           = 3,
	LoadingNotVisible                        = 4,
	MAX                                      = 5,
};

// Enum b1.ETargetLevelStreamingState
// NumValues: 0x0004
enum class ETargetLevelStreamingState : uint8
{
	RemainCurrent                            = 0,
	HideOnly                                 = 1,
	Unloaded                                 = 2,
	ETargetLevelStreamingState_MAX           = 3,
};

// Enum b1.EGSLevelState
// NumValues: 0x0005
enum class EGSLevelState : uint8
{
	Auto                                     = 0,
	LoadedVisible                            = 1,
	LoadedInvisible                          = 2,
	Unloaded                                 = 3,
	EGSLevelState_MAX                        = 4,
};

// Enum b1.EGSLevelSetResult
// NumValues: 0x0009
enum class EGSLevelSetResult : uint8
{
	Success                                  = 0,
	RefusedByVolume                          = 1,
	LevelNotFound                            = 2,
	NullPtrParam                             = 3,
	WorldTypeError                           = 4,
	UnnecessaryUnload                        = 5,
	BlockedByHotLevelStreaming               = 6,
	UnknownError                             = 7,
	EGSLevelSetResult_MAX                    = 8,
};

// Enum b1.EBGU_PathFindingResult
// NumValues: 0x0004
enum class EBGU_PathFindingResult : uint8
{
	FirstFindingSuccess                      = 0,
	SecondFindingSussess                     = 1,
	Fail                                     = 2,
	EBGU_MAX                                 = 3,
};

// Enum b1.EWeatherType
// NumValues: 0x0004
enum class EWeatherType : uint8
{
	None                                     = 0,
	Snowy                                    = 1,
	Rainy                                    = 2,
	EWeatherType_MAX                         = 3,
};

// Enum b1.EGSPointOnCircleSpacingMethod
// NumValues: 0x0003
enum class EGSPointOnCircleSpacingMethod : uint8
{
	BySpaceBetween                           = 0,
	ByNumberOfPoints                         = 1,
	EGSPointOnCircleSpacingMethod_MAX        = 2,
};

// Enum b1.EGSAngleCenterDirection
// NumValues: 0x0005
enum class EGSAngleCenterDirection : uint8
{
	Forward                                  = 0,
	Back                                     = 1,
	Left                                     = 2,
	Right                                    = 3,
	EGSAngleCenterDirection_MAX              = 4,
};

// Enum b1.EGSEnvTraceMode
// NumValues: 0x0004
enum class EGSEnvTraceMode : uint8
{
	None                                     = 0,
	Navigation                               = 1,
	CapsuleTraceByPawn                       = 2,
	EGSEnvTraceMode_MAX                      = 3,
};

// Enum b1.EGSEnvContextBase
// NumValues: 0x0007
enum class EGSEnvContextBase : uint8
{
	Querier                                  = 0,
	Player                                   = 1,
	PlayerCamera                             = 2,
	SceneItemByTag                           = 3,
	Target                                   = 4,
	CustomActor                              = 5,
	EGSEnvContextBase_MAX                    = 6,
};

// Enum b1.EBGW_DispLibEnvWeather
// NumValues: 0x0009
enum class EBGW_DispLibEnvWeather : uint8
{
	Sunny                                    = 0,
	Mist                                     = 1,
	Rain                                     = 2,
	Fog                                      = 3,
	Snow                                     = 4,
	SandStorm                                = 5,
	Narrative                                = 6,
	Night                                    = 7,
	EBGW_MAX                                 = 8,
};

// ScriptStruct b1.UStGSHitResult
// 0x0078 (0x0078 - 0x0000)
struct FUStGSHitResult final
{
public:
	struct FVector                                PreCheckLocation;                                  // 0x0000(0x0018)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                CurCheckLocation;                                  // 0x0018(0x0018)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class AActor*                                 Actor;                                             // 0x0030(0x0008)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                ImpactPoint;                                       // 0x0038(0x0018)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UPrimitiveComponent*                    HitComponent;                                      // 0x0050(0x0008)(BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   BoneName;                                          // 0x0058(0x0008)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                Normal;                                            // 0x0060(0x0018)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
//static_assert(alignof(FUStGSHitResult) == 0x000008, "Wrong alignment on FUStGSHitResult");
//static_assert(sizeof(FUStGSHitResult) == 0x000078, "Wrong size on FUStGSHitResult");
//static_assert(offsetof(FUStGSHitResult, PreCheckLocation) == 0x000000, "Member 'FUStGSHitResult::PreCheckLocation' has a wrong offset!");
//static_assert(offsetof(FUStGSHitResult, CurCheckLocation) == 0x000018, "Member 'FUStGSHitResult::CurCheckLocation' has a wrong offset!");
//static_assert(offsetof(FUStGSHitResult, Actor) == 0x000030, "Member 'FUStGSHitResult::Actor' has a wrong offset!");
//static_assert(offsetof(FUStGSHitResult, ImpactPoint) == 0x000038, "Member 'FUStGSHitResult::ImpactPoint' has a wrong offset!");
//static_assert(offsetof(FUStGSHitResult, HitComponent) == 0x000050, "Member 'FUStGSHitResult::HitComponent' has a wrong offset!");
//static_assert(offsetof(FUStGSHitResult, BoneName) == 0x000058, "Member 'FUStGSHitResult::BoneName' has a wrong offset!");
//static_assert(offsetof(FUStGSHitResult, Normal) == 0x000060, "Member 'FUStGSHitResult::Normal' has a wrong offset!");

// ScriptStruct b1.UStGSNotifyParam
// 0x0040 (0x0040 - 0x0000)
struct FUStGSNotifyParam final
{
public:
	class UWorld*                                 World;                                             // 0x0000(0x0008)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class AActor*                                 Owner;                                             // 0x0008(0x0008)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         CurInstanceID;                                     // 0x0010(0x0004)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         FromInstanceID;                                    // 0x0014(0x0004)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         UniqueId;                                          // 0x0018(0x0004)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1C[0x4];                                       // 0x001C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class USkeletalMeshComponent*                 MeshComp;                                          // 0x0020(0x0008)(BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UAnimSequenceBase*                      Animation;                                         // 0x0028(0x0008)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         AnimNotifyEvent_LinkValue;                         // 0x0030(0x0004)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         NotifyBeginTime;                                   // 0x0034(0x0004)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         NotifyEndTime;                                     // 0x0038(0x0004)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_3C[0x4];                                       // 0x003C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
//static_assert(alignof(FUStGSNotifyParam) == 0x000008, "Wrong alignment on FUStGSNotifyParam");
//static_assert(sizeof(FUStGSNotifyParam) == 0x000040, "Wrong size on FUStGSNotifyParam");
//static_assert(offsetof(FUStGSNotifyParam, World) == 0x000000, "Member 'FUStGSNotifyParam::World' has a wrong offset!");
//static_assert(offsetof(FUStGSNotifyParam, Owner) == 0x000008, "Member 'FUStGSNotifyParam::Owner' has a wrong offset!");
//static_assert(offsetof(FUStGSNotifyParam, CurInstanceID) == 0x000010, "Member 'FUStGSNotifyParam::CurInstanceID' has a wrong offset!");
//static_assert(offsetof(FUStGSNotifyParam, FromInstanceID) == 0x000014, "Member 'FUStGSNotifyParam::FromInstanceID' has a wrong offset!");
//static_assert(offsetof(FUStGSNotifyParam, UniqueId) == 0x000018, "Member 'FUStGSNotifyParam::UniqueId' has a wrong offset!");
//static_assert(offsetof(FUStGSNotifyParam, MeshComp) == 0x000020, "Member 'FUStGSNotifyParam::MeshComp' has a wrong offset!");
//static_assert(offsetof(FUStGSNotifyParam, Animation) == 0x000028, "Member 'FUStGSNotifyParam::Animation' has a wrong offset!");
//static_assert(offsetof(FUStGSNotifyParam, AnimNotifyEvent_LinkValue) == 0x000030, "Member 'FUStGSNotifyParam::AnimNotifyEvent_LinkValue' has a wrong offset!");
//static_assert(offsetof(FUStGSNotifyParam, NotifyBeginTime) == 0x000034, "Member 'FUStGSNotifyParam::NotifyBeginTime' has a wrong offset!");
//static_assert(offsetof(FUStGSNotifyParam, NotifyEndTime) == 0x000038, "Member 'FUStGSNotifyParam::NotifyEndTime' has a wrong offset!");

// ScriptStruct b1.UStGSNotifyStateCache
// 0x0020 (0x0020 - 0x0000)
struct FUStGSNotifyStateCache final
{
public:
	TArray<struct FUStGSNotifyParam>              NotifyParams;                                      // 0x0000(0x0010)(ZeroConstructor, ContainsInstancedReference, NativeAccessSpecifierPublic)
	TArray<TWeakObjectPtr<class UAnimNotifyState_GSBase>> NotifyStatePtrs;                                   // 0x0010(0x0010)(ZeroConstructor, UObjectWrapper, NativeAccessSpecifierPublic)
};
//static_assert(alignof(FUStGSNotifyStateCache) == 0x000008, "Wrong alignment on FUStGSNotifyStateCache");
//static_assert(sizeof(FUStGSNotifyStateCache) == 0x000020, "Wrong size on FUStGSNotifyStateCache");
//static_assert(offsetof(FUStGSNotifyStateCache, NotifyParams) == 0x000000, "Member 'FUStGSNotifyStateCache::NotifyParams' has a wrong offset!");
//static_assert(offsetof(FUStGSNotifyStateCache, NotifyStatePtrs) == 0x000010, "Member 'FUStGSNotifyStateCache::NotifyStatePtrs' has a wrong offset!");

// ScriptStruct b1.TraceStatResult
// 0x0018 (0x0018 - 0x0000)
struct FTraceStatResult final
{
public:
	class FString                                 StatName;                                          // 0x0000(0x0010)(Edit, BlueprintVisible, ZeroConstructor, EditConst, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Value;                                             // 0x0010(0x0004)(Edit, BlueprintVisible, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EGSStatType                                   StatType;                                          // 0x0014(0x0001)(Edit, BlueprintVisible, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_15[0x3];                                       // 0x0015(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
//static_assert(alignof(FTraceStatResult) == 0x000008, "Wrong alignment on FTraceStatResult");
//static_assert(sizeof(FTraceStatResult) == 0x000018, "Wrong size on FTraceStatResult");
//static_assert(offsetof(FTraceStatResult, StatName) == 0x000000, "Member 'FTraceStatResult::StatName' has a wrong offset!");
//static_assert(offsetof(FTraceStatResult, Value) == 0x000010, "Member 'FTraceStatResult::Value' has a wrong offset!");
//static_assert(offsetof(FTraceStatResult, StatType) == 0x000014, "Member 'FTraceStatResult::StatType' has a wrong offset!");

// ScriptStruct b1.GSEQSExParam
// 0x000C (0x000C - 0x0000)
struct FGSEQSExParam final
{
public:
	EBGURunEQSObjReason                           RunEQSObjReason;                                   // 0x0000(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ExParam_Bool;                                      // 0x0001(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2[0x2];                                        // 0x0002(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         ExParam_Int;                                       // 0x0004(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         ExParam_Int2;                                      // 0x0008(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
//static_assert(alignof(FGSEQSExParam) == 0x000004, "Wrong alignment on FGSEQSExParam");
//static_assert(sizeof(FGSEQSExParam) == 0x00000C, "Wrong size on FGSEQSExParam");
//static_assert(offsetof(FGSEQSExParam, RunEQSObjReason) == 0x000000, "Member 'FGSEQSExParam::RunEQSObjReason' has a wrong offset!");
//static_assert(offsetof(FGSEQSExParam, ExParam_Bool) == 0x000001, "Member 'FGSEQSExParam::ExParam_Bool' has a wrong offset!");
//static_assert(offsetof(FGSEQSExParam, ExParam_Int) == 0x000004, "Member 'FGSEQSExParam::ExParam_Int' has a wrong offset!");
//static_assert(offsetof(FGSEQSExParam, ExParam_Int2) == 0x000008, "Member 'FGSEQSExParam::ExParam_Int2' has a wrong offset!");

// ScriptStruct b1.ActorEventReg
// 0x0010 (0x0010 - 0x0000)
struct FActorEventReg final
{
public:
	int32                                         EventID;                                           // 0x0000(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_4[0x4];                                        // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UBaseActorComp*                         Comp;                                              // 0x0008(0x0008)(ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
//static_assert(alignof(FActorEventReg) == 0x000008, "Wrong alignment on FActorEventReg");
//static_assert(sizeof(FActorEventReg) == 0x000010, "Wrong size on FActorEventReg");
//static_assert(offsetof(FActorEventReg, EventID) == 0x000000, "Member 'FActorEventReg::EventID' has a wrong offset!");
//static_assert(offsetof(FActorEventReg, Comp) == 0x000008, "Member 'FActorEventReg::Comp' has a wrong offset!");

// ScriptStruct b1.NotifySoftRefs
// 0x0050 (0x0050 - 0x0000)
struct FNotifySoftRefs final
{
public:
	TSet<struct FSoftObjectPath>                  SoftPaths;                                         // 0x0000(0x0050)(BlueprintVisible, NativeAccessSpecifierPublic)
};
//static_assert(alignof(FNotifySoftRefs) == 0x000008, "Wrong alignment on FNotifySoftRefs");
//static_assert(sizeof(FNotifySoftRefs) == 0x000050, "Wrong size on FNotifySoftRefs");
//static_assert(offsetof(FNotifySoftRefs, SoftPaths) == 0x000000, "Member 'FNotifySoftRefs::SoftPaths' has a wrong offset!");

// ScriptStruct b1.UStCheckTransformArray
// 0x0010 (0x0010 - 0x0000)
struct FUStCheckTransformArray final
{
public:
	TArray<struct FTransform>                     TransformList;                                     // 0x0000(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
};
//static_assert(alignof(FUStCheckTransformArray) == 0x000008, "Wrong alignment on FUStCheckTransformArray");
//static_assert(sizeof(FUStCheckTransformArray) == 0x000010, "Wrong size on FUStCheckTransformArray");
//static_assert(offsetof(FUStCheckTransformArray, TransformList) == 0x000000, "Member 'FUStCheckTransformArray::TransformList' has a wrong offset!");

// ScriptStruct b1.UStCheckShape
// 0x0050 (0x0050 - 0x0000)
struct FUStCheckShape final
{
public:
	bool                                          IsCapsuleShape;                                    // 0x0000(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x7];                                        // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                Rotation;                                          // 0x0008(0x0018)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                Scale;                                             // 0x0020(0x0018)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Radius;                                            // 0x0038(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   SocketName;                                        // 0x003C(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_44[0x4];                                       // 0x0044(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class USkeletalMeshComponent*                 SKComp;                                            // 0x0048(0x0008)(BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
//static_assert(alignof(FUStCheckShape) == 0x000008, "Wrong alignment on FUStCheckShape");
//static_assert(sizeof(FUStCheckShape) == 0x000050, "Wrong size on FUStCheckShape");
//static_assert(offsetof(FUStCheckShape, IsCapsuleShape) == 0x000000, "Member 'FUStCheckShape::IsCapsuleShape' has a wrong offset!");
//static_assert(offsetof(FUStCheckShape, Rotation) == 0x000008, "Member 'FUStCheckShape::Rotation' has a wrong offset!");
//static_assert(offsetof(FUStCheckShape, Scale) == 0x000020, "Member 'FUStCheckShape::Scale' has a wrong offset!");
//static_assert(offsetof(FUStCheckShape, Radius) == 0x000038, "Member 'FUStCheckShape::Radius' has a wrong offset!");
//static_assert(offsetof(FUStCheckShape, SocketName) == 0x00003C, "Member 'FUStCheckShape::SocketName' has a wrong offset!");
//static_assert(offsetof(FUStCheckShape, SKComp) == 0x000048, "Member 'FUStCheckShape::SKComp' has a wrong offset!");

// ScriptStruct b1.UnitWeaponPreview
// 0x0010 (0x0010 - 0x0000)
struct FUnitWeaponPreview final
{
public:
	TSubclassOf<class AActor>                     Weapon;                                            // 0x0000(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   SocketName;                                        // 0x0008(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
//static_assert(alignof(FUnitWeaponPreview) == 0x000008, "Wrong alignment on FUnitWeaponPreview");
//static_assert(sizeof(FUnitWeaponPreview) == 0x000010, "Wrong size on FUnitWeaponPreview");
//static_assert(offsetof(FUnitWeaponPreview, Weapon) == 0x000000, "Member 'FUnitWeaponPreview::Weapon' has a wrong offset!");
//static_assert(offsetof(FUnitWeaponPreview, SocketName) == 0x000008, "Member 'FUnitWeaponPreview::SocketName' has a wrong offset!");

// ScriptStruct b1.SocketName
// 0x0010 (0x0010 - 0x0000)
struct FSocketName final
{
public:
	class FName                                   FirstSocketName;                                   // 0x0000(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   SecondSocketName;                                  // 0x0008(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
//static_assert(alignof(FSocketName) == 0x000004, "Wrong alignment on FSocketName");
//static_assert(sizeof(FSocketName) == 0x000010, "Wrong size on FSocketName");
//static_assert(offsetof(FSocketName, FirstSocketName) == 0x000000, "Member 'FSocketName::FirstSocketName' has a wrong offset!");
//static_assert(offsetof(FSocketName, SecondSocketName) == 0x000008, "Member 'FSocketName::SecondSocketName' has a wrong offset!");

// ScriptStruct b1.B1ConnectionAlwaysRelevantNodePair
// 0x0010 (0x0010 - 0x0000)
struct FB1ConnectionAlwaysRelevantNodePair final
{
public:
	class UNetConnection*                         NetConnection;                                     // 0x0000(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UB1ReplicationGraphNode_AlwaysRelevant_ForConnection* Node;                                              // 0x0008(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
//static_assert(alignof(FB1ConnectionAlwaysRelevantNodePair) == 0x000008, "Wrong alignment on FB1ConnectionAlwaysRelevantNodePair");
//static_assert(sizeof(FB1ConnectionAlwaysRelevantNodePair) == 0x000010, "Wrong size on FB1ConnectionAlwaysRelevantNodePair");
//static_assert(offsetof(FB1ConnectionAlwaysRelevantNodePair, NetConnection) == 0x000000, "Member 'FB1ConnectionAlwaysRelevantNodePair::NetConnection' has a wrong offset!");
//static_assert(offsetof(FB1ConnectionAlwaysRelevantNodePair, Node) == 0x000008, "Member 'FB1ConnectionAlwaysRelevantNodePair::Node' has a wrong offset!");

// ScriptStruct b1.ActorGuidOption
// 0x0020 (0x0020 - 0x0000)
struct FActorGuidOption final
{
public:
	class FString                                 DisplayName;                                       // 0x0000(0x0010)(BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 ActorGuid;                                         // 0x0010(0x0010)(BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
//static_assert(alignof(FActorGuidOption) == 0x000008, "Wrong alignment on FActorGuidOption");
//static_assert(sizeof(FActorGuidOption) == 0x000020, "Wrong size on FActorGuidOption");
//static_assert(offsetof(FActorGuidOption, DisplayName) == 0x000000, "Member 'FActorGuidOption::DisplayName' has a wrong offset!");
//static_assert(offsetof(FActorGuidOption, ActorGuid) == 0x000010, "Member 'FActorGuidOption::ActorGuid' has a wrong offset!");

// ScriptStruct b1.BGUReplicatedAcceleration
// 0x0003 (0x0003 - 0x0000)
struct FBGUReplicatedAcceleration final
{
public:
	uint8                                         AccelXYRadians;                                    // 0x0000(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         AccelXYMagnitude;                                  // 0x0001(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int8                                          AccelZ;                                            // 0x0002(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
//static_assert(alignof(FBGUReplicatedAcceleration) == 0x000001, "Wrong alignment on FBGUReplicatedAcceleration");
//static_assert(sizeof(FBGUReplicatedAcceleration) == 0x000003, "Wrong size on FBGUReplicatedAcceleration");
//static_assert(offsetof(FBGUReplicatedAcceleration, AccelXYRadians) == 0x000000, "Member 'FBGUReplicatedAcceleration::AccelXYRadians' has a wrong offset!");
//static_assert(offsetof(FBGUReplicatedAcceleration, AccelXYMagnitude) == 0x000001, "Member 'FBGUReplicatedAcceleration::AccelXYMagnitude' has a wrong offset!");
//static_assert(offsetof(FBGUReplicatedAcceleration, AccelZ) == 0x000002, "Member 'FBGUReplicatedAcceleration::AccelZ' has a wrong offset!");

// ScriptStruct b1.RootMotionSource_CopyAnim
// 0x0060 (0x0140 - 0x00E0)
struct FRootMotionSource_CopyAnim final : public FRootMotionSource
{
public:
	uint8                                         Pad_D8[0x8];                                       // 0x00D8(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	struct FTransform                             AnimRootMotionTransform;                           // 0x00E0(0x0060)(IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
};
//static_assert(alignof(FRootMotionSource_CopyAnim) == 0x000010, "Wrong alignment on FRootMotionSource_CopyAnim");
//static_assert(sizeof(FRootMotionSource_CopyAnim) == 0x000140, "Wrong size on FRootMotionSource_CopyAnim");
//static_assert(offsetof(FRootMotionSource_CopyAnim, AnimRootMotionTransform) == 0x0000E0, "Member 'FRootMotionSource_CopyAnim::AnimRootMotionTransform' has a wrong offset!");

// ScriptStruct b1.HitResultSimple
// 0x0048 (0x0048 - 0x0000)
struct FHitResultSimple final
{
public:
	EPhysicalSurface                              SurfaceType;                                       // 0x0000(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x7];                                        // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                HitLocation;                                       // 0x0008(0x0018)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                HitImpactNormal;                                   // 0x0020(0x0018)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class AActor*                                 HitActor;                                          // 0x0038(0x0008)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bIsBlockingHit;                                    // 0x0040(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_41[0x7];                                       // 0x0041(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
//static_assert(alignof(FHitResultSimple) == 0x000008, "Wrong alignment on FHitResultSimple");
//static_assert(sizeof(FHitResultSimple) == 0x000048, "Wrong size on FHitResultSimple");
//static_assert(offsetof(FHitResultSimple, SurfaceType) == 0x000000, "Member 'FHitResultSimple::SurfaceType' has a wrong offset!");
//static_assert(offsetof(FHitResultSimple, HitLocation) == 0x000008, "Member 'FHitResultSimple::HitLocation' has a wrong offset!");
//static_assert(offsetof(FHitResultSimple, HitImpactNormal) == 0x000020, "Member 'FHitResultSimple::HitImpactNormal' has a wrong offset!");
//static_assert(offsetof(FHitResultSimple, HitActor) == 0x000038, "Member 'FHitResultSimple::HitActor' has a wrong offset!");
//static_assert(offsetof(FHitResultSimple, bIsBlockingHit) == 0x000040, "Member 'FHitResultSimple::bIsBlockingHit' has a wrong offset!");

// ScriptStruct b1.TamerHighLODMeshConfig
// 0x0080 (0x0080 - 0x0000)
struct FTamerHighLODMeshConfig
{
public:
	class USkeletalMesh*                          Mesh;                                              // 0x0000(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UAnimationAsset*                        BstdAnim;                                          // 0x0008(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FTransform                             MeshTransform;                                     // 0x0010(0x0060)(Edit, BlueprintVisible, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	TArray<class UMaterialInterface*>             Materials;                                         // 0x0070(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
};
//static_assert(alignof(FTamerHighLODMeshConfig) == 0x000010, "Wrong alignment on FTamerHighLODMeshConfig");
//static_assert(sizeof(FTamerHighLODMeshConfig) == 0x000080, "Wrong size on FTamerHighLODMeshConfig");
//static_assert(offsetof(FTamerHighLODMeshConfig, Mesh) == 0x000000, "Member 'FTamerHighLODMeshConfig::Mesh' has a wrong offset!");
//static_assert(offsetof(FTamerHighLODMeshConfig, BstdAnim) == 0x000008, "Member 'FTamerHighLODMeshConfig::BstdAnim' has a wrong offset!");
//static_assert(offsetof(FTamerHighLODMeshConfig, MeshTransform) == 0x000010, "Member 'FTamerHighLODMeshConfig::MeshTransform' has a wrong offset!");
//static_assert(offsetof(FTamerHighLODMeshConfig, Materials) == 0x000070, "Member 'FTamerHighLODMeshConfig::Materials' has a wrong offset!");

// ScriptStruct b1.TamerHighLODRootMeshConfig
// 0x0050 (0x00D0 - 0x0080)
struct FTamerHighLODRootMeshConfig final : public FTamerHighLODMeshConfig
{
public:
	TMap<class FName, struct FTamerHighLODMeshConfig> SubMeshes;                                         // 0x0080(0x0050)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
};
//static_assert(alignof(FTamerHighLODRootMeshConfig) == 0x000010, "Wrong alignment on FTamerHighLODRootMeshConfig");
//static_assert(sizeof(FTamerHighLODRootMeshConfig) == 0x0000D0, "Wrong size on FTamerHighLODRootMeshConfig");
//static_assert(offsetof(FTamerHighLODRootMeshConfig, SubMeshes) == 0x000080, "Member 'FTamerHighLODRootMeshConfig::SubMeshes' has a wrong offset!");

// ScriptStruct b1.BWC_DispLibEnvSettings
// 0x01E0 (0x01E0 - 0x0000)
struct FBWC_DispLibEnvSettings final
{
public:
	uint8                                         bOverride_SunLightIntensity : 1;                   // 0x0000(0x0001)(BitIndex: 0x00, PropSize: 0x0001 (Edit, BlueprintVisible, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         bOverride_SunLightColor : 1;                       // 0x0000(0x0001)(BitIndex: 0x01, PropSize: 0x0001 (Edit, BlueprintVisible, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         bOverride_SunAngle : 1;                            // 0x0000(0x0001)(BitIndex: 0x02, PropSize: 0x0001 (Edit, BlueprintVisible, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         bOverride_SunInclination : 1;                      // 0x0000(0x0001)(BitIndex: 0x03, PropSize: 0x0001 (Edit, BlueprintVisible, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         bOverride_SunExtentDawnAndDusk : 1;                // 0x0000(0x0001)(BitIndex: 0x04, PropSize: 0x0001 (Edit, BlueprintVisible, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         bOverride_SunVolumetricScattering : 1;             // 0x0000(0x0001)(BitIndex: 0x05, PropSize: 0x0001 (Edit, BlueprintVisible, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         bOverride_SunColorCurve : 1;                       // 0x0000(0x0001)(BitIndex: 0x06, PropSize: 0x0001 (Edit, BlueprintVisible, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         bOverride_MoonLightIntensity : 1;                  // 0x0000(0x0001)(BitIndex: 0x07, PropSize: 0x0001 (Edit, BlueprintVisible, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         bOverride_MoonLightColor : 1;                      // 0x0001(0x0001)(BitIndex: 0x00, PropSize: 0x0001 (Edit, BlueprintVisible, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         bOverride_MoonInclination : 1;                     // 0x0001(0x0001)(BitIndex: 0x01, PropSize: 0x0001 (Edit, BlueprintVisible, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         bOverride_MoonOrbitOffset : 1;                     // 0x0001(0x0001)(BitIndex: 0x02, PropSize: 0x0001 (Edit, BlueprintVisible, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         bOverride_MoonAngle : 1;                           // 0x0001(0x0001)(BitIndex: 0x03, PropSize: 0x0001 (Edit, BlueprintVisible, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         bOverride_MoonVolumetricScattering : 1;            // 0x0001(0x0001)(BitIndex: 0x04, PropSize: 0x0001 (Edit, BlueprintVisible, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         bOverride_MoonColorCurve : 1;                      // 0x0001(0x0001)(BitIndex: 0x05, PropSize: 0x0001 (Edit, BlueprintVisible, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         bOverride_SkyLightIntensity : 1;                   // 0x0001(0x0001)(BitIndex: 0x06, PropSize: 0x0001 (Edit, BlueprintVisible, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         bOverride_SkyLightCubeArray : 1;                   // 0x0001(0x0001)(BitIndex: 0x07, PropSize: 0x0001 (Edit, BlueprintVisible, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         bOverride_SkyLightColor : 1;                       // 0x0002(0x0001)(BitIndex: 0x00, PropSize: 0x0001 (Edit, BlueprintVisible, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         bOverride_SkyLightVolumetricScattering : 1;        // 0x0002(0x0001)(BitIndex: 0x01, PropSize: 0x0001 (Edit, BlueprintVisible, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         bOverride_SkyLightCubeMap : 1;                     // 0x0002(0x0001)(BitIndex: 0x02, PropSize: 0x0001 (Edit, BlueprintVisible, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         bOverride_FogDensity : 1;                          // 0x0002(0x0001)(BitIndex: 0x03, PropSize: 0x0001 (Edit, BlueprintVisible, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         bOverride_FogDensityCurve : 1;                     // 0x0002(0x0001)(BitIndex: 0x04, PropSize: 0x0001 (Edit, BlueprintVisible, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         bOverride_FogHeightFalloff : 1;                    // 0x0002(0x0001)(BitIndex: 0x05, PropSize: 0x0001 (Edit, BlueprintVisible, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         bOverride_FogScatteringDistribution : 1;           // 0x0002(0x0001)(BitIndex: 0x06, PropSize: 0x0001 (Edit, BlueprintVisible, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         bOverride_FogExtinctionScale : 1;                  // 0x0002(0x0001)(BitIndex: 0x07, PropSize: 0x0001 (Edit, BlueprintVisible, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         bOverride_FogStartDistance : 1;                    // 0x0003(0x0001)(BitIndex: 0x00, PropSize: 0x0001 (Edit, BlueprintVisible, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         bOverride_FogViewDistance : 1;                     // 0x0003(0x0001)(BitIndex: 0x01, PropSize: 0x0001 (Edit, BlueprintVisible, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         bOverride_FogAlbedoCurve : 1;                      // 0x0003(0x0001)(BitIndex: 0x02, PropSize: 0x0001 (Edit, BlueprintVisible, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         bOverride_FogEmissiveCurve : 1;                    // 0x0003(0x0001)(BitIndex: 0x03, PropSize: 0x0001 (Edit, BlueprintVisible, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         bOverride_LocalFogWeatherTexMask : 1;              // 0x0003(0x0001)(BitIndex: 0x04, PropSize: 0x0001 (Edit, BlueprintVisible, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         bOverride_FogAlbedo : 1;                           // 0x0003(0x0001)(BitIndex: 0x05, PropSize: 0x0001 (Edit, BlueprintVisible, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         bOverride_FogEmissive : 1;                         // 0x0003(0x0001)(BitIndex: 0x06, PropSize: 0x0001 (Edit, BlueprintVisible, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         bOverride_FogScatteringColor : 1;                  // 0x0003(0x0001)(BitIndex: 0x07, PropSize: 0x0001 (Edit, BlueprintVisible, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         bOverride_LocalFogDensityMinMax : 1;               // 0x0004(0x0001)(BitIndex: 0x00, PropSize: 0x0001 (Edit, BlueprintVisible, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         bOverride_LocalFogAlbedo : 1;                      // 0x0004(0x0001)(BitIndex: 0x01, PropSize: 0x0001 (Edit, BlueprintVisible, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         bOverride_LocalFogEmissive : 1;                    // 0x0004(0x0001)(BitIndex: 0x02, PropSize: 0x0001 (Edit, BlueprintVisible, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         bOverride_LocalFogDensityTex : 1;                  // 0x0004(0x0001)(BitIndex: 0x03, PropSize: 0x0001 (Edit, BlueprintVisible, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         bOverride_LocalFogHeightFalloff : 1;               // 0x0004(0x0001)(BitIndex: 0x04, PropSize: 0x0001 (Edit, BlueprintVisible, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         bOverride_LocalFogWeatherTexTilingAndFlowDir : 1;  // 0x0004(0x0001)(BitIndex: 0x05, PropSize: 0x0001 (Edit, BlueprintVisible, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         bOverride_LocalFogDensityTilingScale : 1;          // 0x0004(0x0001)(BitIndex: 0x06, PropSize: 0x0001 (Edit, BlueprintVisible, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         bOverride_LocalFogStartDistance : 1;               // 0x0004(0x0001)(BitIndex: 0x07, PropSize: 0x0001 (Edit, BlueprintVisible, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         bOverride_WindStrengthScale : 1;                   // 0x0005(0x0001)(BitIndex: 0x00, PropSize: 0x0001 (Edit, BlueprintVisible, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         bOverride_WindStrengthCurve : 1;                   // 0x0005(0x0001)(BitIndex: 0x01, PropSize: 0x0001 (Edit, BlueprintVisible, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	EBGW_DispLibEnvWeather                        Weather;                                           // 0x0006(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_7[0x1];                                        // 0x0007(0x0001)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         WeatherProbability;                                // 0x0008(0x0004)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         SunLightIntensity;                                 // 0x000C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FLinearColor                           SunLightColor;                                     // 0x0010(0x0010)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         SunAngle;                                          // 0x0020(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         SunInclination;                                    // 0x0024(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         SunExtentDawnAndDusk;                              // 0x0028(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         SunVolumetricScattering;                           // 0x002C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FLinearColor                           SunColorCurveValue;                                // 0x0030(0x0010)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UCurveLinearColor*                      SunColorCurve;                                     // 0x0040(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         MoonLightIntensity;                                // 0x0048(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FLinearColor                           MoonLightColor;                                    // 0x004C(0x0010)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         MoonInclination;                                   // 0x005C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         MoonOrbitOffset;                                   // 0x0060(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         MoonAngle;                                         // 0x0064(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         MoonVolumetricScattering;                          // 0x0068(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FLinearColor                           MoonColorCurveValue;                               // 0x006C(0x0010)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_7C[0x4];                                       // 0x007C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UCurveLinearColor*                      MoonColorCurve;                                    // 0x0080(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         SkyLightIntensity;                                 // 0x0088(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FLinearColor                           SkyLightColor;                                     // 0x008C(0x0010)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         SkyLightVolumetricScattering;                      // 0x009C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UTextureCube*                           SkyLightCubeMap;                                   // 0x00A0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         SkyLightCubeArrayValue;                            // 0x00A8(0x0004)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         FogDensity;                                        // 0x00AC(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         FogDensityCurveValue;                              // 0x00B0(0x0004)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         FogHeightFalloff;                                  // 0x00B4(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         FogScatteringDistribution;                         // 0x00B8(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         FogExtinctionScale;                                // 0x00BC(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         FogStartDistance;                                  // 0x00C0(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         FogViewDistance;                                   // 0x00C4(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FLinearColor                           FogAlbedoCurveValue;                               // 0x00C8(0x0010)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FLinearColor                           FogEmissiveCurveValue;                             // 0x00D8(0x0010)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FLinearColor                           FogScatteringColor;                                // 0x00E8(0x0010)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FLinearColor                           FogAlbedo;                                         // 0x00F8(0x0010)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FLinearColor                           FogEmissive;                                       // 0x0108(0x0010)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UCurveFloat*                            FogDensityCurve;                                   // 0x0118(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UCurveLinearColor*                      FogAlbedoCurve;                                    // 0x0120(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UCurveLinearColor*                      FogEmissiveCurve;                                  // 0x0128(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         LocalFogWeatherTexMask;                            // 0x0130(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_134[0x4];                                      // 0x0134(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector2D                              LocalFogDensityMinMax;                             // 0x0138(0x0010)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         LocalFogHeightFalloff;                             // 0x0148(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FLinearColor                           LocalFogAlbedo;                                    // 0x014C(0x0010)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FLinearColor                           LocalFogEmissive;                                  // 0x015C(0x0010)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_16C[0x4];                                      // 0x016C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector4                               LocalFogWeatherTexTilingAndFlowDir;                // 0x0170(0x0020)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UVolumeTexture*                         LocalFogDensityTex;                                // 0x0190(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                LocalFogDensityTilingScale;                        // 0x0198(0x0018)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         LocalFogStartDistance;                             // 0x01B0(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         WindStrengthScale;                                 // 0x01B4(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         WindStrengthCurveValue;                            // 0x01B8(0x0004)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1BC[0x4];                                      // 0x01BC(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UCurveFloat*                            WindStrengthCurve;                                 // 0x01C0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UNiagaraSystem*                         WeatherFX;                                         // 0x01C8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class AActor*                                 WeatherFXActor;                                    // 0x01D0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1D8[0x8];                                      // 0x01D8(0x0008)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
//static_assert(alignof(FBWC_DispLibEnvSettings) == 0x000010, "Wrong alignment on FBWC_DispLibEnvSettings");
//static_assert(sizeof(FBWC_DispLibEnvSettings) == 0x0001E0, "Wrong size on FBWC_DispLibEnvSettings");
//static_assert(offsetof(FBWC_DispLibEnvSettings, Weather) == 0x000006, "Member 'FBWC_DispLibEnvSettings::Weather' has a wrong offset!");
//static_assert(offsetof(FBWC_DispLibEnvSettings, WeatherProbability) == 0x000008, "Member 'FBWC_DispLibEnvSettings::WeatherProbability' has a wrong offset!");
//static_assert(offsetof(FBWC_DispLibEnvSettings, SunLightIntensity) == 0x00000C, "Member 'FBWC_DispLibEnvSettings::SunLightIntensity' has a wrong offset!");
//static_assert(offsetof(FBWC_DispLibEnvSettings, SunLightColor) == 0x000010, "Member 'FBWC_DispLibEnvSettings::SunLightColor' has a wrong offset!");
//static_assert(offsetof(FBWC_DispLibEnvSettings, SunAngle) == 0x000020, "Member 'FBWC_DispLibEnvSettings::SunAngle' has a wrong offset!");
//static_assert(offsetof(FBWC_DispLibEnvSettings, SunInclination) == 0x000024, "Member 'FBWC_DispLibEnvSettings::SunInclination' has a wrong offset!");
//static_assert(offsetof(FBWC_DispLibEnvSettings, SunExtentDawnAndDusk) == 0x000028, "Member 'FBWC_DispLibEnvSettings::SunExtentDawnAndDusk' has a wrong offset!");
//static_assert(offsetof(FBWC_DispLibEnvSettings, SunVolumetricScattering) == 0x00002C, "Member 'FBWC_DispLibEnvSettings::SunVolumetricScattering' has a wrong offset!");
//static_assert(offsetof(FBWC_DispLibEnvSettings, SunColorCurveValue) == 0x000030, "Member 'FBWC_DispLibEnvSettings::SunColorCurveValue' has a wrong offset!");
//static_assert(offsetof(FBWC_DispLibEnvSettings, SunColorCurve) == 0x000040, "Member 'FBWC_DispLibEnvSettings::SunColorCurve' has a wrong offset!");
//static_assert(offsetof(FBWC_DispLibEnvSettings, MoonLightIntensity) == 0x000048, "Member 'FBWC_DispLibEnvSettings::MoonLightIntensity' has a wrong offset!");
//static_assert(offsetof(FBWC_DispLibEnvSettings, MoonLightColor) == 0x00004C, "Member 'FBWC_DispLibEnvSettings::MoonLightColor' has a wrong offset!");
//static_assert(offsetof(FBWC_DispLibEnvSettings, MoonInclination) == 0x00005C, "Member 'FBWC_DispLibEnvSettings::MoonInclination' has a wrong offset!");
//static_assert(offsetof(FBWC_DispLibEnvSettings, MoonOrbitOffset) == 0x000060, "Member 'FBWC_DispLibEnvSettings::MoonOrbitOffset' has a wrong offset!");
//static_assert(offsetof(FBWC_DispLibEnvSettings, MoonAngle) == 0x000064, "Member 'FBWC_DispLibEnvSettings::MoonAngle' has a wrong offset!");
//static_assert(offsetof(FBWC_DispLibEnvSettings, MoonVolumetricScattering) == 0x000068, "Member 'FBWC_DispLibEnvSettings::MoonVolumetricScattering' has a wrong offset!");
//static_assert(offsetof(FBWC_DispLibEnvSettings, MoonColorCurveValue) == 0x00006C, "Member 'FBWC_DispLibEnvSettings::MoonColorCurveValue' has a wrong offset!");
//static_assert(offsetof(FBWC_DispLibEnvSettings, MoonColorCurve) == 0x000080, "Member 'FBWC_DispLibEnvSettings::MoonColorCurve' has a wrong offset!");
//static_assert(offsetof(FBWC_DispLibEnvSettings, SkyLightIntensity) == 0x000088, "Member 'FBWC_DispLibEnvSettings::SkyLightIntensity' has a wrong offset!");
//static_assert(offsetof(FBWC_DispLibEnvSettings, SkyLightColor) == 0x00008C, "Member 'FBWC_DispLibEnvSettings::SkyLightColor' has a wrong offset!");
//static_assert(offsetof(FBWC_DispLibEnvSettings, SkyLightVolumetricScattering) == 0x00009C, "Member 'FBWC_DispLibEnvSettings::SkyLightVolumetricScattering' has a wrong offset!");
//static_assert(offsetof(FBWC_DispLibEnvSettings, SkyLightCubeMap) == 0x0000A0, "Member 'FBWC_DispLibEnvSettings::SkyLightCubeMap' has a wrong offset!");
//static_assert(offsetof(FBWC_DispLibEnvSettings, SkyLightCubeArrayValue) == 0x0000A8, "Member 'FBWC_DispLibEnvSettings::SkyLightCubeArrayValue' has a wrong offset!");
//static_assert(offsetof(FBWC_DispLibEnvSettings, FogDensity) == 0x0000AC, "Member 'FBWC_DispLibEnvSettings::FogDensity' has a wrong offset!");
//static_assert(offsetof(FBWC_DispLibEnvSettings, FogDensityCurveValue) == 0x0000B0, "Member 'FBWC_DispLibEnvSettings::FogDensityCurveValue' has a wrong offset!");
//static_assert(offsetof(FBWC_DispLibEnvSettings, FogHeightFalloff) == 0x0000B4, "Member 'FBWC_DispLibEnvSettings::FogHeightFalloff' has a wrong offset!");
//static_assert(offsetof(FBWC_DispLibEnvSettings, FogScatteringDistribution) == 0x0000B8, "Member 'FBWC_DispLibEnvSettings::FogScatteringDistribution' has a wrong offset!");
//static_assert(offsetof(FBWC_DispLibEnvSettings, FogExtinctionScale) == 0x0000BC, "Member 'FBWC_DispLibEnvSettings::FogExtinctionScale' has a wrong offset!");
//static_assert(offsetof(FBWC_DispLibEnvSettings, FogStartDistance) == 0x0000C0, "Member 'FBWC_DispLibEnvSettings::FogStartDistance' has a wrong offset!");
//static_assert(offsetof(FBWC_DispLibEnvSettings, FogViewDistance) == 0x0000C4, "Member 'FBWC_DispLibEnvSettings::FogViewDistance' has a wrong offset!");
//static_assert(offsetof(FBWC_DispLibEnvSettings, FogAlbedoCurveValue) == 0x0000C8, "Member 'FBWC_DispLibEnvSettings::FogAlbedoCurveValue' has a wrong offset!");
//static_assert(offsetof(FBWC_DispLibEnvSettings, FogEmissiveCurveValue) == 0x0000D8, "Member 'FBWC_DispLibEnvSettings::FogEmissiveCurveValue' has a wrong offset!");
//static_assert(offsetof(FBWC_DispLibEnvSettings, FogScatteringColor) == 0x0000E8, "Member 'FBWC_DispLibEnvSettings::FogScatteringColor' has a wrong offset!");
//static_assert(offsetof(FBWC_DispLibEnvSettings, FogAlbedo) == 0x0000F8, "Member 'FBWC_DispLibEnvSettings::FogAlbedo' has a wrong offset!");
//static_assert(offsetof(FBWC_DispLibEnvSettings, FogEmissive) == 0x000108, "Member 'FBWC_DispLibEnvSettings::FogEmissive' has a wrong offset!");
//static_assert(offsetof(FBWC_DispLibEnvSettings, FogDensityCurve) == 0x000118, "Member 'FBWC_DispLibEnvSettings::FogDensityCurve' has a wrong offset!");
//static_assert(offsetof(FBWC_DispLibEnvSettings, FogAlbedoCurve) == 0x000120, "Member 'FBWC_DispLibEnvSettings::FogAlbedoCurve' has a wrong offset!");
//static_assert(offsetof(FBWC_DispLibEnvSettings, FogEmissiveCurve) == 0x000128, "Member 'FBWC_DispLibEnvSettings::FogEmissiveCurve' has a wrong offset!");
//static_assert(offsetof(FBWC_DispLibEnvSettings, LocalFogWeatherTexMask) == 0x000130, "Member 'FBWC_DispLibEnvSettings::LocalFogWeatherTexMask' has a wrong offset!");
//static_assert(offsetof(FBWC_DispLibEnvSettings, LocalFogDensityMinMax) == 0x000138, "Member 'FBWC_DispLibEnvSettings::LocalFogDensityMinMax' has a wrong offset!");
//static_assert(offsetof(FBWC_DispLibEnvSettings, LocalFogHeightFalloff) == 0x000148, "Member 'FBWC_DispLibEnvSettings::LocalFogHeightFalloff' has a wrong offset!");
//static_assert(offsetof(FBWC_DispLibEnvSettings, LocalFogAlbedo) == 0x00014C, "Member 'FBWC_DispLibEnvSettings::LocalFogAlbedo' has a wrong offset!");
//static_assert(offsetof(FBWC_DispLibEnvSettings, LocalFogEmissive) == 0x00015C, "Member 'FBWC_DispLibEnvSettings::LocalFogEmissive' has a wrong offset!");
//static_assert(offsetof(FBWC_DispLibEnvSettings, LocalFogWeatherTexTilingAndFlowDir) == 0x000170, "Member 'FBWC_DispLibEnvSettings::LocalFogWeatherTexTilingAndFlowDir' has a wrong offset!");
//static_assert(offsetof(FBWC_DispLibEnvSettings, LocalFogDensityTex) == 0x000190, "Member 'FBWC_DispLibEnvSettings::LocalFogDensityTex' has a wrong offset!");
//static_assert(offsetof(FBWC_DispLibEnvSettings, LocalFogDensityTilingScale) == 0x000198, "Member 'FBWC_DispLibEnvSettings::LocalFogDensityTilingScale' has a wrong offset!");
//static_assert(offsetof(FBWC_DispLibEnvSettings, LocalFogStartDistance) == 0x0001B0, "Member 'FBWC_DispLibEnvSettings::LocalFogStartDistance' has a wrong offset!");
//static_assert(offsetof(FBWC_DispLibEnvSettings, WindStrengthScale) == 0x0001B4, "Member 'FBWC_DispLibEnvSettings::WindStrengthScale' has a wrong offset!");
//static_assert(offsetof(FBWC_DispLibEnvSettings, WindStrengthCurveValue) == 0x0001B8, "Member 'FBWC_DispLibEnvSettings::WindStrengthCurveValue' has a wrong offset!");
//static_assert(offsetof(FBWC_DispLibEnvSettings, WindStrengthCurve) == 0x0001C0, "Member 'FBWC_DispLibEnvSettings::WindStrengthCurve' has a wrong offset!");
//static_assert(offsetof(FBWC_DispLibEnvSettings, WeatherFX) == 0x0001C8, "Member 'FBWC_DispLibEnvSettings::WeatherFX' has a wrong offset!");
//static_assert(offsetof(FBWC_DispLibEnvSettings, WeatherFXActor) == 0x0001D0, "Member 'FBWC_DispLibEnvSettings::WeatherFXActor' has a wrong offset!");

// ScriptStruct b1.TraceTickWarningConfig
// 0x0068 (0x0068 - 0x0000)
struct FTraceTickWarningConfig final
{
public:
	TMap<class FString, double>                   TraceStatWarningInfo;                              // 0x0000(0x0050)(NativeAccessSpecifierPublic)
	double                                        EngineLoopAndSlate_TickTimeWarningLineMS;          // 0x0050(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	double                                        StatCacheRange;                                    // 0x0058(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ESortType                                     TickSortType;                                      // 0x0060(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_61[0x7];                                       // 0x0061(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
//static_assert(alignof(FTraceTickWarningConfig) == 0x000008, "Wrong alignment on FTraceTickWarningConfig");
//static_assert(sizeof(FTraceTickWarningConfig) == 0x000068, "Wrong size on FTraceTickWarningConfig");
//static_assert(offsetof(FTraceTickWarningConfig, TraceStatWarningInfo) == 0x000000, "Member 'FTraceTickWarningConfig::TraceStatWarningInfo' has a wrong offset!");
//static_assert(offsetof(FTraceTickWarningConfig, EngineLoopAndSlate_TickTimeWarningLineMS) == 0x000050, "Member 'FTraceTickWarningConfig::EngineLoopAndSlate_TickTimeWarningLineMS' has a wrong offset!");
//static_assert(offsetof(FTraceTickWarningConfig, StatCacheRange) == 0x000058, "Member 'FTraceTickWarningConfig::StatCacheRange' has a wrong offset!");
//static_assert(offsetof(FTraceTickWarningConfig, TickSortType) == 0x000060, "Member 'FTraceTickWarningConfig::TickSortType' has a wrong offset!");

// ScriptStruct b1.TraceSpawnAndSyncWarningConfig
// 0x0058 (0x0058 - 0x0000)
struct FTraceSpawnAndSyncWarningConfig final
{
public:
	ESortType                                     SpawnAndSyncSortType;                              // 0x0000(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x7];                                        // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TMap<class FString, double>                   TraceSpawnAndSyncWarningInfo;                      // 0x0008(0x0050)(NativeAccessSpecifierPublic)
};
//static_assert(alignof(FTraceSpawnAndSyncWarningConfig) == 0x000008, "Wrong alignment on FTraceSpawnAndSyncWarningConfig");
//static_assert(sizeof(FTraceSpawnAndSyncWarningConfig) == 0x000058, "Wrong size on FTraceSpawnAndSyncWarningConfig");
//static_assert(offsetof(FTraceSpawnAndSyncWarningConfig, SpawnAndSyncSortType) == 0x000000, "Member 'FTraceSpawnAndSyncWarningConfig::SpawnAndSyncSortType' has a wrong offset!");
//static_assert(offsetof(FTraceSpawnAndSyncWarningConfig, TraceSpawnAndSyncWarningInfo) == 0x000008, "Member 'FTraceSpawnAndSyncWarningConfig::TraceSpawnAndSyncWarningInfo' has a wrong offset!");

// ScriptStruct b1.GlobalTraceConfig
// 0x00C8 (0x00C8 - 0x0000)
struct FGlobalTraceConfig final
{
public:
	bool                                          EnableTraceing;                                    // 0x0000(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          DefaultStopTick;                                   // 0x0001(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2[0x6];                                        // 0x0002(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	struct FTraceTickWarningConfig                TickWarningConfig;                                 // 0x0008(0x0068)(NativeAccessSpecifierPublic)
	struct FTraceSpawnAndSyncWarningConfig        SpawnAndSyncWarningConfig;                         // 0x0070(0x0058)(NativeAccessSpecifierPublic)
};
//static_assert(alignof(FGlobalTraceConfig) == 0x000008, "Wrong alignment on FGlobalTraceConfig");
//static_assert(sizeof(FGlobalTraceConfig) == 0x0000C8, "Wrong size on FGlobalTraceConfig");
//static_assert(offsetof(FGlobalTraceConfig, EnableTraceing) == 0x000000, "Member 'FGlobalTraceConfig::EnableTraceing' has a wrong offset!");
//static_assert(offsetof(FGlobalTraceConfig, DefaultStopTick) == 0x000001, "Member 'FGlobalTraceConfig::DefaultStopTick' has a wrong offset!");
//static_assert(offsetof(FGlobalTraceConfig, TickWarningConfig) == 0x000008, "Member 'FGlobalTraceConfig::TickWarningConfig' has a wrong offset!");
//static_assert(offsetof(FGlobalTraceConfig, SpawnAndSyncWarningConfig) == 0x000070, "Member 'FGlobalTraceConfig::SpawnAndSyncWarningConfig' has a wrong offset!");

// ScriptStruct b1.TickOutPutInfo
// 0x0020 (0x0020 - 0x0000)
struct FTickOutPutInfo final
{
public:
	class FString                                 StatName;                                          // 0x0000(0x0010)(ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	double                                        AverageTickTime;                                   // 0x0010(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	double                                        MaxTickTime;                                       // 0x0018(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
//static_assert(alignof(FTickOutPutInfo) == 0x000008, "Wrong alignment on FTickOutPutInfo");
//static_assert(sizeof(FTickOutPutInfo) == 0x000020, "Wrong size on FTickOutPutInfo");
//static_assert(offsetof(FTickOutPutInfo, StatName) == 0x000000, "Member 'FTickOutPutInfo::StatName' has a wrong offset!");
//static_assert(offsetof(FTickOutPutInfo, AverageTickTime) == 0x000010, "Member 'FTickOutPutInfo::AverageTickTime' has a wrong offset!");
//static_assert(offsetof(FTickOutPutInfo, MaxTickTime) == 0x000018, "Member 'FTickOutPutInfo::MaxTickTime' has a wrong offset!");

// ScriptStruct b1.TickOutPutData
// 0x0020 (0x0020 - 0x0000)
struct FTickOutPutData final
{
public:
	double                                        FrameAverageTickTime;                              // 0x0000(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	double                                        FrameMaxTickTime;                                  // 0x0008(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<struct FTickOutPutInfo>                Datas;                                             // 0x0010(0x0010)(ZeroConstructor, NativeAccessSpecifierPublic)
};
//static_assert(alignof(FTickOutPutData) == 0x000008, "Wrong alignment on FTickOutPutData");
//static_assert(sizeof(FTickOutPutData) == 0x000020, "Wrong size on FTickOutPutData");
//static_assert(offsetof(FTickOutPutData, FrameAverageTickTime) == 0x000000, "Member 'FTickOutPutData::FrameAverageTickTime' has a wrong offset!");
//static_assert(offsetof(FTickOutPutData, FrameMaxTickTime) == 0x000008, "Member 'FTickOutPutData::FrameMaxTickTime' has a wrong offset!");
//static_assert(offsetof(FTickOutPutData, Datas) == 0x000010, "Member 'FTickOutPutData::Datas' has a wrong offset!");

// ScriptStruct b1.SpawnAndSyncOutPutInfo
// 0x0018 (0x0018 - 0x0000)
struct FSpawnAndSyncOutPutInfo final
{
public:
	class FString                                 StatName;                                          // 0x0000(0x0010)(ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	double                                        ElapsedTime;                                       // 0x0010(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
//static_assert(alignof(FSpawnAndSyncOutPutInfo) == 0x000008, "Wrong alignment on FSpawnAndSyncOutPutInfo");
//static_assert(sizeof(FSpawnAndSyncOutPutInfo) == 0x000018, "Wrong size on FSpawnAndSyncOutPutInfo");
//static_assert(offsetof(FSpawnAndSyncOutPutInfo, StatName) == 0x000000, "Member 'FSpawnAndSyncOutPutInfo::StatName' has a wrong offset!");
//static_assert(offsetof(FSpawnAndSyncOutPutInfo, ElapsedTime) == 0x000010, "Member 'FSpawnAndSyncOutPutInfo::ElapsedTime' has a wrong offset!");

// ScriptStruct b1.BGWOnlineAchievementTag
// 0x0018 (0x0018 - 0x0000)
struct FBGWOnlineAchievementTag final
{
public:
	class FString                                 ID;                                                // 0x0000(0x0010)(BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	double                                        Progress;                                          // 0x0010(0x0008)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
//static_assert(alignof(FBGWOnlineAchievementTag) == 0x000008, "Wrong alignment on FBGWOnlineAchievementTag");
//static_assert(sizeof(FBGWOnlineAchievementTag) == 0x000018, "Wrong size on FBGWOnlineAchievementTag");
//static_assert(offsetof(FBGWOnlineAchievementTag, ID) == 0x000000, "Member 'FBGWOnlineAchievementTag::ID' has a wrong offset!");
//static_assert(offsetof(FBGWOnlineAchievementTag, Progress) == 0x000010, "Member 'FBGWOnlineAchievementTag::Progress' has a wrong offset!");

// ScriptStruct b1.BGWOnlineAchievementDesc
// 0x0058 (0x0058 - 0x0000)
struct FBGWOnlineAchievementDesc final
{
public:
	class FText                                   Title;                                             // 0x0000(0x0018)(BlueprintVisible, NativeAccessSpecifierPublic)
	class FText                                   LockedDesc;                                        // 0x0018(0x0018)(BlueprintVisible, NativeAccessSpecifierPublic)
	class FText                                   UnlockedDesc;                                      // 0x0030(0x0018)(BlueprintVisible, NativeAccessSpecifierPublic)
	bool                                          bIsHidden;                                         // 0x0048(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_49[0x7];                                       // 0x0049(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FDateTime                              UnlockTime;                                        // 0x0050(0x0008)(BlueprintVisible, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
//static_assert(alignof(FBGWOnlineAchievementDesc) == 0x000008, "Wrong alignment on FBGWOnlineAchievementDesc");
//static_assert(sizeof(FBGWOnlineAchievementDesc) == 0x000058, "Wrong size on FBGWOnlineAchievementDesc");
//static_assert(offsetof(FBGWOnlineAchievementDesc, Title) == 0x000000, "Member 'FBGWOnlineAchievementDesc::Title' has a wrong offset!");
//static_assert(offsetof(FBGWOnlineAchievementDesc, LockedDesc) == 0x000018, "Member 'FBGWOnlineAchievementDesc::LockedDesc' has a wrong offset!");
//static_assert(offsetof(FBGWOnlineAchievementDesc, UnlockedDesc) == 0x000030, "Member 'FBGWOnlineAchievementDesc::UnlockedDesc' has a wrong offset!");
//static_assert(offsetof(FBGWOnlineAchievementDesc, bIsHidden) == 0x000048, "Member 'FBGWOnlineAchievementDesc::bIsHidden' has a wrong offset!");
//static_assert(offsetof(FBGWOnlineAchievementDesc, UnlockTime) == 0x000050, "Member 'FBGWOnlineAchievementDesc::UnlockTime' has a wrong offset!");

// ScriptStruct b1.BGWOnlineFriendInfo
// 0x0038 (0x0038 - 0x0000)
struct FBGWOnlineFriendInfo final
{
public:
	class FString                                 SessionId;                                         // 0x0000(0x0010)(BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 DisplayName;                                       // 0x0010(0x0010)(BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 RealName;                                          // 0x0020(0x0010)(BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bIsOnline;                                         // 0x0030(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bIsPlaying;                                        // 0x0031(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bIsPlayingThisGame;                                // 0x0032(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bIsJoinable;                                       // 0x0033(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bHasVoiceSupport;                                  // 0x0034(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EFriendsStateType                             Status;                                            // 0x0035(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_36[0x2];                                       // 0x0036(0x0002)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
//static_assert(alignof(FBGWOnlineFriendInfo) == 0x000008, "Wrong alignment on FBGWOnlineFriendInfo");
//static_assert(sizeof(FBGWOnlineFriendInfo) == 0x000038, "Wrong size on FBGWOnlineFriendInfo");
//static_assert(offsetof(FBGWOnlineFriendInfo, SessionId) == 0x000000, "Member 'FBGWOnlineFriendInfo::SessionId' has a wrong offset!");
//static_assert(offsetof(FBGWOnlineFriendInfo, DisplayName) == 0x000010, "Member 'FBGWOnlineFriendInfo::DisplayName' has a wrong offset!");
//static_assert(offsetof(FBGWOnlineFriendInfo, RealName) == 0x000020, "Member 'FBGWOnlineFriendInfo::RealName' has a wrong offset!");
//static_assert(offsetof(FBGWOnlineFriendInfo, bIsOnline) == 0x000030, "Member 'FBGWOnlineFriendInfo::bIsOnline' has a wrong offset!");
//static_assert(offsetof(FBGWOnlineFriendInfo, bIsPlaying) == 0x000031, "Member 'FBGWOnlineFriendInfo::bIsPlaying' has a wrong offset!");
//static_assert(offsetof(FBGWOnlineFriendInfo, bIsPlayingThisGame) == 0x000032, "Member 'FBGWOnlineFriendInfo::bIsPlayingThisGame' has a wrong offset!");
//static_assert(offsetof(FBGWOnlineFriendInfo, bIsJoinable) == 0x000033, "Member 'FBGWOnlineFriendInfo::bIsJoinable' has a wrong offset!");
//static_assert(offsetof(FBGWOnlineFriendInfo, bHasVoiceSupport) == 0x000034, "Member 'FBGWOnlineFriendInfo::bHasVoiceSupport' has a wrong offset!");
//static_assert(offsetof(FBGWOnlineFriendInfo, Status) == 0x000035, "Member 'FBGWOnlineFriendInfo::Status' has a wrong offset!");

// ScriptStruct b1.BGWSessionSearchResult
// 0x0140 (0x0140 - 0x0000)
struct FBGWSessionSearchResult final
{
public:
	uint8                                         Pad_0[0x108];                                      // 0x0000(0x0108)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 OwningUserId;                                      // 0x0108(0x0010)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 SessionId;                                         // 0x0118(0x0010)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 OwningUserName;                                    // 0x0128(0x0010)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         MaxPlayerCount;                                    // 0x0138(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         AvaiablePlayercount;                               // 0x013C(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
//static_assert(alignof(FBGWSessionSearchResult) == 0x000008, "Wrong alignment on FBGWSessionSearchResult");
//static_assert(sizeof(FBGWSessionSearchResult) == 0x000140, "Wrong size on FBGWSessionSearchResult");
//static_assert(offsetof(FBGWSessionSearchResult, OwningUserId) == 0x000108, "Member 'FBGWSessionSearchResult::OwningUserId' has a wrong offset!");
//static_assert(offsetof(FBGWSessionSearchResult, SessionId) == 0x000118, "Member 'FBGWSessionSearchResult::SessionId' has a wrong offset!");
//static_assert(offsetof(FBGWSessionSearchResult, OwningUserName) == 0x000128, "Member 'FBGWSessionSearchResult::OwningUserName' has a wrong offset!");
//static_assert(offsetof(FBGWSessionSearchResult, MaxPlayerCount) == 0x000138, "Member 'FBGWSessionSearchResult::MaxPlayerCount' has a wrong offset!");
//static_assert(offsetof(FBGWSessionSearchResult, AvaiablePlayercount) == 0x00013C, "Member 'FBGWSessionSearchResult::AvaiablePlayercount' has a wrong offset!");

// ScriptStruct b1.BGWOnlineSessionContext
// 0x0010 (0x0010 - 0x0000)
struct FBGWOnlineSessionContext final
{
public:
	TArray<struct FBGWSessionSearchResult>        SearchResults;                                     // 0x0000(0x0010)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NativeAccessSpecifierPublic)
};
//static_assert(alignof(FBGWOnlineSessionContext) == 0x000008, "Wrong alignment on FBGWOnlineSessionContext");
//static_assert(sizeof(FBGWOnlineSessionContext) == 0x000010, "Wrong size on FBGWOnlineSessionContext");
//static_assert(offsetof(FBGWOnlineSessionContext, SearchResults) == 0x000000, "Member 'FBGWOnlineSessionContext::SearchResults' has a wrong offset!");

// ScriptStruct b1.BlueprintSearchResult
// 0x0160 (0x0160 - 0x0000)
struct FBlueprintSearchResult final
{
public:
	uint8                                         Pad_0[0x108];                                      // 0x0000(0x0108)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 ServerName;                                        // 0x0108(0x0010)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bIsInProgress;                                     // 0x0118(0x0001)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_119[0x7];                                      // 0x0119(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 MapName;                                           // 0x0120(0x0010)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         PingInMs;                                          // 0x0130(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         CurrentPlayers;                                    // 0x0134(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         MaxPlayers;                                        // 0x0138(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_13C[0x4];                                      // 0x013C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 HostPlayerName;                                    // 0x0140(0x0010)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 MessageDigest;                                     // 0x0150(0x0010)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
//static_assert(alignof(FBlueprintSearchResult) == 0x000008, "Wrong alignment on FBlueprintSearchResult");
//static_assert(sizeof(FBlueprintSearchResult) == 0x000160, "Wrong size on FBlueprintSearchResult");
//static_assert(offsetof(FBlueprintSearchResult, ServerName) == 0x000108, "Member 'FBlueprintSearchResult::ServerName' has a wrong offset!");
//static_assert(offsetof(FBlueprintSearchResult, bIsInProgress) == 0x000118, "Member 'FBlueprintSearchResult::bIsInProgress' has a wrong offset!");
//static_assert(offsetof(FBlueprintSearchResult, MapName) == 0x000120, "Member 'FBlueprintSearchResult::MapName' has a wrong offset!");
//static_assert(offsetof(FBlueprintSearchResult, PingInMs) == 0x000130, "Member 'FBlueprintSearchResult::PingInMs' has a wrong offset!");
//static_assert(offsetof(FBlueprintSearchResult, CurrentPlayers) == 0x000134, "Member 'FBlueprintSearchResult::CurrentPlayers' has a wrong offset!");
//static_assert(offsetof(FBlueprintSearchResult, MaxPlayers) == 0x000138, "Member 'FBlueprintSearchResult::MaxPlayers' has a wrong offset!");
//static_assert(offsetof(FBlueprintSearchResult, HostPlayerName) == 0x000140, "Member 'FBlueprintSearchResult::HostPlayerName' has a wrong offset!");
//static_assert(offsetof(FBlueprintSearchResult, MessageDigest) == 0x000150, "Member 'FBlueprintSearchResult::MessageDigest' has a wrong offset!");

// ScriptStruct b1.DesiredStatTableRow
// 0x0018 (0x0020 - 0x0008)
struct FDesiredStatTableRow final : public FTableRowBase
{
public:
	class FString                                 Label;                                             // 0x0008(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Threshold;                                         // 0x0018(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1C[0x4];                                       // 0x001C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
//static_assert(alignof(FDesiredStatTableRow) == 0x000008, "Wrong alignment on FDesiredStatTableRow");
//static_assert(sizeof(FDesiredStatTableRow) == 0x000020, "Wrong size on FDesiredStatTableRow");
//static_assert(offsetof(FDesiredStatTableRow, Label) == 0x000008, "Member 'FDesiredStatTableRow::Label' has a wrong offset!");
//static_assert(offsetof(FDesiredStatTableRow, Threshold) == 0x000018, "Member 'FDesiredStatTableRow::Threshold' has a wrong offset!");

// ScriptStruct b1.RHIResourceSummaryInfo
// 0x0008 (0x0008 - 0x0000)
struct FRHIResourceSummaryInfo final
{
public:
	float                                         VRAMAllocation;                                    // 0x0000(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Percentage;                                        // 0x0004(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
//static_assert(alignof(FRHIResourceSummaryInfo) == 0x000004, "Wrong alignment on FRHIResourceSummaryInfo");
//static_assert(sizeof(FRHIResourceSummaryInfo) == 0x000008, "Wrong size on FRHIResourceSummaryInfo");
//static_assert(offsetof(FRHIResourceSummaryInfo, VRAMAllocation) == 0x000000, "Member 'FRHIResourceSummaryInfo::VRAMAllocation' has a wrong offset!");
//static_assert(offsetof(FRHIResourceSummaryInfo, Percentage) == 0x000004, "Member 'FRHIResourceSummaryInfo::Percentage' has a wrong offset!");

// ScriptStruct b1.RHIMemInfo
// 0x0058 (0x0058 - 0x0000)
struct FRHIMemInfo final
{
public:
	float                                         TotalVRAM;                                         // 0x0000(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_4[0x4];                                        // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TMap<class FString, struct FRHIResourceSummaryInfo> SummaryInfo;                                       // 0x0008(0x0050)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
};
//static_assert(alignof(FRHIMemInfo) == 0x000008, "Wrong alignment on FRHIMemInfo");
//static_assert(sizeof(FRHIMemInfo) == 0x000058, "Wrong size on FRHIMemInfo");
//static_assert(offsetof(FRHIMemInfo, TotalVRAM) == 0x000000, "Member 'FRHIMemInfo::TotalVRAM' has a wrong offset!");
//static_assert(offsetof(FRHIMemInfo, SummaryInfo) == 0x000008, "Member 'FRHIMemInfo::SummaryInfo' has a wrong offset!");

// ScriptStruct b1.GSLevelLatentAction
// 0x0028 (0x0028 - 0x0000)
struct alignas(0x08) FGSLevelLatentAction final
{
public:
	uint8                                         Pad_0[0x28];                                       // 0x0000(0x0028)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
//static_assert(alignof(FGSLevelLatentAction) == 0x000008, "Wrong alignment on FGSLevelLatentAction");
//static_assert(sizeof(FGSLevelLatentAction) == 0x000028, "Wrong size on FGSLevelLatentAction");

// ScriptStruct b1.SetLevelsStateTask
// 0x0030 (0x0030 - 0x0000)
struct alignas(0x08) FSetLevelsStateTask final
{
public:
	uint8                                         Pad_0[0x30];                                       // 0x0000(0x0030)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
//static_assert(alignof(FSetLevelsStateTask) == 0x000008, "Wrong alignment on FSetLevelsStateTask");
//static_assert(sizeof(FSetLevelsStateTask) == 0x000030, "Wrong size on FSetLevelsStateTask");

// ScriptStruct b1.BGWLevelStreamingVolumeArr
// 0x0010 (0x0010 - 0x0000)
struct FBGWLevelStreamingVolumeArr final
{
public:
	TArray<class ABGWLevelStreamingVolume*>       VolumeArr;                                         // 0x0000(0x0010)(ZeroConstructor, Transient, NativeAccessSpecifierPublic)
};
//static_assert(alignof(FBGWLevelStreamingVolumeArr) == 0x000008, "Wrong alignment on FBGWLevelStreamingVolumeArr");
//static_assert(sizeof(FBGWLevelStreamingVolumeArr) == 0x000010, "Wrong size on FBGWLevelStreamingVolumeArr");
//static_assert(offsetof(FBGWLevelStreamingVolumeArr, VolumeArr) == 0x000000, "Member 'FBGWLevelStreamingVolumeArr::VolumeArr' has a wrong offset!");

// ScriptStruct b1.BGWVisibleLevelStreamingSettings
// 0x0003 (0x0003 - 0x0000)
struct FBGWVisibleLevelStreamingSettings final
{
public:
	uint8                                         Pad_0[0x3];                                        // 0x0000(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
//static_assert(alignof(FBGWVisibleLevelStreamingSettings) == 0x000001, "Wrong alignment on FBGWVisibleLevelStreamingSettings");
//static_assert(sizeof(FBGWVisibleLevelStreamingSettings) == 0x000003, "Wrong size on FBGWVisibleLevelStreamingSettings");

// ScriptStruct b1.GSCameraSequenceData
// 0x0018 (0x0018 - 0x0000)
struct FGSCameraSequenceData final
{
public:
	class ULevelSequence*                         CameraSequence;                                    // 0x0000(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TSubclassOf<class ACameraRig_Rail>            CameraRailClass;                                   // 0x0008(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bShouldUseCinematicCamera;                         // 0x0010(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_11[0x7];                                       // 0x0011(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
//static_assert(alignof(FGSCameraSequenceData) == 0x000008, "Wrong alignment on FGSCameraSequenceData");
//static_assert(sizeof(FGSCameraSequenceData) == 0x000018, "Wrong size on FGSCameraSequenceData");
//static_assert(offsetof(FGSCameraSequenceData, CameraSequence) == 0x000000, "Member 'FGSCameraSequenceData::CameraSequence' has a wrong offset!");
//static_assert(offsetof(FGSCameraSequenceData, CameraRailClass) == 0x000008, "Member 'FGSCameraSequenceData::CameraRailClass' has a wrong offset!");
//static_assert(offsetof(FGSCameraSequenceData, bShouldUseCinematicCamera) == 0x000010, "Member 'FGSCameraSequenceData::bShouldUseCinematicCamera' has a wrong offset!");

// ScriptStruct b1.GSCameraSequencePlaySetting
// 0x0030 (0x0030 - 0x0000)
struct FGSCameraSequencePlaySetting final
{
public:
	TArray<struct FGSCameraSequenceData>          CameraSequenceList;                                // 0x0000(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
	ERefRotatorType                               RefRotatorType;                                    // 0x0010(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ECameraBlendType                              InCameraBlendType;                                 // 0x0011(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_12[0x2];                                       // 0x0012(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         InCameraBlendSpeed;                                // 0x0014(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          InCameraBlendTimeUseNotifyStateLength;             // 0x0018(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EViewTargetBlendFunction                      InCameraBlendFuncType;                             // 0x0019(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1A[0x2];                                       // 0x001A(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         InCameraBlendFuncExp;                              // 0x001C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         OutCameraBlendTime;                                // 0x0020(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EViewTargetBlendFunction                      OutCameraBlendFuncType;                            // 0x0024(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_25[0x3];                                       // 0x0025(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         OutCameraBlendFuncExp;                             // 0x0028(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2C[0x4];                                       // 0x002C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
//static_assert(alignof(FGSCameraSequencePlaySetting) == 0x000008, "Wrong alignment on FGSCameraSequencePlaySetting");
//static_assert(sizeof(FGSCameraSequencePlaySetting) == 0x000030, "Wrong size on FGSCameraSequencePlaySetting");
//static_assert(offsetof(FGSCameraSequencePlaySetting, CameraSequenceList) == 0x000000, "Member 'FGSCameraSequencePlaySetting::CameraSequenceList' has a wrong offset!");
//static_assert(offsetof(FGSCameraSequencePlaySetting, RefRotatorType) == 0x000010, "Member 'FGSCameraSequencePlaySetting::RefRotatorType' has a wrong offset!");
//static_assert(offsetof(FGSCameraSequencePlaySetting, InCameraBlendType) == 0x000011, "Member 'FGSCameraSequencePlaySetting::InCameraBlendType' has a wrong offset!");
//static_assert(offsetof(FGSCameraSequencePlaySetting, InCameraBlendSpeed) == 0x000014, "Member 'FGSCameraSequencePlaySetting::InCameraBlendSpeed' has a wrong offset!");
//static_assert(offsetof(FGSCameraSequencePlaySetting, InCameraBlendTimeUseNotifyStateLength) == 0x000018, "Member 'FGSCameraSequencePlaySetting::InCameraBlendTimeUseNotifyStateLength' has a wrong offset!");
//static_assert(offsetof(FGSCameraSequencePlaySetting, InCameraBlendFuncType) == 0x000019, "Member 'FGSCameraSequencePlaySetting::InCameraBlendFuncType' has a wrong offset!");
//static_assert(offsetof(FGSCameraSequencePlaySetting, InCameraBlendFuncExp) == 0x00001C, "Member 'FGSCameraSequencePlaySetting::InCameraBlendFuncExp' has a wrong offset!");
//static_assert(offsetof(FGSCameraSequencePlaySetting, OutCameraBlendTime) == 0x000020, "Member 'FGSCameraSequencePlaySetting::OutCameraBlendTime' has a wrong offset!");
//static_assert(offsetof(FGSCameraSequencePlaySetting, OutCameraBlendFuncType) == 0x000024, "Member 'FGSCameraSequencePlaySetting::OutCameraBlendFuncType' has a wrong offset!");
//static_assert(offsetof(FGSCameraSequencePlaySetting, OutCameraBlendFuncExp) == 0x000028, "Member 'FGSCameraSequencePlaySetting::OutCameraBlendFuncExp' has a wrong offset!");

// ScriptStruct b1.UStGSOverlapResult
// 0x0014 (0x0014 - 0x0000)
struct FUStGSOverlapResult final
{
public:
	TWeakObjectPtr<class AActor>                  Actor;                                             // 0x0000(0x0008)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TWeakObjectPtr<class UPrimitiveComponent>     Component;                                         // 0x0008(0x0008)(BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         bBlockingHit : 1;                                  // 0x0010(0x0001)(BitIndex: 0x00, PropSize: 0x0001 (BlueprintVisible, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         Pad_11[0x3];                                       // 0x0011(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
//static_assert(alignof(FUStGSOverlapResult) == 0x000004, "Wrong alignment on FUStGSOverlapResult");
//static_assert(sizeof(FUStGSOverlapResult) == 0x000014, "Wrong size on FUStGSOverlapResult");
//static_assert(offsetof(FUStGSOverlapResult, Actor) == 0x000000, "Member 'FUStGSOverlapResult::Actor' has a wrong offset!");
//static_assert(offsetof(FUStGSOverlapResult, Component) == 0x000008, "Member 'FUStGSOverlapResult::Component' has a wrong offset!");

// ScriptStruct b1.CustomJumpData
// 0x0010 (0x0010 - 0x0000)
struct FCustomJumpData final
{
public:
	float                                         CustomJumpVelocityIncrement_Pressed;               // 0x0000(0x0004)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         LastCustomJumpVelocityIncrement_Pressed;           // 0x0004(0x0004)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Delta_VelocityZIncrement_CustomJump;               // 0x0008(0x0004)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         LastVelocityZIncrement_CustomJump;                 // 0x000C(0x0004)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
//static_assert(alignof(FCustomJumpData) == 0x000004, "Wrong alignment on FCustomJumpData");
//static_assert(sizeof(FCustomJumpData) == 0x000010, "Wrong size on FCustomJumpData");
//static_assert(offsetof(FCustomJumpData, CustomJumpVelocityIncrement_Pressed) == 0x000000, "Member 'FCustomJumpData::CustomJumpVelocityIncrement_Pressed' has a wrong offset!");
//static_assert(offsetof(FCustomJumpData, LastCustomJumpVelocityIncrement_Pressed) == 0x000004, "Member 'FCustomJumpData::LastCustomJumpVelocityIncrement_Pressed' has a wrong offset!");
//static_assert(offsetof(FCustomJumpData, Delta_VelocityZIncrement_CustomJump) == 0x000008, "Member 'FCustomJumpData::Delta_VelocityZIncrement_CustomJump' has a wrong offset!");
//static_assert(offsetof(FCustomJumpData, LastVelocityZIncrement_CustomJump) == 0x00000C, "Member 'FCustomJumpData::LastVelocityZIncrement_CustomJump' has a wrong offset!");

// ScriptStruct b1.GSSweepCheckShapeInfo
// 0x0028 (0x0028 - 0x0000)
struct FGSSweepCheckShapeInfo final
{
public:
	EGSSweepCheckShapeType                        SweepCheckShapeType;                               // 0x0000(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x7];                                        // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                ShapeParamVector;                                  // 0x0008(0x0018)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         ShapeParamFloat;                                   // 0x0020(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_24[0x4];                                       // 0x0024(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
//static_assert(alignof(FGSSweepCheckShapeInfo) == 0x000008, "Wrong alignment on FGSSweepCheckShapeInfo");
//static_assert(sizeof(FGSSweepCheckShapeInfo) == 0x000028, "Wrong size on FGSSweepCheckShapeInfo");
//static_assert(offsetof(FGSSweepCheckShapeInfo, SweepCheckShapeType) == 0x000000, "Member 'FGSSweepCheckShapeInfo::SweepCheckShapeType' has a wrong offset!");
//static_assert(offsetof(FGSSweepCheckShapeInfo, ShapeParamVector) == 0x000008, "Member 'FGSSweepCheckShapeInfo::ShapeParamVector' has a wrong offset!");
//static_assert(offsetof(FGSSweepCheckShapeInfo, ShapeParamFloat) == 0x000020, "Member 'FGSSweepCheckShapeInfo::ShapeParamFloat' has a wrong offset!");

// ScriptStruct b1.GSFloatCurveToParam
// 0x0028 (0x0028 - 0x0000)
struct FGSFloatCurveToParam final
{
public:
	class UCurveFloat*                            CurveFloat;                                        // 0x0000(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          NotUseCurve;                                       // 0x0008(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x3];                                        // 0x0009(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         OriFloatValue;                                     // 0x000C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         TargetFloatValue;                                  // 0x0010(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   ParamName;                                         // 0x0014(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EMaterialParameterAssociation                 Association;                                       // 0x001C(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1D[0x3];                                       // 0x001D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class UMaterialFunctionInterface*             LayerFunction;                                     // 0x0020(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
//static_assert(alignof(FGSFloatCurveToParam) == 0x000008, "Wrong alignment on FGSFloatCurveToParam");
//static_assert(sizeof(FGSFloatCurveToParam) == 0x000028, "Wrong size on FGSFloatCurveToParam");
//static_assert(offsetof(FGSFloatCurveToParam, CurveFloat) == 0x000000, "Member 'FGSFloatCurveToParam::CurveFloat' has a wrong offset!");
//static_assert(offsetof(FGSFloatCurveToParam, NotUseCurve) == 0x000008, "Member 'FGSFloatCurveToParam::NotUseCurve' has a wrong offset!");
//static_assert(offsetof(FGSFloatCurveToParam, OriFloatValue) == 0x00000C, "Member 'FGSFloatCurveToParam::OriFloatValue' has a wrong offset!");
//static_assert(offsetof(FGSFloatCurveToParam, TargetFloatValue) == 0x000010, "Member 'FGSFloatCurveToParam::TargetFloatValue' has a wrong offset!");
//static_assert(offsetof(FGSFloatCurveToParam, ParamName) == 0x000014, "Member 'FGSFloatCurveToParam::ParamName' has a wrong offset!");
//static_assert(offsetof(FGSFloatCurveToParam, Association) == 0x00001C, "Member 'FGSFloatCurveToParam::Association' has a wrong offset!");
//static_assert(offsetof(FGSFloatCurveToParam, LayerFunction) == 0x000020, "Member 'FGSFloatCurveToParam::LayerFunction' has a wrong offset!");

// ScriptStruct b1.GSLinearColorCurveToParam
// 0x0040 (0x0040 - 0x0000)
struct FGSLinearColorCurveToParam final
{
public:
	class UCurveLinearColor*                      CurveLinearColor;                                  // 0x0000(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          NotUseCurve;                                       // 0x0008(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x3];                                        // 0x0009(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FLinearColor                           OriLinearColorValue;                               // 0x000C(0x0010)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FLinearColor                           TargetLinearColorValue;                            // 0x001C(0x0010)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   ParamName;                                         // 0x002C(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EMaterialParameterAssociation                 Association;                                       // 0x0034(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_35[0x3];                                       // 0x0035(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class UMaterialFunctionInterface*             LayerFunction;                                     // 0x0038(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
//static_assert(alignof(FGSLinearColorCurveToParam) == 0x000008, "Wrong alignment on FGSLinearColorCurveToParam");
//static_assert(sizeof(FGSLinearColorCurveToParam) == 0x000040, "Wrong size on FGSLinearColorCurveToParam");
//static_assert(offsetof(FGSLinearColorCurveToParam, CurveLinearColor) == 0x000000, "Member 'FGSLinearColorCurveToParam::CurveLinearColor' has a wrong offset!");
//static_assert(offsetof(FGSLinearColorCurveToParam, NotUseCurve) == 0x000008, "Member 'FGSLinearColorCurveToParam::NotUseCurve' has a wrong offset!");
//static_assert(offsetof(FGSLinearColorCurveToParam, OriLinearColorValue) == 0x00000C, "Member 'FGSLinearColorCurveToParam::OriLinearColorValue' has a wrong offset!");
//static_assert(offsetof(FGSLinearColorCurveToParam, TargetLinearColorValue) == 0x00001C, "Member 'FGSLinearColorCurveToParam::TargetLinearColorValue' has a wrong offset!");
//static_assert(offsetof(FGSLinearColorCurveToParam, ParamName) == 0x00002C, "Member 'FGSLinearColorCurveToParam::ParamName' has a wrong offset!");
//static_assert(offsetof(FGSLinearColorCurveToParam, Association) == 0x000034, "Member 'FGSLinearColorCurveToParam::Association' has a wrong offset!");
//static_assert(offsetof(FGSLinearColorCurveToParam, LayerFunction) == 0x000038, "Member 'FGSLinearColorCurveToParam::LayerFunction' has a wrong offset!");

// ScriptStruct b1.GSStreamingLevelLoadSetting
// 0x0003 (0x0003 - 0x0000)
struct FGSStreamingLevelLoadSetting final
{
public:
	bool                                          bShouldBeLoaded;                                   // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bShouldBeVisible;                                  // 0x0001(0x0001)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bShouldBlockOnLoad;                                // 0x0002(0x0001)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
//static_assert(alignof(FGSStreamingLevelLoadSetting) == 0x000001, "Wrong alignment on FGSStreamingLevelLoadSetting");
//static_assert(sizeof(FGSStreamingLevelLoadSetting) == 0x000003, "Wrong size on FGSStreamingLevelLoadSetting");
//static_assert(offsetof(FGSStreamingLevelLoadSetting, bShouldBeLoaded) == 0x000000, "Member 'FGSStreamingLevelLoadSetting::bShouldBeLoaded' has a wrong offset!");
//static_assert(offsetof(FGSStreamingLevelLoadSetting, bShouldBeVisible) == 0x000001, "Member 'FGSStreamingLevelLoadSetting::bShouldBeVisible' has a wrong offset!");
//static_assert(offsetof(FGSStreamingLevelLoadSetting, bShouldBlockOnLoad) == 0x000002, "Member 'FGSStreamingLevelLoadSetting::bShouldBlockOnLoad' has a wrong offset!");

// ScriptStruct b1.GSEnvNamedValue
// 0x0010 (0x0010 - 0x0000)
struct FGSEnvNamedValue final
{
public:
	class FName                                   ParamName;                                         // 0x0000(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EAIParamType                                  ParamType;                                         // 0x0008(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x3];                                        // 0x0009(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         Value;                                             // 0x000C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
//static_assert(alignof(FGSEnvNamedValue) == 0x000004, "Wrong alignment on FGSEnvNamedValue");
//static_assert(sizeof(FGSEnvNamedValue) == 0x000010, "Wrong size on FGSEnvNamedValue");
//static_assert(offsetof(FGSEnvNamedValue, ParamName) == 0x000000, "Member 'FGSEnvNamedValue::ParamName' has a wrong offset!");
//static_assert(offsetof(FGSEnvNamedValue, ParamType) == 0x000008, "Member 'FGSEnvNamedValue::ParamType' has a wrong offset!");
//static_assert(offsetof(FGSEnvNamedValue, Value) == 0x00000C, "Member 'FGSEnvNamedValue::Value' has a wrong offset!");

// ScriptStruct b1.GSMontageCostInfoData
// 0x0018 (0x0018 - 0x0000)
struct FGSMontageCostInfoData final
{
public:
	class UAnimMontage*                           StartMontage;                                      // 0x0000(0x0008)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UAnimMontage*                           NextMontage;                                       // 0x0008(0x0008)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         CostValue;                                         // 0x0010(0x0004)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_14[0x4];                                       // 0x0014(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
//static_assert(alignof(FGSMontageCostInfoData) == 0x000008, "Wrong alignment on FGSMontageCostInfoData");
//static_assert(sizeof(FGSMontageCostInfoData) == 0x000018, "Wrong size on FGSMontageCostInfoData");
//static_assert(offsetof(FGSMontageCostInfoData, StartMontage) == 0x000000, "Member 'FGSMontageCostInfoData::StartMontage' has a wrong offset!");
//static_assert(offsetof(FGSMontageCostInfoData, NextMontage) == 0x000008, "Member 'FGSMontageCostInfoData::NextMontage' has a wrong offset!");
//static_assert(offsetof(FGSMontageCostInfoData, CostValue) == 0x000010, "Member 'FGSMontageCostInfoData::CostValue' has a wrong offset!");

// ScriptStruct b1.GSSetLevelStateFailedInfo
// 0x0018 (0x0018 - 0x0000)
struct FGSSetLevelStateFailedInfo final
{
public:
	class FString                                 LevelName;                                         // 0x0000(0x0010)(BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EGSLevelSetResult                             Result;                                            // 0x0010(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_11[0x7];                                       // 0x0011(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
//static_assert(alignof(FGSSetLevelStateFailedInfo) == 0x000008, "Wrong alignment on FGSSetLevelStateFailedInfo");
//static_assert(sizeof(FGSSetLevelStateFailedInfo) == 0x000018, "Wrong size on FGSSetLevelStateFailedInfo");
//static_assert(offsetof(FGSSetLevelStateFailedInfo, LevelName) == 0x000000, "Member 'FGSSetLevelStateFailedInfo::LevelName' has a wrong offset!");
//static_assert(offsetof(FGSSetLevelStateFailedInfo, Result) == 0x000010, "Member 'FGSSetLevelStateFailedInfo::Result' has a wrong offset!");

// ScriptStruct b1.GSFloatValueTableRow
// 0x0008 (0x0010 - 0x0008)
struct FGSFloatValueTableRow final : public FTableRowBase
{
public:
	float                                         Value;                                             // 0x0008(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
//static_assert(alignof(FGSFloatValueTableRow) == 0x000008, "Wrong alignment on FGSFloatValueTableRow");
//static_assert(sizeof(FGSFloatValueTableRow) == 0x000010, "Wrong size on FGSFloatValueTableRow");
//static_assert(offsetof(FGSFloatValueTableRow, Value) == 0x000008, "Member 'FGSFloatValueTableRow::Value' has a wrong offset!");

// ScriptStruct b1.BUAnimSettingsLocomotionEx
// 0x0040 (0x0040 - 0x0000)
struct FBUAnimSettingsLocomotionEx final
{
public:
	bool                                          bUpperBodyOnly;                                    // 0x0000(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bUseExAnim;                                        // 0x0001(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2[0x6];                                        // 0x0002(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	class UAnimSequence*                          AnimSeqIdle;                                       // 0x0008(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UAnimSequence*                          AnimSeqEnter;                                      // 0x0010(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UAnimSequence*                          AnimSeqExit;                                       // 0x0018(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UAnimSequence*                          AnimSeqMoveFwd;                                    // 0x0020(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UAnimSequence*                          AnimSeqMoveBwd;                                    // 0x0028(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UAnimSequence*                          AnimSeqMoveLeft;                                   // 0x0030(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UAnimSequence*                          AnimSeqMoveRight;                                  // 0x0038(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
//static_assert(alignof(FBUAnimSettingsLocomotionEx) == 0x000008, "Wrong alignment on FBUAnimSettingsLocomotionEx");
//static_assert(sizeof(FBUAnimSettingsLocomotionEx) == 0x000040, "Wrong size on FBUAnimSettingsLocomotionEx");
//static_assert(offsetof(FBUAnimSettingsLocomotionEx, bUpperBodyOnly) == 0x000000, "Member 'FBUAnimSettingsLocomotionEx::bUpperBodyOnly' has a wrong offset!");
//static_assert(offsetof(FBUAnimSettingsLocomotionEx, bUseExAnim) == 0x000001, "Member 'FBUAnimSettingsLocomotionEx::bUseExAnim' has a wrong offset!");
//static_assert(offsetof(FBUAnimSettingsLocomotionEx, AnimSeqIdle) == 0x000008, "Member 'FBUAnimSettingsLocomotionEx::AnimSeqIdle' has a wrong offset!");
//static_assert(offsetof(FBUAnimSettingsLocomotionEx, AnimSeqEnter) == 0x000010, "Member 'FBUAnimSettingsLocomotionEx::AnimSeqEnter' has a wrong offset!");
//static_assert(offsetof(FBUAnimSettingsLocomotionEx, AnimSeqExit) == 0x000018, "Member 'FBUAnimSettingsLocomotionEx::AnimSeqExit' has a wrong offset!");
//static_assert(offsetof(FBUAnimSettingsLocomotionEx, AnimSeqMoveFwd) == 0x000020, "Member 'FBUAnimSettingsLocomotionEx::AnimSeqMoveFwd' has a wrong offset!");
//static_assert(offsetof(FBUAnimSettingsLocomotionEx, AnimSeqMoveBwd) == 0x000028, "Member 'FBUAnimSettingsLocomotionEx::AnimSeqMoveBwd' has a wrong offset!");
//static_assert(offsetof(FBUAnimSettingsLocomotionEx, AnimSeqMoveLeft) == 0x000030, "Member 'FBUAnimSettingsLocomotionEx::AnimSeqMoveLeft' has a wrong offset!");
//static_assert(offsetof(FBUAnimSettingsLocomotionEx, AnimSeqMoveRight) == 0x000038, "Member 'FBUAnimSettingsLocomotionEx::AnimSeqMoveRight' has a wrong offset!");

// ScriptStruct b1.BGU_AIMoverRequest
// 0x0030 (0x0030 - 0x0000)
struct FBGU_AIMoverRequest final
{
public:
	bool                                          AllowPartialPath;                                  // 0x0000(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          CanStrafe;                                         // 0x0001(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReachTestIncludesAgentRadius;                      // 0x0002(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReachTestIncludesGoalRadius;                       // 0x0003(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ProjectGoalLocation;                               // 0x0004(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          UsePathfinding;                                    // 0x0005(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_6[0x2];                                        // 0x0006(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         AcceptanceRadius;                                  // 0x0008(0x0004)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class AActor*                                 TargetActor;                                       // 0x0010(0x0008)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                TargetLocation;                                    // 0x0018(0x0018)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
//static_assert(alignof(FBGU_AIMoverRequest) == 0x000008, "Wrong alignment on FBGU_AIMoverRequest");
//static_assert(sizeof(FBGU_AIMoverRequest) == 0x000030, "Wrong size on FBGU_AIMoverRequest");
//static_assert(offsetof(FBGU_AIMoverRequest, AllowPartialPath) == 0x000000, "Member 'FBGU_AIMoverRequest::AllowPartialPath' has a wrong offset!");
//static_assert(offsetof(FBGU_AIMoverRequest, CanStrafe) == 0x000001, "Member 'FBGU_AIMoverRequest::CanStrafe' has a wrong offset!");
//static_assert(offsetof(FBGU_AIMoverRequest, ReachTestIncludesAgentRadius) == 0x000002, "Member 'FBGU_AIMoverRequest::ReachTestIncludesAgentRadius' has a wrong offset!");
//static_assert(offsetof(FBGU_AIMoverRequest, ReachTestIncludesGoalRadius) == 0x000003, "Member 'FBGU_AIMoverRequest::ReachTestIncludesGoalRadius' has a wrong offset!");
//static_assert(offsetof(FBGU_AIMoverRequest, ProjectGoalLocation) == 0x000004, "Member 'FBGU_AIMoverRequest::ProjectGoalLocation' has a wrong offset!");
//static_assert(offsetof(FBGU_AIMoverRequest, UsePathfinding) == 0x000005, "Member 'FBGU_AIMoverRequest::UsePathfinding' has a wrong offset!");
//static_assert(offsetof(FBGU_AIMoverRequest, AcceptanceRadius) == 0x000008, "Member 'FBGU_AIMoverRequest::AcceptanceRadius' has a wrong offset!");
//static_assert(offsetof(FBGU_AIMoverRequest, TargetActor) == 0x000010, "Member 'FBGU_AIMoverRequest::TargetActor' has a wrong offset!");
//static_assert(offsetof(FBGU_AIMoverRequest, TargetLocation) == 0x000018, "Member 'FBGU_AIMoverRequest::TargetLocation' has a wrong offset!");

// ScriptStruct b1.ECSNetSerialization
// 0x0010 (0x0010 - 0x0000)
struct alignas(0x08) FECSNetSerialization final
{
public:
	uint8                                         Pad_0[0x10];                                       // 0x0000(0x0010)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
//static_assert(alignof(FECSNetSerialization) == 0x000008, "Wrong alignment on FECSNetSerialization");
//static_assert(sizeof(FECSNetSerialization) == 0x000010, "Wrong size on FECSNetSerialization");

// ScriptStruct b1.ItemGenerationInfo
// 0x0001 (0x0001 - 0x0000)
struct FItemGenerationInfo final
{
public:
	uint8                                         Pad_0[0x1];                                        // 0x0000(0x0001)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
//static_assert(alignof(FItemGenerationInfo) == 0x000001, "Wrong alignment on FItemGenerationInfo");
//static_assert(sizeof(FItemGenerationInfo) == 0x000001, "Wrong size on FItemGenerationInfo");

// ScriptStruct b1.GSEnvQueryTestItem
// 0x0040 (0x0040 - 0x0000)
struct FGSEnvQueryTestItem final
{
public:
	struct FVector                                ItemLocation;                                      // 0x0000(0x0018)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<class AActor*>                         ContextActors;                                     // 0x0018(0x0010)(BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<struct FVector>                        ContextLocations;                                  // 0x0028(0x0010)(BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
	bool                                          bContextPerItem;                                   // 0x0038(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_39[0x7];                                       // 0x0039(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
//static_assert(alignof(FGSEnvQueryTestItem) == 0x000008, "Wrong alignment on FGSEnvQueryTestItem");
//static_assert(sizeof(FGSEnvQueryTestItem) == 0x000040, "Wrong size on FGSEnvQueryTestItem");
//static_assert(offsetof(FGSEnvQueryTestItem, ItemLocation) == 0x000000, "Member 'FGSEnvQueryTestItem::ItemLocation' has a wrong offset!");
//static_assert(offsetof(FGSEnvQueryTestItem, ContextActors) == 0x000018, "Member 'FGSEnvQueryTestItem::ContextActors' has a wrong offset!");
//static_assert(offsetof(FGSEnvQueryTestItem, ContextLocations) == 0x000028, "Member 'FGSEnvQueryTestItem::ContextLocations' has a wrong offset!");
//static_assert(offsetof(FGSEnvQueryTestItem, bContextPerItem) == 0x000038, "Member 'FGSEnvQueryTestItem::bContextPerItem' has a wrong offset!");

// ScriptStruct b1.ProjectionData
// 0x000C (0x000C - 0x0000)
struct FProjectionData final
{
public:
	float                                         ExtentX;                                           // 0x0000(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         ProjectDown;                                       // 0x0004(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         ProjectUp;                                         // 0x0008(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
//static_assert(alignof(FProjectionData) == 0x000004, "Wrong alignment on FProjectionData");
//static_assert(sizeof(FProjectionData) == 0x00000C, "Wrong size on FProjectionData");
//static_assert(offsetof(FProjectionData, ExtentX) == 0x000000, "Member 'FProjectionData::ExtentX' has a wrong offset!");
//static_assert(offsetof(FProjectionData, ProjectDown) == 0x000004, "Member 'FProjectionData::ProjectDown' has a wrong offset!");
//static_assert(offsetof(FProjectionData, ProjectUp) == 0x000008, "Member 'FProjectionData::ProjectUp' has a wrong offset!");

// ScriptStruct b1.UnorderedObjDict
// 0x0078 (0x0078 - 0x0000)
struct FUnorderedObjDict final
{
public:
	int32                                         MItrIdx;                                           // 0x0000(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	int32                                         MSize;                                             // 0x0004(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	TMap<int32, int32>                            MKey2Idx;                                          // 0x0008(0x0050)(NativeAccessSpecifierPrivate)
	TArray<int32>                                 MIdx2Key;                                          // 0x0058(0x0010)(ZeroConstructor, NativeAccessSpecifierPrivate)
	TArray<class UObject*>                        MLoopArr;                                          // 0x0068(0x0010)(ZeroConstructor, NativeAccessSpecifierPrivate)
};
//static_assert(alignof(FUnorderedObjDict) == 0x000008, "Wrong alignment on FUnorderedObjDict");
//static_assert(sizeof(FUnorderedObjDict) == 0x000078, "Wrong size on FUnorderedObjDict");
//static_assert(offsetof(FUnorderedObjDict, MItrIdx) == 0x000000, "Member 'FUnorderedObjDict::MItrIdx' has a wrong offset!");
//static_assert(offsetof(FUnorderedObjDict, MSize) == 0x000004, "Member 'FUnorderedObjDict::MSize' has a wrong offset!");
//static_assert(offsetof(FUnorderedObjDict, MKey2Idx) == 0x000008, "Member 'FUnorderedObjDict::MKey2Idx' has a wrong offset!");
//static_assert(offsetof(FUnorderedObjDict, MIdx2Key) == 0x000058, "Member 'FUnorderedObjDict::MIdx2Key' has a wrong offset!");
//static_assert(offsetof(FUnorderedObjDict, MLoopArr) == 0x000068, "Member 'FUnorderedObjDict::MLoopArr' has a wrong offset!");

// ScriptStruct b1.CppTestStructInnerInner
// 0x000C (0x000C - 0x0000)
struct FCppTestStructInnerInner final
{
public:
	float                                         FloatVal;                                          // 0x0000(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FGameplayTag                           GameTag;                                           // 0x0004(0x0008)(Edit, BlueprintVisible, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
//static_assert(alignof(FCppTestStructInnerInner) == 0x000004, "Wrong alignment on FCppTestStructInnerInner");
//static_assert(sizeof(FCppTestStructInnerInner) == 0x00000C, "Wrong size on FCppTestStructInnerInner");
//static_assert(offsetof(FCppTestStructInnerInner, FloatVal) == 0x000000, "Member 'FCppTestStructInnerInner::FloatVal' has a wrong offset!");
//static_assert(offsetof(FCppTestStructInnerInner, GameTag) == 0x000004, "Member 'FCppTestStructInnerInner::GameTag' has a wrong offset!");

// ScriptStruct b1.CppTestStructInner
// 0x0020 (0x0020 - 0x0000)
struct FCppTestStructInner final
{
public:
	TArray<class FName>                           ItemInts;                                          // 0x0000(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<struct FCppTestStructInnerInner>       InnerStruct;                                       // 0x0010(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
};
//static_assert(alignof(FCppTestStructInner) == 0x000008, "Wrong alignment on FCppTestStructInner");
//static_assert(sizeof(FCppTestStructInner) == 0x000020, "Wrong size on FCppTestStructInner");
//static_assert(offsetof(FCppTestStructInner, ItemInts) == 0x000000, "Member 'FCppTestStructInner::ItemInts' has a wrong offset!");
//static_assert(offsetof(FCppTestStructInner, InnerStruct) == 0x000010, "Member 'FCppTestStructInner::InnerStruct' has a wrong offset!");

// ScriptStruct b1.CppTestStructOuter
// 0x0018 (0x0018 - 0x0000)
struct FCppTestStructOuter final
{
public:
	int32                                         TestInt;                                           // 0x0000(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_4[0x4];                                        // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<struct FCppTestStructInner>            ItemStructs;                                       // 0x0008(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
};
//static_assert(alignof(FCppTestStructOuter) == 0x000008, "Wrong alignment on FCppTestStructOuter");
//static_assert(sizeof(FCppTestStructOuter) == 0x000018, "Wrong size on FCppTestStructOuter");
//static_assert(offsetof(FCppTestStructOuter, TestInt) == 0x000000, "Member 'FCppTestStructOuter::TestInt' has a wrong offset!");
//static_assert(offsetof(FCppTestStructOuter, ItemStructs) == 0x000008, "Member 'FCppTestStructOuter::ItemStructs' has a wrong offset!");

// ScriptStruct b1.USharpTestStructAsClass
// 0x0018 (0x0018 - 0x0000)
struct alignas(0x08) FUSharpTestStructAsClass final
{
public:
	class FName                                   Haha;                                              // 0x0000(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_8[0x10];                                       // 0x0008(0x0010)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
//static_assert(alignof(FUSharpTestStructAsClass) == 0x000008, "Wrong alignment on FUSharpTestStructAsClass");
//static_assert(sizeof(FUSharpTestStructAsClass) == 0x000018, "Wrong size on FUSharpTestStructAsClass");
//static_assert(offsetof(FUSharpTestStructAsClass, Haha) == 0x000000, "Member 'FUSharpTestStructAsClass::Haha' has a wrong offset!");

}

