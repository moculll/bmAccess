#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: SubstanceCore

#include "Basic.hpp"

#include "CoreUObject_structs.hpp"
#include "CoreUObject_classes.hpp"
#include "Engine_structs.hpp"
#include "Engine_classes.hpp"
#include "SubstanceCore_structs.hpp"


namespace SDK
{

// Class SubstanceCore.SubstanceGraphInstance
// 0x00F0 (0x0118 - 0x0028)
class USubstanceGraphInstance final : public UObject
{
public:
	uint8                                         Pad_28[0x10];                                      // 0x0028(0x0010)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 PackageURL;                                        // 0x0038(0x0010)(ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class USubstanceInstanceFactory*              ParentFactory;                                     // 0x0048(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TMap<uint32, class USubstanceImageInput*>     ImageSources;                                      // 0x0050(0x0050)(NativeAccessSpecifierPublic)
	class UMaterial*                              CreatedMaterial;                                   // 0x00A0(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TMap<int32, struct FGuid>                     OutputTextureLinkData;                             // 0x00A8(0x0050)(NativeAccessSpecifierPublic)
	bool                                          bIsFrozen;                                         // 0x00F8(0x0001)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_F9[0x1F];                                      // 0x00F9(0x001F)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	struct FSubstanceFloatInputDesc GetFloatInputDesc(const class FString& Identifier);
	bool GetInputBool(const class FString& Identifier);
	struct FLinearColor GetInputColor(const class FString& Identifier);
	TArray<float> GetInputFloat(const class FString& Identifier);
	TArray<int32> GetInputInt(const class FString& Identifier);
	TArray<class FString> GetInputNames();
	class FString GetInputString(const class FString& Identifier);
	ESubstanceInputType GetInputType(const class FString& InputName);
	struct FSubstanceInstanceDesc GetInstanceDesc();
	struct FSubstanceIntInputDesc GetIntInputDesc(const class FString& Identifier);
	void SetInputBool(const class FString& Identifier, bool Bool);
	void SetInputColor(const class FString& Identifier, const struct FLinearColor& Color);
	void SetInputFloat(const class FString& Identifier, const TArray<float>& InputValues);
	bool SetInputImg(const class FString& InputName, class UObject* Value);
	void SetInputInt(const class FString& Identifier, const TArray<int32>& InputValues);
	void SetInputString(const class FString& Identifier, const class FString& Value);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"SubstanceGraphInstance">();
	}
	static class USubstanceGraphInstance* GetDefaultObj()
	{
		return GetDefaultObjImpl<USubstanceGraphInstance>();
	}
};
//static_assert(alignof(USubstanceGraphInstance) == 0x000008, "Wrong alignment on USubstanceGraphInstance");
//static_assert(sizeof(USubstanceGraphInstance) == 0x000118, "Wrong size on USubstanceGraphInstance");
//static_assert(offsetof(USubstanceGraphInstance, PackageURL) == 0x000038, "Member 'USubstanceGraphInstance::PackageURL' has a wrong offset!");
//static_assert(offsetof(USubstanceGraphInstance, ParentFactory) == 0x000048, "Member 'USubstanceGraphInstance::ParentFactory' has a wrong offset!");
//static_assert(offsetof(USubstanceGraphInstance, ImageSources) == 0x000050, "Member 'USubstanceGraphInstance::ImageSources' has a wrong offset!");
//static_assert(offsetof(USubstanceGraphInstance, CreatedMaterial) == 0x0000A0, "Member 'USubstanceGraphInstance::CreatedMaterial' has a wrong offset!");
//static_assert(offsetof(USubstanceGraphInstance, OutputTextureLinkData) == 0x0000A8, "Member 'USubstanceGraphInstance::OutputTextureLinkData' has a wrong offset!");
//static_assert(offsetof(USubstanceGraphInstance, bIsFrozen) == 0x0000F8, "Member 'USubstanceGraphInstance::bIsFrozen' has a wrong offset!");

// Class SubstanceCore.SubstanceImageInput
// 0x0090 (0x00B8 - 0x0028)
class USubstanceImageInput final : public UObject
{
public:
	uint8                                         Pad_28[0x48];                                      // 0x0028(0x0048)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         CompressionLevelRGB;                               // 0x0070(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         CompressionLevelAlpha;                             // 0x0074(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         SizeX;                                             // 0x0078(0x0004)(Edit, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         SizeY;                                             // 0x007C(0x0004)(Edit, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         NumComponents;                                     // 0x0080(0x0004)(Edit, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_84[0x4];                                       // 0x0084(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 SourceFilePath;                                    // 0x0088(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 SourceFileTimestamp;                               // 0x0098(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<class USubstanceGraphInstance*>        Consumers;                                         // 0x00A8(0x0010)(ZeroConstructor, Transient, NativeAccessSpecifierPublic)

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"SubstanceImageInput">();
	}
	static class USubstanceImageInput* GetDefaultObj()
	{
		return GetDefaultObjImpl<USubstanceImageInput>();
	}
};
//static_assert(alignof(USubstanceImageInput) == 0x000008, "Wrong alignment on USubstanceImageInput");
//static_assert(sizeof(USubstanceImageInput) == 0x0000B8, "Wrong size on USubstanceImageInput");
//static_assert(offsetof(USubstanceImageInput, CompressionLevelRGB) == 0x000070, "Member 'USubstanceImageInput::CompressionLevelRGB' has a wrong offset!");
//static_assert(offsetof(USubstanceImageInput, CompressionLevelAlpha) == 0x000074, "Member 'USubstanceImageInput::CompressionLevelAlpha' has a wrong offset!");
//static_assert(offsetof(USubstanceImageInput, SizeX) == 0x000078, "Member 'USubstanceImageInput::SizeX' has a wrong offset!");
//static_assert(offsetof(USubstanceImageInput, SizeY) == 0x00007C, "Member 'USubstanceImageInput::SizeY' has a wrong offset!");
//static_assert(offsetof(USubstanceImageInput, NumComponents) == 0x000080, "Member 'USubstanceImageInput::NumComponents' has a wrong offset!");
//static_assert(offsetof(USubstanceImageInput, SourceFilePath) == 0x000088, "Member 'USubstanceImageInput::SourceFilePath' has a wrong offset!");
//static_assert(offsetof(USubstanceImageInput, SourceFileTimestamp) == 0x000098, "Member 'USubstanceImageInput::SourceFileTimestamp' has a wrong offset!");
//static_assert(offsetof(USubstanceImageInput, Consumers) == 0x0000A8, "Member 'USubstanceImageInput::Consumers' has a wrong offset!");

// Class SubstanceCore.SubstanceInstanceFactory
// 0x0060 (0x0088 - 0x0028)
class USubstanceInstanceFactory final : public UObject
{
public:
	TArray<class USubstanceGraphInstance*>        MGraphInstances;                                   // 0x0028(0x0010)(ZeroConstructor, DuplicateTransient, NativeAccessSpecifierPrivate)
	uint8                                         Pad_38[0x18];                                      // 0x0038(0x0018)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 RelativeSourceFilePath;                            // 0x0050(0x0010)(ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 AbsoluteSourceFilePath;                            // 0x0060(0x0010)(ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 SourceFileTimestamp;                               // 0x0070(0x0010)(ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ESubstanceGenerationMode                      GenerationMode;                                    // 0x0080(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_81[0x7];                                       // 0x0081(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"SubstanceInstanceFactory">();
	}
	static class USubstanceInstanceFactory* GetDefaultObj()
	{
		return GetDefaultObjImpl<USubstanceInstanceFactory>();
	}
};
//static_assert(alignof(USubstanceInstanceFactory) == 0x000008, "Wrong alignment on USubstanceInstanceFactory");
//static_assert(sizeof(USubstanceInstanceFactory) == 0x000088, "Wrong size on USubstanceInstanceFactory");
//static_assert(offsetof(USubstanceInstanceFactory, MGraphInstances) == 0x000028, "Member 'USubstanceInstanceFactory::MGraphInstances' has a wrong offset!");
//static_assert(offsetof(USubstanceInstanceFactory, RelativeSourceFilePath) == 0x000050, "Member 'USubstanceInstanceFactory::RelativeSourceFilePath' has a wrong offset!");
//static_assert(offsetof(USubstanceInstanceFactory, AbsoluteSourceFilePath) == 0x000060, "Member 'USubstanceInstanceFactory::AbsoluteSourceFilePath' has a wrong offset!");
//static_assert(offsetof(USubstanceInstanceFactory, SourceFileTimestamp) == 0x000070, "Member 'USubstanceInstanceFactory::SourceFileTimestamp' has a wrong offset!");
//static_assert(offsetof(USubstanceInstanceFactory, GenerationMode) == 0x000080, "Member 'USubstanceInstanceFactory::GenerationMode' has a wrong offset!");

// Class SubstanceCore.SubstanceSettings
// 0x0018 (0x0040 - 0x0028)
class USubstanceSettings final : public UObject
{
public:
	int32                                         MemoryBudgetMb;                                    // 0x0028(0x0004)(Edit, ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         CPUCores;                                          // 0x002C(0x0004)(Edit, ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         AsyncLoadMipClip;                                  // 0x0030(0x0004)(Edit, ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         MaxAsyncSubstancesRenderedPerFrame;                // 0x0034(0x0004)(Edit, ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ESubstanceGenerationMode                      DefaultGenerationMode;                             // 0x0038(0x0001)(Edit, ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ESubstanceEngineType                          SubstanceEngine;                                   // 0x0039(0x0001)(Edit, ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EDefaultSubstanceTextureSize                  DefaultSubstanceOutputSizeX;                       // 0x003A(0x0001)(Edit, ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EDefaultSubstanceTextureSize                  DefaultSubstanceOutputSizeY;                       // 0x003B(0x0001)(Edit, ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_3C[0x4];                                       // 0x003C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"SubstanceSettings">();
	}
	static class USubstanceSettings* GetDefaultObj()
	{
		return GetDefaultObjImpl<USubstanceSettings>();
	}
};
//static_assert(alignof(USubstanceSettings) == 0x000008, "Wrong alignment on USubstanceSettings");
//static_assert(sizeof(USubstanceSettings) == 0x000040, "Wrong size on USubstanceSettings");
//static_assert(offsetof(USubstanceSettings, MemoryBudgetMb) == 0x000028, "Member 'USubstanceSettings::MemoryBudgetMb' has a wrong offset!");
//static_assert(offsetof(USubstanceSettings, CPUCores) == 0x00002C, "Member 'USubstanceSettings::CPUCores' has a wrong offset!");
//static_assert(offsetof(USubstanceSettings, AsyncLoadMipClip) == 0x000030, "Member 'USubstanceSettings::AsyncLoadMipClip' has a wrong offset!");
//static_assert(offsetof(USubstanceSettings, MaxAsyncSubstancesRenderedPerFrame) == 0x000034, "Member 'USubstanceSettings::MaxAsyncSubstancesRenderedPerFrame' has a wrong offset!");
//static_assert(offsetof(USubstanceSettings, DefaultGenerationMode) == 0x000038, "Member 'USubstanceSettings::DefaultGenerationMode' has a wrong offset!");
//static_assert(offsetof(USubstanceSettings, SubstanceEngine) == 0x000039, "Member 'USubstanceSettings::SubstanceEngine' has a wrong offset!");
//static_assert(offsetof(USubstanceSettings, DefaultSubstanceOutputSizeX) == 0x00003A, "Member 'USubstanceSettings::DefaultSubstanceOutputSizeX' has a wrong offset!");
//static_assert(offsetof(USubstanceSettings, DefaultSubstanceOutputSizeY) == 0x00003B, "Member 'USubstanceSettings::DefaultSubstanceOutputSizeY' has a wrong offset!");

// Class SubstanceCore.SubstanceTexture2D
// 0x0050 (0x0260 - 0x0210)
class USubstanceTexture2D final : public UTexture2DDynamic
{
public:
	uint8                                         Pad_210[0x28];                                     // 0x0210(0x0028)(Fixing Size After Last Property [ Dumper-7 ])
	class USubstanceGraphInstance*                ParentInstance;                                    // 0x0238(0x0008)(Edit, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ETextureAddress                               AddressX;                                          // 0x0240(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, AssetRegistrySearchable, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ETextureAddress                               AddressY;                                          // 0x0241(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, AssetRegistrySearchable, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bCooked;                                           // 0x0242(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_243[0x1D];                                     // 0x0243(0x001D)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	ESubChannelType GetChannel();

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"SubstanceTexture2D">();
	}
	static class USubstanceTexture2D* GetDefaultObj()
	{
		return GetDefaultObjImpl<USubstanceTexture2D>();
	}
};
//static_assert(alignof(USubstanceTexture2D) == 0x000010, "Wrong alignment on USubstanceTexture2D");
//static_assert(sizeof(USubstanceTexture2D) == 0x000260, "Wrong size on USubstanceTexture2D");
//static_assert(offsetof(USubstanceTexture2D, ParentInstance) == 0x000238, "Member 'USubstanceTexture2D::ParentInstance' has a wrong offset!");
//static_assert(offsetof(USubstanceTexture2D, AddressX) == 0x000240, "Member 'USubstanceTexture2D::AddressX' has a wrong offset!");
//static_assert(offsetof(USubstanceTexture2D, AddressY) == 0x000241, "Member 'USubstanceTexture2D::AddressY' has a wrong offset!");
//static_assert(offsetof(USubstanceTexture2D, bCooked) == 0x000242, "Member 'USubstanceTexture2D::bCooked' has a wrong offset!");

// Class SubstanceCore.SubstanceUtility
// 0x0000 (0x0028 - 0x0028)
class USubstanceUtility final : public UBlueprintFunctionLibrary
{
public:
	static void AsyncRendering(class USubstanceGraphInstance* InstancesToRender);
	static void ClearCache();
	static void CopyInputParameters(class USubstanceGraphInstance* SourceGraphInstance, class USubstanceGraphInstance* DestGraphInstance);
	static class USubstanceInstanceFactory* CreateAggregateSubstanceFactory(class USubstanceInstanceFactory* OutputFactory, int32 OutputFactoryGraphIndex, class USubstanceInstanceFactory* InputFactory, int32 InputFactoryGraphIndex, const TArray<struct FSubstanceConnection>& Connections);
	static class USubstanceGraphInstance* CreateGraphInstance(class UObject* WorldContextObject, class USubstanceInstanceFactory* Factory, int32 GraphDescIndex, const class FString& InstanceName);
	static void DisableInstanceOutputs(class UObject* WorldContextObject, class USubstanceGraphInstance* GraphInstance, const TArray<int32>& OutputIndices);
	static class USubstanceGraphInstance* DuplicateGraphInstance(class UObject* WorldContextObject, class USubstanceGraphInstance* GraphInstance);
	static void EnableInstanceOutputs(class UObject* WorldContextObject, class USubstanceGraphInstance* GraphInstance, const TArray<int32>& OutputIndices);
	static class FString GetFactoryName(class USubstanceGraphInstance* GraphInstance);
	static class FString GetGraphName(class USubstanceGraphInstance* GraphInstance);
	static float GetSubstanceLoadingProgress();
	static TArray<class USubstanceGraphInstance*> GetSubstances(class UMaterialInterface* Material);
	static TArray<class USubstanceTexture2D*> GetSubstanceTextures(class USubstanceGraphInstance* GraphInstance);
	static void ResetInputParameters(class USubstanceGraphInstance* GraphInstance);
	static void SetGraphInstanceOutputSize(class USubstanceGraphInstance* GraphInstance, ESubstanceTextureSize Width, ESubstanceTextureSize Height);
	static void SetGraphInstanceOutputSizeInt(class USubstanceGraphInstance* GraphInstance, int32 Width, int32 Height);
	static void SyncRendering(class USubstanceGraphInstance* InstancesToRender);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"SubstanceUtility">();
	}
	static class USubstanceUtility* GetDefaultObj()
	{
		return GetDefaultObjImpl<USubstanceUtility>();
	}
};
//static_assert(alignof(USubstanceUtility) == 0x000008, "Wrong alignment on USubstanceUtility");
//static_assert(sizeof(USubstanceUtility) == 0x000028, "Wrong size on USubstanceUtility");

}

