#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: BP_RTX_Parameter_Interface

#include "Basic.hpp"

#include "Enum_RT_Quality_Preset_structs.hpp"


namespace SDK::Params
{

// Function BP_RTX_Parameter_Interface.BP_RTX_Parameter_Interface_C.Enable_DLSS_RR
// 0x0001 (0x0001 - 0x0000)
struct BP_RTX_Parameter_Interface_C_Enable_DLSS_RR final
{
public:
	bool                                          Enable_DLSSD;                                      // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
//static_assert(alignof(BP_RTX_Parameter_Interface_C_Enable_DLSS_RR) == 0x000001, "Wrong alignment on BP_RTX_Parameter_Interface_C_Enable_DLSS_RR");
//static_assert(sizeof(BP_RTX_Parameter_Interface_C_Enable_DLSS_RR) == 0x000001, "Wrong size on BP_RTX_Parameter_Interface_C_Enable_DLSS_RR");
//static_assert(offsetof(BP_RTX_Parameter_Interface_C_Enable_DLSS_RR, Enable_DLSSD) == 0x000000, "Member 'BP_RTX_Parameter_Interface_C_Enable_DLSS_RR::Enable_DLSSD' has a wrong offset!");

// Function BP_RTX_Parameter_Interface.BP_RTX_Parameter_Interface_C.RTX_Switch_DLSS_From_UI
// 0x0028 (0x0028 - 0x0000)
struct BP_RTX_Parameter_Interface_C_RTX_Switch_DLSS_From_UI final
{
public:
	class FString                                 AA_Method;                                         // 0x0000(0x0010)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, HasGetValueTypeHash)
	class FString                                 DLSS_Quality;                                      // 0x0010(0x0010)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, HasGetValueTypeHash)
	bool                                          Enable_Override_From_UI;                           // 0x0020(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
//static_assert(alignof(BP_RTX_Parameter_Interface_C_RTX_Switch_DLSS_From_UI) == 0x000008, "Wrong alignment on BP_RTX_Parameter_Interface_C_RTX_Switch_DLSS_From_UI");
//static_assert(sizeof(BP_RTX_Parameter_Interface_C_RTX_Switch_DLSS_From_UI) == 0x000028, "Wrong size on BP_RTX_Parameter_Interface_C_RTX_Switch_DLSS_From_UI");
//static_assert(offsetof(BP_RTX_Parameter_Interface_C_RTX_Switch_DLSS_From_UI, AA_Method) == 0x000000, "Member 'BP_RTX_Parameter_Interface_C_RTX_Switch_DLSS_From_UI::AA_Method' has a wrong offset!");
//static_assert(offsetof(BP_RTX_Parameter_Interface_C_RTX_Switch_DLSS_From_UI, DLSS_Quality) == 0x000010, "Member 'BP_RTX_Parameter_Interface_C_RTX_Switch_DLSS_From_UI::DLSS_Quality' has a wrong offset!");
//static_assert(offsetof(BP_RTX_Parameter_Interface_C_RTX_Switch_DLSS_From_UI, Enable_Override_From_UI) == 0x000020, "Member 'BP_RTX_Parameter_Interface_C_RTX_Switch_DLSS_From_UI::Enable_Override_From_UI' has a wrong offset!");

// Function BP_RTX_Parameter_Interface.BP_RTX_Parameter_Interface_C.RTX_Switch_Preset_From_UI
// 0x0001 (0x0001 - 0x0000)
struct BP_RTX_Parameter_Interface_C_RTX_Switch_Preset_From_UI final
{
public:
	Enum_RT_Quality_Preset                        RTX_Preset;                                        // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
//static_assert(alignof(BP_RTX_Parameter_Interface_C_RTX_Switch_Preset_From_UI) == 0x000001, "Wrong alignment on BP_RTX_Parameter_Interface_C_RTX_Switch_Preset_From_UI");
//static_assert(sizeof(BP_RTX_Parameter_Interface_C_RTX_Switch_Preset_From_UI) == 0x000001, "Wrong size on BP_RTX_Parameter_Interface_C_RTX_Switch_Preset_From_UI");
//static_assert(offsetof(BP_RTX_Parameter_Interface_C_RTX_Switch_Preset_From_UI, RTX_Preset) == 0x000000, "Member 'BP_RTX_Parameter_Interface_C_RTX_Switch_Preset_From_UI::RTX_Preset' has a wrong offset!");

}

