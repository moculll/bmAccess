#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: TressFX

#include "Basic.hpp"

#include "Engine_structs.hpp"
#include "CoreUObject_structs.hpp"


namespace SDK
{

// Enum TressFX.ETressFXCollisionType
// NumValues: 0x0005
enum class ETressFXCollisionType : uint8
{
	TFXCollsion_None                         = 0,
	TFXCollsion_Capsule                      = 1,
	TFXCollsion_PhysicsAsset                 = 2,
	TFXCollsion_SDF                          = 3,
	TFXCollsion_MAX                          = 4,
};

// Enum TressFX.ETressFXSimulationQuality
// NumValues: 0x0003
enum class ETressFXSimulationQuality : uint8
{
	TFXSim_Disable                           = 0,
	TFXSim_Full                              = 1,
	TFXSim_MAX                               = 2,
};

// ScriptStruct TressFX.AnimationResetPositionPeriod
// 0x0008 (0x0008 - 0x0000)
struct FAnimationResetPositionPeriod final
{
public:
	float                                         Start;                                             // 0x0000(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         End;                                               // 0x0004(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
//static_assert(alignof(FAnimationResetPositionPeriod) == 0x000004, "Wrong alignment on FAnimationResetPositionPeriod");
//static_assert(sizeof(FAnimationResetPositionPeriod) == 0x000008, "Wrong size on FAnimationResetPositionPeriod");
//static_assert(offsetof(FAnimationResetPositionPeriod, Start) == 0x000000, "Member 'FAnimationResetPositionPeriod::Start' has a wrong offset!");
//static_assert(offsetof(FAnimationResetPositionPeriod, End) == 0x000004, "Member 'FAnimationResetPositionPeriod::End' has a wrong offset!");

// ScriptStruct TressFX.AnimationTressFXSimulationSettings
// 0x0028 (0x0028 - 0x0000)
struct FAnimationTressFXSimulationSettings final
{
public:
	class UAnimationAsset*                        Animation;                                         // 0x0000(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 TressFXSimulationSettingsName;                     // 0x0008(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<struct FAnimationResetPositionPeriod>  AnimResetPositionPeriods;                          // 0x0018(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
};
//static_assert(alignof(FAnimationTressFXSimulationSettings) == 0x000008, "Wrong alignment on FAnimationTressFXSimulationSettings");
//static_assert(sizeof(FAnimationTressFXSimulationSettings) == 0x000028, "Wrong size on FAnimationTressFXSimulationSettings");
//static_assert(offsetof(FAnimationTressFXSimulationSettings, Animation) == 0x000000, "Member 'FAnimationTressFXSimulationSettings::Animation' has a wrong offset!");
//static_assert(offsetof(FAnimationTressFXSimulationSettings, TressFXSimulationSettingsName) == 0x000008, "Member 'FAnimationTressFXSimulationSettings::TressFXSimulationSettingsName' has a wrong offset!");
//static_assert(offsetof(FAnimationTressFXSimulationSettings, AnimResetPositionPeriods) == 0x000018, "Member 'FAnimationTressFXSimulationSettings::AnimResetPositionPeriods' has a wrong offset!");

// ScriptStruct TressFX.TressFXSimulationSettings
// 0x0170 (0x0170 - 0x0000)
struct FTressFXSimulationSettings final
{
public:
	class FString                                 Name;                                              // 0x0000(0x0010)(Edit, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Damping;                                           // 0x0010(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         GravityMagnitude;                                  // 0x0014(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          EnableLengthConstraint;                            // 0x0018(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_19[0x3];                                       // 0x0019(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         LengthConstraintsIterations;                       // 0x001C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          EnableGlobalShapeConstraint;                       // 0x0020(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_21[0x3];                                       // 0x0021(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         GlobalConstraintStiffness;                         // 0x0024(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         GlobalShapeRange;                                  // 0x0028(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          EnableLocalShapeConstraint;                        // 0x002C(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2D[0x3];                                       // 0x002D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FRuntimeFloatCurve                     LocalShapeStiffness;                               // 0x0030(0x0088)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
	int32                                         LocalConstraintsIterations;                        // 0x00B8(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          EnableVelocityShockPropagation;                    // 0x00BC(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_BD[0x3];                                       // 0x00BD(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FRuntimeFloatCurve                     VSPStiffness;                                      // 0x00C0(0x0088)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
	uint8                                         Pad_148[0x4];                                      // 0x0148(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         VSPAccelThresholdMax;                              // 0x014C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         TipSeparationMultipier;                            // 0x0150(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         RootSeparationMultipier;                           // 0x0154(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         WindMagnitude;                                     // 0x0158(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector3f                              WindDirection;                                     // 0x015C(0x000C)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ETressFXSimulationQuality                     SimulationQuality;                                 // 0x0168(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_169[0x7];                                      // 0x0169(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
//static_assert(alignof(FTressFXSimulationSettings) == 0x000008, "Wrong alignment on FTressFXSimulationSettings");
//static_assert(sizeof(FTressFXSimulationSettings) == 0x000170, "Wrong size on FTressFXSimulationSettings");
//static_assert(offsetof(FTressFXSimulationSettings, Name) == 0x000000, "Member 'FTressFXSimulationSettings::Name' has a wrong offset!");
//static_assert(offsetof(FTressFXSimulationSettings, Damping) == 0x000010, "Member 'FTressFXSimulationSettings::Damping' has a wrong offset!");
//static_assert(offsetof(FTressFXSimulationSettings, GravityMagnitude) == 0x000014, "Member 'FTressFXSimulationSettings::GravityMagnitude' has a wrong offset!");
//static_assert(offsetof(FTressFXSimulationSettings, EnableLengthConstraint) == 0x000018, "Member 'FTressFXSimulationSettings::EnableLengthConstraint' has a wrong offset!");
//static_assert(offsetof(FTressFXSimulationSettings, LengthConstraintsIterations) == 0x00001C, "Member 'FTressFXSimulationSettings::LengthConstraintsIterations' has a wrong offset!");
//static_assert(offsetof(FTressFXSimulationSettings, EnableGlobalShapeConstraint) == 0x000020, "Member 'FTressFXSimulationSettings::EnableGlobalShapeConstraint' has a wrong offset!");
//static_assert(offsetof(FTressFXSimulationSettings, GlobalConstraintStiffness) == 0x000024, "Member 'FTressFXSimulationSettings::GlobalConstraintStiffness' has a wrong offset!");
//static_assert(offsetof(FTressFXSimulationSettings, GlobalShapeRange) == 0x000028, "Member 'FTressFXSimulationSettings::GlobalShapeRange' has a wrong offset!");
//static_assert(offsetof(FTressFXSimulationSettings, EnableLocalShapeConstraint) == 0x00002C, "Member 'FTressFXSimulationSettings::EnableLocalShapeConstraint' has a wrong offset!");
//static_assert(offsetof(FTressFXSimulationSettings, LocalShapeStiffness) == 0x000030, "Member 'FTressFXSimulationSettings::LocalShapeStiffness' has a wrong offset!");
//static_assert(offsetof(FTressFXSimulationSettings, LocalConstraintsIterations) == 0x0000B8, "Member 'FTressFXSimulationSettings::LocalConstraintsIterations' has a wrong offset!");
//static_assert(offsetof(FTressFXSimulationSettings, EnableVelocityShockPropagation) == 0x0000BC, "Member 'FTressFXSimulationSettings::EnableVelocityShockPropagation' has a wrong offset!");
//static_assert(offsetof(FTressFXSimulationSettings, VSPStiffness) == 0x0000C0, "Member 'FTressFXSimulationSettings::VSPStiffness' has a wrong offset!");
//static_assert(offsetof(FTressFXSimulationSettings, VSPAccelThresholdMax) == 0x00014C, "Member 'FTressFXSimulationSettings::VSPAccelThresholdMax' has a wrong offset!");
//static_assert(offsetof(FTressFXSimulationSettings, TipSeparationMultipier) == 0x000150, "Member 'FTressFXSimulationSettings::TipSeparationMultipier' has a wrong offset!");
//static_assert(offsetof(FTressFXSimulationSettings, RootSeparationMultipier) == 0x000154, "Member 'FTressFXSimulationSettings::RootSeparationMultipier' has a wrong offset!");
//static_assert(offsetof(FTressFXSimulationSettings, WindMagnitude) == 0x000158, "Member 'FTressFXSimulationSettings::WindMagnitude' has a wrong offset!");
//static_assert(offsetof(FTressFXSimulationSettings, WindDirection) == 0x00015C, "Member 'FTressFXSimulationSettings::WindDirection' has a wrong offset!");
//static_assert(offsetof(FTressFXSimulationSettings, SimulationQuality) == 0x000168, "Member 'FTressFXSimulationSettings::SimulationQuality' has a wrong offset!");

// ScriptStruct TressFX.TressFXShadeSettings
// 0x0014 (0x0014 - 0x0000)
struct FTressFXShadeSettings final
{
public:
	float                                         FiberRadius;                                       // 0x0000(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         FiberSpacing;                                      // 0x0004(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         HairThickness;                                     // 0x0008(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         RootTangentBlending;                               // 0x000C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         ShadowThickness;                                   // 0x0010(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
//static_assert(alignof(FTressFXShadeSettings) == 0x000004, "Wrong alignment on FTressFXShadeSettings");
//static_assert(sizeof(FTressFXShadeSettings) == 0x000014, "Wrong size on FTressFXShadeSettings");
//static_assert(offsetof(FTressFXShadeSettings, FiberRadius) == 0x000000, "Member 'FTressFXShadeSettings::FiberRadius' has a wrong offset!");
//static_assert(offsetof(FTressFXShadeSettings, FiberSpacing) == 0x000004, "Member 'FTressFXShadeSettings::FiberSpacing' has a wrong offset!");
//static_assert(offsetof(FTressFXShadeSettings, HairThickness) == 0x000008, "Member 'FTressFXShadeSettings::HairThickness' has a wrong offset!");
//static_assert(offsetof(FTressFXShadeSettings, RootTangentBlending) == 0x00000C, "Member 'FTressFXShadeSettings::RootTangentBlending' has a wrong offset!");
//static_assert(offsetof(FTressFXShadeSettings, ShadowThickness) == 0x000010, "Member 'FTressFXShadeSettings::ShadowThickness' has a wrong offset!");

// ScriptStruct TressFX.TressFXStrandStyleParameter
// 0x002C (0x002C - 0x0000)
struct FTressFXStrandStyleParameter final
{
public:
	float                                         StrandLength;                                      // 0x0000(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         StrandClumpScale;                                  // 0x0004(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         StrandClumpRoughness;                              // 0x0008(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         StrandClumpNoise;                                  // 0x000C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         StrandStiffnessTip;                                // 0x0010(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         StrandStiffnessRoot;                               // 0x0014(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_18[0x14];                                      // 0x0018(0x0014)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
//static_assert(alignof(FTressFXStrandStyleParameter) == 0x000004, "Wrong alignment on FTressFXStrandStyleParameter");
//static_assert(sizeof(FTressFXStrandStyleParameter) == 0x00002C, "Wrong size on FTressFXStrandStyleParameter");
//static_assert(offsetof(FTressFXStrandStyleParameter, StrandLength) == 0x000000, "Member 'FTressFXStrandStyleParameter::StrandLength' has a wrong offset!");
//static_assert(offsetof(FTressFXStrandStyleParameter, StrandClumpScale) == 0x000004, "Member 'FTressFXStrandStyleParameter::StrandClumpScale' has a wrong offset!");
//static_assert(offsetof(FTressFXStrandStyleParameter, StrandClumpRoughness) == 0x000008, "Member 'FTressFXStrandStyleParameter::StrandClumpRoughness' has a wrong offset!");
//static_assert(offsetof(FTressFXStrandStyleParameter, StrandClumpNoise) == 0x00000C, "Member 'FTressFXStrandStyleParameter::StrandClumpNoise' has a wrong offset!");
//static_assert(offsetof(FTressFXStrandStyleParameter, StrandStiffnessTip) == 0x000010, "Member 'FTressFXStrandStyleParameter::StrandStiffnessTip' has a wrong offset!");
//static_assert(offsetof(FTressFXStrandStyleParameter, StrandStiffnessRoot) == 0x000014, "Member 'FTressFXStrandStyleParameter::StrandStiffnessRoot' has a wrong offset!");

}

