#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: SimpleCharts

#include "Basic.hpp"

#include "SimpleCharts_structs.hpp"
#include "CoreUObject_structs.hpp"


namespace SDK::Params
{

// Function SimpleCharts.ChartBase.SetAnim
// 0x0001 (0x0001 - 0x0000)
struct ChartBase_SetAnim final
{
public:
	bool                                          Active;                                            // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
//static_assert(alignof(ChartBase_SetAnim) == 0x000001, "Wrong alignment on ChartBase_SetAnim");
//static_assert(sizeof(ChartBase_SetAnim) == 0x000001, "Wrong size on ChartBase_SetAnim");
//static_assert(offsetof(ChartBase_SetAnim, Active) == 0x000000, "Member 'ChartBase_SetAnim::Active' has a wrong offset!");

// Function SimpleCharts.ChartBase.SetAxis
// 0x0018 (0x0018 - 0x0000)
struct ChartBase_SetAxis final
{
public:
	bool                                          XAxis;                                             // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x7];                                        // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<class FString>                         Axis_Data;                                         // 0x0008(0x0010)(Parm, ZeroConstructor, NativeAccessSpecifierPublic)
};
//static_assert(alignof(ChartBase_SetAxis) == 0x000008, "Wrong alignment on ChartBase_SetAxis");
//static_assert(sizeof(ChartBase_SetAxis) == 0x000018, "Wrong size on ChartBase_SetAxis");
//static_assert(offsetof(ChartBase_SetAxis, XAxis) == 0x000000, "Member 'ChartBase_SetAxis::XAxis' has a wrong offset!");
//static_assert(offsetof(ChartBase_SetAxis, Axis_Data) == 0x000008, "Member 'ChartBase_SetAxis::Axis_Data' has a wrong offset!");

// Function SimpleCharts.ChartBase.SetCustomColor
// 0x0018 (0x0018 - 0x0000)
struct ChartBase_SetCustomColor final
{
public:
	bool                                          Active;                                            // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x7];                                        // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<struct FColor>                         Custom_color_0;                                    // 0x0008(0x0010)(Parm, ZeroConstructor, NativeAccessSpecifierPublic)
};
//static_assert(alignof(ChartBase_SetCustomColor) == 0x000008, "Wrong alignment on ChartBase_SetCustomColor");
//static_assert(sizeof(ChartBase_SetCustomColor) == 0x000018, "Wrong size on ChartBase_SetCustomColor");
//static_assert(offsetof(ChartBase_SetCustomColor, Active) == 0x000000, "Member 'ChartBase_SetCustomColor::Active' has a wrong offset!");
//static_assert(offsetof(ChartBase_SetCustomColor, Custom_color_0) == 0x000008, "Member 'ChartBase_SetCustomColor::Custom_color_0' has a wrong offset!");

// Function SimpleCharts.ChartBase.SetTheme
// 0x0002 (0x0002 - 0x0000)
struct ChartBase_SetTheme final
{
public:
	EChartTheme                                   ChartTheme;                                        // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          Axis_Style_With_Theme;                             // 0x0001(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
//static_assert(alignof(ChartBase_SetTheme) == 0x000001, "Wrong alignment on ChartBase_SetTheme");
//static_assert(sizeof(ChartBase_SetTheme) == 0x000002, "Wrong size on ChartBase_SetTheme");
//static_assert(offsetof(ChartBase_SetTheme, ChartTheme) == 0x000000, "Member 'ChartBase_SetTheme::ChartTheme' has a wrong offset!");
//static_assert(offsetof(ChartBase_SetTheme, Axis_Style_With_Theme) == 0x000001, "Member 'ChartBase_SetTheme::Axis_Style_With_Theme' has a wrong offset!");

// Function SimpleCharts.ChartBase.SetTitle
// 0x0028 (0x0028 - 0x0000)
struct ChartBase_SetTitle final
{
public:
	class FString                                 Text;                                              // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          Show;                                              // 0x0010(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EPosition                                     Position;                                          // 0x0011(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_12[0x2];                                       // 0x0012(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         FontSize;                                          // 0x0014(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FLinearColor                           Color;                                             // 0x0018(0x0010)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
//static_assert(alignof(ChartBase_SetTitle) == 0x000008, "Wrong alignment on ChartBase_SetTitle");
//static_assert(sizeof(ChartBase_SetTitle) == 0x000028, "Wrong size on ChartBase_SetTitle");
//static_assert(offsetof(ChartBase_SetTitle, Text) == 0x000000, "Member 'ChartBase_SetTitle::Text' has a wrong offset!");
//static_assert(offsetof(ChartBase_SetTitle, Show) == 0x000010, "Member 'ChartBase_SetTitle::Show' has a wrong offset!");
//static_assert(offsetof(ChartBase_SetTitle, Position) == 0x000011, "Member 'ChartBase_SetTitle::Position' has a wrong offset!");
//static_assert(offsetof(ChartBase_SetTitle, FontSize) == 0x000014, "Member 'ChartBase_SetTitle::FontSize' has a wrong offset!");
//static_assert(offsetof(ChartBase_SetTitle, Color) == 0x000018, "Member 'ChartBase_SetTitle::Color' has a wrong offset!");

// Function SimpleCharts.ChartBase.SetTooltipStyle
// 0x0024 (0x0024 - 0x0000)
struct ChartBase_SetTooltipStyle final
{
public:
	SimpleCharts::ETriggerType                    Trigger;                                           // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ETooltipType                                  ToolTip;                                           // 0x0001(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2[0x2];                                        // 0x0002(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	struct FLinearColor                           TextColor;                                         // 0x0004(0x0010)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FLinearColor                           BackgroundColor;                                   // 0x0014(0x0010)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
//static_assert(alignof(ChartBase_SetTooltipStyle) == 0x000004, "Wrong alignment on ChartBase_SetTooltipStyle");
//static_assert(sizeof(ChartBase_SetTooltipStyle) == 0x000024, "Wrong size on ChartBase_SetTooltipStyle");
//static_assert(offsetof(ChartBase_SetTooltipStyle, Trigger) == 0x000000, "Member 'ChartBase_SetTooltipStyle::Trigger' has a wrong offset!");
//static_assert(offsetof(ChartBase_SetTooltipStyle, ToolTip) == 0x000001, "Member 'ChartBase_SetTooltipStyle::ToolTip' has a wrong offset!");
//static_assert(offsetof(ChartBase_SetTooltipStyle, TextColor) == 0x000004, "Member 'ChartBase_SetTooltipStyle::TextColor' has a wrong offset!");
//static_assert(offsetof(ChartBase_SetTooltipStyle, BackgroundColor) == 0x000014, "Member 'ChartBase_SetTooltipStyle::BackgroundColor' has a wrong offset!");

// Function SimpleCharts.ChartBase.SetXAxisStyle
// 0x0048 (0x0048 - 0x0000)
struct ChartBase_SetXAxisStyle final
{
public:
	struct FAxisLabel                             Xaxis_Label;                                       // 0x0000(0x0028)(Parm, NativeAccessSpecifierPublic)
	struct FLineStyle                             Xaxis_Line;                                        // 0x0028(0x0010)(Parm, NoDestructor, NativeAccessSpecifierPublic)
	struct FLineStyle                             Xsplit_Line;                                       // 0x0038(0x0010)(Parm, NoDestructor, NativeAccessSpecifierPublic)
};
//static_assert(alignof(ChartBase_SetXAxisStyle) == 0x000008, "Wrong alignment on ChartBase_SetXAxisStyle");
//static_assert(sizeof(ChartBase_SetXAxisStyle) == 0x000048, "Wrong size on ChartBase_SetXAxisStyle");
//static_assert(offsetof(ChartBase_SetXAxisStyle, Xaxis_Label) == 0x000000, "Member 'ChartBase_SetXAxisStyle::Xaxis_Label' has a wrong offset!");
//static_assert(offsetof(ChartBase_SetXAxisStyle, Xaxis_Line) == 0x000028, "Member 'ChartBase_SetXAxisStyle::Xaxis_Line' has a wrong offset!");
//static_assert(offsetof(ChartBase_SetXAxisStyle, Xsplit_Line) == 0x000038, "Member 'ChartBase_SetXAxisStyle::Xsplit_Line' has a wrong offset!");

// Function SimpleCharts.ChartBase.SetYAxisStyle
// 0x0048 (0x0048 - 0x0000)
struct ChartBase_SetYAxisStyle final
{
public:
	struct FAxisLabel                             Yaxis_Label;                                       // 0x0000(0x0028)(Parm, NativeAccessSpecifierPublic)
	struct FLineStyle                             Yaxis_Line;                                        // 0x0028(0x0010)(Parm, NoDestructor, NativeAccessSpecifierPublic)
	struct FLineStyle                             Ysplit_Line;                                       // 0x0038(0x0010)(Parm, NoDestructor, NativeAccessSpecifierPublic)
};
//static_assert(alignof(ChartBase_SetYAxisStyle) == 0x000008, "Wrong alignment on ChartBase_SetYAxisStyle");
//static_assert(sizeof(ChartBase_SetYAxisStyle) == 0x000048, "Wrong size on ChartBase_SetYAxisStyle");
//static_assert(offsetof(ChartBase_SetYAxisStyle, Yaxis_Label) == 0x000000, "Member 'ChartBase_SetYAxisStyle::Yaxis_Label' has a wrong offset!");
//static_assert(offsetof(ChartBase_SetYAxisStyle, Yaxis_Line) == 0x000028, "Member 'ChartBase_SetYAxisStyle::Yaxis_Line' has a wrong offset!");
//static_assert(offsetof(ChartBase_SetYAxisStyle, Ysplit_Line) == 0x000038, "Member 'ChartBase_SetYAxisStyle::Ysplit_Line' has a wrong offset!");

// Function SimpleCharts.AreaChart.SetLegend
// 0x0018 (0x0018 - 0x0000)
struct AreaChart_SetLegend final
{
public:
	bool                                          Show;                                              // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EPosition                                     Position;                                          // 0x0001(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EOrient                                       Orient;                                            // 0x0002(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_3[0x1];                                        // 0x0003(0x0001)(Fixing Size After Last Property [ Dumper-7 ])
	struct FLinearColor                           Color;                                             // 0x0004(0x0010)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         FontSize;                                          // 0x0014(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
//static_assert(alignof(AreaChart_SetLegend) == 0x000004, "Wrong alignment on AreaChart_SetLegend");
//static_assert(sizeof(AreaChart_SetLegend) == 0x000018, "Wrong size on AreaChart_SetLegend");
//static_assert(offsetof(AreaChart_SetLegend, Show) == 0x000000, "Member 'AreaChart_SetLegend::Show' has a wrong offset!");
//static_assert(offsetof(AreaChart_SetLegend, Position) == 0x000001, "Member 'AreaChart_SetLegend::Position' has a wrong offset!");
//static_assert(offsetof(AreaChart_SetLegend, Orient) == 0x000002, "Member 'AreaChart_SetLegend::Orient' has a wrong offset!");
//static_assert(offsetof(AreaChart_SetLegend, Color) == 0x000004, "Member 'AreaChart_SetLegend::Color' has a wrong offset!");
//static_assert(offsetof(AreaChart_SetLegend, FontSize) == 0x000014, "Member 'AreaChart_SetLegend::FontSize' has a wrong offset!");

// Function SimpleCharts.AreaChart.SetSeries
// 0x0010 (0x0010 - 0x0000)
struct AreaChart_SetSeries final
{
public:
	TArray<struct FAreaSeries>                    SeriesData;                                        // 0x0000(0x0010)(Parm, ZeroConstructor, NativeAccessSpecifierPublic)
};
//static_assert(alignof(AreaChart_SetSeries) == 0x000008, "Wrong alignment on AreaChart_SetSeries");
//static_assert(sizeof(AreaChart_SetSeries) == 0x000010, "Wrong size on AreaChart_SetSeries");
//static_assert(offsetof(AreaChart_SetSeries, SeriesData) == 0x000000, "Member 'AreaChart_SetSeries::SeriesData' has a wrong offset!");

// Function SimpleCharts.BarChart.SetLegend
// 0x0018 (0x0018 - 0x0000)
struct BarChart_SetLegend final
{
public:
	bool                                          Show;                                              // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EPosition                                     Position;                                          // 0x0001(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EOrient                                       Orient;                                            // 0x0002(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_3[0x1];                                        // 0x0003(0x0001)(Fixing Size After Last Property [ Dumper-7 ])
	struct FLinearColor                           Color;                                             // 0x0004(0x0010)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         FontSize;                                          // 0x0014(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
//static_assert(alignof(BarChart_SetLegend) == 0x000004, "Wrong alignment on BarChart_SetLegend");
//static_assert(sizeof(BarChart_SetLegend) == 0x000018, "Wrong size on BarChart_SetLegend");
//static_assert(offsetof(BarChart_SetLegend, Show) == 0x000000, "Member 'BarChart_SetLegend::Show' has a wrong offset!");
//static_assert(offsetof(BarChart_SetLegend, Position) == 0x000001, "Member 'BarChart_SetLegend::Position' has a wrong offset!");
//static_assert(offsetof(BarChart_SetLegend, Orient) == 0x000002, "Member 'BarChart_SetLegend::Orient' has a wrong offset!");
//static_assert(offsetof(BarChart_SetLegend, Color) == 0x000004, "Member 'BarChart_SetLegend::Color' has a wrong offset!");
//static_assert(offsetof(BarChart_SetLegend, FontSize) == 0x000014, "Member 'BarChart_SetLegend::FontSize' has a wrong offset!");

// Function SimpleCharts.BarChart.SetSeries
// 0x0010 (0x0010 - 0x0000)
struct BarChart_SetSeries final
{
public:
	TArray<struct FBarSeries>                     SeriesData;                                        // 0x0000(0x0010)(Parm, ZeroConstructor, NativeAccessSpecifierPublic)
};
//static_assert(alignof(BarChart_SetSeries) == 0x000008, "Wrong alignment on BarChart_SetSeries");
//static_assert(sizeof(BarChart_SetSeries) == 0x000010, "Wrong size on BarChart_SetSeries");
//static_assert(offsetof(BarChart_SetSeries, SeriesData) == 0x000000, "Member 'BarChart_SetSeries::SeriesData' has a wrong offset!");

// Function SimpleCharts.ChartWebBrowser.ExecuteJavascript
// 0x0010 (0x0010 - 0x0000)
struct ChartWebBrowser_ExecuteJavascript final
{
public:
	class FString                                 ScriptText;                                        // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
//static_assert(alignof(ChartWebBrowser_ExecuteJavascript) == 0x000008, "Wrong alignment on ChartWebBrowser_ExecuteJavascript");
//static_assert(sizeof(ChartWebBrowser_ExecuteJavascript) == 0x000010, "Wrong size on ChartWebBrowser_ExecuteJavascript");
//static_assert(offsetof(ChartWebBrowser_ExecuteJavascript, ScriptText) == 0x000000, "Member 'ChartWebBrowser_ExecuteJavascript::ScriptText' has a wrong offset!");

// Function SimpleCharts.ChartWebBrowser.LoadString
// 0x0020 (0x0020 - 0x0000)
struct ChartWebBrowser_LoadString final
{
public:
	class FString                                 Contents;                                          // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 DummyURL;                                          // 0x0010(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
//static_assert(alignof(ChartWebBrowser_LoadString) == 0x000008, "Wrong alignment on ChartWebBrowser_LoadString");
//static_assert(sizeof(ChartWebBrowser_LoadString) == 0x000020, "Wrong size on ChartWebBrowser_LoadString");
//static_assert(offsetof(ChartWebBrowser_LoadString, Contents) == 0x000000, "Member 'ChartWebBrowser_LoadString::Contents' has a wrong offset!");
//static_assert(offsetof(ChartWebBrowser_LoadString, DummyURL) == 0x000010, "Member 'ChartWebBrowser_LoadString::DummyURL' has a wrong offset!");

// Function SimpleCharts.ChartWebBrowser.LoadURL
// 0x0010 (0x0010 - 0x0000)
struct ChartWebBrowser_LoadURL final
{
public:
	class FString                                 NewURL;                                            // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
//static_assert(alignof(ChartWebBrowser_LoadURL) == 0x000008, "Wrong alignment on ChartWebBrowser_LoadURL");
//static_assert(sizeof(ChartWebBrowser_LoadURL) == 0x000010, "Wrong size on ChartWebBrowser_LoadURL");
//static_assert(offsetof(ChartWebBrowser_LoadURL, NewURL) == 0x000000, "Member 'ChartWebBrowser_LoadURL::NewURL' has a wrong offset!");

// DelegateFunction SimpleCharts.ChartWebBrowser.OnBeforePopup__DelegateSignature
// 0x0020 (0x0020 - 0x0000)
struct ChartWebBrowser_OnBeforePopup__DelegateSignature final
{
public:
	class FString                                 URL;                                               // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 Frame;                                             // 0x0010(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
//static_assert(alignof(ChartWebBrowser_OnBeforePopup__DelegateSignature) == 0x000008, "Wrong alignment on ChartWebBrowser_OnBeforePopup__DelegateSignature");
//static_assert(sizeof(ChartWebBrowser_OnBeforePopup__DelegateSignature) == 0x000020, "Wrong size on ChartWebBrowser_OnBeforePopup__DelegateSignature");
//static_assert(offsetof(ChartWebBrowser_OnBeforePopup__DelegateSignature, URL) == 0x000000, "Member 'ChartWebBrowser_OnBeforePopup__DelegateSignature::URL' has a wrong offset!");
//static_assert(offsetof(ChartWebBrowser_OnBeforePopup__DelegateSignature, Frame) == 0x000010, "Member 'ChartWebBrowser_OnBeforePopup__DelegateSignature::Frame' has a wrong offset!");

// DelegateFunction SimpleCharts.ChartWebBrowser.OnUrlChanged__DelegateSignature
// 0x0018 (0x0018 - 0x0000)
struct ChartWebBrowser_OnUrlChanged__DelegateSignature final
{
public:
	class FText                                   Text;                                              // 0x0000(0x0018)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
};
//static_assert(alignof(ChartWebBrowser_OnUrlChanged__DelegateSignature) == 0x000008, "Wrong alignment on ChartWebBrowser_OnUrlChanged__DelegateSignature");
//static_assert(sizeof(ChartWebBrowser_OnUrlChanged__DelegateSignature) == 0x000018, "Wrong size on ChartWebBrowser_OnUrlChanged__DelegateSignature");
//static_assert(offsetof(ChartWebBrowser_OnUrlChanged__DelegateSignature, Text) == 0x000000, "Member 'ChartWebBrowser_OnUrlChanged__DelegateSignature::Text' has a wrong offset!");

// Function SimpleCharts.ChartWebBrowser.GetTitleText
// 0x0018 (0x0018 - 0x0000)
struct ChartWebBrowser_GetTitleText final
{
public:
	class FText                                   ReturnValue;                                       // 0x0000(0x0018)(Parm, OutParm, ReturnParm, NativeAccessSpecifierPublic)
};
//static_assert(alignof(ChartWebBrowser_GetTitleText) == 0x000008, "Wrong alignment on ChartWebBrowser_GetTitleText");
//static_assert(sizeof(ChartWebBrowser_GetTitleText) == 0x000018, "Wrong size on ChartWebBrowser_GetTitleText");
//static_assert(offsetof(ChartWebBrowser_GetTitleText, ReturnValue) == 0x000000, "Member 'ChartWebBrowser_GetTitleText::ReturnValue' has a wrong offset!");

// Function SimpleCharts.ChartWebBrowser.GetUrl
// 0x0010 (0x0010 - 0x0000)
struct ChartWebBrowser_GetUrl final
{
public:
	class FString                                 ReturnValue;                                       // 0x0000(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
//static_assert(alignof(ChartWebBrowser_GetUrl) == 0x000008, "Wrong alignment on ChartWebBrowser_GetUrl");
//static_assert(sizeof(ChartWebBrowser_GetUrl) == 0x000010, "Wrong size on ChartWebBrowser_GetUrl");
//static_assert(offsetof(ChartWebBrowser_GetUrl, ReturnValue) == 0x000000, "Member 'ChartWebBrowser_GetUrl::ReturnValue' has a wrong offset!");

// Function SimpleCharts.CustomChart.SetOption
// 0x0020 (0x0020 - 0x0000)
struct CustomChart_SetOption final
{
public:
	class FString                                 InOption;                                          // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 OtherCode;                                         // 0x0010(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
//static_assert(alignof(CustomChart_SetOption) == 0x000008, "Wrong alignment on CustomChart_SetOption");
//static_assert(sizeof(CustomChart_SetOption) == 0x000020, "Wrong size on CustomChart_SetOption");
//static_assert(offsetof(CustomChart_SetOption, InOption) == 0x000000, "Member 'CustomChart_SetOption::InOption' has a wrong offset!");
//static_assert(offsetof(CustomChart_SetOption, OtherCode) == 0x000010, "Member 'CustomChart_SetOption::OtherCode' has a wrong offset!");

// Function SimpleCharts.CustomChart.SetTheme
// 0x0001 (0x0001 - 0x0000)
struct CustomChart_SetTheme final
{
public:
	EChartTheme                                   ChartTheme;                                        // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
//static_assert(alignof(CustomChart_SetTheme) == 0x000001, "Wrong alignment on CustomChart_SetTheme");
//static_assert(sizeof(CustomChart_SetTheme) == 0x000001, "Wrong size on CustomChart_SetTheme");
//static_assert(offsetof(CustomChart_SetTheme, ChartTheme) == 0x000000, "Member 'CustomChart_SetTheme::ChartTheme' has a wrong offset!");

// Function SimpleCharts.DoughnutChart.SetLegend
// 0x0018 (0x0018 - 0x0000)
struct DoughnutChart_SetLegend final
{
public:
	bool                                          Show;                                              // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EPosition                                     Position;                                          // 0x0001(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EOrient                                       Orient;                                            // 0x0002(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_3[0x1];                                        // 0x0003(0x0001)(Fixing Size After Last Property [ Dumper-7 ])
	struct FLinearColor                           Color;                                             // 0x0004(0x0010)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         FontSize;                                          // 0x0014(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
//static_assert(alignof(DoughnutChart_SetLegend) == 0x000004, "Wrong alignment on DoughnutChart_SetLegend");
//static_assert(sizeof(DoughnutChart_SetLegend) == 0x000018, "Wrong size on DoughnutChart_SetLegend");
//static_assert(offsetof(DoughnutChart_SetLegend, Show) == 0x000000, "Member 'DoughnutChart_SetLegend::Show' has a wrong offset!");
//static_assert(offsetof(DoughnutChart_SetLegend, Position) == 0x000001, "Member 'DoughnutChart_SetLegend::Position' has a wrong offset!");
//static_assert(offsetof(DoughnutChart_SetLegend, Orient) == 0x000002, "Member 'DoughnutChart_SetLegend::Orient' has a wrong offset!");
//static_assert(offsetof(DoughnutChart_SetLegend, Color) == 0x000004, "Member 'DoughnutChart_SetLegend::Color' has a wrong offset!");
//static_assert(offsetof(DoughnutChart_SetLegend, FontSize) == 0x000014, "Member 'DoughnutChart_SetLegend::FontSize' has a wrong offset!");

// Function SimpleCharts.DoughnutChart.SetSeries
// 0x00B0 (0x00B0 - 0x0000)
struct DoughnutChart_SetSeries final
{
public:
	struct FDoughnutSeries                        SeriesData;                                        // 0x0000(0x00B0)(Parm, NativeAccessSpecifierPublic)
};
//static_assert(alignof(DoughnutChart_SetSeries) == 0x000010, "Wrong alignment on DoughnutChart_SetSeries");
//static_assert(sizeof(DoughnutChart_SetSeries) == 0x0000B0, "Wrong size on DoughnutChart_SetSeries");
//static_assert(offsetof(DoughnutChart_SetSeries, SeriesData) == 0x000000, "Member 'DoughnutChart_SetSeries::SeriesData' has a wrong offset!");

// Function SimpleCharts.FunnelChart.SetLegend
// 0x0018 (0x0018 - 0x0000)
struct FunnelChart_SetLegend final
{
public:
	bool                                          Show;                                              // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EPosition                                     Position;                                          // 0x0001(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EOrient                                       Orient;                                            // 0x0002(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_3[0x1];                                        // 0x0003(0x0001)(Fixing Size After Last Property [ Dumper-7 ])
	struct FLinearColor                           Color;                                             // 0x0004(0x0010)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         FontSize;                                          // 0x0014(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
//static_assert(alignof(FunnelChart_SetLegend) == 0x000004, "Wrong alignment on FunnelChart_SetLegend");
//static_assert(sizeof(FunnelChart_SetLegend) == 0x000018, "Wrong size on FunnelChart_SetLegend");
//static_assert(offsetof(FunnelChart_SetLegend, Show) == 0x000000, "Member 'FunnelChart_SetLegend::Show' has a wrong offset!");
//static_assert(offsetof(FunnelChart_SetLegend, Position) == 0x000001, "Member 'FunnelChart_SetLegend::Position' has a wrong offset!");
//static_assert(offsetof(FunnelChart_SetLegend, Orient) == 0x000002, "Member 'FunnelChart_SetLegend::Orient' has a wrong offset!");
//static_assert(offsetof(FunnelChart_SetLegend, Color) == 0x000004, "Member 'FunnelChart_SetLegend::Color' has a wrong offset!");
//static_assert(offsetof(FunnelChart_SetLegend, FontSize) == 0x000014, "Member 'FunnelChart_SetLegend::FontSize' has a wrong offset!");

// Function SimpleCharts.FunnelChart.SetSeries
// 0x0040 (0x0040 - 0x0000)
struct FunnelChart_SetSeries final
{
public:
	struct FFunnelSeries                          SeriesData;                                        // 0x0000(0x0040)(Parm, NativeAccessSpecifierPublic)
};
//static_assert(alignof(FunnelChart_SetSeries) == 0x000008, "Wrong alignment on FunnelChart_SetSeries");
//static_assert(sizeof(FunnelChart_SetSeries) == 0x000040, "Wrong size on FunnelChart_SetSeries");
//static_assert(offsetof(FunnelChart_SetSeries, SeriesData) == 0x000000, "Member 'FunnelChart_SetSeries::SeriesData' has a wrong offset!");

// Function SimpleCharts.GaugeChart.SetLegend
// 0x0018 (0x0018 - 0x0000)
struct GaugeChart_SetLegend final
{
public:
	bool                                          Show;                                              // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EPosition                                     Position;                                          // 0x0001(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EOrient                                       Orient;                                            // 0x0002(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_3[0x1];                                        // 0x0003(0x0001)(Fixing Size After Last Property [ Dumper-7 ])
	struct FLinearColor                           Color;                                             // 0x0004(0x0010)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         FontSize;                                          // 0x0014(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
//static_assert(alignof(GaugeChart_SetLegend) == 0x000004, "Wrong alignment on GaugeChart_SetLegend");
//static_assert(sizeof(GaugeChart_SetLegend) == 0x000018, "Wrong size on GaugeChart_SetLegend");
//static_assert(offsetof(GaugeChart_SetLegend, Show) == 0x000000, "Member 'GaugeChart_SetLegend::Show' has a wrong offset!");
//static_assert(offsetof(GaugeChart_SetLegend, Position) == 0x000001, "Member 'GaugeChart_SetLegend::Position' has a wrong offset!");
//static_assert(offsetof(GaugeChart_SetLegend, Orient) == 0x000002, "Member 'GaugeChart_SetLegend::Orient' has a wrong offset!");
//static_assert(offsetof(GaugeChart_SetLegend, Color) == 0x000004, "Member 'GaugeChart_SetLegend::Color' has a wrong offset!");
//static_assert(offsetof(GaugeChart_SetLegend, FontSize) == 0x000014, "Member 'GaugeChart_SetLegend::FontSize' has a wrong offset!");

// Function SimpleCharts.GaugeChart.SetSeries
// 0x0028 (0x0028 - 0x0000)
struct GaugeChart_SetSeries final
{
public:
	struct FGaugeSeries                           SeriesData;                                        // 0x0000(0x0028)(Parm, NativeAccessSpecifierPublic)
};
//static_assert(alignof(GaugeChart_SetSeries) == 0x000008, "Wrong alignment on GaugeChart_SetSeries");
//static_assert(sizeof(GaugeChart_SetSeries) == 0x000028, "Wrong size on GaugeChart_SetSeries");
//static_assert(offsetof(GaugeChart_SetSeries, SeriesData) == 0x000000, "Member 'GaugeChart_SetSeries::SeriesData' has a wrong offset!");

// Function SimpleCharts.LineBarChart.SetLegend
// 0x0018 (0x0018 - 0x0000)
struct LineBarChart_SetLegend final
{
public:
	bool                                          Show;                                              // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EPosition                                     Position;                                          // 0x0001(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EOrient                                       Orient;                                            // 0x0002(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_3[0x1];                                        // 0x0003(0x0001)(Fixing Size After Last Property [ Dumper-7 ])
	struct FLinearColor                           Color;                                             // 0x0004(0x0010)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         FontSize;                                          // 0x0014(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
//static_assert(alignof(LineBarChart_SetLegend) == 0x000004, "Wrong alignment on LineBarChart_SetLegend");
//static_assert(sizeof(LineBarChart_SetLegend) == 0x000018, "Wrong size on LineBarChart_SetLegend");
//static_assert(offsetof(LineBarChart_SetLegend, Show) == 0x000000, "Member 'LineBarChart_SetLegend::Show' has a wrong offset!");
//static_assert(offsetof(LineBarChart_SetLegend, Position) == 0x000001, "Member 'LineBarChart_SetLegend::Position' has a wrong offset!");
//static_assert(offsetof(LineBarChart_SetLegend, Orient) == 0x000002, "Member 'LineBarChart_SetLegend::Orient' has a wrong offset!");
//static_assert(offsetof(LineBarChart_SetLegend, Color) == 0x000004, "Member 'LineBarChart_SetLegend::Color' has a wrong offset!");
//static_assert(offsetof(LineBarChart_SetLegend, FontSize) == 0x000014, "Member 'LineBarChart_SetLegend::FontSize' has a wrong offset!");

// Function SimpleCharts.LineBarChart.SetSeries
// 0x0010 (0x0010 - 0x0000)
struct LineBarChart_SetSeries final
{
public:
	TArray<struct FLineBarSeries>                 SeriesData;                                        // 0x0000(0x0010)(Parm, ZeroConstructor, NativeAccessSpecifierPublic)
};
//static_assert(alignof(LineBarChart_SetSeries) == 0x000008, "Wrong alignment on LineBarChart_SetSeries");
//static_assert(sizeof(LineBarChart_SetSeries) == 0x000010, "Wrong size on LineBarChart_SetSeries");
//static_assert(offsetof(LineBarChart_SetSeries, SeriesData) == 0x000000, "Member 'LineBarChart_SetSeries::SeriesData' has a wrong offset!");

// Function SimpleCharts.LineChart.SetLegend
// 0x0018 (0x0018 - 0x0000)
struct LineChart_SetLegend final
{
public:
	bool                                          Show;                                              // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EPosition                                     Position;                                          // 0x0001(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EOrient                                       Orient;                                            // 0x0002(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_3[0x1];                                        // 0x0003(0x0001)(Fixing Size After Last Property [ Dumper-7 ])
	struct FLinearColor                           Color;                                             // 0x0004(0x0010)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         FontSize;                                          // 0x0014(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
//static_assert(alignof(LineChart_SetLegend) == 0x000004, "Wrong alignment on LineChart_SetLegend");
//static_assert(sizeof(LineChart_SetLegend) == 0x000018, "Wrong size on LineChart_SetLegend");
//static_assert(offsetof(LineChart_SetLegend, Show) == 0x000000, "Member 'LineChart_SetLegend::Show' has a wrong offset!");
//static_assert(offsetof(LineChart_SetLegend, Position) == 0x000001, "Member 'LineChart_SetLegend::Position' has a wrong offset!");
//static_assert(offsetof(LineChart_SetLegend, Orient) == 0x000002, "Member 'LineChart_SetLegend::Orient' has a wrong offset!");
//static_assert(offsetof(LineChart_SetLegend, Color) == 0x000004, "Member 'LineChart_SetLegend::Color' has a wrong offset!");
//static_assert(offsetof(LineChart_SetLegend, FontSize) == 0x000014, "Member 'LineChart_SetLegend::FontSize' has a wrong offset!");

// Function SimpleCharts.LineChart.SetSeries
// 0x0010 (0x0010 - 0x0000)
struct LineChart_SetSeries final
{
public:
	TArray<struct FLineSeries>                    SeriesData;                                        // 0x0000(0x0010)(Parm, ZeroConstructor, NativeAccessSpecifierPublic)
};
//static_assert(alignof(LineChart_SetSeries) == 0x000008, "Wrong alignment on LineChart_SetSeries");
//static_assert(sizeof(LineChart_SetSeries) == 0x000010, "Wrong size on LineChart_SetSeries");
//static_assert(offsetof(LineChart_SetSeries, SeriesData) == 0x000000, "Member 'LineChart_SetSeries::SeriesData' has a wrong offset!");

// Function SimpleCharts.PieChart.SetLegend
// 0x0018 (0x0018 - 0x0000)
struct PieChart_SetLegend final
{
public:
	bool                                          Show;                                              // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EPosition                                     Position;                                          // 0x0001(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EOrient                                       Orient;                                            // 0x0002(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_3[0x1];                                        // 0x0003(0x0001)(Fixing Size After Last Property [ Dumper-7 ])
	struct FLinearColor                           Color;                                             // 0x0004(0x0010)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         FontSize;                                          // 0x0014(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
//static_assert(alignof(PieChart_SetLegend) == 0x000004, "Wrong alignment on PieChart_SetLegend");
//static_assert(sizeof(PieChart_SetLegend) == 0x000018, "Wrong size on PieChart_SetLegend");
//static_assert(offsetof(PieChart_SetLegend, Show) == 0x000000, "Member 'PieChart_SetLegend::Show' has a wrong offset!");
//static_assert(offsetof(PieChart_SetLegend, Position) == 0x000001, "Member 'PieChart_SetLegend::Position' has a wrong offset!");
//static_assert(offsetof(PieChart_SetLegend, Orient) == 0x000002, "Member 'PieChart_SetLegend::Orient' has a wrong offset!");
//static_assert(offsetof(PieChart_SetLegend, Color) == 0x000004, "Member 'PieChart_SetLegend::Color' has a wrong offset!");
//static_assert(offsetof(PieChart_SetLegend, FontSize) == 0x000014, "Member 'PieChart_SetLegend::FontSize' has a wrong offset!");

// Function SimpleCharts.PieChart.SetSeries
// 0x00A0 (0x00A0 - 0x0000)
struct PieChart_SetSeries final
{
public:
	struct FPieSeries                             SeriesData;                                        // 0x0000(0x00A0)(Parm, NativeAccessSpecifierPublic)
};
//static_assert(alignof(PieChart_SetSeries) == 0x000010, "Wrong alignment on PieChart_SetSeries");
//static_assert(sizeof(PieChart_SetSeries) == 0x0000A0, "Wrong size on PieChart_SetSeries");
//static_assert(offsetof(PieChart_SetSeries, SeriesData) == 0x000000, "Member 'PieChart_SetSeries::SeriesData' has a wrong offset!");

// Function SimpleCharts.RadarChart.SetLegend
// 0x0018 (0x0018 - 0x0000)
struct RadarChart_SetLegend final
{
public:
	bool                                          Show;                                              // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EPosition                                     Position;                                          // 0x0001(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EOrient                                       Orient;                                            // 0x0002(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_3[0x1];                                        // 0x0003(0x0001)(Fixing Size After Last Property [ Dumper-7 ])
	struct FLinearColor                           Color;                                             // 0x0004(0x0010)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         FontSize;                                          // 0x0014(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
//static_assert(alignof(RadarChart_SetLegend) == 0x000004, "Wrong alignment on RadarChart_SetLegend");
//static_assert(sizeof(RadarChart_SetLegend) == 0x000018, "Wrong size on RadarChart_SetLegend");
//static_assert(offsetof(RadarChart_SetLegend, Show) == 0x000000, "Member 'RadarChart_SetLegend::Show' has a wrong offset!");
//static_assert(offsetof(RadarChart_SetLegend, Position) == 0x000001, "Member 'RadarChart_SetLegend::Position' has a wrong offset!");
//static_assert(offsetof(RadarChart_SetLegend, Orient) == 0x000002, "Member 'RadarChart_SetLegend::Orient' has a wrong offset!");
//static_assert(offsetof(RadarChart_SetLegend, Color) == 0x000004, "Member 'RadarChart_SetLegend::Color' has a wrong offset!");
//static_assert(offsetof(RadarChart_SetLegend, FontSize) == 0x000014, "Member 'RadarChart_SetLegend::FontSize' has a wrong offset!");

// Function SimpleCharts.RadarChart.SetRadar
// 0x0020 (0x0020 - 0x0000)
struct RadarChart_SetRadar final
{
public:
	struct FRadar                                 RadarData;                                         // 0x0000(0x0020)(Parm, NativeAccessSpecifierPublic)
};
//static_assert(alignof(RadarChart_SetRadar) == 0x000008, "Wrong alignment on RadarChart_SetRadar");
//static_assert(sizeof(RadarChart_SetRadar) == 0x000020, "Wrong size on RadarChart_SetRadar");
//static_assert(offsetof(RadarChart_SetRadar, RadarData) == 0x000000, "Member 'RadarChart_SetRadar::RadarData' has a wrong offset!");

// Function SimpleCharts.RadarChart.SetSeries
// 0x0060 (0x0060 - 0x0000)
struct RadarChart_SetSeries final
{
public:
	struct FRadarSeries                           SeriesData;                                        // 0x0000(0x0060)(Parm, NativeAccessSpecifierPublic)
};
//static_assert(alignof(RadarChart_SetSeries) == 0x000010, "Wrong alignment on RadarChart_SetSeries");
//static_assert(sizeof(RadarChart_SetSeries) == 0x000060, "Wrong size on RadarChart_SetSeries");
//static_assert(offsetof(RadarChart_SetSeries, SeriesData) == 0x000000, "Member 'RadarChart_SetSeries::SeriesData' has a wrong offset!");

// Function SimpleCharts.SankeyChart.SetLegend
// 0x0018 (0x0018 - 0x0000)
struct SankeyChart_SetLegend final
{
public:
	bool                                          Show;                                              // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EPosition                                     Position;                                          // 0x0001(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EOrient                                       Orient;                                            // 0x0002(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_3[0x1];                                        // 0x0003(0x0001)(Fixing Size After Last Property [ Dumper-7 ])
	struct FLinearColor                           Color;                                             // 0x0004(0x0010)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         FontSize;                                          // 0x0014(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
//static_assert(alignof(SankeyChart_SetLegend) == 0x000004, "Wrong alignment on SankeyChart_SetLegend");
//static_assert(sizeof(SankeyChart_SetLegend) == 0x000018, "Wrong size on SankeyChart_SetLegend");
//static_assert(offsetof(SankeyChart_SetLegend, Show) == 0x000000, "Member 'SankeyChart_SetLegend::Show' has a wrong offset!");
//static_assert(offsetof(SankeyChart_SetLegend, Position) == 0x000001, "Member 'SankeyChart_SetLegend::Position' has a wrong offset!");
//static_assert(offsetof(SankeyChart_SetLegend, Orient) == 0x000002, "Member 'SankeyChart_SetLegend::Orient' has a wrong offset!");
//static_assert(offsetof(SankeyChart_SetLegend, Color) == 0x000004, "Member 'SankeyChart_SetLegend::Color' has a wrong offset!");
//static_assert(offsetof(SankeyChart_SetLegend, FontSize) == 0x000014, "Member 'SankeyChart_SetLegend::FontSize' has a wrong offset!");

// Function SimpleCharts.SankeyChart.SetSeries
// 0x0070 (0x0070 - 0x0000)
struct SankeyChart_SetSeries final
{
public:
	struct FSankeySeries                          SeriesData;                                        // 0x0000(0x0070)(Parm, NativeAccessSpecifierPublic)
};
//static_assert(alignof(SankeyChart_SetSeries) == 0x000010, "Wrong alignment on SankeyChart_SetSeries");
//static_assert(sizeof(SankeyChart_SetSeries) == 0x000070, "Wrong size on SankeyChart_SetSeries");
//static_assert(offsetof(SankeyChart_SetSeries, SeriesData) == 0x000000, "Member 'SankeyChart_SetSeries::SeriesData' has a wrong offset!");

// Function SimpleCharts.ScatterChart.SetLegend
// 0x0018 (0x0018 - 0x0000)
struct ScatterChart_SetLegend final
{
public:
	bool                                          Show;                                              // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EPosition                                     Position;                                          // 0x0001(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EOrient                                       Orient;                                            // 0x0002(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_3[0x1];                                        // 0x0003(0x0001)(Fixing Size After Last Property [ Dumper-7 ])
	struct FLinearColor                           Color;                                             // 0x0004(0x0010)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         FontSize;                                          // 0x0014(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
//static_assert(alignof(ScatterChart_SetLegend) == 0x000004, "Wrong alignment on ScatterChart_SetLegend");
//static_assert(sizeof(ScatterChart_SetLegend) == 0x000018, "Wrong size on ScatterChart_SetLegend");
//static_assert(offsetof(ScatterChart_SetLegend, Show) == 0x000000, "Member 'ScatterChart_SetLegend::Show' has a wrong offset!");
//static_assert(offsetof(ScatterChart_SetLegend, Position) == 0x000001, "Member 'ScatterChart_SetLegend::Position' has a wrong offset!");
//static_assert(offsetof(ScatterChart_SetLegend, Orient) == 0x000002, "Member 'ScatterChart_SetLegend::Orient' has a wrong offset!");
//static_assert(offsetof(ScatterChart_SetLegend, Color) == 0x000004, "Member 'ScatterChart_SetLegend::Color' has a wrong offset!");
//static_assert(offsetof(ScatterChart_SetLegend, FontSize) == 0x000014, "Member 'ScatterChart_SetLegend::FontSize' has a wrong offset!");

// Function SimpleCharts.ScatterChart.SetSeries
// 0x0010 (0x0010 - 0x0000)
struct ScatterChart_SetSeries final
{
public:
	TArray<struct FScatterSeries>                 SeriesData;                                        // 0x0000(0x0010)(Parm, ZeroConstructor, NativeAccessSpecifierPublic)
};
//static_assert(alignof(ScatterChart_SetSeries) == 0x000008, "Wrong alignment on ScatterChart_SetSeries");
//static_assert(sizeof(ScatterChart_SetSeries) == 0x000010, "Wrong size on ScatterChart_SetSeries");
//static_assert(offsetof(ScatterChart_SetSeries, SeriesData) == 0x000000, "Member 'ScatterChart_SetSeries::SeriesData' has a wrong offset!");

}

