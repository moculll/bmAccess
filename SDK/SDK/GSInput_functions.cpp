#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: GSInput

#include "Basic.hpp"

#include "GSInput_classes.hpp"
#include "GSInput_parameters.hpp"


namespace SDK
{

// Function GSInput.GSE_InputFuncLib.AddInputMappingContext
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// class APlayerController*                PlayerController                                       (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class UInputMappingContext*             InputMappingContext                                    (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32                                   Priority                                               (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    bIgnoreAllPressedKeysUntilRelease                      (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    bForceImmediately                                      (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UGSE_InputFuncLib::AddInputMappingContext(class APlayerController* PlayerController, const class UInputMappingContext* InputMappingContext, int32 Priority, bool bIgnoreAllPressedKeysUntilRelease, bool bForceImmediately)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("GSE_InputFuncLib", "AddInputMappingContext");

	Params::GSE_InputFuncLib_AddInputMappingContext Parms{};

	Parms.PlayerController = PlayerController;
	Parms.InputMappingContext = InputMappingContext;
	Parms.Priority = Priority;
	Parms.bIgnoreAllPressedKeysUntilRelease = bIgnoreAllPressedKeysUntilRelease;
	Parms.bForceImmediately = bForceImmediately;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function GSInput.GSE_InputFuncLib.AddPlayerMappedKey
// (Final, Native, Static, Public, HasOutParams, BlueprintCallable)
// Parameters:
// class APlayerController*                PlayerController                                       (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class FName                             MappingName                                            (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FKey                             NewKey                                                 (ConstParm, Parm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FModifyContextOptions            Options                                                (ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)

void UGSE_InputFuncLib::AddPlayerMappedKey(class APlayerController* PlayerController, const class FName MappingName, const struct FKey& NewKey, const struct FModifyContextOptions& Options)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("GSE_InputFuncLib", "AddPlayerMappedKey");

	Params::GSE_InputFuncLib_AddPlayerMappedKey Parms{};

	Parms.PlayerController = PlayerController;
	Parms.MappingName = MappingName;
	Parms.NewKey = std::move(NewKey);
	Parms.Options = std::move(Options);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function GSInput.GSE_InputFuncLib.BindAction
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// class UGSInputComponent*                InputComponent                                         (Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class UInputAction*                     InputAction                                            (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// ETriggerEvent                           TriggerEvent                                           (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UGSE_InputFuncLib::BindAction(class UGSInputComponent* InputComponent, const class UInputAction* InputAction, ETriggerEvent TriggerEvent)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("GSE_InputFuncLib", "BindAction");

	Params::GSE_InputFuncLib_BindAction Parms{};

	Parms.InputComponent = InputComponent;
	Parms.InputAction = InputAction;
	Parms.TriggerEvent = TriggerEvent;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function GSInput.GSE_InputFuncLib.ClearAllInputMappingContext
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// class APlayerController*                PlayerController                                       (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UGSE_InputFuncLib::ClearAllInputMappingContext(class APlayerController* PlayerController)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("GSE_InputFuncLib", "ClearAllInputMappingContext");

	Params::GSE_InputFuncLib_ClearAllInputMappingContext Parms{};

	Parms.PlayerController = PlayerController;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function GSInput.GSE_InputFuncLib.CustomizeInputMappingContext
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// class UInputMappingContext*             MappingContext                                         (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class FName                             MappableName                                           (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class FName                             KeyName                                                (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UGSE_InputFuncLib::CustomizeInputMappingContext(class UInputMappingContext* MappingContext, class FName MappableName, class FName KeyName)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("GSE_InputFuncLib", "CustomizeInputMappingContext");

	Params::GSE_InputFuncLib_CustomizeInputMappingContext Parms{};

	Parms.MappingContext = MappingContext;
	Parms.MappableName = MappableName;
	Parms.KeyName = KeyName;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function GSInput.GSE_InputFuncLib.FindKeyByName
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// class FName                             KeyName                                                (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FKey                             ReturnValue                                            (Parm, OutParm, ReturnParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)

struct FKey UGSE_InputFuncLib::FindKeyByName(class FName KeyName)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("GSE_InputFuncLib", "FindKeyByName");

	Params::GSE_InputFuncLib_FindKeyByName Parms{};

	Parms.KeyName = KeyName;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function GSInput.GSE_InputFuncLib.FlushPressedInput
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// class APlayerController*                PlayerController                                       (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UGSE_InputFuncLib::FlushPressedInput(class APlayerController* PlayerController)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("GSE_InputFuncLib", "FlushPressedInput");

	Params::GSE_InputFuncLib_FlushPressedInput Parms{};

	Parms.PlayerController = PlayerController;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function GSInput.GSE_InputFuncLib.GetActionNamesFromInputMappingContext
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// class UInputMappingContext*             InputMappingContext                                    (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// TArray<class FString>                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, NativeAccessSpecifierPublic)

TArray<class FString> UGSE_InputFuncLib::GetActionNamesFromInputMappingContext(class UInputMappingContext* InputMappingContext)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("GSE_InputFuncLib", "GetActionNamesFromInputMappingContext");

	Params::GSE_InputFuncLib_GetActionNamesFromInputMappingContext Parms{};

	Parms.InputMappingContext = InputMappingContext;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function GSInput.GSE_InputFuncLib.GetChordInputAction
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// class UInputMappingContext*             InputMappingContext                                    (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// TArray<class UInputAction*>             ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, NativeAccessSpecifierPublic)

TArray<class UInputAction*> UGSE_InputFuncLib::GetChordInputAction(const class UInputMappingContext* InputMappingContext)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("GSE_InputFuncLib", "GetChordInputAction");

	Params::GSE_InputFuncLib_GetChordInputAction Parms{};

	Parms.InputMappingContext = InputMappingContext;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function GSInput.GSE_InputFuncLib.GetConflictChordInputAction
// (Final, Native, Static, Public, HasOutParams, BlueprintCallable)
// Parameters:
// class UInputAction*                     PrimaryChordAction                                     (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// TArray<class UInputMappingContext*>     Contexts                                               (ConstParm, Parm, ZeroConstructor, NativeAccessSpecifierPublic)
// TArray<class UInputAction*>             PrimaryConflictActions                                 (Parm, OutParm, ZeroConstructor, NativeAccessSpecifierPublic)
// TArray<class UInputAction*>             SecondaryConflictActions                               (Parm, OutParm, ZeroConstructor, NativeAccessSpecifierPublic)

void UGSE_InputFuncLib::GetConflictChordInputAction(const class UInputAction* PrimaryChordAction, const TArray<class UInputMappingContext*>& Contexts, TArray<class UInputAction*>* PrimaryConflictActions, TArray<class UInputAction*>* SecondaryConflictActions)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("GSE_InputFuncLib", "GetConflictChordInputAction");

	Params::GSE_InputFuncLib_GetConflictChordInputAction Parms{};

	Parms.PrimaryChordAction = PrimaryChordAction;
	Parms.Contexts = std::move(Contexts);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	if (PrimaryConflictActions != nullptr)
		*PrimaryConflictActions = std::move(Parms.PrimaryConflictActions);

	if (SecondaryConflictActions != nullptr)
		*SecondaryConflictActions = std::move(Parms.SecondaryConflictActions);
}


// Function GSInput.GSE_InputFuncLib.GetDebugEventAccumulatorThisTick
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// class APlayerController*                PlayerController                                       (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class UInputAction*                     Action                                                 (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    IsReleasedEvent                                        (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

int32 UGSE_InputFuncLib::GetDebugEventAccumulatorThisTick(class APlayerController* PlayerController, const class UInputAction* Action, bool IsReleasedEvent)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("GSE_InputFuncLib", "GetDebugEventAccumulatorThisTick");

	Params::GSE_InputFuncLib_GetDebugEventAccumulatorThisTick Parms{};

	Parms.PlayerController = PlayerController;
	Parms.Action = Action;
	Parms.IsReleasedEvent = IsReleasedEvent;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function GSInput.GSE_InputFuncLib.GetGamepadControllerName
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// int32                                   ControllerId                                           (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class FString                           ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class FString UGSE_InputFuncLib::GetGamepadControllerName(int32 ControllerId)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("GSE_InputFuncLib", "GetGamepadControllerName");

	Params::GSE_InputFuncLib_GetGamepadControllerName Parms{};

	Parms.ControllerId = ControllerId;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function GSInput.GSE_InputFuncLib.GetGamepadDeadZoneThreshold
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// float                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

float UGSE_InputFuncLib::GetGamepadDeadZoneThreshold()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("GSE_InputFuncLib", "GetGamepadDeadZoneThreshold");

	Params::GSE_InputFuncLib_GetGamepadDeadZoneThreshold Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function GSInput.GSE_InputFuncLib.GetInputActionValue
// (Final, Native, Static, Public, HasDefaults, BlueprintCallable)
// Parameters:
// class APlayerController*                PlayerController                                       (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class UInputAction*                     Action                                                 (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FVector                          ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

struct FVector UGSE_InputFuncLib::GetInputActionValue(class APlayerController* PlayerController, const class UInputAction* Action)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("GSE_InputFuncLib", "GetInputActionValue");

	Params::GSE_InputFuncLib_GetInputActionValue Parms{};

	Parms.PlayerController = PlayerController;
	Parms.Action = Action;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function GSInput.GSE_InputFuncLib.GetInputDeviceTypes
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// TArray<EGSInputDeviceType>              ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, NativeAccessSpecifierPublic)

TArray<EGSInputDeviceType> UGSE_InputFuncLib::GetInputDeviceTypes()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("GSE_InputFuncLib", "GetInputDeviceTypes");

	Params::GSE_InputFuncLib_GetInputDeviceTypes Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function GSInput.GSE_InputFuncLib.GetInputPreProc
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// class UObject*                          WorldContext                                           (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class UGSInputPreProc*                  ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class UGSInputPreProc* UGSE_InputFuncLib::GetInputPreProc(const class UObject* WorldContext)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("GSE_InputFuncLib", "GetInputPreProc");

	Params::GSE_InputFuncLib_GetInputPreProc Parms{};

	Parms.WorldContext = WorldContext;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function GSInput.GSE_InputFuncLib.GetInputSettingPreProc
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// class UObject*                          WorldContext                                           (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class UGSInputSettingPreProc*           ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class UGSInputSettingPreProc* UGSE_InputFuncLib::GetInputSettingPreProc(const class UObject* WorldContext)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("GSE_InputFuncLib", "GetInputSettingPreProc");

	Params::GSE_InputFuncLib_GetInputSettingPreProc Parms{};

	Parms.WorldContext = WorldContext;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function GSInput.GSE_InputFuncLib.GetKeyByAnalogInputEvent
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// struct FAnalogInputEvent                AnalogInputEvent                                       (ConstParm, Parm, NativeAccessSpecifierPublic)
// class FName                             ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class FName UGSE_InputFuncLib::GetKeyByAnalogInputEvent(const struct FAnalogInputEvent& AnalogInputEvent)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("GSE_InputFuncLib", "GetKeyByAnalogInputEvent");

	Params::GSE_InputFuncLib_GetKeyByAnalogInputEvent Parms{};

	Parms.AnalogInputEvent = std::move(AnalogInputEvent);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function GSInput.GSE_InputFuncLib.GetKeyByKeyEvent
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// struct FKeyEvent                        KeyEvent                                               (ConstParm, Parm, NativeAccessSpecifierPublic)
// class FName                             ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class FName UGSE_InputFuncLib::GetKeyByKeyEvent(const struct FKeyEvent& KeyEvent)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("GSE_InputFuncLib", "GetKeyByKeyEvent");

	Params::GSE_InputFuncLib_GetKeyByKeyEvent Parms{};

	Parms.KeyEvent = std::move(KeyEvent);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function GSInput.GSE_InputFuncLib.GetKeyByPointerEvent
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// struct FPointerEvent                    PointerEvent                                           (ConstParm, Parm, NativeAccessSpecifierPublic)
// class FName                             ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class FName UGSE_InputFuncLib::GetKeyByPointerEvent(const struct FPointerEvent& PointerEvent)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("GSE_InputFuncLib", "GetKeyByPointerEvent");

	Params::GSE_InputFuncLib_GetKeyByPointerEvent Parms{};

	Parms.PointerEvent = std::move(PointerEvent);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function GSInput.GSE_InputFuncLib.GetLastInputType
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// class UObject*                          WorldContext                                           (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// EGSInputType                            ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

EGSInputType UGSE_InputFuncLib::GetLastInputType(const class UObject* WorldContext)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("GSE_InputFuncLib", "GetLastInputType");

	Params::GSE_InputFuncLib_GetLastInputType Parms{};

	Parms.WorldContext = WorldContext;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function GSInput.GSE_InputFuncLib.GetMappableKey
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// class UInputMappingContext*             MappingContext                                         (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// TMap<class FName, struct FKey>          ReturnValue                                            (Parm, OutParm, ReturnParm, NativeAccessSpecifierPublic)

TMap<class FName, struct FKey> UGSE_InputFuncLib::GetMappableKey(const class UInputMappingContext* MappingContext)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("GSE_InputFuncLib", "GetMappableKey");

	Params::GSE_InputFuncLib_GetMappableKey Parms{};

	Parms.MappingContext = MappingContext;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function GSInput.GSE_InputFuncLib.GetMappingsInfo
// (Final, Native, Static, Public, HasOutParams, BlueprintCallable)
// Parameters:
// class UInputMappingContext*             MappingContext                                         (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// TArray<class UInputAction*>             Actions                                                (Parm, OutParm, ZeroConstructor, NativeAccessSpecifierPublic)
// TArray<struct FKey>                     Keys                                                   (Parm, OutParm, ZeroConstructor, NativeAccessSpecifierPublic)
// TArray<class UInputAction*>             ChordActions                                           (Parm, OutParm, ZeroConstructor, NativeAccessSpecifierPublic)

void UGSE_InputFuncLib::GetMappingsInfo(const class UInputMappingContext* MappingContext, TArray<class UInputAction*>* Actions, TArray<struct FKey>* Keys, TArray<class UInputAction*>* ChordActions)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("GSE_InputFuncLib", "GetMappingsInfo");

	Params::GSE_InputFuncLib_GetMappingsInfo Parms{};

	Parms.MappingContext = MappingContext;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	if (Actions != nullptr)
		*Actions = std::move(Parms.Actions);

	if (Keys != nullptr)
		*Keys = std::move(Parms.Keys);

	if (ChordActions != nullptr)
		*ChordActions = std::move(Parms.ChordActions);
}


// Function GSInput.GSE_InputFuncLib.GetProductStringList
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// TArray<class FString>                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, NativeAccessSpecifierPublic)

TArray<class FString> UGSE_InputFuncLib::GetProductStringList()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("GSE_InputFuncLib", "GetProductStringList");

	Params::GSE_InputFuncLib_GetProductStringList Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function GSInput.GSE_InputFuncLib.IsAppActive
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UGSE_InputFuncLib::IsAppActive()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("GSE_InputFuncLib", "IsAppActive");

	Params::GSE_InputFuncLib_IsAppActive Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function GSInput.GSE_InputFuncLib.IsConsoleActive
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// class UObject*                          WorldContext                                           (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UGSE_InputFuncLib::IsConsoleActive(const class UObject* WorldContext)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("GSE_InputFuncLib", "IsConsoleActive");

	Params::GSE_InputFuncLib_IsConsoleActive Parms{};

	Parms.WorldContext = WorldContext;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function GSInput.GSE_InputFuncLib.QueryKeysByInputAction
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// class UInputMappingContext*             MappingContext                                         (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class UInputAction*                     Action                                                 (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// TArray<struct FKey>                     ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, NativeAccessSpecifierPublic)

TArray<struct FKey> UGSE_InputFuncLib::QueryKeysByInputAction(const class UInputMappingContext* MappingContext, const class UInputAction* Action)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("GSE_InputFuncLib", "QueryKeysByInputAction");

	Params::GSE_InputFuncLib_QueryKeysByInputAction Parms{};

	Parms.MappingContext = MappingContext;
	Parms.Action = Action;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function GSInput.GSE_InputFuncLib.QueryKeysMappedToAction
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// class APlayerController*                PlayerController                                       (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class UInputAction*                     Action                                                 (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// TArray<struct FKey>                     ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, NativeAccessSpecifierPublic)

TArray<struct FKey> UGSE_InputFuncLib::QueryKeysMappedToAction(class APlayerController* PlayerController, const class UInputAction* Action)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("GSE_InputFuncLib", "QueryKeysMappedToAction");

	Params::GSE_InputFuncLib_QueryKeysMappedToAction Parms{};

	Parms.PlayerController = PlayerController;
	Parms.Action = Action;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function GSInput.GSE_InputFuncLib.RegisterGSInputProc
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// class UObject*                          WorldContext                                           (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// EGSInputProcOrder                       Order                                                  (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UGSE_InputFuncLib::RegisterGSInputProc(const class UObject* WorldContext, EGSInputProcOrder Order)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("GSE_InputFuncLib", "RegisterGSInputProc");

	Params::GSE_InputFuncLib_RegisterGSInputProc Parms{};

	Parms.WorldContext = WorldContext;
	Parms.Order = Order;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function GSInput.GSE_InputFuncLib.RegisterInputTargetBinding
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// class UGSInputTargetBinding*            InputTargetBindingObj                                  (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UGSE_InputFuncLib::RegisterInputTargetBinding(class UGSInputTargetBinding* InputTargetBindingObj)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("GSE_InputFuncLib", "RegisterInputTargetBinding");

	Params::GSE_InputFuncLib_RegisterInputTargetBinding Parms{};

	Parms.InputTargetBindingObj = InputTargetBindingObj;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function GSInput.GSE_InputFuncLib.RemoveInputMappingContext
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// class APlayerController*                PlayerController                                       (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class UInputMappingContext*             InputMappingContext                                    (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    bIgnoreAllPressedKeysUntilRelease                      (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    bForceImmediately                                      (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UGSE_InputFuncLib::RemoveInputMappingContext(class APlayerController* PlayerController, const class UInputMappingContext* InputMappingContext, bool bIgnoreAllPressedKeysUntilRelease, bool bForceImmediately)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("GSE_InputFuncLib", "RemoveInputMappingContext");

	Params::GSE_InputFuncLib_RemoveInputMappingContext Parms{};

	Parms.PlayerController = PlayerController;
	Parms.InputMappingContext = InputMappingContext;
	Parms.bIgnoreAllPressedKeysUntilRelease = bIgnoreAllPressedKeysUntilRelease;
	Parms.bForceImmediately = bForceImmediately;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function GSInput.GSE_InputFuncLib.RequestRebuildControlMappings
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// class APlayerController*                PlayerController                                       (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    bForceImmediately                                      (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    bIgnoreAllPressedKeysUntilRelease                      (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UGSE_InputFuncLib::RequestRebuildControlMappings(const class APlayerController* PlayerController, bool bForceImmediately, bool bIgnoreAllPressedKeysUntilRelease)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("GSE_InputFuncLib", "RequestRebuildControlMappings");

	Params::GSE_InputFuncLib_RequestRebuildControlMappings Parms{};

	Parms.PlayerController = PlayerController;
	Parms.bForceImmediately = bForceImmediately;
	Parms.bIgnoreAllPressedKeysUntilRelease = bIgnoreAllPressedKeysUntilRelease;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function GSInput.GSE_InputFuncLib.SetCursorVisibility
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// bool                                    bDrawCursor                                            (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UGSE_InputFuncLib::SetCursorVisibility(bool bDrawCursor)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("GSE_InputFuncLib", "SetCursorVisibility");

	Params::GSE_InputFuncLib_SetCursorVisibility Parms{};

	Parms.bDrawCursor = bDrawCursor;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function GSInput.GSE_InputFuncLib.SetGameOnly
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// class APlayerController*                PlayerController                                       (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UGSE_InputFuncLib::SetGameOnly(class APlayerController* PlayerController)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("GSE_InputFuncLib", "SetGameOnly");

	Params::GSE_InputFuncLib_SetGameOnly Parms{};

	Parms.PlayerController = PlayerController;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function GSInput.GSE_InputFuncLib.SetIgnoreAllButtonKeyInput
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// class UObject*                          WorldContext                                           (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    IsIgnore                                               (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UGSE_InputFuncLib::SetIgnoreAllButtonKeyInput(const class UObject* WorldContext, bool IsIgnore)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("GSE_InputFuncLib", "SetIgnoreAllButtonKeyInput");

	Params::GSE_InputFuncLib_SetIgnoreAllButtonKeyInput Parms{};

	Parms.WorldContext = WorldContext;
	Parms.IsIgnore = IsIgnore;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function GSInput.GSE_InputFuncLib.SetMouseCursorPosition
// (Final, Native, Static, Public, HasDefaults, BlueprintCallable)
// Parameters:
// struct FVector2D                        Position                                               (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UGSE_InputFuncLib::SetMouseCursorPosition(const struct FVector2D& Position)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("GSE_InputFuncLib", "SetMouseCursorPosition");

	Params::GSE_InputFuncLib_SetMouseCursorPosition Parms{};

	Parms.Position = std::move(Position);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function GSInput.GSE_InputFuncLib.SetUIOnly
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// class APlayerController*                PlayerController                                       (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    bNeedMouseCapture                                      (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UGSE_InputFuncLib::SetUIOnly(class APlayerController* PlayerController, bool bNeedMouseCapture)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("GSE_InputFuncLib", "SetUIOnly");

	Params::GSE_InputFuncLib_SetUIOnly Parms{};

	Parms.PlayerController = PlayerController;
	Parms.bNeedMouseCapture = bNeedMouseCapture;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function GSInput.GSE_InputFuncLib.TryToSetContextNewPriority
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// class APlayerController*                PlayerController                                       (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class UInputMappingContext*             Context                                                (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32                                   NewPriority                                            (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UGSE_InputFuncLib::TryToSetContextNewPriority(class APlayerController* PlayerController, const class UInputMappingContext* Context, int32 NewPriority)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("GSE_InputFuncLib", "TryToSetContextNewPriority");

	Params::GSE_InputFuncLib_TryToSetContextNewPriority Parms{};

	Parms.PlayerController = PlayerController;
	Parms.Context = Context;
	Parms.NewPriority = NewPriority;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function GSInput.GSE_InputFuncLib.UnRegisterGSInputProc
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// class UObject*                          WorldContext                                           (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// EGSInputProcOrder                       Order                                                  (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UGSE_InputFuncLib::UnRegisterGSInputProc(const class UObject* WorldContext, EGSInputProcOrder Order)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("GSE_InputFuncLib", "UnRegisterGSInputProc");

	Params::GSE_InputFuncLib_UnRegisterGSInputProc Parms{};

	Parms.WorldContext = WorldContext;
	Parms.Order = Order;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function GSInput.GSE_InputFuncLib.UnRegisterInputTargetBinding
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// class UGSInputTargetBinding*            InputTargetBindingObj                                  (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UGSE_InputFuncLib::UnRegisterInputTargetBinding(class UGSInputTargetBinding* InputTargetBindingObj)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("GSE_InputFuncLib", "UnRegisterInputTargetBinding");

	Params::GSE_InputFuncLib_UnRegisterInputTargetBinding Parms{};

	Parms.InputTargetBindingObj = InputTargetBindingObj;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function GSInput.GSE_InputFuncLib.UpdateAllInputIcon
// (Final, Native, Static, Public, BlueprintCallable)

void UGSE_InputFuncLib::UpdateAllInputIcon()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("GSE_InputFuncLib", "UpdateAllInputIcon");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function GSInput.GSInputDisplayWidget.SetAxisValue
// (BlueprintCosmetic, Native, Public, BlueprintCallable)
// Parameters:
// struct FKey                             InKey                                                  (Parm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   InAxisValue                                            (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UGSInputDisplayWidget::SetAxisValue(const struct FKey& InKey, float InAxisValue)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GSInputDisplayWidget", "SetAxisValue");

	Params::GSInputDisplayWidget_SetAxisValue Parms{};

	Parms.InKey = std::move(InKey);
	Parms.InAxisValue = InAxisValue;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function GSInput.GSInputDisplayWidget.SetIsPress
// (BlueprintCosmetic, Native, Public, BlueprintCallable)
// Parameters:
// bool                                    InIsPress                                              (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UGSInputDisplayWidget::SetIsPress(bool InIsPress)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GSInputDisplayWidget", "SetIsPress");

	Params::GSInputDisplayWidget_SetIsPress Parms{};

	Parms.InIsPress = InIsPress;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function GSInput.GSInputDisplayWidget.SetMousePos
// (BlueprintCosmetic, Native, Public, HasDefaults, BlueprintCallable)
// Parameters:
// struct FVector2D                        InMousePos                                             (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UGSInputDisplayWidget::SetMousePos(const struct FVector2D& InMousePos)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GSInputDisplayWidget", "SetMousePos");

	Params::GSInputDisplayWidget_SetMousePos Parms{};

	Parms.InMousePos = std::move(InMousePos);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function GSInput.GSInputActionIcon.BeginHold
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// float                                   InTotalTime                                            (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UGSInputActionIcon::BeginHold(const float InTotalTime)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GSInputActionIcon", "BeginHold");

	Params::GSInputActionIcon_BeginHold Parms{};

	Parms.InTotalTime = InTotalTime;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function GSInput.GSInputActionIcon.OpenPercentBg
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// bool                                    bOpen                                                  (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UGSInputActionIcon::OpenPercentBg(bool bOpen)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GSInputActionIcon", "OpenPercentBg");

	Params::GSInputActionIcon_OpenPercentBg Parms{};

	Parms.bOpen = bOpen;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function GSInput.GSInputActionIcon.Reset
// (Final, Native, Public, BlueprintCallable)

void UGSInputActionIcon::Reset()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GSInputActionIcon", "Reset");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function GSInput.GSInputActionIcon.SetInputAction
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// class UInputAction*                     InputAction_0                                          (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UGSInputActionIcon::SetInputAction(class UInputAction* InputAction_0)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GSInputActionIcon", "SetInputAction");

	Params::GSInputActionIcon_SetInputAction Parms{};

	Parms.InputAction_0 = InputAction_0;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function GSInput.GSInputActionIcon.SetPercent
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// float                                   InPercent                                              (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UGSInputActionIcon::SetPercent(const float InPercent)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GSInputActionIcon", "SetPercent");

	Params::GSInputActionIcon_SetPercent Parms{};

	Parms.InPercent = InPercent;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function GSInput.GSInputActionIcon.StopHold
// (Final, Native, Public, BlueprintCallable)

void UGSInputActionIcon::StopHold()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GSInputActionIcon", "StopHold");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function GSInput.GSInputDisplayUI.OnInputAxisChange
// (BlueprintCosmetic, Native, Event, Public, BlueprintEvent)
// Parameters:
// struct FKey                             InKey                                                  (Parm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   InAxisValue                                            (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UGSInputDisplayUI::OnInputAxisChange(const struct FKey& InKey, float InAxisValue)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GSInputDisplayUI", "OnInputAxisChange");

	Params::GSInputDisplayUI_OnInputAxisChange Parms{};

	Parms.InKey = std::move(InKey);
	Parms.InAxisValue = InAxisValue;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function GSInput.GSInputDisplayUI.OnInputKeyDown
// (BlueprintCosmetic, Native, Event, Public, BlueprintEvent)
// Parameters:
// struct FKey                             InKey                                                  (Parm, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UGSInputDisplayUI::OnInputKeyDown(const struct FKey& InKey)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GSInputDisplayUI", "OnInputKeyDown");

	Params::GSInputDisplayUI_OnInputKeyDown Parms{};

	Parms.InKey = std::move(InKey);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function GSInput.GSInputDisplayUI.OnInputKeyUp
// (BlueprintCosmetic, Native, Event, Public, BlueprintEvent)
// Parameters:
// struct FKey                             InKey                                                  (Parm, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UGSInputDisplayUI::OnInputKeyUp(const struct FKey& InKey)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GSInputDisplayUI", "OnInputKeyUp");

	Params::GSInputDisplayUI_OnInputKeyUp Parms{};

	Parms.InKey = std::move(InKey);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function GSInput.GSInputDisplayUI.OnInputMouseButtonDoubleClick
// (BlueprintCosmetic, Native, Event, Public, BlueprintEvent)
// Parameters:
// struct FKey                             InKey                                                  (Parm, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UGSInputDisplayUI::OnInputMouseButtonDoubleClick(const struct FKey& InKey)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GSInputDisplayUI", "OnInputMouseButtonDoubleClick");

	Params::GSInputDisplayUI_OnInputMouseButtonDoubleClick Parms{};

	Parms.InKey = std::move(InKey);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function GSInput.GSInputDisplayUI.OnInputMouseButtonDown
// (BlueprintCosmetic, Native, Event, Public, BlueprintEvent)
// Parameters:
// struct FKey                             InKey                                                  (Parm, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UGSInputDisplayUI::OnInputMouseButtonDown(const struct FKey& InKey)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GSInputDisplayUI", "OnInputMouseButtonDown");

	Params::GSInputDisplayUI_OnInputMouseButtonDown Parms{};

	Parms.InKey = std::move(InKey);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function GSInput.GSInputDisplayUI.OnInputMouseButtonUp
// (BlueprintCosmetic, Native, Event, Public, BlueprintEvent)
// Parameters:
// struct FKey                             InKey                                                  (Parm, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UGSInputDisplayUI::OnInputMouseButtonUp(const struct FKey& InKey)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GSInputDisplayUI", "OnInputMouseButtonUp");

	Params::GSInputDisplayUI_OnInputMouseButtonUp Parms{};

	Parms.InKey = std::move(InKey);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function GSInput.GSInputDisplayUI.OnInputMouseMove
// (BlueprintCosmetic, Native, Event, Public, HasDefaults, BlueprintEvent)
// Parameters:
// struct FVector2D                        InMousePos                                             (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UGSInputDisplayUI::OnInputMouseMove(const struct FVector2D& InMousePos)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GSInputDisplayUI", "OnInputMouseMove");

	Params::GSInputDisplayUI_OnInputMouseMove Parms{};

	Parms.InMousePos = std::move(InMousePos);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function GSInput.GSInputDisplayUI.OnInputMouseWheelOrGesture
// (BlueprintCosmetic, Native, Event, Public, BlueprintEvent)
// Parameters:
// float                                   InWheelDelta                                           (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UGSInputDisplayUI::OnInputMouseWheelOrGesture(float InWheelDelta)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GSInputDisplayUI", "OnInputMouseWheelOrGesture");

	Params::GSInputDisplayUI_OnInputMouseWheelOrGesture Parms{};

	Parms.InWheelDelta = InWheelDelta;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function GSInput.GSInputDisplayUI.ResetSetting
// (Final, Native, Public, BlueprintCallable)

void UGSInputDisplayUI::ResetSetting()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GSInputDisplayUI", "ResetSetting");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function GSInput.GSInputDisplayUI.SetIsShow
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// bool                                    IsShow                                                 (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UGSInputDisplayUI::SetIsShow(bool IsShow)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GSInputDisplayUI", "SetIsShow");

	Params::GSInputDisplayUI_SetIsShow Parms{};

	Parms.IsShow = IsShow;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function GSInput.GSInputTargetBinding.ActionListener
// (Final, Native, Public, HasOutParams, BlueprintCallable)
// Parameters:
// struct FInputActionInstance             ActionInstance                                         (ConstParm, Parm, OutParm, ReferenceParm, ContainsInstancedReference, NativeAccessSpecifierPublic)

void UGSInputTargetBinding::ActionListener(const struct FInputActionInstance& ActionInstance)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GSInputTargetBinding", "ActionListener");

	Params::GSInputTargetBinding_ActionListener Parms{};

	Parms.ActionInstance = std::move(ActionInstance);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function GSInput.GSInputTargetBinding.CanceledActionListener
// (Final, Native, Public, HasOutParams, BlueprintCallable)
// Parameters:
// struct FInputActionInstance             ActionInstance                                         (ConstParm, Parm, OutParm, ReferenceParm, ContainsInstancedReference, NativeAccessSpecifierPublic)

void UGSInputTargetBinding::CanceledActionListener(const struct FInputActionInstance& ActionInstance)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GSInputTargetBinding", "CanceledActionListener");

	Params::GSInputTargetBinding_CanceledActionListener Parms{};

	Parms.ActionInstance = std::move(ActionInstance);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function GSInput.GSInputTargetBinding.CompletedActionListener
// (Final, Native, Public, HasOutParams, BlueprintCallable)
// Parameters:
// struct FInputActionInstance             ActionInstance                                         (ConstParm, Parm, OutParm, ReferenceParm, ContainsInstancedReference, NativeAccessSpecifierPublic)

void UGSInputTargetBinding::CompletedActionListener(const struct FInputActionInstance& ActionInstance)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GSInputTargetBinding", "CompletedActionListener");

	Params::GSInputTargetBinding_CompletedActionListener Parms{};

	Parms.ActionInstance = std::move(ActionInstance);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function GSInput.GSInputTargetBinding.FetchDebugInfo
// (Event, Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// TArray<class FString>                   DebugLines                                             (Parm, OutParm, ZeroConstructor, NativeAccessSpecifierPublic)
// TArray<struct FColor>                   DebugColors                                            (Parm, OutParm, ZeroConstructor, NativeAccessSpecifierPublic)

void UGSInputTargetBinding::FetchDebugInfo(TArray<class FString>* DebugLines, TArray<struct FColor>* DebugColors)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GSInputTargetBinding", "FetchDebugInfo");

	Params::GSInputTargetBinding_FetchDebugInfo Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (DebugLines != nullptr)
		*DebugLines = std::move(Parms.DebugLines);

	if (DebugColors != nullptr)
		*DebugColors = std::move(Parms.DebugColors);
}


// Function GSInput.GSInputTargetBinding.GetRichTextInlineIconInfo
// (Event, Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// int32                                   BasePixelHeight                                        (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32                                   BaselineOffset                                         (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32                                   ConnectIconOffset                                      (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UGSInputTargetBinding::GetRichTextInlineIconInfo(int32* BasePixelHeight, int32* BaselineOffset, int32* ConnectIconOffset)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GSInputTargetBinding", "GetRichTextInlineIconInfo");

	Params::GSInputTargetBinding_GetRichTextInlineIconInfo Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (BasePixelHeight != nullptr)
		*BasePixelHeight = Parms.BasePixelHeight;

	if (BaselineOffset != nullptr)
		*BaselineOffset = Parms.BaselineOffset;

	if (ConnectIconOffset != nullptr)
		*ConnectIconOffset = Parms.ConnectIconOffset;
}


// Function GSInput.GSInputTargetBinding.InputActionTrigger
// (Event, Public, HasDefaults, BlueprintCallable, BlueprintEvent)
// Parameters:
// class FString                           ActionName                                             (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// ETriggerEvent                           TriggerEvent                                           (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// EInputActionValueType                   InputActionValueType                                   (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FVector                          InputActionValue                                       (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UGSInputTargetBinding::InputActionTrigger(const class FString& ActionName, ETriggerEvent TriggerEvent, EInputActionValueType InputActionValueType, const struct FVector& InputActionValue)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GSInputTargetBinding", "InputActionTrigger");

	Params::GSInputTargetBinding_InputActionTrigger Parms{};

	Parms.ActionName = std::move(ActionName);
	Parms.TriggerEvent = TriggerEvent;
	Parms.InputActionValueType = InputActionValueType;
	Parms.InputActionValue = std::move(InputActionValue);

	UObject::ProcessEvent(Func, &Parms);
}


// Function GSInput.GSInputTargetBinding.IsInputDebuggerOpen
// (Event, Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UGSInputTargetBinding::IsInputDebuggerOpen()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GSInputTargetBinding", "IsInputDebuggerOpen");

	Params::GSInputTargetBinding_IsInputDebuggerOpen Parms{};

	UObject::ProcessEvent(Func, &Parms);

	return Parms.ReturnValue;
}


// Function GSInput.GSInputTargetBinding.OngoingActionListener
// (Final, Native, Public, HasOutParams, BlueprintCallable)
// Parameters:
// struct FInputActionInstance             ActionInstance                                         (ConstParm, Parm, OutParm, ReferenceParm, ContainsInstancedReference, NativeAccessSpecifierPublic)

void UGSInputTargetBinding::OngoingActionListener(const struct FInputActionInstance& ActionInstance)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GSInputTargetBinding", "OngoingActionListener");

	Params::GSInputTargetBinding_OngoingActionListener Parms{};

	Parms.ActionInstance = std::move(ActionInstance);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function GSInput.GSInputTargetBinding.PostApplicationActivationChanged
// (Event, Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// bool                                    IsActive                                               (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UGSInputTargetBinding::PostApplicationActivationChanged(bool IsActive)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GSInputTargetBinding", "PostApplicationActivationChanged");

	Params::GSInputTargetBinding_PostApplicationActivationChanged Parms{};

	Parms.IsActive = IsActive;

	UObject::ProcessEvent(Func, &Parms);
}


// Function GSInput.GSInputTargetBinding.PostConsoleActivationStateChanged
// (Event, Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// bool                                    IsActive                                               (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UGSInputTargetBinding::PostConsoleActivationStateChanged(bool IsActive)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GSInputTargetBinding", "PostConsoleActivationStateChanged");

	Params::GSInputTargetBinding_PostConsoleActivationStateChanged Parms{};

	Parms.IsActive = IsActive;

	UObject::ProcessEvent(Func, &Parms);
}


// Function GSInput.GSInputTargetBinding.StartedActionListener
// (Final, Native, Public, HasOutParams, BlueprintCallable)
// Parameters:
// struct FInputActionInstance             ActionInstance                                         (ConstParm, Parm, OutParm, ReferenceParm, ContainsInstancedReference, NativeAccessSpecifierPublic)

void UGSInputTargetBinding::StartedActionListener(const struct FInputActionInstance& ActionInstance)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GSInputTargetBinding", "StartedActionListener");

	Params::GSInputTargetBinding_StartedActionListener Parms{};

	Parms.ActionInstance = std::move(ActionInstance);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function GSInput.GSInputTargetBinding.TriggeredActionListener
// (Final, Native, Public, HasOutParams, BlueprintCallable)
// Parameters:
// struct FInputActionInstance             ActionInstance                                         (ConstParm, Parm, OutParm, ReferenceParm, ContainsInstancedReference, NativeAccessSpecifierPublic)

void UGSInputTargetBinding::TriggeredActionListener(const struct FInputActionInstance& ActionInstance)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GSInputTargetBinding", "TriggeredActionListener");

	Params::GSInputTargetBinding_TriggeredActionListener Parms{};

	Parms.ActionInstance = std::move(ActionInstance);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function GSInput.GSInputTargetBinding.TryGetInlineTexture
// (Event, Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// class FString                           ActionTag                                              (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// EGSInputRichTextMarkUpType              MarkUpType                                             (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class UTexture2D*                       InlineTexture                                          (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class UTexture2D*                       InlineChordTexture                                     (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class UTexture2D*                       ConnectTexture                                         (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UGSInputTargetBinding::TryGetInlineTexture(const class FString& ActionTag, const EGSInputRichTextMarkUpType MarkUpType, class UTexture2D** InlineTexture, class UTexture2D** InlineChordTexture, class UTexture2D** ConnectTexture)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GSInputTargetBinding", "TryGetInlineTexture");

	Params::GSInputTargetBinding_TryGetInlineTexture Parms{};

	Parms.ActionTag = std::move(ActionTag);
	Parms.MarkUpType = MarkUpType;

	UObject::ProcessEvent(Func, &Parms);

	if (InlineTexture != nullptr)
		*InlineTexture = Parms.InlineTexture;

	if (InlineChordTexture != nullptr)
		*InlineChordTexture = Parms.InlineChordTexture;

	if (ConnectTexture != nullptr)
		*ConnectTexture = Parms.ConnectTexture;

	return Parms.ReturnValue;
}


// Function GSInput.GSInputTargetBinding.TryGetTextureByAction
// (Event, Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// class UInputAction*                     InputAction                                            (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   Offset                                                 (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class UTexture2D*                       Texture                                                (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32                                   BgType                                                 (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   ChordOffset                                            (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class UTexture2D*                       ChordTexture                                           (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class UTexture2D*                       ConnectTexture                                         (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class UTexture2D*                       NoneTexture                                            (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UGSInputTargetBinding::TryGetTextureByAction(class UInputAction* InputAction, float* Offset, class UTexture2D** Texture, int32* BgType, float* ChordOffset, class UTexture2D** ChordTexture, class UTexture2D** ConnectTexture, class UTexture2D** NoneTexture)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GSInputTargetBinding", "TryGetTextureByAction");

	Params::GSInputTargetBinding_TryGetTextureByAction Parms{};

	Parms.InputAction = InputAction;

	UObject::ProcessEvent(Func, &Parms);

	if (Offset != nullptr)
		*Offset = Parms.Offset;

	if (Texture != nullptr)
		*Texture = Parms.Texture;

	if (BgType != nullptr)
		*BgType = Parms.BgType;

	if (ChordOffset != nullptr)
		*ChordOffset = Parms.ChordOffset;

	if (ChordTexture != nullptr)
		*ChordTexture = Parms.ChordTexture;

	if (ConnectTexture != nullptr)
		*ConnectTexture = Parms.ConnectTexture;

	if (NoneTexture != nullptr)
		*NoneTexture = Parms.NoneTexture;

	return Parms.ReturnValue;
}


// Function GSInput.GSInputTargetBinding.TryGetTextureInfoByName
// (Event, Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// class FString                           Name_0                                                 (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   Offset                                                 (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32                                   BgType                                                 (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UGSInputTargetBinding::TryGetTextureInfoByName(const class FString& Name_0, float* Offset, int32* BgType)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GSInputTargetBinding", "TryGetTextureInfoByName");

	Params::GSInputTargetBinding_TryGetTextureInfoByName Parms{};

	Parms.Name_0 = std::move(Name_0);

	UObject::ProcessEvent(Func, &Parms);

	if (Offset != nullptr)
		*Offset = Parms.Offset;

	if (BgType != nullptr)
		*BgType = Parms.BgType;

	return Parms.ReturnValue;
}


// Function GSInput.GSInputWidget.IsChildGSWidgetOf
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// class UWidget*                          PossibleParent                                         (Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UGSInputWidget::IsChildGSWidgetOf(class UWidget* PossibleParent)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GSInputWidget", "IsChildGSWidgetOf");

	Params::GSInputWidget_IsChildGSWidgetOf Parms{};

	Parms.PossibleParent = PossibleParent;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function GSInput.GSInputWidget.OnFocusChanging
// (BlueprintCosmetic, Event, Public, HasOutParams, BlueprintEvent)
// Parameters:
// struct FFocusEvent                      InFocusEvent                                           (ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)

void UGSInputWidget::OnFocusChanging(const struct FFocusEvent& InFocusEvent)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GSInputWidget", "OnFocusChanging");

	Params::GSInputWidget_OnFocusChanging Parms{};

	Parms.InFocusEvent = std::move(InFocusEvent);

	UObject::ProcessEvent(Func, &Parms);
}


// Function GSInput.GSOverlay.AddChildToGSOverlay
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// class UWidget*                          Content                                                (Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class UOverlaySlot*                     ReturnValue                                            (ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class UOverlaySlot* UGSOverlay::AddChildToGSOverlay(class UWidget* Content)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GSOverlay", "AddChildToGSOverlay");

	Params::GSOverlay_AddChildToGSOverlay Parms{};

	Parms.Content = Content;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function GSInput.GSOverlay.OnChildAddToGSOverlayCS
// (Event, Public, BlueprintEvent)
// Parameters:
// class UWidget*                          Widget                                                 (Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UGSOverlay::OnChildAddToGSOverlayCS(class UWidget* Widget)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GSOverlay", "OnChildAddToGSOverlayCS");

	Params::GSOverlay_OnChildAddToGSOverlayCS Parms{};

	Parms.Widget = Widget;

	UObject::ProcessEvent(Func, &Parms);
}

}

