#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: GSInput

#include "Basic.hpp"

#include "GSInput_structs.hpp"
#include "CoreUObject_structs.hpp"
#include "InputCore_structs.hpp"
#include "EnhancedInput_structs.hpp"
#include "SlateCore_structs.hpp"


namespace SDK::Params
{

// Function GSInput.GSE_InputFuncLib.AddInputMappingContext
// 0x0018 (0x0018 - 0x0000)
struct GSE_InputFuncLib_AddInputMappingContext final
{
public:
	class APlayerController*                      PlayerController;                                  // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	const class UInputMappingContext*             InputMappingContext;                               // 0x0008(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Priority;                                          // 0x0010(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bIgnoreAllPressedKeysUntilRelease;                 // 0x0014(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bForceImmediately;                                 // 0x0015(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_16[0x2];                                       // 0x0016(0x0002)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
//static_assert(alignof(GSE_InputFuncLib_AddInputMappingContext) == 0x000008, "Wrong alignment on GSE_InputFuncLib_AddInputMappingContext");
//static_assert(sizeof(GSE_InputFuncLib_AddInputMappingContext) == 0x000018, "Wrong size on GSE_InputFuncLib_AddInputMappingContext");
//static_assert(offsetof(GSE_InputFuncLib_AddInputMappingContext, PlayerController) == 0x000000, "Member 'GSE_InputFuncLib_AddInputMappingContext::PlayerController' has a wrong offset!");
//static_assert(offsetof(GSE_InputFuncLib_AddInputMappingContext, InputMappingContext) == 0x000008, "Member 'GSE_InputFuncLib_AddInputMappingContext::InputMappingContext' has a wrong offset!");
//static_assert(offsetof(GSE_InputFuncLib_AddInputMappingContext, Priority) == 0x000010, "Member 'GSE_InputFuncLib_AddInputMappingContext::Priority' has a wrong offset!");
//static_assert(offsetof(GSE_InputFuncLib_AddInputMappingContext, bIgnoreAllPressedKeysUntilRelease) == 0x000014, "Member 'GSE_InputFuncLib_AddInputMappingContext::bIgnoreAllPressedKeysUntilRelease' has a wrong offset!");
//static_assert(offsetof(GSE_InputFuncLib_AddInputMappingContext, bForceImmediately) == 0x000015, "Member 'GSE_InputFuncLib_AddInputMappingContext::bForceImmediately' has a wrong offset!");

// Function GSInput.GSE_InputFuncLib.AddPlayerMappedKey
// 0x0030 (0x0030 - 0x0000)
struct GSE_InputFuncLib_AddPlayerMappedKey final
{
public:
	class APlayerController*                      PlayerController;                                  // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   MappingName;                                       // 0x0008(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FKey                                   NewKey;                                            // 0x0010(0x0018)(ConstParm, Parm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FModifyContextOptions                  Options;                                           // 0x0028(0x0001)(ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
	uint8                                         Pad_29[0x7];                                       // 0x0029(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
//static_assert(alignof(GSE_InputFuncLib_AddPlayerMappedKey) == 0x000008, "Wrong alignment on GSE_InputFuncLib_AddPlayerMappedKey");
//static_assert(sizeof(GSE_InputFuncLib_AddPlayerMappedKey) == 0x000030, "Wrong size on GSE_InputFuncLib_AddPlayerMappedKey");
//static_assert(offsetof(GSE_InputFuncLib_AddPlayerMappedKey, PlayerController) == 0x000000, "Member 'GSE_InputFuncLib_AddPlayerMappedKey::PlayerController' has a wrong offset!");
//static_assert(offsetof(GSE_InputFuncLib_AddPlayerMappedKey, MappingName) == 0x000008, "Member 'GSE_InputFuncLib_AddPlayerMappedKey::MappingName' has a wrong offset!");
//static_assert(offsetof(GSE_InputFuncLib_AddPlayerMappedKey, NewKey) == 0x000010, "Member 'GSE_InputFuncLib_AddPlayerMappedKey::NewKey' has a wrong offset!");
//static_assert(offsetof(GSE_InputFuncLib_AddPlayerMappedKey, Options) == 0x000028, "Member 'GSE_InputFuncLib_AddPlayerMappedKey::Options' has a wrong offset!");

// Function GSInput.GSE_InputFuncLib.BindAction
// 0x0018 (0x0018 - 0x0000)
struct GSE_InputFuncLib_BindAction final
{
public:
	class UGSInputComponent*                      InputComponent;                                    // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	const class UInputAction*                     InputAction;                                       // 0x0008(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ETriggerEvent                                 TriggerEvent;                                      // 0x0010(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_11[0x7];                                       // 0x0011(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
//static_assert(alignof(GSE_InputFuncLib_BindAction) == 0x000008, "Wrong alignment on GSE_InputFuncLib_BindAction");
//static_assert(sizeof(GSE_InputFuncLib_BindAction) == 0x000018, "Wrong size on GSE_InputFuncLib_BindAction");
//static_assert(offsetof(GSE_InputFuncLib_BindAction, InputComponent) == 0x000000, "Member 'GSE_InputFuncLib_BindAction::InputComponent' has a wrong offset!");
//static_assert(offsetof(GSE_InputFuncLib_BindAction, InputAction) == 0x000008, "Member 'GSE_InputFuncLib_BindAction::InputAction' has a wrong offset!");
//static_assert(offsetof(GSE_InputFuncLib_BindAction, TriggerEvent) == 0x000010, "Member 'GSE_InputFuncLib_BindAction::TriggerEvent' has a wrong offset!");

// Function GSInput.GSE_InputFuncLib.ClearAllInputMappingContext
// 0x0008 (0x0008 - 0x0000)
struct GSE_InputFuncLib_ClearAllInputMappingContext final
{
public:
	class APlayerController*                      PlayerController;                                  // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
//static_assert(alignof(GSE_InputFuncLib_ClearAllInputMappingContext) == 0x000008, "Wrong alignment on GSE_InputFuncLib_ClearAllInputMappingContext");
//static_assert(sizeof(GSE_InputFuncLib_ClearAllInputMappingContext) == 0x000008, "Wrong size on GSE_InputFuncLib_ClearAllInputMappingContext");
//static_assert(offsetof(GSE_InputFuncLib_ClearAllInputMappingContext, PlayerController) == 0x000000, "Member 'GSE_InputFuncLib_ClearAllInputMappingContext::PlayerController' has a wrong offset!");

// Function GSInput.GSE_InputFuncLib.CustomizeInputMappingContext
// 0x0018 (0x0018 - 0x0000)
struct GSE_InputFuncLib_CustomizeInputMappingContext final
{
public:
	class UInputMappingContext*                   MappingContext;                                    // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   MappableName;                                      // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   KeyName;                                           // 0x0010(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
//static_assert(alignof(GSE_InputFuncLib_CustomizeInputMappingContext) == 0x000008, "Wrong alignment on GSE_InputFuncLib_CustomizeInputMappingContext");
//static_assert(sizeof(GSE_InputFuncLib_CustomizeInputMappingContext) == 0x000018, "Wrong size on GSE_InputFuncLib_CustomizeInputMappingContext");
//static_assert(offsetof(GSE_InputFuncLib_CustomizeInputMappingContext, MappingContext) == 0x000000, "Member 'GSE_InputFuncLib_CustomizeInputMappingContext::MappingContext' has a wrong offset!");
//static_assert(offsetof(GSE_InputFuncLib_CustomizeInputMappingContext, MappableName) == 0x000008, "Member 'GSE_InputFuncLib_CustomizeInputMappingContext::MappableName' has a wrong offset!");
//static_assert(offsetof(GSE_InputFuncLib_CustomizeInputMappingContext, KeyName) == 0x000010, "Member 'GSE_InputFuncLib_CustomizeInputMappingContext::KeyName' has a wrong offset!");

// Function GSInput.GSE_InputFuncLib.FindKeyByName
// 0x0020 (0x0020 - 0x0000)
struct GSE_InputFuncLib_FindKeyByName final
{
public:
	class FName                                   KeyName;                                           // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FKey                                   ReturnValue;                                       // 0x0008(0x0018)(Parm, OutParm, ReturnParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
//static_assert(alignof(GSE_InputFuncLib_FindKeyByName) == 0x000008, "Wrong alignment on GSE_InputFuncLib_FindKeyByName");
//static_assert(sizeof(GSE_InputFuncLib_FindKeyByName) == 0x000020, "Wrong size on GSE_InputFuncLib_FindKeyByName");
//static_assert(offsetof(GSE_InputFuncLib_FindKeyByName, KeyName) == 0x000000, "Member 'GSE_InputFuncLib_FindKeyByName::KeyName' has a wrong offset!");
//static_assert(offsetof(GSE_InputFuncLib_FindKeyByName, ReturnValue) == 0x000008, "Member 'GSE_InputFuncLib_FindKeyByName::ReturnValue' has a wrong offset!");

// Function GSInput.GSE_InputFuncLib.FlushPressedInput
// 0x0008 (0x0008 - 0x0000)
struct GSE_InputFuncLib_FlushPressedInput final
{
public:
	class APlayerController*                      PlayerController;                                  // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
//static_assert(alignof(GSE_InputFuncLib_FlushPressedInput) == 0x000008, "Wrong alignment on GSE_InputFuncLib_FlushPressedInput");
//static_assert(sizeof(GSE_InputFuncLib_FlushPressedInput) == 0x000008, "Wrong size on GSE_InputFuncLib_FlushPressedInput");
//static_assert(offsetof(GSE_InputFuncLib_FlushPressedInput, PlayerController) == 0x000000, "Member 'GSE_InputFuncLib_FlushPressedInput::PlayerController' has a wrong offset!");

// Function GSInput.GSE_InputFuncLib.GetActionNamesFromInputMappingContext
// 0x0018 (0x0018 - 0x0000)
struct GSE_InputFuncLib_GetActionNamesFromInputMappingContext final
{
public:
	class UInputMappingContext*                   InputMappingContext;                               // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<class FString>                         ReturnValue;                                       // 0x0008(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, NativeAccessSpecifierPublic)
};
//static_assert(alignof(GSE_InputFuncLib_GetActionNamesFromInputMappingContext) == 0x000008, "Wrong alignment on GSE_InputFuncLib_GetActionNamesFromInputMappingContext");
//static_assert(sizeof(GSE_InputFuncLib_GetActionNamesFromInputMappingContext) == 0x000018, "Wrong size on GSE_InputFuncLib_GetActionNamesFromInputMappingContext");
//static_assert(offsetof(GSE_InputFuncLib_GetActionNamesFromInputMappingContext, InputMappingContext) == 0x000000, "Member 'GSE_InputFuncLib_GetActionNamesFromInputMappingContext::InputMappingContext' has a wrong offset!");
//static_assert(offsetof(GSE_InputFuncLib_GetActionNamesFromInputMappingContext, ReturnValue) == 0x000008, "Member 'GSE_InputFuncLib_GetActionNamesFromInputMappingContext::ReturnValue' has a wrong offset!");

// Function GSInput.GSE_InputFuncLib.GetChordInputAction
// 0x0018 (0x0018 - 0x0000)
struct GSE_InputFuncLib_GetChordInputAction final
{
public:
	const class UInputMappingContext*             InputMappingContext;                               // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<class UInputAction*>                   ReturnValue;                                       // 0x0008(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, NativeAccessSpecifierPublic)
};
//static_assert(alignof(GSE_InputFuncLib_GetChordInputAction) == 0x000008, "Wrong alignment on GSE_InputFuncLib_GetChordInputAction");
//static_assert(sizeof(GSE_InputFuncLib_GetChordInputAction) == 0x000018, "Wrong size on GSE_InputFuncLib_GetChordInputAction");
//static_assert(offsetof(GSE_InputFuncLib_GetChordInputAction, InputMappingContext) == 0x000000, "Member 'GSE_InputFuncLib_GetChordInputAction::InputMappingContext' has a wrong offset!");
//static_assert(offsetof(GSE_InputFuncLib_GetChordInputAction, ReturnValue) == 0x000008, "Member 'GSE_InputFuncLib_GetChordInputAction::ReturnValue' has a wrong offset!");

// Function GSInput.GSE_InputFuncLib.GetConflictChordInputAction
// 0x0038 (0x0038 - 0x0000)
struct GSE_InputFuncLib_GetConflictChordInputAction final
{
public:
	const class UInputAction*                     PrimaryChordAction;                                // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<class UInputMappingContext*>           Contexts;                                          // 0x0008(0x0010)(ConstParm, Parm, ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<class UInputAction*>                   PrimaryConflictActions;                            // 0x0018(0x0010)(Parm, OutParm, ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<class UInputAction*>                   SecondaryConflictActions;                          // 0x0028(0x0010)(Parm, OutParm, ZeroConstructor, NativeAccessSpecifierPublic)
};
//static_assert(alignof(GSE_InputFuncLib_GetConflictChordInputAction) == 0x000008, "Wrong alignment on GSE_InputFuncLib_GetConflictChordInputAction");
//static_assert(sizeof(GSE_InputFuncLib_GetConflictChordInputAction) == 0x000038, "Wrong size on GSE_InputFuncLib_GetConflictChordInputAction");
//static_assert(offsetof(GSE_InputFuncLib_GetConflictChordInputAction, PrimaryChordAction) == 0x000000, "Member 'GSE_InputFuncLib_GetConflictChordInputAction::PrimaryChordAction' has a wrong offset!");
//static_assert(offsetof(GSE_InputFuncLib_GetConflictChordInputAction, Contexts) == 0x000008, "Member 'GSE_InputFuncLib_GetConflictChordInputAction::Contexts' has a wrong offset!");
//static_assert(offsetof(GSE_InputFuncLib_GetConflictChordInputAction, PrimaryConflictActions) == 0x000018, "Member 'GSE_InputFuncLib_GetConflictChordInputAction::PrimaryConflictActions' has a wrong offset!");
//static_assert(offsetof(GSE_InputFuncLib_GetConflictChordInputAction, SecondaryConflictActions) == 0x000028, "Member 'GSE_InputFuncLib_GetConflictChordInputAction::SecondaryConflictActions' has a wrong offset!");

// Function GSInput.GSE_InputFuncLib.GetDebugEventAccumulatorThisTick
// 0x0018 (0x0018 - 0x0000)
struct GSE_InputFuncLib_GetDebugEventAccumulatorThisTick final
{
public:
	class APlayerController*                      PlayerController;                                  // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	const class UInputAction*                     Action;                                            // 0x0008(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          IsReleasedEvent;                                   // 0x0010(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_11[0x3];                                       // 0x0011(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         ReturnValue;                                       // 0x0014(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
//static_assert(alignof(GSE_InputFuncLib_GetDebugEventAccumulatorThisTick) == 0x000008, "Wrong alignment on GSE_InputFuncLib_GetDebugEventAccumulatorThisTick");
//static_assert(sizeof(GSE_InputFuncLib_GetDebugEventAccumulatorThisTick) == 0x000018, "Wrong size on GSE_InputFuncLib_GetDebugEventAccumulatorThisTick");
//static_assert(offsetof(GSE_InputFuncLib_GetDebugEventAccumulatorThisTick, PlayerController) == 0x000000, "Member 'GSE_InputFuncLib_GetDebugEventAccumulatorThisTick::PlayerController' has a wrong offset!");
//static_assert(offsetof(GSE_InputFuncLib_GetDebugEventAccumulatorThisTick, Action) == 0x000008, "Member 'GSE_InputFuncLib_GetDebugEventAccumulatorThisTick::Action' has a wrong offset!");
//static_assert(offsetof(GSE_InputFuncLib_GetDebugEventAccumulatorThisTick, IsReleasedEvent) == 0x000010, "Member 'GSE_InputFuncLib_GetDebugEventAccumulatorThisTick::IsReleasedEvent' has a wrong offset!");
//static_assert(offsetof(GSE_InputFuncLib_GetDebugEventAccumulatorThisTick, ReturnValue) == 0x000014, "Member 'GSE_InputFuncLib_GetDebugEventAccumulatorThisTick::ReturnValue' has a wrong offset!");

// Function GSInput.GSE_InputFuncLib.GetGamepadControllerName
// 0x0018 (0x0018 - 0x0000)
struct GSE_InputFuncLib_GetGamepadControllerName final
{
public:
	int32                                         ControllerId;                                      // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_4[0x4];                                        // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 ReturnValue;                                       // 0x0008(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
//static_assert(alignof(GSE_InputFuncLib_GetGamepadControllerName) == 0x000008, "Wrong alignment on GSE_InputFuncLib_GetGamepadControllerName");
//static_assert(sizeof(GSE_InputFuncLib_GetGamepadControllerName) == 0x000018, "Wrong size on GSE_InputFuncLib_GetGamepadControllerName");
//static_assert(offsetof(GSE_InputFuncLib_GetGamepadControllerName, ControllerId) == 0x000000, "Member 'GSE_InputFuncLib_GetGamepadControllerName::ControllerId' has a wrong offset!");
//static_assert(offsetof(GSE_InputFuncLib_GetGamepadControllerName, ReturnValue) == 0x000008, "Member 'GSE_InputFuncLib_GetGamepadControllerName::ReturnValue' has a wrong offset!");

// Function GSInput.GSE_InputFuncLib.GetGamepadDeadZoneThreshold
// 0x0004 (0x0004 - 0x0000)
struct GSE_InputFuncLib_GetGamepadDeadZoneThreshold final
{
public:
	float                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
//static_assert(alignof(GSE_InputFuncLib_GetGamepadDeadZoneThreshold) == 0x000004, "Wrong alignment on GSE_InputFuncLib_GetGamepadDeadZoneThreshold");
//static_assert(sizeof(GSE_InputFuncLib_GetGamepadDeadZoneThreshold) == 0x000004, "Wrong size on GSE_InputFuncLib_GetGamepadDeadZoneThreshold");
//static_assert(offsetof(GSE_InputFuncLib_GetGamepadDeadZoneThreshold, ReturnValue) == 0x000000, "Member 'GSE_InputFuncLib_GetGamepadDeadZoneThreshold::ReturnValue' has a wrong offset!");

// Function GSInput.GSE_InputFuncLib.GetInputActionValue
// 0x0028 (0x0028 - 0x0000)
struct GSE_InputFuncLib_GetInputActionValue final
{
public:
	class APlayerController*                      PlayerController;                                  // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	const class UInputAction*                     Action;                                            // 0x0008(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                ReturnValue;                                       // 0x0010(0x0018)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
//static_assert(alignof(GSE_InputFuncLib_GetInputActionValue) == 0x000008, "Wrong alignment on GSE_InputFuncLib_GetInputActionValue");
//static_assert(sizeof(GSE_InputFuncLib_GetInputActionValue) == 0x000028, "Wrong size on GSE_InputFuncLib_GetInputActionValue");
//static_assert(offsetof(GSE_InputFuncLib_GetInputActionValue, PlayerController) == 0x000000, "Member 'GSE_InputFuncLib_GetInputActionValue::PlayerController' has a wrong offset!");
//static_assert(offsetof(GSE_InputFuncLib_GetInputActionValue, Action) == 0x000008, "Member 'GSE_InputFuncLib_GetInputActionValue::Action' has a wrong offset!");
//static_assert(offsetof(GSE_InputFuncLib_GetInputActionValue, ReturnValue) == 0x000010, "Member 'GSE_InputFuncLib_GetInputActionValue::ReturnValue' has a wrong offset!");

// Function GSInput.GSE_InputFuncLib.GetInputDeviceTypes
// 0x0010 (0x0010 - 0x0000)
struct GSE_InputFuncLib_GetInputDeviceTypes final
{
public:
	TArray<EGSInputDeviceType>                    ReturnValue;                                       // 0x0000(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, NativeAccessSpecifierPublic)
};
//static_assert(alignof(GSE_InputFuncLib_GetInputDeviceTypes) == 0x000008, "Wrong alignment on GSE_InputFuncLib_GetInputDeviceTypes");
//static_assert(sizeof(GSE_InputFuncLib_GetInputDeviceTypes) == 0x000010, "Wrong size on GSE_InputFuncLib_GetInputDeviceTypes");
//static_assert(offsetof(GSE_InputFuncLib_GetInputDeviceTypes, ReturnValue) == 0x000000, "Member 'GSE_InputFuncLib_GetInputDeviceTypes::ReturnValue' has a wrong offset!");

// Function GSInput.GSE_InputFuncLib.GetInputPreProc
// 0x0010 (0x0010 - 0x0000)
struct GSE_InputFuncLib_GetInputPreProc final
{
public:
	const class UObject*                          WorldContext;                                      // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UGSInputPreProc*                        ReturnValue;                                       // 0x0008(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
//static_assert(alignof(GSE_InputFuncLib_GetInputPreProc) == 0x000008, "Wrong alignment on GSE_InputFuncLib_GetInputPreProc");
//static_assert(sizeof(GSE_InputFuncLib_GetInputPreProc) == 0x000010, "Wrong size on GSE_InputFuncLib_GetInputPreProc");
//static_assert(offsetof(GSE_InputFuncLib_GetInputPreProc, WorldContext) == 0x000000, "Member 'GSE_InputFuncLib_GetInputPreProc::WorldContext' has a wrong offset!");
//static_assert(offsetof(GSE_InputFuncLib_GetInputPreProc, ReturnValue) == 0x000008, "Member 'GSE_InputFuncLib_GetInputPreProc::ReturnValue' has a wrong offset!");

// Function GSInput.GSE_InputFuncLib.GetInputSettingPreProc
// 0x0010 (0x0010 - 0x0000)
struct GSE_InputFuncLib_GetInputSettingPreProc final
{
public:
	const class UObject*                          WorldContext;                                      // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UGSInputSettingPreProc*                 ReturnValue;                                       // 0x0008(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
//static_assert(alignof(GSE_InputFuncLib_GetInputSettingPreProc) == 0x000008, "Wrong alignment on GSE_InputFuncLib_GetInputSettingPreProc");
//static_assert(sizeof(GSE_InputFuncLib_GetInputSettingPreProc) == 0x000010, "Wrong size on GSE_InputFuncLib_GetInputSettingPreProc");
//static_assert(offsetof(GSE_InputFuncLib_GetInputSettingPreProc, WorldContext) == 0x000000, "Member 'GSE_InputFuncLib_GetInputSettingPreProc::WorldContext' has a wrong offset!");
//static_assert(offsetof(GSE_InputFuncLib_GetInputSettingPreProc, ReturnValue) == 0x000008, "Member 'GSE_InputFuncLib_GetInputSettingPreProc::ReturnValue' has a wrong offset!");

// Function GSInput.GSE_InputFuncLib.GetKeyByAnalogInputEvent
// 0x0048 (0x0048 - 0x0000)
struct GSE_InputFuncLib_GetKeyByAnalogInputEvent final
{
public:
	struct FAnalogInputEvent                      AnalogInputEvent;                                  // 0x0000(0x0040)(ConstParm, Parm, NativeAccessSpecifierPublic)
	class FName                                   ReturnValue;                                       // 0x0040(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
//static_assert(alignof(GSE_InputFuncLib_GetKeyByAnalogInputEvent) == 0x000008, "Wrong alignment on GSE_InputFuncLib_GetKeyByAnalogInputEvent");
//static_assert(sizeof(GSE_InputFuncLib_GetKeyByAnalogInputEvent) == 0x000048, "Wrong size on GSE_InputFuncLib_GetKeyByAnalogInputEvent");
//static_assert(offsetof(GSE_InputFuncLib_GetKeyByAnalogInputEvent, AnalogInputEvent) == 0x000000, "Member 'GSE_InputFuncLib_GetKeyByAnalogInputEvent::AnalogInputEvent' has a wrong offset!");
//static_assert(offsetof(GSE_InputFuncLib_GetKeyByAnalogInputEvent, ReturnValue) == 0x000040, "Member 'GSE_InputFuncLib_GetKeyByAnalogInputEvent::ReturnValue' has a wrong offset!");

// Function GSInput.GSE_InputFuncLib.GetKeyByKeyEvent
// 0x0040 (0x0040 - 0x0000)
struct GSE_InputFuncLib_GetKeyByKeyEvent final
{
public:
	struct FKeyEvent                              KeyEvent;                                          // 0x0000(0x0038)(ConstParm, Parm, NativeAccessSpecifierPublic)
	class FName                                   ReturnValue;                                       // 0x0038(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
//static_assert(alignof(GSE_InputFuncLib_GetKeyByKeyEvent) == 0x000008, "Wrong alignment on GSE_InputFuncLib_GetKeyByKeyEvent");
//static_assert(sizeof(GSE_InputFuncLib_GetKeyByKeyEvent) == 0x000040, "Wrong size on GSE_InputFuncLib_GetKeyByKeyEvent");
//static_assert(offsetof(GSE_InputFuncLib_GetKeyByKeyEvent, KeyEvent) == 0x000000, "Member 'GSE_InputFuncLib_GetKeyByKeyEvent::KeyEvent' has a wrong offset!");
//static_assert(offsetof(GSE_InputFuncLib_GetKeyByKeyEvent, ReturnValue) == 0x000038, "Member 'GSE_InputFuncLib_GetKeyByKeyEvent::ReturnValue' has a wrong offset!");

// Function GSInput.GSE_InputFuncLib.GetKeyByPointerEvent
// 0x0098 (0x0098 - 0x0000)
struct GSE_InputFuncLib_GetKeyByPointerEvent final
{
public:
	struct FPointerEvent                          PointerEvent;                                      // 0x0000(0x0090)(ConstParm, Parm, NativeAccessSpecifierPublic)
	class FName                                   ReturnValue;                                       // 0x0090(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
//static_assert(alignof(GSE_InputFuncLib_GetKeyByPointerEvent) == 0x000008, "Wrong alignment on GSE_InputFuncLib_GetKeyByPointerEvent");
//static_assert(sizeof(GSE_InputFuncLib_GetKeyByPointerEvent) == 0x000098, "Wrong size on GSE_InputFuncLib_GetKeyByPointerEvent");
//static_assert(offsetof(GSE_InputFuncLib_GetKeyByPointerEvent, PointerEvent) == 0x000000, "Member 'GSE_InputFuncLib_GetKeyByPointerEvent::PointerEvent' has a wrong offset!");
//static_assert(offsetof(GSE_InputFuncLib_GetKeyByPointerEvent, ReturnValue) == 0x000090, "Member 'GSE_InputFuncLib_GetKeyByPointerEvent::ReturnValue' has a wrong offset!");

// Function GSInput.GSE_InputFuncLib.GetLastInputType
// 0x0010 (0x0010 - 0x0000)
struct GSE_InputFuncLib_GetLastInputType final
{
public:
	const class UObject*                          WorldContext;                                      // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EGSInputType                                  ReturnValue;                                       // 0x0008(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
//static_assert(alignof(GSE_InputFuncLib_GetLastInputType) == 0x000008, "Wrong alignment on GSE_InputFuncLib_GetLastInputType");
//static_assert(sizeof(GSE_InputFuncLib_GetLastInputType) == 0x000010, "Wrong size on GSE_InputFuncLib_GetLastInputType");
//static_assert(offsetof(GSE_InputFuncLib_GetLastInputType, WorldContext) == 0x000000, "Member 'GSE_InputFuncLib_GetLastInputType::WorldContext' has a wrong offset!");
//static_assert(offsetof(GSE_InputFuncLib_GetLastInputType, ReturnValue) == 0x000008, "Member 'GSE_InputFuncLib_GetLastInputType::ReturnValue' has a wrong offset!");

// Function GSInput.GSE_InputFuncLib.GetMappableKey
// 0x0058 (0x0058 - 0x0000)
struct GSE_InputFuncLib_GetMappableKey final
{
public:
	const class UInputMappingContext*             MappingContext;                                    // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TMap<class FName, struct FKey>                ReturnValue;                                       // 0x0008(0x0050)(Parm, OutParm, ReturnParm, NativeAccessSpecifierPublic)
};
//static_assert(alignof(GSE_InputFuncLib_GetMappableKey) == 0x000008, "Wrong alignment on GSE_InputFuncLib_GetMappableKey");
//static_assert(sizeof(GSE_InputFuncLib_GetMappableKey) == 0x000058, "Wrong size on GSE_InputFuncLib_GetMappableKey");
//static_assert(offsetof(GSE_InputFuncLib_GetMappableKey, MappingContext) == 0x000000, "Member 'GSE_InputFuncLib_GetMappableKey::MappingContext' has a wrong offset!");
//static_assert(offsetof(GSE_InputFuncLib_GetMappableKey, ReturnValue) == 0x000008, "Member 'GSE_InputFuncLib_GetMappableKey::ReturnValue' has a wrong offset!");

// Function GSInput.GSE_InputFuncLib.GetMappingsInfo
// 0x0038 (0x0038 - 0x0000)
struct GSE_InputFuncLib_GetMappingsInfo final
{
public:
	const class UInputMappingContext*             MappingContext;                                    // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<class UInputAction*>                   Actions;                                           // 0x0008(0x0010)(Parm, OutParm, ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<struct FKey>                           Keys;                                              // 0x0018(0x0010)(Parm, OutParm, ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<class UInputAction*>                   ChordActions;                                      // 0x0028(0x0010)(Parm, OutParm, ZeroConstructor, NativeAccessSpecifierPublic)
};
//static_assert(alignof(GSE_InputFuncLib_GetMappingsInfo) == 0x000008, "Wrong alignment on GSE_InputFuncLib_GetMappingsInfo");
//static_assert(sizeof(GSE_InputFuncLib_GetMappingsInfo) == 0x000038, "Wrong size on GSE_InputFuncLib_GetMappingsInfo");
//static_assert(offsetof(GSE_InputFuncLib_GetMappingsInfo, MappingContext) == 0x000000, "Member 'GSE_InputFuncLib_GetMappingsInfo::MappingContext' has a wrong offset!");
//static_assert(offsetof(GSE_InputFuncLib_GetMappingsInfo, Actions) == 0x000008, "Member 'GSE_InputFuncLib_GetMappingsInfo::Actions' has a wrong offset!");
//static_assert(offsetof(GSE_InputFuncLib_GetMappingsInfo, Keys) == 0x000018, "Member 'GSE_InputFuncLib_GetMappingsInfo::Keys' has a wrong offset!");
//static_assert(offsetof(GSE_InputFuncLib_GetMappingsInfo, ChordActions) == 0x000028, "Member 'GSE_InputFuncLib_GetMappingsInfo::ChordActions' has a wrong offset!");

// Function GSInput.GSE_InputFuncLib.GetProductStringList
// 0x0010 (0x0010 - 0x0000)
struct GSE_InputFuncLib_GetProductStringList final
{
public:
	TArray<class FString>                         ReturnValue;                                       // 0x0000(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, NativeAccessSpecifierPublic)
};
//static_assert(alignof(GSE_InputFuncLib_GetProductStringList) == 0x000008, "Wrong alignment on GSE_InputFuncLib_GetProductStringList");
//static_assert(sizeof(GSE_InputFuncLib_GetProductStringList) == 0x000010, "Wrong size on GSE_InputFuncLib_GetProductStringList");
//static_assert(offsetof(GSE_InputFuncLib_GetProductStringList, ReturnValue) == 0x000000, "Member 'GSE_InputFuncLib_GetProductStringList::ReturnValue' has a wrong offset!");

// Function GSInput.GSE_InputFuncLib.IsAppActive
// 0x0001 (0x0001 - 0x0000)
struct GSE_InputFuncLib_IsAppActive final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
//static_assert(alignof(GSE_InputFuncLib_IsAppActive) == 0x000001, "Wrong alignment on GSE_InputFuncLib_IsAppActive");
//static_assert(sizeof(GSE_InputFuncLib_IsAppActive) == 0x000001, "Wrong size on GSE_InputFuncLib_IsAppActive");
//static_assert(offsetof(GSE_InputFuncLib_IsAppActive, ReturnValue) == 0x000000, "Member 'GSE_InputFuncLib_IsAppActive::ReturnValue' has a wrong offset!");

// Function GSInput.GSE_InputFuncLib.IsConsoleActive
// 0x0010 (0x0010 - 0x0000)
struct GSE_InputFuncLib_IsConsoleActive final
{
public:
	const class UObject*                          WorldContext;                                      // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0008(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
//static_assert(alignof(GSE_InputFuncLib_IsConsoleActive) == 0x000008, "Wrong alignment on GSE_InputFuncLib_IsConsoleActive");
//static_assert(sizeof(GSE_InputFuncLib_IsConsoleActive) == 0x000010, "Wrong size on GSE_InputFuncLib_IsConsoleActive");
//static_assert(offsetof(GSE_InputFuncLib_IsConsoleActive, WorldContext) == 0x000000, "Member 'GSE_InputFuncLib_IsConsoleActive::WorldContext' has a wrong offset!");
//static_assert(offsetof(GSE_InputFuncLib_IsConsoleActive, ReturnValue) == 0x000008, "Member 'GSE_InputFuncLib_IsConsoleActive::ReturnValue' has a wrong offset!");

// Function GSInput.GSE_InputFuncLib.QueryKeysByInputAction
// 0x0020 (0x0020 - 0x0000)
struct GSE_InputFuncLib_QueryKeysByInputAction final
{
public:
	const class UInputMappingContext*             MappingContext;                                    // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	const class UInputAction*                     Action;                                            // 0x0008(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<struct FKey>                           ReturnValue;                                       // 0x0010(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, NativeAccessSpecifierPublic)
};
//static_assert(alignof(GSE_InputFuncLib_QueryKeysByInputAction) == 0x000008, "Wrong alignment on GSE_InputFuncLib_QueryKeysByInputAction");
//static_assert(sizeof(GSE_InputFuncLib_QueryKeysByInputAction) == 0x000020, "Wrong size on GSE_InputFuncLib_QueryKeysByInputAction");
//static_assert(offsetof(GSE_InputFuncLib_QueryKeysByInputAction, MappingContext) == 0x000000, "Member 'GSE_InputFuncLib_QueryKeysByInputAction::MappingContext' has a wrong offset!");
//static_assert(offsetof(GSE_InputFuncLib_QueryKeysByInputAction, Action) == 0x000008, "Member 'GSE_InputFuncLib_QueryKeysByInputAction::Action' has a wrong offset!");
//static_assert(offsetof(GSE_InputFuncLib_QueryKeysByInputAction, ReturnValue) == 0x000010, "Member 'GSE_InputFuncLib_QueryKeysByInputAction::ReturnValue' has a wrong offset!");

// Function GSInput.GSE_InputFuncLib.QueryKeysMappedToAction
// 0x0020 (0x0020 - 0x0000)
struct GSE_InputFuncLib_QueryKeysMappedToAction final
{
public:
	class APlayerController*                      PlayerController;                                  // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	const class UInputAction*                     Action;                                            // 0x0008(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<struct FKey>                           ReturnValue;                                       // 0x0010(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, NativeAccessSpecifierPublic)
};
//static_assert(alignof(GSE_InputFuncLib_QueryKeysMappedToAction) == 0x000008, "Wrong alignment on GSE_InputFuncLib_QueryKeysMappedToAction");
//static_assert(sizeof(GSE_InputFuncLib_QueryKeysMappedToAction) == 0x000020, "Wrong size on GSE_InputFuncLib_QueryKeysMappedToAction");
//static_assert(offsetof(GSE_InputFuncLib_QueryKeysMappedToAction, PlayerController) == 0x000000, "Member 'GSE_InputFuncLib_QueryKeysMappedToAction::PlayerController' has a wrong offset!");
//static_assert(offsetof(GSE_InputFuncLib_QueryKeysMappedToAction, Action) == 0x000008, "Member 'GSE_InputFuncLib_QueryKeysMappedToAction::Action' has a wrong offset!");
//static_assert(offsetof(GSE_InputFuncLib_QueryKeysMappedToAction, ReturnValue) == 0x000010, "Member 'GSE_InputFuncLib_QueryKeysMappedToAction::ReturnValue' has a wrong offset!");

// Function GSInput.GSE_InputFuncLib.RegisterGSInputProc
// 0x0010 (0x0010 - 0x0000)
struct GSE_InputFuncLib_RegisterGSInputProc final
{
public:
	const class UObject*                          WorldContext;                                      // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EGSInputProcOrder                             Order;                                             // 0x0008(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
//static_assert(alignof(GSE_InputFuncLib_RegisterGSInputProc) == 0x000008, "Wrong alignment on GSE_InputFuncLib_RegisterGSInputProc");
//static_assert(sizeof(GSE_InputFuncLib_RegisterGSInputProc) == 0x000010, "Wrong size on GSE_InputFuncLib_RegisterGSInputProc");
//static_assert(offsetof(GSE_InputFuncLib_RegisterGSInputProc, WorldContext) == 0x000000, "Member 'GSE_InputFuncLib_RegisterGSInputProc::WorldContext' has a wrong offset!");
//static_assert(offsetof(GSE_InputFuncLib_RegisterGSInputProc, Order) == 0x000008, "Member 'GSE_InputFuncLib_RegisterGSInputProc::Order' has a wrong offset!");

// Function GSInput.GSE_InputFuncLib.RegisterInputTargetBinding
// 0x0008 (0x0008 - 0x0000)
struct GSE_InputFuncLib_RegisterInputTargetBinding final
{
public:
	class UGSInputTargetBinding*                  InputTargetBindingObj;                             // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
//static_assert(alignof(GSE_InputFuncLib_RegisterInputTargetBinding) == 0x000008, "Wrong alignment on GSE_InputFuncLib_RegisterInputTargetBinding");
//static_assert(sizeof(GSE_InputFuncLib_RegisterInputTargetBinding) == 0x000008, "Wrong size on GSE_InputFuncLib_RegisterInputTargetBinding");
//static_assert(offsetof(GSE_InputFuncLib_RegisterInputTargetBinding, InputTargetBindingObj) == 0x000000, "Member 'GSE_InputFuncLib_RegisterInputTargetBinding::InputTargetBindingObj' has a wrong offset!");

// Function GSInput.GSE_InputFuncLib.RemoveInputMappingContext
// 0x0018 (0x0018 - 0x0000)
struct GSE_InputFuncLib_RemoveInputMappingContext final
{
public:
	class APlayerController*                      PlayerController;                                  // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	const class UInputMappingContext*             InputMappingContext;                               // 0x0008(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bIgnoreAllPressedKeysUntilRelease;                 // 0x0010(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bForceImmediately;                                 // 0x0011(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_12[0x6];                                       // 0x0012(0x0006)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
//static_assert(alignof(GSE_InputFuncLib_RemoveInputMappingContext) == 0x000008, "Wrong alignment on GSE_InputFuncLib_RemoveInputMappingContext");
//static_assert(sizeof(GSE_InputFuncLib_RemoveInputMappingContext) == 0x000018, "Wrong size on GSE_InputFuncLib_RemoveInputMappingContext");
//static_assert(offsetof(GSE_InputFuncLib_RemoveInputMappingContext, PlayerController) == 0x000000, "Member 'GSE_InputFuncLib_RemoveInputMappingContext::PlayerController' has a wrong offset!");
//static_assert(offsetof(GSE_InputFuncLib_RemoveInputMappingContext, InputMappingContext) == 0x000008, "Member 'GSE_InputFuncLib_RemoveInputMappingContext::InputMappingContext' has a wrong offset!");
//static_assert(offsetof(GSE_InputFuncLib_RemoveInputMappingContext, bIgnoreAllPressedKeysUntilRelease) == 0x000010, "Member 'GSE_InputFuncLib_RemoveInputMappingContext::bIgnoreAllPressedKeysUntilRelease' has a wrong offset!");
//static_assert(offsetof(GSE_InputFuncLib_RemoveInputMappingContext, bForceImmediately) == 0x000011, "Member 'GSE_InputFuncLib_RemoveInputMappingContext::bForceImmediately' has a wrong offset!");

// Function GSInput.GSE_InputFuncLib.RequestRebuildControlMappings
// 0x0010 (0x0010 - 0x0000)
struct GSE_InputFuncLib_RequestRebuildControlMappings final
{
public:
	const class APlayerController*                PlayerController;                                  // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bForceImmediately;                                 // 0x0008(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bIgnoreAllPressedKeysUntilRelease;                 // 0x0009(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_A[0x6];                                        // 0x000A(0x0006)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
//static_assert(alignof(GSE_InputFuncLib_RequestRebuildControlMappings) == 0x000008, "Wrong alignment on GSE_InputFuncLib_RequestRebuildControlMappings");
//static_assert(sizeof(GSE_InputFuncLib_RequestRebuildControlMappings) == 0x000010, "Wrong size on GSE_InputFuncLib_RequestRebuildControlMappings");
//static_assert(offsetof(GSE_InputFuncLib_RequestRebuildControlMappings, PlayerController) == 0x000000, "Member 'GSE_InputFuncLib_RequestRebuildControlMappings::PlayerController' has a wrong offset!");
//static_assert(offsetof(GSE_InputFuncLib_RequestRebuildControlMappings, bForceImmediately) == 0x000008, "Member 'GSE_InputFuncLib_RequestRebuildControlMappings::bForceImmediately' has a wrong offset!");
//static_assert(offsetof(GSE_InputFuncLib_RequestRebuildControlMappings, bIgnoreAllPressedKeysUntilRelease) == 0x000009, "Member 'GSE_InputFuncLib_RequestRebuildControlMappings::bIgnoreAllPressedKeysUntilRelease' has a wrong offset!");

// Function GSInput.GSE_InputFuncLib.SetCursorVisibility
// 0x0001 (0x0001 - 0x0000)
struct GSE_InputFuncLib_SetCursorVisibility final
{
public:
	bool                                          bDrawCursor;                                       // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
//static_assert(alignof(GSE_InputFuncLib_SetCursorVisibility) == 0x000001, "Wrong alignment on GSE_InputFuncLib_SetCursorVisibility");
//static_assert(sizeof(GSE_InputFuncLib_SetCursorVisibility) == 0x000001, "Wrong size on GSE_InputFuncLib_SetCursorVisibility");
//static_assert(offsetof(GSE_InputFuncLib_SetCursorVisibility, bDrawCursor) == 0x000000, "Member 'GSE_InputFuncLib_SetCursorVisibility::bDrawCursor' has a wrong offset!");

// Function GSInput.GSE_InputFuncLib.SetGameOnly
// 0x0008 (0x0008 - 0x0000)
struct GSE_InputFuncLib_SetGameOnly final
{
public:
	class APlayerController*                      PlayerController;                                  // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
//static_assert(alignof(GSE_InputFuncLib_SetGameOnly) == 0x000008, "Wrong alignment on GSE_InputFuncLib_SetGameOnly");
//static_assert(sizeof(GSE_InputFuncLib_SetGameOnly) == 0x000008, "Wrong size on GSE_InputFuncLib_SetGameOnly");
//static_assert(offsetof(GSE_InputFuncLib_SetGameOnly, PlayerController) == 0x000000, "Member 'GSE_InputFuncLib_SetGameOnly::PlayerController' has a wrong offset!");

// Function GSInput.GSE_InputFuncLib.SetIgnoreAllButtonKeyInput
// 0x0010 (0x0010 - 0x0000)
struct GSE_InputFuncLib_SetIgnoreAllButtonKeyInput final
{
public:
	const class UObject*                          WorldContext;                                      // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          IsIgnore;                                          // 0x0008(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
//static_assert(alignof(GSE_InputFuncLib_SetIgnoreAllButtonKeyInput) == 0x000008, "Wrong alignment on GSE_InputFuncLib_SetIgnoreAllButtonKeyInput");
//static_assert(sizeof(GSE_InputFuncLib_SetIgnoreAllButtonKeyInput) == 0x000010, "Wrong size on GSE_InputFuncLib_SetIgnoreAllButtonKeyInput");
//static_assert(offsetof(GSE_InputFuncLib_SetIgnoreAllButtonKeyInput, WorldContext) == 0x000000, "Member 'GSE_InputFuncLib_SetIgnoreAllButtonKeyInput::WorldContext' has a wrong offset!");
//static_assert(offsetof(GSE_InputFuncLib_SetIgnoreAllButtonKeyInput, IsIgnore) == 0x000008, "Member 'GSE_InputFuncLib_SetIgnoreAllButtonKeyInput::IsIgnore' has a wrong offset!");

// Function GSInput.GSE_InputFuncLib.SetMouseCursorPosition
// 0x0010 (0x0010 - 0x0000)
struct GSE_InputFuncLib_SetMouseCursorPosition final
{
public:
	struct FVector2D                              Position;                                          // 0x0000(0x0010)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
//static_assert(alignof(GSE_InputFuncLib_SetMouseCursorPosition) == 0x000008, "Wrong alignment on GSE_InputFuncLib_SetMouseCursorPosition");
//static_assert(sizeof(GSE_InputFuncLib_SetMouseCursorPosition) == 0x000010, "Wrong size on GSE_InputFuncLib_SetMouseCursorPosition");
//static_assert(offsetof(GSE_InputFuncLib_SetMouseCursorPosition, Position) == 0x000000, "Member 'GSE_InputFuncLib_SetMouseCursorPosition::Position' has a wrong offset!");

// Function GSInput.GSE_InputFuncLib.SetUIOnly
// 0x0010 (0x0010 - 0x0000)
struct GSE_InputFuncLib_SetUIOnly final
{
public:
	class APlayerController*                      PlayerController;                                  // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bNeedMouseCapture;                                 // 0x0008(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
//static_assert(alignof(GSE_InputFuncLib_SetUIOnly) == 0x000008, "Wrong alignment on GSE_InputFuncLib_SetUIOnly");
//static_assert(sizeof(GSE_InputFuncLib_SetUIOnly) == 0x000010, "Wrong size on GSE_InputFuncLib_SetUIOnly");
//static_assert(offsetof(GSE_InputFuncLib_SetUIOnly, PlayerController) == 0x000000, "Member 'GSE_InputFuncLib_SetUIOnly::PlayerController' has a wrong offset!");
//static_assert(offsetof(GSE_InputFuncLib_SetUIOnly, bNeedMouseCapture) == 0x000008, "Member 'GSE_InputFuncLib_SetUIOnly::bNeedMouseCapture' has a wrong offset!");

// Function GSInput.GSE_InputFuncLib.TryToSetContextNewPriority
// 0x0018 (0x0018 - 0x0000)
struct GSE_InputFuncLib_TryToSetContextNewPriority final
{
public:
	class APlayerController*                      PlayerController;                                  // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	const class UInputMappingContext*             Context;                                           // 0x0008(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         NewPriority;                                       // 0x0010(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0014(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_15[0x3];                                       // 0x0015(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
//static_assert(alignof(GSE_InputFuncLib_TryToSetContextNewPriority) == 0x000008, "Wrong alignment on GSE_InputFuncLib_TryToSetContextNewPriority");
//static_assert(sizeof(GSE_InputFuncLib_TryToSetContextNewPriority) == 0x000018, "Wrong size on GSE_InputFuncLib_TryToSetContextNewPriority");
//static_assert(offsetof(GSE_InputFuncLib_TryToSetContextNewPriority, PlayerController) == 0x000000, "Member 'GSE_InputFuncLib_TryToSetContextNewPriority::PlayerController' has a wrong offset!");
//static_assert(offsetof(GSE_InputFuncLib_TryToSetContextNewPriority, Context) == 0x000008, "Member 'GSE_InputFuncLib_TryToSetContextNewPriority::Context' has a wrong offset!");
//static_assert(offsetof(GSE_InputFuncLib_TryToSetContextNewPriority, NewPriority) == 0x000010, "Member 'GSE_InputFuncLib_TryToSetContextNewPriority::NewPriority' has a wrong offset!");
//static_assert(offsetof(GSE_InputFuncLib_TryToSetContextNewPriority, ReturnValue) == 0x000014, "Member 'GSE_InputFuncLib_TryToSetContextNewPriority::ReturnValue' has a wrong offset!");

// Function GSInput.GSE_InputFuncLib.UnRegisterGSInputProc
// 0x0010 (0x0010 - 0x0000)
struct GSE_InputFuncLib_UnRegisterGSInputProc final
{
public:
	const class UObject*                          WorldContext;                                      // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EGSInputProcOrder                             Order;                                             // 0x0008(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
//static_assert(alignof(GSE_InputFuncLib_UnRegisterGSInputProc) == 0x000008, "Wrong alignment on GSE_InputFuncLib_UnRegisterGSInputProc");
//static_assert(sizeof(GSE_InputFuncLib_UnRegisterGSInputProc) == 0x000010, "Wrong size on GSE_InputFuncLib_UnRegisterGSInputProc");
//static_assert(offsetof(GSE_InputFuncLib_UnRegisterGSInputProc, WorldContext) == 0x000000, "Member 'GSE_InputFuncLib_UnRegisterGSInputProc::WorldContext' has a wrong offset!");
//static_assert(offsetof(GSE_InputFuncLib_UnRegisterGSInputProc, Order) == 0x000008, "Member 'GSE_InputFuncLib_UnRegisterGSInputProc::Order' has a wrong offset!");

// Function GSInput.GSE_InputFuncLib.UnRegisterInputTargetBinding
// 0x0008 (0x0008 - 0x0000)
struct GSE_InputFuncLib_UnRegisterInputTargetBinding final
{
public:
	class UGSInputTargetBinding*                  InputTargetBindingObj;                             // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
//static_assert(alignof(GSE_InputFuncLib_UnRegisterInputTargetBinding) == 0x000008, "Wrong alignment on GSE_InputFuncLib_UnRegisterInputTargetBinding");
//static_assert(sizeof(GSE_InputFuncLib_UnRegisterInputTargetBinding) == 0x000008, "Wrong size on GSE_InputFuncLib_UnRegisterInputTargetBinding");
//static_assert(offsetof(GSE_InputFuncLib_UnRegisterInputTargetBinding, InputTargetBindingObj) == 0x000000, "Member 'GSE_InputFuncLib_UnRegisterInputTargetBinding::InputTargetBindingObj' has a wrong offset!");

// Function GSInput.GSInputDisplayWidget.SetAxisValue
// 0x0020 (0x0020 - 0x0000)
struct GSInputDisplayWidget_SetAxisValue final
{
public:
	struct FKey                                   InKey;                                             // 0x0000(0x0018)(Parm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         InAxisValue;                                       // 0x0018(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1C[0x4];                                       // 0x001C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
//static_assert(alignof(GSInputDisplayWidget_SetAxisValue) == 0x000008, "Wrong alignment on GSInputDisplayWidget_SetAxisValue");
//static_assert(sizeof(GSInputDisplayWidget_SetAxisValue) == 0x000020, "Wrong size on GSInputDisplayWidget_SetAxisValue");
//static_assert(offsetof(GSInputDisplayWidget_SetAxisValue, InKey) == 0x000000, "Member 'GSInputDisplayWidget_SetAxisValue::InKey' has a wrong offset!");
//static_assert(offsetof(GSInputDisplayWidget_SetAxisValue, InAxisValue) == 0x000018, "Member 'GSInputDisplayWidget_SetAxisValue::InAxisValue' has a wrong offset!");

// Function GSInput.GSInputDisplayWidget.SetIsPress
// 0x0001 (0x0001 - 0x0000)
struct GSInputDisplayWidget_SetIsPress final
{
public:
	bool                                          InIsPress;                                         // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
//static_assert(alignof(GSInputDisplayWidget_SetIsPress) == 0x000001, "Wrong alignment on GSInputDisplayWidget_SetIsPress");
//static_assert(sizeof(GSInputDisplayWidget_SetIsPress) == 0x000001, "Wrong size on GSInputDisplayWidget_SetIsPress");
//static_assert(offsetof(GSInputDisplayWidget_SetIsPress, InIsPress) == 0x000000, "Member 'GSInputDisplayWidget_SetIsPress::InIsPress' has a wrong offset!");

// Function GSInput.GSInputDisplayWidget.SetMousePos
// 0x0010 (0x0010 - 0x0000)
struct GSInputDisplayWidget_SetMousePos final
{
public:
	struct FVector2D                              InMousePos;                                        // 0x0000(0x0010)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
//static_assert(alignof(GSInputDisplayWidget_SetMousePos) == 0x000008, "Wrong alignment on GSInputDisplayWidget_SetMousePos");
//static_assert(sizeof(GSInputDisplayWidget_SetMousePos) == 0x000010, "Wrong size on GSInputDisplayWidget_SetMousePos");
//static_assert(offsetof(GSInputDisplayWidget_SetMousePos, InMousePos) == 0x000000, "Member 'GSInputDisplayWidget_SetMousePos::InMousePos' has a wrong offset!");

// Function GSInput.GSInputActionIcon.BeginHold
// 0x0004 (0x0004 - 0x0000)
struct GSInputActionIcon_BeginHold final
{
public:
	float                                         InTotalTime;                                       // 0x0000(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
//static_assert(alignof(GSInputActionIcon_BeginHold) == 0x000004, "Wrong alignment on GSInputActionIcon_BeginHold");
//static_assert(sizeof(GSInputActionIcon_BeginHold) == 0x000004, "Wrong size on GSInputActionIcon_BeginHold");
//static_assert(offsetof(GSInputActionIcon_BeginHold, InTotalTime) == 0x000000, "Member 'GSInputActionIcon_BeginHold::InTotalTime' has a wrong offset!");

// Function GSInput.GSInputActionIcon.OpenPercentBg
// 0x0001 (0x0001 - 0x0000)
struct GSInputActionIcon_OpenPercentBg final
{
public:
	bool                                          bOpen;                                             // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
//static_assert(alignof(GSInputActionIcon_OpenPercentBg) == 0x000001, "Wrong alignment on GSInputActionIcon_OpenPercentBg");
//static_assert(sizeof(GSInputActionIcon_OpenPercentBg) == 0x000001, "Wrong size on GSInputActionIcon_OpenPercentBg");
//static_assert(offsetof(GSInputActionIcon_OpenPercentBg, bOpen) == 0x000000, "Member 'GSInputActionIcon_OpenPercentBg::bOpen' has a wrong offset!");

// Function GSInput.GSInputActionIcon.SetInputAction
// 0x0008 (0x0008 - 0x0000)
struct GSInputActionIcon_SetInputAction final
{
public:
	class UInputAction*                           InputAction_0;                                     // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
//static_assert(alignof(GSInputActionIcon_SetInputAction) == 0x000008, "Wrong alignment on GSInputActionIcon_SetInputAction");
//static_assert(sizeof(GSInputActionIcon_SetInputAction) == 0x000008, "Wrong size on GSInputActionIcon_SetInputAction");
//static_assert(offsetof(GSInputActionIcon_SetInputAction, InputAction_0) == 0x000000, "Member 'GSInputActionIcon_SetInputAction::InputAction_0' has a wrong offset!");

// Function GSInput.GSInputActionIcon.SetPercent
// 0x0004 (0x0004 - 0x0000)
struct GSInputActionIcon_SetPercent final
{
public:
	float                                         InPercent;                                         // 0x0000(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
//static_assert(alignof(GSInputActionIcon_SetPercent) == 0x000004, "Wrong alignment on GSInputActionIcon_SetPercent");
//static_assert(sizeof(GSInputActionIcon_SetPercent) == 0x000004, "Wrong size on GSInputActionIcon_SetPercent");
//static_assert(offsetof(GSInputActionIcon_SetPercent, InPercent) == 0x000000, "Member 'GSInputActionIcon_SetPercent::InPercent' has a wrong offset!");

// Function GSInput.GSInputDisplayUI.OnInputAxisChange
// 0x0020 (0x0020 - 0x0000)
struct GSInputDisplayUI_OnInputAxisChange final
{
public:
	struct FKey                                   InKey;                                             // 0x0000(0x0018)(Parm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         InAxisValue;                                       // 0x0018(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1C[0x4];                                       // 0x001C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
//static_assert(alignof(GSInputDisplayUI_OnInputAxisChange) == 0x000008, "Wrong alignment on GSInputDisplayUI_OnInputAxisChange");
//static_assert(sizeof(GSInputDisplayUI_OnInputAxisChange) == 0x000020, "Wrong size on GSInputDisplayUI_OnInputAxisChange");
//static_assert(offsetof(GSInputDisplayUI_OnInputAxisChange, InKey) == 0x000000, "Member 'GSInputDisplayUI_OnInputAxisChange::InKey' has a wrong offset!");
//static_assert(offsetof(GSInputDisplayUI_OnInputAxisChange, InAxisValue) == 0x000018, "Member 'GSInputDisplayUI_OnInputAxisChange::InAxisValue' has a wrong offset!");

// Function GSInput.GSInputDisplayUI.OnInputKeyDown
// 0x0018 (0x0018 - 0x0000)
struct GSInputDisplayUI_OnInputKeyDown final
{
public:
	struct FKey                                   InKey;                                             // 0x0000(0x0018)(Parm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
//static_assert(alignof(GSInputDisplayUI_OnInputKeyDown) == 0x000008, "Wrong alignment on GSInputDisplayUI_OnInputKeyDown");
//static_assert(sizeof(GSInputDisplayUI_OnInputKeyDown) == 0x000018, "Wrong size on GSInputDisplayUI_OnInputKeyDown");
//static_assert(offsetof(GSInputDisplayUI_OnInputKeyDown, InKey) == 0x000000, "Member 'GSInputDisplayUI_OnInputKeyDown::InKey' has a wrong offset!");

// Function GSInput.GSInputDisplayUI.OnInputKeyUp
// 0x0018 (0x0018 - 0x0000)
struct GSInputDisplayUI_OnInputKeyUp final
{
public:
	struct FKey                                   InKey;                                             // 0x0000(0x0018)(Parm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
//static_assert(alignof(GSInputDisplayUI_OnInputKeyUp) == 0x000008, "Wrong alignment on GSInputDisplayUI_OnInputKeyUp");
//static_assert(sizeof(GSInputDisplayUI_OnInputKeyUp) == 0x000018, "Wrong size on GSInputDisplayUI_OnInputKeyUp");
//static_assert(offsetof(GSInputDisplayUI_OnInputKeyUp, InKey) == 0x000000, "Member 'GSInputDisplayUI_OnInputKeyUp::InKey' has a wrong offset!");

// Function GSInput.GSInputDisplayUI.OnInputMouseButtonDoubleClick
// 0x0018 (0x0018 - 0x0000)
struct GSInputDisplayUI_OnInputMouseButtonDoubleClick final
{
public:
	struct FKey                                   InKey;                                             // 0x0000(0x0018)(Parm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
//static_assert(alignof(GSInputDisplayUI_OnInputMouseButtonDoubleClick) == 0x000008, "Wrong alignment on GSInputDisplayUI_OnInputMouseButtonDoubleClick");
//static_assert(sizeof(GSInputDisplayUI_OnInputMouseButtonDoubleClick) == 0x000018, "Wrong size on GSInputDisplayUI_OnInputMouseButtonDoubleClick");
//static_assert(offsetof(GSInputDisplayUI_OnInputMouseButtonDoubleClick, InKey) == 0x000000, "Member 'GSInputDisplayUI_OnInputMouseButtonDoubleClick::InKey' has a wrong offset!");

// Function GSInput.GSInputDisplayUI.OnInputMouseButtonDown
// 0x0018 (0x0018 - 0x0000)
struct GSInputDisplayUI_OnInputMouseButtonDown final
{
public:
	struct FKey                                   InKey;                                             // 0x0000(0x0018)(Parm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
//static_assert(alignof(GSInputDisplayUI_OnInputMouseButtonDown) == 0x000008, "Wrong alignment on GSInputDisplayUI_OnInputMouseButtonDown");
//static_assert(sizeof(GSInputDisplayUI_OnInputMouseButtonDown) == 0x000018, "Wrong size on GSInputDisplayUI_OnInputMouseButtonDown");
//static_assert(offsetof(GSInputDisplayUI_OnInputMouseButtonDown, InKey) == 0x000000, "Member 'GSInputDisplayUI_OnInputMouseButtonDown::InKey' has a wrong offset!");

// Function GSInput.GSInputDisplayUI.OnInputMouseButtonUp
// 0x0018 (0x0018 - 0x0000)
struct GSInputDisplayUI_OnInputMouseButtonUp final
{
public:
	struct FKey                                   InKey;                                             // 0x0000(0x0018)(Parm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
//static_assert(alignof(GSInputDisplayUI_OnInputMouseButtonUp) == 0x000008, "Wrong alignment on GSInputDisplayUI_OnInputMouseButtonUp");
//static_assert(sizeof(GSInputDisplayUI_OnInputMouseButtonUp) == 0x000018, "Wrong size on GSInputDisplayUI_OnInputMouseButtonUp");
//static_assert(offsetof(GSInputDisplayUI_OnInputMouseButtonUp, InKey) == 0x000000, "Member 'GSInputDisplayUI_OnInputMouseButtonUp::InKey' has a wrong offset!");

// Function GSInput.GSInputDisplayUI.OnInputMouseMove
// 0x0010 (0x0010 - 0x0000)
struct GSInputDisplayUI_OnInputMouseMove final
{
public:
	struct FVector2D                              InMousePos;                                        // 0x0000(0x0010)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
//static_assert(alignof(GSInputDisplayUI_OnInputMouseMove) == 0x000008, "Wrong alignment on GSInputDisplayUI_OnInputMouseMove");
//static_assert(sizeof(GSInputDisplayUI_OnInputMouseMove) == 0x000010, "Wrong size on GSInputDisplayUI_OnInputMouseMove");
//static_assert(offsetof(GSInputDisplayUI_OnInputMouseMove, InMousePos) == 0x000000, "Member 'GSInputDisplayUI_OnInputMouseMove::InMousePos' has a wrong offset!");

// Function GSInput.GSInputDisplayUI.OnInputMouseWheelOrGesture
// 0x0004 (0x0004 - 0x0000)
struct GSInputDisplayUI_OnInputMouseWheelOrGesture final
{
public:
	float                                         InWheelDelta;                                      // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
//static_assert(alignof(GSInputDisplayUI_OnInputMouseWheelOrGesture) == 0x000004, "Wrong alignment on GSInputDisplayUI_OnInputMouseWheelOrGesture");
//static_assert(sizeof(GSInputDisplayUI_OnInputMouseWheelOrGesture) == 0x000004, "Wrong size on GSInputDisplayUI_OnInputMouseWheelOrGesture");
//static_assert(offsetof(GSInputDisplayUI_OnInputMouseWheelOrGesture, InWheelDelta) == 0x000000, "Member 'GSInputDisplayUI_OnInputMouseWheelOrGesture::InWheelDelta' has a wrong offset!");

// Function GSInput.GSInputDisplayUI.SetIsShow
// 0x0001 (0x0001 - 0x0000)
struct GSInputDisplayUI_SetIsShow final
{
public:
	bool                                          IsShow;                                            // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
//static_assert(alignof(GSInputDisplayUI_SetIsShow) == 0x000001, "Wrong alignment on GSInputDisplayUI_SetIsShow");
//static_assert(sizeof(GSInputDisplayUI_SetIsShow) == 0x000001, "Wrong size on GSInputDisplayUI_SetIsShow");
//static_assert(offsetof(GSInputDisplayUI_SetIsShow, IsShow) == 0x000000, "Member 'GSInputDisplayUI_SetIsShow::IsShow' has a wrong offset!");

// Function GSInput.GSInputTargetBinding.ActionListener
// 0x0088 (0x0088 - 0x0000)
struct GSInputTargetBinding_ActionListener final
{
public:
	struct FInputActionInstance                   ActionInstance;                                    // 0x0000(0x0088)(ConstParm, Parm, OutParm, ReferenceParm, ContainsInstancedReference, NativeAccessSpecifierPublic)
};
//static_assert(alignof(GSInputTargetBinding_ActionListener) == 0x000008, "Wrong alignment on GSInputTargetBinding_ActionListener");
//static_assert(sizeof(GSInputTargetBinding_ActionListener) == 0x000088, "Wrong size on GSInputTargetBinding_ActionListener");
//static_assert(offsetof(GSInputTargetBinding_ActionListener, ActionInstance) == 0x000000, "Member 'GSInputTargetBinding_ActionListener::ActionInstance' has a wrong offset!");

// Function GSInput.GSInputTargetBinding.CanceledActionListener
// 0x0088 (0x0088 - 0x0000)
struct GSInputTargetBinding_CanceledActionListener final
{
public:
	struct FInputActionInstance                   ActionInstance;                                    // 0x0000(0x0088)(ConstParm, Parm, OutParm, ReferenceParm, ContainsInstancedReference, NativeAccessSpecifierPublic)
};
//static_assert(alignof(GSInputTargetBinding_CanceledActionListener) == 0x000008, "Wrong alignment on GSInputTargetBinding_CanceledActionListener");
//static_assert(sizeof(GSInputTargetBinding_CanceledActionListener) == 0x000088, "Wrong size on GSInputTargetBinding_CanceledActionListener");
//static_assert(offsetof(GSInputTargetBinding_CanceledActionListener, ActionInstance) == 0x000000, "Member 'GSInputTargetBinding_CanceledActionListener::ActionInstance' has a wrong offset!");

// Function GSInput.GSInputTargetBinding.CompletedActionListener
// 0x0088 (0x0088 - 0x0000)
struct GSInputTargetBinding_CompletedActionListener final
{
public:
	struct FInputActionInstance                   ActionInstance;                                    // 0x0000(0x0088)(ConstParm, Parm, OutParm, ReferenceParm, ContainsInstancedReference, NativeAccessSpecifierPublic)
};
//static_assert(alignof(GSInputTargetBinding_CompletedActionListener) == 0x000008, "Wrong alignment on GSInputTargetBinding_CompletedActionListener");
//static_assert(sizeof(GSInputTargetBinding_CompletedActionListener) == 0x000088, "Wrong size on GSInputTargetBinding_CompletedActionListener");
//static_assert(offsetof(GSInputTargetBinding_CompletedActionListener, ActionInstance) == 0x000000, "Member 'GSInputTargetBinding_CompletedActionListener::ActionInstance' has a wrong offset!");

// Function GSInput.GSInputTargetBinding.FetchDebugInfo
// 0x0020 (0x0020 - 0x0000)
struct GSInputTargetBinding_FetchDebugInfo final
{
public:
	TArray<class FString>                         DebugLines;                                        // 0x0000(0x0010)(Parm, OutParm, ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<struct FColor>                         DebugColors;                                       // 0x0010(0x0010)(Parm, OutParm, ZeroConstructor, NativeAccessSpecifierPublic)
};
//static_assert(alignof(GSInputTargetBinding_FetchDebugInfo) == 0x000008, "Wrong alignment on GSInputTargetBinding_FetchDebugInfo");
//static_assert(sizeof(GSInputTargetBinding_FetchDebugInfo) == 0x000020, "Wrong size on GSInputTargetBinding_FetchDebugInfo");
//static_assert(offsetof(GSInputTargetBinding_FetchDebugInfo, DebugLines) == 0x000000, "Member 'GSInputTargetBinding_FetchDebugInfo::DebugLines' has a wrong offset!");
//static_assert(offsetof(GSInputTargetBinding_FetchDebugInfo, DebugColors) == 0x000010, "Member 'GSInputTargetBinding_FetchDebugInfo::DebugColors' has a wrong offset!");

// Function GSInput.GSInputTargetBinding.GetRichTextInlineIconInfo
// 0x000C (0x000C - 0x0000)
struct GSInputTargetBinding_GetRichTextInlineIconInfo final
{
public:
	int32                                         BasePixelHeight;                                   // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         BaselineOffset;                                    // 0x0004(0x0004)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         ConnectIconOffset;                                 // 0x0008(0x0004)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
//static_assert(alignof(GSInputTargetBinding_GetRichTextInlineIconInfo) == 0x000004, "Wrong alignment on GSInputTargetBinding_GetRichTextInlineIconInfo");
//static_assert(sizeof(GSInputTargetBinding_GetRichTextInlineIconInfo) == 0x00000C, "Wrong size on GSInputTargetBinding_GetRichTextInlineIconInfo");
//static_assert(offsetof(GSInputTargetBinding_GetRichTextInlineIconInfo, BasePixelHeight) == 0x000000, "Member 'GSInputTargetBinding_GetRichTextInlineIconInfo::BasePixelHeight' has a wrong offset!");
//static_assert(offsetof(GSInputTargetBinding_GetRichTextInlineIconInfo, BaselineOffset) == 0x000004, "Member 'GSInputTargetBinding_GetRichTextInlineIconInfo::BaselineOffset' has a wrong offset!");
//static_assert(offsetof(GSInputTargetBinding_GetRichTextInlineIconInfo, ConnectIconOffset) == 0x000008, "Member 'GSInputTargetBinding_GetRichTextInlineIconInfo::ConnectIconOffset' has a wrong offset!");

// Function GSInput.GSInputTargetBinding.InputActionTrigger
// 0x0030 (0x0030 - 0x0000)
struct GSInputTargetBinding_InputActionTrigger final
{
public:
	class FString                                 ActionName;                                        // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ETriggerEvent                                 TriggerEvent;                                      // 0x0010(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EInputActionValueType                         InputActionValueType;                              // 0x0011(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_12[0x6];                                       // 0x0012(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                InputActionValue;                                  // 0x0018(0x0018)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
//static_assert(alignof(GSInputTargetBinding_InputActionTrigger) == 0x000008, "Wrong alignment on GSInputTargetBinding_InputActionTrigger");
//static_assert(sizeof(GSInputTargetBinding_InputActionTrigger) == 0x000030, "Wrong size on GSInputTargetBinding_InputActionTrigger");
//static_assert(offsetof(GSInputTargetBinding_InputActionTrigger, ActionName) == 0x000000, "Member 'GSInputTargetBinding_InputActionTrigger::ActionName' has a wrong offset!");
//static_assert(offsetof(GSInputTargetBinding_InputActionTrigger, TriggerEvent) == 0x000010, "Member 'GSInputTargetBinding_InputActionTrigger::TriggerEvent' has a wrong offset!");
//static_assert(offsetof(GSInputTargetBinding_InputActionTrigger, InputActionValueType) == 0x000011, "Member 'GSInputTargetBinding_InputActionTrigger::InputActionValueType' has a wrong offset!");
//static_assert(offsetof(GSInputTargetBinding_InputActionTrigger, InputActionValue) == 0x000018, "Member 'GSInputTargetBinding_InputActionTrigger::InputActionValue' has a wrong offset!");

// Function GSInput.GSInputTargetBinding.IsInputDebuggerOpen
// 0x0001 (0x0001 - 0x0000)
struct GSInputTargetBinding_IsInputDebuggerOpen final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
//static_assert(alignof(GSInputTargetBinding_IsInputDebuggerOpen) == 0x000001, "Wrong alignment on GSInputTargetBinding_IsInputDebuggerOpen");
//static_assert(sizeof(GSInputTargetBinding_IsInputDebuggerOpen) == 0x000001, "Wrong size on GSInputTargetBinding_IsInputDebuggerOpen");
//static_assert(offsetof(GSInputTargetBinding_IsInputDebuggerOpen, ReturnValue) == 0x000000, "Member 'GSInputTargetBinding_IsInputDebuggerOpen::ReturnValue' has a wrong offset!");

// Function GSInput.GSInputTargetBinding.OngoingActionListener
// 0x0088 (0x0088 - 0x0000)
struct GSInputTargetBinding_OngoingActionListener final
{
public:
	struct FInputActionInstance                   ActionInstance;                                    // 0x0000(0x0088)(ConstParm, Parm, OutParm, ReferenceParm, ContainsInstancedReference, NativeAccessSpecifierPublic)
};
//static_assert(alignof(GSInputTargetBinding_OngoingActionListener) == 0x000008, "Wrong alignment on GSInputTargetBinding_OngoingActionListener");
//static_assert(sizeof(GSInputTargetBinding_OngoingActionListener) == 0x000088, "Wrong size on GSInputTargetBinding_OngoingActionListener");
//static_assert(offsetof(GSInputTargetBinding_OngoingActionListener, ActionInstance) == 0x000000, "Member 'GSInputTargetBinding_OngoingActionListener::ActionInstance' has a wrong offset!");

// Function GSInput.GSInputTargetBinding.PostApplicationActivationChanged
// 0x0001 (0x0001 - 0x0000)
struct GSInputTargetBinding_PostApplicationActivationChanged final
{
public:
	bool                                          IsActive;                                          // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
//static_assert(alignof(GSInputTargetBinding_PostApplicationActivationChanged) == 0x000001, "Wrong alignment on GSInputTargetBinding_PostApplicationActivationChanged");
//static_assert(sizeof(GSInputTargetBinding_PostApplicationActivationChanged) == 0x000001, "Wrong size on GSInputTargetBinding_PostApplicationActivationChanged");
//static_assert(offsetof(GSInputTargetBinding_PostApplicationActivationChanged, IsActive) == 0x000000, "Member 'GSInputTargetBinding_PostApplicationActivationChanged::IsActive' has a wrong offset!");

// Function GSInput.GSInputTargetBinding.PostConsoleActivationStateChanged
// 0x0001 (0x0001 - 0x0000)
struct GSInputTargetBinding_PostConsoleActivationStateChanged final
{
public:
	bool                                          IsActive;                                          // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
//static_assert(alignof(GSInputTargetBinding_PostConsoleActivationStateChanged) == 0x000001, "Wrong alignment on GSInputTargetBinding_PostConsoleActivationStateChanged");
//static_assert(sizeof(GSInputTargetBinding_PostConsoleActivationStateChanged) == 0x000001, "Wrong size on GSInputTargetBinding_PostConsoleActivationStateChanged");
//static_assert(offsetof(GSInputTargetBinding_PostConsoleActivationStateChanged, IsActive) == 0x000000, "Member 'GSInputTargetBinding_PostConsoleActivationStateChanged::IsActive' has a wrong offset!");

// Function GSInput.GSInputTargetBinding.StartedActionListener
// 0x0088 (0x0088 - 0x0000)
struct GSInputTargetBinding_StartedActionListener final
{
public:
	struct FInputActionInstance                   ActionInstance;                                    // 0x0000(0x0088)(ConstParm, Parm, OutParm, ReferenceParm, ContainsInstancedReference, NativeAccessSpecifierPublic)
};
//static_assert(alignof(GSInputTargetBinding_StartedActionListener) == 0x000008, "Wrong alignment on GSInputTargetBinding_StartedActionListener");
//static_assert(sizeof(GSInputTargetBinding_StartedActionListener) == 0x000088, "Wrong size on GSInputTargetBinding_StartedActionListener");
//static_assert(offsetof(GSInputTargetBinding_StartedActionListener, ActionInstance) == 0x000000, "Member 'GSInputTargetBinding_StartedActionListener::ActionInstance' has a wrong offset!");

// Function GSInput.GSInputTargetBinding.TriggeredActionListener
// 0x0088 (0x0088 - 0x0000)
struct GSInputTargetBinding_TriggeredActionListener final
{
public:
	struct FInputActionInstance                   ActionInstance;                                    // 0x0000(0x0088)(ConstParm, Parm, OutParm, ReferenceParm, ContainsInstancedReference, NativeAccessSpecifierPublic)
};
//static_assert(alignof(GSInputTargetBinding_TriggeredActionListener) == 0x000008, "Wrong alignment on GSInputTargetBinding_TriggeredActionListener");
//static_assert(sizeof(GSInputTargetBinding_TriggeredActionListener) == 0x000088, "Wrong size on GSInputTargetBinding_TriggeredActionListener");
//static_assert(offsetof(GSInputTargetBinding_TriggeredActionListener, ActionInstance) == 0x000000, "Member 'GSInputTargetBinding_TriggeredActionListener::ActionInstance' has a wrong offset!");

// Function GSInput.GSInputTargetBinding.TryGetInlineTexture
// 0x0038 (0x0038 - 0x0000)
struct GSInputTargetBinding_TryGetInlineTexture final
{
public:
	class FString                                 ActionTag;                                         // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EGSInputRichTextMarkUpType                    MarkUpType;                                        // 0x0010(0x0001)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_11[0x7];                                       // 0x0011(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UTexture2D*                             InlineTexture;                                     // 0x0018(0x0008)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UTexture2D*                             InlineChordTexture;                                // 0x0020(0x0008)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UTexture2D*                             ConnectTexture;                                    // 0x0028(0x0008)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0030(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_31[0x7];                                       // 0x0031(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
//static_assert(alignof(GSInputTargetBinding_TryGetInlineTexture) == 0x000008, "Wrong alignment on GSInputTargetBinding_TryGetInlineTexture");
//static_assert(sizeof(GSInputTargetBinding_TryGetInlineTexture) == 0x000038, "Wrong size on GSInputTargetBinding_TryGetInlineTexture");
//static_assert(offsetof(GSInputTargetBinding_TryGetInlineTexture, ActionTag) == 0x000000, "Member 'GSInputTargetBinding_TryGetInlineTexture::ActionTag' has a wrong offset!");
//static_assert(offsetof(GSInputTargetBinding_TryGetInlineTexture, MarkUpType) == 0x000010, "Member 'GSInputTargetBinding_TryGetInlineTexture::MarkUpType' has a wrong offset!");
//static_assert(offsetof(GSInputTargetBinding_TryGetInlineTexture, InlineTexture) == 0x000018, "Member 'GSInputTargetBinding_TryGetInlineTexture::InlineTexture' has a wrong offset!");
//static_assert(offsetof(GSInputTargetBinding_TryGetInlineTexture, InlineChordTexture) == 0x000020, "Member 'GSInputTargetBinding_TryGetInlineTexture::InlineChordTexture' has a wrong offset!");
//static_assert(offsetof(GSInputTargetBinding_TryGetInlineTexture, ConnectTexture) == 0x000028, "Member 'GSInputTargetBinding_TryGetInlineTexture::ConnectTexture' has a wrong offset!");
//static_assert(offsetof(GSInputTargetBinding_TryGetInlineTexture, ReturnValue) == 0x000030, "Member 'GSInputTargetBinding_TryGetInlineTexture::ReturnValue' has a wrong offset!");

// Function GSInput.GSInputTargetBinding.TryGetTextureByAction
// 0x0040 (0x0040 - 0x0000)
struct GSInputTargetBinding_TryGetTextureByAction final
{
public:
	class UInputAction*                           InputAction;                                       // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Offset;                                            // 0x0008(0x0004)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UTexture2D*                             Texture;                                           // 0x0010(0x0008)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         BgType;                                            // 0x0018(0x0004)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         ChordOffset;                                       // 0x001C(0x0004)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UTexture2D*                             ChordTexture;                                      // 0x0020(0x0008)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UTexture2D*                             ConnectTexture;                                    // 0x0028(0x0008)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UTexture2D*                             NoneTexture;                                       // 0x0030(0x0008)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0038(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_39[0x7];                                       // 0x0039(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
//static_assert(alignof(GSInputTargetBinding_TryGetTextureByAction) == 0x000008, "Wrong alignment on GSInputTargetBinding_TryGetTextureByAction");
//static_assert(sizeof(GSInputTargetBinding_TryGetTextureByAction) == 0x000040, "Wrong size on GSInputTargetBinding_TryGetTextureByAction");
//static_assert(offsetof(GSInputTargetBinding_TryGetTextureByAction, InputAction) == 0x000000, "Member 'GSInputTargetBinding_TryGetTextureByAction::InputAction' has a wrong offset!");
//static_assert(offsetof(GSInputTargetBinding_TryGetTextureByAction, Offset) == 0x000008, "Member 'GSInputTargetBinding_TryGetTextureByAction::Offset' has a wrong offset!");
//static_assert(offsetof(GSInputTargetBinding_TryGetTextureByAction, Texture) == 0x000010, "Member 'GSInputTargetBinding_TryGetTextureByAction::Texture' has a wrong offset!");
//static_assert(offsetof(GSInputTargetBinding_TryGetTextureByAction, BgType) == 0x000018, "Member 'GSInputTargetBinding_TryGetTextureByAction::BgType' has a wrong offset!");
//static_assert(offsetof(GSInputTargetBinding_TryGetTextureByAction, ChordOffset) == 0x00001C, "Member 'GSInputTargetBinding_TryGetTextureByAction::ChordOffset' has a wrong offset!");
//static_assert(offsetof(GSInputTargetBinding_TryGetTextureByAction, ChordTexture) == 0x000020, "Member 'GSInputTargetBinding_TryGetTextureByAction::ChordTexture' has a wrong offset!");
//static_assert(offsetof(GSInputTargetBinding_TryGetTextureByAction, ConnectTexture) == 0x000028, "Member 'GSInputTargetBinding_TryGetTextureByAction::ConnectTexture' has a wrong offset!");
//static_assert(offsetof(GSInputTargetBinding_TryGetTextureByAction, NoneTexture) == 0x000030, "Member 'GSInputTargetBinding_TryGetTextureByAction::NoneTexture' has a wrong offset!");
//static_assert(offsetof(GSInputTargetBinding_TryGetTextureByAction, ReturnValue) == 0x000038, "Member 'GSInputTargetBinding_TryGetTextureByAction::ReturnValue' has a wrong offset!");

// Function GSInput.GSInputTargetBinding.TryGetTextureInfoByName
// 0x0020 (0x0020 - 0x0000)
struct GSInputTargetBinding_TryGetTextureInfoByName final
{
public:
	class FString                                 Name_0;                                            // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Offset;                                            // 0x0010(0x0004)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         BgType;                                            // 0x0014(0x0004)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0018(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_19[0x7];                                       // 0x0019(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
//static_assert(alignof(GSInputTargetBinding_TryGetTextureInfoByName) == 0x000008, "Wrong alignment on GSInputTargetBinding_TryGetTextureInfoByName");
//static_assert(sizeof(GSInputTargetBinding_TryGetTextureInfoByName) == 0x000020, "Wrong size on GSInputTargetBinding_TryGetTextureInfoByName");
//static_assert(offsetof(GSInputTargetBinding_TryGetTextureInfoByName, Name_0) == 0x000000, "Member 'GSInputTargetBinding_TryGetTextureInfoByName::Name_0' has a wrong offset!");
//static_assert(offsetof(GSInputTargetBinding_TryGetTextureInfoByName, Offset) == 0x000010, "Member 'GSInputTargetBinding_TryGetTextureInfoByName::Offset' has a wrong offset!");
//static_assert(offsetof(GSInputTargetBinding_TryGetTextureInfoByName, BgType) == 0x000014, "Member 'GSInputTargetBinding_TryGetTextureInfoByName::BgType' has a wrong offset!");
//static_assert(offsetof(GSInputTargetBinding_TryGetTextureInfoByName, ReturnValue) == 0x000018, "Member 'GSInputTargetBinding_TryGetTextureInfoByName::ReturnValue' has a wrong offset!");

// Function GSInput.GSInputWidget.IsChildGSWidgetOf
// 0x0010 (0x0010 - 0x0000)
struct GSInputWidget_IsChildGSWidgetOf final
{
public:
	class UWidget*                                PossibleParent;                                    // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0008(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
//static_assert(alignof(GSInputWidget_IsChildGSWidgetOf) == 0x000008, "Wrong alignment on GSInputWidget_IsChildGSWidgetOf");
//static_assert(sizeof(GSInputWidget_IsChildGSWidgetOf) == 0x000010, "Wrong size on GSInputWidget_IsChildGSWidgetOf");
//static_assert(offsetof(GSInputWidget_IsChildGSWidgetOf, PossibleParent) == 0x000000, "Member 'GSInputWidget_IsChildGSWidgetOf::PossibleParent' has a wrong offset!");
//static_assert(offsetof(GSInputWidget_IsChildGSWidgetOf, ReturnValue) == 0x000008, "Member 'GSInputWidget_IsChildGSWidgetOf::ReturnValue' has a wrong offset!");

// Function GSInput.GSInputWidget.OnFocusChanging
// 0x0008 (0x0008 - 0x0000)
struct GSInputWidget_OnFocusChanging final
{
public:
	struct FFocusEvent                            InFocusEvent;                                      // 0x0000(0x0008)(ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
};
//static_assert(alignof(GSInputWidget_OnFocusChanging) == 0x000004, "Wrong alignment on GSInputWidget_OnFocusChanging");
//static_assert(sizeof(GSInputWidget_OnFocusChanging) == 0x000008, "Wrong size on GSInputWidget_OnFocusChanging");
//static_assert(offsetof(GSInputWidget_OnFocusChanging, InFocusEvent) == 0x000000, "Member 'GSInputWidget_OnFocusChanging::InFocusEvent' has a wrong offset!");

// Function GSInput.GSOverlay.AddChildToGSOverlay
// 0x0010 (0x0010 - 0x0000)
struct GSOverlay_AddChildToGSOverlay final
{
public:
	class UWidget*                                Content;                                           // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UOverlaySlot*                           ReturnValue;                                       // 0x0008(0x0008)(ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
//static_assert(alignof(GSOverlay_AddChildToGSOverlay) == 0x000008, "Wrong alignment on GSOverlay_AddChildToGSOverlay");
//static_assert(sizeof(GSOverlay_AddChildToGSOverlay) == 0x000010, "Wrong size on GSOverlay_AddChildToGSOverlay");
//static_assert(offsetof(GSOverlay_AddChildToGSOverlay, Content) == 0x000000, "Member 'GSOverlay_AddChildToGSOverlay::Content' has a wrong offset!");
//static_assert(offsetof(GSOverlay_AddChildToGSOverlay, ReturnValue) == 0x000008, "Member 'GSOverlay_AddChildToGSOverlay::ReturnValue' has a wrong offset!");

// Function GSInput.GSOverlay.OnChildAddToGSOverlayCS
// 0x0008 (0x0008 - 0x0000)
struct GSOverlay_OnChildAddToGSOverlayCS final
{
public:
	class UWidget*                                Widget;                                            // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
//static_assert(alignof(GSOverlay_OnChildAddToGSOverlayCS) == 0x000008, "Wrong alignment on GSOverlay_OnChildAddToGSOverlayCS");
//static_assert(sizeof(GSOverlay_OnChildAddToGSOverlayCS) == 0x000008, "Wrong size on GSOverlay_OnChildAddToGSOverlayCS");
//static_assert(offsetof(GSOverlay_OnChildAddToGSOverlayCS, Widget) == 0x000000, "Member 'GSOverlay_OnChildAddToGSOverlayCS::Widget' has a wrong offset!");

}

