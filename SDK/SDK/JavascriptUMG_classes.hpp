#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: JavascriptUMG

#include "Basic.hpp"

#include "Engine_structs.hpp"
#include "Engine_classes.hpp"
#include "SlateCore_structs.hpp"
#include "JavascriptUMG_structs.hpp"
#include "UMG_classes.hpp"
#include "CoreUObject_structs.hpp"
#include "CoreUObject_classes.hpp"
#include "Slate_structs.hpp"


namespace SDK
{

// Class JavascriptUMG.JavascriptComboButton
// 0x0A78 (0x0BC0 - 0x0148)
class UJavascriptComboButton final : public UContentWidget
{
public:
	uint8                                         Pad_148[0x8];                                      // 0x0148(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	struct FComboButtonStyle                      ComboButtonStyle;                                  // 0x0150(0x0600)(NativeAccessSpecifierPublic)
	struct FButtonStyle                           ButtonStyle;                                       // 0x0750(0x03F0)(NativeAccessSpecifierPublic)
	TDelegate<void()>                             OnGetMenuContent;                                  // 0x0B40(0x0010)(ZeroConstructor, InstancedReference, NoDestructor, NativeAccessSpecifierPublic)
	TDelegate<void(bool Value)>                   OnMenuOpenChanged;                                 // 0x0B50(0x0010)(ZeroConstructor, InstancedReference, NoDestructor, NativeAccessSpecifierPublic)
	TDelegate<void()>                             OnComboBoxOpened;                                  // 0x0B60(0x0010)(ZeroConstructor, InstancedReference, NoDestructor, NativeAccessSpecifierPublic)
	bool                                          bIsFocusable;                                      // 0x0B70(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bHasDownArrow;                                     // 0x0B71(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_B72[0x2];                                      // 0x0B72(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	struct FSlateColor                            ForegroundColor;                                   // 0x0B74(0x0014)(NativeAccessSpecifierPublic)
	struct FSlateColor                            ButtonColorAndOpacity;                             // 0x0B88(0x0014)(NativeAccessSpecifierPublic)
	struct FMargin                                ContentPadding;                                    // 0x0B9C(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	EMenuPlacement                                MenuPlacement;                                     // 0x0BAC(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EHorizontalAlignment                          HAlign;                                            // 0x0BAD(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EVerticalAlignment                            VAlign;                                            // 0x0BAE(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_BAF[0x11];                                     // 0x0BAF(0x0011)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	void OnComboBoxOpened__DelegateSignature();
	struct FJavascriptSlateWidget OnGetContent__DelegateSignature();
	void OnIsOpenChanged__DelegateSignature(bool Value);
	void SetIsOpen(bool InIsOpen, bool bFocusMenu);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"JavascriptComboButton">();
	}
	static class UJavascriptComboButton* GetDefaultObj()
	{
		return GetDefaultObjImpl<UJavascriptComboButton>();
	}
};
//static_assert(alignof(UJavascriptComboButton) == 0x000010, "Wrong alignment on UJavascriptComboButton");
//static_assert(sizeof(UJavascriptComboButton) == 0x000BC0, "Wrong size on UJavascriptComboButton");
//static_assert(offsetof(UJavascriptComboButton, ComboButtonStyle) == 0x000150, "Member 'UJavascriptComboButton::ComboButtonStyle' has a wrong offset!");
//static_assert(offsetof(UJavascriptComboButton, ButtonStyle) == 0x000750, "Member 'UJavascriptComboButton::ButtonStyle' has a wrong offset!");
//static_assert(offsetof(UJavascriptComboButton, OnGetMenuContent) == 0x000B40, "Member 'UJavascriptComboButton::OnGetMenuContent' has a wrong offset!");
//static_assert(offsetof(UJavascriptComboButton, OnMenuOpenChanged) == 0x000B50, "Member 'UJavascriptComboButton::OnMenuOpenChanged' has a wrong offset!");
//static_assert(offsetof(UJavascriptComboButton, OnComboBoxOpened) == 0x000B60, "Member 'UJavascriptComboButton::OnComboBoxOpened' has a wrong offset!");
//static_assert(offsetof(UJavascriptComboButton, bIsFocusable) == 0x000B70, "Member 'UJavascriptComboButton::bIsFocusable' has a wrong offset!");
//static_assert(offsetof(UJavascriptComboButton, bHasDownArrow) == 0x000B71, "Member 'UJavascriptComboButton::bHasDownArrow' has a wrong offset!");
//static_assert(offsetof(UJavascriptComboButton, ForegroundColor) == 0x000B74, "Member 'UJavascriptComboButton::ForegroundColor' has a wrong offset!");
//static_assert(offsetof(UJavascriptComboButton, ButtonColorAndOpacity) == 0x000B88, "Member 'UJavascriptComboButton::ButtonColorAndOpacity' has a wrong offset!");
//static_assert(offsetof(UJavascriptComboButton, ContentPadding) == 0x000B9C, "Member 'UJavascriptComboButton::ContentPadding' has a wrong offset!");
//static_assert(offsetof(UJavascriptComboButton, MenuPlacement) == 0x000BAC, "Member 'UJavascriptComboButton::MenuPlacement' has a wrong offset!");
//static_assert(offsetof(UJavascriptComboButton, HAlign) == 0x000BAD, "Member 'UJavascriptComboButton::HAlign' has a wrong offset!");
//static_assert(offsetof(UJavascriptComboButton, VAlign) == 0x000BAE, "Member 'UJavascriptComboButton::VAlign' has a wrong offset!");

// Class JavascriptUMG.JavascriptComboButtonContext
// 0x0050 (0x0078 - 0x0028)
class UJavascriptComboButtonContext final : public UObject
{
public:
	TDelegate<void()>                             OnGetLabel;                                        // 0x0028(0x0010)(Edit, ZeroConstructor, InstancedReference, NoDestructor, NativeAccessSpecifierPublic)
	TDelegate<void()>                             OnGetTooltip;                                      // 0x0038(0x0010)(Edit, ZeroConstructor, InstancedReference, NoDestructor, NativeAccessSpecifierPublic)
	TDelegate<void()>                             OnGetIcon;                                         // 0x0048(0x0010)(Edit, ZeroConstructor, InstancedReference, NoDestructor, NativeAccessSpecifierPublic)
	TDelegate<void(class UObject* EditingObject)> OnGetWidget;                                       // 0x0058(0x0010)(Edit, ZeroConstructor, InstancedReference, NoDestructor, NativeAccessSpecifierPublic)
	TDelegate<void()>                             OnCanExecute;                                      // 0x0068(0x0010)(Edit, ZeroConstructor, InstancedReference, NoDestructor, NativeAccessSpecifierPublic)

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"JavascriptComboButtonContext">();
	}
	static class UJavascriptComboButtonContext* GetDefaultObj()
	{
		return GetDefaultObjImpl<UJavascriptComboButtonContext>();
	}
};
//static_assert(alignof(UJavascriptComboButtonContext) == 0x000008, "Wrong alignment on UJavascriptComboButtonContext");
//static_assert(sizeof(UJavascriptComboButtonContext) == 0x000078, "Wrong size on UJavascriptComboButtonContext");
//static_assert(offsetof(UJavascriptComboButtonContext, OnGetLabel) == 0x000028, "Member 'UJavascriptComboButtonContext::OnGetLabel' has a wrong offset!");
//static_assert(offsetof(UJavascriptComboButtonContext, OnGetTooltip) == 0x000038, "Member 'UJavascriptComboButtonContext::OnGetTooltip' has a wrong offset!");
//static_assert(offsetof(UJavascriptComboButtonContext, OnGetIcon) == 0x000048, "Member 'UJavascriptComboButtonContext::OnGetIcon' has a wrong offset!");
//static_assert(offsetof(UJavascriptComboButtonContext, OnGetWidget) == 0x000058, "Member 'UJavascriptComboButtonContext::OnGetWidget' has a wrong offset!");
//static_assert(offsetof(UJavascriptComboButtonContext, OnCanExecute) == 0x000068, "Member 'UJavascriptComboButtonContext::OnCanExecute' has a wrong offset!");

// Class JavascriptUMG.JavascriptTextModel
// 0x0010 (0x0038 - 0x0028)
class UJavascriptTextModel final : public UObject
{
public:
	uint8                                         Pad_28[0x10];                                      // 0x0028(0x0010)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	struct FJavascriptSlateTextRun CreateRun(const struct FTextBlockStyle& MessageTextStyle, int32 BeginIndex, int32 EndIndex);
	class FString GetString();
	void SetString(const class FString& String);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"JavascriptTextModel">();
	}
	static class UJavascriptTextModel* GetDefaultObj()
	{
		return GetDefaultObjImpl<UJavascriptTextModel>();
	}
};
//static_assert(alignof(UJavascriptTextModel) == 0x000008, "Wrong alignment on UJavascriptTextModel");
//static_assert(sizeof(UJavascriptTextModel) == 0x000038, "Wrong size on UJavascriptTextModel");

// Class JavascriptUMG.JavascriptMultiLineEditableTextBox
// 0x0030 (0x1200 - 0x11D0)
class UJavascriptMultiLineEditableTextBox final : public UMultiLineEditableTextBox
{
public:
	FMulticastInlineDelegateProperty_             OnVScrollBarUserScrolled;                          // 0x11C8(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	TDelegate<void(struct FJavascriptTextLayout& TextLayout)> GetTextDelegate;                                   // 0x11D8(0x0010)(ZeroConstructor, InstancedReference, NoDestructor, NativeAccessSpecifierPublic)
	TDelegate<void(const class FString& InText, struct FJavascriptTextLayout& TextLayout)> SetTextDelegate;                                   // 0x11E8(0x0010)(ZeroConstructor, InstancedReference, NoDestructor, NativeAccessSpecifierPublic)
	bool                                          bAlwaysShowScrollbars;                             // 0x11F8(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_11F9[0x7];                                     // 0x11F9(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	class FString GetText__DelegateSignature(const struct FJavascriptTextLayout& TextLayout);
	void GoTo(int32 Line, int32 Offset);
	void OnVScrollBarUserScrolled__DelegateSignature(float Offset);
	void Refresh();
	void ScrollTo(int32 Line, int32 Offset);
	void SetText__DelegateSignature(const class FString& InText, const struct FJavascriptTextLayout& TextLayout);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"JavascriptMultiLineEditableTextBox">();
	}
	static class UJavascriptMultiLineEditableTextBox* GetDefaultObj()
	{
		return GetDefaultObjImpl<UJavascriptMultiLineEditableTextBox>();
	}
};
//static_assert(alignof(UJavascriptMultiLineEditableTextBox) == 0x000010, "Wrong alignment on UJavascriptMultiLineEditableTextBox");
//static_assert(sizeof(UJavascriptMultiLineEditableTextBox) == 0x001200, "Wrong size on UJavascriptMultiLineEditableTextBox");
//static_assert(offsetof(UJavascriptMultiLineEditableTextBox, OnVScrollBarUserScrolled) == 0x0011C8, "Member 'UJavascriptMultiLineEditableTextBox::OnVScrollBarUserScrolled' has a wrong offset!");
//static_assert(offsetof(UJavascriptMultiLineEditableTextBox, GetTextDelegate) == 0x0011D8, "Member 'UJavascriptMultiLineEditableTextBox::GetTextDelegate' has a wrong offset!");
//static_assert(offsetof(UJavascriptMultiLineEditableTextBox, SetTextDelegate) == 0x0011E8, "Member 'UJavascriptMultiLineEditableTextBox::SetTextDelegate' has a wrong offset!");
//static_assert(offsetof(UJavascriptMultiLineEditableTextBox, bAlwaysShowScrollbars) == 0x0011F8, "Member 'UJavascriptMultiLineEditableTextBox::bAlwaysShowScrollbars' has a wrong offset!");

// Class JavascriptUMG.JavascriptGameViewport
// 0x0050 (0x0198 - 0x0148)
class UJavascriptGameViewport final : public UContentWidget
{
public:
	struct FLinearColor                           BackgroundColor;                                   // 0x0148(0x0010)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_158[0x40];                                     // 0x0158(0x0040)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	void SetViewLocation(const struct FVector& Location);
	void SetViewRotation(const struct FRotator& Rotation);
	class AActor* Spawn(TSubclassOf<class AActor> ActorClass);

	struct FVector GetViewLocation() const;
	class UWorld* GetViewportWorld() const;
	struct FRotator GetViewRotation() const;

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"JavascriptGameViewport">();
	}
	static class UJavascriptGameViewport* GetDefaultObj()
	{
		return GetDefaultObjImpl<UJavascriptGameViewport>();
	}
};
//static_assert(alignof(UJavascriptGameViewport) == 0x000008, "Wrong alignment on UJavascriptGameViewport");
//static_assert(sizeof(UJavascriptGameViewport) == 0x000198, "Wrong size on UJavascriptGameViewport");
//static_assert(offsetof(UJavascriptGameViewport, BackgroundColor) == 0x000148, "Member 'UJavascriptGameViewport::BackgroundColor' has a wrong offset!");

// Class JavascriptUMG.JavascriptIntSpinBox
// 0x0740 (0x0870 - 0x0130)
class UJavascriptIntSpinBox final : public UWidget
{
public:
	int32                                         Value;                                             // 0x0130(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TDelegate<void()>                             ValueDelegate;                                     // 0x0134(0x0010)(ZeroConstructor, InstancedReference, NoDestructor, NativeAccessSpecifierPublic)
	uint8                                         Pad_144[0xC];                                      // 0x0144(0x000C)(Fixing Size After Last Property [ Dumper-7 ])
	struct FSpinBoxStyle                          WidgetStyle;                                       // 0x0150(0x0600)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
	class USlateWidgetStyleAsset*                 Style;                                             // 0x0750(0x0008)(ZeroConstructor, Deprecated, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Delta;                                             // 0x0758(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         SliderExponent;                                    // 0x075C(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FSlateFontInfo                         Font;                                              // 0x0760(0x0088)(Edit, BlueprintVisible, BlueprintReadOnly, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ETextJustify                                  Justification;                                     // 0x07E8(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_7E9[0x3];                                      // 0x07E9(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         MinDesiredWidth;                                   // 0x07EC(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ClearKeyboardFocusOnCommit;                        // 0x07F0(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          SelectAllTextOnCommit;                             // 0x07F1(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_7F2[0x2];                                      // 0x07F2(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	struct FSlateColor                            ForegroundColor;                                   // 0x07F4(0x0014)(Edit, BlueprintVisible, BlueprintReadOnly, NativeAccessSpecifierPublic)
	FMulticastInlineDelegateProperty_             OnValueChanged;                                    // 0x0808(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	FMulticastInlineDelegateProperty_             OnValueCommitted;                                  // 0x0818(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	FMulticastInlineDelegateProperty_             OnBeginSliderMovement;                             // 0x0828(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	FMulticastInlineDelegateProperty_             OnEndSliderMovement;                               // 0x0838(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	uint8                                         bOverride_MinValue : 1;                            // 0x0848(0x0001)(BitIndex: 0x00, PropSize: 0x0001 (Edit, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected))
	uint8                                         bOverride_MaxValue : 1;                            // 0x0848(0x0001)(BitIndex: 0x01, PropSize: 0x0001 (Edit, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected))
	uint8                                         bOverride_MinSliderValue : 1;                      // 0x0848(0x0001)(BitIndex: 0x02, PropSize: 0x0001 (Edit, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected))
	uint8                                         bOverride_MaxSliderValue : 1;                      // 0x0848(0x0001)(BitIndex: 0x03, PropSize: 0x0001 (Edit, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected))
	uint8                                         Pad_849[0x3];                                      // 0x0849(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         MinValue;                                          // 0x084C(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	int32                                         MaxValue;                                          // 0x0850(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	int32                                         MinSliderValue;                                    // 0x0854(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	int32                                         MaxSliderValue;                                    // 0x0858(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_85C[0x14];                                     // 0x085C(0x0014)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	void ClearMaxSliderValue();
	void ClearMaxValue();
	void ClearMinSliderValue();
	void ClearMinValue();
	void OnSpinBoxBeginSliderMovement__DelegateSignature();
	void OnSpinBoxValueChangedEvent__DelegateSignature(int32 InValue);
	void OnSpinBoxValueCommittedEvent__DelegateSignature(int32 InValue, ETextCommit CommitMethod);
	void SetForegroundColor(const struct FSlateColor& InForegroundColor);
	void SetMaxSliderValue(int32 NewValue);
	void SetMaxValue(int32 NewValue);
	void SetMinSliderValue(int32 NewValue);
	void SetMinValue(int32 NewValue);
	void SetValue(int32 NewValue);

	int32 GetMaxSliderValue() const;
	int32 GetMaxValue() const;
	int32 GetMinSliderValue() const;
	int32 GetMinValue() const;
	int32 GetValue() const;

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"JavascriptIntSpinBox">();
	}
	static class UJavascriptIntSpinBox* GetDefaultObj()
	{
		return GetDefaultObjImpl<UJavascriptIntSpinBox>();
	}
};
//static_assert(alignof(UJavascriptIntSpinBox) == 0x000010, "Wrong alignment on UJavascriptIntSpinBox");
//static_assert(sizeof(UJavascriptIntSpinBox) == 0x000870, "Wrong size on UJavascriptIntSpinBox");
//static_assert(offsetof(UJavascriptIntSpinBox, Value) == 0x000130, "Member 'UJavascriptIntSpinBox::Value' has a wrong offset!");
//static_assert(offsetof(UJavascriptIntSpinBox, ValueDelegate) == 0x000134, "Member 'UJavascriptIntSpinBox::ValueDelegate' has a wrong offset!");
//static_assert(offsetof(UJavascriptIntSpinBox, WidgetStyle) == 0x000150, "Member 'UJavascriptIntSpinBox::WidgetStyle' has a wrong offset!");
//static_assert(offsetof(UJavascriptIntSpinBox, Style) == 0x000750, "Member 'UJavascriptIntSpinBox::Style' has a wrong offset!");
//static_assert(offsetof(UJavascriptIntSpinBox, Delta) == 0x000758, "Member 'UJavascriptIntSpinBox::Delta' has a wrong offset!");
//static_assert(offsetof(UJavascriptIntSpinBox, SliderExponent) == 0x00075C, "Member 'UJavascriptIntSpinBox::SliderExponent' has a wrong offset!");
//static_assert(offsetof(UJavascriptIntSpinBox, Font) == 0x000760, "Member 'UJavascriptIntSpinBox::Font' has a wrong offset!");
//static_assert(offsetof(UJavascriptIntSpinBox, Justification) == 0x0007E8, "Member 'UJavascriptIntSpinBox::Justification' has a wrong offset!");
//static_assert(offsetof(UJavascriptIntSpinBox, MinDesiredWidth) == 0x0007EC, "Member 'UJavascriptIntSpinBox::MinDesiredWidth' has a wrong offset!");
//static_assert(offsetof(UJavascriptIntSpinBox, ClearKeyboardFocusOnCommit) == 0x0007F0, "Member 'UJavascriptIntSpinBox::ClearKeyboardFocusOnCommit' has a wrong offset!");
//static_assert(offsetof(UJavascriptIntSpinBox, SelectAllTextOnCommit) == 0x0007F1, "Member 'UJavascriptIntSpinBox::SelectAllTextOnCommit' has a wrong offset!");
//static_assert(offsetof(UJavascriptIntSpinBox, ForegroundColor) == 0x0007F4, "Member 'UJavascriptIntSpinBox::ForegroundColor' has a wrong offset!");
//static_assert(offsetof(UJavascriptIntSpinBox, OnValueChanged) == 0x000808, "Member 'UJavascriptIntSpinBox::OnValueChanged' has a wrong offset!");
//static_assert(offsetof(UJavascriptIntSpinBox, OnValueCommitted) == 0x000818, "Member 'UJavascriptIntSpinBox::OnValueCommitted' has a wrong offset!");
//static_assert(offsetof(UJavascriptIntSpinBox, OnBeginSliderMovement) == 0x000828, "Member 'UJavascriptIntSpinBox::OnBeginSliderMovement' has a wrong offset!");
//static_assert(offsetof(UJavascriptIntSpinBox, OnEndSliderMovement) == 0x000838, "Member 'UJavascriptIntSpinBox::OnEndSliderMovement' has a wrong offset!");
//static_assert(offsetof(UJavascriptIntSpinBox, MinValue) == 0x00084C, "Member 'UJavascriptIntSpinBox::MinValue' has a wrong offset!");
//static_assert(offsetof(UJavascriptIntSpinBox, MaxValue) == 0x000850, "Member 'UJavascriptIntSpinBox::MaxValue' has a wrong offset!");
//static_assert(offsetof(UJavascriptIntSpinBox, MinSliderValue) == 0x000854, "Member 'UJavascriptIntSpinBox::MinSliderValue' has a wrong offset!");
//static_assert(offsetof(UJavascriptIntSpinBox, MaxSliderValue) == 0x000858, "Member 'UJavascriptIntSpinBox::MaxSliderValue' has a wrong offset!");

// Class JavascriptUMG.JavascriptTreeView
// 0x2818 (0x2A60 - 0x0248)
#pragma pack(push, 0x1)
class alignas(0x10) UJavascriptTreeView : public UListViewBase
{
public:
	TDelegate<void(class UObject* Object, class FName ID, class UJavascriptTreeView* Instance)> OnGenerateRowEvent;                                // 0x0248(0x0010)(Edit, ZeroConstructor, InstancedReference, NoDestructor, NativeAccessSpecifierPublic)
	TDelegate<void(class UObject* Item, bool bExpanded, class UJavascriptTreeView* Instance)> OnExpansionChanged;                                // 0x0258(0x0010)(Edit, ZeroConstructor, InstancedReference, NoDestructor, NativeAccessSpecifierPublic)
	TDelegate<void(class UJavascriptTreeView* Instance)> OnContextMenuOpening;                              // 0x0268(0x0010)(Edit, ZeroConstructor, InstancedReference, NoDestructor, NativeAccessSpecifierPublic)
	TDelegate<void(class UObject* Item, class UJavascriptTreeView* Instance)> OnGetChildren;                                     // 0x0278(0x0010)(Edit, ZeroConstructor, InstancedReference, NoDestructor, NativeAccessSpecifierPublic)
	class UJavascriptContext*                     JavascriptContext;                                 // 0x0288(0x0008)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<class UObject*>                        Items;                                             // 0x0290(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
	struct FHeaderRowStyle                        HeaderRowStyle;                                    // 0x02A0(0x1260)(Edit, NativeAccessSpecifierPublic)
	struct FTableRowStyle                         TableRowStyle;                                     // 0x1500(0x0D50)(Edit, NativeAccessSpecifierPublic)
	struct FScrollBarStyle                        ScrollBarStyle;                                    // 0x2250(0x0770)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
	ESelectionMode                                SelectionMode;                                     // 0x29C0(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_29C1[0x7];                                     // 0x29C1(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<class UObject*>                        Children;                                          // 0x29C8(0x0010)(BlueprintVisible, ZeroConstructor, Transient, NativeAccessSpecifierPublic)
	TArray<struct FJavascriptColumn>              Columns;                                           // 0x29D8(0x0010)(BlueprintVisible, ZeroConstructor, Transient, ContainsInstancedReference, NativeAccessSpecifierPublic)
	uint8                                         Pad_29E8[0x10];                                    // 0x29E8(0x0010)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<class UWidget*>                        ColumnWidgets;                                     // 0x29F8(0x0010)(ExportObject, ZeroConstructor, Transient, ContainsInstancedReference, NativeAccessSpecifierPublic)
	uint8                                         Pad_2A08[0x50];                                    // 0x2A08(0x0050)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	void ClearDoubleClickSelection();
	void GetDoubleClickedItems(TArray<class UObject*>* OutItems);
	bool GetSelectedItems(TArray<class UObject*>* OutItems);
	bool IsDoubleClickSelection(class UObject* SelectedItem);
	bool IsItemExpanded(class UObject* InItem);
	class UWidget* OnContextMenuOpening__DelegateSignature(class UJavascriptTreeView* Instance);
	void OnDoubleClick(class UObject* Object);
	void OnExpansionChanged__DelegateSignature(class UObject* Item, bool bExpanded, class UJavascriptTreeView* Instance);
	class UWidget* OnGenerateRow__DelegateSignature(class UObject* Object, class FName ID, class UJavascriptTreeView* Instance);
	void OnGetChildrenUObject__DelegateSignature(class UObject* Item, class UJavascriptTreeView* Instance);
	void OnSelectionChanged(class UObject* Object, ESelectInfo Type);
	void RequestTreeRefresh();
	void SetDoubleClickSelection(class UObject* SelectedItem);
	void SetItemExpansion(class UObject* InItem, bool InShouldExpandItem);
	void SetSelection(class UObject* SoleSelectedItem);
	void SetSingleExpandedItem(class UObject* InItem);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"JavascriptTreeView">();
	}
	static class UJavascriptTreeView* GetDefaultObj()
	{
		return GetDefaultObjImpl<UJavascriptTreeView>();
	}
};
#pragma pack(pop)
//static_assert(alignof(UJavascriptTreeView) == 0x000010, "Wrong alignment on UJavascriptTreeView");
//static_assert(sizeof(UJavascriptTreeView) == 0x002A60, "Wrong size on UJavascriptTreeView");
//static_assert(offsetof(UJavascriptTreeView, OnGenerateRowEvent) == 0x000248, "Member 'UJavascriptTreeView::OnGenerateRowEvent' has a wrong offset!");
//static_assert(offsetof(UJavascriptTreeView, OnExpansionChanged) == 0x000258, "Member 'UJavascriptTreeView::OnExpansionChanged' has a wrong offset!");
//static_assert(offsetof(UJavascriptTreeView, OnContextMenuOpening) == 0x000268, "Member 'UJavascriptTreeView::OnContextMenuOpening' has a wrong offset!");
//static_assert(offsetof(UJavascriptTreeView, OnGetChildren) == 0x000278, "Member 'UJavascriptTreeView::OnGetChildren' has a wrong offset!");
//static_assert(offsetof(UJavascriptTreeView, JavascriptContext) == 0x000288, "Member 'UJavascriptTreeView::JavascriptContext' has a wrong offset!");
//static_assert(offsetof(UJavascriptTreeView, Items) == 0x000290, "Member 'UJavascriptTreeView::Items' has a wrong offset!");
//static_assert(offsetof(UJavascriptTreeView, HeaderRowStyle) == 0x0002A0, "Member 'UJavascriptTreeView::HeaderRowStyle' has a wrong offset!");
//static_assert(offsetof(UJavascriptTreeView, TableRowStyle) == 0x001500, "Member 'UJavascriptTreeView::TableRowStyle' has a wrong offset!");
//static_assert(offsetof(UJavascriptTreeView, ScrollBarStyle) == 0x002250, "Member 'UJavascriptTreeView::ScrollBarStyle' has a wrong offset!");
//static_assert(offsetof(UJavascriptTreeView, SelectionMode) == 0x0029C0, "Member 'UJavascriptTreeView::SelectionMode' has a wrong offset!");
//static_assert(offsetof(UJavascriptTreeView, Children) == 0x0029C8, "Member 'UJavascriptTreeView::Children' has a wrong offset!");
//static_assert(offsetof(UJavascriptTreeView, Columns) == 0x0029D8, "Member 'UJavascriptTreeView::Columns' has a wrong offset!");
//static_assert(offsetof(UJavascriptTreeView, ColumnWidgets) == 0x0029F8, "Member 'UJavascriptTreeView::ColumnWidgets' has a wrong offset!");

// Class JavascriptUMG.JavascriptListView
// 0x0010 (0x2A70 - 0x2A60)
class UJavascriptListView final : public UJavascriptTreeView
{
public:
	float                                         ItemHeight;                                        // 0x2A58(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2A5C[0x14];                                    // 0x2A5C(0x0014)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	void OnClick(class UObject* Object);
	void RequestListRefresh();

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"JavascriptListView">();
	}
	static class UJavascriptListView* GetDefaultObj()
	{
		return GetDefaultObjImpl<UJavascriptListView>();
	}
};
//static_assert(alignof(UJavascriptListView) == 0x000010, "Wrong alignment on UJavascriptListView");
//static_assert(sizeof(UJavascriptListView) == 0x002A70, "Wrong size on UJavascriptListView");
//static_assert(offsetof(UJavascriptListView, ItemHeight) == 0x002A58, "Member 'UJavascriptListView::ItemHeight' has a wrong offset!");

// Class JavascriptUMG.JavascriptMenuContext
// 0x0080 (0x00A8 - 0x0028)
class UJavascriptMenuContext final : public UObject
{
public:
	class FText                                   Description;                                       // 0x0028(0x0018)(Edit, NativeAccessSpecifierPublic)
	class FText                                   ToolTip;                                           // 0x0040(0x0018)(Edit, NativeAccessSpecifierPublic)
	struct FJavascriptSlateIcon                   Icon;                                              // 0x0058(0x0018)(Edit, NoDestructor, NativeAccessSpecifierPublic)
	EJavasrciptUserInterfaceActionType            ActionType;                                        // 0x0070(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_71[0x3];                                       // 0x0071(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	TDelegate<void()>                             OnCanExecute;                                      // 0x0074(0x0010)(Edit, ZeroConstructor, InstancedReference, NoDestructor, NativeAccessSpecifierPublic)
	TDelegate<void()>                             OnExecute;                                         // 0x0084(0x0010)(Edit, ZeroConstructor, InstancedReference, NoDestructor, NativeAccessSpecifierPublic)
	TDelegate<void()>                             OnGetActionCheckState;                             // 0x0094(0x0010)(Edit, ZeroConstructor, InstancedReference, NoDestructor, NativeAccessSpecifierPublic)
	uint8                                         Pad_A4[0x4];                                       // 0x00A4(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"JavascriptMenuContext">();
	}
	static class UJavascriptMenuContext* GetDefaultObj()
	{
		return GetDefaultObjImpl<UJavascriptMenuContext>();
	}
};
//static_assert(alignof(UJavascriptMenuContext) == 0x000008, "Wrong alignment on UJavascriptMenuContext");
//static_assert(sizeof(UJavascriptMenuContext) == 0x0000A8, "Wrong size on UJavascriptMenuContext");
//static_assert(offsetof(UJavascriptMenuContext, Description) == 0x000028, "Member 'UJavascriptMenuContext::Description' has a wrong offset!");
//static_assert(offsetof(UJavascriptMenuContext, ToolTip) == 0x000040, "Member 'UJavascriptMenuContext::ToolTip' has a wrong offset!");
//static_assert(offsetof(UJavascriptMenuContext, Icon) == 0x000058, "Member 'UJavascriptMenuContext::Icon' has a wrong offset!");
//static_assert(offsetof(UJavascriptMenuContext, ActionType) == 0x000070, "Member 'UJavascriptMenuContext::ActionType' has a wrong offset!");
//static_assert(offsetof(UJavascriptMenuContext, OnCanExecute) == 0x000074, "Member 'UJavascriptMenuContext::OnCanExecute' has a wrong offset!");
//static_assert(offsetof(UJavascriptMenuContext, OnExecute) == 0x000084, "Member 'UJavascriptMenuContext::OnExecute' has a wrong offset!");
//static_assert(offsetof(UJavascriptMenuContext, OnGetActionCheckState) == 0x000094, "Member 'UJavascriptMenuContext::OnGetActionCheckState' has a wrong offset!");

// Class JavascriptUMG.JavascriptRichTextBlockHyperlinkDecorator
// 0x0028 (0x0050 - 0x0028)
class UJavascriptRichTextBlockHyperlinkDecorator final : public URichTextBlockDecorator
{
public:
	class FString                                 HyperlinkId;                                       // 0x0028(0x0010)(Edit, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	FMulticastInlineDelegateProperty_             OnClick;                                           // 0x0038(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	uint8                                         Pad_48[0x8];                                       // 0x0048(0x0008)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	class FString GetMetaData(const class FString& Key);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"JavascriptRichTextBlockHyperlinkDecorator">();
	}
	static class UJavascriptRichTextBlockHyperlinkDecorator* GetDefaultObj()
	{
		return GetDefaultObjImpl<UJavascriptRichTextBlockHyperlinkDecorator>();
	}
};
//static_assert(alignof(UJavascriptRichTextBlockHyperlinkDecorator) == 0x000008, "Wrong alignment on UJavascriptRichTextBlockHyperlinkDecorator");
//static_assert(sizeof(UJavascriptRichTextBlockHyperlinkDecorator) == 0x000050, "Wrong size on UJavascriptRichTextBlockHyperlinkDecorator");
//static_assert(offsetof(UJavascriptRichTextBlockHyperlinkDecorator, HyperlinkId) == 0x000028, "Member 'UJavascriptRichTextBlockHyperlinkDecorator::HyperlinkId' has a wrong offset!");
//static_assert(offsetof(UJavascriptRichTextBlockHyperlinkDecorator, OnClick) == 0x000038, "Member 'UJavascriptRichTextBlockHyperlinkDecorator::OnClick' has a wrong offset!");

// Class JavascriptUMG.JavascriptSearchBox
// 0x0088 (0x01B8 - 0x0130)
class UJavascriptSearchBox final : public UWidget
{
public:
	class UJavascriptContext*                     JavascriptContext;                                 // 0x0130(0x0008)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	FMulticastInlineDelegateProperty_             OnTextChanged;                                     // 0x0138(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	FMulticastInlineDelegateProperty_             OnTextCommitted;                                   // 0x0148(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	class FText                                   Text;                                              // 0x0158(0x0018)(Edit, NativeAccessSpecifierPublic)
	TDelegate<void()>                             TextDelegate;                                      // 0x0170(0x0010)(ZeroConstructor, InstancedReference, NoDestructor, NativeAccessSpecifierPublic)
	class FText                                   HintText;                                          // 0x0180(0x0018)(Edit, BlueprintVisible, BlueprintReadOnly, NativeAccessSpecifierPublic)
	TDelegate<void()>                             HintTextDelegate;                                  // 0x0198(0x0010)(ZeroConstructor, InstancedReference, NoDestructor, NativeAccessSpecifierPublic)
	uint8                                         Pad_1A8[0x10];                                     // 0x01A8(0x0010)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	void OnEditableTextChangedEvent__DelegateSignature(const class FText& Text_0);
	void OnEditableTextCommittedEvent__DelegateSignature(const class FText& Text_0, ETextCommit CommitMethod);
	struct FEventReply OnKeyDown(const struct FGeometry& MyGeometry, const struct FKeyEvent& InKeyEvent);
	void SetHintText(const class FText& InHintText);
	void SetText(const class FText& InText);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"JavascriptSearchBox">();
	}
	static class UJavascriptSearchBox* GetDefaultObj()
	{
		return GetDefaultObjImpl<UJavascriptSearchBox>();
	}
};
//static_assert(alignof(UJavascriptSearchBox) == 0x000008, "Wrong alignment on UJavascriptSearchBox");
//static_assert(sizeof(UJavascriptSearchBox) == 0x0001B8, "Wrong size on UJavascriptSearchBox");
//static_assert(offsetof(UJavascriptSearchBox, JavascriptContext) == 0x000130, "Member 'UJavascriptSearchBox::JavascriptContext' has a wrong offset!");
//static_assert(offsetof(UJavascriptSearchBox, OnTextChanged) == 0x000138, "Member 'UJavascriptSearchBox::OnTextChanged' has a wrong offset!");
//static_assert(offsetof(UJavascriptSearchBox, OnTextCommitted) == 0x000148, "Member 'UJavascriptSearchBox::OnTextCommitted' has a wrong offset!");
//static_assert(offsetof(UJavascriptSearchBox, Text) == 0x000158, "Member 'UJavascriptSearchBox::Text' has a wrong offset!");
//static_assert(offsetof(UJavascriptSearchBox, TextDelegate) == 0x000170, "Member 'UJavascriptSearchBox::TextDelegate' has a wrong offset!");
//static_assert(offsetof(UJavascriptSearchBox, HintText) == 0x000180, "Member 'UJavascriptSearchBox::HintText' has a wrong offset!");
//static_assert(offsetof(UJavascriptSearchBox, HintTextDelegate) == 0x000198, "Member 'UJavascriptSearchBox::HintTextDelegate' has a wrong offset!");

// Class JavascriptUMG.JavascriptToolbarButtonContext
// 0x0070 (0x0098 - 0x0028)
class UJavascriptToolbarButtonContext final : public UObject
{
public:
	TDelegate<void()>                             OnGetLabel;                                        // 0x0028(0x0010)(Edit, ZeroConstructor, InstancedReference, NoDestructor, NativeAccessSpecifierPublic)
	TDelegate<void()>                             OnGetTooltip;                                      // 0x0038(0x0010)(Edit, ZeroConstructor, InstancedReference, NoDestructor, NativeAccessSpecifierPublic)
	TDelegate<void()>                             OnGetIcon;                                         // 0x0048(0x0010)(Edit, ZeroConstructor, InstancedReference, NoDestructor, NativeAccessSpecifierPublic)
	TDelegate<void(class UObject* EditingObject)> OnExecuteAction;                                   // 0x0058(0x0010)(Edit, ZeroConstructor, InstancedReference, NoDestructor, NativeAccessSpecifierPublic)
	TDelegate<void(class UObject* EditingObject)> OnCanExecuteAction;                                // 0x0068(0x0010)(Edit, ZeroConstructor, InstancedReference, NoDestructor, NativeAccessSpecifierPublic)
	TDelegate<void(class UObject* EditingObject)> OnIsActionChecked;                                 // 0x0078(0x0010)(Edit, ZeroConstructor, InstancedReference, NoDestructor, NativeAccessSpecifierPublic)
	TDelegate<void(class UObject* EditingObject)> OnIsActionButtonVisible;                           // 0x0088(0x0010)(Edit, ZeroConstructor, InstancedReference, NoDestructor, NativeAccessSpecifierPublic)

public:
	bool BoolDelegate__DelegateSignature();
	struct FJavascriptSlateIcon IconDelegate__DelegateSignature();
	bool JavascriptCanExecuteActionWithEditingObject__DelegateSignature(class UObject* EditingObject);
	void JavascriptExecuteActionWithEditingObject__DelegateSignature(class UObject* EditingObject);
	void MarkReferencedObject();
	class FText TextDelegate__DelegateSignature();
	void UnmarkReferencedObject();

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"JavascriptToolbarButtonContext">();
	}
	static class UJavascriptToolbarButtonContext* GetDefaultObj()
	{
		return GetDefaultObjImpl<UJavascriptToolbarButtonContext>();
	}
};
//static_assert(alignof(UJavascriptToolbarButtonContext) == 0x000008, "Wrong alignment on UJavascriptToolbarButtonContext");
//static_assert(sizeof(UJavascriptToolbarButtonContext) == 0x000098, "Wrong size on UJavascriptToolbarButtonContext");
//static_assert(offsetof(UJavascriptToolbarButtonContext, OnGetLabel) == 0x000028, "Member 'UJavascriptToolbarButtonContext::OnGetLabel' has a wrong offset!");
//static_assert(offsetof(UJavascriptToolbarButtonContext, OnGetTooltip) == 0x000038, "Member 'UJavascriptToolbarButtonContext::OnGetTooltip' has a wrong offset!");
//static_assert(offsetof(UJavascriptToolbarButtonContext, OnGetIcon) == 0x000048, "Member 'UJavascriptToolbarButtonContext::OnGetIcon' has a wrong offset!");
//static_assert(offsetof(UJavascriptToolbarButtonContext, OnExecuteAction) == 0x000058, "Member 'UJavascriptToolbarButtonContext::OnExecuteAction' has a wrong offset!");
//static_assert(offsetof(UJavascriptToolbarButtonContext, OnCanExecuteAction) == 0x000068, "Member 'UJavascriptToolbarButtonContext::OnCanExecuteAction' has a wrong offset!");
//static_assert(offsetof(UJavascriptToolbarButtonContext, OnIsActionChecked) == 0x000078, "Member 'UJavascriptToolbarButtonContext::OnIsActionChecked' has a wrong offset!");
//static_assert(offsetof(UJavascriptToolbarButtonContext, OnIsActionButtonVisible) == 0x000088, "Member 'UJavascriptToolbarButtonContext::OnIsActionButtonVisible' has a wrong offset!");

// Class JavascriptUMG.JavascriptStyleSetLibrary
// 0x30F8 (0x3120 - 0x0028)
class UJavascriptStyleSetLibrary final : public UBlueprintFunctionLibrary
{
public:
	struct FSlateColor                            SlateColor;                                        // 0x0028(0x0014)(NativeAccessSpecifierPublic)
	uint8                                         Pad_3C[0x4];                                       // 0x003C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FSlateBrush                            SlateBrush;                                        // 0x0040(0x00D0)(NativeAccessSpecifierPublic)
	struct FButtonStyle                           ButtonStyle;                                       // 0x0110(0x03F0)(NativeAccessSpecifierPublic)
	struct FTextBlockStyle                        TextBlockStyle;                                    // 0x0500(0x0370)(NativeAccessSpecifierPublic)
	struct FEditableTextStyle                     EditableTextStyle;                                 // 0x0870(0x0320)(NativeAccessSpecifierPublic)
	struct FEditableTextBoxStyle                  EditableTextBoxStyle;                              // 0x0B90(0x0BD0)(NativeAccessSpecifierPublic)
	struct FCheckBoxStyle                         CheckBoxStyle;                                     // 0x1760(0x0AD0)(NativeAccessSpecifierPublic)
	struct FComboBoxStyle                         ComboBoxStyle;                                     // 0x2230(0x0660)(NativeAccessSpecifierPublic)
	struct FComboButtonStyle                      ComboButtonStyle;                                  // 0x2890(0x0600)(NativeAccessSpecifierPublic)
	struct FProgressBarStyle                      ProgressBarStyle;                                  // 0x2E90(0x0290)(NativeAccessSpecifierPublic)

public:
	static struct FSlateBrush GetBrush(const struct FJavascriptStyleSet& Handle, const class FName& StyleName);
	static struct FButtonStyle GetButtonStyle(const struct FJavascriptStyleSet& Handle, const class FName& StyleName);
	static struct FCheckBoxStyle GetCheckBoxStyle(const struct FJavascriptStyleSet& Handle, const class FName& StyleName);
	static struct FLinearColor GetColor(const struct FJavascriptStyleSet& Handle, const class FName& StyleName);
	static struct FComboBoxStyle GetComboBoxStyle(const struct FJavascriptStyleSet& Handle, const class FName& StyleName);
	static struct FComboButtonStyle GetComboButtonStyle(const struct FJavascriptStyleSet& Handle, const class FName& StyleName);
	static struct FEditableTextBoxStyle GetEditableTextBoxStyle(const struct FJavascriptStyleSet& Handle, const class FName& StyleName);
	static struct FEditableTextStyle GetEditableTextStyle(const struct FJavascriptStyleSet& Handle, const class FName& StyleName);
	static float GetFloat(const struct FJavascriptStyleSet& Handle, const class FName& StyleName);
	static struct FSlateFontInfo GetFontStyle(const struct FJavascriptStyleSet& Handle, const class FName& StyleName);
	static struct FMargin GetMargin(const struct FJavascriptStyleSet& Handle, const class FName& StyleName);
	static struct FProgressBarStyle GetProgressBarStyle(const struct FJavascriptStyleSet& Handle, const class FName& StyleName);
	static struct FSlateColor GetSlateColor(const struct FJavascriptStyleSet& Handle, const class FName& StyleName);
	static struct FSlateSound GetSound(const struct FJavascriptStyleSet& Handle, const class FName& StyleName);
	static struct FTextBlockStyle GetTextBlockStyle(const struct FJavascriptStyleSet& Handle, const class FName& StyleName);
	static struct FVector2D GetVector(const struct FJavascriptStyleSet& Handle, const class FName& StyleName);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"JavascriptStyleSetLibrary">();
	}
	static class UJavascriptStyleSetLibrary* GetDefaultObj()
	{
		return GetDefaultObjImpl<UJavascriptStyleSetLibrary>();
	}
};
//static_assert(alignof(UJavascriptStyleSetLibrary) == 0x000010, "Wrong alignment on UJavascriptStyleSetLibrary");
//static_assert(sizeof(UJavascriptStyleSetLibrary) == 0x003120, "Wrong size on UJavascriptStyleSetLibrary");
//static_assert(offsetof(UJavascriptStyleSetLibrary, SlateColor) == 0x000028, "Member 'UJavascriptStyleSetLibrary::SlateColor' has a wrong offset!");
//static_assert(offsetof(UJavascriptStyleSetLibrary, SlateBrush) == 0x000040, "Member 'UJavascriptStyleSetLibrary::SlateBrush' has a wrong offset!");
//static_assert(offsetof(UJavascriptStyleSetLibrary, ButtonStyle) == 0x000110, "Member 'UJavascriptStyleSetLibrary::ButtonStyle' has a wrong offset!");
//static_assert(offsetof(UJavascriptStyleSetLibrary, TextBlockStyle) == 0x000500, "Member 'UJavascriptStyleSetLibrary::TextBlockStyle' has a wrong offset!");
//static_assert(offsetof(UJavascriptStyleSetLibrary, EditableTextStyle) == 0x000870, "Member 'UJavascriptStyleSetLibrary::EditableTextStyle' has a wrong offset!");
//static_assert(offsetof(UJavascriptStyleSetLibrary, EditableTextBoxStyle) == 0x000B90, "Member 'UJavascriptStyleSetLibrary::EditableTextBoxStyle' has a wrong offset!");
//static_assert(offsetof(UJavascriptStyleSetLibrary, CheckBoxStyle) == 0x001760, "Member 'UJavascriptStyleSetLibrary::CheckBoxStyle' has a wrong offset!");
//static_assert(offsetof(UJavascriptStyleSetLibrary, ComboBoxStyle) == 0x002230, "Member 'UJavascriptStyleSetLibrary::ComboBoxStyle' has a wrong offset!");
//static_assert(offsetof(UJavascriptStyleSetLibrary, ComboButtonStyle) == 0x002890, "Member 'UJavascriptStyleSetLibrary::ComboButtonStyle' has a wrong offset!");
//static_assert(offsetof(UJavascriptStyleSetLibrary, ProgressBarStyle) == 0x002E90, "Member 'UJavascriptStyleSetLibrary::ProgressBarStyle' has a wrong offset!");

// Class JavascriptUMG.JavascriptTextBlock
// 0x0030 (0x0380 - 0x0350)
class UJavascriptTextBlock final : public UTextBlock
{
public:
	class FText                                   HighlightText;                                     // 0x0350(0x0018)(Edit, BlueprintVisible, BlueprintReadOnly, NativeAccessSpecifierPublic)
	TDelegate<void()>                             HighlightTextDelegate;                             // 0x0368(0x0010)(ZeroConstructor, InstancedReference, NoDestructor, NativeAccessSpecifierPublic)
	uint8                                         Pad_378[0x8];                                      // 0x0378(0x0008)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	void SetHighlightText(const class FText& InHighlightText);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"JavascriptTextBlock">();
	}
	static class UJavascriptTextBlock* GetDefaultObj()
	{
		return GetDefaultObjImpl<UJavascriptTextBlock>();
	}
};
//static_assert(alignof(UJavascriptTextBlock) == 0x000010, "Wrong alignment on UJavascriptTextBlock");
//static_assert(sizeof(UJavascriptTextBlock) == 0x000380, "Wrong size on UJavascriptTextBlock");
//static_assert(offsetof(UJavascriptTextBlock, HighlightText) == 0x000350, "Member 'UJavascriptTextBlock::HighlightText' has a wrong offset!");
//static_assert(offsetof(UJavascriptTextBlock, HighlightTextDelegate) == 0x000368, "Member 'UJavascriptTextBlock::HighlightTextDelegate' has a wrong offset!");

// Class JavascriptUMG.JavascriptTileView
// 0x0010 (0x0C20 - 0x0C10)
class UJavascriptTileView final : public UTileView
{
public:
	class UJavascriptContext*                     JavascriptContext;                                 // 0x0C10(0x0008)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C18[0x8];                                      // 0x0C18(0x0008)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	void OnClick(class UObject* Object);
	void OnDoubleClick(class UObject* Object);
	void OnSelectionChanged(class UObject* Object, ESelectInfo Type);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"JavascriptTileView">();
	}
	static class UJavascriptTileView* GetDefaultObj()
	{
		return GetDefaultObjImpl<UJavascriptTileView>();
	}
};
//static_assert(alignof(UJavascriptTileView) == 0x000010, "Wrong alignment on UJavascriptTileView");
//static_assert(sizeof(UJavascriptTileView) == 0x000C20, "Wrong size on UJavascriptTileView");
//static_assert(offsetof(UJavascriptTileView, JavascriptContext) == 0x000C10, "Member 'UJavascriptTileView::JavascriptContext' has a wrong offset!");

// Class JavascriptUMG.JavascriptUMGBlueprintLibrary
// 0x0000 (0x0028 - 0x0028)
class UJavascriptUMGBlueprintLibrary final : public UBlueprintFunctionLibrary
{
public:
	static void AddLine(struct FJavascriptTextLayout& TextLayout, class UJavascriptTextModel* Model, const TArray<struct FJavascriptSlateTextRun>& Runs);
	static void ClearLines(struct FJavascriptTextLayout& TextLayout);
	static void DrawSpaceSpline(struct FPaintContext& Context, const struct FVector2D& InStart, const struct FVector2D& InStartDir, const struct FVector2D& InEnd, const struct FVector2D& InEndDir, float InThickness, const struct FLinearColor& InTint);
	static class FString GetAsText(const struct FJavascriptTextLayout& TextLayout);
	static int32 GetLineLength(const struct FJavascriptTextLayout& TargetTextLayout);
	static struct FSlateColor SlateColor_UseForeground();
	static struct FSlateColor SlateColor_UseSubduedForeground();

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"JavascriptUMGBlueprintLibrary">();
	}
	static class UJavascriptUMGBlueprintLibrary* GetDefaultObj()
	{
		return GetDefaultObjImpl<UJavascriptUMGBlueprintLibrary>();
	}
};
//static_assert(alignof(UJavascriptUMGBlueprintLibrary) == 0x000008, "Wrong alignment on UJavascriptUMGBlueprintLibrary");
//static_assert(sizeof(UJavascriptUMGBlueprintLibrary) == 0x000028, "Wrong size on UJavascriptUMGBlueprintLibrary");

// Class JavascriptUMG.JavascriptUMGLibrary
// 0x0000 (0x0028 - 0x0028)
class UJavascriptUMGLibrary final : public UBlueprintFunctionLibrary
{
public:
	static void AddBorderBrush(const struct FJavascriptSlateStyle& StyleSet, class FName PropertyName, const class FString& InImageName, const struct FMargin& InMargin, const struct FLinearColor& InColorAndOpacity, ESlateBrushImageType InImageType);
	static void AddBoxBrush(const struct FJavascriptSlateStyle& StyleSet, class FName PropertyName, const class FString& InImageName, const struct FMargin& InMargin, const struct FLinearColor& InColorAndOpacity, ESlateBrushImageType InImageType);
	static void AddFontInfo(const struct FJavascriptSlateStyle& StyleSet, class FName PropertyName, const struct FSlateFontInfo& FontInfo);
	static void AddImageBrush(const struct FJavascriptSlateStyle& StyleSet, class FName PropertyName, const class FString& InImageName, const struct FVector2D& InImageSize, const struct FLinearColor& InTint, ESlateBrushTileType InTiling, ESlateBrushImageType InImageType);
	static void AddSound(const struct FJavascriptSlateStyle& StyleSet, class FName PropertyName, const struct FSlateSound& Sound);
	static void AddWindow(const struct FJavascriptSlateWidget& NewWindow, const bool bShowImmediately);
	static void AddWindowAsNativeChild(const struct FJavascriptSlateWidget& NewWindow, const struct FJavascriptSlateWidget& RootWindow);
	static struct FJavascriptSlateStyle CreateSlateStyle(class FName InStyleSetName);
	static struct FVector2D GenerateDynamicImageResource(const class FName InDynamicBrushName);
	static struct FJavascriptSlateWidget GetRootWindow();
	static void Register(const struct FJavascriptSlateStyle& StyleSet);
	static class FString RootToContentDir(const struct FJavascriptSlateStyle& StyleSet, const class FString& RelativePath);
	static class FString RootToCoreContentDir(const struct FJavascriptSlateStyle& StyleSet, const class FString& RelativePath);
	static class UWidget* SetContent(class UNativeWidgetHost* TargetWidget, const struct FJavascriptSlateWidget& SlateWidget);
	static void SetContentRoot(const struct FJavascriptSlateStyle& StyleSet, const class FString& InContentRootDir);
	static void SetCoreContentRoot(const struct FJavascriptSlateStyle& StyleSet, const class FString& InCoreContentRootDir);
	static void ShowWindow(const struct FJavascriptSlateWidget& NewWindow);
	static struct FJavascriptSlateWidget TakeWidget(class UWidget* Widget);
	static void Unregister(const struct FJavascriptSlateStyle& StyleSet);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"JavascriptUMGLibrary">();
	}
	static class UJavascriptUMGLibrary* GetDefaultObj()
	{
		return GetDefaultObjImpl<UJavascriptUMGLibrary>();
	}
};
//static_assert(alignof(UJavascriptUMGLibrary) == 0x000008, "Wrong alignment on UJavascriptUMGLibrary");
//static_assert(sizeof(UJavascriptUMGLibrary) == 0x000028, "Wrong size on UJavascriptUMGLibrary");

// Class JavascriptUMG.JavascriptUserObjectListEntry
// 0x0010 (0x02A8 - 0x0298)
class UJavascriptUserObjectListEntry : public UUserWidget
{
public:
	uint8                                         Pad_298[0x8];                                      // 0x0298(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	class UObject*                                Item;                                              // 0x02A0(0x0008)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"JavascriptUserObjectListEntry">();
	}
	static class UJavascriptUserObjectListEntry* GetDefaultObj()
	{
		return GetDefaultObjImpl<UJavascriptUserObjectListEntry>();
	}
};
//static_assert(alignof(UJavascriptUserObjectListEntry) == 0x000008, "Wrong alignment on UJavascriptUserObjectListEntry");
//static_assert(sizeof(UJavascriptUserObjectListEntry) == 0x0002A8, "Wrong size on UJavascriptUserObjectListEntry");
//static_assert(offsetof(UJavascriptUserObjectListEntry, Item) == 0x0002A0, "Member 'UJavascriptUserObjectListEntry::Item' has a wrong offset!");

// Class JavascriptUMG.JavascriptWidget
// 0x0040 (0x02D8 - 0x0298)
class UJavascriptWidget final : public UUserWidget
{
public:
	class UJavascriptContext*                     JavascriptContext;                                 // 0x0298(0x0008)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	FMulticastInlineDelegateProperty_             OnInputActionEvent;                                // 0x02A0(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	FMulticastInlineDelegateProperty_             OnReleaseActionEvent;                              // 0x02B0(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	FMulticastInlineDelegateProperty_             OnInputAxisEvent;                                  // 0x02C0(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	class UPanelSlot*                             ContentSlot;                                       // 0x02D0(0x0008)(ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)

public:
	static void CallSynchronizeProperties(class UVisual* WidgetOrSlot);
	static bool HasValidCachedWidget(class UWidget* Widget);

	class UPanelSlot* AddChild(class UWidget* Content);
	void OnDestroy(bool bReleaseChildren);
	void OnInputActionByName(class FName ActionName);
	void OnInputAxisByName(float Axis, class FName ActionName);
	void OnListenForInputAction(class FName ActionName, EInputEvent EventType, bool bConsume);
	void OnListenForInputAxis(class FName AxisName, EInputEvent EventType, bool bConsume);
	void OnReleaseInputActionByName(class FName ActionName);
	bool RemoveChild();
	void SetRootWidget(class UWidget* Widget);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"JavascriptWidget">();
	}
	static class UJavascriptWidget* GetDefaultObj()
	{
		return GetDefaultObjImpl<UJavascriptWidget>();
	}
};
//static_assert(alignof(UJavascriptWidget) == 0x000008, "Wrong alignment on UJavascriptWidget");
//static_assert(sizeof(UJavascriptWidget) == 0x0002D8, "Wrong size on UJavascriptWidget");
//static_assert(offsetof(UJavascriptWidget, JavascriptContext) == 0x000298, "Member 'UJavascriptWidget::JavascriptContext' has a wrong offset!");
//static_assert(offsetof(UJavascriptWidget, OnInputActionEvent) == 0x0002A0, "Member 'UJavascriptWidget::OnInputActionEvent' has a wrong offset!");
//static_assert(offsetof(UJavascriptWidget, OnReleaseActionEvent) == 0x0002B0, "Member 'UJavascriptWidget::OnReleaseActionEvent' has a wrong offset!");
//static_assert(offsetof(UJavascriptWidget, OnInputAxisEvent) == 0x0002C0, "Member 'UJavascriptWidget::OnInputAxisEvent' has a wrong offset!");
//static_assert(offsetof(UJavascriptWidget, ContentSlot) == 0x0002D0, "Member 'UJavascriptWidget::ContentSlot' has a wrong offset!");

// Class JavascriptUMG.JavascriptWindow
// 0x1A28 (0x1B70 - 0x0148)
class UJavascriptWindow final : public UContentWidget
{
public:
	EJavascriptWindowType                         Type;                                              // 0x0148(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_149[0x7];                                      // 0x0149(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FWindowStyle                           Style;                                             // 0x0150(0x1970)(NativeAccessSpecifierPublic)
	class FText                                   Title;                                             // 0x1AC0(0x0018)(NativeAccessSpecifierPublic)
	bool                                          bDragAnywhere;                                     // 0x1AD8(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EJavascriptAutoCenter                         AutoCenter;                                        // 0x1AD9(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1ADA[0x6];                                     // 0x1ADA(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector2D                              ScreenPosition;                                    // 0x1AE0(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector2D                              ClientSize;                                        // 0x1AF0(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EJavascriptWindowTransparency                 SupportsTransparency;                              // 0x1B00(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1B01[0x3];                                     // 0x1B01(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         InitialOpacity;                                    // 0x1B04(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          IsInitiallyMaximized;                              // 0x1B08(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EJavascriptSizingRule                         SizingRule;                                        // 0x1B09(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          IsPopupWindow;                                     // 0x1B0A(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          FocusWhenFirstShown;                               // 0x1B0B(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ActivateWhenFirstShown;                            // 0x1B0C(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          UseOSWindowBorder;                                 // 0x1B0D(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          HasCloseButton;                                    // 0x1B0E(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          SupportsMaximize;                                  // 0x1B0F(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          SupportsMinimize;                                  // 0x1B10(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          CreateTitleBar;                                    // 0x1B11(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          SaneWindowPlacement;                               // 0x1B12(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1B13[0x1];                                     // 0x1B13(0x0001)(Fixing Size After Last Property [ Dumper-7 ])
	struct FMargin                                LayoutBorder;                                      // 0x1B14(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	struct FMargin                                UserResizeBorder;                                  // 0x1B24(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	TDelegate<void()>                             OnWindowClosed;                                    // 0x1B34(0x0010)(ZeroConstructor, InstancedReference, NoDestructor, NativeAccessSpecifierPublic)
	TDelegate<void()>                             OnWindowDeactivated;                               // 0x1B44(0x0010)(ZeroConstructor, InstancedReference, NoDestructor, NativeAccessSpecifierPublic)
	bool                                          IsTopmostWindow;                                   // 0x1B54(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1B55[0x1B];                                    // 0x1B55(0x001B)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	void BringToFront();
	void DestroyWindowImmediately();
	void EnableWindow(bool bEnable);
	void FlashWindow();
	void HideWindow();
	void MoveWindowTo(const struct FVector2D& NewPosition);
	void OnWindowDeactivated__DelegateSignature();
	void OnWindowWidgetClosed__DelegateSignature();
	void RequestDestroyWindow();
	void ReshapeWindow(const struct FVector2D& NewPosition, const struct FVector2D& NewSize);
	void Resize(const struct FVector2D& NewSize);
	void SetOpacity(const float InOpacity);
	void ShowWindow();

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"JavascriptWindow">();
	}
	static class UJavascriptWindow* GetDefaultObj()
	{
		return GetDefaultObjImpl<UJavascriptWindow>();
	}
};
//static_assert(alignof(UJavascriptWindow) == 0x000010, "Wrong alignment on UJavascriptWindow");
//static_assert(sizeof(UJavascriptWindow) == 0x001B70, "Wrong size on UJavascriptWindow");
//static_assert(offsetof(UJavascriptWindow, Type) == 0x000148, "Member 'UJavascriptWindow::Type' has a wrong offset!");
//static_assert(offsetof(UJavascriptWindow, Style) == 0x000150, "Member 'UJavascriptWindow::Style' has a wrong offset!");
//static_assert(offsetof(UJavascriptWindow, Title) == 0x001AC0, "Member 'UJavascriptWindow::Title' has a wrong offset!");
//static_assert(offsetof(UJavascriptWindow, bDragAnywhere) == 0x001AD8, "Member 'UJavascriptWindow::bDragAnywhere' has a wrong offset!");
//static_assert(offsetof(UJavascriptWindow, AutoCenter) == 0x001AD9, "Member 'UJavascriptWindow::AutoCenter' has a wrong offset!");
//static_assert(offsetof(UJavascriptWindow, ScreenPosition) == 0x001AE0, "Member 'UJavascriptWindow::ScreenPosition' has a wrong offset!");
//static_assert(offsetof(UJavascriptWindow, ClientSize) == 0x001AF0, "Member 'UJavascriptWindow::ClientSize' has a wrong offset!");
//static_assert(offsetof(UJavascriptWindow, SupportsTransparency) == 0x001B00, "Member 'UJavascriptWindow::SupportsTransparency' has a wrong offset!");
//static_assert(offsetof(UJavascriptWindow, InitialOpacity) == 0x001B04, "Member 'UJavascriptWindow::InitialOpacity' has a wrong offset!");
//static_assert(offsetof(UJavascriptWindow, IsInitiallyMaximized) == 0x001B08, "Member 'UJavascriptWindow::IsInitiallyMaximized' has a wrong offset!");
//static_assert(offsetof(UJavascriptWindow, SizingRule) == 0x001B09, "Member 'UJavascriptWindow::SizingRule' has a wrong offset!");
//static_assert(offsetof(UJavascriptWindow, IsPopupWindow) == 0x001B0A, "Member 'UJavascriptWindow::IsPopupWindow' has a wrong offset!");
//static_assert(offsetof(UJavascriptWindow, FocusWhenFirstShown) == 0x001B0B, "Member 'UJavascriptWindow::FocusWhenFirstShown' has a wrong offset!");
//static_assert(offsetof(UJavascriptWindow, ActivateWhenFirstShown) == 0x001B0C, "Member 'UJavascriptWindow::ActivateWhenFirstShown' has a wrong offset!");
//static_assert(offsetof(UJavascriptWindow, UseOSWindowBorder) == 0x001B0D, "Member 'UJavascriptWindow::UseOSWindowBorder' has a wrong offset!");
//static_assert(offsetof(UJavascriptWindow, HasCloseButton) == 0x001B0E, "Member 'UJavascriptWindow::HasCloseButton' has a wrong offset!");
//static_assert(offsetof(UJavascriptWindow, SupportsMaximize) == 0x001B0F, "Member 'UJavascriptWindow::SupportsMaximize' has a wrong offset!");
//static_assert(offsetof(UJavascriptWindow, SupportsMinimize) == 0x001B10, "Member 'UJavascriptWindow::SupportsMinimize' has a wrong offset!");
//static_assert(offsetof(UJavascriptWindow, CreateTitleBar) == 0x001B11, "Member 'UJavascriptWindow::CreateTitleBar' has a wrong offset!");
//static_assert(offsetof(UJavascriptWindow, SaneWindowPlacement) == 0x001B12, "Member 'UJavascriptWindow::SaneWindowPlacement' has a wrong offset!");
//static_assert(offsetof(UJavascriptWindow, LayoutBorder) == 0x001B14, "Member 'UJavascriptWindow::LayoutBorder' has a wrong offset!");
//static_assert(offsetof(UJavascriptWindow, UserResizeBorder) == 0x001B24, "Member 'UJavascriptWindow::UserResizeBorder' has a wrong offset!");
//static_assert(offsetof(UJavascriptWindow, OnWindowClosed) == 0x001B34, "Member 'UJavascriptWindow::OnWindowClosed' has a wrong offset!");
//static_assert(offsetof(UJavascriptWindow, OnWindowDeactivated) == 0x001B44, "Member 'UJavascriptWindow::OnWindowDeactivated' has a wrong offset!");
//static_assert(offsetof(UJavascriptWindow, IsTopmostWindow) == 0x001B54, "Member 'UJavascriptWindow::IsTopmostWindow' has a wrong offset!");

}

