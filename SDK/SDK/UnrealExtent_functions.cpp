#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: UnrealExtent

#include "Basic.hpp"

#include "UnrealExtent_classes.hpp"
#include "UnrealExtent_parameters.hpp"


namespace SDK
{

// Function UnrealExtent.GSE_RenderUtilFuncLib.GetSceneViewPreExposure
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// class AActor*                           WorldContext                                           (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

float UGSE_RenderUtilFuncLib::GetSceneViewPreExposure(class AActor* WorldContext)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("GSE_RenderUtilFuncLib", "GetSceneViewPreExposure");

	Params::GSE_RenderUtilFuncLib_GetSceneViewPreExposure Parms{};

	Parms.WorldContext = WorldContext;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function UnrealExtent.GSE_RenderUtilFuncLib.MarkRenderStateDirty
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// class UActorComponent*                  ActorComponent                                         (Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UGSE_RenderUtilFuncLib::MarkRenderStateDirty(class UActorComponent* ActorComponent)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("GSE_RenderUtilFuncLib", "MarkRenderStateDirty");

	Params::GSE_RenderUtilFuncLib_MarkRenderStateDirty Parms{};

	Parms.ActorComponent = ActorComponent;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function UnrealExtent.GSE_RenderUtilFuncLib.OverrideSystemUserVariableSKMFilteredBones
// (Final, Native, Static, Public, HasOutParams, BlueprintCallable)
// Parameters:
// class UNiagaraComponent*                NiagaraSystem                                          (Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class FString                           OverrideName                                           (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// TArray<class FName>                     OverrideFilteredBones                                  (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)

void UGSE_RenderUtilFuncLib::OverrideSystemUserVariableSKMFilteredBones(class UNiagaraComponent* NiagaraSystem, const class FString& OverrideName, const TArray<class FName>& OverrideFilteredBones)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("GSE_RenderUtilFuncLib", "OverrideSystemUserVariableSKMFilteredBones");

	Params::GSE_RenderUtilFuncLib_OverrideSystemUserVariableSKMFilteredBones Parms{};

	Parms.NiagaraSystem = NiagaraSystem;
	Parms.OverrideName = std::move(OverrideName);
	Parms.OverrideFilteredBones = std::move(OverrideFilteredBones);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function UnrealExtent.GSE_RenderUtilFuncLib.OverrideSystemUserVariableSKMFilteredSockets
// (Final, Native, Static, Public, HasOutParams, BlueprintCallable)
// Parameters:
// class UNiagaraComponent*                NiagaraSystem                                          (Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class FString                           OverrideName                                           (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// TArray<class FName>                     OverrideFilteredSockets                                (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)

void UGSE_RenderUtilFuncLib::OverrideSystemUserVariableSKMFilteredSockets(class UNiagaraComponent* NiagaraSystem, const class FString& OverrideName, const TArray<class FName>& OverrideFilteredSockets)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("GSE_RenderUtilFuncLib", "OverrideSystemUserVariableSKMFilteredSockets");

	Params::GSE_RenderUtilFuncLib_OverrideSystemUserVariableSKMFilteredSockets Parms{};

	Parms.NiagaraSystem = NiagaraSystem;
	Parms.OverrideName = std::move(OverrideName);
	Parms.OverrideFilteredSockets = std::move(OverrideFilteredSockets);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function UnrealExtent.GSE_RenderUtilFuncLib.PlayCameraShake
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// class UClass*                           CameraShakeCls                                         (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class APlayerCameraManager*             Camera                                                 (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UGSE_RenderUtilFuncLib::PlayCameraShake(class UClass* CameraShakeCls, class APlayerCameraManager* Camera)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("GSE_RenderUtilFuncLib", "PlayCameraShake");

	Params::GSE_RenderUtilFuncLib_PlayCameraShake Parms{};

	Parms.CameraShakeCls = CameraShakeCls;
	Parms.Camera = Camera;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function UnrealExtent.GSE_RenderUtilFuncLib.SetRenderCustomDepth
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// class AActor*                           AA                                                     (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    bValue                                                 (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UGSE_RenderUtilFuncLib::SetRenderCustomDepth(class AActor* AA, bool bValue)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("GSE_RenderUtilFuncLib", "SetRenderCustomDepth");

	Params::GSE_RenderUtilFuncLib_SetRenderCustomDepth Parms{};

	Parms.AA = AA;
	Parms.bValue = bValue;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function UnrealExtent.AudioVisualizeBox.PausePainting
// (Final, Native, Public, BlueprintCallable)

void UAudioVisualizeBox::PausePainting()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("AudioVisualizeBox", "PausePainting");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function UnrealExtent.AudioVisualizeBox.ResetVisualizing
// (Final, Native, Public, BlueprintCallable)

void UAudioVisualizeBox::ResetVisualizing()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("AudioVisualizeBox", "ResetVisualizing");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function UnrealExtent.AudioVisualizeBox.SetAudioInfo
// (Final, Native, Public, HasOutParams, HasDefaults, BlueprintCallable)
// Parameters:
// struct FVector2D                        InLoudness                                             (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// TArray<float>                           InConstantInfo                                         (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)

void UAudioVisualizeBox::SetAudioInfo(const struct FVector2D& InLoudness, const TArray<float>& InConstantInfo)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("AudioVisualizeBox", "SetAudioInfo");

	Params::AudioVisualizeBox_SetAudioInfo Parms{};

	Parms.InLoudness = std::move(InLoudness);
	Parms.InConstantInfo = std::move(InConstantInfo);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function UnrealExtent.AudioVisualizeBox.SetFreqInfo
// (Final, Native, Protected, HasOutParams, BlueprintCallable)
// Parameters:
// TArray<float>                           InConstantInfo                                         (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)

void UAudioVisualizeBox::SetFreqInfo(const TArray<float>& InConstantInfo)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("AudioVisualizeBox", "SetFreqInfo");

	Params::AudioVisualizeBox_SetFreqInfo Parms{};

	Parms.InConstantInfo = std::move(InConstantInfo);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function UnrealExtent.AudioVisualizeBox.SetFreqNum
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// int32                                   InFreqNum                                              (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UAudioVisualizeBox::SetFreqNum(const int32 InFreqNum)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("AudioVisualizeBox", "SetFreqNum");

	Params::AudioVisualizeBox_SetFreqNum Parms{};

	Parms.InFreqNum = InFreqNum;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function UnrealExtent.AudioVisualizeBox.SetLoudnessInfo
// (Final, Native, Protected, HasDefaults, BlueprintCallable)
// Parameters:
// struct FVector2D                        InLoudness                                             (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UAudioVisualizeBox::SetLoudnessInfo(const struct FVector2D& InLoudness)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("AudioVisualizeBox", "SetLoudnessInfo");

	Params::AudioVisualizeBox_SetLoudnessInfo Parms{};

	Parms.InLoudness = std::move(InLoudness);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function UnrealExtent.AudioVisualizeBox.StartPainting
// (Final, Native, Public, BlueprintCallable)

void UAudioVisualizeBox::StartPainting()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("AudioVisualizeBox", "StartPainting");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function UnrealExtent.AudioVisualizeBox.StopPainting
// (Final, Native, Public, BlueprintCallable)

void UAudioVisualizeBox::StopPainting()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("AudioVisualizeBox", "StopPainting");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function UnrealExtent.AlphaScanButton.SetAdvancedHitAlpha
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// int32                                   InAlpha                                                (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UAlphaScanButton::SetAdvancedHitAlpha(int32 InAlpha)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("AlphaScanButton", "SetAdvancedHitAlpha");

	Params::AlphaScanButton_SetAdvancedHitAlpha Parms{};

	Parms.InAlpha = InAlpha;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function UnrealExtent.AlphaScanButton.SetAdvancedHitTexture
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// class UTexture2D*                       InTexture                                              (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UAlphaScanButton::SetAdvancedHitTexture(class UTexture2D* InTexture)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("AlphaScanButton", "SetAdvancedHitTexture");

	Params::AlphaScanButton_SetAdvancedHitTexture Parms{};

	Parms.InTexture = InTexture;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function UnrealExtent.AudioVisualizeUtil.OnAudioPlaybackPercentCallback
// (Final, Native, Protected)
// Parameters:
// class USoundWave*                       SoundWave                                              (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   Percent                                                (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void AAudioVisualizeUtil::OnAudioPlaybackPercentCallback(const class USoundWave* SoundWave, const float Percent)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("AudioVisualizeUtil", "OnAudioPlaybackPercentCallback");

	Params::AudioVisualizeUtil_OnAudioPlaybackPercentCallback Parms{};

	Parms.SoundWave = SoundWave;
	Parms.Percent = Percent;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function UnrealExtent.GSE_GridlyFuncLib.GetSupportCultures
// (Final, Native, Static, Private, BlueprintCallable)
// Parameters:
// TArray<class FString>                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, NativeAccessSpecifierPublic)

TArray<class FString> UGSE_GridlyFuncLib::GetSupportCultures()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("GSE_GridlyFuncLib", "GetSupportCultures");

	Params::GSE_GridlyFuncLib_GetSupportCultures Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function UnrealExtent.GSE_GridlyFuncLib.RequestPage
// (Final, Native, Static, Private, BlueprintCallable)
// Parameters:
// class UObject*                          Obj                                                    (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UGSE_GridlyFuncLib::RequestPage(class UObject* Obj)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("GSE_GridlyFuncLib", "RequestPage");

	Params::GSE_GridlyFuncLib_RequestPage Parms{};

	Parms.Obj = Obj;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function UnrealExtent.AutoMovementMonitor.CaptureViewingInfo
// (Native, Event, Public, BlueprintCallable, BlueprintEvent)

void AAutoMovementMonitor::CaptureViewingInfo()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("AutoMovementMonitor", "CaptureViewingInfo");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function UnrealExtent.AutoMovementMonitor.CheckHitRotation
// (Native, Event, Public, HasDefaults, BlueprintCallable, BlueprintEvent)
// Parameters:
// struct FRotator                         InRotator                                              (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)

void AAutoMovementMonitor::CheckHitRotation(const struct FRotator& InRotator)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("AutoMovementMonitor", "CheckHitRotation");

	Params::AutoMovementMonitor_CheckHitRotation Parms{};

	Parms.InRotator = std::move(InRotator);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function UnrealExtent.AutoMovementMonitor.CreatePointInstances
// (Native, Event, Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// TArray<struct FVector>                  InPoints                                               (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)

void AAutoMovementMonitor::CreatePointInstances(const TArray<struct FVector>& InPoints)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("AutoMovementMonitor", "CreatePointInstances");

	Params::AutoMovementMonitor_CreatePointInstances Parms{};

	Parms.InPoints = std::move(InPoints);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function UnrealExtent.AutoMovementMonitor.DrawStatOnHeatmap
// (Event, Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// class FString                           InStatName                                             (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32                                   InTileCount                                            (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void AAutoMovementMonitor::DrawStatOnHeatmap(const class FString& InStatName, const int32 InTileCount)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("AutoMovementMonitor", "DrawStatOnHeatmap");

	Params::AutoMovementMonitor_DrawStatOnHeatmap Parms{};

	Parms.InStatName = std::move(InStatName);
	Parms.InTileCount = InTileCount;

	UObject::ProcessEvent(Func, &Parms);
}


// Function UnrealExtent.AutoMovementMonitor.EnableAutoMovement
// (Final, Native, Public, BlueprintCallable)

void AAutoMovementMonitor::EnableAutoMovement()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("AutoMovementMonitor", "EnableAutoMovement");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function UnrealExtent.AutoMovementMonitor.ExitAppOnAutoMoveFinished
// (Final, Native, Public, BlueprintCallable)

void AAutoMovementMonitor::ExitAppOnAutoMoveFinished()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("AutoMovementMonitor", "ExitAppOnAutoMoveFinished");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function UnrealExtent.AutoMovementMonitor.GetPointExecutionDurationInfo
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// int64                                   InStartTimestamp                                       (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class FString                           ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class FString AAutoMovementMonitor::GetPointExecutionDurationInfo(int64 InStartTimestamp)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("AutoMovementMonitor", "GetPointExecutionDurationInfo");

	Params::AutoMovementMonitor_GetPointExecutionDurationInfo Parms{};

	Parms.InStartTimestamp = InStartTimestamp;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function UnrealExtent.AutoMovementMonitor.GetRotationIncrement
// (Final, Native, Public, HasDefaults, BlueprintCallable)
// Parameters:
// struct FVector                          InRotatorMask                                          (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FAutoMovementViewingPattern      ViewingPattern                                         (Parm, NativeAccessSpecifierPublic)
// struct FRotator                         ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)

struct FRotator AAutoMovementMonitor::GetRotationIncrement(const struct FVector& InRotatorMask, const struct FAutoMovementViewingPattern& ViewingPattern)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("AutoMovementMonitor", "GetRotationIncrement");

	Params::AutoMovementMonitor_GetRotationIncrement Parms{};

	Parms.InRotatorMask = std::move(InRotatorMask);
	Parms.ViewingPattern = std::move(ViewingPattern);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function UnrealExtent.AutoMovementMonitor.IncreaseViewingRotation
// (Native, Event, Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// ERotateType                             RotateType                                             (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    bProxyCall                                             (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void AAutoMovementMonitor::IncreaseViewingRotation(ERotateType RotateType, bool bProxyCall)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("AutoMovementMonitor", "IncreaseViewingRotation");

	Params::AutoMovementMonitor_IncreaseViewingRotation Parms{};

	Parms.RotateType = RotateType;
	Parms.bProxyCall = bProxyCall;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function UnrealExtent.AutoMovementMonitor.LoadPathPoints
// (Final, Native, Public, BlueprintCallable)

void AAutoMovementMonitor::LoadPathPoints()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("AutoMovementMonitor", "LoadPathPoints");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function UnrealExtent.AutoMovementMonitor.PauseAutoMovement
// (Native, Event, Public, BlueprintEvent)

void AAutoMovementMonitor::PauseAutoMovement()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("AutoMovementMonitor", "PauseAutoMovement");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function UnrealExtent.AutoMovementMonitor.PostAutoMovement
// (Event, Public, BlueprintCallable, BlueprintEvent)

void AAutoMovementMonitor::PostAutoMovement()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("AutoMovementMonitor", "PostAutoMovement");

	UObject::ProcessEvent(Func, nullptr);
}


// Function UnrealExtent.AutoMovementMonitor.PreAutoMovement
// (Native, Event, Public, BlueprintCallable, BlueprintEvent)

void AAutoMovementMonitor::PreAutoMovement()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("AutoMovementMonitor", "PreAutoMovement");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function UnrealExtent.AutoMovementMonitor.ProcessAutoMovement
// (Native, Public, HasDefaults, BlueprintCallable)
// Parameters:
// struct FVector                          InLocation                                             (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FRotator                         InRotator                                              (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)

void AAutoMovementMonitor::ProcessAutoMovement(const struct FVector& InLocation, const struct FRotator& InRotator)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("AutoMovementMonitor", "ProcessAutoMovement");

	Params::AutoMovementMonitor_ProcessAutoMovement Parms{};

	Parms.InLocation = std::move(InLocation);
	Parms.InRotator = std::move(InRotator);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function UnrealExtent.AutoMovementMonitor.RegisterAutoMovementConsoleCommands
// (Final, Native, Public, BlueprintCallable)

void AAutoMovementMonitor::RegisterAutoMovementConsoleCommands()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("AutoMovementMonitor", "RegisterAutoMovementConsoleCommands");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function UnrealExtent.AutoMovementMonitor.ResetAutoMovement
// (Native, Public, BlueprintCallable)

void AAutoMovementMonitor::ResetAutoMovement()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("AutoMovementMonitor", "ResetAutoMovement");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function UnrealExtent.AutoMovementMonitor.ResetPitchRotation
// (Native, Public, BlueprintCallable)

void AAutoMovementMonitor::ResetPitchRotation()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("AutoMovementMonitor", "ResetPitchRotation");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function UnrealExtent.AutoMovementMonitor.ResetTransportAttemptedCount
// (Final, Native, Public, BlueprintCallable)

void AAutoMovementMonitor::ResetTransportAttemptedCount()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("AutoMovementMonitor", "ResetTransportAttemptedCount");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function UnrealExtent.AutoMovementMonitor.ResetYawRotation
// (Native, Public, BlueprintCallable)

void AAutoMovementMonitor::ResetYawRotation()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("AutoMovementMonitor", "ResetYawRotation");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function UnrealExtent.AutoMovementMonitor.ResumeAutoMovement
// (Native, Event, Public, BlueprintEvent)

void AAutoMovementMonitor::ResumeAutoMovement()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("AutoMovementMonitor", "ResumeAutoMovement");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function UnrealExtent.AutoMovementMonitor.SetSparseVersionEnabled
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// bool                                    bEnabled                                               (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void AAutoMovementMonitor::SetSparseVersionEnabled(bool bEnabled)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("AutoMovementMonitor", "SetSparseVersionEnabled");

	Params::AutoMovementMonitor_SetSparseVersionEnabled Parms{};

	Parms.bEnabled = bEnabled;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function UnrealExtent.AutoMovementMonitor.StopAutoMovement
// (Final, Native, Public, BlueprintCallable)

void AAutoMovementMonitor::StopAutoMovement()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("AutoMovementMonitor", "StopAutoMovement");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function UnrealExtent.AutoMovementMonitor.SwitchRotateDirection
// (Final, Native, Public, BlueprintCallable)

void AAutoMovementMonitor::SwitchRotateDirection()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("AutoMovementMonitor", "SwitchRotateDirection");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function UnrealExtent.AutoMovementMonitor.SwitchToVirtualPawn
// (Native, Event, Public, HasDefaults, BlueprintCallable, BlueprintEvent)
// Parameters:
// class UClass*                           VirtualPlayerBaseClass                                 (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FVector                          SpawningOffset                                         (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void AAutoMovementMonitor::SwitchToVirtualPawn(class UClass* VirtualPlayerBaseClass, const struct FVector& SpawningOffset)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("AutoMovementMonitor", "SwitchToVirtualPawn");

	Params::AutoMovementMonitor_SwitchToVirtualPawn Parms{};

	Parms.VirtualPlayerBaseClass = VirtualPlayerBaseClass;
	Parms.SpawningOffset = std::move(SpawningOffset);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function UnrealExtent.AutoMovementMonitor.TransportViewingPosition
// (Native, Event, Public, HasDefaults, BlueprintCallable, BlueprintEvent)
// Parameters:
// struct FVector                          InLocation                                             (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FRotator                         InRotator                                              (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
// bool                                    bProxyCall                                             (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void AAutoMovementMonitor::TransportViewingPosition(const struct FVector& InLocation, const struct FRotator& InRotator, bool bProxyCall)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("AutoMovementMonitor", "TransportViewingPosition");

	Params::AutoMovementMonitor_TransportViewingPosition Parms{};

	Parms.InLocation = std::move(InLocation);
	Parms.InRotator = std::move(InRotator);
	Parms.bProxyCall = bProxyCall;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function UnrealExtent.AutoMovementMonitor.CheckAutoMovementCompleted
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool AAutoMovementMonitor::CheckAutoMovementCompleted() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("AutoMovementMonitor", "CheckAutoMovementCompleted");

	Params::AutoMovementMonitor_CheckAutoMovementCompleted Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function UnrealExtent.AutoMovementMonitor.CheckHitLocation
// (Final, Native, Public, HasDefaults, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// struct FVector                          InLocation                                             (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool AAutoMovementMonitor::CheckHitLocation(const struct FVector& InLocation) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("AutoMovementMonitor", "CheckHitLocation");

	Params::AutoMovementMonitor_CheckHitLocation Parms{};

	Parms.InLocation = std::move(InLocation);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function UnrealExtent.AutoMovementMonitor.HasCompletedPitchingObservation
// (Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool AAutoMovementMonitor::HasCompletedPitchingObservation() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("AutoMovementMonitor", "HasCompletedPitchingObservation");

	Params::AutoMovementMonitor_HasCompletedPitchingObservation Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function UnrealExtent.AutoMovementMonitor.HasCompletedYawingObservation
// (Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool AAutoMovementMonitor::HasCompletedYawingObservation() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("AutoMovementMonitor", "HasCompletedYawingObservation");

	Params::AutoMovementMonitor_HasCompletedYawingObservation Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function UnrealExtent.AutoMovementUtil.AppendGeneralStatisticsToCapturedReport
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// class FString                           InFilename                                             (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32                                   MetricsNum                                             (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32                                   PointNum                                               (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UAutoMovementUtil::AppendGeneralStatisticsToCapturedReport(const class FString& InFilename, int32 MetricsNum, int32 PointNum)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("AutoMovementUtil", "AppendGeneralStatisticsToCapturedReport");

	Params::AutoMovementUtil_AppendGeneralStatisticsToCapturedReport Parms{};

	Parms.InFilename = std::move(InFilename);
	Parms.MetricsNum = MetricsNum;
	Parms.PointNum = PointNum;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function UnrealExtent.AutoMovementUtil.AppendHeaderToCapturedReport
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// TArray<class FString>                   CapturedInfoNameList                                   (Parm, ZeroConstructor, NativeAccessSpecifierPublic)
// class FString                           InFilename                                             (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UAutoMovementUtil::AppendHeaderToCapturedReport(const TArray<class FString>& CapturedInfoNameList, const class FString& InFilename)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("AutoMovementUtil", "AppendHeaderToCapturedReport");

	Params::AutoMovementUtil_AppendHeaderToCapturedReport Parms{};

	Parms.CapturedInfoNameList = std::move(CapturedInfoNameList);
	Parms.InFilename = std::move(InFilename);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function UnrealExtent.AutoMovementUtil.AppendOfflinePathPoints
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// TArray<struct FVector>                  InPoints                                               (Parm, ZeroConstructor, NativeAccessSpecifierPublic)
// class FString                           InFilePathUnderProjFolder                              (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UAutoMovementUtil::AppendOfflinePathPoints(const TArray<struct FVector>& InPoints, const class FString& InFilePathUnderProjFolder)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("AutoMovementUtil", "AppendOfflinePathPoints");

	Params::AutoMovementUtil_AppendOfflinePathPoints Parms{};

	Parms.InPoints = std::move(InPoints);
	Parms.InFilePathUnderProjFolder = std::move(InFilePathUnderProjFolder);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function UnrealExtent.AutoMovementUtil.ExportCapturedInfoBatch
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// int32                                   BatchSize                                              (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32                                   TotalPointNum                                          (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// TArray<struct FGSPathPointStatInfo>     InPathPointStatsInfo                                   (Parm, ZeroConstructor, NativeAccessSpecifierPublic)
// class FString                           InFilename                                             (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    bLastBatch                                             (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    bOutputHeader                                          (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UAutoMovementUtil::ExportCapturedInfoBatch(const int32 BatchSize, const int32 TotalPointNum, const TArray<struct FGSPathPointStatInfo>& InPathPointStatsInfo, const class FString& InFilename, bool bLastBatch, bool bOutputHeader)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("AutoMovementUtil", "ExportCapturedInfoBatch");

	Params::AutoMovementUtil_ExportCapturedInfoBatch Parms{};

	Parms.BatchSize = BatchSize;
	Parms.TotalPointNum = TotalPointNum;
	Parms.InPathPointStatsInfo = std::move(InPathPointStatsInfo);
	Parms.InFilename = std::move(InFilename);
	Parms.bLastBatch = bLastBatch;
	Parms.bOutputHeader = bOutputHeader;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function UnrealExtent.AutoMovementUtil.ExportStatsCapturedReport
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// TArray<struct FGSPathPointStatInfo>     InPathPointStatsInfo                                   (Parm, ZeroConstructor, NativeAccessSpecifierPublic)
// class FString                           InFilename                                             (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    bAppend                                                (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    bOutputHeader                                          (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UAutoMovementUtil::ExportStatsCapturedReport(const TArray<struct FGSPathPointStatInfo>& InPathPointStatsInfo, const class FString& InFilename, bool bAppend, bool bOutputHeader)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("AutoMovementUtil", "ExportStatsCapturedReport");

	Params::AutoMovementUtil_ExportStatsCapturedReport Parms{};

	Parms.InPathPointStatsInfo = std::move(InPathPointStatsInfo);
	Parms.InFilename = std::move(InFilename);
	Parms.bAppend = bAppend;
	Parms.bOutputHeader = bOutputHeader;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function UnrealExtent.AutoMovementUtil.ExtractDateTimeInfo
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// class FString                           InString                                               (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class FString                           ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class FString UAutoMovementUtil::ExtractDateTimeInfo(const class FString& InString)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("AutoMovementUtil", "ExtractDateTimeInfo");

	Params::AutoMovementUtil_ExtractDateTimeInfo Parms{};

	Parms.InString = std::move(InString);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function UnrealExtent.AutoMovementUtil.FormatTimeAuto
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// double                                  InDuration                                             (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32                                   NumDigits                                              (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class FString                           ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class FString UAutoMovementUtil::FormatTimeAuto(const double InDuration, const int32 NumDigits)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("AutoMovementUtil", "FormatTimeAuto");

	Params::AutoMovementUtil_FormatTimeAuto Parms{};

	Parms.InDuration = InDuration;
	Parms.NumDigits = NumDigits;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function UnrealExtent.AutoMovementUtil.FormatTimeSeconds
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// float                                   InDuration                                             (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class FString                           ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class FString UAutoMovementUtil::FormatTimeSeconds(const float InDuration)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("AutoMovementUtil", "FormatTimeSeconds");

	Params::AutoMovementUtil_FormatTimeSeconds Parms{};

	Parms.InDuration = InDuration;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function UnrealExtent.AutoMovementUtil.FromTimestamp
// (Final, Native, Static, Public, HasDefaults, BlueprintCallable)
// Parameters:
// int64                                   Time                                                   (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FDateTime                        ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

struct FDateTime UAutoMovementUtil::FromTimestamp(int64 Time)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("AutoMovementUtil", "FromTimestamp");

	Params::AutoMovementUtil_FromTimestamp Parms{};

	Parms.Time = Time;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function UnrealExtent.AutoMovementUtil.GetCurPointProcessedMetricsMap
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// struct FCapturedInfoArrayPerPoint       InCapturedInfoPerPoint                                 (Parm, NativeAccessSpecifierPublic)
// TMap<class FString, float>              ReturnValue                                            (Parm, OutParm, ReturnParm, NativeAccessSpecifierPublic)

TMap<class FString, float> UAutoMovementUtil::GetCurPointProcessedMetricsMap(const struct FCapturedInfoArrayPerPoint& InCapturedInfoPerPoint)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("AutoMovementUtil", "GetCurPointProcessedMetricsMap");

	Params::AutoMovementUtil_GetCurPointProcessedMetricsMap Parms{};

	Parms.InCapturedInfoPerPoint = std::move(InCapturedInfoPerPoint);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function UnrealExtent.AutoMovementUtil.GetNowTimestamp
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// int64                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

int64 UAutoMovementUtil::GetNowTimestamp()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("AutoMovementUtil", "GetNowTimestamp");

	Params::AutoMovementUtil_GetNowTimestamp Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function UnrealExtent.AutoMovementUtil.GetOfflinePathPoints
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// class FString                           InFilePathUnderProjDir                                 (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    bUseSparsePoints                                       (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// TArray<struct FVector>                  ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, NativeAccessSpecifierPublic)

TArray<struct FVector> UAutoMovementUtil::GetOfflinePathPoints(const class FString& InFilePathUnderProjDir, bool bUseSparsePoints)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("AutoMovementUtil", "GetOfflinePathPoints");

	Params::AutoMovementUtil_GetOfflinePathPoints Parms{};

	Parms.InFilePathUnderProjDir = std::move(InFilePathUnderProjDir);
	Parms.bUseSparsePoints = bUseSparsePoints;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function UnrealExtent.AutoMovementUtil.GetVfxAutoPlayerRootFolderPath
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// class FString                           ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class FString UAutoMovementUtil::GetVfxAutoPlayerRootFolderPath()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("AutoMovementUtil", "GetVfxAutoPlayerRootFolderPath");

	Params::AutoMovementUtil_GetVfxAutoPlayerRootFolderPath Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function UnrealExtent.AutoMovementUtil.InsertIntoCapturedInfoArrayPerPoint
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// TArray<struct FGSCapturedStatResult>    RawCapturedData                                        (Parm, ZeroConstructor, NativeAccessSpecifierPublic)
// struct FCapturedInfoArrayPerPoint       CapturedInfoArrayPerPoint                              (Parm, NativeAccessSpecifierPublic)
// struct FCapturedInfoArrayPerPoint       ReturnValue                                            (Parm, OutParm, ReturnParm, NativeAccessSpecifierPublic)

struct FCapturedInfoArrayPerPoint UAutoMovementUtil::InsertIntoCapturedInfoArrayPerPoint(const TArray<struct FGSCapturedStatResult>& RawCapturedData, const struct FCapturedInfoArrayPerPoint& CapturedInfoArrayPerPoint)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("AutoMovementUtil", "InsertIntoCapturedInfoArrayPerPoint");

	Params::AutoMovementUtil_InsertIntoCapturedInfoArrayPerPoint Parms{};

	Parms.RawCapturedData = std::move(RawCapturedData);
	Parms.CapturedInfoArrayPerPoint = std::move(CapturedInfoArrayPerPoint);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function UnrealExtent.AutoMovementUtil.LoadStatsCapturerReport
// (Final, Native, Static, Public, HasOutParams, BlueprintCallable)
// Parameters:
// class FString                           InFileNameUnderProjFolder                              (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// TArray<struct FGSPathPointStatInfo>     AllPathPointStatInfo                                   (Parm, OutParm, ZeroConstructor, NativeAccessSpecifierPublic)
// int32                                   PointNum                                               (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UAutoMovementUtil::LoadStatsCapturerReport(const class FString& InFileNameUnderProjFolder, TArray<struct FGSPathPointStatInfo>* AllPathPointStatInfo, int32 PointNum)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("AutoMovementUtil", "LoadStatsCapturerReport");

	Params::AutoMovementUtil_LoadStatsCapturerReport Parms{};

	Parms.InFileNameUnderProjFolder = std::move(InFileNameUnderProjFolder);
	Parms.PointNum = PointNum;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	if (AllPathPointStatInfo != nullptr)
		*AllPathPointStatInfo = std::move(Parms.AllPathPointStatInfo);

	return Parms.ReturnValue;
}


// Function UnrealExtent.AutoMovementUtil.MergeMipReportsWithFileNameKeyword
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// class FString                           InDirectoryUnderProjDir                                (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class FString                           InFileNameKeyword                                      (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class FString                           OutputMergedFileName                                   (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UAutoMovementUtil::MergeMipReportsWithFileNameKeyword(const class FString& InDirectoryUnderProjDir, const class FString& InFileNameKeyword, const class FString& OutputMergedFileName)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("AutoMovementUtil", "MergeMipReportsWithFileNameKeyword");

	Params::AutoMovementUtil_MergeMipReportsWithFileNameKeyword Parms{};

	Parms.InDirectoryUnderProjDir = std::move(InDirectoryUnderProjDir);
	Parms.InFileNameKeyword = std::move(InFileNameKeyword);
	Parms.OutputMergedFileName = std::move(OutputMergedFileName);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function UnrealExtent.AutoMovementUtil.MergeMultiTextureMipReports
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// TArray<class FString>                   InReportFilePaths                                      (Parm, ZeroConstructor, NativeAccessSpecifierPublic)
// class FString                           OutputMergedFileName                                   (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UAutoMovementUtil::MergeMultiTextureMipReports(const TArray<class FString>& InReportFilePaths, const class FString& OutputMergedFileName)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("AutoMovementUtil", "MergeMultiTextureMipReports");

	Params::AutoMovementUtil_MergeMultiTextureMipReports Parms{};

	Parms.InReportFilePaths = std::move(InReportFilePaths);
	Parms.OutputMergedFileName = std::move(OutputMergedFileName);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function UnrealExtent.AutoMovementUtil.SaveOfflinePathPoints
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// TArray<struct FVector>                  InPoints                                               (Parm, ZeroConstructor, NativeAccessSpecifierPublic)
// class FString                           InFilePathUnderProjFolder                              (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UAutoMovementUtil::SaveOfflinePathPoints(const TArray<struct FVector>& InPoints, const class FString& InFilePathUnderProjFolder)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("AutoMovementUtil", "SaveOfflinePathPoints");

	Params::AutoMovementUtil_SaveOfflinePathPoints Parms{};

	Parms.InPoints = std::move(InPoints);
	Parms.InFilePathUnderProjFolder = std::move(InFilePathUnderProjFolder);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function UnrealExtent.AutoMovementUtil.SetVfxAutoPlayerRootFolderPath
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// class FString                           InRootFolderPath                                       (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UAutoMovementUtil::SetVfxAutoPlayerRootFolderPath(const class FString& InRootFolderPath)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("AutoMovementUtil", "SetVfxAutoPlayerRootFolderPath");

	Params::AutoMovementUtil_SetVfxAutoPlayerRootFolderPath Parms{};

	Parms.InRootFolderPath = std::move(InRootFolderPath);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function UnrealExtent.AutoMoveTaskAssembler.IncreaseSubTaskViewingRotation
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// ERotateType                             InRotateType                                           (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void AAutoMoveTaskAssembler::IncreaseSubTaskViewingRotation(ERotateType InRotateType)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("AutoMoveTaskAssembler", "IncreaseSubTaskViewingRotation");

	Params::AutoMoveTaskAssembler_IncreaseSubTaskViewingRotation Parms{};

	Parms.InRotateType = InRotateType;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function UnrealExtent.AutoMoveTaskAssembler.InitAutoMoveAssembler
// (Native, Event, Public, BlueprintCallable, BlueprintEvent)

void AAutoMoveTaskAssembler::InitAutoMoveAssembler()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("AutoMoveTaskAssembler", "InitAutoMoveAssembler");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function UnrealExtent.AutoMoveTaskAssembler.TransportSubTaskViewingPosition
// (Final, Native, Public, HasDefaults, BlueprintCallable)
// Parameters:
// struct FVector                          InLocation                                             (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FRotator                         InRotator                                              (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)

void AAutoMoveTaskAssembler::TransportSubTaskViewingPosition(const struct FVector& InLocation, const struct FRotator& InRotator)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("AutoMoveTaskAssembler", "TransportSubTaskViewingPosition");

	Params::AutoMoveTaskAssembler_TransportSubTaskViewingPosition Parms{};

	Parms.InLocation = std::move(InLocation);
	Parms.InRotator = std::move(InRotator);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function UnrealExtent.AutoMoveTaskAssembler.UpdateProcessingState
// (Final, Native, Public, BlueprintCallable)

void AAutoMoveTaskAssembler::UpdateProcessingState()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("AutoMoveTaskAssembler", "UpdateProcessingState");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function UnrealExtent.GSE_NetFuncLib.GetAllActiveConnectionInfo
// (Final, Native, Static, Public, HasOutParams, BlueprintCallable)
// Parameters:
// class UObject*                          WorldContext                                           (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// TArray<struct FGSConnectionInfo>        ConnectionInfos                                        (Parm, OutParm, ZeroConstructor, NativeAccessSpecifierPublic)

void UGSE_NetFuncLib::GetAllActiveConnectionInfo(class UObject* WorldContext, TArray<struct FGSConnectionInfo>* ConnectionInfos)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("GSE_NetFuncLib", "GetAllActiveConnectionInfo");

	Params::GSE_NetFuncLib_GetAllActiveConnectionInfo Parms{};

	Parms.WorldContext = WorldContext;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	if (ConnectionInfos != nullptr)
		*ConnectionInfos = std::move(Parms.ConnectionInfos);
}


// Function UnrealExtent.AutoOnlineSubsystemTest.TestGSSdkAuthToken
// (Final, Native, Static, Public, BlueprintCallable)

void UAutoOnlineSubsystemTest::TestGSSdkAuthToken()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("AutoOnlineSubsystemTest", "TestGSSdkAuthToken");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function UnrealExtent.AutoOnlineSubsystemTest.TestLogin
// (Final, Native, Static, Public, BlueprintCallable)

void UAutoOnlineSubsystemTest::TestLogin()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("AutoOnlineSubsystemTest", "TestLogin");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function UnrealExtent.AssetDataArray.GetAssetDataCount
// (Final, Native, Public, BlueprintCallable, BlueprintPure)
// Parameters:
// int32                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

int32 UAssetDataArray::GetAssetDataCount()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("AssetDataArray", "GetAssetDataCount");

	Params::AssetDataArray_GetAssetDataCount Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function UnrealExtent.AssetDataArray.SetActiveIdx
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// int32                                   Idx                                                    (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UAssetDataArray::SetActiveIdx(int32 Idx)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("AssetDataArray", "SetActiveIdx");

	Params::AssetDataArray_SetActiveIdx Parms{};

	Parms.Idx = Idx;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function UnrealExtent.GSE_GameIntentFuncLib.GetCachedActivityIntentReceivedParam
// (Final, Native, Static, Public, HasOutParams, BlueprintCallable)
// Parameters:
// struct FCachedActivityIntentReceivedParamCSOutParamCS                                             (Parm, OutParm, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UGSE_GameIntentFuncLib::GetCachedActivityIntentReceivedParam(struct FCachedActivityIntentReceivedParamCS* OutParamCS)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("GSE_GameIntentFuncLib", "GetCachedActivityIntentReceivedParam");

	Params::GSE_GameIntentFuncLib_GetCachedActivityIntentReceivedParam Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	if (OutParamCS != nullptr)
		*OutParamCS = std::move(Parms.OutParamCS);

	return Parms.ReturnValue;
}


// Function UnrealExtent.BGUAsyncLineTraceObject.RequestAsyncLineTraceByChannelSingleStatic
// (Final, Native, Static, Public, HasDefaults, BlueprintCallable)
// Parameters:
// class UBGUAsyncLineTraceObject*         InLineTraceObject                                      (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32                                   ReqID                                                  (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FVector                          Start                                                  (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FVector                          End                                                    (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// ECollisionChannel                       TraceChannel                                           (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    bTraceComplex                                          (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    bDebug                                                 (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UBGUAsyncLineTraceObject::RequestAsyncLineTraceByChannelSingleStatic(class UBGUAsyncLineTraceObject* InLineTraceObject, int32 ReqID, const struct FVector& Start, const struct FVector& End, ECollisionChannel TraceChannel, bool bTraceComplex, bool bDebug)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("BGUAsyncLineTraceObject", "RequestAsyncLineTraceByChannelSingleStatic");

	Params::BGUAsyncLineTraceObject_RequestAsyncLineTraceByChannelSingleStatic Parms{};

	Parms.InLineTraceObject = InLineTraceObject;
	Parms.ReqID = ReqID;
	Parms.Start = std::move(Start);
	Parms.End = std::move(End);
	Parms.TraceChannel = TraceChannel;
	Parms.bTraceComplex = bTraceComplex;
	Parms.bDebug = bDebug;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function UnrealExtent.BGUAsyncLineTraceObject.RequestAsyncLineTraceByObjectTypeSingleStatic
// (Final, Native, Static, Public, HasOutParams, HasDefaults, BlueprintCallable)
// Parameters:
// class UBGUAsyncLineTraceObject*         InLineTraceObject                                      (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32                                   ReqID                                                  (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FVector                          Start                                                  (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FVector                          End                                                    (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// TArray<EObjectTypeQuery>                ObjectTypes                                            (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
// bool                                    bTraceComplex                                          (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    bDebug                                                 (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UBGUAsyncLineTraceObject::RequestAsyncLineTraceByObjectTypeSingleStatic(class UBGUAsyncLineTraceObject* InLineTraceObject, int32 ReqID, const struct FVector& Start, const struct FVector& End, const TArray<EObjectTypeQuery>& ObjectTypes, bool bTraceComplex, bool bDebug)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("BGUAsyncLineTraceObject", "RequestAsyncLineTraceByObjectTypeSingleStatic");

	Params::BGUAsyncLineTraceObject_RequestAsyncLineTraceByObjectTypeSingleStatic Parms{};

	Parms.InLineTraceObject = InLineTraceObject;
	Parms.ReqID = ReqID;
	Parms.Start = std::move(Start);
	Parms.End = std::move(End);
	Parms.ObjectTypes = std::move(ObjectTypes);
	Parms.bTraceComplex = bTraceComplex;
	Parms.bDebug = bDebug;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function UnrealExtent.BGUAsyncLineTraceObject.GetAndCleanLineTraceResults
// (Final, Native, Public, HasOutParams, BlueprintCallable)
// Parameters:
// TArray<struct FAsyncLineTraceSingleResult>OutAsyncLineTraceResults                               (Parm, OutParm, ZeroConstructor, ContainsInstancedReference, NativeAccessSpecifierPublic)
// int32                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

int32 UBGUAsyncLineTraceObject::GetAndCleanLineTraceResults(TArray<struct FAsyncLineTraceSingleResult>* OutAsyncLineTraceResults)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BGUAsyncLineTraceObject", "GetAndCleanLineTraceResults");

	Params::BGUAsyncLineTraceObject_GetAndCleanLineTraceResults Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	if (OutAsyncLineTraceResults != nullptr)
		*OutAsyncLineTraceResults = std::move(Parms.OutAsyncLineTraceResults);

	return Parms.ReturnValue;
}


// Function UnrealExtent.BGUAsyncLineTraceObject.RequestAsyncLineTraceByChannelOnlyCheck
// (Final, Native, Public, HasDefaults, BlueprintCallable)
// Parameters:
// int32                                   ReqID                                                  (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FVector                          Start                                                  (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FVector                          End                                                    (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// ECollisionChannel                       TraceChannel                                           (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    bTraceComplex                                          (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    bDebug                                                 (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UBGUAsyncLineTraceObject::RequestAsyncLineTraceByChannelOnlyCheck(int32 ReqID, const struct FVector& Start, const struct FVector& End, ECollisionChannel TraceChannel, bool bTraceComplex, bool bDebug)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BGUAsyncLineTraceObject", "RequestAsyncLineTraceByChannelOnlyCheck");

	Params::BGUAsyncLineTraceObject_RequestAsyncLineTraceByChannelOnlyCheck Parms{};

	Parms.ReqID = ReqID;
	Parms.Start = std::move(Start);
	Parms.End = std::move(End);
	Parms.TraceChannel = TraceChannel;
	Parms.bTraceComplex = bTraceComplex;
	Parms.bDebug = bDebug;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function UnrealExtent.BGUAsyncLineTraceObject.RequestAsyncLineTraceByChannelSingle
// (Final, Native, Public, HasDefaults, BlueprintCallable)
// Parameters:
// int32                                   ReqID                                                  (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FVector                          Start                                                  (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FVector                          End                                                    (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// ECollisionChannel                       TraceChannel                                           (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    bTraceComplex                                          (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    bDebug                                                 (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UBGUAsyncLineTraceObject::RequestAsyncLineTraceByChannelSingle(int32 ReqID, const struct FVector& Start, const struct FVector& End, ECollisionChannel TraceChannel, bool bTraceComplex, bool bDebug)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BGUAsyncLineTraceObject", "RequestAsyncLineTraceByChannelSingle");

	Params::BGUAsyncLineTraceObject_RequestAsyncLineTraceByChannelSingle Parms{};

	Parms.ReqID = ReqID;
	Parms.Start = std::move(Start);
	Parms.End = std::move(End);
	Parms.TraceChannel = TraceChannel;
	Parms.bTraceComplex = bTraceComplex;
	Parms.bDebug = bDebug;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function UnrealExtent.BGUAsyncLineTraceObject.RequestAsyncLineTraceByChannelSingle_Batch
// (Final, Native, Public, HasOutParams, BlueprintCallable)
// Parameters:
// TArray<struct FAsyncLineTraceReq>       ReqList                                                (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
// ECollisionChannel                       TraceChannel                                           (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    bTraceComplex                                          (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    bDebug                                                 (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UBGUAsyncLineTraceObject::RequestAsyncLineTraceByChannelSingle_Batch(const TArray<struct FAsyncLineTraceReq>& ReqList, ECollisionChannel TraceChannel, bool bTraceComplex, bool bDebug)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BGUAsyncLineTraceObject", "RequestAsyncLineTraceByChannelSingle_Batch");

	Params::BGUAsyncLineTraceObject_RequestAsyncLineTraceByChannelSingle_Batch Parms{};

	Parms.ReqList = std::move(ReqList);
	Parms.TraceChannel = TraceChannel;
	Parms.bTraceComplex = bTraceComplex;
	Parms.bDebug = bDebug;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function UnrealExtent.BGUAsyncLineTraceObject.RequestAsyncLineTraceByObjectTypeSingle
// (Final, Native, Public, HasOutParams, HasDefaults, BlueprintCallable)
// Parameters:
// int32                                   ReqID                                                  (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FVector                          Start                                                  (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FVector                          End                                                    (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// TArray<EObjectTypeQuery>                ObjectTypes                                            (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
// bool                                    bTraceComplex                                          (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    bDebug                                                 (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UBGUAsyncLineTraceObject::RequestAsyncLineTraceByObjectTypeSingle(int32 ReqID, const struct FVector& Start, const struct FVector& End, const TArray<EObjectTypeQuery>& ObjectTypes, bool bTraceComplex, bool bDebug)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BGUAsyncLineTraceObject", "RequestAsyncLineTraceByObjectTypeSingle");

	Params::BGUAsyncLineTraceObject_RequestAsyncLineTraceByObjectTypeSingle Parms{};

	Parms.ReqID = ReqID;
	Parms.Start = std::move(Start);
	Parms.End = std::move(End);
	Parms.ObjectTypes = std::move(ObjectTypes);
	Parms.bTraceComplex = bTraceComplex;
	Parms.bDebug = bDebug;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function UnrealExtent.BGUAsyncLineTraceObject.RequestAsyncLineTraceByObjectTypeSingle_Batch
// (Final, Native, Public, HasOutParams, BlueprintCallable)
// Parameters:
// TArray<struct FAsyncLineTraceReq>       ReqList                                                (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
// TArray<EObjectTypeQuery>                ObjectTypes                                            (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
// bool                                    bTraceComplex                                          (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    bDebug                                                 (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UBGUAsyncLineTraceObject::RequestAsyncLineTraceByObjectTypeSingle_Batch(const TArray<struct FAsyncLineTraceReq>& ReqList, const TArray<EObjectTypeQuery>& ObjectTypes, bool bTraceComplex, bool bDebug)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BGUAsyncLineTraceObject", "RequestAsyncLineTraceByObjectTypeSingle_Batch");

	Params::BGUAsyncLineTraceObject_RequestAsyncLineTraceByObjectTypeSingle_Batch Parms{};

	Parms.ReqList = std::move(ReqList);
	Parms.ObjectTypes = std::move(ObjectTypes);
	Parms.bTraceComplex = bTraceComplex;
	Parms.bDebug = bDebug;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function UnrealExtent.BGUMovieSceneParameterSection.AddColorParameterKey
// (Final, Native, Public, HasOutParams, HasDefaults, BlueprintCallable)
// Parameters:
// struct FBGUMaterialParameterInfo        InParameterInfo                                        (ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FFrameNumber                     InTime                                                 (Parm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FLinearColor                     InValue                                                (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UBGUMovieSceneParameterSection::AddColorParameterKey(const struct FBGUMaterialParameterInfo& InParameterInfo, const struct FFrameNumber& InTime, const struct FLinearColor& InValue)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BGUMovieSceneParameterSection", "AddColorParameterKey");

	Params::BGUMovieSceneParameterSection_AddColorParameterKey Parms{};

	Parms.InParameterInfo = std::move(InParameterInfo);
	Parms.InTime = std::move(InTime);
	Parms.InValue = std::move(InValue);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function UnrealExtent.BGUMovieSceneParameterSection.AddScalarParameterKey
// (Final, Native, Public, HasOutParams, HasDefaults, BlueprintCallable)
// Parameters:
// struct FBGUMaterialParameterInfo        InParameterInfo                                        (ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FFrameNumber                     InTime                                                 (Parm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   InValue                                                (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UBGUMovieSceneParameterSection::AddScalarParameterKey(const struct FBGUMaterialParameterInfo& InParameterInfo, const struct FFrameNumber& InTime, float InValue)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BGUMovieSceneParameterSection", "AddScalarParameterKey");

	Params::BGUMovieSceneParameterSection_AddScalarParameterKey Parms{};

	Parms.InParameterInfo = std::move(InParameterInfo);
	Parms.InTime = std::move(InTime);
	Parms.InValue = InValue;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function UnrealExtent.BGUMovieSceneParameterSection.AddVectorParameterKey
// (Final, Native, Public, HasOutParams, HasDefaults, BlueprintCallable)
// Parameters:
// struct FBGUMaterialParameterInfo        InParameterInfo                                        (ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FFrameNumber                     InTime                                                 (Parm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FVector                          InValue                                                (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UBGUMovieSceneParameterSection::AddVectorParameterKey(const struct FBGUMaterialParameterInfo& InParameterInfo, const struct FFrameNumber& InTime, const struct FVector& InValue)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BGUMovieSceneParameterSection", "AddVectorParameterKey");

	Params::BGUMovieSceneParameterSection_AddVectorParameterKey Parms{};

	Parms.InParameterInfo = std::move(InParameterInfo);
	Parms.InTime = std::move(InTime);
	Parms.InValue = std::move(InValue);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function UnrealExtent.BGUMovieSceneParameterSection.RemoveColorParameter
// (Final, Native, Public, HasOutParams, BlueprintCallable)
// Parameters:
// struct FBGUMaterialParameterInfo        InParameterInfo                                        (ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UBGUMovieSceneParameterSection::RemoveColorParameter(const struct FBGUMaterialParameterInfo& InParameterInfo)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BGUMovieSceneParameterSection", "RemoveColorParameter");

	Params::BGUMovieSceneParameterSection_RemoveColorParameter Parms{};

	Parms.InParameterInfo = std::move(InParameterInfo);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function UnrealExtent.BGUMovieSceneParameterSection.RemoveColorParameterByName
// (Final, Native, Public, HasOutParams, BlueprintCallable)
// Parameters:
// class FName                             InParameterInfoName                                    (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UBGUMovieSceneParameterSection::RemoveColorParameterByName(const class FName& InParameterInfoName)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BGUMovieSceneParameterSection", "RemoveColorParameterByName");

	Params::BGUMovieSceneParameterSection_RemoveColorParameterByName Parms{};

	Parms.InParameterInfoName = InParameterInfoName;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function UnrealExtent.BGUMovieSceneParameterSection.RemoveScalarParameter
// (Final, Native, Public, HasOutParams, BlueprintCallable)
// Parameters:
// struct FBGUMaterialParameterInfo        InParameterInfo                                        (ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UBGUMovieSceneParameterSection::RemoveScalarParameter(const struct FBGUMaterialParameterInfo& InParameterInfo)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BGUMovieSceneParameterSection", "RemoveScalarParameter");

	Params::BGUMovieSceneParameterSection_RemoveScalarParameter Parms{};

	Parms.InParameterInfo = std::move(InParameterInfo);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function UnrealExtent.BGUMovieSceneParameterSection.RemoveScalarParameterByName
// (Final, Native, Public, HasOutParams, BlueprintCallable)
// Parameters:
// class FName                             InParameterInfoName                                    (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UBGUMovieSceneParameterSection::RemoveScalarParameterByName(const class FName& InParameterInfoName)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BGUMovieSceneParameterSection", "RemoveScalarParameterByName");

	Params::BGUMovieSceneParameterSection_RemoveScalarParameterByName Parms{};

	Parms.InParameterInfoName = InParameterInfoName;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function UnrealExtent.BGUMovieSceneParameterSection.RemoveVectorParameter
// (Final, Native, Public, HasOutParams, BlueprintCallable)
// Parameters:
// struct FBGUMaterialParameterInfo        InParameterInfo                                        (ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UBGUMovieSceneParameterSection::RemoveVectorParameter(const struct FBGUMaterialParameterInfo& InParameterInfo)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BGUMovieSceneParameterSection", "RemoveVectorParameter");

	Params::BGUMovieSceneParameterSection_RemoveVectorParameter Parms{};

	Parms.InParameterInfo = std::move(InParameterInfo);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function UnrealExtent.BGUMovieSceneParameterSection.RemoveVectorParameterByName
// (Final, Native, Public, HasOutParams, BlueprintCallable)
// Parameters:
// class FName                             InParameterInfoName                                    (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UBGUMovieSceneParameterSection::RemoveVectorParameterByName(const class FName& InParameterInfoName)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BGUMovieSceneParameterSection", "RemoveVectorParameterByName");

	Params::BGUMovieSceneParameterSection_RemoveVectorParameterByName Parms{};

	Parms.InParameterInfoName = InParameterInfoName;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function UnrealExtent.BGUMovieSceneParameterSection.GetParameterInfos
// (Final, Native, Public, HasOutParams, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// TSet<struct FBGUMaterialParameterInfo>  ParameterInfos                                         (Parm, OutParm, NativeAccessSpecifierPublic)

void UBGUMovieSceneParameterSection::GetParameterInfos(TSet<struct FBGUMaterialParameterInfo>* ParameterInfos) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BGUMovieSceneParameterSection", "GetParameterInfos");

	Params::BGUMovieSceneParameterSection_GetParameterInfos Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	if (ParameterInfos != nullptr)
		*ParameterInfos = std::move(Parms.ParameterInfos);
}


// Function UnrealExtent.CLRBindingTrigger.GenerateClrBindingCode
// (Event, Public, BlueprintEvent)

void ACLRBindingTrigger::GenerateClrBindingCode()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CLRBindingTrigger", "GenerateClrBindingCode");

	UObject::ProcessEvent(Func, nullptr);
}


// Function UnrealExtent.GSBitmapFontBox.SetText
// (Native, Public, BlueprintCallable)
// Parameters:
// class FText                             InText                                                 (Parm, NativeAccessSpecifierPublic)

void UGSBitmapFontBox::SetText(const class FText& InText)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GSBitmapFontBox", "SetText");

	Params::GSBitmapFontBox_SetText Parms{};

	Parms.InText = std::move(InText);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function UnrealExtent.GSE_AIFuncLib.AISetBT
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// class AActor*                           Actor                                                  (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class UBehaviorTree*                    BTAsset                                                (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UGSE_AIFuncLib::AISetBT(class AActor* Actor, class UBehaviorTree* BTAsset)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("GSE_AIFuncLib", "AISetBT");

	Params::GSE_AIFuncLib_AISetBT Parms{};

	Parms.Actor = Actor;
	Parms.BTAsset = BTAsset;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function UnrealExtent.GSE_AIFuncLib.ListenerForgetsActor
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// class UAIPerceptionComponent*           PerceptionComp                                         (Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class AActor*                           ActorToForget                                          (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UGSE_AIFuncLib::ListenerForgetsActor(class UAIPerceptionComponent* PerceptionComp, class AActor* ActorToForget)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("GSE_AIFuncLib", "ListenerForgetsActor");

	Params::GSE_AIFuncLib_ListenerForgetsActor Parms{};

	Parms.PerceptionComp = PerceptionComp;
	Parms.ActorToForget = ActorToForget;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function UnrealExtent.GSE_AIFuncLib.SetAIBTPause
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// class UBrainComponent*                  BrainComponent                                         (Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    bEnable                                                (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UGSE_AIFuncLib::SetAIBTPause(class UBrainComponent* BrainComponent, bool bEnable)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("GSE_AIFuncLib", "SetAIBTPause");

	Params::GSE_AIFuncLib_SetAIBTPause Parms{};

	Parms.BrainComponent = BrainComponent;
	Parms.bEnable = bEnable;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function UnrealExtent.GSE_AIFuncLib.SetAIBTStop
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// class UBehaviorTreeComponent*           BTComp                                                 (Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UGSE_AIFuncLib::SetAIBTStop(class UBehaviorTreeComponent* BTComp)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("GSE_AIFuncLib", "SetAIBTStop");

	Params::GSE_AIFuncLib_SetAIBTStop Parms{};

	Parms.BTComp = BTComp;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function UnrealExtent.GSE_AIFuncLib.SetAISenseConfig
// (Final, Native, Static, Public, HasOutParams, BlueprintCallable)
// Parameters:
// class UAIPerceptionComponent*           PerceptionComp                                         (Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   HearRange                                              (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   SightRange                                             (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   LoseSightRange                                         (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   VisionAngleDegrees                                     (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   ASRangeFromLastSeenLoc                                 (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    IsSightDominantSense                                   (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    IsHearingSet                                           (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    IsSightSet                                             (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UGSE_AIFuncLib::SetAISenseConfig(class UAIPerceptionComponent* PerceptionComp, float HearRange, float SightRange, float LoseSightRange, float VisionAngleDegrees, float ASRangeFromLastSeenLoc, bool IsSightDominantSense, bool* IsHearingSet, bool* IsSightSet)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("GSE_AIFuncLib", "SetAISenseConfig");

	Params::GSE_AIFuncLib_SetAISenseConfig Parms{};

	Parms.PerceptionComp = PerceptionComp;
	Parms.HearRange = HearRange;
	Parms.SightRange = SightRange;
	Parms.LoseSightRange = LoseSightRange;
	Parms.VisionAngleDegrees = VisionAngleDegrees;
	Parms.ASRangeFromLastSeenLoc = ASRangeFromLastSeenLoc;
	Parms.IsSightDominantSense = IsSightDominantSense;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	if (IsHearingSet != nullptr)
		*IsHearingSet = Parms.IsHearingSet;

	if (IsSightSet != nullptr)
		*IsSightSet = Parms.IsSightSet;
}


// Function UnrealExtent.GSE_AIFuncLib.SetPerceptionForgetAll
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// class UAIPerceptionComponent*           PerceptionComp                                         (Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UGSE_AIFuncLib::SetPerceptionForgetAll(class UAIPerceptionComponent* PerceptionComp)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("GSE_AIFuncLib", "SetPerceptionForgetAll");

	Params::GSE_AIFuncLib_SetPerceptionForgetAll Parms{};

	Parms.PerceptionComp = PerceptionComp;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function UnrealExtent.GSE_AIFuncLib.SinglePerceptionSetEnable
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// class UAIPerceptionComponent*           PerceptionComp                                         (Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    IsHearing                                              (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    bEnable                                                (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UGSE_AIFuncLib::SinglePerceptionSetEnable(class UAIPerceptionComponent* PerceptionComp, bool IsHearing, bool bEnable)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("GSE_AIFuncLib", "SinglePerceptionSetEnable");

	Params::GSE_AIFuncLib_SinglePerceptionSetEnable Parms{};

	Parms.PerceptionComp = PerceptionComp;
	Parms.IsHearing = IsHearing;
	Parms.bEnable = bEnable;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function UnrealExtent.GSE_AnimationFuncLib.AnimationBindAllPossessableObject
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// class UUserWidget*                      RootWidget                                             (Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class UWidgetAnimation*                 Animation                                              (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    UseDisplayName                                         (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UGSE_AnimationFuncLib::AnimationBindAllPossessableObject(class UUserWidget* RootWidget, class UWidgetAnimation* Animation, bool UseDisplayName)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("GSE_AnimationFuncLib", "AnimationBindAllPossessableObject");

	Params::GSE_AnimationFuncLib_AnimationBindAllPossessableObject Parms{};

	Parms.RootWidget = RootWidget;
	Parms.Animation = Animation;
	Parms.UseDisplayName = UseDisplayName;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function UnrealExtent.GSE_AnimationFuncLib.AnimationBindPossessableObjectCS
// (Final, Native, Static, Public, HasOutParams, BlueprintCallable)
// Parameters:
// class UWidgetAnimation*                 Animation                                              (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FSequenceBindingIDInCS           BindingID                                              (ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
// class UObject*                          BindObj                                                (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class UObject*                          Ctx                                                    (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UGSE_AnimationFuncLib::AnimationBindPossessableObjectCS(class UWidgetAnimation* Animation, const struct FSequenceBindingIDInCS& BindingID, class UObject* BindObj, class UObject* Ctx)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("GSE_AnimationFuncLib", "AnimationBindPossessableObjectCS");

	Params::GSE_AnimationFuncLib_AnimationBindPossessableObjectCS Parms{};

	Parms.Animation = Animation;
	Parms.BindingID = std::move(BindingID);
	Parms.BindObj = BindObj;
	Parms.Ctx = Ctx;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function UnrealExtent.GSE_AnimationFuncLib.DuplicateAnimation
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// class UWidgetAnimation*                 InAnimation                                            (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class UObject*                          Outer_0                                                (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class FName                             Name_0                                                 (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class UWidgetAnimation*                 ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class UWidgetAnimation* UGSE_AnimationFuncLib::DuplicateAnimation(class UWidgetAnimation* InAnimation, class UObject* Outer_0, class FName Name_0)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("GSE_AnimationFuncLib", "DuplicateAnimation");

	Params::GSE_AnimationFuncLib_DuplicateAnimation Parms{};

	Parms.InAnimation = InAnimation;
	Parms.Outer_0 = Outer_0;
	Parms.Name_0 = Name_0;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function UnrealExtent.GSE_AnimationFuncLib.GetAnimationBindingIDByDisplayName
// (Final, Native, Static, Public, HasOutParams, BlueprintCallable)
// Parameters:
// class UWidgetAnimation*                 Animation                                              (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class FName                             TargetName                                             (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FMovieSceneObjectBindingID       ReturnValue                                            (Parm, OutParm, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

struct FMovieSceneObjectBindingID UGSE_AnimationFuncLib::GetAnimationBindingIDByDisplayName(class UWidgetAnimation* Animation, const class FName& TargetName)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("GSE_AnimationFuncLib", "GetAnimationBindingIDByDisplayName");

	Params::GSE_AnimationFuncLib_GetAnimationBindingIDByDisplayName Parms{};

	Parms.Animation = Animation;
	Parms.TargetName = TargetName;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function UnrealExtent.GSE_AnimationFuncLib.GetAnimationBindingIDByName
// (Final, Native, Static, Public, HasOutParams, BlueprintCallable)
// Parameters:
// class UWidgetAnimation*                 Animation                                              (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class FName                             TargetName                                             (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FMovieSceneObjectBindingID       ReturnValue                                            (Parm, OutParm, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

struct FMovieSceneObjectBindingID UGSE_AnimationFuncLib::GetAnimationBindingIDByName(class UWidgetAnimation* Animation, const class FName& TargetName)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("GSE_AnimationFuncLib", "GetAnimationBindingIDByName");

	Params::GSE_AnimationFuncLib_GetAnimationBindingIDByName Parms{};

	Parms.Animation = Animation;
	Parms.TargetName = TargetName;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function UnrealExtent.GSE_AnimationFuncLib.GetAnimationBindingIDByNameCS
// (Final, Native, Static, Public, HasOutParams, BlueprintCallable)
// Parameters:
// class UWidgetAnimation*                 Animation                                              (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class FName                             TargetName                                             (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FSequenceBindingIDInCS           ReturnValue                                            (Parm, OutParm, ReturnParm, NoDestructor, NativeAccessSpecifierPublic)

struct FSequenceBindingIDInCS UGSE_AnimationFuncLib::GetAnimationBindingIDByNameCS(class UWidgetAnimation* Animation, const class FName& TargetName)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("GSE_AnimationFuncLib", "GetAnimationBindingIDByNameCS");

	Params::GSE_AnimationFuncLib_GetAnimationBindingIDByNameCS Parms{};

	Parms.Animation = Animation;
	Parms.TargetName = TargetName;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function UnrealExtent.GSE_AnimationFuncLib.SaveAsset
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// class UWidgetAnimation*                 InAnimation                                            (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class FString                           Path                                                   (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class FString                           Name_0                                                 (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UGSE_AnimationFuncLib::SaveAsset(class UWidgetAnimation* InAnimation, const class FString& Path, const class FString& Name_0)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("GSE_AnimationFuncLib", "SaveAsset");

	Params::GSE_AnimationFuncLib_SaveAsset Parms{};

	Parms.InAnimation = InAnimation;
	Parms.Path = std::move(Path);
	Parms.Name_0 = std::move(Name_0);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function UnrealExtent.GSE_AnimDistanceMatchingLibrary.AdvanceTimeByDistanceMatchToTarget
// (Final, Native, Static, Public, HasOutParams, HasDefaults, BlueprintCallable)
// Parameters:
// struct FAnimUpdateContext               UpdateContext                                          (ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
// struct FSequenceEvaluatorReference      SequenceEvaluator                                      (ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
// float                                   DistanceToTarget                                       (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class FName                             DistanceCurveName                                      (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FVector2D                        PlayRateClamp                                          (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FSequenceEvaluatorReference      ReturnValue                                            (Parm, OutParm, ReturnParm, NoDestructor, NativeAccessSpecifierPublic)

struct FSequenceEvaluatorReference UGSE_AnimDistanceMatchingLibrary::AdvanceTimeByDistanceMatchToTarget(const struct FAnimUpdateContext& UpdateContext, const struct FSequenceEvaluatorReference& SequenceEvaluator, float DistanceToTarget, class FName DistanceCurveName, const struct FVector2D& PlayRateClamp)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("GSE_AnimDistanceMatchingLibrary", "AdvanceTimeByDistanceMatchToTarget");

	Params::GSE_AnimDistanceMatchingLibrary_AdvanceTimeByDistanceMatchToTarget Parms{};

	Parms.UpdateContext = std::move(UpdateContext);
	Parms.SequenceEvaluator = std::move(SequenceEvaluator);
	Parms.DistanceToTarget = DistanceToTarget;
	Parms.DistanceCurveName = DistanceCurveName;
	Parms.PlayRateClamp = std::move(PlayRateClamp);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function UnrealExtent.GSE_AnimDistanceMatchingLibrary.AdvanceTimeBySpeedMatching
// (Final, Native, Static, Public, HasOutParams, HasDefaults, BlueprintCallable)
// Parameters:
// struct FAnimUpdateContext               UpdateContext                                          (ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
// struct FSequenceEvaluatorReference      SequenceEvaluator                                      (ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
// float                                   SpeedToMatch                                           (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FVector2D                        PlayRateClamp                                          (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FSequenceEvaluatorReference      ReturnValue                                            (Parm, OutParm, ReturnParm, NoDestructor, NativeAccessSpecifierPublic)

struct FSequenceEvaluatorReference UGSE_AnimDistanceMatchingLibrary::AdvanceTimeBySpeedMatching(const struct FAnimUpdateContext& UpdateContext, const struct FSequenceEvaluatorReference& SequenceEvaluator, float SpeedToMatch, const struct FVector2D& PlayRateClamp)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("GSE_AnimDistanceMatchingLibrary", "AdvanceTimeBySpeedMatching");

	Params::GSE_AnimDistanceMatchingLibrary_AdvanceTimeBySpeedMatching Parms{};

	Parms.UpdateContext = std::move(UpdateContext);
	Parms.SequenceEvaluator = std::move(SequenceEvaluator);
	Parms.SpeedToMatch = SpeedToMatch;
	Parms.PlayRateClamp = std::move(PlayRateClamp);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function UnrealExtent.GSE_AnimFuncLib.ABPStateMachineGetGlobalWeight
// (Final, Native, Static, Public, HasOutParams, BlueprintCallable, BlueprintPure)
// Parameters:
// class UAnimInstance*                    AnimInst                                               (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class FName                             StateMachineName                                       (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class FName                             StateName                                              (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

float UGSE_AnimFuncLib::ABPStateMachineGetGlobalWeight(class UAnimInstance* AnimInst, const class FName& StateMachineName, const class FName& StateName)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("GSE_AnimFuncLib", "ABPStateMachineGetGlobalWeight");

	Params::GSE_AnimFuncLib_ABPStateMachineGetGlobalWeight Parms{};

	Parms.AnimInst = AnimInst;
	Parms.StateMachineName = StateMachineName;
	Parms.StateName = StateName;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function UnrealExtent.GSE_AnimFuncLib.AddAnimSequence
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// class UAnimMontage*                     TargetMontage                                          (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class UAnimSequence*                    Sequence                                               (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UGSE_AnimFuncLib::AddAnimSequence(class UAnimMontage* TargetMontage, class UAnimSequence* Sequence)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("GSE_AnimFuncLib", "AddAnimSequence");

	Params::GSE_AnimFuncLib_AddAnimSequence Parms{};

	Parms.TargetMontage = TargetMontage;
	Parms.Sequence = Sequence;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function UnrealExtent.GSE_AnimFuncLib.AddPoint
// (Final, Native, Static, Public, HasDefaults, BlueprintCallable)
// Parameters:
// class UBlendSpace*                      BlendSpace                                             (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class UAnimSequence*                    PointSequence                                          (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FVector                          PointValue                                             (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UGSE_AnimFuncLib::AddPoint(class UBlendSpace* BlendSpace, class UAnimSequence* PointSequence, const struct FVector& PointValue)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("GSE_AnimFuncLib", "AddPoint");

	Params::GSE_AnimFuncLib_AddPoint Parms{};

	Parms.BlendSpace = BlendSpace;
	Parms.PointSequence = PointSequence;
	Parms.PointValue = std::move(PointValue);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function UnrealExtent.GSE_AnimFuncLib.AddPreviewAssetToSkeleton
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// class USkeleton*                        InUSkeleton                                            (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class FString                           BoneName                                               (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class UObject*                          PreviewAsset                                           (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UGSE_AnimFuncLib::AddPreviewAssetToSkeleton(class USkeleton* InUSkeleton, const class FString& BoneName, class UObject* PreviewAsset)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("GSE_AnimFuncLib", "AddPreviewAssetToSkeleton");

	Params::GSE_AnimFuncLib_AddPreviewAssetToSkeleton Parms{};

	Parms.InUSkeleton = InUSkeleton;
	Parms.BoneName = std::move(BoneName);
	Parms.PreviewAsset = PreviewAsset;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function UnrealExtent.GSE_AnimFuncLib.AddSocketToSkeleton
// (Final, Native, Static, Public, HasOutParams, HasDefaults, BlueprintCallable)
// Parameters:
// class USkeleton*                        InUSkeleton                                            (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class FString                           BoneName                                               (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class FString                           SocketName                                             (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FTransform                       Offset                                                 (ConstParm, Parm, OutParm, ReferenceParm, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UGSE_AnimFuncLib::AddSocketToSkeleton(class USkeleton* InUSkeleton, const class FString& BoneName, const class FString& SocketName, const struct FTransform& Offset)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("GSE_AnimFuncLib", "AddSocketToSkeleton");

	Params::GSE_AnimFuncLib_AddSocketToSkeleton Parms{};

	Parms.InUSkeleton = InUSkeleton;
	Parms.BoneName = std::move(BoneName);
	Parms.SocketName = std::move(SocketName);
	Parms.Offset = std::move(Offset);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function UnrealExtent.GSE_AnimFuncLib.AnimInstanceMontageSetPos
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// class UAnimInstance*                    AnimInst                                               (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   MontagePos                                             (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UGSE_AnimFuncLib::AnimInstanceMontageSetPos(class UAnimInstance* AnimInst, float MontagePos)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("GSE_AnimFuncLib", "AnimInstanceMontageSetPos");

	Params::GSE_AnimFuncLib_AnimInstanceMontageSetPos Parms{};

	Parms.AnimInst = AnimInst;
	Parms.MontagePos = MontagePos;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function UnrealExtent.GSE_AnimFuncLib.AnimMontageGetBlendInAndOutTime
// (Final, Native, Static, Public, HasOutParams, BlueprintCallable, BlueprintPure)
// Parameters:
// class UAnimMontage*                     AnimMontage                                            (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   BlendInTime                                            (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   BlendOutTime                                           (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UGSE_AnimFuncLib::AnimMontageGetBlendInAndOutTime(class UAnimMontage* AnimMontage, float* BlendInTime, float* BlendOutTime)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("GSE_AnimFuncLib", "AnimMontageGetBlendInAndOutTime");

	Params::GSE_AnimFuncLib_AnimMontageGetBlendInAndOutTime Parms{};

	Parms.AnimMontage = AnimMontage;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	if (BlendInTime != nullptr)
		*BlendInTime = Parms.BlendInTime;

	if (BlendOutTime != nullptr)
		*BlendOutTime = Parms.BlendOutTime;
}


// Function UnrealExtent.GSE_AnimFuncLib.AnimMontageGetBoneTransformWS
// (Final, Native, Static, Public, HasDefaults, BlueprintCallable)
// Parameters:
// class UAnimMontage*                     AnimMontage                                            (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class USkeletalMeshComponent*           MeshComponent                                          (ConstParm, Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class FName                             BoneName                                               (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   Pos                                                    (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    IsNeedFixRotator                                       (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FRotator                         FixRotator                                             (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
// struct FTransform                       ReturnValue                                            (Parm, OutParm, ReturnParm, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)

struct FTransform UGSE_AnimFuncLib::AnimMontageGetBoneTransformWS(class UAnimMontage* AnimMontage, const class USkeletalMeshComponent* MeshComponent, class FName BoneName, float Pos, bool IsNeedFixRotator, const struct FRotator& FixRotator)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("GSE_AnimFuncLib", "AnimMontageGetBoneTransformWS");

	Params::GSE_AnimFuncLib_AnimMontageGetBoneTransformWS Parms{};

	Parms.AnimMontage = AnimMontage;
	Parms.MeshComponent = MeshComponent;
	Parms.BoneName = BoneName;
	Parms.Pos = Pos;
	Parms.IsNeedFixRotator = IsNeedFixRotator;
	Parms.FixRotator = std::move(FixRotator);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function UnrealExtent.GSE_AnimFuncLib.AnimMontageGetMontageEndTimeForScale
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// class UAnimMontage*                     AnimMontage                                            (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

float UGSE_AnimFuncLib::AnimMontageGetMontageEndTimeForScale(class UAnimMontage* AnimMontage)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("GSE_AnimFuncLib", "AnimMontageGetMontageEndTimeForScale");

	Params::GSE_AnimFuncLib_AnimMontageGetMontageEndTimeForScale Parms{};

	Parms.AnimMontage = AnimMontage;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function UnrealExtent.GSE_AnimFuncLib.AnimMontageGetQTEBoneTransform
// (Final, Native, Static, Public, HasDefaults, BlueprintCallable)
// Parameters:
// class UAnimMontage*                     AnimMontage                                            (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class USkeletalMeshComponent*           MeshComponent                                          (ConstParm, Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class FName                             BoneName                                               (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   Pos                                                    (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FTransform                       ReturnValue                                            (Parm, OutParm, ReturnParm, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)

struct FTransform UGSE_AnimFuncLib::AnimMontageGetQTEBoneTransform(class UAnimMontage* AnimMontage, const class USkeletalMeshComponent* MeshComponent, class FName BoneName, float Pos)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("GSE_AnimFuncLib", "AnimMontageGetQTEBoneTransform");

	Params::GSE_AnimFuncLib_AnimMontageGetQTEBoneTransform Parms{};

	Parms.AnimMontage = AnimMontage;
	Parms.MeshComponent = MeshComponent;
	Parms.BoneName = BoneName;
	Parms.Pos = Pos;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function UnrealExtent.GSE_AnimFuncLib.AnimMontageGetRootMotionLocationForScale
// (Final, Native, Static, Public, HasOutParams, HasDefaults, BlueprintCallable)
// Parameters:
// class UAnimMontage*                     AnimMontage                                            (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FVector                          OutStartPos                                            (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FVector                          OutEndPos                                              (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   LeftScaleTime                                          (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   RightScaleTime                                         (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UGSE_AnimFuncLib::AnimMontageGetRootMotionLocationForScale(class UAnimMontage* AnimMontage, struct FVector* OutStartPos, struct FVector* OutEndPos, float LeftScaleTime, float RightScaleTime)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("GSE_AnimFuncLib", "AnimMontageGetRootMotionLocationForScale");

	Params::GSE_AnimFuncLib_AnimMontageGetRootMotionLocationForScale Parms{};

	Parms.AnimMontage = AnimMontage;
	Parms.LeftScaleTime = LeftScaleTime;
	Parms.RightScaleTime = RightScaleTime;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	if (OutStartPos != nullptr)
		*OutStartPos = std::move(Parms.OutStartPos);

	if (OutEndPos != nullptr)
		*OutEndPos = std::move(Parms.OutEndPos);

	return Parms.ReturnValue;
}


// Function UnrealExtent.GSE_AnimFuncLib.AnimMontageGetRootMotionRotationForScale
// (Final, Native, Static, Public, HasOutParams, HasDefaults, BlueprintCallable)
// Parameters:
// class UAnimMontage*                     AnimMontage                                            (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FRotator                         OutStartRotation                                       (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
// struct FRotator                         OutEndRotation                                         (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
// float                                   LeftScaleTime                                          (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   RightScaleTime                                         (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UGSE_AnimFuncLib::AnimMontageGetRootMotionRotationForScale(class UAnimMontage* AnimMontage, struct FRotator* OutStartRotation, struct FRotator* OutEndRotation, float LeftScaleTime, float RightScaleTime)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("GSE_AnimFuncLib", "AnimMontageGetRootMotionRotationForScale");

	Params::GSE_AnimFuncLib_AnimMontageGetRootMotionRotationForScale Parms{};

	Parms.AnimMontage = AnimMontage;
	Parms.LeftScaleTime = LeftScaleTime;
	Parms.RightScaleTime = RightScaleTime;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	if (OutStartRotation != nullptr)
		*OutStartRotation = std::move(Parms.OutStartRotation);

	if (OutEndRotation != nullptr)
		*OutEndRotation = std::move(Parms.OutEndRotation);

	return Parms.ReturnValue;
}


// Function UnrealExtent.GSE_AnimFuncLib.AnimMontageGetSocketLocationForScale
// (Final, Native, Static, Public, HasOutParams, HasDefaults, BlueprintCallable)
// Parameters:
// class UAnimMontage*                     AnimMontage                                            (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FVector                          OutEndPos                                              (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   ScaleTime                                              (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class FString                           SocketName                                             (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UGSE_AnimFuncLib::AnimMontageGetSocketLocationForScale(class UAnimMontage* AnimMontage, struct FVector* OutEndPos, float ScaleTime, const class FString& SocketName)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("GSE_AnimFuncLib", "AnimMontageGetSocketLocationForScale");

	Params::GSE_AnimFuncLib_AnimMontageGetSocketLocationForScale Parms{};

	Parms.AnimMontage = AnimMontage;
	Parms.ScaleTime = ScaleTime;
	Parms.SocketName = std::move(SocketName);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	if (OutEndPos != nullptr)
		*OutEndPos = std::move(Parms.OutEndPos);

	return Parms.ReturnValue;
}


// Function UnrealExtent.GSE_AnimFuncLib.AnimSequenceFindPosWithDistanceCurve
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// class UAnimSequence*                    AnimationSequence                                      (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class FName                             CurveName                                              (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   DistanceValue                                          (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

float UGSE_AnimFuncLib::AnimSequenceFindPosWithDistanceCurve(class UAnimSequence* AnimationSequence, class FName CurveName, float DistanceValue)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("GSE_AnimFuncLib", "AnimSequenceFindPosWithDistanceCurve");

	Params::GSE_AnimFuncLib_AnimSequenceFindPosWithDistanceCurve Parms{};

	Parms.AnimationSequence = AnimationSequence;
	Parms.CurveName = CurveName;
	Parms.DistanceValue = DistanceValue;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function UnrealExtent.GSE_AnimFuncLib.AnimSequenceGetRootMotionLocationForScale
// (Final, Native, Static, Public, HasOutParams, HasDefaults, BlueprintCallable)
// Parameters:
// class UAnimSequence*                    AnimMontage                                            (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FVector                          OutStartPos                                            (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FVector                          OutEndPos                                              (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   LeftScaleTime                                          (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   RightScaleTime                                         (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UGSE_AnimFuncLib::AnimSequenceGetRootMotionLocationForScale(class UAnimSequence* AnimMontage, struct FVector* OutStartPos, struct FVector* OutEndPos, float LeftScaleTime, float RightScaleTime)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("GSE_AnimFuncLib", "AnimSequenceGetRootMotionLocationForScale");

	Params::GSE_AnimFuncLib_AnimSequenceGetRootMotionLocationForScale Parms{};

	Parms.AnimMontage = AnimMontage;
	Parms.LeftScaleTime = LeftScaleTime;
	Parms.RightScaleTime = RightScaleTime;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	if (OutStartPos != nullptr)
		*OutStartPos = std::move(Parms.OutStartPos);

	if (OutEndPos != nullptr)
		*OutEndPos = std::move(Parms.OutEndPos);

	return Parms.ReturnValue;
}


// Function UnrealExtent.GSE_AnimFuncLib.AnimSequenceGetRootMotionRotationForScale
// (Final, Native, Static, Public, HasOutParams, HasDefaults, BlueprintCallable)
// Parameters:
// class UAnimSequence*                    AnimMontage                                            (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FQuat                            OutStartPos                                            (Parm, OutParm, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
// struct FQuat                            OutEndPos                                              (Parm, OutParm, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
// float                                   LeftScaleTime                                          (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   RightScaleTime                                         (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UGSE_AnimFuncLib::AnimSequenceGetRootMotionRotationForScale(class UAnimSequence* AnimMontage, struct FQuat* OutStartPos, struct FQuat* OutEndPos, float LeftScaleTime, float RightScaleTime)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("GSE_AnimFuncLib", "AnimSequenceGetRootMotionRotationForScale");

	Params::GSE_AnimFuncLib_AnimSequenceGetRootMotionRotationForScale Parms{};

	Parms.AnimMontage = AnimMontage;
	Parms.LeftScaleTime = LeftScaleTime;
	Parms.RightScaleTime = RightScaleTime;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	if (OutStartPos != nullptr)
		*OutStartPos = std::move(Parms.OutStartPos);

	if (OutEndPos != nullptr)
		*OutEndPos = std::move(Parms.OutEndPos);

	return Parms.ReturnValue;
}


// Function UnrealExtent.GSE_AnimFuncLib.ApplyDamage
// (Final, Native, Static, Public, HasOutParams, HasDefaults, BlueprintCallable)
// Parameters:
// class UDestructibleComponent*           Destructible                                           (Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   DamageAmount                                           (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FVector                          HitLocation                                            (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FVector                          ImpulseDir                                             (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   ImpulseStrength                                        (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UGSE_AnimFuncLib::ApplyDamage(class UDestructibleComponent* Destructible, float DamageAmount, const struct FVector& HitLocation, const struct FVector& ImpulseDir, float ImpulseStrength)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("GSE_AnimFuncLib", "ApplyDamage");

	Params::GSE_AnimFuncLib_ApplyDamage Parms{};

	Parms.Destructible = Destructible;
	Parms.DamageAmount = DamageAmount;
	Parms.HitLocation = std::move(HitLocation);
	Parms.ImpulseDir = std::move(ImpulseDir);
	Parms.ImpulseStrength = ImpulseStrength;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function UnrealExtent.GSE_AnimFuncLib.ApplyRadiusDamage
// (Final, Native, Static, Public, HasOutParams, HasDefaults, BlueprintCallable)
// Parameters:
// class UDestructibleComponent*           Destructible                                           (Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   BaseDamage                                             (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FVector                          HurtOrigin                                             (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   DamageRadius                                           (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   ImpulseStrength                                        (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    bFullDamage                                            (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UGSE_AnimFuncLib::ApplyRadiusDamage(class UDestructibleComponent* Destructible, float BaseDamage, const struct FVector& HurtOrigin, float DamageRadius, float ImpulseStrength, bool bFullDamage)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("GSE_AnimFuncLib", "ApplyRadiusDamage");

	Params::GSE_AnimFuncLib_ApplyRadiusDamage Parms{};

	Parms.Destructible = Destructible;
	Parms.BaseDamage = BaseDamage;
	Parms.HurtOrigin = std::move(HurtOrigin);
	Parms.DamageRadius = DamageRadius;
	Parms.ImpulseStrength = ImpulseStrength;
	Parms.bFullDamage = bFullDamage;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function UnrealExtent.GSE_AnimFuncLib.CalcSlotMontageLocalWeight
// (Final, Native, Static, Public, HasOutParams, BlueprintCallable, BlueprintPure)
// Parameters:
// class UAnimInstance*                    AnimInst                                               (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class FName                             SlotNodeName                                           (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

float UGSE_AnimFuncLib::CalcSlotMontageLocalWeight(class UAnimInstance* AnimInst, const class FName& SlotNodeName)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("GSE_AnimFuncLib", "CalcSlotMontageLocalWeight");

	Params::GSE_AnimFuncLib_CalcSlotMontageLocalWeight Parms{};

	Parms.AnimInst = AnimInst;
	Parms.SlotNodeName = SlotNodeName;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function UnrealExtent.GSE_AnimFuncLib.ChangeAnimSeqParamAndSave
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// class UAnimSequence*                    AnimMontage                                            (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    bRootMotion                                            (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    bForceRootLock                                         (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UGSE_AnimFuncLib::ChangeAnimSeqParamAndSave(class UAnimSequence* AnimMontage, bool bRootMotion, bool bForceRootLock)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("GSE_AnimFuncLib", "ChangeAnimSeqParamAndSave");

	Params::GSE_AnimFuncLib_ChangeAnimSeqParamAndSave Parms{};

	Parms.AnimMontage = AnimMontage;
	Parms.bRootMotion = bRootMotion;
	Parms.bForceRootLock = bForceRootLock;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function UnrealExtent.GSE_AnimFuncLib.ConditionallyDispatchQueuedAnimEvents
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// class USkeletalMeshComponent*           SkeletalMeshComp                                       (Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UGSE_AnimFuncLib::ConditionallyDispatchQueuedAnimEvents(class USkeletalMeshComponent* SkeletalMeshComp)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("GSE_AnimFuncLib", "ConditionallyDispatchQueuedAnimEvents");

	Params::GSE_AnimFuncLib_ConditionallyDispatchQueuedAnimEvents Parms{};

	Parms.SkeletalMeshComp = SkeletalMeshComp;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function UnrealExtent.GSE_AnimFuncLib.CreateAimOffsetBlendSpace
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// class FString                           Path                                                   (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class FString                           Name_0                                                 (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class USkeleton*                        TargetSkeleton                                         (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class UAimOffsetBlendSpace*             ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class UAimOffsetBlendSpace* UGSE_AnimFuncLib::CreateAimOffsetBlendSpace(const class FString& Path, const class FString& Name_0, class USkeleton* TargetSkeleton)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("GSE_AnimFuncLib", "CreateAimOffsetBlendSpace");

	Params::GSE_AnimFuncLib_CreateAimOffsetBlendSpace Parms{};

	Parms.Path = std::move(Path);
	Parms.Name_0 = std::move(Name_0);
	Parms.TargetSkeleton = TargetSkeleton;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function UnrealExtent.GSE_AnimFuncLib.CreateAnimMontage
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// class FString                           Path                                                   (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class FString                           Name_0                                                 (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class USkeleton*                        TargetSkeleton                                         (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class UAnimMontage*                     ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class UAnimMontage* UGSE_AnimFuncLib::CreateAnimMontage(const class FString& Path, const class FString& Name_0, class USkeleton* TargetSkeleton)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("GSE_AnimFuncLib", "CreateAnimMontage");

	Params::GSE_AnimFuncLib_CreateAnimMontage Parms{};

	Parms.Path = std::move(Path);
	Parms.Name_0 = std::move(Name_0);
	Parms.TargetSkeleton = TargetSkeleton;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function UnrealExtent.GSE_AnimFuncLib.CreateBlendSpace
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// class FString                           Path                                                   (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class FString                           Name_0                                                 (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class USkeleton*                        TargetSkeleton                                         (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class UBlendSpace*                      ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class UBlendSpace* UGSE_AnimFuncLib::CreateBlendSpace(const class FString& Path, const class FString& Name_0, class USkeleton* TargetSkeleton)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("GSE_AnimFuncLib", "CreateBlendSpace");

	Params::GSE_AnimFuncLib_CreateBlendSpace Parms{};

	Parms.Path = std::move(Path);
	Parms.Name_0 = std::move(Name_0);
	Parms.TargetSkeleton = TargetSkeleton;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function UnrealExtent.GSE_AnimFuncLib.CreateBlendSpace1D
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// class FString                           Path                                                   (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class FString                           Name_0                                                 (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class USkeleton*                        TargetSkeleton                                         (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class UBlendSpace1D*                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class UBlendSpace1D* UGSE_AnimFuncLib::CreateBlendSpace1D(const class FString& Path, const class FString& Name_0, class USkeleton* TargetSkeleton)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("GSE_AnimFuncLib", "CreateBlendSpace1D");

	Params::GSE_AnimFuncLib_CreateBlendSpace1D Parms{};

	Parms.Path = std::move(Path);
	Parms.Name_0 = std::move(Name_0);
	Parms.TargetSkeleton = TargetSkeleton;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function UnrealExtent.GSE_AnimFuncLib.DisableMontageRootMotionByInstanceID
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// class ACharacter*                       Character                                              (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32                                   MontageInstanceID                                      (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UGSE_AnimFuncLib::DisableMontageRootMotionByInstanceID(class ACharacter* Character, int32 MontageInstanceID)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("GSE_AnimFuncLib", "DisableMontageRootMotionByInstanceID");

	Params::GSE_AnimFuncLib_DisableMontageRootMotionByInstanceID Parms{};

	Parms.Character = Character;
	Parms.MontageInstanceID = MontageInstanceID;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function UnrealExtent.GSE_AnimFuncLib.ExtractRootMotionFromAnimation
// (Final, Native, Static, Public, HasDefaults, BlueprintCallable)
// Parameters:
// class UAnimSequenceBase*                Animation                                              (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   StartTime                                              (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   EndTime                                                (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FTransform                       ReturnValue                                            (Parm, OutParm, ReturnParm, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)

struct FTransform UGSE_AnimFuncLib::ExtractRootMotionFromAnimation(const class UAnimSequenceBase* Animation, float StartTime, float EndTime)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("GSE_AnimFuncLib", "ExtractRootMotionFromAnimation");

	Params::GSE_AnimFuncLib_ExtractRootMotionFromAnimation Parms{};

	Parms.Animation = Animation;
	Parms.StartTime = StartTime;
	Parms.EndTime = EndTime;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function UnrealExtent.GSE_AnimFuncLib.FindAsset
// (Final, Native, Static, Public, HasOutParams, BlueprintCallable, BlueprintPure)
// Parameters:
// class FString                           Path                                                   (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class UClass*                           InClass                                                (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// TArray<struct FAssetData>               AssetData                                              (Parm, OutParm, ZeroConstructor, NativeAccessSpecifierPublic)

void UGSE_AnimFuncLib::FindAsset(const class FString& Path, class UClass* InClass, TArray<struct FAssetData>* AssetData)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("GSE_AnimFuncLib", "FindAsset");

	Params::GSE_AnimFuncLib_FindAsset Parms{};

	Parms.Path = std::move(Path);
	Parms.InClass = InClass;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	if (AssetData != nullptr)
		*AssetData = std::move(Parms.AssetData);
}


// Function UnrealExtent.GSE_AnimFuncLib.FindDestructibleMeshFromPathByBoneName
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// class FString                           FolderPath                                             (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class FString                           BoneName                                               (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class UObject*                          ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class UObject* UGSE_AnimFuncLib::FindDestructibleMeshFromPathByBoneName(const class FString& FolderPath, const class FString& BoneName)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("GSE_AnimFuncLib", "FindDestructibleMeshFromPathByBoneName");

	Params::GSE_AnimFuncLib_FindDestructibleMeshFromPathByBoneName Parms{};

	Parms.FolderPath = std::move(FolderPath);
	Parms.BoneName = std::move(BoneName);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function UnrealExtent.GSE_AnimFuncLib.GenerateAimOffsetBlendSpace
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// class UAimOffsetBlendSpace*             AimOffset                                              (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class FString                           Path                                                   (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class FString                           ExampleName                                            (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UGSE_AnimFuncLib::GenerateAimOffsetBlendSpace(class UAimOffsetBlendSpace* AimOffset, const class FString& Path, const class FString& ExampleName)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("GSE_AnimFuncLib", "GenerateAimOffsetBlendSpace");

	Params::GSE_AnimFuncLib_GenerateAimOffsetBlendSpace Parms{};

	Parms.AimOffset = AimOffset;
	Parms.Path = std::move(Path);
	Parms.ExampleName = std::move(ExampleName);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function UnrealExtent.GSE_AnimFuncLib.GenerateDefaultAxisParameters
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// class UBlendSpace*                      BlendSpace                                             (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UGSE_AnimFuncLib::GenerateDefaultAxisParameters(class UBlendSpace* BlendSpace)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("GSE_AnimFuncLib", "GenerateDefaultAxisParameters");

	Params::GSE_AnimFuncLib_GenerateDefaultAxisParameters Parms{};

	Parms.BlendSpace = BlendSpace;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function UnrealExtent.GSE_AnimFuncLib.GenerateDestructibleComponentFromPath
// (Final, Native, Static, Public, HasOutParams, BlueprintCallable)
// Parameters:
// class FString                           FolderPath                                             (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class USkeletalMeshComponent*           TargetSkeletalMeshComp                                 (Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// TArray<class UDestructibleComponent*>   DestructibleMeshArray                                  (Parm, OutParm, ZeroConstructor, ContainsInstancedReference, NativeAccessSpecifierPublic)
// TArray<class FName>                     BoneNameArray                                          (Parm, OutParm, ZeroConstructor, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UGSE_AnimFuncLib::GenerateDestructibleComponentFromPath(const class FString& FolderPath, class USkeletalMeshComponent* TargetSkeletalMeshComp, TArray<class UDestructibleComponent*>* DestructibleMeshArray, TArray<class FName>* BoneNameArray)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("GSE_AnimFuncLib", "GenerateDestructibleComponentFromPath");

	Params::GSE_AnimFuncLib_GenerateDestructibleComponentFromPath Parms{};

	Parms.FolderPath = std::move(FolderPath);
	Parms.TargetSkeletalMeshComp = TargetSkeletalMeshComp;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	if (DestructibleMeshArray != nullptr)
		*DestructibleMeshArray = std::move(Parms.DestructibleMeshArray);

	if (BoneNameArray != nullptr)
		*BoneNameArray = std::move(Parms.BoneNameArray);

	return Parms.ReturnValue;
}


// Function UnrealExtent.GSE_AnimFuncLib.GenerateDestructibleComponentFromPathWithEditor
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// class FString                           FolderPath                                             (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class UObject*                          TargetActor                                            (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UGSE_AnimFuncLib::GenerateDestructibleComponentFromPathWithEditor(const class FString& FolderPath, class UObject* TargetActor)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("GSE_AnimFuncLib", "GenerateDestructibleComponentFromPathWithEditor");

	Params::GSE_AnimFuncLib_GenerateDestructibleComponentFromPathWithEditor Parms{};

	Parms.FolderPath = std::move(FolderPath);
	Parms.TargetActor = TargetActor;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function UnrealExtent.GSE_AnimFuncLib.GetActiveMontageInstanceID
// (Final, Native, Static, Public, BlueprintCallable, BlueprintPure)
// Parameters:
// class UAnimInstance*                    AnimInstance                                           (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

int32 UGSE_AnimFuncLib::GetActiveMontageInstanceID(const class UAnimInstance* AnimInstance)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("GSE_AnimFuncLib", "GetActiveMontageInstanceID");

	Params::GSE_AnimFuncLib_GetActiveMontageInstanceID Parms{};

	Parms.AnimInstance = AnimInstance;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function UnrealExtent.GSE_AnimFuncLib.GetAllAnimationsOfSkeleton
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// class USkeletalMesh*                    SkeletonMesh                                           (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class FString                           AnimationBasePath                                      (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// TArray<class UAnimationAsset*>          ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, NativeAccessSpecifierPublic)

TArray<class UAnimationAsset*> UGSE_AnimFuncLib::GetAllAnimationsOfSkeleton(class USkeletalMesh* SkeletonMesh, const class FString& AnimationBasePath)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("GSE_AnimFuncLib", "GetAllAnimationsOfSkeleton");

	Params::GSE_AnimFuncLib_GetAllAnimationsOfSkeleton Parms{};

	Parms.SkeletonMesh = SkeletonMesh;
	Parms.AnimationBasePath = std::move(AnimationBasePath);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function UnrealExtent.GSE_AnimFuncLib.GetAllAnimSyncMarkers
// (Final, Native, Static, Public, HasOutParams, BlueprintCallable, BlueprintPure)
// Parameters:
// class UAnimSequence*                    AnimSequence                                           (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// TArray<struct FAnimSyncMarker>          OutSyncMarkers                                         (Parm, OutParm, ZeroConstructor, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UGSE_AnimFuncLib::GetAllAnimSyncMarkers(const class UAnimSequence* AnimSequence, TArray<struct FAnimSyncMarker>* OutSyncMarkers)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("GSE_AnimFuncLib", "GetAllAnimSyncMarkers");

	Params::GSE_AnimFuncLib_GetAllAnimSyncMarkers Parms{};

	Parms.AnimSequence = AnimSequence;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	if (OutSyncMarkers != nullptr)
		*OutSyncMarkers = std::move(Parms.OutSyncMarkers);

	return Parms.ReturnValue;
}


// Function UnrealExtent.GSE_AnimFuncLib.GetAllNotifyEvent
// (Final, Native, Static, Public, HasOutParams, BlueprintCallable)
// Parameters:
// class UAnimMontage*                     TargetMontage                                          (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// TArray<struct FAnimNotifyEvent>         AnimNotifyEventList                                    (Parm, OutParm, ZeroConstructor, ContainsInstancedReference, NativeAccessSpecifierPublic)

void UGSE_AnimFuncLib::GetAllNotifyEvent(class UAnimMontage* TargetMontage, TArray<struct FAnimNotifyEvent>* AnimNotifyEventList)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("GSE_AnimFuncLib", "GetAllNotifyEvent");

	Params::GSE_AnimFuncLib_GetAllNotifyEvent Parms{};

	Parms.TargetMontage = TargetMontage;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	if (AnimNotifyEventList != nullptr)
		*AnimNotifyEventList = std::move(Parms.AnimNotifyEventList);
}


// Function UnrealExtent.GSE_AnimFuncLib.GetAllNotifyEventInAM
// (Final, Native, Static, Public, HasOutParams, BlueprintCallable)
// Parameters:
// class UAnimMontage*                     TargetMontage                                          (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// TArray<struct FGSNotifyEventTimeInfo>   TimeInfoList                                           (Parm, OutParm, ZeroConstructor, NativeAccessSpecifierPublic)
// TArray<struct FAnimNotifyEvent>         ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, ContainsInstancedReference, NativeAccessSpecifierPublic)

TArray<struct FAnimNotifyEvent> UGSE_AnimFuncLib::GetAllNotifyEventInAM(class UAnimMontage* TargetMontage, TArray<struct FGSNotifyEventTimeInfo>* TimeInfoList)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("GSE_AnimFuncLib", "GetAllNotifyEventInAM");

	Params::GSE_AnimFuncLib_GetAllNotifyEventInAM Parms{};

	Parms.TargetMontage = TargetMontage;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	if (TimeInfoList != nullptr)
		*TimeInfoList = std::move(Parms.TimeInfoList);

	return Parms.ReturnValue;
}


// Function UnrealExtent.GSE_AnimFuncLib.GetAnimAllNotifyEventIncludeAS
// (Final, Native, Static, Public, HasOutParams, BlueprintCallable)
// Parameters:
// TArray<class UAnimSequenceBase*>        AnimBases                                              (Parm, ZeroConstructor, NativeAccessSpecifierPublic)
// TArray<struct FAnimNotifyEvent>         AnimNotifyEventList                                    (Parm, OutParm, ZeroConstructor, ContainsInstancedReference, NativeAccessSpecifierPublic)

void UGSE_AnimFuncLib::GetAnimAllNotifyEventIncludeAS(const TArray<class UAnimSequenceBase*>& AnimBases, TArray<struct FAnimNotifyEvent>* AnimNotifyEventList)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("GSE_AnimFuncLib", "GetAnimAllNotifyEventIncludeAS");

	Params::GSE_AnimFuncLib_GetAnimAllNotifyEventIncludeAS Parms{};

	Parms.AnimBases = std::move(AnimBases);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	if (AnimNotifyEventList != nullptr)
		*AnimNotifyEventList = std::move(Parms.AnimNotifyEventList);
}


// Function UnrealExtent.GSE_AnimFuncLib.GetAnimCurrentTime
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// class UAnimInstance*                    AnimInst                                               (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32                                   FromInstanceID                                         (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

float UGSE_AnimFuncLib::GetAnimCurrentTime(class UAnimInstance* AnimInst, int32 FromInstanceID)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("GSE_AnimFuncLib", "GetAnimCurrentTime");

	Params::GSE_AnimFuncLib_GetAnimCurrentTime Parms{};

	Parms.AnimInst = AnimInst;
	Parms.FromInstanceID = FromInstanceID;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function UnrealExtent.GSE_AnimFuncLib.GetBoneTransform
// (Final, Native, Static, Public, HasDefaults, BlueprintCallable)
// Parameters:
// class USkeletalMeshComponent*           Mesh                                                   (Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32                                   BoneIndex                                              (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FTransform                       ReturnValue                                            (Parm, OutParm, ReturnParm, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)

struct FTransform UGSE_AnimFuncLib::GetBoneTransform(class USkeletalMeshComponent* Mesh, int32 BoneIndex)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("GSE_AnimFuncLib", "GetBoneTransform");

	Params::GSE_AnimFuncLib_GetBoneTransform Parms{};

	Parms.Mesh = Mesh;
	Parms.BoneIndex = BoneIndex;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function UnrealExtent.GSE_AnimFuncLib.GetBoneTransformByTime
// (Final, Native, Static, Public, HasDefaults, BlueprintCallable)
// Parameters:
// class UAnimSequence*                    AnimationSequence                                      (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   Time                                                   (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32                                   TrackIndex                                             (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    UseRawData                                             (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FTransform                       ReturnValue                                            (Parm, OutParm, ReturnParm, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)

struct FTransform UGSE_AnimFuncLib::GetBoneTransformByTime(class UAnimSequence* AnimationSequence, float Time, int32 TrackIndex, bool UseRawData)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("GSE_AnimFuncLib", "GetBoneTransformByTime");

	Params::GSE_AnimFuncLib_GetBoneTransformByTime Parms{};

	Parms.AnimationSequence = AnimationSequence;
	Parms.Time = Time;
	Parms.TrackIndex = TrackIndex;
	Parms.UseRawData = UseRawData;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function UnrealExtent.GSE_AnimFuncLib.GetChildBones
// (Final, Native, Static, Public, HasOutParams, BlueprintCallable)
// Parameters:
// class USkeleton*                        InSkeleton                                             (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class FName                             ParentBoneName                                         (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// TArray<class FName>                     BoneNameFilter                                         (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
// TSet<class FName>                       ChildBones                                             (Parm, OutParm, NativeAccessSpecifierPublic)
// int32                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

int32 UGSE_AnimFuncLib::GetChildBones(class USkeleton* InSkeleton, const class FName& ParentBoneName, const TArray<class FName>& BoneNameFilter, TSet<class FName>* ChildBones)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("GSE_AnimFuncLib", "GetChildBones");

	Params::GSE_AnimFuncLib_GetChildBones Parms{};

	Parms.InSkeleton = InSkeleton;
	Parms.ParentBoneName = ParentBoneName;
	Parms.BoneNameFilter = std::move(BoneNameFilter);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	if (ChildBones != nullptr)
		*ChildBones = std::move(Parms.ChildBones);

	return Parms.ReturnValue;
}


// Function UnrealExtent.GSE_AnimFuncLib.GetChildSockets
// (Final, Native, Static, Public, HasOutParams, BlueprintCallable)
// Parameters:
// class USkeletalMeshComponent*           SkeletalMeshComp                                       (Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class FName                             BaseBoneName                                           (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// TArray<class FName>                     ChildSocketNames                                       (Parm, OutParm, ZeroConstructor, NativeAccessSpecifierPublic)

void UGSE_AnimFuncLib::GetChildSockets(class USkeletalMeshComponent* SkeletalMeshComp, const class FName& BaseBoneName, TArray<class FName>* ChildSocketNames)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("GSE_AnimFuncLib", "GetChildSockets");

	Params::GSE_AnimFuncLib_GetChildSockets Parms{};

	Parms.SkeletalMeshComp = SkeletalMeshComp;
	Parms.BaseBoneName = BaseBoneName;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	if (ChildSocketNames != nullptr)
		*ChildSocketNames = std::move(Parms.ChildSocketNames);
}


// Function UnrealExtent.GSE_AnimFuncLib.GetCurrentActiveMontageInstanceID
// (Final, Native, Static, Public, BlueprintCallable, BlueprintPure)
// Parameters:
// class ACharacter*                       Character                                              (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

int32 UGSE_AnimFuncLib::GetCurrentActiveMontageInstanceID(class ACharacter* Character)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("GSE_AnimFuncLib", "GetCurrentActiveMontageInstanceID");

	Params::GSE_AnimFuncLib_GetCurrentActiveMontageInstanceID Parms{};

	Parms.Character = Character;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function UnrealExtent.GSE_AnimFuncLib.GetFolderPathFromFullPath
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// class FString                           FullPath                                               (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class FString                           ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class FString UGSE_AnimFuncLib::GetFolderPathFromFullPath(const class FString& FullPath)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("GSE_AnimFuncLib", "GetFolderPathFromFullPath");

	Params::GSE_AnimFuncLib_GetFolderPathFromFullPath Parms{};

	Parms.FullPath = std::move(FullPath);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function UnrealExtent.GSE_AnimFuncLib.GetMontageComboSkillID
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// class UAnimMontage*                     AnimInst                                               (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32                                   Index_0                                                (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

int32 UGSE_AnimFuncLib::GetMontageComboSkillID(class UAnimMontage* AnimInst, int32 Index_0)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("GSE_AnimFuncLib", "GetMontageComboSkillID");

	Params::GSE_AnimFuncLib_GetMontageComboSkillID Parms{};

	Parms.AnimInst = AnimInst;
	Parms.Index_0 = Index_0;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function UnrealExtent.GSE_AnimFuncLib.GetMontageEffectID
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// class UAnimMontage*                     AnimInst                                               (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32                                   Index_0                                                (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

int32 UGSE_AnimFuncLib::GetMontageEffectID(class UAnimMontage* AnimInst, int32 Index_0)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("GSE_AnimFuncLib", "GetMontageEffectID");

	Params::GSE_AnimFuncLib_GetMontageEffectID Parms{};

	Parms.AnimInst = AnimInst;
	Parms.Index_0 = Index_0;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function UnrealExtent.GSE_AnimFuncLib.GetMontageNextSection
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// class UAnimInstance*                    AnimInstance                                           (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class UAnimMontage*                     AnimMontage                                            (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class FName                             ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class FName UGSE_AnimFuncLib::GetMontageNextSection(class UAnimInstance* AnimInstance, class UAnimMontage* AnimMontage)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("GSE_AnimFuncLib", "GetMontageNextSection");

	Params::GSE_AnimFuncLib_GetMontageNextSection Parms{};

	Parms.AnimInstance = AnimInstance;
	Parms.AnimMontage = AnimMontage;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function UnrealExtent.GSE_AnimFuncLib.GetMontageNotifyName
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// class UAnimMontage*                     AnimInst                                               (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32                                   Index_0                                                (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class FString                           ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class FString UGSE_AnimFuncLib::GetMontageNotifyName(class UAnimMontage* AnimInst, int32 Index_0)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("GSE_AnimFuncLib", "GetMontageNotifyName");

	Params::GSE_AnimFuncLib_GetMontageNotifyName Parms{};

	Parms.AnimInst = AnimInst;
	Parms.Index_0 = Index_0;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function UnrealExtent.GSE_AnimFuncLib.GetMontageNotifyTriggerTime
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// class UAnimMontage*                     AnimInst                                               (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32                                   FromInstanceID                                         (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

float UGSE_AnimFuncLib::GetMontageNotifyTriggerTime(class UAnimMontage* AnimInst, int32 FromInstanceID)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("GSE_AnimFuncLib", "GetMontageNotifyTriggerTime");

	Params::GSE_AnimFuncLib_GetMontageNotifyTriggerTime Parms{};

	Parms.AnimInst = AnimInst;
	Parms.FromInstanceID = FromInstanceID;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function UnrealExtent.GSE_AnimFuncLib.GetMontageSectionName
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// class UAnimMontage*                     AnimMontage                                            (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32                                   Index_0                                                (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class FName                             ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class FName UGSE_AnimFuncLib::GetMontageSectionName(class UAnimMontage* AnimMontage, int32 Index_0)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("GSE_AnimFuncLib", "GetMontageSectionName");

	Params::GSE_AnimFuncLib_GetMontageSectionName Parms{};

	Parms.AnimMontage = AnimMontage;
	Parms.Index_0 = Index_0;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function UnrealExtent.GSE_AnimFuncLib.GetMontageSectionStartAndEndTime
// (Final, Native, Static, Public, HasOutParams, BlueprintCallable)
// Parameters:
// class UAnimMontage*                     AnimMontage                                            (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class FName                             SectionName                                            (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   OutStartTime                                           (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   OutEndTime                                             (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UGSE_AnimFuncLib::GetMontageSectionStartAndEndTime(class UAnimMontage* AnimMontage, const class FName& SectionName, float* OutStartTime, float* OutEndTime)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("GSE_AnimFuncLib", "GetMontageSectionStartAndEndTime");

	Params::GSE_AnimFuncLib_GetMontageSectionStartAndEndTime Parms{};

	Parms.AnimMontage = AnimMontage;
	Parms.SectionName = SectionName;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	if (OutStartTime != nullptr)
		*OutStartTime = Parms.OutStartTime;

	if (OutEndTime != nullptr)
		*OutEndTime = Parms.OutEndTime;
}


// Function UnrealExtent.GSE_AnimFuncLib.GetMontageSlotName
// (Final, Native, Static, Public, BlueprintCallable, BlueprintPure)
// Parameters:
// class UAnimMontage*                     Montage                                                (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32                                   SlotIndex                                              (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class FName                             ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class FName UGSE_AnimFuncLib::GetMontageSlotName(const class UAnimMontage* Montage, int32 SlotIndex)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("GSE_AnimFuncLib", "GetMontageSlotName");

	Params::GSE_AnimFuncLib_GetMontageSlotName Parms{};

	Parms.Montage = Montage;
	Parms.SlotIndex = SlotIndex;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function UnrealExtent.GSE_AnimFuncLib.GetNotifyComboEndTime
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// class UAnimMontage*                     AnimInst                                               (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32                                   Index_0                                                (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

float UGSE_AnimFuncLib::GetNotifyComboEndTime(class UAnimMontage* AnimInst, int32 Index_0)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("GSE_AnimFuncLib", "GetNotifyComboEndTime");

	Params::GSE_AnimFuncLib_GetNotifyComboEndTime Parms{};

	Parms.AnimInst = AnimInst;
	Parms.Index_0 = Index_0;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function UnrealExtent.GSE_AnimFuncLib.GetNotifyEndTriggerTime
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// struct FAnimNotifyEvent                 AnimNotifyEvent                                        (Parm, ContainsInstancedReference, NativeAccessSpecifierPublic)
// float                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

float UGSE_AnimFuncLib::GetNotifyEndTriggerTime(const struct FAnimNotifyEvent& AnimNotifyEvent)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("GSE_AnimFuncLib", "GetNotifyEndTriggerTime");

	Params::GSE_AnimFuncLib_GetNotifyEndTriggerTime Parms{};

	Parms.AnimNotifyEvent = std::move(AnimNotifyEvent);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function UnrealExtent.GSE_AnimFuncLib.GetNotifyTriggerTime
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// struct FAnimNotifyEvent                 AnimNotifyEvent                                        (Parm, ContainsInstancedReference, NativeAccessSpecifierPublic)
// float                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

float UGSE_AnimFuncLib::GetNotifyTriggerTime(const struct FAnimNotifyEvent& AnimNotifyEvent)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("GSE_AnimFuncLib", "GetNotifyTriggerTime");

	Params::GSE_AnimFuncLib_GetNotifyTriggerTime Parms{};

	Parms.AnimNotifyEvent = std::move(AnimNotifyEvent);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function UnrealExtent.GSE_AnimFuncLib.GetOneAnimAllNotifyEventIncludeAS
// (Final, Native, Static, Public, HasOutParams, BlueprintCallable)
// Parameters:
// class UAnimSequenceBase*                TargetAnim                                             (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// TArray<struct FAnimNotifyEvent>         AnimNotifyEventList                                    (Parm, OutParm, ZeroConstructor, ContainsInstancedReference, NativeAccessSpecifierPublic)

void UGSE_AnimFuncLib::GetOneAnimAllNotifyEventIncludeAS(class UAnimSequenceBase* TargetAnim, TArray<struct FAnimNotifyEvent>* AnimNotifyEventList)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("GSE_AnimFuncLib", "GetOneAnimAllNotifyEventIncludeAS");

	Params::GSE_AnimFuncLib_GetOneAnimAllNotifyEventIncludeAS Parms{};

	Parms.TargetAnim = TargetAnim;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	if (AnimNotifyEventList != nullptr)
		*AnimNotifyEventList = std::move(Parms.AnimNotifyEventList);
}


// Function UnrealExtent.GSE_AnimFuncLib.GetSkeleton
// (Final, Native, Static, Public, BlueprintCallable, BlueprintPure)
// Parameters:
// class UAnimSequenceBase*                AnimSequenceBase                                       (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class USkeleton*                        ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class USkeleton* UGSE_AnimFuncLib::GetSkeleton(class UAnimSequenceBase* AnimSequenceBase)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("GSE_AnimFuncLib", "GetSkeleton");

	Params::GSE_AnimFuncLib_GetSkeleton Parms{};

	Parms.AnimSequenceBase = AnimSequenceBase;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function UnrealExtent.GSE_AnimFuncLib.InitAnimGraphNode
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// class UAnimInstance*                    AnimInst                                               (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class FName                             Tag                                                    (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UGSE_AnimFuncLib::InitAnimGraphNode(class UAnimInstance* AnimInst, const class FName Tag)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("GSE_AnimFuncLib", "InitAnimGraphNode");

	Params::GSE_AnimFuncLib_InitAnimGraphNode Parms{};

	Parms.AnimInst = AnimInst;
	Parms.Tag = Tag;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function UnrealExtent.GSE_AnimFuncLib.IsInRootMotionAM
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// class ACharacter*                       Character                                              (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UGSE_AnimFuncLib::IsInRootMotionAM(class ACharacter* Character)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("GSE_AnimFuncLib", "IsInRootMotionAM");

	Params::GSE_AnimFuncLib_IsInRootMotionAM Parms{};

	Parms.Character = Character;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function UnrealExtent.GSE_AnimFuncLib.IsSlotPlayingMontage
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// class UAnimInstance*                    AnimInst                                               (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class FName                             SlotNodeName                                           (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UGSE_AnimFuncLib::IsSlotPlayingMontage(class UAnimInstance* AnimInst, class FName SlotNodeName)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("GSE_AnimFuncLib", "IsSlotPlayingMontage");

	Params::GSE_AnimFuncLib_IsSlotPlayingMontage Parms{};

	Parms.AnimInst = AnimInst;
	Parms.SlotNodeName = SlotNodeName;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function UnrealExtent.GSE_AnimFuncLib.MarkDirty
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// class UObject*                          Obj                                                    (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UGSE_AnimFuncLib::MarkDirty(class UObject* Obj)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("GSE_AnimFuncLib", "MarkDirty");

	Params::GSE_AnimFuncLib_MarkDirty Parms{};

	Parms.Obj = Obj;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function UnrealExtent.GSE_AnimFuncLib.Montage_GetBoneRelativeTransformCS
// (Final, Native, Static, Public, HasDefaults, BlueprintCallable)
// Parameters:
// class UAnimMontage*                     InMontage                                              (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   InTime                                                 (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class FName                             InBoneName                                             (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class FName                             InSlotName                                             (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    bExtractRootMotion                                     (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FTransform                       ReturnValue                                            (Parm, OutParm, ReturnParm, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)

struct FTransform UGSE_AnimFuncLib::Montage_GetBoneRelativeTransformCS(const class UAnimMontage* InMontage, const float InTime, const class FName InBoneName, const class FName InSlotName, bool bExtractRootMotion)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("GSE_AnimFuncLib", "Montage_GetBoneRelativeTransformCS");

	Params::GSE_AnimFuncLib_Montage_GetBoneRelativeTransformCS Parms{};

	Parms.InMontage = InMontage;
	Parms.InTime = InTime;
	Parms.InBoneName = InBoneName;
	Parms.InSlotName = InSlotName;
	Parms.bExtractRootMotion = bExtractRootMotion;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function UnrealExtent.GSE_AnimFuncLib.Montage_GetBoneTransformCS
// (Final, Native, Static, Public, HasDefaults, BlueprintCallable)
// Parameters:
// class UAnimMontage*                     InMontage                                              (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   InTime                                                 (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class FName                             InBoneName                                             (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class FName                             InSlotName                                             (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    bExtractRootMotion                                     (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FTransform                       ReturnValue                                            (Parm, OutParm, ReturnParm, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)

struct FTransform UGSE_AnimFuncLib::Montage_GetBoneTransformCS(const class UAnimMontage* InMontage, const float InTime, const class FName InBoneName, const class FName InSlotName, bool bExtractRootMotion)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("GSE_AnimFuncLib", "Montage_GetBoneTransformCS");

	Params::GSE_AnimFuncLib_Montage_GetBoneTransformCS Parms{};

	Parms.InMontage = InMontage;
	Parms.InTime = InTime;
	Parms.InBoneName = InBoneName;
	Parms.InSlotName = InSlotName;
	Parms.bExtractRootMotion = bExtractRootMotion;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function UnrealExtent.GSE_AnimFuncLib.ReinitAnim
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// class AActor*                           Owner                                                  (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UGSE_AnimFuncLib::ReinitAnim(class AActor* Owner)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("GSE_AnimFuncLib", "ReinitAnim");

	Params::GSE_AnimFuncLib_ReinitAnim Parms{};

	Parms.Owner = Owner;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function UnrealExtent.GSE_AnimFuncLib.RemoveAllPoints
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// class UBlendSpace*                      BlendSpace                                             (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UGSE_AnimFuncLib::RemoveAllPoints(class UBlendSpace* BlendSpace)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("GSE_AnimFuncLib", "RemoveAllPoints");

	Params::GSE_AnimFuncLib_RemoveAllPoints Parms{};

	Parms.BlendSpace = BlendSpace;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function UnrealExtent.GSE_AnimFuncLib.RemoveNotifyEventByIndex
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// class UAnimMontage*                     TargetMontage                                          (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32                                   Index_0                                                (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UGSE_AnimFuncLib::RemoveNotifyEventByIndex(class UAnimMontage* TargetMontage, int32 Index_0)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("GSE_AnimFuncLib", "RemoveNotifyEventByIndex");

	Params::GSE_AnimFuncLib_RemoveNotifyEventByIndex Parms{};

	Parms.TargetMontage = TargetMontage;
	Parms.Index_0 = Index_0;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function UnrealExtent.GSE_AnimFuncLib.RemoveNotifyTrackByName
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// class UAnimMontage*                     TargetMontage                                          (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class FName                             Name_0                                                 (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UGSE_AnimFuncLib::RemoveNotifyTrackByName(class UAnimMontage* TargetMontage, class FName Name_0)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("GSE_AnimFuncLib", "RemoveNotifyTrackByName");

	Params::GSE_AnimFuncLib_RemoveNotifyTrackByName Parms{};

	Parms.TargetMontage = TargetMontage;
	Parms.Name_0 = Name_0;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function UnrealExtent.GSE_AnimFuncLib.RemovePreviewAssetFromSkeleton
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// class USkeleton*                        InUSkeleton                                            (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class FString                           BoneName                                               (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UGSE_AnimFuncLib::RemovePreviewAssetFromSkeleton(class USkeleton* InUSkeleton, const class FString& BoneName)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("GSE_AnimFuncLib", "RemovePreviewAssetFromSkeleton");

	Params::GSE_AnimFuncLib_RemovePreviewAssetFromSkeleton Parms{};

	Parms.InUSkeleton = InUSkeleton;
	Parms.BoneName = std::move(BoneName);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function UnrealExtent.GSE_AnimFuncLib.Sequence_GetBoneTransformCS
// (Final, Native, Static, Public, HasDefaults, BlueprintCallable)
// Parameters:
// class UAnimSequence*                    AnimSeq                                                (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   InTime                                                 (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class FName                             BoneName                                               (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    bExtractRootMotion                                     (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FTransform                       ReturnValue                                            (Parm, OutParm, ReturnParm, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)

struct FTransform UGSE_AnimFuncLib::Sequence_GetBoneTransformCS(const class UAnimSequence* AnimSeq, const float InTime, const class FName BoneName, bool bExtractRootMotion)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("GSE_AnimFuncLib", "Sequence_GetBoneTransformCS");

	Params::GSE_AnimFuncLib_Sequence_GetBoneTransformCS Parms{};

	Parms.AnimSeq = AnimSeq;
	Parms.InTime = InTime;
	Parms.BoneName = BoneName;
	Parms.bExtractRootMotion = bExtractRootMotion;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function UnrealExtent.GSE_AnimFuncLib.Sequence_GetRelativeBoneTransformCS
// (Final, Native, Static, Public, HasDefaults, BlueprintCallable)
// Parameters:
// class UAnimSequence*                    AnimSeq                                                (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   InTime                                                 (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class FName                             BoneName                                               (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    bExtractRootMotion                                     (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FTransform                       ReturnValue                                            (Parm, OutParm, ReturnParm, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)

struct FTransform UGSE_AnimFuncLib::Sequence_GetRelativeBoneTransformCS(const class UAnimSequence* AnimSeq, const float InTime, const class FName BoneName, bool bExtractRootMotion)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("GSE_AnimFuncLib", "Sequence_GetRelativeBoneTransformCS");

	Params::GSE_AnimFuncLib_Sequence_GetRelativeBoneTransformCS Parms{};

	Parms.AnimSeq = AnimSeq;
	Parms.InTime = InTime;
	Parms.BoneName = BoneName;
	Parms.bExtractRootMotion = bExtractRootMotion;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function UnrealExtent.GSE_AnimFuncLib.SetAnimcurveType
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// class USkeleton*                        Skeleton                                               (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class FString                           CurveName                                              (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    Value                                                  (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UGSE_AnimFuncLib::SetAnimcurveType(class USkeleton* Skeleton, const class FString& CurveName, bool Value)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("GSE_AnimFuncLib", "SetAnimcurveType");

	Params::GSE_AnimFuncLib_SetAnimcurveType Parms{};

	Parms.Skeleton = Skeleton;
	Parms.CurveName = std::move(CurveName);
	Parms.Value = Value;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function UnrealExtent.GSE_AnimFuncLib.SetBlendSpaceInput
// (Final, Native, Static, Public, HasDefaults, BlueprintCallable)
// Parameters:
// class USkeletalMeshComponent*           Obj                                                    (Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FVector                          BlendParams                                            (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UGSE_AnimFuncLib::SetBlendSpaceInput(class USkeletalMeshComponent* Obj, const struct FVector& BlendParams)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("GSE_AnimFuncLib", "SetBlendSpaceInput");

	Params::GSE_AnimFuncLib_SetBlendSpaceInput Parms{};

	Parms.Obj = Obj;
	Parms.BlendParams = std::move(BlendParams);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function UnrealExtent.GSE_AnimFuncLib.SetMaterial
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// class UMaterialInterface*               Material                                               (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class UDestructibleMesh*                TargetMesh                                             (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32                                   Index_0                                                (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UGSE_AnimFuncLib::SetMaterial(class UMaterialInterface* Material, class UDestructibleMesh* TargetMesh, int32 Index_0)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("GSE_AnimFuncLib", "SetMaterial");

	Params::GSE_AnimFuncLib_SetMaterial Parms{};

	Parms.Material = Material;
	Parms.TargetMesh = TargetMesh;
	Parms.Index_0 = Index_0;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function UnrealExtent.GSE_AnimFuncLib.SetRootMotionFromEverythingSwitch
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// class ACharacter*                       Character                                              (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    IsOpen                                                 (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UGSE_AnimFuncLib::SetRootMotionFromEverythingSwitch(class ACharacter* Character, bool IsOpen)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("GSE_AnimFuncLib", "SetRootMotionFromEverythingSwitch");

	Params::GSE_AnimFuncLib_SetRootMotionFromEverythingSwitch Parms{};

	Parms.Character = Character;
	Parms.IsOpen = IsOpen;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function UnrealExtent.GSE_AnimFuncLib.StopAllMontages
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// class AActor*                           Owner                                                  (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   BlendOutTime                                           (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UGSE_AnimFuncLib::StopAllMontages(class AActor* Owner, float BlendOutTime)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("GSE_AnimFuncLib", "StopAllMontages");

	Params::GSE_AnimFuncLib_StopAllMontages Parms{};

	Parms.Owner = Owner;
	Parms.BlendOutTime = BlendOutTime;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function UnrealExtent.GSE_AnimFuncLib.TickAnimation
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// class AActor*                           Owner                                                  (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UGSE_AnimFuncLib::TickAnimation(class AActor* Owner)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("GSE_AnimFuncLib", "TickAnimation");

	Params::GSE_AnimFuncLib_TickAnimation Parms{};

	Parms.Owner = Owner;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function UnrealExtent.GSE_AnimFuncLib.TickAnimationAndRefreshBone
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// class AActor*                           Owner                                                  (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UGSE_AnimFuncLib::TickAnimationAndRefreshBone(class AActor* Owner)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("GSE_AnimFuncLib", "TickAnimationAndRefreshBone");

	Params::GSE_AnimFuncLib_TickAnimationAndRefreshBone Parms{};

	Parms.Owner = Owner;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function UnrealExtent.GSE_AnimFuncLib.TickAnimationAndRefreshBone_SkeletalMesh
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// class USkeletalMeshComponent*           SkeletalMeshComp                                       (Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UGSE_AnimFuncLib::TickAnimationAndRefreshBone_SkeletalMesh(class USkeletalMeshComponent* SkeletalMeshComp)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("GSE_AnimFuncLib", "TickAnimationAndRefreshBone_SkeletalMesh");

	Params::GSE_AnimFuncLib_TickAnimationAndRefreshBone_SkeletalMesh Parms{};

	Parms.SkeletalMeshComp = SkeletalMeshComp;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function UnrealExtent.GSE_BehaviorTreeFuncLib.BTDecoratorOverrideChildIdx
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// class UBTDecorator_BlueprintBase*       BTDecorator                                            (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32                                   NewIndex                                               (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UGSE_BehaviorTreeFuncLib::BTDecoratorOverrideChildIdx(class UBTDecorator_BlueprintBase* BTDecorator, int32 NewIndex)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("GSE_BehaviorTreeFuncLib", "BTDecoratorOverrideChildIdx");

	Params::GSE_BehaviorTreeFuncLib_BTDecoratorOverrideChildIdx Parms{};

	Parms.BTDecorator = BTDecorator;
	Parms.NewIndex = NewIndex;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function UnrealExtent.GSE_BehaviorTreeFuncLib.GetBTTaskNodes
// (Final, Native, Static, Public, HasOutParams, BlueprintCallable)
// Parameters:
// class UBehaviorTree*                    BT                                                     (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FBehaviorTreeNodeData            NodeData                                               (Parm, OutParm, NativeAccessSpecifierPublic)

void UGSE_BehaviorTreeFuncLib::GetBTTaskNodes(class UBehaviorTree* BT, struct FBehaviorTreeNodeData* NodeData)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("GSE_BehaviorTreeFuncLib", "GetBTTaskNodes");

	Params::GSE_BehaviorTreeFuncLib_GetBTTaskNodes Parms{};

	Parms.BT = BT;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	if (NodeData != nullptr)
		*NodeData = std::move(Parms.NodeData);
}


// Function UnrealExtent.GSE_BehaviorTreeFuncLib.GetCurrentBTActiveNodeInfo
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// class UBehaviorTreeComponent*           BehaviorTreeComp                                       (Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// TArray<class FString>                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, NativeAccessSpecifierPublic)

TArray<class FString> UGSE_BehaviorTreeFuncLib::GetCurrentBTActiveNodeInfo(class UBehaviorTreeComponent* BehaviorTreeComp)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("GSE_BehaviorTreeFuncLib", "GetCurrentBTActiveNodeInfo");

	Params::GSE_BehaviorTreeFuncLib_GetCurrentBTActiveNodeInfo Parms{};

	Parms.BehaviorTreeComp = BehaviorTreeComp;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function UnrealExtent.GSE_BehaviorTreeFuncLib.GetCurrentTree
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// class AAIController*                    AIController                                           (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class UBehaviorTree*                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class UBehaviorTree* UGSE_BehaviorTreeFuncLib::GetCurrentTree(class AAIController* AIController)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("GSE_BehaviorTreeFuncLib", "GetCurrentTree");

	Params::GSE_BehaviorTreeFuncLib_GetCurrentTree Parms{};

	Parms.AIController = AIController;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function UnrealExtent.GSE_ActorFuncLib.AddComponentByClass
// (Final, Native, Static, Public, HasOutParams, HasDefaults, BlueprintCallable)
// Parameters:
// class AActor*                           Actor                                                  (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// TSubclassOf<class UActorComponent>      Class_0                                                (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    bManualAttachment                                      (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FTransform                       RelativeTransform                                      (ConstParm, Parm, OutParm, ReferenceParm, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
// bool                                    bDeferredFinish                                        (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class UActorComponent*                  ReturnValue                                            (ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class UActorComponent* UGSE_ActorFuncLib::AddComponentByClass(class AActor* Actor, TSubclassOf<class UActorComponent> Class_0, bool bManualAttachment, const struct FTransform& RelativeTransform, bool bDeferredFinish)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("GSE_ActorFuncLib", "AddComponentByClass");

	Params::GSE_ActorFuncLib_AddComponentByClass Parms{};

	Parms.Actor = Actor;
	Parms.Class_0 = Class_0;
	Parms.bManualAttachment = bManualAttachment;
	Parms.RelativeTransform = std::move(RelativeTransform);
	Parms.bDeferredFinish = bDeferredFinish;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function UnrealExtent.GSE_ActorFuncLib.AddInstanceComponent
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// class AActor*                           Actor                                                  (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class UActorComponent*                  Component                                              (Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UGSE_ActorFuncLib::AddInstanceComponent(class AActor* Actor, class UActorComponent* Component)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("GSE_ActorFuncLib", "AddInstanceComponent");

	Params::GSE_ActorFuncLib_AddInstanceComponent Parms{};

	Parms.Actor = Actor;
	Parms.Component = Component;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function UnrealExtent.GSE_ActorFuncLib.AddNamePrefix
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// class AActor*                           Actor                                                  (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class FString                           NamePrefix                                             (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UGSE_ActorFuncLib::AddNamePrefix(class AActor* Actor, const class FString& NamePrefix)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("GSE_ActorFuncLib", "AddNamePrefix");

	Params::GSE_ActorFuncLib_AddNamePrefix Parms{};

	Parms.Actor = Actor;
	Parms.NamePrefix = std::move(NamePrefix);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function UnrealExtent.GSE_ActorFuncLib.CacheCapturingStreamingMeshLodStats
// (Final, Native, Static, Public, BlueprintCallable)

void UGSE_ActorFuncLib::CacheCapturingStreamingMeshLodStats()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("GSE_ActorFuncLib", "CacheCapturingStreamingMeshLodStats");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function UnrealExtent.GSE_ActorFuncLib.CaptureStreamingMeshLodStats
// (Final, Native, Static, Public, BlueprintCallable)

void UGSE_ActorFuncLib::CaptureStreamingMeshLodStats()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("GSE_ActorFuncLib", "CaptureStreamingMeshLodStats");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function UnrealExtent.GSE_ActorFuncLib.CheckActorWasRecentlyRendered
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// class AActor*                           Actor                                                  (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UGSE_ActorFuncLib::CheckActorWasRecentlyRendered(class AActor* Actor)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("GSE_ActorFuncLib", "CheckActorWasRecentlyRendered");

	Params::GSE_ActorFuncLib_CheckActorWasRecentlyRendered Parms{};

	Parms.Actor = Actor;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function UnrealExtent.GSE_ActorFuncLib.DetectRegionCenter
// (Final, Native, Static, Public, HasOutParams, HasDefaults, BlueprintCallable)
// Parameters:
// class AActor*                           Actor                                                  (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// TArray<struct FVector>                  TraceDirectionList                                     (Parm, ZeroConstructor, NativeAccessSpecifierPublic)
// float                                   TraceDistance                                          (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// ETraceTypeQuery                         TraceChannel                                           (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// EDrawDebugTrace                         DrawDebugType                                          (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   DrawTime                                               (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   VaildRange                                             (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FVector                          AdjustedLocation                                       (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// double                                  AdjustedRadius                                         (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    IsSuccess                                              (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UGSE_ActorFuncLib::DetectRegionCenter(class AActor* Actor, const TArray<struct FVector>& TraceDirectionList, float TraceDistance, ETraceTypeQuery TraceChannel, EDrawDebugTrace DrawDebugType, float DrawTime, float VaildRange, struct FVector* AdjustedLocation, double* AdjustedRadius, bool* IsSuccess)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("GSE_ActorFuncLib", "DetectRegionCenter");

	Params::GSE_ActorFuncLib_DetectRegionCenter Parms{};

	Parms.Actor = Actor;
	Parms.TraceDirectionList = std::move(TraceDirectionList);
	Parms.TraceDistance = TraceDistance;
	Parms.TraceChannel = TraceChannel;
	Parms.DrawDebugType = DrawDebugType;
	Parms.DrawTime = DrawTime;
	Parms.VaildRange = VaildRange;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	if (AdjustedLocation != nullptr)
		*AdjustedLocation = std::move(Parms.AdjustedLocation);

	if (AdjustedRadius != nullptr)
		*AdjustedRadius = Parms.AdjustedRadius;

	if (IsSuccess != nullptr)
		*IsSuccess = Parms.IsSuccess;
}


// Function UnrealExtent.GSE_ActorFuncLib.EndCapturingStreamingMeshLodStats
// (Final, Native, Static, Public, BlueprintCallable)

void UGSE_ActorFuncLib::EndCapturingStreamingMeshLodStats()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("GSE_ActorFuncLib", "EndCapturingStreamingMeshLodStats");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function UnrealExtent.GSE_ActorFuncLib.ExcuteStreamingMeshMemoryStats
// (Final, Native, Static, Public, BlueprintCallable)

void UGSE_ActorFuncLib::ExcuteStreamingMeshMemoryStats()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("GSE_ActorFuncLib", "ExcuteStreamingMeshMemoryStats");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function UnrealExtent.GSE_ActorFuncLib.FinishAddComponent
// (Final, Native, Static, Public, HasOutParams, HasDefaults, BlueprintCallable)
// Parameters:
// class AActor*                           Actor                                                  (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class UActorComponent*                  NewActorComp                                           (Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    bManualAttachment                                      (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FTransform                       RelativeTransform                                      (ConstParm, Parm, OutParm, ReferenceParm, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)

void UGSE_ActorFuncLib::FinishAddComponent(class AActor* Actor, class UActorComponent* NewActorComp, bool bManualAttachment, const struct FTransform& RelativeTransform)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("GSE_ActorFuncLib", "FinishAddComponent");

	Params::GSE_ActorFuncLib_FinishAddComponent Parms{};

	Parms.Actor = Actor;
	Parms.NewActorComp = NewActorComp;
	Parms.bManualAttachment = bManualAttachment;
	Parms.RelativeTransform = std::move(RelativeTransform);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function UnrealExtent.GSE_ActorFuncLib.GetActorForwardVector
// (Final, Native, Static, Public, HasOutParams, HasDefaults, BlueprintCallable)
// Parameters:
// class AActor*                           Actor                                                  (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FVector                          OutDir                                                 (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UGSE_ActorFuncLib::GetActorForwardVector(class AActor* Actor, struct FVector* OutDir)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("GSE_ActorFuncLib", "GetActorForwardVector");

	Params::GSE_ActorFuncLib_GetActorForwardVector Parms{};

	Parms.Actor = Actor;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	if (OutDir != nullptr)
		*OutDir = std::move(Parms.OutDir);
}


// Function UnrealExtent.GSE_ActorFuncLib.GetActorHasAuthority
// (Final, Native, Static, Public, HasOutParams, BlueprintCallable)
// Parameters:
// class AActor*                           Actor                                                  (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    OutHasAuthority                                        (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UGSE_ActorFuncLib::GetActorHasAuthority(class AActor* Actor, bool* OutHasAuthority)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("GSE_ActorFuncLib", "GetActorHasAuthority");

	Params::GSE_ActorFuncLib_GetActorHasAuthority Parms{};

	Parms.Actor = Actor;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	if (OutHasAuthority != nullptr)
		*OutHasAuthority = Parms.OutHasAuthority;
}


// Function UnrealExtent.GSE_ActorFuncLib.GetActorLocationSimple
// (Final, Native, Static, Public, HasOutParams, HasDefaults, BlueprintCallable)
// Parameters:
// class AActor*                           Actor                                                  (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FVector                          OutPos                                                 (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UGSE_ActorFuncLib::GetActorLocationSimple(class AActor* Actor, struct FVector* OutPos)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("GSE_ActorFuncLib", "GetActorLocationSimple");

	Params::GSE_ActorFuncLib_GetActorLocationSimple Parms{};

	Parms.Actor = Actor;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	if (OutPos != nullptr)
		*OutPos = std::move(Parms.OutPos);
}


// Function UnrealExtent.GSE_ActorFuncLib.GetActorRotationSimple
// (Final, Native, Static, Public, HasOutParams, HasDefaults, BlueprintCallable)
// Parameters:
// class AActor*                           Actor                                                  (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FRotator                         OutRot                                                 (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)

void UGSE_ActorFuncLib::GetActorRotationSimple(class AActor* Actor, struct FRotator* OutRot)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("GSE_ActorFuncLib", "GetActorRotationSimple");

	Params::GSE_ActorFuncLib_GetActorRotationSimple Parms{};

	Parms.Actor = Actor;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	if (OutRot != nullptr)
		*OutRot = std::move(Parms.OutRot);
}


// Function UnrealExtent.GSE_ActorFuncLib.GetActorTransformSimple
// (Final, Native, Static, Public, HasOutParams, HasDefaults, BlueprintCallable)
// Parameters:
// class AActor*                           Actor                                                  (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FTransform                       OutTrans                                               (Parm, OutParm, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)

void UGSE_ActorFuncLib::GetActorTransformSimple(class AActor* Actor, struct FTransform* OutTrans)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("GSE_ActorFuncLib", "GetActorTransformSimple");

	Params::GSE_ActorFuncLib_GetActorTransformSimple Parms{};

	Parms.Actor = Actor;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	if (OutTrans != nullptr)
		*OutTrans = std::move(Parms.OutTrans);
}


// Function UnrealExtent.GSE_ActorFuncLib.GetAttachParentActor
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// class AActor*                           Actor                                                  (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class AActor*                           AttachParentActor                                      (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UGSE_ActorFuncLib::GetAttachParentActor(class AActor* Actor, class AActor* AttachParentActor)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("GSE_ActorFuncLib", "GetAttachParentActor");

	Params::GSE_ActorFuncLib_GetAttachParentActor Parms{};

	Parms.Actor = Actor;
	Parms.AttachParentActor = AttachParentActor;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function UnrealExtent.GSE_ActorFuncLib.GetVelocity
// (Final, Native, Static, Public, HasOutParams, HasDefaults, BlueprintCallable)
// Parameters:
// class AActor*                           Actor                                                  (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FVector                          OutVelocity                                            (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UGSE_ActorFuncLib::GetVelocity(class AActor* Actor, struct FVector* OutVelocity)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("GSE_ActorFuncLib", "GetVelocity");

	Params::GSE_ActorFuncLib_GetVelocity Parms{};

	Parms.Actor = Actor;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	if (OutVelocity != nullptr)
		*OutVelocity = std::move(Parms.OutVelocity);
}


// Function UnrealExtent.GSE_ActorFuncLib.GetWorldTransformFast
// (Final, Native, Static, Public, HasOutParams, HasDefaults, BlueprintCallable)
// Parameters:
// class USceneComponent*                  SceneComp                                              (Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FTransform                       OutWorldTransform                                      (Parm, OutParm, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)

void UGSE_ActorFuncLib::GetWorldTransformFast(class USceneComponent* SceneComp, struct FTransform* OutWorldTransform)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("GSE_ActorFuncLib", "GetWorldTransformFast");

	Params::GSE_ActorFuncLib_GetWorldTransformFast Parms{};

	Parms.SceneComp = SceneComp;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	if (OutWorldTransform != nullptr)
		*OutWorldTransform = std::move(Parms.OutWorldTransform);
}


// Function UnrealExtent.GSE_ActorFuncLib.IsAABoundBoxInVolume
// (Final, Native, Static, Public, HasOutParams, HasDefaults, BlueprintCallable)
// Parameters:
// class AVolume*                          VolumeActor                                            (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FVector                          BoundOrigin                                            (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FVector                          BoundExtent                                            (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    IsFullContain                                          (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UGSE_ActorFuncLib::IsAABoundBoxInVolume(class AVolume* VolumeActor, const struct FVector& BoundOrigin, const struct FVector& BoundExtent, bool* IsFullContain)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("GSE_ActorFuncLib", "IsAABoundBoxInVolume");

	Params::GSE_ActorFuncLib_IsAABoundBoxInVolume Parms{};

	Parms.VolumeActor = VolumeActor;
	Parms.BoundOrigin = std::move(BoundOrigin);
	Parms.BoundExtent = std::move(BoundExtent);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	if (IsFullContain != nullptr)
		*IsFullContain = Parms.IsFullContain;

	return Parms.ReturnValue;
}


// Function UnrealExtent.GSE_ActorFuncLib.IsActorBeginningPlayFromLevelStreaming
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// class AActor*                           Actor                                                  (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UGSE_ActorFuncLib::IsActorBeginningPlayFromLevelStreaming(class AActor* Actor)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("GSE_ActorFuncLib", "IsActorBeginningPlayFromLevelStreaming");

	Params::GSE_ActorFuncLib_IsActorBeginningPlayFromLevelStreaming Parms{};

	Parms.Actor = Actor;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function UnrealExtent.GSE_ActorFuncLib.IsPointInVolume
// (Final, Native, Static, Public, HasOutParams, HasDefaults, BlueprintCallable)
// Parameters:
// class AVolume*                          VolumeActor                                            (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FVector                          Point                                                  (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   Radius                                                 (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UGSE_ActorFuncLib::IsPointInVolume(class AVolume* VolumeActor, const struct FVector& Point, float Radius)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("GSE_ActorFuncLib", "IsPointInVolume");

	Params::GSE_ActorFuncLib_IsPointInVolume Parms{};

	Parms.VolumeActor = VolumeActor;
	Parms.Point = std::move(Point);
	Parms.Radius = Radius;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function UnrealExtent.GSE_ActorFuncLib.LoadCapturingStreamingMeshLodStats
// (Final, Native, Static, Public, BlueprintCallable)

void UGSE_ActorFuncLib::LoadCapturingStreamingMeshLodStats()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("GSE_ActorFuncLib", "LoadCapturingStreamingMeshLodStats");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function UnrealExtent.GSE_ActorFuncLib.LoadReflectionCubeLocation
// (Final, Native, Static, Public, HasOutParams, BlueprintCallable)
// Parameters:
// TArray<struct FVector>                  PathPointList                                          (Parm, OutParm, ZeroConstructor, NativeAccessSpecifierPublic)
// class FString                           FilePathUnderProjFolder                                (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UGSE_ActorFuncLib::LoadReflectionCubeLocation(TArray<struct FVector>* PathPointList, const class FString& FilePathUnderProjFolder)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("GSE_ActorFuncLib", "LoadReflectionCubeLocation");

	Params::GSE_ActorFuncLib_LoadReflectionCubeLocation Parms{};

	Parms.FilePathUnderProjFolder = std::move(FilePathUnderProjFolder);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	if (PathPointList != nullptr)
		*PathPointList = std::move(Parms.PathPointList);
}


// Function UnrealExtent.GSE_ActorFuncLib.RemoveComponent
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// class UActorComponent*                  Component                                              (Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UGSE_ActorFuncLib::RemoveComponent(class UActorComponent* Component)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("GSE_ActorFuncLib", "RemoveComponent");

	Params::GSE_ActorFuncLib_RemoveComponent Parms{};

	Parms.Component = Component;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function UnrealExtent.GSE_ActorFuncLib.SetActorComponentsTickEnable
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// class AActor*                           Actor                                                  (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    bEnable                                                (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UGSE_ActorFuncLib::SetActorComponentsTickEnable(class AActor* Actor, bool bEnable)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("GSE_ActorFuncLib", "SetActorComponentsTickEnable");

	Params::GSE_ActorFuncLib_SetActorComponentsTickEnable Parms{};

	Parms.Actor = Actor;
	Parms.bEnable = bEnable;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function UnrealExtent.GSE_ActorFuncLib.SetActorComponentsTickInterval
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// class AActor*                           Actor                                                  (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   NewInterval                                            (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UGSE_ActorFuncLib::SetActorComponentsTickInterval(class AActor* Actor, float NewInterval)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("GSE_ActorFuncLib", "SetActorComponentsTickInterval");

	Params::GSE_ActorFuncLib_SetActorComponentsTickInterval Parms{};

	Parms.Actor = Actor;
	Parms.NewInterval = NewInterval;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function UnrealExtent.GSE_ActorFuncLib.SetActorLocationAndRotationSimple
// (Final, Native, Static, Public, HasDefaults, BlueprintCallable)
// Parameters:
// class AActor*                           Actor                                                  (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FVector                          Pos                                                    (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FRotator                         Rot                                                    (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
// bool                                    bSweep                                                 (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32                                   ITeleportType                                          (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UGSE_ActorFuncLib::SetActorLocationAndRotationSimple(class AActor* Actor, const struct FVector& Pos, const struct FRotator& Rot, bool bSweep, int32 ITeleportType)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("GSE_ActorFuncLib", "SetActorLocationAndRotationSimple");

	Params::GSE_ActorFuncLib_SetActorLocationAndRotationSimple Parms{};

	Parms.Actor = Actor;
	Parms.Pos = std::move(Pos);
	Parms.Rot = std::move(Rot);
	Parms.bSweep = bSweep;
	Parms.ITeleportType = ITeleportType;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function UnrealExtent.GSE_ActorFuncLib.SetActorLocationSimple
// (Final, Native, Static, Public, HasDefaults, BlueprintCallable)
// Parameters:
// class AActor*                           Actor                                                  (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FVector                          Pos                                                    (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    bSweep                                                 (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32                                   ITeleportType                                          (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UGSE_ActorFuncLib::SetActorLocationSimple(class AActor* Actor, const struct FVector& Pos, bool bSweep, int32 ITeleportType)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("GSE_ActorFuncLib", "SetActorLocationSimple");

	Params::GSE_ActorFuncLib_SetActorLocationSimple Parms{};

	Parms.Actor = Actor;
	Parms.Pos = std::move(Pos);
	Parms.bSweep = bSweep;
	Parms.ITeleportType = ITeleportType;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function UnrealExtent.GSE_ActorFuncLib.SetActorRotationSimple
// (Final, Native, Static, Public, HasDefaults, BlueprintCallable)
// Parameters:
// class AActor*                           Actor                                                  (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FRotator                         Rot                                                    (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
// int32                                   ITeleportType                                          (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UGSE_ActorFuncLib::SetActorRotationSimple(class AActor* Actor, const struct FRotator& Rot, int32 ITeleportType)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("GSE_ActorFuncLib", "SetActorRotationSimple");

	Params::GSE_ActorFuncLib_SetActorRotationSimple Parms{};

	Parms.Actor = Actor;
	Parms.Rot = std::move(Rot);
	Parms.ITeleportType = ITeleportType;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function UnrealExtent.GSE_ActorFuncLib.SetActorTransformSimple
// (Final, Native, Static, Public, HasDefaults, BlueprintCallable)
// Parameters:
// class AActor*                           Actor                                                  (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FTransform                       Trans                                                  (Parm, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
// bool                                    bSweep                                                 (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32                                   ITeleportType                                          (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UGSE_ActorFuncLib::SetActorTransformSimple(class AActor* Actor, const struct FTransform& Trans, bool bSweep, int32 ITeleportType)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("GSE_ActorFuncLib", "SetActorTransformSimple");

	Params::GSE_ActorFuncLib_SetActorTransformSimple Parms{};

	Parms.Actor = Actor;
	Parms.Trans = std::move(Trans);
	Parms.bSweep = bSweep;
	Parms.ITeleportType = ITeleportType;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function UnrealExtent.GSE_ActorFuncLib.SetMaterialInterfaceQualityLevel
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// class AActor*                           Actor                                                  (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class UMaterialInterface*               Material                                               (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32                                   QualityLevel                                           (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UGSE_ActorFuncLib::SetMaterialInterfaceQualityLevel(class AActor* Actor, class UMaterialInterface* Material, int32 QualityLevel)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("GSE_ActorFuncLib", "SetMaterialInterfaceQualityLevel");

	Params::GSE_ActorFuncLib_SetMaterialInterfaceQualityLevel Parms{};

	Parms.Actor = Actor;
	Parms.Material = Material;
	Parms.QualityLevel = QualityLevel;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function UnrealExtent.GSE_ActorFuncLib.SpawnBlueprintActorByFactory
// (Final, Native, Static, Public, HasOutParams, HasDefaults, BlueprintCallable)
// Parameters:
// class UBlueprint*                       InAsset                                                (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class ULevel*                           InLevel                                                (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FTransform                       InTransform                                            (ConstParm, Parm, OutParm, ReferenceParm, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
// class AActor*                           ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class AActor* UGSE_ActorFuncLib::SpawnBlueprintActorByFactory(class UBlueprint* InAsset, class ULevel* InLevel, const struct FTransform& InTransform)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("GSE_ActorFuncLib", "SpawnBlueprintActorByFactory");

	Params::GSE_ActorFuncLib_SpawnBlueprintActorByFactory Parms{};

	Parms.InAsset = InAsset;
	Parms.InLevel = InLevel;
	Parms.InTransform = std::move(InTransform);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function UnrealExtent.GSE_ActorFuncLib.SpawnBlueprintActorByFactory_BP
// (Final, Native, Static, Public, HasOutParams, HasDefaults, BlueprintCallable)
// Parameters:
// class UBlueprint*                       InAsset                                                (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class UObject*                          Obj                                                    (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FTransform                       InTransform                                            (ConstParm, Parm, OutParm, ReferenceParm, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
// class AActor*                           ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class AActor* UGSE_ActorFuncLib::SpawnBlueprintActorByFactory_BP(class UBlueprint* InAsset, class UObject* Obj, const struct FTransform& InTransform)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("GSE_ActorFuncLib", "SpawnBlueprintActorByFactory_BP");

	Params::GSE_ActorFuncLib_SpawnBlueprintActorByFactory_BP Parms{};

	Parms.InAsset = InAsset;
	Parms.Obj = Obj;
	Parms.InTransform = std::move(InTransform);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function UnrealExtent.GSE_ActorFuncLib.SpawnSphereUniformPoints
// (Final, Native, Static, Public, HasOutParams, BlueprintCallable)
// Parameters:
// TArray<struct FVector>                  SphereUniformPoints                                    (Parm, OutParm, ZeroConstructor, NativeAccessSpecifierPublic)
// int32                                   NumOfPoints                                            (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   Radius                                                 (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UGSE_ActorFuncLib::SpawnSphereUniformPoints(TArray<struct FVector>* SphereUniformPoints, int32 NumOfPoints, float Radius)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("GSE_ActorFuncLib", "SpawnSphereUniformPoints");

	Params::GSE_ActorFuncLib_SpawnSphereUniformPoints Parms{};

	Parms.NumOfPoints = NumOfPoints;
	Parms.Radius = Radius;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	if (SphereUniformPoints != nullptr)
		*SphereUniformPoints = std::move(Parms.SphereUniformPoints);
}


// Function UnrealExtent.GSE_ActorFuncLib.StatLevelNaniteMemory
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// TArray<class ULevel*>                   LoadedLevels                                           (Parm, ZeroConstructor, NativeAccessSpecifierPublic)
// class FString                           WorldPositionFile                                      (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class FString                           MemoryFile                                             (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UGSE_ActorFuncLib::StatLevelNaniteMemory(const TArray<class ULevel*>& LoadedLevels, const class FString& WorldPositionFile, const class FString& MemoryFile)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("GSE_ActorFuncLib", "StatLevelNaniteMemory");

	Params::GSE_ActorFuncLib_StatLevelNaniteMemory Parms{};

	Parms.LoadedLevels = std::move(LoadedLevels);
	Parms.WorldPositionFile = std::move(WorldPositionFile);
	Parms.MemoryFile = std::move(MemoryFile);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function UnrealExtent.GSE_ActorFuncLib.UpdateActorOverlaps
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// class AActor*                           Actor                                                  (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UGSE_ActorFuncLib::UpdateActorOverlaps(class AActor* Actor)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("GSE_ActorFuncLib", "UpdateActorOverlaps");

	Params::GSE_ActorFuncLib_UpdateActorOverlaps Parms{};

	Parms.Actor = Actor;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function UnrealExtent.GSE_SceneComponentFuncLib.SetWorldLocationAndRotationSimple
// (Final, Native, Static, Public, HasDefaults, BlueprintCallable)
// Parameters:
// class USceneComponent*                  InSceneComponent                                       (Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FVector                          Pos                                                    (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FRotator                         Rot                                                    (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)

void UGSE_SceneComponentFuncLib::SetWorldLocationAndRotationSimple(class USceneComponent* InSceneComponent, const struct FVector& Pos, const struct FRotator& Rot)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("GSE_SceneComponentFuncLib", "SetWorldLocationAndRotationSimple");

	Params::GSE_SceneComponentFuncLib_SetWorldLocationAndRotationSimple Parms{};

	Parms.InSceneComponent = InSceneComponent;
	Parms.Pos = std::move(Pos);
	Parms.Rot = std::move(Rot);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function UnrealExtent.GSE_CharacterFuncLib.CalculateMaxDistanceFactor
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// class AActor*                           Actor                                                  (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

float UGSE_CharacterFuncLib::CalculateMaxDistanceFactor(class AActor* Actor)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("GSE_CharacterFuncLib", "CalculateMaxDistanceFactor");

	Params::GSE_CharacterFuncLib_CalculateMaxDistanceFactor Parms{};

	Parms.Actor = Actor;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function UnrealExtent.GSE_CharacterFuncLib.CalculateScreenPercentageFromController
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// class AActor*                           Actor                                                  (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class AController*                      Controller                                             (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

float UGSE_CharacterFuncLib::CalculateScreenPercentageFromController(class AActor* Actor, class AController* Controller)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("GSE_CharacterFuncLib", "CalculateScreenPercentageFromController");

	Params::GSE_CharacterFuncLib_CalculateScreenPercentageFromController Parms{};

	Parms.Actor = Actor;
	Parms.Controller = Controller;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function UnrealExtent.GSE_CharacterFuncLib.GetActorBoundingSphereRadius
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// class AActor*                           Actor                                                  (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

float UGSE_CharacterFuncLib::GetActorBoundingSphereRadius(class AActor* Actor)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("GSE_CharacterFuncLib", "GetActorBoundingSphereRadius");

	Params::GSE_CharacterFuncLib_GetActorBoundingSphereRadius Parms{};

	Parms.Actor = Actor;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function UnrealExtent.GSE_CharacterFuncLib.GetBoneTransform
// (Final, Native, Static, Public, HasDefaults, BlueprintCallable, BlueprintPure)
// Parameters:
// class ACharacter*                       Character                                              (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32                                   BoneIndex                                              (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FTransform                       ReturnValue                                            (Parm, OutParm, ReturnParm, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)

struct FTransform UGSE_CharacterFuncLib::GetBoneTransform(class ACharacter* Character, int32 BoneIndex)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("GSE_CharacterFuncLib", "GetBoneTransform");

	Params::GSE_CharacterFuncLib_GetBoneTransform Parms{};

	Parms.Character = Character;
	Parms.BoneIndex = BoneIndex;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function UnrealExtent.GSE_CharacterFuncLib.GetBoneTransformByMesh
// (Final, Native, Static, Public, HasDefaults, BlueprintCallable, BlueprintPure)
// Parameters:
// class USkeletalMeshComponent*           Mesh                                                   (Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32                                   BoneIndex                                              (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FTransform                       ReturnValue                                            (Parm, OutParm, ReturnParm, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)

struct FTransform UGSE_CharacterFuncLib::GetBoneTransformByMesh(class USkeletalMeshComponent* Mesh, int32 BoneIndex)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("GSE_CharacterFuncLib", "GetBoneTransformByMesh");

	Params::GSE_CharacterFuncLib_GetBoneTransformByMesh Parms{};

	Parms.Mesh = Mesh;
	Parms.BoneIndex = BoneIndex;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function UnrealExtent.GSE_CharacterFuncLib.GetPathFollowingBrakingDistance
// (Final, Native, Static, Public, BlueprintCallable, BlueprintPure)
// Parameters:
// class UCharacterMovementComponent*      CharacterMovement                                      (Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

float UGSE_CharacterFuncLib::GetPathFollowingBrakingDistance(class UCharacterMovementComponent* CharacterMovement)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("GSE_CharacterFuncLib", "GetPathFollowingBrakingDistance");

	Params::GSE_CharacterFuncLib_GetPathFollowingBrakingDistance Parms{};

	Parms.CharacterMovement = CharacterMovement;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function UnrealExtent.GSE_CharacterFuncLib.GetSceneComponentByName
// (Final, Native, Static, Public, BlueprintCallable, BlueprintPure)
// Parameters:
// class AActor*                           Actor                                                  (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class FString                           ComponentName                                          (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class USceneComponent*                  ReturnValue                                            (ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class USceneComponent* UGSE_CharacterFuncLib::GetSceneComponentByName(class AActor* Actor, const class FString& ComponentName)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("GSE_CharacterFuncLib", "GetSceneComponentByName");

	Params::GSE_CharacterFuncLib_GetSceneComponentByName Parms{};

	Parms.Actor = Actor;
	Parms.ComponentName = std::move(ComponentName);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function UnrealExtent.GSE_CharacterFuncLib.GetSceneComponentTransformByName
// (Final, Native, Static, Public, HasDefaults, BlueprintCallable, BlueprintPure)
// Parameters:
// class AActor*                           Actor                                                  (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class FString                           ComponentName                                          (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FTransform                       ReturnValue                                            (Parm, OutParm, ReturnParm, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)

struct FTransform UGSE_CharacterFuncLib::GetSceneComponentTransformByName(class AActor* Actor, const class FString& ComponentName)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("GSE_CharacterFuncLib", "GetSceneComponentTransformByName");

	Params::GSE_CharacterFuncLib_GetSceneComponentTransformByName Parms{};

	Parms.Actor = Actor;
	Parms.ComponentName = std::move(ComponentName);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function UnrealExtent.GSE_CharacterFuncLib.GetSocketLocation
// (Final, Native, Static, Public, HasOutParams, HasDefaults, BlueprintCallable)
// Parameters:
// class USceneComponent*                  Comp                                                   (Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class FName                             SocketName                                             (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FVector                          ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

struct FVector UGSE_CharacterFuncLib::GetSocketLocation(class USceneComponent* Comp, const class FName& SocketName)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("GSE_CharacterFuncLib", "GetSocketLocation");

	Params::GSE_CharacterFuncLib_GetSocketLocation Parms{};

	Parms.Comp = Comp;
	Parms.SocketName = SocketName;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function UnrealExtent.GSE_CharacterFuncLib.GetSocketRotation
// (Final, Native, Static, Public, HasOutParams, HasDefaults, BlueprintCallable)
// Parameters:
// class USceneComponent*                  Comp                                                   (Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class FName                             SocketName                                             (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FRotator                         ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)

struct FRotator UGSE_CharacterFuncLib::GetSocketRotation(class USceneComponent* Comp, const class FName& SocketName)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("GSE_CharacterFuncLib", "GetSocketRotation");

	Params::GSE_CharacterFuncLib_GetSocketRotation Parms{};

	Parms.Comp = Comp;
	Parms.SocketName = SocketName;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function UnrealExtent.GSE_CharacterFuncLib.GetSocketTransform
// (Final, Native, Static, Public, HasOutParams, HasDefaults, BlueprintCallable)
// Parameters:
// class USceneComponent*                  Comp                                                   (Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class FName                             SocketName                                             (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// ERelativeTransformSpace                 TransfromSpace                                         (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FTransform                       ReturnValue                                            (Parm, OutParm, ReturnParm, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)

struct FTransform UGSE_CharacterFuncLib::GetSocketTransform(class USceneComponent* Comp, const class FName& SocketName, ERelativeTransformSpace TransfromSpace)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("GSE_CharacterFuncLib", "GetSocketTransform");

	Params::GSE_CharacterFuncLib_GetSocketTransform Parms{};

	Parms.Comp = Comp;
	Parms.SocketName = SocketName;
	Parms.TransfromSpace = TransfromSpace;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function UnrealExtent.GSE_CharacterFuncLib.RecreatePhysicsState
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// class USkeletalMeshComponent*           Mesh                                                   (Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UGSE_CharacterFuncLib::RecreatePhysicsState(class USkeletalMeshComponent* Mesh)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("GSE_CharacterFuncLib", "RecreatePhysicsState");

	Params::GSE_CharacterFuncLib_RecreatePhysicsState Parms{};

	Parms.Mesh = Mesh;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function UnrealExtent.GSE_CharacterFuncLib.SetActorSKMeshesUpdateRateOptimizations
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// class AActor*                           Actor                                                  (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    bEnable                                                (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UGSE_CharacterFuncLib::SetActorSKMeshesUpdateRateOptimizations(class AActor* Actor, bool bEnable)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("GSE_CharacterFuncLib", "SetActorSKMeshesUpdateRateOptimizations");

	Params::GSE_CharacterFuncLib_SetActorSKMeshesUpdateRateOptimizations Parms{};

	Parms.Actor = Actor;
	Parms.bEnable = bEnable;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function UnrealExtent.GSE_CharacterFuncLib.SetAllPABodiesBelowResponseToAllChannels
// (Final, Native, Static, Public, HasOutParams, BlueprintCallable)
// Parameters:
// class USkeletalMeshComponent*           Mesh                                                   (Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class FName                             BoneName                                               (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// ECollisionResponse                      NewResponse                                            (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UGSE_CharacterFuncLib::SetAllPABodiesBelowResponseToAllChannels(class USkeletalMeshComponent* Mesh, const class FName& BoneName, ECollisionResponse NewResponse)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("GSE_CharacterFuncLib", "SetAllPABodiesBelowResponseToAllChannels");

	Params::GSE_CharacterFuncLib_SetAllPABodiesBelowResponseToAllChannels Parms{};

	Parms.Mesh = Mesh;
	Parms.BoneName = BoneName;
	Parms.NewResponse = NewResponse;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function UnrealExtent.GSE_CharacterFuncLib.SetAllPABodiesBelowResponseToChannels
// (Final, Native, Static, Public, HasOutParams, BlueprintCallable)
// Parameters:
// class USkeletalMeshComponent*           Mesh                                                   (Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class FName                             BoneName                                               (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// TArray<ECollisionChannel>               Channels                                               (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
// ECollisionResponse                      NewResponse                                            (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UGSE_CharacterFuncLib::SetAllPABodiesBelowResponseToChannels(class USkeletalMeshComponent* Mesh, const class FName& BoneName, const TArray<ECollisionChannel>& Channels, ECollisionResponse NewResponse)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("GSE_CharacterFuncLib", "SetAllPABodiesBelowResponseToChannels");

	Params::GSE_CharacterFuncLib_SetAllPABodiesBelowResponseToChannels Parms{};

	Parms.Mesh = Mesh;
	Parms.BoneName = BoneName;
	Parms.Channels = std::move(Channels);
	Parms.NewResponse = NewResponse;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function UnrealExtent.GSE_CharacterFuncLib.SetAnimRootMotionTranslationScale
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// class ACharacter*                       Character                                              (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   Scale                                                  (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UGSE_CharacterFuncLib::SetAnimRootMotionTranslationScale(class ACharacter* Character, float Scale)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("GSE_CharacterFuncLib", "SetAnimRootMotionTranslationScale");

	Params::GSE_CharacterFuncLib_SetAnimRootMotionTranslationScale Parms{};

	Parms.Character = Character;
	Parms.Scale = Scale;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function UnrealExtent.GSE_CharacterFuncLib.SetLocalScreenPercentageIfLocalController
// (Final, Native, Static, Public, HasOutParams, BlueprintCallable)
// Parameters:
// class AActor*                           Actor                                                  (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class AController*                      Controller                                             (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   ScreenPercentage                                       (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   OutLocalScreenPercentage                               (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UGSE_CharacterFuncLib::SetLocalScreenPercentageIfLocalController(class AActor* Actor, class AController* Controller, float ScreenPercentage, float* OutLocalScreenPercentage)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("GSE_CharacterFuncLib", "SetLocalScreenPercentageIfLocalController");

	Params::GSE_CharacterFuncLib_SetLocalScreenPercentageIfLocalController Parms{};

	Parms.Actor = Actor;
	Parms.Controller = Controller;
	Parms.ScreenPercentage = ScreenPercentage;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	if (OutLocalScreenPercentage != nullptr)
		*OutLocalScreenPercentage = Parms.OutLocalScreenPercentage;
}


// Function UnrealExtent.GSE_CharacterFuncLib.SetMontagePlayRate
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// class ACharacter*                       Character                                              (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   PlayRate                                               (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UGSE_CharacterFuncLib::SetMontagePlayRate(class ACharacter* Character, float PlayRate)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("GSE_CharacterFuncLib", "SetMontagePlayRate");

	Params::GSE_CharacterFuncLib_SetMontagePlayRate Parms{};

	Parms.Character = Character;
	Parms.PlayRate = PlayRate;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function UnrealExtent.GSE_CharacterFuncLib.Tick
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// class AActor*                           Actor                                                  (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   DeltaTime                                              (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UGSE_CharacterFuncLib::Tick(class AActor* Actor, float DeltaTime)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("GSE_CharacterFuncLib", "Tick");

	Params::GSE_CharacterFuncLib_Tick Parms{};

	Parms.Actor = Actor;
	Parms.DeltaTime = DeltaTime;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function UnrealExtent.GSE_CharacterFuncLib.ToggleActorTickEnabled
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// class AActor*                           InActor                                                (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    bEnable                                                (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    ToggleActorTick                                        (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    ToggleMoveComp                                         (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    ToggleAIComp                                           (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    ToggleSKMeshComp                                       (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    ToggleAkComp                                           (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    ToggleINCLUDE_CHILD_ACTOR                              (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UGSE_CharacterFuncLib::ToggleActorTickEnabled(class AActor* InActor, bool bEnable, bool ToggleActorTick, bool ToggleMoveComp, bool ToggleAIComp, bool ToggleSKMeshComp, bool ToggleAkComp, bool ToggleINCLUDE_CHILD_ACTOR)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("GSE_CharacterFuncLib", "ToggleActorTickEnabled");

	Params::GSE_CharacterFuncLib_ToggleActorTickEnabled Parms{};

	Parms.InActor = InActor;
	Parms.bEnable = bEnable;
	Parms.ToggleActorTick = ToggleActorTick;
	Parms.ToggleMoveComp = ToggleMoveComp;
	Parms.ToggleAIComp = ToggleAIComp;
	Parms.ToggleSKMeshComp = ToggleSKMeshComp;
	Parms.ToggleAkComp = ToggleAkComp;
	Parms.ToggleINCLUDE_CHILD_ACTOR = ToggleINCLUDE_CHILD_ACTOR;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function UnrealExtent.GSE_ChunkFuncLib.IsPlayGoInstalling
// (Final, Native, Static, Private, BlueprintCallable)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UGSE_ChunkFuncLib::IsPlayGoInstalling()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("GSE_ChunkFuncLib", "IsPlayGoInstalling");

	Params::GSE_ChunkFuncLib_IsPlayGoInstalling Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function UnrealExtent.GSE_ChunkFuncLib.TryGetPlayGoInfo
// (Final, Native, Static, Private, HasOutParams, BlueprintCallable)
// Parameters:
// int64                                   ProgressSize                                           (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int64                                   TotalSize                                              (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// double                                  CurrentTime                                            (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UGSE_ChunkFuncLib::TryGetPlayGoInfo(int64* ProgressSize, int64* TotalSize, double* CurrentTime)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("GSE_ChunkFuncLib", "TryGetPlayGoInfo");

	Params::GSE_ChunkFuncLib_TryGetPlayGoInfo Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	if (ProgressSize != nullptr)
		*ProgressSize = Parms.ProgressSize;

	if (TotalSize != nullptr)
		*TotalSize = Parms.TotalSize;

	if (CurrentTime != nullptr)
		*CurrentTime = Parms.CurrentTime;

	return Parms.ReturnValue;
}


// Function UnrealExtent.GSE_ConfigFuncLib.Flush
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// EConfigIniFileNames                     ConfigFile                                             (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    bRefreshInConfigSystem                                 (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UGSE_ConfigFuncLib::Flush(EConfigIniFileNames ConfigFile, const bool bRefreshInConfigSystem)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("GSE_ConfigFuncLib", "Flush");

	Params::GSE_ConfigFuncLib_Flush Parms{};

	Parms.ConfigFile = ConfigFile;
	Parms.bRefreshInConfigSystem = bRefreshInConfigSystem;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function UnrealExtent.GSE_ConfigFuncLib.GetArray
// (Final, Native, Static, Public, HasOutParams, BlueprintCallable)
// Parameters:
// EConfigIniFileNames                     ConfigFile                                             (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class FString                           SectionName                                            (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class FString                           PropertyName                                           (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    bWasFound                                              (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// TArray<class FString>                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, NativeAccessSpecifierPublic)

TArray<class FString> UGSE_ConfigFuncLib::GetArray(EConfigIniFileNames ConfigFile, const class FString& SectionName, const class FString& PropertyName, bool* bWasFound)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("GSE_ConfigFuncLib", "GetArray");

	Params::GSE_ConfigFuncLib_GetArray Parms{};

	Parms.ConfigFile = ConfigFile;
	Parms.SectionName = std::move(SectionName);
	Parms.PropertyName = std::move(PropertyName);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	if (bWasFound != nullptr)
		*bWasFound = Parms.bWasFound;

	return Parms.ReturnValue;
}


// Function UnrealExtent.GSE_ConfigFuncLib.GetBool
// (Final, Native, Static, Public, HasOutParams, BlueprintCallable)
// Parameters:
// EConfigIniFileNames                     ConfigFile                                             (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class FString                           SectionName                                            (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class FString                           PropertyName                                           (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    bWasFound                                              (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UGSE_ConfigFuncLib::GetBool(EConfigIniFileNames ConfigFile, const class FString& SectionName, const class FString& PropertyName, bool* bWasFound)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("GSE_ConfigFuncLib", "GetBool");

	Params::GSE_ConfigFuncLib_GetBool Parms{};

	Parms.ConfigFile = ConfigFile;
	Parms.SectionName = std::move(SectionName);
	Parms.PropertyName = std::move(PropertyName);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	if (bWasFound != nullptr)
		*bWasFound = Parms.bWasFound;

	return Parms.ReturnValue;
}


// Function UnrealExtent.GSE_ConfigFuncLib.GetColor
// (Final, Native, Static, Public, HasOutParams, HasDefaults, BlueprintCallable)
// Parameters:
// EConfigIniFileNames                     ConfigFile                                             (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class FString                           SectionName                                            (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class FString                           PropertyName                                           (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    bWasFound                                              (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FColor                           ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

struct FColor UGSE_ConfigFuncLib::GetColor(EConfigIniFileNames ConfigFile, const class FString& SectionName, const class FString& PropertyName, bool* bWasFound)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("GSE_ConfigFuncLib", "GetColor");

	Params::GSE_ConfigFuncLib_GetColor Parms{};

	Parms.ConfigFile = ConfigFile;
	Parms.SectionName = std::move(SectionName);
	Parms.PropertyName = std::move(PropertyName);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	if (bWasFound != nullptr)
		*bWasFound = Parms.bWasFound;

	return Parms.ReturnValue;
}


// Function UnrealExtent.GSE_ConfigFuncLib.GetFloat
// (Final, Native, Static, Public, HasOutParams, BlueprintCallable)
// Parameters:
// EConfigIniFileNames                     ConfigFile                                             (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class FString                           SectionName                                            (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class FString                           PropertyName                                           (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    bWasFound                                              (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

float UGSE_ConfigFuncLib::GetFloat(EConfigIniFileNames ConfigFile, const class FString& SectionName, const class FString& PropertyName, bool* bWasFound)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("GSE_ConfigFuncLib", "GetFloat");

	Params::GSE_ConfigFuncLib_GetFloat Parms{};

	Parms.ConfigFile = ConfigFile;
	Parms.SectionName = std::move(SectionName);
	Parms.PropertyName = std::move(PropertyName);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	if (bWasFound != nullptr)
		*bWasFound = Parms.bWasFound;

	return Parms.ReturnValue;
}


// Function UnrealExtent.GSE_ConfigFuncLib.GetInt
// (Final, Native, Static, Public, HasOutParams, BlueprintCallable)
// Parameters:
// EConfigIniFileNames                     ConfigFile                                             (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class FString                           SectionName                                            (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class FString                           PropertyName                                           (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    bWasFound                                              (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

int32 UGSE_ConfigFuncLib::GetInt(EConfigIniFileNames ConfigFile, const class FString& SectionName, const class FString& PropertyName, bool* bWasFound)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("GSE_ConfigFuncLib", "GetInt");

	Params::GSE_ConfigFuncLib_GetInt Parms{};

	Parms.ConfigFile = ConfigFile;
	Parms.SectionName = std::move(SectionName);
	Parms.PropertyName = std::move(PropertyName);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	if (bWasFound != nullptr)
		*bWasFound = Parms.bWasFound;

	return Parms.ReturnValue;
}


// Function UnrealExtent.GSE_ConfigFuncLib.GetRotator
// (Final, Native, Static, Public, HasOutParams, HasDefaults, BlueprintCallable)
// Parameters:
// EConfigIniFileNames                     ConfigFile                                             (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class FString                           SectionName                                            (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class FString                           PropertyName                                           (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    bWasFound                                              (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FRotator                         ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)

struct FRotator UGSE_ConfigFuncLib::GetRotator(EConfigIniFileNames ConfigFile, const class FString& SectionName, const class FString& PropertyName, bool* bWasFound)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("GSE_ConfigFuncLib", "GetRotator");

	Params::GSE_ConfigFuncLib_GetRotator Parms{};

	Parms.ConfigFile = ConfigFile;
	Parms.SectionName = std::move(SectionName);
	Parms.PropertyName = std::move(PropertyName);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	if (bWasFound != nullptr)
		*bWasFound = Parms.bWasFound;

	return Parms.ReturnValue;
}


// Function UnrealExtent.GSE_ConfigFuncLib.GetString
// (Final, Native, Static, Public, HasOutParams, BlueprintCallable)
// Parameters:
// EConfigIniFileNames                     ConfigFile                                             (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class FString                           SectionName                                            (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class FString                           PropertyName                                           (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    bWasFound                                              (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class FString                           ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class FString UGSE_ConfigFuncLib::GetString(EConfigIniFileNames ConfigFile, const class FString& SectionName, const class FString& PropertyName, bool* bWasFound)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("GSE_ConfigFuncLib", "GetString");

	Params::GSE_ConfigFuncLib_GetString Parms{};

	Parms.ConfigFile = ConfigFile;
	Parms.SectionName = std::move(SectionName);
	Parms.PropertyName = std::move(PropertyName);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	if (bWasFound != nullptr)
		*bWasFound = Parms.bWasFound;

	return Parms.ReturnValue;
}


// Function UnrealExtent.GSE_ConfigFuncLib.GetText
// (Final, Native, Static, Public, HasOutParams, BlueprintCallable)
// Parameters:
// EConfigIniFileNames                     ConfigFile                                             (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class FString                           SectionName                                            (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class FString                           PropertyName                                           (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    bWasFound                                              (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class FText                             ReturnValue                                            (Parm, OutParm, ReturnParm, NativeAccessSpecifierPublic)

class FText UGSE_ConfigFuncLib::GetText(EConfigIniFileNames ConfigFile, const class FString& SectionName, const class FString& PropertyName, bool* bWasFound)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("GSE_ConfigFuncLib", "GetText");

	Params::GSE_ConfigFuncLib_GetText Parms{};

	Parms.ConfigFile = ConfigFile;
	Parms.SectionName = std::move(SectionName);
	Parms.PropertyName = std::move(PropertyName);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	if (bWasFound != nullptr)
		*bWasFound = Parms.bWasFound;

	return Parms.ReturnValue;
}


// Function UnrealExtent.GSE_ConfigFuncLib.GetVector
// (Final, Native, Static, Public, HasOutParams, HasDefaults, BlueprintCallable)
// Parameters:
// EConfigIniFileNames                     ConfigFile                                             (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class FString                           SectionName                                            (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class FString                           PropertyName                                           (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    bWasFound                                              (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FVector                          ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

struct FVector UGSE_ConfigFuncLib::GetVector(EConfigIniFileNames ConfigFile, const class FString& SectionName, const class FString& PropertyName, bool* bWasFound)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("GSE_ConfigFuncLib", "GetVector");

	Params::GSE_ConfigFuncLib_GetVector Parms{};

	Parms.ConfigFile = ConfigFile;
	Parms.SectionName = std::move(SectionName);
	Parms.PropertyName = std::move(PropertyName);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	if (bWasFound != nullptr)
		*bWasFound = Parms.bWasFound;

	return Parms.ReturnValue;
}


// Function UnrealExtent.GSE_ConfigFuncLib.GetVector2D
// (Final, Native, Static, Public, HasOutParams, HasDefaults, BlueprintCallable)
// Parameters:
// EConfigIniFileNames                     ConfigFile                                             (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class FString                           SectionName                                            (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class FString                           PropertyName                                           (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    bWasFound                                              (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FVector2D                        ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

struct FVector2D UGSE_ConfigFuncLib::GetVector2D(EConfigIniFileNames ConfigFile, const class FString& SectionName, const class FString& PropertyName, bool* bWasFound)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("GSE_ConfigFuncLib", "GetVector2D");

	Params::GSE_ConfigFuncLib_GetVector2D Parms{};

	Parms.ConfigFile = ConfigFile;
	Parms.SectionName = std::move(SectionName);
	Parms.PropertyName = std::move(PropertyName);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	if (bWasFound != nullptr)
		*bWasFound = Parms.bWasFound;

	return Parms.ReturnValue;
}


// Function UnrealExtent.GSE_ConfigFuncLib.GetVector4
// (Final, Native, Static, Public, HasOutParams, HasDefaults, BlueprintCallable)
// Parameters:
// EConfigIniFileNames                     ConfigFile                                             (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class FString                           SectionName                                            (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class FString                           PropertyName                                           (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    bWasFound                                              (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FVector4                         ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

struct FVector4 UGSE_ConfigFuncLib::GetVector4(EConfigIniFileNames ConfigFile, const class FString& SectionName, const class FString& PropertyName, bool* bWasFound)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("GSE_ConfigFuncLib", "GetVector4");

	Params::GSE_ConfigFuncLib_GetVector4 Parms{};

	Parms.ConfigFile = ConfigFile;
	Parms.SectionName = std::move(SectionName);
	Parms.PropertyName = std::move(PropertyName);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	if (bWasFound != nullptr)
		*bWasFound = Parms.bWasFound;

	return Parms.ReturnValue;
}


// Function UnrealExtent.GSE_ConfigFuncLib.SetArray
// (Final, Native, Static, Public, HasOutParams, BlueprintCallable)
// Parameters:
// EConfigIniFileNames                     ConfigFile                                             (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class FString                           SectionName                                            (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class FString                           PropertyName                                           (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// TArray<class FString>                   ArrayValue                                             (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)

void UGSE_ConfigFuncLib::SetArray(EConfigIniFileNames ConfigFile, const class FString& SectionName, const class FString& PropertyName, const TArray<class FString>& ArrayValue)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("GSE_ConfigFuncLib", "SetArray");

	Params::GSE_ConfigFuncLib_SetArray Parms{};

	Parms.ConfigFile = ConfigFile;
	Parms.SectionName = std::move(SectionName);
	Parms.PropertyName = std::move(PropertyName);
	Parms.ArrayValue = std::move(ArrayValue);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function UnrealExtent.GSE_ConfigFuncLib.SetBool
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// EConfigIniFileNames                     ConfigFile                                             (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class FString                           SectionName                                            (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class FString                           PropertyName                                           (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    BoolValue                                              (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UGSE_ConfigFuncLib::SetBool(EConfigIniFileNames ConfigFile, const class FString& SectionName, const class FString& PropertyName, const bool BoolValue)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("GSE_ConfigFuncLib", "SetBool");

	Params::GSE_ConfigFuncLib_SetBool Parms{};

	Parms.ConfigFile = ConfigFile;
	Parms.SectionName = std::move(SectionName);
	Parms.PropertyName = std::move(PropertyName);
	Parms.BoolValue = BoolValue;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function UnrealExtent.GSE_ConfigFuncLib.SetColor
// (Final, Native, Static, Public, HasOutParams, HasDefaults, BlueprintCallable)
// Parameters:
// EConfigIniFileNames                     ConfigFile                                             (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class FString                           SectionName                                            (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class FString                           PropertyName                                           (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FColor                           ColorValue                                             (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UGSE_ConfigFuncLib::SetColor(EConfigIniFileNames ConfigFile, const class FString& SectionName, const class FString& PropertyName, const struct FColor& ColorValue)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("GSE_ConfigFuncLib", "SetColor");

	Params::GSE_ConfigFuncLib_SetColor Parms{};

	Parms.ConfigFile = ConfigFile;
	Parms.SectionName = std::move(SectionName);
	Parms.PropertyName = std::move(PropertyName);
	Parms.ColorValue = std::move(ColorValue);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function UnrealExtent.GSE_ConfigFuncLib.SetFloat
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// EConfigIniFileNames                     ConfigFile                                             (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class FString                           SectionName                                            (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class FString                           PropertyName                                           (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   FloatValue                                             (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UGSE_ConfigFuncLib::SetFloat(EConfigIniFileNames ConfigFile, const class FString& SectionName, const class FString& PropertyName, const float FloatValue)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("GSE_ConfigFuncLib", "SetFloat");

	Params::GSE_ConfigFuncLib_SetFloat Parms{};

	Parms.ConfigFile = ConfigFile;
	Parms.SectionName = std::move(SectionName);
	Parms.PropertyName = std::move(PropertyName);
	Parms.FloatValue = FloatValue;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function UnrealExtent.GSE_ConfigFuncLib.SetInt
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// EConfigIniFileNames                     ConfigFile                                             (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class FString                           SectionName                                            (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class FString                           PropertyName                                           (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32                                   IntValue                                               (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UGSE_ConfigFuncLib::SetInt(EConfigIniFileNames ConfigFile, const class FString& SectionName, const class FString& PropertyName, const int32 IntValue)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("GSE_ConfigFuncLib", "SetInt");

	Params::GSE_ConfigFuncLib_SetInt Parms{};

	Parms.ConfigFile = ConfigFile;
	Parms.SectionName = std::move(SectionName);
	Parms.PropertyName = std::move(PropertyName);
	Parms.IntValue = IntValue;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function UnrealExtent.GSE_ConfigFuncLib.SetRotator
// (Final, Native, Static, Public, HasOutParams, HasDefaults, BlueprintCallable)
// Parameters:
// EConfigIniFileNames                     ConfigFile                                             (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class FString                           SectionName                                            (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class FString                           PropertyName                                           (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FRotator                         RotatorValue                                           (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)

void UGSE_ConfigFuncLib::SetRotator(EConfigIniFileNames ConfigFile, const class FString& SectionName, const class FString& PropertyName, const struct FRotator& RotatorValue)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("GSE_ConfigFuncLib", "SetRotator");

	Params::GSE_ConfigFuncLib_SetRotator Parms{};

	Parms.ConfigFile = ConfigFile;
	Parms.SectionName = std::move(SectionName);
	Parms.PropertyName = std::move(PropertyName);
	Parms.RotatorValue = std::move(RotatorValue);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function UnrealExtent.GSE_ConfigFuncLib.SetString
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// EConfigIniFileNames                     ConfigFile                                             (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class FString                           SectionName                                            (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class FString                           PropertyName                                           (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class FString                           StringValue                                            (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UGSE_ConfigFuncLib::SetString(EConfigIniFileNames ConfigFile, const class FString& SectionName, const class FString& PropertyName, const class FString& StringValue)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("GSE_ConfigFuncLib", "SetString");

	Params::GSE_ConfigFuncLib_SetString Parms{};

	Parms.ConfigFile = ConfigFile;
	Parms.SectionName = std::move(SectionName);
	Parms.PropertyName = std::move(PropertyName);
	Parms.StringValue = std::move(StringValue);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function UnrealExtent.GSE_ConfigFuncLib.SetText
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// EConfigIniFileNames                     ConfigFile                                             (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class FString                           SectionName                                            (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class FString                           PropertyName                                           (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class FText                             TextValue                                              (ConstParm, Parm, NativeAccessSpecifierPublic)

void UGSE_ConfigFuncLib::SetText(EConfigIniFileNames ConfigFile, const class FString& SectionName, const class FString& PropertyName, const class FText& TextValue)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("GSE_ConfigFuncLib", "SetText");

	Params::GSE_ConfigFuncLib_SetText Parms{};

	Parms.ConfigFile = ConfigFile;
	Parms.SectionName = std::move(SectionName);
	Parms.PropertyName = std::move(PropertyName);
	Parms.TextValue = std::move(TextValue);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function UnrealExtent.GSE_ConfigFuncLib.SetVector
// (Final, Native, Static, Public, HasOutParams, HasDefaults, BlueprintCallable)
// Parameters:
// EConfigIniFileNames                     ConfigFile                                             (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class FString                           SectionName                                            (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class FString                           PropertyName                                           (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FVector                          VectorValue                                            (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UGSE_ConfigFuncLib::SetVector(EConfigIniFileNames ConfigFile, const class FString& SectionName, const class FString& PropertyName, const struct FVector& VectorValue)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("GSE_ConfigFuncLib", "SetVector");

	Params::GSE_ConfigFuncLib_SetVector Parms{};

	Parms.ConfigFile = ConfigFile;
	Parms.SectionName = std::move(SectionName);
	Parms.PropertyName = std::move(PropertyName);
	Parms.VectorValue = std::move(VectorValue);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function UnrealExtent.GSE_ConfigFuncLib.SetVector2D
// (Final, Native, Static, Public, HasOutParams, HasDefaults, BlueprintCallable)
// Parameters:
// EConfigIniFileNames                     ConfigFile                                             (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class FString                           SectionName                                            (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class FString                           PropertyName                                           (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FVector2D                        Vector2DValue                                          (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UGSE_ConfigFuncLib::SetVector2D(EConfigIniFileNames ConfigFile, const class FString& SectionName, const class FString& PropertyName, const struct FVector2D& Vector2DValue)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("GSE_ConfigFuncLib", "SetVector2D");

	Params::GSE_ConfigFuncLib_SetVector2D Parms{};

	Parms.ConfigFile = ConfigFile;
	Parms.SectionName = std::move(SectionName);
	Parms.PropertyName = std::move(PropertyName);
	Parms.Vector2DValue = std::move(Vector2DValue);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function UnrealExtent.GSE_ConfigFuncLib.SetVector4
// (Final, Native, Static, Public, HasOutParams, HasDefaults, BlueprintCallable)
// Parameters:
// EConfigIniFileNames                     ConfigFile                                             (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class FString                           SectionName                                            (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class FString                           PropertyName                                           (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FVector4                         Vector4Value                                           (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UGSE_ConfigFuncLib::SetVector4(EConfigIniFileNames ConfigFile, const class FString& SectionName, const class FString& PropertyName, const struct FVector4& Vector4Value)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("GSE_ConfigFuncLib", "SetVector4");

	Params::GSE_ConfigFuncLib_SetVector4 Parms{};

	Parms.ConfigFile = ConfigFile;
	Parms.SectionName = std::move(SectionName);
	Parms.PropertyName = std::move(PropertyName);
	Parms.Vector4Value = std::move(Vector4Value);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function UnrealExtent.GSE_CppExport.GetActorFuncAsMap
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// TMap<class FString, struct FIntPtr>     ReturnValue                                            (Parm, OutParm, ReturnParm, NativeAccessSpecifierPublic)

TMap<class FString, struct FIntPtr> UGSE_CppExport::GetActorFuncAsMap()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("GSE_CppExport", "GetActorFuncAsMap");

	Params::GSE_CppExport_GetActorFuncAsMap Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function UnrealExtent.GSE_CppExport.GetAIFuncAsMap
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// TMap<class FString, struct FIntPtr>     ReturnValue                                            (Parm, OutParm, ReturnParm, NativeAccessSpecifierPublic)

TMap<class FString, struct FIntPtr> UGSE_CppExport::GetAIFuncAsMap()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("GSE_CppExport", "GetAIFuncAsMap");

	Params::GSE_CppExport_GetAIFuncAsMap Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function UnrealExtent.GSE_CppExport.GetAnimFuncAsMap
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// TMap<class FString, struct FIntPtr>     ReturnValue                                            (Parm, OutParm, ReturnParm, NativeAccessSpecifierPublic)

TMap<class FString, struct FIntPtr> UGSE_CppExport::GetAnimFuncAsMap()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("GSE_CppExport", "GetAnimFuncAsMap");

	Params::GSE_CppExport_GetAnimFuncAsMap Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function UnrealExtent.GSE_CppExport.GetAsyncLineTraceReqFuncAsMap
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// TMap<class FString, struct FIntPtr>     ReturnValue                                            (Parm, OutParm, ReturnParm, NativeAccessSpecifierPublic)

TMap<class FString, struct FIntPtr> UGSE_CppExport::GetAsyncLineTraceReqFuncAsMap()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("GSE_CppExport", "GetAsyncLineTraceReqFuncAsMap");

	Params::GSE_CppExport_GetAsyncLineTraceReqFuncAsMap Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function UnrealExtent.GSE_CppExport.GetCVarFuncAsMap
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// TMap<class FString, struct FIntPtr>     ReturnValue                                            (Parm, OutParm, ReturnParm, NativeAccessSpecifierPublic)

TMap<class FString, struct FIntPtr> UGSE_CppExport::GetCVarFuncAsMap()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("GSE_CppExport", "GetCVarFuncAsMap");

	Params::GSE_CppExport_GetCVarFuncAsMap Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function UnrealExtent.GSE_CppExport.GetGameplayTagFuncAsMap
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// TMap<class FString, struct FIntPtr>     ReturnValue                                            (Parm, OutParm, ReturnParm, NativeAccessSpecifierPublic)

TMap<class FString, struct FIntPtr> UGSE_CppExport::GetGameplayTagFuncAsMap()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("GSE_CppExport", "GetGameplayTagFuncAsMap");

	Params::GSE_CppExport_GetGameplayTagFuncAsMap Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function UnrealExtent.GSE_CppExport.GetGSCVarFuncAsMap
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// TMap<class FString, struct FIntPtr>     ReturnValue                                            (Parm, OutParm, ReturnParm, NativeAccessSpecifierPublic)

TMap<class FString, struct FIntPtr> UGSE_CppExport::GetGSCVarFuncAsMap()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("GSE_CppExport", "GetGSCVarFuncAsMap");

	Params::GSE_CppExport_GetGSCVarFuncAsMap Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function UnrealExtent.GSE_CppExport.GetInputFuncAsMap
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// TMap<class FString, struct FIntPtr>     ReturnValue                                            (Parm, OutParm, ReturnParm, NativeAccessSpecifierPublic)

TMap<class FString, struct FIntPtr> UGSE_CppExport::GetInputFuncAsMap()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("GSE_CppExport", "GetInputFuncAsMap");

	Params::GSE_CppExport_GetInputFuncAsMap Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function UnrealExtent.GSE_CppExport.GetLineTraceFuncAsMap
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// TMap<class FString, struct FIntPtr>     ReturnValue                                            (Parm, OutParm, ReturnParm, NativeAccessSpecifierPublic)

TMap<class FString, struct FIntPtr> UGSE_CppExport::GetLineTraceFuncAsMap()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("GSE_CppExport", "GetLineTraceFuncAsMap");

	Params::GSE_CppExport_GetLineTraceFuncAsMap Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function UnrealExtent.GSE_CppExport.GetMathFuncAsMap
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// TMap<class FString, struct FIntPtr>     ReturnValue                                            (Parm, OutParm, ReturnParm, NativeAccessSpecifierPublic)

TMap<class FString, struct FIntPtr> UGSE_CppExport::GetMathFuncAsMap()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("GSE_CppExport", "GetMathFuncAsMap");

	Params::GSE_CppExport_GetMathFuncAsMap Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function UnrealExtent.GSE_CppExport.GetNiagaraFuncAsMap
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// TMap<class FString, struct FIntPtr>     ReturnValue                                            (Parm, OutParm, ReturnParm, NativeAccessSpecifierPublic)

TMap<class FString, struct FIntPtr> UGSE_CppExport::GetNiagaraFuncAsMap()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("GSE_CppExport", "GetNiagaraFuncAsMap");

	Params::GSE_CppExport_GetNiagaraFuncAsMap Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function UnrealExtent.GSE_CppExport.GetProfilerFuncAsMap
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// TMap<class FString, struct FIntPtr>     ReturnValue                                            (Parm, OutParm, ReturnParm, NativeAccessSpecifierPublic)

TMap<class FString, struct FIntPtr> UGSE_CppExport::GetProfilerFuncAsMap()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("GSE_CppExport", "GetProfilerFuncAsMap");

	Params::GSE_CppExport_GetProfilerFuncAsMap Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function UnrealExtent.GSE_CppExport.GetRenderFuncAsMap
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// TMap<class FString, struct FIntPtr>     ReturnValue                                            (Parm, OutParm, ReturnParm, NativeAccessSpecifierPublic)

TMap<class FString, struct FIntPtr> UGSE_CppExport::GetRenderFuncAsMap()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("GSE_CppExport", "GetRenderFuncAsMap");

	Params::GSE_CppExport_GetRenderFuncAsMap Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function UnrealExtent.GSE_CppExport.GetSceneComponentFuncAsMap
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// TMap<class FString, struct FIntPtr>     ReturnValue                                            (Parm, OutParm, ReturnParm, NativeAccessSpecifierPublic)

TMap<class FString, struct FIntPtr> UGSE_CppExport::GetSceneComponentFuncAsMap()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("GSE_CppExport", "GetSceneComponentFuncAsMap");

	Params::GSE_CppExport_GetSceneComponentFuncAsMap Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function UnrealExtent.GSE_CppExport.GetSplineComponentFuncAsMap
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// TMap<class FString, struct FIntPtr>     ReturnValue                                            (Parm, OutParm, ReturnParm, NativeAccessSpecifierPublic)

TMap<class FString, struct FIntPtr> UGSE_CppExport::GetSplineComponentFuncAsMap()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("GSE_CppExport", "GetSplineComponentFuncAsMap");

	Params::GSE_CppExport_GetSplineComponentFuncAsMap Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function UnrealExtent.GSE_CppExport.GetTaskGraphFuncAsMap
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// TMap<class FString, struct FIntPtr>     ReturnValue                                            (Parm, OutParm, ReturnParm, NativeAccessSpecifierPublic)

TMap<class FString, struct FIntPtr> UGSE_CppExport::GetTaskGraphFuncAsMap()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("GSE_CppExport", "GetTaskGraphFuncAsMap");

	Params::GSE_CppExport_GetTaskGraphFuncAsMap Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function UnrealExtent.GSE_CppExport.GetUMGFuncAsMap
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// TMap<class FString, struct FIntPtr>     ReturnValue                                            (Parm, OutParm, ReturnParm, NativeAccessSpecifierPublic)

TMap<class FString, struct FIntPtr> UGSE_CppExport::GetUMGFuncAsMap()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("GSE_CppExport", "GetUMGFuncAsMap");

	Params::GSE_CppExport_GetUMGFuncAsMap Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function UnrealExtent.GSE_EditorFuncLib.AssetPath_GetCDO
// (Final, Native, Static, Public, HasOutParams, BlueprintCallable)
// Parameters:
// class UObject*                          Outer_0                                                (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class FString                           Path                                                   (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class UBlueprint*                       Blueprint                                              (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class UObject*                          ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class UObject* UGSE_EditorFuncLib::AssetPath_GetCDO(class UObject* Outer_0, const class FString& Path, class UBlueprint** Blueprint)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("GSE_EditorFuncLib", "AssetPath_GetCDO");

	Params::GSE_EditorFuncLib_AssetPath_GetCDO Parms{};

	Parms.Outer_0 = Outer_0;
	Parms.Path = std::move(Path);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	if (Blueprint != nullptr)
		*Blueprint = Parms.Blueprint;

	return Parms.ReturnValue;
}


// Function UnrealExtent.GSE_EditorFuncLib.BGUGetStaticMeshComp
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// class AActor*                           Actor                                                  (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class UStaticMeshComponent*             ReturnValue                                            (ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class UStaticMeshComponent* UGSE_EditorFuncLib::BGUGetStaticMeshComp(class AActor* Actor)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("GSE_EditorFuncLib", "BGUGetStaticMeshComp");

	Params::GSE_EditorFuncLib_BGUGetStaticMeshComp Parms{};

	Parms.Actor = Actor;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function UnrealExtent.GSE_EditorFuncLib.BGULandscapeCameraCollsion
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// class UObject*                          WorldContextObject                                     (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32                                   SurfaceType                                            (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   CellSize                                               (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   MaxHeightOffset                                        (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   MaxDisplacement                                        (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   CameraCollisionOffset                                  (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UGSE_EditorFuncLib::BGULandscapeCameraCollsion(class UObject* WorldContextObject, int32 SurfaceType, float CellSize, float MaxHeightOffset, float MaxDisplacement, float CameraCollisionOffset)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("GSE_EditorFuncLib", "BGULandscapeCameraCollsion");

	Params::GSE_EditorFuncLib_BGULandscapeCameraCollsion Parms{};

	Parms.WorldContextObject = WorldContextObject;
	Parms.SurfaceType = SurfaceType;
	Parms.CellSize = CellSize;
	Parms.MaxHeightOffset = MaxHeightOffset;
	Parms.MaxDisplacement = MaxDisplacement;
	Parms.CameraCollisionOffset = CameraCollisionOffset;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function UnrealExtent.GSE_EditorFuncLib.CheckActorBoundsInfo
// (Final, Native, Static, Public, HasOutParams, HasDefaults, BlueprintCallable)
// Parameters:
// class AActor*                           InActor                                                (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    bIncludeNonCollision                                   (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    OutActorLevelBoundsRelevant                            (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FBox                             OutActorBounds                                         (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)

void UGSE_EditorFuncLib::CheckActorBoundsInfo(class AActor* InActor, bool bIncludeNonCollision, bool* OutActorLevelBoundsRelevant, struct FBox* OutActorBounds)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("GSE_EditorFuncLib", "CheckActorBoundsInfo");

	Params::GSE_EditorFuncLib_CheckActorBoundsInfo Parms{};

	Parms.InActor = InActor;
	Parms.bIncludeNonCollision = bIncludeNonCollision;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	if (OutActorLevelBoundsRelevant != nullptr)
		*OutActorLevelBoundsRelevant = Parms.OutActorLevelBoundsRelevant;

	if (OutActorBounds != nullptr)
		*OutActorBounds = std::move(Parms.OutActorBounds);
}


// Function UnrealExtent.GSE_EditorFuncLib.CompileText
// (Final, Native, Static, Public, BlueprintCallable)

void UGSE_EditorFuncLib::CompileText()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("GSE_EditorFuncLib", "CompileText");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function UnrealExtent.GSE_EditorFuncLib.FAssetData_GetAsset
// (Final, Native, Static, Public, BlueprintCallable, BlueprintPure)
// Parameters:
// class UAssetDataArray*                  AssetData                                              (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class UObject*                          ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class UObject* UGSE_EditorFuncLib::FAssetData_GetAsset(class UAssetDataArray* AssetData)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("GSE_EditorFuncLib", "FAssetData_GetAsset");

	Params::GSE_EditorFuncLib_FAssetData_GetAsset Parms{};

	Parms.AssetData = AssetData;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function UnrealExtent.GSE_EditorFuncLib.FAssetData_GetClass
// (Final, Native, Static, Public, BlueprintCallable, BlueprintPure)
// Parameters:
// class UAssetDataArray*                  AssetData                                              (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class UClass*                           ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class UClass* UGSE_EditorFuncLib::FAssetData_GetClass(class UAssetDataArray* AssetData)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("GSE_EditorFuncLib", "FAssetData_GetClass");

	Params::GSE_EditorFuncLib_FAssetData_GetClass Parms{};

	Parms.AssetData = AssetData;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function UnrealExtent.GSE_EditorFuncLib.FAssetData_GetTagValue
// (Final, Native, Static, Public, HasOutParams, BlueprintCallable, BlueprintPure)
// Parameters:
// class UAssetDataArray*                  AssetData                                              (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class FName                             TagName                                                (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class FString                           ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class FString UGSE_EditorFuncLib::FAssetData_GetTagValue(class UAssetDataArray* AssetData, const class FName& TagName)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("GSE_EditorFuncLib", "FAssetData_GetTagValue");

	Params::GSE_EditorFuncLib_FAssetData_GetTagValue Parms{};

	Parms.AssetData = AssetData;
	Parms.TagName = TagName;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function UnrealExtent.GSE_EditorFuncLib.GatherText
// (Final, Native, Static, Public, BlueprintCallable)

void UGSE_EditorFuncLib::GatherText()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("GSE_EditorFuncLib", "GatherText");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function UnrealExtent.GSE_EditorFuncLib.GetBrushBounds
// (Final, Native, Static, Public, HasDefaults, BlueprintCallable)
// Parameters:
// class UBrushComponent*                  BrushCom                                               (Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FBoxSphereBounds                 ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)

struct FBoxSphereBounds UGSE_EditorFuncLib::GetBrushBounds(class UBrushComponent* BrushCom)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("GSE_EditorFuncLib", "GetBrushBounds");

	Params::GSE_EditorFuncLib_GetBrushBounds Parms{};

	Parms.BrushCom = BrushCom;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function UnrealExtent.GSE_EditorFuncLib.GetCDONodeComponents
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// class AActor*                           CDO                                                    (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// TArray<class UActorComponent*>          ReturnValue                                            (ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, ContainsInstancedReference, NativeAccessSpecifierPublic)

TArray<class UActorComponent*> UGSE_EditorFuncLib::GetCDONodeComponents(class AActor* CDO)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("GSE_EditorFuncLib", "GetCDONodeComponents");

	Params::GSE_EditorFuncLib_GetCDONodeComponents Parms{};

	Parms.CDO = CDO;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function UnrealExtent.GSE_EditorFuncLib.GetContentBrowserSelections
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// class UAssetDataArray*                  ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class UAssetDataArray* UGSE_EditorFuncLib::GetContentBrowserSelections()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("GSE_EditorFuncLib", "GetContentBrowserSelections");

	Params::GSE_EditorFuncLib_GetContentBrowserSelections Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function UnrealExtent.GSE_EditorFuncLib.GetValidPostProcessVolumes
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// class UWorld*                           InWorld                                                (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// TArray<class APostProcessVolume*>       ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, NativeAccessSpecifierPublic)

TArray<class APostProcessVolume*> UGSE_EditorFuncLib::GetValidPostProcessVolumes(class UWorld* InWorld)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("GSE_EditorFuncLib", "GetValidPostProcessVolumes");

	Params::GSE_EditorFuncLib_GetValidPostProcessVolumes Parms{};

	Parms.InWorld = InWorld;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function UnrealExtent.GSE_EditorFuncLib.ImportCSVToStringTable
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// class FName                             TableId                                                (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class FString                           CSVPath                                                (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UGSE_EditorFuncLib::ImportCSVToStringTable(class FName TableId, const class FString& CSVPath)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("GSE_EditorFuncLib", "ImportCSVToStringTable");

	Params::GSE_EditorFuncLib_ImportCSVToStringTable Parms{};

	Parms.TableId = TableId;
	Parms.CSVPath = std::move(CSVPath);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function UnrealExtent.GSE_EditorFuncLib.IsClassPlaceable
// (Final, Native, Static, Public, BlueprintCallable, BlueprintPure)
// Parameters:
// class UClass*                           AssetClass                                             (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UGSE_EditorFuncLib::IsClassPlaceable(class UClass* AssetClass)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("GSE_EditorFuncLib", "IsClassPlaceable");

	Params::GSE_EditorFuncLib_IsClassPlaceable Parms{};

	Parms.AssetClass = AssetClass;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function UnrealExtent.GSE_EditorFuncLib.SetActorEditorOnly
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// class AActor*                           Actor                                                  (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    NewEnable                                              (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UGSE_EditorFuncLib::SetActorEditorOnly(class AActor* Actor, bool NewEnable)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("GSE_EditorFuncLib", "SetActorEditorOnly");

	Params::GSE_EditorFuncLib_SetActorEditorOnly Parms{};

	Parms.Actor = Actor;
	Parms.NewEnable = NewEnable;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function UnrealExtent.GSE_EditorFuncLib.SetActorLevelBoundsRelevant
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// class AActor*                           InActor                                                (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    bRelevant                                              (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UGSE_EditorFuncLib::SetActorLevelBoundsRelevant(class AActor* InActor, bool bRelevant)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("GSE_EditorFuncLib", "SetActorLevelBoundsRelevant");

	Params::GSE_EditorFuncLib_SetActorLevelBoundsRelevant Parms{};

	Parms.InActor = InActor;
	Parms.bRelevant = bRelevant;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function UnrealExtent.GSE_EngineFuncLib.AdjustPSOPrecompileBatch
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// int32                                   BatchSize                                              (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   BatchTime                                              (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UGSE_EngineFuncLib::AdjustPSOPrecompileBatch(int32 BatchSize, float BatchTime)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("GSE_EngineFuncLib", "AdjustPSOPrecompileBatch");

	Params::GSE_EngineFuncLib_AdjustPSOPrecompileBatch Parms{};

	Parms.BatchSize = BatchSize;
	Parms.BatchTime = BatchTime;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function UnrealExtent.GSE_EngineFuncLib.AsyncDownloadImage
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// class FString                           URL                                                    (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class UAsyncTaskDownloadImage*          ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class UAsyncTaskDownloadImage* UGSE_EngineFuncLib::AsyncDownloadImage(const class FString& URL)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("GSE_EngineFuncLib", "AsyncDownloadImage");

	Params::GSE_EngineFuncLib_AsyncDownloadImage Parms{};

	Parms.URL = std::move(URL);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function UnrealExtent.GSE_EngineFuncLib.BindAudioUtilAndBox
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// class AActor*                           AudioUtilActor                                         (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class UUserWidget*                      AudioBox                                               (Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UGSE_EngineFuncLib::BindAudioUtilAndBox(class AActor* AudioUtilActor, class UUserWidget* AudioBox)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("GSE_EngineFuncLib", "BindAudioUtilAndBox");

	Params::GSE_EngineFuncLib_BindAudioUtilAndBox Parms{};

	Parms.AudioUtilActor = AudioUtilActor;
	Parms.AudioBox = AudioBox;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function UnrealExtent.GSE_EngineFuncLib.BinkMediaPlayerGoTo
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// class UBinkMediaPlayer*                 MediaPlayer                                            (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32                                   TargetFrame                                            (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UGSE_EngineFuncLib::BinkMediaPlayerGoTo(class UBinkMediaPlayer* MediaPlayer, int32 TargetFrame)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("GSE_EngineFuncLib", "BinkMediaPlayerGoTo");

	Params::GSE_EngineFuncLib_BinkMediaPlayerGoTo Parms{};

	Parms.MediaPlayer = MediaPlayer;
	Parms.TargetFrame = TargetFrame;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function UnrealExtent.GSE_EngineFuncLib.BinkMediaPlayerGoToWithProcMs
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// class UBinkMediaPlayer*                 MediaPlayer                                            (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32                                   TargetFrame                                            (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32                                   ProcMS                                                 (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UGSE_EngineFuncLib::BinkMediaPlayerGoToWithProcMs(class UBinkMediaPlayer* MediaPlayer, int32 TargetFrame, int32 ProcMS)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("GSE_EngineFuncLib", "BinkMediaPlayerGoToWithProcMs");

	Params::GSE_EngineFuncLib_BinkMediaPlayerGoToWithProcMs Parms{};

	Parms.MediaPlayer = MediaPlayer;
	Parms.TargetFrame = TargetFrame;
	Parms.ProcMS = ProcMS;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function UnrealExtent.GSE_EngineFuncLib.BinkMediaPlayerTimeSeek
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// class UBinkMediaPlayer*                 MediaPlayer                                            (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// double                                  Time                                                   (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UGSE_EngineFuncLib::BinkMediaPlayerTimeSeek(class UBinkMediaPlayer* MediaPlayer, double Time)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("GSE_EngineFuncLib", "BinkMediaPlayerTimeSeek");

	Params::GSE_EngineFuncLib_BinkMediaPlayerTimeSeek Parms{};

	Parms.MediaPlayer = MediaPlayer;
	Parms.Time = Time;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function UnrealExtent.GSE_EngineFuncLib.BlockTillLevelStreamingCompleted
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// class UObject*                          WorldContextObject                                     (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UGSE_EngineFuncLib::BlockTillLevelStreamingCompleted(const class UObject* WorldContextObject)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("GSE_EngineFuncLib", "BlockTillLevelStreamingCompleted");

	Params::GSE_EngineFuncLib_BlockTillLevelStreamingCompleted Parms{};

	Parms.WorldContextObject = WorldContextObject;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function UnrealExtent.GSE_EngineFuncLib.BlockTillSuspendedLevelsCompleted
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// class UObject*                          WorldContextObject                                     (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UGSE_EngineFuncLib::BlockTillSuspendedLevelsCompleted(const class UObject* WorldContextObject)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("GSE_EngineFuncLib", "BlockTillSuspendedLevelsCompleted");

	Params::GSE_EngineFuncLib_BlockTillSuspendedLevelsCompleted Parms{};

	Parms.WorldContextObject = WorldContextObject;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function UnrealExtent.GSE_EngineFuncLib.CaptureCurrentViewport
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// bool                                    bCapture                                               (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UGSE_EngineFuncLib::CaptureCurrentViewport(bool bCapture)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("GSE_EngineFuncLib", "CaptureCurrentViewport");

	Params::GSE_EngineFuncLib_CaptureCurrentViewport Parms{};

	Parms.bCapture = bCapture;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function UnrealExtent.GSE_EngineFuncLib.ClientSeamlessTravel
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// class APlayerController*                PC                                                     (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class FString                           URL                                                    (ConstParm, Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UGSE_EngineFuncLib::ClientSeamlessTravel(class APlayerController* PC, const class FString& URL)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("GSE_EngineFuncLib", "ClientSeamlessTravel");

	Params::GSE_EngineFuncLib_ClientSeamlessTravel Parms{};

	Parms.PC = PC;
	Parms.URL = std::move(URL);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function UnrealExtent.GSE_EngineFuncLib.CloseNetConnection
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// class UObject*                          WorldContext                                           (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UGSE_EngineFuncLib::CloseNetConnection(class UObject* WorldContext)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("GSE_EngineFuncLib", "CloseNetConnection");

	Params::GSE_EngineFuncLib_CloseNetConnection Parms{};

	Parms.WorldContext = WorldContext;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function UnrealExtent.GSE_EngineFuncLib.ConsoleVarGetInt
// (Final, Native, Static, Public, BlueprintCallable, BlueprintPure)
// Parameters:
// class FString                           Name_0                                                 (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

int32 UGSE_EngineFuncLib::ConsoleVarGetInt(const class FString& Name_0)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("GSE_EngineFuncLib", "ConsoleVarGetInt");

	Params::GSE_EngineFuncLib_ConsoleVarGetInt Parms{};

	Parms.Name_0 = std::move(Name_0);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function UnrealExtent.GSE_EngineFuncLib.ConsoleVariableSetMouseCursor
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// bool                                    MouseCursor                                            (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UGSE_EngineFuncLib::ConsoleVariableSetMouseCursor(bool MouseCursor)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("GSE_EngineFuncLib", "ConsoleVariableSetMouseCursor");

	Params::GSE_EngineFuncLib_ConsoleVariableSetMouseCursor Parms{};

	Parms.MouseCursor = MouseCursor;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function UnrealExtent.GSE_EngineFuncLib.CopyToClipBoard
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// class FString                           InStr                                                  (ConstParm, Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UGSE_EngineFuncLib::CopyToClipBoard(const class FString& InStr)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("GSE_EngineFuncLib", "CopyToClipBoard");

	Params::GSE_EngineFuncLib_CopyToClipBoard Parms{};

	Parms.InStr = std::move(InStr);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function UnrealExtent.GSE_EngineFuncLib.CreateAsset
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// class FString                           Path                                                   (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class FString                           Name_0                                                 (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class UClass*                           CreatedClass                                           (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class UObject*                          ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class UObject* UGSE_EngineFuncLib::CreateAsset(const class FString& Path, const class FString& Name_0, class UClass* CreatedClass)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("GSE_EngineFuncLib", "CreateAsset");

	Params::GSE_EngineFuncLib_CreateAsset Parms{};

	Parms.Path = std::move(Path);
	Parms.Name_0 = std::move(Name_0);
	Parms.CreatedClass = CreatedClass;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function UnrealExtent.GSE_EngineFuncLib.CreateDragDropOperation
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// TSubclassOf<class UDragDropOperation>   OperationClass                                         (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class UDragDropOperation*               ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class UDragDropOperation* UGSE_EngineFuncLib::CreateDragDropOperation(TSubclassOf<class UDragDropOperation> OperationClass)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("GSE_EngineFuncLib", "CreateDragDropOperation");

	Params::GSE_EngineFuncLib_CreateDragDropOperation Parms{};

	Parms.OperationClass = OperationClass;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function UnrealExtent.GSE_EngineFuncLib.CreateNamedNetDriver
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// class UWorld*                           InWorld                                                (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class FName                             NetDriverName                                          (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class FName                             NetDriverDefinition                                    (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UGSE_EngineFuncLib::CreateNamedNetDriver(class UWorld* InWorld, class FName NetDriverName, class FName NetDriverDefinition)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("GSE_EngineFuncLib", "CreateNamedNetDriver");

	Params::GSE_EngineFuncLib_CreateNamedNetDriver Parms{};

	Parms.InWorld = InWorld;
	Parms.NetDriverName = NetDriverName;
	Parms.NetDriverDefinition = NetDriverDefinition;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function UnrealExtent.GSE_EngineFuncLib.CreateReplicationDriver
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// class UNetDriver*                       NetDriver                                              (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class UWorld*                           World                                                  (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class UReplicationDriver*               ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class UReplicationDriver* UGSE_EngineFuncLib::CreateReplicationDriver(class UNetDriver* NetDriver, class UWorld* World)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("GSE_EngineFuncLib", "CreateReplicationDriver");

	Params::GSE_EngineFuncLib_CreateReplicationDriver Parms{};

	Parms.NetDriver = NetDriver;
	Parms.World = World;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function UnrealExtent.GSE_EngineFuncLib.DelayGC
// (Final, Native, Static, Public, BlueprintCallable)

void UGSE_EngineFuncLib::DelayGC()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("GSE_EngineFuncLib", "DelayGC");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function UnrealExtent.GSE_EngineFuncLib.DestroyActor
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// class AActor*                           Actor                                                  (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UGSE_EngineFuncLib::DestroyActor(class AActor* Actor)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("GSE_EngineFuncLib", "DestroyActor");

	Params::GSE_EngineFuncLib_DestroyActor Parms{};

	Parms.Actor = Actor;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function UnrealExtent.GSE_EngineFuncLib.DestroyActorsWithSpecifiedKeyword
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// class UObject*                          InWorldContext                                         (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class FString                           InKeyword                                              (ConstParm, Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UGSE_EngineFuncLib::DestroyActorsWithSpecifiedKeyword(const class UObject* InWorldContext, const class FString& InKeyword)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("GSE_EngineFuncLib", "DestroyActorsWithSpecifiedKeyword");

	Params::GSE_EngineFuncLib_DestroyActorsWithSpecifiedKeyword Parms{};

	Parms.InWorldContext = InWorldContext;
	Parms.InKeyword = std::move(InKeyword);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function UnrealExtent.GSE_EngineFuncLib.DetectDragIfPressed
// (Final, Native, Static, Public, HasOutParams, BlueprintCallable)
// Parameters:
// struct FPointerEvent                    PointerEvent                                           (ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
// class UWidget*                          WidgetDetectingDrag                                    (Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class FName                             KeyName                                                (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FEventReply                      ReturnValue                                            (Parm, OutParm, ReturnParm, NativeAccessSpecifierPublic)

struct FEventReply UGSE_EngineFuncLib::DetectDragIfPressed(const struct FPointerEvent& PointerEvent, class UWidget* WidgetDetectingDrag, const class FName& KeyName)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("GSE_EngineFuncLib", "DetectDragIfPressed");

	Params::GSE_EngineFuncLib_DetectDragIfPressed Parms{};

	Parms.PointerEvent = std::move(PointerEvent);
	Parms.WidgetDetectingDrag = WidgetDetectingDrag;
	Parms.KeyName = KeyName;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function UnrealExtent.GSE_EngineFuncLib.DisableDebugExecBindings
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// class UObject*                          WorldCtx                                               (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    IsDisable                                              (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UGSE_EngineFuncLib::DisableDebugExecBindings(class UObject* WorldCtx, bool IsDisable)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("GSE_EngineFuncLib", "DisableDebugExecBindings");

	Params::GSE_EngineFuncLib_DisableDebugExecBindings Parms{};

	Parms.WorldCtx = WorldCtx;
	Parms.IsDisable = IsDisable;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function UnrealExtent.GSE_EngineFuncLib.DrawDebugCircleArc
// (Final, Native, Static, Public, HasOutParams, HasDefaults, BlueprintCallable)
// Parameters:
// class UObject*                          WorldContextObject                                     (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FVector                          Center                                                 (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   Radius                                                 (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FVector                          Direction                                              (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   AngleWidth                                             (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32                                   NumSegments                                            (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FLinearColor                     LineColor                                              (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   Duration                                               (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   Thickness                                              (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UGSE_EngineFuncLib::DrawDebugCircleArc(const class UObject* WorldContextObject, const struct FVector& Center, float Radius, const struct FVector& Direction, float AngleWidth, int32 NumSegments, const struct FLinearColor& LineColor, float Duration, float Thickness)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("GSE_EngineFuncLib", "DrawDebugCircleArc");

	Params::GSE_EngineFuncLib_DrawDebugCircleArc Parms{};

	Parms.WorldContextObject = WorldContextObject;
	Parms.Center = std::move(Center);
	Parms.Radius = Radius;
	Parms.Direction = std::move(Direction);
	Parms.AngleWidth = AngleWidth;
	Parms.NumSegments = NumSegments;
	Parms.LineColor = std::move(LineColor);
	Parms.Duration = Duration;
	Parms.Thickness = Thickness;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function UnrealExtent.GSE_EngineFuncLib.DuplicateAsset
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// class FString                           AssetName                                              (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class FString                           PackagePath                                            (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class UObject*                          OriginalObject                                         (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class UObject*                          ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class UObject* UGSE_EngineFuncLib::DuplicateAsset(const class FString& AssetName, const class FString& PackagePath, class UObject* OriginalObject)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("GSE_EngineFuncLib", "DuplicateAsset");

	Params::GSE_EngineFuncLib_DuplicateAsset Parms{};

	Parms.AssetName = std::move(AssetName);
	Parms.PackagePath = std::move(PackagePath);
	Parms.OriginalObject = OriginalObject;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function UnrealExtent.GSE_EngineFuncLib.EnableForceStreamdOutLevelGCCheck
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// bool                                    Enable                                                 (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    IgnoreEditor                                           (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UGSE_EngineFuncLib::EnableForceStreamdOutLevelGCCheck(bool Enable, bool IgnoreEditor)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("GSE_EngineFuncLib", "EnableForceStreamdOutLevelGCCheck");

	Params::GSE_EngineFuncLib_EnableForceStreamdOutLevelGCCheck Parms{};

	Parms.Enable = Enable;
	Parms.IgnoreEditor = IgnoreEditor;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function UnrealExtent.GSE_EngineFuncLib.EngineGC
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// bool                                    bFullPurge                                             (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UGSE_EngineFuncLib::EngineGC(bool bFullPurge)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("GSE_EngineFuncLib", "EngineGC");

	Params::GSE_EngineFuncLib_EngineGC Parms{};

	Parms.bFullPurge = bFullPurge;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function UnrealExtent.GSE_EngineFuncLib.ExecCmdOutGLog
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// class FString                           Cmd                                                    (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class UObject*                          WorldCtx                                               (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UGSE_EngineFuncLib::ExecCmdOutGLog(const class FString& Cmd, class UObject* WorldCtx)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("GSE_EngineFuncLib", "ExecCmdOutGLog");

	Params::GSE_EngineFuncLib_ExecCmdOutGLog Parms{};

	Parms.Cmd = std::move(Cmd);
	Parms.WorldCtx = WorldCtx;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function UnrealExtent.GSE_EngineFuncLib.FindAndPrintStaleReferencesToObject
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// class UObject*                          Obj                                                    (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class FString                           ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class FString UGSE_EngineFuncLib::FindAndPrintStaleReferencesToObject(class UObject* Obj)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("GSE_EngineFuncLib", "FindAndPrintStaleReferencesToObject");

	Params::GSE_EngineFuncLib_FindAndPrintStaleReferencesToObject Parms{};

	Parms.Obj = Obj;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function UnrealExtent.GSE_EngineFuncLib.FindAndPrintStaleRefsByObjectPath
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// class FString                           InObjectPath                                           (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class FString                           ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class FString UGSE_EngineFuncLib::FindAndPrintStaleRefsByObjectPath(const class FString& InObjectPath)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("GSE_EngineFuncLib", "FindAndPrintStaleRefsByObjectPath");

	Params::GSE_EngineFuncLib_FindAndPrintStaleRefsByObjectPath Parms{};

	Parms.InObjectPath = std::move(InObjectPath);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function UnrealExtent.GSE_EngineFuncLib.FindNamedNetDriver
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// class UWorld*                           InWorld                                                (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class FName                             NetDriverName                                          (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class UNetDriver*                       ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class UNetDriver* UGSE_EngineFuncLib::FindNamedNetDriver(const class UWorld* InWorld, class FName NetDriverName)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("GSE_EngineFuncLib", "FindNamedNetDriver");

	Params::GSE_EngineFuncLib_FindNamedNetDriver Parms{};

	Parms.InWorld = InWorld;
	Parms.NetDriverName = NetDriverName;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function UnrealExtent.GSE_EngineFuncLib.FindPathSync
// (Final, Native, Static, Public, HasOutParams, HasDefaults, BlueprintCallable)
// Parameters:
// class AController*                      Controller                                             (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FVector                          TargetLocation                                         (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// TArray<struct FVector>                  ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, NativeAccessSpecifierPublic)

TArray<struct FVector> UGSE_EngineFuncLib::FindPathSync(class AController* Controller, const struct FVector& TargetLocation)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("GSE_EngineFuncLib", "FindPathSync");

	Params::GSE_EngineFuncLib_FindPathSync Parms{};

	Parms.Controller = Controller;
	Parms.TargetLocation = std::move(TargetLocation);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function UnrealExtent.GSE_EngineFuncLib.FlushMainAudioDevice
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// int32                                   DeviceID                                               (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UGSE_EngineFuncLib::FlushMainAudioDevice(const int32 DeviceID)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("GSE_EngineFuncLib", "FlushMainAudioDevice");

	Params::GSE_EngineFuncLib_FlushMainAudioDevice Parms{};

	Parms.DeviceID = DeviceID;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function UnrealExtent.GSE_EngineFuncLib.GameInstanceIsDedicatedServer
// (Final, Native, Static, Public, BlueprintCallable, BlueprintPure)
// Parameters:
// class UGameInstance*                    GameInst                                               (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UGSE_EngineFuncLib::GameInstanceIsDedicatedServer(const class UGameInstance* GameInst)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("GSE_EngineFuncLib", "GameInstanceIsDedicatedServer");

	Params::GSE_EngineFuncLib_GameInstanceIsDedicatedServer Parms{};

	Parms.GameInst = GameInst;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function UnrealExtent.GSE_EngineFuncLib.GetActionMappings
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// class APlayerController*                PlayerController                                       (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// TArray<struct FInputActionKeyMapping>   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, NativeAccessSpecifierPublic)

TArray<struct FInputActionKeyMapping> UGSE_EngineFuncLib::GetActionMappings(class APlayerController* PlayerController)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("GSE_EngineFuncLib", "GetActionMappings");

	Params::GSE_EngineFuncLib_GetActionMappings Parms{};

	Parms.PlayerController = PlayerController;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function UnrealExtent.GSE_EngineFuncLib.GetActualQualityLevel
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// bool                                    bLogInfo                                               (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// EGSQualityLevel                         ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

EGSQualityLevel UGSE_EngineFuncLib::GetActualQualityLevel(bool bLogInfo)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("GSE_EngineFuncLib", "GetActualQualityLevel");

	Params::GSE_EngineFuncLib_GetActualQualityLevel Parms{};

	Parms.bLogInfo = bLogInfo;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function UnrealExtent.GSE_EngineFuncLib.GetAnalogInputKey
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// struct FAnalogInputEvent                AnalogInputEvent                                       (ConstParm, Parm, NativeAccessSpecifierPublic)
// const struct FKey                       ReturnValue                                            (ConstParm, Parm, OutParm, ReturnParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)

const struct FKey UGSE_EngineFuncLib::GetAnalogInputKey(const struct FAnalogInputEvent& AnalogInputEvent)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("GSE_EngineFuncLib", "GetAnalogInputKey");

	Params::GSE_EngineFuncLib_GetAnalogInputKey Parms{};

	Parms.AnalogInputEvent = std::move(AnalogInputEvent);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function UnrealExtent.GSE_EngineFuncLib.GetAnalogValue
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// struct FAnalogInputEvent                AnalogInputEvent                                       (ConstParm, Parm, NativeAccessSpecifierPublic)
// float                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

float UGSE_EngineFuncLib::GetAnalogValue(const struct FAnalogInputEvent& AnalogInputEvent)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("GSE_EngineFuncLib", "GetAnalogValue");

	Params::GSE_EngineFuncLib_GetAnalogValue Parms{};

	Parms.AnalogInputEvent = std::move(AnalogInputEvent);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function UnrealExtent.GSE_EngineFuncLib.GetAsyncLoadPercentage
// (Final, Native, Static, Public, HasOutParams, BlueprintCallable, BlueprintPure)
// Parameters:
// class FName                             PackageName                                            (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

float UGSE_EngineFuncLib::GetAsyncLoadPercentage(const class FName& PackageName)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("GSE_EngineFuncLib", "GetAsyncLoadPercentage");

	Params::GSE_EngineFuncLib_GetAsyncLoadPercentage Parms{};

	Parms.PackageName = PackageName;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function UnrealExtent.GSE_EngineFuncLib.GetAudioInfoOfAudioVisualize
// (Final, Native, Static, Public, HasOutParams, BlueprintCallable)
// Parameters:
// class AActor*                           AudioUtilActor                                         (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   AudioDuration                                          (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class UAudioComponent*                  ReturnValue                                            (ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class UAudioComponent* UGSE_EngineFuncLib::GetAudioInfoOfAudioVisualize(class AActor* AudioUtilActor, float* AudioDuration)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("GSE_EngineFuncLib", "GetAudioInfoOfAudioVisualize");

	Params::GSE_EngineFuncLib_GetAudioInfoOfAudioVisualize Parms{};

	Parms.AudioUtilActor = AudioUtilActor;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	if (AudioDuration != nullptr)
		*AudioDuration = Parms.AudioDuration;

	return Parms.ReturnValue;
}


// Function UnrealExtent.GSE_EngineFuncLib.GetAvailablePhysical
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// float                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

float UGSE_EngineFuncLib::GetAvailablePhysical()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("GSE_EngineFuncLib", "GetAvailablePhysical");

	Params::GSE_EngineFuncLib_GetAvailablePhysical Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function UnrealExtent.GSE_EngineFuncLib.GetAxisMappings
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// class APlayerController*                PlayerController                                       (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// TArray<struct FInputAxisKeyMapping>     ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, NativeAccessSpecifierPublic)

TArray<struct FInputAxisKeyMapping> UGSE_EngineFuncLib::GetAxisMappings(class APlayerController* PlayerController)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("GSE_EngineFuncLib", "GetAxisMappings");

	Params::GSE_EngineFuncLib_GetAxisMappings Parms{};

	Parms.PlayerController = PlayerController;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function UnrealExtent.GSE_EngineFuncLib.GetBinkMediaPlayerCurFrame
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// class UBinkMediaPlayer*                 MediaPlayer                                            (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

int32 UGSE_EngineFuncLib::GetBinkMediaPlayerCurFrame(const class UBinkMediaPlayer* MediaPlayer)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("GSE_EngineFuncLib", "GetBinkMediaPlayerCurFrame");

	Params::GSE_EngineFuncLib_GetBinkMediaPlayerCurFrame Parms{};

	Parms.MediaPlayer = MediaPlayer;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function UnrealExtent.GSE_EngineFuncLib.GetBinkMediaPlayerDuartion
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// class UBinkMediaPlayer*                 MediaPlayer                                            (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// double                                  ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

double UGSE_EngineFuncLib::GetBinkMediaPlayerDuartion(const class UBinkMediaPlayer* MediaPlayer)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("GSE_EngineFuncLib", "GetBinkMediaPlayerDuartion");

	Params::GSE_EngineFuncLib_GetBinkMediaPlayerDuartion Parms{};

	Parms.MediaPlayer = MediaPlayer;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function UnrealExtent.GSE_EngineFuncLib.GetBinkMediaPlayerFrameRate
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// class UBinkMediaPlayer*                 MediaPlayer                                            (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

float UGSE_EngineFuncLib::GetBinkMediaPlayerFrameRate(const class UBinkMediaPlayer* MediaPlayer)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("GSE_EngineFuncLib", "GetBinkMediaPlayerFrameRate");

	Params::GSE_EngineFuncLib_GetBinkMediaPlayerFrameRate Parms{};

	Parms.MediaPlayer = MediaPlayer;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function UnrealExtent.GSE_EngineFuncLib.GetBinkMediaPlayerTime
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// class UBinkMediaPlayer*                 MediaPlayer                                            (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// double                                  ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

double UGSE_EngineFuncLib::GetBinkMediaPlayerTime(const class UBinkMediaPlayer* MediaPlayer)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("GSE_EngineFuncLib", "GetBinkMediaPlayerTime");

	Params::GSE_EngineFuncLib_GetBinkMediaPlayerTime Parms{};

	Parms.MediaPlayer = MediaPlayer;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function UnrealExtent.GSE_EngineFuncLib.GetBinkMediaPlayerTotalFrames
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// class UBinkMediaPlayer*                 MediaPlayer                                            (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

int32 UGSE_EngineFuncLib::GetBinkMediaPlayerTotalFrames(const class UBinkMediaPlayer* MediaPlayer)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("GSE_EngineFuncLib", "GetBinkMediaPlayerTotalFrames");

	Params::GSE_EngineFuncLib_GetBinkMediaPlayerTotalFrames Parms{};

	Parms.MediaPlayer = MediaPlayer;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function UnrealExtent.GSE_EngineFuncLib.GetChildActors
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// class AActor*                           Actor                                                  (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// TArray<class AActor*>                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, NativeAccessSpecifierPublic)

TArray<class AActor*> UGSE_EngineFuncLib::GetChildActors(class AActor* Actor)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("GSE_EngineFuncLib", "GetChildActors");

	Params::GSE_EngineFuncLib_GetChildActors Parms{};

	Parms.Actor = Actor;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function UnrealExtent.GSE_EngineFuncLib.GetCurrentRhiName
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// class FString                           ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class FString UGSE_EngineFuncLib::GetCurrentRhiName()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("GSE_EngineFuncLib", "GetCurrentRhiName");

	Params::GSE_EngineFuncLib_GetCurrentRhiName Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function UnrealExtent.GSE_EngineFuncLib.GetDefaultLanguageCS
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// class FString                           ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class FString UGSE_EngineFuncLib::GetDefaultLanguageCS()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("GSE_EngineFuncLib", "GetDefaultLanguageCS");

	Params::GSE_EngineFuncLib_GetDefaultLanguageCS Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function UnrealExtent.GSE_EngineFuncLib.GetDeviceId
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// class FString                           ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class FString UGSE_EngineFuncLib::GetDeviceId()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("GSE_EngineFuncLib", "GetDeviceId");

	Params::GSE_EngineFuncLib_GetDeviceId Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function UnrealExtent.GSE_EngineFuncLib.GetDeviceInfo
// (Final, Native, Static, Public, HasOutParams, BlueprintCallable)
// Parameters:
// class FString                           Cpu                                                    (Parm, OutParm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class FString                           Gpu                                                    (Parm, OutParm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32                                   MemSize                                                (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UGSE_EngineFuncLib::GetDeviceInfo(class FString* Cpu, class FString* Gpu, int32* MemSize)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("GSE_EngineFuncLib", "GetDeviceInfo");

	Params::GSE_EngineFuncLib_GetDeviceInfo Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	if (Cpu != nullptr)
		*Cpu = std::move(Parms.Cpu);

	if (Gpu != nullptr)
		*Gpu = std::move(Parms.Gpu);

	if (MemSize != nullptr)
		*MemSize = Parms.MemSize;
}


// Function UnrealExtent.GSE_EngineFuncLib.GetDisplayGamma
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// class UObject*                          WorldCtx                                               (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

float UGSE_EngineFuncLib::GetDisplayGamma(const class UObject* WorldCtx)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("GSE_EngineFuncLib", "GetDisplayGamma");

	Params::GSE_EngineFuncLib_GetDisplayGamma Parms{};

	Parms.WorldCtx = WorldCtx;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function UnrealExtent.GSE_EngineFuncLib.GetDisplayName
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// class UObject*                          Object                                                 (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class FString                           ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class FString UGSE_EngineFuncLib::GetDisplayName(const class UObject* Object)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("GSE_EngineFuncLib", "GetDisplayName");

	Params::GSE_EngineFuncLib_GetDisplayName Parms{};

	Parms.Object = Object;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function UnrealExtent.GSE_EngineFuncLib.GetEngineMinorVersion
// (Final, Native, Static, Public, BlueprintCallable, BlueprintPure)
// Parameters:
// int32                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

int32 UGSE_EngineFuncLib::GetEngineMinorVersion()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("GSE_EngineFuncLib", "GetEngineMinorVersion");

	Params::GSE_EngineFuncLib_GetEngineMinorVersion Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function UnrealExtent.GSE_EngineFuncLib.GetFirstLocalPlayerController
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// class UObject*                          WorldCtx                                               (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class APlayerController*                ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class APlayerController* UGSE_EngineFuncLib::GetFirstLocalPlayerController(class UObject* WorldCtx)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("GSE_EngineFuncLib", "GetFirstLocalPlayerController");

	Params::GSE_EngineFuncLib_GetFirstLocalPlayerController Parms{};

	Parms.WorldCtx = WorldCtx;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function UnrealExtent.GSE_EngineFuncLib.GetGFrameCounter
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// int64                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

int64 UGSE_EngineFuncLib::GetGFrameCounter()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("GSE_EngineFuncLib", "GetGFrameCounter");

	Params::GSE_EngineFuncLib_GetGFrameCounter Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function UnrealExtent.GSE_EngineFuncLib.GetInputDeadZone
// (Final, Native, Static, Public, HasOutParams, BlueprintCallable)
// Parameters:
// class APlayerController*                PlayerController                                       (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class FName                             AxisName                                               (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

float UGSE_EngineFuncLib::GetInputDeadZone(class APlayerController* PlayerController, const class FName& AxisName)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("GSE_EngineFuncLib", "GetInputDeadZone");

	Params::GSE_EngineFuncLib_GetInputDeadZone Parms{};

	Parms.PlayerController = PlayerController;
	Parms.AxisName = AxisName;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function UnrealExtent.GSE_EngineFuncLib.GetInputKey
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// struct FKeyEvent                        KeyEvent                                               (ConstParm, Parm, NativeAccessSpecifierPublic)
// const struct FKey                       ReturnValue                                            (ConstParm, Parm, OutParm, ReturnParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)

const struct FKey UGSE_EngineFuncLib::GetInputKey(const struct FKeyEvent& KeyEvent)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("GSE_EngineFuncLib", "GetInputKey");

	Params::GSE_EngineFuncLib_GetInputKey Parms{};

	Parms.KeyEvent = std::move(KeyEvent);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function UnrealExtent.GSE_EngineFuncLib.GetLaunchValue
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// class FString                           Option                                                 (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class FString                           ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class FString UGSE_EngineFuncLib::GetLaunchValue(const class FString& Option)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("GSE_EngineFuncLib", "GetLaunchValue");

	Params::GSE_EngineFuncLib_GetLaunchValue Parms{};

	Parms.Option = std::move(Option);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function UnrealExtent.GSE_EngineFuncLib.GetLocalPlayerCameraManager
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// class UObject*                          WorldCtx                                               (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class APlayerCameraManager*             ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class APlayerCameraManager* UGSE_EngineFuncLib::GetLocalPlayerCameraManager(class UObject* WorldCtx)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("GSE_EngineFuncLib", "GetLocalPlayerCameraManager");

	Params::GSE_EngineFuncLib_GetLocalPlayerCameraManager Parms{};

	Parms.WorldCtx = WorldCtx;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function UnrealExtent.GSE_EngineFuncLib.GetLoginId
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// class FString                           ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class FString UGSE_EngineFuncLib::GetLoginId()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("GSE_EngineFuncLib", "GetLoginId");

	Params::GSE_EngineFuncLib_GetLoginId Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function UnrealExtent.GSE_EngineFuncLib.GetMacAddress
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// TArray<uint8>                           ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, NativeAccessSpecifierPublic)

TArray<uint8> UGSE_EngineFuncLib::GetMacAddress()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("GSE_EngineFuncLib", "GetMacAddress");

	Params::GSE_EngineFuncLib_GetMacAddress Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function UnrealExtent.GSE_EngineFuncLib.GetMediaPlayerDuartion
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// class UMediaPlayer*                     MediaPlayer                                            (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// double                                  ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

double UGSE_EngineFuncLib::GetMediaPlayerDuartion(const class UMediaPlayer* MediaPlayer)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("GSE_EngineFuncLib", "GetMediaPlayerDuartion");

	Params::GSE_EngineFuncLib_GetMediaPlayerDuartion Parms{};

	Parms.MediaPlayer = MediaPlayer;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function UnrealExtent.GSE_EngineFuncLib.GetMediaPlayerTime
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// class UMediaPlayer*                     MediaPlayer                                            (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// double                                  ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

double UGSE_EngineFuncLib::GetMediaPlayerTime(const class UMediaPlayer* MediaPlayer)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("GSE_EngineFuncLib", "GetMediaPlayerTime");

	Params::GSE_EngineFuncLib_GetMediaPlayerTime Parms{};

	Parms.MediaPlayer = MediaPlayer;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function UnrealExtent.GSE_EngineFuncLib.GetPawnAutoPossessConfig
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// class APawn*                            PC                                                     (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

int32 UGSE_EngineFuncLib::GetPawnAutoPossessConfig(class APawn* PC)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("GSE_EngineFuncLib", "GetPawnAutoPossessConfig");

	Params::GSE_EngineFuncLib_GetPawnAutoPossessConfig Parms{};

	Parms.PC = PC;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function UnrealExtent.GSE_EngineFuncLib.GetPlatformTime
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// double                                  ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

double UGSE_EngineFuncLib::GetPlatformTime()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("GSE_EngineFuncLib", "GetPlatformTime");

	Params::GSE_EngineFuncLib_GetPlatformTime Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function UnrealExtent.GSE_EngineFuncLib.GetPlayerViewProjectionMatrix
// (Final, Native, Static, Public, HasDefaults, BlueprintCallable)
// Parameters:
// class APlayerController*                Player                                                 (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FMatrix                          ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)

struct FMatrix UGSE_EngineFuncLib::GetPlayerViewProjectionMatrix(class APlayerController* Player)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("GSE_EngineFuncLib", "GetPlayerViewProjectionMatrix");

	Params::GSE_EngineFuncLib_GetPlayerViewProjectionMatrix Parms{};

	Parms.Player = Player;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function UnrealExtent.GSE_EngineFuncLib.GetPlayerViewProjectionMatrixInv
// (Final, Native, Static, Public, HasDefaults, BlueprintCallable)
// Parameters:
// class APlayerController*                Player                                                 (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FMatrix                          ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)

struct FMatrix UGSE_EngineFuncLib::GetPlayerViewProjectionMatrixInv(class APlayerController* Player)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("GSE_EngineFuncLib", "GetPlayerViewProjectionMatrixInv");

	Params::GSE_EngineFuncLib_GetPlayerViewProjectionMatrixInv Parms{};

	Parms.Player = Player;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function UnrealExtent.GSE_EngineFuncLib.GetPlayerViewRect
// (Final, Native, Static, Public, HasOutParams, HasDefaults, BlueprintCallable)
// Parameters:
// class APlayerController*                Player                                                 (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FVector2D                        OutConstrainedViewRectMin                              (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FVector2D                        OutConstrainedViewRectMax                              (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FVector2D                        OutViewRectMin                                         (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FVector2D                        OutViewRectMax                                         (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UGSE_EngineFuncLib::GetPlayerViewRect(class APlayerController* Player, struct FVector2D* OutConstrainedViewRectMin, struct FVector2D* OutConstrainedViewRectMax, struct FVector2D* OutViewRectMin, struct FVector2D* OutViewRectMax)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("GSE_EngineFuncLib", "GetPlayerViewRect");

	Params::GSE_EngineFuncLib_GetPlayerViewRect Parms{};

	Parms.Player = Player;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	if (OutConstrainedViewRectMin != nullptr)
		*OutConstrainedViewRectMin = std::move(Parms.OutConstrainedViewRectMin);

	if (OutConstrainedViewRectMax != nullptr)
		*OutConstrainedViewRectMax = std::move(Parms.OutConstrainedViewRectMax);

	if (OutViewRectMin != nullptr)
		*OutViewRectMin = std::move(Parms.OutViewRectMin);

	if (OutViewRectMax != nullptr)
		*OutViewRectMax = std::move(Parms.OutViewRectMax);
}


// Function UnrealExtent.GSE_EngineFuncLib.GetPlayerViewRectMatrixInfo
// (Final, Native, Static, Public, HasOutParams, HasDefaults, BlueprintCallable)
// Parameters:
// class APlayerController*                Player                                                 (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FMatrix                          ViewProjectionMatrixInv                                (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
// struct FVector2D                        OutConstrainedViewRectMin                              (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FVector2D                        OutConstrainedViewRectMax                              (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FVector2D                        OutViewRectMin                                         (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FVector2D                        OutViewRectMax                                         (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UGSE_EngineFuncLib::GetPlayerViewRectMatrixInfo(class APlayerController* Player, struct FMatrix* ViewProjectionMatrixInv, struct FVector2D* OutConstrainedViewRectMin, struct FVector2D* OutConstrainedViewRectMax, struct FVector2D* OutViewRectMin, struct FVector2D* OutViewRectMax)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("GSE_EngineFuncLib", "GetPlayerViewRectMatrixInfo");

	Params::GSE_EngineFuncLib_GetPlayerViewRectMatrixInfo Parms{};

	Parms.Player = Player;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	if (ViewProjectionMatrixInv != nullptr)
		*ViewProjectionMatrixInv = std::move(Parms.ViewProjectionMatrixInv);

	if (OutConstrainedViewRectMin != nullptr)
		*OutConstrainedViewRectMin = std::move(Parms.OutConstrainedViewRectMin);

	if (OutConstrainedViewRectMax != nullptr)
		*OutConstrainedViewRectMax = std::move(Parms.OutConstrainedViewRectMax);

	if (OutViewRectMin != nullptr)
		*OutViewRectMin = std::move(Parms.OutViewRectMin);

	if (OutViewRectMax != nullptr)
		*OutViewRectMax = std::move(Parms.OutViewRectMax);
}


// Function UnrealExtent.GSE_EngineFuncLib.GetProjectDir
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// class FString                           ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class FString UGSE_EngineFuncLib::GetProjectDir()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("GSE_EngineFuncLib", "GetProjectDir");

	Params::GSE_EngineFuncLib_GetProjectDir Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function UnrealExtent.GSE_EngineFuncLib.GetProjectSettingDefaultGameMode
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// TSubclassOf<class AGameModeBase>        ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)

TSubclassOf<class AGameModeBase> UGSE_EngineFuncLib::GetProjectSettingDefaultGameMode()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("GSE_EngineFuncLib", "GetProjectSettingDefaultGameMode");

	Params::GSE_EngineFuncLib_GetProjectSettingDefaultGameMode Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function UnrealExtent.GSE_EngineFuncLib.GetRecommendedQualityLevel
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// bool                                    bLogInfo                                               (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// EGSQualityLevel                         ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

EGSQualityLevel UGSE_EngineFuncLib::GetRecommendedQualityLevel(bool bLogInfo)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("GSE_EngineFuncLib", "GetRecommendedQualityLevel");

	Params::GSE_EngineFuncLib_GetRecommendedQualityLevel Parms{};

	Parms.bLogInfo = bLogInfo;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function UnrealExtent.GSE_EngineFuncLib.GetRegexMatchInfo
// (Final, Native, Static, Public, HasOutParams, BlueprintCallable)
// Parameters:
// class FString                           InStr                                                  (ConstParm, Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class FString                           RegexExpression                                        (ConstParm, Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// TArray<class FString>                   ExtractedInfo                                          (Parm, OutParm, ZeroConstructor, NativeAccessSpecifierPublic)

void UGSE_EngineFuncLib::GetRegexMatchInfo(const class FString& InStr, const class FString& RegexExpression, TArray<class FString>* ExtractedInfo)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("GSE_EngineFuncLib", "GetRegexMatchInfo");

	Params::GSE_EngineFuncLib_GetRegexMatchInfo Parms{};

	Parms.InStr = std::move(InStr);
	Parms.RegexExpression = std::move(RegexExpression);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	if (ExtractedInfo != nullptr)
		*ExtractedInfo = std::move(Parms.ExtractedInfo);
}


// Function UnrealExtent.GSE_EngineFuncLib.GetRemainingPsoPrecompileNum
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// int32                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

int32 UGSE_EngineFuncLib::GetRemainingPsoPrecompileNum()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("GSE_EngineFuncLib", "GetRemainingPsoPrecompileNum");

	Params::GSE_EngineFuncLib_GetRemainingPsoPrecompileNum Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function UnrealExtent.GSE_EngineFuncLib.GetShadowQualityLevel
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// int32                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

int32 UGSE_EngineFuncLib::GetShadowQualityLevel()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("GSE_EngineFuncLib", "GetShadowQualityLevel");

	Params::GSE_EngineFuncLib_GetShadowQualityLevel Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function UnrealExtent.GSE_EngineFuncLib.GetTimeSpanFromSeconds
// (Final, Native, Static, Public, HasDefaults, BlueprintCallable)
// Parameters:
// double                                  Seconds                                                (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FTimespan                        ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

struct FTimespan UGSE_EngineFuncLib::GetTimeSpanFromSeconds(double Seconds)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("GSE_EngineFuncLib", "GetTimeSpanFromSeconds");

	Params::GSE_EngineFuncLib_GetTimeSpanFromSeconds Parms{};

	Parms.Seconds = Seconds;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function UnrealExtent.GSE_EngineFuncLib.GetTotalPsoPrecompileNum
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// int32                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

int32 UGSE_EngineFuncLib::GetTotalPsoPrecompileNum()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("GSE_EngineFuncLib", "GetTotalPsoPrecompileNum");

	Params::GSE_EngineFuncLib_GetTotalPsoPrecompileNum Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function UnrealExtent.GSE_EngineFuncLib.GetTransientPackage
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// class UPackage*                         ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class UPackage* UGSE_EngineFuncLib::GetTransientPackage()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("GSE_EngineFuncLib", "GetTransientPackage");

	Params::GSE_EngineFuncLib_GetTransientPackage Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function UnrealExtent.GSE_EngineFuncLib.GetWarningPhysicsAssetList
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// class UObject*                          WorldContext                                           (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class FString                           TraverseRootPath                                       (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// TArray<class FString>                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, NativeAccessSpecifierPublic)

TArray<class FString> UGSE_EngineFuncLib::GetWarningPhysicsAssetList(class UObject* WorldContext, const class FString& TraverseRootPath)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("GSE_EngineFuncLib", "GetWarningPhysicsAssetList");

	Params::GSE_EngineFuncLib_GetWarningPhysicsAssetList Parms{};

	Parms.WorldContext = WorldContext;
	Parms.TraverseRootPath = std::move(TraverseRootPath);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function UnrealExtent.GSE_EngineFuncLib.GetWarningUITexList
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// class UObject*                          WorldContext                                           (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class FString                           TraverseRootPath                                       (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class FString                           SourceFileCommPath                                     (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// TArray<class FString>                   ExcludedPathList                                       (Parm, ZeroConstructor, NativeAccessSpecifierPublic)
// TArray<class FString>                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, NativeAccessSpecifierPublic)

TArray<class FString> UGSE_EngineFuncLib::GetWarningUITexList(class UObject* WorldContext, const class FString& TraverseRootPath, const class FString& SourceFileCommPath, const TArray<class FString>& ExcludedPathList)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("GSE_EngineFuncLib", "GetWarningUITexList");

	Params::GSE_EngineFuncLib_GetWarningUITexList Parms{};

	Parms.WorldContext = WorldContext;
	Parms.TraverseRootPath = std::move(TraverseRootPath);
	Parms.SourceFileCommPath = std::move(SourceFileCommPath);
	Parms.ExcludedPathList = std::move(ExcludedPathList);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function UnrealExtent.GSE_EngineFuncLib.GetWindowScreenResolution
// (Final, Native, Static, Public, HasDefaults, BlueprintCallable)
// Parameters:
// struct FVector2D                        ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

struct FVector2D UGSE_EngineFuncLib::GetWindowScreenResolution()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("GSE_EngineFuncLib", "GetWindowScreenResolution");

	Params::GSE_EngineFuncLib_GetWindowScreenResolution Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function UnrealExtent.GSE_EngineFuncLib.GetWorldFromObj
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// class UObject*                          Context                                                (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class UWorld*                           ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class UWorld* UGSE_EngineFuncLib::GetWorldFromObj(class UObject* Context)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("GSE_EngineFuncLib", "GetWorldFromObj");

	Params::GSE_EngineFuncLib_GetWorldFromObj Parms{};

	Parms.Context = Context;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function UnrealExtent.GSE_EngineFuncLib.GetWorldMainAudioDeviceID
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// class UObject*                          WorldContextObject                                     (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

int32 UGSE_EngineFuncLib::GetWorldMainAudioDeviceID(const class UObject* WorldContextObject)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("GSE_EngineFuncLib", "GetWorldMainAudioDeviceID");

	Params::GSE_EngineFuncLib_GetWorldMainAudioDeviceID Parms{};

	Parms.WorldContextObject = WorldContextObject;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function UnrealExtent.GSE_EngineFuncLib.GSSaveConfig
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// class UObject*                          WorldContext                                           (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UGSE_EngineFuncLib::GSSaveConfig(class UObject* WorldContext)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("GSE_EngineFuncLib", "GSSaveConfig");

	Params::GSE_EngineFuncLib_GSSaveConfig Parms{};

	Parms.WorldContext = WorldContext;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function UnrealExtent.GSE_EngineFuncLib.HasLaunchOption
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// class FString                           Option                                                 (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UGSE_EngineFuncLib::HasLaunchOption(const class FString& Option)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("GSE_EngineFuncLib", "HasLaunchOption");

	Params::GSE_EngineFuncLib_HasLaunchOption Parms{};

	Parms.Option = std::move(Option);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function UnrealExtent.GSE_EngineFuncLib.HasValidCaptureData
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// class UReflectionCaptureComponent*      Component                                              (Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UGSE_EngineFuncLib::HasValidCaptureData(class UReflectionCaptureComponent* Component)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("GSE_EngineFuncLib", "HasValidCaptureData");

	Params::GSE_EngineFuncLib_HasValidCaptureData Parms{};

	Parms.Component = Component;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function UnrealExtent.GSE_EngineFuncLib.IsClient
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// class UWorld*                           World                                                  (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UGSE_EngineFuncLib::IsClient(class UWorld* World)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("GSE_EngineFuncLib", "IsClient");

	Params::GSE_EngineFuncLib_IsClient Parms{};

	Parms.World = World;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function UnrealExtent.GSE_EngineFuncLib.IsCommandLineHasParam
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// class FString                           QueryParam                                             (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UGSE_EngineFuncLib::IsCommandLineHasParam(const class FString& QueryParam)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("GSE_EngineFuncLib", "IsCommandLineHasParam");

	Params::GSE_EngineFuncLib_IsCommandLineHasParam Parms{};

	Parms.QueryParam = std::move(QueryParam);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function UnrealExtent.GSE_EngineFuncLib.IsControllerInPlayState
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// class AController*                      Controller                                             (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UGSE_EngineFuncLib::IsControllerInPlayState(class AController* Controller)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("GSE_EngineFuncLib", "IsControllerInPlayState");

	Params::GSE_EngineFuncLib_IsControllerInPlayState Parms{};

	Parms.Controller = Controller;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function UnrealExtent.GSE_EngineFuncLib.IsDedicateServer
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// class UWorld*                           World                                                  (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UGSE_EngineFuncLib::IsDedicateServer(class UWorld* World)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("GSE_EngineFuncLib", "IsDedicateServer");

	Params::GSE_EngineFuncLib_IsDedicateServer Parms{};

	Parms.World = World;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function UnrealExtent.GSE_EngineFuncLib.IsDevelopmentBuild
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UGSE_EngineFuncLib::IsDevelopmentBuild()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("GSE_EngineFuncLib", "IsDevelopmentBuild");

	Params::GSE_EngineFuncLib_IsDevelopmentBuild Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function UnrealExtent.GSE_EngineFuncLib.IsDriverVersionMismatch
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UGSE_EngineFuncLib::IsDriverVersionMismatch()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("GSE_EngineFuncLib", "IsDriverVersionMismatch");

	Params::GSE_EngineFuncLib_IsDriverVersionMismatch Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function UnrealExtent.GSE_EngineFuncLib.IsEditor
// (Final, Native, Static, Public, BlueprintCallable, BlueprintPure)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UGSE_EngineFuncLib::IsEditor()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("GSE_EngineFuncLib", "IsEditor");

	Params::GSE_EngineFuncLib_IsEditor Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function UnrealExtent.GSE_EngineFuncLib.IsListenServer
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// class UWorld*                           World                                                  (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UGSE_EngineFuncLib::IsListenServer(class UWorld* World)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("GSE_EngineFuncLib", "IsListenServer");

	Params::GSE_EngineFuncLib_IsListenServer Parms{};

	Parms.World = World;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function UnrealExtent.GSE_EngineFuncLib.IsPSOBatchingPaused
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UGSE_EngineFuncLib::IsPSOBatchingPaused()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("GSE_EngineFuncLib", "IsPSOBatchingPaused");

	Params::GSE_EngineFuncLib_IsPSOBatchingPaused Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function UnrealExtent.GSE_EngineFuncLib.IsRegexMatched
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// class FString                           InStr                                                  (ConstParm, Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class FString                           RegexExpression                                        (ConstParm, Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UGSE_EngineFuncLib::IsRegexMatched(const class FString& InStr, const class FString& RegexExpression)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("GSE_EngineFuncLib", "IsRegexMatched");

	Params::GSE_EngineFuncLib_IsRegexMatched Parms{};

	Parms.InStr = std::move(InStr);
	Parms.RegexExpression = std::move(RegexExpression);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function UnrealExtent.GSE_EngineFuncLib.IsSavePSOCacheInErrorState
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UGSE_EngineFuncLib::IsSavePSOCacheInErrorState()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("GSE_EngineFuncLib", "IsSavePSOCacheInErrorState");

	Params::GSE_EngineFuncLib_IsSavePSOCacheInErrorState Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function UnrealExtent.GSE_EngineFuncLib.IsShippingBuild
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UGSE_EngineFuncLib::IsShippingBuild()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("GSE_EngineFuncLib", "IsShippingBuild");

	Params::GSE_EngineFuncLib_IsShippingBuild Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function UnrealExtent.GSE_EngineFuncLib.IsStandAlone
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// class UWorld*                           World                                                  (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UGSE_EngineFuncLib::IsStandAlone(class UWorld* World)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("GSE_EngineFuncLib", "IsStandAlone");

	Params::GSE_EngineFuncLib_IsStandAlone Parms{};

	Parms.World = World;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function UnrealExtent.GSE_EngineFuncLib.IsStandaloneGame
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UGSE_EngineFuncLib::IsStandaloneGame()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("GSE_EngineFuncLib", "IsStandaloneGame");

	Params::GSE_EngineFuncLib_IsStandaloneGame Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function UnrealExtent.GSE_EngineFuncLib.IsTestBuild
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UGSE_EngineFuncLib::IsTestBuild()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("GSE_EngineFuncLib", "IsTestBuild");

	Params::GSE_EngineFuncLib_IsTestBuild Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function UnrealExtent.GSE_EngineFuncLib.IsUnloadPSOFinished
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UGSE_EngineFuncLib::IsUnloadPSOFinished()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("GSE_EngineFuncLib", "IsUnloadPSOFinished");

	Params::GSE_EngineFuncLib_IsUnloadPSOFinished Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function UnrealExtent.GSE_EngineFuncLib.LoadFileToString
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// class FString                           Path                                                   (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class FString                           ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class FString UGSE_EngineFuncLib::LoadFileToString(const class FString& Path)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("GSE_EngineFuncLib", "LoadFileToString");

	Params::GSE_EngineFuncLib_LoadFileToString Parms{};

	Parms.Path = std::move(Path);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function UnrealExtent.GSE_EngineFuncLib.LogDbg
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// class FString                           Str                                                    (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    bPrintScreen                                           (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   TimeToDisplay                                          (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UGSE_EngineFuncLib::LogDbg(const class FString& Str, bool bPrintScreen, float TimeToDisplay)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("GSE_EngineFuncLib", "LogDbg");

	Params::GSE_EngineFuncLib_LogDbg Parms{};

	Parms.Str = std::move(Str);
	Parms.bPrintScreen = bPrintScreen;
	Parms.TimeToDisplay = TimeToDisplay;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function UnrealExtent.GSE_EngineFuncLib.LogDbgWithColor
// (Final, Native, Static, Public, HasDefaults, BlueprintCallable)
// Parameters:
// class FString                           Str                                                    (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    bPrintScreen                                           (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   TimeToDisplay                                          (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FColor                           Color                                                  (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32                                   Key                                                    (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UGSE_EngineFuncLib::LogDbgWithColor(const class FString& Str, bool bPrintScreen, float TimeToDisplay, const struct FColor& Color, int32 Key)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("GSE_EngineFuncLib", "LogDbgWithColor");

	Params::GSE_EngineFuncLib_LogDbgWithColor Parms{};

	Parms.Str = std::move(Str);
	Parms.bPrintScreen = bPrintScreen;
	Parms.TimeToDisplay = TimeToDisplay;
	Parms.Color = std::move(Color);
	Parms.Key = Key;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function UnrealExtent.GSE_EngineFuncLib.LogError
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// class FString                           Str                                                    (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UGSE_EngineFuncLib::LogError(const class FString& Str)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("GSE_EngineFuncLib", "LogError");

	Params::GSE_EngineFuncLib_LogError Parms{};

	Parms.Str = std::move(Str);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function UnrealExtent.GSE_EngineFuncLib.LogInfo
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// class FString                           Str                                                    (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UGSE_EngineFuncLib::LogInfo(const class FString& Str)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("GSE_EngineFuncLib", "LogInfo");

	Params::GSE_EngineFuncLib_LogInfo Parms{};

	Parms.Str = std::move(Str);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function UnrealExtent.GSE_EngineFuncLib.LogShipping
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// class FString                           Str                                                    (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UGSE_EngineFuncLib::LogShipping(const class FString& Str)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("GSE_EngineFuncLib", "LogShipping");

	Params::GSE_EngineFuncLib_LogShipping Parms{};

	Parms.Str = std::move(Str);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function UnrealExtent.GSE_EngineFuncLib.LogShippingError
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// class FString                           Str                                                    (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UGSE_EngineFuncLib::LogShippingError(const class FString& Str)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("GSE_EngineFuncLib", "LogShippingError");

	Params::GSE_EngineFuncLib_LogShippingError Parms{};

	Parms.Str = std::move(Str);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function UnrealExtent.GSE_EngineFuncLib.LogWarning
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// class FString                           Str                                                    (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UGSE_EngineFuncLib::LogWarning(const class FString& Str)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("GSE_EngineFuncLib", "LogWarning");

	Params::GSE_EngineFuncLib_LogWarning Parms{};

	Parms.Str = std::move(Str);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function UnrealExtent.GSE_EngineFuncLib.LogWLevel
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// class FString                           Str                                                    (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32                                   InLogLevel                                             (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UGSE_EngineFuncLib::LogWLevel(const class FString& Str, int32 InLogLevel)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("GSE_EngineFuncLib", "LogWLevel");

	Params::GSE_EngineFuncLib_LogWLevel Parms{};

	Parms.Str = std::move(Str);
	Parms.InLogLevel = InLogLevel;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function UnrealExtent.GSE_EngineFuncLib.MarkUnloadPsoState
// (Final, Native, Static, Public, BlueprintCallable)

void UGSE_EngineFuncLib::MarkUnloadPsoState()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("GSE_EngineFuncLib", "MarkUnloadPsoState");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function UnrealExtent.GSE_EngineFuncLib.MathEase
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// float                                   A                                                      (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   B                                                      (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   Alpha                                                  (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// EEasingFunc                             EasingFunc                                             (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   BlendExp                                               (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32                                   Steps                                                  (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

float UGSE_EngineFuncLib::MathEase(float A, float B, float Alpha, EEasingFunc EasingFunc, float BlendExp, int32 Steps)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("GSE_EngineFuncLib", "MathEase");

	Params::GSE_EngineFuncLib_MathEase Parms{};

	Parms.A = A;
	Parms.B = B;
	Parms.Alpha = Alpha;
	Parms.EasingFunc = EasingFunc;
	Parms.BlendExp = BlendExp;
	Parms.Steps = Steps;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function UnrealExtent.GSE_EngineFuncLib.MathEase2D
// (Final, Native, Static, Public, HasDefaults, BlueprintCallable)
// Parameters:
// struct FVector2D                        A                                                      (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FVector2D                        B                                                      (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   Alpha                                                  (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// EEasingFunc                             EasingFunc                                             (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   BlendExp                                               (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32                                   Steps                                                  (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FVector2D                        ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

struct FVector2D UGSE_EngineFuncLib::MathEase2D(const struct FVector2D& A, const struct FVector2D& B, float Alpha, EEasingFunc EasingFunc, float BlendExp, int32 Steps)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("GSE_EngineFuncLib", "MathEase2D");

	Params::GSE_EngineFuncLib_MathEase2D Parms{};

	Parms.A = std::move(A);
	Parms.B = std::move(B);
	Parms.Alpha = Alpha;
	Parms.EasingFunc = EasingFunc;
	Parms.BlendExp = BlendExp;
	Parms.Steps = Steps;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function UnrealExtent.GSE_EngineFuncLib.MathEaseLinearColor
// (Final, Native, Static, Public, HasDefaults, BlueprintCallable)
// Parameters:
// struct FLinearColor                     A                                                      (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FLinearColor                     B                                                      (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   Alpha                                                  (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// EEasingFunc                             EasingFunc                                             (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   BlendExp                                               (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32                                   Steps                                                  (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FLinearColor                     ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

struct FLinearColor UGSE_EngineFuncLib::MathEaseLinearColor(const struct FLinearColor& A, const struct FLinearColor& B, float Alpha, EEasingFunc EasingFunc, float BlendExp, int32 Steps)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("GSE_EngineFuncLib", "MathEaseLinearColor");

	Params::GSE_EngineFuncLib_MathEaseLinearColor Parms{};

	Parms.A = std::move(A);
	Parms.B = std::move(B);
	Parms.Alpha = Alpha;
	Parms.EasingFunc = EasingFunc;
	Parms.BlendExp = BlendExp;
	Parms.Steps = Steps;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function UnrealExtent.GSE_EngineFuncLib.MathEaseR
// (Final, Native, Static, Public, HasDefaults, BlueprintCallable)
// Parameters:
// struct FRotator                         A                                                      (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
// struct FRotator                         B                                                      (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
// float                                   Alpha                                                  (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    bShortestPath                                          (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// EEasingFunc                             EasingFunc                                             (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   BlendExp                                               (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32                                   Steps                                                  (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FRotator                         ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)

struct FRotator UGSE_EngineFuncLib::MathEaseR(const struct FRotator& A, const struct FRotator& B, float Alpha, bool bShortestPath, EEasingFunc EasingFunc, float BlendExp, int32 Steps)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("GSE_EngineFuncLib", "MathEaseR");

	Params::GSE_EngineFuncLib_MathEaseR Parms{};

	Parms.A = std::move(A);
	Parms.B = std::move(B);
	Parms.Alpha = Alpha;
	Parms.bShortestPath = bShortestPath;
	Parms.EasingFunc = EasingFunc;
	Parms.BlendExp = BlendExp;
	Parms.Steps = Steps;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function UnrealExtent.GSE_EngineFuncLib.MathEaseV
// (Final, Native, Static, Public, HasDefaults, BlueprintCallable)
// Parameters:
// struct FVector                          A                                                      (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FVector                          B                                                      (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   Alpha                                                  (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// EEasingFunc                             EasingFunc                                             (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   BlendExp                                               (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32                                   Steps                                                  (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FVector                          ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

struct FVector UGSE_EngineFuncLib::MathEaseV(const struct FVector& A, const struct FVector& B, float Alpha, EEasingFunc EasingFunc, float BlendExp, int32 Steps)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("GSE_EngineFuncLib", "MathEaseV");

	Params::GSE_EngineFuncLib_MathEaseV Parms{};

	Parms.A = std::move(A);
	Parms.B = std::move(B);
	Parms.Alpha = Alpha;
	Parms.EasingFunc = EasingFunc;
	Parms.BlendExp = BlendExp;
	Parms.Steps = Steps;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function UnrealExtent.GSE_EngineFuncLib.MediaPlayerTimeSeek
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// class UMediaPlayer*                     MediaPlayer                                            (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// double                                  Time                                                   (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UGSE_EngineFuncLib::MediaPlayerTimeSeek(class UMediaPlayer* MediaPlayer, double Time)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("GSE_EngineFuncLib", "MediaPlayerTimeSeek");

	Params::GSE_EngineFuncLib_MediaPlayerTimeSeek Parms{};

	Parms.MediaPlayer = MediaPlayer;
	Parms.Time = Time;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function UnrealExtent.GSE_EngineFuncLib.MultipleColorLerp
// (Final, Native, Static, Public, HasDefaults, BlueprintCallable)
// Parameters:
// struct FLinearColor                     V1                                                     (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FLinearColor                     V2                                                     (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FLinearColor                     V3                                                     (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FLinearColor                     V4                                                     (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   LerpAlpha                                              (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FLinearColor                     ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

struct FLinearColor UGSE_EngineFuncLib::MultipleColorLerp(const struct FLinearColor& V1, const struct FLinearColor& V2, const struct FLinearColor& V3, const struct FLinearColor& V4, float LerpAlpha)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("GSE_EngineFuncLib", "MultipleColorLerp");

	Params::GSE_EngineFuncLib_MultipleColorLerp Parms{};

	Parms.V1 = std::move(V1);
	Parms.V2 = std::move(V2);
	Parms.V3 = std::move(V3);
	Parms.V4 = std::move(V4);
	Parms.LerpAlpha = LerpAlpha;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function UnrealExtent.GSE_EngineFuncLib.PauseAudio
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// class AActor*                           AudioUtilActor                                         (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UGSE_EngineFuncLib::PauseAudio(class AActor* AudioUtilActor)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("GSE_EngineFuncLib", "PauseAudio");

	Params::GSE_EngineFuncLib_PauseAudio Parms{};

	Parms.AudioUtilActor = AudioUtilActor;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function UnrealExtent.GSE_EngineFuncLib.PausePsoBatching
// (Final, Native, Static, Public, BlueprintCallable)

void UGSE_EngineFuncLib::PausePsoBatching()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("GSE_EngineFuncLib", "PausePsoBatching");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function UnrealExtent.GSE_EngineFuncLib.PerfTest
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// int32                                   CaseID                                                 (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32                                   Count                                                  (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UGSE_EngineFuncLib::PerfTest(int32 CaseID, int32 Count)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("GSE_EngineFuncLib", "PerfTest");

	Params::GSE_EngineFuncLib_PerfTest Parms{};

	Parms.CaseID = CaseID;
	Parms.Count = Count;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function UnrealExtent.GSE_EngineFuncLib.PlayAudio
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// class AActor*                           AudioUtilActor                                         (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    VisualOnly                                             (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UGSE_EngineFuncLib::PlayAudio(class AActor* AudioUtilActor, bool VisualOnly)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("GSE_EngineFuncLib", "PlayAudio");

	Params::GSE_EngineFuncLib_PlayAudio Parms{};

	Parms.AudioUtilActor = AudioUtilActor;
	Parms.VisualOnly = VisualOnly;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function UnrealExtent.GSE_EngineFuncLib.PrepareLevelsNeedToBeUnloaded
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// class UObject*                          WorldContextObject                                     (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UGSE_EngineFuncLib::PrepareLevelsNeedToBeUnloaded(const class UObject* WorldContextObject)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("GSE_EngineFuncLib", "PrepareLevelsNeedToBeUnloaded");

	Params::GSE_EngineFuncLib_PrepareLevelsNeedToBeUnloaded Parms{};

	Parms.WorldContextObject = WorldContextObject;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function UnrealExtent.GSE_EngineFuncLib.PSOFullCompilation
// (Final, Native, Static, Public, BlueprintCallable)

void UGSE_EngineFuncLib::PSOFullCompilation()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("GSE_EngineFuncLib", "PSOFullCompilation");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function UnrealExtent.GSE_EngineFuncLib.QAGenCrash
// (Final, Native, Static, Public, BlueprintCallable)

void UGSE_EngineFuncLib::QAGenCrash()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("GSE_EngineFuncLib", "QAGenCrash");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function UnrealExtent.GSE_EngineFuncLib.QAGetSimpleCollisionCylinder
// (Final, Native, Static, Public, HasOutParams, BlueprintCallable)
// Parameters:
// class AActor*                           AgentActor                                             (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   CollisionRadius                                        (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   CollisionHalfHeight                                    (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UGSE_EngineFuncLib::QAGetSimpleCollisionCylinder(class AActor* AgentActor, float* CollisionRadius, float* CollisionHalfHeight)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("GSE_EngineFuncLib", "QAGetSimpleCollisionCylinder");

	Params::GSE_EngineFuncLib_QAGetSimpleCollisionCylinder Parms{};

	Parms.AgentActor = AgentActor;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	if (CollisionRadius != nullptr)
		*CollisionRadius = Parms.CollisionRadius;

	if (CollisionHalfHeight != nullptr)
		*CollisionHalfHeight = Parms.CollisionHalfHeight;
}


// Function UnrealExtent.GSE_EngineFuncLib.QAHasReached
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// class AActor*                           AgentActor                                             (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class AActor*                           GoalActor                                              (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UGSE_EngineFuncLib::QAHasReached(class AActor* AgentActor, class AActor* GoalActor)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("GSE_EngineFuncLib", "QAHasReached");

	Params::GSE_EngineFuncLib_QAHasReached Parms{};

	Parms.AgentActor = AgentActor;
	Parms.GoalActor = GoalActor;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function UnrealExtent.GSE_EngineFuncLib.QAIsCompiling
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UGSE_EngineFuncLib::QAIsCompiling()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("GSE_EngineFuncLib", "QAIsCompiling");

	Params::GSE_EngineFuncLib_QAIsCompiling Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function UnrealExtent.GSE_EngineFuncLib.QuitEditor
// (Final, Native, Static, Public, BlueprintCallable)

void UGSE_EngineFuncLib::QuitEditor()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("GSE_EngineFuncLib", "QuitEditor");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function UnrealExtent.GSE_EngineFuncLib.QuitGame
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// class UObject*                          WorldCtx                                               (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UGSE_EngineFuncLib::QuitGame(class UObject* WorldCtx)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("GSE_EngineFuncLib", "QuitGame");

	Params::GSE_EngineFuncLib_QuitGame Parms{};

	Parms.WorldCtx = WorldCtx;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function UnrealExtent.GSE_EngineFuncLib.RegisteConsoleKey
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// TArray<class FName>                     Keys                                                   (Parm, ZeroConstructor, NativeAccessSpecifierPublic)

void UGSE_EngineFuncLib::RegisteConsoleKey(const TArray<class FName>& Keys)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("GSE_EngineFuncLib", "RegisteConsoleKey");

	Params::GSE_EngineFuncLib_RegisteConsoleKey Parms{};

	Parms.Keys = std::move(Keys);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function UnrealExtent.GSE_EngineFuncLib.RegisterComponent
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// class UActorComponent*                  ActorComponent                                         (Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UGSE_EngineFuncLib::RegisterComponent(class UActorComponent* ActorComponent)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("GSE_EngineFuncLib", "RegisterComponent");

	Params::GSE_EngineFuncLib_RegisterComponent Parms{};

	Parms.ActorComponent = ActorComponent;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function UnrealExtent.GSE_EngineFuncLib.ReplaceInputActionList
// (Final, Native, Static, Public, HasOutParams, BlueprintCallable)
// Parameters:
// class APlayerController*                PlayerController                                       (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// TArray<struct FGSInputActionKeyMapping> ActionMappings                                         (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)

void UGSE_EngineFuncLib::ReplaceInputActionList(class APlayerController* PlayerController, const TArray<struct FGSInputActionKeyMapping>& ActionMappings)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("GSE_EngineFuncLib", "ReplaceInputActionList");

	Params::GSE_EngineFuncLib_ReplaceInputActionList Parms{};

	Parms.PlayerController = PlayerController;
	Parms.ActionMappings = std::move(ActionMappings);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function UnrealExtent.GSE_EngineFuncLib.ReplaceInputAxisList
// (Final, Native, Static, Public, HasOutParams, BlueprintCallable)
// Parameters:
// class APlayerController*                PlayerController                                       (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// TArray<struct FGSInputAxisKeyMapping>   AxisMappings                                           (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)

void UGSE_EngineFuncLib::ReplaceInputAxisList(class APlayerController* PlayerController, const TArray<struct FGSInputAxisKeyMapping>& AxisMappings)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("GSE_EngineFuncLib", "ReplaceInputAxisList");

	Params::GSE_EngineFuncLib_ReplaceInputAxisList Parms{};

	Parms.PlayerController = PlayerController;
	Parms.AxisMappings = std::move(AxisMappings);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function UnrealExtent.GSE_EngineFuncLib.RequestExit
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// bool                                    Force                                                  (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UGSE_EngineFuncLib::RequestExit(bool Force)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("GSE_EngineFuncLib", "RequestExit");

	Params::GSE_EngineFuncLib_RequestExit Parms{};

	Parms.Force = Force;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function UnrealExtent.GSE_EngineFuncLib.RequestQuit
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// class FString                           Desc                                                   (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UGSE_EngineFuncLib::RequestQuit(const class FString& Desc)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("GSE_EngineFuncLib", "RequestQuit");

	Params::GSE_EngineFuncLib_RequestQuit Parms{};

	Parms.Desc = std::move(Desc);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function UnrealExtent.GSE_EngineFuncLib.ResetAudioVisualizing
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// class UUserWidget*                      AudioBox                                               (Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UGSE_EngineFuncLib::ResetAudioVisualizing(class UUserWidget* AudioBox)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("GSE_EngineFuncLib", "ResetAudioVisualizing");

	Params::GSE_EngineFuncLib_ResetAudioVisualizing Parms{};

	Parms.AudioBox = AudioBox;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function UnrealExtent.GSE_EngineFuncLib.RestartApplication
// (Final, Native, Static, Public, BlueprintCallable)

void UGSE_EngineFuncLib::RestartApplication()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("GSE_EngineFuncLib", "RestartApplication");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function UnrealExtent.GSE_EngineFuncLib.RestartGame
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// class AGameMode*                        GameMode                                               (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UGSE_EngineFuncLib::RestartGame(class AGameMode* GameMode)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("GSE_EngineFuncLib", "RestartGame");

	Params::GSE_EngineFuncLib_RestartGame Parms{};

	Parms.GameMode = GameMode;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function UnrealExtent.GSE_EngineFuncLib.ResumePsoBatching
// (Final, Native, Static, Public, BlueprintCallable)

void UGSE_EngineFuncLib::ResumePsoBatching()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("GSE_EngineFuncLib", "ResumePsoBatching");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function UnrealExtent.GSE_EngineFuncLib.RunProcess
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// class FString                           InProcessPath                                          (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UGSE_EngineFuncLib::RunProcess(const class FString& InProcessPath)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("GSE_EngineFuncLib", "RunProcess");

	Params::GSE_EngineFuncLib_RunProcess Parms{};

	Parms.InProcessPath = std::move(InProcessPath);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function UnrealExtent.GSE_EngineFuncLib.RunProcessWithCheck
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// class FString                           InProcessPath                                          (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UGSE_EngineFuncLib::RunProcessWithCheck(const class FString& InProcessPath)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("GSE_EngineFuncLib", "RunProcessWithCheck");

	Params::GSE_EngineFuncLib_RunProcessWithCheck Parms{};

	Parms.InProcessPath = std::move(InProcessPath);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function UnrealExtent.GSE_EngineFuncLib.SavePSOCacheFile
// (Final, Native, Static, Public, BlueprintCallable)

void UGSE_EngineFuncLib::SavePSOCacheFile()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("GSE_EngineFuncLib", "SavePSOCacheFile");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function UnrealExtent.GSE_EngineFuncLib.SaveStringToFile
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// class FString                           Path                                                   (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class FString                           Data                                                   (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UGSE_EngineFuncLib::SaveStringToFile(const class FString& Path, const class FString& Data)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("GSE_EngineFuncLib", "SaveStringToFile");

	Params::GSE_EngineFuncLib_SaveStringToFile Parms{};

	Parms.Path = std::move(Path);
	Parms.Data = std::move(Data);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function UnrealExtent.GSE_EngineFuncLib.ServerSeamlessTravel
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// class UWorld*                           World                                                  (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class FString                           URL                                                    (ConstParm, Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UGSE_EngineFuncLib::ServerSeamlessTravel(class UWorld* World, const class FString& URL)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("GSE_EngineFuncLib", "ServerSeamlessTravel");

	Params::GSE_EngineFuncLib_ServerSeamlessTravel Parms{};

	Parms.World = World;
	Parms.URL = std::move(URL);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function UnrealExtent.GSE_EngineFuncLib.SetActorComponentMobilityMovable
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// class AActor*                           Actor                                                  (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    IsMovable                                              (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UGSE_EngineFuncLib::SetActorComponentMobilityMovable(class AActor* Actor, bool IsMovable)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("GSE_EngineFuncLib", "SetActorComponentMobilityMovable");

	Params::GSE_EngineFuncLib_SetActorComponentMobilityMovable Parms{};

	Parms.Actor = Actor;
	Parms.IsMovable = IsMovable;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function UnrealExtent.GSE_EngineFuncLib.SetAudioBoxFreqNum
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// class UUserWidget*                      AudioBox                                               (Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32                                   InFreqNum                                              (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UGSE_EngineFuncLib::SetAudioBoxFreqNum(class UUserWidget* AudioBox, const int32 InFreqNum)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("GSE_EngineFuncLib", "SetAudioBoxFreqNum");

	Params::GSE_EngineFuncLib_SetAudioBoxFreqNum Parms{};

	Parms.AudioBox = AudioBox;
	Parms.InFreqNum = InFreqNum;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function UnrealExtent.GSE_EngineFuncLib.SetCanEverTick
// (Final, Native, Static, Public, BlueprintCallable, BlueprintPure)
// Parameters:
// class UObject*                          Obj                                                    (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    bEnable                                                (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UGSE_EngineFuncLib::SetCanEverTick(class UObject* Obj, bool bEnable)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("GSE_EngineFuncLib", "SetCanEverTick");

	Params::GSE_EngineFuncLib_SetCanEverTick Parms{};

	Parms.Obj = Obj;
	Parms.bEnable = bEnable;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function UnrealExtent.GSE_EngineFuncLib.SetDesiredQualityLevel
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// EGSQualityLevel                         TargetGSQualityLevel                                   (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UGSE_EngineFuncLib::SetDesiredQualityLevel(EGSQualityLevel TargetGSQualityLevel)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("GSE_EngineFuncLib", "SetDesiredQualityLevel");

	Params::GSE_EngineFuncLib_SetDesiredQualityLevel Parms{};

	Parms.TargetGSQualityLevel = TargetGSQualityLevel;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function UnrealExtent.GSE_EngineFuncLib.SetDisplayGamma
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// class UObject*                          WorldCtx                                               (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   Gamma                                                  (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UGSE_EngineFuncLib::SetDisplayGamma(const class UObject* WorldCtx, float Gamma)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("GSE_EngineFuncLib", "SetDisplayGamma");

	Params::GSE_EngineFuncLib_SetDisplayGamma Parms{};

	Parms.WorldCtx = WorldCtx;
	Parms.Gamma = Gamma;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function UnrealExtent.GSE_EngineFuncLib.SetInputDeadZone
// (Final, Native, Static, Public, HasOutParams, BlueprintCallable)
// Parameters:
// class APlayerController*                PlayerController                                       (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class FName                             AxisName                                               (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   DeadZone                                               (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UGSE_EngineFuncLib::SetInputDeadZone(class APlayerController* PlayerController, const class FName& AxisName, float DeadZone)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("GSE_EngineFuncLib", "SetInputDeadZone");

	Params::GSE_EngineFuncLib_SetInputDeadZone Parms{};

	Parms.PlayerController = PlayerController;
	Parms.AxisName = AxisName;
	Parms.DeadZone = DeadZone;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function UnrealExtent.GSE_EngineFuncLib.SetInputModeGameOnly
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// class APlayerController*                PlayerController                                       (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UGSE_EngineFuncLib::SetInputModeGameOnly(class APlayerController* PlayerController)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("GSE_EngineFuncLib", "SetInputModeGameOnly");

	Params::GSE_EngineFuncLib_SetInputModeGameOnly Parms{};

	Parms.PlayerController = PlayerController;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function UnrealExtent.GSE_EngineFuncLib.SetInputModeUIOnly
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// class APlayerController*                Target                                                 (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class UWidget*                          InWidgetToFocus                                        (Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// EMouseLockMode                          InMouseLockMode                                        (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UGSE_EngineFuncLib::SetInputModeUIOnly(class APlayerController* Target, class UWidget* InWidgetToFocus, EMouseLockMode InMouseLockMode)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("GSE_EngineFuncLib", "SetInputModeUIOnly");

	Params::GSE_EngineFuncLib_SetInputModeUIOnly Parms{};

	Parms.Target = Target;
	Parms.InWidgetToFocus = InWidgetToFocus;
	Parms.InMouseLockMode = InMouseLockMode;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function UnrealExtent.GSE_EngineFuncLib.SetLevelRequestSuspend
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// bool                                    ShouldSuspend                                          (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UGSE_EngineFuncLib::SetLevelRequestSuspend(bool ShouldSuspend)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("GSE_EngineFuncLib", "SetLevelRequestSuspend");

	Params::GSE_EngineFuncLib_SetLevelRequestSuspend Parms{};

	Parms.ShouldSuspend = ShouldSuspend;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function UnrealExtent.GSE_EngineFuncLib.SetLogEnable
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// bool                                    bEnableDbg                                             (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    bEnableDbgDisplay                                      (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    bEnableInfo                                            (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UGSE_EngineFuncLib::SetLogEnable(bool bEnableDbg, bool bEnableDbgDisplay, bool bEnableInfo)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("GSE_EngineFuncLib", "SetLogEnable");

	Params::GSE_EngineFuncLib_SetLogEnable Parms{};

	Parms.bEnableDbg = bEnableDbg;
	Parms.bEnableDbgDisplay = bEnableDbgDisplay;
	Parms.bEnableInfo = bEnableInfo;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function UnrealExtent.GSE_EngineFuncLib.SetMouseCursorWidgetVisible
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// class APlayerController*                PlayerController                                       (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    bVisible                                               (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UGSE_EngineFuncLib::SetMouseCursorWidgetVisible(class APlayerController* PlayerController, bool bVisible)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("GSE_EngineFuncLib", "SetMouseCursorWidgetVisible");

	Params::GSE_EngineFuncLib_SetMouseCursorWidgetVisible Parms{};

	Parms.PlayerController = PlayerController;
	Parms.bVisible = bVisible;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function UnrealExtent.GSE_EngineFuncLib.SetPSOCacheUsageMask
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// int32                                   MapIndex                                               (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32                                   MaterialQualityLevel                                   (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32                                   NiagaraQualityLevel                                    (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32                                   ShadowQualityLevel                                     (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UGSE_EngineFuncLib::SetPSOCacheUsageMask(int32 MapIndex, int32 MaterialQualityLevel, int32 NiagaraQualityLevel, int32 ShadowQualityLevel)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("GSE_EngineFuncLib", "SetPSOCacheUsageMask");

	Params::GSE_EngineFuncLib_SetPSOCacheUsageMask Parms{};

	Parms.MapIndex = MapIndex;
	Parms.MaterialQualityLevel = MaterialQualityLevel;
	Parms.NiagaraQualityLevel = NiagaraQualityLevel;
	Parms.ShadowQualityLevel = ShadowQualityLevel;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function UnrealExtent.GSE_EngineFuncLib.StopAudio
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// class AActor*                           AudioUtilActor                                         (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UGSE_EngineFuncLib::StopAudio(class AActor* AudioUtilActor)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("GSE_EngineFuncLib", "StopAudio");

	Params::GSE_EngineFuncLib_StopAudio Parms{};

	Parms.AudioUtilActor = AudioUtilActor;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function UnrealExtent.GSE_EngineFuncLib.TestPathSync
// (Final, Native, Static, Public, HasOutParams, HasDefaults, BlueprintCallable)
// Parameters:
// class AController*                      Controller                                             (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FVector                          TargetLocation                                         (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UGSE_EngineFuncLib::TestPathSync(class AController* Controller, const struct FVector& TargetLocation)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("GSE_EngineFuncLib", "TestPathSync");

	Params::GSE_EngineFuncLib_TestPathSync Parms{};

	Parms.Controller = Controller;
	Parms.TargetLocation = std::move(TargetLocation);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function UnrealExtent.GSE_EngineFuncLib.ToMilliseconds
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// int64                                   Cycles                                                 (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

float UGSE_EngineFuncLib::ToMilliseconds(const int64 Cycles)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("GSE_EngineFuncLib", "ToMilliseconds");

	Params::GSE_EngineFuncLib_ToMilliseconds Parms{};

	Parms.Cycles = Cycles;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function UnrealExtent.GSE_EngineFuncLib.UpdateAudioUtilAnalyzer
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// class AActor*                           AudioUtilActor                                         (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class FString                           LoudnessAnalyzerAssetPath                              (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class FString                           ConstantAnalyzerAssetPath                              (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UGSE_EngineFuncLib::UpdateAudioUtilAnalyzer(class AActor* AudioUtilActor, const class FString& LoudnessAnalyzerAssetPath, const class FString& ConstantAnalyzerAssetPath)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("GSE_EngineFuncLib", "UpdateAudioUtilAnalyzer");

	Params::GSE_EngineFuncLib_UpdateAudioUtilAnalyzer Parms{};

	Parms.AudioUtilActor = AudioUtilActor;
	Parms.LoudnessAnalyzerAssetPath = std::move(LoudnessAnalyzerAssetPath);
	Parms.ConstantAnalyzerAssetPath = std::move(ConstantAnalyzerAssetPath);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function UnrealExtent.GSE_EngineFuncLib.UploadPSOHttpRequest
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// int32                                   Num                                                    (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UGSE_EngineFuncLib::UploadPSOHttpRequest(int32 Num)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("GSE_EngineFuncLib", "UploadPSOHttpRequest");

	Params::GSE_EngineFuncLib_UploadPSOHttpRequest Parms{};

	Parms.Num = Num;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function UnrealExtent.GSE_EngineFuncLib.UseStatsMacro
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UGSE_EngineFuncLib::UseStatsMacro()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("GSE_EngineFuncLib", "UseStatsMacro");

	Params::GSE_EngineFuncLib_UseStatsMacro Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function UnrealExtent.GSE_EngineFuncLib.VLogBoxError
// (Final, Native, Static, Public, HasOutParams, HasDefaults, BlueprintCallable)
// Parameters:
// class UObject*                          WorldContext                                           (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class FName                             Catogary                                               (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FBox                             Box                                                    (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
// struct FColor                           Color                                                  (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class FString                           Text                                                   (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UGSE_EngineFuncLib::VLogBoxError(const class UObject* WorldContext, const class FName& Catogary, const struct FBox& Box, const struct FColor& Color, const class FString& Text)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("GSE_EngineFuncLib", "VLogBoxError");

	Params::GSE_EngineFuncLib_VLogBoxError Parms{};

	Parms.WorldContext = WorldContext;
	Parms.Catogary = Catogary;
	Parms.Box = std::move(Box);
	Parms.Color = std::move(Color);
	Parms.Text = std::move(Text);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function UnrealExtent.GSE_EngineFuncLib.VLogBoxInfo
// (Final, Native, Static, Public, HasOutParams, HasDefaults, BlueprintCallable)
// Parameters:
// class UObject*                          WorldContext                                           (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class FName                             Catogary                                               (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FBox                             Box                                                    (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
// struct FColor                           Color                                                  (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class FString                           Text                                                   (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UGSE_EngineFuncLib::VLogBoxInfo(const class UObject* WorldContext, const class FName& Catogary, const struct FBox& Box, const struct FColor& Color, const class FString& Text)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("GSE_EngineFuncLib", "VLogBoxInfo");

	Params::GSE_EngineFuncLib_VLogBoxInfo Parms{};

	Parms.WorldContext = WorldContext;
	Parms.Catogary = Catogary;
	Parms.Box = std::move(Box);
	Parms.Color = std::move(Color);
	Parms.Text = std::move(Text);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function UnrealExtent.GSE_EngineFuncLib.VLogBoxWarning
// (Final, Native, Static, Public, HasOutParams, HasDefaults, BlueprintCallable)
// Parameters:
// class UObject*                          WorldContext                                           (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class FName                             Catogary                                               (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FBox                             Box                                                    (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
// struct FColor                           Color                                                  (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class FString                           Text                                                   (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UGSE_EngineFuncLib::VLogBoxWarning(const class UObject* WorldContext, const class FName& Catogary, const struct FBox& Box, const struct FColor& Color, const class FString& Text)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("GSE_EngineFuncLib", "VLogBoxWarning");

	Params::GSE_EngineFuncLib_VLogBoxWarning Parms{};

	Parms.WorldContext = WorldContext;
	Parms.Catogary = Catogary;
	Parms.Box = std::move(Box);
	Parms.Color = std::move(Color);
	Parms.Text = std::move(Text);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function UnrealExtent.GSE_EngineFuncLib.VLogError
// (Final, Native, Static, Public, HasOutParams, BlueprintCallable)
// Parameters:
// class UObject*                          WorldContext                                           (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class FName                             Catogary                                               (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class FString                           Text                                                   (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UGSE_EngineFuncLib::VLogError(const class UObject* WorldContext, const class FName& Catogary, const class FString& Text)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("GSE_EngineFuncLib", "VLogError");

	Params::GSE_EngineFuncLib_VLogError Parms{};

	Parms.WorldContext = WorldContext;
	Parms.Catogary = Catogary;
	Parms.Text = std::move(Text);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function UnrealExtent.GSE_EngineFuncLib.VLogInfo
// (Final, Native, Static, Public, HasOutParams, BlueprintCallable)
// Parameters:
// class UObject*                          WorldContext                                           (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class FName                             Catogary                                               (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class FString                           Text                                                   (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UGSE_EngineFuncLib::VLogInfo(const class UObject* WorldContext, const class FName& Catogary, const class FString& Text)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("GSE_EngineFuncLib", "VLogInfo");

	Params::GSE_EngineFuncLib_VLogInfo Parms{};

	Parms.WorldContext = WorldContext;
	Parms.Catogary = Catogary;
	Parms.Text = std::move(Text);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function UnrealExtent.GSE_EngineFuncLib.VLogLocationError
// (Final, Native, Static, Public, HasOutParams, HasDefaults, BlueprintCallable)
// Parameters:
// class UObject*                          WorldContext                                           (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class FName                             Catogary                                               (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FVector                          Location                                               (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   Radius                                                 (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FColor                           Color                                                  (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class FString                           Text                                                   (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UGSE_EngineFuncLib::VLogLocationError(const class UObject* WorldContext, const class FName& Catogary, const struct FVector& Location, float Radius, const struct FColor& Color, const class FString& Text)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("GSE_EngineFuncLib", "VLogLocationError");

	Params::GSE_EngineFuncLib_VLogLocationError Parms{};

	Parms.WorldContext = WorldContext;
	Parms.Catogary = Catogary;
	Parms.Location = std::move(Location);
	Parms.Radius = Radius;
	Parms.Color = std::move(Color);
	Parms.Text = std::move(Text);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function UnrealExtent.GSE_EngineFuncLib.VLogLocationInfo
// (Final, Native, Static, Public, HasOutParams, HasDefaults, BlueprintCallable)
// Parameters:
// class UObject*                          WorldContext                                           (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class FName                             Catogary                                               (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FVector                          Location                                               (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   Radius                                                 (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FColor                           Color                                                  (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class FString                           Text                                                   (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UGSE_EngineFuncLib::VLogLocationInfo(const class UObject* WorldContext, const class FName& Catogary, const struct FVector& Location, float Radius, const struct FColor& Color, const class FString& Text)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("GSE_EngineFuncLib", "VLogLocationInfo");

	Params::GSE_EngineFuncLib_VLogLocationInfo Parms{};

	Parms.WorldContext = WorldContext;
	Parms.Catogary = Catogary;
	Parms.Location = std::move(Location);
	Parms.Radius = Radius;
	Parms.Color = std::move(Color);
	Parms.Text = std::move(Text);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function UnrealExtent.GSE_EngineFuncLib.VLogLocationWarning
// (Final, Native, Static, Public, HasOutParams, HasDefaults, BlueprintCallable)
// Parameters:
// class UObject*                          WorldContext                                           (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class FName                             Catogary                                               (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FVector                          Location                                               (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   Radius                                                 (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FColor                           Color                                                  (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class FString                           Text                                                   (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UGSE_EngineFuncLib::VLogLocationWarning(const class UObject* WorldContext, const class FName& Catogary, const struct FVector& Location, float Radius, const struct FColor& Color, const class FString& Text)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("GSE_EngineFuncLib", "VLogLocationWarning");

	Params::GSE_EngineFuncLib_VLogLocationWarning Parms{};

	Parms.WorldContext = WorldContext;
	Parms.Catogary = Catogary;
	Parms.Location = std::move(Location);
	Parms.Radius = Radius;
	Parms.Color = std::move(Color);
	Parms.Text = std::move(Text);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function UnrealExtent.GSE_EngineFuncLib.VLogSegmentError
// (Final, Native, Static, Public, HasOutParams, HasDefaults, BlueprintCallable)
// Parameters:
// class UObject*                          WorldContext                                           (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class FName                             Catogary                                               (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FVector                          SegmentStart                                           (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FVector                          SegmentEnd                                             (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FColor                           Color                                                  (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   Thickness                                              (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class FString                           Text                                                   (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UGSE_EngineFuncLib::VLogSegmentError(const class UObject* WorldContext, const class FName& Catogary, const struct FVector& SegmentStart, const struct FVector& SegmentEnd, const struct FColor& Color, float Thickness, const class FString& Text)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("GSE_EngineFuncLib", "VLogSegmentError");

	Params::GSE_EngineFuncLib_VLogSegmentError Parms{};

	Parms.WorldContext = WorldContext;
	Parms.Catogary = Catogary;
	Parms.SegmentStart = std::move(SegmentStart);
	Parms.SegmentEnd = std::move(SegmentEnd);
	Parms.Color = std::move(Color);
	Parms.Thickness = Thickness;
	Parms.Text = std::move(Text);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function UnrealExtent.GSE_EngineFuncLib.VLogSegmentInfo
// (Final, Native, Static, Public, HasOutParams, HasDefaults, BlueprintCallable)
// Parameters:
// class UObject*                          WorldContext                                           (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class FName                             Catogary                                               (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FVector                          SegmentStart                                           (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FVector                          SegmentEnd                                             (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FColor                           Color                                                  (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   Thickness                                              (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class FString                           Text                                                   (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UGSE_EngineFuncLib::VLogSegmentInfo(const class UObject* WorldContext, const class FName& Catogary, const struct FVector& SegmentStart, const struct FVector& SegmentEnd, const struct FColor& Color, float Thickness, const class FString& Text)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("GSE_EngineFuncLib", "VLogSegmentInfo");

	Params::GSE_EngineFuncLib_VLogSegmentInfo Parms{};

	Parms.WorldContext = WorldContext;
	Parms.Catogary = Catogary;
	Parms.SegmentStart = std::move(SegmentStart);
	Parms.SegmentEnd = std::move(SegmentEnd);
	Parms.Color = std::move(Color);
	Parms.Thickness = Thickness;
	Parms.Text = std::move(Text);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function UnrealExtent.GSE_EngineFuncLib.VLogSegmentWarning
// (Final, Native, Static, Public, HasOutParams, HasDefaults, BlueprintCallable)
// Parameters:
// class UObject*                          WorldContext                                           (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class FName                             Catogary                                               (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FVector                          SegmentStart                                           (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FVector                          SegmentEnd                                             (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FColor                           Color                                                  (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   Thickness                                              (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class FString                           Text                                                   (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UGSE_EngineFuncLib::VLogSegmentWarning(const class UObject* WorldContext, const class FName& Catogary, const struct FVector& SegmentStart, const struct FVector& SegmentEnd, const struct FColor& Color, float Thickness, const class FString& Text)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("GSE_EngineFuncLib", "VLogSegmentWarning");

	Params::GSE_EngineFuncLib_VLogSegmentWarning Parms{};

	Parms.WorldContext = WorldContext;
	Parms.Catogary = Catogary;
	Parms.SegmentStart = std::move(SegmentStart);
	Parms.SegmentEnd = std::move(SegmentEnd);
	Parms.Color = std::move(Color);
	Parms.Thickness = Thickness;
	Parms.Text = std::move(Text);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function UnrealExtent.GSE_EngineFuncLib.VLogWarning
// (Final, Native, Static, Public, HasOutParams, BlueprintCallable)
// Parameters:
// class UObject*                          WorldContext                                           (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class FName                             Catogary                                               (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class FString                           Text                                                   (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UGSE_EngineFuncLib::VLogWarning(const class UObject* WorldContext, const class FName& Catogary, const class FString& Text)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("GSE_EngineFuncLib", "VLogWarning");

	Params::GSE_EngineFuncLib_VLogWarning Parms{};

	Parms.WorldContext = WorldContext;
	Parms.Catogary = Catogary;
	Parms.Text = std::move(Text);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function UnrealExtent.GSE_EngineFuncLib.VLogWLevel
// (Final, Native, Static, Public, HasOutParams, BlueprintCallable)
// Parameters:
// class UObject*                          WorldContext                                           (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32                                   InLogLevel                                             (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class FName                             Catogary                                               (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class FString                           Text                                                   (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UGSE_EngineFuncLib::VLogWLevel(const class UObject* WorldContext, int32 InLogLevel, const class FName& Catogary, const class FString& Text)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("GSE_EngineFuncLib", "VLogWLevel");

	Params::GSE_EngineFuncLib_VLogWLevel Parms{};

	Parms.WorldContext = WorldContext;
	Parms.InLogLevel = InLogLevel;
	Parms.Catogary = Catogary;
	Parms.Text = std::move(Text);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function UnrealExtent.GSE_EngineFuncLib.WasActorRecentlyRendered
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// class AActor*                           InActor                                                (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   InTolerence                                            (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UGSE_EngineFuncLib::WasActorRecentlyRendered(class AActor* InActor, const float InTolerence)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("GSE_EngineFuncLib", "WasActorRecentlyRendered");

	Params::GSE_EngineFuncLib_WasActorRecentlyRendered Parms{};

	Parms.InActor = InActor;
	Parms.InTolerence = InTolerence;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function UnrealExtent.GSE_WorldFuncLib.GetWorldSettings
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// class ULevel*                           Level                                                  (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    bChecked                                               (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class AWorldSettings*                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class AWorldSettings* UGSE_WorldFuncLib::GetWorldSettings(class ULevel* Level, bool bChecked)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("GSE_WorldFuncLib", "GetWorldSettings");

	Params::GSE_WorldFuncLib_GetWorldSettings Parms{};

	Parms.Level = Level;
	Parms.bChecked = bChecked;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function UnrealExtent.GSE_WorldFuncLib.NotifyWorldSettingsBeginPlay
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// class UWorld*                           World                                                  (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UGSE_WorldFuncLib::NotifyWorldSettingsBeginPlay(class UWorld* World)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("GSE_WorldFuncLib", "NotifyWorldSettingsBeginPlay");

	Params::GSE_WorldFuncLib_NotifyWorldSettingsBeginPlay Parms{};

	Parms.World = World;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function UnrealExtent.GSE_WorldFuncLib.NotifyWorldSettingsMatchStart
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// class UWorld*                           World                                                  (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UGSE_WorldFuncLib::NotifyWorldSettingsMatchStart(class UWorld* World)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("GSE_WorldFuncLib", "NotifyWorldSettingsMatchStart");

	Params::GSE_WorldFuncLib_NotifyWorldSettingsMatchStart Parms{};

	Parms.World = World;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function UnrealExtent.GSE_WorldFuncLib.WorldGetCurrentLevel
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// class UWorld*                           World                                                  (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class ULevel*                           ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class ULevel* UGSE_WorldFuncLib::WorldGetCurrentLevel(class UWorld* World)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("GSE_WorldFuncLib", "WorldGetCurrentLevel");

	Params::GSE_WorldFuncLib_WorldGetCurrentLevel Parms{};

	Parms.World = World;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function UnrealExtent.GSE_WorldFuncLib.WorldGetPersistentLevel
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// class UWorld*                           World                                                  (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class ULevel*                           ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class ULevel* UGSE_WorldFuncLib::WorldGetPersistentLevel(class UWorld* World)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("GSE_WorldFuncLib", "WorldGetPersistentLevel");

	Params::GSE_WorldFuncLib_WorldGetPersistentLevel Parms{};

	Parms.World = World;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function UnrealExtent.GSE_WorldFuncLib.WorldViewportCursorVisible
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// class UWorld*                           World                                                  (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UGSE_WorldFuncLib::WorldViewportCursorVisible(class UWorld* World)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("GSE_WorldFuncLib", "WorldViewportCursorVisible");

	Params::GSE_WorldFuncLib_WorldViewportCursorVisible Parms{};

	Parms.World = World;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function UnrealExtent.GSE_WorldFuncLib.WorldViewportForeground
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// class UWorld*                           World                                                  (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UGSE_WorldFuncLib::WorldViewportForeground(class UWorld* World)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("GSE_WorldFuncLib", "WorldViewportForeground");

	Params::GSE_WorldFuncLib_WorldViewportForeground Parms{};

	Parms.World = World;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function UnrealExtent.GSE_FoliageFuncLib.IFA_GetSelectedInstanceName
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// class AInstancedFoliageActor*           FoliageActor                                           (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class FString                           ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class FString UGSE_FoliageFuncLib::IFA_GetSelectedInstanceName(class AInstancedFoliageActor* FoliageActor)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("GSE_FoliageFuncLib", "IFA_GetSelectedInstanceName");

	Params::GSE_FoliageFuncLib_IFA_GetSelectedInstanceName Parms{};

	Parms.FoliageActor = FoliageActor;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function UnrealExtent.GSE_FoliageFuncLib.InstancedFoliageActorSetCullDistance
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// class AInstancedFoliageActor*           FoliageActor                                           (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32                                   MinLodDist                                             (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32                                   MaxLodDist                                             (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UGSE_FoliageFuncLib::InstancedFoliageActorSetCullDistance(class AInstancedFoliageActor* FoliageActor, int32 MinLodDist, int32 MaxLodDist)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("GSE_FoliageFuncLib", "InstancedFoliageActorSetCullDistance");

	Params::GSE_FoliageFuncLib_InstancedFoliageActorSetCullDistance Parms{};

	Parms.FoliageActor = FoliageActor;
	Parms.MinLodDist = MinLodDist;
	Parms.MaxLodDist = MaxLodDist;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function UnrealExtent.GSE_ProfilerFuncLib.CaptureAllStatsInfo
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// TArray<struct FGSCapturedStatResult>    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, NativeAccessSpecifierPublic)

TArray<struct FGSCapturedStatResult> UGSE_ProfilerFuncLib::CaptureAllStatsInfo()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("GSE_ProfilerFuncLib", "CaptureAllStatsInfo");

	Params::GSE_ProfilerFuncLib_CaptureAllStatsInfo Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function UnrealExtent.GSE_ProfilerFuncLib.CaptureSpecificStatsInfo
// (Final, Native, Static, Public, HasOutParams, BlueprintCallable)
// Parameters:
// TArray<class FString>                   StatNames                                              (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
// TArray<struct FGSCapturedStatResult>    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, NativeAccessSpecifierPublic)

TArray<struct FGSCapturedStatResult> UGSE_ProfilerFuncLib::CaptureSpecificStatsInfo(const TArray<class FString>& StatNames)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("GSE_ProfilerFuncLib", "CaptureSpecificStatsInfo");

	Params::GSE_ProfilerFuncLib_CaptureSpecificStatsInfo Parms{};

	Parms.StatNames = std::move(StatNames);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function UnrealExtent.GSE_ProfilerFuncLib.GSStatsMasterEnableAdd
// (Final, Native, Static, Public, BlueprintCallable)

void UGSE_ProfilerFuncLib::GSStatsMasterEnableAdd()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("GSE_ProfilerFuncLib", "GSStatsMasterEnableAdd");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function UnrealExtent.GSE_ProfilerFuncLib.StartRecordingPerfChart
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// class FString                           TargetFileName                                         (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32                                   InTotalFrames                                          (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    bCollectInsightData                                    (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UGSE_ProfilerFuncLib::StartRecordingPerfChart(const class FString& TargetFileName, int32 InTotalFrames, bool bCollectInsightData)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("GSE_ProfilerFuncLib", "StartRecordingPerfChart");

	Params::GSE_ProfilerFuncLib_StartRecordingPerfChart Parms{};

	Parms.TargetFileName = std::move(TargetFileName);
	Parms.InTotalFrames = InTotalFrames;
	Parms.bCollectInsightData = bCollectInsightData;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function UnrealExtent.GSE_ProfilerFuncLib.StopRecordingPerfChart
// (Final, Native, Static, Public, BlueprintCallable)

void UGSE_ProfilerFuncLib::StopRecordingPerfChart()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("GSE_ProfilerFuncLib", "StopRecordingPerfChart");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function UnrealExtent.GSE_PostProcessFuncLib.GetSceneViewFinalPostProcessSettings
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// class AActor*                           WorldContext                                           (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FPostProcessSettings             ReturnValue                                            (Parm, OutParm, ReturnParm, NativeAccessSpecifierPublic)

struct FPostProcessSettings UGSE_PostProcessFuncLib::GetSceneViewFinalPostProcessSettings(class AActor* WorldContext)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("GSE_PostProcessFuncLib", "GetSceneViewFinalPostProcessSettings");

	Params::GSE_PostProcessFuncLib_GetSceneViewFinalPostProcessSettings Parms{};

	Parms.WorldContext = WorldContext;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function UnrealExtent.GSE_PostProcessFuncLib.RemovePPCompWeightBlendable
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// class UPostProcessComponent*            PPComp                                                 (Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class UMaterialInterface*               PPMaterialInterface                                    (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UGSE_PostProcessFuncLib::RemovePPCompWeightBlendable(class UPostProcessComponent* PPComp, class UMaterialInterface* PPMaterialInterface)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("GSE_PostProcessFuncLib", "RemovePPCompWeightBlendable");

	Params::GSE_PostProcessFuncLib_RemovePPCompWeightBlendable Parms{};

	Parms.PPComp = PPComp;
	Parms.PPMaterialInterface = PPMaterialInterface;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function UnrealExtent.GSE_PostProcessFuncLib.RemovePPVWeightBlendable
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// class APostProcessVolume*               PPV                                                    (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class UMaterialInterface*               PPMaterialInterface                                    (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UGSE_PostProcessFuncLib::RemovePPVWeightBlendable(class APostProcessVolume* PPV, class UMaterialInterface* PPMaterialInterface)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("GSE_PostProcessFuncLib", "RemovePPVWeightBlendable");

	Params::GSE_PostProcessFuncLib_RemovePPVWeightBlendable Parms{};

	Parms.PPV = PPV;
	Parms.PPMaterialInterface = PPMaterialInterface;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function UnrealExtent.GSE_PostProcessFuncLib.SetCameraCompWeightedBlendableWeightByIndex
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// class UCameraComponent*                 CameraComp                                             (Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32                                   PPMatIndex                                             (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   Weight                                                 (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UGSE_PostProcessFuncLib::SetCameraCompWeightedBlendableWeightByIndex(class UCameraComponent* CameraComp, int32 PPMatIndex, float Weight)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("GSE_PostProcessFuncLib", "SetCameraCompWeightedBlendableWeightByIndex");

	Params::GSE_PostProcessFuncLib_SetCameraCompWeightedBlendableWeightByIndex Parms{};

	Parms.CameraComp = CameraComp;
	Parms.PPMatIndex = PPMatIndex;
	Parms.Weight = Weight;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function UnrealExtent.GSE_PostProcessFuncLib.SetCameraWeightedBlendableWeightByIndex
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// class AActor*                           CameraActor                                            (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32                                   PPMatIndex                                             (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   Weight                                                 (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UGSE_PostProcessFuncLib::SetCameraWeightedBlendableWeightByIndex(class AActor* CameraActor, int32 PPMatIndex, float Weight)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("GSE_PostProcessFuncLib", "SetCameraWeightedBlendableWeightByIndex");

	Params::GSE_PostProcessFuncLib_SetCameraWeightedBlendableWeightByIndex Parms{};

	Parms.CameraActor = CameraActor;
	Parms.PPMatIndex = PPMatIndex;
	Parms.Weight = Weight;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function UnrealExtent.GSE_PostProcessFuncLib.SetPPCompWeightedBlendableWeight
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// class UPostProcessComponent*            PPComp                                                 (Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class UMaterialInterface*               PPMaterialInterface                                    (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   Weight                                                 (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UGSE_PostProcessFuncLib::SetPPCompWeightedBlendableWeight(class UPostProcessComponent* PPComp, class UMaterialInterface* PPMaterialInterface, float Weight)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("GSE_PostProcessFuncLib", "SetPPCompWeightedBlendableWeight");

	Params::GSE_PostProcessFuncLib_SetPPCompWeightedBlendableWeight Parms{};

	Parms.PPComp = PPComp;
	Parms.PPMaterialInterface = PPMaterialInterface;
	Parms.Weight = Weight;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function UnrealExtent.GSE_PostProcessFuncLib.SetPPCompWeightedBlendableWeightByIndex
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// class UPostProcessComponent*            PPComp                                                 (Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32                                   PPMatIndex                                             (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   Weight                                                 (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UGSE_PostProcessFuncLib::SetPPCompWeightedBlendableWeightByIndex(class UPostProcessComponent* PPComp, int32 PPMatIndex, float Weight)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("GSE_PostProcessFuncLib", "SetPPCompWeightedBlendableWeightByIndex");

	Params::GSE_PostProcessFuncLib_SetPPCompWeightedBlendableWeightByIndex Parms{};

	Parms.PPComp = PPComp;
	Parms.PPMatIndex = PPMatIndex;
	Parms.Weight = Weight;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function UnrealExtent.GSE_PostProcessFuncLib.SetPPVWeightedBlendableWeight
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// class APostProcessVolume*               PPV                                                    (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class UMaterialInterface*               PPMaterialInterface                                    (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   Weight                                                 (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UGSE_PostProcessFuncLib::SetPPVWeightedBlendableWeight(class APostProcessVolume* PPV, class UMaterialInterface* PPMaterialInterface, float Weight)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("GSE_PostProcessFuncLib", "SetPPVWeightedBlendableWeight");

	Params::GSE_PostProcessFuncLib_SetPPVWeightedBlendableWeight Parms{};

	Parms.PPV = PPV;
	Parms.PPMaterialInterface = PPMaterialInterface;
	Parms.Weight = Weight;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function UnrealExtent.GSE_PostProcessFuncLib.SetPPVWeightedBlendableWeightByIndex
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// class APostProcessVolume*               PPV                                                    (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32                                   PPMatIndex                                             (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   Weight                                                 (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UGSE_PostProcessFuncLib::SetPPVWeightedBlendableWeightByIndex(class APostProcessVolume* PPV, int32 PPMatIndex, float Weight)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("GSE_PostProcessFuncLib", "SetPPVWeightedBlendableWeightByIndex");

	Params::GSE_PostProcessFuncLib_SetPPVWeightedBlendableWeightByIndex Parms{};

	Parms.PPV = PPV;
	Parms.PPMatIndex = PPMatIndex;
	Parms.Weight = Weight;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function UnrealExtent.GSE_CameraUtilFuncLib.GetCameraFocalParams
// (Final, Native, Static, Public, HasOutParams, BlueprintCallable)
// Parameters:
// class UCameraComponent*                 InCamera                                               (Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   OutFocalDistance                                       (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   OutDepthBlurKm                                         (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   OutDepthBlurRadius                                     (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UGSE_CameraUtilFuncLib::GetCameraFocalParams(class UCameraComponent* InCamera, float* OutFocalDistance, float* OutDepthBlurKm, float* OutDepthBlurRadius)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("GSE_CameraUtilFuncLib", "GetCameraFocalParams");

	Params::GSE_CameraUtilFuncLib_GetCameraFocalParams Parms{};

	Parms.InCamera = InCamera;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	if (OutFocalDistance != nullptr)
		*OutFocalDistance = Parms.OutFocalDistance;

	if (OutDepthBlurKm != nullptr)
		*OutDepthBlurKm = Parms.OutDepthBlurKm;

	if (OutDepthBlurRadius != nullptr)
		*OutDepthBlurRadius = Parms.OutDepthBlurRadius;
}


// Function UnrealExtent.GSE_CameraUtilFuncLib.GetCameraViewTarget
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// class APlayerCameraManager*             CameraManager                                          (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class AActor*                           ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class AActor* UGSE_CameraUtilFuncLib::GetCameraViewTarget(class APlayerCameraManager* CameraManager)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("GSE_CameraUtilFuncLib", "GetCameraViewTarget");

	Params::GSE_CameraUtilFuncLib_GetCameraViewTarget Parms{};

	Parms.CameraManager = CameraManager;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function UnrealExtent.GSE_CameraUtilFuncLib.IsPositionInScreenViewport
// (Final, Native, Static, Public, HasOutParams, HasDefaults, BlueprintCallable, BlueprintPure)
// Parameters:
// class UObject*                          WorldContext                                           (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FVector                          Position                                               (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UGSE_CameraUtilFuncLib::IsPositionInScreenViewport(class UObject* WorldContext, const struct FVector& Position)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("GSE_CameraUtilFuncLib", "IsPositionInScreenViewport");

	Params::GSE_CameraUtilFuncLib_IsPositionInScreenViewport Parms{};

	Parms.WorldContext = WorldContext;
	Parms.Position = std::move(Position);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function UnrealExtent.GSE_CameraUtilFuncLib.SetCameraFocalParams
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// class UCameraComponent*                 InCamera                                               (Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   InFocalDistance                                        (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   InDepthBlurKm                                          (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   DepthBlurRadius                                        (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UGSE_CameraUtilFuncLib::SetCameraFocalParams(class UCameraComponent* InCamera, float InFocalDistance, float InDepthBlurKm, float DepthBlurRadius)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("GSE_CameraUtilFuncLib", "SetCameraFocalParams");

	Params::GSE_CameraUtilFuncLib_SetCameraFocalParams Parms{};

	Parms.InCamera = InCamera;
	Parms.InFocalDistance = InFocalDistance;
	Parms.InDepthBlurKm = InDepthBlurKm;
	Parms.DepthBlurRadius = DepthBlurRadius;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function UnrealExtent.GSE_CameraUtilFuncLib.SetLocalPlayerAspectRatioAxisConstraint
// (Final, Native, Static, Public, BlueprintCallable, BlueprintPure)
// Parameters:
// class APlayerController*                PlayerController                                       (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// EAspectRatioAxisConstraint              TargetAspectRatioAxisConstraint                        (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UGSE_CameraUtilFuncLib::SetLocalPlayerAspectRatioAxisConstraint(class APlayerController* PlayerController, EAspectRatioAxisConstraint TargetAspectRatioAxisConstraint)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("GSE_CameraUtilFuncLib", "SetLocalPlayerAspectRatioAxisConstraint");

	Params::GSE_CameraUtilFuncLib_SetLocalPlayerAspectRatioAxisConstraint Parms{};

	Parms.PlayerController = PlayerController;
	Parms.TargetAspectRatioAxisConstraint = TargetAspectRatioAxisConstraint;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function UnrealExtent.GSE_AssetUtilFuncLib.GetAssetDataAsset
// (Final, Native, Static, Public, BlueprintCallable, BlueprintPure)
// Parameters:
// class UAssetDataArray*                  AssetData                                              (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class UObject*                          ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class UObject* UGSE_AssetUtilFuncLib::GetAssetDataAsset(class UAssetDataArray* AssetData)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("GSE_AssetUtilFuncLib", "GetAssetDataAsset");

	Params::GSE_AssetUtilFuncLib_GetAssetDataAsset Parms{};

	Parms.AssetData = AssetData;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function UnrealExtent.GSE_AssetUtilFuncLib.GetAssetDataClass
// (Final, Native, Static, Public, BlueprintCallable, BlueprintPure)
// Parameters:
// class UAssetDataArray*                  AssetData                                              (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class UClass*                           ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class UClass* UGSE_AssetUtilFuncLib::GetAssetDataClass(class UAssetDataArray* AssetData)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("GSE_AssetUtilFuncLib", "GetAssetDataClass");

	Params::GSE_AssetUtilFuncLib_GetAssetDataClass Parms{};

	Parms.AssetData = AssetData;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function UnrealExtent.GSE_AssetUtilFuncLib.GetAssetDataFromPackageObj
// (Final, Native, Static, Public, HasOutParams, BlueprintCallable)
// Parameters:
// TArray<class UObject*>                  PackageObjects                                         (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
// class UAssetDataArray*                  ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class UAssetDataArray* UGSE_AssetUtilFuncLib::GetAssetDataFromPackageObj(const TArray<class UObject*>& PackageObjects)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("GSE_AssetUtilFuncLib", "GetAssetDataFromPackageObj");

	Params::GSE_AssetUtilFuncLib_GetAssetDataFromPackageObj Parms{};

	Parms.PackageObjects = std::move(PackageObjects);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function UnrealExtent.GSE_AssetUtilFuncLib.GetAssetDataTagValue
// (Final, Native, Static, Public, HasOutParams, BlueprintCallable, BlueprintPure)
// Parameters:
// class UAssetDataArray*                  AssetData                                              (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class FName                             TagName                                                (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class FString                           ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class FString UGSE_AssetUtilFuncLib::GetAssetDataTagValue(class UAssetDataArray* AssetData, const class FName& TagName)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("GSE_AssetUtilFuncLib", "GetAssetDataTagValue");

	Params::GSE_AssetUtilFuncLib_GetAssetDataTagValue Parms{};

	Parms.AssetData = AssetData;
	Parms.TagName = TagName;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function UnrealExtent.GSE_AssetUtilFuncLib.GetAssetsByPath
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// TArray<class FString>                   Paths                                                  (Parm, ZeroConstructor, NativeAccessSpecifierPublic)
// class UAssetDataArray*                  ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class UAssetDataArray* UGSE_AssetUtilFuncLib::GetAssetsByPath(const TArray<class FString>& Paths)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("GSE_AssetUtilFuncLib", "GetAssetsByPath");

	Params::GSE_AssetUtilFuncLib_GetAssetsByPath Parms{};

	Parms.Paths = std::move(Paths);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function UnrealExtent.GSE_AssetUtilFuncLib.GetAssetsInFolder
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// class FName                             FolderPath                                             (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    bRecursive                                             (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    bIncludeOnlyOnDiskAssets                               (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class UAssetDataArray*                  ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class UAssetDataArray* UGSE_AssetUtilFuncLib::GetAssetsInFolder(class FName FolderPath, bool bRecursive, bool bIncludeOnlyOnDiskAssets)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("GSE_AssetUtilFuncLib", "GetAssetsInFolder");

	Params::GSE_AssetUtilFuncLib_GetAssetsInFolder Parms{};

	Parms.FolderPath = FolderPath;
	Parms.bRecursive = bRecursive;
	Parms.bIncludeOnlyOnDiskAssets = bIncludeOnlyOnDiskAssets;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function UnrealExtent.GSE_AssetUtilFuncLib.GetDependenciesAssetsFromAssets
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// class UAssetDataArray*                  Assets                                                 (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class UAssetDataArray*                  ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class UAssetDataArray* UGSE_AssetUtilFuncLib::GetDependenciesAssetsFromAssets(class UAssetDataArray* Assets)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("GSE_AssetUtilFuncLib", "GetDependenciesAssetsFromAssets");

	Params::GSE_AssetUtilFuncLib_GetDependenciesAssetsFromAssets Parms{};

	Parms.Assets = Assets;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function UnrealExtent.GSE_AssetUtilFuncLib.GetReferenceAssetsFromAssets
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// class UAssetDataArray*                  Assets                                                 (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class UAssetDataArray*                  ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class UAssetDataArray* UGSE_AssetUtilFuncLib::GetReferenceAssetsFromAssets(class UAssetDataArray* Assets)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("GSE_AssetUtilFuncLib", "GetReferenceAssetsFromAssets");

	Params::GSE_AssetUtilFuncLib_GetReferenceAssetsFromAssets Parms{};

	Parms.Assets = Assets;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function UnrealExtent.GSE_AssetUtilFuncLib.GetReferenceAssetsFromObjects
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// TArray<class UObject*>                  LoadedSourceAssets                                     (Parm, ZeroConstructor, NativeAccessSpecifierPublic)
// class UAssetDataArray*                  ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class UAssetDataArray* UGSE_AssetUtilFuncLib::GetReferenceAssetsFromObjects(const TArray<class UObject*>& LoadedSourceAssets)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("GSE_AssetUtilFuncLib", "GetReferenceAssetsFromObjects");

	Params::GSE_AssetUtilFuncLib_GetReferenceAssetsFromObjects Parms{};

	Parms.LoadedSourceAssets = std::move(LoadedSourceAssets);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function UnrealExtent.GSE_AssetUtilFuncLib.LoadObjectsFromAssetData
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// class UAssetDataArray*                  Assets                                                 (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// TArray<class UObject*>                  ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, NativeAccessSpecifierPublic)

TArray<class UObject*> UGSE_AssetUtilFuncLib::LoadObjectsFromAssetData(class UAssetDataArray* Assets)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("GSE_AssetUtilFuncLib", "LoadObjectsFromAssetData");

	Params::GSE_AssetUtilFuncLib_LoadObjectsFromAssetData Parms{};

	Parms.Assets = Assets;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function UnrealExtent.GSE_LoadingUtilFuncLib.ClientSetBlockOnAsyncLoading
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// class APlayerController*                PlayerController                                       (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UGSE_LoadingUtilFuncLib::ClientSetBlockOnAsyncLoading(class APlayerController* PlayerController)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("GSE_LoadingUtilFuncLib", "ClientSetBlockOnAsyncLoading");

	Params::GSE_LoadingUtilFuncLib_ClientSetBlockOnAsyncLoading Parms{};

	Parms.PlayerController = PlayerController;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function UnrealExtent.GSE_LoadingUtilFuncLib.SyncLoadObject
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// class FString                           Path                                                   (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class UObject*                          ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class UObject* UGSE_LoadingUtilFuncLib::SyncLoadObject(const class FString& Path)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("GSE_LoadingUtilFuncLib", "SyncLoadObject");

	Params::GSE_LoadingUtilFuncLib_SyncLoadObject Parms{};

	Parms.Path = std::move(Path);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function UnrealExtent.GSE_OnlineSocketFuncLib.GetLocalListenIp
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// class UObject*                          WorldContext                                           (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class FString                           ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class FString UGSE_OnlineSocketFuncLib::GetLocalListenIp(class UObject* WorldContext)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("GSE_OnlineSocketFuncLib", "GetLocalListenIp");

	Params::GSE_OnlineSocketFuncLib_GetLocalListenIp Parms{};

	Parms.WorldContext = WorldContext;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function UnrealExtent.GSE_OnlineSocketFuncLib.GetLocalListenPort
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// class UObject*                          WorldContext                                           (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

int32 UGSE_OnlineSocketFuncLib::GetLocalListenPort(class UObject* WorldContext)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("GSE_OnlineSocketFuncLib", "GetLocalListenPort");

	Params::GSE_OnlineSocketFuncLib_GetLocalListenPort Parms{};

	Parms.WorldContext = WorldContext;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function UnrealExtent.GSE_TraceFuncLib.CharacterCapsuleTraceSingleByProfile
// (Final, Native, Static, Public, HasOutParams, HasDefaults, BlueprintCallable)
// Parameters:
// class UObject*                          WorldContextObject                                     (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FVector                          Start                                                  (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FVector                          End                                                    (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   Radius                                                 (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   HalfHeight                                             (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class FName                             ProfileName                                            (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    bTraceComplex                                          (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class AActor*                           IgnoreActor                                            (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FVector                          OutHitLocation                                         (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UGSE_TraceFuncLib::CharacterCapsuleTraceSingleByProfile(const class UObject* WorldContextObject, const struct FVector& Start, const struct FVector& End, float Radius, float HalfHeight, class FName ProfileName, bool bTraceComplex, class AActor* IgnoreActor, struct FVector* OutHitLocation)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("GSE_TraceFuncLib", "CharacterCapsuleTraceSingleByProfile");

	Params::GSE_TraceFuncLib_CharacterCapsuleTraceSingleByProfile Parms{};

	Parms.WorldContextObject = WorldContextObject;
	Parms.Start = std::move(Start);
	Parms.End = std::move(End);
	Parms.Radius = Radius;
	Parms.HalfHeight = HalfHeight;
	Parms.ProfileName = ProfileName;
	Parms.bTraceComplex = bTraceComplex;
	Parms.IgnoreActor = IgnoreActor;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	if (OutHitLocation != nullptr)
		*OutHitLocation = std::move(Parms.OutHitLocation);

	return Parms.ReturnValue;
}


// Function UnrealExtent.GSE_OverlapFuncLib.BoxOverlapActorsByProfile
// (Final, Native, Static, Public, HasOutParams, HasDefaults, BlueprintCallable)
// Parameters:
// class UObject*                          WorldContextObject                                     (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FVector                          BoxPos                                                 (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FVector                          BoxExtent                                              (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class FName                             ProfileName                                            (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class UClass*                           ActorClassFilter                                       (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// TArray<class AActor*>                   ActorsToIgnore                                         (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
// TArray<class AActor*>                   OutActors                                              (Parm, OutParm, ZeroConstructor, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UGSE_OverlapFuncLib::BoxOverlapActorsByProfile(const class UObject* WorldContextObject, const struct FVector& BoxPos, const struct FVector& BoxExtent, class FName ProfileName, class UClass* ActorClassFilter, const TArray<class AActor*>& ActorsToIgnore, TArray<class AActor*>* OutActors)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("GSE_OverlapFuncLib", "BoxOverlapActorsByProfile");

	Params::GSE_OverlapFuncLib_BoxOverlapActorsByProfile Parms{};

	Parms.WorldContextObject = WorldContextObject;
	Parms.BoxPos = std::move(BoxPos);
	Parms.BoxExtent = std::move(BoxExtent);
	Parms.ProfileName = ProfileName;
	Parms.ActorClassFilter = ActorClassFilter;
	Parms.ActorsToIgnore = std::move(ActorsToIgnore);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	if (OutActors != nullptr)
		*OutActors = std::move(Parms.OutActors);

	return Parms.ReturnValue;
}


// Function UnrealExtent.GSE_OverlapFuncLib.BoxOverlapComponentsByProfile
// (Final, Native, Static, Public, HasOutParams, HasDefaults, BlueprintCallable)
// Parameters:
// class UObject*                          WorldContextObject                                     (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FVector                          BoxPos                                                 (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FVector                          BoxExtent                                              (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class FName                             ProfileName                                            (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class UClass*                           ComponentClassFilter                                   (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// TArray<class AActor*>                   ActorsToIgnore                                         (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
// TArray<class UPrimitiveComponent*>      OutComponents                                          (Parm, OutParm, ZeroConstructor, ContainsInstancedReference, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UGSE_OverlapFuncLib::BoxOverlapComponentsByProfile(const class UObject* WorldContextObject, const struct FVector& BoxPos, const struct FVector& BoxExtent, class FName ProfileName, class UClass* ComponentClassFilter, const TArray<class AActor*>& ActorsToIgnore, TArray<class UPrimitiveComponent*>* OutComponents)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("GSE_OverlapFuncLib", "BoxOverlapComponentsByProfile");

	Params::GSE_OverlapFuncLib_BoxOverlapComponentsByProfile Parms{};

	Parms.WorldContextObject = WorldContextObject;
	Parms.BoxPos = std::move(BoxPos);
	Parms.BoxExtent = std::move(BoxExtent);
	Parms.ProfileName = ProfileName;
	Parms.ComponentClassFilter = ComponentClassFilter;
	Parms.ActorsToIgnore = std::move(ActorsToIgnore);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	if (OutComponents != nullptr)
		*OutComponents = std::move(Parms.OutComponents);

	return Parms.ReturnValue;
}


// Function UnrealExtent.GSE_FileFuncLib.AndroidExtractFolderFromApk
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// class FString                           SrcPath                                                (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class FString                           DestPath                                               (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UGSE_FileFuncLib::AndroidExtractFolderFromApk(const class FString& SrcPath, const class FString& DestPath)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("GSE_FileFuncLib", "AndroidExtractFolderFromApk");

	Params::GSE_FileFuncLib_AndroidExtractFolderFromApk Parms{};

	Parms.SrcPath = std::move(SrcPath);
	Parms.DestPath = std::move(DestPath);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function UnrealExtent.GSE_FileFuncLib.AndroidHasFileInApk
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// class FString                           SrcPath                                                (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UGSE_FileFuncLib::AndroidHasFileInApk(const class FString& SrcPath)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("GSE_FileFuncLib", "AndroidHasFileInApk");

	Params::GSE_FileFuncLib_AndroidHasFileInApk Parms{};

	Parms.SrcPath = std::move(SrcPath);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function UnrealExtent.GSE_FileFuncLib.ExtractDirToPath
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// class FString                           Src                                                    (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class FString                           Dest                                                   (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UGSE_FileFuncLib::ExtractDirToPath(const class FString& Src, const class FString& Dest)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("GSE_FileFuncLib", "ExtractDirToPath");

	Params::GSE_FileFuncLib_ExtractDirToPath Parms{};

	Parms.Src = std::move(Src);
	Parms.Dest = std::move(Dest);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function UnrealExtent.GSE_FileFuncLib.ExtractFileToPath
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// class FString                           Src                                                    (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class FString                           Dest                                                   (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UGSE_FileFuncLib::ExtractFileToPath(const class FString& Src, const class FString& Dest)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("GSE_FileFuncLib", "ExtractFileToPath");

	Params::GSE_FileFuncLib_ExtractFileToPath Parms{};

	Parms.Src = std::move(Src);
	Parms.Dest = std::move(Dest);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function UnrealExtent.GSE_FileFuncLib.FindFiles
// (Final, Native, Static, Public, HasOutParams, BlueprintCallable)
// Parameters:
// class FString                           Directory                                              (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// TArray<class FString>                   FoundFiles                                             (Parm, OutParm, ZeroConstructor, NativeAccessSpecifierPublic)
// class FString                           FileExtension                                          (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UGSE_FileFuncLib::FindFiles(const class FString& Directory, TArray<class FString>* FoundFiles, const class FString& FileExtension)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("GSE_FileFuncLib", "FindFiles");

	Params::GSE_FileFuncLib_FindFiles Parms{};

	Parms.Directory = std::move(Directory);
	Parms.FileExtension = std::move(FileExtension);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	if (FoundFiles != nullptr)
		*FoundFiles = std::move(Parms.FoundFiles);

	return Parms.ReturnValue;
}


// Function UnrealExtent.GSE_FileFuncLib.FindFilesRecursively
// (Final, Native, Static, Public, HasOutParams, BlueprintCallable)
// Parameters:
// class FString                           Directory                                              (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// TArray<class FString>                   FoundFiles                                             (Parm, OutParm, ZeroConstructor, NativeAccessSpecifierPublic)
// class FString                           FileExtension                                          (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UGSE_FileFuncLib::FindFilesRecursively(const class FString& Directory, TArray<class FString>* FoundFiles, const class FString& FileExtension)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("GSE_FileFuncLib", "FindFilesRecursively");

	Params::GSE_FileFuncLib_FindFilesRecursively Parms{};

	Parms.Directory = std::move(Directory);
	Parms.FileExtension = std::move(FileExtension);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	if (FoundFiles != nullptr)
		*FoundFiles = std::move(Parms.FoundFiles);

	return Parms.ReturnValue;
}


// Function UnrealExtent.GSE_FileFuncLib.LoadFileToArray
// (Final, Native, Static, Public, HasOutParams, BlueprintCallable)
// Parameters:
// class FString                           Path                                                   (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// TArray<uint8>                           FileData                                               (Parm, OutParm, ZeroConstructor, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UGSE_FileFuncLib::LoadFileToArray(const class FString& Path, TArray<uint8>* FileData)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("GSE_FileFuncLib", "LoadFileToArray");

	Params::GSE_FileFuncLib_LoadFileToArray Parms{};

	Parms.Path = std::move(Path);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	if (FileData != nullptr)
		*FileData = std::move(Parms.FileData);

	return Parms.ReturnValue;
}


// Function UnrealExtent.GSE_FileFuncLib.MountAllPakFiles
// (Final, Native, Static, Public, HasOutParams, BlueprintCallable)
// Parameters:
// TArray<class FString>                   PakFolders                                             (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UGSE_FileFuncLib::MountAllPakFiles(const TArray<class FString>& PakFolders)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("GSE_FileFuncLib", "MountAllPakFiles");

	Params::GSE_FileFuncLib_MountAllPakFiles Parms{};

	Parms.PakFolders = std::move(PakFolders);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function UnrealExtent.GSE_FileFuncLib.MountPak
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// class FString                           InPakFilename                                          (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32                                   PakOrder                                               (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UGSE_FileFuncLib::MountPak(const class FString& InPakFilename, int32 PakOrder)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("GSE_FileFuncLib", "MountPak");

	Params::GSE_FileFuncLib_MountPak Parms{};

	Parms.InPakFilename = std::move(InPakFilename);
	Parms.PakOrder = PakOrder;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function UnrealExtent.GSE_FileFuncLib.MountPakWithInPath
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// class FString                           InPakFilename                                          (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32                                   PakOrder                                               (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class FString                           InPath                                                 (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UGSE_FileFuncLib::MountPakWithInPath(const class FString& InPakFilename, int32 PakOrder, const class FString& InPath)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("GSE_FileFuncLib", "MountPakWithInPath");

	Params::GSE_FileFuncLib_MountPakWithInPath Parms{};

	Parms.InPakFilename = std::move(InPakFilename);
	Parms.PakOrder = PakOrder;
	Parms.InPath = std::move(InPath);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function UnrealExtent.GSE_FileFuncLib.ReadFile
// (Final, Native, Static, Public, HasOutParams, BlueprintCallable)
// Parameters:
// class FString                           Path                                                   (ConstParm, Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// TArray<uint8>                           BytesToRead                                            (Parm, OutParm, ZeroConstructor, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UGSE_FileFuncLib::ReadFile(const class FString& Path, TArray<uint8>* BytesToRead)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("GSE_FileFuncLib", "ReadFile");

	Params::GSE_FileFuncLib_ReadFile Parms{};

	Parms.Path = std::move(Path);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	if (BytesToRead != nullptr)
		*BytesToRead = std::move(Parms.BytesToRead);

	return Parms.ReturnValue;
}


// Function UnrealExtent.GSE_GamePresetsFuncLib.GetPlatformGamePresets
// (Final, Native, Static, Public, HasOutParams, BlueprintCallable)
// Parameters:
// struct FGamePresets                     GamePresets                                            (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UGSE_GamePresetsFuncLib::GetPlatformGamePresets(struct FGamePresets* GamePresets)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("GSE_GamePresetsFuncLib", "GetPlatformGamePresets");

	Params::GSE_GamePresetsFuncLib_GetPlatformGamePresets Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	if (GamePresets != nullptr)
		*GamePresets = std::move(Parms.GamePresets);

	return Parms.ReturnValue;
}


// Function UnrealExtent.GSE_GSGameSettingsFuncLib.ApplyGSGameResolutionSettings
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// bool                                    bSaveSettings                                          (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UGSE_GSGameSettingsFuncLib::ApplyGSGameResolutionSettings(bool bSaveSettings)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("GSE_GSGameSettingsFuncLib", "ApplyGSGameResolutionSettings");

	Params::GSE_GSGameSettingsFuncLib_ApplyGSGameResolutionSettings Parms{};

	Parms.bSaveSettings = bSaveSettings;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function UnrealExtent.GSE_GSGameSettingsFuncLib.ApplyGSGameSettings
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// bool                                    bSaveSettings                                          (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UGSE_GSGameSettingsFuncLib::ApplyGSGameSettings(bool bSaveSettings)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("GSE_GSGameSettingsFuncLib", "ApplyGSGameSettings");

	Params::GSE_GSGameSettingsFuncLib_ApplyGSGameSettings Parms{};

	Parms.bSaveSettings = bSaveSettings;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function UnrealExtent.GSE_GSGameSettingsFuncLib.GetCurGameMainScreen
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// int32                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

int32 UGSE_GSGameSettingsFuncLib::GetCurGameMainScreen()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("GSE_GSGameSettingsFuncLib", "GetCurGameMainScreen");

	Params::GSE_GSGameSettingsFuncLib_GetCurGameMainScreen Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function UnrealExtent.GSE_GSGameSettingsFuncLib.GetDefaultLanguage
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// class FString                           ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class FString UGSE_GSGameSettingsFuncLib::GetDefaultLanguage()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("GSE_GSGameSettingsFuncLib", "GetDefaultLanguage");

	Params::GSE_GSGameSettingsFuncLib_GetDefaultLanguage Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function UnrealExtent.GSE_GSGameSettingsFuncLib.GetGRHISupportsRayTracing
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UGSE_GSGameSettingsFuncLib::GetGRHISupportsRayTracing()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("GSE_GSGameSettingsFuncLib", "GetGRHISupportsRayTracing");

	Params::GSE_GSGameSettingsFuncLib_GetGRHISupportsRayTracing Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function UnrealExtent.GSE_GSGameSettingsFuncLib.GetIsHDRViewport
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// class UWorld*                           World                                                  (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UGSE_GSGameSettingsFuncLib::GetIsHDRViewport(class UWorld* World)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("GSE_GSGameSettingsFuncLib", "GetIsHDRViewport");

	Params::GSE_GSGameSettingsFuncLib_GetIsHDRViewport Parms{};

	Parms.World = World;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function UnrealExtent.GSE_GSGameSettingsFuncLib.GetMainMonitorID
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// class FString                           ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class FString UGSE_GSGameSettingsFuncLib::GetMainMonitorID()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("GSE_GSGameSettingsFuncLib", "GetMainMonitorID");

	Params::GSE_GSGameSettingsFuncLib_GetMainMonitorID Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function UnrealExtent.GSE_GSGameSettingsFuncLib.GetRHIAdapterName
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// class FString                           ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class FString UGSE_GSGameSettingsFuncLib::GetRHIAdapterName()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("GSE_GSGameSettingsFuncLib", "GetRHIAdapterName");

	Params::GSE_GSGameSettingsFuncLib_GetRHIAdapterName Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function UnrealExtent.GSE_GSGameSettingsFuncLib.IsLowFeatureLevelGPU
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UGSE_GSGameSettingsFuncLib::IsLowFeatureLevelGPU()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("GSE_GSGameSettingsFuncLib", "IsLowFeatureLevelGPU");

	Params::GSE_GSGameSettingsFuncLib_IsLowFeatureLevelGPU Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function UnrealExtent.GSE_GSGameSettingsFuncLib.SetRayTracingQuality
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// int32                                   RTXLevel                                               (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UGSE_GSGameSettingsFuncLib::SetRayTracingQuality(int32 RTXLevel)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("GSE_GSGameSettingsFuncLib", "SetRayTracingQuality");

	Params::GSE_GSGameSettingsFuncLib_SetRayTracingQuality Parms{};

	Parms.RTXLevel = RTXLevel;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function UnrealExtent.GSE_GSGameSettingsFuncLib.SetXeSSPercentage
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// float                                   Percentage                                             (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UGSE_GSGameSettingsFuncLib::SetXeSSPercentage(float Percentage)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("GSE_GSGameSettingsFuncLib", "SetXeSSPercentage");

	Params::GSE_GSGameSettingsFuncLib_SetXeSSPercentage Parms{};

	Parms.Percentage = Percentage;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function UnrealExtent.GSE_LandscapeFuncLib.AddLocationsToStreamingManager
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// TArray<struct FVector>                  Locations                                              (Parm, ZeroConstructor, NativeAccessSpecifierPublic)
// float                                   Duration                                               (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UGSE_LandscapeFuncLib::AddLocationsToStreamingManager(const TArray<struct FVector>& Locations, float Duration)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("GSE_LandscapeFuncLib", "AddLocationsToStreamingManager");

	Params::GSE_LandscapeFuncLib_AddLocationsToStreamingManager Parms{};

	Parms.Locations = std::move(Locations);
	Parms.Duration = Duration;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function UnrealExtent.GSE_LandscapeFuncLib.GetLandscapeOriginOffset
// (Final, Native, Static, Public, HasDefaults, BlueprintCallable)
// Parameters:
// class AActor*                           LandscapeActor                                         (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FVector                          ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

struct FVector UGSE_LandscapeFuncLib::GetLandscapeOriginOffset(class AActor* LandscapeActor)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("GSE_LandscapeFuncLib", "GetLandscapeOriginOffset");

	Params::GSE_LandscapeFuncLib_GetLandscapeOriginOffset Parms{};

	Parms.LandscapeActor = LandscapeActor;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function UnrealExtent.GSE_LandscapeFuncLib.RecreateLandscapeActorByProxy
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// class AActor*                           LandscapeProxy                                         (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UGSE_LandscapeFuncLib::RecreateLandscapeActorByProxy(class AActor* LandscapeProxy)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("GSE_LandscapeFuncLib", "RecreateLandscapeActorByProxy");

	Params::GSE_LandscapeFuncLib_RecreateLandscapeActorByProxy Parms{};

	Parms.LandscapeProxy = LandscapeProxy;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function UnrealExtent.GSE_LandscapeFuncLib.SaveLandscapeLayerWeightTex
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// class FString                           PackagePath                                            (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class FString                           AssetName                                              (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class AActor*                           LandscapeActor                                         (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class FString                           LayerName                                              (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class UTexture2D*                       ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class UTexture2D* UGSE_LandscapeFuncLib::SaveLandscapeLayerWeightTex(const class FString& PackagePath, const class FString& AssetName, class AActor* LandscapeActor, const class FString& LayerName)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("GSE_LandscapeFuncLib", "SaveLandscapeLayerWeightTex");

	Params::GSE_LandscapeFuncLib_SaveLandscapeLayerWeightTex Parms{};

	Parms.PackagePath = std::move(PackagePath);
	Parms.AssetName = std::move(AssetName);
	Parms.LandscapeActor = LandscapeActor;
	Parms.LayerName = std::move(LayerName);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function UnrealExtent.GSE_LandscapeFuncLib.SaveLandscapeWeight
// (Final, Native, Static, Public, HasDefaults, BlueprintCallable)
// Parameters:
// class FString                           PackagePath                                            (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class AActor*                           LandscapeActor                                         (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FVector                          ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

struct FVector UGSE_LandscapeFuncLib::SaveLandscapeWeight(const class FString& PackagePath, class AActor* LandscapeActor)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("GSE_LandscapeFuncLib", "SaveLandscapeWeight");

	Params::GSE_LandscapeFuncLib_SaveLandscapeWeight Parms{};

	Parms.PackagePath = std::move(PackagePath);
	Parms.LandscapeActor = LandscapeActor;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function UnrealExtent.GSE_NavigationFuncLib.SetCollisionNavAreaClass
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// class UShapeComponent*                  Collision                                              (Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// TSubclassOf<class UNavAreaBase>         AreaClass                                              (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UGSE_NavigationFuncLib::SetCollisionNavAreaClass(class UShapeComponent* Collision, TSubclassOf<class UNavAreaBase> AreaClass)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("GSE_NavigationFuncLib", "SetCollisionNavAreaClass");

	Params::GSE_NavigationFuncLib_SetCollisionNavAreaClass Parms{};

	Parms.Collision = Collision;
	Parms.AreaClass = AreaClass;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function UnrealExtent.GSE_NavigationFuncLib.SetCollisionNavDynamicObstacle
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// class UShapeComponent*                  Collision                                              (Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    bDynamicObstacle                                       (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UGSE_NavigationFuncLib::SetCollisionNavDynamicObstacle(class UShapeComponent* Collision, bool bDynamicObstacle)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("GSE_NavigationFuncLib", "SetCollisionNavDynamicObstacle");

	Params::GSE_NavigationFuncLib_SetCollisionNavDynamicObstacle Parms{};

	Parms.Collision = Collision;
	Parms.bDynamicObstacle = bDynamicObstacle;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function UnrealExtent.GSE_NiagaraFuncLib.ForceDestroyNiagaraComponent
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// class UNiagaraComponent*                NC                                                     (Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UGSE_NiagaraFuncLib::ForceDestroyNiagaraComponent(class UNiagaraComponent* NC)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("GSE_NiagaraFuncLib", "ForceDestroyNiagaraComponent");

	Params::GSE_NiagaraFuncLib_ForceDestroyNiagaraComponent Parms{};

	Parms.NC = NC;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function UnrealExtent.GSE_NiagaraFuncLib.GetNiagaraComponentPoolMethod
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// class UNiagaraComponent*                NC                                                     (Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// ENCPoolMethod                           ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

ENCPoolMethod UGSE_NiagaraFuncLib::GetNiagaraComponentPoolMethod(class UNiagaraComponent* NC)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("GSE_NiagaraFuncLib", "GetNiagaraComponentPoolMethod");

	Params::GSE_NiagaraFuncLib_GetNiagaraComponentPoolMethod Parms{};

	Parms.NC = NC;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function UnrealExtent.GSE_NiagaraFuncLib.SetEffectTypeManagerState
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// EEffectTypeManagerCullMode              NewMode                                                (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UGSE_NiagaraFuncLib::SetEffectTypeManagerState(EEffectTypeManagerCullMode NewMode)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("GSE_NiagaraFuncLib", "SetEffectTypeManagerState");

	Params::GSE_NiagaraFuncLib_SetEffectTypeManagerState Parms{};

	Parms.NewMode = NewMode;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function UnrealExtent.GSE_NiagaraFuncLib.SetTextureParameterValueOnMeshRenderMaterials
// (Final, Native, Static, Public, HasOutParams, BlueprintCallable)
// Parameters:
// class UNiagaraComponent*                NiagaraComponent                                       (Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class FName                             ParameterName                                          (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class UTexture*                         ParameterValue                                         (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UGSE_NiagaraFuncLib::SetTextureParameterValueOnMeshRenderMaterials(class UNiagaraComponent* NiagaraComponent, const class FName& ParameterName, class UTexture* ParameterValue)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("GSE_NiagaraFuncLib", "SetTextureParameterValueOnMeshRenderMaterials");

	Params::GSE_NiagaraFuncLib_SetTextureParameterValueOnMeshRenderMaterials Parms{};

	Parms.NiagaraComponent = NiagaraComponent;
	Parms.ParameterName = ParameterName;
	Parms.ParameterValue = ParameterValue;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function UnrealExtent.GSE_SaveGameFuncLib.GetAllSaveGameSlotNames
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// TArray<class FString>                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, NativeAccessSpecifierPublic)

TArray<class FString> UGSE_SaveGameFuncLib::GetAllSaveGameSlotNames()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("GSE_SaveGameFuncLib", "GetAllSaveGameSlotNames");

	Params::GSE_SaveGameFuncLib_GetAllSaveGameSlotNames Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function UnrealExtent.GSE_SaveGameFuncLib.LoadDataFromSlot
// (Final, Native, Static, Public, HasOutParams, BlueprintCallable)
// Parameters:
// TArray<uint8>                           OutSaveData                                            (Parm, OutParm, ZeroConstructor, NativeAccessSpecifierPublic)
// class FString                           SlotName                                               (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32                                   UserIndex                                              (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UGSE_SaveGameFuncLib::LoadDataFromSlot(TArray<uint8>* OutSaveData, const class FString& SlotName, const int32 UserIndex)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("GSE_SaveGameFuncLib", "LoadDataFromSlot");

	Params::GSE_SaveGameFuncLib_LoadDataFromSlot Parms{};

	Parms.SlotName = std::move(SlotName);
	Parms.UserIndex = UserIndex;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	if (OutSaveData != nullptr)
		*OutSaveData = std::move(Parms.OutSaveData);

	return Parms.ReturnValue;
}


// Function UnrealExtent.GSE_SaveGameFuncLib.SaveDataToSlot
// (Final, Native, Static, Public, HasOutParams, BlueprintCallable)
// Parameters:
// TArray<uint8>                           InSaveData                                             (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
// class FString                           SlotName                                               (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32                                   UserIndex                                              (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UGSE_SaveGameFuncLib::SaveDataToSlot(const TArray<uint8>& InSaveData, const class FString& SlotName, const int32 UserIndex)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("GSE_SaveGameFuncLib", "SaveDataToSlot");

	Params::GSE_SaveGameFuncLib_SaveDataToSlot Parms{};

	Parms.InSaveData = std::move(InSaveData);
	Parms.SlotName = std::move(SlotName);
	Parms.UserIndex = UserIndex;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function UnrealExtent.HttpResposeListener.OnReponseComplete
// (Native, Event, Public, HasOutParams, BlueprintEvent)
// Parameters:
// bool                                    bSuccess                                               (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32                                   HttpCode                                               (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// TArray<uint8>                           Content                                                (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)

void UHttpResposeListener::OnReponseComplete(bool bSuccess, int32 HttpCode, const TArray<uint8>& Content)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("HttpResposeListener", "OnReponseComplete");

	Params::HttpResposeListener_OnReponseComplete Parms{};

	Parms.bSuccess = bSuccess;
	Parms.HttpCode = HttpCode;
	Parms.Content = std::move(Content);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function UnrealExtent.HttpResposeListener.OnRequestProgress
// (Native, Event, Public, BlueprintEvent)
// Parameters:
// int32                                   SentBytes                                              (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32                                   LReceivedBytes                                         (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32                                   LTotalBytes                                            (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UHttpResposeListener::OnRequestProgress(int32 SentBytes, int32 LReceivedBytes, int32 LTotalBytes)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("HttpResposeListener", "OnRequestProgress");

	Params::HttpResposeListener_OnRequestProgress Parms{};

	Parms.SentBytes = SentBytes;
	Parms.LReceivedBytes = LReceivedBytes;
	Parms.LTotalBytes = LTotalBytes;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function UnrealExtent.HttpResposeListener.IsNeedProgress
// (Native, Event, Public, BlueprintEvent, Const)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UHttpResposeListener::IsNeedProgress() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("HttpResposeListener", "IsNeedProgress");

	Params::HttpResposeListener_IsNeedProgress Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function UnrealExtent.GSE_SDKFuncLib.AddCrashUserData
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// class FString                           Key                                                    (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class FString                           Value                                                  (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UGSE_SDKFuncLib::AddCrashUserData(const class FString& Key, const class FString& Value)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("GSE_SDKFuncLib", "AddCrashUserData");

	Params::GSE_SDKFuncLib_AddCrashUserData Parms{};

	Parms.Key = std::move(Key);
	Parms.Value = std::move(Value);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function UnrealExtent.GSE_SDKFuncLib.FCommandLine_AddArg
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// class FString                           Command                                                (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UGSE_SDKFuncLib::FCommandLine_AddArg(const class FString& Command)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("GSE_SDKFuncLib", "FCommandLine_AddArg");

	Params::GSE_SDKFuncLib_FCommandLine_AddArg Parms{};

	Parms.Command = std::move(Command);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function UnrealExtent.GSE_SDKFuncLib.FCommandLine_Get
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// class FString                           ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class FString UGSE_SDKFuncLib::FCommandLine_Get()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("GSE_SDKFuncLib", "FCommandLine_Get");

	Params::GSE_SDKFuncLib_FCommandLine_Get Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function UnrealExtent.GSE_SDKFuncLib.GetGameRunEnvContext
// (Final, Native, Static, Public, HasOutParams, BlueprintCallable)
// Parameters:
// TMap<class FString, class FString>      OutContext                                             (Parm, OutParm, NativeAccessSpecifierPublic)

void UGSE_SDKFuncLib::GetGameRunEnvContext(TMap<class FString, class FString>* OutContext)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("GSE_SDKFuncLib", "GetGameRunEnvContext");

	Params::GSE_SDKFuncLib_GetGameRunEnvContext Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	if (OutContext != nullptr)
		*OutContext = std::move(Parms.OutContext);
}


// Function UnrealExtent.GSE_SDKFuncLib.GetIOSBundlePath
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// class FString                           ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class FString UGSE_SDKFuncLib::GetIOSBundlePath()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("GSE_SDKFuncLib", "GetIOSBundlePath");

	Params::GSE_SDKFuncLib_GetIOSBundlePath Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function UnrealExtent.GSE_SDKFuncLib.GetIOSDocumentPath
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// class FString                           ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class FString UGSE_SDKFuncLib::GetIOSDocumentPath()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("GSE_SDKFuncLib", "GetIOSDocumentPath");

	Params::GSE_SDKFuncLib_GetIOSDocumentPath Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function UnrealExtent.GSE_SDKFuncLib.GetNatInfo
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// EBGWNATType                             ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

EBGWNATType UGSE_SDKFuncLib::GetNatInfo()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("GSE_SDKFuncLib", "GetNatInfo");

	Params::GSE_SDKFuncLib_GetNatInfo Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function UnrealExtent.GSE_SDKFuncLib.GetPS5UserAccountRegionCode
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// class FString                           ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class FString UGSE_SDKFuncLib::GetPS5UserAccountRegionCode()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("GSE_SDKFuncLib", "GetPS5UserAccountRegionCode");

	Params::GSE_SDKFuncLib_GetPS5UserAccountRegionCode Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function UnrealExtent.GSE_SDKFuncLib.GetPS5UserDefinedParam
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// int32                                   Index_0                                                (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

int32 UGSE_SDKFuncLib::GetPS5UserDefinedParam(int32 Index_0)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("GSE_SDKFuncLib", "GetPS5UserDefinedParam");

	Params::GSE_SDKFuncLib_GetPS5UserDefinedParam Parms{};

	Parms.Index_0 = Index_0;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function UnrealExtent.GSE_SDKFuncLib.HttpPostFile
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// class FString                           PostUrl                                                (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// TMap<class FString, class FString>      ExHeaders                                              (Parm, NativeAccessSpecifierPublic)
// class FString                           FilePath                                               (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class UHttpResposeListener*             Listener                                               (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UGSE_SDKFuncLib::HttpPostFile(const class FString& PostUrl, const TMap<class FString, class FString>& ExHeaders, const class FString& FilePath, class UHttpResposeListener* Listener)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("GSE_SDKFuncLib", "HttpPostFile");

	Params::GSE_SDKFuncLib_HttpPostFile Parms{};

	Parms.PostUrl = std::move(PostUrl);
	Parms.ExHeaders = std::move(ExHeaders);
	Parms.FilePath = std::move(FilePath);
	Parms.Listener = Listener;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function UnrealExtent.GSE_SDKFuncLib.HttpPostFileContent
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// class FString                           PostUrl                                                (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// TMap<class FString, class FString>      ExHeaders                                              (Parm, NativeAccessSpecifierPublic)
// class FString                           Filename                                               (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// TArray<uint8>                           FileContentData                                        (ConstParm, Parm, ZeroConstructor, NativeAccessSpecifierPublic)
// class UHttpResposeListener*             Listener                                               (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UGSE_SDKFuncLib::HttpPostFileContent(const class FString& PostUrl, const TMap<class FString, class FString>& ExHeaders, const class FString& Filename, const TArray<uint8>& FileContentData, class UHttpResposeListener* Listener)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("GSE_SDKFuncLib", "HttpPostFileContent");

	Params::GSE_SDKFuncLib_HttpPostFileContent Parms{};

	Parms.PostUrl = std::move(PostUrl);
	Parms.ExHeaders = std::move(ExHeaders);
	Parms.Filename = std::move(Filename);
	Parms.FileContentData = std::move(FileContentData);
	Parms.Listener = Listener;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function UnrealExtent.GSE_SDKFuncLib.HttpPostFileList
// (Final, Native, Static, Public, HasOutParams, BlueprintCallable)
// Parameters:
// class FString                           PostUrl                                                (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// TMap<class FString, class FString>      ExHeaders                                              (Parm, NativeAccessSpecifierPublic)
// TArray<class FString>                   FilePathList                                           (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
// class UHttpResposeListener*             Listener                                               (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UGSE_SDKFuncLib::HttpPostFileList(const class FString& PostUrl, const TMap<class FString, class FString>& ExHeaders, const TArray<class FString>& FilePathList, class UHttpResposeListener* Listener)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("GSE_SDKFuncLib", "HttpPostFileList");

	Params::GSE_SDKFuncLib_HttpPostFileList Parms{};

	Parms.PostUrl = std::move(PostUrl);
	Parms.ExHeaders = std::move(ExHeaders);
	Parms.FilePathList = std::move(FilePathList);
	Parms.Listener = Listener;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function UnrealExtent.GSE_SDKFuncLib.IsCleanVersion
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UGSE_SDKFuncLib::IsCleanVersion()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("GSE_SDKFuncLib", "IsCleanVersion");

	Params::GSE_SDKFuncLib_IsCleanVersion Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function UnrealExtent.GSE_SDKFuncLib.IsPureVersion
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UGSE_SDKFuncLib::IsPureVersion()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("GSE_SDKFuncLib", "IsPureVersion");

	Params::GSE_SDKFuncLib_IsPureVersion Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function UnrealExtent.GSE_SDKFuncLib.NonGameThreadStartHttpRawDataRequestWithBlockMode
// (Final, Native, Static, Public, HasOutParams, BlueprintCallable)
// Parameters:
// class FString                           URL                                                    (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class FString                           Method                                                 (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// TMap<class FString, class FString>      ExHeaders                                              (Parm, NativeAccessSpecifierPublic)
// TArray<uint8>                           PostRawData                                            (ConstParm, Parm, ZeroConstructor, NativeAccessSpecifierPublic)
// int32                                   RequestTimeout                                         (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// TMap<class FString, class FString>      OutResponse                                            (Parm, OutParm, NativeAccessSpecifierPublic)
// int32                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

int32 UGSE_SDKFuncLib::NonGameThreadStartHttpRawDataRequestWithBlockMode(const class FString& URL, const class FString& Method, const TMap<class FString, class FString>& ExHeaders, const TArray<uint8>& PostRawData, int32 RequestTimeout, TMap<class FString, class FString>* OutResponse)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("GSE_SDKFuncLib", "NonGameThreadStartHttpRawDataRequestWithBlockMode");

	Params::GSE_SDKFuncLib_NonGameThreadStartHttpRawDataRequestWithBlockMode Parms{};

	Parms.URL = std::move(URL);
	Parms.Method = std::move(Method);
	Parms.ExHeaders = std::move(ExHeaders);
	Parms.PostRawData = std::move(PostRawData);
	Parms.RequestTimeout = RequestTimeout;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	if (OutResponse != nullptr)
		*OutResponse = std::move(Parms.OutResponse);

	return Parms.ReturnValue;
}


// Function UnrealExtent.GSE_SDKFuncLib.PostException
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// int32                                   Type                                                   (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class FString                           Name_0                                                 (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class FString                           Message                                                (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class FString                           StackTrace                                             (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UGSE_SDKFuncLib::PostException(int32 Type, const class FString& Name_0, const class FString& Message, const class FString& StackTrace)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("GSE_SDKFuncLib", "PostException");

	Params::GSE_SDKFuncLib_PostException Parms{};

	Parms.Type = Type;
	Parms.Name_0 = std::move(Name_0);
	Parms.Message = std::move(Message);
	Parms.StackTrace = std::move(StackTrace);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function UnrealExtent.GSE_SDKFuncLib.PostExceptionSample
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// class FString                           Message                                                (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UGSE_SDKFuncLib::PostExceptionSample(const class FString& Message)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("GSE_SDKFuncLib", "PostExceptionSample");

	Params::GSE_SDKFuncLib_PostExceptionSample Parms{};

	Parms.Message = std::move(Message);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function UnrealExtent.GSE_SDKFuncLib.PrintCachedEntitlements
// (Final, Native, Static, Public, BlueprintCallable)

void UGSE_SDKFuncLib::PrintCachedEntitlements()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("GSE_SDKFuncLib", "PrintCachedEntitlements");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function UnrealExtent.GSE_SDKFuncLib.SentryCrashReporterSetContext
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// class FString                           Key                                                    (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// TMap<class FString, class FString>      ContextValues                                          (Parm, NativeAccessSpecifierPublic)

void UGSE_SDKFuncLib::SentryCrashReporterSetContext(const class FString& Key, const TMap<class FString, class FString>& ContextValues)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("GSE_SDKFuncLib", "SentryCrashReporterSetContext");

	Params::GSE_SDKFuncLib_SentryCrashReporterSetContext Parms{};

	Parms.Key = std::move(Key);
	Parms.ContextValues = std::move(ContextValues);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function UnrealExtent.GSE_SDKFuncLib.SentryCrashReporterSetRoot
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// class FString                           RootKey                                                (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class FString                           RootValue                                              (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UGSE_SDKFuncLib::SentryCrashReporterSetRoot(const class FString& RootKey, const class FString& RootValue)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("GSE_SDKFuncLib", "SentryCrashReporterSetRoot");

	Params::GSE_SDKFuncLib_SentryCrashReporterSetRoot Parms{};

	Parms.RootKey = std::move(RootKey);
	Parms.RootValue = std::move(RootValue);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function UnrealExtent.GSE_SDKFuncLib.SentryCrashReporterSetTag
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// class FString                           Key                                                    (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class FString                           Value                                                  (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UGSE_SDKFuncLib::SentryCrashReporterSetTag(const class FString& Key, const class FString& Value)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("GSE_SDKFuncLib", "SentryCrashReporterSetTag");

	Params::GSE_SDKFuncLib_SentryCrashReporterSetTag Parms{};

	Parms.Key = std::move(Key);
	Parms.Value = std::move(Value);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function UnrealExtent.GSE_SDKFuncLib.SentryCrashReporterSetUser
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// class FString                           UserKey                                                (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class FString                           UserValue                                              (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UGSE_SDKFuncLib::SentryCrashReporterSetUser(const class FString& UserKey, const class FString& UserValue)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("GSE_SDKFuncLib", "SentryCrashReporterSetUser");

	Params::GSE_SDKFuncLib_SentryCrashReporterSetUser Parms{};

	Parms.UserKey = std::move(UserKey);
	Parms.UserValue = std::move(UserValue);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function UnrealExtent.GSE_SDKFuncLib.SetAppIsAutoTestingMode
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// int32                                   bEnable                                                (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UGSE_SDKFuncLib::SetAppIsAutoTestingMode(int32 bEnable)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("GSE_SDKFuncLib", "SetAppIsAutoTestingMode");

	Params::GSE_SDKFuncLib_SetAppIsAutoTestingMode Parms{};

	Parms.bEnable = bEnable;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function UnrealExtent.GSE_SDKFuncLib.SetBuglyUserMap
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// class FString                           Key                                                    (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class FString                           Value                                                  (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UGSE_SDKFuncLib::SetBuglyUserMap(const class FString& Key, const class FString& Value)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("GSE_SDKFuncLib", "SetBuglyUserMap");

	Params::GSE_SDKFuncLib_SetBuglyUserMap Parms{};

	Parms.Key = std::move(Key);
	Parms.Value = std::move(Value);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function UnrealExtent.GSE_SDKFuncLib.SetCrashReportClientEnable
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// int32                                   bEnable                                                (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UGSE_SDKFuncLib::SetCrashReportClientEnable(int32 bEnable)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("GSE_SDKFuncLib", "SetCrashReportClientEnable");

	Params::GSE_SDKFuncLib_SetCrashReportClientEnable Parms{};

	Parms.bEnable = bEnable;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function UnrealExtent.GSE_SDKFuncLib.StartHttpBase64DataRequest
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// class FString                           URL                                                    (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class FString                           Method                                                 (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// TMap<class FString, class FString>      ExHeaders                                              (Parm, NativeAccessSpecifierPublic)
// class FString                           Base64PostData                                         (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class UHttpResposeListener*             Listener                                               (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32                                   RequestTimeout                                         (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UGSE_SDKFuncLib::StartHttpBase64DataRequest(const class FString& URL, const class FString& Method, const TMap<class FString, class FString>& ExHeaders, const class FString& Base64PostData, class UHttpResposeListener* Listener, int32 RequestTimeout)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("GSE_SDKFuncLib", "StartHttpBase64DataRequest");

	Params::GSE_SDKFuncLib_StartHttpBase64DataRequest Parms{};

	Parms.URL = std::move(URL);
	Parms.Method = std::move(Method);
	Parms.ExHeaders = std::move(ExHeaders);
	Parms.Base64PostData = std::move(Base64PostData);
	Parms.Listener = Listener;
	Parms.RequestTimeout = RequestTimeout;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function UnrealExtent.GSE_SDKFuncLib.StartHttpRawDataRequest
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// class FString                           URL                                                    (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class FString                           Method                                                 (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// TMap<class FString, class FString>      ExHeaders                                              (Parm, NativeAccessSpecifierPublic)
// TArray<uint8>                           PostRawData                                            (ConstParm, Parm, ZeroConstructor, NativeAccessSpecifierPublic)
// class UHttpResposeListener*             Listener                                               (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32                                   RequestTimeout                                         (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UGSE_SDKFuncLib::StartHttpRawDataRequest(const class FString& URL, const class FString& Method, const TMap<class FString, class FString>& ExHeaders, const TArray<uint8>& PostRawData, class UHttpResposeListener* Listener, int32 RequestTimeout)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("GSE_SDKFuncLib", "StartHttpRawDataRequest");

	Params::GSE_SDKFuncLib_StartHttpRawDataRequest Parms{};

	Parms.URL = std::move(URL);
	Parms.Method = std::move(Method);
	Parms.ExHeaders = std::move(ExHeaders);
	Parms.PostRawData = std::move(PostRawData);
	Parms.Listener = Listener;
	Parms.RequestTimeout = RequestTimeout;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function UnrealExtent.GSE_SDKFuncLib.TestCallAndroidFunc
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// class FString                           Content                                                (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UGSE_SDKFuncLib::TestCallAndroidFunc(const class FString& Content)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("GSE_SDKFuncLib", "TestCallAndroidFunc");

	Params::GSE_SDKFuncLib_TestCallAndroidFunc Parms{};

	Parms.Content = std::move(Content);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function UnrealExtent.GSE_SequencerFuncLib.FQualifiedTimeAsSeconds
// (Final, Native, Static, Public, HasOutParams, BlueprintCallable, BlueprintPure)
// Parameters:
// struct FQualifiedFrameTime              FrameTime                                              (ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

float UGSE_SequencerFuncLib::FQualifiedTimeAsSeconds(const struct FQualifiedFrameTime& FrameTime)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("GSE_SequencerFuncLib", "FQualifiedTimeAsSeconds");

	Params::GSE_SequencerFuncLib_FQualifiedTimeAsSeconds Parms{};

	Parms.FrameTime = std::move(FrameTime);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function UnrealExtent.GSE_SequencerFuncLib.GetLevelSequenceBindingIDByDisplayName
// (Final, Native, Static, Public, HasOutParams, BlueprintCallable)
// Parameters:
// class ULevelSequence*                   LevelSequence                                          (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class FName                             TargetName                                             (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FMovieSceneObjectBindingID       ReturnValue                                            (Parm, OutParm, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

struct FMovieSceneObjectBindingID UGSE_SequencerFuncLib::GetLevelSequenceBindingIDByDisplayName(class ULevelSequence* LevelSequence, const class FName& TargetName)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("GSE_SequencerFuncLib", "GetLevelSequenceBindingIDByDisplayName");

	Params::GSE_SequencerFuncLib_GetLevelSequenceBindingIDByDisplayName Parms{};

	Parms.LevelSequence = LevelSequence;
	Parms.TargetName = TargetName;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function UnrealExtent.GSE_SequencerFuncLib.GetLevelSequenceBindingIDByName
// (Final, Native, Static, Public, HasOutParams, BlueprintCallable)
// Parameters:
// class ULevelSequence*                   LevelSequence                                          (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class FName                             TargetName                                             (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FMovieSceneObjectBindingID       ReturnValue                                            (Parm, OutParm, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

struct FMovieSceneObjectBindingID UGSE_SequencerFuncLib::GetLevelSequenceBindingIDByName(class ULevelSequence* LevelSequence, const class FName& TargetName)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("GSE_SequencerFuncLib", "GetLevelSequenceBindingIDByName");

	Params::GSE_SequencerFuncLib_GetLevelSequenceBindingIDByName Parms{};

	Parms.LevelSequence = LevelSequence;
	Parms.TargetName = TargetName;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function UnrealExtent.GSE_SequencerFuncLib.GetLevelSequenceBindingIDByNameCS
// (Final, Native, Static, Public, HasOutParams, BlueprintCallable)
// Parameters:
// class ULevelSequence*                   LevelSequence                                          (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class FName                             TargetName                                             (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FSequenceBindingIDInCS           ReturnValue                                            (Parm, OutParm, ReturnParm, NoDestructor, NativeAccessSpecifierPublic)

struct FSequenceBindingIDInCS UGSE_SequencerFuncLib::GetLevelSequenceBindingIDByNameCS(class ULevelSequence* LevelSequence, const class FName& TargetName)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("GSE_SequencerFuncLib", "GetLevelSequenceBindingIDByNameCS");

	Params::GSE_SequencerFuncLib_GetLevelSequenceBindingIDByNameCS Parms{};

	Parms.LevelSequence = LevelSequence;
	Parms.TargetName = TargetName;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function UnrealExtent.GSE_SequencerFuncLib.IsMovieSceneObjectBindingIDValidCS
// (Final, Native, Static, Public, HasOutParams, BlueprintCallable, BlueprintPure)
// Parameters:
// struct FSequenceBindingIDInCS           BindID                                                 (ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UGSE_SequencerFuncLib::IsMovieSceneObjectBindingIDValidCS(const struct FSequenceBindingIDInCS& BindID)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("GSE_SequencerFuncLib", "IsMovieSceneObjectBindingIDValidCS");

	Params::GSE_SequencerFuncLib_IsMovieSceneObjectBindingIDValidCS Parms{};

	Parms.BindID = std::move(BindID);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function UnrealExtent.GSE_SequencerFuncLib.LevelSequenceBindPossessableObjectCS
// (Final, Native, Static, Public, HasOutParams, BlueprintCallable)
// Parameters:
// class ULevelSequence*                   LevelSequence                                          (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FSequenceBindingIDInCS           BindingID                                              (ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
// class UObject*                          BindObj                                                (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class UObject*                          Ctx                                                    (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UGSE_SequencerFuncLib::LevelSequenceBindPossessableObjectCS(class ULevelSequence* LevelSequence, const struct FSequenceBindingIDInCS& BindingID, class UObject* BindObj, class UObject* Ctx)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("GSE_SequencerFuncLib", "LevelSequenceBindPossessableObjectCS");

	Params::GSE_SequencerFuncLib_LevelSequenceBindPossessableObjectCS Parms{};

	Parms.LevelSequence = LevelSequence;
	Parms.BindingID = std::move(BindingID);
	Parms.BindObj = BindObj;
	Parms.Ctx = Ctx;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function UnrealExtent.GSE_SequencerFuncLib.LevelSequenceUnbindPossessableObjectCS
// (Final, Native, Static, Public, HasOutParams, BlueprintCallable)
// Parameters:
// class ULevelSequence*                   LevelSequence                                          (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FSequenceBindingIDInCS           BindingID                                              (ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)

void UGSE_SequencerFuncLib::LevelSequenceUnbindPossessableObjectCS(class ULevelSequence* LevelSequence, const struct FSequenceBindingIDInCS& BindingID)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("GSE_SequencerFuncLib", "LevelSequenceUnbindPossessableObjectCS");

	Params::GSE_SequencerFuncLib_LevelSequenceUnbindPossessableObjectCS Parms{};

	Parms.LevelSequence = LevelSequence;
	Parms.BindingID = std::move(BindingID);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function UnrealExtent.GSE_SequencerFuncLib.SequenceActorAddBindingCS
// (Final, Native, Static, Public, HasOutParams, BlueprintCallable)
// Parameters:
// class ALevelSequenceActor*              SeqActor                                               (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FSequenceBindingIDInCS           BindingID                                              (ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
// class AActor*                           Actor                                                  (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UGSE_SequencerFuncLib::SequenceActorAddBindingCS(class ALevelSequenceActor* SeqActor, const struct FSequenceBindingIDInCS& BindingID, class AActor* Actor)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("GSE_SequencerFuncLib", "SequenceActorAddBindingCS");

	Params::GSE_SequencerFuncLib_SequenceActorAddBindingCS Parms{};

	Parms.SeqActor = SeqActor;
	Parms.BindingID = std::move(BindingID);
	Parms.Actor = Actor;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function UnrealExtent.GSE_SequencerFuncLib.SequenceActorInitPlayerCS
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// class ALevelSequenceActor*              SeqActor                                               (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class ULevel*                           Lvl                                                    (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class ULevelSequence*                   LevelSeq                                               (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UGSE_SequencerFuncLib::SequenceActorInitPlayerCS(class ALevelSequenceActor* SeqActor, class ULevel* Lvl, class ULevelSequence* LevelSeq)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("GSE_SequencerFuncLib", "SequenceActorInitPlayerCS");

	Params::GSE_SequencerFuncLib_SequenceActorInitPlayerCS Parms{};

	Parms.SeqActor = SeqActor;
	Parms.Lvl = Lvl;
	Parms.LevelSeq = LevelSeq;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function UnrealExtent.GSE_SequencerFuncLib.SequenceActorSetBindingByName
// (Final, Native, Static, Public, HasOutParams, BlueprintCallable)
// Parameters:
// class ALevelSequenceActor*              SequenceActor                                          (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class FName                             TargetName                                             (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// TArray<class AActor*>                   Actors                                                 (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
// bool                                    bUseDisplayName                                        (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UGSE_SequencerFuncLib::SequenceActorSetBindingByName(class ALevelSequenceActor* SequenceActor, const class FName& TargetName, const TArray<class AActor*>& Actors, bool bUseDisplayName)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("GSE_SequencerFuncLib", "SequenceActorSetBindingByName");

	Params::GSE_SequencerFuncLib_SequenceActorSetBindingByName Parms{};

	Parms.SequenceActor = SequenceActor;
	Parms.TargetName = TargetName;
	Parms.Actors = std::move(Actors);
	Parms.bUseDisplayName = bUseDisplayName;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function UnrealExtent.GSE_SequencerFuncLib.SequenceMasterAutoBind
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// class ALevelSequenceActor*              SequenceActor                                          (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class AActor*                           MasterActor                                            (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

int32 UGSE_SequencerFuncLib::SequenceMasterAutoBind(class ALevelSequenceActor* SequenceActor, class AActor* MasterActor)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("GSE_SequencerFuncLib", "SequenceMasterAutoBind");

	Params::GSE_SequencerFuncLib_SequenceMasterAutoBind Parms{};

	Parms.SequenceActor = SequenceActor;
	Parms.MasterActor = MasterActor;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function UnrealExtent.GSE_SequencerFuncLib.SequenceSetClockSource
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// class UMovieSceneSequencePlayer*        SequencePlayer                                         (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// EUpdateClockSource                      ClockSource                                            (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UGSE_SequencerFuncLib::SequenceSetClockSource(class UMovieSceneSequencePlayer* SequencePlayer, EUpdateClockSource ClockSource)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("GSE_SequencerFuncLib", "SequenceSetClockSource");

	Params::GSE_SequencerFuncLib_SequenceSetClockSource Parms{};

	Parms.SequencePlayer = SequencePlayer;
	Parms.ClockSource = ClockSource;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function UnrealExtent.GSE_SkeletalMeshFuncLib.BakeSkinInfoToUVs
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// class USkeletalMesh*                    TargetSkeletalMesh                                     (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UGSE_SkeletalMeshFuncLib::BakeSkinInfoToUVs(class USkeletalMesh* TargetSkeletalMesh)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("GSE_SkeletalMeshFuncLib", "BakeSkinInfoToUVs");

	Params::GSE_SkeletalMeshFuncLib_BakeSkinInfoToUVs Parms{};

	Parms.TargetSkeletalMesh = TargetSkeletalMesh;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function UnrealExtent.GSE_SkeletalMeshFuncLib.GetBodyInstanceCollisionProfileName
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// class USkeletalMeshComponent*           SkMeshComp                                             (Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class FName                             BoneName                                               (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    bGetWelded                                             (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class FName                             ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class FName UGSE_SkeletalMeshFuncLib::GetBodyInstanceCollisionProfileName(class USkeletalMeshComponent* SkMeshComp, class FName BoneName, bool bGetWelded)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("GSE_SkeletalMeshFuncLib", "GetBodyInstanceCollisionProfileName");

	Params::GSE_SkeletalMeshFuncLib_GetBodyInstanceCollisionProfileName Parms{};

	Parms.SkMeshComp = SkMeshComp;
	Parms.BoneName = BoneName;
	Parms.bGetWelded = bGetWelded;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function UnrealExtent.GSE_SkeletalMeshFuncLib.GetBodyInstanceShapeCollisionEnable
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// class USkeletalMeshComponent*           SkMeshComp                                             (Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class FName                             BoneName                                               (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32                                   ShapeIndex                                             (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    bGetWelded                                             (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// ECollisionEnabled                       ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

ECollisionEnabled UGSE_SkeletalMeshFuncLib::GetBodyInstanceShapeCollisionEnable(class USkeletalMeshComponent* SkMeshComp, class FName BoneName, int32 ShapeIndex, bool bGetWelded)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("GSE_SkeletalMeshFuncLib", "GetBodyInstanceShapeCollisionEnable");

	Params::GSE_SkeletalMeshFuncLib_GetBodyInstanceShapeCollisionEnable Parms{};

	Parms.SkMeshComp = SkMeshComp;
	Parms.BoneName = BoneName;
	Parms.ShapeIndex = ShapeIndex;
	Parms.bGetWelded = bGetWelded;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function UnrealExtent.GSE_SkeletalMeshFuncLib.GetLODSettingsGroupNum
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// class USkeletalMeshLODSettings*         LODSettings                                            (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

int32 UGSE_SkeletalMeshFuncLib::GetLODSettingsGroupNum(class USkeletalMeshLODSettings* LODSettings)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("GSE_SkeletalMeshFuncLib", "GetLODSettingsGroupNum");

	Params::GSE_SkeletalMeshFuncLib_GetLODSettingsGroupNum Parms{};

	Parms.LODSettings = LODSettings;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function UnrealExtent.GSE_SkeletalMeshFuncLib.GetNumOverrideMaterials
// (Final, Native, Static, Public, BlueprintCallable, BlueprintPure)
// Parameters:
// class USkeletalMeshComponent*           SKComp                                                 (ConstParm, Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

int32 UGSE_SkeletalMeshFuncLib::GetNumOverrideMaterials(const class USkeletalMeshComponent* SKComp)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("GSE_SkeletalMeshFuncLib", "GetNumOverrideMaterials");

	Params::GSE_SkeletalMeshFuncLib_GetNumOverrideMaterials Parms{};

	Parms.SKComp = SKComp;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function UnrealExtent.GSE_SkeletalMeshFuncLib.GetRefPoseTransform
// (Final, Native, Static, Public, HasDefaults, BlueprintCallable)
// Parameters:
// class USkinnedMeshComponent*            MeshComp                                               (Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32                                   BoneIndex                                              (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    bIsLocal                                               (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FTransform                       ReturnValue                                            (Parm, OutParm, ReturnParm, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)

struct FTransform UGSE_SkeletalMeshFuncLib::GetRefPoseTransform(class USkinnedMeshComponent* MeshComp, int32 BoneIndex, bool bIsLocal)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("GSE_SkeletalMeshFuncLib", "GetRefPoseTransform");

	Params::GSE_SkeletalMeshFuncLib_GetRefPoseTransform Parms{};

	Parms.MeshComp = MeshComp;
	Parms.BoneIndex = BoneIndex;
	Parms.bIsLocal = bIsLocal;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function UnrealExtent.GSE_SkeletalMeshFuncLib.GetUROResult
// (Final, Native, Static, Public, HasOutParams, BlueprintCallable)
// Parameters:
// class AActor*                           OwnerActor                                             (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   OutAccumulatedDeltaTime                                (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UGSE_SkeletalMeshFuncLib::GetUROResult(class AActor* OwnerActor, float* OutAccumulatedDeltaTime)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("GSE_SkeletalMeshFuncLib", "GetUROResult");

	Params::GSE_SkeletalMeshFuncLib_GetUROResult Parms{};

	Parms.OwnerActor = OwnerActor;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	if (OutAccumulatedDeltaTime != nullptr)
		*OutAccumulatedDeltaTime = Parms.OutAccumulatedDeltaTime;

	return Parms.ReturnValue;
}


// Function UnrealExtent.GSE_SkeletalMeshFuncLib.GS_SetEndPhysicsTickEnabled
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// class USkeletalMeshComponent*           SKComp                                                 (Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    bVal                                                   (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UGSE_SkeletalMeshFuncLib::GS_SetEndPhysicsTickEnabled(class USkeletalMeshComponent* SKComp, bool bVal)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("GSE_SkeletalMeshFuncLib", "GS_SetEndPhysicsTickEnabled");

	Params::GSE_SkeletalMeshFuncLib_GS_SetEndPhysicsTickEnabled Parms{};

	Parms.SKComp = SKComp;
	Parms.bVal = bVal;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function UnrealExtent.GSE_SkeletalMeshFuncLib.IsCPUAccess
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// class USkeletalMesh*                    SKMesh                                                 (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UGSE_SkeletalMeshFuncLib::IsCPUAccess(class USkeletalMesh* SKMesh)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("GSE_SkeletalMeshFuncLib", "IsCPUAccess");

	Params::GSE_SkeletalMeshFuncLib_IsCPUAccess Parms{};

	Parms.SKMesh = SKMesh;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function UnrealExtent.GSE_SkeletalMeshFuncLib.SetAllBodiesShapeCollisionEnabled
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// class USkeletalMeshComponent*           SKComp                                                 (ConstParm, Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// ECollisionEnabled                       Type                                                   (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    bUpdateFilterData                                      (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UGSE_SkeletalMeshFuncLib::SetAllBodiesShapeCollisionEnabled(const class USkeletalMeshComponent* SKComp, ECollisionEnabled Type, bool bUpdateFilterData)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("GSE_SkeletalMeshFuncLib", "SetAllBodiesShapeCollisionEnabled");

	Params::GSE_SkeletalMeshFuncLib_SetAllBodiesShapeCollisionEnabled Parms{};

	Parms.SKComp = SKComp;
	Parms.Type = Type;
	Parms.bUpdateFilterData = bUpdateFilterData;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function UnrealExtent.GSE_SkeletalMeshFuncLib.SetBodyInstanceAutoWeld
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// class USkeletalMeshComponent*           SkMeshComp                                             (Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class FName                             BoneName                                               (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    bAutoWeld                                              (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    bGetWelded                                             (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UGSE_SkeletalMeshFuncLib::SetBodyInstanceAutoWeld(class USkeletalMeshComponent* SkMeshComp, class FName BoneName, bool bAutoWeld, bool bGetWelded)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("GSE_SkeletalMeshFuncLib", "SetBodyInstanceAutoWeld");

	Params::GSE_SkeletalMeshFuncLib_SetBodyInstanceAutoWeld Parms{};

	Parms.SkMeshComp = SkMeshComp;
	Parms.BoneName = BoneName;
	Parms.bAutoWeld = bAutoWeld;
	Parms.bGetWelded = bGetWelded;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function UnrealExtent.GSE_SkeletalMeshFuncLib.SetBodyInstanceCollisionEnable
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// class USkeletalMeshComponent*           SkMeshComp                                             (Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class FName                             BoneName                                               (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// ECollisionEnabled                       NewType                                                (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    bUpdatePhysicsFilterData                               (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    bGetWelded                                             (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UGSE_SkeletalMeshFuncLib::SetBodyInstanceCollisionEnable(class USkeletalMeshComponent* SkMeshComp, class FName BoneName, ECollisionEnabled NewType, bool bUpdatePhysicsFilterData, bool bGetWelded)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("GSE_SkeletalMeshFuncLib", "SetBodyInstanceCollisionEnable");

	Params::GSE_SkeletalMeshFuncLib_SetBodyInstanceCollisionEnable Parms{};

	Parms.SkMeshComp = SkMeshComp;
	Parms.BoneName = BoneName;
	Parms.NewType = NewType;
	Parms.bUpdatePhysicsFilterData = bUpdatePhysicsFilterData;
	Parms.bGetWelded = bGetWelded;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function UnrealExtent.GSE_SkeletalMeshFuncLib.SetBodyInstanceCollisionProfileName
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// class USkeletalMeshComponent*           SkMeshComp                                             (Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class FName                             BoneName                                               (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class FName                             InCollisionProfileName                                 (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    bGetWelded                                             (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UGSE_SkeletalMeshFuncLib::SetBodyInstanceCollisionProfileName(class USkeletalMeshComponent* SkMeshComp, class FName BoneName, class FName InCollisionProfileName, bool bGetWelded)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("GSE_SkeletalMeshFuncLib", "SetBodyInstanceCollisionProfileName");

	Params::GSE_SkeletalMeshFuncLib_SetBodyInstanceCollisionProfileName Parms{};

	Parms.SkMeshComp = SkMeshComp;
	Parms.BoneName = BoneName;
	Parms.InCollisionProfileName = InCollisionProfileName;
	Parms.bGetWelded = bGetWelded;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function UnrealExtent.GSE_SkeletalMeshFuncLib.SetBodyInstanceShapeCollisionEnable
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// class USkeletalMeshComponent*           SkMeshComp                                             (Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class FName                             BoneName                                               (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32                                   ShapeIndex                                             (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// ECollisionEnabled                       NewType                                                (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    bUpdatePhysicsFilterData                               (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    bGetWelded                                             (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UGSE_SkeletalMeshFuncLib::SetBodyInstanceShapeCollisionEnable(class USkeletalMeshComponent* SkMeshComp, class FName BoneName, int32 ShapeIndex, ECollisionEnabled NewType, bool bUpdatePhysicsFilterData, bool bGetWelded)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("GSE_SkeletalMeshFuncLib", "SetBodyInstanceShapeCollisionEnable");

	Params::GSE_SkeletalMeshFuncLib_SetBodyInstanceShapeCollisionEnable Parms{};

	Parms.SkMeshComp = SkMeshComp;
	Parms.BoneName = BoneName;
	Parms.ShapeIndex = ShapeIndex;
	Parms.NewType = NewType;
	Parms.bUpdatePhysicsFilterData = bUpdatePhysicsFilterData;
	Parms.bGetWelded = bGetWelded;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function UnrealExtent.GSE_SkeletalMeshFuncLib.SetTextureParameterValueOnMaterials
// (Final, Native, Static, Public, HasOutParams, BlueprintCallable)
// Parameters:
// class UMeshComponent*                   MeshComp                                               (Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class FName                             ParameterName                                          (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class UTexture*                         ParameterValue                                         (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UGSE_SkeletalMeshFuncLib::SetTextureParameterValueOnMaterials(class UMeshComponent* MeshComp, const class FName& ParameterName, class UTexture* ParameterValue)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("GSE_SkeletalMeshFuncLib", "SetTextureParameterValueOnMaterials");

	Params::GSE_SkeletalMeshFuncLib_SetTextureParameterValueOnMaterials Parms{};

	Parms.MeshComp = MeshComp;
	Parms.ParameterName = ParameterName;
	Parms.ParameterValue = ParameterValue;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function UnrealExtent.GSE_SkeletalMeshFuncLib.SetUpdateOverlapsOnAnimationFinalize
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// class USkeletalMeshComponent*           SKComp                                                 (Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    bVal                                                   (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UGSE_SkeletalMeshFuncLib::SetUpdateOverlapsOnAnimationFinalize(class USkeletalMeshComponent* SKComp, bool bVal)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("GSE_SkeletalMeshFuncLib", "SetUpdateOverlapsOnAnimationFinalize");

	Params::GSE_SkeletalMeshFuncLib_SetUpdateOverlapsOnAnimationFinalize Parms{};

	Parms.SKComp = SKComp;
	Parms.bVal = bVal;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function UnrealExtent.GSE_SkeletalMeshFuncLib.UpdateUROParams
// (Final, Native, Static, Public, HasOutParams, BlueprintCallable)
// Parameters:
// class AActor*                           OwnerActor                                             (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// TArray<float>                           BaseVisibleDistanceFactorThesholds                     (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
// int32                                   BaseNonRenderedUpdateRate                              (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UGSE_SkeletalMeshFuncLib::UpdateUROParams(class AActor* OwnerActor, const TArray<float>& BaseVisibleDistanceFactorThesholds, int32 BaseNonRenderedUpdateRate)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("GSE_SkeletalMeshFuncLib", "UpdateUROParams");

	Params::GSE_SkeletalMeshFuncLib_UpdateUROParams Parms{};

	Parms.OwnerActor = OwnerActor;
	Parms.BaseVisibleDistanceFactorThesholds = std::move(BaseVisibleDistanceFactorThesholds);
	Parms.BaseNonRenderedUpdateRate = BaseNonRenderedUpdateRate;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function UnrealExtent.GSE_StaticMeshFunLib.GetCollisionComplexity
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// class UStaticMesh*                      TargetStaticMesh                                       (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// ECollisionTraceFlag                     ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

ECollisionTraceFlag UGSE_StaticMeshFunLib::GetCollisionComplexity(class UStaticMesh* TargetStaticMesh)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("GSE_StaticMeshFunLib", "GetCollisionComplexity");

	Params::GSE_StaticMeshFunLib_GetCollisionComplexity Parms{};

	Parms.TargetStaticMesh = TargetStaticMesh;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function UnrealExtent.GSE_StaticMeshFunLib.GetCollisionPremitiveNumbers
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// class UStaticMesh*                      TargetStaticMesh                                       (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

int32 UGSE_StaticMeshFunLib::GetCollisionPremitiveNumbers(class UStaticMesh* TargetStaticMesh)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("GSE_StaticMeshFunLib", "GetCollisionPremitiveNumbers");

	Params::GSE_StaticMeshFunLib_GetCollisionPremitiveNumbers Parms{};

	Parms.TargetStaticMesh = TargetStaticMesh;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function UnrealExtent.GSE_StaticMeshFunLib.GetCustomPrimitiveData
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// class UStaticMeshComponent*             StaticMeshComponent                                    (Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// TArray<float>                           ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, NativeAccessSpecifierPublic)

TArray<float> UGSE_StaticMeshFunLib::GetCustomPrimitiveData(class UStaticMeshComponent* StaticMeshComponent)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("GSE_StaticMeshFunLib", "GetCustomPrimitiveData");

	Params::GSE_StaticMeshFunLib_GetCustomPrimitiveData Parms{};

	Parms.StaticMeshComponent = StaticMeshComponent;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function UnrealExtent.GSE_StaticMeshFunLib.GetStaticMeshMaterialNum
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// class UStaticMesh*                      TargetStaticMesh                                       (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

int32 UGSE_StaticMeshFunLib::GetStaticMeshMaterialNum(class UStaticMesh* TargetStaticMesh)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("GSE_StaticMeshFunLib", "GetStaticMeshMaterialNum");

	Params::GSE_StaticMeshFunLib_GetStaticMeshMaterialNum Parms{};

	Parms.TargetStaticMesh = TargetStaticMesh;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function UnrealExtent.GSE_StaticMeshFunLib.IsCPUAccess
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// class UStaticMesh*                      StaticMesh                                             (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UGSE_StaticMeshFunLib::IsCPUAccess(class UStaticMesh* StaticMesh)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("GSE_StaticMeshFunLib", "IsCPUAccess");

	Params::GSE_StaticMeshFunLib_IsCPUAccess Parms{};

	Parms.StaticMesh = StaticMesh;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function UnrealExtent.GSE_StaticMeshFunLib.SetCollisionComplexity
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// class UStaticMesh*                      TargetStaticMesh                                       (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// ECollisionTraceFlag                     _CollisionTraceFlag                                    (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UGSE_StaticMeshFunLib::SetCollisionComplexity(class UStaticMesh* TargetStaticMesh, ECollisionTraceFlag _CollisionTraceFlag)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("GSE_StaticMeshFunLib", "SetCollisionComplexity");

	Params::GSE_StaticMeshFunLib_SetCollisionComplexity Parms{};

	Parms.TargetStaticMesh = TargetStaticMesh;
	Parms._CollisionTraceFlag = _CollisionTraceFlag;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function UnrealExtent.GSE_StaticMeshFunLib.SetLinearColorParameterValueOnMaterials
// (Final, Native, Static, Public, HasOutParams, HasDefaults, BlueprintCallable)
// Parameters:
// class UMeshComponent*                   MeshComp                                               (Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class FName                             ParamName                                              (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FLinearColor                     ParamValue                                             (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UGSE_StaticMeshFunLib::SetLinearColorParameterValueOnMaterials(class UMeshComponent* MeshComp, const class FName& ParamName, const struct FLinearColor& ParamValue)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("GSE_StaticMeshFunLib", "SetLinearColorParameterValueOnMaterials");

	Params::GSE_StaticMeshFunLib_SetLinearColorParameterValueOnMaterials Parms{};

	Parms.MeshComp = MeshComp;
	Parms.ParamName = ParamName;
	Parms.ParamValue = std::move(ParamValue);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function UnrealExtent.GSE_StaticMeshFunLib.SetStaticMeshActorVisibility
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// class AStaticMeshActor*                 TargetActor                                            (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    Visible                                                (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    RecurseToChildActor                                    (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UGSE_StaticMeshFunLib::SetStaticMeshActorVisibility(class AStaticMeshActor* TargetActor, bool Visible, bool RecurseToChildActor)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("GSE_StaticMeshFunLib", "SetStaticMeshActorVisibility");

	Params::GSE_StaticMeshFunLib_SetStaticMeshActorVisibility Parms{};

	Parms.TargetActor = TargetActor;
	Parms.Visible = Visible;
	Parms.RecurseToChildActor = RecurseToChildActor;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function UnrealExtent.GSE_SubsystemFunctionLibrary.GetEngineSubsystem
// (Final, Native, Static, Public, BlueprintCallable, BlueprintPure)
// Parameters:
// TSubclassOf<class UEngineSubsystem>     Class_0                                                (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class UEngineSubsystem*                 ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class UEngineSubsystem* UGSE_SubsystemFunctionLibrary::GetEngineSubsystem(TSubclassOf<class UEngineSubsystem> Class_0)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("GSE_SubsystemFunctionLibrary", "GetEngineSubsystem");

	Params::GSE_SubsystemFunctionLibrary_GetEngineSubsystem Parms{};

	Parms.Class_0 = Class_0;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function UnrealExtent.GSE_SubsystemFunctionLibrary.GetGameInstanceSubsystem
// (Final, Native, Static, Public, BlueprintCallable, BlueprintPure)
// Parameters:
// class UObject*                          ContextObject                                          (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// TSubclassOf<class UGameInstanceSubsystem>Class_0                                                (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class UGameInstanceSubsystem*           ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class UGameInstanceSubsystem* UGSE_SubsystemFunctionLibrary::GetGameInstanceSubsystem(class UObject* ContextObject, TSubclassOf<class UGameInstanceSubsystem> Class_0)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("GSE_SubsystemFunctionLibrary", "GetGameInstanceSubsystem");

	Params::GSE_SubsystemFunctionLibrary_GetGameInstanceSubsystem Parms{};

	Parms.ContextObject = ContextObject;
	Parms.Class_0 = Class_0;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function UnrealExtent.GSE_SubsystemFunctionLibrary.GetLocalPlayerSubsystem
// (Final, Native, Static, Public, BlueprintCallable, BlueprintPure)
// Parameters:
// class UObject*                          ContextObject                                          (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// TSubclassOf<class ULocalPlayerSubsystem>Class_0                                                (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class ULocalPlayerSubsystem*            ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class ULocalPlayerSubsystem* UGSE_SubsystemFunctionLibrary::GetLocalPlayerSubsystem(class UObject* ContextObject, TSubclassOf<class ULocalPlayerSubsystem> Class_0)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("GSE_SubsystemFunctionLibrary", "GetLocalPlayerSubsystem");

	Params::GSE_SubsystemFunctionLibrary_GetLocalPlayerSubsystem Parms{};

	Parms.ContextObject = ContextObject;
	Parms.Class_0 = Class_0;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function UnrealExtent.GSE_SubsystemFunctionLibrary.GetLocalPlayerSubSystemFromPlayerController
// (Final, Native, Static, Public, BlueprintCallable, BlueprintPure)
// Parameters:
// class APlayerController*                PlayerController                                       (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// TSubclassOf<class ULocalPlayerSubsystem>Class_0                                                (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class ULocalPlayerSubsystem*            ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class ULocalPlayerSubsystem* UGSE_SubsystemFunctionLibrary::GetLocalPlayerSubSystemFromPlayerController(class APlayerController* PlayerController, TSubclassOf<class ULocalPlayerSubsystem> Class_0)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("GSE_SubsystemFunctionLibrary", "GetLocalPlayerSubSystemFromPlayerController");

	Params::GSE_SubsystemFunctionLibrary_GetLocalPlayerSubSystemFromPlayerController Parms{};

	Parms.PlayerController = PlayerController;
	Parms.Class_0 = Class_0;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function UnrealExtent.GSE_SubsystemFunctionLibrary.GetWorldSubsystem
// (Final, Native, Static, Public, BlueprintCallable, BlueprintPure)
// Parameters:
// class UObject*                          ContextObject                                          (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// TSubclassOf<class UWorldSubsystem>      Class_0                                                (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class UWorldSubsystem*                  ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class UWorldSubsystem* UGSE_SubsystemFunctionLibrary::GetWorldSubsystem(class UObject* ContextObject, TSubclassOf<class UWorldSubsystem> Class_0)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("GSE_SubsystemFunctionLibrary", "GetWorldSubsystem");

	Params::GSE_SubsystemFunctionLibrary_GetWorldSubsystem Parms{};

	Parms.ContextObject = ContextObject;
	Parms.Class_0 = Class_0;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function UnrealExtent.GSE_SuperRSFuncLib.GetDLSSLisFeatureSupported
// (Final, Native, Static, Private, BlueprintCallable)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UGSE_SuperRSFuncLib::GetDLSSLisFeatureSupported()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("GSE_SuperRSFuncLib", "GetDLSSLisFeatureSupported");

	Params::GSE_SuperRSFuncLib_GetDLSSLisFeatureSupported Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function UnrealExtent.GSE_SuperRSFuncLib.GetIsDX12
// (Final, Native, Static, Private, BlueprintCallable)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UGSE_SuperRSFuncLib::GetIsDX12()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("GSE_SuperRSFuncLib", "GetIsDX12");

	Params::GSE_SuperRSFuncLib_GetIsDX12 Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function UnrealExtent.GSE_SuperRSFuncLib.GetIsXeSSSupported
// (Final, Native, Static, Private, BlueprintCallable)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UGSE_SuperRSFuncLib::GetIsXeSSSupported()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("GSE_SuperRSFuncLib", "GetIsXeSSSupported");

	Params::GSE_SuperRSFuncLib_GetIsXeSSSupported Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function UnrealExtent.GSE_SystemSettingsFuncLib.ApplySystemSettings
// (Final, Native, Static, Private, BlueprintCallable)
// Parameters:
// bool                                    bSaveSettings                                          (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UGSE_SystemSettingsFuncLib::ApplySystemSettings(bool bSaveSettings)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("GSE_SystemSettingsFuncLib", "ApplySystemSettings");

	Params::GSE_SystemSettingsFuncLib_ApplySystemSettings Parms{};

	Parms.bSaveSettings = bSaveSettings;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function UnrealExtent.GSE_SystemSettingsFuncLib.BGUBindOnCultureChangedEvent
// (Final, Native, Static, Private, BlueprintCallable)
// Parameters:
// class UObject*                          Obj                                                    (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class FName                             FuncName                                               (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UGSE_SystemSettingsFuncLib::BGUBindOnCultureChangedEvent(class UObject* Obj, class FName FuncName)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("GSE_SystemSettingsFuncLib", "BGUBindOnCultureChangedEvent");

	Params::GSE_SystemSettingsFuncLib_BGUBindOnCultureChangedEvent Parms{};

	Parms.Obj = Obj;
	Parms.FuncName = FuncName;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function UnrealExtent.GSE_SystemSettingsFuncLib.BGUBindOnMonitorAsPrimaryChange
// (Final, Native, Static, Private, BlueprintCallable)
// Parameters:
// class UObject*                          Obj                                                    (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class FName                             FuncName                                               (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UGSE_SystemSettingsFuncLib::BGUBindOnMonitorAsPrimaryChange(class UObject* Obj, class FName FuncName)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("GSE_SystemSettingsFuncLib", "BGUBindOnMonitorAsPrimaryChange");

	Params::GSE_SystemSettingsFuncLib_BGUBindOnMonitorAsPrimaryChange Parms{};

	Parms.Obj = Obj;
	Parms.FuncName = FuncName;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function UnrealExtent.GSE_SystemSettingsFuncLib.BGUBindOnViewportResizedEvent
// (Final, Native, Static, Private, BlueprintCallable)
// Parameters:
// class UObject*                          Obj                                                    (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class FName                             FuncName                                               (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UGSE_SystemSettingsFuncLib::BGUBindOnViewportResizedEvent(class UObject* Obj, class FName FuncName)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("GSE_SystemSettingsFuncLib", "BGUBindOnViewportResizedEvent");

	Params::GSE_SystemSettingsFuncLib_BGUBindOnViewportResizedEvent Parms{};

	Parms.Obj = Obj;
	Parms.FuncName = FuncName;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function UnrealExtent.GSE_SystemSettingsFuncLib.BGUUnBindOnCultureChangedEvent
// (Final, Native, Static, Private, BlueprintCallable)
// Parameters:
// class UObject*                          Obj                                                    (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class FName                             FuncName                                               (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UGSE_SystemSettingsFuncLib::BGUUnBindOnCultureChangedEvent(class UObject* Obj, class FName FuncName)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("GSE_SystemSettingsFuncLib", "BGUUnBindOnCultureChangedEvent");

	Params::GSE_SystemSettingsFuncLib_BGUUnBindOnCultureChangedEvent Parms{};

	Parms.Obj = Obj;
	Parms.FuncName = FuncName;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function UnrealExtent.GSE_SystemSettingsFuncLib.BGUUnBindOnMonitorAsPrimaryChange
// (Final, Native, Static, Private, BlueprintCallable)
// Parameters:
// class UObject*                          Obj                                                    (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class FName                             FuncName                                               (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UGSE_SystemSettingsFuncLib::BGUUnBindOnMonitorAsPrimaryChange(class UObject* Obj, class FName FuncName)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("GSE_SystemSettingsFuncLib", "BGUUnBindOnMonitorAsPrimaryChange");

	Params::GSE_SystemSettingsFuncLib_BGUUnBindOnMonitorAsPrimaryChange Parms{};

	Parms.Obj = Obj;
	Parms.FuncName = FuncName;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function UnrealExtent.GSE_SystemSettingsFuncLib.BGUUnBindOnViewportResizedEvent
// (Final, Native, Static, Private, BlueprintCallable)
// Parameters:
// class UObject*                          Obj                                                    (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class FName                             FuncName                                               (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UGSE_SystemSettingsFuncLib::BGUUnBindOnViewportResizedEvent(class UObject* Obj, class FName FuncName)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("GSE_SystemSettingsFuncLib", "BGUUnBindOnViewportResizedEvent");

	Params::GSE_SystemSettingsFuncLib_BGUUnBindOnViewportResizedEvent Parms{};

	Parms.Obj = Obj;
	Parms.FuncName = FuncName;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function UnrealExtent.GSE_SystemSettingsFuncLib.EngineSettingGetString
// (Final, Native, Static, Private, BlueprintCallable)
// Parameters:
// class FString                           Section                                                (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class FString                           Key                                                    (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class FString                           ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class FString UGSE_SystemSettingsFuncLib::EngineSettingGetString(const class FString& Section, const class FString& Key)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("GSE_SystemSettingsFuncLib", "EngineSettingGetString");

	Params::GSE_SystemSettingsFuncLib_EngineSettingGetString Parms{};

	Parms.Section = std::move(Section);
	Parms.Key = std::move(Key);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function UnrealExtent.GSE_SystemSettingsFuncLib.GetAllMonitorInfo
// (Final, Native, Static, Private, BlueprintCallable)
// Parameters:
// TArray<struct FGSMonitorInfo>           ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, NativeAccessSpecifierPublic)

TArray<struct FGSMonitorInfo> UGSE_SystemSettingsFuncLib::GetAllMonitorInfo()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("GSE_SystemSettingsFuncLib", "GetAllMonitorInfo");

	Params::GSE_SystemSettingsFuncLib_GetAllMonitorInfo Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function UnrealExtent.GSE_SystemSettingsFuncLib.GetAvailableGraphicsMemory
// (Final, Native, Static, Private, BlueprintCallable)
// Parameters:
// EGSGraphicsMemoryMode                   InQueryType                                            (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

float UGSE_SystemSettingsFuncLib::GetAvailableGraphicsMemory(EGSGraphicsMemoryMode InQueryType)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("GSE_SystemSettingsFuncLib", "GetAvailableGraphicsMemory");

	Params::GSE_SystemSettingsFuncLib_GetAvailableGraphicsMemory Parms{};

	Parms.InQueryType = InQueryType;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function UnrealExtent.GSE_SystemSettingsFuncLib.GetAvailableResolutions
// (Final, Native, Static, Private, BlueprintCallable)
// Parameters:
// TArray<struct FIntPoint>                ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, NativeAccessSpecifierPublic)

TArray<struct FIntPoint> UGSE_SystemSettingsFuncLib::GetAvailableResolutions()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("GSE_SystemSettingsFuncLib", "GetAvailableResolutions");

	Params::GSE_SystemSettingsFuncLib_GetAvailableResolutions Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function UnrealExtent.GSE_SystemSettingsFuncLib.GetAvailableResolutionsByMonitorID
// (Final, Native, Static, Private, BlueprintCallable)
// Parameters:
// int32                                   InMonitorID                                            (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// TArray<struct FIntPoint>                ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, NativeAccessSpecifierPublic)

TArray<struct FIntPoint> UGSE_SystemSettingsFuncLib::GetAvailableResolutionsByMonitorID(int32 InMonitorID)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("GSE_SystemSettingsFuncLib", "GetAvailableResolutionsByMonitorID");

	Params::GSE_SystemSettingsFuncLib_GetAvailableResolutionsByMonitorID Parms{};

	Parms.InMonitorID = InMonitorID;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function UnrealExtent.GSE_SystemSettingsFuncLib.GetCPUUsedPercentage
// (Final, Native, Static, Private, BlueprintCallable)
// Parameters:
// int32                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

int32 UGSE_SystemSettingsFuncLib::GetCPUUsedPercentage()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("GSE_SystemSettingsFuncLib", "GetCPUUsedPercentage");

	Params::GSE_SystemSettingsFuncLib_GetCPUUsedPercentage Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function UnrealExtent.GSE_SystemSettingsFuncLib.GetCPUUsedTime
// (Final, Native, Static, Private, BlueprintCallable)
// Parameters:
// float                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

float UGSE_SystemSettingsFuncLib::GetCPUUsedTime()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("GSE_SystemSettingsFuncLib", "GetCPUUsedTime");

	Params::GSE_SystemSettingsFuncLib_GetCPUUsedTime Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function UnrealExtent.GSE_SystemSettingsFuncLib.GetCurrentFPS
// (Final, Native, Static, Private, BlueprintCallable)
// Parameters:
// float                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

float UGSE_SystemSettingsFuncLib::GetCurrentFPS()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("GSE_SystemSettingsFuncLib", "GetCurrentFPS");

	Params::GSE_SystemSettingsFuncLib_GetCurrentFPS Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function UnrealExtent.GSE_SystemSettingsFuncLib.GetCurrentResolution
// (Final, Native, Static, Private, HasDefaults, BlueprintCallable)
// Parameters:
// struct FIntPoint                        ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

struct FIntPoint UGSE_SystemSettingsFuncLib::GetCurrentResolution()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("GSE_SystemSettingsFuncLib", "GetCurrentResolution");

	Params::GSE_SystemSettingsFuncLib_GetCurrentResolution Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function UnrealExtent.GSE_SystemSettingsFuncLib.GetCurrentScalabilityQualities
// (Final, Native, Static, Private, BlueprintCallable)
// Parameters:
// bool                                    bLogInfo                                               (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FGSScalabilityQualities          ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)

struct FGSScalabilityQualities UGSE_SystemSettingsFuncLib::GetCurrentScalabilityQualities(bool bLogInfo)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("GSE_SystemSettingsFuncLib", "GetCurrentScalabilityQualities");

	Params::GSE_SystemSettingsFuncLib_GetCurrentScalabilityQualities Parms{};

	Parms.bLogInfo = bLogInfo;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function UnrealExtent.GSE_SystemSettingsFuncLib.GetCurrentScalabilityQuality
// (Final, Native, Static, Private, BlueprintCallable)
// Parameters:
// bool                                    bLogInfo                                               (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FGSScalabilityQualities          ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)

struct FGSScalabilityQualities UGSE_SystemSettingsFuncLib::GetCurrentScalabilityQuality(bool bLogInfo)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("GSE_SystemSettingsFuncLib", "GetCurrentScalabilityQuality");

	Params::GSE_SystemSettingsFuncLib_GetCurrentScalabilityQuality Parms{};

	Parms.bLogInfo = bLogInfo;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function UnrealExtent.GSE_SystemSettingsFuncLib.GetCurrentScreenMode
// (Final, Native, Static, Private, BlueprintCallable)
// Parameters:
// EGSScreenMode                           ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

EGSScreenMode UGSE_SystemSettingsFuncLib::GetCurrentScreenMode()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("GSE_SystemSettingsFuncLib", "GetCurrentScreenMode");

	Params::GSE_SystemSettingsFuncLib_GetCurrentScreenMode Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function UnrealExtent.GSE_SystemSettingsFuncLib.GetCurrentScreenModeV2
// (Final, Native, Static, Private, BlueprintCallable)
// Parameters:
// EWindowMode                             ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

EWindowMode UGSE_SystemSettingsFuncLib::GetCurrentScreenModeV2()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("GSE_SystemSettingsFuncLib", "GetCurrentScreenModeV2");

	Params::GSE_SystemSettingsFuncLib_GetCurrentScreenModeV2 Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function UnrealExtent.GSE_SystemSettingsFuncLib.GetFrameRateLimit
// (Final, Native, Static, Private, BlueprintCallable)
// Parameters:
// float                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

float UGSE_SystemSettingsFuncLib::GetFrameRateLimit()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("GSE_SystemSettingsFuncLib", "GetFrameRateLimit");

	Params::GSE_SystemSettingsFuncLib_GetFrameRateLimit Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function UnrealExtent.GSE_SystemSettingsFuncLib.GetGPUUsedPercentage
// (Final, Native, Static, Private, BlueprintCallable)
// Parameters:
// int32                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

int32 UGSE_SystemSettingsFuncLib::GetGPUUsedPercentage()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("GSE_SystemSettingsFuncLib", "GetGPUUsedPercentage");

	Params::GSE_SystemSettingsFuncLib_GetGPUUsedPercentage Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function UnrealExtent.GSE_SystemSettingsFuncLib.GetGPUUsedTime
// (Final, Native, Static, Private, BlueprintCallable)
// Parameters:
// float                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

float UGSE_SystemSettingsFuncLib::GetGPUUsedTime()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("GSE_SystemSettingsFuncLib", "GetGPUUsedTime");

	Params::GSE_SystemSettingsFuncLib_GetGPUUsedTime Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function UnrealExtent.GSE_SystemSettingsFuncLib.GetGraphicsMemoryInfo
// (Final, Native, Static, Private, BlueprintCallable)
// Parameters:
// EGSGraphicsMemoryMode                   InGraphicsMemoryMode                                   (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

int32 UGSE_SystemSettingsFuncLib::GetGraphicsMemoryInfo(EGSGraphicsMemoryMode InGraphicsMemoryMode)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("GSE_SystemSettingsFuncLib", "GetGraphicsMemoryInfo");

	Params::GSE_SystemSettingsFuncLib_GetGraphicsMemoryInfo Parms{};

	Parms.InGraphicsMemoryMode = InGraphicsMemoryMode;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function UnrealExtent.GSE_SystemSettingsFuncLib.GetGSystemResolution
// (Final, Native, Static, Private, HasDefaults, BlueprintCallable)
// Parameters:
// struct FIntPoint                        ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

struct FIntPoint UGSE_SystemSettingsFuncLib::GetGSystemResolution()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("GSE_SystemSettingsFuncLib", "GetGSystemResolution");

	Params::GSE_SystemSettingsFuncLib_GetGSystemResolution Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function UnrealExtent.GSE_SystemSettingsFuncLib.GetProportionalResolutions
// (Final, Native, Static, Private, HasDefaults, BlueprintCallable)
// Parameters:
// struct FIntPoint                        AspectRatio                                            (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// TArray<struct FIntPoint>                ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, NativeAccessSpecifierPublic)

TArray<struct FIntPoint> UGSE_SystemSettingsFuncLib::GetProportionalResolutions(const struct FIntPoint& AspectRatio)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("GSE_SystemSettingsFuncLib", "GetProportionalResolutions");

	Params::GSE_SystemSettingsFuncLib_GetProportionalResolutions Parms{};

	Parms.AspectRatio = std::move(AspectRatio);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function UnrealExtent.GSE_SystemSettingsFuncLib.GetRecommendedScalabilityQuality
// (Final, Native, Static, Private, BlueprintCallable)
// Parameters:
// bool                                    bLogInfo                                               (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FGSScalabilityQualities          ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)

struct FGSScalabilityQualities UGSE_SystemSettingsFuncLib::GetRecommendedScalabilityQuality(bool bLogInfo)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("GSE_SystemSettingsFuncLib", "GetRecommendedScalabilityQuality");

	Params::GSE_SystemSettingsFuncLib_GetRecommendedScalabilityQuality Parms{};

	Parms.bLogInfo = bLogInfo;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function UnrealExtent.GSE_SystemSettingsFuncLib.GetResolutionScaleFromQualityLevel
// (Final, Native, Static, Private, BlueprintCallable)
// Parameters:
// EScalabilityQuality                     InQualityLevel                                         (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

float UGSE_SystemSettingsFuncLib::GetResolutionScaleFromQualityLevel(EScalabilityQuality InQualityLevel)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("GSE_SystemSettingsFuncLib", "GetResolutionScaleFromQualityLevel");

	Params::GSE_SystemSettingsFuncLib_GetResolutionScaleFromQualityLevel Parms{};

	Parms.InQualityLevel = InQualityLevel;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function UnrealExtent.GSE_SystemSettingsFuncLib.GetScreenSize
// (Final, Native, Static, Private, HasDefaults, BlueprintCallable)
// Parameters:
// struct FVector2D                        ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

struct FVector2D UGSE_SystemSettingsFuncLib::GetScreenSize()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("GSE_SystemSettingsFuncLib", "GetScreenSize");

	Params::GSE_SystemSettingsFuncLib_GetScreenSize Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function UnrealExtent.GSE_SystemSettingsFuncLib.GetUsedGraphicsMemory
// (Final, Native, Static, Private, BlueprintCallable)
// Parameters:
// EGSGraphicsMemoryMode                   InQueryType                                            (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

float UGSE_SystemSettingsFuncLib::GetUsedGraphicsMemory(EGSGraphicsMemoryMode InQueryType)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("GSE_SystemSettingsFuncLib", "GetUsedGraphicsMemory");

	Params::GSE_SystemSettingsFuncLib_GetUsedGraphicsMemory Parms{};

	Parms.InQueryType = InQueryType;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function UnrealExtent.GSE_SystemSettingsFuncLib.GetVSyncEnabled
// (Final, Native, Static, Private, BlueprintCallable)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UGSE_SystemSettingsFuncLib::GetVSyncEnabled()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("GSE_SystemSettingsFuncLib", "GetVSyncEnabled");

	Params::GSE_SystemSettingsFuncLib_GetVSyncEnabled Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function UnrealExtent.GSE_SystemSettingsFuncLib.GMChangeMonitorAsPrimary
// (Final, Native, Static, Private, BlueprintCallable)
// Parameters:
// int32                                   MonitorIdx                                             (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UGSE_SystemSettingsFuncLib::GMChangeMonitorAsPrimary(int32 MonitorIdx)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("GSE_SystemSettingsFuncLib", "GMChangeMonitorAsPrimary");

	Params::GSE_SystemSettingsFuncLib_GMChangeMonitorAsPrimary Parms{};

	Parms.MonitorIdx = MonitorIdx;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function UnrealExtent.GSE_SystemSettingsFuncLib.Init
// (Final, Native, Static, Private, BlueprintCallable)

void UGSE_SystemSettingsFuncLib::Init()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("GSE_SystemSettingsFuncLib", "Init");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function UnrealExtent.GSE_SystemSettingsFuncLib.RefreshBenchmarkMonitor
// (Final, Native, Static, Private, BlueprintCallable)

void UGSE_SystemSettingsFuncLib::RefreshBenchmarkMonitor()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("GSE_SystemSettingsFuncLib", "RefreshBenchmarkMonitor");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function UnrealExtent.GSE_SystemSettingsFuncLib.SetAntiAliasingQuality
// (Final, Native, Static, Private, BlueprintCallable)
// Parameters:
// EScalabilityQuality                     InAntiAliasingQuality                                  (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UGSE_SystemSettingsFuncLib::SetAntiAliasingQuality(EScalabilityQuality InAntiAliasingQuality)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("GSE_SystemSettingsFuncLib", "SetAntiAliasingQuality");

	Params::GSE_SystemSettingsFuncLib_SetAntiAliasingQuality Parms{};

	Parms.InAntiAliasingQuality = InAntiAliasingQuality;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function UnrealExtent.GSE_SystemSettingsFuncLib.SetEffectsQuality
// (Final, Native, Static, Private, BlueprintCallable)
// Parameters:
// EScalabilityQuality                     InEffectQuality                                        (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UGSE_SystemSettingsFuncLib::SetEffectsQuality(EScalabilityQuality InEffectQuality)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("GSE_SystemSettingsFuncLib", "SetEffectsQuality");

	Params::GSE_SystemSettingsFuncLib_SetEffectsQuality Parms{};

	Parms.InEffectQuality = InEffectQuality;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function UnrealExtent.GSE_SystemSettingsFuncLib.SetFoliageQuality
// (Final, Native, Static, Private, BlueprintCallable)
// Parameters:
// EScalabilityQuality                     InFoliageQuality                                       (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UGSE_SystemSettingsFuncLib::SetFoliageQuality(EScalabilityQuality InFoliageQuality)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("GSE_SystemSettingsFuncLib", "SetFoliageQuality");

	Params::GSE_SystemSettingsFuncLib_SetFoliageQuality Parms{};

	Parms.InFoliageQuality = InFoliageQuality;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function UnrealExtent.GSE_SystemSettingsFuncLib.SetFrameRateLimit
// (Final, Native, Static, Private, BlueprintCallable)
// Parameters:
// float                                   InFrameRateLimit                                       (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UGSE_SystemSettingsFuncLib::SetFrameRateLimit(float InFrameRateLimit)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("GSE_SystemSettingsFuncLib", "SetFrameRateLimit");

	Params::GSE_SystemSettingsFuncLib_SetFrameRateLimit Parms{};

	Parms.InFrameRateLimit = InFrameRateLimit;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function UnrealExtent.GSE_SystemSettingsFuncLib.SetGlobalIlluminationQuality
// (Final, Native, Static, Private, BlueprintCallable)
// Parameters:
// EScalabilityQuality                     InGIQuality                                            (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UGSE_SystemSettingsFuncLib::SetGlobalIlluminationQuality(EScalabilityQuality InGIQuality)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("GSE_SystemSettingsFuncLib", "SetGlobalIlluminationQuality");

	Params::GSE_SystemSettingsFuncLib_SetGlobalIlluminationQuality Parms{};

	Parms.InGIQuality = InGIQuality;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function UnrealExtent.GSE_SystemSettingsFuncLib.SetMonitorAsPrimary
// (Final, Native, Static, Private, BlueprintCallable)
// Parameters:
// class FString                           MonitorID                                              (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UGSE_SystemSettingsFuncLib::SetMonitorAsPrimary(const class FString& MonitorID)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("GSE_SystemSettingsFuncLib", "SetMonitorAsPrimary");

	Params::GSE_SystemSettingsFuncLib_SetMonitorAsPrimary Parms{};

	Parms.MonitorID = std::move(MonitorID);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function UnrealExtent.GSE_SystemSettingsFuncLib.SetMonitorAsPrimaryV2
// (Final, Native, Static, Private, BlueprintCallable)
// Parameters:
// class FString                           InMonitorID                                            (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UGSE_SystemSettingsFuncLib::SetMonitorAsPrimaryV2(const class FString& InMonitorID)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("GSE_SystemSettingsFuncLib", "SetMonitorAsPrimaryV2");

	Params::GSE_SystemSettingsFuncLib_SetMonitorAsPrimaryV2 Parms{};

	Parms.InMonitorID = std::move(InMonitorID);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function UnrealExtent.GSE_SystemSettingsFuncLib.SetPostProcessQuality
// (Final, Native, Static, Private, BlueprintCallable)
// Parameters:
// EScalabilityQuality                     InPostProcessQuality                                   (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UGSE_SystemSettingsFuncLib::SetPostProcessQuality(EScalabilityQuality InPostProcessQuality)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("GSE_SystemSettingsFuncLib", "SetPostProcessQuality");

	Params::GSE_SystemSettingsFuncLib_SetPostProcessQuality Parms{};

	Parms.InPostProcessQuality = InPostProcessQuality;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function UnrealExtent.GSE_SystemSettingsFuncLib.SetPriorityMode
// (Final, Native, Static, Private, BlueprintCallable)
// Parameters:
// EGSPriorityMode                         InPriorityMode                                         (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UGSE_SystemSettingsFuncLib::SetPriorityMode(EGSPriorityMode InPriorityMode)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("GSE_SystemSettingsFuncLib", "SetPriorityMode");

	Params::GSE_SystemSettingsFuncLib_SetPriorityMode Parms{};

	Parms.InPriorityMode = InPriorityMode;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function UnrealExtent.GSE_SystemSettingsFuncLib.SetReflectionQuality
// (Final, Native, Static, Private, BlueprintCallable)
// Parameters:
// EScalabilityQuality                     InReflectionQuality                                    (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UGSE_SystemSettingsFuncLib::SetReflectionQuality(EScalabilityQuality InReflectionQuality)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("GSE_SystemSettingsFuncLib", "SetReflectionQuality");

	Params::GSE_SystemSettingsFuncLib_SetReflectionQuality Parms{};

	Parms.InReflectionQuality = InReflectionQuality;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function UnrealExtent.GSE_SystemSettingsFuncLib.SetResolutionQualityLevel
// (Final, Native, Static, Private, BlueprintCallable)
// Parameters:
// EScalabilityQuality                     InResolutionQualityLevel                               (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UGSE_SystemSettingsFuncLib::SetResolutionQualityLevel(EScalabilityQuality InResolutionQualityLevel)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("GSE_SystemSettingsFuncLib", "SetResolutionQualityLevel");

	Params::GSE_SystemSettingsFuncLib_SetResolutionQualityLevel Parms{};

	Parms.InResolutionQualityLevel = InResolutionQualityLevel;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function UnrealExtent.GSE_SystemSettingsFuncLib.SetResolutionQualityScale
// (Final, Native, Static, Private, BlueprintCallable)
// Parameters:
// float                                   InResolutionQualityScale                               (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UGSE_SystemSettingsFuncLib::SetResolutionQualityScale(float InResolutionQualityScale)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("GSE_SystemSettingsFuncLib", "SetResolutionQualityScale");

	Params::GSE_SystemSettingsFuncLib_SetResolutionQualityScale Parms{};

	Parms.InResolutionQualityScale = InResolutionQualityScale;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function UnrealExtent.GSE_SystemSettingsFuncLib.SetScalabilityQualities
// (Final, Native, Static, Private, BlueprintCallable)
// Parameters:
// struct FGSScalabilityQualities          Qualities                                              (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)

void UGSE_SystemSettingsFuncLib::SetScalabilityQualities(const struct FGSScalabilityQualities& Qualities)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("GSE_SystemSettingsFuncLib", "SetScalabilityQualities");

	Params::GSE_SystemSettingsFuncLib_SetScalabilityQualities Parms{};

	Parms.Qualities = std::move(Qualities);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function UnrealExtent.GSE_SystemSettingsFuncLib.SetScalabilityQuality
// (Final, Native, Static, Private, BlueprintCallable)
// Parameters:
// EScalabilityQuality                     TargetGSQualityLevel                                   (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UGSE_SystemSettingsFuncLib::SetScalabilityQuality(EScalabilityQuality TargetGSQualityLevel)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("GSE_SystemSettingsFuncLib", "SetScalabilityQuality");

	Params::GSE_SystemSettingsFuncLib_SetScalabilityQuality Parms{};

	Parms.TargetGSQualityLevel = TargetGSQualityLevel;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function UnrealExtent.GSE_SystemSettingsFuncLib.SetScreenPos
// (Final, Native, Static, Private, HasDefaults, BlueprintCallable)
// Parameters:
// struct FVector2D                        Position                                               (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UGSE_SystemSettingsFuncLib::SetScreenPos(const struct FVector2D& Position)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("GSE_SystemSettingsFuncLib", "SetScreenPos");

	Params::GSE_SystemSettingsFuncLib_SetScreenPos Parms{};

	Parms.Position = std::move(Position);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function UnrealExtent.GSE_SystemSettingsFuncLib.SetShadingQuality
// (Final, Native, Static, Private, BlueprintCallable)
// Parameters:
// EScalabilityQuality                     InShadingQuality                                       (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UGSE_SystemSettingsFuncLib::SetShadingQuality(EScalabilityQuality InShadingQuality)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("GSE_SystemSettingsFuncLib", "SetShadingQuality");

	Params::GSE_SystemSettingsFuncLib_SetShadingQuality Parms{};

	Parms.InShadingQuality = InShadingQuality;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function UnrealExtent.GSE_SystemSettingsFuncLib.SetShadowQuality
// (Final, Native, Static, Private, BlueprintCallable)
// Parameters:
// EScalabilityQuality                     InShadowQuality                                        (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UGSE_SystemSettingsFuncLib::SetShadowQuality(EScalabilityQuality InShadowQuality)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("GSE_SystemSettingsFuncLib", "SetShadowQuality");

	Params::GSE_SystemSettingsFuncLib_SetShadowQuality Parms{};

	Parms.InShadowQuality = InShadowQuality;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function UnrealExtent.GSE_SystemSettingsFuncLib.SetTargetResolution
// (Final, Native, Static, Private, HasDefaults, BlueprintCallable)
// Parameters:
// struct FIntPoint                        TargetResolution                                       (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    NeedFresh                                              (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UGSE_SystemSettingsFuncLib::SetTargetResolution(const struct FIntPoint& TargetResolution, bool NeedFresh)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("GSE_SystemSettingsFuncLib", "SetTargetResolution");

	Params::GSE_SystemSettingsFuncLib_SetTargetResolution Parms{};

	Parms.TargetResolution = std::move(TargetResolution);
	Parms.NeedFresh = NeedFresh;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function UnrealExtent.GSE_SystemSettingsFuncLib.SetTargetScreenMode
// (Final, Native, Static, Private, BlueprintCallable)
// Parameters:
// EGSScreenMode                           TargetScreenMode                                       (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UGSE_SystemSettingsFuncLib::SetTargetScreenMode(EGSScreenMode TargetScreenMode)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("GSE_SystemSettingsFuncLib", "SetTargetScreenMode");

	Params::GSE_SystemSettingsFuncLib_SetTargetScreenMode Parms{};

	Parms.TargetScreenMode = TargetScreenMode;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function UnrealExtent.GSE_SystemSettingsFuncLib.SetTargetScreenModeV2
// (Final, Native, Static, Private, BlueprintCallable)
// Parameters:
// EWindowMode                             TargetWindowMode                                       (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UGSE_SystemSettingsFuncLib::SetTargetScreenModeV2(EWindowMode TargetWindowMode)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("GSE_SystemSettingsFuncLib", "SetTargetScreenModeV2");

	Params::GSE_SystemSettingsFuncLib_SetTargetScreenModeV2 Parms{};

	Parms.TargetWindowMode = TargetWindowMode;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function UnrealExtent.GSE_SystemSettingsFuncLib.SetTextureQuality
// (Final, Native, Static, Private, BlueprintCallable)
// Parameters:
// EScalabilityQuality                     InTextureQuality                                       (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UGSE_SystemSettingsFuncLib::SetTextureQuality(EScalabilityQuality InTextureQuality)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("GSE_SystemSettingsFuncLib", "SetTextureQuality");

	Params::GSE_SystemSettingsFuncLib_SetTextureQuality Parms{};

	Parms.InTextureQuality = InTextureQuality;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function UnrealExtent.GSE_SystemSettingsFuncLib.SetViewDistanceQuality
// (Final, Native, Static, Private, BlueprintCallable)
// Parameters:
// EScalabilityQuality                     InViewDistanceQuality                                  (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UGSE_SystemSettingsFuncLib::SetViewDistanceQuality(EScalabilityQuality InViewDistanceQuality)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("GSE_SystemSettingsFuncLib", "SetViewDistanceQuality");

	Params::GSE_SystemSettingsFuncLib_SetViewDistanceQuality Parms{};

	Parms.InViewDistanceQuality = InViewDistanceQuality;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function UnrealExtent.GSE_SystemSettingsFuncLib.SetVSyncEnabled
// (Final, Native, Static, Private, BlueprintCallable)
// Parameters:
// bool                                    bEnableVSync                                           (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UGSE_SystemSettingsFuncLib::SetVSyncEnabled(bool bEnableVSync)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("GSE_SystemSettingsFuncLib", "SetVSyncEnabled");

	Params::GSE_SystemSettingsFuncLib_SetVSyncEnabled Parms{};

	Parms.bEnableVSync = bEnableVSync;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function UnrealExtent.GSE_SystemSettingsFuncLib.OnMonitorAsPrimaryChange
// (Final, Native, Private)
// Parameters:
// int32                                   TargetPrimaryMonitorIndex                              (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UGSE_SystemSettingsFuncLib::OnMonitorAsPrimaryChange(int32 TargetPrimaryMonitorIndex)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GSE_SystemSettingsFuncLib", "OnMonitorAsPrimaryChange");

	Params::GSE_SystemSettingsFuncLib_OnMonitorAsPrimaryChange Parms{};

	Parms.TargetPrimaryMonitorIndex = TargetPrimaryMonitorIndex;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function UnrealExtent.GSE_SystemSettingsFuncLib.OnViewportResizedEvent
// (Final, Native, Private, HasDefaults)
// Parameters:
// struct FIntPoint                        NewSize                                                (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UGSE_SystemSettingsFuncLib::OnViewportResizedEvent(const struct FIntPoint& NewSize)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GSE_SystemSettingsFuncLib", "OnViewportResizedEvent");

	Params::GSE_SystemSettingsFuncLib_OnViewportResizedEvent Parms{};

	Parms.NewSize = std::move(NewSize);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function UnrealExtent.GSE_TextureFuncLib.BuildStreamedLowMips
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// class URuntimeVirtualTextureComponent*  RVTComponent                                           (Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UGSE_TextureFuncLib::BuildStreamedLowMips(class URuntimeVirtualTextureComponent* RVTComponent)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("GSE_TextureFuncLib", "BuildStreamedLowMips");

	Params::GSE_TextureFuncLib_BuildStreamedLowMips Parms{};

	Parms.RVTComponent = RVTComponent;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function UnrealExtent.GSE_TextureFuncLib.CalculateAverageColorInTiles
// (Final, Native, Static, Public, HasDefaults, BlueprintCallable)
// Parameters:
// class UTexture2D*                       InTexture                                              (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FIntPoint                        TileCount                                              (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    bDebugLog                                              (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// TArray<float>                           ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, NativeAccessSpecifierPublic)

TArray<float> UGSE_TextureFuncLib::CalculateAverageColorInTiles(class UTexture2D* InTexture, const struct FIntPoint& TileCount, bool bDebugLog)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("GSE_TextureFuncLib", "CalculateAverageColorInTiles");

	Params::GSE_TextureFuncLib_CalculateAverageColorInTiles Parms{};

	Parms.InTexture = InTexture;
	Parms.TileCount = std::move(TileCount);
	Parms.bDebugLog = bDebugLog;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function UnrealExtent.GSE_TextureFuncLib.CaptureStreamingTextureStats
// (Final, Native, Static, Public, BlueprintCallable)

void UGSE_TextureFuncLib::CaptureStreamingTextureStats()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("GSE_TextureFuncLib", "CaptureStreamingTextureStats");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function UnrealExtent.GSE_TextureFuncLib.ChangeImageMaterial
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// class UObject*                          WorldContextObject                                     (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class UImage*                           Image                                                  (Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class FString                           MatPath                                                (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class UMaterialInstanceDynamic*         ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class UMaterialInstanceDynamic* UGSE_TextureFuncLib::ChangeImageMaterial(class UObject* WorldContextObject, class UImage* Image, const class FString& MatPath)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("GSE_TextureFuncLib", "ChangeImageMaterial");

	Params::GSE_TextureFuncLib_ChangeImageMaterial Parms{};

	Parms.WorldContextObject = WorldContextObject;
	Parms.Image = Image;
	Parms.MatPath = std::move(MatPath);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function UnrealExtent.GSE_TextureFuncLib.CollectNonPowerOfTwoUdimVT
// (Final, Native, Static, Public, BlueprintCallable)

void UGSE_TextureFuncLib::CollectNonPowerOfTwoUdimVT()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("GSE_TextureFuncLib", "CollectNonPowerOfTwoUdimVT");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function UnrealExtent.GSE_TextureFuncLib.CreateRenderTarget2D
// (Final, Native, Static, Public, HasDefaults, BlueprintCallable)
// Parameters:
// class UObject*                          WorldContextObject                                     (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32                                   Width                                                  (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32                                   Height                                                 (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FLinearColor                     ClearColor                                             (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class UTextureRenderTarget2D*           ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class UTextureRenderTarget2D* UGSE_TextureFuncLib::CreateRenderTarget2D(class UObject* WorldContextObject, int32 Width, int32 Height, const struct FLinearColor& ClearColor)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("GSE_TextureFuncLib", "CreateRenderTarget2D");

	Params::GSE_TextureFuncLib_CreateRenderTarget2D Parms{};

	Parms.WorldContextObject = WorldContextObject;
	Parms.Width = Width;
	Parms.Height = Height;
	Parms.ClearColor = std::move(ClearColor);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function UnrealExtent.GSE_TextureFuncLib.CreateStaticTexture2D
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// class UTextureRenderTarget2D*           SourceRT                                               (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class FString                           OutputPath                                             (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class FString                           OutputFileName                                         (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UGSE_TextureFuncLib::CreateStaticTexture2D(class UTextureRenderTarget2D* SourceRT, const class FString& OutputPath, const class FString& OutputFileName)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("GSE_TextureFuncLib", "CreateStaticTexture2D");

	Params::GSE_TextureFuncLib_CreateStaticTexture2D Parms{};

	Parms.SourceRT = SourceRT;
	Parms.OutputPath = std::move(OutputPath);
	Parms.OutputFileName = std::move(OutputFileName);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function UnrealExtent.GSE_TextureFuncLib.CreateTexture2D
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// int32                                   SrcWidth                                               (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32                                   SrcHeight                                              (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class FString                           Name_0                                                 (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// EPixelFormat                            InFormat                                               (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class UTexture2D*                       ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class UTexture2D* UGSE_TextureFuncLib::CreateTexture2D(int32 SrcWidth, int32 SrcHeight, const class FString& Name_0, EPixelFormat InFormat)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("GSE_TextureFuncLib", "CreateTexture2D");

	Params::GSE_TextureFuncLib_CreateTexture2D Parms{};

	Parms.SrcWidth = SrcWidth;
	Parms.SrcHeight = SrcHeight;
	Parms.Name_0 = std::move(Name_0);
	Parms.InFormat = InFormat;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function UnrealExtent.GSE_TextureFuncLib.CreateTexture2DFromColorData
// (Final, Native, Static, Public, HasOutParams, BlueprintCallable)
// Parameters:
// int32                                   SrcWidth                                               (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32                                   SrcHeight                                              (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// TArray<struct FColor>                   ColorData                                              (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
// class FString                           Name_0                                                 (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class UTexture2D*                       ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class UTexture2D* UGSE_TextureFuncLib::CreateTexture2DFromColorData(int32 SrcWidth, int32 SrcHeight, const TArray<struct FColor>& ColorData, const class FString& Name_0)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("GSE_TextureFuncLib", "CreateTexture2DFromColorData");

	Params::GSE_TextureFuncLib_CreateTexture2DFromColorData Parms{};

	Parms.SrcWidth = SrcWidth;
	Parms.SrcHeight = SrcHeight;
	Parms.ColorData = std::move(ColorData);
	Parms.Name_0 = std::move(Name_0);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function UnrealExtent.GSE_TextureFuncLib.DumpStreamingTextureStats
// (Final, Native, Static, Public, BlueprintCallable)

void UGSE_TextureFuncLib::DumpStreamingTextureStats()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("GSE_TextureFuncLib", "DumpStreamingTextureStats");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function UnrealExtent.GSE_TextureFuncLib.EndCapturingStreamingTextureStats
// (Final, Native, Static, Public, BlueprintCallable)

void UGSE_TextureFuncLib::EndCapturingStreamingTextureStats()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("GSE_TextureFuncLib", "EndCapturingStreamingTextureStats");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function UnrealExtent.GSE_TextureFuncLib.ExportColorDataAsPNG
// (Final, Native, Static, Public, HasOutParams, BlueprintCallable)
// Parameters:
// int32                                   SrcWidth                                               (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32                                   SrcHeight                                              (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class FString                           FilePath                                               (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FColorBufferPtr                  ColorBuffer                                            (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
// int32                                   Count                                                  (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UGSE_TextureFuncLib::ExportColorDataAsPNG(int32 SrcWidth, int32 SrcHeight, const class FString& FilePath, const struct FColorBufferPtr& ColorBuffer, int32 Count)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("GSE_TextureFuncLib", "ExportColorDataAsPNG");

	Params::GSE_TextureFuncLib_ExportColorDataAsPNG Parms{};

	Parms.SrcWidth = SrcWidth;
	Parms.SrcHeight = SrcHeight;
	Parms.FilePath = std::move(FilePath);
	Parms.ColorBuffer = std::move(ColorBuffer);
	Parms.Count = Count;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function UnrealExtent.GSE_TextureFuncLib.ExportTexture2D
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// class UObject*                          WorldContextObject                                     (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class UTexture2D*                       Texture                                                (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class FString                           FilePath                                               (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class FString                           Filename                                               (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UGSE_TextureFuncLib::ExportTexture2D(class UObject* WorldContextObject, class UTexture2D* Texture, const class FString& FilePath, const class FString& Filename)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("GSE_TextureFuncLib", "ExportTexture2D");

	Params::GSE_TextureFuncLib_ExportTexture2D Parms{};

	Parms.WorldContextObject = WorldContextObject;
	Parms.Texture = Texture;
	Parms.FilePath = std::move(FilePath);
	Parms.Filename = std::move(Filename);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function UnrealExtent.GSE_TextureFuncLib.OutputNonPowerOfTwoUdimVTInfo
// (Final, Native, Static, Public, BlueprintCallable)

void UGSE_TextureFuncLib::OutputNonPowerOfTwoUdimVTInfo()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("GSE_TextureFuncLib", "OutputNonPowerOfTwoUdimVTInfo");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function UnrealExtent.GSE_TextureFuncLib.ReleaseRenderTarget
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// class UTextureRenderTarget2D*           TextureRenderTarget                                    (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UGSE_TextureFuncLib::ReleaseRenderTarget(class UTextureRenderTarget2D* TextureRenderTarget)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("GSE_TextureFuncLib", "ReleaseRenderTarget");

	Params::GSE_TextureFuncLib_ReleaseRenderTarget Parms{};

	Parms.TextureRenderTarget = TextureRenderTarget;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function UnrealExtent.GSE_TextureFuncLib.StartCapturingStreamingTextureStats
// (Final, Native, Static, Public, BlueprintCallable)

void UGSE_TextureFuncLib::StartCapturingStreamingTextureStats()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("GSE_TextureFuncLib", "StartCapturingStreamingTextureStats");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function UnrealExtent.GSE_TextureFuncLib.WriteToTexture_GameThread
// (Final, Native, Static, Public, HasOutParams, BlueprintCallable)
// Parameters:
// class UTexture2D*                       TargetTexture                                          (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FColorBufferPtr                  ColorBuffer                                            (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
// int32                                   Count                                                  (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32                                   MipMapIndex                                            (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UGSE_TextureFuncLib::WriteToTexture_GameThread(class UTexture2D* TargetTexture, const struct FColorBufferPtr& ColorBuffer, int32 Count, int32 MipMapIndex)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("GSE_TextureFuncLib", "WriteToTexture_GameThread");

	Params::GSE_TextureFuncLib_WriteToTexture_GameThread Parms{};

	Parms.TargetTexture = TargetTexture;
	Parms.ColorBuffer = std::move(ColorBuffer);
	Parms.Count = Count;
	Parms.MipMapIndex = MipMapIndex;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function UnrealExtent.GSE_TextureFuncLib.WriteToTexture_RenderingThread
// (Final, Native, Static, Public, HasOutParams, BlueprintCallable)
// Parameters:
// class UTexture2D*                       TargetTexture                                          (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FColorBufferPtr                  ColorBuffer                                            (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
// int32                                   Count                                                  (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32                                   MipMapIndex                                            (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UGSE_TextureFuncLib::WriteToTexture_RenderingThread(class UTexture2D* TargetTexture, const struct FColorBufferPtr& ColorBuffer, int32 Count, int32 MipMapIndex)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("GSE_TextureFuncLib", "WriteToTexture_RenderingThread");

	Params::GSE_TextureFuncLib_WriteToTexture_RenderingThread Parms{};

	Parms.TargetTexture = TargetTexture;
	Parms.ColorBuffer = std::move(ColorBuffer);
	Parms.Count = Count;
	Parms.MipMapIndex = MipMapIndex;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function UnrealExtent.GSE_UINavigationFuncLib.AddNavigationActionKey
// (Final, Native, Static, Public, HasOutParams, BlueprintCallable)
// Parameters:
// EUINavigationAction                     TargetNavigationAction                                 (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class FName                             KeyName                                                (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UGSE_UINavigationFuncLib::AddNavigationActionKey(EUINavigationAction TargetNavigationAction, const class FName& KeyName)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("GSE_UINavigationFuncLib", "AddNavigationActionKey");

	Params::GSE_UINavigationFuncLib_AddNavigationActionKey Parms{};

	Parms.TargetNavigationAction = TargetNavigationAction;
	Parms.KeyName = KeyName;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function UnrealExtent.GSE_UINavigationFuncLib.AddNavigationKey
// (Final, Native, Static, Public, HasOutParams, BlueprintCallable)
// Parameters:
// EUINavigation                           TargetNavigation                                       (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class FName                             KeyName                                                (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UGSE_UINavigationFuncLib::AddNavigationKey(EUINavigation TargetNavigation, const class FName& KeyName)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("GSE_UINavigationFuncLib", "AddNavigationKey");

	Params::GSE_UINavigationFuncLib_AddNavigationKey Parms{};

	Parms.TargetNavigation = TargetNavigation;
	Parms.KeyName = KeyName;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function UnrealExtent.GSE_UINavigationFuncLib.BlockConflictNavigation
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// EGSUIConflictNavigationType             ConflictNavigationType                                 (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    bBlock                                                 (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// TArray<EUINavigation>                   NotBlockNavigations                                    (Parm, ZeroConstructor, NativeAccessSpecifierPublic)

void UGSE_UINavigationFuncLib::BlockConflictNavigation(EGSUIConflictNavigationType ConflictNavigationType, bool bBlock, const TArray<EUINavigation>& NotBlockNavigations)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("GSE_UINavigationFuncLib", "BlockConflictNavigation");

	Params::GSE_UINavigationFuncLib_BlockConflictNavigation Parms{};

	Parms.ConflictNavigationType = ConflictNavigationType;
	Parms.bBlock = bBlock;
	Parms.NotBlockNavigations = std::move(NotBlockNavigations);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function UnrealExtent.GSE_UINavigationFuncLib.ClearAllNavigationActionKey
// (Final, Native, Static, Public, BlueprintCallable)

void UGSE_UINavigationFuncLib::ClearAllNavigationActionKey()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("GSE_UINavigationFuncLib", "ClearAllNavigationActionKey");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function UnrealExtent.GSE_UINavigationFuncLib.ClearAllNavigationKey
// (Final, Native, Static, Public, BlueprintCallable)

void UGSE_UINavigationFuncLib::ClearAllNavigationKey()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("GSE_UINavigationFuncLib", "ClearAllNavigationKey");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function UnrealExtent.GSE_UINavigationFuncLib.ClearNavigationActionKey
// (Final, Native, Static, Public, HasOutParams, BlueprintCallable)
// Parameters:
// class FName                             KeyName                                                (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UGSE_UINavigationFuncLib::ClearNavigationActionKey(const class FName& KeyName)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("GSE_UINavigationFuncLib", "ClearNavigationActionKey");

	Params::GSE_UINavigationFuncLib_ClearNavigationActionKey Parms{};

	Parms.KeyName = KeyName;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function UnrealExtent.GSE_UINavigationFuncLib.ClearNavigationActionKeyByAction
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// EUINavigationAction                     TargetNavigationAction                                 (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UGSE_UINavigationFuncLib::ClearNavigationActionKeyByAction(EUINavigationAction TargetNavigationAction)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("GSE_UINavigationFuncLib", "ClearNavigationActionKeyByAction");

	Params::GSE_UINavigationFuncLib_ClearNavigationActionKeyByAction Parms{};

	Parms.TargetNavigationAction = TargetNavigationAction;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function UnrealExtent.GSE_UINavigationFuncLib.ClearNavigationKey
// (Final, Native, Static, Public, HasOutParams, BlueprintCallable)
// Parameters:
// class FName                             KeyName                                                (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UGSE_UINavigationFuncLib::ClearNavigationKey(const class FName& KeyName)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("GSE_UINavigationFuncLib", "ClearNavigationKey");

	Params::GSE_UINavigationFuncLib_ClearNavigationKey Parms{};

	Parms.KeyName = KeyName;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function UnrealExtent.GSE_UINavigationFuncLib.ClearNavigationKeyByNavigation
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// EUINavigation                           TargetNavigation                                       (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UGSE_UINavigationFuncLib::ClearNavigationKeyByNavigation(EUINavigation TargetNavigation)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("GSE_UINavigationFuncLib", "ClearNavigationKeyByNavigation");

	Params::GSE_UINavigationFuncLib_ClearNavigationKeyByNavigation Parms{};

	Parms.TargetNavigation = TargetNavigation;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function UnrealExtent.GSE_UINavigationFuncLib.GetIsNeedAnalogNavigation
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UGSE_UINavigationFuncLib::GetIsNeedAnalogNavigation()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("GSE_UINavigationFuncLib", "GetIsNeedAnalogNavigation");

	Params::GSE_UINavigationFuncLib_GetIsNeedAnalogNavigation Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function UnrealExtent.GSE_UINavigationFuncLib.GetIsNeedKeyNavigation
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UGSE_UINavigationFuncLib::GetIsNeedKeyNavigation()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("GSE_UINavigationFuncLib", "GetIsNeedKeyNavigation");

	Params::GSE_UINavigationFuncLib_GetIsNeedKeyNavigation Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function UnrealExtent.GSE_UINavigationFuncLib.GetIsNeedNavigationAction
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UGSE_UINavigationFuncLib::GetIsNeedNavigationAction()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("GSE_UINavigationFuncLib", "GetIsNeedNavigationAction");

	Params::GSE_UINavigationFuncLib_GetIsNeedNavigationAction Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function UnrealExtent.GSE_UINavigationFuncLib.GetIsNeedTabKeyNavigation
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UGSE_UINavigationFuncLib::GetIsNeedTabKeyNavigation()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("GSE_UINavigationFuncLib", "GetIsNeedTabKeyNavigation");

	Params::GSE_UINavigationFuncLib_GetIsNeedTabKeyNavigation Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function UnrealExtent.GSE_UINavigationFuncLib.GetNavigationActionFromKey
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// struct FKeyEvent                        InKeyEvent                                             (ConstParm, Parm, NativeAccessSpecifierPublic)
// EUINavigationAction                     ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

EUINavigationAction UGSE_UINavigationFuncLib::GetNavigationActionFromKey(const struct FKeyEvent& InKeyEvent)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("GSE_UINavigationFuncLib", "GetNavigationActionFromKey");

	Params::GSE_UINavigationFuncLib_GetNavigationActionFromKey Parms{};

	Parms.InKeyEvent = std::move(InKeyEvent);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function UnrealExtent.GSE_UINavigationFuncLib.GetNavigationDirectionFromAnalogForOP
// (Final, Native, Static, Public, HasOutParams, BlueprintCallable)
// Parameters:
// struct FAnalogInputEvent                InAnalogEvent                                          (ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
// EUINavigation                           ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

EUINavigation UGSE_UINavigationFuncLib::GetNavigationDirectionFromAnalogForOP(const struct FAnalogInputEvent& InAnalogEvent)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("GSE_UINavigationFuncLib", "GetNavigationDirectionFromAnalogForOP");

	Params::GSE_UINavigationFuncLib_GetNavigationDirectionFromAnalogForOP Parms{};

	Parms.InAnalogEvent = std::move(InAnalogEvent);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function UnrealExtent.GSE_UINavigationFuncLib.GetNavigationDirectionFromKey
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// struct FKeyEvent                        InKeyEvent                                             (ConstParm, Parm, NativeAccessSpecifierPublic)
// EUINavigation                           ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

EUINavigation UGSE_UINavigationFuncLib::GetNavigationDirectionFromKey(const struct FKeyEvent& InKeyEvent)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("GSE_UINavigationFuncLib", "GetNavigationDirectionFromKey");

	Params::GSE_UINavigationFuncLib_GetNavigationDirectionFromKey Parms{};

	Parms.InKeyEvent = std::move(InKeyEvent);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function UnrealExtent.GSE_UINavigationFuncLib.InitSetWorkingGSUINavigation
// (Final, Native, Static, Public, BlueprintCallable)

void UGSE_UINavigationFuncLib::InitSetWorkingGSUINavigation()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("GSE_UINavigationFuncLib", "InitSetWorkingGSUINavigation");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function UnrealExtent.GSE_UINavigationFuncLib.IsRepeatAction
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// struct FKeyEvent                        InKeyEvent                                             (ConstParm, Parm, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UGSE_UINavigationFuncLib::IsRepeatAction(const struct FKeyEvent& InKeyEvent)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("GSE_UINavigationFuncLib", "IsRepeatAction");

	Params::GSE_UINavigationFuncLib_IsRepeatAction Parms{};

	Parms.InKeyEvent = std::move(InKeyEvent);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function UnrealExtent.GSE_UINavigationFuncLib.SetAnalogNavigationHorizontalThreshold
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// float                                   TargetThreshold                                        (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UGSE_UINavigationFuncLib::SetAnalogNavigationHorizontalThreshold(float TargetThreshold)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("GSE_UINavigationFuncLib", "SetAnalogNavigationHorizontalThreshold");

	Params::GSE_UINavigationFuncLib_SetAnalogNavigationHorizontalThreshold Parms{};

	Parms.TargetThreshold = TargetThreshold;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function UnrealExtent.GSE_UINavigationFuncLib.SetAnalogNavigationVerticalThreshold
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// float                                   TargetThreshold                                        (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UGSE_UINavigationFuncLib::SetAnalogNavigationVerticalThreshold(float TargetThreshold)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("GSE_UINavigationFuncLib", "SetAnalogNavigationVerticalThreshold");

	Params::GSE_UINavigationFuncLib_SetAnalogNavigationVerticalThreshold Parms{};

	Parms.TargetThreshold = TargetThreshold;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function UnrealExtent.GSE_UINavigationFuncLib.SetNeedAnalogNavigation
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// bool                                    IsNeed                                                 (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UGSE_UINavigationFuncLib::SetNeedAnalogNavigation(bool IsNeed)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("GSE_UINavigationFuncLib", "SetNeedAnalogNavigation");

	Params::GSE_UINavigationFuncLib_SetNeedAnalogNavigation Parms{};

	Parms.IsNeed = IsNeed;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function UnrealExtent.GSE_UINavigationFuncLib.SetNeedKeyNavigation
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// bool                                    IsNeed                                                 (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UGSE_UINavigationFuncLib::SetNeedKeyNavigation(bool IsNeed)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("GSE_UINavigationFuncLib", "SetNeedKeyNavigation");

	Params::GSE_UINavigationFuncLib_SetNeedKeyNavigation Parms{};

	Parms.IsNeed = IsNeed;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function UnrealExtent.GSE_UINavigationFuncLib.SetNeedNavigationAction
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// bool                                    IsNeed                                                 (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UGSE_UINavigationFuncLib::SetNeedNavigationAction(bool IsNeed)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("GSE_UINavigationFuncLib", "SetNeedNavigationAction");

	Params::GSE_UINavigationFuncLib_SetNeedNavigationAction Parms{};

	Parms.IsNeed = IsNeed;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function UnrealExtent.GSE_UINavigationFuncLib.SetNeedTabKeyNavigation
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// bool                                    IsNeed                                                 (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UGSE_UINavigationFuncLib::SetNeedTabKeyNavigation(bool IsNeed)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("GSE_UINavigationFuncLib", "SetNeedTabKeyNavigation");

	Params::GSE_UINavigationFuncLib_SetNeedTabKeyNavigation Parms{};

	Parms.IsNeed = IsNeed;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function UnrealExtent.GSE_UINavigationFuncLib.SetRepeatFactor
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// float                                   RepeatFactorInDefault                                  (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   RepeatFactorInPressure                                 (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   RepeatPressureFactor                                   (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   RepeatPressureCondition                                (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UGSE_UINavigationFuncLib::SetRepeatFactor(float RepeatFactorInDefault, float RepeatFactorInPressure, float RepeatPressureFactor, float RepeatPressureCondition)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("GSE_UINavigationFuncLib", "SetRepeatFactor");

	Params::GSE_UINavigationFuncLib_SetRepeatFactor Parms{};

	Parms.RepeatFactorInDefault = RepeatFactorInDefault;
	Parms.RepeatFactorInPressure = RepeatFactorInPressure;
	Parms.RepeatPressureFactor = RepeatPressureFactor;
	Parms.RepeatPressureCondition = RepeatPressureCondition;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function UnrealExtent.GSE_UMGFuncLib.ActiveVirtualKeyboard
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// bool                                    IsActive                                               (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UGSE_UMGFuncLib::ActiveVirtualKeyboard(bool IsActive)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("GSE_UMGFuncLib", "ActiveVirtualKeyboard");

	Params::GSE_UMGFuncLib_ActiveVirtualKeyboard Parms{};

	Parms.IsActive = IsActive;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function UnrealExtent.GSE_UMGFuncLib.AddUserWidgetAsSlateToViewport
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// class UUserWidget*                      Widget                                                 (Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32                                   ZOrder                                                 (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UGSE_UMGFuncLib::AddUserWidgetAsSlateToViewport(class UUserWidget* Widget, const int32 ZOrder)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("GSE_UMGFuncLib", "AddUserWidgetAsSlateToViewport");

	Params::GSE_UMGFuncLib_AddUserWidgetAsSlateToViewport Parms{};

	Parms.Widget = Widget;
	Parms.ZOrder = ZOrder;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function UnrealExtent.GSE_UMGFuncLib.BindBorderOnMouseDownEvent
// (Final, Native, Static, Public, HasOutParams, BlueprintCallable)
// Parameters:
// class UBorder*                          Border                                                 (Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class UObject*                          TargetObj                                              (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class FName                             Name_0                                                 (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UGSE_UMGFuncLib::BindBorderOnMouseDownEvent(class UBorder* Border, class UObject* TargetObj, const class FName& Name_0)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("GSE_UMGFuncLib", "BindBorderOnMouseDownEvent");

	Params::GSE_UMGFuncLib_BindBorderOnMouseDownEvent Parms{};

	Parms.Border = Border;
	Parms.TargetObj = TargetObj;
	Parms.Name_0 = Name_0;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function UnrealExtent.GSE_UMGFuncLib.BindImageOnMouseDownEvent
// (Final, Native, Static, Public, HasOutParams, BlueprintCallable)
// Parameters:
// class UImage*                           Image                                                  (Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class UObject*                          TargetObj                                              (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class FName                             Name_0                                                 (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UGSE_UMGFuncLib::BindImageOnMouseDownEvent(class UImage* Image, class UObject* TargetObj, const class FName& Name_0)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("GSE_UMGFuncLib", "BindImageOnMouseDownEvent");

	Params::GSE_UMGFuncLib_BindImageOnMouseDownEvent Parms{};

	Parms.Image = Image;
	Parms.TargetObj = TargetObj;
	Parms.Name_0 = Name_0;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function UnrealExtent.GSE_UMGFuncLib.CalcImageTexture
// (Final, Native, Static, Public, HasOutParams, BlueprintCallable)
// Parameters:
// class UImage*                           InImage                                                (Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// TArray<struct FColor>                   OutColorArray                                          (Parm, OutParm, ZeroConstructor, NativeAccessSpecifierPublic)
// TArray<struct FVector2D>                OutPosArray                                            (Parm, OutParm, ZeroConstructor, NativeAccessSpecifierPublic)

void UGSE_UMGFuncLib::CalcImageTexture(class UImage* InImage, TArray<struct FColor>* OutColorArray, TArray<struct FVector2D>* OutPosArray)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("GSE_UMGFuncLib", "CalcImageTexture");

	Params::GSE_UMGFuncLib_CalcImageTexture Parms{};

	Parms.InImage = InImage;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	if (OutColorArray != nullptr)
		*OutColorArray = std::move(Parms.OutColorArray);

	if (OutPosArray != nullptr)
		*OutPosArray = std::move(Parms.OutPosArray);
}


// Function UnrealExtent.GSE_UMGFuncLib.CloneUserWidget
// (Final, Native, Static, Public, HasOutParams, BlueprintCallable)
// Parameters:
// class UUserWidget*                      BaseWidget                                             (Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class FName                             Name_0                                                 (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class UUserWidget*                      ReturnValue                                            (ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class UUserWidget* UGSE_UMGFuncLib::CloneUserWidget(class UUserWidget* BaseWidget, const class FName& Name_0)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("GSE_UMGFuncLib", "CloneUserWidget");

	Params::GSE_UMGFuncLib_CloneUserWidget Parms{};

	Parms.BaseWidget = BaseWidget;
	Parms.Name_0 = Name_0;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function UnrealExtent.GSE_UMGFuncLib.ConstructUWidgetWithClass
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// class UUserWidget*                      FromWidget                                             (Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class UClass*                           WidgetClass                                            (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class UWidget*                          ReturnValue                                            (ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class UWidget* UGSE_UMGFuncLib::ConstructUWidgetWithClass(class UUserWidget* FromWidget, class UClass* WidgetClass)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("GSE_UMGFuncLib", "ConstructUWidgetWithClass");

	Params::GSE_UMGFuncLib_ConstructUWidgetWithClass Parms{};

	Parms.FromWidget = FromWidget;
	Parms.WidgetClass = WidgetClass;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function UnrealExtent.GSE_UMGFuncLib.ConvertToDateText
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// int32                                   Year                                                   (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32                                   Month                                                  (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32                                   Day                                                    (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32                                   Hour                                                   (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32                                   Minute                                                 (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32                                   Second                                                 (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class FText                             ReturnValue                                            (Parm, OutParm, ReturnParm, NativeAccessSpecifierPublic)

class FText UGSE_UMGFuncLib::ConvertToDateText(int32 Year, int32 Month, int32 Day, int32 Hour, int32 Minute, int32 Second)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("GSE_UMGFuncLib", "ConvertToDateText");

	Params::GSE_UMGFuncLib_ConvertToDateText Parms{};

	Parms.Year = Year;
	Parms.Month = Month;
	Parms.Day = Day;
	Parms.Hour = Hour;
	Parms.Minute = Minute;
	Parms.Second = Second;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function UnrealExtent.GSE_UMGFuncLib.ConvertToTimeText
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// int32                                   Year                                                   (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32                                   Month                                                  (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32                                   Day                                                    (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32                                   Hour                                                   (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32                                   Minute                                                 (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32                                   Second                                                 (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class FText                             ReturnValue                                            (Parm, OutParm, ReturnParm, NativeAccessSpecifierPublic)

class FText UGSE_UMGFuncLib::ConvertToTimeText(int32 Year, int32 Month, int32 Day, int32 Hour, int32 Minute, int32 Second)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("GSE_UMGFuncLib", "ConvertToTimeText");

	Params::GSE_UMGFuncLib_ConvertToTimeText Parms{};

	Parms.Year = Year;
	Parms.Month = Month;
	Parms.Day = Day;
	Parms.Hour = Hour;
	Parms.Minute = Minute;
	Parms.Second = Second;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function UnrealExtent.GSE_UMGFuncLib.CreateEditorStandaloneWidget
// (Final, Native, Static, Public, HasOutParams, BlueprintCallable, BlueprintPure)
// Parameters:
// class UWidget*                          OwningWidget                                           (Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class FString                           ResPath                                                (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class FName                             Name_0                                                 (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class UUserWidget*                      ReturnValue                                            (ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class UUserWidget* UGSE_UMGFuncLib::CreateEditorStandaloneWidget(class UWidget* OwningWidget, const class FString& ResPath, const class FName& Name_0)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("GSE_UMGFuncLib", "CreateEditorStandaloneWidget");

	Params::GSE_UMGFuncLib_CreateEditorStandaloneWidget Parms{};

	Parms.OwningWidget = OwningWidget;
	Parms.ResPath = std::move(ResPath);
	Parms.Name_0 = Name_0;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function UnrealExtent.GSE_UMGFuncLib.CreateGSAnimKeyStateBlender
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// class UObject*                          WorldContext                                           (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class UGSAnimKeyStateBlender*           ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class UGSAnimKeyStateBlender* UGSE_UMGFuncLib::CreateGSAnimKeyStateBlender(class UObject* WorldContext)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("GSE_UMGFuncLib", "CreateGSAnimKeyStateBlender");

	Params::GSE_UMGFuncLib_CreateGSAnimKeyStateBlender Parms{};

	Parms.WorldContext = WorldContext;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function UnrealExtent.GSE_UMGFuncLib.CreateGSViewPortHelper
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// class UObject*                          WorldContext                                           (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class UGSViewPortHelper*                ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class UGSViewPortHelper* UGSE_UMGFuncLib::CreateGSViewPortHelper(class UObject* WorldContext)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("GSE_UMGFuncLib", "CreateGSViewPortHelper");

	Params::GSE_UMGFuncLib_CreateGSViewPortHelper Parms{};

	Parms.WorldContext = WorldContext;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function UnrealExtent.GSE_UMGFuncLib.CreateUserWidget
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// class UObject*                          WorldContext                                           (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class FString                           ResPath                                                (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class UUserWidget*                      ReturnValue                                            (ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class UUserWidget* UGSE_UMGFuncLib::CreateUserWidget(class UObject* WorldContext, const class FString& ResPath)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("GSE_UMGFuncLib", "CreateUserWidget");

	Params::GSE_UMGFuncLib_CreateUserWidget Parms{};

	Parms.WorldContext = WorldContext;
	Parms.ResPath = std::move(ResPath);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function UnrealExtent.GSE_UMGFuncLib.CreateUserWidgetWithClass
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// class UObject*                          WorldContext                                           (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class UClass*                           WidgetClass                                            (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class UUserWidget*                      ReturnValue                                            (ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class UUserWidget* UGSE_UMGFuncLib::CreateUserWidgetWithClass(class UObject* WorldContext, class UClass* WidgetClass)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("GSE_UMGFuncLib", "CreateUserWidgetWithClass");

	Params::GSE_UMGFuncLib_CreateUserWidgetWithClass Parms{};

	Parms.WorldContext = WorldContext;
	Parms.WidgetClass = WidgetClass;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function UnrealExtent.GSE_UMGFuncLib.FindChildWidget
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// class UUserWidget*                      UserWidget                                             (Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class UPanelWidget*                     ParentWidget                                           (Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class FName                             ChildWidgetName                                        (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class UWidget*                          ReturnValue                                            (ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class UWidget* UGSE_UMGFuncLib::FindChildWidget(class UUserWidget* UserWidget, class UPanelWidget* ParentWidget, class FName ChildWidgetName)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("GSE_UMGFuncLib", "FindChildWidget");

	Params::GSE_UMGFuncLib_FindChildWidget Parms{};

	Parms.UserWidget = UserWidget;
	Parms.ParentWidget = ParentWidget;
	Parms.ChildWidgetName = ChildWidgetName;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function UnrealExtent.GSE_UMGFuncLib.FindChildWidgetIndex
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// class UUserWidget*                      UserWidget                                             (Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class UPanelWidget*                     ParentWidget                                           (Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class FName                             ChildWidgetName                                        (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

int32 UGSE_UMGFuncLib::FindChildWidgetIndex(class UUserWidget* UserWidget, class UPanelWidget* ParentWidget, class FName ChildWidgetName)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("GSE_UMGFuncLib", "FindChildWidgetIndex");

	Params::GSE_UMGFuncLib_FindChildWidgetIndex Parms{};

	Parms.UserWidget = UserWidget;
	Parms.ParentWidget = ParentWidget;
	Parms.ChildWidgetName = ChildWidgetName;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function UnrealExtent.GSE_UMGFuncLib.FoldTextContent
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// class UTextBlock*                       InTextBlock                                            (Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FTextFoldingConfig               InFoldingConfig                                        (Parm, NativeAccessSpecifierPublic)

void UGSE_UMGFuncLib::FoldTextContent(class UTextBlock* InTextBlock, const struct FTextFoldingConfig& InFoldingConfig)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("GSE_UMGFuncLib", "FoldTextContent");

	Params::GSE_UMGFuncLib_FoldTextContent Parms{};

	Parms.InTextBlock = InTextBlock;
	Parms.InFoldingConfig = std::move(InFoldingConfig);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function UnrealExtent.GSE_UMGFuncLib.GetAllChildUserWidget
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// class UPanelWidget*                     ParentWidget                                           (Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// TArray<class UUserWidget*>              ReturnValue                                            (ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, ContainsInstancedReference, NativeAccessSpecifierPublic)

TArray<class UUserWidget*> UGSE_UMGFuncLib::GetAllChildUserWidget(class UPanelWidget* ParentWidget)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("GSE_UMGFuncLib", "GetAllChildUserWidget");

	Params::GSE_UMGFuncLib_GetAllChildUserWidget Parms{};

	Parms.ParentWidget = ParentWidget;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function UnrealExtent.GSE_UMGFuncLib.GetAllChildUserWidgetWithClass
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// class UUserWidget*                      UserWidget                                             (Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class UClass*                           WidgetClass                                            (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// TArray<class UWidget*>                  ReturnValue                                            (ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, ContainsInstancedReference, NativeAccessSpecifierPublic)

TArray<class UWidget*> UGSE_UMGFuncLib::GetAllChildUserWidgetWithClass(class UUserWidget* UserWidget, class UClass* WidgetClass)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("GSE_UMGFuncLib", "GetAllChildUserWidgetWithClass");

	Params::GSE_UMGFuncLib_GetAllChildUserWidgetWithClass Parms{};

	Parms.UserWidget = UserWidget;
	Parms.WidgetClass = WidgetClass;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function UnrealExtent.GSE_UMGFuncLib.GetAllChildWidget
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// class UUserWidget*                      UserWidget                                             (Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// TArray<class UWidget*>                  ReturnValue                                            (ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, ContainsInstancedReference, NativeAccessSpecifierPublic)

TArray<class UWidget*> UGSE_UMGFuncLib::GetAllChildWidget(class UUserWidget* UserWidget)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("GSE_UMGFuncLib", "GetAllChildWidget");

	Params::GSE_UMGFuncLib_GetAllChildWidget Parms{};

	Parms.UserWidget = UserWidget;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function UnrealExtent.GSE_UMGFuncLib.GetAllChildWidgetWithClass
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// class UUserWidget*                      UserWidget                                             (Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class UClass*                           WidgetClass                                            (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// TArray<class UWidget*>                  ReturnValue                                            (ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, ContainsInstancedReference, NativeAccessSpecifierPublic)

TArray<class UWidget*> UGSE_UMGFuncLib::GetAllChildWidgetWithClass(class UUserWidget* UserWidget, class UClass* WidgetClass)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("GSE_UMGFuncLib", "GetAllChildWidgetWithClass");

	Params::GSE_UMGFuncLib_GetAllChildWidgetWithClass Parms{};

	Parms.UserWidget = UserWidget;
	Parms.WidgetClass = WidgetClass;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function UnrealExtent.GSE_UMGFuncLib.GetAnalogKey
// (Final, Native, Static, Public, HasOutParams, BlueprintCallable)
// Parameters:
// struct FAnalogInputEvent                AnalogInputEvent                                       (ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
// struct FKey                             ReturnValue                                            (Parm, OutParm, ReturnParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)

struct FKey UGSE_UMGFuncLib::GetAnalogKey(const struct FAnalogInputEvent& AnalogInputEvent)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("GSE_UMGFuncLib", "GetAnalogKey");

	Params::GSE_UMGFuncLib_GetAnalogKey Parms{};

	Parms.AnalogInputEvent = std::move(AnalogInputEvent);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function UnrealExtent.GSE_UMGFuncLib.GetAnalogKeyIsRepeat
// (Final, Native, Static, Public, HasOutParams, BlueprintCallable)
// Parameters:
// struct FAnalogInputEvent                AnalogInputEvent                                       (ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UGSE_UMGFuncLib::GetAnalogKeyIsRepeat(const struct FAnalogInputEvent& AnalogInputEvent)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("GSE_UMGFuncLib", "GetAnalogKeyIsRepeat");

	Params::GSE_UMGFuncLib_GetAnalogKeyIsRepeat Parms{};

	Parms.AnalogInputEvent = std::move(AnalogInputEvent);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function UnrealExtent.GSE_UMGFuncLib.GetAnalogValue
// (Final, Native, Static, Public, HasOutParams, BlueprintCallable)
// Parameters:
// struct FAnalogInputEvent                AnalogInputEvent                                       (ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
// float                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

float UGSE_UMGFuncLib::GetAnalogValue(const struct FAnalogInputEvent& AnalogInputEvent)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("GSE_UMGFuncLib", "GetAnalogValue");

	Params::GSE_UMGFuncLib_GetAnalogValue Parms{};

	Parms.AnalogInputEvent = std::move(AnalogInputEvent);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function UnrealExtent.GSE_UMGFuncLib.GetChildWidgetAt
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// class UPanelWidget*                     ParentWidget                                           (Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32                                   ChildIndex                                             (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class UWidget*                          ReturnValue                                            (ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class UWidget* UGSE_UMGFuncLib::GetChildWidgetAt(class UPanelWidget* ParentWidget, int32 ChildIndex)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("GSE_UMGFuncLib", "GetChildWidgetAt");

	Params::GSE_UMGFuncLib_GetChildWidgetAt Parms{};

	Parms.ParentWidget = ParentWidget;
	Parms.ChildIndex = ChildIndex;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function UnrealExtent.GSE_UMGFuncLib.GetCurrentCulture
// (Final, Native, Static, Public, BlueprintCallable, BlueprintPure)
// Parameters:
// class FString                           ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class FString UGSE_UMGFuncLib::GetCurrentCulture()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("GSE_UMGFuncLib", "GetCurrentCulture");

	Params::GSE_UMGFuncLib_GetCurrentCulture Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function UnrealExtent.GSE_UMGFuncLib.GetFocusEventCause
// (Final, Native, Static, Public, HasOutParams, BlueprintCallable)
// Parameters:
// struct FFocusEvent                      FocusEvent                                             (ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
// EFocusCause                             ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

EFocusCause UGSE_UMGFuncLib::GetFocusEventCause(const struct FFocusEvent& FocusEvent)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("GSE_UMGFuncLib", "GetFocusEventCause");

	Params::GSE_UMGFuncLib_GetFocusEventCause Parms{};

	Parms.FocusEvent = std::move(FocusEvent);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function UnrealExtent.GSE_UMGFuncLib.GetFocusEventUser
// (Final, Native, Static, Public, HasOutParams, BlueprintCallable)
// Parameters:
// struct FFocusEvent                      FocusEvent                                             (ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
// int32                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

int32 UGSE_UMGFuncLib::GetFocusEventUser(const struct FFocusEvent& FocusEvent)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("GSE_UMGFuncLib", "GetFocusEventUser");

	Params::GSE_UMGFuncLib_GetFocusEventUser Parms{};

	Parms.FocusEvent = std::move(FocusEvent);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function UnrealExtent.GSE_UMGFuncLib.GetIsAxis1DKey
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// class FName                             KeyName                                                (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UGSE_UMGFuncLib::GetIsAxis1DKey(class FName KeyName)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("GSE_UMGFuncLib", "GetIsAxis1DKey");

	Params::GSE_UMGFuncLib_GetIsAxis1DKey Parms{};

	Parms.KeyName = KeyName;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function UnrealExtent.GSE_UMGFuncLib.GetIsGamepadKey
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// class FName                             KeyName                                                (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UGSE_UMGFuncLib::GetIsGamepadKey(class FName KeyName)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("GSE_UMGFuncLib", "GetIsGamepadKey");

	Params::GSE_UMGFuncLib_GetIsGamepadKey Parms{};

	Parms.KeyName = KeyName;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function UnrealExtent.GSE_UMGFuncLib.GetKeyWithName
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// class FName                             KeyName                                                (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FKey                             ReturnValue                                            (Parm, OutParm, ReturnParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)

struct FKey UGSE_UMGFuncLib::GetKeyWithName(class FName KeyName)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("GSE_UMGFuncLib", "GetKeyWithName");

	Params::GSE_UMGFuncLib_GetKeyWithName Parms{};

	Parms.KeyName = KeyName;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function UnrealExtent.GSE_UMGFuncLib.GetMediaPlayerTimer
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// class UMediaPlayer*                     MediaPlayer                                            (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// double                                  ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

double UGSE_UMGFuncLib::GetMediaPlayerTimer(class UMediaPlayer* MediaPlayer)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("GSE_UMGFuncLib", "GetMediaPlayerTimer");

	Params::GSE_UMGFuncLib_GetMediaPlayerTimer Parms{};

	Parms.MediaPlayer = MediaPlayer;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function UnrealExtent.GSE_UMGFuncLib.GetMouseKey
// (Final, Native, Static, Public, HasOutParams, BlueprintCallable)
// Parameters:
// struct FPointerEvent                    PointerEvent                                           (ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
// struct FKey                             ReturnValue                                            (Parm, OutParm, ReturnParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)

struct FKey UGSE_UMGFuncLib::GetMouseKey(const struct FPointerEvent& PointerEvent)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("GSE_UMGFuncLib", "GetMouseKey");

	Params::GSE_UMGFuncLib_GetMouseKey Parms{};

	Parms.PointerEvent = std::move(PointerEvent);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function UnrealExtent.GSE_UMGFuncLib.GetMousePositionFromViewport
// (Final, Native, Static, Public, HasOutParams, HasDefaults, BlueprintCallable)
// Parameters:
// struct FVector2D                        OutPosition                                            (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UGSE_UMGFuncLib::GetMousePositionFromViewport(struct FVector2D* OutPosition)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("GSE_UMGFuncLib", "GetMousePositionFromViewport");

	Params::GSE_UMGFuncLib_GetMousePositionFromViewport Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	if (OutPosition != nullptr)
		*OutPosition = std::move(Parms.OutPosition);

	return Parms.ReturnValue;
}


// Function UnrealExtent.GSE_UMGFuncLib.GetMouseWheelDelta
// (Final, Native, Static, Public, HasOutParams, BlueprintCallable)
// Parameters:
// struct FPointerEvent                    PointerEvent                                           (ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
// float                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

float UGSE_UMGFuncLib::GetMouseWheelDelta(const struct FPointerEvent& PointerEvent)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("GSE_UMGFuncLib", "GetMouseWheelDelta");

	Params::GSE_UMGFuncLib_GetMouseWheelDelta Parms{};

	Parms.PointerEvent = std::move(PointerEvent);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function UnrealExtent.GSE_UMGFuncLib.GetRootWidget
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// class UUserWidget*                      Widget                                                 (Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class UWidget*                          ReturnValue                                            (ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class UWidget* UGSE_UMGFuncLib::GetRootWidget(class UUserWidget* Widget)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("GSE_UMGFuncLib", "GetRootWidget");

	Params::GSE_UMGFuncLib_GetRootWidget Parms{};

	Parms.Widget = Widget;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function UnrealExtent.GSE_UMGFuncLib.GetSafeZonePaddingSize
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// class UObject*                          WorldContextObject                                     (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FMargin                          ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)

struct FMargin UGSE_UMGFuncLib::GetSafeZonePaddingSize(class UObject* WorldContextObject)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("GSE_UMGFuncLib", "GetSafeZonePaddingSize");

	Params::GSE_UMGFuncLib_GetSafeZonePaddingSize Parms{};

	Parms.WorldContextObject = WorldContextObject;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function UnrealExtent.GSE_UMGFuncLib.GetTextBlockOutlineDynamicMaterial
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// class UTextBlock*                       TextBlock                                              (Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class UMaterialInstanceDynamic*         ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class UMaterialInstanceDynamic* UGSE_UMGFuncLib::GetTextBlockOutlineDynamicMaterial(class UTextBlock* TextBlock)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("GSE_UMGFuncLib", "GetTextBlockOutlineDynamicMaterial");

	Params::GSE_UMGFuncLib_GetTextBlockOutlineDynamicMaterial Parms{};

	Parms.TextBlock = TextBlock;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function UnrealExtent.GSE_UMGFuncLib.GetViewPortAbsPosition
// (Final, Native, Static, Public, HasDefaults, BlueprintCallable)
// Parameters:
// class UObject*                          WorldContextObject                                     (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FVector2D                        ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

struct FVector2D UGSE_UMGFuncLib::GetViewPortAbsPosition(class UObject* WorldContextObject)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("GSE_UMGFuncLib", "GetViewPortAbsPosition");

	Params::GSE_UMGFuncLib_GetViewPortAbsPosition Parms{};

	Parms.WorldContextObject = WorldContextObject;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function UnrealExtent.GSE_UMGFuncLib.GetViewPortScale
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// class UObject*                          WorldContextObject                                     (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

float UGSE_UMGFuncLib::GetViewPortScale(class UObject* WorldContextObject)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("GSE_UMGFuncLib", "GetViewPortScale");

	Params::GSE_UMGFuncLib_GetViewPortScale Parms{};

	Parms.WorldContextObject = WorldContextObject;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function UnrealExtent.GSE_UMGFuncLib.GetViewportSize
// (Final, Native, Static, Public, HasDefaults, BlueprintCallable)
// Parameters:
// class UObject*                          WorldContextObject                                     (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FVector2D                        ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

struct FVector2D UGSE_UMGFuncLib::GetViewportSize(class UObject* WorldContextObject)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("GSE_UMGFuncLib", "GetViewportSize");

	Params::GSE_UMGFuncLib_GetViewportSize Parms{};

	Parms.WorldContextObject = WorldContextObject;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function UnrealExtent.GSE_UMGFuncLib.GetViewportSizeXY
// (Final, Native, Static, Public, HasDefaults, BlueprintCallable)
// Parameters:
// struct FIntPoint                        ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

struct FIntPoint UGSE_UMGFuncLib::GetViewportSizeXY()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("GSE_UMGFuncLib", "GetViewportSizeXY");

	Params::GSE_UMGFuncLib_GetViewportSizeXY Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function UnrealExtent.GSE_UMGFuncLib.GetWidgetAbsolutePosition
// (Final, Native, Static, Public, HasDefaults, BlueprintCallable)
// Parameters:
// class UWidget*                          Widget                                                 (Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FVector2D                        ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

struct FVector2D UGSE_UMGFuncLib::GetWidgetAbsolutePosition(class UWidget* Widget)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("GSE_UMGFuncLib", "GetWidgetAbsolutePosition");

	Params::GSE_UMGFuncLib_GetWidgetAbsolutePosition Parms{};

	Parms.Widget = Widget;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function UnrealExtent.GSE_UMGFuncLib.GetWidgetAbsolutePositionAtCoordinates
// (Final, Native, Static, Public, HasOutParams, HasDefaults, BlueprintCallable)
// Parameters:
// class UWidget*                          Widget                                                 (Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FVector2D                        NormalCoordinates                                      (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FVector2D                        ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

struct FVector2D UGSE_UMGFuncLib::GetWidgetAbsolutePositionAtCoordinates(class UWidget* Widget, const struct FVector2D& NormalCoordinates)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("GSE_UMGFuncLib", "GetWidgetAbsolutePositionAtCoordinates");

	Params::GSE_UMGFuncLib_GetWidgetAbsolutePositionAtCoordinates Parms{};

	Parms.Widget = Widget;
	Parms.NormalCoordinates = std::move(NormalCoordinates);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function UnrealExtent.GSE_UMGFuncLib.GetWidgetAbsolutePositionAtCoordinatesWithPaintSpace
// (Final, Native, Static, Public, HasOutParams, HasDefaults, BlueprintCallable)
// Parameters:
// class UWidget*                          Widget                                                 (Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FVector2D                        NormalCoordinates                                      (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FVector2D                        ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

struct FVector2D UGSE_UMGFuncLib::GetWidgetAbsolutePositionAtCoordinatesWithPaintSpace(class UWidget* Widget, const struct FVector2D& NormalCoordinates)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("GSE_UMGFuncLib", "GetWidgetAbsolutePositionAtCoordinatesWithPaintSpace");

	Params::GSE_UMGFuncLib_GetWidgetAbsolutePositionAtCoordinatesWithPaintSpace Parms{};

	Parms.Widget = Widget;
	Parms.NormalCoordinates = std::move(NormalCoordinates);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function UnrealExtent.GSE_UMGFuncLib.GetWidgetAbsoluteSize
// (Final, Native, Static, Public, HasDefaults, BlueprintCallable)
// Parameters:
// class UWidget*                          Widget                                                 (Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FVector2D                        ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

struct FVector2D UGSE_UMGFuncLib::GetWidgetAbsoluteSize(class UWidget* Widget)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("GSE_UMGFuncLib", "GetWidgetAbsoluteSize");

	Params::GSE_UMGFuncLib_GetWidgetAbsoluteSize Parms{};

	Parms.Widget = Widget;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function UnrealExtent.GSE_UMGFuncLib.GetWidgetAbsScale
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// class UWidget*                          Widget                                                 (Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

float UGSE_UMGFuncLib::GetWidgetAbsScale(class UWidget* Widget)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("GSE_UMGFuncLib", "GetWidgetAbsScale");

	Params::GSE_UMGFuncLib_GetWidgetAbsScale Parms{};

	Parms.Widget = Widget;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function UnrealExtent.GSE_UMGFuncLib.GetWidgetAnimationByName
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// class UUserWidget*                      Widget                                                 (Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class FString                           Name_0                                                 (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class UWidgetAnimation*                 ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class UWidgetAnimation* UGSE_UMGFuncLib::GetWidgetAnimationByName(class UUserWidget* Widget, const class FString& Name_0)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("GSE_UMGFuncLib", "GetWidgetAnimationByName");

	Params::GSE_UMGFuncLib_GetWidgetAnimationByName Parms{};

	Parms.Widget = Widget;
	Parms.Name_0 = std::move(Name_0);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function UnrealExtent.GSE_UMGFuncLib.GetWidgetAnimationName
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// class UWidgetAnimation*                 Animation                                              (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class FString                           ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class FString UGSE_UMGFuncLib::GetWidgetAnimationName(class UWidgetAnimation* Animation)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("GSE_UMGFuncLib", "GetWidgetAnimationName");

	Params::GSE_UMGFuncLib_GetWidgetAnimationName Parms{};

	Parms.Animation = Animation;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function UnrealExtent.GSE_UMGFuncLib.GetWidgetFromName
// (Final, Native, Static, Public, HasOutParams, BlueprintCallable)
// Parameters:
// class UUserWidget*                      Widget                                                 (Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class FName                             Name_0                                                 (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class UWidget*                          ReturnValue                                            (ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class UWidget* UGSE_UMGFuncLib::GetWidgetFromName(class UUserWidget* Widget, const class FName& Name_0)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("GSE_UMGFuncLib", "GetWidgetFromName");

	Params::GSE_UMGFuncLib_GetWidgetFromName Parms{};

	Parms.Widget = Widget;
	Parms.Name_0 = Name_0;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function UnrealExtent.GSE_UMGFuncLib.GetWidgetIsVariable
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// class UWidget*                          Widget                                                 (ConstParm, Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UGSE_UMGFuncLib::GetWidgetIsVariable(const class UWidget* Widget)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("GSE_UMGFuncLib", "GetWidgetIsVariable");

	Params::GSE_UMGFuncLib_GetWidgetIsVariable Parms{};

	Parms.Widget = Widget;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function UnrealExtent.GSE_UMGFuncLib.GetWidgetLocalPositionAtCoordinates
// (Final, Native, Static, Public, HasOutParams, HasDefaults, BlueprintCallable)
// Parameters:
// class UWidget*                          Widget                                                 (Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FVector2D                        NormalCoordinates                                      (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FVector2D                        ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

struct FVector2D UGSE_UMGFuncLib::GetWidgetLocalPositionAtCoordinates(class UWidget* Widget, const struct FVector2D& NormalCoordinates)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("GSE_UMGFuncLib", "GetWidgetLocalPositionAtCoordinates");

	Params::GSE_UMGFuncLib_GetWidgetLocalPositionAtCoordinates Parms{};

	Parms.Widget = Widget;
	Parms.NormalCoordinates = std::move(NormalCoordinates);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function UnrealExtent.GSE_UMGFuncLib.GetWidgetLocalPositionAtCoordinatesWithPaintSpace
// (Final, Native, Static, Public, HasOutParams, HasDefaults, BlueprintCallable)
// Parameters:
// class UWidget*                          Widget                                                 (Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FVector2D                        NormalCoordinates                                      (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FVector2D                        ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

struct FVector2D UGSE_UMGFuncLib::GetWidgetLocalPositionAtCoordinatesWithPaintSpace(class UWidget* Widget, const struct FVector2D& NormalCoordinates)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("GSE_UMGFuncLib", "GetWidgetLocalPositionAtCoordinatesWithPaintSpace");

	Params::GSE_UMGFuncLib_GetWidgetLocalPositionAtCoordinatesWithPaintSpace Parms{};

	Parms.Widget = Widget;
	Parms.NormalCoordinates = std::move(NormalCoordinates);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function UnrealExtent.GSE_UMGFuncLib.GetWidgetLocalSize
// (Final, Native, Static, Public, HasDefaults, BlueprintCallable)
// Parameters:
// class UWidget*                          Widget                                                 (Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FVector2D                        ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

struct FVector2D UGSE_UMGFuncLib::GetWidgetLocalSize(class UWidget* Widget)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("GSE_UMGFuncLib", "GetWidgetLocalSize");

	Params::GSE_UMGFuncLib_GetWidgetLocalSize Parms{};

	Parms.Widget = Widget;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function UnrealExtent.GSE_UMGFuncLib.GetWidgetPositionSizeRefViewPort
// (Final, Native, Static, Public, HasOutParams, HasDefaults, BlueprintCallable)
// Parameters:
// class UWidget*                          Widget                                                 (Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FVector2D                        Position                                               (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FVector2D                        WidgetSize                                             (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UGSE_UMGFuncLib::GetWidgetPositionSizeRefViewPort(class UWidget* Widget, struct FVector2D* Position, struct FVector2D* WidgetSize)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("GSE_UMGFuncLib", "GetWidgetPositionSizeRefViewPort");

	Params::GSE_UMGFuncLib_GetWidgetPositionSizeRefViewPort Parms{};

	Parms.Widget = Widget;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	if (Position != nullptr)
		*Position = std::move(Parms.Position);

	if (WidgetSize != nullptr)
		*WidgetSize = std::move(Parms.WidgetSize);
}


// Function UnrealExtent.GSE_UMGFuncLib.GSProjectWidgetList
// (Final, Native, Static, Public, HasOutParams, BlueprintCallable)
// Parameters:
// class APlayerController*                PlayerController                                       (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class UWidget*                          Canvas                                                 (Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// TArray<struct FProjWidgetInfo>          ProjWidgetInfos                                        (Parm, ZeroConstructor, ContainsInstancedReference, NativeAccessSpecifierPublic)
// TArray<struct FProjResult>              Results                                                (Parm, OutParm, ZeroConstructor, NativeAccessSpecifierPublic)

void UGSE_UMGFuncLib::GSProjectWidgetList(class APlayerController* PlayerController, class UWidget* Canvas, const TArray<struct FProjWidgetInfo>& ProjWidgetInfos, TArray<struct FProjResult>* Results)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("GSE_UMGFuncLib", "GSProjectWidgetList");

	Params::GSE_UMGFuncLib_GSProjectWidgetList Parms{};

	Parms.PlayerController = PlayerController;
	Parms.Canvas = Canvas;
	Parms.ProjWidgetInfos = std::move(ProjWidgetInfos);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	if (Results != nullptr)
		*Results = std::move(Parms.Results);
}


// Function UnrealExtent.GSE_UMGFuncLib.GSProjectWorldLocationToWidgetPosition
// (Final, Native, Static, Public, HasOutParams, HasDefaults, BlueprintCallable)
// Parameters:
// class APlayerController*                PlayerController                                       (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FVector                          WorldLocation                                          (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FVector2D                        ViewportPosition                                       (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    bIsInFront                                             (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UGSE_UMGFuncLib::GSProjectWorldLocationToWidgetPosition(class APlayerController* PlayerController, const struct FVector& WorldLocation, struct FVector2D* ViewportPosition, bool* bIsInFront)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("GSE_UMGFuncLib", "GSProjectWorldLocationToWidgetPosition");

	Params::GSE_UMGFuncLib_GSProjectWorldLocationToWidgetPosition Parms{};

	Parms.PlayerController = PlayerController;
	Parms.WorldLocation = std::move(WorldLocation);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	if (ViewportPosition != nullptr)
		*ViewportPosition = std::move(Parms.ViewportPosition);

	if (bIsInFront != nullptr)
		*bIsInFront = Parms.bIsInFront;

	return Parms.ReturnValue;
}


// Function UnrealExtent.GSE_UMGFuncLib.InvokeWidgetInputEvent
// (Final, Native, Static, Public, HasOutParams, BlueprintCallable)
// Parameters:
// class UWidget*                          UWidget                                                (Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32                                   InputType                                              (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FGeometry                        MyGeometry                                             (ConstParm, Parm, OutParm, ReferenceParm, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
// struct FPointerEvent                    MouseEvent                                             (ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)

void UGSE_UMGFuncLib::InvokeWidgetInputEvent(class UWidget* UWidget, int32 InputType, const struct FGeometry& MyGeometry, const struct FPointerEvent& MouseEvent)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("GSE_UMGFuncLib", "InvokeWidgetInputEvent");

	Params::GSE_UMGFuncLib_InvokeWidgetInputEvent Parms{};

	Parms.UWidget = UWidget;
	Parms.InputType = InputType;
	Parms.MyGeometry = std::move(MyGeometry);
	Parms.MouseEvent = std::move(MouseEvent);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function UnrealExtent.GSE_UMGFuncLib.IsBinkMediaBeginPlay
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// class UBinkMediaPlayer*                 BinkMediaPlayer                                        (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UGSE_UMGFuncLib::IsBinkMediaBeginPlay(const class UBinkMediaPlayer* BinkMediaPlayer)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("GSE_UMGFuncLib", "IsBinkMediaBeginPlay");

	Params::GSE_UMGFuncLib_IsBinkMediaBeginPlay Parms{};

	Parms.BinkMediaPlayer = BinkMediaPlayer;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function UnrealExtent.GSE_UMGFuncLib.IsMediaBeginPlay
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// class UMediaPlayer*                     MediaPlayer                                            (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UGSE_UMGFuncLib::IsMediaBeginPlay(const class UMediaPlayer* MediaPlayer)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("GSE_UMGFuncLib", "IsMediaBeginPlay");

	Params::GSE_UMGFuncLib_IsMediaBeginPlay Parms{};

	Parms.MediaPlayer = MediaPlayer;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function UnrealExtent.GSE_UMGFuncLib.IsWidgetVisiableWithParent
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// class UWidget*                          TargetWidget                                           (Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UGSE_UMGFuncLib::IsWidgetVisiableWithParent(class UWidget* TargetWidget)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("GSE_UMGFuncLib", "IsWidgetVisiableWithParent");

	Params::GSE_UMGFuncLib_IsWidgetVisiableWithParent Parms{};

	Parms.TargetWidget = TargetWidget;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function UnrealExtent.GSE_UMGFuncLib.IsWidgetVisiableWithParentInList
// (Final, Native, Static, Public, HasOutParams, BlueprintCallable)
// Parameters:
// TArray<class UUserWidget*>              InWidgetList                                           (Parm, ZeroConstructor, ContainsInstancedReference, NativeAccessSpecifierPublic)
// TArray<class UUserWidget*>              OutWidgetList                                          (Parm, OutParm, ZeroConstructor, ContainsInstancedReference, NativeAccessSpecifierPublic)

void UGSE_UMGFuncLib::IsWidgetVisiableWithParentInList(const TArray<class UUserWidget*>& InWidgetList, TArray<class UUserWidget*>* OutWidgetList)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("GSE_UMGFuncLib", "IsWidgetVisiableWithParentInList");

	Params::GSE_UMGFuncLib_IsWidgetVisiableWithParentInList Parms{};

	Parms.InWidgetList = std::move(InWidgetList);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	if (OutWidgetList != nullptr)
		*OutWidgetList = std::move(Parms.OutWidgetList);
}


// Function UnrealExtent.GSE_UMGFuncLib.LoadTexture2DToAreaIDArray
// (Final, Native, Static, Public, HasOutParams, HasDefaults, BlueprintCallable)
// Parameters:
// class UTexture2D*                       TargetTexture                                          (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// TMap<struct FColor, int32>              AreaColorIDMap                                         (ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
// TMap<int32, uint8>                      AreaData                                               (Parm, OutParm, NativeAccessSpecifierPublic)
// struct FVector2D                        OutOriginPos                                           (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FVector2D                        OutMapSize                                             (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class FString                           ErrMsg                                                 (Parm, OutParm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

int32 UGSE_UMGFuncLib::LoadTexture2DToAreaIDArray(class UTexture2D* TargetTexture, const TMap<struct FColor, int32>& AreaColorIDMap, TMap<int32, uint8>* AreaData, struct FVector2D* OutOriginPos, struct FVector2D* OutMapSize, class FString* ErrMsg)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("GSE_UMGFuncLib", "LoadTexture2DToAreaIDArray");

	Params::GSE_UMGFuncLib_LoadTexture2DToAreaIDArray Parms{};

	Parms.TargetTexture = TargetTexture;
	Parms.AreaColorIDMap = std::move(AreaColorIDMap);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	if (AreaData != nullptr)
		*AreaData = std::move(Parms.AreaData);

	if (OutOriginPos != nullptr)
		*OutOriginPos = std::move(Parms.OutOriginPos);

	if (OutMapSize != nullptr)
		*OutMapSize = std::move(Parms.OutMapSize);

	if (ErrMsg != nullptr)
		*ErrMsg = std::move(Parms.ErrMsg);

	return Parms.ReturnValue;
}


// Function UnrealExtent.GSE_UMGFuncLib.LocalToViewPortPixelPos
// (Final, Native, Static, Public, HasOutParams, HasDefaults, BlueprintCallable)
// Parameters:
// class UObject*                          WorldContextObject                                     (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FGeometry                        Geometry                                               (ConstParm, Parm, OutParm, ReferenceParm, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
// struct FVector2D                        ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

struct FVector2D UGSE_UMGFuncLib::LocalToViewPortPixelPos(class UObject* WorldContextObject, const struct FGeometry& Geometry)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("GSE_UMGFuncLib", "LocalToViewPortPixelPos");

	Params::GSE_UMGFuncLib_LocalToViewPortPixelPos Parms{};

	Parms.WorldContextObject = WorldContextObject;
	Parms.Geometry = std::move(Geometry);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function UnrealExtent.GSE_UMGFuncLib.LocalToViewPortPos
// (Final, Native, Static, Public, HasOutParams, HasDefaults, BlueprintCallable)
// Parameters:
// class UObject*                          WorldContextObject                                     (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FGeometry                        Geometry                                               (ConstParm, Parm, OutParm, ReferenceParm, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
// struct FVector2D                        ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

struct FVector2D UGSE_UMGFuncLib::LocalToViewPortPos(class UObject* WorldContextObject, const struct FGeometry& Geometry)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("GSE_UMGFuncLib", "LocalToViewPortPos");

	Params::GSE_UMGFuncLib_LocalToViewPortPos Parms{};

	Parms.WorldContextObject = WorldContextObject;
	Parms.Geometry = std::move(Geometry);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function UnrealExtent.GSE_UMGFuncLib.LogHittestGrid
// (Final, Native, Static, Public, BlueprintCallable)

void UGSE_UMGFuncLib::LogHittestGrid()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("GSE_UMGFuncLib", "LogHittestGrid");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function UnrealExtent.GSE_UMGFuncLib.MakeEventReply
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// bool                                    IsHandled                                              (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FEventReply                      ReturnValue                                            (Parm, OutParm, ReturnParm, NativeAccessSpecifierPublic)

struct FEventReply UGSE_UMGFuncLib::MakeEventReply(bool IsHandled)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("GSE_UMGFuncLib", "MakeEventReply");

	Params::GSE_UMGFuncLib_MakeEventReply Parms{};

	Parms.IsHandled = IsHandled;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function UnrealExtent.GSE_UMGFuncLib.NeedExecuteAction
// (Final, Native, Static, Public, HasOutParams, BlueprintCallable)
// Parameters:
// struct FGeometry                        MyGeometry                                             (ConstParm, Parm, OutParm, ReferenceParm, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
// struct FPointerEvent                    MouseEvent                                             (ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
// class UTexture2D*                       AdvancedHitTexture                                     (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   AdvancedHitAlpha                                       (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UGSE_UMGFuncLib::NeedExecuteAction(const struct FGeometry& MyGeometry, const struct FPointerEvent& MouseEvent, class UTexture2D* AdvancedHitTexture, float AdvancedHitAlpha)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("GSE_UMGFuncLib", "NeedExecuteAction");

	Params::GSE_UMGFuncLib_NeedExecuteAction Parms{};

	Parms.MyGeometry = std::move(MyGeometry);
	Parms.MouseEvent = std::move(MouseEvent);
	Parms.AdvancedHitTexture = AdvancedHitTexture;
	Parms.AdvancedHitAlpha = AdvancedHitAlpha;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function UnrealExtent.GSE_UMGFuncLib.NeedExecuteActionWithDA
// (Final, Native, Static, Public, HasOutParams, BlueprintCallable)
// Parameters:
// struct FGeometry                        MyGeometry                                             (ConstParm, Parm, OutParm, ReferenceParm, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
// struct FPointerEvent                    MouseEvent                                             (ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
// class UDataAsset*                       HitAreaDA                                              (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   AdvancedHitAlpha                                       (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UGSE_UMGFuncLib::NeedExecuteActionWithDA(const struct FGeometry& MyGeometry, const struct FPointerEvent& MouseEvent, class UDataAsset* HitAreaDA, float AdvancedHitAlpha)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("GSE_UMGFuncLib", "NeedExecuteActionWithDA");

	Params::GSE_UMGFuncLib_NeedExecuteActionWithDA Parms{};

	Parms.MyGeometry = std::move(MyGeometry);
	Parms.MouseEvent = std::move(MouseEvent);
	Parms.HitAreaDA = HitAreaDA;
	Parms.AdvancedHitAlpha = AdvancedHitAlpha;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function UnrealExtent.GSE_UMGFuncLib.NewLocalStringTable
// (Final, Native, Static, Public, HasOutParams, BlueprintCallable, BlueprintPure)
// Parameters:
// class FName                             ID                                                     (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class FString                           Namespace                                              (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UGSE_UMGFuncLib::NewLocalStringTable(const class FName& ID, const class FString& Namespace)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("GSE_UMGFuncLib", "NewLocalStringTable");

	Params::GSE_UMGFuncLib_NewLocalStringTable Parms{};

	Parms.ID = ID;
	Parms.Namespace = std::move(Namespace);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function UnrealExtent.GSE_UMGFuncLib.PointerEvent_GetPointerIndex
// (Final, Native, Static, Public, HasOutParams, BlueprintCallable)
// Parameters:
// struct FPointerEvent                    PointerEvent                                           (ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
// int32                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

int32 UGSE_UMGFuncLib::PointerEvent_GetPointerIndex(const struct FPointerEvent& PointerEvent)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("GSE_UMGFuncLib", "PointerEvent_GetPointerIndex");

	Params::GSE_UMGFuncLib_PointerEvent_GetPointerIndex Parms{};

	Parms.PointerEvent = std::move(PointerEvent);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function UnrealExtent.GSE_UMGFuncLib.PointerEvent_GetPositionInGeometry
// (Final, Native, Static, Public, HasOutParams, HasDefaults, BlueprintCallable)
// Parameters:
// struct FGeometry                        Geometry                                               (ConstParm, Parm, OutParm, ReferenceParm, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
// struct FPointerEvent                    PointerEvent                                           (ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
// struct FVector2D                        ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

struct FVector2D UGSE_UMGFuncLib::PointerEvent_GetPositionInGeometry(const struct FGeometry& Geometry, const struct FPointerEvent& PointerEvent)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("GSE_UMGFuncLib", "PointerEvent_GetPositionInGeometry");

	Params::GSE_UMGFuncLib_PointerEvent_GetPositionInGeometry Parms{};

	Parms.Geometry = std::move(Geometry);
	Parms.PointerEvent = std::move(PointerEvent);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function UnrealExtent.GSE_UMGFuncLib.PointerEvent_GetScreenSpacePosition
// (Final, Native, Static, Public, HasOutParams, HasDefaults, BlueprintCallable)
// Parameters:
// struct FPointerEvent                    PointerEvent                                           (ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
// struct FVector2D                        ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

struct FVector2D UGSE_UMGFuncLib::PointerEvent_GetScreenSpacePosition(const struct FPointerEvent& PointerEvent)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("GSE_UMGFuncLib", "PointerEvent_GetScreenSpacePosition");

	Params::GSE_UMGFuncLib_PointerEvent_GetScreenSpacePosition Parms{};

	Parms.PointerEvent = std::move(PointerEvent);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function UnrealExtent.GSE_UMGFuncLib.PointerEvent_IsMouseButtonDown
// (Final, Native, Static, Public, HasOutParams, BlueprintCallable, BlueprintPure)
// Parameters:
// struct FPointerEvent                    PointerEvent                                           (ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
// class FName                             MouseButtonName                                        (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UGSE_UMGFuncLib::PointerEvent_IsMouseButtonDown(const struct FPointerEvent& PointerEvent, const class FName& MouseButtonName)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("GSE_UMGFuncLib", "PointerEvent_IsMouseButtonDown");

	Params::GSE_UMGFuncLib_PointerEvent_IsMouseButtonDown Parms{};

	Parms.PointerEvent = std::move(PointerEvent);
	Parms.MouseButtonName = MouseButtonName;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function UnrealExtent.GSE_UMGFuncLib.PointerEvent_IsMouseTouchEvent
// (Final, Native, Static, Public, HasOutParams, BlueprintCallable, BlueprintPure)
// Parameters:
// struct FPointerEvent                    PointerEvent                                           (ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UGSE_UMGFuncLib::PointerEvent_IsMouseTouchEvent(const struct FPointerEvent& PointerEvent)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("GSE_UMGFuncLib", "PointerEvent_IsMouseTouchEvent");

	Params::GSE_UMGFuncLib_PointerEvent_IsMouseTouchEvent Parms{};

	Parms.PointerEvent = std::move(PointerEvent);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function UnrealExtent.GSE_UMGFuncLib.PointerEvent_IsTouchFirstMove
// (Final, Native, Static, Public, HasOutParams, BlueprintCallable)
// Parameters:
// struct FPointerEvent                    PointerEvent                                           (ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UGSE_UMGFuncLib::PointerEvent_IsTouchFirstMove(const struct FPointerEvent& PointerEvent)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("GSE_UMGFuncLib", "PointerEvent_IsTouchFirstMove");

	Params::GSE_UMGFuncLib_PointerEvent_IsTouchFirstMove Parms{};

	Parms.PointerEvent = std::move(PointerEvent);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function UnrealExtent.GSE_UMGFuncLib.QAGetAllWidgetsOfClass
// (Final, Native, Static, Public, HasOutParams, BlueprintCallable)
// Parameters:
// class UObject*                          WorldContextObject                                     (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// TArray<class UWidget*>                  FoundWidgets                                           (Parm, OutParm, ZeroConstructor, ContainsInstancedReference, NativeAccessSpecifierPublic)
// TSubclassOf<class UWidget>              WidgetClass                                            (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UGSE_UMGFuncLib::QAGetAllWidgetsOfClass(class UObject* WorldContextObject, TArray<class UWidget*>* FoundWidgets, TSubclassOf<class UWidget> WidgetClass)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("GSE_UMGFuncLib", "QAGetAllWidgetsOfClass");

	Params::GSE_UMGFuncLib_QAGetAllWidgetsOfClass Parms{};

	Parms.WorldContextObject = WorldContextObject;
	Parms.WidgetClass = WidgetClass;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	if (FoundWidgets != nullptr)
		*FoundWidgets = std::move(Parms.FoundWidgets);
}


// Function UnrealExtent.GSE_UMGFuncLib.QAGetWidgetCenterPosition
// (Final, Native, Static, Public, HasOutParams, HasDefaults, BlueprintCallable)
// Parameters:
// class UWidget*                          Widget                                                 (Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FVector2D                        WidgetPosition                                         (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FVector2D                        CenterPosition                                         (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FVector2D                        WidgetSize                                             (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UGSE_UMGFuncLib::QAGetWidgetCenterPosition(class UWidget* Widget, struct FVector2D* WidgetPosition, struct FVector2D* CenterPosition, struct FVector2D* WidgetSize)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("GSE_UMGFuncLib", "QAGetWidgetCenterPosition");

	Params::GSE_UMGFuncLib_QAGetWidgetCenterPosition Parms{};

	Parms.Widget = Widget;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	if (WidgetPosition != nullptr)
		*WidgetPosition = std::move(Parms.WidgetPosition);

	if (CenterPosition != nullptr)
		*CenterPosition = std::move(Parms.CenterPosition);

	if (WidgetSize != nullptr)
		*WidgetSize = std::move(Parms.WidgetSize);
}


// Function UnrealExtent.GSE_UMGFuncLib.QAGetWidgetWithText
// (Final, Native, Static, Public, HasOutParams, BlueprintCallable)
// Parameters:
// class UObject*                          WorldContextObject                                     (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// TArray<class UWidget*>                  FoundWidgets                                           (Parm, OutParm, ZeroConstructor, ContainsInstancedReference, NativeAccessSpecifierPublic)
// class FString                           Text                                                   (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UGSE_UMGFuncLib::QAGetWidgetWithText(class UObject* WorldContextObject, TArray<class UWidget*>* FoundWidgets, const class FString& Text)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("GSE_UMGFuncLib", "QAGetWidgetWithText");

	Params::GSE_UMGFuncLib_QAGetWidgetWithText Parms{};

	Parms.WorldContextObject = WorldContextObject;
	Parms.Text = std::move(Text);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	if (FoundWidgets != nullptr)
		*FoundWidgets = std::move(Parms.FoundWidgets);
}


// Function UnrealExtent.GSE_UMGFuncLib.RefreshDPIScale
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// class UObject*                          WorldContext                                           (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UGSE_UMGFuncLib::RefreshDPIScale(class UObject* WorldContext)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("GSE_UMGFuncLib", "RefreshDPIScale");

	Params::GSE_UMGFuncLib_RefreshDPIScale Parms{};

	Parms.WorldContext = WorldContext;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function UnrealExtent.GSE_UMGFuncLib.RefreshRichTextDefaultStyle
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// class URichTextBlock*                   RichTextBlock                                          (Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UGSE_UMGFuncLib::RefreshRichTextDefaultStyle(class URichTextBlock* RichTextBlock)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("GSE_UMGFuncLib", "RefreshRichTextDefaultStyle");

	Params::GSE_UMGFuncLib_RefreshRichTextDefaultStyle Parms{};

	Parms.RichTextBlock = RichTextBlock;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function UnrealExtent.GSE_UMGFuncLib.RemoveUserWidgetAsSlateFromViewport
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// class UUserWidget*                      Widget                                                 (Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UGSE_UMGFuncLib::RemoveUserWidgetAsSlateFromViewport(class UUserWidget* Widget)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("GSE_UMGFuncLib", "RemoveUserWidgetAsSlateFromViewport");

	Params::GSE_UMGFuncLib_RemoveUserWidgetAsSlateFromViewport Parms{};

	Parms.Widget = Widget;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function UnrealExtent.GSE_UMGFuncLib.SetColorVisionDeficiencyType
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// EColorVisionDeficiency                  Type                                                   (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   Severity                                               (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    CorrectDeficiency                                      (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    ShowCorrectionWithDeficiency                           (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UGSE_UMGFuncLib::SetColorVisionDeficiencyType(EColorVisionDeficiency Type, float Severity, bool CorrectDeficiency, bool ShowCorrectionWithDeficiency)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("GSE_UMGFuncLib", "SetColorVisionDeficiencyType");

	Params::GSE_UMGFuncLib_SetColorVisionDeficiencyType Parms{};

	Parms.Type = Type;
	Parms.Severity = Severity;
	Parms.CorrectDeficiency = CorrectDeficiency;
	Parms.ShowCorrectionWithDeficiency = ShowCorrectionWithDeficiency;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function UnrealExtent.GSE_UMGFuncLib.SetCurrentCulture
// (Final, Native, Static, Public, BlueprintCallable, BlueprintPure)
// Parameters:
// class FString                           CultureName                                            (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UGSE_UMGFuncLib::SetCurrentCulture(const class FString& CultureName)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("GSE_UMGFuncLib", "SetCurrentCulture");

	Params::GSE_UMGFuncLib_SetCurrentCulture Parms{};

	Parms.CultureName = std::move(CultureName);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function UnrealExtent.GSE_UMGFuncLib.SetHardwareCursor
// (Final, Native, Static, Public, HasDefaults, BlueprintCallable)
// Parameters:
// class UObject*                          WorldContextObject                                     (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// EMouseCursor                            CursorShape                                            (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class FName                             CursorName                                             (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FVector2D                        HotSpot                                                (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UGSE_UMGFuncLib::SetHardwareCursor(class UObject* WorldContextObject, EMouseCursor CursorShape, class FName CursorName, const struct FVector2D& HotSpot)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("GSE_UMGFuncLib", "SetHardwareCursor");

	Params::GSE_UMGFuncLib_SetHardwareCursor Parms{};

	Parms.WorldContextObject = WorldContextObject;
	Parms.CursorShape = CursorShape;
	Parms.CursorName = CursorName;
	Parms.HotSpot = std::move(HotSpot);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function UnrealExtent.GSE_UMGFuncLib.SetLocalStringTableEntry
// (Final, Native, Static, Public, HasOutParams, BlueprintCallable, BlueprintPure)
// Parameters:
// class FName                             ID                                                     (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class FString                           Key                                                    (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class FString                           Src                                                    (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UGSE_UMGFuncLib::SetLocalStringTableEntry(const class FName& ID, const class FString& Key, const class FString& Src)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("GSE_UMGFuncLib", "SetLocalStringTableEntry");

	Params::GSE_UMGFuncLib_SetLocalStringTableEntry Parms{};

	Parms.ID = ID;
	Parms.Key = std::move(Key);
	Parms.Src = std::move(Src);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function UnrealExtent.GSE_UMGFuncLib.SetTextToBitmapFontBox
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// class UWidget*                          Widget                                                 (Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class FText                             Text                                                   (Parm, NativeAccessSpecifierPublic)

void UGSE_UMGFuncLib::SetTextToBitmapFontBox(class UWidget* Widget, const class FText& Text)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("GSE_UMGFuncLib", "SetTextToBitmapFontBox");

	Params::GSE_UMGFuncLib_SetTextToBitmapFontBox Parms{};

	Parms.Widget = Widget;
	Parms.Text = std::move(Text);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function UnrealExtent.GSE_UMGFuncLib.SetUserFocusWithCause
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// class APlayerController*                PlayerController                                       (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class UWidget*                          Widget                                                 (Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// EFocusCause                             Cause                                                  (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UGSE_UMGFuncLib::SetUserFocusWithCause(class APlayerController* PlayerController, class UWidget* Widget, EFocusCause Cause)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("GSE_UMGFuncLib", "SetUserFocusWithCause");

	Params::GSE_UMGFuncLib_SetUserFocusWithCause Parms{};

	Parms.PlayerController = PlayerController;
	Parms.Widget = Widget;
	Parms.Cause = Cause;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function UnrealExtent.GSE_UMGFuncLib.SetWidgetEnable
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// class UWidget*                          Widget                                                 (Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    Enable                                                 (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UGSE_UMGFuncLib::SetWidgetEnable(class UWidget* Widget, bool Enable)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("GSE_UMGFuncLib", "SetWidgetEnable");

	Params::GSE_UMGFuncLib_SetWidgetEnable Parms{};

	Parms.Widget = Widget;
	Parms.Enable = Enable;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function UnrealExtent.GSE_UMGFuncLib.SlateAbsoluteToLocal
// (Final, Native, Static, Public, HasDefaults, BlueprintCallable)
// Parameters:
// struct FGeometry                        Geometry                                               (Parm, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
// struct FVector2D                        AbsolutePos                                            (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FVector2D                        ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

struct FVector2D UGSE_UMGFuncLib::SlateAbsoluteToLocal(const struct FGeometry& Geometry, const struct FVector2D& AbsolutePos)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("GSE_UMGFuncLib", "SlateAbsoluteToLocal");

	Params::GSE_UMGFuncLib_SlateAbsoluteToLocal Parms{};

	Parms.Geometry = std::move(Geometry);
	Parms.AbsolutePos = std::move(AbsolutePos);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function UnrealExtent.GSE_UMGFuncLib.SlateLocalToAbsolute
// (Final, Native, Static, Public, HasDefaults, BlueprintCallable)
// Parameters:
// struct FGeometry                        Geometry                                               (Parm, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
// struct FVector2D                        LocalPos                                               (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FVector2D                        ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

struct FVector2D UGSE_UMGFuncLib::SlateLocalToAbsolute(const struct FGeometry& Geometry, const struct FVector2D& LocalPos)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("GSE_UMGFuncLib", "SlateLocalToAbsolute");

	Params::GSE_UMGFuncLib_SlateLocalToAbsolute Parms{};

	Parms.Geometry = std::move(Geometry);
	Parms.LocalPos = std::move(LocalPos);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function UnrealExtent.GSE_UMGFuncLib.WidgetAbsoluteToLocal
// (Final, Native, Static, Public, HasOutParams, HasDefaults, BlueprintCallable)
// Parameters:
// class UWidget*                          Widget                                                 (Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FVector2D                        AbsoluteCoordinates                                    (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FVector2D                        ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

struct FVector2D UGSE_UMGFuncLib::WidgetAbsoluteToLocal(class UWidget* Widget, const struct FVector2D& AbsoluteCoordinates)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("GSE_UMGFuncLib", "WidgetAbsoluteToLocal");

	Params::GSE_UMGFuncLib_WidgetAbsoluteToLocal Parms{};

	Parms.Widget = Widget;
	Parms.AbsoluteCoordinates = std::move(AbsoluteCoordinates);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function UnrealExtent.GSE_UMGFuncLib.WidgetLocalToAbsolute
// (Final, Native, Static, Public, HasOutParams, HasDefaults, BlueprintCallable)
// Parameters:
// class UWidget*                          Widget                                                 (Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FVector2D                        LocalCoordinates                                       (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FVector2D                        ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

struct FVector2D UGSE_UMGFuncLib::WidgetLocalToAbsolute(class UWidget* Widget, const struct FVector2D& LocalCoordinates)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("GSE_UMGFuncLib", "WidgetLocalToAbsolute");

	Params::GSE_UMGFuncLib_WidgetLocalToAbsolute Parms{};

	Parms.Widget = Widget;
	Parms.LocalCoordinates = std::move(LocalCoordinates);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function UnrealExtent.GSE_UMGFuncLib.WidgetLocalToRoundedLocal
// (Final, Native, Static, Public, HasOutParams, HasDefaults, BlueprintCallable)
// Parameters:
// class UWidget*                          Widget                                                 (Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FVector2D                        LocalCoordinates                                       (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FVector2D                        ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

struct FVector2D UGSE_UMGFuncLib::WidgetLocalToRoundedLocal(class UWidget* Widget, const struct FVector2D& LocalCoordinates)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("GSE_UMGFuncLib", "WidgetLocalToRoundedLocal");

	Params::GSE_UMGFuncLib_WidgetLocalToRoundedLocal Parms{};

	Parms.Widget = Widget;
	Parms.LocalCoordinates = std::move(LocalCoordinates);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function UnrealExtent.GSE_WidgetCompFuncLib.DestoryWidgetComponent
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// class UWidgetComponent*                 Comp                                                   (Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UGSE_WidgetCompFuncLib::DestoryWidgetComponent(class UWidgetComponent* Comp)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("GSE_WidgetCompFuncLib", "DestoryWidgetComponent");

	Params::GSE_WidgetCompFuncLib_DestoryWidgetComponent Parms{};

	Parms.Comp = Comp;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function UnrealExtent.GSE_WidgetCompFuncLib.RegisterWidgetComponent
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// class UWidgetComponent*                 Comp                                                   (Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UGSE_WidgetCompFuncLib::RegisterWidgetComponent(class UWidgetComponent* Comp)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("GSE_WidgetCompFuncLib", "RegisterWidgetComponent");

	Params::GSE_WidgetCompFuncLib_RegisterWidgetComponent Parms{};

	Parms.Comp = Comp;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function UnrealExtent.GSE_WidgetCompFuncLib.UnregisterWidgetComponent
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// class UWidgetComponent*                 Comp                                                   (Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UGSE_WidgetCompFuncLib::UnregisterWidgetComponent(class UWidgetComponent* Comp)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("GSE_WidgetCompFuncLib", "UnregisterWidgetComponent");

	Params::GSE_WidgetCompFuncLib_UnregisterWidgetComponent Parms{};

	Parms.Comp = Comp;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function UnrealExtent.GSRetainerBox.OnViewWidgetSizeChangedEvent
// (Event, Public, HasDefaults, BlueprintEvent)
// Parameters:
// struct FVector2D                        Size                                                   (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UnrealExtent::UGSRetainerBox::OnViewWidgetSizeChangedEvent(const struct FVector2D& Size)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GSRetainerBox", "OnViewWidgetSizeChangedEvent");

	Params::GSRetainerBox_OnViewWidgetSizeChangedEvent Parms{};

	Parms.Size = std::move(Size);

	UObject::ProcessEvent(Func, &Parms);
}


// Function UnrealExtent.GSRetainerBox.RequestRender
// (Final, Native, Public, BlueprintCallable)

void UnrealExtent::UGSRetainerBox::RequestRender()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GSRetainerBox", "RequestRender");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function UnrealExtent.GSRetainerBox.SetEffectMaterial
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// class UMaterialInterface*               EffectMaterial_0                                       (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UnrealExtent::UGSRetainerBox::SetEffectMaterial(class UMaterialInterface* EffectMaterial_0)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GSRetainerBox", "SetEffectMaterial");

	Params::GSRetainerBox_SetEffectMaterial Parms{};

	Parms.EffectMaterial_0 = EffectMaterial_0;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function UnrealExtent.GSRetainerBox.SetRenderingPhase
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// int32                                   RenderPhase                                            (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32                                   TotalPhases                                            (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UnrealExtent::UGSRetainerBox::SetRenderingPhase(int32 RenderPhase, int32 TotalPhases)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GSRetainerBox", "SetRenderingPhase");

	Params::GSRetainerBox_SetRenderingPhase Parms{};

	Parms.RenderPhase = RenderPhase;
	Parms.TotalPhases = TotalPhases;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function UnrealExtent.GSRetainerBox.SetRetainRendering
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// bool                                    bInRetainRendering                                     (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UnrealExtent::UGSRetainerBox::SetRetainRendering(bool bInRetainRendering)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GSRetainerBox", "SetRetainRendering");

	Params::GSRetainerBox_SetRetainRendering Parms{};

	Parms.bInRetainRendering = bInRetainRendering;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function UnrealExtent.GSRetainerBox.SetTextureParameter
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// class FName                             TextureParameter_0                                     (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UnrealExtent::UGSRetainerBox::SetTextureParameter(class FName TextureParameter_0)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GSRetainerBox", "SetTextureParameter");

	Params::GSRetainerBox_SetTextureParameter Parms{};

	Parms.TextureParameter_0 = TextureParameter_0;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function UnrealExtent.GSRetainerBox.GetEffectMaterial
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// class UMaterialInstanceDynamic*         ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class UMaterialInstanceDynamic* UnrealExtent::UGSRetainerBox::GetEffectMaterial() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GSRetainerBox", "GetEffectMaterial");

	Params::GSRetainerBox_GetEffectMaterial Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function UnrealExtent.GSRichTextBlock.ApplyText
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// class FText                             InText                                                 (Parm, NativeAccessSpecifierPublic)

void UGSRichTextBlock::ApplyText(const class FText& InText)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GSRichTextBlock", "ApplyText");

	Params::GSRichTextBlock_ApplyText Parms{};

	Parms.InText = std::move(InText);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function UnrealExtent.GSRichTextBlock.MakeContentDirty
// (Native, Public, BlueprintCallable)

void UGSRichTextBlock::MakeContentDirty()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GSRichTextBlock", "MakeContentDirty");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function UnrealExtent.GSRichTextBlock.NativeCheckText
// (Final, Native, Public, BlueprintCallable)

void UGSRichTextBlock::NativeCheckText()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GSRichTextBlock", "NativeCheckText");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function UnrealExtent.GSRichTextBlock.OnTextPrePaint
// (BlueprintCosmetic, Native, Event, Public, BlueprintEvent)

void UGSRichTextBlock::OnTextPrePaint()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GSRichTextBlock", "OnTextPrePaint");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function UnrealExtent.GSRichTextBlock.SetDefaultIndentSize
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// float                                   InDefaultIndentSize                                    (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UGSRichTextBlock::SetDefaultIndentSize(float InDefaultIndentSize)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GSRichTextBlock", "SetDefaultIndentSize");

	Params::GSRichTextBlock_SetDefaultIndentSize Parms{};

	Parms.InDefaultIndentSize = InDefaultIndentSize;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function UnrealExtent.GSRichTextBlock.SetUseIndent
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// bool                                    InUseIndent                                            (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UGSRichTextBlock::SetUseIndent(bool InUseIndent)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GSRichTextBlock", "SetUseIndent");

	Params::GSRichTextBlock_SetUseIndent Parms{};

	Parms.InUseIndent = InUseIndent;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function UnrealExtent.GSRichTextBlock.GetContent
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// class FString                           ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class FString UGSRichTextBlock::GetContent() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GSRichTextBlock", "GetContent");

	Params::GSRichTextBlock_GetContent Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function UnrealExtent.GSRichTextBlock.GetDefaultIndentSize
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// float                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

float UGSRichTextBlock::GetDefaultIndentSize() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GSRichTextBlock", "GetDefaultIndentSize");

	Params::GSRichTextBlock_GetDefaultIndentSize Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function UnrealExtent.GSRichTextBlock.GetUseIndent
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UGSRichTextBlock::GetUseIndent() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GSRichTextBlock", "GetUseIndent");

	Params::GSRichTextBlock_GetUseIndent Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function UnrealExtent.GSRichScaleText.ClearGSHeightOverride
// (Final, Native, Public, BlueprintCallable)

void UGSRichScaleText::ClearGSHeightOverride()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GSRichScaleText", "ClearGSHeightOverride");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function UnrealExtent.GSRichScaleText.ClearGSMaxAspectRatio
// (Final, Native, Public, BlueprintCallable)

void UGSRichScaleText::ClearGSMaxAspectRatio()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GSRichScaleText", "ClearGSMaxAspectRatio");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function UnrealExtent.GSRichScaleText.ClearGSMaxDesiredHeight
// (Final, Native, Public, BlueprintCallable)

void UGSRichScaleText::ClearGSMaxDesiredHeight()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GSRichScaleText", "ClearGSMaxDesiredHeight");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function UnrealExtent.GSRichScaleText.ClearGSMaxDesiredWidth
// (Final, Native, Public, BlueprintCallable)

void UGSRichScaleText::ClearGSMaxDesiredWidth()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GSRichScaleText", "ClearGSMaxDesiredWidth");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function UnrealExtent.GSRichScaleText.ClearGSMinAspectRatio
// (Final, Native, Public, BlueprintCallable)

void UGSRichScaleText::ClearGSMinAspectRatio()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GSRichScaleText", "ClearGSMinAspectRatio");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function UnrealExtent.GSRichScaleText.ClearGSMinDesiredHeight
// (Final, Native, Public, BlueprintCallable)

void UGSRichScaleText::ClearGSMinDesiredHeight()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GSRichScaleText", "ClearGSMinDesiredHeight");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function UnrealExtent.GSRichScaleText.ClearGSMinDesiredWidth
// (Final, Native, Public, BlueprintCallable)

void UGSRichScaleText::ClearGSMinDesiredWidth()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GSRichScaleText", "ClearGSMinDesiredWidth");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function UnrealExtent.GSRichScaleText.ClearGSWidthOverride
// (Final, Native, Public, BlueprintCallable)

void UGSRichScaleText::ClearGSWidthOverride()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GSRichScaleText", "ClearGSWidthOverride");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function UnrealExtent.GSRichScaleText.SetGSHeightOverride
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// float                                   InGSHeightOverride                                     (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UGSRichScaleText::SetGSHeightOverride(float InGSHeightOverride)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GSRichScaleText", "SetGSHeightOverride");

	Params::GSRichScaleText_SetGSHeightOverride Parms{};

	Parms.InGSHeightOverride = InGSHeightOverride;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function UnrealExtent.GSRichScaleText.SetGSMaxAspectRatio
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// float                                   InGSMaxAspectRatio                                     (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UGSRichScaleText::SetGSMaxAspectRatio(float InGSMaxAspectRatio)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GSRichScaleText", "SetGSMaxAspectRatio");

	Params::GSRichScaleText_SetGSMaxAspectRatio Parms{};

	Parms.InGSMaxAspectRatio = InGSMaxAspectRatio;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function UnrealExtent.GSRichScaleText.SetGSMaxDesiredHeight
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// float                                   InGSMaxDesiredHeight                                   (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UGSRichScaleText::SetGSMaxDesiredHeight(float InGSMaxDesiredHeight)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GSRichScaleText", "SetGSMaxDesiredHeight");

	Params::GSRichScaleText_SetGSMaxDesiredHeight Parms{};

	Parms.InGSMaxDesiredHeight = InGSMaxDesiredHeight;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function UnrealExtent.GSRichScaleText.SetGSMaxDesiredWidth
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// float                                   InGSMaxDesiredWidth                                    (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UGSRichScaleText::SetGSMaxDesiredWidth(float InGSMaxDesiredWidth)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GSRichScaleText", "SetGSMaxDesiredWidth");

	Params::GSRichScaleText_SetGSMaxDesiredWidth Parms{};

	Parms.InGSMaxDesiredWidth = InGSMaxDesiredWidth;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function UnrealExtent.GSRichScaleText.SetGSMinAspectRatio
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// float                                   InGSMinAspectRatio                                     (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UGSRichScaleText::SetGSMinAspectRatio(float InGSMinAspectRatio)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GSRichScaleText", "SetGSMinAspectRatio");

	Params::GSRichScaleText_SetGSMinAspectRatio Parms{};

	Parms.InGSMinAspectRatio = InGSMinAspectRatio;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function UnrealExtent.GSRichScaleText.SetGSMinDesiredHeight
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// float                                   InGSMinDesiredHeight                                   (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UGSRichScaleText::SetGSMinDesiredHeight(float InGSMinDesiredHeight)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GSRichScaleText", "SetGSMinDesiredHeight");

	Params::GSRichScaleText_SetGSMinDesiredHeight Parms{};

	Parms.InGSMinDesiredHeight = InGSMinDesiredHeight;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function UnrealExtent.GSRichScaleText.SetGSMinDesiredWidth
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// float                                   InGSMinDesiredWidth                                    (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UGSRichScaleText::SetGSMinDesiredWidth(float InGSMinDesiredWidth)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GSRichScaleText", "SetGSMinDesiredWidth");

	Params::GSRichScaleText_SetGSMinDesiredWidth Parms{};

	Parms.InGSMinDesiredWidth = InGSMinDesiredWidth;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function UnrealExtent.GSRichScaleText.SetGSWidthOverride
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// float                                   InGSWidthOverride                                      (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UGSRichScaleText::SetGSWidthOverride(float InGSWidthOverride)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GSRichScaleText", "SetGSWidthOverride");

	Params::GSRichScaleText_SetGSWidthOverride Parms{};

	Parms.InGSWidthOverride = InGSWidthOverride;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function UnrealExtent.GSRichScaleText.SetHorizontalAlignment
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// EHorizontalAlignment                    InHorizontalAlignment                                  (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UGSRichScaleText::SetHorizontalAlignment(EHorizontalAlignment InHorizontalAlignment)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GSRichScaleText", "SetHorizontalAlignment");

	Params::GSRichScaleText_SetHorizontalAlignment Parms{};

	Parms.InHorizontalAlignment = InHorizontalAlignment;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function UnrealExtent.GSRichScaleText.SetIgnoreInheritedScale
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// bool                                    bInIgnoreInheritedScale                                (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UGSRichScaleText::SetIgnoreInheritedScale(bool bInIgnoreInheritedScale)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GSRichScaleText", "SetIgnoreInheritedScale");

	Params::GSRichScaleText_SetIgnoreInheritedScale Parms{};

	Parms.bInIgnoreInheritedScale = bInIgnoreInheritedScale;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function UnrealExtent.GSRichScaleText.SetStretch
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// EStretch                                InStretch                                              (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UGSRichScaleText::SetStretch(EStretch InStretch)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GSRichScaleText", "SetStretch");

	Params::GSRichScaleText_SetStretch Parms{};

	Parms.InStretch = InStretch;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function UnrealExtent.GSRichScaleText.SetStretchDirection
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// EStretchDirection                       InStretchDirection                                     (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UGSRichScaleText::SetStretchDirection(EStretchDirection InStretchDirection)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GSRichScaleText", "SetStretchDirection");

	Params::GSRichScaleText_SetStretchDirection Parms{};

	Parms.InStretchDirection = InStretchDirection;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function UnrealExtent.GSRichScaleText.SetUserSpecifiedScale
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// float                                   InUserSpecifiedScale                                   (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UGSRichScaleText::SetUserSpecifiedScale(float InUserSpecifiedScale)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GSRichScaleText", "SetUserSpecifiedScale");

	Params::GSRichScaleText_SetUserSpecifiedScale Parms{};

	Parms.InUserSpecifiedScale = InUserSpecifiedScale;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function UnrealExtent.GSRichScaleText.SetVerticalAlignment
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// EVerticalAlignment                      InVerticalAlignment                                    (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UGSRichScaleText::SetVerticalAlignment(EVerticalAlignment InVerticalAlignment)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GSRichScaleText", "SetVerticalAlignment");

	Params::GSRichScaleText_SetVerticalAlignment Parms{};

	Parms.InVerticalAlignment = InVerticalAlignment;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function UnrealExtent.GSRoundRect.CalcMappingRoundRectPoint
// (Event, Public, HasOutParams, HasDefaults, BlueprintEvent)
// Parameters:
// struct FVector2D                        PosInViewPort                                          (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    IsInFront                                              (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FVector2D                        InnerContentRectSize                                   (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FVector2D                        InnerContentRectAlign                                  (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    IsOuter                                                (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FVector2D                        BorderPosRefRoundRect                                  (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   RectAngle                                              (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32                                   OutIndicatorType                                       (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UGSRoundRect::CalcMappingRoundRectPoint(const struct FVector2D& PosInViewPort, bool IsInFront, const struct FVector2D& InnerContentRectSize, const struct FVector2D& InnerContentRectAlign, bool IsOuter, struct FVector2D* BorderPosRefRoundRect, float* RectAngle, int32* OutIndicatorType)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GSRoundRect", "CalcMappingRoundRectPoint");

	Params::GSRoundRect_CalcMappingRoundRectPoint Parms{};

	Parms.PosInViewPort = std::move(PosInViewPort);
	Parms.IsInFront = IsInFront;
	Parms.InnerContentRectSize = std::move(InnerContentRectSize);
	Parms.InnerContentRectAlign = std::move(InnerContentRectAlign);
	Parms.IsOuter = IsOuter;

	UObject::ProcessEvent(Func, &Parms);

	if (BorderPosRefRoundRect != nullptr)
		*BorderPosRefRoundRect = std::move(Parms.BorderPosRefRoundRect);

	if (RectAngle != nullptr)
		*RectAngle = Parms.RectAngle;

	if (OutIndicatorType != nullptr)
		*OutIndicatorType = Parms.OutIndicatorType;

	return Parms.ReturnValue;
}


// Function UnrealExtent.GSTextBlock.ApplyText
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// class FText                             InText                                                 (Parm, NativeAccessSpecifierPublic)

void UGSTextBlock::ApplyText(const class FText& InText)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GSTextBlock", "ApplyText");

	Params::GSTextBlock_ApplyText Parms{};

	Parms.InText = std::move(InText);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function UnrealExtent.GSTextBlock.MakeContentDirty
// (Native, Public, BlueprintCallable)

void UGSTextBlock::MakeContentDirty()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GSTextBlock", "MakeContentDirty");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function UnrealExtent.GSTextBlock.NativeCheckText
// (Final, Native, Public, BlueprintCallable)

void UGSTextBlock::NativeCheckText()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GSTextBlock", "NativeCheckText");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function UnrealExtent.GSTextBlock.OnTextPrePaint
// (BlueprintCosmetic, Native, Event, Public, BlueprintEvent)

void UGSTextBlock::OnTextPrePaint()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GSTextBlock", "OnTextPrePaint");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function UnrealExtent.GSTextBlock.SetDefaultIndentSize
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// float                                   InDefaultIndentSize                                    (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UGSTextBlock::SetDefaultIndentSize(float InDefaultIndentSize)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GSTextBlock", "SetDefaultIndentSize");

	Params::GSTextBlock_SetDefaultIndentSize Parms{};

	Parms.InDefaultIndentSize = InDefaultIndentSize;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function UnrealExtent.GSTextBlock.SetUseIndent
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// bool                                    InUseIndent                                            (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UGSTextBlock::SetUseIndent(bool InUseIndent)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GSTextBlock", "SetUseIndent");

	Params::GSTextBlock_SetUseIndent Parms{};

	Parms.InUseIndent = InUseIndent;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function UnrealExtent.GSTextBlock.GetContent
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// class FString                           ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class FString UGSTextBlock::GetContent() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GSTextBlock", "GetContent");

	Params::GSTextBlock_GetContent Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function UnrealExtent.GSTextBlock.GetDefaultIndentSize
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// float                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

float UGSTextBlock::GetDefaultIndentSize() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GSTextBlock", "GetDefaultIndentSize");

	Params::GSTextBlock_GetDefaultIndentSize Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function UnrealExtent.GSTextBlock.GetUseIndent
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UGSTextBlock::GetUseIndent() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GSTextBlock", "GetUseIndent");

	Params::GSTextBlock_GetUseIndent Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function UnrealExtent.GSScaleText.ClearGSHeightOverride
// (Final, Native, Public, BlueprintCallable)

void UGSScaleText::ClearGSHeightOverride()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GSScaleText", "ClearGSHeightOverride");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function UnrealExtent.GSScaleText.ClearGSMaxAspectRatio
// (Final, Native, Public, BlueprintCallable)

void UGSScaleText::ClearGSMaxAspectRatio()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GSScaleText", "ClearGSMaxAspectRatio");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function UnrealExtent.GSScaleText.ClearGSMaxDesiredHeight
// (Final, Native, Public, BlueprintCallable)

void UGSScaleText::ClearGSMaxDesiredHeight()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GSScaleText", "ClearGSMaxDesiredHeight");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function UnrealExtent.GSScaleText.ClearGSMaxDesiredWidth
// (Final, Native, Public, BlueprintCallable)

void UGSScaleText::ClearGSMaxDesiredWidth()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GSScaleText", "ClearGSMaxDesiredWidth");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function UnrealExtent.GSScaleText.ClearGSMinAspectRatio
// (Final, Native, Public, BlueprintCallable)

void UGSScaleText::ClearGSMinAspectRatio()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GSScaleText", "ClearGSMinAspectRatio");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function UnrealExtent.GSScaleText.ClearGSMinDesiredHeight
// (Final, Native, Public, BlueprintCallable)

void UGSScaleText::ClearGSMinDesiredHeight()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GSScaleText", "ClearGSMinDesiredHeight");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function UnrealExtent.GSScaleText.ClearGSMinDesiredWidth
// (Final, Native, Public, BlueprintCallable)

void UGSScaleText::ClearGSMinDesiredWidth()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GSScaleText", "ClearGSMinDesiredWidth");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function UnrealExtent.GSScaleText.ClearGSWidthOverride
// (Final, Native, Public, BlueprintCallable)

void UGSScaleText::ClearGSWidthOverride()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GSScaleText", "ClearGSWidthOverride");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function UnrealExtent.GSScaleText.SetGSHeightOverride
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// float                                   InGSHeightOverride                                     (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UGSScaleText::SetGSHeightOverride(float InGSHeightOverride)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GSScaleText", "SetGSHeightOverride");

	Params::GSScaleText_SetGSHeightOverride Parms{};

	Parms.InGSHeightOverride = InGSHeightOverride;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function UnrealExtent.GSScaleText.SetGSMaxAspectRatio
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// float                                   InGSMaxAspectRatio                                     (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UGSScaleText::SetGSMaxAspectRatio(float InGSMaxAspectRatio)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GSScaleText", "SetGSMaxAspectRatio");

	Params::GSScaleText_SetGSMaxAspectRatio Parms{};

	Parms.InGSMaxAspectRatio = InGSMaxAspectRatio;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function UnrealExtent.GSScaleText.SetGSMaxDesiredHeight
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// float                                   InGSMaxDesiredHeight                                   (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UGSScaleText::SetGSMaxDesiredHeight(float InGSMaxDesiredHeight)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GSScaleText", "SetGSMaxDesiredHeight");

	Params::GSScaleText_SetGSMaxDesiredHeight Parms{};

	Parms.InGSMaxDesiredHeight = InGSMaxDesiredHeight;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function UnrealExtent.GSScaleText.SetGSMaxDesiredWidth
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// float                                   InGSMaxDesiredWidth                                    (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UGSScaleText::SetGSMaxDesiredWidth(float InGSMaxDesiredWidth)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GSScaleText", "SetGSMaxDesiredWidth");

	Params::GSScaleText_SetGSMaxDesiredWidth Parms{};

	Parms.InGSMaxDesiredWidth = InGSMaxDesiredWidth;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function UnrealExtent.GSScaleText.SetGSMinAspectRatio
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// float                                   InGSMinAspectRatio                                     (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UGSScaleText::SetGSMinAspectRatio(float InGSMinAspectRatio)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GSScaleText", "SetGSMinAspectRatio");

	Params::GSScaleText_SetGSMinAspectRatio Parms{};

	Parms.InGSMinAspectRatio = InGSMinAspectRatio;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function UnrealExtent.GSScaleText.SetGSMinDesiredHeight
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// float                                   InGSMinDesiredHeight                                   (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UGSScaleText::SetGSMinDesiredHeight(float InGSMinDesiredHeight)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GSScaleText", "SetGSMinDesiredHeight");

	Params::GSScaleText_SetGSMinDesiredHeight Parms{};

	Parms.InGSMinDesiredHeight = InGSMinDesiredHeight;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function UnrealExtent.GSScaleText.SetGSMinDesiredWidth
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// float                                   InGSMinDesiredWidth                                    (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UGSScaleText::SetGSMinDesiredWidth(float InGSMinDesiredWidth)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GSScaleText", "SetGSMinDesiredWidth");

	Params::GSScaleText_SetGSMinDesiredWidth Parms{};

	Parms.InGSMinDesiredWidth = InGSMinDesiredWidth;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function UnrealExtent.GSScaleText.SetGSWidthOverride
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// float                                   InGSWidthOverride                                      (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UGSScaleText::SetGSWidthOverride(float InGSWidthOverride)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GSScaleText", "SetGSWidthOverride");

	Params::GSScaleText_SetGSWidthOverride Parms{};

	Parms.InGSWidthOverride = InGSWidthOverride;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function UnrealExtent.GSScaleText.SetHorizontalAlignment
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// EHorizontalAlignment                    InHorizontalAlignment                                  (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UGSScaleText::SetHorizontalAlignment(EHorizontalAlignment InHorizontalAlignment)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GSScaleText", "SetHorizontalAlignment");

	Params::GSScaleText_SetHorizontalAlignment Parms{};

	Parms.InHorizontalAlignment = InHorizontalAlignment;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function UnrealExtent.GSScaleText.SetIgnoreInheritedScale
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// bool                                    bInIgnoreInheritedScale                                (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UGSScaleText::SetIgnoreInheritedScale(bool bInIgnoreInheritedScale)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GSScaleText", "SetIgnoreInheritedScale");

	Params::GSScaleText_SetIgnoreInheritedScale Parms{};

	Parms.bInIgnoreInheritedScale = bInIgnoreInheritedScale;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function UnrealExtent.GSScaleText.SetStretch
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// EStretch                                InStretch                                              (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UGSScaleText::SetStretch(EStretch InStretch)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GSScaleText", "SetStretch");

	Params::GSScaleText_SetStretch Parms{};

	Parms.InStretch = InStretch;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function UnrealExtent.GSScaleText.SetStretchDirection
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// EStretchDirection                       InStretchDirection                                     (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UGSScaleText::SetStretchDirection(EStretchDirection InStretchDirection)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GSScaleText", "SetStretchDirection");

	Params::GSScaleText_SetStretchDirection Parms{};

	Parms.InStretchDirection = InStretchDirection;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function UnrealExtent.GSScaleText.SetUserSpecifiedScale
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// float                                   InUserSpecifiedScale                                   (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UGSScaleText::SetUserSpecifiedScale(float InUserSpecifiedScale)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GSScaleText", "SetUserSpecifiedScale");

	Params::GSScaleText_SetUserSpecifiedScale Parms{};

	Parms.InUserSpecifiedScale = InUserSpecifiedScale;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function UnrealExtent.GSScaleText.SetVerticalAlignment
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// EVerticalAlignment                      InVerticalAlignment                                    (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UGSScaleText::SetVerticalAlignment(EVerticalAlignment InVerticalAlignment)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GSScaleText", "SetVerticalAlignment");

	Params::GSScaleText_SetVerticalAlignment Parms{};

	Parms.InVerticalAlignment = InVerticalAlignment;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function UnrealExtent.GSScrollBox.GetBottomSpacer
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// float                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

float UnrealExtent::UGSScrollBox::GetBottomSpacer()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GSScrollBox", "GetBottomSpacer");

	Params::GSScrollBox_GetBottomSpacer Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function UnrealExtent.GSScrollBox.GetTopSpacer
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// float                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

float UnrealExtent::UGSScrollBox::GetTopSpacer()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GSScrollBox", "GetTopSpacer");

	Params::GSScrollBox_GetTopSpacer Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function UnrealExtent.GSScrollBox.ScrollWidgetIntoView
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// class UWidget*                          WidgetToFind                                           (Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    AnimateScroll                                          (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// EDescendantScrollDestination            ScrollDestination                                      (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   Padding                                                (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UnrealExtent::UGSScrollBox::ScrollWidgetIntoView(class UWidget* WidgetToFind, bool AnimateScroll, EDescendantScrollDestination ScrollDestination, float Padding)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GSScrollBox", "ScrollWidgetIntoView");

	Params::GSScrollBox_ScrollWidgetIntoView Parms{};

	Parms.WidgetToFind = WidgetToFind;
	Parms.AnimateScroll = AnimateScroll;
	Parms.ScrollDestination = ScrollDestination;
	Parms.Padding = Padding;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function UnrealExtent.GSScrollBox.SetAlwaysShowScrollbar
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// bool                                    NewAlwaysShowScrollbar                                 (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UnrealExtent::UGSScrollBox::SetAlwaysShowScrollbar(bool NewAlwaysShowScrollbar)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GSScrollBox", "SetAlwaysShowScrollbar");

	Params::GSScrollBox_SetAlwaysShowScrollbar Parms{};

	Parms.NewAlwaysShowScrollbar = NewAlwaysShowScrollbar;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function UnrealExtent.GSScrollBox.SetBottomSpacer
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// float                                   InBottomSpacer                                         (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UnrealExtent::UGSScrollBox::SetBottomSpacer(float InBottomSpacer)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GSScrollBox", "SetBottomSpacer");

	Params::GSScrollBox_SetBottomSpacer Parms{};

	Parms.InBottomSpacer = InBottomSpacer;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function UnrealExtent.GSScrollBox.SetNavCanLoop
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// bool                                    InNavCanLoop                                           (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UnrealExtent::UGSScrollBox::SetNavCanLoop(bool InNavCanLoop)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GSScrollBox", "SetNavCanLoop");

	Params::GSScrollBox_SetNavCanLoop Parms{};

	Parms.InNavCanLoop = InNavCanLoop;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function UnrealExtent.GSScrollBox.SetNavigationDestination
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// EDescendantScrollDestination            NewNavigationDestination                               (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UnrealExtent::UGSScrollBox::SetNavigationDestination(const EDescendantScrollDestination NewNavigationDestination)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GSScrollBox", "SetNavigationDestination");

	Params::GSScrollBox_SetNavigationDestination Parms{};

	Parms.NewNavigationDestination = NewNavigationDestination;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function UnrealExtent.GSScrollBox.SetNavigationScrollPadding
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// float                                   NewNavigationScrollPadding                             (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UnrealExtent::UGSScrollBox::SetNavigationScrollPadding(const float NewNavigationScrollPadding)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GSScrollBox", "SetNavigationScrollPadding");

	Params::GSScrollBox_SetNavigationScrollPadding Parms{};

	Parms.NewNavigationScrollPadding = NewNavigationScrollPadding;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function UnrealExtent.GSScrollBox.SetOrientation
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// EOrientation                            NewOrientation                                         (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UnrealExtent::UGSScrollBox::SetOrientation(EOrientation NewOrientation)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GSScrollBox", "SetOrientation");

	Params::GSScrollBox_SetOrientation Parms{};

	Parms.NewOrientation = NewOrientation;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function UnrealExtent.GSScrollBox.SetScrollbarPadding
// (Final, Native, Public, HasOutParams, BlueprintCallable)
// Parameters:
// struct FMargin                          NewScrollbarPadding                                    (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)

void UnrealExtent::UGSScrollBox::SetScrollbarPadding(const struct FMargin& NewScrollbarPadding)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GSScrollBox", "SetScrollbarPadding");

	Params::GSScrollBox_SetScrollbarPadding Parms{};

	Parms.NewScrollbarPadding = std::move(NewScrollbarPadding);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function UnrealExtent.GSScrollBox.SetScrollbarThickness
// (Final, Native, Public, HasOutParams, HasDefaults, BlueprintCallable)
// Parameters:
// struct FVector2D                        NewScrollbarThickness                                  (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UnrealExtent::UGSScrollBox::SetScrollbarThickness(const struct FVector2D& NewScrollbarThickness)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GSScrollBox", "SetScrollbarThickness");

	Params::GSScrollBox_SetScrollbarThickness Parms{};

	Parms.NewScrollbarThickness = std::move(NewScrollbarThickness);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function UnrealExtent.GSScrollBox.SetScrollbarVisibility
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// ESlateVisibility                        NewScrollBarVisibility                                 (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UnrealExtent::UGSScrollBox::SetScrollbarVisibility(ESlateVisibility NewScrollBarVisibility)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GSScrollBox", "SetScrollbarVisibility");

	Params::GSScrollBox_SetScrollbarVisibility Parms{};

	Parms.NewScrollBarVisibility = NewScrollBarVisibility;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function UnrealExtent.GSScrollBox.SetScrollOffset
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// float                                   InScrollOffset                                         (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UnrealExtent::UGSScrollBox::SetScrollOffset(float InScrollOffset)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GSScrollBox", "SetScrollOffset");

	Params::GSScrollBox_SetScrollOffset Parms{};

	Parms.InScrollOffset = InScrollOffset;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function UnrealExtent.GSScrollBox.SetScrollWhenFocusChanges
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// EScrollWhenFocusChanges                 NewScrollWhenFocusChanges                              (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UnrealExtent::UGSScrollBox::SetScrollWhenFocusChanges(EScrollWhenFocusChanges NewScrollWhenFocusChanges)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GSScrollBox", "SetScrollWhenFocusChanges");

	Params::GSScrollBox_SetScrollWhenFocusChanges Parms{};

	Parms.NewScrollWhenFocusChanges = NewScrollWhenFocusChanges;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function UnrealExtent.GSScrollBox.SetTargetScrollOffset
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// float                                   InTargetScrollOffset                                   (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UnrealExtent::UGSScrollBox::SetTargetScrollOffset(float InTargetScrollOffset)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GSScrollBox", "SetTargetScrollOffset");

	Params::GSScrollBox_SetTargetScrollOffset Parms{};

	Parms.InTargetScrollOffset = InTargetScrollOffset;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function UnrealExtent.GSScrollBox.SetTopSpacer
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// float                                   InTopSpacer                                            (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UnrealExtent::UGSScrollBox::SetTopSpacer(float InTopSpacer)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GSScrollBox", "SetTopSpacer");

	Params::GSScrollBox_SetTopSpacer Parms{};

	Parms.InTopSpacer = InTopSpacer;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function UnrealExtent.GSScrollBox.GetScrollContent
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// float                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

float UnrealExtent::UGSScrollBox::GetScrollContent() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GSScrollBox", "GetScrollContent");

	Params::GSScrollBox_GetScrollContent Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function UnrealExtent.GSScrollBox.GetScrollContentWithOutSpacer
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// float                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

float UnrealExtent::UGSScrollBox::GetScrollContentWithOutSpacer() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GSScrollBox", "GetScrollContentWithOutSpacer");

	Params::GSScrollBox_GetScrollContentWithOutSpacer Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function UnrealExtent.GSScrollBox.GetScrollOffset
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// float                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

float UnrealExtent::UGSScrollBox::GetScrollOffset() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GSScrollBox", "GetScrollOffset");

	Params::GSScrollBox_GetScrollOffset Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function UnrealExtent.GSScrollBox.GetScrollOffsetOfEnd
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// float                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

float UnrealExtent::UGSScrollBox::GetScrollOffsetOfEnd() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GSScrollBox", "GetScrollOffsetOfEnd");

	Params::GSScrollBox_GetScrollOffsetOfEnd Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function UnrealExtent.GSScrollBox.GetViewOffsetFraction
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// float                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

float UnrealExtent::UGSScrollBox::GetViewOffsetFraction() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GSScrollBox", "GetViewOffsetFraction");

	Params::GSScrollBox_GetViewOffsetFraction Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function UnrealExtent.GSScrollBoxSlot.SetHorizontalAlignment
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// EHorizontalAlignment                    InHorizontalAlignment                                  (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UGSScrollBoxSlot::SetHorizontalAlignment(EHorizontalAlignment InHorizontalAlignment)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GSScrollBoxSlot", "SetHorizontalAlignment");

	Params::GSScrollBoxSlot_SetHorizontalAlignment Parms{};

	Parms.InHorizontalAlignment = InHorizontalAlignment;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function UnrealExtent.GSScrollBoxSlot.SetPadding
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// struct FMargin                          InPadding                                              (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)

void UGSScrollBoxSlot::SetPadding(const struct FMargin& InPadding)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GSScrollBoxSlot", "SetPadding");

	Params::GSScrollBoxSlot_SetPadding Parms{};

	Parms.InPadding = std::move(InPadding);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function UnrealExtent.GSScrollBoxSlot.SetVerticalAlignment
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// EVerticalAlignment                      InVerticalAlignment                                    (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UGSScrollBoxSlot::SetVerticalAlignment(EVerticalAlignment InVerticalAlignment)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GSScrollBoxSlot", "SetVerticalAlignment");

	Params::GSScrollBoxSlot_SetVerticalAlignment Parms{};

	Parms.InVerticalAlignment = InVerticalAlignment;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function UnrealExtent.GSTileView.AddBottomScrollWidget
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// class UUserWidget*                      WidgetToAppend                                         (Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UnrealExtent::UGSTileView::AddBottomScrollWidget(class UUserWidget* WidgetToAppend)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GSTileView", "AddBottomScrollWidget");

	Params::GSTileView_AddBottomScrollWidget Parms{};

	Parms.WidgetToAppend = WidgetToAppend;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function UnrealExtent.GSTileView.AddTopScrollWidget
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// class UUserWidget*                      WidgetToAppend                                         (Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UnrealExtent::UGSTileView::AddTopScrollWidget(class UUserWidget* WidgetToAppend)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GSTileView", "AddTopScrollWidget");

	Params::GSTileView_AddTopScrollWidget Parms{};

	Parms.WidgetToAppend = WidgetToAppend;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function UnrealExtent.GSTileView.ClearAllWidget
// (Final, Native, Public, BlueprintCallable)

void UnrealExtent::UGSTileView::ClearAllWidget()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GSTileView", "ClearAllWidget");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function UnrealExtent.GSTileView.ClearBottomScrollWidgets
// (Final, Native, Public, BlueprintCallable)

void UnrealExtent::UGSTileView::ClearBottomScrollWidgets()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GSTileView", "ClearBottomScrollWidgets");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function UnrealExtent.GSTileView.ClearTopScrollWidgets
// (Final, Native, Public, BlueprintCallable)

void UnrealExtent::UGSTileView::ClearTopScrollWidgets()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GSTileView", "ClearTopScrollWidgets");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function UnrealExtent.GSTileView.GetFirstLine
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// float                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

float UnrealExtent::UGSTileView::GetFirstLine()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GSTileView", "GetFirstLine");

	Params::GSTileView_GetFirstLine Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function UnrealExtent.GSTileView.InsertBottomScrollWidget
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// class UUserWidget*                      WidgetToInset                                          (Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UnrealExtent::UGSTileView::InsertBottomScrollWidget(class UUserWidget* WidgetToInset)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GSTileView", "InsertBottomScrollWidget");

	Params::GSTileView_InsertBottomScrollWidget Parms{};

	Parms.WidgetToInset = WidgetToInset;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function UnrealExtent.GSTileView.InsertTopScrollWidget
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// class UUserWidget*                      WidgetToInset                                          (Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UnrealExtent::UGSTileView::InsertTopScrollWidget(class UUserWidget* WidgetToInset)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GSTileView", "InsertTopScrollWidget");

	Params::GSTileView_InsertTopScrollWidget Parms{};

	Parms.WidgetToInset = WidgetToInset;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function UnrealExtent.GSTileView.ItemScrolledIntoViewEvent
// (Event, Public, BlueprintEvent)
// Parameters:
// class UObject*                          Item                                                   (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class UUserWidget*                      Widget                                                 (Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UnrealExtent::UGSTileView::ItemScrolledIntoViewEvent(class UObject* Item, class UUserWidget* Widget)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GSTileView", "ItemScrolledIntoViewEvent");

	Params::GSTileView_ItemScrolledIntoViewEvent Parms{};

	Parms.Item = Item;
	Parms.Widget = Widget;

	UObject::ProcessEvent(Func, &Parms);
}


// Function UnrealExtent.GSTileView.OnEntryInitializedEvent
// (Event, Public, BlueprintEvent)
// Parameters:
// class UObject*                          Item                                                   (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class UUserWidget*                      Widget                                                 (Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UnrealExtent::UGSTileView::OnEntryInitializedEvent(class UObject* Item, class UUserWidget* Widget)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GSTileView", "OnEntryInitializedEvent");

	Params::GSTileView_OnEntryInitializedEvent Parms{};

	Parms.Item = Item;
	Parms.Widget = Widget;

	UObject::ProcessEvent(Func, &Parms);
}


// Function UnrealExtent.GSTileView.OnEntryWidgetGeneratedEvent
// (Event, Public, BlueprintEvent)
// Parameters:
// class UUserWidget*                      Widget                                                 (Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UnrealExtent::UGSTileView::OnEntryWidgetGeneratedEvent(class UUserWidget* Widget)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GSTileView", "OnEntryWidgetGeneratedEvent");

	Params::GSTileView_OnEntryWidgetGeneratedEvent Parms{};

	Parms.Widget = Widget;

	UObject::ProcessEvent(Func, &Parms);
}


// Function UnrealExtent.GSTileView.OnEntryWidgetReleasedEvent
// (Event, Public, BlueprintEvent)
// Parameters:
// class UUserWidget*                      Widget                                                 (Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UnrealExtent::UGSTileView::OnEntryWidgetReleasedEvent(class UUserWidget* Widget)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GSTileView", "OnEntryWidgetReleasedEvent");

	Params::GSTileView_OnEntryWidgetReleasedEvent Parms{};

	Parms.Widget = Widget;

	UObject::ProcessEvent(Func, &Parms);
}


// Function UnrealExtent.GSTileView.OnViewWidgetSizeChangedEvent
// (Event, Public, HasDefaults, BlueprintEvent)
// Parameters:
// struct FVector2D                        Size                                                   (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UnrealExtent::UGSTileView::OnViewWidgetSizeChangedEvent(const struct FVector2D& Size)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GSTileView", "OnViewWidgetSizeChangedEvent");

	Params::GSTileView_OnViewWidgetSizeChangedEvent Parms{};

	Parms.Size = std::move(Size);

	UObject::ProcessEvent(Func, &Parms);
}


// Function UnrealExtent.GSTileView.SetBottomItemPosList
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// TArray<float>                           InChildsPosList                                        (Parm, ZeroConstructor, NativeAccessSpecifierPublic)

void UnrealExtent::UGSTileView::SetBottomItemPosList(const TArray<float>& InChildsPosList)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GSTileView", "SetBottomItemPosList");

	Params::GSTileView_SetBottomItemPosList Parms{};

	Parms.InChildsPosList = std::move(InChildsPosList);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function UnrealExtent.GSTileView.SetBottomSpacerSize
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// float                                   InBottomSpacerSize                                     (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UnrealExtent::UGSTileView::SetBottomSpacerSize(float InBottomSpacerSize)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GSTileView", "SetBottomSpacerSize");

	Params::GSTileView_SetBottomSpacerSize Parms{};

	Parms.InBottomSpacerSize = InBottomSpacerSize;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function UnrealExtent.GSTileView.SetEntryHeight
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// float                                   NewHeight                                              (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UnrealExtent::UGSTileView::SetEntryHeight(float NewHeight)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GSTileView", "SetEntryHeight");

	Params::GSTileView_SetEntryHeight Parms{};

	Parms.NewHeight = NewHeight;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function UnrealExtent.GSTileView.SetEntryWidth
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// float                                   NewWidth                                               (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UnrealExtent::UGSTileView::SetEntryWidth(float NewWidth)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GSTileView", "SetEntryWidth");

	Params::GSTileView_SetEntryWidth Parms{};

	Parms.NewWidth = NewWidth;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function UnrealExtent.GSTileView.SetForceNeedBottomSpacer
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// bool                                    InForceNeedBottomSpacer                                (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UnrealExtent::UGSTileView::SetForceNeedBottomSpacer(bool InForceNeedBottomSpacer)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GSTileView", "SetForceNeedBottomSpacer");

	Params::GSTileView_SetForceNeedBottomSpacer Parms{};

	Parms.InForceNeedBottomSpacer = InForceNeedBottomSpacer;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function UnrealExtent.GSTileView.SetForceNeedTopSpacer
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// bool                                    InForceNeedTopSpacer                                   (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UnrealExtent::UGSTileView::SetForceNeedTopSpacer(bool InForceNeedTopSpacer)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GSTileView", "SetForceNeedTopSpacer");

	Params::GSTileView_SetForceNeedTopSpacer Parms{};

	Parms.InForceNeedTopSpacer = InForceNeedTopSpacer;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function UnrealExtent.GSTileView.SetItemWidget
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// TSubclassOf<class UUserWidget>          InItemWidget                                           (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UnrealExtent::UGSTileView::SetItemWidget(TSubclassOf<class UUserWidget> InItemWidget)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GSTileView", "SetItemWidget");

	Params::GSTileView_SetItemWidget Parms{};

	Parms.InItemWidget = InItemWidget;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function UnrealExtent.GSTileView.SetOrientation
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// EOrientation                            InOrientation                                          (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UnrealExtent::UGSTileView::SetOrientation(EOrientation InOrientation)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GSTileView", "SetOrientation");

	Params::GSTileView_SetOrientation Parms{};

	Parms.InOrientation = InOrientation;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function UnrealExtent.GSTileView.SetShowScrollBar
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// bool                                    InShowScrollBar                                        (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UnrealExtent::UGSTileView::SetShowScrollBar(bool InShowScrollBar)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GSTileView", "SetShowScrollBar");

	Params::GSTileView_SetShowScrollBar Parms{};

	Parms.InShowScrollBar = InShowScrollBar;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function UnrealExtent.GSTileView.SetTileAlignment
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// EListItemAlignment                      InTileAlignment                                        (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UnrealExtent::UGSTileView::SetTileAlignment(EListItemAlignment InTileAlignment)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GSTileView", "SetTileAlignment");

	Params::GSTileView_SetTileAlignment Parms{};

	Parms.InTileAlignment = InTileAlignment;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function UnrealExtent.GSTileView.SetTopItemPosList
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// TArray<float>                           InChildsPosList                                        (Parm, ZeroConstructor, NativeAccessSpecifierPublic)

void UnrealExtent::UGSTileView::SetTopItemPosList(const TArray<float>& InChildsPosList)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GSTileView", "SetTopItemPosList");

	Params::GSTileView_SetTopItemPosList Parms{};

	Parms.InChildsPosList = std::move(InChildsPosList);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function UnrealExtent.GSTileView.SetTopSpacerSize
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// float                                   InTopSpacerSize                                        (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UnrealExtent::UGSTileView::SetTopSpacerSize(float InTopSpacerSize)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GSTileView", "SetTopSpacerSize");

	Params::GSTileView_SetTopSpacerSize Parms{};

	Parms.InTopSpacerSize = InTopSpacerSize;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function UnrealExtent.GSTileView.GetBottomSpacerSize
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// float                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

float UnrealExtent::UGSTileView::GetBottomSpacerSize() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GSTileView", "GetBottomSpacerSize");

	Params::GSTileView_GetBottomSpacerSize Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function UnrealExtent.GSTileView.GetEntryHeight
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// float                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

float UnrealExtent::UGSTileView::GetEntryHeight() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GSTileView", "GetEntryHeight");

	Params::GSTileView_GetEntryHeight Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function UnrealExtent.GSTileView.GetEntryWidth
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// float                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

float UnrealExtent::UGSTileView::GetEntryWidth() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GSTileView", "GetEntryWidth");

	Params::GSTileView_GetEntryWidth Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function UnrealExtent.GSTileView.GetTopSpacerSize
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// float                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

float UnrealExtent::UGSTileView::GetTopSpacerSize() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GSTileView", "GetTopSpacerSize");

	Params::GSTileView_GetTopSpacerSize Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function UnrealExtent.GSUINavigationDel.GSOnNavigationChangedFocus
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// class UWidget*                          OldWidget                                              (Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class UWidget*                          NewWidget                                              (Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FFocusEvent                      FocusEvent                                             (Parm, NoDestructor, NativeAccessSpecifierPublic)

void UGSUINavigationDel::GSOnNavigationChangedFocus(class UWidget* OldWidget, class UWidget* NewWidget, const struct FFocusEvent& FocusEvent)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GSUINavigationDel", "GSOnNavigationChangedFocus");

	Params::GSUINavigationDel_GSOnNavigationChangedFocus Parms{};

	Parms.OldWidget = OldWidget;
	Parms.NewWidget = NewWidget;
	Parms.FocusEvent = std::move(FocusEvent);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function UnrealExtent.GSWidgetRender.UpdateRenderTarget2D
// (Final, Native, Public, BlueprintCallable)

void UGSWidgetRender::UpdateRenderTarget2D()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GSWidgetRender", "UpdateRenderTarget2D");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function UnrealExtent.GSWidgetRender.GetUserWidgetObject
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// class UUserWidget*                      ReturnValue                                            (ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class UUserWidget* UGSWidgetRender::GetUserWidgetObject() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GSWidgetRender", "GetUserWidgetObject");

	Params::GSWidgetRender_GetUserWidgetObject Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function UnrealExtent.HitPhysicalAnimComp.BeHit
// (Final, Native, Public, HasOutParams, HasDefaults, BlueprintCallable)
// Parameters:
// TArray<class FName>                     BoneList                                               (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
// struct FVector                          InForceVector                                          (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   InForceStrength                                        (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UHitPhysicalAnimComp::BeHit(const TArray<class FName>& BoneList, const struct FVector& InForceVector, float InForceStrength)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("HitPhysicalAnimComp", "BeHit");

	Params::HitPhysicalAnimComp_BeHit Parms{};

	Parms.BoneList = std::move(BoneList);
	Parms.InForceVector = std::move(InForceVector);
	Parms.InForceStrength = InForceStrength;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function UnrealExtent.HitPhysicalAnimComp.BonesSphereMask
// (Final, Native, Public, HasDefaults)
// Parameters:
// class USkeletalMeshComponent*           TargetSkeletalMesh                                     (Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   Radius                                                 (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FVector                          WorldPosition                                          (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// TArray<class FName>                     WhiteNamesList                                         (Parm, ZeroConstructor, NativeAccessSpecifierPublic)
// TArray<class FName>                     ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, NativeAccessSpecifierPublic)

TArray<class FName> UHitPhysicalAnimComp::BonesSphereMask(class USkeletalMeshComponent* TargetSkeletalMesh, float Radius, const struct FVector& WorldPosition, const TArray<class FName>& WhiteNamesList)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("HitPhysicalAnimComp", "BonesSphereMask");

	Params::HitPhysicalAnimComp_BonesSphereMask Parms{};

	Parms.TargetSkeletalMesh = TargetSkeletalMesh;
	Parms.Radius = Radius;
	Parms.WorldPosition = std::move(WorldPosition);
	Parms.WhiteNamesList = std::move(WhiteNamesList);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function UnrealExtent.HitPhysicalAnimComp.CreateTimer
// (Final, Native, Public)
// Parameters:
// float                                   TimeDelay                                              (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UHitPhysicalAnimComp::CreateTimer(float TimeDelay)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("HitPhysicalAnimComp", "CreateTimer");

	Params::HitPhysicalAnimComp_CreateTimer Parms{};

	Parms.TimeDelay = TimeDelay;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function UnrealExtent.HitPhysicalAnimComp.HitBoneImpulse
// (Final, Native, Public)

void UHitPhysicalAnimComp::HitBoneImpulse()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("HitPhysicalAnimComp", "HitBoneImpulse");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function UnrealExtent.HitPhysicalAnimComp.InitiazliePhysicalAnimation
// (Final, Native, Public, BlueprintCallable)

void UHitPhysicalAnimComp::InitiazliePhysicalAnimation()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("HitPhysicalAnimComp", "InitiazliePhysicalAnimation");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function UnrealExtent.HitPhysicalAnimComp.SetBodyBonePhysic
// (Final, Native, Public)
// Parameters:
// class USkeletalMeshComponent*           TargetMesh                                             (Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class FName                             BoneName                                               (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    NewBool                                                (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UHitPhysicalAnimComp::SetBodyBonePhysic(class USkeletalMeshComponent* TargetMesh, class FName BoneName, bool NewBool)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("HitPhysicalAnimComp", "SetBodyBonePhysic");

	Params::HitPhysicalAnimComp_SetBodyBonePhysic Parms{};

	Parms.TargetMesh = TargetMesh;
	Parms.BoneName = BoneName;
	Parms.NewBool = NewBool;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function UnrealExtent.HitPhysicalAnimComp.SetBonesKinematic
// (Final, Native, Public)
// Parameters:
// TArray<class FName>                     BoneNames                                              (Parm, ZeroConstructor, NativeAccessSpecifierPublic)

void UHitPhysicalAnimComp::SetBonesKinematic(const TArray<class FName>& BoneNames)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("HitPhysicalAnimComp", "SetBonesKinematic");

	Params::HitPhysicalAnimComp_SetBonesKinematic Parms{};

	Parms.BoneNames = std::move(BoneNames);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function UnrealExtent.HitPhysicalAnimComp.SetBonesPhysic
// (Final, Native, Public)
// Parameters:
// TArray<class FName>                     BoneNames                                              (Parm, ZeroConstructor, NativeAccessSpecifierPublic)

void UHitPhysicalAnimComp::SetBonesPhysic(const TArray<class FName>& BoneNames)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("HitPhysicalAnimComp", "SetBonesPhysic");

	Params::HitPhysicalAnimComp_SetBonesPhysic Parms{};

	Parms.BoneNames = std::move(BoneNames);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function UnrealExtent.HitPhysicalAnimComp.SetBonesPhysicWeight
// (Final, Native, Public)
// Parameters:
// TArray<class FName>                     BoneNames                                              (Parm, ZeroConstructor, NativeAccessSpecifierPublic)

void UHitPhysicalAnimComp::SetBonesPhysicWeight(const TArray<class FName>& BoneNames)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("HitPhysicalAnimComp", "SetBonesPhysicWeight");

	Params::HitPhysicalAnimComp_SetBonesPhysicWeight Parms{};

	Parms.BoneNames = std::move(BoneNames);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function UnrealExtent.HitPhysicalAnimComp.TimerCallback
// (Final, Native, Public)

void UHitPhysicalAnimComp::TimerCallback()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("HitPhysicalAnimComp", "TimerCallback");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function UnrealExtent.HitPhysicalAnimComp.TimerTick
// (Final, Native, Public)

void UHitPhysicalAnimComp::TimerTick()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("HitPhysicalAnimComp", "TimerTick");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function UnrealExtent.LandscapeReader.Cache
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// class ALandscapeProxy*                  NewLandscapeProxy                                      (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void ULandscapeReader::Cache(class ALandscapeProxy* NewLandscapeProxy)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("LandscapeReader", "Cache");

	Params::LandscapeReader_Cache Parms{};

	Parms.NewLandscapeProxy = NewLandscapeProxy;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function UnrealExtent.LandscapeReader.GetHeightData
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// struct FIntPtr                          ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)

struct FIntPtr ULandscapeReader::GetHeightData()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("LandscapeReader", "GetHeightData");

	Params::LandscapeReader_GetHeightData Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function UnrealExtent.LandscapeReader.GetHeightDataInRect
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// int32                                   MinX                                                   (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32                                   MinY                                                   (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32                                   MaxX                                                   (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32                                   MaxY                                                   (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FIntPtr                          ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)

struct FIntPtr ULandscapeReader::GetHeightDataInRect(int32 MinX, int32 MinY, int32 MaxX, int32 MaxY)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("LandscapeReader", "GetHeightDataInRect");

	Params::LandscapeReader_GetHeightDataInRect Parms{};

	Parms.MinX = MinX;
	Parms.MinY = MinY;
	Parms.MaxX = MaxX;
	Parms.MaxY = MaxY;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function UnrealExtent.LandscapeReader.GetWeightData
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// int32                                   LayerIndex                                             (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FIntPtr                          ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)

struct FIntPtr ULandscapeReader::GetWeightData(int32 LayerIndex)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("LandscapeReader", "GetWeightData");

	Params::LandscapeReader_GetWeightData Parms{};

	Parms.LayerIndex = LayerIndex;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function UnrealExtent.LandscapeReader.GetWeightDataInRect
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// int32                                   MinX                                                   (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32                                   MinY                                                   (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32                                   MaxX                                                   (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32                                   MaxY                                                   (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32                                   LayerIndex                                             (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FIntPtr                          ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)

struct FIntPtr ULandscapeReader::GetWeightDataInRect(int32 MinX, int32 MinY, int32 MaxX, int32 MaxY, int32 LayerIndex)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("LandscapeReader", "GetWeightDataInRect");

	Params::LandscapeReader_GetWeightDataInRect Parms{};

	Parms.MinX = MinX;
	Parms.MinY = MinY;
	Parms.MaxX = MaxX;
	Parms.MaxY = MaxY;
	Parms.LayerIndex = LayerIndex;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function UnrealExtent.LandscapeReader.HeightDataElementNum
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// int32                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

int32 ULandscapeReader::HeightDataElementNum()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("LandscapeReader", "HeightDataElementNum");

	Params::LandscapeReader_HeightDataElementNum Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function UnrealExtent.LandscapeReader.HeightDataElementSize
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// int32                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

int32 ULandscapeReader::HeightDataElementSize()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("LandscapeReader", "HeightDataElementSize");

	Params::LandscapeReader_HeightDataElementSize Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function UnrealExtent.LandscapeReader.SampleHeightData
// (Final, Native, Public, HasOutParams, HasDefaults, BlueprintCallable)
// Parameters:
// struct FVector                          WorldPos                                               (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// ESampleType                             SampleType                                             (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

float ULandscapeReader::SampleHeightData(const struct FVector& WorldPos, ESampleType SampleType)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("LandscapeReader", "SampleHeightData");

	Params::LandscapeReader_SampleHeightData Parms{};

	Parms.WorldPos = std::move(WorldPos);
	Parms.SampleType = SampleType;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function UnrealExtent.LandscapeReader.SampleWeightData
// (Final, Native, Public, HasOutParams, HasDefaults, BlueprintCallable)
// Parameters:
// struct FVector                          WorldPos                                               (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32                                   LayerIndex                                             (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// ESampleType                             SampleType                                             (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

float ULandscapeReader::SampleWeightData(const struct FVector& WorldPos, int32 LayerIndex, ESampleType SampleType)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("LandscapeReader", "SampleWeightData");

	Params::LandscapeReader_SampleWeightData Parms{};

	Parms.WorldPos = std::move(WorldPos);
	Parms.LayerIndex = LayerIndex;
	Parms.SampleType = SampleType;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function UnrealExtent.LandscapeReader.WeightDataElementNum
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// int32                                   LayerIndex                                             (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

int32 ULandscapeReader::WeightDataElementNum(int32 LayerIndex)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("LandscapeReader", "WeightDataElementNum");

	Params::LandscapeReader_WeightDataElementNum Parms{};

	Parms.LayerIndex = LayerIndex;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function UnrealExtent.LandscapeReader.WeightDataElementSize
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// int32                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

int32 ULandscapeReader::WeightDataElementSize()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("LandscapeReader", "WeightDataElementSize");

	Params::LandscapeReader_WeightDataElementSize Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function UnrealExtent.LayerSceneInfo.BeginPlayCS
// (Event, Public, BlueprintEvent)

void ALayerSceneInfo::BeginPlayCS()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("LayerSceneInfo", "BeginPlayCS");

	UObject::ProcessEvent(Func, nullptr);
}


// Function UnrealExtent.LayerSceneInfo.GenerateLayeredInfo
// (Final, Native, Public, BlueprintCallable)

void ALayerSceneInfo::GenerateLayeredInfo()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("LayerSceneInfo", "GenerateLayeredInfo");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function UnrealExtent.LayerSceneInfo.QueryWeightInfo
// (Final, Native, Public, HasOutParams, HasDefaults, BlueprintCallable)
// Parameters:
// struct FVector                          WorldPos                                               (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32                                   LayerIndex                                             (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    Nearest                                                (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   Value                                                  (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool ALayerSceneInfo::QueryWeightInfo(const struct FVector& WorldPos, int32 LayerIndex, bool Nearest, float* Value)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("LayerSceneInfo", "QueryWeightInfo");

	Params::LayerSceneInfo_QueryWeightInfo Parms{};

	Parms.WorldPos = std::move(WorldPos);
	Parms.LayerIndex = LayerIndex;
	Parms.Nearest = Nearest;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	if (Value != nullptr)
		*Value = Parms.Value;

	return Parms.ReturnValue;
}


// Function UnrealExtent.StatInfoBaseWidget.EndRecord
// (Final, Native, Public, BlueprintCallable)

void UStatInfoBaseWidget::EndRecord()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("StatInfoBaseWidget", "EndRecord");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function UnrealExtent.StatInfoBaseWidget.GetGPUBrand
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// class FString                           ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class FString UStatInfoBaseWidget::GetGPUBrand()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("StatInfoBaseWidget", "GetGPUBrand");

	Params::StatInfoBaseWidget_GetGPUBrand Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function UnrealExtent.StatInfoBaseWidget.GetSimulatedGraphicsCardScaleFactor
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// class FString                           InStatName                                             (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

float UStatInfoBaseWidget::GetSimulatedGraphicsCardScaleFactor(const class FString& InStatName)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("StatInfoBaseWidget", "GetSimulatedGraphicsCardScaleFactor");

	Params::StatInfoBaseWidget_GetSimulatedGraphicsCardScaleFactor Parms{};

	Parms.InStatName = std::move(InStatName);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function UnrealExtent.StatInfoBaseWidget.SaveRecordsToFiles
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// int32                                   NeedCleanup                                            (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UStatInfoBaseWidget::SaveRecordsToFiles(int32 NeedCleanup)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("StatInfoBaseWidget", "SaveRecordsToFiles");

	Params::StatInfoBaseWidget_SaveRecordsToFiles Parms{};

	Parms.NeedCleanup = NeedCleanup;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function UnrealExtent.StatInfoBaseWidget.StartRecord
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// class FString                           FXConfig                                               (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class FString                           UnitName                                               (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class FString                           SkillName                                              (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class FString                           AssetPath                                              (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   MontageLength                                          (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UStatInfoBaseWidget::StartRecord(const class FString& FXConfig, const class FString& UnitName, const class FString& SkillName, const class FString& AssetPath, const float MontageLength)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("StatInfoBaseWidget", "StartRecord");

	Params::StatInfoBaseWidget_StartRecord Parms{};

	Parms.FXConfig = std::move(FXConfig);
	Parms.UnitName = std::move(UnitName);
	Parms.SkillName = std::move(SkillName);
	Parms.AssetPath = std::move(AssetPath);
	Parms.MontageLength = MontageLength;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function UnrealExtent.TamerAsyncLineTraceManager.ClearAllData
// (Final, Native, Public, BlueprintCallable)

void UTamerAsyncLineTraceManager::ClearAllData()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("TamerAsyncLineTraceManager", "ClearAllData");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function UnrealExtent.TamerAsyncLineTraceManager.GetAndCleanAsyncLineTraceResult
// (Final, Native, Public, HasOutParams, BlueprintCallable)
// Parameters:
// TArray<int32>                           OutVisibleTamers                                       (Parm, OutParm, ZeroConstructor, NativeAccessSpecifierPublic)
// TArray<int32>                           OutInvisibleTamers                                     (Parm, OutParm, ZeroConstructor, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UTamerAsyncLineTraceManager::GetAndCleanAsyncLineTraceResult(TArray<int32>* OutVisibleTamers, TArray<int32>* OutInvisibleTamers)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("TamerAsyncLineTraceManager", "GetAndCleanAsyncLineTraceResult");

	Params::TamerAsyncLineTraceManager_GetAndCleanAsyncLineTraceResult Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	if (OutVisibleTamers != nullptr)
		*OutVisibleTamers = std::move(Parms.OutVisibleTamers);

	if (OutInvisibleTamers != nullptr)
		*OutInvisibleTamers = std::move(Parms.OutInvisibleTamers);

	return Parms.ReturnValue;
}


// Function UnrealExtent.TamerAsyncLineTraceManager.RegisterTamerRef
// (Final, Native, Public, HasOutParams, HasDefaults, BlueprintCallable)
// Parameters:
// int32                                   InRefID                                                (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FVector                          InLocation                                             (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   InCapsuleHalfHeight                                    (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UTamerAsyncLineTraceManager::RegisterTamerRef(int32 InRefID, const struct FVector& InLocation, float InCapsuleHalfHeight)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("TamerAsyncLineTraceManager", "RegisterTamerRef");

	Params::TamerAsyncLineTraceManager_RegisterTamerRef Parms{};

	Parms.InRefID = InRefID;
	Parms.InLocation = std::move(InLocation);
	Parms.InCapsuleHalfHeight = InCapsuleHalfHeight;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function UnrealExtent.TamerAsyncLineTraceManager.StartAsyncLineTrace
// (Final, Native, Public, HasOutParams, HasDefaults, BlueprintCallable)
// Parameters:
// struct FVector                          InPlayerLocation                                       (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// TArray<int32>                           InTraceTamers                                          (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)

void UTamerAsyncLineTraceManager::StartAsyncLineTrace(const struct FVector& InPlayerLocation, const TArray<int32>& InTraceTamers)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("TamerAsyncLineTraceManager", "StartAsyncLineTrace");

	Params::TamerAsyncLineTraceManager_StartAsyncLineTrace Parms{};

	Parms.InPlayerLocation = std::move(InPlayerLocation);
	Parms.InTraceTamers = std::move(InTraceTamers);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function UnrealExtent.TamerAsyncLineTraceManager.UnregisterTamerRef
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// int32                                   InRefID                                                (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UTamerAsyncLineTraceManager::UnregisterTamerRef(int32 InRefID)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("TamerAsyncLineTraceManager", "UnregisterTamerRef");

	Params::TamerAsyncLineTraceManager_UnregisterTamerRef Parms{};

	Parms.InRefID = InRefID;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function UnrealExtent.VATAnimMachineInst.InitVATAnimMachine
// (Final, Native, Public, BlueprintCallable)

void AVATAnimMachineInst::InitVATAnimMachine()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("VATAnimMachineInst", "InitVATAnimMachine");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function UnrealExtent.VATAnimMachineInst.PlayVATAnim
// (Final, Native, Public, BlueprintCallable)

void AVATAnimMachineInst::PlayVATAnim()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("VATAnimMachineInst", "PlayVATAnim");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function UnrealExtent.VATAnimMachineInst.StopVATAnim
// (Final, Native, Public, BlueprintCallable)

void AVATAnimMachineInst::StopVATAnim()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("VATAnimMachineInst", "StopVATAnim");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function UnrealExtent.VATAnimMachineInst.UpdateAnimProgress
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// float                                   InAnimProgress                                         (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void AVATAnimMachineInst::UpdateAnimProgress(float InAnimProgress)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("VATAnimMachineInst", "UpdateAnimProgress");

	Params::VATAnimMachineInst_UpdateAnimProgress Parms{};

	Parms.InAnimProgress = InAnimProgress;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function UnrealExtent.VATAnimMachineInst.UpdateAnimSpeed
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// float                                   InPlaySpeed                                            (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void AVATAnimMachineInst::UpdateAnimSpeed(float InPlaySpeed)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("VATAnimMachineInst", "UpdateAnimSpeed");

	Params::VATAnimMachineInst_UpdateAnimSpeed Parms{};

	Parms.InPlaySpeed = InPlaySpeed;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function UnrealExtent.VATAnimMachineInst.UpdateBlendRatio
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// float                                   InBlendRatio                                           (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void AVATAnimMachineInst::UpdateBlendRatio(float InBlendRatio)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("VATAnimMachineInst", "UpdateBlendRatio");

	Params::VATAnimMachineInst_UpdateBlendRatio Parms{};

	Parms.InBlendRatio = InBlendRatio;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function UnrealExtent.VATAnimMachineInst.UpdateWindDirection
// (Final, Native, Public, HasDefaults, BlueprintCallable)
// Parameters:
// struct FVector2D                        InWindDirection                                        (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void AVATAnimMachineInst::UpdateWindDirection(const struct FVector2D& InWindDirection)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("VATAnimMachineInst", "UpdateWindDirection");

	Params::VATAnimMachineInst_UpdateWindDirection Parms{};

	Parms.InWindDirection = std::move(InWindDirection);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function UnrealExtent.VATAnimMachineInst.UpdateWindIntensity
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// float                                   InWindIntensity                                        (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void AVATAnimMachineInst::UpdateWindIntensity(float InWindIntensity)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("VATAnimMachineInst", "UpdateWindIntensity");

	Params::VATAnimMachineInst_UpdateWindIntensity Parms{};

	Parms.InWindIntensity = InWindIntensity;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function UnrealExtent.VATNiagaraInst.InitVATNiagaraInst
// (Final, Native, Public, BlueprintCallable)

void AVATNiagaraInst::InitVATNiagaraInst()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("VATNiagaraInst", "InitVATNiagaraInst");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function UnrealExtent.VATNiagaraInst.ResetNiagaraSystem
// (Final, Native, Public, BlueprintCallable)

void AVATNiagaraInst::ResetNiagaraSystem()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("VATNiagaraInst", "ResetNiagaraSystem");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function UnrealExtent.VATNiagaraInst.ResetVATAnim
// (Event, Public, BlueprintEvent)

void AVATNiagaraInst::ResetVATAnim()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("VATNiagaraInst", "ResetVATAnim");

	UObject::ProcessEvent(Func, nullptr);
}


// Function UnrealExtent.VATNiagaraInst.UpdateNiagaraFloatVariable
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// class FString                           VariableName                                           (ConstParm, Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   TargetValue                                            (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void AVATNiagaraInst::UpdateNiagaraFloatVariable(const class FString& VariableName, const float TargetValue)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("VATNiagaraInst", "UpdateNiagaraFloatVariable");

	Params::VATNiagaraInst_UpdateNiagaraFloatVariable Parms{};

	Parms.VariableName = std::move(VariableName);
	Parms.TargetValue = TargetValue;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function UnrealExtent.VATNiagaraInst.UpdateNiagaraVector2Variable
// (Final, Native, Public, HasDefaults, BlueprintCallable)
// Parameters:
// class FString                           VariableName                                           (ConstParm, Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FVector2D                        TargetValue                                            (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void AVATNiagaraInst::UpdateNiagaraVector2Variable(const class FString& VariableName, const struct FVector2D& TargetValue)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("VATNiagaraInst", "UpdateNiagaraVector2Variable");

	Params::VATNiagaraInst_UpdateNiagaraVector2Variable Parms{};

	Parms.VariableName = std::move(VariableName);
	Parms.TargetValue = std::move(TargetValue);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function UnrealExtent.VATNiagaraInst.UpdateNiagaraVectorVariable
// (Final, Native, Public, HasDefaults, BlueprintCallable)
// Parameters:
// class FString                           VariableName                                           (ConstParm, Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FVector                          TargetValue                                            (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void AVATNiagaraInst::UpdateNiagaraVectorVariable(const class FString& VariableName, const struct FVector& TargetValue)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("VATNiagaraInst", "UpdateNiagaraVectorVariable");

	Params::VATNiagaraInst_UpdateNiagaraVectorVariable Parms{};

	Parms.VariableName = std::move(VariableName);
	Parms.TargetValue = std::move(TargetValue);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function UnrealExtent.VATNiagaraInst.UpdateVATAnim
// (Event, Public, BlueprintEvent)

void AVATNiagaraInst::UpdateVATAnim()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("VATNiagaraInst", "UpdateVATAnim");

	UObject::ProcessEvent(Func, nullptr);
}


// Function UnrealExtent.VFXAutoPlayer.BuildPlayList
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// class FString                           InFolder                                               (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void AVFXAutoPlayer::BuildPlayList(const class FString& InFolder)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("VFXAutoPlayer", "BuildPlayList");

	Params::VFXAutoPlayer_BuildPlayList Parms{};

	Parms.InFolder = std::move(InFolder);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function UnrealExtent.VFXAutoPlayer.CurNiagaraStatusChanged
// (Final, Native, Public, HasOutParams, BlueprintCallable)
// Parameters:
// bool                                    bNumDecreased                                          (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool AVFXAutoPlayer::CurNiagaraStatusChanged(bool* bNumDecreased)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("VFXAutoPlayer", "CurNiagaraStatusChanged");

	Params::VFXAutoPlayer_CurNiagaraStatusChanged Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	if (bNumDecreased != nullptr)
		*bNumDecreased = Parms.bNumDecreased;

	return Parms.ReturnValue;
}


// Function UnrealExtent.VFXAutoPlayer.DestroyAllNiagaras
// (Final, Native, Public, BlueprintCallable)

void AVFXAutoPlayer::DestroyAllNiagaras()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("VFXAutoPlayer", "DestroyAllNiagaras");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function UnrealExtent.VFXAutoPlayer.FlushPlaying
// (Final, Native, Public, BlueprintCallable)

void AVFXAutoPlayer::FlushPlaying()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("VFXAutoPlayer", "FlushPlaying");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function UnrealExtent.VFXAutoPlayer.GetInternalPlayList
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// TArray<class UNiagaraSystem*>           ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, NativeAccessSpecifierPublic)

TArray<class UNiagaraSystem*> AVFXAutoPlayer::GetInternalPlayList()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("VFXAutoPlayer", "GetInternalPlayList");

	Params::VFXAutoPlayer_GetInternalPlayList Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function UnrealExtent.VFXAutoPlayer.ListCompletedPlaying
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool AVFXAutoPlayer::ListCompletedPlaying()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("VFXAutoPlayer", "ListCompletedPlaying");

	Params::VFXAutoPlayer_ListCompletedPlaying Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function UnrealExtent.VFXAutoPlayer.PlayNiagara
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// int32                                   InTargetNiagaraPtr                                     (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void AVFXAutoPlayer::PlayNiagara(int32 InTargetNiagaraPtr)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("VFXAutoPlayer", "PlayNiagara");

	Params::VFXAutoPlayer_PlayNiagara Parms{};

	Parms.InTargetNiagaraPtr = InTargetNiagaraPtr;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function UnrealExtent.VFXAutoPlayer.StartPlaying
// (Final, Native, Public, BlueprintCallable)

void AVFXAutoPlayer::StartPlaying()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("VFXAutoPlayer", "StartPlaying");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function UnrealExtent.VFXAutoPlayer.StopPlaying
// (Final, Native, Public, BlueprintCallable)

void AVFXAutoPlayer::StopPlaying()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("VFXAutoPlayer", "StopPlaying");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}

}

