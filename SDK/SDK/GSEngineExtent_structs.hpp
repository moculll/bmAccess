#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: GSEngineExtent

#include "Basic.hpp"

#include "CoreUObject_structs.hpp"
#include "AnimGraphRuntime_structs.hpp"
#include "Engine_structs.hpp"


namespace SDK
{

// Enum GSEngineExtent.EIKFootRootLocalAxis
// NumValues: 0x0005
enum class EIKFootRootLocalAxis : uint8
{
	NONE                                     = 0,
	X                                        = 1,
	Y                                        = 2,
	Z                                        = 3,
	EIKFootRootLocalAxis_MAX                 = 4,
};

// Enum GSEngineExtent.EDummySocket
// NumValues: 0x0009
enum class EDummySocket : uint8
{
	Pt01_Socket                              = 0,
	Pt02_Socket                              = 1,
	Pt03_Socket                              = 2,
	Pt04_Socket                              = 3,
	Pt05_Socket                              = 4,
	Pt06_Socket                              = 5,
	Pt07_Socket                              = 6,
	Pt08_Socket                              = 7,
	EDummySocket_MAX                         = 8,
};

// Enum GSEngineExtent.EGSConstraintAspectRatioType
// NumValues: 0x0004
enum class EGSConstraintAspectRatioType : uint8
{
	None                                     = 0,
	UpDown                                   = 1,
	LeftRight                                = 2,
	EGSConstraintAspectRatioType_MAX         = 3,
};

// Enum GSEngineExtent.EGSForceRatioType
// NumValues: 0x0004
enum class EGSForceRatioType : uint8
{
	Auto                                     = 0,
	Force16_9                                = 1,
	Force21_9                                = 2,
	EGSForceRatioType_MAX                    = 3,
};

// ScriptStruct GSEngineExtent.GSBranchFilter
// 0x000C (0x000C - 0x0000)
struct FGSBranchFilter final
{
public:
	class FName                                   BoneName;                                          // 0x0000(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         BlendDepth;                                        // 0x0008(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
//static_assert(alignof(FGSBranchFilter) == 0x000004, "Wrong alignment on FGSBranchFilter");
//static_assert(sizeof(FGSBranchFilter) == 0x00000C, "Wrong size on FGSBranchFilter");
//static_assert(offsetof(FGSBranchFilter, BoneName) == 0x000000, "Member 'FGSBranchFilter::BoneName' has a wrong offset!");
//static_assert(offsetof(FGSBranchFilter, BlendDepth) == 0x000008, "Member 'FGSBranchFilter::BlendDepth' has a wrong offset!");

// ScriptStruct GSEngineExtent.GSInputBlendPose
// 0x0010 (0x0010 - 0x0000)
struct FGSInputBlendPose final
{
public:
	TArray<struct FGSBranchFilter>                BranchFilters;                                     // 0x0000(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
};
//static_assert(alignof(FGSInputBlendPose) == 0x000008, "Wrong alignment on FGSInputBlendPose");
//static_assert(sizeof(FGSInputBlendPose) == 0x000010, "Wrong size on FGSInputBlendPose");
//static_assert(offsetof(FGSInputBlendPose, BranchFilters) == 0x000000, "Member 'FGSInputBlendPose::BranchFilters' has a wrong offset!");

// ScriptStruct GSEngineExtent.AnimNode_GSLayeredBoneBlend
// 0x0018 (0x00F8 - 0x00E0)
struct FAnimNode_GSLayeredBoneBlend final : public FAnimNode_LayeredBoneBlend
{
public:
	TArray<struct FGSInputBlendPose>              GS_LayerSetup;                                     // 0x00E0(0x0010)(Edit, EditFixedSize, ZeroConstructor, NativeAccessSpecifierPublic)
	bool                                          GS_bMeshSpaceRotationBlend;                        // 0x00F0(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_F1[0x7];                                       // 0x00F1(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
//static_assert(alignof(FAnimNode_GSLayeredBoneBlend) == 0x000008, "Wrong alignment on FAnimNode_GSLayeredBoneBlend");
//static_assert(sizeof(FAnimNode_GSLayeredBoneBlend) == 0x0000F8, "Wrong size on FAnimNode_GSLayeredBoneBlend");
//static_assert(offsetof(FAnimNode_GSLayeredBoneBlend, GS_LayerSetup) == 0x0000E0, "Member 'FAnimNode_GSLayeredBoneBlend::GS_LayerSetup' has a wrong offset!");
//static_assert(offsetof(FAnimNode_GSLayeredBoneBlend, GS_bMeshSpaceRotationBlend) == 0x0000F0, "Member 'FAnimNode_GSLayeredBoneBlend::GS_bMeshSpaceRotationBlend' has a wrong offset!");

// ScriptStruct GSEngineExtent.AxisSettings
// 0x0008 (0x0008 - 0x0000)
struct FAxisSettings final
{
public:
	EAxis                                         YawRotationAxis;                                   // 0x0000(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x3];                                        // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         BodyOrientationAlpha;                              // 0x0004(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
//static_assert(alignof(FAxisSettings) == 0x000004, "Wrong alignment on FAxisSettings");
//static_assert(sizeof(FAxisSettings) == 0x000008, "Wrong size on FAxisSettings");
//static_assert(offsetof(FAxisSettings, YawRotationAxis) == 0x000000, "Member 'FAxisSettings::YawRotationAxis' has a wrong offset!");
//static_assert(offsetof(FAxisSettings, BodyOrientationAlpha) == 0x000004, "Member 'FAxisSettings::BodyOrientationAlpha' has a wrong offset!");

// ScriptStruct GSEngineExtent.BoneRef
// 0x0010 (0x0010 - 0x0000)
struct FBoneRef final
{
public:
	struct FBoneReference                         bone;                                              // 0x0000(0x0010)(Edit, NoDestructor, NativeAccessSpecifierPublic)
};
//static_assert(alignof(FBoneRef) == 0x000004, "Wrong alignment on FBoneRef");
//static_assert(sizeof(FBoneRef) == 0x000010, "Wrong size on FBoneRef");
//static_assert(offsetof(FBoneRef, bone) == 0x000000, "Member 'FBoneRef::bone' has a wrong offset!");

// ScriptStruct GSEngineExtent.AnimMode_GSOrientationWarping
// 0x0058 (0x0068 - 0x0010)
struct FAnimMode_GSOrientationWarping final : public FAnimNode_Base
{
public:
	struct FPoseLink                              BasePose;                                          // 0x0010(0x0010)(Edit, BlueprintVisible, NoDestructor, NativeAccessSpecifierPublic)
	float                                         LocomotionAngle;                                   // 0x0020(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FAxisSettings                          Settings;                                          // 0x0024(0x0008)(Edit, BlueprintVisible, NoDestructor, NativeAccessSpecifierPublic)
	uint8                                         Pad_2C[0x4];                                       // 0x002C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<struct FBoneRef>                       SpineBones;                                        // 0x0030(0x0010)(Edit, ZeroConstructor, NativeAccessSpecifierPublic)
	struct FBoneReference                         IKFootRootBone;                                    // 0x0040(0x0010)(Edit, NoDestructor, NativeAccessSpecifierPublic)
	struct FBoneReference                         PelvisBone;                                        // 0x0050(0x0010)(Edit, NoDestructor, NativeAccessSpecifierPublic)
	float                                         InternalLocomotionAngle;                           // 0x0060(0x0004)(ZeroConstructor, Transient, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_64[0x4];                                       // 0x0064(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
//static_assert(alignof(FAnimMode_GSOrientationWarping) == 0x000008, "Wrong alignment on FAnimMode_GSOrientationWarping");
//static_assert(sizeof(FAnimMode_GSOrientationWarping) == 0x000068, "Wrong size on FAnimMode_GSOrientationWarping");
//static_assert(offsetof(FAnimMode_GSOrientationWarping, BasePose) == 0x000010, "Member 'FAnimMode_GSOrientationWarping::BasePose' has a wrong offset!");
//static_assert(offsetof(FAnimMode_GSOrientationWarping, LocomotionAngle) == 0x000020, "Member 'FAnimMode_GSOrientationWarping::LocomotionAngle' has a wrong offset!");
//static_assert(offsetof(FAnimMode_GSOrientationWarping, Settings) == 0x000024, "Member 'FAnimMode_GSOrientationWarping::Settings' has a wrong offset!");
//static_assert(offsetof(FAnimMode_GSOrientationWarping, SpineBones) == 0x000030, "Member 'FAnimMode_GSOrientationWarping::SpineBones' has a wrong offset!");
//static_assert(offsetof(FAnimMode_GSOrientationWarping, IKFootRootBone) == 0x000040, "Member 'FAnimMode_GSOrientationWarping::IKFootRootBone' has a wrong offset!");
//static_assert(offsetof(FAnimMode_GSOrientationWarping, PelvisBone) == 0x000050, "Member 'FAnimMode_GSOrientationWarping::PelvisBone' has a wrong offset!");
//static_assert(offsetof(FAnimMode_GSOrientationWarping, InternalLocomotionAngle) == 0x000060, "Member 'FAnimMode_GSOrientationWarping::InternalLocomotionAngle' has a wrong offset!");

// ScriptStruct GSEngineExtent.IKBones
// 0x0024 (0x0024 - 0x0000)
struct FIKBones final
{
public:
	struct FBoneReference                         IKFootBone;                                        // 0x0000(0x0010)(Edit, NoDestructor, NativeAccessSpecifierPublic)
	struct FBoneReference                         FKFootBone;                                        // 0x0010(0x0010)(Edit, NoDestructor, NativeAccessSpecifierPublic)
	int32                                         NumBonesInLimb;                                    // 0x0020(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
//static_assert(alignof(FIKBones) == 0x000004, "Wrong alignment on FIKBones");
//static_assert(sizeof(FIKBones) == 0x000024, "Wrong size on FIKBones");
//static_assert(offsetof(FIKBones, IKFootBone) == 0x000000, "Member 'FIKBones::IKFootBone' has a wrong offset!");
//static_assert(offsetof(FIKBones, FKFootBone) == 0x000010, "Member 'FIKBones::FKFootBone' has a wrong offset!");
//static_assert(offsetof(FIKBones, NumBonesInLimb) == 0x000020, "Member 'FIKBones::NumBonesInLimb' has a wrong offset!");

// ScriptStruct GSEngineExtent.IKFootLocation
// 0x0060 (0x0060 - 0x0000)
struct FIKFootLocation final
{
public:
	struct FVector                                LimbRootLocation;                                  // 0x0000(0x0018)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                OriginLocation;                                    // 0x0018(0x0018)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                ActualLocation;                                    // 0x0030(0x0018)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                NewLocation;                                       // 0x0048(0x0018)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
//static_assert(alignof(FIKFootLocation) == 0x000008, "Wrong alignment on FIKFootLocation");
//static_assert(sizeof(FIKFootLocation) == 0x000060, "Wrong size on FIKFootLocation");
//static_assert(offsetof(FIKFootLocation, LimbRootLocation) == 0x000000, "Member 'FIKFootLocation::LimbRootLocation' has a wrong offset!");
//static_assert(offsetof(FIKFootLocation, OriginLocation) == 0x000018, "Member 'FIKFootLocation::OriginLocation' has a wrong offset!");
//static_assert(offsetof(FIKFootLocation, ActualLocation) == 0x000030, "Member 'FIKFootLocation::ActualLocation' has a wrong offset!");
//static_assert(offsetof(FIKFootLocation, NewLocation) == 0x000048, "Member 'FIKFootLocation::NewLocation' has a wrong offset!");

// ScriptStruct GSEngineExtent.PelvisAdjustmentInterp
// 0x0008 (0x0008 - 0x0000)
struct FPelvisAdjustmentInterp final
{
public:
	float                                         Stiffness;                                         // 0x0000(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Dampen;                                            // 0x0004(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
//static_assert(alignof(FPelvisAdjustmentInterp) == 0x000004, "Wrong alignment on FPelvisAdjustmentInterp");
//static_assert(sizeof(FPelvisAdjustmentInterp) == 0x000008, "Wrong size on FPelvisAdjustmentInterp");
//static_assert(offsetof(FPelvisAdjustmentInterp, Stiffness) == 0x000000, "Member 'FPelvisAdjustmentInterp::Stiffness' has a wrong offset!");
//static_assert(offsetof(FPelvisAdjustmentInterp, Dampen) == 0x000004, "Member 'FPelvisAdjustmentInterp::Dampen' has a wrong offset!");

// ScriptStruct GSEngineExtent.AnimNode_SpeedWarping
// 0x00B8 (0x0180 - 0x00C8)
struct FAnimNode_SpeedWarping final : public FAnimNode_SkeletalControlBase
{
public:
	struct FBoneReference                         IKFootRootBone;                                    // 0x00C8(0x0010)(Edit, NoDestructor, NativeAccessSpecifierPublic)
	TArray<struct FIKBones>                       FeetDefinitions;                                   // 0x00D8(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
	struct FBoneReference                         PelvisBone;                                        // 0x00E8(0x0010)(Edit, NoDestructor, NativeAccessSpecifierPublic)
	EIKFootRootLocalAxis                          SpeedWarpingAxisMode;                              // 0x00F8(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_F9[0x3];                                       // 0x00F9(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         SpeedScaling;                                      // 0x00FC(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         PelvisAdjustmentAlpha;                             // 0x0100(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         MaxIter;                                           // 0x0104(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FPelvisAdjustmentInterp                PelvisAdjustmentInterp;                            // 0x0108(0x0008)(Edit, BlueprintVisible, NoDestructor, NativeAccessSpecifierPublic)
	bool                                          ClampIKUsingFKLeg;                                 // 0x0110(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_111[0x6F];                                     // 0x0111(0x006F)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
//static_assert(alignof(FAnimNode_SpeedWarping) == 0x000008, "Wrong alignment on FAnimNode_SpeedWarping");
//static_assert(sizeof(FAnimNode_SpeedWarping) == 0x000180, "Wrong size on FAnimNode_SpeedWarping");
//static_assert(offsetof(FAnimNode_SpeedWarping, IKFootRootBone) == 0x0000C8, "Member 'FAnimNode_SpeedWarping::IKFootRootBone' has a wrong offset!");
//static_assert(offsetof(FAnimNode_SpeedWarping, FeetDefinitions) == 0x0000D8, "Member 'FAnimNode_SpeedWarping::FeetDefinitions' has a wrong offset!");
//static_assert(offsetof(FAnimNode_SpeedWarping, PelvisBone) == 0x0000E8, "Member 'FAnimNode_SpeedWarping::PelvisBone' has a wrong offset!");
//static_assert(offsetof(FAnimNode_SpeedWarping, SpeedWarpingAxisMode) == 0x0000F8, "Member 'FAnimNode_SpeedWarping::SpeedWarpingAxisMode' has a wrong offset!");
//static_assert(offsetof(FAnimNode_SpeedWarping, SpeedScaling) == 0x0000FC, "Member 'FAnimNode_SpeedWarping::SpeedScaling' has a wrong offset!");
//static_assert(offsetof(FAnimNode_SpeedWarping, PelvisAdjustmentAlpha) == 0x000100, "Member 'FAnimNode_SpeedWarping::PelvisAdjustmentAlpha' has a wrong offset!");
//static_assert(offsetof(FAnimNode_SpeedWarping, MaxIter) == 0x000104, "Member 'FAnimNode_SpeedWarping::MaxIter' has a wrong offset!");
//static_assert(offsetof(FAnimNode_SpeedWarping, PelvisAdjustmentInterp) == 0x000108, "Member 'FAnimNode_SpeedWarping::PelvisAdjustmentInterp' has a wrong offset!");
//static_assert(offsetof(FAnimNode_SpeedWarping, ClampIKUsingFKLeg) == 0x000110, "Member 'FAnimNode_SpeedWarping::ClampIKUsingFKLeg' has a wrong offset!");

// ScriptStruct GSEngineExtent.AnimNotify_DummyEfx
// 0x0058 (0x0058 - 0x0000)
struct FAnimNotify_DummyEfx final
{
public:
	class UParticleSystem*                        PSTemplate;                                        // 0x0000(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EDummySocket                                  Socket;                                            // 0x0008(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                LocationOffset;                                    // 0x0010(0x0018)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FRotator                               RotationOffset;                                    // 0x0028(0x0018)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	struct FVector                                Scale;                                             // 0x0040(0x0018)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
//static_assert(alignof(FAnimNotify_DummyEfx) == 0x000008, "Wrong alignment on FAnimNotify_DummyEfx");
//static_assert(sizeof(FAnimNotify_DummyEfx) == 0x000058, "Wrong size on FAnimNotify_DummyEfx");
//static_assert(offsetof(FAnimNotify_DummyEfx, PSTemplate) == 0x000000, "Member 'FAnimNotify_DummyEfx::PSTemplate' has a wrong offset!");
//static_assert(offsetof(FAnimNotify_DummyEfx, Socket) == 0x000008, "Member 'FAnimNotify_DummyEfx::Socket' has a wrong offset!");
//static_assert(offsetof(FAnimNotify_DummyEfx, LocationOffset) == 0x000010, "Member 'FAnimNotify_DummyEfx::LocationOffset' has a wrong offset!");
//static_assert(offsetof(FAnimNotify_DummyEfx, RotationOffset) == 0x000028, "Member 'FAnimNotify_DummyEfx::RotationOffset' has a wrong offset!");
//static_assert(offsetof(FAnimNotify_DummyEfx, Scale) == 0x000040, "Member 'FAnimNotify_DummyEfx::Scale' has a wrong offset!");

// ScriptStruct GSEngineExtent.PMLocationBoneSocketBoneInfo
// 0x0008 (0x0008 - 0x0000)
struct FPMLocationBoneSocketBoneInfo final
{
public:
	class FName                                   BoneName;                                          // 0x0000(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
//static_assert(alignof(FPMLocationBoneSocketBoneInfo) == 0x000004, "Wrong alignment on FPMLocationBoneSocketBoneInfo");
//static_assert(sizeof(FPMLocationBoneSocketBoneInfo) == 0x000008, "Wrong size on FPMLocationBoneSocketBoneInfo");
//static_assert(offsetof(FPMLocationBoneSocketBoneInfo, BoneName) == 0x000000, "Member 'FPMLocationBoneSocketBoneInfo::BoneName' has a wrong offset!");

// ScriptStruct GSEngineExtent.PMLocationSkelVertSurfaceBoneInfo
// 0x0008 (0x0008 - 0x0000)
struct FPMLocationSkelVertSurfaceBoneInfo final
{
public:
	class FName                                   BoneName;                                          // 0x0000(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
//static_assert(alignof(FPMLocationSkelVertSurfaceBoneInfo) == 0x000004, "Wrong alignment on FPMLocationSkelVertSurfaceBoneInfo");
//static_assert(sizeof(FPMLocationSkelVertSurfaceBoneInfo) == 0x000008, "Wrong size on FPMLocationSkelVertSurfaceBoneInfo");
//static_assert(offsetof(FPMLocationSkelVertSurfaceBoneInfo, BoneName) == 0x000000, "Member 'FPMLocationSkelVertSurfaceBoneInfo::BoneName' has a wrong offset!");

}

