#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: SimpleCharts

#include "Basic.hpp"

#include "CoreUObject_structs.hpp"


namespace SDK
{

// Enum SimpleCharts.ChartTheme
// NumValues: 0x0027
enum class EChartTheme : uint8
{
	Azul                                     = 0,
	beeinspired                              = 1,
	blue                                     = 2,
	Caravan                                  = 3,
	Carp                                     = 4,
	Cool                                     = 5,
	Dark                                     = 6,
	Darkblue                                 = 7,
	Darkbold                                 = 8,
	Darkdigerati                             = 9,
	Darkfreshcut                             = 10,
	Darkmushroom                             = 11,
	Eduardo                                  = 12,
	Forest                                   = 13,
	Freshcut                                 = 14,
	Fruit                                    = 15,
	Gray                                     = 16,
	Green                                    = 17,
	Helianthus                               = 18,
	Infographic                              = 19,
	Inspired                                 = 20,
	Jazz                                     = 21,
	London                                   = 22,
	Macarons                                 = 23,
	Macarons2                                = 24,
	Mint                                     = 25,
	Red                                      = 26,
	Redvelvet                                = 27,
	Roma                                     = 28,
	Royal                                    = 29,
	Sakura                                   = 30,
	Shine                                    = 31,
	Techblue                                 = 32,
	Vintage                                  = 33,
	CustomTheme01                            = 34,
	CustomTheme02                            = 35,
	CustomTheme03                            = 36,
	CustomTheme04                            = 37,
	ChartTheme_MAX                           = 38,
};

// Enum SimpleCharts.position
// NumValues: 0x0004
enum class EPosition : uint8
{
	Center                                   = 0,
	Left                                     = 1,
	Right                                    = 2,
	Position_MAX                             = 3,
};

// Enum SimpleCharts.Orient
// NumValues: 0x0003
enum class EOrient : uint8
{
	Horizontal                               = 0,
	Vertical                                 = 1,
	Orient_MAX                               = 2,
};

// Enum SimpleCharts.TooltipType
// NumValues: 0x0003
enum class ETooltipType : uint8
{
	Line                                     = 0,
	Shadow                                   = 1,
	TooltipType_MAX                          = 2,
};

// Enum SimpleCharts.TriggerType
// NumValues: 0x0003
enum class SimpleCharts::ETriggerType : uint8
{
	Item                                     = 0,
	Axis                                     = 1,
	TriggerType_MAX                          = 2,
};

// Enum SimpleCharts.SeriesLabelPosition
// NumValues: 0x0006
enum class ESeriesLabelPosition : uint8
{
	Inside                                   = 0,
	Top                                      = 1,
	bottom                                   = 2,
	Left                                     = 3,
	Right                                    = 4,
	SeriesLabelPosition_MAX                  = 5,
};

// Enum SimpleCharts.AxisLineType
// NumValues: 0x0004
enum class EAxisLineType : uint8
{
	Solid                                    = 0,
	Dashed                                   = 1,
	Dotted                                   = 2,
	AxisLineType_MAX                         = 3,
};

// Enum SimpleCharts.ChartType
// NumValues: 0x0003
enum class EChartType : uint8
{
	bar                                      = 0,
	Line                                     = 1,
	ChartType_MAX                            = 2,
};

// ScriptStruct SimpleCharts.SeriesLabel
// 0x0010 (0x0010 - 0x0000)
struct FSeriesLabel final
{
public:
	int32                                         Rotate;                                            // 0x0000(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FColor                                 TextColor;                                         // 0x0004(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         FontSize;                                          // 0x0008(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          Show;                                              // 0x000C(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ESeriesLabelPosition                          Position;                                          // 0x000D(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_E[0x2];                                        // 0x000E(0x0002)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
//static_assert(alignof(FSeriesLabel) == 0x000004, "Wrong alignment on FSeriesLabel");
//static_assert(sizeof(FSeriesLabel) == 0x000010, "Wrong size on FSeriesLabel");
//static_assert(offsetof(FSeriesLabel, Rotate) == 0x000000, "Member 'FSeriesLabel::Rotate' has a wrong offset!");
//static_assert(offsetof(FSeriesLabel, TextColor) == 0x000004, "Member 'FSeriesLabel::TextColor' has a wrong offset!");
//static_assert(offsetof(FSeriesLabel, FontSize) == 0x000008, "Member 'FSeriesLabel::FontSize' has a wrong offset!");
//static_assert(offsetof(FSeriesLabel, Show) == 0x00000C, "Member 'FSeriesLabel::Show' has a wrong offset!");
//static_assert(offsetof(FSeriesLabel, Position) == 0x00000D, "Member 'FSeriesLabel::Position' has a wrong offset!");

// ScriptStruct SimpleCharts.ColorStop
// 0x0008 (0x0008 - 0x0000)
struct FColorStop final
{
public:
	float                                         Offset;                                            // 0x0000(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FColor                                 Color;                                             // 0x0004(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
//static_assert(alignof(FColorStop) == 0x000004, "Wrong alignment on FColorStop");
//static_assert(sizeof(FColorStop) == 0x000008, "Wrong size on FColorStop");
//static_assert(offsetof(FColorStop, Offset) == 0x000000, "Member 'FColorStop::Offset' has a wrong offset!");
//static_assert(offsetof(FColorStop, Color) == 0x000004, "Member 'FColorStop::Color' has a wrong offset!");

// ScriptStruct SimpleCharts.LinearGradient
// 0x0030 (0x0030 - 0x0000)
struct FLinearGradient final
{
public:
	struct FVector4                               ColorPosition;                                     // 0x0000(0x0020)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<struct FColorStop>                     ColorStops;                                        // 0x0020(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
};
//static_assert(alignof(FLinearGradient) == 0x000010, "Wrong alignment on FLinearGradient");
//static_assert(sizeof(FLinearGradient) == 0x000030, "Wrong size on FLinearGradient");
//static_assert(offsetof(FLinearGradient, ColorPosition) == 0x000000, "Member 'FLinearGradient::ColorPosition' has a wrong offset!");
//static_assert(offsetof(FLinearGradient, ColorStops) == 0x000020, "Member 'FLinearGradient::ColorStops' has a wrong offset!");

// ScriptStruct SimpleCharts.AreaSeries
// 0x0070 (0x0070 - 0x0000)
struct FAreaSeries final
{
public:
	class FString                                 Name;                                              // 0x0000(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<float>                                 Data;                                              // 0x0010(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
	bool                                          Smooth;                                            // 0x0020(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_21[0x3];                                       // 0x0021(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FSeriesLabel                           DataLabel;                                         // 0x0024(0x0010)(Edit, BlueprintVisible, NoDestructor, NativeAccessSpecifierPublic)
	bool                                          UseGradientColor;                                  // 0x0034(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_35[0xB];                                       // 0x0035(0x000B)(Fixing Size After Last Property [ Dumper-7 ])
	struct FLinearGradient                        LinearGradient;                                    // 0x0040(0x0030)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
};
//static_assert(alignof(FAreaSeries) == 0x000010, "Wrong alignment on FAreaSeries");
//static_assert(sizeof(FAreaSeries) == 0x000070, "Wrong size on FAreaSeries");
//static_assert(offsetof(FAreaSeries, Name) == 0x000000, "Member 'FAreaSeries::Name' has a wrong offset!");
//static_assert(offsetof(FAreaSeries, Data) == 0x000010, "Member 'FAreaSeries::Data' has a wrong offset!");
//static_assert(offsetof(FAreaSeries, Smooth) == 0x000020, "Member 'FAreaSeries::Smooth' has a wrong offset!");
//static_assert(offsetof(FAreaSeries, DataLabel) == 0x000024, "Member 'FAreaSeries::DataLabel' has a wrong offset!");
//static_assert(offsetof(FAreaSeries, UseGradientColor) == 0x000034, "Member 'FAreaSeries::UseGradientColor' has a wrong offset!");
//static_assert(offsetof(FAreaSeries, LinearGradient) == 0x000040, "Member 'FAreaSeries::LinearGradient' has a wrong offset!");

// ScriptStruct SimpleCharts.BarSeries
// 0x0090 (0x0090 - 0x0000)
struct FBarSeries final
{
public:
	class FString                                 Name;                                              // 0x0000(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<float>                                 Data;                                              // 0x0010(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
	class FString                                 Stack;                                             // 0x0020(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ShowBackground;                                    // 0x0030(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_31[0x3];                                       // 0x0031(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FLinearColor                           BackgroundColor;                                   // 0x0034(0x0010)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FSeriesLabel                           DataLabel;                                         // 0x0044(0x0010)(Edit, BlueprintVisible, NoDestructor, NativeAccessSpecifierPublic)
	bool                                          UseGradientColor;                                  // 0x0054(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_55[0xB];                                       // 0x0055(0x000B)(Fixing Size After Last Property [ Dumper-7 ])
	struct FLinearGradient                        LinearGradient;                                    // 0x0060(0x0030)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
};
//static_assert(alignof(FBarSeries) == 0x000010, "Wrong alignment on FBarSeries");
//static_assert(sizeof(FBarSeries) == 0x000090, "Wrong size on FBarSeries");
//static_assert(offsetof(FBarSeries, Name) == 0x000000, "Member 'FBarSeries::Name' has a wrong offset!");
//static_assert(offsetof(FBarSeries, Data) == 0x000010, "Member 'FBarSeries::Data' has a wrong offset!");
//static_assert(offsetof(FBarSeries, Stack) == 0x000020, "Member 'FBarSeries::Stack' has a wrong offset!");
//static_assert(offsetof(FBarSeries, ShowBackground) == 0x000030, "Member 'FBarSeries::ShowBackground' has a wrong offset!");
//static_assert(offsetof(FBarSeries, BackgroundColor) == 0x000034, "Member 'FBarSeries::BackgroundColor' has a wrong offset!");
//static_assert(offsetof(FBarSeries, DataLabel) == 0x000044, "Member 'FBarSeries::DataLabel' has a wrong offset!");
//static_assert(offsetof(FBarSeries, UseGradientColor) == 0x000054, "Member 'FBarSeries::UseGradientColor' has a wrong offset!");
//static_assert(offsetof(FBarSeries, LinearGradient) == 0x000060, "Member 'FBarSeries::LinearGradient' has a wrong offset!");

// ScriptStruct SimpleCharts.axisLabel
// 0x0028 (0x0028 - 0x0000)
struct FAxisLabel final
{
public:
	int32                                         Interval;                                          // 0x0000(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Rotate;                                            // 0x0004(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FColor                                 TextColor;                                         // 0x0008(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         FontSize;                                          // 0x000C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          Show;                                              // 0x0010(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_11[0x7];                                       // 0x0011(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 Unit;                                              // 0x0018(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
//static_assert(alignof(FAxisLabel) == 0x000008, "Wrong alignment on FAxisLabel");
//static_assert(sizeof(FAxisLabel) == 0x000028, "Wrong size on FAxisLabel");
//static_assert(offsetof(FAxisLabel, Interval) == 0x000000, "Member 'FAxisLabel::Interval' has a wrong offset!");
//static_assert(offsetof(FAxisLabel, Rotate) == 0x000004, "Member 'FAxisLabel::Rotate' has a wrong offset!");
//static_assert(offsetof(FAxisLabel, TextColor) == 0x000008, "Member 'FAxisLabel::TextColor' has a wrong offset!");
//static_assert(offsetof(FAxisLabel, FontSize) == 0x00000C, "Member 'FAxisLabel::FontSize' has a wrong offset!");
//static_assert(offsetof(FAxisLabel, Show) == 0x000010, "Member 'FAxisLabel::Show' has a wrong offset!");
//static_assert(offsetof(FAxisLabel, Unit) == 0x000018, "Member 'FAxisLabel::Unit' has a wrong offset!");

// ScriptStruct SimpleCharts.LineStyle
// 0x0010 (0x0010 - 0x0000)
struct FLineStyle final
{
public:
	bool                                          Show;                                              // 0x0000(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x3];                                        // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FColor                                 Color;                                             // 0x0004(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Width;                                             // 0x0008(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EAxisLineType                                 Type;                                              // 0x000C(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_D[0x3];                                        // 0x000D(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
//static_assert(alignof(FLineStyle) == 0x000004, "Wrong alignment on FLineStyle");
//static_assert(sizeof(FLineStyle) == 0x000010, "Wrong size on FLineStyle");
//static_assert(offsetof(FLineStyle, Show) == 0x000000, "Member 'FLineStyle::Show' has a wrong offset!");
//static_assert(offsetof(FLineStyle, Color) == 0x000004, "Member 'FLineStyle::Color' has a wrong offset!");
//static_assert(offsetof(FLineStyle, Width) == 0x000008, "Member 'FLineStyle::Width' has a wrong offset!");
//static_assert(offsetof(FLineStyle, Type) == 0x00000C, "Member 'FLineStyle::Type' has a wrong offset!");

// ScriptStruct SimpleCharts.DoughnutSeries
// 0x00B0 (0x00B0 - 0x0000)
struct FDoughnutSeries final
{
public:
	class FString                                 Name;                                              // 0x0000(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Inside_radius;                                     // 0x0010(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Outside_radius;                                    // 0x0014(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          Label_show;                                        // 0x0018(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          LabelLine_show;                                    // 0x0019(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1A[0x6];                                       // 0x001A(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	TMap<class FString, float>                    Data;                                              // 0x0020(0x0050)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
	bool                                          UseGradientColor;                                  // 0x0070(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_71[0xF];                                       // 0x0071(0x000F)(Fixing Size After Last Property [ Dumper-7 ])
	struct FLinearGradient                        LinearGradient;                                    // 0x0080(0x0030)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
};
//static_assert(alignof(FDoughnutSeries) == 0x000010, "Wrong alignment on FDoughnutSeries");
//static_assert(sizeof(FDoughnutSeries) == 0x0000B0, "Wrong size on FDoughnutSeries");
//static_assert(offsetof(FDoughnutSeries, Name) == 0x000000, "Member 'FDoughnutSeries::Name' has a wrong offset!");
//static_assert(offsetof(FDoughnutSeries, Inside_radius) == 0x000010, "Member 'FDoughnutSeries::Inside_radius' has a wrong offset!");
//static_assert(offsetof(FDoughnutSeries, Outside_radius) == 0x000014, "Member 'FDoughnutSeries::Outside_radius' has a wrong offset!");
//static_assert(offsetof(FDoughnutSeries, Label_show) == 0x000018, "Member 'FDoughnutSeries::Label_show' has a wrong offset!");
//static_assert(offsetof(FDoughnutSeries, LabelLine_show) == 0x000019, "Member 'FDoughnutSeries::LabelLine_show' has a wrong offset!");
//static_assert(offsetof(FDoughnutSeries, Data) == 0x000020, "Member 'FDoughnutSeries::Data' has a wrong offset!");
//static_assert(offsetof(FDoughnutSeries, UseGradientColor) == 0x000070, "Member 'FDoughnutSeries::UseGradientColor' has a wrong offset!");
//static_assert(offsetof(FDoughnutSeries, LinearGradient) == 0x000080, "Member 'FDoughnutSeries::LinearGradient' has a wrong offset!");

// ScriptStruct SimpleCharts.funnelData
// 0x0018 (0x0018 - 0x0000)
struct FFunnelData final
{
public:
	class FString                                 Name;                                              // 0x0000(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Value;                                             // 0x0010(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_14[0x4];                                       // 0x0014(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
//static_assert(alignof(FFunnelData) == 0x000008, "Wrong alignment on FFunnelData");
//static_assert(sizeof(FFunnelData) == 0x000018, "Wrong size on FFunnelData");
//static_assert(offsetof(FFunnelData, Name) == 0x000000, "Member 'FFunnelData::Name' has a wrong offset!");
//static_assert(offsetof(FFunnelData, Value) == 0x000010, "Member 'FFunnelData::Value' has a wrong offset!");

// ScriptStruct SimpleCharts.funnelSeries
// 0x0040 (0x0040 - 0x0000)
struct FFunnelSeries final
{
public:
	class FString                                 Name;                                              // 0x0000(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Left;                                              // 0x0010(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Width;                                             // 0x0014(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Min;                                               // 0x0018(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Max;                                               // 0x001C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         MinSize;                                           // 0x0020(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         MaxSize;                                           // 0x0024(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Gap;                                               // 0x0028(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          Label_show;                                        // 0x002C(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EPosition                                     Label_Position;                                    // 0x002D(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2E[0x2];                                       // 0x002E(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<struct FFunnelData>                    Data;                                              // 0x0030(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
};
//static_assert(alignof(FFunnelSeries) == 0x000008, "Wrong alignment on FFunnelSeries");
//static_assert(sizeof(FFunnelSeries) == 0x000040, "Wrong size on FFunnelSeries");
//static_assert(offsetof(FFunnelSeries, Name) == 0x000000, "Member 'FFunnelSeries::Name' has a wrong offset!");
//static_assert(offsetof(FFunnelSeries, Left) == 0x000010, "Member 'FFunnelSeries::Left' has a wrong offset!");
//static_assert(offsetof(FFunnelSeries, Width) == 0x000014, "Member 'FFunnelSeries::Width' has a wrong offset!");
//static_assert(offsetof(FFunnelSeries, Min) == 0x000018, "Member 'FFunnelSeries::Min' has a wrong offset!");
//static_assert(offsetof(FFunnelSeries, Max) == 0x00001C, "Member 'FFunnelSeries::Max' has a wrong offset!");
//static_assert(offsetof(FFunnelSeries, MinSize) == 0x000020, "Member 'FFunnelSeries::MinSize' has a wrong offset!");
//static_assert(offsetof(FFunnelSeries, MaxSize) == 0x000024, "Member 'FFunnelSeries::MaxSize' has a wrong offset!");
//static_assert(offsetof(FFunnelSeries, Gap) == 0x000028, "Member 'FFunnelSeries::Gap' has a wrong offset!");
//static_assert(offsetof(FFunnelSeries, Label_show) == 0x00002C, "Member 'FFunnelSeries::Label_show' has a wrong offset!");
//static_assert(offsetof(FFunnelSeries, Label_Position) == 0x00002D, "Member 'FFunnelSeries::Label_Position' has a wrong offset!");
//static_assert(offsetof(FFunnelSeries, Data) == 0x000030, "Member 'FFunnelSeries::Data' has a wrong offset!");

// ScriptStruct SimpleCharts.GaugeData
// 0x0018 (0x0018 - 0x0000)
struct FGaugeData final
{
public:
	class FString                                 Name;                                              // 0x0000(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Value;                                             // 0x0010(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_14[0x4];                                       // 0x0014(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
//static_assert(alignof(FGaugeData) == 0x000008, "Wrong alignment on FGaugeData");
//static_assert(sizeof(FGaugeData) == 0x000018, "Wrong size on FGaugeData");
//static_assert(offsetof(FGaugeData, Name) == 0x000000, "Member 'FGaugeData::Name' has a wrong offset!");
//static_assert(offsetof(FGaugeData, Value) == 0x000010, "Member 'FGaugeData::Value' has a wrong offset!");

// ScriptStruct SimpleCharts.GaugeSeries
// 0x0028 (0x0028 - 0x0000)
struct FGaugeSeries final
{
public:
	class FString                                 Name;                                              // 0x0000(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Min;                                               // 0x0010(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Max;                                               // 0x0014(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<struct FGaugeData>                     Data;                                              // 0x0018(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
};
//static_assert(alignof(FGaugeSeries) == 0x000008, "Wrong alignment on FGaugeSeries");
//static_assert(sizeof(FGaugeSeries) == 0x000028, "Wrong size on FGaugeSeries");
//static_assert(offsetof(FGaugeSeries, Name) == 0x000000, "Member 'FGaugeSeries::Name' has a wrong offset!");
//static_assert(offsetof(FGaugeSeries, Min) == 0x000010, "Member 'FGaugeSeries::Min' has a wrong offset!");
//static_assert(offsetof(FGaugeSeries, Max) == 0x000014, "Member 'FGaugeSeries::Max' has a wrong offset!");
//static_assert(offsetof(FGaugeSeries, Data) == 0x000018, "Member 'FGaugeSeries::Data' has a wrong offset!");

// ScriptStruct SimpleCharts.LineBarSeries
// 0x0070 (0x0070 - 0x0000)
struct FLineBarSeries final
{
public:
	class FString                                 Name;                                              // 0x0000(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<float>                                 Data;                                              // 0x0010(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
	EChartType                                    Type;                                              // 0x0020(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_21[0x3];                                       // 0x0021(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FSeriesLabel                           DataLabel;                                         // 0x0024(0x0010)(Edit, BlueprintVisible, NoDestructor, NativeAccessSpecifierPublic)
	bool                                          UseGradientColor;                                  // 0x0034(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_35[0xB];                                       // 0x0035(0x000B)(Fixing Size After Last Property [ Dumper-7 ])
	struct FLinearGradient                        LinearGradient;                                    // 0x0040(0x0030)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
};
//static_assert(alignof(FLineBarSeries) == 0x000010, "Wrong alignment on FLineBarSeries");
//static_assert(sizeof(FLineBarSeries) == 0x000070, "Wrong size on FLineBarSeries");
//static_assert(offsetof(FLineBarSeries, Name) == 0x000000, "Member 'FLineBarSeries::Name' has a wrong offset!");
//static_assert(offsetof(FLineBarSeries, Data) == 0x000010, "Member 'FLineBarSeries::Data' has a wrong offset!");
//static_assert(offsetof(FLineBarSeries, Type) == 0x000020, "Member 'FLineBarSeries::Type' has a wrong offset!");
//static_assert(offsetof(FLineBarSeries, DataLabel) == 0x000024, "Member 'FLineBarSeries::DataLabel' has a wrong offset!");
//static_assert(offsetof(FLineBarSeries, UseGradientColor) == 0x000034, "Member 'FLineBarSeries::UseGradientColor' has a wrong offset!");
//static_assert(offsetof(FLineBarSeries, LinearGradient) == 0x000040, "Member 'FLineBarSeries::LinearGradient' has a wrong offset!");

// ScriptStruct SimpleCharts.LineSeries
// 0x0070 (0x0070 - 0x0000)
struct FLineSeries final
{
public:
	class FString                                 Name;                                              // 0x0000(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<float>                                 Data;                                              // 0x0010(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
	bool                                          Smooth;                                            // 0x0020(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_21[0x3];                                       // 0x0021(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FSeriesLabel                           DataLabel;                                         // 0x0024(0x0010)(Edit, BlueprintVisible, NoDestructor, NativeAccessSpecifierPublic)
	bool                                          UseGradientColor;                                  // 0x0034(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_35[0xB];                                       // 0x0035(0x000B)(Fixing Size After Last Property [ Dumper-7 ])
	struct FLinearGradient                        LinearGradient;                                    // 0x0040(0x0030)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
};
//static_assert(alignof(FLineSeries) == 0x000010, "Wrong alignment on FLineSeries");
//static_assert(sizeof(FLineSeries) == 0x000070, "Wrong size on FLineSeries");
//static_assert(offsetof(FLineSeries, Name) == 0x000000, "Member 'FLineSeries::Name' has a wrong offset!");
//static_assert(offsetof(FLineSeries, Data) == 0x000010, "Member 'FLineSeries::Data' has a wrong offset!");
//static_assert(offsetof(FLineSeries, Smooth) == 0x000020, "Member 'FLineSeries::Smooth' has a wrong offset!");
//static_assert(offsetof(FLineSeries, DataLabel) == 0x000024, "Member 'FLineSeries::DataLabel' has a wrong offset!");
//static_assert(offsetof(FLineSeries, UseGradientColor) == 0x000034, "Member 'FLineSeries::UseGradientColor' has a wrong offset!");
//static_assert(offsetof(FLineSeries, LinearGradient) == 0x000040, "Member 'FLineSeries::LinearGradient' has a wrong offset!");

// ScriptStruct SimpleCharts.PieSeries
// 0x00A0 (0x00A0 - 0x0000)
struct FPieSeries final
{
public:
	class FString                                 Name;                                              // 0x0000(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Radius;                                            // 0x0010(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          Label_show;                                        // 0x0014(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          LabelLine_show;                                    // 0x0015(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          RoseType;                                          // 0x0016(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_17[0x1];                                       // 0x0017(0x0001)(Fixing Size After Last Property [ Dumper-7 ])
	TMap<class FString, float>                    Data;                                              // 0x0018(0x0050)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
	bool                                          UseGradientColor;                                  // 0x0068(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_69[0x7];                                       // 0x0069(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FLinearGradient                        LinearGradient;                                    // 0x0070(0x0030)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
};
//static_assert(alignof(FPieSeries) == 0x000010, "Wrong alignment on FPieSeries");
//static_assert(sizeof(FPieSeries) == 0x0000A0, "Wrong size on FPieSeries");
//static_assert(offsetof(FPieSeries, Name) == 0x000000, "Member 'FPieSeries::Name' has a wrong offset!");
//static_assert(offsetof(FPieSeries, Radius) == 0x000010, "Member 'FPieSeries::Radius' has a wrong offset!");
//static_assert(offsetof(FPieSeries, Label_show) == 0x000014, "Member 'FPieSeries::Label_show' has a wrong offset!");
//static_assert(offsetof(FPieSeries, LabelLine_show) == 0x000015, "Member 'FPieSeries::LabelLine_show' has a wrong offset!");
//static_assert(offsetof(FPieSeries, RoseType) == 0x000016, "Member 'FPieSeries::RoseType' has a wrong offset!");
//static_assert(offsetof(FPieSeries, Data) == 0x000018, "Member 'FPieSeries::Data' has a wrong offset!");
//static_assert(offsetof(FPieSeries, UseGradientColor) == 0x000068, "Member 'FPieSeries::UseGradientColor' has a wrong offset!");
//static_assert(offsetof(FPieSeries, LinearGradient) == 0x000070, "Member 'FPieSeries::LinearGradient' has a wrong offset!");

// ScriptStruct SimpleCharts.Indicator
// 0x0018 (0x0018 - 0x0000)
struct FIndicator final
{
public:
	class FString                                 Name;                                              // 0x0000(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Max;                                               // 0x0010(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_14[0x4];                                       // 0x0014(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
//static_assert(alignof(FIndicator) == 0x000008, "Wrong alignment on FIndicator");
//static_assert(sizeof(FIndicator) == 0x000018, "Wrong size on FIndicator");
//static_assert(offsetof(FIndicator, Name) == 0x000000, "Member 'FIndicator::Name' has a wrong offset!");
//static_assert(offsetof(FIndicator, Max) == 0x000010, "Member 'FIndicator::Max' has a wrong offset!");

// ScriptStruct SimpleCharts.Radar
// 0x0020 (0x0020 - 0x0000)
struct FRadar final
{
public:
	bool                                          Circle;                                            // 0x0000(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x3];                                        // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         Radius;                                            // 0x0004(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FColor                                 Color;                                             // 0x0008(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FColor                                 BackgroundColor;                                   // 0x000C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<struct FIndicator>                     Indicator;                                         // 0x0010(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
};
//static_assert(alignof(FRadar) == 0x000008, "Wrong alignment on FRadar");
//static_assert(sizeof(FRadar) == 0x000020, "Wrong size on FRadar");
//static_assert(offsetof(FRadar, Circle) == 0x000000, "Member 'FRadar::Circle' has a wrong offset!");
//static_assert(offsetof(FRadar, Radius) == 0x000004, "Member 'FRadar::Radius' has a wrong offset!");
//static_assert(offsetof(FRadar, Color) == 0x000008, "Member 'FRadar::Color' has a wrong offset!");
//static_assert(offsetof(FRadar, BackgroundColor) == 0x00000C, "Member 'FRadar::BackgroundColor' has a wrong offset!");
//static_assert(offsetof(FRadar, Indicator) == 0x000010, "Member 'FRadar::Indicator' has a wrong offset!");

// ScriptStruct SimpleCharts.Data
// 0x0020 (0x0020 - 0x0000)
struct FData final
{
public:
	class FString                                 Name;                                              // 0x0000(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<float>                                 Value;                                             // 0x0010(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
};
//static_assert(alignof(FData) == 0x000008, "Wrong alignment on FData");
//static_assert(sizeof(FData) == 0x000020, "Wrong size on FData");
//static_assert(offsetof(FData, Name) == 0x000000, "Member 'FData::Name' has a wrong offset!");
//static_assert(offsetof(FData, Value) == 0x000010, "Member 'FData::Value' has a wrong offset!");

// ScriptStruct SimpleCharts.RadarSeries
// 0x0060 (0x0060 - 0x0000)
struct FRadarSeries final
{
public:
	class FString                                 Name;                                              // 0x0000(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<struct FData>                          Data;                                              // 0x0010(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
	bool                                          UseGradientColor;                                  // 0x0020(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_21[0xF];                                       // 0x0021(0x000F)(Fixing Size After Last Property [ Dumper-7 ])
	struct FLinearGradient                        LinearGradient;                                    // 0x0030(0x0030)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
};
//static_assert(alignof(FRadarSeries) == 0x000010, "Wrong alignment on FRadarSeries");
//static_assert(sizeof(FRadarSeries) == 0x000060, "Wrong size on FRadarSeries");
//static_assert(offsetof(FRadarSeries, Name) == 0x000000, "Member 'FRadarSeries::Name' has a wrong offset!");
//static_assert(offsetof(FRadarSeries, Data) == 0x000010, "Member 'FRadarSeries::Data' has a wrong offset!");
//static_assert(offsetof(FRadarSeries, UseGradientColor) == 0x000020, "Member 'FRadarSeries::UseGradientColor' has a wrong offset!");
//static_assert(offsetof(FRadarSeries, LinearGradient) == 0x000030, "Member 'FRadarSeries::LinearGradient' has a wrong offset!");

// ScriptStruct SimpleCharts.links
// 0x0028 (0x0028 - 0x0000)
struct FLinks final
{
public:
	class FString                                 Source;                                            // 0x0000(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 Target;                                            // 0x0010(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Value;                                             // 0x0020(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_24[0x4];                                       // 0x0024(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
//static_assert(alignof(FLinks) == 0x000008, "Wrong alignment on FLinks");
//static_assert(sizeof(FLinks) == 0x000028, "Wrong size on FLinks");
//static_assert(offsetof(FLinks, Source) == 0x000000, "Member 'FLinks::Source' has a wrong offset!");
//static_assert(offsetof(FLinks, Target) == 0x000010, "Member 'FLinks::Target' has a wrong offset!");
//static_assert(offsetof(FLinks, Value) == 0x000020, "Member 'FLinks::Value' has a wrong offset!");

// ScriptStruct SimpleCharts.SankeySeries
// 0x0070 (0x0070 - 0x0000)
struct FSankeySeries final
{
public:
	TArray<class FString>                         Data;                                              // 0x0000(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<struct FLinks>                         Links;                                             // 0x0010(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
	float                                         Left;                                              // 0x0020(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FSeriesLabel                           DataLabel;                                         // 0x0024(0x0010)(Edit, BlueprintVisible, NoDestructor, NativeAccessSpecifierPublic)
	bool                                          UseGradientColor;                                  // 0x0034(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_35[0xB];                                       // 0x0035(0x000B)(Fixing Size After Last Property [ Dumper-7 ])
	struct FLinearGradient                        LinearGradient;                                    // 0x0040(0x0030)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
};
//static_assert(alignof(FSankeySeries) == 0x000010, "Wrong alignment on FSankeySeries");
//static_assert(sizeof(FSankeySeries) == 0x000070, "Wrong size on FSankeySeries");
//static_assert(offsetof(FSankeySeries, Data) == 0x000000, "Member 'FSankeySeries::Data' has a wrong offset!");
//static_assert(offsetof(FSankeySeries, Links) == 0x000010, "Member 'FSankeySeries::Links' has a wrong offset!");
//static_assert(offsetof(FSankeySeries, Left) == 0x000020, "Member 'FSankeySeries::Left' has a wrong offset!");
//static_assert(offsetof(FSankeySeries, DataLabel) == 0x000024, "Member 'FSankeySeries::DataLabel' has a wrong offset!");
//static_assert(offsetof(FSankeySeries, UseGradientColor) == 0x000034, "Member 'FSankeySeries::UseGradientColor' has a wrong offset!");
//static_assert(offsetof(FSankeySeries, LinearGradient) == 0x000040, "Member 'FSankeySeries::LinearGradient' has a wrong offset!");

// ScriptStruct SimpleCharts.ScatterSeries
// 0x0070 (0x0070 - 0x0000)
struct FScatterSeries final
{
public:
	class FString                                 Name;                                              // 0x0000(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<struct FVector2D>                      Data;                                              // 0x0010(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
	float                                         SymbolSize;                                        // 0x0020(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FSeriesLabel                           DataLabel;                                         // 0x0024(0x0010)(Edit, BlueprintVisible, NoDestructor, NativeAccessSpecifierPublic)
	bool                                          UseGradientColor;                                  // 0x0034(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_35[0xB];                                       // 0x0035(0x000B)(Fixing Size After Last Property [ Dumper-7 ])
	struct FLinearGradient                        LinearGradient;                                    // 0x0040(0x0030)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
};
//static_assert(alignof(FScatterSeries) == 0x000010, "Wrong alignment on FScatterSeries");
//static_assert(sizeof(FScatterSeries) == 0x000070, "Wrong size on FScatterSeries");
//static_assert(offsetof(FScatterSeries, Name) == 0x000000, "Member 'FScatterSeries::Name' has a wrong offset!");
//static_assert(offsetof(FScatterSeries, Data) == 0x000010, "Member 'FScatterSeries::Data' has a wrong offset!");
//static_assert(offsetof(FScatterSeries, SymbolSize) == 0x000020, "Member 'FScatterSeries::SymbolSize' has a wrong offset!");
//static_assert(offsetof(FScatterSeries, DataLabel) == 0x000024, "Member 'FScatterSeries::DataLabel' has a wrong offset!");
//static_assert(offsetof(FScatterSeries, UseGradientColor) == 0x000034, "Member 'FScatterSeries::UseGradientColor' has a wrong offset!");
//static_assert(offsetof(FScatterSeries, LinearGradient) == 0x000040, "Member 'FScatterSeries::LinearGradient' has a wrong offset!");

}

