#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: SimpleCharts

#include "Basic.hpp"

#include "SimpleCharts_classes.hpp"
#include "SimpleCharts_parameters.hpp"


namespace SDK
{

// Function SimpleCharts.ChartBase.SetAnim
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// bool                                    Active                                                 (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UChartBase::SetAnim(bool Active)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("ChartBase", "SetAnim");

	Params::ChartBase_SetAnim Parms{};

	Parms.Active = Active;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function SimpleCharts.ChartBase.SetAxis
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// bool                                    XAxis                                                  (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// TArray<class FString>                   Axis_Data                                              (Parm, ZeroConstructor, NativeAccessSpecifierPublic)

void UChartBase::SetAxis(bool XAxis, const TArray<class FString>& Axis_Data)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("ChartBase", "SetAxis");

	Params::ChartBase_SetAxis Parms{};

	Parms.XAxis = XAxis;
	Parms.Axis_Data = std::move(Axis_Data);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function SimpleCharts.ChartBase.SetCustomColor
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// bool                                    Active                                                 (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// TArray<struct FColor>                   Custom_color_0                                         (Parm, ZeroConstructor, NativeAccessSpecifierPublic)

void UChartBase::SetCustomColor(bool Active, const TArray<struct FColor>& Custom_color_0)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("ChartBase", "SetCustomColor");

	Params::ChartBase_SetCustomColor Parms{};

	Parms.Active = Active;
	Parms.Custom_color_0 = std::move(Custom_color_0);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function SimpleCharts.ChartBase.SetTheme
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// EChartTheme                             ChartTheme                                             (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    Axis_Style_With_Theme                                  (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UChartBase::SetTheme(EChartTheme ChartTheme, bool Axis_Style_With_Theme)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("ChartBase", "SetTheme");

	Params::ChartBase_SetTheme Parms{};

	Parms.ChartTheme = ChartTheme;
	Parms.Axis_Style_With_Theme = Axis_Style_With_Theme;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function SimpleCharts.ChartBase.SetTitle
// (Final, Native, Public, HasDefaults, BlueprintCallable)
// Parameters:
// class FString                           Text                                                   (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    Show                                                   (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// EPosition                               Position                                               (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32                                   FontSize                                               (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FLinearColor                     Color                                                  (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UChartBase::SetTitle(const class FString& Text, bool Show, EPosition Position, int32 FontSize, const struct FLinearColor& Color)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("ChartBase", "SetTitle");

	Params::ChartBase_SetTitle Parms{};

	Parms.Text = std::move(Text);
	Parms.Show = Show;
	Parms.Position = Position;
	Parms.FontSize = FontSize;
	Parms.Color = std::move(Color);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function SimpleCharts.ChartBase.SetTooltipStyle
// (Final, Native, Public, HasDefaults, BlueprintCallable)
// Parameters:
// SimpleCharts::ETriggerType              Trigger                                                (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// ETooltipType                            ToolTip                                                (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FLinearColor                     TextColor                                              (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FLinearColor                     BackgroundColor                                        (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UChartBase::SetTooltipStyle(SimpleCharts::ETriggerType Trigger, ETooltipType ToolTip, const struct FLinearColor& TextColor, const struct FLinearColor& BackgroundColor)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("ChartBase", "SetTooltipStyle");

	Params::ChartBase_SetTooltipStyle Parms{};

	Parms.Trigger = Trigger;
	Parms.ToolTip = ToolTip;
	Parms.TextColor = std::move(TextColor);
	Parms.BackgroundColor = std::move(BackgroundColor);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function SimpleCharts.ChartBase.SetXAxisStyle
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// struct FAxisLabel                       Xaxis_Label                                            (Parm, NativeAccessSpecifierPublic)
// struct FLineStyle                       Xaxis_Line                                             (Parm, NoDestructor, NativeAccessSpecifierPublic)
// struct FLineStyle                       Xsplit_Line                                            (Parm, NoDestructor, NativeAccessSpecifierPublic)

void UChartBase::SetXAxisStyle(const struct FAxisLabel& Xaxis_Label, const struct FLineStyle& Xaxis_Line, const struct FLineStyle& Xsplit_Line)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("ChartBase", "SetXAxisStyle");

	Params::ChartBase_SetXAxisStyle Parms{};

	Parms.Xaxis_Label = std::move(Xaxis_Label);
	Parms.Xaxis_Line = std::move(Xaxis_Line);
	Parms.Xsplit_Line = std::move(Xsplit_Line);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function SimpleCharts.ChartBase.SetYAxisStyle
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// struct FAxisLabel                       Yaxis_Label                                            (Parm, NativeAccessSpecifierPublic)
// struct FLineStyle                       Yaxis_Line                                             (Parm, NoDestructor, NativeAccessSpecifierPublic)
// struct FLineStyle                       Ysplit_Line                                            (Parm, NoDestructor, NativeAccessSpecifierPublic)

void UChartBase::SetYAxisStyle(const struct FAxisLabel& Yaxis_Label, const struct FLineStyle& Yaxis_Line, const struct FLineStyle& Ysplit_Line)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("ChartBase", "SetYAxisStyle");

	Params::ChartBase_SetYAxisStyle Parms{};

	Parms.Yaxis_Label = std::move(Yaxis_Label);
	Parms.Yaxis_Line = std::move(Yaxis_Line);
	Parms.Ysplit_Line = std::move(Ysplit_Line);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function SimpleCharts.ChartBase.UpdateChart
// (Final, Native, Public, BlueprintCallable)

void UChartBase::UpdateChart()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("ChartBase", "UpdateChart");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function SimpleCharts.AreaChart.SetLegend
// (Final, Native, Public, HasDefaults, BlueprintCallable)
// Parameters:
// bool                                    Show                                                   (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// EPosition                               Position                                               (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// EOrient                                 Orient                                                 (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FLinearColor                     Color                                                  (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32                                   FontSize                                               (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UAreaChart::SetLegend(bool Show, EPosition Position, EOrient Orient, const struct FLinearColor& Color, int32 FontSize)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("AreaChart", "SetLegend");

	Params::AreaChart_SetLegend Parms{};

	Parms.Show = Show;
	Parms.Position = Position;
	Parms.Orient = Orient;
	Parms.Color = std::move(Color);
	Parms.FontSize = FontSize;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function SimpleCharts.AreaChart.SetSeries
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// TArray<struct FAreaSeries>              SeriesData                                             (Parm, ZeroConstructor, NativeAccessSpecifierPublic)

void UAreaChart::SetSeries(const TArray<struct FAreaSeries>& SeriesData)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("AreaChart", "SetSeries");

	Params::AreaChart_SetSeries Parms{};

	Parms.SeriesData = std::move(SeriesData);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function SimpleCharts.BarChart.SetLegend
// (Final, Native, Public, HasDefaults, BlueprintCallable)
// Parameters:
// bool                                    Show                                                   (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// EPosition                               Position                                               (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// EOrient                                 Orient                                                 (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FLinearColor                     Color                                                  (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32                                   FontSize                                               (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UBarChart::SetLegend(bool Show, EPosition Position, EOrient Orient, const struct FLinearColor& Color, int32 FontSize)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BarChart", "SetLegend");

	Params::BarChart_SetLegend Parms{};

	Parms.Show = Show;
	Parms.Position = Position;
	Parms.Orient = Orient;
	Parms.Color = std::move(Color);
	Parms.FontSize = FontSize;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function SimpleCharts.BarChart.SetSeries
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// TArray<struct FBarSeries>               SeriesData                                             (Parm, ZeroConstructor, NativeAccessSpecifierPublic)

void UBarChart::SetSeries(const TArray<struct FBarSeries>& SeriesData)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BarChart", "SetSeries");

	Params::BarChart_SetSeries Parms{};

	Parms.SeriesData = std::move(SeriesData);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function SimpleCharts.ChartWebBrowser.ExecuteJavascript
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// class FString                           ScriptText                                             (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UChartWebBrowser::ExecuteJavascript(const class FString& ScriptText)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("ChartWebBrowser", "ExecuteJavascript");

	Params::ChartWebBrowser_ExecuteJavascript Parms{};

	Parms.ScriptText = std::move(ScriptText);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function SimpleCharts.ChartWebBrowser.LoadString
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// class FString                           Contents                                               (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class FString                           DummyURL                                               (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UChartWebBrowser::LoadString(const class FString& Contents, const class FString& DummyURL)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("ChartWebBrowser", "LoadString");

	Params::ChartWebBrowser_LoadString Parms{};

	Parms.Contents = std::move(Contents);
	Parms.DummyURL = std::move(DummyURL);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function SimpleCharts.ChartWebBrowser.LoadURL
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// class FString                           NewURL                                                 (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UChartWebBrowser::LoadURL(const class FString& NewURL)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("ChartWebBrowser", "LoadURL");

	Params::ChartWebBrowser_LoadURL Parms{};

	Parms.NewURL = std::move(NewURL);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// DelegateFunction SimpleCharts.ChartWebBrowser.OnBeforePopup__DelegateSignature
// (MulticastDelegate, Public, Delegate)
// Parameters:
// class FString                           URL                                                    (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class FString                           Frame                                                  (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UChartWebBrowser::OnBeforePopup__DelegateSignature(const class FString& URL, const class FString& Frame)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("ChartWebBrowser", "OnBeforePopup__DelegateSignature");

	Params::ChartWebBrowser_OnBeforePopup__DelegateSignature Parms{};

	Parms.URL = std::move(URL);
	Parms.Frame = std::move(Frame);

	UObject::ProcessEvent(Func, &Parms);
}


// DelegateFunction SimpleCharts.ChartWebBrowser.OnUrlChanged__DelegateSignature
// (MulticastDelegate, Public, Delegate, HasOutParams)
// Parameters:
// class FText                             Text                                                   (ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)

void UChartWebBrowser::OnUrlChanged__DelegateSignature(const class FText& Text)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("ChartWebBrowser", "OnUrlChanged__DelegateSignature");

	Params::ChartWebBrowser_OnUrlChanged__DelegateSignature Parms{};

	Parms.Text = std::move(Text);

	UObject::ProcessEvent(Func, &Parms);
}


// Function SimpleCharts.ChartWebBrowser.GetTitleText
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// class FText                             ReturnValue                                            (Parm, OutParm, ReturnParm, NativeAccessSpecifierPublic)

class FText UChartWebBrowser::GetTitleText() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("ChartWebBrowser", "GetTitleText");

	Params::ChartWebBrowser_GetTitleText Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function SimpleCharts.ChartWebBrowser.GetUrl
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// class FString                           ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class FString UChartWebBrowser::GetUrl() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("ChartWebBrowser", "GetUrl");

	Params::ChartWebBrowser_GetUrl Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function SimpleCharts.CustomChart.SetOption
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// class FString                           InOption                                               (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class FString                           OtherCode                                              (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UCustomChart::SetOption(const class FString& InOption, const class FString& OtherCode)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CustomChart", "SetOption");

	Params::CustomChart_SetOption Parms{};

	Parms.InOption = std::move(InOption);
	Parms.OtherCode = std::move(OtherCode);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function SimpleCharts.CustomChart.SetTheme
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// EChartTheme                             ChartTheme                                             (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UCustomChart::SetTheme(EChartTheme ChartTheme)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CustomChart", "SetTheme");

	Params::CustomChart_SetTheme Parms{};

	Parms.ChartTheme = ChartTheme;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function SimpleCharts.DoughnutChart.SetLegend
// (Final, Native, Public, HasDefaults, BlueprintCallable)
// Parameters:
// bool                                    Show                                                   (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// EPosition                               Position                                               (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// EOrient                                 Orient                                                 (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FLinearColor                     Color                                                  (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32                                   FontSize                                               (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UDoughnutChart::SetLegend(bool Show, EPosition Position, EOrient Orient, const struct FLinearColor& Color, int32 FontSize)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("DoughnutChart", "SetLegend");

	Params::DoughnutChart_SetLegend Parms{};

	Parms.Show = Show;
	Parms.Position = Position;
	Parms.Orient = Orient;
	Parms.Color = std::move(Color);
	Parms.FontSize = FontSize;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function SimpleCharts.DoughnutChart.SetSeries
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// struct FDoughnutSeries                  SeriesData                                             (Parm, NativeAccessSpecifierPublic)

void UDoughnutChart::SetSeries(const struct FDoughnutSeries& SeriesData)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("DoughnutChart", "SetSeries");

	Params::DoughnutChart_SetSeries Parms{};

	Parms.SeriesData = std::move(SeriesData);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function SimpleCharts.FunnelChart.SetLegend
// (Final, Native, Public, HasDefaults, BlueprintCallable)
// Parameters:
// bool                                    Show                                                   (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// EPosition                               Position                                               (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// EOrient                                 Orient                                                 (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FLinearColor                     Color                                                  (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32                                   FontSize                                               (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UFunnelChart::SetLegend(bool Show, EPosition Position, EOrient Orient, const struct FLinearColor& Color, int32 FontSize)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("FunnelChart", "SetLegend");

	Params::FunnelChart_SetLegend Parms{};

	Parms.Show = Show;
	Parms.Position = Position;
	Parms.Orient = Orient;
	Parms.Color = std::move(Color);
	Parms.FontSize = FontSize;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function SimpleCharts.FunnelChart.SetSeries
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// struct FFunnelSeries                    SeriesData                                             (Parm, NativeAccessSpecifierPublic)

void UFunnelChart::SetSeries(const struct FFunnelSeries& SeriesData)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("FunnelChart", "SetSeries");

	Params::FunnelChart_SetSeries Parms{};

	Parms.SeriesData = std::move(SeriesData);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function SimpleCharts.GaugeChart.SetLegend
// (Final, Native, Public, HasDefaults, BlueprintCallable)
// Parameters:
// bool                                    Show                                                   (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// EPosition                               Position                                               (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// EOrient                                 Orient                                                 (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FLinearColor                     Color                                                  (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32                                   FontSize                                               (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UGaugeChart::SetLegend(bool Show, EPosition Position, EOrient Orient, const struct FLinearColor& Color, int32 FontSize)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GaugeChart", "SetLegend");

	Params::GaugeChart_SetLegend Parms{};

	Parms.Show = Show;
	Parms.Position = Position;
	Parms.Orient = Orient;
	Parms.Color = std::move(Color);
	Parms.FontSize = FontSize;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function SimpleCharts.GaugeChart.SetSeries
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// struct FGaugeSeries                     SeriesData                                             (Parm, NativeAccessSpecifierPublic)

void UGaugeChart::SetSeries(const struct FGaugeSeries& SeriesData)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GaugeChart", "SetSeries");

	Params::GaugeChart_SetSeries Parms{};

	Parms.SeriesData = std::move(SeriesData);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function SimpleCharts.LineBarChart.SetLegend
// (Final, Native, Public, HasDefaults, BlueprintCallable)
// Parameters:
// bool                                    Show                                                   (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// EPosition                               Position                                               (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// EOrient                                 Orient                                                 (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FLinearColor                     Color                                                  (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32                                   FontSize                                               (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void ULineBarChart::SetLegend(bool Show, EPosition Position, EOrient Orient, const struct FLinearColor& Color, int32 FontSize)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("LineBarChart", "SetLegend");

	Params::LineBarChart_SetLegend Parms{};

	Parms.Show = Show;
	Parms.Position = Position;
	Parms.Orient = Orient;
	Parms.Color = std::move(Color);
	Parms.FontSize = FontSize;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function SimpleCharts.LineBarChart.SetSeries
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// TArray<struct FLineBarSeries>           SeriesData                                             (Parm, ZeroConstructor, NativeAccessSpecifierPublic)

void ULineBarChart::SetSeries(const TArray<struct FLineBarSeries>& SeriesData)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("LineBarChart", "SetSeries");

	Params::LineBarChart_SetSeries Parms{};

	Parms.SeriesData = std::move(SeriesData);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function SimpleCharts.LineChart.SetLegend
// (Final, Native, Public, HasDefaults, BlueprintCallable)
// Parameters:
// bool                                    Show                                                   (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// EPosition                               Position                                               (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// EOrient                                 Orient                                                 (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FLinearColor                     Color                                                  (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32                                   FontSize                                               (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void ULineChart::SetLegend(bool Show, EPosition Position, EOrient Orient, const struct FLinearColor& Color, int32 FontSize)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("LineChart", "SetLegend");

	Params::LineChart_SetLegend Parms{};

	Parms.Show = Show;
	Parms.Position = Position;
	Parms.Orient = Orient;
	Parms.Color = std::move(Color);
	Parms.FontSize = FontSize;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function SimpleCharts.LineChart.SetSeries
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// TArray<struct FLineSeries>              SeriesData                                             (Parm, ZeroConstructor, NativeAccessSpecifierPublic)

void ULineChart::SetSeries(const TArray<struct FLineSeries>& SeriesData)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("LineChart", "SetSeries");

	Params::LineChart_SetSeries Parms{};

	Parms.SeriesData = std::move(SeriesData);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function SimpleCharts.PieChart.SetLegend
// (Final, Native, Public, HasDefaults, BlueprintCallable)
// Parameters:
// bool                                    Show                                                   (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// EPosition                               Position                                               (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// EOrient                                 Orient                                                 (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FLinearColor                     Color                                                  (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32                                   FontSize                                               (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UPieChart::SetLegend(bool Show, EPosition Position, EOrient Orient, const struct FLinearColor& Color, int32 FontSize)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("PieChart", "SetLegend");

	Params::PieChart_SetLegend Parms{};

	Parms.Show = Show;
	Parms.Position = Position;
	Parms.Orient = Orient;
	Parms.Color = std::move(Color);
	Parms.FontSize = FontSize;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function SimpleCharts.PieChart.SetSeries
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// struct FPieSeries                       SeriesData                                             (Parm, NativeAccessSpecifierPublic)

void UPieChart::SetSeries(const struct FPieSeries& SeriesData)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("PieChart", "SetSeries");

	Params::PieChart_SetSeries Parms{};

	Parms.SeriesData = std::move(SeriesData);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function SimpleCharts.RadarChart.SetLegend
// (Final, Native, Public, HasDefaults, BlueprintCallable)
// Parameters:
// bool                                    Show                                                   (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// EPosition                               Position                                               (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// EOrient                                 Orient                                                 (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FLinearColor                     Color                                                  (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32                                   FontSize                                               (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void URadarChart::SetLegend(bool Show, EPosition Position, EOrient Orient, const struct FLinearColor& Color, int32 FontSize)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("RadarChart", "SetLegend");

	Params::RadarChart_SetLegend Parms{};

	Parms.Show = Show;
	Parms.Position = Position;
	Parms.Orient = Orient;
	Parms.Color = std::move(Color);
	Parms.FontSize = FontSize;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function SimpleCharts.RadarChart.SetRadar
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// struct FRadar                           RadarData                                              (Parm, NativeAccessSpecifierPublic)

void URadarChart::SetRadar(const struct FRadar& RadarData)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("RadarChart", "SetRadar");

	Params::RadarChart_SetRadar Parms{};

	Parms.RadarData = std::move(RadarData);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function SimpleCharts.RadarChart.SetSeries
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// struct FRadarSeries                     SeriesData                                             (Parm, NativeAccessSpecifierPublic)

void URadarChart::SetSeries(const struct FRadarSeries& SeriesData)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("RadarChart", "SetSeries");

	Params::RadarChart_SetSeries Parms{};

	Parms.SeriesData = std::move(SeriesData);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function SimpleCharts.SankeyChart.SetLegend
// (Final, Native, Public, HasDefaults, BlueprintCallable)
// Parameters:
// bool                                    Show                                                   (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// EPosition                               Position                                               (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// EOrient                                 Orient                                                 (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FLinearColor                     Color                                                  (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32                                   FontSize                                               (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void USankeyChart::SetLegend(bool Show, EPosition Position, EOrient Orient, const struct FLinearColor& Color, int32 FontSize)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SankeyChart", "SetLegend");

	Params::SankeyChart_SetLegend Parms{};

	Parms.Show = Show;
	Parms.Position = Position;
	Parms.Orient = Orient;
	Parms.Color = std::move(Color);
	Parms.FontSize = FontSize;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function SimpleCharts.SankeyChart.SetSeries
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// struct FSankeySeries                    SeriesData                                             (Parm, NativeAccessSpecifierPublic)

void USankeyChart::SetSeries(const struct FSankeySeries& SeriesData)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SankeyChart", "SetSeries");

	Params::SankeyChart_SetSeries Parms{};

	Parms.SeriesData = std::move(SeriesData);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function SimpleCharts.ScatterChart.SetLegend
// (Final, Native, Public, HasDefaults, BlueprintCallable)
// Parameters:
// bool                                    Show                                                   (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// EPosition                               Position                                               (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// EOrient                                 Orient                                                 (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FLinearColor                     Color                                                  (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32                                   FontSize                                               (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UScatterChart::SetLegend(bool Show, EPosition Position, EOrient Orient, const struct FLinearColor& Color, int32 FontSize)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("ScatterChart", "SetLegend");

	Params::ScatterChart_SetLegend Parms{};

	Parms.Show = Show;
	Parms.Position = Position;
	Parms.Orient = Orient;
	Parms.Color = std::move(Color);
	Parms.FontSize = FontSize;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function SimpleCharts.ScatterChart.SetSeries
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// TArray<struct FScatterSeries>           SeriesData                                             (Parm, ZeroConstructor, NativeAccessSpecifierPublic)

void UScatterChart::SetSeries(const TArray<struct FScatterSeries>& SeriesData)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("ScatterChart", "SetSeries");

	Params::ScatterChart_SetSeries Parms{};

	Parms.SeriesData = std::move(SeriesData);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}

}

