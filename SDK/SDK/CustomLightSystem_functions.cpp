#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: CustomLightSystem

#include "Basic.hpp"

#include "CustomLightSystem_classes.hpp"
#include "CustomLightSystem_parameters.hpp"


namespace SDK
{

// Function CustomLightSystem.CLSLightManager.CheckReforenceListValid
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool ACLSLightManager::CheckReforenceListValid()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CLSLightManager", "CheckReforenceListValid");

	Params::CLSLightManager_CheckReforenceListValid Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function CustomLightSystem.CLSLightManager.ForceUpdateParameters
// (Final, Native, Public, BlueprintCallable)

void ACLSLightManager::ForceUpdateParameters()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CLSLightManager", "ForceUpdateParameters");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function CustomLightSystem.CLSLightManager.ForceUpdateTagComponents
// (Final, Native, Public, BlueprintCallable)

void ACLSLightManager::ForceUpdateTagComponents()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CLSLightManager", "ForceUpdateTagComponents");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function CustomLightSystem.CLSLightManager.InitializeTagActor
// (Final, Native, Public)
// Parameters:
// class UCLSTagComponent*                 TagComponent                                           (Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool ACLSLightManager::InitializeTagActor(class UCLSTagComponent* TagComponent)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CLSLightManager", "InitializeTagActor");

	Params::CLSLightManager_InitializeTagActor Parms{};

	Parms.TagComponent = TagComponent;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function CustomLightSystem.CLSLightManager.SetLightManagerActive
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// bool                                    NewActive                                              (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void ACLSLightManager::SetLightManagerActive(bool NewActive)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CLSLightManager", "SetLightManagerActive");

	Params::CLSLightManager_SetLightManagerActive Parms{};

	Parms.NewActive = NewActive;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function CustomLightSystem.CLSLightManager.SwitchAllLightAndFog
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// int32                                   Index_0                                                (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool ACLSLightManager::SwitchAllLightAndFog(int32 Index_0)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CLSLightManager", "SwitchAllLightAndFog");

	Params::CLSLightManager_SwitchAllLightAndFog Parms{};

	Parms.Index_0 = Index_0;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function CustomLightSystem.CLSLightManager.SwitchAtmosphericFog
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// int32                                   Index_0                                                (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool ACLSLightManager::SwitchAtmosphericFog(int32 Index_0)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CLSLightManager", "SwitchAtmosphericFog");

	Params::CLSLightManager_SwitchAtmosphericFog Parms{};

	Parms.Index_0 = Index_0;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function CustomLightSystem.CLSLightManager.SwitchDirectionalLight
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// int32                                   Index_0                                                (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool ACLSLightManager::SwitchDirectionalLight(int32 Index_0)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CLSLightManager", "SwitchDirectionalLight");

	Params::CLSLightManager_SwitchDirectionalLight Parms{};

	Parms.Index_0 = Index_0;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function CustomLightSystem.CLSLightManager.SwitchExponentialHeightFog
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// int32                                   Index_0                                                (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool ACLSLightManager::SwitchExponentialHeightFog(int32 Index_0)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CLSLightManager", "SwitchExponentialHeightFog");

	Params::CLSLightManager_SwitchExponentialHeightFog Parms{};

	Parms.Index_0 = Index_0;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function CustomLightSystem.CLSLightManager.SwitchLightAndFog
// (Final, Native, Public)
// Parameters:
// float                                   Percentage                                             (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void ACLSLightManager::SwitchLightAndFog(float Percentage)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CLSLightManager", "SwitchLightAndFog");

	Params::CLSLightManager_SwitchLightAndFog Parms{};

	Parms.Percentage = Percentage;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function CustomLightSystem.CLSLightManager.SwitchSkyLight
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// int32                                   Index_0                                                (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool ACLSLightManager::SwitchSkyLight(int32 Index_0)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CLSLightManager", "SwitchSkyLight");

	Params::CLSLightManager_SwitchSkyLight Parms{};

	Parms.Index_0 = Index_0;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function CustomLightSystem.CLSLightManager.SyncLightsAndFogs
// (Final, Native, Public)
// Parameters:
// class ADirectionalLight*                InTargetDirectionalLight                               (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class ASkyLight*                        InTargetSkyLight                                       (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class ASkyAtmosphere*                   InTargetAtmosphericFog                                 (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class AExponentialHeightFog*            InTargetExponentialHeightFog                           (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FCLSMaterialParametersCollectionPropertyInTargetCLSVolumeMPCProperty                           (Parm, NativeAccessSpecifierPublic)
// struct FCLSMaterialParametersCollectionPropertyInOriginalCLSVolumeMPCProperty                         (Parm, NativeAccessSpecifierPublic)
// float                                   InTargetVolumePercentage                               (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    ForceUpdate                                            (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void ACLSLightManager::SyncLightsAndFogs(class ADirectionalLight* InTargetDirectionalLight, class ASkyLight* InTargetSkyLight, class ASkyAtmosphere* InTargetAtmosphericFog, class AExponentialHeightFog* InTargetExponentialHeightFog, const struct FCLSMaterialParametersCollectionProperty& InTargetCLSVolumeMPCProperty, const struct FCLSMaterialParametersCollectionProperty& InOriginalCLSVolumeMPCProperty, float InTargetVolumePercentage, bool ForceUpdate)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CLSLightManager", "SyncLightsAndFogs");

	Params::CLSLightManager_SyncLightsAndFogs Parms{};

	Parms.InTargetDirectionalLight = InTargetDirectionalLight;
	Parms.InTargetSkyLight = InTargetSkyLight;
	Parms.InTargetAtmosphericFog = InTargetAtmosphericFog;
	Parms.InTargetExponentialHeightFog = InTargetExponentialHeightFog;
	Parms.InTargetCLSVolumeMPCProperty = std::move(InTargetCLSVolumeMPCProperty);
	Parms.InOriginalCLSVolumeMPCProperty = std::move(InOriginalCLSVolumeMPCProperty);
	Parms.InTargetVolumePercentage = InTargetVolumePercentage;
	Parms.ForceUpdate = ForceUpdate;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function CustomLightSystem.CLSLightManager.DisableAllActor
// (Final, Native, Public, BlueprintCallable, Const)

void ACLSLightManager::DisableAllActor() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CLSLightManager", "DisableAllActor");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function CustomLightSystem.CLSAtmosphericFog.SetVisibility
// (Final, Native, Public)
// Parameters:
// bool                                    bNewVisibility                                         (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void ACLSAtmosphericFog::SetVisibility(bool bNewVisibility)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CLSAtmosphericFog", "SetVisibility");

	Params::CLSAtmosphericFog_SetVisibility Parms{};

	Parms.bNewVisibility = bNewVisibility;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function CustomLightSystem.CLSBaseVolume.CopyClsData2LightComponents
// (Final, Native, Public, BlueprintCallable)

void ACLSBaseVolume::CopyClsData2LightComponents()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CLSBaseVolume", "CopyClsData2LightComponents");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function CustomLightSystem.CLSBaseVolume.CopyCLsDataFromMaster
// (Final, Native, Public, BlueprintCallable)

void ACLSBaseVolume::CopyCLsDataFromMaster()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CLSBaseVolume", "CopyCLsDataFromMaster");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function CustomLightSystem.CLSBaseVolume.SetDynamicLevel
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// int32                                   InDynamicLevel                                         (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void ACLSBaseVolume::SetDynamicLevel(int32 InDynamicLevel)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CLSBaseVolume", "SetDynamicLevel");

	Params::CLSBaseVolume_SetDynamicLevel Parms{};

	Parms.InDynamicLevel = InDynamicLevel;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function CustomLightSystem.CLSBaseVolume.SetForceEnableAnyWhere
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// bool                                    bInForceEnableAnyWhere                                 (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void ACLSBaseVolume::SetForceEnableAnyWhere(bool bInForceEnableAnyWhere)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CLSBaseVolume", "SetForceEnableAnyWhere");

	Params::CLSBaseVolume_SetForceEnableAnyWhere Parms{};

	Parms.bInForceEnableAnyWhere = bInForceEnableAnyWhere;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function CustomLightSystem.CLSCommandManager.InitializeCommandManager
// (Final, Native, Public)

void ACLSCommandManager::InitializeCommandManager()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CLSCommandManager", "InitializeCommandManager");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function CustomLightSystem.CLSCommandManager.InterruptAnotherManager
// (Final, Native, Public, BlueprintCallable)

void ACLSCommandManager::InterruptAnotherManager()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CLSCommandManager", "InterruptAnotherManager");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function CustomLightSystem.CLSCommandManager.ReactiveAnotherManager
// (Final, Native, Public, BlueprintCallable)

void ACLSCommandManager::ReactiveAnotherManager()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CLSCommandManager", "ReactiveAnotherManager");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function CustomLightSystem.CLSCommandManager.SafelySwitchLightsAndFogs
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// class ADirectionalLight*                InTargetDirectionalLight                               (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class ASkyLight*                        InTargetSkyLight                                       (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class ASkyAtmosphere*                   InTargetAtmosphericFog                                 (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class AExponentialHeightFog*            InTargetExponentialHeightFog                           (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FCLSMaterialParametersCollectionPropertyInTargetCLSVolumeMPCProperty                           (Parm, NativeAccessSpecifierPublic)
// struct FCLSMaterialParametersCollectionPropertyInOriginalCLSVolumeMPCProperty                         (Parm, NativeAccessSpecifierPublic)
// float                                   InTargetVolumePercentage                               (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    ForceUpdate                                            (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void ACLSCommandManager::SafelySwitchLightsAndFogs(class ADirectionalLight* InTargetDirectionalLight, class ASkyLight* InTargetSkyLight, class ASkyAtmosphere* InTargetAtmosphericFog, class AExponentialHeightFog* InTargetExponentialHeightFog, const struct FCLSMaterialParametersCollectionProperty& InTargetCLSVolumeMPCProperty, const struct FCLSMaterialParametersCollectionProperty& InOriginalCLSVolumeMPCProperty, float InTargetVolumePercentage, bool ForceUpdate)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CLSCommandManager", "SafelySwitchLightsAndFogs");

	Params::CLSCommandManager_SafelySwitchLightsAndFogs Parms{};

	Parms.InTargetDirectionalLight = InTargetDirectionalLight;
	Parms.InTargetSkyLight = InTargetSkyLight;
	Parms.InTargetAtmosphericFog = InTargetAtmosphericFog;
	Parms.InTargetExponentialHeightFog = InTargetExponentialHeightFog;
	Parms.InTargetCLSVolumeMPCProperty = std::move(InTargetCLSVolumeMPCProperty);
	Parms.InOriginalCLSVolumeMPCProperty = std::move(InOriginalCLSVolumeMPCProperty);
	Parms.InTargetVolumePercentage = InTargetVolumePercentage;
	Parms.ForceUpdate = ForceUpdate;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function CustomLightSystem.CLSCommandManager.SwitchLightsAndFogs
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// class ADirectionalLight*                InTargetDirectionalLight                               (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class ASkyLight*                        InTargetSkyLight                                       (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class ASkyAtmosphere*                   InTargetAtmosphericFog                                 (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class AExponentialHeightFog*            InTargetExponentialHeightFog                           (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FCLSMaterialParametersCollectionPropertyInTargetCLSVolumeMPCProperty                           (Parm, NativeAccessSpecifierPublic)
// struct FCLSMaterialParametersCollectionPropertyInOriginalCLSVolumeMPCProperty                         (Parm, NativeAccessSpecifierPublic)
// float                                   InTargetVolumePercentage                               (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    ForceUpdate                                            (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void ACLSCommandManager::SwitchLightsAndFogs(class ADirectionalLight* InTargetDirectionalLight, class ASkyLight* InTargetSkyLight, class ASkyAtmosphere* InTargetAtmosphericFog, class AExponentialHeightFog* InTargetExponentialHeightFog, const struct FCLSMaterialParametersCollectionProperty& InTargetCLSVolumeMPCProperty, const struct FCLSMaterialParametersCollectionProperty& InOriginalCLSVolumeMPCProperty, float InTargetVolumePercentage, bool ForceUpdate)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CLSCommandManager", "SwitchLightsAndFogs");

	Params::CLSCommandManager_SwitchLightsAndFogs Parms{};

	Parms.InTargetDirectionalLight = InTargetDirectionalLight;
	Parms.InTargetSkyLight = InTargetSkyLight;
	Parms.InTargetAtmosphericFog = InTargetAtmosphericFog;
	Parms.InTargetExponentialHeightFog = InTargetExponentialHeightFog;
	Parms.InTargetCLSVolumeMPCProperty = std::move(InTargetCLSVolumeMPCProperty);
	Parms.InOriginalCLSVolumeMPCProperty = std::move(InOriginalCLSVolumeMPCProperty);
	Parms.InTargetVolumePercentage = InTargetVolumePercentage;
	Parms.ForceUpdate = ForceUpdate;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function CustomLightSystem.CLSDirectionalLight.SetVisibility
// (Final, Native, Public, Const)
// Parameters:
// bool                                    bNewVisibility                                         (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void ACLSDirectionalLight::SetVisibility(bool bNewVisibility) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CLSDirectionalLight", "SetVisibility");

	Params::CLSDirectionalLight_SetVisibility Parms{};

	Parms.bNewVisibility = bNewVisibility;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function CustomLightSystem.CLSExponentialHeightFog.SetVisibility
// (Final, Native, Public, Const)
// Parameters:
// bool                                    bNewVisibility                                         (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void ACLSExponentialHeightFog::SetVisibility(bool bNewVisibility) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CLSExponentialHeightFog", "SetVisibility");

	Params::CLSExponentialHeightFog_SetVisibility Parms{};

	Parms.bNewVisibility = bNewVisibility;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function CustomLightSystem.CLSFunctionLibrary.GetCurrentCLSManager
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// class ACLSManager*                      ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class ACLSManager* UCLSFunctionLibrary::GetCurrentCLSManager()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("CLSFunctionLibrary", "GetCurrentCLSManager");

	Params::CLSFunctionLibrary_GetCurrentCLSManager Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function CustomLightSystem.CLSFunctionLibrary.OverrideEnvLightBlendInSpeed
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// bool                                    bOverride                                              (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   InBlendInSpeed                                         (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UCLSFunctionLibrary::OverrideEnvLightBlendInSpeed(bool bOverride, float InBlendInSpeed)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("CLSFunctionLibrary", "OverrideEnvLightBlendInSpeed");

	Params::CLSFunctionLibrary_OverrideEnvLightBlendInSpeed Parms{};

	Parms.bOverride = bOverride;
	Parms.InBlendInSpeed = InBlendInSpeed;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function CustomLightSystem.CLSFunctionLibrary.RegisterNeedPointLightControlActor
// (Final, Native, Static, Public, HasOutParams, BlueprintCallable)
// Parameters:
// class FName                             InTag                                                  (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class AActor*                           InActor                                                (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UCLSFunctionLibrary::RegisterNeedPointLightControlActor(const class FName& InTag, class AActor* InActor)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("CLSFunctionLibrary", "RegisterNeedPointLightControlActor");

	Params::CLSFunctionLibrary_RegisterNeedPointLightControlActor Parms{};

	Parms.InTag = InTag;
	Parms.InActor = InActor;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function CustomLightSystem.CLSFunctionLibrary.UnregisterNeedPointLightControlActor
// (Final, Native, Static, Public, HasOutParams, BlueprintCallable)
// Parameters:
// class FName                             InTag                                                  (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UCLSFunctionLibrary::UnregisterNeedPointLightControlActor(const class FName& InTag)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("CLSFunctionLibrary", "UnregisterNeedPointLightControlActor");

	Params::CLSFunctionLibrary_UnregisterNeedPointLightControlActor Parms{};

	Parms.InTag = InTag;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function CustomLightSystem.CLSManager.RemoveAllDynamicLevel
// (Final, Native, Static, Public, BlueprintCallable)

void ACLSManager::RemoveAllDynamicLevel()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("CLSManager", "RemoveAllDynamicLevel");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function CustomLightSystem.CLSManager.SetActorLightAttenuation
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// float                                   InActorLightAttenuation                                (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void ACLSManager::SetActorLightAttenuation(float InActorLightAttenuation)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CLSManager", "SetActorLightAttenuation");

	Params::CLSManager_SetActorLightAttenuation Parms{};

	Parms.InActorLightAttenuation = InActorLightAttenuation;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function CustomLightSystem.CLSManager.SetEnableManager
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// bool                                    bInEnableManager                                       (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void ACLSManager::SetEnableManager(bool bInEnableManager)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CLSManager", "SetEnableManager");

	Params::CLSManager_SetEnableManager Parms{};

	Parms.bInEnableManager = bInEnableManager;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function CustomLightSystem.CLSManager.SetPlayerLightAttenuation
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// float                                   InPlayerLightAttenuation                               (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void ACLSManager::SetPlayerLightAttenuation(float InPlayerLightAttenuation)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CLSManager", "SetPlayerLightAttenuation");

	Params::CLSManager_SetPlayerLightAttenuation Parms{};

	Parms.InPlayerLightAttenuation = InPlayerLightAttenuation;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function CustomLightSystem.CLSManager.UpdateAndGetWatchData
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// struct FCLSWatchData                    ReturnValue                                            (Parm, OutParm, ReturnParm, NativeAccessSpecifierPublic)

struct FCLSWatchData ACLSManager::UpdateAndGetWatchData()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CLSManager", "UpdateAndGetWatchData");

	Params::CLSManager_UpdateAndGetWatchData Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function CustomLightSystem.CLSPostVolume.AddOrUpdateBlendable
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// TScriptInterface<class IBlendableInterface>InBlendableObject                                      (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   InWeight                                               (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void ACLSPostVolume::AddOrUpdateBlendable(TScriptInterface<class IBlendableInterface> InBlendableObject, float InWeight)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CLSPostVolume", "AddOrUpdateBlendable");

	Params::CLSPostVolume_AddOrUpdateBlendable Parms{};

	Parms.InBlendableObject = InBlendableObject;
	Parms.InWeight = InWeight;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function CustomLightSystem.RTXSettings.GetRTXQuality
// (Event, Public, BlueprintEvent)
// Parameters:
// uint8                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

uint8 IRTXSettings::GetRTXQuality()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("RTXSettings", "GetRTXQuality");

	Params::RTXSettings_GetRTXQuality Parms{};

	UObject::ProcessEvent(Func, &Parms);

	return Parms.ReturnValue;
}


// Function CustomLightSystem.RTXSettings.IsDLSSRREnabled
// (Event, Public, BlueprintEvent)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool IRTXSettings::IsDLSSRREnabled()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("RTXSettings", "IsDLSSRREnabled");

	Params::RTXSettings_IsDLSSRREnabled Parms{};

	UObject::ProcessEvent(Func, &Parms);

	return Parms.ReturnValue;
}


// Function CustomLightSystem.RTXSettings.IsRTXEnabled
// (Event, Public, BlueprintEvent)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool IRTXSettings::IsRTXEnabled()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("RTXSettings", "IsRTXEnabled");

	Params::RTXSettings_IsRTXEnabled Parms{};

	UObject::ProcessEvent(Func, &Parms);

	return Parms.ReturnValue;
}


// Function CustomLightSystem.RTXSettings.SetDlssRREnable
// (Event, Public, BlueprintEvent)
// Parameters:
// bool                                    bEnable                                                (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void IRTXSettings::SetDlssRREnable(bool bEnable)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("RTXSettings", "SetDlssRREnable");

	Params::RTXSettings_SetDlssRREnable Parms{};

	Parms.bEnable = bEnable;

	UObject::ProcessEvent(Func, &Parms);
}


// Function CustomLightSystem.RTXSettings.SetRTXEnabled
// (Event, Public, BlueprintEvent)
// Parameters:
// bool                                    bInEnable                                              (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void IRTXSettings::SetRTXEnabled(bool bInEnable)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("RTXSettings", "SetRTXEnabled");

	Params::RTXSettings_SetRTXEnabled Parms{};

	Parms.bInEnable = bInEnable;

	UObject::ProcessEvent(Func, &Parms);
}


// Function CustomLightSystem.RTXSettings.SetRTXQuality
// (Event, Public, BlueprintEvent)
// Parameters:
// uint8                                   Quality                                                (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void IRTXSettings::SetRTXQuality(uint8 Quality)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("RTXSettings", "SetRTXQuality");

	Params::RTXSettings_SetRTXQuality Parms{};

	Parms.Quality = Quality;

	UObject::ProcessEvent(Func, &Parms);
}


// Function CustomLightSystem.CLSSkyLight.SetVisibility
// (Final, Native, Public, Const)
// Parameters:
// bool                                    bNewVisibility                                         (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void ACLSSkyLight::SetVisibility(bool bNewVisibility) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CLSSkyLight", "SetVisibility");

	Params::CLSSkyLight_SetVisibility Parms{};

	Parms.bNewVisibility = bNewVisibility;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function CustomLightSystem.CLSTagComponent.InitializeManager
// (Final, Native, Public)

void UCLSTagComponent::InitializeManager()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CLSTagComponent", "InitializeManager");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function CustomLightSystem.CLSVolumeManager.CheckOverlapVolumes
// (Final, Native, Public, HasDefaults)
// Parameters:
// struct FVector                          Position                                               (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// TArray<class ACLSBaseVolume*>           ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, NativeAccessSpecifierPublic)

TArray<class ACLSBaseVolume*> ACLSVolumeManager::CheckOverlapVolumes(const struct FVector& Position)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CLSVolumeManager", "CheckOverlapVolumes");

	Params::CLSVolumeManager_CheckOverlapVolumes Parms{};

	Parms.Position = std::move(Position);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function CustomLightSystem.CLSVolumeManager.CheckReforenceVolumeListValid
// (Final, Native, Public)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool ACLSVolumeManager::CheckReforenceVolumeListValid()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CLSVolumeManager", "CheckReforenceVolumeListValid");

	Params::CLSVolumeManager_CheckReforenceVolumeListValid Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function CustomLightSystem.CLSVolumeManager.CheckValidByWeight
// (Final, Native, Public, HasDefaults)
// Parameters:
// struct FVector                          Position                                               (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool ACLSVolumeManager::CheckValidByWeight(const struct FVector& Position)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CLSVolumeManager", "CheckValidByWeight");

	Params::CLSVolumeManager_CheckValidByWeight Parms{};

	Parms.Position = std::move(Position);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function CustomLightSystem.CLSVolumeManager.ForceDortPPV
// (Final, Native, Public, HasDefaults)
// Parameters:
// struct FVector                          ViewLocation                                           (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void ACLSVolumeManager::ForceDortPPV(const struct FVector& ViewLocation)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CLSVolumeManager", "ForceDortPPV");

	Params::CLSVolumeManager_ForceDortPPV Parms{};

	Parms.ViewLocation = std::move(ViewLocation);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function CustomLightSystem.CLSVolumeManager.GetValidVolumeByWeight
// (Final, Native, Public, HasDefaults, BlueprintCallable)
// Parameters:
// struct FVector                          Position                                               (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// TMap<class ACLSBaseVolume*, float>      ReturnValue                                            (Parm, OutParm, ReturnParm, NativeAccessSpecifierPublic)

TMap<class ACLSBaseVolume*, float> ACLSVolumeManager::GetValidVolumeByWeight(const struct FVector& Position)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CLSVolumeManager", "GetValidVolumeByWeight");

	Params::CLSVolumeManager_GetValidVolumeByWeight Parms{};

	Parms.Position = std::move(Position);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function CustomLightSystem.CLSVolumeManager.InitializeVolumes
// (Final, Native, Public)
// Parameters:
// class ACLSBaseVolume*                   InVolume                                               (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void ACLSVolumeManager::InitializeVolumes(class ACLSBaseVolume* InVolume)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CLSVolumeManager", "InitializeVolumes");

	Params::CLSVolumeManager_InitializeVolumes Parms{};

	Parms.InVolume = InVolume;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function CustomLightSystem.CLSVolumeManager.SetLightManagerActive
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// bool                                    NewActive                                              (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void ACLSVolumeManager::SetLightManagerActive(bool NewActive)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CLSVolumeManager", "SetLightManagerActive");

	Params::CLSVolumeManager_SetLightManagerActive Parms{};

	Parms.NewActive = NewActive;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function CustomLightSystem.CLSVolumeManager.SwitchToValidLightAndFog
// (Final, Native, Public, HasDefaults)
// Parameters:
// struct FVector                          Position                                               (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void ACLSVolumeManager::SwitchToValidLightAndFog(const struct FVector& Position)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CLSVolumeManager", "SwitchToValidLightAndFog");

	Params::CLSVolumeManager_SwitchToValidLightAndFog Parms{};

	Parms.Position = std::move(Position);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function CustomLightSystem.CLSVolumeManager.UpdateProperty
// (Final, Native, Public)

void ACLSVolumeManager::UpdateProperty()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CLSVolumeManager", "UpdateProperty");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function CustomLightSystem.CLSVolumeManager.UpdateVolume
// (Final, Native, Public, HasDefaults)
// Parameters:
// struct FVector                          Position                                               (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void ACLSVolumeManager::UpdateVolume(const struct FVector& Position)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CLSVolumeManager", "UpdateVolume");

	Params::CLSVolumeManager_UpdateVolume Parms{};

	Parms.Position = std::move(Position);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function CustomLightSystem.CLSVolumeManager.RunVolumeProcessParameterCommand
// (Final, Native, Public, Const)
// Parameters:
// class FString                           TargetParameter                                        (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void ACLSVolumeManager::RunVolumeProcessParameterCommand(const class FString& TargetParameter) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CLSVolumeManager", "RunVolumeProcessParameterCommand");

	Params::CLSVolumeManager_RunVolumeProcessParameterCommand Parms{};

	Parms.TargetParameter = std::move(TargetParameter);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function CustomLightSystem.CLSVolumeManager.SwitchVolumeProcessParameters
// (Final, Native, Public, Const)
// Parameters:
// class ACLSBaseVolume*                   TargetVolume                                           (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void ACLSVolumeManager::SwitchVolumeProcessParameters(class ACLSBaseVolume* TargetVolume) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CLSVolumeManager", "SwitchVolumeProcessParameters");

	Params::CLSVolumeManager_SwitchVolumeProcessParameters Parms{};

	Parms.TargetVolume = TargetVolume;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}

}

