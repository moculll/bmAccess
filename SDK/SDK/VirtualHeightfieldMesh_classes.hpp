#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: VirtualHeightfieldMesh

#include "Basic.hpp"

#include "CoreUObject_structs.hpp"
#include "CoreUObject_classes.hpp"
#include "Engine_classes.hpp"


namespace SDK
{

// Class VirtualHeightfieldMesh.HeightfieldMinMaxTexture
// 0x0048 (0x0070 - 0x0028)
class UHeightfieldMinMaxTexture final : public UObject
{
public:
	class UTexture2D*                             Texture;                                           // 0x0028(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UTexture2D*                             LodBiasTexture;                                    // 0x0030(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UTexture2D*                             LodBiasMinMaxTexture;                              // 0x0038(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         MaxCPULevels;                                      // 0x0040(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_44[0x4];                                       // 0x0044(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<struct FVector2D>                      TextureData;                                       // 0x0048(0x0010)(ZeroConstructor, NativeAccessSpecifierPublic)
	struct FIntPoint                              TextureDataSize;                                   // 0x0058(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<int32>                                 TextureDataMips;                                   // 0x0060(0x0010)(ZeroConstructor, NativeAccessSpecifierPublic)

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"HeightfieldMinMaxTexture">();
	}
	static class UHeightfieldMinMaxTexture* GetDefaultObj()
	{
		return GetDefaultObjImpl<UHeightfieldMinMaxTexture>();
	}
};
//static_assert(alignof(UHeightfieldMinMaxTexture) == 0x000008, "Wrong alignment on UHeightfieldMinMaxTexture");
//static_assert(sizeof(UHeightfieldMinMaxTexture) == 0x000070, "Wrong size on UHeightfieldMinMaxTexture");
//static_assert(offsetof(UHeightfieldMinMaxTexture, Texture) == 0x000028, "Member 'UHeightfieldMinMaxTexture::Texture' has a wrong offset!");
//static_assert(offsetof(UHeightfieldMinMaxTexture, LodBiasTexture) == 0x000030, "Member 'UHeightfieldMinMaxTexture::LodBiasTexture' has a wrong offset!");
//static_assert(offsetof(UHeightfieldMinMaxTexture, LodBiasMinMaxTexture) == 0x000038, "Member 'UHeightfieldMinMaxTexture::LodBiasMinMaxTexture' has a wrong offset!");
//static_assert(offsetof(UHeightfieldMinMaxTexture, MaxCPULevels) == 0x000040, "Member 'UHeightfieldMinMaxTexture::MaxCPULevels' has a wrong offset!");
//static_assert(offsetof(UHeightfieldMinMaxTexture, TextureData) == 0x000048, "Member 'UHeightfieldMinMaxTexture::TextureData' has a wrong offset!");
//static_assert(offsetof(UHeightfieldMinMaxTexture, TextureDataSize) == 0x000058, "Member 'UHeightfieldMinMaxTexture::TextureDataSize' has a wrong offset!");
//static_assert(offsetof(UHeightfieldMinMaxTexture, TextureDataMips) == 0x000060, "Member 'UHeightfieldMinMaxTexture::TextureDataMips' has a wrong offset!");

// Class VirtualHeightfieldMesh.MaterialExpressionHeightfieldMinMaxTexture
// 0x0008 (0x0048 - 0x0040)
class UMaterialExpressionHeightfieldMinMaxTexture final : public UMaterialExpression
{
public:
	class UHeightfieldMinMaxTexture*              MinMaxTexture;                                     // 0x0040(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"MaterialExpressionHeightfieldMinMaxTexture">();
	}
	static class UMaterialExpressionHeightfieldMinMaxTexture* GetDefaultObj()
	{
		return GetDefaultObjImpl<UMaterialExpressionHeightfieldMinMaxTexture>();
	}
};
//static_assert(alignof(UMaterialExpressionHeightfieldMinMaxTexture) == 0x000008, "Wrong alignment on UMaterialExpressionHeightfieldMinMaxTexture");
//static_assert(sizeof(UMaterialExpressionHeightfieldMinMaxTexture) == 0x000048, "Wrong size on UMaterialExpressionHeightfieldMinMaxTexture");
//static_assert(offsetof(UMaterialExpressionHeightfieldMinMaxTexture, MinMaxTexture) == 0x000040, "Member 'UMaterialExpressionHeightfieldMinMaxTexture::MinMaxTexture' has a wrong offset!");

// Class VirtualHeightfieldMesh.VirtualHeightfieldMesh
// 0x0008 (0x0280 - 0x0278)
class AVirtualHeightfieldMesh final : public AActor
{
public:
	class UVirtualHeightfieldMeshComponent*       VirtualHeightfieldMeshComponent;                   // 0x0278(0x0008)(Edit, BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, EditConst, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"VirtualHeightfieldMesh">();
	}
	static class AVirtualHeightfieldMesh* GetDefaultObj()
	{
		return GetDefaultObjImpl<AVirtualHeightfieldMesh>();
	}
};
//static_assert(alignof(AVirtualHeightfieldMesh) == 0x000008, "Wrong alignment on AVirtualHeightfieldMesh");
//static_assert(sizeof(AVirtualHeightfieldMesh) == 0x000280, "Wrong size on AVirtualHeightfieldMesh");
//static_assert(offsetof(AVirtualHeightfieldMesh, VirtualHeightfieldMeshComponent) == 0x000278, "Member 'AVirtualHeightfieldMesh::VirtualHeightfieldMeshComponent' has a wrong offset!");

// Class VirtualHeightfieldMesh.VirtualHeightfieldMeshComponent
// 0x00B0 (0x0610 - 0x0560)
class UVirtualHeightfieldMeshComponent final : public UPrimitiveComponent
{
public:
	TSoftObjectPtr<class ARuntimeVirtualTextureVolume> VirtualTexture;                                    // 0x0558(0x0028)(Edit, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class ARuntimeVirtualTextureVolume*           VirtualTextureRef;                                 // 0x0580(0x0008)(ZeroConstructor, Transient, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UObject*                                VirtualTextureThumbnail;                           // 0x0588(0x0008)(Edit, ZeroConstructor, Transient, EditConst, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	bool                                          bCopyBoundsButton;                                 // 0x0590(0x0001)(Edit, ZeroConstructor, Transient, EditConst, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_591[0x7];                                      // 0x0591(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UHeightfieldMinMaxTexture*              MinMaxTexture;                                     // 0x0598(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	int32                                         NumMinMaxTextureBuildLevels;                       // 0x05A0(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	bool                                          bBuildMinMaxTextureButton;                         // 0x05A4(0x0001)(Edit, ZeroConstructor, Transient, EditConst, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_5A5[0x3];                                      // 0x05A5(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	TSoftObjectPtr<class UTextureRenderTarget2D>  DynamicLodBiasTexture;                             // 0x05A8(0x0028)(Edit, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	struct FVector3f                              DynamicLodBiasSize;                                // 0x05D0(0x000C)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	struct FVector3f                              DynamicLodBiasCenter;                              // 0x05DC(0x000C)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UMaterialInterface*                     Material;                                          // 0x05E8(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	float                                         Lod0ScreenSize;                                    // 0x05F0(0x0004)(Edit, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	float                                         Lod0Distribution;                                  // 0x05F4(0x0004)(Edit, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	float                                         LodDistribution;                                   // 0x05F8(0x0004)(Edit, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	float                                         LodBiasScale;                                      // 0x05FC(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	int32                                         NumForceLoadLods;                                  // 0x0600(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	int32                                         NumOcclusionLods;                                  // 0x0604(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	bool                                          bHiddenInEditor;                                   // 0x0608(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_609[0x7];                                      // 0x0609(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	void SetDynamicLodBiasCenter(const struct FVector3f& Position);
	void SetDynamicLodBiasSize(const struct FVector3f& BiasSize);

	void GatherHideFlags(bool* InOutHidePrimitivesInEditor, bool* InOutHidePrimitivesInGame) const;

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"VirtualHeightfieldMeshComponent">();
	}
	static class UVirtualHeightfieldMeshComponent* GetDefaultObj()
	{
		return GetDefaultObjImpl<UVirtualHeightfieldMeshComponent>();
	}
};
//static_assert(alignof(UVirtualHeightfieldMeshComponent) == 0x000010, "Wrong alignment on UVirtualHeightfieldMeshComponent");
//static_assert(sizeof(UVirtualHeightfieldMeshComponent) == 0x000610, "Wrong size on UVirtualHeightfieldMeshComponent");
//static_assert(offsetof(UVirtualHeightfieldMeshComponent, VirtualTexture) == 0x000558, "Member 'UVirtualHeightfieldMeshComponent::VirtualTexture' has a wrong offset!");
//static_assert(offsetof(UVirtualHeightfieldMeshComponent, VirtualTextureRef) == 0x000580, "Member 'UVirtualHeightfieldMeshComponent::VirtualTextureRef' has a wrong offset!");
//static_assert(offsetof(UVirtualHeightfieldMeshComponent, VirtualTextureThumbnail) == 0x000588, "Member 'UVirtualHeightfieldMeshComponent::VirtualTextureThumbnail' has a wrong offset!");
//static_assert(offsetof(UVirtualHeightfieldMeshComponent, bCopyBoundsButton) == 0x000590, "Member 'UVirtualHeightfieldMeshComponent::bCopyBoundsButton' has a wrong offset!");
//static_assert(offsetof(UVirtualHeightfieldMeshComponent, MinMaxTexture) == 0x000598, "Member 'UVirtualHeightfieldMeshComponent::MinMaxTexture' has a wrong offset!");
//static_assert(offsetof(UVirtualHeightfieldMeshComponent, NumMinMaxTextureBuildLevels) == 0x0005A0, "Member 'UVirtualHeightfieldMeshComponent::NumMinMaxTextureBuildLevels' has a wrong offset!");
//static_assert(offsetof(UVirtualHeightfieldMeshComponent, bBuildMinMaxTextureButton) == 0x0005A4, "Member 'UVirtualHeightfieldMeshComponent::bBuildMinMaxTextureButton' has a wrong offset!");
//static_assert(offsetof(UVirtualHeightfieldMeshComponent, DynamicLodBiasTexture) == 0x0005A8, "Member 'UVirtualHeightfieldMeshComponent::DynamicLodBiasTexture' has a wrong offset!");
//static_assert(offsetof(UVirtualHeightfieldMeshComponent, DynamicLodBiasSize) == 0x0005D0, "Member 'UVirtualHeightfieldMeshComponent::DynamicLodBiasSize' has a wrong offset!");
//static_assert(offsetof(UVirtualHeightfieldMeshComponent, DynamicLodBiasCenter) == 0x0005DC, "Member 'UVirtualHeightfieldMeshComponent::DynamicLodBiasCenter' has a wrong offset!");
//static_assert(offsetof(UVirtualHeightfieldMeshComponent, Material) == 0x0005E8, "Member 'UVirtualHeightfieldMeshComponent::Material' has a wrong offset!");
//static_assert(offsetof(UVirtualHeightfieldMeshComponent, Lod0ScreenSize) == 0x0005F0, "Member 'UVirtualHeightfieldMeshComponent::Lod0ScreenSize' has a wrong offset!");
//static_assert(offsetof(UVirtualHeightfieldMeshComponent, Lod0Distribution) == 0x0005F4, "Member 'UVirtualHeightfieldMeshComponent::Lod0Distribution' has a wrong offset!");
//static_assert(offsetof(UVirtualHeightfieldMeshComponent, LodDistribution) == 0x0005F8, "Member 'UVirtualHeightfieldMeshComponent::LodDistribution' has a wrong offset!");
//static_assert(offsetof(UVirtualHeightfieldMeshComponent, LodBiasScale) == 0x0005FC, "Member 'UVirtualHeightfieldMeshComponent::LodBiasScale' has a wrong offset!");
//static_assert(offsetof(UVirtualHeightfieldMeshComponent, NumForceLoadLods) == 0x000600, "Member 'UVirtualHeightfieldMeshComponent::NumForceLoadLods' has a wrong offset!");
//static_assert(offsetof(UVirtualHeightfieldMeshComponent, NumOcclusionLods) == 0x000604, "Member 'UVirtualHeightfieldMeshComponent::NumOcclusionLods' has a wrong offset!");
//static_assert(offsetof(UVirtualHeightfieldMeshComponent, bHiddenInEditor) == 0x000608, "Member 'UVirtualHeightfieldMeshComponent::bHiddenInEditor' has a wrong offset!");

}

