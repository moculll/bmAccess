#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: BP_RTX_Parameter_Interface

#include "Basic.hpp"

#include "BP_RTX_Parameter_Interface_classes.hpp"
#include "BP_RTX_Parameter_Interface_parameters.hpp"


namespace SDK
{

// Function BP_RTX_Parameter_Interface.BP_RTX_Parameter_Interface_C.Enable_DLSS_RR
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// bool                                    Enable_DLSSD                                           (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void IBP_RTX_Parameter_Interface_C::Enable_DLSS_RR(bool Enable_DLSSD)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_RTX_Parameter_Interface_C", "Enable_DLSS_RR");

	Params::BP_RTX_Parameter_Interface_C_Enable_DLSS_RR Parms{};

	Parms.Enable_DLSSD = Enable_DLSSD;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_RTX_Parameter_Interface.BP_RTX_Parameter_Interface_C.RTX_Force_Override
// (Public, BlueprintCallable, BlueprintEvent)

void IBP_RTX_Parameter_Interface_C::RTX_Force_Override()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_RTX_Parameter_Interface_C", "RTX_Force_Override");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_RTX_Parameter_Interface.BP_RTX_Parameter_Interface_C.RTX_Switch_DLSS_From_UI
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// class FString                           AA_Method                                              (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, HasGetValueTypeHash)
// class FString                           DLSS_Quality                                           (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, HasGetValueTypeHash)
// bool                                    Enable_Override_From_UI                                (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void IBP_RTX_Parameter_Interface_C::RTX_Switch_DLSS_From_UI(const class FString& AA_Method, const class FString& DLSS_Quality, bool Enable_Override_From_UI)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_RTX_Parameter_Interface_C", "RTX_Switch_DLSS_From_UI");

	Params::BP_RTX_Parameter_Interface_C_RTX_Switch_DLSS_From_UI Parms{};

	Parms.AA_Method = std::move(AA_Method);
	Parms.DLSS_Quality = std::move(DLSS_Quality);
	Parms.Enable_Override_From_UI = Enable_Override_From_UI;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_RTX_Parameter_Interface.BP_RTX_Parameter_Interface_C.RTX_Switch_Preset_From_UI
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// Enum_RT_Quality_Preset                  RTX_Preset                                             (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void IBP_RTX_Parameter_Interface_C::RTX_Switch_Preset_From_UI(Enum_RT_Quality_Preset RTX_Preset)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_RTX_Parameter_Interface_C", "RTX_Switch_Preset_From_UI");

	Params::BP_RTX_Parameter_Interface_C_RTX_Switch_Preset_From_UI Parms{};

	Parms.RTX_Preset = RTX_Preset;

	UObject::ProcessEvent(Func, &Parms);
}

}

