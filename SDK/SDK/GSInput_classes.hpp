#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: GSInput

#include "Basic.hpp"

#include "CoreUObject_structs.hpp"
#include "CoreUObject_classes.hpp"
#include "GSInput_structs.hpp"
#include "SlateCore_structs.hpp"
#include "Engine_classes.hpp"
#include "EnhancedInput_structs.hpp"
#include "EnhancedInput_classes.hpp"
#include "InputCore_structs.hpp"
#include "UMG_classes.hpp"


namespace SDK
{

// Class GSInput.GSInputDisplaySetting
// 0x0018 (0x0040 - 0x0028)
class UGSInputDisplaySetting final : public UObject
{
public:
	bool                                          IsLock;                                            // 0x0028(0x0001)(Edit, ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          IsShow;                                            // 0x0029(0x0001)(Edit, ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2A[0x2];                                       // 0x002A(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         CurScaleRate;                                      // 0x002C(0x0004)(Edit, ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector2D                              CurPosition;                                       // 0x0030(0x0010)(Edit, ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"GSInputDisplaySetting">();
	}
	static class UGSInputDisplaySetting* GetDefaultObj()
	{
		return GetDefaultObjImpl<UGSInputDisplaySetting>();
	}
};
//static_assert(alignof(UGSInputDisplaySetting) == 0x000008, "Wrong alignment on UGSInputDisplaySetting");
//static_assert(sizeof(UGSInputDisplaySetting) == 0x000040, "Wrong size on UGSInputDisplaySetting");
//static_assert(offsetof(UGSInputDisplaySetting, IsLock) == 0x000028, "Member 'UGSInputDisplaySetting::IsLock' has a wrong offset!");
//static_assert(offsetof(UGSInputDisplaySetting, IsShow) == 0x000029, "Member 'UGSInputDisplaySetting::IsShow' has a wrong offset!");
//static_assert(offsetof(UGSInputDisplaySetting, CurScaleRate) == 0x00002C, "Member 'UGSInputDisplaySetting::CurScaleRate' has a wrong offset!");
//static_assert(offsetof(UGSInputDisplaySetting, CurPosition) == 0x000030, "Member 'UGSInputDisplaySetting::CurPosition' has a wrong offset!");

// Class GSInput.GSE_InputFuncLib
// 0x0000 (0x0028 - 0x0028)
class UGSE_InputFuncLib final : public UObject
{
public:
	static void AddInputMappingContext(class APlayerController* PlayerController, const class UInputMappingContext* InputMappingContext, int32 Priority, bool bIgnoreAllPressedKeysUntilRelease, bool bForceImmediately);
	static void AddPlayerMappedKey(class APlayerController* PlayerController, const class FName MappingName, const struct FKey& NewKey, const struct FModifyContextOptions& Options);
	static void BindAction(class UGSInputComponent* InputComponent, const class UInputAction* InputAction, ETriggerEvent TriggerEvent);
	static void ClearAllInputMappingContext(class APlayerController* PlayerController);
	static void CustomizeInputMappingContext(class UInputMappingContext* MappingContext, class FName MappableName, class FName KeyName);
	static struct FKey FindKeyByName(class FName KeyName);
	static void FlushPressedInput(class APlayerController* PlayerController);
	static TArray<class FString> GetActionNamesFromInputMappingContext(class UInputMappingContext* InputMappingContext);
	static TArray<class UInputAction*> GetChordInputAction(const class UInputMappingContext* InputMappingContext);
	static void GetConflictChordInputAction(const class UInputAction* PrimaryChordAction, const TArray<class UInputMappingContext*>& Contexts, TArray<class UInputAction*>* PrimaryConflictActions, TArray<class UInputAction*>* SecondaryConflictActions);
	static int32 GetDebugEventAccumulatorThisTick(class APlayerController* PlayerController, const class UInputAction* Action, bool IsReleasedEvent);
	static class FString GetGamepadControllerName(int32 ControllerId);
	static float GetGamepadDeadZoneThreshold();
	static struct FVector GetInputActionValue(class APlayerController* PlayerController, const class UInputAction* Action);
	static TArray<EGSInputDeviceType> GetInputDeviceTypes();
	static class UGSInputPreProc* GetInputPreProc(const class UObject* WorldContext);
	static class UGSInputSettingPreProc* GetInputSettingPreProc(const class UObject* WorldContext);
	static class FName GetKeyByAnalogInputEvent(const struct FAnalogInputEvent& AnalogInputEvent);
	static class FName GetKeyByKeyEvent(const struct FKeyEvent& KeyEvent);
	static class FName GetKeyByPointerEvent(const struct FPointerEvent& PointerEvent);
	static EGSInputType GetLastInputType(const class UObject* WorldContext);
	static TMap<class FName, struct FKey> GetMappableKey(const class UInputMappingContext* MappingContext);
	static void GetMappingsInfo(const class UInputMappingContext* MappingContext, TArray<class UInputAction*>* Actions, TArray<struct FKey>* Keys, TArray<class UInputAction*>* ChordActions);
	static TArray<class FString> GetProductStringList();
	static bool IsAppActive();
	static bool IsConsoleActive(const class UObject* WorldContext);
	static TArray<struct FKey> QueryKeysByInputAction(const class UInputMappingContext* MappingContext, const class UInputAction* Action);
	static TArray<struct FKey> QueryKeysMappedToAction(class APlayerController* PlayerController, const class UInputAction* Action);
	static void RegisterGSInputProc(const class UObject* WorldContext, EGSInputProcOrder Order);
	static void RegisterInputTargetBinding(class UGSInputTargetBinding* InputTargetBindingObj);
	static void RemoveInputMappingContext(class APlayerController* PlayerController, const class UInputMappingContext* InputMappingContext, bool bIgnoreAllPressedKeysUntilRelease, bool bForceImmediately);
	static void RequestRebuildControlMappings(const class APlayerController* PlayerController, bool bForceImmediately, bool bIgnoreAllPressedKeysUntilRelease);
	static void SetCursorVisibility(bool bDrawCursor);
	static void SetGameOnly(class APlayerController* PlayerController);
	static void SetIgnoreAllButtonKeyInput(const class UObject* WorldContext, bool IsIgnore);
	static void SetMouseCursorPosition(const struct FVector2D& Position);
	static void SetUIOnly(class APlayerController* PlayerController, bool bNeedMouseCapture);
	static bool TryToSetContextNewPriority(class APlayerController* PlayerController, const class UInputMappingContext* Context, int32 NewPriority);
	static void UnRegisterGSInputProc(const class UObject* WorldContext, EGSInputProcOrder Order);
	static void UnRegisterInputTargetBinding(class UGSInputTargetBinding* InputTargetBindingObj);
	static void UpdateAllInputIcon();

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"GSE_InputFuncLib">();
	}
	static class UGSE_InputFuncLib* GetDefaultObj()
	{
		return GetDefaultObjImpl<UGSE_InputFuncLib>();
	}
};
//static_assert(alignof(UGSE_InputFuncLib) == 0x000008, "Wrong alignment on UGSE_InputFuncLib");
//static_assert(sizeof(UGSE_InputFuncLib) == 0x000028, "Wrong size on UGSE_InputFuncLib");

// Class GSInput.GSInputDisplayWidget
// 0x00E8 (0x0380 - 0x0298)
class UGSInputDisplayWidget final : public UUserWidget
{
public:
	EInputDisplayType                             InputDisplayType;                                  // 0x0298(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_299[0x7];                                      // 0x0299(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FKey                                   BindButtonKey;                                     // 0x02A0(0x0018)(Edit, BlueprintVisible, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FKey                                   BindXKey;                                          // 0x02B8(0x0018)(Edit, BlueprintVisible, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FKey                                   BindYKey;                                          // 0x02D0(0x0018)(Edit, BlueprintVisible, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 ShowText_1;                                        // 0x02E8(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 ShowText_2;                                        // 0x02F8(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         JoystickMoveLength;                                // 0x0308(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_30C[0x74];                                     // 0x030C(0x0074)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	void SetAxisValue(const struct FKey& InKey, float InAxisValue);
	void SetIsPress(bool InIsPress);
	void SetMousePos(const struct FVector2D& InMousePos);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"GSInputDisplayWidget">();
	}
	static class UGSInputDisplayWidget* GetDefaultObj()
	{
		return GetDefaultObjImpl<UGSInputDisplayWidget>();
	}
};
//static_assert(alignof(UGSInputDisplayWidget) == 0x000008, "Wrong alignment on UGSInputDisplayWidget");
//static_assert(sizeof(UGSInputDisplayWidget) == 0x000380, "Wrong size on UGSInputDisplayWidget");
//static_assert(offsetof(UGSInputDisplayWidget, InputDisplayType) == 0x000298, "Member 'UGSInputDisplayWidget::InputDisplayType' has a wrong offset!");
//static_assert(offsetof(UGSInputDisplayWidget, BindButtonKey) == 0x0002A0, "Member 'UGSInputDisplayWidget::BindButtonKey' has a wrong offset!");
//static_assert(offsetof(UGSInputDisplayWidget, BindXKey) == 0x0002B8, "Member 'UGSInputDisplayWidget::BindXKey' has a wrong offset!");
//static_assert(offsetof(UGSInputDisplayWidget, BindYKey) == 0x0002D0, "Member 'UGSInputDisplayWidget::BindYKey' has a wrong offset!");
//static_assert(offsetof(UGSInputDisplayWidget, ShowText_1) == 0x0002E8, "Member 'UGSInputDisplayWidget::ShowText_1' has a wrong offset!");
//static_assert(offsetof(UGSInputDisplayWidget, ShowText_2) == 0x0002F8, "Member 'UGSInputDisplayWidget::ShowText_2' has a wrong offset!");
//static_assert(offsetof(UGSInputDisplayWidget, JoystickMoveLength) == 0x000308, "Member 'UGSInputDisplayWidget::JoystickMoveLength' has a wrong offset!");

// Class GSInput.GSInputActionIcon
// 0x00D0 (0x0360 - 0x0290)
class UGSInputActionIcon final : public UImage
{
public:
	uint8                                         Pad_290[0x8];                                      // 0x0290(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         SpeedRatioOnStopHold;                              // 0x0298(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_29C[0x4];                                      // 0x029C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UTexture2D*                             InputIconTexture;                                  // 0x02A0(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UInputAction*                           InputAction;                                       // 0x02A8(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	TArray<class UInputAction*>                   ExtraInputActions;                                 // 0x02B0(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Protected, NativeAccessSpecifierProtected)
	EGSInputIconShowType                          IconShowType;                                      // 0x02C0(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	bool                                          bShouldApplyOffset;                                // 0x02C1(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_2C2[0x2];                                      // 0x02C2(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         IconScale;                                         // 0x02C4(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	EGSComboOnlyShowOneType                       ComboIconOnlyShowOneType;                          // 0x02C8(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_2C9[0x97];                                     // 0x02C9(0x0097)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	void BeginHold(const float InTotalTime);
	void OpenPercentBg(bool bOpen);
	void Reset();
	void SetInputAction(class UInputAction* InputAction_0);
	void SetPercent(const float InPercent);
	void StopHold();

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"GSInputActionIcon">();
	}
	static class UGSInputActionIcon* GetDefaultObj()
	{
		return GetDefaultObjImpl<UGSInputActionIcon>();
	}
};
//static_assert(alignof(UGSInputActionIcon) == 0x000010, "Wrong alignment on UGSInputActionIcon");
//static_assert(sizeof(UGSInputActionIcon) == 0x000360, "Wrong size on UGSInputActionIcon");
//static_assert(offsetof(UGSInputActionIcon, SpeedRatioOnStopHold) == 0x000298, "Member 'UGSInputActionIcon::SpeedRatioOnStopHold' has a wrong offset!");
//static_assert(offsetof(UGSInputActionIcon, InputIconTexture) == 0x0002A0, "Member 'UGSInputActionIcon::InputIconTexture' has a wrong offset!");
//static_assert(offsetof(UGSInputActionIcon, InputAction) == 0x0002A8, "Member 'UGSInputActionIcon::InputAction' has a wrong offset!");
//static_assert(offsetof(UGSInputActionIcon, ExtraInputActions) == 0x0002B0, "Member 'UGSInputActionIcon::ExtraInputActions' has a wrong offset!");
//static_assert(offsetof(UGSInputActionIcon, IconShowType) == 0x0002C0, "Member 'UGSInputActionIcon::IconShowType' has a wrong offset!");
//static_assert(offsetof(UGSInputActionIcon, bShouldApplyOffset) == 0x0002C1, "Member 'UGSInputActionIcon::bShouldApplyOffset' has a wrong offset!");
//static_assert(offsetof(UGSInputActionIcon, IconScale) == 0x0002C4, "Member 'UGSInputActionIcon::IconScale' has a wrong offset!");
//static_assert(offsetof(UGSInputActionIcon, ComboIconOnlyShowOneType) == 0x0002C8, "Member 'UGSInputActionIcon::ComboIconOnlyShowOneType' has a wrong offset!");

// Class GSInput.GSInputGameViewportClient
// 0x0000 (0x03A0 - 0x03A0)
class UGSInputGameViewportClient final : public UGameViewportClient
{
public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"GSInputGameViewportClient">();
	}
	static class UGSInputGameViewportClient* GetDefaultObj()
	{
		return GetDefaultObjImpl<UGSInputGameViewportClient>();
	}
};
//static_assert(alignof(UGSInputGameViewportClient) == 0x000008, "Wrong alignment on UGSInputGameViewportClient");
//static_assert(sizeof(UGSInputGameViewportClient) == 0x0003A0, "Wrong size on UGSInputGameViewportClient");

// Class GSInput.GSInputComponent
// 0x0000 (0x0168 - 0x0168)
class UGSInputComponent final : public UEnhancedInputComponent
{
public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"GSInputComponent">();
	}
	static class UGSInputComponent* GetDefaultObj()
	{
		return GetDefaultObjImpl<UGSInputComponent>();
	}
};
//static_assert(alignof(UGSInputComponent) == 0x000008, "Wrong alignment on UGSInputComponent");
//static_assert(sizeof(UGSInputComponent) == 0x000168, "Wrong size on UGSInputComponent");

// Class GSInput.GSInputDisplayPreProc
// 0x0080 (0x00A8 - 0x0028)
class UGSInputDisplayPreProc final : public UObject
{
public:
	FMulticastInlineDelegateProperty_             OnInputKeyDownDelegate;                            // 0x0028(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	FMulticastInlineDelegateProperty_             OnInputKeyUpDelegate;                              // 0x0038(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	FMulticastInlineDelegateProperty_             OnInputAxisChangeDelegate;                         // 0x0048(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	FMulticastInlineDelegateProperty_             OnInputMouseMoveDelegate;                          // 0x0058(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	FMulticastInlineDelegateProperty_             OnInputMouseButtonDownDelegate;                    // 0x0068(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	FMulticastInlineDelegateProperty_             OnInputMouseButtonUpDelegate;                      // 0x0078(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	FMulticastInlineDelegateProperty_             OnInputMouseButtonDoubleClickDelegate;             // 0x0088(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	FMulticastInlineDelegateProperty_             OnInputMouseWheelOrGestureDelegate;                // 0x0098(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"GSInputDisplayPreProc">();
	}
	static class UGSInputDisplayPreProc* GetDefaultObj()
	{
		return GetDefaultObjImpl<UGSInputDisplayPreProc>();
	}
};
//static_assert(alignof(UGSInputDisplayPreProc) == 0x000008, "Wrong alignment on UGSInputDisplayPreProc");
//static_assert(sizeof(UGSInputDisplayPreProc) == 0x0000A8, "Wrong size on UGSInputDisplayPreProc");
//static_assert(offsetof(UGSInputDisplayPreProc, OnInputKeyDownDelegate) == 0x000028, "Member 'UGSInputDisplayPreProc::OnInputKeyDownDelegate' has a wrong offset!");
//static_assert(offsetof(UGSInputDisplayPreProc, OnInputKeyUpDelegate) == 0x000038, "Member 'UGSInputDisplayPreProc::OnInputKeyUpDelegate' has a wrong offset!");
//static_assert(offsetof(UGSInputDisplayPreProc, OnInputAxisChangeDelegate) == 0x000048, "Member 'UGSInputDisplayPreProc::OnInputAxisChangeDelegate' has a wrong offset!");
//static_assert(offsetof(UGSInputDisplayPreProc, OnInputMouseMoveDelegate) == 0x000058, "Member 'UGSInputDisplayPreProc::OnInputMouseMoveDelegate' has a wrong offset!");
//static_assert(offsetof(UGSInputDisplayPreProc, OnInputMouseButtonDownDelegate) == 0x000068, "Member 'UGSInputDisplayPreProc::OnInputMouseButtonDownDelegate' has a wrong offset!");
//static_assert(offsetof(UGSInputDisplayPreProc, OnInputMouseButtonUpDelegate) == 0x000078, "Member 'UGSInputDisplayPreProc::OnInputMouseButtonUpDelegate' has a wrong offset!");
//static_assert(offsetof(UGSInputDisplayPreProc, OnInputMouseButtonDoubleClickDelegate) == 0x000088, "Member 'UGSInputDisplayPreProc::OnInputMouseButtonDoubleClickDelegate' has a wrong offset!");
//static_assert(offsetof(UGSInputDisplayPreProc, OnInputMouseWheelOrGestureDelegate) == 0x000098, "Member 'UGSInputDisplayPreProc::OnInputMouseWheelOrGestureDelegate' has a wrong offset!");

// Class GSInput.GSInputDisplayUI
// 0x0148 (0x03E0 - 0x0298)
class UGSInputDisplayUI final : public UUserWidget
{
public:
	bool                                          IsCanSetting;                                      // 0x0298(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_299[0x7];                                      // 0x0299(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector2D                              NormalSize;                                        // 0x02A0(0x0010)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         ChangeScaleSpeed;                                  // 0x02B0(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         MaxScaleRate;                                      // 0x02B4(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         MinScaleRate;                                      // 0x02B8(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2BC[0x4];                                      // 0x02BC(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UCanvasPanel*                           PosCon;                                            // 0x02C0(0x0008)(BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UCanvasPanel*                           GamepadCon;                                        // 0x02C8(0x0008)(BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UCanvasPanel*                           KeyboardCon;                                       // 0x02D0(0x0008)(BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2D8[0x108];                                    // 0x02D8(0x0108)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	void OnInputAxisChange(const struct FKey& InKey, float InAxisValue);
	void OnInputKeyDown(const struct FKey& InKey);
	void OnInputKeyUp(const struct FKey& InKey);
	void OnInputMouseButtonDoubleClick(const struct FKey& InKey);
	void OnInputMouseButtonDown(const struct FKey& InKey);
	void OnInputMouseButtonUp(const struct FKey& InKey);
	void OnInputMouseMove(const struct FVector2D& InMousePos);
	void OnInputMouseWheelOrGesture(float InWheelDelta);
	void ResetSetting();
	void SetIsShow(bool IsShow);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"GSInputDisplayUI">();
	}
	static class UGSInputDisplayUI* GetDefaultObj()
	{
		return GetDefaultObjImpl<UGSInputDisplayUI>();
	}
};
//static_assert(alignof(UGSInputDisplayUI) == 0x000008, "Wrong alignment on UGSInputDisplayUI");
//static_assert(sizeof(UGSInputDisplayUI) == 0x0003E0, "Wrong size on UGSInputDisplayUI");
//static_assert(offsetof(UGSInputDisplayUI, IsCanSetting) == 0x000298, "Member 'UGSInputDisplayUI::IsCanSetting' has a wrong offset!");
//static_assert(offsetof(UGSInputDisplayUI, NormalSize) == 0x0002A0, "Member 'UGSInputDisplayUI::NormalSize' has a wrong offset!");
//static_assert(offsetof(UGSInputDisplayUI, ChangeScaleSpeed) == 0x0002B0, "Member 'UGSInputDisplayUI::ChangeScaleSpeed' has a wrong offset!");
//static_assert(offsetof(UGSInputDisplayUI, MaxScaleRate) == 0x0002B4, "Member 'UGSInputDisplayUI::MaxScaleRate' has a wrong offset!");
//static_assert(offsetof(UGSInputDisplayUI, MinScaleRate) == 0x0002B8, "Member 'UGSInputDisplayUI::MinScaleRate' has a wrong offset!");
//static_assert(offsetof(UGSInputDisplayUI, PosCon) == 0x0002C0, "Member 'UGSInputDisplayUI::PosCon' has a wrong offset!");
//static_assert(offsetof(UGSInputDisplayUI, GamepadCon) == 0x0002C8, "Member 'UGSInputDisplayUI::GamepadCon' has a wrong offset!");
//static_assert(offsetof(UGSInputDisplayUI, KeyboardCon) == 0x0002D0, "Member 'UGSInputDisplayUI::KeyboardCon' has a wrong offset!");

// Class GSInput.GSInputModifierForceSetValue
// 0x0020 (0x0048 - 0x0028)
class UGSInputModifierForceSetValue final : public UInputModifier
{
public:
	EInputActionValueType                         Type;                                              // 0x0028(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_29[0x7];                                       // 0x0029(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                Value;                                             // 0x0030(0x0018)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"GSInputModifierForceSetValue">();
	}
	static class UGSInputModifierForceSetValue* GetDefaultObj()
	{
		return GetDefaultObjImpl<UGSInputModifierForceSetValue>();
	}
};
//static_assert(alignof(UGSInputModifierForceSetValue) == 0x000008, "Wrong alignment on UGSInputModifierForceSetValue");
//static_assert(sizeof(UGSInputModifierForceSetValue) == 0x000048, "Wrong size on UGSInputModifierForceSetValue");
//static_assert(offsetof(UGSInputModifierForceSetValue, Type) == 0x000028, "Member 'UGSInputModifierForceSetValue::Type' has a wrong offset!");
//static_assert(offsetof(UGSInputModifierForceSetValue, Value) == 0x000030, "Member 'UGSInputModifierForceSetValue::Value' has a wrong offset!");

// Class GSInput.GSInputPreProc
// 0x00B0 (0x00D8 - 0x0028)
class UGSInputPreProc final : public UObject
{
public:
	FMulticastInlineDelegateProperty_             OnInputTrigger;                                    // 0x0028(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	FMulticastInlineDelegateProperty_             OnInputTypeChangeTrigger;                          // 0x0038(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	FMulticastInlineDelegateProperty_             OnKeyDownEvent;                                    // 0x0048(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	FMulticastInlineDelegateProperty_             OnKeyUpEvent;                                      // 0x0058(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	FMulticastInlineDelegateProperty_             OnAnalogInputEvent;                                // 0x0068(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	FMulticastInlineDelegateProperty_             OnMouseMoveEvent;                                  // 0x0078(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	FMulticastInlineDelegateProperty_             OnMouseButtonDownEvent;                            // 0x0088(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	FMulticastInlineDelegateProperty_             OnMouseButtonUpEvent;                              // 0x0098(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	FMulticastInlineDelegateProperty_             OnMouseButtonDoubleClickEvent;                     // 0x00A8(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	FMulticastInlineDelegateProperty_             OnMouseWheelEvent;                                 // 0x00B8(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	FMulticastInlineDelegateProperty_             OnAnyKeyTriggerEvent;                              // 0x00C8(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"GSInputPreProc">();
	}
	static class UGSInputPreProc* GetDefaultObj()
	{
		return GetDefaultObjImpl<UGSInputPreProc>();
	}
};
//static_assert(alignof(UGSInputPreProc) == 0x000008, "Wrong alignment on UGSInputPreProc");
//static_assert(sizeof(UGSInputPreProc) == 0x0000D8, "Wrong size on UGSInputPreProc");
//static_assert(offsetof(UGSInputPreProc, OnInputTrigger) == 0x000028, "Member 'UGSInputPreProc::OnInputTrigger' has a wrong offset!");
//static_assert(offsetof(UGSInputPreProc, OnInputTypeChangeTrigger) == 0x000038, "Member 'UGSInputPreProc::OnInputTypeChangeTrigger' has a wrong offset!");
//static_assert(offsetof(UGSInputPreProc, OnKeyDownEvent) == 0x000048, "Member 'UGSInputPreProc::OnKeyDownEvent' has a wrong offset!");
//static_assert(offsetof(UGSInputPreProc, OnKeyUpEvent) == 0x000058, "Member 'UGSInputPreProc::OnKeyUpEvent' has a wrong offset!");
//static_assert(offsetof(UGSInputPreProc, OnAnalogInputEvent) == 0x000068, "Member 'UGSInputPreProc::OnAnalogInputEvent' has a wrong offset!");
//static_assert(offsetof(UGSInputPreProc, OnMouseMoveEvent) == 0x000078, "Member 'UGSInputPreProc::OnMouseMoveEvent' has a wrong offset!");
//static_assert(offsetof(UGSInputPreProc, OnMouseButtonDownEvent) == 0x000088, "Member 'UGSInputPreProc::OnMouseButtonDownEvent' has a wrong offset!");
//static_assert(offsetof(UGSInputPreProc, OnMouseButtonUpEvent) == 0x000098, "Member 'UGSInputPreProc::OnMouseButtonUpEvent' has a wrong offset!");
//static_assert(offsetof(UGSInputPreProc, OnMouseButtonDoubleClickEvent) == 0x0000A8, "Member 'UGSInputPreProc::OnMouseButtonDoubleClickEvent' has a wrong offset!");
//static_assert(offsetof(UGSInputPreProc, OnMouseWheelEvent) == 0x0000B8, "Member 'UGSInputPreProc::OnMouseWheelEvent' has a wrong offset!");
//static_assert(offsetof(UGSInputPreProc, OnAnyKeyTriggerEvent) == 0x0000C8, "Member 'UGSInputPreProc::OnAnyKeyTriggerEvent' has a wrong offset!");

// Class GSInput.GSInputSettingPreProc
// 0x0040 (0x0068 - 0x0028)
class UGSInputSettingPreProc final : public UObject
{
public:
	FMulticastInlineDelegateProperty_             OnKeyDownEvent;                                    // 0x0028(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	FMulticastInlineDelegateProperty_             OnKeyUpEvent;                                      // 0x0038(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	FMulticastInlineDelegateProperty_             OnMouseButtonDownEvent;                            // 0x0048(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	FMulticastInlineDelegateProperty_             OnMouseButtonUpEvent;                              // 0x0058(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"GSInputSettingPreProc">();
	}
	static class UGSInputSettingPreProc* GetDefaultObj()
	{
		return GetDefaultObjImpl<UGSInputSettingPreProc>();
	}
};
//static_assert(alignof(UGSInputSettingPreProc) == 0x000008, "Wrong alignment on UGSInputSettingPreProc");
//static_assert(sizeof(UGSInputSettingPreProc) == 0x000068, "Wrong size on UGSInputSettingPreProc");
//static_assert(offsetof(UGSInputSettingPreProc, OnKeyDownEvent) == 0x000028, "Member 'UGSInputSettingPreProc::OnKeyDownEvent' has a wrong offset!");
//static_assert(offsetof(UGSInputSettingPreProc, OnKeyUpEvent) == 0x000038, "Member 'UGSInputSettingPreProc::OnKeyUpEvent' has a wrong offset!");
//static_assert(offsetof(UGSInputSettingPreProc, OnMouseButtonDownEvent) == 0x000048, "Member 'UGSInputSettingPreProc::OnMouseButtonDownEvent' has a wrong offset!");
//static_assert(offsetof(UGSInputSettingPreProc, OnMouseButtonUpEvent) == 0x000058, "Member 'UGSInputSettingPreProc::OnMouseButtonUpEvent' has a wrong offset!");

// Class GSInput.GSInputRichTextBlock
// 0x0000 (0x08C0 - 0x08C0)
class UGSInputRichTextBlock final : public URichTextBlock
{
public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"GSInputRichTextBlock">();
	}
	static class UGSInputRichTextBlock* GetDefaultObj()
	{
		return GetDefaultObjImpl<UGSInputRichTextBlock>();
	}
};
//static_assert(alignof(UGSInputRichTextBlock) == 0x000010, "Wrong alignment on UGSInputRichTextBlock");
//static_assert(sizeof(UGSInputRichTextBlock) == 0x0008C0, "Wrong size on UGSInputRichTextBlock");

// Class GSInput.GSInputSettings
// 0x0008 (0x0038 - 0x0030)
class UGSInputSettings final : public UDataAsset
{
public:
	float                                         KeyboardMouseDeadZoneThreshold;                    // 0x0030(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         GamepadDeadZoneThreshold;                          // 0x0034(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"GSInputSettings">();
	}
	static class UGSInputSettings* GetDefaultObj()
	{
		return GetDefaultObjImpl<UGSInputSettings>();
	}
};
//static_assert(alignof(UGSInputSettings) == 0x000008, "Wrong alignment on UGSInputSettings");
//static_assert(sizeof(UGSInputSettings) == 0x000038, "Wrong size on UGSInputSettings");
//static_assert(offsetof(UGSInputSettings, KeyboardMouseDeadZoneThreshold) == 0x000030, "Member 'UGSInputSettings::KeyboardMouseDeadZoneThreshold' has a wrong offset!");
//static_assert(offsetof(UGSInputSettings, GamepadDeadZoneThreshold) == 0x000034, "Member 'UGSInputSettings::GamepadDeadZoneThreshold' has a wrong offset!");

// Class GSInput.GSInputTargetBinding
// 0x0000 (0x0028 - 0x0028)
class UGSInputTargetBinding : public UObject
{
public:
	void ActionListener(const struct FInputActionInstance& ActionInstance);
	void CanceledActionListener(const struct FInputActionInstance& ActionInstance);
	void CompletedActionListener(const struct FInputActionInstance& ActionInstance);
	void FetchDebugInfo(TArray<class FString>* DebugLines, TArray<struct FColor>* DebugColors);
	void GetRichTextInlineIconInfo(int32* BasePixelHeight, int32* BaselineOffset, int32* ConnectIconOffset);
	void InputActionTrigger(const class FString& ActionName, ETriggerEvent TriggerEvent, EInputActionValueType InputActionValueType, const struct FVector& InputActionValue);
	bool IsInputDebuggerOpen();
	void OngoingActionListener(const struct FInputActionInstance& ActionInstance);
	void PostApplicationActivationChanged(bool IsActive);
	void PostConsoleActivationStateChanged(bool IsActive);
	void StartedActionListener(const struct FInputActionInstance& ActionInstance);
	void TriggeredActionListener(const struct FInputActionInstance& ActionInstance);
	bool TryGetInlineTexture(const class FString& ActionTag, const EGSInputRichTextMarkUpType MarkUpType, class UTexture2D** InlineTexture, class UTexture2D** InlineChordTexture, class UTexture2D** ConnectTexture);
	bool TryGetTextureByAction(class UInputAction* InputAction, float* Offset, class UTexture2D** Texture, int32* BgType, float* ChordOffset, class UTexture2D** ChordTexture, class UTexture2D** ConnectTexture, class UTexture2D** NoneTexture);
	bool TryGetTextureInfoByName(const class FString& Name_0, float* Offset, int32* BgType);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"GSInputTargetBinding">();
	}
	static class UGSInputTargetBinding* GetDefaultObj()
	{
		return GetDefaultObjImpl<UGSInputTargetBinding>();
	}
};
//static_assert(alignof(UGSInputTargetBinding) == 0x000008, "Wrong alignment on UGSInputTargetBinding");
//static_assert(sizeof(UGSInputTargetBinding) == 0x000028, "Wrong size on UGSInputTargetBinding");

// Class GSInput.GSInputTriggerHold
// 0x0008 (0x0060 - 0x0058)
class UGSInputTriggerHold final : public UInputTriggerTimedBase
{
public:
	float                                         HoldTimeThreshold;                                 // 0x0058(0x0004)(Edit, BlueprintVisible, ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_5C[0x4];                                       // 0x005C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"GSInputTriggerHold">();
	}
	static class UGSInputTriggerHold* GetDefaultObj()
	{
		return GetDefaultObjImpl<UGSInputTriggerHold>();
	}
};
//static_assert(alignof(UGSInputTriggerHold) == 0x000008, "Wrong alignment on UGSInputTriggerHold");
//static_assert(sizeof(UGSInputTriggerHold) == 0x000060, "Wrong size on UGSInputTriggerHold");
//static_assert(offsetof(UGSInputTriggerHold, HoldTimeThreshold) == 0x000058, "Member 'UGSInputTriggerHold::HoldTimeThreshold' has a wrong offset!");

// Class GSInput.GSInputTriggerChordHold
// 0x0008 (0x0058 - 0x0050)
class UGSInputTriggerChordHold final : public UInputTrigger
{
public:
	uint8                                         Pad_50[0x4];                                       // 0x0050(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         HoldTimeThreshold;                                 // 0x0054(0x0004)(Edit, BlueprintVisible, ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"GSInputTriggerChordHold">();
	}
	static class UGSInputTriggerChordHold* GetDefaultObj()
	{
		return GetDefaultObjImpl<UGSInputTriggerChordHold>();
	}
};
//static_assert(alignof(UGSInputTriggerChordHold) == 0x000008, "Wrong alignment on UGSInputTriggerChordHold");
//static_assert(sizeof(UGSInputTriggerChordHold) == 0x000058, "Wrong size on UGSInputTriggerChordHold");
//static_assert(offsetof(UGSInputTriggerChordHold, HoldTimeThreshold) == 0x000054, "Member 'UGSInputTriggerChordHold::HoldTimeThreshold' has a wrong offset!");

// Class GSInput.GSInputTriggerRepeatPressed
// 0x0018 (0x0068 - 0x0050)
class UGSInputTriggerRepeatPressed final : public UInputTrigger
{
public:
	uint8                                         Pad_50[0x10];                                      // 0x0050(0x0010)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         Interval;                                          // 0x0060(0x0004)(Edit, BlueprintVisible, ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         RepeatedPressedTriggerCount;                       // 0x0064(0x0004)(Edit, BlueprintVisible, ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"GSInputTriggerRepeatPressed">();
	}
	static class UGSInputTriggerRepeatPressed* GetDefaultObj()
	{
		return GetDefaultObjImpl<UGSInputTriggerRepeatPressed>();
	}
};
//static_assert(alignof(UGSInputTriggerRepeatPressed) == 0x000008, "Wrong alignment on UGSInputTriggerRepeatPressed");
//static_assert(sizeof(UGSInputTriggerRepeatPressed) == 0x000068, "Wrong size on UGSInputTriggerRepeatPressed");
//static_assert(offsetof(UGSInputTriggerRepeatPressed, Interval) == 0x000060, "Member 'UGSInputTriggerRepeatPressed::Interval' has a wrong offset!");
//static_assert(offsetof(UGSInputTriggerRepeatPressed, RepeatedPressedTriggerCount) == 0x000064, "Member 'UGSInputTriggerRepeatPressed::RepeatedPressedTriggerCount' has a wrong offset!");

// Class GSInput.GSInputTriggerWiggle
// 0x0068 (0x00C0 - 0x0058)
class UGSInputTriggerWiggle final : public UInputTriggerTimedBase
{
public:
	int32                                         AreaCount;                                         // 0x0058(0x0004)(Edit, BlueprintVisible, ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         IntervalAreaDistance;                              // 0x005C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         InnerRadius;                                       // 0x0060(0x0004)(Edit, BlueprintVisible, ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         EffectiveCrossDuration;                            // 0x0064(0x0004)(Edit, BlueprintVisible, ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_68[0x58];                                      // 0x0068(0x0058)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"GSInputTriggerWiggle">();
	}
	static class UGSInputTriggerWiggle* GetDefaultObj()
	{
		return GetDefaultObjImpl<UGSInputTriggerWiggle>();
	}
};
//static_assert(alignof(UGSInputTriggerWiggle) == 0x000008, "Wrong alignment on UGSInputTriggerWiggle");
//static_assert(sizeof(UGSInputTriggerWiggle) == 0x0000C0, "Wrong size on UGSInputTriggerWiggle");
//static_assert(offsetof(UGSInputTriggerWiggle, AreaCount) == 0x000058, "Member 'UGSInputTriggerWiggle::AreaCount' has a wrong offset!");
//static_assert(offsetof(UGSInputTriggerWiggle, IntervalAreaDistance) == 0x00005C, "Member 'UGSInputTriggerWiggle::IntervalAreaDistance' has a wrong offset!");
//static_assert(offsetof(UGSInputTriggerWiggle, InnerRadius) == 0x000060, "Member 'UGSInputTriggerWiggle::InnerRadius' has a wrong offset!");
//static_assert(offsetof(UGSInputTriggerWiggle, EffectiveCrossDuration) == 0x000064, "Member 'UGSInputTriggerWiggle::EffectiveCrossDuration' has a wrong offset!");

// Class GSInput.GSInputTriggerChordAction
// 0x0018 (0x0068 - 0x0050)
class UGSInputTriggerChordAction final : public UInputTrigger
{
public:
	class UInputAction*                           ChordAction;                                       // 0x0050(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          IsConsiderHoldTime;                                // 0x0058(0x0001)(Edit, BlueprintVisible, ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_59[0x3];                                       // 0x0059(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         HoldTimeThreshold;                                 // 0x005C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_60[0x8];                                       // 0x0060(0x0008)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"GSInputTriggerChordAction">();
	}
	static class UGSInputTriggerChordAction* GetDefaultObj()
	{
		return GetDefaultObjImpl<UGSInputTriggerChordAction>();
	}
};
//static_assert(alignof(UGSInputTriggerChordAction) == 0x000008, "Wrong alignment on UGSInputTriggerChordAction");
//static_assert(sizeof(UGSInputTriggerChordAction) == 0x000068, "Wrong size on UGSInputTriggerChordAction");
//static_assert(offsetof(UGSInputTriggerChordAction, ChordAction) == 0x000050, "Member 'UGSInputTriggerChordAction::ChordAction' has a wrong offset!");
//static_assert(offsetof(UGSInputTriggerChordAction, IsConsiderHoldTime) == 0x000058, "Member 'UGSInputTriggerChordAction::IsConsiderHoldTime' has a wrong offset!");
//static_assert(offsetof(UGSInputTriggerChordAction, HoldTimeThreshold) == 0x00005C, "Member 'UGSInputTriggerChordAction::HoldTimeThreshold' has a wrong offset!");

// Class GSInput.GSInputWidget
// 0x0000 (0x0298 - 0x0298)
class UGSInputWidget : public UUserWidget
{
public:
	bool IsChildGSWidgetOf(class UWidget* PossibleParent);
	void OnFocusChanging(const struct FFocusEvent& InFocusEvent);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"GSInputWidget">();
	}
	static class UGSInputWidget* GetDefaultObj()
	{
		return GetDefaultObjImpl<UGSInputWidget>();
	}
};
//static_assert(alignof(UGSInputWidget) == 0x000008, "Wrong alignment on UGSInputWidget");
//static_assert(sizeof(UGSInputWidget) == 0x000298, "Wrong size on UGSInputWidget");

// Class GSInput.GSNavigationInputAction
// 0x0010 (0x0068 - 0x0058)
class UGSNavigationInputAction final : public UInputAction
{
public:
	TArray<EUINavigation>                         FirstTriggerNavigations;                           // 0x0058(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NativeAccessSpecifierPublic)

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"GSNavigationInputAction">();
	}
	static class UGSNavigationInputAction* GetDefaultObj()
	{
		return GetDefaultObjImpl<UGSNavigationInputAction>();
	}
};
//static_assert(alignof(UGSNavigationInputAction) == 0x000008, "Wrong alignment on UGSNavigationInputAction");
//static_assert(sizeof(UGSNavigationInputAction) == 0x000068, "Wrong size on UGSNavigationInputAction");
//static_assert(offsetof(UGSNavigationInputAction, FirstTriggerNavigations) == 0x000058, "Member 'UGSNavigationInputAction::FirstTriggerNavigations' has a wrong offset!");

// Class GSInput.GSOverlay
// 0x0000 (0x0158 - 0x0158)
class UGSOverlay : public UOverlay
{
public:
	class UOverlaySlot* AddChildToGSOverlay(class UWidget* Content);
	void OnChildAddToGSOverlayCS(class UWidget* Widget);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"GSOverlay">();
	}
	static class UGSOverlay* GetDefaultObj()
	{
		return GetDefaultObjImpl<UGSOverlay>();
	}
};
//static_assert(alignof(UGSOverlay) == 0x000008, "Wrong alignment on UGSOverlay");
//static_assert(sizeof(UGSOverlay) == 0x000158, "Wrong size on UGSOverlay");

// Class GSInput.GSPlayerInput
// 0x0100 (0x07F0 - 0x06F0)
class UGSPlayerInput final : public UEnhancedPlayerInput
{
public:
	uint8                                         Pad_6F0[0x100];                                    // 0x06F0(0x0100)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"GSPlayerInput">();
	}
	static class UGSPlayerInput* GetDefaultObj()
	{
		return GetDefaultObjImpl<UGSPlayerInput>();
	}
};
//static_assert(alignof(UGSPlayerInput) == 0x000008, "Wrong alignment on UGSPlayerInput");
//static_assert(sizeof(UGSPlayerInput) == 0x0007F0, "Wrong size on UGSPlayerInput");

}

