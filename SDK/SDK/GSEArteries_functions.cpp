#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: GSEArteries

#include "Basic.hpp"

#include "GSEArteries_classes.hpp"
#include "GSEArteries_parameters.hpp"


namespace SDK
{

// Function GSEArteries.GSEArteriesSplineComponent.BindSplineToBoxExtent
// (Final, Native, Public, HasDefaults, BlueprintCallable)
// Parameters:
// struct FVector                          InBoxExtent                                            (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UGSEArteriesSplineComponent::BindSplineToBoxExtent(const struct FVector& InBoxExtent)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GSEArteriesSplineComponent", "BindSplineToBoxExtent");

	Params::GSEArteriesSplineComponent_BindSplineToBoxExtent Parms{};

	Parms.InBoxExtent = std::move(InBoxExtent);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function GSEArteries.GSEArteriesSplineComponent.IsGSArteriesSplineClosed
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UGSEArteriesSplineComponent::IsGSArteriesSplineClosed()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GSEArteriesSplineComponent", "IsGSArteriesSplineClosed");

	Params::GSEArteriesSplineComponent_IsGSArteriesSplineClosed Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function GSEArteries.GSEArteriesSplineComponent.MakeGSArteriesSplineClosedAsRect
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// float                                   CloseDistance                                          (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UGSEArteriesSplineComponent::MakeGSArteriesSplineClosedAsRect(float CloseDistance)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GSEArteriesSplineComponent", "MakeGSArteriesSplineClosedAsRect");

	Params::GSEArteriesSplineComponent_MakeGSArteriesSplineClosedAsRect Parms{};

	Parms.CloseDistance = CloseDistance;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function GSEArteries.GSEArteriesSplineComponent.SetGSArteriesSplineMinUnitLength
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// float                                   Length                                                 (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UGSEArteriesSplineComponent::SetGSArteriesSplineMinUnitLength(float Length)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GSEArteriesSplineComponent", "SetGSArteriesSplineMinUnitLength");

	Params::GSEArteriesSplineComponent_SetGSArteriesSplineMinUnitLength Parms{};

	Parms.Length = Length;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function GSEArteries.GSEArteriesActor.CloseSplineAndBuild
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// float                                   CloseDistance                                          (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool AGSEArteriesActor::CloseSplineAndBuild(float CloseDistance)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GSEArteriesActor", "CloseSplineAndBuild");

	Params::GSEArteriesActor_CloseSplineAndBuild Parms{};

	Parms.CloseDistance = CloseDistance;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function GSEArteries.GSEArteriesActor.SetSplineUnitLength
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// float                                   Length                                                 (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void AGSEArteriesActor::SetSplineUnitLength(float Length)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GSEArteriesActor", "SetSplineUnitLength");

	Params::GSEArteriesActor_SetSplineUnitLength Parms{};

	Parms.Length = Length;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function GSEArteries.GSEArteriesActor.UpdateHISMCollision
// (Final, Native, Public, BlueprintCallable)

void AGSEArteriesActor::UpdateHISMCollision()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GSEArteriesActor", "UpdateHISMCollision");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function GSEArteries.GSEArteriesActor.UpdateInteractComp
// (Final, Native, Public, BlueprintCallable)

void AGSEArteriesActor::UpdateInteractComp()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GSEArteriesActor", "UpdateInteractComp");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function GSEArteries.GSEArteriesActor.UpdateMobility
// (Final, Native, Public, BlueprintCallable)

void AGSEArteriesActor::UpdateMobility()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GSEArteriesActor", "UpdateMobility");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function GSEArteries.GSEArteriesBoxComponent.GetSurfacePointsClockWise
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// bool                                    bBottomSurface                                         (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// TArray<struct FVector>                  ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, NativeAccessSpecifierPublic)

TArray<struct FVector> UGSEArteriesBoxComponent::GetSurfacePointsClockWise(bool bBottomSurface)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GSEArteriesBoxComponent", "GetSurfacePointsClockWise");

	Params::GSEArteriesBoxComponent_GetSurfacePointsClockWise Parms{};

	Parms.bBottomSurface = bBottomSurface;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function GSEArteries.GSEArteriesFuncLib.AddLineAlongSpline
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// class USplineComponent*                 SplineComp                                             (Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   Length                                                 (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class UArteriesObject*                  ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class UArteriesObject* UGSEArteriesFuncLib::AddLineAlongSpline(class USplineComponent* SplineComp, float Length)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("GSEArteriesFuncLib", "AddLineAlongSpline");

	Params::GSEArteriesFuncLib_AddLineAlongSpline Parms{};

	Parms.SplineComp = SplineComp;
	Parms.Length = Length;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function GSEArteries.GSEArteriesFuncLib.AddNoiseToPoints
// (Final, Native, Static, Public, HasDefaults, BlueprintCallable)
// Parameters:
// class UArteriesObject*                  Target                                                 (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class FString                           InGroup                                                (Parm, ZeroConstructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FTransform                       TransformNoiseLow                                      (Parm, IsPlainOldData, NoDestructor, AdvancedDisplay, NativeAccessSpecifierPublic)
// struct FTransform                       TransformNoiseHigh                                     (Parm, IsPlainOldData, NoDestructor, AdvancedDisplay, NativeAccessSpecifierPublic)
// float                                   StepYaw                                                (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   StepPitch                                              (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   StepRoll                                               (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   NoiseRatio                                             (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class UArteriesObject*                  ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class UArteriesObject* UGSEArteriesFuncLib::AddNoiseToPoints(class UArteriesObject* Target, const class FString& InGroup, const struct FTransform& TransformNoiseLow, const struct FTransform& TransformNoiseHigh, float StepYaw, float StepPitch, float StepRoll, float NoiseRatio)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("GSEArteriesFuncLib", "AddNoiseToPoints");

	Params::GSEArteriesFuncLib_AddNoiseToPoints Parms{};

	Parms.Target = Target;
	Parms.InGroup = std::move(InGroup);
	Parms.TransformNoiseLow = std::move(TransformNoiseLow);
	Parms.TransformNoiseHigh = std::move(TransformNoiseHigh);
	Parms.StepYaw = StepYaw;
	Parms.StepPitch = StepPitch;
	Parms.StepRoll = StepRoll;
	Parms.NoiseRatio = NoiseRatio;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function GSEArteries.GSEArteriesFuncLib.AddPerpendicularLinesAlongLine
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// class UArteriesObject*                  BackBones                                              (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class FString                           InGroup                                                (Parm, ZeroConstructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   Length                                                 (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class UArteriesObject*                  ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class UArteriesObject* UGSEArteriesFuncLib::AddPerpendicularLinesAlongLine(class UArteriesObject* BackBones, const class FString& InGroup, float Length)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("GSEArteriesFuncLib", "AddPerpendicularLinesAlongLine");

	Params::GSEArteriesFuncLib_AddPerpendicularLinesAlongLine Parms{};

	Parms.BackBones = BackBones;
	Parms.InGroup = std::move(InGroup);
	Parms.Length = Length;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function GSEArteries.GSEArteriesFuncLib.AddRoofToSimpleRect
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// class UArteriesObject*                  Target                                                 (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class FString                           InGroup                                                (Parm, ZeroConstructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class UArteriesObject*                  ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class UArteriesObject* UGSEArteriesFuncLib::AddRoofToSimpleRect(class UArteriesObject* Target, const class FString& InGroup)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("GSEArteriesFuncLib", "AddRoofToSimpleRect");

	Params::GSEArteriesFuncLib_AddRoofToSimpleRect Parms{};

	Parms.Target = Target;
	Parms.InGroup = std::move(InGroup);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function GSEArteries.GSEArteriesFuncLib.AdvancedCopyToCornerCatenatePointsBySoftPath
// (Final, Native, Static, Public, HasDefaults, BlueprintCallable)
// Parameters:
// class UArteriesObject*                  Target                                                 (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class FString                           InGroup                                                (Parm, ZeroConstructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// TArray<struct FSoftObjectPath>          Sources                                                (Parm, ZeroConstructor, AdvancedDisplay, NativeAccessSpecifierPublic)
// struct FTransform                       LocalTransform                                         (Parm, IsPlainOldData, NoDestructor, AdvancedDisplay, NativeAccessSpecifierPublic)
// float                                   UnitLength                                             (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    bCatOutCorner                                          (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    bAlongCurveOutNormalOnly                               (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class UArteriesObject*                  ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class UArteriesObject* UGSEArteriesFuncLib::AdvancedCopyToCornerCatenatePointsBySoftPath(class UArteriesObject* Target, const class FString& InGroup, const TArray<struct FSoftObjectPath>& Sources, const struct FTransform& LocalTransform, float UnitLength, bool bCatOutCorner, bool bAlongCurveOutNormalOnly)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("GSEArteriesFuncLib", "AdvancedCopyToCornerCatenatePointsBySoftPath");

	Params::GSEArteriesFuncLib_AdvancedCopyToCornerCatenatePointsBySoftPath Parms{};

	Parms.Target = Target;
	Parms.InGroup = std::move(InGroup);
	Parms.Sources = std::move(Sources);
	Parms.LocalTransform = std::move(LocalTransform);
	Parms.UnitLength = UnitLength;
	Parms.bCatOutCorner = bCatOutCorner;
	Parms.bAlongCurveOutNormalOnly = bAlongCurveOutNormalOnly;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function GSEArteries.GSEArteriesFuncLib.AdvancedCopyToCornerPointsBySoftPath
// (Final, Native, Static, Public, HasDefaults, BlueprintCallable)
// Parameters:
// class UArteriesObject*                  Target                                                 (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class FString                           InGroup                                                (Parm, ZeroConstructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// TArray<struct FSoftObjectPath>          Sources                                                (Parm, ZeroConstructor, AdvancedDisplay, NativeAccessSpecifierPublic)
// struct FTransform                       LocalTransform                                         (Parm, IsPlainOldData, NoDestructor, AdvancedDisplay, NativeAccessSpecifierPublic)
// bool                                    bAsInnerCorner                                         (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    bAlongCurveOutNormalOnly                               (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class UArteriesObject*                  ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class UArteriesObject* UGSEArteriesFuncLib::AdvancedCopyToCornerPointsBySoftPath(class UArteriesObject* Target, const class FString& InGroup, const TArray<struct FSoftObjectPath>& Sources, const struct FTransform& LocalTransform, bool bAsInnerCorner, bool bAlongCurveOutNormalOnly)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("GSEArteriesFuncLib", "AdvancedCopyToCornerPointsBySoftPath");

	Params::GSEArteriesFuncLib_AdvancedCopyToCornerPointsBySoftPath Parms{};

	Parms.Target = Target;
	Parms.InGroup = std::move(InGroup);
	Parms.Sources = std::move(Sources);
	Parms.LocalTransform = std::move(LocalTransform);
	Parms.bAsInnerCorner = bAsInnerCorner;
	Parms.bAlongCurveOutNormalOnly = bAlongCurveOutNormalOnly;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function GSEArteries.GSEArteriesFuncLib.AdvancedCopyToEndPointsBySoftPath
// (Final, Native, Static, Public, HasDefaults, BlueprintCallable)
// Parameters:
// class UArteriesObject*                  Target                                                 (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class FString                           InGroup                                                (Parm, ZeroConstructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// TArray<struct FSoftObjectPath>          Sources                                                (Parm, ZeroConstructor, AdvancedDisplay, NativeAccessSpecifierPublic)
// struct FTransform                       LocalTransform                                         (Parm, IsPlainOldData, NoDestructor, AdvancedDisplay, NativeAccessSpecifierPublic)
// bool                                    bIgnoreDelatZ                                          (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class UArteriesObject*                  ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class UArteriesObject* UGSEArteriesFuncLib::AdvancedCopyToEndPointsBySoftPath(class UArteriesObject* Target, const class FString& InGroup, const TArray<struct FSoftObjectPath>& Sources, const struct FTransform& LocalTransform, bool bIgnoreDelatZ)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("GSEArteriesFuncLib", "AdvancedCopyToEndPointsBySoftPath");

	Params::GSEArteriesFuncLib_AdvancedCopyToEndPointsBySoftPath Parms{};

	Parms.Target = Target;
	Parms.InGroup = std::move(InGroup);
	Parms.Sources = std::move(Sources);
	Parms.LocalTransform = std::move(LocalTransform);
	Parms.bIgnoreDelatZ = bIgnoreDelatZ;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function GSEArteries.GSEArteriesFuncLib.AdvancedCopyToPoints
// (Final, Native, Static, Public, HasDefaults, BlueprintCallable)
// Parameters:
// class UArteriesObject*                  Target                                                 (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class FString                           Groups                                                 (Parm, ZeroConstructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// TArray<class UObject*>                  Sources                                                (Parm, ZeroConstructor, AdvancedDisplay, NativeAccessSpecifierPublic)
// struct FTransform                       LocalTransform                                         (Parm, IsPlainOldData, NoDestructor, AdvancedDisplay, NativeAccessSpecifierPublic)
// class UArteriesObject*                  ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class UArteriesObject* UGSEArteriesFuncLib::AdvancedCopyToPoints(class UArteriesObject* Target, const class FString& Groups, const TArray<class UObject*>& Sources, const struct FTransform& LocalTransform)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("GSEArteriesFuncLib", "AdvancedCopyToPoints");

	Params::GSEArteriesFuncLib_AdvancedCopyToPoints Parms{};

	Parms.Target = Target;
	Parms.Groups = std::move(Groups);
	Parms.Sources = std::move(Sources);
	Parms.LocalTransform = std::move(LocalTransform);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function GSEArteries.GSEArteriesFuncLib.AdvancedCopyToPointsBySoftPath
// (Final, Native, Static, Public, HasDefaults, BlueprintCallable)
// Parameters:
// class UArteriesObject*                  Target                                                 (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class FString                           Groups                                                 (Parm, ZeroConstructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// TArray<struct FSoftObjectPath>          Sources                                                (Parm, ZeroConstructor, AdvancedDisplay, NativeAccessSpecifierPublic)
// struct FTransform                       LocalTransform                                         (Parm, IsPlainOldData, NoDestructor, AdvancedDisplay, NativeAccessSpecifierPublic)
// bool                                    bIgnoreCorner                                          (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    bIgnoreCornerAdjacent                                  (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class UArteriesObject*                  ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class UArteriesObject* UGSEArteriesFuncLib::AdvancedCopyToPointsBySoftPath(class UArteriesObject* Target, const class FString& Groups, const TArray<struct FSoftObjectPath>& Sources, const struct FTransform& LocalTransform, bool bIgnoreCorner, bool bIgnoreCornerAdjacent)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("GSEArteriesFuncLib", "AdvancedCopyToPointsBySoftPath");

	Params::GSEArteriesFuncLib_AdvancedCopyToPointsBySoftPath Parms{};

	Parms.Target = Target;
	Parms.Groups = std::move(Groups);
	Parms.Sources = std::move(Sources);
	Parms.LocalTransform = std::move(LocalTransform);
	Parms.bIgnoreCorner = bIgnoreCorner;
	Parms.bIgnoreCornerAdjacent = bIgnoreCornerAdjacent;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function GSEArteries.GSEArteriesFuncLib.AdvancedCopyToPointsByTrSoftPath
// (Final, Native, Static, Public, HasDefaults, BlueprintCallable)
// Parameters:
// class UArteriesObject*                  Target                                                 (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class FString                           Groups                                                 (Parm, ZeroConstructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// TArray<struct FBaseTransformedSoftObject>Sources                                                (Parm, ZeroConstructor, AdvancedDisplay, NativeAccessSpecifierPublic)
// struct FTransform                       LocalTransform                                         (Parm, IsPlainOldData, NoDestructor, AdvancedDisplay, NativeAccessSpecifierPublic)
// struct FTransform                       TransformNoiseLow                                      (Parm, IsPlainOldData, NoDestructor, AdvancedDisplay, NativeAccessSpecifierPublic)
// struct FTransform                       TransformNoiseHigh                                     (Parm, IsPlainOldData, NoDestructor, AdvancedDisplay, NativeAccessSpecifierPublic)
// float                                   EachPathWidth                                          (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    bIgnoreCorner                                          (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    bIgnoreCornerAdjacent                                  (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    bGenerateMultiPath                                     (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32                                   GenPathCount                                           (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class UArteriesObject*                  ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class UArteriesObject* UGSEArteriesFuncLib::AdvancedCopyToPointsByTrSoftPath(class UArteriesObject* Target, const class FString& Groups, const TArray<struct FBaseTransformedSoftObject>& Sources, const struct FTransform& LocalTransform, const struct FTransform& TransformNoiseLow, const struct FTransform& TransformNoiseHigh, float EachPathWidth, bool bIgnoreCorner, bool bIgnoreCornerAdjacent, bool bGenerateMultiPath, int32 GenPathCount)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("GSEArteriesFuncLib", "AdvancedCopyToPointsByTrSoftPath");

	Params::GSEArteriesFuncLib_AdvancedCopyToPointsByTrSoftPath Parms{};

	Parms.Target = Target;
	Parms.Groups = std::move(Groups);
	Parms.Sources = std::move(Sources);
	Parms.LocalTransform = std::move(LocalTransform);
	Parms.TransformNoiseLow = std::move(TransformNoiseLow);
	Parms.TransformNoiseHigh = std::move(TransformNoiseHigh);
	Parms.EachPathWidth = EachPathWidth;
	Parms.bIgnoreCorner = bIgnoreCorner;
	Parms.bIgnoreCornerAdjacent = bIgnoreCornerAdjacent;
	Parms.bGenerateMultiPath = bGenerateMultiPath;
	Parms.GenPathCount = GenPathCount;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function GSEArteries.GSEArteriesFuncLib.AdvancedSmartCopyToPointsByMeshExtents
// (Final, Native, Static, Public, HasDefaults, BlueprintCallable)
// Parameters:
// class UArteriesObject*                  Target                                                 (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class FString                           Groups                                                 (Parm, ZeroConstructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// TArray<class UStaticMesh*>              MeshSources                                            (Parm, ZeroConstructor, AdvancedDisplay, NativeAccessSpecifierPublic)
// struct FTransform                       LocalTransform                                         (Parm, IsPlainOldData, NoDestructor, AdvancedDisplay, NativeAccessSpecifierPublic)
// struct FTransform                       TransformNoiseLow                                      (Parm, IsPlainOldData, NoDestructor, AdvancedDisplay, NativeAccessSpecifierPublic)
// struct FTransform                       TransformNoiseHigh                                     (Parm, IsPlainOldData, NoDestructor, AdvancedDisplay, NativeAccessSpecifierPublic)
// EGSATERIES_SAMPLE_AXIS                  SampleAxis                                             (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   StepYaw                                                (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   StepPitch                                              (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   StepRoll                                               (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   LineNoiseChance                                        (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   ResampleScale                                          (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class UArteriesObject*                  ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class UArteriesObject* UGSEArteriesFuncLib::AdvancedSmartCopyToPointsByMeshExtents(class UArteriesObject* Target, const class FString& Groups, const TArray<class UStaticMesh*>& MeshSources, const struct FTransform& LocalTransform, const struct FTransform& TransformNoiseLow, const struct FTransform& TransformNoiseHigh, EGSATERIES_SAMPLE_AXIS SampleAxis, float StepYaw, float StepPitch, float StepRoll, float LineNoiseChance, float ResampleScale)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("GSEArteriesFuncLib", "AdvancedSmartCopyToPointsByMeshExtents");

	Params::GSEArteriesFuncLib_AdvancedSmartCopyToPointsByMeshExtents Parms{};

	Parms.Target = Target;
	Parms.Groups = std::move(Groups);
	Parms.MeshSources = std::move(MeshSources);
	Parms.LocalTransform = std::move(LocalTransform);
	Parms.TransformNoiseLow = std::move(TransformNoiseLow);
	Parms.TransformNoiseHigh = std::move(TransformNoiseHigh);
	Parms.SampleAxis = SampleAxis;
	Parms.StepYaw = StepYaw;
	Parms.StepPitch = StepPitch;
	Parms.StepRoll = StepRoll;
	Parms.LineNoiseChance = LineNoiseChance;
	Parms.ResampleScale = ResampleScale;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function GSEArteries.GSEArteriesFuncLib.AdvancedSmartCopyToPointsBySoftObjectExtents
// (Final, Native, Static, Public, HasDefaults, BlueprintCallable)
// Parameters:
// class UArteriesObject*                  Target                                                 (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class FString                           Groups                                                 (Parm, ZeroConstructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// TArray<struct FSoftObjectPath>          Sources                                                (Parm, ZeroConstructor, AdvancedDisplay, NativeAccessSpecifierPublic)
// TArray<struct FSoftObjectPath>          NoiseSources                                           (Parm, ZeroConstructor, AdvancedDisplay, NativeAccessSpecifierPublic)
// struct FTransform                       LocalTransform                                         (Parm, IsPlainOldData, NoDestructor, AdvancedDisplay, NativeAccessSpecifierPublic)
// struct FTransform                       TransformNoiseLow                                      (Parm, IsPlainOldData, NoDestructor, AdvancedDisplay, NativeAccessSpecifierPublic)
// struct FTransform                       TransformNoiseHigh                                     (Parm, IsPlainOldData, NoDestructor, AdvancedDisplay, NativeAccessSpecifierPublic)
// EGSATERIES_SAMPLE_AXIS                  SampleAxis                                             (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   StepYaw                                                (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   StepPitch                                              (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   StepRoll                                               (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   LineTwistChance                                        (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   UnitNoiseChane                                         (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   ResampleScale                                          (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32                                   IterationCount                                         (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    CurvelyAdjusting                                       (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class UArteriesObject*                  ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class UArteriesObject* UGSEArteriesFuncLib::AdvancedSmartCopyToPointsBySoftObjectExtents(class UArteriesObject* Target, const class FString& Groups, const TArray<struct FSoftObjectPath>& Sources, const TArray<struct FSoftObjectPath>& NoiseSources, const struct FTransform& LocalTransform, const struct FTransform& TransformNoiseLow, const struct FTransform& TransformNoiseHigh, EGSATERIES_SAMPLE_AXIS SampleAxis, float StepYaw, float StepPitch, float StepRoll, float LineTwistChance, float UnitNoiseChane, float ResampleScale, int32 IterationCount, bool CurvelyAdjusting)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("GSEArteriesFuncLib", "AdvancedSmartCopyToPointsBySoftObjectExtents");

	Params::GSEArteriesFuncLib_AdvancedSmartCopyToPointsBySoftObjectExtents Parms{};

	Parms.Target = Target;
	Parms.Groups = std::move(Groups);
	Parms.Sources = std::move(Sources);
	Parms.NoiseSources = std::move(NoiseSources);
	Parms.LocalTransform = std::move(LocalTransform);
	Parms.TransformNoiseLow = std::move(TransformNoiseLow);
	Parms.TransformNoiseHigh = std::move(TransformNoiseHigh);
	Parms.SampleAxis = SampleAxis;
	Parms.StepYaw = StepYaw;
	Parms.StepPitch = StepPitch;
	Parms.StepRoll = StepRoll;
	Parms.LineTwistChance = LineTwistChance;
	Parms.UnitNoiseChane = UnitNoiseChane;
	Parms.ResampleScale = ResampleScale;
	Parms.IterationCount = IterationCount;
	Parms.CurvelyAdjusting = CurvelyAdjusting;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function GSEArteries.GSEArteriesFuncLib.AdvancedSmartStackToPointsBySoftPath
// (Final, Native, Static, Public, HasOutParams, HasDefaults, BlueprintCallable)
// Parameters:
// class AArteriesActor*                   OwnerActor                                             (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class UArteriesObject*                  Target                                                 (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32                                   ExpectedObjectsNum                                     (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class FString                           Groups                                                 (Parm, ZeroConstructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// TMap<struct FSoftObjectPath, struct FGSArteriesStackRule>SoftPathToRuleMap                                      (ConstParm, Parm, OutParm, ReferenceParm, AdvancedDisplay, NativeAccessSpecifierPublic)
// struct FTransform                       LocalTransform                                         (Parm, IsPlainOldData, NoDestructor, AdvancedDisplay, NativeAccessSpecifierPublic)
// struct FTransform                       TransformNoiseLow                                      (Parm, IsPlainOldData, NoDestructor, AdvancedDisplay, NativeAccessSpecifierPublic)
// struct FTransform                       TransformNoiseHigh                                     (Parm, IsPlainOldData, NoDestructor, AdvancedDisplay, NativeAccessSpecifierPublic)
// TArray<struct FVector>                  InCustomCornerLocs                                     (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, AdvancedDisplay, NativeAccessSpecifierPublic)
// float                                   StepYaw                                                (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   StepPitch                                              (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   StepRoll                                               (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class UArteriesObject*                  ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class UArteriesObject* UGSEArteriesFuncLib::AdvancedSmartStackToPointsBySoftPath(class AArteriesActor* OwnerActor, class UArteriesObject* Target, int32 ExpectedObjectsNum, const class FString& Groups, const TMap<struct FSoftObjectPath, struct FGSArteriesStackRule>& SoftPathToRuleMap, const struct FTransform& LocalTransform, const struct FTransform& TransformNoiseLow, const struct FTransform& TransformNoiseHigh, const TArray<struct FVector>& InCustomCornerLocs, float StepYaw, float StepPitch, float StepRoll)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("GSEArteriesFuncLib", "AdvancedSmartStackToPointsBySoftPath");

	Params::GSEArteriesFuncLib_AdvancedSmartStackToPointsBySoftPath Parms{};

	Parms.OwnerActor = OwnerActor;
	Parms.Target = Target;
	Parms.ExpectedObjectsNum = ExpectedObjectsNum;
	Parms.Groups = std::move(Groups);
	Parms.SoftPathToRuleMap = std::move(SoftPathToRuleMap);
	Parms.LocalTransform = std::move(LocalTransform);
	Parms.TransformNoiseLow = std::move(TransformNoiseLow);
	Parms.TransformNoiseHigh = std::move(TransformNoiseHigh);
	Parms.InCustomCornerLocs = std::move(InCustomCornerLocs);
	Parms.StepYaw = StepYaw;
	Parms.StepPitch = StepPitch;
	Parms.StepRoll = StepRoll;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function GSEArteries.GSEArteriesFuncLib.AggregatePoints
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// class UArteriesObject*                  Target                                                 (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class FString                           Groups                                                 (Parm, ZeroConstructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32                                   DesiredGroupNum                                        (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class UArteriesObject*                  ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class UArteriesObject* UGSEArteriesFuncLib::AggregatePoints(class UArteriesObject* Target, const class FString& Groups, int32 DesiredGroupNum)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("GSEArteriesFuncLib", "AggregatePoints");

	Params::GSEArteriesFuncLib_AggregatePoints Parms{};

	Parms.Target = Target;
	Parms.Groups = std::move(Groups);
	Parms.DesiredGroupNum = DesiredGroupNum;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function GSEArteries.GSEArteriesFuncLib.BreakPrimitivesIntoPoints
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// class UArteriesObject*                  Target                                                 (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class FString                           InGroup                                                (Parm, ZeroConstructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    bKeepRotation                                          (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    bResetUpDirection                                      (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class UArteriesObject*                  ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class UArteriesObject* UGSEArteriesFuncLib::BreakPrimitivesIntoPoints(class UArteriesObject* Target, const class FString& InGroup, bool bKeepRotation, bool bResetUpDirection)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("GSEArteriesFuncLib", "BreakPrimitivesIntoPoints");

	Params::GSEArteriesFuncLib_BreakPrimitivesIntoPoints Parms{};

	Parms.Target = Target;
	Parms.InGroup = std::move(InGroup);
	Parms.bKeepRotation = bKeepRotation;
	Parms.bResetUpDirection = bResetUpDirection;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function GSEArteries.GSEArteriesFuncLib.CreateGSArteriesPoint
// (Final, Native, Static, Public, HasDefaults, BlueprintCallable)
// Parameters:
// struct FVector                          InPosition                                             (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class UArteriesObject*                  ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class UArteriesObject* UGSEArteriesFuncLib::CreateGSArteriesPoint(const struct FVector& InPosition)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("GSEArteriesFuncLib", "CreateGSArteriesPoint");

	Params::GSEArteriesFuncLib_CreateGSArteriesPoint Parms{};

	Parms.InPosition = std::move(InPosition);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function GSEArteries.GSEArteriesFuncLib.CreateNoiseGroup
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// class UArteriesObject*                  Target                                                 (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class FString                           InGroup                                                (Parm, ZeroConstructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class FString                           OutGeneralGroup                                        (Parm, ZeroConstructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class FString                           OutNoiseGroup                                          (Parm, ZeroConstructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   NoiseRatio                                             (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class UArteriesObject*                  ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class UArteriesObject* UGSEArteriesFuncLib::CreateNoiseGroup(class UArteriesObject* Target, const class FString& InGroup, const class FString& OutGeneralGroup, const class FString& OutNoiseGroup, float NoiseRatio)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("GSEArteriesFuncLib", "CreateNoiseGroup");

	Params::GSEArteriesFuncLib_CreateNoiseGroup Parms{};

	Parms.Target = Target;
	Parms.InGroup = std::move(InGroup);
	Parms.OutGeneralGroup = std::move(OutGeneralGroup);
	Parms.OutNoiseGroup = std::move(OutNoiseGroup);
	Parms.NoiseRatio = NoiseRatio;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function GSEArteries.GSEArteriesFuncLib.CreateSamplingSurface
// (Final, Native, Static, Public, HasDefaults, BlueprintCallable)
// Parameters:
// class UArteriesObject*                  BackBones                                              (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class FString                           InPrimGroup                                            (Parm, ZeroConstructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   Length                                                 (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FVector                          InDirection                                            (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class UArteriesObject*                  ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class UArteriesObject* UGSEArteriesFuncLib::CreateSamplingSurface(class UArteriesObject* BackBones, const class FString& InPrimGroup, float Length, const struct FVector& InDirection)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("GSEArteriesFuncLib", "CreateSamplingSurface");

	Params::GSEArteriesFuncLib_CreateSamplingSurface Parms{};

	Parms.BackBones = BackBones;
	Parms.InPrimGroup = std::move(InPrimGroup);
	Parms.Length = Length;
	Parms.InDirection = std::move(InDirection);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function GSEArteries.GSEArteriesFuncLib.CreateSlopeSideSamplingSurface
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// class UArteriesObject*                  BackBones                                              (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class FString                           InPrimGroup                                            (Parm, ZeroConstructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   OffsetLength                                           (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class UArteriesObject*                  ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class UArteriesObject* UGSEArteriesFuncLib::CreateSlopeSideSamplingSurface(class UArteriesObject* BackBones, const class FString& InPrimGroup, float OffsetLength)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("GSEArteriesFuncLib", "CreateSlopeSideSamplingSurface");

	Params::GSEArteriesFuncLib_CreateSlopeSideSamplingSurface Parms{};

	Parms.BackBones = BackBones;
	Parms.InPrimGroup = std::move(InPrimGroup);
	Parms.OffsetLength = OffsetLength;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function GSEArteries.GSEArteriesFuncLib.FindCornerPoints
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// class UArteriesObject*                  Target                                                 (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class FString                           InGroup                                                (Parm, ZeroConstructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    WithAdjacentPoints                                     (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class UArteriesObject*                  ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class UArteriesObject* UGSEArteriesFuncLib::FindCornerPoints(class UArteriesObject* Target, const class FString& InGroup, bool WithAdjacentPoints)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("GSEArteriesFuncLib", "FindCornerPoints");

	Params::GSEArteriesFuncLib_FindCornerPoints Parms{};

	Parms.Target = Target;
	Parms.InGroup = std::move(InGroup);
	Parms.WithAdjacentPoints = WithAdjacentPoints;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function GSEArteries.GSEArteriesFuncLib.FindDoorFeaturePoints
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// class AArteriesActor*                   OwnerActor                                             (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class UArteriesObject*                  Target                                                 (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32                                   DoorNum                                                (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   UnitLength                                             (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   DoorUnitLength                                         (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class FString                           DoorGroup                                              (Parm, ZeroConstructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class FString                           DoorCatnateGroup                                       (Parm, ZeroConstructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class FString                           RestGroup                                              (Parm, ZeroConstructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   DoorCatUnitLength                                      (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// EGSATERIES_SIDE_SELECT_FEATURE          ESelectSide                                            (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// EGSATERIES_SIDE_DISTRIBUTION_FEATURE    EDistribute                                            (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class UArteriesObject*                  ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class UArteriesObject* UGSEArteriesFuncLib::FindDoorFeaturePoints(class AArteriesActor* OwnerActor, class UArteriesObject* Target, int32 DoorNum, float UnitLength, float DoorUnitLength, const class FString& DoorGroup, const class FString& DoorCatnateGroup, const class FString& RestGroup, float DoorCatUnitLength, EGSATERIES_SIDE_SELECT_FEATURE ESelectSide, EGSATERIES_SIDE_DISTRIBUTION_FEATURE EDistribute)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("GSEArteriesFuncLib", "FindDoorFeaturePoints");

	Params::GSEArteriesFuncLib_FindDoorFeaturePoints Parms{};

	Parms.OwnerActor = OwnerActor;
	Parms.Target = Target;
	Parms.DoorNum = DoorNum;
	Parms.UnitLength = UnitLength;
	Parms.DoorUnitLength = DoorUnitLength;
	Parms.DoorGroup = std::move(DoorGroup);
	Parms.DoorCatnateGroup = std::move(DoorCatnateGroup);
	Parms.RestGroup = std::move(RestGroup);
	Parms.DoorCatUnitLength = DoorCatUnitLength;
	Parms.ESelectSide = ESelectSide;
	Parms.EDistribute = EDistribute;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function GSEArteries.GSEArteriesFuncLib.FindFlatFeaturePoints
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// class UArteriesObject*                  Target                                                 (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class FString                           InGroup                                                (Parm, ZeroConstructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    bFindSlopePoints                                       (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   Tolerence                                              (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class UArteriesObject*                  ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class UArteriesObject* UGSEArteriesFuncLib::FindFlatFeaturePoints(class UArteriesObject* Target, const class FString& InGroup, bool bFindSlopePoints, float Tolerence)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("GSEArteriesFuncLib", "FindFlatFeaturePoints");

	Params::GSEArteriesFuncLib_FindFlatFeaturePoints Parms{};

	Parms.Target = Target;
	Parms.InGroup = std::move(InGroup);
	Parms.bFindSlopePoints = bFindSlopePoints;
	Parms.Tolerence = Tolerence;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function GSEArteries.GSEArteriesFuncLib.FindLeafPoints
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// class UArteriesObject*                  Target                                                 (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class FString                           InGroup                                                (Parm, ZeroConstructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class UArteriesObject*                  ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class UArteriesObject* UGSEArteriesFuncLib::FindLeafPoints(class UArteriesObject* Target, const class FString& InGroup)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("GSEArteriesFuncLib", "FindLeafPoints");

	Params::GSEArteriesFuncLib_FindLeafPoints Parms{};

	Parms.Target = Target;
	Parms.InGroup = std::move(InGroup);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function GSEArteries.GSEArteriesFuncLib.FindWindowFeaturePoints
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// class UArteriesObject*                  Target                                                 (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32                                   WindowNum                                              (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   WindowUnitLength                                       (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class UArteriesObject*                  ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class UArteriesObject* UGSEArteriesFuncLib::FindWindowFeaturePoints(class UArteriesObject* Target, int32 WindowNum, float WindowUnitLength)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("GSEArteriesFuncLib", "FindWindowFeaturePoints");

	Params::GSEArteriesFuncLib_FindWindowFeaturePoints Parms{};

	Parms.Target = Target;
	Parms.WindowNum = WindowNum;
	Parms.WindowUnitLength = WindowUnitLength;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function GSEArteries.GSEArteriesFuncLib.GenRandSeedStream
// (Final, Native, Static, Public, HasDefaults, BlueprintCallable)
// Parameters:
// struct FRandomStream                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, NativeAccessSpecifierPublic)

struct FRandomStream UGSEArteriesFuncLib::GenRandSeedStream()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("GSEArteriesFuncLib", "GenRandSeedStream");

	Params::GSEArteriesFuncLib_GenRandSeedStream Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function GSEArteries.GSEArteriesFuncLib.GetNumberOfPoints
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// class UArteriesObject*                  Target                                                 (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

int32 UGSEArteriesFuncLib::GetNumberOfPoints(class UArteriesObject* Target)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("GSEArteriesFuncLib", "GetNumberOfPoints");

	Params::GSEArteriesFuncLib_GetNumberOfPoints Parms{};

	Parms.Target = Target;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function GSEArteries.GSEArteriesFuncLib.MakeHoles
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// class UArteriesObject*                  Target                                                 (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class FString                           HoleGroups                                             (Parm, ZeroConstructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class FString                           OutHoleGroups                                          (Parm, ZeroConstructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32                                   MaxHoleIteration                                       (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32                                   MaxHoleNum                                             (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   HoleIterationChance                                    (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class UArteriesObject*                  ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class UArteriesObject* UGSEArteriesFuncLib::MakeHoles(class UArteriesObject* Target, const class FString& HoleGroups, const class FString& OutHoleGroups, int32 MaxHoleIteration, int32 MaxHoleNum, float HoleIterationChance)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("GSEArteriesFuncLib", "MakeHoles");

	Params::GSEArteriesFuncLib_MakeHoles Parms{};

	Parms.Target = Target;
	Parms.HoleGroups = std::move(HoleGroups);
	Parms.OutHoleGroups = std::move(OutHoleGroups);
	Parms.MaxHoleIteration = MaxHoleIteration;
	Parms.MaxHoleNum = MaxHoleNum;
	Parms.HoleIterationChance = HoleIterationChance;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function GSEArteries.GSEArteriesFuncLib.MergeAndCleanInstancedMeshToStaticSurface
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// class AArteriesActor*                   OwnerActor                                             (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class UArteriesObject*                  Target                                                 (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    bHitLandscapeOnly                                      (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   RayCastDistance                                        (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   Tolerence                                              (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class UArteriesObject*                  ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class UArteriesObject* UGSEArteriesFuncLib::MergeAndCleanInstancedMeshToStaticSurface(class AArteriesActor* OwnerActor, class UArteriesObject* Target, bool bHitLandscapeOnly, float RayCastDistance, float Tolerence)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("GSEArteriesFuncLib", "MergeAndCleanInstancedMeshToStaticSurface");

	Params::GSEArteriesFuncLib_MergeAndCleanInstancedMeshToStaticSurface Parms{};

	Parms.OwnerActor = OwnerActor;
	Parms.Target = Target;
	Parms.bHitLandscapeOnly = bHitLandscapeOnly;
	Parms.RayCastDistance = RayCastDistance;
	Parms.Tolerence = Tolerence;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function GSEArteries.GSEArteriesFuncLib.MergePointsToGrid
// (Final, Native, Static, Public, HasDefaults, BlueprintCallable)
// Parameters:
// class UArteriesObject*                  Target                                                 (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class FString                           InGroup                                                (Parm, ZeroConstructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   GridSize                                               (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FVector                          Offset                                                 (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class UArteriesObject*                  ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class UArteriesObject* UGSEArteriesFuncLib::MergePointsToGrid(class UArteriesObject* Target, const class FString& InGroup, float GridSize, const struct FVector& Offset)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("GSEArteriesFuncLib", "MergePointsToGrid");

	Params::GSEArteriesFuncLib_MergePointsToGrid Parms{};

	Parms.Target = Target;
	Parms.InGroup = std::move(InGroup);
	Parms.GridSize = GridSize;
	Parms.Offset = std::move(Offset);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function GSEArteries.GSEArteriesFuncLib.MergePointsToLandscape
// (Final, Native, Static, Public, HasDefaults, BlueprintCallable)
// Parameters:
// class AArteriesActor*                   OwnerActor                                             (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class UArteriesObject*                  Target                                                 (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class FString                           InGroup                                                (Parm, ZeroConstructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FVector                          RayCastOffset                                          (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   RayDistance                                            (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class UArteriesObject*                  ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class UArteriesObject* UGSEArteriesFuncLib::MergePointsToLandscape(class AArteriesActor* OwnerActor, class UArteriesObject* Target, const class FString& InGroup, const struct FVector& RayCastOffset, float RayDistance)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("GSEArteriesFuncLib", "MergePointsToLandscape");

	Params::GSEArteriesFuncLib_MergePointsToLandscape Parms{};

	Parms.OwnerActor = OwnerActor;
	Parms.Target = Target;
	Parms.InGroup = std::move(InGroup);
	Parms.RayCastOffset = std::move(RayCastOffset);
	Parms.RayDistance = RayDistance;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function GSEArteries.GSEArteriesFuncLib.MergePointsToPrimitive
// (Final, Native, Static, Public, HasDefaults, BlueprintCallable)
// Parameters:
// class UArteriesObject*                  Target                                                 (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class FString                           InGroup                                                (Parm, ZeroConstructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FVector                          Offset                                                 (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    bMakeClose                                             (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class UArteriesObject*                  ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class UArteriesObject* UGSEArteriesFuncLib::MergePointsToPrimitive(class UArteriesObject* Target, const class FString& InGroup, const struct FVector& Offset, bool bMakeClose)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("GSEArteriesFuncLib", "MergePointsToPrimitive");

	Params::GSEArteriesFuncLib_MergePointsToPrimitive Parms{};

	Parms.Target = Target;
	Parms.InGroup = std::move(InGroup);
	Parms.Offset = std::move(Offset);
	Parms.bMakeClose = bMakeClose;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function GSEArteries.GSEArteriesFuncLib.MergePointsToStaticSurface
// (Final, Native, Static, Public, HasDefaults, BlueprintCallable)
// Parameters:
// class AArteriesActor*                   OwnerActor                                             (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class UArteriesObject*                  Target                                                 (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class FString                           InGroup                                                (Parm, ZeroConstructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FVector                          RayCastOffset                                          (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   RayDistance                                            (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class UArteriesObject*                  ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class UArteriesObject* UGSEArteriesFuncLib::MergePointsToStaticSurface(class AArteriesActor* OwnerActor, class UArteriesObject* Target, const class FString& InGroup, const struct FVector& RayCastOffset, float RayDistance)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("GSEArteriesFuncLib", "MergePointsToStaticSurface");

	Params::GSEArteriesFuncLib_MergePointsToStaticSurface Parms{};

	Parms.OwnerActor = OwnerActor;
	Parms.Target = Target;
	Parms.InGroup = std::move(InGroup);
	Parms.RayCastOffset = std::move(RayCastOffset);
	Parms.RayDistance = RayDistance;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function GSEArteries.GSEArteriesFuncLib.RayCastDown
// (Final, Native, Static, Public, HasDefaults, BlueprintCallable)
// Parameters:
// class AArteriesActor*                   OwnerActor                                             (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class UArteriesObject*                  BackBones                                              (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class FString                           InGroup                                                (Parm, ZeroConstructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FVector                          RayCastOffset                                          (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   RayCastDistance                                        (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   EndOffsetLength                                        (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    bHitLandscapeOnly                                      (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class UArteriesObject*                  ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class UArteriesObject* UGSEArteriesFuncLib::RayCastDown(class AArteriesActor* OwnerActor, class UArteriesObject* BackBones, const class FString& InGroup, const struct FVector& RayCastOffset, float RayCastDistance, float EndOffsetLength, bool bHitLandscapeOnly)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("GSEArteriesFuncLib", "RayCastDown");

	Params::GSEArteriesFuncLib_RayCastDown Parms{};

	Parms.OwnerActor = OwnerActor;
	Parms.BackBones = BackBones;
	Parms.InGroup = std::move(InGroup);
	Parms.RayCastOffset = std::move(RayCastOffset);
	Parms.RayCastDistance = RayCastDistance;
	Parms.EndOffsetLength = EndOffsetLength;
	Parms.bHitLandscapeOnly = bHitLandscapeOnly;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function GSEArteries.GSEArteriesFuncLib.ResampleAsMidPoints
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// class UArteriesObject*                  Target                                                 (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class UArteriesObject*                  ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class UArteriesObject* UGSEArteriesFuncLib::ResampleAsMidPoints(class UArteriesObject* Target)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("GSEArteriesFuncLib", "ResampleAsMidPoints");

	Params::GSEArteriesFuncLib_ResampleAsMidPoints Parms{};

	Parms.Target = Target;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function GSEArteries.GSEArteriesFuncLib.ResampleEachPrimsByLengths
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// class UArteriesObject*                  Target                                                 (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// TArray<float>                           SegmentLengthSets                                      (Parm, ZeroConstructor, AdvancedDisplay, NativeAccessSpecifierPublic)
// bool                                    ByEdge                                                 (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32                                   NumSegments                                            (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// EArteriesTangentOutputType              OutputType                                             (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class UArteriesObject*                  ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class UArteriesObject* UGSEArteriesFuncLib::ResampleEachPrimsByLengths(class UArteriesObject* Target, const TArray<float>& SegmentLengthSets, bool ByEdge, int32 NumSegments, EArteriesTangentOutputType OutputType)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("GSEArteriesFuncLib", "ResampleEachPrimsByLengths");

	Params::GSEArteriesFuncLib_ResampleEachPrimsByLengths Parms{};

	Parms.Target = Target;
	Parms.SegmentLengthSets = std::move(SegmentLengthSets);
	Parms.ByEdge = ByEdge;
	Parms.NumSegments = NumSegments;
	Parms.OutputType = OutputType;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function GSEArteries.GSEArteriesFuncLib.ResizePrimitive2D
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// class UArteriesObject*                  Target                                                 (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class FString                           InGroup                                                (Parm, ZeroConstructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   Distance                                               (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    bInwards                                               (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class UArteriesObject*                  ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class UArteriesObject* UGSEArteriesFuncLib::ResizePrimitive2D(class UArteriesObject* Target, const class FString& InGroup, float Distance, bool bInwards)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("GSEArteriesFuncLib", "ResizePrimitive2D");

	Params::GSEArteriesFuncLib_ResizePrimitive2D Parms{};

	Parms.Target = Target;
	Parms.InGroup = std::move(InGroup);
	Parms.Distance = Distance;
	Parms.bInwards = bInwards;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function GSEArteries.GSEArteriesFuncLib.ScalizeGridPrimitive
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// class UArteriesObject*                  Target                                                 (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   UnitLength                                             (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class UArteriesObject*                  ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class UArteriesObject* UGSEArteriesFuncLib::ScalizeGridPrimitive(class UArteriesObject* Target, float UnitLength)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("GSEArteriesFuncLib", "ScalizeGridPrimitive");

	Params::GSEArteriesFuncLib_ScalizeGridPrimitive Parms{};

	Parms.Target = Target;
	Parms.UnitLength = UnitLength;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function GSEArteries.GSEArteriesFuncLib.SmartResampleBySourceExtent
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// class UArteriesObject*                  Target                                                 (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// TArray<struct FSoftObjectPath>          InSources                                              (Parm, ZeroConstructor, AdvancedDisplay, NativeAccessSpecifierPublic)
// EGSATERIES_SAMPLE_AXIS                  InAxis                                                 (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   MinResampleLength                                      (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   MaxResampleLength                                      (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   ResampleScale                                          (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class UArteriesObject*                  ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class UArteriesObject* UGSEArteriesFuncLib::SmartResampleBySourceExtent(class UArteriesObject* Target, const TArray<struct FSoftObjectPath>& InSources, const EGSATERIES_SAMPLE_AXIS InAxis, float MinResampleLength, float MaxResampleLength, float ResampleScale)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("GSEArteriesFuncLib", "SmartResampleBySourceExtent");

	Params::GSEArteriesFuncLib_SmartResampleBySourceExtent Parms{};

	Parms.Target = Target;
	Parms.InSources = std::move(InSources);
	Parms.InAxis = InAxis;
	Parms.MinResampleLength = MinResampleLength;
	Parms.MaxResampleLength = MaxResampleLength;
	Parms.ResampleScale = ResampleScale;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}

}

