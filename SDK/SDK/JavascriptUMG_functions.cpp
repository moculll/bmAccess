#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: JavascriptUMG

#include "Basic.hpp"

#include "JavascriptUMG_classes.hpp"
#include "JavascriptUMG_parameters.hpp"


namespace SDK
{

// DelegateFunction JavascriptUMG.JavascriptComboButton.OnComboBoxOpened__DelegateSignature
// (Public, Delegate)

void UJavascriptComboButton::OnComboBoxOpened__DelegateSignature()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("JavascriptComboButton", "OnComboBoxOpened__DelegateSignature");

	UObject::ProcessEvent(Func, nullptr);
}


// DelegateFunction JavascriptUMG.JavascriptComboButton.OnGetContent__DelegateSignature
// (Public, Delegate)
// Parameters:
// struct FJavascriptSlateWidget           ReturnValue                                            (Parm, OutParm, ReturnParm, NativeAccessSpecifierPublic)

struct FJavascriptSlateWidget UJavascriptComboButton::OnGetContent__DelegateSignature()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("JavascriptComboButton", "OnGetContent__DelegateSignature");

	Params::JavascriptComboButton_OnGetContent__DelegateSignature Parms{};

	UObject::ProcessEvent(Func, &Parms);

	return Parms.ReturnValue;
}


// DelegateFunction JavascriptUMG.JavascriptComboButton.OnIsOpenChanged__DelegateSignature
// (Public, Delegate)
// Parameters:
// bool                                    Value                                                  (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UJavascriptComboButton::OnIsOpenChanged__DelegateSignature(bool Value)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("JavascriptComboButton", "OnIsOpenChanged__DelegateSignature");

	Params::JavascriptComboButton_OnIsOpenChanged__DelegateSignature Parms{};

	Parms.Value = Value;

	UObject::ProcessEvent(Func, &Parms);
}


// Function JavascriptUMG.JavascriptComboButton.SetIsOpen
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// bool                                    InIsOpen                                               (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    bFocusMenu                                             (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UJavascriptComboButton::SetIsOpen(bool InIsOpen, bool bFocusMenu)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("JavascriptComboButton", "SetIsOpen");

	Params::JavascriptComboButton_SetIsOpen Parms{};

	Parms.InIsOpen = InIsOpen;
	Parms.bFocusMenu = bFocusMenu;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function JavascriptUMG.JavascriptTextModel.CreateRun
// (Final, Native, Public, HasOutParams, BlueprintCallable)
// Parameters:
// struct FTextBlockStyle                  MessageTextStyle                                       (ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
// int32                                   BeginIndex                                             (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32                                   EndIndex                                               (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FJavascriptSlateTextRun          ReturnValue                                            (Parm, OutParm, ReturnParm, NativeAccessSpecifierPublic)

struct FJavascriptSlateTextRun UJavascriptTextModel::CreateRun(const struct FTextBlockStyle& MessageTextStyle, int32 BeginIndex, int32 EndIndex)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("JavascriptTextModel", "CreateRun");

	Params::JavascriptTextModel_CreateRun Parms{};

	Parms.MessageTextStyle = std::move(MessageTextStyle);
	Parms.BeginIndex = BeginIndex;
	Parms.EndIndex = EndIndex;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function JavascriptUMG.JavascriptTextModel.GetString
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// class FString                           ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class FString UJavascriptTextModel::GetString()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("JavascriptTextModel", "GetString");

	Params::JavascriptTextModel_GetString Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function JavascriptUMG.JavascriptTextModel.SetString
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// class FString                           String                                                 (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UJavascriptTextModel::SetString(const class FString& String)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("JavascriptTextModel", "SetString");

	Params::JavascriptTextModel_SetString Parms{};

	Parms.String = std::move(String);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// DelegateFunction JavascriptUMG.JavascriptMultiLineEditableTextBox.GetText__DelegateSignature
// (Public, Delegate, HasOutParams)
// Parameters:
// struct FJavascriptTextLayout            TextLayout                                             (ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
// class FString                           ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class FString UJavascriptMultiLineEditableTextBox::GetText__DelegateSignature(const struct FJavascriptTextLayout& TextLayout)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("JavascriptMultiLineEditableTextBox", "GetText__DelegateSignature");

	Params::JavascriptMultiLineEditableTextBox_GetText__DelegateSignature Parms{};

	Parms.TextLayout = std::move(TextLayout);

	UObject::ProcessEvent(Func, &Parms);

	return Parms.ReturnValue;
}


// Function JavascriptUMG.JavascriptMultiLineEditableTextBox.GoTo
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// int32                                   Line                                                   (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32                                   Offset                                                 (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UJavascriptMultiLineEditableTextBox::GoTo(int32 Line, int32 Offset)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("JavascriptMultiLineEditableTextBox", "GoTo");

	Params::JavascriptMultiLineEditableTextBox_GoTo Parms{};

	Parms.Line = Line;
	Parms.Offset = Offset;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// DelegateFunction JavascriptUMG.JavascriptMultiLineEditableTextBox.OnVScrollBarUserScrolled__DelegateSignature
// (MulticastDelegate, Public, Delegate)
// Parameters:
// float                                   Offset                                                 (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UJavascriptMultiLineEditableTextBox::OnVScrollBarUserScrolled__DelegateSignature(float Offset)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("JavascriptMultiLineEditableTextBox", "OnVScrollBarUserScrolled__DelegateSignature");

	Params::JavascriptMultiLineEditableTextBox_OnVScrollBarUserScrolled__DelegateSignature Parms{};

	Parms.Offset = Offset;

	UObject::ProcessEvent(Func, &Parms);
}


// Function JavascriptUMG.JavascriptMultiLineEditableTextBox.Refresh
// (Final, Native, Public, BlueprintCallable)

void UJavascriptMultiLineEditableTextBox::Refresh()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("JavascriptMultiLineEditableTextBox", "Refresh");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function JavascriptUMG.JavascriptMultiLineEditableTextBox.ScrollTo
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// int32                                   Line                                                   (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32                                   Offset                                                 (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UJavascriptMultiLineEditableTextBox::ScrollTo(int32 Line, int32 Offset)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("JavascriptMultiLineEditableTextBox", "ScrollTo");

	Params::JavascriptMultiLineEditableTextBox_ScrollTo Parms{};

	Parms.Line = Line;
	Parms.Offset = Offset;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// DelegateFunction JavascriptUMG.JavascriptMultiLineEditableTextBox.SetText__DelegateSignature
// (Public, Delegate, HasOutParams)
// Parameters:
// class FString                           InText                                                 (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FJavascriptTextLayout            TextLayout                                             (ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)

void UJavascriptMultiLineEditableTextBox::SetText__DelegateSignature(const class FString& InText, const struct FJavascriptTextLayout& TextLayout)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("JavascriptMultiLineEditableTextBox", "SetText__DelegateSignature");

	Params::JavascriptMultiLineEditableTextBox_SetText__DelegateSignature Parms{};

	Parms.InText = std::move(InText);
	Parms.TextLayout = std::move(TextLayout);

	UObject::ProcessEvent(Func, &Parms);
}


// Function JavascriptUMG.JavascriptGameViewport.SetViewLocation
// (Final, Native, Public, HasDefaults, BlueprintCallable)
// Parameters:
// struct FVector                          Location                                               (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UJavascriptGameViewport::SetViewLocation(const struct FVector& Location)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("JavascriptGameViewport", "SetViewLocation");

	Params::JavascriptGameViewport_SetViewLocation Parms{};

	Parms.Location = std::move(Location);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function JavascriptUMG.JavascriptGameViewport.SetViewRotation
// (Final, Native, Public, HasDefaults, BlueprintCallable)
// Parameters:
// struct FRotator                         Rotation                                               (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)

void UJavascriptGameViewport::SetViewRotation(const struct FRotator& Rotation)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("JavascriptGameViewport", "SetViewRotation");

	Params::JavascriptGameViewport_SetViewRotation Parms{};

	Parms.Rotation = std::move(Rotation);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function JavascriptUMG.JavascriptGameViewport.Spawn
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// TSubclassOf<class AActor>               ActorClass                                             (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class AActor*                           ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class AActor* UJavascriptGameViewport::Spawn(TSubclassOf<class AActor> ActorClass)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("JavascriptGameViewport", "Spawn");

	Params::JavascriptGameViewport_Spawn Parms{};

	Parms.ActorClass = ActorClass;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function JavascriptUMG.JavascriptGameViewport.GetViewLocation
// (Final, Native, Public, HasDefaults, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// struct FVector                          ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

struct FVector UJavascriptGameViewport::GetViewLocation() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("JavascriptGameViewport", "GetViewLocation");

	Params::JavascriptGameViewport_GetViewLocation Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function JavascriptUMG.JavascriptGameViewport.GetViewportWorld
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// class UWorld*                           ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class UWorld* UJavascriptGameViewport::GetViewportWorld() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("JavascriptGameViewport", "GetViewportWorld");

	Params::JavascriptGameViewport_GetViewportWorld Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function JavascriptUMG.JavascriptGameViewport.GetViewRotation
// (Final, Native, Public, HasDefaults, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// struct FRotator                         ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)

struct FRotator UJavascriptGameViewport::GetViewRotation() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("JavascriptGameViewport", "GetViewRotation");

	Params::JavascriptGameViewport_GetViewRotation Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function JavascriptUMG.JavascriptIntSpinBox.ClearMaxSliderValue
// (Final, Native, Public, BlueprintCallable)

void UJavascriptIntSpinBox::ClearMaxSliderValue()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("JavascriptIntSpinBox", "ClearMaxSliderValue");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function JavascriptUMG.JavascriptIntSpinBox.ClearMaxValue
// (Final, Native, Public, BlueprintCallable)

void UJavascriptIntSpinBox::ClearMaxValue()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("JavascriptIntSpinBox", "ClearMaxValue");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function JavascriptUMG.JavascriptIntSpinBox.ClearMinSliderValue
// (Final, Native, Public, BlueprintCallable)

void UJavascriptIntSpinBox::ClearMinSliderValue()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("JavascriptIntSpinBox", "ClearMinSliderValue");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function JavascriptUMG.JavascriptIntSpinBox.ClearMinValue
// (Final, Native, Public, BlueprintCallable)

void UJavascriptIntSpinBox::ClearMinValue()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("JavascriptIntSpinBox", "ClearMinValue");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// DelegateFunction JavascriptUMG.JavascriptIntSpinBox.OnSpinBoxBeginSliderMovement__DelegateSignature
// (MulticastDelegate, Public, Delegate)

void UJavascriptIntSpinBox::OnSpinBoxBeginSliderMovement__DelegateSignature()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("JavascriptIntSpinBox", "OnSpinBoxBeginSliderMovement__DelegateSignature");

	UObject::ProcessEvent(Func, nullptr);
}


// DelegateFunction JavascriptUMG.JavascriptIntSpinBox.OnSpinBoxValueChangedEvent__DelegateSignature
// (MulticastDelegate, Public, Delegate)
// Parameters:
// int32                                   InValue                                                (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UJavascriptIntSpinBox::OnSpinBoxValueChangedEvent__DelegateSignature(int32 InValue)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("JavascriptIntSpinBox", "OnSpinBoxValueChangedEvent__DelegateSignature");

	Params::JavascriptIntSpinBox_OnSpinBoxValueChangedEvent__DelegateSignature Parms{};

	Parms.InValue = InValue;

	UObject::ProcessEvent(Func, &Parms);
}


// DelegateFunction JavascriptUMG.JavascriptIntSpinBox.OnSpinBoxValueCommittedEvent__DelegateSignature
// (MulticastDelegate, Public, Delegate)
// Parameters:
// int32                                   InValue                                                (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// ETextCommit                             CommitMethod                                           (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UJavascriptIntSpinBox::OnSpinBoxValueCommittedEvent__DelegateSignature(int32 InValue, ETextCommit CommitMethod)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("JavascriptIntSpinBox", "OnSpinBoxValueCommittedEvent__DelegateSignature");

	Params::JavascriptIntSpinBox_OnSpinBoxValueCommittedEvent__DelegateSignature Parms{};

	Parms.InValue = InValue;
	Parms.CommitMethod = CommitMethod;

	UObject::ProcessEvent(Func, &Parms);
}


// Function JavascriptUMG.JavascriptIntSpinBox.SetForegroundColor
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// struct FSlateColor                      InForegroundColor                                      (Parm, NativeAccessSpecifierPublic)

void UJavascriptIntSpinBox::SetForegroundColor(const struct FSlateColor& InForegroundColor)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("JavascriptIntSpinBox", "SetForegroundColor");

	Params::JavascriptIntSpinBox_SetForegroundColor Parms{};

	Parms.InForegroundColor = std::move(InForegroundColor);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function JavascriptUMG.JavascriptIntSpinBox.SetMaxSliderValue
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// int32                                   NewValue                                               (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UJavascriptIntSpinBox::SetMaxSliderValue(int32 NewValue)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("JavascriptIntSpinBox", "SetMaxSliderValue");

	Params::JavascriptIntSpinBox_SetMaxSliderValue Parms{};

	Parms.NewValue = NewValue;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function JavascriptUMG.JavascriptIntSpinBox.SetMaxValue
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// int32                                   NewValue                                               (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UJavascriptIntSpinBox::SetMaxValue(int32 NewValue)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("JavascriptIntSpinBox", "SetMaxValue");

	Params::JavascriptIntSpinBox_SetMaxValue Parms{};

	Parms.NewValue = NewValue;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function JavascriptUMG.JavascriptIntSpinBox.SetMinSliderValue
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// int32                                   NewValue                                               (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UJavascriptIntSpinBox::SetMinSliderValue(int32 NewValue)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("JavascriptIntSpinBox", "SetMinSliderValue");

	Params::JavascriptIntSpinBox_SetMinSliderValue Parms{};

	Parms.NewValue = NewValue;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function JavascriptUMG.JavascriptIntSpinBox.SetMinValue
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// int32                                   NewValue                                               (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UJavascriptIntSpinBox::SetMinValue(int32 NewValue)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("JavascriptIntSpinBox", "SetMinValue");

	Params::JavascriptIntSpinBox_SetMinValue Parms{};

	Parms.NewValue = NewValue;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function JavascriptUMG.JavascriptIntSpinBox.SetValue
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// int32                                   NewValue                                               (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UJavascriptIntSpinBox::SetValue(int32 NewValue)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("JavascriptIntSpinBox", "SetValue");

	Params::JavascriptIntSpinBox_SetValue Parms{};

	Parms.NewValue = NewValue;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function JavascriptUMG.JavascriptIntSpinBox.GetMaxSliderValue
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// int32                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

int32 UJavascriptIntSpinBox::GetMaxSliderValue() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("JavascriptIntSpinBox", "GetMaxSliderValue");

	Params::JavascriptIntSpinBox_GetMaxSliderValue Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function JavascriptUMG.JavascriptIntSpinBox.GetMaxValue
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// int32                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

int32 UJavascriptIntSpinBox::GetMaxValue() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("JavascriptIntSpinBox", "GetMaxValue");

	Params::JavascriptIntSpinBox_GetMaxValue Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function JavascriptUMG.JavascriptIntSpinBox.GetMinSliderValue
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// int32                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

int32 UJavascriptIntSpinBox::GetMinSliderValue() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("JavascriptIntSpinBox", "GetMinSliderValue");

	Params::JavascriptIntSpinBox_GetMinSliderValue Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function JavascriptUMG.JavascriptIntSpinBox.GetMinValue
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// int32                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

int32 UJavascriptIntSpinBox::GetMinValue() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("JavascriptIntSpinBox", "GetMinValue");

	Params::JavascriptIntSpinBox_GetMinValue Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function JavascriptUMG.JavascriptIntSpinBox.GetValue
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// int32                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

int32 UJavascriptIntSpinBox::GetValue() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("JavascriptIntSpinBox", "GetValue");

	Params::JavascriptIntSpinBox_GetValue Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function JavascriptUMG.JavascriptTreeView.ClearDoubleClickSelection
// (Final, Native, Public, BlueprintCallable)

void UJavascriptTreeView::ClearDoubleClickSelection()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("JavascriptTreeView", "ClearDoubleClickSelection");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function JavascriptUMG.JavascriptTreeView.GetDoubleClickedItems
// (Final, Native, Public, HasOutParams, BlueprintCallable)
// Parameters:
// TArray<class UObject*>                  OutItems                                               (Parm, OutParm, ZeroConstructor, NativeAccessSpecifierPublic)

void UJavascriptTreeView::GetDoubleClickedItems(TArray<class UObject*>* OutItems)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("JavascriptTreeView", "GetDoubleClickedItems");

	Params::JavascriptTreeView_GetDoubleClickedItems Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	if (OutItems != nullptr)
		*OutItems = std::move(Parms.OutItems);
}


// Function JavascriptUMG.JavascriptTreeView.GetSelectedItems
// (Native, Event, Public, HasOutParams, BlueprintEvent)
// Parameters:
// TArray<class UObject*>                  OutItems                                               (Parm, OutParm, ZeroConstructor, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UJavascriptTreeView::GetSelectedItems(TArray<class UObject*>* OutItems)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("JavascriptTreeView", "GetSelectedItems");

	Params::JavascriptTreeView_GetSelectedItems Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	if (OutItems != nullptr)
		*OutItems = std::move(Parms.OutItems);

	return Parms.ReturnValue;
}


// Function JavascriptUMG.JavascriptTreeView.IsDoubleClickSelection
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// class UObject*                          SelectedItem                                           (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UJavascriptTreeView::IsDoubleClickSelection(class UObject* SelectedItem)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("JavascriptTreeView", "IsDoubleClickSelection");

	Params::JavascriptTreeView_IsDoubleClickSelection Parms{};

	Parms.SelectedItem = SelectedItem;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function JavascriptUMG.JavascriptTreeView.IsItemExpanded
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// class UObject*                          InItem                                                 (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UJavascriptTreeView::IsItemExpanded(class UObject* InItem)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("JavascriptTreeView", "IsItemExpanded");

	Params::JavascriptTreeView_IsItemExpanded Parms{};

	Parms.InItem = InItem;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// DelegateFunction JavascriptUMG.JavascriptTreeView.OnContextMenuOpening__DelegateSignature
// (Public, Delegate)
// Parameters:
// class UJavascriptTreeView*              Instance                                               (Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class UWidget*                          ReturnValue                                            (ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class UWidget* UJavascriptTreeView::OnContextMenuOpening__DelegateSignature(class UJavascriptTreeView* Instance)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("JavascriptTreeView", "OnContextMenuOpening__DelegateSignature");

	Params::JavascriptTreeView_OnContextMenuOpening__DelegateSignature Parms{};

	Parms.Instance = Instance;

	UObject::ProcessEvent(Func, &Parms);

	return Parms.ReturnValue;
}


// Function JavascriptUMG.JavascriptTreeView.OnDoubleClick
// (Event, Public, BlueprintEvent)
// Parameters:
// class UObject*                          Object                                                 (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UJavascriptTreeView::OnDoubleClick(class UObject* Object)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("JavascriptTreeView", "OnDoubleClick");

	Params::JavascriptTreeView_OnDoubleClick Parms{};

	Parms.Object = Object;

	UObject::ProcessEvent(Func, &Parms);
}


// DelegateFunction JavascriptUMG.JavascriptTreeView.OnExpansionChanged__DelegateSignature
// (Public, Delegate)
// Parameters:
// class UObject*                          Item                                                   (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    bExpanded                                              (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class UJavascriptTreeView*              Instance                                               (Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UJavascriptTreeView::OnExpansionChanged__DelegateSignature(class UObject* Item, bool bExpanded, class UJavascriptTreeView* Instance)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("JavascriptTreeView", "OnExpansionChanged__DelegateSignature");

	Params::JavascriptTreeView_OnExpansionChanged__DelegateSignature Parms{};

	Parms.Item = Item;
	Parms.bExpanded = bExpanded;
	Parms.Instance = Instance;

	UObject::ProcessEvent(Func, &Parms);
}


// DelegateFunction JavascriptUMG.JavascriptTreeView.OnGenerateRow__DelegateSignature
// (Public, Delegate)
// Parameters:
// class UObject*                          Object                                                 (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class FName                             ID                                                     (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class UJavascriptTreeView*              Instance                                               (Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class UWidget*                          ReturnValue                                            (ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class UWidget* UJavascriptTreeView::OnGenerateRow__DelegateSignature(class UObject* Object, class FName ID, class UJavascriptTreeView* Instance)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("JavascriptTreeView", "OnGenerateRow__DelegateSignature");

	Params::JavascriptTreeView_OnGenerateRow__DelegateSignature Parms{};

	Parms.Object = Object;
	Parms.ID = ID;
	Parms.Instance = Instance;

	UObject::ProcessEvent(Func, &Parms);

	return Parms.ReturnValue;
}


// DelegateFunction JavascriptUMG.JavascriptTreeView.OnGetChildrenUObject__DelegateSignature
// (Public, Delegate)
// Parameters:
// class UObject*                          Item                                                   (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class UJavascriptTreeView*              Instance                                               (Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UJavascriptTreeView::OnGetChildrenUObject__DelegateSignature(class UObject* Item, class UJavascriptTreeView* Instance)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("JavascriptTreeView", "OnGetChildrenUObject__DelegateSignature");

	Params::JavascriptTreeView_OnGetChildrenUObject__DelegateSignature Parms{};

	Parms.Item = Item;
	Parms.Instance = Instance;

	UObject::ProcessEvent(Func, &Parms);
}


// Function JavascriptUMG.JavascriptTreeView.OnSelectionChanged
// (Event, Public, BlueprintEvent)
// Parameters:
// class UObject*                          Object                                                 (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// ESelectInfo                             Type                                                   (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UJavascriptTreeView::OnSelectionChanged(class UObject* Object, ESelectInfo Type)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("JavascriptTreeView", "OnSelectionChanged");

	Params::JavascriptTreeView_OnSelectionChanged Parms{};

	Parms.Object = Object;
	Parms.Type = Type;

	UObject::ProcessEvent(Func, &Parms);
}


// Function JavascriptUMG.JavascriptTreeView.RequestTreeRefresh
// (Final, Native, Public, BlueprintCallable)

void UJavascriptTreeView::RequestTreeRefresh()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("JavascriptTreeView", "RequestTreeRefresh");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function JavascriptUMG.JavascriptTreeView.SetDoubleClickSelection
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// class UObject*                          SelectedItem                                           (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UJavascriptTreeView::SetDoubleClickSelection(class UObject* SelectedItem)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("JavascriptTreeView", "SetDoubleClickSelection");

	Params::JavascriptTreeView_SetDoubleClickSelection Parms{};

	Parms.SelectedItem = SelectedItem;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function JavascriptUMG.JavascriptTreeView.SetItemExpansion
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// class UObject*                          InItem                                                 (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    InShouldExpandItem                                     (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UJavascriptTreeView::SetItemExpansion(class UObject* InItem, bool InShouldExpandItem)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("JavascriptTreeView", "SetItemExpansion");

	Params::JavascriptTreeView_SetItemExpansion Parms{};

	Parms.InItem = InItem;
	Parms.InShouldExpandItem = InShouldExpandItem;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function JavascriptUMG.JavascriptTreeView.SetSelection
// (Native, Event, Public, BlueprintEvent)
// Parameters:
// class UObject*                          SoleSelectedItem                                       (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UJavascriptTreeView::SetSelection(class UObject* SoleSelectedItem)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("JavascriptTreeView", "SetSelection");

	Params::JavascriptTreeView_SetSelection Parms{};

	Parms.SoleSelectedItem = SoleSelectedItem;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function JavascriptUMG.JavascriptTreeView.SetSingleExpandedItem
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// class UObject*                          InItem                                                 (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UJavascriptTreeView::SetSingleExpandedItem(class UObject* InItem)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("JavascriptTreeView", "SetSingleExpandedItem");

	Params::JavascriptTreeView_SetSingleExpandedItem Parms{};

	Parms.InItem = InItem;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function JavascriptUMG.JavascriptListView.OnClick
// (Event, Public, BlueprintEvent)
// Parameters:
// class UObject*                          Object                                                 (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UJavascriptListView::OnClick(class UObject* Object)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("JavascriptListView", "OnClick");

	Params::JavascriptListView_OnClick Parms{};

	Parms.Object = Object;

	UObject::ProcessEvent(Func, &Parms);
}


// Function JavascriptUMG.JavascriptListView.RequestListRefresh
// (Final, Native, Public, BlueprintCallable)

void UJavascriptListView::RequestListRefresh()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("JavascriptListView", "RequestListRefresh");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function JavascriptUMG.JavascriptRichTextBlockHyperlinkDecorator.GetMetaData
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// class FString                           Key                                                    (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class FString                           ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class FString UJavascriptRichTextBlockHyperlinkDecorator::GetMetaData(const class FString& Key)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("JavascriptRichTextBlockHyperlinkDecorator", "GetMetaData");

	Params::JavascriptRichTextBlockHyperlinkDecorator_GetMetaData Parms{};

	Parms.Key = std::move(Key);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// DelegateFunction JavascriptUMG.JavascriptSearchBox.OnEditableTextChangedEvent__DelegateSignature
// (MulticastDelegate, Public, Delegate, HasOutParams)
// Parameters:
// class FText                             Text_0                                                 (ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)

void UJavascriptSearchBox::OnEditableTextChangedEvent__DelegateSignature(const class FText& Text_0)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("JavascriptSearchBox", "OnEditableTextChangedEvent__DelegateSignature");

	Params::JavascriptSearchBox_OnEditableTextChangedEvent__DelegateSignature Parms{};

	Parms.Text_0 = std::move(Text_0);

	UObject::ProcessEvent(Func, &Parms);
}


// DelegateFunction JavascriptUMG.JavascriptSearchBox.OnEditableTextCommittedEvent__DelegateSignature
// (MulticastDelegate, Public, Delegate, HasOutParams)
// Parameters:
// class FText                             Text_0                                                 (ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
// ETextCommit                             CommitMethod                                           (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UJavascriptSearchBox::OnEditableTextCommittedEvent__DelegateSignature(const class FText& Text_0, ETextCommit CommitMethod)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("JavascriptSearchBox", "OnEditableTextCommittedEvent__DelegateSignature");

	Params::JavascriptSearchBox_OnEditableTextCommittedEvent__DelegateSignature Parms{};

	Parms.Text_0 = std::move(Text_0);
	Parms.CommitMethod = CommitMethod;

	UObject::ProcessEvent(Func, &Parms);
}


// Function JavascriptUMG.JavascriptSearchBox.OnKeyDown
// (BlueprintCosmetic, Event, Public, BlueprintEvent)
// Parameters:
// struct FGeometry                        MyGeometry                                             (Parm, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
// struct FKeyEvent                        InKeyEvent                                             (Parm, NativeAccessSpecifierPublic)
// struct FEventReply                      ReturnValue                                            (Parm, OutParm, ReturnParm, NativeAccessSpecifierPublic)

struct FEventReply UJavascriptSearchBox::OnKeyDown(const struct FGeometry& MyGeometry, const struct FKeyEvent& InKeyEvent)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("JavascriptSearchBox", "OnKeyDown");

	Params::JavascriptSearchBox_OnKeyDown Parms{};

	Parms.MyGeometry = std::move(MyGeometry);
	Parms.InKeyEvent = std::move(InKeyEvent);

	UObject::ProcessEvent(Func, &Parms);

	return Parms.ReturnValue;
}


// Function JavascriptUMG.JavascriptSearchBox.SetHintText
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// class FText                             InHintText                                             (Parm, NativeAccessSpecifierPublic)

void UJavascriptSearchBox::SetHintText(const class FText& InHintText)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("JavascriptSearchBox", "SetHintText");

	Params::JavascriptSearchBox_SetHintText Parms{};

	Parms.InHintText = std::move(InHintText);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function JavascriptUMG.JavascriptSearchBox.SetText
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// class FText                             InText                                                 (Parm, NativeAccessSpecifierPublic)

void UJavascriptSearchBox::SetText(const class FText& InText)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("JavascriptSearchBox", "SetText");

	Params::JavascriptSearchBox_SetText Parms{};

	Parms.InText = std::move(InText);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// DelegateFunction JavascriptUMG.JavascriptToolbarButtonContext.BoolDelegate__DelegateSignature
// (Public, Delegate)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UJavascriptToolbarButtonContext::BoolDelegate__DelegateSignature()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("JavascriptToolbarButtonContext", "BoolDelegate__DelegateSignature");

	Params::JavascriptToolbarButtonContext_BoolDelegate__DelegateSignature Parms{};

	UObject::ProcessEvent(Func, &Parms);

	return Parms.ReturnValue;
}


// DelegateFunction JavascriptUMG.JavascriptToolbarButtonContext.IconDelegate__DelegateSignature
// (Public, Delegate)
// Parameters:
// struct FJavascriptSlateIcon             ReturnValue                                            (Parm, OutParm, ReturnParm, NoDestructor, NativeAccessSpecifierPublic)

struct FJavascriptSlateIcon UJavascriptToolbarButtonContext::IconDelegate__DelegateSignature()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("JavascriptToolbarButtonContext", "IconDelegate__DelegateSignature");

	Params::JavascriptToolbarButtonContext_IconDelegate__DelegateSignature Parms{};

	UObject::ProcessEvent(Func, &Parms);

	return Parms.ReturnValue;
}


// DelegateFunction JavascriptUMG.JavascriptToolbarButtonContext.JavascriptCanExecuteActionWithEditingObject__DelegateSignature
// (Public, Delegate)
// Parameters:
// class UObject*                          EditingObject                                          (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UJavascriptToolbarButtonContext::JavascriptCanExecuteActionWithEditingObject__DelegateSignature(class UObject* EditingObject)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("JavascriptToolbarButtonContext", "JavascriptCanExecuteActionWithEditingObject__DelegateSignature");

	Params::JavascriptToolbarButtonContext_JavascriptCanExecuteActionWithEditingObject__DelegateSignature Parms{};

	Parms.EditingObject = EditingObject;

	UObject::ProcessEvent(Func, &Parms);

	return Parms.ReturnValue;
}


// DelegateFunction JavascriptUMG.JavascriptToolbarButtonContext.JavascriptExecuteActionWithEditingObject__DelegateSignature
// (Public, Delegate)
// Parameters:
// class UObject*                          EditingObject                                          (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UJavascriptToolbarButtonContext::JavascriptExecuteActionWithEditingObject__DelegateSignature(class UObject* EditingObject)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("JavascriptToolbarButtonContext", "JavascriptExecuteActionWithEditingObject__DelegateSignature");

	Params::JavascriptToolbarButtonContext_JavascriptExecuteActionWithEditingObject__DelegateSignature Parms{};

	Parms.EditingObject = EditingObject;

	UObject::ProcessEvent(Func, &Parms);
}


// Function JavascriptUMG.JavascriptToolbarButtonContext.MarkReferencedObject
// (Final, Native, Public, BlueprintCallable)

void UJavascriptToolbarButtonContext::MarkReferencedObject()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("JavascriptToolbarButtonContext", "MarkReferencedObject");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// DelegateFunction JavascriptUMG.JavascriptToolbarButtonContext.TextDelegate__DelegateSignature
// (Public, Delegate)
// Parameters:
// class FText                             ReturnValue                                            (Parm, OutParm, ReturnParm, NativeAccessSpecifierPublic)

class FText UJavascriptToolbarButtonContext::TextDelegate__DelegateSignature()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("JavascriptToolbarButtonContext", "TextDelegate__DelegateSignature");

	Params::JavascriptToolbarButtonContext_TextDelegate__DelegateSignature Parms{};

	UObject::ProcessEvent(Func, &Parms);

	return Parms.ReturnValue;
}


// Function JavascriptUMG.JavascriptToolbarButtonContext.UnmarkReferencedObject
// (Final, Native, Public, BlueprintCallable)

void UJavascriptToolbarButtonContext::UnmarkReferencedObject()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("JavascriptToolbarButtonContext", "UnmarkReferencedObject");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function JavascriptUMG.JavascriptStyleSetLibrary.GetBrush
// (Final, Native, Static, Public, HasOutParams, BlueprintCallable)
// Parameters:
// struct FJavascriptStyleSet              Handle                                                 (ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
// class FName                             StyleName                                              (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FSlateBrush                      ReturnValue                                            (Parm, OutParm, ReturnParm, NativeAccessSpecifierPublic)

struct FSlateBrush UJavascriptStyleSetLibrary::GetBrush(const struct FJavascriptStyleSet& Handle, const class FName& StyleName)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("JavascriptStyleSetLibrary", "GetBrush");

	Params::JavascriptStyleSetLibrary_GetBrush Parms{};

	Parms.Handle = std::move(Handle);
	Parms.StyleName = StyleName;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function JavascriptUMG.JavascriptStyleSetLibrary.GetButtonStyle
// (Final, Native, Static, Public, HasOutParams, BlueprintCallable)
// Parameters:
// struct FJavascriptStyleSet              Handle                                                 (ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
// class FName                             StyleName                                              (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FButtonStyle                     ReturnValue                                            (Parm, OutParm, ReturnParm, NativeAccessSpecifierPublic)

struct FButtonStyle UJavascriptStyleSetLibrary::GetButtonStyle(const struct FJavascriptStyleSet& Handle, const class FName& StyleName)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("JavascriptStyleSetLibrary", "GetButtonStyle");

	Params::JavascriptStyleSetLibrary_GetButtonStyle Parms{};

	Parms.Handle = std::move(Handle);
	Parms.StyleName = StyleName;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function JavascriptUMG.JavascriptStyleSetLibrary.GetCheckBoxStyle
// (Final, Native, Static, Public, HasOutParams, BlueprintCallable)
// Parameters:
// struct FJavascriptStyleSet              Handle                                                 (ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
// class FName                             StyleName                                              (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FCheckBoxStyle                   ReturnValue                                            (Parm, OutParm, ReturnParm, NativeAccessSpecifierPublic)

struct FCheckBoxStyle UJavascriptStyleSetLibrary::GetCheckBoxStyle(const struct FJavascriptStyleSet& Handle, const class FName& StyleName)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("JavascriptStyleSetLibrary", "GetCheckBoxStyle");

	Params::JavascriptStyleSetLibrary_GetCheckBoxStyle Parms{};

	Parms.Handle = std::move(Handle);
	Parms.StyleName = StyleName;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function JavascriptUMG.JavascriptStyleSetLibrary.GetColor
// (Final, Native, Static, Public, HasOutParams, HasDefaults, BlueprintCallable)
// Parameters:
// struct FJavascriptStyleSet              Handle                                                 (ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
// class FName                             StyleName                                              (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FLinearColor                     ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

struct FLinearColor UJavascriptStyleSetLibrary::GetColor(const struct FJavascriptStyleSet& Handle, const class FName& StyleName)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("JavascriptStyleSetLibrary", "GetColor");

	Params::JavascriptStyleSetLibrary_GetColor Parms{};

	Parms.Handle = std::move(Handle);
	Parms.StyleName = StyleName;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function JavascriptUMG.JavascriptStyleSetLibrary.GetComboBoxStyle
// (Final, Native, Static, Public, HasOutParams, BlueprintCallable)
// Parameters:
// struct FJavascriptStyleSet              Handle                                                 (ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
// class FName                             StyleName                                              (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FComboBoxStyle                   ReturnValue                                            (Parm, OutParm, ReturnParm, NativeAccessSpecifierPublic)

struct FComboBoxStyle UJavascriptStyleSetLibrary::GetComboBoxStyle(const struct FJavascriptStyleSet& Handle, const class FName& StyleName)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("JavascriptStyleSetLibrary", "GetComboBoxStyle");

	Params::JavascriptStyleSetLibrary_GetComboBoxStyle Parms{};

	Parms.Handle = std::move(Handle);
	Parms.StyleName = StyleName;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function JavascriptUMG.JavascriptStyleSetLibrary.GetComboButtonStyle
// (Final, Native, Static, Public, HasOutParams, BlueprintCallable)
// Parameters:
// struct FJavascriptStyleSet              Handle                                                 (ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
// class FName                             StyleName                                              (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FComboButtonStyle                ReturnValue                                            (Parm, OutParm, ReturnParm, NativeAccessSpecifierPublic)

struct FComboButtonStyle UJavascriptStyleSetLibrary::GetComboButtonStyle(const struct FJavascriptStyleSet& Handle, const class FName& StyleName)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("JavascriptStyleSetLibrary", "GetComboButtonStyle");

	Params::JavascriptStyleSetLibrary_GetComboButtonStyle Parms{};

	Parms.Handle = std::move(Handle);
	Parms.StyleName = StyleName;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function JavascriptUMG.JavascriptStyleSetLibrary.GetEditableTextBoxStyle
// (Final, Native, Static, Public, HasOutParams, BlueprintCallable)
// Parameters:
// struct FJavascriptStyleSet              Handle                                                 (ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
// class FName                             StyleName                                              (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FEditableTextBoxStyle            ReturnValue                                            (Parm, OutParm, ReturnParm, NativeAccessSpecifierPublic)

struct FEditableTextBoxStyle UJavascriptStyleSetLibrary::GetEditableTextBoxStyle(const struct FJavascriptStyleSet& Handle, const class FName& StyleName)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("JavascriptStyleSetLibrary", "GetEditableTextBoxStyle");

	Params::JavascriptStyleSetLibrary_GetEditableTextBoxStyle Parms{};

	Parms.Handle = std::move(Handle);
	Parms.StyleName = StyleName;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function JavascriptUMG.JavascriptStyleSetLibrary.GetEditableTextStyle
// (Final, Native, Static, Public, HasOutParams, BlueprintCallable)
// Parameters:
// struct FJavascriptStyleSet              Handle                                                 (ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
// class FName                             StyleName                                              (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FEditableTextStyle               ReturnValue                                            (Parm, OutParm, ReturnParm, NativeAccessSpecifierPublic)

struct FEditableTextStyle UJavascriptStyleSetLibrary::GetEditableTextStyle(const struct FJavascriptStyleSet& Handle, const class FName& StyleName)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("JavascriptStyleSetLibrary", "GetEditableTextStyle");

	Params::JavascriptStyleSetLibrary_GetEditableTextStyle Parms{};

	Parms.Handle = std::move(Handle);
	Parms.StyleName = StyleName;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function JavascriptUMG.JavascriptStyleSetLibrary.GetFloat
// (Final, Native, Static, Public, HasOutParams, BlueprintCallable)
// Parameters:
// struct FJavascriptStyleSet              Handle                                                 (ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
// class FName                             StyleName                                              (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

float UJavascriptStyleSetLibrary::GetFloat(const struct FJavascriptStyleSet& Handle, const class FName& StyleName)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("JavascriptStyleSetLibrary", "GetFloat");

	Params::JavascriptStyleSetLibrary_GetFloat Parms{};

	Parms.Handle = std::move(Handle);
	Parms.StyleName = StyleName;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function JavascriptUMG.JavascriptStyleSetLibrary.GetFontStyle
// (Final, Native, Static, Public, HasOutParams, BlueprintCallable)
// Parameters:
// struct FJavascriptStyleSet              Handle                                                 (ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
// class FName                             StyleName                                              (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FSlateFontInfo                   ReturnValue                                            (Parm, OutParm, ReturnParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)

struct FSlateFontInfo UJavascriptStyleSetLibrary::GetFontStyle(const struct FJavascriptStyleSet& Handle, const class FName& StyleName)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("JavascriptStyleSetLibrary", "GetFontStyle");

	Params::JavascriptStyleSetLibrary_GetFontStyle Parms{};

	Parms.Handle = std::move(Handle);
	Parms.StyleName = StyleName;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function JavascriptUMG.JavascriptStyleSetLibrary.GetMargin
// (Final, Native, Static, Public, HasOutParams, BlueprintCallable)
// Parameters:
// struct FJavascriptStyleSet              Handle                                                 (ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
// class FName                             StyleName                                              (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FMargin                          ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)

struct FMargin UJavascriptStyleSetLibrary::GetMargin(const struct FJavascriptStyleSet& Handle, const class FName& StyleName)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("JavascriptStyleSetLibrary", "GetMargin");

	Params::JavascriptStyleSetLibrary_GetMargin Parms{};

	Parms.Handle = std::move(Handle);
	Parms.StyleName = StyleName;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function JavascriptUMG.JavascriptStyleSetLibrary.GetProgressBarStyle
// (Final, Native, Static, Public, HasOutParams, BlueprintCallable)
// Parameters:
// struct FJavascriptStyleSet              Handle                                                 (ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
// class FName                             StyleName                                              (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FProgressBarStyle                ReturnValue                                            (Parm, OutParm, ReturnParm, NativeAccessSpecifierPublic)

struct FProgressBarStyle UJavascriptStyleSetLibrary::GetProgressBarStyle(const struct FJavascriptStyleSet& Handle, const class FName& StyleName)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("JavascriptStyleSetLibrary", "GetProgressBarStyle");

	Params::JavascriptStyleSetLibrary_GetProgressBarStyle Parms{};

	Parms.Handle = std::move(Handle);
	Parms.StyleName = StyleName;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function JavascriptUMG.JavascriptStyleSetLibrary.GetSlateColor
// (Final, Native, Static, Public, HasOutParams, BlueprintCallable)
// Parameters:
// struct FJavascriptStyleSet              Handle                                                 (ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
// class FName                             StyleName                                              (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FSlateColor                      ReturnValue                                            (Parm, OutParm, ReturnParm, NativeAccessSpecifierPublic)

struct FSlateColor UJavascriptStyleSetLibrary::GetSlateColor(const struct FJavascriptStyleSet& Handle, const class FName& StyleName)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("JavascriptStyleSetLibrary", "GetSlateColor");

	Params::JavascriptStyleSetLibrary_GetSlateColor Parms{};

	Parms.Handle = std::move(Handle);
	Parms.StyleName = StyleName;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function JavascriptUMG.JavascriptStyleSetLibrary.GetSound
// (Final, Native, Static, Public, HasOutParams, BlueprintCallable)
// Parameters:
// struct FJavascriptStyleSet              Handle                                                 (ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
// class FName                             StyleName                                              (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FSlateSound                      ReturnValue                                            (Parm, OutParm, ReturnParm, NoDestructor, NativeAccessSpecifierPublic)

struct FSlateSound UJavascriptStyleSetLibrary::GetSound(const struct FJavascriptStyleSet& Handle, const class FName& StyleName)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("JavascriptStyleSetLibrary", "GetSound");

	Params::JavascriptStyleSetLibrary_GetSound Parms{};

	Parms.Handle = std::move(Handle);
	Parms.StyleName = StyleName;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function JavascriptUMG.JavascriptStyleSetLibrary.GetTextBlockStyle
// (Final, Native, Static, Public, HasOutParams, BlueprintCallable)
// Parameters:
// struct FJavascriptStyleSet              Handle                                                 (ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
// class FName                             StyleName                                              (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FTextBlockStyle                  ReturnValue                                            (Parm, OutParm, ReturnParm, NativeAccessSpecifierPublic)

struct FTextBlockStyle UJavascriptStyleSetLibrary::GetTextBlockStyle(const struct FJavascriptStyleSet& Handle, const class FName& StyleName)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("JavascriptStyleSetLibrary", "GetTextBlockStyle");

	Params::JavascriptStyleSetLibrary_GetTextBlockStyle Parms{};

	Parms.Handle = std::move(Handle);
	Parms.StyleName = StyleName;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function JavascriptUMG.JavascriptStyleSetLibrary.GetVector
// (Final, Native, Static, Public, HasOutParams, HasDefaults, BlueprintCallable)
// Parameters:
// struct FJavascriptStyleSet              Handle                                                 (ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
// class FName                             StyleName                                              (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FVector2D                        ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

struct FVector2D UJavascriptStyleSetLibrary::GetVector(const struct FJavascriptStyleSet& Handle, const class FName& StyleName)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("JavascriptStyleSetLibrary", "GetVector");

	Params::JavascriptStyleSetLibrary_GetVector Parms{};

	Parms.Handle = std::move(Handle);
	Parms.StyleName = StyleName;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function JavascriptUMG.JavascriptTextBlock.SetHighlightText
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// class FText                             InHighlightText                                        (Parm, NativeAccessSpecifierPublic)

void UJavascriptTextBlock::SetHighlightText(const class FText& InHighlightText)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("JavascriptTextBlock", "SetHighlightText");

	Params::JavascriptTextBlock_SetHighlightText Parms{};

	Parms.InHighlightText = std::move(InHighlightText);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function JavascriptUMG.JavascriptTileView.OnClick
// (Event, Public, BlueprintEvent)
// Parameters:
// class UObject*                          Object                                                 (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UJavascriptTileView::OnClick(class UObject* Object)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("JavascriptTileView", "OnClick");

	Params::JavascriptTileView_OnClick Parms{};

	Parms.Object = Object;

	UObject::ProcessEvent(Func, &Parms);
}


// Function JavascriptUMG.JavascriptTileView.OnDoubleClick
// (Event, Public, BlueprintEvent)
// Parameters:
// class UObject*                          Object                                                 (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UJavascriptTileView::OnDoubleClick(class UObject* Object)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("JavascriptTileView", "OnDoubleClick");

	Params::JavascriptTileView_OnDoubleClick Parms{};

	Parms.Object = Object;

	UObject::ProcessEvent(Func, &Parms);
}


// Function JavascriptUMG.JavascriptTileView.OnSelectionChanged
// (Event, Public, BlueprintEvent)
// Parameters:
// class UObject*                          Object                                                 (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// ESelectInfo                             Type                                                   (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UJavascriptTileView::OnSelectionChanged(class UObject* Object, ESelectInfo Type)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("JavascriptTileView", "OnSelectionChanged");

	Params::JavascriptTileView_OnSelectionChanged Parms{};

	Parms.Object = Object;
	Parms.Type = Type;

	UObject::ProcessEvent(Func, &Parms);
}


// Function JavascriptUMG.JavascriptUMGBlueprintLibrary.AddLine
// (Final, Native, Static, Public, HasOutParams, BlueprintCallable)
// Parameters:
// struct FJavascriptTextLayout            TextLayout                                             (Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
// class UJavascriptTextModel*             Model                                                  (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// TArray<struct FJavascriptSlateTextRun>  Runs                                                   (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)

void UJavascriptUMGBlueprintLibrary::AddLine(struct FJavascriptTextLayout& TextLayout, class UJavascriptTextModel* Model, const TArray<struct FJavascriptSlateTextRun>& Runs)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("JavascriptUMGBlueprintLibrary", "AddLine");

	Params::JavascriptUMGBlueprintLibrary_AddLine Parms{};

	Parms.TextLayout = std::move(TextLayout);
	Parms.Model = Model;
	Parms.Runs = std::move(Runs);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	TextLayout = std::move(Parms.TextLayout);
}


// Function JavascriptUMG.JavascriptUMGBlueprintLibrary.ClearLines
// (Final, Native, Static, Public, HasOutParams, BlueprintCallable)
// Parameters:
// struct FJavascriptTextLayout            TextLayout                                             (Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)

void UJavascriptUMGBlueprintLibrary::ClearLines(struct FJavascriptTextLayout& TextLayout)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("JavascriptUMGBlueprintLibrary", "ClearLines");

	Params::JavascriptUMGBlueprintLibrary_ClearLines Parms{};

	Parms.TextLayout = std::move(TextLayout);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	TextLayout = std::move(Parms.TextLayout);
}


// Function JavascriptUMG.JavascriptUMGBlueprintLibrary.DrawSpaceSpline
// (Final, Native, Static, Public, HasOutParams, HasDefaults, BlueprintCallable)
// Parameters:
// struct FPaintContext                    Context                                                (Parm, OutParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
// struct FVector2D                        InStart                                                (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FVector2D                        InStartDir                                             (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FVector2D                        InEnd                                                  (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FVector2D                        InEndDir                                               (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   InThickness                                            (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FLinearColor                     InTint                                                 (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UJavascriptUMGBlueprintLibrary::DrawSpaceSpline(struct FPaintContext& Context, const struct FVector2D& InStart, const struct FVector2D& InStartDir, const struct FVector2D& InEnd, const struct FVector2D& InEndDir, float InThickness, const struct FLinearColor& InTint)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("JavascriptUMGBlueprintLibrary", "DrawSpaceSpline");

	Params::JavascriptUMGBlueprintLibrary_DrawSpaceSpline Parms{};

	Parms.Context = std::move(Context);
	Parms.InStart = std::move(InStart);
	Parms.InStartDir = std::move(InStartDir);
	Parms.InEnd = std::move(InEnd);
	Parms.InEndDir = std::move(InEndDir);
	Parms.InThickness = InThickness;
	Parms.InTint = std::move(InTint);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	Context = std::move(Parms.Context);
}


// Function JavascriptUMG.JavascriptUMGBlueprintLibrary.GetAsText
// (Final, Native, Static, Public, HasOutParams, BlueprintCallable)
// Parameters:
// struct FJavascriptTextLayout            TextLayout                                             (ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
// class FString                           ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class FString UJavascriptUMGBlueprintLibrary::GetAsText(const struct FJavascriptTextLayout& TextLayout)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("JavascriptUMGBlueprintLibrary", "GetAsText");

	Params::JavascriptUMGBlueprintLibrary_GetAsText Parms{};

	Parms.TextLayout = std::move(TextLayout);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function JavascriptUMG.JavascriptUMGBlueprintLibrary.GetLineLength
// (Final, Native, Static, Public, HasOutParams, BlueprintCallable)
// Parameters:
// struct FJavascriptTextLayout            TargetTextLayout                                       (ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
// int32                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

int32 UJavascriptUMGBlueprintLibrary::GetLineLength(const struct FJavascriptTextLayout& TargetTextLayout)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("JavascriptUMGBlueprintLibrary", "GetLineLength");

	Params::JavascriptUMGBlueprintLibrary_GetLineLength Parms{};

	Parms.TargetTextLayout = std::move(TargetTextLayout);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function JavascriptUMG.JavascriptUMGBlueprintLibrary.SlateColor_UseForeground
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// struct FSlateColor                      ReturnValue                                            (Parm, OutParm, ReturnParm, NativeAccessSpecifierPublic)

struct FSlateColor UJavascriptUMGBlueprintLibrary::SlateColor_UseForeground()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("JavascriptUMGBlueprintLibrary", "SlateColor_UseForeground");

	Params::JavascriptUMGBlueprintLibrary_SlateColor_UseForeground Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function JavascriptUMG.JavascriptUMGBlueprintLibrary.SlateColor_UseSubduedForeground
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// struct FSlateColor                      ReturnValue                                            (Parm, OutParm, ReturnParm, NativeAccessSpecifierPublic)

struct FSlateColor UJavascriptUMGBlueprintLibrary::SlateColor_UseSubduedForeground()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("JavascriptUMGBlueprintLibrary", "SlateColor_UseSubduedForeground");

	Params::JavascriptUMGBlueprintLibrary_SlateColor_UseSubduedForeground Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function JavascriptUMG.JavascriptUMGLibrary.AddBorderBrush
// (Final, Native, Static, Private, HasOutParams, HasDefaults, BlueprintCallable)
// Parameters:
// struct FJavascriptSlateStyle            StyleSet                                               (Parm, NativeAccessSpecifierPublic)
// class FName                             PropertyName                                           (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class FString                           InImageName                                            (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FMargin                          InMargin                                               (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
// struct FLinearColor                     InColorAndOpacity                                      (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// ESlateBrushImageType                    InImageType                                            (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UJavascriptUMGLibrary::AddBorderBrush(const struct FJavascriptSlateStyle& StyleSet, class FName PropertyName, const class FString& InImageName, const struct FMargin& InMargin, const struct FLinearColor& InColorAndOpacity, ESlateBrushImageType InImageType)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("JavascriptUMGLibrary", "AddBorderBrush");

	Params::JavascriptUMGLibrary_AddBorderBrush Parms{};

	Parms.StyleSet = std::move(StyleSet);
	Parms.PropertyName = PropertyName;
	Parms.InImageName = std::move(InImageName);
	Parms.InMargin = std::move(InMargin);
	Parms.InColorAndOpacity = std::move(InColorAndOpacity);
	Parms.InImageType = InImageType;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function JavascriptUMG.JavascriptUMGLibrary.AddBoxBrush
// (Final, Native, Static, Private, HasOutParams, HasDefaults, BlueprintCallable)
// Parameters:
// struct FJavascriptSlateStyle            StyleSet                                               (Parm, NativeAccessSpecifierPublic)
// class FName                             PropertyName                                           (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class FString                           InImageName                                            (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FMargin                          InMargin                                               (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
// struct FLinearColor                     InColorAndOpacity                                      (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// ESlateBrushImageType                    InImageType                                            (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UJavascriptUMGLibrary::AddBoxBrush(const struct FJavascriptSlateStyle& StyleSet, class FName PropertyName, const class FString& InImageName, const struct FMargin& InMargin, const struct FLinearColor& InColorAndOpacity, ESlateBrushImageType InImageType)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("JavascriptUMGLibrary", "AddBoxBrush");

	Params::JavascriptUMGLibrary_AddBoxBrush Parms{};

	Parms.StyleSet = std::move(StyleSet);
	Parms.PropertyName = PropertyName;
	Parms.InImageName = std::move(InImageName);
	Parms.InMargin = std::move(InMargin);
	Parms.InColorAndOpacity = std::move(InColorAndOpacity);
	Parms.InImageType = InImageType;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function JavascriptUMG.JavascriptUMGLibrary.AddFontInfo
// (Final, Native, Static, Private, HasOutParams, BlueprintCallable)
// Parameters:
// struct FJavascriptSlateStyle            StyleSet                                               (Parm, NativeAccessSpecifierPublic)
// class FName                             PropertyName                                           (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FSlateFontInfo                   FontInfo                                               (ConstParm, Parm, OutParm, ReferenceParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UJavascriptUMGLibrary::AddFontInfo(const struct FJavascriptSlateStyle& StyleSet, class FName PropertyName, const struct FSlateFontInfo& FontInfo)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("JavascriptUMGLibrary", "AddFontInfo");

	Params::JavascriptUMGLibrary_AddFontInfo Parms{};

	Parms.StyleSet = std::move(StyleSet);
	Parms.PropertyName = PropertyName;
	Parms.FontInfo = std::move(FontInfo);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function JavascriptUMG.JavascriptUMGLibrary.AddImageBrush
// (Final, Native, Static, Private, HasOutParams, HasDefaults, BlueprintCallable)
// Parameters:
// struct FJavascriptSlateStyle            StyleSet                                               (Parm, NativeAccessSpecifierPublic)
// class FName                             PropertyName                                           (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class FString                           InImageName                                            (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FVector2D                        InImageSize                                            (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FLinearColor                     InTint                                                 (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// ESlateBrushTileType                     InTiling                                               (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// ESlateBrushImageType                    InImageType                                            (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UJavascriptUMGLibrary::AddImageBrush(const struct FJavascriptSlateStyle& StyleSet, class FName PropertyName, const class FString& InImageName, const struct FVector2D& InImageSize, const struct FLinearColor& InTint, ESlateBrushTileType InTiling, ESlateBrushImageType InImageType)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("JavascriptUMGLibrary", "AddImageBrush");

	Params::JavascriptUMGLibrary_AddImageBrush Parms{};

	Parms.StyleSet = std::move(StyleSet);
	Parms.PropertyName = PropertyName;
	Parms.InImageName = std::move(InImageName);
	Parms.InImageSize = std::move(InImageSize);
	Parms.InTint = std::move(InTint);
	Parms.InTiling = InTiling;
	Parms.InImageType = InImageType;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function JavascriptUMG.JavascriptUMGLibrary.AddSound
// (Final, Native, Static, Private, HasOutParams, BlueprintCallable)
// Parameters:
// struct FJavascriptSlateStyle            StyleSet                                               (Parm, NativeAccessSpecifierPublic)
// class FName                             PropertyName                                           (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FSlateSound                      Sound                                                  (ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)

void UJavascriptUMGLibrary::AddSound(const struct FJavascriptSlateStyle& StyleSet, class FName PropertyName, const struct FSlateSound& Sound)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("JavascriptUMGLibrary", "AddSound");

	Params::JavascriptUMGLibrary_AddSound Parms{};

	Parms.StyleSet = std::move(StyleSet);
	Parms.PropertyName = PropertyName;
	Parms.Sound = std::move(Sound);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function JavascriptUMG.JavascriptUMGLibrary.AddWindow
// (Final, Native, Static, Private, BlueprintCallable)
// Parameters:
// struct FJavascriptSlateWidget           NewWindow                                              (Parm, NativeAccessSpecifierPublic)
// bool                                    bShowImmediately                                       (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UJavascriptUMGLibrary::AddWindow(const struct FJavascriptSlateWidget& NewWindow, const bool bShowImmediately)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("JavascriptUMGLibrary", "AddWindow");

	Params::JavascriptUMGLibrary_AddWindow Parms{};

	Parms.NewWindow = std::move(NewWindow);
	Parms.bShowImmediately = bShowImmediately;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function JavascriptUMG.JavascriptUMGLibrary.AddWindowAsNativeChild
// (Final, Native, Static, Private, BlueprintCallable)
// Parameters:
// struct FJavascriptSlateWidget           NewWindow                                              (Parm, NativeAccessSpecifierPublic)
// struct FJavascriptSlateWidget           RootWindow                                             (Parm, NativeAccessSpecifierPublic)

void UJavascriptUMGLibrary::AddWindowAsNativeChild(const struct FJavascriptSlateWidget& NewWindow, const struct FJavascriptSlateWidget& RootWindow)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("JavascriptUMGLibrary", "AddWindowAsNativeChild");

	Params::JavascriptUMGLibrary_AddWindowAsNativeChild Parms{};

	Parms.NewWindow = std::move(NewWindow);
	Parms.RootWindow = std::move(RootWindow);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function JavascriptUMG.JavascriptUMGLibrary.CreateSlateStyle
// (Final, Native, Static, Private, BlueprintCallable)
// Parameters:
// class FName                             InStyleSetName                                         (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FJavascriptSlateStyle            ReturnValue                                            (Parm, OutParm, ReturnParm, NativeAccessSpecifierPublic)

struct FJavascriptSlateStyle UJavascriptUMGLibrary::CreateSlateStyle(class FName InStyleSetName)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("JavascriptUMGLibrary", "CreateSlateStyle");

	Params::JavascriptUMGLibrary_CreateSlateStyle Parms{};

	Parms.InStyleSetName = InStyleSetName;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function JavascriptUMG.JavascriptUMGLibrary.GenerateDynamicImageResource
// (Final, Native, Static, Private, HasDefaults, BlueprintCallable)
// Parameters:
// class FName                             InDynamicBrushName                                     (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FVector2D                        ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

struct FVector2D UJavascriptUMGLibrary::GenerateDynamicImageResource(const class FName InDynamicBrushName)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("JavascriptUMGLibrary", "GenerateDynamicImageResource");

	Params::JavascriptUMGLibrary_GenerateDynamicImageResource Parms{};

	Parms.InDynamicBrushName = InDynamicBrushName;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function JavascriptUMG.JavascriptUMGLibrary.GetRootWindow
// (Final, Native, Static, Private, BlueprintCallable)
// Parameters:
// struct FJavascriptSlateWidget           ReturnValue                                            (Parm, OutParm, ReturnParm, NativeAccessSpecifierPublic)

struct FJavascriptSlateWidget UJavascriptUMGLibrary::GetRootWindow()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("JavascriptUMGLibrary", "GetRootWindow");

	Params::JavascriptUMGLibrary_GetRootWindow Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function JavascriptUMG.JavascriptUMGLibrary.Register
// (Final, Native, Static, Private, BlueprintCallable)
// Parameters:
// struct FJavascriptSlateStyle            StyleSet                                               (Parm, NativeAccessSpecifierPublic)

void UJavascriptUMGLibrary::Register(const struct FJavascriptSlateStyle& StyleSet)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("JavascriptUMGLibrary", "Register");

	Params::JavascriptUMGLibrary_Register Parms{};

	Parms.StyleSet = std::move(StyleSet);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function JavascriptUMG.JavascriptUMGLibrary.RootToContentDir
// (Final, Native, Static, Private, BlueprintCallable)
// Parameters:
// struct FJavascriptSlateStyle            StyleSet                                               (Parm, NativeAccessSpecifierPublic)
// class FString                           RelativePath                                           (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class FString                           ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class FString UJavascriptUMGLibrary::RootToContentDir(const struct FJavascriptSlateStyle& StyleSet, const class FString& RelativePath)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("JavascriptUMGLibrary", "RootToContentDir");

	Params::JavascriptUMGLibrary_RootToContentDir Parms{};

	Parms.StyleSet = std::move(StyleSet);
	Parms.RelativePath = std::move(RelativePath);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function JavascriptUMG.JavascriptUMGLibrary.RootToCoreContentDir
// (Final, Native, Static, Private, BlueprintCallable)
// Parameters:
// struct FJavascriptSlateStyle            StyleSet                                               (Parm, NativeAccessSpecifierPublic)
// class FString                           RelativePath                                           (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class FString                           ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class FString UJavascriptUMGLibrary::RootToCoreContentDir(const struct FJavascriptSlateStyle& StyleSet, const class FString& RelativePath)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("JavascriptUMGLibrary", "RootToCoreContentDir");

	Params::JavascriptUMGLibrary_RootToCoreContentDir Parms{};

	Parms.StyleSet = std::move(StyleSet);
	Parms.RelativePath = std::move(RelativePath);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function JavascriptUMG.JavascriptUMGLibrary.SetContent
// (Final, Native, Static, Private, BlueprintCallable)
// Parameters:
// class UNativeWidgetHost*                TargetWidget                                           (Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FJavascriptSlateWidget           SlateWidget                                            (Parm, NativeAccessSpecifierPublic)
// class UWidget*                          ReturnValue                                            (ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class UWidget* UJavascriptUMGLibrary::SetContent(class UNativeWidgetHost* TargetWidget, const struct FJavascriptSlateWidget& SlateWidget)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("JavascriptUMGLibrary", "SetContent");

	Params::JavascriptUMGLibrary_SetContent Parms{};

	Parms.TargetWidget = TargetWidget;
	Parms.SlateWidget = std::move(SlateWidget);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function JavascriptUMG.JavascriptUMGLibrary.SetContentRoot
// (Final, Native, Static, Private, BlueprintCallable)
// Parameters:
// struct FJavascriptSlateStyle            StyleSet                                               (Parm, NativeAccessSpecifierPublic)
// class FString                           InContentRootDir                                       (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UJavascriptUMGLibrary::SetContentRoot(const struct FJavascriptSlateStyle& StyleSet, const class FString& InContentRootDir)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("JavascriptUMGLibrary", "SetContentRoot");

	Params::JavascriptUMGLibrary_SetContentRoot Parms{};

	Parms.StyleSet = std::move(StyleSet);
	Parms.InContentRootDir = std::move(InContentRootDir);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function JavascriptUMG.JavascriptUMGLibrary.SetCoreContentRoot
// (Final, Native, Static, Private, BlueprintCallable)
// Parameters:
// struct FJavascriptSlateStyle            StyleSet                                               (Parm, NativeAccessSpecifierPublic)
// class FString                           InCoreContentRootDir                                   (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UJavascriptUMGLibrary::SetCoreContentRoot(const struct FJavascriptSlateStyle& StyleSet, const class FString& InCoreContentRootDir)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("JavascriptUMGLibrary", "SetCoreContentRoot");

	Params::JavascriptUMGLibrary_SetCoreContentRoot Parms{};

	Parms.StyleSet = std::move(StyleSet);
	Parms.InCoreContentRootDir = std::move(InCoreContentRootDir);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function JavascriptUMG.JavascriptUMGLibrary.ShowWindow
// (Final, Native, Static, Private, BlueprintCallable)
// Parameters:
// struct FJavascriptSlateWidget           NewWindow                                              (Parm, NativeAccessSpecifierPublic)

void UJavascriptUMGLibrary::ShowWindow(const struct FJavascriptSlateWidget& NewWindow)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("JavascriptUMGLibrary", "ShowWindow");

	Params::JavascriptUMGLibrary_ShowWindow Parms{};

	Parms.NewWindow = std::move(NewWindow);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function JavascriptUMG.JavascriptUMGLibrary.TakeWidget
// (Final, Native, Static, Private, BlueprintCallable)
// Parameters:
// class UWidget*                          Widget                                                 (Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FJavascriptSlateWidget           ReturnValue                                            (Parm, OutParm, ReturnParm, NativeAccessSpecifierPublic)

struct FJavascriptSlateWidget UJavascriptUMGLibrary::TakeWidget(class UWidget* Widget)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("JavascriptUMGLibrary", "TakeWidget");

	Params::JavascriptUMGLibrary_TakeWidget Parms{};

	Parms.Widget = Widget;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function JavascriptUMG.JavascriptUMGLibrary.Unregister
// (Final, Native, Static, Private, BlueprintCallable)
// Parameters:
// struct FJavascriptSlateStyle            StyleSet                                               (Parm, NativeAccessSpecifierPublic)

void UJavascriptUMGLibrary::Unregister(const struct FJavascriptSlateStyle& StyleSet)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("JavascriptUMGLibrary", "Unregister");

	Params::JavascriptUMGLibrary_Unregister Parms{};

	Parms.StyleSet = std::move(StyleSet);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function JavascriptUMG.JavascriptWidget.CallSynchronizeProperties
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// class UVisual*                          WidgetOrSlot                                           (Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UJavascriptWidget::CallSynchronizeProperties(class UVisual* WidgetOrSlot)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("JavascriptWidget", "CallSynchronizeProperties");

	Params::JavascriptWidget_CallSynchronizeProperties Parms{};

	Parms.WidgetOrSlot = WidgetOrSlot;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function JavascriptUMG.JavascriptWidget.HasValidCachedWidget
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// class UWidget*                          Widget                                                 (Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UJavascriptWidget::HasValidCachedWidget(class UWidget* Widget)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("JavascriptWidget", "HasValidCachedWidget");

	Params::JavascriptWidget_HasValidCachedWidget Parms{};

	Parms.Widget = Widget;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function JavascriptUMG.JavascriptWidget.AddChild
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// class UWidget*                          Content                                                (Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class UPanelSlot*                       ReturnValue                                            (ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class UPanelSlot* UJavascriptWidget::AddChild(class UWidget* Content)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("JavascriptWidget", "AddChild");

	Params::JavascriptWidget_AddChild Parms{};

	Parms.Content = Content;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function JavascriptUMG.JavascriptWidget.OnDestroy
// (Event, Public, BlueprintEvent)
// Parameters:
// bool                                    bReleaseChildren                                       (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UJavascriptWidget::OnDestroy(bool bReleaseChildren)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("JavascriptWidget", "OnDestroy");

	Params::JavascriptWidget_OnDestroy Parms{};

	Parms.bReleaseChildren = bReleaseChildren;

	UObject::ProcessEvent(Func, &Parms);
}


// Function JavascriptUMG.JavascriptWidget.OnInputActionByName
// (Native, Event, Public, BlueprintEvent)
// Parameters:
// class FName                             ActionName                                             (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UJavascriptWidget::OnInputActionByName(class FName ActionName)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("JavascriptWidget", "OnInputActionByName");

	Params::JavascriptWidget_OnInputActionByName Parms{};

	Parms.ActionName = ActionName;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function JavascriptUMG.JavascriptWidget.OnInputAxisByName
// (Native, Event, Public, BlueprintEvent)
// Parameters:
// float                                   Axis                                                   (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class FName                             ActionName                                             (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UJavascriptWidget::OnInputAxisByName(float Axis, class FName ActionName)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("JavascriptWidget", "OnInputAxisByName");

	Params::JavascriptWidget_OnInputAxisByName Parms{};

	Parms.Axis = Axis;
	Parms.ActionName = ActionName;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function JavascriptUMG.JavascriptWidget.OnListenForInputAction
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// class FName                             ActionName                                             (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// EInputEvent                             EventType                                              (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    bConsume                                               (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UJavascriptWidget::OnListenForInputAction(class FName ActionName, EInputEvent EventType, bool bConsume)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("JavascriptWidget", "OnListenForInputAction");

	Params::JavascriptWidget_OnListenForInputAction Parms{};

	Parms.ActionName = ActionName;
	Parms.EventType = EventType;
	Parms.bConsume = bConsume;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function JavascriptUMG.JavascriptWidget.OnListenForInputAxis
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// class FName                             AxisName                                               (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// EInputEvent                             EventType                                              (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    bConsume                                               (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UJavascriptWidget::OnListenForInputAxis(class FName AxisName, EInputEvent EventType, bool bConsume)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("JavascriptWidget", "OnListenForInputAxis");

	Params::JavascriptWidget_OnListenForInputAxis Parms{};

	Parms.AxisName = AxisName;
	Parms.EventType = EventType;
	Parms.bConsume = bConsume;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function JavascriptUMG.JavascriptWidget.OnReleaseInputActionByName
// (Native, Event, Public, BlueprintEvent)
// Parameters:
// class FName                             ActionName                                             (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UJavascriptWidget::OnReleaseInputActionByName(class FName ActionName)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("JavascriptWidget", "OnReleaseInputActionByName");

	Params::JavascriptWidget_OnReleaseInputActionByName Parms{};

	Parms.ActionName = ActionName;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function JavascriptUMG.JavascriptWidget.RemoveChild
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UJavascriptWidget::RemoveChild()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("JavascriptWidget", "RemoveChild");

	Params::JavascriptWidget_RemoveChild Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function JavascriptUMG.JavascriptWidget.SetRootWidget
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// class UWidget*                          Widget                                                 (Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UJavascriptWidget::SetRootWidget(class UWidget* Widget)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("JavascriptWidget", "SetRootWidget");

	Params::JavascriptWidget_SetRootWidget Parms{};

	Parms.Widget = Widget;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function JavascriptUMG.JavascriptWindow.BringToFront
// (Final, Native, Public, BlueprintCallable)

void UJavascriptWindow::BringToFront()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("JavascriptWindow", "BringToFront");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function JavascriptUMG.JavascriptWindow.DestroyWindowImmediately
// (Final, Native, Public, BlueprintCallable)

void UJavascriptWindow::DestroyWindowImmediately()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("JavascriptWindow", "DestroyWindowImmediately");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function JavascriptUMG.JavascriptWindow.EnableWindow
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// bool                                    bEnable                                                (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UJavascriptWindow::EnableWindow(bool bEnable)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("JavascriptWindow", "EnableWindow");

	Params::JavascriptWindow_EnableWindow Parms{};

	Parms.bEnable = bEnable;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function JavascriptUMG.JavascriptWindow.FlashWindow
// (Final, Native, Public, BlueprintCallable)

void UJavascriptWindow::FlashWindow()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("JavascriptWindow", "FlashWindow");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function JavascriptUMG.JavascriptWindow.HideWindow
// (Final, Native, Public, BlueprintCallable)

void UJavascriptWindow::HideWindow()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("JavascriptWindow", "HideWindow");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function JavascriptUMG.JavascriptWindow.MoveWindowTo
// (Final, Native, Public, HasDefaults, BlueprintCallable)
// Parameters:
// struct FVector2D                        NewPosition                                            (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UJavascriptWindow::MoveWindowTo(const struct FVector2D& NewPosition)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("JavascriptWindow", "MoveWindowTo");

	Params::JavascriptWindow_MoveWindowTo Parms{};

	Parms.NewPosition = std::move(NewPosition);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// DelegateFunction JavascriptUMG.JavascriptWindow.OnWindowDeactivated__DelegateSignature
// (Public, Delegate)

void UJavascriptWindow::OnWindowDeactivated__DelegateSignature()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("JavascriptWindow", "OnWindowDeactivated__DelegateSignature");

	UObject::ProcessEvent(Func, nullptr);
}


// DelegateFunction JavascriptUMG.JavascriptWindow.OnWindowWidgetClosed__DelegateSignature
// (Public, Delegate)

void UJavascriptWindow::OnWindowWidgetClosed__DelegateSignature()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("JavascriptWindow", "OnWindowWidgetClosed__DelegateSignature");

	UObject::ProcessEvent(Func, nullptr);
}


// Function JavascriptUMG.JavascriptWindow.RequestDestroyWindow
// (Final, Native, Public, BlueprintCallable)

void UJavascriptWindow::RequestDestroyWindow()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("JavascriptWindow", "RequestDestroyWindow");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function JavascriptUMG.JavascriptWindow.ReshapeWindow
// (Final, Native, Public, HasDefaults, BlueprintCallable)
// Parameters:
// struct FVector2D                        NewPosition                                            (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FVector2D                        NewSize                                                (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UJavascriptWindow::ReshapeWindow(const struct FVector2D& NewPosition, const struct FVector2D& NewSize)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("JavascriptWindow", "ReshapeWindow");

	Params::JavascriptWindow_ReshapeWindow Parms{};

	Parms.NewPosition = std::move(NewPosition);
	Parms.NewSize = std::move(NewSize);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function JavascriptUMG.JavascriptWindow.Resize
// (Final, Native, Public, HasDefaults, BlueprintCallable)
// Parameters:
// struct FVector2D                        NewSize                                                (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UJavascriptWindow::Resize(const struct FVector2D& NewSize)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("JavascriptWindow", "Resize");

	Params::JavascriptWindow_Resize Parms{};

	Parms.NewSize = std::move(NewSize);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function JavascriptUMG.JavascriptWindow.SetOpacity
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// float                                   InOpacity                                              (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UJavascriptWindow::SetOpacity(const float InOpacity)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("JavascriptWindow", "SetOpacity");

	Params::JavascriptWindow_SetOpacity Parms{};

	Parms.InOpacity = InOpacity;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function JavascriptUMG.JavascriptWindow.ShowWindow
// (Final, Native, Public, BlueprintCallable)

void UJavascriptWindow::ShowWindow()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("JavascriptWindow", "ShowWindow");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}

}

