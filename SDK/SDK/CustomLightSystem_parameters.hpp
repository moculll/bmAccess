#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: CustomLightSystem

#include "Basic.hpp"

#include "CoreUObject_structs.hpp"
#include "CustomLightSystem_structs.hpp"


namespace SDK::Params
{

// Function CustomLightSystem.CLSLightManager.CheckReforenceListValid
// 0x0001 (0x0001 - 0x0000)
struct CLSLightManager_CheckReforenceListValid final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
//static_assert(alignof(CLSLightManager_CheckReforenceListValid) == 0x000001, "Wrong alignment on CLSLightManager_CheckReforenceListValid");
//static_assert(sizeof(CLSLightManager_CheckReforenceListValid) == 0x000001, "Wrong size on CLSLightManager_CheckReforenceListValid");
//static_assert(offsetof(CLSLightManager_CheckReforenceListValid, ReturnValue) == 0x000000, "Member 'CLSLightManager_CheckReforenceListValid::ReturnValue' has a wrong offset!");

// Function CustomLightSystem.CLSLightManager.InitializeTagActor
// 0x0010 (0x0010 - 0x0000)
struct CLSLightManager_InitializeTagActor final
{
public:
	class UCLSTagComponent*                       TagComponent;                                      // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0008(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
//static_assert(alignof(CLSLightManager_InitializeTagActor) == 0x000008, "Wrong alignment on CLSLightManager_InitializeTagActor");
//static_assert(sizeof(CLSLightManager_InitializeTagActor) == 0x000010, "Wrong size on CLSLightManager_InitializeTagActor");
//static_assert(offsetof(CLSLightManager_InitializeTagActor, TagComponent) == 0x000000, "Member 'CLSLightManager_InitializeTagActor::TagComponent' has a wrong offset!");
//static_assert(offsetof(CLSLightManager_InitializeTagActor, ReturnValue) == 0x000008, "Member 'CLSLightManager_InitializeTagActor::ReturnValue' has a wrong offset!");

// Function CustomLightSystem.CLSLightManager.SetLightManagerActive
// 0x0001 (0x0001 - 0x0000)
struct CLSLightManager_SetLightManagerActive final
{
public:
	bool                                          NewActive;                                         // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
//static_assert(alignof(CLSLightManager_SetLightManagerActive) == 0x000001, "Wrong alignment on CLSLightManager_SetLightManagerActive");
//static_assert(sizeof(CLSLightManager_SetLightManagerActive) == 0x000001, "Wrong size on CLSLightManager_SetLightManagerActive");
//static_assert(offsetof(CLSLightManager_SetLightManagerActive, NewActive) == 0x000000, "Member 'CLSLightManager_SetLightManagerActive::NewActive' has a wrong offset!");

// Function CustomLightSystem.CLSLightManager.SwitchAllLightAndFog
// 0x0008 (0x0008 - 0x0000)
struct CLSLightManager_SwitchAllLightAndFog final
{
public:
	int32                                         Index_0;                                           // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0004(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_5[0x3];                                        // 0x0005(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
//static_assert(alignof(CLSLightManager_SwitchAllLightAndFog) == 0x000004, "Wrong alignment on CLSLightManager_SwitchAllLightAndFog");
//static_assert(sizeof(CLSLightManager_SwitchAllLightAndFog) == 0x000008, "Wrong size on CLSLightManager_SwitchAllLightAndFog");
//static_assert(offsetof(CLSLightManager_SwitchAllLightAndFog, Index_0) == 0x000000, "Member 'CLSLightManager_SwitchAllLightAndFog::Index_0' has a wrong offset!");
//static_assert(offsetof(CLSLightManager_SwitchAllLightAndFog, ReturnValue) == 0x000004, "Member 'CLSLightManager_SwitchAllLightAndFog::ReturnValue' has a wrong offset!");

// Function CustomLightSystem.CLSLightManager.SwitchAtmosphericFog
// 0x0008 (0x0008 - 0x0000)
struct CLSLightManager_SwitchAtmosphericFog final
{
public:
	int32                                         Index_0;                                           // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0004(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_5[0x3];                                        // 0x0005(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
//static_assert(alignof(CLSLightManager_SwitchAtmosphericFog) == 0x000004, "Wrong alignment on CLSLightManager_SwitchAtmosphericFog");
//static_assert(sizeof(CLSLightManager_SwitchAtmosphericFog) == 0x000008, "Wrong size on CLSLightManager_SwitchAtmosphericFog");
//static_assert(offsetof(CLSLightManager_SwitchAtmosphericFog, Index_0) == 0x000000, "Member 'CLSLightManager_SwitchAtmosphericFog::Index_0' has a wrong offset!");
//static_assert(offsetof(CLSLightManager_SwitchAtmosphericFog, ReturnValue) == 0x000004, "Member 'CLSLightManager_SwitchAtmosphericFog::ReturnValue' has a wrong offset!");

// Function CustomLightSystem.CLSLightManager.SwitchDirectionalLight
// 0x0008 (0x0008 - 0x0000)
struct CLSLightManager_SwitchDirectionalLight final
{
public:
	int32                                         Index_0;                                           // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0004(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_5[0x3];                                        // 0x0005(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
//static_assert(alignof(CLSLightManager_SwitchDirectionalLight) == 0x000004, "Wrong alignment on CLSLightManager_SwitchDirectionalLight");
//static_assert(sizeof(CLSLightManager_SwitchDirectionalLight) == 0x000008, "Wrong size on CLSLightManager_SwitchDirectionalLight");
//static_assert(offsetof(CLSLightManager_SwitchDirectionalLight, Index_0) == 0x000000, "Member 'CLSLightManager_SwitchDirectionalLight::Index_0' has a wrong offset!");
//static_assert(offsetof(CLSLightManager_SwitchDirectionalLight, ReturnValue) == 0x000004, "Member 'CLSLightManager_SwitchDirectionalLight::ReturnValue' has a wrong offset!");

// Function CustomLightSystem.CLSLightManager.SwitchExponentialHeightFog
// 0x0008 (0x0008 - 0x0000)
struct CLSLightManager_SwitchExponentialHeightFog final
{
public:
	int32                                         Index_0;                                           // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0004(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_5[0x3];                                        // 0x0005(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
//static_assert(alignof(CLSLightManager_SwitchExponentialHeightFog) == 0x000004, "Wrong alignment on CLSLightManager_SwitchExponentialHeightFog");
//static_assert(sizeof(CLSLightManager_SwitchExponentialHeightFog) == 0x000008, "Wrong size on CLSLightManager_SwitchExponentialHeightFog");
//static_assert(offsetof(CLSLightManager_SwitchExponentialHeightFog, Index_0) == 0x000000, "Member 'CLSLightManager_SwitchExponentialHeightFog::Index_0' has a wrong offset!");
//static_assert(offsetof(CLSLightManager_SwitchExponentialHeightFog, ReturnValue) == 0x000004, "Member 'CLSLightManager_SwitchExponentialHeightFog::ReturnValue' has a wrong offset!");

// Function CustomLightSystem.CLSLightManager.SwitchLightAndFog
// 0x0004 (0x0004 - 0x0000)
struct CLSLightManager_SwitchLightAndFog final
{
public:
	float                                         Percentage;                                        // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
//static_assert(alignof(CLSLightManager_SwitchLightAndFog) == 0x000004, "Wrong alignment on CLSLightManager_SwitchLightAndFog");
//static_assert(sizeof(CLSLightManager_SwitchLightAndFog) == 0x000004, "Wrong size on CLSLightManager_SwitchLightAndFog");
//static_assert(offsetof(CLSLightManager_SwitchLightAndFog, Percentage) == 0x000000, "Member 'CLSLightManager_SwitchLightAndFog::Percentage' has a wrong offset!");

// Function CustomLightSystem.CLSLightManager.SwitchSkyLight
// 0x0008 (0x0008 - 0x0000)
struct CLSLightManager_SwitchSkyLight final
{
public:
	int32                                         Index_0;                                           // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0004(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_5[0x3];                                        // 0x0005(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
//static_assert(alignof(CLSLightManager_SwitchSkyLight) == 0x000004, "Wrong alignment on CLSLightManager_SwitchSkyLight");
//static_assert(sizeof(CLSLightManager_SwitchSkyLight) == 0x000008, "Wrong size on CLSLightManager_SwitchSkyLight");
//static_assert(offsetof(CLSLightManager_SwitchSkyLight, Index_0) == 0x000000, "Member 'CLSLightManager_SwitchSkyLight::Index_0' has a wrong offset!");
//static_assert(offsetof(CLSLightManager_SwitchSkyLight, ReturnValue) == 0x000004, "Member 'CLSLightManager_SwitchSkyLight::ReturnValue' has a wrong offset!");

// Function CustomLightSystem.CLSLightManager.SyncLightsAndFogs
// 0x0068 (0x0068 - 0x0000)
struct CLSLightManager_SyncLightsAndFogs final
{
public:
	class ADirectionalLight*                      InTargetDirectionalLight;                          // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class ASkyLight*                              InTargetSkyLight;                                  // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class ASkyAtmosphere*                         InTargetAtmosphericFog;                            // 0x0010(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class AExponentialHeightFog*                  InTargetExponentialHeightFog;                      // 0x0018(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FCLSMaterialParametersCollectionProperty InTargetCLSVolumeMPCProperty;                      // 0x0020(0x0020)(Parm, NativeAccessSpecifierPublic)
	struct FCLSMaterialParametersCollectionProperty InOriginalCLSVolumeMPCProperty;                    // 0x0040(0x0020)(Parm, NativeAccessSpecifierPublic)
	float                                         InTargetVolumePercentage;                          // 0x0060(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ForceUpdate;                                       // 0x0064(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_65[0x3];                                       // 0x0065(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
//static_assert(alignof(CLSLightManager_SyncLightsAndFogs) == 0x000008, "Wrong alignment on CLSLightManager_SyncLightsAndFogs");
//static_assert(sizeof(CLSLightManager_SyncLightsAndFogs) == 0x000068, "Wrong size on CLSLightManager_SyncLightsAndFogs");
//static_assert(offsetof(CLSLightManager_SyncLightsAndFogs, InTargetDirectionalLight) == 0x000000, "Member 'CLSLightManager_SyncLightsAndFogs::InTargetDirectionalLight' has a wrong offset!");
//static_assert(offsetof(CLSLightManager_SyncLightsAndFogs, InTargetSkyLight) == 0x000008, "Member 'CLSLightManager_SyncLightsAndFogs::InTargetSkyLight' has a wrong offset!");
//static_assert(offsetof(CLSLightManager_SyncLightsAndFogs, InTargetAtmosphericFog) == 0x000010, "Member 'CLSLightManager_SyncLightsAndFogs::InTargetAtmosphericFog' has a wrong offset!");
//static_assert(offsetof(CLSLightManager_SyncLightsAndFogs, InTargetExponentialHeightFog) == 0x000018, "Member 'CLSLightManager_SyncLightsAndFogs::InTargetExponentialHeightFog' has a wrong offset!");
//static_assert(offsetof(CLSLightManager_SyncLightsAndFogs, InTargetCLSVolumeMPCProperty) == 0x000020, "Member 'CLSLightManager_SyncLightsAndFogs::InTargetCLSVolumeMPCProperty' has a wrong offset!");
//static_assert(offsetof(CLSLightManager_SyncLightsAndFogs, InOriginalCLSVolumeMPCProperty) == 0x000040, "Member 'CLSLightManager_SyncLightsAndFogs::InOriginalCLSVolumeMPCProperty' has a wrong offset!");
//static_assert(offsetof(CLSLightManager_SyncLightsAndFogs, InTargetVolumePercentage) == 0x000060, "Member 'CLSLightManager_SyncLightsAndFogs::InTargetVolumePercentage' has a wrong offset!");
//static_assert(offsetof(CLSLightManager_SyncLightsAndFogs, ForceUpdate) == 0x000064, "Member 'CLSLightManager_SyncLightsAndFogs::ForceUpdate' has a wrong offset!");

// Function CustomLightSystem.CLSAtmosphericFog.SetVisibility
// 0x0001 (0x0001 - 0x0000)
struct CLSAtmosphericFog_SetVisibility final
{
public:
	bool                                          bNewVisibility;                                    // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
//static_assert(alignof(CLSAtmosphericFog_SetVisibility) == 0x000001, "Wrong alignment on CLSAtmosphericFog_SetVisibility");
//static_assert(sizeof(CLSAtmosphericFog_SetVisibility) == 0x000001, "Wrong size on CLSAtmosphericFog_SetVisibility");
//static_assert(offsetof(CLSAtmosphericFog_SetVisibility, bNewVisibility) == 0x000000, "Member 'CLSAtmosphericFog_SetVisibility::bNewVisibility' has a wrong offset!");

// Function CustomLightSystem.CLSBaseVolume.SetDynamicLevel
// 0x0004 (0x0004 - 0x0000)
struct CLSBaseVolume_SetDynamicLevel final
{
public:
	int32                                         InDynamicLevel;                                    // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
//static_assert(alignof(CLSBaseVolume_SetDynamicLevel) == 0x000004, "Wrong alignment on CLSBaseVolume_SetDynamicLevel");
//static_assert(sizeof(CLSBaseVolume_SetDynamicLevel) == 0x000004, "Wrong size on CLSBaseVolume_SetDynamicLevel");
//static_assert(offsetof(CLSBaseVolume_SetDynamicLevel, InDynamicLevel) == 0x000000, "Member 'CLSBaseVolume_SetDynamicLevel::InDynamicLevel' has a wrong offset!");

// Function CustomLightSystem.CLSBaseVolume.SetForceEnableAnyWhere
// 0x0001 (0x0001 - 0x0000)
struct CLSBaseVolume_SetForceEnableAnyWhere final
{
public:
	bool                                          bInForceEnableAnyWhere;                            // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
//static_assert(alignof(CLSBaseVolume_SetForceEnableAnyWhere) == 0x000001, "Wrong alignment on CLSBaseVolume_SetForceEnableAnyWhere");
//static_assert(sizeof(CLSBaseVolume_SetForceEnableAnyWhere) == 0x000001, "Wrong size on CLSBaseVolume_SetForceEnableAnyWhere");
//static_assert(offsetof(CLSBaseVolume_SetForceEnableAnyWhere, bInForceEnableAnyWhere) == 0x000000, "Member 'CLSBaseVolume_SetForceEnableAnyWhere::bInForceEnableAnyWhere' has a wrong offset!");

// Function CustomLightSystem.CLSCommandManager.SafelySwitchLightsAndFogs
// 0x0068 (0x0068 - 0x0000)
struct CLSCommandManager_SafelySwitchLightsAndFogs final
{
public:
	class ADirectionalLight*                      InTargetDirectionalLight;                          // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class ASkyLight*                              InTargetSkyLight;                                  // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class ASkyAtmosphere*                         InTargetAtmosphericFog;                            // 0x0010(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class AExponentialHeightFog*                  InTargetExponentialHeightFog;                      // 0x0018(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FCLSMaterialParametersCollectionProperty InTargetCLSVolumeMPCProperty;                      // 0x0020(0x0020)(Parm, NativeAccessSpecifierPublic)
	struct FCLSMaterialParametersCollectionProperty InOriginalCLSVolumeMPCProperty;                    // 0x0040(0x0020)(Parm, NativeAccessSpecifierPublic)
	float                                         InTargetVolumePercentage;                          // 0x0060(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ForceUpdate;                                       // 0x0064(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_65[0x3];                                       // 0x0065(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
//static_assert(alignof(CLSCommandManager_SafelySwitchLightsAndFogs) == 0x000008, "Wrong alignment on CLSCommandManager_SafelySwitchLightsAndFogs");
//static_assert(sizeof(CLSCommandManager_SafelySwitchLightsAndFogs) == 0x000068, "Wrong size on CLSCommandManager_SafelySwitchLightsAndFogs");
//static_assert(offsetof(CLSCommandManager_SafelySwitchLightsAndFogs, InTargetDirectionalLight) == 0x000000, "Member 'CLSCommandManager_SafelySwitchLightsAndFogs::InTargetDirectionalLight' has a wrong offset!");
//static_assert(offsetof(CLSCommandManager_SafelySwitchLightsAndFogs, InTargetSkyLight) == 0x000008, "Member 'CLSCommandManager_SafelySwitchLightsAndFogs::InTargetSkyLight' has a wrong offset!");
//static_assert(offsetof(CLSCommandManager_SafelySwitchLightsAndFogs, InTargetAtmosphericFog) == 0x000010, "Member 'CLSCommandManager_SafelySwitchLightsAndFogs::InTargetAtmosphericFog' has a wrong offset!");
//static_assert(offsetof(CLSCommandManager_SafelySwitchLightsAndFogs, InTargetExponentialHeightFog) == 0x000018, "Member 'CLSCommandManager_SafelySwitchLightsAndFogs::InTargetExponentialHeightFog' has a wrong offset!");
//static_assert(offsetof(CLSCommandManager_SafelySwitchLightsAndFogs, InTargetCLSVolumeMPCProperty) == 0x000020, "Member 'CLSCommandManager_SafelySwitchLightsAndFogs::InTargetCLSVolumeMPCProperty' has a wrong offset!");
//static_assert(offsetof(CLSCommandManager_SafelySwitchLightsAndFogs, InOriginalCLSVolumeMPCProperty) == 0x000040, "Member 'CLSCommandManager_SafelySwitchLightsAndFogs::InOriginalCLSVolumeMPCProperty' has a wrong offset!");
//static_assert(offsetof(CLSCommandManager_SafelySwitchLightsAndFogs, InTargetVolumePercentage) == 0x000060, "Member 'CLSCommandManager_SafelySwitchLightsAndFogs::InTargetVolumePercentage' has a wrong offset!");
//static_assert(offsetof(CLSCommandManager_SafelySwitchLightsAndFogs, ForceUpdate) == 0x000064, "Member 'CLSCommandManager_SafelySwitchLightsAndFogs::ForceUpdate' has a wrong offset!");

// Function CustomLightSystem.CLSCommandManager.SwitchLightsAndFogs
// 0x0068 (0x0068 - 0x0000)
struct CLSCommandManager_SwitchLightsAndFogs final
{
public:
	class ADirectionalLight*                      InTargetDirectionalLight;                          // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class ASkyLight*                              InTargetSkyLight;                                  // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class ASkyAtmosphere*                         InTargetAtmosphericFog;                            // 0x0010(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class AExponentialHeightFog*                  InTargetExponentialHeightFog;                      // 0x0018(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FCLSMaterialParametersCollectionProperty InTargetCLSVolumeMPCProperty;                      // 0x0020(0x0020)(Parm, NativeAccessSpecifierPublic)
	struct FCLSMaterialParametersCollectionProperty InOriginalCLSVolumeMPCProperty;                    // 0x0040(0x0020)(Parm, NativeAccessSpecifierPublic)
	float                                         InTargetVolumePercentage;                          // 0x0060(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ForceUpdate;                                       // 0x0064(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_65[0x3];                                       // 0x0065(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
//static_assert(alignof(CLSCommandManager_SwitchLightsAndFogs) == 0x000008, "Wrong alignment on CLSCommandManager_SwitchLightsAndFogs");
//static_assert(sizeof(CLSCommandManager_SwitchLightsAndFogs) == 0x000068, "Wrong size on CLSCommandManager_SwitchLightsAndFogs");
//static_assert(offsetof(CLSCommandManager_SwitchLightsAndFogs, InTargetDirectionalLight) == 0x000000, "Member 'CLSCommandManager_SwitchLightsAndFogs::InTargetDirectionalLight' has a wrong offset!");
//static_assert(offsetof(CLSCommandManager_SwitchLightsAndFogs, InTargetSkyLight) == 0x000008, "Member 'CLSCommandManager_SwitchLightsAndFogs::InTargetSkyLight' has a wrong offset!");
//static_assert(offsetof(CLSCommandManager_SwitchLightsAndFogs, InTargetAtmosphericFog) == 0x000010, "Member 'CLSCommandManager_SwitchLightsAndFogs::InTargetAtmosphericFog' has a wrong offset!");
//static_assert(offsetof(CLSCommandManager_SwitchLightsAndFogs, InTargetExponentialHeightFog) == 0x000018, "Member 'CLSCommandManager_SwitchLightsAndFogs::InTargetExponentialHeightFog' has a wrong offset!");
//static_assert(offsetof(CLSCommandManager_SwitchLightsAndFogs, InTargetCLSVolumeMPCProperty) == 0x000020, "Member 'CLSCommandManager_SwitchLightsAndFogs::InTargetCLSVolumeMPCProperty' has a wrong offset!");
//static_assert(offsetof(CLSCommandManager_SwitchLightsAndFogs, InOriginalCLSVolumeMPCProperty) == 0x000040, "Member 'CLSCommandManager_SwitchLightsAndFogs::InOriginalCLSVolumeMPCProperty' has a wrong offset!");
//static_assert(offsetof(CLSCommandManager_SwitchLightsAndFogs, InTargetVolumePercentage) == 0x000060, "Member 'CLSCommandManager_SwitchLightsAndFogs::InTargetVolumePercentage' has a wrong offset!");
//static_assert(offsetof(CLSCommandManager_SwitchLightsAndFogs, ForceUpdate) == 0x000064, "Member 'CLSCommandManager_SwitchLightsAndFogs::ForceUpdate' has a wrong offset!");

// Function CustomLightSystem.CLSDirectionalLight.SetVisibility
// 0x0001 (0x0001 - 0x0000)
struct CLSDirectionalLight_SetVisibility final
{
public:
	bool                                          bNewVisibility;                                    // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
//static_assert(alignof(CLSDirectionalLight_SetVisibility) == 0x000001, "Wrong alignment on CLSDirectionalLight_SetVisibility");
//static_assert(sizeof(CLSDirectionalLight_SetVisibility) == 0x000001, "Wrong size on CLSDirectionalLight_SetVisibility");
//static_assert(offsetof(CLSDirectionalLight_SetVisibility, bNewVisibility) == 0x000000, "Member 'CLSDirectionalLight_SetVisibility::bNewVisibility' has a wrong offset!");

// Function CustomLightSystem.CLSExponentialHeightFog.SetVisibility
// 0x0001 (0x0001 - 0x0000)
struct CLSExponentialHeightFog_SetVisibility final
{
public:
	bool                                          bNewVisibility;                                    // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
//static_assert(alignof(CLSExponentialHeightFog_SetVisibility) == 0x000001, "Wrong alignment on CLSExponentialHeightFog_SetVisibility");
//static_assert(sizeof(CLSExponentialHeightFog_SetVisibility) == 0x000001, "Wrong size on CLSExponentialHeightFog_SetVisibility");
//static_assert(offsetof(CLSExponentialHeightFog_SetVisibility, bNewVisibility) == 0x000000, "Member 'CLSExponentialHeightFog_SetVisibility::bNewVisibility' has a wrong offset!");

// Function CustomLightSystem.CLSFunctionLibrary.GetCurrentCLSManager
// 0x0008 (0x0008 - 0x0000)
struct CLSFunctionLibrary_GetCurrentCLSManager final
{
public:
	class ACLSManager*                            ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
//static_assert(alignof(CLSFunctionLibrary_GetCurrentCLSManager) == 0x000008, "Wrong alignment on CLSFunctionLibrary_GetCurrentCLSManager");
//static_assert(sizeof(CLSFunctionLibrary_GetCurrentCLSManager) == 0x000008, "Wrong size on CLSFunctionLibrary_GetCurrentCLSManager");
//static_assert(offsetof(CLSFunctionLibrary_GetCurrentCLSManager, ReturnValue) == 0x000000, "Member 'CLSFunctionLibrary_GetCurrentCLSManager::ReturnValue' has a wrong offset!");

// Function CustomLightSystem.CLSFunctionLibrary.OverrideEnvLightBlendInSpeed
// 0x0008 (0x0008 - 0x0000)
struct CLSFunctionLibrary_OverrideEnvLightBlendInSpeed final
{
public:
	bool                                          bOverride;                                         // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x3];                                        // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         InBlendInSpeed;                                    // 0x0004(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
//static_assert(alignof(CLSFunctionLibrary_OverrideEnvLightBlendInSpeed) == 0x000004, "Wrong alignment on CLSFunctionLibrary_OverrideEnvLightBlendInSpeed");
//static_assert(sizeof(CLSFunctionLibrary_OverrideEnvLightBlendInSpeed) == 0x000008, "Wrong size on CLSFunctionLibrary_OverrideEnvLightBlendInSpeed");
//static_assert(offsetof(CLSFunctionLibrary_OverrideEnvLightBlendInSpeed, bOverride) == 0x000000, "Member 'CLSFunctionLibrary_OverrideEnvLightBlendInSpeed::bOverride' has a wrong offset!");
//static_assert(offsetof(CLSFunctionLibrary_OverrideEnvLightBlendInSpeed, InBlendInSpeed) == 0x000004, "Member 'CLSFunctionLibrary_OverrideEnvLightBlendInSpeed::InBlendInSpeed' has a wrong offset!");

// Function CustomLightSystem.CLSFunctionLibrary.RegisterNeedPointLightControlActor
// 0x0010 (0x0010 - 0x0000)
struct CLSFunctionLibrary_RegisterNeedPointLightControlActor final
{
public:
	class FName                                   InTag;                                             // 0x0000(0x0008)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class AActor*                                 InActor;                                           // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
//static_assert(alignof(CLSFunctionLibrary_RegisterNeedPointLightControlActor) == 0x000008, "Wrong alignment on CLSFunctionLibrary_RegisterNeedPointLightControlActor");
//static_assert(sizeof(CLSFunctionLibrary_RegisterNeedPointLightControlActor) == 0x000010, "Wrong size on CLSFunctionLibrary_RegisterNeedPointLightControlActor");
//static_assert(offsetof(CLSFunctionLibrary_RegisterNeedPointLightControlActor, InTag) == 0x000000, "Member 'CLSFunctionLibrary_RegisterNeedPointLightControlActor::InTag' has a wrong offset!");
//static_assert(offsetof(CLSFunctionLibrary_RegisterNeedPointLightControlActor, InActor) == 0x000008, "Member 'CLSFunctionLibrary_RegisterNeedPointLightControlActor::InActor' has a wrong offset!");

// Function CustomLightSystem.CLSFunctionLibrary.UnregisterNeedPointLightControlActor
// 0x0008 (0x0008 - 0x0000)
struct CLSFunctionLibrary_UnregisterNeedPointLightControlActor final
{
public:
	class FName                                   InTag;                                             // 0x0000(0x0008)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
//static_assert(alignof(CLSFunctionLibrary_UnregisterNeedPointLightControlActor) == 0x000004, "Wrong alignment on CLSFunctionLibrary_UnregisterNeedPointLightControlActor");
//static_assert(sizeof(CLSFunctionLibrary_UnregisterNeedPointLightControlActor) == 0x000008, "Wrong size on CLSFunctionLibrary_UnregisterNeedPointLightControlActor");
//static_assert(offsetof(CLSFunctionLibrary_UnregisterNeedPointLightControlActor, InTag) == 0x000000, "Member 'CLSFunctionLibrary_UnregisterNeedPointLightControlActor::InTag' has a wrong offset!");

// Function CustomLightSystem.CLSManager.SetActorLightAttenuation
// 0x0004 (0x0004 - 0x0000)
struct CLSManager_SetActorLightAttenuation final
{
public:
	float                                         InActorLightAttenuation;                           // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
//static_assert(alignof(CLSManager_SetActorLightAttenuation) == 0x000004, "Wrong alignment on CLSManager_SetActorLightAttenuation");
//static_assert(sizeof(CLSManager_SetActorLightAttenuation) == 0x000004, "Wrong size on CLSManager_SetActorLightAttenuation");
//static_assert(offsetof(CLSManager_SetActorLightAttenuation, InActorLightAttenuation) == 0x000000, "Member 'CLSManager_SetActorLightAttenuation::InActorLightAttenuation' has a wrong offset!");

// Function CustomLightSystem.CLSManager.SetEnableManager
// 0x0001 (0x0001 - 0x0000)
struct CLSManager_SetEnableManager final
{
public:
	bool                                          bInEnableManager;                                  // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
//static_assert(alignof(CLSManager_SetEnableManager) == 0x000001, "Wrong alignment on CLSManager_SetEnableManager");
//static_assert(sizeof(CLSManager_SetEnableManager) == 0x000001, "Wrong size on CLSManager_SetEnableManager");
//static_assert(offsetof(CLSManager_SetEnableManager, bInEnableManager) == 0x000000, "Member 'CLSManager_SetEnableManager::bInEnableManager' has a wrong offset!");

// Function CustomLightSystem.CLSManager.SetPlayerLightAttenuation
// 0x0004 (0x0004 - 0x0000)
struct CLSManager_SetPlayerLightAttenuation final
{
public:
	float                                         InPlayerLightAttenuation;                          // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
//static_assert(alignof(CLSManager_SetPlayerLightAttenuation) == 0x000004, "Wrong alignment on CLSManager_SetPlayerLightAttenuation");
//static_assert(sizeof(CLSManager_SetPlayerLightAttenuation) == 0x000004, "Wrong size on CLSManager_SetPlayerLightAttenuation");
//static_assert(offsetof(CLSManager_SetPlayerLightAttenuation, InPlayerLightAttenuation) == 0x000000, "Member 'CLSManager_SetPlayerLightAttenuation::InPlayerLightAttenuation' has a wrong offset!");

// Function CustomLightSystem.CLSManager.UpdateAndGetWatchData
// 0x0290 (0x0290 - 0x0000)
struct CLSManager_UpdateAndGetWatchData final
{
public:
	struct FCLSWatchData                          ReturnValue;                                       // 0x0000(0x0290)(Parm, OutParm, ReturnParm, NativeAccessSpecifierPublic)
};
//static_assert(alignof(CLSManager_UpdateAndGetWatchData) == 0x000008, "Wrong alignment on CLSManager_UpdateAndGetWatchData");
//static_assert(sizeof(CLSManager_UpdateAndGetWatchData) == 0x000290, "Wrong size on CLSManager_UpdateAndGetWatchData");
//static_assert(offsetof(CLSManager_UpdateAndGetWatchData, ReturnValue) == 0x000000, "Member 'CLSManager_UpdateAndGetWatchData::ReturnValue' has a wrong offset!");

// Function CustomLightSystem.CLSPostVolume.AddOrUpdateBlendable
// 0x0018 (0x0018 - 0x0000)
struct CLSPostVolume_AddOrUpdateBlendable final
{
public:
	TScriptInterface<class IBlendableInterface>   InBlendableObject;                                 // 0x0000(0x0010)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         InWeight;                                          // 0x0010(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_14[0x4];                                       // 0x0014(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
//static_assert(alignof(CLSPostVolume_AddOrUpdateBlendable) == 0x000008, "Wrong alignment on CLSPostVolume_AddOrUpdateBlendable");
//static_assert(sizeof(CLSPostVolume_AddOrUpdateBlendable) == 0x000018, "Wrong size on CLSPostVolume_AddOrUpdateBlendable");
//static_assert(offsetof(CLSPostVolume_AddOrUpdateBlendable, InBlendableObject) == 0x000000, "Member 'CLSPostVolume_AddOrUpdateBlendable::InBlendableObject' has a wrong offset!");
//static_assert(offsetof(CLSPostVolume_AddOrUpdateBlendable, InWeight) == 0x000010, "Member 'CLSPostVolume_AddOrUpdateBlendable::InWeight' has a wrong offset!");

// Function CustomLightSystem.RTXSettings.GetRTXQuality
// 0x0001 (0x0001 - 0x0000)
struct RTXSettings_GetRTXQuality final
{
public:
	uint8                                         ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
//static_assert(alignof(RTXSettings_GetRTXQuality) == 0x000001, "Wrong alignment on RTXSettings_GetRTXQuality");
//static_assert(sizeof(RTXSettings_GetRTXQuality) == 0x000001, "Wrong size on RTXSettings_GetRTXQuality");
//static_assert(offsetof(RTXSettings_GetRTXQuality, ReturnValue) == 0x000000, "Member 'RTXSettings_GetRTXQuality::ReturnValue' has a wrong offset!");

// Function CustomLightSystem.RTXSettings.IsDLSSRREnabled
// 0x0001 (0x0001 - 0x0000)
struct RTXSettings_IsDLSSRREnabled final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
//static_assert(alignof(RTXSettings_IsDLSSRREnabled) == 0x000001, "Wrong alignment on RTXSettings_IsDLSSRREnabled");
//static_assert(sizeof(RTXSettings_IsDLSSRREnabled) == 0x000001, "Wrong size on RTXSettings_IsDLSSRREnabled");
//static_assert(offsetof(RTXSettings_IsDLSSRREnabled, ReturnValue) == 0x000000, "Member 'RTXSettings_IsDLSSRREnabled::ReturnValue' has a wrong offset!");

// Function CustomLightSystem.RTXSettings.IsRTXEnabled
// 0x0001 (0x0001 - 0x0000)
struct RTXSettings_IsRTXEnabled final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
//static_assert(alignof(RTXSettings_IsRTXEnabled) == 0x000001, "Wrong alignment on RTXSettings_IsRTXEnabled");
//static_assert(sizeof(RTXSettings_IsRTXEnabled) == 0x000001, "Wrong size on RTXSettings_IsRTXEnabled");
//static_assert(offsetof(RTXSettings_IsRTXEnabled, ReturnValue) == 0x000000, "Member 'RTXSettings_IsRTXEnabled::ReturnValue' has a wrong offset!");

// Function CustomLightSystem.RTXSettings.SetDlssRREnable
// 0x0001 (0x0001 - 0x0000)
struct RTXSettings_SetDlssRREnable final
{
public:
	bool                                          bEnable;                                           // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
//static_assert(alignof(RTXSettings_SetDlssRREnable) == 0x000001, "Wrong alignment on RTXSettings_SetDlssRREnable");
//static_assert(sizeof(RTXSettings_SetDlssRREnable) == 0x000001, "Wrong size on RTXSettings_SetDlssRREnable");
//static_assert(offsetof(RTXSettings_SetDlssRREnable, bEnable) == 0x000000, "Member 'RTXSettings_SetDlssRREnable::bEnable' has a wrong offset!");

// Function CustomLightSystem.RTXSettings.SetRTXEnabled
// 0x0001 (0x0001 - 0x0000)
struct RTXSettings_SetRTXEnabled final
{
public:
	bool                                          bInEnable;                                         // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
//static_assert(alignof(RTXSettings_SetRTXEnabled) == 0x000001, "Wrong alignment on RTXSettings_SetRTXEnabled");
//static_assert(sizeof(RTXSettings_SetRTXEnabled) == 0x000001, "Wrong size on RTXSettings_SetRTXEnabled");
//static_assert(offsetof(RTXSettings_SetRTXEnabled, bInEnable) == 0x000000, "Member 'RTXSettings_SetRTXEnabled::bInEnable' has a wrong offset!");

// Function CustomLightSystem.RTXSettings.SetRTXQuality
// 0x0001 (0x0001 - 0x0000)
struct RTXSettings_SetRTXQuality final
{
public:
	uint8                                         Quality;                                           // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
//static_assert(alignof(RTXSettings_SetRTXQuality) == 0x000001, "Wrong alignment on RTXSettings_SetRTXQuality");
//static_assert(sizeof(RTXSettings_SetRTXQuality) == 0x000001, "Wrong size on RTXSettings_SetRTXQuality");
//static_assert(offsetof(RTXSettings_SetRTXQuality, Quality) == 0x000000, "Member 'RTXSettings_SetRTXQuality::Quality' has a wrong offset!");

// Function CustomLightSystem.CLSSkyLight.SetVisibility
// 0x0001 (0x0001 - 0x0000)
struct CLSSkyLight_SetVisibility final
{
public:
	bool                                          bNewVisibility;                                    // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
//static_assert(alignof(CLSSkyLight_SetVisibility) == 0x000001, "Wrong alignment on CLSSkyLight_SetVisibility");
//static_assert(sizeof(CLSSkyLight_SetVisibility) == 0x000001, "Wrong size on CLSSkyLight_SetVisibility");
//static_assert(offsetof(CLSSkyLight_SetVisibility, bNewVisibility) == 0x000000, "Member 'CLSSkyLight_SetVisibility::bNewVisibility' has a wrong offset!");

// Function CustomLightSystem.CLSVolumeManager.CheckOverlapVolumes
// 0x0028 (0x0028 - 0x0000)
struct CLSVolumeManager_CheckOverlapVolumes final
{
public:
	struct FVector                                Position;                                          // 0x0000(0x0018)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<class ACLSBaseVolume*>                 ReturnValue;                                       // 0x0018(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, NativeAccessSpecifierPublic)
};
//static_assert(alignof(CLSVolumeManager_CheckOverlapVolumes) == 0x000008, "Wrong alignment on CLSVolumeManager_CheckOverlapVolumes");
//static_assert(sizeof(CLSVolumeManager_CheckOverlapVolumes) == 0x000028, "Wrong size on CLSVolumeManager_CheckOverlapVolumes");
//static_assert(offsetof(CLSVolumeManager_CheckOverlapVolumes, Position) == 0x000000, "Member 'CLSVolumeManager_CheckOverlapVolumes::Position' has a wrong offset!");
//static_assert(offsetof(CLSVolumeManager_CheckOverlapVolumes, ReturnValue) == 0x000018, "Member 'CLSVolumeManager_CheckOverlapVolumes::ReturnValue' has a wrong offset!");

// Function CustomLightSystem.CLSVolumeManager.CheckReforenceVolumeListValid
// 0x0001 (0x0001 - 0x0000)
struct CLSVolumeManager_CheckReforenceVolumeListValid final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
//static_assert(alignof(CLSVolumeManager_CheckReforenceVolumeListValid) == 0x000001, "Wrong alignment on CLSVolumeManager_CheckReforenceVolumeListValid");
//static_assert(sizeof(CLSVolumeManager_CheckReforenceVolumeListValid) == 0x000001, "Wrong size on CLSVolumeManager_CheckReforenceVolumeListValid");
//static_assert(offsetof(CLSVolumeManager_CheckReforenceVolumeListValid, ReturnValue) == 0x000000, "Member 'CLSVolumeManager_CheckReforenceVolumeListValid::ReturnValue' has a wrong offset!");

// Function CustomLightSystem.CLSVolumeManager.CheckValidByWeight
// 0x0020 (0x0020 - 0x0000)
struct CLSVolumeManager_CheckValidByWeight final
{
public:
	struct FVector                                Position;                                          // 0x0000(0x0018)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0018(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_19[0x7];                                       // 0x0019(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
//static_assert(alignof(CLSVolumeManager_CheckValidByWeight) == 0x000008, "Wrong alignment on CLSVolumeManager_CheckValidByWeight");
//static_assert(sizeof(CLSVolumeManager_CheckValidByWeight) == 0x000020, "Wrong size on CLSVolumeManager_CheckValidByWeight");
//static_assert(offsetof(CLSVolumeManager_CheckValidByWeight, Position) == 0x000000, "Member 'CLSVolumeManager_CheckValidByWeight::Position' has a wrong offset!");
//static_assert(offsetof(CLSVolumeManager_CheckValidByWeight, ReturnValue) == 0x000018, "Member 'CLSVolumeManager_CheckValidByWeight::ReturnValue' has a wrong offset!");

// Function CustomLightSystem.CLSVolumeManager.ForceDortPPV
// 0x0018 (0x0018 - 0x0000)
struct CLSVolumeManager_ForceDortPPV final
{
public:
	struct FVector                                ViewLocation;                                      // 0x0000(0x0018)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
//static_assert(alignof(CLSVolumeManager_ForceDortPPV) == 0x000008, "Wrong alignment on CLSVolumeManager_ForceDortPPV");
//static_assert(sizeof(CLSVolumeManager_ForceDortPPV) == 0x000018, "Wrong size on CLSVolumeManager_ForceDortPPV");
//static_assert(offsetof(CLSVolumeManager_ForceDortPPV, ViewLocation) == 0x000000, "Member 'CLSVolumeManager_ForceDortPPV::ViewLocation' has a wrong offset!");

// Function CustomLightSystem.CLSVolumeManager.GetValidVolumeByWeight
// 0x0068 (0x0068 - 0x0000)
struct CLSVolumeManager_GetValidVolumeByWeight final
{
public:
	struct FVector                                Position;                                          // 0x0000(0x0018)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TMap<class ACLSBaseVolume*, float>            ReturnValue;                                       // 0x0018(0x0050)(Parm, OutParm, ReturnParm, NativeAccessSpecifierPublic)
};
//static_assert(alignof(CLSVolumeManager_GetValidVolumeByWeight) == 0x000008, "Wrong alignment on CLSVolumeManager_GetValidVolumeByWeight");
//static_assert(sizeof(CLSVolumeManager_GetValidVolumeByWeight) == 0x000068, "Wrong size on CLSVolumeManager_GetValidVolumeByWeight");
//static_assert(offsetof(CLSVolumeManager_GetValidVolumeByWeight, Position) == 0x000000, "Member 'CLSVolumeManager_GetValidVolumeByWeight::Position' has a wrong offset!");
//static_assert(offsetof(CLSVolumeManager_GetValidVolumeByWeight, ReturnValue) == 0x000018, "Member 'CLSVolumeManager_GetValidVolumeByWeight::ReturnValue' has a wrong offset!");

// Function CustomLightSystem.CLSVolumeManager.InitializeVolumes
// 0x0008 (0x0008 - 0x0000)
struct CLSVolumeManager_InitializeVolumes final
{
public:
	class ACLSBaseVolume*                         InVolume;                                          // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
//static_assert(alignof(CLSVolumeManager_InitializeVolumes) == 0x000008, "Wrong alignment on CLSVolumeManager_InitializeVolumes");
//static_assert(sizeof(CLSVolumeManager_InitializeVolumes) == 0x000008, "Wrong size on CLSVolumeManager_InitializeVolumes");
//static_assert(offsetof(CLSVolumeManager_InitializeVolumes, InVolume) == 0x000000, "Member 'CLSVolumeManager_InitializeVolumes::InVolume' has a wrong offset!");

// Function CustomLightSystem.CLSVolumeManager.SetLightManagerActive
// 0x0001 (0x0001 - 0x0000)
struct CLSVolumeManager_SetLightManagerActive final
{
public:
	bool                                          NewActive;                                         // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
//static_assert(alignof(CLSVolumeManager_SetLightManagerActive) == 0x000001, "Wrong alignment on CLSVolumeManager_SetLightManagerActive");
//static_assert(sizeof(CLSVolumeManager_SetLightManagerActive) == 0x000001, "Wrong size on CLSVolumeManager_SetLightManagerActive");
//static_assert(offsetof(CLSVolumeManager_SetLightManagerActive, NewActive) == 0x000000, "Member 'CLSVolumeManager_SetLightManagerActive::NewActive' has a wrong offset!");

// Function CustomLightSystem.CLSVolumeManager.SwitchToValidLightAndFog
// 0x0018 (0x0018 - 0x0000)
struct CLSVolumeManager_SwitchToValidLightAndFog final
{
public:
	struct FVector                                Position;                                          // 0x0000(0x0018)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
//static_assert(alignof(CLSVolumeManager_SwitchToValidLightAndFog) == 0x000008, "Wrong alignment on CLSVolumeManager_SwitchToValidLightAndFog");
//static_assert(sizeof(CLSVolumeManager_SwitchToValidLightAndFog) == 0x000018, "Wrong size on CLSVolumeManager_SwitchToValidLightAndFog");
//static_assert(offsetof(CLSVolumeManager_SwitchToValidLightAndFog, Position) == 0x000000, "Member 'CLSVolumeManager_SwitchToValidLightAndFog::Position' has a wrong offset!");

// Function CustomLightSystem.CLSVolumeManager.UpdateVolume
// 0x0018 (0x0018 - 0x0000)
struct CLSVolumeManager_UpdateVolume final
{
public:
	struct FVector                                Position;                                          // 0x0000(0x0018)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
//static_assert(alignof(CLSVolumeManager_UpdateVolume) == 0x000008, "Wrong alignment on CLSVolumeManager_UpdateVolume");
//static_assert(sizeof(CLSVolumeManager_UpdateVolume) == 0x000018, "Wrong size on CLSVolumeManager_UpdateVolume");
//static_assert(offsetof(CLSVolumeManager_UpdateVolume, Position) == 0x000000, "Member 'CLSVolumeManager_UpdateVolume::Position' has a wrong offset!");

// Function CustomLightSystem.CLSVolumeManager.RunVolumeProcessParameterCommand
// 0x0010 (0x0010 - 0x0000)
struct CLSVolumeManager_RunVolumeProcessParameterCommand final
{
public:
	class FString                                 TargetParameter;                                   // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
//static_assert(alignof(CLSVolumeManager_RunVolumeProcessParameterCommand) == 0x000008, "Wrong alignment on CLSVolumeManager_RunVolumeProcessParameterCommand");
//static_assert(sizeof(CLSVolumeManager_RunVolumeProcessParameterCommand) == 0x000010, "Wrong size on CLSVolumeManager_RunVolumeProcessParameterCommand");
//static_assert(offsetof(CLSVolumeManager_RunVolumeProcessParameterCommand, TargetParameter) == 0x000000, "Member 'CLSVolumeManager_RunVolumeProcessParameterCommand::TargetParameter' has a wrong offset!");

// Function CustomLightSystem.CLSVolumeManager.SwitchVolumeProcessParameters
// 0x0008 (0x0008 - 0x0000)
struct CLSVolumeManager_SwitchVolumeProcessParameters final
{
public:
	class ACLSBaseVolume*                         TargetVolume;                                      // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
//static_assert(alignof(CLSVolumeManager_SwitchVolumeProcessParameters) == 0x000008, "Wrong alignment on CLSVolumeManager_SwitchVolumeProcessParameters");
//static_assert(sizeof(CLSVolumeManager_SwitchVolumeProcessParameters) == 0x000008, "Wrong size on CLSVolumeManager_SwitchVolumeProcessParameters");
//static_assert(offsetof(CLSVolumeManager_SwitchVolumeProcessParameters, TargetVolume) == 0x000000, "Member 'CLSVolumeManager_SwitchVolumeProcessParameters::TargetVolume' has a wrong offset!");

}

