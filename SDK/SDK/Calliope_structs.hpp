#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: Calliope

#include "Basic.hpp"

#include "CoreUObject_structs.hpp"
#include "GameplayTags_structs.hpp"
#include "MovieScene_structs.hpp"


namespace SDK
{

// Enum Calliope.ECalliopeViewType
// NumValues: 0x000D
enum class ECalliopeViewType : uint8
{
	None                                     = 0,
	Quest                                    = 1,
	Combo                                    = 2,
	State                                    = 3,
	Behavior                                 = 4,
	Skill                                    = 5,
	Movie                                    = 6,
	Process                                  = 7,
	Task                                     = 8,
	FSM                                      = 9,
	Dialogue                                 = 10,
	Guide                                    = 11,
	Max                                      = 12,
};

// Enum Calliope.ECalliopeNodeStyle
// NumValues: 0x0008
enum class ECalliopeNodeStyle : uint8
{
	Condition                                = 0,
	Default                                  = 1,
	InOut                                    = 2,
	Latent                                   = 3,
	Logic                                    = 4,
	SubGraph                                 = 5,
	Transit                                  = 6,
	ECalliopeNodeStyle_MAX                   = 7,
};

// Enum Calliope.ECalliopeActivationState
// NumValues: 0x0004
enum class ECalliopeActivationState : uint8
{
	NeverActivated                           = 0,
	Active                                   = 1,
	WasActive                                = 2,
	ECalliopeActivationState_MAX             = 3,
};

// Enum Calliope.ECalliopeNetMode
// NumValues: 0x0006
enum class ECalliopeNetMode : uint8
{
	Any                                      = 0,
	Authority                                = 1,
	ClientOnly                               = 2,
	ServerOnly                               = 3,
	SinglePlayerOnly                         = 4,
	ECalliopeNetMode_MAX                     = 5,
};

// Enum Calliope.EGsDynamicObstacleState
// NumValues: 0x0003
enum class EGsDynamicObstacleState : uint8
{
	Opened                                   = 0,
	Closed                                   = 1,
	EGsDynamicObstacleState_MAX              = 2,
};

// Enum Calliope.EGsOverlapState
// NumValues: 0x0003
enum class EGsOverlapState : uint8
{
	Enabled                                  = 0,
	Disabled                                 = 1,
	EGsOverlapState_MAX                      = 2,
};

// Enum Calliope.EGsInteractorState
// NumValues: 0x0003
enum class EGsInteractorState : uint8
{
	Interactive                              = 0,
	NotInteractive                           = 1,
	EGsInteractorState_MAX                   = 2,
};

// Enum Calliope.EGsSpawnerState
// NumValues: 0x0004
enum class EGsSpawnerState : uint8
{
	Disabled                                 = 0,
	Enabled                                  = 1,
	Spawned                                  = 2,
	EGsSpawnerState_MAX                      = 3,
};

// Enum Calliope.EGsStreamingLevelState
// NumValues: 0x0003
enum class EGsStreamingLevelState : uint8
{
	LoadedAndShown                           = 0,
	Unloaded                                 = 1,
	EGsStreamingLevelState_MAX               = 2,
};

// Enum Calliope.EGsNPCShowState
// NumValues: 0x0003
enum class EGsNPCShowState : uint8
{
	Show                                     = 0,
	Hide                                     = 1,
	EGsNPCShowState_MAX                      = 2,
};

// Enum Calliope.EGsNPCBuffState
// NumValues: 0x0003
enum class EGsNPCBuffState : uint8
{
	Add                                      = 0,
	Remove                                   = 1,
	EGsNPCBuffState_MAX                      = 2,
};

// Enum Calliope.EGsUnitResetType
// NumValues: 0x0007
enum class EGsUnitResetType : uint8
{
	No                                       = 0,
	Destroy                                  = 1,
	Status                                   = 2,
	Spawn                                    = 3,
	StatusWithoutHp                          = 4,
	None                                     = 5,
	EGsUnitResetType_MAX                     = 6,
};

// Enum Calliope.EGsDynamicObstacleManagePolice
// NumValues: 0x0006
enum class EGsDynamicObstacleManagePolice : uint8
{
	SameAsPrevious                           = 0,
	KeepOpen                                 = 1,
	KeepClose                                = 2,
	AsBattleInDoor                           = 3,
	AsBattleOutDoor                          = 4,
	EGsDynamicObstacleManagePolice_MAX       = 5,
};

// Enum Calliope.EGsOverlapManagePolice
// NumValues: 0x0004
enum class EGsOverlapManagePolice : uint8
{
	SameAsPrevious                           = 0,
	KeepEnable                               = 1,
	KeepDisable                              = 2,
	EGsOverlapManagePolice_MAX               = 3,
};

// Enum Calliope.EGsInteractorManagePolice
// NumValues: 0x0004
enum class EGsInteractorManagePolice : uint8
{
	SameAsPrevious                           = 0,
	KeepInteractive                          = 1,
	KeepNotInteractive                       = 2,
	EGsInteractorManagePolice_MAX            = 3,
};

// Enum Calliope.EGsSpawnerManagePolice
// NumValues: 0x0008
enum class EGsSpawnerManagePolice : uint8
{
	SameAsPrevious                           = 0,
	Auto                                     = 1,
	SameAsBattle                             = 2,
	OnlyBeginSameAsBattle                    = 3,
	OnlyEndSameAsBattle                      = 4,
	Disable                                  = 5,
	BeginLikeStateEndLikeBattle              = 6,
	EGsSpawnerManagePolice_MAX               = 7,
};

// Enum Calliope.EGsStreamingLevelManagePolice
// NumValues: 0x0004
enum class EGsStreamingLevelManagePolice : uint8
{
	SameAsPrevious                           = 0,
	DefaultLoadAndShow                       = 1,
	DefaultUnload                            = 2,
	EGsStreamingLevelManagePolice_MAX        = 3,
};

// Enum Calliope.EGsUnitManagePolice
// NumValues: 0x0006
enum class EGsUnitManagePolice : uint8
{
	SameAsPrevious                           = 0,
	Status                                   = 1,
	StatusWithoutHP                          = 2,
	Spawn                                    = 3,
	Destroy                                  = 4,
	EGsUnitManagePolice_MAX                  = 5,
};

// Enum Calliope.EGsManagedParamType
// NumValues: 0x001D
enum class EGsManagedParamType : uint8
{
	None                                     = 0,
	Parameter                                = 1,
	SceneObj                                 = 2,
	DynamicObstacle                          = 3,
	Overlap                                  = 4,
	Interactor                               = 5,
	Spawner                                  = 6,
	Unit                                     = 7,
	NPCUnit                                  = 8,
	GroupUnit                                = 9,
	IntParam                                 = 32,
	SequenceID                               = 33,
	TaskStageID                              = 34,
	BuffID                                   = 35,
	GroupID                                  = 36,
	AiConversationID                         = 37,
	TaskLineID                               = 38,
	NameParam                                = 64,
	ArchiveLabel                             = 65,
	StreamingLevel                           = 66,
	AssociationUnitConfig                    = 67,
	AssociationOnFightSkillID                = 68,
	FollowPartnerConfig                      = 69,
	TeamID                                   = 70,
	IdleAMIdx                                = 71,
	InteractGroupID                          = 72,
	StreamingLevelStateConfig                = 73,
	LeisureAnimIndex                         = 74,
	EGsManagedParamType_MAX                  = 75,
};

// ScriptStruct Calliope.CalliopeGuid
// 0x0010 (0x0010 - 0x0000)
struct FCalliopeGuid final
{
public:
	int32                                         A;                                                 // 0x0000(0x0004)(Edit, BlueprintVisible, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         B;                                                 // 0x0004(0x0004)(Edit, BlueprintVisible, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         C;                                                 // 0x0008(0x0004)(Edit, BlueprintVisible, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         D;                                                 // 0x000C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
//static_assert(alignof(FCalliopeGuid) == 0x000004, "Wrong alignment on FCalliopeGuid");
//static_assert(sizeof(FCalliopeGuid) == 0x000010, "Wrong size on FCalliopeGuid");
//static_assert(offsetof(FCalliopeGuid, A) == 0x000000, "Member 'FCalliopeGuid::A' has a wrong offset!");
//static_assert(offsetof(FCalliopeGuid, B) == 0x000004, "Member 'FCalliopeGuid::B' has a wrong offset!");
//static_assert(offsetof(FCalliopeGuid, C) == 0x000008, "Member 'FCalliopeGuid::C' has a wrong offset!");
//static_assert(offsetof(FCalliopeGuid, D) == 0x00000C, "Member 'FCalliopeGuid::D' has a wrong offset!");

// ScriptStruct Calliope.CalliopePin
// 0x0018 (0x0018 - 0x0000)
struct FCalliopePin final
{
public:
	class FName                                   PinName;                                           // 0x0000(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 PinToolTip;                                        // 0x0008(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
//static_assert(alignof(FCalliopePin) == 0x000008, "Wrong alignment on FCalliopePin");
//static_assert(sizeof(FCalliopePin) == 0x000018, "Wrong size on FCalliopePin");
//static_assert(offsetof(FCalliopePin, PinName) == 0x000000, "Member 'FCalliopePin::PinName' has a wrong offset!");
//static_assert(offsetof(FCalliopePin, PinToolTip) == 0x000008, "Member 'FCalliopePin::PinToolTip' has a wrong offset!");

// ScriptStruct Calliope.CalliopeConnectedPin
// 0x0018 (0x0018 - 0x0000)
struct FCalliopeConnectedPin final
{
public:
	struct FCalliopeGuid                          NodeGuid;                                          // 0x0000(0x0010)(BlueprintVisible, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   PinName;                                           // 0x0010(0x0008)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
//static_assert(alignof(FCalliopeConnectedPin) == 0x000004, "Wrong alignment on FCalliopeConnectedPin");
//static_assert(sizeof(FCalliopeConnectedPin) == 0x000018, "Wrong size on FCalliopeConnectedPin");
//static_assert(offsetof(FCalliopeConnectedPin, NodeGuid) == 0x000000, "Member 'FCalliopeConnectedPin::NodeGuid' has a wrong offset!");
//static_assert(offsetof(FCalliopeConnectedPin, PinName) == 0x000010, "Member 'FCalliopeConnectedPin::PinName' has a wrong offset!");

// ScriptStruct Calliope.GsManagedParamBase
// 0x0028 (0x0028 - 0x0000)
struct alignas(0x08) FGsManagedParamBase
{
public:
	uint8                                         Pad_0[0x8];                                        // 0x0000(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	EGsManagedParamType                           ParamType;                                         // 0x0008(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x3];                                        // 0x0009(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FGuid                                  ConfigGuid;                                        // 0x000C(0x0010)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   AliasName;                                         // 0x001C(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_24[0x4];                                       // 0x0024(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
//static_assert(alignof(FGsManagedParamBase) == 0x000008, "Wrong alignment on FGsManagedParamBase");
//static_assert(sizeof(FGsManagedParamBase) == 0x000028, "Wrong size on FGsManagedParamBase");
//static_assert(offsetof(FGsManagedParamBase, ParamType) == 0x000008, "Member 'FGsManagedParamBase::ParamType' has a wrong offset!");
//static_assert(offsetof(FGsManagedParamBase, ConfigGuid) == 0x00000C, "Member 'FGsManagedParamBase::ConfigGuid' has a wrong offset!");
//static_assert(offsetof(FGsManagedParamBase, AliasName) == 0x00001C, "Member 'FGsManagedParamBase::AliasName' has a wrong offset!");

// ScriptStruct Calliope.GsManagedFollowPartnerConfigID
// 0x0008 (0x0030 - 0x0028)
struct FGsManagedFollowPartnerConfigID final : public FGsManagedParamBase
{
public:
	int32                                         ConfigID;                                          // 0x0028(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2C[0x4];                                       // 0x002C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
//static_assert(alignof(FGsManagedFollowPartnerConfigID) == 0x000008, "Wrong alignment on FGsManagedFollowPartnerConfigID");
//static_assert(sizeof(FGsManagedFollowPartnerConfigID) == 0x000030, "Wrong size on FGsManagedFollowPartnerConfigID");
//static_assert(offsetof(FGsManagedFollowPartnerConfigID, ConfigID) == 0x000028, "Member 'FGsManagedFollowPartnerConfigID::ConfigID' has a wrong offset!");

// ScriptStruct Calliope.GsManagedAssociationUnitConfigID
// 0x0008 (0x0030 - 0x0028)
struct FGsManagedAssociationUnitConfigID final : public FGsManagedParamBase
{
public:
	int32                                         ConfigID;                                          // 0x0028(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2C[0x4];                                       // 0x002C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
//static_assert(alignof(FGsManagedAssociationUnitConfigID) == 0x000008, "Wrong alignment on FGsManagedAssociationUnitConfigID");
//static_assert(sizeof(FGsManagedAssociationUnitConfigID) == 0x000030, "Wrong size on FGsManagedAssociationUnitConfigID");
//static_assert(offsetof(FGsManagedAssociationUnitConfigID, ConfigID) == 0x000028, "Member 'FGsManagedAssociationUnitConfigID::ConfigID' has a wrong offset!");

// ScriptStruct Calliope.GsManagedAssociationOnFightSkillID
// 0x0008 (0x0030 - 0x0028)
struct FGsManagedAssociationOnFightSkillID final : public FGsManagedParamBase
{
public:
	int32                                         OnFightSkillID;                                    // 0x0028(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2C[0x4];                                       // 0x002C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
//static_assert(alignof(FGsManagedAssociationOnFightSkillID) == 0x000008, "Wrong alignment on FGsManagedAssociationOnFightSkillID");
//static_assert(sizeof(FGsManagedAssociationOnFightSkillID) == 0x000030, "Wrong size on FGsManagedAssociationOnFightSkillID");
//static_assert(offsetof(FGsManagedAssociationOnFightSkillID, OnFightSkillID) == 0x000028, "Member 'FGsManagedAssociationOnFightSkillID::OnFightSkillID' has a wrong offset!");

// ScriptStruct Calliope.GsManagedSequenceID
// 0x0008 (0x0030 - 0x0028)
struct FGsManagedSequenceID final : public FGsManagedParamBase
{
public:
	int32                                         SequenceID;                                        // 0x0028(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2C[0x4];                                       // 0x002C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
//static_assert(alignof(FGsManagedSequenceID) == 0x000008, "Wrong alignment on FGsManagedSequenceID");
//static_assert(sizeof(FGsManagedSequenceID) == 0x000030, "Wrong size on FGsManagedSequenceID");
//static_assert(offsetof(FGsManagedSequenceID, SequenceID) == 0x000028, "Member 'FGsManagedSequenceID::SequenceID' has a wrong offset!");

// ScriptStruct Calliope.GsManagedTaskLine
// 0x0008 (0x0030 - 0x0028)
struct FGsManagedTaskLine final : public FGsManagedParamBase
{
public:
	int32                                         TaskLineID;                                        // 0x0028(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2C[0x4];                                       // 0x002C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
//static_assert(alignof(FGsManagedTaskLine) == 0x000008, "Wrong alignment on FGsManagedTaskLine");
//static_assert(sizeof(FGsManagedTaskLine) == 0x000030, "Wrong size on FGsManagedTaskLine");
//static_assert(offsetof(FGsManagedTaskLine, TaskLineID) == 0x000028, "Member 'FGsManagedTaskLine::TaskLineID' has a wrong offset!");

// ScriptStruct Calliope.GsManagedTaskStage
// 0x0008 (0x0030 - 0x0028)
struct FGsManagedTaskStage final : public FGsManagedParamBase
{
public:
	int32                                         TaskStage;                                         // 0x0028(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2C[0x4];                                       // 0x002C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
//static_assert(alignof(FGsManagedTaskStage) == 0x000008, "Wrong alignment on FGsManagedTaskStage");
//static_assert(sizeof(FGsManagedTaskStage) == 0x000030, "Wrong size on FGsManagedTaskStage");
//static_assert(offsetof(FGsManagedTaskStage, TaskStage) == 0x000028, "Member 'FGsManagedTaskStage::TaskStage' has a wrong offset!");

// ScriptStruct Calliope.GsSmartParamArray
// 0x0010 (0x0010 - 0x0000)
struct FGsSmartParamArray final
{
public:
	TArray<struct FGuid>                          ConfigGuides;                                      // 0x0000(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
};
//static_assert(alignof(FGsSmartParamArray) == 0x000008, "Wrong alignment on FGsSmartParamArray");
//static_assert(sizeof(FGsSmartParamArray) == 0x000010, "Wrong size on FGsSmartParamArray");
//static_assert(offsetof(FGsSmartParamArray, ConfigGuides) == 0x000000, "Member 'FGsSmartParamArray::ConfigGuides' has a wrong offset!");

// ScriptStruct Calliope.GsSmartParam
// 0x0010 (0x0010 - 0x0000)
struct FGsSmartParam final
{
public:
	struct FGuid                                  ConfigGuid;                                        // 0x0000(0x0010)(Edit, BlueprintVisible, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
//static_assert(alignof(FGsSmartParam) == 0x000004, "Wrong alignment on FGsSmartParam");
//static_assert(sizeof(FGsSmartParam) == 0x000010, "Wrong size on FGsSmartParam");
//static_assert(offsetof(FGsSmartParam, ConfigGuid) == 0x000000, "Member 'FGsSmartParam::ConfigGuid' has a wrong offset!");

// ScriptStruct Calliope.GsManagedBuffID
// 0x0018 (0x0040 - 0x0028)
struct FGsManagedBuffID final : public FGsManagedParamBase
{
public:
	int32                                         BuffID;                                            // 0x0028(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2C[0x4];                                       // 0x002C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FGsSmartParamArray                     NPCUnit;                                           // 0x0030(0x0010)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
};
//static_assert(alignof(FGsManagedBuffID) == 0x000008, "Wrong alignment on FGsManagedBuffID");
//static_assert(sizeof(FGsManagedBuffID) == 0x000040, "Wrong size on FGsManagedBuffID");
//static_assert(offsetof(FGsManagedBuffID, BuffID) == 0x000028, "Member 'FGsManagedBuffID::BuffID' has a wrong offset!");
//static_assert(offsetof(FGsManagedBuffID, NPCUnit) == 0x000030, "Member 'FGsManagedBuffID::NPCUnit' has a wrong offset!");

// ScriptStruct Calliope.GsManagedGroupID
// 0x0008 (0x0030 - 0x0028)
struct FGsManagedGroupID final : public FGsManagedParamBase
{
public:
	int32                                         InteractorGroupID;                                 // 0x0028(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2C[0x4];                                       // 0x002C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
//static_assert(alignof(FGsManagedGroupID) == 0x000008, "Wrong alignment on FGsManagedGroupID");
//static_assert(sizeof(FGsManagedGroupID) == 0x000030, "Wrong size on FGsManagedGroupID");
//static_assert(offsetof(FGsManagedGroupID, InteractorGroupID) == 0x000028, "Member 'FGsManagedGroupID::InteractorGroupID' has a wrong offset!");

// ScriptStruct Calliope.GsManagedArchiveLabel
// 0x0008 (0x0030 - 0x0028)
struct FGsManagedArchiveLabel final : public FGsManagedParamBase
{
public:
	class FName                                   ArchiveLabel;                                      // 0x0028(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
//static_assert(alignof(FGsManagedArchiveLabel) == 0x000008, "Wrong alignment on FGsManagedArchiveLabel");
//static_assert(sizeof(FGsManagedArchiveLabel) == 0x000030, "Wrong size on FGsManagedArchiveLabel");
//static_assert(offsetof(FGsManagedArchiveLabel, ArchiveLabel) == 0x000028, "Member 'FGsManagedArchiveLabel::ArchiveLabel' has a wrong offset!");

// ScriptStruct Calliope.GsManagedStreamingLevel
// 0x0018 (0x0040 - 0x0028)
struct FGsManagedStreamingLevel final : public FGsManagedParamBase
{
public:
	class FName                                   PersistentLevelName;                               // 0x0028(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   StreamingLevelName;                                // 0x0030(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EGsStreamingLevelState                        State;                                             // 0x0038(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_39[0x7];                                       // 0x0039(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
//static_assert(alignof(FGsManagedStreamingLevel) == 0x000008, "Wrong alignment on FGsManagedStreamingLevel");
//static_assert(sizeof(FGsManagedStreamingLevel) == 0x000040, "Wrong size on FGsManagedStreamingLevel");
//static_assert(offsetof(FGsManagedStreamingLevel, PersistentLevelName) == 0x000028, "Member 'FGsManagedStreamingLevel::PersistentLevelName' has a wrong offset!");
//static_assert(offsetof(FGsManagedStreamingLevel, StreamingLevelName) == 0x000030, "Member 'FGsManagedStreamingLevel::StreamingLevelName' has a wrong offset!");
//static_assert(offsetof(FGsManagedStreamingLevel, State) == 0x000038, "Member 'FGsManagedStreamingLevel::State' has a wrong offset!");

// ScriptStruct Calliope.GsManagedSceneObjBase
// 0x0018 (0x0040 - 0x0028)
struct FGsManagedSceneObjBase : public FGsManagedParamBase
{
public:
	class FString                                 ActorGuid;                                         // 0x0028(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bNeedStateManaged;                                 // 0x0038(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_39[0x7];                                       // 0x0039(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
//static_assert(alignof(FGsManagedSceneObjBase) == 0x000008, "Wrong alignment on FGsManagedSceneObjBase");
//static_assert(sizeof(FGsManagedSceneObjBase) == 0x000040, "Wrong size on FGsManagedSceneObjBase");
//static_assert(offsetof(FGsManagedSceneObjBase, ActorGuid) == 0x000028, "Member 'FGsManagedSceneObjBase::ActorGuid' has a wrong offset!");
//static_assert(offsetof(FGsManagedSceneObjBase, bNeedStateManaged) == 0x000038, "Member 'FGsManagedSceneObjBase::bNeedStateManaged' has a wrong offset!");

// ScriptStruct Calliope.GsManagedGroupUnitObjBase
// 0x0010 (0x0038 - 0x0028)
struct FGsManagedGroupUnitObjBase : public FGsManagedParamBase
{
public:
	struct FGameplayTag                           GroupTag;                                          // 0x0028(0x0008)(Edit, BlueprintVisible, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bNeedStateManaged;                                 // 0x0030(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_31[0x7];                                       // 0x0031(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
//static_assert(alignof(FGsManagedGroupUnitObjBase) == 0x000008, "Wrong alignment on FGsManagedGroupUnitObjBase");
//static_assert(sizeof(FGsManagedGroupUnitObjBase) == 0x000038, "Wrong size on FGsManagedGroupUnitObjBase");
//static_assert(offsetof(FGsManagedGroupUnitObjBase, GroupTag) == 0x000028, "Member 'FGsManagedGroupUnitObjBase::GroupTag' has a wrong offset!");
//static_assert(offsetof(FGsManagedGroupUnitObjBase, bNeedStateManaged) == 0x000030, "Member 'FGsManagedGroupUnitObjBase::bNeedStateManaged' has a wrong offset!");

// ScriptStruct Calliope.GsManagedSpawner
// 0x0030 (0x0070 - 0x0040)
struct FGsManagedSpawner final : public FGsManagedSceneObjBase
{
public:
	TSoftObjectPtr<class AActor>                  Actor;                                             // 0x0040(0x0028)(Edit, BlueprintVisible, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EGsSpawnerState                               State;                                             // 0x0068(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_69[0x7];                                       // 0x0069(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
//static_assert(alignof(FGsManagedSpawner) == 0x000008, "Wrong alignment on FGsManagedSpawner");
//static_assert(sizeof(FGsManagedSpawner) == 0x000070, "Wrong size on FGsManagedSpawner");
//static_assert(offsetof(FGsManagedSpawner, Actor) == 0x000040, "Member 'FGsManagedSpawner::Actor' has a wrong offset!");
//static_assert(offsetof(FGsManagedSpawner, State) == 0x000068, "Member 'FGsManagedSpawner::State' has a wrong offset!");

// ScriptStruct Calliope.GsManagedUnit
// 0x0058 (0x0098 - 0x0040)
struct FGsManagedUnit final : public FGsManagedSceneObjBase
{
public:
	TSoftObjectPtr<class ACharacter>              Actor;                                             // 0x0040(0x0028)(Edit, BlueprintVisible, EditConst, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TSoftObjectPtr<class AActor>                  Tamer;                                             // 0x0068(0x0028)(Edit, BlueprintVisible, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EGsUnitResetType                              State;                                             // 0x0090(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_91[0x7];                                       // 0x0091(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
//static_assert(alignof(FGsManagedUnit) == 0x000008, "Wrong alignment on FGsManagedUnit");
//static_assert(sizeof(FGsManagedUnit) == 0x000098, "Wrong size on FGsManagedUnit");
//static_assert(offsetof(FGsManagedUnit, Actor) == 0x000040, "Member 'FGsManagedUnit::Actor' has a wrong offset!");
//static_assert(offsetof(FGsManagedUnit, Tamer) == 0x000068, "Member 'FGsManagedUnit::Tamer' has a wrong offset!");
//static_assert(offsetof(FGsManagedUnit, State) == 0x000090, "Member 'FGsManagedUnit::State' has a wrong offset!");

// ScriptStruct Calliope.GsManagedGroupUnit
// 0x0008 (0x0040 - 0x0038)
struct FGsManagedGroupUnit final : public FGsManagedGroupUnitObjBase
{
public:
	EGsUnitResetType                              State;                                             // 0x0038(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_39[0x7];                                       // 0x0039(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
//static_assert(alignof(FGsManagedGroupUnit) == 0x000008, "Wrong alignment on FGsManagedGroupUnit");
//static_assert(sizeof(FGsManagedGroupUnit) == 0x000040, "Wrong size on FGsManagedGroupUnit");
//static_assert(offsetof(FGsManagedGroupUnit, State) == 0x000038, "Member 'FGsManagedGroupUnit::State' has a wrong offset!");

// ScriptStruct Calliope.GsNPCReferenceInfo
// 0x0050 (0x0050 - 0x0000)
struct FGsNPCReferenceInfo final
{
public:
	struct FGuid                                  ConfigGuid;                                        // 0x0000(0x0010)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TSoftObjectPtr<class AActor>                  Tamer;                                             // 0x0010(0x0028)(Edit, BlueprintVisible, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 ActorGuid;                                         // 0x0038(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   AliasName;                                         // 0x0048(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
//static_assert(alignof(FGsNPCReferenceInfo) == 0x000008, "Wrong alignment on FGsNPCReferenceInfo");
//static_assert(sizeof(FGsNPCReferenceInfo) == 0x000050, "Wrong size on FGsNPCReferenceInfo");
//static_assert(offsetof(FGsNPCReferenceInfo, ConfigGuid) == 0x000000, "Member 'FGsNPCReferenceInfo::ConfigGuid' has a wrong offset!");
//static_assert(offsetof(FGsNPCReferenceInfo, Tamer) == 0x000010, "Member 'FGsNPCReferenceInfo::Tamer' has a wrong offset!");
//static_assert(offsetof(FGsNPCReferenceInfo, ActorGuid) == 0x000038, "Member 'FGsNPCReferenceInfo::ActorGuid' has a wrong offset!");
//static_assert(offsetof(FGsNPCReferenceInfo, AliasName) == 0x000048, "Member 'FGsNPCReferenceInfo::AliasName' has a wrong offset!");

// ScriptStruct Calliope.GsManagedNPCUnit
// 0x00C8 (0x0108 - 0x0040)
struct FGsManagedNPCUnit final : public FGsManagedSceneObjBase
{
public:
	TSoftObjectPtr<class ACharacter>              Actor;                                             // 0x0040(0x0028)(Edit, BlueprintVisible, EditConst, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TSoftObjectPtr<class AActor>                  Tamer;                                             // 0x0068(0x0028)(Edit, BlueprintVisible, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<struct FGsNPCReferenceInfo>            NPCInstanceGroup;                                  // 0x0090(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
	int32                                         TeamID;                                            // 0x00A0(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FGsSmartParam                          TeamIDParam;                                       // 0x00A4(0x0010)(Edit, BlueprintVisible, NoDestructor, NativeAccessSpecifierPublic)
	int32                                         IdleAMIdx;                                         // 0x00B4(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FGsSmartParam                          IdleAMIdxParam;                                    // 0x00B8(0x0010)(Edit, BlueprintVisible, NoDestructor, NativeAccessSpecifierPublic)
	int32                                         LeisureAnimIndex;                                  // 0x00C8(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FGsSmartParam                          LeisureAnimIndexParam;                             // 0x00CC(0x0010)(Edit, BlueprintVisible, NoDestructor, NativeAccessSpecifierPublic)
	int32                                         InteractGroupID;                                   // 0x00DC(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FGsSmartParam                          InteractGroupIDParam;                              // 0x00E0(0x0010)(Edit, BlueprintVisible, NoDestructor, NativeAccessSpecifierPublic)
	EGsNPCShowState                               ShowState;                                         // 0x00F0(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_F1[0x3];                                       // 0x00F1(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FGuid                                  ActiveInstance;                                    // 0x00F4(0x0010)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_104[0x4];                                      // 0x0104(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
//static_assert(alignof(FGsManagedNPCUnit) == 0x000008, "Wrong alignment on FGsManagedNPCUnit");
//static_assert(sizeof(FGsManagedNPCUnit) == 0x000108, "Wrong size on FGsManagedNPCUnit");
//static_assert(offsetof(FGsManagedNPCUnit, Actor) == 0x000040, "Member 'FGsManagedNPCUnit::Actor' has a wrong offset!");
//static_assert(offsetof(FGsManagedNPCUnit, Tamer) == 0x000068, "Member 'FGsManagedNPCUnit::Tamer' has a wrong offset!");
//static_assert(offsetof(FGsManagedNPCUnit, NPCInstanceGroup) == 0x000090, "Member 'FGsManagedNPCUnit::NPCInstanceGroup' has a wrong offset!");
//static_assert(offsetof(FGsManagedNPCUnit, TeamID) == 0x0000A0, "Member 'FGsManagedNPCUnit::TeamID' has a wrong offset!");
//static_assert(offsetof(FGsManagedNPCUnit, TeamIDParam) == 0x0000A4, "Member 'FGsManagedNPCUnit::TeamIDParam' has a wrong offset!");
//static_assert(offsetof(FGsManagedNPCUnit, IdleAMIdx) == 0x0000B4, "Member 'FGsManagedNPCUnit::IdleAMIdx' has a wrong offset!");
//static_assert(offsetof(FGsManagedNPCUnit, IdleAMIdxParam) == 0x0000B8, "Member 'FGsManagedNPCUnit::IdleAMIdxParam' has a wrong offset!");
//static_assert(offsetof(FGsManagedNPCUnit, LeisureAnimIndex) == 0x0000C8, "Member 'FGsManagedNPCUnit::LeisureAnimIndex' has a wrong offset!");
//static_assert(offsetof(FGsManagedNPCUnit, LeisureAnimIndexParam) == 0x0000CC, "Member 'FGsManagedNPCUnit::LeisureAnimIndexParam' has a wrong offset!");
//static_assert(offsetof(FGsManagedNPCUnit, InteractGroupID) == 0x0000DC, "Member 'FGsManagedNPCUnit::InteractGroupID' has a wrong offset!");
//static_assert(offsetof(FGsManagedNPCUnit, InteractGroupIDParam) == 0x0000E0, "Member 'FGsManagedNPCUnit::InteractGroupIDParam' has a wrong offset!");
//static_assert(offsetof(FGsManagedNPCUnit, ShowState) == 0x0000F0, "Member 'FGsManagedNPCUnit::ShowState' has a wrong offset!");
//static_assert(offsetof(FGsManagedNPCUnit, ActiveInstance) == 0x0000F4, "Member 'FGsManagedNPCUnit::ActiveInstance' has a wrong offset!");

// ScriptStruct Calliope.GsManagedStreamingLevelStateConfig
// 0x0008 (0x0030 - 0x0028)
struct FGsManagedStreamingLevelStateConfig final : public FGsManagedParamBase
{
public:
	int32                                         LevelID;                                           // 0x0028(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         DataAssetID;                                       // 0x002C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
//static_assert(alignof(FGsManagedStreamingLevelStateConfig) == 0x000008, "Wrong alignment on FGsManagedStreamingLevelStateConfig");
//static_assert(sizeof(FGsManagedStreamingLevelStateConfig) == 0x000030, "Wrong size on FGsManagedStreamingLevelStateConfig");
//static_assert(offsetof(FGsManagedStreamingLevelStateConfig, LevelID) == 0x000028, "Member 'FGsManagedStreamingLevelStateConfig::LevelID' has a wrong offset!");
//static_assert(offsetof(FGsManagedStreamingLevelStateConfig, DataAssetID) == 0x00002C, "Member 'FGsManagedStreamingLevelStateConfig::DataAssetID' has a wrong offset!");

// ScriptStruct Calliope.GsManagedDynamicObstacle
// 0x0030 (0x0070 - 0x0040)
struct FGsManagedDynamicObstacle final : public FGsManagedSceneObjBase
{
public:
	TSoftObjectPtr<class AActor>                  Actor;                                             // 0x0040(0x0028)(Edit, BlueprintVisible, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EGsDynamicObstacleState                       State;                                             // 0x0068(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_69[0x7];                                       // 0x0069(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
//static_assert(alignof(FGsManagedDynamicObstacle) == 0x000008, "Wrong alignment on FGsManagedDynamicObstacle");
//static_assert(sizeof(FGsManagedDynamicObstacle) == 0x000070, "Wrong size on FGsManagedDynamicObstacle");
//static_assert(offsetof(FGsManagedDynamicObstacle, Actor) == 0x000040, "Member 'FGsManagedDynamicObstacle::Actor' has a wrong offset!");
//static_assert(offsetof(FGsManagedDynamicObstacle, State) == 0x000068, "Member 'FGsManagedDynamicObstacle::State' has a wrong offset!");

// ScriptStruct Calliope.GsManagedOverlap
// 0x0030 (0x0070 - 0x0040)
struct FGsManagedOverlap final : public FGsManagedSceneObjBase
{
public:
	TSoftObjectPtr<class AActor>                  Actor;                                             // 0x0040(0x0028)(Edit, BlueprintVisible, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EGsOverlapState                               State;                                             // 0x0068(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_69[0x7];                                       // 0x0069(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
//static_assert(alignof(FGsManagedOverlap) == 0x000008, "Wrong alignment on FGsManagedOverlap");
//static_assert(sizeof(FGsManagedOverlap) == 0x000070, "Wrong size on FGsManagedOverlap");
//static_assert(offsetof(FGsManagedOverlap, Actor) == 0x000040, "Member 'FGsManagedOverlap::Actor' has a wrong offset!");
//static_assert(offsetof(FGsManagedOverlap, State) == 0x000068, "Member 'FGsManagedOverlap::State' has a wrong offset!");

// ScriptStruct Calliope.GsManagedInteractor
// 0x0040 (0x0080 - 0x0040)
struct FGsManagedInteractor final : public FGsManagedSceneObjBase
{
public:
	TSoftObjectPtr<class AActor>                  Actor;                                             // 0x0040(0x0028)(Edit, BlueprintVisible, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EGsInteractorState                            State;                                             // 0x0068(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_69[0x3];                                       // 0x0069(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FGsSmartParam                          GroupId;                                           // 0x006C(0x0010)(Edit, BlueprintVisible, NoDestructor, NativeAccessSpecifierPublic)
	uint8                                         Pad_7C[0x4];                                       // 0x007C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
//static_assert(alignof(FGsManagedInteractor) == 0x000008, "Wrong alignment on FGsManagedInteractor");
//static_assert(sizeof(FGsManagedInteractor) == 0x000080, "Wrong size on FGsManagedInteractor");
//static_assert(offsetof(FGsManagedInteractor, Actor) == 0x000040, "Member 'FGsManagedInteractor::Actor' has a wrong offset!");
//static_assert(offsetof(FGsManagedInteractor, State) == 0x000068, "Member 'FGsManagedInteractor::State' has a wrong offset!");
//static_assert(offsetof(FGsManagedInteractor, GroupId) == 0x00006C, "Member 'FGsManagedInteractor::GroupId' has a wrong offset!");

// ScriptStruct Calliope.GsManagedAiConversationID
// 0x0010 (0x0038 - 0x0028)
struct FGsManagedAiConversationID final : public FGsManagedParamBase
{
public:
	TArray<int32>                                 AiConversationIDList;                              // 0x0028(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
};
//static_assert(alignof(FGsManagedAiConversationID) == 0x000008, "Wrong alignment on FGsManagedAiConversationID");
//static_assert(sizeof(FGsManagedAiConversationID) == 0x000038, "Wrong size on FGsManagedAiConversationID");
//static_assert(offsetof(FGsManagedAiConversationID, AiConversationIDList) == 0x000028, "Member 'FGsManagedAiConversationID::AiConversationIDList' has a wrong offset!");

// ScriptStruct Calliope.GsManagedTeamID
// 0x0008 (0x0030 - 0x0028)
struct FGsManagedTeamID final : public FGsManagedParamBase
{
public:
	int32                                         TeamID;                                            // 0x0028(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2C[0x4];                                       // 0x002C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
//static_assert(alignof(FGsManagedTeamID) == 0x000008, "Wrong alignment on FGsManagedTeamID");
//static_assert(sizeof(FGsManagedTeamID) == 0x000030, "Wrong size on FGsManagedTeamID");
//static_assert(offsetof(FGsManagedTeamID, TeamID) == 0x000028, "Member 'FGsManagedTeamID::TeamID' has a wrong offset!");

// ScriptStruct Calliope.GsManagedIdleAMIdx
// 0x0008 (0x0030 - 0x0028)
struct FGsManagedIdleAMIdx final : public FGsManagedParamBase
{
public:
	int32                                         IdleAMIdx;                                         // 0x0028(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2C[0x4];                                       // 0x002C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
//static_assert(alignof(FGsManagedIdleAMIdx) == 0x000008, "Wrong alignment on FGsManagedIdleAMIdx");
//static_assert(sizeof(FGsManagedIdleAMIdx) == 0x000030, "Wrong size on FGsManagedIdleAMIdx");
//static_assert(offsetof(FGsManagedIdleAMIdx, IdleAMIdx) == 0x000028, "Member 'FGsManagedIdleAMIdx::IdleAMIdx' has a wrong offset!");

// ScriptStruct Calliope.GsManagedLeisureAnimIndex
// 0x0008 (0x0030 - 0x0028)
struct FGsManagedLeisureAnimIndex final : public FGsManagedParamBase
{
public:
	int32                                         LeisureAnimIndex;                                  // 0x0028(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2C[0x4];                                       // 0x002C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
//static_assert(alignof(FGsManagedLeisureAnimIndex) == 0x000008, "Wrong alignment on FGsManagedLeisureAnimIndex");
//static_assert(sizeof(FGsManagedLeisureAnimIndex) == 0x000030, "Wrong size on FGsManagedLeisureAnimIndex");
//static_assert(offsetof(FGsManagedLeisureAnimIndex, LeisureAnimIndex) == 0x000028, "Member 'FGsManagedLeisureAnimIndex::LeisureAnimIndex' has a wrong offset!");

// ScriptStruct Calliope.GsManagedInteractGroupID
// 0x0008 (0x0030 - 0x0028)
struct FGsManagedInteractGroupID final : public FGsManagedParamBase
{
public:
	int32                                         InteractGroupID;                                   // 0x0028(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2C[0x4];                                       // 0x002C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
//static_assert(alignof(FGsManagedInteractGroupID) == 0x000008, "Wrong alignment on FGsManagedInteractGroupID");
//static_assert(sizeof(FGsManagedInteractGroupID) == 0x000030, "Wrong size on FGsManagedInteractGroupID");
//static_assert(offsetof(FGsManagedInteractGroupID, InteractGroupID) == 0x000028, "Member 'FGsManagedInteractGroupID::InteractGroupID' has a wrong offset!");

// ScriptStruct Calliope.CalliopeParameters
// 0x0170 (0x0170 - 0x0000)
struct FCalliopeParameters final
{
public:
	TArray<struct FGsManagedFollowPartnerConfigID> FollowPartnerConfigIDCollection;                   // 0x0000(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<struct FGsManagedAssociationUnitConfigID> AssociationUnitConfigIDCollection;                 // 0x0010(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<struct FGsManagedAssociationOnFightSkillID> AssociationOnFightSkillIDCollection;               // 0x0020(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<struct FGsManagedSequenceID>           SequenceIDCollection;                              // 0x0030(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<struct FGsManagedTaskStage>            TaskStageCollection;                               // 0x0040(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<struct FGsManagedTaskLine>             TaskLineCollection;                                // 0x0050(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<struct FGsManagedBuffID>               BuffIDCollection;                                  // 0x0060(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<struct FGsManagedArchiveLabel>         ArchiveLabelCollection;                            // 0x0070(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<struct FGsManagedGroupID>              GroupIDCollection;                                 // 0x0080(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<struct FGsManagedAiConversationID>     AiConversationIDCollection;                        // 0x0090(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<struct FGsManagedTeamID>               TeamIDCollection;                                  // 0x00A0(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<struct FGsManagedIdleAMIdx>            IdleAMIdxCollection;                               // 0x00B0(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<struct FGsManagedLeisureAnimIndex>     LeisureAnimIndexCollection;                        // 0x00C0(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<struct FGsManagedInteractGroupID>      InteractGroupIDCollection;                         // 0x00D0(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<struct FGsManagedDynamicObstacle>      DynamicObstacleCollection;                         // 0x00E0(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<struct FGsManagedOverlap>              OverlapCollection;                                 // 0x00F0(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<struct FGsManagedInteractor>           InteractorCollection;                              // 0x0100(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<struct FGsManagedSpawner>              SpawnerCollection;                                 // 0x0110(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<struct FGsManagedUnit>                 UnitCollection;                                    // 0x0120(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<struct FGsManagedGroupUnit>            GroupUnitCollection;                               // 0x0130(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<struct FGsManagedNPCUnit>              NPCUnitCollection;                                 // 0x0140(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<struct FGsManagedStreamingLevel>       StreamingLevelCollection;                          // 0x0150(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<struct FGsManagedStreamingLevelStateConfig> StreamingLevelStateConfigCollection;               // 0x0160(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
};
//static_assert(alignof(FCalliopeParameters) == 0x000008, "Wrong alignment on FCalliopeParameters");
//static_assert(sizeof(FCalliopeParameters) == 0x000170, "Wrong size on FCalliopeParameters");
//static_assert(offsetof(FCalliopeParameters, FollowPartnerConfigIDCollection) == 0x000000, "Member 'FCalliopeParameters::FollowPartnerConfigIDCollection' has a wrong offset!");
//static_assert(offsetof(FCalliopeParameters, AssociationUnitConfigIDCollection) == 0x000010, "Member 'FCalliopeParameters::AssociationUnitConfigIDCollection' has a wrong offset!");
//static_assert(offsetof(FCalliopeParameters, AssociationOnFightSkillIDCollection) == 0x000020, "Member 'FCalliopeParameters::AssociationOnFightSkillIDCollection' has a wrong offset!");
//static_assert(offsetof(FCalliopeParameters, SequenceIDCollection) == 0x000030, "Member 'FCalliopeParameters::SequenceIDCollection' has a wrong offset!");
//static_assert(offsetof(FCalliopeParameters, TaskStageCollection) == 0x000040, "Member 'FCalliopeParameters::TaskStageCollection' has a wrong offset!");
//static_assert(offsetof(FCalliopeParameters, TaskLineCollection) == 0x000050, "Member 'FCalliopeParameters::TaskLineCollection' has a wrong offset!");
//static_assert(offsetof(FCalliopeParameters, BuffIDCollection) == 0x000060, "Member 'FCalliopeParameters::BuffIDCollection' has a wrong offset!");
//static_assert(offsetof(FCalliopeParameters, ArchiveLabelCollection) == 0x000070, "Member 'FCalliopeParameters::ArchiveLabelCollection' has a wrong offset!");
//static_assert(offsetof(FCalliopeParameters, GroupIDCollection) == 0x000080, "Member 'FCalliopeParameters::GroupIDCollection' has a wrong offset!");
//static_assert(offsetof(FCalliopeParameters, AiConversationIDCollection) == 0x000090, "Member 'FCalliopeParameters::AiConversationIDCollection' has a wrong offset!");
//static_assert(offsetof(FCalliopeParameters, TeamIDCollection) == 0x0000A0, "Member 'FCalliopeParameters::TeamIDCollection' has a wrong offset!");
//static_assert(offsetof(FCalliopeParameters, IdleAMIdxCollection) == 0x0000B0, "Member 'FCalliopeParameters::IdleAMIdxCollection' has a wrong offset!");
//static_assert(offsetof(FCalliopeParameters, LeisureAnimIndexCollection) == 0x0000C0, "Member 'FCalliopeParameters::LeisureAnimIndexCollection' has a wrong offset!");
//static_assert(offsetof(FCalliopeParameters, InteractGroupIDCollection) == 0x0000D0, "Member 'FCalliopeParameters::InteractGroupIDCollection' has a wrong offset!");
//static_assert(offsetof(FCalliopeParameters, DynamicObstacleCollection) == 0x0000E0, "Member 'FCalliopeParameters::DynamicObstacleCollection' has a wrong offset!");
//static_assert(offsetof(FCalliopeParameters, OverlapCollection) == 0x0000F0, "Member 'FCalliopeParameters::OverlapCollection' has a wrong offset!");
//static_assert(offsetof(FCalliopeParameters, InteractorCollection) == 0x000100, "Member 'FCalliopeParameters::InteractorCollection' has a wrong offset!");
//static_assert(offsetof(FCalliopeParameters, SpawnerCollection) == 0x000110, "Member 'FCalliopeParameters::SpawnerCollection' has a wrong offset!");
//static_assert(offsetof(FCalliopeParameters, UnitCollection) == 0x000120, "Member 'FCalliopeParameters::UnitCollection' has a wrong offset!");
//static_assert(offsetof(FCalliopeParameters, GroupUnitCollection) == 0x000130, "Member 'FCalliopeParameters::GroupUnitCollection' has a wrong offset!");
//static_assert(offsetof(FCalliopeParameters, NPCUnitCollection) == 0x000140, "Member 'FCalliopeParameters::NPCUnitCollection' has a wrong offset!");
//static_assert(offsetof(FCalliopeParameters, StreamingLevelCollection) == 0x000150, "Member 'FCalliopeParameters::StreamingLevelCollection' has a wrong offset!");
//static_assert(offsetof(FCalliopeParameters, StreamingLevelStateConfigCollection) == 0x000160, "Member 'FCalliopeParameters::StreamingLevelStateConfigCollection' has a wrong offset!");

// ScriptStruct Calliope.CalliopeParameterMapping
// 0x00B8 (0x00B8 - 0x0000)
struct FCalliopeParameterMapping final
{
public:
	EGsManagedParamType                           ParamType;                                         // 0x0000(0x0001)(Edit, BlueprintVisible, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x3];                                        // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FGuid                                  ParamGuid;                                         // 0x0004(0x0010)(Edit, BlueprintVisible, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_14[0x4];                                       // 0x0014(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 ParamDisplayName;                                  // 0x0018(0x0010)(Edit, BlueprintVisible, ZeroConstructor, EditConst, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TSoftObjectPtr<class AActor>                  Actor;                                             // 0x0028(0x0028)(Edit, BlueprintVisible, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 ActorGuid;                                         // 0x0050(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         SequenceID;                                        // 0x0060(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         TaskStage;                                         // 0x0064(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         BuffID;                                            // 0x0068(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         GroupId;                                           // 0x006C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<int32>                                 AiConversationIDList;                              // 0x0070(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
	class FName                                   ArchiveLabel;                                      // 0x0080(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bKeepOriginal;                                     // 0x0088(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_89[0x7];                                       // 0x0089(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 ParameterString;                                   // 0x0090(0x0010)(BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         ParameterInt;                                      // 0x00A0(0x0004)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_A4[0x4];                                       // 0x00A4(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<int32>                                 ParameterArrayInt;                                 // 0x00A8(0x0010)(BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
};
//static_assert(alignof(FCalliopeParameterMapping) == 0x000008, "Wrong alignment on FCalliopeParameterMapping");
//static_assert(sizeof(FCalliopeParameterMapping) == 0x0000B8, "Wrong size on FCalliopeParameterMapping");
//static_assert(offsetof(FCalliopeParameterMapping, ParamType) == 0x000000, "Member 'FCalliopeParameterMapping::ParamType' has a wrong offset!");
//static_assert(offsetof(FCalliopeParameterMapping, ParamGuid) == 0x000004, "Member 'FCalliopeParameterMapping::ParamGuid' has a wrong offset!");
//static_assert(offsetof(FCalliopeParameterMapping, ParamDisplayName) == 0x000018, "Member 'FCalliopeParameterMapping::ParamDisplayName' has a wrong offset!");
//static_assert(offsetof(FCalliopeParameterMapping, Actor) == 0x000028, "Member 'FCalliopeParameterMapping::Actor' has a wrong offset!");
//static_assert(offsetof(FCalliopeParameterMapping, ActorGuid) == 0x000050, "Member 'FCalliopeParameterMapping::ActorGuid' has a wrong offset!");
//static_assert(offsetof(FCalliopeParameterMapping, SequenceID) == 0x000060, "Member 'FCalliopeParameterMapping::SequenceID' has a wrong offset!");
//static_assert(offsetof(FCalliopeParameterMapping, TaskStage) == 0x000064, "Member 'FCalliopeParameterMapping::TaskStage' has a wrong offset!");
//static_assert(offsetof(FCalliopeParameterMapping, BuffID) == 0x000068, "Member 'FCalliopeParameterMapping::BuffID' has a wrong offset!");
//static_assert(offsetof(FCalliopeParameterMapping, GroupId) == 0x00006C, "Member 'FCalliopeParameterMapping::GroupId' has a wrong offset!");
//static_assert(offsetof(FCalliopeParameterMapping, AiConversationIDList) == 0x000070, "Member 'FCalliopeParameterMapping::AiConversationIDList' has a wrong offset!");
//static_assert(offsetof(FCalliopeParameterMapping, ArchiveLabel) == 0x000080, "Member 'FCalliopeParameterMapping::ArchiveLabel' has a wrong offset!");
//static_assert(offsetof(FCalliopeParameterMapping, bKeepOriginal) == 0x000088, "Member 'FCalliopeParameterMapping::bKeepOriginal' has a wrong offset!");
//static_assert(offsetof(FCalliopeParameterMapping, ParameterString) == 0x000090, "Member 'FCalliopeParameterMapping::ParameterString' has a wrong offset!");
//static_assert(offsetof(FCalliopeParameterMapping, ParameterInt) == 0x0000A0, "Member 'FCalliopeParameterMapping::ParameterInt' has a wrong offset!");
//static_assert(offsetof(FCalliopeParameterMapping, ParameterArrayInt) == 0x0000A8, "Member 'FCalliopeParameterMapping::ParameterArrayInt' has a wrong offset!");

// ScriptStruct Calliope.CalliopeParameterMappingGroup
// 0x0030 (0x0030 - 0x0000)
struct FCalliopeParameterMappingGroup final
{
public:
	struct FGuid                                  GroupGuid;                                         // 0x0000(0x0010)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<struct FCalliopeParameterMapping>      Mappings;                                          // 0x0010(0x0010)(Edit, BlueprintVisible, EditFixedSize, ZeroConstructor, NativeAccessSpecifierPublic)
	class FString                                 Comment;                                           // 0x0020(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
//static_assert(alignof(FCalliopeParameterMappingGroup) == 0x000008, "Wrong alignment on FCalliopeParameterMappingGroup");
//static_assert(sizeof(FCalliopeParameterMappingGroup) == 0x000030, "Wrong size on FCalliopeParameterMappingGroup");
//static_assert(offsetof(FCalliopeParameterMappingGroup, GroupGuid) == 0x000000, "Member 'FCalliopeParameterMappingGroup::GroupGuid' has a wrong offset!");
//static_assert(offsetof(FCalliopeParameterMappingGroup, Mappings) == 0x000010, "Member 'FCalliopeParameterMappingGroup::Mappings' has a wrong offset!");
//static_assert(offsetof(FCalliopeParameterMappingGroup, Comment) == 0x000020, "Member 'FCalliopeParameterMappingGroup::Comment' has a wrong offset!");

// ScriptStruct Calliope.GsSceneObjPoliceConfigBase
// 0x0010 (0x0010 - 0x0000)
struct FGsSceneObjPoliceConfigBase
{
public:
	struct FGuid                                  ConfigGuid;                                        // 0x0000(0x0010)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
//static_assert(alignof(FGsSceneObjPoliceConfigBase) == 0x000004, "Wrong alignment on FGsSceneObjPoliceConfigBase");
//static_assert(sizeof(FGsSceneObjPoliceConfigBase) == 0x000010, "Wrong size on FGsSceneObjPoliceConfigBase");
//static_assert(offsetof(FGsSceneObjPoliceConfigBase, ConfigGuid) == 0x000000, "Member 'FGsSceneObjPoliceConfigBase::ConfigGuid' has a wrong offset!");

// ScriptStruct Calliope.GsDynamicObstaclePoliceConfig
// 0x0008 (0x0018 - 0x0010)
struct FGsDynamicObstaclePoliceConfig final : public FGsSceneObjPoliceConfigBase
{
public:
	EGsDynamicObstacleManagePolice                ManagePolice;                                      // 0x0010(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EGsDynamicObstacleState                       State;                                             // 0x0011(0x0001)(Edit, BlueprintVisible, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EGsDynamicObstacleState                       OutState;                                          // 0x0012(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EGsDynamicObstacleState                       DefaultState;                                      // 0x0013(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EGsDynamicObstacleManagePolice                ActualManagePolice;                                // 0x0014(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_15[0x3];                                       // 0x0015(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
//static_assert(alignof(FGsDynamicObstaclePoliceConfig) == 0x000004, "Wrong alignment on FGsDynamicObstaclePoliceConfig");
//static_assert(sizeof(FGsDynamicObstaclePoliceConfig) == 0x000018, "Wrong size on FGsDynamicObstaclePoliceConfig");
//static_assert(offsetof(FGsDynamicObstaclePoliceConfig, ManagePolice) == 0x000010, "Member 'FGsDynamicObstaclePoliceConfig::ManagePolice' has a wrong offset!");
//static_assert(offsetof(FGsDynamicObstaclePoliceConfig, State) == 0x000011, "Member 'FGsDynamicObstaclePoliceConfig::State' has a wrong offset!");
//static_assert(offsetof(FGsDynamicObstaclePoliceConfig, OutState) == 0x000012, "Member 'FGsDynamicObstaclePoliceConfig::OutState' has a wrong offset!");
//static_assert(offsetof(FGsDynamicObstaclePoliceConfig, DefaultState) == 0x000013, "Member 'FGsDynamicObstaclePoliceConfig::DefaultState' has a wrong offset!");
//static_assert(offsetof(FGsDynamicObstaclePoliceConfig, ActualManagePolice) == 0x000014, "Member 'FGsDynamicObstaclePoliceConfig::ActualManagePolice' has a wrong offset!");

// ScriptStruct Calliope.GsOverlapPoliceConfig
// 0x0008 (0x0018 - 0x0010)
struct FGsOverlapPoliceConfig final : public FGsSceneObjPoliceConfigBase
{
public:
	EGsOverlapManagePolice                        ManagePolice;                                      // 0x0010(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EGsOverlapState                               State;                                             // 0x0011(0x0001)(Edit, BlueprintVisible, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EGsOverlapState                               OutState;                                          // 0x0012(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EGsOverlapState                               DefaultState;                                      // 0x0013(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EGsOverlapManagePolice                        ActualManagePolice;                                // 0x0014(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_15[0x3];                                       // 0x0015(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
//static_assert(alignof(FGsOverlapPoliceConfig) == 0x000004, "Wrong alignment on FGsOverlapPoliceConfig");
//static_assert(sizeof(FGsOverlapPoliceConfig) == 0x000018, "Wrong size on FGsOverlapPoliceConfig");
//static_assert(offsetof(FGsOverlapPoliceConfig, ManagePolice) == 0x000010, "Member 'FGsOverlapPoliceConfig::ManagePolice' has a wrong offset!");
//static_assert(offsetof(FGsOverlapPoliceConfig, State) == 0x000011, "Member 'FGsOverlapPoliceConfig::State' has a wrong offset!");
//static_assert(offsetof(FGsOverlapPoliceConfig, OutState) == 0x000012, "Member 'FGsOverlapPoliceConfig::OutState' has a wrong offset!");
//static_assert(offsetof(FGsOverlapPoliceConfig, DefaultState) == 0x000013, "Member 'FGsOverlapPoliceConfig::DefaultState' has a wrong offset!");
//static_assert(offsetof(FGsOverlapPoliceConfig, ActualManagePolice) == 0x000014, "Member 'FGsOverlapPoliceConfig::ActualManagePolice' has a wrong offset!");

// ScriptStruct Calliope.GsInteractorPoliceConfig
// 0x0038 (0x0048 - 0x0010)
struct FGsInteractorPoliceConfig final : public FGsSceneObjPoliceConfigBase
{
public:
	EGsInteractorManagePolice                     ManagePolice;                                      // 0x0010(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EGsInteractorState                            State;                                             // 0x0011(0x0001)(Edit, BlueprintVisible, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EGsInteractorState                            DefaultState;                                      // 0x0012(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EGsInteractorManagePolice                     ActualManagePolice;                                // 0x0013(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EGsInteractorState                            OutState;                                          // 0x0014(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bCanModify;                                        // 0x0015(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_16[0x2];                                       // 0x0016(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	struct FGsSmartParam                          ActualValue;                                       // 0x0018(0x0010)(Edit, BlueprintVisible, EditConst, NoDestructor, NativeAccessSpecifierPublic)
	struct FGsSmartParam                          ModifyValue;                                       // 0x0028(0x0010)(Edit, BlueprintVisible, NoDestructor, NativeAccessSpecifierPublic)
	struct FGsSmartParam                          DefaultValue;                                      // 0x0038(0x0010)(Edit, BlueprintVisible, EditConst, NoDestructor, NativeAccessSpecifierPublic)
};
//static_assert(alignof(FGsInteractorPoliceConfig) == 0x000004, "Wrong alignment on FGsInteractorPoliceConfig");
//static_assert(sizeof(FGsInteractorPoliceConfig) == 0x000048, "Wrong size on FGsInteractorPoliceConfig");
//static_assert(offsetof(FGsInteractorPoliceConfig, ManagePolice) == 0x000010, "Member 'FGsInteractorPoliceConfig::ManagePolice' has a wrong offset!");
//static_assert(offsetof(FGsInteractorPoliceConfig, State) == 0x000011, "Member 'FGsInteractorPoliceConfig::State' has a wrong offset!");
//static_assert(offsetof(FGsInteractorPoliceConfig, DefaultState) == 0x000012, "Member 'FGsInteractorPoliceConfig::DefaultState' has a wrong offset!");
//static_assert(offsetof(FGsInteractorPoliceConfig, ActualManagePolice) == 0x000013, "Member 'FGsInteractorPoliceConfig::ActualManagePolice' has a wrong offset!");
//static_assert(offsetof(FGsInteractorPoliceConfig, OutState) == 0x000014, "Member 'FGsInteractorPoliceConfig::OutState' has a wrong offset!");
//static_assert(offsetof(FGsInteractorPoliceConfig, bCanModify) == 0x000015, "Member 'FGsInteractorPoliceConfig::bCanModify' has a wrong offset!");
//static_assert(offsetof(FGsInteractorPoliceConfig, ActualValue) == 0x000018, "Member 'FGsInteractorPoliceConfig::ActualValue' has a wrong offset!");
//static_assert(offsetof(FGsInteractorPoliceConfig, ModifyValue) == 0x000028, "Member 'FGsInteractorPoliceConfig::ModifyValue' has a wrong offset!");
//static_assert(offsetof(FGsInteractorPoliceConfig, DefaultValue) == 0x000038, "Member 'FGsInteractorPoliceConfig::DefaultValue' has a wrong offset!");

// ScriptStruct Calliope.GsSpawnerPoliceConfig
// 0x0008 (0x0018 - 0x0010)
struct FGsSpawnerPoliceConfig final : public FGsSceneObjPoliceConfigBase
{
public:
	EGsSpawnerManagePolice                        ManagePolice;                                      // 0x0010(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EGsSpawnerState                               State;                                             // 0x0011(0x0001)(Edit, BlueprintVisible, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EGsSpawnerState                               DefaultState;                                      // 0x0012(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EGsSpawnerManagePolice                        ActualManagePolice;                                // 0x0013(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EGsSpawnerState                               OutState;                                          // 0x0014(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_15[0x3];                                       // 0x0015(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
//static_assert(alignof(FGsSpawnerPoliceConfig) == 0x000004, "Wrong alignment on FGsSpawnerPoliceConfig");
//static_assert(sizeof(FGsSpawnerPoliceConfig) == 0x000018, "Wrong size on FGsSpawnerPoliceConfig");
//static_assert(offsetof(FGsSpawnerPoliceConfig, ManagePolice) == 0x000010, "Member 'FGsSpawnerPoliceConfig::ManagePolice' has a wrong offset!");
//static_assert(offsetof(FGsSpawnerPoliceConfig, State) == 0x000011, "Member 'FGsSpawnerPoliceConfig::State' has a wrong offset!");
//static_assert(offsetof(FGsSpawnerPoliceConfig, DefaultState) == 0x000012, "Member 'FGsSpawnerPoliceConfig::DefaultState' has a wrong offset!");
//static_assert(offsetof(FGsSpawnerPoliceConfig, ActualManagePolice) == 0x000013, "Member 'FGsSpawnerPoliceConfig::ActualManagePolice' has a wrong offset!");
//static_assert(offsetof(FGsSpawnerPoliceConfig, OutState) == 0x000014, "Member 'FGsSpawnerPoliceConfig::OutState' has a wrong offset!");

// ScriptStruct Calliope.GsStreamingLevelPoliceConfig
// 0x0008 (0x0018 - 0x0010)
struct FGsStreamingLevelPoliceConfig final : public FGsSceneObjPoliceConfigBase
{
public:
	EGsStreamingLevelManagePolice                 ManagePolice;                                      // 0x0010(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EGsStreamingLevelState                        State;                                             // 0x0011(0x0001)(Edit, BlueprintVisible, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EGsStreamingLevelState                        DefaultState;                                      // 0x0012(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EGsStreamingLevelManagePolice                 ActualManagePolice;                                // 0x0013(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EGsStreamingLevelState                        OutState;                                          // 0x0014(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_15[0x3];                                       // 0x0015(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
//static_assert(alignof(FGsStreamingLevelPoliceConfig) == 0x000004, "Wrong alignment on FGsStreamingLevelPoliceConfig");
//static_assert(sizeof(FGsStreamingLevelPoliceConfig) == 0x000018, "Wrong size on FGsStreamingLevelPoliceConfig");
//static_assert(offsetof(FGsStreamingLevelPoliceConfig, ManagePolice) == 0x000010, "Member 'FGsStreamingLevelPoliceConfig::ManagePolice' has a wrong offset!");
//static_assert(offsetof(FGsStreamingLevelPoliceConfig, State) == 0x000011, "Member 'FGsStreamingLevelPoliceConfig::State' has a wrong offset!");
//static_assert(offsetof(FGsStreamingLevelPoliceConfig, DefaultState) == 0x000012, "Member 'FGsStreamingLevelPoliceConfig::DefaultState' has a wrong offset!");
//static_assert(offsetof(FGsStreamingLevelPoliceConfig, ActualManagePolice) == 0x000013, "Member 'FGsStreamingLevelPoliceConfig::ActualManagePolice' has a wrong offset!");
//static_assert(offsetof(FGsStreamingLevelPoliceConfig, OutState) == 0x000014, "Member 'FGsStreamingLevelPoliceConfig::OutState' has a wrong offset!");

// ScriptStruct Calliope.GsUnitPoliceConfig
// 0x0008 (0x0018 - 0x0010)
struct FGsUnitPoliceConfig final : public FGsSceneObjPoliceConfigBase
{
public:
	EGsUnitManagePolice                           ManagePolice;                                      // 0x0010(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EGsUnitResetType                              State;                                             // 0x0011(0x0001)(Edit, BlueprintVisible, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EGsUnitResetType                              DefaultState;                                      // 0x0012(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EGsUnitManagePolice                           ActualManagePolice;                                // 0x0013(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EGsUnitResetType                              OutState;                                          // 0x0014(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_15[0x3];                                       // 0x0015(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
//static_assert(alignof(FGsUnitPoliceConfig) == 0x000004, "Wrong alignment on FGsUnitPoliceConfig");
//static_assert(sizeof(FGsUnitPoliceConfig) == 0x000018, "Wrong size on FGsUnitPoliceConfig");
//static_assert(offsetof(FGsUnitPoliceConfig, ManagePolice) == 0x000010, "Member 'FGsUnitPoliceConfig::ManagePolice' has a wrong offset!");
//static_assert(offsetof(FGsUnitPoliceConfig, State) == 0x000011, "Member 'FGsUnitPoliceConfig::State' has a wrong offset!");
//static_assert(offsetof(FGsUnitPoliceConfig, DefaultState) == 0x000012, "Member 'FGsUnitPoliceConfig::DefaultState' has a wrong offset!");
//static_assert(offsetof(FGsUnitPoliceConfig, ActualManagePolice) == 0x000013, "Member 'FGsUnitPoliceConfig::ActualManagePolice' has a wrong offset!");
//static_assert(offsetof(FGsUnitPoliceConfig, OutState) == 0x000014, "Member 'FGsUnitPoliceConfig::OutState' has a wrong offset!");

// ScriptStruct Calliope.GsNPCUnitIntParamConfig
// 0x0014 (0x0014 - 0x0000)
struct FGsNPCUnitIntParamConfig final
{
public:
	bool                                          bCanModify;                                        // 0x0000(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x3];                                        // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         ActualParam;                                       // 0x0004(0x0004)(Edit, BlueprintVisible, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         ModifyParam;                                       // 0x0008(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         DefaultParam;                                      // 0x000C(0x0004)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         OutParam;                                          // 0x0010(0x0004)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
//static_assert(alignof(FGsNPCUnitIntParamConfig) == 0x000004, "Wrong alignment on FGsNPCUnitIntParamConfig");
//static_assert(sizeof(FGsNPCUnitIntParamConfig) == 0x000014, "Wrong size on FGsNPCUnitIntParamConfig");
//static_assert(offsetof(FGsNPCUnitIntParamConfig, bCanModify) == 0x000000, "Member 'FGsNPCUnitIntParamConfig::bCanModify' has a wrong offset!");
//static_assert(offsetof(FGsNPCUnitIntParamConfig, ActualParam) == 0x000004, "Member 'FGsNPCUnitIntParamConfig::ActualParam' has a wrong offset!");
//static_assert(offsetof(FGsNPCUnitIntParamConfig, ModifyParam) == 0x000008, "Member 'FGsNPCUnitIntParamConfig::ModifyParam' has a wrong offset!");
//static_assert(offsetof(FGsNPCUnitIntParamConfig, DefaultParam) == 0x00000C, "Member 'FGsNPCUnitIntParamConfig::DefaultParam' has a wrong offset!");
//static_assert(offsetof(FGsNPCUnitIntParamConfig, OutParam) == 0x000010, "Member 'FGsNPCUnitIntParamConfig::OutParam' has a wrong offset!");

// ScriptStruct Calliope.GsNPCUnitSmartParamConfig
// 0x0044 (0x0044 - 0x0000)
struct FGsNPCUnitSmartParamConfig final
{
public:
	bool                                          bCanModify;                                        // 0x0000(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x3];                                        // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FGsSmartParam                          ActualParam;                                       // 0x0004(0x0010)(Edit, BlueprintVisible, EditConst, NoDestructor, NativeAccessSpecifierPublic)
	struct FGsSmartParam                          ModifyParam;                                       // 0x0014(0x0010)(Edit, BlueprintVisible, NoDestructor, NativeAccessSpecifierPublic)
	struct FGsSmartParam                          DefaultParam;                                      // 0x0024(0x0010)(BlueprintVisible, NoDestructor, NativeAccessSpecifierPublic)
	struct FGsSmartParam                          OutParam;                                          // 0x0034(0x0010)(BlueprintVisible, NoDestructor, NativeAccessSpecifierPublic)
};
//static_assert(alignof(FGsNPCUnitSmartParamConfig) == 0x000004, "Wrong alignment on FGsNPCUnitSmartParamConfig");
//static_assert(sizeof(FGsNPCUnitSmartParamConfig) == 0x000044, "Wrong size on FGsNPCUnitSmartParamConfig");
//static_assert(offsetof(FGsNPCUnitSmartParamConfig, bCanModify) == 0x000000, "Member 'FGsNPCUnitSmartParamConfig::bCanModify' has a wrong offset!");
//static_assert(offsetof(FGsNPCUnitSmartParamConfig, ActualParam) == 0x000004, "Member 'FGsNPCUnitSmartParamConfig::ActualParam' has a wrong offset!");
//static_assert(offsetof(FGsNPCUnitSmartParamConfig, ModifyParam) == 0x000014, "Member 'FGsNPCUnitSmartParamConfig::ModifyParam' has a wrong offset!");
//static_assert(offsetof(FGsNPCUnitSmartParamConfig, DefaultParam) == 0x000024, "Member 'FGsNPCUnitSmartParamConfig::DefaultParam' has a wrong offset!");
//static_assert(offsetof(FGsNPCUnitSmartParamConfig, OutParam) == 0x000034, "Member 'FGsNPCUnitSmartParamConfig::OutParam' has a wrong offset!");

// ScriptStruct Calliope.GsNPCUnitShowStateParamConfig
// 0x0005 (0x0005 - 0x0000)
struct FGsNPCUnitShowStateParamConfig final
{
public:
	bool                                          bCanModify;                                        // 0x0000(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EGsNPCShowState                               ActualParam;                                       // 0x0001(0x0001)(Edit, BlueprintVisible, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EGsNPCShowState                               ModifyParam;                                       // 0x0002(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EGsNPCShowState                               DefaultParam;                                      // 0x0003(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EGsNPCShowState                               OutParam;                                          // 0x0004(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
//static_assert(alignof(FGsNPCUnitShowStateParamConfig) == 0x000001, "Wrong alignment on FGsNPCUnitShowStateParamConfig");
//static_assert(sizeof(FGsNPCUnitShowStateParamConfig) == 0x000005, "Wrong size on FGsNPCUnitShowStateParamConfig");
//static_assert(offsetof(FGsNPCUnitShowStateParamConfig, bCanModify) == 0x000000, "Member 'FGsNPCUnitShowStateParamConfig::bCanModify' has a wrong offset!");
//static_assert(offsetof(FGsNPCUnitShowStateParamConfig, ActualParam) == 0x000001, "Member 'FGsNPCUnitShowStateParamConfig::ActualParam' has a wrong offset!");
//static_assert(offsetof(FGsNPCUnitShowStateParamConfig, ModifyParam) == 0x000002, "Member 'FGsNPCUnitShowStateParamConfig::ModifyParam' has a wrong offset!");
//static_assert(offsetof(FGsNPCUnitShowStateParamConfig, DefaultParam) == 0x000003, "Member 'FGsNPCUnitShowStateParamConfig::DefaultParam' has a wrong offset!");
//static_assert(offsetof(FGsNPCUnitShowStateParamConfig, OutParam) == 0x000004, "Member 'FGsNPCUnitShowStateParamConfig::OutParam' has a wrong offset!");

// ScriptStruct Calliope.GsNPCUnitGuidParamConfig
// 0x0044 (0x0044 - 0x0000)
struct FGsNPCUnitGuidParamConfig final
{
public:
	bool                                          bCanModify;                                        // 0x0000(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x3];                                        // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FGuid                                  ActualParam;                                       // 0x0004(0x0010)(Edit, BlueprintVisible, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FGuid                                  ModifyParam;                                       // 0x0014(0x0010)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FGuid                                  DefaultParam;                                      // 0x0024(0x0010)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FGuid                                  OutParam;                                          // 0x0034(0x0010)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
//static_assert(alignof(FGsNPCUnitGuidParamConfig) == 0x000004, "Wrong alignment on FGsNPCUnitGuidParamConfig");
//static_assert(sizeof(FGsNPCUnitGuidParamConfig) == 0x000044, "Wrong size on FGsNPCUnitGuidParamConfig");
//static_assert(offsetof(FGsNPCUnitGuidParamConfig, bCanModify) == 0x000000, "Member 'FGsNPCUnitGuidParamConfig::bCanModify' has a wrong offset!");
//static_assert(offsetof(FGsNPCUnitGuidParamConfig, ActualParam) == 0x000004, "Member 'FGsNPCUnitGuidParamConfig::ActualParam' has a wrong offset!");
//static_assert(offsetof(FGsNPCUnitGuidParamConfig, ModifyParam) == 0x000014, "Member 'FGsNPCUnitGuidParamConfig::ModifyParam' has a wrong offset!");
//static_assert(offsetof(FGsNPCUnitGuidParamConfig, DefaultParam) == 0x000024, "Member 'FGsNPCUnitGuidParamConfig::DefaultParam' has a wrong offset!");
//static_assert(offsetof(FGsNPCUnitGuidParamConfig, OutParam) == 0x000034, "Member 'FGsNPCUnitGuidParamConfig::OutParam' has a wrong offset!");

// ScriptStruct Calliope.GsNPCUnitBuffParamConfig
// 0x0018 (0x0018 - 0x0000)
struct FGsNPCUnitBuffParamConfig final
{
public:
	struct FGuid                                  ConfigGuid;                                        // 0x0000(0x0010)(Edit, BlueprintVisible, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bCanModify;                                        // 0x0010(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EGsNPCBuffState                               ActualParam;                                       // 0x0011(0x0001)(Edit, BlueprintVisible, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EGsNPCBuffState                               ModifyParam;                                       // 0x0012(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EGsNPCBuffState                               DefaultParam;                                      // 0x0013(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EGsNPCBuffState                               OutParam;                                          // 0x0014(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_15[0x3];                                       // 0x0015(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
//static_assert(alignof(FGsNPCUnitBuffParamConfig) == 0x000004, "Wrong alignment on FGsNPCUnitBuffParamConfig");
//static_assert(sizeof(FGsNPCUnitBuffParamConfig) == 0x000018, "Wrong size on FGsNPCUnitBuffParamConfig");
//static_assert(offsetof(FGsNPCUnitBuffParamConfig, ConfigGuid) == 0x000000, "Member 'FGsNPCUnitBuffParamConfig::ConfigGuid' has a wrong offset!");
//static_assert(offsetof(FGsNPCUnitBuffParamConfig, bCanModify) == 0x000010, "Member 'FGsNPCUnitBuffParamConfig::bCanModify' has a wrong offset!");
//static_assert(offsetof(FGsNPCUnitBuffParamConfig, ActualParam) == 0x000011, "Member 'FGsNPCUnitBuffParamConfig::ActualParam' has a wrong offset!");
//static_assert(offsetof(FGsNPCUnitBuffParamConfig, ModifyParam) == 0x000012, "Member 'FGsNPCUnitBuffParamConfig::ModifyParam' has a wrong offset!");
//static_assert(offsetof(FGsNPCUnitBuffParamConfig, DefaultParam) == 0x000013, "Member 'FGsNPCUnitBuffParamConfig::DefaultParam' has a wrong offset!");
//static_assert(offsetof(FGsNPCUnitBuffParamConfig, OutParam) == 0x000014, "Member 'FGsNPCUnitBuffParamConfig::OutParam' has a wrong offset!");

// ScriptStruct Calliope.GsNPCUnitPoliceConfig
// 0x01C0 (0x01D0 - 0x0010)
struct FGsNPCUnitPoliceConfig final : public FGsSceneObjPoliceConfigBase
{
public:
	struct FGsNPCUnitIntParamConfig               ManagedTeamID;                                     // 0x0010(0x0014)(Edit, BlueprintVisible, NoDestructor, NativeAccessSpecifierPublic)
	struct FGsNPCUnitSmartParamConfig             ManagedTeamIDParam;                                // 0x0024(0x0044)(Edit, BlueprintVisible, NoDestructor, NativeAccessSpecifierPublic)
	struct FGsNPCUnitIntParamConfig               ManagedIdleAMIdx;                                  // 0x0068(0x0014)(Edit, BlueprintVisible, NoDestructor, NativeAccessSpecifierPublic)
	struct FGsNPCUnitSmartParamConfig             ManagedIdleAMIdxParam;                             // 0x007C(0x0044)(Edit, BlueprintVisible, NoDestructor, NativeAccessSpecifierPublic)
	struct FGsNPCUnitIntParamConfig               ManagedLeisureAnimIndex;                           // 0x00C0(0x0014)(Edit, BlueprintVisible, NoDestructor, NativeAccessSpecifierPublic)
	struct FGsNPCUnitSmartParamConfig             ManagedLeisureAnimIndexParam;                      // 0x00D4(0x0044)(Edit, BlueprintVisible, NoDestructor, NativeAccessSpecifierPublic)
	struct FGsNPCUnitIntParamConfig               ManagedInteractGroupID;                            // 0x0118(0x0014)(Edit, BlueprintVisible, NoDestructor, NativeAccessSpecifierPublic)
	struct FGsNPCUnitSmartParamConfig             ManagedInteractGroupIDParam;                       // 0x012C(0x0044)(Edit, BlueprintVisible, NoDestructor, NativeAccessSpecifierPublic)
	struct FGsNPCUnitShowStateParamConfig         ManagedShowState;                                  // 0x0170(0x0005)(Edit, BlueprintVisible, NoDestructor, NativeAccessSpecifierPublic)
	uint8                                         Pad_175[0x3];                                      // 0x0175(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FGsNPCUnitGuidParamConfig              ManagedActiveInstance;                             // 0x0178(0x0044)(Edit, BlueprintVisible, NoDestructor, NativeAccessSpecifierPublic)
	uint8                                         Pad_1BC[0x4];                                      // 0x01BC(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<struct FGsNPCUnitBuffParamConfig>      ManagedBuffIDList;                                 // 0x01C0(0x0010)(Edit, BlueprintVisible, EditFixedSize, ZeroConstructor, NativeAccessSpecifierPublic)
};
//static_assert(alignof(FGsNPCUnitPoliceConfig) == 0x000008, "Wrong alignment on FGsNPCUnitPoliceConfig");
//static_assert(sizeof(FGsNPCUnitPoliceConfig) == 0x0001D0, "Wrong size on FGsNPCUnitPoliceConfig");
//static_assert(offsetof(FGsNPCUnitPoliceConfig, ManagedTeamID) == 0x000010, "Member 'FGsNPCUnitPoliceConfig::ManagedTeamID' has a wrong offset!");
//static_assert(offsetof(FGsNPCUnitPoliceConfig, ManagedTeamIDParam) == 0x000024, "Member 'FGsNPCUnitPoliceConfig::ManagedTeamIDParam' has a wrong offset!");
//static_assert(offsetof(FGsNPCUnitPoliceConfig, ManagedIdleAMIdx) == 0x000068, "Member 'FGsNPCUnitPoliceConfig::ManagedIdleAMIdx' has a wrong offset!");
//static_assert(offsetof(FGsNPCUnitPoliceConfig, ManagedIdleAMIdxParam) == 0x00007C, "Member 'FGsNPCUnitPoliceConfig::ManagedIdleAMIdxParam' has a wrong offset!");
//static_assert(offsetof(FGsNPCUnitPoliceConfig, ManagedLeisureAnimIndex) == 0x0000C0, "Member 'FGsNPCUnitPoliceConfig::ManagedLeisureAnimIndex' has a wrong offset!");
//static_assert(offsetof(FGsNPCUnitPoliceConfig, ManagedLeisureAnimIndexParam) == 0x0000D4, "Member 'FGsNPCUnitPoliceConfig::ManagedLeisureAnimIndexParam' has a wrong offset!");
//static_assert(offsetof(FGsNPCUnitPoliceConfig, ManagedInteractGroupID) == 0x000118, "Member 'FGsNPCUnitPoliceConfig::ManagedInteractGroupID' has a wrong offset!");
//static_assert(offsetof(FGsNPCUnitPoliceConfig, ManagedInteractGroupIDParam) == 0x00012C, "Member 'FGsNPCUnitPoliceConfig::ManagedInteractGroupIDParam' has a wrong offset!");
//static_assert(offsetof(FGsNPCUnitPoliceConfig, ManagedShowState) == 0x000170, "Member 'FGsNPCUnitPoliceConfig::ManagedShowState' has a wrong offset!");
//static_assert(offsetof(FGsNPCUnitPoliceConfig, ManagedActiveInstance) == 0x000178, "Member 'FGsNPCUnitPoliceConfig::ManagedActiveInstance' has a wrong offset!");
//static_assert(offsetof(FGsNPCUnitPoliceConfig, ManagedBuffIDList) == 0x0001C0, "Member 'FGsNPCUnitPoliceConfig::ManagedBuffIDList' has a wrong offset!");

// ScriptStruct Calliope.GsStreamingLevelStateConfigIntParamConfig
// 0x0014 (0x0014 - 0x0000)
struct FGsStreamingLevelStateConfigIntParamConfig final
{
public:
	bool                                          bCanModify;                                        // 0x0000(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x3];                                        // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         ActualParam;                                       // 0x0004(0x0004)(Edit, BlueprintVisible, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         ModifyParam;                                       // 0x0008(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         DefaultParam;                                      // 0x000C(0x0004)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         OutParam;                                          // 0x0010(0x0004)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
//static_assert(alignof(FGsStreamingLevelStateConfigIntParamConfig) == 0x000004, "Wrong alignment on FGsStreamingLevelStateConfigIntParamConfig");
//static_assert(sizeof(FGsStreamingLevelStateConfigIntParamConfig) == 0x000014, "Wrong size on FGsStreamingLevelStateConfigIntParamConfig");
//static_assert(offsetof(FGsStreamingLevelStateConfigIntParamConfig, bCanModify) == 0x000000, "Member 'FGsStreamingLevelStateConfigIntParamConfig::bCanModify' has a wrong offset!");
//static_assert(offsetof(FGsStreamingLevelStateConfigIntParamConfig, ActualParam) == 0x000004, "Member 'FGsStreamingLevelStateConfigIntParamConfig::ActualParam' has a wrong offset!");
//static_assert(offsetof(FGsStreamingLevelStateConfigIntParamConfig, ModifyParam) == 0x000008, "Member 'FGsStreamingLevelStateConfigIntParamConfig::ModifyParam' has a wrong offset!");
//static_assert(offsetof(FGsStreamingLevelStateConfigIntParamConfig, DefaultParam) == 0x00000C, "Member 'FGsStreamingLevelStateConfigIntParamConfig::DefaultParam' has a wrong offset!");
//static_assert(offsetof(FGsStreamingLevelStateConfigIntParamConfig, OutParam) == 0x000010, "Member 'FGsStreamingLevelStateConfigIntParamConfig::OutParam' has a wrong offset!");

// ScriptStruct Calliope.GsStreamingLevelStateConfigPoliceConfig
// 0x0014 (0x0024 - 0x0010)
struct FGsStreamingLevelStateConfigPoliceConfig final : public FGsSceneObjPoliceConfigBase
{
public:
	struct FGsStreamingLevelStateConfigIntParamConfig ManagedDataAssetID;                                // 0x0010(0x0014)(Edit, BlueprintVisible, NoDestructor, NativeAccessSpecifierPublic)
};
//static_assert(alignof(FGsStreamingLevelStateConfigPoliceConfig) == 0x000004, "Wrong alignment on FGsStreamingLevelStateConfigPoliceConfig");
//static_assert(sizeof(FGsStreamingLevelStateConfigPoliceConfig) == 0x000024, "Wrong size on FGsStreamingLevelStateConfigPoliceConfig");
//static_assert(offsetof(FGsStreamingLevelStateConfigPoliceConfig, ManagedDataAssetID) == 0x000010, "Member 'FGsStreamingLevelStateConfigPoliceConfig::ManagedDataAssetID' has a wrong offset!");

// ScriptStruct Calliope.GsSceneObjPoliceConfig
// 0x0090 (0x0090 - 0x0000)
struct FGsSceneObjPoliceConfig final
{
public:
	TArray<struct FGsDynamicObstaclePoliceConfig> DynamicObstacleCollection;                         // 0x0000(0x0010)(Edit, BlueprintVisible, EditFixedSize, ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<struct FGsOverlapPoliceConfig>         OverlapCollection;                                 // 0x0010(0x0010)(Edit, BlueprintVisible, EditFixedSize, ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<struct FGsInteractorPoliceConfig>      InteractorCollection;                              // 0x0020(0x0010)(Edit, BlueprintVisible, EditFixedSize, ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<struct FGsSpawnerPoliceConfig>         SpawnerCollection;                                 // 0x0030(0x0010)(Edit, BlueprintVisible, EditFixedSize, ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<struct FGsUnitPoliceConfig>            UnitCollection;                                    // 0x0040(0x0010)(Edit, BlueprintVisible, EditFixedSize, ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<struct FGsUnitPoliceConfig>            GroupUnitCollection;                               // 0x0050(0x0010)(Edit, BlueprintVisible, EditFixedSize, ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<struct FGsNPCUnitPoliceConfig>         NPCUnitCollection;                                 // 0x0060(0x0010)(Edit, BlueprintVisible, EditFixedSize, ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<struct FGsStreamingLevelPoliceConfig>  StreamingLevelCollection;                          // 0x0070(0x0010)(Edit, BlueprintVisible, EditFixedSize, ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<struct FGsStreamingLevelStateConfigPoliceConfig> StreamingLevelStateConfigCollection;               // 0x0080(0x0010)(Edit, BlueprintVisible, EditFixedSize, ZeroConstructor, NativeAccessSpecifierPublic)
};
//static_assert(alignof(FGsSceneObjPoliceConfig) == 0x000008, "Wrong alignment on FGsSceneObjPoliceConfig");
//static_assert(sizeof(FGsSceneObjPoliceConfig) == 0x000090, "Wrong size on FGsSceneObjPoliceConfig");
//static_assert(offsetof(FGsSceneObjPoliceConfig, DynamicObstacleCollection) == 0x000000, "Member 'FGsSceneObjPoliceConfig::DynamicObstacleCollection' has a wrong offset!");
//static_assert(offsetof(FGsSceneObjPoliceConfig, OverlapCollection) == 0x000010, "Member 'FGsSceneObjPoliceConfig::OverlapCollection' has a wrong offset!");
//static_assert(offsetof(FGsSceneObjPoliceConfig, InteractorCollection) == 0x000020, "Member 'FGsSceneObjPoliceConfig::InteractorCollection' has a wrong offset!");
//static_assert(offsetof(FGsSceneObjPoliceConfig, SpawnerCollection) == 0x000030, "Member 'FGsSceneObjPoliceConfig::SpawnerCollection' has a wrong offset!");
//static_assert(offsetof(FGsSceneObjPoliceConfig, UnitCollection) == 0x000040, "Member 'FGsSceneObjPoliceConfig::UnitCollection' has a wrong offset!");
//static_assert(offsetof(FGsSceneObjPoliceConfig, GroupUnitCollection) == 0x000050, "Member 'FGsSceneObjPoliceConfig::GroupUnitCollection' has a wrong offset!");
//static_assert(offsetof(FGsSceneObjPoliceConfig, NPCUnitCollection) == 0x000060, "Member 'FGsSceneObjPoliceConfig::NPCUnitCollection' has a wrong offset!");
//static_assert(offsetof(FGsSceneObjPoliceConfig, StreamingLevelCollection) == 0x000070, "Member 'FGsSceneObjPoliceConfig::StreamingLevelCollection' has a wrong offset!");
//static_assert(offsetof(FGsSceneObjPoliceConfig, StreamingLevelStateConfigCollection) == 0x000080, "Member 'FGsSceneObjPoliceConfig::StreamingLevelStateConfigCollection' has a wrong offset!");

// ScriptStruct Calliope.GsCalliopeNodeParam
// 0x0010 (0x0010 - 0x0000)
struct FGsCalliopeNodeParam final
{
public:
	struct FCalliopeGuid                          NodeGuid;                                          // 0x0000(0x0010)(Edit, BlueprintVisible, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
//static_assert(alignof(FGsCalliopeNodeParam) == 0x000004, "Wrong alignment on FGsCalliopeNodeParam");
//static_assert(sizeof(FGsCalliopeNodeParam) == 0x000010, "Wrong size on FGsCalliopeNodeParam");
//static_assert(offsetof(FGsCalliopeNodeParam, NodeGuid) == 0x000000, "Member 'FGsCalliopeNodeParam::NodeGuid' has a wrong offset!");

// ScriptStruct Calliope.MovieSceneCalliopeTemplateBase
// 0x0008 (0x0028 - 0x0020)
struct FMovieSceneCalliopeTemplateBase : public FMovieSceneEvalTemplate
{
public:
	uint8                                         bFireEventsWhenForwards : 1;                       // 0x0020(0x0001)(BitIndex: 0x00, PropSize: 0x0001 (NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected))
	uint8                                         bFireEventsWhenBackwards : 1;                      // 0x0020(0x0001)(BitIndex: 0x01, PropSize: 0x0001 (NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected))
	uint8                                         Pad_21[0x7];                                       // 0x0021(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
//static_assert(alignof(FMovieSceneCalliopeTemplateBase) == 0x000008, "Wrong alignment on FMovieSceneCalliopeTemplateBase");
//static_assert(sizeof(FMovieSceneCalliopeTemplateBase) == 0x000028, "Wrong size on FMovieSceneCalliopeTemplateBase");

// ScriptStruct Calliope.MovieSceneCalliopeNotifyTemplate
// 0x0020 (0x0048 - 0x0028)
struct FMovieSceneCalliopeNotifyTemplate final : public FMovieSceneCalliopeTemplateBase
{
public:
	TArray<struct FFrameNumber>                   EventTimes;                                        // 0x0028(0x0010)(ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<class FString>                         EventNames;                                        // 0x0038(0x0010)(ZeroConstructor, NativeAccessSpecifierPublic)
};
//static_assert(alignof(FMovieSceneCalliopeNotifyTemplate) == 0x000008, "Wrong alignment on FMovieSceneCalliopeNotifyTemplate");
//static_assert(sizeof(FMovieSceneCalliopeNotifyTemplate) == 0x000048, "Wrong size on FMovieSceneCalliopeNotifyTemplate");
//static_assert(offsetof(FMovieSceneCalliopeNotifyTemplate, EventTimes) == 0x000028, "Member 'FMovieSceneCalliopeNotifyTemplate::EventTimes' has a wrong offset!");
//static_assert(offsetof(FMovieSceneCalliopeNotifyTemplate, EventNames) == 0x000038, "Member 'FMovieSceneCalliopeNotifyTemplate::EventNames' has a wrong offset!");

// ScriptStruct Calliope.MovieSceneCalliopeNotifyStateTemplate
// 0x0010 (0x0038 - 0x0028)
struct FMovieSceneCalliopeNotifyStateTemplate final : public FMovieSceneCalliopeTemplateBase
{
public:
	class FString                                 EventName;                                         // 0x0028(0x0010)(ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
//static_assert(alignof(FMovieSceneCalliopeNotifyStateTemplate) == 0x000008, "Wrong alignment on FMovieSceneCalliopeNotifyStateTemplate");
//static_assert(sizeof(FMovieSceneCalliopeNotifyStateTemplate) == 0x000038, "Wrong size on FMovieSceneCalliopeNotifyStateTemplate");
//static_assert(offsetof(FMovieSceneCalliopeNotifyStateTemplate, EventName) == 0x000028, "Member 'FMovieSceneCalliopeNotifyStateTemplate::EventName' has a wrong offset!");

// ScriptStruct Calliope.MovieSceneCalliopeNormalTemplate
// 0x0018 (0x0040 - 0x0028)
struct FMovieSceneCalliopeNormalTemplate final : public FMovieSceneCalliopeTemplateBase
{
public:
	class FString                                 EventName;                                         // 0x0028(0x0010)(ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UMovieSceneCalliopeNormalSection*       Section;                                           // 0x0038(0x0008)(ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
//static_assert(alignof(FMovieSceneCalliopeNormalTemplate) == 0x000008, "Wrong alignment on FMovieSceneCalliopeNormalTemplate");
//static_assert(sizeof(FMovieSceneCalliopeNormalTemplate) == 0x000040, "Wrong size on FMovieSceneCalliopeNormalTemplate");
//static_assert(offsetof(FMovieSceneCalliopeNormalTemplate, EventName) == 0x000028, "Member 'FMovieSceneCalliopeNormalTemplate::EventName' has a wrong offset!");
//static_assert(offsetof(FMovieSceneCalliopeNormalTemplate, Section) == 0x000038, "Member 'FMovieSceneCalliopeNormalTemplate::Section' has a wrong offset!");

}

