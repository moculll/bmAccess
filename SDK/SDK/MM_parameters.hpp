#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: MM

#include "Basic.hpp"

#include "MM_structs.hpp"
#include "CoreUObject_structs.hpp"


namespace SDK::Params
{

// Function MM.FilmstormFunctionLibrary.CreatePlayerInputDirection
// 0x0100 (0x0100 - 0x0000)
struct FilmstormFunctionLibrary_CreatePlayerInputDirection final
{
public:
	struct FInputPlayerDirectionData              OutConstructTargetDirection;                       // 0x0000(0x0028)(Parm, OutParm, NativeAccessSpecifierPublic)
	uint8                                         Pad_28[0x8];                                       // 0x0028(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	struct FTransform                             DesiredTransform;                                  // 0x0030(0x0060)(ConstParm, Parm, OutParm, ReferenceParm, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	struct FTransform                             RootWorldTransform;                                // 0x0090(0x0060)(ConstParm, Parm, OutParm, ReferenceParm, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	float                                         TargetDirectionInputStrength;                      // 0x00F0(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_F4[0xC];                                       // 0x00F4(0x000C)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
//static_assert(alignof(FilmstormFunctionLibrary_CreatePlayerInputDirection) == 0x000010, "Wrong alignment on FilmstormFunctionLibrary_CreatePlayerInputDirection");
//static_assert(sizeof(FilmstormFunctionLibrary_CreatePlayerInputDirection) == 0x000100, "Wrong size on FilmstormFunctionLibrary_CreatePlayerInputDirection");
//static_assert(offsetof(FilmstormFunctionLibrary_CreatePlayerInputDirection, OutConstructTargetDirection) == 0x000000, "Member 'FilmstormFunctionLibrary_CreatePlayerInputDirection::OutConstructTargetDirection' has a wrong offset!");
//static_assert(offsetof(FilmstormFunctionLibrary_CreatePlayerInputDirection, DesiredTransform) == 0x000030, "Member 'FilmstormFunctionLibrary_CreatePlayerInputDirection::DesiredTransform' has a wrong offset!");
//static_assert(offsetof(FilmstormFunctionLibrary_CreatePlayerInputDirection, RootWorldTransform) == 0x000090, "Member 'FilmstormFunctionLibrary_CreatePlayerInputDirection::RootWorldTransform' has a wrong offset!");
//static_assert(offsetof(FilmstormFunctionLibrary_CreatePlayerInputDirection, TargetDirectionInputStrength) == 0x0000F0, "Member 'FilmstormFunctionLibrary_CreatePlayerInputDirection::TargetDirectionInputStrength' has a wrong offset!");

// Function MM.MotionMatchingHelpers.BlendKeyPoses
// 0x0050 (0x0050 - 0x0000)
struct MotionMatchingHelpers_BlendKeyPoses final
{
public:
	struct FMotionMatchData                       PoseA;                                             // 0x0000(0x0018)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
	struct FMotionMatchData                       PoseB;                                             // 0x0018(0x0018)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
	float                                         Alpha;                                             // 0x0030(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_34[0x4];                                       // 0x0034(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FMotionMatchData                       OutBlendedKeyPose;                                 // 0x0038(0x0018)(Parm, OutParm, NativeAccessSpecifierPublic)
};
//static_assert(alignof(MotionMatchingHelpers_BlendKeyPoses) == 0x000008, "Wrong alignment on MotionMatchingHelpers_BlendKeyPoses");
//static_assert(sizeof(MotionMatchingHelpers_BlendKeyPoses) == 0x000050, "Wrong size on MotionMatchingHelpers_BlendKeyPoses");
//static_assert(offsetof(MotionMatchingHelpers_BlendKeyPoses, PoseA) == 0x000000, "Member 'MotionMatchingHelpers_BlendKeyPoses::PoseA' has a wrong offset!");
//static_assert(offsetof(MotionMatchingHelpers_BlendKeyPoses, PoseB) == 0x000018, "Member 'MotionMatchingHelpers_BlendKeyPoses::PoseB' has a wrong offset!");
//static_assert(offsetof(MotionMatchingHelpers_BlendKeyPoses, Alpha) == 0x000030, "Member 'MotionMatchingHelpers_BlendKeyPoses::Alpha' has a wrong offset!");
//static_assert(offsetof(MotionMatchingHelpers_BlendKeyPoses, OutBlendedKeyPose) == 0x000038, "Member 'MotionMatchingHelpers_BlendKeyPoses::OutBlendedKeyPose' has a wrong offset!");

// Function MM.MotionMatchingHelpers.CompareJointDatas
// 0x0028 (0x0028 - 0x0000)
struct MotionMatchingHelpers_CompareJointDatas final
{
public:
	TArray<struct FSkeletonStructure>             JointData_A;                                       // 0x0000(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
	TArray<struct FSkeletonStructure>             JointData_B;                                       // 0x0010(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
	float                                         ReturnValue;                                       // 0x0020(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_24[0x4];                                       // 0x0024(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
//static_assert(alignof(MotionMatchingHelpers_CompareJointDatas) == 0x000008, "Wrong alignment on MotionMatchingHelpers_CompareJointDatas");
//static_assert(sizeof(MotionMatchingHelpers_CompareJointDatas) == 0x000028, "Wrong size on MotionMatchingHelpers_CompareJointDatas");
//static_assert(offsetof(MotionMatchingHelpers_CompareJointDatas, JointData_A) == 0x000000, "Member 'MotionMatchingHelpers_CompareJointDatas::JointData_A' has a wrong offset!");
//static_assert(offsetof(MotionMatchingHelpers_CompareJointDatas, JointData_B) == 0x000010, "Member 'MotionMatchingHelpers_CompareJointDatas::JointData_B' has a wrong offset!");
//static_assert(offsetof(MotionMatchingHelpers_CompareJointDatas, ReturnValue) == 0x000020, "Member 'MotionMatchingHelpers_CompareJointDatas::ReturnValue' has a wrong offset!");

// Function MM.MotionMatchingHelpers.CompareTrajectories
// 0x0058 (0x0058 - 0x0000)
struct MotionMatchingHelpers_CompareTrajectories final
{
public:
	struct FInputPlayerDirectionData              InputDirectionData_A;                              // 0x0000(0x0028)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
	struct FInputPlayerDirectionData              InputDirectionData_B;                              // 0x0028(0x0028)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
	float                                         ReturnValue;                                       // 0x0050(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_54[0x4];                                       // 0x0054(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
//static_assert(alignof(MotionMatchingHelpers_CompareTrajectories) == 0x000008, "Wrong alignment on MotionMatchingHelpers_CompareTrajectories");
//static_assert(sizeof(MotionMatchingHelpers_CompareTrajectories) == 0x000058, "Wrong size on MotionMatchingHelpers_CompareTrajectories");
//static_assert(offsetof(MotionMatchingHelpers_CompareTrajectories, InputDirectionData_A) == 0x000000, "Member 'MotionMatchingHelpers_CompareTrajectories::InputDirectionData_A' has a wrong offset!");
//static_assert(offsetof(MotionMatchingHelpers_CompareTrajectories, InputDirectionData_B) == 0x000028, "Member 'MotionMatchingHelpers_CompareTrajectories::InputDirectionData_B' has a wrong offset!");
//static_assert(offsetof(MotionMatchingHelpers_CompareTrajectories, ReturnValue) == 0x000050, "Member 'MotionMatchingHelpers_CompareTrajectories::ReturnValue' has a wrong offset!");

// Function MM.MotionMatchingHelpers.CreateInputDirection
// 0x0100 (0x0100 - 0x0000)
struct MotionMatchingHelpers_CreateInputDirection final
{
public:
	struct FInputPlayerDirectionData              OutConstructTargetDirection;                       // 0x0000(0x0028)(Parm, OutParm, NativeAccessSpecifierPublic)
	uint8                                         Pad_28[0x8];                                       // 0x0028(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	struct FTransform                             DesiredTransform;                                  // 0x0030(0x0060)(ConstParm, Parm, OutParm, ReferenceParm, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	struct FTransform                             RootWorldTransform;                                // 0x0090(0x0060)(ConstParm, Parm, OutParm, ReferenceParm, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	float                                         TargetDirectionInputStrength;                      // 0x00F0(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_F4[0xC];                                       // 0x00F4(0x000C)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
//static_assert(alignof(MotionMatchingHelpers_CreateInputDirection) == 0x000010, "Wrong alignment on MotionMatchingHelpers_CreateInputDirection");
//static_assert(sizeof(MotionMatchingHelpers_CreateInputDirection) == 0x000100, "Wrong size on MotionMatchingHelpers_CreateInputDirection");
//static_assert(offsetof(MotionMatchingHelpers_CreateInputDirection, OutConstructTargetDirection) == 0x000000, "Member 'MotionMatchingHelpers_CreateInputDirection::OutConstructTargetDirection' has a wrong offset!");
//static_assert(offsetof(MotionMatchingHelpers_CreateInputDirection, DesiredTransform) == 0x000030, "Member 'MotionMatchingHelpers_CreateInputDirection::DesiredTransform' has a wrong offset!");
//static_assert(offsetof(MotionMatchingHelpers_CreateInputDirection, RootWorldTransform) == 0x000090, "Member 'MotionMatchingHelpers_CreateInputDirection::RootWorldTransform' has a wrong offset!");
//static_assert(offsetof(MotionMatchingHelpers_CreateInputDirection, TargetDirectionInputStrength) == 0x0000F0, "Member 'MotionMatchingHelpers_CreateInputDirection::TargetDirectionInputStrength' has a wrong offset!");

// Function MM.MotionMatchingHelpers.ExtractAnimInputDirection
// 0x0038 (0x0038 - 0x0000)
struct MotionMatchingHelpers_ExtractAnimInputDirection final
{
public:
	struct FInputPlayerDirectionData              DeliveredVelocityViaAnimBonesLocalVelocityData;    // 0x0000(0x0028)(Parm, OutParm, NativeAccessSpecifierPublic)
	const class UAnimSequence*                    InSequence;                                        // 0x0028(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         ClockInGame;                                       // 0x0030(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_34[0x4];                                       // 0x0034(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
//static_assert(alignof(MotionMatchingHelpers_ExtractAnimInputDirection) == 0x000008, "Wrong alignment on MotionMatchingHelpers_ExtractAnimInputDirection");
//static_assert(sizeof(MotionMatchingHelpers_ExtractAnimInputDirection) == 0x000038, "Wrong size on MotionMatchingHelpers_ExtractAnimInputDirection");
//static_assert(offsetof(MotionMatchingHelpers_ExtractAnimInputDirection, DeliveredVelocityViaAnimBonesLocalVelocityData) == 0x000000, "Member 'MotionMatchingHelpers_ExtractAnimInputDirection::DeliveredVelocityViaAnimBonesLocalVelocityData' has a wrong offset!");
//static_assert(offsetof(MotionMatchingHelpers_ExtractAnimInputDirection, InSequence) == 0x000028, "Member 'MotionMatchingHelpers_ExtractAnimInputDirection::InSequence' has a wrong offset!");
//static_assert(offsetof(MotionMatchingHelpers_ExtractAnimInputDirection, ClockInGame) == 0x000030, "Member 'MotionMatchingHelpers_ExtractAnimInputDirection::ClockInGame' has a wrong offset!");

// Function MM.MotionMatchingHelpers.ExtractAnimSmoothedRotation
// 0x0030 (0x0030 - 0x0000)
struct MotionMatchingHelpers_ExtractAnimSmoothedRotation final
{
public:
	struct FQuat                                  DeliveredRotation;                                 // 0x0000(0x0020)(Parm, OutParm, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	const class UAnimSequence*                    InSequence;                                        // 0x0020(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         ClockInGame;                                       // 0x0028(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2C[0x4];                                       // 0x002C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
//static_assert(alignof(MotionMatchingHelpers_ExtractAnimSmoothedRotation) == 0x000010, "Wrong alignment on MotionMatchingHelpers_ExtractAnimSmoothedRotation");
//static_assert(sizeof(MotionMatchingHelpers_ExtractAnimSmoothedRotation) == 0x000030, "Wrong size on MotionMatchingHelpers_ExtractAnimSmoothedRotation");
//static_assert(offsetof(MotionMatchingHelpers_ExtractAnimSmoothedRotation, DeliveredRotation) == 0x000000, "Member 'MotionMatchingHelpers_ExtractAnimSmoothedRotation::DeliveredRotation' has a wrong offset!");
//static_assert(offsetof(MotionMatchingHelpers_ExtractAnimSmoothedRotation, InSequence) == 0x000020, "Member 'MotionMatchingHelpers_ExtractAnimSmoothedRotation::InSequence' has a wrong offset!");
//static_assert(offsetof(MotionMatchingHelpers_ExtractAnimSmoothedRotation, ClockInGame) == 0x000028, "Member 'MotionMatchingHelpers_ExtractAnimSmoothedRotation::ClockInGame' has a wrong offset!");

// Function MM.MotionMatchingHelpers.ExtractLMAnimInputDirection
// 0x0038 (0x0038 - 0x0000)
struct MotionMatchingHelpers_ExtractLMAnimInputDirection final
{
public:
	struct FInputPlayerDirectionData              DeliveredVelocityViaAnimBonesLocalVelocityData;    // 0x0000(0x0028)(Parm, OutParm, NativeAccessSpecifierPublic)
	const class UAnimSequence*                    InSequence;                                        // 0x0028(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         ClockInGame;                                       // 0x0030(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_34[0x4];                                       // 0x0034(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
//static_assert(alignof(MotionMatchingHelpers_ExtractLMAnimInputDirection) == 0x000008, "Wrong alignment on MotionMatchingHelpers_ExtractLMAnimInputDirection");
//static_assert(sizeof(MotionMatchingHelpers_ExtractLMAnimInputDirection) == 0x000038, "Wrong size on MotionMatchingHelpers_ExtractLMAnimInputDirection");
//static_assert(offsetof(MotionMatchingHelpers_ExtractLMAnimInputDirection, DeliveredVelocityViaAnimBonesLocalVelocityData) == 0x000000, "Member 'MotionMatchingHelpers_ExtractLMAnimInputDirection::DeliveredVelocityViaAnimBonesLocalVelocityData' has a wrong offset!");
//static_assert(offsetof(MotionMatchingHelpers_ExtractLMAnimInputDirection, InSequence) == 0x000028, "Member 'MotionMatchingHelpers_ExtractLMAnimInputDirection::InSequence' has a wrong offset!");
//static_assert(offsetof(MotionMatchingHelpers_ExtractLMAnimInputDirection, ClockInGame) == 0x000030, "Member 'MotionMatchingHelpers_ExtractLMAnimInputDirection::ClockInGame' has a wrong offset!");

// Function MM.MotionMatchingHelpers.GetAnimBoneLocalTransform
// 0x00C0 (0x00C0 - 0x0000)
struct MotionMatchingHelpers_GetAnimBoneLocalTransform final
{
public:
	const class UAnimSequence*                    InSequence;                                        // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         ReferenceClock;                                    // 0x0008(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         CurrentSkeletonPartInReference;                    // 0x000C(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TMap<int32, int32>                            SkelIdx2TrackIdx;                                  // 0x0010(0x0050)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
	struct FTransform                             CalculatedTransformMM;                             // 0x0060(0x0060)(Parm, OutParm, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
};
//static_assert(alignof(MotionMatchingHelpers_GetAnimBoneLocalTransform) == 0x000010, "Wrong alignment on MotionMatchingHelpers_GetAnimBoneLocalTransform");
//static_assert(sizeof(MotionMatchingHelpers_GetAnimBoneLocalTransform) == 0x0000C0, "Wrong size on MotionMatchingHelpers_GetAnimBoneLocalTransform");
//static_assert(offsetof(MotionMatchingHelpers_GetAnimBoneLocalTransform, InSequence) == 0x000000, "Member 'MotionMatchingHelpers_GetAnimBoneLocalTransform::InSequence' has a wrong offset!");
//static_assert(offsetof(MotionMatchingHelpers_GetAnimBoneLocalTransform, ReferenceClock) == 0x000008, "Member 'MotionMatchingHelpers_GetAnimBoneLocalTransform::ReferenceClock' has a wrong offset!");
//static_assert(offsetof(MotionMatchingHelpers_GetAnimBoneLocalTransform, CurrentSkeletonPartInReference) == 0x00000C, "Member 'MotionMatchingHelpers_GetAnimBoneLocalTransform::CurrentSkeletonPartInReference' has a wrong offset!");
//static_assert(offsetof(MotionMatchingHelpers_GetAnimBoneLocalTransform, SkelIdx2TrackIdx) == 0x000010, "Member 'MotionMatchingHelpers_GetAnimBoneLocalTransform::SkelIdx2TrackIdx' has a wrong offset!");
//static_assert(offsetof(MotionMatchingHelpers_GetAnimBoneLocalTransform, CalculatedTransformMM) == 0x000060, "Member 'MotionMatchingHelpers_GetAnimBoneLocalTransform::CalculatedTransformMM' has a wrong offset!");

// Function MM.MotionMatchingHelpers.GetAnimBoneLocalVel
// 0x0078 (0x0078 - 0x0000)
struct MotionMatchingHelpers_GetAnimBoneLocalVel final
{
public:
	const class UAnimSequence*                    InSequence;                                        // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         ReferenceClock;                                    // 0x0008(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         CurrentSkeletonPartInReference;                    // 0x000C(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TMap<int32, int32>                            SkelIdx2TrackIdx;                                  // 0x0010(0x0050)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
	struct FVector                                DeliveredVelocityViaAnimBonesLocalVel;             // 0x0060(0x0018)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
//static_assert(alignof(MotionMatchingHelpers_GetAnimBoneLocalVel) == 0x000008, "Wrong alignment on MotionMatchingHelpers_GetAnimBoneLocalVel");
//static_assert(sizeof(MotionMatchingHelpers_GetAnimBoneLocalVel) == 0x000078, "Wrong size on MotionMatchingHelpers_GetAnimBoneLocalVel");
//static_assert(offsetof(MotionMatchingHelpers_GetAnimBoneLocalVel, InSequence) == 0x000000, "Member 'MotionMatchingHelpers_GetAnimBoneLocalVel::InSequence' has a wrong offset!");
//static_assert(offsetof(MotionMatchingHelpers_GetAnimBoneLocalVel, ReferenceClock) == 0x000008, "Member 'MotionMatchingHelpers_GetAnimBoneLocalVel::ReferenceClock' has a wrong offset!");
//static_assert(offsetof(MotionMatchingHelpers_GetAnimBoneLocalVel, CurrentSkeletonPartInReference) == 0x00000C, "Member 'MotionMatchingHelpers_GetAnimBoneLocalVel::CurrentSkeletonPartInReference' has a wrong offset!");
//static_assert(offsetof(MotionMatchingHelpers_GetAnimBoneLocalVel, SkelIdx2TrackIdx) == 0x000010, "Member 'MotionMatchingHelpers_GetAnimBoneLocalVel::SkelIdx2TrackIdx' has a wrong offset!");
//static_assert(offsetof(MotionMatchingHelpers_GetAnimBoneLocalVel, DeliveredVelocityViaAnimBonesLocalVel) == 0x000060, "Member 'MotionMatchingHelpers_GetAnimBoneLocalVel::DeliveredVelocityViaAnimBonesLocalVel' has a wrong offset!");

// Function MM.MotionMatchingHelpers.GetAnimBoneWorldTransform
// 0x00C0 (0x00C0 - 0x0000)
struct MotionMatchingHelpers_GetAnimBoneWorldTransform final
{
public:
	const class UAnimSequence*                    InSequence;                                        // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         ReferenceClock;                                    // 0x0008(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         CurrentSkeletonPartInReference;                    // 0x000C(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TMap<int32, int32>                            SkelIdx2TrackIdx;                                  // 0x0010(0x0050)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
	struct FTransform                             CalculatedTransformMM;                             // 0x0060(0x0060)(Parm, OutParm, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
};
//static_assert(alignof(MotionMatchingHelpers_GetAnimBoneWorldTransform) == 0x000010, "Wrong alignment on MotionMatchingHelpers_GetAnimBoneWorldTransform");
//static_assert(sizeof(MotionMatchingHelpers_GetAnimBoneWorldTransform) == 0x0000C0, "Wrong size on MotionMatchingHelpers_GetAnimBoneWorldTransform");
//static_assert(offsetof(MotionMatchingHelpers_GetAnimBoneWorldTransform, InSequence) == 0x000000, "Member 'MotionMatchingHelpers_GetAnimBoneWorldTransform::InSequence' has a wrong offset!");
//static_assert(offsetof(MotionMatchingHelpers_GetAnimBoneWorldTransform, ReferenceClock) == 0x000008, "Member 'MotionMatchingHelpers_GetAnimBoneWorldTransform::ReferenceClock' has a wrong offset!");
//static_assert(offsetof(MotionMatchingHelpers_GetAnimBoneWorldTransform, CurrentSkeletonPartInReference) == 0x00000C, "Member 'MotionMatchingHelpers_GetAnimBoneWorldTransform::CurrentSkeletonPartInReference' has a wrong offset!");
//static_assert(offsetof(MotionMatchingHelpers_GetAnimBoneWorldTransform, SkelIdx2TrackIdx) == 0x000010, "Member 'MotionMatchingHelpers_GetAnimBoneWorldTransform::SkelIdx2TrackIdx' has a wrong offset!");
//static_assert(offsetof(MotionMatchingHelpers_GetAnimBoneWorldTransform, CalculatedTransformMM) == 0x000060, "Member 'MotionMatchingHelpers_GetAnimBoneWorldTransform::CalculatedTransformMM' has a wrong offset!");

// Function MM.MotionMatchingHelpers.GetAnimJointData
// 0x0050 (0x0050 - 0x0000)
struct MotionMatchingHelpers_GetAnimJointData final
{
public:
	const class UAnimSequence*                    InSequence;                                        // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         ReferenceClock;                                    // 0x0008(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   BoneName;                                          // 0x000C(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_14[0x4];                                       // 0x0014(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FSkeletonStructure                     DeliveredAnimationReferencesForSkelRef;            // 0x0018(0x0030)(Parm, OutParm, NoDestructor, NativeAccessSpecifierPublic)
	float                                         InDeltaTime;                                       // 0x0048(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_4C[0x4];                                       // 0x004C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
//static_assert(alignof(MotionMatchingHelpers_GetAnimJointData) == 0x000008, "Wrong alignment on MotionMatchingHelpers_GetAnimJointData");
//static_assert(sizeof(MotionMatchingHelpers_GetAnimJointData) == 0x000050, "Wrong size on MotionMatchingHelpers_GetAnimJointData");
//static_assert(offsetof(MotionMatchingHelpers_GetAnimJointData, InSequence) == 0x000000, "Member 'MotionMatchingHelpers_GetAnimJointData::InSequence' has a wrong offset!");
//static_assert(offsetof(MotionMatchingHelpers_GetAnimJointData, ReferenceClock) == 0x000008, "Member 'MotionMatchingHelpers_GetAnimJointData::ReferenceClock' has a wrong offset!");
//static_assert(offsetof(MotionMatchingHelpers_GetAnimJointData, BoneName) == 0x00000C, "Member 'MotionMatchingHelpers_GetAnimJointData::BoneName' has a wrong offset!");
//static_assert(offsetof(MotionMatchingHelpers_GetAnimJointData, DeliveredAnimationReferencesForSkelRef) == 0x000018, "Member 'MotionMatchingHelpers_GetAnimJointData::DeliveredAnimationReferencesForSkelRef' has a wrong offset!");
//static_assert(offsetof(MotionMatchingHelpers_GetAnimJointData, InDeltaTime) == 0x000048, "Member 'MotionMatchingHelpers_GetAnimJointData::InDeltaTime' has a wrong offset!");

// Function MM.MotionMatchingHelpers.GetAnimVelocityReferenceClock
// 0x0028 (0x0028 - 0x0000)
struct MotionMatchingHelpers_GetAnimVelocityReferenceClock final
{
public:
	const class UAnimSequence*                    InSequence;                                        // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         ReferenceClock;                                    // 0x0008(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                DeliveredVelocityViaAnimBonesLocalVelocity;        // 0x0010(0x0018)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
//static_assert(alignof(MotionMatchingHelpers_GetAnimVelocityReferenceClock) == 0x000008, "Wrong alignment on MotionMatchingHelpers_GetAnimVelocityReferenceClock");
//static_assert(sizeof(MotionMatchingHelpers_GetAnimVelocityReferenceClock) == 0x000028, "Wrong size on MotionMatchingHelpers_GetAnimVelocityReferenceClock");
//static_assert(offsetof(MotionMatchingHelpers_GetAnimVelocityReferenceClock, InSequence) == 0x000000, "Member 'MotionMatchingHelpers_GetAnimVelocityReferenceClock::InSequence' has a wrong offset!");
//static_assert(offsetof(MotionMatchingHelpers_GetAnimVelocityReferenceClock, ReferenceClock) == 0x000008, "Member 'MotionMatchingHelpers_GetAnimVelocityReferenceClock::ReferenceClock' has a wrong offset!");
//static_assert(offsetof(MotionMatchingHelpers_GetAnimVelocityReferenceClock, DeliveredVelocityViaAnimBonesLocalVelocity) == 0x000010, "Member 'MotionMatchingHelpers_GetAnimVelocityReferenceClock::DeliveredVelocityViaAnimBonesLocalVelocity' has a wrong offset!");

// Function MM.MotionMatchingHelpers.GetDataFromAnimation
// 0x0080 (0x0080 - 0x0000)
struct MotionMatchingHelpers_GetDataFromAnimation final
{
public:
	const class UAnimSequence*                    InSequence;                                        // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         ReferenceClock;                                    // 0x0008(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<class FName>                           SkeletonRuntimeName;                               // 0x0010(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
	struct FInputPlayerDirectionData              OutPresentInputDirection;                          // 0x0020(0x0028)(Parm, OutParm, NativeAccessSpecifierPublic)
	struct FInputPlayerDirectionData              OutFutureInputDirection;                           // 0x0048(0x0028)(Parm, OutParm, NativeAccessSpecifierPublic)
	TArray<struct FSkeletonStructure>             DeliveredAnimationReferencesForSkelRef;            // 0x0070(0x0010)(Parm, OutParm, ZeroConstructor, NativeAccessSpecifierPublic)
};
//static_assert(alignof(MotionMatchingHelpers_GetDataFromAnimation) == 0x000008, "Wrong alignment on MotionMatchingHelpers_GetDataFromAnimation");
//static_assert(sizeof(MotionMatchingHelpers_GetDataFromAnimation) == 0x000080, "Wrong size on MotionMatchingHelpers_GetDataFromAnimation");
//static_assert(offsetof(MotionMatchingHelpers_GetDataFromAnimation, InSequence) == 0x000000, "Member 'MotionMatchingHelpers_GetDataFromAnimation::InSequence' has a wrong offset!");
//static_assert(offsetof(MotionMatchingHelpers_GetDataFromAnimation, ReferenceClock) == 0x000008, "Member 'MotionMatchingHelpers_GetDataFromAnimation::ReferenceClock' has a wrong offset!");
//static_assert(offsetof(MotionMatchingHelpers_GetDataFromAnimation, SkeletonRuntimeName) == 0x000010, "Member 'MotionMatchingHelpers_GetDataFromAnimation::SkeletonRuntimeName' has a wrong offset!");
//static_assert(offsetof(MotionMatchingHelpers_GetDataFromAnimation, OutPresentInputDirection) == 0x000020, "Member 'MotionMatchingHelpers_GetDataFromAnimation::OutPresentInputDirection' has a wrong offset!");
//static_assert(offsetof(MotionMatchingHelpers_GetDataFromAnimation, OutFutureInputDirection) == 0x000048, "Member 'MotionMatchingHelpers_GetDataFromAnimation::OutFutureInputDirection' has a wrong offset!");
//static_assert(offsetof(MotionMatchingHelpers_GetDataFromAnimation, DeliveredAnimationReferencesForSkelRef) == 0x000070, "Member 'MotionMatchingHelpers_GetDataFromAnimation::DeliveredAnimationReferencesForSkelRef' has a wrong offset!");

// Function MM.MotionMatchingHelpers.GetKeyPoseDataFromAnim
// 0x0038 (0x0038 - 0x0000)
struct MotionMatchingHelpers_GetKeyPoseDataFromAnim final
{
public:
	const class UAnimSequence*                    InSequence;                                        // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         ReferenceClock;                                    // 0x0008(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<class FName>                           ToBeRefAgainst;                                    // 0x0010(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
	struct FMotionMatchData                       CalculatedMMData;                                  // 0x0020(0x0018)(Parm, OutParm, NativeAccessSpecifierPublic)
};
//static_assert(alignof(MotionMatchingHelpers_GetKeyPoseDataFromAnim) == 0x000008, "Wrong alignment on MotionMatchingHelpers_GetKeyPoseDataFromAnim");
//static_assert(sizeof(MotionMatchingHelpers_GetKeyPoseDataFromAnim) == 0x000038, "Wrong size on MotionMatchingHelpers_GetKeyPoseDataFromAnim");
//static_assert(offsetof(MotionMatchingHelpers_GetKeyPoseDataFromAnim, InSequence) == 0x000000, "Member 'MotionMatchingHelpers_GetKeyPoseDataFromAnim::InSequence' has a wrong offset!");
//static_assert(offsetof(MotionMatchingHelpers_GetKeyPoseDataFromAnim, ReferenceClock) == 0x000008, "Member 'MotionMatchingHelpers_GetKeyPoseDataFromAnim::ReferenceClock' has a wrong offset!");
//static_assert(offsetof(MotionMatchingHelpers_GetKeyPoseDataFromAnim, ToBeRefAgainst) == 0x000010, "Member 'MotionMatchingHelpers_GetKeyPoseDataFromAnim::ToBeRefAgainst' has a wrong offset!");
//static_assert(offsetof(MotionMatchingHelpers_GetKeyPoseDataFromAnim, CalculatedMMData) == 0x000020, "Member 'MotionMatchingHelpers_GetKeyPoseDataFromAnim::CalculatedMMData' has a wrong offset!");

// Function MM.MotionMatchingHelpers.GetLastInputDirectionTransform
// 0x0090 (0x0090 - 0x0000)
struct MotionMatchingHelpers_GetLastInputDirectionTransform final
{
public:
	struct FInputPlayerDirectionData              InputDirection;                                    // 0x0000(0x0028)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
	uint8                                         Pad_28[0x8];                                       // 0x0028(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	struct FTransform                             ReturnValue;                                       // 0x0030(0x0060)(Parm, OutParm, ReturnParm, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
};
//static_assert(alignof(MotionMatchingHelpers_GetLastInputDirectionTransform) == 0x000010, "Wrong alignment on MotionMatchingHelpers_GetLastInputDirectionTransform");
//static_assert(sizeof(MotionMatchingHelpers_GetLastInputDirectionTransform) == 0x000090, "Wrong size on MotionMatchingHelpers_GetLastInputDirectionTransform");
//static_assert(offsetof(MotionMatchingHelpers_GetLastInputDirectionTransform, InputDirection) == 0x000000, "Member 'MotionMatchingHelpers_GetLastInputDirectionTransform::InputDirection' has a wrong offset!");
//static_assert(offsetof(MotionMatchingHelpers_GetLastInputDirectionTransform, ReturnValue) == 0x000030, "Member 'MotionMatchingHelpers_GetLastInputDirectionTransform::ReturnValue' has a wrong offset!");

// Function MM.MotionMatchingHelpers.GetLMAnimVelocityReferenceClock
// 0x0028 (0x0028 - 0x0000)
struct MotionMatchingHelpers_GetLMAnimVelocityReferenceClock final
{
public:
	const class UAnimSequence*                    InSequence;                                        // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         ReferenceClock;                                    // 0x0008(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                DeliveredVelocityViaAnimBonesLocalVelocity;        // 0x0010(0x0018)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
//static_assert(alignof(MotionMatchingHelpers_GetLMAnimVelocityReferenceClock) == 0x000008, "Wrong alignment on MotionMatchingHelpers_GetLMAnimVelocityReferenceClock");
//static_assert(sizeof(MotionMatchingHelpers_GetLMAnimVelocityReferenceClock) == 0x000028, "Wrong size on MotionMatchingHelpers_GetLMAnimVelocityReferenceClock");
//static_assert(offsetof(MotionMatchingHelpers_GetLMAnimVelocityReferenceClock, InSequence) == 0x000000, "Member 'MotionMatchingHelpers_GetLMAnimVelocityReferenceClock::InSequence' has a wrong offset!");
//static_assert(offsetof(MotionMatchingHelpers_GetLMAnimVelocityReferenceClock, ReferenceClock) == 0x000008, "Member 'MotionMatchingHelpers_GetLMAnimVelocityReferenceClock::ReferenceClock' has a wrong offset!");
//static_assert(offsetof(MotionMatchingHelpers_GetLMAnimVelocityReferenceClock, DeliveredVelocityViaAnimBonesLocalVelocity) == 0x000010, "Member 'MotionMatchingHelpers_GetLMAnimVelocityReferenceClock::DeliveredVelocityViaAnimBonesLocalVelocity' has a wrong offset!");

// Function MM.MotionMatchingHelpers.GetMMAnimDataRecordFilePath
// 0x0010 (0x0010 - 0x0000)
struct MotionMatchingHelpers_GetMMAnimDataRecordFilePath final
{
public:
	class FString                                 ReturnValue;                                       // 0x0000(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
//static_assert(alignof(MotionMatchingHelpers_GetMMAnimDataRecordFilePath) == 0x000008, "Wrong alignment on MotionMatchingHelpers_GetMMAnimDataRecordFilePath");
//static_assert(sizeof(MotionMatchingHelpers_GetMMAnimDataRecordFilePath) == 0x000010, "Wrong size on MotionMatchingHelpers_GetMMAnimDataRecordFilePath");
//static_assert(offsetof(MotionMatchingHelpers_GetMMAnimDataRecordFilePath, ReturnValue) == 0x000000, "Member 'MotionMatchingHelpers_GetMMAnimDataRecordFilePath::ReturnValue' has a wrong offset!");

// Function MM.MotionMatchingHelpers.MakeInputDirectionData
// 0x0050 (0x0050 - 0x0000)
struct MotionMatchingHelpers_MakeInputDirectionData final
{
public:
	struct FInputPlayerDirectionData              OutInputDirection;                                 // 0x0000(0x0028)(Parm, OutParm, NativeAccessSpecifierPublic)
	TArray<struct FTransform>                     VectorsWeHaveLeftBehind;                           // 0x0028(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
	TArray<struct FVector>                        CheckTheseAgainstVWHLB;                            // 0x0038(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0048(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_49[0x7];                                       // 0x0049(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
//static_assert(alignof(MotionMatchingHelpers_MakeInputDirectionData) == 0x000008, "Wrong alignment on MotionMatchingHelpers_MakeInputDirectionData");
//static_assert(sizeof(MotionMatchingHelpers_MakeInputDirectionData) == 0x000050, "Wrong size on MotionMatchingHelpers_MakeInputDirectionData");
//static_assert(offsetof(MotionMatchingHelpers_MakeInputDirectionData, OutInputDirection) == 0x000000, "Member 'MotionMatchingHelpers_MakeInputDirectionData::OutInputDirection' has a wrong offset!");
//static_assert(offsetof(MotionMatchingHelpers_MakeInputDirectionData, VectorsWeHaveLeftBehind) == 0x000028, "Member 'MotionMatchingHelpers_MakeInputDirectionData::VectorsWeHaveLeftBehind' has a wrong offset!");
//static_assert(offsetof(MotionMatchingHelpers_MakeInputDirectionData, CheckTheseAgainstVWHLB) == 0x000038, "Member 'MotionMatchingHelpers_MakeInputDirectionData::CheckTheseAgainstVWHLB' has a wrong offset!");
//static_assert(offsetof(MotionMatchingHelpers_MakeInputDirectionData, ReturnValue) == 0x000048, "Member 'MotionMatchingHelpers_MakeInputDirectionData::ReturnValue' has a wrong offset!");

// Function MM.AnimationAnalyzer.AnalyzerAnimationReferences
// 0x0004 (0x0004 - 0x0000)
struct AnimationAnalyzer_AnalyzerAnimationReferences final
{
public:
	int32                                         CurrentReferenceAnimation;                         // 0x0000(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
//static_assert(alignof(AnimationAnalyzer_AnalyzerAnimationReferences) == 0x000004, "Wrong alignment on AnimationAnalyzer_AnalyzerAnimationReferences");
//static_assert(sizeof(AnimationAnalyzer_AnalyzerAnimationReferences) == 0x000004, "Wrong size on AnimationAnalyzer_AnalyzerAnimationReferences");
//static_assert(offsetof(AnimationAnalyzer_AnalyzerAnimationReferences, CurrentReferenceAnimation) == 0x000000, "Member 'AnimationAnalyzer_AnalyzerAnimationReferences::CurrentReferenceAnimation' has a wrong offset!");

// Function MM.AnimationAnalyzer.AnimationCalculationsAccepted
// 0x0008 (0x0008 - 0x0000)
struct AnimationAnalyzer_AnimationCalculationsAccepted final
{
public:
	int32                                         Ref;                                               // 0x0000(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0004(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_5[0x3];                                        // 0x0005(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
//static_assert(alignof(AnimationAnalyzer_AnimationCalculationsAccepted) == 0x000004, "Wrong alignment on AnimationAnalyzer_AnimationCalculationsAccepted");
//static_assert(sizeof(AnimationAnalyzer_AnimationCalculationsAccepted) == 0x000008, "Wrong size on AnimationAnalyzer_AnimationCalculationsAccepted");
//static_assert(offsetof(AnimationAnalyzer_AnimationCalculationsAccepted, Ref) == 0x000000, "Member 'AnimationAnalyzer_AnimationCalculationsAccepted::Ref' has a wrong offset!");
//static_assert(offsetof(AnimationAnalyzer_AnimationCalculationsAccepted, ReturnValue) == 0x000004, "Member 'AnimationAnalyzer_AnimationCalculationsAccepted::ReturnValue' has a wrong offset!");

// Function MM.AnimationAnalyzer.AnimationContextIsValid
// 0x0008 (0x0008 - 0x0000)
struct AnimationAnalyzer_AnimationContextIsValid final
{
public:
	int32                                         CurrentAnimationRef;                               // 0x0000(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0004(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_5[0x3];                                        // 0x0005(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
//static_assert(alignof(AnimationAnalyzer_AnimationContextIsValid) == 0x000004, "Wrong alignment on AnimationAnalyzer_AnimationContextIsValid");
//static_assert(sizeof(AnimationAnalyzer_AnimationContextIsValid) == 0x000008, "Wrong size on AnimationAnalyzer_AnimationContextIsValid");
//static_assert(offsetof(AnimationAnalyzer_AnimationContextIsValid, CurrentAnimationRef) == 0x000000, "Member 'AnimationAnalyzer_AnimationContextIsValid::CurrentAnimationRef' has a wrong offset!");
//static_assert(offsetof(AnimationAnalyzer_AnimationContextIsValid, ReturnValue) == 0x000004, "Member 'AnimationAnalyzer_AnimationContextIsValid::ReturnValue' has a wrong offset!");

// Function MM.AnimationAnalyzer.AnimationReferenceIsValid
// 0x0008 (0x0008 - 0x0000)
struct AnimationAnalyzer_AnimationReferenceIsValid final
{
public:
	int32                                         CurrentAnimationRef;                               // 0x0000(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0004(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_5[0x3];                                        // 0x0005(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
//static_assert(alignof(AnimationAnalyzer_AnimationReferenceIsValid) == 0x000004, "Wrong alignment on AnimationAnalyzer_AnimationReferenceIsValid");
//static_assert(sizeof(AnimationAnalyzer_AnimationReferenceIsValid) == 0x000008, "Wrong size on AnimationAnalyzer_AnimationReferenceIsValid");
//static_assert(offsetof(AnimationAnalyzer_AnimationReferenceIsValid, CurrentAnimationRef) == 0x000000, "Member 'AnimationAnalyzer_AnimationReferenceIsValid::CurrentAnimationRef' has a wrong offset!");
//static_assert(offsetof(AnimationAnalyzer_AnimationReferenceIsValid, ReturnValue) == 0x000004, "Member 'AnimationAnalyzer_AnimationReferenceIsValid::ReturnValue' has a wrong offset!");

// Function MM.AnimationAnalyzer.CheckIsFirstLoadRequireDesireAsset
// 0x0008 (0x0008 - 0x0000)
struct AnimationAnalyzer_CheckIsFirstLoadRequireDesireAsset final
{
public:
	int32                                         Ref;                                               // 0x0000(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0004(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_5[0x3];                                        // 0x0005(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
//static_assert(alignof(AnimationAnalyzer_CheckIsFirstLoadRequireDesireAsset) == 0x000004, "Wrong alignment on AnimationAnalyzer_CheckIsFirstLoadRequireDesireAsset");
//static_assert(sizeof(AnimationAnalyzer_CheckIsFirstLoadRequireDesireAsset) == 0x000008, "Wrong size on AnimationAnalyzer_CheckIsFirstLoadRequireDesireAsset");
//static_assert(offsetof(AnimationAnalyzer_CheckIsFirstLoadRequireDesireAsset, Ref) == 0x000000, "Member 'AnimationAnalyzer_CheckIsFirstLoadRequireDesireAsset::Ref' has a wrong offset!");
//static_assert(offsetof(AnimationAnalyzer_CheckIsFirstLoadRequireDesireAsset, ReturnValue) == 0x000004, "Member 'AnimationAnalyzer_CheckIsFirstLoadRequireDesireAsset::ReturnValue' has a wrong offset!");

// Function MM.AnimationAnalyzer.CleanAnimationReferences
// 0x0004 (0x0004 - 0x0000)
struct AnimationAnalyzer_CleanAnimationReferences final
{
public:
	int32                                         CurrentReferenceAnimation;                         // 0x0000(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
//static_assert(alignof(AnimationAnalyzer_CleanAnimationReferences) == 0x000004, "Wrong alignment on AnimationAnalyzer_CleanAnimationReferences");
//static_assert(sizeof(AnimationAnalyzer_CleanAnimationReferences) == 0x000004, "Wrong size on AnimationAnalyzer_CleanAnimationReferences");
//static_assert(offsetof(AnimationAnalyzer_CleanAnimationReferences, CurrentReferenceAnimation) == 0x000000, "Member 'AnimationAnalyzer_CleanAnimationReferences::CurrentReferenceAnimation' has a wrong offset!");

// Function MM.AnimationAnalyzer.ConstructAnimationReferences
// 0x0004 (0x0004 - 0x0000)
struct AnimationAnalyzer_ConstructAnimationReferences final
{
public:
	int32                                         FromSourceAnimation;                               // 0x0000(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
//static_assert(alignof(AnimationAnalyzer_ConstructAnimationReferences) == 0x000004, "Wrong alignment on AnimationAnalyzer_ConstructAnimationReferences");
//static_assert(sizeof(AnimationAnalyzer_ConstructAnimationReferences) == 0x000004, "Wrong size on AnimationAnalyzer_ConstructAnimationReferences");
//static_assert(offsetof(AnimationAnalyzer_ConstructAnimationReferences, FromSourceAnimation) == 0x000000, "Member 'AnimationAnalyzer_ConstructAnimationReferences::FromSourceAnimation' has a wrong offset!");

// Function MM.AnimationAnalyzer.CountAnimationReferences
// 0x0004 (0x0004 - 0x0000)
struct AnimationAnalyzer_CountAnimationReferences final
{
public:
	int32                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
//static_assert(alignof(AnimationAnalyzer_CountAnimationReferences) == 0x000004, "Wrong alignment on AnimationAnalyzer_CountAnimationReferences");
//static_assert(sizeof(AnimationAnalyzer_CountAnimationReferences) == 0x000004, "Wrong size on AnimationAnalyzer_CountAnimationReferences");
//static_assert(offsetof(AnimationAnalyzer_CountAnimationReferences, ReturnValue) == 0x000000, "Member 'AnimationAnalyzer_CountAnimationReferences::ReturnValue' has a wrong offset!");

// Function MM.AnimationAnalyzer.FindAnimationFromSequence
// 0x0010 (0x0010 - 0x0000)
struct AnimationAnalyzer_FindAnimationFromSequence final
{
public:
	int32                                         CurrentAnimationRef;                               // 0x0000(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_4[0x4];                                        // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UAnimSequence*                          ReturnValue;                                       // 0x0008(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
//static_assert(alignof(AnimationAnalyzer_FindAnimationFromSequence) == 0x000008, "Wrong alignment on AnimationAnalyzer_FindAnimationFromSequence");
//static_assert(sizeof(AnimationAnalyzer_FindAnimationFromSequence) == 0x000010, "Wrong size on AnimationAnalyzer_FindAnimationFromSequence");
//static_assert(offsetof(AnimationAnalyzer_FindAnimationFromSequence, CurrentAnimationRef) == 0x000000, "Member 'AnimationAnalyzer_FindAnimationFromSequence::CurrentAnimationRef' has a wrong offset!");
//static_assert(offsetof(AnimationAnalyzer_FindAnimationFromSequence, ReturnValue) == 0x000008, "Member 'AnimationAnalyzer_FindAnimationFromSequence::ReturnValue' has a wrong offset!");

// Function MM.AnimationAnalyzer.FindAnimationsAtDesiredReferences
// 0x0010 (0x0010 - 0x0000)
struct AnimationAnalyzer_FindAnimationsAtDesiredReferences final
{
public:
	int32                                         Ref;                                               // 0x0000(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_4[0x4];                                        // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UAnimSequence*                          ReturnValue;                                       // 0x0008(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
//static_assert(alignof(AnimationAnalyzer_FindAnimationsAtDesiredReferences) == 0x000008, "Wrong alignment on AnimationAnalyzer_FindAnimationsAtDesiredReferences");
//static_assert(sizeof(AnimationAnalyzer_FindAnimationsAtDesiredReferences) == 0x000010, "Wrong size on AnimationAnalyzer_FindAnimationsAtDesiredReferences");
//static_assert(offsetof(AnimationAnalyzer_FindAnimationsAtDesiredReferences, Ref) == 0x000000, "Member 'AnimationAnalyzer_FindAnimationsAtDesiredReferences::Ref' has a wrong offset!");
//static_assert(offsetof(AnimationAnalyzer_FindAnimationsAtDesiredReferences, ReturnValue) == 0x000008, "Member 'AnimationAnalyzer_FindAnimationsAtDesiredReferences::ReturnValue' has a wrong offset!");

// Function MM.AnimationAnalyzer.FindUserSelectedBones
// 0x0004 (0x0004 - 0x0000)
struct AnimationAnalyzer_FindUserSelectedBones final
{
public:
	int32                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
//static_assert(alignof(AnimationAnalyzer_FindUserSelectedBones) == 0x000004, "Wrong alignment on AnimationAnalyzer_FindUserSelectedBones");
//static_assert(sizeof(AnimationAnalyzer_FindUserSelectedBones) == 0x000004, "Wrong size on AnimationAnalyzer_FindUserSelectedBones");
//static_assert(offsetof(AnimationAnalyzer_FindUserSelectedBones, ReturnValue) == 0x000000, "Member 'AnimationAnalyzer_FindUserSelectedBones::ReturnValue' has a wrong offset!");

// Function MM.AnimationAnalyzer.FindUsersSkeletonBoneNames
// 0x000C (0x000C - 0x0000)
struct AnimationAnalyzer_FindUsersSkeletonBoneNames final
{
public:
	int32                                         ReferencedBone;                                    // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   ReturnValue;                                       // 0x0004(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
//static_assert(alignof(AnimationAnalyzer_FindUsersSkeletonBoneNames) == 0x000004, "Wrong alignment on AnimationAnalyzer_FindUsersSkeletonBoneNames");
//static_assert(sizeof(AnimationAnalyzer_FindUsersSkeletonBoneNames) == 0x00000C, "Wrong size on AnimationAnalyzer_FindUsersSkeletonBoneNames");
//static_assert(offsetof(AnimationAnalyzer_FindUsersSkeletonBoneNames, ReferencedBone) == 0x000000, "Member 'AnimationAnalyzer_FindUsersSkeletonBoneNames::ReferencedBone' has a wrong offset!");
//static_assert(offsetof(AnimationAnalyzer_FindUsersSkeletonBoneNames, ReturnValue) == 0x000004, "Member 'AnimationAnalyzer_FindUsersSkeletonBoneNames::ReturnValue' has a wrong offset!");

// Function MM.AnimationAnalyzer.GatherSkeletonInfo
// 0x0028 (0x0028 - 0x0000)
struct AnimationAnalyzer_GatherSkeletonInfo final
{
public:
	class USkeleton*                              UserSkeleton;                                      // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<class FName>                           SelectedJoints;                                    // 0x0008(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
	TArray<float>                                 BoneWeights;                                       // 0x0018(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
};
//static_assert(alignof(AnimationAnalyzer_GatherSkeletonInfo) == 0x000008, "Wrong alignment on AnimationAnalyzer_GatherSkeletonInfo");
//static_assert(sizeof(AnimationAnalyzer_GatherSkeletonInfo) == 0x000028, "Wrong size on AnimationAnalyzer_GatherSkeletonInfo");
//static_assert(offsetof(AnimationAnalyzer_GatherSkeletonInfo, UserSkeleton) == 0x000000, "Member 'AnimationAnalyzer_GatherSkeletonInfo::UserSkeleton' has a wrong offset!");
//static_assert(offsetof(AnimationAnalyzer_GatherSkeletonInfo, SelectedJoints) == 0x000008, "Member 'AnimationAnalyzer_GatherSkeletonInfo::SelectedJoints' has a wrong offset!");
//static_assert(offsetof(AnimationAnalyzer_GatherSkeletonInfo, BoneWeights) == 0x000018, "Member 'AnimationAnalyzer_GatherSkeletonInfo::BoneWeights' has a wrong offset!");

// Function MM.AnimationAnalyzer.GetAnimationAnalyzerSkeleton
// 0x0008 (0x0008 - 0x0000)
struct AnimationAnalyzer_GetAnimationAnalyzerSkeleton final
{
public:
	class USkeleton*                              ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
//static_assert(alignof(AnimationAnalyzer_GetAnimationAnalyzerSkeleton) == 0x000008, "Wrong alignment on AnimationAnalyzer_GetAnimationAnalyzerSkeleton");
//static_assert(sizeof(AnimationAnalyzer_GetAnimationAnalyzerSkeleton) == 0x000008, "Wrong size on AnimationAnalyzer_GetAnimationAnalyzerSkeleton");
//static_assert(offsetof(AnimationAnalyzer_GetAnimationAnalyzerSkeleton, ReturnValue) == 0x000000, "Member 'AnimationAnalyzer_GetAnimationAnalyzerSkeleton::ReturnValue' has a wrong offset!");

// Function MM.AnimationAnalyzer.GetAnimationCount
// 0x0004 (0x0004 - 0x0000)
struct AnimationAnalyzer_GetAnimationCount final
{
public:
	int32                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
//static_assert(alignof(AnimationAnalyzer_GetAnimationCount) == 0x000004, "Wrong alignment on AnimationAnalyzer_GetAnimationCount");
//static_assert(sizeof(AnimationAnalyzer_GetAnimationCount) == 0x000004, "Wrong size on AnimationAnalyzer_GetAnimationCount");
//static_assert(offsetof(AnimationAnalyzer_GetAnimationCount, ReturnValue) == 0x000000, "Member 'AnimationAnalyzer_GetAnimationCount::ReturnValue' has a wrong offset!");

// Function MM.AnimationAnalyzer.GetAnimationShowNameInEditor
// 0x0020 (0x0020 - 0x0000)
struct AnimationAnalyzer_GetAnimationShowNameInEditor final
{
public:
	int32                                         Ref;                                               // 0x0000(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_4[0x4];                                        // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class FText                                   ReturnValue;                                       // 0x0008(0x0018)(Parm, OutParm, ReturnParm, NativeAccessSpecifierPublic)
};
//static_assert(alignof(AnimationAnalyzer_GetAnimationShowNameInEditor) == 0x000008, "Wrong alignment on AnimationAnalyzer_GetAnimationShowNameInEditor");
//static_assert(sizeof(AnimationAnalyzer_GetAnimationShowNameInEditor) == 0x000020, "Wrong size on AnimationAnalyzer_GetAnimationShowNameInEditor");
//static_assert(offsetof(AnimationAnalyzer_GetAnimationShowNameInEditor, Ref) == 0x000000, "Member 'AnimationAnalyzer_GetAnimationShowNameInEditor::Ref' has a wrong offset!");
//static_assert(offsetof(AnimationAnalyzer_GetAnimationShowNameInEditor, ReturnValue) == 0x000008, "Member 'AnimationAnalyzer_GetAnimationShowNameInEditor::ReturnValue' has a wrong offset!");

// Function MM.AnimationAnalyzer.GetSoftPathByIndex
// 0x0020 (0x0020 - 0x0000)
struct AnimationAnalyzer_GetSoftPathByIndex final
{
public:
	int32                                         Ref;                                               // 0x0000(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_4[0x4];                                        // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FSoftObjectPath                        ReturnValue;                                       // 0x0008(0x0018)(Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
//static_assert(alignof(AnimationAnalyzer_GetSoftPathByIndex) == 0x000008, "Wrong alignment on AnimationAnalyzer_GetSoftPathByIndex");
//static_assert(sizeof(AnimationAnalyzer_GetSoftPathByIndex) == 0x000020, "Wrong size on AnimationAnalyzer_GetSoftPathByIndex");
//static_assert(offsetof(AnimationAnalyzer_GetSoftPathByIndex, Ref) == 0x000000, "Member 'AnimationAnalyzer_GetSoftPathByIndex::Ref' has a wrong offset!");
//static_assert(offsetof(AnimationAnalyzer_GetSoftPathByIndex, ReturnValue) == 0x000008, "Member 'AnimationAnalyzer_GetSoftPathByIndex::ReturnValue' has a wrong offset!");

// Function MM.AnimationAnalyzer.HasSequence
// 0x000C (0x000C - 0x0000)
struct AnimationAnalyzer_HasSequence final
{
public:
	class FName                                   SequenceName;                                      // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0008(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x3];                                        // 0x0009(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
//static_assert(alignof(AnimationAnalyzer_HasSequence) == 0x000004, "Wrong alignment on AnimationAnalyzer_HasSequence");
//static_assert(sizeof(AnimationAnalyzer_HasSequence) == 0x00000C, "Wrong size on AnimationAnalyzer_HasSequence");
//static_assert(offsetof(AnimationAnalyzer_HasSequence, SequenceName) == 0x000000, "Member 'AnimationAnalyzer_HasSequence::SequenceName' has a wrong offset!");
//static_assert(offsetof(AnimationAnalyzer_HasSequence, ReturnValue) == 0x000008, "Member 'AnimationAnalyzer_HasSequence::ReturnValue' has a wrong offset!");

// Function MM.AnimationAnalyzer.IsAnimationExtracted
// 0x0010 (0x0010 - 0x0000)
struct AnimationAnalyzer_IsAnimationExtracted final
{
public:
	class FName                                   AnimationRef;                                      // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         WorldTime;                                         // 0x0008(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x000C(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_D[0x3];                                        // 0x000D(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
//static_assert(alignof(AnimationAnalyzer_IsAnimationExtracted) == 0x000004, "Wrong alignment on AnimationAnalyzer_IsAnimationExtracted");
//static_assert(sizeof(AnimationAnalyzer_IsAnimationExtracted) == 0x000010, "Wrong size on AnimationAnalyzer_IsAnimationExtracted");
//static_assert(offsetof(AnimationAnalyzer_IsAnimationExtracted, AnimationRef) == 0x000000, "Member 'AnimationAnalyzer_IsAnimationExtracted::AnimationRef' has a wrong offset!");
//static_assert(offsetof(AnimationAnalyzer_IsAnimationExtracted, WorldTime) == 0x000008, "Member 'AnimationAnalyzer_IsAnimationExtracted::WorldTime' has a wrong offset!");
//static_assert(offsetof(AnimationAnalyzer_IsAnimationExtracted, ReturnValue) == 0x00000C, "Member 'AnimationAnalyzer_IsAnimationExtracted::ReturnValue' has a wrong offset!");

// Function MM.AnimationAnalyzer.IsAnimMathDataValid
// 0x0001 (0x0001 - 0x0000)
struct AnimationAnalyzer_IsAnimMathDataValid final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
//static_assert(alignof(AnimationAnalyzer_IsAnimMathDataValid) == 0x000001, "Wrong alignment on AnimationAnalyzer_IsAnimMathDataValid");
//static_assert(sizeof(AnimationAnalyzer_IsAnimMathDataValid) == 0x000001, "Wrong size on AnimationAnalyzer_IsAnimMathDataValid");
//static_assert(offsetof(AnimationAnalyzer_IsAnimMathDataValid, ReturnValue) == 0x000000, "Member 'AnimationAnalyzer_IsAnimMathDataValid::ReturnValue' has a wrong offset!");

// Function MM.AnimationAnalyzer.IsUseLMAnim
// 0x0001 (0x0001 - 0x0000)
struct AnimationAnalyzer_IsUseLMAnim final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
//static_assert(alignof(AnimationAnalyzer_IsUseLMAnim) == 0x000001, "Wrong alignment on AnimationAnalyzer_IsUseLMAnim");
//static_assert(sizeof(AnimationAnalyzer_IsUseLMAnim) == 0x000001, "Wrong size on AnimationAnalyzer_IsUseLMAnim");
//static_assert(offsetof(AnimationAnalyzer_IsUseLMAnim, ReturnValue) == 0x000000, "Member 'AnimationAnalyzer_IsUseLMAnim::ReturnValue' has a wrong offset!");

// Function MM.AnimationAnalyzer.MatchAnimationByKDTree
// 0x0060 (0x0060 - 0x0000)
struct AnimationAnalyzer_MatchAnimationByKDTree final
{
public:
	float                                         VelocityStrength;                                  // 0x0000(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_4[0x4];                                        // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FInputPlayerDirectionData              InputDirection;                                    // 0x0008(0x0028)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
	TArray<struct FSkeletonStructure>             MotionJointData;                                   // 0x0030(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
	struct FVector                                PresentVel;                                        // 0x0040(0x0018)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         MinSquareDis;                                      // 0x0058(0x0004)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         ReturnValue;                                       // 0x005C(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
//static_assert(alignof(AnimationAnalyzer_MatchAnimationByKDTree) == 0x000008, "Wrong alignment on AnimationAnalyzer_MatchAnimationByKDTree");
//static_assert(sizeof(AnimationAnalyzer_MatchAnimationByKDTree) == 0x000060, "Wrong size on AnimationAnalyzer_MatchAnimationByKDTree");
//static_assert(offsetof(AnimationAnalyzer_MatchAnimationByKDTree, VelocityStrength) == 0x000000, "Member 'AnimationAnalyzer_MatchAnimationByKDTree::VelocityStrength' has a wrong offset!");
//static_assert(offsetof(AnimationAnalyzer_MatchAnimationByKDTree, InputDirection) == 0x000008, "Member 'AnimationAnalyzer_MatchAnimationByKDTree::InputDirection' has a wrong offset!");
//static_assert(offsetof(AnimationAnalyzer_MatchAnimationByKDTree, MotionJointData) == 0x000030, "Member 'AnimationAnalyzer_MatchAnimationByKDTree::MotionJointData' has a wrong offset!");
//static_assert(offsetof(AnimationAnalyzer_MatchAnimationByKDTree, PresentVel) == 0x000040, "Member 'AnimationAnalyzer_MatchAnimationByKDTree::PresentVel' has a wrong offset!");
//static_assert(offsetof(AnimationAnalyzer_MatchAnimationByKDTree, MinSquareDis) == 0x000058, "Member 'AnimationAnalyzer_MatchAnimationByKDTree::MinSquareDis' has a wrong offset!");
//static_assert(offsetof(AnimationAnalyzer_MatchAnimationByKDTree, ReturnValue) == 0x00005C, "Member 'AnimationAnalyzer_MatchAnimationByKDTree::ReturnValue' has a wrong offset!");

// Function MM.AnimationAnalyzer.MMAnimationSeqUsingNotify_Inner
// 0x0010 (0x0010 - 0x0000)
struct AnimationAnalyzer_MMAnimationSeqUsingNotify_Inner final
{
public:
	int32                                         Ref;                                               // 0x0000(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_4[0x4];                                        // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class AActor*                                 Owner;                                             // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
//static_assert(alignof(AnimationAnalyzer_MMAnimationSeqUsingNotify_Inner) == 0x000008, "Wrong alignment on AnimationAnalyzer_MMAnimationSeqUsingNotify_Inner");
//static_assert(sizeof(AnimationAnalyzer_MMAnimationSeqUsingNotify_Inner) == 0x000010, "Wrong size on AnimationAnalyzer_MMAnimationSeqUsingNotify_Inner");
//static_assert(offsetof(AnimationAnalyzer_MMAnimationSeqUsingNotify_Inner, Ref) == 0x000000, "Member 'AnimationAnalyzer_MMAnimationSeqUsingNotify_Inner::Ref' has a wrong offset!");
//static_assert(offsetof(AnimationAnalyzer_MMAnimationSeqUsingNotify_Inner, Owner) == 0x000008, "Member 'AnimationAnalyzer_MMAnimationSeqUsingNotify_Inner::Owner' has a wrong offset!");

// Function MM.AnimationAnalyzer.NewAnimationReference
// 0x0010 (0x0010 - 0x0000)
struct AnimationAnalyzer_NewAnimationReference final
{
public:
	TArray<class UAnimSequence*>                  ProvidedAnimationsByUser;                          // 0x0000(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
};
//static_assert(alignof(AnimationAnalyzer_NewAnimationReference) == 0x000008, "Wrong alignment on AnimationAnalyzer_NewAnimationReference");
//static_assert(sizeof(AnimationAnalyzer_NewAnimationReference) == 0x000010, "Wrong size on AnimationAnalyzer_NewAnimationReference");
//static_assert(offsetof(AnimationAnalyzer_NewAnimationReference, ProvidedAnimationsByUser) == 0x000000, "Member 'AnimationAnalyzer_NewAnimationReference::ProvidedAnimationsByUser' has a wrong offset!");

// Function MM.AnimationAnalyzer.OnAnimationAssetLoadStatChange
// 0x0010 (0x0010 - 0x0000)
struct AnimationAnalyzer_OnAnimationAssetLoadStatChange final
{
public:
	int32                                         Ref;                                               // 0x0000(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EAnimSeqAssetLoadStatType                     Stat;                                              // 0x0004(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_5[0x3];                                        // 0x0005(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class UAnimSequence*                          Anim;                                              // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
//static_assert(alignof(AnimationAnalyzer_OnAnimationAssetLoadStatChange) == 0x000008, "Wrong alignment on AnimationAnalyzer_OnAnimationAssetLoadStatChange");
//static_assert(sizeof(AnimationAnalyzer_OnAnimationAssetLoadStatChange) == 0x000010, "Wrong size on AnimationAnalyzer_OnAnimationAssetLoadStatChange");
//static_assert(offsetof(AnimationAnalyzer_OnAnimationAssetLoadStatChange, Ref) == 0x000000, "Member 'AnimationAnalyzer_OnAnimationAssetLoadStatChange::Ref' has a wrong offset!");
//static_assert(offsetof(AnimationAnalyzer_OnAnimationAssetLoadStatChange, Stat) == 0x000004, "Member 'AnimationAnalyzer_OnAnimationAssetLoadStatChange::Stat' has a wrong offset!");
//static_assert(offsetof(AnimationAnalyzer_OnAnimationAssetLoadStatChange, Anim) == 0x000008, "Member 'AnimationAnalyzer_OnAnimationAssetLoadStatChange::Anim' has a wrong offset!");

// Function MM.AnimationAnalyzer.RemoveAnimationReference
// 0x0004 (0x0004 - 0x0000)
struct AnimationAnalyzer_RemoveAnimationReference final
{
public:
	int32                                         CurrentAnimationRef;                               // 0x0000(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
//static_assert(alignof(AnimationAnalyzer_RemoveAnimationReference) == 0x000004, "Wrong alignment on AnimationAnalyzer_RemoveAnimationReference");
//static_assert(sizeof(AnimationAnalyzer_RemoveAnimationReference) == 0x000004, "Wrong size on AnimationAnalyzer_RemoveAnimationReference");
//static_assert(offsetof(AnimationAnalyzer_RemoveAnimationReference, CurrentAnimationRef) == 0x000000, "Member 'AnimationAnalyzer_RemoveAnimationReference::CurrentAnimationRef' has a wrong offset!");

// Function MM.AnimationAnalyzer.RequireAnimationsLoadAtDesiredReferences
// 0x0018 (0x0018 - 0x0000)
struct AnimationAnalyzer_RequireAnimationsLoadAtDesiredReferences final
{
public:
	int32                                         Ref;                                               // 0x0000(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bLoadAll;                                          // 0x0004(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_5[0x3];                                        // 0x0005(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class UObject*                                AnimInst;                                          // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         ReturnValue;                                       // 0x0010(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_14[0x4];                                       // 0x0014(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
//static_assert(alignof(AnimationAnalyzer_RequireAnimationsLoadAtDesiredReferences) == 0x000008, "Wrong alignment on AnimationAnalyzer_RequireAnimationsLoadAtDesiredReferences");
//static_assert(sizeof(AnimationAnalyzer_RequireAnimationsLoadAtDesiredReferences) == 0x000018, "Wrong size on AnimationAnalyzer_RequireAnimationsLoadAtDesiredReferences");
//static_assert(offsetof(AnimationAnalyzer_RequireAnimationsLoadAtDesiredReferences, Ref) == 0x000000, "Member 'AnimationAnalyzer_RequireAnimationsLoadAtDesiredReferences::Ref' has a wrong offset!");
//static_assert(offsetof(AnimationAnalyzer_RequireAnimationsLoadAtDesiredReferences, bLoadAll) == 0x000004, "Member 'AnimationAnalyzer_RequireAnimationsLoadAtDesiredReferences::bLoadAll' has a wrong offset!");
//static_assert(offsetof(AnimationAnalyzer_RequireAnimationsLoadAtDesiredReferences, AnimInst) == 0x000008, "Member 'AnimationAnalyzer_RequireAnimationsLoadAtDesiredReferences::AnimInst' has a wrong offset!");
//static_assert(offsetof(AnimationAnalyzer_RequireAnimationsLoadAtDesiredReferences, ReturnValue) == 0x000010, "Member 'AnimationAnalyzer_RequireAnimationsLoadAtDesiredReferences::ReturnValue' has a wrong offset!");

// Function MM.AnimationAnalyzer.SetUseLMAnim
// 0x0001 (0x0001 - 0x0000)
struct AnimationAnalyzer_SetUseLMAnim final
{
public:
	bool                                          bUse;                                              // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
//static_assert(alignof(AnimationAnalyzer_SetUseLMAnim) == 0x000001, "Wrong alignment on AnimationAnalyzer_SetUseLMAnim");
//static_assert(sizeof(AnimationAnalyzer_SetUseLMAnim) == 0x000001, "Wrong size on AnimationAnalyzer_SetUseLMAnim");
//static_assert(offsetof(AnimationAnalyzer_SetUseLMAnim, bUse) == 0x000000, "Member 'AnimationAnalyzer_SetUseLMAnim::bUse' has a wrong offset!");

// Function MM.AnimationAnalyzer.StructureForAnimationCalculations
// 0x0080 (0x0080 - 0x0000)
struct AnimationAnalyzer_StructureForAnimationCalculations final
{
public:
	float                                         ControllerInputReactionSpeedCustom;                // 0x0000(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         ControllerRotateReactionSpeedCustom;               // 0x0004(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         VelocityStrength;                                  // 0x0008(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         AnimationMatchPower;                               // 0x000C(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FInputPlayerDirectionData              InputDirection;                                    // 0x0010(0x0028)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
	TArray<struct FSkeletonStructure>             AllAnimationReferences;                            // 0x0038(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
	struct FVector                                PresentVel;                                        // 0x0048(0x0018)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         BlendTime;                                         // 0x0060(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         CalculatedResult;                                  // 0x0064(0x0004)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FMotionMatchingCostData                AnimCostData;                                      // 0x0068(0x0010)(Parm, OutParm, NativeAccessSpecifierPublic)
	int32                                         ReturnValue;                                       // 0x0078(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_7C[0x4];                                       // 0x007C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
//static_assert(alignof(AnimationAnalyzer_StructureForAnimationCalculations) == 0x000008, "Wrong alignment on AnimationAnalyzer_StructureForAnimationCalculations");
//static_assert(sizeof(AnimationAnalyzer_StructureForAnimationCalculations) == 0x000080, "Wrong size on AnimationAnalyzer_StructureForAnimationCalculations");
//static_assert(offsetof(AnimationAnalyzer_StructureForAnimationCalculations, ControllerInputReactionSpeedCustom) == 0x000000, "Member 'AnimationAnalyzer_StructureForAnimationCalculations::ControllerInputReactionSpeedCustom' has a wrong offset!");
//static_assert(offsetof(AnimationAnalyzer_StructureForAnimationCalculations, ControllerRotateReactionSpeedCustom) == 0x000004, "Member 'AnimationAnalyzer_StructureForAnimationCalculations::ControllerRotateReactionSpeedCustom' has a wrong offset!");
//static_assert(offsetof(AnimationAnalyzer_StructureForAnimationCalculations, VelocityStrength) == 0x000008, "Member 'AnimationAnalyzer_StructureForAnimationCalculations::VelocityStrength' has a wrong offset!");
//static_assert(offsetof(AnimationAnalyzer_StructureForAnimationCalculations, AnimationMatchPower) == 0x00000C, "Member 'AnimationAnalyzer_StructureForAnimationCalculations::AnimationMatchPower' has a wrong offset!");
//static_assert(offsetof(AnimationAnalyzer_StructureForAnimationCalculations, InputDirection) == 0x000010, "Member 'AnimationAnalyzer_StructureForAnimationCalculations::InputDirection' has a wrong offset!");
//static_assert(offsetof(AnimationAnalyzer_StructureForAnimationCalculations, AllAnimationReferences) == 0x000038, "Member 'AnimationAnalyzer_StructureForAnimationCalculations::AllAnimationReferences' has a wrong offset!");
//static_assert(offsetof(AnimationAnalyzer_StructureForAnimationCalculations, PresentVel) == 0x000048, "Member 'AnimationAnalyzer_StructureForAnimationCalculations::PresentVel' has a wrong offset!");
//static_assert(offsetof(AnimationAnalyzer_StructureForAnimationCalculations, BlendTime) == 0x000060, "Member 'AnimationAnalyzer_StructureForAnimationCalculations::BlendTime' has a wrong offset!");
//static_assert(offsetof(AnimationAnalyzer_StructureForAnimationCalculations, CalculatedResult) == 0x000064, "Member 'AnimationAnalyzer_StructureForAnimationCalculations::CalculatedResult' has a wrong offset!");
//static_assert(offsetof(AnimationAnalyzer_StructureForAnimationCalculations, AnimCostData) == 0x000068, "Member 'AnimationAnalyzer_StructureForAnimationCalculations::AnimCostData' has a wrong offset!");
//static_assert(offsetof(AnimationAnalyzer_StructureForAnimationCalculations, ReturnValue) == 0x000078, "Member 'AnimationAnalyzer_StructureForAnimationCalculations::ReturnValue' has a wrong offset!");

// Function MM.AnimationAnalyzer.TryInitFromAA
// 0x0010 (0x0010 - 0x0000)
struct AnimationAnalyzer_TryInitFromAA final
{
public:
	const class UAnimationAnalyzer*               OrgAA;                                             // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0008(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
//static_assert(alignof(AnimationAnalyzer_TryInitFromAA) == 0x000008, "Wrong alignment on AnimationAnalyzer_TryInitFromAA");
//static_assert(sizeof(AnimationAnalyzer_TryInitFromAA) == 0x000010, "Wrong size on AnimationAnalyzer_TryInitFromAA");
//static_assert(offsetof(AnimationAnalyzer_TryInitFromAA, OrgAA) == 0x000000, "Member 'AnimationAnalyzer_TryInitFromAA::OrgAA' has a wrong offset!");
//static_assert(offsetof(AnimationAnalyzer_TryInitFromAA, ReturnValue) == 0x000008, "Member 'AnimationAnalyzer_TryInitFromAA::ReturnValue' has a wrong offset!");

// Function MM.AnimationAnalyzer.GetSequenceTimeOfAnimations
// 0x0088 (0x0088 - 0x0000)
struct AnimationAnalyzer_GetSequenceTimeOfAnimations final
{
public:
	int32                                         CurrentAnimationKeyframe;                          // 0x0000(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_4[0x4];                                        // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FMotionMatchingMath                    ReturnValue;                                       // 0x0008(0x0080)(ConstParm, Parm, OutParm, ReturnParm, ReferenceParm, NativeAccessSpecifierPublic)
};
//static_assert(alignof(AnimationAnalyzer_GetSequenceTimeOfAnimations) == 0x000008, "Wrong alignment on AnimationAnalyzer_GetSequenceTimeOfAnimations");
//static_assert(sizeof(AnimationAnalyzer_GetSequenceTimeOfAnimations) == 0x000088, "Wrong size on AnimationAnalyzer_GetSequenceTimeOfAnimations");
//static_assert(offsetof(AnimationAnalyzer_GetSequenceTimeOfAnimations, CurrentAnimationKeyframe) == 0x000000, "Member 'AnimationAnalyzer_GetSequenceTimeOfAnimations::CurrentAnimationKeyframe' has a wrong offset!");
//static_assert(offsetof(AnimationAnalyzer_GetSequenceTimeOfAnimations, ReturnValue) == 0x000008, "Member 'AnimationAnalyzer_GetSequenceTimeOfAnimations::ReturnValue' has a wrong offset!");

// Function MM.AnimationAnalyzer.IsBoneSelected
// 0x000C (0x000C - 0x0000)
struct AnimationAnalyzer_IsBoneSelected final
{
public:
	class FName                                   BoneName;                                          // 0x0000(0x0008)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0008(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x3];                                        // 0x0009(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
//static_assert(alignof(AnimationAnalyzer_IsBoneSelected) == 0x000004, "Wrong alignment on AnimationAnalyzer_IsBoneSelected");
//static_assert(sizeof(AnimationAnalyzer_IsBoneSelected) == 0x00000C, "Wrong size on AnimationAnalyzer_IsBoneSelected");
//static_assert(offsetof(AnimationAnalyzer_IsBoneSelected, BoneName) == 0x000000, "Member 'AnimationAnalyzer_IsBoneSelected::BoneName' has a wrong offset!");
//static_assert(offsetof(AnimationAnalyzer_IsBoneSelected, ReturnValue) == 0x000008, "Member 'AnimationAnalyzer_IsBoneSelected::ReturnValue' has a wrong offset!");

}

