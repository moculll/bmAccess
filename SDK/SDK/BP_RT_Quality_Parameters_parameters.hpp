#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: BP_RT_Quality_Parameters

#include "Basic.hpp"

#include "CoreUObject_structs.hpp"
#include "RT_Parameters_structs.hpp"
#include "Enum_RT_Quality_Preset_structs.hpp"
#include "VeryHigh_structs.hpp"


namespace SDK::Params
{

// Function BP_RT_Quality_Parameters.BP_RT_Quality_Parameters_C.Adaptive Reflection and Water Caustics Based on Player Speed
// 0x0030 (0x0030 - 0x0000)
struct BP_RT_Quality_Parameters_C_Adaptive_Reflection_and_Water_Caustics_Based_on_Player_Speed final
{
public:
	bool                                          CallFunc_EqualEqual_ByteByte_ReturnValue;          // 0x0000(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_EqualEqual_ByteByte_ReturnValue_1;        // 0x0001(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_BooleanAND_ReturnValue;                   // 0x0002(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_BooleanAND_ReturnValue_1;                 // 0x0003(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_GreaterEqual_DoubleDouble_ReturnValue;    // 0x0004(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_5[0x3];                                        // 0x0005(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class APawn*                                  CallFunc_GetPlayerPawn_ReturnValue;                // 0x0008(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_GetVelocity_ReturnValue;                  // 0x0010(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_VSize_ReturnValue;                        // 0x0028(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
//static_assert(alignof(BP_RT_Quality_Parameters_C_Adaptive_Reflection_and_Water_Caustics_Based_on_Player_Speed) == 0x000008, "Wrong alignment on BP_RT_Quality_Parameters_C_Adaptive_Reflection_and_Water_Caustics_Based_on_Player_Speed");
//static_assert(sizeof(BP_RT_Quality_Parameters_C_Adaptive_Reflection_and_Water_Caustics_Based_on_Player_Speed) == 0x000030, "Wrong size on BP_RT_Quality_Parameters_C_Adaptive_Reflection_and_Water_Caustics_Based_on_Player_Speed");
//static_assert(offsetof(BP_RT_Quality_Parameters_C_Adaptive_Reflection_and_Water_Caustics_Based_on_Player_Speed, CallFunc_EqualEqual_ByteByte_ReturnValue) == 0x000000, "Member 'BP_RT_Quality_Parameters_C_Adaptive_Reflection_and_Water_Caustics_Based_on_Player_Speed::CallFunc_EqualEqual_ByteByte_ReturnValue' has a wrong offset!");
//static_assert(offsetof(BP_RT_Quality_Parameters_C_Adaptive_Reflection_and_Water_Caustics_Based_on_Player_Speed, CallFunc_EqualEqual_ByteByte_ReturnValue_1) == 0x000001, "Member 'BP_RT_Quality_Parameters_C_Adaptive_Reflection_and_Water_Caustics_Based_on_Player_Speed::CallFunc_EqualEqual_ByteByte_ReturnValue_1' has a wrong offset!");
//static_assert(offsetof(BP_RT_Quality_Parameters_C_Adaptive_Reflection_and_Water_Caustics_Based_on_Player_Speed, CallFunc_BooleanAND_ReturnValue) == 0x000002, "Member 'BP_RT_Quality_Parameters_C_Adaptive_Reflection_and_Water_Caustics_Based_on_Player_Speed::CallFunc_BooleanAND_ReturnValue' has a wrong offset!");
//static_assert(offsetof(BP_RT_Quality_Parameters_C_Adaptive_Reflection_and_Water_Caustics_Based_on_Player_Speed, CallFunc_BooleanAND_ReturnValue_1) == 0x000003, "Member 'BP_RT_Quality_Parameters_C_Adaptive_Reflection_and_Water_Caustics_Based_on_Player_Speed::CallFunc_BooleanAND_ReturnValue_1' has a wrong offset!");
//static_assert(offsetof(BP_RT_Quality_Parameters_C_Adaptive_Reflection_and_Water_Caustics_Based_on_Player_Speed, CallFunc_GreaterEqual_DoubleDouble_ReturnValue) == 0x000004, "Member 'BP_RT_Quality_Parameters_C_Adaptive_Reflection_and_Water_Caustics_Based_on_Player_Speed::CallFunc_GreaterEqual_DoubleDouble_ReturnValue' has a wrong offset!");
//static_assert(offsetof(BP_RT_Quality_Parameters_C_Adaptive_Reflection_and_Water_Caustics_Based_on_Player_Speed, CallFunc_GetPlayerPawn_ReturnValue) == 0x000008, "Member 'BP_RT_Quality_Parameters_C_Adaptive_Reflection_and_Water_Caustics_Based_on_Player_Speed::CallFunc_GetPlayerPawn_ReturnValue' has a wrong offset!");
//static_assert(offsetof(BP_RT_Quality_Parameters_C_Adaptive_Reflection_and_Water_Caustics_Based_on_Player_Speed, CallFunc_GetVelocity_ReturnValue) == 0x000010, "Member 'BP_RT_Quality_Parameters_C_Adaptive_Reflection_and_Water_Caustics_Based_on_Player_Speed::CallFunc_GetVelocity_ReturnValue' has a wrong offset!");
//static_assert(offsetof(BP_RT_Quality_Parameters_C_Adaptive_Reflection_and_Water_Caustics_Based_on_Player_Speed, CallFunc_VSize_ReturnValue) == 0x000028, "Member 'BP_RT_Quality_Parameters_C_Adaptive_Reflection_and_Water_Caustics_Based_on_Player_Speed::CallFunc_VSize_ReturnValue' has a wrong offset!");

// Function BP_RT_Quality_Parameters.BP_RT_Quality_Parameters_C.Check DLSSRR
// 0x0038 (0x0038 - 0x0000)
struct BP_RT_Quality_Parameters_C_Check_DLSSRR final
{
public:
	class FString                                 CallFunc_Concat_StrStr_ReturnValue;                // 0x0000(0x0010)(ZeroConstructor, HasGetValueTypeHash)
	class FString                                 CallFunc_Concat_StrStr_ReturnValue_1;              // 0x0010(0x0010)(ZeroConstructor, HasGetValueTypeHash)
	bool                                          CallFunc_EqualEqual_StrStr_ReturnValue;            // 0x0020(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_21[0x3];                                       // 0x0021(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         CallFunc_GetConsoleVariableFloatValue_ReturnValue; // 0x0024(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_EqualEqual_DoubleDouble_ReturnValue;      // 0x0028(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_29[0x7];                                       // 0x0029(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	double                                        CallFunc_EqualEqual_DoubleDouble_A_WideningCast;   // 0x0030(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
//static_assert(alignof(BP_RT_Quality_Parameters_C_Check_DLSSRR) == 0x000008, "Wrong alignment on BP_RT_Quality_Parameters_C_Check_DLSSRR");
//static_assert(sizeof(BP_RT_Quality_Parameters_C_Check_DLSSRR) == 0x000038, "Wrong size on BP_RT_Quality_Parameters_C_Check_DLSSRR");
//static_assert(offsetof(BP_RT_Quality_Parameters_C_Check_DLSSRR, CallFunc_Concat_StrStr_ReturnValue) == 0x000000, "Member 'BP_RT_Quality_Parameters_C_Check_DLSSRR::CallFunc_Concat_StrStr_ReturnValue' has a wrong offset!");
//static_assert(offsetof(BP_RT_Quality_Parameters_C_Check_DLSSRR, CallFunc_Concat_StrStr_ReturnValue_1) == 0x000010, "Member 'BP_RT_Quality_Parameters_C_Check_DLSSRR::CallFunc_Concat_StrStr_ReturnValue_1' has a wrong offset!");
//static_assert(offsetof(BP_RT_Quality_Parameters_C_Check_DLSSRR, CallFunc_EqualEqual_StrStr_ReturnValue) == 0x000020, "Member 'BP_RT_Quality_Parameters_C_Check_DLSSRR::CallFunc_EqualEqual_StrStr_ReturnValue' has a wrong offset!");
//static_assert(offsetof(BP_RT_Quality_Parameters_C_Check_DLSSRR, CallFunc_GetConsoleVariableFloatValue_ReturnValue) == 0x000024, "Member 'BP_RT_Quality_Parameters_C_Check_DLSSRR::CallFunc_GetConsoleVariableFloatValue_ReturnValue' has a wrong offset!");
//static_assert(offsetof(BP_RT_Quality_Parameters_C_Check_DLSSRR, CallFunc_EqualEqual_DoubleDouble_ReturnValue) == 0x000028, "Member 'BP_RT_Quality_Parameters_C_Check_DLSSRR::CallFunc_EqualEqual_DoubleDouble_ReturnValue' has a wrong offset!");
//static_assert(offsetof(BP_RT_Quality_Parameters_C_Check_DLSSRR, CallFunc_EqualEqual_DoubleDouble_A_WideningCast) == 0x000030, "Member 'BP_RT_Quality_Parameters_C_Check_DLSSRR::CallFunc_EqualEqual_DoubleDouble_A_WideningCast' has a wrong offset!");

// Function BP_RT_Quality_Parameters.BP_RT_Quality_Parameters_C.Construct RT Parameter
// 0x1ED0 (0x1ED0 - 0x0000)
struct BP_RT_Quality_Parameters_C_Construct_RT_Parameter final
{
public:
	struct FVeryHigh                              K2Node_MakeStruct_VeryHigh;                        // 0x0000(0x1ED0)(HasGetValueTypeHash)
};
//static_assert(alignof(BP_RT_Quality_Parameters_C_Construct_RT_Parameter) == 0x000010, "Wrong alignment on BP_RT_Quality_Parameters_C_Construct_RT_Parameter");
//static_assert(sizeof(BP_RT_Quality_Parameters_C_Construct_RT_Parameter) == 0x001ED0, "Wrong size on BP_RT_Quality_Parameters_C_Construct_RT_Parameter");
//static_assert(offsetof(BP_RT_Quality_Parameters_C_Construct_RT_Parameter, K2Node_MakeStruct_VeryHigh) == 0x000000, "Member 'BP_RT_Quality_Parameters_C_Construct_RT_Parameter::K2Node_MakeStruct_VeryHigh' has a wrong offset!");

// Function BP_RT_Quality_Parameters.BP_RT_Quality_Parameters_C.Enable DLSS RR
// 0x0070 (0x0070 - 0x0000)
struct BP_RT_Quality_Parameters_C_Enable_DLSS_RR final
{
public:
	bool                                          Enable_DLSSRR;                                     // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_1[0x7];                                        // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 CallFunc_Concat_StrStr_ReturnValue;                // 0x0008(0x0010)(ZeroConstructor, HasGetValueTypeHash)
	class FString                                 CallFunc_Concat_StrStr_ReturnValue_1;              // 0x0018(0x0010)(ZeroConstructor, HasGetValueTypeHash)
	class FString                                 CallFunc_Concat_StrStr_ReturnValue_2;              // 0x0028(0x0010)(ZeroConstructor, HasGetValueTypeHash)
	class FString                                 CallFunc_Concat_StrStr_ReturnValue_3;              // 0x0038(0x0010)(ZeroConstructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsDLSSRRSupported_ReturnValue;            // 0x0048(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_49[0x7];                                       // 0x0049(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 CallFunc_Concat_StrStr_ReturnValue_4;              // 0x0050(0x0010)(ZeroConstructor, HasGetValueTypeHash)
	float                                         CallFunc_GetConsoleVariableFloatValue_ReturnValue; // 0x0060(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_EqualEqual_DoubleDouble_ReturnValue;      // 0x0064(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_EqualEqual_StrStr_ReturnValue;            // 0x0065(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_66[0x2];                                       // 0x0066(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	double                                        CallFunc_EqualEqual_DoubleDouble_A_WideningCast;   // 0x0068(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
//static_assert(alignof(BP_RT_Quality_Parameters_C_Enable_DLSS_RR) == 0x000008, "Wrong alignment on BP_RT_Quality_Parameters_C_Enable_DLSS_RR");
//static_assert(sizeof(BP_RT_Quality_Parameters_C_Enable_DLSS_RR) == 0x000070, "Wrong size on BP_RT_Quality_Parameters_C_Enable_DLSS_RR");
//static_assert(offsetof(BP_RT_Quality_Parameters_C_Enable_DLSS_RR, Enable_DLSSRR) == 0x000000, "Member 'BP_RT_Quality_Parameters_C_Enable_DLSS_RR::Enable_DLSSRR' has a wrong offset!");
//static_assert(offsetof(BP_RT_Quality_Parameters_C_Enable_DLSS_RR, CallFunc_Concat_StrStr_ReturnValue) == 0x000008, "Member 'BP_RT_Quality_Parameters_C_Enable_DLSS_RR::CallFunc_Concat_StrStr_ReturnValue' has a wrong offset!");
//static_assert(offsetof(BP_RT_Quality_Parameters_C_Enable_DLSS_RR, CallFunc_Concat_StrStr_ReturnValue_1) == 0x000018, "Member 'BP_RT_Quality_Parameters_C_Enable_DLSS_RR::CallFunc_Concat_StrStr_ReturnValue_1' has a wrong offset!");
//static_assert(offsetof(BP_RT_Quality_Parameters_C_Enable_DLSS_RR, CallFunc_Concat_StrStr_ReturnValue_2) == 0x000028, "Member 'BP_RT_Quality_Parameters_C_Enable_DLSS_RR::CallFunc_Concat_StrStr_ReturnValue_2' has a wrong offset!");
//static_assert(offsetof(BP_RT_Quality_Parameters_C_Enable_DLSS_RR, CallFunc_Concat_StrStr_ReturnValue_3) == 0x000038, "Member 'BP_RT_Quality_Parameters_C_Enable_DLSS_RR::CallFunc_Concat_StrStr_ReturnValue_3' has a wrong offset!");
//static_assert(offsetof(BP_RT_Quality_Parameters_C_Enable_DLSS_RR, CallFunc_IsDLSSRRSupported_ReturnValue) == 0x000048, "Member 'BP_RT_Quality_Parameters_C_Enable_DLSS_RR::CallFunc_IsDLSSRRSupported_ReturnValue' has a wrong offset!");
//static_assert(offsetof(BP_RT_Quality_Parameters_C_Enable_DLSS_RR, CallFunc_Concat_StrStr_ReturnValue_4) == 0x000050, "Member 'BP_RT_Quality_Parameters_C_Enable_DLSS_RR::CallFunc_Concat_StrStr_ReturnValue_4' has a wrong offset!");
//static_assert(offsetof(BP_RT_Quality_Parameters_C_Enable_DLSS_RR, CallFunc_GetConsoleVariableFloatValue_ReturnValue) == 0x000060, "Member 'BP_RT_Quality_Parameters_C_Enable_DLSS_RR::CallFunc_GetConsoleVariableFloatValue_ReturnValue' has a wrong offset!");
//static_assert(offsetof(BP_RT_Quality_Parameters_C_Enable_DLSS_RR, CallFunc_EqualEqual_DoubleDouble_ReturnValue) == 0x000064, "Member 'BP_RT_Quality_Parameters_C_Enable_DLSS_RR::CallFunc_EqualEqual_DoubleDouble_ReturnValue' has a wrong offset!");
//static_assert(offsetof(BP_RT_Quality_Parameters_C_Enable_DLSS_RR, CallFunc_EqualEqual_StrStr_ReturnValue) == 0x000065, "Member 'BP_RT_Quality_Parameters_C_Enable_DLSS_RR::CallFunc_EqualEqual_StrStr_ReturnValue' has a wrong offset!");
//static_assert(offsetof(BP_RT_Quality_Parameters_C_Enable_DLSS_RR, CallFunc_EqualEqual_DoubleDouble_A_WideningCast) == 0x000068, "Member 'BP_RT_Quality_Parameters_C_Enable_DLSS_RR::CallFunc_EqualEqual_DoubleDouble_A_WideningCast' has a wrong offset!");

// Function BP_RT_Quality_Parameters.BP_RT_Quality_Parameters_C.Enable_DLSS_RR
// 0x0001 (0x0001 - 0x0000)
struct BP_RT_Quality_Parameters_C_Enable_DLSS_RR_0 final
{
public:
	bool                                          Enable_DLSSD;                                      // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
//static_assert(alignof(BP_RT_Quality_Parameters_C_Enable_DLSS_RR) == 0x000001, "Wrong alignment on BP_RT_Quality_Parameters_C_Enable_DLSS_RR");
//static_assert(sizeof(BP_RT_Quality_Parameters_C_Enable_DLSS_RR) == 0x000001, "Wrong size on BP_RT_Quality_Parameters_C_Enable_DLSS_RR");
//static_assert(offsetof(BP_RT_Quality_Parameters_C_Enable_DLSS_RR, Enable_DLSSD) == 0x000000, "Member 'BP_RT_Quality_Parameters_C_Enable_DLSS_RR::Enable_DLSSD' has a wrong offset!");

// Function BP_RT_Quality_Parameters.BP_RT_Quality_Parameters_C.ExecuteUbergraph_BP_RT_Quality_Parameters
// 0x0030 (0x0030 - 0x0000)
struct BP_RT_Quality_Parameters_C_ExecuteUbergraph_BP_RT_Quality_Parameters final
{
public:
	int32                                         EntryPoint;                                        // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_Event_Enable_DLSSD;                         // 0x0004(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	Enum_RT_Quality_Preset                        K2Node_Event_RTX_Preset;                           // 0x0005(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_6[0x2];                                        // 0x0006(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 K2Node_Event_AA_Method;                            // 0x0008(0x0010)(ZeroConstructor, HasGetValueTypeHash)
	class FString                                 K2Node_Event_DLSS_Quality;                         // 0x0018(0x0010)(ZeroConstructor, HasGetValueTypeHash)
	bool                                          K2Node_Event_Enable_Override_From_UI;              // 0x0028(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
//static_assert(alignof(BP_RT_Quality_Parameters_C_ExecuteUbergraph_BP_RT_Quality_Parameters) == 0x000008, "Wrong alignment on BP_RT_Quality_Parameters_C_ExecuteUbergraph_BP_RT_Quality_Parameters");
//static_assert(sizeof(BP_RT_Quality_Parameters_C_ExecuteUbergraph_BP_RT_Quality_Parameters) == 0x000030, "Wrong size on BP_RT_Quality_Parameters_C_ExecuteUbergraph_BP_RT_Quality_Parameters");
//static_assert(offsetof(BP_RT_Quality_Parameters_C_ExecuteUbergraph_BP_RT_Quality_Parameters, EntryPoint) == 0x000000, "Member 'BP_RT_Quality_Parameters_C_ExecuteUbergraph_BP_RT_Quality_Parameters::EntryPoint' has a wrong offset!");
//static_assert(offsetof(BP_RT_Quality_Parameters_C_ExecuteUbergraph_BP_RT_Quality_Parameters, K2Node_Event_Enable_DLSSD) == 0x000004, "Member 'BP_RT_Quality_Parameters_C_ExecuteUbergraph_BP_RT_Quality_Parameters::K2Node_Event_Enable_DLSSD' has a wrong offset!");
//static_assert(offsetof(BP_RT_Quality_Parameters_C_ExecuteUbergraph_BP_RT_Quality_Parameters, K2Node_Event_RTX_Preset) == 0x000005, "Member 'BP_RT_Quality_Parameters_C_ExecuteUbergraph_BP_RT_Quality_Parameters::K2Node_Event_RTX_Preset' has a wrong offset!");
//static_assert(offsetof(BP_RT_Quality_Parameters_C_ExecuteUbergraph_BP_RT_Quality_Parameters, K2Node_Event_AA_Method) == 0x000008, "Member 'BP_RT_Quality_Parameters_C_ExecuteUbergraph_BP_RT_Quality_Parameters::K2Node_Event_AA_Method' has a wrong offset!");
//static_assert(offsetof(BP_RT_Quality_Parameters_C_ExecuteUbergraph_BP_RT_Quality_Parameters, K2Node_Event_DLSS_Quality) == 0x000018, "Member 'BP_RT_Quality_Parameters_C_ExecuteUbergraph_BP_RT_Quality_Parameters::K2Node_Event_DLSS_Quality' has a wrong offset!");
//static_assert(offsetof(BP_RT_Quality_Parameters_C_ExecuteUbergraph_BP_RT_Quality_Parameters, K2Node_Event_Enable_Override_From_UI) == 0x000028, "Member 'BP_RT_Quality_Parameters_C_ExecuteUbergraph_BP_RT_Quality_Parameters::K2Node_Event_Enable_Override_From_UI' has a wrong offset!");

// Function BP_RT_Quality_Parameters.BP_RT_Quality_Parameters_C.Force Override RT Parameters  On Screen Res
// 0x0028 (0x0028 - 0x0000)
struct BP_RT_Quality_Parameters_C_Force_Override_RT_Parameters__On_Screen_Res final
{
public:
	class UGameUserSettings*                      CallFunc_GetGameUserSettings_ReturnValue;          // 0x0000(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UGameUserSettings*                      CallFunc_GetGameUserSettings_ReturnValue_1;        // 0x0008(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FIntPoint                              CallFunc_GetDesktopResolution_ReturnValue;         // 0x0010(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FIntPoint                              CallFunc_GetDesktopResolution_ReturnValue_1;       // 0x0018(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_LessEqual_IntInt_ReturnValue;             // 0x0020(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_LessEqual_IntInt_ReturnValue_1;           // 0x0021(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_LessEqual_IntInt_ReturnValue_2;           // 0x0022(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_LessEqual_IntInt_ReturnValue_3;           // 0x0023(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_BooleanAND_ReturnValue;                   // 0x0024(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_BooleanAND_ReturnValue_1;                 // 0x0025(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
//static_assert(alignof(BP_RT_Quality_Parameters_C_Force_Override_RT_Parameters__On_Screen_Res) == 0x000008, "Wrong alignment on BP_RT_Quality_Parameters_C_Force_Override_RT_Parameters__On_Screen_Res");
//static_assert(sizeof(BP_RT_Quality_Parameters_C_Force_Override_RT_Parameters__On_Screen_Res) == 0x000028, "Wrong size on BP_RT_Quality_Parameters_C_Force_Override_RT_Parameters__On_Screen_Res");
//static_assert(offsetof(BP_RT_Quality_Parameters_C_Force_Override_RT_Parameters__On_Screen_Res, CallFunc_GetGameUserSettings_ReturnValue) == 0x000000, "Member 'BP_RT_Quality_Parameters_C_Force_Override_RT_Parameters__On_Screen_Res::CallFunc_GetGameUserSettings_ReturnValue' has a wrong offset!");
//static_assert(offsetof(BP_RT_Quality_Parameters_C_Force_Override_RT_Parameters__On_Screen_Res, CallFunc_GetGameUserSettings_ReturnValue_1) == 0x000008, "Member 'BP_RT_Quality_Parameters_C_Force_Override_RT_Parameters__On_Screen_Res::CallFunc_GetGameUserSettings_ReturnValue_1' has a wrong offset!");
//static_assert(offsetof(BP_RT_Quality_Parameters_C_Force_Override_RT_Parameters__On_Screen_Res, CallFunc_GetDesktopResolution_ReturnValue) == 0x000010, "Member 'BP_RT_Quality_Parameters_C_Force_Override_RT_Parameters__On_Screen_Res::CallFunc_GetDesktopResolution_ReturnValue' has a wrong offset!");
//static_assert(offsetof(BP_RT_Quality_Parameters_C_Force_Override_RT_Parameters__On_Screen_Res, CallFunc_GetDesktopResolution_ReturnValue_1) == 0x000018, "Member 'BP_RT_Quality_Parameters_C_Force_Override_RT_Parameters__On_Screen_Res::CallFunc_GetDesktopResolution_ReturnValue_1' has a wrong offset!");
//static_assert(offsetof(BP_RT_Quality_Parameters_C_Force_Override_RT_Parameters__On_Screen_Res, CallFunc_LessEqual_IntInt_ReturnValue) == 0x000020, "Member 'BP_RT_Quality_Parameters_C_Force_Override_RT_Parameters__On_Screen_Res::CallFunc_LessEqual_IntInt_ReturnValue' has a wrong offset!");
//static_assert(offsetof(BP_RT_Quality_Parameters_C_Force_Override_RT_Parameters__On_Screen_Res, CallFunc_LessEqual_IntInt_ReturnValue_1) == 0x000021, "Member 'BP_RT_Quality_Parameters_C_Force_Override_RT_Parameters__On_Screen_Res::CallFunc_LessEqual_IntInt_ReturnValue_1' has a wrong offset!");
//static_assert(offsetof(BP_RT_Quality_Parameters_C_Force_Override_RT_Parameters__On_Screen_Res, CallFunc_LessEqual_IntInt_ReturnValue_2) == 0x000022, "Member 'BP_RT_Quality_Parameters_C_Force_Override_RT_Parameters__On_Screen_Res::CallFunc_LessEqual_IntInt_ReturnValue_2' has a wrong offset!");
//static_assert(offsetof(BP_RT_Quality_Parameters_C_Force_Override_RT_Parameters__On_Screen_Res, CallFunc_LessEqual_IntInt_ReturnValue_3) == 0x000023, "Member 'BP_RT_Quality_Parameters_C_Force_Override_RT_Parameters__On_Screen_Res::CallFunc_LessEqual_IntInt_ReturnValue_3' has a wrong offset!");
//static_assert(offsetof(BP_RT_Quality_Parameters_C_Force_Override_RT_Parameters__On_Screen_Res, CallFunc_BooleanAND_ReturnValue) == 0x000024, "Member 'BP_RT_Quality_Parameters_C_Force_Override_RT_Parameters__On_Screen_Res::CallFunc_BooleanAND_ReturnValue' has a wrong offset!");
//static_assert(offsetof(BP_RT_Quality_Parameters_C_Force_Override_RT_Parameters__On_Screen_Res, CallFunc_BooleanAND_ReturnValue_1) == 0x000025, "Member 'BP_RT_Quality_Parameters_C_Force_Override_RT_Parameters__On_Screen_Res::CallFunc_BooleanAND_ReturnValue_1' has a wrong offset!");

// Function BP_RT_Quality_Parameters.BP_RT_Quality_Parameters_C.Ini RT Parameter
// 0x1EF0 (0x1EF0 - 0x0000)
struct BP_RT_Quality_Parameters_C_Ini_RT_Parameter final
{
public:
	struct FRT_Parameters                         RT_Parameters;                                     // 0x0000(0x1ED0)(BlueprintVisible, BlueprintReadOnly, Parm, HasGetValueTypeHash)
	double                                        K2Node_VariableSet_RTX_Post_Process_Weight_WideningCast; // 0x1ED0(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        K2Node_VariableSet_RTX_Post_Process_Priority_WideningCast; // 0x1ED8(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         K2Node_VariableSet_UseRasterCaustics_NarrowingCast; // 0x1EE0(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
//static_assert(alignof(BP_RT_Quality_Parameters_C_Ini_RT_Parameter) == 0x000010, "Wrong alignment on BP_RT_Quality_Parameters_C_Ini_RT_Parameter");
//static_assert(sizeof(BP_RT_Quality_Parameters_C_Ini_RT_Parameter) == 0x001EF0, "Wrong size on BP_RT_Quality_Parameters_C_Ini_RT_Parameter");
//static_assert(offsetof(BP_RT_Quality_Parameters_C_Ini_RT_Parameter, RT_Parameters) == 0x000000, "Member 'BP_RT_Quality_Parameters_C_Ini_RT_Parameter::RT_Parameters' has a wrong offset!");
//static_assert(offsetof(BP_RT_Quality_Parameters_C_Ini_RT_Parameter, K2Node_VariableSet_RTX_Post_Process_Weight_WideningCast) == 0x001ED0, "Member 'BP_RT_Quality_Parameters_C_Ini_RT_Parameter::K2Node_VariableSet_RTX_Post_Process_Weight_WideningCast' has a wrong offset!");
//static_assert(offsetof(BP_RT_Quality_Parameters_C_Ini_RT_Parameter, K2Node_VariableSet_RTX_Post_Process_Priority_WideningCast) == 0x001ED8, "Member 'BP_RT_Quality_Parameters_C_Ini_RT_Parameter::K2Node_VariableSet_RTX_Post_Process_Priority_WideningCast' has a wrong offset!");
//static_assert(offsetof(BP_RT_Quality_Parameters_C_Ini_RT_Parameter, K2Node_VariableSet_UseRasterCaustics_NarrowingCast) == 0x001EE0, "Member 'BP_RT_Quality_Parameters_C_Ini_RT_Parameter::K2Node_VariableSet_UseRasterCaustics_NarrowingCast' has a wrong offset!");

// Function BP_RT_Quality_Parameters.BP_RT_Quality_Parameters_C.Override Light Source Radius And Specular Scale
// 0x0058 (0x0058 - 0x0000)
struct BP_RT_Quality_Parameters_C_Override_Light_Source_Radius_And_Specular_Scale final
{
public:
	int32                                         Temp_int_Array_Index_Variable;                     // 0x0000(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Temp_int_Loop_Counter_Variable;                    // 0x0004(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Add_IntInt_ReturnValue;                   // 0x0008(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Temp_int_Array_Index_Variable_1;                   // 0x000C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Temp_int_Loop_Counter_Variable_1;                  // 0x0010(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Add_IntInt_ReturnValue_1;                 // 0x0014(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	TArray<class ASpotLight*>                     CallFunc_GetAllActorsOfClass_OutActors;            // 0x0018(0x0010)(ReferenceParm)
	TArray<class APointLight*>                    CallFunc_GetAllActorsOfClass_OutActors_1;          // 0x0028(0x0010)(ReferenceParm)
	class ASpotLight*                             CallFunc_Array_Get_Item;                           // 0x0038(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class APointLight*                            CallFunc_Array_Get_Item_1;                         // 0x0040(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Array_Length_ReturnValue;                 // 0x0048(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Array_Length_ReturnValue_1;               // 0x004C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Less_IntInt_ReturnValue;                  // 0x0050(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Less_IntInt_ReturnValue_1;                // 0x0051(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
//static_assert(alignof(BP_RT_Quality_Parameters_C_Override_Light_Source_Radius_And_Specular_Scale) == 0x000008, "Wrong alignment on BP_RT_Quality_Parameters_C_Override_Light_Source_Radius_And_Specular_Scale");
//static_assert(sizeof(BP_RT_Quality_Parameters_C_Override_Light_Source_Radius_And_Specular_Scale) == 0x000058, "Wrong size on BP_RT_Quality_Parameters_C_Override_Light_Source_Radius_And_Specular_Scale");
//static_assert(offsetof(BP_RT_Quality_Parameters_C_Override_Light_Source_Radius_And_Specular_Scale, Temp_int_Array_Index_Variable) == 0x000000, "Member 'BP_RT_Quality_Parameters_C_Override_Light_Source_Radius_And_Specular_Scale::Temp_int_Array_Index_Variable' has a wrong offset!");
//static_assert(offsetof(BP_RT_Quality_Parameters_C_Override_Light_Source_Radius_And_Specular_Scale, Temp_int_Loop_Counter_Variable) == 0x000004, "Member 'BP_RT_Quality_Parameters_C_Override_Light_Source_Radius_And_Specular_Scale::Temp_int_Loop_Counter_Variable' has a wrong offset!");
//static_assert(offsetof(BP_RT_Quality_Parameters_C_Override_Light_Source_Radius_And_Specular_Scale, CallFunc_Add_IntInt_ReturnValue) == 0x000008, "Member 'BP_RT_Quality_Parameters_C_Override_Light_Source_Radius_And_Specular_Scale::CallFunc_Add_IntInt_ReturnValue' has a wrong offset!");
//static_assert(offsetof(BP_RT_Quality_Parameters_C_Override_Light_Source_Radius_And_Specular_Scale, Temp_int_Array_Index_Variable_1) == 0x00000C, "Member 'BP_RT_Quality_Parameters_C_Override_Light_Source_Radius_And_Specular_Scale::Temp_int_Array_Index_Variable_1' has a wrong offset!");
//static_assert(offsetof(BP_RT_Quality_Parameters_C_Override_Light_Source_Radius_And_Specular_Scale, Temp_int_Loop_Counter_Variable_1) == 0x000010, "Member 'BP_RT_Quality_Parameters_C_Override_Light_Source_Radius_And_Specular_Scale::Temp_int_Loop_Counter_Variable_1' has a wrong offset!");
//static_assert(offsetof(BP_RT_Quality_Parameters_C_Override_Light_Source_Radius_And_Specular_Scale, CallFunc_Add_IntInt_ReturnValue_1) == 0x000014, "Member 'BP_RT_Quality_Parameters_C_Override_Light_Source_Radius_And_Specular_Scale::CallFunc_Add_IntInt_ReturnValue_1' has a wrong offset!");
//static_assert(offsetof(BP_RT_Quality_Parameters_C_Override_Light_Source_Radius_And_Specular_Scale, CallFunc_GetAllActorsOfClass_OutActors) == 0x000018, "Member 'BP_RT_Quality_Parameters_C_Override_Light_Source_Radius_And_Specular_Scale::CallFunc_GetAllActorsOfClass_OutActors' has a wrong offset!");
//static_assert(offsetof(BP_RT_Quality_Parameters_C_Override_Light_Source_Radius_And_Specular_Scale, CallFunc_GetAllActorsOfClass_OutActors_1) == 0x000028, "Member 'BP_RT_Quality_Parameters_C_Override_Light_Source_Radius_And_Specular_Scale::CallFunc_GetAllActorsOfClass_OutActors_1' has a wrong offset!");
//static_assert(offsetof(BP_RT_Quality_Parameters_C_Override_Light_Source_Radius_And_Specular_Scale, CallFunc_Array_Get_Item) == 0x000038, "Member 'BP_RT_Quality_Parameters_C_Override_Light_Source_Radius_And_Specular_Scale::CallFunc_Array_Get_Item' has a wrong offset!");
//static_assert(offsetof(BP_RT_Quality_Parameters_C_Override_Light_Source_Radius_And_Specular_Scale, CallFunc_Array_Get_Item_1) == 0x000040, "Member 'BP_RT_Quality_Parameters_C_Override_Light_Source_Radius_And_Specular_Scale::CallFunc_Array_Get_Item_1' has a wrong offset!");
//static_assert(offsetof(BP_RT_Quality_Parameters_C_Override_Light_Source_Radius_And_Specular_Scale, CallFunc_Array_Length_ReturnValue) == 0x000048, "Member 'BP_RT_Quality_Parameters_C_Override_Light_Source_Radius_And_Specular_Scale::CallFunc_Array_Length_ReturnValue' has a wrong offset!");
//static_assert(offsetof(BP_RT_Quality_Parameters_C_Override_Light_Source_Radius_And_Specular_Scale, CallFunc_Array_Length_ReturnValue_1) == 0x00004C, "Member 'BP_RT_Quality_Parameters_C_Override_Light_Source_Radius_And_Specular_Scale::CallFunc_Array_Length_ReturnValue_1' has a wrong offset!");
//static_assert(offsetof(BP_RT_Quality_Parameters_C_Override_Light_Source_Radius_And_Specular_Scale, CallFunc_Less_IntInt_ReturnValue) == 0x000050, "Member 'BP_RT_Quality_Parameters_C_Override_Light_Source_Radius_And_Specular_Scale::CallFunc_Less_IntInt_ReturnValue' has a wrong offset!");
//static_assert(offsetof(BP_RT_Quality_Parameters_C_Override_Light_Source_Radius_And_Specular_Scale, CallFunc_Less_IntInt_ReturnValue_1) == 0x000051, "Member 'BP_RT_Quality_Parameters_C_Override_Light_Source_Radius_And_Specular_Scale::CallFunc_Less_IntInt_ReturnValue_1' has a wrong offset!");

// Function BP_RT_Quality_Parameters.BP_RT_Quality_Parameters_C.Override RT Parameters Based on Screenpercentage
// 0x0010 (0x0010 - 0x0000)
struct BP_RT_Quality_Parameters_C_Override_RT_Parameters_Based_on_Screenpercentage final
{
public:
	float                                         CallFunc_GetConsoleVariableFloatValue_ReturnValue; // 0x0000(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Greater_DoubleDouble_ReturnValue;         // 0x0004(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_5[0x3];                                        // 0x0005(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	double                                        CallFunc_Greater_DoubleDouble_A_WideningCast;      // 0x0008(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
//static_assert(alignof(BP_RT_Quality_Parameters_C_Override_RT_Parameters_Based_on_Screenpercentage) == 0x000008, "Wrong alignment on BP_RT_Quality_Parameters_C_Override_RT_Parameters_Based_on_Screenpercentage");
//static_assert(sizeof(BP_RT_Quality_Parameters_C_Override_RT_Parameters_Based_on_Screenpercentage) == 0x000010, "Wrong size on BP_RT_Quality_Parameters_C_Override_RT_Parameters_Based_on_Screenpercentage");
//static_assert(offsetof(BP_RT_Quality_Parameters_C_Override_RT_Parameters_Based_on_Screenpercentage, CallFunc_GetConsoleVariableFloatValue_ReturnValue) == 0x000000, "Member 'BP_RT_Quality_Parameters_C_Override_RT_Parameters_Based_on_Screenpercentage::CallFunc_GetConsoleVariableFloatValue_ReturnValue' has a wrong offset!");
//static_assert(offsetof(BP_RT_Quality_Parameters_C_Override_RT_Parameters_Based_on_Screenpercentage, CallFunc_Greater_DoubleDouble_ReturnValue) == 0x000004, "Member 'BP_RT_Quality_Parameters_C_Override_RT_Parameters_Based_on_Screenpercentage::CallFunc_Greater_DoubleDouble_ReturnValue' has a wrong offset!");
//static_assert(offsetof(BP_RT_Quality_Parameters_C_Override_RT_Parameters_Based_on_Screenpercentage, CallFunc_Greater_DoubleDouble_A_WideningCast) == 0x000008, "Member 'BP_RT_Quality_Parameters_C_Override_RT_Parameters_Based_on_Screenpercentage::CallFunc_Greater_DoubleDouble_A_WideningCast' has a wrong offset!");

// Function BP_RT_Quality_Parameters.BP_RT_Quality_Parameters_C.RT_Custom_Preset
// 0x1EF0 (0x1EF0 - 0x0000)
struct BP_RT_Quality_Parameters_C_RT_Custom_Preset final
{
public:
	struct FRT_Parameters                         RTX_Parameters;                                    // 0x0000(0x1ED0)(BlueprintVisible, BlueprintReadOnly, Parm, HasGetValueTypeHash)
	float                                         CallFunc_GetConsoleVariableFloatValue_ReturnValue; // 0x1ED0(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Greater_DoubleDouble_ReturnValue;         // 0x1ED4(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_1ED5[0x3];                                     // 0x1ED5(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         CallFunc_GetConsoleVariableFloatValue_ReturnValue_1; // 0x1ED8(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsEditor_ReturnValue;                     // 0x1EDC(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_EqualEqual_DoubleDouble_ReturnValue;      // 0x1EDD(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_1EDE[0x2];                                     // 0x1EDE(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	double                                        CallFunc_Greater_DoubleDouble_A_WideningCast;      // 0x1EE0(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_EqualEqual_DoubleDouble_A_WideningCast;   // 0x1EE8(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
//static_assert(alignof(BP_RT_Quality_Parameters_C_RT_Custom_Preset) == 0x000010, "Wrong alignment on BP_RT_Quality_Parameters_C_RT_Custom_Preset");
//static_assert(sizeof(BP_RT_Quality_Parameters_C_RT_Custom_Preset) == 0x001EF0, "Wrong size on BP_RT_Quality_Parameters_C_RT_Custom_Preset");
//static_assert(offsetof(BP_RT_Quality_Parameters_C_RT_Custom_Preset, RTX_Parameters) == 0x000000, "Member 'BP_RT_Quality_Parameters_C_RT_Custom_Preset::RTX_Parameters' has a wrong offset!");
//static_assert(offsetof(BP_RT_Quality_Parameters_C_RT_Custom_Preset, CallFunc_GetConsoleVariableFloatValue_ReturnValue) == 0x001ED0, "Member 'BP_RT_Quality_Parameters_C_RT_Custom_Preset::CallFunc_GetConsoleVariableFloatValue_ReturnValue' has a wrong offset!");
//static_assert(offsetof(BP_RT_Quality_Parameters_C_RT_Custom_Preset, CallFunc_Greater_DoubleDouble_ReturnValue) == 0x001ED4, "Member 'BP_RT_Quality_Parameters_C_RT_Custom_Preset::CallFunc_Greater_DoubleDouble_ReturnValue' has a wrong offset!");
//static_assert(offsetof(BP_RT_Quality_Parameters_C_RT_Custom_Preset, CallFunc_GetConsoleVariableFloatValue_ReturnValue_1) == 0x001ED8, "Member 'BP_RT_Quality_Parameters_C_RT_Custom_Preset::CallFunc_GetConsoleVariableFloatValue_ReturnValue_1' has a wrong offset!");
//static_assert(offsetof(BP_RT_Quality_Parameters_C_RT_Custom_Preset, CallFunc_IsEditor_ReturnValue) == 0x001EDC, "Member 'BP_RT_Quality_Parameters_C_RT_Custom_Preset::CallFunc_IsEditor_ReturnValue' has a wrong offset!");
//static_assert(offsetof(BP_RT_Quality_Parameters_C_RT_Custom_Preset, CallFunc_EqualEqual_DoubleDouble_ReturnValue) == 0x001EDD, "Member 'BP_RT_Quality_Parameters_C_RT_Custom_Preset::CallFunc_EqualEqual_DoubleDouble_ReturnValue' has a wrong offset!");
//static_assert(offsetof(BP_RT_Quality_Parameters_C_RT_Custom_Preset, CallFunc_Greater_DoubleDouble_A_WideningCast) == 0x001EE0, "Member 'BP_RT_Quality_Parameters_C_RT_Custom_Preset::CallFunc_Greater_DoubleDouble_A_WideningCast' has a wrong offset!");
//static_assert(offsetof(BP_RT_Quality_Parameters_C_RT_Custom_Preset, CallFunc_EqualEqual_DoubleDouble_A_WideningCast) == 0x001EE8, "Member 'BP_RT_Quality_Parameters_C_RT_Custom_Preset::CallFunc_EqualEqual_DoubleDouble_A_WideningCast' has a wrong offset!");

// Function BP_RT_Quality_Parameters.BP_RT_Quality_Parameters_C.RTX_Switch_DLSS_From_UI
// 0x0028 (0x0028 - 0x0000)
struct BP_RT_Quality_Parameters_C_RTX_Switch_DLSS_From_UI final
{
public:
	class FString                                 AA_Method;                                         // 0x0000(0x0010)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, HasGetValueTypeHash)
	class FString                                 DLSS_Quality;                                      // 0x0010(0x0010)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, HasGetValueTypeHash)
	bool                                          Enable_Override_From_UI;                           // 0x0020(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
//static_assert(alignof(BP_RT_Quality_Parameters_C_RTX_Switch_DLSS_From_UI) == 0x000008, "Wrong alignment on BP_RT_Quality_Parameters_C_RTX_Switch_DLSS_From_UI");
//static_assert(sizeof(BP_RT_Quality_Parameters_C_RTX_Switch_DLSS_From_UI) == 0x000028, "Wrong size on BP_RT_Quality_Parameters_C_RTX_Switch_DLSS_From_UI");
//static_assert(offsetof(BP_RT_Quality_Parameters_C_RTX_Switch_DLSS_From_UI, AA_Method) == 0x000000, "Member 'BP_RT_Quality_Parameters_C_RTX_Switch_DLSS_From_UI::AA_Method' has a wrong offset!");
//static_assert(offsetof(BP_RT_Quality_Parameters_C_RTX_Switch_DLSS_From_UI, DLSS_Quality) == 0x000010, "Member 'BP_RT_Quality_Parameters_C_RTX_Switch_DLSS_From_UI::DLSS_Quality' has a wrong offset!");
//static_assert(offsetof(BP_RT_Quality_Parameters_C_RTX_Switch_DLSS_From_UI, Enable_Override_From_UI) == 0x000020, "Member 'BP_RT_Quality_Parameters_C_RTX_Switch_DLSS_From_UI::Enable_Override_From_UI' has a wrong offset!");

// Function BP_RT_Quality_Parameters.BP_RT_Quality_Parameters_C.RTX_Switch_Preset_From_UI
// 0x0001 (0x0001 - 0x0000)
struct BP_RT_Quality_Parameters_C_RTX_Switch_Preset_From_UI final
{
public:
	Enum_RT_Quality_Preset                        RTX_Preset;                                        // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
//static_assert(alignof(BP_RT_Quality_Parameters_C_RTX_Switch_Preset_From_UI) == 0x000001, "Wrong alignment on BP_RT_Quality_Parameters_C_RTX_Switch_Preset_From_UI");
//static_assert(sizeof(BP_RT_Quality_Parameters_C_RTX_Switch_Preset_From_UI) == 0x000001, "Wrong size on BP_RT_Quality_Parameters_C_RTX_Switch_Preset_From_UI");
//static_assert(offsetof(BP_RT_Quality_Parameters_C_RTX_Switch_Preset_From_UI, RTX_Preset) == 0x000000, "Member 'BP_RT_Quality_Parameters_C_RTX_Switch_Preset_From_UI::RTX_Preset' has a wrong offset!");

}

