#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: b1MinusManaged

#include "Basic.hpp"

#include "b1_structs.hpp"
#include "b1MinusManaged_structs.hpp"
#include "EnhancedInput_structs.hpp"
#include "GSEMinusProtobufDB_structs.hpp"
#include "SlateCore_structs.hpp"
#include "Engine_structs.hpp"
#include "CoreUObject_structs.hpp"
#include "GameplayTags_structs.hpp"
#include "Calliope_structs.hpp"
#include "GSInput_structs.hpp"
#include "InputCore_structs.hpp"
#include "AkAudio_structs.hpp"
#include "DonAINavigation_structs.hpp"
#include "AIModule_structs.hpp"
#include "UMG_structs.hpp"
#include "Slate_structs.hpp"
#include "UnrealExtent_structs.hpp"


namespace SDK::Params
{

// Function b1-Managed.DispLib_EditorTestFXToolComp.TickComponentInCS
// 0x0004 (0x0004 - 0x0000)
struct DispLib_EditorTestFXToolComp_TickComponentInCS final
{
public:
	float                                         DeltaTime;                                         // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
//static_assert(alignof(DispLib_EditorTestFXToolComp_TickComponentInCS) == 0x000004, "Wrong alignment on DispLib_EditorTestFXToolComp_TickComponentInCS");
//static_assert(sizeof(DispLib_EditorTestFXToolComp_TickComponentInCS) == 0x000004, "Wrong size on DispLib_EditorTestFXToolComp_TickComponentInCS");
//static_assert(offsetof(DispLib_EditorTestFXToolComp_TickComponentInCS, DeltaTime) == 0x000000, "Member 'DispLib_EditorTestFXToolComp_TickComponentInCS::DeltaTime' has a wrong offset!");

// Function b1-Managed.DispLib_EditorTestFXToolComp.EndPlayInCS
// 0x0001 (0x0001 - 0x0000)
struct DispLib_EditorTestFXToolComp_EndPlayInCS final
{
public:
	EEndPlayReason                                EndPlayReason;                                     // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
//static_assert(alignof(DispLib_EditorTestFXToolComp_EndPlayInCS) == 0x000001, "Wrong alignment on DispLib_EditorTestFXToolComp_EndPlayInCS");
//static_assert(sizeof(DispLib_EditorTestFXToolComp_EndPlayInCS) == 0x000001, "Wrong size on DispLib_EditorTestFXToolComp_EndPlayInCS");
//static_assert(offsetof(DispLib_EditorTestFXToolComp_EndPlayInCS, EndPlayReason) == 0x000000, "Member 'DispLib_EditorTestFXToolComp_EndPlayInCS::EndPlayReason' has a wrong offset!");

// Function b1-Managed.BANS_GSBase.GSNotifyDebugPostBeginCS
// 0x0048 (0x0048 - 0x0000)
struct BANS_GSBase_GSNotifyDebugPostBeginCS final
{
public:
	struct FUStGSNotifyParam                      NotifyParam;                                       // 0x0000(0x0040)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
	int32                                         ReturnValue;                                       // 0x0040(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
//static_assert(alignof(BANS_GSBase_GSNotifyDebugPostBeginCS) == 0x000008, "Wrong alignment on BANS_GSBase_GSNotifyDebugPostBeginCS");
//static_assert(sizeof(BANS_GSBase_GSNotifyDebugPostBeginCS) == 0x000048, "Wrong size on BANS_GSBase_GSNotifyDebugPostBeginCS");
//static_assert(offsetof(BANS_GSBase_GSNotifyDebugPostBeginCS, NotifyParam) == 0x000000, "Member 'BANS_GSBase_GSNotifyDebugPostBeginCS::NotifyParam' has a wrong offset!");
//static_assert(offsetof(BANS_GSBase_GSNotifyDebugPostBeginCS, ReturnValue) == 0x000040, "Member 'BANS_GSBase_GSNotifyDebugPostBeginCS::ReturnValue' has a wrong offset!");

// Function b1-Managed.BANS_GSBase.GSNotifyDebugPostTickCS
// 0x0048 (0x0048 - 0x0000)
struct BANS_GSBase_GSNotifyDebugPostTickCS final
{
public:
	struct FUStGSNotifyParam                      NotifyParam;                                       // 0x0000(0x0040)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
	int32                                         ReturnValue;                                       // 0x0040(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
//static_assert(alignof(BANS_GSBase_GSNotifyDebugPostTickCS) == 0x000008, "Wrong alignment on BANS_GSBase_GSNotifyDebugPostTickCS");
//static_assert(sizeof(BANS_GSBase_GSNotifyDebugPostTickCS) == 0x000048, "Wrong size on BANS_GSBase_GSNotifyDebugPostTickCS");
//static_assert(offsetof(BANS_GSBase_GSNotifyDebugPostTickCS, NotifyParam) == 0x000000, "Member 'BANS_GSBase_GSNotifyDebugPostTickCS::NotifyParam' has a wrong offset!");
//static_assert(offsetof(BANS_GSBase_GSNotifyDebugPostTickCS, ReturnValue) == 0x000040, "Member 'BANS_GSBase_GSNotifyDebugPostTickCS::ReturnValue' has a wrong offset!");

// Function b1-Managed.BANS_GSBase.GSNotifyDebugPreBeginCS
// 0x0048 (0x0048 - 0x0000)
struct BANS_GSBase_GSNotifyDebugPreBeginCS final
{
public:
	struct FUStGSNotifyParam                      NotifyParam;                                       // 0x0000(0x0040)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
	int32                                         ReturnValue;                                       // 0x0040(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
//static_assert(alignof(BANS_GSBase_GSNotifyDebugPreBeginCS) == 0x000008, "Wrong alignment on BANS_GSBase_GSNotifyDebugPreBeginCS");
//static_assert(sizeof(BANS_GSBase_GSNotifyDebugPreBeginCS) == 0x000048, "Wrong size on BANS_GSBase_GSNotifyDebugPreBeginCS");
//static_assert(offsetof(BANS_GSBase_GSNotifyDebugPreBeginCS, NotifyParam) == 0x000000, "Member 'BANS_GSBase_GSNotifyDebugPreBeginCS::NotifyParam' has a wrong offset!");
//static_assert(offsetof(BANS_GSBase_GSNotifyDebugPreBeginCS, ReturnValue) == 0x000040, "Member 'BANS_GSBase_GSNotifyDebugPreBeginCS::ReturnValue' has a wrong offset!");

// Function b1-Managed.BANS_GSBase.GSNotifyDebugPreTickCS
// 0x0048 (0x0048 - 0x0000)
struct BANS_GSBase_GSNotifyDebugPreTickCS final
{
public:
	struct FUStGSNotifyParam                      NotifyParam;                                       // 0x0000(0x0040)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
	int32                                         ReturnValue;                                       // 0x0040(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
//static_assert(alignof(BANS_GSBase_GSNotifyDebugPreTickCS) == 0x000008, "Wrong alignment on BANS_GSBase_GSNotifyDebugPreTickCS");
//static_assert(sizeof(BANS_GSBase_GSNotifyDebugPreTickCS) == 0x000048, "Wrong size on BANS_GSBase_GSNotifyDebugPreTickCS");
//static_assert(offsetof(BANS_GSBase_GSNotifyDebugPreTickCS, NotifyParam) == 0x000000, "Member 'BANS_GSBase_GSNotifyDebugPreTickCS::NotifyParam' has a wrong offset!");
//static_assert(offsetof(BANS_GSBase_GSNotifyDebugPreTickCS, ReturnValue) == 0x000040, "Member 'BANS_GSBase_GSNotifyDebugPreTickCS::ReturnValue' has a wrong offset!");

// Function b1-Managed.BANS_GSBase.GSNotifyDebugPostEndCS
// 0x0048 (0x0048 - 0x0000)
struct BANS_GSBase_GSNotifyDebugPostEndCS final
{
public:
	struct FUStGSNotifyParam                      NotifyParam;                                       // 0x0000(0x0040)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
	int32                                         ReturnValue;                                       // 0x0040(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
//static_assert(alignof(BANS_GSBase_GSNotifyDebugPostEndCS) == 0x000008, "Wrong alignment on BANS_GSBase_GSNotifyDebugPostEndCS");
//static_assert(sizeof(BANS_GSBase_GSNotifyDebugPostEndCS) == 0x000048, "Wrong size on BANS_GSBase_GSNotifyDebugPostEndCS");
//static_assert(offsetof(BANS_GSBase_GSNotifyDebugPostEndCS, NotifyParam) == 0x000000, "Member 'BANS_GSBase_GSNotifyDebugPostEndCS::NotifyParam' has a wrong offset!");
//static_assert(offsetof(BANS_GSBase_GSNotifyDebugPostEndCS, ReturnValue) == 0x000040, "Member 'BANS_GSBase_GSNotifyDebugPostEndCS::ReturnValue' has a wrong offset!");

// Function b1-Managed.BANS_GSBase.GSNotifyDebugPreEndCS
// 0x0048 (0x0048 - 0x0000)
struct BANS_GSBase_GSNotifyDebugPreEndCS final
{
public:
	struct FUStGSNotifyParam                      NotifyParam;                                       // 0x0000(0x0040)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
	int32                                         ReturnValue;                                       // 0x0040(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
//static_assert(alignof(BANS_GSBase_GSNotifyDebugPreEndCS) == 0x000008, "Wrong alignment on BANS_GSBase_GSNotifyDebugPreEndCS");
//static_assert(sizeof(BANS_GSBase_GSNotifyDebugPreEndCS) == 0x000048, "Wrong size on BANS_GSBase_GSNotifyDebugPreEndCS");
//static_assert(offsetof(BANS_GSBase_GSNotifyDebugPreEndCS, NotifyParam) == 0x000000, "Member 'BANS_GSBase_GSNotifyDebugPreEndCS::NotifyParam' has a wrong offset!");
//static_assert(offsetof(BANS_GSBase_GSNotifyDebugPreEndCS, ReturnValue) == 0x000040, "Member 'BANS_GSBase_GSNotifyDebugPreEndCS::ReturnValue' has a wrong offset!");

// Function b1-Managed.BANS_GSBase.GetSoftReferences
// 0x0010 (0x0010 - 0x0000)
struct BANS_GSBase_GetSoftReferences final
{
public:
	TArray<struct FSoftObjectPath>                ReturnValue;                                       // 0x0000(0x0010)(Parm, OutParm, ReturnParm)
};
//static_assert(alignof(BANS_GSBase_GetSoftReferences) == 0x000008, "Wrong alignment on BANS_GSBase_GetSoftReferences");
//static_assert(sizeof(BANS_GSBase_GetSoftReferences) == 0x000010, "Wrong size on BANS_GSBase_GetSoftReferences");
//static_assert(offsetof(BANS_GSBase_GetSoftReferences, ReturnValue) == 0x000000, "Member 'BANS_GSBase_GetSoftReferences::ReturnValue' has a wrong offset!");

// Function b1-Managed.BANS_GSBase.GSValidateInputCS
// 0x0008 (0x0008 - 0x0000)
struct BANS_GSBase_GSValidateInputCS final
{
public:
	class AActor*                                 Actor;                                             // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
//static_assert(alignof(BANS_GSBase_GSValidateInputCS) == 0x000008, "Wrong alignment on BANS_GSBase_GSValidateInputCS");
//static_assert(sizeof(BANS_GSBase_GSValidateInputCS) == 0x000008, "Wrong size on BANS_GSBase_GSValidateInputCS");
//static_assert(offsetof(BANS_GSBase_GSValidateInputCS, Actor) == 0x000000, "Member 'BANS_GSBase_GSValidateInputCS::Actor' has a wrong offset!");

// Function b1-Managed.BANS_GSTimedPlayNiagaraFX.GetSoftReferences
// 0x0010 (0x0010 - 0x0000)
struct BANS_GSTimedPlayNiagaraFX_GetSoftReferences final
{
public:
	TArray<struct FSoftObjectPath>                ReturnValue;                                       // 0x0000(0x0010)(Parm, OutParm, ReturnParm)
};
//static_assert(alignof(BANS_GSTimedPlayNiagaraFX_GetSoftReferences) == 0x000008, "Wrong alignment on BANS_GSTimedPlayNiagaraFX_GetSoftReferences");
//static_assert(sizeof(BANS_GSTimedPlayNiagaraFX_GetSoftReferences) == 0x000010, "Wrong size on BANS_GSTimedPlayNiagaraFX_GetSoftReferences");
//static_assert(offsetof(BANS_GSTimedPlayNiagaraFX_GetSoftReferences, ReturnValue) == 0x000000, "Member 'BANS_GSTimedPlayNiagaraFX_GetSoftReferences::ReturnValue' has a wrong offset!");

// Function b1-Managed.BANS_GSTimedPlayNiagaraFX.GSNotifyBeginCS
// 0x0048 (0x0048 - 0x0000)
struct BANS_GSTimedPlayNiagaraFX_GSNotifyBeginCS final
{
public:
	struct FUStGSNotifyParam                      NotifyParam;                                       // 0x0000(0x0040)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
	float                                         TotalDuration;                                     // 0x0040(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
//static_assert(alignof(BANS_GSTimedPlayNiagaraFX_GSNotifyBeginCS) == 0x000008, "Wrong alignment on BANS_GSTimedPlayNiagaraFX_GSNotifyBeginCS");
//static_assert(sizeof(BANS_GSTimedPlayNiagaraFX_GSNotifyBeginCS) == 0x000048, "Wrong size on BANS_GSTimedPlayNiagaraFX_GSNotifyBeginCS");
//static_assert(offsetof(BANS_GSTimedPlayNiagaraFX_GSNotifyBeginCS, NotifyParam) == 0x000000, "Member 'BANS_GSTimedPlayNiagaraFX_GSNotifyBeginCS::NotifyParam' has a wrong offset!");
//static_assert(offsetof(BANS_GSTimedPlayNiagaraFX_GSNotifyBeginCS, TotalDuration) == 0x000040, "Member 'BANS_GSTimedPlayNiagaraFX_GSNotifyBeginCS::TotalDuration' has a wrong offset!");

// Function b1-Managed.BANS_GSTimedPlayNiagaraFX.GSNotifyEndCS
// 0x0040 (0x0040 - 0x0000)
struct BANS_GSTimedPlayNiagaraFX_GSNotifyEndCS final
{
public:
	struct FUStGSNotifyParam                      NotifyParam;                                       // 0x0000(0x0040)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
//static_assert(alignof(BANS_GSTimedPlayNiagaraFX_GSNotifyEndCS) == 0x000008, "Wrong alignment on BANS_GSTimedPlayNiagaraFX_GSNotifyEndCS");
//static_assert(sizeof(BANS_GSTimedPlayNiagaraFX_GSNotifyEndCS) == 0x000040, "Wrong size on BANS_GSTimedPlayNiagaraFX_GSNotifyEndCS");
//static_assert(offsetof(BANS_GSTimedPlayNiagaraFX_GSNotifyEndCS, NotifyParam) == 0x000000, "Member 'BANS_GSTimedPlayNiagaraFX_GSNotifyEndCS::NotifyParam' has a wrong offset!");

// Function b1-Managed.BANS_GSTimedPlayNiagaraFX_WithCondition.GSNotifyBeginCS
// 0x0048 (0x0048 - 0x0000)
struct BANS_GSTimedPlayNiagaraFX_WithCondition_GSNotifyBeginCS final
{
public:
	struct FUStGSNotifyParam                      NotifyParam;                                       // 0x0000(0x0040)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
	float                                         TotalDuration;                                     // 0x0040(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
//static_assert(alignof(BANS_GSTimedPlayNiagaraFX_WithCondition_GSNotifyBeginCS) == 0x000008, "Wrong alignment on BANS_GSTimedPlayNiagaraFX_WithCondition_GSNotifyBeginCS");
//static_assert(sizeof(BANS_GSTimedPlayNiagaraFX_WithCondition_GSNotifyBeginCS) == 0x000048, "Wrong size on BANS_GSTimedPlayNiagaraFX_WithCondition_GSNotifyBeginCS");
//static_assert(offsetof(BANS_GSTimedPlayNiagaraFX_WithCondition_GSNotifyBeginCS, NotifyParam) == 0x000000, "Member 'BANS_GSTimedPlayNiagaraFX_WithCondition_GSNotifyBeginCS::NotifyParam' has a wrong offset!");
//static_assert(offsetof(BANS_GSTimedPlayNiagaraFX_WithCondition_GSNotifyBeginCS, TotalDuration) == 0x000040, "Member 'BANS_GSTimedPlayNiagaraFX_WithCondition_GSNotifyBeginCS::TotalDuration' has a wrong offset!");

// Function b1-Managed.BANS_GSTimedPlayNiagaraFX_WithCondition.GSNotifyEndCS
// 0x0040 (0x0040 - 0x0000)
struct BANS_GSTimedPlayNiagaraFX_WithCondition_GSNotifyEndCS final
{
public:
	struct FUStGSNotifyParam                      NotifyParam;                                       // 0x0000(0x0040)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
//static_assert(alignof(BANS_GSTimedPlayNiagaraFX_WithCondition_GSNotifyEndCS) == 0x000008, "Wrong alignment on BANS_GSTimedPlayNiagaraFX_WithCondition_GSNotifyEndCS");
//static_assert(sizeof(BANS_GSTimedPlayNiagaraFX_WithCondition_GSNotifyEndCS) == 0x000040, "Wrong size on BANS_GSTimedPlayNiagaraFX_WithCondition_GSNotifyEndCS");
//static_assert(offsetof(BANS_GSTimedPlayNiagaraFX_WithCondition_GSNotifyEndCS, NotifyParam) == 0x000000, "Member 'BANS_GSTimedPlayNiagaraFX_WithCondition_GSNotifyEndCS::NotifyParam' has a wrong offset!");

// Function b1-Managed.DispLib_EditorTreeLODTools.ReceiveTick
// 0x0004 (0x0004 - 0x0000)
struct DispLib_EditorTreeLODTools_ReceiveTick final
{
public:
	float                                         DeltaSeconds;                                      // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
//static_assert(alignof(DispLib_EditorTreeLODTools_ReceiveTick) == 0x000004, "Wrong alignment on DispLib_EditorTreeLODTools_ReceiveTick");
//static_assert(sizeof(DispLib_EditorTreeLODTools_ReceiveTick) == 0x000004, "Wrong size on DispLib_EditorTreeLODTools_ReceiveTick");
//static_assert(offsetof(DispLib_EditorTreeLODTools_ReceiveTick, DeltaSeconds) == 0x000000, "Member 'DispLib_EditorTreeLODTools_ReceiveTick::DeltaSeconds' has a wrong offset!");

// Function b1-Managed.DispLib_EditorTreeLODTools.SetAllTreeActorVisibility
// 0x0001 (0x0001 - 0x0000)
struct DispLib_EditorTreeLODTools_SetAllTreeActorVisibility final
{
public:
	uint8                                         Visibility : 1;                                    // 0x0000(0x0001)(BitIndex: 0x00, PropSize: 0x0001 (Parm, NoDestructor, HasGetValueTypeHash))
};
//static_assert(alignof(DispLib_EditorTreeLODTools_SetAllTreeActorVisibility) == 0x000001, "Wrong alignment on DispLib_EditorTreeLODTools_SetAllTreeActorVisibility");
//static_assert(sizeof(DispLib_EditorTreeLODTools_SetAllTreeActorVisibility) == 0x000001, "Wrong size on DispLib_EditorTreeLODTools_SetAllTreeActorVisibility");

// Function b1-Managed.BGUFuncLibInput.OpenAcceptNavigationAction
// 0x0001 (0x0001 - 0x0000)
struct BGUFuncLibInput_OpenAcceptNavigationAction final
{
public:
	uint8                                         bOpen : 1;                                         // 0x0000(0x0001)(BitIndex: 0x00, PropSize: 0x0001 (Parm, NoDestructor, HasGetValueTypeHash))
};
//static_assert(alignof(BGUFuncLibInput_OpenAcceptNavigationAction) == 0x000001, "Wrong alignment on BGUFuncLibInput_OpenAcceptNavigationAction");
//static_assert(sizeof(BGUFuncLibInput_OpenAcceptNavigationAction) == 0x000001, "Wrong size on BGUFuncLibInput_OpenAcceptNavigationAction");

// Function b1-Managed.BGUFuncLibInput.SetSuperUserInputMode
// 0x0010 (0x0010 - 0x0000)
struct BGUFuncLibInput_SetSuperUserInputMode final
{
public:
	class UObject*                                WorldContext;                                      // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         IsOpen : 1;                                        // 0x0008(0x0001)(BitIndex: 0x00, PropSize: 0x0001 (Parm, NoDestructor, HasGetValueTypeHash))
	EGSInputModeChangeReason                      ChangeReason;                                      // 0x0009(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
//static_assert(alignof(BGUFuncLibInput_SetSuperUserInputMode) == 0x000008, "Wrong alignment on BGUFuncLibInput_SetSuperUserInputMode");
//static_assert(sizeof(BGUFuncLibInput_SetSuperUserInputMode) == 0x000010, "Wrong size on BGUFuncLibInput_SetSuperUserInputMode");
//static_assert(offsetof(BGUFuncLibInput_SetSuperUserInputMode, WorldContext) == 0x000000, "Member 'BGUFuncLibInput_SetSuperUserInputMode::WorldContext' has a wrong offset!");
//static_assert(offsetof(BGUFuncLibInput_SetSuperUserInputMode, ChangeReason) == 0x000009, "Member 'BGUFuncLibInput_SetSuperUserInputMode::ChangeReason' has a wrong offset!");

// Function b1-Managed.BGUFuncLibInput.IsGamepadType
// 0x0001 (0x0001 - 0x0000)
struct BGUFuncLibInput_IsGamepadType final
{
public:
	uint8                                         ReturnValue : 1;                                   // 0x0000(0x0001)(BitIndex: 0x00, PropSize: 0x0001 (Parm, OutParm, ReturnParm, NoDestructor, HasGetValueTypeHash))
};
//static_assert(alignof(BGUFuncLibInput_IsGamepadType) == 0x000001, "Wrong alignment on BGUFuncLibInput_IsGamepadType");
//static_assert(sizeof(BGUFuncLibInput_IsGamepadType) == 0x000001, "Wrong size on BGUFuncLibInput_IsGamepadType");

// Function b1-Managed.BED_CalliopeNodeBae.GetBranchGraphToEditInCS
// 0x0018 (0x0018 - 0x0000)
struct BED_CalliopeNodeBae_GetBranchGraphToEditInCS final
{
public:
	class FString                                 OutBranchGraphIdentifier;                          // 0x0000(0x0010)(Parm, OutParm, ZeroConstructor, HasGetValueTypeHash)
	uint8                                         ReturnValue : 1;                                   // 0x0010(0x0001)(BitIndex: 0x00, PropSize: 0x0001 (Parm, OutParm, ReturnParm, NoDestructor, HasGetValueTypeHash))
};
//static_assert(alignof(BED_CalliopeNodeBae_GetBranchGraphToEditInCS) == 0x000008, "Wrong alignment on BED_CalliopeNodeBae_GetBranchGraphToEditInCS");
//static_assert(sizeof(BED_CalliopeNodeBae_GetBranchGraphToEditInCS) == 0x000018, "Wrong size on BED_CalliopeNodeBae_GetBranchGraphToEditInCS");
//static_assert(offsetof(BED_CalliopeNodeBae_GetBranchGraphToEditInCS, OutBranchGraphIdentifier) == 0x000000, "Member 'BED_CalliopeNodeBae_GetBranchGraphToEditInCS::OutBranchGraphIdentifier' has a wrong offset!");

// Function b1-Managed.BED_CalliopeNodeBae.IsBranchGraphNode
// 0x0001 (0x0001 - 0x0000)
struct BED_CalliopeNodeBae_IsBranchGraphNode final
{
public:
	uint8                                         ReturnValue : 1;                                   // 0x0000(0x0001)(BitIndex: 0x00, PropSize: 0x0001 (Parm, OutParm, ReturnParm, NoDestructor, HasGetValueTypeHash))
};
//static_assert(alignof(BED_CalliopeNodeBae_IsBranchGraphNode) == 0x000001, "Wrong alignment on BED_CalliopeNodeBae_IsBranchGraphNode");
//static_assert(sizeof(BED_CalliopeNodeBae_IsBranchGraphNode) == 0x000001, "Wrong size on BED_CalliopeNodeBae_IsBranchGraphNode");

// Function b1-Managed.BED_CalliopeNodeBae.IsSupportViewType
// 0x0002 (0x0002 - 0x0000)
struct BED_CalliopeNodeBae_IsSupportViewType final
{
public:
	ECalliopeViewType                             InViewType;                                        // 0x0000(0x0001)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         ReturnValue : 1;                                   // 0x0001(0x0001)(BitIndex: 0x00, PropSize: 0x0001 (Parm, OutParm, ReturnParm, NoDestructor, HasGetValueTypeHash))
};
//static_assert(alignof(BED_CalliopeNodeBae_IsSupportViewType) == 0x000001, "Wrong alignment on BED_CalliopeNodeBae_IsSupportViewType");
//static_assert(sizeof(BED_CalliopeNodeBae_IsSupportViewType) == 0x000002, "Wrong size on BED_CalliopeNodeBae_IsSupportViewType");
//static_assert(offsetof(BED_CalliopeNodeBae_IsSupportViewType, InViewType) == 0x000000, "Member 'BED_CalliopeNodeBae_IsSupportViewType::InViewType' has a wrong offset!");

// Function b1-Managed.BED_CalliopeNodeBae.GetGuid
// 0x0010 (0x0010 - 0x0000)
struct BED_CalliopeNodeBae_GetGuid final
{
public:
	struct FCalliopeGuid                          ReturnValue;                                       // 0x0000(0x0010)(Parm, OutParm, ReturnParm, NoDestructor, HasGetValueTypeHash)
};
//static_assert(alignof(BED_CalliopeNodeBae_GetGuid) == 0x000004, "Wrong alignment on BED_CalliopeNodeBae_GetGuid");
//static_assert(sizeof(BED_CalliopeNodeBae_GetGuid) == 0x000010, "Wrong size on BED_CalliopeNodeBae_GetGuid");
//static_assert(offsetof(BED_CalliopeNodeBae_GetGuid, ReturnValue) == 0x000000, "Member 'BED_CalliopeNodeBae_GetGuid::ReturnValue' has a wrong offset!");

// Function b1-Managed.BED_CalliopeNodeBae.GetActorGuidOptions
// 0x0028 (0x0028 - 0x0000)
struct BED_CalliopeNodeBae_GetActorGuidOptions final
{
public:
	class FString                                 PropertyName;                                      // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash)
	TArray<struct FActorGuidOption>               OutOptions;                                        // 0x0010(0x0010)(Parm, OutParm)
	int32                                         ReturnValue;                                       // 0x0020(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
//static_assert(alignof(BED_CalliopeNodeBae_GetActorGuidOptions) == 0x000008, "Wrong alignment on BED_CalliopeNodeBae_GetActorGuidOptions");
//static_assert(sizeof(BED_CalliopeNodeBae_GetActorGuidOptions) == 0x000028, "Wrong size on BED_CalliopeNodeBae_GetActorGuidOptions");
//static_assert(offsetof(BED_CalliopeNodeBae_GetActorGuidOptions, PropertyName) == 0x000000, "Member 'BED_CalliopeNodeBae_GetActorGuidOptions::PropertyName' has a wrong offset!");
//static_assert(offsetof(BED_CalliopeNodeBae_GetActorGuidOptions, OutOptions) == 0x000010, "Member 'BED_CalliopeNodeBae_GetActorGuidOptions::OutOptions' has a wrong offset!");
//static_assert(offsetof(BED_CalliopeNodeBae_GetActorGuidOptions, ReturnValue) == 0x000020, "Member 'BED_CalliopeNodeBae_GetActorGuidOptions::ReturnValue' has a wrong offset!");

// Function b1-Managed.BED_CalliopeNodeBae.CanManageStates
// 0x0001 (0x0001 - 0x0000)
struct BED_CalliopeNodeBae_CanManageStates final
{
public:
	uint8                                         ReturnValue : 1;                                   // 0x0000(0x0001)(BitIndex: 0x00, PropSize: 0x0001 (Parm, OutParm, ReturnParm, NoDestructor, HasGetValueTypeHash))
};
//static_assert(alignof(BED_CalliopeNodeBae_CanManageStates) == 0x000001, "Wrong alignment on BED_CalliopeNodeBae_CanManageStates");
//static_assert(sizeof(BED_CalliopeNodeBae_CanManageStates) == 0x000001, "Wrong size on BED_CalliopeNodeBae_CanManageStates");

// Function b1-Managed.BED_CalliopeNodeBae.GetActorGuid
// 0x0020 (0x0020 - 0x0000)
struct BED_CalliopeNodeBae_GetActorGuid final
{
public:
	class AActor*                                 InActor;                                           // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class FString                                 OutActorGuid;                                      // 0x0008(0x0010)(Parm, OutParm, ZeroConstructor, HasGetValueTypeHash)
	uint8                                         ReturnValue : 1;                                   // 0x0018(0x0001)(BitIndex: 0x00, PropSize: 0x0001 (Parm, OutParm, ReturnParm, NoDestructor, HasGetValueTypeHash))
};
//static_assert(alignof(BED_CalliopeNodeBae_GetActorGuid) == 0x000008, "Wrong alignment on BED_CalliopeNodeBae_GetActorGuid");
//static_assert(sizeof(BED_CalliopeNodeBae_GetActorGuid) == 0x000020, "Wrong size on BED_CalliopeNodeBae_GetActorGuid");
//static_assert(offsetof(BED_CalliopeNodeBae_GetActorGuid, InActor) == 0x000000, "Member 'BED_CalliopeNodeBae_GetActorGuid::InActor' has a wrong offset!");
//static_assert(offsetof(BED_CalliopeNodeBae_GetActorGuid, OutActorGuid) == 0x000008, "Member 'BED_CalliopeNodeBae_GetActorGuid::OutActorGuid' has a wrong offset!");

// Function b1-Managed.BED_MovieNode.IsSupportViewType
// 0x0002 (0x0002 - 0x0000)
struct BED_MovieNode_IsSupportViewType final
{
public:
	ECalliopeViewType                             InViewType;                                        // 0x0000(0x0001)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         ReturnValue : 1;                                   // 0x0001(0x0001)(BitIndex: 0x00, PropSize: 0x0001 (Parm, OutParm, ReturnParm, NoDestructor, HasGetValueTypeHash))
};
//static_assert(alignof(BED_MovieNode_IsSupportViewType) == 0x000001, "Wrong alignment on BED_MovieNode_IsSupportViewType");
//static_assert(sizeof(BED_MovieNode_IsSupportViewType) == 0x000002, "Wrong size on BED_MovieNode_IsSupportViewType");
//static_assert(offsetof(BED_MovieNode_IsSupportViewType, InViewType) == 0x000000, "Member 'BED_MovieNode_IsSupportViewType::InViewType' has a wrong offset!");

// Function b1-Managed.BED_MovieNode_PreRoll.GetNodeDescriptionInCS
// 0x0010 (0x0010 - 0x0000)
struct BED_MovieNode_PreRoll_GetNodeDescriptionInCS final
{
public:
	class FString                                 ReturnValue;                                       // 0x0000(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash)
};
//static_assert(alignof(BED_MovieNode_PreRoll_GetNodeDescriptionInCS) == 0x000008, "Wrong alignment on BED_MovieNode_PreRoll_GetNodeDescriptionInCS");
//static_assert(sizeof(BED_MovieNode_PreRoll_GetNodeDescriptionInCS) == 0x000010, "Wrong size on BED_MovieNode_PreRoll_GetNodeDescriptionInCS");
//static_assert(offsetof(BED_MovieNode_PreRoll_GetNodeDescriptionInCS, ReturnValue) == 0x000000, "Member 'BED_MovieNode_PreRoll_GetNodeDescriptionInCS::ReturnValue' has a wrong offset!");

// Function b1-Managed.QuestOverlapCompFunctionBinder.OnCollisionBeginOverlap
// 0x0108 (0x0108 - 0x0000)
struct QuestOverlapCompFunctionBinder_OnCollisionBeginOverlap final
{
public:
	class UPrimitiveComponent*                    OverlappedComponent;                               // 0x0000(0x0008)(ExportObject, Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class AActor*                                 OtherActor;                                        // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UPrimitiveComponent*                    OtherComp;                                         // 0x0010(0x0008)(ExportObject, Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         OtherBodyIndex;                                    // 0x0018(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         bFromSweep : 1;                                    // 0x001C(0x0001)(BitIndex: 0x00, PropSize: 0x0001 (Parm, NoDestructor, HasGetValueTypeHash))
	uint8                                         Pad_1D[0x3];                                       // 0x001D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FHitResult                             SweepResult;                                       // 0x0020(0x00E8)(Parm, IsPlainOldData, NoDestructor)
};
//static_assert(alignof(QuestOverlapCompFunctionBinder_OnCollisionBeginOverlap) == 0x000008, "Wrong alignment on QuestOverlapCompFunctionBinder_OnCollisionBeginOverlap");
//static_assert(sizeof(QuestOverlapCompFunctionBinder_OnCollisionBeginOverlap) == 0x000108, "Wrong size on QuestOverlapCompFunctionBinder_OnCollisionBeginOverlap");
//static_assert(offsetof(QuestOverlapCompFunctionBinder_OnCollisionBeginOverlap, OverlappedComponent) == 0x000000, "Member 'QuestOverlapCompFunctionBinder_OnCollisionBeginOverlap::OverlappedComponent' has a wrong offset!");
//static_assert(offsetof(QuestOverlapCompFunctionBinder_OnCollisionBeginOverlap, OtherActor) == 0x000008, "Member 'QuestOverlapCompFunctionBinder_OnCollisionBeginOverlap::OtherActor' has a wrong offset!");
//static_assert(offsetof(QuestOverlapCompFunctionBinder_OnCollisionBeginOverlap, OtherComp) == 0x000010, "Member 'QuestOverlapCompFunctionBinder_OnCollisionBeginOverlap::OtherComp' has a wrong offset!");
//static_assert(offsetof(QuestOverlapCompFunctionBinder_OnCollisionBeginOverlap, OtherBodyIndex) == 0x000018, "Member 'QuestOverlapCompFunctionBinder_OnCollisionBeginOverlap::OtherBodyIndex' has a wrong offset!");
//static_assert(offsetof(QuestOverlapCompFunctionBinder_OnCollisionBeginOverlap, SweepResult) == 0x000020, "Member 'QuestOverlapCompFunctionBinder_OnCollisionBeginOverlap::SweepResult' has a wrong offset!");

// Function b1-Managed.QuestOverlapCompFunctionBinder.OnCollisionEndOverlap
// 0x0020 (0x0020 - 0x0000)
struct QuestOverlapCompFunctionBinder_OnCollisionEndOverlap final
{
public:
	class UPrimitiveComponent*                    OverlappedComponent;                               // 0x0000(0x0008)(ExportObject, Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class AActor*                                 OtherActor;                                        // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UPrimitiveComponent*                    OtherComp;                                         // 0x0010(0x0008)(ExportObject, Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         OtherBodyIndex;                                    // 0x0018(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
//static_assert(alignof(QuestOverlapCompFunctionBinder_OnCollisionEndOverlap) == 0x000008, "Wrong alignment on QuestOverlapCompFunctionBinder_OnCollisionEndOverlap");
//static_assert(sizeof(QuestOverlapCompFunctionBinder_OnCollisionEndOverlap) == 0x000020, "Wrong size on QuestOverlapCompFunctionBinder_OnCollisionEndOverlap");
//static_assert(offsetof(QuestOverlapCompFunctionBinder_OnCollisionEndOverlap, OverlappedComponent) == 0x000000, "Member 'QuestOverlapCompFunctionBinder_OnCollisionEndOverlap::OverlappedComponent' has a wrong offset!");
//static_assert(offsetof(QuestOverlapCompFunctionBinder_OnCollisionEndOverlap, OtherActor) == 0x000008, "Member 'QuestOverlapCompFunctionBinder_OnCollisionEndOverlap::OtherActor' has a wrong offset!");
//static_assert(offsetof(QuestOverlapCompFunctionBinder_OnCollisionEndOverlap, OtherComp) == 0x000010, "Member 'QuestOverlapCompFunctionBinder_OnCollisionEndOverlap::OtherComp' has a wrong offset!");
//static_assert(offsetof(QuestOverlapCompFunctionBinder_OnCollisionEndOverlap, OtherBodyIndex) == 0x000018, "Member 'QuestOverlapCompFunctionBinder_OnCollisionEndOverlap::OtherBodyIndex' has a wrong offset!");

// Function b1-Managed.QuestOverlapCompFunctionBinder.OnActorLeave
// 0x0010 (0x0010 - 0x0000)
struct QuestOverlapCompFunctionBinder_OnActorLeave final
{
public:
	class AActor*                                 OverlappedActor;                                   // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class AActor*                                 OtherActor;                                        // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
//static_assert(alignof(QuestOverlapCompFunctionBinder_OnActorLeave) == 0x000008, "Wrong alignment on QuestOverlapCompFunctionBinder_OnActorLeave");
//static_assert(sizeof(QuestOverlapCompFunctionBinder_OnActorLeave) == 0x000010, "Wrong size on QuestOverlapCompFunctionBinder_OnActorLeave");
//static_assert(offsetof(QuestOverlapCompFunctionBinder_OnActorLeave, OverlappedActor) == 0x000000, "Member 'QuestOverlapCompFunctionBinder_OnActorLeave::OverlappedActor' has a wrong offset!");
//static_assert(offsetof(QuestOverlapCompFunctionBinder_OnActorLeave, OtherActor) == 0x000008, "Member 'QuestOverlapCompFunctionBinder_OnActorLeave::OtherActor' has a wrong offset!");

// Function b1-Managed.QuestOverlapCompFunctionBinder.OnActorEnter
// 0x0010 (0x0010 - 0x0000)
struct QuestOverlapCompFunctionBinder_OnActorEnter final
{
public:
	class AActor*                                 OverlappedActor;                                   // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class AActor*                                 OtherActor;                                        // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
//static_assert(alignof(QuestOverlapCompFunctionBinder_OnActorEnter) == 0x000008, "Wrong alignment on QuestOverlapCompFunctionBinder_OnActorEnter");
//static_assert(sizeof(QuestOverlapCompFunctionBinder_OnActorEnter) == 0x000010, "Wrong size on QuestOverlapCompFunctionBinder_OnActorEnter");
//static_assert(offsetof(QuestOverlapCompFunctionBinder_OnActorEnter, OverlappedActor) == 0x000000, "Member 'QuestOverlapCompFunctionBinder_OnActorEnter::OverlappedActor' has a wrong offset!");
//static_assert(offsetof(QuestOverlapCompFunctionBinder_OnActorEnter, OtherActor) == 0x000008, "Member 'QuestOverlapCompFunctionBinder_OnActorEnter::OtherActor' has a wrong offset!");

// Function b1-Managed.BGUSimpleActorBaseCS.ReceiveEndPlay
// 0x0001 (0x0001 - 0x0000)
struct BGUSimpleActorBaseCS_ReceiveEndPlay final
{
public:
	EEndPlayReason                                EndPlayReason;                                     // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
//static_assert(alignof(BGUSimpleActorBaseCS_ReceiveEndPlay) == 0x000001, "Wrong alignment on BGUSimpleActorBaseCS_ReceiveEndPlay");
//static_assert(sizeof(BGUSimpleActorBaseCS_ReceiveEndPlay) == 0x000001, "Wrong size on BGUSimpleActorBaseCS_ReceiveEndPlay");
//static_assert(offsetof(BGUSimpleActorBaseCS_ReceiveEndPlay, EndPlayReason) == 0x000000, "Member 'BGUSimpleActorBaseCS_ReceiveEndPlay::EndPlayReason' has a wrong offset!");

// Function b1-Managed.BGUActorBaseCS.OnConstructionCS
// 0x0060 (0x0060 - 0x0000)
struct BGUActorBaseCS_OnConstructionCS final
{
public:
	struct FTransform                             Transform;                                         // 0x0000(0x0060)(ConstParm, Parm, OutParm, ReferenceParm, IsPlainOldData, NoDestructor)
};
//static_assert(alignof(BGUActorBaseCS_OnConstructionCS) == 0x000010, "Wrong alignment on BGUActorBaseCS_OnConstructionCS");
//static_assert(sizeof(BGUActorBaseCS_OnConstructionCS) == 0x000060, "Wrong size on BGUActorBaseCS_OnConstructionCS");
//static_assert(offsetof(BGUActorBaseCS_OnConstructionCS, Transform) == 0x000000, "Member 'BGUActorBaseCS_OnConstructionCS::Transform' has a wrong offset!");

// Function b1-Managed.BGUActorBaseCS.ReceiveEndPlay
// 0x0001 (0x0001 - 0x0000)
struct BGUActorBaseCS_ReceiveEndPlay final
{
public:
	EEndPlayReason                                EndPlayReason;                                     // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
//static_assert(alignof(BGUActorBaseCS_ReceiveEndPlay) == 0x000001, "Wrong alignment on BGUActorBaseCS_ReceiveEndPlay");
//static_assert(sizeof(BGUActorBaseCS_ReceiveEndPlay) == 0x000001, "Wrong size on BGUActorBaseCS_ReceiveEndPlay");
//static_assert(offsetof(BGUActorBaseCS_ReceiveEndPlay, EndPlayReason) == 0x000000, "Member 'BGUActorBaseCS_ReceiveEndPlay::EndPlayReason' has a wrong offset!");

// Function b1-Managed.BGUActorBaseCS.GetActorGuidCS
// 0x0018 (0x0018 - 0x0000)
struct BGUActorBaseCS_GetActorGuidCS final
{
public:
	class FString                                 OutActorGuid;                                      // 0x0000(0x0010)(Parm, OutParm, ZeroConstructor, HasGetValueTypeHash)
	uint8                                         ReturnValue : 1;                                   // 0x0010(0x0001)(BitIndex: 0x00, PropSize: 0x0001 (Parm, OutParm, ReturnParm, NoDestructor, HasGetValueTypeHash))
};
//static_assert(alignof(BGUActorBaseCS_GetActorGuidCS) == 0x000008, "Wrong alignment on BGUActorBaseCS_GetActorGuidCS");
//static_assert(sizeof(BGUActorBaseCS_GetActorGuidCS) == 0x000018, "Wrong size on BGUActorBaseCS_GetActorGuidCS");
//static_assert(offsetof(BGUActorBaseCS_GetActorGuidCS, OutActorGuid) == 0x000000, "Member 'BGUActorBaseCS_GetActorGuidCS::OutActorGuid' has a wrong offset!");

// Function b1-Managed.BGUProceduralSpawnCharacterBase.OnConstructionCS
// 0x0060 (0x0060 - 0x0000)
struct BGUProceduralSpawnCharacterBase_OnConstructionCS final
{
public:
	struct FTransform                             Transform;                                         // 0x0000(0x0060)(ConstParm, Parm, OutParm, ReferenceParm, IsPlainOldData, NoDestructor)
};
//static_assert(alignof(BGUProceduralSpawnCharacterBase_OnConstructionCS) == 0x000010, "Wrong alignment on BGUProceduralSpawnCharacterBase_OnConstructionCS");
//static_assert(sizeof(BGUProceduralSpawnCharacterBase_OnConstructionCS) == 0x000060, "Wrong size on BGUProceduralSpawnCharacterBase_OnConstructionCS");
//static_assert(offsetof(BGUProceduralSpawnCharacterBase_OnConstructionCS, Transform) == 0x000000, "Member 'BGUProceduralSpawnCharacterBase_OnConstructionCS::Transform' has a wrong offset!");

// Function b1-Managed.BGUInteractiveActorBase.OnConstructionCS
// 0x0060 (0x0060 - 0x0000)
struct BGUInteractiveActorBase_OnConstructionCS final
{
public:
	struct FTransform                             Transform;                                         // 0x0000(0x0060)(ConstParm, Parm, OutParm, ReferenceParm, IsPlainOldData, NoDestructor)
};
//static_assert(alignof(BGUInteractiveActorBase_OnConstructionCS) == 0x000010, "Wrong alignment on BGUInteractiveActorBase_OnConstructionCS");
//static_assert(sizeof(BGUInteractiveActorBase_OnConstructionCS) == 0x000060, "Wrong size on BGUInteractiveActorBase_OnConstructionCS");
//static_assert(offsetof(BGUInteractiveActorBase_OnConstructionCS, Transform) == 0x000000, "Member 'BGUInteractiveActorBase_OnConstructionCS::Transform' has a wrong offset!");

// Function b1-Managed.BGUInteractiveActorBase.OnDestroyDestructible
// 0x0038 (0x0038 - 0x0000)
struct BGUInteractiveActorBase_OnDestroyDestructible final
{
public:
	struct FVector                                HitLocation;                                       // 0x0000(0x0018)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                ImpulseDir;                                        // 0x0018(0x0018)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         ImpulseStrength;                                   // 0x0030(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         Damage;                                            // 0x0034(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
//static_assert(alignof(BGUInteractiveActorBase_OnDestroyDestructible) == 0x000008, "Wrong alignment on BGUInteractiveActorBase_OnDestroyDestructible");
//static_assert(sizeof(BGUInteractiveActorBase_OnDestroyDestructible) == 0x000038, "Wrong size on BGUInteractiveActorBase_OnDestroyDestructible");
//static_assert(offsetof(BGUInteractiveActorBase_OnDestroyDestructible, HitLocation) == 0x000000, "Member 'BGUInteractiveActorBase_OnDestroyDestructible::HitLocation' has a wrong offset!");
//static_assert(offsetof(BGUInteractiveActorBase_OnDestroyDestructible, ImpulseDir) == 0x000018, "Member 'BGUInteractiveActorBase_OnDestroyDestructible::ImpulseDir' has a wrong offset!");
//static_assert(offsetof(BGUInteractiveActorBase_OnDestroyDestructible, ImpulseStrength) == 0x000030, "Member 'BGUInteractiveActorBase_OnDestroyDestructible::ImpulseStrength' has a wrong offset!");
//static_assert(offsetof(BGUInteractiveActorBase_OnDestroyDestructible, Damage) == 0x000034, "Member 'BGUInteractiveActorBase_OnDestroyDestructible::Damage' has a wrong offset!");

// Function b1-Managed.BGUInteractiveActorBase.OnResetDestructible
// 0x0001 (0x0001 - 0x0000)
struct BGUInteractiveActorBase_OnResetDestructible final
{
public:
	uint8                                         IsDestroyed : 1;                                   // 0x0000(0x0001)(BitIndex: 0x00, PropSize: 0x0001 (Parm, NoDestructor, HasGetValueTypeHash))
};
//static_assert(alignof(BGUInteractiveActorBase_OnResetDestructible) == 0x000001, "Wrong alignment on BGUInteractiveActorBase_OnResetDestructible");
//static_assert(sizeof(BGUInteractiveActorBase_OnResetDestructible) == 0x000001, "Wrong size on BGUInteractiveActorBase_OnResetDestructible");

// Function b1-Managed.BGUInteractiveActorBase.OnHitDestructible
// 0x0038 (0x0038 - 0x0000)
struct BGUInteractiveActorBase_OnHitDestructible final
{
public:
	struct FVector                                HitLocation;                                       // 0x0000(0x0018)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                ImpulseDir;                                        // 0x0018(0x0018)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         ImpulseStrength;                                   // 0x0030(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         Damage;                                            // 0x0034(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
//static_assert(alignof(BGUInteractiveActorBase_OnHitDestructible) == 0x000008, "Wrong alignment on BGUInteractiveActorBase_OnHitDestructible");
//static_assert(sizeof(BGUInteractiveActorBase_OnHitDestructible) == 0x000038, "Wrong size on BGUInteractiveActorBase_OnHitDestructible");
//static_assert(offsetof(BGUInteractiveActorBase_OnHitDestructible, HitLocation) == 0x000000, "Member 'BGUInteractiveActorBase_OnHitDestructible::HitLocation' has a wrong offset!");
//static_assert(offsetof(BGUInteractiveActorBase_OnHitDestructible, ImpulseDir) == 0x000018, "Member 'BGUInteractiveActorBase_OnHitDestructible::ImpulseDir' has a wrong offset!");
//static_assert(offsetof(BGUInteractiveActorBase_OnHitDestructible, ImpulseStrength) == 0x000030, "Member 'BGUInteractiveActorBase_OnHitDestructible::ImpulseStrength' has a wrong offset!");
//static_assert(offsetof(BGUInteractiveActorBase_OnHitDestructible, Damage) == 0x000034, "Member 'BGUInteractiveActorBase_OnHitDestructible::Damage' has a wrong offset!");

// Function b1-Managed.BGUTriggerObjBase.OnConstructionCS
// 0x0060 (0x0060 - 0x0000)
struct BGUTriggerObjBase_OnConstructionCS final
{
public:
	struct FTransform                             Transform;                                         // 0x0000(0x0060)(ConstParm, Parm, OutParm, ReferenceParm, IsPlainOldData, NoDestructor)
};
//static_assert(alignof(BGUTriggerObjBase_OnConstructionCS) == 0x000010, "Wrong alignment on BGUTriggerObjBase_OnConstructionCS");
//static_assert(sizeof(BGUTriggerObjBase_OnConstructionCS) == 0x000060, "Wrong size on BGUTriggerObjBase_OnConstructionCS");
//static_assert(offsetof(BGUTriggerObjBase_OnConstructionCS, Transform) == 0x000000, "Member 'BGUTriggerObjBase_OnConstructionCS::Transform' has a wrong offset!");

// Function b1-Managed.HelloUFromUSharp.CallMe
// 0x0010 (0x0010 - 0x0000)
struct HelloUFromUSharp_CallMe final
{
public:
	class FString                                 Arg1;                                              // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash)
};
//static_assert(alignof(HelloUFromUSharp_CallMe) == 0x000008, "Wrong alignment on HelloUFromUSharp_CallMe");
//static_assert(sizeof(HelloUFromUSharp_CallMe) == 0x000010, "Wrong size on HelloUFromUSharp_CallMe");
//static_assert(offsetof(HelloUFromUSharp_CallMe, Arg1) == 0x000000, "Member 'HelloUFromUSharp_CallMe::Arg1' has a wrong offset!");

// Function b1-Managed.Bezier_MovementComponentInCS.ReceiveTick
// 0x0004 (0x0004 - 0x0000)
struct Bezier_MovementComponentInCS_ReceiveTick final
{
public:
	float                                         DeltaSeconds;                                      // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
//static_assert(alignof(Bezier_MovementComponentInCS_ReceiveTick) == 0x000004, "Wrong alignment on Bezier_MovementComponentInCS_ReceiveTick");
//static_assert(sizeof(Bezier_MovementComponentInCS_ReceiveTick) == 0x000004, "Wrong size on Bezier_MovementComponentInCS_ReceiveTick");
//static_assert(offsetof(Bezier_MovementComponentInCS_ReceiveTick, DeltaSeconds) == 0x000000, "Member 'Bezier_MovementComponentInCS_ReceiveTick::DeltaSeconds' has a wrong offset!");

// Function b1-Managed.Bezier_MovementComponentInCS.InitMovementParam
// 0x0060 (0x0060 - 0x0000)
struct Bezier_MovementComponentInCS_InitMovementParam final
{
public:
	float                                         _RotateSpeed;                                      // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         _FlySpeed;                                         // 0x0004(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         _DestroyTime;                                      // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         _MaxFlySpeed;                                      // 0x000C(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         _BezierPathPointNum;                               // 0x0010(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         _BezierMoveWeight;                                 // 0x0014(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         _AccelerationTime;                                 // 0x0018(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         _ApproachDis;                                      // 0x001C(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         _EnableDrawDebugPoint : 1;                         // 0x0020(0x0001)(BitIndex: 0x00, PropSize: 0x0001 (Parm, NoDestructor, HasGetValueTypeHash))
	uint8                                         Pad_21[0x7];                                       // 0x0021(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UCurveFloat*                            _SpeedCurve;                                       // 0x0028(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                _ControlAdditionPoint1;                            // 0x0030(0x0018)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                _ControlAdditionPoint2;                            // 0x0048(0x0018)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
//static_assert(alignof(Bezier_MovementComponentInCS_InitMovementParam) == 0x000008, "Wrong alignment on Bezier_MovementComponentInCS_InitMovementParam");
//static_assert(sizeof(Bezier_MovementComponentInCS_InitMovementParam) == 0x000060, "Wrong size on Bezier_MovementComponentInCS_InitMovementParam");
//static_assert(offsetof(Bezier_MovementComponentInCS_InitMovementParam, _RotateSpeed) == 0x000000, "Member 'Bezier_MovementComponentInCS_InitMovementParam::_RotateSpeed' has a wrong offset!");
//static_assert(offsetof(Bezier_MovementComponentInCS_InitMovementParam, _FlySpeed) == 0x000004, "Member 'Bezier_MovementComponentInCS_InitMovementParam::_FlySpeed' has a wrong offset!");
//static_assert(offsetof(Bezier_MovementComponentInCS_InitMovementParam, _DestroyTime) == 0x000008, "Member 'Bezier_MovementComponentInCS_InitMovementParam::_DestroyTime' has a wrong offset!");
//static_assert(offsetof(Bezier_MovementComponentInCS_InitMovementParam, _MaxFlySpeed) == 0x00000C, "Member 'Bezier_MovementComponentInCS_InitMovementParam::_MaxFlySpeed' has a wrong offset!");
//static_assert(offsetof(Bezier_MovementComponentInCS_InitMovementParam, _BezierPathPointNum) == 0x000010, "Member 'Bezier_MovementComponentInCS_InitMovementParam::_BezierPathPointNum' has a wrong offset!");
//static_assert(offsetof(Bezier_MovementComponentInCS_InitMovementParam, _BezierMoveWeight) == 0x000014, "Member 'Bezier_MovementComponentInCS_InitMovementParam::_BezierMoveWeight' has a wrong offset!");
//static_assert(offsetof(Bezier_MovementComponentInCS_InitMovementParam, _AccelerationTime) == 0x000018, "Member 'Bezier_MovementComponentInCS_InitMovementParam::_AccelerationTime' has a wrong offset!");
//static_assert(offsetof(Bezier_MovementComponentInCS_InitMovementParam, _ApproachDis) == 0x00001C, "Member 'Bezier_MovementComponentInCS_InitMovementParam::_ApproachDis' has a wrong offset!");
//static_assert(offsetof(Bezier_MovementComponentInCS_InitMovementParam, _SpeedCurve) == 0x000028, "Member 'Bezier_MovementComponentInCS_InitMovementParam::_SpeedCurve' has a wrong offset!");
//static_assert(offsetof(Bezier_MovementComponentInCS_InitMovementParam, _ControlAdditionPoint1) == 0x000030, "Member 'Bezier_MovementComponentInCS_InitMovementParam::_ControlAdditionPoint1' has a wrong offset!");
//static_assert(offsetof(Bezier_MovementComponentInCS_InitMovementParam, _ControlAdditionPoint2) == 0x000048, "Member 'Bezier_MovementComponentInCS_InitMovementParam::_ControlAdditionPoint2' has a wrong offset!");

// Function b1-Managed.OldMKSpawnTest.SpawnActorCS
// 0x0010 (0x0010 - 0x0000)
struct OldMKSpawnTest_SpawnActorCS final
{
public:
	class UClass*                                 ActorClass;                                        // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class AActor*                                 ReturnValue;                                       // 0x0008(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
//static_assert(alignof(OldMKSpawnTest_SpawnActorCS) == 0x000008, "Wrong alignment on OldMKSpawnTest_SpawnActorCS");
//static_assert(sizeof(OldMKSpawnTest_SpawnActorCS) == 0x000010, "Wrong size on OldMKSpawnTest_SpawnActorCS");
//static_assert(offsetof(OldMKSpawnTest_SpawnActorCS, ActorClass) == 0x000000, "Member 'OldMKSpawnTest_SpawnActorCS::ActorClass' has a wrong offset!");
//static_assert(offsetof(OldMKSpawnTest_SpawnActorCS, ReturnValue) == 0x000008, "Member 'OldMKSpawnTest_SpawnActorCS::ReturnValue' has a wrong offset!");

// Function b1-Managed.BED_FSMNode.IsSupportViewType
// 0x0002 (0x0002 - 0x0000)
struct BED_FSMNode_IsSupportViewType final
{
public:
	ECalliopeViewType                             InViewType;                                        // 0x0000(0x0001)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         ReturnValue : 1;                                   // 0x0001(0x0001)(BitIndex: 0x00, PropSize: 0x0001 (Parm, OutParm, ReturnParm, NoDestructor, HasGetValueTypeHash))
};
//static_assert(alignof(BED_FSMNode_IsSupportViewType) == 0x000001, "Wrong alignment on BED_FSMNode_IsSupportViewType");
//static_assert(sizeof(BED_FSMNode_IsSupportViewType) == 0x000002, "Wrong size on BED_FSMNode_IsSupportViewType");
//static_assert(offsetof(BED_FSMNode_IsSupportViewType, InViewType) == 0x000000, "Member 'BED_FSMNode_IsSupportViewType::InViewType' has a wrong offset!");

// Function b1-Managed.BED_FSMNode_GI_Loading_LoadChapterViewLevel.PostPropertyChanged
// 0x0020 (0x0020 - 0x0000)
struct BED_FSMNode_GI_Loading_LoadChapterViewLevel_PostPropertyChanged final
{
public:
	class FString                                 MemberName;                                        // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash)
	class FString                                 PropertyName;                                      // 0x0010(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash)
};
//static_assert(alignof(BED_FSMNode_GI_Loading_LoadChapterViewLevel_PostPropertyChanged) == 0x000008, "Wrong alignment on BED_FSMNode_GI_Loading_LoadChapterViewLevel_PostPropertyChanged");
//static_assert(sizeof(BED_FSMNode_GI_Loading_LoadChapterViewLevel_PostPropertyChanged) == 0x000020, "Wrong size on BED_FSMNode_GI_Loading_LoadChapterViewLevel_PostPropertyChanged");
//static_assert(offsetof(BED_FSMNode_GI_Loading_LoadChapterViewLevel_PostPropertyChanged, MemberName) == 0x000000, "Member 'BED_FSMNode_GI_Loading_LoadChapterViewLevel_PostPropertyChanged::MemberName' has a wrong offset!");
//static_assert(offsetof(BED_FSMNode_GI_Loading_LoadChapterViewLevel_PostPropertyChanged, PropertyName) == 0x000010, "Member 'BED_FSMNode_GI_Loading_LoadChapterViewLevel_PostPropertyChanged::PropertyName' has a wrong offset!");

// Function b1-Managed.BED_FSMNode_GI_Loading_LoadChapterViewLevel.GetNodeDescriptionInCS
// 0x0010 (0x0010 - 0x0000)
struct BED_FSMNode_GI_Loading_LoadChapterViewLevel_GetNodeDescriptionInCS final
{
public:
	class FString                                 ReturnValue;                                       // 0x0000(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash)
};
//static_assert(alignof(BED_FSMNode_GI_Loading_LoadChapterViewLevel_GetNodeDescriptionInCS) == 0x000008, "Wrong alignment on BED_FSMNode_GI_Loading_LoadChapterViewLevel_GetNodeDescriptionInCS");
//static_assert(sizeof(BED_FSMNode_GI_Loading_LoadChapterViewLevel_GetNodeDescriptionInCS) == 0x000010, "Wrong size on BED_FSMNode_GI_Loading_LoadChapterViewLevel_GetNodeDescriptionInCS");
//static_assert(offsetof(BED_FSMNode_GI_Loading_LoadChapterViewLevel_GetNodeDescriptionInCS, ReturnValue) == 0x000000, "Member 'BED_FSMNode_GI_Loading_LoadChapterViewLevel_GetNodeDescriptionInCS::ReturnValue' has a wrong offset!");

// Function b1-Managed.BED_BehaviorNode.IsSupportViewType
// 0x0002 (0x0002 - 0x0000)
struct BED_BehaviorNode_IsSupportViewType final
{
public:
	ECalliopeViewType                             InViewType;                                        // 0x0000(0x0001)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         ReturnValue : 1;                                   // 0x0001(0x0001)(BitIndex: 0x00, PropSize: 0x0001 (Parm, OutParm, ReturnParm, NoDestructor, HasGetValueTypeHash))
};
//static_assert(alignof(BED_BehaviorNode_IsSupportViewType) == 0x000001, "Wrong alignment on BED_BehaviorNode_IsSupportViewType");
//static_assert(sizeof(BED_BehaviorNode_IsSupportViewType) == 0x000002, "Wrong size on BED_BehaviorNode_IsSupportViewType");
//static_assert(offsetof(BED_BehaviorNode_IsSupportViewType, InViewType) == 0x000000, "Member 'BED_BehaviorNode_IsSupportViewType::InViewType' has a wrong offset!");

// Function b1-Managed.BED_BehaviorNode_ExitPhasePerformance.GetNodeDescriptionInCS
// 0x0010 (0x0010 - 0x0000)
struct BED_BehaviorNode_ExitPhasePerformance_GetNodeDescriptionInCS final
{
public:
	class FString                                 ReturnValue;                                       // 0x0000(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash)
};
//static_assert(alignof(BED_BehaviorNode_ExitPhasePerformance_GetNodeDescriptionInCS) == 0x000008, "Wrong alignment on BED_BehaviorNode_ExitPhasePerformance_GetNodeDescriptionInCS");
//static_assert(sizeof(BED_BehaviorNode_ExitPhasePerformance_GetNodeDescriptionInCS) == 0x000010, "Wrong size on BED_BehaviorNode_ExitPhasePerformance_GetNodeDescriptionInCS");
//static_assert(offsetof(BED_BehaviorNode_ExitPhasePerformance_GetNodeDescriptionInCS, ReturnValue) == 0x000000, "Member 'BED_BehaviorNode_ExitPhasePerformance_GetNodeDescriptionInCS::ReturnValue' has a wrong offset!");

// Function b1-Managed.GSDispLib_PostProcessDebugger.ReceiveTick
// 0x0004 (0x0004 - 0x0000)
struct GSDispLib_PostProcessDebugger_ReceiveTick final
{
public:
	float                                         DeltaSeconds;                                      // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
//static_assert(alignof(GSDispLib_PostProcessDebugger_ReceiveTick) == 0x000004, "Wrong alignment on GSDispLib_PostProcessDebugger_ReceiveTick");
//static_assert(sizeof(GSDispLib_PostProcessDebugger_ReceiveTick) == 0x000004, "Wrong size on GSDispLib_PostProcessDebugger_ReceiveTick");
//static_assert(offsetof(GSDispLib_PostProcessDebugger_ReceiveTick, DeltaSeconds) == 0x000000, "Member 'GSDispLib_PostProcessDebugger_ReceiveTick::DeltaSeconds' has a wrong offset!");

// Function b1-Managed.BED_QuestNode.IsSupportViewType
// 0x0002 (0x0002 - 0x0000)
struct BED_QuestNode_IsSupportViewType final
{
public:
	ECalliopeViewType                             InViewType;                                        // 0x0000(0x0001)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         ReturnValue : 1;                                   // 0x0001(0x0001)(BitIndex: 0x00, PropSize: 0x0001 (Parm, OutParm, ReturnParm, NoDestructor, HasGetValueTypeHash))
};
//static_assert(alignof(BED_QuestNode_IsSupportViewType) == 0x000001, "Wrong alignment on BED_QuestNode_IsSupportViewType");
//static_assert(sizeof(BED_QuestNode_IsSupportViewType) == 0x000002, "Wrong size on BED_QuestNode_IsSupportViewType");
//static_assert(offsetof(BED_QuestNode_IsSupportViewType, InViewType) == 0x000000, "Member 'BED_QuestNode_IsSupportViewType::InViewType' has a wrong offset!");

// Function b1-Managed.BED_QuestNode_PlayLevelSequence.GetNodeDescriptionInCS
// 0x0010 (0x0010 - 0x0000)
struct BED_QuestNode_PlayLevelSequence_GetNodeDescriptionInCS final
{
public:
	class FString                                 ReturnValue;                                       // 0x0000(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash)
};
//static_assert(alignof(BED_QuestNode_PlayLevelSequence_GetNodeDescriptionInCS) == 0x000008, "Wrong alignment on BED_QuestNode_PlayLevelSequence_GetNodeDescriptionInCS");
//static_assert(sizeof(BED_QuestNode_PlayLevelSequence_GetNodeDescriptionInCS) == 0x000010, "Wrong size on BED_QuestNode_PlayLevelSequence_GetNodeDescriptionInCS");
//static_assert(offsetof(BED_QuestNode_PlayLevelSequence_GetNodeDescriptionInCS, ReturnValue) == 0x000000, "Member 'BED_QuestNode_PlayLevelSequence_GetNodeDescriptionInCS::ReturnValue' has a wrong offset!");

// Function b1-Managed.BANS_DispLibTimedModifyMPC.GSNotifyBeginCS
// 0x0048 (0x0048 - 0x0000)
struct BANS_DispLibTimedModifyMPC_GSNotifyBeginCS final
{
public:
	struct FUStGSNotifyParam                      NotifyParam;                                       // 0x0000(0x0040)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
	float                                         TotalDuration;                                     // 0x0040(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
//static_assert(alignof(BANS_DispLibTimedModifyMPC_GSNotifyBeginCS) == 0x000008, "Wrong alignment on BANS_DispLibTimedModifyMPC_GSNotifyBeginCS");
//static_assert(sizeof(BANS_DispLibTimedModifyMPC_GSNotifyBeginCS) == 0x000048, "Wrong size on BANS_DispLibTimedModifyMPC_GSNotifyBeginCS");
//static_assert(offsetof(BANS_DispLibTimedModifyMPC_GSNotifyBeginCS, NotifyParam) == 0x000000, "Member 'BANS_DispLibTimedModifyMPC_GSNotifyBeginCS::NotifyParam' has a wrong offset!");
//static_assert(offsetof(BANS_DispLibTimedModifyMPC_GSNotifyBeginCS, TotalDuration) == 0x000040, "Member 'BANS_DispLibTimedModifyMPC_GSNotifyBeginCS::TotalDuration' has a wrong offset!");

// Function b1-Managed.BANS_DispLibTimedModifyMPC.GSNotifyEndCS
// 0x0040 (0x0040 - 0x0000)
struct BANS_DispLibTimedModifyMPC_GSNotifyEndCS final
{
public:
	struct FUStGSNotifyParam                      NotifyParam;                                       // 0x0000(0x0040)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
//static_assert(alignof(BANS_DispLibTimedModifyMPC_GSNotifyEndCS) == 0x000008, "Wrong alignment on BANS_DispLibTimedModifyMPC_GSNotifyEndCS");
//static_assert(sizeof(BANS_DispLibTimedModifyMPC_GSNotifyEndCS) == 0x000040, "Wrong size on BANS_DispLibTimedModifyMPC_GSNotifyEndCS");
//static_assert(offsetof(BANS_DispLibTimedModifyMPC_GSNotifyEndCS, NotifyParam) == 0x000000, "Member 'BANS_DispLibTimedModifyMPC_GSNotifyEndCS::NotifyParam' has a wrong offset!");

// Function b1-Managed.BED_ComboNode.IsSupportViewType
// 0x0002 (0x0002 - 0x0000)
struct BED_ComboNode_IsSupportViewType final
{
public:
	ECalliopeViewType                             InViewType;                                        // 0x0000(0x0001)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         ReturnValue : 1;                                   // 0x0001(0x0001)(BitIndex: 0x00, PropSize: 0x0001 (Parm, OutParm, ReturnParm, NoDestructor, HasGetValueTypeHash))
};
//static_assert(alignof(BED_ComboNode_IsSupportViewType) == 0x000001, "Wrong alignment on BED_ComboNode_IsSupportViewType");
//static_assert(sizeof(BED_ComboNode_IsSupportViewType) == 0x000002, "Wrong size on BED_ComboNode_IsSupportViewType");
//static_assert(offsetof(BED_ComboNode_IsSupportViewType, InViewType) == 0x000000, "Member 'BED_ComboNode_IsSupportViewType::InViewType' has a wrong offset!");

// Function b1-Managed.BED_ComboNode_State.GetContextOutputsInCS
// 0x0010 (0x0010 - 0x0000)
struct BED_ComboNode_State_GetContextOutputsInCS final
{
public:
	TArray<class FName>                           ReturnValue;                                       // 0x0000(0x0010)(Parm, OutParm, ReturnParm)
};
//static_assert(alignof(BED_ComboNode_State_GetContextOutputsInCS) == 0x000008, "Wrong alignment on BED_ComboNode_State_GetContextOutputsInCS");
//static_assert(sizeof(BED_ComboNode_State_GetContextOutputsInCS) == 0x000010, "Wrong size on BED_ComboNode_State_GetContextOutputsInCS");
//static_assert(offsetof(BED_ComboNode_State_GetContextOutputsInCS, ReturnValue) == 0x000000, "Member 'BED_ComboNode_State_GetContextOutputsInCS::ReturnValue' has a wrong offset!");

// Function b1-Managed.BED_ComboNode_State.PostPropertyChanged
// 0x0020 (0x0020 - 0x0000)
struct BED_ComboNode_State_PostPropertyChanged final
{
public:
	class FString                                 MemberName;                                        // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash)
	class FString                                 PropertyName;                                      // 0x0010(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash)
};
//static_assert(alignof(BED_ComboNode_State_PostPropertyChanged) == 0x000008, "Wrong alignment on BED_ComboNode_State_PostPropertyChanged");
//static_assert(sizeof(BED_ComboNode_State_PostPropertyChanged) == 0x000020, "Wrong size on BED_ComboNode_State_PostPropertyChanged");
//static_assert(offsetof(BED_ComboNode_State_PostPropertyChanged, MemberName) == 0x000000, "Member 'BED_ComboNode_State_PostPropertyChanged::MemberName' has a wrong offset!");
//static_assert(offsetof(BED_ComboNode_State_PostPropertyChanged, PropertyName) == 0x000010, "Member 'BED_ComboNode_State_PostPropertyChanged::PropertyName' has a wrong offset!");

// Function b1-Managed.BUI_Widget.OnRemovedFromFocusPath
// 0x0008 (0x0008 - 0x0000)
struct BUI_Widget_OnRemovedFromFocusPath final
{
public:
	struct FFocusEvent                            InFocusEvent;                                      // 0x0000(0x0008)(Parm, NoDestructor)
};
//static_assert(alignof(BUI_Widget_OnRemovedFromFocusPath) == 0x000004, "Wrong alignment on BUI_Widget_OnRemovedFromFocusPath");
//static_assert(sizeof(BUI_Widget_OnRemovedFromFocusPath) == 0x000008, "Wrong size on BUI_Widget_OnRemovedFromFocusPath");
//static_assert(offsetof(BUI_Widget_OnRemovedFromFocusPath, InFocusEvent) == 0x000000, "Member 'BUI_Widget_OnRemovedFromFocusPath::InFocusEvent' has a wrong offset!");

// Function b1-Managed.BUI_Widget.OnAnalogValueChanged
// 0x0138 (0x0138 - 0x0000)
struct BUI_Widget_OnAnalogValueChanged final
{
public:
	struct FGeometry                              MyGeometry;                                        // 0x0000(0x0040)(Parm, IsPlainOldData, NoDestructor)
	struct FAnalogInputEvent                      InAnalogInputEvent;                                // 0x0040(0x0040)(Parm)
	struct FEventReply                            ReturnValue;                                       // 0x0080(0x00B8)(Parm, OutParm, ReturnParm)
};
//static_assert(alignof(BUI_Widget_OnAnalogValueChanged) == 0x000008, "Wrong alignment on BUI_Widget_OnAnalogValueChanged");
//static_assert(sizeof(BUI_Widget_OnAnalogValueChanged) == 0x000138, "Wrong size on BUI_Widget_OnAnalogValueChanged");
//static_assert(offsetof(BUI_Widget_OnAnalogValueChanged, MyGeometry) == 0x000000, "Member 'BUI_Widget_OnAnalogValueChanged::MyGeometry' has a wrong offset!");
//static_assert(offsetof(BUI_Widget_OnAnalogValueChanged, InAnalogInputEvent) == 0x000040, "Member 'BUI_Widget_OnAnalogValueChanged::InAnalogInputEvent' has a wrong offset!");
//static_assert(offsetof(BUI_Widget_OnAnalogValueChanged, ReturnValue) == 0x000080, "Member 'BUI_Widget_OnAnalogValueChanged::ReturnValue' has a wrong offset!");

// Function b1-Managed.BUI_Widget.OnAddedToFocusPath
// 0x0008 (0x0008 - 0x0000)
struct BUI_Widget_OnAddedToFocusPath final
{
public:
	struct FFocusEvent                            InFocusEvent;                                      // 0x0000(0x0008)(Parm, NoDestructor)
};
//static_assert(alignof(BUI_Widget_OnAddedToFocusPath) == 0x000004, "Wrong alignment on BUI_Widget_OnAddedToFocusPath");
//static_assert(sizeof(BUI_Widget_OnAddedToFocusPath) == 0x000008, "Wrong size on BUI_Widget_OnAddedToFocusPath");
//static_assert(offsetof(BUI_Widget_OnAddedToFocusPath, InFocusEvent) == 0x000000, "Member 'BUI_Widget_OnAddedToFocusPath::InFocusEvent' has a wrong offset!");

// Function b1-Managed.BUI_Widget.OnPreviewKeyDown
// 0x0130 (0x0130 - 0x0000)
struct BUI_Widget_OnPreviewKeyDown final
{
public:
	struct FGeometry                              MyGeometry;                                        // 0x0000(0x0040)(Parm, IsPlainOldData, NoDestructor)
	struct FKeyEvent                              InKeyEvent;                                        // 0x0040(0x0038)(Parm)
	struct FEventReply                            ReturnValue;                                       // 0x0078(0x00B8)(Parm, OutParm, ReturnParm)
};
//static_assert(alignof(BUI_Widget_OnPreviewKeyDown) == 0x000008, "Wrong alignment on BUI_Widget_OnPreviewKeyDown");
//static_assert(sizeof(BUI_Widget_OnPreviewKeyDown) == 0x000130, "Wrong size on BUI_Widget_OnPreviewKeyDown");
//static_assert(offsetof(BUI_Widget_OnPreviewKeyDown, MyGeometry) == 0x000000, "Member 'BUI_Widget_OnPreviewKeyDown::MyGeometry' has a wrong offset!");
//static_assert(offsetof(BUI_Widget_OnPreviewKeyDown, InKeyEvent) == 0x000040, "Member 'BUI_Widget_OnPreviewKeyDown::InKeyEvent' has a wrong offset!");
//static_assert(offsetof(BUI_Widget_OnPreviewKeyDown, ReturnValue) == 0x000078, "Member 'BUI_Widget_OnPreviewKeyDown::ReturnValue' has a wrong offset!");

// Function b1-Managed.BUI_Widget.OnFocusChanging
// 0x0008 (0x0008 - 0x0000)
struct BUI_Widget_OnFocusChanging final
{
public:
	struct FFocusEvent                            InFocusEvent;                                      // 0x0000(0x0008)(ConstParm, Parm, OutParm, ReferenceParm, NoDestructor)
};
//static_assert(alignof(BUI_Widget_OnFocusChanging) == 0x000004, "Wrong alignment on BUI_Widget_OnFocusChanging");
//static_assert(sizeof(BUI_Widget_OnFocusChanging) == 0x000008, "Wrong size on BUI_Widget_OnFocusChanging");
//static_assert(offsetof(BUI_Widget_OnFocusChanging, InFocusEvent) == 0x000000, "Member 'BUI_Widget_OnFocusChanging::InFocusEvent' has a wrong offset!");

// Function b1-Managed.BUI_Widget.PreConstruct
// 0x0001 (0x0001 - 0x0000)
struct BUI_Widget_PreConstruct final
{
public:
	uint8                                         IsDesignTime : 1;                                  // 0x0000(0x0001)(BitIndex: 0x00, PropSize: 0x0001 (Parm, NoDestructor, HasGetValueTypeHash))
};
//static_assert(alignof(BUI_Widget_PreConstruct) == 0x000001, "Wrong alignment on BUI_Widget_PreConstruct");
//static_assert(sizeof(BUI_Widget_PreConstruct) == 0x000001, "Wrong size on BUI_Widget_PreConstruct");

// Function b1-Managed.BUI_Widget.OnMouseWheel
// 0x0188 (0x0188 - 0x0000)
struct BUI_Widget_OnMouseWheel final
{
public:
	struct FGeometry                              MyGeometry;                                        // 0x0000(0x0040)(Parm, IsPlainOldData, NoDestructor)
	struct FPointerEvent                          MouseEvent;                                        // 0x0040(0x0090)(ConstParm, Parm, OutParm, ReferenceParm)
	struct FEventReply                            ReturnValue;                                       // 0x00D0(0x00B8)(Parm, OutParm, ReturnParm)
};
//static_assert(alignof(BUI_Widget_OnMouseWheel) == 0x000008, "Wrong alignment on BUI_Widget_OnMouseWheel");
//static_assert(sizeof(BUI_Widget_OnMouseWheel) == 0x000188, "Wrong size on BUI_Widget_OnMouseWheel");
//static_assert(offsetof(BUI_Widget_OnMouseWheel, MyGeometry) == 0x000000, "Member 'BUI_Widget_OnMouseWheel::MyGeometry' has a wrong offset!");
//static_assert(offsetof(BUI_Widget_OnMouseWheel, MouseEvent) == 0x000040, "Member 'BUI_Widget_OnMouseWheel::MouseEvent' has a wrong offset!");
//static_assert(offsetof(BUI_Widget_OnMouseWheel, ReturnValue) == 0x0000D0, "Member 'BUI_Widget_OnMouseWheel::ReturnValue' has a wrong offset!");

// Function b1-Managed.BUI_Widget.OnAnimationSequenceEvent
// 0x0018 (0x0018 - 0x0000)
struct BUI_Widget_OnAnimationSequenceEvent final
{
public:
	class UWidgetAnimation*                       Animation;                                         // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class FString                                 EventName;                                         // 0x0008(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash)
};
//static_assert(alignof(BUI_Widget_OnAnimationSequenceEvent) == 0x000008, "Wrong alignment on BUI_Widget_OnAnimationSequenceEvent");
//static_assert(sizeof(BUI_Widget_OnAnimationSequenceEvent) == 0x000018, "Wrong size on BUI_Widget_OnAnimationSequenceEvent");
//static_assert(offsetof(BUI_Widget_OnAnimationSequenceEvent, Animation) == 0x000000, "Member 'BUI_Widget_OnAnimationSequenceEvent::Animation' has a wrong offset!");
//static_assert(offsetof(BUI_Widget_OnAnimationSequenceEvent, EventName) == 0x000008, "Member 'BUI_Widget_OnAnimationSequenceEvent::EventName' has a wrong offset!");

// Function b1-Managed.BUI_Widget.OnKeyDown
// 0x0130 (0x0130 - 0x0000)
struct BUI_Widget_OnKeyDown final
{
public:
	struct FGeometry                              MyGeometry;                                        // 0x0000(0x0040)(Parm, IsPlainOldData, NoDestructor)
	struct FKeyEvent                              InKeyEvent;                                        // 0x0040(0x0038)(Parm)
	struct FEventReply                            ReturnValue;                                       // 0x0078(0x00B8)(Parm, OutParm, ReturnParm)
};
//static_assert(alignof(BUI_Widget_OnKeyDown) == 0x000008, "Wrong alignment on BUI_Widget_OnKeyDown");
//static_assert(sizeof(BUI_Widget_OnKeyDown) == 0x000130, "Wrong size on BUI_Widget_OnKeyDown");
//static_assert(offsetof(BUI_Widget_OnKeyDown, MyGeometry) == 0x000000, "Member 'BUI_Widget_OnKeyDown::MyGeometry' has a wrong offset!");
//static_assert(offsetof(BUI_Widget_OnKeyDown, InKeyEvent) == 0x000040, "Member 'BUI_Widget_OnKeyDown::InKeyEvent' has a wrong offset!");
//static_assert(offsetof(BUI_Widget_OnKeyDown, ReturnValue) == 0x000078, "Member 'BUI_Widget_OnKeyDown::ReturnValue' has a wrong offset!");

// Function b1-Managed.BUI_Widget.OnGSOnListItemObjectSet
// 0x0008 (0x0008 - 0x0000)
struct BUI_Widget_OnGSOnListItemObjectSet final
{
public:
	class UObject*                                ListItemObject;                                    // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
//static_assert(alignof(BUI_Widget_OnGSOnListItemObjectSet) == 0x000008, "Wrong alignment on BUI_Widget_OnGSOnListItemObjectSet");
//static_assert(sizeof(BUI_Widget_OnGSOnListItemObjectSet) == 0x000008, "Wrong size on BUI_Widget_OnGSOnListItemObjectSet");
//static_assert(offsetof(BUI_Widget_OnGSOnListItemObjectSet, ListItemObject) == 0x000000, "Member 'BUI_Widget_OnGSOnListItemObjectSet::ListItemObject' has a wrong offset!");

// Function b1-Managed.BUI_Widget.OnKeyUp
// 0x0130 (0x0130 - 0x0000)
struct BUI_Widget_OnKeyUp final
{
public:
	struct FGeometry                              MyGeometry;                                        // 0x0000(0x0040)(Parm, IsPlainOldData, NoDestructor)
	struct FKeyEvent                              InKeyEvent;                                        // 0x0040(0x0038)(Parm)
	struct FEventReply                            ReturnValue;                                       // 0x0078(0x00B8)(Parm, OutParm, ReturnParm)
};
//static_assert(alignof(BUI_Widget_OnKeyUp) == 0x000008, "Wrong alignment on BUI_Widget_OnKeyUp");
//static_assert(sizeof(BUI_Widget_OnKeyUp) == 0x000130, "Wrong size on BUI_Widget_OnKeyUp");
//static_assert(offsetof(BUI_Widget_OnKeyUp, MyGeometry) == 0x000000, "Member 'BUI_Widget_OnKeyUp::MyGeometry' has a wrong offset!");
//static_assert(offsetof(BUI_Widget_OnKeyUp, InKeyEvent) == 0x000040, "Member 'BUI_Widget_OnKeyUp::InKeyEvent' has a wrong offset!");
//static_assert(offsetof(BUI_Widget_OnKeyUp, ReturnValue) == 0x000078, "Member 'BUI_Widget_OnKeyUp::ReturnValue' has a wrong offset!");

// Function b1-Managed.BUI_Widget.WoodTestAnimKeyState
// 0x0030 (0x0030 - 0x0000)
struct BUI_Widget_WoodTestAnimKeyState final
{
public:
	class FString                                 AnimName;                                          // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash)
	class FString                                 TargetState;                                       // 0x0010(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash)
	float                                         InStateDelayEasingTime;                            // 0x0020(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         InStateOverideEasingTime;                          // 0x0024(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         IsForce : 1;                                       // 0x0028(0x0001)(BitIndex: 0x00, PropSize: 0x0001 (Parm, NoDestructor, HasGetValueTypeHash))
};
//static_assert(alignof(BUI_Widget_WoodTestAnimKeyState) == 0x000008, "Wrong alignment on BUI_Widget_WoodTestAnimKeyState");
//static_assert(sizeof(BUI_Widget_WoodTestAnimKeyState) == 0x000030, "Wrong size on BUI_Widget_WoodTestAnimKeyState");
//static_assert(offsetof(BUI_Widget_WoodTestAnimKeyState, AnimName) == 0x000000, "Member 'BUI_Widget_WoodTestAnimKeyState::AnimName' has a wrong offset!");
//static_assert(offsetof(BUI_Widget_WoodTestAnimKeyState, TargetState) == 0x000010, "Member 'BUI_Widget_WoodTestAnimKeyState::TargetState' has a wrong offset!");
//static_assert(offsetof(BUI_Widget_WoodTestAnimKeyState, InStateDelayEasingTime) == 0x000020, "Member 'BUI_Widget_WoodTestAnimKeyState::InStateDelayEasingTime' has a wrong offset!");
//static_assert(offsetof(BUI_Widget_WoodTestAnimKeyState, InStateOverideEasingTime) == 0x000024, "Member 'BUI_Widget_WoodTestAnimKeyState::InStateOverideEasingTime' has a wrong offset!");

// Function b1-Managed.BUI_Widget.Tick
// 0x0048 (0x0048 - 0x0000)
struct BUI_Widget_Tick final
{
public:
	struct FGeometry                              MyGeometry;                                        // 0x0000(0x0040)(Parm, IsPlainOldData, NoDestructor)
	float                                         InDeltaTime;                                       // 0x0040(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
//static_assert(alignof(BUI_Widget_Tick) == 0x000008, "Wrong alignment on BUI_Widget_Tick");
//static_assert(sizeof(BUI_Widget_Tick) == 0x000048, "Wrong size on BUI_Widget_Tick");
//static_assert(offsetof(BUI_Widget_Tick, MyGeometry) == 0x000000, "Member 'BUI_Widget_Tick::MyGeometry' has a wrong offset!");
//static_assert(offsetof(BUI_Widget_Tick, InDeltaTime) == 0x000040, "Member 'BUI_Widget_Tick::InDeltaTime' has a wrong offset!");

// Function b1-Managed.BUI_Widget.GSAnimKeyToState
// 0x0030 (0x0030 - 0x0000)
struct BUI_Widget_GSAnimKeyToState final
{
public:
	class FString                                 AnimName;                                          // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash)
	class FString                                 TargetState;                                       // 0x0010(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash)
	uint8                                         IsForce : 1;                                       // 0x0020(0x0001)(BitIndex: 0x00, PropSize: 0x0001 (Parm, NoDestructor, HasGetValueTypeHash))
	uint8                                         Pad_21[0x3];                                       // 0x0021(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         InStateDelayEasingTime;                            // 0x0024(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         InStateOverideEasingTime;                          // 0x0028(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
//static_assert(alignof(BUI_Widget_GSAnimKeyToState) == 0x000008, "Wrong alignment on BUI_Widget_GSAnimKeyToState");
//static_assert(sizeof(BUI_Widget_GSAnimKeyToState) == 0x000030, "Wrong size on BUI_Widget_GSAnimKeyToState");
//static_assert(offsetof(BUI_Widget_GSAnimKeyToState, AnimName) == 0x000000, "Member 'BUI_Widget_GSAnimKeyToState::AnimName' has a wrong offset!");
//static_assert(offsetof(BUI_Widget_GSAnimKeyToState, TargetState) == 0x000010, "Member 'BUI_Widget_GSAnimKeyToState::TargetState' has a wrong offset!");
//static_assert(offsetof(BUI_Widget_GSAnimKeyToState, InStateDelayEasingTime) == 0x000024, "Member 'BUI_Widget_GSAnimKeyToState::InStateDelayEasingTime' has a wrong offset!");
//static_assert(offsetof(BUI_Widget_GSAnimKeyToState, InStateOverideEasingTime) == 0x000028, "Member 'BUI_Widget_GSAnimKeyToState::InStateOverideEasingTime' has a wrong offset!");

// Function b1-Managed.BAN_GSBase.GSPostNotifyDebugCS
// 0x0048 (0x0048 - 0x0000)
struct BAN_GSBase_GSPostNotifyDebugCS final
{
public:
	struct FUStGSNotifyParam                      NotifyParam;                                       // 0x0000(0x0040)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
	int32                                         ReturnValue;                                       // 0x0040(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
//static_assert(alignof(BAN_GSBase_GSPostNotifyDebugCS) == 0x000008, "Wrong alignment on BAN_GSBase_GSPostNotifyDebugCS");
//static_assert(sizeof(BAN_GSBase_GSPostNotifyDebugCS) == 0x000048, "Wrong size on BAN_GSBase_GSPostNotifyDebugCS");
//static_assert(offsetof(BAN_GSBase_GSPostNotifyDebugCS, NotifyParam) == 0x000000, "Member 'BAN_GSBase_GSPostNotifyDebugCS::NotifyParam' has a wrong offset!");
//static_assert(offsetof(BAN_GSBase_GSPostNotifyDebugCS, ReturnValue) == 0x000040, "Member 'BAN_GSBase_GSPostNotifyDebugCS::ReturnValue' has a wrong offset!");

// Function b1-Managed.BAN_GSBase.GSPreNotifyDebugCS
// 0x0048 (0x0048 - 0x0000)
struct BAN_GSBase_GSPreNotifyDebugCS final
{
public:
	struct FUStGSNotifyParam                      NotifyParam;                                       // 0x0000(0x0040)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
	int32                                         ReturnValue;                                       // 0x0040(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
//static_assert(alignof(BAN_GSBase_GSPreNotifyDebugCS) == 0x000008, "Wrong alignment on BAN_GSBase_GSPreNotifyDebugCS");
//static_assert(sizeof(BAN_GSBase_GSPreNotifyDebugCS) == 0x000048, "Wrong size on BAN_GSBase_GSPreNotifyDebugCS");
//static_assert(offsetof(BAN_GSBase_GSPreNotifyDebugCS, NotifyParam) == 0x000000, "Member 'BAN_GSBase_GSPreNotifyDebugCS::NotifyParam' has a wrong offset!");
//static_assert(offsetof(BAN_GSBase_GSPreNotifyDebugCS, ReturnValue) == 0x000040, "Member 'BAN_GSBase_GSPreNotifyDebugCS::ReturnValue' has a wrong offset!");

// Function b1-Managed.BAN_GSBase.GetSoftReferences
// 0x0010 (0x0010 - 0x0000)
struct BAN_GSBase_GetSoftReferences final
{
public:
	TArray<struct FSoftObjectPath>                ReturnValue;                                       // 0x0000(0x0010)(Parm, OutParm, ReturnParm)
};
//static_assert(alignof(BAN_GSBase_GetSoftReferences) == 0x000008, "Wrong alignment on BAN_GSBase_GetSoftReferences");
//static_assert(sizeof(BAN_GSBase_GetSoftReferences) == 0x000010, "Wrong size on BAN_GSBase_GetSoftReferences");
//static_assert(offsetof(BAN_GSBase_GetSoftReferences, ReturnValue) == 0x000000, "Member 'BAN_GSBase_GetSoftReferences::ReturnValue' has a wrong offset!");

// Function b1-Managed.BAN_GSBase.GSValidateInputCS
// 0x0008 (0x0008 - 0x0000)
struct BAN_GSBase_GSValidateInputCS final
{
public:
	class AActor*                                 Actor;                                             // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
//static_assert(alignof(BAN_GSBase_GSValidateInputCS) == 0x000008, "Wrong alignment on BAN_GSBase_GSValidateInputCS");
//static_assert(sizeof(BAN_GSBase_GSValidateInputCS) == 0x000008, "Wrong size on BAN_GSBase_GSValidateInputCS");
//static_assert(offsetof(BAN_GSBase_GSValidateInputCS, Actor) == 0x000000, "Member 'BAN_GSBase_GSValidateInputCS::Actor' has a wrong offset!");

// Function b1-Managed.BAN_GSPlayNiagaraFX.GetSoftReferences
// 0x0010 (0x0010 - 0x0000)
struct BAN_GSPlayNiagaraFX_GetSoftReferences final
{
public:
	TArray<struct FSoftObjectPath>                ReturnValue;                                       // 0x0000(0x0010)(Parm, OutParm, ReturnParm)
};
//static_assert(alignof(BAN_GSPlayNiagaraFX_GetSoftReferences) == 0x000008, "Wrong alignment on BAN_GSPlayNiagaraFX_GetSoftReferences");
//static_assert(sizeof(BAN_GSPlayNiagaraFX_GetSoftReferences) == 0x000010, "Wrong size on BAN_GSPlayNiagaraFX_GetSoftReferences");
//static_assert(offsetof(BAN_GSPlayNiagaraFX_GetSoftReferences, ReturnValue) == 0x000000, "Member 'BAN_GSPlayNiagaraFX_GetSoftReferences::ReturnValue' has a wrong offset!");

// Function b1-Managed.BAN_GSPlayNiagaraFX.GetAnimNType
// 0x0001 (0x0001 - 0x0000)
struct BAN_GSPlayNiagaraFX_GetAnimNType final
{
public:
	EGsEnAnimN                                    ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
//static_assert(alignof(BAN_GSPlayNiagaraFX_GetAnimNType) == 0x000001, "Wrong alignment on BAN_GSPlayNiagaraFX_GetAnimNType");
//static_assert(sizeof(BAN_GSPlayNiagaraFX_GetAnimNType) == 0x000001, "Wrong size on BAN_GSPlayNiagaraFX_GetAnimNType");
//static_assert(offsetof(BAN_GSPlayNiagaraFX_GetAnimNType, ReturnValue) == 0x000000, "Member 'BAN_GSPlayNiagaraFX_GetAnimNType::ReturnValue' has a wrong offset!");

// Function b1-Managed.BAN_GSPlayNiagaraFX.GSNotifyCS
// 0x0040 (0x0040 - 0x0000)
struct BAN_GSPlayNiagaraFX_GSNotifyCS final
{
public:
	struct FUStGSNotifyParam                      NotifyParam;                                       // 0x0000(0x0040)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
//static_assert(alignof(BAN_GSPlayNiagaraFX_GSNotifyCS) == 0x000008, "Wrong alignment on BAN_GSPlayNiagaraFX_GSNotifyCS");
//static_assert(sizeof(BAN_GSPlayNiagaraFX_GSNotifyCS) == 0x000040, "Wrong size on BAN_GSPlayNiagaraFX_GSNotifyCS");
//static_assert(offsetof(BAN_GSPlayNiagaraFX_GSNotifyCS, NotifyParam) == 0x000000, "Member 'BAN_GSPlayNiagaraFX_GSNotifyCS::NotifyParam' has a wrong offset!");

// Function b1-Managed.BAN_GSPlayNiagaraFX_WithCondition.GSNotifyCS
// 0x0040 (0x0040 - 0x0000)
struct BAN_GSPlayNiagaraFX_WithCondition_GSNotifyCS final
{
public:
	struct FUStGSNotifyParam                      NotifyParam;                                       // 0x0000(0x0040)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
//static_assert(alignof(BAN_GSPlayNiagaraFX_WithCondition_GSNotifyCS) == 0x000008, "Wrong alignment on BAN_GSPlayNiagaraFX_WithCondition_GSNotifyCS");
//static_assert(sizeof(BAN_GSPlayNiagaraFX_WithCondition_GSNotifyCS) == 0x000040, "Wrong size on BAN_GSPlayNiagaraFX_WithCondition_GSNotifyCS");
//static_assert(offsetof(BAN_GSPlayNiagaraFX_WithCondition_GSNotifyCS, NotifyParam) == 0x000000, "Member 'BAN_GSPlayNiagaraFX_WithCondition_GSNotifyCS::NotifyParam' has a wrong offset!");

// Function b1-Managed.BED_FSMNode_Condition_GI_Loading_HasPlayerLoginBtlSvr.GetNodeDescriptionInCS
// 0x0010 (0x0010 - 0x0000)
struct BED_FSMNode_Condition_GI_Loading_HasPlayerLoginBtlSvr_GetNodeDescriptionInCS final
{
public:
	class FString                                 ReturnValue;                                       // 0x0000(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash)
};
//static_assert(alignof(BED_FSMNode_Condition_GI_Loading_HasPlayerLoginBtlSvr_GetNodeDescriptionInCS) == 0x000008, "Wrong alignment on BED_FSMNode_Condition_GI_Loading_HasPlayerLoginBtlSvr_GetNodeDescriptionInCS");
//static_assert(sizeof(BED_FSMNode_Condition_GI_Loading_HasPlayerLoginBtlSvr_GetNodeDescriptionInCS) == 0x000010, "Wrong size on BED_FSMNode_Condition_GI_Loading_HasPlayerLoginBtlSvr_GetNodeDescriptionInCS");
//static_assert(offsetof(BED_FSMNode_Condition_GI_Loading_HasPlayerLoginBtlSvr_GetNodeDescriptionInCS, ReturnValue) == 0x000000, "Member 'BED_FSMNode_Condition_GI_Loading_HasPlayerLoginBtlSvr_GetNodeDescriptionInCS::ReturnValue' has a wrong offset!");

// Function b1-Managed.AutoTestHelperLib.AutoTestInjectInputEvent
// 0x0020 (0x0020 - 0x0000)
struct AutoTestHelperLib_AutoTestInjectInputEvent final
{
public:
	class UObject*                                WorldContext;                                      // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class FString                                 ActionName;                                        // 0x0008(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash)
	ETriggerEvent                                 TriggerEvent;                                      // 0x0018(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
//static_assert(alignof(AutoTestHelperLib_AutoTestInjectInputEvent) == 0x000008, "Wrong alignment on AutoTestHelperLib_AutoTestInjectInputEvent");
//static_assert(sizeof(AutoTestHelperLib_AutoTestInjectInputEvent) == 0x000020, "Wrong size on AutoTestHelperLib_AutoTestInjectInputEvent");
//static_assert(offsetof(AutoTestHelperLib_AutoTestInjectInputEvent, WorldContext) == 0x000000, "Member 'AutoTestHelperLib_AutoTestInjectInputEvent::WorldContext' has a wrong offset!");
//static_assert(offsetof(AutoTestHelperLib_AutoTestInjectInputEvent, ActionName) == 0x000008, "Member 'AutoTestHelperLib_AutoTestInjectInputEvent::ActionName' has a wrong offset!");
//static_assert(offsetof(AutoTestHelperLib_AutoTestInjectInputEvent, TriggerEvent) == 0x000018, "Member 'AutoTestHelperLib_AutoTestInjectInputEvent::TriggerEvent' has a wrong offset!");

// Function b1-Managed.AutoTestHelperLib.RebirthPointChoiceClick
// 0x0020 (0x0020 - 0x0000)
struct AutoTestHelperLib_RebirthPointChoiceClick final
{
public:
	class UObject*                                WorldContext;                                      // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class FString                                 Choice;                                            // 0x0008(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash)
	uint8                                         ReturnValue : 1;                                   // 0x0018(0x0001)(BitIndex: 0x00, PropSize: 0x0001 (Parm, OutParm, ReturnParm, NoDestructor, HasGetValueTypeHash))
};
//static_assert(alignof(AutoTestHelperLib_RebirthPointChoiceClick) == 0x000008, "Wrong alignment on AutoTestHelperLib_RebirthPointChoiceClick");
//static_assert(sizeof(AutoTestHelperLib_RebirthPointChoiceClick) == 0x000020, "Wrong size on AutoTestHelperLib_RebirthPointChoiceClick");
//static_assert(offsetof(AutoTestHelperLib_RebirthPointChoiceClick, WorldContext) == 0x000000, "Member 'AutoTestHelperLib_RebirthPointChoiceClick::WorldContext' has a wrong offset!");
//static_assert(offsetof(AutoTestHelperLib_RebirthPointChoiceClick, Choice) == 0x000008, "Member 'AutoTestHelperLib_RebirthPointChoiceClick::Choice' has a wrong offset!");

// Function b1-Managed.AutoTestHelperLib.QAUploadPerformanceData
// 0x0038 (0x0038 - 0x0000)
struct AutoTestHelperLib_QAUploadPerformanceData final
{
public:
	class UObject*                                WorldContext;                                      // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class FString                                 Catelog;                                           // 0x0008(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash)
	class FString                                 Summary;                                           // 0x0018(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash)
	TArray<class FString>                         FileList;                                          // 0x0028(0x0010)(Parm)
};
//static_assert(alignof(AutoTestHelperLib_QAUploadPerformanceData) == 0x000008, "Wrong alignment on AutoTestHelperLib_QAUploadPerformanceData");
//static_assert(sizeof(AutoTestHelperLib_QAUploadPerformanceData) == 0x000038, "Wrong size on AutoTestHelperLib_QAUploadPerformanceData");
//static_assert(offsetof(AutoTestHelperLib_QAUploadPerformanceData, WorldContext) == 0x000000, "Member 'AutoTestHelperLib_QAUploadPerformanceData::WorldContext' has a wrong offset!");
//static_assert(offsetof(AutoTestHelperLib_QAUploadPerformanceData, Catelog) == 0x000008, "Member 'AutoTestHelperLib_QAUploadPerformanceData::Catelog' has a wrong offset!");
//static_assert(offsetof(AutoTestHelperLib_QAUploadPerformanceData, Summary) == 0x000018, "Member 'AutoTestHelperLib_QAUploadPerformanceData::Summary' has a wrong offset!");
//static_assert(offsetof(AutoTestHelperLib_QAUploadPerformanceData, FileList) == 0x000028, "Member 'AutoTestHelperLib_QAUploadPerformanceData::FileList' has a wrong offset!");

// Function b1-Managed.AutoTestHelperLib.GetActorLocationByName
// 0x0038 (0x0038 - 0x0000)
struct AutoTestHelperLib_GetActorLocationByName final
{
public:
	class UObject*                                WorldContext;                                      // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class FString                                 ActorName;                                         // 0x0008(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash)
	struct FVector                                ActorLocation;                                     // 0x0018(0x0018)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         ReturnValue : 1;                                   // 0x0030(0x0001)(BitIndex: 0x00, PropSize: 0x0001 (Parm, OutParm, ReturnParm, NoDestructor, HasGetValueTypeHash))
};
//static_assert(alignof(AutoTestHelperLib_GetActorLocationByName) == 0x000008, "Wrong alignment on AutoTestHelperLib_GetActorLocationByName");
//static_assert(sizeof(AutoTestHelperLib_GetActorLocationByName) == 0x000038, "Wrong size on AutoTestHelperLib_GetActorLocationByName");
//static_assert(offsetof(AutoTestHelperLib_GetActorLocationByName, WorldContext) == 0x000000, "Member 'AutoTestHelperLib_GetActorLocationByName::WorldContext' has a wrong offset!");
//static_assert(offsetof(AutoTestHelperLib_GetActorLocationByName, ActorName) == 0x000008, "Member 'AutoTestHelperLib_GetActorLocationByName::ActorName' has a wrong offset!");
//static_assert(offsetof(AutoTestHelperLib_GetActorLocationByName, ActorLocation) == 0x000018, "Member 'AutoTestHelperLib_GetActorLocationByName::ActorLocation' has a wrong offset!");

// Function b1-Managed.AutoTestHelperLib.IsPlayingCameraMovie
// 0x0010 (0x0010 - 0x0000)
struct AutoTestHelperLib_IsPlayingCameraMovie final
{
public:
	class UObject*                                WorldContext;                                      // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         ReturnValue : 1;                                   // 0x0008(0x0001)(BitIndex: 0x00, PropSize: 0x0001 (Parm, OutParm, ReturnParm, NoDestructor, HasGetValueTypeHash))
};
//static_assert(alignof(AutoTestHelperLib_IsPlayingCameraMovie) == 0x000008, "Wrong alignment on AutoTestHelperLib_IsPlayingCameraMovie");
//static_assert(sizeof(AutoTestHelperLib_IsPlayingCameraMovie) == 0x000010, "Wrong size on AutoTestHelperLib_IsPlayingCameraMovie");
//static_assert(offsetof(AutoTestHelperLib_IsPlayingCameraMovie, WorldContext) == 0x000000, "Member 'AutoTestHelperLib_IsPlayingCameraMovie::WorldContext' has a wrong offset!");

// Function b1-Managed.AutoTestHelperLib.GetPlayingSequenceID
// 0x0010 (0x0010 - 0x0000)
struct AutoTestHelperLib_GetPlayingSequenceID final
{
public:
	class UObject*                                WorldContext;                                      // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         SequenceID;                                        // 0x0008(0x0004)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         ReturnValue : 1;                                   // 0x000C(0x0001)(BitIndex: 0x00, PropSize: 0x0001 (Parm, OutParm, ReturnParm, NoDestructor, HasGetValueTypeHash))
};
//static_assert(alignof(AutoTestHelperLib_GetPlayingSequenceID) == 0x000008, "Wrong alignment on AutoTestHelperLib_GetPlayingSequenceID");
//static_assert(sizeof(AutoTestHelperLib_GetPlayingSequenceID) == 0x000010, "Wrong size on AutoTestHelperLib_GetPlayingSequenceID");
//static_assert(offsetof(AutoTestHelperLib_GetPlayingSequenceID, WorldContext) == 0x000000, "Member 'AutoTestHelperLib_GetPlayingSequenceID::WorldContext' has a wrong offset!");
//static_assert(offsetof(AutoTestHelperLib_GetPlayingSequenceID, SequenceID) == 0x000008, "Member 'AutoTestHelperLib_GetPlayingSequenceID::SequenceID' has a wrong offset!");

// Function b1-Managed.AutoTestHelperLib.GetPlayerTargetActor
// 0x0010 (0x0010 - 0x0000)
struct AutoTestHelperLib_GetPlayerTargetActor final
{
public:
	class UObject*                                WorldContext;                                      // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class ABGUCharacterCS*                        ReturnValue;                                       // 0x0008(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
//static_assert(alignof(AutoTestHelperLib_GetPlayerTargetActor) == 0x000008, "Wrong alignment on AutoTestHelperLib_GetPlayerTargetActor");
//static_assert(sizeof(AutoTestHelperLib_GetPlayerTargetActor) == 0x000010, "Wrong size on AutoTestHelperLib_GetPlayerTargetActor");
//static_assert(offsetof(AutoTestHelperLib_GetPlayerTargetActor, WorldContext) == 0x000000, "Member 'AutoTestHelperLib_GetPlayerTargetActor::WorldContext' has a wrong offset!");
//static_assert(offsetof(AutoTestHelperLib_GetPlayerTargetActor, ReturnValue) == 0x000008, "Member 'AutoTestHelperLib_GetPlayerTargetActor::ReturnValue' has a wrong offset!");

// Function b1-Managed.AutoTestHelperLib.GetTamerInViewCount
// 0x0008 (0x0008 - 0x0000)
struct AutoTestHelperLib_GetTamerInViewCount final
{
public:
	class UObject*                                WorldContext;                                      // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
//static_assert(alignof(AutoTestHelperLib_GetTamerInViewCount) == 0x000008, "Wrong alignment on AutoTestHelperLib_GetTamerInViewCount");
//static_assert(sizeof(AutoTestHelperLib_GetTamerInViewCount) == 0x000008, "Wrong size on AutoTestHelperLib_GetTamerInViewCount");
//static_assert(offsetof(AutoTestHelperLib_GetTamerInViewCount, WorldContext) == 0x000000, "Member 'AutoTestHelperLib_GetTamerInViewCount::WorldContext' has a wrong offset!");

// Function b1-Managed.AutoTestHelperLib.QAGetCurrentSkillID
// 0x0018 (0x0018 - 0x0000)
struct AutoTestHelperLib_QAGetCurrentSkillID final
{
public:
	class AActor*                                 Target;                                            // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class FString                                 ReturnValue;                                       // 0x0008(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash)
};
//static_assert(alignof(AutoTestHelperLib_QAGetCurrentSkillID) == 0x000008, "Wrong alignment on AutoTestHelperLib_QAGetCurrentSkillID");
//static_assert(sizeof(AutoTestHelperLib_QAGetCurrentSkillID) == 0x000018, "Wrong size on AutoTestHelperLib_QAGetCurrentSkillID");
//static_assert(offsetof(AutoTestHelperLib_QAGetCurrentSkillID, Target) == 0x000000, "Member 'AutoTestHelperLib_QAGetCurrentSkillID::Target' has a wrong offset!");
//static_assert(offsetof(AutoTestHelperLib_QAGetCurrentSkillID, ReturnValue) == 0x000008, "Member 'AutoTestHelperLib_QAGetCurrentSkillID::ReturnValue' has a wrong offset!");

// Function b1-Managed.AutoTestHelperLib.JudgeWidgetVisible
// 0x0010 (0x0010 - 0x0000)
struct AutoTestHelperLib_JudgeWidgetVisible final
{
public:
	class UWidget*                                Widget;                                            // 0x0000(0x0008)(ExportObject, Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         ReturnValue : 1;                                   // 0x0008(0x0001)(BitIndex: 0x00, PropSize: 0x0001 (Parm, OutParm, ReturnParm, NoDestructor, HasGetValueTypeHash))
};
//static_assert(alignof(AutoTestHelperLib_JudgeWidgetVisible) == 0x000008, "Wrong alignment on AutoTestHelperLib_JudgeWidgetVisible");
//static_assert(sizeof(AutoTestHelperLib_JudgeWidgetVisible) == 0x000010, "Wrong size on AutoTestHelperLib_JudgeWidgetVisible");
//static_assert(offsetof(AutoTestHelperLib_JudgeWidgetVisible, Widget) == 0x000000, "Member 'AutoTestHelperLib_JudgeWidgetVisible::Widget' has a wrong offset!");

// Function b1-Managed.AutoTestHelperLib.QAGetCurrentAMName
// 0x0018 (0x0018 - 0x0000)
struct AutoTestHelperLib_QAGetCurrentAMName final
{
public:
	class AActor*                                 Target;                                            // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class FString                                 ReturnValue;                                       // 0x0008(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash)
};
//static_assert(alignof(AutoTestHelperLib_QAGetCurrentAMName) == 0x000008, "Wrong alignment on AutoTestHelperLib_QAGetCurrentAMName");
//static_assert(sizeof(AutoTestHelperLib_QAGetCurrentAMName) == 0x000018, "Wrong size on AutoTestHelperLib_QAGetCurrentAMName");
//static_assert(offsetof(AutoTestHelperLib_QAGetCurrentAMName, Target) == 0x000000, "Member 'AutoTestHelperLib_QAGetCurrentAMName::Target' has a wrong offset!");
//static_assert(offsetof(AutoTestHelperLib_QAGetCurrentAMName, ReturnValue) == 0x000008, "Member 'AutoTestHelperLib_QAGetCurrentAMName::ReturnValue' has a wrong offset!");

// Function b1-Managed.AutoTestHelperLib.QAStringArraySort
// 0x0020 (0x0020 - 0x0000)
struct AutoTestHelperLib_QAStringArraySort final
{
public:
	TArray<class FString>                         StringList;                                        // 0x0000(0x0010)(Parm)
	TArray<class FString>                         ReturnValue;                                       // 0x0010(0x0010)(Parm, OutParm, ReturnParm)
};
//static_assert(alignof(AutoTestHelperLib_QAStringArraySort) == 0x000008, "Wrong alignment on AutoTestHelperLib_QAStringArraySort");
//static_assert(sizeof(AutoTestHelperLib_QAStringArraySort) == 0x000020, "Wrong size on AutoTestHelperLib_QAStringArraySort");
//static_assert(offsetof(AutoTestHelperLib_QAStringArraySort, StringList) == 0x000000, "Member 'AutoTestHelperLib_QAStringArraySort::StringList' has a wrong offset!");
//static_assert(offsetof(AutoTestHelperLib_QAStringArraySort, ReturnValue) == 0x000010, "Member 'AutoTestHelperLib_QAStringArraySort::ReturnValue' has a wrong offset!");

// Function b1-Managed.AutoTestHelperLib.GetUnitAllSkillID
// 0x0018 (0x0018 - 0x0000)
struct AutoTestHelperLib_GetUnitAllSkillID final
{
public:
	class AActor*                                 Unit;                                              // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	TArray<int32>                                 ReturnValue;                                       // 0x0008(0x0010)(Parm, OutParm, ReturnParm)
};
//static_assert(alignof(AutoTestHelperLib_GetUnitAllSkillID) == 0x000008, "Wrong alignment on AutoTestHelperLib_GetUnitAllSkillID");
//static_assert(sizeof(AutoTestHelperLib_GetUnitAllSkillID) == 0x000018, "Wrong size on AutoTestHelperLib_GetUnitAllSkillID");
//static_assert(offsetof(AutoTestHelperLib_GetUnitAllSkillID, Unit) == 0x000000, "Member 'AutoTestHelperLib_GetUnitAllSkillID::Unit' has a wrong offset!");
//static_assert(offsetof(AutoTestHelperLib_GetUnitAllSkillID, ReturnValue) == 0x000008, "Member 'AutoTestHelperLib_GetUnitAllSkillID::ReturnValue' has a wrong offset!");

// Function b1-Managed.AutoTestHelperLib.IsEquippingSpell
// 0x0010 (0x0010 - 0x0000)
struct AutoTestHelperLib_IsEquippingSpell final
{
public:
	class UObject*                                WorldContext;                                      // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         SpellID;                                           // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         ReturnValue : 1;                                   // 0x000C(0x0001)(BitIndex: 0x00, PropSize: 0x0001 (Parm, OutParm, ReturnParm, NoDestructor, HasGetValueTypeHash))
};
//static_assert(alignof(AutoTestHelperLib_IsEquippingSpell) == 0x000008, "Wrong alignment on AutoTestHelperLib_IsEquippingSpell");
//static_assert(sizeof(AutoTestHelperLib_IsEquippingSpell) == 0x000010, "Wrong size on AutoTestHelperLib_IsEquippingSpell");
//static_assert(offsetof(AutoTestHelperLib_IsEquippingSpell, WorldContext) == 0x000000, "Member 'AutoTestHelperLib_IsEquippingSpell::WorldContext' has a wrong offset!");
//static_assert(offsetof(AutoTestHelperLib_IsEquippingSpell, SpellID) == 0x000008, "Member 'AutoTestHelperLib_IsEquippingSpell::SpellID' has a wrong offset!");

// Function b1-Managed.AutoTestHelperLib.AutoMoveComplete
// 0x0008 (0x0008 - 0x0000)
struct AutoTestHelperLib_AutoMoveComplete final
{
public:
	class UObject*                                WorldContext;                                      // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
//static_assert(alignof(AutoTestHelperLib_AutoMoveComplete) == 0x000008, "Wrong alignment on AutoTestHelperLib_AutoMoveComplete");
//static_assert(sizeof(AutoTestHelperLib_AutoMoveComplete) == 0x000008, "Wrong size on AutoTestHelperLib_AutoMoveComplete");
//static_assert(offsetof(AutoTestHelperLib_AutoMoveComplete, WorldContext) == 0x000000, "Member 'AutoTestHelperLib_AutoMoveComplete::WorldContext' has a wrong offset!");

// Function b1-Managed.AutoTestHelperLib.CameraLockTarget
// 0x0010 (0x0010 - 0x0000)
struct AutoTestHelperLib_CameraLockTarget final
{
public:
	class UObject*                                WorldContext;                                      // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class AActor*                                 LockTarget;                                        // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
//static_assert(alignof(AutoTestHelperLib_CameraLockTarget) == 0x000008, "Wrong alignment on AutoTestHelperLib_CameraLockTarget");
//static_assert(sizeof(AutoTestHelperLib_CameraLockTarget) == 0x000010, "Wrong size on AutoTestHelperLib_CameraLockTarget");
//static_assert(offsetof(AutoTestHelperLib_CameraLockTarget, WorldContext) == 0x000000, "Member 'AutoTestHelperLib_CameraLockTarget::WorldContext' has a wrong offset!");
//static_assert(offsetof(AutoTestHelperLib_CameraLockTarget, LockTarget) == 0x000008, "Member 'AutoTestHelperLib_CameraLockTarget::LockTarget' has a wrong offset!");

// Function b1-Managed.AutoTestHelperLib.QADrawSkillRange
// 0x0010 (0x0010 - 0x0000)
struct AutoTestHelperLib_QADrawSkillRange final
{
public:
	class AActor*                                 Unit;                                              // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         SkillID;                                           // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         Duration;                                          // 0x000C(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
//static_assert(alignof(AutoTestHelperLib_QADrawSkillRange) == 0x000008, "Wrong alignment on AutoTestHelperLib_QADrawSkillRange");
//static_assert(sizeof(AutoTestHelperLib_QADrawSkillRange) == 0x000010, "Wrong size on AutoTestHelperLib_QADrawSkillRange");
//static_assert(offsetof(AutoTestHelperLib_QADrawSkillRange, Unit) == 0x000000, "Member 'AutoTestHelperLib_QADrawSkillRange::Unit' has a wrong offset!");
//static_assert(offsetof(AutoTestHelperLib_QADrawSkillRange, SkillID) == 0x000008, "Member 'AutoTestHelperLib_QADrawSkillRange::SkillID' has a wrong offset!");
//static_assert(offsetof(AutoTestHelperLib_QADrawSkillRange, Duration) == 0x00000C, "Member 'AutoTestHelperLib_QADrawSkillRange::Duration' has a wrong offset!");

// Function b1-Managed.AutoTestHelperLib.SetPlayerAttack
// 0x0010 (0x0010 - 0x0000)
struct AutoTestHelperLib_SetPlayerAttack final
{
public:
	class AActor*                                 Unit;                                              // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         AttackNum;                                         // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
//static_assert(alignof(AutoTestHelperLib_SetPlayerAttack) == 0x000008, "Wrong alignment on AutoTestHelperLib_SetPlayerAttack");
//static_assert(sizeof(AutoTestHelperLib_SetPlayerAttack) == 0x000010, "Wrong size on AutoTestHelperLib_SetPlayerAttack");
//static_assert(offsetof(AutoTestHelperLib_SetPlayerAttack, Unit) == 0x000000, "Member 'AutoTestHelperLib_SetPlayerAttack::Unit' has a wrong offset!");
//static_assert(offsetof(AutoTestHelperLib_SetPlayerAttack, AttackNum) == 0x000008, "Member 'AutoTestHelperLib_SetPlayerAttack::AttackNum' has a wrong offset!");

// Function b1-Managed.AutoTestHelperLib.CanUnitBeTarget
// 0x0010 (0x0010 - 0x0000)
struct AutoTestHelperLib_CanUnitBeTarget final
{
public:
	class ABGUCharacterCS*                        Enemy;                                             // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         ReturnValue : 1;                                   // 0x0008(0x0001)(BitIndex: 0x00, PropSize: 0x0001 (Parm, OutParm, ReturnParm, NoDestructor, HasGetValueTypeHash))
};
//static_assert(alignof(AutoTestHelperLib_CanUnitBeTarget) == 0x000008, "Wrong alignment on AutoTestHelperLib_CanUnitBeTarget");
//static_assert(sizeof(AutoTestHelperLib_CanUnitBeTarget) == 0x000010, "Wrong size on AutoTestHelperLib_CanUnitBeTarget");
//static_assert(offsetof(AutoTestHelperLib_CanUnitBeTarget, Enemy) == 0x000000, "Member 'AutoTestHelperLib_CanUnitBeTarget::Enemy' has a wrong offset!");

// Function b1-Managed.AutoTestHelperLib.GenShiXianFeng
// 0x0008 (0x0008 - 0x0000)
struct AutoTestHelperLib_GenShiXianFeng final
{
public:
	class UWorld*                                 World;                                             // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
//static_assert(alignof(AutoTestHelperLib_GenShiXianFeng) == 0x000008, "Wrong alignment on AutoTestHelperLib_GenShiXianFeng");
//static_assert(sizeof(AutoTestHelperLib_GenShiXianFeng) == 0x000008, "Wrong size on AutoTestHelperLib_GenShiXianFeng");
//static_assert(offsetof(AutoTestHelperLib_GenShiXianFeng, World) == 0x000000, "Member 'AutoTestHelperLib_GenShiXianFeng::World' has a wrong offset!");

// Function b1-Managed.AutoTestHelperLib.IsUnitInBattle
// 0x0010 (0x0010 - 0x0000)
struct AutoTestHelperLib_IsUnitInBattle final
{
public:
	class AActor*                                 Unit;                                              // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         ReturnValue : 1;                                   // 0x0008(0x0001)(BitIndex: 0x00, PropSize: 0x0001 (Parm, OutParm, ReturnParm, NoDestructor, HasGetValueTypeHash))
};
//static_assert(alignof(AutoTestHelperLib_IsUnitInBattle) == 0x000008, "Wrong alignment on AutoTestHelperLib_IsUnitInBattle");
//static_assert(sizeof(AutoTestHelperLib_IsUnitInBattle) == 0x000010, "Wrong size on AutoTestHelperLib_IsUnitInBattle");
//static_assert(offsetof(AutoTestHelperLib_IsUnitInBattle, Unit) == 0x000000, "Member 'AutoTestHelperLib_IsUnitInBattle::Unit' has a wrong offset!");

// Function b1-Managed.AutoTestHelperLib.FindNearbyUnit
// 0x0030 (0x0030 - 0x0000)
struct AutoTestHelperLib_FindNearbyUnit final
{
public:
	class UObject*                                WorldContext;                                      // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         AttackRadius;                                      // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class ABGUCharacterCS*                        EnemyUnit;                                         // 0x0010(0x0008)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class FString                                 UnitBP;                                            // 0x0018(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash)
	uint8                                         ReturnValue : 1;                                   // 0x0028(0x0001)(BitIndex: 0x00, PropSize: 0x0001 (Parm, OutParm, ReturnParm, NoDestructor, HasGetValueTypeHash))
};
//static_assert(alignof(AutoTestHelperLib_FindNearbyUnit) == 0x000008, "Wrong alignment on AutoTestHelperLib_FindNearbyUnit");
//static_assert(sizeof(AutoTestHelperLib_FindNearbyUnit) == 0x000030, "Wrong size on AutoTestHelperLib_FindNearbyUnit");
//static_assert(offsetof(AutoTestHelperLib_FindNearbyUnit, WorldContext) == 0x000000, "Member 'AutoTestHelperLib_FindNearbyUnit::WorldContext' has a wrong offset!");
//static_assert(offsetof(AutoTestHelperLib_FindNearbyUnit, AttackRadius) == 0x000008, "Member 'AutoTestHelperLib_FindNearbyUnit::AttackRadius' has a wrong offset!");
//static_assert(offsetof(AutoTestHelperLib_FindNearbyUnit, EnemyUnit) == 0x000010, "Member 'AutoTestHelperLib_FindNearbyUnit::EnemyUnit' has a wrong offset!");
//static_assert(offsetof(AutoTestHelperLib_FindNearbyUnit, UnitBP) == 0x000018, "Member 'AutoTestHelperLib_FindNearbyUnit::UnitBP' has a wrong offset!");

// Function b1-Managed.AutoTestHelperLib.ReadDataTable
// 0x0018 (0x0018 - 0x0000)
struct AutoTestHelperLib_ReadDataTable final
{
public:
	int32                                         ID;                                                // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_4[0x4];                                        // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 ReturnValue;                                       // 0x0008(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash)
};
//static_assert(alignof(AutoTestHelperLib_ReadDataTable) == 0x000008, "Wrong alignment on AutoTestHelperLib_ReadDataTable");
//static_assert(sizeof(AutoTestHelperLib_ReadDataTable) == 0x000018, "Wrong size on AutoTestHelperLib_ReadDataTable");
//static_assert(offsetof(AutoTestHelperLib_ReadDataTable, ID) == 0x000000, "Member 'AutoTestHelperLib_ReadDataTable::ID' has a wrong offset!");
//static_assert(offsetof(AutoTestHelperLib_ReadDataTable, ReturnValue) == 0x000008, "Member 'AutoTestHelperLib_ReadDataTable::ReturnValue' has a wrong offset!");

// Function b1-Managed.AutoTestHelperLib.HasItemNumber
// 0x0010 (0x0010 - 0x0000)
struct AutoTestHelperLib_HasItemNumber final
{
public:
	class UObject*                                WorldContext;                                      // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         ItemId;                                            // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         ReturnValue;                                       // 0x000C(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
//static_assert(alignof(AutoTestHelperLib_HasItemNumber) == 0x000008, "Wrong alignment on AutoTestHelperLib_HasItemNumber");
//static_assert(sizeof(AutoTestHelperLib_HasItemNumber) == 0x000010, "Wrong size on AutoTestHelperLib_HasItemNumber");
//static_assert(offsetof(AutoTestHelperLib_HasItemNumber, WorldContext) == 0x000000, "Member 'AutoTestHelperLib_HasItemNumber::WorldContext' has a wrong offset!");
//static_assert(offsetof(AutoTestHelperLib_HasItemNumber, ItemId) == 0x000008, "Member 'AutoTestHelperLib_HasItemNumber::ItemId' has a wrong offset!");
//static_assert(offsetof(AutoTestHelperLib_HasItemNumber, ReturnValue) == 0x00000C, "Member 'AutoTestHelperLib_HasItemNumber::ReturnValue' has a wrong offset!");

// Function b1-Managed.AutoTestHelperLib.RunToPosition
// 0x0028 (0x0028 - 0x0000)
struct AutoTestHelperLib_RunToPosition final
{
public:
	class UObject*                                WorldContext;                                      // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                TargetLocation;                                    // 0x0008(0x0018)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         ReachRadius;                                       // 0x0020(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         ReturnValue : 1;                                   // 0x0024(0x0001)(BitIndex: 0x00, PropSize: 0x0001 (Parm, OutParm, ReturnParm, NoDestructor, HasGetValueTypeHash))
};
//static_assert(alignof(AutoTestHelperLib_RunToPosition) == 0x000008, "Wrong alignment on AutoTestHelperLib_RunToPosition");
//static_assert(sizeof(AutoTestHelperLib_RunToPosition) == 0x000028, "Wrong size on AutoTestHelperLib_RunToPosition");
//static_assert(offsetof(AutoTestHelperLib_RunToPosition, WorldContext) == 0x000000, "Member 'AutoTestHelperLib_RunToPosition::WorldContext' has a wrong offset!");
//static_assert(offsetof(AutoTestHelperLib_RunToPosition, TargetLocation) == 0x000008, "Member 'AutoTestHelperLib_RunToPosition::TargetLocation' has a wrong offset!");
//static_assert(offsetof(AutoTestHelperLib_RunToPosition, ReachRadius) == 0x000020, "Member 'AutoTestHelperLib_RunToPosition::ReachRadius' has a wrong offset!");

// Function b1-Managed.AutoTestHelperLib.RemoveGroupAI
// 0x0010 (0x0010 - 0x0000)
struct AutoTestHelperLib_RemoveGroupAI final
{
public:
	class UObject*                                WorldContext;                                      // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class AActor*                                 OwnerActor;                                        // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
//static_assert(alignof(AutoTestHelperLib_RemoveGroupAI) == 0x000008, "Wrong alignment on AutoTestHelperLib_RemoveGroupAI");
//static_assert(sizeof(AutoTestHelperLib_RemoveGroupAI) == 0x000010, "Wrong size on AutoTestHelperLib_RemoveGroupAI");
//static_assert(offsetof(AutoTestHelperLib_RemoveGroupAI, WorldContext) == 0x000000, "Member 'AutoTestHelperLib_RemoveGroupAI::WorldContext' has a wrong offset!");
//static_assert(offsetof(AutoTestHelperLib_RemoveGroupAI, OwnerActor) == 0x000008, "Member 'AutoTestHelperLib_RemoveGroupAI::OwnerActor' has a wrong offset!");

// Function b1-Managed.AutoTestHelperLib.SetCurrentHp
// 0x0010 (0x0010 - 0x0000)
struct AutoTestHelperLib_SetCurrentHp final
{
public:
	class AActor*                                 Unit;                                              // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Hp;                                                // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
//static_assert(alignof(AutoTestHelperLib_SetCurrentHp) == 0x000008, "Wrong alignment on AutoTestHelperLib_SetCurrentHp");
//static_assert(sizeof(AutoTestHelperLib_SetCurrentHp) == 0x000010, "Wrong size on AutoTestHelperLib_SetCurrentHp");
//static_assert(offsetof(AutoTestHelperLib_SetCurrentHp, Unit) == 0x000000, "Member 'AutoTestHelperLib_SetCurrentHp::Unit' has a wrong offset!");
//static_assert(offsetof(AutoTestHelperLib_SetCurrentHp, Hp) == 0x000008, "Member 'AutoTestHelperLib_SetCurrentHp::Hp' has a wrong offset!");

// Function b1-Managed.AutoTestHelperLib.MouseGoBack
// 0x0008 (0x0008 - 0x0000)
struct AutoTestHelperLib_MouseGoBack final
{
public:
	class UObject*                                WorldContext;                                      // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
//static_assert(alignof(AutoTestHelperLib_MouseGoBack) == 0x000008, "Wrong alignment on AutoTestHelperLib_MouseGoBack");
//static_assert(sizeof(AutoTestHelperLib_MouseGoBack) == 0x000008, "Wrong size on AutoTestHelperLib_MouseGoBack");
//static_assert(offsetof(AutoTestHelperLib_MouseGoBack, WorldContext) == 0x000000, "Member 'AutoTestHelperLib_MouseGoBack::WorldContext' has a wrong offset!");

// Function b1-Managed.AutoTestHelperLib.HeavyAttack
// 0x0008 (0x0008 - 0x0000)
struct AutoTestHelperLib_HeavyAttack final
{
public:
	class UObject*                                WorldContext;                                      // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
//static_assert(alignof(AutoTestHelperLib_HeavyAttack) == 0x000008, "Wrong alignment on AutoTestHelperLib_HeavyAttack");
//static_assert(sizeof(AutoTestHelperLib_HeavyAttack) == 0x000008, "Wrong size on AutoTestHelperLib_HeavyAttack");
//static_assert(offsetof(AutoTestHelperLib_HeavyAttack, WorldContext) == 0x000000, "Member 'AutoTestHelperLib_HeavyAttack::WorldContext' has a wrong offset!");

// Function b1-Managed.AutoTestHelperLib.LightAttack
// 0x0008 (0x0008 - 0x0000)
struct AutoTestHelperLib_LightAttack final
{
public:
	class UObject*                                WorldContext;                                      // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
//static_assert(alignof(AutoTestHelperLib_LightAttack) == 0x000008, "Wrong alignment on AutoTestHelperLib_LightAttack");
//static_assert(sizeof(AutoTestHelperLib_LightAttack) == 0x000008, "Wrong size on AutoTestHelperLib_LightAttack");
//static_assert(offsetof(AutoTestHelperLib_LightAttack, WorldContext) == 0x000000, "Member 'AutoTestHelperLib_LightAttack::WorldContext' has a wrong offset!");

// Function b1-Managed.AutoTestHelperLib.ClickButton
// 0x0008 (0x0008 - 0x0000)
struct AutoTestHelperLib_ClickButton final
{
public:
	class UWidget*                                Btn;                                               // 0x0000(0x0008)(ExportObject, Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
//static_assert(alignof(AutoTestHelperLib_ClickButton) == 0x000008, "Wrong alignment on AutoTestHelperLib_ClickButton");
//static_assert(sizeof(AutoTestHelperLib_ClickButton) == 0x000008, "Wrong size on AutoTestHelperLib_ClickButton");
//static_assert(offsetof(AutoTestHelperLib_ClickButton, Btn) == 0x000000, "Member 'AutoTestHelperLib_ClickButton::Btn' has a wrong offset!");

// Function b1-Managed.AutoTestHelperLib.RunToEnemy
// 0x0018 (0x0018 - 0x0000)
struct AutoTestHelperLib_RunToEnemy final
{
public:
	class UObject*                                WorldContext;                                      // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class ABGUCharacterCS*                        Enemy;                                             // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         ReachRadius;                                       // 0x0010(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         ReturnValue : 1;                                   // 0x0014(0x0001)(BitIndex: 0x00, PropSize: 0x0001 (Parm, OutParm, ReturnParm, NoDestructor, HasGetValueTypeHash))
};
//static_assert(alignof(AutoTestHelperLib_RunToEnemy) == 0x000008, "Wrong alignment on AutoTestHelperLib_RunToEnemy");
//static_assert(sizeof(AutoTestHelperLib_RunToEnemy) == 0x000018, "Wrong size on AutoTestHelperLib_RunToEnemy");
//static_assert(offsetof(AutoTestHelperLib_RunToEnemy, WorldContext) == 0x000000, "Member 'AutoTestHelperLib_RunToEnemy::WorldContext' has a wrong offset!");
//static_assert(offsetof(AutoTestHelperLib_RunToEnemy, Enemy) == 0x000008, "Member 'AutoTestHelperLib_RunToEnemy::Enemy' has a wrong offset!");
//static_assert(offsetof(AutoTestHelperLib_RunToEnemy, ReachRadius) == 0x000010, "Member 'AutoTestHelperLib_RunToEnemy::ReachRadius' has a wrong offset!");

// Function b1-Managed.AutoTestHelperLib.KillEnemy
// 0x0010 (0x0010 - 0x0000)
struct AutoTestHelperLib_KillEnemy final
{
public:
	class UObject*                                WorldContext;                                      // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class AActor*                                 KillTarget;                                        // 0x0008(0x0008)(Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
//static_assert(alignof(AutoTestHelperLib_KillEnemy) == 0x000008, "Wrong alignment on AutoTestHelperLib_KillEnemy");
//static_assert(sizeof(AutoTestHelperLib_KillEnemy) == 0x000010, "Wrong size on AutoTestHelperLib_KillEnemy");
//static_assert(offsetof(AutoTestHelperLib_KillEnemy, WorldContext) == 0x000000, "Member 'AutoTestHelperLib_KillEnemy::WorldContext' has a wrong offset!");
//static_assert(offsetof(AutoTestHelperLib_KillEnemy, KillTarget) == 0x000008, "Member 'AutoTestHelperLib_KillEnemy::KillTarget' has a wrong offset!");

// Function b1-Managed.AutoTestHelperLib.QAPauseBT
// 0x0010 (0x0010 - 0x0000)
struct AutoTestHelperLib_QAPauseBT final
{
public:
	class AActor*                                 Unit;                                              // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Status : 1;                                        // 0x0008(0x0001)(BitIndex: 0x00, PropSize: 0x0001 (Parm, NoDestructor, HasGetValueTypeHash))
};
//static_assert(alignof(AutoTestHelperLib_QAPauseBT) == 0x000008, "Wrong alignment on AutoTestHelperLib_QAPauseBT");
//static_assert(sizeof(AutoTestHelperLib_QAPauseBT) == 0x000010, "Wrong size on AutoTestHelperLib_QAPauseBT");
//static_assert(offsetof(AutoTestHelperLib_QAPauseBT, Unit) == 0x000000, "Member 'AutoTestHelperLib_QAPauseBT::Unit' has a wrong offset!");

// Function b1-Managed.AutoTestHelperLib.CastSpell
// 0x0010 (0x0010 - 0x0000)
struct AutoTestHelperLib_CastSpell final
{
public:
	class UObject*                                WorldContext;                                      // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	ESpellType                                    SkillType;                                         // 0x0008(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
//static_assert(alignof(AutoTestHelperLib_CastSpell) == 0x000008, "Wrong alignment on AutoTestHelperLib_CastSpell");
//static_assert(sizeof(AutoTestHelperLib_CastSpell) == 0x000010, "Wrong size on AutoTestHelperLib_CastSpell");
//static_assert(offsetof(AutoTestHelperLib_CastSpell, WorldContext) == 0x000000, "Member 'AutoTestHelperLib_CastSpell::WorldContext' has a wrong offset!");
//static_assert(offsetof(AutoTestHelperLib_CastSpell, SkillType) == 0x000008, "Member 'AutoTestHelperLib_CastSpell::SkillType' has a wrong offset!");

// Function b1-Managed.AutoTestHelperLib.Interact
// 0x0010 (0x0010 - 0x0000)
struct AutoTestHelperLib_Interact final
{
public:
	class UObject*                                WorldContext;                                      // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         ReturnValue : 1;                                   // 0x0008(0x0001)(BitIndex: 0x00, PropSize: 0x0001 (Parm, OutParm, ReturnParm, NoDestructor, HasGetValueTypeHash))
};
//static_assert(alignof(AutoTestHelperLib_Interact) == 0x000008, "Wrong alignment on AutoTestHelperLib_Interact");
//static_assert(sizeof(AutoTestHelperLib_Interact) == 0x000010, "Wrong size on AutoTestHelperLib_Interact");
//static_assert(offsetof(AutoTestHelperLib_Interact, WorldContext) == 0x000000, "Member 'AutoTestHelperLib_Interact::WorldContext' has a wrong offset!");

// Function b1-Managed.AutoTestHelperLib.HasSpell
// 0x0010 (0x0010 - 0x0000)
struct AutoTestHelperLib_HasSpell final
{
public:
	class UObject*                                WorldContext;                                      // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         SpellID;                                           // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         ReturnValue : 1;                                   // 0x000C(0x0001)(BitIndex: 0x00, PropSize: 0x0001 (Parm, OutParm, ReturnParm, NoDestructor, HasGetValueTypeHash))
};
//static_assert(alignof(AutoTestHelperLib_HasSpell) == 0x000008, "Wrong alignment on AutoTestHelperLib_HasSpell");
//static_assert(sizeof(AutoTestHelperLib_HasSpell) == 0x000010, "Wrong size on AutoTestHelperLib_HasSpell");
//static_assert(offsetof(AutoTestHelperLib_HasSpell, WorldContext) == 0x000000, "Member 'AutoTestHelperLib_HasSpell::WorldContext' has a wrong offset!");
//static_assert(offsetof(AutoTestHelperLib_HasSpell, SpellID) == 0x000008, "Member 'AutoTestHelperLib_HasSpell::SpellID' has a wrong offset!");

// Function b1-Managed.AutoTestHelperLib.SetMaxHp
// 0x0008 (0x0008 - 0x0000)
struct AutoTestHelperLib_SetMaxHp final
{
public:
	class AActor*                                 Unit;                                              // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
//static_assert(alignof(AutoTestHelperLib_SetMaxHp) == 0x000008, "Wrong alignment on AutoTestHelperLib_SetMaxHp");
//static_assert(sizeof(AutoTestHelperLib_SetMaxHp) == 0x000008, "Wrong size on AutoTestHelperLib_SetMaxHp");
//static_assert(offsetof(AutoTestHelperLib_SetMaxHp, Unit) == 0x000000, "Member 'AutoTestHelperLib_SetMaxHp::Unit' has a wrong offset!");

// Function b1-Managed.AutoTestHelperLib.GenActor
// 0x0010 (0x0010 - 0x0000)
struct AutoTestHelperLib_GenActor final
{
public:
	class UWorld*                                 World;                                             // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UClass*                                 ActorClass;                                        // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
//static_assert(alignof(AutoTestHelperLib_GenActor) == 0x000008, "Wrong alignment on AutoTestHelperLib_GenActor");
//static_assert(sizeof(AutoTestHelperLib_GenActor) == 0x000010, "Wrong size on AutoTestHelperLib_GenActor");
//static_assert(offsetof(AutoTestHelperLib_GenActor, World) == 0x000000, "Member 'AutoTestHelperLib_GenActor::World' has a wrong offset!");
//static_assert(offsetof(AutoTestHelperLib_GenActor, ActorClass) == 0x000008, "Member 'AutoTestHelperLib_GenActor::ActorClass' has a wrong offset!");

// Function b1-Managed.AutoTestHelperLib.FindText
// 0x0020 (0x0020 - 0x0000)
struct AutoTestHelperLib_FindText final
{
public:
	class UObject*                                WorldContext;                                      // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class FString                                 Text;                                              // 0x0008(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash)
	uint8                                         bNeedClick : 1;                                    // 0x0018(0x0001)(BitIndex: 0x00, PropSize: 0x0001 (Parm, NoDestructor, HasGetValueTypeHash))
	uint8                                         BitPad_18_1 : 7;                                   // 0x0018(0x0001)(Fixing Bit-Field Size For New Byte [ Dumper-7 ])
	uint8                                         ReturnValue : 1;                                   // 0x0019(0x0001)(BitIndex: 0x00, PropSize: 0x0001 (Parm, OutParm, ReturnParm, NoDestructor, HasGetValueTypeHash))
};
//static_assert(alignof(AutoTestHelperLib_FindText) == 0x000008, "Wrong alignment on AutoTestHelperLib_FindText");
//static_assert(sizeof(AutoTestHelperLib_FindText) == 0x000020, "Wrong size on AutoTestHelperLib_FindText");
//static_assert(offsetof(AutoTestHelperLib_FindText, WorldContext) == 0x000000, "Member 'AutoTestHelperLib_FindText::WorldContext' has a wrong offset!");
//static_assert(offsetof(AutoTestHelperLib_FindText, Text) == 0x000008, "Member 'AutoTestHelperLib_FindText::Text' has a wrong offset!");

// Function b1-Managed.AutoTestHelperLib.TestCode
// 0x0008 (0x0008 - 0x0000)
struct AutoTestHelperLib_TestCode final
{
public:
	class UObject*                                WorldContext;                                      // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
//static_assert(alignof(AutoTestHelperLib_TestCode) == 0x000008, "Wrong alignment on AutoTestHelperLib_TestCode");
//static_assert(sizeof(AutoTestHelperLib_TestCode) == 0x000008, "Wrong size on AutoTestHelperLib_TestCode");
//static_assert(offsetof(AutoTestHelperLib_TestCode, WorldContext) == 0x000000, "Member 'AutoTestHelperLib_TestCode::WorldContext' has a wrong offset!");

// Function b1-Managed.AutoTestHelperLib.OpenBag
// 0x0010 (0x0010 - 0x0000)
struct AutoTestHelperLib_OpenBag final
{
public:
	class UObject*                                WorldContext;                                      // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         IsOpen : 1;                                        // 0x0008(0x0001)(BitIndex: 0x00, PropSize: 0x0001 (Parm, NoDestructor, HasGetValueTypeHash))
};
//static_assert(alignof(AutoTestHelperLib_OpenBag) == 0x000008, "Wrong alignment on AutoTestHelperLib_OpenBag");
//static_assert(sizeof(AutoTestHelperLib_OpenBag) == 0x000010, "Wrong size on AutoTestHelperLib_OpenBag");
//static_assert(offsetof(AutoTestHelperLib_OpenBag, WorldContext) == 0x000000, "Member 'AutoTestHelperLib_OpenBag::WorldContext' has a wrong offset!");

// Function b1-Managed.AutoTestHelperLib.Dodge
// 0x0008 (0x0008 - 0x0000)
struct AutoTestHelperLib_Dodge final
{
public:
	class UObject*                                WorldContext;                                      // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
//static_assert(alignof(AutoTestHelperLib_Dodge) == 0x000008, "Wrong alignment on AutoTestHelperLib_Dodge");
//static_assert(sizeof(AutoTestHelperLib_Dodge) == 0x000008, "Wrong size on AutoTestHelperLib_Dodge");
//static_assert(offsetof(AutoTestHelperLib_Dodge, WorldContext) == 0x000000, "Member 'AutoTestHelperLib_Dodge::WorldContext' has a wrong offset!");

// Function b1-Managed.AutoTestHelperLib.Jump
// 0x0008 (0x0008 - 0x0000)
struct AutoTestHelperLib_Jump final
{
public:
	class UObject*                                WorldContext;                                      // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
//static_assert(alignof(AutoTestHelperLib_Jump) == 0x000008, "Wrong alignment on AutoTestHelperLib_Jump");
//static_assert(sizeof(AutoTestHelperLib_Jump) == 0x000008, "Wrong size on AutoTestHelperLib_Jump");
//static_assert(offsetof(AutoTestHelperLib_Jump, WorldContext) == 0x000000, "Member 'AutoTestHelperLib_Jump::WorldContext' has a wrong offset!");

// Function b1-Managed.BAN_GSClearComboKeyCache.bIsNativeBranchingPointCS
// 0x0001 (0x0001 - 0x0000)
struct BAN_GSClearComboKeyCache_bIsNativeBranchingPointCS final
{
public:
	uint8                                         ReturnValue : 1;                                   // 0x0000(0x0001)(BitIndex: 0x00, PropSize: 0x0001 (Parm, OutParm, ReturnParm, NoDestructor, HasGetValueTypeHash))
};
//static_assert(alignof(BAN_GSClearComboKeyCache_bIsNativeBranchingPointCS) == 0x000001, "Wrong alignment on BAN_GSClearComboKeyCache_bIsNativeBranchingPointCS");
//static_assert(sizeof(BAN_GSClearComboKeyCache_bIsNativeBranchingPointCS) == 0x000001, "Wrong size on BAN_GSClearComboKeyCache_bIsNativeBranchingPointCS");

// Function b1-Managed.BAN_GSClearComboKeyCache.GSNotifyCS
// 0x0040 (0x0040 - 0x0000)
struct BAN_GSClearComboKeyCache_GSNotifyCS final
{
public:
	struct FUStGSNotifyParam                      NotifyParam;                                       // 0x0000(0x0040)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
//static_assert(alignof(BAN_GSClearComboKeyCache_GSNotifyCS) == 0x000008, "Wrong alignment on BAN_GSClearComboKeyCache_GSNotifyCS");
//static_assert(sizeof(BAN_GSClearComboKeyCache_GSNotifyCS) == 0x000040, "Wrong size on BAN_GSClearComboKeyCache_GSNotifyCS");
//static_assert(offsetof(BAN_GSClearComboKeyCache_GSNotifyCS, NotifyParam) == 0x000000, "Member 'BAN_GSClearComboKeyCache_GSNotifyCS::NotifyParam' has a wrong offset!");

// Function b1-Managed.BAN_DispLibChangeUnitMaterial.GSNotifyCS
// 0x0040 (0x0040 - 0x0000)
struct BAN_DispLibChangeUnitMaterial_GSNotifyCS final
{
public:
	struct FUStGSNotifyParam                      NotifyParam;                                       // 0x0000(0x0040)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
//static_assert(alignof(BAN_DispLibChangeUnitMaterial_GSNotifyCS) == 0x000008, "Wrong alignment on BAN_DispLibChangeUnitMaterial_GSNotifyCS");
//static_assert(sizeof(BAN_DispLibChangeUnitMaterial_GSNotifyCS) == 0x000040, "Wrong size on BAN_DispLibChangeUnitMaterial_GSNotifyCS");
//static_assert(offsetof(BAN_DispLibChangeUnitMaterial_GSNotifyCS, NotifyParam) == 0x000000, "Member 'BAN_DispLibChangeUnitMaterial_GSNotifyCS::NotifyParam' has a wrong offset!");

// Function b1-Managed.AutoTest_Template.ReceiveTick
// 0x0004 (0x0004 - 0x0000)
struct AutoTest_Template_ReceiveTick final
{
public:
	float                                         DeltaTime;                                         // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
//static_assert(alignof(AutoTest_Template_ReceiveTick) == 0x000004, "Wrong alignment on AutoTest_Template_ReceiveTick");
//static_assert(sizeof(AutoTest_Template_ReceiveTick) == 0x000004, "Wrong size on AutoTest_Template_ReceiveTick");
//static_assert(offsetof(AutoTest_Template_ReceiveTick, DeltaTime) == 0x000000, "Member 'AutoTest_Template_ReceiveTick::DeltaTime' has a wrong offset!");

// Function b1-Managed.BED_BehaviorNode_OnSkillValidAttackFrameEnded.GetNodeDescriptionInCS
// 0x0010 (0x0010 - 0x0000)
struct BED_BehaviorNode_OnSkillValidAttackFrameEnded_GetNodeDescriptionInCS final
{
public:
	class FString                                 ReturnValue;                                       // 0x0000(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash)
};
//static_assert(alignof(BED_BehaviorNode_OnSkillValidAttackFrameEnded_GetNodeDescriptionInCS) == 0x000008, "Wrong alignment on BED_BehaviorNode_OnSkillValidAttackFrameEnded_GetNodeDescriptionInCS");
//static_assert(sizeof(BED_BehaviorNode_OnSkillValidAttackFrameEnded_GetNodeDescriptionInCS) == 0x000010, "Wrong size on BED_BehaviorNode_OnSkillValidAttackFrameEnded_GetNodeDescriptionInCS");
//static_assert(offsetof(BED_BehaviorNode_OnSkillValidAttackFrameEnded_GetNodeDescriptionInCS, ReturnValue) == 0x000000, "Member 'BED_BehaviorNode_OnSkillValidAttackFrameEnded_GetNodeDescriptionInCS::ReturnValue' has a wrong offset!");

// Function b1-Managed.BED_BehaviorNode_OnSkillValidAttackFrameEnded.IsSupportViewType
// 0x0002 (0x0002 - 0x0000)
struct BED_BehaviorNode_OnSkillValidAttackFrameEnded_IsSupportViewType final
{
public:
	ECalliopeViewType                             InViewType;                                        // 0x0000(0x0001)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         ReturnValue : 1;                                   // 0x0001(0x0001)(BitIndex: 0x00, PropSize: 0x0001 (Parm, OutParm, ReturnParm, NoDestructor, HasGetValueTypeHash))
};
//static_assert(alignof(BED_BehaviorNode_OnSkillValidAttackFrameEnded_IsSupportViewType) == 0x000001, "Wrong alignment on BED_BehaviorNode_OnSkillValidAttackFrameEnded_IsSupportViewType");
//static_assert(sizeof(BED_BehaviorNode_OnSkillValidAttackFrameEnded_IsSupportViewType) == 0x000002, "Wrong size on BED_BehaviorNode_OnSkillValidAttackFrameEnded_IsSupportViewType");
//static_assert(offsetof(BED_BehaviorNode_OnSkillValidAttackFrameEnded_IsSupportViewType, InViewType) == 0x000000, "Member 'BED_BehaviorNode_OnSkillValidAttackFrameEnded_IsSupportViewType::InViewType' has a wrong offset!");

// Function b1-Managed.DispLib_DBCNiagaraComponent.OnPropertyChanged
// 0x0020 (0x0020 - 0x0000)
struct DispLib_DBCNiagaraComponent_OnPropertyChanged final
{
public:
	class FString                                 MemberName;                                        // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash)
	class FString                                 PropertyName;                                      // 0x0010(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash)
};
//static_assert(alignof(DispLib_DBCNiagaraComponent_OnPropertyChanged) == 0x000008, "Wrong alignment on DispLib_DBCNiagaraComponent_OnPropertyChanged");
//static_assert(sizeof(DispLib_DBCNiagaraComponent_OnPropertyChanged) == 0x000020, "Wrong size on DispLib_DBCNiagaraComponent_OnPropertyChanged");
//static_assert(offsetof(DispLib_DBCNiagaraComponent_OnPropertyChanged, MemberName) == 0x000000, "Member 'DispLib_DBCNiagaraComponent_OnPropertyChanged::MemberName' has a wrong offset!");
//static_assert(offsetof(DispLib_DBCNiagaraComponent_OnPropertyChanged, PropertyName) == 0x000010, "Member 'DispLib_DBCNiagaraComponent_OnPropertyChanged::PropertyName' has a wrong offset!");

// Function b1-Managed.DispLib_DBCNiagaraComponent.TickComponentInCS
// 0x0004 (0x0004 - 0x0000)
struct DispLib_DBCNiagaraComponent_TickComponentInCS final
{
public:
	float                                         DeltaTime;                                         // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
//static_assert(alignof(DispLib_DBCNiagaraComponent_TickComponentInCS) == 0x000004, "Wrong alignment on DispLib_DBCNiagaraComponent_TickComponentInCS");
//static_assert(sizeof(DispLib_DBCNiagaraComponent_TickComponentInCS) == 0x000004, "Wrong size on DispLib_DBCNiagaraComponent_TickComponentInCS");
//static_assert(offsetof(DispLib_DBCNiagaraComponent_TickComponentInCS, DeltaTime) == 0x000000, "Member 'DispLib_DBCNiagaraComponent_TickComponentInCS::DeltaTime' has a wrong offset!");

// Function b1-Managed.DispLib_DBCNiagaraComponent.EndPlayInCS
// 0x0001 (0x0001 - 0x0000)
struct DispLib_DBCNiagaraComponent_EndPlayInCS final
{
public:
	EEndPlayReason                                EndPlayReason;                                     // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
//static_assert(alignof(DispLib_DBCNiagaraComponent_EndPlayInCS) == 0x000001, "Wrong alignment on DispLib_DBCNiagaraComponent_EndPlayInCS");
//static_assert(sizeof(DispLib_DBCNiagaraComponent_EndPlayInCS) == 0x000001, "Wrong size on DispLib_DBCNiagaraComponent_EndPlayInCS");
//static_assert(offsetof(DispLib_DBCNiagaraComponent_EndPlayInCS, EndPlayReason) == 0x000000, "Member 'DispLib_DBCNiagaraComponent_EndPlayInCS::EndPlayReason' has a wrong offset!");

// Function b1-Managed.BED_ProcessNode.IsSupportViewType
// 0x0002 (0x0002 - 0x0000)
struct BED_ProcessNode_IsSupportViewType final
{
public:
	ECalliopeViewType                             InViewType;                                        // 0x0000(0x0001)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         ReturnValue : 1;                                   // 0x0001(0x0001)(BitIndex: 0x00, PropSize: 0x0001 (Parm, OutParm, ReturnParm, NoDestructor, HasGetValueTypeHash))
};
//static_assert(alignof(BED_ProcessNode_IsSupportViewType) == 0x000001, "Wrong alignment on BED_ProcessNode_IsSupportViewType");
//static_assert(sizeof(BED_ProcessNode_IsSupportViewType) == 0x000002, "Wrong size on BED_ProcessNode_IsSupportViewType");
//static_assert(offsetof(BED_ProcessNode_IsSupportViewType, InViewType) == 0x000000, "Member 'BED_ProcessNode_IsSupportViewType::InViewType' has a wrong offset!");

// Function b1-Managed.BED_ProcessStateNode.IsBranchGraphNode
// 0x0001 (0x0001 - 0x0000)
struct BED_ProcessStateNode_IsBranchGraphNode final
{
public:
	uint8                                         ReturnValue : 1;                                   // 0x0000(0x0001)(BitIndex: 0x00, PropSize: 0x0001 (Parm, OutParm, ReturnParm, NoDestructor, HasGetValueTypeHash))
};
//static_assert(alignof(BED_ProcessStateNode_IsBranchGraphNode) == 0x000001, "Wrong alignment on BED_ProcessStateNode_IsBranchGraphNode");
//static_assert(sizeof(BED_ProcessStateNode_IsBranchGraphNode) == 0x000001, "Wrong size on BED_ProcessStateNode_IsBranchGraphNode");

// Function b1-Managed.DispLib_DBCSimpleMaterialQualityManager.TickComponentInCS
// 0x0004 (0x0004 - 0x0000)
struct DispLib_DBCSimpleMaterialQualityManager_TickComponentInCS final
{
public:
	float                                         DeltaTime;                                         // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
//static_assert(alignof(DispLib_DBCSimpleMaterialQualityManager_TickComponentInCS) == 0x000004, "Wrong alignment on DispLib_DBCSimpleMaterialQualityManager_TickComponentInCS");
//static_assert(sizeof(DispLib_DBCSimpleMaterialQualityManager_TickComponentInCS) == 0x000004, "Wrong size on DispLib_DBCSimpleMaterialQualityManager_TickComponentInCS");
//static_assert(offsetof(DispLib_DBCSimpleMaterialQualityManager_TickComponentInCS, DeltaTime) == 0x000000, "Member 'DispLib_DBCSimpleMaterialQualityManager_TickComponentInCS::DeltaTime' has a wrong offset!");

// Function b1-Managed.BGW_OnlineFriend.OnReadFriendListCompleteCS
// 0x0001 (0x0001 - 0x0000)
struct BGW_OnlineFriend_OnReadFriendListCompleteCS final
{
public:
	uint8                                         bWasSuccessful : 1;                                // 0x0000(0x0001)(BitIndex: 0x00, PropSize: 0x0001 (Parm, NoDestructor, HasGetValueTypeHash))
};
//static_assert(alignof(BGW_OnlineFriend_OnReadFriendListCompleteCS) == 0x000001, "Wrong alignment on BGW_OnlineFriend_OnReadFriendListCompleteCS");
//static_assert(sizeof(BGW_OnlineFriend_OnReadFriendListCompleteCS) == 0x000001, "Wrong size on BGW_OnlineFriend_OnReadFriendListCompleteCS");

// Function b1-Managed.BSN_Log.OnNotify
// 0x0010 (0x0010 - 0x0000)
struct BSN_Log_OnNotify final
{
public:
	class UCalliopeLevelSequencePlayer*           InPlayer;                                          // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         InStatus;                                          // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         bInBackwards : 1;                                  // 0x000C(0x0001)(BitIndex: 0x00, PropSize: 0x0001 (Parm, NoDestructor, HasGetValueTypeHash))
};
//static_assert(alignof(BSN_Log_OnNotify) == 0x000008, "Wrong alignment on BSN_Log_OnNotify");
//static_assert(sizeof(BSN_Log_OnNotify) == 0x000010, "Wrong size on BSN_Log_OnNotify");
//static_assert(offsetof(BSN_Log_OnNotify, InPlayer) == 0x000000, "Member 'BSN_Log_OnNotify::InPlayer' has a wrong offset!");
//static_assert(offsetof(BSN_Log_OnNotify, InStatus) == 0x000008, "Member 'BSN_Log_OnNotify::InStatus' has a wrong offset!");

// Function b1-Managed.BANS_DispLibTimedModifyMaterial.GSNotifyBeginCS
// 0x0048 (0x0048 - 0x0000)
struct BANS_DispLibTimedModifyMaterial_GSNotifyBeginCS final
{
public:
	struct FUStGSNotifyParam                      NotifyParam;                                       // 0x0000(0x0040)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
	float                                         TotalDuration;                                     // 0x0040(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
//static_assert(alignof(BANS_DispLibTimedModifyMaterial_GSNotifyBeginCS) == 0x000008, "Wrong alignment on BANS_DispLibTimedModifyMaterial_GSNotifyBeginCS");
//static_assert(sizeof(BANS_DispLibTimedModifyMaterial_GSNotifyBeginCS) == 0x000048, "Wrong size on BANS_DispLibTimedModifyMaterial_GSNotifyBeginCS");
//static_assert(offsetof(BANS_DispLibTimedModifyMaterial_GSNotifyBeginCS, NotifyParam) == 0x000000, "Member 'BANS_DispLibTimedModifyMaterial_GSNotifyBeginCS::NotifyParam' has a wrong offset!");
//static_assert(offsetof(BANS_DispLibTimedModifyMaterial_GSNotifyBeginCS, TotalDuration) == 0x000040, "Member 'BANS_DispLibTimedModifyMaterial_GSNotifyBeginCS::TotalDuration' has a wrong offset!");

// Function b1-Managed.BANS_DispLibTimedModifyMaterial.GSNotifyEndCS
// 0x0040 (0x0040 - 0x0000)
struct BANS_DispLibTimedModifyMaterial_GSNotifyEndCS final
{
public:
	struct FUStGSNotifyParam                      NotifyParam;                                       // 0x0000(0x0040)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
//static_assert(alignof(BANS_DispLibTimedModifyMaterial_GSNotifyEndCS) == 0x000008, "Wrong alignment on BANS_DispLibTimedModifyMaterial_GSNotifyEndCS");
//static_assert(sizeof(BANS_DispLibTimedModifyMaterial_GSNotifyEndCS) == 0x000040, "Wrong size on BANS_DispLibTimedModifyMaterial_GSNotifyEndCS");
//static_assert(offsetof(BANS_DispLibTimedModifyMaterial_GSNotifyEndCS, NotifyParam) == 0x000000, "Member 'BANS_DispLibTimedModifyMaterial_GSNotifyEndCS::NotifyParam' has a wrong offset!");

// Function b1-Managed.BED_BehaviorNode_OnTrigerFSMEvent.IsSupportViewType
// 0x0002 (0x0002 - 0x0000)
struct BED_BehaviorNode_OnTrigerFSMEvent_IsSupportViewType final
{
public:
	ECalliopeViewType                             InViewType;                                        // 0x0000(0x0001)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         ReturnValue : 1;                                   // 0x0001(0x0001)(BitIndex: 0x00, PropSize: 0x0001 (Parm, OutParm, ReturnParm, NoDestructor, HasGetValueTypeHash))
};
//static_assert(alignof(BED_BehaviorNode_OnTrigerFSMEvent_IsSupportViewType) == 0x000001, "Wrong alignment on BED_BehaviorNode_OnTrigerFSMEvent_IsSupportViewType");
//static_assert(sizeof(BED_BehaviorNode_OnTrigerFSMEvent_IsSupportViewType) == 0x000002, "Wrong size on BED_BehaviorNode_OnTrigerFSMEvent_IsSupportViewType");
//static_assert(offsetof(BED_BehaviorNode_OnTrigerFSMEvent_IsSupportViewType, InViewType) == 0x000000, "Member 'BED_BehaviorNode_OnTrigerFSMEvent_IsSupportViewType::InViewType' has a wrong offset!");

// Function b1-Managed.BAN_DispLibModifyMaterial.GSNotifyCS
// 0x0040 (0x0040 - 0x0000)
struct BAN_DispLibModifyMaterial_GSNotifyCS final
{
public:
	struct FUStGSNotifyParam                      NotifyParam;                                       // 0x0000(0x0040)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
//static_assert(alignof(BAN_DispLibModifyMaterial_GSNotifyCS) == 0x000008, "Wrong alignment on BAN_DispLibModifyMaterial_GSNotifyCS");
//static_assert(sizeof(BAN_DispLibModifyMaterial_GSNotifyCS) == 0x000040, "Wrong size on BAN_DispLibModifyMaterial_GSNotifyCS");
//static_assert(offsetof(BAN_DispLibModifyMaterial_GSNotifyCS, NotifyParam) == 0x000000, "Member 'BAN_DispLibModifyMaterial_GSNotifyCS::NotifyParam' has a wrong offset!");

// Function b1-Managed.DispLib_EditorDBCPreviewToolActor.ReceiveEndPlay
// 0x0001 (0x0001 - 0x0000)
struct DispLib_EditorDBCPreviewToolActor_ReceiveEndPlay final
{
public:
	EEndPlayReason                                EndPlayReason;                                     // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
//static_assert(alignof(DispLib_EditorDBCPreviewToolActor_ReceiveEndPlay) == 0x000001, "Wrong alignment on DispLib_EditorDBCPreviewToolActor_ReceiveEndPlay");
//static_assert(sizeof(DispLib_EditorDBCPreviewToolActor_ReceiveEndPlay) == 0x000001, "Wrong size on DispLib_EditorDBCPreviewToolActor_ReceiveEndPlay");
//static_assert(offsetof(DispLib_EditorDBCPreviewToolActor_ReceiveEndPlay, EndPlayReason) == 0x000000, "Member 'DispLib_EditorDBCPreviewToolActor_ReceiveEndPlay::EndPlayReason' has a wrong offset!");

// Function b1-Managed.DispLib_EditorDBCPreviewToolActor.OnWorldCleanup
// 0x0010 (0x0010 - 0x0000)
struct DispLib_EditorDBCPreviewToolActor_OnWorldCleanup final
{
public:
	class UWorld*                                 World;                                             // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         SessionEnded : 1;                                  // 0x0008(0x0001)(BitIndex: 0x00, PropSize: 0x0001 (Parm, NoDestructor, HasGetValueTypeHash))
	uint8                                         BitPad_8_1 : 7;                                    // 0x0008(0x0001)(Fixing Bit-Field Size For New Byte [ Dumper-7 ])
	uint8                                         CleanupResources : 1;                              // 0x0009(0x0001)(BitIndex: 0x00, PropSize: 0x0001 (Parm, NoDestructor, HasGetValueTypeHash))
};
//static_assert(alignof(DispLib_EditorDBCPreviewToolActor_OnWorldCleanup) == 0x000008, "Wrong alignment on DispLib_EditorDBCPreviewToolActor_OnWorldCleanup");
//static_assert(sizeof(DispLib_EditorDBCPreviewToolActor_OnWorldCleanup) == 0x000010, "Wrong size on DispLib_EditorDBCPreviewToolActor_OnWorldCleanup");
//static_assert(offsetof(DispLib_EditorDBCPreviewToolActor_OnWorldCleanup, World) == 0x000000, "Member 'DispLib_EditorDBCPreviewToolActor_OnWorldCleanup::World' has a wrong offset!");

// Function b1-Managed.DispLib_EditorDBCPreviewToolActor.ReceiveTick
// 0x0004 (0x0004 - 0x0000)
struct DispLib_EditorDBCPreviewToolActor_ReceiveTick final
{
public:
	float                                         DeltaSeconds;                                      // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
//static_assert(alignof(DispLib_EditorDBCPreviewToolActor_ReceiveTick) == 0x000004, "Wrong alignment on DispLib_EditorDBCPreviewToolActor_ReceiveTick");
//static_assert(sizeof(DispLib_EditorDBCPreviewToolActor_ReceiveTick) == 0x000004, "Wrong size on DispLib_EditorDBCPreviewToolActor_ReceiveTick");
//static_assert(offsetof(DispLib_EditorDBCPreviewToolActor_ReceiveTick, DeltaSeconds) == 0x000000, "Member 'DispLib_EditorDBCPreviewToolActor_ReceiveTick::DeltaSeconds' has a wrong offset!");

// Function b1-Managed.BED_StateNode.IsSupportViewType
// 0x0002 (0x0002 - 0x0000)
struct BED_StateNode_IsSupportViewType final
{
public:
	ECalliopeViewType                             InViewType;                                        // 0x0000(0x0001)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         ReturnValue : 1;                                   // 0x0001(0x0001)(BitIndex: 0x00, PropSize: 0x0001 (Parm, OutParm, ReturnParm, NoDestructor, HasGetValueTypeHash))
};
//static_assert(alignof(BED_StateNode_IsSupportViewType) == 0x000001, "Wrong alignment on BED_StateNode_IsSupportViewType");
//static_assert(sizeof(BED_StateNode_IsSupportViewType) == 0x000002, "Wrong size on BED_StateNode_IsSupportViewType");
//static_assert(offsetof(BED_StateNode_IsSupportViewType, InViewType) == 0x000000, "Member 'BED_StateNode_IsSupportViewType::InViewType' has a wrong offset!");

// Function b1-Managed.PerformerParam_Performer.OnPropertyChanged
// 0x0020 (0x0020 - 0x0000)
struct PerformerParam_Performer_OnPropertyChanged final
{
public:
	class FString                                 MemberName;                                        // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash)
	class FString                                 PropertyName;                                      // 0x0010(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash)
};
//static_assert(alignof(PerformerParam_Performer_OnPropertyChanged) == 0x000008, "Wrong alignment on PerformerParam_Performer_OnPropertyChanged");
//static_assert(sizeof(PerformerParam_Performer_OnPropertyChanged) == 0x000020, "Wrong size on PerformerParam_Performer_OnPropertyChanged");
//static_assert(offsetof(PerformerParam_Performer_OnPropertyChanged, MemberName) == 0x000000, "Member 'PerformerParam_Performer_OnPropertyChanged::MemberName' has a wrong offset!");
//static_assert(offsetof(PerformerParam_Performer_OnPropertyChanged, PropertyName) == 0x000010, "Member 'PerformerParam_Performer_OnPropertyChanged::PropertyName' has a wrong offset!");

// Function b1-Managed.DispLibDebugTest_SpawnAttachedNiagara.SetVisible
// 0x0002 (0x0002 - 0x0000)
struct DispLibDebugTest_SpawnAttachedNiagara_SetVisible final
{
public:
	uint8                                         Vis : 1;                                           // 0x0000(0x0001)(BitIndex: 0x00, PropSize: 0x0001 (Parm, NoDestructor, HasGetValueTypeHash))
	uint8                                         BitPad_0_1 : 7;                                    // 0x0000(0x0001)(Fixing Bit-Field Size For New Byte [ Dumper-7 ])
	uint8                                         Child : 1;                                         // 0x0001(0x0001)(BitIndex: 0x00, PropSize: 0x0001 (Parm, NoDestructor, HasGetValueTypeHash))
};
//static_assert(alignof(DispLibDebugTest_SpawnAttachedNiagara_SetVisible) == 0x000001, "Wrong alignment on DispLibDebugTest_SpawnAttachedNiagara_SetVisible");
//static_assert(sizeof(DispLibDebugTest_SpawnAttachedNiagara_SetVisible) == 0x000002, "Wrong size on DispLibDebugTest_SpawnAttachedNiagara_SetVisible");

// Function b1-Managed.BGUAreaBase.OnConstructionCS
// 0x0060 (0x0060 - 0x0000)
struct BGUAreaBase_OnConstructionCS final
{
public:
	struct FTransform                             Transform;                                         // 0x0000(0x0060)(ConstParm, Parm, OutParm, ReferenceParm, IsPlainOldData, NoDestructor)
};
//static_assert(alignof(BGUAreaBase_OnConstructionCS) == 0x000010, "Wrong alignment on BGUAreaBase_OnConstructionCS");
//static_assert(sizeof(BGUAreaBase_OnConstructionCS) == 0x000060, "Wrong size on BGUAreaBase_OnConstructionCS");
//static_assert(offsetof(BGUAreaBase_OnConstructionCS, Transform) == 0x000000, "Member 'BGUAreaBase_OnConstructionCS::Transform' has a wrong offset!");

// Function b1-Managed.BGUAreaBase.ReceiveEndPlay
// 0x0001 (0x0001 - 0x0000)
struct BGUAreaBase_ReceiveEndPlay final
{
public:
	EEndPlayReason                                EndPlayReason;                                     // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
//static_assert(alignof(BGUAreaBase_ReceiveEndPlay) == 0x000001, "Wrong alignment on BGUAreaBase_ReceiveEndPlay");
//static_assert(sizeof(BGUAreaBase_ReceiveEndPlay) == 0x000001, "Wrong size on BGUAreaBase_ReceiveEndPlay");
//static_assert(offsetof(BGUAreaBase_ReceiveEndPlay, EndPlayReason) == 0x000000, "Member 'BGUAreaBase_ReceiveEndPlay::EndPlayReason' has a wrong offset!");

// Function b1-Managed.BANS_DispLibApplyWindSource.Received_NotifyTick
// 0x0048 (0x0048 - 0x0000)
struct BANS_DispLibApplyWindSource_Received_NotifyTick final
{
public:
	class USkeletalMeshComponent*                 MeshComp;                                          // 0x0000(0x0008)(ExportObject, Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UAnimSequenceBase*                      Animation;                                         // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         FrameDeltaTime;                                    // 0x0010(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_14[0x4];                                       // 0x0014(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FAnimNotifyEventReference              EventReference;                                    // 0x0018(0x0028)(ConstParm, Parm, OutParm, ReferenceParm)
	uint8                                         ReturnValue : 1;                                   // 0x0040(0x0001)(BitIndex: 0x00, PropSize: 0x0001 (Parm, OutParm, ReturnParm, NoDestructor, HasGetValueTypeHash))
};
//static_assert(alignof(BANS_DispLibApplyWindSource_Received_NotifyTick) == 0x000008, "Wrong alignment on BANS_DispLibApplyWindSource_Received_NotifyTick");
//static_assert(sizeof(BANS_DispLibApplyWindSource_Received_NotifyTick) == 0x000048, "Wrong size on BANS_DispLibApplyWindSource_Received_NotifyTick");
//static_assert(offsetof(BANS_DispLibApplyWindSource_Received_NotifyTick, MeshComp) == 0x000000, "Member 'BANS_DispLibApplyWindSource_Received_NotifyTick::MeshComp' has a wrong offset!");
//static_assert(offsetof(BANS_DispLibApplyWindSource_Received_NotifyTick, Animation) == 0x000008, "Member 'BANS_DispLibApplyWindSource_Received_NotifyTick::Animation' has a wrong offset!");
//static_assert(offsetof(BANS_DispLibApplyWindSource_Received_NotifyTick, FrameDeltaTime) == 0x000010, "Member 'BANS_DispLibApplyWindSource_Received_NotifyTick::FrameDeltaTime' has a wrong offset!");
//static_assert(offsetof(BANS_DispLibApplyWindSource_Received_NotifyTick, EventReference) == 0x000018, "Member 'BANS_DispLibApplyWindSource_Received_NotifyTick::EventReference' has a wrong offset!");

// Function b1-Managed.BANS_DispLibApplyWindSource.GSNotifyBeginCS
// 0x0048 (0x0048 - 0x0000)
struct BANS_DispLibApplyWindSource_GSNotifyBeginCS final
{
public:
	struct FUStGSNotifyParam                      NotifyParam;                                       // 0x0000(0x0040)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
	float                                         TotalDuration;                                     // 0x0040(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
//static_assert(alignof(BANS_DispLibApplyWindSource_GSNotifyBeginCS) == 0x000008, "Wrong alignment on BANS_DispLibApplyWindSource_GSNotifyBeginCS");
//static_assert(sizeof(BANS_DispLibApplyWindSource_GSNotifyBeginCS) == 0x000048, "Wrong size on BANS_DispLibApplyWindSource_GSNotifyBeginCS");
//static_assert(offsetof(BANS_DispLibApplyWindSource_GSNotifyBeginCS, NotifyParam) == 0x000000, "Member 'BANS_DispLibApplyWindSource_GSNotifyBeginCS::NotifyParam' has a wrong offset!");
//static_assert(offsetof(BANS_DispLibApplyWindSource_GSNotifyBeginCS, TotalDuration) == 0x000040, "Member 'BANS_DispLibApplyWindSource_GSNotifyBeginCS::TotalDuration' has a wrong offset!");

// Function b1-Managed.BANS_DispLibApplyWindSource.GSNotifyEndCS
// 0x0040 (0x0040 - 0x0000)
struct BANS_DispLibApplyWindSource_GSNotifyEndCS final
{
public:
	struct FUStGSNotifyParam                      NotifyParam;                                       // 0x0000(0x0040)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
//static_assert(alignof(BANS_DispLibApplyWindSource_GSNotifyEndCS) == 0x000008, "Wrong alignment on BANS_DispLibApplyWindSource_GSNotifyEndCS");
//static_assert(sizeof(BANS_DispLibApplyWindSource_GSNotifyEndCS) == 0x000040, "Wrong size on BANS_DispLibApplyWindSource_GSNotifyEndCS");
//static_assert(offsetof(BANS_DispLibApplyWindSource_GSNotifyEndCS, NotifyParam) == 0x000000, "Member 'BANS_DispLibApplyWindSource_GSNotifyEndCS::NotifyParam' has a wrong offset!");

// Function b1-Managed.BAN_DispLibApplySceneInteractor.GSNotifyCS
// 0x0040 (0x0040 - 0x0000)
struct BAN_DispLibApplySceneInteractor_GSNotifyCS final
{
public:
	struct FUStGSNotifyParam                      NotifyParam;                                       // 0x0000(0x0040)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
//static_assert(alignof(BAN_DispLibApplySceneInteractor_GSNotifyCS) == 0x000008, "Wrong alignment on BAN_DispLibApplySceneInteractor_GSNotifyCS");
//static_assert(sizeof(BAN_DispLibApplySceneInteractor_GSNotifyCS) == 0x000040, "Wrong size on BAN_DispLibApplySceneInteractor_GSNotifyCS");
//static_assert(offsetof(BAN_DispLibApplySceneInteractor_GSNotifyCS, NotifyParam) == 0x000000, "Member 'BAN_DispLibApplySceneInteractor_GSNotifyCS::NotifyParam' has a wrong offset!");

// Function b1-Managed.BAN_DispLibEndDBCEffects.GSNotifyCS
// 0x0040 (0x0040 - 0x0000)
struct BAN_DispLibEndDBCEffects_GSNotifyCS final
{
public:
	struct FUStGSNotifyParam                      NotifyParam;                                       // 0x0000(0x0040)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
//static_assert(alignof(BAN_DispLibEndDBCEffects_GSNotifyCS) == 0x000008, "Wrong alignment on BAN_DispLibEndDBCEffects_GSNotifyCS");
//static_assert(sizeof(BAN_DispLibEndDBCEffects_GSNotifyCS) == 0x000040, "Wrong size on BAN_DispLibEndDBCEffects_GSNotifyCS");
//static_assert(offsetof(BAN_DispLibEndDBCEffects_GSNotifyCS, NotifyParam) == 0x000000, "Member 'BAN_DispLibEndDBCEffects_GSNotifyCS::NotifyParam' has a wrong offset!");

// Function b1-Managed.DispLib_EditorTreeImposterTool.PythonCreatePerformanceTexture
// 0x0060 (0x0060 - 0x0000)
struct DispLib_EditorTreeImposterTool_PythonCreatePerformanceTexture final
{
public:
	class FString                                 CaptureRTSize_0;                                   // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash)
	class FString                                 PerformanceMatInstanceAssetPath;                   // 0x0010(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash)
	class FString                                 ImposterCombinedStdTextureFolderPath;              // 0x0020(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash)
	class FString                                 ImposterDataTextureFolderPath;                     // 0x0030(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash)
	class FString                                 TrunkMaskThreshold_0;                              // 0x0040(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash)
	class FString                                 LeafMaskThreshold_0;                               // 0x0050(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash)
};
//static_assert(alignof(DispLib_EditorTreeImposterTool_PythonCreatePerformanceTexture) == 0x000008, "Wrong alignment on DispLib_EditorTreeImposterTool_PythonCreatePerformanceTexture");
//static_assert(sizeof(DispLib_EditorTreeImposterTool_PythonCreatePerformanceTexture) == 0x000060, "Wrong size on DispLib_EditorTreeImposterTool_PythonCreatePerformanceTexture");
//static_assert(offsetof(DispLib_EditorTreeImposterTool_PythonCreatePerformanceTexture, CaptureRTSize_0) == 0x000000, "Member 'DispLib_EditorTreeImposterTool_PythonCreatePerformanceTexture::CaptureRTSize_0' has a wrong offset!");
//static_assert(offsetof(DispLib_EditorTreeImposterTool_PythonCreatePerformanceTexture, PerformanceMatInstanceAssetPath) == 0x000010, "Member 'DispLib_EditorTreeImposterTool_PythonCreatePerformanceTexture::PerformanceMatInstanceAssetPath' has a wrong offset!");
//static_assert(offsetof(DispLib_EditorTreeImposterTool_PythonCreatePerformanceTexture, ImposterCombinedStdTextureFolderPath) == 0x000020, "Member 'DispLib_EditorTreeImposterTool_PythonCreatePerformanceTexture::ImposterCombinedStdTextureFolderPath' has a wrong offset!");
//static_assert(offsetof(DispLib_EditorTreeImposterTool_PythonCreatePerformanceTexture, ImposterDataTextureFolderPath) == 0x000030, "Member 'DispLib_EditorTreeImposterTool_PythonCreatePerformanceTexture::ImposterDataTextureFolderPath' has a wrong offset!");
//static_assert(offsetof(DispLib_EditorTreeImposterTool_PythonCreatePerformanceTexture, TrunkMaskThreshold_0) == 0x000040, "Member 'DispLib_EditorTreeImposterTool_PythonCreatePerformanceTexture::TrunkMaskThreshold_0' has a wrong offset!");
//static_assert(offsetof(DispLib_EditorTreeImposterTool_PythonCreatePerformanceTexture, LeafMaskThreshold_0) == 0x000050, "Member 'DispLib_EditorTreeImposterTool_PythonCreatePerformanceTexture::LeafMaskThreshold_0' has a wrong offset!");

// Function b1-Managed.DispLib_EditorTreeImposterTool.ReceiveTick
// 0x0004 (0x0004 - 0x0000)
struct DispLib_EditorTreeImposterTool_ReceiveTick final
{
public:
	float                                         DeltaSeconds;                                      // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
//static_assert(alignof(DispLib_EditorTreeImposterTool_ReceiveTick) == 0x000004, "Wrong alignment on DispLib_EditorTreeImposterTool_ReceiveTick");
//static_assert(sizeof(DispLib_EditorTreeImposterTool_ReceiveTick) == 0x000004, "Wrong size on DispLib_EditorTreeImposterTool_ReceiveTick");
//static_assert(offsetof(DispLib_EditorTreeImposterTool_ReceiveTick, DeltaSeconds) == 0x000000, "Member 'DispLib_EditorTreeImposterTool_ReceiveTick::DeltaSeconds' has a wrong offset!");

// Function b1-Managed.DispLib_EditorTreeImposterTool.TestRenderCustomShadowMask
// 0x0008 (0x0008 - 0x0000)
struct DispLib_EditorTreeImposterTool_TestRenderCustomShadowMask final
{
public:
	int32                                         CardIndex;                                         // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         ShadowMaskIndex;                                   // 0x0004(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
//static_assert(alignof(DispLib_EditorTreeImposterTool_TestRenderCustomShadowMask) == 0x000004, "Wrong alignment on DispLib_EditorTreeImposterTool_TestRenderCustomShadowMask");
//static_assert(sizeof(DispLib_EditorTreeImposterTool_TestRenderCustomShadowMask) == 0x000008, "Wrong size on DispLib_EditorTreeImposterTool_TestRenderCustomShadowMask");
//static_assert(offsetof(DispLib_EditorTreeImposterTool_TestRenderCustomShadowMask, CardIndex) == 0x000000, "Member 'DispLib_EditorTreeImposterTool_TestRenderCustomShadowMask::CardIndex' has a wrong offset!");
//static_assert(offsetof(DispLib_EditorTreeImposterTool_TestRenderCustomShadowMask, ShadowMaskIndex) == 0x000004, "Member 'DispLib_EditorTreeImposterTool_TestRenderCustomShadowMask::ShadowMaskIndex' has a wrong offset!");

// Function b1-Managed.DispLib_EditorTreeImposterTool.CreatFinalImposterMaterial
// 0x0001 (0x0001 - 0x0000)
struct DispLib_EditorTreeImposterTool_CreatFinalImposterMaterial final
{
public:
	uint8                                         ForceOverrideMat : 1;                              // 0x0000(0x0001)(BitIndex: 0x00, PropSize: 0x0001 (Parm, NoDestructor, HasGetValueTypeHash))
};
//static_assert(alignof(DispLib_EditorTreeImposterTool_CreatFinalImposterMaterial) == 0x000001, "Wrong alignment on DispLib_EditorTreeImposterTool_CreatFinalImposterMaterial");
//static_assert(sizeof(DispLib_EditorTreeImposterTool_CreatFinalImposterMaterial) == 0x000001, "Wrong size on DispLib_EditorTreeImposterTool_CreatFinalImposterMaterial");

// Function b1-Managed.DispLib_EditorTreeImposterTool.CreatSceneShotToolActor
// 0x0001 (0x0001 - 0x0000)
struct DispLib_EditorTreeImposterTool_CreatSceneShotToolActor final
{
public:
	uint8                                         ReturnValue : 1;                                   // 0x0000(0x0001)(BitIndex: 0x00, PropSize: 0x0001 (Parm, OutParm, ReturnParm, NoDestructor, HasGetValueTypeHash))
};
//static_assert(alignof(DispLib_EditorTreeImposterTool_CreatSceneShotToolActor) == 0x000001, "Wrong alignment on DispLib_EditorTreeImposterTool_CreatSceneShotToolActor");
//static_assert(sizeof(DispLib_EditorTreeImposterTool_CreatSceneShotToolActor) == 0x000001, "Wrong size on DispLib_EditorTreeImposterTool_CreatSceneShotToolActor");

// Function b1-Managed.DispLib_EditorTreeImposterTool.DoCombinedFinalTexture
// 0x0001 (0x0001 - 0x0000)
struct DispLib_EditorTreeImposterTool_DoCombinedFinalTexture final
{
public:
	uint8                                         ReturnValue : 1;                                   // 0x0000(0x0001)(BitIndex: 0x00, PropSize: 0x0001 (Parm, OutParm, ReturnParm, NoDestructor, HasGetValueTypeHash))
};
//static_assert(alignof(DispLib_EditorTreeImposterTool_DoCombinedFinalTexture) == 0x000001, "Wrong alignment on DispLib_EditorTreeImposterTool_DoCombinedFinalTexture");
//static_assert(sizeof(DispLib_EditorTreeImposterTool_DoCombinedFinalTexture) == 0x000001, "Wrong size on DispLib_EditorTreeImposterTool_DoCombinedFinalTexture");

// Function b1-Managed.DispLib_EditorTreeImposterTool.CheckTaskMeshValidity
// 0x0001 (0x0001 - 0x0000)
struct DispLib_EditorTreeImposterTool_CheckTaskMeshValidity final
{
public:
	uint8                                         ReturnValue : 1;                                   // 0x0000(0x0001)(BitIndex: 0x00, PropSize: 0x0001 (Parm, OutParm, ReturnParm, NoDestructor, HasGetValueTypeHash))
};
//static_assert(alignof(DispLib_EditorTreeImposterTool_CheckTaskMeshValidity) == 0x000001, "Wrong alignment on DispLib_EditorTreeImposterTool_CheckTaskMeshValidity");
//static_assert(sizeof(DispLib_EditorTreeImposterTool_CheckTaskMeshValidity) == 0x000001, "Wrong size on DispLib_EditorTreeImposterTool_CheckTaskMeshValidity");

// Function b1-Managed.DispLib_EditorTreeImposterTool.SetNewLevelEnvActor
// 0x0001 (0x0001 - 0x0000)
struct DispLib_EditorTreeImposterTool_SetNewLevelEnvActor final
{
public:
	uint8                                         Visable : 1;                                       // 0x0000(0x0001)(BitIndex: 0x00, PropSize: 0x0001 (Parm, NoDestructor, HasGetValueTypeHash))
};
//static_assert(alignof(DispLib_EditorTreeImposterTool_SetNewLevelEnvActor) == 0x000001, "Wrong alignment on DispLib_EditorTreeImposterTool_SetNewLevelEnvActor");
//static_assert(sizeof(DispLib_EditorTreeImposterTool_SetNewLevelEnvActor) == 0x000001, "Wrong size on DispLib_EditorTreeImposterTool_SetNewLevelEnvActor");

// Function b1-Managed.DispLib_EditorTreeImposterTool.CheckHDABakeResult
// 0x0001 (0x0001 - 0x0000)
struct DispLib_EditorTreeImposterTool_CheckHDABakeResult final
{
public:
	uint8                                         ReturnValue : 1;                                   // 0x0000(0x0001)(BitIndex: 0x00, PropSize: 0x0001 (Parm, OutParm, ReturnParm, NoDestructor, HasGetValueTypeHash))
};
//static_assert(alignof(DispLib_EditorTreeImposterTool_CheckHDABakeResult) == 0x000001, "Wrong alignment on DispLib_EditorTreeImposterTool_CheckHDABakeResult");
//static_assert(sizeof(DispLib_EditorTreeImposterTool_CheckHDABakeResult) == 0x000001, "Wrong size on DispLib_EditorTreeImposterTool_CheckHDABakeResult");

// Function b1-Managed.DispLib_EditorTreeImposterTool.FillHoudiniData
// 0x0001 (0x0001 - 0x0000)
struct DispLib_EditorTreeImposterTool_FillHoudiniData final
{
public:
	uint8                                         ReturnValue : 1;                                   // 0x0000(0x0001)(BitIndex: 0x00, PropSize: 0x0001 (Parm, OutParm, ReturnParm, NoDestructor, HasGetValueTypeHash))
};
//static_assert(alignof(DispLib_EditorTreeImposterTool_FillHoudiniData) == 0x000001, "Wrong alignment on DispLib_EditorTreeImposterTool_FillHoudiniData");
//static_assert(sizeof(DispLib_EditorTreeImposterTool_FillHoudiniData) == 0x000001, "Wrong size on DispLib_EditorTreeImposterTool_FillHoudiniData");

// Function b1-Managed.DispLib_EditorTreeImposterTool.SetCurrentTask
// 0x0008 (0x0008 - 0x0000)
struct DispLib_EditorTreeImposterTool_SetCurrentTask final
{
public:
	int32                                         TaskIndex;                                         // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         ReturnValue : 1;                                   // 0x0004(0x0001)(BitIndex: 0x00, PropSize: 0x0001 (Parm, OutParm, ReturnParm, NoDestructor, HasGetValueTypeHash))
};
//static_assert(alignof(DispLib_EditorTreeImposterTool_SetCurrentTask) == 0x000004, "Wrong alignment on DispLib_EditorTreeImposterTool_SetCurrentTask");
//static_assert(sizeof(DispLib_EditorTreeImposterTool_SetCurrentTask) == 0x000008, "Wrong size on DispLib_EditorTreeImposterTool_SetCurrentTask");
//static_assert(offsetof(DispLib_EditorTreeImposterTool_SetCurrentTask, TaskIndex) == 0x000000, "Member 'DispLib_EditorTreeImposterTool_SetCurrentTask::TaskIndex' has a wrong offset!");

// Function b1-Managed.BAN_DispLibPlayCameraShake.GSNotifyCS
// 0x0040 (0x0040 - 0x0000)
struct BAN_DispLibPlayCameraShake_GSNotifyCS final
{
public:
	struct FUStGSNotifyParam                      NotifyParam;                                       // 0x0000(0x0040)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
//static_assert(alignof(BAN_DispLibPlayCameraShake_GSNotifyCS) == 0x000008, "Wrong alignment on BAN_DispLibPlayCameraShake_GSNotifyCS");
//static_assert(sizeof(BAN_DispLibPlayCameraShake_GSNotifyCS) == 0x000040, "Wrong size on BAN_DispLibPlayCameraShake_GSNotifyCS");
//static_assert(offsetof(BAN_DispLibPlayCameraShake_GSNotifyCS, NotifyParam) == 0x000000, "Member 'BAN_DispLibPlayCameraShake_GSNotifyCS::NotifyParam' has a wrong offset!");

// Function b1-Managed.BED_ComboNode_Start.GetContextOutputsInCS
// 0x0010 (0x0010 - 0x0000)
struct BED_ComboNode_Start_GetContextOutputsInCS final
{
public:
	TArray<class FName>                           ReturnValue;                                       // 0x0000(0x0010)(Parm, OutParm, ReturnParm)
};
//static_assert(alignof(BED_ComboNode_Start_GetContextOutputsInCS) == 0x000008, "Wrong alignment on BED_ComboNode_Start_GetContextOutputsInCS");
//static_assert(sizeof(BED_ComboNode_Start_GetContextOutputsInCS) == 0x000010, "Wrong size on BED_ComboNode_Start_GetContextOutputsInCS");
//static_assert(offsetof(BED_ComboNode_Start_GetContextOutputsInCS, ReturnValue) == 0x000000, "Member 'BED_ComboNode_Start_GetContextOutputsInCS::ReturnValue' has a wrong offset!");

// Function b1-Managed.BED_ComboNode_Start.PostPropertyChanged
// 0x0020 (0x0020 - 0x0000)
struct BED_ComboNode_Start_PostPropertyChanged final
{
public:
	class FString                                 MemberName;                                        // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash)
	class FString                                 PropertyName;                                      // 0x0010(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash)
};
//static_assert(alignof(BED_ComboNode_Start_PostPropertyChanged) == 0x000008, "Wrong alignment on BED_ComboNode_Start_PostPropertyChanged");
//static_assert(sizeof(BED_ComboNode_Start_PostPropertyChanged) == 0x000020, "Wrong size on BED_ComboNode_Start_PostPropertyChanged");
//static_assert(offsetof(BED_ComboNode_Start_PostPropertyChanged, MemberName) == 0x000000, "Member 'BED_ComboNode_Start_PostPropertyChanged::MemberName' has a wrong offset!");
//static_assert(offsetof(BED_ComboNode_Start_PostPropertyChanged, PropertyName) == 0x000010, "Member 'BED_ComboNode_Start_PostPropertyChanged::PropertyName' has a wrong offset!");

// Function b1-Managed.BAN_DispLibPlayCustomCameraShake.GSNotifyCS
// 0x0040 (0x0040 - 0x0000)
struct BAN_DispLibPlayCustomCameraShake_GSNotifyCS final
{
public:
	struct FUStGSNotifyParam                      NotifyParam;                                       // 0x0000(0x0040)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
//static_assert(alignof(BAN_DispLibPlayCustomCameraShake_GSNotifyCS) == 0x000008, "Wrong alignment on BAN_DispLibPlayCustomCameraShake_GSNotifyCS");
//static_assert(sizeof(BAN_DispLibPlayCustomCameraShake_GSNotifyCS) == 0x000040, "Wrong size on BAN_DispLibPlayCustomCameraShake_GSNotifyCS");
//static_assert(offsetof(BAN_DispLibPlayCustomCameraShake_GSNotifyCS, NotifyParam) == 0x000000, "Member 'BAN_DispLibPlayCustomCameraShake_GSNotifyCS::NotifyParam' has a wrong offset!");

// Function b1-Managed.BED_FSMNode_GI_Loading_WaitGamePlayerInit.PostPropertyChanged
// 0x0020 (0x0020 - 0x0000)
struct BED_FSMNode_GI_Loading_WaitGamePlayerInit_PostPropertyChanged final
{
public:
	class FString                                 MemberName;                                        // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash)
	class FString                                 PropertyName;                                      // 0x0010(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash)
};
//static_assert(alignof(BED_FSMNode_GI_Loading_WaitGamePlayerInit_PostPropertyChanged) == 0x000008, "Wrong alignment on BED_FSMNode_GI_Loading_WaitGamePlayerInit_PostPropertyChanged");
//static_assert(sizeof(BED_FSMNode_GI_Loading_WaitGamePlayerInit_PostPropertyChanged) == 0x000020, "Wrong size on BED_FSMNode_GI_Loading_WaitGamePlayerInit_PostPropertyChanged");
//static_assert(offsetof(BED_FSMNode_GI_Loading_WaitGamePlayerInit_PostPropertyChanged, MemberName) == 0x000000, "Member 'BED_FSMNode_GI_Loading_WaitGamePlayerInit_PostPropertyChanged::MemberName' has a wrong offset!");
//static_assert(offsetof(BED_FSMNode_GI_Loading_WaitGamePlayerInit_PostPropertyChanged, PropertyName) == 0x000010, "Member 'BED_FSMNode_GI_Loading_WaitGamePlayerInit_PostPropertyChanged::PropertyName' has a wrong offset!");

// Function b1-Managed.BED_FSMNode_GI_Loading_WaitGamePlayerInit.GetNodeDescriptionInCS
// 0x0010 (0x0010 - 0x0000)
struct BED_FSMNode_GI_Loading_WaitGamePlayerInit_GetNodeDescriptionInCS final
{
public:
	class FString                                 ReturnValue;                                       // 0x0000(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash)
};
//static_assert(alignof(BED_FSMNode_GI_Loading_WaitGamePlayerInit_GetNodeDescriptionInCS) == 0x000008, "Wrong alignment on BED_FSMNode_GI_Loading_WaitGamePlayerInit_GetNodeDescriptionInCS");
//static_assert(sizeof(BED_FSMNode_GI_Loading_WaitGamePlayerInit_GetNodeDescriptionInCS) == 0x000010, "Wrong size on BED_FSMNode_GI_Loading_WaitGamePlayerInit_GetNodeDescriptionInCS");
//static_assert(offsetof(BED_FSMNode_GI_Loading_WaitGamePlayerInit_GetNodeDescriptionInCS, ReturnValue) == 0x000000, "Member 'BED_FSMNode_GI_Loading_WaitGamePlayerInit_GetNodeDescriptionInCS::ReturnValue' has a wrong offset!");

// Function b1-Managed.BED_CalliopeAssetBase.PostDuplicateInCS
// 0x0001 (0x0001 - 0x0000)
struct BED_CalliopeAssetBase_PostDuplicateInCS final
{
public:
	uint8                                         bDuplicateForPIE : 1;                              // 0x0000(0x0001)(BitIndex: 0x00, PropSize: 0x0001 (Parm, NoDestructor, HasGetValueTypeHash))
};
//static_assert(alignof(BED_CalliopeAssetBase_PostDuplicateInCS) == 0x000001, "Wrong alignment on BED_CalliopeAssetBase_PostDuplicateInCS");
//static_assert(sizeof(BED_CalliopeAssetBase_PostDuplicateInCS) == 0x000001, "Wrong size on BED_CalliopeAssetBase_PostDuplicateInCS");

// Function b1-Managed.BED_CalliopeAssetBase.OnPropertyChanged
// 0x0020 (0x0020 - 0x0000)
struct BED_CalliopeAssetBase_OnPropertyChanged final
{
public:
	class FString                                 MemberName;                                        // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash)
	class FString                                 PropertyName;                                      // 0x0010(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash)
};
//static_assert(alignof(BED_CalliopeAssetBase_OnPropertyChanged) == 0x000008, "Wrong alignment on BED_CalliopeAssetBase_OnPropertyChanged");
//static_assert(sizeof(BED_CalliopeAssetBase_OnPropertyChanged) == 0x000020, "Wrong size on BED_CalliopeAssetBase_OnPropertyChanged");
//static_assert(offsetof(BED_CalliopeAssetBase_OnPropertyChanged, MemberName) == 0x000000, "Member 'BED_CalliopeAssetBase_OnPropertyChanged::MemberName' has a wrong offset!");
//static_assert(offsetof(BED_CalliopeAssetBase_OnPropertyChanged, PropertyName) == 0x000010, "Member 'BED_CalliopeAssetBase_OnPropertyChanged::PropertyName' has a wrong offset!");

// Function b1-Managed.BED_CalliopeAssetBase.OnNodeDeactivate
// 0x0008 (0x0008 - 0x0000)
struct BED_CalliopeAssetBase_OnNodeDeactivate final
{
public:
	class UCalliopeNode*                          Node;                                              // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
//static_assert(alignof(BED_CalliopeAssetBase_OnNodeDeactivate) == 0x000008, "Wrong alignment on BED_CalliopeAssetBase_OnNodeDeactivate");
//static_assert(sizeof(BED_CalliopeAssetBase_OnNodeDeactivate) == 0x000008, "Wrong size on BED_CalliopeAssetBase_OnNodeDeactivate");
//static_assert(offsetof(BED_CalliopeAssetBase_OnNodeDeactivate, Node) == 0x000000, "Member 'BED_CalliopeAssetBase_OnNodeDeactivate::Node' has a wrong offset!");

// Function b1-Managed.BED_CalliopeAssetBase.OnNodeActivate
// 0x0008 (0x0008 - 0x0000)
struct BED_CalliopeAssetBase_OnNodeActivate final
{
public:
	class UCalliopeNode*                          Node;                                              // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
//static_assert(alignof(BED_CalliopeAssetBase_OnNodeActivate) == 0x000008, "Wrong alignment on BED_CalliopeAssetBase_OnNodeActivate");
//static_assert(sizeof(BED_CalliopeAssetBase_OnNodeActivate) == 0x000008, "Wrong size on BED_CalliopeAssetBase_OnNodeActivate");
//static_assert(offsetof(BED_CalliopeAssetBase_OnNodeActivate, Node) == 0x000000, "Member 'BED_CalliopeAssetBase_OnNodeActivate::Node' has a wrong offset!");

// Function b1-Managed.BED_CalliopeAssetBase.UnregisterNode
// 0x0010 (0x0010 - 0x0000)
struct BED_CalliopeAssetBase_UnregisterNode final
{
public:
	struct FCalliopeGuid                          NodeGuid;                                          // 0x0000(0x0010)(ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, HasGetValueTypeHash)
};
//static_assert(alignof(BED_CalliopeAssetBase_UnregisterNode) == 0x000004, "Wrong alignment on BED_CalliopeAssetBase_UnregisterNode");
//static_assert(sizeof(BED_CalliopeAssetBase_UnregisterNode) == 0x000010, "Wrong size on BED_CalliopeAssetBase_UnregisterNode");
//static_assert(offsetof(BED_CalliopeAssetBase_UnregisterNode, NodeGuid) == 0x000000, "Member 'BED_CalliopeAssetBase_UnregisterNode::NodeGuid' has a wrong offset!");

// Function b1-Managed.BED_CalliopeAssetBase.ExportToData
// 0x0001 (0x0001 - 0x0000)
struct BED_CalliopeAssetBase_ExportToData final
{
public:
	uint8                                         ReturnValue : 1;                                   // 0x0000(0x0001)(BitIndex: 0x00, PropSize: 0x0001 (Parm, OutParm, ReturnParm, NoDestructor, HasGetValueTypeHash))
};
//static_assert(alignof(BED_CalliopeAssetBase_ExportToData) == 0x000001, "Wrong alignment on BED_CalliopeAssetBase_ExportToData");
//static_assert(sizeof(BED_CalliopeAssetBase_ExportToData) == 0x000001, "Wrong size on BED_CalliopeAssetBase_ExportToData");

// Function b1-Managed.BED_CalliopeAssetBase.RegisterNode
// 0x0018 (0x0018 - 0x0000)
struct BED_CalliopeAssetBase_RegisterNode final
{
public:
	struct FCalliopeGuid                          NewGuid;                                           // 0x0000(0x0010)(ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, HasGetValueTypeHash)
	class UCalliopeNode*                          NewNode;                                           // 0x0010(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
//static_assert(alignof(BED_CalliopeAssetBase_RegisterNode) == 0x000008, "Wrong alignment on BED_CalliopeAssetBase_RegisterNode");
//static_assert(sizeof(BED_CalliopeAssetBase_RegisterNode) == 0x000018, "Wrong size on BED_CalliopeAssetBase_RegisterNode");
//static_assert(offsetof(BED_CalliopeAssetBase_RegisterNode, NewGuid) == 0x000000, "Member 'BED_CalliopeAssetBase_RegisterNode::NewGuid' has a wrong offset!");
//static_assert(offsetof(BED_CalliopeAssetBase_RegisterNode, NewNode) == 0x000010, "Member 'BED_CalliopeAssetBase_RegisterNode::NewNode' has a wrong offset!");

// Function b1-Managed.BED_CalliopeAssetBase.GetObserveActorNodes
// 0x0010 (0x0010 - 0x0000)
struct BED_CalliopeAssetBase_GetObserveActorNodes final
{
public:
	TArray<class UBED_QuestNode_ObserveByCondition*> ReturnValue;                                       // 0x0000(0x0010)(Parm, OutParm, ReturnParm)
};
//static_assert(alignof(BED_CalliopeAssetBase_GetObserveActorNodes) == 0x000008, "Wrong alignment on BED_CalliopeAssetBase_GetObserveActorNodes");
//static_assert(sizeof(BED_CalliopeAssetBase_GetObserveActorNodes) == 0x000010, "Wrong size on BED_CalliopeAssetBase_GetObserveActorNodes");
//static_assert(offsetof(BED_CalliopeAssetBase_GetObserveActorNodes, ReturnValue) == 0x000000, "Member 'BED_CalliopeAssetBase_GetObserveActorNodes::ReturnValue' has a wrong offset!");

// Function b1-Managed.BED_CalliopeAssetBase.ExportDataByExtern
// 0x0001 (0x0001 - 0x0000)
struct BED_CalliopeAssetBase_ExportDataByExtern final
{
public:
	uint8                                         ReturnValue : 1;                                   // 0x0000(0x0001)(BitIndex: 0x00, PropSize: 0x0001 (Parm, OutParm, ReturnParm, NoDestructor, HasGetValueTypeHash))
};
//static_assert(alignof(BED_CalliopeAssetBase_ExportDataByExtern) == 0x000001, "Wrong alignment on BED_CalliopeAssetBase_ExportDataByExtern");
//static_assert(sizeof(BED_CalliopeAssetBase_ExportDataByExtern) == 0x000001, "Wrong size on BED_CalliopeAssetBase_ExportDataByExtern");

// Function b1-Managed.BED_CalliopeAssetBase.GetSubGraphNodes
// 0x0010 (0x0010 - 0x0000)
struct BED_CalliopeAssetBase_GetSubGraphNodes final
{
public:
	TArray<class UBED_QuestNode_SubGraph*>        ReturnValue;                                       // 0x0000(0x0010)(Parm, OutParm, ReturnParm)
};
//static_assert(alignof(BED_CalliopeAssetBase_GetSubGraphNodes) == 0x000008, "Wrong alignment on BED_CalliopeAssetBase_GetSubGraphNodes");
//static_assert(sizeof(BED_CalliopeAssetBase_GetSubGraphNodes) == 0x000010, "Wrong size on BED_CalliopeAssetBase_GetSubGraphNodes");
//static_assert(offsetof(BED_CalliopeAssetBase_GetSubGraphNodes, ReturnValue) == 0x000000, "Member 'BED_CalliopeAssetBase_GetSubGraphNodes::ReturnValue' has a wrong offset!");

// Function b1-Managed.BED_CalliopeAssetBase.GetExtraDefaultOutputNodesInBranchGraph
// 0x0018 (0x0018 - 0x0000)
struct BED_CalliopeAssetBase_GetExtraDefaultOutputNodesInBranchGraph final
{
public:
	TArray<class UClass*>                         OutClasses;                                        // 0x0000(0x0010)(Parm, OutParm)
	int32                                         ReturnValue;                                       // 0x0010(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
//static_assert(alignof(BED_CalliopeAssetBase_GetExtraDefaultOutputNodesInBranchGraph) == 0x000008, "Wrong alignment on BED_CalliopeAssetBase_GetExtraDefaultOutputNodesInBranchGraph");
//static_assert(sizeof(BED_CalliopeAssetBase_GetExtraDefaultOutputNodesInBranchGraph) == 0x000018, "Wrong size on BED_CalliopeAssetBase_GetExtraDefaultOutputNodesInBranchGraph");
//static_assert(offsetof(BED_CalliopeAssetBase_GetExtraDefaultOutputNodesInBranchGraph, OutClasses) == 0x000000, "Member 'BED_CalliopeAssetBase_GetExtraDefaultOutputNodesInBranchGraph::OutClasses' has a wrong offset!");
//static_assert(offsetof(BED_CalliopeAssetBase_GetExtraDefaultOutputNodesInBranchGraph, ReturnValue) == 0x000010, "Member 'BED_CalliopeAssetBase_GetExtraDefaultOutputNodesInBranchGraph::ReturnValue' has a wrong offset!");

// Function b1-Managed.BED_CalliopeAssetBase.GetExtraDefaultInputNodesInBranchGraph
// 0x0018 (0x0018 - 0x0000)
struct BED_CalliopeAssetBase_GetExtraDefaultInputNodesInBranchGraph final
{
public:
	TArray<class UClass*>                         OutClasses;                                        // 0x0000(0x0010)(Parm, OutParm)
	int32                                         ReturnValue;                                       // 0x0010(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
//static_assert(alignof(BED_CalliopeAssetBase_GetExtraDefaultInputNodesInBranchGraph) == 0x000008, "Wrong alignment on BED_CalliopeAssetBase_GetExtraDefaultInputNodesInBranchGraph");
//static_assert(sizeof(BED_CalliopeAssetBase_GetExtraDefaultInputNodesInBranchGraph) == 0x000018, "Wrong size on BED_CalliopeAssetBase_GetExtraDefaultInputNodesInBranchGraph");
//static_assert(offsetof(BED_CalliopeAssetBase_GetExtraDefaultInputNodesInBranchGraph, OutClasses) == 0x000000, "Member 'BED_CalliopeAssetBase_GetExtraDefaultInputNodesInBranchGraph::OutClasses' has a wrong offset!");
//static_assert(offsetof(BED_CalliopeAssetBase_GetExtraDefaultInputNodesInBranchGraph, ReturnValue) == 0x000010, "Member 'BED_CalliopeAssetBase_GetExtraDefaultInputNodesInBranchGraph::ReturnValue' has a wrong offset!");

// Function b1-Managed.BED_CalliopeAssetBase.GetRerouteNodeClassInBranchGraph
// 0x0008 (0x0008 - 0x0000)
struct BED_CalliopeAssetBase_GetRerouteNodeClassInBranchGraph final
{
public:
	class UClass*                                 ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
//static_assert(alignof(BED_CalliopeAssetBase_GetRerouteNodeClassInBranchGraph) == 0x000008, "Wrong alignment on BED_CalliopeAssetBase_GetRerouteNodeClassInBranchGraph");
//static_assert(sizeof(BED_CalliopeAssetBase_GetRerouteNodeClassInBranchGraph) == 0x000008, "Wrong size on BED_CalliopeAssetBase_GetRerouteNodeClassInBranchGraph");
//static_assert(offsetof(BED_CalliopeAssetBase_GetRerouteNodeClassInBranchGraph, ReturnValue) == 0x000000, "Member 'BED_CalliopeAssetBase_GetRerouteNodeClassInBranchGraph::ReturnValue' has a wrong offset!");

// Function b1-Managed.BED_CalliopeAssetBase.GetStartNodeClassInBranchGraph
// 0x0008 (0x0008 - 0x0000)
struct BED_CalliopeAssetBase_GetStartNodeClassInBranchGraph final
{
public:
	class UClass*                                 ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
//static_assert(alignof(BED_CalliopeAssetBase_GetStartNodeClassInBranchGraph) == 0x000008, "Wrong alignment on BED_CalliopeAssetBase_GetStartNodeClassInBranchGraph");
//static_assert(sizeof(BED_CalliopeAssetBase_GetStartNodeClassInBranchGraph) == 0x000008, "Wrong size on BED_CalliopeAssetBase_GetStartNodeClassInBranchGraph");
//static_assert(offsetof(BED_CalliopeAssetBase_GetStartNodeClassInBranchGraph, ReturnValue) == 0x000000, "Member 'BED_CalliopeAssetBase_GetStartNodeClassInBranchGraph::ReturnValue' has a wrong offset!");

// Function b1-Managed.BED_CalliopeAssetBase.GetExtraDefaultOutputNodes
// 0x0018 (0x0018 - 0x0000)
struct BED_CalliopeAssetBase_GetExtraDefaultOutputNodes final
{
public:
	TArray<class UClass*>                         OutClasses;                                        // 0x0000(0x0010)(Parm, OutParm)
	int32                                         ReturnValue;                                       // 0x0010(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
//static_assert(alignof(BED_CalliopeAssetBase_GetExtraDefaultOutputNodes) == 0x000008, "Wrong alignment on BED_CalliopeAssetBase_GetExtraDefaultOutputNodes");
//static_assert(sizeof(BED_CalliopeAssetBase_GetExtraDefaultOutputNodes) == 0x000018, "Wrong size on BED_CalliopeAssetBase_GetExtraDefaultOutputNodes");
//static_assert(offsetof(BED_CalliopeAssetBase_GetExtraDefaultOutputNodes, OutClasses) == 0x000000, "Member 'BED_CalliopeAssetBase_GetExtraDefaultOutputNodes::OutClasses' has a wrong offset!");
//static_assert(offsetof(BED_CalliopeAssetBase_GetExtraDefaultOutputNodes, ReturnValue) == 0x000010, "Member 'BED_CalliopeAssetBase_GetExtraDefaultOutputNodes::ReturnValue' has a wrong offset!");

// Function b1-Managed.BED_CalliopeAssetBase.GetExtraDefaultInputNodes
// 0x0018 (0x0018 - 0x0000)
struct BED_CalliopeAssetBase_GetExtraDefaultInputNodes final
{
public:
	TArray<class UClass*>                         OutClasses;                                        // 0x0000(0x0010)(Parm, OutParm)
	int32                                         ReturnValue;                                       // 0x0010(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
//static_assert(alignof(BED_CalliopeAssetBase_GetExtraDefaultInputNodes) == 0x000008, "Wrong alignment on BED_CalliopeAssetBase_GetExtraDefaultInputNodes");
//static_assert(sizeof(BED_CalliopeAssetBase_GetExtraDefaultInputNodes) == 0x000018, "Wrong size on BED_CalliopeAssetBase_GetExtraDefaultInputNodes");
//static_assert(offsetof(BED_CalliopeAssetBase_GetExtraDefaultInputNodes, OutClasses) == 0x000000, "Member 'BED_CalliopeAssetBase_GetExtraDefaultInputNodes::OutClasses' has a wrong offset!");
//static_assert(offsetof(BED_CalliopeAssetBase_GetExtraDefaultInputNodes, ReturnValue) == 0x000010, "Member 'BED_CalliopeAssetBase_GetExtraDefaultInputNodes::ReturnValue' has a wrong offset!");

// Function b1-Managed.BED_CalliopeAssetBase.GetRerouteNodeClass
// 0x0008 (0x0008 - 0x0000)
struct BED_CalliopeAssetBase_GetRerouteNodeClass final
{
public:
	class UClass*                                 ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
//static_assert(alignof(BED_CalliopeAssetBase_GetRerouteNodeClass) == 0x000008, "Wrong alignment on BED_CalliopeAssetBase_GetRerouteNodeClass");
//static_assert(sizeof(BED_CalliopeAssetBase_GetRerouteNodeClass) == 0x000008, "Wrong size on BED_CalliopeAssetBase_GetRerouteNodeClass");
//static_assert(offsetof(BED_CalliopeAssetBase_GetRerouteNodeClass, ReturnValue) == 0x000000, "Member 'BED_CalliopeAssetBase_GetRerouteNodeClass::ReturnValue' has a wrong offset!");

// Function b1-Managed.BED_CalliopeAssetBase.GetStartNodeClass
// 0x0008 (0x0008 - 0x0000)
struct BED_CalliopeAssetBase_GetStartNodeClass final
{
public:
	class UClass*                                 ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
//static_assert(alignof(BED_CalliopeAssetBase_GetStartNodeClass) == 0x000008, "Wrong alignment on BED_CalliopeAssetBase_GetStartNodeClass");
//static_assert(sizeof(BED_CalliopeAssetBase_GetStartNodeClass) == 0x000008, "Wrong size on BED_CalliopeAssetBase_GetStartNodeClass");
//static_assert(offsetof(BED_CalliopeAssetBase_GetStartNodeClass, ReturnValue) == 0x000000, "Member 'BED_CalliopeAssetBase_GetStartNodeClass::ReturnValue' has a wrong offset!");

// Function b1-Managed.BED_CalliopeAssetBase.GetCustomOutputs
// 0x0010 (0x0010 - 0x0000)
struct BED_CalliopeAssetBase_GetCustomOutputs final
{
public:
	TArray<class FName>                           ReturnValue;                                       // 0x0000(0x0010)(Parm, OutParm, ReturnParm)
};
//static_assert(alignof(BED_CalliopeAssetBase_GetCustomOutputs) == 0x000008, "Wrong alignment on BED_CalliopeAssetBase_GetCustomOutputs");
//static_assert(sizeof(BED_CalliopeAssetBase_GetCustomOutputs) == 0x000010, "Wrong size on BED_CalliopeAssetBase_GetCustomOutputs");
//static_assert(offsetof(BED_CalliopeAssetBase_GetCustomOutputs, ReturnValue) == 0x000000, "Member 'BED_CalliopeAssetBase_GetCustomOutputs::ReturnValue' has a wrong offset!");

// Function b1-Managed.BED_CalliopeAssetBase.GetCustomInputs
// 0x0010 (0x0010 - 0x0000)
struct BED_CalliopeAssetBase_GetCustomInputs final
{
public:
	TArray<class FName>                           ReturnValue;                                       // 0x0000(0x0010)(Parm, OutParm, ReturnParm)
};
//static_assert(alignof(BED_CalliopeAssetBase_GetCustomInputs) == 0x000008, "Wrong alignment on BED_CalliopeAssetBase_GetCustomInputs");
//static_assert(sizeof(BED_CalliopeAssetBase_GetCustomInputs) == 0x000010, "Wrong size on BED_CalliopeAssetBase_GetCustomInputs");
//static_assert(offsetof(BED_CalliopeAssetBase_GetCustomInputs, ReturnValue) == 0x000000, "Member 'BED_CalliopeAssetBase_GetCustomInputs::ReturnValue' has a wrong offset!");

// Function b1-Managed.BED_CalliopeAssetBase.GetViewType
// 0x0001 (0x0001 - 0x0000)
struct BED_CalliopeAssetBase_GetViewType final
{
public:
	ECalliopeViewType                             ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
//static_assert(alignof(BED_CalliopeAssetBase_GetViewType) == 0x000001, "Wrong alignment on BED_CalliopeAssetBase_GetViewType");
//static_assert(sizeof(BED_CalliopeAssetBase_GetViewType) == 0x000001, "Wrong size on BED_CalliopeAssetBase_GetViewType");
//static_assert(offsetof(BED_CalliopeAssetBase_GetViewType, ReturnValue) == 0x000000, "Member 'BED_CalliopeAssetBase_GetViewType::ReturnValue' has a wrong offset!");

// Function b1-Managed.BED_CalliopeAssetBase.GetNodes
// 0x0050 (0x0050 - 0x0000)
struct BED_CalliopeAssetBase_GetNodes final
{
public:
	TMap<struct FCalliopeGuid, class UCalliopeNode*> ReturnValue;                                       // 0x0000(0x0050)(Parm, OutParm, ReturnParm)
};
//static_assert(alignof(BED_CalliopeAssetBase_GetNodes) == 0x000008, "Wrong alignment on BED_CalliopeAssetBase_GetNodes");
//static_assert(sizeof(BED_CalliopeAssetBase_GetNodes) == 0x000050, "Wrong size on BED_CalliopeAssetBase_GetNodes");
//static_assert(offsetof(BED_CalliopeAssetBase_GetNodes, ReturnValue) == 0x000000, "Member 'BED_CalliopeAssetBase_GetNodes::ReturnValue' has a wrong offset!");

// Function b1-Managed.BED_CalliopeAssetBase.GetNode
// 0x0018 (0x0018 - 0x0000)
struct BED_CalliopeAssetBase_GetNode final
{
public:
	struct FCalliopeGuid                          InGuid;                                            // 0x0000(0x0010)(ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, HasGetValueTypeHash)
	class UCalliopeNode*                          ReturnValue;                                       // 0x0010(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
//static_assert(alignof(BED_CalliopeAssetBase_GetNode) == 0x000008, "Wrong alignment on BED_CalliopeAssetBase_GetNode");
//static_assert(sizeof(BED_CalliopeAssetBase_GetNode) == 0x000018, "Wrong size on BED_CalliopeAssetBase_GetNode");
//static_assert(offsetof(BED_CalliopeAssetBase_GetNode, InGuid) == 0x000000, "Member 'BED_CalliopeAssetBase_GetNode::InGuid' has a wrong offset!");
//static_assert(offsetof(BED_CalliopeAssetBase_GetNode, ReturnValue) == 0x000010, "Member 'BED_CalliopeAssetBase_GetNode::ReturnValue' has a wrong offset!");

// Function b1-Managed.BED_CalliopeAssetBase.GetActorGuidOptions
// 0x0028 (0x0028 - 0x0000)
struct BED_CalliopeAssetBase_GetActorGuidOptions final
{
public:
	class FString                                 PropertyName;                                      // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash)
	TArray<struct FActorGuidOption>               OutOptions;                                        // 0x0010(0x0010)(Parm, OutParm)
	int32                                         ReturnValue;                                       // 0x0020(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
//static_assert(alignof(BED_CalliopeAssetBase_GetActorGuidOptions) == 0x000008, "Wrong alignment on BED_CalliopeAssetBase_GetActorGuidOptions");
//static_assert(sizeof(BED_CalliopeAssetBase_GetActorGuidOptions) == 0x000028, "Wrong size on BED_CalliopeAssetBase_GetActorGuidOptions");
//static_assert(offsetof(BED_CalliopeAssetBase_GetActorGuidOptions, PropertyName) == 0x000000, "Member 'BED_CalliopeAssetBase_GetActorGuidOptions::PropertyName' has a wrong offset!");
//static_assert(offsetof(BED_CalliopeAssetBase_GetActorGuidOptions, OutOptions) == 0x000010, "Member 'BED_CalliopeAssetBase_GetActorGuidOptions::OutOptions' has a wrong offset!");
//static_assert(offsetof(BED_CalliopeAssetBase_GetActorGuidOptions, ReturnValue) == 0x000020, "Member 'BED_CalliopeAssetBase_GetActorGuidOptions::ReturnValue' has a wrong offset!");

// Function b1-Managed.BED_CalliopeAssetBase.CanManageStates
// 0x0001 (0x0001 - 0x0000)
struct BED_CalliopeAssetBase_CanManageStates final
{
public:
	uint8                                         ReturnValue : 1;                                   // 0x0000(0x0001)(BitIndex: 0x00, PropSize: 0x0001 (Parm, OutParm, ReturnParm, NoDestructor, HasGetValueTypeHash))
};
//static_assert(alignof(BED_CalliopeAssetBase_CanManageStates) == 0x000001, "Wrong alignment on BED_CalliopeAssetBase_CanManageStates");
//static_assert(sizeof(BED_CalliopeAssetBase_CanManageStates) == 0x000001, "Wrong size on BED_CalliopeAssetBase_CanManageStates");

// Function b1-Managed.BED_CalliopeAssetBase.GetActorGuid
// 0x0020 (0x0020 - 0x0000)
struct BED_CalliopeAssetBase_GetActorGuid final
{
public:
	class AActor*                                 InActor;                                           // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class FString                                 OutActorGuid;                                      // 0x0008(0x0010)(Parm, OutParm, ZeroConstructor, HasGetValueTypeHash)
	uint8                                         ReturnValue : 1;                                   // 0x0018(0x0001)(BitIndex: 0x00, PropSize: 0x0001 (Parm, OutParm, ReturnParm, NoDestructor, HasGetValueTypeHash))
};
//static_assert(alignof(BED_CalliopeAssetBase_GetActorGuid) == 0x000008, "Wrong alignment on BED_CalliopeAssetBase_GetActorGuid");
//static_assert(sizeof(BED_CalliopeAssetBase_GetActorGuid) == 0x000020, "Wrong size on BED_CalliopeAssetBase_GetActorGuid");
//static_assert(offsetof(BED_CalliopeAssetBase_GetActorGuid, InActor) == 0x000000, "Member 'BED_CalliopeAssetBase_GetActorGuid::InActor' has a wrong offset!");
//static_assert(offsetof(BED_CalliopeAssetBase_GetActorGuid, OutActorGuid) == 0x000008, "Member 'BED_CalliopeAssetBase_GetActorGuid::OutActorGuid' has a wrong offset!");

// Function b1-Managed.BED_SkillAsset.GetExtraDefaultOutputNodesInBranchGraph
// 0x0018 (0x0018 - 0x0000)
struct BED_SkillAsset_GetExtraDefaultOutputNodesInBranchGraph final
{
public:
	TArray<class UClass*>                         OutClasses;                                        // 0x0000(0x0010)(Parm, OutParm)
	int32                                         ReturnValue;                                       // 0x0010(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
//static_assert(alignof(BED_SkillAsset_GetExtraDefaultOutputNodesInBranchGraph) == 0x000008, "Wrong alignment on BED_SkillAsset_GetExtraDefaultOutputNodesInBranchGraph");
//static_assert(sizeof(BED_SkillAsset_GetExtraDefaultOutputNodesInBranchGraph) == 0x000018, "Wrong size on BED_SkillAsset_GetExtraDefaultOutputNodesInBranchGraph");
//static_assert(offsetof(BED_SkillAsset_GetExtraDefaultOutputNodesInBranchGraph, OutClasses) == 0x000000, "Member 'BED_SkillAsset_GetExtraDefaultOutputNodesInBranchGraph::OutClasses' has a wrong offset!");
//static_assert(offsetof(BED_SkillAsset_GetExtraDefaultOutputNodesInBranchGraph, ReturnValue) == 0x000010, "Member 'BED_SkillAsset_GetExtraDefaultOutputNodesInBranchGraph::ReturnValue' has a wrong offset!");

// Function b1-Managed.BED_SkillAsset.GetExtraDefaultInputNodesInBranchGraph
// 0x0018 (0x0018 - 0x0000)
struct BED_SkillAsset_GetExtraDefaultInputNodesInBranchGraph final
{
public:
	TArray<class UClass*>                         OutClasses;                                        // 0x0000(0x0010)(Parm, OutParm)
	int32                                         ReturnValue;                                       // 0x0010(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
//static_assert(alignof(BED_SkillAsset_GetExtraDefaultInputNodesInBranchGraph) == 0x000008, "Wrong alignment on BED_SkillAsset_GetExtraDefaultInputNodesInBranchGraph");
//static_assert(sizeof(BED_SkillAsset_GetExtraDefaultInputNodesInBranchGraph) == 0x000018, "Wrong size on BED_SkillAsset_GetExtraDefaultInputNodesInBranchGraph");
//static_assert(offsetof(BED_SkillAsset_GetExtraDefaultInputNodesInBranchGraph, OutClasses) == 0x000000, "Member 'BED_SkillAsset_GetExtraDefaultInputNodesInBranchGraph::OutClasses' has a wrong offset!");
//static_assert(offsetof(BED_SkillAsset_GetExtraDefaultInputNodesInBranchGraph, ReturnValue) == 0x000010, "Member 'BED_SkillAsset_GetExtraDefaultInputNodesInBranchGraph::ReturnValue' has a wrong offset!");

// Function b1-Managed.BED_SkillAsset.GetRerouteNodeClassInBranchGraph
// 0x0008 (0x0008 - 0x0000)
struct BED_SkillAsset_GetRerouteNodeClassInBranchGraph final
{
public:
	class UClass*                                 ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
//static_assert(alignof(BED_SkillAsset_GetRerouteNodeClassInBranchGraph) == 0x000008, "Wrong alignment on BED_SkillAsset_GetRerouteNodeClassInBranchGraph");
//static_assert(sizeof(BED_SkillAsset_GetRerouteNodeClassInBranchGraph) == 0x000008, "Wrong size on BED_SkillAsset_GetRerouteNodeClassInBranchGraph");
//static_assert(offsetof(BED_SkillAsset_GetRerouteNodeClassInBranchGraph, ReturnValue) == 0x000000, "Member 'BED_SkillAsset_GetRerouteNodeClassInBranchGraph::ReturnValue' has a wrong offset!");

// Function b1-Managed.BED_SkillAsset.GetStartNodeClassInBranchGraph
// 0x0008 (0x0008 - 0x0000)
struct BED_SkillAsset_GetStartNodeClassInBranchGraph final
{
public:
	class UClass*                                 ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
//static_assert(alignof(BED_SkillAsset_GetStartNodeClassInBranchGraph) == 0x000008, "Wrong alignment on BED_SkillAsset_GetStartNodeClassInBranchGraph");
//static_assert(sizeof(BED_SkillAsset_GetStartNodeClassInBranchGraph) == 0x000008, "Wrong size on BED_SkillAsset_GetStartNodeClassInBranchGraph");
//static_assert(offsetof(BED_SkillAsset_GetStartNodeClassInBranchGraph, ReturnValue) == 0x000000, "Member 'BED_SkillAsset_GetStartNodeClassInBranchGraph::ReturnValue' has a wrong offset!");

// Function b1-Managed.BED_SkillAsset.GetExtraDefaultOutputNodes
// 0x0018 (0x0018 - 0x0000)
struct BED_SkillAsset_GetExtraDefaultOutputNodes final
{
public:
	TArray<class UClass*>                         OutClasses;                                        // 0x0000(0x0010)(Parm, OutParm)
	int32                                         ReturnValue;                                       // 0x0010(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
//static_assert(alignof(BED_SkillAsset_GetExtraDefaultOutputNodes) == 0x000008, "Wrong alignment on BED_SkillAsset_GetExtraDefaultOutputNodes");
//static_assert(sizeof(BED_SkillAsset_GetExtraDefaultOutputNodes) == 0x000018, "Wrong size on BED_SkillAsset_GetExtraDefaultOutputNodes");
//static_assert(offsetof(BED_SkillAsset_GetExtraDefaultOutputNodes, OutClasses) == 0x000000, "Member 'BED_SkillAsset_GetExtraDefaultOutputNodes::OutClasses' has a wrong offset!");
//static_assert(offsetof(BED_SkillAsset_GetExtraDefaultOutputNodes, ReturnValue) == 0x000010, "Member 'BED_SkillAsset_GetExtraDefaultOutputNodes::ReturnValue' has a wrong offset!");

// Function b1-Managed.BED_SkillAsset.GetExtraDefaultInputNodes
// 0x0018 (0x0018 - 0x0000)
struct BED_SkillAsset_GetExtraDefaultInputNodes final
{
public:
	TArray<class UClass*>                         OutClasses;                                        // 0x0000(0x0010)(Parm, OutParm)
	int32                                         ReturnValue;                                       // 0x0010(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
//static_assert(alignof(BED_SkillAsset_GetExtraDefaultInputNodes) == 0x000008, "Wrong alignment on BED_SkillAsset_GetExtraDefaultInputNodes");
//static_assert(sizeof(BED_SkillAsset_GetExtraDefaultInputNodes) == 0x000018, "Wrong size on BED_SkillAsset_GetExtraDefaultInputNodes");
//static_assert(offsetof(BED_SkillAsset_GetExtraDefaultInputNodes, OutClasses) == 0x000000, "Member 'BED_SkillAsset_GetExtraDefaultInputNodes::OutClasses' has a wrong offset!");
//static_assert(offsetof(BED_SkillAsset_GetExtraDefaultInputNodes, ReturnValue) == 0x000010, "Member 'BED_SkillAsset_GetExtraDefaultInputNodes::ReturnValue' has a wrong offset!");

// Function b1-Managed.BED_SkillAsset.GetRerouteNodeClass
// 0x0008 (0x0008 - 0x0000)
struct BED_SkillAsset_GetRerouteNodeClass final
{
public:
	class UClass*                                 ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
//static_assert(alignof(BED_SkillAsset_GetRerouteNodeClass) == 0x000008, "Wrong alignment on BED_SkillAsset_GetRerouteNodeClass");
//static_assert(sizeof(BED_SkillAsset_GetRerouteNodeClass) == 0x000008, "Wrong size on BED_SkillAsset_GetRerouteNodeClass");
//static_assert(offsetof(BED_SkillAsset_GetRerouteNodeClass, ReturnValue) == 0x000000, "Member 'BED_SkillAsset_GetRerouteNodeClass::ReturnValue' has a wrong offset!");

// Function b1-Managed.BED_SkillAsset.GetStartNodeClass
// 0x0008 (0x0008 - 0x0000)
struct BED_SkillAsset_GetStartNodeClass final
{
public:
	class UClass*                                 ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
//static_assert(alignof(BED_SkillAsset_GetStartNodeClass) == 0x000008, "Wrong alignment on BED_SkillAsset_GetStartNodeClass");
//static_assert(sizeof(BED_SkillAsset_GetStartNodeClass) == 0x000008, "Wrong size on BED_SkillAsset_GetStartNodeClass");
//static_assert(offsetof(BED_SkillAsset_GetStartNodeClass, ReturnValue) == 0x000000, "Member 'BED_SkillAsset_GetStartNodeClass::ReturnValue' has a wrong offset!");

// Function b1-Managed.BED_SkillAsset.GetViewType
// 0x0001 (0x0001 - 0x0000)
struct BED_SkillAsset_GetViewType final
{
public:
	ECalliopeViewType                             ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
//static_assert(alignof(BED_SkillAsset_GetViewType) == 0x000001, "Wrong alignment on BED_SkillAsset_GetViewType");
//static_assert(sizeof(BED_SkillAsset_GetViewType) == 0x000001, "Wrong size on BED_SkillAsset_GetViewType");
//static_assert(offsetof(BED_SkillAsset_GetViewType, ReturnValue) == 0x000000, "Member 'BED_SkillAsset_GetViewType::ReturnValue' has a wrong offset!");

// Function b1-Managed.BAN_DispLibPlayDBCDataAsset.GSNotifyCS
// 0x0040 (0x0040 - 0x0000)
struct BAN_DispLibPlayDBCDataAsset_GSNotifyCS final
{
public:
	struct FUStGSNotifyParam                      NotifyParam;                                       // 0x0000(0x0040)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
//static_assert(alignof(BAN_DispLibPlayDBCDataAsset_GSNotifyCS) == 0x000008, "Wrong alignment on BAN_DispLibPlayDBCDataAsset_GSNotifyCS");
//static_assert(sizeof(BAN_DispLibPlayDBCDataAsset_GSNotifyCS) == 0x000040, "Wrong size on BAN_DispLibPlayDBCDataAsset_GSNotifyCS");
//static_assert(offsetof(BAN_DispLibPlayDBCDataAsset_GSNotifyCS, NotifyParam) == 0x000000, "Member 'BAN_DispLibPlayDBCDataAsset_GSNotifyCS::NotifyParam' has a wrong offset!");

// Function b1-Managed.PlayerTransactionEventCollection.InteractTransactionStart
// 0x0008 (0x0008 - 0x0000)
struct PlayerTransactionEventCollection_InteractTransactionStart final
{
public:
	struct FPlayerTransactionInteractStartParams  Param;                                             // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
//static_assert(alignof(PlayerTransactionEventCollection_InteractTransactionStart) == 0x000008, "Wrong alignment on PlayerTransactionEventCollection_InteractTransactionStart");
//static_assert(sizeof(PlayerTransactionEventCollection_InteractTransactionStart) == 0x000008, "Wrong size on PlayerTransactionEventCollection_InteractTransactionStart");
//static_assert(offsetof(PlayerTransactionEventCollection_InteractTransactionStart, Param) == 0x000000, "Member 'PlayerTransactionEventCollection_InteractTransactionStart::Param' has a wrong offset!");

// Function b1-Managed.BAN_DispLibSimpleRibbonTrailsArray.GetSoftReferences
// 0x0010 (0x0010 - 0x0000)
struct BAN_DispLibSimpleRibbonTrailsArray_GetSoftReferences final
{
public:
	TArray<struct FSoftObjectPath>                ReturnValue;                                       // 0x0000(0x0010)(Parm, OutParm, ReturnParm)
};
//static_assert(alignof(BAN_DispLibSimpleRibbonTrailsArray_GetSoftReferences) == 0x000008, "Wrong alignment on BAN_DispLibSimpleRibbonTrailsArray_GetSoftReferences");
//static_assert(sizeof(BAN_DispLibSimpleRibbonTrailsArray_GetSoftReferences) == 0x000010, "Wrong size on BAN_DispLibSimpleRibbonTrailsArray_GetSoftReferences");
//static_assert(offsetof(BAN_DispLibSimpleRibbonTrailsArray_GetSoftReferences, ReturnValue) == 0x000000, "Member 'BAN_DispLibSimpleRibbonTrailsArray_GetSoftReferences::ReturnValue' has a wrong offset!");

// Function b1-Managed.BGWGameInstanceCS.OnGameModeMatchStateSetCS
// 0x0008 (0x0008 - 0x0000)
struct BGWGameInstanceCS_OnGameModeMatchStateSetCS final
{
public:
	class FName                                   NewMatchState;                                     // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
//static_assert(alignof(BGWGameInstanceCS_OnGameModeMatchStateSetCS) == 0x000004, "Wrong alignment on BGWGameInstanceCS_OnGameModeMatchStateSetCS");
//static_assert(sizeof(BGWGameInstanceCS_OnGameModeMatchStateSetCS) == 0x000008, "Wrong size on BGWGameInstanceCS_OnGameModeMatchStateSetCS");
//static_assert(offsetof(BGWGameInstanceCS_OnGameModeMatchStateSetCS, NewMatchState) == 0x000000, "Member 'BGWGameInstanceCS_OnGameModeMatchStateSetCS::NewMatchState' has a wrong offset!");

// Function b1-Managed.BGWGameInstanceCS.ReceiveTickEvenWhenPaused
// 0x0008 (0x0008 - 0x0000)
struct BGWGameInstanceCS_ReceiveTickEvenWhenPaused final
{
public:
	float                                         DeltaSeconds;                                      // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         TickGroup;                                         // 0x0004(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
//static_assert(alignof(BGWGameInstanceCS_ReceiveTickEvenWhenPaused) == 0x000004, "Wrong alignment on BGWGameInstanceCS_ReceiveTickEvenWhenPaused");
//static_assert(sizeof(BGWGameInstanceCS_ReceiveTickEvenWhenPaused) == 0x000008, "Wrong size on BGWGameInstanceCS_ReceiveTickEvenWhenPaused");
//static_assert(offsetof(BGWGameInstanceCS_ReceiveTickEvenWhenPaused, DeltaSeconds) == 0x000000, "Member 'BGWGameInstanceCS_ReceiveTickEvenWhenPaused::DeltaSeconds' has a wrong offset!");
//static_assert(offsetof(BGWGameInstanceCS_ReceiveTickEvenWhenPaused, TickGroup) == 0x000004, "Member 'BGWGameInstanceCS_ReceiveTickEvenWhenPaused::TickGroup' has a wrong offset!");

// Function b1-Managed.BGWGameInstanceCS.GetOnlineSessionClassCS
// 0x0008 (0x0008 - 0x0000)
struct BGWGameInstanceCS_GetOnlineSessionClassCS final
{
public:
	class UClass*                                 ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
//static_assert(alignof(BGWGameInstanceCS_GetOnlineSessionClassCS) == 0x000008, "Wrong alignment on BGWGameInstanceCS_GetOnlineSessionClassCS");
//static_assert(sizeof(BGWGameInstanceCS_GetOnlineSessionClassCS) == 0x000008, "Wrong size on BGWGameInstanceCS_GetOnlineSessionClassCS");
//static_assert(offsetof(BGWGameInstanceCS_GetOnlineSessionClassCS, ReturnValue) == 0x000000, "Member 'BGWGameInstanceCS_GetOnlineSessionClassCS::ReturnValue' has a wrong offset!");

// Function b1-Managed.BGWGameInstanceCS.StartGameInstanceForCS
// 0x0001 (0x0001 - 0x0000)
struct BGWGameInstanceCS_StartGameInstanceForCS final
{
public:
	EStartGameInstanceTypeForCS                   StartType;                                         // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
//static_assert(alignof(BGWGameInstanceCS_StartGameInstanceForCS) == 0x000001, "Wrong alignment on BGWGameInstanceCS_StartGameInstanceForCS");
//static_assert(sizeof(BGWGameInstanceCS_StartGameInstanceForCS) == 0x000001, "Wrong size on BGWGameInstanceCS_StartGameInstanceForCS");
//static_assert(offsetof(BGWGameInstanceCS_StartGameInstanceForCS, StartType) == 0x000000, "Member 'BGWGameInstanceCS_StartGameInstanceForCS::StartType' has a wrong offset!");

// Function b1-Managed.BGWGameInstanceCS.OnWorldTickStartCS
// 0x0008 (0x0008 - 0x0000)
struct BGWGameInstanceCS_OnWorldTickStartCS final
{
public:
	class UWorld*                                 World;                                             // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
//static_assert(alignof(BGWGameInstanceCS_OnWorldTickStartCS) == 0x000008, "Wrong alignment on BGWGameInstanceCS_OnWorldTickStartCS");
//static_assert(sizeof(BGWGameInstanceCS_OnWorldTickStartCS) == 0x000008, "Wrong size on BGWGameInstanceCS_OnWorldTickStartCS");
//static_assert(offsetof(BGWGameInstanceCS_OnWorldTickStartCS, World) == 0x000000, "Member 'BGWGameInstanceCS_OnWorldTickStartCS::World' has a wrong offset!");

// Function b1-Managed.BGWGameInstanceCS.OnPostActorTickCS
// 0x0008 (0x0008 - 0x0000)
struct BGWGameInstanceCS_OnPostActorTickCS final
{
public:
	class UWorld*                                 World;                                             // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
//static_assert(alignof(BGWGameInstanceCS_OnPostActorTickCS) == 0x000008, "Wrong alignment on BGWGameInstanceCS_OnPostActorTickCS");
//static_assert(sizeof(BGWGameInstanceCS_OnPostActorTickCS) == 0x000008, "Wrong size on BGWGameInstanceCS_OnPostActorTickCS");
//static_assert(offsetof(BGWGameInstanceCS_OnPostActorTickCS, World) == 0x000000, "Member 'BGWGameInstanceCS_OnPostActorTickCS::World' has a wrong offset!");

// Function b1-Managed.BGWGameInstanceCS.OnWorldChangedCS
// 0x0010 (0x0010 - 0x0000)
struct BGWGameInstanceCS_OnWorldChangedCS final
{
public:
	class UWorld*                                 OldWorld;                                          // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UWorld*                                 NewWorld;                                          // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
//static_assert(alignof(BGWGameInstanceCS_OnWorldChangedCS) == 0x000008, "Wrong alignment on BGWGameInstanceCS_OnWorldChangedCS");
//static_assert(sizeof(BGWGameInstanceCS_OnWorldChangedCS) == 0x000010, "Wrong size on BGWGameInstanceCS_OnWorldChangedCS");
//static_assert(offsetof(BGWGameInstanceCS_OnWorldChangedCS, OldWorld) == 0x000000, "Member 'BGWGameInstanceCS_OnWorldChangedCS::OldWorld' has a wrong offset!");
//static_assert(offsetof(BGWGameInstanceCS_OnWorldChangedCS, NewWorld) == 0x000008, "Member 'BGWGameInstanceCS_OnWorldChangedCS::NewWorld' has a wrong offset!");

// Function b1-Managed.BGWGameInstanceCS.ReceiveTick
// 0x0008 (0x0008 - 0x0000)
struct BGWGameInstanceCS_ReceiveTick final
{
public:
	float                                         DeltaSeconds;                                      // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         TickGroup;                                         // 0x0004(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
//static_assert(alignof(BGWGameInstanceCS_ReceiveTick) == 0x000004, "Wrong alignment on BGWGameInstanceCS_ReceiveTick");
//static_assert(sizeof(BGWGameInstanceCS_ReceiveTick) == 0x000008, "Wrong size on BGWGameInstanceCS_ReceiveTick");
//static_assert(offsetof(BGWGameInstanceCS_ReceiveTick, DeltaSeconds) == 0x000000, "Member 'BGWGameInstanceCS_ReceiveTick::DeltaSeconds' has a wrong offset!");
//static_assert(offsetof(BGWGameInstanceCS_ReceiveTick, TickGroup) == 0x000004, "Member 'BGWGameInstanceCS_ReceiveTick::TickGroup' has a wrong offset!");

// Function b1-Managed.BAN_DispLibUnitArtFresnel.GSNotifyCS
// 0x0040 (0x0040 - 0x0000)
struct BAN_DispLibUnitArtFresnel_GSNotifyCS final
{
public:
	struct FUStGSNotifyParam                      NotifyParam;                                       // 0x0000(0x0040)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
//static_assert(alignof(BAN_DispLibUnitArtFresnel_GSNotifyCS) == 0x000008, "Wrong alignment on BAN_DispLibUnitArtFresnel_GSNotifyCS");
//static_assert(sizeof(BAN_DispLibUnitArtFresnel_GSNotifyCS) == 0x000040, "Wrong size on BAN_DispLibUnitArtFresnel_GSNotifyCS");
//static_assert(offsetof(BAN_DispLibUnitArtFresnel_GSNotifyCS, NotifyParam) == 0x000000, "Member 'BAN_DispLibUnitArtFresnel_GSNotifyCS::NotifyParam' has a wrong offset!");

// Function b1-Managed.BGU_DispLibDBCCarrierActor.ApplyWorldOffsetCS
// 0x0020 (0x0020 - 0x0000)
struct BGU_DispLibDBCCarrierActor_ApplyWorldOffsetCS final
{
public:
	struct FVector                                InOffset;                                          // 0x0000(0x0018)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         bWorldShift : 1;                                   // 0x0018(0x0001)(BitIndex: 0x00, PropSize: 0x0001 (Parm, NoDestructor, HasGetValueTypeHash))
};
//static_assert(alignof(BGU_DispLibDBCCarrierActor_ApplyWorldOffsetCS) == 0x000008, "Wrong alignment on BGU_DispLibDBCCarrierActor_ApplyWorldOffsetCS");
//static_assert(sizeof(BGU_DispLibDBCCarrierActor_ApplyWorldOffsetCS) == 0x000020, "Wrong size on BGU_DispLibDBCCarrierActor_ApplyWorldOffsetCS");
//static_assert(offsetof(BGU_DispLibDBCCarrierActor_ApplyWorldOffsetCS, InOffset) == 0x000000, "Member 'BGU_DispLibDBCCarrierActor_ApplyWorldOffsetCS::InOffset' has a wrong offset!");

// Function b1-Managed.BED_FSMNode_GI_Loading_WaitLocalPlayerFillLoginOption.PostPropertyChanged
// 0x0020 (0x0020 - 0x0000)
struct BED_FSMNode_GI_Loading_WaitLocalPlayerFillLoginOption_PostPropertyChanged final
{
public:
	class FString                                 MemberName;                                        // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash)
	class FString                                 PropertyName;                                      // 0x0010(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash)
};
//static_assert(alignof(BED_FSMNode_GI_Loading_WaitLocalPlayerFillLoginOption_PostPropertyChanged) == 0x000008, "Wrong alignment on BED_FSMNode_GI_Loading_WaitLocalPlayerFillLoginOption_PostPropertyChanged");
//static_assert(sizeof(BED_FSMNode_GI_Loading_WaitLocalPlayerFillLoginOption_PostPropertyChanged) == 0x000020, "Wrong size on BED_FSMNode_GI_Loading_WaitLocalPlayerFillLoginOption_PostPropertyChanged");
//static_assert(offsetof(BED_FSMNode_GI_Loading_WaitLocalPlayerFillLoginOption_PostPropertyChanged, MemberName) == 0x000000, "Member 'BED_FSMNode_GI_Loading_WaitLocalPlayerFillLoginOption_PostPropertyChanged::MemberName' has a wrong offset!");
//static_assert(offsetof(BED_FSMNode_GI_Loading_WaitLocalPlayerFillLoginOption_PostPropertyChanged, PropertyName) == 0x000010, "Member 'BED_FSMNode_GI_Loading_WaitLocalPlayerFillLoginOption_PostPropertyChanged::PropertyName' has a wrong offset!");

// Function b1-Managed.BED_FSMNode_GI_Loading_WaitLocalPlayerFillLoginOption.GetNodeDescriptionInCS
// 0x0010 (0x0010 - 0x0000)
struct BED_FSMNode_GI_Loading_WaitLocalPlayerFillLoginOption_GetNodeDescriptionInCS final
{
public:
	class FString                                 ReturnValue;                                       // 0x0000(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash)
};
//static_assert(alignof(BED_FSMNode_GI_Loading_WaitLocalPlayerFillLoginOption_GetNodeDescriptionInCS) == 0x000008, "Wrong alignment on BED_FSMNode_GI_Loading_WaitLocalPlayerFillLoginOption_GetNodeDescriptionInCS");
//static_assert(sizeof(BED_FSMNode_GI_Loading_WaitLocalPlayerFillLoginOption_GetNodeDescriptionInCS) == 0x000010, "Wrong size on BED_FSMNode_GI_Loading_WaitLocalPlayerFillLoginOption_GetNodeDescriptionInCS");
//static_assert(offsetof(BED_FSMNode_GI_Loading_WaitLocalPlayerFillLoginOption_GetNodeDescriptionInCS, ReturnValue) == 0x000000, "Member 'BED_FSMNode_GI_Loading_WaitLocalPlayerFillLoginOption_GetNodeDescriptionInCS::ReturnValue' has a wrong offset!");

// Function b1-Managed.BWS_EnvInteractiveCapture.RemoveInteractor
// 0x0004 (0x0004 - 0x0000)
struct BWS_EnvInteractiveCapture_RemoveInteractor final
{
public:
	int32                                         InteractorID;                                      // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
//static_assert(alignof(BWS_EnvInteractiveCapture_RemoveInteractor) == 0x000004, "Wrong alignment on BWS_EnvInteractiveCapture_RemoveInteractor");
//static_assert(sizeof(BWS_EnvInteractiveCapture_RemoveInteractor) == 0x000004, "Wrong size on BWS_EnvInteractiveCapture_RemoveInteractor");
//static_assert(offsetof(BWS_EnvInteractiveCapture_RemoveInteractor, InteractorID) == 0x000000, "Member 'BWS_EnvInteractiveCapture_RemoveInteractor::InteractorID' has a wrong offset!");

// Function b1-Managed.BWS_EnvInteractiveCapture.AddInteractor
// 0x0038 (0x0038 - 0x0000)
struct BWS_EnvInteractiveCapture_AddInteractor final
{
public:
	class UPrimitiveComponent*                    PrimComp;                                          // 0x0000(0x0008)(ExportObject, Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         InteractiveType;                                   // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                Size;                                              // 0x0010(0x0018)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         Intensity;                                         // 0x0028(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         Duration;                                          // 0x002C(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         ReturnValue;                                       // 0x0030(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
//static_assert(alignof(BWS_EnvInteractiveCapture_AddInteractor) == 0x000008, "Wrong alignment on BWS_EnvInteractiveCapture_AddInteractor");
//static_assert(sizeof(BWS_EnvInteractiveCapture_AddInteractor) == 0x000038, "Wrong size on BWS_EnvInteractiveCapture_AddInteractor");
//static_assert(offsetof(BWS_EnvInteractiveCapture_AddInteractor, PrimComp) == 0x000000, "Member 'BWS_EnvInteractiveCapture_AddInteractor::PrimComp' has a wrong offset!");
//static_assert(offsetof(BWS_EnvInteractiveCapture_AddInteractor, InteractiveType) == 0x000008, "Member 'BWS_EnvInteractiveCapture_AddInteractor::InteractiveType' has a wrong offset!");
//static_assert(offsetof(BWS_EnvInteractiveCapture_AddInteractor, Size) == 0x000010, "Member 'BWS_EnvInteractiveCapture_AddInteractor::Size' has a wrong offset!");
//static_assert(offsetof(BWS_EnvInteractiveCapture_AddInteractor, Intensity) == 0x000028, "Member 'BWS_EnvInteractiveCapture_AddInteractor::Intensity' has a wrong offset!");
//static_assert(offsetof(BWS_EnvInteractiveCapture_AddInteractor, Duration) == 0x00002C, "Member 'BWS_EnvInteractiveCapture_AddInteractor::Duration' has a wrong offset!");
//static_assert(offsetof(BWS_EnvInteractiveCapture_AddInteractor, ReturnValue) == 0x000030, "Member 'BWS_EnvInteractiveCapture_AddInteractor::ReturnValue' has a wrong offset!");

// Function b1-Managed.BWS_EnvInteractiveCapture.TriggerOnce
// 0x0040 (0x0040 - 0x0000)
struct BWS_EnvInteractiveCapture_TriggerOnce final
{
public:
	struct FVector                                Position;                                          // 0x0000(0x0018)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                Size;                                              // 0x0018(0x0018)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         InteractiveType;                                   // 0x0030(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         Intensity;                                         // 0x0034(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         Duration;                                          // 0x0038(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         ReturnValue;                                       // 0x003C(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
//static_assert(alignof(BWS_EnvInteractiveCapture_TriggerOnce) == 0x000008, "Wrong alignment on BWS_EnvInteractiveCapture_TriggerOnce");
//static_assert(sizeof(BWS_EnvInteractiveCapture_TriggerOnce) == 0x000040, "Wrong size on BWS_EnvInteractiveCapture_TriggerOnce");
//static_assert(offsetof(BWS_EnvInteractiveCapture_TriggerOnce, Position) == 0x000000, "Member 'BWS_EnvInteractiveCapture_TriggerOnce::Position' has a wrong offset!");
//static_assert(offsetof(BWS_EnvInteractiveCapture_TriggerOnce, Size) == 0x000018, "Member 'BWS_EnvInteractiveCapture_TriggerOnce::Size' has a wrong offset!");
//static_assert(offsetof(BWS_EnvInteractiveCapture_TriggerOnce, InteractiveType) == 0x000030, "Member 'BWS_EnvInteractiveCapture_TriggerOnce::InteractiveType' has a wrong offset!");
//static_assert(offsetof(BWS_EnvInteractiveCapture_TriggerOnce, Intensity) == 0x000034, "Member 'BWS_EnvInteractiveCapture_TriggerOnce::Intensity' has a wrong offset!");
//static_assert(offsetof(BWS_EnvInteractiveCapture_TriggerOnce, Duration) == 0x000038, "Member 'BWS_EnvInteractiveCapture_TriggerOnce::Duration' has a wrong offset!");
//static_assert(offsetof(BWS_EnvInteractiveCapture_TriggerOnce, ReturnValue) == 0x00003C, "Member 'BWS_EnvInteractiveCapture_TriggerOnce::ReturnValue' has a wrong offset!");

// Function b1-Managed.BWS_DispLibImageProcessor.CombileRGB
// 0x0028 (0x0028 - 0x0000)
struct BWS_DispLibImageProcessor_CombileRGB final
{
public:
	class UTexture*                               RChannel;                                          // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UTexture*                               GChannel;                                          // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UTexture*                               BChannel;                                          // 0x0010(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UTextureRenderTarget2D*                 DstTex;                                            // 0x0018(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         IsFlipVerticalAxis : 1;                            // 0x0020(0x0001)(BitIndex: 0x00, PropSize: 0x0001 (Parm, NoDestructor, HasGetValueTypeHash))
};
//static_assert(alignof(BWS_DispLibImageProcessor_CombileRGB) == 0x000008, "Wrong alignment on BWS_DispLibImageProcessor_CombileRGB");
//static_assert(sizeof(BWS_DispLibImageProcessor_CombileRGB) == 0x000028, "Wrong size on BWS_DispLibImageProcessor_CombileRGB");
//static_assert(offsetof(BWS_DispLibImageProcessor_CombileRGB, RChannel) == 0x000000, "Member 'BWS_DispLibImageProcessor_CombileRGB::RChannel' has a wrong offset!");
//static_assert(offsetof(BWS_DispLibImageProcessor_CombileRGB, GChannel) == 0x000008, "Member 'BWS_DispLibImageProcessor_CombileRGB::GChannel' has a wrong offset!");
//static_assert(offsetof(BWS_DispLibImageProcessor_CombileRGB, BChannel) == 0x000010, "Member 'BWS_DispLibImageProcessor_CombileRGB::BChannel' has a wrong offset!");
//static_assert(offsetof(BWS_DispLibImageProcessor_CombileRGB, DstTex) == 0x000018, "Member 'BWS_DispLibImageProcessor_CombileRGB::DstTex' has a wrong offset!");

// Function b1-Managed.BWS_DispLibImageProcessor.KawaseBlur
// 0x0018 (0x0018 - 0x0000)
struct BWS_DispLibImageProcessor_KawaseBlur final
{
public:
	class UTexture*                               SrcTex;                                            // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UTextureRenderTarget2D*                 DstTex;                                            // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         IsFlipVerticalAxis : 1;                            // 0x0010(0x0001)(BitIndex: 0x00, PropSize: 0x0001 (Parm, NoDestructor, HasGetValueTypeHash))
};
//static_assert(alignof(BWS_DispLibImageProcessor_KawaseBlur) == 0x000008, "Wrong alignment on BWS_DispLibImageProcessor_KawaseBlur");
//static_assert(sizeof(BWS_DispLibImageProcessor_KawaseBlur) == 0x000018, "Wrong size on BWS_DispLibImageProcessor_KawaseBlur");
//static_assert(offsetof(BWS_DispLibImageProcessor_KawaseBlur, SrcTex) == 0x000000, "Member 'BWS_DispLibImageProcessor_KawaseBlur::SrcTex' has a wrong offset!");
//static_assert(offsetof(BWS_DispLibImageProcessor_KawaseBlur, DstTex) == 0x000008, "Member 'BWS_DispLibImageProcessor_KawaseBlur::DstTex' has a wrong offset!");

// Function b1-Managed.BWS_DispLibImageProcessor.Init
// 0x0018 (0x0018 - 0x0000)
struct BWS_DispLibImageProcessor_Init final
{
public:
	class UObject*                                WorldContext;                                      // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class FString                                 ConfigPath;                                        // 0x0008(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash)
};
//static_assert(alignof(BWS_DispLibImageProcessor_Init) == 0x000008, "Wrong alignment on BWS_DispLibImageProcessor_Init");
//static_assert(sizeof(BWS_DispLibImageProcessor_Init) == 0x000018, "Wrong size on BWS_DispLibImageProcessor_Init");
//static_assert(offsetof(BWS_DispLibImageProcessor_Init, WorldContext) == 0x000000, "Member 'BWS_DispLibImageProcessor_Init::WorldContext' has a wrong offset!");
//static_assert(offsetof(BWS_DispLibImageProcessor_Init, ConfigPath) == 0x000008, "Member 'BWS_DispLibImageProcessor_Init::ConfigPath' has a wrong offset!");

// Function b1-Managed.BWS_DispLibImageProcessor.Blit
// 0x0020 (0x0020 - 0x0000)
struct BWS_DispLibImageProcessor_Blit final
{
public:
	class UTexture*                               SrcTex;                                            // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UTexture*                               BlendTex;                                          // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UTextureRenderTarget2D*                 DstTex;                                            // 0x0010(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         BlendAlpha;                                        // 0x0018(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         IsFlipVerticalAxis : 1;                            // 0x001C(0x0001)(BitIndex: 0x00, PropSize: 0x0001 (Parm, NoDestructor, HasGetValueTypeHash))
};
//static_assert(alignof(BWS_DispLibImageProcessor_Blit) == 0x000008, "Wrong alignment on BWS_DispLibImageProcessor_Blit");
//static_assert(sizeof(BWS_DispLibImageProcessor_Blit) == 0x000020, "Wrong size on BWS_DispLibImageProcessor_Blit");
//static_assert(offsetof(BWS_DispLibImageProcessor_Blit, SrcTex) == 0x000000, "Member 'BWS_DispLibImageProcessor_Blit::SrcTex' has a wrong offset!");
//static_assert(offsetof(BWS_DispLibImageProcessor_Blit, BlendTex) == 0x000008, "Member 'BWS_DispLibImageProcessor_Blit::BlendTex' has a wrong offset!");
//static_assert(offsetof(BWS_DispLibImageProcessor_Blit, DstTex) == 0x000010, "Member 'BWS_DispLibImageProcessor_Blit::DstTex' has a wrong offset!");
//static_assert(offsetof(BWS_DispLibImageProcessor_Blit, BlendAlpha) == 0x000018, "Member 'BWS_DispLibImageProcessor_Blit::BlendAlpha' has a wrong offset!");

// Function b1-Managed.GSDispLib_PostProcessActor.OnAlreadyFinish
// 0x0008 (0x0008 - 0x0000)
struct GSDispLib_PostProcessActor_OnAlreadyFinish final
{
public:
	class UGSDispLib_PostProcessContext*          Context;                                           // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
//static_assert(alignof(GSDispLib_PostProcessActor_OnAlreadyFinish) == 0x000008, "Wrong alignment on GSDispLib_PostProcessActor_OnAlreadyFinish");
//static_assert(sizeof(GSDispLib_PostProcessActor_OnAlreadyFinish) == 0x000008, "Wrong size on GSDispLib_PostProcessActor_OnAlreadyFinish");
//static_assert(offsetof(GSDispLib_PostProcessActor_OnAlreadyFinish, Context) == 0x000000, "Member 'GSDispLib_PostProcessActor_OnAlreadyFinish::Context' has a wrong offset!");

// Function b1-Managed.GSDispLib_PostProcessActor.OnAlreadyBegin
// 0x0008 (0x0008 - 0x0000)
struct GSDispLib_PostProcessActor_OnAlreadyBegin final
{
public:
	class UGSDispLib_PostProcessContext*          Context;                                           // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
//static_assert(alignof(GSDispLib_PostProcessActor_OnAlreadyBegin) == 0x000008, "Wrong alignment on GSDispLib_PostProcessActor_OnAlreadyBegin");
//static_assert(sizeof(GSDispLib_PostProcessActor_OnAlreadyBegin) == 0x000008, "Wrong size on GSDispLib_PostProcessActor_OnAlreadyBegin");
//static_assert(offsetof(GSDispLib_PostProcessActor_OnAlreadyBegin, Context) == 0x000000, "Member 'GSDispLib_PostProcessActor_OnAlreadyBegin::Context' has a wrong offset!");

// Function b1-Managed.GSDispLib_PostProcessActor.OnEnterFinish
// 0x0008 (0x0008 - 0x0000)
struct GSDispLib_PostProcessActor_OnEnterFinish final
{
public:
	class UGSDispLib_PostProcessContext*          Context;                                           // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
//static_assert(alignof(GSDispLib_PostProcessActor_OnEnterFinish) == 0x000008, "Wrong alignment on GSDispLib_PostProcessActor_OnEnterFinish");
//static_assert(sizeof(GSDispLib_PostProcessActor_OnEnterFinish) == 0x000008, "Wrong size on GSDispLib_PostProcessActor_OnEnterFinish");
//static_assert(offsetof(GSDispLib_PostProcessActor_OnEnterFinish, Context) == 0x000000, "Member 'GSDispLib_PostProcessActor_OnEnterFinish::Context' has a wrong offset!");

// Function b1-Managed.GSDispLib_PostProcessActor.OnEnterBegin
// 0x0008 (0x0008 - 0x0000)
struct GSDispLib_PostProcessActor_OnEnterBegin final
{
public:
	class UGSDispLib_PostProcessContext*          Context;                                           // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
//static_assert(alignof(GSDispLib_PostProcessActor_OnEnterBegin) == 0x000008, "Wrong alignment on GSDispLib_PostProcessActor_OnEnterBegin");
//static_assert(sizeof(GSDispLib_PostProcessActor_OnEnterBegin) == 0x000008, "Wrong size on GSDispLib_PostProcessActor_OnEnterBegin");
//static_assert(offsetof(GSDispLib_PostProcessActor_OnEnterBegin, Context) == 0x000000, "Member 'GSDispLib_PostProcessActor_OnEnterBegin::Context' has a wrong offset!");

// Function b1-Managed.GSDispLib_PostProcessActor.OnEffectTick
// 0x0010 (0x0010 - 0x0000)
struct GSDispLib_PostProcessActor_OnEffectTick final
{
public:
	float                                         DeltaTime;                                         // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         Progress_0;                                        // 0x0004(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UGSDispLib_PostProcessContext*          Context;                                           // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
//static_assert(alignof(GSDispLib_PostProcessActor_OnEffectTick) == 0x000008, "Wrong alignment on GSDispLib_PostProcessActor_OnEffectTick");
//static_assert(sizeof(GSDispLib_PostProcessActor_OnEffectTick) == 0x000010, "Wrong size on GSDispLib_PostProcessActor_OnEffectTick");
//static_assert(offsetof(GSDispLib_PostProcessActor_OnEffectTick, DeltaTime) == 0x000000, "Member 'GSDispLib_PostProcessActor_OnEffectTick::DeltaTime' has a wrong offset!");
//static_assert(offsetof(GSDispLib_PostProcessActor_OnEffectTick, Progress_0) == 0x000004, "Member 'GSDispLib_PostProcessActor_OnEffectTick::Progress_0' has a wrong offset!");
//static_assert(offsetof(GSDispLib_PostProcessActor_OnEffectTick, Context) == 0x000008, "Member 'GSDispLib_PostProcessActor_OnEffectTick::Context' has a wrong offset!");

// Function b1-Managed.GSDispLib_PostProcessActor.OnEndFinish
// 0x0008 (0x0008 - 0x0000)
struct GSDispLib_PostProcessActor_OnEndFinish final
{
public:
	class UGSDispLib_PostProcessContext*          Context;                                           // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
//static_assert(alignof(GSDispLib_PostProcessActor_OnEndFinish) == 0x000008, "Wrong alignment on GSDispLib_PostProcessActor_OnEndFinish");
//static_assert(sizeof(GSDispLib_PostProcessActor_OnEndFinish) == 0x000008, "Wrong size on GSDispLib_PostProcessActor_OnEndFinish");
//static_assert(offsetof(GSDispLib_PostProcessActor_OnEndFinish, Context) == 0x000000, "Member 'GSDispLib_PostProcessActor_OnEndFinish::Context' has a wrong offset!");

// Function b1-Managed.GSDispLib_PostProcessActor.OnEndBegin
// 0x0008 (0x0008 - 0x0000)
struct GSDispLib_PostProcessActor_OnEndBegin final
{
public:
	class UGSDispLib_PostProcessContext*          Context;                                           // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
//static_assert(alignof(GSDispLib_PostProcessActor_OnEndBegin) == 0x000008, "Wrong alignment on GSDispLib_PostProcessActor_OnEndBegin");
//static_assert(sizeof(GSDispLib_PostProcessActor_OnEndBegin) == 0x000008, "Wrong size on GSDispLib_PostProcessActor_OnEndBegin");
//static_assert(offsetof(GSDispLib_PostProcessActor_OnEndBegin, Context) == 0x000000, "Member 'GSDispLib_PostProcessActor_OnEndBegin::Context' has a wrong offset!");

// Function b1-Managed.GSDispLib_PostProcessActor.OnInit
// 0x0038 (0x0038 - 0x0000)
struct GSDispLib_PostProcessActor_OnInit final
{
public:
	class UGSDispLib_PostProcessContext*          Context;                                           // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FUDispLib_PostPorcessCommonConf        Conf;                                              // 0x0008(0x0030)(Parm, HasGetValueTypeHash)
};
//static_assert(alignof(GSDispLib_PostProcessActor_OnInit) == 0x000008, "Wrong alignment on GSDispLib_PostProcessActor_OnInit");
//static_assert(sizeof(GSDispLib_PostProcessActor_OnInit) == 0x000038, "Wrong size on GSDispLib_PostProcessActor_OnInit");
//static_assert(offsetof(GSDispLib_PostProcessActor_OnInit, Context) == 0x000000, "Member 'GSDispLib_PostProcessActor_OnInit::Context' has a wrong offset!");
//static_assert(offsetof(GSDispLib_PostProcessActor_OnInit, Conf) == 0x000008, "Member 'GSDispLib_PostProcessActor_OnInit::Conf' has a wrong offset!");

// Function b1-Managed.GSDispLib_PP_VaFogOfWar.OnAlreadyBegin
// 0x0008 (0x0008 - 0x0000)
struct GSDispLib_PP_VaFogOfWar_OnAlreadyBegin final
{
public:
	class UGSDispLib_PostProcessContext*          Context;                                           // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
//static_assert(alignof(GSDispLib_PP_VaFogOfWar_OnAlreadyBegin) == 0x000008, "Wrong alignment on GSDispLib_PP_VaFogOfWar_OnAlreadyBegin");
//static_assert(sizeof(GSDispLib_PP_VaFogOfWar_OnAlreadyBegin) == 0x000008, "Wrong size on GSDispLib_PP_VaFogOfWar_OnAlreadyBegin");
//static_assert(offsetof(GSDispLib_PP_VaFogOfWar_OnAlreadyBegin, Context) == 0x000000, "Member 'GSDispLib_PP_VaFogOfWar_OnAlreadyBegin::Context' has a wrong offset!");

// Function b1-Managed.GSDispLib_PP_VaFogOfWar.OnEnterFinish
// 0x0008 (0x0008 - 0x0000)
struct GSDispLib_PP_VaFogOfWar_OnEnterFinish final
{
public:
	class UGSDispLib_PostProcessContext*          Context;                                           // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
//static_assert(alignof(GSDispLib_PP_VaFogOfWar_OnEnterFinish) == 0x000008, "Wrong alignment on GSDispLib_PP_VaFogOfWar_OnEnterFinish");
//static_assert(sizeof(GSDispLib_PP_VaFogOfWar_OnEnterFinish) == 0x000008, "Wrong size on GSDispLib_PP_VaFogOfWar_OnEnterFinish");
//static_assert(offsetof(GSDispLib_PP_VaFogOfWar_OnEnterFinish, Context) == 0x000000, "Member 'GSDispLib_PP_VaFogOfWar_OnEnterFinish::Context' has a wrong offset!");

// Function b1-Managed.GSDispLib_PP_VaFogOfWar.OnEffectTick
// 0x0010 (0x0010 - 0x0000)
struct GSDispLib_PP_VaFogOfWar_OnEffectTick final
{
public:
	float                                         DeltaTime;                                         // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         Progress_0;                                        // 0x0004(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UGSDispLib_PostProcessContext*          Context;                                           // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
//static_assert(alignof(GSDispLib_PP_VaFogOfWar_OnEffectTick) == 0x000008, "Wrong alignment on GSDispLib_PP_VaFogOfWar_OnEffectTick");
//static_assert(sizeof(GSDispLib_PP_VaFogOfWar_OnEffectTick) == 0x000010, "Wrong size on GSDispLib_PP_VaFogOfWar_OnEffectTick");
//static_assert(offsetof(GSDispLib_PP_VaFogOfWar_OnEffectTick, DeltaTime) == 0x000000, "Member 'GSDispLib_PP_VaFogOfWar_OnEffectTick::DeltaTime' has a wrong offset!");
//static_assert(offsetof(GSDispLib_PP_VaFogOfWar_OnEffectTick, Progress_0) == 0x000004, "Member 'GSDispLib_PP_VaFogOfWar_OnEffectTick::Progress_0' has a wrong offset!");
//static_assert(offsetof(GSDispLib_PP_VaFogOfWar_OnEffectTick, Context) == 0x000008, "Member 'GSDispLib_PP_VaFogOfWar_OnEffectTick::Context' has a wrong offset!");

// Function b1-Managed.GSDispLib_PP_VaFogOfWar.OnEnterBegin
// 0x0008 (0x0008 - 0x0000)
struct GSDispLib_PP_VaFogOfWar_OnEnterBegin final
{
public:
	class UGSDispLib_PostProcessContext*          Context;                                           // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
//static_assert(alignof(GSDispLib_PP_VaFogOfWar_OnEnterBegin) == 0x000008, "Wrong alignment on GSDispLib_PP_VaFogOfWar_OnEnterBegin");
//static_assert(sizeof(GSDispLib_PP_VaFogOfWar_OnEnterBegin) == 0x000008, "Wrong size on GSDispLib_PP_VaFogOfWar_OnEnterBegin");
//static_assert(offsetof(GSDispLib_PP_VaFogOfWar_OnEnterBegin, Context) == 0x000000, "Member 'GSDispLib_PP_VaFogOfWar_OnEnterBegin::Context' has a wrong offset!");

// Function b1-Managed.GSDispLib_PP_VaFogOfWar.OnEndFinish
// 0x0008 (0x0008 - 0x0000)
struct GSDispLib_PP_VaFogOfWar_OnEndFinish final
{
public:
	class UGSDispLib_PostProcessContext*          Context;                                           // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
//static_assert(alignof(GSDispLib_PP_VaFogOfWar_OnEndFinish) == 0x000008, "Wrong alignment on GSDispLib_PP_VaFogOfWar_OnEndFinish");
//static_assert(sizeof(GSDispLib_PP_VaFogOfWar_OnEndFinish) == 0x000008, "Wrong size on GSDispLib_PP_VaFogOfWar_OnEndFinish");
//static_assert(offsetof(GSDispLib_PP_VaFogOfWar_OnEndFinish, Context) == 0x000000, "Member 'GSDispLib_PP_VaFogOfWar_OnEndFinish::Context' has a wrong offset!");

// Function b1-Managed.GSDispLib_PP_VaFogOfWar.OnEndBegin
// 0x0008 (0x0008 - 0x0000)
struct GSDispLib_PP_VaFogOfWar_OnEndBegin final
{
public:
	class UGSDispLib_PostProcessContext*          Context;                                           // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
//static_assert(alignof(GSDispLib_PP_VaFogOfWar_OnEndBegin) == 0x000008, "Wrong alignment on GSDispLib_PP_VaFogOfWar_OnEndBegin");
//static_assert(sizeof(GSDispLib_PP_VaFogOfWar_OnEndBegin) == 0x000008, "Wrong size on GSDispLib_PP_VaFogOfWar_OnEndBegin");
//static_assert(offsetof(GSDispLib_PP_VaFogOfWar_OnEndBegin, Context) == 0x000000, "Member 'GSDispLib_PP_VaFogOfWar_OnEndBegin::Context' has a wrong offset!");

// Function b1-Managed.GSDispLib_PP_VaFogOfWar.OnInit
// 0x0038 (0x0038 - 0x0000)
struct GSDispLib_PP_VaFogOfWar_OnInit final
{
public:
	class UGSDispLib_PostProcessContext*          Context;                                           // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FUDispLib_PostPorcessCommonConf        Conf;                                              // 0x0008(0x0030)(Parm, HasGetValueTypeHash)
};
//static_assert(alignof(GSDispLib_PP_VaFogOfWar_OnInit) == 0x000008, "Wrong alignment on GSDispLib_PP_VaFogOfWar_OnInit");
//static_assert(sizeof(GSDispLib_PP_VaFogOfWar_OnInit) == 0x000038, "Wrong size on GSDispLib_PP_VaFogOfWar_OnInit");
//static_assert(offsetof(GSDispLib_PP_VaFogOfWar_OnInit, Context) == 0x000000, "Member 'GSDispLib_PP_VaFogOfWar_OnInit::Context' has a wrong offset!");
//static_assert(offsetof(GSDispLib_PP_VaFogOfWar_OnInit, Conf) == 0x000008, "Member 'GSDispLib_PP_VaFogOfWar_OnInit::Conf' has a wrong offset!");

// Function b1-Managed.BED_QuestNode_StartWaveSpawnByChallenge.GetNodeDescriptionInCS
// 0x0010 (0x0010 - 0x0000)
struct BED_QuestNode_StartWaveSpawnByChallenge_GetNodeDescriptionInCS final
{
public:
	class FString                                 ReturnValue;                                       // 0x0000(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash)
};
//static_assert(alignof(BED_QuestNode_StartWaveSpawnByChallenge_GetNodeDescriptionInCS) == 0x000008, "Wrong alignment on BED_QuestNode_StartWaveSpawnByChallenge_GetNodeDescriptionInCS");
//static_assert(sizeof(BED_QuestNode_StartWaveSpawnByChallenge_GetNodeDescriptionInCS) == 0x000010, "Wrong size on BED_QuestNode_StartWaveSpawnByChallenge_GetNodeDescriptionInCS");
//static_assert(offsetof(BED_QuestNode_StartWaveSpawnByChallenge_GetNodeDescriptionInCS, ReturnValue) == 0x000000, "Member 'BED_QuestNode_StartWaveSpawnByChallenge_GetNodeDescriptionInCS::ReturnValue' has a wrong offset!");

// Function b1-Managed.BUAnimPerformer.BlueprintUpdateAnimation
// 0x0004 (0x0004 - 0x0000)
struct BUAnimPerformer_BlueprintUpdateAnimation final
{
public:
	float                                         DeltaTimeX;                                        // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
//static_assert(alignof(BUAnimPerformer_BlueprintUpdateAnimation) == 0x000004, "Wrong alignment on BUAnimPerformer_BlueprintUpdateAnimation");
//static_assert(sizeof(BUAnimPerformer_BlueprintUpdateAnimation) == 0x000004, "Wrong size on BUAnimPerformer_BlueprintUpdateAnimation");
//static_assert(offsetof(BUAnimPerformer_BlueprintUpdateAnimation, DeltaTimeX) == 0x000000, "Member 'BUAnimPerformer_BlueprintUpdateAnimation::DeltaTimeX' has a wrong offset!");

// Function b1-Managed.BUAnimPerformer.GetRandomBlinkAnim
// 0x0020 (0x0020 - 0x0000)
struct BUAnimPerformer_GetRandomBlinkAnim final
{
public:
	struct FAnimUpdateContext                     Context;                                           // 0x0000(0x0010)(Parm, OutParm, ReferenceParm)
	struct FAnimNodeReference                     Node;                                              // 0x0010(0x0010)(Parm, OutParm, ReferenceParm, NoDestructor)
};
//static_assert(alignof(BUAnimPerformer_GetRandomBlinkAnim) == 0x000008, "Wrong alignment on BUAnimPerformer_GetRandomBlinkAnim");
//static_assert(sizeof(BUAnimPerformer_GetRandomBlinkAnim) == 0x000020, "Wrong size on BUAnimPerformer_GetRandomBlinkAnim");
//static_assert(offsetof(BUAnimPerformer_GetRandomBlinkAnim, Context) == 0x000000, "Member 'BUAnimPerformer_GetRandomBlinkAnim::Context' has a wrong offset!");
//static_assert(offsetof(BUAnimPerformer_GetRandomBlinkAnim, Node) == 0x000010, "Member 'BUAnimPerformer_GetRandomBlinkAnim::Node' has a wrong offset!");

// Function b1-Managed.SplineFlyMoveTriggerCompFunctionBinder.OnCollisionBeginOverlap
// 0x0108 (0x0108 - 0x0000)
struct SplineFlyMoveTriggerCompFunctionBinder_OnCollisionBeginOverlap final
{
public:
	class UPrimitiveComponent*                    OverlappedComponent;                               // 0x0000(0x0008)(ExportObject, Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class AActor*                                 OtherActor;                                        // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UPrimitiveComponent*                    OtherComp;                                         // 0x0010(0x0008)(ExportObject, Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         OtherBodyIndex;                                    // 0x0018(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         bFromSweep : 1;                                    // 0x001C(0x0001)(BitIndex: 0x00, PropSize: 0x0001 (Parm, NoDestructor, HasGetValueTypeHash))
	uint8                                         Pad_1D[0x3];                                       // 0x001D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FHitResult                             SweepResult;                                       // 0x0020(0x00E8)(Parm, IsPlainOldData, NoDestructor)
};
//static_assert(alignof(SplineFlyMoveTriggerCompFunctionBinder_OnCollisionBeginOverlap) == 0x000008, "Wrong alignment on SplineFlyMoveTriggerCompFunctionBinder_OnCollisionBeginOverlap");
//static_assert(sizeof(SplineFlyMoveTriggerCompFunctionBinder_OnCollisionBeginOverlap) == 0x000108, "Wrong size on SplineFlyMoveTriggerCompFunctionBinder_OnCollisionBeginOverlap");
//static_assert(offsetof(SplineFlyMoveTriggerCompFunctionBinder_OnCollisionBeginOverlap, OverlappedComponent) == 0x000000, "Member 'SplineFlyMoveTriggerCompFunctionBinder_OnCollisionBeginOverlap::OverlappedComponent' has a wrong offset!");
//static_assert(offsetof(SplineFlyMoveTriggerCompFunctionBinder_OnCollisionBeginOverlap, OtherActor) == 0x000008, "Member 'SplineFlyMoveTriggerCompFunctionBinder_OnCollisionBeginOverlap::OtherActor' has a wrong offset!");
//static_assert(offsetof(SplineFlyMoveTriggerCompFunctionBinder_OnCollisionBeginOverlap, OtherComp) == 0x000010, "Member 'SplineFlyMoveTriggerCompFunctionBinder_OnCollisionBeginOverlap::OtherComp' has a wrong offset!");
//static_assert(offsetof(SplineFlyMoveTriggerCompFunctionBinder_OnCollisionBeginOverlap, OtherBodyIndex) == 0x000018, "Member 'SplineFlyMoveTriggerCompFunctionBinder_OnCollisionBeginOverlap::OtherBodyIndex' has a wrong offset!");
//static_assert(offsetof(SplineFlyMoveTriggerCompFunctionBinder_OnCollisionBeginOverlap, SweepResult) == 0x000020, "Member 'SplineFlyMoveTriggerCompFunctionBinder_OnCollisionBeginOverlap::SweepResult' has a wrong offset!");

// Function b1-Managed.SplineFlyMoveTriggerCompFunctionBinder.OnCollisionEndOverlap
// 0x0020 (0x0020 - 0x0000)
struct SplineFlyMoveTriggerCompFunctionBinder_OnCollisionEndOverlap final
{
public:
	class UPrimitiveComponent*                    OverlappedComponent;                               // 0x0000(0x0008)(ExportObject, Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class AActor*                                 OtherActor;                                        // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UPrimitiveComponent*                    OtherComp;                                         // 0x0010(0x0008)(ExportObject, Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         OtherBodyIndex;                                    // 0x0018(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
//static_assert(alignof(SplineFlyMoveTriggerCompFunctionBinder_OnCollisionEndOverlap) == 0x000008, "Wrong alignment on SplineFlyMoveTriggerCompFunctionBinder_OnCollisionEndOverlap");
//static_assert(sizeof(SplineFlyMoveTriggerCompFunctionBinder_OnCollisionEndOverlap) == 0x000020, "Wrong size on SplineFlyMoveTriggerCompFunctionBinder_OnCollisionEndOverlap");
//static_assert(offsetof(SplineFlyMoveTriggerCompFunctionBinder_OnCollisionEndOverlap, OverlappedComponent) == 0x000000, "Member 'SplineFlyMoveTriggerCompFunctionBinder_OnCollisionEndOverlap::OverlappedComponent' has a wrong offset!");
//static_assert(offsetof(SplineFlyMoveTriggerCompFunctionBinder_OnCollisionEndOverlap, OtherActor) == 0x000008, "Member 'SplineFlyMoveTriggerCompFunctionBinder_OnCollisionEndOverlap::OtherActor' has a wrong offset!");
//static_assert(offsetof(SplineFlyMoveTriggerCompFunctionBinder_OnCollisionEndOverlap, OtherComp) == 0x000010, "Member 'SplineFlyMoveTriggerCompFunctionBinder_OnCollisionEndOverlap::OtherComp' has a wrong offset!");
//static_assert(offsetof(SplineFlyMoveTriggerCompFunctionBinder_OnCollisionEndOverlap, OtherBodyIndex) == 0x000018, "Member 'SplineFlyMoveTriggerCompFunctionBinder_OnCollisionEndOverlap::OtherBodyIndex' has a wrong offset!");

// Function b1-Managed.BED_FSMNode_GI_Loading_LoadingUIFadeIn.PostPropertyChanged
// 0x0020 (0x0020 - 0x0000)
struct BED_FSMNode_GI_Loading_LoadingUIFadeIn_PostPropertyChanged final
{
public:
	class FString                                 MemberName;                                        // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash)
	class FString                                 PropertyName;                                      // 0x0010(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash)
};
//static_assert(alignof(BED_FSMNode_GI_Loading_LoadingUIFadeIn_PostPropertyChanged) == 0x000008, "Wrong alignment on BED_FSMNode_GI_Loading_LoadingUIFadeIn_PostPropertyChanged");
//static_assert(sizeof(BED_FSMNode_GI_Loading_LoadingUIFadeIn_PostPropertyChanged) == 0x000020, "Wrong size on BED_FSMNode_GI_Loading_LoadingUIFadeIn_PostPropertyChanged");
//static_assert(offsetof(BED_FSMNode_GI_Loading_LoadingUIFadeIn_PostPropertyChanged, MemberName) == 0x000000, "Member 'BED_FSMNode_GI_Loading_LoadingUIFadeIn_PostPropertyChanged::MemberName' has a wrong offset!");
//static_assert(offsetof(BED_FSMNode_GI_Loading_LoadingUIFadeIn_PostPropertyChanged, PropertyName) == 0x000010, "Member 'BED_FSMNode_GI_Loading_LoadingUIFadeIn_PostPropertyChanged::PropertyName' has a wrong offset!");

// Function b1-Managed.BED_FSMNode_GI_Loading_LoadingUIFadeIn.GetNodeDescriptionInCS
// 0x0010 (0x0010 - 0x0000)
struct BED_FSMNode_GI_Loading_LoadingUIFadeIn_GetNodeDescriptionInCS final
{
public:
	class FString                                 ReturnValue;                                       // 0x0000(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash)
};
//static_assert(alignof(BED_FSMNode_GI_Loading_LoadingUIFadeIn_GetNodeDescriptionInCS) == 0x000008, "Wrong alignment on BED_FSMNode_GI_Loading_LoadingUIFadeIn_GetNodeDescriptionInCS");
//static_assert(sizeof(BED_FSMNode_GI_Loading_LoadingUIFadeIn_GetNodeDescriptionInCS) == 0x000010, "Wrong size on BED_FSMNode_GI_Loading_LoadingUIFadeIn_GetNodeDescriptionInCS");
//static_assert(offsetof(BED_FSMNode_GI_Loading_LoadingUIFadeIn_GetNodeDescriptionInCS, ReturnValue) == 0x000000, "Member 'BED_FSMNode_GI_Loading_LoadingUIFadeIn_GetNodeDescriptionInCS::ReturnValue' has a wrong offset!");

// Function b1-Managed.BGUZBBCreatorActorBase.ReceiveTick
// 0x0004 (0x0004 - 0x0000)
struct BGUZBBCreatorActorBase_ReceiveTick final
{
public:
	float                                         DeltaSeconds;                                      // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
//static_assert(alignof(BGUZBBCreatorActorBase_ReceiveTick) == 0x000004, "Wrong alignment on BGUZBBCreatorActorBase_ReceiveTick");
//static_assert(sizeof(BGUZBBCreatorActorBase_ReceiveTick) == 0x000004, "Wrong size on BGUZBBCreatorActorBase_ReceiveTick");
//static_assert(offsetof(BGUZBBCreatorActorBase_ReceiveTick, DeltaSeconds) == 0x000000, "Member 'BGUZBBCreatorActorBase_ReceiveTick::DeltaSeconds' has a wrong offset!");

// Function b1-Managed.BED_FSMNode_GI_Loading_LoginByRoleData.PostPropertyChanged
// 0x0020 (0x0020 - 0x0000)
struct BED_FSMNode_GI_Loading_LoginByRoleData_PostPropertyChanged final
{
public:
	class FString                                 MemberName;                                        // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash)
	class FString                                 PropertyName;                                      // 0x0010(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash)
};
//static_assert(alignof(BED_FSMNode_GI_Loading_LoginByRoleData_PostPropertyChanged) == 0x000008, "Wrong alignment on BED_FSMNode_GI_Loading_LoginByRoleData_PostPropertyChanged");
//static_assert(sizeof(BED_FSMNode_GI_Loading_LoginByRoleData_PostPropertyChanged) == 0x000020, "Wrong size on BED_FSMNode_GI_Loading_LoginByRoleData_PostPropertyChanged");
//static_assert(offsetof(BED_FSMNode_GI_Loading_LoginByRoleData_PostPropertyChanged, MemberName) == 0x000000, "Member 'BED_FSMNode_GI_Loading_LoginByRoleData_PostPropertyChanged::MemberName' has a wrong offset!");
//static_assert(offsetof(BED_FSMNode_GI_Loading_LoginByRoleData_PostPropertyChanged, PropertyName) == 0x000010, "Member 'BED_FSMNode_GI_Loading_LoginByRoleData_PostPropertyChanged::PropertyName' has a wrong offset!");

// Function b1-Managed.BED_FSMNode_GI_Loading_LoginByRoleData.GetNodeDescriptionInCS
// 0x0010 (0x0010 - 0x0000)
struct BED_FSMNode_GI_Loading_LoginByRoleData_GetNodeDescriptionInCS final
{
public:
	class FString                                 ReturnValue;                                       // 0x0000(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash)
};
//static_assert(alignof(BED_FSMNode_GI_Loading_LoginByRoleData_GetNodeDescriptionInCS) == 0x000008, "Wrong alignment on BED_FSMNode_GI_Loading_LoginByRoleData_GetNodeDescriptionInCS");
//static_assert(sizeof(BED_FSMNode_GI_Loading_LoginByRoleData_GetNodeDescriptionInCS) == 0x000010, "Wrong size on BED_FSMNode_GI_Loading_LoginByRoleData_GetNodeDescriptionInCS");
//static_assert(offsetof(BED_FSMNode_GI_Loading_LoginByRoleData_GetNodeDescriptionInCS, ReturnValue) == 0x000000, "Member 'BED_FSMNode_GI_Loading_LoginByRoleData_GetNodeDescriptionInCS::ReturnValue' has a wrong offset!");

// Function b1-Managed.BED_ProcessMachineNode_Junction.GetContextOutputsInCS
// 0x0010 (0x0010 - 0x0000)
struct BED_ProcessMachineNode_Junction_GetContextOutputsInCS final
{
public:
	TArray<class FName>                           ReturnValue;                                       // 0x0000(0x0010)(Parm, OutParm, ReturnParm)
};
//static_assert(alignof(BED_ProcessMachineNode_Junction_GetContextOutputsInCS) == 0x000008, "Wrong alignment on BED_ProcessMachineNode_Junction_GetContextOutputsInCS");
//static_assert(sizeof(BED_ProcessMachineNode_Junction_GetContextOutputsInCS) == 0x000010, "Wrong size on BED_ProcessMachineNode_Junction_GetContextOutputsInCS");
//static_assert(offsetof(BED_ProcessMachineNode_Junction_GetContextOutputsInCS, ReturnValue) == 0x000000, "Member 'BED_ProcessMachineNode_Junction_GetContextOutputsInCS::ReturnValue' has a wrong offset!");

// Function b1-Managed.BED_ProcessMachineNode_Junction.PostPropertyChanged
// 0x0020 (0x0020 - 0x0000)
struct BED_ProcessMachineNode_Junction_PostPropertyChanged final
{
public:
	class FString                                 MemberName;                                        // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash)
	class FString                                 PropertyName;                                      // 0x0010(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash)
};
//static_assert(alignof(BED_ProcessMachineNode_Junction_PostPropertyChanged) == 0x000008, "Wrong alignment on BED_ProcessMachineNode_Junction_PostPropertyChanged");
//static_assert(sizeof(BED_ProcessMachineNode_Junction_PostPropertyChanged) == 0x000020, "Wrong size on BED_ProcessMachineNode_Junction_PostPropertyChanged");
//static_assert(offsetof(BED_ProcessMachineNode_Junction_PostPropertyChanged, MemberName) == 0x000000, "Member 'BED_ProcessMachineNode_Junction_PostPropertyChanged::MemberName' has a wrong offset!");
//static_assert(offsetof(BED_ProcessMachineNode_Junction_PostPropertyChanged, PropertyName) == 0x000010, "Member 'BED_ProcessMachineNode_Junction_PostPropertyChanged::PropertyName' has a wrong offset!");

// Function b1-Managed.BED_ProcessMachineNode_Junction.GetNodeDescriptionInCS
// 0x0010 (0x0010 - 0x0000)
struct BED_ProcessMachineNode_Junction_GetNodeDescriptionInCS final
{
public:
	class FString                                 ReturnValue;                                       // 0x0000(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash)
};
//static_assert(alignof(BED_ProcessMachineNode_Junction_GetNodeDescriptionInCS) == 0x000008, "Wrong alignment on BED_ProcessMachineNode_Junction_GetNodeDescriptionInCS");
//static_assert(sizeof(BED_ProcessMachineNode_Junction_GetNodeDescriptionInCS) == 0x000010, "Wrong size on BED_ProcessMachineNode_Junction_GetNodeDescriptionInCS");
//static_assert(offsetof(BED_ProcessMachineNode_Junction_GetNodeDescriptionInCS, ReturnValue) == 0x000000, "Member 'BED_ProcessMachineNode_Junction_GetNodeDescriptionInCS::ReturnValue' has a wrong offset!");

// Function b1-Managed.BED_ProcessMachineNode_Junction.IsSupportViewType
// 0x0002 (0x0002 - 0x0000)
struct BED_ProcessMachineNode_Junction_IsSupportViewType final
{
public:
	ECalliopeViewType                             InViewType;                                        // 0x0000(0x0001)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         ReturnValue : 1;                                   // 0x0001(0x0001)(BitIndex: 0x00, PropSize: 0x0001 (Parm, OutParm, ReturnParm, NoDestructor, HasGetValueTypeHash))
};
//static_assert(alignof(BED_ProcessMachineNode_Junction_IsSupportViewType) == 0x000001, "Wrong alignment on BED_ProcessMachineNode_Junction_IsSupportViewType");
//static_assert(sizeof(BED_ProcessMachineNode_Junction_IsSupportViewType) == 0x000002, "Wrong size on BED_ProcessMachineNode_Junction_IsSupportViewType");
//static_assert(offsetof(BED_ProcessMachineNode_Junction_IsSupportViewType, InViewType) == 0x000000, "Member 'BED_ProcessMachineNode_Junction_IsSupportViewType::InViewType' has a wrong offset!");

// Function b1-Managed.BED_FSMNode_GI_Loading_LockSaveArchiveByTravelLevel.PostPropertyChanged
// 0x0020 (0x0020 - 0x0000)
struct BED_FSMNode_GI_Loading_LockSaveArchiveByTravelLevel_PostPropertyChanged final
{
public:
	class FString                                 MemberName;                                        // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash)
	class FString                                 PropertyName;                                      // 0x0010(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash)
};
//static_assert(alignof(BED_FSMNode_GI_Loading_LockSaveArchiveByTravelLevel_PostPropertyChanged) == 0x000008, "Wrong alignment on BED_FSMNode_GI_Loading_LockSaveArchiveByTravelLevel_PostPropertyChanged");
//static_assert(sizeof(BED_FSMNode_GI_Loading_LockSaveArchiveByTravelLevel_PostPropertyChanged) == 0x000020, "Wrong size on BED_FSMNode_GI_Loading_LockSaveArchiveByTravelLevel_PostPropertyChanged");
//static_assert(offsetof(BED_FSMNode_GI_Loading_LockSaveArchiveByTravelLevel_PostPropertyChanged, MemberName) == 0x000000, "Member 'BED_FSMNode_GI_Loading_LockSaveArchiveByTravelLevel_PostPropertyChanged::MemberName' has a wrong offset!");
//static_assert(offsetof(BED_FSMNode_GI_Loading_LockSaveArchiveByTravelLevel_PostPropertyChanged, PropertyName) == 0x000010, "Member 'BED_FSMNode_GI_Loading_LockSaveArchiveByTravelLevel_PostPropertyChanged::PropertyName' has a wrong offset!");

// Function b1-Managed.BED_FSMNode_GI_Loading_LockSaveArchiveByTravelLevel.GetNodeDescriptionInCS
// 0x0010 (0x0010 - 0x0000)
struct BED_FSMNode_GI_Loading_LockSaveArchiveByTravelLevel_GetNodeDescriptionInCS final
{
public:
	class FString                                 ReturnValue;                                       // 0x0000(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash)
};
//static_assert(alignof(BED_FSMNode_GI_Loading_LockSaveArchiveByTravelLevel_GetNodeDescriptionInCS) == 0x000008, "Wrong alignment on BED_FSMNode_GI_Loading_LockSaveArchiveByTravelLevel_GetNodeDescriptionInCS");
//static_assert(sizeof(BED_FSMNode_GI_Loading_LockSaveArchiveByTravelLevel_GetNodeDescriptionInCS) == 0x000010, "Wrong size on BED_FSMNode_GI_Loading_LockSaveArchiveByTravelLevel_GetNodeDescriptionInCS");
//static_assert(offsetof(BED_FSMNode_GI_Loading_LockSaveArchiveByTravelLevel_GetNodeDescriptionInCS, ReturnValue) == 0x000000, "Member 'BED_FSMNode_GI_Loading_LockSaveArchiveByTravelLevel_GetNodeDescriptionInCS::ReturnValue' has a wrong offset!");

// Function b1-Managed.BGUDynamicSDFGenerator2.ReceiveTick
// 0x0004 (0x0004 - 0x0000)
struct BGUDynamicSDFGenerator2_ReceiveTick final
{
public:
	float                                         DeltaTime;                                         // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
//static_assert(alignof(BGUDynamicSDFGenerator2_ReceiveTick) == 0x000004, "Wrong alignment on BGUDynamicSDFGenerator2_ReceiveTick");
//static_assert(sizeof(BGUDynamicSDFGenerator2_ReceiveTick) == 0x000004, "Wrong size on BGUDynamicSDFGenerator2_ReceiveTick");
//static_assert(offsetof(BGUDynamicSDFGenerator2_ReceiveTick, DeltaTime) == 0x000000, "Member 'BGUDynamicSDFGenerator2_ReceiveTick::DeltaTime' has a wrong offset!");

// Function b1-Managed.DispLibEntityBase.ApplyWorldOffsetCS
// 0x0020 (0x0020 - 0x0000)
struct DispLibEntityBase_ApplyWorldOffsetCS final
{
public:
	struct FVector                                InOffset;                                          // 0x0000(0x0018)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         bWorldShift : 1;                                   // 0x0018(0x0001)(BitIndex: 0x00, PropSize: 0x0001 (Parm, NoDestructor, HasGetValueTypeHash))
};
//static_assert(alignof(DispLibEntityBase_ApplyWorldOffsetCS) == 0x000008, "Wrong alignment on DispLibEntityBase_ApplyWorldOffsetCS");
//static_assert(sizeof(DispLibEntityBase_ApplyWorldOffsetCS) == 0x000020, "Wrong size on DispLibEntityBase_ApplyWorldOffsetCS");
//static_assert(offsetof(DispLibEntityBase_ApplyWorldOffsetCS, InOffset) == 0x000000, "Member 'DispLibEntityBase_ApplyWorldOffsetCS::InOffset' has a wrong offset!");

// Function b1-Managed.DispLibDispWorld.ReceiveEndPlay
// 0x0001 (0x0001 - 0x0000)
struct DispLibDispWorld_ReceiveEndPlay final
{
public:
	EEndPlayReason                                EndPlayReason;                                     // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
//static_assert(alignof(DispLibDispWorld_ReceiveEndPlay) == 0x000001, "Wrong alignment on DispLibDispWorld_ReceiveEndPlay");
//static_assert(sizeof(DispLibDispWorld_ReceiveEndPlay) == 0x000001, "Wrong size on DispLibDispWorld_ReceiveEndPlay");
//static_assert(offsetof(DispLibDispWorld_ReceiveEndPlay, EndPlayReason) == 0x000000, "Member 'DispLibDispWorld_ReceiveEndPlay::EndPlayReason' has a wrong offset!");

// Function b1-Managed.BED_FSMNode_GI_Loading_WaitPostLoadMap.PostPropertyChanged
// 0x0020 (0x0020 - 0x0000)
struct BED_FSMNode_GI_Loading_WaitPostLoadMap_PostPropertyChanged final
{
public:
	class FString                                 MemberName;                                        // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash)
	class FString                                 PropertyName;                                      // 0x0010(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash)
};
//static_assert(alignof(BED_FSMNode_GI_Loading_WaitPostLoadMap_PostPropertyChanged) == 0x000008, "Wrong alignment on BED_FSMNode_GI_Loading_WaitPostLoadMap_PostPropertyChanged");
//static_assert(sizeof(BED_FSMNode_GI_Loading_WaitPostLoadMap_PostPropertyChanged) == 0x000020, "Wrong size on BED_FSMNode_GI_Loading_WaitPostLoadMap_PostPropertyChanged");
//static_assert(offsetof(BED_FSMNode_GI_Loading_WaitPostLoadMap_PostPropertyChanged, MemberName) == 0x000000, "Member 'BED_FSMNode_GI_Loading_WaitPostLoadMap_PostPropertyChanged::MemberName' has a wrong offset!");
//static_assert(offsetof(BED_FSMNode_GI_Loading_WaitPostLoadMap_PostPropertyChanged, PropertyName) == 0x000010, "Member 'BED_FSMNode_GI_Loading_WaitPostLoadMap_PostPropertyChanged::PropertyName' has a wrong offset!");

// Function b1-Managed.BED_FSMNode_GI_Loading_WaitPostLoadMap.GetNodeDescriptionInCS
// 0x0010 (0x0010 - 0x0000)
struct BED_FSMNode_GI_Loading_WaitPostLoadMap_GetNodeDescriptionInCS final
{
public:
	class FString                                 ReturnValue;                                       // 0x0000(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash)
};
//static_assert(alignof(BED_FSMNode_GI_Loading_WaitPostLoadMap_GetNodeDescriptionInCS) == 0x000008, "Wrong alignment on BED_FSMNode_GI_Loading_WaitPostLoadMap_GetNodeDescriptionInCS");
//static_assert(sizeof(BED_FSMNode_GI_Loading_WaitPostLoadMap_GetNodeDescriptionInCS) == 0x000010, "Wrong size on BED_FSMNode_GI_Loading_WaitPostLoadMap_GetNodeDescriptionInCS");
//static_assert(offsetof(BED_FSMNode_GI_Loading_WaitPostLoadMap_GetNodeDescriptionInCS, ReturnValue) == 0x000000, "Member 'BED_FSMNode_GI_Loading_WaitPostLoadMap_GetNodeDescriptionInCS::ReturnValue' has a wrong offset!");

// Function b1-Managed.DispLib_DBCWEFMMotorComp.TickComponentInCS
// 0x0004 (0x0004 - 0x0000)
struct DispLib_DBCWEFMMotorComp_TickComponentInCS final
{
public:
	float                                         DeltaTime;                                         // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
//static_assert(alignof(DispLib_DBCWEFMMotorComp_TickComponentInCS) == 0x000004, "Wrong alignment on DispLib_DBCWEFMMotorComp_TickComponentInCS");
//static_assert(sizeof(DispLib_DBCWEFMMotorComp_TickComponentInCS) == 0x000004, "Wrong size on DispLib_DBCWEFMMotorComp_TickComponentInCS");
//static_assert(offsetof(DispLib_DBCWEFMMotorComp_TickComponentInCS, DeltaTime) == 0x000000, "Member 'DispLib_DBCWEFMMotorComp_TickComponentInCS::DeltaTime' has a wrong offset!");

// Function b1-Managed.DispLib_DBCWEFMMotorComp.OnPropertyChanged
// 0x0020 (0x0020 - 0x0000)
struct DispLib_DBCWEFMMotorComp_OnPropertyChanged final
{
public:
	class FString                                 MemberName;                                        // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash)
	class FString                                 PropertyName;                                      // 0x0010(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash)
};
//static_assert(alignof(DispLib_DBCWEFMMotorComp_OnPropertyChanged) == 0x000008, "Wrong alignment on DispLib_DBCWEFMMotorComp_OnPropertyChanged");
//static_assert(sizeof(DispLib_DBCWEFMMotorComp_OnPropertyChanged) == 0x000020, "Wrong size on DispLib_DBCWEFMMotorComp_OnPropertyChanged");
//static_assert(offsetof(DispLib_DBCWEFMMotorComp_OnPropertyChanged, MemberName) == 0x000000, "Member 'DispLib_DBCWEFMMotorComp_OnPropertyChanged::MemberName' has a wrong offset!");
//static_assert(offsetof(DispLib_DBCWEFMMotorComp_OnPropertyChanged, PropertyName) == 0x000010, "Member 'DispLib_DBCWEFMMotorComp_OnPropertyChanged::PropertyName' has a wrong offset!");

// Function b1-Managed.DispLib_EditorZakkaComp.ReceiveTick
// 0x0004 (0x0004 - 0x0000)
struct DispLib_EditorZakkaComp_ReceiveTick final
{
public:
	float                                         DeltaSeconds;                                      // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
//static_assert(alignof(DispLib_EditorZakkaComp_ReceiveTick) == 0x000004, "Wrong alignment on DispLib_EditorZakkaComp_ReceiveTick");
//static_assert(sizeof(DispLib_EditorZakkaComp_ReceiveTick) == 0x000004, "Wrong size on DispLib_EditorZakkaComp_ReceiveTick");
//static_assert(offsetof(DispLib_EditorZakkaComp_ReceiveTick, DeltaSeconds) == 0x000000, "Member 'DispLib_EditorZakkaComp_ReceiveTick::DeltaSeconds' has a wrong offset!");

// Function b1-Managed.DispLib_SplineMoveComp.TickComponentInCS
// 0x0004 (0x0004 - 0x0000)
struct DispLib_SplineMoveComp_TickComponentInCS final
{
public:
	float                                         DeltaTime;                                         // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
//static_assert(alignof(DispLib_SplineMoveComp_TickComponentInCS) == 0x000004, "Wrong alignment on DispLib_SplineMoveComp_TickComponentInCS");
//static_assert(sizeof(DispLib_SplineMoveComp_TickComponentInCS) == 0x000004, "Wrong size on DispLib_SplineMoveComp_TickComponentInCS");
//static_assert(offsetof(DispLib_SplineMoveComp_TickComponentInCS, DeltaTime) == 0x000000, "Member 'DispLib_SplineMoveComp_TickComponentInCS::DeltaTime' has a wrong offset!");

// Function b1-Managed.GooseCurveTest.TickComponentInCS
// 0x0004 (0x0004 - 0x0000)
struct GooseCurveTest_TickComponentInCS final
{
public:
	float                                         DeltaTime;                                         // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
//static_assert(alignof(GooseCurveTest_TickComponentInCS) == 0x000004, "Wrong alignment on GooseCurveTest_TickComponentInCS");
//static_assert(sizeof(GooseCurveTest_TickComponentInCS) == 0x000004, "Wrong size on GooseCurveTest_TickComponentInCS");
//static_assert(offsetof(GooseCurveTest_TickComponentInCS, DeltaTime) == 0x000000, "Member 'GooseCurveTest_TickComponentInCS::DeltaTime' has a wrong offset!");

// Function b1-Managed.BED_GuideNode_Base.IsSupportViewType
// 0x0002 (0x0002 - 0x0000)
struct BED_GuideNode_Base_IsSupportViewType final
{
public:
	ECalliopeViewType                             InViewType;                                        // 0x0000(0x0001)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         ReturnValue : 1;                                   // 0x0001(0x0001)(BitIndex: 0x00, PropSize: 0x0001 (Parm, OutParm, ReturnParm, NoDestructor, HasGetValueTypeHash))
};
//static_assert(alignof(BED_GuideNode_Base_IsSupportViewType) == 0x000001, "Wrong alignment on BED_GuideNode_Base_IsSupportViewType");
//static_assert(sizeof(BED_GuideNode_Base_IsSupportViewType) == 0x000002, "Wrong size on BED_GuideNode_Base_IsSupportViewType");
//static_assert(offsetof(BED_GuideNode_Base_IsSupportViewType, InViewType) == 0x000000, "Member 'BED_GuideNode_Base_IsSupportViewType::InViewType' has a wrong offset!");

// Function b1-Managed.BED_GuideNode_Wait.GetNodeDescriptionInCS
// 0x0010 (0x0010 - 0x0000)
struct BED_GuideNode_Wait_GetNodeDescriptionInCS final
{
public:
	class FString                                 ReturnValue;                                       // 0x0000(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash)
};
//static_assert(alignof(BED_GuideNode_Wait_GetNodeDescriptionInCS) == 0x000008, "Wrong alignment on BED_GuideNode_Wait_GetNodeDescriptionInCS");
//static_assert(sizeof(BED_GuideNode_Wait_GetNodeDescriptionInCS) == 0x000010, "Wrong size on BED_GuideNode_Wait_GetNodeDescriptionInCS");
//static_assert(offsetof(BED_GuideNode_Wait_GetNodeDescriptionInCS, ReturnValue) == 0x000000, "Member 'BED_GuideNode_Wait_GetNodeDescriptionInCS::ReturnValue' has a wrong offset!");

// Function b1-Managed.BANS_AdjustTransformBySpline.GSNotifyBeginCS
// 0x0048 (0x0048 - 0x0000)
struct BANS_AdjustTransformBySpline_GSNotifyBeginCS final
{
public:
	struct FUStGSNotifyParam                      NotifyParam;                                       // 0x0000(0x0040)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
	float                                         TotalDuration;                                     // 0x0040(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
//static_assert(alignof(BANS_AdjustTransformBySpline_GSNotifyBeginCS) == 0x000008, "Wrong alignment on BANS_AdjustTransformBySpline_GSNotifyBeginCS");
//static_assert(sizeof(BANS_AdjustTransformBySpline_GSNotifyBeginCS) == 0x000048, "Wrong size on BANS_AdjustTransformBySpline_GSNotifyBeginCS");
//static_assert(offsetof(BANS_AdjustTransformBySpline_GSNotifyBeginCS, NotifyParam) == 0x000000, "Member 'BANS_AdjustTransformBySpline_GSNotifyBeginCS::NotifyParam' has a wrong offset!");
//static_assert(offsetof(BANS_AdjustTransformBySpline_GSNotifyBeginCS, TotalDuration) == 0x000040, "Member 'BANS_AdjustTransformBySpline_GSNotifyBeginCS::TotalDuration' has a wrong offset!");

// Function b1-Managed.BANS_AdjustTransformBySpline.GSNotifyTickCS
// 0x0048 (0x0048 - 0x0000)
struct BANS_AdjustTransformBySpline_GSNotifyTickCS final
{
public:
	struct FUStGSNotifyParam                      NotifyParam;                                       // 0x0000(0x0040)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
	float                                         FrameDeltaTime;                                    // 0x0040(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
//static_assert(alignof(BANS_AdjustTransformBySpline_GSNotifyTickCS) == 0x000008, "Wrong alignment on BANS_AdjustTransformBySpline_GSNotifyTickCS");
//static_assert(sizeof(BANS_AdjustTransformBySpline_GSNotifyTickCS) == 0x000048, "Wrong size on BANS_AdjustTransformBySpline_GSNotifyTickCS");
//static_assert(offsetof(BANS_AdjustTransformBySpline_GSNotifyTickCS, NotifyParam) == 0x000000, "Member 'BANS_AdjustTransformBySpline_GSNotifyTickCS::NotifyParam' has a wrong offset!");
//static_assert(offsetof(BANS_AdjustTransformBySpline_GSNotifyTickCS, FrameDeltaTime) == 0x000040, "Member 'BANS_AdjustTransformBySpline_GSNotifyTickCS::FrameDeltaTime' has a wrong offset!");

// Function b1-Managed.BANS_AdjustTransformBySpline.GSNotifyEndCS
// 0x0040 (0x0040 - 0x0000)
struct BANS_AdjustTransformBySpline_GSNotifyEndCS final
{
public:
	struct FUStGSNotifyParam                      NotifyParam;                                       // 0x0000(0x0040)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
//static_assert(alignof(BANS_AdjustTransformBySpline_GSNotifyEndCS) == 0x000008, "Wrong alignment on BANS_AdjustTransformBySpline_GSNotifyEndCS");
//static_assert(sizeof(BANS_AdjustTransformBySpline_GSNotifyEndCS) == 0x000040, "Wrong size on BANS_AdjustTransformBySpline_GSNotifyEndCS");
//static_assert(offsetof(BANS_AdjustTransformBySpline_GSNotifyEndCS, NotifyParam) == 0x000000, "Member 'BANS_AdjustTransformBySpline_GSNotifyEndCS::NotifyParam' has a wrong offset!");

// Function b1-Managed.BANS_CostAttrByChargeLevel.GSNotifyBeginCS
// 0x0048 (0x0048 - 0x0000)
struct BANS_CostAttrByChargeLevel_GSNotifyBeginCS final
{
public:
	struct FUStGSNotifyParam                      NotifyParam;                                       // 0x0000(0x0040)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
	float                                         TotalDuration;                                     // 0x0040(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
//static_assert(alignof(BANS_CostAttrByChargeLevel_GSNotifyBeginCS) == 0x000008, "Wrong alignment on BANS_CostAttrByChargeLevel_GSNotifyBeginCS");
//static_assert(sizeof(BANS_CostAttrByChargeLevel_GSNotifyBeginCS) == 0x000048, "Wrong size on BANS_CostAttrByChargeLevel_GSNotifyBeginCS");
//static_assert(offsetof(BANS_CostAttrByChargeLevel_GSNotifyBeginCS, NotifyParam) == 0x000000, "Member 'BANS_CostAttrByChargeLevel_GSNotifyBeginCS::NotifyParam' has a wrong offset!");
//static_assert(offsetof(BANS_CostAttrByChargeLevel_GSNotifyBeginCS, TotalDuration) == 0x000040, "Member 'BANS_CostAttrByChargeLevel_GSNotifyBeginCS::TotalDuration' has a wrong offset!");

// Function b1-Managed.BED_FSMNode_GI_Loading_ResetNewGameplusArchive.PostPropertyChanged
// 0x0020 (0x0020 - 0x0000)
struct BED_FSMNode_GI_Loading_ResetNewGameplusArchive_PostPropertyChanged final
{
public:
	class FString                                 MemberName;                                        // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash)
	class FString                                 PropertyName;                                      // 0x0010(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash)
};
//static_assert(alignof(BED_FSMNode_GI_Loading_ResetNewGameplusArchive_PostPropertyChanged) == 0x000008, "Wrong alignment on BED_FSMNode_GI_Loading_ResetNewGameplusArchive_PostPropertyChanged");
//static_assert(sizeof(BED_FSMNode_GI_Loading_ResetNewGameplusArchive_PostPropertyChanged) == 0x000020, "Wrong size on BED_FSMNode_GI_Loading_ResetNewGameplusArchive_PostPropertyChanged");
//static_assert(offsetof(BED_FSMNode_GI_Loading_ResetNewGameplusArchive_PostPropertyChanged, MemberName) == 0x000000, "Member 'BED_FSMNode_GI_Loading_ResetNewGameplusArchive_PostPropertyChanged::MemberName' has a wrong offset!");
//static_assert(offsetof(BED_FSMNode_GI_Loading_ResetNewGameplusArchive_PostPropertyChanged, PropertyName) == 0x000010, "Member 'BED_FSMNode_GI_Loading_ResetNewGameplusArchive_PostPropertyChanged::PropertyName' has a wrong offset!");

// Function b1-Managed.BED_FSMNode_GI_Loading_ResetNewGameplusArchive.GetNodeDescriptionInCS
// 0x0010 (0x0010 - 0x0000)
struct BED_FSMNode_GI_Loading_ResetNewGameplusArchive_GetNodeDescriptionInCS final
{
public:
	class FString                                 ReturnValue;                                       // 0x0000(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash)
};
//static_assert(alignof(BED_FSMNode_GI_Loading_ResetNewGameplusArchive_GetNodeDescriptionInCS) == 0x000008, "Wrong alignment on BED_FSMNode_GI_Loading_ResetNewGameplusArchive_GetNodeDescriptionInCS");
//static_assert(sizeof(BED_FSMNode_GI_Loading_ResetNewGameplusArchive_GetNodeDescriptionInCS) == 0x000010, "Wrong size on BED_FSMNode_GI_Loading_ResetNewGameplusArchive_GetNodeDescriptionInCS");
//static_assert(offsetof(BED_FSMNode_GI_Loading_ResetNewGameplusArchive_GetNodeDescriptionInCS, ReturnValue) == 0x000000, "Member 'BED_FSMNode_GI_Loading_ResetNewGameplusArchive_GetNodeDescriptionInCS::ReturnValue' has a wrong offset!");

// Function b1-Managed.BANS_GSCantInteractState.GSNotifyBeginCS
// 0x0048 (0x0048 - 0x0000)
struct BANS_GSCantInteractState_GSNotifyBeginCS final
{
public:
	struct FUStGSNotifyParam                      NotifyParam;                                       // 0x0000(0x0040)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
	float                                         TotalDuration;                                     // 0x0040(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
//static_assert(alignof(BANS_GSCantInteractState_GSNotifyBeginCS) == 0x000008, "Wrong alignment on BANS_GSCantInteractState_GSNotifyBeginCS");
//static_assert(sizeof(BANS_GSCantInteractState_GSNotifyBeginCS) == 0x000048, "Wrong size on BANS_GSCantInteractState_GSNotifyBeginCS");
//static_assert(offsetof(BANS_GSCantInteractState_GSNotifyBeginCS, NotifyParam) == 0x000000, "Member 'BANS_GSCantInteractState_GSNotifyBeginCS::NotifyParam' has a wrong offset!");
//static_assert(offsetof(BANS_GSCantInteractState_GSNotifyBeginCS, TotalDuration) == 0x000040, "Member 'BANS_GSCantInteractState_GSNotifyBeginCS::TotalDuration' has a wrong offset!");

// Function b1-Managed.BANS_GSCantInteractState.GSNotifyTickCS
// 0x0048 (0x0048 - 0x0000)
struct BANS_GSCantInteractState_GSNotifyTickCS final
{
public:
	struct FUStGSNotifyParam                      NotifyParam;                                       // 0x0000(0x0040)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
	float                                         FrameDeltaTime;                                    // 0x0040(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
//static_assert(alignof(BANS_GSCantInteractState_GSNotifyTickCS) == 0x000008, "Wrong alignment on BANS_GSCantInteractState_GSNotifyTickCS");
//static_assert(sizeof(BANS_GSCantInteractState_GSNotifyTickCS) == 0x000048, "Wrong size on BANS_GSCantInteractState_GSNotifyTickCS");
//static_assert(offsetof(BANS_GSCantInteractState_GSNotifyTickCS, NotifyParam) == 0x000000, "Member 'BANS_GSCantInteractState_GSNotifyTickCS::NotifyParam' has a wrong offset!");
//static_assert(offsetof(BANS_GSCantInteractState_GSNotifyTickCS, FrameDeltaTime) == 0x000040, "Member 'BANS_GSCantInteractState_GSNotifyTickCS::FrameDeltaTime' has a wrong offset!");

// Function b1-Managed.BANS_GSCantInteractState.GSNotifyEndCS
// 0x0040 (0x0040 - 0x0000)
struct BANS_GSCantInteractState_GSNotifyEndCS final
{
public:
	struct FUStGSNotifyParam                      NotifyParam;                                       // 0x0000(0x0040)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
//static_assert(alignof(BANS_GSCantInteractState_GSNotifyEndCS) == 0x000008, "Wrong alignment on BANS_GSCantInteractState_GSNotifyEndCS");
//static_assert(sizeof(BANS_GSCantInteractState_GSNotifyEndCS) == 0x000040, "Wrong size on BANS_GSCantInteractState_GSNotifyEndCS");
//static_assert(offsetof(BANS_GSCantInteractState_GSNotifyEndCS, NotifyParam) == 0x000000, "Member 'BANS_GSCantInteractState_GSNotifyEndCS::NotifyParam' has a wrong offset!");

// Function b1-Managed.BANS_GSCameraArmLocationZCurve.GSNotifyBeginCS
// 0x0048 (0x0048 - 0x0000)
struct BANS_GSCameraArmLocationZCurve_GSNotifyBeginCS final
{
public:
	struct FUStGSNotifyParam                      NotifyParam;                                       // 0x0000(0x0040)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
	float                                         TotalDuration;                                     // 0x0040(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
//static_assert(alignof(BANS_GSCameraArmLocationZCurve_GSNotifyBeginCS) == 0x000008, "Wrong alignment on BANS_GSCameraArmLocationZCurve_GSNotifyBeginCS");
//static_assert(sizeof(BANS_GSCameraArmLocationZCurve_GSNotifyBeginCS) == 0x000048, "Wrong size on BANS_GSCameraArmLocationZCurve_GSNotifyBeginCS");
//static_assert(offsetof(BANS_GSCameraArmLocationZCurve_GSNotifyBeginCS, NotifyParam) == 0x000000, "Member 'BANS_GSCameraArmLocationZCurve_GSNotifyBeginCS::NotifyParam' has a wrong offset!");
//static_assert(offsetof(BANS_GSCameraArmLocationZCurve_GSNotifyBeginCS, TotalDuration) == 0x000040, "Member 'BANS_GSCameraArmLocationZCurve_GSNotifyBeginCS::TotalDuration' has a wrong offset!");

// Function b1-Managed.BANS_GSCameraArmLocationZCurve.GSNotifyEndCS
// 0x0040 (0x0040 - 0x0000)
struct BANS_GSCameraArmLocationZCurve_GSNotifyEndCS final
{
public:
	struct FUStGSNotifyParam                      NotifyParam;                                       // 0x0000(0x0040)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
//static_assert(alignof(BANS_GSCameraArmLocationZCurve_GSNotifyEndCS) == 0x000008, "Wrong alignment on BANS_GSCameraArmLocationZCurve_GSNotifyEndCS");
//static_assert(sizeof(BANS_GSCameraArmLocationZCurve_GSNotifyEndCS) == 0x000040, "Wrong size on BANS_GSCameraArmLocationZCurve_GSNotifyEndCS");
//static_assert(offsetof(BANS_GSCameraArmLocationZCurve_GSNotifyEndCS, NotifyParam) == 0x000000, "Member 'BANS_GSCameraArmLocationZCurve_GSNotifyEndCS::NotifyParam' has a wrong offset!");

// Function b1-Managed.BANS_GSItemSkillKeyCache.GSNotifyBeginCS
// 0x0048 (0x0048 - 0x0000)
struct BANS_GSItemSkillKeyCache_GSNotifyBeginCS final
{
public:
	struct FUStGSNotifyParam                      NotifyParam;                                       // 0x0000(0x0040)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
	float                                         TotalDuration;                                     // 0x0040(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
//static_assert(alignof(BANS_GSItemSkillKeyCache_GSNotifyBeginCS) == 0x000008, "Wrong alignment on BANS_GSItemSkillKeyCache_GSNotifyBeginCS");
//static_assert(sizeof(BANS_GSItemSkillKeyCache_GSNotifyBeginCS) == 0x000048, "Wrong size on BANS_GSItemSkillKeyCache_GSNotifyBeginCS");
//static_assert(offsetof(BANS_GSItemSkillKeyCache_GSNotifyBeginCS, NotifyParam) == 0x000000, "Member 'BANS_GSItemSkillKeyCache_GSNotifyBeginCS::NotifyParam' has a wrong offset!");
//static_assert(offsetof(BANS_GSItemSkillKeyCache_GSNotifyBeginCS, TotalDuration) == 0x000040, "Member 'BANS_GSItemSkillKeyCache_GSNotifyBeginCS::TotalDuration' has a wrong offset!");

// Function b1-Managed.GlobalAudioMgr.GetUApplicationLifecycleComponent
// 0x0008 (0x0008 - 0x0000)
struct GlobalAudioMgr_GetUApplicationLifecycleComponent final
{
public:
	class UApplicationLifecycleComponent*         ReturnValue;                                       // 0x0000(0x0008)(ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
//static_assert(alignof(GlobalAudioMgr_GetUApplicationLifecycleComponent) == 0x000008, "Wrong alignment on GlobalAudioMgr_GetUApplicationLifecycleComponent");
//static_assert(sizeof(GlobalAudioMgr_GetUApplicationLifecycleComponent) == 0x000008, "Wrong size on GlobalAudioMgr_GetUApplicationLifecycleComponent");
//static_assert(offsetof(GlobalAudioMgr_GetUApplicationLifecycleComponent, ReturnValue) == 0x000000, "Member 'GlobalAudioMgr_GetUApplicationLifecycleComponent::ReturnValue' has a wrong offset!");

// Function b1-Managed.BANS_GSItemSkillWindow.GSNotifyBeginCS
// 0x0048 (0x0048 - 0x0000)
struct BANS_GSItemSkillWindow_GSNotifyBeginCS final
{
public:
	struct FUStGSNotifyParam                      NotifyParam;                                       // 0x0000(0x0040)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
	float                                         TotalDuration;                                     // 0x0040(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
//static_assert(alignof(BANS_GSItemSkillWindow_GSNotifyBeginCS) == 0x000008, "Wrong alignment on BANS_GSItemSkillWindow_GSNotifyBeginCS");
//static_assert(sizeof(BANS_GSItemSkillWindow_GSNotifyBeginCS) == 0x000048, "Wrong size on BANS_GSItemSkillWindow_GSNotifyBeginCS");
//static_assert(offsetof(BANS_GSItemSkillWindow_GSNotifyBeginCS, NotifyParam) == 0x000000, "Member 'BANS_GSItemSkillWindow_GSNotifyBeginCS::NotifyParam' has a wrong offset!");
//static_assert(offsetof(BANS_GSItemSkillWindow_GSNotifyBeginCS, TotalDuration) == 0x000040, "Member 'BANS_GSItemSkillWindow_GSNotifyBeginCS::TotalDuration' has a wrong offset!");

// Function b1-Managed.BED_FSMNode_GI_Loading_SaveArchiveInTravelLevel.PostPropertyChanged
// 0x0020 (0x0020 - 0x0000)
struct BED_FSMNode_GI_Loading_SaveArchiveInTravelLevel_PostPropertyChanged final
{
public:
	class FString                                 MemberName;                                        // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash)
	class FString                                 PropertyName;                                      // 0x0010(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash)
};
//static_assert(alignof(BED_FSMNode_GI_Loading_SaveArchiveInTravelLevel_PostPropertyChanged) == 0x000008, "Wrong alignment on BED_FSMNode_GI_Loading_SaveArchiveInTravelLevel_PostPropertyChanged");
//static_assert(sizeof(BED_FSMNode_GI_Loading_SaveArchiveInTravelLevel_PostPropertyChanged) == 0x000020, "Wrong size on BED_FSMNode_GI_Loading_SaveArchiveInTravelLevel_PostPropertyChanged");
//static_assert(offsetof(BED_FSMNode_GI_Loading_SaveArchiveInTravelLevel_PostPropertyChanged, MemberName) == 0x000000, "Member 'BED_FSMNode_GI_Loading_SaveArchiveInTravelLevel_PostPropertyChanged::MemberName' has a wrong offset!");
//static_assert(offsetof(BED_FSMNode_GI_Loading_SaveArchiveInTravelLevel_PostPropertyChanged, PropertyName) == 0x000010, "Member 'BED_FSMNode_GI_Loading_SaveArchiveInTravelLevel_PostPropertyChanged::PropertyName' has a wrong offset!");

// Function b1-Managed.BED_FSMNode_GI_Loading_SaveArchiveInTravelLevel.GetNodeDescriptionInCS
// 0x0010 (0x0010 - 0x0000)
struct BED_FSMNode_GI_Loading_SaveArchiveInTravelLevel_GetNodeDescriptionInCS final
{
public:
	class FString                                 ReturnValue;                                       // 0x0000(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash)
};
//static_assert(alignof(BED_FSMNode_GI_Loading_SaveArchiveInTravelLevel_GetNodeDescriptionInCS) == 0x000008, "Wrong alignment on BED_FSMNode_GI_Loading_SaveArchiveInTravelLevel_GetNodeDescriptionInCS");
//static_assert(sizeof(BED_FSMNode_GI_Loading_SaveArchiveInTravelLevel_GetNodeDescriptionInCS) == 0x000010, "Wrong size on BED_FSMNode_GI_Loading_SaveArchiveInTravelLevel_GetNodeDescriptionInCS");
//static_assert(offsetof(BED_FSMNode_GI_Loading_SaveArchiveInTravelLevel_GetNodeDescriptionInCS, ReturnValue) == 0x000000, "Member 'BED_FSMNode_GI_Loading_SaveArchiveInTravelLevel_GetNodeDescriptionInCS::ReturnValue' has a wrong offset!");

// Function b1-Managed.BANS_GSPausePhysics.GSNotifyBeginCS
// 0x0048 (0x0048 - 0x0000)
struct BANS_GSPausePhysics_GSNotifyBeginCS final
{
public:
	struct FUStGSNotifyParam                      NotifyParam;                                       // 0x0000(0x0040)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
	float                                         TotalDuration;                                     // 0x0040(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
//static_assert(alignof(BANS_GSPausePhysics_GSNotifyBeginCS) == 0x000008, "Wrong alignment on BANS_GSPausePhysics_GSNotifyBeginCS");
//static_assert(sizeof(BANS_GSPausePhysics_GSNotifyBeginCS) == 0x000048, "Wrong size on BANS_GSPausePhysics_GSNotifyBeginCS");
//static_assert(offsetof(BANS_GSPausePhysics_GSNotifyBeginCS, NotifyParam) == 0x000000, "Member 'BANS_GSPausePhysics_GSNotifyBeginCS::NotifyParam' has a wrong offset!");
//static_assert(offsetof(BANS_GSPausePhysics_GSNotifyBeginCS, TotalDuration) == 0x000040, "Member 'BANS_GSPausePhysics_GSNotifyBeginCS::TotalDuration' has a wrong offset!");

// Function b1-Managed.BANS_GSPausePhysics.GSNotifyTickCS
// 0x0048 (0x0048 - 0x0000)
struct BANS_GSPausePhysics_GSNotifyTickCS final
{
public:
	struct FUStGSNotifyParam                      NotifyParam;                                       // 0x0000(0x0040)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
	float                                         FrameDeltaTime;                                    // 0x0040(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
//static_assert(alignof(BANS_GSPausePhysics_GSNotifyTickCS) == 0x000008, "Wrong alignment on BANS_GSPausePhysics_GSNotifyTickCS");
//static_assert(sizeof(BANS_GSPausePhysics_GSNotifyTickCS) == 0x000048, "Wrong size on BANS_GSPausePhysics_GSNotifyTickCS");
//static_assert(offsetof(BANS_GSPausePhysics_GSNotifyTickCS, NotifyParam) == 0x000000, "Member 'BANS_GSPausePhysics_GSNotifyTickCS::NotifyParam' has a wrong offset!");
//static_assert(offsetof(BANS_GSPausePhysics_GSNotifyTickCS, FrameDeltaTime) == 0x000040, "Member 'BANS_GSPausePhysics_GSNotifyTickCS::FrameDeltaTime' has a wrong offset!");

// Function b1-Managed.BANS_GSPausePhysics.GSNotifyEndCS
// 0x0040 (0x0040 - 0x0000)
struct BANS_GSPausePhysics_GSNotifyEndCS final
{
public:
	struct FUStGSNotifyParam                      NotifyParam;                                       // 0x0000(0x0040)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
//static_assert(alignof(BANS_GSPausePhysics_GSNotifyEndCS) == 0x000008, "Wrong alignment on BANS_GSPausePhysics_GSNotifyEndCS");
//static_assert(sizeof(BANS_GSPausePhysics_GSNotifyEndCS) == 0x000040, "Wrong size on BANS_GSPausePhysics_GSNotifyEndCS");
//static_assert(offsetof(BANS_GSPausePhysics_GSNotifyEndCS, NotifyParam) == 0x000000, "Member 'BANS_GSPausePhysics_GSNotifyEndCS::NotifyParam' has a wrong offset!");

// Function b1-Managed.B1ReplicationGraphNode_TamerMonster.GatherActorListsForConnectionCS
// 0x0008 (0x0008 - 0x0000)
struct B1ReplicationGraphNode_TamerMonster_GatherActorListsForConnectionCS final
{
public:
	class APlayerController*                      PlayerController;                                  // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
//static_assert(alignof(B1ReplicationGraphNode_TamerMonster_GatherActorListsForConnectionCS) == 0x000008, "Wrong alignment on B1ReplicationGraphNode_TamerMonster_GatherActorListsForConnectionCS");
//static_assert(sizeof(B1ReplicationGraphNode_TamerMonster_GatherActorListsForConnectionCS) == 0x000008, "Wrong size on B1ReplicationGraphNode_TamerMonster_GatherActorListsForConnectionCS");
//static_assert(offsetof(B1ReplicationGraphNode_TamerMonster_GatherActorListsForConnectionCS, PlayerController) == 0x000000, "Member 'B1ReplicationGraphNode_TamerMonster_GatherActorListsForConnectionCS::PlayerController' has a wrong offset!");

// Function b1-Managed.BANS_GSPoleDrink.GSNotifyBeginCS
// 0x0048 (0x0048 - 0x0000)
struct BANS_GSPoleDrink_GSNotifyBeginCS final
{
public:
	struct FUStGSNotifyParam                      NotifyParam;                                       // 0x0000(0x0040)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
	float                                         TotalDuration;                                     // 0x0040(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
//static_assert(alignof(BANS_GSPoleDrink_GSNotifyBeginCS) == 0x000008, "Wrong alignment on BANS_GSPoleDrink_GSNotifyBeginCS");
//static_assert(sizeof(BANS_GSPoleDrink_GSNotifyBeginCS) == 0x000048, "Wrong size on BANS_GSPoleDrink_GSNotifyBeginCS");
//static_assert(offsetof(BANS_GSPoleDrink_GSNotifyBeginCS, NotifyParam) == 0x000000, "Member 'BANS_GSPoleDrink_GSNotifyBeginCS::NotifyParam' has a wrong offset!");
//static_assert(offsetof(BANS_GSPoleDrink_GSNotifyBeginCS, TotalDuration) == 0x000040, "Member 'BANS_GSPoleDrink_GSNotifyBeginCS::TotalDuration' has a wrong offset!");

// Function b1-Managed.BANS_GSPoleDrink.GSNotifyEndCS
// 0x0040 (0x0040 - 0x0000)
struct BANS_GSPoleDrink_GSNotifyEndCS final
{
public:
	struct FUStGSNotifyParam                      NotifyParam;                                       // 0x0000(0x0040)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
//static_assert(alignof(BANS_GSPoleDrink_GSNotifyEndCS) == 0x000008, "Wrong alignment on BANS_GSPoleDrink_GSNotifyEndCS");
//static_assert(sizeof(BANS_GSPoleDrink_GSNotifyEndCS) == 0x000040, "Wrong size on BANS_GSPoleDrink_GSNotifyEndCS");
//static_assert(offsetof(BANS_GSPoleDrink_GSNotifyEndCS, NotifyParam) == 0x000000, "Member 'BANS_GSPoleDrink_GSNotifyEndCS::NotifyParam' has a wrong offset!");

// Function b1-Managed.BED_FSMNode_GI_Loading_ShowArchiveMarkInStartGame.PostPropertyChanged
// 0x0020 (0x0020 - 0x0000)
struct BED_FSMNode_GI_Loading_ShowArchiveMarkInStartGame_PostPropertyChanged final
{
public:
	class FString                                 MemberName;                                        // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash)
	class FString                                 PropertyName;                                      // 0x0010(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash)
};
//static_assert(alignof(BED_FSMNode_GI_Loading_ShowArchiveMarkInStartGame_PostPropertyChanged) == 0x000008, "Wrong alignment on BED_FSMNode_GI_Loading_ShowArchiveMarkInStartGame_PostPropertyChanged");
//static_assert(sizeof(BED_FSMNode_GI_Loading_ShowArchiveMarkInStartGame_PostPropertyChanged) == 0x000020, "Wrong size on BED_FSMNode_GI_Loading_ShowArchiveMarkInStartGame_PostPropertyChanged");
//static_assert(offsetof(BED_FSMNode_GI_Loading_ShowArchiveMarkInStartGame_PostPropertyChanged, MemberName) == 0x000000, "Member 'BED_FSMNode_GI_Loading_ShowArchiveMarkInStartGame_PostPropertyChanged::MemberName' has a wrong offset!");
//static_assert(offsetof(BED_FSMNode_GI_Loading_ShowArchiveMarkInStartGame_PostPropertyChanged, PropertyName) == 0x000010, "Member 'BED_FSMNode_GI_Loading_ShowArchiveMarkInStartGame_PostPropertyChanged::PropertyName' has a wrong offset!");

// Function b1-Managed.BED_FSMNode_GI_Loading_ShowArchiveMarkInStartGame.GetNodeDescriptionInCS
// 0x0010 (0x0010 - 0x0000)
struct BED_FSMNode_GI_Loading_ShowArchiveMarkInStartGame_GetNodeDescriptionInCS final
{
public:
	class FString                                 ReturnValue;                                       // 0x0000(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash)
};
//static_assert(alignof(BED_FSMNode_GI_Loading_ShowArchiveMarkInStartGame_GetNodeDescriptionInCS) == 0x000008, "Wrong alignment on BED_FSMNode_GI_Loading_ShowArchiveMarkInStartGame_GetNodeDescriptionInCS");
//static_assert(sizeof(BED_FSMNode_GI_Loading_ShowArchiveMarkInStartGame_GetNodeDescriptionInCS) == 0x000010, "Wrong size on BED_FSMNode_GI_Loading_ShowArchiveMarkInStartGame_GetNodeDescriptionInCS");
//static_assert(offsetof(BED_FSMNode_GI_Loading_ShowArchiveMarkInStartGame_GetNodeDescriptionInCS, ReturnValue) == 0x000000, "Member 'BED_FSMNode_GI_Loading_ShowArchiveMarkInStartGame_GetNodeDescriptionInCS::ReturnValue' has a wrong offset!");

// Function b1-Managed.BANS_GSSetCloudMoveEnabled.GSNotifyBeginCS
// 0x0048 (0x0048 - 0x0000)
struct BANS_GSSetCloudMoveEnabled_GSNotifyBeginCS final
{
public:
	struct FUStGSNotifyParam                      NotifyParam;                                       // 0x0000(0x0040)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
	float                                         TotalDuration;                                     // 0x0040(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
//static_assert(alignof(BANS_GSSetCloudMoveEnabled_GSNotifyBeginCS) == 0x000008, "Wrong alignment on BANS_GSSetCloudMoveEnabled_GSNotifyBeginCS");
//static_assert(sizeof(BANS_GSSetCloudMoveEnabled_GSNotifyBeginCS) == 0x000048, "Wrong size on BANS_GSSetCloudMoveEnabled_GSNotifyBeginCS");
//static_assert(offsetof(BANS_GSSetCloudMoveEnabled_GSNotifyBeginCS, NotifyParam) == 0x000000, "Member 'BANS_GSSetCloudMoveEnabled_GSNotifyBeginCS::NotifyParam' has a wrong offset!");
//static_assert(offsetof(BANS_GSSetCloudMoveEnabled_GSNotifyBeginCS, TotalDuration) == 0x000040, "Member 'BANS_GSSetCloudMoveEnabled_GSNotifyBeginCS::TotalDuration' has a wrong offset!");

// Function b1-Managed.BANS_GSBlendPhysicForDeath.GSNotifyBeginCS
// 0x0048 (0x0048 - 0x0000)
struct BANS_GSBlendPhysicForDeath_GSNotifyBeginCS final
{
public:
	struct FUStGSNotifyParam                      NotifyParam;                                       // 0x0000(0x0040)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
	float                                         TotalDuration;                                     // 0x0040(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
//static_assert(alignof(BANS_GSBlendPhysicForDeath_GSNotifyBeginCS) == 0x000008, "Wrong alignment on BANS_GSBlendPhysicForDeath_GSNotifyBeginCS");
//static_assert(sizeof(BANS_GSBlendPhysicForDeath_GSNotifyBeginCS) == 0x000048, "Wrong size on BANS_GSBlendPhysicForDeath_GSNotifyBeginCS");
//static_assert(offsetof(BANS_GSBlendPhysicForDeath_GSNotifyBeginCS, NotifyParam) == 0x000000, "Member 'BANS_GSBlendPhysicForDeath_GSNotifyBeginCS::NotifyParam' has a wrong offset!");
//static_assert(offsetof(BANS_GSBlendPhysicForDeath_GSNotifyBeginCS, TotalDuration) == 0x000040, "Member 'BANS_GSBlendPhysicForDeath_GSNotifyBeginCS::TotalDuration' has a wrong offset!");

// Function b1-Managed.BANS_GSCallDeathDissolve.GSNotifyBeginCS
// 0x0048 (0x0048 - 0x0000)
struct BANS_GSCallDeathDissolve_GSNotifyBeginCS final
{
public:
	struct FUStGSNotifyParam                      NotifyParam;                                       // 0x0000(0x0040)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
	float                                         TotalDuration;                                     // 0x0040(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
//static_assert(alignof(BANS_GSCallDeathDissolve_GSNotifyBeginCS) == 0x000008, "Wrong alignment on BANS_GSCallDeathDissolve_GSNotifyBeginCS");
//static_assert(sizeof(BANS_GSCallDeathDissolve_GSNotifyBeginCS) == 0x000048, "Wrong size on BANS_GSCallDeathDissolve_GSNotifyBeginCS");
//static_assert(offsetof(BANS_GSCallDeathDissolve_GSNotifyBeginCS, NotifyParam) == 0x000000, "Member 'BANS_GSCallDeathDissolve_GSNotifyBeginCS::NotifyParam' has a wrong offset!");
//static_assert(offsetof(BANS_GSCallDeathDissolve_GSNotifyBeginCS, TotalDuration) == 0x000040, "Member 'BANS_GSCallDeathDissolve_GSNotifyBeginCS::TotalDuration' has a wrong offset!");

// Function b1-Managed.BANS_GSCostAttrByBuff.GSNotifyBeginCS
// 0x0048 (0x0048 - 0x0000)
struct BANS_GSCostAttrByBuff_GSNotifyBeginCS final
{
public:
	struct FUStGSNotifyParam                      NotifyParam;                                       // 0x0000(0x0040)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
	float                                         TotalDuration;                                     // 0x0040(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
//static_assert(alignof(BANS_GSCostAttrByBuff_GSNotifyBeginCS) == 0x000008, "Wrong alignment on BANS_GSCostAttrByBuff_GSNotifyBeginCS");
//static_assert(sizeof(BANS_GSCostAttrByBuff_GSNotifyBeginCS) == 0x000048, "Wrong size on BANS_GSCostAttrByBuff_GSNotifyBeginCS");
//static_assert(offsetof(BANS_GSCostAttrByBuff_GSNotifyBeginCS, NotifyParam) == 0x000000, "Member 'BANS_GSCostAttrByBuff_GSNotifyBeginCS::NotifyParam' has a wrong offset!");
//static_assert(offsetof(BANS_GSCostAttrByBuff_GSNotifyBeginCS, TotalDuration) == 0x000040, "Member 'BANS_GSCostAttrByBuff_GSNotifyBeginCS::TotalDuration' has a wrong offset!");

// Function b1-Managed.BANS_GSCostAttrByBuff.GSNotifyEndCS
// 0x0040 (0x0040 - 0x0000)
struct BANS_GSCostAttrByBuff_GSNotifyEndCS final
{
public:
	struct FUStGSNotifyParam                      NotifyParam;                                       // 0x0000(0x0040)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
//static_assert(alignof(BANS_GSCostAttrByBuff_GSNotifyEndCS) == 0x000008, "Wrong alignment on BANS_GSCostAttrByBuff_GSNotifyEndCS");
//static_assert(sizeof(BANS_GSCostAttrByBuff_GSNotifyEndCS) == 0x000040, "Wrong size on BANS_GSCostAttrByBuff_GSNotifyEndCS");
//static_assert(offsetof(BANS_GSCostAttrByBuff_GSNotifyEndCS, NotifyParam) == 0x000000, "Member 'BANS_GSCostAttrByBuff_GSNotifyEndCS::NotifyParam' has a wrong offset!");

// Function b1-Managed.BED_FSMNode_GI_Loading_ShowMessageBoxAndWaitConfirm.PostPropertyChanged
// 0x0020 (0x0020 - 0x0000)
struct BED_FSMNode_GI_Loading_ShowMessageBoxAndWaitConfirm_PostPropertyChanged final
{
public:
	class FString                                 MemberName;                                        // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash)
	class FString                                 PropertyName;                                      // 0x0010(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash)
};
//static_assert(alignof(BED_FSMNode_GI_Loading_ShowMessageBoxAndWaitConfirm_PostPropertyChanged) == 0x000008, "Wrong alignment on BED_FSMNode_GI_Loading_ShowMessageBoxAndWaitConfirm_PostPropertyChanged");
//static_assert(sizeof(BED_FSMNode_GI_Loading_ShowMessageBoxAndWaitConfirm_PostPropertyChanged) == 0x000020, "Wrong size on BED_FSMNode_GI_Loading_ShowMessageBoxAndWaitConfirm_PostPropertyChanged");
//static_assert(offsetof(BED_FSMNode_GI_Loading_ShowMessageBoxAndWaitConfirm_PostPropertyChanged, MemberName) == 0x000000, "Member 'BED_FSMNode_GI_Loading_ShowMessageBoxAndWaitConfirm_PostPropertyChanged::MemberName' has a wrong offset!");
//static_assert(offsetof(BED_FSMNode_GI_Loading_ShowMessageBoxAndWaitConfirm_PostPropertyChanged, PropertyName) == 0x000010, "Member 'BED_FSMNode_GI_Loading_ShowMessageBoxAndWaitConfirm_PostPropertyChanged::PropertyName' has a wrong offset!");

// Function b1-Managed.BED_FSMNode_GI_Loading_ShowMessageBoxAndWaitConfirm.GetNodeDescriptionInCS
// 0x0010 (0x0010 - 0x0000)
struct BED_FSMNode_GI_Loading_ShowMessageBoxAndWaitConfirm_GetNodeDescriptionInCS final
{
public:
	class FString                                 ReturnValue;                                       // 0x0000(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash)
};
//static_assert(alignof(BED_FSMNode_GI_Loading_ShowMessageBoxAndWaitConfirm_GetNodeDescriptionInCS) == 0x000008, "Wrong alignment on BED_FSMNode_GI_Loading_ShowMessageBoxAndWaitConfirm_GetNodeDescriptionInCS");
//static_assert(sizeof(BED_FSMNode_GI_Loading_ShowMessageBoxAndWaitConfirm_GetNodeDescriptionInCS) == 0x000010, "Wrong size on BED_FSMNode_GI_Loading_ShowMessageBoxAndWaitConfirm_GetNodeDescriptionInCS");
//static_assert(offsetof(BED_FSMNode_GI_Loading_ShowMessageBoxAndWaitConfirm_GetNodeDescriptionInCS, ReturnValue) == 0x000000, "Member 'BED_FSMNode_GI_Loading_ShowMessageBoxAndWaitConfirm_GetNodeDescriptionInCS::ReturnValue' has a wrong offset!");

// Function b1-Managed.BANS_GSCricketJumpUp.GSNotifyBeginCS
// 0x0048 (0x0048 - 0x0000)
struct BANS_GSCricketJumpUp_GSNotifyBeginCS final
{
public:
	struct FUStGSNotifyParam                      NotifyParam;                                       // 0x0000(0x0040)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
	float                                         TotalDuration;                                     // 0x0040(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
//static_assert(alignof(BANS_GSCricketJumpUp_GSNotifyBeginCS) == 0x000008, "Wrong alignment on BANS_GSCricketJumpUp_GSNotifyBeginCS");
//static_assert(sizeof(BANS_GSCricketJumpUp_GSNotifyBeginCS) == 0x000048, "Wrong size on BANS_GSCricketJumpUp_GSNotifyBeginCS");
//static_assert(offsetof(BANS_GSCricketJumpUp_GSNotifyBeginCS, NotifyParam) == 0x000000, "Member 'BANS_GSCricketJumpUp_GSNotifyBeginCS::NotifyParam' has a wrong offset!");
//static_assert(offsetof(BANS_GSCricketJumpUp_GSNotifyBeginCS, TotalDuration) == 0x000040, "Member 'BANS_GSCricketJumpUp_GSNotifyBeginCS::TotalDuration' has a wrong offset!");

// Function b1-Managed.BANS_GSCricketJumpUp.GSNotifyEndCS
// 0x0040 (0x0040 - 0x0000)
struct BANS_GSCricketJumpUp_GSNotifyEndCS final
{
public:
	struct FUStGSNotifyParam                      NotifyParam;                                       // 0x0000(0x0040)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
//static_assert(alignof(BANS_GSCricketJumpUp_GSNotifyEndCS) == 0x000008, "Wrong alignment on BANS_GSCricketJumpUp_GSNotifyEndCS");
//static_assert(sizeof(BANS_GSCricketJumpUp_GSNotifyEndCS) == 0x000040, "Wrong size on BANS_GSCricketJumpUp_GSNotifyEndCS");
//static_assert(offsetof(BANS_GSCricketJumpUp_GSNotifyEndCS, NotifyParam) == 0x000000, "Member 'BANS_GSCricketJumpUp_GSNotifyEndCS::NotifyParam' has a wrong offset!");

// Function b1-Managed.BANS_GSDetonateBuff.GSNotifyBeginCS
// 0x0048 (0x0048 - 0x0000)
struct BANS_GSDetonateBuff_GSNotifyBeginCS final
{
public:
	struct FUStGSNotifyParam                      NotifyParam;                                       // 0x0000(0x0040)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
	float                                         TotalDuration;                                     // 0x0040(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
//static_assert(alignof(BANS_GSDetonateBuff_GSNotifyBeginCS) == 0x000008, "Wrong alignment on BANS_GSDetonateBuff_GSNotifyBeginCS");
//static_assert(sizeof(BANS_GSDetonateBuff_GSNotifyBeginCS) == 0x000048, "Wrong size on BANS_GSDetonateBuff_GSNotifyBeginCS");
//static_assert(offsetof(BANS_GSDetonateBuff_GSNotifyBeginCS, NotifyParam) == 0x000000, "Member 'BANS_GSDetonateBuff_GSNotifyBeginCS::NotifyParam' has a wrong offset!");
//static_assert(offsetof(BANS_GSDetonateBuff_GSNotifyBeginCS, TotalDuration) == 0x000040, "Member 'BANS_GSDetonateBuff_GSNotifyBeginCS::TotalDuration' has a wrong offset!");

// Function b1-Managed.BANS_GSCloudWindow.GSNotifyBeginCS
// 0x0048 (0x0048 - 0x0000)
struct BANS_GSCloudWindow_GSNotifyBeginCS final
{
public:
	struct FUStGSNotifyParam                      NotifyParam;                                       // 0x0000(0x0040)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
	float                                         TotalDuration;                                     // 0x0040(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
//static_assert(alignof(BANS_GSCloudWindow_GSNotifyBeginCS) == 0x000008, "Wrong alignment on BANS_GSCloudWindow_GSNotifyBeginCS");
//static_assert(sizeof(BANS_GSCloudWindow_GSNotifyBeginCS) == 0x000048, "Wrong size on BANS_GSCloudWindow_GSNotifyBeginCS");
//static_assert(offsetof(BANS_GSCloudWindow_GSNotifyBeginCS, NotifyParam) == 0x000000, "Member 'BANS_GSCloudWindow_GSNotifyBeginCS::NotifyParam' has a wrong offset!");
//static_assert(offsetof(BANS_GSCloudWindow_GSNotifyBeginCS, TotalDuration) == 0x000040, "Member 'BANS_GSCloudWindow_GSNotifyBeginCS::TotalDuration' has a wrong offset!");

// Function b1-Managed.BANS_GSEmpty.GSAllowCrossSection
// 0x0001 (0x0001 - 0x0000)
struct BANS_GSEmpty_GSAllowCrossSection final
{
public:
	uint8                                         ReturnValue : 1;                                   // 0x0000(0x0001)(BitIndex: 0x00, PropSize: 0x0001 (Parm, OutParm, ReturnParm, NoDestructor, HasGetValueTypeHash))
};
//static_assert(alignof(BANS_GSEmpty_GSAllowCrossSection) == 0x000001, "Wrong alignment on BANS_GSEmpty_GSAllowCrossSection");
//static_assert(sizeof(BANS_GSEmpty_GSAllowCrossSection) == 0x000001, "Wrong size on BANS_GSEmpty_GSAllowCrossSection");

// Function b1-Managed.BANS_GSEmpty.GSNotifyBeginCS
// 0x0048 (0x0048 - 0x0000)
struct BANS_GSEmpty_GSNotifyBeginCS final
{
public:
	struct FUStGSNotifyParam                      NotifyParam;                                       // 0x0000(0x0040)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
	float                                         TotalDuration;                                     // 0x0040(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
//static_assert(alignof(BANS_GSEmpty_GSNotifyBeginCS) == 0x000008, "Wrong alignment on BANS_GSEmpty_GSNotifyBeginCS");
//static_assert(sizeof(BANS_GSEmpty_GSNotifyBeginCS) == 0x000048, "Wrong size on BANS_GSEmpty_GSNotifyBeginCS");
//static_assert(offsetof(BANS_GSEmpty_GSNotifyBeginCS, NotifyParam) == 0x000000, "Member 'BANS_GSEmpty_GSNotifyBeginCS::NotifyParam' has a wrong offset!");
//static_assert(offsetof(BANS_GSEmpty_GSNotifyBeginCS, TotalDuration) == 0x000040, "Member 'BANS_GSEmpty_GSNotifyBeginCS::TotalDuration' has a wrong offset!");

// Function b1-Managed.BANS_GSEmpty.GSNotifyTickCS
// 0x0048 (0x0048 - 0x0000)
struct BANS_GSEmpty_GSNotifyTickCS final
{
public:
	struct FUStGSNotifyParam                      NotifyParam;                                       // 0x0000(0x0040)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
	float                                         FrameDeltaTime;                                    // 0x0040(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
//static_assert(alignof(BANS_GSEmpty_GSNotifyTickCS) == 0x000008, "Wrong alignment on BANS_GSEmpty_GSNotifyTickCS");
//static_assert(sizeof(BANS_GSEmpty_GSNotifyTickCS) == 0x000048, "Wrong size on BANS_GSEmpty_GSNotifyTickCS");
//static_assert(offsetof(BANS_GSEmpty_GSNotifyTickCS, NotifyParam) == 0x000000, "Member 'BANS_GSEmpty_GSNotifyTickCS::NotifyParam' has a wrong offset!");
//static_assert(offsetof(BANS_GSEmpty_GSNotifyTickCS, FrameDeltaTime) == 0x000040, "Member 'BANS_GSEmpty_GSNotifyTickCS::FrameDeltaTime' has a wrong offset!");

// Function b1-Managed.BANS_GSEmpty.GSNotifyEndCS
// 0x0040 (0x0040 - 0x0000)
struct BANS_GSEmpty_GSNotifyEndCS final
{
public:
	struct FUStGSNotifyParam                      NotifyParam;                                       // 0x0000(0x0040)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
//static_assert(alignof(BANS_GSEmpty_GSNotifyEndCS) == 0x000008, "Wrong alignment on BANS_GSEmpty_GSNotifyEndCS");
//static_assert(sizeof(BANS_GSEmpty_GSNotifyEndCS) == 0x000040, "Wrong size on BANS_GSEmpty_GSNotifyEndCS");
//static_assert(offsetof(BANS_GSEmpty_GSNotifyEndCS, NotifyParam) == 0x000000, "Member 'BANS_GSEmpty_GSNotifyEndCS::NotifyParam' has a wrong offset!");

// Function b1-Managed.BANS_GSHatch.GSNotifyBeginCS
// 0x0048 (0x0048 - 0x0000)
struct BANS_GSHatch_GSNotifyBeginCS final
{
public:
	struct FUStGSNotifyParam                      NotifyParam;                                       // 0x0000(0x0040)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
	float                                         TotalDuration;                                     // 0x0040(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
//static_assert(alignof(BANS_GSHatch_GSNotifyBeginCS) == 0x000008, "Wrong alignment on BANS_GSHatch_GSNotifyBeginCS");
//static_assert(sizeof(BANS_GSHatch_GSNotifyBeginCS) == 0x000048, "Wrong size on BANS_GSHatch_GSNotifyBeginCS");
//static_assert(offsetof(BANS_GSHatch_GSNotifyBeginCS, NotifyParam) == 0x000000, "Member 'BANS_GSHatch_GSNotifyBeginCS::NotifyParam' has a wrong offset!");
//static_assert(offsetof(BANS_GSHatch_GSNotifyBeginCS, TotalDuration) == 0x000040, "Member 'BANS_GSHatch_GSNotifyBeginCS::TotalDuration' has a wrong offset!");

// Function b1-Managed.BANS_GSHatch.GSNotifyEndCS
// 0x0040 (0x0040 - 0x0000)
struct BANS_GSHatch_GSNotifyEndCS final
{
public:
	struct FUStGSNotifyParam                      NotifyParam;                                       // 0x0000(0x0040)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
//static_assert(alignof(BANS_GSHatch_GSNotifyEndCS) == 0x000008, "Wrong alignment on BANS_GSHatch_GSNotifyEndCS");
//static_assert(sizeof(BANS_GSHatch_GSNotifyEndCS) == 0x000040, "Wrong size on BANS_GSHatch_GSNotifyEndCS");
//static_assert(offsetof(BANS_GSHatch_GSNotifyEndCS, NotifyParam) == 0x000000, "Member 'BANS_GSHatch_GSNotifyEndCS::NotifyParam' has a wrong offset!");

// Function b1-Managed.GSLocalPlayerCS.GetGameLoginOptionsCS
// 0x0010 (0x0010 - 0x0000)
struct GSLocalPlayerCS_GetGameLoginOptionsCS final
{
public:
	class FString                                 ReturnValue;                                       // 0x0000(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash)
};
//static_assert(alignof(GSLocalPlayerCS_GetGameLoginOptionsCS) == 0x000008, "Wrong alignment on GSLocalPlayerCS_GetGameLoginOptionsCS");
//static_assert(sizeof(GSLocalPlayerCS_GetGameLoginOptionsCS) == 0x000010, "Wrong size on GSLocalPlayerCS_GetGameLoginOptionsCS");
//static_assert(offsetof(GSLocalPlayerCS_GetGameLoginOptionsCS, ReturnValue) == 0x000000, "Member 'GSLocalPlayerCS_GetGameLoginOptionsCS::ReturnValue' has a wrong offset!");

// Function b1-Managed.BGUPerformerControlConfigComp.GetParamDisplayNameCS
// 0x0030 (0x0030 - 0x0000)
struct BGUPerformerControlConfigComp_GetParamDisplayNameCS final
{
public:
	class FString                                 PropertyName;                                      // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash)
	struct FCalliopeGuid                          ConfigGuid;                                        // 0x0010(0x0010)(ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, HasGetValueTypeHash)
	class FString                                 ReturnValue;                                       // 0x0020(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash)
};
//static_assert(alignof(BGUPerformerControlConfigComp_GetParamDisplayNameCS) == 0x000008, "Wrong alignment on BGUPerformerControlConfigComp_GetParamDisplayNameCS");
//static_assert(sizeof(BGUPerformerControlConfigComp_GetParamDisplayNameCS) == 0x000030, "Wrong size on BGUPerformerControlConfigComp_GetParamDisplayNameCS");
//static_assert(offsetof(BGUPerformerControlConfigComp_GetParamDisplayNameCS, PropertyName) == 0x000000, "Member 'BGUPerformerControlConfigComp_GetParamDisplayNameCS::PropertyName' has a wrong offset!");
//static_assert(offsetof(BGUPerformerControlConfigComp_GetParamDisplayNameCS, ConfigGuid) == 0x000010, "Member 'BGUPerformerControlConfigComp_GetParamDisplayNameCS::ConfigGuid' has a wrong offset!");
//static_assert(offsetof(BGUPerformerControlConfigComp_GetParamDisplayNameCS, ReturnValue) == 0x000020, "Member 'BGUPerformerControlConfigComp_GetParamDisplayNameCS::ReturnValue' has a wrong offset!");

// Function b1-Managed.BGUPerformerControlConfigComp.GetPossibleParamsCS
// 0x0030 (0x0030 - 0x0000)
struct BGUPerformerControlConfigComp_GetPossibleParamsCS final
{
public:
	class FString                                 ParentPropertyName;                                // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash)
	class FString                                 PropertyName;                                      // 0x0010(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash)
	TArray<struct FCalliopeGuid>                  OutParamArray;                                     // 0x0020(0x0010)(Parm, OutParm)
};
//static_assert(alignof(BGUPerformerControlConfigComp_GetPossibleParamsCS) == 0x000008, "Wrong alignment on BGUPerformerControlConfigComp_GetPossibleParamsCS");
//static_assert(sizeof(BGUPerformerControlConfigComp_GetPossibleParamsCS) == 0x000030, "Wrong size on BGUPerformerControlConfigComp_GetPossibleParamsCS");
//static_assert(offsetof(BGUPerformerControlConfigComp_GetPossibleParamsCS, ParentPropertyName) == 0x000000, "Member 'BGUPerformerControlConfigComp_GetPossibleParamsCS::ParentPropertyName' has a wrong offset!");
//static_assert(offsetof(BGUPerformerControlConfigComp_GetPossibleParamsCS, PropertyName) == 0x000010, "Member 'BGUPerformerControlConfigComp_GetPossibleParamsCS::PropertyName' has a wrong offset!");
//static_assert(offsetof(BGUPerformerControlConfigComp_GetPossibleParamsCS, OutParamArray) == 0x000020, "Member 'BGUPerformerControlConfigComp_GetPossibleParamsCS::OutParamArray' has a wrong offset!");

// Function b1-Managed.BANS_GSMyriapodsFootStep.GSNotifyBeginCS
// 0x0048 (0x0048 - 0x0000)
struct BANS_GSMyriapodsFootStep_GSNotifyBeginCS final
{
public:
	struct FUStGSNotifyParam                      NotifyParam;                                       // 0x0000(0x0040)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
	float                                         TotalDuration;                                     // 0x0040(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
//static_assert(alignof(BANS_GSMyriapodsFootStep_GSNotifyBeginCS) == 0x000008, "Wrong alignment on BANS_GSMyriapodsFootStep_GSNotifyBeginCS");
//static_assert(sizeof(BANS_GSMyriapodsFootStep_GSNotifyBeginCS) == 0x000048, "Wrong size on BANS_GSMyriapodsFootStep_GSNotifyBeginCS");
//static_assert(offsetof(BANS_GSMyriapodsFootStep_GSNotifyBeginCS, NotifyParam) == 0x000000, "Member 'BANS_GSMyriapodsFootStep_GSNotifyBeginCS::NotifyParam' has a wrong offset!");
//static_assert(offsetof(BANS_GSMyriapodsFootStep_GSNotifyBeginCS, TotalDuration) == 0x000040, "Member 'BANS_GSMyriapodsFootStep_GSNotifyBeginCS::TotalDuration' has a wrong offset!");

// Function b1-Managed.BANS_GSMyriapodsFootStep.GSNotifyEndCS
// 0x0040 (0x0040 - 0x0000)
struct BANS_GSMyriapodsFootStep_GSNotifyEndCS final
{
public:
	struct FUStGSNotifyParam                      NotifyParam;                                       // 0x0000(0x0040)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
//static_assert(alignof(BANS_GSMyriapodsFootStep_GSNotifyEndCS) == 0x000008, "Wrong alignment on BANS_GSMyriapodsFootStep_GSNotifyEndCS");
//static_assert(sizeof(BANS_GSMyriapodsFootStep_GSNotifyEndCS) == 0x000040, "Wrong size on BANS_GSMyriapodsFootStep_GSNotifyEndCS");
//static_assert(offsetof(BANS_GSMyriapodsFootStep_GSNotifyEndCS, NotifyParam) == 0x000000, "Member 'BANS_GSMyriapodsFootStep_GSNotifyEndCS::NotifyParam' has a wrong offset!");

// Function b1-Managed.BANS_GSPlayerInteractWindow.GSNotifyBeginCS
// 0x0048 (0x0048 - 0x0000)
struct BANS_GSPlayerInteractWindow_GSNotifyBeginCS final
{
public:
	struct FUStGSNotifyParam                      NotifyParam;                                       // 0x0000(0x0040)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
	float                                         TotalDuration;                                     // 0x0040(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
//static_assert(alignof(BANS_GSPlayerInteractWindow_GSNotifyBeginCS) == 0x000008, "Wrong alignment on BANS_GSPlayerInteractWindow_GSNotifyBeginCS");
//static_assert(sizeof(BANS_GSPlayerInteractWindow_GSNotifyBeginCS) == 0x000048, "Wrong size on BANS_GSPlayerInteractWindow_GSNotifyBeginCS");
//static_assert(offsetof(BANS_GSPlayerInteractWindow_GSNotifyBeginCS, NotifyParam) == 0x000000, "Member 'BANS_GSPlayerInteractWindow_GSNotifyBeginCS::NotifyParam' has a wrong offset!");
//static_assert(offsetof(BANS_GSPlayerInteractWindow_GSNotifyBeginCS, TotalDuration) == 0x000040, "Member 'BANS_GSPlayerInteractWindow_GSNotifyBeginCS::TotalDuration' has a wrong offset!");

// Function b1-Managed.BAN_GSCallMultiPointsRegister.GSNotifyCS
// 0x0040 (0x0040 - 0x0000)
struct BAN_GSCallMultiPointsRegister_GSNotifyCS final
{
public:
	struct FUStGSNotifyParam                      NotifyParam;                                       // 0x0000(0x0040)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
//static_assert(alignof(BAN_GSCallMultiPointsRegister_GSNotifyCS) == 0x000008, "Wrong alignment on BAN_GSCallMultiPointsRegister_GSNotifyCS");
//static_assert(sizeof(BAN_GSCallMultiPointsRegister_GSNotifyCS) == 0x000040, "Wrong size on BAN_GSCallMultiPointsRegister_GSNotifyCS");
//static_assert(offsetof(BAN_GSCallMultiPointsRegister_GSNotifyCS, NotifyParam) == 0x000000, "Member 'BAN_GSCallMultiPointsRegister_GSNotifyCS::NotifyParam' has a wrong offset!");

// Function b1-Managed.BANS_GSReleaseBlockState.GSNotifyBeginCS
// 0x0048 (0x0048 - 0x0000)
struct BANS_GSReleaseBlockState_GSNotifyBeginCS final
{
public:
	struct FUStGSNotifyParam                      NotifyParam;                                       // 0x0000(0x0040)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
	float                                         TotalDuration;                                     // 0x0040(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
//static_assert(alignof(BANS_GSReleaseBlockState_GSNotifyBeginCS) == 0x000008, "Wrong alignment on BANS_GSReleaseBlockState_GSNotifyBeginCS");
//static_assert(sizeof(BANS_GSReleaseBlockState_GSNotifyBeginCS) == 0x000048, "Wrong size on BANS_GSReleaseBlockState_GSNotifyBeginCS");
//static_assert(offsetof(BANS_GSReleaseBlockState_GSNotifyBeginCS, NotifyParam) == 0x000000, "Member 'BANS_GSReleaseBlockState_GSNotifyBeginCS::NotifyParam' has a wrong offset!");
//static_assert(offsetof(BANS_GSReleaseBlockState_GSNotifyBeginCS, TotalDuration) == 0x000040, "Member 'BANS_GSReleaseBlockState_GSNotifyBeginCS::TotalDuration' has a wrong offset!");

// Function b1-Managed.BANS_GSSlowTime_LifeSaving.GSNotifyBeginCS
// 0x0048 (0x0048 - 0x0000)
struct BANS_GSSlowTime_LifeSaving_GSNotifyBeginCS final
{
public:
	struct FUStGSNotifyParam                      NotifyParam;                                       // 0x0000(0x0040)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
	float                                         TotalDuration;                                     // 0x0040(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
//static_assert(alignof(BANS_GSSlowTime_LifeSaving_GSNotifyBeginCS) == 0x000008, "Wrong alignment on BANS_GSSlowTime_LifeSaving_GSNotifyBeginCS");
//static_assert(sizeof(BANS_GSSlowTime_LifeSaving_GSNotifyBeginCS) == 0x000048, "Wrong size on BANS_GSSlowTime_LifeSaving_GSNotifyBeginCS");
//static_assert(offsetof(BANS_GSSlowTime_LifeSaving_GSNotifyBeginCS, NotifyParam) == 0x000000, "Member 'BANS_GSSlowTime_LifeSaving_GSNotifyBeginCS::NotifyParam' has a wrong offset!");
//static_assert(offsetof(BANS_GSSlowTime_LifeSaving_GSNotifyBeginCS, TotalDuration) == 0x000040, "Member 'BANS_GSSlowTime_LifeSaving_GSNotifyBeginCS::TotalDuration' has a wrong offset!");

// Function b1-Managed.PerformerAction_PlayBeginLoopMontage.OnMontageBlendingOut
// 0x0010 (0x0010 - 0x0000)
struct PerformerAction_PlayBeginLoopMontage_OnMontageBlendingOut final
{
public:
	class UAnimMontage*                           InMontage;                                         // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         bInterrupted : 1;                                  // 0x0008(0x0001)(BitIndex: 0x00, PropSize: 0x0001 (Parm, NoDestructor, HasGetValueTypeHash))
};
//static_assert(alignof(PerformerAction_PlayBeginLoopMontage_OnMontageBlendingOut) == 0x000008, "Wrong alignment on PerformerAction_PlayBeginLoopMontage_OnMontageBlendingOut");
//static_assert(sizeof(PerformerAction_PlayBeginLoopMontage_OnMontageBlendingOut) == 0x000010, "Wrong size on PerformerAction_PlayBeginLoopMontage_OnMontageBlendingOut");
//static_assert(offsetof(PerformerAction_PlayBeginLoopMontage_OnMontageBlendingOut, InMontage) == 0x000000, "Member 'PerformerAction_PlayBeginLoopMontage_OnMontageBlendingOut::InMontage' has a wrong offset!");

// Function b1-Managed.BANS_GSTriggerEffect.GSValidateInputCS
// 0x0008 (0x0008 - 0x0000)
struct BANS_GSTriggerEffect_GSValidateInputCS final
{
public:
	class AActor*                                 Actor;                                             // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
//static_assert(alignof(BANS_GSTriggerEffect_GSValidateInputCS) == 0x000008, "Wrong alignment on BANS_GSTriggerEffect_GSValidateInputCS");
//static_assert(sizeof(BANS_GSTriggerEffect_GSValidateInputCS) == 0x000008, "Wrong size on BANS_GSTriggerEffect_GSValidateInputCS");
//static_assert(offsetof(BANS_GSTriggerEffect_GSValidateInputCS, Actor) == 0x000000, "Member 'BANS_GSTriggerEffect_GSValidateInputCS::Actor' has a wrong offset!");

// Function b1-Managed.BANS_GSTriggerEffect.GSNotifyBeginCS
// 0x0048 (0x0048 - 0x0000)
struct BANS_GSTriggerEffect_GSNotifyBeginCS final
{
public:
	struct FUStGSNotifyParam                      NotifyParam;                                       // 0x0000(0x0040)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
	float                                         TotalDuration;                                     // 0x0040(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
//static_assert(alignof(BANS_GSTriggerEffect_GSNotifyBeginCS) == 0x000008, "Wrong alignment on BANS_GSTriggerEffect_GSNotifyBeginCS");
//static_assert(sizeof(BANS_GSTriggerEffect_GSNotifyBeginCS) == 0x000048, "Wrong size on BANS_GSTriggerEffect_GSNotifyBeginCS");
//static_assert(offsetof(BANS_GSTriggerEffect_GSNotifyBeginCS, NotifyParam) == 0x000000, "Member 'BANS_GSTriggerEffect_GSNotifyBeginCS::NotifyParam' has a wrong offset!");
//static_assert(offsetof(BANS_GSTriggerEffect_GSNotifyBeginCS, TotalDuration) == 0x000040, "Member 'BANS_GSTriggerEffect_GSNotifyBeginCS::TotalDuration' has a wrong offset!");

// Function b1-Managed.BANS_GSTriggerEffect.GSNotifyTickCS
// 0x0048 (0x0048 - 0x0000)
struct BANS_GSTriggerEffect_GSNotifyTickCS final
{
public:
	struct FUStGSNotifyParam                      NotifyParam;                                       // 0x0000(0x0040)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
	float                                         FrameDeltaTime;                                    // 0x0040(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
//static_assert(alignof(BANS_GSTriggerEffect_GSNotifyTickCS) == 0x000008, "Wrong alignment on BANS_GSTriggerEffect_GSNotifyTickCS");
//static_assert(sizeof(BANS_GSTriggerEffect_GSNotifyTickCS) == 0x000048, "Wrong size on BANS_GSTriggerEffect_GSNotifyTickCS");
//static_assert(offsetof(BANS_GSTriggerEffect_GSNotifyTickCS, NotifyParam) == 0x000000, "Member 'BANS_GSTriggerEffect_GSNotifyTickCS::NotifyParam' has a wrong offset!");
//static_assert(offsetof(BANS_GSTriggerEffect_GSNotifyTickCS, FrameDeltaTime) == 0x000040, "Member 'BANS_GSTriggerEffect_GSNotifyTickCS::FrameDeltaTime' has a wrong offset!");

// Function b1-Managed.BANS_GSTriggerEffect.GSNotifyEndCS
// 0x0040 (0x0040 - 0x0000)
struct BANS_GSTriggerEffect_GSNotifyEndCS final
{
public:
	struct FUStGSNotifyParam                      NotifyParam;                                       // 0x0000(0x0040)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
//static_assert(alignof(BANS_GSTriggerEffect_GSNotifyEndCS) == 0x000008, "Wrong alignment on BANS_GSTriggerEffect_GSNotifyEndCS");
//static_assert(sizeof(BANS_GSTriggerEffect_GSNotifyEndCS) == 0x000040, "Wrong size on BANS_GSTriggerEffect_GSNotifyEndCS");
//static_assert(offsetof(BANS_GSTriggerEffect_GSNotifyEndCS, NotifyParam) == 0x000000, "Member 'BANS_GSTriggerEffect_GSNotifyEndCS::NotifyParam' has a wrong offset!");

// Function b1-Managed.BANS_GSTryHRCouonterAttack.GSNotifyBeginCS
// 0x0048 (0x0048 - 0x0000)
struct BANS_GSTryHRCouonterAttack_GSNotifyBeginCS final
{
public:
	struct FUStGSNotifyParam                      NotifyParam;                                       // 0x0000(0x0040)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
	float                                         TotalDuration;                                     // 0x0040(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
//static_assert(alignof(BANS_GSTryHRCouonterAttack_GSNotifyBeginCS) == 0x000008, "Wrong alignment on BANS_GSTryHRCouonterAttack_GSNotifyBeginCS");
//static_assert(sizeof(BANS_GSTryHRCouonterAttack_GSNotifyBeginCS) == 0x000048, "Wrong size on BANS_GSTryHRCouonterAttack_GSNotifyBeginCS");
//static_assert(offsetof(BANS_GSTryHRCouonterAttack_GSNotifyBeginCS, NotifyParam) == 0x000000, "Member 'BANS_GSTryHRCouonterAttack_GSNotifyBeginCS::NotifyParam' has a wrong offset!");
//static_assert(offsetof(BANS_GSTryHRCouonterAttack_GSNotifyBeginCS, TotalDuration) == 0x000040, "Member 'BANS_GSTryHRCouonterAttack_GSNotifyBeginCS::TotalDuration' has a wrong offset!");

// Function b1-Managed.BANS_GSTryHRCouonterAttack.GSNotifyTickCS
// 0x0048 (0x0048 - 0x0000)
struct BANS_GSTryHRCouonterAttack_GSNotifyTickCS final
{
public:
	struct FUStGSNotifyParam                      NotifyParam;                                       // 0x0000(0x0040)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
	float                                         FrameDeltaTime;                                    // 0x0040(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
//static_assert(alignof(BANS_GSTryHRCouonterAttack_GSNotifyTickCS) == 0x000008, "Wrong alignment on BANS_GSTryHRCouonterAttack_GSNotifyTickCS");
//static_assert(sizeof(BANS_GSTryHRCouonterAttack_GSNotifyTickCS) == 0x000048, "Wrong size on BANS_GSTryHRCouonterAttack_GSNotifyTickCS");
//static_assert(offsetof(BANS_GSTryHRCouonterAttack_GSNotifyTickCS, NotifyParam) == 0x000000, "Member 'BANS_GSTryHRCouonterAttack_GSNotifyTickCS::NotifyParam' has a wrong offset!");
//static_assert(offsetof(BANS_GSTryHRCouonterAttack_GSNotifyTickCS, FrameDeltaTime) == 0x000040, "Member 'BANS_GSTryHRCouonterAttack_GSNotifyTickCS::FrameDeltaTime' has a wrong offset!");

// Function b1-Managed.BUAnimHumanoidCS_LinkedInstanceBase.BlueprintThreadSafeUpdateAnimation
// 0x0004 (0x0004 - 0x0000)
struct BUAnimHumanoidCS_LinkedInstanceBase_BlueprintThreadSafeUpdateAnimation final
{
public:
	float                                         DeltaTime;                                         // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
//static_assert(alignof(BUAnimHumanoidCS_LinkedInstanceBase_BlueprintThreadSafeUpdateAnimation) == 0x000004, "Wrong alignment on BUAnimHumanoidCS_LinkedInstanceBase_BlueprintThreadSafeUpdateAnimation");
//static_assert(sizeof(BUAnimHumanoidCS_LinkedInstanceBase_BlueprintThreadSafeUpdateAnimation) == 0x000004, "Wrong size on BUAnimHumanoidCS_LinkedInstanceBase_BlueprintThreadSafeUpdateAnimation");
//static_assert(offsetof(BUAnimHumanoidCS_LinkedInstanceBase_BlueprintThreadSafeUpdateAnimation, DeltaTime) == 0x000000, "Member 'BUAnimHumanoidCS_LinkedInstanceBase_BlueprintThreadSafeUpdateAnimation::DeltaTime' has a wrong offset!");

// Function b1-Managed.BUAnimHumanoidCS_LinkedInstanceBase.BlueprintUpdateAnimation
// 0x0004 (0x0004 - 0x0000)
struct BUAnimHumanoidCS_LinkedInstanceBase_BlueprintUpdateAnimation final
{
public:
	float                                         DeltaTimeX;                                        // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
//static_assert(alignof(BUAnimHumanoidCS_LinkedInstanceBase_BlueprintUpdateAnimation) == 0x000004, "Wrong alignment on BUAnimHumanoidCS_LinkedInstanceBase_BlueprintUpdateAnimation");
//static_assert(sizeof(BUAnimHumanoidCS_LinkedInstanceBase_BlueprintUpdateAnimation) == 0x000004, "Wrong size on BUAnimHumanoidCS_LinkedInstanceBase_BlueprintUpdateAnimation");
//static_assert(offsetof(BUAnimHumanoidCS_LinkedInstanceBase_BlueprintUpdateAnimation, DeltaTimeX) == 0x000000, "Member 'BUAnimHumanoidCS_LinkedInstanceBase_BlueprintUpdateAnimation::DeltaTimeX' has a wrong offset!");

// Function b1-Managed.BANS_LifeSavingHairBlocking.GSNotifyBeginCS
// 0x0048 (0x0048 - 0x0000)
struct BANS_LifeSavingHairBlocking_GSNotifyBeginCS final
{
public:
	struct FUStGSNotifyParam                      NotifyParam;                                       // 0x0000(0x0040)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
	float                                         TotalDuration;                                     // 0x0040(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
//static_assert(alignof(BANS_LifeSavingHairBlocking_GSNotifyBeginCS) == 0x000008, "Wrong alignment on BANS_LifeSavingHairBlocking_GSNotifyBeginCS");
//static_assert(sizeof(BANS_LifeSavingHairBlocking_GSNotifyBeginCS) == 0x000048, "Wrong size on BANS_LifeSavingHairBlocking_GSNotifyBeginCS");
//static_assert(offsetof(BANS_LifeSavingHairBlocking_GSNotifyBeginCS, NotifyParam) == 0x000000, "Member 'BANS_LifeSavingHairBlocking_GSNotifyBeginCS::NotifyParam' has a wrong offset!");
//static_assert(offsetof(BANS_LifeSavingHairBlocking_GSNotifyBeginCS, TotalDuration) == 0x000040, "Member 'BANS_LifeSavingHairBlocking_GSNotifyBeginCS::TotalDuration' has a wrong offset!");

// Function b1-Managed.BANS_LifeSavingHairBlocking.GSNotifyEndCS
// 0x0040 (0x0040 - 0x0000)
struct BANS_LifeSavingHairBlocking_GSNotifyEndCS final
{
public:
	struct FUStGSNotifyParam                      NotifyParam;                                       // 0x0000(0x0040)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
//static_assert(alignof(BANS_LifeSavingHairBlocking_GSNotifyEndCS) == 0x000008, "Wrong alignment on BANS_LifeSavingHairBlocking_GSNotifyEndCS");
//static_assert(sizeof(BANS_LifeSavingHairBlocking_GSNotifyEndCS) == 0x000040, "Wrong size on BANS_LifeSavingHairBlocking_GSNotifyEndCS");
//static_assert(offsetof(BANS_LifeSavingHairBlocking_GSNotifyEndCS, NotifyParam) == 0x000000, "Member 'BANS_LifeSavingHairBlocking_GSNotifyEndCS::NotifyParam' has a wrong offset!");

// Function b1-Managed.BANS_LifeSavingHairWindow.GSNotifyBeginCS
// 0x0048 (0x0048 - 0x0000)
struct BANS_LifeSavingHairWindow_GSNotifyBeginCS final
{
public:
	struct FUStGSNotifyParam                      NotifyParam;                                       // 0x0000(0x0040)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
	float                                         TotalDuration;                                     // 0x0040(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
//static_assert(alignof(BANS_LifeSavingHairWindow_GSNotifyBeginCS) == 0x000008, "Wrong alignment on BANS_LifeSavingHairWindow_GSNotifyBeginCS");
//static_assert(sizeof(BANS_LifeSavingHairWindow_GSNotifyBeginCS) == 0x000048, "Wrong size on BANS_LifeSavingHairWindow_GSNotifyBeginCS");
//static_assert(offsetof(BANS_LifeSavingHairWindow_GSNotifyBeginCS, NotifyParam) == 0x000000, "Member 'BANS_LifeSavingHairWindow_GSNotifyBeginCS::NotifyParam' has a wrong offset!");
//static_assert(offsetof(BANS_LifeSavingHairWindow_GSNotifyBeginCS, TotalDuration) == 0x000040, "Member 'BANS_LifeSavingHairWindow_GSNotifyBeginCS::TotalDuration' has a wrong offset!");

// Function b1-Managed.BANS_LifeSavingHairWindow.GSNotifyEndCS
// 0x0040 (0x0040 - 0x0000)
struct BANS_LifeSavingHairWindow_GSNotifyEndCS final
{
public:
	struct FUStGSNotifyParam                      NotifyParam;                                       // 0x0000(0x0040)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
//static_assert(alignof(BANS_LifeSavingHairWindow_GSNotifyEndCS) == 0x000008, "Wrong alignment on BANS_LifeSavingHairWindow_GSNotifyEndCS");
//static_assert(sizeof(BANS_LifeSavingHairWindow_GSNotifyEndCS) == 0x000040, "Wrong size on BANS_LifeSavingHairWindow_GSNotifyEndCS");
//static_assert(offsetof(BANS_LifeSavingHairWindow_GSNotifyEndCS, NotifyParam) == 0x000000, "Member 'BANS_LifeSavingHairWindow_GSNotifyEndCS::NotifyParam' has a wrong offset!");

// Function b1-Managed.GSEQG_AreaPointGenerator.DoItemGenerationCS
// 0x0010 (0x0010 - 0x0000)
struct GSEQG_AreaPointGenerator_DoItemGenerationCS final
{
public:
	TArray<struct FVector>                        ContextLocations;                                  // 0x0000(0x0010)(ConstParm, Parm, OutParm, ReferenceParm)
};
//static_assert(alignof(GSEQG_AreaPointGenerator_DoItemGenerationCS) == 0x000008, "Wrong alignment on GSEQG_AreaPointGenerator_DoItemGenerationCS");
//static_assert(sizeof(GSEQG_AreaPointGenerator_DoItemGenerationCS) == 0x000010, "Wrong size on GSEQG_AreaPointGenerator_DoItemGenerationCS");
//static_assert(offsetof(GSEQG_AreaPointGenerator_DoItemGenerationCS, ContextLocations) == 0x000000, "Member 'GSEQG_AreaPointGenerator_DoItemGenerationCS::ContextLocations' has a wrong offset!");

// Function b1-Managed.BUAnimHumanoidCS_SpecialMove.UpdateGroundAdditive
// 0x0020 (0x0020 - 0x0000)
struct BUAnimHumanoidCS_SpecialMove_UpdateGroundAdditive final
{
public:
	struct FAnimUpdateContext                     Context;                                           // 0x0000(0x0010)(Parm, OutParm, ReferenceParm)
	struct FAnimNodeReference                     Node;                                              // 0x0010(0x0010)(Parm, OutParm, ReferenceParm, NoDestructor)
};
//static_assert(alignof(BUAnimHumanoidCS_SpecialMove_UpdateGroundAdditive) == 0x000008, "Wrong alignment on BUAnimHumanoidCS_SpecialMove_UpdateGroundAdditive");
//static_assert(sizeof(BUAnimHumanoidCS_SpecialMove_UpdateGroundAdditive) == 0x000020, "Wrong size on BUAnimHumanoidCS_SpecialMove_UpdateGroundAdditive");
//static_assert(offsetof(BUAnimHumanoidCS_SpecialMove_UpdateGroundAdditive, Context) == 0x000000, "Member 'BUAnimHumanoidCS_SpecialMove_UpdateGroundAdditive::Context' has a wrong offset!");
//static_assert(offsetof(BUAnimHumanoidCS_SpecialMove_UpdateGroundAdditive, Node) == 0x000010, "Member 'BUAnimHumanoidCS_SpecialMove_UpdateGroundAdditive::Node' has a wrong offset!");

// Function b1-Managed.BUAnimHumanoidCS_SpecialMove.UpdateGroundJump
// 0x0020 (0x0020 - 0x0000)
struct BUAnimHumanoidCS_SpecialMove_UpdateGroundJump final
{
public:
	struct FAnimUpdateContext                     Context;                                           // 0x0000(0x0010)(Parm, OutParm, ReferenceParm)
	struct FAnimNodeReference                     Node;                                              // 0x0010(0x0010)(Parm, OutParm, ReferenceParm, NoDestructor)
};
//static_assert(alignof(BUAnimHumanoidCS_SpecialMove_UpdateGroundJump) == 0x000008, "Wrong alignment on BUAnimHumanoidCS_SpecialMove_UpdateGroundJump");
//static_assert(sizeof(BUAnimHumanoidCS_SpecialMove_UpdateGroundJump) == 0x000020, "Wrong size on BUAnimHumanoidCS_SpecialMove_UpdateGroundJump");
//static_assert(offsetof(BUAnimHumanoidCS_SpecialMove_UpdateGroundJump, Context) == 0x000000, "Member 'BUAnimHumanoidCS_SpecialMove_UpdateGroundJump::Context' has a wrong offset!");
//static_assert(offsetof(BUAnimHumanoidCS_SpecialMove_UpdateGroundJump, Node) == 0x000010, "Member 'BUAnimHumanoidCS_SpecialMove_UpdateGroundJump::Node' has a wrong offset!");

// Function b1-Managed.BUAnimHumanoidCS_SpecialMove.GetAnimCloudLand
// 0x0008 (0x0008 - 0x0000)
struct BUAnimHumanoidCS_SpecialMove_GetAnimCloudLand final
{
public:
	class UAnimSequence*                          AnimCloudLand;                                     // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
//static_assert(alignof(BUAnimHumanoidCS_SpecialMove_GetAnimCloudLand) == 0x000008, "Wrong alignment on BUAnimHumanoidCS_SpecialMove_GetAnimCloudLand");
//static_assert(sizeof(BUAnimHumanoidCS_SpecialMove_GetAnimCloudLand) == 0x000008, "Wrong size on BUAnimHumanoidCS_SpecialMove_GetAnimCloudLand");
//static_assert(offsetof(BUAnimHumanoidCS_SpecialMove_GetAnimCloudLand, AnimCloudLand) == 0x000000, "Member 'BUAnimHumanoidCS_SpecialMove_GetAnimCloudLand::AnimCloudLand' has a wrong offset!");

// Function b1-Managed.BUAnimHumanoidCS_SpecialMove.SetupLandAnim
// 0x0020 (0x0020 - 0x0000)
struct BUAnimHumanoidCS_SpecialMove_SetupLandAnim final
{
public:
	struct FAnimUpdateContext                     Context;                                           // 0x0000(0x0010)(Parm, OutParm, ReferenceParm)
	struct FAnimNodeReference                     Node;                                              // 0x0010(0x0010)(Parm, OutParm, ReferenceParm, NoDestructor)
};
//static_assert(alignof(BUAnimHumanoidCS_SpecialMove_SetupLandAnim) == 0x000008, "Wrong alignment on BUAnimHumanoidCS_SpecialMove_SetupLandAnim");
//static_assert(sizeof(BUAnimHumanoidCS_SpecialMove_SetupLandAnim) == 0x000020, "Wrong size on BUAnimHumanoidCS_SpecialMove_SetupLandAnim");
//static_assert(offsetof(BUAnimHumanoidCS_SpecialMove_SetupLandAnim, Context) == 0x000000, "Member 'BUAnimHumanoidCS_SpecialMove_SetupLandAnim::Context' has a wrong offset!");
//static_assert(offsetof(BUAnimHumanoidCS_SpecialMove_SetupLandAnim, Node) == 0x000010, "Member 'BUAnimHumanoidCS_SpecialMove_SetupLandAnim::Node' has a wrong offset!");

// Function b1-Managed.BANS_GSVigorKeyCache.GSNotifyBeginCS
// 0x0048 (0x0048 - 0x0000)
struct BANS_GSVigorKeyCache_GSNotifyBeginCS final
{
public:
	struct FUStGSNotifyParam                      NotifyParam;                                       // 0x0000(0x0040)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
	float                                         TotalDuration;                                     // 0x0040(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
//static_assert(alignof(BANS_GSVigorKeyCache_GSNotifyBeginCS) == 0x000008, "Wrong alignment on BANS_GSVigorKeyCache_GSNotifyBeginCS");
//static_assert(sizeof(BANS_GSVigorKeyCache_GSNotifyBeginCS) == 0x000048, "Wrong size on BANS_GSVigorKeyCache_GSNotifyBeginCS");
//static_assert(offsetof(BANS_GSVigorKeyCache_GSNotifyBeginCS, NotifyParam) == 0x000000, "Member 'BANS_GSVigorKeyCache_GSNotifyBeginCS::NotifyParam' has a wrong offset!");
//static_assert(offsetof(BANS_GSVigorKeyCache_GSNotifyBeginCS, TotalDuration) == 0x000040, "Member 'BANS_GSVigorKeyCache_GSNotifyBeginCS::TotalDuration' has a wrong offset!");

// Function b1-Managed.BANS_GSVigorWindow.GSNotifyBeginCS
// 0x0048 (0x0048 - 0x0000)
struct BANS_GSVigorWindow_GSNotifyBeginCS final
{
public:
	struct FUStGSNotifyParam                      NotifyParam;                                       // 0x0000(0x0040)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
	float                                         TotalDuration;                                     // 0x0040(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
//static_assert(alignof(BANS_GSVigorWindow_GSNotifyBeginCS) == 0x000008, "Wrong alignment on BANS_GSVigorWindow_GSNotifyBeginCS");
//static_assert(sizeof(BANS_GSVigorWindow_GSNotifyBeginCS) == 0x000048, "Wrong size on BANS_GSVigorWindow_GSNotifyBeginCS");
//static_assert(offsetof(BANS_GSVigorWindow_GSNotifyBeginCS, NotifyParam) == 0x000000, "Member 'BANS_GSVigorWindow_GSNotifyBeginCS::NotifyParam' has a wrong offset!");
//static_assert(offsetof(BANS_GSVigorWindow_GSNotifyBeginCS, TotalDuration) == 0x000040, "Member 'BANS_GSVigorWindow_GSNotifyBeginCS::TotalDuration' has a wrong offset!");

// Function b1-Managed.BANS_GSRotateWithCamFwd.GSNotifyBeginCS
// 0x0048 (0x0048 - 0x0000)
struct BANS_GSRotateWithCamFwd_GSNotifyBeginCS final
{
public:
	struct FUStGSNotifyParam                      NotifyParam;                                       // 0x0000(0x0040)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
	float                                         TotalDuration;                                     // 0x0040(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
//static_assert(alignof(BANS_GSRotateWithCamFwd_GSNotifyBeginCS) == 0x000008, "Wrong alignment on BANS_GSRotateWithCamFwd_GSNotifyBeginCS");
//static_assert(sizeof(BANS_GSRotateWithCamFwd_GSNotifyBeginCS) == 0x000048, "Wrong size on BANS_GSRotateWithCamFwd_GSNotifyBeginCS");
//static_assert(offsetof(BANS_GSRotateWithCamFwd_GSNotifyBeginCS, NotifyParam) == 0x000000, "Member 'BANS_GSRotateWithCamFwd_GSNotifyBeginCS::NotifyParam' has a wrong offset!");
//static_assert(offsetof(BANS_GSRotateWithCamFwd_GSNotifyBeginCS, TotalDuration) == 0x000040, "Member 'BANS_GSRotateWithCamFwd_GSNotifyBeginCS::TotalDuration' has a wrong offset!");

// Function b1-Managed.BANS_GSRotateWithCamFwd.GSNotifyTickCS
// 0x0048 (0x0048 - 0x0000)
struct BANS_GSRotateWithCamFwd_GSNotifyTickCS final
{
public:
	struct FUStGSNotifyParam                      NotifyParam;                                       // 0x0000(0x0040)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
	float                                         FrameDeltaTime;                                    // 0x0040(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
//static_assert(alignof(BANS_GSRotateWithCamFwd_GSNotifyTickCS) == 0x000008, "Wrong alignment on BANS_GSRotateWithCamFwd_GSNotifyTickCS");
//static_assert(sizeof(BANS_GSRotateWithCamFwd_GSNotifyTickCS) == 0x000048, "Wrong size on BANS_GSRotateWithCamFwd_GSNotifyTickCS");
//static_assert(offsetof(BANS_GSRotateWithCamFwd_GSNotifyTickCS, NotifyParam) == 0x000000, "Member 'BANS_GSRotateWithCamFwd_GSNotifyTickCS::NotifyParam' has a wrong offset!");
//static_assert(offsetof(BANS_GSRotateWithCamFwd_GSNotifyTickCS, FrameDeltaTime) == 0x000040, "Member 'BANS_GSRotateWithCamFwd_GSNotifyTickCS::FrameDeltaTime' has a wrong offset!");

// Function b1-Managed.BANS_GSRotateWithCamFwd.GSNotifyEndCS
// 0x0040 (0x0040 - 0x0000)
struct BANS_GSRotateWithCamFwd_GSNotifyEndCS final
{
public:
	struct FUStGSNotifyParam                      NotifyParam;                                       // 0x0000(0x0040)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
//static_assert(alignof(BANS_GSRotateWithCamFwd_GSNotifyEndCS) == 0x000008, "Wrong alignment on BANS_GSRotateWithCamFwd_GSNotifyEndCS");
//static_assert(sizeof(BANS_GSRotateWithCamFwd_GSNotifyEndCS) == 0x000040, "Wrong size on BANS_GSRotateWithCamFwd_GSNotifyEndCS");
//static_assert(offsetof(BANS_GSRotateWithCamFwd_GSNotifyEndCS, NotifyParam) == 0x000000, "Member 'BANS_GSRotateWithCamFwd_GSNotifyEndCS::NotifyParam' has a wrong offset!");

// Function b1-Managed.BANS_OnSpiderSkillEntangleStiffEnded.GSNotifyBeginCS
// 0x0048 (0x0048 - 0x0000)
struct BANS_OnSpiderSkillEntangleStiffEnded_GSNotifyBeginCS final
{
public:
	struct FUStGSNotifyParam                      NotifyParam;                                       // 0x0000(0x0040)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
	float                                         TotalDuration;                                     // 0x0040(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
//static_assert(alignof(BANS_OnSpiderSkillEntangleStiffEnded_GSNotifyBeginCS) == 0x000008, "Wrong alignment on BANS_OnSpiderSkillEntangleStiffEnded_GSNotifyBeginCS");
//static_assert(sizeof(BANS_OnSpiderSkillEntangleStiffEnded_GSNotifyBeginCS) == 0x000048, "Wrong size on BANS_OnSpiderSkillEntangleStiffEnded_GSNotifyBeginCS");
//static_assert(offsetof(BANS_OnSpiderSkillEntangleStiffEnded_GSNotifyBeginCS, NotifyParam) == 0x000000, "Member 'BANS_OnSpiderSkillEntangleStiffEnded_GSNotifyBeginCS::NotifyParam' has a wrong offset!");
//static_assert(offsetof(BANS_OnSpiderSkillEntangleStiffEnded_GSNotifyBeginCS, TotalDuration) == 0x000040, "Member 'BANS_OnSpiderSkillEntangleStiffEnded_GSNotifyBeginCS::TotalDuration' has a wrong offset!");

// Function b1-Managed.BANS_OnSpiderSkillEntangleStiffEnded.GSNotifyTickCS
// 0x0048 (0x0048 - 0x0000)
struct BANS_OnSpiderSkillEntangleStiffEnded_GSNotifyTickCS final
{
public:
	struct FUStGSNotifyParam                      NotifyParam;                                       // 0x0000(0x0040)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
	float                                         FrameDeltaTime;                                    // 0x0040(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
//static_assert(alignof(BANS_OnSpiderSkillEntangleStiffEnded_GSNotifyTickCS) == 0x000008, "Wrong alignment on BANS_OnSpiderSkillEntangleStiffEnded_GSNotifyTickCS");
//static_assert(sizeof(BANS_OnSpiderSkillEntangleStiffEnded_GSNotifyTickCS) == 0x000048, "Wrong size on BANS_OnSpiderSkillEntangleStiffEnded_GSNotifyTickCS");
//static_assert(offsetof(BANS_OnSpiderSkillEntangleStiffEnded_GSNotifyTickCS, NotifyParam) == 0x000000, "Member 'BANS_OnSpiderSkillEntangleStiffEnded_GSNotifyTickCS::NotifyParam' has a wrong offset!");
//static_assert(offsetof(BANS_OnSpiderSkillEntangleStiffEnded_GSNotifyTickCS, FrameDeltaTime) == 0x000040, "Member 'BANS_OnSpiderSkillEntangleStiffEnded_GSNotifyTickCS::FrameDeltaTime' has a wrong offset!");

// Function b1-Managed.BANS_OnSpiderSkillEntangleStiffEnded.GSNotifyEndCS
// 0x0040 (0x0040 - 0x0000)
struct BANS_OnSpiderSkillEntangleStiffEnded_GSNotifyEndCS final
{
public:
	struct FUStGSNotifyParam                      NotifyParam;                                       // 0x0000(0x0040)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
//static_assert(alignof(BANS_OnSpiderSkillEntangleStiffEnded_GSNotifyEndCS) == 0x000008, "Wrong alignment on BANS_OnSpiderSkillEntangleStiffEnded_GSNotifyEndCS");
//static_assert(sizeof(BANS_OnSpiderSkillEntangleStiffEnded_GSNotifyEndCS) == 0x000040, "Wrong size on BANS_OnSpiderSkillEntangleStiffEnded_GSNotifyEndCS");
//static_assert(offsetof(BANS_OnSpiderSkillEntangleStiffEnded_GSNotifyEndCS, NotifyParam) == 0x000000, "Member 'BANS_OnSpiderSkillEntangleStiffEnded_GSNotifyEndCS::NotifyParam' has a wrong offset!");

// Function b1-Managed.BANS_PlayWaterSplash.GSNotifyBeginCS
// 0x0048 (0x0048 - 0x0000)
struct BANS_PlayWaterSplash_GSNotifyBeginCS final
{
public:
	struct FUStGSNotifyParam                      NotifyParam;                                       // 0x0000(0x0040)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
	float                                         TotalDuration;                                     // 0x0040(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
//static_assert(alignof(BANS_PlayWaterSplash_GSNotifyBeginCS) == 0x000008, "Wrong alignment on BANS_PlayWaterSplash_GSNotifyBeginCS");
//static_assert(sizeof(BANS_PlayWaterSplash_GSNotifyBeginCS) == 0x000048, "Wrong size on BANS_PlayWaterSplash_GSNotifyBeginCS");
//static_assert(offsetof(BANS_PlayWaterSplash_GSNotifyBeginCS, NotifyParam) == 0x000000, "Member 'BANS_PlayWaterSplash_GSNotifyBeginCS::NotifyParam' has a wrong offset!");
//static_assert(offsetof(BANS_PlayWaterSplash_GSNotifyBeginCS, TotalDuration) == 0x000040, "Member 'BANS_PlayWaterSplash_GSNotifyBeginCS::TotalDuration' has a wrong offset!");

// Function b1-Managed.BANS_PlayWaterSplash.GSNotifyTickCS
// 0x0048 (0x0048 - 0x0000)
struct BANS_PlayWaterSplash_GSNotifyTickCS final
{
public:
	struct FUStGSNotifyParam                      NotifyParam;                                       // 0x0000(0x0040)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
	float                                         FrameDeltaTime;                                    // 0x0040(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
//static_assert(alignof(BANS_PlayWaterSplash_GSNotifyTickCS) == 0x000008, "Wrong alignment on BANS_PlayWaterSplash_GSNotifyTickCS");
//static_assert(sizeof(BANS_PlayWaterSplash_GSNotifyTickCS) == 0x000048, "Wrong size on BANS_PlayWaterSplash_GSNotifyTickCS");
//static_assert(offsetof(BANS_PlayWaterSplash_GSNotifyTickCS, NotifyParam) == 0x000000, "Member 'BANS_PlayWaterSplash_GSNotifyTickCS::NotifyParam' has a wrong offset!");
//static_assert(offsetof(BANS_PlayWaterSplash_GSNotifyTickCS, FrameDeltaTime) == 0x000040, "Member 'BANS_PlayWaterSplash_GSNotifyTickCS::FrameDeltaTime' has a wrong offset!");

// Function b1-Managed.BANS_PlayWaterSplash.GSNotifyEndCS
// 0x0040 (0x0040 - 0x0000)
struct BANS_PlayWaterSplash_GSNotifyEndCS final
{
public:
	struct FUStGSNotifyParam                      NotifyParam;                                       // 0x0000(0x0040)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
//static_assert(alignof(BANS_PlayWaterSplash_GSNotifyEndCS) == 0x000008, "Wrong alignment on BANS_PlayWaterSplash_GSNotifyEndCS");
//static_assert(sizeof(BANS_PlayWaterSplash_GSNotifyEndCS) == 0x000040, "Wrong size on BANS_PlayWaterSplash_GSNotifyEndCS");
//static_assert(offsetof(BANS_PlayWaterSplash_GSNotifyEndCS, NotifyParam) == 0x000000, "Member 'BANS_PlayWaterSplash_GSNotifyEndCS::NotifyParam' has a wrong offset!");

// Function b1-Managed.BGW_ILRuntimeCLRBinding.GenerateClrBindingCode_AutoTest
// 0x0004 (0x0004 - 0x0000)
struct BGW_ILRuntimeCLRBinding_GenerateClrBindingCode_AutoTest final
{
public:
	int32                                         bClrbinding;                                       // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
//static_assert(alignof(BGW_ILRuntimeCLRBinding_GenerateClrBindingCode_AutoTest) == 0x000004, "Wrong alignment on BGW_ILRuntimeCLRBinding_GenerateClrBindingCode_AutoTest");
//static_assert(sizeof(BGW_ILRuntimeCLRBinding_GenerateClrBindingCode_AutoTest) == 0x000004, "Wrong size on BGW_ILRuntimeCLRBinding_GenerateClrBindingCode_AutoTest");
//static_assert(offsetof(BGW_ILRuntimeCLRBinding_GenerateClrBindingCode_AutoTest, bClrbinding) == 0x000000, "Member 'BGW_ILRuntimeCLRBinding_GenerateClrBindingCode_AutoTest::bClrbinding' has a wrong offset!");

// Function b1-Managed.BANS_StopMontagePreLand.GSNotifyBeginCS
// 0x0048 (0x0048 - 0x0000)
struct BANS_StopMontagePreLand_GSNotifyBeginCS final
{
public:
	struct FUStGSNotifyParam                      NotifyParam;                                       // 0x0000(0x0040)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
	float                                         TotalDuration;                                     // 0x0040(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
//static_assert(alignof(BANS_StopMontagePreLand_GSNotifyBeginCS) == 0x000008, "Wrong alignment on BANS_StopMontagePreLand_GSNotifyBeginCS");
//static_assert(sizeof(BANS_StopMontagePreLand_GSNotifyBeginCS) == 0x000048, "Wrong size on BANS_StopMontagePreLand_GSNotifyBeginCS");
//static_assert(offsetof(BANS_StopMontagePreLand_GSNotifyBeginCS, NotifyParam) == 0x000000, "Member 'BANS_StopMontagePreLand_GSNotifyBeginCS::NotifyParam' has a wrong offset!");
//static_assert(offsetof(BANS_StopMontagePreLand_GSNotifyBeginCS, TotalDuration) == 0x000040, "Member 'BANS_StopMontagePreLand_GSNotifyBeginCS::TotalDuration' has a wrong offset!");

// Function b1-Managed.BANS_StopMontagePreLand.GSNotifyTickCS
// 0x0048 (0x0048 - 0x0000)
struct BANS_StopMontagePreLand_GSNotifyTickCS final
{
public:
	struct FUStGSNotifyParam                      NotifyParam;                                       // 0x0000(0x0040)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
	float                                         FrameDeltaTime;                                    // 0x0040(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
//static_assert(alignof(BANS_StopMontagePreLand_GSNotifyTickCS) == 0x000008, "Wrong alignment on BANS_StopMontagePreLand_GSNotifyTickCS");
//static_assert(sizeof(BANS_StopMontagePreLand_GSNotifyTickCS) == 0x000048, "Wrong size on BANS_StopMontagePreLand_GSNotifyTickCS");
//static_assert(offsetof(BANS_StopMontagePreLand_GSNotifyTickCS, NotifyParam) == 0x000000, "Member 'BANS_StopMontagePreLand_GSNotifyTickCS::NotifyParam' has a wrong offset!");
//static_assert(offsetof(BANS_StopMontagePreLand_GSNotifyTickCS, FrameDeltaTime) == 0x000040, "Member 'BANS_StopMontagePreLand_GSNotifyTickCS::FrameDeltaTime' has a wrong offset!");

// Function b1-Managed.BANS_StopMontagePreLand.GSNotifyEndCS
// 0x0040 (0x0040 - 0x0000)
struct BANS_StopMontagePreLand_GSNotifyEndCS final
{
public:
	struct FUStGSNotifyParam                      NotifyParam;                                       // 0x0000(0x0040)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
//static_assert(alignof(BANS_StopMontagePreLand_GSNotifyEndCS) == 0x000008, "Wrong alignment on BANS_StopMontagePreLand_GSNotifyEndCS");
//static_assert(sizeof(BANS_StopMontagePreLand_GSNotifyEndCS) == 0x000040, "Wrong size on BANS_StopMontagePreLand_GSNotifyEndCS");
//static_assert(offsetof(BANS_StopMontagePreLand_GSNotifyEndCS, NotifyParam) == 0x000000, "Member 'BANS_StopMontagePreLand_GSNotifyEndCS::NotifyParam' has a wrong offset!");

// Function b1-Managed.BANS_StopMontageWhenLand.GSNotifyBeginCS
// 0x0048 (0x0048 - 0x0000)
struct BANS_StopMontageWhenLand_GSNotifyBeginCS final
{
public:
	struct FUStGSNotifyParam                      NotifyParam;                                       // 0x0000(0x0040)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
	float                                         TotalDuration;                                     // 0x0040(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
//static_assert(alignof(BANS_StopMontageWhenLand_GSNotifyBeginCS) == 0x000008, "Wrong alignment on BANS_StopMontageWhenLand_GSNotifyBeginCS");
//static_assert(sizeof(BANS_StopMontageWhenLand_GSNotifyBeginCS) == 0x000048, "Wrong size on BANS_StopMontageWhenLand_GSNotifyBeginCS");
//static_assert(offsetof(BANS_StopMontageWhenLand_GSNotifyBeginCS, NotifyParam) == 0x000000, "Member 'BANS_StopMontageWhenLand_GSNotifyBeginCS::NotifyParam' has a wrong offset!");
//static_assert(offsetof(BANS_StopMontageWhenLand_GSNotifyBeginCS, TotalDuration) == 0x000040, "Member 'BANS_StopMontageWhenLand_GSNotifyBeginCS::TotalDuration' has a wrong offset!");

// Function b1-Managed.BANS_StopMontageWhenLand.GSNotifyTickCS
// 0x0048 (0x0048 - 0x0000)
struct BANS_StopMontageWhenLand_GSNotifyTickCS final
{
public:
	struct FUStGSNotifyParam                      NotifyParam;                                       // 0x0000(0x0040)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
	float                                         FrameDeltaTime;                                    // 0x0040(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
//static_assert(alignof(BANS_StopMontageWhenLand_GSNotifyTickCS) == 0x000008, "Wrong alignment on BANS_StopMontageWhenLand_GSNotifyTickCS");
//static_assert(sizeof(BANS_StopMontageWhenLand_GSNotifyTickCS) == 0x000048, "Wrong size on BANS_StopMontageWhenLand_GSNotifyTickCS");
//static_assert(offsetof(BANS_StopMontageWhenLand_GSNotifyTickCS, NotifyParam) == 0x000000, "Member 'BANS_StopMontageWhenLand_GSNotifyTickCS::NotifyParam' has a wrong offset!");
//static_assert(offsetof(BANS_StopMontageWhenLand_GSNotifyTickCS, FrameDeltaTime) == 0x000040, "Member 'BANS_StopMontageWhenLand_GSNotifyTickCS::FrameDeltaTime' has a wrong offset!");

// Function b1-Managed.BANS_StopMontageWhenLand.GSNotifyEndCS
// 0x0040 (0x0040 - 0x0000)
struct BANS_StopMontageWhenLand_GSNotifyEndCS final
{
public:
	struct FUStGSNotifyParam                      NotifyParam;                                       // 0x0000(0x0040)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
//static_assert(alignof(BANS_StopMontageWhenLand_GSNotifyEndCS) == 0x000008, "Wrong alignment on BANS_StopMontageWhenLand_GSNotifyEndCS");
//static_assert(sizeof(BANS_StopMontageWhenLand_GSNotifyEndCS) == 0x000040, "Wrong size on BANS_StopMontageWhenLand_GSNotifyEndCS");
//static_assert(offsetof(BANS_StopMontageWhenLand_GSNotifyEndCS, NotifyParam) == 0x000000, "Member 'BANS_StopMontageWhenLand_GSNotifyEndCS::NotifyParam' has a wrong offset!");

// Function b1-Managed.BED_BehaviorNode_BeAttackedNumFromSkill.GetNodeDescriptionInCS
// 0x0010 (0x0010 - 0x0000)
struct BED_BehaviorNode_BeAttackedNumFromSkill_GetNodeDescriptionInCS final
{
public:
	class FString                                 ReturnValue;                                       // 0x0000(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash)
};
//static_assert(alignof(BED_BehaviorNode_BeAttackedNumFromSkill_GetNodeDescriptionInCS) == 0x000008, "Wrong alignment on BED_BehaviorNode_BeAttackedNumFromSkill_GetNodeDescriptionInCS");
//static_assert(sizeof(BED_BehaviorNode_BeAttackedNumFromSkill_GetNodeDescriptionInCS) == 0x000010, "Wrong size on BED_BehaviorNode_BeAttackedNumFromSkill_GetNodeDescriptionInCS");
//static_assert(offsetof(BED_BehaviorNode_BeAttackedNumFromSkill_GetNodeDescriptionInCS, ReturnValue) == 0x000000, "Member 'BED_BehaviorNode_BeAttackedNumFromSkill_GetNodeDescriptionInCS::ReturnValue' has a wrong offset!");

// Function b1-Managed.BED_BehaviorNode_BeAttackedNumFromSkill.IsSupportViewType
// 0x0002 (0x0002 - 0x0000)
struct BED_BehaviorNode_BeAttackedNumFromSkill_IsSupportViewType final
{
public:
	ECalliopeViewType                             InViewType;                                        // 0x0000(0x0001)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         ReturnValue : 1;                                   // 0x0001(0x0001)(BitIndex: 0x00, PropSize: 0x0001 (Parm, OutParm, ReturnParm, NoDestructor, HasGetValueTypeHash))
};
//static_assert(alignof(BED_BehaviorNode_BeAttackedNumFromSkill_IsSupportViewType) == 0x000001, "Wrong alignment on BED_BehaviorNode_BeAttackedNumFromSkill_IsSupportViewType");
//static_assert(sizeof(BED_BehaviorNode_BeAttackedNumFromSkill_IsSupportViewType) == 0x000002, "Wrong size on BED_BehaviorNode_BeAttackedNumFromSkill_IsSupportViewType");
//static_assert(offsetof(BED_BehaviorNode_BeAttackedNumFromSkill_IsSupportViewType, InViewType) == 0x000000, "Member 'BED_BehaviorNode_BeAttackedNumFromSkill_IsSupportViewType::InViewType' has a wrong offset!");

// Function b1-Managed.BANS_Teleport.GSNotifyBeginCS
// 0x0048 (0x0048 - 0x0000)
struct BANS_Teleport_GSNotifyBeginCS final
{
public:
	struct FUStGSNotifyParam                      NotifyParam;                                       // 0x0000(0x0040)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
	float                                         TotalDuration;                                     // 0x0040(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
//static_assert(alignof(BANS_Teleport_GSNotifyBeginCS) == 0x000008, "Wrong alignment on BANS_Teleport_GSNotifyBeginCS");
//static_assert(sizeof(BANS_Teleport_GSNotifyBeginCS) == 0x000048, "Wrong size on BANS_Teleport_GSNotifyBeginCS");
//static_assert(offsetof(BANS_Teleport_GSNotifyBeginCS, NotifyParam) == 0x000000, "Member 'BANS_Teleport_GSNotifyBeginCS::NotifyParam' has a wrong offset!");
//static_assert(offsetof(BANS_Teleport_GSNotifyBeginCS, TotalDuration) == 0x000040, "Member 'BANS_Teleport_GSNotifyBeginCS::TotalDuration' has a wrong offset!");

// Function b1-Managed.BED_ProcessMachineNode_GroupStart.GetNodeDescriptionInCS
// 0x0010 (0x0010 - 0x0000)
struct BED_ProcessMachineNode_GroupStart_GetNodeDescriptionInCS final
{
public:
	class FString                                 ReturnValue;                                       // 0x0000(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash)
};
//static_assert(alignof(BED_ProcessMachineNode_GroupStart_GetNodeDescriptionInCS) == 0x000008, "Wrong alignment on BED_ProcessMachineNode_GroupStart_GetNodeDescriptionInCS");
//static_assert(sizeof(BED_ProcessMachineNode_GroupStart_GetNodeDescriptionInCS) == 0x000010, "Wrong size on BED_ProcessMachineNode_GroupStart_GetNodeDescriptionInCS");
//static_assert(offsetof(BED_ProcessMachineNode_GroupStart_GetNodeDescriptionInCS, ReturnValue) == 0x000000, "Member 'BED_ProcessMachineNode_GroupStart_GetNodeDescriptionInCS::ReturnValue' has a wrong offset!");

// Function b1-Managed.BANS_ToggleWeaponStatus.GSNotifyBeginCS
// 0x0048 (0x0048 - 0x0000)
struct BANS_ToggleWeaponStatus_GSNotifyBeginCS final
{
public:
	struct FUStGSNotifyParam                      NotifyParam;                                       // 0x0000(0x0040)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
	float                                         TotalDuration;                                     // 0x0040(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
//static_assert(alignof(BANS_ToggleWeaponStatus_GSNotifyBeginCS) == 0x000008, "Wrong alignment on BANS_ToggleWeaponStatus_GSNotifyBeginCS");
//static_assert(sizeof(BANS_ToggleWeaponStatus_GSNotifyBeginCS) == 0x000048, "Wrong size on BANS_ToggleWeaponStatus_GSNotifyBeginCS");
//static_assert(offsetof(BANS_ToggleWeaponStatus_GSNotifyBeginCS, NotifyParam) == 0x000000, "Member 'BANS_ToggleWeaponStatus_GSNotifyBeginCS::NotifyParam' has a wrong offset!");
//static_assert(offsetof(BANS_ToggleWeaponStatus_GSNotifyBeginCS, TotalDuration) == 0x000040, "Member 'BANS_ToggleWeaponStatus_GSNotifyBeginCS::TotalDuration' has a wrong offset!");

// Function b1-Managed.BANS_ToggleWeaponStatus.GSNotifyEndCS
// 0x0040 (0x0040 - 0x0000)
struct BANS_ToggleWeaponStatus_GSNotifyEndCS final
{
public:
	struct FUStGSNotifyParam                      NotifyParam;                                       // 0x0000(0x0040)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
//static_assert(alignof(BANS_ToggleWeaponStatus_GSNotifyEndCS) == 0x000008, "Wrong alignment on BANS_ToggleWeaponStatus_GSNotifyEndCS");
//static_assert(sizeof(BANS_ToggleWeaponStatus_GSNotifyEndCS) == 0x000040, "Wrong size on BANS_ToggleWeaponStatus_GSNotifyEndCS");
//static_assert(offsetof(BANS_ToggleWeaponStatus_GSNotifyEndCS, NotifyParam) == 0x000000, "Member 'BANS_ToggleWeaponStatus_GSNotifyEndCS::NotifyParam' has a wrong offset!");

// Function b1-Managed.BANS_TriggerBanTrans2DaSheng.GSNotifyBeginCS
// 0x0048 (0x0048 - 0x0000)
struct BANS_TriggerBanTrans2DaSheng_GSNotifyBeginCS final
{
public:
	struct FUStGSNotifyParam                      NotifyParam;                                       // 0x0000(0x0040)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
	float                                         TotalDuration;                                     // 0x0040(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
//static_assert(alignof(BANS_TriggerBanTrans2DaSheng_GSNotifyBeginCS) == 0x000008, "Wrong alignment on BANS_TriggerBanTrans2DaSheng_GSNotifyBeginCS");
//static_assert(sizeof(BANS_TriggerBanTrans2DaSheng_GSNotifyBeginCS) == 0x000048, "Wrong size on BANS_TriggerBanTrans2DaSheng_GSNotifyBeginCS");
//static_assert(offsetof(BANS_TriggerBanTrans2DaSheng_GSNotifyBeginCS, NotifyParam) == 0x000000, "Member 'BANS_TriggerBanTrans2DaSheng_GSNotifyBeginCS::NotifyParam' has a wrong offset!");
//static_assert(offsetof(BANS_TriggerBanTrans2DaSheng_GSNotifyBeginCS, TotalDuration) == 0x000040, "Member 'BANS_TriggerBanTrans2DaSheng_GSNotifyBeginCS::TotalDuration' has a wrong offset!");

// Function b1-Managed.BED_BehaviorNode_OnAllSummonBeKilled.GetNodeDescriptionInCS
// 0x0010 (0x0010 - 0x0000)
struct BED_BehaviorNode_OnAllSummonBeKilled_GetNodeDescriptionInCS final
{
public:
	class FString                                 ReturnValue;                                       // 0x0000(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash)
};
//static_assert(alignof(BED_BehaviorNode_OnAllSummonBeKilled_GetNodeDescriptionInCS) == 0x000008, "Wrong alignment on BED_BehaviorNode_OnAllSummonBeKilled_GetNodeDescriptionInCS");
//static_assert(sizeof(BED_BehaviorNode_OnAllSummonBeKilled_GetNodeDescriptionInCS) == 0x000010, "Wrong size on BED_BehaviorNode_OnAllSummonBeKilled_GetNodeDescriptionInCS");
//static_assert(offsetof(BED_BehaviorNode_OnAllSummonBeKilled_GetNodeDescriptionInCS, ReturnValue) == 0x000000, "Member 'BED_BehaviorNode_OnAllSummonBeKilled_GetNodeDescriptionInCS::ReturnValue' has a wrong offset!");

// Function b1-Managed.BED_BehaviorNode_OnAllSummonBeKilled.IsSupportViewType
// 0x0002 (0x0002 - 0x0000)
struct BED_BehaviorNode_OnAllSummonBeKilled_IsSupportViewType final
{
public:
	ECalliopeViewType                             InViewType;                                        // 0x0000(0x0001)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         ReturnValue : 1;                                   // 0x0001(0x0001)(BitIndex: 0x00, PropSize: 0x0001 (Parm, OutParm, ReturnParm, NoDestructor, HasGetValueTypeHash))
};
//static_assert(alignof(BED_BehaviorNode_OnAllSummonBeKilled_IsSupportViewType) == 0x000001, "Wrong alignment on BED_BehaviorNode_OnAllSummonBeKilled_IsSupportViewType");
//static_assert(sizeof(BED_BehaviorNode_OnAllSummonBeKilled_IsSupportViewType) == 0x000002, "Wrong size on BED_BehaviorNode_OnAllSummonBeKilled_IsSupportViewType");
//static_assert(offsetof(BED_BehaviorNode_OnAllSummonBeKilled_IsSupportViewType, InViewType) == 0x000000, "Member 'BED_BehaviorNode_OnAllSummonBeKilled_IsSupportViewType::InViewType' has a wrong offset!");

// Function b1-Managed.BGU_QuestActor.OnPropertyChanged
// 0x0020 (0x0020 - 0x0000)
struct BGU_QuestActor_OnPropertyChanged final
{
public:
	class FString                                 MemberName;                                        // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash)
	class FString                                 PropertyName;                                      // 0x0010(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash)
};
//static_assert(alignof(BGU_QuestActor_OnPropertyChanged) == 0x000008, "Wrong alignment on BGU_QuestActor_OnPropertyChanged");
//static_assert(sizeof(BGU_QuestActor_OnPropertyChanged) == 0x000020, "Wrong size on BGU_QuestActor_OnPropertyChanged");
//static_assert(offsetof(BGU_QuestActor_OnPropertyChanged, MemberName) == 0x000000, "Member 'BGU_QuestActor_OnPropertyChanged::MemberName' has a wrong offset!");
//static_assert(offsetof(BGU_QuestActor_OnPropertyChanged, PropertyName) == 0x000010, "Member 'BGU_QuestActor_OnPropertyChanged::PropertyName' has a wrong offset!");

// Function b1-Managed.BGU_QuestActor.ReceiveEndPlay
// 0x0001 (0x0001 - 0x0000)
struct BGU_QuestActor_ReceiveEndPlay final
{
public:
	EEndPlayReason                                EndPlayReason;                                     // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
//static_assert(alignof(BGU_QuestActor_ReceiveEndPlay) == 0x000001, "Wrong alignment on BGU_QuestActor_ReceiveEndPlay");
//static_assert(sizeof(BGU_QuestActor_ReceiveEndPlay) == 0x000001, "Wrong size on BGU_QuestActor_ReceiveEndPlay");
//static_assert(offsetof(BGU_QuestActor_ReceiveEndPlay, EndPlayReason) == 0x000000, "Member 'BGU_QuestActor_ReceiveEndPlay::EndPlayReason' has a wrong offset!");

// Function b1-Managed.BGU_QuestActor.OnCollisionBeginOverlap
// 0x0108 (0x0108 - 0x0000)
struct BGU_QuestActor_OnCollisionBeginOverlap final
{
public:
	class UPrimitiveComponent*                    OverlappedComponent;                               // 0x0000(0x0008)(ExportObject, Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class AActor*                                 OtherActor;                                        // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UPrimitiveComponent*                    OtherComp;                                         // 0x0010(0x0008)(ExportObject, Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         OtherBodyIndex;                                    // 0x0018(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         bFromSweep : 1;                                    // 0x001C(0x0001)(BitIndex: 0x00, PropSize: 0x0001 (Parm, NoDestructor, HasGetValueTypeHash))
	uint8                                         Pad_1D[0x3];                                       // 0x001D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FHitResult                             SweepResult;                                       // 0x0020(0x00E8)(Parm, IsPlainOldData, NoDestructor)
};
//static_assert(alignof(BGU_QuestActor_OnCollisionBeginOverlap) == 0x000008, "Wrong alignment on BGU_QuestActor_OnCollisionBeginOverlap");
//static_assert(sizeof(BGU_QuestActor_OnCollisionBeginOverlap) == 0x000108, "Wrong size on BGU_QuestActor_OnCollisionBeginOverlap");
//static_assert(offsetof(BGU_QuestActor_OnCollisionBeginOverlap, OverlappedComponent) == 0x000000, "Member 'BGU_QuestActor_OnCollisionBeginOverlap::OverlappedComponent' has a wrong offset!");
//static_assert(offsetof(BGU_QuestActor_OnCollisionBeginOverlap, OtherActor) == 0x000008, "Member 'BGU_QuestActor_OnCollisionBeginOverlap::OtherActor' has a wrong offset!");
//static_assert(offsetof(BGU_QuestActor_OnCollisionBeginOverlap, OtherComp) == 0x000010, "Member 'BGU_QuestActor_OnCollisionBeginOverlap::OtherComp' has a wrong offset!");
//static_assert(offsetof(BGU_QuestActor_OnCollisionBeginOverlap, OtherBodyIndex) == 0x000018, "Member 'BGU_QuestActor_OnCollisionBeginOverlap::OtherBodyIndex' has a wrong offset!");
//static_assert(offsetof(BGU_QuestActor_OnCollisionBeginOverlap, SweepResult) == 0x000020, "Member 'BGU_QuestActor_OnCollisionBeginOverlap::SweepResult' has a wrong offset!");

// Function b1-Managed.BGU_QuestActor.OnCollisionEndOverlap
// 0x0020 (0x0020 - 0x0000)
struct BGU_QuestActor_OnCollisionEndOverlap final
{
public:
	class UPrimitiveComponent*                    OverlappedComponent;                               // 0x0000(0x0008)(ExportObject, Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class AActor*                                 OtherActor;                                        // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UPrimitiveComponent*                    OtherComp;                                         // 0x0010(0x0008)(ExportObject, Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         OtherBodyIndex;                                    // 0x0018(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
//static_assert(alignof(BGU_QuestActor_OnCollisionEndOverlap) == 0x000008, "Wrong alignment on BGU_QuestActor_OnCollisionEndOverlap");
//static_assert(sizeof(BGU_QuestActor_OnCollisionEndOverlap) == 0x000020, "Wrong size on BGU_QuestActor_OnCollisionEndOverlap");
//static_assert(offsetof(BGU_QuestActor_OnCollisionEndOverlap, OverlappedComponent) == 0x000000, "Member 'BGU_QuestActor_OnCollisionEndOverlap::OverlappedComponent' has a wrong offset!");
//static_assert(offsetof(BGU_QuestActor_OnCollisionEndOverlap, OtherActor) == 0x000008, "Member 'BGU_QuestActor_OnCollisionEndOverlap::OtherActor' has a wrong offset!");
//static_assert(offsetof(BGU_QuestActor_OnCollisionEndOverlap, OtherComp) == 0x000010, "Member 'BGU_QuestActor_OnCollisionEndOverlap::OtherComp' has a wrong offset!");
//static_assert(offsetof(BGU_QuestActor_OnCollisionEndOverlap, OtherBodyIndex) == 0x000018, "Member 'BGU_QuestActor_OnCollisionEndOverlap::OtherBodyIndex' has a wrong offset!");

// Function b1-Managed.BANS_TriggerSealingSpell.GSNotifyBeginCS
// 0x0048 (0x0048 - 0x0000)
struct BANS_TriggerSealingSpell_GSNotifyBeginCS final
{
public:
	struct FUStGSNotifyParam                      NotifyParam;                                       // 0x0000(0x0040)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
	float                                         TotalDuration;                                     // 0x0040(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
//static_assert(alignof(BANS_TriggerSealingSpell_GSNotifyBeginCS) == 0x000008, "Wrong alignment on BANS_TriggerSealingSpell_GSNotifyBeginCS");
//static_assert(sizeof(BANS_TriggerSealingSpell_GSNotifyBeginCS) == 0x000048, "Wrong size on BANS_TriggerSealingSpell_GSNotifyBeginCS");
//static_assert(offsetof(BANS_TriggerSealingSpell_GSNotifyBeginCS, NotifyParam) == 0x000000, "Member 'BANS_TriggerSealingSpell_GSNotifyBeginCS::NotifyParam' has a wrong offset!");
//static_assert(offsetof(BANS_TriggerSealingSpell_GSNotifyBeginCS, TotalDuration) == 0x000040, "Member 'BANS_TriggerSealingSpell_GSNotifyBeginCS::TotalDuration' has a wrong offset!");

// Function b1-Managed.BANS_TriggerTrans2DaSheng.GSNotifyBeginCS
// 0x0048 (0x0048 - 0x0000)
struct BANS_TriggerTrans2DaSheng_GSNotifyBeginCS final
{
public:
	struct FUStGSNotifyParam                      NotifyParam;                                       // 0x0000(0x0040)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
	float                                         TotalDuration;                                     // 0x0040(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
//static_assert(alignof(BANS_TriggerTrans2DaSheng_GSNotifyBeginCS) == 0x000008, "Wrong alignment on BANS_TriggerTrans2DaSheng_GSNotifyBeginCS");
//static_assert(sizeof(BANS_TriggerTrans2DaSheng_GSNotifyBeginCS) == 0x000048, "Wrong size on BANS_TriggerTrans2DaSheng_GSNotifyBeginCS");
//static_assert(offsetof(BANS_TriggerTrans2DaSheng_GSNotifyBeginCS, NotifyParam) == 0x000000, "Member 'BANS_TriggerTrans2DaSheng_GSNotifyBeginCS::NotifyParam' has a wrong offset!");
//static_assert(offsetof(BANS_TriggerTrans2DaSheng_GSNotifyBeginCS, TotalDuration) == 0x000040, "Member 'BANS_TriggerTrans2DaSheng_GSNotifyBeginCS::TotalDuration' has a wrong offset!");

// Function b1-Managed.BANS_UnhideAndPlayAnim.GSNotifyBeginCS
// 0x0048 (0x0048 - 0x0000)
struct BANS_UnhideAndPlayAnim_GSNotifyBeginCS final
{
public:
	struct FUStGSNotifyParam                      NotifyParam;                                       // 0x0000(0x0040)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
	float                                         TotalDuration;                                     // 0x0040(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
//static_assert(alignof(BANS_UnhideAndPlayAnim_GSNotifyBeginCS) == 0x000008, "Wrong alignment on BANS_UnhideAndPlayAnim_GSNotifyBeginCS");
//static_assert(sizeof(BANS_UnhideAndPlayAnim_GSNotifyBeginCS) == 0x000048, "Wrong size on BANS_UnhideAndPlayAnim_GSNotifyBeginCS");
//static_assert(offsetof(BANS_UnhideAndPlayAnim_GSNotifyBeginCS, NotifyParam) == 0x000000, "Member 'BANS_UnhideAndPlayAnim_GSNotifyBeginCS::NotifyParam' has a wrong offset!");
//static_assert(offsetof(BANS_UnhideAndPlayAnim_GSNotifyBeginCS, TotalDuration) == 0x000040, "Member 'BANS_UnhideAndPlayAnim_GSNotifyBeginCS::TotalDuration' has a wrong offset!");

// Function b1-Managed.BANS_UnhideAndPlayAnim.GSNotifyEndCS
// 0x0040 (0x0040 - 0x0000)
struct BANS_UnhideAndPlayAnim_GSNotifyEndCS final
{
public:
	struct FUStGSNotifyParam                      NotifyParam;                                       // 0x0000(0x0040)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
//static_assert(alignof(BANS_UnhideAndPlayAnim_GSNotifyEndCS) == 0x000008, "Wrong alignment on BANS_UnhideAndPlayAnim_GSNotifyEndCS");
//static_assert(sizeof(BANS_UnhideAndPlayAnim_GSNotifyEndCS) == 0x000040, "Wrong size on BANS_UnhideAndPlayAnim_GSNotifyEndCS");
//static_assert(offsetof(BANS_UnhideAndPlayAnim_GSNotifyEndCS, NotifyParam) == 0x000000, "Member 'BANS_UnhideAndPlayAnim_GSNotifyEndCS::NotifyParam' has a wrong offset!");

// Function b1-Managed.BED_BehaviorNode_AMNotify.GetNodeDescriptionInCS
// 0x0010 (0x0010 - 0x0000)
struct BED_BehaviorNode_AMNotify_GetNodeDescriptionInCS final
{
public:
	class FString                                 ReturnValue;                                       // 0x0000(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash)
};
//static_assert(alignof(BED_BehaviorNode_AMNotify_GetNodeDescriptionInCS) == 0x000008, "Wrong alignment on BED_BehaviorNode_AMNotify_GetNodeDescriptionInCS");
//static_assert(sizeof(BED_BehaviorNode_AMNotify_GetNodeDescriptionInCS) == 0x000010, "Wrong size on BED_BehaviorNode_AMNotify_GetNodeDescriptionInCS");
//static_assert(offsetof(BED_BehaviorNode_AMNotify_GetNodeDescriptionInCS, ReturnValue) == 0x000000, "Member 'BED_BehaviorNode_AMNotify_GetNodeDescriptionInCS::ReturnValue' has a wrong offset!");

// Function b1-Managed.BED_BehaviorNode_AMNotify.IsSupportViewType
// 0x0002 (0x0002 - 0x0000)
struct BED_BehaviorNode_AMNotify_IsSupportViewType final
{
public:
	ECalliopeViewType                             InViewType;                                        // 0x0000(0x0001)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         ReturnValue : 1;                                   // 0x0001(0x0001)(BitIndex: 0x00, PropSize: 0x0001 (Parm, OutParm, ReturnParm, NoDestructor, HasGetValueTypeHash))
};
//static_assert(alignof(BED_BehaviorNode_AMNotify_IsSupportViewType) == 0x000001, "Wrong alignment on BED_BehaviorNode_AMNotify_IsSupportViewType");
//static_assert(sizeof(BED_BehaviorNode_AMNotify_IsSupportViewType) == 0x000002, "Wrong size on BED_BehaviorNode_AMNotify_IsSupportViewType");
//static_assert(offsetof(BED_BehaviorNode_AMNotify_IsSupportViewType, InViewType) == 0x000000, "Member 'BED_BehaviorNode_AMNotify_IsSupportViewType::InViewType' has a wrong offset!");

// Function b1-Managed.BAN_ExitPhasePerformance.bIsNativeBranchingPointCS
// 0x0001 (0x0001 - 0x0000)
struct BAN_ExitPhasePerformance_bIsNativeBranchingPointCS final
{
public:
	uint8                                         ReturnValue : 1;                                   // 0x0000(0x0001)(BitIndex: 0x00, PropSize: 0x0001 (Parm, OutParm, ReturnParm, NoDestructor, HasGetValueTypeHash))
};
//static_assert(alignof(BAN_ExitPhasePerformance_bIsNativeBranchingPointCS) == 0x000001, "Wrong alignment on BAN_ExitPhasePerformance_bIsNativeBranchingPointCS");
//static_assert(sizeof(BAN_ExitPhasePerformance_bIsNativeBranchingPointCS) == 0x000001, "Wrong size on BAN_ExitPhasePerformance_bIsNativeBranchingPointCS");

// Function b1-Managed.BAN_ExitPhasePerformance.GSNotifyCS
// 0x0040 (0x0040 - 0x0000)
struct BAN_ExitPhasePerformance_GSNotifyCS final
{
public:
	struct FUStGSNotifyParam                      NotifyParam;                                       // 0x0000(0x0040)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
//static_assert(alignof(BAN_ExitPhasePerformance_GSNotifyCS) == 0x000008, "Wrong alignment on BAN_ExitPhasePerformance_GSNotifyCS");
//static_assert(sizeof(BAN_ExitPhasePerformance_GSNotifyCS) == 0x000040, "Wrong size on BAN_ExitPhasePerformance_GSNotifyCS");
//static_assert(offsetof(BAN_ExitPhasePerformance_GSNotifyCS, NotifyParam) == 0x000000, "Member 'BAN_ExitPhasePerformance_GSNotifyCS::NotifyParam' has a wrong offset!");

// Function b1-Managed.BANS_GSTriggerTransEffect.GetSoftReferences
// 0x0010 (0x0010 - 0x0000)
struct BANS_GSTriggerTransEffect_GetSoftReferences final
{
public:
	TArray<struct FSoftObjectPath>                ReturnValue;                                       // 0x0000(0x0010)(Parm, OutParm, ReturnParm)
};
//static_assert(alignof(BANS_GSTriggerTransEffect_GetSoftReferences) == 0x000008, "Wrong alignment on BANS_GSTriggerTransEffect_GetSoftReferences");
//static_assert(sizeof(BANS_GSTriggerTransEffect_GetSoftReferences) == 0x000010, "Wrong size on BANS_GSTriggerTransEffect_GetSoftReferences");
//static_assert(offsetof(BANS_GSTriggerTransEffect_GetSoftReferences, ReturnValue) == 0x000000, "Member 'BANS_GSTriggerTransEffect_GetSoftReferences::ReturnValue' has a wrong offset!");

// Function b1-Managed.BANS_GSTriggerTransEffect.GSNotifyBeginCS
// 0x0048 (0x0048 - 0x0000)
struct BANS_GSTriggerTransEffect_GSNotifyBeginCS final
{
public:
	struct FUStGSNotifyParam                      NotifyParam;                                       // 0x0000(0x0040)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
	float                                         TotalDuration;                                     // 0x0040(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
//static_assert(alignof(BANS_GSTriggerTransEffect_GSNotifyBeginCS) == 0x000008, "Wrong alignment on BANS_GSTriggerTransEffect_GSNotifyBeginCS");
//static_assert(sizeof(BANS_GSTriggerTransEffect_GSNotifyBeginCS) == 0x000048, "Wrong size on BANS_GSTriggerTransEffect_GSNotifyBeginCS");
//static_assert(offsetof(BANS_GSTriggerTransEffect_GSNotifyBeginCS, NotifyParam) == 0x000000, "Member 'BANS_GSTriggerTransEffect_GSNotifyBeginCS::NotifyParam' has a wrong offset!");
//static_assert(offsetof(BANS_GSTriggerTransEffect_GSNotifyBeginCS, TotalDuration) == 0x000040, "Member 'BANS_GSTriggerTransEffect_GSNotifyBeginCS::TotalDuration' has a wrong offset!");

// Function b1-Managed.BAN_GSApplyEnvironmentMask.GSNotifyCS
// 0x0040 (0x0040 - 0x0000)
struct BAN_GSApplyEnvironmentMask_GSNotifyCS final
{
public:
	struct FUStGSNotifyParam                      NotifyParam;                                       // 0x0000(0x0040)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
//static_assert(alignof(BAN_GSApplyEnvironmentMask_GSNotifyCS) == 0x000008, "Wrong alignment on BAN_GSApplyEnvironmentMask_GSNotifyCS");
//static_assert(sizeof(BAN_GSApplyEnvironmentMask_GSNotifyCS) == 0x000040, "Wrong size on BAN_GSApplyEnvironmentMask_GSNotifyCS");
//static_assert(offsetof(BAN_GSApplyEnvironmentMask_GSNotifyCS, NotifyParam) == 0x000000, "Member 'BAN_GSApplyEnvironmentMask_GSNotifyCS::NotifyParam' has a wrong offset!");

// Function b1-Managed.BGUEnvironmentItemStateMachineActorBase.PlayAkEventWithDialogue
// 0x0018 (0x0018 - 0x0000)
struct BGUEnvironmentItemStateMachineActorBase_PlayAkEventWithDialogue final
{
public:
	class UAkComponent*                           AkComp;                                            // 0x0000(0x0008)(ExportObject, Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UAkAudioEvent*                          AkEvent;                                           // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         ReturnValue;                                       // 0x0010(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
//static_assert(alignof(BGUEnvironmentItemStateMachineActorBase_PlayAkEventWithDialogue) == 0x000008, "Wrong alignment on BGUEnvironmentItemStateMachineActorBase_PlayAkEventWithDialogue");
//static_assert(sizeof(BGUEnvironmentItemStateMachineActorBase_PlayAkEventWithDialogue) == 0x000018, "Wrong size on BGUEnvironmentItemStateMachineActorBase_PlayAkEventWithDialogue");
//static_assert(offsetof(BGUEnvironmentItemStateMachineActorBase_PlayAkEventWithDialogue, AkComp) == 0x000000, "Member 'BGUEnvironmentItemStateMachineActorBase_PlayAkEventWithDialogue::AkComp' has a wrong offset!");
//static_assert(offsetof(BGUEnvironmentItemStateMachineActorBase_PlayAkEventWithDialogue, AkEvent) == 0x000008, "Member 'BGUEnvironmentItemStateMachineActorBase_PlayAkEventWithDialogue::AkEvent' has a wrong offset!");
//static_assert(offsetof(BGUEnvironmentItemStateMachineActorBase_PlayAkEventWithDialogue, ReturnValue) == 0x000010, "Member 'BGUEnvironmentItemStateMachineActorBase_PlayAkEventWithDialogue::ReturnValue' has a wrong offset!");

// Function b1-Managed.BGUEnvironmentItemStateMachineActorBase.OnCollisionBeginOverlap
// 0x0008 (0x0008 - 0x0000)
struct BGUEnvironmentItemStateMachineActorBase_OnCollisionBeginOverlap final
{
public:
	class AActor*                                 OtherActor;                                        // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
//static_assert(alignof(BGUEnvironmentItemStateMachineActorBase_OnCollisionBeginOverlap) == 0x000008, "Wrong alignment on BGUEnvironmentItemStateMachineActorBase_OnCollisionBeginOverlap");
//static_assert(sizeof(BGUEnvironmentItemStateMachineActorBase_OnCollisionBeginOverlap) == 0x000008, "Wrong size on BGUEnvironmentItemStateMachineActorBase_OnCollisionBeginOverlap");
//static_assert(offsetof(BGUEnvironmentItemStateMachineActorBase_OnCollisionBeginOverlap, OtherActor) == 0x000000, "Member 'BGUEnvironmentItemStateMachineActorBase_OnCollisionBeginOverlap::OtherActor' has a wrong offset!");

// Function b1-Managed.BGUEnvironmentItemStateMachineActorBase.OnCollisionEndOverlap
// 0x0008 (0x0008 - 0x0000)
struct BGUEnvironmentItemStateMachineActorBase_OnCollisionEndOverlap final
{
public:
	class AActor*                                 OtherActor;                                        // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
//static_assert(alignof(BGUEnvironmentItemStateMachineActorBase_OnCollisionEndOverlap) == 0x000008, "Wrong alignment on BGUEnvironmentItemStateMachineActorBase_OnCollisionEndOverlap");
//static_assert(sizeof(BGUEnvironmentItemStateMachineActorBase_OnCollisionEndOverlap) == 0x000008, "Wrong size on BGUEnvironmentItemStateMachineActorBase_OnCollisionEndOverlap");
//static_assert(offsetof(BGUEnvironmentItemStateMachineActorBase_OnCollisionEndOverlap, OtherActor) == 0x000000, "Member 'BGUEnvironmentItemStateMachineActorBase_OnCollisionEndOverlap::OtherActor' has a wrong offset!");

// Function b1-Managed.BAN_GSCloudMoveAkEvent.GetSoftReferences
// 0x0010 (0x0010 - 0x0000)
struct BAN_GSCloudMoveAkEvent_GetSoftReferences final
{
public:
	TArray<struct FSoftObjectPath>                ReturnValue;                                       // 0x0000(0x0010)(Parm, OutParm, ReturnParm)
};
//static_assert(alignof(BAN_GSCloudMoveAkEvent_GetSoftReferences) == 0x000008, "Wrong alignment on BAN_GSCloudMoveAkEvent_GetSoftReferences");
//static_assert(sizeof(BAN_GSCloudMoveAkEvent_GetSoftReferences) == 0x000010, "Wrong size on BAN_GSCloudMoveAkEvent_GetSoftReferences");
//static_assert(offsetof(BAN_GSCloudMoveAkEvent_GetSoftReferences, ReturnValue) == 0x000000, "Member 'BAN_GSCloudMoveAkEvent_GetSoftReferences::ReturnValue' has a wrong offset!");

// Function b1-Managed.BAN_GSCloudMoveAkEvent.GSNotifyCS
// 0x0040 (0x0040 - 0x0000)
struct BAN_GSCloudMoveAkEvent_GSNotifyCS final
{
public:
	struct FUStGSNotifyParam                      NotifyParam;                                       // 0x0000(0x0040)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
//static_assert(alignof(BAN_GSCloudMoveAkEvent_GSNotifyCS) == 0x000008, "Wrong alignment on BAN_GSCloudMoveAkEvent_GSNotifyCS");
//static_assert(sizeof(BAN_GSCloudMoveAkEvent_GSNotifyCS) == 0x000040, "Wrong size on BAN_GSCloudMoveAkEvent_GSNotifyCS");
//static_assert(offsetof(BAN_GSCloudMoveAkEvent_GSNotifyCS, NotifyParam) == 0x000000, "Member 'BAN_GSCloudMoveAkEvent_GSNotifyCS::NotifyParam' has a wrong offset!");

// Function b1-Managed.BAN_GSDestroyProjectile_ExceptID.bIsNativeBranchingPointCS
// 0x0001 (0x0001 - 0x0000)
struct BAN_GSDestroyProjectile_ExceptID_bIsNativeBranchingPointCS final
{
public:
	uint8                                         ReturnValue : 1;                                   // 0x0000(0x0001)(BitIndex: 0x00, PropSize: 0x0001 (Parm, OutParm, ReturnParm, NoDestructor, HasGetValueTypeHash))
};
//static_assert(alignof(BAN_GSDestroyProjectile_ExceptID_bIsNativeBranchingPointCS) == 0x000001, "Wrong alignment on BAN_GSDestroyProjectile_ExceptID_bIsNativeBranchingPointCS");
//static_assert(sizeof(BAN_GSDestroyProjectile_ExceptID_bIsNativeBranchingPointCS) == 0x000001, "Wrong size on BAN_GSDestroyProjectile_ExceptID_bIsNativeBranchingPointCS");

// Function b1-Managed.BAN_GSDestroyProjectile_ExceptID.GSNotifyCS
// 0x0040 (0x0040 - 0x0000)
struct BAN_GSDestroyProjectile_ExceptID_GSNotifyCS final
{
public:
	struct FUStGSNotifyParam                      NotifyParam;                                       // 0x0000(0x0040)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
//static_assert(alignof(BAN_GSDestroyProjectile_ExceptID_GSNotifyCS) == 0x000008, "Wrong alignment on BAN_GSDestroyProjectile_ExceptID_GSNotifyCS");
//static_assert(sizeof(BAN_GSDestroyProjectile_ExceptID_GSNotifyCS) == 0x000040, "Wrong size on BAN_GSDestroyProjectile_ExceptID_GSNotifyCS");
//static_assert(offsetof(BAN_GSDestroyProjectile_ExceptID_GSNotifyCS, NotifyParam) == 0x000000, "Member 'BAN_GSDestroyProjectile_ExceptID_GSNotifyCS::NotifyParam' has a wrong offset!");

// Function b1-Managed.BANS_GSJumpReady.GSNotifyBeginCS
// 0x0048 (0x0048 - 0x0000)
struct BANS_GSJumpReady_GSNotifyBeginCS final
{
public:
	struct FUStGSNotifyParam                      NotifyParam;                                       // 0x0000(0x0040)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
	float                                         TotalDuration;                                     // 0x0040(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
//static_assert(alignof(BANS_GSJumpReady_GSNotifyBeginCS) == 0x000008, "Wrong alignment on BANS_GSJumpReady_GSNotifyBeginCS");
//static_assert(sizeof(BANS_GSJumpReady_GSNotifyBeginCS) == 0x000048, "Wrong size on BANS_GSJumpReady_GSNotifyBeginCS");
//static_assert(offsetof(BANS_GSJumpReady_GSNotifyBeginCS, NotifyParam) == 0x000000, "Member 'BANS_GSJumpReady_GSNotifyBeginCS::NotifyParam' has a wrong offset!");
//static_assert(offsetof(BANS_GSJumpReady_GSNotifyBeginCS, TotalDuration) == 0x000040, "Member 'BANS_GSJumpReady_GSNotifyBeginCS::TotalDuration' has a wrong offset!");

// Function b1-Managed.BANS_GSJumpReady.GSNotifyEndCS
// 0x0040 (0x0040 - 0x0000)
struct BANS_GSJumpReady_GSNotifyEndCS final
{
public:
	struct FUStGSNotifyParam                      NotifyParam;                                       // 0x0000(0x0040)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
//static_assert(alignof(BANS_GSJumpReady_GSNotifyEndCS) == 0x000008, "Wrong alignment on BANS_GSJumpReady_GSNotifyEndCS");
//static_assert(sizeof(BANS_GSJumpReady_GSNotifyEndCS) == 0x000040, "Wrong size on BANS_GSJumpReady_GSNotifyEndCS");
//static_assert(offsetof(BANS_GSJumpReady_GSNotifyEndCS, NotifyParam) == 0x000000, "Member 'BANS_GSJumpReady_GSNotifyEndCS::NotifyParam' has a wrong offset!");

// Function b1-Managed.BAN_GSMagicallyChangeFadeOut.GSNotifyCS
// 0x0040 (0x0040 - 0x0000)
struct BAN_GSMagicallyChangeFadeOut_GSNotifyCS final
{
public:
	struct FUStGSNotifyParam                      NotifyParam;                                       // 0x0000(0x0040)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
//static_assert(alignof(BAN_GSMagicallyChangeFadeOut_GSNotifyCS) == 0x000008, "Wrong alignment on BAN_GSMagicallyChangeFadeOut_GSNotifyCS");
//static_assert(sizeof(BAN_GSMagicallyChangeFadeOut_GSNotifyCS) == 0x000040, "Wrong size on BAN_GSMagicallyChangeFadeOut_GSNotifyCS");
//static_assert(offsetof(BAN_GSMagicallyChangeFadeOut_GSNotifyCS, NotifyParam) == 0x000000, "Member 'BAN_GSMagicallyChangeFadeOut_GSNotifyCS::NotifyParam' has a wrong offset!");

// Function b1-Managed.BAN_GSStopInteractTargetIdleFX.GSNotifyCS
// 0x0040 (0x0040 - 0x0000)
struct BAN_GSStopInteractTargetIdleFX_GSNotifyCS final
{
public:
	struct FUStGSNotifyParam                      NotifyParam;                                       // 0x0000(0x0040)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
//static_assert(alignof(BAN_GSStopInteractTargetIdleFX_GSNotifyCS) == 0x000008, "Wrong alignment on BAN_GSStopInteractTargetIdleFX_GSNotifyCS");
//static_assert(sizeof(BAN_GSStopInteractTargetIdleFX_GSNotifyCS) == 0x000040, "Wrong size on BAN_GSStopInteractTargetIdleFX_GSNotifyCS");
//static_assert(offsetof(BAN_GSStopInteractTargetIdleFX_GSNotifyCS, NotifyParam) == 0x000000, "Member 'BAN_GSStopInteractTargetIdleFX_GSNotifyCS::NotifyParam' has a wrong offset!");

// Function b1-Managed.BAN_GSFinishMedicineTalkAnim.bIsNativeBranchingPointCS
// 0x0001 (0x0001 - 0x0000)
struct BAN_GSFinishMedicineTalkAnim_bIsNativeBranchingPointCS final
{
public:
	uint8                                         ReturnValue : 1;                                   // 0x0000(0x0001)(BitIndex: 0x00, PropSize: 0x0001 (Parm, OutParm, ReturnParm, NoDestructor, HasGetValueTypeHash))
};
//static_assert(alignof(BAN_GSFinishMedicineTalkAnim_bIsNativeBranchingPointCS) == 0x000001, "Wrong alignment on BAN_GSFinishMedicineTalkAnim_bIsNativeBranchingPointCS");
//static_assert(sizeof(BAN_GSFinishMedicineTalkAnim_bIsNativeBranchingPointCS) == 0x000001, "Wrong size on BAN_GSFinishMedicineTalkAnim_bIsNativeBranchingPointCS");

// Function b1-Managed.BAN_GSFinishMedicineTalkAnim.GSNotifyCS
// 0x0040 (0x0040 - 0x0000)
struct BAN_GSFinishMedicineTalkAnim_GSNotifyCS final
{
public:
	struct FUStGSNotifyParam                      NotifyParam;                                       // 0x0000(0x0040)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
//static_assert(alignof(BAN_GSFinishMedicineTalkAnim_GSNotifyCS) == 0x000008, "Wrong alignment on BAN_GSFinishMedicineTalkAnim_GSNotifyCS");
//static_assert(sizeof(BAN_GSFinishMedicineTalkAnim_GSNotifyCS) == 0x000040, "Wrong size on BAN_GSFinishMedicineTalkAnim_GSNotifyCS");
//static_assert(offsetof(BAN_GSFinishMedicineTalkAnim_GSNotifyCS, NotifyParam) == 0x000000, "Member 'BAN_GSFinishMedicineTalkAnim_GSNotifyCS::NotifyParam' has a wrong offset!");

// Function b1-Managed.BAN_GSItemTeleportTriggerPrepare.bIsNativeBranchingPointCS
// 0x0001 (0x0001 - 0x0000)
struct BAN_GSItemTeleportTriggerPrepare_bIsNativeBranchingPointCS final
{
public:
	uint8                                         ReturnValue : 1;                                   // 0x0000(0x0001)(BitIndex: 0x00, PropSize: 0x0001 (Parm, OutParm, ReturnParm, NoDestructor, HasGetValueTypeHash))
};
//static_assert(alignof(BAN_GSItemTeleportTriggerPrepare_bIsNativeBranchingPointCS) == 0x000001, "Wrong alignment on BAN_GSItemTeleportTriggerPrepare_bIsNativeBranchingPointCS");
//static_assert(sizeof(BAN_GSItemTeleportTriggerPrepare_bIsNativeBranchingPointCS) == 0x000001, "Wrong size on BAN_GSItemTeleportTriggerPrepare_bIsNativeBranchingPointCS");

// Function b1-Managed.BAN_GSItemTeleportTriggerPrepare.GSNotifyCS
// 0x0040 (0x0040 - 0x0000)
struct BAN_GSItemTeleportTriggerPrepare_GSNotifyCS final
{
public:
	struct FUStGSNotifyParam                      NotifyParam;                                       // 0x0000(0x0040)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
//static_assert(alignof(BAN_GSItemTeleportTriggerPrepare_GSNotifyCS) == 0x000008, "Wrong alignment on BAN_GSItemTeleportTriggerPrepare_GSNotifyCS");
//static_assert(sizeof(BAN_GSItemTeleportTriggerPrepare_GSNotifyCS) == 0x000040, "Wrong size on BAN_GSItemTeleportTriggerPrepare_GSNotifyCS");
//static_assert(offsetof(BAN_GSItemTeleportTriggerPrepare_GSNotifyCS, NotifyParam) == 0x000000, "Member 'BAN_GSItemTeleportTriggerPrepare_GSNotifyCS::NotifyParam' has a wrong offset!");

// Function b1-Managed.BAN_InteractTriggerFinish.bIsNativeBranchingPointCS
// 0x0001 (0x0001 - 0x0000)
struct BAN_InteractTriggerFinish_bIsNativeBranchingPointCS final
{
public:
	uint8                                         ReturnValue : 1;                                   // 0x0000(0x0001)(BitIndex: 0x00, PropSize: 0x0001 (Parm, OutParm, ReturnParm, NoDestructor, HasGetValueTypeHash))
};
//static_assert(alignof(BAN_InteractTriggerFinish_bIsNativeBranchingPointCS) == 0x000001, "Wrong alignment on BAN_InteractTriggerFinish_bIsNativeBranchingPointCS");
//static_assert(sizeof(BAN_InteractTriggerFinish_bIsNativeBranchingPointCS) == 0x000001, "Wrong size on BAN_InteractTriggerFinish_bIsNativeBranchingPointCS");

// Function b1-Managed.BAN_InteractTriggerFinish.GSNotifyCS
// 0x0040 (0x0040 - 0x0000)
struct BAN_InteractTriggerFinish_GSNotifyCS final
{
public:
	struct FUStGSNotifyParam                      NotifyParam;                                       // 0x0000(0x0040)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
//static_assert(alignof(BAN_InteractTriggerFinish_GSNotifyCS) == 0x000008, "Wrong alignment on BAN_InteractTriggerFinish_GSNotifyCS");
//static_assert(sizeof(BAN_InteractTriggerFinish_GSNotifyCS) == 0x000040, "Wrong size on BAN_InteractTriggerFinish_GSNotifyCS");
//static_assert(offsetof(BAN_InteractTriggerFinish_GSNotifyCS, NotifyParam) == 0x000000, "Member 'BAN_InteractTriggerFinish_GSNotifyCS::NotifyParam' has a wrong offset!");

// Function b1-Managed.BAN_GSIGuideRebirthFinish.bIsNativeBranchingPointCS
// 0x0001 (0x0001 - 0x0000)
struct BAN_GSIGuideRebirthFinish_bIsNativeBranchingPointCS final
{
public:
	uint8                                         ReturnValue : 1;                                   // 0x0000(0x0001)(BitIndex: 0x00, PropSize: 0x0001 (Parm, OutParm, ReturnParm, NoDestructor, HasGetValueTypeHash))
};
//static_assert(alignof(BAN_GSIGuideRebirthFinish_bIsNativeBranchingPointCS) == 0x000001, "Wrong alignment on BAN_GSIGuideRebirthFinish_bIsNativeBranchingPointCS");
//static_assert(sizeof(BAN_GSIGuideRebirthFinish_bIsNativeBranchingPointCS) == 0x000001, "Wrong size on BAN_GSIGuideRebirthFinish_bIsNativeBranchingPointCS");

// Function b1-Managed.BAN_GSIGuideRebirthFinish.GSNotifyCS
// 0x0040 (0x0040 - 0x0000)
struct BAN_GSIGuideRebirthFinish_GSNotifyCS final
{
public:
	struct FUStGSNotifyParam                      NotifyParam;                                       // 0x0000(0x0040)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
//static_assert(alignof(BAN_GSIGuideRebirthFinish_GSNotifyCS) == 0x000008, "Wrong alignment on BAN_GSIGuideRebirthFinish_GSNotifyCS");
//static_assert(sizeof(BAN_GSIGuideRebirthFinish_GSNotifyCS) == 0x000040, "Wrong size on BAN_GSIGuideRebirthFinish_GSNotifyCS");
//static_assert(offsetof(BAN_GSIGuideRebirthFinish_GSNotifyCS, NotifyParam) == 0x000000, "Member 'BAN_GSIGuideRebirthFinish_GSNotifyCS::NotifyParam' has a wrong offset!");

// Function b1-Managed.BSN_MediaPlay.GetDisplayName
// 0x0010 (0x0010 - 0x0000)
struct BSN_MediaPlay_GetDisplayName final
{
public:
	class FString                                 ReturnValue;                                       // 0x0000(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash)
};
//static_assert(alignof(BSN_MediaPlay_GetDisplayName) == 0x000008, "Wrong alignment on BSN_MediaPlay_GetDisplayName");
//static_assert(sizeof(BSN_MediaPlay_GetDisplayName) == 0x000010, "Wrong size on BSN_MediaPlay_GetDisplayName");
//static_assert(offsetof(BSN_MediaPlay_GetDisplayName, ReturnValue) == 0x000000, "Member 'BSN_MediaPlay_GetDisplayName::ReturnValue' has a wrong offset!");

// Function b1-Managed.BSN_MediaPlay.OnNotify
// 0x0010 (0x0010 - 0x0000)
struct BSN_MediaPlay_OnNotify final
{
public:
	class UCalliopeLevelSequencePlayer*           Player;                                            // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         InStatus;                                          // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         bInBackwards : 1;                                  // 0x000C(0x0001)(BitIndex: 0x00, PropSize: 0x0001 (Parm, NoDestructor, HasGetValueTypeHash))
};
//static_assert(alignof(BSN_MediaPlay_OnNotify) == 0x000008, "Wrong alignment on BSN_MediaPlay_OnNotify");
//static_assert(sizeof(BSN_MediaPlay_OnNotify) == 0x000010, "Wrong size on BSN_MediaPlay_OnNotify");
//static_assert(offsetof(BSN_MediaPlay_OnNotify, Player) == 0x000000, "Member 'BSN_MediaPlay_OnNotify::Player' has a wrong offset!");
//static_assert(offsetof(BSN_MediaPlay_OnNotify, InStatus) == 0x000008, "Member 'BSN_MediaPlay_OnNotify::InStatus' has a wrong offset!");

// Function b1-Managed.BAN_GSItemTeleportTrigger.bIsNativeBranchingPointCS
// 0x0001 (0x0001 - 0x0000)
struct BAN_GSItemTeleportTrigger_bIsNativeBranchingPointCS final
{
public:
	uint8                                         ReturnValue : 1;                                   // 0x0000(0x0001)(BitIndex: 0x00, PropSize: 0x0001 (Parm, OutParm, ReturnParm, NoDestructor, HasGetValueTypeHash))
};
//static_assert(alignof(BAN_GSItemTeleportTrigger_bIsNativeBranchingPointCS) == 0x000001, "Wrong alignment on BAN_GSItemTeleportTrigger_bIsNativeBranchingPointCS");
//static_assert(sizeof(BAN_GSItemTeleportTrigger_bIsNativeBranchingPointCS) == 0x000001, "Wrong size on BAN_GSItemTeleportTrigger_bIsNativeBranchingPointCS");

// Function b1-Managed.BAN_GSItemTeleportTrigger.GSNotifyCS
// 0x0040 (0x0040 - 0x0000)
struct BAN_GSItemTeleportTrigger_GSNotifyCS final
{
public:
	struct FUStGSNotifyParam                      NotifyParam;                                       // 0x0000(0x0040)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
//static_assert(alignof(BAN_GSItemTeleportTrigger_GSNotifyCS) == 0x000008, "Wrong alignment on BAN_GSItemTeleportTrigger_GSNotifyCS");
//static_assert(sizeof(BAN_GSItemTeleportTrigger_GSNotifyCS) == 0x000040, "Wrong size on BAN_GSItemTeleportTrigger_GSNotifyCS");
//static_assert(offsetof(BAN_GSItemTeleportTrigger_GSNotifyCS, NotifyParam) == 0x000000, "Member 'BAN_GSItemTeleportTrigger_GSNotifyCS::NotifyParam' has a wrong offset!");

// Function b1-Managed.BAN_GSRecreateClothing.GSNotifyCS
// 0x0040 (0x0040 - 0x0000)
struct BAN_GSRecreateClothing_GSNotifyCS final
{
public:
	struct FUStGSNotifyParam                      NotifyParam;                                       // 0x0000(0x0040)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
//static_assert(alignof(BAN_GSRecreateClothing_GSNotifyCS) == 0x000008, "Wrong alignment on BAN_GSRecreateClothing_GSNotifyCS");
//static_assert(sizeof(BAN_GSRecreateClothing_GSNotifyCS) == 0x000040, "Wrong size on BAN_GSRecreateClothing_GSNotifyCS");
//static_assert(offsetof(BAN_GSRecreateClothing_GSNotifyCS, NotifyParam) == 0x000000, "Member 'BAN_GSRecreateClothing_GSNotifyCS::NotifyParam' has a wrong offset!");

// Function b1-Managed.BAN_GSSimulatePhysics.GSNotifyCS
// 0x0040 (0x0040 - 0x0000)
struct BAN_GSSimulatePhysics_GSNotifyCS final
{
public:
	struct FUStGSNotifyParam                      NotifyParam;                                       // 0x0000(0x0040)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
//static_assert(alignof(BAN_GSSimulatePhysics_GSNotifyCS) == 0x000008, "Wrong alignment on BAN_GSSimulatePhysics_GSNotifyCS");
//static_assert(sizeof(BAN_GSSimulatePhysics_GSNotifyCS) == 0x000040, "Wrong size on BAN_GSSimulatePhysics_GSNotifyCS");
//static_assert(offsetof(BAN_GSSimulatePhysics_GSNotifyCS, NotifyParam) == 0x000000, "Member 'BAN_GSSimulatePhysics_GSNotifyCS::NotifyParam' has a wrong offset!");

// Function b1-Managed.BAN_GSTriggerWinePartner.bIsNativeBranchingPointCS
// 0x0001 (0x0001 - 0x0000)
struct BAN_GSTriggerWinePartner_bIsNativeBranchingPointCS final
{
public:
	uint8                                         ReturnValue : 1;                                   // 0x0000(0x0001)(BitIndex: 0x00, PropSize: 0x0001 (Parm, OutParm, ReturnParm, NoDestructor, HasGetValueTypeHash))
};
//static_assert(alignof(BAN_GSTriggerWinePartner_bIsNativeBranchingPointCS) == 0x000001, "Wrong alignment on BAN_GSTriggerWinePartner_bIsNativeBranchingPointCS");
//static_assert(sizeof(BAN_GSTriggerWinePartner_bIsNativeBranchingPointCS) == 0x000001, "Wrong size on BAN_GSTriggerWinePartner_bIsNativeBranchingPointCS");

// Function b1-Managed.BAN_GSTriggerWinePartner.GSNotifyCS
// 0x0040 (0x0040 - 0x0000)
struct BAN_GSTriggerWinePartner_GSNotifyCS final
{
public:
	struct FUStGSNotifyParam                      NotifyParam;                                       // 0x0000(0x0040)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
//static_assert(alignof(BAN_GSTriggerWinePartner_GSNotifyCS) == 0x000008, "Wrong alignment on BAN_GSTriggerWinePartner_GSNotifyCS");
//static_assert(sizeof(BAN_GSTriggerWinePartner_GSNotifyCS) == 0x000040, "Wrong size on BAN_GSTriggerWinePartner_GSNotifyCS");
//static_assert(offsetof(BAN_GSTriggerWinePartner_GSNotifyCS, NotifyParam) == 0x000000, "Member 'BAN_GSTriggerWinePartner_GSNotifyCS::NotifyParam' has a wrong offset!");

// Function b1-Managed.BAN_GainItem.GSNotifyCS
// 0x0040 (0x0040 - 0x0000)
struct BAN_GainItem_GSNotifyCS final
{
public:
	struct FUStGSNotifyParam                      NotifyParam;                                       // 0x0000(0x0040)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
//static_assert(alignof(BAN_GainItem_GSNotifyCS) == 0x000008, "Wrong alignment on BAN_GainItem_GSNotifyCS");
//static_assert(sizeof(BAN_GainItem_GSNotifyCS) == 0x000040, "Wrong size on BAN_GainItem_GSNotifyCS");
//static_assert(offsetof(BAN_GainItem_GSNotifyCS, NotifyParam) == 0x000000, "Member 'BAN_GainItem_GSNotifyCS::NotifyParam' has a wrong offset!");

// Function b1-Managed.BAN_GSFinishSeedSubmitAnim.bIsNativeBranchingPointCS
// 0x0001 (0x0001 - 0x0000)
struct BAN_GSFinishSeedSubmitAnim_bIsNativeBranchingPointCS final
{
public:
	uint8                                         ReturnValue : 1;                                   // 0x0000(0x0001)(BitIndex: 0x00, PropSize: 0x0001 (Parm, OutParm, ReturnParm, NoDestructor, HasGetValueTypeHash))
};
//static_assert(alignof(BAN_GSFinishSeedSubmitAnim_bIsNativeBranchingPointCS) == 0x000001, "Wrong alignment on BAN_GSFinishSeedSubmitAnim_bIsNativeBranchingPointCS");
//static_assert(sizeof(BAN_GSFinishSeedSubmitAnim_bIsNativeBranchingPointCS) == 0x000001, "Wrong size on BAN_GSFinishSeedSubmitAnim_bIsNativeBranchingPointCS");

// Function b1-Managed.BAN_GSFinishSeedSubmitAnim.GSNotifyCS
// 0x0040 (0x0040 - 0x0000)
struct BAN_GSFinishSeedSubmitAnim_GSNotifyCS final
{
public:
	struct FUStGSNotifyParam                      NotifyParam;                                       // 0x0000(0x0040)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
//static_assert(alignof(BAN_GSFinishSeedSubmitAnim_GSNotifyCS) == 0x000008, "Wrong alignment on BAN_GSFinishSeedSubmitAnim_GSNotifyCS");
//static_assert(sizeof(BAN_GSFinishSeedSubmitAnim_GSNotifyCS) == 0x000040, "Wrong size on BAN_GSFinishSeedSubmitAnim_GSNotifyCS");
//static_assert(offsetof(BAN_GSFinishSeedSubmitAnim_GSNotifyCS, NotifyParam) == 0x000000, "Member 'BAN_GSFinishSeedSubmitAnim_GSNotifyCS::NotifyParam' has a wrong offset!");

// Function b1-Managed.BAN_PlayDBCWithTargetInfo.GSNotifyCS
// 0x0040 (0x0040 - 0x0000)
struct BAN_PlayDBCWithTargetInfo_GSNotifyCS final
{
public:
	struct FUStGSNotifyParam                      NotifyParam;                                       // 0x0000(0x0040)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
//static_assert(alignof(BAN_PlayDBCWithTargetInfo_GSNotifyCS) == 0x000008, "Wrong alignment on BAN_PlayDBCWithTargetInfo_GSNotifyCS");
//static_assert(sizeof(BAN_PlayDBCWithTargetInfo_GSNotifyCS) == 0x000040, "Wrong size on BAN_PlayDBCWithTargetInfo_GSNotifyCS");
//static_assert(offsetof(BAN_PlayDBCWithTargetInfo_GSNotifyCS, NotifyParam) == 0x000000, "Member 'BAN_PlayDBCWithTargetInfo_GSNotifyCS::NotifyParam' has a wrong offset!");

// Function b1-Managed.BAN_Suicide.bIsNativeBranchingPointCS
// 0x0001 (0x0001 - 0x0000)
struct BAN_Suicide_bIsNativeBranchingPointCS final
{
public:
	uint8                                         ReturnValue : 1;                                   // 0x0000(0x0001)(BitIndex: 0x00, PropSize: 0x0001 (Parm, OutParm, ReturnParm, NoDestructor, HasGetValueTypeHash))
};
//static_assert(alignof(BAN_Suicide_bIsNativeBranchingPointCS) == 0x000001, "Wrong alignment on BAN_Suicide_bIsNativeBranchingPointCS");
//static_assert(sizeof(BAN_Suicide_bIsNativeBranchingPointCS) == 0x000001, "Wrong size on BAN_Suicide_bIsNativeBranchingPointCS");

// Function b1-Managed.BAN_Suicide.GSNotifyCS
// 0x0040 (0x0040 - 0x0000)
struct BAN_Suicide_GSNotifyCS final
{
public:
	struct FUStGSNotifyParam                      NotifyParam;                                       // 0x0000(0x0040)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
//static_assert(alignof(BAN_Suicide_GSNotifyCS) == 0x000008, "Wrong alignment on BAN_Suicide_GSNotifyCS");
//static_assert(sizeof(BAN_Suicide_GSNotifyCS) == 0x000040, "Wrong size on BAN_Suicide_GSNotifyCS");
//static_assert(offsetof(BAN_Suicide_GSNotifyCS, NotifyParam) == 0x000000, "Member 'BAN_Suicide_GSNotifyCS::NotifyParam' has a wrong offset!");

// Function b1-Managed.BAN_SwitchTransSpellSolution.bIsNativeBranchingPointCS
// 0x0001 (0x0001 - 0x0000)
struct BAN_SwitchTransSpellSolution_bIsNativeBranchingPointCS final
{
public:
	uint8                                         ReturnValue : 1;                                   // 0x0000(0x0001)(BitIndex: 0x00, PropSize: 0x0001 (Parm, OutParm, ReturnParm, NoDestructor, HasGetValueTypeHash))
};
//static_assert(alignof(BAN_SwitchTransSpellSolution_bIsNativeBranchingPointCS) == 0x000001, "Wrong alignment on BAN_SwitchTransSpellSolution_bIsNativeBranchingPointCS");
//static_assert(sizeof(BAN_SwitchTransSpellSolution_bIsNativeBranchingPointCS) == 0x000001, "Wrong size on BAN_SwitchTransSpellSolution_bIsNativeBranchingPointCS");

// Function b1-Managed.BAN_SwitchTransSpellSolution.GetNotifyName
// 0x0010 (0x0010 - 0x0000)
struct BAN_SwitchTransSpellSolution_GetNotifyName final
{
public:
	class FString                                 ReturnValue;                                       // 0x0000(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash)
};
//static_assert(alignof(BAN_SwitchTransSpellSolution_GetNotifyName) == 0x000008, "Wrong alignment on BAN_SwitchTransSpellSolution_GetNotifyName");
//static_assert(sizeof(BAN_SwitchTransSpellSolution_GetNotifyName) == 0x000010, "Wrong size on BAN_SwitchTransSpellSolution_GetNotifyName");
//static_assert(offsetof(BAN_SwitchTransSpellSolution_GetNotifyName, ReturnValue) == 0x000000, "Member 'BAN_SwitchTransSpellSolution_GetNotifyName::ReturnValue' has a wrong offset!");

// Function b1-Managed.BAN_SwitchTransSpellSolution.GSNotifyCS
// 0x0040 (0x0040 - 0x0000)
struct BAN_SwitchTransSpellSolution_GSNotifyCS final
{
public:
	struct FUStGSNotifyParam                      NotifyParam;                                       // 0x0000(0x0040)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
//static_assert(alignof(BAN_SwitchTransSpellSolution_GSNotifyCS) == 0x000008, "Wrong alignment on BAN_SwitchTransSpellSolution_GSNotifyCS");
//static_assert(sizeof(BAN_SwitchTransSpellSolution_GSNotifyCS) == 0x000040, "Wrong size on BAN_SwitchTransSpellSolution_GSNotifyCS");
//static_assert(offsetof(BAN_SwitchTransSpellSolution_GSNotifyCS, NotifyParam) == 0x000000, "Member 'BAN_SwitchTransSpellSolution_GSNotifyCS::NotifyParam' has a wrong offset!");

// Function b1-Managed.GSEventCollectionBase.EndPlayInCS
// 0x0001 (0x0001 - 0x0000)
struct GSEventCollectionBase_EndPlayInCS final
{
public:
	EEndPlayReason                                EndPlayReason;                                     // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
//static_assert(alignof(GSEventCollectionBase_EndPlayInCS) == 0x000001, "Wrong alignment on GSEventCollectionBase_EndPlayInCS");
//static_assert(sizeof(GSEventCollectionBase_EndPlayInCS) == 0x000001, "Wrong size on GSEventCollectionBase_EndPlayInCS");
//static_assert(offsetof(GSEventCollectionBase_EndPlayInCS, EndPlayReason) == 0x000000, "Member 'GSEventCollectionBase_EndPlayInCS::EndPlayReason' has a wrong offset!");

// Function b1-Managed.BUS_GSEventCollection.Evt_TriggerSkillEffect_Transmit_SPTransmitRollBack_Client
// 0x00F0 (0x00F0 - 0x0000)
struct BUS_GSEventCollection_Evt_TriggerSkillEffect_Transmit_SPTransmitRollBack_Client final
{
public:
	int32                                         EffectID;                                          // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_4[0x4];                                        // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FEffectInstReq                         EffectInstReq;                                     // 0x0008(0x00D0)(Parm, NoDestructor, HasGetValueTypeHash)
	class AActor*                                 InnerTarget;                                       // 0x00D8(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         bWithRPCEvent : 1;                                 // 0x00E0(0x0001)(BitIndex: 0x00, PropSize: 0x0001 (Parm, NoDestructor, HasGetValueTypeHash))
	uint8                                         Pad_E1[0x3];                                       // 0x00E1(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         PredictionKeyId;                                   // 0x00E4(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class AActor*                                 __TriggerActor;                                    // 0x00E8(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
//static_assert(alignof(BUS_GSEventCollection_Evt_TriggerSkillEffect_Transmit_SPTransmitRollBack_Client) == 0x000008, "Wrong alignment on BUS_GSEventCollection_Evt_TriggerSkillEffect_Transmit_SPTransmitRollBack_Client");
//static_assert(sizeof(BUS_GSEventCollection_Evt_TriggerSkillEffect_Transmit_SPTransmitRollBack_Client) == 0x0000F0, "Wrong size on BUS_GSEventCollection_Evt_TriggerSkillEffect_Transmit_SPTransmitRollBack_Client");
//static_assert(offsetof(BUS_GSEventCollection_Evt_TriggerSkillEffect_Transmit_SPTransmitRollBack_Client, EffectID) == 0x000000, "Member 'BUS_GSEventCollection_Evt_TriggerSkillEffect_Transmit_SPTransmitRollBack_Client::EffectID' has a wrong offset!");
//static_assert(offsetof(BUS_GSEventCollection_Evt_TriggerSkillEffect_Transmit_SPTransmitRollBack_Client, EffectInstReq) == 0x000008, "Member 'BUS_GSEventCollection_Evt_TriggerSkillEffect_Transmit_SPTransmitRollBack_Client::EffectInstReq' has a wrong offset!");
//static_assert(offsetof(BUS_GSEventCollection_Evt_TriggerSkillEffect_Transmit_SPTransmitRollBack_Client, InnerTarget) == 0x0000D8, "Member 'BUS_GSEventCollection_Evt_TriggerSkillEffect_Transmit_SPTransmitRollBack_Client::InnerTarget' has a wrong offset!");
//static_assert(offsetof(BUS_GSEventCollection_Evt_TriggerSkillEffect_Transmit_SPTransmitRollBack_Client, PredictionKeyId) == 0x0000E4, "Member 'BUS_GSEventCollection_Evt_TriggerSkillEffect_Transmit_SPTransmitRollBack_Client::PredictionKeyId' has a wrong offset!");
//static_assert(offsetof(BUS_GSEventCollection_Evt_TriggerSkillEffect_Transmit_SPTransmitRollBack_Client, __TriggerActor) == 0x0000E8, "Member 'BUS_GSEventCollection_Evt_TriggerSkillEffect_Transmit_SPTransmitRollBack_Client::__TriggerActor' has a wrong offset!");

// Function b1-Managed.BUS_GSEventCollection.Evt_TriggerSkillEffect_Transmit_SPTransmitConfirm_Client
// 0x00F0 (0x00F0 - 0x0000)
struct BUS_GSEventCollection_Evt_TriggerSkillEffect_Transmit_SPTransmitConfirm_Client final
{
public:
	int32                                         EffectID;                                          // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_4[0x4];                                        // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FEffectInstReq                         EffectInstReq;                                     // 0x0008(0x00D0)(Parm, NoDestructor, HasGetValueTypeHash)
	class AActor*                                 InnerTarget;                                       // 0x00D8(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         bWithRPCEvent : 1;                                 // 0x00E0(0x0001)(BitIndex: 0x00, PropSize: 0x0001 (Parm, NoDestructor, HasGetValueTypeHash))
	uint8                                         Pad_E1[0x3];                                       // 0x00E1(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         PredictionKeyId;                                   // 0x00E4(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class AActor*                                 __TriggerActor;                                    // 0x00E8(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
//static_assert(alignof(BUS_GSEventCollection_Evt_TriggerSkillEffect_Transmit_SPTransmitConfirm_Client) == 0x000008, "Wrong alignment on BUS_GSEventCollection_Evt_TriggerSkillEffect_Transmit_SPTransmitConfirm_Client");
//static_assert(sizeof(BUS_GSEventCollection_Evt_TriggerSkillEffect_Transmit_SPTransmitConfirm_Client) == 0x0000F0, "Wrong size on BUS_GSEventCollection_Evt_TriggerSkillEffect_Transmit_SPTransmitConfirm_Client");
//static_assert(offsetof(BUS_GSEventCollection_Evt_TriggerSkillEffect_Transmit_SPTransmitConfirm_Client, EffectID) == 0x000000, "Member 'BUS_GSEventCollection_Evt_TriggerSkillEffect_Transmit_SPTransmitConfirm_Client::EffectID' has a wrong offset!");
//static_assert(offsetof(BUS_GSEventCollection_Evt_TriggerSkillEffect_Transmit_SPTransmitConfirm_Client, EffectInstReq) == 0x000008, "Member 'BUS_GSEventCollection_Evt_TriggerSkillEffect_Transmit_SPTransmitConfirm_Client::EffectInstReq' has a wrong offset!");
//static_assert(offsetof(BUS_GSEventCollection_Evt_TriggerSkillEffect_Transmit_SPTransmitConfirm_Client, InnerTarget) == 0x0000D8, "Member 'BUS_GSEventCollection_Evt_TriggerSkillEffect_Transmit_SPTransmitConfirm_Client::InnerTarget' has a wrong offset!");
//static_assert(offsetof(BUS_GSEventCollection_Evt_TriggerSkillEffect_Transmit_SPTransmitConfirm_Client, PredictionKeyId) == 0x0000E4, "Member 'BUS_GSEventCollection_Evt_TriggerSkillEffect_Transmit_SPTransmitConfirm_Client::PredictionKeyId' has a wrong offset!");
//static_assert(offsetof(BUS_GSEventCollection_Evt_TriggerSkillEffect_Transmit_SPTransmitConfirm_Client, __TriggerActor) == 0x0000E8, "Member 'BUS_GSEventCollection_Evt_TriggerSkillEffect_Transmit_SPTransmitConfirm_Client::__TriggerActor' has a wrong offset!");

// Function b1-Managed.BUS_GSEventCollection.Evt_TestEventCollectionVectorMultiCast_Multicast_Invoke
// 0x0018 (0x0018 - 0x0000)
struct BUS_GSEventCollection_Evt_TestEventCollectionVectorMultiCast_Multicast_Invoke final
{
public:
	struct FVector                                Vector;                                            // 0x0000(0x0018)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
//static_assert(alignof(BUS_GSEventCollection_Evt_TestEventCollectionVectorMultiCast_Multicast_Invoke) == 0x000008, "Wrong alignment on BUS_GSEventCollection_Evt_TestEventCollectionVectorMultiCast_Multicast_Invoke");
//static_assert(sizeof(BUS_GSEventCollection_Evt_TestEventCollectionVectorMultiCast_Multicast_Invoke) == 0x000018, "Wrong size on BUS_GSEventCollection_Evt_TestEventCollectionVectorMultiCast_Multicast_Invoke");
//static_assert(offsetof(BUS_GSEventCollection_Evt_TestEventCollectionVectorMultiCast_Multicast_Invoke, Vector) == 0x000000, "Member 'BUS_GSEventCollection_Evt_TestEventCollectionVectorMultiCast_Multicast_Invoke::Vector' has a wrong offset!");

// Function b1-Managed.BUS_GSEventCollection.Evt_TestEventCollectionStringMultiCast_Multicast_Invoke
// 0x0010 (0x0010 - 0x0000)
struct BUS_GSEventCollection_Evt_TestEventCollectionStringMultiCast_Multicast_Invoke final
{
public:
	class FString                                 P1;                                                // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash)
};
//static_assert(alignof(BUS_GSEventCollection_Evt_TestEventCollectionStringMultiCast_Multicast_Invoke) == 0x000008, "Wrong alignment on BUS_GSEventCollection_Evt_TestEventCollectionStringMultiCast_Multicast_Invoke");
//static_assert(sizeof(BUS_GSEventCollection_Evt_TestEventCollectionStringMultiCast_Multicast_Invoke) == 0x000010, "Wrong size on BUS_GSEventCollection_Evt_TestEventCollectionStringMultiCast_Multicast_Invoke");
//static_assert(offsetof(BUS_GSEventCollection_Evt_TestEventCollectionStringMultiCast_Multicast_Invoke, P1) == 0x000000, "Member 'BUS_GSEventCollection_Evt_TestEventCollectionStringMultiCast_Multicast_Invoke::P1' has a wrong offset!");

// Function b1-Managed.BUS_GSEventCollection.Evt_TriggerNormalDamageEffect_SPTransmitRollBack_Client
// 0x0140 (0x0140 - 0x0000)
struct BUS_GSEventCollection_Evt_TriggerNormalDamageEffect_SPTransmitRollBack_Client final
{
public:
	class AActor*                                 Attacker;                                          // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FSkillDamageConfig                     SkillDamageConfig;                                 // 0x0008(0x0038)(Parm, ZeroConstructor, HasGetValueTypeHash)
	struct FEffectInstReq                         EffectInstReq;                                     // 0x0040(0x00D0)(Parm, NoDestructor, HasGetValueTypeHash)
	struct FBattleAttrSnapShot                    Attacker_AttrMemData;                              // 0x0110(0x0024)(Parm, NoDestructor, HasGetValueTypeHash)
	int32                                         PredictionKeyId;                                   // 0x0134(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class AActor*                                 __TriggerActor;                                    // 0x0138(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
//static_assert(alignof(BUS_GSEventCollection_Evt_TriggerNormalDamageEffect_SPTransmitRollBack_Client) == 0x000008, "Wrong alignment on BUS_GSEventCollection_Evt_TriggerNormalDamageEffect_SPTransmitRollBack_Client");
//static_assert(sizeof(BUS_GSEventCollection_Evt_TriggerNormalDamageEffect_SPTransmitRollBack_Client) == 0x000140, "Wrong size on BUS_GSEventCollection_Evt_TriggerNormalDamageEffect_SPTransmitRollBack_Client");
//static_assert(offsetof(BUS_GSEventCollection_Evt_TriggerNormalDamageEffect_SPTransmitRollBack_Client, Attacker) == 0x000000, "Member 'BUS_GSEventCollection_Evt_TriggerNormalDamageEffect_SPTransmitRollBack_Client::Attacker' has a wrong offset!");
//static_assert(offsetof(BUS_GSEventCollection_Evt_TriggerNormalDamageEffect_SPTransmitRollBack_Client, SkillDamageConfig) == 0x000008, "Member 'BUS_GSEventCollection_Evt_TriggerNormalDamageEffect_SPTransmitRollBack_Client::SkillDamageConfig' has a wrong offset!");
//static_assert(offsetof(BUS_GSEventCollection_Evt_TriggerNormalDamageEffect_SPTransmitRollBack_Client, EffectInstReq) == 0x000040, "Member 'BUS_GSEventCollection_Evt_TriggerNormalDamageEffect_SPTransmitRollBack_Client::EffectInstReq' has a wrong offset!");
//static_assert(offsetof(BUS_GSEventCollection_Evt_TriggerNormalDamageEffect_SPTransmitRollBack_Client, Attacker_AttrMemData) == 0x000110, "Member 'BUS_GSEventCollection_Evt_TriggerNormalDamageEffect_SPTransmitRollBack_Client::Attacker_AttrMemData' has a wrong offset!");
//static_assert(offsetof(BUS_GSEventCollection_Evt_TriggerNormalDamageEffect_SPTransmitRollBack_Client, PredictionKeyId) == 0x000134, "Member 'BUS_GSEventCollection_Evt_TriggerNormalDamageEffect_SPTransmitRollBack_Client::PredictionKeyId' has a wrong offset!");
//static_assert(offsetof(BUS_GSEventCollection_Evt_TriggerNormalDamageEffect_SPTransmitRollBack_Client, __TriggerActor) == 0x000138, "Member 'BUS_GSEventCollection_Evt_TriggerNormalDamageEffect_SPTransmitRollBack_Client::__TriggerActor' has a wrong offset!");

// Function b1-Managed.BUS_GSEventCollection.Evt_TestEventCollectionObjectMultiCast_Multicast_Invoke
// 0x0008 (0x0008 - 0x0000)
struct BUS_GSEventCollection_Evt_TestEventCollectionObjectMultiCast_Multicast_Invoke final
{
public:
	class UObject*                                Object;                                            // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
//static_assert(alignof(BUS_GSEventCollection_Evt_TestEventCollectionObjectMultiCast_Multicast_Invoke) == 0x000008, "Wrong alignment on BUS_GSEventCollection_Evt_TestEventCollectionObjectMultiCast_Multicast_Invoke");
//static_assert(sizeof(BUS_GSEventCollection_Evt_TestEventCollectionObjectMultiCast_Multicast_Invoke) == 0x000008, "Wrong size on BUS_GSEventCollection_Evt_TestEventCollectionObjectMultiCast_Multicast_Invoke");
//static_assert(offsetof(BUS_GSEventCollection_Evt_TestEventCollectionObjectMultiCast_Multicast_Invoke, Object) == 0x000000, "Member 'BUS_GSEventCollection_Evt_TestEventCollectionObjectMultiCast_Multicast_Invoke::Object' has a wrong offset!");

// Function b1-Managed.BUS_GSEventCollection.Evt_SceneObjTransitByEventNoSaveState_Multicast_Invoke
// 0x0008 (0x0008 - 0x0000)
struct BUS_GSEventCollection_Evt_SceneObjTransitByEventNoSaveState_Multicast_Invoke final
{
public:
	struct FGameplayTag                           Tag;                                               // 0x0000(0x0008)(Parm, NoDestructor, HasGetValueTypeHash)
};
//static_assert(alignof(BUS_GSEventCollection_Evt_SceneObjTransitByEventNoSaveState_Multicast_Invoke) == 0x000004, "Wrong alignment on BUS_GSEventCollection_Evt_SceneObjTransitByEventNoSaveState_Multicast_Invoke");
//static_assert(sizeof(BUS_GSEventCollection_Evt_SceneObjTransitByEventNoSaveState_Multicast_Invoke) == 0x000008, "Wrong size on BUS_GSEventCollection_Evt_SceneObjTransitByEventNoSaveState_Multicast_Invoke");
//static_assert(offsetof(BUS_GSEventCollection_Evt_SceneObjTransitByEventNoSaveState_Multicast_Invoke, Tag) == 0x000000, "Member 'BUS_GSEventCollection_Evt_SceneObjTransitByEventNoSaveState_Multicast_Invoke::Tag' has a wrong offset!");

// Function b1-Managed.BUS_GSEventCollection.Evt_TriggerNormalDamageEffect_SPTransmitConfirm_Client
// 0x0140 (0x0140 - 0x0000)
struct BUS_GSEventCollection_Evt_TriggerNormalDamageEffect_SPTransmitConfirm_Client final
{
public:
	class AActor*                                 Attacker;                                          // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FSkillDamageConfig                     SkillDamageConfig;                                 // 0x0008(0x0038)(Parm, ZeroConstructor, HasGetValueTypeHash)
	struct FEffectInstReq                         EffectInstReq;                                     // 0x0040(0x00D0)(Parm, NoDestructor, HasGetValueTypeHash)
	struct FBattleAttrSnapShot                    Attacker_AttrMemData;                              // 0x0110(0x0024)(Parm, NoDestructor, HasGetValueTypeHash)
	int32                                         PredictionKeyId;                                   // 0x0134(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class AActor*                                 __TriggerActor;                                    // 0x0138(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
//static_assert(alignof(BUS_GSEventCollection_Evt_TriggerNormalDamageEffect_SPTransmitConfirm_Client) == 0x000008, "Wrong alignment on BUS_GSEventCollection_Evt_TriggerNormalDamageEffect_SPTransmitConfirm_Client");
//static_assert(sizeof(BUS_GSEventCollection_Evt_TriggerNormalDamageEffect_SPTransmitConfirm_Client) == 0x000140, "Wrong size on BUS_GSEventCollection_Evt_TriggerNormalDamageEffect_SPTransmitConfirm_Client");
//static_assert(offsetof(BUS_GSEventCollection_Evt_TriggerNormalDamageEffect_SPTransmitConfirm_Client, Attacker) == 0x000000, "Member 'BUS_GSEventCollection_Evt_TriggerNormalDamageEffect_SPTransmitConfirm_Client::Attacker' has a wrong offset!");
//static_assert(offsetof(BUS_GSEventCollection_Evt_TriggerNormalDamageEffect_SPTransmitConfirm_Client, SkillDamageConfig) == 0x000008, "Member 'BUS_GSEventCollection_Evt_TriggerNormalDamageEffect_SPTransmitConfirm_Client::SkillDamageConfig' has a wrong offset!");
//static_assert(offsetof(BUS_GSEventCollection_Evt_TriggerNormalDamageEffect_SPTransmitConfirm_Client, EffectInstReq) == 0x000040, "Member 'BUS_GSEventCollection_Evt_TriggerNormalDamageEffect_SPTransmitConfirm_Client::EffectInstReq' has a wrong offset!");
//static_assert(offsetof(BUS_GSEventCollection_Evt_TriggerNormalDamageEffect_SPTransmitConfirm_Client, Attacker_AttrMemData) == 0x000110, "Member 'BUS_GSEventCollection_Evt_TriggerNormalDamageEffect_SPTransmitConfirm_Client::Attacker_AttrMemData' has a wrong offset!");
//static_assert(offsetof(BUS_GSEventCollection_Evt_TriggerNormalDamageEffect_SPTransmitConfirm_Client, PredictionKeyId) == 0x000134, "Member 'BUS_GSEventCollection_Evt_TriggerNormalDamageEffect_SPTransmitConfirm_Client::PredictionKeyId' has a wrong offset!");
//static_assert(offsetof(BUS_GSEventCollection_Evt_TriggerNormalDamageEffect_SPTransmitConfirm_Client, __TriggerActor) == 0x000138, "Member 'BUS_GSEventCollection_Evt_TriggerNormalDamageEffect_SPTransmitConfirm_Client::__TriggerActor' has a wrong offset!");

// Function b1-Managed.BUS_GSEventCollection.Evt_TestEventCollectionActorMultiCast_Multicast_Invoke
// 0x0008 (0x0008 - 0x0000)
struct BUS_GSEventCollection_Evt_TestEventCollectionActorMultiCast_Multicast_Invoke final
{
public:
	class AActor*                                 Actor;                                             // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
//static_assert(alignof(BUS_GSEventCollection_Evt_TestEventCollectionActorMultiCast_Multicast_Invoke) == 0x000008, "Wrong alignment on BUS_GSEventCollection_Evt_TestEventCollectionActorMultiCast_Multicast_Invoke");
//static_assert(sizeof(BUS_GSEventCollection_Evt_TestEventCollectionActorMultiCast_Multicast_Invoke) == 0x000008, "Wrong size on BUS_GSEventCollection_Evt_TestEventCollectionActorMultiCast_Multicast_Invoke");
//static_assert(offsetof(BUS_GSEventCollection_Evt_TestEventCollectionActorMultiCast_Multicast_Invoke, Actor) == 0x000000, "Member 'BUS_GSEventCollection_Evt_TestEventCollectionActorMultiCast_Multicast_Invoke::Actor' has a wrong offset!");

// Function b1-Managed.BUS_GSEventCollection.Evt_TestEventCollectionFloatMultiCast_Multicast_Invoke
// 0x0004 (0x0004 - 0x0000)
struct BUS_GSEventCollection_Evt_TestEventCollectionFloatMultiCast_Multicast_Invoke final
{
public:
	float                                         P1;                                                // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
//static_assert(alignof(BUS_GSEventCollection_Evt_TestEventCollectionFloatMultiCast_Multicast_Invoke) == 0x000004, "Wrong alignment on BUS_GSEventCollection_Evt_TestEventCollectionFloatMultiCast_Multicast_Invoke");
//static_assert(sizeof(BUS_GSEventCollection_Evt_TestEventCollectionFloatMultiCast_Multicast_Invoke) == 0x000004, "Wrong size on BUS_GSEventCollection_Evt_TestEventCollectionFloatMultiCast_Multicast_Invoke");
//static_assert(offsetof(BUS_GSEventCollection_Evt_TestEventCollectionFloatMultiCast_Multicast_Invoke, P1) == 0x000000, "Member 'BUS_GSEventCollection_Evt_TestEventCollectionFloatMultiCast_Multicast_Invoke::P1' has a wrong offset!");

// Function b1-Managed.BUS_GSEventCollection.Evt_TestEventCollectionNameMultiCast_Multicast_Invoke
// 0x0008 (0x0008 - 0x0000)
struct BUS_GSEventCollection_Evt_TestEventCollectionNameMultiCast_Multicast_Invoke final
{
public:
	class FName                                   P1;                                                // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
//static_assert(alignof(BUS_GSEventCollection_Evt_TestEventCollectionNameMultiCast_Multicast_Invoke) == 0x000004, "Wrong alignment on BUS_GSEventCollection_Evt_TestEventCollectionNameMultiCast_Multicast_Invoke");
//static_assert(sizeof(BUS_GSEventCollection_Evt_TestEventCollectionNameMultiCast_Multicast_Invoke) == 0x000008, "Wrong size on BUS_GSEventCollection_Evt_TestEventCollectionNameMultiCast_Multicast_Invoke");
//static_assert(offsetof(BUS_GSEventCollection_Evt_TestEventCollectionNameMultiCast_Multicast_Invoke, P1) == 0x000000, "Member 'BUS_GSEventCollection_Evt_TestEventCollectionNameMultiCast_Multicast_Invoke::P1' has a wrong offset!");

// Function b1-Managed.BUS_GSEventCollection.Evt_ClientMultiCastRPCTest2_SPTransmitRollBack_Client
// 0x0028 (0x0028 - 0x0000)
struct BUS_GSEventCollection_Evt_ClientMultiCastRPCTest2_SPTransmitRollBack_Client final
{
public:
	class UAnimMontage*                           Montage;                                           // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         PlayTimeRate;                                      // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         MontagePosOffset;                                  // 0x000C(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class FName                                   StartSectionName;                                  // 0x0010(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	EMontageBindReason                            Reason;                                            // 0x0018(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_19[0x3];                                       // 0x0019(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         PredictionKeyId;                                   // 0x001C(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class AActor*                                 __TriggerActor;                                    // 0x0020(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
//static_assert(alignof(BUS_GSEventCollection_Evt_ClientMultiCastRPCTest2_SPTransmitRollBack_Client) == 0x000008, "Wrong alignment on BUS_GSEventCollection_Evt_ClientMultiCastRPCTest2_SPTransmitRollBack_Client");
//static_assert(sizeof(BUS_GSEventCollection_Evt_ClientMultiCastRPCTest2_SPTransmitRollBack_Client) == 0x000028, "Wrong size on BUS_GSEventCollection_Evt_ClientMultiCastRPCTest2_SPTransmitRollBack_Client");
//static_assert(offsetof(BUS_GSEventCollection_Evt_ClientMultiCastRPCTest2_SPTransmitRollBack_Client, Montage) == 0x000000, "Member 'BUS_GSEventCollection_Evt_ClientMultiCastRPCTest2_SPTransmitRollBack_Client::Montage' has a wrong offset!");
//static_assert(offsetof(BUS_GSEventCollection_Evt_ClientMultiCastRPCTest2_SPTransmitRollBack_Client, PlayTimeRate) == 0x000008, "Member 'BUS_GSEventCollection_Evt_ClientMultiCastRPCTest2_SPTransmitRollBack_Client::PlayTimeRate' has a wrong offset!");
//static_assert(offsetof(BUS_GSEventCollection_Evt_ClientMultiCastRPCTest2_SPTransmitRollBack_Client, MontagePosOffset) == 0x00000C, "Member 'BUS_GSEventCollection_Evt_ClientMultiCastRPCTest2_SPTransmitRollBack_Client::MontagePosOffset' has a wrong offset!");
//static_assert(offsetof(BUS_GSEventCollection_Evt_ClientMultiCastRPCTest2_SPTransmitRollBack_Client, StartSectionName) == 0x000010, "Member 'BUS_GSEventCollection_Evt_ClientMultiCastRPCTest2_SPTransmitRollBack_Client::StartSectionName' has a wrong offset!");
//static_assert(offsetof(BUS_GSEventCollection_Evt_ClientMultiCastRPCTest2_SPTransmitRollBack_Client, Reason) == 0x000018, "Member 'BUS_GSEventCollection_Evt_ClientMultiCastRPCTest2_SPTransmitRollBack_Client::Reason' has a wrong offset!");
//static_assert(offsetof(BUS_GSEventCollection_Evt_ClientMultiCastRPCTest2_SPTransmitRollBack_Client, PredictionKeyId) == 0x00001C, "Member 'BUS_GSEventCollection_Evt_ClientMultiCastRPCTest2_SPTransmitRollBack_Client::PredictionKeyId' has a wrong offset!");
//static_assert(offsetof(BUS_GSEventCollection_Evt_ClientMultiCastRPCTest2_SPTransmitRollBack_Client, __TriggerActor) == 0x000020, "Member 'BUS_GSEventCollection_Evt_ClientMultiCastRPCTest2_SPTransmitRollBack_Client::__TriggerActor' has a wrong offset!");

// Function b1-Managed.BUS_GSEventCollection.Evt_TestEventCollectionIntMultiCast_Multicast_Invoke
// 0x0004 (0x0004 - 0x0000)
struct BUS_GSEventCollection_Evt_TestEventCollectionIntMultiCast_Multicast_Invoke final
{
public:
	int32                                         P1;                                                // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
//static_assert(alignof(BUS_GSEventCollection_Evt_TestEventCollectionIntMultiCast_Multicast_Invoke) == 0x000004, "Wrong alignment on BUS_GSEventCollection_Evt_TestEventCollectionIntMultiCast_Multicast_Invoke");
//static_assert(sizeof(BUS_GSEventCollection_Evt_TestEventCollectionIntMultiCast_Multicast_Invoke) == 0x000004, "Wrong size on BUS_GSEventCollection_Evt_TestEventCollectionIntMultiCast_Multicast_Invoke");
//static_assert(offsetof(BUS_GSEventCollection_Evt_TestEventCollectionIntMultiCast_Multicast_Invoke, P1) == 0x000000, "Member 'BUS_GSEventCollection_Evt_TestEventCollectionIntMultiCast_Multicast_Invoke::P1' has a wrong offset!");

// Function b1-Managed.BUS_GSEventCollection.Evt_ClientMultiCastRPCTest2_SPTransmitConfirm_Client
// 0x0028 (0x0028 - 0x0000)
struct BUS_GSEventCollection_Evt_ClientMultiCastRPCTest2_SPTransmitConfirm_Client final
{
public:
	class UAnimMontage*                           Montage;                                           // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         PlayTimeRate;                                      // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         MontagePosOffset;                                  // 0x000C(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class FName                                   StartSectionName;                                  // 0x0010(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	EMontageBindReason                            Reason;                                            // 0x0018(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_19[0x3];                                       // 0x0019(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         PredictionKeyId;                                   // 0x001C(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class AActor*                                 __TriggerActor;                                    // 0x0020(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
//static_assert(alignof(BUS_GSEventCollection_Evt_ClientMultiCastRPCTest2_SPTransmitConfirm_Client) == 0x000008, "Wrong alignment on BUS_GSEventCollection_Evt_ClientMultiCastRPCTest2_SPTransmitConfirm_Client");
//static_assert(sizeof(BUS_GSEventCollection_Evt_ClientMultiCastRPCTest2_SPTransmitConfirm_Client) == 0x000028, "Wrong size on BUS_GSEventCollection_Evt_ClientMultiCastRPCTest2_SPTransmitConfirm_Client");
//static_assert(offsetof(BUS_GSEventCollection_Evt_ClientMultiCastRPCTest2_SPTransmitConfirm_Client, Montage) == 0x000000, "Member 'BUS_GSEventCollection_Evt_ClientMultiCastRPCTest2_SPTransmitConfirm_Client::Montage' has a wrong offset!");
//static_assert(offsetof(BUS_GSEventCollection_Evt_ClientMultiCastRPCTest2_SPTransmitConfirm_Client, PlayTimeRate) == 0x000008, "Member 'BUS_GSEventCollection_Evt_ClientMultiCastRPCTest2_SPTransmitConfirm_Client::PlayTimeRate' has a wrong offset!");
//static_assert(offsetof(BUS_GSEventCollection_Evt_ClientMultiCastRPCTest2_SPTransmitConfirm_Client, MontagePosOffset) == 0x00000C, "Member 'BUS_GSEventCollection_Evt_ClientMultiCastRPCTest2_SPTransmitConfirm_Client::MontagePosOffset' has a wrong offset!");
//static_assert(offsetof(BUS_GSEventCollection_Evt_ClientMultiCastRPCTest2_SPTransmitConfirm_Client, StartSectionName) == 0x000010, "Member 'BUS_GSEventCollection_Evt_ClientMultiCastRPCTest2_SPTransmitConfirm_Client::StartSectionName' has a wrong offset!");
//static_assert(offsetof(BUS_GSEventCollection_Evt_ClientMultiCastRPCTest2_SPTransmitConfirm_Client, Reason) == 0x000018, "Member 'BUS_GSEventCollection_Evt_ClientMultiCastRPCTest2_SPTransmitConfirm_Client::Reason' has a wrong offset!");
//static_assert(offsetof(BUS_GSEventCollection_Evt_ClientMultiCastRPCTest2_SPTransmitConfirm_Client, PredictionKeyId) == 0x00001C, "Member 'BUS_GSEventCollection_Evt_ClientMultiCastRPCTest2_SPTransmitConfirm_Client::PredictionKeyId' has a wrong offset!");
//static_assert(offsetof(BUS_GSEventCollection_Evt_ClientMultiCastRPCTest2_SPTransmitConfirm_Client, __TriggerActor) == 0x000020, "Member 'BUS_GSEventCollection_Evt_ClientMultiCastRPCTest2_SPTransmitConfirm_Client::__TriggerActor' has a wrong offset!");

// Function b1-Managed.BUS_GSEventCollection.Evt_BattleLogicChangeEquipIllusion_Multicast_Invoke
// 0x0010 (0x0010 - 0x0000)
struct BUS_GSEventCollection_Evt_BattleLogicChangeEquipIllusion_Multicast_Invoke final
{
public:
	class FString                                 EquipIllusionConfigPath;                           // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash)
};
//static_assert(alignof(BUS_GSEventCollection_Evt_BattleLogicChangeEquipIllusion_Multicast_Invoke) == 0x000008, "Wrong alignment on BUS_GSEventCollection_Evt_BattleLogicChangeEquipIllusion_Multicast_Invoke");
//static_assert(sizeof(BUS_GSEventCollection_Evt_BattleLogicChangeEquipIllusion_Multicast_Invoke) == 0x000010, "Wrong size on BUS_GSEventCollection_Evt_BattleLogicChangeEquipIllusion_Multicast_Invoke");
//static_assert(offsetof(BUS_GSEventCollection_Evt_BattleLogicChangeEquipIllusion_Multicast_Invoke, EquipIllusionConfigPath) == 0x000000, "Member 'BUS_GSEventCollection_Evt_BattleLogicChangeEquipIllusion_Multicast_Invoke::EquipIllusionConfigPath' has a wrong offset!");

// Function b1-Managed.BUS_GSEventCollection.Evt_TriggerSkillEffect_TransmitSPTransmitMultiCast
// 0x00F0 (0x00F0 - 0x0000)
struct BUS_GSEventCollection_Evt_TriggerSkillEffect_TransmitSPTransmitMultiCast final
{
public:
	int32                                         EffectID;                                          // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_4[0x4];                                        // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FEffectInstReq                         EffectInstReq;                                     // 0x0008(0x00D0)(Parm, NoDestructor, HasGetValueTypeHash)
	class AActor*                                 InnerTarget;                                       // 0x00D8(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         bWithRPCEvent : 1;                                 // 0x00E0(0x0001)(BitIndex: 0x00, PropSize: 0x0001 (Parm, NoDestructor, HasGetValueTypeHash))
	uint8                                         Pad_E1[0x7];                                       // 0x00E1(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class AActor*                                 __TriggerActor;                                    // 0x00E8(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
//static_assert(alignof(BUS_GSEventCollection_Evt_TriggerSkillEffect_TransmitSPTransmitMultiCast) == 0x000008, "Wrong alignment on BUS_GSEventCollection_Evt_TriggerSkillEffect_TransmitSPTransmitMultiCast");
//static_assert(sizeof(BUS_GSEventCollection_Evt_TriggerSkillEffect_TransmitSPTransmitMultiCast) == 0x0000F0, "Wrong size on BUS_GSEventCollection_Evt_TriggerSkillEffect_TransmitSPTransmitMultiCast");
//static_assert(offsetof(BUS_GSEventCollection_Evt_TriggerSkillEffect_TransmitSPTransmitMultiCast, EffectID) == 0x000000, "Member 'BUS_GSEventCollection_Evt_TriggerSkillEffect_TransmitSPTransmitMultiCast::EffectID' has a wrong offset!");
//static_assert(offsetof(BUS_GSEventCollection_Evt_TriggerSkillEffect_TransmitSPTransmitMultiCast, EffectInstReq) == 0x000008, "Member 'BUS_GSEventCollection_Evt_TriggerSkillEffect_TransmitSPTransmitMultiCast::EffectInstReq' has a wrong offset!");
//static_assert(offsetof(BUS_GSEventCollection_Evt_TriggerSkillEffect_TransmitSPTransmitMultiCast, InnerTarget) == 0x0000D8, "Member 'BUS_GSEventCollection_Evt_TriggerSkillEffect_TransmitSPTransmitMultiCast::InnerTarget' has a wrong offset!");
//static_assert(offsetof(BUS_GSEventCollection_Evt_TriggerSkillEffect_TransmitSPTransmitMultiCast, __TriggerActor) == 0x0000E8, "Member 'BUS_GSEventCollection_Evt_TriggerSkillEffect_TransmitSPTransmitMultiCast::__TriggerActor' has a wrong offset!");

// Function b1-Managed.BUS_GSEventCollection.Evt_SetAMScaleRateByPosMultiCast_Multicast_Invoke
// 0x0030 (0x0030 - 0x0000)
struct BUS_GSEventCollection_Evt_SetAMScaleRateByPosMultiCast_Multicast_Invoke final
{
public:
	EAMScaleType                                  AMScaleType;                                       // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	EAMScaleRateAxis                              AMScaleAxis;                                       // 0x0001(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_2[0x2];                                        // 0x0002(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         LandingTraceLength;                                // 0x0004(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         PureScaleValue;                                    // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CachedDataID;                                      // 0x000C(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         AttackRangeLimit : 1;                              // 0x0010(0x0001)(BitIndex: 0x00, PropSize: 0x0001 (Parm, NoDestructor, HasGetValueTypeHash))
	uint8                                         BitPad_10_1 : 7;                                   // 0x0010(0x0001)(Fixing Bit-Field Size For New Byte [ Dumper-7 ])
	uint8                                         DebugMode : 1;                                     // 0x0011(0x0001)(BitIndex: 0x00, PropSize: 0x0001 (Parm, NoDestructor, HasGetValueTypeHash))
	uint8                                         Pad_12[0x2];                                       // 0x0012(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         TotalDuration;                                     // 0x0014(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         NotifyBeginTime;                                   // 0x0018(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         NotifyEndTime;                                     // 0x001C(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         AMScaleMinRate;                                    // 0x0020(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         AMScaleMaxRate;                                    // 0x0024(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         AMScaleMoveOffset;                                 // 0x0028(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         AMScaleMoveOffsetZ;                                // 0x002C(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
//static_assert(alignof(BUS_GSEventCollection_Evt_SetAMScaleRateByPosMultiCast_Multicast_Invoke) == 0x000004, "Wrong alignment on BUS_GSEventCollection_Evt_SetAMScaleRateByPosMultiCast_Multicast_Invoke");
//static_assert(sizeof(BUS_GSEventCollection_Evt_SetAMScaleRateByPosMultiCast_Multicast_Invoke) == 0x000030, "Wrong size on BUS_GSEventCollection_Evt_SetAMScaleRateByPosMultiCast_Multicast_Invoke");
//static_assert(offsetof(BUS_GSEventCollection_Evt_SetAMScaleRateByPosMultiCast_Multicast_Invoke, AMScaleType) == 0x000000, "Member 'BUS_GSEventCollection_Evt_SetAMScaleRateByPosMultiCast_Multicast_Invoke::AMScaleType' has a wrong offset!");
//static_assert(offsetof(BUS_GSEventCollection_Evt_SetAMScaleRateByPosMultiCast_Multicast_Invoke, AMScaleAxis) == 0x000001, "Member 'BUS_GSEventCollection_Evt_SetAMScaleRateByPosMultiCast_Multicast_Invoke::AMScaleAxis' has a wrong offset!");
//static_assert(offsetof(BUS_GSEventCollection_Evt_SetAMScaleRateByPosMultiCast_Multicast_Invoke, LandingTraceLength) == 0x000004, "Member 'BUS_GSEventCollection_Evt_SetAMScaleRateByPosMultiCast_Multicast_Invoke::LandingTraceLength' has a wrong offset!");
//static_assert(offsetof(BUS_GSEventCollection_Evt_SetAMScaleRateByPosMultiCast_Multicast_Invoke, PureScaleValue) == 0x000008, "Member 'BUS_GSEventCollection_Evt_SetAMScaleRateByPosMultiCast_Multicast_Invoke::PureScaleValue' has a wrong offset!");
//static_assert(offsetof(BUS_GSEventCollection_Evt_SetAMScaleRateByPosMultiCast_Multicast_Invoke, CachedDataID) == 0x00000C, "Member 'BUS_GSEventCollection_Evt_SetAMScaleRateByPosMultiCast_Multicast_Invoke::CachedDataID' has a wrong offset!");
//static_assert(offsetof(BUS_GSEventCollection_Evt_SetAMScaleRateByPosMultiCast_Multicast_Invoke, TotalDuration) == 0x000014, "Member 'BUS_GSEventCollection_Evt_SetAMScaleRateByPosMultiCast_Multicast_Invoke::TotalDuration' has a wrong offset!");
//static_assert(offsetof(BUS_GSEventCollection_Evt_SetAMScaleRateByPosMultiCast_Multicast_Invoke, NotifyBeginTime) == 0x000018, "Member 'BUS_GSEventCollection_Evt_SetAMScaleRateByPosMultiCast_Multicast_Invoke::NotifyBeginTime' has a wrong offset!");
//static_assert(offsetof(BUS_GSEventCollection_Evt_SetAMScaleRateByPosMultiCast_Multicast_Invoke, NotifyEndTime) == 0x00001C, "Member 'BUS_GSEventCollection_Evt_SetAMScaleRateByPosMultiCast_Multicast_Invoke::NotifyEndTime' has a wrong offset!");
//static_assert(offsetof(BUS_GSEventCollection_Evt_SetAMScaleRateByPosMultiCast_Multicast_Invoke, AMScaleMinRate) == 0x000020, "Member 'BUS_GSEventCollection_Evt_SetAMScaleRateByPosMultiCast_Multicast_Invoke::AMScaleMinRate' has a wrong offset!");
//static_assert(offsetof(BUS_GSEventCollection_Evt_SetAMScaleRateByPosMultiCast_Multicast_Invoke, AMScaleMaxRate) == 0x000024, "Member 'BUS_GSEventCollection_Evt_SetAMScaleRateByPosMultiCast_Multicast_Invoke::AMScaleMaxRate' has a wrong offset!");
//static_assert(offsetof(BUS_GSEventCollection_Evt_SetAMScaleRateByPosMultiCast_Multicast_Invoke, AMScaleMoveOffset) == 0x000028, "Member 'BUS_GSEventCollection_Evt_SetAMScaleRateByPosMultiCast_Multicast_Invoke::AMScaleMoveOffset' has a wrong offset!");
//static_assert(offsetof(BUS_GSEventCollection_Evt_SetAMScaleRateByPosMultiCast_Multicast_Invoke, AMScaleMoveOffsetZ) == 0x00002C, "Member 'BUS_GSEventCollection_Evt_SetAMScaleRateByPosMultiCast_Multicast_Invoke::AMScaleMoveOffsetZ' has a wrong offset!");

// Function b1-Managed.BUS_GSEventCollection.Evt_MoveWithAnimMontageCMultiCast_RollBack_Client
// 0x0028 (0x0028 - 0x0000)
struct BUS_GSEventCollection_Evt_MoveWithAnimMontageCMultiCast_RollBack_Client final
{
public:
	class UAnimMontage*                           Montage;                                           // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         Scale;                                             // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         PlayTimeRate;                                      // 0x000C(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         MontagePosOffset;                                  // 0x0010(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class FName                                   StartSectionName;                                  // 0x0014(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	EMontageBindReason                            Reason;                                            // 0x001C(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_1D[0x3];                                       // 0x001D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         PredictionKeyId;                                   // 0x0020(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
//static_assert(alignof(BUS_GSEventCollection_Evt_MoveWithAnimMontageCMultiCast_RollBack_Client) == 0x000008, "Wrong alignment on BUS_GSEventCollection_Evt_MoveWithAnimMontageCMultiCast_RollBack_Client");
//static_assert(sizeof(BUS_GSEventCollection_Evt_MoveWithAnimMontageCMultiCast_RollBack_Client) == 0x000028, "Wrong size on BUS_GSEventCollection_Evt_MoveWithAnimMontageCMultiCast_RollBack_Client");
//static_assert(offsetof(BUS_GSEventCollection_Evt_MoveWithAnimMontageCMultiCast_RollBack_Client, Montage) == 0x000000, "Member 'BUS_GSEventCollection_Evt_MoveWithAnimMontageCMultiCast_RollBack_Client::Montage' has a wrong offset!");
//static_assert(offsetof(BUS_GSEventCollection_Evt_MoveWithAnimMontageCMultiCast_RollBack_Client, Scale) == 0x000008, "Member 'BUS_GSEventCollection_Evt_MoveWithAnimMontageCMultiCast_RollBack_Client::Scale' has a wrong offset!");
//static_assert(offsetof(BUS_GSEventCollection_Evt_MoveWithAnimMontageCMultiCast_RollBack_Client, PlayTimeRate) == 0x00000C, "Member 'BUS_GSEventCollection_Evt_MoveWithAnimMontageCMultiCast_RollBack_Client::PlayTimeRate' has a wrong offset!");
//static_assert(offsetof(BUS_GSEventCollection_Evt_MoveWithAnimMontageCMultiCast_RollBack_Client, MontagePosOffset) == 0x000010, "Member 'BUS_GSEventCollection_Evt_MoveWithAnimMontageCMultiCast_RollBack_Client::MontagePosOffset' has a wrong offset!");
//static_assert(offsetof(BUS_GSEventCollection_Evt_MoveWithAnimMontageCMultiCast_RollBack_Client, StartSectionName) == 0x000014, "Member 'BUS_GSEventCollection_Evt_MoveWithAnimMontageCMultiCast_RollBack_Client::StartSectionName' has a wrong offset!");
//static_assert(offsetof(BUS_GSEventCollection_Evt_MoveWithAnimMontageCMultiCast_RollBack_Client, Reason) == 0x00001C, "Member 'BUS_GSEventCollection_Evt_MoveWithAnimMontageCMultiCast_RollBack_Client::Reason' has a wrong offset!");
//static_assert(offsetof(BUS_GSEventCollection_Evt_MoveWithAnimMontageCMultiCast_RollBack_Client, PredictionKeyId) == 0x000020, "Member 'BUS_GSEventCollection_Evt_MoveWithAnimMontageCMultiCast_RollBack_Client::PredictionKeyId' has a wrong offset!");

// Function b1-Managed.BUS_GSEventCollection.Evt_MoveWithAnimMontageCMultiCast_Confirm_Client
// 0x0028 (0x0028 - 0x0000)
struct BUS_GSEventCollection_Evt_MoveWithAnimMontageCMultiCast_Confirm_Client final
{
public:
	class UAnimMontage*                           Montage;                                           // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         Scale;                                             // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         PlayTimeRate;                                      // 0x000C(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         MontagePosOffset;                                  // 0x0010(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class FName                                   StartSectionName;                                  // 0x0014(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	EMontageBindReason                            Reason;                                            // 0x001C(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_1D[0x3];                                       // 0x001D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         PredictionKeyId;                                   // 0x0020(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
//static_assert(alignof(BUS_GSEventCollection_Evt_MoveWithAnimMontageCMultiCast_Confirm_Client) == 0x000008, "Wrong alignment on BUS_GSEventCollection_Evt_MoveWithAnimMontageCMultiCast_Confirm_Client");
//static_assert(sizeof(BUS_GSEventCollection_Evt_MoveWithAnimMontageCMultiCast_Confirm_Client) == 0x000028, "Wrong size on BUS_GSEventCollection_Evt_MoveWithAnimMontageCMultiCast_Confirm_Client");
//static_assert(offsetof(BUS_GSEventCollection_Evt_MoveWithAnimMontageCMultiCast_Confirm_Client, Montage) == 0x000000, "Member 'BUS_GSEventCollection_Evt_MoveWithAnimMontageCMultiCast_Confirm_Client::Montage' has a wrong offset!");
//static_assert(offsetof(BUS_GSEventCollection_Evt_MoveWithAnimMontageCMultiCast_Confirm_Client, Scale) == 0x000008, "Member 'BUS_GSEventCollection_Evt_MoveWithAnimMontageCMultiCast_Confirm_Client::Scale' has a wrong offset!");
//static_assert(offsetof(BUS_GSEventCollection_Evt_MoveWithAnimMontageCMultiCast_Confirm_Client, PlayTimeRate) == 0x00000C, "Member 'BUS_GSEventCollection_Evt_MoveWithAnimMontageCMultiCast_Confirm_Client::PlayTimeRate' has a wrong offset!");
//static_assert(offsetof(BUS_GSEventCollection_Evt_MoveWithAnimMontageCMultiCast_Confirm_Client, MontagePosOffset) == 0x000010, "Member 'BUS_GSEventCollection_Evt_MoveWithAnimMontageCMultiCast_Confirm_Client::MontagePosOffset' has a wrong offset!");
//static_assert(offsetof(BUS_GSEventCollection_Evt_MoveWithAnimMontageCMultiCast_Confirm_Client, StartSectionName) == 0x000014, "Member 'BUS_GSEventCollection_Evt_MoveWithAnimMontageCMultiCast_Confirm_Client::StartSectionName' has a wrong offset!");
//static_assert(offsetof(BUS_GSEventCollection_Evt_MoveWithAnimMontageCMultiCast_Confirm_Client, Reason) == 0x00001C, "Member 'BUS_GSEventCollection_Evt_MoveWithAnimMontageCMultiCast_Confirm_Client::Reason' has a wrong offset!");
//static_assert(offsetof(BUS_GSEventCollection_Evt_MoveWithAnimMontageCMultiCast_Confirm_Client, PredictionKeyId) == 0x000020, "Member 'BUS_GSEventCollection_Evt_MoveWithAnimMontageCMultiCast_Confirm_Client::PredictionKeyId' has a wrong offset!");

// Function b1-Managed.BUS_GSEventCollection.Evt_TriggerNormalDamageEffectSPTransmitMultiCast
// 0x0140 (0x0140 - 0x0000)
struct BUS_GSEventCollection_Evt_TriggerNormalDamageEffectSPTransmitMultiCast final
{
public:
	class AActor*                                 Attacker;                                          // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FSkillDamageConfig                     SkillDamageConfig;                                 // 0x0008(0x0038)(Parm, ZeroConstructor, HasGetValueTypeHash)
	struct FEffectInstReq                         EffectInstReq;                                     // 0x0040(0x00D0)(Parm, NoDestructor, HasGetValueTypeHash)
	struct FBattleAttrSnapShot                    Attacker_AttrMemData;                              // 0x0110(0x0024)(Parm, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_134[0x4];                                      // 0x0134(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class AActor*                                 __TriggerActor;                                    // 0x0138(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
//static_assert(alignof(BUS_GSEventCollection_Evt_TriggerNormalDamageEffectSPTransmitMultiCast) == 0x000008, "Wrong alignment on BUS_GSEventCollection_Evt_TriggerNormalDamageEffectSPTransmitMultiCast");
//static_assert(sizeof(BUS_GSEventCollection_Evt_TriggerNormalDamageEffectSPTransmitMultiCast) == 0x000140, "Wrong size on BUS_GSEventCollection_Evt_TriggerNormalDamageEffectSPTransmitMultiCast");
//static_assert(offsetof(BUS_GSEventCollection_Evt_TriggerNormalDamageEffectSPTransmitMultiCast, Attacker) == 0x000000, "Member 'BUS_GSEventCollection_Evt_TriggerNormalDamageEffectSPTransmitMultiCast::Attacker' has a wrong offset!");
//static_assert(offsetof(BUS_GSEventCollection_Evt_TriggerNormalDamageEffectSPTransmitMultiCast, SkillDamageConfig) == 0x000008, "Member 'BUS_GSEventCollection_Evt_TriggerNormalDamageEffectSPTransmitMultiCast::SkillDamageConfig' has a wrong offset!");
//static_assert(offsetof(BUS_GSEventCollection_Evt_TriggerNormalDamageEffectSPTransmitMultiCast, EffectInstReq) == 0x000040, "Member 'BUS_GSEventCollection_Evt_TriggerNormalDamageEffectSPTransmitMultiCast::EffectInstReq' has a wrong offset!");
//static_assert(offsetof(BUS_GSEventCollection_Evt_TriggerNormalDamageEffectSPTransmitMultiCast, Attacker_AttrMemData) == 0x000110, "Member 'BUS_GSEventCollection_Evt_TriggerNormalDamageEffectSPTransmitMultiCast::Attacker_AttrMemData' has a wrong offset!");
//static_assert(offsetof(BUS_GSEventCollection_Evt_TriggerNormalDamageEffectSPTransmitMultiCast, __TriggerActor) == 0x000138, "Member 'BUS_GSEventCollection_Evt_TriggerNormalDamageEffectSPTransmitMultiCast::__TriggerActor' has a wrong offset!");

// Function b1-Managed.BUS_GSEventCollection.Evt_TriggerSkillEffect_Transmit_RollBack_Client
// 0x00E8 (0x00E8 - 0x0000)
struct BUS_GSEventCollection_Evt_TriggerSkillEffect_Transmit_RollBack_Client final
{
public:
	int32                                         EffectID;                                          // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_4[0x4];                                        // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FEffectInstReq                         EffectInstReq;                                     // 0x0008(0x00D0)(Parm, NoDestructor, HasGetValueTypeHash)
	class AActor*                                 InnerTarget;                                       // 0x00D8(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         bWithRPCEvent : 1;                                 // 0x00E0(0x0001)(BitIndex: 0x00, PropSize: 0x0001 (Parm, NoDestructor, HasGetValueTypeHash))
	uint8                                         Pad_E1[0x3];                                       // 0x00E1(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         PredictionKeyId;                                   // 0x00E4(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
//static_assert(alignof(BUS_GSEventCollection_Evt_TriggerSkillEffect_Transmit_RollBack_Client) == 0x000008, "Wrong alignment on BUS_GSEventCollection_Evt_TriggerSkillEffect_Transmit_RollBack_Client");
//static_assert(sizeof(BUS_GSEventCollection_Evt_TriggerSkillEffect_Transmit_RollBack_Client) == 0x0000E8, "Wrong size on BUS_GSEventCollection_Evt_TriggerSkillEffect_Transmit_RollBack_Client");
//static_assert(offsetof(BUS_GSEventCollection_Evt_TriggerSkillEffect_Transmit_RollBack_Client, EffectID) == 0x000000, "Member 'BUS_GSEventCollection_Evt_TriggerSkillEffect_Transmit_RollBack_Client::EffectID' has a wrong offset!");
//static_assert(offsetof(BUS_GSEventCollection_Evt_TriggerSkillEffect_Transmit_RollBack_Client, EffectInstReq) == 0x000008, "Member 'BUS_GSEventCollection_Evt_TriggerSkillEffect_Transmit_RollBack_Client::EffectInstReq' has a wrong offset!");
//static_assert(offsetof(BUS_GSEventCollection_Evt_TriggerSkillEffect_Transmit_RollBack_Client, InnerTarget) == 0x0000D8, "Member 'BUS_GSEventCollection_Evt_TriggerSkillEffect_Transmit_RollBack_Client::InnerTarget' has a wrong offset!");
//static_assert(offsetof(BUS_GSEventCollection_Evt_TriggerSkillEffect_Transmit_RollBack_Client, PredictionKeyId) == 0x0000E4, "Member 'BUS_GSEventCollection_Evt_TriggerSkillEffect_Transmit_RollBack_Client::PredictionKeyId' has a wrong offset!");

// Function b1-Managed.BUS_GSEventCollection.Evt_TriggerSkillEffect_TransmitSPTransmitServer
// 0x00F8 (0x00F8 - 0x0000)
struct BUS_GSEventCollection_Evt_TriggerSkillEffect_TransmitSPTransmitServer final
{
public:
	int32                                         EffectID;                                          // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_4[0x4];                                        // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FEffectInstReq                         EffectInstReq;                                     // 0x0008(0x00D0)(Parm, NoDestructor, HasGetValueTypeHash)
	class AActor*                                 InnerTarget;                                       // 0x00D8(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         bWithRPCEvent : 1;                                 // 0x00E0(0x0001)(BitIndex: 0x00, PropSize: 0x0001 (Parm, NoDestructor, HasGetValueTypeHash))
	uint8                                         Pad_E1[0x3];                                       // 0x00E1(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         PredictionKeyId;                                   // 0x00E4(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         ParentPredictionKeyId;                             // 0x00E8(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_EC[0x4];                                       // 0x00EC(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class AActor*                                 __TriggerActor;                                    // 0x00F0(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
//static_assert(alignof(BUS_GSEventCollection_Evt_TriggerSkillEffect_TransmitSPTransmitServer) == 0x000008, "Wrong alignment on BUS_GSEventCollection_Evt_TriggerSkillEffect_TransmitSPTransmitServer");
//static_assert(sizeof(BUS_GSEventCollection_Evt_TriggerSkillEffect_TransmitSPTransmitServer) == 0x0000F8, "Wrong size on BUS_GSEventCollection_Evt_TriggerSkillEffect_TransmitSPTransmitServer");
//static_assert(offsetof(BUS_GSEventCollection_Evt_TriggerSkillEffect_TransmitSPTransmitServer, EffectID) == 0x000000, "Member 'BUS_GSEventCollection_Evt_TriggerSkillEffect_TransmitSPTransmitServer::EffectID' has a wrong offset!");
//static_assert(offsetof(BUS_GSEventCollection_Evt_TriggerSkillEffect_TransmitSPTransmitServer, EffectInstReq) == 0x000008, "Member 'BUS_GSEventCollection_Evt_TriggerSkillEffect_TransmitSPTransmitServer::EffectInstReq' has a wrong offset!");
//static_assert(offsetof(BUS_GSEventCollection_Evt_TriggerSkillEffect_TransmitSPTransmitServer, InnerTarget) == 0x0000D8, "Member 'BUS_GSEventCollection_Evt_TriggerSkillEffect_TransmitSPTransmitServer::InnerTarget' has a wrong offset!");
//static_assert(offsetof(BUS_GSEventCollection_Evt_TriggerSkillEffect_TransmitSPTransmitServer, PredictionKeyId) == 0x0000E4, "Member 'BUS_GSEventCollection_Evt_TriggerSkillEffect_TransmitSPTransmitServer::PredictionKeyId' has a wrong offset!");
//static_assert(offsetof(BUS_GSEventCollection_Evt_TriggerSkillEffect_TransmitSPTransmitServer, ParentPredictionKeyId) == 0x0000E8, "Member 'BUS_GSEventCollection_Evt_TriggerSkillEffect_TransmitSPTransmitServer::ParentPredictionKeyId' has a wrong offset!");
//static_assert(offsetof(BUS_GSEventCollection_Evt_TriggerSkillEffect_TransmitSPTransmitServer, __TriggerActor) == 0x0000F0, "Member 'BUS_GSEventCollection_Evt_TriggerSkillEffect_TransmitSPTransmitServer::__TriggerActor' has a wrong offset!");

// Function b1-Managed.BUS_GSEventCollection.Evt_SetTargetInfoWithCameraLockingServer_Invoke
// 0x0048 (0x0048 - 0x0000)
struct BUS_GSEventCollection_Evt_SetTargetInfoWithCameraLockingServer_Invoke final
{
public:
	struct FUnitLockTargetInfo                    NewTargetInfo;                                     // 0x0000(0x0048)(Parm, ZeroConstructor, HasGetValueTypeHash)
};
//static_assert(alignof(BUS_GSEventCollection_Evt_SetTargetInfoWithCameraLockingServer_Invoke) == 0x000008, "Wrong alignment on BUS_GSEventCollection_Evt_SetTargetInfoWithCameraLockingServer_Invoke");
//static_assert(sizeof(BUS_GSEventCollection_Evt_SetTargetInfoWithCameraLockingServer_Invoke) == 0x000048, "Wrong size on BUS_GSEventCollection_Evt_SetTargetInfoWithCameraLockingServer_Invoke");
//static_assert(offsetof(BUS_GSEventCollection_Evt_SetTargetInfoWithCameraLockingServer_Invoke, NewTargetInfo) == 0x000000, "Member 'BUS_GSEventCollection_Evt_SetTargetInfoWithCameraLockingServer_Invoke::NewTargetInfo' has a wrong offset!");

// Function b1-Managed.BUS_GSEventCollection.Evt_ClientMultiCastRPCTest2SPTransmitMultiCast
// 0x0028 (0x0028 - 0x0000)
struct BUS_GSEventCollection_Evt_ClientMultiCastRPCTest2SPTransmitMultiCast final
{
public:
	class UAnimMontage*                           Montage;                                           // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         PlayTimeRate;                                      // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         MontagePosOffset;                                  // 0x000C(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class FName                                   StartSectionName;                                  // 0x0010(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	EMontageBindReason                            Reason;                                            // 0x0018(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_19[0x7];                                       // 0x0019(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class AActor*                                 __TriggerActor;                                    // 0x0020(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
//static_assert(alignof(BUS_GSEventCollection_Evt_ClientMultiCastRPCTest2SPTransmitMultiCast) == 0x000008, "Wrong alignment on BUS_GSEventCollection_Evt_ClientMultiCastRPCTest2SPTransmitMultiCast");
//static_assert(sizeof(BUS_GSEventCollection_Evt_ClientMultiCastRPCTest2SPTransmitMultiCast) == 0x000028, "Wrong size on BUS_GSEventCollection_Evt_ClientMultiCastRPCTest2SPTransmitMultiCast");
//static_assert(offsetof(BUS_GSEventCollection_Evt_ClientMultiCastRPCTest2SPTransmitMultiCast, Montage) == 0x000000, "Member 'BUS_GSEventCollection_Evt_ClientMultiCastRPCTest2SPTransmitMultiCast::Montage' has a wrong offset!");
//static_assert(offsetof(BUS_GSEventCollection_Evt_ClientMultiCastRPCTest2SPTransmitMultiCast, PlayTimeRate) == 0x000008, "Member 'BUS_GSEventCollection_Evt_ClientMultiCastRPCTest2SPTransmitMultiCast::PlayTimeRate' has a wrong offset!");
//static_assert(offsetof(BUS_GSEventCollection_Evt_ClientMultiCastRPCTest2SPTransmitMultiCast, MontagePosOffset) == 0x00000C, "Member 'BUS_GSEventCollection_Evt_ClientMultiCastRPCTest2SPTransmitMultiCast::MontagePosOffset' has a wrong offset!");
//static_assert(offsetof(BUS_GSEventCollection_Evt_ClientMultiCastRPCTest2SPTransmitMultiCast, StartSectionName) == 0x000010, "Member 'BUS_GSEventCollection_Evt_ClientMultiCastRPCTest2SPTransmitMultiCast::StartSectionName' has a wrong offset!");
//static_assert(offsetof(BUS_GSEventCollection_Evt_ClientMultiCastRPCTest2SPTransmitMultiCast, Reason) == 0x000018, "Member 'BUS_GSEventCollection_Evt_ClientMultiCastRPCTest2SPTransmitMultiCast::Reason' has a wrong offset!");
//static_assert(offsetof(BUS_GSEventCollection_Evt_ClientMultiCastRPCTest2SPTransmitMultiCast, __TriggerActor) == 0x000020, "Member 'BUS_GSEventCollection_Evt_ClientMultiCastRPCTest2SPTransmitMultiCast::__TriggerActor' has a wrong offset!");

// Function b1-Managed.BUS_GSEventCollection.Evt_UnitCastSkillTryCMultiCast_RollBack_Client
// 0x001C (0x001C - 0x0000)
struct BUS_GSEventCollection_Evt_UnitCastSkillTryCMultiCast_RollBack_Client final
{
public:
	struct FCastSkillInfo                         CSI;                                               // 0x0000(0x0018)(Parm, NoDestructor, HasGetValueTypeHash)
	int32                                         PredictionKeyId;                                   // 0x0018(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
//static_assert(alignof(BUS_GSEventCollection_Evt_UnitCastSkillTryCMultiCast_RollBack_Client) == 0x000004, "Wrong alignment on BUS_GSEventCollection_Evt_UnitCastSkillTryCMultiCast_RollBack_Client");
//static_assert(sizeof(BUS_GSEventCollection_Evt_UnitCastSkillTryCMultiCast_RollBack_Client) == 0x00001C, "Wrong size on BUS_GSEventCollection_Evt_UnitCastSkillTryCMultiCast_RollBack_Client");
//static_assert(offsetof(BUS_GSEventCollection_Evt_UnitCastSkillTryCMultiCast_RollBack_Client, CSI) == 0x000000, "Member 'BUS_GSEventCollection_Evt_UnitCastSkillTryCMultiCast_RollBack_Client::CSI' has a wrong offset!");
//static_assert(offsetof(BUS_GSEventCollection_Evt_UnitCastSkillTryCMultiCast_RollBack_Client, PredictionKeyId) == 0x000018, "Member 'BUS_GSEventCollection_Evt_UnitCastSkillTryCMultiCast_RollBack_Client::PredictionKeyId' has a wrong offset!");

// Function b1-Managed.BUS_GSEventCollection.Evt_ChallenegeRebirthTeleport_Multicast_Invoke
// 0x0010 (0x0010 - 0x0000)
struct BUS_GSEventCollection_Evt_ChallenegeRebirthTeleport_Multicast_Invoke final
{
public:
	class FString                                 P1;                                                // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash)
};
//static_assert(alignof(BUS_GSEventCollection_Evt_ChallenegeRebirthTeleport_Multicast_Invoke) == 0x000008, "Wrong alignment on BUS_GSEventCollection_Evt_ChallenegeRebirthTeleport_Multicast_Invoke");
//static_assert(sizeof(BUS_GSEventCollection_Evt_ChallenegeRebirthTeleport_Multicast_Invoke) == 0x000010, "Wrong size on BUS_GSEventCollection_Evt_ChallenegeRebirthTeleport_Multicast_Invoke");
//static_assert(offsetof(BUS_GSEventCollection_Evt_ChallenegeRebirthTeleport_Multicast_Invoke, P1) == 0x000000, "Member 'BUS_GSEventCollection_Evt_ChallenegeRebirthTeleport_Multicast_Invoke::P1' has a wrong offset!");

// Function b1-Managed.BUS_GSEventCollection.Evt_ChangeMotionMatchingState_Multicast_Invoke
// 0x0001 (0x0001 - 0x0000)
struct BUS_GSEventCollection_Evt_ChangeMotionMatchingState_Multicast_Invoke final
{
public:
	EState_MM                                     MMState;                                           // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
//static_assert(alignof(BUS_GSEventCollection_Evt_ChangeMotionMatchingState_Multicast_Invoke) == 0x000001, "Wrong alignment on BUS_GSEventCollection_Evt_ChangeMotionMatchingState_Multicast_Invoke");
//static_assert(sizeof(BUS_GSEventCollection_Evt_ChangeMotionMatchingState_Multicast_Invoke) == 0x000001, "Wrong size on BUS_GSEventCollection_Evt_ChangeMotionMatchingState_Multicast_Invoke");
//static_assert(offsetof(BUS_GSEventCollection_Evt_ChangeMotionMatchingState_Multicast_Invoke, MMState) == 0x000000, "Member 'BUS_GSEventCollection_Evt_ChangeMotionMatchingState_Multicast_Invoke::MMState' has a wrong offset!");

// Function b1-Managed.BUS_GSEventCollection.Evt_TriggerSkillEffect_Transmit_Confirm_Client
// 0x00E8 (0x00E8 - 0x0000)
struct BUS_GSEventCollection_Evt_TriggerSkillEffect_Transmit_Confirm_Client final
{
public:
	int32                                         EffectID;                                          // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_4[0x4];                                        // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FEffectInstReq                         EffectInstReq;                                     // 0x0008(0x00D0)(Parm, NoDestructor, HasGetValueTypeHash)
	class AActor*                                 InnerTarget;                                       // 0x00D8(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         bWithRPCEvent : 1;                                 // 0x00E0(0x0001)(BitIndex: 0x00, PropSize: 0x0001 (Parm, NoDestructor, HasGetValueTypeHash))
	uint8                                         Pad_E1[0x3];                                       // 0x00E1(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         PredictionKeyId;                                   // 0x00E4(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
//static_assert(alignof(BUS_GSEventCollection_Evt_TriggerSkillEffect_Transmit_Confirm_Client) == 0x000008, "Wrong alignment on BUS_GSEventCollection_Evt_TriggerSkillEffect_Transmit_Confirm_Client");
//static_assert(sizeof(BUS_GSEventCollection_Evt_TriggerSkillEffect_Transmit_Confirm_Client) == 0x0000E8, "Wrong size on BUS_GSEventCollection_Evt_TriggerSkillEffect_Transmit_Confirm_Client");
//static_assert(offsetof(BUS_GSEventCollection_Evt_TriggerSkillEffect_Transmit_Confirm_Client, EffectID) == 0x000000, "Member 'BUS_GSEventCollection_Evt_TriggerSkillEffect_Transmit_Confirm_Client::EffectID' has a wrong offset!");
//static_assert(offsetof(BUS_GSEventCollection_Evt_TriggerSkillEffect_Transmit_Confirm_Client, EffectInstReq) == 0x000008, "Member 'BUS_GSEventCollection_Evt_TriggerSkillEffect_Transmit_Confirm_Client::EffectInstReq' has a wrong offset!");
//static_assert(offsetof(BUS_GSEventCollection_Evt_TriggerSkillEffect_Transmit_Confirm_Client, InnerTarget) == 0x0000D8, "Member 'BUS_GSEventCollection_Evt_TriggerSkillEffect_Transmit_Confirm_Client::InnerTarget' has a wrong offset!");
//static_assert(offsetof(BUS_GSEventCollection_Evt_TriggerSkillEffect_Transmit_Confirm_Client, PredictionKeyId) == 0x0000E4, "Member 'BUS_GSEventCollection_Evt_TriggerSkillEffect_Transmit_Confirm_Client::PredictionKeyId' has a wrong offset!");

// Function b1-Managed.BUS_GSEventCollection.Evt_OnlineChallengeBeginToUI_Multicast_Invoke
// 0x0008 (0x0008 - 0x0000)
struct BUS_GSEventCollection_Evt_OnlineChallengeBeginToUI_Multicast_Invoke final
{
public:
	int32                                         P1;                                                // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         P2;                                                // 0x0004(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
//static_assert(alignof(BUS_GSEventCollection_Evt_OnlineChallengeBeginToUI_Multicast_Invoke) == 0x000004, "Wrong alignment on BUS_GSEventCollection_Evt_OnlineChallengeBeginToUI_Multicast_Invoke");
//static_assert(sizeof(BUS_GSEventCollection_Evt_OnlineChallengeBeginToUI_Multicast_Invoke) == 0x000008, "Wrong size on BUS_GSEventCollection_Evt_OnlineChallengeBeginToUI_Multicast_Invoke");
//static_assert(offsetof(BUS_GSEventCollection_Evt_OnlineChallengeBeginToUI_Multicast_Invoke, P1) == 0x000000, "Member 'BUS_GSEventCollection_Evt_OnlineChallengeBeginToUI_Multicast_Invoke::P1' has a wrong offset!");
//static_assert(offsetof(BUS_GSEventCollection_Evt_OnlineChallengeBeginToUI_Multicast_Invoke, P2) == 0x000004, "Member 'BUS_GSEventCollection_Evt_OnlineChallengeBeginToUI_Multicast_Invoke::P2' has a wrong offset!");

// Function b1-Managed.BUS_GSEventCollection.Evt_OnBuffLayerChangedNotify_Multicast_Invoke
// 0x000C (0x000C - 0x0000)
struct BUS_GSEventCollection_Evt_OnBuffLayerChangedNotify_Multicast_Invoke final
{
public:
	int32                                         BuffID;                                            // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Layer_OldValue;                                    // 0x0004(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Layer_NewValue;                                    // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
//static_assert(alignof(BUS_GSEventCollection_Evt_OnBuffLayerChangedNotify_Multicast_Invoke) == 0x000004, "Wrong alignment on BUS_GSEventCollection_Evt_OnBuffLayerChangedNotify_Multicast_Invoke");
//static_assert(sizeof(BUS_GSEventCollection_Evt_OnBuffLayerChangedNotify_Multicast_Invoke) == 0x00000C, "Wrong size on BUS_GSEventCollection_Evt_OnBuffLayerChangedNotify_Multicast_Invoke");
//static_assert(offsetof(BUS_GSEventCollection_Evt_OnBuffLayerChangedNotify_Multicast_Invoke, BuffID) == 0x000000, "Member 'BUS_GSEventCollection_Evt_OnBuffLayerChangedNotify_Multicast_Invoke::BuffID' has a wrong offset!");
//static_assert(offsetof(BUS_GSEventCollection_Evt_OnBuffLayerChangedNotify_Multicast_Invoke, Layer_OldValue) == 0x000004, "Member 'BUS_GSEventCollection_Evt_OnBuffLayerChangedNotify_Multicast_Invoke::Layer_OldValue' has a wrong offset!");
//static_assert(offsetof(BUS_GSEventCollection_Evt_OnBuffLayerChangedNotify_Multicast_Invoke, Layer_NewValue) == 0x000008, "Member 'BUS_GSEventCollection_Evt_OnBuffLayerChangedNotify_Multicast_Invoke::Layer_NewValue' has a wrong offset!");

// Function b1-Managed.BUS_GSEventCollection.Evt_TriggerNormalDamageEffectSPTransmitServer
// 0x0148 (0x0148 - 0x0000)
struct BUS_GSEventCollection_Evt_TriggerNormalDamageEffectSPTransmitServer final
{
public:
	class AActor*                                 Attacker;                                          // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FSkillDamageConfig                     SkillDamageConfig;                                 // 0x0008(0x0038)(Parm, ZeroConstructor, HasGetValueTypeHash)
	struct FEffectInstReq                         EffectInstReq;                                     // 0x0040(0x00D0)(Parm, NoDestructor, HasGetValueTypeHash)
	struct FBattleAttrSnapShot                    Attacker_AttrMemData;                              // 0x0110(0x0024)(Parm, NoDestructor, HasGetValueTypeHash)
	int32                                         PredictionKeyId;                                   // 0x0134(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         ParentPredictionKeyId;                             // 0x0138(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_13C[0x4];                                      // 0x013C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class AActor*                                 __TriggerActor;                                    // 0x0140(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
//static_assert(alignof(BUS_GSEventCollection_Evt_TriggerNormalDamageEffectSPTransmitServer) == 0x000008, "Wrong alignment on BUS_GSEventCollection_Evt_TriggerNormalDamageEffectSPTransmitServer");
//static_assert(sizeof(BUS_GSEventCollection_Evt_TriggerNormalDamageEffectSPTransmitServer) == 0x000148, "Wrong size on BUS_GSEventCollection_Evt_TriggerNormalDamageEffectSPTransmitServer");
//static_assert(offsetof(BUS_GSEventCollection_Evt_TriggerNormalDamageEffectSPTransmitServer, Attacker) == 0x000000, "Member 'BUS_GSEventCollection_Evt_TriggerNormalDamageEffectSPTransmitServer::Attacker' has a wrong offset!");
//static_assert(offsetof(BUS_GSEventCollection_Evt_TriggerNormalDamageEffectSPTransmitServer, SkillDamageConfig) == 0x000008, "Member 'BUS_GSEventCollection_Evt_TriggerNormalDamageEffectSPTransmitServer::SkillDamageConfig' has a wrong offset!");
//static_assert(offsetof(BUS_GSEventCollection_Evt_TriggerNormalDamageEffectSPTransmitServer, EffectInstReq) == 0x000040, "Member 'BUS_GSEventCollection_Evt_TriggerNormalDamageEffectSPTransmitServer::EffectInstReq' has a wrong offset!");
//static_assert(offsetof(BUS_GSEventCollection_Evt_TriggerNormalDamageEffectSPTransmitServer, Attacker_AttrMemData) == 0x000110, "Member 'BUS_GSEventCollection_Evt_TriggerNormalDamageEffectSPTransmitServer::Attacker_AttrMemData' has a wrong offset!");
//static_assert(offsetof(BUS_GSEventCollection_Evt_TriggerNormalDamageEffectSPTransmitServer, PredictionKeyId) == 0x000134, "Member 'BUS_GSEventCollection_Evt_TriggerNormalDamageEffectSPTransmitServer::PredictionKeyId' has a wrong offset!");
//static_assert(offsetof(BUS_GSEventCollection_Evt_TriggerNormalDamageEffectSPTransmitServer, ParentPredictionKeyId) == 0x000138, "Member 'BUS_GSEventCollection_Evt_TriggerNormalDamageEffectSPTransmitServer::ParentPredictionKeyId' has a wrong offset!");
//static_assert(offsetof(BUS_GSEventCollection_Evt_TriggerNormalDamageEffectSPTransmitServer, __TriggerActor) == 0x000140, "Member 'BUS_GSEventCollection_Evt_TriggerNormalDamageEffectSPTransmitServer::__TriggerActor' has a wrong offset!");

// Function b1-Managed.BUS_GSEventCollection.Evt_TriggerSkillEffectByBuff_Multicast_Invoke
// 0x00F0 (0x00F0 - 0x0000)
struct BUS_GSEventCollection_Evt_TriggerSkillEffectByBuff_Multicast_Invoke final
{
public:
	int32                                         BuffID;                                            // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_4[0x4];                                        // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class AActor*                                 Target;                                            // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         EffectIdx;                                         // 0x0010(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_14[0x4];                                       // 0x0014(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FEffectInstReq                         EffectInstReq;                                     // 0x0018(0x00D0)(Parm, NoDestructor, HasGetValueTypeHash)
	uint8                                         bIsPeriodical : 1;                                 // 0x00E8(0x0001)(BitIndex: 0x00, PropSize: 0x0001 (Parm, NoDestructor, HasGetValueTypeHash))
};
//static_assert(alignof(BUS_GSEventCollection_Evt_TriggerSkillEffectByBuff_Multicast_Invoke) == 0x000008, "Wrong alignment on BUS_GSEventCollection_Evt_TriggerSkillEffectByBuff_Multicast_Invoke");
//static_assert(sizeof(BUS_GSEventCollection_Evt_TriggerSkillEffectByBuff_Multicast_Invoke) == 0x0000F0, "Wrong size on BUS_GSEventCollection_Evt_TriggerSkillEffectByBuff_Multicast_Invoke");
//static_assert(offsetof(BUS_GSEventCollection_Evt_TriggerSkillEffectByBuff_Multicast_Invoke, BuffID) == 0x000000, "Member 'BUS_GSEventCollection_Evt_TriggerSkillEffectByBuff_Multicast_Invoke::BuffID' has a wrong offset!");
//static_assert(offsetof(BUS_GSEventCollection_Evt_TriggerSkillEffectByBuff_Multicast_Invoke, Target) == 0x000008, "Member 'BUS_GSEventCollection_Evt_TriggerSkillEffectByBuff_Multicast_Invoke::Target' has a wrong offset!");
//static_assert(offsetof(BUS_GSEventCollection_Evt_TriggerSkillEffectByBuff_Multicast_Invoke, EffectIdx) == 0x000010, "Member 'BUS_GSEventCollection_Evt_TriggerSkillEffectByBuff_Multicast_Invoke::EffectIdx' has a wrong offset!");
//static_assert(offsetof(BUS_GSEventCollection_Evt_TriggerSkillEffectByBuff_Multicast_Invoke, EffectInstReq) == 0x000018, "Member 'BUS_GSEventCollection_Evt_TriggerSkillEffectByBuff_Multicast_Invoke::EffectInstReq' has a wrong offset!");

// Function b1-Managed.BUS_GSEventCollection.Evt_TriggerNormalDamageEffect_RollBack_Client
// 0x0138 (0x0138 - 0x0000)
struct BUS_GSEventCollection_Evt_TriggerNormalDamageEffect_RollBack_Client final
{
public:
	class AActor*                                 Attacker;                                          // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FSkillDamageConfig                     SkillDamageConfig;                                 // 0x0008(0x0038)(Parm, ZeroConstructor, HasGetValueTypeHash)
	struct FEffectInstReq                         EffectInstReq;                                     // 0x0040(0x00D0)(Parm, NoDestructor, HasGetValueTypeHash)
	struct FBattleAttrSnapShot                    Attacker_AttrMemData;                              // 0x0110(0x0024)(Parm, NoDestructor, HasGetValueTypeHash)
	int32                                         PredictionKeyId;                                   // 0x0134(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
//static_assert(alignof(BUS_GSEventCollection_Evt_TriggerNormalDamageEffect_RollBack_Client) == 0x000008, "Wrong alignment on BUS_GSEventCollection_Evt_TriggerNormalDamageEffect_RollBack_Client");
//static_assert(sizeof(BUS_GSEventCollection_Evt_TriggerNormalDamageEffect_RollBack_Client) == 0x000138, "Wrong size on BUS_GSEventCollection_Evt_TriggerNormalDamageEffect_RollBack_Client");
//static_assert(offsetof(BUS_GSEventCollection_Evt_TriggerNormalDamageEffect_RollBack_Client, Attacker) == 0x000000, "Member 'BUS_GSEventCollection_Evt_TriggerNormalDamageEffect_RollBack_Client::Attacker' has a wrong offset!");
//static_assert(offsetof(BUS_GSEventCollection_Evt_TriggerNormalDamageEffect_RollBack_Client, SkillDamageConfig) == 0x000008, "Member 'BUS_GSEventCollection_Evt_TriggerNormalDamageEffect_RollBack_Client::SkillDamageConfig' has a wrong offset!");
//static_assert(offsetof(BUS_GSEventCollection_Evt_TriggerNormalDamageEffect_RollBack_Client, EffectInstReq) == 0x000040, "Member 'BUS_GSEventCollection_Evt_TriggerNormalDamageEffect_RollBack_Client::EffectInstReq' has a wrong offset!");
//static_assert(offsetof(BUS_GSEventCollection_Evt_TriggerNormalDamageEffect_RollBack_Client, Attacker_AttrMemData) == 0x000110, "Member 'BUS_GSEventCollection_Evt_TriggerNormalDamageEffect_RollBack_Client::Attacker_AttrMemData' has a wrong offset!");
//static_assert(offsetof(BUS_GSEventCollection_Evt_TriggerNormalDamageEffect_RollBack_Client, PredictionKeyId) == 0x000134, "Member 'BUS_GSEventCollection_Evt_TriggerNormalDamageEffect_RollBack_Client::PredictionKeyId' has a wrong offset!");

// Function b1-Managed.BUS_GSEventCollection.Evt_UnitCastSkillTryCMultiCast_Confirm_Client
// 0x001C (0x001C - 0x0000)
struct BUS_GSEventCollection_Evt_UnitCastSkillTryCMultiCast_Confirm_Client final
{
public:
	struct FCastSkillInfo                         CSI;                                               // 0x0000(0x0018)(Parm, NoDestructor, HasGetValueTypeHash)
	int32                                         PredictionKeyId;                                   // 0x0018(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
//static_assert(alignof(BUS_GSEventCollection_Evt_UnitCastSkillTryCMultiCast_Confirm_Client) == 0x000004, "Wrong alignment on BUS_GSEventCollection_Evt_UnitCastSkillTryCMultiCast_Confirm_Client");
//static_assert(sizeof(BUS_GSEventCollection_Evt_UnitCastSkillTryCMultiCast_Confirm_Client) == 0x00001C, "Wrong size on BUS_GSEventCollection_Evt_UnitCastSkillTryCMultiCast_Confirm_Client");
//static_assert(offsetof(BUS_GSEventCollection_Evt_UnitCastSkillTryCMultiCast_Confirm_Client, CSI) == 0x000000, "Member 'BUS_GSEventCollection_Evt_UnitCastSkillTryCMultiCast_Confirm_Client::CSI' has a wrong offset!");
//static_assert(offsetof(BUS_GSEventCollection_Evt_UnitCastSkillTryCMultiCast_Confirm_Client, PredictionKeyId) == 0x000018, "Member 'BUS_GSEventCollection_Evt_UnitCastSkillTryCMultiCast_Confirm_Client::PredictionKeyId' has a wrong offset!");

// Function b1-Managed.BUS_GSEventCollection.Evt_TriggerSkillEffectBySkill_RollBack_Client
// 0x00F0 (0x00F0 - 0x0000)
struct BUS_GSEventCollection_Evt_TriggerSkillEffectBySkill_RollBack_Client final
{
public:
	int32                                         EffectID;                                          // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_4[0x4];                                        // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class AActor*                                 Caster;                                            // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class AActor*                                 Target;                                            // 0x0010(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FEffectInstReq                         EffectInstReq;                                     // 0x0018(0x00D0)(Parm, NoDestructor, HasGetValueTypeHash)
	int32                                         PredictionKeyId;                                   // 0x00E8(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
//static_assert(alignof(BUS_GSEventCollection_Evt_TriggerSkillEffectBySkill_RollBack_Client) == 0x000008, "Wrong alignment on BUS_GSEventCollection_Evt_TriggerSkillEffectBySkill_RollBack_Client");
//static_assert(sizeof(BUS_GSEventCollection_Evt_TriggerSkillEffectBySkill_RollBack_Client) == 0x0000F0, "Wrong size on BUS_GSEventCollection_Evt_TriggerSkillEffectBySkill_RollBack_Client");
//static_assert(offsetof(BUS_GSEventCollection_Evt_TriggerSkillEffectBySkill_RollBack_Client, EffectID) == 0x000000, "Member 'BUS_GSEventCollection_Evt_TriggerSkillEffectBySkill_RollBack_Client::EffectID' has a wrong offset!");
//static_assert(offsetof(BUS_GSEventCollection_Evt_TriggerSkillEffectBySkill_RollBack_Client, Caster) == 0x000008, "Member 'BUS_GSEventCollection_Evt_TriggerSkillEffectBySkill_RollBack_Client::Caster' has a wrong offset!");
//static_assert(offsetof(BUS_GSEventCollection_Evt_TriggerSkillEffectBySkill_RollBack_Client, Target) == 0x000010, "Member 'BUS_GSEventCollection_Evt_TriggerSkillEffectBySkill_RollBack_Client::Target' has a wrong offset!");
//static_assert(offsetof(BUS_GSEventCollection_Evt_TriggerSkillEffectBySkill_RollBack_Client, EffectInstReq) == 0x000018, "Member 'BUS_GSEventCollection_Evt_TriggerSkillEffectBySkill_RollBack_Client::EffectInstReq' has a wrong offset!");
//static_assert(offsetof(BUS_GSEventCollection_Evt_TriggerSkillEffectBySkill_RollBack_Client, PredictionKeyId) == 0x0000E8, "Member 'BUS_GSEventCollection_Evt_TriggerSkillEffectBySkill_RollBack_Client::PredictionKeyId' has a wrong offset!");

// Function b1-Managed.BUS_GSEventCollection.Evt_CastSkillWithAnimMontage_RollBack_Client
// 0x0020 (0x0020 - 0x0000)
struct BUS_GSEventCollection_Evt_CastSkillWithAnimMontage_RollBack_Client final
{
public:
	class UAnimMontage*                           Montage;                                           // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         PlayTimeRate;                                      // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         MontagePosOffset;                                  // 0x000C(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class FName                                   StartSectionName;                                  // 0x0010(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	EMontageBindReason                            Reason;                                            // 0x0018(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_19[0x3];                                       // 0x0019(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         PredictionKeyId;                                   // 0x001C(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
//static_assert(alignof(BUS_GSEventCollection_Evt_CastSkillWithAnimMontage_RollBack_Client) == 0x000008, "Wrong alignment on BUS_GSEventCollection_Evt_CastSkillWithAnimMontage_RollBack_Client");
//static_assert(sizeof(BUS_GSEventCollection_Evt_CastSkillWithAnimMontage_RollBack_Client) == 0x000020, "Wrong size on BUS_GSEventCollection_Evt_CastSkillWithAnimMontage_RollBack_Client");
//static_assert(offsetof(BUS_GSEventCollection_Evt_CastSkillWithAnimMontage_RollBack_Client, Montage) == 0x000000, "Member 'BUS_GSEventCollection_Evt_CastSkillWithAnimMontage_RollBack_Client::Montage' has a wrong offset!");
//static_assert(offsetof(BUS_GSEventCollection_Evt_CastSkillWithAnimMontage_RollBack_Client, PlayTimeRate) == 0x000008, "Member 'BUS_GSEventCollection_Evt_CastSkillWithAnimMontage_RollBack_Client::PlayTimeRate' has a wrong offset!");
//static_assert(offsetof(BUS_GSEventCollection_Evt_CastSkillWithAnimMontage_RollBack_Client, MontagePosOffset) == 0x00000C, "Member 'BUS_GSEventCollection_Evt_CastSkillWithAnimMontage_RollBack_Client::MontagePosOffset' has a wrong offset!");
//static_assert(offsetof(BUS_GSEventCollection_Evt_CastSkillWithAnimMontage_RollBack_Client, StartSectionName) == 0x000010, "Member 'BUS_GSEventCollection_Evt_CastSkillWithAnimMontage_RollBack_Client::StartSectionName' has a wrong offset!");
//static_assert(offsetof(BUS_GSEventCollection_Evt_CastSkillWithAnimMontage_RollBack_Client, Reason) == 0x000018, "Member 'BUS_GSEventCollection_Evt_CastSkillWithAnimMontage_RollBack_Client::Reason' has a wrong offset!");
//static_assert(offsetof(BUS_GSEventCollection_Evt_CastSkillWithAnimMontage_RollBack_Client, PredictionKeyId) == 0x00001C, "Member 'BUS_GSEventCollection_Evt_CastSkillWithAnimMontage_RollBack_Client::PredictionKeyId' has a wrong offset!");

// Function b1-Managed.BUS_GSEventCollection.Evt_TriggerNormalDamageEffect_Confirm_Client
// 0x0138 (0x0138 - 0x0000)
struct BUS_GSEventCollection_Evt_TriggerNormalDamageEffect_Confirm_Client final
{
public:
	class AActor*                                 Attacker;                                          // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FSkillDamageConfig                     SkillDamageConfig;                                 // 0x0008(0x0038)(Parm, ZeroConstructor, HasGetValueTypeHash)
	struct FEffectInstReq                         EffectInstReq;                                     // 0x0040(0x00D0)(Parm, NoDestructor, HasGetValueTypeHash)
	struct FBattleAttrSnapShot                    Attacker_AttrMemData;                              // 0x0110(0x0024)(Parm, NoDestructor, HasGetValueTypeHash)
	int32                                         PredictionKeyId;                                   // 0x0134(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
//static_assert(alignof(BUS_GSEventCollection_Evt_TriggerNormalDamageEffect_Confirm_Client) == 0x000008, "Wrong alignment on BUS_GSEventCollection_Evt_TriggerNormalDamageEffect_Confirm_Client");
//static_assert(sizeof(BUS_GSEventCollection_Evt_TriggerNormalDamageEffect_Confirm_Client) == 0x000138, "Wrong size on BUS_GSEventCollection_Evt_TriggerNormalDamageEffect_Confirm_Client");
//static_assert(offsetof(BUS_GSEventCollection_Evt_TriggerNormalDamageEffect_Confirm_Client, Attacker) == 0x000000, "Member 'BUS_GSEventCollection_Evt_TriggerNormalDamageEffect_Confirm_Client::Attacker' has a wrong offset!");
//static_assert(offsetof(BUS_GSEventCollection_Evt_TriggerNormalDamageEffect_Confirm_Client, SkillDamageConfig) == 0x000008, "Member 'BUS_GSEventCollection_Evt_TriggerNormalDamageEffect_Confirm_Client::SkillDamageConfig' has a wrong offset!");
//static_assert(offsetof(BUS_GSEventCollection_Evt_TriggerNormalDamageEffect_Confirm_Client, EffectInstReq) == 0x000040, "Member 'BUS_GSEventCollection_Evt_TriggerNormalDamageEffect_Confirm_Client::EffectInstReq' has a wrong offset!");
//static_assert(offsetof(BUS_GSEventCollection_Evt_TriggerNormalDamageEffect_Confirm_Client, Attacker_AttrMemData) == 0x000110, "Member 'BUS_GSEventCollection_Evt_TriggerNormalDamageEffect_Confirm_Client::Attacker_AttrMemData' has a wrong offset!");
//static_assert(offsetof(BUS_GSEventCollection_Evt_TriggerNormalDamageEffect_Confirm_Client, PredictionKeyId) == 0x000134, "Member 'BUS_GSEventCollection_Evt_TriggerNormalDamageEffect_Confirm_Client::PredictionKeyId' has a wrong offset!");

// Function b1-Managed.BUS_GSEventCollection.Evt_TriggerSkillEffectBySkill_Confirm_Client
// 0x00F0 (0x00F0 - 0x0000)
struct BUS_GSEventCollection_Evt_TriggerSkillEffectBySkill_Confirm_Client final
{
public:
	int32                                         EffectID;                                          // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_4[0x4];                                        // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class AActor*                                 Caster;                                            // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class AActor*                                 Target;                                            // 0x0010(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FEffectInstReq                         EffectInstReq;                                     // 0x0018(0x00D0)(Parm, NoDestructor, HasGetValueTypeHash)
	int32                                         PredictionKeyId;                                   // 0x00E8(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
//static_assert(alignof(BUS_GSEventCollection_Evt_TriggerSkillEffectBySkill_Confirm_Client) == 0x000008, "Wrong alignment on BUS_GSEventCollection_Evt_TriggerSkillEffectBySkill_Confirm_Client");
//static_assert(sizeof(BUS_GSEventCollection_Evt_TriggerSkillEffectBySkill_Confirm_Client) == 0x0000F0, "Wrong size on BUS_GSEventCollection_Evt_TriggerSkillEffectBySkill_Confirm_Client");
//static_assert(offsetof(BUS_GSEventCollection_Evt_TriggerSkillEffectBySkill_Confirm_Client, EffectID) == 0x000000, "Member 'BUS_GSEventCollection_Evt_TriggerSkillEffectBySkill_Confirm_Client::EffectID' has a wrong offset!");
//static_assert(offsetof(BUS_GSEventCollection_Evt_TriggerSkillEffectBySkill_Confirm_Client, Caster) == 0x000008, "Member 'BUS_GSEventCollection_Evt_TriggerSkillEffectBySkill_Confirm_Client::Caster' has a wrong offset!");
//static_assert(offsetof(BUS_GSEventCollection_Evt_TriggerSkillEffectBySkill_Confirm_Client, Target) == 0x000010, "Member 'BUS_GSEventCollection_Evt_TriggerSkillEffectBySkill_Confirm_Client::Target' has a wrong offset!");
//static_assert(offsetof(BUS_GSEventCollection_Evt_TriggerSkillEffectBySkill_Confirm_Client, EffectInstReq) == 0x000018, "Member 'BUS_GSEventCollection_Evt_TriggerSkillEffectBySkill_Confirm_Client::EffectInstReq' has a wrong offset!");
//static_assert(offsetof(BUS_GSEventCollection_Evt_TriggerSkillEffectBySkill_Confirm_Client, PredictionKeyId) == 0x0000E8, "Member 'BUS_GSEventCollection_Evt_TriggerSkillEffectBySkill_Confirm_Client::PredictionKeyId' has a wrong offset!");

// Function b1-Managed.BUS_GSEventCollection.Evt_SceneObjTransitByEvent_Multicast_Invoke
// 0x0008 (0x0008 - 0x0000)
struct BUS_GSEventCollection_Evt_SceneObjTransitByEvent_Multicast_Invoke final
{
public:
	struct FGameplayTag                           Tag;                                               // 0x0000(0x0008)(Parm, NoDestructor, HasGetValueTypeHash)
};
//static_assert(alignof(BUS_GSEventCollection_Evt_SceneObjTransitByEvent_Multicast_Invoke) == 0x000004, "Wrong alignment on BUS_GSEventCollection_Evt_SceneObjTransitByEvent_Multicast_Invoke");
//static_assert(sizeof(BUS_GSEventCollection_Evt_SceneObjTransitByEvent_Multicast_Invoke) == 0x000008, "Wrong size on BUS_GSEventCollection_Evt_SceneObjTransitByEvent_Multicast_Invoke");
//static_assert(offsetof(BUS_GSEventCollection_Evt_SceneObjTransitByEvent_Multicast_Invoke, Tag) == 0x000000, "Member 'BUS_GSEventCollection_Evt_SceneObjTransitByEvent_Multicast_Invoke::Tag' has a wrong offset!");

// Function b1-Managed.BUS_GSEventCollection.Evt_TeleportWithRebirthPointFailedMultiCast
// 0x0008 (0x0008 - 0x0000)
struct BUS_GSEventCollection_Evt_TeleportWithRebirthPointFailedMultiCast final
{
public:
	int32                                         RebirthPointConfigID;                              // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	ETeleportReason                               TeleportReason;                                    // 0x0004(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
//static_assert(alignof(BUS_GSEventCollection_Evt_TeleportWithRebirthPointFailedMultiCast) == 0x000004, "Wrong alignment on BUS_GSEventCollection_Evt_TeleportWithRebirthPointFailedMultiCast");
//static_assert(sizeof(BUS_GSEventCollection_Evt_TeleportWithRebirthPointFailedMultiCast) == 0x000008, "Wrong size on BUS_GSEventCollection_Evt_TeleportWithRebirthPointFailedMultiCast");
//static_assert(offsetof(BUS_GSEventCollection_Evt_TeleportWithRebirthPointFailedMultiCast, RebirthPointConfigID) == 0x000000, "Member 'BUS_GSEventCollection_Evt_TeleportWithRebirthPointFailedMultiCast::RebirthPointConfigID' has a wrong offset!");
//static_assert(offsetof(BUS_GSEventCollection_Evt_TeleportWithRebirthPointFailedMultiCast, TeleportReason) == 0x000004, "Member 'BUS_GSEventCollection_Evt_TeleportWithRebirthPointFailedMultiCast::TeleportReason' has a wrong offset!");

// Function b1-Managed.BUS_GSEventCollection.Evt_CastSkillWithAnimMontage_Confirm_Client
// 0x0020 (0x0020 - 0x0000)
struct BUS_GSEventCollection_Evt_CastSkillWithAnimMontage_Confirm_Client final
{
public:
	class UAnimMontage*                           Montage;                                           // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         PlayTimeRate;                                      // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         MontagePosOffset;                                  // 0x000C(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class FName                                   StartSectionName;                                  // 0x0010(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	EMontageBindReason                            Reason;                                            // 0x0018(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_19[0x3];                                       // 0x0019(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         PredictionKeyId;                                   // 0x001C(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
//static_assert(alignof(BUS_GSEventCollection_Evt_CastSkillWithAnimMontage_Confirm_Client) == 0x000008, "Wrong alignment on BUS_GSEventCollection_Evt_CastSkillWithAnimMontage_Confirm_Client");
//static_assert(sizeof(BUS_GSEventCollection_Evt_CastSkillWithAnimMontage_Confirm_Client) == 0x000020, "Wrong size on BUS_GSEventCollection_Evt_CastSkillWithAnimMontage_Confirm_Client");
//static_assert(offsetof(BUS_GSEventCollection_Evt_CastSkillWithAnimMontage_Confirm_Client, Montage) == 0x000000, "Member 'BUS_GSEventCollection_Evt_CastSkillWithAnimMontage_Confirm_Client::Montage' has a wrong offset!");
//static_assert(offsetof(BUS_GSEventCollection_Evt_CastSkillWithAnimMontage_Confirm_Client, PlayTimeRate) == 0x000008, "Member 'BUS_GSEventCollection_Evt_CastSkillWithAnimMontage_Confirm_Client::PlayTimeRate' has a wrong offset!");
//static_assert(offsetof(BUS_GSEventCollection_Evt_CastSkillWithAnimMontage_Confirm_Client, MontagePosOffset) == 0x00000C, "Member 'BUS_GSEventCollection_Evt_CastSkillWithAnimMontage_Confirm_Client::MontagePosOffset' has a wrong offset!");
//static_assert(offsetof(BUS_GSEventCollection_Evt_CastSkillWithAnimMontage_Confirm_Client, StartSectionName) == 0x000010, "Member 'BUS_GSEventCollection_Evt_CastSkillWithAnimMontage_Confirm_Client::StartSectionName' has a wrong offset!");
//static_assert(offsetof(BUS_GSEventCollection_Evt_CastSkillWithAnimMontage_Confirm_Client, Reason) == 0x000018, "Member 'BUS_GSEventCollection_Evt_CastSkillWithAnimMontage_Confirm_Client::Reason' has a wrong offset!");
//static_assert(offsetof(BUS_GSEventCollection_Evt_CastSkillWithAnimMontage_Confirm_Client, PredictionKeyId) == 0x00001C, "Member 'BUS_GSEventCollection_Evt_CastSkillWithAnimMontage_Confirm_Client::PredictionKeyId' has a wrong offset!");

// Function b1-Managed.BUS_GSEventCollection.Evt_BattleLogicChangeEquip_Multicast_Invoke
// 0x0008 (0x0008 - 0x0000)
struct BUS_GSEventCollection_Evt_BattleLogicChangeEquip_Multicast_Invoke final
{
public:
	EquipPosition                                 EquipPosition;                                     // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_1[0x3];                                        // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         EquipID;                                           // 0x0004(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
//static_assert(alignof(BUS_GSEventCollection_Evt_BattleLogicChangeEquip_Multicast_Invoke) == 0x000004, "Wrong alignment on BUS_GSEventCollection_Evt_BattleLogicChangeEquip_Multicast_Invoke");
//static_assert(sizeof(BUS_GSEventCollection_Evt_BattleLogicChangeEquip_Multicast_Invoke) == 0x000008, "Wrong size on BUS_GSEventCollection_Evt_BattleLogicChangeEquip_Multicast_Invoke");
//static_assert(offsetof(BUS_GSEventCollection_Evt_BattleLogicChangeEquip_Multicast_Invoke, EquipPosition) == 0x000000, "Member 'BUS_GSEventCollection_Evt_BattleLogicChangeEquip_Multicast_Invoke::EquipPosition' has a wrong offset!");
//static_assert(offsetof(BUS_GSEventCollection_Evt_BattleLogicChangeEquip_Multicast_Invoke, EquipID) == 0x000004, "Member 'BUS_GSEventCollection_Evt_BattleLogicChangeEquip_Multicast_Invoke::EquipID' has a wrong offset!");

// Function b1-Managed.BUS_GSEventCollection.Evt_ClientMultiCastRPCTest2SPTransmitServer
// 0x0030 (0x0030 - 0x0000)
struct BUS_GSEventCollection_Evt_ClientMultiCastRPCTest2SPTransmitServer final
{
public:
	class UAnimMontage*                           Montage;                                           // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         PlayTimeRate;                                      // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         MontagePosOffset;                                  // 0x000C(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class FName                                   StartSectionName;                                  // 0x0010(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	EMontageBindReason                            Reason;                                            // 0x0018(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_19[0x3];                                       // 0x0019(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         PredictionKeyId;                                   // 0x001C(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         ParentPredictionKeyId;                             // 0x0020(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_24[0x4];                                       // 0x0024(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class AActor*                                 __TriggerActor;                                    // 0x0028(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
//static_assert(alignof(BUS_GSEventCollection_Evt_ClientMultiCastRPCTest2SPTransmitServer) == 0x000008, "Wrong alignment on BUS_GSEventCollection_Evt_ClientMultiCastRPCTest2SPTransmitServer");
//static_assert(sizeof(BUS_GSEventCollection_Evt_ClientMultiCastRPCTest2SPTransmitServer) == 0x000030, "Wrong size on BUS_GSEventCollection_Evt_ClientMultiCastRPCTest2SPTransmitServer");
//static_assert(offsetof(BUS_GSEventCollection_Evt_ClientMultiCastRPCTest2SPTransmitServer, Montage) == 0x000000, "Member 'BUS_GSEventCollection_Evt_ClientMultiCastRPCTest2SPTransmitServer::Montage' has a wrong offset!");
//static_assert(offsetof(BUS_GSEventCollection_Evt_ClientMultiCastRPCTest2SPTransmitServer, PlayTimeRate) == 0x000008, "Member 'BUS_GSEventCollection_Evt_ClientMultiCastRPCTest2SPTransmitServer::PlayTimeRate' has a wrong offset!");
//static_assert(offsetof(BUS_GSEventCollection_Evt_ClientMultiCastRPCTest2SPTransmitServer, MontagePosOffset) == 0x00000C, "Member 'BUS_GSEventCollection_Evt_ClientMultiCastRPCTest2SPTransmitServer::MontagePosOffset' has a wrong offset!");
//static_assert(offsetof(BUS_GSEventCollection_Evt_ClientMultiCastRPCTest2SPTransmitServer, StartSectionName) == 0x000010, "Member 'BUS_GSEventCollection_Evt_ClientMultiCastRPCTest2SPTransmitServer::StartSectionName' has a wrong offset!");
//static_assert(offsetof(BUS_GSEventCollection_Evt_ClientMultiCastRPCTest2SPTransmitServer, Reason) == 0x000018, "Member 'BUS_GSEventCollection_Evt_ClientMultiCastRPCTest2SPTransmitServer::Reason' has a wrong offset!");
//static_assert(offsetof(BUS_GSEventCollection_Evt_ClientMultiCastRPCTest2SPTransmitServer, PredictionKeyId) == 0x00001C, "Member 'BUS_GSEventCollection_Evt_ClientMultiCastRPCTest2SPTransmitServer::PredictionKeyId' has a wrong offset!");
//static_assert(offsetof(BUS_GSEventCollection_Evt_ClientMultiCastRPCTest2SPTransmitServer, ParentPredictionKeyId) == 0x000020, "Member 'BUS_GSEventCollection_Evt_ClientMultiCastRPCTest2SPTransmitServer::ParentPredictionKeyId' has a wrong offset!");
//static_assert(offsetof(BUS_GSEventCollection_Evt_ClientMultiCastRPCTest2SPTransmitServer, __TriggerActor) == 0x000028, "Member 'BUS_GSEventCollection_Evt_ClientMultiCastRPCTest2SPTransmitServer::__TriggerActor' has a wrong offset!");

// Function b1-Managed.BUS_GSEventCollection.Evt_OnlineChallengeEndToUI_Multicast_Invoke
// 0x0004 (0x0004 - 0x0000)
struct BUS_GSEventCollection_Evt_OnlineChallengeEndToUI_Multicast_Invoke final
{
public:
	int32                                         P1;                                                // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
//static_assert(alignof(BUS_GSEventCollection_Evt_OnlineChallengeEndToUI_Multicast_Invoke) == 0x000004, "Wrong alignment on BUS_GSEventCollection_Evt_OnlineChallengeEndToUI_Multicast_Invoke");
//static_assert(sizeof(BUS_GSEventCollection_Evt_OnlineChallengeEndToUI_Multicast_Invoke) == 0x000004, "Wrong size on BUS_GSEventCollection_Evt_OnlineChallengeEndToUI_Multicast_Invoke");
//static_assert(offsetof(BUS_GSEventCollection_Evt_OnlineChallengeEndToUI_Multicast_Invoke, P1) == 0x000000, "Member 'BUS_GSEventCollection_Evt_OnlineChallengeEndToUI_Multicast_Invoke::P1' has a wrong offset!");

// Function b1-Managed.BUS_GSEventCollection.Evt_ClientMultiCastRPCTest2_RollBack_Client
// 0x0020 (0x0020 - 0x0000)
struct BUS_GSEventCollection_Evt_ClientMultiCastRPCTest2_RollBack_Client final
{
public:
	class UAnimMontage*                           Montage;                                           // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         PlayTimeRate;                                      // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         MontagePosOffset;                                  // 0x000C(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class FName                                   StartSectionName;                                  // 0x0010(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	EMontageBindReason                            Reason;                                            // 0x0018(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_19[0x3];                                       // 0x0019(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         PredictionKeyId;                                   // 0x001C(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
//static_assert(alignof(BUS_GSEventCollection_Evt_ClientMultiCastRPCTest2_RollBack_Client) == 0x000008, "Wrong alignment on BUS_GSEventCollection_Evt_ClientMultiCastRPCTest2_RollBack_Client");
//static_assert(sizeof(BUS_GSEventCollection_Evt_ClientMultiCastRPCTest2_RollBack_Client) == 0x000020, "Wrong size on BUS_GSEventCollection_Evt_ClientMultiCastRPCTest2_RollBack_Client");
//static_assert(offsetof(BUS_GSEventCollection_Evt_ClientMultiCastRPCTest2_RollBack_Client, Montage) == 0x000000, "Member 'BUS_GSEventCollection_Evt_ClientMultiCastRPCTest2_RollBack_Client::Montage' has a wrong offset!");
//static_assert(offsetof(BUS_GSEventCollection_Evt_ClientMultiCastRPCTest2_RollBack_Client, PlayTimeRate) == 0x000008, "Member 'BUS_GSEventCollection_Evt_ClientMultiCastRPCTest2_RollBack_Client::PlayTimeRate' has a wrong offset!");
//static_assert(offsetof(BUS_GSEventCollection_Evt_ClientMultiCastRPCTest2_RollBack_Client, MontagePosOffset) == 0x00000C, "Member 'BUS_GSEventCollection_Evt_ClientMultiCastRPCTest2_RollBack_Client::MontagePosOffset' has a wrong offset!");
//static_assert(offsetof(BUS_GSEventCollection_Evt_ClientMultiCastRPCTest2_RollBack_Client, StartSectionName) == 0x000010, "Member 'BUS_GSEventCollection_Evt_ClientMultiCastRPCTest2_RollBack_Client::StartSectionName' has a wrong offset!");
//static_assert(offsetof(BUS_GSEventCollection_Evt_ClientMultiCastRPCTest2_RollBack_Client, Reason) == 0x000018, "Member 'BUS_GSEventCollection_Evt_ClientMultiCastRPCTest2_RollBack_Client::Reason' has a wrong offset!");
//static_assert(offsetof(BUS_GSEventCollection_Evt_ClientMultiCastRPCTest2_RollBack_Client, PredictionKeyId) == 0x00001C, "Member 'BUS_GSEventCollection_Evt_ClientMultiCastRPCTest2_RollBack_Client::PredictionKeyId' has a wrong offset!");

// Function b1-Managed.BUS_GSEventCollection.Evt_FTB_IncreaseAttrFloat_Multicast_Invoke
// 0x0008 (0x0008 - 0x0000)
struct BUS_GSEventCollection_Evt_FTB_IncreaseAttrFloat_Multicast_Invoke final
{
public:
	EBGUAttrFloat                                 AttrID;                                            // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_1[0x3];                                        // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         IncreaseValue;                                     // 0x0004(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
//static_assert(alignof(BUS_GSEventCollection_Evt_FTB_IncreaseAttrFloat_Multicast_Invoke) == 0x000004, "Wrong alignment on BUS_GSEventCollection_Evt_FTB_IncreaseAttrFloat_Multicast_Invoke");
//static_assert(sizeof(BUS_GSEventCollection_Evt_FTB_IncreaseAttrFloat_Multicast_Invoke) == 0x000008, "Wrong size on BUS_GSEventCollection_Evt_FTB_IncreaseAttrFloat_Multicast_Invoke");
//static_assert(offsetof(BUS_GSEventCollection_Evt_FTB_IncreaseAttrFloat_Multicast_Invoke, AttrID) == 0x000000, "Member 'BUS_GSEventCollection_Evt_FTB_IncreaseAttrFloat_Multicast_Invoke::AttrID' has a wrong offset!");
//static_assert(offsetof(BUS_GSEventCollection_Evt_FTB_IncreaseAttrFloat_Multicast_Invoke, IncreaseValue) == 0x000004, "Member 'BUS_GSEventCollection_Evt_FTB_IncreaseAttrFloat_Multicast_Invoke::IncreaseValue' has a wrong offset!");

// Function b1-Managed.BUS_GSEventCollection.Evt_SkillRotateTraceActor_Multicast_Invoke
// 0x0010 (0x0010 - 0x0000)
struct BUS_GSEventCollection_Evt_SkillRotateTraceActor_Multicast_Invoke final
{
public:
	class AActor*                                 TargetActor;                                       // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         TurnSpeed;                                         // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
//static_assert(alignof(BUS_GSEventCollection_Evt_SkillRotateTraceActor_Multicast_Invoke) == 0x000008, "Wrong alignment on BUS_GSEventCollection_Evt_SkillRotateTraceActor_Multicast_Invoke");
//static_assert(sizeof(BUS_GSEventCollection_Evt_SkillRotateTraceActor_Multicast_Invoke) == 0x000010, "Wrong size on BUS_GSEventCollection_Evt_SkillRotateTraceActor_Multicast_Invoke");
//static_assert(offsetof(BUS_GSEventCollection_Evt_SkillRotateTraceActor_Multicast_Invoke, TargetActor) == 0x000000, "Member 'BUS_GSEventCollection_Evt_SkillRotateTraceActor_Multicast_Invoke::TargetActor' has a wrong offset!");
//static_assert(offsetof(BUS_GSEventCollection_Evt_SkillRotateTraceActor_Multicast_Invoke, TurnSpeed) == 0x000008, "Member 'BUS_GSEventCollection_Evt_SkillRotateTraceActor_Multicast_Invoke::TurnSpeed' has a wrong offset!");

// Function b1-Managed.BUS_GSEventCollection.Evt_ClientMultiCastRPCTest2_Confirm_Client
// 0x0020 (0x0020 - 0x0000)
struct BUS_GSEventCollection_Evt_ClientMultiCastRPCTest2_Confirm_Client final
{
public:
	class UAnimMontage*                           Montage;                                           // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         PlayTimeRate;                                      // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         MontagePosOffset;                                  // 0x000C(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class FName                                   StartSectionName;                                  // 0x0010(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	EMontageBindReason                            Reason;                                            // 0x0018(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_19[0x3];                                       // 0x0019(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         PredictionKeyId;                                   // 0x001C(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
//static_assert(alignof(BUS_GSEventCollection_Evt_ClientMultiCastRPCTest2_Confirm_Client) == 0x000008, "Wrong alignment on BUS_GSEventCollection_Evt_ClientMultiCastRPCTest2_Confirm_Client");
//static_assert(sizeof(BUS_GSEventCollection_Evt_ClientMultiCastRPCTest2_Confirm_Client) == 0x000020, "Wrong size on BUS_GSEventCollection_Evt_ClientMultiCastRPCTest2_Confirm_Client");
//static_assert(offsetof(BUS_GSEventCollection_Evt_ClientMultiCastRPCTest2_Confirm_Client, Montage) == 0x000000, "Member 'BUS_GSEventCollection_Evt_ClientMultiCastRPCTest2_Confirm_Client::Montage' has a wrong offset!");
//static_assert(offsetof(BUS_GSEventCollection_Evt_ClientMultiCastRPCTest2_Confirm_Client, PlayTimeRate) == 0x000008, "Member 'BUS_GSEventCollection_Evt_ClientMultiCastRPCTest2_Confirm_Client::PlayTimeRate' has a wrong offset!");
//static_assert(offsetof(BUS_GSEventCollection_Evt_ClientMultiCastRPCTest2_Confirm_Client, MontagePosOffset) == 0x00000C, "Member 'BUS_GSEventCollection_Evt_ClientMultiCastRPCTest2_Confirm_Client::MontagePosOffset' has a wrong offset!");
//static_assert(offsetof(BUS_GSEventCollection_Evt_ClientMultiCastRPCTest2_Confirm_Client, StartSectionName) == 0x000010, "Member 'BUS_GSEventCollection_Evt_ClientMultiCastRPCTest2_Confirm_Client::StartSectionName' has a wrong offset!");
//static_assert(offsetof(BUS_GSEventCollection_Evt_ClientMultiCastRPCTest2_Confirm_Client, Reason) == 0x000018, "Member 'BUS_GSEventCollection_Evt_ClientMultiCastRPCTest2_Confirm_Client::Reason' has a wrong offset!");
//static_assert(offsetof(BUS_GSEventCollection_Evt_ClientMultiCastRPCTest2_Confirm_Client, PredictionKeyId) == 0x00001C, "Member 'BUS_GSEventCollection_Evt_ClientMultiCastRPCTest2_Confirm_Client::PredictionKeyId' has a wrong offset!");

// Function b1-Managed.BUS_GSEventCollection.Evt_BuffInstsDictOnRemove_Multicast_Invoke
// 0x0004 (0x0004 - 0x0000)
struct BUS_GSEventCollection_Evt_BuffInstsDictOnRemove_Multicast_Invoke final
{
public:
	int32                                         P1;                                                // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
//static_assert(alignof(BUS_GSEventCollection_Evt_BuffInstsDictOnRemove_Multicast_Invoke) == 0x000004, "Wrong alignment on BUS_GSEventCollection_Evt_BuffInstsDictOnRemove_Multicast_Invoke");
//static_assert(sizeof(BUS_GSEventCollection_Evt_BuffInstsDictOnRemove_Multicast_Invoke) == 0x000004, "Wrong size on BUS_GSEventCollection_Evt_BuffInstsDictOnRemove_Multicast_Invoke");
//static_assert(offsetof(BUS_GSEventCollection_Evt_BuffInstsDictOnRemove_Multicast_Invoke, P1) == 0x000000, "Member 'BUS_GSEventCollection_Evt_BuffInstsDictOnRemove_Multicast_Invoke::P1' has a wrong offset!");

// Function b1-Managed.BUS_GSEventCollection.Evt_BuffRemoveImmediately_Multicast_Invoke
// 0x0008 (0x0008 - 0x0000)
struct BUS_GSEventCollection_Evt_BuffRemoveImmediately_Multicast_Invoke final
{
public:
	int32                                         BuffID;                                            // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	EBuffEffectTriggerType                        RemoveTriggerType;                                 // 0x0004(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         WithTriggerRemmoveEffect : 1;                      // 0x0005(0x0001)(BitIndex: 0x00, PropSize: 0x0001 (Parm, NoDestructor, HasGetValueTypeHash))
};
//static_assert(alignof(BUS_GSEventCollection_Evt_BuffRemoveImmediately_Multicast_Invoke) == 0x000004, "Wrong alignment on BUS_GSEventCollection_Evt_BuffRemoveImmediately_Multicast_Invoke");
//static_assert(sizeof(BUS_GSEventCollection_Evt_BuffRemoveImmediately_Multicast_Invoke) == 0x000008, "Wrong size on BUS_GSEventCollection_Evt_BuffRemoveImmediately_Multicast_Invoke");
//static_assert(offsetof(BUS_GSEventCollection_Evt_BuffRemoveImmediately_Multicast_Invoke, BuffID) == 0x000000, "Member 'BUS_GSEventCollection_Evt_BuffRemoveImmediately_Multicast_Invoke::BuffID' has a wrong offset!");
//static_assert(offsetof(BUS_GSEventCollection_Evt_BuffRemoveImmediately_Multicast_Invoke, RemoveTriggerType) == 0x000004, "Member 'BUS_GSEventCollection_Evt_BuffRemoveImmediately_Multicast_Invoke::RemoveTriggerType' has a wrong offset!");

// Function b1-Managed.BUS_GSEventCollection.Evt_ShouledUpdateBuffTime_Multicast_Invoke
// 0x0001 (0x0001 - 0x0000)
struct BUS_GSEventCollection_Evt_ShouledUpdateBuffTime_Multicast_Invoke final
{
public:
	uint8                                         P1 : 1;                                            // 0x0000(0x0001)(BitIndex: 0x00, PropSize: 0x0001 (Parm, NoDestructor, HasGetValueTypeHash))
};
//static_assert(alignof(BUS_GSEventCollection_Evt_ShouledUpdateBuffTime_Multicast_Invoke) == 0x000001, "Wrong alignment on BUS_GSEventCollection_Evt_ShouledUpdateBuffTime_Multicast_Invoke");
//static_assert(sizeof(BUS_GSEventCollection_Evt_ShouledUpdateBuffTime_Multicast_Invoke) == 0x000001, "Wrong size on BUS_GSEventCollection_Evt_ShouledUpdateBuffTime_Multicast_Invoke");

// Function b1-Managed.BUS_GSEventCollection.Evt_SpawnBulletFXByReason_Multicast_Invoke
// 0x00E0 (0x00E0 - 0x0000)
struct BUS_GSEventCollection_Evt_SpawnBulletFXByReason_Multicast_Invoke final
{
public:
	EBGUBulletDispReason                          BulletDispReason;                                  // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_1[0x7];                                        // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FEffectInstReq                         EffectInstReq;                                     // 0x0008(0x00D0)(Parm, NoDestructor, HasGetValueTypeHash)
	class AActor*                                 BeHitActor;                                        // 0x00D8(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
//static_assert(alignof(BUS_GSEventCollection_Evt_SpawnBulletFXByReason_Multicast_Invoke) == 0x000008, "Wrong alignment on BUS_GSEventCollection_Evt_SpawnBulletFXByReason_Multicast_Invoke");
//static_assert(sizeof(BUS_GSEventCollection_Evt_SpawnBulletFXByReason_Multicast_Invoke) == 0x0000E0, "Wrong size on BUS_GSEventCollection_Evt_SpawnBulletFXByReason_Multicast_Invoke");
//static_assert(offsetof(BUS_GSEventCollection_Evt_SpawnBulletFXByReason_Multicast_Invoke, BulletDispReason) == 0x000000, "Member 'BUS_GSEventCollection_Evt_SpawnBulletFXByReason_Multicast_Invoke::BulletDispReason' has a wrong offset!");
//static_assert(offsetof(BUS_GSEventCollection_Evt_SpawnBulletFXByReason_Multicast_Invoke, EffectInstReq) == 0x000008, "Member 'BUS_GSEventCollection_Evt_SpawnBulletFXByReason_Multicast_Invoke::EffectInstReq' has a wrong offset!");
//static_assert(offsetof(BUS_GSEventCollection_Evt_SpawnBulletFXByReason_Multicast_Invoke, BeHitActor) == 0x0000D8, "Member 'BUS_GSEventCollection_Evt_SpawnBulletFXByReason_Multicast_Invoke::BeHitActor' has a wrong offset!");

// Function b1-Managed.BUS_GSEventCollection.Evt_MoveWithAnimMontageCMultiCastMultiCast
// 0x0020 (0x0020 - 0x0000)
struct BUS_GSEventCollection_Evt_MoveWithAnimMontageCMultiCastMultiCast final
{
public:
	class UAnimMontage*                           Montage;                                           // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         Scale;                                             // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         PlayTimeRate;                                      // 0x000C(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         MontagePosOffset;                                  // 0x0010(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class FName                                   StartSectionName;                                  // 0x0014(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	EMontageBindReason                            Reason;                                            // 0x001C(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
//static_assert(alignof(BUS_GSEventCollection_Evt_MoveWithAnimMontageCMultiCastMultiCast) == 0x000008, "Wrong alignment on BUS_GSEventCollection_Evt_MoveWithAnimMontageCMultiCastMultiCast");
//static_assert(sizeof(BUS_GSEventCollection_Evt_MoveWithAnimMontageCMultiCastMultiCast) == 0x000020, "Wrong size on BUS_GSEventCollection_Evt_MoveWithAnimMontageCMultiCastMultiCast");
//static_assert(offsetof(BUS_GSEventCollection_Evt_MoveWithAnimMontageCMultiCastMultiCast, Montage) == 0x000000, "Member 'BUS_GSEventCollection_Evt_MoveWithAnimMontageCMultiCastMultiCast::Montage' has a wrong offset!");
//static_assert(offsetof(BUS_GSEventCollection_Evt_MoveWithAnimMontageCMultiCastMultiCast, Scale) == 0x000008, "Member 'BUS_GSEventCollection_Evt_MoveWithAnimMontageCMultiCastMultiCast::Scale' has a wrong offset!");
//static_assert(offsetof(BUS_GSEventCollection_Evt_MoveWithAnimMontageCMultiCastMultiCast, PlayTimeRate) == 0x00000C, "Member 'BUS_GSEventCollection_Evt_MoveWithAnimMontageCMultiCastMultiCast::PlayTimeRate' has a wrong offset!");
//static_assert(offsetof(BUS_GSEventCollection_Evt_MoveWithAnimMontageCMultiCastMultiCast, MontagePosOffset) == 0x000010, "Member 'BUS_GSEventCollection_Evt_MoveWithAnimMontageCMultiCastMultiCast::MontagePosOffset' has a wrong offset!");
//static_assert(offsetof(BUS_GSEventCollection_Evt_MoveWithAnimMontageCMultiCastMultiCast, StartSectionName) == 0x000014, "Member 'BUS_GSEventCollection_Evt_MoveWithAnimMontageCMultiCastMultiCast::StartSectionName' has a wrong offset!");
//static_assert(offsetof(BUS_GSEventCollection_Evt_MoveWithAnimMontageCMultiCastMultiCast, Reason) == 0x00001C, "Member 'BUS_GSEventCollection_Evt_MoveWithAnimMontageCMultiCastMultiCast::Reason' has a wrong offset!");

// Function b1-Managed.BUS_GSEventCollection.Evt_TriggrtInteractOnOtherClientMultiCast
// 0x0008 (0x0008 - 0x0000)
struct BUS_GSEventCollection_Evt_TriggrtInteractOnOtherClientMultiCast final
{
public:
	class AActor*                                 Target;                                            // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
//static_assert(alignof(BUS_GSEventCollection_Evt_TriggrtInteractOnOtherClientMultiCast) == 0x000008, "Wrong alignment on BUS_GSEventCollection_Evt_TriggrtInteractOnOtherClientMultiCast");
//static_assert(sizeof(BUS_GSEventCollection_Evt_TriggrtInteractOnOtherClientMultiCast) == 0x000008, "Wrong size on BUS_GSEventCollection_Evt_TriggrtInteractOnOtherClientMultiCast");
//static_assert(offsetof(BUS_GSEventCollection_Evt_TriggrtInteractOnOtherClientMultiCast, Target) == 0x000000, "Member 'BUS_GSEventCollection_Evt_TriggrtInteractOnOtherClientMultiCast::Target' has a wrong offset!");

// Function b1-Managed.BUS_GSEventCollection.Evt_InteractGroup_Update_Multicast_Invoke
// 0x0008 (0x0008 - 0x0000)
struct BUS_GSEventCollection_Evt_InteractGroup_Update_Multicast_Invoke final
{
public:
	int32                                         GroupId;                                           // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	EBGUInteractUnitState                         InteractUnitState;                                 // 0x0004(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
//static_assert(alignof(BUS_GSEventCollection_Evt_InteractGroup_Update_Multicast_Invoke) == 0x000004, "Wrong alignment on BUS_GSEventCollection_Evt_InteractGroup_Update_Multicast_Invoke");
//static_assert(sizeof(BUS_GSEventCollection_Evt_InteractGroup_Update_Multicast_Invoke) == 0x000008, "Wrong size on BUS_GSEventCollection_Evt_InteractGroup_Update_Multicast_Invoke");
//static_assert(offsetof(BUS_GSEventCollection_Evt_InteractGroup_Update_Multicast_Invoke, GroupId) == 0x000000, "Member 'BUS_GSEventCollection_Evt_InteractGroup_Update_Multicast_Invoke::GroupId' has a wrong offset!");
//static_assert(offsetof(BUS_GSEventCollection_Evt_InteractGroup_Update_Multicast_Invoke, InteractUnitState) == 0x000004, "Member 'BUS_GSEventCollection_Evt_InteractGroup_Update_Multicast_Invoke::InteractUnitState' has a wrong offset!");

// Function b1-Managed.BUS_GSEventCollection.Evt_OnIncreaseMaxPELevel_Multicast_Invoke
// 0x0004 (0x0004 - 0x0000)
struct BUS_GSEventCollection_Evt_OnIncreaseMaxPELevel_Multicast_Invoke final
{
public:
	int32                                         P1;                                                // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
//static_assert(alignof(BUS_GSEventCollection_Evt_OnIncreaseMaxPELevel_Multicast_Invoke) == 0x000004, "Wrong alignment on BUS_GSEventCollection_Evt_OnIncreaseMaxPELevel_Multicast_Invoke");
//static_assert(sizeof(BUS_GSEventCollection_Evt_OnIncreaseMaxPELevel_Multicast_Invoke) == 0x000004, "Wrong size on BUS_GSEventCollection_Evt_OnIncreaseMaxPELevel_Multicast_Invoke");
//static_assert(offsetof(BUS_GSEventCollection_Evt_OnIncreaseMaxPELevel_Multicast_Invoke, P1) == 0x000000, "Member 'BUS_GSEventCollection_Evt_OnIncreaseMaxPELevel_Multicast_Invoke::P1' has a wrong offset!");

// Function b1-Managed.BUS_GSEventCollection.Evt_TriggerRootMotionJump_RollBack_Client
// 0x0004 (0x0004 - 0x0000)
struct BUS_GSEventCollection_Evt_TriggerRootMotionJump_RollBack_Client final
{
public:
	int32                                         PredictionKeyId;                                   // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
//static_assert(alignof(BUS_GSEventCollection_Evt_TriggerRootMotionJump_RollBack_Client) == 0x000004, "Wrong alignment on BUS_GSEventCollection_Evt_TriggerRootMotionJump_RollBack_Client");
//static_assert(sizeof(BUS_GSEventCollection_Evt_TriggerRootMotionJump_RollBack_Client) == 0x000004, "Wrong size on BUS_GSEventCollection_Evt_TriggerRootMotionJump_RollBack_Client");
//static_assert(offsetof(BUS_GSEventCollection_Evt_TriggerRootMotionJump_RollBack_Client, PredictionKeyId) == 0x000000, "Member 'BUS_GSEventCollection_Evt_TriggerRootMotionJump_RollBack_Client::PredictionKeyId' has a wrong offset!");

// Function b1-Managed.BUS_GSEventCollection.Evt_SwitchNoInteraction_Multicast_Invoke
// 0x0001 (0x0001 - 0x0000)
struct BUS_GSEventCollection_Evt_SwitchNoInteraction_Multicast_Invoke final
{
public:
	uint8                                         P1 : 1;                                            // 0x0000(0x0001)(BitIndex: 0x00, PropSize: 0x0001 (Parm, NoDestructor, HasGetValueTypeHash))
};
//static_assert(alignof(BUS_GSEventCollection_Evt_SwitchNoInteraction_Multicast_Invoke) == 0x000001, "Wrong alignment on BUS_GSEventCollection_Evt_SwitchNoInteraction_Multicast_Invoke");
//static_assert(sizeof(BUS_GSEventCollection_Evt_SwitchNoInteraction_Multicast_Invoke) == 0x000001, "Wrong size on BUS_GSEventCollection_Evt_SwitchNoInteraction_Multicast_Invoke");

// Function b1-Managed.BUS_GSEventCollection.Evt_TriggerSkillEffect_TransmitMultiCast
// 0x00E8 (0x00E8 - 0x0000)
struct BUS_GSEventCollection_Evt_TriggerSkillEffect_TransmitMultiCast final
{
public:
	int32                                         EffectID;                                          // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_4[0x4];                                        // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FEffectInstReq                         EffectInstReq;                                     // 0x0008(0x00D0)(Parm, NoDestructor, HasGetValueTypeHash)
	class AActor*                                 InnerTarget;                                       // 0x00D8(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         bWithRPCEvent : 1;                                 // 0x00E0(0x0001)(BitIndex: 0x00, PropSize: 0x0001 (Parm, NoDestructor, HasGetValueTypeHash))
};
//static_assert(alignof(BUS_GSEventCollection_Evt_TriggerSkillEffect_TransmitMultiCast) == 0x000008, "Wrong alignment on BUS_GSEventCollection_Evt_TriggerSkillEffect_TransmitMultiCast");
//static_assert(sizeof(BUS_GSEventCollection_Evt_TriggerSkillEffect_TransmitMultiCast) == 0x0000E8, "Wrong size on BUS_GSEventCollection_Evt_TriggerSkillEffect_TransmitMultiCast");
//static_assert(offsetof(BUS_GSEventCollection_Evt_TriggerSkillEffect_TransmitMultiCast, EffectID) == 0x000000, "Member 'BUS_GSEventCollection_Evt_TriggerSkillEffect_TransmitMultiCast::EffectID' has a wrong offset!");
//static_assert(offsetof(BUS_GSEventCollection_Evt_TriggerSkillEffect_TransmitMultiCast, EffectInstReq) == 0x000008, "Member 'BUS_GSEventCollection_Evt_TriggerSkillEffect_TransmitMultiCast::EffectInstReq' has a wrong offset!");
//static_assert(offsetof(BUS_GSEventCollection_Evt_TriggerSkillEffect_TransmitMultiCast, InnerTarget) == 0x0000D8, "Member 'BUS_GSEventCollection_Evt_TriggerSkillEffect_TransmitMultiCast::InnerTarget' has a wrong offset!");

// Function b1-Managed.BUS_GSEventCollection.Evt_TeleportWithRebirthPointFailedServer
// 0x0008 (0x0008 - 0x0000)
struct BUS_GSEventCollection_Evt_TeleportWithRebirthPointFailedServer final
{
public:
	int32                                         RebirthPointConfigID;                              // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	ETeleportReason                               TeleportReason;                                    // 0x0004(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
//static_assert(alignof(BUS_GSEventCollection_Evt_TeleportWithRebirthPointFailedServer) == 0x000004, "Wrong alignment on BUS_GSEventCollection_Evt_TeleportWithRebirthPointFailedServer");
//static_assert(sizeof(BUS_GSEventCollection_Evt_TeleportWithRebirthPointFailedServer) == 0x000008, "Wrong size on BUS_GSEventCollection_Evt_TeleportWithRebirthPointFailedServer");
//static_assert(offsetof(BUS_GSEventCollection_Evt_TeleportWithRebirthPointFailedServer, RebirthPointConfigID) == 0x000000, "Member 'BUS_GSEventCollection_Evt_TeleportWithRebirthPointFailedServer::RebirthPointConfigID' has a wrong offset!");
//static_assert(offsetof(BUS_GSEventCollection_Evt_TeleportWithRebirthPointFailedServer, TeleportReason) == 0x000004, "Member 'BUS_GSEventCollection_Evt_TeleportWithRebirthPointFailedServer::TeleportReason' has a wrong offset!");

// Function b1-Managed.BUS_GSEventCollection.Evt_MoveWithAnimMontage_Multicast_Invoke
// 0x0020 (0x0020 - 0x0000)
struct BUS_GSEventCollection_Evt_MoveWithAnimMontage_Multicast_Invoke final
{
public:
	class UAnimMontage*                           Montage;                                           // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         Scale;                                             // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         PlayTimeRate;                                      // 0x000C(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         MontagePosOffset;                                  // 0x0010(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class FName                                   StartSectionName;                                  // 0x0014(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	EMontageBindReason                            Reason;                                            // 0x001C(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
//static_assert(alignof(BUS_GSEventCollection_Evt_MoveWithAnimMontage_Multicast_Invoke) == 0x000008, "Wrong alignment on BUS_GSEventCollection_Evt_MoveWithAnimMontage_Multicast_Invoke");
//static_assert(sizeof(BUS_GSEventCollection_Evt_MoveWithAnimMontage_Multicast_Invoke) == 0x000020, "Wrong size on BUS_GSEventCollection_Evt_MoveWithAnimMontage_Multicast_Invoke");
//static_assert(offsetof(BUS_GSEventCollection_Evt_MoveWithAnimMontage_Multicast_Invoke, Montage) == 0x000000, "Member 'BUS_GSEventCollection_Evt_MoveWithAnimMontage_Multicast_Invoke::Montage' has a wrong offset!");
//static_assert(offsetof(BUS_GSEventCollection_Evt_MoveWithAnimMontage_Multicast_Invoke, Scale) == 0x000008, "Member 'BUS_GSEventCollection_Evt_MoveWithAnimMontage_Multicast_Invoke::Scale' has a wrong offset!");
//static_assert(offsetof(BUS_GSEventCollection_Evt_MoveWithAnimMontage_Multicast_Invoke, PlayTimeRate) == 0x00000C, "Member 'BUS_GSEventCollection_Evt_MoveWithAnimMontage_Multicast_Invoke::PlayTimeRate' has a wrong offset!");
//static_assert(offsetof(BUS_GSEventCollection_Evt_MoveWithAnimMontage_Multicast_Invoke, MontagePosOffset) == 0x000010, "Member 'BUS_GSEventCollection_Evt_MoveWithAnimMontage_Multicast_Invoke::MontagePosOffset' has a wrong offset!");
//static_assert(offsetof(BUS_GSEventCollection_Evt_MoveWithAnimMontage_Multicast_Invoke, StartSectionName) == 0x000014, "Member 'BUS_GSEventCollection_Evt_MoveWithAnimMontage_Multicast_Invoke::StartSectionName' has a wrong offset!");
//static_assert(offsetof(BUS_GSEventCollection_Evt_MoveWithAnimMontage_Multicast_Invoke, Reason) == 0x00001C, "Member 'BUS_GSEventCollection_Evt_MoveWithAnimMontage_Multicast_Invoke::Reason' has a wrong offset!");

// Function b1-Managed.BUS_GSEventCollection.Evt_TriggerRootMotionJump_Confirm_Client
// 0x0004 (0x0004 - 0x0000)
struct BUS_GSEventCollection_Evt_TriggerRootMotionJump_Confirm_Client final
{
public:
	int32                                         PredictionKeyId;                                   // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
//static_assert(alignof(BUS_GSEventCollection_Evt_TriggerRootMotionJump_Confirm_Client) == 0x000004, "Wrong alignment on BUS_GSEventCollection_Evt_TriggerRootMotionJump_Confirm_Client");
//static_assert(sizeof(BUS_GSEventCollection_Evt_TriggerRootMotionJump_Confirm_Client) == 0x000004, "Wrong size on BUS_GSEventCollection_Evt_TriggerRootMotionJump_Confirm_Client");
//static_assert(offsetof(BUS_GSEventCollection_Evt_TriggerRootMotionJump_Confirm_Client, PredictionKeyId) == 0x000000, "Member 'BUS_GSEventCollection_Evt_TriggerRootMotionJump_Confirm_Client::PredictionKeyId' has a wrong offset!");

// Function b1-Managed.BUS_GSEventCollection.Evt_InitDaShenEquipData_Multicast_Invoke
// 0x0008 (0x0008 - 0x0000)
struct BUS_GSEventCollection_Evt_InitDaShenEquipData_Multicast_Invoke final
{
public:
	EquipPosition                                 EquipPosition;                                     // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_1[0x3];                                        // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         EquipID;                                           // 0x0004(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
//static_assert(alignof(BUS_GSEventCollection_Evt_InitDaShenEquipData_Multicast_Invoke) == 0x000004, "Wrong alignment on BUS_GSEventCollection_Evt_InitDaShenEquipData_Multicast_Invoke");
//static_assert(sizeof(BUS_GSEventCollection_Evt_InitDaShenEquipData_Multicast_Invoke) == 0x000008, "Wrong size on BUS_GSEventCollection_Evt_InitDaShenEquipData_Multicast_Invoke");
//static_assert(offsetof(BUS_GSEventCollection_Evt_InitDaShenEquipData_Multicast_Invoke, EquipPosition) == 0x000000, "Member 'BUS_GSEventCollection_Evt_InitDaShenEquipData_Multicast_Invoke::EquipPosition' has a wrong offset!");
//static_assert(offsetof(BUS_GSEventCollection_Evt_InitDaShenEquipData_Multicast_Invoke, EquipID) == 0x000004, "Member 'BUS_GSEventCollection_Evt_InitDaShenEquipData_Multicast_Invoke::EquipID' has a wrong offset!");

// Function b1-Managed.BUS_GSEventCollection.Evt_UnitCastSkillTryCMultiCastMultiCast
// 0x0018 (0x0018 - 0x0000)
struct BUS_GSEventCollection_Evt_UnitCastSkillTryCMultiCastMultiCast final
{
public:
	struct FCastSkillInfo                         CSI;                                               // 0x0000(0x0018)(Parm, NoDestructor, HasGetValueTypeHash)
};
//static_assert(alignof(BUS_GSEventCollection_Evt_UnitCastSkillTryCMultiCastMultiCast) == 0x000004, "Wrong alignment on BUS_GSEventCollection_Evt_UnitCastSkillTryCMultiCastMultiCast");
//static_assert(sizeof(BUS_GSEventCollection_Evt_UnitCastSkillTryCMultiCastMultiCast) == 0x000018, "Wrong size on BUS_GSEventCollection_Evt_UnitCastSkillTryCMultiCastMultiCast");
//static_assert(offsetof(BUS_GSEventCollection_Evt_UnitCastSkillTryCMultiCastMultiCast, CSI) == 0x000000, "Member 'BUS_GSEventCollection_Evt_UnitCastSkillTryCMultiCastMultiCast::CSI' has a wrong offset!");

// Function b1-Managed.BUS_GSEventCollection.Evt_UnitStateTriggerCMultiCastMultiCast
// 0x000C (0x000C - 0x0000)
struct BUS_GSEventCollection_Evt_UnitStateTriggerCMultiCastMultiCast final
{
public:
	EBUStateTrigger                               TriggerId;                                         // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_1[0x3];                                        // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         Time;                                              // 0x0004(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         NeedForceUpdate : 1;                               // 0x0008(0x0001)(BitIndex: 0x00, PropSize: 0x0001 (Parm, NoDestructor, HasGetValueTypeHash))
};
//static_assert(alignof(BUS_GSEventCollection_Evt_UnitStateTriggerCMultiCastMultiCast) == 0x000004, "Wrong alignment on BUS_GSEventCollection_Evt_UnitStateTriggerCMultiCastMultiCast");
//static_assert(sizeof(BUS_GSEventCollection_Evt_UnitStateTriggerCMultiCastMultiCast) == 0x00000C, "Wrong size on BUS_GSEventCollection_Evt_UnitStateTriggerCMultiCastMultiCast");
//static_assert(offsetof(BUS_GSEventCollection_Evt_UnitStateTriggerCMultiCastMultiCast, TriggerId) == 0x000000, "Member 'BUS_GSEventCollection_Evt_UnitStateTriggerCMultiCastMultiCast::TriggerId' has a wrong offset!");
//static_assert(offsetof(BUS_GSEventCollection_Evt_UnitStateTriggerCMultiCastMultiCast, Time) == 0x000004, "Member 'BUS_GSEventCollection_Evt_UnitStateTriggerCMultiCastMultiCast::Time' has a wrong offset!");

// Function b1-Managed.BUS_GSEventCollection.Evt_MoveWithAnimMontageCMultiCastServer
// 0x0028 (0x0028 - 0x0000)
struct BUS_GSEventCollection_Evt_MoveWithAnimMontageCMultiCastServer final
{
public:
	class UAnimMontage*                           Montage;                                           // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         Scale;                                             // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         PlayTimeRate;                                      // 0x000C(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         MontagePosOffset;                                  // 0x0010(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class FName                                   StartSectionName;                                  // 0x0014(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	EMontageBindReason                            Reason;                                            // 0x001C(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_1D[0x3];                                       // 0x001D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         PredictionKeyId;                                   // 0x0020(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         ParentPredictionKeyId;                             // 0x0024(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
//static_assert(alignof(BUS_GSEventCollection_Evt_MoveWithAnimMontageCMultiCastServer) == 0x000008, "Wrong alignment on BUS_GSEventCollection_Evt_MoveWithAnimMontageCMultiCastServer");
//static_assert(sizeof(BUS_GSEventCollection_Evt_MoveWithAnimMontageCMultiCastServer) == 0x000028, "Wrong size on BUS_GSEventCollection_Evt_MoveWithAnimMontageCMultiCastServer");
//static_assert(offsetof(BUS_GSEventCollection_Evt_MoveWithAnimMontageCMultiCastServer, Montage) == 0x000000, "Member 'BUS_GSEventCollection_Evt_MoveWithAnimMontageCMultiCastServer::Montage' has a wrong offset!");
//static_assert(offsetof(BUS_GSEventCollection_Evt_MoveWithAnimMontageCMultiCastServer, Scale) == 0x000008, "Member 'BUS_GSEventCollection_Evt_MoveWithAnimMontageCMultiCastServer::Scale' has a wrong offset!");
//static_assert(offsetof(BUS_GSEventCollection_Evt_MoveWithAnimMontageCMultiCastServer, PlayTimeRate) == 0x00000C, "Member 'BUS_GSEventCollection_Evt_MoveWithAnimMontageCMultiCastServer::PlayTimeRate' has a wrong offset!");
//static_assert(offsetof(BUS_GSEventCollection_Evt_MoveWithAnimMontageCMultiCastServer, MontagePosOffset) == 0x000010, "Member 'BUS_GSEventCollection_Evt_MoveWithAnimMontageCMultiCastServer::MontagePosOffset' has a wrong offset!");
//static_assert(offsetof(BUS_GSEventCollection_Evt_MoveWithAnimMontageCMultiCastServer, StartSectionName) == 0x000014, "Member 'BUS_GSEventCollection_Evt_MoveWithAnimMontageCMultiCastServer::StartSectionName' has a wrong offset!");
//static_assert(offsetof(BUS_GSEventCollection_Evt_MoveWithAnimMontageCMultiCastServer, Reason) == 0x00001C, "Member 'BUS_GSEventCollection_Evt_MoveWithAnimMontageCMultiCastServer::Reason' has a wrong offset!");
//static_assert(offsetof(BUS_GSEventCollection_Evt_MoveWithAnimMontageCMultiCastServer, PredictionKeyId) == 0x000020, "Member 'BUS_GSEventCollection_Evt_MoveWithAnimMontageCMultiCastServer::PredictionKeyId' has a wrong offset!");
//static_assert(offsetof(BUS_GSEventCollection_Evt_MoveWithAnimMontageCMultiCastServer, ParentPredictionKeyId) == 0x000024, "Member 'BUS_GSEventCollection_Evt_MoveWithAnimMontageCMultiCastServer::ParentPredictionKeyId' has a wrong offset!");

// Function b1-Managed.BUS_GSEventCollection.Evt_UnitRebirth_ByItem_Multicast_Invoke
// 0x0001 (0x0001 - 0x0000)
struct BUS_GSEventCollection_Evt_UnitRebirth_ByItem_Multicast_Invoke final
{
public:
	ERebirthType                                  RebirthType;                                       // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
//static_assert(alignof(BUS_GSEventCollection_Evt_UnitRebirth_ByItem_Multicast_Invoke) == 0x000001, "Wrong alignment on BUS_GSEventCollection_Evt_UnitRebirth_ByItem_Multicast_Invoke");
//static_assert(sizeof(BUS_GSEventCollection_Evt_UnitRebirth_ByItem_Multicast_Invoke) == 0x000001, "Wrong size on BUS_GSEventCollection_Evt_UnitRebirth_ByItem_Multicast_Invoke");
//static_assert(offsetof(BUS_GSEventCollection_Evt_UnitRebirth_ByItem_Multicast_Invoke, RebirthType) == 0x000000, "Member 'BUS_GSEventCollection_Evt_UnitRebirth_ByItem_Multicast_Invoke::RebirthType' has a wrong offset!");

// Function b1-Managed.BUS_GSEventCollection.Evt_BuffInstsDictOnAdd_Multicast_Invoke
// 0x0018 (0x0018 - 0x0000)
struct BUS_GSEventCollection_Evt_BuffInstsDictOnAdd_Multicast_Invoke final
{
public:
	int32                                         BuffID;                                            // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         Duration;                                          // 0x0004(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	EBuffSourceType                               BuffSourceType;                                    // 0x0008(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class AActor*                                 Caster;                                            // 0x0010(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
//static_assert(alignof(BUS_GSEventCollection_Evt_BuffInstsDictOnAdd_Multicast_Invoke) == 0x000008, "Wrong alignment on BUS_GSEventCollection_Evt_BuffInstsDictOnAdd_Multicast_Invoke");
//static_assert(sizeof(BUS_GSEventCollection_Evt_BuffInstsDictOnAdd_Multicast_Invoke) == 0x000018, "Wrong size on BUS_GSEventCollection_Evt_BuffInstsDictOnAdd_Multicast_Invoke");
//static_assert(offsetof(BUS_GSEventCollection_Evt_BuffInstsDictOnAdd_Multicast_Invoke, BuffID) == 0x000000, "Member 'BUS_GSEventCollection_Evt_BuffInstsDictOnAdd_Multicast_Invoke::BuffID' has a wrong offset!");
//static_assert(offsetof(BUS_GSEventCollection_Evt_BuffInstsDictOnAdd_Multicast_Invoke, Duration) == 0x000004, "Member 'BUS_GSEventCollection_Evt_BuffInstsDictOnAdd_Multicast_Invoke::Duration' has a wrong offset!");
//static_assert(offsetof(BUS_GSEventCollection_Evt_BuffInstsDictOnAdd_Multicast_Invoke, BuffSourceType) == 0x000008, "Member 'BUS_GSEventCollection_Evt_BuffInstsDictOnAdd_Multicast_Invoke::BuffSourceType' has a wrong offset!");
//static_assert(offsetof(BUS_GSEventCollection_Evt_BuffInstsDictOnAdd_Multicast_Invoke, Caster) == 0x000010, "Member 'BUS_GSEventCollection_Evt_BuffInstsDictOnAdd_Multicast_Invoke::Caster' has a wrong offset!");

// Function b1-Managed.BUS_GSEventCollection.Evt_SetActorLocationGM_Multicast_Invoke
// 0x0020 (0x0020 - 0x0000)
struct BUS_GSEventCollection_Evt_SetActorLocationGM_Multicast_Invoke final
{
public:
	struct FVector                                NewLocation;                                       // 0x0000(0x0018)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         bSweep : 1;                                        // 0x0018(0x0001)(BitIndex: 0x00, PropSize: 0x0001 (Parm, NoDestructor, HasGetValueTypeHash))
	uint8                                         BitPad_18_1 : 7;                                   // 0x0018(0x0001)(Fixing Bit-Field Size For New Byte [ Dumper-7 ])
	uint8                                         bTeleport : 1;                                     // 0x0019(0x0001)(BitIndex: 0x00, PropSize: 0x0001 (Parm, NoDestructor, HasGetValueTypeHash))
};
//static_assert(alignof(BUS_GSEventCollection_Evt_SetActorLocationGM_Multicast_Invoke) == 0x000008, "Wrong alignment on BUS_GSEventCollection_Evt_SetActorLocationGM_Multicast_Invoke");
//static_assert(sizeof(BUS_GSEventCollection_Evt_SetActorLocationGM_Multicast_Invoke) == 0x000020, "Wrong size on BUS_GSEventCollection_Evt_SetActorLocationGM_Multicast_Invoke");
//static_assert(offsetof(BUS_GSEventCollection_Evt_SetActorLocationGM_Multicast_Invoke, NewLocation) == 0x000000, "Member 'BUS_GSEventCollection_Evt_SetActorLocationGM_Multicast_Invoke::NewLocation' has a wrong offset!");

// Function b1-Managed.BUS_GSEventCollection.Evt_TriggerSkillEffectBySkillMultiCast
// 0x00E8 (0x00E8 - 0x0000)
struct BUS_GSEventCollection_Evt_TriggerSkillEffectBySkillMultiCast final
{
public:
	int32                                         EffectID;                                          // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_4[0x4];                                        // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class AActor*                                 Caster;                                            // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class AActor*                                 Target;                                            // 0x0010(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FEffectInstReq                         EffectInstReq;                                     // 0x0018(0x00D0)(Parm, NoDestructor, HasGetValueTypeHash)
};
//static_assert(alignof(BUS_GSEventCollection_Evt_TriggerSkillEffectBySkillMultiCast) == 0x000008, "Wrong alignment on BUS_GSEventCollection_Evt_TriggerSkillEffectBySkillMultiCast");
//static_assert(sizeof(BUS_GSEventCollection_Evt_TriggerSkillEffectBySkillMultiCast) == 0x0000E8, "Wrong size on BUS_GSEventCollection_Evt_TriggerSkillEffectBySkillMultiCast");
//static_assert(offsetof(BUS_GSEventCollection_Evt_TriggerSkillEffectBySkillMultiCast, EffectID) == 0x000000, "Member 'BUS_GSEventCollection_Evt_TriggerSkillEffectBySkillMultiCast::EffectID' has a wrong offset!");
//static_assert(offsetof(BUS_GSEventCollection_Evt_TriggerSkillEffectBySkillMultiCast, Caster) == 0x000008, "Member 'BUS_GSEventCollection_Evt_TriggerSkillEffectBySkillMultiCast::Caster' has a wrong offset!");
//static_assert(offsetof(BUS_GSEventCollection_Evt_TriggerSkillEffectBySkillMultiCast, Target) == 0x000010, "Member 'BUS_GSEventCollection_Evt_TriggerSkillEffectBySkillMultiCast::Target' has a wrong offset!");
//static_assert(offsetof(BUS_GSEventCollection_Evt_TriggerSkillEffectBySkillMultiCast, EffectInstReq) == 0x000018, "Member 'BUS_GSEventCollection_Evt_TriggerSkillEffectBySkillMultiCast::EffectInstReq' has a wrong offset!");

// Function b1-Managed.BUS_GSEventCollection.Evt_TriggrtInteractOnOtherClientServer
// 0x0008 (0x0008 - 0x0000)
struct BUS_GSEventCollection_Evt_TriggrtInteractOnOtherClientServer final
{
public:
	class AActor*                                 Target;                                            // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
//static_assert(alignof(BUS_GSEventCollection_Evt_TriggrtInteractOnOtherClientServer) == 0x000008, "Wrong alignment on BUS_GSEventCollection_Evt_TriggrtInteractOnOtherClientServer");
//static_assert(sizeof(BUS_GSEventCollection_Evt_TriggrtInteractOnOtherClientServer) == 0x000008, "Wrong size on BUS_GSEventCollection_Evt_TriggrtInteractOnOtherClientServer");
//static_assert(offsetof(BUS_GSEventCollection_Evt_TriggrtInteractOnOtherClientServer, Target) == 0x000000, "Member 'BUS_GSEventCollection_Evt_TriggrtInteractOnOtherClientServer::Target' has a wrong offset!");

// Function b1-Managed.BUS_GSEventCollection.Evt_TriggerNormalDamageEffectMultiCast
// 0x0138 (0x0138 - 0x0000)
struct BUS_GSEventCollection_Evt_TriggerNormalDamageEffectMultiCast final
{
public:
	class AActor*                                 Attacker;                                          // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FSkillDamageConfig                     SkillDamageConfig;                                 // 0x0008(0x0038)(Parm, ZeroConstructor, HasGetValueTypeHash)
	struct FEffectInstReq                         EffectInstReq;                                     // 0x0040(0x00D0)(Parm, NoDestructor, HasGetValueTypeHash)
	struct FBattleAttrSnapShot                    Attacker_AttrMemData;                              // 0x0110(0x0024)(Parm, NoDestructor, HasGetValueTypeHash)
};
//static_assert(alignof(BUS_GSEventCollection_Evt_TriggerNormalDamageEffectMultiCast) == 0x000008, "Wrong alignment on BUS_GSEventCollection_Evt_TriggerNormalDamageEffectMultiCast");
//static_assert(sizeof(BUS_GSEventCollection_Evt_TriggerNormalDamageEffectMultiCast) == 0x000138, "Wrong size on BUS_GSEventCollection_Evt_TriggerNormalDamageEffectMultiCast");
//static_assert(offsetof(BUS_GSEventCollection_Evt_TriggerNormalDamageEffectMultiCast, Attacker) == 0x000000, "Member 'BUS_GSEventCollection_Evt_TriggerNormalDamageEffectMultiCast::Attacker' has a wrong offset!");
//static_assert(offsetof(BUS_GSEventCollection_Evt_TriggerNormalDamageEffectMultiCast, SkillDamageConfig) == 0x000008, "Member 'BUS_GSEventCollection_Evt_TriggerNormalDamageEffectMultiCast::SkillDamageConfig' has a wrong offset!");
//static_assert(offsetof(BUS_GSEventCollection_Evt_TriggerNormalDamageEffectMultiCast, EffectInstReq) == 0x000040, "Member 'BUS_GSEventCollection_Evt_TriggerNormalDamageEffectMultiCast::EffectInstReq' has a wrong offset!");
//static_assert(offsetof(BUS_GSEventCollection_Evt_TriggerNormalDamageEffectMultiCast, Attacker_AttrMemData) == 0x000110, "Member 'BUS_GSEventCollection_Evt_TriggerNormalDamageEffectMultiCast::Attacker_AttrMemData' has a wrong offset!");

// Function b1-Managed.BUS_GSEventCollection.Evt_SetActorTransform_Multicast_Invoke
// 0x0070 (0x0070 - 0x0000)
struct BUS_GSEventCollection_Evt_SetActorTransform_Multicast_Invoke final
{
public:
	struct FTransform                             NewTransform;                                      // 0x0000(0x0060)(Parm, IsPlainOldData, NoDestructor)
	uint8                                         bSweep : 1;                                        // 0x0060(0x0001)(BitIndex: 0x00, PropSize: 0x0001 (Parm, NoDestructor, HasGetValueTypeHash))
	uint8                                         BitPad_60_1 : 7;                                   // 0x0060(0x0001)(Fixing Bit-Field Size For New Byte [ Dumper-7 ])
	uint8                                         bTeleport : 1;                                     // 0x0061(0x0001)(BitIndex: 0x00, PropSize: 0x0001 (Parm, NoDestructor, HasGetValueTypeHash))
};
//static_assert(alignof(BUS_GSEventCollection_Evt_SetActorTransform_Multicast_Invoke) == 0x000010, "Wrong alignment on BUS_GSEventCollection_Evt_SetActorTransform_Multicast_Invoke");
//static_assert(sizeof(BUS_GSEventCollection_Evt_SetActorTransform_Multicast_Invoke) == 0x000070, "Wrong size on BUS_GSEventCollection_Evt_SetActorTransform_Multicast_Invoke");
//static_assert(offsetof(BUS_GSEventCollection_Evt_SetActorTransform_Multicast_Invoke, NewTransform) == 0x000000, "Member 'BUS_GSEventCollection_Evt_SetActorTransform_Multicast_Invoke::NewTransform' has a wrong offset!");

// Function b1-Managed.BUS_GSEventCollection.Evt_TriggerSkillEffect_TransmitServer
// 0x00F0 (0x00F0 - 0x0000)
struct BUS_GSEventCollection_Evt_TriggerSkillEffect_TransmitServer final
{
public:
	int32                                         EffectID;                                          // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_4[0x4];                                        // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FEffectInstReq                         EffectInstReq;                                     // 0x0008(0x00D0)(Parm, NoDestructor, HasGetValueTypeHash)
	class AActor*                                 InnerTarget;                                       // 0x00D8(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         bWithRPCEvent : 1;                                 // 0x00E0(0x0001)(BitIndex: 0x00, PropSize: 0x0001 (Parm, NoDestructor, HasGetValueTypeHash))
	uint8                                         Pad_E1[0x3];                                       // 0x00E1(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         PredictionKeyId;                                   // 0x00E4(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         ParentPredictionKeyId;                             // 0x00E8(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
//static_assert(alignof(BUS_GSEventCollection_Evt_TriggerSkillEffect_TransmitServer) == 0x000008, "Wrong alignment on BUS_GSEventCollection_Evt_TriggerSkillEffect_TransmitServer");
//static_assert(sizeof(BUS_GSEventCollection_Evt_TriggerSkillEffect_TransmitServer) == 0x0000F0, "Wrong size on BUS_GSEventCollection_Evt_TriggerSkillEffect_TransmitServer");
//static_assert(offsetof(BUS_GSEventCollection_Evt_TriggerSkillEffect_TransmitServer, EffectID) == 0x000000, "Member 'BUS_GSEventCollection_Evt_TriggerSkillEffect_TransmitServer::EffectID' has a wrong offset!");
//static_assert(offsetof(BUS_GSEventCollection_Evt_TriggerSkillEffect_TransmitServer, EffectInstReq) == 0x000008, "Member 'BUS_GSEventCollection_Evt_TriggerSkillEffect_TransmitServer::EffectInstReq' has a wrong offset!");
//static_assert(offsetof(BUS_GSEventCollection_Evt_TriggerSkillEffect_TransmitServer, InnerTarget) == 0x0000D8, "Member 'BUS_GSEventCollection_Evt_TriggerSkillEffect_TransmitServer::InnerTarget' has a wrong offset!");
//static_assert(offsetof(BUS_GSEventCollection_Evt_TriggerSkillEffect_TransmitServer, PredictionKeyId) == 0x0000E4, "Member 'BUS_GSEventCollection_Evt_TriggerSkillEffect_TransmitServer::PredictionKeyId' has a wrong offset!");
//static_assert(offsetof(BUS_GSEventCollection_Evt_TriggerSkillEffect_TransmitServer, ParentPredictionKeyId) == 0x0000E8, "Member 'BUS_GSEventCollection_Evt_TriggerSkillEffect_TransmitServer::ParentPredictionKeyId' has a wrong offset!");

// Function b1-Managed.BUS_GSEventCollection.Evt_DeactivateTalent_Multicast_Invoke
// 0x0004 (0x0004 - 0x0000)
struct BUS_GSEventCollection_Evt_DeactivateTalent_Multicast_Invoke final
{
public:
	int32                                         P1;                                                // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
//static_assert(alignof(BUS_GSEventCollection_Evt_DeactivateTalent_Multicast_Invoke) == 0x000004, "Wrong alignment on BUS_GSEventCollection_Evt_DeactivateTalent_Multicast_Invoke");
//static_assert(sizeof(BUS_GSEventCollection_Evt_DeactivateTalent_Multicast_Invoke) == 0x000004, "Wrong size on BUS_GSEventCollection_Evt_DeactivateTalent_Multicast_Invoke");
//static_assert(offsetof(BUS_GSEventCollection_Evt_DeactivateTalent_Multicast_Invoke, P1) == 0x000000, "Member 'BUS_GSEventCollection_Evt_DeactivateTalent_Multicast_Invoke::P1' has a wrong offset!");

// Function b1-Managed.BUS_GSEventCollection.Evt_CastSkillWithAnimMontageMultiCast
// 0x0020 (0x0020 - 0x0000)
struct BUS_GSEventCollection_Evt_CastSkillWithAnimMontageMultiCast final
{
public:
	class UAnimMontage*                           Montage;                                           // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         PlayTimeRate;                                      // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         MontagePosOffset;                                  // 0x000C(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class FName                                   StartSectionName;                                  // 0x0010(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	EMontageBindReason                            Reason;                                            // 0x0018(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
//static_assert(alignof(BUS_GSEventCollection_Evt_CastSkillWithAnimMontageMultiCast) == 0x000008, "Wrong alignment on BUS_GSEventCollection_Evt_CastSkillWithAnimMontageMultiCast");
//static_assert(sizeof(BUS_GSEventCollection_Evt_CastSkillWithAnimMontageMultiCast) == 0x000020, "Wrong size on BUS_GSEventCollection_Evt_CastSkillWithAnimMontageMultiCast");
//static_assert(offsetof(BUS_GSEventCollection_Evt_CastSkillWithAnimMontageMultiCast, Montage) == 0x000000, "Member 'BUS_GSEventCollection_Evt_CastSkillWithAnimMontageMultiCast::Montage' has a wrong offset!");
//static_assert(offsetof(BUS_GSEventCollection_Evt_CastSkillWithAnimMontageMultiCast, PlayTimeRate) == 0x000008, "Member 'BUS_GSEventCollection_Evt_CastSkillWithAnimMontageMultiCast::PlayTimeRate' has a wrong offset!");
//static_assert(offsetof(BUS_GSEventCollection_Evt_CastSkillWithAnimMontageMultiCast, MontagePosOffset) == 0x00000C, "Member 'BUS_GSEventCollection_Evt_CastSkillWithAnimMontageMultiCast::MontagePosOffset' has a wrong offset!");
//static_assert(offsetof(BUS_GSEventCollection_Evt_CastSkillWithAnimMontageMultiCast, StartSectionName) == 0x000010, "Member 'BUS_GSEventCollection_Evt_CastSkillWithAnimMontageMultiCast::StartSectionName' has a wrong offset!");
//static_assert(offsetof(BUS_GSEventCollection_Evt_CastSkillWithAnimMontageMultiCast, Reason) == 0x000018, "Member 'BUS_GSEventCollection_Evt_CastSkillWithAnimMontageMultiCast::Reason' has a wrong offset!");

// Function b1-Managed.BUS_GSEventCollection.Evt_RemoveBuffNotify_Multicast_Invoke
// 0x0008 (0x0008 - 0x0000)
struct BUS_GSEventCollection_Evt_RemoveBuffNotify_Multicast_Invoke final
{
public:
	int32                                         P1;                                                // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         P2;                                                // 0x0004(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
//static_assert(alignof(BUS_GSEventCollection_Evt_RemoveBuffNotify_Multicast_Invoke) == 0x000004, "Wrong alignment on BUS_GSEventCollection_Evt_RemoveBuffNotify_Multicast_Invoke");
//static_assert(sizeof(BUS_GSEventCollection_Evt_RemoveBuffNotify_Multicast_Invoke) == 0x000008, "Wrong size on BUS_GSEventCollection_Evt_RemoveBuffNotify_Multicast_Invoke");
//static_assert(offsetof(BUS_GSEventCollection_Evt_RemoveBuffNotify_Multicast_Invoke, P1) == 0x000000, "Member 'BUS_GSEventCollection_Evt_RemoveBuffNotify_Multicast_Invoke::P1' has a wrong offset!");
//static_assert(offsetof(BUS_GSEventCollection_Evt_RemoveBuffNotify_Multicast_Invoke, P2) == 0x000004, "Member 'BUS_GSEventCollection_Evt_RemoveBuffNotify_Multicast_Invoke::P2' has a wrong offset!");

// Function b1-Managed.BUS_GSEventCollection.Evt_TriggerFallDying_Multicast_Invoke
// 0x0008 (0x0008 - 0x0000)
struct BUS_GSEventCollection_Evt_TriggerFallDying_Multicast_Invoke final
{
public:
	class AActor*                                 Actor;                                             // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
//static_assert(alignof(BUS_GSEventCollection_Evt_TriggerFallDying_Multicast_Invoke) == 0x000008, "Wrong alignment on BUS_GSEventCollection_Evt_TriggerFallDying_Multicast_Invoke");
//static_assert(sizeof(BUS_GSEventCollection_Evt_TriggerFallDying_Multicast_Invoke) == 0x000008, "Wrong size on BUS_GSEventCollection_Evt_TriggerFallDying_Multicast_Invoke");
//static_assert(offsetof(BUS_GSEventCollection_Evt_TriggerFallDying_Multicast_Invoke, Actor) == 0x000000, "Member 'BUS_GSEventCollection_Evt_TriggerFallDying_Multicast_Invoke::Actor' has a wrong offset!");

// Function b1-Managed.BUS_GSEventCollection.Evt_OnProjectileDead_Multicast_Invoke
// 0x0001 (0x0001 - 0x0000)
struct BUS_GSEventCollection_Evt_OnProjectileDead_Multicast_Invoke final
{
public:
	EBGUBulletDestroyReason                       Reason;                                            // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
//static_assert(alignof(BUS_GSEventCollection_Evt_OnProjectileDead_Multicast_Invoke) == 0x000001, "Wrong alignment on BUS_GSEventCollection_Evt_OnProjectileDead_Multicast_Invoke");
//static_assert(sizeof(BUS_GSEventCollection_Evt_OnProjectileDead_Multicast_Invoke) == 0x000001, "Wrong size on BUS_GSEventCollection_Evt_OnProjectileDead_Multicast_Invoke");
//static_assert(offsetof(BUS_GSEventCollection_Evt_OnProjectileDead_Multicast_Invoke, Reason) == 0x000000, "Member 'BUS_GSEventCollection_Evt_OnProjectileDead_Multicast_Invoke::Reason' has a wrong offset!");

// Function b1-Managed.BUS_GSEventCollection.Evt_UpdateBuffCaster_Multicast_Invoke
// 0x0018 (0x0018 - 0x0000)
struct BUS_GSEventCollection_Evt_UpdateBuffCaster_Multicast_Invoke final
{
public:
	class AActor*                                 Actor1;                                            // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class AActor*                                 Actor2;                                            // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         P1;                                                // 0x0010(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
//static_assert(alignof(BUS_GSEventCollection_Evt_UpdateBuffCaster_Multicast_Invoke) == 0x000008, "Wrong alignment on BUS_GSEventCollection_Evt_UpdateBuffCaster_Multicast_Invoke");
//static_assert(sizeof(BUS_GSEventCollection_Evt_UpdateBuffCaster_Multicast_Invoke) == 0x000018, "Wrong size on BUS_GSEventCollection_Evt_UpdateBuffCaster_Multicast_Invoke");
//static_assert(offsetof(BUS_GSEventCollection_Evt_UpdateBuffCaster_Multicast_Invoke, Actor1) == 0x000000, "Member 'BUS_GSEventCollection_Evt_UpdateBuffCaster_Multicast_Invoke::Actor1' has a wrong offset!");
//static_assert(offsetof(BUS_GSEventCollection_Evt_UpdateBuffCaster_Multicast_Invoke, Actor2) == 0x000008, "Member 'BUS_GSEventCollection_Evt_UpdateBuffCaster_Multicast_Invoke::Actor2' has a wrong offset!");
//static_assert(offsetof(BUS_GSEventCollection_Evt_UpdateBuffCaster_Multicast_Invoke, P1) == 0x000010, "Member 'BUS_GSEventCollection_Evt_UpdateBuffCaster_Multicast_Invoke::P1' has a wrong offset!");

// Function b1-Managed.BUS_GSEventCollection.Evt_UnitCastSkillTry_Multicast_Invoke
// 0x0018 (0x0018 - 0x0000)
struct BUS_GSEventCollection_Evt_UnitCastSkillTry_Multicast_Invoke final
{
public:
	struct FCastSkillInfo                         CSI;                                               // 0x0000(0x0018)(Parm, NoDestructor, HasGetValueTypeHash)
};
//static_assert(alignof(BUS_GSEventCollection_Evt_UnitCastSkillTry_Multicast_Invoke) == 0x000004, "Wrong alignment on BUS_GSEventCollection_Evt_UnitCastSkillTry_Multicast_Invoke");
//static_assert(sizeof(BUS_GSEventCollection_Evt_UnitCastSkillTry_Multicast_Invoke) == 0x000018, "Wrong size on BUS_GSEventCollection_Evt_UnitCastSkillTry_Multicast_Invoke");
//static_assert(offsetof(BUS_GSEventCollection_Evt_UnitCastSkillTry_Multicast_Invoke, CSI) == 0x000000, "Member 'BUS_GSEventCollection_Evt_UnitCastSkillTry_Multicast_Invoke::CSI' has a wrong offset!");

// Function b1-Managed.BUS_GSEventCollection.Evt_SmartCastSkillTry_RollBack_Client
// 0x0020 (0x0020 - 0x0000)
struct BUS_GSEventCollection_Evt_SmartCastSkillTry_RollBack_Client final
{
public:
	int32                                         ID;                                                // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_4[0x4];                                        // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<int32>                                 RuleIDList;                                        // 0x0008(0x0010)(Parm)
	EMontageBindReason                            Reason;                                            // 0x0018(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	ESkillDirection                               SkillDirection;                                    // 0x0019(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         bNeedCheckSkillCanCast : 1;                        // 0x001A(0x0001)(BitIndex: 0x00, PropSize: 0x0001 (Parm, NoDestructor, HasGetValueTypeHash))
	uint8                                         Pad_1B[0x1];                                       // 0x001B(0x0001)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         PredictionKeyId;                                   // 0x001C(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
//static_assert(alignof(BUS_GSEventCollection_Evt_SmartCastSkillTry_RollBack_Client) == 0x000008, "Wrong alignment on BUS_GSEventCollection_Evt_SmartCastSkillTry_RollBack_Client");
//static_assert(sizeof(BUS_GSEventCollection_Evt_SmartCastSkillTry_RollBack_Client) == 0x000020, "Wrong size on BUS_GSEventCollection_Evt_SmartCastSkillTry_RollBack_Client");
//static_assert(offsetof(BUS_GSEventCollection_Evt_SmartCastSkillTry_RollBack_Client, ID) == 0x000000, "Member 'BUS_GSEventCollection_Evt_SmartCastSkillTry_RollBack_Client::ID' has a wrong offset!");
//static_assert(offsetof(BUS_GSEventCollection_Evt_SmartCastSkillTry_RollBack_Client, RuleIDList) == 0x000008, "Member 'BUS_GSEventCollection_Evt_SmartCastSkillTry_RollBack_Client::RuleIDList' has a wrong offset!");
//static_assert(offsetof(BUS_GSEventCollection_Evt_SmartCastSkillTry_RollBack_Client, Reason) == 0x000018, "Member 'BUS_GSEventCollection_Evt_SmartCastSkillTry_RollBack_Client::Reason' has a wrong offset!");
//static_assert(offsetof(BUS_GSEventCollection_Evt_SmartCastSkillTry_RollBack_Client, SkillDirection) == 0x000019, "Member 'BUS_GSEventCollection_Evt_SmartCastSkillTry_RollBack_Client::SkillDirection' has a wrong offset!");
//static_assert(offsetof(BUS_GSEventCollection_Evt_SmartCastSkillTry_RollBack_Client, PredictionKeyId) == 0x00001C, "Member 'BUS_GSEventCollection_Evt_SmartCastSkillTry_RollBack_Client::PredictionKeyId' has a wrong offset!");

// Function b1-Managed.BUS_GSEventCollection.Evt_RoleLevelChange_Multicast_Invoke
// 0x0008 (0x0008 - 0x0000)
struct BUS_GSEventCollection_Evt_RoleLevelChange_Multicast_Invoke final
{
public:
	int32                                         OldRoleLevel;                                      // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         NewRoleLevel;                                      // 0x0004(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
//static_assert(alignof(BUS_GSEventCollection_Evt_RoleLevelChange_Multicast_Invoke) == 0x000004, "Wrong alignment on BUS_GSEventCollection_Evt_RoleLevelChange_Multicast_Invoke");
//static_assert(sizeof(BUS_GSEventCollection_Evt_RoleLevelChange_Multicast_Invoke) == 0x000008, "Wrong size on BUS_GSEventCollection_Evt_RoleLevelChange_Multicast_Invoke");
//static_assert(offsetof(BUS_GSEventCollection_Evt_RoleLevelChange_Multicast_Invoke, OldRoleLevel) == 0x000000, "Member 'BUS_GSEventCollection_Evt_RoleLevelChange_Multicast_Invoke::OldRoleLevel' has a wrong offset!");
//static_assert(offsetof(BUS_GSEventCollection_Evt_RoleLevelChange_Multicast_Invoke, NewRoleLevel) == 0x000004, "Member 'BUS_GSEventCollection_Evt_RoleLevelChange_Multicast_Invoke::NewRoleLevel' has a wrong offset!");

// Function b1-Managed.BUS_GSEventCollection.Evt_SmartCastSkillTry_Confirm_Client
// 0x0020 (0x0020 - 0x0000)
struct BUS_GSEventCollection_Evt_SmartCastSkillTry_Confirm_Client final
{
public:
	int32                                         ID;                                                // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_4[0x4];                                        // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<int32>                                 RuleIDList;                                        // 0x0008(0x0010)(Parm)
	EMontageBindReason                            Reason;                                            // 0x0018(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	ESkillDirection                               SkillDirection;                                    // 0x0019(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         bNeedCheckSkillCanCast : 1;                        // 0x001A(0x0001)(BitIndex: 0x00, PropSize: 0x0001 (Parm, NoDestructor, HasGetValueTypeHash))
	uint8                                         Pad_1B[0x1];                                       // 0x001B(0x0001)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         PredictionKeyId;                                   // 0x001C(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
//static_assert(alignof(BUS_GSEventCollection_Evt_SmartCastSkillTry_Confirm_Client) == 0x000008, "Wrong alignment on BUS_GSEventCollection_Evt_SmartCastSkillTry_Confirm_Client");
//static_assert(sizeof(BUS_GSEventCollection_Evt_SmartCastSkillTry_Confirm_Client) == 0x000020, "Wrong size on BUS_GSEventCollection_Evt_SmartCastSkillTry_Confirm_Client");
//static_assert(offsetof(BUS_GSEventCollection_Evt_SmartCastSkillTry_Confirm_Client, ID) == 0x000000, "Member 'BUS_GSEventCollection_Evt_SmartCastSkillTry_Confirm_Client::ID' has a wrong offset!");
//static_assert(offsetof(BUS_GSEventCollection_Evt_SmartCastSkillTry_Confirm_Client, RuleIDList) == 0x000008, "Member 'BUS_GSEventCollection_Evt_SmartCastSkillTry_Confirm_Client::RuleIDList' has a wrong offset!");
//static_assert(offsetof(BUS_GSEventCollection_Evt_SmartCastSkillTry_Confirm_Client, Reason) == 0x000018, "Member 'BUS_GSEventCollection_Evt_SmartCastSkillTry_Confirm_Client::Reason' has a wrong offset!");
//static_assert(offsetof(BUS_GSEventCollection_Evt_SmartCastSkillTry_Confirm_Client, SkillDirection) == 0x000019, "Member 'BUS_GSEventCollection_Evt_SmartCastSkillTry_Confirm_Client::SkillDirection' has a wrong offset!");
//static_assert(offsetof(BUS_GSEventCollection_Evt_SmartCastSkillTry_Confirm_Client, PredictionKeyId) == 0x00001C, "Member 'BUS_GSEventCollection_Evt_SmartCastSkillTry_Confirm_Client::PredictionKeyId' has a wrong offset!");

// Function b1-Managed.BUS_GSEventCollection.Evt_RecoveryPartDamageValueMultiCast
// 0x0004 (0x0004 - 0x0000)
struct BUS_GSEventCollection_Evt_RecoveryPartDamageValueMultiCast final
{
public:
	int32                                         P1;                                                // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
//static_assert(alignof(BUS_GSEventCollection_Evt_RecoveryPartDamageValueMultiCast) == 0x000004, "Wrong alignment on BUS_GSEventCollection_Evt_RecoveryPartDamageValueMultiCast");
//static_assert(sizeof(BUS_GSEventCollection_Evt_RecoveryPartDamageValueMultiCast) == 0x000004, "Wrong size on BUS_GSEventCollection_Evt_RecoveryPartDamageValueMultiCast");
//static_assert(offsetof(BUS_GSEventCollection_Evt_RecoveryPartDamageValueMultiCast, P1) == 0x000000, "Member 'BUS_GSEventCollection_Evt_RecoveryPartDamageValueMultiCast::P1' has a wrong offset!");

// Function b1-Managed.BUS_GSEventCollection.Evt_UnitStateTriggerCMultiCastServer
// 0x000C (0x000C - 0x0000)
struct BUS_GSEventCollection_Evt_UnitStateTriggerCMultiCastServer final
{
public:
	EBUStateTrigger                               TriggerId;                                         // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_1[0x3];                                        // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         Time;                                              // 0x0004(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         NeedForceUpdate : 1;                               // 0x0008(0x0001)(BitIndex: 0x00, PropSize: 0x0001 (Parm, NoDestructor, HasGetValueTypeHash))
};
//static_assert(alignof(BUS_GSEventCollection_Evt_UnitStateTriggerCMultiCastServer) == 0x000004, "Wrong alignment on BUS_GSEventCollection_Evt_UnitStateTriggerCMultiCastServer");
//static_assert(sizeof(BUS_GSEventCollection_Evt_UnitStateTriggerCMultiCastServer) == 0x00000C, "Wrong size on BUS_GSEventCollection_Evt_UnitStateTriggerCMultiCastServer");
//static_assert(offsetof(BUS_GSEventCollection_Evt_UnitStateTriggerCMultiCastServer, TriggerId) == 0x000000, "Member 'BUS_GSEventCollection_Evt_UnitStateTriggerCMultiCastServer::TriggerId' has a wrong offset!");
//static_assert(offsetof(BUS_GSEventCollection_Evt_UnitStateTriggerCMultiCastServer, Time) == 0x000004, "Member 'BUS_GSEventCollection_Evt_UnitStateTriggerCMultiCastServer::Time' has a wrong offset!");

// Function b1-Managed.BUS_GSEventCollection.Evt_TriggerJumpSkill_RollBack_Client
// 0x0020 (0x0020 - 0x0000)
struct BUS_GSEventCollection_Evt_TriggerJumpSkill_RollBack_Client final
{
public:
	ESkillDirection                               StartJumpDir;                                      // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_1[0x7];                                        // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector2D                              CurrentInput;                                      // 0x0008(0x0010)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         PredictionKeyId;                                   // 0x0018(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
//static_assert(alignof(BUS_GSEventCollection_Evt_TriggerJumpSkill_RollBack_Client) == 0x000008, "Wrong alignment on BUS_GSEventCollection_Evt_TriggerJumpSkill_RollBack_Client");
//static_assert(sizeof(BUS_GSEventCollection_Evt_TriggerJumpSkill_RollBack_Client) == 0x000020, "Wrong size on BUS_GSEventCollection_Evt_TriggerJumpSkill_RollBack_Client");
//static_assert(offsetof(BUS_GSEventCollection_Evt_TriggerJumpSkill_RollBack_Client, StartJumpDir) == 0x000000, "Member 'BUS_GSEventCollection_Evt_TriggerJumpSkill_RollBack_Client::StartJumpDir' has a wrong offset!");
//static_assert(offsetof(BUS_GSEventCollection_Evt_TriggerJumpSkill_RollBack_Client, CurrentInput) == 0x000008, "Member 'BUS_GSEventCollection_Evt_TriggerJumpSkill_RollBack_Client::CurrentInput' has a wrong offset!");
//static_assert(offsetof(BUS_GSEventCollection_Evt_TriggerJumpSkill_RollBack_Client, PredictionKeyId) == 0x000018, "Member 'BUS_GSEventCollection_Evt_TriggerJumpSkill_RollBack_Client::PredictionKeyId' has a wrong offset!");

// Function b1-Managed.BUS_GSEventCollection.Evt_UnitCastSkillTryCMultiCastServer
// 0x0020 (0x0020 - 0x0000)
struct BUS_GSEventCollection_Evt_UnitCastSkillTryCMultiCastServer final
{
public:
	struct FCastSkillInfo                         CSI;                                               // 0x0000(0x0018)(Parm, NoDestructor, HasGetValueTypeHash)
	int32                                         PredictionKeyId;                                   // 0x0018(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         ParentPredictionKeyId;                             // 0x001C(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
//static_assert(alignof(BUS_GSEventCollection_Evt_UnitCastSkillTryCMultiCastServer) == 0x000004, "Wrong alignment on BUS_GSEventCollection_Evt_UnitCastSkillTryCMultiCastServer");
//static_assert(sizeof(BUS_GSEventCollection_Evt_UnitCastSkillTryCMultiCastServer) == 0x000020, "Wrong size on BUS_GSEventCollection_Evt_UnitCastSkillTryCMultiCastServer");
//static_assert(offsetof(BUS_GSEventCollection_Evt_UnitCastSkillTryCMultiCastServer, CSI) == 0x000000, "Member 'BUS_GSEventCollection_Evt_UnitCastSkillTryCMultiCastServer::CSI' has a wrong offset!");
//static_assert(offsetof(BUS_GSEventCollection_Evt_UnitCastSkillTryCMultiCastServer, PredictionKeyId) == 0x000018, "Member 'BUS_GSEventCollection_Evt_UnitCastSkillTryCMultiCastServer::PredictionKeyId' has a wrong offset!");
//static_assert(offsetof(BUS_GSEventCollection_Evt_UnitCastSkillTryCMultiCastServer, ParentPredictionKeyId) == 0x00001C, "Member 'BUS_GSEventCollection_Evt_UnitCastSkillTryCMultiCastServer::ParentPredictionKeyId' has a wrong offset!");

// Function b1-Managed.BUS_GSEventCollection.Evt_ClientMultiCastRPCTest2MultiCast
// 0x0020 (0x0020 - 0x0000)
struct BUS_GSEventCollection_Evt_ClientMultiCastRPCTest2MultiCast final
{
public:
	class UAnimMontage*                           Montage;                                           // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         PlayTimeRate;                                      // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         MontagePosOffset;                                  // 0x000C(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class FName                                   StartSectionName;                                  // 0x0010(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	EMontageBindReason                            Reason;                                            // 0x0018(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
//static_assert(alignof(BUS_GSEventCollection_Evt_ClientMultiCastRPCTest2MultiCast) == 0x000008, "Wrong alignment on BUS_GSEventCollection_Evt_ClientMultiCastRPCTest2MultiCast");
//static_assert(sizeof(BUS_GSEventCollection_Evt_ClientMultiCastRPCTest2MultiCast) == 0x000020, "Wrong size on BUS_GSEventCollection_Evt_ClientMultiCastRPCTest2MultiCast");
//static_assert(offsetof(BUS_GSEventCollection_Evt_ClientMultiCastRPCTest2MultiCast, Montage) == 0x000000, "Member 'BUS_GSEventCollection_Evt_ClientMultiCastRPCTest2MultiCast::Montage' has a wrong offset!");
//static_assert(offsetof(BUS_GSEventCollection_Evt_ClientMultiCastRPCTest2MultiCast, PlayTimeRate) == 0x000008, "Member 'BUS_GSEventCollection_Evt_ClientMultiCastRPCTest2MultiCast::PlayTimeRate' has a wrong offset!");
//static_assert(offsetof(BUS_GSEventCollection_Evt_ClientMultiCastRPCTest2MultiCast, MontagePosOffset) == 0x00000C, "Member 'BUS_GSEventCollection_Evt_ClientMultiCastRPCTest2MultiCast::MontagePosOffset' has a wrong offset!");
//static_assert(offsetof(BUS_GSEventCollection_Evt_ClientMultiCastRPCTest2MultiCast, StartSectionName) == 0x000010, "Member 'BUS_GSEventCollection_Evt_ClientMultiCastRPCTest2MultiCast::StartSectionName' has a wrong offset!");
//static_assert(offsetof(BUS_GSEventCollection_Evt_ClientMultiCastRPCTest2MultiCast, Reason) == 0x000018, "Member 'BUS_GSEventCollection_Evt_ClientMultiCastRPCTest2MultiCast::Reason' has a wrong offset!");

// Function b1-Managed.BUS_GSEventCollection.Evt_ClientMultiCastRPCTest1MultiCast
// 0x0020 (0x0020 - 0x0000)
struct BUS_GSEventCollection_Evt_ClientMultiCastRPCTest1MultiCast final
{
public:
	class UAnimMontage*                           Montage;                                           // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         PlayTimeRate;                                      // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         MontagePosOffset;                                  // 0x000C(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class FName                                   StartSectionName;                                  // 0x0010(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	EMontageBindReason                            Reason;                                            // 0x0018(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
//static_assert(alignof(BUS_GSEventCollection_Evt_ClientMultiCastRPCTest1MultiCast) == 0x000008, "Wrong alignment on BUS_GSEventCollection_Evt_ClientMultiCastRPCTest1MultiCast");
//static_assert(sizeof(BUS_GSEventCollection_Evt_ClientMultiCastRPCTest1MultiCast) == 0x000020, "Wrong size on BUS_GSEventCollection_Evt_ClientMultiCastRPCTest1MultiCast");
//static_assert(offsetof(BUS_GSEventCollection_Evt_ClientMultiCastRPCTest1MultiCast, Montage) == 0x000000, "Member 'BUS_GSEventCollection_Evt_ClientMultiCastRPCTest1MultiCast::Montage' has a wrong offset!");
//static_assert(offsetof(BUS_GSEventCollection_Evt_ClientMultiCastRPCTest1MultiCast, PlayTimeRate) == 0x000008, "Member 'BUS_GSEventCollection_Evt_ClientMultiCastRPCTest1MultiCast::PlayTimeRate' has a wrong offset!");
//static_assert(offsetof(BUS_GSEventCollection_Evt_ClientMultiCastRPCTest1MultiCast, MontagePosOffset) == 0x00000C, "Member 'BUS_GSEventCollection_Evt_ClientMultiCastRPCTest1MultiCast::MontagePosOffset' has a wrong offset!");
//static_assert(offsetof(BUS_GSEventCollection_Evt_ClientMultiCastRPCTest1MultiCast, StartSectionName) == 0x000010, "Member 'BUS_GSEventCollection_Evt_ClientMultiCastRPCTest1MultiCast::StartSectionName' has a wrong offset!");
//static_assert(offsetof(BUS_GSEventCollection_Evt_ClientMultiCastRPCTest1MultiCast, Reason) == 0x000018, "Member 'BUS_GSEventCollection_Evt_ClientMultiCastRPCTest1MultiCast::Reason' has a wrong offset!");

// Function b1-Managed.BUS_GSEventCollection.Evt_TriggerJumpSkill_Confirm_Client
// 0x0020 (0x0020 - 0x0000)
struct BUS_GSEventCollection_Evt_TriggerJumpSkill_Confirm_Client final
{
public:
	ESkillDirection                               StartJumpDir;                                      // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_1[0x7];                                        // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector2D                              CurrentInput;                                      // 0x0008(0x0010)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         PredictionKeyId;                                   // 0x0018(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
//static_assert(alignof(BUS_GSEventCollection_Evt_TriggerJumpSkill_Confirm_Client) == 0x000008, "Wrong alignment on BUS_GSEventCollection_Evt_TriggerJumpSkill_Confirm_Client");
//static_assert(sizeof(BUS_GSEventCollection_Evt_TriggerJumpSkill_Confirm_Client) == 0x000020, "Wrong size on BUS_GSEventCollection_Evt_TriggerJumpSkill_Confirm_Client");
//static_assert(offsetof(BUS_GSEventCollection_Evt_TriggerJumpSkill_Confirm_Client, StartJumpDir) == 0x000000, "Member 'BUS_GSEventCollection_Evt_TriggerJumpSkill_Confirm_Client::StartJumpDir' has a wrong offset!");
//static_assert(offsetof(BUS_GSEventCollection_Evt_TriggerJumpSkill_Confirm_Client, CurrentInput) == 0x000008, "Member 'BUS_GSEventCollection_Evt_TriggerJumpSkill_Confirm_Client::CurrentInput' has a wrong offset!");
//static_assert(offsetof(BUS_GSEventCollection_Evt_TriggerJumpSkill_Confirm_Client, PredictionKeyId) == 0x000018, "Member 'BUS_GSEventCollection_Evt_TriggerJumpSkill_Confirm_Client::PredictionKeyId' has a wrong offset!");

// Function b1-Managed.BUS_GSEventCollection.Evt_UnitEquipFaBao_Multicast_Invoke
// 0x0004 (0x0004 - 0x0000)
struct BUS_GSEventCollection_Evt_UnitEquipFaBao_Multicast_Invoke final
{
public:
	int32                                         P1;                                                // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
//static_assert(alignof(BUS_GSEventCollection_Evt_UnitEquipFaBao_Multicast_Invoke) == 0x000004, "Wrong alignment on BUS_GSEventCollection_Evt_UnitEquipFaBao_Multicast_Invoke");
//static_assert(sizeof(BUS_GSEventCollection_Evt_UnitEquipFaBao_Multicast_Invoke) == 0x000004, "Wrong size on BUS_GSEventCollection_Evt_UnitEquipFaBao_Multicast_Invoke");
//static_assert(offsetof(BUS_GSEventCollection_Evt_UnitEquipFaBao_Multicast_Invoke, P1) == 0x000000, "Member 'BUS_GSEventCollection_Evt_UnitEquipFaBao_Multicast_Invoke::P1' has a wrong offset!");

// Function b1-Managed.BUS_GSEventCollection.Evt_ActivateTalent_Multicast_Invoke
// 0x0008 (0x0008 - 0x0000)
struct BUS_GSEventCollection_Evt_ActivateTalent_Multicast_Invoke final
{
public:
	int32                                         TalentID;                                          // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         ChangeLevel;                                       // 0x0004(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
//static_assert(alignof(BUS_GSEventCollection_Evt_ActivateTalent_Multicast_Invoke) == 0x000004, "Wrong alignment on BUS_GSEventCollection_Evt_ActivateTalent_Multicast_Invoke");
//static_assert(sizeof(BUS_GSEventCollection_Evt_ActivateTalent_Multicast_Invoke) == 0x000008, "Wrong size on BUS_GSEventCollection_Evt_ActivateTalent_Multicast_Invoke");
//static_assert(offsetof(BUS_GSEventCollection_Evt_ActivateTalent_Multicast_Invoke, TalentID) == 0x000000, "Member 'BUS_GSEventCollection_Evt_ActivateTalent_Multicast_Invoke::TalentID' has a wrong offset!");
//static_assert(offsetof(BUS_GSEventCollection_Evt_ActivateTalent_Multicast_Invoke, ChangeLevel) == 0x000004, "Member 'BUS_GSEventCollection_Evt_ActivateTalent_Multicast_Invoke::ChangeLevel' has a wrong offset!");

// Function b1-Managed.BUS_GSEventCollection.Evt_TriggerSkillEffectBySkillServer
// 0x00F0 (0x00F0 - 0x0000)
struct BUS_GSEventCollection_Evt_TriggerSkillEffectBySkillServer final
{
public:
	int32                                         EffectID;                                          // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_4[0x4];                                        // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class AActor*                                 Caster;                                            // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class AActor*                                 Target;                                            // 0x0010(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FEffectInstReq                         EffectInstReq;                                     // 0x0018(0x00D0)(Parm, NoDestructor, HasGetValueTypeHash)
	int32                                         PredictionKeyId;                                   // 0x00E8(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         ParentPredictionKeyId;                             // 0x00EC(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
//static_assert(alignof(BUS_GSEventCollection_Evt_TriggerSkillEffectBySkillServer) == 0x000008, "Wrong alignment on BUS_GSEventCollection_Evt_TriggerSkillEffectBySkillServer");
//static_assert(sizeof(BUS_GSEventCollection_Evt_TriggerSkillEffectBySkillServer) == 0x0000F0, "Wrong size on BUS_GSEventCollection_Evt_TriggerSkillEffectBySkillServer");
//static_assert(offsetof(BUS_GSEventCollection_Evt_TriggerSkillEffectBySkillServer, EffectID) == 0x000000, "Member 'BUS_GSEventCollection_Evt_TriggerSkillEffectBySkillServer::EffectID' has a wrong offset!");
//static_assert(offsetof(BUS_GSEventCollection_Evt_TriggerSkillEffectBySkillServer, Caster) == 0x000008, "Member 'BUS_GSEventCollection_Evt_TriggerSkillEffectBySkillServer::Caster' has a wrong offset!");
//static_assert(offsetof(BUS_GSEventCollection_Evt_TriggerSkillEffectBySkillServer, Target) == 0x000010, "Member 'BUS_GSEventCollection_Evt_TriggerSkillEffectBySkillServer::Target' has a wrong offset!");
//static_assert(offsetof(BUS_GSEventCollection_Evt_TriggerSkillEffectBySkillServer, EffectInstReq) == 0x000018, "Member 'BUS_GSEventCollection_Evt_TriggerSkillEffectBySkillServer::EffectInstReq' has a wrong offset!");
//static_assert(offsetof(BUS_GSEventCollection_Evt_TriggerSkillEffectBySkillServer, PredictionKeyId) == 0x0000E8, "Member 'BUS_GSEventCollection_Evt_TriggerSkillEffectBySkillServer::PredictionKeyId' has a wrong offset!");
//static_assert(offsetof(BUS_GSEventCollection_Evt_TriggerSkillEffectBySkillServer, ParentPredictionKeyId) == 0x0000EC, "Member 'BUS_GSEventCollection_Evt_TriggerSkillEffectBySkillServer::ParentPredictionKeyId' has a wrong offset!");

// Function b1-Managed.BUS_GSEventCollection.Evt_TriggerEndSave_Multicast_Invoke
// 0x0018 (0x0018 - 0x0000)
struct BUS_GSEventCollection_Evt_TriggerEndSave_Multicast_Invoke final
{
public:
	uint8                                         Success : 1;                                       // 0x0000(0x0001)(BitIndex: 0x00, PropSize: 0x0001 (Parm, NoDestructor, HasGetValueTypeHash))
	uint8                                         Pad_1[0x7];                                        // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class AActor*                                 Saver;                                             // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class AActor*                                 BeSaver;                                           // 0x0010(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
//static_assert(alignof(BUS_GSEventCollection_Evt_TriggerEndSave_Multicast_Invoke) == 0x000008, "Wrong alignment on BUS_GSEventCollection_Evt_TriggerEndSave_Multicast_Invoke");
//static_assert(sizeof(BUS_GSEventCollection_Evt_TriggerEndSave_Multicast_Invoke) == 0x000018, "Wrong size on BUS_GSEventCollection_Evt_TriggerEndSave_Multicast_Invoke");
//static_assert(offsetof(BUS_GSEventCollection_Evt_TriggerEndSave_Multicast_Invoke, Saver) == 0x000008, "Member 'BUS_GSEventCollection_Evt_TriggerEndSave_Multicast_Invoke::Saver' has a wrong offset!");
//static_assert(offsetof(BUS_GSEventCollection_Evt_TriggerEndSave_Multicast_Invoke, BeSaver) == 0x000010, "Member 'BUS_GSEventCollection_Evt_TriggerEndSave_Multicast_Invoke::BeSaver' has a wrong offset!");

// Function b1-Managed.BUS_GSEventCollection.Evt_TriggerNormalDamageEffectServer
// 0x0140 (0x0140 - 0x0000)
struct BUS_GSEventCollection_Evt_TriggerNormalDamageEffectServer final
{
public:
	class AActor*                                 Attacker;                                          // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FSkillDamageConfig                     SkillDamageConfig;                                 // 0x0008(0x0038)(Parm, ZeroConstructor, HasGetValueTypeHash)
	struct FEffectInstReq                         EffectInstReq;                                     // 0x0040(0x00D0)(Parm, NoDestructor, HasGetValueTypeHash)
	struct FBattleAttrSnapShot                    Attacker_AttrMemData;                              // 0x0110(0x0024)(Parm, NoDestructor, HasGetValueTypeHash)
	int32                                         PredictionKeyId;                                   // 0x0134(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         ParentPredictionKeyId;                             // 0x0138(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
//static_assert(alignof(BUS_GSEventCollection_Evt_TriggerNormalDamageEffectServer) == 0x000008, "Wrong alignment on BUS_GSEventCollection_Evt_TriggerNormalDamageEffectServer");
//static_assert(sizeof(BUS_GSEventCollection_Evt_TriggerNormalDamageEffectServer) == 0x000140, "Wrong size on BUS_GSEventCollection_Evt_TriggerNormalDamageEffectServer");
//static_assert(offsetof(BUS_GSEventCollection_Evt_TriggerNormalDamageEffectServer, Attacker) == 0x000000, "Member 'BUS_GSEventCollection_Evt_TriggerNormalDamageEffectServer::Attacker' has a wrong offset!");
//static_assert(offsetof(BUS_GSEventCollection_Evt_TriggerNormalDamageEffectServer, SkillDamageConfig) == 0x000008, "Member 'BUS_GSEventCollection_Evt_TriggerNormalDamageEffectServer::SkillDamageConfig' has a wrong offset!");
//static_assert(offsetof(BUS_GSEventCollection_Evt_TriggerNormalDamageEffectServer, EffectInstReq) == 0x000040, "Member 'BUS_GSEventCollection_Evt_TriggerNormalDamageEffectServer::EffectInstReq' has a wrong offset!");
//static_assert(offsetof(BUS_GSEventCollection_Evt_TriggerNormalDamageEffectServer, Attacker_AttrMemData) == 0x000110, "Member 'BUS_GSEventCollection_Evt_TriggerNormalDamageEffectServer::Attacker_AttrMemData' has a wrong offset!");
//static_assert(offsetof(BUS_GSEventCollection_Evt_TriggerNormalDamageEffectServer, PredictionKeyId) == 0x000134, "Member 'BUS_GSEventCollection_Evt_TriggerNormalDamageEffectServer::PredictionKeyId' has a wrong offset!");
//static_assert(offsetof(BUS_GSEventCollection_Evt_TriggerNormalDamageEffectServer, ParentPredictionKeyId) == 0x000138, "Member 'BUS_GSEventCollection_Evt_TriggerNormalDamageEffectServer::ParentPredictionKeyId' has a wrong offset!");

// Function b1-Managed.BUS_GSEventCollection.Evt_UnitStatePredic_RollBack_Client
// 0x000C (0x000C - 0x0000)
struct BUS_GSEventCollection_Evt_UnitStatePredic_RollBack_Client final
{
public:
	EBGUUnitState                                 UnitState;                                         // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         NeedForceUpdate : 1;                               // 0x0001(0x0001)(BitIndex: 0x00, PropSize: 0x0001 (Parm, NoDestructor, HasGetValueTypeHash))
	uint8                                         Pad_2[0x2];                                        // 0x0002(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         Time;                                              // 0x0004(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         PredictionKeyId;                                   // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
//static_assert(alignof(BUS_GSEventCollection_Evt_UnitStatePredic_RollBack_Client) == 0x000004, "Wrong alignment on BUS_GSEventCollection_Evt_UnitStatePredic_RollBack_Client");
//static_assert(sizeof(BUS_GSEventCollection_Evt_UnitStatePredic_RollBack_Client) == 0x00000C, "Wrong size on BUS_GSEventCollection_Evt_UnitStatePredic_RollBack_Client");
//static_assert(offsetof(BUS_GSEventCollection_Evt_UnitStatePredic_RollBack_Client, UnitState) == 0x000000, "Member 'BUS_GSEventCollection_Evt_UnitStatePredic_RollBack_Client::UnitState' has a wrong offset!");
//static_assert(offsetof(BUS_GSEventCollection_Evt_UnitStatePredic_RollBack_Client, Time) == 0x000004, "Member 'BUS_GSEventCollection_Evt_UnitStatePredic_RollBack_Client::Time' has a wrong offset!");
//static_assert(offsetof(BUS_GSEventCollection_Evt_UnitStatePredic_RollBack_Client, PredictionKeyId) == 0x000008, "Member 'BUS_GSEventCollection_Evt_UnitStatePredic_RollBack_Client::PredictionKeyId' has a wrong offset!");

// Function b1-Managed.BUS_GSEventCollection.Evt_BuffAllRemove_Multicast_Invoke
// 0x0002 (0x0002 - 0x0000)
struct BUS_GSEventCollection_Evt_BuffAllRemove_Multicast_Invoke final
{
public:
	EBuffEffectTriggerType                        RemoveTriggerType;                                 // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         WithTriggerRemmoveEffect : 1;                      // 0x0001(0x0001)(BitIndex: 0x00, PropSize: 0x0001 (Parm, NoDestructor, HasGetValueTypeHash))
};
//static_assert(alignof(BUS_GSEventCollection_Evt_BuffAllRemove_Multicast_Invoke) == 0x000001, "Wrong alignment on BUS_GSEventCollection_Evt_BuffAllRemove_Multicast_Invoke");
//static_assert(sizeof(BUS_GSEventCollection_Evt_BuffAllRemove_Multicast_Invoke) == 0x000002, "Wrong size on BUS_GSEventCollection_Evt_BuffAllRemove_Multicast_Invoke");
//static_assert(offsetof(BUS_GSEventCollection_Evt_BuffAllRemove_Multicast_Invoke, RemoveTriggerType) == 0x000000, "Member 'BUS_GSEventCollection_Evt_BuffAllRemove_Multicast_Invoke::RemoveTriggerType' has a wrong offset!");

// Function b1-Managed.BUS_GSEventCollection.Evt_AddBuffNotify_Multicast_Invoke
// 0x0018 (0x0018 - 0x0000)
struct BUS_GSEventCollection_Evt_AddBuffNotify_Multicast_Invoke final
{
public:
	uint8                                         IsHasBuffBefore : 1;                               // 0x0000(0x0001)(BitIndex: 0x00, PropSize: 0x0001 (Parm, NoDestructor, HasGetValueTypeHash))
	uint8                                         Pad_1[0x7];                                        // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class AActor*                                 Caster;                                            // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         BuffID;                                            // 0x0010(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         BuffDuration;                                      // 0x0014(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
//static_assert(alignof(BUS_GSEventCollection_Evt_AddBuffNotify_Multicast_Invoke) == 0x000008, "Wrong alignment on BUS_GSEventCollection_Evt_AddBuffNotify_Multicast_Invoke");
//static_assert(sizeof(BUS_GSEventCollection_Evt_AddBuffNotify_Multicast_Invoke) == 0x000018, "Wrong size on BUS_GSEventCollection_Evt_AddBuffNotify_Multicast_Invoke");
//static_assert(offsetof(BUS_GSEventCollection_Evt_AddBuffNotify_Multicast_Invoke, Caster) == 0x000008, "Member 'BUS_GSEventCollection_Evt_AddBuffNotify_Multicast_Invoke::Caster' has a wrong offset!");
//static_assert(offsetof(BUS_GSEventCollection_Evt_AddBuffNotify_Multicast_Invoke, BuffID) == 0x000010, "Member 'BUS_GSEventCollection_Evt_AddBuffNotify_Multicast_Invoke::BuffID' has a wrong offset!");
//static_assert(offsetof(BUS_GSEventCollection_Evt_AddBuffNotify_Multicast_Invoke, BuffDuration) == 0x000014, "Member 'BUS_GSEventCollection_Evt_AddBuffNotify_Multicast_Invoke::BuffDuration' has a wrong offset!");

// Function b1-Managed.BUS_GSEventCollection.Evt_UnitStatePredic_Confirm_Client
// 0x000C (0x000C - 0x0000)
struct BUS_GSEventCollection_Evt_UnitStatePredic_Confirm_Client final
{
public:
	EBGUUnitState                                 UnitState;                                         // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         NeedForceUpdate : 1;                               // 0x0001(0x0001)(BitIndex: 0x00, PropSize: 0x0001 (Parm, NoDestructor, HasGetValueTypeHash))
	uint8                                         Pad_2[0x2];                                        // 0x0002(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         Time;                                              // 0x0004(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         PredictionKeyId;                                   // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
//static_assert(alignof(BUS_GSEventCollection_Evt_UnitStatePredic_Confirm_Client) == 0x000004, "Wrong alignment on BUS_GSEventCollection_Evt_UnitStatePredic_Confirm_Client");
//static_assert(sizeof(BUS_GSEventCollection_Evt_UnitStatePredic_Confirm_Client) == 0x00000C, "Wrong size on BUS_GSEventCollection_Evt_UnitStatePredic_Confirm_Client");
//static_assert(offsetof(BUS_GSEventCollection_Evt_UnitStatePredic_Confirm_Client, UnitState) == 0x000000, "Member 'BUS_GSEventCollection_Evt_UnitStatePredic_Confirm_Client::UnitState' has a wrong offset!");
//static_assert(offsetof(BUS_GSEventCollection_Evt_UnitStatePredic_Confirm_Client, Time) == 0x000004, "Member 'BUS_GSEventCollection_Evt_UnitStatePredic_Confirm_Client::Time' has a wrong offset!");
//static_assert(offsetof(BUS_GSEventCollection_Evt_UnitStatePredic_Confirm_Client, PredictionKeyId) == 0x000008, "Member 'BUS_GSEventCollection_Evt_UnitStatePredic_Confirm_Client::PredictionKeyId' has a wrong offset!");

// Function b1-Managed.BUS_GSEventCollection.Evt_CastSkillWithAnimMontageServer
// 0x0028 (0x0028 - 0x0000)
struct BUS_GSEventCollection_Evt_CastSkillWithAnimMontageServer final
{
public:
	class UAnimMontage*                           Montage;                                           // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         PlayTimeRate;                                      // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         MontagePosOffset;                                  // 0x000C(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class FName                                   StartSectionName;                                  // 0x0010(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	EMontageBindReason                            Reason;                                            // 0x0018(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_19[0x3];                                       // 0x0019(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         PredictionKeyId;                                   // 0x001C(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         ParentPredictionKeyId;                             // 0x0020(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
//static_assert(alignof(BUS_GSEventCollection_Evt_CastSkillWithAnimMontageServer) == 0x000008, "Wrong alignment on BUS_GSEventCollection_Evt_CastSkillWithAnimMontageServer");
//static_assert(sizeof(BUS_GSEventCollection_Evt_CastSkillWithAnimMontageServer) == 0x000028, "Wrong size on BUS_GSEventCollection_Evt_CastSkillWithAnimMontageServer");
//static_assert(offsetof(BUS_GSEventCollection_Evt_CastSkillWithAnimMontageServer, Montage) == 0x000000, "Member 'BUS_GSEventCollection_Evt_CastSkillWithAnimMontageServer::Montage' has a wrong offset!");
//static_assert(offsetof(BUS_GSEventCollection_Evt_CastSkillWithAnimMontageServer, PlayTimeRate) == 0x000008, "Member 'BUS_GSEventCollection_Evt_CastSkillWithAnimMontageServer::PlayTimeRate' has a wrong offset!");
//static_assert(offsetof(BUS_GSEventCollection_Evt_CastSkillWithAnimMontageServer, MontagePosOffset) == 0x00000C, "Member 'BUS_GSEventCollection_Evt_CastSkillWithAnimMontageServer::MontagePosOffset' has a wrong offset!");
//static_assert(offsetof(BUS_GSEventCollection_Evt_CastSkillWithAnimMontageServer, StartSectionName) == 0x000010, "Member 'BUS_GSEventCollection_Evt_CastSkillWithAnimMontageServer::StartSectionName' has a wrong offset!");
//static_assert(offsetof(BUS_GSEventCollection_Evt_CastSkillWithAnimMontageServer, Reason) == 0x000018, "Member 'BUS_GSEventCollection_Evt_CastSkillWithAnimMontageServer::Reason' has a wrong offset!");
//static_assert(offsetof(BUS_GSEventCollection_Evt_CastSkillWithAnimMontageServer, PredictionKeyId) == 0x00001C, "Member 'BUS_GSEventCollection_Evt_CastSkillWithAnimMontageServer::PredictionKeyId' has a wrong offset!");
//static_assert(offsetof(BUS_GSEventCollection_Evt_CastSkillWithAnimMontageServer, ParentPredictionKeyId) == 0x000020, "Member 'BUS_GSEventCollection_Evt_CastSkillWithAnimMontageServer::ParentPredictionKeyId' has a wrong offset!");

// Function b1-Managed.BUS_GSEventCollection.Evt_ClientMultiCastRPCTest1Server
// 0x0020 (0x0020 - 0x0000)
struct BUS_GSEventCollection_Evt_ClientMultiCastRPCTest1Server final
{
public:
	class UAnimMontage*                           Montage;                                           // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         PlayTimeRate;                                      // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         MontagePosOffset;                                  // 0x000C(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class FName                                   StartSectionName;                                  // 0x0010(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	EMontageBindReason                            Reason;                                            // 0x0018(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
//static_assert(alignof(BUS_GSEventCollection_Evt_ClientMultiCastRPCTest1Server) == 0x000008, "Wrong alignment on BUS_GSEventCollection_Evt_ClientMultiCastRPCTest1Server");
//static_assert(sizeof(BUS_GSEventCollection_Evt_ClientMultiCastRPCTest1Server) == 0x000020, "Wrong size on BUS_GSEventCollection_Evt_ClientMultiCastRPCTest1Server");
//static_assert(offsetof(BUS_GSEventCollection_Evt_ClientMultiCastRPCTest1Server, Montage) == 0x000000, "Member 'BUS_GSEventCollection_Evt_ClientMultiCastRPCTest1Server::Montage' has a wrong offset!");
//static_assert(offsetof(BUS_GSEventCollection_Evt_ClientMultiCastRPCTest1Server, PlayTimeRate) == 0x000008, "Member 'BUS_GSEventCollection_Evt_ClientMultiCastRPCTest1Server::PlayTimeRate' has a wrong offset!");
//static_assert(offsetof(BUS_GSEventCollection_Evt_ClientMultiCastRPCTest1Server, MontagePosOffset) == 0x00000C, "Member 'BUS_GSEventCollection_Evt_ClientMultiCastRPCTest1Server::MontagePosOffset' has a wrong offset!");
//static_assert(offsetof(BUS_GSEventCollection_Evt_ClientMultiCastRPCTest1Server, StartSectionName) == 0x000010, "Member 'BUS_GSEventCollection_Evt_ClientMultiCastRPCTest1Server::StartSectionName' has a wrong offset!");
//static_assert(offsetof(BUS_GSEventCollection_Evt_ClientMultiCastRPCTest1Server, Reason) == 0x000018, "Member 'BUS_GSEventCollection_Evt_ClientMultiCastRPCTest1Server::Reason' has a wrong offset!");

// Function b1-Managed.BUS_GSEventCollection.Evt_RecoveryPartDamageValueServer
// 0x0004 (0x0004 - 0x0000)
struct BUS_GSEventCollection_Evt_RecoveryPartDamageValueServer final
{
public:
	int32                                         P1;                                                // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
//static_assert(alignof(BUS_GSEventCollection_Evt_RecoveryPartDamageValueServer) == 0x000004, "Wrong alignment on BUS_GSEventCollection_Evt_RecoveryPartDamageValueServer");
//static_assert(sizeof(BUS_GSEventCollection_Evt_RecoveryPartDamageValueServer) == 0x000004, "Wrong size on BUS_GSEventCollection_Evt_RecoveryPartDamageValueServer");
//static_assert(offsetof(BUS_GSEventCollection_Evt_RecoveryPartDamageValueServer, P1) == 0x000000, "Member 'BUS_GSEventCollection_Evt_RecoveryPartDamageValueServer::P1' has a wrong offset!");

// Function b1-Managed.BUS_GSEventCollection.Evt_ClientMultiCastRPCTest2Server
// 0x0028 (0x0028 - 0x0000)
struct BUS_GSEventCollection_Evt_ClientMultiCastRPCTest2Server final
{
public:
	class UAnimMontage*                           Montage;                                           // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         PlayTimeRate;                                      // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         MontagePosOffset;                                  // 0x000C(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class FName                                   StartSectionName;                                  // 0x0010(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	EMontageBindReason                            Reason;                                            // 0x0018(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_19[0x3];                                       // 0x0019(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         PredictionKeyId;                                   // 0x001C(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         ParentPredictionKeyId;                             // 0x0020(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
//static_assert(alignof(BUS_GSEventCollection_Evt_ClientMultiCastRPCTest2Server) == 0x000008, "Wrong alignment on BUS_GSEventCollection_Evt_ClientMultiCastRPCTest2Server");
//static_assert(sizeof(BUS_GSEventCollection_Evt_ClientMultiCastRPCTest2Server) == 0x000028, "Wrong size on BUS_GSEventCollection_Evt_ClientMultiCastRPCTest2Server");
//static_assert(offsetof(BUS_GSEventCollection_Evt_ClientMultiCastRPCTest2Server, Montage) == 0x000000, "Member 'BUS_GSEventCollection_Evt_ClientMultiCastRPCTest2Server::Montage' has a wrong offset!");
//static_assert(offsetof(BUS_GSEventCollection_Evt_ClientMultiCastRPCTest2Server, PlayTimeRate) == 0x000008, "Member 'BUS_GSEventCollection_Evt_ClientMultiCastRPCTest2Server::PlayTimeRate' has a wrong offset!");
//static_assert(offsetof(BUS_GSEventCollection_Evt_ClientMultiCastRPCTest2Server, MontagePosOffset) == 0x00000C, "Member 'BUS_GSEventCollection_Evt_ClientMultiCastRPCTest2Server::MontagePosOffset' has a wrong offset!");
//static_assert(offsetof(BUS_GSEventCollection_Evt_ClientMultiCastRPCTest2Server, StartSectionName) == 0x000010, "Member 'BUS_GSEventCollection_Evt_ClientMultiCastRPCTest2Server::StartSectionName' has a wrong offset!");
//static_assert(offsetof(BUS_GSEventCollection_Evt_ClientMultiCastRPCTest2Server, Reason) == 0x000018, "Member 'BUS_GSEventCollection_Evt_ClientMultiCastRPCTest2Server::Reason' has a wrong offset!");
//static_assert(offsetof(BUS_GSEventCollection_Evt_ClientMultiCastRPCTest2Server, PredictionKeyId) == 0x00001C, "Member 'BUS_GSEventCollection_Evt_ClientMultiCastRPCTest2Server::PredictionKeyId' has a wrong offset!");
//static_assert(offsetof(BUS_GSEventCollection_Evt_ClientMultiCastRPCTest2Server, ParentPredictionKeyId) == 0x000020, "Member 'BUS_GSEventCollection_Evt_ClientMultiCastRPCTest2Server::ParentPredictionKeyId' has a wrong offset!");

// Function b1-Managed.BUS_GSEventCollection.Evt_FinishRescue_Multicast_Invoke
// 0x0008 (0x0008 - 0x0000)
struct BUS_GSEventCollection_Evt_FinishRescue_Multicast_Invoke final
{
public:
	class AActor*                                 Target;                                            // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
//static_assert(alignof(BUS_GSEventCollection_Evt_FinishRescue_Multicast_Invoke) == 0x000008, "Wrong alignment on BUS_GSEventCollection_Evt_FinishRescue_Multicast_Invoke");
//static_assert(sizeof(BUS_GSEventCollection_Evt_FinishRescue_Multicast_Invoke) == 0x000008, "Wrong size on BUS_GSEventCollection_Evt_FinishRescue_Multicast_Invoke");
//static_assert(offsetof(BUS_GSEventCollection_Evt_FinishRescue_Multicast_Invoke, Target) == 0x000000, "Member 'BUS_GSEventCollection_Evt_FinishRescue_Multicast_Invoke::Target' has a wrong offset!");

// Function b1-Managed.BUS_GSEventCollection.Evt_OnlineChallengeBeginMultiCast
// 0x0008 (0x0008 - 0x0000)
struct BUS_GSEventCollection_Evt_OnlineChallengeBeginMultiCast final
{
public:
	int32                                         P1;                                                // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         P2;                                                // 0x0004(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
//static_assert(alignof(BUS_GSEventCollection_Evt_OnlineChallengeBeginMultiCast) == 0x000004, "Wrong alignment on BUS_GSEventCollection_Evt_OnlineChallengeBeginMultiCast");
//static_assert(sizeof(BUS_GSEventCollection_Evt_OnlineChallengeBeginMultiCast) == 0x000008, "Wrong size on BUS_GSEventCollection_Evt_OnlineChallengeBeginMultiCast");
//static_assert(offsetof(BUS_GSEventCollection_Evt_OnlineChallengeBeginMultiCast, P1) == 0x000000, "Member 'BUS_GSEventCollection_Evt_OnlineChallengeBeginMultiCast::P1' has a wrong offset!");
//static_assert(offsetof(BUS_GSEventCollection_Evt_OnlineChallengeBeginMultiCast, P2) == 0x000004, "Member 'BUS_GSEventCollection_Evt_OnlineChallengeBeginMultiCast::P2' has a wrong offset!");

// Function b1-Managed.BUS_GSEventCollection.Evt_SkillRotate_Multicast_Invoke
// 0x0004 (0x0004 - 0x0000)
struct BUS_GSEventCollection_Evt_SkillRotate_Multicast_Invoke final
{
public:
	int32                                         P1;                                                // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
//static_assert(alignof(BUS_GSEventCollection_Evt_SkillRotate_Multicast_Invoke) == 0x000004, "Wrong alignment on BUS_GSEventCollection_Evt_SkillRotate_Multicast_Invoke");
//static_assert(sizeof(BUS_GSEventCollection_Evt_SkillRotate_Multicast_Invoke) == 0x000004, "Wrong size on BUS_GSEventCollection_Evt_SkillRotate_Multicast_Invoke");
//static_assert(offsetof(BUS_GSEventCollection_Evt_SkillRotate_Multicast_Invoke, P1) == 0x000000, "Member 'BUS_GSEventCollection_Evt_SkillRotate_Multicast_Invoke::P1' has a wrong offset!");

// Function b1-Managed.BUS_GSEventCollection.Evt_RebirthTeleportFinish_Invoke
// 0x0001 (0x0001 - 0x0000)
struct BUS_GSEventCollection_Evt_RebirthTeleportFinish_Invoke final
{
public:
	ERebirthType                                  State;                                             // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
//static_assert(alignof(BUS_GSEventCollection_Evt_RebirthTeleportFinish_Invoke) == 0x000001, "Wrong alignment on BUS_GSEventCollection_Evt_RebirthTeleportFinish_Invoke");
//static_assert(sizeof(BUS_GSEventCollection_Evt_RebirthTeleportFinish_Invoke) == 0x000001, "Wrong size on BUS_GSEventCollection_Evt_RebirthTeleportFinish_Invoke");
//static_assert(offsetof(BUS_GSEventCollection_Evt_RebirthTeleportFinish_Invoke, State) == 0x000000, "Member 'BUS_GSEventCollection_Evt_RebirthTeleportFinish_Invoke::State' has a wrong offset!");

// Function b1-Managed.BUS_GSEventCollection.Evt_UnitRebirth_Multicast_Invoke
// 0x0001 (0x0001 - 0x0000)
struct BUS_GSEventCollection_Evt_UnitRebirth_Multicast_Invoke final
{
public:
	ERebirthType                                  RebirthType;                                       // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
//static_assert(alignof(BUS_GSEventCollection_Evt_UnitRebirth_Multicast_Invoke) == 0x000001, "Wrong alignment on BUS_GSEventCollection_Evt_UnitRebirth_Multicast_Invoke");
//static_assert(sizeof(BUS_GSEventCollection_Evt_UnitRebirth_Multicast_Invoke) == 0x000001, "Wrong size on BUS_GSEventCollection_Evt_UnitRebirth_Multicast_Invoke");
//static_assert(offsetof(BUS_GSEventCollection_Evt_UnitRebirth_Multicast_Invoke, RebirthType) == 0x000000, "Member 'BUS_GSEventCollection_Evt_UnitRebirth_Multicast_Invoke::RebirthType' has a wrong offset!");

// Function b1-Managed.BUS_GSEventCollection.Evt_FinishRescueInteract_Invoke
// 0x0008 (0x0008 - 0x0000)
struct BUS_GSEventCollection_Evt_FinishRescueInteract_Invoke final
{
public:
	class AActor*                                 Target;                                            // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
//static_assert(alignof(BUS_GSEventCollection_Evt_FinishRescueInteract_Invoke) == 0x000008, "Wrong alignment on BUS_GSEventCollection_Evt_FinishRescueInteract_Invoke");
//static_assert(sizeof(BUS_GSEventCollection_Evt_FinishRescueInteract_Invoke) == 0x000008, "Wrong size on BUS_GSEventCollection_Evt_FinishRescueInteract_Invoke");
//static_assert(offsetof(BUS_GSEventCollection_Evt_FinishRescueInteract_Invoke, Target) == 0x000000, "Member 'BUS_GSEventCollection_Evt_FinishRescueInteract_Invoke::Target' has a wrong offset!");

// Function b1-Managed.BUS_GSEventCollection.Evt_DropCollectionItemMultiCast
// 0x0010 (0x0010 - 0x0000)
struct BUS_GSEventCollection_Evt_DropCollectionItemMultiCast final
{
public:
	class AActor*                                 Player;                                            // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         DropId;                                            // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         DropLevel;                                         // 0x000C(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
//static_assert(alignof(BUS_GSEventCollection_Evt_DropCollectionItemMultiCast) == 0x000008, "Wrong alignment on BUS_GSEventCollection_Evt_DropCollectionItemMultiCast");
//static_assert(sizeof(BUS_GSEventCollection_Evt_DropCollectionItemMultiCast) == 0x000010, "Wrong size on BUS_GSEventCollection_Evt_DropCollectionItemMultiCast");
//static_assert(offsetof(BUS_GSEventCollection_Evt_DropCollectionItemMultiCast, Player) == 0x000000, "Member 'BUS_GSEventCollection_Evt_DropCollectionItemMultiCast::Player' has a wrong offset!");
//static_assert(offsetof(BUS_GSEventCollection_Evt_DropCollectionItemMultiCast, DropId) == 0x000008, "Member 'BUS_GSEventCollection_Evt_DropCollectionItemMultiCast::DropId' has a wrong offset!");
//static_assert(offsetof(BUS_GSEventCollection_Evt_DropCollectionItemMultiCast, DropLevel) == 0x00000C, "Member 'BUS_GSEventCollection_Evt_DropCollectionItemMultiCast::DropLevel' has a wrong offset!");

// Function b1-Managed.BUS_GSEventCollection.Evt_TestPredict_RollBack_Client
// 0x0004 (0x0004 - 0x0000)
struct BUS_GSEventCollection_Evt_TestPredict_RollBack_Client final
{
public:
	int32                                         PredictionKeyId;                                   // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
//static_assert(alignof(BUS_GSEventCollection_Evt_TestPredict_RollBack_Client) == 0x000004, "Wrong alignment on BUS_GSEventCollection_Evt_TestPredict_RollBack_Client");
//static_assert(sizeof(BUS_GSEventCollection_Evt_TestPredict_RollBack_Client) == 0x000004, "Wrong size on BUS_GSEventCollection_Evt_TestPredict_RollBack_Client");
//static_assert(offsetof(BUS_GSEventCollection_Evt_TestPredict_RollBack_Client, PredictionKeyId) == 0x000000, "Member 'BUS_GSEventCollection_Evt_TestPredict_RollBack_Client::PredictionKeyId' has a wrong offset!");

// Function b1-Managed.BUS_GSEventCollection.Evt_InputActionReleaseMultiCast
// 0x0010 (0x0010 - 0x0000)
struct BUS_GSEventCollection_Evt_InputActionReleaseMultiCast final
{
public:
	class FString                                 P1;                                                // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash)
};
//static_assert(alignof(BUS_GSEventCollection_Evt_InputActionReleaseMultiCast) == 0x000008, "Wrong alignment on BUS_GSEventCollection_Evt_InputActionReleaseMultiCast");
//static_assert(sizeof(BUS_GSEventCollection_Evt_InputActionReleaseMultiCast) == 0x000010, "Wrong size on BUS_GSEventCollection_Evt_InputActionReleaseMultiCast");
//static_assert(offsetof(BUS_GSEventCollection_Evt_InputActionReleaseMultiCast, P1) == 0x000000, "Member 'BUS_GSEventCollection_Evt_InputActionReleaseMultiCast::P1' has a wrong offset!");

// Function b1-Managed.BUS_GSEventCollection.Evt_ChargeSkillSuccessMultiCast
// 0x0004 (0x0004 - 0x0000)
struct BUS_GSEventCollection_Evt_ChargeSkillSuccessMultiCast final
{
public:
	int32                                         P1;                                                // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
//static_assert(alignof(BUS_GSEventCollection_Evt_ChargeSkillSuccessMultiCast) == 0x000004, "Wrong alignment on BUS_GSEventCollection_Evt_ChargeSkillSuccessMultiCast");
//static_assert(sizeof(BUS_GSEventCollection_Evt_ChargeSkillSuccessMultiCast) == 0x000004, "Wrong size on BUS_GSEventCollection_Evt_ChargeSkillSuccessMultiCast");
//static_assert(offsetof(BUS_GSEventCollection_Evt_ChargeSkillSuccessMultiCast, P1) == 0x000000, "Member 'BUS_GSEventCollection_Evt_ChargeSkillSuccessMultiCast::P1' has a wrong offset!");

// Function b1-Managed.BUS_GSEventCollection.Evt_BuffRemove_Multicast_Invoke
// 0x0010 (0x0010 - 0x0000)
struct BUS_GSEventCollection_Evt_BuffRemove_Multicast_Invoke final
{
public:
	int32                                         BuffID;                                            // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	EBuffEffectTriggerType                        RemoveTriggerType;                                 // 0x0004(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_5[0x3];                                        // 0x0005(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         Layer;                                             // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         WithTriggerRemmoveEffect : 1;                      // 0x000C(0x0001)(BitIndex: 0x00, PropSize: 0x0001 (Parm, NoDestructor, HasGetValueTypeHash))
};
//static_assert(alignof(BUS_GSEventCollection_Evt_BuffRemove_Multicast_Invoke) == 0x000004, "Wrong alignment on BUS_GSEventCollection_Evt_BuffRemove_Multicast_Invoke");
//static_assert(sizeof(BUS_GSEventCollection_Evt_BuffRemove_Multicast_Invoke) == 0x000010, "Wrong size on BUS_GSEventCollection_Evt_BuffRemove_Multicast_Invoke");
//static_assert(offsetof(BUS_GSEventCollection_Evt_BuffRemove_Multicast_Invoke, BuffID) == 0x000000, "Member 'BUS_GSEventCollection_Evt_BuffRemove_Multicast_Invoke::BuffID' has a wrong offset!");
//static_assert(offsetof(BUS_GSEventCollection_Evt_BuffRemove_Multicast_Invoke, RemoveTriggerType) == 0x000004, "Member 'BUS_GSEventCollection_Evt_BuffRemove_Multicast_Invoke::RemoveTriggerType' has a wrong offset!");
//static_assert(offsetof(BUS_GSEventCollection_Evt_BuffRemove_Multicast_Invoke, Layer) == 0x000008, "Member 'BUS_GSEventCollection_Evt_BuffRemove_Multicast_Invoke::Layer' has a wrong offset!");

// Function b1-Managed.BUS_GSEventCollection.Evt_TriggerRootMotionJumpServer
// 0x0008 (0x0008 - 0x0000)
struct BUS_GSEventCollection_Evt_TriggerRootMotionJumpServer final
{
public:
	int32                                         PredictionKeyId;                                   // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         ParentPredictionKeyId;                             // 0x0004(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
//static_assert(alignof(BUS_GSEventCollection_Evt_TriggerRootMotionJumpServer) == 0x000004, "Wrong alignment on BUS_GSEventCollection_Evt_TriggerRootMotionJumpServer");
//static_assert(sizeof(BUS_GSEventCollection_Evt_TriggerRootMotionJumpServer) == 0x000008, "Wrong size on BUS_GSEventCollection_Evt_TriggerRootMotionJumpServer");
//static_assert(offsetof(BUS_GSEventCollection_Evt_TriggerRootMotionJumpServer, PredictionKeyId) == 0x000000, "Member 'BUS_GSEventCollection_Evt_TriggerRootMotionJumpServer::PredictionKeyId' has a wrong offset!");
//static_assert(offsetof(BUS_GSEventCollection_Evt_TriggerRootMotionJumpServer, ParentPredictionKeyId) == 0x000004, "Member 'BUS_GSEventCollection_Evt_TriggerRootMotionJumpServer::ParentPredictionKeyId' has a wrong offset!");

// Function b1-Managed.BUS_GSEventCollection.Evt_StopSlotAnimationMultiCast
// 0x0004 (0x0004 - 0x0000)
struct BUS_GSEventCollection_Evt_StopSlotAnimationMultiCast final
{
public:
	float                                         P1;                                                // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
//static_assert(alignof(BUS_GSEventCollection_Evt_StopSlotAnimationMultiCast) == 0x000004, "Wrong alignment on BUS_GSEventCollection_Evt_StopSlotAnimationMultiCast");
//static_assert(sizeof(BUS_GSEventCollection_Evt_StopSlotAnimationMultiCast) == 0x000004, "Wrong size on BUS_GSEventCollection_Evt_StopSlotAnimationMultiCast");
//static_assert(offsetof(BUS_GSEventCollection_Evt_StopSlotAnimationMultiCast, P1) == 0x000000, "Member 'BUS_GSEventCollection_Evt_StopSlotAnimationMultiCast::P1' has a wrong offset!");

// Function b1-Managed.BUS_GSEventCollection.Evt_TestPredict_Confirm_Client
// 0x0004 (0x0004 - 0x0000)
struct BUS_GSEventCollection_Evt_TestPredict_Confirm_Client final
{
public:
	int32                                         PredictionKeyId;                                   // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
//static_assert(alignof(BUS_GSEventCollection_Evt_TestPredict_Confirm_Client) == 0x000004, "Wrong alignment on BUS_GSEventCollection_Evt_TestPredict_Confirm_Client");
//static_assert(sizeof(BUS_GSEventCollection_Evt_TestPredict_Confirm_Client) == 0x000004, "Wrong size on BUS_GSEventCollection_Evt_TestPredict_Confirm_Client");
//static_assert(offsetof(BUS_GSEventCollection_Evt_TestPredict_Confirm_Client, PredictionKeyId) == 0x000000, "Member 'BUS_GSEventCollection_Evt_TestPredict_Confirm_Client::PredictionKeyId' has a wrong offset!");

// Function b1-Managed.BUS_GSEventCollection.Evt_NotifyGraphClientMultiCast
// 0x0018 (0x0018 - 0x0000)
struct BUS_GSEventCollection_Evt_NotifyGraphClientMultiCast final
{
public:
	class FString                                 FinalGuid;                                         // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash)
	struct FGameplayTag                           NotifyTag;                                         // 0x0010(0x0008)(Parm, NoDestructor, HasGetValueTypeHash)
};
//static_assert(alignof(BUS_GSEventCollection_Evt_NotifyGraphClientMultiCast) == 0x000008, "Wrong alignment on BUS_GSEventCollection_Evt_NotifyGraphClientMultiCast");
//static_assert(sizeof(BUS_GSEventCollection_Evt_NotifyGraphClientMultiCast) == 0x000018, "Wrong size on BUS_GSEventCollection_Evt_NotifyGraphClientMultiCast");
//static_assert(offsetof(BUS_GSEventCollection_Evt_NotifyGraphClientMultiCast, FinalGuid) == 0x000000, "Member 'BUS_GSEventCollection_Evt_NotifyGraphClientMultiCast::FinalGuid' has a wrong offset!");
//static_assert(offsetof(BUS_GSEventCollection_Evt_NotifyGraphClientMultiCast, NotifyTag) == 0x000010, "Member 'BUS_GSEventCollection_Evt_NotifyGraphClientMultiCast::NotifyTag' has a wrong offset!");

// Function b1-Managed.BUS_GSEventCollection.Evt_SetTargetInfoServer_Invoke
// 0x0048 (0x0048 - 0x0000)
struct BUS_GSEventCollection_Evt_SetTargetInfoServer_Invoke final
{
public:
	struct FUnitLockTargetInfo                    NewTargetInfo;                                     // 0x0000(0x0048)(Parm, ZeroConstructor, HasGetValueTypeHash)
};
//static_assert(alignof(BUS_GSEventCollection_Evt_SetTargetInfoServer_Invoke) == 0x000008, "Wrong alignment on BUS_GSEventCollection_Evt_SetTargetInfoServer_Invoke");
//static_assert(sizeof(BUS_GSEventCollection_Evt_SetTargetInfoServer_Invoke) == 0x000048, "Wrong size on BUS_GSEventCollection_Evt_SetTargetInfoServer_Invoke");
//static_assert(offsetof(BUS_GSEventCollection_Evt_SetTargetInfoServer_Invoke, NewTargetInfo) == 0x000000, "Member 'BUS_GSEventCollection_Evt_SetTargetInfoServer_Invoke::NewTargetInfo' has a wrong offset!");

// Function b1-Managed.BUS_GSEventCollection.Evt_SmartCastSkillTryMultiCast
// 0x0020 (0x0020 - 0x0000)
struct BUS_GSEventCollection_Evt_SmartCastSkillTryMultiCast final
{
public:
	int32                                         ID;                                                // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_4[0x4];                                        // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<int32>                                 RuleIDList;                                        // 0x0008(0x0010)(Parm)
	EMontageBindReason                            Reason;                                            // 0x0018(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	ESkillDirection                               SkillDirection;                                    // 0x0019(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         bNeedCheckSkillCanCast : 1;                        // 0x001A(0x0001)(BitIndex: 0x00, PropSize: 0x0001 (Parm, NoDestructor, HasGetValueTypeHash))
};
//static_assert(alignof(BUS_GSEventCollection_Evt_SmartCastSkillTryMultiCast) == 0x000008, "Wrong alignment on BUS_GSEventCollection_Evt_SmartCastSkillTryMultiCast");
//static_assert(sizeof(BUS_GSEventCollection_Evt_SmartCastSkillTryMultiCast) == 0x000020, "Wrong size on BUS_GSEventCollection_Evt_SmartCastSkillTryMultiCast");
//static_assert(offsetof(BUS_GSEventCollection_Evt_SmartCastSkillTryMultiCast, ID) == 0x000000, "Member 'BUS_GSEventCollection_Evt_SmartCastSkillTryMultiCast::ID' has a wrong offset!");
//static_assert(offsetof(BUS_GSEventCollection_Evt_SmartCastSkillTryMultiCast, RuleIDList) == 0x000008, "Member 'BUS_GSEventCollection_Evt_SmartCastSkillTryMultiCast::RuleIDList' has a wrong offset!");
//static_assert(offsetof(BUS_GSEventCollection_Evt_SmartCastSkillTryMultiCast, Reason) == 0x000018, "Member 'BUS_GSEventCollection_Evt_SmartCastSkillTryMultiCast::Reason' has a wrong offset!");
//static_assert(offsetof(BUS_GSEventCollection_Evt_SmartCastSkillTryMultiCast, SkillDirection) == 0x000019, "Member 'BUS_GSEventCollection_Evt_SmartCastSkillTryMultiCast::SkillDirection' has a wrong offset!");

// Function b1-Managed.BUS_GSEventCollection.Evt_OnlineChallengeBeginServer
// 0x0008 (0x0008 - 0x0000)
struct BUS_GSEventCollection_Evt_OnlineChallengeBeginServer final
{
public:
	int32                                         P1;                                                // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         P2;                                                // 0x0004(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
//static_assert(alignof(BUS_GSEventCollection_Evt_OnlineChallengeBeginServer) == 0x000004, "Wrong alignment on BUS_GSEventCollection_Evt_OnlineChallengeBeginServer");
//static_assert(sizeof(BUS_GSEventCollection_Evt_OnlineChallengeBeginServer) == 0x000008, "Wrong size on BUS_GSEventCollection_Evt_OnlineChallengeBeginServer");
//static_assert(offsetof(BUS_GSEventCollection_Evt_OnlineChallengeBeginServer, P1) == 0x000000, "Member 'BUS_GSEventCollection_Evt_OnlineChallengeBeginServer::P1' has a wrong offset!");
//static_assert(offsetof(BUS_GSEventCollection_Evt_OnlineChallengeBeginServer, P2) == 0x000004, "Member 'BUS_GSEventCollection_Evt_OnlineChallengeBeginServer::P2' has a wrong offset!");

// Function b1-Managed.BUS_GSEventCollection.Evt_RotateToTargetSvrMultiCast
// 0x0004 (0x0004 - 0x0000)
struct BUS_GSEventCollection_Evt_RotateToTargetSvrMultiCast final
{
public:
	float                                         P1;                                                // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
//static_assert(alignof(BUS_GSEventCollection_Evt_RotateToTargetSvrMultiCast) == 0x000004, "Wrong alignment on BUS_GSEventCollection_Evt_RotateToTargetSvrMultiCast");
//static_assert(sizeof(BUS_GSEventCollection_Evt_RotateToTargetSvrMultiCast) == 0x000004, "Wrong size on BUS_GSEventCollection_Evt_RotateToTargetSvrMultiCast");
//static_assert(offsetof(BUS_GSEventCollection_Evt_RotateToTargetSvrMultiCast, P1) == 0x000000, "Member 'BUS_GSEventCollection_Evt_RotateToTargetSvrMultiCast::P1' has a wrong offset!");

// Function b1-Managed.BUS_GSEventCollection.Evt_ExecuteCommandGMMultiCast
// 0x0010 (0x0010 - 0x0000)
struct BUS_GSEventCollection_Evt_ExecuteCommandGMMultiCast final
{
public:
	TArray<class FString>                         P;                                                 // 0x0000(0x0010)(Parm)
};
//static_assert(alignof(BUS_GSEventCollection_Evt_ExecuteCommandGMMultiCast) == 0x000008, "Wrong alignment on BUS_GSEventCollection_Evt_ExecuteCommandGMMultiCast");
//static_assert(sizeof(BUS_GSEventCollection_Evt_ExecuteCommandGMMultiCast) == 0x000010, "Wrong size on BUS_GSEventCollection_Evt_ExecuteCommandGMMultiCast");
//static_assert(offsetof(BUS_GSEventCollection_Evt_ExecuteCommandGMMultiCast, P) == 0x000000, "Member 'BUS_GSEventCollection_Evt_ExecuteCommandGMMultiCast::P' has a wrong offset!");

// Function b1-Managed.BUS_GSEventCollection.Evt_InputActionPressMultiCast
// 0x0010 (0x0010 - 0x0000)
struct BUS_GSEventCollection_Evt_InputActionPressMultiCast final
{
public:
	class FString                                 P1;                                                // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash)
};
//static_assert(alignof(BUS_GSEventCollection_Evt_InputActionPressMultiCast) == 0x000008, "Wrong alignment on BUS_GSEventCollection_Evt_InputActionPressMultiCast");
//static_assert(sizeof(BUS_GSEventCollection_Evt_InputActionPressMultiCast) == 0x000010, "Wrong size on BUS_GSEventCollection_Evt_InputActionPressMultiCast");
//static_assert(offsetof(BUS_GSEventCollection_Evt_InputActionPressMultiCast, P1) == 0x000000, "Member 'BUS_GSEventCollection_Evt_InputActionPressMultiCast::P1' has a wrong offset!");

// Function b1-Managed.BUS_GSEventCollection.Evt_TriggerHitInPartMultiCast
// 0x000C (0x000C - 0x0000)
struct BUS_GSEventCollection_Evt_TriggerHitInPartMultiCast final
{
public:
	int32                                         PartId;                                            // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         HitHP;                                             // 0x0004(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         HitWeight;                                         // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
//static_assert(alignof(BUS_GSEventCollection_Evt_TriggerHitInPartMultiCast) == 0x000004, "Wrong alignment on BUS_GSEventCollection_Evt_TriggerHitInPartMultiCast");
//static_assert(sizeof(BUS_GSEventCollection_Evt_TriggerHitInPartMultiCast) == 0x00000C, "Wrong size on BUS_GSEventCollection_Evt_TriggerHitInPartMultiCast");
//static_assert(offsetof(BUS_GSEventCollection_Evt_TriggerHitInPartMultiCast, PartId) == 0x000000, "Member 'BUS_GSEventCollection_Evt_TriggerHitInPartMultiCast::PartId' has a wrong offset!");
//static_assert(offsetof(BUS_GSEventCollection_Evt_TriggerHitInPartMultiCast, HitHP) == 0x000004, "Member 'BUS_GSEventCollection_Evt_TriggerHitInPartMultiCast::HitHP' has a wrong offset!");
//static_assert(offsetof(BUS_GSEventCollection_Evt_TriggerHitInPartMultiCast, HitWeight) == 0x000008, "Member 'BUS_GSEventCollection_Evt_TriggerHitInPartMultiCast::HitWeight' has a wrong offset!");

// Function b1-Managed.BUS_GSEventCollection.Evt_UnitDead_Multicast_Invoke
// 0x00F8 (0x00F8 - 0x0000)
struct BUS_GSEventCollection_Evt_UnitDead_Multicast_Invoke final
{
public:
	class AActor*                                 Attacker;                                          // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	EDeadReason                                   DeadReason;                                        // 0x0008(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_9[0x3];                                        // 0x0009(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         DmgID;                                             // 0x000C(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         StiffLevel;                                        // 0x0010(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_14[0x4];                                       // 0x0014(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UAnimMontage*                           BeAttackedAM;                                      // 0x0018(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FEffectInstReq                         EffectInstReq;                                     // 0x0020(0x00D0)(Parm, NoDestructor, HasGetValueTypeHash)
	uint8                                         bIsDotDmg : 1;                                     // 0x00F0(0x0001)(BitIndex: 0x00, PropSize: 0x0001 (Parm, NoDestructor, HasGetValueTypeHash))
	EAbnormalStateType                            AbnormalStateType;                                 // 0x00F1(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
//static_assert(alignof(BUS_GSEventCollection_Evt_UnitDead_Multicast_Invoke) == 0x000008, "Wrong alignment on BUS_GSEventCollection_Evt_UnitDead_Multicast_Invoke");
//static_assert(sizeof(BUS_GSEventCollection_Evt_UnitDead_Multicast_Invoke) == 0x0000F8, "Wrong size on BUS_GSEventCollection_Evt_UnitDead_Multicast_Invoke");
//static_assert(offsetof(BUS_GSEventCollection_Evt_UnitDead_Multicast_Invoke, Attacker) == 0x000000, "Member 'BUS_GSEventCollection_Evt_UnitDead_Multicast_Invoke::Attacker' has a wrong offset!");
//static_assert(offsetof(BUS_GSEventCollection_Evt_UnitDead_Multicast_Invoke, DeadReason) == 0x000008, "Member 'BUS_GSEventCollection_Evt_UnitDead_Multicast_Invoke::DeadReason' has a wrong offset!");
//static_assert(offsetof(BUS_GSEventCollection_Evt_UnitDead_Multicast_Invoke, DmgID) == 0x00000C, "Member 'BUS_GSEventCollection_Evt_UnitDead_Multicast_Invoke::DmgID' has a wrong offset!");
//static_assert(offsetof(BUS_GSEventCollection_Evt_UnitDead_Multicast_Invoke, StiffLevel) == 0x000010, "Member 'BUS_GSEventCollection_Evt_UnitDead_Multicast_Invoke::StiffLevel' has a wrong offset!");
//static_assert(offsetof(BUS_GSEventCollection_Evt_UnitDead_Multicast_Invoke, BeAttackedAM) == 0x000018, "Member 'BUS_GSEventCollection_Evt_UnitDead_Multicast_Invoke::BeAttackedAM' has a wrong offset!");
//static_assert(offsetof(BUS_GSEventCollection_Evt_UnitDead_Multicast_Invoke, EffectInstReq) == 0x000020, "Member 'BUS_GSEventCollection_Evt_UnitDead_Multicast_Invoke::EffectInstReq' has a wrong offset!");
//static_assert(offsetof(BUS_GSEventCollection_Evt_UnitDead_Multicast_Invoke, AbnormalStateType) == 0x0000F1, "Member 'BUS_GSEventCollection_Evt_UnitDead_Multicast_Invoke::AbnormalStateType' has a wrong offset!");

// Function b1-Managed.BUS_GSEventCollection.Evt_TriggerJumpSkillMultiCast
// 0x0018 (0x0018 - 0x0000)
struct BUS_GSEventCollection_Evt_TriggerJumpSkillMultiCast final
{
public:
	ESkillDirection                               StartJumpDir;                                      // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_1[0x7];                                        // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector2D                              CurrentInput;                                      // 0x0008(0x0010)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
//static_assert(alignof(BUS_GSEventCollection_Evt_TriggerJumpSkillMultiCast) == 0x000008, "Wrong alignment on BUS_GSEventCollection_Evt_TriggerJumpSkillMultiCast");
//static_assert(sizeof(BUS_GSEventCollection_Evt_TriggerJumpSkillMultiCast) == 0x000018, "Wrong size on BUS_GSEventCollection_Evt_TriggerJumpSkillMultiCast");
//static_assert(offsetof(BUS_GSEventCollection_Evt_TriggerJumpSkillMultiCast, StartJumpDir) == 0x000000, "Member 'BUS_GSEventCollection_Evt_TriggerJumpSkillMultiCast::StartJumpDir' has a wrong offset!");
//static_assert(offsetof(BUS_GSEventCollection_Evt_TriggerJumpSkillMultiCast, CurrentInput) == 0x000008, "Member 'BUS_GSEventCollection_Evt_TriggerJumpSkillMultiCast::CurrentInput' has a wrong offset!");

// Function b1-Managed.BUS_GSEventCollection.Evt_DropCollectionItemServer
// 0x0010 (0x0010 - 0x0000)
struct BUS_GSEventCollection_Evt_DropCollectionItemServer final
{
public:
	class AActor*                                 Player;                                            // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         DropId;                                            // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         DropLevel;                                         // 0x000C(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
//static_assert(alignof(BUS_GSEventCollection_Evt_DropCollectionItemServer) == 0x000008, "Wrong alignment on BUS_GSEventCollection_Evt_DropCollectionItemServer");
//static_assert(sizeof(BUS_GSEventCollection_Evt_DropCollectionItemServer) == 0x000010, "Wrong size on BUS_GSEventCollection_Evt_DropCollectionItemServer");
//static_assert(offsetof(BUS_GSEventCollection_Evt_DropCollectionItemServer, Player) == 0x000000, "Member 'BUS_GSEventCollection_Evt_DropCollectionItemServer::Player' has a wrong offset!");
//static_assert(offsetof(BUS_GSEventCollection_Evt_DropCollectionItemServer, DropId) == 0x000008, "Member 'BUS_GSEventCollection_Evt_DropCollectionItemServer::DropId' has a wrong offset!");
//static_assert(offsetof(BUS_GSEventCollection_Evt_DropCollectionItemServer, DropLevel) == 0x00000C, "Member 'BUS_GSEventCollection_Evt_DropCollectionItemServer::DropLevel' has a wrong offset!");

// Function b1-Managed.BUS_GSEventCollection.Evt_BuffAdd_Multicast_Invoke
// 0x0048 (0x0048 - 0x0000)
struct BUS_GSEventCollection_Evt_BuffAdd_Multicast_Invoke final
{
public:
	int32                                         BuffID;                                            // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_4[0x4];                                        // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class AActor*                                 Caster;                                            // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class AActor*                                 RootCaster;                                        // 0x0010(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         Duration;                                          // 0x0018(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	EBuffSourceType                               BuffSourceType;                                    // 0x001C(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         bRecursed : 1;                                     // 0x001D(0x0001)(BitIndex: 0x00, PropSize: 0x0001 (Parm, NoDestructor, HasGetValueTypeHash))
	uint8                                         Pad_1E[0x2];                                       // 0x001E(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	struct FBattleAttrSnapShot                    BattleAttrSnapShot;                                // 0x0020(0x0024)(Parm, NoDestructor, HasGetValueTypeHash)
};
//static_assert(alignof(BUS_GSEventCollection_Evt_BuffAdd_Multicast_Invoke) == 0x000008, "Wrong alignment on BUS_GSEventCollection_Evt_BuffAdd_Multicast_Invoke");
//static_assert(sizeof(BUS_GSEventCollection_Evt_BuffAdd_Multicast_Invoke) == 0x000048, "Wrong size on BUS_GSEventCollection_Evt_BuffAdd_Multicast_Invoke");
//static_assert(offsetof(BUS_GSEventCollection_Evt_BuffAdd_Multicast_Invoke, BuffID) == 0x000000, "Member 'BUS_GSEventCollection_Evt_BuffAdd_Multicast_Invoke::BuffID' has a wrong offset!");
//static_assert(offsetof(BUS_GSEventCollection_Evt_BuffAdd_Multicast_Invoke, Caster) == 0x000008, "Member 'BUS_GSEventCollection_Evt_BuffAdd_Multicast_Invoke::Caster' has a wrong offset!");
//static_assert(offsetof(BUS_GSEventCollection_Evt_BuffAdd_Multicast_Invoke, RootCaster) == 0x000010, "Member 'BUS_GSEventCollection_Evt_BuffAdd_Multicast_Invoke::RootCaster' has a wrong offset!");
//static_assert(offsetof(BUS_GSEventCollection_Evt_BuffAdd_Multicast_Invoke, Duration) == 0x000018, "Member 'BUS_GSEventCollection_Evt_BuffAdd_Multicast_Invoke::Duration' has a wrong offset!");
//static_assert(offsetof(BUS_GSEventCollection_Evt_BuffAdd_Multicast_Invoke, BuffSourceType) == 0x00001C, "Member 'BUS_GSEventCollection_Evt_BuffAdd_Multicast_Invoke::BuffSourceType' has a wrong offset!");
//static_assert(offsetof(BUS_GSEventCollection_Evt_BuffAdd_Multicast_Invoke, BattleAttrSnapShot) == 0x000020, "Member 'BUS_GSEventCollection_Evt_BuffAdd_Multicast_Invoke::BattleAttrSnapShot' has a wrong offset!");

// Function b1-Managed.BUS_GSEventCollection.Evt_ChargeSkillSuccessServer
// 0x0004 (0x0004 - 0x0000)
struct BUS_GSEventCollection_Evt_ChargeSkillSuccessServer final
{
public:
	int32                                         P1;                                                // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
//static_assert(alignof(BUS_GSEventCollection_Evt_ChargeSkillSuccessServer) == 0x000004, "Wrong alignment on BUS_GSEventCollection_Evt_ChargeSkillSuccessServer");
//static_assert(sizeof(BUS_GSEventCollection_Evt_ChargeSkillSuccessServer) == 0x000004, "Wrong size on BUS_GSEventCollection_Evt_ChargeSkillSuccessServer");
//static_assert(offsetof(BUS_GSEventCollection_Evt_ChargeSkillSuccessServer, P1) == 0x000000, "Member 'BUS_GSEventCollection_Evt_ChargeSkillSuccessServer::P1' has a wrong offset!");

// Function b1-Managed.BUS_GSEventCollection.Evt_InputActionReleaseServer
// 0x0010 (0x0010 - 0x0000)
struct BUS_GSEventCollection_Evt_InputActionReleaseServer final
{
public:
	class FString                                 P1;                                                // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash)
};
//static_assert(alignof(BUS_GSEventCollection_Evt_InputActionReleaseServer) == 0x000008, "Wrong alignment on BUS_GSEventCollection_Evt_InputActionReleaseServer");
//static_assert(sizeof(BUS_GSEventCollection_Evt_InputActionReleaseServer) == 0x000010, "Wrong size on BUS_GSEventCollection_Evt_InputActionReleaseServer");
//static_assert(offsetof(BUS_GSEventCollection_Evt_InputActionReleaseServer, P1) == 0x000000, "Member 'BUS_GSEventCollection_Evt_InputActionReleaseServer::P1' has a wrong offset!");

// Function b1-Managed.BUS_GSEventCollection.Evt_UnitStatePredicMultiCast
// 0x0008 (0x0008 - 0x0000)
struct BUS_GSEventCollection_Evt_UnitStatePredicMultiCast final
{
public:
	EBGUUnitState                                 UnitState;                                         // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         NeedForceUpdate : 1;                               // 0x0001(0x0001)(BitIndex: 0x00, PropSize: 0x0001 (Parm, NoDestructor, HasGetValueTypeHash))
	uint8                                         Pad_2[0x2];                                        // 0x0002(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         Time;                                              // 0x0004(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
//static_assert(alignof(BUS_GSEventCollection_Evt_UnitStatePredicMultiCast) == 0x000004, "Wrong alignment on BUS_GSEventCollection_Evt_UnitStatePredicMultiCast");
//static_assert(sizeof(BUS_GSEventCollection_Evt_UnitStatePredicMultiCast) == 0x000008, "Wrong size on BUS_GSEventCollection_Evt_UnitStatePredicMultiCast");
//static_assert(offsetof(BUS_GSEventCollection_Evt_UnitStatePredicMultiCast, UnitState) == 0x000000, "Member 'BUS_GSEventCollection_Evt_UnitStatePredicMultiCast::UnitState' has a wrong offset!");
//static_assert(offsetof(BUS_GSEventCollection_Evt_UnitStatePredicMultiCast, Time) == 0x000004, "Member 'BUS_GSEventCollection_Evt_UnitStatePredicMultiCast::Time' has a wrong offset!");

// Function b1-Managed.BUS_GSEventCollection.Evt_StopSlotAnimationServer
// 0x0004 (0x0004 - 0x0000)
struct BUS_GSEventCollection_Evt_StopSlotAnimationServer final
{
public:
	float                                         P1;                                                // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
//static_assert(alignof(BUS_GSEventCollection_Evt_StopSlotAnimationServer) == 0x000004, "Wrong alignment on BUS_GSEventCollection_Evt_StopSlotAnimationServer");
//static_assert(sizeof(BUS_GSEventCollection_Evt_StopSlotAnimationServer) == 0x000004, "Wrong size on BUS_GSEventCollection_Evt_StopSlotAnimationServer");
//static_assert(offsetof(BUS_GSEventCollection_Evt_StopSlotAnimationServer, P1) == 0x000000, "Member 'BUS_GSEventCollection_Evt_StopSlotAnimationServer::P1' has a wrong offset!");

// Function b1-Managed.BUS_GSEventCollection.Evt_SmartCastSkillTryServer
// 0x0028 (0x0028 - 0x0000)
struct BUS_GSEventCollection_Evt_SmartCastSkillTryServer final
{
public:
	int32                                         ID;                                                // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_4[0x4];                                        // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<int32>                                 RuleIDList;                                        // 0x0008(0x0010)(Parm)
	EMontageBindReason                            Reason;                                            // 0x0018(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	ESkillDirection                               SkillDirection;                                    // 0x0019(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         bNeedCheckSkillCanCast : 1;                        // 0x001A(0x0001)(BitIndex: 0x00, PropSize: 0x0001 (Parm, NoDestructor, HasGetValueTypeHash))
	uint8                                         Pad_1B[0x1];                                       // 0x001B(0x0001)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         PredictionKeyId;                                   // 0x001C(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         ParentPredictionKeyId;                             // 0x0020(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
//static_assert(alignof(BUS_GSEventCollection_Evt_SmartCastSkillTryServer) == 0x000008, "Wrong alignment on BUS_GSEventCollection_Evt_SmartCastSkillTryServer");
//static_assert(sizeof(BUS_GSEventCollection_Evt_SmartCastSkillTryServer) == 0x000028, "Wrong size on BUS_GSEventCollection_Evt_SmartCastSkillTryServer");
//static_assert(offsetof(BUS_GSEventCollection_Evt_SmartCastSkillTryServer, ID) == 0x000000, "Member 'BUS_GSEventCollection_Evt_SmartCastSkillTryServer::ID' has a wrong offset!");
//static_assert(offsetof(BUS_GSEventCollection_Evt_SmartCastSkillTryServer, RuleIDList) == 0x000008, "Member 'BUS_GSEventCollection_Evt_SmartCastSkillTryServer::RuleIDList' has a wrong offset!");
//static_assert(offsetof(BUS_GSEventCollection_Evt_SmartCastSkillTryServer, Reason) == 0x000018, "Member 'BUS_GSEventCollection_Evt_SmartCastSkillTryServer::Reason' has a wrong offset!");
//static_assert(offsetof(BUS_GSEventCollection_Evt_SmartCastSkillTryServer, SkillDirection) == 0x000019, "Member 'BUS_GSEventCollection_Evt_SmartCastSkillTryServer::SkillDirection' has a wrong offset!");
//static_assert(offsetof(BUS_GSEventCollection_Evt_SmartCastSkillTryServer, PredictionKeyId) == 0x00001C, "Member 'BUS_GSEventCollection_Evt_SmartCastSkillTryServer::PredictionKeyId' has a wrong offset!");
//static_assert(offsetof(BUS_GSEventCollection_Evt_SmartCastSkillTryServer, ParentPredictionKeyId) == 0x000020, "Member 'BUS_GSEventCollection_Evt_SmartCastSkillTryServer::ParentPredictionKeyId' has a wrong offset!");

// Function b1-Managed.BUS_GSEventCollection.Evt_RotateToTargetSvrServer
// 0x0004 (0x0004 - 0x0000)
struct BUS_GSEventCollection_Evt_RotateToTargetSvrServer final
{
public:
	float                                         P1;                                                // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
//static_assert(alignof(BUS_GSEventCollection_Evt_RotateToTargetSvrServer) == 0x000004, "Wrong alignment on BUS_GSEventCollection_Evt_RotateToTargetSvrServer");
//static_assert(sizeof(BUS_GSEventCollection_Evt_RotateToTargetSvrServer) == 0x000004, "Wrong size on BUS_GSEventCollection_Evt_RotateToTargetSvrServer");
//static_assert(offsetof(BUS_GSEventCollection_Evt_RotateToTargetSvrServer, P1) == 0x000000, "Member 'BUS_GSEventCollection_Evt_RotateToTargetSvrServer::P1' has a wrong offset!");

// Function b1-Managed.BUS_GSEventCollection.Evt_NotifyGraphClientServer
// 0x0018 (0x0018 - 0x0000)
struct BUS_GSEventCollection_Evt_NotifyGraphClientServer final
{
public:
	class FString                                 FinalGuid;                                         // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash)
	struct FGameplayTag                           NotifyTag;                                         // 0x0010(0x0008)(Parm, NoDestructor, HasGetValueTypeHash)
};
//static_assert(alignof(BUS_GSEventCollection_Evt_NotifyGraphClientServer) == 0x000008, "Wrong alignment on BUS_GSEventCollection_Evt_NotifyGraphClientServer");
//static_assert(sizeof(BUS_GSEventCollection_Evt_NotifyGraphClientServer) == 0x000018, "Wrong size on BUS_GSEventCollection_Evt_NotifyGraphClientServer");
//static_assert(offsetof(BUS_GSEventCollection_Evt_NotifyGraphClientServer, FinalGuid) == 0x000000, "Member 'BUS_GSEventCollection_Evt_NotifyGraphClientServer::FinalGuid' has a wrong offset!");
//static_assert(offsetof(BUS_GSEventCollection_Evt_NotifyGraphClientServer, NotifyTag) == 0x000010, "Member 'BUS_GSEventCollection_Evt_NotifyGraphClientServer::NotifyTag' has a wrong offset!");

// Function b1-Managed.BUS_GSEventCollection.Evt_TriggerHitInPartServer
// 0x000C (0x000C - 0x0000)
struct BUS_GSEventCollection_Evt_TriggerHitInPartServer final
{
public:
	int32                                         PartId;                                            // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         HitHP;                                             // 0x0004(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         HitWeight;                                         // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
//static_assert(alignof(BUS_GSEventCollection_Evt_TriggerHitInPartServer) == 0x000004, "Wrong alignment on BUS_GSEventCollection_Evt_TriggerHitInPartServer");
//static_assert(sizeof(BUS_GSEventCollection_Evt_TriggerHitInPartServer) == 0x00000C, "Wrong size on BUS_GSEventCollection_Evt_TriggerHitInPartServer");
//static_assert(offsetof(BUS_GSEventCollection_Evt_TriggerHitInPartServer, PartId) == 0x000000, "Member 'BUS_GSEventCollection_Evt_TriggerHitInPartServer::PartId' has a wrong offset!");
//static_assert(offsetof(BUS_GSEventCollection_Evt_TriggerHitInPartServer, HitHP) == 0x000004, "Member 'BUS_GSEventCollection_Evt_TriggerHitInPartServer::HitHP' has a wrong offset!");
//static_assert(offsetof(BUS_GSEventCollection_Evt_TriggerHitInPartServer, HitWeight) == 0x000008, "Member 'BUS_GSEventCollection_Evt_TriggerHitInPartServer::HitWeight' has a wrong offset!");

// Function b1-Managed.BUS_GSEventCollection.EndPlayInCS
// 0x0001 (0x0001 - 0x0000)
struct BUS_GSEventCollection_EndPlayInCS final
{
public:
	EEndPlayReason                                EndPlayReason;                                     // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
//static_assert(alignof(BUS_GSEventCollection_EndPlayInCS) == 0x000001, "Wrong alignment on BUS_GSEventCollection_EndPlayInCS");
//static_assert(sizeof(BUS_GSEventCollection_EndPlayInCS) == 0x000001, "Wrong size on BUS_GSEventCollection_EndPlayInCS");
//static_assert(offsetof(BUS_GSEventCollection_EndPlayInCS, EndPlayReason) == 0x000000, "Member 'BUS_GSEventCollection_EndPlayInCS::EndPlayReason' has a wrong offset!");

// Function b1-Managed.BUS_GSEventCollection.Evt_ExecuteCommandGMServer
// 0x0010 (0x0010 - 0x0000)
struct BUS_GSEventCollection_Evt_ExecuteCommandGMServer final
{
public:
	TArray<class FString>                         P;                                                 // 0x0000(0x0010)(Parm)
};
//static_assert(alignof(BUS_GSEventCollection_Evt_ExecuteCommandGMServer) == 0x000008, "Wrong alignment on BUS_GSEventCollection_Evt_ExecuteCommandGMServer");
//static_assert(sizeof(BUS_GSEventCollection_Evt_ExecuteCommandGMServer) == 0x000010, "Wrong size on BUS_GSEventCollection_Evt_ExecuteCommandGMServer");
//static_assert(offsetof(BUS_GSEventCollection_Evt_ExecuteCommandGMServer, P) == 0x000000, "Member 'BUS_GSEventCollection_Evt_ExecuteCommandGMServer::P' has a wrong offset!");

// Function b1-Managed.BUS_GSEventCollection.Evt_TriggerJumpSkillServer
// 0x0020 (0x0020 - 0x0000)
struct BUS_GSEventCollection_Evt_TriggerJumpSkillServer final
{
public:
	ESkillDirection                               StartJumpDir;                                      // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_1[0x7];                                        // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector2D                              CurrentInput;                                      // 0x0008(0x0010)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         PredictionKeyId;                                   // 0x0018(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         ParentPredictionKeyId;                             // 0x001C(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
//static_assert(alignof(BUS_GSEventCollection_Evt_TriggerJumpSkillServer) == 0x000008, "Wrong alignment on BUS_GSEventCollection_Evt_TriggerJumpSkillServer");
//static_assert(sizeof(BUS_GSEventCollection_Evt_TriggerJumpSkillServer) == 0x000020, "Wrong size on BUS_GSEventCollection_Evt_TriggerJumpSkillServer");
//static_assert(offsetof(BUS_GSEventCollection_Evt_TriggerJumpSkillServer, StartJumpDir) == 0x000000, "Member 'BUS_GSEventCollection_Evt_TriggerJumpSkillServer::StartJumpDir' has a wrong offset!");
//static_assert(offsetof(BUS_GSEventCollection_Evt_TriggerJumpSkillServer, CurrentInput) == 0x000008, "Member 'BUS_GSEventCollection_Evt_TriggerJumpSkillServer::CurrentInput' has a wrong offset!");
//static_assert(offsetof(BUS_GSEventCollection_Evt_TriggerJumpSkillServer, PredictionKeyId) == 0x000018, "Member 'BUS_GSEventCollection_Evt_TriggerJumpSkillServer::PredictionKeyId' has a wrong offset!");
//static_assert(offsetof(BUS_GSEventCollection_Evt_TriggerJumpSkillServer, ParentPredictionKeyId) == 0x00001C, "Member 'BUS_GSEventCollection_Evt_TriggerJumpSkillServer::ParentPredictionKeyId' has a wrong offset!");

// Function b1-Managed.BUS_GSEventCollection.Evt_InputActionPressServer
// 0x0010 (0x0010 - 0x0000)
struct BUS_GSEventCollection_Evt_InputActionPressServer final
{
public:
	class FString                                 P1;                                                // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash)
};
//static_assert(alignof(BUS_GSEventCollection_Evt_InputActionPressServer) == 0x000008, "Wrong alignment on BUS_GSEventCollection_Evt_InputActionPressServer");
//static_assert(sizeof(BUS_GSEventCollection_Evt_InputActionPressServer) == 0x000010, "Wrong size on BUS_GSEventCollection_Evt_InputActionPressServer");
//static_assert(offsetof(BUS_GSEventCollection_Evt_InputActionPressServer, P1) == 0x000000, "Member 'BUS_GSEventCollection_Evt_InputActionPressServer::P1' has a wrong offset!");

// Function b1-Managed.BUS_GSEventCollection.Evt_UnitStatePredicServer
// 0x0010 (0x0010 - 0x0000)
struct BUS_GSEventCollection_Evt_UnitStatePredicServer final
{
public:
	EBGUUnitState                                 UnitState;                                         // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         NeedForceUpdate : 1;                               // 0x0001(0x0001)(BitIndex: 0x00, PropSize: 0x0001 (Parm, NoDestructor, HasGetValueTypeHash))
	uint8                                         Pad_2[0x2];                                        // 0x0002(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         Time;                                              // 0x0004(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         PredictionKeyId;                                   // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         ParentPredictionKeyId;                             // 0x000C(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
//static_assert(alignof(BUS_GSEventCollection_Evt_UnitStatePredicServer) == 0x000004, "Wrong alignment on BUS_GSEventCollection_Evt_UnitStatePredicServer");
//static_assert(sizeof(BUS_GSEventCollection_Evt_UnitStatePredicServer) == 0x000010, "Wrong size on BUS_GSEventCollection_Evt_UnitStatePredicServer");
//static_assert(offsetof(BUS_GSEventCollection_Evt_UnitStatePredicServer, UnitState) == 0x000000, "Member 'BUS_GSEventCollection_Evt_UnitStatePredicServer::UnitState' has a wrong offset!");
//static_assert(offsetof(BUS_GSEventCollection_Evt_UnitStatePredicServer, Time) == 0x000004, "Member 'BUS_GSEventCollection_Evt_UnitStatePredicServer::Time' has a wrong offset!");
//static_assert(offsetof(BUS_GSEventCollection_Evt_UnitStatePredicServer, PredictionKeyId) == 0x000008, "Member 'BUS_GSEventCollection_Evt_UnitStatePredicServer::PredictionKeyId' has a wrong offset!");
//static_assert(offsetof(BUS_GSEventCollection_Evt_UnitStatePredicServer, ParentPredictionKeyId) == 0x00000C, "Member 'BUS_GSEventCollection_Evt_UnitStatePredicServer::ParentPredictionKeyId' has a wrong offset!");

// Function b1-Managed.BUS_GSEventCollection.Evt_ClientRPCTest_Invoke
// 0x0010 (0x0010 - 0x0000)
struct BUS_GSEventCollection_Evt_ClientRPCTest_Invoke final
{
public:
	int32                                         P1;                                                // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_4[0x4];                                        // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class AActor*                                 P2;                                                // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
//static_assert(alignof(BUS_GSEventCollection_Evt_ClientRPCTest_Invoke) == 0x000008, "Wrong alignment on BUS_GSEventCollection_Evt_ClientRPCTest_Invoke");
//static_assert(sizeof(BUS_GSEventCollection_Evt_ClientRPCTest_Invoke) == 0x000010, "Wrong size on BUS_GSEventCollection_Evt_ClientRPCTest_Invoke");
//static_assert(offsetof(BUS_GSEventCollection_Evt_ClientRPCTest_Invoke, P1) == 0x000000, "Member 'BUS_GSEventCollection_Evt_ClientRPCTest_Invoke::P1' has a wrong offset!");
//static_assert(offsetof(BUS_GSEventCollection_Evt_ClientRPCTest_Invoke, P2) == 0x000008, "Member 'BUS_GSEventCollection_Evt_ClientRPCTest_Invoke::P2' has a wrong offset!");

// Function b1-Managed.BUS_GSEventCollection.Evt_ServerRPCTest_Invoke
// 0x0020 (0x0020 - 0x0000)
struct BUS_GSEventCollection_Evt_ServerRPCTest_Invoke final
{
public:
	int32                                         P1;                                                // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_4[0x4];                                        // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                P2;                                                // 0x0008(0x0018)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
//static_assert(alignof(BUS_GSEventCollection_Evt_ServerRPCTest_Invoke) == 0x000008, "Wrong alignment on BUS_GSEventCollection_Evt_ServerRPCTest_Invoke");
//static_assert(sizeof(BUS_GSEventCollection_Evt_ServerRPCTest_Invoke) == 0x000020, "Wrong size on BUS_GSEventCollection_Evt_ServerRPCTest_Invoke");
//static_assert(offsetof(BUS_GSEventCollection_Evt_ServerRPCTest_Invoke, P1) == 0x000000, "Member 'BUS_GSEventCollection_Evt_ServerRPCTest_Invoke::P1' has a wrong offset!");
//static_assert(offsetof(BUS_GSEventCollection_Evt_ServerRPCTest_Invoke, P2) == 0x000008, "Member 'BUS_GSEventCollection_Evt_ServerRPCTest_Invoke::P2' has a wrong offset!");

// Function b1-Managed.BUS_GSEventCollection.Evt_TestPredictServer
// 0x0008 (0x0008 - 0x0000)
struct BUS_GSEventCollection_Evt_TestPredictServer final
{
public:
	int32                                         PredictionKeyId;                                   // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         ParentPredictionKeyId;                             // 0x0004(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
//static_assert(alignof(BUS_GSEventCollection_Evt_TestPredictServer) == 0x000004, "Wrong alignment on BUS_GSEventCollection_Evt_TestPredictServer");
//static_assert(sizeof(BUS_GSEventCollection_Evt_TestPredictServer) == 0x000008, "Wrong size on BUS_GSEventCollection_Evt_TestPredictServer");
//static_assert(offsetof(BUS_GSEventCollection_Evt_TestPredictServer, PredictionKeyId) == 0x000000, "Member 'BUS_GSEventCollection_Evt_TestPredictServer::PredictionKeyId' has a wrong offset!");
//static_assert(offsetof(BUS_GSEventCollection_Evt_TestPredictServer, ParentPredictionKeyId) == 0x000004, "Member 'BUS_GSEventCollection_Evt_TestPredictServer::ParentPredictionKeyId' has a wrong offset!");

// Function b1-Managed.BED_MovieNode_SetStreamingManagerViewSource.GetNodeDescriptionInCS
// 0x0010 (0x0010 - 0x0000)
struct BED_MovieNode_SetStreamingManagerViewSource_GetNodeDescriptionInCS final
{
public:
	class FString                                 ReturnValue;                                       // 0x0000(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash)
};
//static_assert(alignof(BED_MovieNode_SetStreamingManagerViewSource_GetNodeDescriptionInCS) == 0x000008, "Wrong alignment on BED_MovieNode_SetStreamingManagerViewSource_GetNodeDescriptionInCS");
//static_assert(sizeof(BED_MovieNode_SetStreamingManagerViewSource_GetNodeDescriptionInCS) == 0x000010, "Wrong size on BED_MovieNode_SetStreamingManagerViewSource_GetNodeDescriptionInCS");
//static_assert(offsetof(BED_MovieNode_SetStreamingManagerViewSource_GetNodeDescriptionInCS, ReturnValue) == 0x000000, "Member 'BED_MovieNode_SetStreamingManagerViewSource_GetNodeDescriptionInCS::ReturnValue' has a wrong offset!");

// Function b1-Managed.BUAbnormalDispMuseum.ReceiveTick
// 0x0004 (0x0004 - 0x0000)
struct BUAbnormalDispMuseum_ReceiveTick final
{
public:
	float                                         DeltaSeconds;                                      // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
//static_assert(alignof(BUAbnormalDispMuseum_ReceiveTick) == 0x000004, "Wrong alignment on BUAbnormalDispMuseum_ReceiveTick");
//static_assert(sizeof(BUAbnormalDispMuseum_ReceiveTick) == 0x000004, "Wrong size on BUAbnormalDispMuseum_ReceiveTick");
//static_assert(offsetof(BUAbnormalDispMuseum_ReceiveTick, DeltaSeconds) == 0x000000, "Member 'BUAbnormalDispMuseum_ReceiveTick::DeltaSeconds' has a wrong offset!");

// Function b1-Managed.BGULightFlickerComp.TickComponentInCS
// 0x0004 (0x0004 - 0x0000)
struct BGULightFlickerComp_TickComponentInCS final
{
public:
	float                                         DeltaTime;                                         // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
//static_assert(alignof(BGULightFlickerComp_TickComponentInCS) == 0x000004, "Wrong alignment on BGULightFlickerComp_TickComponentInCS");
//static_assert(sizeof(BGULightFlickerComp_TickComponentInCS) == 0x000004, "Wrong size on BGULightFlickerComp_TickComponentInCS");
//static_assert(offsetof(BGULightFlickerComp_TickComponentInCS, DeltaTime) == 0x000000, "Member 'BGULightFlickerComp_TickComponentInCS::DeltaTime' has a wrong offset!");

// Function b1-Managed.BGULightFlickerComp.OverrideProperty
// 0x0030 (0x0030 - 0x0000)
struct BGULightFlickerComp_OverrideProperty final
{
public:
	float                                         FlickRange_0;                                      // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         FlickTimeRandomMin_0;                              // 0x0004(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         FlickTimeRandomMax_0;                              // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         RandomRemapPower_0;                                // 0x000C(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         DestroyTime_0;                                     // 0x0010(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_14[0x4];                                       // 0x0014(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                PosFlickRange_0;                                   // 0x0018(0x0018)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
//static_assert(alignof(BGULightFlickerComp_OverrideProperty) == 0x000008, "Wrong alignment on BGULightFlickerComp_OverrideProperty");
//static_assert(sizeof(BGULightFlickerComp_OverrideProperty) == 0x000030, "Wrong size on BGULightFlickerComp_OverrideProperty");
//static_assert(offsetof(BGULightFlickerComp_OverrideProperty, FlickRange_0) == 0x000000, "Member 'BGULightFlickerComp_OverrideProperty::FlickRange_0' has a wrong offset!");
//static_assert(offsetof(BGULightFlickerComp_OverrideProperty, FlickTimeRandomMin_0) == 0x000004, "Member 'BGULightFlickerComp_OverrideProperty::FlickTimeRandomMin_0' has a wrong offset!");
//static_assert(offsetof(BGULightFlickerComp_OverrideProperty, FlickTimeRandomMax_0) == 0x000008, "Member 'BGULightFlickerComp_OverrideProperty::FlickTimeRandomMax_0' has a wrong offset!");
//static_assert(offsetof(BGULightFlickerComp_OverrideProperty, RandomRemapPower_0) == 0x00000C, "Member 'BGULightFlickerComp_OverrideProperty::RandomRemapPower_0' has a wrong offset!");
//static_assert(offsetof(BGULightFlickerComp_OverrideProperty, DestroyTime_0) == 0x000010, "Member 'BGULightFlickerComp_OverrideProperty::DestroyTime_0' has a wrong offset!");
//static_assert(offsetof(BGULightFlickerComp_OverrideProperty, PosFlickRange_0) == 0x000018, "Member 'BGULightFlickerComp_OverrideProperty::PosFlickRange_0' has a wrong offset!");

// Function b1-Managed.BGULightFlickerForSequenceComp.TickComponentInCS
// 0x0004 (0x0004 - 0x0000)
struct BGULightFlickerForSequenceComp_TickComponentInCS final
{
public:
	float                                         DeltaTime;                                         // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
//static_assert(alignof(BGULightFlickerForSequenceComp_TickComponentInCS) == 0x000004, "Wrong alignment on BGULightFlickerForSequenceComp_TickComponentInCS");
//static_assert(sizeof(BGULightFlickerForSequenceComp_TickComponentInCS) == 0x000004, "Wrong size on BGULightFlickerForSequenceComp_TickComponentInCS");
//static_assert(offsetof(BGULightFlickerForSequenceComp_TickComponentInCS, DeltaTime) == 0x000000, "Member 'BGULightFlickerForSequenceComp_TickComponentInCS::DeltaTime' has a wrong offset!");

// Function b1-Managed.BGUCharacterCS.OnMovementModeChangedCS
// 0x0004 (0x0004 - 0x0000)
struct BGUCharacterCS_OnMovementModeChangedCS final
{
public:
	EMovementMode                                 PrevMovementMode;                                  // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	EMovementMode                                 NewMovementMode;                                   // 0x0001(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         PrevCustomMode;                                    // 0x0002(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         NewCustomMode;                                     // 0x0003(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
//static_assert(alignof(BGUCharacterCS_OnMovementModeChangedCS) == 0x000001, "Wrong alignment on BGUCharacterCS_OnMovementModeChangedCS");
//static_assert(sizeof(BGUCharacterCS_OnMovementModeChangedCS) == 0x000004, "Wrong size on BGUCharacterCS_OnMovementModeChangedCS");
//static_assert(offsetof(BGUCharacterCS_OnMovementModeChangedCS, PrevMovementMode) == 0x000000, "Member 'BGUCharacterCS_OnMovementModeChangedCS::PrevMovementMode' has a wrong offset!");
//static_assert(offsetof(BGUCharacterCS_OnMovementModeChangedCS, NewMovementMode) == 0x000001, "Member 'BGUCharacterCS_OnMovementModeChangedCS::NewMovementMode' has a wrong offset!");
//static_assert(offsetof(BGUCharacterCS_OnMovementModeChangedCS, PrevCustomMode) == 0x000002, "Member 'BGUCharacterCS_OnMovementModeChangedCS::PrevCustomMode' has a wrong offset!");
//static_assert(offsetof(BGUCharacterCS_OnMovementModeChangedCS, NewCustomMode) == 0x000003, "Member 'BGUCharacterCS_OnMovementModeChangedCS::NewCustomMode' has a wrong offset!");

// Function b1-Managed.BGUCharacterCS.GetGSAuthorityPlayerCS
// 0x0008 (0x0008 - 0x0000)
struct BGUCharacterCS_GetGSAuthorityPlayerCS final
{
public:
	class APlayerController*                      ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
//static_assert(alignof(BGUCharacterCS_GetGSAuthorityPlayerCS) == 0x000008, "Wrong alignment on BGUCharacterCS_GetGSAuthorityPlayerCS");
//static_assert(sizeof(BGUCharacterCS_GetGSAuthorityPlayerCS) == 0x000008, "Wrong size on BGUCharacterCS_GetGSAuthorityPlayerCS");
//static_assert(offsetof(BGUCharacterCS_GetGSAuthorityPlayerCS, ReturnValue) == 0x000000, "Member 'BGUCharacterCS_GetGSAuthorityPlayerCS::ReturnValue' has a wrong offset!");

// Function b1-Managed.BGUCharacterCS.IsPlayerCharacterCS
// 0x0001 (0x0001 - 0x0000)
struct BGUCharacterCS_IsPlayerCharacterCS final
{
public:
	uint8                                         ReturnValue : 1;                                   // 0x0000(0x0001)(BitIndex: 0x00, PropSize: 0x0001 (Parm, OutParm, ReturnParm, NoDestructor, HasGetValueTypeHash))
};
//static_assert(alignof(BGUCharacterCS_IsPlayerCharacterCS) == 0x000001, "Wrong alignment on BGUCharacterCS_IsPlayerCharacterCS");
//static_assert(sizeof(BGUCharacterCS_IsPlayerCharacterCS) == 0x000001, "Wrong size on BGUCharacterCS_IsPlayerCharacterCS");

// Function b1-Managed.BGUCharacterCS.OnActorChannelOpen
// 0x0008 (0x0008 - 0x0000)
struct BGUCharacterCS_OnActorChannelOpen final
{
public:
	class UNetConnection*                         Connection;                                        // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
//static_assert(alignof(BGUCharacterCS_OnActorChannelOpen) == 0x000008, "Wrong alignment on BGUCharacterCS_OnActorChannelOpen");
//static_assert(sizeof(BGUCharacterCS_OnActorChannelOpen) == 0x000008, "Wrong size on BGUCharacterCS_OnActorChannelOpen");
//static_assert(offsetof(BGUCharacterCS_OnActorChannelOpen, Connection) == 0x000000, "Member 'BGUCharacterCS_OnActorChannelOpen::Connection' has a wrong offset!");

// Function b1-Managed.BGUCharacterCS.ReceiveEndPlay
// 0x0001 (0x0001 - 0x0000)
struct BGUCharacterCS_ReceiveEndPlay final
{
public:
	EEndPlayReason                                EndPlayReason;                                     // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
//static_assert(alignof(BGUCharacterCS_ReceiveEndPlay) == 0x000001, "Wrong alignment on BGUCharacterCS_ReceiveEndPlay");
//static_assert(sizeof(BGUCharacterCS_ReceiveEndPlay) == 0x000001, "Wrong size on BGUCharacterCS_ReceiveEndPlay");
//static_assert(offsetof(BGUCharacterCS_ReceiveEndPlay, EndPlayReason) == 0x000000, "Member 'BGUCharacterCS_ReceiveEndPlay::EndPlayReason' has a wrong offset!");

// Function b1-Managed.BGUCharacterCS.GetActorGuidCS
// 0x0018 (0x0018 - 0x0000)
struct BGUCharacterCS_GetActorGuidCS final
{
public:
	class FString                                 OutActorGuid;                                      // 0x0000(0x0010)(Parm, OutParm, ZeroConstructor, HasGetValueTypeHash)
	uint8                                         ReturnValue : 1;                                   // 0x0010(0x0001)(BitIndex: 0x00, PropSize: 0x0001 (Parm, OutParm, ReturnParm, NoDestructor, HasGetValueTypeHash))
};
//static_assert(alignof(BGUCharacterCS_GetActorGuidCS) == 0x000008, "Wrong alignment on BGUCharacterCS_GetActorGuidCS");
//static_assert(sizeof(BGUCharacterCS_GetActorGuidCS) == 0x000018, "Wrong size on BGUCharacterCS_GetActorGuidCS");
//static_assert(offsetof(BGUCharacterCS_GetActorGuidCS, OutActorGuid) == 0x000000, "Member 'BGUCharacterCS_GetActorGuidCS::OutActorGuid' has a wrong offset!");

// Function b1-Managed.BED_MovieNode_Transformation.GetNodeDescriptionInCS
// 0x0010 (0x0010 - 0x0000)
struct BED_MovieNode_Transformation_GetNodeDescriptionInCS final
{
public:
	class FString                                 ReturnValue;                                       // 0x0000(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash)
};
//static_assert(alignof(BED_MovieNode_Transformation_GetNodeDescriptionInCS) == 0x000008, "Wrong alignment on BED_MovieNode_Transformation_GetNodeDescriptionInCS");
//static_assert(sizeof(BED_MovieNode_Transformation_GetNodeDescriptionInCS) == 0x000010, "Wrong size on BED_MovieNode_Transformation_GetNodeDescriptionInCS");
//static_assert(offsetof(BED_MovieNode_Transformation_GetNodeDescriptionInCS, ReturnValue) == 0x000000, "Member 'BED_MovieNode_Transformation_GetNodeDescriptionInCS::ReturnValue' has a wrong offset!");

// Function b1-Managed.BED_TaskNode.IsSupportViewType
// 0x0002 (0x0002 - 0x0000)
struct BED_TaskNode_IsSupportViewType final
{
public:
	ECalliopeViewType                             InViewType;                                        // 0x0000(0x0001)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         ReturnValue : 1;                                   // 0x0001(0x0001)(BitIndex: 0x00, PropSize: 0x0001 (Parm, OutParm, ReturnParm, NoDestructor, HasGetValueTypeHash))
};
//static_assert(alignof(BED_TaskNode_IsSupportViewType) == 0x000001, "Wrong alignment on BED_TaskNode_IsSupportViewType");
//static_assert(sizeof(BED_TaskNode_IsSupportViewType) == 0x000002, "Wrong size on BED_TaskNode_IsSupportViewType");
//static_assert(offsetof(BED_TaskNode_IsSupportViewType, InViewType) == 0x000000, "Member 'BED_TaskNode_IsSupportViewType::InViewType' has a wrong offset!");

// Function b1-Managed.BED_FSMNode_GI_Global_WXLogin.PostPropertyChanged
// 0x0020 (0x0020 - 0x0000)
struct BED_FSMNode_GI_Global_WXLogin_PostPropertyChanged final
{
public:
	class FString                                 MemberName;                                        // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash)
	class FString                                 PropertyName;                                      // 0x0010(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash)
};
//static_assert(alignof(BED_FSMNode_GI_Global_WXLogin_PostPropertyChanged) == 0x000008, "Wrong alignment on BED_FSMNode_GI_Global_WXLogin_PostPropertyChanged");
//static_assert(sizeof(BED_FSMNode_GI_Global_WXLogin_PostPropertyChanged) == 0x000020, "Wrong size on BED_FSMNode_GI_Global_WXLogin_PostPropertyChanged");
//static_assert(offsetof(BED_FSMNode_GI_Global_WXLogin_PostPropertyChanged, MemberName) == 0x000000, "Member 'BED_FSMNode_GI_Global_WXLogin_PostPropertyChanged::MemberName' has a wrong offset!");
//static_assert(offsetof(BED_FSMNode_GI_Global_WXLogin_PostPropertyChanged, PropertyName) == 0x000010, "Member 'BED_FSMNode_GI_Global_WXLogin_PostPropertyChanged::PropertyName' has a wrong offset!");

// Function b1-Managed.BED_FSMNode_GI_Global_WXLogin.GetNodeDescriptionInCS
// 0x0010 (0x0010 - 0x0000)
struct BED_FSMNode_GI_Global_WXLogin_GetNodeDescriptionInCS final
{
public:
	class FString                                 ReturnValue;                                       // 0x0000(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash)
};
//static_assert(alignof(BED_FSMNode_GI_Global_WXLogin_GetNodeDescriptionInCS) == 0x000008, "Wrong alignment on BED_FSMNode_GI_Global_WXLogin_GetNodeDescriptionInCS");
//static_assert(sizeof(BED_FSMNode_GI_Global_WXLogin_GetNodeDescriptionInCS) == 0x000010, "Wrong size on BED_FSMNode_GI_Global_WXLogin_GetNodeDescriptionInCS");
//static_assert(offsetof(BED_FSMNode_GI_Global_WXLogin_GetNodeDescriptionInCS, ReturnValue) == 0x000000, "Member 'BED_FSMNode_GI_Global_WXLogin_GetNodeDescriptionInCS::ReturnValue' has a wrong offset!");

// Function b1-Managed.BED_FSMNode_GI_Global_InBenchMark.PostPropertyChanged
// 0x0020 (0x0020 - 0x0000)
struct BED_FSMNode_GI_Global_InBenchMark_PostPropertyChanged final
{
public:
	class FString                                 MemberName;                                        // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash)
	class FString                                 PropertyName;                                      // 0x0010(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash)
};
//static_assert(alignof(BED_FSMNode_GI_Global_InBenchMark_PostPropertyChanged) == 0x000008, "Wrong alignment on BED_FSMNode_GI_Global_InBenchMark_PostPropertyChanged");
//static_assert(sizeof(BED_FSMNode_GI_Global_InBenchMark_PostPropertyChanged) == 0x000020, "Wrong size on BED_FSMNode_GI_Global_InBenchMark_PostPropertyChanged");
//static_assert(offsetof(BED_FSMNode_GI_Global_InBenchMark_PostPropertyChanged, MemberName) == 0x000000, "Member 'BED_FSMNode_GI_Global_InBenchMark_PostPropertyChanged::MemberName' has a wrong offset!");
//static_assert(offsetof(BED_FSMNode_GI_Global_InBenchMark_PostPropertyChanged, PropertyName) == 0x000010, "Member 'BED_FSMNode_GI_Global_InBenchMark_PostPropertyChanged::PropertyName' has a wrong offset!");

// Function b1-Managed.BED_FSMNode_GI_Global_InBenchMark.GetNodeDescriptionInCS
// 0x0010 (0x0010 - 0x0000)
struct BED_FSMNode_GI_Global_InBenchMark_GetNodeDescriptionInCS final
{
public:
	class FString                                 ReturnValue;                                       // 0x0000(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash)
};
//static_assert(alignof(BED_FSMNode_GI_Global_InBenchMark_GetNodeDescriptionInCS) == 0x000008, "Wrong alignment on BED_FSMNode_GI_Global_InBenchMark_GetNodeDescriptionInCS");
//static_assert(sizeof(BED_FSMNode_GI_Global_InBenchMark_GetNodeDescriptionInCS) == 0x000010, "Wrong size on BED_FSMNode_GI_Global_InBenchMark_GetNodeDescriptionInCS");
//static_assert(offsetof(BED_FSMNode_GI_Global_InBenchMark_GetNodeDescriptionInCS, ReturnValue) == 0x000000, "Member 'BED_FSMNode_GI_Global_InBenchMark_GetNodeDescriptionInCS::ReturnValue' has a wrong offset!");

// Function b1-Managed.BGW_OnlineAchievement.OnAchievementsWrittenCompleteCS
// 0x0001 (0x0001 - 0x0000)
struct BGW_OnlineAchievement_OnAchievementsWrittenCompleteCS final
{
public:
	uint8                                         bWasSuccessful : 1;                                // 0x0000(0x0001)(BitIndex: 0x00, PropSize: 0x0001 (Parm, NoDestructor, HasGetValueTypeHash))
};
//static_assert(alignof(BGW_OnlineAchievement_OnAchievementsWrittenCompleteCS) == 0x000001, "Wrong alignment on BGW_OnlineAchievement_OnAchievementsWrittenCompleteCS");
//static_assert(sizeof(BGW_OnlineAchievement_OnAchievementsWrittenCompleteCS) == 0x000001, "Wrong size on BGW_OnlineAchievement_OnAchievementsWrittenCompleteCS");

// Function b1-Managed.BGW_OnlineAchievement.OnQueryAchievementsCompleteCS
// 0x0001 (0x0001 - 0x0000)
struct BGW_OnlineAchievement_OnQueryAchievementsCompleteCS final
{
public:
	uint8                                         bWasSuccessful : 1;                                // 0x0000(0x0001)(BitIndex: 0x00, PropSize: 0x0001 (Parm, NoDestructor, HasGetValueTypeHash))
};
//static_assert(alignof(BGW_OnlineAchievement_OnQueryAchievementsCompleteCS) == 0x000001, "Wrong alignment on BGW_OnlineAchievement_OnQueryAchievementsCompleteCS");
//static_assert(sizeof(BGW_OnlineAchievement_OnQueryAchievementsCompleteCS) == 0x000001, "Wrong size on BGW_OnlineAchievement_OnQueryAchievementsCompleteCS");

// Function b1-Managed.BGW_OnlineAchievement.OnStatUpdatedCompleteCS
// 0x0001 (0x0001 - 0x0000)
struct BGW_OnlineAchievement_OnStatUpdatedCompleteCS final
{
public:
	uint8                                         bWasSuccessful : 1;                                // 0x0000(0x0001)(BitIndex: 0x00, PropSize: 0x0001 (Parm, NoDestructor, HasGetValueTypeHash))
};
//static_assert(alignof(BGW_OnlineAchievement_OnStatUpdatedCompleteCS) == 0x000001, "Wrong alignment on BGW_OnlineAchievement_OnStatUpdatedCompleteCS");
//static_assert(sizeof(BGW_OnlineAchievement_OnStatUpdatedCompleteCS) == 0x000001, "Wrong size on BGW_OnlineAchievement_OnStatUpdatedCompleteCS");

// Function b1-Managed.BANS_GSToNextSectionWhenLand.GSNotifyBeginCS
// 0x0048 (0x0048 - 0x0000)
struct BANS_GSToNextSectionWhenLand_GSNotifyBeginCS final
{
public:
	struct FUStGSNotifyParam                      NotifyParam;                                       // 0x0000(0x0040)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
	float                                         TotalDuration;                                     // 0x0040(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
//static_assert(alignof(BANS_GSToNextSectionWhenLand_GSNotifyBeginCS) == 0x000008, "Wrong alignment on BANS_GSToNextSectionWhenLand_GSNotifyBeginCS");
//static_assert(sizeof(BANS_GSToNextSectionWhenLand_GSNotifyBeginCS) == 0x000048, "Wrong size on BANS_GSToNextSectionWhenLand_GSNotifyBeginCS");
//static_assert(offsetof(BANS_GSToNextSectionWhenLand_GSNotifyBeginCS, NotifyParam) == 0x000000, "Member 'BANS_GSToNextSectionWhenLand_GSNotifyBeginCS::NotifyParam' has a wrong offset!");
//static_assert(offsetof(BANS_GSToNextSectionWhenLand_GSNotifyBeginCS, TotalDuration) == 0x000040, "Member 'BANS_GSToNextSectionWhenLand_GSNotifyBeginCS::TotalDuration' has a wrong offset!");

// Function b1-Managed.BANS_GSToNextSectionWhenLand.GSNotifyTickCS
// 0x0048 (0x0048 - 0x0000)
struct BANS_GSToNextSectionWhenLand_GSNotifyTickCS final
{
public:
	struct FUStGSNotifyParam                      NotifyParam;                                       // 0x0000(0x0040)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
	float                                         FrameDeltaTime;                                    // 0x0040(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
//static_assert(alignof(BANS_GSToNextSectionWhenLand_GSNotifyTickCS) == 0x000008, "Wrong alignment on BANS_GSToNextSectionWhenLand_GSNotifyTickCS");
//static_assert(sizeof(BANS_GSToNextSectionWhenLand_GSNotifyTickCS) == 0x000048, "Wrong size on BANS_GSToNextSectionWhenLand_GSNotifyTickCS");
//static_assert(offsetof(BANS_GSToNextSectionWhenLand_GSNotifyTickCS, NotifyParam) == 0x000000, "Member 'BANS_GSToNextSectionWhenLand_GSNotifyTickCS::NotifyParam' has a wrong offset!");
//static_assert(offsetof(BANS_GSToNextSectionWhenLand_GSNotifyTickCS, FrameDeltaTime) == 0x000040, "Member 'BANS_GSToNextSectionWhenLand_GSNotifyTickCS::FrameDeltaTime' has a wrong offset!");

// Function b1-Managed.BANS_GSToNextSectionWhenLand.GSNotifyEndCS
// 0x0040 (0x0040 - 0x0000)
struct BANS_GSToNextSectionWhenLand_GSNotifyEndCS final
{
public:
	struct FUStGSNotifyParam                      NotifyParam;                                       // 0x0000(0x0040)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
//static_assert(alignof(BANS_GSToNextSectionWhenLand_GSNotifyEndCS) == 0x000008, "Wrong alignment on BANS_GSToNextSectionWhenLand_GSNotifyEndCS");
//static_assert(sizeof(BANS_GSToNextSectionWhenLand_GSNotifyEndCS) == 0x000040, "Wrong size on BANS_GSToNextSectionWhenLand_GSNotifyEndCS");
//static_assert(offsetof(BANS_GSToNextSectionWhenLand_GSNotifyEndCS, NotifyParam) == 0x000000, "Member 'BANS_GSToNextSectionWhenLand_GSNotifyEndCS::NotifyParam' has a wrong offset!");

// Function b1-Managed.BUS_MFNegativeOverlapComp.OverlapBegin
// 0x0018 (0x0018 - 0x0000)
struct BUS_MFNegativeOverlapComp_OverlapBegin final
{
public:
	class UPrimitiveComponent*                    OverlappedComponent;                               // 0x0000(0x0008)(ExportObject, Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class AActor*                                 OtherActor;                                        // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UPrimitiveComponent*                    OtherComponent;                                    // 0x0010(0x0008)(ExportObject, Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
//static_assert(alignof(BUS_MFNegativeOverlapComp_OverlapBegin) == 0x000008, "Wrong alignment on BUS_MFNegativeOverlapComp_OverlapBegin");
//static_assert(sizeof(BUS_MFNegativeOverlapComp_OverlapBegin) == 0x000018, "Wrong size on BUS_MFNegativeOverlapComp_OverlapBegin");
//static_assert(offsetof(BUS_MFNegativeOverlapComp_OverlapBegin, OverlappedComponent) == 0x000000, "Member 'BUS_MFNegativeOverlapComp_OverlapBegin::OverlappedComponent' has a wrong offset!");
//static_assert(offsetof(BUS_MFNegativeOverlapComp_OverlapBegin, OtherActor) == 0x000008, "Member 'BUS_MFNegativeOverlapComp_OverlapBegin::OtherActor' has a wrong offset!");
//static_assert(offsetof(BUS_MFNegativeOverlapComp_OverlapBegin, OtherComponent) == 0x000010, "Member 'BUS_MFNegativeOverlapComp_OverlapBegin::OtherComponent' has a wrong offset!");

// Function b1-Managed.BUS_MFNegativeOverlapComp.OverlapEnd
// 0x0018 (0x0018 - 0x0000)
struct BUS_MFNegativeOverlapComp_OverlapEnd final
{
public:
	class UPrimitiveComponent*                    OverlappedComponent;                               // 0x0000(0x0008)(ExportObject, Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class AActor*                                 OtherActor;                                        // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UPrimitiveComponent*                    OtherComponent;                                    // 0x0010(0x0008)(ExportObject, Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
//static_assert(alignof(BUS_MFNegativeOverlapComp_OverlapEnd) == 0x000008, "Wrong alignment on BUS_MFNegativeOverlapComp_OverlapEnd");
//static_assert(sizeof(BUS_MFNegativeOverlapComp_OverlapEnd) == 0x000018, "Wrong size on BUS_MFNegativeOverlapComp_OverlapEnd");
//static_assert(offsetof(BUS_MFNegativeOverlapComp_OverlapEnd, OverlappedComponent) == 0x000000, "Member 'BUS_MFNegativeOverlapComp_OverlapEnd::OverlappedComponent' has a wrong offset!");
//static_assert(offsetof(BUS_MFNegativeOverlapComp_OverlapEnd, OtherActor) == 0x000008, "Member 'BUS_MFNegativeOverlapComp_OverlapEnd::OtherActor' has a wrong offset!");
//static_assert(offsetof(BUS_MFNegativeOverlapComp_OverlapEnd, OtherComponent) == 0x000010, "Member 'BUS_MFNegativeOverlapComp_OverlapEnd::OtherComponent' has a wrong offset!");

// Function b1-Managed.BED_FSMNode_GI_Loading_CacheArchiveDataForClient.PostPropertyChanged
// 0x0020 (0x0020 - 0x0000)
struct BED_FSMNode_GI_Loading_CacheArchiveDataForClient_PostPropertyChanged final
{
public:
	class FString                                 MemberName;                                        // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash)
	class FString                                 PropertyName;                                      // 0x0010(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash)
};
//static_assert(alignof(BED_FSMNode_GI_Loading_CacheArchiveDataForClient_PostPropertyChanged) == 0x000008, "Wrong alignment on BED_FSMNode_GI_Loading_CacheArchiveDataForClient_PostPropertyChanged");
//static_assert(sizeof(BED_FSMNode_GI_Loading_CacheArchiveDataForClient_PostPropertyChanged) == 0x000020, "Wrong size on BED_FSMNode_GI_Loading_CacheArchiveDataForClient_PostPropertyChanged");
//static_assert(offsetof(BED_FSMNode_GI_Loading_CacheArchiveDataForClient_PostPropertyChanged, MemberName) == 0x000000, "Member 'BED_FSMNode_GI_Loading_CacheArchiveDataForClient_PostPropertyChanged::MemberName' has a wrong offset!");
//static_assert(offsetof(BED_FSMNode_GI_Loading_CacheArchiveDataForClient_PostPropertyChanged, PropertyName) == 0x000010, "Member 'BED_FSMNode_GI_Loading_CacheArchiveDataForClient_PostPropertyChanged::PropertyName' has a wrong offset!");

// Function b1-Managed.BED_FSMNode_GI_Loading_CacheArchiveDataForClient.GetNodeDescriptionInCS
// 0x0010 (0x0010 - 0x0000)
struct BED_FSMNode_GI_Loading_CacheArchiveDataForClient_GetNodeDescriptionInCS final
{
public:
	class FString                                 ReturnValue;                                       // 0x0000(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash)
};
//static_assert(alignof(BED_FSMNode_GI_Loading_CacheArchiveDataForClient_GetNodeDescriptionInCS) == 0x000008, "Wrong alignment on BED_FSMNode_GI_Loading_CacheArchiveDataForClient_GetNodeDescriptionInCS");
//static_assert(sizeof(BED_FSMNode_GI_Loading_CacheArchiveDataForClient_GetNodeDescriptionInCS) == 0x000010, "Wrong size on BED_FSMNode_GI_Loading_CacheArchiveDataForClient_GetNodeDescriptionInCS");
//static_assert(offsetof(BED_FSMNode_GI_Loading_CacheArchiveDataForClient_GetNodeDescriptionInCS, ReturnValue) == 0x000000, "Member 'BED_FSMNode_GI_Loading_CacheArchiveDataForClient_GetNodeDescriptionInCS::ReturnValue' has a wrong offset!");

// Function b1-Managed.BED_FSMNode_Condition_GI_Loading_TravelUrlIsListen.GetNodeDescriptionInCS
// 0x0010 (0x0010 - 0x0000)
struct BED_FSMNode_Condition_GI_Loading_TravelUrlIsListen_GetNodeDescriptionInCS final
{
public:
	class FString                                 ReturnValue;                                       // 0x0000(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash)
};
//static_assert(alignof(BED_FSMNode_Condition_GI_Loading_TravelUrlIsListen_GetNodeDescriptionInCS) == 0x000008, "Wrong alignment on BED_FSMNode_Condition_GI_Loading_TravelUrlIsListen_GetNodeDescriptionInCS");
//static_assert(sizeof(BED_FSMNode_Condition_GI_Loading_TravelUrlIsListen_GetNodeDescriptionInCS) == 0x000010, "Wrong size on BED_FSMNode_Condition_GI_Loading_TravelUrlIsListen_GetNodeDescriptionInCS");
//static_assert(offsetof(BED_FSMNode_Condition_GI_Loading_TravelUrlIsListen_GetNodeDescriptionInCS, ReturnValue) == 0x000000, "Member 'BED_FSMNode_Condition_GI_Loading_TravelUrlIsListen_GetNodeDescriptionInCS::ReturnValue' has a wrong offset!");

// Function b1-Managed.BED_FSMNode_GI_Loading_CheckGSSdkUserConfig.PostPropertyChanged
// 0x0020 (0x0020 - 0x0000)
struct BED_FSMNode_GI_Loading_CheckGSSdkUserConfig_PostPropertyChanged final
{
public:
	class FString                                 MemberName;                                        // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash)
	class FString                                 PropertyName;                                      // 0x0010(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash)
};
//static_assert(alignof(BED_FSMNode_GI_Loading_CheckGSSdkUserConfig_PostPropertyChanged) == 0x000008, "Wrong alignment on BED_FSMNode_GI_Loading_CheckGSSdkUserConfig_PostPropertyChanged");
//static_assert(sizeof(BED_FSMNode_GI_Loading_CheckGSSdkUserConfig_PostPropertyChanged) == 0x000020, "Wrong size on BED_FSMNode_GI_Loading_CheckGSSdkUserConfig_PostPropertyChanged");
//static_assert(offsetof(BED_FSMNode_GI_Loading_CheckGSSdkUserConfig_PostPropertyChanged, MemberName) == 0x000000, "Member 'BED_FSMNode_GI_Loading_CheckGSSdkUserConfig_PostPropertyChanged::MemberName' has a wrong offset!");
//static_assert(offsetof(BED_FSMNode_GI_Loading_CheckGSSdkUserConfig_PostPropertyChanged, PropertyName) == 0x000010, "Member 'BED_FSMNode_GI_Loading_CheckGSSdkUserConfig_PostPropertyChanged::PropertyName' has a wrong offset!");

// Function b1-Managed.BED_FSMNode_GI_Loading_CheckGSSdkUserConfig.GetNodeDescriptionInCS
// 0x0010 (0x0010 - 0x0000)
struct BED_FSMNode_GI_Loading_CheckGSSdkUserConfig_GetNodeDescriptionInCS final
{
public:
	class FString                                 ReturnValue;                                       // 0x0000(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash)
};
//static_assert(alignof(BED_FSMNode_GI_Loading_CheckGSSdkUserConfig_GetNodeDescriptionInCS) == 0x000008, "Wrong alignment on BED_FSMNode_GI_Loading_CheckGSSdkUserConfig_GetNodeDescriptionInCS");
//static_assert(sizeof(BED_FSMNode_GI_Loading_CheckGSSdkUserConfig_GetNodeDescriptionInCS) == 0x000010, "Wrong size on BED_FSMNode_GI_Loading_CheckGSSdkUserConfig_GetNodeDescriptionInCS");
//static_assert(offsetof(BED_FSMNode_GI_Loading_CheckGSSdkUserConfig_GetNodeDescriptionInCS, ReturnValue) == 0x000000, "Member 'BED_FSMNode_GI_Loading_CheckGSSdkUserConfig_GetNodeDescriptionInCS::ReturnValue' has a wrong offset!");

// Function b1-Managed.BED_FSMNode_SubGraph.PostPropertyChanged
// 0x0020 (0x0020 - 0x0000)
struct BED_FSMNode_SubGraph_PostPropertyChanged final
{
public:
	class FString                                 MemberName;                                        // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash)
	class FString                                 PropertyName;                                      // 0x0010(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash)
};
//static_assert(alignof(BED_FSMNode_SubGraph_PostPropertyChanged) == 0x000008, "Wrong alignment on BED_FSMNode_SubGraph_PostPropertyChanged");
//static_assert(sizeof(BED_FSMNode_SubGraph_PostPropertyChanged) == 0x000020, "Wrong size on BED_FSMNode_SubGraph_PostPropertyChanged");
//static_assert(offsetof(BED_FSMNode_SubGraph_PostPropertyChanged, MemberName) == 0x000000, "Member 'BED_FSMNode_SubGraph_PostPropertyChanged::MemberName' has a wrong offset!");
//static_assert(offsetof(BED_FSMNode_SubGraph_PostPropertyChanged, PropertyName) == 0x000010, "Member 'BED_FSMNode_SubGraph_PostPropertyChanged::PropertyName' has a wrong offset!");

// Function b1-Managed.BED_FSMNode_SubGraph.PrePropertyChanged
// 0x0010 (0x0010 - 0x0000)
struct BED_FSMNode_SubGraph_PrePropertyChanged final
{
public:
	class FString                                 PropertyName;                                      // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash)
};
//static_assert(alignof(BED_FSMNode_SubGraph_PrePropertyChanged) == 0x000008, "Wrong alignment on BED_FSMNode_SubGraph_PrePropertyChanged");
//static_assert(sizeof(BED_FSMNode_SubGraph_PrePropertyChanged) == 0x000010, "Wrong size on BED_FSMNode_SubGraph_PrePropertyChanged");
//static_assert(offsetof(BED_FSMNode_SubGraph_PrePropertyChanged, PropertyName) == 0x000000, "Member 'BED_FSMNode_SubGraph_PrePropertyChanged::PropertyName' has a wrong offset!");

// Function b1-Managed.BED_FSMNode_SubGraph.GetAssetToEditInCS
// 0x0008 (0x0008 - 0x0000)
struct BED_FSMNode_SubGraph_GetAssetToEditInCS final
{
public:
	class UObject*                                ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
//static_assert(alignof(BED_FSMNode_SubGraph_GetAssetToEditInCS) == 0x000008, "Wrong alignment on BED_FSMNode_SubGraph_GetAssetToEditInCS");
//static_assert(sizeof(BED_FSMNode_SubGraph_GetAssetToEditInCS) == 0x000008, "Wrong size on BED_FSMNode_SubGraph_GetAssetToEditInCS");
//static_assert(offsetof(BED_FSMNode_SubGraph_GetAssetToEditInCS, ReturnValue) == 0x000000, "Member 'BED_FSMNode_SubGraph_GetAssetToEditInCS::ReturnValue' has a wrong offset!");

// Function b1-Managed.BED_FSMNode_SubGraph.GetNodeDescriptionInCS
// 0x0010 (0x0010 - 0x0000)
struct BED_FSMNode_SubGraph_GetNodeDescriptionInCS final
{
public:
	class FString                                 ReturnValue;                                       // 0x0000(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash)
};
//static_assert(alignof(BED_FSMNode_SubGraph_GetNodeDescriptionInCS) == 0x000008, "Wrong alignment on BED_FSMNode_SubGraph_GetNodeDescriptionInCS");
//static_assert(sizeof(BED_FSMNode_SubGraph_GetNodeDescriptionInCS) == 0x000010, "Wrong size on BED_FSMNode_SubGraph_GetNodeDescriptionInCS");
//static_assert(offsetof(BED_FSMNode_SubGraph_GetNodeDescriptionInCS, ReturnValue) == 0x000000, "Member 'BED_FSMNode_SubGraph_GetNodeDescriptionInCS::ReturnValue' has a wrong offset!");

// Function b1-Managed.BED_FSMNode_GI_Global_SubG_GI_Loading_BackToStandAlone.GetNodeDescriptionInCS
// 0x0010 (0x0010 - 0x0000)
struct BED_FSMNode_GI_Global_SubG_GI_Loading_BackToStandAlone_GetNodeDescriptionInCS final
{
public:
	class FString                                 ReturnValue;                                       // 0x0000(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash)
};
//static_assert(alignof(BED_FSMNode_GI_Global_SubG_GI_Loading_BackToStandAlone_GetNodeDescriptionInCS) == 0x000008, "Wrong alignment on BED_FSMNode_GI_Global_SubG_GI_Loading_BackToStandAlone_GetNodeDescriptionInCS");
//static_assert(sizeof(BED_FSMNode_GI_Global_SubG_GI_Loading_BackToStandAlone_GetNodeDescriptionInCS) == 0x000010, "Wrong size on BED_FSMNode_GI_Global_SubG_GI_Loading_BackToStandAlone_GetNodeDescriptionInCS");
//static_assert(offsetof(BED_FSMNode_GI_Global_SubG_GI_Loading_BackToStandAlone_GetNodeDescriptionInCS, ReturnValue) == 0x000000, "Member 'BED_FSMNode_GI_Global_SubG_GI_Loading_BackToStandAlone_GetNodeDescriptionInCS::ReturnValue' has a wrong offset!");

// Function b1-Managed.BUS_ItemInteractAreaSystem_CPU.OnActorLeave
// 0x0020 (0x0020 - 0x0000)
struct BUS_ItemInteractAreaSystem_CPU_OnActorLeave final
{
public:
	class UPrimitiveComponent*                    OverlappedComponent;                               // 0x0000(0x0008)(ExportObject, Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class AActor*                                 OtherActor;                                        // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UPrimitiveComponent*                    OtherComp;                                         // 0x0010(0x0008)(ExportObject, Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         OtherBodyIndex;                                    // 0x0018(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
//static_assert(alignof(BUS_ItemInteractAreaSystem_CPU_OnActorLeave) == 0x000008, "Wrong alignment on BUS_ItemInteractAreaSystem_CPU_OnActorLeave");
//static_assert(sizeof(BUS_ItemInteractAreaSystem_CPU_OnActorLeave) == 0x000020, "Wrong size on BUS_ItemInteractAreaSystem_CPU_OnActorLeave");
//static_assert(offsetof(BUS_ItemInteractAreaSystem_CPU_OnActorLeave, OverlappedComponent) == 0x000000, "Member 'BUS_ItemInteractAreaSystem_CPU_OnActorLeave::OverlappedComponent' has a wrong offset!");
//static_assert(offsetof(BUS_ItemInteractAreaSystem_CPU_OnActorLeave, OtherActor) == 0x000008, "Member 'BUS_ItemInteractAreaSystem_CPU_OnActorLeave::OtherActor' has a wrong offset!");
//static_assert(offsetof(BUS_ItemInteractAreaSystem_CPU_OnActorLeave, OtherComp) == 0x000010, "Member 'BUS_ItemInteractAreaSystem_CPU_OnActorLeave::OtherComp' has a wrong offset!");
//static_assert(offsetof(BUS_ItemInteractAreaSystem_CPU_OnActorLeave, OtherBodyIndex) == 0x000018, "Member 'BUS_ItemInteractAreaSystem_CPU_OnActorLeave::OtherBodyIndex' has a wrong offset!");

// Function b1-Managed.BUS_ItemInteractAreaSystem_CPU.OnActorEnter
// 0x0010 (0x0010 - 0x0000)
struct BUS_ItemInteractAreaSystem_CPU_OnActorEnter final
{
public:
	class AActor*                                 OverlappedActor;                                   // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class AActor*                                 OtherActor;                                        // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
//static_assert(alignof(BUS_ItemInteractAreaSystem_CPU_OnActorEnter) == 0x000008, "Wrong alignment on BUS_ItemInteractAreaSystem_CPU_OnActorEnter");
//static_assert(sizeof(BUS_ItemInteractAreaSystem_CPU_OnActorEnter) == 0x000010, "Wrong size on BUS_ItemInteractAreaSystem_CPU_OnActorEnter");
//static_assert(offsetof(BUS_ItemInteractAreaSystem_CPU_OnActorEnter, OverlappedActor) == 0x000000, "Member 'BUS_ItemInteractAreaSystem_CPU_OnActorEnter::OverlappedActor' has a wrong offset!");
//static_assert(offsetof(BUS_ItemInteractAreaSystem_CPU_OnActorEnter, OtherActor) == 0x000008, "Member 'BUS_ItemInteractAreaSystem_CPU_OnActorEnter::OtherActor' has a wrong offset!");

// Function b1-Managed.BANS_GSChangeMIParam.GSNotifyBeginCS
// 0x0048 (0x0048 - 0x0000)
struct BANS_GSChangeMIParam_GSNotifyBeginCS final
{
public:
	struct FUStGSNotifyParam                      NotifyParam;                                       // 0x0000(0x0040)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
	float                                         TotalDuration;                                     // 0x0040(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
//static_assert(alignof(BANS_GSChangeMIParam_GSNotifyBeginCS) == 0x000008, "Wrong alignment on BANS_GSChangeMIParam_GSNotifyBeginCS");
//static_assert(sizeof(BANS_GSChangeMIParam_GSNotifyBeginCS) == 0x000048, "Wrong size on BANS_GSChangeMIParam_GSNotifyBeginCS");
//static_assert(offsetof(BANS_GSChangeMIParam_GSNotifyBeginCS, NotifyParam) == 0x000000, "Member 'BANS_GSChangeMIParam_GSNotifyBeginCS::NotifyParam' has a wrong offset!");
//static_assert(offsetof(BANS_GSChangeMIParam_GSNotifyBeginCS, TotalDuration) == 0x000040, "Member 'BANS_GSChangeMIParam_GSNotifyBeginCS::TotalDuration' has a wrong offset!");

// Function b1-Managed.BANS_GSChangeMIParam.GSNotifyTickCS
// 0x0048 (0x0048 - 0x0000)
struct BANS_GSChangeMIParam_GSNotifyTickCS final
{
public:
	struct FUStGSNotifyParam                      NotifyParam;                                       // 0x0000(0x0040)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
	float                                         FrameDeltaTime;                                    // 0x0040(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
//static_assert(alignof(BANS_GSChangeMIParam_GSNotifyTickCS) == 0x000008, "Wrong alignment on BANS_GSChangeMIParam_GSNotifyTickCS");
//static_assert(sizeof(BANS_GSChangeMIParam_GSNotifyTickCS) == 0x000048, "Wrong size on BANS_GSChangeMIParam_GSNotifyTickCS");
//static_assert(offsetof(BANS_GSChangeMIParam_GSNotifyTickCS, NotifyParam) == 0x000000, "Member 'BANS_GSChangeMIParam_GSNotifyTickCS::NotifyParam' has a wrong offset!");
//static_assert(offsetof(BANS_GSChangeMIParam_GSNotifyTickCS, FrameDeltaTime) == 0x000040, "Member 'BANS_GSChangeMIParam_GSNotifyTickCS::FrameDeltaTime' has a wrong offset!");

// Function b1-Managed.BANS_GSChangeMIParam.GSNotifyEndCS
// 0x0040 (0x0040 - 0x0000)
struct BANS_GSChangeMIParam_GSNotifyEndCS final
{
public:
	struct FUStGSNotifyParam                      NotifyParam;                                       // 0x0000(0x0040)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
//static_assert(alignof(BANS_GSChangeMIParam_GSNotifyEndCS) == 0x000008, "Wrong alignment on BANS_GSChangeMIParam_GSNotifyEndCS");
//static_assert(sizeof(BANS_GSChangeMIParam_GSNotifyEndCS) == 0x000040, "Wrong size on BANS_GSChangeMIParam_GSNotifyEndCS");
//static_assert(offsetof(BANS_GSChangeMIParam_GSNotifyEndCS, NotifyParam) == 0x000000, "Member 'BANS_GSChangeMIParam_GSNotifyEndCS::NotifyParam' has a wrong offset!");

// Function b1-Managed.BED_FSMNode_GI_Loading_ECSWorldReset.PostPropertyChanged
// 0x0020 (0x0020 - 0x0000)
struct BED_FSMNode_GI_Loading_ECSWorldReset_PostPropertyChanged final
{
public:
	class FString                                 MemberName;                                        // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash)
	class FString                                 PropertyName;                                      // 0x0010(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash)
};
//static_assert(alignof(BED_FSMNode_GI_Loading_ECSWorldReset_PostPropertyChanged) == 0x000008, "Wrong alignment on BED_FSMNode_GI_Loading_ECSWorldReset_PostPropertyChanged");
//static_assert(sizeof(BED_FSMNode_GI_Loading_ECSWorldReset_PostPropertyChanged) == 0x000020, "Wrong size on BED_FSMNode_GI_Loading_ECSWorldReset_PostPropertyChanged");
//static_assert(offsetof(BED_FSMNode_GI_Loading_ECSWorldReset_PostPropertyChanged, MemberName) == 0x000000, "Member 'BED_FSMNode_GI_Loading_ECSWorldReset_PostPropertyChanged::MemberName' has a wrong offset!");
//static_assert(offsetof(BED_FSMNode_GI_Loading_ECSWorldReset_PostPropertyChanged, PropertyName) == 0x000010, "Member 'BED_FSMNode_GI_Loading_ECSWorldReset_PostPropertyChanged::PropertyName' has a wrong offset!");

// Function b1-Managed.BED_FSMNode_GI_Loading_ECSWorldReset.GetNodeDescriptionInCS
// 0x0010 (0x0010 - 0x0000)
struct BED_FSMNode_GI_Loading_ECSWorldReset_GetNodeDescriptionInCS final
{
public:
	class FString                                 ReturnValue;                                       // 0x0000(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash)
};
//static_assert(alignof(BED_FSMNode_GI_Loading_ECSWorldReset_GetNodeDescriptionInCS) == 0x000008, "Wrong alignment on BED_FSMNode_GI_Loading_ECSWorldReset_GetNodeDescriptionInCS");
//static_assert(sizeof(BED_FSMNode_GI_Loading_ECSWorldReset_GetNodeDescriptionInCS) == 0x000010, "Wrong size on BED_FSMNode_GI_Loading_ECSWorldReset_GetNodeDescriptionInCS");
//static_assert(offsetof(BED_FSMNode_GI_Loading_ECSWorldReset_GetNodeDescriptionInCS, ReturnValue) == 0x000000, "Member 'BED_FSMNode_GI_Loading_ECSWorldReset_GetNodeDescriptionInCS::ReturnValue' has a wrong offset!");

// Function b1-Managed.FunctionBinder_AudioSystem.RoomSetSwitch
// 0x0020 (0x0020 - 0x0000)
struct FunctionBinder_AudioSystem_RoomSetSwitch final
{
public:
	class FString                                 SwitchGroup;                                       // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash)
	class FString                                 SwitchState;                                       // 0x0010(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash)
};
//static_assert(alignof(FunctionBinder_AudioSystem_RoomSetSwitch) == 0x000008, "Wrong alignment on FunctionBinder_AudioSystem_RoomSetSwitch");
//static_assert(sizeof(FunctionBinder_AudioSystem_RoomSetSwitch) == 0x000020, "Wrong size on FunctionBinder_AudioSystem_RoomSetSwitch");
//static_assert(offsetof(FunctionBinder_AudioSystem_RoomSetSwitch, SwitchGroup) == 0x000000, "Member 'FunctionBinder_AudioSystem_RoomSetSwitch::SwitchGroup' has a wrong offset!");
//static_assert(offsetof(FunctionBinder_AudioSystem_RoomSetSwitch, SwitchState) == 0x000010, "Member 'FunctionBinder_AudioSystem_RoomSetSwitch::SwitchState' has a wrong offset!");

// Function b1-Managed.BED_FSMNode_GI_Global_InBattleOnLineLS.PostPropertyChanged
// 0x0020 (0x0020 - 0x0000)
struct BED_FSMNode_GI_Global_InBattleOnLineLS_PostPropertyChanged final
{
public:
	class FString                                 MemberName;                                        // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash)
	class FString                                 PropertyName;                                      // 0x0010(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash)
};
//static_assert(alignof(BED_FSMNode_GI_Global_InBattleOnLineLS_PostPropertyChanged) == 0x000008, "Wrong alignment on BED_FSMNode_GI_Global_InBattleOnLineLS_PostPropertyChanged");
//static_assert(sizeof(BED_FSMNode_GI_Global_InBattleOnLineLS_PostPropertyChanged) == 0x000020, "Wrong size on BED_FSMNode_GI_Global_InBattleOnLineLS_PostPropertyChanged");
//static_assert(offsetof(BED_FSMNode_GI_Global_InBattleOnLineLS_PostPropertyChanged, MemberName) == 0x000000, "Member 'BED_FSMNode_GI_Global_InBattleOnLineLS_PostPropertyChanged::MemberName' has a wrong offset!");
//static_assert(offsetof(BED_FSMNode_GI_Global_InBattleOnLineLS_PostPropertyChanged, PropertyName) == 0x000010, "Member 'BED_FSMNode_GI_Global_InBattleOnLineLS_PostPropertyChanged::PropertyName' has a wrong offset!");

// Function b1-Managed.BED_FSMNode_GI_Global_InBattleOnLineLS.GetNodeDescriptionInCS
// 0x0010 (0x0010 - 0x0000)
struct BED_FSMNode_GI_Global_InBattleOnLineLS_GetNodeDescriptionInCS final
{
public:
	class FString                                 ReturnValue;                                       // 0x0000(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash)
};
//static_assert(alignof(BED_FSMNode_GI_Global_InBattleOnLineLS_GetNodeDescriptionInCS) == 0x000008, "Wrong alignment on BED_FSMNode_GI_Global_InBattleOnLineLS_GetNodeDescriptionInCS");
//static_assert(sizeof(BED_FSMNode_GI_Global_InBattleOnLineLS_GetNodeDescriptionInCS) == 0x000010, "Wrong size on BED_FSMNode_GI_Global_InBattleOnLineLS_GetNodeDescriptionInCS");
//static_assert(offsetof(BED_FSMNode_GI_Global_InBattleOnLineLS_GetNodeDescriptionInCS, ReturnValue) == 0x000000, "Member 'BED_FSMNode_GI_Global_InBattleOnLineLS_GetNodeDescriptionInCS::ReturnValue' has a wrong offset!");

// Function b1-Managed.BANS_GSTouchItem.GSNotifyBeginCS
// 0x0048 (0x0048 - 0x0000)
struct BANS_GSTouchItem_GSNotifyBeginCS final
{
public:
	struct FUStGSNotifyParam                      NotifyParam;                                       // 0x0000(0x0040)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
	float                                         TotalDuration;                                     // 0x0040(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
//static_assert(alignof(BANS_GSTouchItem_GSNotifyBeginCS) == 0x000008, "Wrong alignment on BANS_GSTouchItem_GSNotifyBeginCS");
//static_assert(sizeof(BANS_GSTouchItem_GSNotifyBeginCS) == 0x000048, "Wrong size on BANS_GSTouchItem_GSNotifyBeginCS");
//static_assert(offsetof(BANS_GSTouchItem_GSNotifyBeginCS, NotifyParam) == 0x000000, "Member 'BANS_GSTouchItem_GSNotifyBeginCS::NotifyParam' has a wrong offset!");
//static_assert(offsetof(BANS_GSTouchItem_GSNotifyBeginCS, TotalDuration) == 0x000040, "Member 'BANS_GSTouchItem_GSNotifyBeginCS::TotalDuration' has a wrong offset!");

// Function b1-Managed.BANS_GSTouchItem.GSNotifyTickCS
// 0x0048 (0x0048 - 0x0000)
struct BANS_GSTouchItem_GSNotifyTickCS final
{
public:
	struct FUStGSNotifyParam                      NotifyParam;                                       // 0x0000(0x0040)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
	float                                         FrameDeltaTime;                                    // 0x0040(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
//static_assert(alignof(BANS_GSTouchItem_GSNotifyTickCS) == 0x000008, "Wrong alignment on BANS_GSTouchItem_GSNotifyTickCS");
//static_assert(sizeof(BANS_GSTouchItem_GSNotifyTickCS) == 0x000048, "Wrong size on BANS_GSTouchItem_GSNotifyTickCS");
//static_assert(offsetof(BANS_GSTouchItem_GSNotifyTickCS, NotifyParam) == 0x000000, "Member 'BANS_GSTouchItem_GSNotifyTickCS::NotifyParam' has a wrong offset!");
//static_assert(offsetof(BANS_GSTouchItem_GSNotifyTickCS, FrameDeltaTime) == 0x000040, "Member 'BANS_GSTouchItem_GSNotifyTickCS::FrameDeltaTime' has a wrong offset!");

// Function b1-Managed.BANS_GSTouchItem.GSNotifyEndCS
// 0x0040 (0x0040 - 0x0000)
struct BANS_GSTouchItem_GSNotifyEndCS final
{
public:
	struct FUStGSNotifyParam                      NotifyParam;                                       // 0x0000(0x0040)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
//static_assert(alignof(BANS_GSTouchItem_GSNotifyEndCS) == 0x000008, "Wrong alignment on BANS_GSTouchItem_GSNotifyEndCS");
//static_assert(sizeof(BANS_GSTouchItem_GSNotifyEndCS) == 0x000040, "Wrong size on BANS_GSTouchItem_GSNotifyEndCS");
//static_assert(offsetof(BANS_GSTouchItem_GSNotifyEndCS, NotifyParam) == 0x000000, "Member 'BANS_GSTouchItem_GSNotifyEndCS::NotifyParam' has a wrong offset!");

// Function b1-Managed.BED_FSMNode_GI_GlobalAnyState.PostPropertyChanged
// 0x0020 (0x0020 - 0x0000)
struct BED_FSMNode_GI_GlobalAnyState_PostPropertyChanged final
{
public:
	class FString                                 MemberName;                                        // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash)
	class FString                                 PropertyName;                                      // 0x0010(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash)
};
//static_assert(alignof(BED_FSMNode_GI_GlobalAnyState_PostPropertyChanged) == 0x000008, "Wrong alignment on BED_FSMNode_GI_GlobalAnyState_PostPropertyChanged");
//static_assert(sizeof(BED_FSMNode_GI_GlobalAnyState_PostPropertyChanged) == 0x000020, "Wrong size on BED_FSMNode_GI_GlobalAnyState_PostPropertyChanged");
//static_assert(offsetof(BED_FSMNode_GI_GlobalAnyState_PostPropertyChanged, MemberName) == 0x000000, "Member 'BED_FSMNode_GI_GlobalAnyState_PostPropertyChanged::MemberName' has a wrong offset!");
//static_assert(offsetof(BED_FSMNode_GI_GlobalAnyState_PostPropertyChanged, PropertyName) == 0x000010, "Member 'BED_FSMNode_GI_GlobalAnyState_PostPropertyChanged::PropertyName' has a wrong offset!");

// Function b1-Managed.BANS_GSCameraFixedParam.GSNotifyBeginCS
// 0x0048 (0x0048 - 0x0000)
struct BANS_GSCameraFixedParam_GSNotifyBeginCS final
{
public:
	struct FUStGSNotifyParam                      NotifyParam;                                       // 0x0000(0x0040)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
	float                                         TotalDuration;                                     // 0x0040(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
//static_assert(alignof(BANS_GSCameraFixedParam_GSNotifyBeginCS) == 0x000008, "Wrong alignment on BANS_GSCameraFixedParam_GSNotifyBeginCS");
//static_assert(sizeof(BANS_GSCameraFixedParam_GSNotifyBeginCS) == 0x000048, "Wrong size on BANS_GSCameraFixedParam_GSNotifyBeginCS");
//static_assert(offsetof(BANS_GSCameraFixedParam_GSNotifyBeginCS, NotifyParam) == 0x000000, "Member 'BANS_GSCameraFixedParam_GSNotifyBeginCS::NotifyParam' has a wrong offset!");
//static_assert(offsetof(BANS_GSCameraFixedParam_GSNotifyBeginCS, TotalDuration) == 0x000040, "Member 'BANS_GSCameraFixedParam_GSNotifyBeginCS::TotalDuration' has a wrong offset!");

// Function b1-Managed.BANS_GSCameraFixedParam.GSNotifyEndCS
// 0x0040 (0x0040 - 0x0000)
struct BANS_GSCameraFixedParam_GSNotifyEndCS final
{
public:
	struct FUStGSNotifyParam                      NotifyParam;                                       // 0x0000(0x0040)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
//static_assert(alignof(BANS_GSCameraFixedParam_GSNotifyEndCS) == 0x000008, "Wrong alignment on BANS_GSCameraFixedParam_GSNotifyEndCS");
//static_assert(sizeof(BANS_GSCameraFixedParam_GSNotifyEndCS) == 0x000040, "Wrong size on BANS_GSCameraFixedParam_GSNotifyEndCS");
//static_assert(offsetof(BANS_GSCameraFixedParam_GSNotifyEndCS, NotifyParam) == 0x000000, "Member 'BANS_GSCameraFixedParam_GSNotifyEndCS::NotifyParam' has a wrong offset!");

// Function b1-Managed.BED_QuestNode_LogicalAnd.CanUserAddInputInCS
// 0x0001 (0x0001 - 0x0000)
struct BED_QuestNode_LogicalAnd_CanUserAddInputInCS final
{
public:
	uint8                                         ReturnValue : 1;                                   // 0x0000(0x0001)(BitIndex: 0x00, PropSize: 0x0001 (Parm, OutParm, ReturnParm, NoDestructor, HasGetValueTypeHash))
};
//static_assert(alignof(BED_QuestNode_LogicalAnd_CanUserAddInputInCS) == 0x000001, "Wrong alignment on BED_QuestNode_LogicalAnd_CanUserAddInputInCS");
//static_assert(sizeof(BED_QuestNode_LogicalAnd_CanUserAddInputInCS) == 0x000001, "Wrong size on BED_QuestNode_LogicalAnd_CanUserAddInputInCS");

// Function b1-Managed.BED_FSMNode_GI_Global_SubG_GI_Global_WXLogin.GetNodeDescriptionInCS
// 0x0010 (0x0010 - 0x0000)
struct BED_FSMNode_GI_Global_SubG_GI_Global_WXLogin_GetNodeDescriptionInCS final
{
public:
	class FString                                 ReturnValue;                                       // 0x0000(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash)
};
//static_assert(alignof(BED_FSMNode_GI_Global_SubG_GI_Global_WXLogin_GetNodeDescriptionInCS) == 0x000008, "Wrong alignment on BED_FSMNode_GI_Global_SubG_GI_Global_WXLogin_GetNodeDescriptionInCS");
//static_assert(sizeof(BED_FSMNode_GI_Global_SubG_GI_Global_WXLogin_GetNodeDescriptionInCS) == 0x000010, "Wrong size on BED_FSMNode_GI_Global_SubG_GI_Global_WXLogin_GetNodeDescriptionInCS");
//static_assert(offsetof(BED_FSMNode_GI_Global_SubG_GI_Global_WXLogin_GetNodeDescriptionInCS, ReturnValue) == 0x000000, "Member 'BED_FSMNode_GI_Global_SubG_GI_Global_WXLogin_GetNodeDescriptionInCS::ReturnValue' has a wrong offset!");

// Function b1-Managed.ListViewDemoEntryWidget.OnItemSelectionChangedCallback
// 0x0001 (0x0001 - 0x0000)
struct ListViewDemoEntryWidget_OnItemSelectionChangedCallback final
{
public:
	uint8                                         IsSelected : 1;                                    // 0x0000(0x0001)(BitIndex: 0x00, PropSize: 0x0001 (Parm, NoDestructor, HasGetValueTypeHash))
};
//static_assert(alignof(ListViewDemoEntryWidget_OnItemSelectionChangedCallback) == 0x000001, "Wrong alignment on ListViewDemoEntryWidget_OnItemSelectionChangedCallback");
//static_assert(sizeof(ListViewDemoEntryWidget_OnItemSelectionChangedCallback) == 0x000001, "Wrong size on ListViewDemoEntryWidget_OnItemSelectionChangedCallback");

// Function b1-Managed.ListViewDemoEntryWidget.OnListItemObjectSetCallback
// 0x0008 (0x0008 - 0x0000)
struct ListViewDemoEntryWidget_OnListItemObjectSetCallback final
{
public:
	class UObject*                                ListItemObject;                                    // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
//static_assert(alignof(ListViewDemoEntryWidget_OnListItemObjectSetCallback) == 0x000008, "Wrong alignment on ListViewDemoEntryWidget_OnListItemObjectSetCallback");
//static_assert(sizeof(ListViewDemoEntryWidget_OnListItemObjectSetCallback) == 0x000008, "Wrong size on ListViewDemoEntryWidget_OnListItemObjectSetCallback");
//static_assert(offsetof(ListViewDemoEntryWidget_OnListItemObjectSetCallback, ListItemObject) == 0x000000, "Member 'ListViewDemoEntryWidget_OnListItemObjectSetCallback::ListItemObject' has a wrong offset!");

// Function b1-Managed.BED_FSMNode_GI_Global_InBattleOnLineClient.PostPropertyChanged
// 0x0020 (0x0020 - 0x0000)
struct BED_FSMNode_GI_Global_InBattleOnLineClient_PostPropertyChanged final
{
public:
	class FString                                 MemberName;                                        // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash)
	class FString                                 PropertyName;                                      // 0x0010(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash)
};
//static_assert(alignof(BED_FSMNode_GI_Global_InBattleOnLineClient_PostPropertyChanged) == 0x000008, "Wrong alignment on BED_FSMNode_GI_Global_InBattleOnLineClient_PostPropertyChanged");
//static_assert(sizeof(BED_FSMNode_GI_Global_InBattleOnLineClient_PostPropertyChanged) == 0x000020, "Wrong size on BED_FSMNode_GI_Global_InBattleOnLineClient_PostPropertyChanged");
//static_assert(offsetof(BED_FSMNode_GI_Global_InBattleOnLineClient_PostPropertyChanged, MemberName) == 0x000000, "Member 'BED_FSMNode_GI_Global_InBattleOnLineClient_PostPropertyChanged::MemberName' has a wrong offset!");
//static_assert(offsetof(BED_FSMNode_GI_Global_InBattleOnLineClient_PostPropertyChanged, PropertyName) == 0x000010, "Member 'BED_FSMNode_GI_Global_InBattleOnLineClient_PostPropertyChanged::PropertyName' has a wrong offset!");

// Function b1-Managed.BED_FSMNode_GI_Global_InBattleOnLineClient.GetNodeDescriptionInCS
// 0x0010 (0x0010 - 0x0000)
struct BED_FSMNode_GI_Global_InBattleOnLineClient_GetNodeDescriptionInCS final
{
public:
	class FString                                 ReturnValue;                                       // 0x0000(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash)
};
//static_assert(alignof(BED_FSMNode_GI_Global_InBattleOnLineClient_GetNodeDescriptionInCS) == 0x000008, "Wrong alignment on BED_FSMNode_GI_Global_InBattleOnLineClient_GetNodeDescriptionInCS");
//static_assert(sizeof(BED_FSMNode_GI_Global_InBattleOnLineClient_GetNodeDescriptionInCS) == 0x000010, "Wrong size on BED_FSMNode_GI_Global_InBattleOnLineClient_GetNodeDescriptionInCS");
//static_assert(offsetof(BED_FSMNode_GI_Global_InBattleOnLineClient_GetNodeDescriptionInCS, ReturnValue) == 0x000000, "Member 'BED_FSMNode_GI_Global_InBattleOnLineClient_GetNodeDescriptionInCS::ReturnValue' has a wrong offset!");

// Function b1-Managed.BED_FSMNode_GI_Loading_OpenLoadingScreen.PostPropertyChanged
// 0x0020 (0x0020 - 0x0000)
struct BED_FSMNode_GI_Loading_OpenLoadingScreen_PostPropertyChanged final
{
public:
	class FString                                 MemberName;                                        // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash)
	class FString                                 PropertyName;                                      // 0x0010(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash)
};
//static_assert(alignof(BED_FSMNode_GI_Loading_OpenLoadingScreen_PostPropertyChanged) == 0x000008, "Wrong alignment on BED_FSMNode_GI_Loading_OpenLoadingScreen_PostPropertyChanged");
//static_assert(sizeof(BED_FSMNode_GI_Loading_OpenLoadingScreen_PostPropertyChanged) == 0x000020, "Wrong size on BED_FSMNode_GI_Loading_OpenLoadingScreen_PostPropertyChanged");
//static_assert(offsetof(BED_FSMNode_GI_Loading_OpenLoadingScreen_PostPropertyChanged, MemberName) == 0x000000, "Member 'BED_FSMNode_GI_Loading_OpenLoadingScreen_PostPropertyChanged::MemberName' has a wrong offset!");
//static_assert(offsetof(BED_FSMNode_GI_Loading_OpenLoadingScreen_PostPropertyChanged, PropertyName) == 0x000010, "Member 'BED_FSMNode_GI_Loading_OpenLoadingScreen_PostPropertyChanged::PropertyName' has a wrong offset!");

// Function b1-Managed.BED_FSMNode_GI_Loading_OpenLoadingScreen.GetNodeDescriptionInCS
// 0x0010 (0x0010 - 0x0000)
struct BED_FSMNode_GI_Loading_OpenLoadingScreen_GetNodeDescriptionInCS final
{
public:
	class FString                                 ReturnValue;                                       // 0x0000(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash)
};
//static_assert(alignof(BED_FSMNode_GI_Loading_OpenLoadingScreen_GetNodeDescriptionInCS) == 0x000008, "Wrong alignment on BED_FSMNode_GI_Loading_OpenLoadingScreen_GetNodeDescriptionInCS");
//static_assert(sizeof(BED_FSMNode_GI_Loading_OpenLoadingScreen_GetNodeDescriptionInCS) == 0x000010, "Wrong size on BED_FSMNode_GI_Loading_OpenLoadingScreen_GetNodeDescriptionInCS");
//static_assert(offsetof(BED_FSMNode_GI_Loading_OpenLoadingScreen_GetNodeDescriptionInCS, ReturnValue) == 0x000000, "Member 'BED_FSMNode_GI_Loading_OpenLoadingScreen_GetNodeDescriptionInCS::ReturnValue' has a wrong offset!");

// Function b1-Managed.BED_FSMNode_GI_Global_InBattleStandAlone.PostPropertyChanged
// 0x0020 (0x0020 - 0x0000)
struct BED_FSMNode_GI_Global_InBattleStandAlone_PostPropertyChanged final
{
public:
	class FString                                 MemberName;                                        // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash)
	class FString                                 PropertyName;                                      // 0x0010(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash)
};
//static_assert(alignof(BED_FSMNode_GI_Global_InBattleStandAlone_PostPropertyChanged) == 0x000008, "Wrong alignment on BED_FSMNode_GI_Global_InBattleStandAlone_PostPropertyChanged");
//static_assert(sizeof(BED_FSMNode_GI_Global_InBattleStandAlone_PostPropertyChanged) == 0x000020, "Wrong size on BED_FSMNode_GI_Global_InBattleStandAlone_PostPropertyChanged");
//static_assert(offsetof(BED_FSMNode_GI_Global_InBattleStandAlone_PostPropertyChanged, MemberName) == 0x000000, "Member 'BED_FSMNode_GI_Global_InBattleStandAlone_PostPropertyChanged::MemberName' has a wrong offset!");
//static_assert(offsetof(BED_FSMNode_GI_Global_InBattleStandAlone_PostPropertyChanged, PropertyName) == 0x000010, "Member 'BED_FSMNode_GI_Global_InBattleStandAlone_PostPropertyChanged::PropertyName' has a wrong offset!");

// Function b1-Managed.BED_FSMNode_GI_Global_InBattleStandAlone.GetNodeDescriptionInCS
// 0x0010 (0x0010 - 0x0000)
struct BED_FSMNode_GI_Global_InBattleStandAlone_GetNodeDescriptionInCS final
{
public:
	class FString                                 ReturnValue;                                       // 0x0000(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash)
};
//static_assert(alignof(BED_FSMNode_GI_Global_InBattleStandAlone_GetNodeDescriptionInCS) == 0x000008, "Wrong alignment on BED_FSMNode_GI_Global_InBattleStandAlone_GetNodeDescriptionInCS");
//static_assert(sizeof(BED_FSMNode_GI_Global_InBattleStandAlone_GetNodeDescriptionInCS) == 0x000010, "Wrong size on BED_FSMNode_GI_Global_InBattleStandAlone_GetNodeDescriptionInCS");
//static_assert(offsetof(BED_FSMNode_GI_Global_InBattleStandAlone_GetNodeDescriptionInCS, ReturnValue) == 0x000000, "Member 'BED_FSMNode_GI_Global_InBattleStandAlone_GetNodeDescriptionInCS::ReturnValue' has a wrong offset!");

// Function b1-Managed.BED_FSMNode_GI_Global_SubG_GI_Loading_InitWXLogin.GetNodeDescriptionInCS
// 0x0010 (0x0010 - 0x0000)
struct BED_FSMNode_GI_Global_SubG_GI_Loading_InitWXLogin_GetNodeDescriptionInCS final
{
public:
	class FString                                 ReturnValue;                                       // 0x0000(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash)
};
//static_assert(alignof(BED_FSMNode_GI_Global_SubG_GI_Loading_InitWXLogin_GetNodeDescriptionInCS) == 0x000008, "Wrong alignment on BED_FSMNode_GI_Global_SubG_GI_Loading_InitWXLogin_GetNodeDescriptionInCS");
//static_assert(sizeof(BED_FSMNode_GI_Global_SubG_GI_Loading_InitWXLogin_GetNodeDescriptionInCS) == 0x000010, "Wrong size on BED_FSMNode_GI_Global_SubG_GI_Loading_InitWXLogin_GetNodeDescriptionInCS");
//static_assert(offsetof(BED_FSMNode_GI_Global_SubG_GI_Loading_InitWXLogin_GetNodeDescriptionInCS, ReturnValue) == 0x000000, "Member 'BED_FSMNode_GI_Global_SubG_GI_Loading_InitWXLogin_GetNodeDescriptionInCS::ReturnValue' has a wrong offset!");

// Function b1-Managed.BED_DialogueNode_OnPlayerApproached.GetNodeDescriptionInCS
// 0x0010 (0x0010 - 0x0000)
struct BED_DialogueNode_OnPlayerApproached_GetNodeDescriptionInCS final
{
public:
	class FString                                 ReturnValue;                                       // 0x0000(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash)
};
//static_assert(alignof(BED_DialogueNode_OnPlayerApproached_GetNodeDescriptionInCS) == 0x000008, "Wrong alignment on BED_DialogueNode_OnPlayerApproached_GetNodeDescriptionInCS");
//static_assert(sizeof(BED_DialogueNode_OnPlayerApproached_GetNodeDescriptionInCS) == 0x000010, "Wrong size on BED_DialogueNode_OnPlayerApproached_GetNodeDescriptionInCS");
//static_assert(offsetof(BED_DialogueNode_OnPlayerApproached_GetNodeDescriptionInCS, ReturnValue) == 0x000000, "Member 'BED_DialogueNode_OnPlayerApproached_GetNodeDescriptionInCS::ReturnValue' has a wrong offset!");

// Function b1-Managed.BED_DialogueNode_OnPlayerApproached.IsSupportViewType
// 0x0002 (0x0002 - 0x0000)
struct BED_DialogueNode_OnPlayerApproached_IsSupportViewType final
{
public:
	ECalliopeViewType                             InViewType;                                        // 0x0000(0x0001)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         ReturnValue : 1;                                   // 0x0001(0x0001)(BitIndex: 0x00, PropSize: 0x0001 (Parm, OutParm, ReturnParm, NoDestructor, HasGetValueTypeHash))
};
//static_assert(alignof(BED_DialogueNode_OnPlayerApproached_IsSupportViewType) == 0x000001, "Wrong alignment on BED_DialogueNode_OnPlayerApproached_IsSupportViewType");
//static_assert(sizeof(BED_DialogueNode_OnPlayerApproached_IsSupportViewType) == 0x000002, "Wrong size on BED_DialogueNode_OnPlayerApproached_IsSupportViewType");
//static_assert(offsetof(BED_DialogueNode_OnPlayerApproached_IsSupportViewType, InViewType) == 0x000000, "Member 'BED_DialogueNode_OnPlayerApproached_IsSupportViewType::InViewType' has a wrong offset!");

// Function b1-Managed.BED_FSMNode_GI_Global_WaitGameStart.PostPropertyChanged
// 0x0020 (0x0020 - 0x0000)
struct BED_FSMNode_GI_Global_WaitGameStart_PostPropertyChanged final
{
public:
	class FString                                 MemberName;                                        // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash)
	class FString                                 PropertyName;                                      // 0x0010(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash)
};
//static_assert(alignof(BED_FSMNode_GI_Global_WaitGameStart_PostPropertyChanged) == 0x000008, "Wrong alignment on BED_FSMNode_GI_Global_WaitGameStart_PostPropertyChanged");
//static_assert(sizeof(BED_FSMNode_GI_Global_WaitGameStart_PostPropertyChanged) == 0x000020, "Wrong size on BED_FSMNode_GI_Global_WaitGameStart_PostPropertyChanged");
//static_assert(offsetof(BED_FSMNode_GI_Global_WaitGameStart_PostPropertyChanged, MemberName) == 0x000000, "Member 'BED_FSMNode_GI_Global_WaitGameStart_PostPropertyChanged::MemberName' has a wrong offset!");
//static_assert(offsetof(BED_FSMNode_GI_Global_WaitGameStart_PostPropertyChanged, PropertyName) == 0x000010, "Member 'BED_FSMNode_GI_Global_WaitGameStart_PostPropertyChanged::PropertyName' has a wrong offset!");

// Function b1-Managed.BED_FSMNode_GI_Global_WaitGameStart.GetNodeDescriptionInCS
// 0x0010 (0x0010 - 0x0000)
struct BED_FSMNode_GI_Global_WaitGameStart_GetNodeDescriptionInCS final
{
public:
	class FString                                 ReturnValue;                                       // 0x0000(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash)
};
//static_assert(alignof(BED_FSMNode_GI_Global_WaitGameStart_GetNodeDescriptionInCS) == 0x000008, "Wrong alignment on BED_FSMNode_GI_Global_WaitGameStart_GetNodeDescriptionInCS");
//static_assert(sizeof(BED_FSMNode_GI_Global_WaitGameStart_GetNodeDescriptionInCS) == 0x000010, "Wrong size on BED_FSMNode_GI_Global_WaitGameStart_GetNodeDescriptionInCS");
//static_assert(offsetof(BED_FSMNode_GI_Global_WaitGameStart_GetNodeDescriptionInCS, ReturnValue) == 0x000000, "Member 'BED_FSMNode_GI_Global_WaitGameStart_GetNodeDescriptionInCS::ReturnValue' has a wrong offset!");

// Function b1-Managed.BED_FSMNode_GI_Global_SubG_GI_Loading_ServerLogin.GetNodeDescriptionInCS
// 0x0010 (0x0010 - 0x0000)
struct BED_FSMNode_GI_Global_SubG_GI_Loading_ServerLogin_GetNodeDescriptionInCS final
{
public:
	class FString                                 ReturnValue;                                       // 0x0000(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash)
};
//static_assert(alignof(BED_FSMNode_GI_Global_SubG_GI_Loading_ServerLogin_GetNodeDescriptionInCS) == 0x000008, "Wrong alignment on BED_FSMNode_GI_Global_SubG_GI_Loading_ServerLogin_GetNodeDescriptionInCS");
//static_assert(sizeof(BED_FSMNode_GI_Global_SubG_GI_Loading_ServerLogin_GetNodeDescriptionInCS) == 0x000010, "Wrong size on BED_FSMNode_GI_Global_SubG_GI_Loading_ServerLogin_GetNodeDescriptionInCS");
//static_assert(offsetof(BED_FSMNode_GI_Global_SubG_GI_Loading_ServerLogin_GetNodeDescriptionInCS, ReturnValue) == 0x000000, "Member 'BED_FSMNode_GI_Global_SubG_GI_Loading_ServerLogin_GetNodeDescriptionInCS::ReturnValue' has a wrong offset!");

// Function b1-Managed.BGUNvFlowCameraBlockLogic.ReceiveTick
// 0x0004 (0x0004 - 0x0000)
struct BGUNvFlowCameraBlockLogic_ReceiveTick final
{
public:
	float                                         DeltaSeconds;                                      // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
//static_assert(alignof(BGUNvFlowCameraBlockLogic_ReceiveTick) == 0x000004, "Wrong alignment on BGUNvFlowCameraBlockLogic_ReceiveTick");
//static_assert(sizeof(BGUNvFlowCameraBlockLogic_ReceiveTick) == 0x000004, "Wrong size on BGUNvFlowCameraBlockLogic_ReceiveTick");
//static_assert(offsetof(BGUNvFlowCameraBlockLogic_ReceiveTick, DeltaSeconds) == 0x000000, "Member 'BGUNvFlowCameraBlockLogic_ReceiveTick::DeltaSeconds' has a wrong offset!");

// Function b1-Managed.BGUNvFlowCameraBlockLogic.Init
// 0x0018 (0x0018 - 0x0000)
struct BGUNvFlowCameraBlockLogic_Init final
{
public:
	class USceneComponent*                        Cam;                                               // 0x0000(0x0008)(ExportObject, Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class USceneComponent*                        Actor;                                             // 0x0008(0x0008)(ExportObject, Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UCapsuleComponent*                      Blocker;                                           // 0x0010(0x0008)(ExportObject, Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
//static_assert(alignof(BGUNvFlowCameraBlockLogic_Init) == 0x000008, "Wrong alignment on BGUNvFlowCameraBlockLogic_Init");
//static_assert(sizeof(BGUNvFlowCameraBlockLogic_Init) == 0x000018, "Wrong size on BGUNvFlowCameraBlockLogic_Init");
//static_assert(offsetof(BGUNvFlowCameraBlockLogic_Init, Cam) == 0x000000, "Member 'BGUNvFlowCameraBlockLogic_Init::Cam' has a wrong offset!");
//static_assert(offsetof(BGUNvFlowCameraBlockLogic_Init, Actor) == 0x000008, "Member 'BGUNvFlowCameraBlockLogic_Init::Actor' has a wrong offset!");
//static_assert(offsetof(BGUNvFlowCameraBlockLogic_Init, Blocker) == 0x000010, "Member 'BGUNvFlowCameraBlockLogic_Init::Blocker' has a wrong offset!");

// Function b1-Managed.BGUDialogueProxyActor.OnConstructionCS
// 0x0060 (0x0060 - 0x0000)
struct BGUDialogueProxyActor_OnConstructionCS final
{
public:
	struct FTransform                             Transform;                                         // 0x0000(0x0060)(ConstParm, Parm, OutParm, ReferenceParm, IsPlainOldData, NoDestructor)
};
//static_assert(alignof(BGUDialogueProxyActor_OnConstructionCS) == 0x000010, "Wrong alignment on BGUDialogueProxyActor_OnConstructionCS");
//static_assert(sizeof(BGUDialogueProxyActor_OnConstructionCS) == 0x000060, "Wrong size on BGUDialogueProxyActor_OnConstructionCS");
//static_assert(offsetof(BGUDialogueProxyActor_OnConstructionCS, Transform) == 0x000000, "Member 'BGUDialogueProxyActor_OnConstructionCS::Transform' has a wrong offset!");

// Function b1-Managed.BGUAiWeakInteractionActorBase.OnConstructionCS
// 0x0060 (0x0060 - 0x0000)
struct BGUAiWeakInteractionActorBase_OnConstructionCS final
{
public:
	struct FTransform                             Transform;                                         // 0x0000(0x0060)(ConstParm, Parm, OutParm, ReferenceParm, IsPlainOldData, NoDestructor)
};
//static_assert(alignof(BGUAiWeakInteractionActorBase_OnConstructionCS) == 0x000010, "Wrong alignment on BGUAiWeakInteractionActorBase_OnConstructionCS");
//static_assert(sizeof(BGUAiWeakInteractionActorBase_OnConstructionCS) == 0x000060, "Wrong size on BGUAiWeakInteractionActorBase_OnConstructionCS");
//static_assert(offsetof(BGUAiWeakInteractionActorBase_OnConstructionCS, Transform) == 0x000000, "Member 'BGUAiWeakInteractionActorBase_OnConstructionCS::Transform' has a wrong offset!");

// Function b1-Managed.BED_FSMNode_GI_Loading_CheckArchiveDataIsValid.PostPropertyChanged
// 0x0020 (0x0020 - 0x0000)
struct BED_FSMNode_GI_Loading_CheckArchiveDataIsValid_PostPropertyChanged final
{
public:
	class FString                                 MemberName;                                        // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash)
	class FString                                 PropertyName;                                      // 0x0010(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash)
};
//static_assert(alignof(BED_FSMNode_GI_Loading_CheckArchiveDataIsValid_PostPropertyChanged) == 0x000008, "Wrong alignment on BED_FSMNode_GI_Loading_CheckArchiveDataIsValid_PostPropertyChanged");
//static_assert(sizeof(BED_FSMNode_GI_Loading_CheckArchiveDataIsValid_PostPropertyChanged) == 0x000020, "Wrong size on BED_FSMNode_GI_Loading_CheckArchiveDataIsValid_PostPropertyChanged");
//static_assert(offsetof(BED_FSMNode_GI_Loading_CheckArchiveDataIsValid_PostPropertyChanged, MemberName) == 0x000000, "Member 'BED_FSMNode_GI_Loading_CheckArchiveDataIsValid_PostPropertyChanged::MemberName' has a wrong offset!");
//static_assert(offsetof(BED_FSMNode_GI_Loading_CheckArchiveDataIsValid_PostPropertyChanged, PropertyName) == 0x000010, "Member 'BED_FSMNode_GI_Loading_CheckArchiveDataIsValid_PostPropertyChanged::PropertyName' has a wrong offset!");

// Function b1-Managed.BED_FSMNode_GI_Loading_CheckArchiveDataIsValid.GetNodeDescriptionInCS
// 0x0010 (0x0010 - 0x0000)
struct BED_FSMNode_GI_Loading_CheckArchiveDataIsValid_GetNodeDescriptionInCS final
{
public:
	class FString                                 ReturnValue;                                       // 0x0000(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash)
};
//static_assert(alignof(BED_FSMNode_GI_Loading_CheckArchiveDataIsValid_GetNodeDescriptionInCS) == 0x000008, "Wrong alignment on BED_FSMNode_GI_Loading_CheckArchiveDataIsValid_GetNodeDescriptionInCS");
//static_assert(sizeof(BED_FSMNode_GI_Loading_CheckArchiveDataIsValid_GetNodeDescriptionInCS) == 0x000010, "Wrong size on BED_FSMNode_GI_Loading_CheckArchiveDataIsValid_GetNodeDescriptionInCS");
//static_assert(offsetof(BED_FSMNode_GI_Loading_CheckArchiveDataIsValid_GetNodeDescriptionInCS, ReturnValue) == 0x000000, "Member 'BED_FSMNode_GI_Loading_CheckArchiveDataIsValid_GetNodeDescriptionInCS::ReturnValue' has a wrong offset!");

// Function b1-Managed.BUAnimHumanoidCS.BlueprintThreadSafeUpdateAnimation
// 0x0004 (0x0004 - 0x0000)
struct BUAnimHumanoidCS_BlueprintThreadSafeUpdateAnimation final
{
public:
	float                                         DeltaTimeX;                                        // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
//static_assert(alignof(BUAnimHumanoidCS_BlueprintThreadSafeUpdateAnimation) == 0x000004, "Wrong alignment on BUAnimHumanoidCS_BlueprintThreadSafeUpdateAnimation");
//static_assert(sizeof(BUAnimHumanoidCS_BlueprintThreadSafeUpdateAnimation) == 0x000004, "Wrong size on BUAnimHumanoidCS_BlueprintThreadSafeUpdateAnimation");
//static_assert(offsetof(BUAnimHumanoidCS_BlueprintThreadSafeUpdateAnimation, DeltaTimeX) == 0x000000, "Member 'BUAnimHumanoidCS_BlueprintThreadSafeUpdateAnimation::DeltaTimeX' has a wrong offset!");

// Function b1-Managed.BAN_GSAkEvent.bIsNativeBranchingPointCS
// 0x0001 (0x0001 - 0x0000)
struct BAN_GSAkEvent_bIsNativeBranchingPointCS final
{
public:
	uint8                                         ReturnValue : 1;                                   // 0x0000(0x0001)(BitIndex: 0x00, PropSize: 0x0001 (Parm, OutParm, ReturnParm, NoDestructor, HasGetValueTypeHash))
};
//static_assert(alignof(BAN_GSAkEvent_bIsNativeBranchingPointCS) == 0x000001, "Wrong alignment on BAN_GSAkEvent_bIsNativeBranchingPointCS");
//static_assert(sizeof(BAN_GSAkEvent_bIsNativeBranchingPointCS) == 0x000001, "Wrong size on BAN_GSAkEvent_bIsNativeBranchingPointCS");

// Function b1-Managed.BAN_GSAkEvent.GetSoftReferences
// 0x0010 (0x0010 - 0x0000)
struct BAN_GSAkEvent_GetSoftReferences final
{
public:
	TArray<struct FSoftObjectPath>                ReturnValue;                                       // 0x0000(0x0010)(Parm, OutParm, ReturnParm)
};
//static_assert(alignof(BAN_GSAkEvent_GetSoftReferences) == 0x000008, "Wrong alignment on BAN_GSAkEvent_GetSoftReferences");
//static_assert(sizeof(BAN_GSAkEvent_GetSoftReferences) == 0x000010, "Wrong size on BAN_GSAkEvent_GetSoftReferences");
//static_assert(offsetof(BAN_GSAkEvent_GetSoftReferences, ReturnValue) == 0x000000, "Member 'BAN_GSAkEvent_GetSoftReferences::ReturnValue' has a wrong offset!");

// Function b1-Managed.BAN_GSAkEvent.GSNotifyCS
// 0x0040 (0x0040 - 0x0000)
struct BAN_GSAkEvent_GSNotifyCS final
{
public:
	struct FUStGSNotifyParam                      NotifyParam;                                       // 0x0000(0x0040)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
//static_assert(alignof(BAN_GSAkEvent_GSNotifyCS) == 0x000008, "Wrong alignment on BAN_GSAkEvent_GSNotifyCS");
//static_assert(sizeof(BAN_GSAkEvent_GSNotifyCS) == 0x000040, "Wrong size on BAN_GSAkEvent_GSNotifyCS");
//static_assert(offsetof(BAN_GSAkEvent_GSNotifyCS, NotifyParam) == 0x000000, "Member 'BAN_GSAkEvent_GSNotifyCS::NotifyParam' has a wrong offset!");

// Function b1-Managed.BED_QuestNode_ObserveOnlineCondition.PostPropertyChanged
// 0x0020 (0x0020 - 0x0000)
struct BED_QuestNode_ObserveOnlineCondition_PostPropertyChanged final
{
public:
	class FString                                 MemberName;                                        // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash)
	class FString                                 PropertyName;                                      // 0x0010(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash)
};
//static_assert(alignof(BED_QuestNode_ObserveOnlineCondition_PostPropertyChanged) == 0x000008, "Wrong alignment on BED_QuestNode_ObserveOnlineCondition_PostPropertyChanged");
//static_assert(sizeof(BED_QuestNode_ObserveOnlineCondition_PostPropertyChanged) == 0x000020, "Wrong size on BED_QuestNode_ObserveOnlineCondition_PostPropertyChanged");
//static_assert(offsetof(BED_QuestNode_ObserveOnlineCondition_PostPropertyChanged, MemberName) == 0x000000, "Member 'BED_QuestNode_ObserveOnlineCondition_PostPropertyChanged::MemberName' has a wrong offset!");
//static_assert(offsetof(BED_QuestNode_ObserveOnlineCondition_PostPropertyChanged, PropertyName) == 0x000010, "Member 'BED_QuestNode_ObserveOnlineCondition_PostPropertyChanged::PropertyName' has a wrong offset!");

// Function b1-Managed.BED_QuestNode_ObserveOnlineCondition.GetNodeDescriptionInCS
// 0x0010 (0x0010 - 0x0000)
struct BED_QuestNode_ObserveOnlineCondition_GetNodeDescriptionInCS final
{
public:
	class FString                                 ReturnValue;                                       // 0x0000(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash)
};
//static_assert(alignof(BED_QuestNode_ObserveOnlineCondition_GetNodeDescriptionInCS) == 0x000008, "Wrong alignment on BED_QuestNode_ObserveOnlineCondition_GetNodeDescriptionInCS");
//static_assert(sizeof(BED_QuestNode_ObserveOnlineCondition_GetNodeDescriptionInCS) == 0x000010, "Wrong size on BED_QuestNode_ObserveOnlineCondition_GetNodeDescriptionInCS");
//static_assert(offsetof(BED_QuestNode_ObserveOnlineCondition_GetNodeDescriptionInCS, ReturnValue) == 0x000000, "Member 'BED_QuestNode_ObserveOnlineCondition_GetNodeDescriptionInCS::ReturnValue' has a wrong offset!");

// Function b1-Managed.BED_FSMNode_GI_Global_SubG_GI_Loading_ReplayBattle.GetNodeDescriptionInCS
// 0x0010 (0x0010 - 0x0000)
struct BED_FSMNode_GI_Global_SubG_GI_Loading_ReplayBattle_GetNodeDescriptionInCS final
{
public:
	class FString                                 ReturnValue;                                       // 0x0000(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash)
};
//static_assert(alignof(BED_FSMNode_GI_Global_SubG_GI_Loading_ReplayBattle_GetNodeDescriptionInCS) == 0x000008, "Wrong alignment on BED_FSMNode_GI_Global_SubG_GI_Loading_ReplayBattle_GetNodeDescriptionInCS");
//static_assert(sizeof(BED_FSMNode_GI_Global_SubG_GI_Loading_ReplayBattle_GetNodeDescriptionInCS) == 0x000010, "Wrong size on BED_FSMNode_GI_Global_SubG_GI_Loading_ReplayBattle_GetNodeDescriptionInCS");
//static_assert(offsetof(BED_FSMNode_GI_Global_SubG_GI_Loading_ReplayBattle_GetNodeDescriptionInCS, ReturnValue) == 0x000000, "Member 'BED_FSMNode_GI_Global_SubG_GI_Loading_ReplayBattle_GetNodeDescriptionInCS::ReturnValue' has a wrong offset!");

// Function b1-Managed.BED_FSMNode_GI_Loading_FillIsInToilet.PostPropertyChanged
// 0x0020 (0x0020 - 0x0000)
struct BED_FSMNode_GI_Loading_FillIsInToilet_PostPropertyChanged final
{
public:
	class FString                                 MemberName;                                        // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash)
	class FString                                 PropertyName;                                      // 0x0010(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash)
};
//static_assert(alignof(BED_FSMNode_GI_Loading_FillIsInToilet_PostPropertyChanged) == 0x000008, "Wrong alignment on BED_FSMNode_GI_Loading_FillIsInToilet_PostPropertyChanged");
//static_assert(sizeof(BED_FSMNode_GI_Loading_FillIsInToilet_PostPropertyChanged) == 0x000020, "Wrong size on BED_FSMNode_GI_Loading_FillIsInToilet_PostPropertyChanged");
//static_assert(offsetof(BED_FSMNode_GI_Loading_FillIsInToilet_PostPropertyChanged, MemberName) == 0x000000, "Member 'BED_FSMNode_GI_Loading_FillIsInToilet_PostPropertyChanged::MemberName' has a wrong offset!");
//static_assert(offsetof(BED_FSMNode_GI_Loading_FillIsInToilet_PostPropertyChanged, PropertyName) == 0x000010, "Member 'BED_FSMNode_GI_Loading_FillIsInToilet_PostPropertyChanged::PropertyName' has a wrong offset!");

// Function b1-Managed.BED_FSMNode_GI_Loading_FillIsInToilet.GetNodeDescriptionInCS
// 0x0010 (0x0010 - 0x0000)
struct BED_FSMNode_GI_Loading_FillIsInToilet_GetNodeDescriptionInCS final
{
public:
	class FString                                 ReturnValue;                                       // 0x0000(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash)
};
//static_assert(alignof(BED_FSMNode_GI_Loading_FillIsInToilet_GetNodeDescriptionInCS) == 0x000008, "Wrong alignment on BED_FSMNode_GI_Loading_FillIsInToilet_GetNodeDescriptionInCS");
//static_assert(sizeof(BED_FSMNode_GI_Loading_FillIsInToilet_GetNodeDescriptionInCS) == 0x000010, "Wrong size on BED_FSMNode_GI_Loading_FillIsInToilet_GetNodeDescriptionInCS");
//static_assert(offsetof(BED_FSMNode_GI_Loading_FillIsInToilet_GetNodeDescriptionInCS, ReturnValue) == 0x000000, "Member 'BED_FSMNode_GI_Loading_FillIsInToilet_GetNodeDescriptionInCS::ReturnValue' has a wrong offset!");

// Function b1-Managed.GSEQG_SyncAnimationGuestPointGenerator.DoItemGenerationCS
// 0x0010 (0x0010 - 0x0000)
struct GSEQG_SyncAnimationGuestPointGenerator_DoItemGenerationCS final
{
public:
	TArray<struct FVector>                        ContextLocations;                                  // 0x0000(0x0010)(ConstParm, Parm, OutParm, ReferenceParm)
};
//static_assert(alignof(GSEQG_SyncAnimationGuestPointGenerator_DoItemGenerationCS) == 0x000008, "Wrong alignment on GSEQG_SyncAnimationGuestPointGenerator_DoItemGenerationCS");
//static_assert(sizeof(GSEQG_SyncAnimationGuestPointGenerator_DoItemGenerationCS) == 0x000010, "Wrong size on GSEQG_SyncAnimationGuestPointGenerator_DoItemGenerationCS");
//static_assert(offsetof(GSEQG_SyncAnimationGuestPointGenerator_DoItemGenerationCS, ContextLocations) == 0x000000, "Member 'GSEQG_SyncAnimationGuestPointGenerator_DoItemGenerationCS::ContextLocations' has a wrong offset!");

// Function b1-Managed.BED_QuestNode_GainItemPerformance.GetNodeDescriptionInCS
// 0x0010 (0x0010 - 0x0000)
struct BED_QuestNode_GainItemPerformance_GetNodeDescriptionInCS final
{
public:
	class FString                                 ReturnValue;                                       // 0x0000(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash)
};
//static_assert(alignof(BED_QuestNode_GainItemPerformance_GetNodeDescriptionInCS) == 0x000008, "Wrong alignment on BED_QuestNode_GainItemPerformance_GetNodeDescriptionInCS");
//static_assert(sizeof(BED_QuestNode_GainItemPerformance_GetNodeDescriptionInCS) == 0x000010, "Wrong size on BED_QuestNode_GainItemPerformance_GetNodeDescriptionInCS");
//static_assert(offsetof(BED_QuestNode_GainItemPerformance_GetNodeDescriptionInCS, ReturnValue) == 0x000000, "Member 'BED_QuestNode_GainItemPerformance_GetNodeDescriptionInCS::ReturnValue' has a wrong offset!");

// Function b1-Managed.BED_FSMNode_GI_Loading_CreateNewRoleData.PostPropertyChanged
// 0x0020 (0x0020 - 0x0000)
struct BED_FSMNode_GI_Loading_CreateNewRoleData_PostPropertyChanged final
{
public:
	class FString                                 MemberName;                                        // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash)
	class FString                                 PropertyName;                                      // 0x0010(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash)
};
//static_assert(alignof(BED_FSMNode_GI_Loading_CreateNewRoleData_PostPropertyChanged) == 0x000008, "Wrong alignment on BED_FSMNode_GI_Loading_CreateNewRoleData_PostPropertyChanged");
//static_assert(sizeof(BED_FSMNode_GI_Loading_CreateNewRoleData_PostPropertyChanged) == 0x000020, "Wrong size on BED_FSMNode_GI_Loading_CreateNewRoleData_PostPropertyChanged");
//static_assert(offsetof(BED_FSMNode_GI_Loading_CreateNewRoleData_PostPropertyChanged, MemberName) == 0x000000, "Member 'BED_FSMNode_GI_Loading_CreateNewRoleData_PostPropertyChanged::MemberName' has a wrong offset!");
//static_assert(offsetof(BED_FSMNode_GI_Loading_CreateNewRoleData_PostPropertyChanged, PropertyName) == 0x000010, "Member 'BED_FSMNode_GI_Loading_CreateNewRoleData_PostPropertyChanged::PropertyName' has a wrong offset!");

// Function b1-Managed.BED_FSMNode_GI_Loading_CreateNewRoleData.GetNodeDescriptionInCS
// 0x0010 (0x0010 - 0x0000)
struct BED_FSMNode_GI_Loading_CreateNewRoleData_GetNodeDescriptionInCS final
{
public:
	class FString                                 ReturnValue;                                       // 0x0000(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash)
};
//static_assert(alignof(BED_FSMNode_GI_Loading_CreateNewRoleData_GetNodeDescriptionInCS) == 0x000008, "Wrong alignment on BED_FSMNode_GI_Loading_CreateNewRoleData_GetNodeDescriptionInCS");
//static_assert(sizeof(BED_FSMNode_GI_Loading_CreateNewRoleData_GetNodeDescriptionInCS) == 0x000010, "Wrong size on BED_FSMNode_GI_Loading_CreateNewRoleData_GetNodeDescriptionInCS");
//static_assert(offsetof(BED_FSMNode_GI_Loading_CreateNewRoleData_GetNodeDescriptionInCS, ReturnValue) == 0x000000, "Member 'BED_FSMNode_GI_Loading_CreateNewRoleData_GetNodeDescriptionInCS::ReturnValue' has a wrong offset!");

// Function b1-Managed.BGUFunctionLibraryCS.ProjectWorldLocationToWidgetPositionWithSZInS
// 0x0030 (0x0030 - 0x0000)
struct BGUFunctionLibraryCS_ProjectWorldLocationToWidgetPositionWithSZInS final
{
public:
	class APlayerController*                      PlayerController;                                  // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                WorldPos;                                          // 0x0008(0x0018)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector2D                              ScreenPos;                                         // 0x0020(0x0010)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
//static_assert(alignof(BGUFunctionLibraryCS_ProjectWorldLocationToWidgetPositionWithSZInS) == 0x000008, "Wrong alignment on BGUFunctionLibraryCS_ProjectWorldLocationToWidgetPositionWithSZInS");
//static_assert(sizeof(BGUFunctionLibraryCS_ProjectWorldLocationToWidgetPositionWithSZInS) == 0x000030, "Wrong size on BGUFunctionLibraryCS_ProjectWorldLocationToWidgetPositionWithSZInS");
//static_assert(offsetof(BGUFunctionLibraryCS_ProjectWorldLocationToWidgetPositionWithSZInS, PlayerController) == 0x000000, "Member 'BGUFunctionLibraryCS_ProjectWorldLocationToWidgetPositionWithSZInS::PlayerController' has a wrong offset!");
//static_assert(offsetof(BGUFunctionLibraryCS_ProjectWorldLocationToWidgetPositionWithSZInS, WorldPos) == 0x000008, "Member 'BGUFunctionLibraryCS_ProjectWorldLocationToWidgetPositionWithSZInS::WorldPos' has a wrong offset!");
//static_assert(offsetof(BGUFunctionLibraryCS_ProjectWorldLocationToWidgetPositionWithSZInS, ScreenPos) == 0x000020, "Member 'BGUFunctionLibraryCS_ProjectWorldLocationToWidgetPositionWithSZInS::ScreenPos' has a wrong offset!");

// Function b1-Managed.BGUFunctionLibraryCS.CalTransformRelativeToParentTransformOffset
// 0x0180 (0x0180 - 0x0000)
struct BGUFunctionLibraryCS_CalTransformRelativeToParentTransformOffset final
{
public:
	struct FTransform                             SelfTransform;                                     // 0x0000(0x0060)(Parm, IsPlainOldData, NoDestructor)
	struct FTransform                             ParentTransform;                                   // 0x0060(0x0060)(Parm, IsPlainOldData, NoDestructor)
	struct FTransform                             ParentTransformOffset;                             // 0x00C0(0x0060)(Parm, IsPlainOldData, NoDestructor)
	struct FTransform                             ReturnValue;                                       // 0x0120(0x0060)(Parm, OutParm, ReturnParm, IsPlainOldData, NoDestructor)
};
//static_assert(alignof(BGUFunctionLibraryCS_CalTransformRelativeToParentTransformOffset) == 0x000010, "Wrong alignment on BGUFunctionLibraryCS_CalTransformRelativeToParentTransformOffset");
//static_assert(sizeof(BGUFunctionLibraryCS_CalTransformRelativeToParentTransformOffset) == 0x000180, "Wrong size on BGUFunctionLibraryCS_CalTransformRelativeToParentTransformOffset");
//static_assert(offsetof(BGUFunctionLibraryCS_CalTransformRelativeToParentTransformOffset, SelfTransform) == 0x000000, "Member 'BGUFunctionLibraryCS_CalTransformRelativeToParentTransformOffset::SelfTransform' has a wrong offset!");
//static_assert(offsetof(BGUFunctionLibraryCS_CalTransformRelativeToParentTransformOffset, ParentTransform) == 0x000060, "Member 'BGUFunctionLibraryCS_CalTransformRelativeToParentTransformOffset::ParentTransform' has a wrong offset!");
//static_assert(offsetof(BGUFunctionLibraryCS_CalTransformRelativeToParentTransformOffset, ParentTransformOffset) == 0x0000C0, "Member 'BGUFunctionLibraryCS_CalTransformRelativeToParentTransformOffset::ParentTransformOffset' has a wrong offset!");
//static_assert(offsetof(BGUFunctionLibraryCS_CalTransformRelativeToParentTransformOffset, ReturnValue) == 0x000120, "Member 'BGUFunctionLibraryCS_CalTransformRelativeToParentTransformOffset::ReturnValue' has a wrong offset!");

// Function b1-Managed.BGUFunctionLibraryCS.RotateLevelRelativeToParentTransform
// 0x00D0 (0x00D0 - 0x0000)
struct BGUFunctionLibraryCS_RotateLevelRelativeToParentTransform final
{
public:
	class UObject*                                WorldContextObject;                                // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class FName                                   LevelName;                                         // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FTransform                             ParentTransform;                                   // 0x0010(0x0060)(Parm, IsPlainOldData, NoDestructor)
	struct FTransform                             ParentTransformOffset;                             // 0x0070(0x0060)(Parm, IsPlainOldData, NoDestructor)
};
//static_assert(alignof(BGUFunctionLibraryCS_RotateLevelRelativeToParentTransform) == 0x000010, "Wrong alignment on BGUFunctionLibraryCS_RotateLevelRelativeToParentTransform");
//static_assert(sizeof(BGUFunctionLibraryCS_RotateLevelRelativeToParentTransform) == 0x0000D0, "Wrong size on BGUFunctionLibraryCS_RotateLevelRelativeToParentTransform");
//static_assert(offsetof(BGUFunctionLibraryCS_RotateLevelRelativeToParentTransform, WorldContextObject) == 0x000000, "Member 'BGUFunctionLibraryCS_RotateLevelRelativeToParentTransform::WorldContextObject' has a wrong offset!");
//static_assert(offsetof(BGUFunctionLibraryCS_RotateLevelRelativeToParentTransform, LevelName) == 0x000008, "Member 'BGUFunctionLibraryCS_RotateLevelRelativeToParentTransform::LevelName' has a wrong offset!");
//static_assert(offsetof(BGUFunctionLibraryCS_RotateLevelRelativeToParentTransform, ParentTransform) == 0x000010, "Member 'BGUFunctionLibraryCS_RotateLevelRelativeToParentTransform::ParentTransform' has a wrong offset!");
//static_assert(offsetof(BGUFunctionLibraryCS_RotateLevelRelativeToParentTransform, ParentTransformOffset) == 0x000070, "Member 'BGUFunctionLibraryCS_RotateLevelRelativeToParentTransform::ParentTransformOffset' has a wrong offset!");

// Function b1-Managed.BGUFunctionLibraryCS.ExportTamerListToNewDAByWeaponInfo
// 0x0040 (0x0040 - 0x0000)
struct BGUFunctionLibraryCS_ExportTamerListToNewDAByWeaponInfo final
{
public:
	class AActor*                                 Actor;                                             // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class FString                                 OldTamer;                                          // 0x0008(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash)
	class FString                                 NewTimer;                                          // 0x0018(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash)
	class FString                                 BlameName;                                         // 0x0028(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash)
	uint8                                         ReturnValue : 1;                                   // 0x0038(0x0001)(BitIndex: 0x00, PropSize: 0x0001 (Parm, OutParm, ReturnParm, NoDestructor, HasGetValueTypeHash))
};
//static_assert(alignof(BGUFunctionLibraryCS_ExportTamerListToNewDAByWeaponInfo) == 0x000008, "Wrong alignment on BGUFunctionLibraryCS_ExportTamerListToNewDAByWeaponInfo");
//static_assert(sizeof(BGUFunctionLibraryCS_ExportTamerListToNewDAByWeaponInfo) == 0x000040, "Wrong size on BGUFunctionLibraryCS_ExportTamerListToNewDAByWeaponInfo");
//static_assert(offsetof(BGUFunctionLibraryCS_ExportTamerListToNewDAByWeaponInfo, Actor) == 0x000000, "Member 'BGUFunctionLibraryCS_ExportTamerListToNewDAByWeaponInfo::Actor' has a wrong offset!");
//static_assert(offsetof(BGUFunctionLibraryCS_ExportTamerListToNewDAByWeaponInfo, OldTamer) == 0x000008, "Member 'BGUFunctionLibraryCS_ExportTamerListToNewDAByWeaponInfo::OldTamer' has a wrong offset!");
//static_assert(offsetof(BGUFunctionLibraryCS_ExportTamerListToNewDAByWeaponInfo, NewTimer) == 0x000018, "Member 'BGUFunctionLibraryCS_ExportTamerListToNewDAByWeaponInfo::NewTimer' has a wrong offset!");
//static_assert(offsetof(BGUFunctionLibraryCS_ExportTamerListToNewDAByWeaponInfo, BlameName) == 0x000028, "Member 'BGUFunctionLibraryCS_ExportTamerListToNewDAByWeaponInfo::BlameName' has a wrong offset!");

// Function b1-Managed.BGUFunctionLibraryCS.GetGuibeiBoneTransformFromLastTick
// 0x0080 (0x0080 - 0x0000)
struct BGUFunctionLibraryCS_GetGuibeiBoneTransformFromLastTick final
{
public:
	class UAnimSequence*                          AnimSeq;                                           // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CurTime;                                           // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         LastTime;                                          // 0x000C(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class FName                                   BoneName;                                          // 0x0010(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_18[0x8];                                       // 0x0018(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	struct FTransform                             ReturnValue;                                       // 0x0020(0x0060)(Parm, OutParm, ReturnParm, IsPlainOldData, NoDestructor)
};
//static_assert(alignof(BGUFunctionLibraryCS_GetGuibeiBoneTransformFromLastTick) == 0x000010, "Wrong alignment on BGUFunctionLibraryCS_GetGuibeiBoneTransformFromLastTick");
//static_assert(sizeof(BGUFunctionLibraryCS_GetGuibeiBoneTransformFromLastTick) == 0x000080, "Wrong size on BGUFunctionLibraryCS_GetGuibeiBoneTransformFromLastTick");
//static_assert(offsetof(BGUFunctionLibraryCS_GetGuibeiBoneTransformFromLastTick, AnimSeq) == 0x000000, "Member 'BGUFunctionLibraryCS_GetGuibeiBoneTransformFromLastTick::AnimSeq' has a wrong offset!");
//static_assert(offsetof(BGUFunctionLibraryCS_GetGuibeiBoneTransformFromLastTick, CurTime) == 0x000008, "Member 'BGUFunctionLibraryCS_GetGuibeiBoneTransformFromLastTick::CurTime' has a wrong offset!");
//static_assert(offsetof(BGUFunctionLibraryCS_GetGuibeiBoneTransformFromLastTick, LastTime) == 0x00000C, "Member 'BGUFunctionLibraryCS_GetGuibeiBoneTransformFromLastTick::LastTime' has a wrong offset!");
//static_assert(offsetof(BGUFunctionLibraryCS_GetGuibeiBoneTransformFromLastTick, BoneName) == 0x000010, "Member 'BGUFunctionLibraryCS_GetGuibeiBoneTransformFromLastTick::BoneName' has a wrong offset!");
//static_assert(offsetof(BGUFunctionLibraryCS_GetGuibeiBoneTransformFromLastTick, ReturnValue) == 0x000020, "Member 'BGUFunctionLibraryCS_GetGuibeiBoneTransformFromLastTick::ReturnValue' has a wrong offset!");

// Function b1-Managed.BGUFunctionLibraryCS.BGUCheckSpecialConsumeItemUseAble
// 0x0010 (0x0010 - 0x0000)
struct BGUFunctionLibraryCS_BGUCheckSpecialConsumeItemUseAble final
{
public:
	class UObject*                                WorldContext;                                      // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         ItemId;                                            // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         bShowTips : 1;                                     // 0x000C(0x0001)(BitIndex: 0x00, PropSize: 0x0001 (Parm, NoDestructor, HasGetValueTypeHash))
	uint8                                         BitPad_C_1 : 7;                                    // 0x000C(0x0001)(Fixing Bit-Field Size For New Byte [ Dumper-7 ])
	uint8                                         ReturnValue : 1;                                   // 0x000D(0x0001)(BitIndex: 0x00, PropSize: 0x0001 (Parm, OutParm, ReturnParm, NoDestructor, HasGetValueTypeHash))
};
//static_assert(alignof(BGUFunctionLibraryCS_BGUCheckSpecialConsumeItemUseAble) == 0x000008, "Wrong alignment on BGUFunctionLibraryCS_BGUCheckSpecialConsumeItemUseAble");
//static_assert(sizeof(BGUFunctionLibraryCS_BGUCheckSpecialConsumeItemUseAble) == 0x000010, "Wrong size on BGUFunctionLibraryCS_BGUCheckSpecialConsumeItemUseAble");
//static_assert(offsetof(BGUFunctionLibraryCS_BGUCheckSpecialConsumeItemUseAble, WorldContext) == 0x000000, "Member 'BGUFunctionLibraryCS_BGUCheckSpecialConsumeItemUseAble::WorldContext' has a wrong offset!");
//static_assert(offsetof(BGUFunctionLibraryCS_BGUCheckSpecialConsumeItemUseAble, ItemId) == 0x000008, "Member 'BGUFunctionLibraryCS_BGUCheckSpecialConsumeItemUseAble::ItemId' has a wrong offset!");

// Function b1-Managed.BGUFunctionLibraryCS.BGUSetPlayerInSequenceTransition
// 0x0010 (0x0010 - 0x0000)
struct BGUFunctionLibraryCS_BGUSetPlayerInSequenceTransition final
{
public:
	class AActor*                                 Owner;                                             // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         bValue : 1;                                        // 0x0008(0x0001)(BitIndex: 0x00, PropSize: 0x0001 (Parm, NoDestructor, HasGetValueTypeHash))
};
//static_assert(alignof(BGUFunctionLibraryCS_BGUSetPlayerInSequenceTransition) == 0x000008, "Wrong alignment on BGUFunctionLibraryCS_BGUSetPlayerInSequenceTransition");
//static_assert(sizeof(BGUFunctionLibraryCS_BGUSetPlayerInSequenceTransition) == 0x000010, "Wrong size on BGUFunctionLibraryCS_BGUSetPlayerInSequenceTransition");
//static_assert(offsetof(BGUFunctionLibraryCS_BGUSetPlayerInSequenceTransition, Owner) == 0x000000, "Member 'BGUFunctionLibraryCS_BGUSetPlayerInSequenceTransition::Owner' has a wrong offset!");

// Function b1-Managed.BGUFunctionLibraryCS.BGUTryCastSpellWithStartSection
// 0x0018 (0x0018 - 0x0000)
struct BGUFunctionLibraryCS_BGUTryCastSpellWithStartSection final
{
public:
	class AActor*                                 Unit;                                              // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         SkillID;                                           // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class FName                                   MontageStartSectionName;                           // 0x000C(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         ReturnValue;                                       // 0x0014(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
//static_assert(alignof(BGUFunctionLibraryCS_BGUTryCastSpellWithStartSection) == 0x000008, "Wrong alignment on BGUFunctionLibraryCS_BGUTryCastSpellWithStartSection");
//static_assert(sizeof(BGUFunctionLibraryCS_BGUTryCastSpellWithStartSection) == 0x000018, "Wrong size on BGUFunctionLibraryCS_BGUTryCastSpellWithStartSection");
//static_assert(offsetof(BGUFunctionLibraryCS_BGUTryCastSpellWithStartSection, Unit) == 0x000000, "Member 'BGUFunctionLibraryCS_BGUTryCastSpellWithStartSection::Unit' has a wrong offset!");
//static_assert(offsetof(BGUFunctionLibraryCS_BGUTryCastSpellWithStartSection, SkillID) == 0x000008, "Member 'BGUFunctionLibraryCS_BGUTryCastSpellWithStartSection::SkillID' has a wrong offset!");
//static_assert(offsetof(BGUFunctionLibraryCS_BGUTryCastSpellWithStartSection, MontageStartSectionName) == 0x00000C, "Member 'BGUFunctionLibraryCS_BGUTryCastSpellWithStartSection::MontageStartSectionName' has a wrong offset!");
//static_assert(offsetof(BGUFunctionLibraryCS_BGUTryCastSpellWithStartSection, ReturnValue) == 0x000014, "Member 'BGUFunctionLibraryCS_BGUTryCastSpellWithStartSection::ReturnValue' has a wrong offset!");

// Function b1-Managed.BGUFunctionLibraryCS.BGUSetDispInteractActorAttachTo
// 0x0008 (0x0008 - 0x0000)
struct BGUFunctionLibraryCS_BGUSetDispInteractActorAttachTo final
{
public:
	class AActor*                                 AttachTo;                                          // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
//static_assert(alignof(BGUFunctionLibraryCS_BGUSetDispInteractActorAttachTo) == 0x000008, "Wrong alignment on BGUFunctionLibraryCS_BGUSetDispInteractActorAttachTo");
//static_assert(sizeof(BGUFunctionLibraryCS_BGUSetDispInteractActorAttachTo) == 0x000008, "Wrong size on BGUFunctionLibraryCS_BGUSetDispInteractActorAttachTo");
//static_assert(offsetof(BGUFunctionLibraryCS_BGUSetDispInteractActorAttachTo, AttachTo) == 0x000000, "Member 'BGUFunctionLibraryCS_BGUSetDispInteractActorAttachTo::AttachTo' has a wrong offset!");

// Function b1-Managed.BGUFunctionLibraryCS.PauseCamShakeWithControlByActor
// 0x0010 (0x0010 - 0x0000)
struct BGUFunctionLibraryCS_PauseCamShakeWithControlByActor final
{
public:
	class AActor*                                 Target;                                            // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         bPause : 1;                                        // 0x0008(0x0001)(BitIndex: 0x00, PropSize: 0x0001 (Parm, NoDestructor, HasGetValueTypeHash))
};
//static_assert(alignof(BGUFunctionLibraryCS_PauseCamShakeWithControlByActor) == 0x000008, "Wrong alignment on BGUFunctionLibraryCS_PauseCamShakeWithControlByActor");
//static_assert(sizeof(BGUFunctionLibraryCS_PauseCamShakeWithControlByActor) == 0x000010, "Wrong size on BGUFunctionLibraryCS_PauseCamShakeWithControlByActor");
//static_assert(offsetof(BGUFunctionLibraryCS_PauseCamShakeWithControlByActor, Target) == 0x000000, "Member 'BGUFunctionLibraryCS_PauseCamShakeWithControlByActor::Target' has a wrong offset!");

// Function b1-Managed.BGUFunctionLibraryCS.PlayCamShakeWithControlByClass
// 0x0010 (0x0010 - 0x0000)
struct BGUFunctionLibraryCS_PlayCamShakeWithControlByClass final
{
public:
	class UClass*                                 CameraShakeCls;                                    // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class AActor*                                 Target;                                            // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
//static_assert(alignof(BGUFunctionLibraryCS_PlayCamShakeWithControlByClass) == 0x000008, "Wrong alignment on BGUFunctionLibraryCS_PlayCamShakeWithControlByClass");
//static_assert(sizeof(BGUFunctionLibraryCS_PlayCamShakeWithControlByClass) == 0x000010, "Wrong size on BGUFunctionLibraryCS_PlayCamShakeWithControlByClass");
//static_assert(offsetof(BGUFunctionLibraryCS_PlayCamShakeWithControlByClass, CameraShakeCls) == 0x000000, "Member 'BGUFunctionLibraryCS_PlayCamShakeWithControlByClass::CameraShakeCls' has a wrong offset!");
//static_assert(offsetof(BGUFunctionLibraryCS_PlayCamShakeWithControlByClass, Target) == 0x000008, "Member 'BGUFunctionLibraryCS_PlayCamShakeWithControlByClass::Target' has a wrong offset!");

// Function b1-Managed.BGUFunctionLibraryCS.ExportTamerListToNewDAByBlame
// 0x0040 (0x0040 - 0x0000)
struct BGUFunctionLibraryCS_ExportTamerListToNewDAByBlame final
{
public:
	class AActor*                                 Actor;                                             // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class FString                                 OldTamer;                                          // 0x0008(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash)
	class FString                                 NewTimer;                                          // 0x0018(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash)
	class FString                                 BlameName;                                         // 0x0028(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash)
	uint8                                         ReturnValue : 1;                                   // 0x0038(0x0001)(BitIndex: 0x00, PropSize: 0x0001 (Parm, OutParm, ReturnParm, NoDestructor, HasGetValueTypeHash))
};
//static_assert(alignof(BGUFunctionLibraryCS_ExportTamerListToNewDAByBlame) == 0x000008, "Wrong alignment on BGUFunctionLibraryCS_ExportTamerListToNewDAByBlame");
//static_assert(sizeof(BGUFunctionLibraryCS_ExportTamerListToNewDAByBlame) == 0x000040, "Wrong size on BGUFunctionLibraryCS_ExportTamerListToNewDAByBlame");
//static_assert(offsetof(BGUFunctionLibraryCS_ExportTamerListToNewDAByBlame, Actor) == 0x000000, "Member 'BGUFunctionLibraryCS_ExportTamerListToNewDAByBlame::Actor' has a wrong offset!");
//static_assert(offsetof(BGUFunctionLibraryCS_ExportTamerListToNewDAByBlame, OldTamer) == 0x000008, "Member 'BGUFunctionLibraryCS_ExportTamerListToNewDAByBlame::OldTamer' has a wrong offset!");
//static_assert(offsetof(BGUFunctionLibraryCS_ExportTamerListToNewDAByBlame, NewTimer) == 0x000018, "Member 'BGUFunctionLibraryCS_ExportTamerListToNewDAByBlame::NewTimer' has a wrong offset!");
//static_assert(offsetof(BGUFunctionLibraryCS_ExportTamerListToNewDAByBlame, BlameName) == 0x000028, "Member 'BGUFunctionLibraryCS_ExportTamerListToNewDAByBlame::BlameName' has a wrong offset!");

// Function b1-Managed.BGUFunctionLibraryCS.ExportBulletSkillToDataAsset
// 0x0008 (0x0008 - 0x0000)
struct BGUFunctionLibraryCS_ExportBulletSkillToDataAsset final
{
public:
	class ABUTamerActor*                          TM;                                                // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
//static_assert(alignof(BGUFunctionLibraryCS_ExportBulletSkillToDataAsset) == 0x000008, "Wrong alignment on BGUFunctionLibraryCS_ExportBulletSkillToDataAsset");
//static_assert(sizeof(BGUFunctionLibraryCS_ExportBulletSkillToDataAsset) == 0x000008, "Wrong size on BGUFunctionLibraryCS_ExportBulletSkillToDataAsset");
//static_assert(offsetof(BGUFunctionLibraryCS_ExportBulletSkillToDataAsset, TM) == 0x000000, "Member 'BGUFunctionLibraryCS_ExportBulletSkillToDataAsset::TM' has a wrong offset!");

// Function b1-Managed.BGUFunctionLibraryCS.BGUSpawnActorAndECSBeginPlay
// 0x0018 (0x0018 - 0x0000)
struct BGUFunctionLibraryCS_BGUSpawnActorAndECSBeginPlay final
{
public:
	class UWorld*                                 _World;                                            // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UClass*                                 ActorClass;                                        // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class AActor*                                 ReturnValue;                                       // 0x0010(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
//static_assert(alignof(BGUFunctionLibraryCS_BGUSpawnActorAndECSBeginPlay) == 0x000008, "Wrong alignment on BGUFunctionLibraryCS_BGUSpawnActorAndECSBeginPlay");
//static_assert(sizeof(BGUFunctionLibraryCS_BGUSpawnActorAndECSBeginPlay) == 0x000018, "Wrong size on BGUFunctionLibraryCS_BGUSpawnActorAndECSBeginPlay");
//static_assert(offsetof(BGUFunctionLibraryCS_BGUSpawnActorAndECSBeginPlay, _World) == 0x000000, "Member 'BGUFunctionLibraryCS_BGUSpawnActorAndECSBeginPlay::_World' has a wrong offset!");
//static_assert(offsetof(BGUFunctionLibraryCS_BGUSpawnActorAndECSBeginPlay, ActorClass) == 0x000008, "Member 'BGUFunctionLibraryCS_BGUSpawnActorAndECSBeginPlay::ActorClass' has a wrong offset!");
//static_assert(offsetof(BGUFunctionLibraryCS_BGUSpawnActorAndECSBeginPlay, ReturnValue) == 0x000010, "Member 'BGUFunctionLibraryCS_BGUSpawnActorAndECSBeginPlay::ReturnValue' has a wrong offset!");

// Function b1-Managed.BGUFunctionLibraryCS.BGUDisablePlayerGuiBeiCamera
// 0x0008 (0x0008 - 0x0000)
struct BGUFunctionLibraryCS_BGUDisablePlayerGuiBeiCamera final
{
public:
	class UObject*                                WorldContext;                                      // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
//static_assert(alignof(BGUFunctionLibraryCS_BGUDisablePlayerGuiBeiCamera) == 0x000008, "Wrong alignment on BGUFunctionLibraryCS_BGUDisablePlayerGuiBeiCamera");
//static_assert(sizeof(BGUFunctionLibraryCS_BGUDisablePlayerGuiBeiCamera) == 0x000008, "Wrong size on BGUFunctionLibraryCS_BGUDisablePlayerGuiBeiCamera");
//static_assert(offsetof(BGUFunctionLibraryCS_BGUDisablePlayerGuiBeiCamera, WorldContext) == 0x000000, "Member 'BGUFunctionLibraryCS_BGUDisablePlayerGuiBeiCamera::WorldContext' has a wrong offset!");

// Function b1-Managed.BGUFunctionLibraryCS.GenerateNavMeshBoundsVolumes
// 0x0008 (0x0008 - 0x0000)
struct BGUFunctionLibraryCS_GenerateNavMeshBoundsVolumes final
{
public:
	class AActor*                                 TempleteActor;                                     // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
//static_assert(alignof(BGUFunctionLibraryCS_GenerateNavMeshBoundsVolumes) == 0x000008, "Wrong alignment on BGUFunctionLibraryCS_GenerateNavMeshBoundsVolumes");
//static_assert(sizeof(BGUFunctionLibraryCS_GenerateNavMeshBoundsVolumes) == 0x000008, "Wrong size on BGUFunctionLibraryCS_GenerateNavMeshBoundsVolumes");
//static_assert(offsetof(BGUFunctionLibraryCS_GenerateNavMeshBoundsVolumes, TempleteActor) == 0x000000, "Member 'BGUFunctionLibraryCS_GenerateNavMeshBoundsVolumes::TempleteActor' has a wrong offset!");

// Function b1-Managed.BGUFunctionLibraryCS.BGUEnablePlayerGuiBeiCamera
// 0x0020 (0x0020 - 0x0000)
struct BGUFunctionLibraryCS_BGUEnablePlayerGuiBeiCamera final
{
public:
	class UObject*                                WorldContext;                                      // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FRotator                               CurInverseAnimRotation;                            // 0x0008(0x0018)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
//static_assert(alignof(BGUFunctionLibraryCS_BGUEnablePlayerGuiBeiCamera) == 0x000008, "Wrong alignment on BGUFunctionLibraryCS_BGUEnablePlayerGuiBeiCamera");
//static_assert(sizeof(BGUFunctionLibraryCS_BGUEnablePlayerGuiBeiCamera) == 0x000020, "Wrong size on BGUFunctionLibraryCS_BGUEnablePlayerGuiBeiCamera");
//static_assert(offsetof(BGUFunctionLibraryCS_BGUEnablePlayerGuiBeiCamera, WorldContext) == 0x000000, "Member 'BGUFunctionLibraryCS_BGUEnablePlayerGuiBeiCamera::WorldContext' has a wrong offset!");
//static_assert(offsetof(BGUFunctionLibraryCS_BGUEnablePlayerGuiBeiCamera, CurInverseAnimRotation) == 0x000008, "Member 'BGUFunctionLibraryCS_BGUEnablePlayerGuiBeiCamera::CurInverseAnimRotation' has a wrong offset!");

// Function b1-Managed.BGUFunctionLibraryCS.BGUGetMultiPointCurrentUnit
// 0x0010 (0x0010 - 0x0000)
struct BGUFunctionLibraryCS_BGUGetMultiPointCurrentUnit final
{
public:
	class AActor*                                 Actor;                                             // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         ReturnValue;                                       // 0x0008(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
//static_assert(alignof(BGUFunctionLibraryCS_BGUGetMultiPointCurrentUnit) == 0x000008, "Wrong alignment on BGUFunctionLibraryCS_BGUGetMultiPointCurrentUnit");
//static_assert(sizeof(BGUFunctionLibraryCS_BGUGetMultiPointCurrentUnit) == 0x000010, "Wrong size on BGUFunctionLibraryCS_BGUGetMultiPointCurrentUnit");
//static_assert(offsetof(BGUFunctionLibraryCS_BGUGetMultiPointCurrentUnit, Actor) == 0x000000, "Member 'BGUFunctionLibraryCS_BGUGetMultiPointCurrentUnit::Actor' has a wrong offset!");
//static_assert(offsetof(BGUFunctionLibraryCS_BGUGetMultiPointCurrentUnit, ReturnValue) == 0x000008, "Member 'BGUFunctionLibraryCS_BGUGetMultiPointCurrentUnit::ReturnValue' has a wrong offset!");

// Function b1-Managed.BGUFunctionLibraryCS.BGUPlatformPatroMoveSingle
// 0x0048 (0x0048 - 0x0000)
struct BGUFunctionLibraryCS_BGUPlatformPatroMoveSingle final
{
public:
	class AActor*                                 Unit;                                              // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                BeginPos;                                          // 0x0008(0x0018)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                EndPos;                                            // 0x0020(0x0018)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         Speed;                                             // 0x0038(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         PlayerCount;                                       // 0x003C(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         Range;                                             // 0x0040(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
//static_assert(alignof(BGUFunctionLibraryCS_BGUPlatformPatroMoveSingle) == 0x000008, "Wrong alignment on BGUFunctionLibraryCS_BGUPlatformPatroMoveSingle");
//static_assert(sizeof(BGUFunctionLibraryCS_BGUPlatformPatroMoveSingle) == 0x000048, "Wrong size on BGUFunctionLibraryCS_BGUPlatformPatroMoveSingle");
//static_assert(offsetof(BGUFunctionLibraryCS_BGUPlatformPatroMoveSingle, Unit) == 0x000000, "Member 'BGUFunctionLibraryCS_BGUPlatformPatroMoveSingle::Unit' has a wrong offset!");
//static_assert(offsetof(BGUFunctionLibraryCS_BGUPlatformPatroMoveSingle, BeginPos) == 0x000008, "Member 'BGUFunctionLibraryCS_BGUPlatformPatroMoveSingle::BeginPos' has a wrong offset!");
//static_assert(offsetof(BGUFunctionLibraryCS_BGUPlatformPatroMoveSingle, EndPos) == 0x000020, "Member 'BGUFunctionLibraryCS_BGUPlatformPatroMoveSingle::EndPos' has a wrong offset!");
//static_assert(offsetof(BGUFunctionLibraryCS_BGUPlatformPatroMoveSingle, Speed) == 0x000038, "Member 'BGUFunctionLibraryCS_BGUPlatformPatroMoveSingle::Speed' has a wrong offset!");
//static_assert(offsetof(BGUFunctionLibraryCS_BGUPlatformPatroMoveSingle, PlayerCount) == 0x00003C, "Member 'BGUFunctionLibraryCS_BGUPlatformPatroMoveSingle::PlayerCount' has a wrong offset!");
//static_assert(offsetof(BGUFunctionLibraryCS_BGUPlatformPatroMoveSingle, Range) == 0x000040, "Member 'BGUFunctionLibraryCS_BGUPlatformPatroMoveSingle::Range' has a wrong offset!");

// Function b1-Managed.BGUFunctionLibraryCS.BGUCalcCharacterRotOnSlope
// 0x0038 (0x0038 - 0x0000)
struct BGUFunctionLibraryCS_BGUCalcCharacterRotOnSlope final
{
public:
	class ACharacter*                             OwnerChr;                                          // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                SurfaceNormal_Normalized;                          // 0x0008(0x0018)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FRotator                               ReturnValue;                                       // 0x0020(0x0018)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor)
};
//static_assert(alignof(BGUFunctionLibraryCS_BGUCalcCharacterRotOnSlope) == 0x000008, "Wrong alignment on BGUFunctionLibraryCS_BGUCalcCharacterRotOnSlope");
//static_assert(sizeof(BGUFunctionLibraryCS_BGUCalcCharacterRotOnSlope) == 0x000038, "Wrong size on BGUFunctionLibraryCS_BGUCalcCharacterRotOnSlope");
//static_assert(offsetof(BGUFunctionLibraryCS_BGUCalcCharacterRotOnSlope, OwnerChr) == 0x000000, "Member 'BGUFunctionLibraryCS_BGUCalcCharacterRotOnSlope::OwnerChr' has a wrong offset!");
//static_assert(offsetof(BGUFunctionLibraryCS_BGUCalcCharacterRotOnSlope, SurfaceNormal_Normalized) == 0x000008, "Member 'BGUFunctionLibraryCS_BGUCalcCharacterRotOnSlope::SurfaceNormal_Normalized' has a wrong offset!");
//static_assert(offsetof(BGUFunctionLibraryCS_BGUCalcCharacterRotOnSlope, ReturnValue) == 0x000020, "Member 'BGUFunctionLibraryCS_BGUCalcCharacterRotOnSlope::ReturnValue' has a wrong offset!");

// Function b1-Managed.BGUFunctionLibraryCS.BGUTryDestroyDestructible
// 0x0008 (0x0008 - 0x0000)
struct BGUFunctionLibraryCS_BGUTryDestroyDestructible final
{
public:
	class AActor*                                 DestructibleActor;                                 // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
//static_assert(alignof(BGUFunctionLibraryCS_BGUTryDestroyDestructible) == 0x000008, "Wrong alignment on BGUFunctionLibraryCS_BGUTryDestroyDestructible");
//static_assert(sizeof(BGUFunctionLibraryCS_BGUTryDestroyDestructible) == 0x000008, "Wrong size on BGUFunctionLibraryCS_BGUTryDestroyDestructible");
//static_assert(offsetof(BGUFunctionLibraryCS_BGUTryDestroyDestructible, DestructibleActor) == 0x000000, "Member 'BGUFunctionLibraryCS_BGUTryDestroyDestructible::DestructibleActor' has a wrong offset!");

// Function b1-Managed.BGUFunctionLibraryCS.BGUClosestPerceivedTarget
// 0x0010 (0x0010 - 0x0000)
struct BGUFunctionLibraryCS_BGUClosestPerceivedTarget final
{
public:
	class AActor*                                 Unit;                                              // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class AActor*                                 ReturnValue;                                       // 0x0008(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
//static_assert(alignof(BGUFunctionLibraryCS_BGUClosestPerceivedTarget) == 0x000008, "Wrong alignment on BGUFunctionLibraryCS_BGUClosestPerceivedTarget");
//static_assert(sizeof(BGUFunctionLibraryCS_BGUClosestPerceivedTarget) == 0x000010, "Wrong size on BGUFunctionLibraryCS_BGUClosestPerceivedTarget");
//static_assert(offsetof(BGUFunctionLibraryCS_BGUClosestPerceivedTarget, Unit) == 0x000000, "Member 'BGUFunctionLibraryCS_BGUClosestPerceivedTarget::Unit' has a wrong offset!");
//static_assert(offsetof(BGUFunctionLibraryCS_BGUClosestPerceivedTarget, ReturnValue) == 0x000008, "Member 'BGUFunctionLibraryCS_BGUClosestPerceivedTarget::ReturnValue' has a wrong offset!");

// Function b1-Managed.BGUFunctionLibraryCS.BGUPlayerCameraLockTarget
// 0x0010 (0x0010 - 0x0000)
struct BGUFunctionLibraryCS_BGUPlayerCameraLockTarget final
{
public:
	class AActor*                                 Player;                                            // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class AActor*                                 Target;                                            // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
//static_assert(alignof(BGUFunctionLibraryCS_BGUPlayerCameraLockTarget) == 0x000008, "Wrong alignment on BGUFunctionLibraryCS_BGUPlayerCameraLockTarget");
//static_assert(sizeof(BGUFunctionLibraryCS_BGUPlayerCameraLockTarget) == 0x000010, "Wrong size on BGUFunctionLibraryCS_BGUPlayerCameraLockTarget");
//static_assert(offsetof(BGUFunctionLibraryCS_BGUPlayerCameraLockTarget, Player) == 0x000000, "Member 'BGUFunctionLibraryCS_BGUPlayerCameraLockTarget::Player' has a wrong offset!");
//static_assert(offsetof(BGUFunctionLibraryCS_BGUPlayerCameraLockTarget, Target) == 0x000008, "Member 'BGUFunctionLibraryCS_BGUPlayerCameraLockTarget::Target' has a wrong offset!");

// Function b1-Managed.BGUFunctionLibraryCS.TestProfileSimpleOverlap
// 0x0008 (0x0008 - 0x0000)
struct BGUFunctionLibraryCS_TestProfileSimpleOverlap final
{
public:
	class UObject*                                WorldContext;                                      // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
//static_assert(alignof(BGUFunctionLibraryCS_TestProfileSimpleOverlap) == 0x000008, "Wrong alignment on BGUFunctionLibraryCS_TestProfileSimpleOverlap");
//static_assert(sizeof(BGUFunctionLibraryCS_TestProfileSimpleOverlap) == 0x000008, "Wrong size on BGUFunctionLibraryCS_TestProfileSimpleOverlap");
//static_assert(offsetof(BGUFunctionLibraryCS_TestProfileSimpleOverlap, WorldContext) == 0x000000, "Member 'BGUFunctionLibraryCS_TestProfileSimpleOverlap::WorldContext' has a wrong offset!");

// Function b1-Managed.BGUFunctionLibraryCS.SetCineCameraFocalLength
// 0x0010 (0x0010 - 0x0000)
struct BGUFunctionLibraryCS_SetCineCameraFocalLength final
{
public:
	class ACineCameraActor*                       CineCameraActor;                                   // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         NewFocalLength;                                    // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
//static_assert(alignof(BGUFunctionLibraryCS_SetCineCameraFocalLength) == 0x000008, "Wrong alignment on BGUFunctionLibraryCS_SetCineCameraFocalLength");
//static_assert(sizeof(BGUFunctionLibraryCS_SetCineCameraFocalLength) == 0x000010, "Wrong size on BGUFunctionLibraryCS_SetCineCameraFocalLength");
//static_assert(offsetof(BGUFunctionLibraryCS_SetCineCameraFocalLength, CineCameraActor) == 0x000000, "Member 'BGUFunctionLibraryCS_SetCineCameraFocalLength::CineCameraActor' has a wrong offset!");
//static_assert(offsetof(BGUFunctionLibraryCS_SetCineCameraFocalLength, NewFocalLength) == 0x000008, "Member 'BGUFunctionLibraryCS_SetCineCameraFocalLength::NewFocalLength' has a wrong offset!");

// Function b1-Managed.BGUFunctionLibraryCS.GetCineCameraFocalLength
// 0x0010 (0x0010 - 0x0000)
struct BGUFunctionLibraryCS_GetCineCameraFocalLength final
{
public:
	class ACineCameraActor*                       CineCameraActor;                                   // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         ReturnValue;                                       // 0x0008(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
//static_assert(alignof(BGUFunctionLibraryCS_GetCineCameraFocalLength) == 0x000008, "Wrong alignment on BGUFunctionLibraryCS_GetCineCameraFocalLength");
//static_assert(sizeof(BGUFunctionLibraryCS_GetCineCameraFocalLength) == 0x000010, "Wrong size on BGUFunctionLibraryCS_GetCineCameraFocalLength");
//static_assert(offsetof(BGUFunctionLibraryCS_GetCineCameraFocalLength, CineCameraActor) == 0x000000, "Member 'BGUFunctionLibraryCS_GetCineCameraFocalLength::CineCameraActor' has a wrong offset!");
//static_assert(offsetof(BGUFunctionLibraryCS_GetCineCameraFocalLength, ReturnValue) == 0x000008, "Member 'BGUFunctionLibraryCS_GetCineCameraFocalLength::ReturnValue' has a wrong offset!");

// Function b1-Managed.BGUFunctionLibraryCS.CanActivateConsoleCommad
// 0x0001 (0x0001 - 0x0000)
struct BGUFunctionLibraryCS_CanActivateConsoleCommad final
{
public:
	uint8                                         ReturnValue : 1;                                   // 0x0000(0x0001)(BitIndex: 0x00, PropSize: 0x0001 (Parm, OutParm, ReturnParm, NoDestructor, HasGetValueTypeHash))
};
//static_assert(alignof(BGUFunctionLibraryCS_CanActivateConsoleCommad) == 0x000001, "Wrong alignment on BGUFunctionLibraryCS_CanActivateConsoleCommad");
//static_assert(sizeof(BGUFunctionLibraryCS_CanActivateConsoleCommad) == 0x000001, "Wrong size on BGUFunctionLibraryCS_CanActivateConsoleCommad");

// Function b1-Managed.BGUFunctionLibraryCS.CastMagicallyChangeSkill
// 0x0018 (0x0018 - 0x0000)
struct BGUFunctionLibraryCS_CastMagicallyChangeSkill final
{
public:
	class AActor*                                 Unit;                                              // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UBGWDataAsset_MagicallyChangeConfig*    Config;                                            // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         SkillID;                                           // 0x0010(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         RecoverSkillID;                                    // 0x0014(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
//static_assert(alignof(BGUFunctionLibraryCS_CastMagicallyChangeSkill) == 0x000008, "Wrong alignment on BGUFunctionLibraryCS_CastMagicallyChangeSkill");
//static_assert(sizeof(BGUFunctionLibraryCS_CastMagicallyChangeSkill) == 0x000018, "Wrong size on BGUFunctionLibraryCS_CastMagicallyChangeSkill");
//static_assert(offsetof(BGUFunctionLibraryCS_CastMagicallyChangeSkill, Unit) == 0x000000, "Member 'BGUFunctionLibraryCS_CastMagicallyChangeSkill::Unit' has a wrong offset!");
//static_assert(offsetof(BGUFunctionLibraryCS_CastMagicallyChangeSkill, Config) == 0x000008, "Member 'BGUFunctionLibraryCS_CastMagicallyChangeSkill::Config' has a wrong offset!");
//static_assert(offsetof(BGUFunctionLibraryCS_CastMagicallyChangeSkill, SkillID) == 0x000010, "Member 'BGUFunctionLibraryCS_CastMagicallyChangeSkill::SkillID' has a wrong offset!");
//static_assert(offsetof(BGUFunctionLibraryCS_CastMagicallyChangeSkill, RecoverSkillID) == 0x000014, "Member 'BGUFunctionLibraryCS_CastMagicallyChangeSkill::RecoverSkillID' has a wrong offset!");

// Function b1-Managed.BGUFunctionLibraryCS.BGUOneHitBreakImmobility
// 0x0008 (0x0008 - 0x0000)
struct BGUFunctionLibraryCS_BGUOneHitBreakImmobility final
{
public:
	class AActor*                                 Unit;                                              // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
//static_assert(alignof(BGUFunctionLibraryCS_BGUOneHitBreakImmobility) == 0x000008, "Wrong alignment on BGUFunctionLibraryCS_BGUOneHitBreakImmobility");
//static_assert(sizeof(BGUFunctionLibraryCS_BGUOneHitBreakImmobility) == 0x000008, "Wrong size on BGUFunctionLibraryCS_BGUOneHitBreakImmobility");
//static_assert(offsetof(BGUFunctionLibraryCS_BGUOneHitBreakImmobility, Unit) == 0x000000, "Member 'BGUFunctionLibraryCS_BGUOneHitBreakImmobility::Unit' has a wrong offset!");

// Function b1-Managed.BGUFunctionLibraryCS.BGURemoveBuffImmediately
// 0x0010 (0x0010 - 0x0000)
struct BGUFunctionLibraryCS_BGURemoveBuffImmediately final
{
public:
	class AActor*                                 Unit;                                              // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         BuffID;                                            // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	EBuffEffectTriggerType                        EffectTriggerType;                                 // 0x000C(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
//static_assert(alignof(BGUFunctionLibraryCS_BGURemoveBuffImmediately) == 0x000008, "Wrong alignment on BGUFunctionLibraryCS_BGURemoveBuffImmediately");
//static_assert(sizeof(BGUFunctionLibraryCS_BGURemoveBuffImmediately) == 0x000010, "Wrong size on BGUFunctionLibraryCS_BGURemoveBuffImmediately");
//static_assert(offsetof(BGUFunctionLibraryCS_BGURemoveBuffImmediately, Unit) == 0x000000, "Member 'BGUFunctionLibraryCS_BGURemoveBuffImmediately::Unit' has a wrong offset!");
//static_assert(offsetof(BGUFunctionLibraryCS_BGURemoveBuffImmediately, BuffID) == 0x000008, "Member 'BGUFunctionLibraryCS_BGURemoveBuffImmediately::BuffID' has a wrong offset!");
//static_assert(offsetof(BGUFunctionLibraryCS_BGURemoveBuffImmediately, EffectTriggerType) == 0x00000C, "Member 'BGUFunctionLibraryCS_BGURemoveBuffImmediately::EffectTriggerType' has a wrong offset!");

// Function b1-Managed.BGUFunctionLibraryCS.ClampAndAlignToLandScape
// 0x0018 (0x0018 - 0x0000)
struct BGUFunctionLibraryCS_ClampAndAlignToLandScape final
{
public:
	class AActor*                                 Unit;                                              // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         ClampToLand : 1;                                   // 0x0008(0x0001)(BitIndex: 0x00, PropSize: 0x0001 (Parm, NoDestructor, HasGetValueTypeHash))
	uint8                                         BitPad_8_1 : 7;                                    // 0x0008(0x0001)(Fixing Bit-Field Size For New Byte [ Dumper-7 ])
	uint8                                         AlignToLand : 1;                                   // 0x0009(0x0001)(BitIndex: 0x00, PropSize: 0x0001 (Parm, NoDestructor, HasGetValueTypeHash))
	uint8                                         Pad_A[0x2];                                        // 0x000A(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         DeltaTime;                                         // 0x000C(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         InterpSpd;                                         // 0x0010(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
//static_assert(alignof(BGUFunctionLibraryCS_ClampAndAlignToLandScape) == 0x000008, "Wrong alignment on BGUFunctionLibraryCS_ClampAndAlignToLandScape");
//static_assert(sizeof(BGUFunctionLibraryCS_ClampAndAlignToLandScape) == 0x000018, "Wrong size on BGUFunctionLibraryCS_ClampAndAlignToLandScape");
//static_assert(offsetof(BGUFunctionLibraryCS_ClampAndAlignToLandScape, Unit) == 0x000000, "Member 'BGUFunctionLibraryCS_ClampAndAlignToLandScape::Unit' has a wrong offset!");
//static_assert(offsetof(BGUFunctionLibraryCS_ClampAndAlignToLandScape, DeltaTime) == 0x00000C, "Member 'BGUFunctionLibraryCS_ClampAndAlignToLandScape::DeltaTime' has a wrong offset!");
//static_assert(offsetof(BGUFunctionLibraryCS_ClampAndAlignToLandScape, InterpSpd) == 0x000010, "Member 'BGUFunctionLibraryCS_ClampAndAlignToLandScape::InterpSpd' has a wrong offset!");

// Function b1-Managed.BGUFunctionLibraryCS.BGURemoveSkillSuperArmor
// 0x0008 (0x0008 - 0x0000)
struct BGUFunctionLibraryCS_BGURemoveSkillSuperArmor final
{
public:
	class AActor*                                 Unit;                                              // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
//static_assert(alignof(BGUFunctionLibraryCS_BGURemoveSkillSuperArmor) == 0x000008, "Wrong alignment on BGUFunctionLibraryCS_BGURemoveSkillSuperArmor");
//static_assert(sizeof(BGUFunctionLibraryCS_BGURemoveSkillSuperArmor) == 0x000008, "Wrong size on BGUFunctionLibraryCS_BGURemoveSkillSuperArmor");
//static_assert(offsetof(BGUFunctionLibraryCS_BGURemoveSkillSuperArmor, Unit) == 0x000000, "Member 'BGUFunctionLibraryCS_BGURemoveSkillSuperArmor::Unit' has a wrong offset!");

// Function b1-Managed.BGUFunctionLibraryCS.PrepareForSkillRecording
// 0x0030 (0x0030 - 0x0000)
struct BGUFunctionLibraryCS_PrepareForSkillRecording final
{
public:
	class UWorld*                                 World;                                             // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UClass*                                 UnitClass;                                         // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         ResID;                                             // 0x0010(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         SkillID;                                           // 0x0014(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         bNeedsSpawnNewUnit : 1;                            // 0x0018(0x0001)(BitIndex: 0x00, PropSize: 0x0001 (Parm, NoDestructor, HasGetValueTypeHash))
	uint8                                         Pad_19[0x7];                                       // 0x0019(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class ABGUCharacterCS*                        SpawnedUnit;                                       // 0x0020(0x0008)(Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UAnimMontage*                           PlayedMontage;                                     // 0x0028(0x0008)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
//static_assert(alignof(BGUFunctionLibraryCS_PrepareForSkillRecording) == 0x000008, "Wrong alignment on BGUFunctionLibraryCS_PrepareForSkillRecording");
//static_assert(sizeof(BGUFunctionLibraryCS_PrepareForSkillRecording) == 0x000030, "Wrong size on BGUFunctionLibraryCS_PrepareForSkillRecording");
//static_assert(offsetof(BGUFunctionLibraryCS_PrepareForSkillRecording, World) == 0x000000, "Member 'BGUFunctionLibraryCS_PrepareForSkillRecording::World' has a wrong offset!");
//static_assert(offsetof(BGUFunctionLibraryCS_PrepareForSkillRecording, UnitClass) == 0x000008, "Member 'BGUFunctionLibraryCS_PrepareForSkillRecording::UnitClass' has a wrong offset!");
//static_assert(offsetof(BGUFunctionLibraryCS_PrepareForSkillRecording, ResID) == 0x000010, "Member 'BGUFunctionLibraryCS_PrepareForSkillRecording::ResID' has a wrong offset!");
//static_assert(offsetof(BGUFunctionLibraryCS_PrepareForSkillRecording, SkillID) == 0x000014, "Member 'BGUFunctionLibraryCS_PrepareForSkillRecording::SkillID' has a wrong offset!");
//static_assert(offsetof(BGUFunctionLibraryCS_PrepareForSkillRecording, SpawnedUnit) == 0x000020, "Member 'BGUFunctionLibraryCS_PrepareForSkillRecording::SpawnedUnit' has a wrong offset!");
//static_assert(offsetof(BGUFunctionLibraryCS_PrepareForSkillRecording, PlayedMontage) == 0x000028, "Member 'BGUFunctionLibraryCS_PrepareForSkillRecording::PlayedMontage' has a wrong offset!");

// Function b1-Managed.BGUFunctionLibraryCS.BGUSpawnActorNoBeginPlay
// 0x0018 (0x0018 - 0x0000)
struct BGUFunctionLibraryCS_BGUSpawnActorNoBeginPlay final
{
public:
	class UWorld*                                 _World;                                            // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UClass*                                 ActorClass;                                        // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class AActor*                                 ReturnValue;                                       // 0x0010(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
//static_assert(alignof(BGUFunctionLibraryCS_BGUSpawnActorNoBeginPlay) == 0x000008, "Wrong alignment on BGUFunctionLibraryCS_BGUSpawnActorNoBeginPlay");
//static_assert(sizeof(BGUFunctionLibraryCS_BGUSpawnActorNoBeginPlay) == 0x000018, "Wrong size on BGUFunctionLibraryCS_BGUSpawnActorNoBeginPlay");
//static_assert(offsetof(BGUFunctionLibraryCS_BGUSpawnActorNoBeginPlay, _World) == 0x000000, "Member 'BGUFunctionLibraryCS_BGUSpawnActorNoBeginPlay::_World' has a wrong offset!");
//static_assert(offsetof(BGUFunctionLibraryCS_BGUSpawnActorNoBeginPlay, ActorClass) == 0x000008, "Member 'BGUFunctionLibraryCS_BGUSpawnActorNoBeginPlay::ActorClass' has a wrong offset!");
//static_assert(offsetof(BGUFunctionLibraryCS_BGUSpawnActorNoBeginPlay, ReturnValue) == 0x000010, "Member 'BGUFunctionLibraryCS_BGUSpawnActorNoBeginPlay::ReturnValue' has a wrong offset!");

// Function b1-Managed.BGUFunctionLibraryCS.EnterMonsterSkillCamera
// 0x0010 (0x0010 - 0x0000)
struct BGUFunctionLibraryCS_EnterMonsterSkillCamera final
{
public:
	class AActor*                                 Monster;                                           // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CameraID;                                          // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
//static_assert(alignof(BGUFunctionLibraryCS_EnterMonsterSkillCamera) == 0x000008, "Wrong alignment on BGUFunctionLibraryCS_EnterMonsterSkillCamera");
//static_assert(sizeof(BGUFunctionLibraryCS_EnterMonsterSkillCamera) == 0x000010, "Wrong size on BGUFunctionLibraryCS_EnterMonsterSkillCamera");
//static_assert(offsetof(BGUFunctionLibraryCS_EnterMonsterSkillCamera, Monster) == 0x000000, "Member 'BGUFunctionLibraryCS_EnterMonsterSkillCamera::Monster' has a wrong offset!");
//static_assert(offsetof(BGUFunctionLibraryCS_EnterMonsterSkillCamera, CameraID) == 0x000008, "Member 'BGUFunctionLibraryCS_EnterMonsterSkillCamera::CameraID' has a wrong offset!");

// Function b1-Managed.BGUFunctionLibraryCS.BGUSetCanTriggerGroupAI
// 0x0010 (0x0010 - 0x0000)
struct BGUFunctionLibraryCS_BGUSetCanTriggerGroupAI final
{
public:
	class UObject*                                WorldContext;                                      // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         CanTrigger : 1;                                    // 0x0008(0x0001)(BitIndex: 0x00, PropSize: 0x0001 (Parm, NoDestructor, HasGetValueTypeHash))
};
//static_assert(alignof(BGUFunctionLibraryCS_BGUSetCanTriggerGroupAI) == 0x000008, "Wrong alignment on BGUFunctionLibraryCS_BGUSetCanTriggerGroupAI");
//static_assert(sizeof(BGUFunctionLibraryCS_BGUSetCanTriggerGroupAI) == 0x000010, "Wrong size on BGUFunctionLibraryCS_BGUSetCanTriggerGroupAI");
//static_assert(offsetof(BGUFunctionLibraryCS_BGUSetCanTriggerGroupAI, WorldContext) == 0x000000, "Member 'BGUFunctionLibraryCS_BGUSetCanTriggerGroupAI::WorldContext' has a wrong offset!");

// Function b1-Managed.BGUFunctionLibraryCS.GetUnitLockTargetActor
// 0x0010 (0x0010 - 0x0000)
struct BGUFunctionLibraryCS_GetUnitLockTargetActor final
{
public:
	class AActor*                                 Unit;                                              // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class AActor*                                 ReturnValue;                                       // 0x0008(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
//static_assert(alignof(BGUFunctionLibraryCS_GetUnitLockTargetActor) == 0x000008, "Wrong alignment on BGUFunctionLibraryCS_GetUnitLockTargetActor");
//static_assert(sizeof(BGUFunctionLibraryCS_GetUnitLockTargetActor) == 0x000010, "Wrong size on BGUFunctionLibraryCS_GetUnitLockTargetActor");
//static_assert(offsetof(BGUFunctionLibraryCS_GetUnitLockTargetActor, Unit) == 0x000000, "Member 'BGUFunctionLibraryCS_GetUnitLockTargetActor::Unit' has a wrong offset!");
//static_assert(offsetof(BGUFunctionLibraryCS_GetUnitLockTargetActor, ReturnValue) == 0x000008, "Member 'BGUFunctionLibraryCS_GetUnitLockTargetActor::ReturnValue' has a wrong offset!");

// Function b1-Managed.BGUFunctionLibraryCS.ExitMonsterSkillCamera
// 0x0008 (0x0008 - 0x0000)
struct BGUFunctionLibraryCS_ExitMonsterSkillCamera final
{
public:
	class AActor*                                 Monster;                                           // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
//static_assert(alignof(BGUFunctionLibraryCS_ExitMonsterSkillCamera) == 0x000008, "Wrong alignment on BGUFunctionLibraryCS_ExitMonsterSkillCamera");
//static_assert(sizeof(BGUFunctionLibraryCS_ExitMonsterSkillCamera) == 0x000008, "Wrong size on BGUFunctionLibraryCS_ExitMonsterSkillCamera");
//static_assert(offsetof(BGUFunctionLibraryCS_ExitMonsterSkillCamera, Monster) == 0x000000, "Member 'BGUFunctionLibraryCS_ExitMonsterSkillCamera::Monster' has a wrong offset!");

// Function b1-Managed.BGUFunctionLibraryCS.GetCameraFocusDistance
// 0x0010 (0x0010 - 0x0000)
struct BGUFunctionLibraryCS_GetCameraFocusDistance final
{
public:
	class ACameraActor*                           CameraActor;                                       // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         ReturnValue;                                       // 0x0008(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
//static_assert(alignof(BGUFunctionLibraryCS_GetCameraFocusDistance) == 0x000008, "Wrong alignment on BGUFunctionLibraryCS_GetCameraFocusDistance");
//static_assert(sizeof(BGUFunctionLibraryCS_GetCameraFocusDistance) == 0x000010, "Wrong size on BGUFunctionLibraryCS_GetCameraFocusDistance");
//static_assert(offsetof(BGUFunctionLibraryCS_GetCameraFocusDistance, CameraActor) == 0x000000, "Member 'BGUFunctionLibraryCS_GetCameraFocusDistance::CameraActor' has a wrong offset!");
//static_assert(offsetof(BGUFunctionLibraryCS_GetCameraFocusDistance, ReturnValue) == 0x000008, "Member 'BGUFunctionLibraryCS_GetCameraFocusDistance::ReturnValue' has a wrong offset!");

// Function b1-Managed.BGUFunctionLibraryCS.SetCameraFocusDistance
// 0x0010 (0x0010 - 0x0000)
struct BGUFunctionLibraryCS_SetCameraFocusDistance final
{
public:
	class ACameraActor*                           CameraActor;                                       // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         NewFocusDistance;                                  // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
//static_assert(alignof(BGUFunctionLibraryCS_SetCameraFocusDistance) == 0x000008, "Wrong alignment on BGUFunctionLibraryCS_SetCameraFocusDistance");
//static_assert(sizeof(BGUFunctionLibraryCS_SetCameraFocusDistance) == 0x000010, "Wrong size on BGUFunctionLibraryCS_SetCameraFocusDistance");
//static_assert(offsetof(BGUFunctionLibraryCS_SetCameraFocusDistance, CameraActor) == 0x000000, "Member 'BGUFunctionLibraryCS_SetCameraFocusDistance::CameraActor' has a wrong offset!");
//static_assert(offsetof(BGUFunctionLibraryCS_SetCameraFocusDistance, NewFocusDistance) == 0x000008, "Member 'BGUFunctionLibraryCS_SetCameraFocusDistance::NewFocusDistance' has a wrong offset!");

// Function b1-Managed.BGUFunctionLibraryCS.EnterPlayerSkillCamera
// 0x0010 (0x0010 - 0x0000)
struct BGUFunctionLibraryCS_EnterPlayerSkillCamera final
{
public:
	class UObject*                                WorldContext;                                      // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CameraID;                                          // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
//static_assert(alignof(BGUFunctionLibraryCS_EnterPlayerSkillCamera) == 0x000008, "Wrong alignment on BGUFunctionLibraryCS_EnterPlayerSkillCamera");
//static_assert(sizeof(BGUFunctionLibraryCS_EnterPlayerSkillCamera) == 0x000010, "Wrong size on BGUFunctionLibraryCS_EnterPlayerSkillCamera");
//static_assert(offsetof(BGUFunctionLibraryCS_EnterPlayerSkillCamera, WorldContext) == 0x000000, "Member 'BGUFunctionLibraryCS_EnterPlayerSkillCamera::WorldContext' has a wrong offset!");
//static_assert(offsetof(BGUFunctionLibraryCS_EnterPlayerSkillCamera, CameraID) == 0x000008, "Member 'BGUFunctionLibraryCS_EnterPlayerSkillCamera::CameraID' has a wrong offset!");

// Function b1-Managed.BGUFunctionLibraryCS.BGUSetUnitCritRateBase
// 0x0010 (0x0010 - 0x0000)
struct BGUFunctionLibraryCS_BGUSetUnitCritRateBase final
{
public:
	class AActor*                                 Unit;                                              // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CritRate;                                          // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
//static_assert(alignof(BGUFunctionLibraryCS_BGUSetUnitCritRateBase) == 0x000008, "Wrong alignment on BGUFunctionLibraryCS_BGUSetUnitCritRateBase");
//static_assert(sizeof(BGUFunctionLibraryCS_BGUSetUnitCritRateBase) == 0x000010, "Wrong size on BGUFunctionLibraryCS_BGUSetUnitCritRateBase");
//static_assert(offsetof(BGUFunctionLibraryCS_BGUSetUnitCritRateBase, Unit) == 0x000000, "Member 'BGUFunctionLibraryCS_BGUSetUnitCritRateBase::Unit' has a wrong offset!");
//static_assert(offsetof(BGUFunctionLibraryCS_BGUSetUnitCritRateBase, CritRate) == 0x000008, "Member 'BGUFunctionLibraryCS_BGUSetUnitCritRateBase::CritRate' has a wrong offset!");

// Function b1-Managed.BGUFunctionLibraryCS.BGUHandleAbnormalState
// 0x0048 (0x0048 - 0x0000)
struct BGUFunctionLibraryCS_BGUHandleAbnormalState final
{
public:
	class AActor*                                 Attacker;                                          // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class AActor*                                 Victim;                                            // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FAbnormalStateAccConfig                Config;                                            // 0x0010(0x0030)(Parm, HasGetValueTypeHash)
	float                                         AddValue;                                          // 0x0040(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
//static_assert(alignof(BGUFunctionLibraryCS_BGUHandleAbnormalState) == 0x000008, "Wrong alignment on BGUFunctionLibraryCS_BGUHandleAbnormalState");
//static_assert(sizeof(BGUFunctionLibraryCS_BGUHandleAbnormalState) == 0x000048, "Wrong size on BGUFunctionLibraryCS_BGUHandleAbnormalState");
//static_assert(offsetof(BGUFunctionLibraryCS_BGUHandleAbnormalState, Attacker) == 0x000000, "Member 'BGUFunctionLibraryCS_BGUHandleAbnormalState::Attacker' has a wrong offset!");
//static_assert(offsetof(BGUFunctionLibraryCS_BGUHandleAbnormalState, Victim) == 0x000008, "Member 'BGUFunctionLibraryCS_BGUHandleAbnormalState::Victim' has a wrong offset!");
//static_assert(offsetof(BGUFunctionLibraryCS_BGUHandleAbnormalState, Config) == 0x000010, "Member 'BGUFunctionLibraryCS_BGUHandleAbnormalState::Config' has a wrong offset!");
//static_assert(offsetof(BGUFunctionLibraryCS_BGUHandleAbnormalState, AddValue) == 0x000040, "Member 'BGUFunctionLibraryCS_BGUHandleAbnormalState::AddValue' has a wrong offset!");

// Function b1-Managed.BGUFunctionLibraryCS.TryGetComponentByFName
// 0x0018 (0x0018 - 0x0000)
struct BGUFunctionLibraryCS_TryGetComponentByFName final
{
public:
	class AActor*                                 Actor;                                             // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class FName                                   Name_0;                                            // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UActorComponent*                        ReturnValue;                                       // 0x0010(0x0008)(ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
//static_assert(alignof(BGUFunctionLibraryCS_TryGetComponentByFName) == 0x000008, "Wrong alignment on BGUFunctionLibraryCS_TryGetComponentByFName");
//static_assert(sizeof(BGUFunctionLibraryCS_TryGetComponentByFName) == 0x000018, "Wrong size on BGUFunctionLibraryCS_TryGetComponentByFName");
//static_assert(offsetof(BGUFunctionLibraryCS_TryGetComponentByFName, Actor) == 0x000000, "Member 'BGUFunctionLibraryCS_TryGetComponentByFName::Actor' has a wrong offset!");
//static_assert(offsetof(BGUFunctionLibraryCS_TryGetComponentByFName, Name_0) == 0x000008, "Member 'BGUFunctionLibraryCS_TryGetComponentByFName::Name_0' has a wrong offset!");
//static_assert(offsetof(BGUFunctionLibraryCS_TryGetComponentByFName, ReturnValue) == 0x000010, "Member 'BGUFunctionLibraryCS_TryGetComponentByFName::ReturnValue' has a wrong offset!");

// Function b1-Managed.BGUFunctionLibraryCS.BGUGetCurrentUserType
// 0x0004 (0x0004 - 0x0000)
struct BGUFunctionLibraryCS_BGUGetCurrentUserType final
{
public:
	int32                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
//static_assert(alignof(BGUFunctionLibraryCS_BGUGetCurrentUserType) == 0x000004, "Wrong alignment on BGUFunctionLibraryCS_BGUGetCurrentUserType");
//static_assert(sizeof(BGUFunctionLibraryCS_BGUGetCurrentUserType) == 0x000004, "Wrong size on BGUFunctionLibraryCS_BGUGetCurrentUserType");
//static_assert(offsetof(BGUFunctionLibraryCS_BGUGetCurrentUserType, ReturnValue) == 0x000000, "Member 'BGUFunctionLibraryCS_BGUGetCurrentUserType::ReturnValue' has a wrong offset!");

// Function b1-Managed.BGUFunctionLibraryCS.BGUCallPointsRegister
// 0x0090 (0x0090 - 0x0000)
struct BGUFunctionLibraryCS_BGUCallPointsRegister final
{
public:
	class AActor*                                 OwnerCharacter;                                    // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         RequestID;                                         // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	EPointsGenType                                GenType;                                           // 0x000C(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_D[0x3];                                        // 0x000D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FPointsGenExtParam                     ExtParam;                                          // 0x0010(0x0080)(Parm, HasGetValueTypeHash)
};
//static_assert(alignof(BGUFunctionLibraryCS_BGUCallPointsRegister) == 0x000008, "Wrong alignment on BGUFunctionLibraryCS_BGUCallPointsRegister");
//static_assert(sizeof(BGUFunctionLibraryCS_BGUCallPointsRegister) == 0x000090, "Wrong size on BGUFunctionLibraryCS_BGUCallPointsRegister");
//static_assert(offsetof(BGUFunctionLibraryCS_BGUCallPointsRegister, OwnerCharacter) == 0x000000, "Member 'BGUFunctionLibraryCS_BGUCallPointsRegister::OwnerCharacter' has a wrong offset!");
//static_assert(offsetof(BGUFunctionLibraryCS_BGUCallPointsRegister, RequestID) == 0x000008, "Member 'BGUFunctionLibraryCS_BGUCallPointsRegister::RequestID' has a wrong offset!");
//static_assert(offsetof(BGUFunctionLibraryCS_BGUCallPointsRegister, GenType) == 0x00000C, "Member 'BGUFunctionLibraryCS_BGUCallPointsRegister::GenType' has a wrong offset!");
//static_assert(offsetof(BGUFunctionLibraryCS_BGUCallPointsRegister, ExtParam) == 0x000010, "Member 'BGUFunctionLibraryCS_BGUCallPointsRegister::ExtParam' has a wrong offset!");

// Function b1-Managed.BGUFunctionLibraryCS.BGUSetSkillSuperArmor
// 0x0018 (0x0018 - 0x0000)
struct BGUFunctionLibraryCS_BGUSetSkillSuperArmor final
{
public:
	class AActor*                                 Unit;                                              // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UAnimMontage*                           BreakSkillSupperArmorAM;                           // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         SkillSuperArmorValue;                              // 0x0010(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
//static_assert(alignof(BGUFunctionLibraryCS_BGUSetSkillSuperArmor) == 0x000008, "Wrong alignment on BGUFunctionLibraryCS_BGUSetSkillSuperArmor");
//static_assert(sizeof(BGUFunctionLibraryCS_BGUSetSkillSuperArmor) == 0x000018, "Wrong size on BGUFunctionLibraryCS_BGUSetSkillSuperArmor");
//static_assert(offsetof(BGUFunctionLibraryCS_BGUSetSkillSuperArmor, Unit) == 0x000000, "Member 'BGUFunctionLibraryCS_BGUSetSkillSuperArmor::Unit' has a wrong offset!");
//static_assert(offsetof(BGUFunctionLibraryCS_BGUSetSkillSuperArmor, BreakSkillSupperArmorAM) == 0x000008, "Member 'BGUFunctionLibraryCS_BGUSetSkillSuperArmor::BreakSkillSupperArmorAM' has a wrong offset!");
//static_assert(offsetof(BGUFunctionLibraryCS_BGUSetSkillSuperArmor, SkillSuperArmorValue) == 0x000010, "Member 'BGUFunctionLibraryCS_BGUSetSkillSuperArmor::SkillSuperArmorValue' has a wrong offset!");

// Function b1-Managed.BGUFunctionLibraryCS.BGUSetUnitSimpleState
// 0x0010 (0x0010 - 0x0000)
struct BGUFunctionLibraryCS_BGUSetUnitSimpleState final
{
public:
	class AActor*                                 Unit;                                              // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	EBGUSimpleState                               SimpleState;                                       // 0x0008(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         IsRemove : 1;                                      // 0x0009(0x0001)(BitIndex: 0x00, PropSize: 0x0001 (Parm, NoDestructor, HasGetValueTypeHash))
};
//static_assert(alignof(BGUFunctionLibraryCS_BGUSetUnitSimpleState) == 0x000008, "Wrong alignment on BGUFunctionLibraryCS_BGUSetUnitSimpleState");
//static_assert(sizeof(BGUFunctionLibraryCS_BGUSetUnitSimpleState) == 0x000010, "Wrong size on BGUFunctionLibraryCS_BGUSetUnitSimpleState");
//static_assert(offsetof(BGUFunctionLibraryCS_BGUSetUnitSimpleState, Unit) == 0x000000, "Member 'BGUFunctionLibraryCS_BGUSetUnitSimpleState::Unit' has a wrong offset!");
//static_assert(offsetof(BGUFunctionLibraryCS_BGUSetUnitSimpleState, SimpleState) == 0x000008, "Member 'BGUFunctionLibraryCS_BGUSetUnitSimpleState::SimpleState' has a wrong offset!");

// Function b1-Managed.BGUFunctionLibraryCS.BGUUnitCastFaBaoSkill
// 0x0008 (0x0008 - 0x0000)
struct BGUFunctionLibraryCS_BGUUnitCastFaBaoSkill final
{
public:
	class AActor*                                 Unit;                                              // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
//static_assert(alignof(BGUFunctionLibraryCS_BGUUnitCastFaBaoSkill) == 0x000008, "Wrong alignment on BGUFunctionLibraryCS_BGUUnitCastFaBaoSkill");
//static_assert(sizeof(BGUFunctionLibraryCS_BGUUnitCastFaBaoSkill) == 0x000008, "Wrong size on BGUFunctionLibraryCS_BGUUnitCastFaBaoSkill");
//static_assert(offsetof(BGUFunctionLibraryCS_BGUUnitCastFaBaoSkill, Unit) == 0x000000, "Member 'BGUFunctionLibraryCS_BGUUnitCastFaBaoSkill::Unit' has a wrong offset!");

// Function b1-Managed.BGUFunctionLibraryCS.TriggerEffectToTarget
// 0x0018 (0x0018 - 0x0000)
struct BGUFunctionLibraryCS_TriggerEffectToTarget final
{
public:
	class AActor*                                 Unit;                                              // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         EffectID;                                          // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class AActor*                                 Target;                                            // 0x0010(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
//static_assert(alignof(BGUFunctionLibraryCS_TriggerEffectToTarget) == 0x000008, "Wrong alignment on BGUFunctionLibraryCS_TriggerEffectToTarget");
//static_assert(sizeof(BGUFunctionLibraryCS_TriggerEffectToTarget) == 0x000018, "Wrong size on BGUFunctionLibraryCS_TriggerEffectToTarget");
//static_assert(offsetof(BGUFunctionLibraryCS_TriggerEffectToTarget, Unit) == 0x000000, "Member 'BGUFunctionLibraryCS_TriggerEffectToTarget::Unit' has a wrong offset!");
//static_assert(offsetof(BGUFunctionLibraryCS_TriggerEffectToTarget, EffectID) == 0x000008, "Member 'BGUFunctionLibraryCS_TriggerEffectToTarget::EffectID' has a wrong offset!");
//static_assert(offsetof(BGUFunctionLibraryCS_TriggerEffectToTarget, Target) == 0x000010, "Member 'BGUFunctionLibraryCS_TriggerEffectToTarget::Target' has a wrong offset!");

// Function b1-Managed.BGUFunctionLibraryCS.CheckCurCeilingHeight
// 0x0010 (0x0010 - 0x0000)
struct BGUFunctionLibraryCS_CheckCurCeilingHeight final
{
public:
	class ACharacter*                             Character;                                         // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         LineTraceLength;                                   // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         ReturnValue;                                       // 0x000C(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
//static_assert(alignof(BGUFunctionLibraryCS_CheckCurCeilingHeight) == 0x000008, "Wrong alignment on BGUFunctionLibraryCS_CheckCurCeilingHeight");
//static_assert(sizeof(BGUFunctionLibraryCS_CheckCurCeilingHeight) == 0x000010, "Wrong size on BGUFunctionLibraryCS_CheckCurCeilingHeight");
//static_assert(offsetof(BGUFunctionLibraryCS_CheckCurCeilingHeight, Character) == 0x000000, "Member 'BGUFunctionLibraryCS_CheckCurCeilingHeight::Character' has a wrong offset!");
//static_assert(offsetof(BGUFunctionLibraryCS_CheckCurCeilingHeight, LineTraceLength) == 0x000008, "Member 'BGUFunctionLibraryCS_CheckCurCeilingHeight::LineTraceLength' has a wrong offset!");
//static_assert(offsetof(BGUFunctionLibraryCS_CheckCurCeilingHeight, ReturnValue) == 0x00000C, "Member 'BGUFunctionLibraryCS_CheckCurCeilingHeight::ReturnValue' has a wrong offset!");

// Function b1-Managed.BGUFunctionLibraryCS.BGUHasUnitSimpleState
// 0x0010 (0x0010 - 0x0000)
struct BGUFunctionLibraryCS_BGUHasUnitSimpleState final
{
public:
	class AActor*                                 Unit;                                              // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	EBGUSimpleState                               SimpleState;                                       // 0x0008(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         ReturnValue : 1;                                   // 0x0009(0x0001)(BitIndex: 0x00, PropSize: 0x0001 (Parm, OutParm, ReturnParm, NoDestructor, HasGetValueTypeHash))
};
//static_assert(alignof(BGUFunctionLibraryCS_BGUHasUnitSimpleState) == 0x000008, "Wrong alignment on BGUFunctionLibraryCS_BGUHasUnitSimpleState");
//static_assert(sizeof(BGUFunctionLibraryCS_BGUHasUnitSimpleState) == 0x000010, "Wrong size on BGUFunctionLibraryCS_BGUHasUnitSimpleState");
//static_assert(offsetof(BGUFunctionLibraryCS_BGUHasUnitSimpleState, Unit) == 0x000000, "Member 'BGUFunctionLibraryCS_BGUHasUnitSimpleState::Unit' has a wrong offset!");
//static_assert(offsetof(BGUFunctionLibraryCS_BGUHasUnitSimpleState, SimpleState) == 0x000008, "Member 'BGUFunctionLibraryCS_BGUHasUnitSimpleState::SimpleState' has a wrong offset!");

// Function b1-Managed.BGUFunctionLibraryCS.ExitPlayerSkillCamera
// 0x0008 (0x0008 - 0x0000)
struct BGUFunctionLibraryCS_ExitPlayerSkillCamera final
{
public:
	class UObject*                                WorldContext;                                      // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
//static_assert(alignof(BGUFunctionLibraryCS_ExitPlayerSkillCamera) == 0x000008, "Wrong alignment on BGUFunctionLibraryCS_ExitPlayerSkillCamera");
//static_assert(sizeof(BGUFunctionLibraryCS_ExitPlayerSkillCamera) == 0x000008, "Wrong size on BGUFunctionLibraryCS_ExitPlayerSkillCamera");
//static_assert(offsetof(BGUFunctionLibraryCS_ExitPlayerSkillCamera, WorldContext) == 0x000000, "Member 'BGUFunctionLibraryCS_ExitPlayerSkillCamera::WorldContext' has a wrong offset!");

// Function b1-Managed.BGUFunctionLibraryCS.EnterWeakPerformState
// 0x0010 (0x0010 - 0x0000)
struct BGUFunctionLibraryCS_EnterWeakPerformState final
{
public:
	class UObject*                                InWorldContext;                                    // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         ConfigID;                                          // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
//static_assert(alignof(BGUFunctionLibraryCS_EnterWeakPerformState) == 0x000008, "Wrong alignment on BGUFunctionLibraryCS_EnterWeakPerformState");
//static_assert(sizeof(BGUFunctionLibraryCS_EnterWeakPerformState) == 0x000010, "Wrong size on BGUFunctionLibraryCS_EnterWeakPerformState");
//static_assert(offsetof(BGUFunctionLibraryCS_EnterWeakPerformState, InWorldContext) == 0x000000, "Member 'BGUFunctionLibraryCS_EnterWeakPerformState::InWorldContext' has a wrong offset!");
//static_assert(offsetof(BGUFunctionLibraryCS_EnterWeakPerformState, ConfigID) == 0x000008, "Member 'BGUFunctionLibraryCS_EnterWeakPerformState::ConfigID' has a wrong offset!");

// Function b1-Managed.BGUFunctionLibraryCS.HandleAiConversation
// 0x0010 (0x0010 - 0x0000)
struct BGUFunctionLibraryCS_HandleAiConversation final
{
public:
	class AActor*                                 Caster;                                            // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         ConversationContentID;                             // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
//static_assert(alignof(BGUFunctionLibraryCS_HandleAiConversation) == 0x000008, "Wrong alignment on BGUFunctionLibraryCS_HandleAiConversation");
//static_assert(sizeof(BGUFunctionLibraryCS_HandleAiConversation) == 0x000010, "Wrong size on BGUFunctionLibraryCS_HandleAiConversation");
//static_assert(offsetof(BGUFunctionLibraryCS_HandleAiConversation, Caster) == 0x000000, "Member 'BGUFunctionLibraryCS_HandleAiConversation::Caster' has a wrong offset!");
//static_assert(offsetof(BGUFunctionLibraryCS_HandleAiConversation, ConversationContentID) == 0x000008, "Member 'BGUFunctionLibraryCS_HandleAiConversation::ConversationContentID' has a wrong offset!");

// Function b1-Managed.BGUFunctionLibraryCS.SetTamerStrategyArea
// 0x0010 (0x0010 - 0x0000)
struct BGUFunctionLibraryCS_SetTamerStrategyArea final
{
public:
	class UObject*                                InWorldContext;                                    // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	ETamerStrategyArea                            InArea;                                            // 0x0008(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
//static_assert(alignof(BGUFunctionLibraryCS_SetTamerStrategyArea) == 0x000008, "Wrong alignment on BGUFunctionLibraryCS_SetTamerStrategyArea");
//static_assert(sizeof(BGUFunctionLibraryCS_SetTamerStrategyArea) == 0x000010, "Wrong size on BGUFunctionLibraryCS_SetTamerStrategyArea");
//static_assert(offsetof(BGUFunctionLibraryCS_SetTamerStrategyArea, InWorldContext) == 0x000000, "Member 'BGUFunctionLibraryCS_SetTamerStrategyArea::InWorldContext' has a wrong offset!");
//static_assert(offsetof(BGUFunctionLibraryCS_SetTamerStrategyArea, InArea) == 0x000008, "Member 'BGUFunctionLibraryCS_SetTamerStrategyArea::InArea' has a wrong offset!");

// Function b1-Managed.BGUFunctionLibraryCS.GetProjectBranchName
// 0x0010 (0x0010 - 0x0000)
struct BGUFunctionLibraryCS_GetProjectBranchName final
{
public:
	class FString                                 ReturnValue;                                       // 0x0000(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash)
};
//static_assert(alignof(BGUFunctionLibraryCS_GetProjectBranchName) == 0x000008, "Wrong alignment on BGUFunctionLibraryCS_GetProjectBranchName");
//static_assert(sizeof(BGUFunctionLibraryCS_GetProjectBranchName) == 0x000010, "Wrong size on BGUFunctionLibraryCS_GetProjectBranchName");
//static_assert(offsetof(BGUFunctionLibraryCS_GetProjectBranchName, ReturnValue) == 0x000000, "Member 'BGUFunctionLibraryCS_GetProjectBranchName::ReturnValue' has a wrong offset!");

// Function b1-Managed.BGUFunctionLibraryCS.BGUGetActiveGameMode
// 0x0004 (0x0004 - 0x0000)
struct BGUFunctionLibraryCS_BGUGetActiveGameMode final
{
public:
	int32                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
//static_assert(alignof(BGUFunctionLibraryCS_BGUGetActiveGameMode) == 0x000004, "Wrong alignment on BGUFunctionLibraryCS_BGUGetActiveGameMode");
//static_assert(sizeof(BGUFunctionLibraryCS_BGUGetActiveGameMode) == 0x000004, "Wrong size on BGUFunctionLibraryCS_BGUGetActiveGameMode");
//static_assert(offsetof(BGUFunctionLibraryCS_BGUGetActiveGameMode, ReturnValue) == 0x000000, "Member 'BGUFunctionLibraryCS_BGUGetActiveGameMode::ReturnValue' has a wrong offset!");

// Function b1-Managed.BGUFunctionLibraryCS.TriggerSwitchPhysics
// 0x0010 (0x0010 - 0x0000)
struct BGUFunctionLibraryCS_TriggerSwitchPhysics final
{
public:
	class AActor*                                 Unit;                                              // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         ReturnValue;                                       // 0x0008(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
//static_assert(alignof(BGUFunctionLibraryCS_TriggerSwitchPhysics) == 0x000008, "Wrong alignment on BGUFunctionLibraryCS_TriggerSwitchPhysics");
//static_assert(sizeof(BGUFunctionLibraryCS_TriggerSwitchPhysics) == 0x000010, "Wrong size on BGUFunctionLibraryCS_TriggerSwitchPhysics");
//static_assert(offsetof(BGUFunctionLibraryCS_TriggerSwitchPhysics, Unit) == 0x000000, "Member 'BGUFunctionLibraryCS_TriggerSwitchPhysics::Unit' has a wrong offset!");
//static_assert(offsetof(BGUFunctionLibraryCS_TriggerSwitchPhysics, ReturnValue) == 0x000008, "Member 'BGUFunctionLibraryCS_TriggerSwitchPhysics::ReturnValue' has a wrong offset!");

// Function b1-Managed.BGUFunctionLibraryCS.SwitchFreeCameraMode
// 0x0008 (0x0008 - 0x0000)
struct BGUFunctionLibraryCS_SwitchFreeCameraMode final
{
public:
	class UObject*                                InWorldContext;                                    // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
//static_assert(alignof(BGUFunctionLibraryCS_SwitchFreeCameraMode) == 0x000008, "Wrong alignment on BGUFunctionLibraryCS_SwitchFreeCameraMode");
//static_assert(sizeof(BGUFunctionLibraryCS_SwitchFreeCameraMode) == 0x000008, "Wrong size on BGUFunctionLibraryCS_SwitchFreeCameraMode");
//static_assert(offsetof(BGUFunctionLibraryCS_SwitchFreeCameraMode, InWorldContext) == 0x000000, "Member 'BGUFunctionLibraryCS_SwitchFreeCameraMode::InWorldContext' has a wrong offset!");

// Function b1-Managed.BGUFunctionLibraryCS.DestroyAllProjectile
// 0x0008 (0x0008 - 0x0000)
struct BGUFunctionLibraryCS_DestroyAllProjectile final
{
public:
	class AActor*                                 Unit;                                              // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
//static_assert(alignof(BGUFunctionLibraryCS_DestroyAllProjectile) == 0x000008, "Wrong alignment on BGUFunctionLibraryCS_DestroyAllProjectile");
//static_assert(sizeof(BGUFunctionLibraryCS_DestroyAllProjectile) == 0x000008, "Wrong size on BGUFunctionLibraryCS_DestroyAllProjectile");
//static_assert(offsetof(BGUFunctionLibraryCS_DestroyAllProjectile, Unit) == 0x000000, "Member 'BGUFunctionLibraryCS_DestroyAllProjectile::Unit' has a wrong offset!");

// Function b1-Managed.BGUFunctionLibraryCS.BGUGetCachedPointSet
// 0x0020 (0x0020 - 0x0000)
struct BGUFunctionLibraryCS_BGUGetCachedPointSet final
{
public:
	class AActor*                                 OwnerCharacter;                                    // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         RequestID;                                         // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<struct FVector>                        ReturnValue;                                       // 0x0010(0x0010)(Parm, OutParm, ReturnParm)
};
//static_assert(alignof(BGUFunctionLibraryCS_BGUGetCachedPointSet) == 0x000008, "Wrong alignment on BGUFunctionLibraryCS_BGUGetCachedPointSet");
//static_assert(sizeof(BGUFunctionLibraryCS_BGUGetCachedPointSet) == 0x000020, "Wrong size on BGUFunctionLibraryCS_BGUGetCachedPointSet");
//static_assert(offsetof(BGUFunctionLibraryCS_BGUGetCachedPointSet, OwnerCharacter) == 0x000000, "Member 'BGUFunctionLibraryCS_BGUGetCachedPointSet::OwnerCharacter' has a wrong offset!");
//static_assert(offsetof(BGUFunctionLibraryCS_BGUGetCachedPointSet, RequestID) == 0x000008, "Member 'BGUFunctionLibraryCS_BGUGetCachedPointSet::RequestID' has a wrong offset!");
//static_assert(offsetof(BGUFunctionLibraryCS_BGUGetCachedPointSet, ReturnValue) == 0x000010, "Member 'BGUFunctionLibraryCS_BGUGetCachedPointSet::ReturnValue' has a wrong offset!");

// Function b1-Managed.BGUFunctionLibraryCS.ExitWeakPerformState
// 0x0008 (0x0008 - 0x0000)
struct BGUFunctionLibraryCS_ExitWeakPerformState final
{
public:
	class UObject*                                InWorldContext;                                    // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
//static_assert(alignof(BGUFunctionLibraryCS_ExitWeakPerformState) == 0x000008, "Wrong alignment on BGUFunctionLibraryCS_ExitWeakPerformState");
//static_assert(sizeof(BGUFunctionLibraryCS_ExitWeakPerformState) == 0x000008, "Wrong size on BGUFunctionLibraryCS_ExitWeakPerformState");
//static_assert(offsetof(BGUFunctionLibraryCS_ExitWeakPerformState, InWorldContext) == 0x000000, "Member 'BGUFunctionLibraryCS_ExitWeakPerformState::InWorldContext' has a wrong offset!");

// Function b1-Managed.BGUFunctionLibraryCS.BGUPlatformPatroRota
// 0x0010 (0x0010 - 0x0000)
struct BGUFunctionLibraryCS_BGUPlatformPatroRota final
{
public:
	class AActor*                                 Unit;                                              // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         MaxRate;                                           // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         Speed;                                             // 0x000C(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
//static_assert(alignof(BGUFunctionLibraryCS_BGUPlatformPatroRota) == 0x000008, "Wrong alignment on BGUFunctionLibraryCS_BGUPlatformPatroRota");
//static_assert(sizeof(BGUFunctionLibraryCS_BGUPlatformPatroRota) == 0x000010, "Wrong size on BGUFunctionLibraryCS_BGUPlatformPatroRota");
//static_assert(offsetof(BGUFunctionLibraryCS_BGUPlatformPatroRota, Unit) == 0x000000, "Member 'BGUFunctionLibraryCS_BGUPlatformPatroRota::Unit' has a wrong offset!");
//static_assert(offsetof(BGUFunctionLibraryCS_BGUPlatformPatroRota, MaxRate) == 0x000008, "Member 'BGUFunctionLibraryCS_BGUPlatformPatroRota::MaxRate' has a wrong offset!");
//static_assert(offsetof(BGUFunctionLibraryCS_BGUPlatformPatroRota, Speed) == 0x00000C, "Member 'BGUFunctionLibraryCS_BGUPlatformPatroRota::Speed' has a wrong offset!");

// Function b1-Managed.BGUFunctionLibraryCS.BGUPlatformPatroMove
// 0x0040 (0x0040 - 0x0000)
struct BGUFunctionLibraryCS_BGUPlatformPatroMove final
{
public:
	class AActor*                                 Unit;                                              // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                BeginPos;                                          // 0x0008(0x0018)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                EndPos;                                            // 0x0020(0x0018)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         Speed;                                             // 0x0038(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
//static_assert(alignof(BGUFunctionLibraryCS_BGUPlatformPatroMove) == 0x000008, "Wrong alignment on BGUFunctionLibraryCS_BGUPlatformPatroMove");
//static_assert(sizeof(BGUFunctionLibraryCS_BGUPlatformPatroMove) == 0x000040, "Wrong size on BGUFunctionLibraryCS_BGUPlatformPatroMove");
//static_assert(offsetof(BGUFunctionLibraryCS_BGUPlatformPatroMove, Unit) == 0x000000, "Member 'BGUFunctionLibraryCS_BGUPlatformPatroMove::Unit' has a wrong offset!");
//static_assert(offsetof(BGUFunctionLibraryCS_BGUPlatformPatroMove, BeginPos) == 0x000008, "Member 'BGUFunctionLibraryCS_BGUPlatformPatroMove::BeginPos' has a wrong offset!");
//static_assert(offsetof(BGUFunctionLibraryCS_BGUPlatformPatroMove, EndPos) == 0x000020, "Member 'BGUFunctionLibraryCS_BGUPlatformPatroMove::EndPos' has a wrong offset!");
//static_assert(offsetof(BGUFunctionLibraryCS_BGUPlatformPatroMove, Speed) == 0x000038, "Member 'BGUFunctionLibraryCS_BGUPlatformPatroMove::Speed' has a wrong offset!");

// Function b1-Managed.BGUFunctionLibraryCS.ClearPhysAnimSetting
// 0x0010 (0x0010 - 0x0000)
struct BGUFunctionLibraryCS_ClearPhysAnimSetting final
{
public:
	class AActor*                                 Unit;                                              // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         ReturnValue;                                       // 0x0008(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
//static_assert(alignof(BGUFunctionLibraryCS_ClearPhysAnimSetting) == 0x000008, "Wrong alignment on BGUFunctionLibraryCS_ClearPhysAnimSetting");
//static_assert(sizeof(BGUFunctionLibraryCS_ClearPhysAnimSetting) == 0x000010, "Wrong size on BGUFunctionLibraryCS_ClearPhysAnimSetting");
//static_assert(offsetof(BGUFunctionLibraryCS_ClearPhysAnimSetting, Unit) == 0x000000, "Member 'BGUFunctionLibraryCS_ClearPhysAnimSetting::Unit' has a wrong offset!");
//static_assert(offsetof(BGUFunctionLibraryCS_ClearPhysAnimSetting, ReturnValue) == 0x000008, "Member 'BGUFunctionLibraryCS_ClearPhysAnimSetting::ReturnValue' has a wrong offset!");

// Function b1-Managed.BGUFunctionLibraryCS.SkipCurrentSequence
// 0x0008 (0x0008 - 0x0000)
struct BGUFunctionLibraryCS_SkipCurrentSequence final
{
public:
	class UObject*                                WorldContext;                                      // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
//static_assert(alignof(BGUFunctionLibraryCS_SkipCurrentSequence) == 0x000008, "Wrong alignment on BGUFunctionLibraryCS_SkipCurrentSequence");
//static_assert(sizeof(BGUFunctionLibraryCS_SkipCurrentSequence) == 0x000008, "Wrong size on BGUFunctionLibraryCS_SkipCurrentSequence");
//static_assert(offsetof(BGUFunctionLibraryCS_SkipCurrentSequence, WorldContext) == 0x000000, "Member 'BGUFunctionLibraryCS_SkipCurrentSequence::WorldContext' has a wrong offset!");

// Function b1-Managed.BGUFunctionLibraryCS.BGUSetSecondFogData
// 0x0018 (0x0018 - 0x0000)
struct BGUFunctionLibraryCS_BGUSetSecondFogData final
{
public:
	class UExponentialHeightFogComponent*         Ehfcomp;                                           // 0x0000(0x0008)(ExportObject, Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FExponentialHeightFogData              SecondFogData;                                     // 0x0008(0x000C)(Parm, NoDestructor)
};
//static_assert(alignof(BGUFunctionLibraryCS_BGUSetSecondFogData) == 0x000008, "Wrong alignment on BGUFunctionLibraryCS_BGUSetSecondFogData");
//static_assert(sizeof(BGUFunctionLibraryCS_BGUSetSecondFogData) == 0x000018, "Wrong size on BGUFunctionLibraryCS_BGUSetSecondFogData");
//static_assert(offsetof(BGUFunctionLibraryCS_BGUSetSecondFogData, Ehfcomp) == 0x000000, "Member 'BGUFunctionLibraryCS_BGUSetSecondFogData::Ehfcomp' has a wrong offset!");
//static_assert(offsetof(BGUFunctionLibraryCS_BGUSetSecondFogData, SecondFogData) == 0x000008, "Member 'BGUFunctionLibraryCS_BGUSetSecondFogData::SecondFogData' has a wrong offset!");

// Function b1-Managed.BGUFunctionLibraryCS.BGUGetWeaponByIndex
// 0x0018 (0x0018 - 0x0000)
struct BGUFunctionLibraryCS_BGUGetWeaponByIndex final
{
public:
	class AActor*                                 Owner;                                             // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Index_0;                                           // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class AActor*                                 ReturnValue;                                       // 0x0010(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
//static_assert(alignof(BGUFunctionLibraryCS_BGUGetWeaponByIndex) == 0x000008, "Wrong alignment on BGUFunctionLibraryCS_BGUGetWeaponByIndex");
//static_assert(sizeof(BGUFunctionLibraryCS_BGUGetWeaponByIndex) == 0x000018, "Wrong size on BGUFunctionLibraryCS_BGUGetWeaponByIndex");
//static_assert(offsetof(BGUFunctionLibraryCS_BGUGetWeaponByIndex, Owner) == 0x000000, "Member 'BGUFunctionLibraryCS_BGUGetWeaponByIndex::Owner' has a wrong offset!");
//static_assert(offsetof(BGUFunctionLibraryCS_BGUGetWeaponByIndex, Index_0) == 0x000008, "Member 'BGUFunctionLibraryCS_BGUGetWeaponByIndex::Index_0' has a wrong offset!");
//static_assert(offsetof(BGUFunctionLibraryCS_BGUGetWeaponByIndex, ReturnValue) == 0x000010, "Member 'BGUFunctionLibraryCS_BGUGetWeaponByIndex::ReturnValue' has a wrong offset!");

// Function b1-Managed.BGUFunctionLibraryCS.FindTraceStatResult
// 0x0020 (0x0020 - 0x0000)
struct BGUFunctionLibraryCS_FindTraceStatResult final
{
public:
	class UObject*                                WorldContext;                                      // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class FString                                 Name_0;                                            // 0x0008(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash)
	float                                         ReturnValue;                                       // 0x0018(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
//static_assert(alignof(BGUFunctionLibraryCS_FindTraceStatResult) == 0x000008, "Wrong alignment on BGUFunctionLibraryCS_FindTraceStatResult");
//static_assert(sizeof(BGUFunctionLibraryCS_FindTraceStatResult) == 0x000020, "Wrong size on BGUFunctionLibraryCS_FindTraceStatResult");
//static_assert(offsetof(BGUFunctionLibraryCS_FindTraceStatResult, WorldContext) == 0x000000, "Member 'BGUFunctionLibraryCS_FindTraceStatResult::WorldContext' has a wrong offset!");
//static_assert(offsetof(BGUFunctionLibraryCS_FindTraceStatResult, Name_0) == 0x000008, "Member 'BGUFunctionLibraryCS_FindTraceStatResult::Name_0' has a wrong offset!");
//static_assert(offsetof(BGUFunctionLibraryCS_FindTraceStatResult, ReturnValue) == 0x000018, "Member 'BGUFunctionLibraryCS_FindTraceStatResult::ReturnValue' has a wrong offset!");

// Function b1-Managed.BGUFunctionLibraryCS.BGUUnitUnequipFaBao
// 0x0008 (0x0008 - 0x0000)
struct BGUFunctionLibraryCS_BGUUnitUnequipFaBao final
{
public:
	class AActor*                                 Unit;                                              // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
//static_assert(alignof(BGUFunctionLibraryCS_BGUUnitUnequipFaBao) == 0x000008, "Wrong alignment on BGUFunctionLibraryCS_BGUUnitUnequipFaBao");
//static_assert(sizeof(BGUFunctionLibraryCS_BGUUnitUnequipFaBao) == 0x000008, "Wrong size on BGUFunctionLibraryCS_BGUUnitUnequipFaBao");
//static_assert(offsetof(BGUFunctionLibraryCS_BGUUnitUnequipFaBao, Unit) == 0x000000, "Member 'BGUFunctionLibraryCS_BGUUnitUnequipFaBao::Unit' has a wrong offset!");

// Function b1-Managed.BGUFunctionLibraryCS.DisablePhysicalMove
// 0x0010 (0x0010 - 0x0000)
struct BGUFunctionLibraryCS_DisablePhysicalMove final
{
public:
	class AActor*                                 Unit;                                              // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         bDisable : 1;                                      // 0x0008(0x0001)(BitIndex: 0x00, PropSize: 0x0001 (Parm, NoDestructor, HasGetValueTypeHash))
};
//static_assert(alignof(BGUFunctionLibraryCS_DisablePhysicalMove) == 0x000008, "Wrong alignment on BGUFunctionLibraryCS_DisablePhysicalMove");
//static_assert(sizeof(BGUFunctionLibraryCS_DisablePhysicalMove) == 0x000010, "Wrong size on BGUFunctionLibraryCS_DisablePhysicalMove");
//static_assert(offsetof(BGUFunctionLibraryCS_DisablePhysicalMove, Unit) == 0x000000, "Member 'BGUFunctionLibraryCS_DisablePhysicalMove::Unit' has a wrong offset!");

// Function b1-Managed.BGUFunctionLibraryCS.BGUTriggerUnitState
// 0x0010 (0x0010 - 0x0000)
struct BGUFunctionLibraryCS_BGUTriggerUnitState final
{
public:
	class AActor*                                 Actor;                                             // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	EBUStateTrigger                               StateTrigger;                                      // 0x0008(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_9[0x3];                                        // 0x0009(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         Time;                                              // 0x000C(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
//static_assert(alignof(BGUFunctionLibraryCS_BGUTriggerUnitState) == 0x000008, "Wrong alignment on BGUFunctionLibraryCS_BGUTriggerUnitState");
//static_assert(sizeof(BGUFunctionLibraryCS_BGUTriggerUnitState) == 0x000010, "Wrong size on BGUFunctionLibraryCS_BGUTriggerUnitState");
//static_assert(offsetof(BGUFunctionLibraryCS_BGUTriggerUnitState, Actor) == 0x000000, "Member 'BGUFunctionLibraryCS_BGUTriggerUnitState::Actor' has a wrong offset!");
//static_assert(offsetof(BGUFunctionLibraryCS_BGUTriggerUnitState, StateTrigger) == 0x000008, "Member 'BGUFunctionLibraryCS_BGUTriggerUnitState::StateTrigger' has a wrong offset!");
//static_assert(offsetof(BGUFunctionLibraryCS_BGUTriggerUnitState, Time) == 0x00000C, "Member 'BGUFunctionLibraryCS_BGUTriggerUnitState::Time' has a wrong offset!");

// Function b1-Managed.BGUFunctionLibraryCS.BGURemoveImmobility
// 0x0008 (0x0008 - 0x0000)
struct BGUFunctionLibraryCS_BGURemoveImmobility final
{
public:
	class AActor*                                 Unit;                                              // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
//static_assert(alignof(BGUFunctionLibraryCS_BGURemoveImmobility) == 0x000008, "Wrong alignment on BGUFunctionLibraryCS_BGURemoveImmobility");
//static_assert(sizeof(BGUFunctionLibraryCS_BGURemoveImmobility) == 0x000008, "Wrong size on BGUFunctionLibraryCS_BGURemoveImmobility");
//static_assert(offsetof(BGUFunctionLibraryCS_BGURemoveImmobility, Unit) == 0x000000, "Member 'BGUFunctionLibraryCS_BGURemoveImmobility::Unit' has a wrong offset!");

// Function b1-Managed.BGUFunctionLibraryCS.BGUToggleGlobalURO
// 0x0010 (0x0010 - 0x0000)
struct BGUFunctionLibraryCS_BGUToggleGlobalURO final
{
public:
	class UObject*                                UObj;                                              // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         bEnable : 1;                                       // 0x0008(0x0001)(BitIndex: 0x00, PropSize: 0x0001 (Parm, NoDestructor, HasGetValueTypeHash))
};
//static_assert(alignof(BGUFunctionLibraryCS_BGUToggleGlobalURO) == 0x000008, "Wrong alignment on BGUFunctionLibraryCS_BGUToggleGlobalURO");
//static_assert(sizeof(BGUFunctionLibraryCS_BGUToggleGlobalURO) == 0x000010, "Wrong size on BGUFunctionLibraryCS_BGUToggleGlobalURO");
//static_assert(offsetof(BGUFunctionLibraryCS_BGUToggleGlobalURO, UObj) == 0x000000, "Member 'BGUFunctionLibraryCS_BGUToggleGlobalURO::UObj' has a wrong offset!");

// Function b1-Managed.BGUFunctionLibraryCS.BGUSpawnGhostActor
// 0x0018 (0x0018 - 0x0000)
struct BGUFunctionLibraryCS_BGUSpawnGhostActor final
{
public:
	class AActor*                                 Target;                                            // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class FString                                 DAPath;                                            // 0x0008(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash)
};
//static_assert(alignof(BGUFunctionLibraryCS_BGUSpawnGhostActor) == 0x000008, "Wrong alignment on BGUFunctionLibraryCS_BGUSpawnGhostActor");
//static_assert(sizeof(BGUFunctionLibraryCS_BGUSpawnGhostActor) == 0x000018, "Wrong size on BGUFunctionLibraryCS_BGUSpawnGhostActor");
//static_assert(offsetof(BGUFunctionLibraryCS_BGUSpawnGhostActor, Target) == 0x000000, "Member 'BGUFunctionLibraryCS_BGUSpawnGhostActor::Target' has a wrong offset!");
//static_assert(offsetof(BGUFunctionLibraryCS_BGUSpawnGhostActor, DAPath) == 0x000008, "Member 'BGUFunctionLibraryCS_BGUSpawnGhostActor::DAPath' has a wrong offset!");

// Function b1-Managed.BGUFunctionLibraryCS.BGUSetBehaviorTree
// 0x0010 (0x0010 - 0x0000)
struct BGUFunctionLibraryCS_BGUSetBehaviorTree final
{
public:
	class AActor*                                 Unit;                                              // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UBehaviorTree*                          BT;                                                // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
//static_assert(alignof(BGUFunctionLibraryCS_BGUSetBehaviorTree) == 0x000008, "Wrong alignment on BGUFunctionLibraryCS_BGUSetBehaviorTree");
//static_assert(sizeof(BGUFunctionLibraryCS_BGUSetBehaviorTree) == 0x000010, "Wrong size on BGUFunctionLibraryCS_BGUSetBehaviorTree");
//static_assert(offsetof(BGUFunctionLibraryCS_BGUSetBehaviorTree, Unit) == 0x000000, "Member 'BGUFunctionLibraryCS_BGUSetBehaviorTree::Unit' has a wrong offset!");
//static_assert(offsetof(BGUFunctionLibraryCS_BGUSetBehaviorTree, BT) == 0x000008, "Member 'BGUFunctionLibraryCS_BGUSetBehaviorTree::BT' has a wrong offset!");

// Function b1-Managed.BGUFunctionLibraryCS.KJLSpawnProjectile
// 0x0090 (0x0090 - 0x0000)
struct BGUFunctionLibraryCS_KJLSpawnProjectile final
{
public:
	class AActor*                                 BulletSpawner;                                     // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class AActor*                                 Target;                                            // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class FString                                 PointGeneratorTag;                                 // 0x0010(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash)
	int32                                         BulletID;                                          // 0x0020(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         LimitDistance_ToPlayer;                            // 0x0024(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UNiagaraSystem*                         LightningBeam;                                     // 0x0028(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class FString                                 LightningEndParamName;                             // 0x0030(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash)
	TArray<class FString>                         SocketList;                                        // 0x0040(0x0010)(Parm)
	int32                                         DummyBulletNum;                                    // 0x0050(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_54[0x4];                                       // 0x0054(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                EndPos_Noise;                                      // 0x0058(0x0018)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UNiagaraComponent*                      DummyNiagara;                                      // 0x0070(0x0008)(ExportObject, Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         DummyActiveDistance;                               // 0x0078(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_7C[0x4];                                       // 0x007C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector2D                              RandomInterval;                                    // 0x0080(0x0010)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
//static_assert(alignof(BGUFunctionLibraryCS_KJLSpawnProjectile) == 0x000008, "Wrong alignment on BGUFunctionLibraryCS_KJLSpawnProjectile");
//static_assert(sizeof(BGUFunctionLibraryCS_KJLSpawnProjectile) == 0x000090, "Wrong size on BGUFunctionLibraryCS_KJLSpawnProjectile");
//static_assert(offsetof(BGUFunctionLibraryCS_KJLSpawnProjectile, BulletSpawner) == 0x000000, "Member 'BGUFunctionLibraryCS_KJLSpawnProjectile::BulletSpawner' has a wrong offset!");
//static_assert(offsetof(BGUFunctionLibraryCS_KJLSpawnProjectile, Target) == 0x000008, "Member 'BGUFunctionLibraryCS_KJLSpawnProjectile::Target' has a wrong offset!");
//static_assert(offsetof(BGUFunctionLibraryCS_KJLSpawnProjectile, PointGeneratorTag) == 0x000010, "Member 'BGUFunctionLibraryCS_KJLSpawnProjectile::PointGeneratorTag' has a wrong offset!");
//static_assert(offsetof(BGUFunctionLibraryCS_KJLSpawnProjectile, BulletID) == 0x000020, "Member 'BGUFunctionLibraryCS_KJLSpawnProjectile::BulletID' has a wrong offset!");
//static_assert(offsetof(BGUFunctionLibraryCS_KJLSpawnProjectile, LimitDistance_ToPlayer) == 0x000024, "Member 'BGUFunctionLibraryCS_KJLSpawnProjectile::LimitDistance_ToPlayer' has a wrong offset!");
//static_assert(offsetof(BGUFunctionLibraryCS_KJLSpawnProjectile, LightningBeam) == 0x000028, "Member 'BGUFunctionLibraryCS_KJLSpawnProjectile::LightningBeam' has a wrong offset!");
//static_assert(offsetof(BGUFunctionLibraryCS_KJLSpawnProjectile, LightningEndParamName) == 0x000030, "Member 'BGUFunctionLibraryCS_KJLSpawnProjectile::LightningEndParamName' has a wrong offset!");
//static_assert(offsetof(BGUFunctionLibraryCS_KJLSpawnProjectile, SocketList) == 0x000040, "Member 'BGUFunctionLibraryCS_KJLSpawnProjectile::SocketList' has a wrong offset!");
//static_assert(offsetof(BGUFunctionLibraryCS_KJLSpawnProjectile, DummyBulletNum) == 0x000050, "Member 'BGUFunctionLibraryCS_KJLSpawnProjectile::DummyBulletNum' has a wrong offset!");
//static_assert(offsetof(BGUFunctionLibraryCS_KJLSpawnProjectile, EndPos_Noise) == 0x000058, "Member 'BGUFunctionLibraryCS_KJLSpawnProjectile::EndPos_Noise' has a wrong offset!");
//static_assert(offsetof(BGUFunctionLibraryCS_KJLSpawnProjectile, DummyNiagara) == 0x000070, "Member 'BGUFunctionLibraryCS_KJLSpawnProjectile::DummyNiagara' has a wrong offset!");
//static_assert(offsetof(BGUFunctionLibraryCS_KJLSpawnProjectile, DummyActiveDistance) == 0x000078, "Member 'BGUFunctionLibraryCS_KJLSpawnProjectile::DummyActiveDistance' has a wrong offset!");
//static_assert(offsetof(BGUFunctionLibraryCS_KJLSpawnProjectile, RandomInterval) == 0x000080, "Member 'BGUFunctionLibraryCS_KJLSpawnProjectile::RandomInterval' has a wrong offset!");

// Function b1-Managed.BGUFunctionLibraryCS.PlayFacialAnimTest
// 0x0020 (0x0020 - 0x0000)
struct BGUFunctionLibraryCS_PlayFacialAnimTest final
{
public:
	uint8                                         bPlay : 1;                                         // 0x0000(0x0001)(BitIndex: 0x00, PropSize: 0x0001 (Parm, NoDestructor, HasGetValueTypeHash))
	uint8                                         Pad_1[0x7];                                        // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class AActor*                                 Unit;                                              // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UAnimSequence*                          FacialAnim;                                        // 0x0010(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         TimeOffset;                                        // 0x0018(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         AutoBlendOutTime;                                  // 0x001C(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
//static_assert(alignof(BGUFunctionLibraryCS_PlayFacialAnimTest) == 0x000008, "Wrong alignment on BGUFunctionLibraryCS_PlayFacialAnimTest");
//static_assert(sizeof(BGUFunctionLibraryCS_PlayFacialAnimTest) == 0x000020, "Wrong size on BGUFunctionLibraryCS_PlayFacialAnimTest");
//static_assert(offsetof(BGUFunctionLibraryCS_PlayFacialAnimTest, Unit) == 0x000008, "Member 'BGUFunctionLibraryCS_PlayFacialAnimTest::Unit' has a wrong offset!");
//static_assert(offsetof(BGUFunctionLibraryCS_PlayFacialAnimTest, FacialAnim) == 0x000010, "Member 'BGUFunctionLibraryCS_PlayFacialAnimTest::FacialAnim' has a wrong offset!");
//static_assert(offsetof(BGUFunctionLibraryCS_PlayFacialAnimTest, TimeOffset) == 0x000018, "Member 'BGUFunctionLibraryCS_PlayFacialAnimTest::TimeOffset' has a wrong offset!");
//static_assert(offsetof(BGUFunctionLibraryCS_PlayFacialAnimTest, AutoBlendOutTime) == 0x00001C, "Member 'BGUFunctionLibraryCS_PlayFacialAnimTest::AutoBlendOutTime' has a wrong offset!");

// Function b1-Managed.BGUFunctionLibraryCS.InteruptPigsyStory
// 0x0008 (0x0008 - 0x0000)
struct BGUFunctionLibraryCS_InteruptPigsyStory final
{
public:
	class AActor*                                 Unit;                                              // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
//static_assert(alignof(BGUFunctionLibraryCS_InteruptPigsyStory) == 0x000008, "Wrong alignment on BGUFunctionLibraryCS_InteruptPigsyStory");
//static_assert(sizeof(BGUFunctionLibraryCS_InteruptPigsyStory) == 0x000008, "Wrong size on BGUFunctionLibraryCS_InteruptPigsyStory");
//static_assert(offsetof(BGUFunctionLibraryCS_InteruptPigsyStory, Unit) == 0x000000, "Member 'BGUFunctionLibraryCS_InteruptPigsyStory::Unit' has a wrong offset!");

// Function b1-Managed.BGUFunctionLibraryCS.BGUFullTransEnergy
// 0x0008 (0x0008 - 0x0000)
struct BGUFunctionLibraryCS_BGUFullTransEnergy final
{
public:
	class UObject*                                WorldContext;                                      // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
//static_assert(alignof(BGUFunctionLibraryCS_BGUFullTransEnergy) == 0x000008, "Wrong alignment on BGUFunctionLibraryCS_BGUFullTransEnergy");
//static_assert(sizeof(BGUFunctionLibraryCS_BGUFullTransEnergy) == 0x000008, "Wrong size on BGUFunctionLibraryCS_BGUFullTransEnergy");
//static_assert(offsetof(BGUFunctionLibraryCS_BGUFullTransEnergy, WorldContext) == 0x000000, "Member 'BGUFunctionLibraryCS_BGUFullTransEnergy::WorldContext' has a wrong offset!");

// Function b1-Managed.BGUFunctionLibraryCS.TimeLineNoiseTest
// 0x0020 (0x0020 - 0x0000)
struct BGUFunctionLibraryCS_TimeLineNoiseTest final
{
public:
	float                                         TotalTime;                                         // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         TimePointNum;                                      // 0x0004(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         NoiseInterregional;                                // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UCurveFloat*                            CurveFloat;                                        // 0x0010(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	ERichCurveInterpMode                          InterpMode;                                        // 0x0018(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
//static_assert(alignof(BGUFunctionLibraryCS_TimeLineNoiseTest) == 0x000008, "Wrong alignment on BGUFunctionLibraryCS_TimeLineNoiseTest");
//static_assert(sizeof(BGUFunctionLibraryCS_TimeLineNoiseTest) == 0x000020, "Wrong size on BGUFunctionLibraryCS_TimeLineNoiseTest");
//static_assert(offsetof(BGUFunctionLibraryCS_TimeLineNoiseTest, TotalTime) == 0x000000, "Member 'BGUFunctionLibraryCS_TimeLineNoiseTest::TotalTime' has a wrong offset!");
//static_assert(offsetof(BGUFunctionLibraryCS_TimeLineNoiseTest, TimePointNum) == 0x000004, "Member 'BGUFunctionLibraryCS_TimeLineNoiseTest::TimePointNum' has a wrong offset!");
//static_assert(offsetof(BGUFunctionLibraryCS_TimeLineNoiseTest, NoiseInterregional) == 0x000008, "Member 'BGUFunctionLibraryCS_TimeLineNoiseTest::NoiseInterregional' has a wrong offset!");
//static_assert(offsetof(BGUFunctionLibraryCS_TimeLineNoiseTest, CurveFloat) == 0x000010, "Member 'BGUFunctionLibraryCS_TimeLineNoiseTest::CurveFloat' has a wrong offset!");
//static_assert(offsetof(BGUFunctionLibraryCS_TimeLineNoiseTest, InterpMode) == 0x000018, "Member 'BGUFunctionLibraryCS_TimeLineNoiseTest::InterpMode' has a wrong offset!");

// Function b1-Managed.BGUFunctionLibraryCS.BGUAISetSpeedRate
// 0x0010 (0x0010 - 0x0000)
struct BGUFunctionLibraryCS_BGUAISetSpeedRate final
{
public:
	class AActor*                                 Unit;                                              // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         SpeedRate;                                         // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
//static_assert(alignof(BGUFunctionLibraryCS_BGUAISetSpeedRate) == 0x000008, "Wrong alignment on BGUFunctionLibraryCS_BGUAISetSpeedRate");
//static_assert(sizeof(BGUFunctionLibraryCS_BGUAISetSpeedRate) == 0x000010, "Wrong size on BGUFunctionLibraryCS_BGUAISetSpeedRate");
//static_assert(offsetof(BGUFunctionLibraryCS_BGUAISetSpeedRate, Unit) == 0x000000, "Member 'BGUFunctionLibraryCS_BGUAISetSpeedRate::Unit' has a wrong offset!");
//static_assert(offsetof(BGUFunctionLibraryCS_BGUAISetSpeedRate, SpeedRate) == 0x000008, "Member 'BGUFunctionLibraryCS_BGUAISetSpeedRate::SpeedRate' has a wrong offset!");

// Function b1-Managed.BGUFunctionLibraryCS.BGUPlayLockTarget
// 0x0010 (0x0010 - 0x0000)
struct BGUFunctionLibraryCS_BGUPlayLockTarget final
{
public:
	class AActor*                                 Owner;                                             // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class ABGUCharacterCS*                        TargetChr;                                         // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
//static_assert(alignof(BGUFunctionLibraryCS_BGUPlayLockTarget) == 0x000008, "Wrong alignment on BGUFunctionLibraryCS_BGUPlayLockTarget");
//static_assert(sizeof(BGUFunctionLibraryCS_BGUPlayLockTarget) == 0x000010, "Wrong size on BGUFunctionLibraryCS_BGUPlayLockTarget");
//static_assert(offsetof(BGUFunctionLibraryCS_BGUPlayLockTarget, Owner) == 0x000000, "Member 'BGUFunctionLibraryCS_BGUPlayLockTarget::Owner' has a wrong offset!");
//static_assert(offsetof(BGUFunctionLibraryCS_BGUPlayLockTarget, TargetChr) == 0x000008, "Member 'BGUFunctionLibraryCS_BGUPlayLockTarget::TargetChr' has a wrong offset!");

// Function b1-Managed.BGUFunctionLibraryCS.SwitchCameraGroup
// 0x0010 (0x0010 - 0x0000)
struct BGUFunctionLibraryCS_SwitchCameraGroup final
{
public:
	class UObject*                                WorldContext;                                      // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CameraGroupId;                                     // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
//static_assert(alignof(BGUFunctionLibraryCS_SwitchCameraGroup) == 0x000008, "Wrong alignment on BGUFunctionLibraryCS_SwitchCameraGroup");
//static_assert(sizeof(BGUFunctionLibraryCS_SwitchCameraGroup) == 0x000010, "Wrong size on BGUFunctionLibraryCS_SwitchCameraGroup");
//static_assert(offsetof(BGUFunctionLibraryCS_SwitchCameraGroup, WorldContext) == 0x000000, "Member 'BGUFunctionLibraryCS_SwitchCameraGroup::WorldContext' has a wrong offset!");
//static_assert(offsetof(BGUFunctionLibraryCS_SwitchCameraGroup, CameraGroupId) == 0x000008, "Member 'BGUFunctionLibraryCS_SwitchCameraGroup::CameraGroupId' has a wrong offset!");

// Function b1-Managed.BGUFunctionLibraryCS.BGUUnitEquipFaBao
// 0x0010 (0x0010 - 0x0000)
struct BGUFunctionLibraryCS_BGUUnitEquipFaBao final
{
public:
	class AActor*                                 Unit;                                              // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         FaBaoID;                                           // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
//static_assert(alignof(BGUFunctionLibraryCS_BGUUnitEquipFaBao) == 0x000008, "Wrong alignment on BGUFunctionLibraryCS_BGUUnitEquipFaBao");
//static_assert(sizeof(BGUFunctionLibraryCS_BGUUnitEquipFaBao) == 0x000010, "Wrong size on BGUFunctionLibraryCS_BGUUnitEquipFaBao");
//static_assert(offsetof(BGUFunctionLibraryCS_BGUUnitEquipFaBao, Unit) == 0x000000, "Member 'BGUFunctionLibraryCS_BGUUnitEquipFaBao::Unit' has a wrong offset!");
//static_assert(offsetof(BGUFunctionLibraryCS_BGUUnitEquipFaBao, FaBaoID) == 0x000008, "Member 'BGUFunctionLibraryCS_BGUUnitEquipFaBao::FaBaoID' has a wrong offset!");

// Function b1-Managed.BGUFunctionLibraryCS.SetTrainDummyInfo
// 0x0048 (0x0048 - 0x0000)
struct BGUFunctionLibraryCS_SetTrainDummyInfo final
{
public:
	class UObject*                                WorldContext;                                      // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class FString                                 TrainDummyClassPath;                               // 0x0008(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash)
	int32                                         PlayerRoleDataConfigID;                            // 0x0018(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_1C[0x4];                                       // 0x001C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 TrainDummyConfigPath;                              // 0x0020(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash)
	class FString                                 CqgPath;                                           // 0x0030(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash)
	float                                         DPSCalTime;                                        // 0x0040(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         ReturnValue : 1;                                   // 0x0044(0x0001)(BitIndex: 0x00, PropSize: 0x0001 (Parm, OutParm, ReturnParm, NoDestructor, HasGetValueTypeHash))
};
//static_assert(alignof(BGUFunctionLibraryCS_SetTrainDummyInfo) == 0x000008, "Wrong alignment on BGUFunctionLibraryCS_SetTrainDummyInfo");
//static_assert(sizeof(BGUFunctionLibraryCS_SetTrainDummyInfo) == 0x000048, "Wrong size on BGUFunctionLibraryCS_SetTrainDummyInfo");
//static_assert(offsetof(BGUFunctionLibraryCS_SetTrainDummyInfo, WorldContext) == 0x000000, "Member 'BGUFunctionLibraryCS_SetTrainDummyInfo::WorldContext' has a wrong offset!");
//static_assert(offsetof(BGUFunctionLibraryCS_SetTrainDummyInfo, TrainDummyClassPath) == 0x000008, "Member 'BGUFunctionLibraryCS_SetTrainDummyInfo::TrainDummyClassPath' has a wrong offset!");
//static_assert(offsetof(BGUFunctionLibraryCS_SetTrainDummyInfo, PlayerRoleDataConfigID) == 0x000018, "Member 'BGUFunctionLibraryCS_SetTrainDummyInfo::PlayerRoleDataConfigID' has a wrong offset!");
//static_assert(offsetof(BGUFunctionLibraryCS_SetTrainDummyInfo, TrainDummyConfigPath) == 0x000020, "Member 'BGUFunctionLibraryCS_SetTrainDummyInfo::TrainDummyConfigPath' has a wrong offset!");
//static_assert(offsetof(BGUFunctionLibraryCS_SetTrainDummyInfo, CqgPath) == 0x000030, "Member 'BGUFunctionLibraryCS_SetTrainDummyInfo::CqgPath' has a wrong offset!");
//static_assert(offsetof(BGUFunctionLibraryCS_SetTrainDummyInfo, DPSCalTime) == 0x000040, "Member 'BGUFunctionLibraryCS_SetTrainDummyInfo::DPSCalTime' has a wrong offset!");

// Function b1-Managed.BGUFunctionLibraryCS.BGUShowDialogueUI
// 0x0020 (0x0020 - 0x0000)
struct BGUFunctionLibraryCS_BGUShowDialogueUI final
{
public:
	class AActor*                                 Unit;                                              // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class FString                                 DialogContent;                                     // 0x0008(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash)
	float                                         Duration;                                          // 0x0018(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
//static_assert(alignof(BGUFunctionLibraryCS_BGUShowDialogueUI) == 0x000008, "Wrong alignment on BGUFunctionLibraryCS_BGUShowDialogueUI");
//static_assert(sizeof(BGUFunctionLibraryCS_BGUShowDialogueUI) == 0x000020, "Wrong size on BGUFunctionLibraryCS_BGUShowDialogueUI");
//static_assert(offsetof(BGUFunctionLibraryCS_BGUShowDialogueUI, Unit) == 0x000000, "Member 'BGUFunctionLibraryCS_BGUShowDialogueUI::Unit' has a wrong offset!");
//static_assert(offsetof(BGUFunctionLibraryCS_BGUShowDialogueUI, DialogContent) == 0x000008, "Member 'BGUFunctionLibraryCS_BGUShowDialogueUI::DialogContent' has a wrong offset!");
//static_assert(offsetof(BGUFunctionLibraryCS_BGUShowDialogueUI, Duration) == 0x000018, "Member 'BGUFunctionLibraryCS_BGUShowDialogueUI::Duration' has a wrong offset!");

// Function b1-Managed.BGUFunctionLibraryCS.ResetPhysSetting
// 0x0008 (0x0008 - 0x0000)
struct BGUFunctionLibraryCS_ResetPhysSetting final
{
public:
	class AActor*                                 Actor;                                             // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
//static_assert(alignof(BGUFunctionLibraryCS_ResetPhysSetting) == 0x000008, "Wrong alignment on BGUFunctionLibraryCS_ResetPhysSetting");
//static_assert(sizeof(BGUFunctionLibraryCS_ResetPhysSetting) == 0x000008, "Wrong size on BGUFunctionLibraryCS_ResetPhysSetting");
//static_assert(offsetof(BGUFunctionLibraryCS_ResetPhysSetting, Actor) == 0x000000, "Member 'BGUFunctionLibraryCS_ResetPhysSetting::Actor' has a wrong offset!");

// Function b1-Managed.BGUFunctionLibraryCS.IsUEDebugGMLevel
// 0x0001 (0x0001 - 0x0000)
struct BGUFunctionLibraryCS_IsUEDebugGMLevel final
{
public:
	uint8                                         ReturnValue : 1;                                   // 0x0000(0x0001)(BitIndex: 0x00, PropSize: 0x0001 (Parm, OutParm, ReturnParm, NoDestructor, HasGetValueTypeHash))
};
//static_assert(alignof(BGUFunctionLibraryCS_IsUEDebugGMLevel) == 0x000001, "Wrong alignment on BGUFunctionLibraryCS_IsUEDebugGMLevel");
//static_assert(sizeof(BGUFunctionLibraryCS_IsUEDebugGMLevel) == 0x000001, "Wrong size on BGUFunctionLibraryCS_IsUEDebugGMLevel");

// Function b1-Managed.BGUFunctionLibraryCS.BGURemoveAllBuff
// 0x0010 (0x0010 - 0x0000)
struct BGUFunctionLibraryCS_BGURemoveAllBuff final
{
public:
	class AActor*                                 Unit;                                              // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	EBuffEffectTriggerType                        EffectTriggerType;                                 // 0x0008(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
//static_assert(alignof(BGUFunctionLibraryCS_BGURemoveAllBuff) == 0x000008, "Wrong alignment on BGUFunctionLibraryCS_BGURemoveAllBuff");
//static_assert(sizeof(BGUFunctionLibraryCS_BGURemoveAllBuff) == 0x000010, "Wrong size on BGUFunctionLibraryCS_BGURemoveAllBuff");
//static_assert(offsetof(BGUFunctionLibraryCS_BGURemoveAllBuff, Unit) == 0x000000, "Member 'BGUFunctionLibraryCS_BGURemoveAllBuff::Unit' has a wrong offset!");
//static_assert(offsetof(BGUFunctionLibraryCS_BGURemoveAllBuff, EffectTriggerType) == 0x000008, "Member 'BGUFunctionLibraryCS_BGURemoveAllBuff::EffectTriggerType' has a wrong offset!");

// Function b1-Managed.BGUFunctionLibraryCS.BGUStartSceneQTE
// 0x0018 (0x0018 - 0x0000)
struct BGUFunctionLibraryCS_BGUStartSceneQTE final
{
public:
	class AActor*                                 Unit;                                              // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         QTEID;                                             // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class AActor*                                 TargetCharacter;                                   // 0x0010(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
//static_assert(alignof(BGUFunctionLibraryCS_BGUStartSceneQTE) == 0x000008, "Wrong alignment on BGUFunctionLibraryCS_BGUStartSceneQTE");
//static_assert(sizeof(BGUFunctionLibraryCS_BGUStartSceneQTE) == 0x000018, "Wrong size on BGUFunctionLibraryCS_BGUStartSceneQTE");
//static_assert(offsetof(BGUFunctionLibraryCS_BGUStartSceneQTE, Unit) == 0x000000, "Member 'BGUFunctionLibraryCS_BGUStartSceneQTE::Unit' has a wrong offset!");
//static_assert(offsetof(BGUFunctionLibraryCS_BGUStartSceneQTE, QTEID) == 0x000008, "Member 'BGUFunctionLibraryCS_BGUStartSceneQTE::QTEID' has a wrong offset!");
//static_assert(offsetof(BGUFunctionLibraryCS_BGUStartSceneQTE, TargetCharacter) == 0x000010, "Member 'BGUFunctionLibraryCS_BGUStartSceneQTE::TargetCharacter' has a wrong offset!");

// Function b1-Managed.BGUFunctionLibraryCS.BGUSetImmobility
// 0x0010 (0x0010 - 0x0000)
struct BGUFunctionLibraryCS_BGUSetImmobility final
{
public:
	class AActor*                                 Unit;                                              // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         Timer;                                             // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
//static_assert(alignof(BGUFunctionLibraryCS_BGUSetImmobility) == 0x000008, "Wrong alignment on BGUFunctionLibraryCS_BGUSetImmobility");
//static_assert(sizeof(BGUFunctionLibraryCS_BGUSetImmobility) == 0x000010, "Wrong size on BGUFunctionLibraryCS_BGUSetImmobility");
//static_assert(offsetof(BGUFunctionLibraryCS_BGUSetImmobility, Unit) == 0x000000, "Member 'BGUFunctionLibraryCS_BGUSetImmobility::Unit' has a wrong offset!");
//static_assert(offsetof(BGUFunctionLibraryCS_BGUSetImmobility, Timer) == 0x000008, "Member 'BGUFunctionLibraryCS_BGUSetImmobility::Timer' has a wrong offset!");

// Function b1-Managed.BGUFunctionLibraryCS.ToggleCloudMove
// 0x0008 (0x0008 - 0x0000)
struct BGUFunctionLibraryCS_ToggleCloudMove final
{
public:
	class AActor*                                 Unit;                                              // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
//static_assert(alignof(BGUFunctionLibraryCS_ToggleCloudMove) == 0x000008, "Wrong alignment on BGUFunctionLibraryCS_ToggleCloudMove");
//static_assert(sizeof(BGUFunctionLibraryCS_ToggleCloudMove) == 0x000008, "Wrong size on BGUFunctionLibraryCS_ToggleCloudMove");
//static_assert(offsetof(BGUFunctionLibraryCS_ToggleCloudMove, Unit) == 0x000000, "Member 'BGUFunctionLibraryCS_ToggleCloudMove::Unit' has a wrong offset!");

// Function b1-Managed.BGUFunctionLibraryCS.BGUTryCastSpell
// 0x0018 (0x0018 - 0x0000)
struct BGUFunctionLibraryCS_BGUTryCastSpell final
{
public:
	class AActor*                                 Unit;                                              // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         SkillID;                                           // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	ECastSkillSourceType                          SourceType;                                        // 0x000C(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         IsUseComboingSection : 1;                          // 0x000D(0x0001)(BitIndex: 0x00, PropSize: 0x0001 (Parm, NoDestructor, HasGetValueTypeHash))
	uint8                                         Pad_E[0x2];                                        // 0x000E(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         ReturnValue;                                       // 0x0010(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
//static_assert(alignof(BGUFunctionLibraryCS_BGUTryCastSpell) == 0x000008, "Wrong alignment on BGUFunctionLibraryCS_BGUTryCastSpell");
//static_assert(sizeof(BGUFunctionLibraryCS_BGUTryCastSpell) == 0x000018, "Wrong size on BGUFunctionLibraryCS_BGUTryCastSpell");
//static_assert(offsetof(BGUFunctionLibraryCS_BGUTryCastSpell, Unit) == 0x000000, "Member 'BGUFunctionLibraryCS_BGUTryCastSpell::Unit' has a wrong offset!");
//static_assert(offsetof(BGUFunctionLibraryCS_BGUTryCastSpell, SkillID) == 0x000008, "Member 'BGUFunctionLibraryCS_BGUTryCastSpell::SkillID' has a wrong offset!");
//static_assert(offsetof(BGUFunctionLibraryCS_BGUTryCastSpell, SourceType) == 0x00000C, "Member 'BGUFunctionLibraryCS_BGUTryCastSpell::SourceType' has a wrong offset!");
//static_assert(offsetof(BGUFunctionLibraryCS_BGUTryCastSpell, ReturnValue) == 0x000010, "Member 'BGUFunctionLibraryCS_BGUTryCastSpell::ReturnValue' has a wrong offset!");

// Function b1-Managed.BGUFunctionLibraryCS.BGUSetAttrValue
// 0x0010 (0x0010 - 0x0000)
struct BGUFunctionLibraryCS_BGUSetAttrValue final
{
public:
	class AActor*                                 Unit;                                              // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	EBGUAttrFloat                                 AttrID;                                            // 0x0008(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_9[0x3];                                        // 0x0009(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         TargetValue;                                       // 0x000C(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
//static_assert(alignof(BGUFunctionLibraryCS_BGUSetAttrValue) == 0x000008, "Wrong alignment on BGUFunctionLibraryCS_BGUSetAttrValue");
//static_assert(sizeof(BGUFunctionLibraryCS_BGUSetAttrValue) == 0x000010, "Wrong size on BGUFunctionLibraryCS_BGUSetAttrValue");
//static_assert(offsetof(BGUFunctionLibraryCS_BGUSetAttrValue, Unit) == 0x000000, "Member 'BGUFunctionLibraryCS_BGUSetAttrValue::Unit' has a wrong offset!");
//static_assert(offsetof(BGUFunctionLibraryCS_BGUSetAttrValue, AttrID) == 0x000008, "Member 'BGUFunctionLibraryCS_BGUSetAttrValue::AttrID' has a wrong offset!");
//static_assert(offsetof(BGUFunctionLibraryCS_BGUSetAttrValue, TargetValue) == 0x00000C, "Member 'BGUFunctionLibraryCS_BGUSetAttrValue::TargetValue' has a wrong offset!");

// Function b1-Managed.BGUFunctionLibraryCS.BGUGetWeaponNum
// 0x0010 (0x0010 - 0x0000)
struct BGUFunctionLibraryCS_BGUGetWeaponNum final
{
public:
	class AActor*                                 Unit;                                              // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         ReturnValue;                                       // 0x0008(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
//static_assert(alignof(BGUFunctionLibraryCS_BGUGetWeaponNum) == 0x000008, "Wrong alignment on BGUFunctionLibraryCS_BGUGetWeaponNum");
//static_assert(sizeof(BGUFunctionLibraryCS_BGUGetWeaponNum) == 0x000010, "Wrong size on BGUFunctionLibraryCS_BGUGetWeaponNum");
//static_assert(offsetof(BGUFunctionLibraryCS_BGUGetWeaponNum, Unit) == 0x000000, "Member 'BGUFunctionLibraryCS_BGUGetWeaponNum::Unit' has a wrong offset!");
//static_assert(offsetof(BGUFunctionLibraryCS_BGUGetWeaponNum, ReturnValue) == 0x000008, "Member 'BGUFunctionLibraryCS_BGUGetWeaponNum::ReturnValue' has a wrong offset!");

// Function b1-Managed.BGUFunctionLibraryCS.SetSolverCenter
// 0x0008 (0x0008 - 0x0000)
struct BGUFunctionLibraryCS_SetSolverCenter final
{
public:
	class AActor*                                 Unit;                                              // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
//static_assert(alignof(BGUFunctionLibraryCS_SetSolverCenter) == 0x000008, "Wrong alignment on BGUFunctionLibraryCS_SetSolverCenter");
//static_assert(sizeof(BGUFunctionLibraryCS_SetSolverCenter) == 0x000008, "Wrong size on BGUFunctionLibraryCS_SetSolverCenter");
//static_assert(offsetof(BGUFunctionLibraryCS_SetSolverCenter, Unit) == 0x000000, "Member 'BGUFunctionLibraryCS_SetSolverCenter::Unit' has a wrong offset!");

// Function b1-Managed.BGUFunctionLibraryCS.SummonEventTest
// 0x0008 (0x0008 - 0x0000)
struct BGUFunctionLibraryCS_SummonEventTest final
{
public:
	class AActor*                                 Unit;                                              // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
//static_assert(alignof(BGUFunctionLibraryCS_SummonEventTest) == 0x000008, "Wrong alignment on BGUFunctionLibraryCS_SummonEventTest");
//static_assert(sizeof(BGUFunctionLibraryCS_SummonEventTest) == 0x000008, "Wrong size on BGUFunctionLibraryCS_SummonEventTest");
//static_assert(offsetof(BGUFunctionLibraryCS_SummonEventTest, Unit) == 0x000000, "Member 'BGUFunctionLibraryCS_SummonEventTest::Unit' has a wrong offset!");

// Function b1-Managed.BGUFunctionLibraryCS.BGUGetFloatAttr
// 0x0010 (0x0010 - 0x0000)
struct BGUFunctionLibraryCS_BGUGetFloatAttr final
{
public:
	class AActor*                                 Unit;                                              // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	EBGUAttrFloat                                 AttrID;                                            // 0x0008(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_9[0x3];                                        // 0x0009(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         ReturnValue;                                       // 0x000C(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
//static_assert(alignof(BGUFunctionLibraryCS_BGUGetFloatAttr) == 0x000008, "Wrong alignment on BGUFunctionLibraryCS_BGUGetFloatAttr");
//static_assert(sizeof(BGUFunctionLibraryCS_BGUGetFloatAttr) == 0x000010, "Wrong size on BGUFunctionLibraryCS_BGUGetFloatAttr");
//static_assert(offsetof(BGUFunctionLibraryCS_BGUGetFloatAttr, Unit) == 0x000000, "Member 'BGUFunctionLibraryCS_BGUGetFloatAttr::Unit' has a wrong offset!");
//static_assert(offsetof(BGUFunctionLibraryCS_BGUGetFloatAttr, AttrID) == 0x000008, "Member 'BGUFunctionLibraryCS_BGUGetFloatAttr::AttrID' has a wrong offset!");
//static_assert(offsetof(BGUFunctionLibraryCS_BGUGetFloatAttr, ReturnValue) == 0x00000C, "Member 'BGUFunctionLibraryCS_BGUGetFloatAttr::ReturnValue' has a wrong offset!");

// Function b1-Managed.BGUFunctionLibraryCS.GenerateGrayBox
// 0x0008 (0x0008 - 0x0000)
struct BGUFunctionLibraryCS_GenerateGrayBox final
{
public:
	class AActor*                                 TempleteActor;                                     // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
//static_assert(alignof(BGUFunctionLibraryCS_GenerateGrayBox) == 0x000008, "Wrong alignment on BGUFunctionLibraryCS_GenerateGrayBox");
//static_assert(sizeof(BGUFunctionLibraryCS_GenerateGrayBox) == 0x000008, "Wrong size on BGUFunctionLibraryCS_GenerateGrayBox");
//static_assert(offsetof(BGUFunctionLibraryCS_GenerateGrayBox, TempleteActor) == 0x000000, "Member 'BGUFunctionLibraryCS_GenerateGrayBox::TempleteActor' has a wrong offset!");

// Function b1-Managed.BGUFunctionLibraryCS.GlobalEventTest
// 0x0010 (0x0010 - 0x0000)
struct BGUFunctionLibraryCS_GlobalEventTest final
{
public:
	class AActor*                                 Unit;                                              // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Times;                                             // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
//static_assert(alignof(BGUFunctionLibraryCS_GlobalEventTest) == 0x000008, "Wrong alignment on BGUFunctionLibraryCS_GlobalEventTest");
//static_assert(sizeof(BGUFunctionLibraryCS_GlobalEventTest) == 0x000010, "Wrong size on BGUFunctionLibraryCS_GlobalEventTest");
//static_assert(offsetof(BGUFunctionLibraryCS_GlobalEventTest, Unit) == 0x000000, "Member 'BGUFunctionLibraryCS_GlobalEventTest::Unit' has a wrong offset!");
//static_assert(offsetof(BGUFunctionLibraryCS_GlobalEventTest, Times) == 0x000008, "Member 'BGUFunctionLibraryCS_GlobalEventTest::Times' has a wrong offset!");

// Function b1-Managed.BGUFunctionLibraryCS.SeqChangeEquip2
// 0x0008 (0x0008 - 0x0000)
struct BGUFunctionLibraryCS_SeqChangeEquip2 final
{
public:
	class ABGUPerformerActor*                     SeqActor;                                          // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
//static_assert(alignof(BGUFunctionLibraryCS_SeqChangeEquip2) == 0x000008, "Wrong alignment on BGUFunctionLibraryCS_SeqChangeEquip2");
//static_assert(sizeof(BGUFunctionLibraryCS_SeqChangeEquip2) == 0x000008, "Wrong size on BGUFunctionLibraryCS_SeqChangeEquip2");
//static_assert(offsetof(BGUFunctionLibraryCS_SeqChangeEquip2, SeqActor) == 0x000000, "Member 'BGUFunctionLibraryCS_SeqChangeEquip2::SeqActor' has a wrong offset!");

// Function b1-Managed.BGUFunctionLibraryCS.BGUHasUnitState
// 0x0010 (0x0010 - 0x0000)
struct BGUFunctionLibraryCS_BGUHasUnitState final
{
public:
	class AActor*                                 Unit;                                              // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	EBGUUnitState                                 UnitState;                                         // 0x0008(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         ReturnValue : 1;                                   // 0x0009(0x0001)(BitIndex: 0x00, PropSize: 0x0001 (Parm, OutParm, ReturnParm, NoDestructor, HasGetValueTypeHash))
};
//static_assert(alignof(BGUFunctionLibraryCS_BGUHasUnitState) == 0x000008, "Wrong alignment on BGUFunctionLibraryCS_BGUHasUnitState");
//static_assert(sizeof(BGUFunctionLibraryCS_BGUHasUnitState) == 0x000010, "Wrong size on BGUFunctionLibraryCS_BGUHasUnitState");
//static_assert(offsetof(BGUFunctionLibraryCS_BGUHasUnitState, Unit) == 0x000000, "Member 'BGUFunctionLibraryCS_BGUHasUnitState::Unit' has a wrong offset!");
//static_assert(offsetof(BGUFunctionLibraryCS_BGUHasUnitState, UnitState) == 0x000008, "Member 'BGUFunctionLibraryCS_BGUHasUnitState::UnitState' has a wrong offset!");

// Function b1-Managed.BGUFunctionLibraryCS.IsDebugGMLevel
// 0x0001 (0x0001 - 0x0000)
struct BGUFunctionLibraryCS_IsDebugGMLevel final
{
public:
	uint8                                         ReturnValue : 1;                                   // 0x0000(0x0001)(BitIndex: 0x00, PropSize: 0x0001 (Parm, OutParm, ReturnParm, NoDestructor, HasGetValueTypeHash))
};
//static_assert(alignof(BGUFunctionLibraryCS_IsDebugGMLevel) == 0x000001, "Wrong alignment on BGUFunctionLibraryCS_IsDebugGMLevel");
//static_assert(sizeof(BGUFunctionLibraryCS_IsDebugGMLevel) == 0x000001, "Wrong size on BGUFunctionLibraryCS_IsDebugGMLevel");

// Function b1-Managed.BGUFunctionLibraryCS.IsCheatGMLevel
// 0x0001 (0x0001 - 0x0000)
struct BGUFunctionLibraryCS_IsCheatGMLevel final
{
public:
	uint8                                         ReturnValue : 1;                                   // 0x0000(0x0001)(BitIndex: 0x00, PropSize: 0x0001 (Parm, OutParm, ReturnParm, NoDestructor, HasGetValueTypeHash))
};
//static_assert(alignof(BGUFunctionLibraryCS_IsCheatGMLevel) == 0x000001, "Wrong alignment on BGUFunctionLibraryCS_IsCheatGMLevel");
//static_assert(sizeof(BGUFunctionLibraryCS_IsCheatGMLevel) == 0x000001, "Wrong size on BGUFunctionLibraryCS_IsCheatGMLevel");

// Function b1-Managed.BGUFunctionLibraryCS.BGUHideLevelUI
// 0x0008 (0x0008 - 0x0000)
struct BGUFunctionLibraryCS_BGUHideLevelUI final
{
public:
	class AActor*                                 Unit;                                              // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
//static_assert(alignof(BGUFunctionLibraryCS_BGUHideLevelUI) == 0x000008, "Wrong alignment on BGUFunctionLibraryCS_BGUHideLevelUI");
//static_assert(sizeof(BGUFunctionLibraryCS_BGUHideLevelUI) == 0x000008, "Wrong size on BGUFunctionLibraryCS_BGUHideLevelUI");
//static_assert(offsetof(BGUFunctionLibraryCS_BGUHideLevelUI, Unit) == 0x000000, "Member 'BGUFunctionLibraryCS_BGUHideLevelUI::Unit' has a wrong offset!");

// Function b1-Managed.BGUFunctionLibraryCS.BreakCloudMove
// 0x0010 (0x0010 - 0x0000)
struct BGUFunctionLibraryCS_BreakCloudMove final
{
public:
	class AActor*                                 Unit;                                              // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         BreakAnimId;                                       // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
//static_assert(alignof(BGUFunctionLibraryCS_BreakCloudMove) == 0x000008, "Wrong alignment on BGUFunctionLibraryCS_BreakCloudMove");
//static_assert(sizeof(BGUFunctionLibraryCS_BreakCloudMove) == 0x000010, "Wrong size on BGUFunctionLibraryCS_BreakCloudMove");
//static_assert(offsetof(BGUFunctionLibraryCS_BreakCloudMove, Unit) == 0x000000, "Member 'BGUFunctionLibraryCS_BreakCloudMove::Unit' has a wrong offset!");
//static_assert(offsetof(BGUFunctionLibraryCS_BreakCloudMove, BreakAnimId) == 0x000008, "Member 'BGUFunctionLibraryCS_BreakCloudMove::BreakAnimId' has a wrong offset!");

// Function b1-Managed.BGUFunctionLibraryCS.BGUClearWeapon
// 0x0008 (0x0008 - 0x0000)
struct BGUFunctionLibraryCS_BGUClearWeapon final
{
public:
	class AActor*                                 Owner;                                             // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
//static_assert(alignof(BGUFunctionLibraryCS_BGUClearWeapon) == 0x000008, "Wrong alignment on BGUFunctionLibraryCS_BGUClearWeapon");
//static_assert(sizeof(BGUFunctionLibraryCS_BGUClearWeapon) == 0x000008, "Wrong size on BGUFunctionLibraryCS_BGUClearWeapon");
//static_assert(offsetof(BGUFunctionLibraryCS_BGUClearWeapon, Owner) == 0x000000, "Member 'BGUFunctionLibraryCS_BGUClearWeapon::Owner' has a wrong offset!");

// Function b1-Managed.BGUFunctionLibraryCS.SetPhysSetting
// 0x0010 (0x0010 - 0x0000)
struct BGUFunctionLibraryCS_SetPhysSetting final
{
public:
	class AActor*                                 Actor;                                             // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	EPhysAnimType                                 Type;                                              // 0x0008(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
//static_assert(alignof(BGUFunctionLibraryCS_SetPhysSetting) == 0x000008, "Wrong alignment on BGUFunctionLibraryCS_SetPhysSetting");
//static_assert(sizeof(BGUFunctionLibraryCS_SetPhysSetting) == 0x000010, "Wrong size on BGUFunctionLibraryCS_SetPhysSetting");
//static_assert(offsetof(BGUFunctionLibraryCS_SetPhysSetting, Actor) == 0x000000, "Member 'BGUFunctionLibraryCS_SetPhysSetting::Actor' has a wrong offset!");
//static_assert(offsetof(BGUFunctionLibraryCS_SetPhysSetting, Type) == 0x000008, "Member 'BGUFunctionLibraryCS_SetPhysSetting::Type' has a wrong offset!");

// Function b1-Managed.BGUFunctionLibraryCS.TestInputEvent
// 0x0038 (0x0038 - 0x0000)
struct BGUFunctionLibraryCS_TestInputEvent final
{
public:
	struct FKeyEvent                              A;                                                 // 0x0000(0x0038)(Parm)
};
//static_assert(alignof(BGUFunctionLibraryCS_TestInputEvent) == 0x000008, "Wrong alignment on BGUFunctionLibraryCS_TestInputEvent");
//static_assert(sizeof(BGUFunctionLibraryCS_TestInputEvent) == 0x000038, "Wrong size on BGUFunctionLibraryCS_TestInputEvent");
//static_assert(offsetof(BGUFunctionLibraryCS_TestInputEvent, A) == 0x000000, "Member 'BGUFunctionLibraryCS_TestInputEvent::A' has a wrong offset!");

// Function b1-Managed.BGUFunctionLibraryCS.RunEQSForDebug
// 0x0010 (0x0010 - 0x0000)
struct BGUFunctionLibraryCS_RunEQSForDebug final
{
public:
	class AActor*                                 Querier;                                           // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UEnvQuery*                              Env;                                               // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
//static_assert(alignof(BGUFunctionLibraryCS_RunEQSForDebug) == 0x000008, "Wrong alignment on BGUFunctionLibraryCS_RunEQSForDebug");
//static_assert(sizeof(BGUFunctionLibraryCS_RunEQSForDebug) == 0x000010, "Wrong size on BGUFunctionLibraryCS_RunEQSForDebug");
//static_assert(offsetof(BGUFunctionLibraryCS_RunEQSForDebug, Querier) == 0x000000, "Member 'BGUFunctionLibraryCS_RunEQSForDebug::Querier' has a wrong offset!");
//static_assert(offsetof(BGUFunctionLibraryCS_RunEQSForDebug, Env) == 0x000008, "Member 'BGUFunctionLibraryCS_RunEQSForDebug::Env' has a wrong offset!");

// Function b1-Managed.BGUFunctionLibraryCS.PlayPigsyStory
// 0x0008 (0x0008 - 0x0000)
struct BGUFunctionLibraryCS_PlayPigsyStory final
{
public:
	class AActor*                                 Unit;                                              // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
//static_assert(alignof(BGUFunctionLibraryCS_PlayPigsyStory) == 0x000008, "Wrong alignment on BGUFunctionLibraryCS_PlayPigsyStory");
//static_assert(sizeof(BGUFunctionLibraryCS_PlayPigsyStory) == 0x000008, "Wrong size on BGUFunctionLibraryCS_PlayPigsyStory");
//static_assert(offsetof(BGUFunctionLibraryCS_PlayPigsyStory, Unit) == 0x000000, "Member 'BGUFunctionLibraryCS_PlayPigsyStory::Unit' has a wrong offset!");

// Function b1-Managed.BGUFunctionLibraryCS.BGUHasBuffByID
// 0x0010 (0x0010 - 0x0000)
struct BGUFunctionLibraryCS_BGUHasBuffByID final
{
public:
	class AActor*                                 Unit;                                              // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         BuffID;                                            // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         ReturnValue : 1;                                   // 0x000C(0x0001)(BitIndex: 0x00, PropSize: 0x0001 (Parm, OutParm, ReturnParm, NoDestructor, HasGetValueTypeHash))
};
//static_assert(alignof(BGUFunctionLibraryCS_BGUHasBuffByID) == 0x000008, "Wrong alignment on BGUFunctionLibraryCS_BGUHasBuffByID");
//static_assert(sizeof(BGUFunctionLibraryCS_BGUHasBuffByID) == 0x000010, "Wrong size on BGUFunctionLibraryCS_BGUHasBuffByID");
//static_assert(offsetof(BGUFunctionLibraryCS_BGUHasBuffByID, Unit) == 0x000000, "Member 'BGUFunctionLibraryCS_BGUHasBuffByID::Unit' has a wrong offset!");
//static_assert(offsetof(BGUFunctionLibraryCS_BGUHasBuffByID, BuffID) == 0x000008, "Member 'BGUFunctionLibraryCS_BGUHasBuffByID::BuffID' has a wrong offset!");

// Function b1-Managed.BGUFunctionLibraryCS.BGUIsEnemyTeam
// 0x0018 (0x0018 - 0x0000)
struct BGUFunctionLibraryCS_BGUIsEnemyTeam final
{
public:
	class AActor*                                 SelfUnit;                                          // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class AActor*                                 OtherUnit;                                         // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         ReturnValue : 1;                                   // 0x0010(0x0001)(BitIndex: 0x00, PropSize: 0x0001 (Parm, OutParm, ReturnParm, NoDestructor, HasGetValueTypeHash))
};
//static_assert(alignof(BGUFunctionLibraryCS_BGUIsEnemyTeam) == 0x000008, "Wrong alignment on BGUFunctionLibraryCS_BGUIsEnemyTeam");
//static_assert(sizeof(BGUFunctionLibraryCS_BGUIsEnemyTeam) == 0x000018, "Wrong size on BGUFunctionLibraryCS_BGUIsEnemyTeam");
//static_assert(offsetof(BGUFunctionLibraryCS_BGUIsEnemyTeam, SelfUnit) == 0x000000, "Member 'BGUFunctionLibraryCS_BGUIsEnemyTeam::SelfUnit' has a wrong offset!");
//static_assert(offsetof(BGUFunctionLibraryCS_BGUIsEnemyTeam, OtherUnit) == 0x000008, "Member 'BGUFunctionLibraryCS_BGUIsEnemyTeam::OtherUnit' has a wrong offset!");

// Function b1-Managed.BGUFunctionLibraryCS.SeqChangeEquip
// 0x0010 (0x0010 - 0x0000)
struct BGUFunctionLibraryCS_SeqChangeEquip final
{
public:
	class ABGUPerformerActor*                     SeqActor;                                          // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         EquipID;                                           // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
//static_assert(alignof(BGUFunctionLibraryCS_SeqChangeEquip) == 0x000008, "Wrong alignment on BGUFunctionLibraryCS_SeqChangeEquip");
//static_assert(sizeof(BGUFunctionLibraryCS_SeqChangeEquip) == 0x000010, "Wrong size on BGUFunctionLibraryCS_SeqChangeEquip");
//static_assert(offsetof(BGUFunctionLibraryCS_SeqChangeEquip, SeqActor) == 0x000000, "Member 'BGUFunctionLibraryCS_SeqChangeEquip::SeqActor' has a wrong offset!");
//static_assert(offsetof(BGUFunctionLibraryCS_SeqChangeEquip, EquipID) == 0x000008, "Member 'BGUFunctionLibraryCS_SeqChangeEquip::EquipID' has a wrong offset!");

// Function b1-Managed.BGUFunctionLibraryCS.TriggerEffect
// 0x0010 (0x0010 - 0x0000)
struct BGUFunctionLibraryCS_TriggerEffect final
{
public:
	class AActor*                                 Unit;                                              // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         EffectID;                                          // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
//static_assert(alignof(BGUFunctionLibraryCS_TriggerEffect) == 0x000008, "Wrong alignment on BGUFunctionLibraryCS_TriggerEffect");
//static_assert(sizeof(BGUFunctionLibraryCS_TriggerEffect) == 0x000010, "Wrong size on BGUFunctionLibraryCS_TriggerEffect");
//static_assert(offsetof(BGUFunctionLibraryCS_TriggerEffect, Unit) == 0x000000, "Member 'BGUFunctionLibraryCS_TriggerEffect::Unit' has a wrong offset!");
//static_assert(offsetof(BGUFunctionLibraryCS_TriggerEffect, EffectID) == 0x000008, "Member 'BGUFunctionLibraryCS_TriggerEffect::EffectID' has a wrong offset!");

// Function b1-Managed.BGUFunctionLibraryCS.BGUSpawnActor
// 0x0048 (0x0048 - 0x0000)
struct BGUFunctionLibraryCS_BGUSpawnActor final
{
public:
	class UWorld*                                 _World;                                            // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UClass*                                 ActorClass;                                        // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                Location;                                          // 0x0010(0x0018)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FRotator                               Rotation;                                          // 0x0028(0x0018)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
	class AActor*                                 ReturnValue;                                       // 0x0040(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
//static_assert(alignof(BGUFunctionLibraryCS_BGUSpawnActor) == 0x000008, "Wrong alignment on BGUFunctionLibraryCS_BGUSpawnActor");
//static_assert(sizeof(BGUFunctionLibraryCS_BGUSpawnActor) == 0x000048, "Wrong size on BGUFunctionLibraryCS_BGUSpawnActor");
//static_assert(offsetof(BGUFunctionLibraryCS_BGUSpawnActor, _World) == 0x000000, "Member 'BGUFunctionLibraryCS_BGUSpawnActor::_World' has a wrong offset!");
//static_assert(offsetof(BGUFunctionLibraryCS_BGUSpawnActor, ActorClass) == 0x000008, "Member 'BGUFunctionLibraryCS_BGUSpawnActor::ActorClass' has a wrong offset!");
//static_assert(offsetof(BGUFunctionLibraryCS_BGUSpawnActor, Location) == 0x000010, "Member 'BGUFunctionLibraryCS_BGUSpawnActor::Location' has a wrong offset!");
//static_assert(offsetof(BGUFunctionLibraryCS_BGUSpawnActor, Rotation) == 0x000028, "Member 'BGUFunctionLibraryCS_BGUSpawnActor::Rotation' has a wrong offset!");
//static_assert(offsetof(BGUFunctionLibraryCS_BGUSpawnActor, ReturnValue) == 0x000040, "Member 'BGUFunctionLibraryCS_BGUSpawnActor::ReturnValue' has a wrong offset!");

// Function b1-Managed.BGUFunctionLibraryCS.BGURemoveBuff
// 0x0018 (0x0018 - 0x0000)
struct BGUFunctionLibraryCS_BGURemoveBuff final
{
public:
	class AActor*                                 Unit;                                              // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         BuffID;                                            // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	EBuffEffectTriggerType                        EffectTriggerType;                                 // 0x000C(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_D[0x3];                                        // 0x000D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         Layer;                                             // 0x0010(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
//static_assert(alignof(BGUFunctionLibraryCS_BGURemoveBuff) == 0x000008, "Wrong alignment on BGUFunctionLibraryCS_BGURemoveBuff");
//static_assert(sizeof(BGUFunctionLibraryCS_BGURemoveBuff) == 0x000018, "Wrong size on BGUFunctionLibraryCS_BGURemoveBuff");
//static_assert(offsetof(BGUFunctionLibraryCS_BGURemoveBuff, Unit) == 0x000000, "Member 'BGUFunctionLibraryCS_BGURemoveBuff::Unit' has a wrong offset!");
//static_assert(offsetof(BGUFunctionLibraryCS_BGURemoveBuff, BuffID) == 0x000008, "Member 'BGUFunctionLibraryCS_BGURemoveBuff::BuffID' has a wrong offset!");
//static_assert(offsetof(BGUFunctionLibraryCS_BGURemoveBuff, EffectTriggerType) == 0x00000C, "Member 'BGUFunctionLibraryCS_BGURemoveBuff::EffectTriggerType' has a wrong offset!");
//static_assert(offsetof(BGUFunctionLibraryCS_BGURemoveBuff, Layer) == 0x000010, "Member 'BGUFunctionLibraryCS_BGURemoveBuff::Layer' has a wrong offset!");

// Function b1-Managed.BGUFunctionLibraryCS.BGUIsUnitDead
// 0x0010 (0x0010 - 0x0000)
struct BGUFunctionLibraryCS_BGUIsUnitDead final
{
public:
	class AActor*                                 Unit;                                              // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         ReturnValue : 1;                                   // 0x0008(0x0001)(BitIndex: 0x00, PropSize: 0x0001 (Parm, OutParm, ReturnParm, NoDestructor, HasGetValueTypeHash))
};
//static_assert(alignof(BGUFunctionLibraryCS_BGUIsUnitDead) == 0x000008, "Wrong alignment on BGUFunctionLibraryCS_BGUIsUnitDead");
//static_assert(sizeof(BGUFunctionLibraryCS_BGUIsUnitDead) == 0x000010, "Wrong size on BGUFunctionLibraryCS_BGUIsUnitDead");
//static_assert(offsetof(BGUFunctionLibraryCS_BGUIsUnitDead, Unit) == 0x000000, "Member 'BGUFunctionLibraryCS_BGUIsUnitDead::Unit' has a wrong offset!");

// Function b1-Managed.BGUFunctionLibraryCS.StopFetchTick
// 0x0008 (0x0008 - 0x0000)
struct BGUFunctionLibraryCS_StopFetchTick final
{
public:
	class UObject*                                WorldContext;                                      // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
//static_assert(alignof(BGUFunctionLibraryCS_StopFetchTick) == 0x000008, "Wrong alignment on BGUFunctionLibraryCS_StopFetchTick");
//static_assert(sizeof(BGUFunctionLibraryCS_StopFetchTick) == 0x000008, "Wrong size on BGUFunctionLibraryCS_StopFetchTick");
//static_assert(offsetof(BGUFunctionLibraryCS_StopFetchTick, WorldContext) == 0x000000, "Member 'BGUFunctionLibraryCS_StopFetchTick::WorldContext' has a wrong offset!");

// Function b1-Managed.BGUFunctionLibraryCS.GetAllEquipId
// 0x0010 (0x0010 - 0x0000)
struct BGUFunctionLibraryCS_GetAllEquipId final
{
public:
	TArray<int32>                                 ReturnValue;                                       // 0x0000(0x0010)(Parm, OutParm, ReturnParm)
};
//static_assert(alignof(BGUFunctionLibraryCS_GetAllEquipId) == 0x000008, "Wrong alignment on BGUFunctionLibraryCS_GetAllEquipId");
//static_assert(sizeof(BGUFunctionLibraryCS_GetAllEquipId) == 0x000010, "Wrong size on BGUFunctionLibraryCS_GetAllEquipId");
//static_assert(offsetof(BGUFunctionLibraryCS_GetAllEquipId, ReturnValue) == 0x000000, "Member 'BGUFunctionLibraryCS_GetAllEquipId::ReturnValue' has a wrong offset!");

// Function b1-Managed.BGUFunctionLibraryCS.RunGMCommand
// 0x0020 (0x0020 - 0x0000)
struct BGUFunctionLibraryCS_RunGMCommand final
{
public:
	class AActor*                                 Actor;                                             // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class FString                                 Cmd;                                               // 0x0008(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash)
	uint8                                         JustRunInBin : 1;                                  // 0x0018(0x0001)(BitIndex: 0x00, PropSize: 0x0001 (Parm, NoDestructor, HasGetValueTypeHash))
};
//static_assert(alignof(BGUFunctionLibraryCS_RunGMCommand) == 0x000008, "Wrong alignment on BGUFunctionLibraryCS_RunGMCommand");
//static_assert(sizeof(BGUFunctionLibraryCS_RunGMCommand) == 0x000020, "Wrong size on BGUFunctionLibraryCS_RunGMCommand");
//static_assert(offsetof(BGUFunctionLibraryCS_RunGMCommand, Actor) == 0x000000, "Member 'BGUFunctionLibraryCS_RunGMCommand::Actor' has a wrong offset!");
//static_assert(offsetof(BGUFunctionLibraryCS_RunGMCommand, Cmd) == 0x000008, "Member 'BGUFunctionLibraryCS_RunGMCommand::Cmd' has a wrong offset!");

// Function b1-Managed.BGUFunctionLibraryCS.BGUShowFPSUI
// 0x0008 (0x0008 - 0x0000)
struct BGUFunctionLibraryCS_BGUShowFPSUI final
{
public:
	class AActor*                                 Unit;                                              // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
//static_assert(alignof(BGUFunctionLibraryCS_BGUShowFPSUI) == 0x000008, "Wrong alignment on BGUFunctionLibraryCS_BGUShowFPSUI");
//static_assert(sizeof(BGUFunctionLibraryCS_BGUShowFPSUI) == 0x000008, "Wrong size on BGUFunctionLibraryCS_BGUShowFPSUI");
//static_assert(offsetof(BGUFunctionLibraryCS_BGUShowFPSUI, Unit) == 0x000000, "Member 'BGUFunctionLibraryCS_BGUShowFPSUI::Unit' has a wrong offset!");

// Function b1-Managed.BGUFunctionLibraryCS.GetAttrValue
// 0x0010 (0x0010 - 0x0000)
struct BGUFunctionLibraryCS_GetAttrValue final
{
public:
	class AActor*                                 Unit;                                              // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	EBGUAttrFloat                                 AttrID;                                            // 0x0008(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_9[0x3];                                        // 0x0009(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         ReturnValue;                                       // 0x000C(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
//static_assert(alignof(BGUFunctionLibraryCS_GetAttrValue) == 0x000008, "Wrong alignment on BGUFunctionLibraryCS_GetAttrValue");
//static_assert(sizeof(BGUFunctionLibraryCS_GetAttrValue) == 0x000010, "Wrong size on BGUFunctionLibraryCS_GetAttrValue");
//static_assert(offsetof(BGUFunctionLibraryCS_GetAttrValue, Unit) == 0x000000, "Member 'BGUFunctionLibraryCS_GetAttrValue::Unit' has a wrong offset!");
//static_assert(offsetof(BGUFunctionLibraryCS_GetAttrValue, AttrID) == 0x000008, "Member 'BGUFunctionLibraryCS_GetAttrValue::AttrID' has a wrong offset!");
//static_assert(offsetof(BGUFunctionLibraryCS_GetAttrValue, ReturnValue) == 0x00000C, "Member 'BGUFunctionLibraryCS_GetAttrValue::ReturnValue' has a wrong offset!");

// Function b1-Managed.BGUFunctionLibraryCS.SetCameraFOV
// 0x0010 (0x0010 - 0x0000)
struct BGUFunctionLibraryCS_SetCameraFOV final
{
public:
	class ACameraActor*                           CameraActor;                                       // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         NewFOV;                                            // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
//static_assert(alignof(BGUFunctionLibraryCS_SetCameraFOV) == 0x000008, "Wrong alignment on BGUFunctionLibraryCS_SetCameraFOV");
//static_assert(sizeof(BGUFunctionLibraryCS_SetCameraFOV) == 0x000010, "Wrong size on BGUFunctionLibraryCS_SetCameraFOV");
//static_assert(offsetof(BGUFunctionLibraryCS_SetCameraFOV, CameraActor) == 0x000000, "Member 'BGUFunctionLibraryCS_SetCameraFOV::CameraActor' has a wrong offset!");
//static_assert(offsetof(BGUFunctionLibraryCS_SetCameraFOV, NewFOV) == 0x000008, "Member 'BGUFunctionLibraryCS_SetCameraFOV::NewFOV' has a wrong offset!");

// Function b1-Managed.BGUFunctionLibraryCS.BGUGetTarget
// 0x0010 (0x0010 - 0x0000)
struct BGUFunctionLibraryCS_BGUGetTarget final
{
public:
	class AActor*                                 Unit;                                              // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class AActor*                                 ReturnValue;                                       // 0x0008(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
//static_assert(alignof(BGUFunctionLibraryCS_BGUGetTarget) == 0x000008, "Wrong alignment on BGUFunctionLibraryCS_BGUGetTarget");
//static_assert(sizeof(BGUFunctionLibraryCS_BGUGetTarget) == 0x000010, "Wrong size on BGUFunctionLibraryCS_BGUGetTarget");
//static_assert(offsetof(BGUFunctionLibraryCS_BGUGetTarget, Unit) == 0x000000, "Member 'BGUFunctionLibraryCS_BGUGetTarget::Unit' has a wrong offset!");
//static_assert(offsetof(BGUFunctionLibraryCS_BGUGetTarget, ReturnValue) == 0x000008, "Member 'BGUFunctionLibraryCS_BGUGetTarget::ReturnValue' has a wrong offset!");

// Function b1-Managed.BGUFunctionLibraryCS.GetCameraFOV
// 0x0010 (0x0010 - 0x0000)
struct BGUFunctionLibraryCS_GetCameraFOV final
{
public:
	class ACameraActor*                           CameraActor;                                       // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         ReturnValue;                                       // 0x0008(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
//static_assert(alignof(BGUFunctionLibraryCS_GetCameraFOV) == 0x000008, "Wrong alignment on BGUFunctionLibraryCS_GetCameraFOV");
//static_assert(sizeof(BGUFunctionLibraryCS_GetCameraFOV) == 0x000010, "Wrong size on BGUFunctionLibraryCS_GetCameraFOV");
//static_assert(offsetof(BGUFunctionLibraryCS_GetCameraFOV, CameraActor) == 0x000000, "Member 'BGUFunctionLibraryCS_GetCameraFOV::CameraActor' has a wrong offset!");
//static_assert(offsetof(BGUFunctionLibraryCS_GetCameraFOV, ReturnValue) == 0x000008, "Member 'BGUFunctionLibraryCS_GetCameraFOV::ReturnValue' has a wrong offset!");

// Function b1-Managed.BGUFunctionLibraryCS.CanShutdown
// 0x0010 (0x0010 - 0x0000)
struct BGUFunctionLibraryCS_CanShutdown final
{
public:
	class UObject*                                WorldContext;                                      // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         ReturnValue : 1;                                   // 0x0008(0x0001)(BitIndex: 0x00, PropSize: 0x0001 (Parm, OutParm, ReturnParm, NoDestructor, HasGetValueTypeHash))
};
//static_assert(alignof(BGUFunctionLibraryCS_CanShutdown) == 0x000008, "Wrong alignment on BGUFunctionLibraryCS_CanShutdown");
//static_assert(sizeof(BGUFunctionLibraryCS_CanShutdown) == 0x000010, "Wrong size on BGUFunctionLibraryCS_CanShutdown");
//static_assert(offsetof(BGUFunctionLibraryCS_CanShutdown, WorldContext) == 0x000000, "Member 'BGUFunctionLibraryCS_CanShutdown::WorldContext' has a wrong offset!");

// Function b1-Managed.BGUFunctionLibraryCS.BGUTestEnum
// 0x0010 (0x0010 - 0x0000)
struct BGUFunctionLibraryCS_BGUTestEnum final
{
public:
	class AActor*                                 Unit;                                              // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	EBGUSimpleState                               SimpleState;                                       // 0x0008(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
//static_assert(alignof(BGUFunctionLibraryCS_BGUTestEnum) == 0x000008, "Wrong alignment on BGUFunctionLibraryCS_BGUTestEnum");
//static_assert(sizeof(BGUFunctionLibraryCS_BGUTestEnum) == 0x000010, "Wrong size on BGUFunctionLibraryCS_BGUTestEnum");
//static_assert(offsetof(BGUFunctionLibraryCS_BGUTestEnum, Unit) == 0x000000, "Member 'BGUFunctionLibraryCS_BGUTestEnum::Unit' has a wrong offset!");
//static_assert(offsetof(BGUFunctionLibraryCS_BGUTestEnum, SimpleState) == 0x000008, "Member 'BGUFunctionLibraryCS_BGUTestEnum::SimpleState' has a wrong offset!");

// Function b1-Managed.BGUFunctionLibraryCS.PlayUISound
// 0x0018 (0x0018 - 0x0000)
struct BGUFunctionLibraryCS_PlayUISound final
{
public:
	class UObject*                                InWorldContext;                                    // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UAkAudioEvent*                          InAudioEvent;                                      // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         ReturnValue;                                       // 0x0010(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
//static_assert(alignof(BGUFunctionLibraryCS_PlayUISound) == 0x000008, "Wrong alignment on BGUFunctionLibraryCS_PlayUISound");
//static_assert(sizeof(BGUFunctionLibraryCS_PlayUISound) == 0x000018, "Wrong size on BGUFunctionLibraryCS_PlayUISound");
//static_assert(offsetof(BGUFunctionLibraryCS_PlayUISound, InWorldContext) == 0x000000, "Member 'BGUFunctionLibraryCS_PlayUISound::InWorldContext' has a wrong offset!");
//static_assert(offsetof(BGUFunctionLibraryCS_PlayUISound, InAudioEvent) == 0x000008, "Member 'BGUFunctionLibraryCS_PlayUISound::InAudioEvent' has a wrong offset!");
//static_assert(offsetof(BGUFunctionLibraryCS_PlayUISound, ReturnValue) == 0x000010, "Member 'BGUFunctionLibraryCS_PlayUISound::ReturnValue' has a wrong offset!");

// Function b1-Managed.BGUFunctionLibraryCS.BGUCostAttr
// 0x0018 (0x0018 - 0x0000)
struct BGUFunctionLibraryCS_BGUCostAttr final
{
public:
	class AActor*                                 Unit;                                              // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	EAttrCostType                                 AttrCostType;                                      // 0x0008(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_9[0x3];                                        // 0x0009(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         CostBase;                                          // 0x000C(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CostRatio;                                         // 0x0010(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
//static_assert(alignof(BGUFunctionLibraryCS_BGUCostAttr) == 0x000008, "Wrong alignment on BGUFunctionLibraryCS_BGUCostAttr");
//static_assert(sizeof(BGUFunctionLibraryCS_BGUCostAttr) == 0x000018, "Wrong size on BGUFunctionLibraryCS_BGUCostAttr");
//static_assert(offsetof(BGUFunctionLibraryCS_BGUCostAttr, Unit) == 0x000000, "Member 'BGUFunctionLibraryCS_BGUCostAttr::Unit' has a wrong offset!");
//static_assert(offsetof(BGUFunctionLibraryCS_BGUCostAttr, AttrCostType) == 0x000008, "Member 'BGUFunctionLibraryCS_BGUCostAttr::AttrCostType' has a wrong offset!");
//static_assert(offsetof(BGUFunctionLibraryCS_BGUCostAttr, CostBase) == 0x00000C, "Member 'BGUFunctionLibraryCS_BGUCostAttr::CostBase' has a wrong offset!");
//static_assert(offsetof(BGUFunctionLibraryCS_BGUCostAttr, CostRatio) == 0x000010, "Member 'BGUFunctionLibraryCS_BGUCostAttr::CostRatio' has a wrong offset!");

// Function b1-Managed.BGUFunctionLibraryCS.ChangeEquip
// 0x0010 (0x0010 - 0x0000)
struct BGUFunctionLibraryCS_ChangeEquip final
{
public:
	class APawn*                                  Actor;                                             // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         ID;                                                // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
//static_assert(alignof(BGUFunctionLibraryCS_ChangeEquip) == 0x000008, "Wrong alignment on BGUFunctionLibraryCS_ChangeEquip");
//static_assert(sizeof(BGUFunctionLibraryCS_ChangeEquip) == 0x000010, "Wrong size on BGUFunctionLibraryCS_ChangeEquip");
//static_assert(offsetof(BGUFunctionLibraryCS_ChangeEquip, Actor) == 0x000000, "Member 'BGUFunctionLibraryCS_ChangeEquip::Actor' has a wrong offset!");
//static_assert(offsetof(BGUFunctionLibraryCS_ChangeEquip, ID) == 0x000008, "Member 'BGUFunctionLibraryCS_ChangeEquip::ID' has a wrong offset!");

// Function b1-Managed.BGUFunctionLibraryCS.DicSortTest
// 0x0008 (0x0008 - 0x0000)
struct BGUFunctionLibraryCS_DicSortTest final
{
public:
	class AActor*                                 Unit;                                              // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
//static_assert(alignof(BGUFunctionLibraryCS_DicSortTest) == 0x000008, "Wrong alignment on BGUFunctionLibraryCS_DicSortTest");
//static_assert(sizeof(BGUFunctionLibraryCS_DicSortTest) == 0x000008, "Wrong size on BGUFunctionLibraryCS_DicSortTest");
//static_assert(offsetof(BGUFunctionLibraryCS_DicSortTest, Unit) == 0x000000, "Member 'BGUFunctionLibraryCS_DicSortTest::Unit' has a wrong offset!");

// Function b1-Managed.BGUFunctionLibraryCS.BGUGetResID
// 0x0010 (0x0010 - 0x0000)
struct BGUFunctionLibraryCS_BGUGetResID final
{
public:
	class AActor*                                 Unit;                                              // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         ReturnValue;                                       // 0x0008(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
//static_assert(alignof(BGUFunctionLibraryCS_BGUGetResID) == 0x000008, "Wrong alignment on BGUFunctionLibraryCS_BGUGetResID");
//static_assert(sizeof(BGUFunctionLibraryCS_BGUGetResID) == 0x000010, "Wrong size on BGUFunctionLibraryCS_BGUGetResID");
//static_assert(offsetof(BGUFunctionLibraryCS_BGUGetResID, Unit) == 0x000000, "Member 'BGUFunctionLibraryCS_BGUGetResID::Unit' has a wrong offset!");
//static_assert(offsetof(BGUFunctionLibraryCS_BGUGetResID, ReturnValue) == 0x000008, "Member 'BGUFunctionLibraryCS_BGUGetResID::ReturnValue' has a wrong offset!");

// Function b1-Managed.BGUFunctionLibraryCS.UnitSuicide
// 0x0008 (0x0008 - 0x0000)
struct BGUFunctionLibraryCS_UnitSuicide final
{
public:
	class AActor*                                 Unit;                                              // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
//static_assert(alignof(BGUFunctionLibraryCS_UnitSuicide) == 0x000008, "Wrong alignment on BGUFunctionLibraryCS_UnitSuicide");
//static_assert(sizeof(BGUFunctionLibraryCS_UnitSuicide) == 0x000008, "Wrong size on BGUFunctionLibraryCS_UnitSuicide");
//static_assert(offsetof(BGUFunctionLibraryCS_UnitSuicide, Unit) == 0x000000, "Member 'BGUFunctionLibraryCS_UnitSuicide::Unit' has a wrong offset!");

// Function b1-Managed.BGUFunctionLibraryCS.BGUHasBuff
// 0x0010 (0x0010 - 0x0000)
struct BGUFunctionLibraryCS_BGUHasBuff final
{
public:
	class AActor*                                 Unit;                                              // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	EBPBuffID                                     BuffID;                                            // 0x0008(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         ReturnValue : 1;                                   // 0x0009(0x0001)(BitIndex: 0x00, PropSize: 0x0001 (Parm, OutParm, ReturnParm, NoDestructor, HasGetValueTypeHash))
};
//static_assert(alignof(BGUFunctionLibraryCS_BGUHasBuff) == 0x000008, "Wrong alignment on BGUFunctionLibraryCS_BGUHasBuff");
//static_assert(sizeof(BGUFunctionLibraryCS_BGUHasBuff) == 0x000010, "Wrong size on BGUFunctionLibraryCS_BGUHasBuff");
//static_assert(offsetof(BGUFunctionLibraryCS_BGUHasBuff, Unit) == 0x000000, "Member 'BGUFunctionLibraryCS_BGUHasBuff::Unit' has a wrong offset!");
//static_assert(offsetof(BGUFunctionLibraryCS_BGUHasBuff, BuffID) == 0x000008, "Member 'BGUFunctionLibraryCS_BGUHasBuff::BuffID' has a wrong offset!");

// Function b1-Managed.BGUFunctionLibraryCS.TestVector
// 0x0018 (0x0018 - 0x0000)
struct BGUFunctionLibraryCS_TestVector final
{
public:
	struct FVector                                A;                                                 // 0x0000(0x0018)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
//static_assert(alignof(BGUFunctionLibraryCS_TestVector) == 0x000008, "Wrong alignment on BGUFunctionLibraryCS_TestVector");
//static_assert(sizeof(BGUFunctionLibraryCS_TestVector) == 0x000018, "Wrong size on BGUFunctionLibraryCS_TestVector");
//static_assert(offsetof(BGUFunctionLibraryCS_TestVector, A) == 0x000000, "Member 'BGUFunctionLibraryCS_TestVector::A' has a wrong offset!");

// Function b1-Managed.BGUFunctionLibraryCS.BGUDBCTest
// 0x0018 (0x0018 - 0x0000)
struct BGUFunctionLibraryCS_BGUDBCTest final
{
public:
	class AActor*                                 Owner;                                             // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class FString                                 DBCPath;                                           // 0x0008(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash)
};
//static_assert(alignof(BGUFunctionLibraryCS_BGUDBCTest) == 0x000008, "Wrong alignment on BGUFunctionLibraryCS_BGUDBCTest");
//static_assert(sizeof(BGUFunctionLibraryCS_BGUDBCTest) == 0x000018, "Wrong size on BGUFunctionLibraryCS_BGUDBCTest");
//static_assert(offsetof(BGUFunctionLibraryCS_BGUDBCTest, Owner) == 0x000000, "Member 'BGUFunctionLibraryCS_BGUDBCTest::Owner' has a wrong offset!");
//static_assert(offsetof(BGUFunctionLibraryCS_BGUDBCTest, DBCPath) == 0x000008, "Member 'BGUFunctionLibraryCS_BGUDBCTest::DBCPath' has a wrong offset!");

// Function b1-Managed.BGUFunctionLibraryCS.GetRTForFX
// 0x0018 (0x0018 - 0x0000)
struct BGUFunctionLibraryCS_GetRTForFX final
{
public:
	class AActor*                                 OwnerActor;                                        // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	ERenderTargetType                             RTType;                                            // 0x0008(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UTextureRenderTarget2D*                 ReturnValue;                                       // 0x0010(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
//static_assert(alignof(BGUFunctionLibraryCS_GetRTForFX) == 0x000008, "Wrong alignment on BGUFunctionLibraryCS_GetRTForFX");
//static_assert(sizeof(BGUFunctionLibraryCS_GetRTForFX) == 0x000018, "Wrong size on BGUFunctionLibraryCS_GetRTForFX");
//static_assert(offsetof(BGUFunctionLibraryCS_GetRTForFX, OwnerActor) == 0x000000, "Member 'BGUFunctionLibraryCS_GetRTForFX::OwnerActor' has a wrong offset!");
//static_assert(offsetof(BGUFunctionLibraryCS_GetRTForFX, RTType) == 0x000008, "Member 'BGUFunctionLibraryCS_GetRTForFX::RTType' has a wrong offset!");
//static_assert(offsetof(BGUFunctionLibraryCS_GetRTForFX, ReturnValue) == 0x000010, "Member 'BGUFunctionLibraryCS_GetRTForFX::ReturnValue' has a wrong offset!");

// Function b1-Managed.BGUFunctionLibraryCS.BGUAddBuff
// 0x0020 (0x0020 - 0x0000)
struct BGUFunctionLibraryCS_BGUAddBuff final
{
public:
	class AActor*                                 Caster;                                            // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class AActor*                                 Target;                                            // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         BuffID;                                            // 0x0010(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	EBuffSourceType                               BuffSourceType;                                    // 0x0014(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_15[0x3];                                       // 0x0015(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         BuffDurationTimer;                                 // 0x0018(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
//static_assert(alignof(BGUFunctionLibraryCS_BGUAddBuff) == 0x000008, "Wrong alignment on BGUFunctionLibraryCS_BGUAddBuff");
//static_assert(sizeof(BGUFunctionLibraryCS_BGUAddBuff) == 0x000020, "Wrong size on BGUFunctionLibraryCS_BGUAddBuff");
//static_assert(offsetof(BGUFunctionLibraryCS_BGUAddBuff, Caster) == 0x000000, "Member 'BGUFunctionLibraryCS_BGUAddBuff::Caster' has a wrong offset!");
//static_assert(offsetof(BGUFunctionLibraryCS_BGUAddBuff, Target) == 0x000008, "Member 'BGUFunctionLibraryCS_BGUAddBuff::Target' has a wrong offset!");
//static_assert(offsetof(BGUFunctionLibraryCS_BGUAddBuff, BuffID) == 0x000010, "Member 'BGUFunctionLibraryCS_BGUAddBuff::BuffID' has a wrong offset!");
//static_assert(offsetof(BGUFunctionLibraryCS_BGUAddBuff, BuffSourceType) == 0x000014, "Member 'BGUFunctionLibraryCS_BGUAddBuff::BuffSourceType' has a wrong offset!");
//static_assert(offsetof(BGUFunctionLibraryCS_BGUAddBuff, BuffDurationTimer) == 0x000018, "Member 'BGUFunctionLibraryCS_BGUAddBuff::BuffDurationTimer' has a wrong offset!");

// Function b1-Managed.BGUFunctionLibraryCS.GM_AddAttr
// 0x0010 (0x0010 - 0x0000)
struct BGUFunctionLibraryCS_GM_AddAttr final
{
public:
	class AActor*                                 Unit;                                              // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	EBGUAttrFloat                                 AttrType;                                          // 0x0008(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_9[0x3];                                        // 0x0009(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         AddValue;                                          // 0x000C(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
//static_assert(alignof(BGUFunctionLibraryCS_GM_AddAttr) == 0x000008, "Wrong alignment on BGUFunctionLibraryCS_GM_AddAttr");
//static_assert(sizeof(BGUFunctionLibraryCS_GM_AddAttr) == 0x000010, "Wrong size on BGUFunctionLibraryCS_GM_AddAttr");
//static_assert(offsetof(BGUFunctionLibraryCS_GM_AddAttr, Unit) == 0x000000, "Member 'BGUFunctionLibraryCS_GM_AddAttr::Unit' has a wrong offset!");
//static_assert(offsetof(BGUFunctionLibraryCS_GM_AddAttr, AttrType) == 0x000008, "Member 'BGUFunctionLibraryCS_GM_AddAttr::AttrType' has a wrong offset!");
//static_assert(offsetof(BGUFunctionLibraryCS_GM_AddAttr, AddValue) == 0x00000C, "Member 'BGUFunctionLibraryCS_GM_AddAttr::AddValue' has a wrong offset!");

// Function b1-Managed.BGUFunctionLibraryCS.BGUGMDead
// 0x0008 (0x0008 - 0x0000)
struct BGUFunctionLibraryCS_BGUGMDead final
{
public:
	class AActor*                                 Unit;                                              // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
//static_assert(alignof(BGUFunctionLibraryCS_BGUGMDead) == 0x000008, "Wrong alignment on BGUFunctionLibraryCS_BGUGMDead");
//static_assert(sizeof(BGUFunctionLibraryCS_BGUGMDead) == 0x000008, "Wrong size on BGUFunctionLibraryCS_BGUGMDead");
//static_assert(offsetof(BGUFunctionLibraryCS_BGUGMDead, Unit) == 0x000000, "Member 'BGUFunctionLibraryCS_BGUGMDead::Unit' has a wrong offset!");

// Function b1-Managed.BED_FSMNode_GI_Loading_QuitGame.PostPropertyChanged
// 0x0020 (0x0020 - 0x0000)
struct BED_FSMNode_GI_Loading_QuitGame_PostPropertyChanged final
{
public:
	class FString                                 MemberName;                                        // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash)
	class FString                                 PropertyName;                                      // 0x0010(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash)
};
//static_assert(alignof(BED_FSMNode_GI_Loading_QuitGame_PostPropertyChanged) == 0x000008, "Wrong alignment on BED_FSMNode_GI_Loading_QuitGame_PostPropertyChanged");
//static_assert(sizeof(BED_FSMNode_GI_Loading_QuitGame_PostPropertyChanged) == 0x000020, "Wrong size on BED_FSMNode_GI_Loading_QuitGame_PostPropertyChanged");
//static_assert(offsetof(BED_FSMNode_GI_Loading_QuitGame_PostPropertyChanged, MemberName) == 0x000000, "Member 'BED_FSMNode_GI_Loading_QuitGame_PostPropertyChanged::MemberName' has a wrong offset!");
//static_assert(offsetof(BED_FSMNode_GI_Loading_QuitGame_PostPropertyChanged, PropertyName) == 0x000010, "Member 'BED_FSMNode_GI_Loading_QuitGame_PostPropertyChanged::PropertyName' has a wrong offset!");

// Function b1-Managed.BED_FSMNode_GI_Loading_QuitGame.GetNodeDescriptionInCS
// 0x0010 (0x0010 - 0x0000)
struct BED_FSMNode_GI_Loading_QuitGame_GetNodeDescriptionInCS final
{
public:
	class FString                                 ReturnValue;                                       // 0x0000(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash)
};
//static_assert(alignof(BED_FSMNode_GI_Loading_QuitGame_GetNodeDescriptionInCS) == 0x000008, "Wrong alignment on BED_FSMNode_GI_Loading_QuitGame_GetNodeDescriptionInCS");
//static_assert(sizeof(BED_FSMNode_GI_Loading_QuitGame_GetNodeDescriptionInCS) == 0x000010, "Wrong size on BED_FSMNode_GI_Loading_QuitGame_GetNodeDescriptionInCS");
//static_assert(offsetof(BED_FSMNode_GI_Loading_QuitGame_GetNodeDescriptionInCS, ReturnValue) == 0x000000, "Member 'BED_FSMNode_GI_Loading_QuitGame_GetNodeDescriptionInCS::ReturnValue' has a wrong offset!");

// Function b1-Managed.BED_FSMNode_GI_Loading_InitClientPlayerContainer.PostPropertyChanged
// 0x0020 (0x0020 - 0x0000)
struct BED_FSMNode_GI_Loading_InitClientPlayerContainer_PostPropertyChanged final
{
public:
	class FString                                 MemberName;                                        // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash)
	class FString                                 PropertyName;                                      // 0x0010(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash)
};
//static_assert(alignof(BED_FSMNode_GI_Loading_InitClientPlayerContainer_PostPropertyChanged) == 0x000008, "Wrong alignment on BED_FSMNode_GI_Loading_InitClientPlayerContainer_PostPropertyChanged");
//static_assert(sizeof(BED_FSMNode_GI_Loading_InitClientPlayerContainer_PostPropertyChanged) == 0x000020, "Wrong size on BED_FSMNode_GI_Loading_InitClientPlayerContainer_PostPropertyChanged");
//static_assert(offsetof(BED_FSMNode_GI_Loading_InitClientPlayerContainer_PostPropertyChanged, MemberName) == 0x000000, "Member 'BED_FSMNode_GI_Loading_InitClientPlayerContainer_PostPropertyChanged::MemberName' has a wrong offset!");
//static_assert(offsetof(BED_FSMNode_GI_Loading_InitClientPlayerContainer_PostPropertyChanged, PropertyName) == 0x000010, "Member 'BED_FSMNode_GI_Loading_InitClientPlayerContainer_PostPropertyChanged::PropertyName' has a wrong offset!");

// Function b1-Managed.BED_FSMNode_GI_Loading_InitClientPlayerContainer.GetNodeDescriptionInCS
// 0x0010 (0x0010 - 0x0000)
struct BED_FSMNode_GI_Loading_InitClientPlayerContainer_GetNodeDescriptionInCS final
{
public:
	class FString                                 ReturnValue;                                       // 0x0000(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash)
};
//static_assert(alignof(BED_FSMNode_GI_Loading_InitClientPlayerContainer_GetNodeDescriptionInCS) == 0x000008, "Wrong alignment on BED_FSMNode_GI_Loading_InitClientPlayerContainer_GetNodeDescriptionInCS");
//static_assert(sizeof(BED_FSMNode_GI_Loading_InitClientPlayerContainer_GetNodeDescriptionInCS) == 0x000010, "Wrong size on BED_FSMNode_GI_Loading_InitClientPlayerContainer_GetNodeDescriptionInCS");
//static_assert(offsetof(BED_FSMNode_GI_Loading_InitClientPlayerContainer_GetNodeDescriptionInCS, ReturnValue) == 0x000000, "Member 'BED_FSMNode_GI_Loading_InitClientPlayerContainer_GetNodeDescriptionInCS::ReturnValue' has a wrong offset!");

// Function b1-Managed.BED_FSMNode_GI_Loading_RequestTemplateCreateArchiveData.PostPropertyChanged
// 0x0020 (0x0020 - 0x0000)
struct BED_FSMNode_GI_Loading_RequestTemplateCreateArchiveData_PostPropertyChanged final
{
public:
	class FString                                 MemberName;                                        // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash)
	class FString                                 PropertyName;                                      // 0x0010(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash)
};
//static_assert(alignof(BED_FSMNode_GI_Loading_RequestTemplateCreateArchiveData_PostPropertyChanged) == 0x000008, "Wrong alignment on BED_FSMNode_GI_Loading_RequestTemplateCreateArchiveData_PostPropertyChanged");
//static_assert(sizeof(BED_FSMNode_GI_Loading_RequestTemplateCreateArchiveData_PostPropertyChanged) == 0x000020, "Wrong size on BED_FSMNode_GI_Loading_RequestTemplateCreateArchiveData_PostPropertyChanged");
//static_assert(offsetof(BED_FSMNode_GI_Loading_RequestTemplateCreateArchiveData_PostPropertyChanged, MemberName) == 0x000000, "Member 'BED_FSMNode_GI_Loading_RequestTemplateCreateArchiveData_PostPropertyChanged::MemberName' has a wrong offset!");
//static_assert(offsetof(BED_FSMNode_GI_Loading_RequestTemplateCreateArchiveData_PostPropertyChanged, PropertyName) == 0x000010, "Member 'BED_FSMNode_GI_Loading_RequestTemplateCreateArchiveData_PostPropertyChanged::PropertyName' has a wrong offset!");

// Function b1-Managed.BED_FSMNode_GI_Loading_RequestTemplateCreateArchiveData.GetNodeDescriptionInCS
// 0x0010 (0x0010 - 0x0000)
struct BED_FSMNode_GI_Loading_RequestTemplateCreateArchiveData_GetNodeDescriptionInCS final
{
public:
	class FString                                 ReturnValue;                                       // 0x0000(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash)
};
//static_assert(alignof(BED_FSMNode_GI_Loading_RequestTemplateCreateArchiveData_GetNodeDescriptionInCS) == 0x000008, "Wrong alignment on BED_FSMNode_GI_Loading_RequestTemplateCreateArchiveData_GetNodeDescriptionInCS");
//static_assert(sizeof(BED_FSMNode_GI_Loading_RequestTemplateCreateArchiveData_GetNodeDescriptionInCS) == 0x000010, "Wrong size on BED_FSMNode_GI_Loading_RequestTemplateCreateArchiveData_GetNodeDescriptionInCS");
//static_assert(offsetof(BED_FSMNode_GI_Loading_RequestTemplateCreateArchiveData_GetNodeDescriptionInCS, ReturnValue) == 0x000000, "Member 'BED_FSMNode_GI_Loading_RequestTemplateCreateArchiveData_GetNodeDescriptionInCS::ReturnValue' has a wrong offset!");

// Function b1-Managed.BED_FSMNode_GI_Loading_GMRecordRebirthPos.PostPropertyChanged
// 0x0020 (0x0020 - 0x0000)
struct BED_FSMNode_GI_Loading_GMRecordRebirthPos_PostPropertyChanged final
{
public:
	class FString                                 MemberName;                                        // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash)
	class FString                                 PropertyName;                                      // 0x0010(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash)
};
//static_assert(alignof(BED_FSMNode_GI_Loading_GMRecordRebirthPos_PostPropertyChanged) == 0x000008, "Wrong alignment on BED_FSMNode_GI_Loading_GMRecordRebirthPos_PostPropertyChanged");
//static_assert(sizeof(BED_FSMNode_GI_Loading_GMRecordRebirthPos_PostPropertyChanged) == 0x000020, "Wrong size on BED_FSMNode_GI_Loading_GMRecordRebirthPos_PostPropertyChanged");
//static_assert(offsetof(BED_FSMNode_GI_Loading_GMRecordRebirthPos_PostPropertyChanged, MemberName) == 0x000000, "Member 'BED_FSMNode_GI_Loading_GMRecordRebirthPos_PostPropertyChanged::MemberName' has a wrong offset!");
//static_assert(offsetof(BED_FSMNode_GI_Loading_GMRecordRebirthPos_PostPropertyChanged, PropertyName) == 0x000010, "Member 'BED_FSMNode_GI_Loading_GMRecordRebirthPos_PostPropertyChanged::PropertyName' has a wrong offset!");

// Function b1-Managed.BED_FSMNode_GI_Loading_GMRecordRebirthPos.GetNodeDescriptionInCS
// 0x0010 (0x0010 - 0x0000)
struct BED_FSMNode_GI_Loading_GMRecordRebirthPos_GetNodeDescriptionInCS final
{
public:
	class FString                                 ReturnValue;                                       // 0x0000(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash)
};
//static_assert(alignof(BED_FSMNode_GI_Loading_GMRecordRebirthPos_GetNodeDescriptionInCS) == 0x000008, "Wrong alignment on BED_FSMNode_GI_Loading_GMRecordRebirthPos_GetNodeDescriptionInCS");
//static_assert(sizeof(BED_FSMNode_GI_Loading_GMRecordRebirthPos_GetNodeDescriptionInCS) == 0x000010, "Wrong size on BED_FSMNode_GI_Loading_GMRecordRebirthPos_GetNodeDescriptionInCS");
//static_assert(offsetof(BED_FSMNode_GI_Loading_GMRecordRebirthPos_GetNodeDescriptionInCS, ReturnValue) == 0x000000, "Member 'BED_FSMNode_GI_Loading_GMRecordRebirthPos_GetNodeDescriptionInCS::ReturnValue' has a wrong offset!");

// Function b1-Managed.BUAnim_PostProcess_Wukong.BlueprintUpdateAnimation
// 0x0004 (0x0004 - 0x0000)
struct BUAnim_PostProcess_Wukong_BlueprintUpdateAnimation final
{
public:
	float                                         DeltaTimeX;                                        // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
//static_assert(alignof(BUAnim_PostProcess_Wukong_BlueprintUpdateAnimation) == 0x000004, "Wrong alignment on BUAnim_PostProcess_Wukong_BlueprintUpdateAnimation");
//static_assert(sizeof(BUAnim_PostProcess_Wukong_BlueprintUpdateAnimation) == 0x000004, "Wrong size on BUAnim_PostProcess_Wukong_BlueprintUpdateAnimation");
//static_assert(offsetof(BUAnim_PostProcess_Wukong_BlueprintUpdateAnimation, DeltaTimeX) == 0x000000, "Member 'BUAnim_PostProcess_Wukong_BlueprintUpdateAnimation::DeltaTimeX' has a wrong offset!");

// Function b1-Managed.BED_FSMNode_GI_Loading_RequestTemplatePostEnterLevelFinish.PostPropertyChanged
// 0x0020 (0x0020 - 0x0000)
struct BED_FSMNode_GI_Loading_RequestTemplatePostEnterLevelFinish_PostPropertyChanged final
{
public:
	class FString                                 MemberName;                                        // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash)
	class FString                                 PropertyName;                                      // 0x0010(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash)
};
//static_assert(alignof(BED_FSMNode_GI_Loading_RequestTemplatePostEnterLevelFinish_PostPropertyChanged) == 0x000008, "Wrong alignment on BED_FSMNode_GI_Loading_RequestTemplatePostEnterLevelFinish_PostPropertyChanged");
//static_assert(sizeof(BED_FSMNode_GI_Loading_RequestTemplatePostEnterLevelFinish_PostPropertyChanged) == 0x000020, "Wrong size on BED_FSMNode_GI_Loading_RequestTemplatePostEnterLevelFinish_PostPropertyChanged");
//static_assert(offsetof(BED_FSMNode_GI_Loading_RequestTemplatePostEnterLevelFinish_PostPropertyChanged, MemberName) == 0x000000, "Member 'BED_FSMNode_GI_Loading_RequestTemplatePostEnterLevelFinish_PostPropertyChanged::MemberName' has a wrong offset!");
//static_assert(offsetof(BED_FSMNode_GI_Loading_RequestTemplatePostEnterLevelFinish_PostPropertyChanged, PropertyName) == 0x000010, "Member 'BED_FSMNode_GI_Loading_RequestTemplatePostEnterLevelFinish_PostPropertyChanged::PropertyName' has a wrong offset!");

// Function b1-Managed.BED_FSMNode_GI_Loading_RequestTemplatePostEnterLevelFinish.GetNodeDescriptionInCS
// 0x0010 (0x0010 - 0x0000)
struct BED_FSMNode_GI_Loading_RequestTemplatePostEnterLevelFinish_GetNodeDescriptionInCS final
{
public:
	class FString                                 ReturnValue;                                       // 0x0000(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash)
};
//static_assert(alignof(BED_FSMNode_GI_Loading_RequestTemplatePostEnterLevelFinish_GetNodeDescriptionInCS) == 0x000008, "Wrong alignment on BED_FSMNode_GI_Loading_RequestTemplatePostEnterLevelFinish_GetNodeDescriptionInCS");
//static_assert(sizeof(BED_FSMNode_GI_Loading_RequestTemplatePostEnterLevelFinish_GetNodeDescriptionInCS) == 0x000010, "Wrong size on BED_FSMNode_GI_Loading_RequestTemplatePostEnterLevelFinish_GetNodeDescriptionInCS");
//static_assert(offsetof(BED_FSMNode_GI_Loading_RequestTemplatePostEnterLevelFinish_GetNodeDescriptionInCS, ReturnValue) == 0x000000, "Member 'BED_FSMNode_GI_Loading_RequestTemplatePostEnterLevelFinish_GetNodeDescriptionInCS::ReturnValue' has a wrong offset!");

// Function b1-Managed.BED_FSMNode_GI_Loading_LoadingUIBeginFadeAway.PostPropertyChanged
// 0x0020 (0x0020 - 0x0000)
struct BED_FSMNode_GI_Loading_LoadingUIBeginFadeAway_PostPropertyChanged final
{
public:
	class FString                                 MemberName;                                        // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash)
	class FString                                 PropertyName;                                      // 0x0010(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash)
};
//static_assert(alignof(BED_FSMNode_GI_Loading_LoadingUIBeginFadeAway_PostPropertyChanged) == 0x000008, "Wrong alignment on BED_FSMNode_GI_Loading_LoadingUIBeginFadeAway_PostPropertyChanged");
//static_assert(sizeof(BED_FSMNode_GI_Loading_LoadingUIBeginFadeAway_PostPropertyChanged) == 0x000020, "Wrong size on BED_FSMNode_GI_Loading_LoadingUIBeginFadeAway_PostPropertyChanged");
//static_assert(offsetof(BED_FSMNode_GI_Loading_LoadingUIBeginFadeAway_PostPropertyChanged, MemberName) == 0x000000, "Member 'BED_FSMNode_GI_Loading_LoadingUIBeginFadeAway_PostPropertyChanged::MemberName' has a wrong offset!");
//static_assert(offsetof(BED_FSMNode_GI_Loading_LoadingUIBeginFadeAway_PostPropertyChanged, PropertyName) == 0x000010, "Member 'BED_FSMNode_GI_Loading_LoadingUIBeginFadeAway_PostPropertyChanged::PropertyName' has a wrong offset!");

// Function b1-Managed.BED_FSMNode_GI_Loading_LoadingUIBeginFadeAway.GetNodeDescriptionInCS
// 0x0010 (0x0010 - 0x0000)
struct BED_FSMNode_GI_Loading_LoadingUIBeginFadeAway_GetNodeDescriptionInCS final
{
public:
	class FString                                 ReturnValue;                                       // 0x0000(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash)
};
//static_assert(alignof(BED_FSMNode_GI_Loading_LoadingUIBeginFadeAway_GetNodeDescriptionInCS) == 0x000008, "Wrong alignment on BED_FSMNode_GI_Loading_LoadingUIBeginFadeAway_GetNodeDescriptionInCS");
//static_assert(sizeof(BED_FSMNode_GI_Loading_LoadingUIBeginFadeAway_GetNodeDescriptionInCS) == 0x000010, "Wrong size on BED_FSMNode_GI_Loading_LoadingUIBeginFadeAway_GetNodeDescriptionInCS");
//static_assert(offsetof(BED_FSMNode_GI_Loading_LoadingUIBeginFadeAway_GetNodeDescriptionInCS, ReturnValue) == 0x000000, "Member 'BED_FSMNode_GI_Loading_LoadingUIBeginFadeAway_GetNodeDescriptionInCS::ReturnValue' has a wrong offset!");

// Function b1-Managed.BED_FSMNode_GI_Loading_RequestTemplatePreSaveArchive.PostPropertyChanged
// 0x0020 (0x0020 - 0x0000)
struct BED_FSMNode_GI_Loading_RequestTemplatePreSaveArchive_PostPropertyChanged final
{
public:
	class FString                                 MemberName;                                        // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash)
	class FString                                 PropertyName;                                      // 0x0010(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash)
};
//static_assert(alignof(BED_FSMNode_GI_Loading_RequestTemplatePreSaveArchive_PostPropertyChanged) == 0x000008, "Wrong alignment on BED_FSMNode_GI_Loading_RequestTemplatePreSaveArchive_PostPropertyChanged");
//static_assert(sizeof(BED_FSMNode_GI_Loading_RequestTemplatePreSaveArchive_PostPropertyChanged) == 0x000020, "Wrong size on BED_FSMNode_GI_Loading_RequestTemplatePreSaveArchive_PostPropertyChanged");
//static_assert(offsetof(BED_FSMNode_GI_Loading_RequestTemplatePreSaveArchive_PostPropertyChanged, MemberName) == 0x000000, "Member 'BED_FSMNode_GI_Loading_RequestTemplatePreSaveArchive_PostPropertyChanged::MemberName' has a wrong offset!");
//static_assert(offsetof(BED_FSMNode_GI_Loading_RequestTemplatePreSaveArchive_PostPropertyChanged, PropertyName) == 0x000010, "Member 'BED_FSMNode_GI_Loading_RequestTemplatePreSaveArchive_PostPropertyChanged::PropertyName' has a wrong offset!");

// Function b1-Managed.BED_FSMNode_GI_Loading_RequestTemplatePreSaveArchive.GetNodeDescriptionInCS
// 0x0010 (0x0010 - 0x0000)
struct BED_FSMNode_GI_Loading_RequestTemplatePreSaveArchive_GetNodeDescriptionInCS final
{
public:
	class FString                                 ReturnValue;                                       // 0x0000(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash)
};
//static_assert(alignof(BED_FSMNode_GI_Loading_RequestTemplatePreSaveArchive_GetNodeDescriptionInCS) == 0x000008, "Wrong alignment on BED_FSMNode_GI_Loading_RequestTemplatePreSaveArchive_GetNodeDescriptionInCS");
//static_assert(sizeof(BED_FSMNode_GI_Loading_RequestTemplatePreSaveArchive_GetNodeDescriptionInCS) == 0x000010, "Wrong size on BED_FSMNode_GI_Loading_RequestTemplatePreSaveArchive_GetNodeDescriptionInCS");
//static_assert(offsetof(BED_FSMNode_GI_Loading_RequestTemplatePreSaveArchive_GetNodeDescriptionInCS, ReturnValue) == 0x000000, "Member 'BED_FSMNode_GI_Loading_RequestTemplatePreSaveArchive_GetNodeDescriptionInCS::ReturnValue' has a wrong offset!");

// Function b1-Managed.BED_FSMNode_GI_Loading_GSGRecoverMuseum.PostPropertyChanged
// 0x0020 (0x0020 - 0x0000)
struct BED_FSMNode_GI_Loading_GSGRecoverMuseum_PostPropertyChanged final
{
public:
	class FString                                 MemberName;                                        // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash)
	class FString                                 PropertyName;                                      // 0x0010(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash)
};
//static_assert(alignof(BED_FSMNode_GI_Loading_GSGRecoverMuseum_PostPropertyChanged) == 0x000008, "Wrong alignment on BED_FSMNode_GI_Loading_GSGRecoverMuseum_PostPropertyChanged");
//static_assert(sizeof(BED_FSMNode_GI_Loading_GSGRecoverMuseum_PostPropertyChanged) == 0x000020, "Wrong size on BED_FSMNode_GI_Loading_GSGRecoverMuseum_PostPropertyChanged");
//static_assert(offsetof(BED_FSMNode_GI_Loading_GSGRecoverMuseum_PostPropertyChanged, MemberName) == 0x000000, "Member 'BED_FSMNode_GI_Loading_GSGRecoverMuseum_PostPropertyChanged::MemberName' has a wrong offset!");
//static_assert(offsetof(BED_FSMNode_GI_Loading_GSGRecoverMuseum_PostPropertyChanged, PropertyName) == 0x000010, "Member 'BED_FSMNode_GI_Loading_GSGRecoverMuseum_PostPropertyChanged::PropertyName' has a wrong offset!");

// Function b1-Managed.BED_FSMNode_GI_Loading_GSGRecoverMuseum.GetNodeDescriptionInCS
// 0x0010 (0x0010 - 0x0000)
struct BED_FSMNode_GI_Loading_GSGRecoverMuseum_GetNodeDescriptionInCS final
{
public:
	class FString                                 ReturnValue;                                       // 0x0000(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash)
};
//static_assert(alignof(BED_FSMNode_GI_Loading_GSGRecoverMuseum_GetNodeDescriptionInCS) == 0x000008, "Wrong alignment on BED_FSMNode_GI_Loading_GSGRecoverMuseum_GetNodeDescriptionInCS");
//static_assert(sizeof(BED_FSMNode_GI_Loading_GSGRecoverMuseum_GetNodeDescriptionInCS) == 0x000010, "Wrong size on BED_FSMNode_GI_Loading_GSGRecoverMuseum_GetNodeDescriptionInCS");
//static_assert(offsetof(BED_FSMNode_GI_Loading_GSGRecoverMuseum_GetNodeDescriptionInCS, ReturnValue) == 0x000000, "Member 'BED_FSMNode_GI_Loading_GSGRecoverMuseum_GetNodeDescriptionInCS::ReturnValue' has a wrong offset!");

// Function b1-Managed.BAN_GSPlayAtkFXOnGround.GSNotifyCS
// 0x0040 (0x0040 - 0x0000)
struct BAN_GSPlayAtkFXOnGround_GSNotifyCS final
{
public:
	struct FUStGSNotifyParam                      NotifyParam;                                       // 0x0000(0x0040)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
//static_assert(alignof(BAN_GSPlayAtkFXOnGround_GSNotifyCS) == 0x000008, "Wrong alignment on BAN_GSPlayAtkFXOnGround_GSNotifyCS");
//static_assert(sizeof(BAN_GSPlayAtkFXOnGround_GSNotifyCS) == 0x000040, "Wrong size on BAN_GSPlayAtkFXOnGround_GSNotifyCS");
//static_assert(offsetof(BAN_GSPlayAtkFXOnGround_GSNotifyCS, NotifyParam) == 0x000000, "Member 'BAN_GSPlayAtkFXOnGround_GSNotifyCS::NotifyParam' has a wrong offset!");

// Function b1-Managed.BUS_AreaOverlapComp.OnActorLeave_EnterArea
// 0x0020 (0x0020 - 0x0000)
struct BUS_AreaOverlapComp_OnActorLeave_EnterArea final
{
public:
	class UPrimitiveComponent*                    OverlappedComponent;                               // 0x0000(0x0008)(ExportObject, Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class AActor*                                 OtherActor;                                        // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UPrimitiveComponent*                    OtherComp;                                         // 0x0010(0x0008)(ExportObject, Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         OtherBodyIndex;                                    // 0x0018(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
//static_assert(alignof(BUS_AreaOverlapComp_OnActorLeave_EnterArea) == 0x000008, "Wrong alignment on BUS_AreaOverlapComp_OnActorLeave_EnterArea");
//static_assert(sizeof(BUS_AreaOverlapComp_OnActorLeave_EnterArea) == 0x000020, "Wrong size on BUS_AreaOverlapComp_OnActorLeave_EnterArea");
//static_assert(offsetof(BUS_AreaOverlapComp_OnActorLeave_EnterArea, OverlappedComponent) == 0x000000, "Member 'BUS_AreaOverlapComp_OnActorLeave_EnterArea::OverlappedComponent' has a wrong offset!");
//static_assert(offsetof(BUS_AreaOverlapComp_OnActorLeave_EnterArea, OtherActor) == 0x000008, "Member 'BUS_AreaOverlapComp_OnActorLeave_EnterArea::OtherActor' has a wrong offset!");
//static_assert(offsetof(BUS_AreaOverlapComp_OnActorLeave_EnterArea, OtherComp) == 0x000010, "Member 'BUS_AreaOverlapComp_OnActorLeave_EnterArea::OtherComp' has a wrong offset!");
//static_assert(offsetof(BUS_AreaOverlapComp_OnActorLeave_EnterArea, OtherBodyIndex) == 0x000018, "Member 'BUS_AreaOverlapComp_OnActorLeave_EnterArea::OtherBodyIndex' has a wrong offset!");

// Function b1-Managed.BUS_AreaOverlapComp.OnActorEnter_EnterArea
// 0x0108 (0x0108 - 0x0000)
struct BUS_AreaOverlapComp_OnActorEnter_EnterArea final
{
public:
	class UPrimitiveComponent*                    OverlappedComponent;                               // 0x0000(0x0008)(ExportObject, Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class AActor*                                 OtherActor;                                        // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UPrimitiveComponent*                    OtherComp;                                         // 0x0010(0x0008)(ExportObject, Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         OtherBodyIndex;                                    // 0x0018(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         bFromSweep : 1;                                    // 0x001C(0x0001)(BitIndex: 0x00, PropSize: 0x0001 (Parm, NoDestructor, HasGetValueTypeHash))
	uint8                                         Pad_1D[0x3];                                       // 0x001D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FHitResult                             SweepResult;                                       // 0x0020(0x00E8)(Parm, IsPlainOldData, NoDestructor)
};
//static_assert(alignof(BUS_AreaOverlapComp_OnActorEnter_EnterArea) == 0x000008, "Wrong alignment on BUS_AreaOverlapComp_OnActorEnter_EnterArea");
//static_assert(sizeof(BUS_AreaOverlapComp_OnActorEnter_EnterArea) == 0x000108, "Wrong size on BUS_AreaOverlapComp_OnActorEnter_EnterArea");
//static_assert(offsetof(BUS_AreaOverlapComp_OnActorEnter_EnterArea, OverlappedComponent) == 0x000000, "Member 'BUS_AreaOverlapComp_OnActorEnter_EnterArea::OverlappedComponent' has a wrong offset!");
//static_assert(offsetof(BUS_AreaOverlapComp_OnActorEnter_EnterArea, OtherActor) == 0x000008, "Member 'BUS_AreaOverlapComp_OnActorEnter_EnterArea::OtherActor' has a wrong offset!");
//static_assert(offsetof(BUS_AreaOverlapComp_OnActorEnter_EnterArea, OtherComp) == 0x000010, "Member 'BUS_AreaOverlapComp_OnActorEnter_EnterArea::OtherComp' has a wrong offset!");
//static_assert(offsetof(BUS_AreaOverlapComp_OnActorEnter_EnterArea, OtherBodyIndex) == 0x000018, "Member 'BUS_AreaOverlapComp_OnActorEnter_EnterArea::OtherBodyIndex' has a wrong offset!");
//static_assert(offsetof(BUS_AreaOverlapComp_OnActorEnter_EnterArea, SweepResult) == 0x000020, "Member 'BUS_AreaOverlapComp_OnActorEnter_EnterArea::SweepResult' has a wrong offset!");

// Function b1-Managed.BUS_AreaOverlapComp.OnActorLeaveActor
// 0x0010 (0x0010 - 0x0000)
struct BUS_AreaOverlapComp_OnActorLeaveActor final
{
public:
	class AActor*                                 OverlappedActor;                                   // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class AActor*                                 OtherActor;                                        // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
//static_assert(alignof(BUS_AreaOverlapComp_OnActorLeaveActor) == 0x000008, "Wrong alignment on BUS_AreaOverlapComp_OnActorLeaveActor");
//static_assert(sizeof(BUS_AreaOverlapComp_OnActorLeaveActor) == 0x000010, "Wrong size on BUS_AreaOverlapComp_OnActorLeaveActor");
//static_assert(offsetof(BUS_AreaOverlapComp_OnActorLeaveActor, OverlappedActor) == 0x000000, "Member 'BUS_AreaOverlapComp_OnActorLeaveActor::OverlappedActor' has a wrong offset!");
//static_assert(offsetof(BUS_AreaOverlapComp_OnActorLeaveActor, OtherActor) == 0x000008, "Member 'BUS_AreaOverlapComp_OnActorLeaveActor::OtherActor' has a wrong offset!");

// Function b1-Managed.BUS_AreaOverlapComp.OnActorEnterActor
// 0x0010 (0x0010 - 0x0000)
struct BUS_AreaOverlapComp_OnActorEnterActor final
{
public:
	class AActor*                                 OverlappedActor;                                   // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class AActor*                                 OtherActor;                                        // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
//static_assert(alignof(BUS_AreaOverlapComp_OnActorEnterActor) == 0x000008, "Wrong alignment on BUS_AreaOverlapComp_OnActorEnterActor");
//static_assert(sizeof(BUS_AreaOverlapComp_OnActorEnterActor) == 0x000010, "Wrong size on BUS_AreaOverlapComp_OnActorEnterActor");
//static_assert(offsetof(BUS_AreaOverlapComp_OnActorEnterActor, OverlappedActor) == 0x000000, "Member 'BUS_AreaOverlapComp_OnActorEnterActor::OverlappedActor' has a wrong offset!");
//static_assert(offsetof(BUS_AreaOverlapComp_OnActorEnterActor, OtherActor) == 0x000008, "Member 'BUS_AreaOverlapComp_OnActorEnterActor::OtherActor' has a wrong offset!");

// Function b1-Managed.BED_FSMNode_GI_Loading_FillLoginRoleData.PostPropertyChanged
// 0x0020 (0x0020 - 0x0000)
struct BED_FSMNode_GI_Loading_FillLoginRoleData_PostPropertyChanged final
{
public:
	class FString                                 MemberName;                                        // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash)
	class FString                                 PropertyName;                                      // 0x0010(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash)
};
//static_assert(alignof(BED_FSMNode_GI_Loading_FillLoginRoleData_PostPropertyChanged) == 0x000008, "Wrong alignment on BED_FSMNode_GI_Loading_FillLoginRoleData_PostPropertyChanged");
//static_assert(sizeof(BED_FSMNode_GI_Loading_FillLoginRoleData_PostPropertyChanged) == 0x000020, "Wrong size on BED_FSMNode_GI_Loading_FillLoginRoleData_PostPropertyChanged");
//static_assert(offsetof(BED_FSMNode_GI_Loading_FillLoginRoleData_PostPropertyChanged, MemberName) == 0x000000, "Member 'BED_FSMNode_GI_Loading_FillLoginRoleData_PostPropertyChanged::MemberName' has a wrong offset!");
//static_assert(offsetof(BED_FSMNode_GI_Loading_FillLoginRoleData_PostPropertyChanged, PropertyName) == 0x000010, "Member 'BED_FSMNode_GI_Loading_FillLoginRoleData_PostPropertyChanged::PropertyName' has a wrong offset!");

// Function b1-Managed.BED_FSMNode_GI_Loading_FillLoginRoleData.GetNodeDescriptionInCS
// 0x0010 (0x0010 - 0x0000)
struct BED_FSMNode_GI_Loading_FillLoginRoleData_GetNodeDescriptionInCS final
{
public:
	class FString                                 ReturnValue;                                       // 0x0000(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash)
};
//static_assert(alignof(BED_FSMNode_GI_Loading_FillLoginRoleData_GetNodeDescriptionInCS) == 0x000008, "Wrong alignment on BED_FSMNode_GI_Loading_FillLoginRoleData_GetNodeDescriptionInCS");
//static_assert(sizeof(BED_FSMNode_GI_Loading_FillLoginRoleData_GetNodeDescriptionInCS) == 0x000010, "Wrong size on BED_FSMNode_GI_Loading_FillLoginRoleData_GetNodeDescriptionInCS");
//static_assert(offsetof(BED_FSMNode_GI_Loading_FillLoginRoleData_GetNodeDescriptionInCS, ReturnValue) == 0x000000, "Member 'BED_FSMNode_GI_Loading_FillLoginRoleData_GetNodeDescriptionInCS::ReturnValue' has a wrong offset!");

// Function b1-Managed.BED_FSMNode_GI_Loading_MarkFirstStartGameFlag.PostPropertyChanged
// 0x0020 (0x0020 - 0x0000)
struct BED_FSMNode_GI_Loading_MarkFirstStartGameFlag_PostPropertyChanged final
{
public:
	class FString                                 MemberName;                                        // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash)
	class FString                                 PropertyName;                                      // 0x0010(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash)
};
//static_assert(alignof(BED_FSMNode_GI_Loading_MarkFirstStartGameFlag_PostPropertyChanged) == 0x000008, "Wrong alignment on BED_FSMNode_GI_Loading_MarkFirstStartGameFlag_PostPropertyChanged");
//static_assert(sizeof(BED_FSMNode_GI_Loading_MarkFirstStartGameFlag_PostPropertyChanged) == 0x000020, "Wrong size on BED_FSMNode_GI_Loading_MarkFirstStartGameFlag_PostPropertyChanged");
//static_assert(offsetof(BED_FSMNode_GI_Loading_MarkFirstStartGameFlag_PostPropertyChanged, MemberName) == 0x000000, "Member 'BED_FSMNode_GI_Loading_MarkFirstStartGameFlag_PostPropertyChanged::MemberName' has a wrong offset!");
//static_assert(offsetof(BED_FSMNode_GI_Loading_MarkFirstStartGameFlag_PostPropertyChanged, PropertyName) == 0x000010, "Member 'BED_FSMNode_GI_Loading_MarkFirstStartGameFlag_PostPropertyChanged::PropertyName' has a wrong offset!");

// Function b1-Managed.BED_FSMNode_GI_Loading_MarkFirstStartGameFlag.GetNodeDescriptionInCS
// 0x0010 (0x0010 - 0x0000)
struct BED_FSMNode_GI_Loading_MarkFirstStartGameFlag_GetNodeDescriptionInCS final
{
public:
	class FString                                 ReturnValue;                                       // 0x0000(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash)
};
//static_assert(alignof(BED_FSMNode_GI_Loading_MarkFirstStartGameFlag_GetNodeDescriptionInCS) == 0x000008, "Wrong alignment on BED_FSMNode_GI_Loading_MarkFirstStartGameFlag_GetNodeDescriptionInCS");
//static_assert(sizeof(BED_FSMNode_GI_Loading_MarkFirstStartGameFlag_GetNodeDescriptionInCS) == 0x000010, "Wrong size on BED_FSMNode_GI_Loading_MarkFirstStartGameFlag_GetNodeDescriptionInCS");
//static_assert(offsetof(BED_FSMNode_GI_Loading_MarkFirstStartGameFlag_GetNodeDescriptionInCS, ReturnValue) == 0x000000, "Member 'BED_FSMNode_GI_Loading_MarkFirstStartGameFlag_GetNodeDescriptionInCS::ReturnValue' has a wrong offset!");

// Function b1-Managed.BED_FSMNode_GI_Loading_GSGBtlOnBattleStart.PostPropertyChanged
// 0x0020 (0x0020 - 0x0000)
struct BED_FSMNode_GI_Loading_GSGBtlOnBattleStart_PostPropertyChanged final
{
public:
	class FString                                 MemberName;                                        // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash)
	class FString                                 PropertyName;                                      // 0x0010(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash)
};
//static_assert(alignof(BED_FSMNode_GI_Loading_GSGBtlOnBattleStart_PostPropertyChanged) == 0x000008, "Wrong alignment on BED_FSMNode_GI_Loading_GSGBtlOnBattleStart_PostPropertyChanged");
//static_assert(sizeof(BED_FSMNode_GI_Loading_GSGBtlOnBattleStart_PostPropertyChanged) == 0x000020, "Wrong size on BED_FSMNode_GI_Loading_GSGBtlOnBattleStart_PostPropertyChanged");
//static_assert(offsetof(BED_FSMNode_GI_Loading_GSGBtlOnBattleStart_PostPropertyChanged, MemberName) == 0x000000, "Member 'BED_FSMNode_GI_Loading_GSGBtlOnBattleStart_PostPropertyChanged::MemberName' has a wrong offset!");
//static_assert(offsetof(BED_FSMNode_GI_Loading_GSGBtlOnBattleStart_PostPropertyChanged, PropertyName) == 0x000010, "Member 'BED_FSMNode_GI_Loading_GSGBtlOnBattleStart_PostPropertyChanged::PropertyName' has a wrong offset!");

// Function b1-Managed.BED_FSMNode_GI_Loading_GSGBtlOnBattleStart.GetNodeDescriptionInCS
// 0x0010 (0x0010 - 0x0000)
struct BED_FSMNode_GI_Loading_GSGBtlOnBattleStart_GetNodeDescriptionInCS final
{
public:
	class FString                                 ReturnValue;                                       // 0x0000(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash)
};
//static_assert(alignof(BED_FSMNode_GI_Loading_GSGBtlOnBattleStart_GetNodeDescriptionInCS) == 0x000008, "Wrong alignment on BED_FSMNode_GI_Loading_GSGBtlOnBattleStart_GetNodeDescriptionInCS");
//static_assert(sizeof(BED_FSMNode_GI_Loading_GSGBtlOnBattleStart_GetNodeDescriptionInCS) == 0x000010, "Wrong size on BED_FSMNode_GI_Loading_GSGBtlOnBattleStart_GetNodeDescriptionInCS");
//static_assert(offsetof(BED_FSMNode_GI_Loading_GSGBtlOnBattleStart_GetNodeDescriptionInCS, ReturnValue) == 0x000000, "Member 'BED_FSMNode_GI_Loading_GSGBtlOnBattleStart_GetNodeDescriptionInCS::ReturnValue' has a wrong offset!");

// Function b1-Managed.BED_FSMNode_GI_Loading_InitNewArchiveData.PostPropertyChanged
// 0x0020 (0x0020 - 0x0000)
struct BED_FSMNode_GI_Loading_InitNewArchiveData_PostPropertyChanged final
{
public:
	class FString                                 MemberName;                                        // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash)
	class FString                                 PropertyName;                                      // 0x0010(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash)
};
//static_assert(alignof(BED_FSMNode_GI_Loading_InitNewArchiveData_PostPropertyChanged) == 0x000008, "Wrong alignment on BED_FSMNode_GI_Loading_InitNewArchiveData_PostPropertyChanged");
//static_assert(sizeof(BED_FSMNode_GI_Loading_InitNewArchiveData_PostPropertyChanged) == 0x000020, "Wrong size on BED_FSMNode_GI_Loading_InitNewArchiveData_PostPropertyChanged");
//static_assert(offsetof(BED_FSMNode_GI_Loading_InitNewArchiveData_PostPropertyChanged, MemberName) == 0x000000, "Member 'BED_FSMNode_GI_Loading_InitNewArchiveData_PostPropertyChanged::MemberName' has a wrong offset!");
//static_assert(offsetof(BED_FSMNode_GI_Loading_InitNewArchiveData_PostPropertyChanged, PropertyName) == 0x000010, "Member 'BED_FSMNode_GI_Loading_InitNewArchiveData_PostPropertyChanged::PropertyName' has a wrong offset!");

// Function b1-Managed.BED_FSMNode_GI_Loading_InitNewArchiveData.GetNodeDescriptionInCS
// 0x0010 (0x0010 - 0x0000)
struct BED_FSMNode_GI_Loading_InitNewArchiveData_GetNodeDescriptionInCS final
{
public:
	class FString                                 ReturnValue;                                       // 0x0000(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash)
};
//static_assert(alignof(BED_FSMNode_GI_Loading_InitNewArchiveData_GetNodeDescriptionInCS) == 0x000008, "Wrong alignment on BED_FSMNode_GI_Loading_InitNewArchiveData_GetNodeDescriptionInCS");
//static_assert(sizeof(BED_FSMNode_GI_Loading_InitNewArchiveData_GetNodeDescriptionInCS) == 0x000010, "Wrong size on BED_FSMNode_GI_Loading_InitNewArchiveData_GetNodeDescriptionInCS");
//static_assert(offsetof(BED_FSMNode_GI_Loading_InitNewArchiveData_GetNodeDescriptionInCS, ReturnValue) == 0x000000, "Member 'BED_FSMNode_GI_Loading_InitNewArchiveData_GetNodeDescriptionInCS::ReturnValue' has a wrong offset!");

// Function b1-Managed.AnimNotify_GSFootStep.GSNotifyCS
// 0x0040 (0x0040 - 0x0000)
struct AnimNotify_GSFootStep_GSNotifyCS final
{
public:
	struct FUStGSNotifyParam                      NotifyParam;                                       // 0x0000(0x0040)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
//static_assert(alignof(AnimNotify_GSFootStep_GSNotifyCS) == 0x000008, "Wrong alignment on AnimNotify_GSFootStep_GSNotifyCS");
//static_assert(sizeof(AnimNotify_GSFootStep_GSNotifyCS) == 0x000040, "Wrong size on AnimNotify_GSFootStep_GSNotifyCS");
//static_assert(offsetof(AnimNotify_GSFootStep_GSNotifyCS, NotifyParam) == 0x000000, "Member 'AnimNotify_GSFootStep_GSNotifyCS::NotifyParam' has a wrong offset!");

// Function b1-Managed.BGW_ChapterView820Mgr.OnAKBStateEndFunc
// 0x0014 (0x0014 - 0x0000)
struct BGW_ChapterView820Mgr_OnAKBStateEndFunc final
{
public:
	class FName                                   BeginStateName;                                    // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class FName                                   EndStateName;                                      // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         IsForceImSet : 1;                                  // 0x0010(0x0001)(BitIndex: 0x00, PropSize: 0x0001 (Parm, NoDestructor, HasGetValueTypeHash))
};
//static_assert(alignof(BGW_ChapterView820Mgr_OnAKBStateEndFunc) == 0x000004, "Wrong alignment on BGW_ChapterView820Mgr_OnAKBStateEndFunc");
//static_assert(sizeof(BGW_ChapterView820Mgr_OnAKBStateEndFunc) == 0x000014, "Wrong size on BGW_ChapterView820Mgr_OnAKBStateEndFunc");
//static_assert(offsetof(BGW_ChapterView820Mgr_OnAKBStateEndFunc, BeginStateName) == 0x000000, "Member 'BGW_ChapterView820Mgr_OnAKBStateEndFunc::BeginStateName' has a wrong offset!");
//static_assert(offsetof(BGW_ChapterView820Mgr_OnAKBStateEndFunc, EndStateName) == 0x000008, "Member 'BGW_ChapterView820Mgr_OnAKBStateEndFunc::EndStateName' has a wrong offset!");

// Function b1-Managed.BANS_GSSweepCheck.GSValidateInputCS
// 0x0008 (0x0008 - 0x0000)
struct BANS_GSSweepCheck_GSValidateInputCS final
{
public:
	class AActor*                                 Actor;                                             // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
//static_assert(alignof(BANS_GSSweepCheck_GSValidateInputCS) == 0x000008, "Wrong alignment on BANS_GSSweepCheck_GSValidateInputCS");
//static_assert(sizeof(BANS_GSSweepCheck_GSValidateInputCS) == 0x000008, "Wrong size on BANS_GSSweepCheck_GSValidateInputCS");
//static_assert(offsetof(BANS_GSSweepCheck_GSValidateInputCS, Actor) == 0x000000, "Member 'BANS_GSSweepCheck_GSValidateInputCS::Actor' has a wrong offset!");

// Function b1-Managed.BANS_GSSweepCheck.GSNotifyBeginCS
// 0x0048 (0x0048 - 0x0000)
struct BANS_GSSweepCheck_GSNotifyBeginCS final
{
public:
	struct FUStGSNotifyParam                      NotifyParam;                                       // 0x0000(0x0040)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
	float                                         TotalDuration;                                     // 0x0040(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
//static_assert(alignof(BANS_GSSweepCheck_GSNotifyBeginCS) == 0x000008, "Wrong alignment on BANS_GSSweepCheck_GSNotifyBeginCS");
//static_assert(sizeof(BANS_GSSweepCheck_GSNotifyBeginCS) == 0x000048, "Wrong size on BANS_GSSweepCheck_GSNotifyBeginCS");
//static_assert(offsetof(BANS_GSSweepCheck_GSNotifyBeginCS, NotifyParam) == 0x000000, "Member 'BANS_GSSweepCheck_GSNotifyBeginCS::NotifyParam' has a wrong offset!");
//static_assert(offsetof(BANS_GSSweepCheck_GSNotifyBeginCS, TotalDuration) == 0x000040, "Member 'BANS_GSSweepCheck_GSNotifyBeginCS::TotalDuration' has a wrong offset!");

// Function b1-Managed.BANS_GSSweepCheck.GSNotifyTickCS
// 0x0048 (0x0048 - 0x0000)
struct BANS_GSSweepCheck_GSNotifyTickCS final
{
public:
	struct FUStGSNotifyParam                      NotifyParam;                                       // 0x0000(0x0040)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
	float                                         FrameDeltaTime;                                    // 0x0040(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
//static_assert(alignof(BANS_GSSweepCheck_GSNotifyTickCS) == 0x000008, "Wrong alignment on BANS_GSSweepCheck_GSNotifyTickCS");
//static_assert(sizeof(BANS_GSSweepCheck_GSNotifyTickCS) == 0x000048, "Wrong size on BANS_GSSweepCheck_GSNotifyTickCS");
//static_assert(offsetof(BANS_GSSweepCheck_GSNotifyTickCS, NotifyParam) == 0x000000, "Member 'BANS_GSSweepCheck_GSNotifyTickCS::NotifyParam' has a wrong offset!");
//static_assert(offsetof(BANS_GSSweepCheck_GSNotifyTickCS, FrameDeltaTime) == 0x000040, "Member 'BANS_GSSweepCheck_GSNotifyTickCS::FrameDeltaTime' has a wrong offset!");

// Function b1-Managed.BANS_GSSweepCheck.AddAssistBreakFrozenEffectID
// 0x0008 (0x0008 - 0x0000)
struct BANS_GSSweepCheck_AddAssistBreakFrozenEffectID final
{
public:
	int32                                         AssistBreakFrozenEffectID;                         // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         ReturnValue : 1;                                   // 0x0004(0x0001)(BitIndex: 0x00, PropSize: 0x0001 (Parm, OutParm, ReturnParm, NoDestructor, HasGetValueTypeHash))
};
//static_assert(alignof(BANS_GSSweepCheck_AddAssistBreakFrozenEffectID) == 0x000004, "Wrong alignment on BANS_GSSweepCheck_AddAssistBreakFrozenEffectID");
//static_assert(sizeof(BANS_GSSweepCheck_AddAssistBreakFrozenEffectID) == 0x000008, "Wrong size on BANS_GSSweepCheck_AddAssistBreakFrozenEffectID");
//static_assert(offsetof(BANS_GSSweepCheck_AddAssistBreakFrozenEffectID, AssistBreakFrozenEffectID) == 0x000000, "Member 'BANS_GSSweepCheck_AddAssistBreakFrozenEffectID::AssistBreakFrozenEffectID' has a wrong offset!");

// Function b1-Managed.BANS_GSSweepCheck.GSNotifyEndCS
// 0x0040 (0x0040 - 0x0000)
struct BANS_GSSweepCheck_GSNotifyEndCS final
{
public:
	struct FUStGSNotifyParam                      NotifyParam;                                       // 0x0000(0x0040)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
//static_assert(alignof(BANS_GSSweepCheck_GSNotifyEndCS) == 0x000008, "Wrong alignment on BANS_GSSweepCheck_GSNotifyEndCS");
//static_assert(sizeof(BANS_GSSweepCheck_GSNotifyEndCS) == 0x000040, "Wrong size on BANS_GSSweepCheck_GSNotifyEndCS");
//static_assert(offsetof(BANS_GSSweepCheck_GSNotifyEndCS, NotifyParam) == 0x000000, "Member 'BANS_GSSweepCheck_GSNotifyEndCS::NotifyParam' has a wrong offset!");

// Function b1-Managed.BANS_GSSweepCheck.ReplaceEffectIDByPreID
// 0x000C (0x000C - 0x0000)
struct BANS_GSSweepCheck_ReplaceEffectIDByPreID final
{
public:
	int32                                         OldPreID;                                          // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         NewPreID;                                          // 0x0004(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         ReturnValue : 1;                                   // 0x0008(0x0001)(BitIndex: 0x00, PropSize: 0x0001 (Parm, OutParm, ReturnParm, NoDestructor, HasGetValueTypeHash))
};
//static_assert(alignof(BANS_GSSweepCheck_ReplaceEffectIDByPreID) == 0x000004, "Wrong alignment on BANS_GSSweepCheck_ReplaceEffectIDByPreID");
//static_assert(sizeof(BANS_GSSweepCheck_ReplaceEffectIDByPreID) == 0x00000C, "Wrong size on BANS_GSSweepCheck_ReplaceEffectIDByPreID");
//static_assert(offsetof(BANS_GSSweepCheck_ReplaceEffectIDByPreID, OldPreID) == 0x000000, "Member 'BANS_GSSweepCheck_ReplaceEffectIDByPreID::OldPreID' has a wrong offset!");
//static_assert(offsetof(BANS_GSSweepCheck_ReplaceEffectIDByPreID, NewPreID) == 0x000004, "Member 'BANS_GSSweepCheck_ReplaceEffectIDByPreID::NewPreID' has a wrong offset!");

// Function b1-Managed.BANS_GSSweepCheck.ResetSweepCheckChanel
// 0x0001 (0x0001 - 0x0000)
struct BANS_GSSweepCheck_ResetSweepCheckChanel final
{
public:
	ECollisionChannel                             NewCollisionChanel;                                // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
//static_assert(alignof(BANS_GSSweepCheck_ResetSweepCheckChanel) == 0x000001, "Wrong alignment on BANS_GSSweepCheck_ResetSweepCheckChanel");
//static_assert(sizeof(BANS_GSSweepCheck_ResetSweepCheckChanel) == 0x000001, "Wrong size on BANS_GSSweepCheck_ResetSweepCheckChanel");
//static_assert(offsetof(BANS_GSSweepCheck_ResetSweepCheckChanel, NewCollisionChanel) == 0x000000, "Member 'BANS_GSSweepCheck_ResetSweepCheckChanel::NewCollisionChanel' has a wrong offset!");

// Function b1-Managed.BANS_GSSweepCheck.HasAbnormalStateData
// 0x0001 (0x0001 - 0x0000)
struct BANS_GSSweepCheck_HasAbnormalStateData final
{
public:
	uint8                                         ReturnValue : 1;                                   // 0x0000(0x0001)(BitIndex: 0x00, PropSize: 0x0001 (Parm, OutParm, ReturnParm, NoDestructor, HasGetValueTypeHash))
};
//static_assert(alignof(BANS_GSSweepCheck_HasAbnormalStateData) == 0x000001, "Wrong alignment on BANS_GSSweepCheck_HasAbnormalStateData");
//static_assert(sizeof(BANS_GSSweepCheck_HasAbnormalStateData) == 0x000001, "Wrong size on BANS_GSSweepCheck_HasAbnormalStateData");

// Function b1-Managed.BED_FSMNode_GI_Loading_GSGOnBattleDestroy.PostPropertyChanged
// 0x0020 (0x0020 - 0x0000)
struct BED_FSMNode_GI_Loading_GSGOnBattleDestroy_PostPropertyChanged final
{
public:
	class FString                                 MemberName;                                        // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash)
	class FString                                 PropertyName;                                      // 0x0010(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash)
};
//static_assert(alignof(BED_FSMNode_GI_Loading_GSGOnBattleDestroy_PostPropertyChanged) == 0x000008, "Wrong alignment on BED_FSMNode_GI_Loading_GSGOnBattleDestroy_PostPropertyChanged");
//static_assert(sizeof(BED_FSMNode_GI_Loading_GSGOnBattleDestroy_PostPropertyChanged) == 0x000020, "Wrong size on BED_FSMNode_GI_Loading_GSGOnBattleDestroy_PostPropertyChanged");
//static_assert(offsetof(BED_FSMNode_GI_Loading_GSGOnBattleDestroy_PostPropertyChanged, MemberName) == 0x000000, "Member 'BED_FSMNode_GI_Loading_GSGOnBattleDestroy_PostPropertyChanged::MemberName' has a wrong offset!");
//static_assert(offsetof(BED_FSMNode_GI_Loading_GSGOnBattleDestroy_PostPropertyChanged, PropertyName) == 0x000010, "Member 'BED_FSMNode_GI_Loading_GSGOnBattleDestroy_PostPropertyChanged::PropertyName' has a wrong offset!");

// Function b1-Managed.BED_FSMNode_GI_Loading_GSGOnBattleDestroy.GetNodeDescriptionInCS
// 0x0010 (0x0010 - 0x0000)
struct BED_FSMNode_GI_Loading_GSGOnBattleDestroy_GetNodeDescriptionInCS final
{
public:
	class FString                                 ReturnValue;                                       // 0x0000(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash)
};
//static_assert(alignof(BED_FSMNode_GI_Loading_GSGOnBattleDestroy_GetNodeDescriptionInCS) == 0x000008, "Wrong alignment on BED_FSMNode_GI_Loading_GSGOnBattleDestroy_GetNodeDescriptionInCS");
//static_assert(sizeof(BED_FSMNode_GI_Loading_GSGOnBattleDestroy_GetNodeDescriptionInCS) == 0x000010, "Wrong size on BED_FSMNode_GI_Loading_GSGOnBattleDestroy_GetNodeDescriptionInCS");
//static_assert(offsetof(BED_FSMNode_GI_Loading_GSGOnBattleDestroy_GetNodeDescriptionInCS, ReturnValue) == 0x000000, "Member 'BED_FSMNode_GI_Loading_GSGOnBattleDestroy_GetNodeDescriptionInCS::ReturnValue' has a wrong offset!");

// Function b1-Managed.BANS_GSCastTTTB.GSNotifyBeginCS
// 0x0048 (0x0048 - 0x0000)
struct BANS_GSCastTTTB_GSNotifyBeginCS final
{
public:
	struct FUStGSNotifyParam                      NotifyParam;                                       // 0x0000(0x0040)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
	float                                         TotalDuration;                                     // 0x0040(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
//static_assert(alignof(BANS_GSCastTTTB_GSNotifyBeginCS) == 0x000008, "Wrong alignment on BANS_GSCastTTTB_GSNotifyBeginCS");
//static_assert(sizeof(BANS_GSCastTTTB_GSNotifyBeginCS) == 0x000048, "Wrong size on BANS_GSCastTTTB_GSNotifyBeginCS");
//static_assert(offsetof(BANS_GSCastTTTB_GSNotifyBeginCS, NotifyParam) == 0x000000, "Member 'BANS_GSCastTTTB_GSNotifyBeginCS::NotifyParam' has a wrong offset!");
//static_assert(offsetof(BANS_GSCastTTTB_GSNotifyBeginCS, TotalDuration) == 0x000040, "Member 'BANS_GSCastTTTB_GSNotifyBeginCS::TotalDuration' has a wrong offset!");

// Function b1-Managed.BANS_GSCastTTTB.GSNotifyTickCS
// 0x0048 (0x0048 - 0x0000)
struct BANS_GSCastTTTB_GSNotifyTickCS final
{
public:
	struct FUStGSNotifyParam                      NotifyParam;                                       // 0x0000(0x0040)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
	float                                         FrameDeltaTime;                                    // 0x0040(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
//static_assert(alignof(BANS_GSCastTTTB_GSNotifyTickCS) == 0x000008, "Wrong alignment on BANS_GSCastTTTB_GSNotifyTickCS");
//static_assert(sizeof(BANS_GSCastTTTB_GSNotifyTickCS) == 0x000048, "Wrong size on BANS_GSCastTTTB_GSNotifyTickCS");
//static_assert(offsetof(BANS_GSCastTTTB_GSNotifyTickCS, NotifyParam) == 0x000000, "Member 'BANS_GSCastTTTB_GSNotifyTickCS::NotifyParam' has a wrong offset!");
//static_assert(offsetof(BANS_GSCastTTTB_GSNotifyTickCS, FrameDeltaTime) == 0x000040, "Member 'BANS_GSCastTTTB_GSNotifyTickCS::FrameDeltaTime' has a wrong offset!");

// Function b1-Managed.BANS_GSCastTTTB.GSNotifyEndCS
// 0x0040 (0x0040 - 0x0000)
struct BANS_GSCastTTTB_GSNotifyEndCS final
{
public:
	struct FUStGSNotifyParam                      NotifyParam;                                       // 0x0000(0x0040)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
//static_assert(alignof(BANS_GSCastTTTB_GSNotifyEndCS) == 0x000008, "Wrong alignment on BANS_GSCastTTTB_GSNotifyEndCS");
//static_assert(sizeof(BANS_GSCastTTTB_GSNotifyEndCS) == 0x000040, "Wrong size on BANS_GSCastTTTB_GSNotifyEndCS");
//static_assert(offsetof(BANS_GSCastTTTB_GSNotifyEndCS, NotifyParam) == 0x000000, "Member 'BANS_GSCastTTTB_GSNotifyEndCS::NotifyParam' has a wrong offset!");

// Function b1-Managed.BED_QuestNode_Counter.GetNodeDescriptionInCS
// 0x0010 (0x0010 - 0x0000)
struct BED_QuestNode_Counter_GetNodeDescriptionInCS final
{
public:
	class FString                                 ReturnValue;                                       // 0x0000(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash)
};
//static_assert(alignof(BED_QuestNode_Counter_GetNodeDescriptionInCS) == 0x000008, "Wrong alignment on BED_QuestNode_Counter_GetNodeDescriptionInCS");
//static_assert(sizeof(BED_QuestNode_Counter_GetNodeDescriptionInCS) == 0x000010, "Wrong size on BED_QuestNode_Counter_GetNodeDescriptionInCS");
//static_assert(offsetof(BED_QuestNode_Counter_GetNodeDescriptionInCS, ReturnValue) == 0x000000, "Member 'BED_QuestNode_Counter_GetNodeDescriptionInCS::ReturnValue' has a wrong offset!");

// Function b1-Managed.BED_QuestNode_Counter.GetStatusStringInCS
// 0x0010 (0x0010 - 0x0000)
struct BED_QuestNode_Counter_GetStatusStringInCS final
{
public:
	class FString                                 ReturnValue;                                       // 0x0000(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash)
};
//static_assert(alignof(BED_QuestNode_Counter_GetStatusStringInCS) == 0x000008, "Wrong alignment on BED_QuestNode_Counter_GetStatusStringInCS");
//static_assert(sizeof(BED_QuestNode_Counter_GetStatusStringInCS) == 0x000010, "Wrong size on BED_QuestNode_Counter_GetStatusStringInCS");
//static_assert(offsetof(BED_QuestNode_Counter_GetStatusStringInCS, ReturnValue) == 0x000000, "Member 'BED_QuestNode_Counter_GetStatusStringInCS::ReturnValue' has a wrong offset!");

// Function b1-Managed.BED_FSMNode_GI_Loading_LoadingUIWaitUserInput.PostPropertyChanged
// 0x0020 (0x0020 - 0x0000)
struct BED_FSMNode_GI_Loading_LoadingUIWaitUserInput_PostPropertyChanged final
{
public:
	class FString                                 MemberName;                                        // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash)
	class FString                                 PropertyName;                                      // 0x0010(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash)
};
//static_assert(alignof(BED_FSMNode_GI_Loading_LoadingUIWaitUserInput_PostPropertyChanged) == 0x000008, "Wrong alignment on BED_FSMNode_GI_Loading_LoadingUIWaitUserInput_PostPropertyChanged");
//static_assert(sizeof(BED_FSMNode_GI_Loading_LoadingUIWaitUserInput_PostPropertyChanged) == 0x000020, "Wrong size on BED_FSMNode_GI_Loading_LoadingUIWaitUserInput_PostPropertyChanged");
//static_assert(offsetof(BED_FSMNode_GI_Loading_LoadingUIWaitUserInput_PostPropertyChanged, MemberName) == 0x000000, "Member 'BED_FSMNode_GI_Loading_LoadingUIWaitUserInput_PostPropertyChanged::MemberName' has a wrong offset!");
//static_assert(offsetof(BED_FSMNode_GI_Loading_LoadingUIWaitUserInput_PostPropertyChanged, PropertyName) == 0x000010, "Member 'BED_FSMNode_GI_Loading_LoadingUIWaitUserInput_PostPropertyChanged::PropertyName' has a wrong offset!");

// Function b1-Managed.BED_FSMNode_GI_Loading_LoadingUIWaitUserInput.GetNodeDescriptionInCS
// 0x0010 (0x0010 - 0x0000)
struct BED_FSMNode_GI_Loading_LoadingUIWaitUserInput_GetNodeDescriptionInCS final
{
public:
	class FString                                 ReturnValue;                                       // 0x0000(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash)
};
//static_assert(alignof(BED_FSMNode_GI_Loading_LoadingUIWaitUserInput_GetNodeDescriptionInCS) == 0x000008, "Wrong alignment on BED_FSMNode_GI_Loading_LoadingUIWaitUserInput_GetNodeDescriptionInCS");
//static_assert(sizeof(BED_FSMNode_GI_Loading_LoadingUIWaitUserInput_GetNodeDescriptionInCS) == 0x000010, "Wrong size on BED_FSMNode_GI_Loading_LoadingUIWaitUserInput_GetNodeDescriptionInCS");
//static_assert(offsetof(BED_FSMNode_GI_Loading_LoadingUIWaitUserInput_GetNodeDescriptionInCS, ReturnValue) == 0x000000, "Member 'BED_FSMNode_GI_Loading_LoadingUIWaitUserInput_GetNodeDescriptionInCS::ReturnValue' has a wrong offset!");

// Function b1-Managed.BUBirthPoint.ReceiveEndPlay
// 0x0001 (0x0001 - 0x0000)
struct BUBirthPoint_ReceiveEndPlay final
{
public:
	EEndPlayReason                                EndPlayReason;                                     // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
//static_assert(alignof(BUBirthPoint_ReceiveEndPlay) == 0x000001, "Wrong alignment on BUBirthPoint_ReceiveEndPlay");
//static_assert(sizeof(BUBirthPoint_ReceiveEndPlay) == 0x000001, "Wrong size on BUBirthPoint_ReceiveEndPlay");
//static_assert(offsetof(BUBirthPoint_ReceiveEndPlay, EndPlayReason) == 0x000000, "Member 'BUBirthPoint_ReceiveEndPlay::EndPlayReason' has a wrong offset!");

// Function b1-Managed.BED_FSMNode_GI_Global_OpenMainMenuLevel.PostPropertyChanged
// 0x0020 (0x0020 - 0x0000)
struct BED_FSMNode_GI_Global_OpenMainMenuLevel_PostPropertyChanged final
{
public:
	class FString                                 MemberName;                                        // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash)
	class FString                                 PropertyName;                                      // 0x0010(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash)
};
//static_assert(alignof(BED_FSMNode_GI_Global_OpenMainMenuLevel_PostPropertyChanged) == 0x000008, "Wrong alignment on BED_FSMNode_GI_Global_OpenMainMenuLevel_PostPropertyChanged");
//static_assert(sizeof(BED_FSMNode_GI_Global_OpenMainMenuLevel_PostPropertyChanged) == 0x000020, "Wrong size on BED_FSMNode_GI_Global_OpenMainMenuLevel_PostPropertyChanged");
//static_assert(offsetof(BED_FSMNode_GI_Global_OpenMainMenuLevel_PostPropertyChanged, MemberName) == 0x000000, "Member 'BED_FSMNode_GI_Global_OpenMainMenuLevel_PostPropertyChanged::MemberName' has a wrong offset!");
//static_assert(offsetof(BED_FSMNode_GI_Global_OpenMainMenuLevel_PostPropertyChanged, PropertyName) == 0x000010, "Member 'BED_FSMNode_GI_Global_OpenMainMenuLevel_PostPropertyChanged::PropertyName' has a wrong offset!");

// Function b1-Managed.BED_FSMNode_GI_Global_OpenMainMenuLevel.GetNodeDescriptionInCS
// 0x0010 (0x0010 - 0x0000)
struct BED_FSMNode_GI_Global_OpenMainMenuLevel_GetNodeDescriptionInCS final
{
public:
	class FString                                 ReturnValue;                                       // 0x0000(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash)
};
//static_assert(alignof(BED_FSMNode_GI_Global_OpenMainMenuLevel_GetNodeDescriptionInCS) == 0x000008, "Wrong alignment on BED_FSMNode_GI_Global_OpenMainMenuLevel_GetNodeDescriptionInCS");
//static_assert(sizeof(BED_FSMNode_GI_Global_OpenMainMenuLevel_GetNodeDescriptionInCS) == 0x000010, "Wrong size on BED_FSMNode_GI_Global_OpenMainMenuLevel_GetNodeDescriptionInCS");
//static_assert(offsetof(BED_FSMNode_GI_Global_OpenMainMenuLevel_GetNodeDescriptionInCS, ReturnValue) == 0x000000, "Member 'BED_FSMNode_GI_Global_OpenMainMenuLevel_GetNodeDescriptionInCS::ReturnValue' has a wrong offset!");

// Function b1-Managed.BUS_FXAnimalCommComp.StartEscape
// 0x0108 (0x0108 - 0x0000)
struct BUS_FXAnimalCommComp_StartEscape final
{
public:
	class UPrimitiveComponent*                    OverlappedComponent;                               // 0x0000(0x0008)(ExportObject, Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class AActor*                                 OtherActor;                                        // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UPrimitiveComponent*                    OtherComp;                                         // 0x0010(0x0008)(ExportObject, Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         OtherBodyIndex;                                    // 0x0018(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         bFromSweep : 1;                                    // 0x001C(0x0001)(BitIndex: 0x00, PropSize: 0x0001 (Parm, NoDestructor, HasGetValueTypeHash))
	uint8                                         Pad_1D[0x3];                                       // 0x001D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FHitResult                             SweepResult;                                       // 0x0020(0x00E8)(Parm, IsPlainOldData, NoDestructor)
};
//static_assert(alignof(BUS_FXAnimalCommComp_StartEscape) == 0x000008, "Wrong alignment on BUS_FXAnimalCommComp_StartEscape");
//static_assert(sizeof(BUS_FXAnimalCommComp_StartEscape) == 0x000108, "Wrong size on BUS_FXAnimalCommComp_StartEscape");
//static_assert(offsetof(BUS_FXAnimalCommComp_StartEscape, OverlappedComponent) == 0x000000, "Member 'BUS_FXAnimalCommComp_StartEscape::OverlappedComponent' has a wrong offset!");
//static_assert(offsetof(BUS_FXAnimalCommComp_StartEscape, OtherActor) == 0x000008, "Member 'BUS_FXAnimalCommComp_StartEscape::OtherActor' has a wrong offset!");
//static_assert(offsetof(BUS_FXAnimalCommComp_StartEscape, OtherComp) == 0x000010, "Member 'BUS_FXAnimalCommComp_StartEscape::OtherComp' has a wrong offset!");
//static_assert(offsetof(BUS_FXAnimalCommComp_StartEscape, OtherBodyIndex) == 0x000018, "Member 'BUS_FXAnimalCommComp_StartEscape::OtherBodyIndex' has a wrong offset!");
//static_assert(offsetof(BUS_FXAnimalCommComp_StartEscape, SweepResult) == 0x000020, "Member 'BUS_FXAnimalCommComp_StartEscape::SweepResult' has a wrong offset!");

// Function b1-Managed.BED_FSMNode_GI_Global_SubG_GI_Loading_820DemoStartUp.GetNodeDescriptionInCS
// 0x0010 (0x0010 - 0x0000)
struct BED_FSMNode_GI_Global_SubG_GI_Loading_820DemoStartUp_GetNodeDescriptionInCS final
{
public:
	class FString                                 ReturnValue;                                       // 0x0000(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash)
};
//static_assert(alignof(BED_FSMNode_GI_Global_SubG_GI_Loading_820DemoStartUp_GetNodeDescriptionInCS) == 0x000008, "Wrong alignment on BED_FSMNode_GI_Global_SubG_GI_Loading_820DemoStartUp_GetNodeDescriptionInCS");
//static_assert(sizeof(BED_FSMNode_GI_Global_SubG_GI_Loading_820DemoStartUp_GetNodeDescriptionInCS) == 0x000010, "Wrong size on BED_FSMNode_GI_Global_SubG_GI_Loading_820DemoStartUp_GetNodeDescriptionInCS");
//static_assert(offsetof(BED_FSMNode_GI_Global_SubG_GI_Loading_820DemoStartUp_GetNodeDescriptionInCS, ReturnValue) == 0x000000, "Member 'BED_FSMNode_GI_Global_SubG_GI_Loading_820DemoStartUp_GetNodeDescriptionInCS::ReturnValue' has a wrong offset!");

// Function b1-Managed.BED_FSMNode_GI_Loading_OpenLevelByIdInContext.PostPropertyChanged
// 0x0020 (0x0020 - 0x0000)
struct BED_FSMNode_GI_Loading_OpenLevelByIdInContext_PostPropertyChanged final
{
public:
	class FString                                 MemberName;                                        // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash)
	class FString                                 PropertyName;                                      // 0x0010(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash)
};
//static_assert(alignof(BED_FSMNode_GI_Loading_OpenLevelByIdInContext_PostPropertyChanged) == 0x000008, "Wrong alignment on BED_FSMNode_GI_Loading_OpenLevelByIdInContext_PostPropertyChanged");
//static_assert(sizeof(BED_FSMNode_GI_Loading_OpenLevelByIdInContext_PostPropertyChanged) == 0x000020, "Wrong size on BED_FSMNode_GI_Loading_OpenLevelByIdInContext_PostPropertyChanged");
//static_assert(offsetof(BED_FSMNode_GI_Loading_OpenLevelByIdInContext_PostPropertyChanged, MemberName) == 0x000000, "Member 'BED_FSMNode_GI_Loading_OpenLevelByIdInContext_PostPropertyChanged::MemberName' has a wrong offset!");
//static_assert(offsetof(BED_FSMNode_GI_Loading_OpenLevelByIdInContext_PostPropertyChanged, PropertyName) == 0x000010, "Member 'BED_FSMNode_GI_Loading_OpenLevelByIdInContext_PostPropertyChanged::PropertyName' has a wrong offset!");

// Function b1-Managed.BED_FSMNode_GI_Loading_OpenLevelByIdInContext.GetNodeDescriptionInCS
// 0x0010 (0x0010 - 0x0000)
struct BED_FSMNode_GI_Loading_OpenLevelByIdInContext_GetNodeDescriptionInCS final
{
public:
	class FString                                 ReturnValue;                                       // 0x0000(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash)
};
//static_assert(alignof(BED_FSMNode_GI_Loading_OpenLevelByIdInContext_GetNodeDescriptionInCS) == 0x000008, "Wrong alignment on BED_FSMNode_GI_Loading_OpenLevelByIdInContext_GetNodeDescriptionInCS");
//static_assert(sizeof(BED_FSMNode_GI_Loading_OpenLevelByIdInContext_GetNodeDescriptionInCS) == 0x000010, "Wrong size on BED_FSMNode_GI_Loading_OpenLevelByIdInContext_GetNodeDescriptionInCS");
//static_assert(offsetof(BED_FSMNode_GI_Loading_OpenLevelByIdInContext_GetNodeDescriptionInCS, ReturnValue) == 0x000000, "Member 'BED_FSMNode_GI_Loading_OpenLevelByIdInContext_GetNodeDescriptionInCS::ReturnValue' has a wrong offset!");

// Function b1-Managed.BED_FSMNode_GI_Global_SubG_GI_Loading_GameLevelPass.GetNodeDescriptionInCS
// 0x0010 (0x0010 - 0x0000)
struct BED_FSMNode_GI_Global_SubG_GI_Loading_GameLevelPass_GetNodeDescriptionInCS final
{
public:
	class FString                                 ReturnValue;                                       // 0x0000(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash)
};
//static_assert(alignof(BED_FSMNode_GI_Global_SubG_GI_Loading_GameLevelPass_GetNodeDescriptionInCS) == 0x000008, "Wrong alignment on BED_FSMNode_GI_Global_SubG_GI_Loading_GameLevelPass_GetNodeDescriptionInCS");
//static_assert(sizeof(BED_FSMNode_GI_Global_SubG_GI_Loading_GameLevelPass_GetNodeDescriptionInCS) == 0x000010, "Wrong size on BED_FSMNode_GI_Global_SubG_GI_Loading_GameLevelPass_GetNodeDescriptionInCS");
//static_assert(offsetof(BED_FSMNode_GI_Global_SubG_GI_Loading_GameLevelPass_GetNodeDescriptionInCS, ReturnValue) == 0x000000, "Member 'BED_FSMNode_GI_Global_SubG_GI_Loading_GameLevelPass_GetNodeDescriptionInCS::ReturnValue' has a wrong offset!");

// Function b1-Managed.BED_FSMNode_GI_Global_SubG_GI_Loading_PartyRoomServer.GetNodeDescriptionInCS
// 0x0010 (0x0010 - 0x0000)
struct BED_FSMNode_GI_Global_SubG_GI_Loading_PartyRoomServer_GetNodeDescriptionInCS final
{
public:
	class FString                                 ReturnValue;                                       // 0x0000(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash)
};
//static_assert(alignof(BED_FSMNode_GI_Global_SubG_GI_Loading_PartyRoomServer_GetNodeDescriptionInCS) == 0x000008, "Wrong alignment on BED_FSMNode_GI_Global_SubG_GI_Loading_PartyRoomServer_GetNodeDescriptionInCS");
//static_assert(sizeof(BED_FSMNode_GI_Global_SubG_GI_Loading_PartyRoomServer_GetNodeDescriptionInCS) == 0x000010, "Wrong size on BED_FSMNode_GI_Global_SubG_GI_Loading_PartyRoomServer_GetNodeDescriptionInCS");
//static_assert(offsetof(BED_FSMNode_GI_Global_SubG_GI_Loading_PartyRoomServer_GetNodeDescriptionInCS, ReturnValue) == 0x000000, "Member 'BED_FSMNode_GI_Global_SubG_GI_Loading_PartyRoomServer_GetNodeDescriptionInCS::ReturnValue' has a wrong offset!");

// Function b1-Managed.BUI_DraggableV2.OnPreviewMouseButtonDown
// 0x0188 (0x0188 - 0x0000)
struct BUI_DraggableV2_OnPreviewMouseButtonDown final
{
public:
	struct FGeometry                              MyGeometry;                                        // 0x0000(0x0040)(Parm, IsPlainOldData, NoDestructor)
	struct FPointerEvent                          MouseEvent;                                        // 0x0040(0x0090)(ConstParm, Parm, OutParm, ReferenceParm)
	struct FEventReply                            ReturnValue;                                       // 0x00D0(0x00B8)(Parm, OutParm, ReturnParm)
};
//static_assert(alignof(BUI_DraggableV2_OnPreviewMouseButtonDown) == 0x000008, "Wrong alignment on BUI_DraggableV2_OnPreviewMouseButtonDown");
//static_assert(sizeof(BUI_DraggableV2_OnPreviewMouseButtonDown) == 0x000188, "Wrong size on BUI_DraggableV2_OnPreviewMouseButtonDown");
//static_assert(offsetof(BUI_DraggableV2_OnPreviewMouseButtonDown, MyGeometry) == 0x000000, "Member 'BUI_DraggableV2_OnPreviewMouseButtonDown::MyGeometry' has a wrong offset!");
//static_assert(offsetof(BUI_DraggableV2_OnPreviewMouseButtonDown, MouseEvent) == 0x000040, "Member 'BUI_DraggableV2_OnPreviewMouseButtonDown::MouseEvent' has a wrong offset!");
//static_assert(offsetof(BUI_DraggableV2_OnPreviewMouseButtonDown, ReturnValue) == 0x0000D0, "Member 'BUI_DraggableV2_OnPreviewMouseButtonDown::ReturnValue' has a wrong offset!");

// Function b1-Managed.BUI_DraggableV2.OnMouseButtonDown
// 0x0188 (0x0188 - 0x0000)
struct BUI_DraggableV2_OnMouseButtonDown final
{
public:
	struct FGeometry                              MyGeometry;                                        // 0x0000(0x0040)(Parm, IsPlainOldData, NoDestructor)
	struct FPointerEvent                          MouseEvent;                                        // 0x0040(0x0090)(ConstParm, Parm, OutParm, ReferenceParm)
	struct FEventReply                            ReturnValue;                                       // 0x00D0(0x00B8)(Parm, OutParm, ReturnParm)
};
//static_assert(alignof(BUI_DraggableV2_OnMouseButtonDown) == 0x000008, "Wrong alignment on BUI_DraggableV2_OnMouseButtonDown");
//static_assert(sizeof(BUI_DraggableV2_OnMouseButtonDown) == 0x000188, "Wrong size on BUI_DraggableV2_OnMouseButtonDown");
//static_assert(offsetof(BUI_DraggableV2_OnMouseButtonDown, MyGeometry) == 0x000000, "Member 'BUI_DraggableV2_OnMouseButtonDown::MyGeometry' has a wrong offset!");
//static_assert(offsetof(BUI_DraggableV2_OnMouseButtonDown, MouseEvent) == 0x000040, "Member 'BUI_DraggableV2_OnMouseButtonDown::MouseEvent' has a wrong offset!");
//static_assert(offsetof(BUI_DraggableV2_OnMouseButtonDown, ReturnValue) == 0x0000D0, "Member 'BUI_DraggableV2_OnMouseButtonDown::ReturnValue' has a wrong offset!");

// Function b1-Managed.BUI_DraggableV2.OnDragCancelled
// 0x0098 (0x0098 - 0x0000)
struct BUI_DraggableV2_OnDragCancelled final
{
public:
	struct FPointerEvent                          MouseEvent;                                        // 0x0000(0x0090)(ConstParm, Parm, OutParm, ReferenceParm)
	class UDragDropOperation*                     Operation;                                         // 0x0090(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
//static_assert(alignof(BUI_DraggableV2_OnDragCancelled) == 0x000008, "Wrong alignment on BUI_DraggableV2_OnDragCancelled");
//static_assert(sizeof(BUI_DraggableV2_OnDragCancelled) == 0x000098, "Wrong size on BUI_DraggableV2_OnDragCancelled");
//static_assert(offsetof(BUI_DraggableV2_OnDragCancelled, MouseEvent) == 0x000000, "Member 'BUI_DraggableV2_OnDragCancelled::MouseEvent' has a wrong offset!");
//static_assert(offsetof(BUI_DraggableV2_OnDragCancelled, Operation) == 0x000090, "Member 'BUI_DraggableV2_OnDragCancelled::Operation' has a wrong offset!");

// Function b1-Managed.BUI_DraggableV2.OnMouseButtonUp
// 0x0188 (0x0188 - 0x0000)
struct BUI_DraggableV2_OnMouseButtonUp final
{
public:
	struct FGeometry                              MyGeometry;                                        // 0x0000(0x0040)(Parm, IsPlainOldData, NoDestructor)
	struct FPointerEvent                          MouseEvent;                                        // 0x0040(0x0090)(ConstParm, Parm, OutParm, ReferenceParm)
	struct FEventReply                            ReturnValue;                                       // 0x00D0(0x00B8)(Parm, OutParm, ReturnParm)
};
//static_assert(alignof(BUI_DraggableV2_OnMouseButtonUp) == 0x000008, "Wrong alignment on BUI_DraggableV2_OnMouseButtonUp");
//static_assert(sizeof(BUI_DraggableV2_OnMouseButtonUp) == 0x000188, "Wrong size on BUI_DraggableV2_OnMouseButtonUp");
//static_assert(offsetof(BUI_DraggableV2_OnMouseButtonUp, MyGeometry) == 0x000000, "Member 'BUI_DraggableV2_OnMouseButtonUp::MyGeometry' has a wrong offset!");
//static_assert(offsetof(BUI_DraggableV2_OnMouseButtonUp, MouseEvent) == 0x000040, "Member 'BUI_DraggableV2_OnMouseButtonUp::MouseEvent' has a wrong offset!");
//static_assert(offsetof(BUI_DraggableV2_OnMouseButtonUp, ReturnValue) == 0x0000D0, "Member 'BUI_DraggableV2_OnMouseButtonUp::ReturnValue' has a wrong offset!");

// Function b1-Managed.BUI_DraggableV2.OnMouseLeave
// 0x0090 (0x0090 - 0x0000)
struct BUI_DraggableV2_OnMouseLeave final
{
public:
	struct FPointerEvent                          MouseEvent;                                        // 0x0000(0x0090)(ConstParm, Parm, OutParm, ReferenceParm)
};
//static_assert(alignof(BUI_DraggableV2_OnMouseLeave) == 0x000008, "Wrong alignment on BUI_DraggableV2_OnMouseLeave");
//static_assert(sizeof(BUI_DraggableV2_OnMouseLeave) == 0x000090, "Wrong size on BUI_DraggableV2_OnMouseLeave");
//static_assert(offsetof(BUI_DraggableV2_OnMouseLeave, MouseEvent) == 0x000000, "Member 'BUI_DraggableV2_OnMouseLeave::MouseEvent' has a wrong offset!");

// Function b1-Managed.BUI_DraggableV2.OnMouseMove
// 0x0188 (0x0188 - 0x0000)
struct BUI_DraggableV2_OnMouseMove final
{
public:
	struct FGeometry                              MyGeometry;                                        // 0x0000(0x0040)(Parm, IsPlainOldData, NoDestructor)
	struct FPointerEvent                          MouseEvent;                                        // 0x0040(0x0090)(ConstParm, Parm, OutParm, ReferenceParm)
	struct FEventReply                            ReturnValue;                                       // 0x00D0(0x00B8)(Parm, OutParm, ReturnParm)
};
//static_assert(alignof(BUI_DraggableV2_OnMouseMove) == 0x000008, "Wrong alignment on BUI_DraggableV2_OnMouseMove");
//static_assert(sizeof(BUI_DraggableV2_OnMouseMove) == 0x000188, "Wrong size on BUI_DraggableV2_OnMouseMove");
//static_assert(offsetof(BUI_DraggableV2_OnMouseMove, MyGeometry) == 0x000000, "Member 'BUI_DraggableV2_OnMouseMove::MyGeometry' has a wrong offset!");
//static_assert(offsetof(BUI_DraggableV2_OnMouseMove, MouseEvent) == 0x000040, "Member 'BUI_DraggableV2_OnMouseMove::MouseEvent' has a wrong offset!");
//static_assert(offsetof(BUI_DraggableV2_OnMouseMove, ReturnValue) == 0x0000D0, "Member 'BUI_DraggableV2_OnMouseMove::ReturnValue' has a wrong offset!");

// Function b1-Managed.BUI_DraggableV2.Tick
// 0x0048 (0x0048 - 0x0000)
struct BUI_DraggableV2_Tick final
{
public:
	struct FGeometry                              MyGeometry;                                        // 0x0000(0x0040)(Parm, IsPlainOldData, NoDestructor)
	float                                         InDeltaTime;                                       // 0x0040(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
//static_assert(alignof(BUI_DraggableV2_Tick) == 0x000008, "Wrong alignment on BUI_DraggableV2_Tick");
//static_assert(sizeof(BUI_DraggableV2_Tick) == 0x000048, "Wrong size on BUI_DraggableV2_Tick");
//static_assert(offsetof(BUI_DraggableV2_Tick, MyGeometry) == 0x000000, "Member 'BUI_DraggableV2_Tick::MyGeometry' has a wrong offset!");
//static_assert(offsetof(BUI_DraggableV2_Tick, InDeltaTime) == 0x000040, "Member 'BUI_DraggableV2_Tick::InDeltaTime' has a wrong offset!");

// Function b1-Managed.BUS_NeutralFXAnimalSpawnLogicComp.StartEscapeWitchSpdCheck
// 0x0108 (0x0108 - 0x0000)
struct BUS_NeutralFXAnimalSpawnLogicComp_StartEscapeWitchSpdCheck final
{
public:
	class UPrimitiveComponent*                    OverlappedComponent;                               // 0x0000(0x0008)(ExportObject, Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class AActor*                                 OtherActor;                                        // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UPrimitiveComponent*                    OtherComp;                                         // 0x0010(0x0008)(ExportObject, Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         OtherBodyIndex;                                    // 0x0018(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         bFromSweep : 1;                                    // 0x001C(0x0001)(BitIndex: 0x00, PropSize: 0x0001 (Parm, NoDestructor, HasGetValueTypeHash))
	uint8                                         Pad_1D[0x3];                                       // 0x001D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FHitResult                             SweepResult;                                       // 0x0020(0x00E8)(Parm, IsPlainOldData, NoDestructor)
};
//static_assert(alignof(BUS_NeutralFXAnimalSpawnLogicComp_StartEscapeWitchSpdCheck) == 0x000008, "Wrong alignment on BUS_NeutralFXAnimalSpawnLogicComp_StartEscapeWitchSpdCheck");
//static_assert(sizeof(BUS_NeutralFXAnimalSpawnLogicComp_StartEscapeWitchSpdCheck) == 0x000108, "Wrong size on BUS_NeutralFXAnimalSpawnLogicComp_StartEscapeWitchSpdCheck");
//static_assert(offsetof(BUS_NeutralFXAnimalSpawnLogicComp_StartEscapeWitchSpdCheck, OverlappedComponent) == 0x000000, "Member 'BUS_NeutralFXAnimalSpawnLogicComp_StartEscapeWitchSpdCheck::OverlappedComponent' has a wrong offset!");
//static_assert(offsetof(BUS_NeutralFXAnimalSpawnLogicComp_StartEscapeWitchSpdCheck, OtherActor) == 0x000008, "Member 'BUS_NeutralFXAnimalSpawnLogicComp_StartEscapeWitchSpdCheck::OtherActor' has a wrong offset!");
//static_assert(offsetof(BUS_NeutralFXAnimalSpawnLogicComp_StartEscapeWitchSpdCheck, OtherComp) == 0x000010, "Member 'BUS_NeutralFXAnimalSpawnLogicComp_StartEscapeWitchSpdCheck::OtherComp' has a wrong offset!");
//static_assert(offsetof(BUS_NeutralFXAnimalSpawnLogicComp_StartEscapeWitchSpdCheck, OtherBodyIndex) == 0x000018, "Member 'BUS_NeutralFXAnimalSpawnLogicComp_StartEscapeWitchSpdCheck::OtherBodyIndex' has a wrong offset!");
//static_assert(offsetof(BUS_NeutralFXAnimalSpawnLogicComp_StartEscapeWitchSpdCheck, SweepResult) == 0x000020, "Member 'BUS_NeutralFXAnimalSpawnLogicComp_StartEscapeWitchSpdCheck::SweepResult' has a wrong offset!");

// Function b1-Managed.BUS_NeutralFXAnimalSpawnLogicComp.StartEscape
// 0x0108 (0x0108 - 0x0000)
struct BUS_NeutralFXAnimalSpawnLogicComp_StartEscape final
{
public:
	class UPrimitiveComponent*                    OverlappedComponent;                               // 0x0000(0x0008)(ExportObject, Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class AActor*                                 OtherActor;                                        // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UPrimitiveComponent*                    OtherComp;                                         // 0x0010(0x0008)(ExportObject, Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         OtherBodyIndex;                                    // 0x0018(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         bFromSweep : 1;                                    // 0x001C(0x0001)(BitIndex: 0x00, PropSize: 0x0001 (Parm, NoDestructor, HasGetValueTypeHash))
	uint8                                         Pad_1D[0x3];                                       // 0x001D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FHitResult                             SweepResult;                                       // 0x0020(0x00E8)(Parm, IsPlainOldData, NoDestructor)
};
//static_assert(alignof(BUS_NeutralFXAnimalSpawnLogicComp_StartEscape) == 0x000008, "Wrong alignment on BUS_NeutralFXAnimalSpawnLogicComp_StartEscape");
//static_assert(sizeof(BUS_NeutralFXAnimalSpawnLogicComp_StartEscape) == 0x000108, "Wrong size on BUS_NeutralFXAnimalSpawnLogicComp_StartEscape");
//static_assert(offsetof(BUS_NeutralFXAnimalSpawnLogicComp_StartEscape, OverlappedComponent) == 0x000000, "Member 'BUS_NeutralFXAnimalSpawnLogicComp_StartEscape::OverlappedComponent' has a wrong offset!");
//static_assert(offsetof(BUS_NeutralFXAnimalSpawnLogicComp_StartEscape, OtherActor) == 0x000008, "Member 'BUS_NeutralFXAnimalSpawnLogicComp_StartEscape::OtherActor' has a wrong offset!");
//static_assert(offsetof(BUS_NeutralFXAnimalSpawnLogicComp_StartEscape, OtherComp) == 0x000010, "Member 'BUS_NeutralFXAnimalSpawnLogicComp_StartEscape::OtherComp' has a wrong offset!");
//static_assert(offsetof(BUS_NeutralFXAnimalSpawnLogicComp_StartEscape, OtherBodyIndex) == 0x000018, "Member 'BUS_NeutralFXAnimalSpawnLogicComp_StartEscape::OtherBodyIndex' has a wrong offset!");
//static_assert(offsetof(BUS_NeutralFXAnimalSpawnLogicComp_StartEscape, SweepResult) == 0x000020, "Member 'BUS_NeutralFXAnimalSpawnLogicComp_StartEscape::SweepResult' has a wrong offset!");

// Function b1-Managed.BED_FSMNode_GI_Loading_NetConectionFailurePreprocess.PostPropertyChanged
// 0x0020 (0x0020 - 0x0000)
struct BED_FSMNode_GI_Loading_NetConectionFailurePreprocess_PostPropertyChanged final
{
public:
	class FString                                 MemberName;                                        // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash)
	class FString                                 PropertyName;                                      // 0x0010(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash)
};
//static_assert(alignof(BED_FSMNode_GI_Loading_NetConectionFailurePreprocess_PostPropertyChanged) == 0x000008, "Wrong alignment on BED_FSMNode_GI_Loading_NetConectionFailurePreprocess_PostPropertyChanged");
//static_assert(sizeof(BED_FSMNode_GI_Loading_NetConectionFailurePreprocess_PostPropertyChanged) == 0x000020, "Wrong size on BED_FSMNode_GI_Loading_NetConectionFailurePreprocess_PostPropertyChanged");
//static_assert(offsetof(BED_FSMNode_GI_Loading_NetConectionFailurePreprocess_PostPropertyChanged, MemberName) == 0x000000, "Member 'BED_FSMNode_GI_Loading_NetConectionFailurePreprocess_PostPropertyChanged::MemberName' has a wrong offset!");
//static_assert(offsetof(BED_FSMNode_GI_Loading_NetConectionFailurePreprocess_PostPropertyChanged, PropertyName) == 0x000010, "Member 'BED_FSMNode_GI_Loading_NetConectionFailurePreprocess_PostPropertyChanged::PropertyName' has a wrong offset!");

// Function b1-Managed.BED_FSMNode_GI_Loading_NetConectionFailurePreprocess.GetNodeDescriptionInCS
// 0x0010 (0x0010 - 0x0000)
struct BED_FSMNode_GI_Loading_NetConectionFailurePreprocess_GetNodeDescriptionInCS final
{
public:
	class FString                                 ReturnValue;                                       // 0x0000(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash)
};
//static_assert(alignof(BED_FSMNode_GI_Loading_NetConectionFailurePreprocess_GetNodeDescriptionInCS) == 0x000008, "Wrong alignment on BED_FSMNode_GI_Loading_NetConectionFailurePreprocess_GetNodeDescriptionInCS");
//static_assert(sizeof(BED_FSMNode_GI_Loading_NetConectionFailurePreprocess_GetNodeDescriptionInCS) == 0x000010, "Wrong size on BED_FSMNode_GI_Loading_NetConectionFailurePreprocess_GetNodeDescriptionInCS");
//static_assert(offsetof(BED_FSMNode_GI_Loading_NetConectionFailurePreprocess_GetNodeDescriptionInCS, ReturnValue) == 0x000000, "Member 'BED_FSMNode_GI_Loading_NetConectionFailurePreprocess_GetNodeDescriptionInCS::ReturnValue' has a wrong offset!");

// Function b1-Managed.BED_FSMNode_GI_Loading_ReleaseSaveArchiveByTravelLevel.PostPropertyChanged
// 0x0020 (0x0020 - 0x0000)
struct BED_FSMNode_GI_Loading_ReleaseSaveArchiveByTravelLevel_PostPropertyChanged final
{
public:
	class FString                                 MemberName;                                        // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash)
	class FString                                 PropertyName;                                      // 0x0010(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash)
};
//static_assert(alignof(BED_FSMNode_GI_Loading_ReleaseSaveArchiveByTravelLevel_PostPropertyChanged) == 0x000008, "Wrong alignment on BED_FSMNode_GI_Loading_ReleaseSaveArchiveByTravelLevel_PostPropertyChanged");
//static_assert(sizeof(BED_FSMNode_GI_Loading_ReleaseSaveArchiveByTravelLevel_PostPropertyChanged) == 0x000020, "Wrong size on BED_FSMNode_GI_Loading_ReleaseSaveArchiveByTravelLevel_PostPropertyChanged");
//static_assert(offsetof(BED_FSMNode_GI_Loading_ReleaseSaveArchiveByTravelLevel_PostPropertyChanged, MemberName) == 0x000000, "Member 'BED_FSMNode_GI_Loading_ReleaseSaveArchiveByTravelLevel_PostPropertyChanged::MemberName' has a wrong offset!");
//static_assert(offsetof(BED_FSMNode_GI_Loading_ReleaseSaveArchiveByTravelLevel_PostPropertyChanged, PropertyName) == 0x000010, "Member 'BED_FSMNode_GI_Loading_ReleaseSaveArchiveByTravelLevel_PostPropertyChanged::PropertyName' has a wrong offset!");

// Function b1-Managed.BED_FSMNode_GI_Loading_ReleaseSaveArchiveByTravelLevel.GetNodeDescriptionInCS
// 0x0010 (0x0010 - 0x0000)
struct BED_FSMNode_GI_Loading_ReleaseSaveArchiveByTravelLevel_GetNodeDescriptionInCS final
{
public:
	class FString                                 ReturnValue;                                       // 0x0000(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash)
};
//static_assert(alignof(BED_FSMNode_GI_Loading_ReleaseSaveArchiveByTravelLevel_GetNodeDescriptionInCS) == 0x000008, "Wrong alignment on BED_FSMNode_GI_Loading_ReleaseSaveArchiveByTravelLevel_GetNodeDescriptionInCS");
//static_assert(sizeof(BED_FSMNode_GI_Loading_ReleaseSaveArchiveByTravelLevel_GetNodeDescriptionInCS) == 0x000010, "Wrong size on BED_FSMNode_GI_Loading_ReleaseSaveArchiveByTravelLevel_GetNodeDescriptionInCS");
//static_assert(offsetof(BED_FSMNode_GI_Loading_ReleaseSaveArchiveByTravelLevel_GetNodeDescriptionInCS, ReturnValue) == 0x000000, "Member 'BED_FSMNode_GI_Loading_ReleaseSaveArchiveByTravelLevel_GetNodeDescriptionInCS::ReturnValue' has a wrong offset!");

// Function b1-Managed.BANS_GSPlayAMInAMing.GSNotifyBeginCS
// 0x0048 (0x0048 - 0x0000)
struct BANS_GSPlayAMInAMing_GSNotifyBeginCS final
{
public:
	struct FUStGSNotifyParam                      NotifyParam;                                       // 0x0000(0x0040)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
	float                                         TotalDuration;                                     // 0x0040(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
//static_assert(alignof(BANS_GSPlayAMInAMing_GSNotifyBeginCS) == 0x000008, "Wrong alignment on BANS_GSPlayAMInAMing_GSNotifyBeginCS");
//static_assert(sizeof(BANS_GSPlayAMInAMing_GSNotifyBeginCS) == 0x000048, "Wrong size on BANS_GSPlayAMInAMing_GSNotifyBeginCS");
//static_assert(offsetof(BANS_GSPlayAMInAMing_GSNotifyBeginCS, NotifyParam) == 0x000000, "Member 'BANS_GSPlayAMInAMing_GSNotifyBeginCS::NotifyParam' has a wrong offset!");
//static_assert(offsetof(BANS_GSPlayAMInAMing_GSNotifyBeginCS, TotalDuration) == 0x000040, "Member 'BANS_GSPlayAMInAMing_GSNotifyBeginCS::TotalDuration' has a wrong offset!");

// Function b1-Managed.BANS_GSPlayAMInAMing.GSNotifyTickCS
// 0x0048 (0x0048 - 0x0000)
struct BANS_GSPlayAMInAMing_GSNotifyTickCS final
{
public:
	struct FUStGSNotifyParam                      NotifyParam;                                       // 0x0000(0x0040)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
	float                                         FrameDeltaTime;                                    // 0x0040(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
//static_assert(alignof(BANS_GSPlayAMInAMing_GSNotifyTickCS) == 0x000008, "Wrong alignment on BANS_GSPlayAMInAMing_GSNotifyTickCS");
//static_assert(sizeof(BANS_GSPlayAMInAMing_GSNotifyTickCS) == 0x000048, "Wrong size on BANS_GSPlayAMInAMing_GSNotifyTickCS");
//static_assert(offsetof(BANS_GSPlayAMInAMing_GSNotifyTickCS, NotifyParam) == 0x000000, "Member 'BANS_GSPlayAMInAMing_GSNotifyTickCS::NotifyParam' has a wrong offset!");
//static_assert(offsetof(BANS_GSPlayAMInAMing_GSNotifyTickCS, FrameDeltaTime) == 0x000040, "Member 'BANS_GSPlayAMInAMing_GSNotifyTickCS::FrameDeltaTime' has a wrong offset!");

// Function b1-Managed.BANS_GSPlayAMInAMing.GSNotifyEndCS
// 0x0040 (0x0040 - 0x0000)
struct BANS_GSPlayAMInAMing_GSNotifyEndCS final
{
public:
	struct FUStGSNotifyParam                      NotifyParam;                                       // 0x0000(0x0040)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
//static_assert(alignof(BANS_GSPlayAMInAMing_GSNotifyEndCS) == 0x000008, "Wrong alignment on BANS_GSPlayAMInAMing_GSNotifyEndCS");
//static_assert(sizeof(BANS_GSPlayAMInAMing_GSNotifyEndCS) == 0x000040, "Wrong size on BANS_GSPlayAMInAMing_GSNotifyEndCS");
//static_assert(offsetof(BANS_GSPlayAMInAMing_GSNotifyEndCS, NotifyParam) == 0x000000, "Member 'BANS_GSPlayAMInAMing_GSNotifyEndCS::NotifyParam' has a wrong offset!");

// Function b1-Managed.BUI_AnimWidget.OnAnimationSequenceEvent
// 0x0004 (0x0004 - 0x0000)
struct BUI_AnimWidget_OnAnimationSequenceEvent final
{
public:
	int32                                         Param;                                             // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
//static_assert(alignof(BUI_AnimWidget_OnAnimationSequenceEvent) == 0x000004, "Wrong alignment on BUI_AnimWidget_OnAnimationSequenceEvent");
//static_assert(sizeof(BUI_AnimWidget_OnAnimationSequenceEvent) == 0x000004, "Wrong size on BUI_AnimWidget_OnAnimationSequenceEvent");
//static_assert(offsetof(BUI_AnimWidget_OnAnimationSequenceEvent, Param) == 0x000000, "Member 'BUI_AnimWidget_OnAnimationSequenceEvent::Param' has a wrong offset!");

// Function b1-Managed.BED_FSMNode_GI_Loading_PausePsoCachePrecompile.PostPropertyChanged
// 0x0020 (0x0020 - 0x0000)
struct BED_FSMNode_GI_Loading_PausePsoCachePrecompile_PostPropertyChanged final
{
public:
	class FString                                 MemberName;                                        // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash)
	class FString                                 PropertyName;                                      // 0x0010(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash)
};
//static_assert(alignof(BED_FSMNode_GI_Loading_PausePsoCachePrecompile_PostPropertyChanged) == 0x000008, "Wrong alignment on BED_FSMNode_GI_Loading_PausePsoCachePrecompile_PostPropertyChanged");
//static_assert(sizeof(BED_FSMNode_GI_Loading_PausePsoCachePrecompile_PostPropertyChanged) == 0x000020, "Wrong size on BED_FSMNode_GI_Loading_PausePsoCachePrecompile_PostPropertyChanged");
//static_assert(offsetof(BED_FSMNode_GI_Loading_PausePsoCachePrecompile_PostPropertyChanged, MemberName) == 0x000000, "Member 'BED_FSMNode_GI_Loading_PausePsoCachePrecompile_PostPropertyChanged::MemberName' has a wrong offset!");
//static_assert(offsetof(BED_FSMNode_GI_Loading_PausePsoCachePrecompile_PostPropertyChanged, PropertyName) == 0x000010, "Member 'BED_FSMNode_GI_Loading_PausePsoCachePrecompile_PostPropertyChanged::PropertyName' has a wrong offset!");

// Function b1-Managed.BED_FSMNode_GI_Loading_PausePsoCachePrecompile.GetNodeDescriptionInCS
// 0x0010 (0x0010 - 0x0000)
struct BED_FSMNode_GI_Loading_PausePsoCachePrecompile_GetNodeDescriptionInCS final
{
public:
	class FString                                 ReturnValue;                                       // 0x0000(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash)
};
//static_assert(alignof(BED_FSMNode_GI_Loading_PausePsoCachePrecompile_GetNodeDescriptionInCS) == 0x000008, "Wrong alignment on BED_FSMNode_GI_Loading_PausePsoCachePrecompile_GetNodeDescriptionInCS");
//static_assert(sizeof(BED_FSMNode_GI_Loading_PausePsoCachePrecompile_GetNodeDescriptionInCS) == 0x000010, "Wrong size on BED_FSMNode_GI_Loading_PausePsoCachePrecompile_GetNodeDescriptionInCS");
//static_assert(offsetof(BED_FSMNode_GI_Loading_PausePsoCachePrecompile_GetNodeDescriptionInCS, ReturnValue) == 0x000000, "Member 'BED_FSMNode_GI_Loading_PausePsoCachePrecompile_GetNodeDescriptionInCS::ReturnValue' has a wrong offset!");

// Function b1-Managed.BGUProjectileBaseActor.ProjectileAbilityCheck_ByBPConfig
// 0x0001 (0x0001 - 0x0000)
struct BGUProjectileBaseActor_ProjectileAbilityCheck_ByBPConfig final
{
public:
	uint8                                         ReturnValue : 1;                                   // 0x0000(0x0001)(BitIndex: 0x00, PropSize: 0x0001 (Parm, OutParm, ReturnParm, NoDestructor, HasGetValueTypeHash))
};
//static_assert(alignof(BGUProjectileBaseActor_ProjectileAbilityCheck_ByBPConfig) == 0x000001, "Wrong alignment on BGUProjectileBaseActor_ProjectileAbilityCheck_ByBPConfig");
//static_assert(sizeof(BGUProjectileBaseActor_ProjectileAbilityCheck_ByBPConfig) == 0x000001, "Wrong size on BGUProjectileBaseActor_ProjectileAbilityCheck_ByBPConfig");

// Function b1-Managed.BGUProjectileBaseActor.OnConstructionCS
// 0x0060 (0x0060 - 0x0000)
struct BGUProjectileBaseActor_OnConstructionCS final
{
public:
	struct FTransform                             Transform;                                         // 0x0000(0x0060)(ConstParm, Parm, OutParm, ReferenceParm, IsPlainOldData, NoDestructor)
};
//static_assert(alignof(BGUProjectileBaseActor_OnConstructionCS) == 0x000010, "Wrong alignment on BGUProjectileBaseActor_OnConstructionCS");
//static_assert(sizeof(BGUProjectileBaseActor_OnConstructionCS) == 0x000060, "Wrong size on BGUProjectileBaseActor_OnConstructionCS");
//static_assert(offsetof(BGUProjectileBaseActor_OnConstructionCS, Transform) == 0x000000, "Member 'BGUProjectileBaseActor_OnConstructionCS::Transform' has a wrong offset!");

// Function b1-Managed.BGUProjectileBaseActor.GetStaticMeshCompChildsNum
// 0x0004 (0x0004 - 0x0000)
struct BGUProjectileBaseActor_GetStaticMeshCompChildsNum final
{
public:
	int32                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
//static_assert(alignof(BGUProjectileBaseActor_GetStaticMeshCompChildsNum) == 0x000004, "Wrong alignment on BGUProjectileBaseActor_GetStaticMeshCompChildsNum");
//static_assert(sizeof(BGUProjectileBaseActor_GetStaticMeshCompChildsNum) == 0x000004, "Wrong size on BGUProjectileBaseActor_GetStaticMeshCompChildsNum");
//static_assert(offsetof(BGUProjectileBaseActor_GetStaticMeshCompChildsNum, ReturnValue) == 0x000000, "Member 'BGUProjectileBaseActor_GetStaticMeshCompChildsNum::ReturnValue' has a wrong offset!");

// Function b1-Managed.BGUProjectileBaseActor.CheckDrawSignCondition
// 0x0010 (0x0010 - 0x0000)
struct BGUProjectileBaseActor_CheckDrawSignCondition final
{
public:
	class AActor*                                 HitActor;                                          // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         ReturnValue : 1;                                   // 0x0008(0x0001)(BitIndex: 0x00, PropSize: 0x0001 (Parm, OutParm, ReturnParm, NoDestructor, HasGetValueTypeHash))
};
//static_assert(alignof(BGUProjectileBaseActor_CheckDrawSignCondition) == 0x000008, "Wrong alignment on BGUProjectileBaseActor_CheckDrawSignCondition");
//static_assert(sizeof(BGUProjectileBaseActor_CheckDrawSignCondition) == 0x000010, "Wrong size on BGUProjectileBaseActor_CheckDrawSignCondition");
//static_assert(offsetof(BGUProjectileBaseActor_CheckDrawSignCondition, HitActor) == 0x000000, "Member 'BGUProjectileBaseActor_CheckDrawSignCondition::HitActor' has a wrong offset!");

// Function b1-Managed.BGUProjectileBaseActor.GetProjectileMovement
// 0x0008 (0x0008 - 0x0000)
struct BGUProjectileBaseActor_GetProjectileMovement final
{
public:
	class UBGUProjectileMovementComponent*        ReturnValue;                                       // 0x0000(0x0008)(ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
//static_assert(alignof(BGUProjectileBaseActor_GetProjectileMovement) == 0x000008, "Wrong alignment on BGUProjectileBaseActor_GetProjectileMovement");
//static_assert(sizeof(BGUProjectileBaseActor_GetProjectileMovement) == 0x000008, "Wrong size on BGUProjectileBaseActor_GetProjectileMovement");
//static_assert(offsetof(BGUProjectileBaseActor_GetProjectileMovement, ReturnValue) == 0x000000, "Member 'BGUProjectileBaseActor_GetProjectileMovement::ReturnValue' has a wrong offset!");

// Function b1-Managed.BGUProjectileBaseActor.GetProjectileID
// 0x0004 (0x0004 - 0x0000)
struct BGUProjectileBaseActor_GetProjectileID final
{
public:
	int32                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
//static_assert(alignof(BGUProjectileBaseActor_GetProjectileID) == 0x000004, "Wrong alignment on BGUProjectileBaseActor_GetProjectileID");
//static_assert(sizeof(BGUProjectileBaseActor_GetProjectileID) == 0x000004, "Wrong size on BGUProjectileBaseActor_GetProjectileID");
//static_assert(offsetof(BGUProjectileBaseActor_GetProjectileID, ReturnValue) == 0x000000, "Member 'BGUProjectileBaseActor_GetProjectileID::ReturnValue' has a wrong offset!");

// Function b1-Managed.BGUProjectileBaseActor.SpawnFinished
// 0x0008 (0x0008 - 0x0000)
struct BGUProjectileBaseActor_SpawnFinished final
{
public:
	struct FProjectileSpawnEventInfo              ProjectileSpawnEventInfo;                          // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
//static_assert(alignof(BGUProjectileBaseActor_SpawnFinished) == 0x000004, "Wrong alignment on BGUProjectileBaseActor_SpawnFinished");
//static_assert(sizeof(BGUProjectileBaseActor_SpawnFinished) == 0x000008, "Wrong size on BGUProjectileBaseActor_SpawnFinished");
//static_assert(offsetof(BGUProjectileBaseActor_SpawnFinished, ProjectileSpawnEventInfo) == 0x000000, "Member 'BGUProjectileBaseActor_SpawnFinished::ProjectileSpawnEventInfo' has a wrong offset!");

// Function b1-Managed.BGUProjectileBaseActor.OnDrawSign
// 0x0070 (0x0070 - 0x0000)
struct BGUProjectileBaseActor_OnDrawSign final
{
public:
	class AActor*                                 HitActor;                                          // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_8[0x8];                                        // 0x0008(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	struct FTransform                             HitTransform;                                      // 0x0010(0x0060)(Parm, IsPlainOldData, NoDestructor)
};
//static_assert(alignof(BGUProjectileBaseActor_OnDrawSign) == 0x000010, "Wrong alignment on BGUProjectileBaseActor_OnDrawSign");
//static_assert(sizeof(BGUProjectileBaseActor_OnDrawSign) == 0x000070, "Wrong size on BGUProjectileBaseActor_OnDrawSign");
//static_assert(offsetof(BGUProjectileBaseActor_OnDrawSign, HitActor) == 0x000000, "Member 'BGUProjectileBaseActor_OnDrawSign::HitActor' has a wrong offset!");
//static_assert(offsetof(BGUProjectileBaseActor_OnDrawSign, HitTransform) == 0x000010, "Member 'BGUProjectileBaseActor_OnDrawSign::HitTransform' has a wrong offset!");

// Function b1-Managed.BED_FSMNode_GI_Loading_GSGEnterLevel.PostPropertyChanged
// 0x0020 (0x0020 - 0x0000)
struct BED_FSMNode_GI_Loading_GSGEnterLevel_PostPropertyChanged final
{
public:
	class FString                                 MemberName;                                        // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash)
	class FString                                 PropertyName;                                      // 0x0010(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash)
};
//static_assert(alignof(BED_FSMNode_GI_Loading_GSGEnterLevel_PostPropertyChanged) == 0x000008, "Wrong alignment on BED_FSMNode_GI_Loading_GSGEnterLevel_PostPropertyChanged");
//static_assert(sizeof(BED_FSMNode_GI_Loading_GSGEnterLevel_PostPropertyChanged) == 0x000020, "Wrong size on BED_FSMNode_GI_Loading_GSGEnterLevel_PostPropertyChanged");
//static_assert(offsetof(BED_FSMNode_GI_Loading_GSGEnterLevel_PostPropertyChanged, MemberName) == 0x000000, "Member 'BED_FSMNode_GI_Loading_GSGEnterLevel_PostPropertyChanged::MemberName' has a wrong offset!");
//static_assert(offsetof(BED_FSMNode_GI_Loading_GSGEnterLevel_PostPropertyChanged, PropertyName) == 0x000010, "Member 'BED_FSMNode_GI_Loading_GSGEnterLevel_PostPropertyChanged::PropertyName' has a wrong offset!");

// Function b1-Managed.BED_FSMNode_GI_Loading_GSGEnterLevel.GetNodeDescriptionInCS
// 0x0010 (0x0010 - 0x0000)
struct BED_FSMNode_GI_Loading_GSGEnterLevel_GetNodeDescriptionInCS final
{
public:
	class FString                                 ReturnValue;                                       // 0x0000(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash)
};
//static_assert(alignof(BED_FSMNode_GI_Loading_GSGEnterLevel_GetNodeDescriptionInCS) == 0x000008, "Wrong alignment on BED_FSMNode_GI_Loading_GSGEnterLevel_GetNodeDescriptionInCS");
//static_assert(sizeof(BED_FSMNode_GI_Loading_GSGEnterLevel_GetNodeDescriptionInCS) == 0x000010, "Wrong size on BED_FSMNode_GI_Loading_GSGEnterLevel_GetNodeDescriptionInCS");
//static_assert(offsetof(BED_FSMNode_GI_Loading_GSGEnterLevel_GetNodeDescriptionInCS, ReturnValue) == 0x000000, "Member 'BED_FSMNode_GI_Loading_GSGEnterLevel_GetNodeDescriptionInCS::ReturnValue' has a wrong offset!");

// Function b1-Managed.BED_FSMNode_GI_Loading_PostLogin.PostPropertyChanged
// 0x0020 (0x0020 - 0x0000)
struct BED_FSMNode_GI_Loading_PostLogin_PostPropertyChanged final
{
public:
	class FString                                 MemberName;                                        // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash)
	class FString                                 PropertyName;                                      // 0x0010(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash)
};
//static_assert(alignof(BED_FSMNode_GI_Loading_PostLogin_PostPropertyChanged) == 0x000008, "Wrong alignment on BED_FSMNode_GI_Loading_PostLogin_PostPropertyChanged");
//static_assert(sizeof(BED_FSMNode_GI_Loading_PostLogin_PostPropertyChanged) == 0x000020, "Wrong size on BED_FSMNode_GI_Loading_PostLogin_PostPropertyChanged");
//static_assert(offsetof(BED_FSMNode_GI_Loading_PostLogin_PostPropertyChanged, MemberName) == 0x000000, "Member 'BED_FSMNode_GI_Loading_PostLogin_PostPropertyChanged::MemberName' has a wrong offset!");
//static_assert(offsetof(BED_FSMNode_GI_Loading_PostLogin_PostPropertyChanged, PropertyName) == 0x000010, "Member 'BED_FSMNode_GI_Loading_PostLogin_PostPropertyChanged::PropertyName' has a wrong offset!");

// Function b1-Managed.BED_FSMNode_GI_Loading_PostLogin.GetNodeDescriptionInCS
// 0x0010 (0x0010 - 0x0000)
struct BED_FSMNode_GI_Loading_PostLogin_GetNodeDescriptionInCS final
{
public:
	class FString                                 ReturnValue;                                       // 0x0000(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash)
};
//static_assert(alignof(BED_FSMNode_GI_Loading_PostLogin_GetNodeDescriptionInCS) == 0x000008, "Wrong alignment on BED_FSMNode_GI_Loading_PostLogin_GetNodeDescriptionInCS");
//static_assert(sizeof(BED_FSMNode_GI_Loading_PostLogin_GetNodeDescriptionInCS) == 0x000010, "Wrong size on BED_FSMNode_GI_Loading_PostLogin_GetNodeDescriptionInCS");
//static_assert(offsetof(BED_FSMNode_GI_Loading_PostLogin_GetNodeDescriptionInCS, ReturnValue) == 0x000000, "Member 'BED_FSMNode_GI_Loading_PostLogin_GetNodeDescriptionInCS::ReturnValue' has a wrong offset!");

// Function b1-Managed.BED_BehaviorNode_RemoveBuff.GetNodeDescriptionInCS
// 0x0010 (0x0010 - 0x0000)
struct BED_BehaviorNode_RemoveBuff_GetNodeDescriptionInCS final
{
public:
	class FString                                 ReturnValue;                                       // 0x0000(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash)
};
//static_assert(alignof(BED_BehaviorNode_RemoveBuff_GetNodeDescriptionInCS) == 0x000008, "Wrong alignment on BED_BehaviorNode_RemoveBuff_GetNodeDescriptionInCS");
//static_assert(sizeof(BED_BehaviorNode_RemoveBuff_GetNodeDescriptionInCS) == 0x000010, "Wrong size on BED_BehaviorNode_RemoveBuff_GetNodeDescriptionInCS");
//static_assert(offsetof(BED_BehaviorNode_RemoveBuff_GetNodeDescriptionInCS, ReturnValue) == 0x000000, "Member 'BED_BehaviorNode_RemoveBuff_GetNodeDescriptionInCS::ReturnValue' has a wrong offset!");

// Function b1-Managed.BED_FSMNode_GI_Loading_RequestTemplatePostSaveArchiveFinish.PostPropertyChanged
// 0x0020 (0x0020 - 0x0000)
struct BED_FSMNode_GI_Loading_RequestTemplatePostSaveArchiveFinish_PostPropertyChanged final
{
public:
	class FString                                 MemberName;                                        // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash)
	class FString                                 PropertyName;                                      // 0x0010(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash)
};
//static_assert(alignof(BED_FSMNode_GI_Loading_RequestTemplatePostSaveArchiveFinish_PostPropertyChanged) == 0x000008, "Wrong alignment on BED_FSMNode_GI_Loading_RequestTemplatePostSaveArchiveFinish_PostPropertyChanged");
//static_assert(sizeof(BED_FSMNode_GI_Loading_RequestTemplatePostSaveArchiveFinish_PostPropertyChanged) == 0x000020, "Wrong size on BED_FSMNode_GI_Loading_RequestTemplatePostSaveArchiveFinish_PostPropertyChanged");
//static_assert(offsetof(BED_FSMNode_GI_Loading_RequestTemplatePostSaveArchiveFinish_PostPropertyChanged, MemberName) == 0x000000, "Member 'BED_FSMNode_GI_Loading_RequestTemplatePostSaveArchiveFinish_PostPropertyChanged::MemberName' has a wrong offset!");
//static_assert(offsetof(BED_FSMNode_GI_Loading_RequestTemplatePostSaveArchiveFinish_PostPropertyChanged, PropertyName) == 0x000010, "Member 'BED_FSMNode_GI_Loading_RequestTemplatePostSaveArchiveFinish_PostPropertyChanged::PropertyName' has a wrong offset!");

// Function b1-Managed.BED_FSMNode_GI_Loading_RequestTemplatePostSaveArchiveFinish.GetNodeDescriptionInCS
// 0x0010 (0x0010 - 0x0000)
struct BED_FSMNode_GI_Loading_RequestTemplatePostSaveArchiveFinish_GetNodeDescriptionInCS final
{
public:
	class FString                                 ReturnValue;                                       // 0x0000(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash)
};
//static_assert(alignof(BED_FSMNode_GI_Loading_RequestTemplatePostSaveArchiveFinish_GetNodeDescriptionInCS) == 0x000008, "Wrong alignment on BED_FSMNode_GI_Loading_RequestTemplatePostSaveArchiveFinish_GetNodeDescriptionInCS");
//static_assert(sizeof(BED_FSMNode_GI_Loading_RequestTemplatePostSaveArchiveFinish_GetNodeDescriptionInCS) == 0x000010, "Wrong size on BED_FSMNode_GI_Loading_RequestTemplatePostSaveArchiveFinish_GetNodeDescriptionInCS");
//static_assert(offsetof(BED_FSMNode_GI_Loading_RequestTemplatePostSaveArchiveFinish_GetNodeDescriptionInCS, ReturnValue) == 0x000000, "Member 'BED_FSMNode_GI_Loading_RequestTemplatePostSaveArchiveFinish_GetNodeDescriptionInCS::ReturnValue' has a wrong offset!");

// Function b1-Managed.BGP_AIPlayerControllerCS.GSRpcSendClient
// 0x0010 (0x0010 - 0x0000)
struct BGP_AIPlayerControllerCS_GSRpcSendClient final
{
public:
	TArray<uint8>                                 SendData;                                          // 0x0000(0x0010)(Parm)
};
//static_assert(alignof(BGP_AIPlayerControllerCS_GSRpcSendClient) == 0x000008, "Wrong alignment on BGP_AIPlayerControllerCS_GSRpcSendClient");
//static_assert(sizeof(BGP_AIPlayerControllerCS_GSRpcSendClient) == 0x000010, "Wrong size on BGP_AIPlayerControllerCS_GSRpcSendClient");
//static_assert(offsetof(BGP_AIPlayerControllerCS_GSRpcSendClient, SendData) == 0x000000, "Member 'BGP_AIPlayerControllerCS_GSRpcSendClient::SendData' has a wrong offset!");

// Function b1-Managed.BGP_AIPlayerControllerCS.GSRpcSendServer
// 0x0010 (0x0010 - 0x0000)
struct BGP_AIPlayerControllerCS_GSRpcSendServer final
{
public:
	TArray<uint8>                                 SendData;                                          // 0x0000(0x0010)(Parm)
};
//static_assert(alignof(BGP_AIPlayerControllerCS_GSRpcSendServer) == 0x000008, "Wrong alignment on BGP_AIPlayerControllerCS_GSRpcSendServer");
//static_assert(sizeof(BGP_AIPlayerControllerCS_GSRpcSendServer) == 0x000010, "Wrong size on BGP_AIPlayerControllerCS_GSRpcSendServer");
//static_assert(offsetof(BGP_AIPlayerControllerCS_GSRpcSendServer, SendData) == 0x000000, "Member 'BGP_AIPlayerControllerCS_GSRpcSendServer::SendData' has a wrong offset!");

// Function b1-Managed.BSN_NotifyActor.OnPreviewNotify
// 0x0010 (0x0010 - 0x0000)
struct BSN_NotifyActor_OnPreviewNotify final
{
public:
	class UObject*                                InPlaybackContext;                                 // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         InStatus;                                          // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         bInBackwards : 1;                                  // 0x000C(0x0001)(BitIndex: 0x00, PropSize: 0x0001 (Parm, NoDestructor, HasGetValueTypeHash))
};
//static_assert(alignof(BSN_NotifyActor_OnPreviewNotify) == 0x000008, "Wrong alignment on BSN_NotifyActor_OnPreviewNotify");
//static_assert(sizeof(BSN_NotifyActor_OnPreviewNotify) == 0x000010, "Wrong size on BSN_NotifyActor_OnPreviewNotify");
//static_assert(offsetof(BSN_NotifyActor_OnPreviewNotify, InPlaybackContext) == 0x000000, "Member 'BSN_NotifyActor_OnPreviewNotify::InPlaybackContext' has a wrong offset!");
//static_assert(offsetof(BSN_NotifyActor_OnPreviewNotify, InStatus) == 0x000008, "Member 'BSN_NotifyActor_OnPreviewNotify::InStatus' has a wrong offset!");

// Function b1-Managed.BSN_NotifyActor.OnNotify
// 0x0010 (0x0010 - 0x0000)
struct BSN_NotifyActor_OnNotify final
{
public:
	class UCalliopeLevelSequencePlayer*           InPlayer;                                          // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         InStatus;                                          // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         bInBackwards : 1;                                  // 0x000C(0x0001)(BitIndex: 0x00, PropSize: 0x0001 (Parm, NoDestructor, HasGetValueTypeHash))
};
//static_assert(alignof(BSN_NotifyActor_OnNotify) == 0x000008, "Wrong alignment on BSN_NotifyActor_OnNotify");
//static_assert(sizeof(BSN_NotifyActor_OnNotify) == 0x000010, "Wrong size on BSN_NotifyActor_OnNotify");
//static_assert(offsetof(BSN_NotifyActor_OnNotify, InPlayer) == 0x000000, "Member 'BSN_NotifyActor_OnNotify::InPlayer' has a wrong offset!");
//static_assert(offsetof(BSN_NotifyActor_OnNotify, InStatus) == 0x000008, "Member 'BSN_NotifyActor_OnNotify::InStatus' has a wrong offset!");

// Function b1-Managed.BSN_TriggerCustomEvent.OnNotify
// 0x0010 (0x0010 - 0x0000)
struct BSN_TriggerCustomEvent_OnNotify final
{
public:
	class UCalliopeLevelSequencePlayer*           InPlayer;                                          // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         InStatus;                                          // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         bInBackwards : 1;                                  // 0x000C(0x0001)(BitIndex: 0x00, PropSize: 0x0001 (Parm, NoDestructor, HasGetValueTypeHash))
};
//static_assert(alignof(BSN_TriggerCustomEvent_OnNotify) == 0x000008, "Wrong alignment on BSN_TriggerCustomEvent_OnNotify");
//static_assert(sizeof(BSN_TriggerCustomEvent_OnNotify) == 0x000010, "Wrong size on BSN_TriggerCustomEvent_OnNotify");
//static_assert(offsetof(BSN_TriggerCustomEvent_OnNotify, InPlayer) == 0x000000, "Member 'BSN_TriggerCustomEvent_OnNotify::InPlayer' has a wrong offset!");
//static_assert(offsetof(BSN_TriggerCustomEvent_OnNotify, InStatus) == 0x000008, "Member 'BSN_TriggerCustomEvent_OnNotify::InStatus' has a wrong offset!");

// Function b1-Managed.PerformerParam_Overlap.OnPropertyChanged
// 0x0020 (0x0020 - 0x0000)
struct PerformerParam_Overlap_OnPropertyChanged final
{
public:
	class FString                                 MemberName;                                        // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash)
	class FString                                 PropertyName;                                      // 0x0010(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash)
};
//static_assert(alignof(PerformerParam_Overlap_OnPropertyChanged) == 0x000008, "Wrong alignment on PerformerParam_Overlap_OnPropertyChanged");
//static_assert(sizeof(PerformerParam_Overlap_OnPropertyChanged) == 0x000020, "Wrong size on PerformerParam_Overlap_OnPropertyChanged");
//static_assert(offsetof(PerformerParam_Overlap_OnPropertyChanged, MemberName) == 0x000000, "Member 'PerformerParam_Overlap_OnPropertyChanged::MemberName' has a wrong offset!");
//static_assert(offsetof(PerformerParam_Overlap_OnPropertyChanged, PropertyName) == 0x000010, "Member 'PerformerParam_Overlap_OnPropertyChanged::PropertyName' has a wrong offset!");

// Function b1-Managed.BAN_GSReplaceDropItem.bIsNativeBranchingPointCS
// 0x0001 (0x0001 - 0x0000)
struct BAN_GSReplaceDropItem_bIsNativeBranchingPointCS final
{
public:
	uint8                                         ReturnValue : 1;                                   // 0x0000(0x0001)(BitIndex: 0x00, PropSize: 0x0001 (Parm, OutParm, ReturnParm, NoDestructor, HasGetValueTypeHash))
};
//static_assert(alignof(BAN_GSReplaceDropItem_bIsNativeBranchingPointCS) == 0x000001, "Wrong alignment on BAN_GSReplaceDropItem_bIsNativeBranchingPointCS");
//static_assert(sizeof(BAN_GSReplaceDropItem_bIsNativeBranchingPointCS) == 0x000001, "Wrong size on BAN_GSReplaceDropItem_bIsNativeBranchingPointCS");

// Function b1-Managed.BAN_GSReplaceDropItem.GSNotifyCS
// 0x0040 (0x0040 - 0x0000)
struct BAN_GSReplaceDropItem_GSNotifyCS final
{
public:
	struct FUStGSNotifyParam                      NotifyParam;                                       // 0x0000(0x0040)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
//static_assert(alignof(BAN_GSReplaceDropItem_GSNotifyCS) == 0x000008, "Wrong alignment on BAN_GSReplaceDropItem_GSNotifyCS");
//static_assert(sizeof(BAN_GSReplaceDropItem_GSNotifyCS) == 0x000040, "Wrong size on BAN_GSReplaceDropItem_GSNotifyCS");
//static_assert(offsetof(BAN_GSReplaceDropItem_GSNotifyCS, NotifyParam) == 0x000000, "Member 'BAN_GSReplaceDropItem_GSNotifyCS::NotifyParam' has a wrong offset!");

// Function b1-Managed.BED_BehaviorNode_TriggerAttackStiff.GetNodeDescriptionInCS
// 0x0010 (0x0010 - 0x0000)
struct BED_BehaviorNode_TriggerAttackStiff_GetNodeDescriptionInCS final
{
public:
	class FString                                 ReturnValue;                                       // 0x0000(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash)
};
//static_assert(alignof(BED_BehaviorNode_TriggerAttackStiff_GetNodeDescriptionInCS) == 0x000008, "Wrong alignment on BED_BehaviorNode_TriggerAttackStiff_GetNodeDescriptionInCS");
//static_assert(sizeof(BED_BehaviorNode_TriggerAttackStiff_GetNodeDescriptionInCS) == 0x000010, "Wrong size on BED_BehaviorNode_TriggerAttackStiff_GetNodeDescriptionInCS");
//static_assert(offsetof(BED_BehaviorNode_TriggerAttackStiff_GetNodeDescriptionInCS, ReturnValue) == 0x000000, "Member 'BED_BehaviorNode_TriggerAttackStiff_GetNodeDescriptionInCS::ReturnValue' has a wrong offset!");

// Function b1-Managed.BED_BehaviorNode_TriggerAttackStiff.IsSupportViewType
// 0x0002 (0x0002 - 0x0000)
struct BED_BehaviorNode_TriggerAttackStiff_IsSupportViewType final
{
public:
	ECalliopeViewType                             InViewType;                                        // 0x0000(0x0001)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         ReturnValue : 1;                                   // 0x0001(0x0001)(BitIndex: 0x00, PropSize: 0x0001 (Parm, OutParm, ReturnParm, NoDestructor, HasGetValueTypeHash))
};
//static_assert(alignof(BED_BehaviorNode_TriggerAttackStiff_IsSupportViewType) == 0x000001, "Wrong alignment on BED_BehaviorNode_TriggerAttackStiff_IsSupportViewType");
//static_assert(sizeof(BED_BehaviorNode_TriggerAttackStiff_IsSupportViewType) == 0x000002, "Wrong size on BED_BehaviorNode_TriggerAttackStiff_IsSupportViewType");
//static_assert(offsetof(BED_BehaviorNode_TriggerAttackStiff_IsSupportViewType, InViewType) == 0x000000, "Member 'BED_BehaviorNode_TriggerAttackStiff_IsSupportViewType::InViewType' has a wrong offset!");

// Function b1-Managed.GSEQT_HasProjectileInRange.GetDescriptionDetailsCS
// 0x0010 (0x0010 - 0x0000)
struct GSEQT_HasProjectileInRange_GetDescriptionDetailsCS final
{
public:
	class FString                                 ReturnValue;                                       // 0x0000(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash)
};
//static_assert(alignof(GSEQT_HasProjectileInRange_GetDescriptionDetailsCS) == 0x000008, "Wrong alignment on GSEQT_HasProjectileInRange_GetDescriptionDetailsCS");
//static_assert(sizeof(GSEQT_HasProjectileInRange_GetDescriptionDetailsCS) == 0x000010, "Wrong size on GSEQT_HasProjectileInRange_GetDescriptionDetailsCS");
//static_assert(offsetof(GSEQT_HasProjectileInRange_GetDescriptionDetailsCS, ReturnValue) == 0x000000, "Member 'GSEQT_HasProjectileInRange_GetDescriptionDetailsCS::ReturnValue' has a wrong offset!");

// Function b1-Managed.GSEQT_HasProjectileInRange.GetDescriptionTitleCS
// 0x0010 (0x0010 - 0x0000)
struct GSEQT_HasProjectileInRange_GetDescriptionTitleCS final
{
public:
	class FString                                 ReturnValue;                                       // 0x0000(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash)
};
//static_assert(alignof(GSEQT_HasProjectileInRange_GetDescriptionTitleCS) == 0x000008, "Wrong alignment on GSEQT_HasProjectileInRange_GetDescriptionTitleCS");
//static_assert(sizeof(GSEQT_HasProjectileInRange_GetDescriptionTitleCS) == 0x000010, "Wrong size on GSEQT_HasProjectileInRange_GetDescriptionTitleCS");
//static_assert(offsetof(GSEQT_HasProjectileInRange_GetDescriptionTitleCS, ReturnValue) == 0x000000, "Member 'GSEQT_HasProjectileInRange_GetDescriptionTitleCS::ReturnValue' has a wrong offset!");

// Function b1-Managed.GSEQT_HasProjectileInRange.ShouldPrepareContext
// 0x0001 (0x0001 - 0x0000)
struct GSEQT_HasProjectileInRange_ShouldPrepareContext final
{
public:
	uint8                                         ReturnValue : 1;                                   // 0x0000(0x0001)(BitIndex: 0x00, PropSize: 0x0001 (Parm, OutParm, ReturnParm, NoDestructor, HasGetValueTypeHash))
};
//static_assert(alignof(GSEQT_HasProjectileInRange_ShouldPrepareContext) == 0x000001, "Wrong alignment on GSEQT_HasProjectileInRange_ShouldPrepareContext");
//static_assert(sizeof(GSEQT_HasProjectileInRange_ShouldPrepareContext) == 0x000001, "Wrong size on GSEQT_HasProjectileInRange_ShouldPrepareContext");

// Function b1-Managed.GSEQT_HasProjectileInRange.PreProcessItems
// 0x0020 (0x0020 - 0x0000)
struct GSEQT_HasProjectileInRange_PreProcessItems final
{
public:
	TArray<class AActor*>                         ContextActors;                                     // 0x0000(0x0010)(ConstParm, Parm, OutParm, ReferenceParm)
	TArray<struct FVector>                        ContextLocations;                                  // 0x0010(0x0010)(ConstParm, Parm, OutParm, ReferenceParm)
};
//static_assert(alignof(GSEQT_HasProjectileInRange_PreProcessItems) == 0x000008, "Wrong alignment on GSEQT_HasProjectileInRange_PreProcessItems");
//static_assert(sizeof(GSEQT_HasProjectileInRange_PreProcessItems) == 0x000020, "Wrong size on GSEQT_HasProjectileInRange_PreProcessItems");
//static_assert(offsetof(GSEQT_HasProjectileInRange_PreProcessItems, ContextActors) == 0x000000, "Member 'GSEQT_HasProjectileInRange_PreProcessItems::ContextActors' has a wrong offset!");
//static_assert(offsetof(GSEQT_HasProjectileInRange_PreProcessItems, ContextLocations) == 0x000010, "Member 'GSEQT_HasProjectileInRange_PreProcessItems::ContextLocations' has a wrong offset!");

// Function b1-Managed.GSEQT_HasProjectileInRange.ProcessItemCS
// 0x0038 (0x0038 - 0x0000)
struct GSEQT_HasProjectileInRange_ProcessItemCS final
{
public:
	class UWorld*                                 World;                                             // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                ItemLocation;                                      // 0x0008(0x0018)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class AActor*                                 ItemActor;                                         // 0x0020(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class AActor*                                 Querier;                                           // 0x0028(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         ReturnValue : 1;                                   // 0x0030(0x0001)(BitIndex: 0x00, PropSize: 0x0001 (Parm, OutParm, ReturnParm, NoDestructor, HasGetValueTypeHash))
};
//static_assert(alignof(GSEQT_HasProjectileInRange_ProcessItemCS) == 0x000008, "Wrong alignment on GSEQT_HasProjectileInRange_ProcessItemCS");
//static_assert(sizeof(GSEQT_HasProjectileInRange_ProcessItemCS) == 0x000038, "Wrong size on GSEQT_HasProjectileInRange_ProcessItemCS");
//static_assert(offsetof(GSEQT_HasProjectileInRange_ProcessItemCS, World) == 0x000000, "Member 'GSEQT_HasProjectileInRange_ProcessItemCS::World' has a wrong offset!");
//static_assert(offsetof(GSEQT_HasProjectileInRange_ProcessItemCS, ItemLocation) == 0x000008, "Member 'GSEQT_HasProjectileInRange_ProcessItemCS::ItemLocation' has a wrong offset!");
//static_assert(offsetof(GSEQT_HasProjectileInRange_ProcessItemCS, ItemActor) == 0x000020, "Member 'GSEQT_HasProjectileInRange_ProcessItemCS::ItemActor' has a wrong offset!");
//static_assert(offsetof(GSEQT_HasProjectileInRange_ProcessItemCS, Querier) == 0x000028, "Member 'GSEQT_HasProjectileInRange_ProcessItemCS::Querier' has a wrong offset!");

// Function b1-Managed.BED_FSMNode_Condition_GI_Loading_IsDriverVersionMismatch.GetNodeDescriptionInCS
// 0x0010 (0x0010 - 0x0000)
struct BED_FSMNode_Condition_GI_Loading_IsDriverVersionMismatch_GetNodeDescriptionInCS final
{
public:
	class FString                                 ReturnValue;                                       // 0x0000(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash)
};
//static_assert(alignof(BED_FSMNode_Condition_GI_Loading_IsDriverVersionMismatch_GetNodeDescriptionInCS) == 0x000008, "Wrong alignment on BED_FSMNode_Condition_GI_Loading_IsDriverVersionMismatch_GetNodeDescriptionInCS");
//static_assert(sizeof(BED_FSMNode_Condition_GI_Loading_IsDriverVersionMismatch_GetNodeDescriptionInCS) == 0x000010, "Wrong size on BED_FSMNode_Condition_GI_Loading_IsDriverVersionMismatch_GetNodeDescriptionInCS");
//static_assert(offsetof(BED_FSMNode_Condition_GI_Loading_IsDriverVersionMismatch_GetNodeDescriptionInCS, ReturnValue) == 0x000000, "Member 'BED_FSMNode_Condition_GI_Loading_IsDriverVersionMismatch_GetNodeDescriptionInCS::ReturnValue' has a wrong offset!");

// Function b1-Managed.BANSM_Base.AddPreciseDodgeAttackWarningAndSocket
// 0x0018 (0x0018 - 0x0000)
struct BANSM_Base_AddPreciseDodgeAttackWarningAndSocket final
{
public:
	class UAnimMontage*                           AnimMontage;                                       // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         PreTimeSeconds;                                    // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         PostTimeSeconds;                                   // 0x000C(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CheckSphereRadius;                                 // 0x0010(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         AddSocketNumPerAnim;                               // 0x0014(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
//static_assert(alignof(BANSM_Base_AddPreciseDodgeAttackWarningAndSocket) == 0x000008, "Wrong alignment on BANSM_Base_AddPreciseDodgeAttackWarningAndSocket");
//static_assert(sizeof(BANSM_Base_AddPreciseDodgeAttackWarningAndSocket) == 0x000018, "Wrong size on BANSM_Base_AddPreciseDodgeAttackWarningAndSocket");
//static_assert(offsetof(BANSM_Base_AddPreciseDodgeAttackWarningAndSocket, AnimMontage) == 0x000000, "Member 'BANSM_Base_AddPreciseDodgeAttackWarningAndSocket::AnimMontage' has a wrong offset!");
//static_assert(offsetof(BANSM_Base_AddPreciseDodgeAttackWarningAndSocket, PreTimeSeconds) == 0x000008, "Member 'BANSM_Base_AddPreciseDodgeAttackWarningAndSocket::PreTimeSeconds' has a wrong offset!");
//static_assert(offsetof(BANSM_Base_AddPreciseDodgeAttackWarningAndSocket, PostTimeSeconds) == 0x00000C, "Member 'BANSM_Base_AddPreciseDodgeAttackWarningAndSocket::PostTimeSeconds' has a wrong offset!");
//static_assert(offsetof(BANSM_Base_AddPreciseDodgeAttackWarningAndSocket, CheckSphereRadius) == 0x000010, "Member 'BANSM_Base_AddPreciseDodgeAttackWarningAndSocket::CheckSphereRadius' has a wrong offset!");
//static_assert(offsetof(BANSM_Base_AddPreciseDodgeAttackWarningAndSocket, AddSocketNumPerAnim) == 0x000014, "Member 'BANSM_Base_AddPreciseDodgeAttackWarningAndSocket::AddSocketNumPerAnim' has a wrong offset!");

// Function b1-Managed.BANSM_Base.ClearGeneratedAttackWarningsByTrack
// 0x0008 (0x0008 - 0x0000)
struct BANSM_Base_ClearGeneratedAttackWarningsByTrack final
{
public:
	class UAnimMontage*                           AnimMontage;                                       // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
//static_assert(alignof(BANSM_Base_ClearGeneratedAttackWarningsByTrack) == 0x000008, "Wrong alignment on BANSM_Base_ClearGeneratedAttackWarningsByTrack");
//static_assert(sizeof(BANSM_Base_ClearGeneratedAttackWarningsByTrack) == 0x000008, "Wrong size on BANSM_Base_ClearGeneratedAttackWarningsByTrack");
//static_assert(offsetof(BANSM_Base_ClearGeneratedAttackWarningsByTrack, AnimMontage) == 0x000000, "Member 'BANSM_Base_ClearGeneratedAttackWarningsByTrack::AnimMontage' has a wrong offset!");

// Function b1-Managed.BANSM_Base.AddPlayerWaterSplash_BySweepCheck
// 0x0020 (0x0020 - 0x0000)
struct BANSM_Base_AddPlayerWaterSplash_BySweepCheck final
{
public:
	class UAnimMontage*                           AnimMontage;                                       // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class FName                                   _SocketName;                                       // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         SweepRadius;                                       // 0x0010(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         PointBetweenMin;                                   // 0x0014(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         SampleStep;                                        // 0x0018(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
//static_assert(alignof(BANSM_Base_AddPlayerWaterSplash_BySweepCheck) == 0x000008, "Wrong alignment on BANSM_Base_AddPlayerWaterSplash_BySweepCheck");
//static_assert(sizeof(BANSM_Base_AddPlayerWaterSplash_BySweepCheck) == 0x000020, "Wrong size on BANSM_Base_AddPlayerWaterSplash_BySweepCheck");
//static_assert(offsetof(BANSM_Base_AddPlayerWaterSplash_BySweepCheck, AnimMontage) == 0x000000, "Member 'BANSM_Base_AddPlayerWaterSplash_BySweepCheck::AnimMontage' has a wrong offset!");
//static_assert(offsetof(BANSM_Base_AddPlayerWaterSplash_BySweepCheck, _SocketName) == 0x000008, "Member 'BANSM_Base_AddPlayerWaterSplash_BySweepCheck::_SocketName' has a wrong offset!");
//static_assert(offsetof(BANSM_Base_AddPlayerWaterSplash_BySweepCheck, SweepRadius) == 0x000010, "Member 'BANSM_Base_AddPlayerWaterSplash_BySweepCheck::SweepRadius' has a wrong offset!");
//static_assert(offsetof(BANSM_Base_AddPlayerWaterSplash_BySweepCheck, PointBetweenMin) == 0x000014, "Member 'BANSM_Base_AddPlayerWaterSplash_BySweepCheck::PointBetweenMin' has a wrong offset!");
//static_assert(offsetof(BANSM_Base_AddPlayerWaterSplash_BySweepCheck, SampleStep) == 0x000018, "Member 'BANSM_Base_AddPlayerWaterSplash_BySweepCheck::SampleStep' has a wrong offset!");

// Function b1-Managed.BANSM_Base.UpdateExtraSocketAttackWarning
// 0x0010 (0x0010 - 0x0000)
struct BANSM_Base_UpdateExtraSocketAttackWarning final
{
public:
	class UAnimMontage*                           AnimMontage;                                       // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         LengthFrame;                                       // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
//static_assert(alignof(BANSM_Base_UpdateExtraSocketAttackWarning) == 0x000008, "Wrong alignment on BANSM_Base_UpdateExtraSocketAttackWarning");
//static_assert(sizeof(BANSM_Base_UpdateExtraSocketAttackWarning) == 0x000010, "Wrong size on BANSM_Base_UpdateExtraSocketAttackWarning");
//static_assert(offsetof(BANSM_Base_UpdateExtraSocketAttackWarning, AnimMontage) == 0x000000, "Member 'BANSM_Base_UpdateExtraSocketAttackWarning::AnimMontage' has a wrong offset!");
//static_assert(offsetof(BANSM_Base_UpdateExtraSocketAttackWarning, LengthFrame) == 0x000008, "Member 'BANSM_Base_UpdateExtraSocketAttackWarning::LengthFrame' has a wrong offset!");

// Function b1-Managed.BANSM_Base.AddExtraSocketAttackWarning
// 0x0018 (0x0018 - 0x0000)
struct BANSM_Base_AddExtraSocketAttackWarning final
{
public:
	class UAnimMontage*                           AnimMontage;                                       // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         SocketNum;                                         // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         SocketRadius;                                      // 0x000C(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         LengthFrame;                                       // 0x0010(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
//static_assert(alignof(BANSM_Base_AddExtraSocketAttackWarning) == 0x000008, "Wrong alignment on BANSM_Base_AddExtraSocketAttackWarning");
//static_assert(sizeof(BANSM_Base_AddExtraSocketAttackWarning) == 0x000018, "Wrong size on BANSM_Base_AddExtraSocketAttackWarning");
//static_assert(offsetof(BANSM_Base_AddExtraSocketAttackWarning, AnimMontage) == 0x000000, "Member 'BANSM_Base_AddExtraSocketAttackWarning::AnimMontage' has a wrong offset!");
//static_assert(offsetof(BANSM_Base_AddExtraSocketAttackWarning, SocketNum) == 0x000008, "Member 'BANSM_Base_AddExtraSocketAttackWarning::SocketNum' has a wrong offset!");
//static_assert(offsetof(BANSM_Base_AddExtraSocketAttackWarning, SocketRadius) == 0x00000C, "Member 'BANSM_Base_AddExtraSocketAttackWarning::SocketRadius' has a wrong offset!");
//static_assert(offsetof(BANSM_Base_AddExtraSocketAttackWarning, LengthFrame) == 0x000010, "Member 'BANSM_Base_AddExtraSocketAttackWarning::LengthFrame' has a wrong offset!");

// Function b1-Managed.BANSM_Base.AddSweepCheckAttackWarning
// 0x0010 (0x0010 - 0x0000)
struct BANSM_Base_AddSweepCheckAttackWarning final
{
public:
	class UAnimMontage*                           AnimMontage;                                       // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CheckSphereRadiusIncrease;                         // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
//static_assert(alignof(BANSM_Base_AddSweepCheckAttackWarning) == 0x000008, "Wrong alignment on BANSM_Base_AddSweepCheckAttackWarning");
//static_assert(sizeof(BANSM_Base_AddSweepCheckAttackWarning) == 0x000010, "Wrong size on BANSM_Base_AddSweepCheckAttackWarning");
//static_assert(offsetof(BANSM_Base_AddSweepCheckAttackWarning, AnimMontage) == 0x000000, "Member 'BANSM_Base_AddSweepCheckAttackWarning::AnimMontage' has a wrong offset!");
//static_assert(offsetof(BANSM_Base_AddSweepCheckAttackWarning, CheckSphereRadiusIncrease) == 0x000008, "Member 'BANSM_Base_AddSweepCheckAttackWarning::CheckSphereRadiusIncrease' has a wrong offset!");

// Function b1-Managed.BANSM_Base.RefreshAttackWarning
// 0x0010 (0x0010 - 0x0000)
struct BANSM_Base_RefreshAttackWarning final
{
public:
	class UAnimMontage*                           AnimMontage;                                       // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         PreTimeSeconds;                                    // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         PostTimeSeconds;                                   // 0x000C(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
//static_assert(alignof(BANSM_Base_RefreshAttackWarning) == 0x000008, "Wrong alignment on BANSM_Base_RefreshAttackWarning");
//static_assert(sizeof(BANSM_Base_RefreshAttackWarning) == 0x000010, "Wrong size on BANSM_Base_RefreshAttackWarning");
//static_assert(offsetof(BANSM_Base_RefreshAttackWarning, AnimMontage) == 0x000000, "Member 'BANSM_Base_RefreshAttackWarning::AnimMontage' has a wrong offset!");
//static_assert(offsetof(BANSM_Base_RefreshAttackWarning, PreTimeSeconds) == 0x000008, "Member 'BANSM_Base_RefreshAttackWarning::PreTimeSeconds' has a wrong offset!");
//static_assert(offsetof(BANSM_Base_RefreshAttackWarning, PostTimeSeconds) == 0x00000C, "Member 'BANSM_Base_RefreshAttackWarning::PostTimeSeconds' has a wrong offset!");

// Function b1-Managed.BANSM_Base.MarkNotifyState
// 0x0010 (0x0010 - 0x0000)
struct BANSM_Base_MarkNotifyState final
{
public:
	class UAnimSequenceBase*                      AnimSeq;                                           // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         StartTime;                                         // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         EndTime;                                           // 0x000C(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
//static_assert(alignof(BANSM_Base_MarkNotifyState) == 0x000008, "Wrong alignment on BANSM_Base_MarkNotifyState");
//static_assert(sizeof(BANSM_Base_MarkNotifyState) == 0x000010, "Wrong size on BANSM_Base_MarkNotifyState");
//static_assert(offsetof(BANSM_Base_MarkNotifyState, AnimSeq) == 0x000000, "Member 'BANSM_Base_MarkNotifyState::AnimSeq' has a wrong offset!");
//static_assert(offsetof(BANSM_Base_MarkNotifyState, StartTime) == 0x000008, "Member 'BANSM_Base_MarkNotifyState::StartTime' has a wrong offset!");
//static_assert(offsetof(BANSM_Base_MarkNotifyState, EndTime) == 0x00000C, "Member 'BANSM_Base_MarkNotifyState::EndTime' has a wrong offset!");

// Function b1-Managed.BANSM_Base.CheckState
// 0x0010 (0x0010 - 0x0000)
struct BANSM_Base_CheckState final
{
public:
	class UAnimSequenceBase*                      AnimBase;                                          // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CurTime;                                           // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         ReturnValue : 1;                                   // 0x000C(0x0001)(BitIndex: 0x00, PropSize: 0x0001 (Parm, OutParm, ReturnParm, NoDestructor, HasGetValueTypeHash))
};
//static_assert(alignof(BANSM_Base_CheckState) == 0x000008, "Wrong alignment on BANSM_Base_CheckState");
//static_assert(sizeof(BANSM_Base_CheckState) == 0x000010, "Wrong size on BANSM_Base_CheckState");
//static_assert(offsetof(BANSM_Base_CheckState, AnimBase) == 0x000000, "Member 'BANSM_Base_CheckState::AnimBase' has a wrong offset!");
//static_assert(offsetof(BANSM_Base_CheckState, CurTime) == 0x000008, "Member 'BANSM_Base_CheckState::CurTime' has a wrong offset!");

// Function b1-Managed.BANSM_Base.MarkNotify
// 0x0010 (0x0010 - 0x0000)
struct BANSM_Base_MarkNotify final
{
public:
	class UAnimSequenceBase*                      AnimSeq;                                           // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         StartTime;                                         // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
//static_assert(alignof(BANSM_Base_MarkNotify) == 0x000008, "Wrong alignment on BANSM_Base_MarkNotify");
//static_assert(sizeof(BANSM_Base_MarkNotify) == 0x000010, "Wrong size on BANSM_Base_MarkNotify");
//static_assert(offsetof(BANSM_Base_MarkNotify, AnimSeq) == 0x000000, "Member 'BANSM_Base_MarkNotify::AnimSeq' has a wrong offset!");
//static_assert(offsetof(BANSM_Base_MarkNotify, StartTime) == 0x000008, "Member 'BANSM_Base_MarkNotify::StartTime' has a wrong offset!");

// Function b1-Managed.BANSM_Base.GetSupportedClass
// 0x0008 (0x0008 - 0x0000)
struct BANSM_Base_GetSupportedClass final
{
public:
	class UClass*                                 ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
//static_assert(alignof(BANSM_Base_GetSupportedClass) == 0x000008, "Wrong alignment on BANSM_Base_GetSupportedClass");
//static_assert(sizeof(BANSM_Base_GetSupportedClass) == 0x000008, "Wrong size on BANSM_Base_GetSupportedClass");
//static_assert(offsetof(BANSM_Base_GetSupportedClass, ReturnValue) == 0x000000, "Member 'BANSM_Base_GetSupportedClass::ReturnValue' has a wrong offset!");

// Function b1-Managed.BANSM_MarkFoot.CheckState
// 0x0010 (0x0010 - 0x0000)
struct BANSM_MarkFoot_CheckState final
{
public:
	class UAnimSequenceBase*                      AnimBase;                                          // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CurTime;                                           // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         ReturnValue : 1;                                   // 0x000C(0x0001)(BitIndex: 0x00, PropSize: 0x0001 (Parm, OutParm, ReturnParm, NoDestructor, HasGetValueTypeHash))
};
//static_assert(alignof(BANSM_MarkFoot_CheckState) == 0x000008, "Wrong alignment on BANSM_MarkFoot_CheckState");
//static_assert(sizeof(BANSM_MarkFoot_CheckState) == 0x000010, "Wrong size on BANSM_MarkFoot_CheckState");
//static_assert(offsetof(BANSM_MarkFoot_CheckState, AnimBase) == 0x000000, "Member 'BANSM_MarkFoot_CheckState::AnimBase' has a wrong offset!");
//static_assert(offsetof(BANSM_MarkFoot_CheckState, CurTime) == 0x000008, "Member 'BANSM_MarkFoot_CheckState::CurTime' has a wrong offset!");

// Function b1-Managed.BED_FSMNode_Condition_GI_Loading_IsInContextLevel.GetNodeDescriptionInCS
// 0x0010 (0x0010 - 0x0000)
struct BED_FSMNode_Condition_GI_Loading_IsInContextLevel_GetNodeDescriptionInCS final
{
public:
	class FString                                 ReturnValue;                                       // 0x0000(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash)
};
//static_assert(alignof(BED_FSMNode_Condition_GI_Loading_IsInContextLevel_GetNodeDescriptionInCS) == 0x000008, "Wrong alignment on BED_FSMNode_Condition_GI_Loading_IsInContextLevel_GetNodeDescriptionInCS");
//static_assert(sizeof(BED_FSMNode_Condition_GI_Loading_IsInContextLevel_GetNodeDescriptionInCS) == 0x000010, "Wrong size on BED_FSMNode_Condition_GI_Loading_IsInContextLevel_GetNodeDescriptionInCS");
//static_assert(offsetof(BED_FSMNode_Condition_GI_Loading_IsInContextLevel_GetNodeDescriptionInCS, ReturnValue) == 0x000000, "Member 'BED_FSMNode_Condition_GI_Loading_IsInContextLevel_GetNodeDescriptionInCS::ReturnValue' has a wrong offset!");

// Function b1-Managed.BGUTortoiseLevelStreamingMgrActor.OnSingleSetLevelsStateFinished
// 0x0028 (0x0028 - 0x0000)
struct BGUTortoiseLevelStreamingMgrActor_OnSingleSetLevelsStateFinished final
{
public:
	class FString                                 LevelKeyword;                                      // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash)
	class FString                                 LevelState;                                        // 0x0010(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash)
	int32                                         OperationID;                                       // 0x0020(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
//static_assert(alignof(BGUTortoiseLevelStreamingMgrActor_OnSingleSetLevelsStateFinished) == 0x000008, "Wrong alignment on BGUTortoiseLevelStreamingMgrActor_OnSingleSetLevelsStateFinished");
//static_assert(sizeof(BGUTortoiseLevelStreamingMgrActor_OnSingleSetLevelsStateFinished) == 0x000028, "Wrong size on BGUTortoiseLevelStreamingMgrActor_OnSingleSetLevelsStateFinished");
//static_assert(offsetof(BGUTortoiseLevelStreamingMgrActor_OnSingleSetLevelsStateFinished, LevelKeyword) == 0x000000, "Member 'BGUTortoiseLevelStreamingMgrActor_OnSingleSetLevelsStateFinished::LevelKeyword' has a wrong offset!");
//static_assert(offsetof(BGUTortoiseLevelStreamingMgrActor_OnSingleSetLevelsStateFinished, LevelState) == 0x000010, "Member 'BGUTortoiseLevelStreamingMgrActor_OnSingleSetLevelsStateFinished::LevelState' has a wrong offset!");
//static_assert(offsetof(BGUTortoiseLevelStreamingMgrActor_OnSingleSetLevelsStateFinished, OperationID) == 0x000020, "Member 'BGUTortoiseLevelStreamingMgrActor_OnSingleSetLevelsStateFinished::OperationID' has a wrong offset!");

// Function b1-Managed.BED_FSMNode_Condition_GI_Loading_IsInMap.GetNodeDescriptionInCS
// 0x0010 (0x0010 - 0x0000)
struct BED_FSMNode_Condition_GI_Loading_IsInMap_GetNodeDescriptionInCS final
{
public:
	class FString                                 ReturnValue;                                       // 0x0000(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash)
};
//static_assert(alignof(BED_FSMNode_Condition_GI_Loading_IsInMap_GetNodeDescriptionInCS) == 0x000008, "Wrong alignment on BED_FSMNode_Condition_GI_Loading_IsInMap_GetNodeDescriptionInCS");
//static_assert(sizeof(BED_FSMNode_Condition_GI_Loading_IsInMap_GetNodeDescriptionInCS) == 0x000010, "Wrong size on BED_FSMNode_Condition_GI_Loading_IsInMap_GetNodeDescriptionInCS");
//static_assert(offsetof(BED_FSMNode_Condition_GI_Loading_IsInMap_GetNodeDescriptionInCS, ReturnValue) == 0x000000, "Member 'BED_FSMNode_Condition_GI_Loading_IsInMap_GetNodeDescriptionInCS::ReturnValue' has a wrong offset!");

// Function b1-Managed.BED_FSMNode_Condition_GI_Loading_IsInServer.GetNodeDescriptionInCS
// 0x0010 (0x0010 - 0x0000)
struct BED_FSMNode_Condition_GI_Loading_IsInServer_GetNodeDescriptionInCS final
{
public:
	class FString                                 ReturnValue;                                       // 0x0000(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash)
};
//static_assert(alignof(BED_FSMNode_Condition_GI_Loading_IsInServer_GetNodeDescriptionInCS) == 0x000008, "Wrong alignment on BED_FSMNode_Condition_GI_Loading_IsInServer_GetNodeDescriptionInCS");
//static_assert(sizeof(BED_FSMNode_Condition_GI_Loading_IsInServer_GetNodeDescriptionInCS) == 0x000010, "Wrong size on BED_FSMNode_Condition_GI_Loading_IsInServer_GetNodeDescriptionInCS");
//static_assert(offsetof(BED_FSMNode_Condition_GI_Loading_IsInServer_GetNodeDescriptionInCS, ReturnValue) == 0x000000, "Member 'BED_FSMNode_Condition_GI_Loading_IsInServer_GetNodeDescriptionInCS::ReturnValue' has a wrong offset!");

// Function b1-Managed.BANS_GSShooterMode.GSNotifyBeginCS
// 0x0048 (0x0048 - 0x0000)
struct BANS_GSShooterMode_GSNotifyBeginCS final
{
public:
	struct FUStGSNotifyParam                      NotifyParam;                                       // 0x0000(0x0040)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
	float                                         TotalDuration;                                     // 0x0040(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
//static_assert(alignof(BANS_GSShooterMode_GSNotifyBeginCS) == 0x000008, "Wrong alignment on BANS_GSShooterMode_GSNotifyBeginCS");
//static_assert(sizeof(BANS_GSShooterMode_GSNotifyBeginCS) == 0x000048, "Wrong size on BANS_GSShooterMode_GSNotifyBeginCS");
//static_assert(offsetof(BANS_GSShooterMode_GSNotifyBeginCS, NotifyParam) == 0x000000, "Member 'BANS_GSShooterMode_GSNotifyBeginCS::NotifyParam' has a wrong offset!");
//static_assert(offsetof(BANS_GSShooterMode_GSNotifyBeginCS, TotalDuration) == 0x000040, "Member 'BANS_GSShooterMode_GSNotifyBeginCS::TotalDuration' has a wrong offset!");

// Function b1-Managed.BANS_GSShooterMode.GSNotifyTickCS
// 0x0048 (0x0048 - 0x0000)
struct BANS_GSShooterMode_GSNotifyTickCS final
{
public:
	struct FUStGSNotifyParam                      NotifyParam;                                       // 0x0000(0x0040)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
	float                                         FrameDeltaTime;                                    // 0x0040(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
//static_assert(alignof(BANS_GSShooterMode_GSNotifyTickCS) == 0x000008, "Wrong alignment on BANS_GSShooterMode_GSNotifyTickCS");
//static_assert(sizeof(BANS_GSShooterMode_GSNotifyTickCS) == 0x000048, "Wrong size on BANS_GSShooterMode_GSNotifyTickCS");
//static_assert(offsetof(BANS_GSShooterMode_GSNotifyTickCS, NotifyParam) == 0x000000, "Member 'BANS_GSShooterMode_GSNotifyTickCS::NotifyParam' has a wrong offset!");
//static_assert(offsetof(BANS_GSShooterMode_GSNotifyTickCS, FrameDeltaTime) == 0x000040, "Member 'BANS_GSShooterMode_GSNotifyTickCS::FrameDeltaTime' has a wrong offset!");

// Function b1-Managed.BANS_GSShooterMode.GSNotifyEndCS
// 0x0040 (0x0040 - 0x0000)
struct BANS_GSShooterMode_GSNotifyEndCS final
{
public:
	struct FUStGSNotifyParam                      NotifyParam;                                       // 0x0000(0x0040)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
//static_assert(alignof(BANS_GSShooterMode_GSNotifyEndCS) == 0x000008, "Wrong alignment on BANS_GSShooterMode_GSNotifyEndCS");
//static_assert(sizeof(BANS_GSShooterMode_GSNotifyEndCS) == 0x000040, "Wrong size on BANS_GSShooterMode_GSNotifyEndCS");
//static_assert(offsetof(BANS_GSShooterMode_GSNotifyEndCS, NotifyParam) == 0x000000, "Member 'BANS_GSShooterMode_GSNotifyEndCS::NotifyParam' has a wrong offset!");

// Function b1-Managed.BED_FSMNode_GI_Loading_InitDispLibWorld.PostPropertyChanged
// 0x0020 (0x0020 - 0x0000)
struct BED_FSMNode_GI_Loading_InitDispLibWorld_PostPropertyChanged final
{
public:
	class FString                                 MemberName;                                        // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash)
	class FString                                 PropertyName;                                      // 0x0010(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash)
};
//static_assert(alignof(BED_FSMNode_GI_Loading_InitDispLibWorld_PostPropertyChanged) == 0x000008, "Wrong alignment on BED_FSMNode_GI_Loading_InitDispLibWorld_PostPropertyChanged");
//static_assert(sizeof(BED_FSMNode_GI_Loading_InitDispLibWorld_PostPropertyChanged) == 0x000020, "Wrong size on BED_FSMNode_GI_Loading_InitDispLibWorld_PostPropertyChanged");
//static_assert(offsetof(BED_FSMNode_GI_Loading_InitDispLibWorld_PostPropertyChanged, MemberName) == 0x000000, "Member 'BED_FSMNode_GI_Loading_InitDispLibWorld_PostPropertyChanged::MemberName' has a wrong offset!");
//static_assert(offsetof(BED_FSMNode_GI_Loading_InitDispLibWorld_PostPropertyChanged, PropertyName) == 0x000010, "Member 'BED_FSMNode_GI_Loading_InitDispLibWorld_PostPropertyChanged::PropertyName' has a wrong offset!");

// Function b1-Managed.BED_FSMNode_GI_Loading_InitDispLibWorld.GetNodeDescriptionInCS
// 0x0010 (0x0010 - 0x0000)
struct BED_FSMNode_GI_Loading_InitDispLibWorld_GetNodeDescriptionInCS final
{
public:
	class FString                                 ReturnValue;                                       // 0x0000(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash)
};
//static_assert(alignof(BED_FSMNode_GI_Loading_InitDispLibWorld_GetNodeDescriptionInCS) == 0x000008, "Wrong alignment on BED_FSMNode_GI_Loading_InitDispLibWorld_GetNodeDescriptionInCS");
//static_assert(sizeof(BED_FSMNode_GI_Loading_InitDispLibWorld_GetNodeDescriptionInCS) == 0x000010, "Wrong size on BED_FSMNode_GI_Loading_InitDispLibWorld_GetNodeDescriptionInCS");
//static_assert(offsetof(BED_FSMNode_GI_Loading_InitDispLibWorld_GetNodeDescriptionInCS, ReturnValue) == 0x000000, "Member 'BED_FSMNode_GI_Loading_InitDispLibWorld_GetNodeDescriptionInCS::ReturnValue' has a wrong offset!");

// Function b1-Managed.BUS_SpringArmComponent.CalcSmoothLocation
// 0x0068 (0x0068 - 0x0000)
struct BUS_SpringArmComponent_CalcSmoothLocation final
{
public:
	struct FVector                                Current;                                           // 0x0000(0x0018)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                Target;                                            // 0x0018(0x0018)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         DeltaTime;                                         // 0x0030(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_34[0x4];                                       // 0x0034(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                SmoothSpeed;                                       // 0x0038(0x0018)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                ReturnValue;                                       // 0x0050(0x0018)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
//static_assert(alignof(BUS_SpringArmComponent_CalcSmoothLocation) == 0x000008, "Wrong alignment on BUS_SpringArmComponent_CalcSmoothLocation");
//static_assert(sizeof(BUS_SpringArmComponent_CalcSmoothLocation) == 0x000068, "Wrong size on BUS_SpringArmComponent_CalcSmoothLocation");
//static_assert(offsetof(BUS_SpringArmComponent_CalcSmoothLocation, Current) == 0x000000, "Member 'BUS_SpringArmComponent_CalcSmoothLocation::Current' has a wrong offset!");
//static_assert(offsetof(BUS_SpringArmComponent_CalcSmoothLocation, Target) == 0x000018, "Member 'BUS_SpringArmComponent_CalcSmoothLocation::Target' has a wrong offset!");
//static_assert(offsetof(BUS_SpringArmComponent_CalcSmoothLocation, DeltaTime) == 0x000030, "Member 'BUS_SpringArmComponent_CalcSmoothLocation::DeltaTime' has a wrong offset!");
//static_assert(offsetof(BUS_SpringArmComponent_CalcSmoothLocation, SmoothSpeed) == 0x000038, "Member 'BUS_SpringArmComponent_CalcSmoothLocation::SmoothSpeed' has a wrong offset!");
//static_assert(offsetof(BUS_SpringArmComponent_CalcSmoothLocation, ReturnValue) == 0x000050, "Member 'BUS_SpringArmComponent_CalcSmoothLocation::ReturnValue' has a wrong offset!");

// Function b1-Managed.BUS_SpringArmComponent.BlendLocationsInCS
// 0x0138 (0x0138 - 0x0000)
struct BUS_SpringArmComponent_BlendLocationsInCS final
{
public:
	struct FVector                                OriginArmLocation;                                 // 0x0000(0x0018)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                DesiredArmLocation;                                // 0x0018(0x0018)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FHitResult                             HitResult;                                         // 0x0030(0x00E8)(ConstParm, Parm, OutParm, ReferenceParm, IsPlainOldData, NoDestructor)
	float                                         DeltaTime;                                         // 0x0118(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_11C[0x4];                                      // 0x011C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                ReturnValue;                                       // 0x0120(0x0018)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
//static_assert(alignof(BUS_SpringArmComponent_BlendLocationsInCS) == 0x000008, "Wrong alignment on BUS_SpringArmComponent_BlendLocationsInCS");
//static_assert(sizeof(BUS_SpringArmComponent_BlendLocationsInCS) == 0x000138, "Wrong size on BUS_SpringArmComponent_BlendLocationsInCS");
//static_assert(offsetof(BUS_SpringArmComponent_BlendLocationsInCS, OriginArmLocation) == 0x000000, "Member 'BUS_SpringArmComponent_BlendLocationsInCS::OriginArmLocation' has a wrong offset!");
//static_assert(offsetof(BUS_SpringArmComponent_BlendLocationsInCS, DesiredArmLocation) == 0x000018, "Member 'BUS_SpringArmComponent_BlendLocationsInCS::DesiredArmLocation' has a wrong offset!");
//static_assert(offsetof(BUS_SpringArmComponent_BlendLocationsInCS, HitResult) == 0x000030, "Member 'BUS_SpringArmComponent_BlendLocationsInCS::HitResult' has a wrong offset!");
//static_assert(offsetof(BUS_SpringArmComponent_BlendLocationsInCS, DeltaTime) == 0x000118, "Member 'BUS_SpringArmComponent_BlendLocationsInCS::DeltaTime' has a wrong offset!");
//static_assert(offsetof(BUS_SpringArmComponent_BlendLocationsInCS, ReturnValue) == 0x000120, "Member 'BUS_SpringArmComponent_BlendLocationsInCS::ReturnValue' has a wrong offset!");

// Function b1-Managed.OverlapBoxBinder.OnActorLeave
// 0x0010 (0x0010 - 0x0000)
struct OverlapBoxBinder_OnActorLeave final
{
public:
	class AActor*                                 OverlappedActor;                                   // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class AActor*                                 OtherActor;                                        // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
//static_assert(alignof(OverlapBoxBinder_OnActorLeave) == 0x000008, "Wrong alignment on OverlapBoxBinder_OnActorLeave");
//static_assert(sizeof(OverlapBoxBinder_OnActorLeave) == 0x000010, "Wrong size on OverlapBoxBinder_OnActorLeave");
//static_assert(offsetof(OverlapBoxBinder_OnActorLeave, OverlappedActor) == 0x000000, "Member 'OverlapBoxBinder_OnActorLeave::OverlappedActor' has a wrong offset!");
//static_assert(offsetof(OverlapBoxBinder_OnActorLeave, OtherActor) == 0x000008, "Member 'OverlapBoxBinder_OnActorLeave::OtherActor' has a wrong offset!");

// Function b1-Managed.OverlapBoxBinder.OnActorEnter
// 0x0010 (0x0010 - 0x0000)
struct OverlapBoxBinder_OnActorEnter final
{
public:
	class AActor*                                 OverlappedActor;                                   // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class AActor*                                 OtherActor;                                        // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
//static_assert(alignof(OverlapBoxBinder_OnActorEnter) == 0x000008, "Wrong alignment on OverlapBoxBinder_OnActorEnter");
//static_assert(sizeof(OverlapBoxBinder_OnActorEnter) == 0x000010, "Wrong size on OverlapBoxBinder_OnActorEnter");
//static_assert(offsetof(OverlapBoxBinder_OnActorEnter, OverlappedActor) == 0x000000, "Member 'OverlapBoxBinder_OnActorEnter::OverlappedActor' has a wrong offset!");
//static_assert(offsetof(OverlapBoxBinder_OnActorEnter, OtherActor) == 0x000008, "Member 'OverlapBoxBinder_OnActorEnter::OtherActor' has a wrong offset!");

// Function b1-Managed.BED_FSMNode_GI_Loading_LoadCharacterViewLevel.PostPropertyChanged
// 0x0020 (0x0020 - 0x0000)
struct BED_FSMNode_GI_Loading_LoadCharacterViewLevel_PostPropertyChanged final
{
public:
	class FString                                 MemberName;                                        // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash)
	class FString                                 PropertyName;                                      // 0x0010(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash)
};
//static_assert(alignof(BED_FSMNode_GI_Loading_LoadCharacterViewLevel_PostPropertyChanged) == 0x000008, "Wrong alignment on BED_FSMNode_GI_Loading_LoadCharacterViewLevel_PostPropertyChanged");
//static_assert(sizeof(BED_FSMNode_GI_Loading_LoadCharacterViewLevel_PostPropertyChanged) == 0x000020, "Wrong size on BED_FSMNode_GI_Loading_LoadCharacterViewLevel_PostPropertyChanged");
//static_assert(offsetof(BED_FSMNode_GI_Loading_LoadCharacterViewLevel_PostPropertyChanged, MemberName) == 0x000000, "Member 'BED_FSMNode_GI_Loading_LoadCharacterViewLevel_PostPropertyChanged::MemberName' has a wrong offset!");
//static_assert(offsetof(BED_FSMNode_GI_Loading_LoadCharacterViewLevel_PostPropertyChanged, PropertyName) == 0x000010, "Member 'BED_FSMNode_GI_Loading_LoadCharacterViewLevel_PostPropertyChanged::PropertyName' has a wrong offset!");

// Function b1-Managed.BED_FSMNode_GI_Loading_LoadCharacterViewLevel.GetNodeDescriptionInCS
// 0x0010 (0x0010 - 0x0000)
struct BED_FSMNode_GI_Loading_LoadCharacterViewLevel_GetNodeDescriptionInCS final
{
public:
	class FString                                 ReturnValue;                                       // 0x0000(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash)
};
//static_assert(alignof(BED_FSMNode_GI_Loading_LoadCharacterViewLevel_GetNodeDescriptionInCS) == 0x000008, "Wrong alignment on BED_FSMNode_GI_Loading_LoadCharacterViewLevel_GetNodeDescriptionInCS");
//static_assert(sizeof(BED_FSMNode_GI_Loading_LoadCharacterViewLevel_GetNodeDescriptionInCS) == 0x000010, "Wrong size on BED_FSMNode_GI_Loading_LoadCharacterViewLevel_GetNodeDescriptionInCS");
//static_assert(offsetof(BED_FSMNode_GI_Loading_LoadCharacterViewLevel_GetNodeDescriptionInCS, ReturnValue) == 0x000000, "Member 'BED_FSMNode_GI_Loading_LoadCharacterViewLevel_GetNodeDescriptionInCS::ReturnValue' has a wrong offset!");

// Function b1-Managed.BGW_CommLevelMgr.OnAKBStateEndFunc
// 0x0014 (0x0014 - 0x0000)
struct BGW_CommLevelMgr_OnAKBStateEndFunc final
{
public:
	class FName                                   BeginStateName;                                    // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class FName                                   EndStateName;                                      // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         IsForceImSet : 1;                                  // 0x0010(0x0001)(BitIndex: 0x00, PropSize: 0x0001 (Parm, NoDestructor, HasGetValueTypeHash))
};
//static_assert(alignof(BGW_CommLevelMgr_OnAKBStateEndFunc) == 0x000004, "Wrong alignment on BGW_CommLevelMgr_OnAKBStateEndFunc");
//static_assert(sizeof(BGW_CommLevelMgr_OnAKBStateEndFunc) == 0x000014, "Wrong size on BGW_CommLevelMgr_OnAKBStateEndFunc");
//static_assert(offsetof(BGW_CommLevelMgr_OnAKBStateEndFunc, BeginStateName) == 0x000000, "Member 'BGW_CommLevelMgr_OnAKBStateEndFunc::BeginStateName' has a wrong offset!");
//static_assert(offsetof(BGW_CommLevelMgr_OnAKBStateEndFunc, EndStateName) == 0x000008, "Member 'BGW_CommLevelMgr_OnAKBStateEndFunc::EndStateName' has a wrong offset!");

// Function b1-Managed.BGUProjectileSpawnPreviewActor.ReceiveTick
// 0x0004 (0x0004 - 0x0000)
struct BGUProjectileSpawnPreviewActor_ReceiveTick final
{
public:
	float                                         DeltaSeconds;                                      // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
//static_assert(alignof(BGUProjectileSpawnPreviewActor_ReceiveTick) == 0x000004, "Wrong alignment on BGUProjectileSpawnPreviewActor_ReceiveTick");
//static_assert(sizeof(BGUProjectileSpawnPreviewActor_ReceiveTick) == 0x000004, "Wrong size on BGUProjectileSpawnPreviewActor_ReceiveTick");
//static_assert(offsetof(BGUProjectileSpawnPreviewActor_ReceiveTick, DeltaSeconds) == 0x000000, "Member 'BGUProjectileSpawnPreviewActor_ReceiveTick::DeltaSeconds' has a wrong offset!");

// Function b1-Managed.BUAnimSimple.GetRandomIdleAnim
// 0x0020 (0x0020 - 0x0000)
struct BUAnimSimple_GetRandomIdleAnim final
{
public:
	struct FAnimUpdateContext                     Context;                                           // 0x0000(0x0010)(Parm, OutParm, ReferenceParm)
	struct FAnimNodeReference                     Node;                                              // 0x0010(0x0010)(Parm, OutParm, ReferenceParm, NoDestructor)
};
//static_assert(alignof(BUAnimSimple_GetRandomIdleAnim) == 0x000008, "Wrong alignment on BUAnimSimple_GetRandomIdleAnim");
//static_assert(sizeof(BUAnimSimple_GetRandomIdleAnim) == 0x000020, "Wrong size on BUAnimSimple_GetRandomIdleAnim");
//static_assert(offsetof(BUAnimSimple_GetRandomIdleAnim, Context) == 0x000000, "Member 'BUAnimSimple_GetRandomIdleAnim::Context' has a wrong offset!");
//static_assert(offsetof(BUAnimSimple_GetRandomIdleAnim, Node) == 0x000010, "Member 'BUAnimSimple_GetRandomIdleAnim::Node' has a wrong offset!");

// Function b1-Managed.BUS_FoliageInteractSoundCompImpl.OnCollisionBeginOverlap
// 0x0108 (0x0108 - 0x0000)
struct BUS_FoliageInteractSoundCompImpl_OnCollisionBeginOverlap final
{
public:
	class UPrimitiveComponent*                    OverlappedComponent;                               // 0x0000(0x0008)(ExportObject, Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class AActor*                                 OtherActor;                                        // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UPrimitiveComponent*                    OtherComp;                                         // 0x0010(0x0008)(ExportObject, Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         OtherBodyIndex;                                    // 0x0018(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         bFromSweep : 1;                                    // 0x001C(0x0001)(BitIndex: 0x00, PropSize: 0x0001 (Parm, NoDestructor, HasGetValueTypeHash))
	uint8                                         Pad_1D[0x3];                                       // 0x001D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FHitResult                             SweepResult;                                       // 0x0020(0x00E8)(Parm, IsPlainOldData, NoDestructor)
};
//static_assert(alignof(BUS_FoliageInteractSoundCompImpl_OnCollisionBeginOverlap) == 0x000008, "Wrong alignment on BUS_FoliageInteractSoundCompImpl_OnCollisionBeginOverlap");
//static_assert(sizeof(BUS_FoliageInteractSoundCompImpl_OnCollisionBeginOverlap) == 0x000108, "Wrong size on BUS_FoliageInteractSoundCompImpl_OnCollisionBeginOverlap");
//static_assert(offsetof(BUS_FoliageInteractSoundCompImpl_OnCollisionBeginOverlap, OverlappedComponent) == 0x000000, "Member 'BUS_FoliageInteractSoundCompImpl_OnCollisionBeginOverlap::OverlappedComponent' has a wrong offset!");
//static_assert(offsetof(BUS_FoliageInteractSoundCompImpl_OnCollisionBeginOverlap, OtherActor) == 0x000008, "Member 'BUS_FoliageInteractSoundCompImpl_OnCollisionBeginOverlap::OtherActor' has a wrong offset!");
//static_assert(offsetof(BUS_FoliageInteractSoundCompImpl_OnCollisionBeginOverlap, OtherComp) == 0x000010, "Member 'BUS_FoliageInteractSoundCompImpl_OnCollisionBeginOverlap::OtherComp' has a wrong offset!");
//static_assert(offsetof(BUS_FoliageInteractSoundCompImpl_OnCollisionBeginOverlap, OtherBodyIndex) == 0x000018, "Member 'BUS_FoliageInteractSoundCompImpl_OnCollisionBeginOverlap::OtherBodyIndex' has a wrong offset!");
//static_assert(offsetof(BUS_FoliageInteractSoundCompImpl_OnCollisionBeginOverlap, SweepResult) == 0x000020, "Member 'BUS_FoliageInteractSoundCompImpl_OnCollisionBeginOverlap::SweepResult' has a wrong offset!");

// Function b1-Managed.BUS_FoliageInteractSoundCompImpl.OnCollisionEndOverlap
// 0x0108 (0x0108 - 0x0000)
struct BUS_FoliageInteractSoundCompImpl_OnCollisionEndOverlap final
{
public:
	class UPrimitiveComponent*                    OverlappedComponent;                               // 0x0000(0x0008)(ExportObject, Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class AActor*                                 OtherActor;                                        // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UPrimitiveComponent*                    OtherComp;                                         // 0x0010(0x0008)(ExportObject, Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         OtherBodyIndex;                                    // 0x0018(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         bFromSweep : 1;                                    // 0x001C(0x0001)(BitIndex: 0x00, PropSize: 0x0001 (Parm, NoDestructor, HasGetValueTypeHash))
	uint8                                         Pad_1D[0x3];                                       // 0x001D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FHitResult                             SweepResult;                                       // 0x0020(0x00E8)(Parm, IsPlainOldData, NoDestructor)
};
//static_assert(alignof(BUS_FoliageInteractSoundCompImpl_OnCollisionEndOverlap) == 0x000008, "Wrong alignment on BUS_FoliageInteractSoundCompImpl_OnCollisionEndOverlap");
//static_assert(sizeof(BUS_FoliageInteractSoundCompImpl_OnCollisionEndOverlap) == 0x000108, "Wrong size on BUS_FoliageInteractSoundCompImpl_OnCollisionEndOverlap");
//static_assert(offsetof(BUS_FoliageInteractSoundCompImpl_OnCollisionEndOverlap, OverlappedComponent) == 0x000000, "Member 'BUS_FoliageInteractSoundCompImpl_OnCollisionEndOverlap::OverlappedComponent' has a wrong offset!");
//static_assert(offsetof(BUS_FoliageInteractSoundCompImpl_OnCollisionEndOverlap, OtherActor) == 0x000008, "Member 'BUS_FoliageInteractSoundCompImpl_OnCollisionEndOverlap::OtherActor' has a wrong offset!");
//static_assert(offsetof(BUS_FoliageInteractSoundCompImpl_OnCollisionEndOverlap, OtherComp) == 0x000010, "Member 'BUS_FoliageInteractSoundCompImpl_OnCollisionEndOverlap::OtherComp' has a wrong offset!");
//static_assert(offsetof(BUS_FoliageInteractSoundCompImpl_OnCollisionEndOverlap, OtherBodyIndex) == 0x000018, "Member 'BUS_FoliageInteractSoundCompImpl_OnCollisionEndOverlap::OtherBodyIndex' has a wrong offset!");
//static_assert(offsetof(BUS_FoliageInteractSoundCompImpl_OnCollisionEndOverlap, SweepResult) == 0x000020, "Member 'BUS_FoliageInteractSoundCompImpl_OnCollisionEndOverlap::SweepResult' has a wrong offset!");

// Function b1-Managed.BGUNetDefaultEmptyActor.OnConstructionCS
// 0x0060 (0x0060 - 0x0000)
struct BGUNetDefaultEmptyActor_OnConstructionCS final
{
public:
	struct FTransform                             Transform;                                         // 0x0000(0x0060)(ConstParm, Parm, OutParm, ReferenceParm, IsPlainOldData, NoDestructor)
};
//static_assert(alignof(BGUNetDefaultEmptyActor_OnConstructionCS) == 0x000010, "Wrong alignment on BGUNetDefaultEmptyActor_OnConstructionCS");
//static_assert(sizeof(BGUNetDefaultEmptyActor_OnConstructionCS) == 0x000060, "Wrong size on BGUNetDefaultEmptyActor_OnConstructionCS");
//static_assert(offsetof(BGUNetDefaultEmptyActor_OnConstructionCS, Transform) == 0x000000, "Member 'BGUNetDefaultEmptyActor_OnConstructionCS::Transform' has a wrong offset!");

// Function b1-Managed.BGUNetDefaultEmptyActor.OnPossessedCS
// 0x0008 (0x0008 - 0x0000)
struct BGUNetDefaultEmptyActor_OnPossessedCS final
{
public:
	class AController*                            NewController;                                     // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
//static_assert(alignof(BGUNetDefaultEmptyActor_OnPossessedCS) == 0x000008, "Wrong alignment on BGUNetDefaultEmptyActor_OnPossessedCS");
//static_assert(sizeof(BGUNetDefaultEmptyActor_OnPossessedCS) == 0x000008, "Wrong size on BGUNetDefaultEmptyActor_OnPossessedCS");
//static_assert(offsetof(BGUNetDefaultEmptyActor_OnPossessedCS, NewController) == 0x000000, "Member 'BGUNetDefaultEmptyActor_OnPossessedCS::NewController' has a wrong offset!");

// Function b1-Managed.BGUNetDefaultEmptyActor.ReceiveTick
// 0x0004 (0x0004 - 0x0000)
struct BGUNetDefaultEmptyActor_ReceiveTick final
{
public:
	float                                         DeltaSeconds;                                      // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
//static_assert(alignof(BGUNetDefaultEmptyActor_ReceiveTick) == 0x000004, "Wrong alignment on BGUNetDefaultEmptyActor_ReceiveTick");
//static_assert(sizeof(BGUNetDefaultEmptyActor_ReceiveTick) == 0x000004, "Wrong size on BGUNetDefaultEmptyActor_ReceiveTick");
//static_assert(offsetof(BGUNetDefaultEmptyActor_ReceiveTick, DeltaSeconds) == 0x000000, "Member 'BGUNetDefaultEmptyActor_ReceiveTick::DeltaSeconds' has a wrong offset!");

// Function b1-Managed.BUS_PlayerApproachedNotifyComp.PlayerApproached_BeginOverlap
// 0x0108 (0x0108 - 0x0000)
struct BUS_PlayerApproachedNotifyComp_PlayerApproached_BeginOverlap final
{
public:
	class UPrimitiveComponent*                    OverlappedComponent;                               // 0x0000(0x0008)(ExportObject, Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class AActor*                                 OtherActor;                                        // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UPrimitiveComponent*                    OtherComp;                                         // 0x0010(0x0008)(ExportObject, Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         OtherBodyIndex;                                    // 0x0018(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         bFromSweep : 1;                                    // 0x001C(0x0001)(BitIndex: 0x00, PropSize: 0x0001 (Parm, NoDestructor, HasGetValueTypeHash))
	uint8                                         Pad_1D[0x3];                                       // 0x001D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FHitResult                             SweepResult;                                       // 0x0020(0x00E8)(Parm, IsPlainOldData, NoDestructor)
};
//static_assert(alignof(BUS_PlayerApproachedNotifyComp_PlayerApproached_BeginOverlap) == 0x000008, "Wrong alignment on BUS_PlayerApproachedNotifyComp_PlayerApproached_BeginOverlap");
//static_assert(sizeof(BUS_PlayerApproachedNotifyComp_PlayerApproached_BeginOverlap) == 0x000108, "Wrong size on BUS_PlayerApproachedNotifyComp_PlayerApproached_BeginOverlap");
//static_assert(offsetof(BUS_PlayerApproachedNotifyComp_PlayerApproached_BeginOverlap, OverlappedComponent) == 0x000000, "Member 'BUS_PlayerApproachedNotifyComp_PlayerApproached_BeginOverlap::OverlappedComponent' has a wrong offset!");
//static_assert(offsetof(BUS_PlayerApproachedNotifyComp_PlayerApproached_BeginOverlap, OtherActor) == 0x000008, "Member 'BUS_PlayerApproachedNotifyComp_PlayerApproached_BeginOverlap::OtherActor' has a wrong offset!");
//static_assert(offsetof(BUS_PlayerApproachedNotifyComp_PlayerApproached_BeginOverlap, OtherComp) == 0x000010, "Member 'BUS_PlayerApproachedNotifyComp_PlayerApproached_BeginOverlap::OtherComp' has a wrong offset!");
//static_assert(offsetof(BUS_PlayerApproachedNotifyComp_PlayerApproached_BeginOverlap, OtherBodyIndex) == 0x000018, "Member 'BUS_PlayerApproachedNotifyComp_PlayerApproached_BeginOverlap::OtherBodyIndex' has a wrong offset!");
//static_assert(offsetof(BUS_PlayerApproachedNotifyComp_PlayerApproached_BeginOverlap, SweepResult) == 0x000020, "Member 'BUS_PlayerApproachedNotifyComp_PlayerApproached_BeginOverlap::SweepResult' has a wrong offset!");

// Function b1-Managed.BGW_PlatformEventMgr.OnNetworkInitializedChangeCS
// 0x0001 (0x0001 - 0x0000)
struct BGW_PlatformEventMgr_OnNetworkInitializedChangeCS final
{
public:
	uint8                                         bIsNetworkInitialized : 1;                         // 0x0000(0x0001)(BitIndex: 0x00, PropSize: 0x0001 (Parm, NoDestructor, HasGetValueTypeHash))
};
//static_assert(alignof(BGW_PlatformEventMgr_OnNetworkInitializedChangeCS) == 0x000001, "Wrong alignment on BGW_PlatformEventMgr_OnNetworkInitializedChangeCS");
//static_assert(sizeof(BGW_PlatformEventMgr_OnNetworkInitializedChangeCS) == 0x000001, "Wrong size on BGW_PlatformEventMgr_OnNetworkInitializedChangeCS");

// Function b1-Managed.BGW_PlatformEventMgr.OnUserLoginChangeCS
// 0x000C (0x000C - 0x0000)
struct BGW_PlatformEventMgr_OnUserLoginChangeCS final
{
public:
	uint8                                         bIsSignIn : 1;                                     // 0x0000(0x0001)(BitIndex: 0x00, PropSize: 0x0001 (Parm, NoDestructor, HasGetValueTypeHash))
	uint8                                         Pad_1[0x3];                                        // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         PlatformUserId;                                    // 0x0004(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         UserIndex;                                         // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
//static_assert(alignof(BGW_PlatformEventMgr_OnUserLoginChangeCS) == 0x000004, "Wrong alignment on BGW_PlatformEventMgr_OnUserLoginChangeCS");
//static_assert(sizeof(BGW_PlatformEventMgr_OnUserLoginChangeCS) == 0x00000C, "Wrong size on BGW_PlatformEventMgr_OnUserLoginChangeCS");
//static_assert(offsetof(BGW_PlatformEventMgr_OnUserLoginChangeCS, PlatformUserId) == 0x000004, "Member 'BGW_PlatformEventMgr_OnUserLoginChangeCS::PlatformUserId' has a wrong offset!");
//static_assert(offsetof(BGW_PlatformEventMgr_OnUserLoginChangeCS, UserIndex) == 0x000008, "Member 'BGW_PlatformEventMgr_OnUserLoginChangeCS::UserIndex' has a wrong offset!");

// Function b1-Managed.BED_FSMNode_Condition_GI_Loading_OpenSeamlessLevelTravel.GetNodeDescriptionInCS
// 0x0010 (0x0010 - 0x0000)
struct BED_FSMNode_Condition_GI_Loading_OpenSeamlessLevelTravel_GetNodeDescriptionInCS final
{
public:
	class FString                                 ReturnValue;                                       // 0x0000(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash)
};
//static_assert(alignof(BED_FSMNode_Condition_GI_Loading_OpenSeamlessLevelTravel_GetNodeDescriptionInCS) == 0x000008, "Wrong alignment on BED_FSMNode_Condition_GI_Loading_OpenSeamlessLevelTravel_GetNodeDescriptionInCS");
//static_assert(sizeof(BED_FSMNode_Condition_GI_Loading_OpenSeamlessLevelTravel_GetNodeDescriptionInCS) == 0x000010, "Wrong size on BED_FSMNode_Condition_GI_Loading_OpenSeamlessLevelTravel_GetNodeDescriptionInCS");
//static_assert(offsetof(BED_FSMNode_Condition_GI_Loading_OpenSeamlessLevelTravel_GetNodeDescriptionInCS, ReturnValue) == 0x000000, "Member 'BED_FSMNode_Condition_GI_Loading_OpenSeamlessLevelTravel_GetNodeDescriptionInCS::ReturnValue' has a wrong offset!");

// Function b1-Managed.IL2CPPStructPersistTest.PrintStruct
// 0x0018 (0x0018 - 0x0000)
struct IL2CPPStructPersistTest_PrintStruct final
{
public:
	struct FCppTestStructOuter                    Input;                                             // 0x0000(0x0018)(Parm)
};
//static_assert(alignof(IL2CPPStructPersistTest_PrintStruct) == 0x000008, "Wrong alignment on IL2CPPStructPersistTest_PrintStruct");
//static_assert(sizeof(IL2CPPStructPersistTest_PrintStruct) == 0x000018, "Wrong size on IL2CPPStructPersistTest_PrintStruct");
//static_assert(offsetof(IL2CPPStructPersistTest_PrintStruct, Input) == 0x000000, "Member 'IL2CPPStructPersistTest_PrintStruct::Input' has a wrong offset!");

// Function b1-Managed.BED_FSMNode_Condition_GI_Global_IsIgnoreWXLogin.GetNodeDescriptionInCS
// 0x0010 (0x0010 - 0x0000)
struct BED_FSMNode_Condition_GI_Global_IsIgnoreWXLogin_GetNodeDescriptionInCS final
{
public:
	class FString                                 ReturnValue;                                       // 0x0000(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash)
};
//static_assert(alignof(BED_FSMNode_Condition_GI_Global_IsIgnoreWXLogin_GetNodeDescriptionInCS) == 0x000008, "Wrong alignment on BED_FSMNode_Condition_GI_Global_IsIgnoreWXLogin_GetNodeDescriptionInCS");
//static_assert(sizeof(BED_FSMNode_Condition_GI_Global_IsIgnoreWXLogin_GetNodeDescriptionInCS) == 0x000010, "Wrong size on BED_FSMNode_Condition_GI_Global_IsIgnoreWXLogin_GetNodeDescriptionInCS");
//static_assert(offsetof(BED_FSMNode_Condition_GI_Global_IsIgnoreWXLogin_GetNodeDescriptionInCS, ReturnValue) == 0x000000, "Member 'BED_FSMNode_Condition_GI_Global_IsIgnoreWXLogin_GetNodeDescriptionInCS::ReturnValue' has a wrong offset!");

// Function b1-Managed.BGUMotionMatchingDebugComp.TickComponentInCS
// 0x0004 (0x0004 - 0x0000)
struct BGUMotionMatchingDebugComp_TickComponentInCS final
{
public:
	float                                         DeltaTime;                                         // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
//static_assert(alignof(BGUMotionMatchingDebugComp_TickComponentInCS) == 0x000004, "Wrong alignment on BGUMotionMatchingDebugComp_TickComponentInCS");
//static_assert(sizeof(BGUMotionMatchingDebugComp_TickComponentInCS) == 0x000004, "Wrong size on BGUMotionMatchingDebugComp_TickComponentInCS");
//static_assert(offsetof(BGUMotionMatchingDebugComp_TickComponentInCS, DeltaTime) == 0x000000, "Member 'BGUMotionMatchingDebugComp_TickComponentInCS::DeltaTime' has a wrong offset!");

// Function b1-Managed.MovieInstance.OnLoadLevelStreamingFinish
// 0x0008 (0x0008 - 0x0000)
struct MovieInstance_OnLoadLevelStreamingFinish final
{
public:
	int32                                         ActionID;                                          // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Linkage;                                           // 0x0004(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
//static_assert(alignof(MovieInstance_OnLoadLevelStreamingFinish) == 0x000004, "Wrong alignment on MovieInstance_OnLoadLevelStreamingFinish");
//static_assert(sizeof(MovieInstance_OnLoadLevelStreamingFinish) == 0x000008, "Wrong size on MovieInstance_OnLoadLevelStreamingFinish");
//static_assert(offsetof(MovieInstance_OnLoadLevelStreamingFinish, ActionID) == 0x000000, "Member 'MovieInstance_OnLoadLevelStreamingFinish::ActionID' has a wrong offset!");
//static_assert(offsetof(MovieInstance_OnLoadLevelStreamingFinish, Linkage) == 0x000004, "Member 'MovieInstance_OnLoadLevelStreamingFinish::Linkage' has a wrong offset!");

// Function b1-Managed.BED_MovieNode_PerformerAddBuff.GetNodeDescriptionInCS
// 0x0010 (0x0010 - 0x0000)
struct BED_MovieNode_PerformerAddBuff_GetNodeDescriptionInCS final
{
public:
	class FString                                 ReturnValue;                                       // 0x0000(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash)
};
//static_assert(alignof(BED_MovieNode_PerformerAddBuff_GetNodeDescriptionInCS) == 0x000008, "Wrong alignment on BED_MovieNode_PerformerAddBuff_GetNodeDescriptionInCS");
//static_assert(sizeof(BED_MovieNode_PerformerAddBuff_GetNodeDescriptionInCS) == 0x000010, "Wrong size on BED_MovieNode_PerformerAddBuff_GetNodeDescriptionInCS");
//static_assert(offsetof(BED_MovieNode_PerformerAddBuff_GetNodeDescriptionInCS, ReturnValue) == 0x000000, "Member 'BED_MovieNode_PerformerAddBuff_GetNodeDescriptionInCS::ReturnValue' has a wrong offset!");

// Function b1-Managed.InputActionEventReceiver.PostApplicationActivationChanged
// 0x0001 (0x0001 - 0x0000)
struct InputActionEventReceiver_PostApplicationActivationChanged final
{
public:
	uint8                                         IsActive : 1;                                      // 0x0000(0x0001)(BitIndex: 0x00, PropSize: 0x0001 (Parm, NoDestructor, HasGetValueTypeHash))
};
//static_assert(alignof(InputActionEventReceiver_PostApplicationActivationChanged) == 0x000001, "Wrong alignment on InputActionEventReceiver_PostApplicationActivationChanged");
//static_assert(sizeof(InputActionEventReceiver_PostApplicationActivationChanged) == 0x000001, "Wrong size on InputActionEventReceiver_PostApplicationActivationChanged");

// Function b1-Managed.InputActionEventReceiver.GetRichTextInlineIconInfo
// 0x000C (0x000C - 0x0000)
struct InputActionEventReceiver_GetRichTextInlineIconInfo final
{
public:
	int32                                         BasePixelHeight;                                   // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         BaselineOffset;                                    // 0x0004(0x0004)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         ConnectIconOffset;                                 // 0x0008(0x0004)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
//static_assert(alignof(InputActionEventReceiver_GetRichTextInlineIconInfo) == 0x000004, "Wrong alignment on InputActionEventReceiver_GetRichTextInlineIconInfo");
//static_assert(sizeof(InputActionEventReceiver_GetRichTextInlineIconInfo) == 0x00000C, "Wrong size on InputActionEventReceiver_GetRichTextInlineIconInfo");
//static_assert(offsetof(InputActionEventReceiver_GetRichTextInlineIconInfo, BasePixelHeight) == 0x000000, "Member 'InputActionEventReceiver_GetRichTextInlineIconInfo::BasePixelHeight' has a wrong offset!");
//static_assert(offsetof(InputActionEventReceiver_GetRichTextInlineIconInfo, BaselineOffset) == 0x000004, "Member 'InputActionEventReceiver_GetRichTextInlineIconInfo::BaselineOffset' has a wrong offset!");
//static_assert(offsetof(InputActionEventReceiver_GetRichTextInlineIconInfo, ConnectIconOffset) == 0x000008, "Member 'InputActionEventReceiver_GetRichTextInlineIconInfo::ConnectIconOffset' has a wrong offset!");

// Function b1-Managed.InputActionEventReceiver.TryGetTextureInfoByName
// 0x0020 (0x0020 - 0x0000)
struct InputActionEventReceiver_TryGetTextureInfoByName final
{
public:
	class FString                                 Name_0;                                            // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash)
	float                                         Offset;                                            // 0x0010(0x0004)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         BgType;                                            // 0x0014(0x0004)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         ReturnValue : 1;                                   // 0x0018(0x0001)(BitIndex: 0x00, PropSize: 0x0001 (Parm, OutParm, ReturnParm, NoDestructor, HasGetValueTypeHash))
};
//static_assert(alignof(InputActionEventReceiver_TryGetTextureInfoByName) == 0x000008, "Wrong alignment on InputActionEventReceiver_TryGetTextureInfoByName");
//static_assert(sizeof(InputActionEventReceiver_TryGetTextureInfoByName) == 0x000020, "Wrong size on InputActionEventReceiver_TryGetTextureInfoByName");
//static_assert(offsetof(InputActionEventReceiver_TryGetTextureInfoByName, Name_0) == 0x000000, "Member 'InputActionEventReceiver_TryGetTextureInfoByName::Name_0' has a wrong offset!");
//static_assert(offsetof(InputActionEventReceiver_TryGetTextureInfoByName, Offset) == 0x000010, "Member 'InputActionEventReceiver_TryGetTextureInfoByName::Offset' has a wrong offset!");
//static_assert(offsetof(InputActionEventReceiver_TryGetTextureInfoByName, BgType) == 0x000014, "Member 'InputActionEventReceiver_TryGetTextureInfoByName::BgType' has a wrong offset!");

// Function b1-Managed.InputActionEventReceiver.TryGetTextureByAction
// 0x0040 (0x0040 - 0x0000)
struct InputActionEventReceiver_TryGetTextureByAction final
{
public:
	class UInputAction*                           InputAction;                                       // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         Offset;                                            // 0x0008(0x0004)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UTexture2D*                             Texture;                                           // 0x0010(0x0008)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         BgType;                                            // 0x0018(0x0004)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         ChordOffset;                                       // 0x001C(0x0004)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UTexture2D*                             ChordTexture;                                      // 0x0020(0x0008)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UTexture2D*                             ConnectTexture;                                    // 0x0028(0x0008)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UTexture2D*                             NoneTexture;                                       // 0x0030(0x0008)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         ReturnValue : 1;                                   // 0x0038(0x0001)(BitIndex: 0x00, PropSize: 0x0001 (Parm, OutParm, ReturnParm, NoDestructor, HasGetValueTypeHash))
};
//static_assert(alignof(InputActionEventReceiver_TryGetTextureByAction) == 0x000008, "Wrong alignment on InputActionEventReceiver_TryGetTextureByAction");
//static_assert(sizeof(InputActionEventReceiver_TryGetTextureByAction) == 0x000040, "Wrong size on InputActionEventReceiver_TryGetTextureByAction");
//static_assert(offsetof(InputActionEventReceiver_TryGetTextureByAction, InputAction) == 0x000000, "Member 'InputActionEventReceiver_TryGetTextureByAction::InputAction' has a wrong offset!");
//static_assert(offsetof(InputActionEventReceiver_TryGetTextureByAction, Offset) == 0x000008, "Member 'InputActionEventReceiver_TryGetTextureByAction::Offset' has a wrong offset!");
//static_assert(offsetof(InputActionEventReceiver_TryGetTextureByAction, Texture) == 0x000010, "Member 'InputActionEventReceiver_TryGetTextureByAction::Texture' has a wrong offset!");
//static_assert(offsetof(InputActionEventReceiver_TryGetTextureByAction, BgType) == 0x000018, "Member 'InputActionEventReceiver_TryGetTextureByAction::BgType' has a wrong offset!");
//static_assert(offsetof(InputActionEventReceiver_TryGetTextureByAction, ChordOffset) == 0x00001C, "Member 'InputActionEventReceiver_TryGetTextureByAction::ChordOffset' has a wrong offset!");
//static_assert(offsetof(InputActionEventReceiver_TryGetTextureByAction, ChordTexture) == 0x000020, "Member 'InputActionEventReceiver_TryGetTextureByAction::ChordTexture' has a wrong offset!");
//static_assert(offsetof(InputActionEventReceiver_TryGetTextureByAction, ConnectTexture) == 0x000028, "Member 'InputActionEventReceiver_TryGetTextureByAction::ConnectTexture' has a wrong offset!");
//static_assert(offsetof(InputActionEventReceiver_TryGetTextureByAction, NoneTexture) == 0x000030, "Member 'InputActionEventReceiver_TryGetTextureByAction::NoneTexture' has a wrong offset!");

// Function b1-Managed.InputActionEventReceiver.IsInputDebuggerOpen
// 0x0001 (0x0001 - 0x0000)
struct InputActionEventReceiver_IsInputDebuggerOpen final
{
public:
	uint8                                         ReturnValue : 1;                                   // 0x0000(0x0001)(BitIndex: 0x00, PropSize: 0x0001 (Parm, OutParm, ReturnParm, NoDestructor, HasGetValueTypeHash))
};
//static_assert(alignof(InputActionEventReceiver_IsInputDebuggerOpen) == 0x000001, "Wrong alignment on InputActionEventReceiver_IsInputDebuggerOpen");
//static_assert(sizeof(InputActionEventReceiver_IsInputDebuggerOpen) == 0x000001, "Wrong size on InputActionEventReceiver_IsInputDebuggerOpen");

// Function b1-Managed.InputActionEventReceiver.TryGetInlineTexture
// 0x0038 (0x0038 - 0x0000)
struct InputActionEventReceiver_TryGetInlineTexture final
{
public:
	class FString                                 ActionTag;                                         // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash)
	EGSInputRichTextMarkUpType                    MarkUpType;                                        // 0x0010(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_11[0x7];                                       // 0x0011(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UTexture2D*                             InlineTexture;                                     // 0x0018(0x0008)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UTexture2D*                             InlineChordTexture;                                // 0x0020(0x0008)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UTexture2D*                             ConnectTexture;                                    // 0x0028(0x0008)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         ReturnValue : 1;                                   // 0x0030(0x0001)(BitIndex: 0x00, PropSize: 0x0001 (Parm, OutParm, ReturnParm, NoDestructor, HasGetValueTypeHash))
};
//static_assert(alignof(InputActionEventReceiver_TryGetInlineTexture) == 0x000008, "Wrong alignment on InputActionEventReceiver_TryGetInlineTexture");
//static_assert(sizeof(InputActionEventReceiver_TryGetInlineTexture) == 0x000038, "Wrong size on InputActionEventReceiver_TryGetInlineTexture");
//static_assert(offsetof(InputActionEventReceiver_TryGetInlineTexture, ActionTag) == 0x000000, "Member 'InputActionEventReceiver_TryGetInlineTexture::ActionTag' has a wrong offset!");
//static_assert(offsetof(InputActionEventReceiver_TryGetInlineTexture, MarkUpType) == 0x000010, "Member 'InputActionEventReceiver_TryGetInlineTexture::MarkUpType' has a wrong offset!");
//static_assert(offsetof(InputActionEventReceiver_TryGetInlineTexture, InlineTexture) == 0x000018, "Member 'InputActionEventReceiver_TryGetInlineTexture::InlineTexture' has a wrong offset!");
//static_assert(offsetof(InputActionEventReceiver_TryGetInlineTexture, InlineChordTexture) == 0x000020, "Member 'InputActionEventReceiver_TryGetInlineTexture::InlineChordTexture' has a wrong offset!");
//static_assert(offsetof(InputActionEventReceiver_TryGetInlineTexture, ConnectTexture) == 0x000028, "Member 'InputActionEventReceiver_TryGetInlineTexture::ConnectTexture' has a wrong offset!");

// Function b1-Managed.InputActionEventReceiver.InputActionTrigger
// 0x0030 (0x0030 - 0x0000)
struct InputActionEventReceiver_InputActionTrigger final
{
public:
	class FString                                 ActionName;                                        // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash)
	ETriggerEvent                                 TriggerEvent;                                      // 0x0010(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	EInputActionValueType                         InputActionValueType;                              // 0x0011(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_12[0x6];                                       // 0x0012(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                InputActionValue;                                  // 0x0018(0x0018)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
//static_assert(alignof(InputActionEventReceiver_InputActionTrigger) == 0x000008, "Wrong alignment on InputActionEventReceiver_InputActionTrigger");
//static_assert(sizeof(InputActionEventReceiver_InputActionTrigger) == 0x000030, "Wrong size on InputActionEventReceiver_InputActionTrigger");
//static_assert(offsetof(InputActionEventReceiver_InputActionTrigger, ActionName) == 0x000000, "Member 'InputActionEventReceiver_InputActionTrigger::ActionName' has a wrong offset!");
//static_assert(offsetof(InputActionEventReceiver_InputActionTrigger, TriggerEvent) == 0x000010, "Member 'InputActionEventReceiver_InputActionTrigger::TriggerEvent' has a wrong offset!");
//static_assert(offsetof(InputActionEventReceiver_InputActionTrigger, InputActionValueType) == 0x000011, "Member 'InputActionEventReceiver_InputActionTrigger::InputActionValueType' has a wrong offset!");
//static_assert(offsetof(InputActionEventReceiver_InputActionTrigger, InputActionValue) == 0x000018, "Member 'InputActionEventReceiver_InputActionTrigger::InputActionValue' has a wrong offset!");

// Function b1-Managed.InputActionEventReceiver.FetchDebugInfo
// 0x0020 (0x0020 - 0x0000)
struct InputActionEventReceiver_FetchDebugInfo final
{
public:
	TArray<class FString>                         DebugLines;                                        // 0x0000(0x0010)(Parm, OutParm)
	TArray<struct FColor>                         DebugColors;                                       // 0x0010(0x0010)(Parm, OutParm)
};
//static_assert(alignof(InputActionEventReceiver_FetchDebugInfo) == 0x000008, "Wrong alignment on InputActionEventReceiver_FetchDebugInfo");
//static_assert(sizeof(InputActionEventReceiver_FetchDebugInfo) == 0x000020, "Wrong size on InputActionEventReceiver_FetchDebugInfo");
//static_assert(offsetof(InputActionEventReceiver_FetchDebugInfo, DebugLines) == 0x000000, "Member 'InputActionEventReceiver_FetchDebugInfo::DebugLines' has a wrong offset!");
//static_assert(offsetof(InputActionEventReceiver_FetchDebugInfo, DebugColors) == 0x000010, "Member 'InputActionEventReceiver_FetchDebugInfo::DebugColors' has a wrong offset!");

// Function b1-Managed.BGULevelStateFunctionBinder.OnSetLevelsStateFinished
// 0x0028 (0x0028 - 0x0000)
struct BGULevelStateFunctionBinder_OnSetLevelsStateFinished final
{
public:
	class FString                                 LevelKeyword;                                      // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash)
	class FString                                 LevelState;                                        // 0x0010(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash)
	int32                                         OperationID;                                       // 0x0020(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
//static_assert(alignof(BGULevelStateFunctionBinder_OnSetLevelsStateFinished) == 0x000008, "Wrong alignment on BGULevelStateFunctionBinder_OnSetLevelsStateFinished");
//static_assert(sizeof(BGULevelStateFunctionBinder_OnSetLevelsStateFinished) == 0x000028, "Wrong size on BGULevelStateFunctionBinder_OnSetLevelsStateFinished");
//static_assert(offsetof(BGULevelStateFunctionBinder_OnSetLevelsStateFinished, LevelKeyword) == 0x000000, "Member 'BGULevelStateFunctionBinder_OnSetLevelsStateFinished::LevelKeyword' has a wrong offset!");
//static_assert(offsetof(BGULevelStateFunctionBinder_OnSetLevelsStateFinished, LevelState) == 0x000010, "Member 'BGULevelStateFunctionBinder_OnSetLevelsStateFinished::LevelState' has a wrong offset!");
//static_assert(offsetof(BGULevelStateFunctionBinder_OnSetLevelsStateFinished, OperationID) == 0x000020, "Member 'BGULevelStateFunctionBinder_OnSetLevelsStateFinished::OperationID' has a wrong offset!");

// Function b1-Managed.UGSKeyEvent.OnAnalogInputEvent
// 0x0040 (0x0040 - 0x0000)
struct UGSKeyEvent_OnAnalogInputEvent final
{
public:
	struct FAnalogInputEvent                      AnalogInputEvent;                                  // 0x0000(0x0040)(Parm)
};
//static_assert(alignof(UGSKeyEvent_OnAnalogInputEvent) == 0x000008, "Wrong alignment on UGSKeyEvent_OnAnalogInputEvent");
//static_assert(sizeof(UGSKeyEvent_OnAnalogInputEvent) == 0x000040, "Wrong size on UGSKeyEvent_OnAnalogInputEvent");
//static_assert(offsetof(UGSKeyEvent_OnAnalogInputEvent, AnalogInputEvent) == 0x000000, "Member 'UGSKeyEvent_OnAnalogInputEvent::AnalogInputEvent' has a wrong offset!");

// Function b1-Managed.UGSKeyEvent.OnMouseWheelEvent
// 0x0090 (0x0090 - 0x0000)
struct UGSKeyEvent_OnMouseWheelEvent final
{
public:
	struct FPointerEvent                          InWheelEvent;                                      // 0x0000(0x0090)(Parm)
};
//static_assert(alignof(UGSKeyEvent_OnMouseWheelEvent) == 0x000008, "Wrong alignment on UGSKeyEvent_OnMouseWheelEvent");
//static_assert(sizeof(UGSKeyEvent_OnMouseWheelEvent) == 0x000090, "Wrong size on UGSKeyEvent_OnMouseWheelEvent");
//static_assert(offsetof(UGSKeyEvent_OnMouseWheelEvent, InWheelEvent) == 0x000000, "Member 'UGSKeyEvent_OnMouseWheelEvent::InWheelEvent' has a wrong offset!");

// Function b1-Managed.UGSKeyEvent.OnMouseDownEvent
// 0x0090 (0x0090 - 0x0000)
struct UGSKeyEvent_OnMouseDownEvent final
{
public:
	struct FPointerEvent                          InMouseEvent;                                      // 0x0000(0x0090)(Parm)
};
//static_assert(alignof(UGSKeyEvent_OnMouseDownEvent) == 0x000008, "Wrong alignment on UGSKeyEvent_OnMouseDownEvent");
//static_assert(sizeof(UGSKeyEvent_OnMouseDownEvent) == 0x000090, "Wrong size on UGSKeyEvent_OnMouseDownEvent");
//static_assert(offsetof(UGSKeyEvent_OnMouseDownEvent, InMouseEvent) == 0x000000, "Member 'UGSKeyEvent_OnMouseDownEvent::InMouseEvent' has a wrong offset!");

// Function b1-Managed.UGSKeyEvent.OnMouseUpEvent
// 0x0090 (0x0090 - 0x0000)
struct UGSKeyEvent_OnMouseUpEvent final
{
public:
	struct FPointerEvent                          InMouseEvent;                                      // 0x0000(0x0090)(Parm)
};
//static_assert(alignof(UGSKeyEvent_OnMouseUpEvent) == 0x000008, "Wrong alignment on UGSKeyEvent_OnMouseUpEvent");
//static_assert(sizeof(UGSKeyEvent_OnMouseUpEvent) == 0x000090, "Wrong size on UGSKeyEvent_OnMouseUpEvent");
//static_assert(offsetof(UGSKeyEvent_OnMouseUpEvent, InMouseEvent) == 0x000000, "Member 'UGSKeyEvent_OnMouseUpEvent::InMouseEvent' has a wrong offset!");

// Function b1-Managed.UGSKeyEvent.OnKeyDownEvent
// 0x0038 (0x0038 - 0x0000)
struct UGSKeyEvent_OnKeyDownEvent final
{
public:
	struct FKeyEvent                              InKeyEvent;                                        // 0x0000(0x0038)(Parm)
};
//static_assert(alignof(UGSKeyEvent_OnKeyDownEvent) == 0x000008, "Wrong alignment on UGSKeyEvent_OnKeyDownEvent");
//static_assert(sizeof(UGSKeyEvent_OnKeyDownEvent) == 0x000038, "Wrong size on UGSKeyEvent_OnKeyDownEvent");
//static_assert(offsetof(UGSKeyEvent_OnKeyDownEvent, InKeyEvent) == 0x000000, "Member 'UGSKeyEvent_OnKeyDownEvent::InKeyEvent' has a wrong offset!");

// Function b1-Managed.UGSKeyEvent.OnKeyUpEvent
// 0x0038 (0x0038 - 0x0000)
struct UGSKeyEvent_OnKeyUpEvent final
{
public:
	struct FKeyEvent                              InKeyEvent;                                        // 0x0000(0x0038)(Parm)
};
//static_assert(alignof(UGSKeyEvent_OnKeyUpEvent) == 0x000008, "Wrong alignment on UGSKeyEvent_OnKeyUpEvent");
//static_assert(sizeof(UGSKeyEvent_OnKeyUpEvent) == 0x000038, "Wrong size on UGSKeyEvent_OnKeyUpEvent");
//static_assert(offsetof(UGSKeyEvent_OnKeyUpEvent, InKeyEvent) == 0x000000, "Member 'UGSKeyEvent_OnKeyUpEvent::InKeyEvent' has a wrong offset!");

// Function b1-Managed.UGSInputSettingsPreProcEvent.OnMouseButtonDownEvent
// 0x0090 (0x0090 - 0x0000)
struct UGSInputSettingsPreProcEvent_OnMouseButtonDownEvent final
{
public:
	struct FPointerEvent                          InMouseEvent;                                      // 0x0000(0x0090)(Parm)
};
//static_assert(alignof(UGSInputSettingsPreProcEvent_OnMouseButtonDownEvent) == 0x000008, "Wrong alignment on UGSInputSettingsPreProcEvent_OnMouseButtonDownEvent");
//static_assert(sizeof(UGSInputSettingsPreProcEvent_OnMouseButtonDownEvent) == 0x000090, "Wrong size on UGSInputSettingsPreProcEvent_OnMouseButtonDownEvent");
//static_assert(offsetof(UGSInputSettingsPreProcEvent_OnMouseButtonDownEvent, InMouseEvent) == 0x000000, "Member 'UGSInputSettingsPreProcEvent_OnMouseButtonDownEvent::InMouseEvent' has a wrong offset!");

// Function b1-Managed.UGSInputSettingsPreProcEvent.OnMouseButtonUpEvent
// 0x0090 (0x0090 - 0x0000)
struct UGSInputSettingsPreProcEvent_OnMouseButtonUpEvent final
{
public:
	struct FPointerEvent                          InMouseEvent;                                      // 0x0000(0x0090)(Parm)
};
//static_assert(alignof(UGSInputSettingsPreProcEvent_OnMouseButtonUpEvent) == 0x000008, "Wrong alignment on UGSInputSettingsPreProcEvent_OnMouseButtonUpEvent");
//static_assert(sizeof(UGSInputSettingsPreProcEvent_OnMouseButtonUpEvent) == 0x000090, "Wrong size on UGSInputSettingsPreProcEvent_OnMouseButtonUpEvent");
//static_assert(offsetof(UGSInputSettingsPreProcEvent_OnMouseButtonUpEvent, InMouseEvent) == 0x000000, "Member 'UGSInputSettingsPreProcEvent_OnMouseButtonUpEvent::InMouseEvent' has a wrong offset!");

// Function b1-Managed.UGSInputSettingsPreProcEvent.OnKeyDownEvent
// 0x0038 (0x0038 - 0x0000)
struct UGSInputSettingsPreProcEvent_OnKeyDownEvent final
{
public:
	struct FKeyEvent                              InKeyEvent;                                        // 0x0000(0x0038)(Parm)
};
//static_assert(alignof(UGSInputSettingsPreProcEvent_OnKeyDownEvent) == 0x000008, "Wrong alignment on UGSInputSettingsPreProcEvent_OnKeyDownEvent");
//static_assert(sizeof(UGSInputSettingsPreProcEvent_OnKeyDownEvent) == 0x000038, "Wrong size on UGSInputSettingsPreProcEvent_OnKeyDownEvent");
//static_assert(offsetof(UGSInputSettingsPreProcEvent_OnKeyDownEvent, InKeyEvent) == 0x000000, "Member 'UGSInputSettingsPreProcEvent_OnKeyDownEvent::InKeyEvent' has a wrong offset!");

// Function b1-Managed.UGSInputSettingsPreProcEvent.OnKeyUpEvent
// 0x0038 (0x0038 - 0x0000)
struct UGSInputSettingsPreProcEvent_OnKeyUpEvent final
{
public:
	struct FKeyEvent                              InKeyEvent;                                        // 0x0000(0x0038)(Parm)
};
//static_assert(alignof(UGSInputSettingsPreProcEvent_OnKeyUpEvent) == 0x000008, "Wrong alignment on UGSInputSettingsPreProcEvent_OnKeyUpEvent");
//static_assert(sizeof(UGSInputSettingsPreProcEvent_OnKeyUpEvent) == 0x000038, "Wrong size on UGSInputSettingsPreProcEvent_OnKeyUpEvent");
//static_assert(offsetof(UGSInputSettingsPreProcEvent_OnKeyUpEvent, InKeyEvent) == 0x000000, "Member 'UGSInputSettingsPreProcEvent_OnKeyUpEvent::InKeyEvent' has a wrong offset!");

// Function b1-Managed.InputPreProcEvent.OnMouseButtonDoubleClickEvent
// 0x0090 (0x0090 - 0x0000)
struct InputPreProcEvent_OnMouseButtonDoubleClickEvent final
{
public:
	struct FPointerEvent                          InMouseEvent;                                      // 0x0000(0x0090)(Parm)
};
//static_assert(alignof(InputPreProcEvent_OnMouseButtonDoubleClickEvent) == 0x000008, "Wrong alignment on InputPreProcEvent_OnMouseButtonDoubleClickEvent");
//static_assert(sizeof(InputPreProcEvent_OnMouseButtonDoubleClickEvent) == 0x000090, "Wrong size on InputPreProcEvent_OnMouseButtonDoubleClickEvent");
//static_assert(offsetof(InputPreProcEvent_OnMouseButtonDoubleClickEvent, InMouseEvent) == 0x000000, "Member 'InputPreProcEvent_OnMouseButtonDoubleClickEvent::InMouseEvent' has a wrong offset!");

// Function b1-Managed.InputPreProcEvent.OnInputTypeChangeTrigger
// 0x0001 (0x0001 - 0x0000)
struct InputPreProcEvent_OnInputTypeChangeTrigger final
{
public:
	EGSInputType                                  InputType;                                         // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
//static_assert(alignof(InputPreProcEvent_OnInputTypeChangeTrigger) == 0x000001, "Wrong alignment on InputPreProcEvent_OnInputTypeChangeTrigger");
//static_assert(sizeof(InputPreProcEvent_OnInputTypeChangeTrigger) == 0x000001, "Wrong size on InputPreProcEvent_OnInputTypeChangeTrigger");
//static_assert(offsetof(InputPreProcEvent_OnInputTypeChangeTrigger, InputType) == 0x000000, "Member 'InputPreProcEvent_OnInputTypeChangeTrigger::InputType' has a wrong offset!");

// Function b1-Managed.InputPreProcEvent.OnMouseButtonDownEvent
// 0x0090 (0x0090 - 0x0000)
struct InputPreProcEvent_OnMouseButtonDownEvent final
{
public:
	struct FPointerEvent                          InMouseEvent;                                      // 0x0000(0x0090)(Parm)
};
//static_assert(alignof(InputPreProcEvent_OnMouseButtonDownEvent) == 0x000008, "Wrong alignment on InputPreProcEvent_OnMouseButtonDownEvent");
//static_assert(sizeof(InputPreProcEvent_OnMouseButtonDownEvent) == 0x000090, "Wrong size on InputPreProcEvent_OnMouseButtonDownEvent");
//static_assert(offsetof(InputPreProcEvent_OnMouseButtonDownEvent, InMouseEvent) == 0x000000, "Member 'InputPreProcEvent_OnMouseButtonDownEvent::InMouseEvent' has a wrong offset!");

// Function b1-Managed.InputPreProcEvent.OnAnyKeyTriggerEvent
// 0x0018 (0x0018 - 0x0000)
struct InputPreProcEvent_OnAnyKeyTriggerEvent final
{
public:
	struct FKey                                   Key;                                               // 0x0000(0x0018)(Parm, HasGetValueTypeHash)
};
//static_assert(alignof(InputPreProcEvent_OnAnyKeyTriggerEvent) == 0x000008, "Wrong alignment on InputPreProcEvent_OnAnyKeyTriggerEvent");
//static_assert(sizeof(InputPreProcEvent_OnAnyKeyTriggerEvent) == 0x000018, "Wrong size on InputPreProcEvent_OnAnyKeyTriggerEvent");
//static_assert(offsetof(InputPreProcEvent_OnAnyKeyTriggerEvent, Key) == 0x000000, "Member 'InputPreProcEvent_OnAnyKeyTriggerEvent::Key' has a wrong offset!");

// Function b1-Managed.InputPreProcEvent.OnMouseButtonUpEvent
// 0x0090 (0x0090 - 0x0000)
struct InputPreProcEvent_OnMouseButtonUpEvent final
{
public:
	struct FPointerEvent                          InMouseEvent;                                      // 0x0000(0x0090)(Parm)
};
//static_assert(alignof(InputPreProcEvent_OnMouseButtonUpEvent) == 0x000008, "Wrong alignment on InputPreProcEvent_OnMouseButtonUpEvent");
//static_assert(sizeof(InputPreProcEvent_OnMouseButtonUpEvent) == 0x000090, "Wrong size on InputPreProcEvent_OnMouseButtonUpEvent");
//static_assert(offsetof(InputPreProcEvent_OnMouseButtonUpEvent, InMouseEvent) == 0x000000, "Member 'InputPreProcEvent_OnMouseButtonUpEvent::InMouseEvent' has a wrong offset!");

// Function b1-Managed.InputPreProcEvent.OnAnalogInputEvent
// 0x0040 (0x0040 - 0x0000)
struct InputPreProcEvent_OnAnalogInputEvent final
{
public:
	struct FAnalogInputEvent                      InAnalogInputEvent;                                // 0x0000(0x0040)(Parm)
};
//static_assert(alignof(InputPreProcEvent_OnAnalogInputEvent) == 0x000008, "Wrong alignment on InputPreProcEvent_OnAnalogInputEvent");
//static_assert(sizeof(InputPreProcEvent_OnAnalogInputEvent) == 0x000040, "Wrong size on InputPreProcEvent_OnAnalogInputEvent");
//static_assert(offsetof(InputPreProcEvent_OnAnalogInputEvent, InAnalogInputEvent) == 0x000000, "Member 'InputPreProcEvent_OnAnalogInputEvent::InAnalogInputEvent' has a wrong offset!");

// Function b1-Managed.InputPreProcEvent.OnMouseWheelEvent
// 0x0090 (0x0090 - 0x0000)
struct InputPreProcEvent_OnMouseWheelEvent final
{
public:
	struct FPointerEvent                          InMouseEvent;                                      // 0x0000(0x0090)(Parm)
};
//static_assert(alignof(InputPreProcEvent_OnMouseWheelEvent) == 0x000008, "Wrong alignment on InputPreProcEvent_OnMouseWheelEvent");
//static_assert(sizeof(InputPreProcEvent_OnMouseWheelEvent) == 0x000090, "Wrong size on InputPreProcEvent_OnMouseWheelEvent");
//static_assert(offsetof(InputPreProcEvent_OnMouseWheelEvent, InMouseEvent) == 0x000000, "Member 'InputPreProcEvent_OnMouseWheelEvent::InMouseEvent' has a wrong offset!");

// Function b1-Managed.InputPreProcEvent.OnMouseMoveEvent
// 0x0090 (0x0090 - 0x0000)
struct InputPreProcEvent_OnMouseMoveEvent final
{
public:
	struct FPointerEvent                          InMouseEvent;                                      // 0x0000(0x0090)(Parm)
};
//static_assert(alignof(InputPreProcEvent_OnMouseMoveEvent) == 0x000008, "Wrong alignment on InputPreProcEvent_OnMouseMoveEvent");
//static_assert(sizeof(InputPreProcEvent_OnMouseMoveEvent) == 0x000090, "Wrong size on InputPreProcEvent_OnMouseMoveEvent");
//static_assert(offsetof(InputPreProcEvent_OnMouseMoveEvent, InMouseEvent) == 0x000000, "Member 'InputPreProcEvent_OnMouseMoveEvent::InMouseEvent' has a wrong offset!");

// Function b1-Managed.InputPreProcEvent.OnKeyDownEvent
// 0x0038 (0x0038 - 0x0000)
struct InputPreProcEvent_OnKeyDownEvent final
{
public:
	struct FKeyEvent                              InKeyEvent;                                        // 0x0000(0x0038)(Parm)
};
//static_assert(alignof(InputPreProcEvent_OnKeyDownEvent) == 0x000008, "Wrong alignment on InputPreProcEvent_OnKeyDownEvent");
//static_assert(sizeof(InputPreProcEvent_OnKeyDownEvent) == 0x000038, "Wrong size on InputPreProcEvent_OnKeyDownEvent");
//static_assert(offsetof(InputPreProcEvent_OnKeyDownEvent, InKeyEvent) == 0x000000, "Member 'InputPreProcEvent_OnKeyDownEvent::InKeyEvent' has a wrong offset!");

// Function b1-Managed.InputPreProcEvent.OnInputTrigger
// 0x0001 (0x0001 - 0x0000)
struct InputPreProcEvent_OnInputTrigger final
{
public:
	EGSInputType                                  InputType;                                         // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
//static_assert(alignof(InputPreProcEvent_OnInputTrigger) == 0x000001, "Wrong alignment on InputPreProcEvent_OnInputTrigger");
//static_assert(sizeof(InputPreProcEvent_OnInputTrigger) == 0x000001, "Wrong size on InputPreProcEvent_OnInputTrigger");
//static_assert(offsetof(InputPreProcEvent_OnInputTrigger, InputType) == 0x000000, "Member 'InputPreProcEvent_OnInputTrigger::InputType' has a wrong offset!");

// Function b1-Managed.InputPreProcEvent.OnKeyUpEvent
// 0x0038 (0x0038 - 0x0000)
struct InputPreProcEvent_OnKeyUpEvent final
{
public:
	struct FKeyEvent                              InKeyEvent;                                        // 0x0000(0x0038)(Parm)
};
//static_assert(alignof(InputPreProcEvent_OnKeyUpEvent) == 0x000008, "Wrong alignment on InputPreProcEvent_OnKeyUpEvent");
//static_assert(sizeof(InputPreProcEvent_OnKeyUpEvent) == 0x000038, "Wrong size on InputPreProcEvent_OnKeyUpEvent");
//static_assert(offsetof(InputPreProcEvent_OnKeyUpEvent, InKeyEvent) == 0x000000, "Member 'InputPreProcEvent_OnKeyUpEvent::InKeyEvent' has a wrong offset!");

// Function b1-Managed.UGSOverlayCS.OnChildAddToGSOverlayCS
// 0x0008 (0x0008 - 0x0000)
struct UGSOverlayCS_OnChildAddToGSOverlayCS final
{
public:
	class UWidget*                                Widget;                                            // 0x0000(0x0008)(ExportObject, Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
//static_assert(alignof(UGSOverlayCS_OnChildAddToGSOverlayCS) == 0x000008, "Wrong alignment on UGSOverlayCS_OnChildAddToGSOverlayCS");
//static_assert(sizeof(UGSOverlayCS_OnChildAddToGSOverlayCS) == 0x000008, "Wrong size on UGSOverlayCS_OnChildAddToGSOverlayCS");
//static_assert(offsetof(UGSOverlayCS_OnChildAddToGSOverlayCS, Widget) == 0x000000, "Member 'UGSOverlayCS_OnChildAddToGSOverlayCS::Widget' has a wrong offset!");

// Function b1-Managed.BGP_PlayerCameraManagerCS.OnViewTargetChangedCS
// 0x0018 (0x0018 - 0x0000)
struct BGP_PlayerCameraManagerCS_OnViewTargetChangedCS final
{
public:
	class APlayerController*                      PC;                                                // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class AActor*                                 OldViewTarget;                                     // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class AActor*                                 NewViewTarget;                                     // 0x0010(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
//static_assert(alignof(BGP_PlayerCameraManagerCS_OnViewTargetChangedCS) == 0x000008, "Wrong alignment on BGP_PlayerCameraManagerCS_OnViewTargetChangedCS");
//static_assert(sizeof(BGP_PlayerCameraManagerCS_OnViewTargetChangedCS) == 0x000018, "Wrong size on BGP_PlayerCameraManagerCS_OnViewTargetChangedCS");
//static_assert(offsetof(BGP_PlayerCameraManagerCS_OnViewTargetChangedCS, PC) == 0x000000, "Member 'BGP_PlayerCameraManagerCS_OnViewTargetChangedCS::PC' has a wrong offset!");
//static_assert(offsetof(BGP_PlayerCameraManagerCS_OnViewTargetChangedCS, OldViewTarget) == 0x000008, "Member 'BGP_PlayerCameraManagerCS_OnViewTargetChangedCS::OldViewTarget' has a wrong offset!");
//static_assert(offsetof(BGP_PlayerCameraManagerCS_OnViewTargetChangedCS, NewViewTarget) == 0x000010, "Member 'BGP_PlayerCameraManagerCS_OnViewTargetChangedCS::NewViewTarget' has a wrong offset!");

// Function b1-Managed.BGP_PlayerCameraManagerCS.SetViewTargetCS
// 0x0018 (0x0018 - 0x0000)
struct BGP_PlayerCameraManagerCS_SetViewTargetCS final
{
public:
	class AActor*                                 NewViewTarget;                                     // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FViewTargetTransitionParams            TransitionParams;                                  // 0x0008(0x0010)(Parm, NoDestructor)
};
//static_assert(alignof(BGP_PlayerCameraManagerCS_SetViewTargetCS) == 0x000008, "Wrong alignment on BGP_PlayerCameraManagerCS_SetViewTargetCS");
//static_assert(sizeof(BGP_PlayerCameraManagerCS_SetViewTargetCS) == 0x000018, "Wrong size on BGP_PlayerCameraManagerCS_SetViewTargetCS");
//static_assert(offsetof(BGP_PlayerCameraManagerCS_SetViewTargetCS, NewViewTarget) == 0x000000, "Member 'BGP_PlayerCameraManagerCS_SetViewTargetCS::NewViewTarget' has a wrong offset!");
//static_assert(offsetof(BGP_PlayerCameraManagerCS_SetViewTargetCS, TransitionParams) == 0x000008, "Member 'BGP_PlayerCameraManagerCS_SetViewTargetCS::TransitionParams' has a wrong offset!");

// Function b1-Managed.BGP_PlayerCameraManagerCS.UpdateCameraCS
// 0x0004 (0x0004 - 0x0000)
struct BGP_PlayerCameraManagerCS_UpdateCameraCS final
{
public:
	float                                         DeltaTime;                                         // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
//static_assert(alignof(BGP_PlayerCameraManagerCS_UpdateCameraCS) == 0x000004, "Wrong alignment on BGP_PlayerCameraManagerCS_UpdateCameraCS");
//static_assert(sizeof(BGP_PlayerCameraManagerCS_UpdateCameraCS) == 0x000004, "Wrong size on BGP_PlayerCameraManagerCS_UpdateCameraCS");
//static_assert(offsetof(BGP_PlayerCameraManagerCS_UpdateCameraCS, DeltaTime) == 0x000000, "Member 'BGP_PlayerCameraManagerCS_UpdateCameraCS::DeltaTime' has a wrong offset!");

// Function b1-Managed.BGP_PlayerCameraManagerCS.ReceiveEndPlay
// 0x0001 (0x0001 - 0x0000)
struct BGP_PlayerCameraManagerCS_ReceiveEndPlay final
{
public:
	EEndPlayReason                                EndPlayReason;                                     // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
//static_assert(alignof(BGP_PlayerCameraManagerCS_ReceiveEndPlay) == 0x000001, "Wrong alignment on BGP_PlayerCameraManagerCS_ReceiveEndPlay");
//static_assert(sizeof(BGP_PlayerCameraManagerCS_ReceiveEndPlay) == 0x000001, "Wrong size on BGP_PlayerCameraManagerCS_ReceiveEndPlay");
//static_assert(offsetof(BGP_PlayerCameraManagerCS_ReceiveEndPlay, EndPlayReason) == 0x000000, "Member 'BGP_PlayerCameraManagerCS_ReceiveEndPlay::EndPlayReason' has a wrong offset!");

// Function b1-Managed.BANS_GSSetCurveValueToMesh.GSNotifyBeginCS
// 0x0048 (0x0048 - 0x0000)
struct BANS_GSSetCurveValueToMesh_GSNotifyBeginCS final
{
public:
	struct FUStGSNotifyParam                      NotifyParam;                                       // 0x0000(0x0040)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
	float                                         TotalDuration;                                     // 0x0040(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
//static_assert(alignof(BANS_GSSetCurveValueToMesh_GSNotifyBeginCS) == 0x000008, "Wrong alignment on BANS_GSSetCurveValueToMesh_GSNotifyBeginCS");
//static_assert(sizeof(BANS_GSSetCurveValueToMesh_GSNotifyBeginCS) == 0x000048, "Wrong size on BANS_GSSetCurveValueToMesh_GSNotifyBeginCS");
//static_assert(offsetof(BANS_GSSetCurveValueToMesh_GSNotifyBeginCS, NotifyParam) == 0x000000, "Member 'BANS_GSSetCurveValueToMesh_GSNotifyBeginCS::NotifyParam' has a wrong offset!");
//static_assert(offsetof(BANS_GSSetCurveValueToMesh_GSNotifyBeginCS, TotalDuration) == 0x000040, "Member 'BANS_GSSetCurveValueToMesh_GSNotifyBeginCS::TotalDuration' has a wrong offset!");

// Function b1-Managed.BANS_GSSetCurveValueToMesh.GSNotifyEndCS
// 0x0040 (0x0040 - 0x0000)
struct BANS_GSSetCurveValueToMesh_GSNotifyEndCS final
{
public:
	struct FUStGSNotifyParam                      NotifyParam;                                       // 0x0000(0x0040)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
//static_assert(alignof(BANS_GSSetCurveValueToMesh_GSNotifyEndCS) == 0x000008, "Wrong alignment on BANS_GSSetCurveValueToMesh_GSNotifyEndCS");
//static_assert(sizeof(BANS_GSSetCurveValueToMesh_GSNotifyEndCS) == 0x000040, "Wrong size on BANS_GSSetCurveValueToMesh_GSNotifyEndCS");
//static_assert(offsetof(BANS_GSSetCurveValueToMesh_GSNotifyEndCS, NotifyParam) == 0x000000, "Member 'BANS_GSSetCurveValueToMesh_GSNotifyEndCS::NotifyParam' has a wrong offset!");

// Function b1-Managed.BANS_GSSetCurveValueToMesh.GetAnimNSType
// 0x0001 (0x0001 - 0x0000)
struct BANS_GSSetCurveValueToMesh_GetAnimNSType final
{
public:
	EGsEnAnimNS                                   ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
//static_assert(alignof(BANS_GSSetCurveValueToMesh_GetAnimNSType) == 0x000001, "Wrong alignment on BANS_GSSetCurveValueToMesh_GetAnimNSType");
//static_assert(sizeof(BANS_GSSetCurveValueToMesh_GetAnimNSType) == 0x000001, "Wrong size on BANS_GSSetCurveValueToMesh_GetAnimNSType");
//static_assert(offsetof(BANS_GSSetCurveValueToMesh_GetAnimNSType, ReturnValue) == 0x000000, "Member 'BANS_GSSetCurveValueToMesh_GetAnimNSType::ReturnValue' has a wrong offset!");

// Function b1-Managed.BANS_GSSetCurveValueToMesh.FilterByRule
// 0x0030 (0x0030 - 0x0000)
struct BANS_GSSetCurveValueToMesh_FilterByRule final
{
public:
	TArray<class FString>                         LogArr;                                            // 0x0000(0x0010)(Parm, OutParm)
	class USkeletalMesh*                          SKMesh;                                            // 0x0010(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	TArray<class FName>                           WhiteParamNameList;                                // 0x0018(0x0010)(Parm)
	uint8                                         TotallyBelongToDBC : 1;                            // 0x0028(0x0001)(BitIndex: 0x00, PropSize: 0x0001 (Parm, OutParm, NoDestructor, HasGetValueTypeHash))
	uint8                                         BitPad_28_1 : 7;                                   // 0x0028(0x0001)(Fixing Bit-Field Size For New Byte [ Dumper-7 ])
	uint8                                         ReturnValue : 1;                                   // 0x0029(0x0001)(BitIndex: 0x00, PropSize: 0x0001 (Parm, OutParm, ReturnParm, NoDestructor, HasGetValueTypeHash))
};
//static_assert(alignof(BANS_GSSetCurveValueToMesh_FilterByRule) == 0x000008, "Wrong alignment on BANS_GSSetCurveValueToMesh_FilterByRule");
//static_assert(sizeof(BANS_GSSetCurveValueToMesh_FilterByRule) == 0x000030, "Wrong size on BANS_GSSetCurveValueToMesh_FilterByRule");
//static_assert(offsetof(BANS_GSSetCurveValueToMesh_FilterByRule, LogArr) == 0x000000, "Member 'BANS_GSSetCurveValueToMesh_FilterByRule::LogArr' has a wrong offset!");
//static_assert(offsetof(BANS_GSSetCurveValueToMesh_FilterByRule, SKMesh) == 0x000010, "Member 'BANS_GSSetCurveValueToMesh_FilterByRule::SKMesh' has a wrong offset!");
//static_assert(offsetof(BANS_GSSetCurveValueToMesh_FilterByRule, WhiteParamNameList) == 0x000018, "Member 'BANS_GSSetCurveValueToMesh_FilterByRule::WhiteParamNameList' has a wrong offset!");

// Function b1-Managed.BGW_OnlinePresence.OnSetPresenceCompleteCS
// 0x0001 (0x0001 - 0x0000)
struct BGW_OnlinePresence_OnSetPresenceCompleteCS final
{
public:
	uint8                                         bWasSuccessful : 1;                                // 0x0000(0x0001)(BitIndex: 0x00, PropSize: 0x0001 (Parm, NoDestructor, HasGetValueTypeHash))
};
//static_assert(alignof(BGW_OnlinePresence_OnSetPresenceCompleteCS) == 0x000001, "Wrong alignment on BGW_OnlinePresence_OnSetPresenceCompleteCS");
//static_assert(sizeof(BGW_OnlinePresence_OnSetPresenceCompleteCS) == 0x000001, "Wrong size on BGW_OnlinePresence_OnSetPresenceCompleteCS");

// Function b1-Managed.BED_BehaviorNode_CastSkillByScore.GetNodeDescriptionInCS
// 0x0010 (0x0010 - 0x0000)
struct BED_BehaviorNode_CastSkillByScore_GetNodeDescriptionInCS final
{
public:
	class FString                                 ReturnValue;                                       // 0x0000(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash)
};
//static_assert(alignof(BED_BehaviorNode_CastSkillByScore_GetNodeDescriptionInCS) == 0x000008, "Wrong alignment on BED_BehaviorNode_CastSkillByScore_GetNodeDescriptionInCS");
//static_assert(sizeof(BED_BehaviorNode_CastSkillByScore_GetNodeDescriptionInCS) == 0x000010, "Wrong size on BED_BehaviorNode_CastSkillByScore_GetNodeDescriptionInCS");
//static_assert(offsetof(BED_BehaviorNode_CastSkillByScore_GetNodeDescriptionInCS, ReturnValue) == 0x000000, "Member 'BED_BehaviorNode_CastSkillByScore_GetNodeDescriptionInCS::ReturnValue' has a wrong offset!");

// Function b1-Managed.BED_ProcessMachineNode_TemplateBase.GetContextOutputsInCS
// 0x0010 (0x0010 - 0x0000)
struct BED_ProcessMachineNode_TemplateBase_GetContextOutputsInCS final
{
public:
	TArray<class FName>                           ReturnValue;                                       // 0x0000(0x0010)(Parm, OutParm, ReturnParm)
};
//static_assert(alignof(BED_ProcessMachineNode_TemplateBase_GetContextOutputsInCS) == 0x000008, "Wrong alignment on BED_ProcessMachineNode_TemplateBase_GetContextOutputsInCS");
//static_assert(sizeof(BED_ProcessMachineNode_TemplateBase_GetContextOutputsInCS) == 0x000010, "Wrong size on BED_ProcessMachineNode_TemplateBase_GetContextOutputsInCS");
//static_assert(offsetof(BED_ProcessMachineNode_TemplateBase_GetContextOutputsInCS, ReturnValue) == 0x000000, "Member 'BED_ProcessMachineNode_TemplateBase_GetContextOutputsInCS::ReturnValue' has a wrong offset!");

// Function b1-Managed.BED_ProcessMachineNode_ResetGroup.GetContextOutputsInCS
// 0x0010 (0x0010 - 0x0000)
struct BED_ProcessMachineNode_ResetGroup_GetContextOutputsInCS final
{
public:
	TArray<class FName>                           ReturnValue;                                       // 0x0000(0x0010)(Parm, OutParm, ReturnParm)
};
//static_assert(alignof(BED_ProcessMachineNode_ResetGroup_GetContextOutputsInCS) == 0x000008, "Wrong alignment on BED_ProcessMachineNode_ResetGroup_GetContextOutputsInCS");
//static_assert(sizeof(BED_ProcessMachineNode_ResetGroup_GetContextOutputsInCS) == 0x000010, "Wrong size on BED_ProcessMachineNode_ResetGroup_GetContextOutputsInCS");
//static_assert(offsetof(BED_ProcessMachineNode_ResetGroup_GetContextOutputsInCS, ReturnValue) == 0x000000, "Member 'BED_ProcessMachineNode_ResetGroup_GetContextOutputsInCS::ReturnValue' has a wrong offset!");

// Function b1-Managed.BED_ProcessMachineNode_ResetGroup.GetNodeDescriptionInCS
// 0x0010 (0x0010 - 0x0000)
struct BED_ProcessMachineNode_ResetGroup_GetNodeDescriptionInCS final
{
public:
	class FString                                 ReturnValue;                                       // 0x0000(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash)
};
//static_assert(alignof(BED_ProcessMachineNode_ResetGroup_GetNodeDescriptionInCS) == 0x000008, "Wrong alignment on BED_ProcessMachineNode_ResetGroup_GetNodeDescriptionInCS");
//static_assert(sizeof(BED_ProcessMachineNode_ResetGroup_GetNodeDescriptionInCS) == 0x000010, "Wrong size on BED_ProcessMachineNode_ResetGroup_GetNodeDescriptionInCS");
//static_assert(offsetof(BED_ProcessMachineNode_ResetGroup_GetNodeDescriptionInCS, ReturnValue) == 0x000000, "Member 'BED_ProcessMachineNode_ResetGroup_GetNodeDescriptionInCS::ReturnValue' has a wrong offset!");

// Function b1-Managed.BED_BehaviorNode_Log.IsSupportViewType
// 0x0002 (0x0002 - 0x0000)
struct BED_BehaviorNode_Log_IsSupportViewType final
{
public:
	ECalliopeViewType                             InViewType;                                        // 0x0000(0x0001)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         ReturnValue : 1;                                   // 0x0001(0x0001)(BitIndex: 0x00, PropSize: 0x0001 (Parm, OutParm, ReturnParm, NoDestructor, HasGetValueTypeHash))
};
//static_assert(alignof(BED_BehaviorNode_Log_IsSupportViewType) == 0x000001, "Wrong alignment on BED_BehaviorNode_Log_IsSupportViewType");
//static_assert(sizeof(BED_BehaviorNode_Log_IsSupportViewType) == 0x000002, "Wrong size on BED_BehaviorNode_Log_IsSupportViewType");
//static_assert(offsetof(BED_BehaviorNode_Log_IsSupportViewType, InViewType) == 0x000000, "Member 'BED_BehaviorNode_Log_IsSupportViewType::InViewType' has a wrong offset!");

// Function b1-Managed.BED_BehaviorNode_WeightRandom.GetContextOutputsInCS
// 0x0010 (0x0010 - 0x0000)
struct BED_BehaviorNode_WeightRandom_GetContextOutputsInCS final
{
public:
	TArray<class FName>                           ReturnValue;                                       // 0x0000(0x0010)(Parm, OutParm, ReturnParm)
};
//static_assert(alignof(BED_BehaviorNode_WeightRandom_GetContextOutputsInCS) == 0x000008, "Wrong alignment on BED_BehaviorNode_WeightRandom_GetContextOutputsInCS");
//static_assert(sizeof(BED_BehaviorNode_WeightRandom_GetContextOutputsInCS) == 0x000010, "Wrong size on BED_BehaviorNode_WeightRandom_GetContextOutputsInCS");
//static_assert(offsetof(BED_BehaviorNode_WeightRandom_GetContextOutputsInCS, ReturnValue) == 0x000000, "Member 'BED_BehaviorNode_WeightRandom_GetContextOutputsInCS::ReturnValue' has a wrong offset!");

// Function b1-Managed.BED_BehaviorNode_WeightRandom.IsSupportViewType
// 0x0002 (0x0002 - 0x0000)
struct BED_BehaviorNode_WeightRandom_IsSupportViewType final
{
public:
	ECalliopeViewType                             InViewType;                                        // 0x0000(0x0001)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         ReturnValue : 1;                                   // 0x0001(0x0001)(BitIndex: 0x00, PropSize: 0x0001 (Parm, OutParm, ReturnParm, NoDestructor, HasGetValueTypeHash))
};
//static_assert(alignof(BED_BehaviorNode_WeightRandom_IsSupportViewType) == 0x000001, "Wrong alignment on BED_BehaviorNode_WeightRandom_IsSupportViewType");
//static_assert(sizeof(BED_BehaviorNode_WeightRandom_IsSupportViewType) == 0x000002, "Wrong size on BED_BehaviorNode_WeightRandom_IsSupportViewType");
//static_assert(offsetof(BED_BehaviorNode_WeightRandom_IsSupportViewType, InViewType) == 0x000000, "Member 'BED_BehaviorNode_WeightRandom_IsSupportViewType::InViewType' has a wrong offset!");

// Function b1-Managed.BGUCineCameraActor.ReceiveEndPlay
// 0x0001 (0x0001 - 0x0000)
struct BGUCineCameraActor_ReceiveEndPlay final
{
public:
	EEndPlayReason                                EndPlayReason;                                     // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
//static_assert(alignof(BGUCineCameraActor_ReceiveEndPlay) == 0x000001, "Wrong alignment on BGUCineCameraActor_ReceiveEndPlay");
//static_assert(sizeof(BGUCineCameraActor_ReceiveEndPlay) == 0x000001, "Wrong size on BGUCineCameraActor_ReceiveEndPlay");
//static_assert(offsetof(BGUCineCameraActor_ReceiveEndPlay, EndPlayReason) == 0x000000, "Member 'BGUCineCameraActor_ReceiveEndPlay::EndPlayReason' has a wrong offset!");

// Function b1-Managed.BED_DialogueAsset.GetExtraDefaultOutputNodesInBranchGraph
// 0x0018 (0x0018 - 0x0000)
struct BED_DialogueAsset_GetExtraDefaultOutputNodesInBranchGraph final
{
public:
	TArray<class UClass*>                         OutClasses;                                        // 0x0000(0x0010)(Parm, OutParm)
	int32                                         ReturnValue;                                       // 0x0010(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
//static_assert(alignof(BED_DialogueAsset_GetExtraDefaultOutputNodesInBranchGraph) == 0x000008, "Wrong alignment on BED_DialogueAsset_GetExtraDefaultOutputNodesInBranchGraph");
//static_assert(sizeof(BED_DialogueAsset_GetExtraDefaultOutputNodesInBranchGraph) == 0x000018, "Wrong size on BED_DialogueAsset_GetExtraDefaultOutputNodesInBranchGraph");
//static_assert(offsetof(BED_DialogueAsset_GetExtraDefaultOutputNodesInBranchGraph, OutClasses) == 0x000000, "Member 'BED_DialogueAsset_GetExtraDefaultOutputNodesInBranchGraph::OutClasses' has a wrong offset!");
//static_assert(offsetof(BED_DialogueAsset_GetExtraDefaultOutputNodesInBranchGraph, ReturnValue) == 0x000010, "Member 'BED_DialogueAsset_GetExtraDefaultOutputNodesInBranchGraph::ReturnValue' has a wrong offset!");

// Function b1-Managed.BED_DialogueAsset.GetExtraDefaultInputNodesInBranchGraph
// 0x0018 (0x0018 - 0x0000)
struct BED_DialogueAsset_GetExtraDefaultInputNodesInBranchGraph final
{
public:
	TArray<class UClass*>                         OutClasses;                                        // 0x0000(0x0010)(Parm, OutParm)
	int32                                         ReturnValue;                                       // 0x0010(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
//static_assert(alignof(BED_DialogueAsset_GetExtraDefaultInputNodesInBranchGraph) == 0x000008, "Wrong alignment on BED_DialogueAsset_GetExtraDefaultInputNodesInBranchGraph");
//static_assert(sizeof(BED_DialogueAsset_GetExtraDefaultInputNodesInBranchGraph) == 0x000018, "Wrong size on BED_DialogueAsset_GetExtraDefaultInputNodesInBranchGraph");
//static_assert(offsetof(BED_DialogueAsset_GetExtraDefaultInputNodesInBranchGraph, OutClasses) == 0x000000, "Member 'BED_DialogueAsset_GetExtraDefaultInputNodesInBranchGraph::OutClasses' has a wrong offset!");
//static_assert(offsetof(BED_DialogueAsset_GetExtraDefaultInputNodesInBranchGraph, ReturnValue) == 0x000010, "Member 'BED_DialogueAsset_GetExtraDefaultInputNodesInBranchGraph::ReturnValue' has a wrong offset!");

// Function b1-Managed.BED_DialogueAsset.GetRerouteNodeClassInBranchGraph
// 0x0008 (0x0008 - 0x0000)
struct BED_DialogueAsset_GetRerouteNodeClassInBranchGraph final
{
public:
	class UClass*                                 ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
//static_assert(alignof(BED_DialogueAsset_GetRerouteNodeClassInBranchGraph) == 0x000008, "Wrong alignment on BED_DialogueAsset_GetRerouteNodeClassInBranchGraph");
//static_assert(sizeof(BED_DialogueAsset_GetRerouteNodeClassInBranchGraph) == 0x000008, "Wrong size on BED_DialogueAsset_GetRerouteNodeClassInBranchGraph");
//static_assert(offsetof(BED_DialogueAsset_GetRerouteNodeClassInBranchGraph, ReturnValue) == 0x000000, "Member 'BED_DialogueAsset_GetRerouteNodeClassInBranchGraph::ReturnValue' has a wrong offset!");

// Function b1-Managed.BED_DialogueAsset.GetStartNodeClassInBranchGraph
// 0x0008 (0x0008 - 0x0000)
struct BED_DialogueAsset_GetStartNodeClassInBranchGraph final
{
public:
	class UClass*                                 ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
//static_assert(alignof(BED_DialogueAsset_GetStartNodeClassInBranchGraph) == 0x000008, "Wrong alignment on BED_DialogueAsset_GetStartNodeClassInBranchGraph");
//static_assert(sizeof(BED_DialogueAsset_GetStartNodeClassInBranchGraph) == 0x000008, "Wrong size on BED_DialogueAsset_GetStartNodeClassInBranchGraph");
//static_assert(offsetof(BED_DialogueAsset_GetStartNodeClassInBranchGraph, ReturnValue) == 0x000000, "Member 'BED_DialogueAsset_GetStartNodeClassInBranchGraph::ReturnValue' has a wrong offset!");

// Function b1-Managed.BED_DialogueAsset.GetExtraDefaultOutputNodes
// 0x0018 (0x0018 - 0x0000)
struct BED_DialogueAsset_GetExtraDefaultOutputNodes final
{
public:
	TArray<class UClass*>                         OutClasses;                                        // 0x0000(0x0010)(Parm, OutParm)
	int32                                         ReturnValue;                                       // 0x0010(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
//static_assert(alignof(BED_DialogueAsset_GetExtraDefaultOutputNodes) == 0x000008, "Wrong alignment on BED_DialogueAsset_GetExtraDefaultOutputNodes");
//static_assert(sizeof(BED_DialogueAsset_GetExtraDefaultOutputNodes) == 0x000018, "Wrong size on BED_DialogueAsset_GetExtraDefaultOutputNodes");
//static_assert(offsetof(BED_DialogueAsset_GetExtraDefaultOutputNodes, OutClasses) == 0x000000, "Member 'BED_DialogueAsset_GetExtraDefaultOutputNodes::OutClasses' has a wrong offset!");
//static_assert(offsetof(BED_DialogueAsset_GetExtraDefaultOutputNodes, ReturnValue) == 0x000010, "Member 'BED_DialogueAsset_GetExtraDefaultOutputNodes::ReturnValue' has a wrong offset!");

// Function b1-Managed.BED_DialogueAsset.GetExtraDefaultInputNodes
// 0x0018 (0x0018 - 0x0000)
struct BED_DialogueAsset_GetExtraDefaultInputNodes final
{
public:
	TArray<class UClass*>                         OutClasses;                                        // 0x0000(0x0010)(Parm, OutParm)
	int32                                         ReturnValue;                                       // 0x0010(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
//static_assert(alignof(BED_DialogueAsset_GetExtraDefaultInputNodes) == 0x000008, "Wrong alignment on BED_DialogueAsset_GetExtraDefaultInputNodes");
//static_assert(sizeof(BED_DialogueAsset_GetExtraDefaultInputNodes) == 0x000018, "Wrong size on BED_DialogueAsset_GetExtraDefaultInputNodes");
//static_assert(offsetof(BED_DialogueAsset_GetExtraDefaultInputNodes, OutClasses) == 0x000000, "Member 'BED_DialogueAsset_GetExtraDefaultInputNodes::OutClasses' has a wrong offset!");
//static_assert(offsetof(BED_DialogueAsset_GetExtraDefaultInputNodes, ReturnValue) == 0x000010, "Member 'BED_DialogueAsset_GetExtraDefaultInputNodes::ReturnValue' has a wrong offset!");

// Function b1-Managed.BED_DialogueAsset.GetRerouteNodeClass
// 0x0008 (0x0008 - 0x0000)
struct BED_DialogueAsset_GetRerouteNodeClass final
{
public:
	class UClass*                                 ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
//static_assert(alignof(BED_DialogueAsset_GetRerouteNodeClass) == 0x000008, "Wrong alignment on BED_DialogueAsset_GetRerouteNodeClass");
//static_assert(sizeof(BED_DialogueAsset_GetRerouteNodeClass) == 0x000008, "Wrong size on BED_DialogueAsset_GetRerouteNodeClass");
//static_assert(offsetof(BED_DialogueAsset_GetRerouteNodeClass, ReturnValue) == 0x000000, "Member 'BED_DialogueAsset_GetRerouteNodeClass::ReturnValue' has a wrong offset!");

// Function b1-Managed.BED_DialogueAsset.GetStartNodeClass
// 0x0008 (0x0008 - 0x0000)
struct BED_DialogueAsset_GetStartNodeClass final
{
public:
	class UClass*                                 ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
//static_assert(alignof(BED_DialogueAsset_GetStartNodeClass) == 0x000008, "Wrong alignment on BED_DialogueAsset_GetStartNodeClass");
//static_assert(sizeof(BED_DialogueAsset_GetStartNodeClass) == 0x000008, "Wrong size on BED_DialogueAsset_GetStartNodeClass");
//static_assert(offsetof(BED_DialogueAsset_GetStartNodeClass, ReturnValue) == 0x000000, "Member 'BED_DialogueAsset_GetStartNodeClass::ReturnValue' has a wrong offset!");

// Function b1-Managed.BED_DialogueAsset.GetViewType
// 0x0001 (0x0001 - 0x0000)
struct BED_DialogueAsset_GetViewType final
{
public:
	ECalliopeViewType                             ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
//static_assert(alignof(BED_DialogueAsset_GetViewType) == 0x000001, "Wrong alignment on BED_DialogueAsset_GetViewType");
//static_assert(sizeof(BED_DialogueAsset_GetViewType) == 0x000001, "Wrong size on BED_DialogueAsset_GetViewType");
//static_assert(offsetof(BED_DialogueAsset_GetViewType, ReturnValue) == 0x000000, "Member 'BED_DialogueAsset_GetViewType::ReturnValue' has a wrong offset!");

// Function b1-Managed.BED_FSMNode_GI_Global_SubG_GI_Loading_TravelLevel.PostPropertyChanged
// 0x0020 (0x0020 - 0x0000)
struct BED_FSMNode_GI_Global_SubG_GI_Loading_TravelLevel_PostPropertyChanged final
{
public:
	class FString                                 MemberName;                                        // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash)
	class FString                                 PropertyName;                                      // 0x0010(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash)
};
//static_assert(alignof(BED_FSMNode_GI_Global_SubG_GI_Loading_TravelLevel_PostPropertyChanged) == 0x000008, "Wrong alignment on BED_FSMNode_GI_Global_SubG_GI_Loading_TravelLevel_PostPropertyChanged");
//static_assert(sizeof(BED_FSMNode_GI_Global_SubG_GI_Loading_TravelLevel_PostPropertyChanged) == 0x000020, "Wrong size on BED_FSMNode_GI_Global_SubG_GI_Loading_TravelLevel_PostPropertyChanged");
//static_assert(offsetof(BED_FSMNode_GI_Global_SubG_GI_Loading_TravelLevel_PostPropertyChanged, MemberName) == 0x000000, "Member 'BED_FSMNode_GI_Global_SubG_GI_Loading_TravelLevel_PostPropertyChanged::MemberName' has a wrong offset!");
//static_assert(offsetof(BED_FSMNode_GI_Global_SubG_GI_Loading_TravelLevel_PostPropertyChanged, PropertyName) == 0x000010, "Member 'BED_FSMNode_GI_Global_SubG_GI_Loading_TravelLevel_PostPropertyChanged::PropertyName' has a wrong offset!");

// Function b1-Managed.BED_FSMNode_GI_Global_SubG_GI_Loading_TravelLevel.GetNodeDescriptionInCS
// 0x0010 (0x0010 - 0x0000)
struct BED_FSMNode_GI_Global_SubG_GI_Loading_TravelLevel_GetNodeDescriptionInCS final
{
public:
	class FString                                 ReturnValue;                                       // 0x0000(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash)
};
//static_assert(alignof(BED_FSMNode_GI_Global_SubG_GI_Loading_TravelLevel_GetNodeDescriptionInCS) == 0x000008, "Wrong alignment on BED_FSMNode_GI_Global_SubG_GI_Loading_TravelLevel_GetNodeDescriptionInCS");
//static_assert(sizeof(BED_FSMNode_GI_Global_SubG_GI_Loading_TravelLevel_GetNodeDescriptionInCS) == 0x000010, "Wrong size on BED_FSMNode_GI_Global_SubG_GI_Loading_TravelLevel_GetNodeDescriptionInCS");
//static_assert(offsetof(BED_FSMNode_GI_Global_SubG_GI_Loading_TravelLevel_GetNodeDescriptionInCS, ReturnValue) == 0x000000, "Member 'BED_FSMNode_GI_Global_SubG_GI_Loading_TravelLevel_GetNodeDescriptionInCS::ReturnValue' has a wrong offset!");

// Function b1-Managed.BED_ProcessStateNode_LogicalAnd.CanUserAddInputInCS
// 0x0001 (0x0001 - 0x0000)
struct BED_ProcessStateNode_LogicalAnd_CanUserAddInputInCS final
{
public:
	uint8                                         ReturnValue : 1;                                   // 0x0000(0x0001)(BitIndex: 0x00, PropSize: 0x0001 (Parm, OutParm, ReturnParm, NoDestructor, HasGetValueTypeHash))
};
//static_assert(alignof(BED_ProcessStateNode_LogicalAnd_CanUserAddInputInCS) == 0x000001, "Wrong alignment on BED_ProcessStateNode_LogicalAnd_CanUserAddInputInCS");
//static_assert(sizeof(BED_ProcessStateNode_LogicalAnd_CanUserAddInputInCS) == 0x000001, "Wrong size on BED_ProcessStateNode_LogicalAnd_CanUserAddInputInCS");

// Function b1-Managed.BED_FSMNode_Condition_GI_Loading_BattleLevelTravelNeedWaitCameraBlend.GetNodeDescriptionInCS
// 0x0010 (0x0010 - 0x0000)
struct BED_FSMNode_Condition_GI_Loading_BattleLevelTravelNeedWaitCameraBlend_GetNodeDescriptionInCS final
{
public:
	class FString                                 ReturnValue;                                       // 0x0000(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash)
};
//static_assert(alignof(BED_FSMNode_Condition_GI_Loading_BattleLevelTravelNeedWaitCameraBlend_GetNodeDescriptionInCS) == 0x000008, "Wrong alignment on BED_FSMNode_Condition_GI_Loading_BattleLevelTravelNeedWaitCameraBlend_GetNodeDescriptionInCS");
//static_assert(sizeof(BED_FSMNode_Condition_GI_Loading_BattleLevelTravelNeedWaitCameraBlend_GetNodeDescriptionInCS) == 0x000010, "Wrong size on BED_FSMNode_Condition_GI_Loading_BattleLevelTravelNeedWaitCameraBlend_GetNodeDescriptionInCS");
//static_assert(offsetof(BED_FSMNode_Condition_GI_Loading_BattleLevelTravelNeedWaitCameraBlend_GetNodeDescriptionInCS, ReturnValue) == 0x000000, "Member 'BED_FSMNode_Condition_GI_Loading_BattleLevelTravelNeedWaitCameraBlend_GetNodeDescriptionInCS::ReturnValue' has a wrong offset!");

// Function b1-Managed.BED_FSMNode_Condition_GI_Loading_CheckGlobalTravelMode.GetNodeDescriptionInCS
// 0x0010 (0x0010 - 0x0000)
struct BED_FSMNode_Condition_GI_Loading_CheckGlobalTravelMode_GetNodeDescriptionInCS final
{
public:
	class FString                                 ReturnValue;                                       // 0x0000(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash)
};
//static_assert(alignof(BED_FSMNode_Condition_GI_Loading_CheckGlobalTravelMode_GetNodeDescriptionInCS) == 0x000008, "Wrong alignment on BED_FSMNode_Condition_GI_Loading_CheckGlobalTravelMode_GetNodeDescriptionInCS");
//static_assert(sizeof(BED_FSMNode_Condition_GI_Loading_CheckGlobalTravelMode_GetNodeDescriptionInCS) == 0x000010, "Wrong size on BED_FSMNode_Condition_GI_Loading_CheckGlobalTravelMode_GetNodeDescriptionInCS");
//static_assert(offsetof(BED_FSMNode_Condition_GI_Loading_CheckGlobalTravelMode_GetNodeDescriptionInCS, ReturnValue) == 0x000000, "Member 'BED_FSMNode_Condition_GI_Loading_CheckGlobalTravelMode_GetNodeDescriptionInCS::ReturnValue' has a wrong offset!");

// Function b1-Managed.BED_FSMNode_Condition_GI_Loading_CheckGMFlagsSupportUnknownTravel.GetNodeDescriptionInCS
// 0x0010 (0x0010 - 0x0000)
struct BED_FSMNode_Condition_GI_Loading_CheckGMFlagsSupportUnknownTravel_GetNodeDescriptionInCS final
{
public:
	class FString                                 ReturnValue;                                       // 0x0000(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash)
};
//static_assert(alignof(BED_FSMNode_Condition_GI_Loading_CheckGMFlagsSupportUnknownTravel_GetNodeDescriptionInCS) == 0x000008, "Wrong alignment on BED_FSMNode_Condition_GI_Loading_CheckGMFlagsSupportUnknownTravel_GetNodeDescriptionInCS");
//static_assert(sizeof(BED_FSMNode_Condition_GI_Loading_CheckGMFlagsSupportUnknownTravel_GetNodeDescriptionInCS) == 0x000010, "Wrong size on BED_FSMNode_Condition_GI_Loading_CheckGMFlagsSupportUnknownTravel_GetNodeDescriptionInCS");
//static_assert(offsetof(BED_FSMNode_Condition_GI_Loading_CheckGMFlagsSupportUnknownTravel_GetNodeDescriptionInCS, ReturnValue) == 0x000000, "Member 'BED_FSMNode_Condition_GI_Loading_CheckGMFlagsSupportUnknownTravel_GetNodeDescriptionInCS::ReturnValue' has a wrong offset!");

// Function b1-Managed.BED_FSMNode_Condition_GI_Loading_DetermineTravelLevelByHandlingArchive.GetNodeDescriptionInCS
// 0x0010 (0x0010 - 0x0000)
struct BED_FSMNode_Condition_GI_Loading_DetermineTravelLevelByHandlingArchive_GetNodeDescriptionInCS final
{
public:
	class FString                                 ReturnValue;                                       // 0x0000(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash)
};
//static_assert(alignof(BED_FSMNode_Condition_GI_Loading_DetermineTravelLevelByHandlingArchive_GetNodeDescriptionInCS) == 0x000008, "Wrong alignment on BED_FSMNode_Condition_GI_Loading_DetermineTravelLevelByHandlingArchive_GetNodeDescriptionInCS");
//static_assert(sizeof(BED_FSMNode_Condition_GI_Loading_DetermineTravelLevelByHandlingArchive_GetNodeDescriptionInCS) == 0x000010, "Wrong size on BED_FSMNode_Condition_GI_Loading_DetermineTravelLevelByHandlingArchive_GetNodeDescriptionInCS");
//static_assert(offsetof(BED_FSMNode_Condition_GI_Loading_DetermineTravelLevelByHandlingArchive_GetNodeDescriptionInCS, ReturnValue) == 0x000000, "Member 'BED_FSMNode_Condition_GI_Loading_DetermineTravelLevelByHandlingArchive_GetNodeDescriptionInCS::ReturnValue' has a wrong offset!");

// Function b1-Managed.BED_FSMNode_Condition_GI_Loading_HasArchive.GetNodeDescriptionInCS
// 0x0010 (0x0010 - 0x0000)
struct BED_FSMNode_Condition_GI_Loading_HasArchive_GetNodeDescriptionInCS final
{
public:
	class FString                                 ReturnValue;                                       // 0x0000(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash)
};
//static_assert(alignof(BED_FSMNode_Condition_GI_Loading_HasArchive_GetNodeDescriptionInCS) == 0x000008, "Wrong alignment on BED_FSMNode_Condition_GI_Loading_HasArchive_GetNodeDescriptionInCS");
//static_assert(sizeof(BED_FSMNode_Condition_GI_Loading_HasArchive_GetNodeDescriptionInCS) == 0x000010, "Wrong size on BED_FSMNode_Condition_GI_Loading_HasArchive_GetNodeDescriptionInCS");
//static_assert(offsetof(BED_FSMNode_Condition_GI_Loading_HasArchive_GetNodeDescriptionInCS, ReturnValue) == 0x000000, "Member 'BED_FSMNode_Condition_GI_Loading_HasArchive_GetNodeDescriptionInCS::ReturnValue' has a wrong offset!");

// Function b1-Managed.BED_FSMNode_Condition_GI_Loading_HasArchiveIdInContext.GetNodeDescriptionInCS
// 0x0010 (0x0010 - 0x0000)
struct BED_FSMNode_Condition_GI_Loading_HasArchiveIdInContext_GetNodeDescriptionInCS final
{
public:
	class FString                                 ReturnValue;                                       // 0x0000(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash)
};
//static_assert(alignof(BED_FSMNode_Condition_GI_Loading_HasArchiveIdInContext_GetNodeDescriptionInCS) == 0x000008, "Wrong alignment on BED_FSMNode_Condition_GI_Loading_HasArchiveIdInContext_GetNodeDescriptionInCS");
//static_assert(sizeof(BED_FSMNode_Condition_GI_Loading_HasArchiveIdInContext_GetNodeDescriptionInCS) == 0x000010, "Wrong size on BED_FSMNode_Condition_GI_Loading_HasArchiveIdInContext_GetNodeDescriptionInCS");
//static_assert(offsetof(BED_FSMNode_Condition_GI_Loading_HasArchiveIdInContext_GetNodeDescriptionInCS, ReturnValue) == 0x000000, "Member 'BED_FSMNode_Condition_GI_Loading_HasArchiveIdInContext_GetNodeDescriptionInCS::ReturnValue' has a wrong offset!");

// Function b1-Managed.TriggerCompFunctionBinder.OnCollisionEndOverlap
// 0x0020 (0x0020 - 0x0000)
struct TriggerCompFunctionBinder_OnCollisionEndOverlap final
{
public:
	class UPrimitiveComponent*                    OverlappedComponent;                               // 0x0000(0x0008)(ExportObject, Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class AActor*                                 OtherActor;                                        // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UPrimitiveComponent*                    OtherComp;                                         // 0x0010(0x0008)(ExportObject, Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         OtherBodyIndex;                                    // 0x0018(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
//static_assert(alignof(TriggerCompFunctionBinder_OnCollisionEndOverlap) == 0x000008, "Wrong alignment on TriggerCompFunctionBinder_OnCollisionEndOverlap");
//static_assert(sizeof(TriggerCompFunctionBinder_OnCollisionEndOverlap) == 0x000020, "Wrong size on TriggerCompFunctionBinder_OnCollisionEndOverlap");
//static_assert(offsetof(TriggerCompFunctionBinder_OnCollisionEndOverlap, OverlappedComponent) == 0x000000, "Member 'TriggerCompFunctionBinder_OnCollisionEndOverlap::OverlappedComponent' has a wrong offset!");
//static_assert(offsetof(TriggerCompFunctionBinder_OnCollisionEndOverlap, OtherActor) == 0x000008, "Member 'TriggerCompFunctionBinder_OnCollisionEndOverlap::OtherActor' has a wrong offset!");
//static_assert(offsetof(TriggerCompFunctionBinder_OnCollisionEndOverlap, OtherComp) == 0x000010, "Member 'TriggerCompFunctionBinder_OnCollisionEndOverlap::OtherComp' has a wrong offset!");
//static_assert(offsetof(TriggerCompFunctionBinder_OnCollisionEndOverlap, OtherBodyIndex) == 0x000018, "Member 'TriggerCompFunctionBinder_OnCollisionEndOverlap::OtherBodyIndex' has a wrong offset!");

// Function b1-Managed.TriggerCompFunctionBinder.OnCollisionOverlap
// 0x0108 (0x0108 - 0x0000)
struct TriggerCompFunctionBinder_OnCollisionOverlap final
{
public:
	class UPrimitiveComponent*                    OverlappedComponent;                               // 0x0000(0x0008)(ExportObject, Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class AActor*                                 OtherActor;                                        // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UPrimitiveComponent*                    OtherComp;                                         // 0x0010(0x0008)(ExportObject, Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         OtherBodyIndex;                                    // 0x0018(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         bFromSweep : 1;                                    // 0x001C(0x0001)(BitIndex: 0x00, PropSize: 0x0001 (Parm, NoDestructor, HasGetValueTypeHash))
	uint8                                         Pad_1D[0x3];                                       // 0x001D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FHitResult                             SweepResult;                                       // 0x0020(0x00E8)(Parm, IsPlainOldData, NoDestructor)
};
//static_assert(alignof(TriggerCompFunctionBinder_OnCollisionOverlap) == 0x000008, "Wrong alignment on TriggerCompFunctionBinder_OnCollisionOverlap");
//static_assert(sizeof(TriggerCompFunctionBinder_OnCollisionOverlap) == 0x000108, "Wrong size on TriggerCompFunctionBinder_OnCollisionOverlap");
//static_assert(offsetof(TriggerCompFunctionBinder_OnCollisionOverlap, OverlappedComponent) == 0x000000, "Member 'TriggerCompFunctionBinder_OnCollisionOverlap::OverlappedComponent' has a wrong offset!");
//static_assert(offsetof(TriggerCompFunctionBinder_OnCollisionOverlap, OtherActor) == 0x000008, "Member 'TriggerCompFunctionBinder_OnCollisionOverlap::OtherActor' has a wrong offset!");
//static_assert(offsetof(TriggerCompFunctionBinder_OnCollisionOverlap, OtherComp) == 0x000010, "Member 'TriggerCompFunctionBinder_OnCollisionOverlap::OtherComp' has a wrong offset!");
//static_assert(offsetof(TriggerCompFunctionBinder_OnCollisionOverlap, OtherBodyIndex) == 0x000018, "Member 'TriggerCompFunctionBinder_OnCollisionOverlap::OtherBodyIndex' has a wrong offset!");
//static_assert(offsetof(TriggerCompFunctionBinder_OnCollisionOverlap, SweepResult) == 0x000020, "Member 'TriggerCompFunctionBinder_OnCollisionOverlap::SweepResult' has a wrong offset!");

// Function b1-Managed.BED_FSMNode_Condition_GI_Loading_IsEnableLoadingUserInput.GetNodeDescriptionInCS
// 0x0010 (0x0010 - 0x0000)
struct BED_FSMNode_Condition_GI_Loading_IsEnableLoadingUserInput_GetNodeDescriptionInCS final
{
public:
	class FString                                 ReturnValue;                                       // 0x0000(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash)
};
//static_assert(alignof(BED_FSMNode_Condition_GI_Loading_IsEnableLoadingUserInput_GetNodeDescriptionInCS) == 0x000008, "Wrong alignment on BED_FSMNode_Condition_GI_Loading_IsEnableLoadingUserInput_GetNodeDescriptionInCS");
//static_assert(sizeof(BED_FSMNode_Condition_GI_Loading_IsEnableLoadingUserInput_GetNodeDescriptionInCS) == 0x000010, "Wrong size on BED_FSMNode_Condition_GI_Loading_IsEnableLoadingUserInput_GetNodeDescriptionInCS");
//static_assert(offsetof(BED_FSMNode_Condition_GI_Loading_IsEnableLoadingUserInput_GetNodeDescriptionInCS, ReturnValue) == 0x000000, "Member 'BED_FSMNode_Condition_GI_Loading_IsEnableLoadingUserInput_GetNodeDescriptionInCS::ReturnValue' has a wrong offset!");

// Function b1-Managed.BED_FSMNode_Condition_GI_Loading_IsFirstStartGame.GetNodeDescriptionInCS
// 0x0010 (0x0010 - 0x0000)
struct BED_FSMNode_Condition_GI_Loading_IsFirstStartGame_GetNodeDescriptionInCS final
{
public:
	class FString                                 ReturnValue;                                       // 0x0000(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash)
};
//static_assert(alignof(BED_FSMNode_Condition_GI_Loading_IsFirstStartGame_GetNodeDescriptionInCS) == 0x000008, "Wrong alignment on BED_FSMNode_Condition_GI_Loading_IsFirstStartGame_GetNodeDescriptionInCS");
//static_assert(sizeof(BED_FSMNode_Condition_GI_Loading_IsFirstStartGame_GetNodeDescriptionInCS) == 0x000010, "Wrong size on BED_FSMNode_Condition_GI_Loading_IsFirstStartGame_GetNodeDescriptionInCS");
//static_assert(offsetof(BED_FSMNode_Condition_GI_Loading_IsFirstStartGame_GetNodeDescriptionInCS, ReturnValue) == 0x000000, "Member 'BED_FSMNode_Condition_GI_Loading_IsFirstStartGame_GetNodeDescriptionInCS::ReturnValue' has a wrong offset!");

// Function b1-Managed.BED_FSMNode_Condition_GI_Loading_IsInBattleLevel.GetNodeDescriptionInCS
// 0x0010 (0x0010 - 0x0000)
struct BED_FSMNode_Condition_GI_Loading_IsInBattleLevel_GetNodeDescriptionInCS final
{
public:
	class FString                                 ReturnValue;                                       // 0x0000(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash)
};
//static_assert(alignof(BED_FSMNode_Condition_GI_Loading_IsInBattleLevel_GetNodeDescriptionInCS) == 0x000008, "Wrong alignment on BED_FSMNode_Condition_GI_Loading_IsInBattleLevel_GetNodeDescriptionInCS");
//static_assert(sizeof(BED_FSMNode_Condition_GI_Loading_IsInBattleLevel_GetNodeDescriptionInCS) == 0x000010, "Wrong size on BED_FSMNode_Condition_GI_Loading_IsInBattleLevel_GetNodeDescriptionInCS");
//static_assert(offsetof(BED_FSMNode_Condition_GI_Loading_IsInBattleLevel_GetNodeDescriptionInCS, ReturnValue) == 0x000000, "Member 'BED_FSMNode_Condition_GI_Loading_IsInBattleLevel_GetNodeDescriptionInCS::ReturnValue' has a wrong offset!");

// Function b1-Managed.BED_FSMNode_Condition_GI_Loading_IsInDedicateServer.GetNodeDescriptionInCS
// 0x0010 (0x0010 - 0x0000)
struct BED_FSMNode_Condition_GI_Loading_IsInDedicateServer_GetNodeDescriptionInCS final
{
public:
	class FString                                 ReturnValue;                                       // 0x0000(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash)
};
//static_assert(alignof(BED_FSMNode_Condition_GI_Loading_IsInDedicateServer_GetNodeDescriptionInCS) == 0x000008, "Wrong alignment on BED_FSMNode_Condition_GI_Loading_IsInDedicateServer_GetNodeDescriptionInCS");
//static_assert(sizeof(BED_FSMNode_Condition_GI_Loading_IsInDedicateServer_GetNodeDescriptionInCS) == 0x000010, "Wrong size on BED_FSMNode_Condition_GI_Loading_IsInDedicateServer_GetNodeDescriptionInCS");
//static_assert(offsetof(BED_FSMNode_Condition_GI_Loading_IsInDedicateServer_GetNodeDescriptionInCS, ReturnValue) == 0x000000, "Member 'BED_FSMNode_Condition_GI_Loading_IsInDedicateServer_GetNodeDescriptionInCS::ReturnValue' has a wrong offset!");

// Function b1-Managed.BED_FSMNode_Condition_GI_Loading_IsInDefaultBattleLevel.GetNodeDescriptionInCS
// 0x0010 (0x0010 - 0x0000)
struct BED_FSMNode_Condition_GI_Loading_IsInDefaultBattleLevel_GetNodeDescriptionInCS final
{
public:
	class FString                                 ReturnValue;                                       // 0x0000(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash)
};
//static_assert(alignof(BED_FSMNode_Condition_GI_Loading_IsInDefaultBattleLevel_GetNodeDescriptionInCS) == 0x000008, "Wrong alignment on BED_FSMNode_Condition_GI_Loading_IsInDefaultBattleLevel_GetNodeDescriptionInCS");
//static_assert(sizeof(BED_FSMNode_Condition_GI_Loading_IsInDefaultBattleLevel_GetNodeDescriptionInCS) == 0x000010, "Wrong size on BED_FSMNode_Condition_GI_Loading_IsInDefaultBattleLevel_GetNodeDescriptionInCS");
//static_assert(offsetof(BED_FSMNode_Condition_GI_Loading_IsInDefaultBattleLevel_GetNodeDescriptionInCS, ReturnValue) == 0x000000, "Member 'BED_FSMNode_Condition_GI_Loading_IsInDefaultBattleLevel_GetNodeDescriptionInCS::ReturnValue' has a wrong offset!");

// Function b1-Managed.BED_FSMNode_Condition_GI_Loading_IsInListenServer.GetNodeDescriptionInCS
// 0x0010 (0x0010 - 0x0000)
struct BED_FSMNode_Condition_GI_Loading_IsInListenServer_GetNodeDescriptionInCS final
{
public:
	class FString                                 ReturnValue;                                       // 0x0000(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash)
};
//static_assert(alignof(BED_FSMNode_Condition_GI_Loading_IsInListenServer_GetNodeDescriptionInCS) == 0x000008, "Wrong alignment on BED_FSMNode_Condition_GI_Loading_IsInListenServer_GetNodeDescriptionInCS");
//static_assert(sizeof(BED_FSMNode_Condition_GI_Loading_IsInListenServer_GetNodeDescriptionInCS) == 0x000010, "Wrong size on BED_FSMNode_Condition_GI_Loading_IsInListenServer_GetNodeDescriptionInCS");
//static_assert(offsetof(BED_FSMNode_Condition_GI_Loading_IsInListenServer_GetNodeDescriptionInCS, ReturnValue) == 0x000000, "Member 'BED_FSMNode_Condition_GI_Loading_IsInListenServer_GetNodeDescriptionInCS::ReturnValue' has a wrong offset!");

// Function b1-Managed.BED_QuestNode_SetPlayerRebirthPoint.GetNodeDescriptionInCS
// 0x0010 (0x0010 - 0x0000)
struct BED_QuestNode_SetPlayerRebirthPoint_GetNodeDescriptionInCS final
{
public:
	class FString                                 ReturnValue;                                       // 0x0000(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash)
};
//static_assert(alignof(BED_QuestNode_SetPlayerRebirthPoint_GetNodeDescriptionInCS) == 0x000008, "Wrong alignment on BED_QuestNode_SetPlayerRebirthPoint_GetNodeDescriptionInCS");
//static_assert(sizeof(BED_QuestNode_SetPlayerRebirthPoint_GetNodeDescriptionInCS) == 0x000010, "Wrong size on BED_QuestNode_SetPlayerRebirthPoint_GetNodeDescriptionInCS");
//static_assert(offsetof(BED_QuestNode_SetPlayerRebirthPoint_GetNodeDescriptionInCS, ReturnValue) == 0x000000, "Member 'BED_QuestNode_SetPlayerRebirthPoint_GetNodeDescriptionInCS::ReturnValue' has a wrong offset!");

// Function b1-Managed.BED_FSMNode_Condition_GI_Loading_IsInNetClient.GetNodeDescriptionInCS
// 0x0010 (0x0010 - 0x0000)
struct BED_FSMNode_Condition_GI_Loading_IsInNetClient_GetNodeDescriptionInCS final
{
public:
	class FString                                 ReturnValue;                                       // 0x0000(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash)
};
//static_assert(alignof(BED_FSMNode_Condition_GI_Loading_IsInNetClient_GetNodeDescriptionInCS) == 0x000008, "Wrong alignment on BED_FSMNode_Condition_GI_Loading_IsInNetClient_GetNodeDescriptionInCS");
//static_assert(sizeof(BED_FSMNode_Condition_GI_Loading_IsInNetClient_GetNodeDescriptionInCS) == 0x000010, "Wrong size on BED_FSMNode_Condition_GI_Loading_IsInNetClient_GetNodeDescriptionInCS");
//static_assert(offsetof(BED_FSMNode_Condition_GI_Loading_IsInNetClient_GetNodeDescriptionInCS, ReturnValue) == 0x000000, "Member 'BED_FSMNode_Condition_GI_Loading_IsInNetClient_GetNodeDescriptionInCS::ReturnValue' has a wrong offset!");

// Function b1-Managed.BED_FSMNode_Condition_GI_Loading_IsInPIEClient.GetNodeDescriptionInCS
// 0x0010 (0x0010 - 0x0000)
struct BED_FSMNode_Condition_GI_Loading_IsInPIEClient_GetNodeDescriptionInCS final
{
public:
	class FString                                 ReturnValue;                                       // 0x0000(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash)
};
//static_assert(alignof(BED_FSMNode_Condition_GI_Loading_IsInPIEClient_GetNodeDescriptionInCS) == 0x000008, "Wrong alignment on BED_FSMNode_Condition_GI_Loading_IsInPIEClient_GetNodeDescriptionInCS");
//static_assert(sizeof(BED_FSMNode_Condition_GI_Loading_IsInPIEClient_GetNodeDescriptionInCS) == 0x000010, "Wrong size on BED_FSMNode_Condition_GI_Loading_IsInPIEClient_GetNodeDescriptionInCS");
//static_assert(offsetof(BED_FSMNode_Condition_GI_Loading_IsInPIEClient_GetNodeDescriptionInCS, ReturnValue) == 0x000000, "Member 'BED_FSMNode_Condition_GI_Loading_IsInPIEClient_GetNodeDescriptionInCS::ReturnValue' has a wrong offset!");

// Function b1-Managed.BED_FSMNode_Condition_GI_Loading_IsInPreviewSeqContext.GetNodeDescriptionInCS
// 0x0010 (0x0010 - 0x0000)
struct BED_FSMNode_Condition_GI_Loading_IsInPreviewSeqContext_GetNodeDescriptionInCS final
{
public:
	class FString                                 ReturnValue;                                       // 0x0000(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash)
};
//static_assert(alignof(BED_FSMNode_Condition_GI_Loading_IsInPreviewSeqContext_GetNodeDescriptionInCS) == 0x000008, "Wrong alignment on BED_FSMNode_Condition_GI_Loading_IsInPreviewSeqContext_GetNodeDescriptionInCS");
//static_assert(sizeof(BED_FSMNode_Condition_GI_Loading_IsInPreviewSeqContext_GetNodeDescriptionInCS) == 0x000010, "Wrong size on BED_FSMNode_Condition_GI_Loading_IsInPreviewSeqContext_GetNodeDescriptionInCS");
//static_assert(offsetof(BED_FSMNode_Condition_GI_Loading_IsInPreviewSeqContext_GetNodeDescriptionInCS, ReturnValue) == 0x000000, "Member 'BED_FSMNode_Condition_GI_Loading_IsInPreviewSeqContext_GetNodeDescriptionInCS::ReturnValue' has a wrong offset!");

// Function b1-Managed.BED_FSMNode_Condition_GI_Loading_IsInStartUpLevel.GetNodeDescriptionInCS
// 0x0010 (0x0010 - 0x0000)
struct BED_FSMNode_Condition_GI_Loading_IsInStartUpLevel_GetNodeDescriptionInCS final
{
public:
	class FString                                 ReturnValue;                                       // 0x0000(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash)
};
//static_assert(alignof(BED_FSMNode_Condition_GI_Loading_IsInStartUpLevel_GetNodeDescriptionInCS) == 0x000008, "Wrong alignment on BED_FSMNode_Condition_GI_Loading_IsInStartUpLevel_GetNodeDescriptionInCS");
//static_assert(sizeof(BED_FSMNode_Condition_GI_Loading_IsInStartUpLevel_GetNodeDescriptionInCS) == 0x000010, "Wrong size on BED_FSMNode_Condition_GI_Loading_IsInStartUpLevel_GetNodeDescriptionInCS");
//static_assert(offsetof(BED_FSMNode_Condition_GI_Loading_IsInStartUpLevel_GetNodeDescriptionInCS, ReturnValue) == 0x000000, "Member 'BED_FSMNode_Condition_GI_Loading_IsInStartUpLevel_GetNodeDescriptionInCS::ReturnValue' has a wrong offset!");

// Function b1-Managed.BED_FSMNode_Condition_GI_Loading_IsInToilet.GetNodeDescriptionInCS
// 0x0010 (0x0010 - 0x0000)
struct BED_FSMNode_Condition_GI_Loading_IsInToilet_GetNodeDescriptionInCS final
{
public:
	class FString                                 ReturnValue;                                       // 0x0000(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash)
};
//static_assert(alignof(BED_FSMNode_Condition_GI_Loading_IsInToilet_GetNodeDescriptionInCS) == 0x000008, "Wrong alignment on BED_FSMNode_Condition_GI_Loading_IsInToilet_GetNodeDescriptionInCS");
//static_assert(sizeof(BED_FSMNode_Condition_GI_Loading_IsInToilet_GetNodeDescriptionInCS) == 0x000010, "Wrong size on BED_FSMNode_Condition_GI_Loading_IsInToilet_GetNodeDescriptionInCS");
//static_assert(offsetof(BED_FSMNode_Condition_GI_Loading_IsInToilet_GetNodeDescriptionInCS, ReturnValue) == 0x000000, "Member 'BED_FSMNode_Condition_GI_Loading_IsInToilet_GetNodeDescriptionInCS::ReturnValue' has a wrong offset!");

// Function b1-Managed.BED_FSMNode_Condition_GI_Loading_IsNeedCloseLoadingScreen.GetNodeDescriptionInCS
// 0x0010 (0x0010 - 0x0000)
struct BED_FSMNode_Condition_GI_Loading_IsNeedCloseLoadingScreen_GetNodeDescriptionInCS final
{
public:
	class FString                                 ReturnValue;                                       // 0x0000(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash)
};
//static_assert(alignof(BED_FSMNode_Condition_GI_Loading_IsNeedCloseLoadingScreen_GetNodeDescriptionInCS) == 0x000008, "Wrong alignment on BED_FSMNode_Condition_GI_Loading_IsNeedCloseLoadingScreen_GetNodeDescriptionInCS");
//static_assert(sizeof(BED_FSMNode_Condition_GI_Loading_IsNeedCloseLoadingScreen_GetNodeDescriptionInCS) == 0x000010, "Wrong size on BED_FSMNode_Condition_GI_Loading_IsNeedCloseLoadingScreen_GetNodeDescriptionInCS");
//static_assert(offsetof(BED_FSMNode_Condition_GI_Loading_IsNeedCloseLoadingScreen_GetNodeDescriptionInCS, ReturnValue) == 0x000000, "Member 'BED_FSMNode_Condition_GI_Loading_IsNeedCloseLoadingScreen_GetNodeDescriptionInCS::ReturnValue' has a wrong offset!");

// Function b1-Managed.BED_FSMNode_Condition_GI_Loading_IsNeedOpenLoadingScreen.GetNodeDescriptionInCS
// 0x0010 (0x0010 - 0x0000)
struct BED_FSMNode_Condition_GI_Loading_IsNeedOpenLoadingScreen_GetNodeDescriptionInCS final
{
public:
	class FString                                 ReturnValue;                                       // 0x0000(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash)
};
//static_assert(alignof(BED_FSMNode_Condition_GI_Loading_IsNeedOpenLoadingScreen_GetNodeDescriptionInCS) == 0x000008, "Wrong alignment on BED_FSMNode_Condition_GI_Loading_IsNeedOpenLoadingScreen_GetNodeDescriptionInCS");
//static_assert(sizeof(BED_FSMNode_Condition_GI_Loading_IsNeedOpenLoadingScreen_GetNodeDescriptionInCS) == 0x000010, "Wrong size on BED_FSMNode_Condition_GI_Loading_IsNeedOpenLoadingScreen_GetNodeDescriptionInCS");
//static_assert(offsetof(BED_FSMNode_Condition_GI_Loading_IsNeedOpenLoadingScreen_GetNodeDescriptionInCS, ReturnValue) == 0x000000, "Member 'BED_FSMNode_Condition_GI_Loading_IsNeedOpenLoadingScreen_GetNodeDescriptionInCS::ReturnValue' has a wrong offset!");

// Function b1-Managed.BED_FSMNode_Condition_GI_Loading_IsNeedPostLeaveLevel.GetNodeDescriptionInCS
// 0x0010 (0x0010 - 0x0000)
struct BED_FSMNode_Condition_GI_Loading_IsNeedPostLeaveLevel_GetNodeDescriptionInCS final
{
public:
	class FString                                 ReturnValue;                                       // 0x0000(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash)
};
//static_assert(alignof(BED_FSMNode_Condition_GI_Loading_IsNeedPostLeaveLevel_GetNodeDescriptionInCS) == 0x000008, "Wrong alignment on BED_FSMNode_Condition_GI_Loading_IsNeedPostLeaveLevel_GetNodeDescriptionInCS");
//static_assert(sizeof(BED_FSMNode_Condition_GI_Loading_IsNeedPostLeaveLevel_GetNodeDescriptionInCS) == 0x000010, "Wrong size on BED_FSMNode_Condition_GI_Loading_IsNeedPostLeaveLevel_GetNodeDescriptionInCS");
//static_assert(offsetof(BED_FSMNode_Condition_GI_Loading_IsNeedPostLeaveLevel_GetNodeDescriptionInCS, ReturnValue) == 0x000000, "Member 'BED_FSMNode_Condition_GI_Loading_IsNeedPostLeaveLevel_GetNodeDescriptionInCS::ReturnValue' has a wrong offset!");

// Function b1-Managed.BED_FSMNode_Condition_GI_Loading_IsNeedPreEnterLevel.GetNodeDescriptionInCS
// 0x0010 (0x0010 - 0x0000)
struct BED_FSMNode_Condition_GI_Loading_IsNeedPreEnterLevel_GetNodeDescriptionInCS final
{
public:
	class FString                                 ReturnValue;                                       // 0x0000(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash)
};
//static_assert(alignof(BED_FSMNode_Condition_GI_Loading_IsNeedPreEnterLevel_GetNodeDescriptionInCS) == 0x000008, "Wrong alignment on BED_FSMNode_Condition_GI_Loading_IsNeedPreEnterLevel_GetNodeDescriptionInCS");
//static_assert(sizeof(BED_FSMNode_Condition_GI_Loading_IsNeedPreEnterLevel_GetNodeDescriptionInCS) == 0x000010, "Wrong size on BED_FSMNode_Condition_GI_Loading_IsNeedPreEnterLevel_GetNodeDescriptionInCS");
//static_assert(offsetof(BED_FSMNode_Condition_GI_Loading_IsNeedPreEnterLevel_GetNodeDescriptionInCS, ReturnValue) == 0x000000, "Member 'BED_FSMNode_Condition_GI_Loading_IsNeedPreEnterLevel_GetNodeDescriptionInCS::ReturnValue' has a wrong offset!");

// Function b1-Managed.BED_FSMNode_Condition_GI_Loading_IsNeedPreStartGameProcess.GetNodeDescriptionInCS
// 0x0010 (0x0010 - 0x0000)
struct BED_FSMNode_Condition_GI_Loading_IsNeedPreStartGameProcess_GetNodeDescriptionInCS final
{
public:
	class FString                                 ReturnValue;                                       // 0x0000(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash)
};
//static_assert(alignof(BED_FSMNode_Condition_GI_Loading_IsNeedPreStartGameProcess_GetNodeDescriptionInCS) == 0x000008, "Wrong alignment on BED_FSMNode_Condition_GI_Loading_IsNeedPreStartGameProcess_GetNodeDescriptionInCS");
//static_assert(sizeof(BED_FSMNode_Condition_GI_Loading_IsNeedPreStartGameProcess_GetNodeDescriptionInCS) == 0x000010, "Wrong size on BED_FSMNode_Condition_GI_Loading_IsNeedPreStartGameProcess_GetNodeDescriptionInCS");
//static_assert(offsetof(BED_FSMNode_Condition_GI_Loading_IsNeedPreStartGameProcess_GetNodeDescriptionInCS, ReturnValue) == 0x000000, "Member 'BED_FSMNode_Condition_GI_Loading_IsNeedPreStartGameProcess_GetNodeDescriptionInCS::ReturnValue' has a wrong offset!");

// Function b1-Managed.BED_FSMNode_Condition_GI_Loading_IsNeedResetGameInstanceData.GetNodeDescriptionInCS
// 0x0010 (0x0010 - 0x0000)
struct BED_FSMNode_Condition_GI_Loading_IsNeedResetGameInstanceData_GetNodeDescriptionInCS final
{
public:
	class FString                                 ReturnValue;                                       // 0x0000(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash)
};
//static_assert(alignof(BED_FSMNode_Condition_GI_Loading_IsNeedResetGameInstanceData_GetNodeDescriptionInCS) == 0x000008, "Wrong alignment on BED_FSMNode_Condition_GI_Loading_IsNeedResetGameInstanceData_GetNodeDescriptionInCS");
//static_assert(sizeof(BED_FSMNode_Condition_GI_Loading_IsNeedResetGameInstanceData_GetNodeDescriptionInCS) == 0x000010, "Wrong size on BED_FSMNode_Condition_GI_Loading_IsNeedResetGameInstanceData_GetNodeDescriptionInCS");
//static_assert(offsetof(BED_FSMNode_Condition_GI_Loading_IsNeedResetGameInstanceData_GetNodeDescriptionInCS, ReturnValue) == 0x000000, "Member 'BED_FSMNode_Condition_GI_Loading_IsNeedResetGameInstanceData_GetNodeDescriptionInCS::ReturnValue' has a wrong offset!");

// Function b1-Managed.BED_FSMNode_Condition_GI_Loading_IsPlayGoDownloadIncomplete.GetNodeDescriptionInCS
// 0x0010 (0x0010 - 0x0000)
struct BED_FSMNode_Condition_GI_Loading_IsPlayGoDownloadIncomplete_GetNodeDescriptionInCS final
{
public:
	class FString                                 ReturnValue;                                       // 0x0000(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash)
};
//static_assert(alignof(BED_FSMNode_Condition_GI_Loading_IsPlayGoDownloadIncomplete_GetNodeDescriptionInCS) == 0x000008, "Wrong alignment on BED_FSMNode_Condition_GI_Loading_IsPlayGoDownloadIncomplete_GetNodeDescriptionInCS");
//static_assert(sizeof(BED_FSMNode_Condition_GI_Loading_IsPlayGoDownloadIncomplete_GetNodeDescriptionInCS) == 0x000010, "Wrong size on BED_FSMNode_Condition_GI_Loading_IsPlayGoDownloadIncomplete_GetNodeDescriptionInCS");
//static_assert(offsetof(BED_FSMNode_Condition_GI_Loading_IsPlayGoDownloadIncomplete_GetNodeDescriptionInCS, ReturnValue) == 0x000000, "Member 'BED_FSMNode_Condition_GI_Loading_IsPlayGoDownloadIncomplete_GetNodeDescriptionInCS::ReturnValue' has a wrong offset!");

// Function b1-Managed.BED_FSMNode_Condition_GI_Loading_IsReplayWorldLoadFinish.GetNodeDescriptionInCS
// 0x0010 (0x0010 - 0x0000)
struct BED_FSMNode_Condition_GI_Loading_IsReplayWorldLoadFinish_GetNodeDescriptionInCS final
{
public:
	class FString                                 ReturnValue;                                       // 0x0000(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash)
};
//static_assert(alignof(BED_FSMNode_Condition_GI_Loading_IsReplayWorldLoadFinish_GetNodeDescriptionInCS) == 0x000008, "Wrong alignment on BED_FSMNode_Condition_GI_Loading_IsReplayWorldLoadFinish_GetNodeDescriptionInCS");
//static_assert(sizeof(BED_FSMNode_Condition_GI_Loading_IsReplayWorldLoadFinish_GetNodeDescriptionInCS) == 0x000010, "Wrong size on BED_FSMNode_Condition_GI_Loading_IsReplayWorldLoadFinish_GetNodeDescriptionInCS");
//static_assert(offsetof(BED_FSMNode_Condition_GI_Loading_IsReplayWorldLoadFinish_GetNodeDescriptionInCS, ReturnValue) == 0x000000, "Member 'BED_FSMNode_Condition_GI_Loading_IsReplayWorldLoadFinish_GetNodeDescriptionInCS::ReturnValue' has a wrong offset!");

// Function b1-Managed.BED_FSMNode_Condition_GI_Loading_IsStandAlone.GetNodeDescriptionInCS
// 0x0010 (0x0010 - 0x0000)
struct BED_FSMNode_Condition_GI_Loading_IsStandAlone_GetNodeDescriptionInCS final
{
public:
	class FString                                 ReturnValue;                                       // 0x0000(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash)
};
//static_assert(alignof(BED_FSMNode_Condition_GI_Loading_IsStandAlone_GetNodeDescriptionInCS) == 0x000008, "Wrong alignment on BED_FSMNode_Condition_GI_Loading_IsStandAlone_GetNodeDescriptionInCS");
//static_assert(sizeof(BED_FSMNode_Condition_GI_Loading_IsStandAlone_GetNodeDescriptionInCS) == 0x000010, "Wrong size on BED_FSMNode_Condition_GI_Loading_IsStandAlone_GetNodeDescriptionInCS");
//static_assert(offsetof(BED_FSMNode_Condition_GI_Loading_IsStandAlone_GetNodeDescriptionInCS, ReturnValue) == 0x000000, "Member 'BED_FSMNode_Condition_GI_Loading_IsStandAlone_GetNodeDescriptionInCS::ReturnValue' has a wrong offset!");

// Function b1-Managed.BED_FSMNode_Condition_GI_Loading_MonsterTeleportArchiveExist.GetNodeDescriptionInCS
// 0x0010 (0x0010 - 0x0000)
struct BED_FSMNode_Condition_GI_Loading_MonsterTeleportArchiveExist_GetNodeDescriptionInCS final
{
public:
	class FString                                 ReturnValue;                                       // 0x0000(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash)
};
//static_assert(alignof(BED_FSMNode_Condition_GI_Loading_MonsterTeleportArchiveExist_GetNodeDescriptionInCS) == 0x000008, "Wrong alignment on BED_FSMNode_Condition_GI_Loading_MonsterTeleportArchiveExist_GetNodeDescriptionInCS");
//static_assert(sizeof(BED_FSMNode_Condition_GI_Loading_MonsterTeleportArchiveExist_GetNodeDescriptionInCS) == 0x000010, "Wrong size on BED_FSMNode_Condition_GI_Loading_MonsterTeleportArchiveExist_GetNodeDescriptionInCS");
//static_assert(offsetof(BED_FSMNode_Condition_GI_Loading_MonsterTeleportArchiveExist_GetNodeDescriptionInCS, ReturnValue) == 0x000000, "Member 'BED_FSMNode_Condition_GI_Loading_MonsterTeleportArchiveExist_GetNodeDescriptionInCS::ReturnValue' has a wrong offset!");

// Function b1-Managed.BED_FSMNode_Condition_GI_Loading_NeedSwitchPlayerGameMode.GetNodeDescriptionInCS
// 0x0010 (0x0010 - 0x0000)
struct BED_FSMNode_Condition_GI_Loading_NeedSwitchPlayerGameMode_GetNodeDescriptionInCS final
{
public:
	class FString                                 ReturnValue;                                       // 0x0000(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash)
};
//static_assert(alignof(BED_FSMNode_Condition_GI_Loading_NeedSwitchPlayerGameMode_GetNodeDescriptionInCS) == 0x000008, "Wrong alignment on BED_FSMNode_Condition_GI_Loading_NeedSwitchPlayerGameMode_GetNodeDescriptionInCS");
//static_assert(sizeof(BED_FSMNode_Condition_GI_Loading_NeedSwitchPlayerGameMode_GetNodeDescriptionInCS) == 0x000010, "Wrong size on BED_FSMNode_Condition_GI_Loading_NeedSwitchPlayerGameMode_GetNodeDescriptionInCS");
//static_assert(offsetof(BED_FSMNode_Condition_GI_Loading_NeedSwitchPlayerGameMode_GetNodeDescriptionInCS, ReturnValue) == 0x000000, "Member 'BED_FSMNode_Condition_GI_Loading_NeedSwitchPlayerGameMode_GetNodeDescriptionInCS::ReturnValue' has a wrong offset!");

// Function b1-Managed.BED_FSMNode_Condition_GI_Loading_PlayerGameStateCheck.GetNodeDescriptionInCS
// 0x0010 (0x0010 - 0x0000)
struct BED_FSMNode_Condition_GI_Loading_PlayerGameStateCheck_GetNodeDescriptionInCS final
{
public:
	class FString                                 ReturnValue;                                       // 0x0000(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash)
};
//static_assert(alignof(BED_FSMNode_Condition_GI_Loading_PlayerGameStateCheck_GetNodeDescriptionInCS) == 0x000008, "Wrong alignment on BED_FSMNode_Condition_GI_Loading_PlayerGameStateCheck_GetNodeDescriptionInCS");
//static_assert(sizeof(BED_FSMNode_Condition_GI_Loading_PlayerGameStateCheck_GetNodeDescriptionInCS) == 0x000010, "Wrong size on BED_FSMNode_Condition_GI_Loading_PlayerGameStateCheck_GetNodeDescriptionInCS");
//static_assert(offsetof(BED_FSMNode_Condition_GI_Loading_PlayerGameStateCheck_GetNodeDescriptionInCS, ReturnValue) == 0x000000, "Member 'BED_FSMNode_Condition_GI_Loading_PlayerGameStateCheck_GetNodeDescriptionInCS::ReturnValue' has a wrong offset!");

// Function b1-Managed.BED_FSMNode_Condition_GI_Loading_SwitchFillContextArchiveDataType.GetNodeDescriptionInCS
// 0x0010 (0x0010 - 0x0000)
struct BED_FSMNode_Condition_GI_Loading_SwitchFillContextArchiveDataType_GetNodeDescriptionInCS final
{
public:
	class FString                                 ReturnValue;                                       // 0x0000(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash)
};
//static_assert(alignof(BED_FSMNode_Condition_GI_Loading_SwitchFillContextArchiveDataType_GetNodeDescriptionInCS) == 0x000008, "Wrong alignment on BED_FSMNode_Condition_GI_Loading_SwitchFillContextArchiveDataType_GetNodeDescriptionInCS");
//static_assert(sizeof(BED_FSMNode_Condition_GI_Loading_SwitchFillContextArchiveDataType_GetNodeDescriptionInCS) == 0x000010, "Wrong size on BED_FSMNode_Condition_GI_Loading_SwitchFillContextArchiveDataType_GetNodeDescriptionInCS");
//static_assert(offsetof(BED_FSMNode_Condition_GI_Loading_SwitchFillContextArchiveDataType_GetNodeDescriptionInCS, ReturnValue) == 0x000000, "Member 'BED_FSMNode_Condition_GI_Loading_SwitchFillContextArchiveDataType_GetNodeDescriptionInCS::ReturnValue' has a wrong offset!");

// Function b1-Managed.BED_FSMNode_Condition_GI_Loading_SwitchSaveArchiveDegree.GetNodeDescriptionInCS
// 0x0010 (0x0010 - 0x0000)
struct BED_FSMNode_Condition_GI_Loading_SwitchSaveArchiveDegree_GetNodeDescriptionInCS final
{
public:
	class FString                                 ReturnValue;                                       // 0x0000(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash)
};
//static_assert(alignof(BED_FSMNode_Condition_GI_Loading_SwitchSaveArchiveDegree_GetNodeDescriptionInCS) == 0x000008, "Wrong alignment on BED_FSMNode_Condition_GI_Loading_SwitchSaveArchiveDegree_GetNodeDescriptionInCS");
//static_assert(sizeof(BED_FSMNode_Condition_GI_Loading_SwitchSaveArchiveDegree_GetNodeDescriptionInCS) == 0x000010, "Wrong size on BED_FSMNode_Condition_GI_Loading_SwitchSaveArchiveDegree_GetNodeDescriptionInCS");
//static_assert(offsetof(BED_FSMNode_Condition_GI_Loading_SwitchSaveArchiveDegree_GetNodeDescriptionInCS, ReturnValue) == 0x000000, "Member 'BED_FSMNode_Condition_GI_Loading_SwitchSaveArchiveDegree_GetNodeDescriptionInCS::ReturnValue' has a wrong offset!");

// Function b1-Managed.BED_FSMNode_Condition_GI_Loading_SwitchTeleportType.GetNodeDescriptionInCS
// 0x0010 (0x0010 - 0x0000)
struct BED_FSMNode_Condition_GI_Loading_SwitchTeleportType_GetNodeDescriptionInCS final
{
public:
	class FString                                 ReturnValue;                                       // 0x0000(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash)
};
//static_assert(alignof(BED_FSMNode_Condition_GI_Loading_SwitchTeleportType_GetNodeDescriptionInCS) == 0x000008, "Wrong alignment on BED_FSMNode_Condition_GI_Loading_SwitchTeleportType_GetNodeDescriptionInCS");
//static_assert(sizeof(BED_FSMNode_Condition_GI_Loading_SwitchTeleportType_GetNodeDescriptionInCS) == 0x000010, "Wrong size on BED_FSMNode_Condition_GI_Loading_SwitchTeleportType_GetNodeDescriptionInCS");
//static_assert(offsetof(BED_FSMNode_Condition_GI_Loading_SwitchTeleportType_GetNodeDescriptionInCS, ReturnValue) == 0x000000, "Member 'BED_FSMNode_Condition_GI_Loading_SwitchTeleportType_GetNodeDescriptionInCS::ReturnValue' has a wrong offset!");

// Function b1-Managed.BED_FSMNode_Condition_GI_Loading_TeleportNeedLevelTravel.GetNodeDescriptionInCS
// 0x0010 (0x0010 - 0x0000)
struct BED_FSMNode_Condition_GI_Loading_TeleportNeedLevelTravel_GetNodeDescriptionInCS final
{
public:
	class FString                                 ReturnValue;                                       // 0x0000(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash)
};
//static_assert(alignof(BED_FSMNode_Condition_GI_Loading_TeleportNeedLevelTravel_GetNodeDescriptionInCS) == 0x000008, "Wrong alignment on BED_FSMNode_Condition_GI_Loading_TeleportNeedLevelTravel_GetNodeDescriptionInCS");
//static_assert(sizeof(BED_FSMNode_Condition_GI_Loading_TeleportNeedLevelTravel_GetNodeDescriptionInCS) == 0x000010, "Wrong size on BED_FSMNode_Condition_GI_Loading_TeleportNeedLevelTravel_GetNodeDescriptionInCS");
//static_assert(offsetof(BED_FSMNode_Condition_GI_Loading_TeleportNeedLevelTravel_GetNodeDescriptionInCS, ReturnValue) == 0x000000, "Member 'BED_FSMNode_Condition_GI_Loading_TeleportNeedLevelTravel_GetNodeDescriptionInCS::ReturnValue' has a wrong offset!");

// Function b1-Managed.BED_FSMNode_Condition_GI_Loading_TravelUrlHasHost.GetNodeDescriptionInCS
// 0x0010 (0x0010 - 0x0000)
struct BED_FSMNode_Condition_GI_Loading_TravelUrlHasHost_GetNodeDescriptionInCS final
{
public:
	class FString                                 ReturnValue;                                       // 0x0000(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash)
};
//static_assert(alignof(BED_FSMNode_Condition_GI_Loading_TravelUrlHasHost_GetNodeDescriptionInCS) == 0x000008, "Wrong alignment on BED_FSMNode_Condition_GI_Loading_TravelUrlHasHost_GetNodeDescriptionInCS");
//static_assert(sizeof(BED_FSMNode_Condition_GI_Loading_TravelUrlHasHost_GetNodeDescriptionInCS) == 0x000010, "Wrong size on BED_FSMNode_Condition_GI_Loading_TravelUrlHasHost_GetNodeDescriptionInCS");
//static_assert(offsetof(BED_FSMNode_Condition_GI_Loading_TravelUrlHasHost_GetNodeDescriptionInCS, ReturnValue) == 0x000000, "Member 'BED_FSMNode_Condition_GI_Loading_TravelUrlHasHost_GetNodeDescriptionInCS::ReturnValue' has a wrong offset!");

// Function b1-Managed.BED_FSMNode_Condition_PS_Transaction_TaskCondition.GetNodeDescriptionInCS
// 0x0010 (0x0010 - 0x0000)
struct BED_FSMNode_Condition_PS_Transaction_TaskCondition_GetNodeDescriptionInCS final
{
public:
	class FString                                 ReturnValue;                                       // 0x0000(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash)
};
//static_assert(alignof(BED_FSMNode_Condition_PS_Transaction_TaskCondition_GetNodeDescriptionInCS) == 0x000008, "Wrong alignment on BED_FSMNode_Condition_PS_Transaction_TaskCondition_GetNodeDescriptionInCS");
//static_assert(sizeof(BED_FSMNode_Condition_PS_Transaction_TaskCondition_GetNodeDescriptionInCS) == 0x000010, "Wrong size on BED_FSMNode_Condition_PS_Transaction_TaskCondition_GetNodeDescriptionInCS");
//static_assert(offsetof(BED_FSMNode_Condition_PS_Transaction_TaskCondition_GetNodeDescriptionInCS, ReturnValue) == 0x000000, "Member 'BED_FSMNode_Condition_PS_Transaction_TaskCondition_GetNodeDescriptionInCS::ReturnValue' has a wrong offset!");

// Function b1-Managed.BED_FSMNode_GI_Global_AsClientInGame.PostPropertyChanged
// 0x0020 (0x0020 - 0x0000)
struct BED_FSMNode_GI_Global_AsClientInGame_PostPropertyChanged final
{
public:
	class FString                                 MemberName;                                        // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash)
	class FString                                 PropertyName;                                      // 0x0010(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash)
};
//static_assert(alignof(BED_FSMNode_GI_Global_AsClientInGame_PostPropertyChanged) == 0x000008, "Wrong alignment on BED_FSMNode_GI_Global_AsClientInGame_PostPropertyChanged");
//static_assert(sizeof(BED_FSMNode_GI_Global_AsClientInGame_PostPropertyChanged) == 0x000020, "Wrong size on BED_FSMNode_GI_Global_AsClientInGame_PostPropertyChanged");
//static_assert(offsetof(BED_FSMNode_GI_Global_AsClientInGame_PostPropertyChanged, MemberName) == 0x000000, "Member 'BED_FSMNode_GI_Global_AsClientInGame_PostPropertyChanged::MemberName' has a wrong offset!");
//static_assert(offsetof(BED_FSMNode_GI_Global_AsClientInGame_PostPropertyChanged, PropertyName) == 0x000010, "Member 'BED_FSMNode_GI_Global_AsClientInGame_PostPropertyChanged::PropertyName' has a wrong offset!");

// Function b1-Managed.BED_FSMNode_GI_Global_AsClientInGame.GetNodeDescriptionInCS
// 0x0010 (0x0010 - 0x0000)
struct BED_FSMNode_GI_Global_AsClientInGame_GetNodeDescriptionInCS final
{
public:
	class FString                                 ReturnValue;                                       // 0x0000(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash)
};
//static_assert(alignof(BED_FSMNode_GI_Global_AsClientInGame_GetNodeDescriptionInCS) == 0x000008, "Wrong alignment on BED_FSMNode_GI_Global_AsClientInGame_GetNodeDescriptionInCS");
//static_assert(sizeof(BED_FSMNode_GI_Global_AsClientInGame_GetNodeDescriptionInCS) == 0x000010, "Wrong size on BED_FSMNode_GI_Global_AsClientInGame_GetNodeDescriptionInCS");
//static_assert(offsetof(BED_FSMNode_GI_Global_AsClientInGame_GetNodeDescriptionInCS, ReturnValue) == 0x000000, "Member 'BED_FSMNode_GI_Global_AsClientInGame_GetNodeDescriptionInCS::ReturnValue' has a wrong offset!");

// Function b1-Managed.BED_FSMNode_GI_Global_AsListenServerInGame.PostPropertyChanged
// 0x0020 (0x0020 - 0x0000)
struct BED_FSMNode_GI_Global_AsListenServerInGame_PostPropertyChanged final
{
public:
	class FString                                 MemberName;                                        // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash)
	class FString                                 PropertyName;                                      // 0x0010(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash)
};
//static_assert(alignof(BED_FSMNode_GI_Global_AsListenServerInGame_PostPropertyChanged) == 0x000008, "Wrong alignment on BED_FSMNode_GI_Global_AsListenServerInGame_PostPropertyChanged");
//static_assert(sizeof(BED_FSMNode_GI_Global_AsListenServerInGame_PostPropertyChanged) == 0x000020, "Wrong size on BED_FSMNode_GI_Global_AsListenServerInGame_PostPropertyChanged");
//static_assert(offsetof(BED_FSMNode_GI_Global_AsListenServerInGame_PostPropertyChanged, MemberName) == 0x000000, "Member 'BED_FSMNode_GI_Global_AsListenServerInGame_PostPropertyChanged::MemberName' has a wrong offset!");
//static_assert(offsetof(BED_FSMNode_GI_Global_AsListenServerInGame_PostPropertyChanged, PropertyName) == 0x000010, "Member 'BED_FSMNode_GI_Global_AsListenServerInGame_PostPropertyChanged::PropertyName' has a wrong offset!");

// Function b1-Managed.BED_FSMNode_GI_Global_AsListenServerInGame.GetNodeDescriptionInCS
// 0x0010 (0x0010 - 0x0000)
struct BED_FSMNode_GI_Global_AsListenServerInGame_GetNodeDescriptionInCS final
{
public:
	class FString                                 ReturnValue;                                       // 0x0000(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash)
};
//static_assert(alignof(BED_FSMNode_GI_Global_AsListenServerInGame_GetNodeDescriptionInCS) == 0x000008, "Wrong alignment on BED_FSMNode_GI_Global_AsListenServerInGame_GetNodeDescriptionInCS");
//static_assert(sizeof(BED_FSMNode_GI_Global_AsListenServerInGame_GetNodeDescriptionInCS) == 0x000010, "Wrong size on BED_FSMNode_GI_Global_AsListenServerInGame_GetNodeDescriptionInCS");
//static_assert(offsetof(BED_FSMNode_GI_Global_AsListenServerInGame_GetNodeDescriptionInCS, ReturnValue) == 0x000000, "Member 'BED_FSMNode_GI_Global_AsListenServerInGame_GetNodeDescriptionInCS::ReturnValue' has a wrong offset!");

// Function b1-Managed.BED_FSMNode_GI_Global_InBattleOnLineDS.PostPropertyChanged
// 0x0020 (0x0020 - 0x0000)
struct BED_FSMNode_GI_Global_InBattleOnLineDS_PostPropertyChanged final
{
public:
	class FString                                 MemberName;                                        // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash)
	class FString                                 PropertyName;                                      // 0x0010(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash)
};
//static_assert(alignof(BED_FSMNode_GI_Global_InBattleOnLineDS_PostPropertyChanged) == 0x000008, "Wrong alignment on BED_FSMNode_GI_Global_InBattleOnLineDS_PostPropertyChanged");
//static_assert(sizeof(BED_FSMNode_GI_Global_InBattleOnLineDS_PostPropertyChanged) == 0x000020, "Wrong size on BED_FSMNode_GI_Global_InBattleOnLineDS_PostPropertyChanged");
//static_assert(offsetof(BED_FSMNode_GI_Global_InBattleOnLineDS_PostPropertyChanged, MemberName) == 0x000000, "Member 'BED_FSMNode_GI_Global_InBattleOnLineDS_PostPropertyChanged::MemberName' has a wrong offset!");
//static_assert(offsetof(BED_FSMNode_GI_Global_InBattleOnLineDS_PostPropertyChanged, PropertyName) == 0x000010, "Member 'BED_FSMNode_GI_Global_InBattleOnLineDS_PostPropertyChanged::PropertyName' has a wrong offset!");

// Function b1-Managed.BED_FSMNode_GI_Global_InBattleOnLineDS.GetNodeDescriptionInCS
// 0x0010 (0x0010 - 0x0000)
struct BED_FSMNode_GI_Global_InBattleOnLineDS_GetNodeDescriptionInCS final
{
public:
	class FString                                 ReturnValue;                                       // 0x0000(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash)
};
//static_assert(alignof(BED_FSMNode_GI_Global_InBattleOnLineDS_GetNodeDescriptionInCS) == 0x000008, "Wrong alignment on BED_FSMNode_GI_Global_InBattleOnLineDS_GetNodeDescriptionInCS");
//static_assert(sizeof(BED_FSMNode_GI_Global_InBattleOnLineDS_GetNodeDescriptionInCS) == 0x000010, "Wrong size on BED_FSMNode_GI_Global_InBattleOnLineDS_GetNodeDescriptionInCS");
//static_assert(offsetof(BED_FSMNode_GI_Global_InBattleOnLineDS_GetNodeDescriptionInCS, ReturnValue) == 0x000000, "Member 'BED_FSMNode_GI_Global_InBattleOnLineDS_GetNodeDescriptionInCS::ReturnValue' has a wrong offset!");

// Function b1-Managed.BED_FSMNode_GI_Global_InBattleParty.PostPropertyChanged
// 0x0020 (0x0020 - 0x0000)
struct BED_FSMNode_GI_Global_InBattleParty_PostPropertyChanged final
{
public:
	class FString                                 MemberName;                                        // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash)
	class FString                                 PropertyName;                                      // 0x0010(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash)
};
//static_assert(alignof(BED_FSMNode_GI_Global_InBattleParty_PostPropertyChanged) == 0x000008, "Wrong alignment on BED_FSMNode_GI_Global_InBattleParty_PostPropertyChanged");
//static_assert(sizeof(BED_FSMNode_GI_Global_InBattleParty_PostPropertyChanged) == 0x000020, "Wrong size on BED_FSMNode_GI_Global_InBattleParty_PostPropertyChanged");
//static_assert(offsetof(BED_FSMNode_GI_Global_InBattleParty_PostPropertyChanged, MemberName) == 0x000000, "Member 'BED_FSMNode_GI_Global_InBattleParty_PostPropertyChanged::MemberName' has a wrong offset!");
//static_assert(offsetof(BED_FSMNode_GI_Global_InBattleParty_PostPropertyChanged, PropertyName) == 0x000010, "Member 'BED_FSMNode_GI_Global_InBattleParty_PostPropertyChanged::PropertyName' has a wrong offset!");

// Function b1-Managed.BED_FSMNode_GI_Global_InBattleParty.GetNodeDescriptionInCS
// 0x0010 (0x0010 - 0x0000)
struct BED_FSMNode_GI_Global_InBattleParty_GetNodeDescriptionInCS final
{
public:
	class FString                                 ReturnValue;                                       // 0x0000(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash)
};
//static_assert(alignof(BED_FSMNode_GI_Global_InBattleParty_GetNodeDescriptionInCS) == 0x000008, "Wrong alignment on BED_FSMNode_GI_Global_InBattleParty_GetNodeDescriptionInCS");
//static_assert(sizeof(BED_FSMNode_GI_Global_InBattleParty_GetNodeDescriptionInCS) == 0x000010, "Wrong size on BED_FSMNode_GI_Global_InBattleParty_GetNodeDescriptionInCS");
//static_assert(offsetof(BED_FSMNode_GI_Global_InBattleParty_GetNodeDescriptionInCS, ReturnValue) == 0x000000, "Member 'BED_FSMNode_GI_Global_InBattleParty_GetNodeDescriptionInCS::ReturnValue' has a wrong offset!");

// Function b1-Managed.BED_FSMNode_GI_Global_InBattleWaitingStartNewGame.PostPropertyChanged
// 0x0020 (0x0020 - 0x0000)
struct BED_FSMNode_GI_Global_InBattleWaitingStartNewGame_PostPropertyChanged final
{
public:
	class FString                                 MemberName;                                        // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash)
	class FString                                 PropertyName;                                      // 0x0010(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash)
};
//static_assert(alignof(BED_FSMNode_GI_Global_InBattleWaitingStartNewGame_PostPropertyChanged) == 0x000008, "Wrong alignment on BED_FSMNode_GI_Global_InBattleWaitingStartNewGame_PostPropertyChanged");
//static_assert(sizeof(BED_FSMNode_GI_Global_InBattleWaitingStartNewGame_PostPropertyChanged) == 0x000020, "Wrong size on BED_FSMNode_GI_Global_InBattleWaitingStartNewGame_PostPropertyChanged");
//static_assert(offsetof(BED_FSMNode_GI_Global_InBattleWaitingStartNewGame_PostPropertyChanged, MemberName) == 0x000000, "Member 'BED_FSMNode_GI_Global_InBattleWaitingStartNewGame_PostPropertyChanged::MemberName' has a wrong offset!");
//static_assert(offsetof(BED_FSMNode_GI_Global_InBattleWaitingStartNewGame_PostPropertyChanged, PropertyName) == 0x000010, "Member 'BED_FSMNode_GI_Global_InBattleWaitingStartNewGame_PostPropertyChanged::PropertyName' has a wrong offset!");

// Function b1-Managed.BED_FSMNode_GI_Global_InBattleWaitingStartNewGame.GetNodeDescriptionInCS
// 0x0010 (0x0010 - 0x0000)
struct BED_FSMNode_GI_Global_InBattleWaitingStartNewGame_GetNodeDescriptionInCS final
{
public:
	class FString                                 ReturnValue;                                       // 0x0000(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash)
};
//static_assert(alignof(BED_FSMNode_GI_Global_InBattleWaitingStartNewGame_GetNodeDescriptionInCS) == 0x000008, "Wrong alignment on BED_FSMNode_GI_Global_InBattleWaitingStartNewGame_GetNodeDescriptionInCS");
//static_assert(sizeof(BED_FSMNode_GI_Global_InBattleWaitingStartNewGame_GetNodeDescriptionInCS) == 0x000010, "Wrong size on BED_FSMNode_GI_Global_InBattleWaitingStartNewGame_GetNodeDescriptionInCS");
//static_assert(offsetof(BED_FSMNode_GI_Global_InBattleWaitingStartNewGame_GetNodeDescriptionInCS, ReturnValue) == 0x000000, "Member 'BED_FSMNode_GI_Global_InBattleWaitingStartNewGame_GetNodeDescriptionInCS::ReturnValue' has a wrong offset!");

// Function b1-Managed.BED_FSMNode_GI_Global_MainMenu.PostPropertyChanged
// 0x0020 (0x0020 - 0x0000)
struct BED_FSMNode_GI_Global_MainMenu_PostPropertyChanged final
{
public:
	class FString                                 MemberName;                                        // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash)
	class FString                                 PropertyName;                                      // 0x0010(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash)
};
//static_assert(alignof(BED_FSMNode_GI_Global_MainMenu_PostPropertyChanged) == 0x000008, "Wrong alignment on BED_FSMNode_GI_Global_MainMenu_PostPropertyChanged");
//static_assert(sizeof(BED_FSMNode_GI_Global_MainMenu_PostPropertyChanged) == 0x000020, "Wrong size on BED_FSMNode_GI_Global_MainMenu_PostPropertyChanged");
//static_assert(offsetof(BED_FSMNode_GI_Global_MainMenu_PostPropertyChanged, MemberName) == 0x000000, "Member 'BED_FSMNode_GI_Global_MainMenu_PostPropertyChanged::MemberName' has a wrong offset!");
//static_assert(offsetof(BED_FSMNode_GI_Global_MainMenu_PostPropertyChanged, PropertyName) == 0x000010, "Member 'BED_FSMNode_GI_Global_MainMenu_PostPropertyChanged::PropertyName' has a wrong offset!");

// Function b1-Managed.BED_FSMNode_GI_Global_MainMenu.GetNodeDescriptionInCS
// 0x0010 (0x0010 - 0x0000)
struct BED_FSMNode_GI_Global_MainMenu_GetNodeDescriptionInCS final
{
public:
	class FString                                 ReturnValue;                                       // 0x0000(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash)
};
//static_assert(alignof(BED_FSMNode_GI_Global_MainMenu_GetNodeDescriptionInCS) == 0x000008, "Wrong alignment on BED_FSMNode_GI_Global_MainMenu_GetNodeDescriptionInCS");
//static_assert(sizeof(BED_FSMNode_GI_Global_MainMenu_GetNodeDescriptionInCS) == 0x000010, "Wrong size on BED_FSMNode_GI_Global_MainMenu_GetNodeDescriptionInCS");
//static_assert(offsetof(BED_FSMNode_GI_Global_MainMenu_GetNodeDescriptionInCS, ReturnValue) == 0x000000, "Member 'BED_FSMNode_GI_Global_MainMenu_GetNodeDescriptionInCS::ReturnValue' has a wrong offset!");

// Function b1-Managed.BED_FSMNode_GI_Global_SubG_GI_Global_BenchMark.GetNodeDescriptionInCS
// 0x0010 (0x0010 - 0x0000)
struct BED_FSMNode_GI_Global_SubG_GI_Global_BenchMark_GetNodeDescriptionInCS final
{
public:
	class FString                                 ReturnValue;                                       // 0x0000(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash)
};
//static_assert(alignof(BED_FSMNode_GI_Global_SubG_GI_Global_BenchMark_GetNodeDescriptionInCS) == 0x000008, "Wrong alignment on BED_FSMNode_GI_Global_SubG_GI_Global_BenchMark_GetNodeDescriptionInCS");
//static_assert(sizeof(BED_FSMNode_GI_Global_SubG_GI_Global_BenchMark_GetNodeDescriptionInCS) == 0x000010, "Wrong size on BED_FSMNode_GI_Global_SubG_GI_Global_BenchMark_GetNodeDescriptionInCS");
//static_assert(offsetof(BED_FSMNode_GI_Global_SubG_GI_Global_BenchMark_GetNodeDescriptionInCS, ReturnValue) == 0x000000, "Member 'BED_FSMNode_GI_Global_SubG_GI_Global_BenchMark_GetNodeDescriptionInCS::ReturnValue' has a wrong offset!");

// Function b1-Managed.BED_FSMNode_GI_Global_SubG_GI_Loading_820DemoReSetGameData.GetNodeDescriptionInCS
// 0x0010 (0x0010 - 0x0000)
struct BED_FSMNode_GI_Global_SubG_GI_Loading_820DemoReSetGameData_GetNodeDescriptionInCS final
{
public:
	class FString                                 ReturnValue;                                       // 0x0000(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash)
};
//static_assert(alignof(BED_FSMNode_GI_Global_SubG_GI_Loading_820DemoReSetGameData_GetNodeDescriptionInCS) == 0x000008, "Wrong alignment on BED_FSMNode_GI_Global_SubG_GI_Loading_820DemoReSetGameData_GetNodeDescriptionInCS");
//static_assert(sizeof(BED_FSMNode_GI_Global_SubG_GI_Loading_820DemoReSetGameData_GetNodeDescriptionInCS) == 0x000010, "Wrong size on BED_FSMNode_GI_Global_SubG_GI_Loading_820DemoReSetGameData_GetNodeDescriptionInCS");
//static_assert(offsetof(BED_FSMNode_GI_Global_SubG_GI_Loading_820DemoReSetGameData_GetNodeDescriptionInCS, ReturnValue) == 0x000000, "Member 'BED_FSMNode_GI_Global_SubG_GI_Loading_820DemoReSetGameData_GetNodeDescriptionInCS::ReturnValue' has a wrong offset!");

// Function b1-Managed.BED_FSMNode_GI_Global_SubG_GI_Loading_BackToMainMenu.GetNodeDescriptionInCS
// 0x0010 (0x0010 - 0x0000)
struct BED_FSMNode_GI_Global_SubG_GI_Loading_BackToMainMenu_GetNodeDescriptionInCS final
{
public:
	class FString                                 ReturnValue;                                       // 0x0000(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash)
};
//static_assert(alignof(BED_FSMNode_GI_Global_SubG_GI_Loading_BackToMainMenu_GetNodeDescriptionInCS) == 0x000008, "Wrong alignment on BED_FSMNode_GI_Global_SubG_GI_Loading_BackToMainMenu_GetNodeDescriptionInCS");
//static_assert(sizeof(BED_FSMNode_GI_Global_SubG_GI_Loading_BackToMainMenu_GetNodeDescriptionInCS) == 0x000010, "Wrong size on BED_FSMNode_GI_Global_SubG_GI_Loading_BackToMainMenu_GetNodeDescriptionInCS");
//static_assert(offsetof(BED_FSMNode_GI_Global_SubG_GI_Loading_BackToMainMenu_GetNodeDescriptionInCS, ReturnValue) == 0x000000, "Member 'BED_FSMNode_GI_Global_SubG_GI_Loading_BackToMainMenu_GetNodeDescriptionInCS::ReturnValue' has a wrong offset!");

// Function b1-Managed.BED_FSMNode_GI_Global_SubG_GI_Loading_CheckGSSdkServerConfig.GetNodeDescriptionInCS
// 0x0010 (0x0010 - 0x0000)
struct BED_FSMNode_GI_Global_SubG_GI_Loading_CheckGSSdkServerConfig_GetNodeDescriptionInCS final
{
public:
	class FString                                 ReturnValue;                                       // 0x0000(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash)
};
//static_assert(alignof(BED_FSMNode_GI_Global_SubG_GI_Loading_CheckGSSdkServerConfig_GetNodeDescriptionInCS) == 0x000008, "Wrong alignment on BED_FSMNode_GI_Global_SubG_GI_Loading_CheckGSSdkServerConfig_GetNodeDescriptionInCS");
//static_assert(sizeof(BED_FSMNode_GI_Global_SubG_GI_Loading_CheckGSSdkServerConfig_GetNodeDescriptionInCS) == 0x000010, "Wrong size on BED_FSMNode_GI_Global_SubG_GI_Loading_CheckGSSdkServerConfig_GetNodeDescriptionInCS");
//static_assert(offsetof(BED_FSMNode_GI_Global_SubG_GI_Loading_CheckGSSdkServerConfig_GetNodeDescriptionInCS, ReturnValue) == 0x000000, "Member 'BED_FSMNode_GI_Global_SubG_GI_Loading_CheckGSSdkServerConfig_GetNodeDescriptionInCS::ReturnValue' has a wrong offset!");

// Function b1-Managed.BED_FSMNode_GI_Global_SubG_GI_Loading_HandleDisConnect.GetNodeDescriptionInCS
// 0x0010 (0x0010 - 0x0000)
struct BED_FSMNode_GI_Global_SubG_GI_Loading_HandleDisConnect_GetNodeDescriptionInCS final
{
public:
	class FString                                 ReturnValue;                                       // 0x0000(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash)
};
//static_assert(alignof(BED_FSMNode_GI_Global_SubG_GI_Loading_HandleDisConnect_GetNodeDescriptionInCS) == 0x000008, "Wrong alignment on BED_FSMNode_GI_Global_SubG_GI_Loading_HandleDisConnect_GetNodeDescriptionInCS");
//static_assert(sizeof(BED_FSMNode_GI_Global_SubG_GI_Loading_HandleDisConnect_GetNodeDescriptionInCS) == 0x000010, "Wrong size on BED_FSMNode_GI_Global_SubG_GI_Loading_HandleDisConnect_GetNodeDescriptionInCS");
//static_assert(offsetof(BED_FSMNode_GI_Global_SubG_GI_Loading_HandleDisConnect_GetNodeDescriptionInCS, ReturnValue) == 0x000000, "Member 'BED_FSMNode_GI_Global_SubG_GI_Loading_HandleDisConnect_GetNodeDescriptionInCS::ReturnValue' has a wrong offset!");

// Function b1-Managed.BED_FSMNode_GI_Global_SubG_GI_Loading_PartyRoomClient.GetNodeDescriptionInCS
// 0x0010 (0x0010 - 0x0000)
struct BED_FSMNode_GI_Global_SubG_GI_Loading_PartyRoomClient_GetNodeDescriptionInCS final
{
public:
	class FString                                 ReturnValue;                                       // 0x0000(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash)
};
//static_assert(alignof(BED_FSMNode_GI_Global_SubG_GI_Loading_PartyRoomClient_GetNodeDescriptionInCS) == 0x000008, "Wrong alignment on BED_FSMNode_GI_Global_SubG_GI_Loading_PartyRoomClient_GetNodeDescriptionInCS");
//static_assert(sizeof(BED_FSMNode_GI_Global_SubG_GI_Loading_PartyRoomClient_GetNodeDescriptionInCS) == 0x000010, "Wrong size on BED_FSMNode_GI_Global_SubG_GI_Loading_PartyRoomClient_GetNodeDescriptionInCS");
//static_assert(offsetof(BED_FSMNode_GI_Global_SubG_GI_Loading_PartyRoomClient_GetNodeDescriptionInCS, ReturnValue) == 0x000000, "Member 'BED_FSMNode_GI_Global_SubG_GI_Loading_PartyRoomClient_GetNodeDescriptionInCS::ReturnValue' has a wrong offset!");

// Function b1-Managed.BED_FSMNode_GI_Global_SubG_GI_Loading_PostWXLoginFinish.GetNodeDescriptionInCS
// 0x0010 (0x0010 - 0x0000)
struct BED_FSMNode_GI_Global_SubG_GI_Loading_PostWXLoginFinish_GetNodeDescriptionInCS final
{
public:
	class FString                                 ReturnValue;                                       // 0x0000(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash)
};
//static_assert(alignof(BED_FSMNode_GI_Global_SubG_GI_Loading_PostWXLoginFinish_GetNodeDescriptionInCS) == 0x000008, "Wrong alignment on BED_FSMNode_GI_Global_SubG_GI_Loading_PostWXLoginFinish_GetNodeDescriptionInCS");
//static_assert(sizeof(BED_FSMNode_GI_Global_SubG_GI_Loading_PostWXLoginFinish_GetNodeDescriptionInCS) == 0x000010, "Wrong size on BED_FSMNode_GI_Global_SubG_GI_Loading_PostWXLoginFinish_GetNodeDescriptionInCS");
//static_assert(offsetof(BED_FSMNode_GI_Global_SubG_GI_Loading_PostWXLoginFinish_GetNodeDescriptionInCS, ReturnValue) == 0x000000, "Member 'BED_FSMNode_GI_Global_SubG_GI_Loading_PostWXLoginFinish_GetNodeDescriptionInCS::ReturnValue' has a wrong offset!");

// Function b1-Managed.BED_FSMNode_GI_Global_SubG_GI_Loading_PreEnterMainMenu.GetNodeDescriptionInCS
// 0x0010 (0x0010 - 0x0000)
struct BED_FSMNode_GI_Global_SubG_GI_Loading_PreEnterMainMenu_GetNodeDescriptionInCS final
{
public:
	class FString                                 ReturnValue;                                       // 0x0000(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash)
};
//static_assert(alignof(BED_FSMNode_GI_Global_SubG_GI_Loading_PreEnterMainMenu_GetNodeDescriptionInCS) == 0x000008, "Wrong alignment on BED_FSMNode_GI_Global_SubG_GI_Loading_PreEnterMainMenu_GetNodeDescriptionInCS");
//static_assert(sizeof(BED_FSMNode_GI_Global_SubG_GI_Loading_PreEnterMainMenu_GetNodeDescriptionInCS) == 0x000010, "Wrong size on BED_FSMNode_GI_Global_SubG_GI_Loading_PreEnterMainMenu_GetNodeDescriptionInCS");
//static_assert(offsetof(BED_FSMNode_GI_Global_SubG_GI_Loading_PreEnterMainMenu_GetNodeDescriptionInCS, ReturnValue) == 0x000000, "Member 'BED_FSMNode_GI_Global_SubG_GI_Loading_PreEnterMainMenu_GetNodeDescriptionInCS::ReturnValue' has a wrong offset!");

// Function b1-Managed.BED_FSMNode_GI_Global_SubG_GI_Loading_PreviewSequence.GetNodeDescriptionInCS
// 0x0010 (0x0010 - 0x0000)
struct BED_FSMNode_GI_Global_SubG_GI_Loading_PreviewSequence_GetNodeDescriptionInCS final
{
public:
	class FString                                 ReturnValue;                                       // 0x0000(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash)
};
//static_assert(alignof(BED_FSMNode_GI_Global_SubG_GI_Loading_PreviewSequence_GetNodeDescriptionInCS) == 0x000008, "Wrong alignment on BED_FSMNode_GI_Global_SubG_GI_Loading_PreviewSequence_GetNodeDescriptionInCS");
//static_assert(sizeof(BED_FSMNode_GI_Global_SubG_GI_Loading_PreviewSequence_GetNodeDescriptionInCS) == 0x000010, "Wrong size on BED_FSMNode_GI_Global_SubG_GI_Loading_PreviewSequence_GetNodeDescriptionInCS");
//static_assert(offsetof(BED_FSMNode_GI_Global_SubG_GI_Loading_PreviewSequence_GetNodeDescriptionInCS, ReturnValue) == 0x000000, "Member 'BED_FSMNode_GI_Global_SubG_GI_Loading_PreviewSequence_GetNodeDescriptionInCS::ReturnValue' has a wrong offset!");

// Function b1-Managed.BED_FSMNode_GI_Global_SubG_GI_Loading_SaveArchiveAndWaitFinish.GetNodeDescriptionInCS
// 0x0010 (0x0010 - 0x0000)
struct BED_FSMNode_GI_Global_SubG_GI_Loading_SaveArchiveAndWaitFinish_GetNodeDescriptionInCS final
{
public:
	class FString                                 ReturnValue;                                       // 0x0000(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash)
};
//static_assert(alignof(BED_FSMNode_GI_Global_SubG_GI_Loading_SaveArchiveAndWaitFinish_GetNodeDescriptionInCS) == 0x000008, "Wrong alignment on BED_FSMNode_GI_Global_SubG_GI_Loading_SaveArchiveAndWaitFinish_GetNodeDescriptionInCS");
//static_assert(sizeof(BED_FSMNode_GI_Global_SubG_GI_Loading_SaveArchiveAndWaitFinish_GetNodeDescriptionInCS) == 0x000010, "Wrong size on BED_FSMNode_GI_Global_SubG_GI_Loading_SaveArchiveAndWaitFinish_GetNodeDescriptionInCS");
//static_assert(offsetof(BED_FSMNode_GI_Global_SubG_GI_Loading_SaveArchiveAndWaitFinish_GetNodeDescriptionInCS, ReturnValue) == 0x000000, "Member 'BED_FSMNode_GI_Global_SubG_GI_Loading_SaveArchiveAndWaitFinish_GetNodeDescriptionInCS::ReturnValue' has a wrong offset!");

// Function b1-Managed.BED_FSMNode_GI_Global_SubG_GI_Loading_SetConfigAndPrecompilePSO.GetNodeDescriptionInCS
// 0x0010 (0x0010 - 0x0000)
struct BED_FSMNode_GI_Global_SubG_GI_Loading_SetConfigAndPrecompilePSO_GetNodeDescriptionInCS final
{
public:
	class FString                                 ReturnValue;                                       // 0x0000(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash)
};
//static_assert(alignof(BED_FSMNode_GI_Global_SubG_GI_Loading_SetConfigAndPrecompilePSO_GetNodeDescriptionInCS) == 0x000008, "Wrong alignment on BED_FSMNode_GI_Global_SubG_GI_Loading_SetConfigAndPrecompilePSO_GetNodeDescriptionInCS");
//static_assert(sizeof(BED_FSMNode_GI_Global_SubG_GI_Loading_SetConfigAndPrecompilePSO_GetNodeDescriptionInCS) == 0x000010, "Wrong size on BED_FSMNode_GI_Global_SubG_GI_Loading_SetConfigAndPrecompilePSO_GetNodeDescriptionInCS");
//static_assert(offsetof(BED_FSMNode_GI_Global_SubG_GI_Loading_SetConfigAndPrecompilePSO_GetNodeDescriptionInCS, ReturnValue) == 0x000000, "Member 'BED_FSMNode_GI_Global_SubG_GI_Loading_SetConfigAndPrecompilePSO_GetNodeDescriptionInCS::ReturnValue' has a wrong offset!");

// Function b1-Managed.BED_FSMNode_GI_Global_SubG_GI_Loading_StartNewGame.GetNodeDescriptionInCS
// 0x0010 (0x0010 - 0x0000)
struct BED_FSMNode_GI_Global_SubG_GI_Loading_StartNewGame_GetNodeDescriptionInCS final
{
public:
	class FString                                 ReturnValue;                                       // 0x0000(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash)
};
//static_assert(alignof(BED_FSMNode_GI_Global_SubG_GI_Loading_StartNewGame_GetNodeDescriptionInCS) == 0x000008, "Wrong alignment on BED_FSMNode_GI_Global_SubG_GI_Loading_StartNewGame_GetNodeDescriptionInCS");
//static_assert(sizeof(BED_FSMNode_GI_Global_SubG_GI_Loading_StartNewGame_GetNodeDescriptionInCS) == 0x000010, "Wrong size on BED_FSMNode_GI_Global_SubG_GI_Loading_StartNewGame_GetNodeDescriptionInCS");
//static_assert(offsetof(BED_FSMNode_GI_Global_SubG_GI_Loading_StartNewGame_GetNodeDescriptionInCS, ReturnValue) == 0x000000, "Member 'BED_FSMNode_GI_Global_SubG_GI_Loading_StartNewGame_GetNodeDescriptionInCS::ReturnValue' has a wrong offset!");

// Function b1-Managed.BED_FSMNode_GI_Global_SubG_GI_Loading_StartNewGamePlus.GetNodeDescriptionInCS
// 0x0010 (0x0010 - 0x0000)
struct BED_FSMNode_GI_Global_SubG_GI_Loading_StartNewGamePlus_GetNodeDescriptionInCS final
{
public:
	class FString                                 ReturnValue;                                       // 0x0000(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash)
};
//static_assert(alignof(BED_FSMNode_GI_Global_SubG_GI_Loading_StartNewGamePlus_GetNodeDescriptionInCS) == 0x000008, "Wrong alignment on BED_FSMNode_GI_Global_SubG_GI_Loading_StartNewGamePlus_GetNodeDescriptionInCS");
//static_assert(sizeof(BED_FSMNode_GI_Global_SubG_GI_Loading_StartNewGamePlus_GetNodeDescriptionInCS) == 0x000010, "Wrong size on BED_FSMNode_GI_Global_SubG_GI_Loading_StartNewGamePlus_GetNodeDescriptionInCS");
//static_assert(offsetof(BED_FSMNode_GI_Global_SubG_GI_Loading_StartNewGamePlus_GetNodeDescriptionInCS, ReturnValue) == 0x000000, "Member 'BED_FSMNode_GI_Global_SubG_GI_Loading_StartNewGamePlus_GetNodeDescriptionInCS::ReturnValue' has a wrong offset!");

// Function b1-Managed.BED_FSMNode_GI_Global_SubG_GI_Loading_StartUp.GetNodeDescriptionInCS
// 0x0010 (0x0010 - 0x0000)
struct BED_FSMNode_GI_Global_SubG_GI_Loading_StartUp_GetNodeDescriptionInCS final
{
public:
	class FString                                 ReturnValue;                                       // 0x0000(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash)
};
//static_assert(alignof(BED_FSMNode_GI_Global_SubG_GI_Loading_StartUp_GetNodeDescriptionInCS) == 0x000008, "Wrong alignment on BED_FSMNode_GI_Global_SubG_GI_Loading_StartUp_GetNodeDescriptionInCS");
//static_assert(sizeof(BED_FSMNode_GI_Global_SubG_GI_Loading_StartUp_GetNodeDescriptionInCS) == 0x000010, "Wrong size on BED_FSMNode_GI_Global_SubG_GI_Loading_StartUp_GetNodeDescriptionInCS");
//static_assert(offsetof(BED_FSMNode_GI_Global_SubG_GI_Loading_StartUp_GetNodeDescriptionInCS, ReturnValue) == 0x000000, "Member 'BED_FSMNode_GI_Global_SubG_GI_Loading_StartUp_GetNodeDescriptionInCS::ReturnValue' has a wrong offset!");

// Function b1-Managed.BED_FSMNode_GI_Global_SubG_GI_Loading_Teleport.GetNodeDescriptionInCS
// 0x0010 (0x0010 - 0x0000)
struct BED_FSMNode_GI_Global_SubG_GI_Loading_Teleport_GetNodeDescriptionInCS final
{
public:
	class FString                                 ReturnValue;                                       // 0x0000(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash)
};
//static_assert(alignof(BED_FSMNode_GI_Global_SubG_GI_Loading_Teleport_GetNodeDescriptionInCS) == 0x000008, "Wrong alignment on BED_FSMNode_GI_Global_SubG_GI_Loading_Teleport_GetNodeDescriptionInCS");
//static_assert(sizeof(BED_FSMNode_GI_Global_SubG_GI_Loading_Teleport_GetNodeDescriptionInCS) == 0x000010, "Wrong size on BED_FSMNode_GI_Global_SubG_GI_Loading_Teleport_GetNodeDescriptionInCS");
//static_assert(offsetof(BED_FSMNode_GI_Global_SubG_GI_Loading_Teleport_GetNodeDescriptionInCS, ReturnValue) == 0x000000, "Member 'BED_FSMNode_GI_Global_SubG_GI_Loading_Teleport_GetNodeDescriptionInCS::ReturnValue' has a wrong offset!");

// Function b1-Managed.BED_FSMNode_GI_Global_SubG_GI_Loading_ToiletClient.GetNodeDescriptionInCS
// 0x0010 (0x0010 - 0x0000)
struct BED_FSMNode_GI_Global_SubG_GI_Loading_ToiletClient_GetNodeDescriptionInCS final
{
public:
	class FString                                 ReturnValue;                                       // 0x0000(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash)
};
//static_assert(alignof(BED_FSMNode_GI_Global_SubG_GI_Loading_ToiletClient_GetNodeDescriptionInCS) == 0x000008, "Wrong alignment on BED_FSMNode_GI_Global_SubG_GI_Loading_ToiletClient_GetNodeDescriptionInCS");
//static_assert(sizeof(BED_FSMNode_GI_Global_SubG_GI_Loading_ToiletClient_GetNodeDescriptionInCS) == 0x000010, "Wrong size on BED_FSMNode_GI_Global_SubG_GI_Loading_ToiletClient_GetNodeDescriptionInCS");
//static_assert(offsetof(BED_FSMNode_GI_Global_SubG_GI_Loading_ToiletClient_GetNodeDescriptionInCS, ReturnValue) == 0x000000, "Member 'BED_FSMNode_GI_Global_SubG_GI_Loading_ToiletClient_GetNodeDescriptionInCS::ReturnValue' has a wrong offset!");

// Function b1-Managed.BED_FSMNode_GI_Global_SubG_GI_Loading_ToiletDedicateServer.GetNodeDescriptionInCS
// 0x0010 (0x0010 - 0x0000)
struct BED_FSMNode_GI_Global_SubG_GI_Loading_ToiletDedicateServer_GetNodeDescriptionInCS final
{
public:
	class FString                                 ReturnValue;                                       // 0x0000(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash)
};
//static_assert(alignof(BED_FSMNode_GI_Global_SubG_GI_Loading_ToiletDedicateServer_GetNodeDescriptionInCS) == 0x000008, "Wrong alignment on BED_FSMNode_GI_Global_SubG_GI_Loading_ToiletDedicateServer_GetNodeDescriptionInCS");
//static_assert(sizeof(BED_FSMNode_GI_Global_SubG_GI_Loading_ToiletDedicateServer_GetNodeDescriptionInCS) == 0x000010, "Wrong size on BED_FSMNode_GI_Global_SubG_GI_Loading_ToiletDedicateServer_GetNodeDescriptionInCS");
//static_assert(offsetof(BED_FSMNode_GI_Global_SubG_GI_Loading_ToiletDedicateServer_GetNodeDescriptionInCS, ReturnValue) == 0x000000, "Member 'BED_FSMNode_GI_Global_SubG_GI_Loading_ToiletDedicateServer_GetNodeDescriptionInCS::ReturnValue' has a wrong offset!");

// Function b1-Managed.BED_FSMNode_GI_Global_SubG_GI_Loading_ToiletListenServer.GetNodeDescriptionInCS
// 0x0010 (0x0010 - 0x0000)
struct BED_FSMNode_GI_Global_SubG_GI_Loading_ToiletListenServer_GetNodeDescriptionInCS final
{
public:
	class FString                                 ReturnValue;                                       // 0x0000(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash)
};
//static_assert(alignof(BED_FSMNode_GI_Global_SubG_GI_Loading_ToiletListenServer_GetNodeDescriptionInCS) == 0x000008, "Wrong alignment on BED_FSMNode_GI_Global_SubG_GI_Loading_ToiletListenServer_GetNodeDescriptionInCS");
//static_assert(sizeof(BED_FSMNode_GI_Global_SubG_GI_Loading_ToiletListenServer_GetNodeDescriptionInCS) == 0x000010, "Wrong size on BED_FSMNode_GI_Global_SubG_GI_Loading_ToiletListenServer_GetNodeDescriptionInCS");
//static_assert(offsetof(BED_FSMNode_GI_Global_SubG_GI_Loading_ToiletListenServer_GetNodeDescriptionInCS, ReturnValue) == 0x000000, "Member 'BED_FSMNode_GI_Global_SubG_GI_Loading_ToiletListenServer_GetNodeDescriptionInCS::ReturnValue' has a wrong offset!");

// Function b1-Managed.BED_FSMNode_GI_Global_SubG_GI_Loading_ToiletStandAlone.GetNodeDescriptionInCS
// 0x0010 (0x0010 - 0x0000)
struct BED_FSMNode_GI_Global_SubG_GI_Loading_ToiletStandAlone_GetNodeDescriptionInCS final
{
public:
	class FString                                 ReturnValue;                                       // 0x0000(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash)
};
//static_assert(alignof(BED_FSMNode_GI_Global_SubG_GI_Loading_ToiletStandAlone_GetNodeDescriptionInCS) == 0x000008, "Wrong alignment on BED_FSMNode_GI_Global_SubG_GI_Loading_ToiletStandAlone_GetNodeDescriptionInCS");
//static_assert(sizeof(BED_FSMNode_GI_Global_SubG_GI_Loading_ToiletStandAlone_GetNodeDescriptionInCS) == 0x000010, "Wrong size on BED_FSMNode_GI_Global_SubG_GI_Loading_ToiletStandAlone_GetNodeDescriptionInCS");
//static_assert(offsetof(BED_FSMNode_GI_Global_SubG_GI_Loading_ToiletStandAlone_GetNodeDescriptionInCS, ReturnValue) == 0x000000, "Member 'BED_FSMNode_GI_Global_SubG_GI_Loading_ToiletStandAlone_GetNodeDescriptionInCS::ReturnValue' has a wrong offset!");

// Function b1-Managed.BED_FSMNode_GI_Global_SubG_GI_Loading_TravelToNextChapter.GetNodeDescriptionInCS
// 0x0010 (0x0010 - 0x0000)
struct BED_FSMNode_GI_Global_SubG_GI_Loading_TravelToNextChapter_GetNodeDescriptionInCS final
{
public:
	class FString                                 ReturnValue;                                       // 0x0000(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash)
};
//static_assert(alignof(BED_FSMNode_GI_Global_SubG_GI_Loading_TravelToNextChapter_GetNodeDescriptionInCS) == 0x000008, "Wrong alignment on BED_FSMNode_GI_Global_SubG_GI_Loading_TravelToNextChapter_GetNodeDescriptionInCS");
//static_assert(sizeof(BED_FSMNode_GI_Global_SubG_GI_Loading_TravelToNextChapter_GetNodeDescriptionInCS) == 0x000010, "Wrong size on BED_FSMNode_GI_Global_SubG_GI_Loading_TravelToNextChapter_GetNodeDescriptionInCS");
//static_assert(offsetof(BED_FSMNode_GI_Global_SubG_GI_Loading_TravelToNextChapter_GetNodeDescriptionInCS, ReturnValue) == 0x000000, "Member 'BED_FSMNode_GI_Global_SubG_GI_Loading_TravelToNextChapter_GetNodeDescriptionInCS::ReturnValue' has a wrong offset!");

// Function b1-Managed.BED_FSMNode_GI_Global_SubG_GI_Loading_UnKnowLevelTravel.GetNodeDescriptionInCS
// 0x0010 (0x0010 - 0x0000)
struct BED_FSMNode_GI_Global_SubG_GI_Loading_UnKnowLevelTravel_GetNodeDescriptionInCS final
{
public:
	class FString                                 ReturnValue;                                       // 0x0000(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash)
};
//static_assert(alignof(BED_FSMNode_GI_Global_SubG_GI_Loading_UnKnowLevelTravel_GetNodeDescriptionInCS) == 0x000008, "Wrong alignment on BED_FSMNode_GI_Global_SubG_GI_Loading_UnKnowLevelTravel_GetNodeDescriptionInCS");
//static_assert(sizeof(BED_FSMNode_GI_Global_SubG_GI_Loading_UnKnowLevelTravel_GetNodeDescriptionInCS) == 0x000010, "Wrong size on BED_FSMNode_GI_Global_SubG_GI_Loading_UnKnowLevelTravel_GetNodeDescriptionInCS");
//static_assert(offsetof(BED_FSMNode_GI_Global_SubG_GI_Loading_UnKnowLevelTravel_GetNodeDescriptionInCS, ReturnValue) == 0x000000, "Member 'BED_FSMNode_GI_Global_SubG_GI_Loading_UnKnowLevelTravel_GetNodeDescriptionInCS::ReturnValue' has a wrong offset!");

// Function b1-Managed.BED_FSMNode_GI_Global_WaittingSelectLevel820Demo.PostPropertyChanged
// 0x0020 (0x0020 - 0x0000)
struct BED_FSMNode_GI_Global_WaittingSelectLevel820Demo_PostPropertyChanged final
{
public:
	class FString                                 MemberName;                                        // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash)
	class FString                                 PropertyName;                                      // 0x0010(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash)
};
//static_assert(alignof(BED_FSMNode_GI_Global_WaittingSelectLevel820Demo_PostPropertyChanged) == 0x000008, "Wrong alignment on BED_FSMNode_GI_Global_WaittingSelectLevel820Demo_PostPropertyChanged");
//static_assert(sizeof(BED_FSMNode_GI_Global_WaittingSelectLevel820Demo_PostPropertyChanged) == 0x000020, "Wrong size on BED_FSMNode_GI_Global_WaittingSelectLevel820Demo_PostPropertyChanged");
//static_assert(offsetof(BED_FSMNode_GI_Global_WaittingSelectLevel820Demo_PostPropertyChanged, MemberName) == 0x000000, "Member 'BED_FSMNode_GI_Global_WaittingSelectLevel820Demo_PostPropertyChanged::MemberName' has a wrong offset!");
//static_assert(offsetof(BED_FSMNode_GI_Global_WaittingSelectLevel820Demo_PostPropertyChanged, PropertyName) == 0x000010, "Member 'BED_FSMNode_GI_Global_WaittingSelectLevel820Demo_PostPropertyChanged::PropertyName' has a wrong offset!");

// Function b1-Managed.BED_FSMNode_GI_Global_WaittingSelectLevel820Demo.GetNodeDescriptionInCS
// 0x0010 (0x0010 - 0x0000)
struct BED_FSMNode_GI_Global_WaittingSelectLevel820Demo_GetNodeDescriptionInCS final
{
public:
	class FString                                 ReturnValue;                                       // 0x0000(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash)
};
//static_assert(alignof(BED_FSMNode_GI_Global_WaittingSelectLevel820Demo_GetNodeDescriptionInCS) == 0x000008, "Wrong alignment on BED_FSMNode_GI_Global_WaittingSelectLevel820Demo_GetNodeDescriptionInCS");
//static_assert(sizeof(BED_FSMNode_GI_Global_WaittingSelectLevel820Demo_GetNodeDescriptionInCS) == 0x000010, "Wrong size on BED_FSMNode_GI_Global_WaittingSelectLevel820Demo_GetNodeDescriptionInCS");
//static_assert(offsetof(BED_FSMNode_GI_Global_WaittingSelectLevel820Demo_GetNodeDescriptionInCS, ReturnValue) == 0x000000, "Member 'BED_FSMNode_GI_Global_WaittingSelectLevel820Demo_GetNodeDescriptionInCS::ReturnValue' has a wrong offset!");

// Function b1-Managed.BED_FSMNode_GI_LoadingAnyState.PostPropertyChanged
// 0x0020 (0x0020 - 0x0000)
struct BED_FSMNode_GI_LoadingAnyState_PostPropertyChanged final
{
public:
	class FString                                 MemberName;                                        // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash)
	class FString                                 PropertyName;                                      // 0x0010(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash)
};
//static_assert(alignof(BED_FSMNode_GI_LoadingAnyState_PostPropertyChanged) == 0x000008, "Wrong alignment on BED_FSMNode_GI_LoadingAnyState_PostPropertyChanged");
//static_assert(sizeof(BED_FSMNode_GI_LoadingAnyState_PostPropertyChanged) == 0x000020, "Wrong size on BED_FSMNode_GI_LoadingAnyState_PostPropertyChanged");
//static_assert(offsetof(BED_FSMNode_GI_LoadingAnyState_PostPropertyChanged, MemberName) == 0x000000, "Member 'BED_FSMNode_GI_LoadingAnyState_PostPropertyChanged::MemberName' has a wrong offset!");
//static_assert(offsetof(BED_FSMNode_GI_LoadingAnyState_PostPropertyChanged, PropertyName) == 0x000010, "Member 'BED_FSMNode_GI_LoadingAnyState_PostPropertyChanged::PropertyName' has a wrong offset!");

// Function b1-Managed.BED_MovieNode_BeforePlay.GetNodeDescriptionInCS
// 0x0010 (0x0010 - 0x0000)
struct BED_MovieNode_BeforePlay_GetNodeDescriptionInCS final
{
public:
	class FString                                 ReturnValue;                                       // 0x0000(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash)
};
//static_assert(alignof(BED_MovieNode_BeforePlay_GetNodeDescriptionInCS) == 0x000008, "Wrong alignment on BED_MovieNode_BeforePlay_GetNodeDescriptionInCS");
//static_assert(sizeof(BED_MovieNode_BeforePlay_GetNodeDescriptionInCS) == 0x000010, "Wrong size on BED_MovieNode_BeforePlay_GetNodeDescriptionInCS");
//static_assert(offsetof(BED_MovieNode_BeforePlay_GetNodeDescriptionInCS, ReturnValue) == 0x000000, "Member 'BED_MovieNode_BeforePlay_GetNodeDescriptionInCS::ReturnValue' has a wrong offset!");

// Function b1-Managed.BED_FSMNode_GI_Loading_AdjustPSOCachePrecompileBatch.PostPropertyChanged
// 0x0020 (0x0020 - 0x0000)
struct BED_FSMNode_GI_Loading_AdjustPSOCachePrecompileBatch_PostPropertyChanged final
{
public:
	class FString                                 MemberName;                                        // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash)
	class FString                                 PropertyName;                                      // 0x0010(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash)
};
//static_assert(alignof(BED_FSMNode_GI_Loading_AdjustPSOCachePrecompileBatch_PostPropertyChanged) == 0x000008, "Wrong alignment on BED_FSMNode_GI_Loading_AdjustPSOCachePrecompileBatch_PostPropertyChanged");
//static_assert(sizeof(BED_FSMNode_GI_Loading_AdjustPSOCachePrecompileBatch_PostPropertyChanged) == 0x000020, "Wrong size on BED_FSMNode_GI_Loading_AdjustPSOCachePrecompileBatch_PostPropertyChanged");
//static_assert(offsetof(BED_FSMNode_GI_Loading_AdjustPSOCachePrecompileBatch_PostPropertyChanged, MemberName) == 0x000000, "Member 'BED_FSMNode_GI_Loading_AdjustPSOCachePrecompileBatch_PostPropertyChanged::MemberName' has a wrong offset!");
//static_assert(offsetof(BED_FSMNode_GI_Loading_AdjustPSOCachePrecompileBatch_PostPropertyChanged, PropertyName) == 0x000010, "Member 'BED_FSMNode_GI_Loading_AdjustPSOCachePrecompileBatch_PostPropertyChanged::PropertyName' has a wrong offset!");

// Function b1-Managed.BED_FSMNode_GI_Loading_AdjustPSOCachePrecompileBatch.GetNodeDescriptionInCS
// 0x0010 (0x0010 - 0x0000)
struct BED_FSMNode_GI_Loading_AdjustPSOCachePrecompileBatch_GetNodeDescriptionInCS final
{
public:
	class FString                                 ReturnValue;                                       // 0x0000(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash)
};
//static_assert(alignof(BED_FSMNode_GI_Loading_AdjustPSOCachePrecompileBatch_GetNodeDescriptionInCS) == 0x000008, "Wrong alignment on BED_FSMNode_GI_Loading_AdjustPSOCachePrecompileBatch_GetNodeDescriptionInCS");
//static_assert(sizeof(BED_FSMNode_GI_Loading_AdjustPSOCachePrecompileBatch_GetNodeDescriptionInCS) == 0x000010, "Wrong size on BED_FSMNode_GI_Loading_AdjustPSOCachePrecompileBatch_GetNodeDescriptionInCS");
//static_assert(offsetof(BED_FSMNode_GI_Loading_AdjustPSOCachePrecompileBatch_GetNodeDescriptionInCS, ReturnValue) == 0x000000, "Member 'BED_FSMNode_GI_Loading_AdjustPSOCachePrecompileBatch_GetNodeDescriptionInCS::ReturnValue' has a wrong offset!");

// Function b1-Managed.BED_FSMNode_GI_Loading_ChangeGameDefaultMap.PostPropertyChanged
// 0x0020 (0x0020 - 0x0000)
struct BED_FSMNode_GI_Loading_ChangeGameDefaultMap_PostPropertyChanged final
{
public:
	class FString                                 MemberName;                                        // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash)
	class FString                                 PropertyName;                                      // 0x0010(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash)
};
//static_assert(alignof(BED_FSMNode_GI_Loading_ChangeGameDefaultMap_PostPropertyChanged) == 0x000008, "Wrong alignment on BED_FSMNode_GI_Loading_ChangeGameDefaultMap_PostPropertyChanged");
//static_assert(sizeof(BED_FSMNode_GI_Loading_ChangeGameDefaultMap_PostPropertyChanged) == 0x000020, "Wrong size on BED_FSMNode_GI_Loading_ChangeGameDefaultMap_PostPropertyChanged");
//static_assert(offsetof(BED_FSMNode_GI_Loading_ChangeGameDefaultMap_PostPropertyChanged, MemberName) == 0x000000, "Member 'BED_FSMNode_GI_Loading_ChangeGameDefaultMap_PostPropertyChanged::MemberName' has a wrong offset!");
//static_assert(offsetof(BED_FSMNode_GI_Loading_ChangeGameDefaultMap_PostPropertyChanged, PropertyName) == 0x000010, "Member 'BED_FSMNode_GI_Loading_ChangeGameDefaultMap_PostPropertyChanged::PropertyName' has a wrong offset!");

// Function b1-Managed.BED_FSMNode_GI_Loading_ChangeGameDefaultMap.GetNodeDescriptionInCS
// 0x0010 (0x0010 - 0x0000)
struct BED_FSMNode_GI_Loading_ChangeGameDefaultMap_GetNodeDescriptionInCS final
{
public:
	class FString                                 ReturnValue;                                       // 0x0000(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash)
};
//static_assert(alignof(BED_FSMNode_GI_Loading_ChangeGameDefaultMap_GetNodeDescriptionInCS) == 0x000008, "Wrong alignment on BED_FSMNode_GI_Loading_ChangeGameDefaultMap_GetNodeDescriptionInCS");
//static_assert(sizeof(BED_FSMNode_GI_Loading_ChangeGameDefaultMap_GetNodeDescriptionInCS) == 0x000010, "Wrong size on BED_FSMNode_GI_Loading_ChangeGameDefaultMap_GetNodeDescriptionInCS");
//static_assert(offsetof(BED_FSMNode_GI_Loading_ChangeGameDefaultMap_GetNodeDescriptionInCS, ReturnValue) == 0x000000, "Member 'BED_FSMNode_GI_Loading_ChangeGameDefaultMap_GetNodeDescriptionInCS::ReturnValue' has a wrong offset!");

// Function b1-Managed.BED_FSMNode_GI_Loading_CheckGSSdkServerConfig.PostPropertyChanged
// 0x0020 (0x0020 - 0x0000)
struct BED_FSMNode_GI_Loading_CheckGSSdkServerConfig_PostPropertyChanged final
{
public:
	class FString                                 MemberName;                                        // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash)
	class FString                                 PropertyName;                                      // 0x0010(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash)
};
//static_assert(alignof(BED_FSMNode_GI_Loading_CheckGSSdkServerConfig_PostPropertyChanged) == 0x000008, "Wrong alignment on BED_FSMNode_GI_Loading_CheckGSSdkServerConfig_PostPropertyChanged");
//static_assert(sizeof(BED_FSMNode_GI_Loading_CheckGSSdkServerConfig_PostPropertyChanged) == 0x000020, "Wrong size on BED_FSMNode_GI_Loading_CheckGSSdkServerConfig_PostPropertyChanged");
//static_assert(offsetof(BED_FSMNode_GI_Loading_CheckGSSdkServerConfig_PostPropertyChanged, MemberName) == 0x000000, "Member 'BED_FSMNode_GI_Loading_CheckGSSdkServerConfig_PostPropertyChanged::MemberName' has a wrong offset!");
//static_assert(offsetof(BED_FSMNode_GI_Loading_CheckGSSdkServerConfig_PostPropertyChanged, PropertyName) == 0x000010, "Member 'BED_FSMNode_GI_Loading_CheckGSSdkServerConfig_PostPropertyChanged::PropertyName' has a wrong offset!");

// Function b1-Managed.BED_FSMNode_GI_Loading_CheckGSSdkServerConfig.GetNodeDescriptionInCS
// 0x0010 (0x0010 - 0x0000)
struct BED_FSMNode_GI_Loading_CheckGSSdkServerConfig_GetNodeDescriptionInCS final
{
public:
	class FString                                 ReturnValue;                                       // 0x0000(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash)
};
//static_assert(alignof(BED_FSMNode_GI_Loading_CheckGSSdkServerConfig_GetNodeDescriptionInCS) == 0x000008, "Wrong alignment on BED_FSMNode_GI_Loading_CheckGSSdkServerConfig_GetNodeDescriptionInCS");
//static_assert(sizeof(BED_FSMNode_GI_Loading_CheckGSSdkServerConfig_GetNodeDescriptionInCS) == 0x000010, "Wrong size on BED_FSMNode_GI_Loading_CheckGSSdkServerConfig_GetNodeDescriptionInCS");
//static_assert(offsetof(BED_FSMNode_GI_Loading_CheckGSSdkServerConfig_GetNodeDescriptionInCS, ReturnValue) == 0x000000, "Member 'BED_FSMNode_GI_Loading_CheckGSSdkServerConfig_GetNodeDescriptionInCS::ReturnValue' has a wrong offset!");

// Function b1-Managed.BED_FSMNode_GI_Loading_CloseLoadingScreen.PostPropertyChanged
// 0x0020 (0x0020 - 0x0000)
struct BED_FSMNode_GI_Loading_CloseLoadingScreen_PostPropertyChanged final
{
public:
	class FString                                 MemberName;                                        // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash)
	class FString                                 PropertyName;                                      // 0x0010(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash)
};
//static_assert(alignof(BED_FSMNode_GI_Loading_CloseLoadingScreen_PostPropertyChanged) == 0x000008, "Wrong alignment on BED_FSMNode_GI_Loading_CloseLoadingScreen_PostPropertyChanged");
//static_assert(sizeof(BED_FSMNode_GI_Loading_CloseLoadingScreen_PostPropertyChanged) == 0x000020, "Wrong size on BED_FSMNode_GI_Loading_CloseLoadingScreen_PostPropertyChanged");
//static_assert(offsetof(BED_FSMNode_GI_Loading_CloseLoadingScreen_PostPropertyChanged, MemberName) == 0x000000, "Member 'BED_FSMNode_GI_Loading_CloseLoadingScreen_PostPropertyChanged::MemberName' has a wrong offset!");
//static_assert(offsetof(BED_FSMNode_GI_Loading_CloseLoadingScreen_PostPropertyChanged, PropertyName) == 0x000010, "Member 'BED_FSMNode_GI_Loading_CloseLoadingScreen_PostPropertyChanged::PropertyName' has a wrong offset!");

// Function b1-Managed.BED_FSMNode_GI_Loading_CloseLoadingScreen.GetNodeDescriptionInCS
// 0x0010 (0x0010 - 0x0000)
struct BED_FSMNode_GI_Loading_CloseLoadingScreen_GetNodeDescriptionInCS final
{
public:
	class FString                                 ReturnValue;                                       // 0x0000(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash)
};
//static_assert(alignof(BED_FSMNode_GI_Loading_CloseLoadingScreen_GetNodeDescriptionInCS) == 0x000008, "Wrong alignment on BED_FSMNode_GI_Loading_CloseLoadingScreen_GetNodeDescriptionInCS");
//static_assert(sizeof(BED_FSMNode_GI_Loading_CloseLoadingScreen_GetNodeDescriptionInCS) == 0x000010, "Wrong size on BED_FSMNode_GI_Loading_CloseLoadingScreen_GetNodeDescriptionInCS");
//static_assert(offsetof(BED_FSMNode_GI_Loading_CloseLoadingScreen_GetNodeDescriptionInCS, ReturnValue) == 0x000000, "Member 'BED_FSMNode_GI_Loading_CloseLoadingScreen_GetNodeDescriptionInCS::ReturnValue' has a wrong offset!");

// Function b1-Managed.BED_FSMNode_GI_Loading_ECSWorldBeginPlay.PostPropertyChanged
// 0x0020 (0x0020 - 0x0000)
struct BED_FSMNode_GI_Loading_ECSWorldBeginPlay_PostPropertyChanged final
{
public:
	class FString                                 MemberName;                                        // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash)
	class FString                                 PropertyName;                                      // 0x0010(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash)
};
//static_assert(alignof(BED_FSMNode_GI_Loading_ECSWorldBeginPlay_PostPropertyChanged) == 0x000008, "Wrong alignment on BED_FSMNode_GI_Loading_ECSWorldBeginPlay_PostPropertyChanged");
//static_assert(sizeof(BED_FSMNode_GI_Loading_ECSWorldBeginPlay_PostPropertyChanged) == 0x000020, "Wrong size on BED_FSMNode_GI_Loading_ECSWorldBeginPlay_PostPropertyChanged");
//static_assert(offsetof(BED_FSMNode_GI_Loading_ECSWorldBeginPlay_PostPropertyChanged, MemberName) == 0x000000, "Member 'BED_FSMNode_GI_Loading_ECSWorldBeginPlay_PostPropertyChanged::MemberName' has a wrong offset!");
//static_assert(offsetof(BED_FSMNode_GI_Loading_ECSWorldBeginPlay_PostPropertyChanged, PropertyName) == 0x000010, "Member 'BED_FSMNode_GI_Loading_ECSWorldBeginPlay_PostPropertyChanged::PropertyName' has a wrong offset!");

// Function b1-Managed.BED_FSMNode_GI_Loading_ECSWorldBeginPlay.GetNodeDescriptionInCS
// 0x0010 (0x0010 - 0x0000)
struct BED_FSMNode_GI_Loading_ECSWorldBeginPlay_GetNodeDescriptionInCS final
{
public:
	class FString                                 ReturnValue;                                       // 0x0000(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash)
};
//static_assert(alignof(BED_FSMNode_GI_Loading_ECSWorldBeginPlay_GetNodeDescriptionInCS) == 0x000008, "Wrong alignment on BED_FSMNode_GI_Loading_ECSWorldBeginPlay_GetNodeDescriptionInCS");
//static_assert(sizeof(BED_FSMNode_GI_Loading_ECSWorldBeginPlay_GetNodeDescriptionInCS) == 0x000010, "Wrong size on BED_FSMNode_GI_Loading_ECSWorldBeginPlay_GetNodeDescriptionInCS");
//static_assert(offsetof(BED_FSMNode_GI_Loading_ECSWorldBeginPlay_GetNodeDescriptionInCS, ReturnValue) == 0x000000, "Member 'BED_FSMNode_GI_Loading_ECSWorldBeginPlay_GetNodeDescriptionInCS::ReturnValue' has a wrong offset!");

// Function b1-Managed.QuestCovertTimerOverlapComp.OnCollisionBeginOverlap
// 0x0108 (0x0108 - 0x0000)
struct QuestCovertTimerOverlapComp_OnCollisionBeginOverlap final
{
public:
	class UPrimitiveComponent*                    OverlappedComponent;                               // 0x0000(0x0008)(ExportObject, Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class AActor*                                 OtherActor;                                        // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UPrimitiveComponent*                    OtherComp;                                         // 0x0010(0x0008)(ExportObject, Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         OtherBodyIndex;                                    // 0x0018(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         bFromSweep : 1;                                    // 0x001C(0x0001)(BitIndex: 0x00, PropSize: 0x0001 (Parm, NoDestructor, HasGetValueTypeHash))
	uint8                                         Pad_1D[0x3];                                       // 0x001D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FHitResult                             SweepResult;                                       // 0x0020(0x00E8)(Parm, IsPlainOldData, NoDestructor)
};
//static_assert(alignof(QuestCovertTimerOverlapComp_OnCollisionBeginOverlap) == 0x000008, "Wrong alignment on QuestCovertTimerOverlapComp_OnCollisionBeginOverlap");
//static_assert(sizeof(QuestCovertTimerOverlapComp_OnCollisionBeginOverlap) == 0x000108, "Wrong size on QuestCovertTimerOverlapComp_OnCollisionBeginOverlap");
//static_assert(offsetof(QuestCovertTimerOverlapComp_OnCollisionBeginOverlap, OverlappedComponent) == 0x000000, "Member 'QuestCovertTimerOverlapComp_OnCollisionBeginOverlap::OverlappedComponent' has a wrong offset!");
//static_assert(offsetof(QuestCovertTimerOverlapComp_OnCollisionBeginOverlap, OtherActor) == 0x000008, "Member 'QuestCovertTimerOverlapComp_OnCollisionBeginOverlap::OtherActor' has a wrong offset!");
//static_assert(offsetof(QuestCovertTimerOverlapComp_OnCollisionBeginOverlap, OtherComp) == 0x000010, "Member 'QuestCovertTimerOverlapComp_OnCollisionBeginOverlap::OtherComp' has a wrong offset!");
//static_assert(offsetof(QuestCovertTimerOverlapComp_OnCollisionBeginOverlap, OtherBodyIndex) == 0x000018, "Member 'QuestCovertTimerOverlapComp_OnCollisionBeginOverlap::OtherBodyIndex' has a wrong offset!");
//static_assert(offsetof(QuestCovertTimerOverlapComp_OnCollisionBeginOverlap, SweepResult) == 0x000020, "Member 'QuestCovertTimerOverlapComp_OnCollisionBeginOverlap::SweepResult' has a wrong offset!");

// Function b1-Managed.QuestCovertTimerOverlapComp.OnCollisionEndOverlap
// 0x0020 (0x0020 - 0x0000)
struct QuestCovertTimerOverlapComp_OnCollisionEndOverlap final
{
public:
	class UPrimitiveComponent*                    OverlappedComponent;                               // 0x0000(0x0008)(ExportObject, Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class AActor*                                 OtherActor;                                        // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UPrimitiveComponent*                    OtherComp;                                         // 0x0010(0x0008)(ExportObject, Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         OtherBodyIndex;                                    // 0x0018(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
//static_assert(alignof(QuestCovertTimerOverlapComp_OnCollisionEndOverlap) == 0x000008, "Wrong alignment on QuestCovertTimerOverlapComp_OnCollisionEndOverlap");
//static_assert(sizeof(QuestCovertTimerOverlapComp_OnCollisionEndOverlap) == 0x000020, "Wrong size on QuestCovertTimerOverlapComp_OnCollisionEndOverlap");
//static_assert(offsetof(QuestCovertTimerOverlapComp_OnCollisionEndOverlap, OverlappedComponent) == 0x000000, "Member 'QuestCovertTimerOverlapComp_OnCollisionEndOverlap::OverlappedComponent' has a wrong offset!");
//static_assert(offsetof(QuestCovertTimerOverlapComp_OnCollisionEndOverlap, OtherActor) == 0x000008, "Member 'QuestCovertTimerOverlapComp_OnCollisionEndOverlap::OtherActor' has a wrong offset!");
//static_assert(offsetof(QuestCovertTimerOverlapComp_OnCollisionEndOverlap, OtherComp) == 0x000010, "Member 'QuestCovertTimerOverlapComp_OnCollisionEndOverlap::OtherComp' has a wrong offset!");
//static_assert(offsetof(QuestCovertTimerOverlapComp_OnCollisionEndOverlap, OtherBodyIndex) == 0x000018, "Member 'QuestCovertTimerOverlapComp_OnCollisionEndOverlap::OtherBodyIndex' has a wrong offset!");

// Function b1-Managed.BED_FSMNode_GI_Loading_EngineHandleDisconnect.PostPropertyChanged
// 0x0020 (0x0020 - 0x0000)
struct BED_FSMNode_GI_Loading_EngineHandleDisconnect_PostPropertyChanged final
{
public:
	class FString                                 MemberName;                                        // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash)
	class FString                                 PropertyName;                                      // 0x0010(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash)
};
//static_assert(alignof(BED_FSMNode_GI_Loading_EngineHandleDisconnect_PostPropertyChanged) == 0x000008, "Wrong alignment on BED_FSMNode_GI_Loading_EngineHandleDisconnect_PostPropertyChanged");
//static_assert(sizeof(BED_FSMNode_GI_Loading_EngineHandleDisconnect_PostPropertyChanged) == 0x000020, "Wrong size on BED_FSMNode_GI_Loading_EngineHandleDisconnect_PostPropertyChanged");
//static_assert(offsetof(BED_FSMNode_GI_Loading_EngineHandleDisconnect_PostPropertyChanged, MemberName) == 0x000000, "Member 'BED_FSMNode_GI_Loading_EngineHandleDisconnect_PostPropertyChanged::MemberName' has a wrong offset!");
//static_assert(offsetof(BED_FSMNode_GI_Loading_EngineHandleDisconnect_PostPropertyChanged, PropertyName) == 0x000010, "Member 'BED_FSMNode_GI_Loading_EngineHandleDisconnect_PostPropertyChanged::PropertyName' has a wrong offset!");

// Function b1-Managed.BED_FSMNode_GI_Loading_EngineHandleDisconnect.GetNodeDescriptionInCS
// 0x0010 (0x0010 - 0x0000)
struct BED_FSMNode_GI_Loading_EngineHandleDisconnect_GetNodeDescriptionInCS final
{
public:
	class FString                                 ReturnValue;                                       // 0x0000(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash)
};
//static_assert(alignof(BED_FSMNode_GI_Loading_EngineHandleDisconnect_GetNodeDescriptionInCS) == 0x000008, "Wrong alignment on BED_FSMNode_GI_Loading_EngineHandleDisconnect_GetNodeDescriptionInCS");
//static_assert(sizeof(BED_FSMNode_GI_Loading_EngineHandleDisconnect_GetNodeDescriptionInCS) == 0x000010, "Wrong size on BED_FSMNode_GI_Loading_EngineHandleDisconnect_GetNodeDescriptionInCS");
//static_assert(offsetof(BED_FSMNode_GI_Loading_EngineHandleDisconnect_GetNodeDescriptionInCS, ReturnValue) == 0x000000, "Member 'BED_FSMNode_GI_Loading_EngineHandleDisconnect_GetNodeDescriptionInCS::ReturnValue' has a wrong offset!");

// Function b1-Managed.BED_FSMNode_GI_Loading_FillLocalBPCRoleData.PostPropertyChanged
// 0x0020 (0x0020 - 0x0000)
struct BED_FSMNode_GI_Loading_FillLocalBPCRoleData_PostPropertyChanged final
{
public:
	class FString                                 MemberName;                                        // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash)
	class FString                                 PropertyName;                                      // 0x0010(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash)
};
//static_assert(alignof(BED_FSMNode_GI_Loading_FillLocalBPCRoleData_PostPropertyChanged) == 0x000008, "Wrong alignment on BED_FSMNode_GI_Loading_FillLocalBPCRoleData_PostPropertyChanged");
//static_assert(sizeof(BED_FSMNode_GI_Loading_FillLocalBPCRoleData_PostPropertyChanged) == 0x000020, "Wrong size on BED_FSMNode_GI_Loading_FillLocalBPCRoleData_PostPropertyChanged");
//static_assert(offsetof(BED_FSMNode_GI_Loading_FillLocalBPCRoleData_PostPropertyChanged, MemberName) == 0x000000, "Member 'BED_FSMNode_GI_Loading_FillLocalBPCRoleData_PostPropertyChanged::MemberName' has a wrong offset!");
//static_assert(offsetof(BED_FSMNode_GI_Loading_FillLocalBPCRoleData_PostPropertyChanged, PropertyName) == 0x000010, "Member 'BED_FSMNode_GI_Loading_FillLocalBPCRoleData_PostPropertyChanged::PropertyName' has a wrong offset!");

// Function b1-Managed.BED_FSMNode_GI_Loading_FillLocalBPCRoleData.GetNodeDescriptionInCS
// 0x0010 (0x0010 - 0x0000)
struct BED_FSMNode_GI_Loading_FillLocalBPCRoleData_GetNodeDescriptionInCS final
{
public:
	class FString                                 ReturnValue;                                       // 0x0000(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash)
};
//static_assert(alignof(BED_FSMNode_GI_Loading_FillLocalBPCRoleData_GetNodeDescriptionInCS) == 0x000008, "Wrong alignment on BED_FSMNode_GI_Loading_FillLocalBPCRoleData_GetNodeDescriptionInCS");
//static_assert(sizeof(BED_FSMNode_GI_Loading_FillLocalBPCRoleData_GetNodeDescriptionInCS) == 0x000010, "Wrong size on BED_FSMNode_GI_Loading_FillLocalBPCRoleData_GetNodeDescriptionInCS");
//static_assert(offsetof(BED_FSMNode_GI_Loading_FillLocalBPCRoleData_GetNodeDescriptionInCS, ReturnValue) == 0x000000, "Member 'BED_FSMNode_GI_Loading_FillLocalBPCRoleData_GetNodeDescriptionInCS::ReturnValue' has a wrong offset!");

// Function b1-Managed.BED_FSMNode_GI_Loading_FirstStartGameSettings.PostPropertyChanged
// 0x0020 (0x0020 - 0x0000)
struct BED_FSMNode_GI_Loading_FirstStartGameSettings_PostPropertyChanged final
{
public:
	class FString                                 MemberName;                                        // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash)
	class FString                                 PropertyName;                                      // 0x0010(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash)
};
//static_assert(alignof(BED_FSMNode_GI_Loading_FirstStartGameSettings_PostPropertyChanged) == 0x000008, "Wrong alignment on BED_FSMNode_GI_Loading_FirstStartGameSettings_PostPropertyChanged");
//static_assert(sizeof(BED_FSMNode_GI_Loading_FirstStartGameSettings_PostPropertyChanged) == 0x000020, "Wrong size on BED_FSMNode_GI_Loading_FirstStartGameSettings_PostPropertyChanged");
//static_assert(offsetof(BED_FSMNode_GI_Loading_FirstStartGameSettings_PostPropertyChanged, MemberName) == 0x000000, "Member 'BED_FSMNode_GI_Loading_FirstStartGameSettings_PostPropertyChanged::MemberName' has a wrong offset!");
//static_assert(offsetof(BED_FSMNode_GI_Loading_FirstStartGameSettings_PostPropertyChanged, PropertyName) == 0x000010, "Member 'BED_FSMNode_GI_Loading_FirstStartGameSettings_PostPropertyChanged::PropertyName' has a wrong offset!");

// Function b1-Managed.BED_FSMNode_GI_Loading_FirstStartGameSettings.GetNodeDescriptionInCS
// 0x0010 (0x0010 - 0x0000)
struct BED_FSMNode_GI_Loading_FirstStartGameSettings_GetNodeDescriptionInCS final
{
public:
	class FString                                 ReturnValue;                                       // 0x0000(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash)
};
//static_assert(alignof(BED_FSMNode_GI_Loading_FirstStartGameSettings_GetNodeDescriptionInCS) == 0x000008, "Wrong alignment on BED_FSMNode_GI_Loading_FirstStartGameSettings_GetNodeDescriptionInCS");
//static_assert(sizeof(BED_FSMNode_GI_Loading_FirstStartGameSettings_GetNodeDescriptionInCS) == 0x000010, "Wrong size on BED_FSMNode_GI_Loading_FirstStartGameSettings_GetNodeDescriptionInCS");
//static_assert(offsetof(BED_FSMNode_GI_Loading_FirstStartGameSettings_GetNodeDescriptionInCS, ReturnValue) == 0x000000, "Member 'BED_FSMNode_GI_Loading_FirstStartGameSettings_GetNodeDescriptionInCS::ReturnValue' has a wrong offset!");

// Function b1-Managed.BED_FSMNode_GI_Loading_GSGBtlOnBattleDestroy.PostPropertyChanged
// 0x0020 (0x0020 - 0x0000)
struct BED_FSMNode_GI_Loading_GSGBtlOnBattleDestroy_PostPropertyChanged final
{
public:
	class FString                                 MemberName;                                        // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash)
	class FString                                 PropertyName;                                      // 0x0010(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash)
};
//static_assert(alignof(BED_FSMNode_GI_Loading_GSGBtlOnBattleDestroy_PostPropertyChanged) == 0x000008, "Wrong alignment on BED_FSMNode_GI_Loading_GSGBtlOnBattleDestroy_PostPropertyChanged");
//static_assert(sizeof(BED_FSMNode_GI_Loading_GSGBtlOnBattleDestroy_PostPropertyChanged) == 0x000020, "Wrong size on BED_FSMNode_GI_Loading_GSGBtlOnBattleDestroy_PostPropertyChanged");
//static_assert(offsetof(BED_FSMNode_GI_Loading_GSGBtlOnBattleDestroy_PostPropertyChanged, MemberName) == 0x000000, "Member 'BED_FSMNode_GI_Loading_GSGBtlOnBattleDestroy_PostPropertyChanged::MemberName' has a wrong offset!");
//static_assert(offsetof(BED_FSMNode_GI_Loading_GSGBtlOnBattleDestroy_PostPropertyChanged, PropertyName) == 0x000010, "Member 'BED_FSMNode_GI_Loading_GSGBtlOnBattleDestroy_PostPropertyChanged::PropertyName' has a wrong offset!");

// Function b1-Managed.BED_FSMNode_GI_Loading_GSGBtlOnBattleDestroy.GetNodeDescriptionInCS
// 0x0010 (0x0010 - 0x0000)
struct BED_FSMNode_GI_Loading_GSGBtlOnBattleDestroy_GetNodeDescriptionInCS final
{
public:
	class FString                                 ReturnValue;                                       // 0x0000(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash)
};
//static_assert(alignof(BED_FSMNode_GI_Loading_GSGBtlOnBattleDestroy_GetNodeDescriptionInCS) == 0x000008, "Wrong alignment on BED_FSMNode_GI_Loading_GSGBtlOnBattleDestroy_GetNodeDescriptionInCS");
//static_assert(sizeof(BED_FSMNode_GI_Loading_GSGBtlOnBattleDestroy_GetNodeDescriptionInCS) == 0x000010, "Wrong size on BED_FSMNode_GI_Loading_GSGBtlOnBattleDestroy_GetNodeDescriptionInCS");
//static_assert(offsetof(BED_FSMNode_GI_Loading_GSGBtlOnBattleDestroy_GetNodeDescriptionInCS, ReturnValue) == 0x000000, "Member 'BED_FSMNode_GI_Loading_GSGBtlOnBattleDestroy_GetNodeDescriptionInCS::ReturnValue' has a wrong offset!");

// Function b1-Managed.BED_FSMNode_GI_Loading_GSGEnterBattleLevel.PostPropertyChanged
// 0x0020 (0x0020 - 0x0000)
struct BED_FSMNode_GI_Loading_GSGEnterBattleLevel_PostPropertyChanged final
{
public:
	class FString                                 MemberName;                                        // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash)
	class FString                                 PropertyName;                                      // 0x0010(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash)
};
//static_assert(alignof(BED_FSMNode_GI_Loading_GSGEnterBattleLevel_PostPropertyChanged) == 0x000008, "Wrong alignment on BED_FSMNode_GI_Loading_GSGEnterBattleLevel_PostPropertyChanged");
//static_assert(sizeof(BED_FSMNode_GI_Loading_GSGEnterBattleLevel_PostPropertyChanged) == 0x000020, "Wrong size on BED_FSMNode_GI_Loading_GSGEnterBattleLevel_PostPropertyChanged");
//static_assert(offsetof(BED_FSMNode_GI_Loading_GSGEnterBattleLevel_PostPropertyChanged, MemberName) == 0x000000, "Member 'BED_FSMNode_GI_Loading_GSGEnterBattleLevel_PostPropertyChanged::MemberName' has a wrong offset!");
//static_assert(offsetof(BED_FSMNode_GI_Loading_GSGEnterBattleLevel_PostPropertyChanged, PropertyName) == 0x000010, "Member 'BED_FSMNode_GI_Loading_GSGEnterBattleLevel_PostPropertyChanged::PropertyName' has a wrong offset!");

// Function b1-Managed.BED_FSMNode_GI_Loading_GSGEnterBattleLevel.GetNodeDescriptionInCS
// 0x0010 (0x0010 - 0x0000)
struct BED_FSMNode_GI_Loading_GSGEnterBattleLevel_GetNodeDescriptionInCS final
{
public:
	class FString                                 ReturnValue;                                       // 0x0000(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash)
};
//static_assert(alignof(BED_FSMNode_GI_Loading_GSGEnterBattleLevel_GetNodeDescriptionInCS) == 0x000008, "Wrong alignment on BED_FSMNode_GI_Loading_GSGEnterBattleLevel_GetNodeDescriptionInCS");
//static_assert(sizeof(BED_FSMNode_GI_Loading_GSGEnterBattleLevel_GetNodeDescriptionInCS) == 0x000010, "Wrong size on BED_FSMNode_GI_Loading_GSGEnterBattleLevel_GetNodeDescriptionInCS");
//static_assert(offsetof(BED_FSMNode_GI_Loading_GSGEnterBattleLevel_GetNodeDescriptionInCS, ReturnValue) == 0x000000, "Member 'BED_FSMNode_GI_Loading_GSGEnterBattleLevel_GetNodeDescriptionInCS::ReturnValue' has a wrong offset!");

// Function b1-Managed.BED_FSMNode_GI_Loading_GSGExitLevel.PostPropertyChanged
// 0x0020 (0x0020 - 0x0000)
struct BED_FSMNode_GI_Loading_GSGExitLevel_PostPropertyChanged final
{
public:
	class FString                                 MemberName;                                        // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash)
	class FString                                 PropertyName;                                      // 0x0010(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash)
};
//static_assert(alignof(BED_FSMNode_GI_Loading_GSGExitLevel_PostPropertyChanged) == 0x000008, "Wrong alignment on BED_FSMNode_GI_Loading_GSGExitLevel_PostPropertyChanged");
//static_assert(sizeof(BED_FSMNode_GI_Loading_GSGExitLevel_PostPropertyChanged) == 0x000020, "Wrong size on BED_FSMNode_GI_Loading_GSGExitLevel_PostPropertyChanged");
//static_assert(offsetof(BED_FSMNode_GI_Loading_GSGExitLevel_PostPropertyChanged, MemberName) == 0x000000, "Member 'BED_FSMNode_GI_Loading_GSGExitLevel_PostPropertyChanged::MemberName' has a wrong offset!");
//static_assert(offsetof(BED_FSMNode_GI_Loading_GSGExitLevel_PostPropertyChanged, PropertyName) == 0x000010, "Member 'BED_FSMNode_GI_Loading_GSGExitLevel_PostPropertyChanged::PropertyName' has a wrong offset!");

// Function b1-Managed.BED_FSMNode_GI_Loading_GSGExitLevel.GetNodeDescriptionInCS
// 0x0010 (0x0010 - 0x0000)
struct BED_FSMNode_GI_Loading_GSGExitLevel_GetNodeDescriptionInCS final
{
public:
	class FString                                 ReturnValue;                                       // 0x0000(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash)
};
//static_assert(alignof(BED_FSMNode_GI_Loading_GSGExitLevel_GetNodeDescriptionInCS) == 0x000008, "Wrong alignment on BED_FSMNode_GI_Loading_GSGExitLevel_GetNodeDescriptionInCS");
//static_assert(sizeof(BED_FSMNode_GI_Loading_GSGExitLevel_GetNodeDescriptionInCS) == 0x000010, "Wrong size on BED_FSMNode_GI_Loading_GSGExitLevel_GetNodeDescriptionInCS");
//static_assert(offsetof(BED_FSMNode_GI_Loading_GSGExitLevel_GetNodeDescriptionInCS, ReturnValue) == 0x000000, "Member 'BED_FSMNode_GI_Loading_GSGExitLevel_GetNodeDescriptionInCS::ReturnValue' has a wrong offset!");

// Function b1-Managed.BED_FSMNode_GI_Loading_GSGOnBattleStart.PostPropertyChanged
// 0x0020 (0x0020 - 0x0000)
struct BED_FSMNode_GI_Loading_GSGOnBattleStart_PostPropertyChanged final
{
public:
	class FString                                 MemberName;                                        // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash)
	class FString                                 PropertyName;                                      // 0x0010(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash)
};
//static_assert(alignof(BED_FSMNode_GI_Loading_GSGOnBattleStart_PostPropertyChanged) == 0x000008, "Wrong alignment on BED_FSMNode_GI_Loading_GSGOnBattleStart_PostPropertyChanged");
//static_assert(sizeof(BED_FSMNode_GI_Loading_GSGOnBattleStart_PostPropertyChanged) == 0x000020, "Wrong size on BED_FSMNode_GI_Loading_GSGOnBattleStart_PostPropertyChanged");
//static_assert(offsetof(BED_FSMNode_GI_Loading_GSGOnBattleStart_PostPropertyChanged, MemberName) == 0x000000, "Member 'BED_FSMNode_GI_Loading_GSGOnBattleStart_PostPropertyChanged::MemberName' has a wrong offset!");
//static_assert(offsetof(BED_FSMNode_GI_Loading_GSGOnBattleStart_PostPropertyChanged, PropertyName) == 0x000010, "Member 'BED_FSMNode_GI_Loading_GSGOnBattleStart_PostPropertyChanged::PropertyName' has a wrong offset!");

// Function b1-Managed.BED_FSMNode_GI_Loading_GSGOnBattleStart.GetNodeDescriptionInCS
// 0x0010 (0x0010 - 0x0000)
struct BED_FSMNode_GI_Loading_GSGOnBattleStart_GetNodeDescriptionInCS final
{
public:
	class FString                                 ReturnValue;                                       // 0x0000(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash)
};
//static_assert(alignof(BED_FSMNode_GI_Loading_GSGOnBattleStart_GetNodeDescriptionInCS) == 0x000008, "Wrong alignment on BED_FSMNode_GI_Loading_GSGOnBattleStart_GetNodeDescriptionInCS");
//static_assert(sizeof(BED_FSMNode_GI_Loading_GSGOnBattleStart_GetNodeDescriptionInCS) == 0x000010, "Wrong size on BED_FSMNode_GI_Loading_GSGOnBattleStart_GetNodeDescriptionInCS");
//static_assert(offsetof(BED_FSMNode_GI_Loading_GSGOnBattleStart_GetNodeDescriptionInCS, ReturnValue) == 0x000000, "Member 'BED_FSMNode_GI_Loading_GSGOnBattleStart_GetNodeDescriptionInCS::ReturnValue' has a wrong offset!");

// Function b1-Managed.BED_FSMNode_GI_Loading_GSGShowBattleUI.PostPropertyChanged
// 0x0020 (0x0020 - 0x0000)
struct BED_FSMNode_GI_Loading_GSGShowBattleUI_PostPropertyChanged final
{
public:
	class FString                                 MemberName;                                        // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash)
	class FString                                 PropertyName;                                      // 0x0010(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash)
};
//static_assert(alignof(BED_FSMNode_GI_Loading_GSGShowBattleUI_PostPropertyChanged) == 0x000008, "Wrong alignment on BED_FSMNode_GI_Loading_GSGShowBattleUI_PostPropertyChanged");
//static_assert(sizeof(BED_FSMNode_GI_Loading_GSGShowBattleUI_PostPropertyChanged) == 0x000020, "Wrong size on BED_FSMNode_GI_Loading_GSGShowBattleUI_PostPropertyChanged");
//static_assert(offsetof(BED_FSMNode_GI_Loading_GSGShowBattleUI_PostPropertyChanged, MemberName) == 0x000000, "Member 'BED_FSMNode_GI_Loading_GSGShowBattleUI_PostPropertyChanged::MemberName' has a wrong offset!");
//static_assert(offsetof(BED_FSMNode_GI_Loading_GSGShowBattleUI_PostPropertyChanged, PropertyName) == 0x000010, "Member 'BED_FSMNode_GI_Loading_GSGShowBattleUI_PostPropertyChanged::PropertyName' has a wrong offset!");

// Function b1-Managed.BED_FSMNode_GI_Loading_GSGShowBattleUI.GetNodeDescriptionInCS
// 0x0010 (0x0010 - 0x0000)
struct BED_FSMNode_GI_Loading_GSGShowBattleUI_GetNodeDescriptionInCS final
{
public:
	class FString                                 ReturnValue;                                       // 0x0000(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash)
};
//static_assert(alignof(BED_FSMNode_GI_Loading_GSGShowBattleUI_GetNodeDescriptionInCS) == 0x000008, "Wrong alignment on BED_FSMNode_GI_Loading_GSGShowBattleUI_GetNodeDescriptionInCS");
//static_assert(sizeof(BED_FSMNode_GI_Loading_GSGShowBattleUI_GetNodeDescriptionInCS) == 0x000010, "Wrong size on BED_FSMNode_GI_Loading_GSGShowBattleUI_GetNodeDescriptionInCS");
//static_assert(offsetof(BED_FSMNode_GI_Loading_GSGShowBattleUI_GetNodeDescriptionInCS, ReturnValue) == 0x000000, "Member 'BED_FSMNode_GI_Loading_GSGShowBattleUI_GetNodeDescriptionInCS::ReturnValue' has a wrong offset!");

// Function b1-Managed.BED_FSMNode_GI_Loading_GSGShowLoginUI.PostPropertyChanged
// 0x0020 (0x0020 - 0x0000)
struct BED_FSMNode_GI_Loading_GSGShowLoginUI_PostPropertyChanged final
{
public:
	class FString                                 MemberName;                                        // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash)
	class FString                                 PropertyName;                                      // 0x0010(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash)
};
//static_assert(alignof(BED_FSMNode_GI_Loading_GSGShowLoginUI_PostPropertyChanged) == 0x000008, "Wrong alignment on BED_FSMNode_GI_Loading_GSGShowLoginUI_PostPropertyChanged");
//static_assert(sizeof(BED_FSMNode_GI_Loading_GSGShowLoginUI_PostPropertyChanged) == 0x000020, "Wrong size on BED_FSMNode_GI_Loading_GSGShowLoginUI_PostPropertyChanged");
//static_assert(offsetof(BED_FSMNode_GI_Loading_GSGShowLoginUI_PostPropertyChanged, MemberName) == 0x000000, "Member 'BED_FSMNode_GI_Loading_GSGShowLoginUI_PostPropertyChanged::MemberName' has a wrong offset!");
//static_assert(offsetof(BED_FSMNode_GI_Loading_GSGShowLoginUI_PostPropertyChanged, PropertyName) == 0x000010, "Member 'BED_FSMNode_GI_Loading_GSGShowLoginUI_PostPropertyChanged::PropertyName' has a wrong offset!");

// Function b1-Managed.BED_FSMNode_GI_Loading_GSGShowLoginUI.GetNodeDescriptionInCS
// 0x0010 (0x0010 - 0x0000)
struct BED_FSMNode_GI_Loading_GSGShowLoginUI_GetNodeDescriptionInCS final
{
public:
	class FString                                 ReturnValue;                                       // 0x0000(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash)
};
//static_assert(alignof(BED_FSMNode_GI_Loading_GSGShowLoginUI_GetNodeDescriptionInCS) == 0x000008, "Wrong alignment on BED_FSMNode_GI_Loading_GSGShowLoginUI_GetNodeDescriptionInCS");
//static_assert(sizeof(BED_FSMNode_GI_Loading_GSGShowLoginUI_GetNodeDescriptionInCS) == 0x000010, "Wrong size on BED_FSMNode_GI_Loading_GSGShowLoginUI_GetNodeDescriptionInCS");
//static_assert(offsetof(BED_FSMNode_GI_Loading_GSGShowLoginUI_GetNodeDescriptionInCS, ReturnValue) == 0x000000, "Member 'BED_FSMNode_GI_Loading_GSGShowLoginUI_GetNodeDescriptionInCS::ReturnValue' has a wrong offset!");

// Function b1-Managed.BED_FSMNode_GI_Loading_GSGShowWXlogin.PostPropertyChanged
// 0x0020 (0x0020 - 0x0000)
struct BED_FSMNode_GI_Loading_GSGShowWXlogin_PostPropertyChanged final
{
public:
	class FString                                 MemberName;                                        // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash)
	class FString                                 PropertyName;                                      // 0x0010(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash)
};
//static_assert(alignof(BED_FSMNode_GI_Loading_GSGShowWXlogin_PostPropertyChanged) == 0x000008, "Wrong alignment on BED_FSMNode_GI_Loading_GSGShowWXlogin_PostPropertyChanged");
//static_assert(sizeof(BED_FSMNode_GI_Loading_GSGShowWXlogin_PostPropertyChanged) == 0x000020, "Wrong size on BED_FSMNode_GI_Loading_GSGShowWXlogin_PostPropertyChanged");
//static_assert(offsetof(BED_FSMNode_GI_Loading_GSGShowWXlogin_PostPropertyChanged, MemberName) == 0x000000, "Member 'BED_FSMNode_GI_Loading_GSGShowWXlogin_PostPropertyChanged::MemberName' has a wrong offset!");
//static_assert(offsetof(BED_FSMNode_GI_Loading_GSGShowWXlogin_PostPropertyChanged, PropertyName) == 0x000010, "Member 'BED_FSMNode_GI_Loading_GSGShowWXlogin_PostPropertyChanged::PropertyName' has a wrong offset!");

// Function b1-Managed.BED_FSMNode_GI_Loading_GSGShowWXlogin.GetNodeDescriptionInCS
// 0x0010 (0x0010 - 0x0000)
struct BED_FSMNode_GI_Loading_GSGShowWXlogin_GetNodeDescriptionInCS final
{
public:
	class FString                                 ReturnValue;                                       // 0x0000(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash)
};
//static_assert(alignof(BED_FSMNode_GI_Loading_GSGShowWXlogin_GetNodeDescriptionInCS) == 0x000008, "Wrong alignment on BED_FSMNode_GI_Loading_GSGShowWXlogin_GetNodeDescriptionInCS");
//static_assert(sizeof(BED_FSMNode_GI_Loading_GSGShowWXlogin_GetNodeDescriptionInCS) == 0x000010, "Wrong size on BED_FSMNode_GI_Loading_GSGShowWXlogin_GetNodeDescriptionInCS");
//static_assert(offsetof(BED_FSMNode_GI_Loading_GSGShowWXlogin_GetNodeDescriptionInCS, ReturnValue) == 0x000000, "Member 'BED_FSMNode_GI_Loading_GSGShowWXlogin_GetNodeDescriptionInCS::ReturnValue' has a wrong offset!");

// Function b1-Managed.BGW_OnlineSubsystem.OnQueryIsOwnAdditionContentCompleteCS
// 0x0018 (0x0018 - 0x0000)
struct BGW_OnlineSubsystem_OnQueryIsOwnAdditionContentCompleteCS final
{
public:
	class FString                                 EntitlementId;                                     // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash)
	uint8                                         bWasSuccessful : 1;                                // 0x0010(0x0001)(BitIndex: 0x00, PropSize: 0x0001 (Parm, NoDestructor, HasGetValueTypeHash))
};
//static_assert(alignof(BGW_OnlineSubsystem_OnQueryIsOwnAdditionContentCompleteCS) == 0x000008, "Wrong alignment on BGW_OnlineSubsystem_OnQueryIsOwnAdditionContentCompleteCS");
//static_assert(sizeof(BGW_OnlineSubsystem_OnQueryIsOwnAdditionContentCompleteCS) == 0x000018, "Wrong size on BGW_OnlineSubsystem_OnQueryIsOwnAdditionContentCompleteCS");
//static_assert(offsetof(BGW_OnlineSubsystem_OnQueryIsOwnAdditionContentCompleteCS, EntitlementId) == 0x000000, "Member 'BGW_OnlineSubsystem_OnQueryIsOwnAdditionContentCompleteCS::EntitlementId' has a wrong offset!");

// Function b1-Managed.BGW_OnlineSubsystem.OnShowStoreUIClosedCS
// 0x0001 (0x0001 - 0x0000)
struct BGW_OnlineSubsystem_OnShowStoreUIClosedCS final
{
public:
	uint8                                         bPurchased : 1;                                    // 0x0000(0x0001)(BitIndex: 0x00, PropSize: 0x0001 (Parm, NoDestructor, HasGetValueTypeHash))
};
//static_assert(alignof(BGW_OnlineSubsystem_OnShowStoreUIClosedCS) == 0x000001, "Wrong alignment on BGW_OnlineSubsystem_OnShowStoreUIClosedCS");
//static_assert(sizeof(BGW_OnlineSubsystem_OnShowStoreUIClosedCS) == 0x000001, "Wrong size on BGW_OnlineSubsystem_OnShowStoreUIClosedCS");

// Function b1-Managed.BED_FSMNode_GI_Loading_InitCollectionSpawnActorState.PostPropertyChanged
// 0x0020 (0x0020 - 0x0000)
struct BED_FSMNode_GI_Loading_InitCollectionSpawnActorState_PostPropertyChanged final
{
public:
	class FString                                 MemberName;                                        // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash)
	class FString                                 PropertyName;                                      // 0x0010(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash)
};
//static_assert(alignof(BED_FSMNode_GI_Loading_InitCollectionSpawnActorState_PostPropertyChanged) == 0x000008, "Wrong alignment on BED_FSMNode_GI_Loading_InitCollectionSpawnActorState_PostPropertyChanged");
//static_assert(sizeof(BED_FSMNode_GI_Loading_InitCollectionSpawnActorState_PostPropertyChanged) == 0x000020, "Wrong size on BED_FSMNode_GI_Loading_InitCollectionSpawnActorState_PostPropertyChanged");
//static_assert(offsetof(BED_FSMNode_GI_Loading_InitCollectionSpawnActorState_PostPropertyChanged, MemberName) == 0x000000, "Member 'BED_FSMNode_GI_Loading_InitCollectionSpawnActorState_PostPropertyChanged::MemberName' has a wrong offset!");
//static_assert(offsetof(BED_FSMNode_GI_Loading_InitCollectionSpawnActorState_PostPropertyChanged, PropertyName) == 0x000010, "Member 'BED_FSMNode_GI_Loading_InitCollectionSpawnActorState_PostPropertyChanged::PropertyName' has a wrong offset!");

// Function b1-Managed.BED_FSMNode_GI_Loading_InitCollectionSpawnActorState.GetNodeDescriptionInCS
// 0x0010 (0x0010 - 0x0000)
struct BED_FSMNode_GI_Loading_InitCollectionSpawnActorState_GetNodeDescriptionInCS final
{
public:
	class FString                                 ReturnValue;                                       // 0x0000(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash)
};
//static_assert(alignof(BED_FSMNode_GI_Loading_InitCollectionSpawnActorState_GetNodeDescriptionInCS) == 0x000008, "Wrong alignment on BED_FSMNode_GI_Loading_InitCollectionSpawnActorState_GetNodeDescriptionInCS");
//static_assert(sizeof(BED_FSMNode_GI_Loading_InitCollectionSpawnActorState_GetNodeDescriptionInCS) == 0x000010, "Wrong size on BED_FSMNode_GI_Loading_InitCollectionSpawnActorState_GetNodeDescriptionInCS");
//static_assert(offsetof(BED_FSMNode_GI_Loading_InitCollectionSpawnActorState_GetNodeDescriptionInCS, ReturnValue) == 0x000000, "Member 'BED_FSMNode_GI_Loading_InitCollectionSpawnActorState_GetNodeDescriptionInCS::ReturnValue' has a wrong offset!");

// Function b1-Managed.BED_FSMNode_GI_Loading_InitLocalPlayerContainer.PostPropertyChanged
// 0x0020 (0x0020 - 0x0000)
struct BED_FSMNode_GI_Loading_InitLocalPlayerContainer_PostPropertyChanged final
{
public:
	class FString                                 MemberName;                                        // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash)
	class FString                                 PropertyName;                                      // 0x0010(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash)
};
//static_assert(alignof(BED_FSMNode_GI_Loading_InitLocalPlayerContainer_PostPropertyChanged) == 0x000008, "Wrong alignment on BED_FSMNode_GI_Loading_InitLocalPlayerContainer_PostPropertyChanged");
//static_assert(sizeof(BED_FSMNode_GI_Loading_InitLocalPlayerContainer_PostPropertyChanged) == 0x000020, "Wrong size on BED_FSMNode_GI_Loading_InitLocalPlayerContainer_PostPropertyChanged");
//static_assert(offsetof(BED_FSMNode_GI_Loading_InitLocalPlayerContainer_PostPropertyChanged, MemberName) == 0x000000, "Member 'BED_FSMNode_GI_Loading_InitLocalPlayerContainer_PostPropertyChanged::MemberName' has a wrong offset!");
//static_assert(offsetof(BED_FSMNode_GI_Loading_InitLocalPlayerContainer_PostPropertyChanged, PropertyName) == 0x000010, "Member 'BED_FSMNode_GI_Loading_InitLocalPlayerContainer_PostPropertyChanged::PropertyName' has a wrong offset!");

// Function b1-Managed.BED_FSMNode_GI_Loading_InitLocalPlayerContainer.GetNodeDescriptionInCS
// 0x0010 (0x0010 - 0x0000)
struct BED_FSMNode_GI_Loading_InitLocalPlayerContainer_GetNodeDescriptionInCS final
{
public:
	class FString                                 ReturnValue;                                       // 0x0000(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash)
};
//static_assert(alignof(BED_FSMNode_GI_Loading_InitLocalPlayerContainer_GetNodeDescriptionInCS) == 0x000008, "Wrong alignment on BED_FSMNode_GI_Loading_InitLocalPlayerContainer_GetNodeDescriptionInCS");
//static_assert(sizeof(BED_FSMNode_GI_Loading_InitLocalPlayerContainer_GetNodeDescriptionInCS) == 0x000010, "Wrong size on BED_FSMNode_GI_Loading_InitLocalPlayerContainer_GetNodeDescriptionInCS");
//static_assert(offsetof(BED_FSMNode_GI_Loading_InitLocalPlayerContainer_GetNodeDescriptionInCS, ReturnValue) == 0x000000, "Member 'BED_FSMNode_GI_Loading_InitLocalPlayerContainer_GetNodeDescriptionInCS::ReturnValue' has a wrong offset!");

// Function b1-Managed.BED_FSMNode_GI_Loading_LoadCommLevel.PostPropertyChanged
// 0x0020 (0x0020 - 0x0000)
struct BED_FSMNode_GI_Loading_LoadCommLevel_PostPropertyChanged final
{
public:
	class FString                                 MemberName;                                        // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash)
	class FString                                 PropertyName;                                      // 0x0010(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash)
};
//static_assert(alignof(BED_FSMNode_GI_Loading_LoadCommLevel_PostPropertyChanged) == 0x000008, "Wrong alignment on BED_FSMNode_GI_Loading_LoadCommLevel_PostPropertyChanged");
//static_assert(sizeof(BED_FSMNode_GI_Loading_LoadCommLevel_PostPropertyChanged) == 0x000020, "Wrong size on BED_FSMNode_GI_Loading_LoadCommLevel_PostPropertyChanged");
//static_assert(offsetof(BED_FSMNode_GI_Loading_LoadCommLevel_PostPropertyChanged, MemberName) == 0x000000, "Member 'BED_FSMNode_GI_Loading_LoadCommLevel_PostPropertyChanged::MemberName' has a wrong offset!");
//static_assert(offsetof(BED_FSMNode_GI_Loading_LoadCommLevel_PostPropertyChanged, PropertyName) == 0x000010, "Member 'BED_FSMNode_GI_Loading_LoadCommLevel_PostPropertyChanged::PropertyName' has a wrong offset!");

// Function b1-Managed.BED_FSMNode_GI_Loading_LoadCommLevel.GetNodeDescriptionInCS
// 0x0010 (0x0010 - 0x0000)
struct BED_FSMNode_GI_Loading_LoadCommLevel_GetNodeDescriptionInCS final
{
public:
	class FString                                 ReturnValue;                                       // 0x0000(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash)
};
//static_assert(alignof(BED_FSMNode_GI_Loading_LoadCommLevel_GetNodeDescriptionInCS) == 0x000008, "Wrong alignment on BED_FSMNode_GI_Loading_LoadCommLevel_GetNodeDescriptionInCS");
//static_assert(sizeof(BED_FSMNode_GI_Loading_LoadCommLevel_GetNodeDescriptionInCS) == 0x000010, "Wrong size on BED_FSMNode_GI_Loading_LoadCommLevel_GetNodeDescriptionInCS");
//static_assert(offsetof(BED_FSMNode_GI_Loading_LoadCommLevel_GetNodeDescriptionInCS, ReturnValue) == 0x000000, "Member 'BED_FSMNode_GI_Loading_LoadCommLevel_GetNodeDescriptionInCS::ReturnValue' has a wrong offset!");

// Function b1-Managed.BED_FSMNode_GI_Loading_LoadingUIFadeAway.PostPropertyChanged
// 0x0020 (0x0020 - 0x0000)
struct BED_FSMNode_GI_Loading_LoadingUIFadeAway_PostPropertyChanged final
{
public:
	class FString                                 MemberName;                                        // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash)
	class FString                                 PropertyName;                                      // 0x0010(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash)
};
//static_assert(alignof(BED_FSMNode_GI_Loading_LoadingUIFadeAway_PostPropertyChanged) == 0x000008, "Wrong alignment on BED_FSMNode_GI_Loading_LoadingUIFadeAway_PostPropertyChanged");
//static_assert(sizeof(BED_FSMNode_GI_Loading_LoadingUIFadeAway_PostPropertyChanged) == 0x000020, "Wrong size on BED_FSMNode_GI_Loading_LoadingUIFadeAway_PostPropertyChanged");
//static_assert(offsetof(BED_FSMNode_GI_Loading_LoadingUIFadeAway_PostPropertyChanged, MemberName) == 0x000000, "Member 'BED_FSMNode_GI_Loading_LoadingUIFadeAway_PostPropertyChanged::MemberName' has a wrong offset!");
//static_assert(offsetof(BED_FSMNode_GI_Loading_LoadingUIFadeAway_PostPropertyChanged, PropertyName) == 0x000010, "Member 'BED_FSMNode_GI_Loading_LoadingUIFadeAway_PostPropertyChanged::PropertyName' has a wrong offset!");

// Function b1-Managed.BED_FSMNode_GI_Loading_LoadingUIFadeAway.GetNodeDescriptionInCS
// 0x0010 (0x0010 - 0x0000)
struct BED_FSMNode_GI_Loading_LoadingUIFadeAway_GetNodeDescriptionInCS final
{
public:
	class FString                                 ReturnValue;                                       // 0x0000(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash)
};
//static_assert(alignof(BED_FSMNode_GI_Loading_LoadingUIFadeAway_GetNodeDescriptionInCS) == 0x000008, "Wrong alignment on BED_FSMNode_GI_Loading_LoadingUIFadeAway_GetNodeDescriptionInCS");
//static_assert(sizeof(BED_FSMNode_GI_Loading_LoadingUIFadeAway_GetNodeDescriptionInCS) == 0x000010, "Wrong size on BED_FSMNode_GI_Loading_LoadingUIFadeAway_GetNodeDescriptionInCS");
//static_assert(offsetof(BED_FSMNode_GI_Loading_LoadingUIFadeAway_GetNodeDescriptionInCS, ReturnValue) == 0x000000, "Member 'BED_FSMNode_GI_Loading_LoadingUIFadeAway_GetNodeDescriptionInCS::ReturnValue' has a wrong offset!");

// Function b1-Managed.BED_FSMNode_GI_Loading_LoadingUILinearTime.PostPropertyChanged
// 0x0020 (0x0020 - 0x0000)
struct BED_FSMNode_GI_Loading_LoadingUILinearTime_PostPropertyChanged final
{
public:
	class FString                                 MemberName;                                        // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash)
	class FString                                 PropertyName;                                      // 0x0010(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash)
};
//static_assert(alignof(BED_FSMNode_GI_Loading_LoadingUILinearTime_PostPropertyChanged) == 0x000008, "Wrong alignment on BED_FSMNode_GI_Loading_LoadingUILinearTime_PostPropertyChanged");
//static_assert(sizeof(BED_FSMNode_GI_Loading_LoadingUILinearTime_PostPropertyChanged) == 0x000020, "Wrong size on BED_FSMNode_GI_Loading_LoadingUILinearTime_PostPropertyChanged");
//static_assert(offsetof(BED_FSMNode_GI_Loading_LoadingUILinearTime_PostPropertyChanged, MemberName) == 0x000000, "Member 'BED_FSMNode_GI_Loading_LoadingUILinearTime_PostPropertyChanged::MemberName' has a wrong offset!");
//static_assert(offsetof(BED_FSMNode_GI_Loading_LoadingUILinearTime_PostPropertyChanged, PropertyName) == 0x000010, "Member 'BED_FSMNode_GI_Loading_LoadingUILinearTime_PostPropertyChanged::PropertyName' has a wrong offset!");

// Function b1-Managed.BED_FSMNode_GI_Loading_LoadingUILinearTime.GetNodeDescriptionInCS
// 0x0010 (0x0010 - 0x0000)
struct BED_FSMNode_GI_Loading_LoadingUILinearTime_GetNodeDescriptionInCS final
{
public:
	class FString                                 ReturnValue;                                       // 0x0000(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash)
};
//static_assert(alignof(BED_FSMNode_GI_Loading_LoadingUILinearTime_GetNodeDescriptionInCS) == 0x000008, "Wrong alignment on BED_FSMNode_GI_Loading_LoadingUILinearTime_GetNodeDescriptionInCS");
//static_assert(sizeof(BED_FSMNode_GI_Loading_LoadingUILinearTime_GetNodeDescriptionInCS) == 0x000010, "Wrong size on BED_FSMNode_GI_Loading_LoadingUILinearTime_GetNodeDescriptionInCS");
//static_assert(offsetof(BED_FSMNode_GI_Loading_LoadingUILinearTime_GetNodeDescriptionInCS, ReturnValue) == 0x000000, "Member 'BED_FSMNode_GI_Loading_LoadingUILinearTime_GetNodeDescriptionInCS::ReturnValue' has a wrong offset!");

// Function b1-Managed.BED_FSMNode_GI_Loading_MarkCanFinishLoopMovie.PostPropertyChanged
// 0x0020 (0x0020 - 0x0000)
struct BED_FSMNode_GI_Loading_MarkCanFinishLoopMovie_PostPropertyChanged final
{
public:
	class FString                                 MemberName;                                        // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash)
	class FString                                 PropertyName;                                      // 0x0010(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash)
};
//static_assert(alignof(BED_FSMNode_GI_Loading_MarkCanFinishLoopMovie_PostPropertyChanged) == 0x000008, "Wrong alignment on BED_FSMNode_GI_Loading_MarkCanFinishLoopMovie_PostPropertyChanged");
//static_assert(sizeof(BED_FSMNode_GI_Loading_MarkCanFinishLoopMovie_PostPropertyChanged) == 0x000020, "Wrong size on BED_FSMNode_GI_Loading_MarkCanFinishLoopMovie_PostPropertyChanged");
//static_assert(offsetof(BED_FSMNode_GI_Loading_MarkCanFinishLoopMovie_PostPropertyChanged, MemberName) == 0x000000, "Member 'BED_FSMNode_GI_Loading_MarkCanFinishLoopMovie_PostPropertyChanged::MemberName' has a wrong offset!");
//static_assert(offsetof(BED_FSMNode_GI_Loading_MarkCanFinishLoopMovie_PostPropertyChanged, PropertyName) == 0x000010, "Member 'BED_FSMNode_GI_Loading_MarkCanFinishLoopMovie_PostPropertyChanged::PropertyName' has a wrong offset!");

// Function b1-Managed.BED_FSMNode_GI_Loading_MarkCanFinishLoopMovie.GetNodeDescriptionInCS
// 0x0010 (0x0010 - 0x0000)
struct BED_FSMNode_GI_Loading_MarkCanFinishLoopMovie_GetNodeDescriptionInCS final
{
public:
	class FString                                 ReturnValue;                                       // 0x0000(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash)
};
//static_assert(alignof(BED_FSMNode_GI_Loading_MarkCanFinishLoopMovie_GetNodeDescriptionInCS) == 0x000008, "Wrong alignment on BED_FSMNode_GI_Loading_MarkCanFinishLoopMovie_GetNodeDescriptionInCS");
//static_assert(sizeof(BED_FSMNode_GI_Loading_MarkCanFinishLoopMovie_GetNodeDescriptionInCS) == 0x000010, "Wrong size on BED_FSMNode_GI_Loading_MarkCanFinishLoopMovie_GetNodeDescriptionInCS");
//static_assert(offsetof(BED_FSMNode_GI_Loading_MarkCanFinishLoopMovie_GetNodeDescriptionInCS, ReturnValue) == 0x000000, "Member 'BED_FSMNode_GI_Loading_MarkCanFinishLoopMovie_GetNodeDescriptionInCS::ReturnValue' has a wrong offset!");

// Function b1-Managed.BED_FSMNode_GI_Loading_MarkNewGameplusReady.PostPropertyChanged
// 0x0020 (0x0020 - 0x0000)
struct BED_FSMNode_GI_Loading_MarkNewGameplusReady_PostPropertyChanged final
{
public:
	class FString                                 MemberName;                                        // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash)
	class FString                                 PropertyName;                                      // 0x0010(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash)
};
//static_assert(alignof(BED_FSMNode_GI_Loading_MarkNewGameplusReady_PostPropertyChanged) == 0x000008, "Wrong alignment on BED_FSMNode_GI_Loading_MarkNewGameplusReady_PostPropertyChanged");
//static_assert(sizeof(BED_FSMNode_GI_Loading_MarkNewGameplusReady_PostPropertyChanged) == 0x000020, "Wrong size on BED_FSMNode_GI_Loading_MarkNewGameplusReady_PostPropertyChanged");
//static_assert(offsetof(BED_FSMNode_GI_Loading_MarkNewGameplusReady_PostPropertyChanged, MemberName) == 0x000000, "Member 'BED_FSMNode_GI_Loading_MarkNewGameplusReady_PostPropertyChanged::MemberName' has a wrong offset!");
//static_assert(offsetof(BED_FSMNode_GI_Loading_MarkNewGameplusReady_PostPropertyChanged, PropertyName) == 0x000010, "Member 'BED_FSMNode_GI_Loading_MarkNewGameplusReady_PostPropertyChanged::PropertyName' has a wrong offset!");

// Function b1-Managed.BED_FSMNode_GI_Loading_MarkNewGameplusReady.GetNodeDescriptionInCS
// 0x0010 (0x0010 - 0x0000)
struct BED_FSMNode_GI_Loading_MarkNewGameplusReady_GetNodeDescriptionInCS final
{
public:
	class FString                                 ReturnValue;                                       // 0x0000(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash)
};
//static_assert(alignof(BED_FSMNode_GI_Loading_MarkNewGameplusReady_GetNodeDescriptionInCS) == 0x000008, "Wrong alignment on BED_FSMNode_GI_Loading_MarkNewGameplusReady_GetNodeDescriptionInCS");
//static_assert(sizeof(BED_FSMNode_GI_Loading_MarkNewGameplusReady_GetNodeDescriptionInCS) == 0x000010, "Wrong size on BED_FSMNode_GI_Loading_MarkNewGameplusReady_GetNodeDescriptionInCS");
//static_assert(offsetof(BED_FSMNode_GI_Loading_MarkNewGameplusReady_GetNodeDescriptionInCS, ReturnValue) == 0x000000, "Member 'BED_FSMNode_GI_Loading_MarkNewGameplusReady_GetNodeDescriptionInCS::ReturnValue' has a wrong offset!");

// Function b1-Managed.BED_FSMNode_GI_Loading_NextChapterReqAndArchive.PostPropertyChanged
// 0x0020 (0x0020 - 0x0000)
struct BED_FSMNode_GI_Loading_NextChapterReqAndArchive_PostPropertyChanged final
{
public:
	class FString                                 MemberName;                                        // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash)
	class FString                                 PropertyName;                                      // 0x0010(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash)
};
//static_assert(alignof(BED_FSMNode_GI_Loading_NextChapterReqAndArchive_PostPropertyChanged) == 0x000008, "Wrong alignment on BED_FSMNode_GI_Loading_NextChapterReqAndArchive_PostPropertyChanged");
//static_assert(sizeof(BED_FSMNode_GI_Loading_NextChapterReqAndArchive_PostPropertyChanged) == 0x000020, "Wrong size on BED_FSMNode_GI_Loading_NextChapterReqAndArchive_PostPropertyChanged");
//static_assert(offsetof(BED_FSMNode_GI_Loading_NextChapterReqAndArchive_PostPropertyChanged, MemberName) == 0x000000, "Member 'BED_FSMNode_GI_Loading_NextChapterReqAndArchive_PostPropertyChanged::MemberName' has a wrong offset!");
//static_assert(offsetof(BED_FSMNode_GI_Loading_NextChapterReqAndArchive_PostPropertyChanged, PropertyName) == 0x000010, "Member 'BED_FSMNode_GI_Loading_NextChapterReqAndArchive_PostPropertyChanged::PropertyName' has a wrong offset!");

// Function b1-Managed.BED_FSMNode_GI_Loading_NextChapterReqAndArchive.GetNodeDescriptionInCS
// 0x0010 (0x0010 - 0x0000)
struct BED_FSMNode_GI_Loading_NextChapterReqAndArchive_GetNodeDescriptionInCS final
{
public:
	class FString                                 ReturnValue;                                       // 0x0000(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash)
};
//static_assert(alignof(BED_FSMNode_GI_Loading_NextChapterReqAndArchive_GetNodeDescriptionInCS) == 0x000008, "Wrong alignment on BED_FSMNode_GI_Loading_NextChapterReqAndArchive_GetNodeDescriptionInCS");
//static_assert(sizeof(BED_FSMNode_GI_Loading_NextChapterReqAndArchive_GetNodeDescriptionInCS) == 0x000010, "Wrong size on BED_FSMNode_GI_Loading_NextChapterReqAndArchive_GetNodeDescriptionInCS");
//static_assert(offsetof(BED_FSMNode_GI_Loading_NextChapterReqAndArchive_GetNodeDescriptionInCS, ReturnValue) == 0x000000, "Member 'BED_FSMNode_GI_Loading_NextChapterReqAndArchive_GetNodeDescriptionInCS::ReturnValue' has a wrong offset!");

// Function b1-Managed.BED_FSMNode_GI_Loading_OpenLevelByName.PostPropertyChanged
// 0x0020 (0x0020 - 0x0000)
struct BED_FSMNode_GI_Loading_OpenLevelByName_PostPropertyChanged final
{
public:
	class FString                                 MemberName;                                        // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash)
	class FString                                 PropertyName;                                      // 0x0010(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash)
};
//static_assert(alignof(BED_FSMNode_GI_Loading_OpenLevelByName_PostPropertyChanged) == 0x000008, "Wrong alignment on BED_FSMNode_GI_Loading_OpenLevelByName_PostPropertyChanged");
//static_assert(sizeof(BED_FSMNode_GI_Loading_OpenLevelByName_PostPropertyChanged) == 0x000020, "Wrong size on BED_FSMNode_GI_Loading_OpenLevelByName_PostPropertyChanged");
//static_assert(offsetof(BED_FSMNode_GI_Loading_OpenLevelByName_PostPropertyChanged, MemberName) == 0x000000, "Member 'BED_FSMNode_GI_Loading_OpenLevelByName_PostPropertyChanged::MemberName' has a wrong offset!");
//static_assert(offsetof(BED_FSMNode_GI_Loading_OpenLevelByName_PostPropertyChanged, PropertyName) == 0x000010, "Member 'BED_FSMNode_GI_Loading_OpenLevelByName_PostPropertyChanged::PropertyName' has a wrong offset!");

// Function b1-Managed.BED_FSMNode_GI_Loading_OpenLevelByName.GetNodeDescriptionInCS
// 0x0010 (0x0010 - 0x0000)
struct BED_FSMNode_GI_Loading_OpenLevelByName_GetNodeDescriptionInCS final
{
public:
	class FString                                 ReturnValue;                                       // 0x0000(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash)
};
//static_assert(alignof(BED_FSMNode_GI_Loading_OpenLevelByName_GetNodeDescriptionInCS) == 0x000008, "Wrong alignment on BED_FSMNode_GI_Loading_OpenLevelByName_GetNodeDescriptionInCS");
//static_assert(sizeof(BED_FSMNode_GI_Loading_OpenLevelByName_GetNodeDescriptionInCS) == 0x000010, "Wrong size on BED_FSMNode_GI_Loading_OpenLevelByName_GetNodeDescriptionInCS");
//static_assert(offsetof(BED_FSMNode_GI_Loading_OpenLevelByName_GetNodeDescriptionInCS, ReturnValue) == 0x000000, "Member 'BED_FSMNode_GI_Loading_OpenLevelByName_GetNodeDescriptionInCS::ReturnValue' has a wrong offset!");

// Function b1-Managed.BED_FSMNode_GI_Loading_OpenLevelDefaultBattle.PostPropertyChanged
// 0x0020 (0x0020 - 0x0000)
struct BED_FSMNode_GI_Loading_OpenLevelDefaultBattle_PostPropertyChanged final
{
public:
	class FString                                 MemberName;                                        // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash)
	class FString                                 PropertyName;                                      // 0x0010(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash)
};
//static_assert(alignof(BED_FSMNode_GI_Loading_OpenLevelDefaultBattle_PostPropertyChanged) == 0x000008, "Wrong alignment on BED_FSMNode_GI_Loading_OpenLevelDefaultBattle_PostPropertyChanged");
//static_assert(sizeof(BED_FSMNode_GI_Loading_OpenLevelDefaultBattle_PostPropertyChanged) == 0x000020, "Wrong size on BED_FSMNode_GI_Loading_OpenLevelDefaultBattle_PostPropertyChanged");
//static_assert(offsetof(BED_FSMNode_GI_Loading_OpenLevelDefaultBattle_PostPropertyChanged, MemberName) == 0x000000, "Member 'BED_FSMNode_GI_Loading_OpenLevelDefaultBattle_PostPropertyChanged::MemberName' has a wrong offset!");
//static_assert(offsetof(BED_FSMNode_GI_Loading_OpenLevelDefaultBattle_PostPropertyChanged, PropertyName) == 0x000010, "Member 'BED_FSMNode_GI_Loading_OpenLevelDefaultBattle_PostPropertyChanged::PropertyName' has a wrong offset!");

// Function b1-Managed.BED_FSMNode_GI_Loading_OpenLevelDefaultBattle.GetNodeDescriptionInCS
// 0x0010 (0x0010 - 0x0000)
struct BED_FSMNode_GI_Loading_OpenLevelDefaultBattle_GetNodeDescriptionInCS final
{
public:
	class FString                                 ReturnValue;                                       // 0x0000(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash)
};
//static_assert(alignof(BED_FSMNode_GI_Loading_OpenLevelDefaultBattle_GetNodeDescriptionInCS) == 0x000008, "Wrong alignment on BED_FSMNode_GI_Loading_OpenLevelDefaultBattle_GetNodeDescriptionInCS");
//static_assert(sizeof(BED_FSMNode_GI_Loading_OpenLevelDefaultBattle_GetNodeDescriptionInCS) == 0x000010, "Wrong size on BED_FSMNode_GI_Loading_OpenLevelDefaultBattle_GetNodeDescriptionInCS");
//static_assert(offsetof(BED_FSMNode_GI_Loading_OpenLevelDefaultBattle_GetNodeDescriptionInCS, ReturnValue) == 0x000000, "Member 'BED_FSMNode_GI_Loading_OpenLevelDefaultBattle_GetNodeDescriptionInCS::ReturnValue' has a wrong offset!");

// Function b1-Managed.BED_FSMNode_GI_Loading_OpenLevelStartUp.PostPropertyChanged
// 0x0020 (0x0020 - 0x0000)
struct BED_FSMNode_GI_Loading_OpenLevelStartUp_PostPropertyChanged final
{
public:
	class FString                                 MemberName;                                        // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash)
	class FString                                 PropertyName;                                      // 0x0010(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash)
};
//static_assert(alignof(BED_FSMNode_GI_Loading_OpenLevelStartUp_PostPropertyChanged) == 0x000008, "Wrong alignment on BED_FSMNode_GI_Loading_OpenLevelStartUp_PostPropertyChanged");
//static_assert(sizeof(BED_FSMNode_GI_Loading_OpenLevelStartUp_PostPropertyChanged) == 0x000020, "Wrong size on BED_FSMNode_GI_Loading_OpenLevelStartUp_PostPropertyChanged");
//static_assert(offsetof(BED_FSMNode_GI_Loading_OpenLevelStartUp_PostPropertyChanged, MemberName) == 0x000000, "Member 'BED_FSMNode_GI_Loading_OpenLevelStartUp_PostPropertyChanged::MemberName' has a wrong offset!");
//static_assert(offsetof(BED_FSMNode_GI_Loading_OpenLevelStartUp_PostPropertyChanged, PropertyName) == 0x000010, "Member 'BED_FSMNode_GI_Loading_OpenLevelStartUp_PostPropertyChanged::PropertyName' has a wrong offset!");

// Function b1-Managed.BED_FSMNode_GI_Loading_OpenLevelStartUp.GetNodeDescriptionInCS
// 0x0010 (0x0010 - 0x0000)
struct BED_FSMNode_GI_Loading_OpenLevelStartUp_GetNodeDescriptionInCS final
{
public:
	class FString                                 ReturnValue;                                       // 0x0000(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash)
};
//static_assert(alignof(BED_FSMNode_GI_Loading_OpenLevelStartUp_GetNodeDescriptionInCS) == 0x000008, "Wrong alignment on BED_FSMNode_GI_Loading_OpenLevelStartUp_GetNodeDescriptionInCS");
//static_assert(sizeof(BED_FSMNode_GI_Loading_OpenLevelStartUp_GetNodeDescriptionInCS) == 0x000010, "Wrong size on BED_FSMNode_GI_Loading_OpenLevelStartUp_GetNodeDescriptionInCS");
//static_assert(offsetof(BED_FSMNode_GI_Loading_OpenLevelStartUp_GetNodeDescriptionInCS, ReturnValue) == 0x000000, "Member 'BED_FSMNode_GI_Loading_OpenLevelStartUp_GetNodeDescriptionInCS::ReturnValue' has a wrong offset!");

// Function b1-Managed.BED_FSMNode_GI_Loading_PauseGame.PostPropertyChanged
// 0x0020 (0x0020 - 0x0000)
struct BED_FSMNode_GI_Loading_PauseGame_PostPropertyChanged final
{
public:
	class FString                                 MemberName;                                        // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash)
	class FString                                 PropertyName;                                      // 0x0010(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash)
};
//static_assert(alignof(BED_FSMNode_GI_Loading_PauseGame_PostPropertyChanged) == 0x000008, "Wrong alignment on BED_FSMNode_GI_Loading_PauseGame_PostPropertyChanged");
//static_assert(sizeof(BED_FSMNode_GI_Loading_PauseGame_PostPropertyChanged) == 0x000020, "Wrong size on BED_FSMNode_GI_Loading_PauseGame_PostPropertyChanged");
//static_assert(offsetof(BED_FSMNode_GI_Loading_PauseGame_PostPropertyChanged, MemberName) == 0x000000, "Member 'BED_FSMNode_GI_Loading_PauseGame_PostPropertyChanged::MemberName' has a wrong offset!");
//static_assert(offsetof(BED_FSMNode_GI_Loading_PauseGame_PostPropertyChanged, PropertyName) == 0x000010, "Member 'BED_FSMNode_GI_Loading_PauseGame_PostPropertyChanged::PropertyName' has a wrong offset!");

// Function b1-Managed.BED_FSMNode_GI_Loading_PauseGame.GetNodeDescriptionInCS
// 0x0010 (0x0010 - 0x0000)
struct BED_FSMNode_GI_Loading_PauseGame_GetNodeDescriptionInCS final
{
public:
	class FString                                 ReturnValue;                                       // 0x0000(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash)
};
//static_assert(alignof(BED_FSMNode_GI_Loading_PauseGame_GetNodeDescriptionInCS) == 0x000008, "Wrong alignment on BED_FSMNode_GI_Loading_PauseGame_GetNodeDescriptionInCS");
//static_assert(sizeof(BED_FSMNode_GI_Loading_PauseGame_GetNodeDescriptionInCS) == 0x000010, "Wrong size on BED_FSMNode_GI_Loading_PauseGame_GetNodeDescriptionInCS");
//static_assert(offsetof(BED_FSMNode_GI_Loading_PauseGame_GetNodeDescriptionInCS, ReturnValue) == 0x000000, "Member 'BED_FSMNode_GI_Loading_PauseGame_GetNodeDescriptionInCS::ReturnValue' has a wrong offset!");

// Function b1-Managed.BED_FSMNode_GI_Loading_PlayerDataInitPreEnterLevel.PostPropertyChanged
// 0x0020 (0x0020 - 0x0000)
struct BED_FSMNode_GI_Loading_PlayerDataInitPreEnterLevel_PostPropertyChanged final
{
public:
	class FString                                 MemberName;                                        // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash)
	class FString                                 PropertyName;                                      // 0x0010(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash)
};
//static_assert(alignof(BED_FSMNode_GI_Loading_PlayerDataInitPreEnterLevel_PostPropertyChanged) == 0x000008, "Wrong alignment on BED_FSMNode_GI_Loading_PlayerDataInitPreEnterLevel_PostPropertyChanged");
//static_assert(sizeof(BED_FSMNode_GI_Loading_PlayerDataInitPreEnterLevel_PostPropertyChanged) == 0x000020, "Wrong size on BED_FSMNode_GI_Loading_PlayerDataInitPreEnterLevel_PostPropertyChanged");
//static_assert(offsetof(BED_FSMNode_GI_Loading_PlayerDataInitPreEnterLevel_PostPropertyChanged, MemberName) == 0x000000, "Member 'BED_FSMNode_GI_Loading_PlayerDataInitPreEnterLevel_PostPropertyChanged::MemberName' has a wrong offset!");
//static_assert(offsetof(BED_FSMNode_GI_Loading_PlayerDataInitPreEnterLevel_PostPropertyChanged, PropertyName) == 0x000010, "Member 'BED_FSMNode_GI_Loading_PlayerDataInitPreEnterLevel_PostPropertyChanged::PropertyName' has a wrong offset!");

// Function b1-Managed.BED_FSMNode_GI_Loading_PlayerDataInitPreEnterLevel.GetNodeDescriptionInCS
// 0x0010 (0x0010 - 0x0000)
struct BED_FSMNode_GI_Loading_PlayerDataInitPreEnterLevel_GetNodeDescriptionInCS final
{
public:
	class FString                                 ReturnValue;                                       // 0x0000(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash)
};
//static_assert(alignof(BED_FSMNode_GI_Loading_PlayerDataInitPreEnterLevel_GetNodeDescriptionInCS) == 0x000008, "Wrong alignment on BED_FSMNode_GI_Loading_PlayerDataInitPreEnterLevel_GetNodeDescriptionInCS");
//static_assert(sizeof(BED_FSMNode_GI_Loading_PlayerDataInitPreEnterLevel_GetNodeDescriptionInCS) == 0x000010, "Wrong size on BED_FSMNode_GI_Loading_PlayerDataInitPreEnterLevel_GetNodeDescriptionInCS");
//static_assert(offsetof(BED_FSMNode_GI_Loading_PlayerDataInitPreEnterLevel_GetNodeDescriptionInCS, ReturnValue) == 0x000000, "Member 'BED_FSMNode_GI_Loading_PlayerDataInitPreEnterLevel_GetNodeDescriptionInCS::ReturnValue' has a wrong offset!");

// Function b1-Managed.BED_FSMNode_GI_Loading_PlayerTeleportToTemplatetargetPos.PostPropertyChanged
// 0x0020 (0x0020 - 0x0000)
struct BED_FSMNode_GI_Loading_PlayerTeleportToTemplatetargetPos_PostPropertyChanged final
{
public:
	class FString                                 MemberName;                                        // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash)
	class FString                                 PropertyName;                                      // 0x0010(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash)
};
//static_assert(alignof(BED_FSMNode_GI_Loading_PlayerTeleportToTemplatetargetPos_PostPropertyChanged) == 0x000008, "Wrong alignment on BED_FSMNode_GI_Loading_PlayerTeleportToTemplatetargetPos_PostPropertyChanged");
//static_assert(sizeof(BED_FSMNode_GI_Loading_PlayerTeleportToTemplatetargetPos_PostPropertyChanged) == 0x000020, "Wrong size on BED_FSMNode_GI_Loading_PlayerTeleportToTemplatetargetPos_PostPropertyChanged");
//static_assert(offsetof(BED_FSMNode_GI_Loading_PlayerTeleportToTemplatetargetPos_PostPropertyChanged, MemberName) == 0x000000, "Member 'BED_FSMNode_GI_Loading_PlayerTeleportToTemplatetargetPos_PostPropertyChanged::MemberName' has a wrong offset!");
//static_assert(offsetof(BED_FSMNode_GI_Loading_PlayerTeleportToTemplatetargetPos_PostPropertyChanged, PropertyName) == 0x000010, "Member 'BED_FSMNode_GI_Loading_PlayerTeleportToTemplatetargetPos_PostPropertyChanged::PropertyName' has a wrong offset!");

// Function b1-Managed.BED_FSMNode_GI_Loading_PlayerTeleportToTemplatetargetPos.GetNodeDescriptionInCS
// 0x0010 (0x0010 - 0x0000)
struct BED_FSMNode_GI_Loading_PlayerTeleportToTemplatetargetPos_GetNodeDescriptionInCS final
{
public:
	class FString                                 ReturnValue;                                       // 0x0000(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash)
};
//static_assert(alignof(BED_FSMNode_GI_Loading_PlayerTeleportToTemplatetargetPos_GetNodeDescriptionInCS) == 0x000008, "Wrong alignment on BED_FSMNode_GI_Loading_PlayerTeleportToTemplatetargetPos_GetNodeDescriptionInCS");
//static_assert(sizeof(BED_FSMNode_GI_Loading_PlayerTeleportToTemplatetargetPos_GetNodeDescriptionInCS) == 0x000010, "Wrong size on BED_FSMNode_GI_Loading_PlayerTeleportToTemplatetargetPos_GetNodeDescriptionInCS");
//static_assert(offsetof(BED_FSMNode_GI_Loading_PlayerTeleportToTemplatetargetPos_GetNodeDescriptionInCS, ReturnValue) == 0x000000, "Member 'BED_FSMNode_GI_Loading_PlayerTeleportToTemplatetargetPos_GetNodeDescriptionInCS::ReturnValue' has a wrong offset!");

// Function b1-Managed.BED_FSMNode_GI_Loading_PlayGoDownloadIncompleteImpl.PostPropertyChanged
// 0x0020 (0x0020 - 0x0000)
struct BED_FSMNode_GI_Loading_PlayGoDownloadIncompleteImpl_PostPropertyChanged final
{
public:
	class FString                                 MemberName;                                        // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash)
	class FString                                 PropertyName;                                      // 0x0010(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash)
};
//static_assert(alignof(BED_FSMNode_GI_Loading_PlayGoDownloadIncompleteImpl_PostPropertyChanged) == 0x000008, "Wrong alignment on BED_FSMNode_GI_Loading_PlayGoDownloadIncompleteImpl_PostPropertyChanged");
//static_assert(sizeof(BED_FSMNode_GI_Loading_PlayGoDownloadIncompleteImpl_PostPropertyChanged) == 0x000020, "Wrong size on BED_FSMNode_GI_Loading_PlayGoDownloadIncompleteImpl_PostPropertyChanged");
//static_assert(offsetof(BED_FSMNode_GI_Loading_PlayGoDownloadIncompleteImpl_PostPropertyChanged, MemberName) == 0x000000, "Member 'BED_FSMNode_GI_Loading_PlayGoDownloadIncompleteImpl_PostPropertyChanged::MemberName' has a wrong offset!");
//static_assert(offsetof(BED_FSMNode_GI_Loading_PlayGoDownloadIncompleteImpl_PostPropertyChanged, PropertyName) == 0x000010, "Member 'BED_FSMNode_GI_Loading_PlayGoDownloadIncompleteImpl_PostPropertyChanged::PropertyName' has a wrong offset!");

// Function b1-Managed.BED_FSMNode_GI_Loading_PlayGoDownloadIncompleteImpl.GetNodeDescriptionInCS
// 0x0010 (0x0010 - 0x0000)
struct BED_FSMNode_GI_Loading_PlayGoDownloadIncompleteImpl_GetNodeDescriptionInCS final
{
public:
	class FString                                 ReturnValue;                                       // 0x0000(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash)
};
//static_assert(alignof(BED_FSMNode_GI_Loading_PlayGoDownloadIncompleteImpl_GetNodeDescriptionInCS) == 0x000008, "Wrong alignment on BED_FSMNode_GI_Loading_PlayGoDownloadIncompleteImpl_GetNodeDescriptionInCS");
//static_assert(sizeof(BED_FSMNode_GI_Loading_PlayGoDownloadIncompleteImpl_GetNodeDescriptionInCS) == 0x000010, "Wrong size on BED_FSMNode_GI_Loading_PlayGoDownloadIncompleteImpl_GetNodeDescriptionInCS");
//static_assert(offsetof(BED_FSMNode_GI_Loading_PlayGoDownloadIncompleteImpl_GetNodeDescriptionInCS, ReturnValue) == 0x000000, "Member 'BED_FSMNode_GI_Loading_PlayGoDownloadIncompleteImpl_GetNodeDescriptionInCS::ReturnValue' has a wrong offset!");

// Function b1-Managed.BGWDataAsset_MagicallyChangeConfig.ReadConfigFromUnit
// 0x0008 (0x0008 - 0x0000)
struct BGWDataAsset_MagicallyChangeConfig_ReadConfigFromUnit final
{
public:
	class ABUTamerActor*                          Tamer;                                             // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
//static_assert(alignof(BGWDataAsset_MagicallyChangeConfig_ReadConfigFromUnit) == 0x000008, "Wrong alignment on BGWDataAsset_MagicallyChangeConfig_ReadConfigFromUnit");
//static_assert(sizeof(BGWDataAsset_MagicallyChangeConfig_ReadConfigFromUnit) == 0x000008, "Wrong size on BGWDataAsset_MagicallyChangeConfig_ReadConfigFromUnit");
//static_assert(offsetof(BGWDataAsset_MagicallyChangeConfig_ReadConfigFromUnit, Tamer) == 0x000000, "Member 'BGWDataAsset_MagicallyChangeConfig_ReadConfigFromUnit::Tamer' has a wrong offset!");

// Function b1-Managed.BED_FSMNode_GI_Loading_PostSeamlessLevelTravel.PostPropertyChanged
// 0x0020 (0x0020 - 0x0000)
struct BED_FSMNode_GI_Loading_PostSeamlessLevelTravel_PostPropertyChanged final
{
public:
	class FString                                 MemberName;                                        // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash)
	class FString                                 PropertyName;                                      // 0x0010(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash)
};
//static_assert(alignof(BED_FSMNode_GI_Loading_PostSeamlessLevelTravel_PostPropertyChanged) == 0x000008, "Wrong alignment on BED_FSMNode_GI_Loading_PostSeamlessLevelTravel_PostPropertyChanged");
//static_assert(sizeof(BED_FSMNode_GI_Loading_PostSeamlessLevelTravel_PostPropertyChanged) == 0x000020, "Wrong size on BED_FSMNode_GI_Loading_PostSeamlessLevelTravel_PostPropertyChanged");
//static_assert(offsetof(BED_FSMNode_GI_Loading_PostSeamlessLevelTravel_PostPropertyChanged, MemberName) == 0x000000, "Member 'BED_FSMNode_GI_Loading_PostSeamlessLevelTravel_PostPropertyChanged::MemberName' has a wrong offset!");
//static_assert(offsetof(BED_FSMNode_GI_Loading_PostSeamlessLevelTravel_PostPropertyChanged, PropertyName) == 0x000010, "Member 'BED_FSMNode_GI_Loading_PostSeamlessLevelTravel_PostPropertyChanged::PropertyName' has a wrong offset!");

// Function b1-Managed.BED_FSMNode_GI_Loading_PostSeamlessLevelTravel.GetNodeDescriptionInCS
// 0x0010 (0x0010 - 0x0000)
struct BED_FSMNode_GI_Loading_PostSeamlessLevelTravel_GetNodeDescriptionInCS final
{
public:
	class FString                                 ReturnValue;                                       // 0x0000(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash)
};
//static_assert(alignof(BED_FSMNode_GI_Loading_PostSeamlessLevelTravel_GetNodeDescriptionInCS) == 0x000008, "Wrong alignment on BED_FSMNode_GI_Loading_PostSeamlessLevelTravel_GetNodeDescriptionInCS");
//static_assert(sizeof(BED_FSMNode_GI_Loading_PostSeamlessLevelTravel_GetNodeDescriptionInCS) == 0x000010, "Wrong size on BED_FSMNode_GI_Loading_PostSeamlessLevelTravel_GetNodeDescriptionInCS");
//static_assert(offsetof(BED_FSMNode_GI_Loading_PostSeamlessLevelTravel_GetNodeDescriptionInCS, ReturnValue) == 0x000000, "Member 'BED_FSMNode_GI_Loading_PostSeamlessLevelTravel_GetNodeDescriptionInCS::ReturnValue' has a wrong offset!");

// Function b1-Managed.BED_FSMNode_GI_Loading_PreLogin.PostPropertyChanged
// 0x0020 (0x0020 - 0x0000)
struct BED_FSMNode_GI_Loading_PreLogin_PostPropertyChanged final
{
public:
	class FString                                 MemberName;                                        // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash)
	class FString                                 PropertyName;                                      // 0x0010(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash)
};
//static_assert(alignof(BED_FSMNode_GI_Loading_PreLogin_PostPropertyChanged) == 0x000008, "Wrong alignment on BED_FSMNode_GI_Loading_PreLogin_PostPropertyChanged");
//static_assert(sizeof(BED_FSMNode_GI_Loading_PreLogin_PostPropertyChanged) == 0x000020, "Wrong size on BED_FSMNode_GI_Loading_PreLogin_PostPropertyChanged");
//static_assert(offsetof(BED_FSMNode_GI_Loading_PreLogin_PostPropertyChanged, MemberName) == 0x000000, "Member 'BED_FSMNode_GI_Loading_PreLogin_PostPropertyChanged::MemberName' has a wrong offset!");
//static_assert(offsetof(BED_FSMNode_GI_Loading_PreLogin_PostPropertyChanged, PropertyName) == 0x000010, "Member 'BED_FSMNode_GI_Loading_PreLogin_PostPropertyChanged::PropertyName' has a wrong offset!");

// Function b1-Managed.BED_FSMNode_GI_Loading_PreLogin.GetNodeDescriptionInCS
// 0x0010 (0x0010 - 0x0000)
struct BED_FSMNode_GI_Loading_PreLogin_GetNodeDescriptionInCS final
{
public:
	class FString                                 ReturnValue;                                       // 0x0000(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash)
};
//static_assert(alignof(BED_FSMNode_GI_Loading_PreLogin_GetNodeDescriptionInCS) == 0x000008, "Wrong alignment on BED_FSMNode_GI_Loading_PreLogin_GetNodeDescriptionInCS");
//static_assert(sizeof(BED_FSMNode_GI_Loading_PreLogin_GetNodeDescriptionInCS) == 0x000010, "Wrong size on BED_FSMNode_GI_Loading_PreLogin_GetNodeDescriptionInCS");
//static_assert(offsetof(BED_FSMNode_GI_Loading_PreLogin_GetNodeDescriptionInCS, ReturnValue) == 0x000000, "Member 'BED_FSMNode_GI_Loading_PreLogin_GetNodeDescriptionInCS::ReturnValue' has a wrong offset!");

// Function b1-Managed.BED_FSMNode_GI_Loading_PrepareFadeAway.PostPropertyChanged
// 0x0020 (0x0020 - 0x0000)
struct BED_FSMNode_GI_Loading_PrepareFadeAway_PostPropertyChanged final
{
public:
	class FString                                 MemberName;                                        // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash)
	class FString                                 PropertyName;                                      // 0x0010(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash)
};
//static_assert(alignof(BED_FSMNode_GI_Loading_PrepareFadeAway_PostPropertyChanged) == 0x000008, "Wrong alignment on BED_FSMNode_GI_Loading_PrepareFadeAway_PostPropertyChanged");
//static_assert(sizeof(BED_FSMNode_GI_Loading_PrepareFadeAway_PostPropertyChanged) == 0x000020, "Wrong size on BED_FSMNode_GI_Loading_PrepareFadeAway_PostPropertyChanged");
//static_assert(offsetof(BED_FSMNode_GI_Loading_PrepareFadeAway_PostPropertyChanged, MemberName) == 0x000000, "Member 'BED_FSMNode_GI_Loading_PrepareFadeAway_PostPropertyChanged::MemberName' has a wrong offset!");
//static_assert(offsetof(BED_FSMNode_GI_Loading_PrepareFadeAway_PostPropertyChanged, PropertyName) == 0x000010, "Member 'BED_FSMNode_GI_Loading_PrepareFadeAway_PostPropertyChanged::PropertyName' has a wrong offset!");

// Function b1-Managed.BED_FSMNode_GI_Loading_PrepareFadeAway.GetNodeDescriptionInCS
// 0x0010 (0x0010 - 0x0000)
struct BED_FSMNode_GI_Loading_PrepareFadeAway_GetNodeDescriptionInCS final
{
public:
	class FString                                 ReturnValue;                                       // 0x0000(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash)
};
//static_assert(alignof(BED_FSMNode_GI_Loading_PrepareFadeAway_GetNodeDescriptionInCS) == 0x000008, "Wrong alignment on BED_FSMNode_GI_Loading_PrepareFadeAway_GetNodeDescriptionInCS");
//static_assert(sizeof(BED_FSMNode_GI_Loading_PrepareFadeAway_GetNodeDescriptionInCS) == 0x000010, "Wrong size on BED_FSMNode_GI_Loading_PrepareFadeAway_GetNodeDescriptionInCS");
//static_assert(offsetof(BED_FSMNode_GI_Loading_PrepareFadeAway_GetNodeDescriptionInCS, ReturnValue) == 0x000000, "Member 'BED_FSMNode_GI_Loading_PrepareFadeAway_GetNodeDescriptionInCS::ReturnValue' has a wrong offset!");

// Function b1-Managed.BED_FSMNode_GI_Loading_ReadLatestArchive.PostPropertyChanged
// 0x0020 (0x0020 - 0x0000)
struct BED_FSMNode_GI_Loading_ReadLatestArchive_PostPropertyChanged final
{
public:
	class FString                                 MemberName;                                        // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash)
	class FString                                 PropertyName;                                      // 0x0010(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash)
};
//static_assert(alignof(BED_FSMNode_GI_Loading_ReadLatestArchive_PostPropertyChanged) == 0x000008, "Wrong alignment on BED_FSMNode_GI_Loading_ReadLatestArchive_PostPropertyChanged");
//static_assert(sizeof(BED_FSMNode_GI_Loading_ReadLatestArchive_PostPropertyChanged) == 0x000020, "Wrong size on BED_FSMNode_GI_Loading_ReadLatestArchive_PostPropertyChanged");
//static_assert(offsetof(BED_FSMNode_GI_Loading_ReadLatestArchive_PostPropertyChanged, MemberName) == 0x000000, "Member 'BED_FSMNode_GI_Loading_ReadLatestArchive_PostPropertyChanged::MemberName' has a wrong offset!");
//static_assert(offsetof(BED_FSMNode_GI_Loading_ReadLatestArchive_PostPropertyChanged, PropertyName) == 0x000010, "Member 'BED_FSMNode_GI_Loading_ReadLatestArchive_PostPropertyChanged::PropertyName' has a wrong offset!");

// Function b1-Managed.BED_FSMNode_GI_Loading_ReadLatestArchive.GetNodeDescriptionInCS
// 0x0010 (0x0010 - 0x0000)
struct BED_FSMNode_GI_Loading_ReadLatestArchive_GetNodeDescriptionInCS final
{
public:
	class FString                                 ReturnValue;                                       // 0x0000(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash)
};
//static_assert(alignof(BED_FSMNode_GI_Loading_ReadLatestArchive_GetNodeDescriptionInCS) == 0x000008, "Wrong alignment on BED_FSMNode_GI_Loading_ReadLatestArchive_GetNodeDescriptionInCS");
//static_assert(sizeof(BED_FSMNode_GI_Loading_ReadLatestArchive_GetNodeDescriptionInCS) == 0x000010, "Wrong size on BED_FSMNode_GI_Loading_ReadLatestArchive_GetNodeDescriptionInCS");
//static_assert(offsetof(BED_FSMNode_GI_Loading_ReadLatestArchive_GetNodeDescriptionInCS, ReturnValue) == 0x000000, "Member 'BED_FSMNode_GI_Loading_ReadLatestArchive_GetNodeDescriptionInCS::ReturnValue' has a wrong offset!");

// Function b1-Managed.BED_FSMNode_GI_Loading_RequestFadeAway.PostPropertyChanged
// 0x0020 (0x0020 - 0x0000)
struct BED_FSMNode_GI_Loading_RequestFadeAway_PostPropertyChanged final
{
public:
	class FString                                 MemberName;                                        // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash)
	class FString                                 PropertyName;                                      // 0x0010(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash)
};
//static_assert(alignof(BED_FSMNode_GI_Loading_RequestFadeAway_PostPropertyChanged) == 0x000008, "Wrong alignment on BED_FSMNode_GI_Loading_RequestFadeAway_PostPropertyChanged");
//static_assert(sizeof(BED_FSMNode_GI_Loading_RequestFadeAway_PostPropertyChanged) == 0x000020, "Wrong size on BED_FSMNode_GI_Loading_RequestFadeAway_PostPropertyChanged");
//static_assert(offsetof(BED_FSMNode_GI_Loading_RequestFadeAway_PostPropertyChanged, MemberName) == 0x000000, "Member 'BED_FSMNode_GI_Loading_RequestFadeAway_PostPropertyChanged::MemberName' has a wrong offset!");
//static_assert(offsetof(BED_FSMNode_GI_Loading_RequestFadeAway_PostPropertyChanged, PropertyName) == 0x000010, "Member 'BED_FSMNode_GI_Loading_RequestFadeAway_PostPropertyChanged::PropertyName' has a wrong offset!");

// Function b1-Managed.BED_FSMNode_GI_Loading_RequestFadeAway.GetNodeDescriptionInCS
// 0x0010 (0x0010 - 0x0000)
struct BED_FSMNode_GI_Loading_RequestFadeAway_GetNodeDescriptionInCS final
{
public:
	class FString                                 ReturnValue;                                       // 0x0000(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash)
};
//static_assert(alignof(BED_FSMNode_GI_Loading_RequestFadeAway_GetNodeDescriptionInCS) == 0x000008, "Wrong alignment on BED_FSMNode_GI_Loading_RequestFadeAway_GetNodeDescriptionInCS");
//static_assert(sizeof(BED_FSMNode_GI_Loading_RequestFadeAway_GetNodeDescriptionInCS) == 0x000010, "Wrong size on BED_FSMNode_GI_Loading_RequestFadeAway_GetNodeDescriptionInCS");
//static_assert(offsetof(BED_FSMNode_GI_Loading_RequestFadeAway_GetNodeDescriptionInCS, ReturnValue) == 0x000000, "Member 'BED_FSMNode_GI_Loading_RequestFadeAway_GetNodeDescriptionInCS::ReturnValue' has a wrong offset!");

// Function b1-Managed.BED_FSMNode_GI_Loading_RequestTemplateLoadArchiveData.PostPropertyChanged
// 0x0020 (0x0020 - 0x0000)
struct BED_FSMNode_GI_Loading_RequestTemplateLoadArchiveData_PostPropertyChanged final
{
public:
	class FString                                 MemberName;                                        // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash)
	class FString                                 PropertyName;                                      // 0x0010(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash)
};
//static_assert(alignof(BED_FSMNode_GI_Loading_RequestTemplateLoadArchiveData_PostPropertyChanged) == 0x000008, "Wrong alignment on BED_FSMNode_GI_Loading_RequestTemplateLoadArchiveData_PostPropertyChanged");
//static_assert(sizeof(BED_FSMNode_GI_Loading_RequestTemplateLoadArchiveData_PostPropertyChanged) == 0x000020, "Wrong size on BED_FSMNode_GI_Loading_RequestTemplateLoadArchiveData_PostPropertyChanged");
//static_assert(offsetof(BED_FSMNode_GI_Loading_RequestTemplateLoadArchiveData_PostPropertyChanged, MemberName) == 0x000000, "Member 'BED_FSMNode_GI_Loading_RequestTemplateLoadArchiveData_PostPropertyChanged::MemberName' has a wrong offset!");
//static_assert(offsetof(BED_FSMNode_GI_Loading_RequestTemplateLoadArchiveData_PostPropertyChanged, PropertyName) == 0x000010, "Member 'BED_FSMNode_GI_Loading_RequestTemplateLoadArchiveData_PostPropertyChanged::PropertyName' has a wrong offset!");

// Function b1-Managed.BED_FSMNode_GI_Loading_RequestTemplateLoadArchiveData.GetNodeDescriptionInCS
// 0x0010 (0x0010 - 0x0000)
struct BED_FSMNode_GI_Loading_RequestTemplateLoadArchiveData_GetNodeDescriptionInCS final
{
public:
	class FString                                 ReturnValue;                                       // 0x0000(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash)
};
//static_assert(alignof(BED_FSMNode_GI_Loading_RequestTemplateLoadArchiveData_GetNodeDescriptionInCS) == 0x000008, "Wrong alignment on BED_FSMNode_GI_Loading_RequestTemplateLoadArchiveData_GetNodeDescriptionInCS");
//static_assert(sizeof(BED_FSMNode_GI_Loading_RequestTemplateLoadArchiveData_GetNodeDescriptionInCS) == 0x000010, "Wrong size on BED_FSMNode_GI_Loading_RequestTemplateLoadArchiveData_GetNodeDescriptionInCS");
//static_assert(offsetof(BED_FSMNode_GI_Loading_RequestTemplateLoadArchiveData_GetNodeDescriptionInCS, ReturnValue) == 0x000000, "Member 'BED_FSMNode_GI_Loading_RequestTemplateLoadArchiveData_GetNodeDescriptionInCS::ReturnValue' has a wrong offset!");

// Function b1-Managed.BED_FSMNode_GI_Loading_RequestTemplateOpenLevel.PostPropertyChanged
// 0x0020 (0x0020 - 0x0000)
struct BED_FSMNode_GI_Loading_RequestTemplateOpenLevel_PostPropertyChanged final
{
public:
	class FString                                 MemberName;                                        // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash)
	class FString                                 PropertyName;                                      // 0x0010(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash)
};
//static_assert(alignof(BED_FSMNode_GI_Loading_RequestTemplateOpenLevel_PostPropertyChanged) == 0x000008, "Wrong alignment on BED_FSMNode_GI_Loading_RequestTemplateOpenLevel_PostPropertyChanged");
//static_assert(sizeof(BED_FSMNode_GI_Loading_RequestTemplateOpenLevel_PostPropertyChanged) == 0x000020, "Wrong size on BED_FSMNode_GI_Loading_RequestTemplateOpenLevel_PostPropertyChanged");
//static_assert(offsetof(BED_FSMNode_GI_Loading_RequestTemplateOpenLevel_PostPropertyChanged, MemberName) == 0x000000, "Member 'BED_FSMNode_GI_Loading_RequestTemplateOpenLevel_PostPropertyChanged::MemberName' has a wrong offset!");
//static_assert(offsetof(BED_FSMNode_GI_Loading_RequestTemplateOpenLevel_PostPropertyChanged, PropertyName) == 0x000010, "Member 'BED_FSMNode_GI_Loading_RequestTemplateOpenLevel_PostPropertyChanged::PropertyName' has a wrong offset!");

// Function b1-Managed.BED_FSMNode_GI_Loading_RequestTemplateOpenLevel.GetNodeDescriptionInCS
// 0x0010 (0x0010 - 0x0000)
struct BED_FSMNode_GI_Loading_RequestTemplateOpenLevel_GetNodeDescriptionInCS final
{
public:
	class FString                                 ReturnValue;                                       // 0x0000(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash)
};
//static_assert(alignof(BED_FSMNode_GI_Loading_RequestTemplateOpenLevel_GetNodeDescriptionInCS) == 0x000008, "Wrong alignment on BED_FSMNode_GI_Loading_RequestTemplateOpenLevel_GetNodeDescriptionInCS");
//static_assert(sizeof(BED_FSMNode_GI_Loading_RequestTemplateOpenLevel_GetNodeDescriptionInCS) == 0x000010, "Wrong size on BED_FSMNode_GI_Loading_RequestTemplateOpenLevel_GetNodeDescriptionInCS");
//static_assert(offsetof(BED_FSMNode_GI_Loading_RequestTemplateOpenLevel_GetNodeDescriptionInCS, ReturnValue) == 0x000000, "Member 'BED_FSMNode_GI_Loading_RequestTemplateOpenLevel_GetNodeDescriptionInCS::ReturnValue' has a wrong offset!");

// Function b1-Managed.BED_QuestNode_RunProcessGraph.PostPropertyChanged
// 0x0020 (0x0020 - 0x0000)
struct BED_QuestNode_RunProcessGraph_PostPropertyChanged final
{
public:
	class FString                                 MemberName;                                        // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash)
	class FString                                 PropertyName;                                      // 0x0010(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash)
};
//static_assert(alignof(BED_QuestNode_RunProcessGraph_PostPropertyChanged) == 0x000008, "Wrong alignment on BED_QuestNode_RunProcessGraph_PostPropertyChanged");
//static_assert(sizeof(BED_QuestNode_RunProcessGraph_PostPropertyChanged) == 0x000020, "Wrong size on BED_QuestNode_RunProcessGraph_PostPropertyChanged");
//static_assert(offsetof(BED_QuestNode_RunProcessGraph_PostPropertyChanged, MemberName) == 0x000000, "Member 'BED_QuestNode_RunProcessGraph_PostPropertyChanged::MemberName' has a wrong offset!");
//static_assert(offsetof(BED_QuestNode_RunProcessGraph_PostPropertyChanged, PropertyName) == 0x000010, "Member 'BED_QuestNode_RunProcessGraph_PostPropertyChanged::PropertyName' has a wrong offset!");

// Function b1-Managed.BED_QuestNode_RunProcessGraph.PrePropertyChanged
// 0x0010 (0x0010 - 0x0000)
struct BED_QuestNode_RunProcessGraph_PrePropertyChanged final
{
public:
	class FString                                 PropertyName;                                      // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash)
};
//static_assert(alignof(BED_QuestNode_RunProcessGraph_PrePropertyChanged) == 0x000008, "Wrong alignment on BED_QuestNode_RunProcessGraph_PrePropertyChanged");
//static_assert(sizeof(BED_QuestNode_RunProcessGraph_PrePropertyChanged) == 0x000010, "Wrong size on BED_QuestNode_RunProcessGraph_PrePropertyChanged");
//static_assert(offsetof(BED_QuestNode_RunProcessGraph_PrePropertyChanged, PropertyName) == 0x000000, "Member 'BED_QuestNode_RunProcessGraph_PrePropertyChanged::PropertyName' has a wrong offset!");

// Function b1-Managed.BED_QuestNode_RunProcessGraph.GetAssetToEditInCS
// 0x0008 (0x0008 - 0x0000)
struct BED_QuestNode_RunProcessGraph_GetAssetToEditInCS final
{
public:
	class UObject*                                ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
//static_assert(alignof(BED_QuestNode_RunProcessGraph_GetAssetToEditInCS) == 0x000008, "Wrong alignment on BED_QuestNode_RunProcessGraph_GetAssetToEditInCS");
//static_assert(sizeof(BED_QuestNode_RunProcessGraph_GetAssetToEditInCS) == 0x000008, "Wrong size on BED_QuestNode_RunProcessGraph_GetAssetToEditInCS");
//static_assert(offsetof(BED_QuestNode_RunProcessGraph_GetAssetToEditInCS, ReturnValue) == 0x000000, "Member 'BED_QuestNode_RunProcessGraph_GetAssetToEditInCS::ReturnValue' has a wrong offset!");

// Function b1-Managed.BED_QuestNode_RunProcessGraph.GetNodeDescriptionInCS
// 0x0010 (0x0010 - 0x0000)
struct BED_QuestNode_RunProcessGraph_GetNodeDescriptionInCS final
{
public:
	class FString                                 ReturnValue;                                       // 0x0000(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash)
};
//static_assert(alignof(BED_QuestNode_RunProcessGraph_GetNodeDescriptionInCS) == 0x000008, "Wrong alignment on BED_QuestNode_RunProcessGraph_GetNodeDescriptionInCS");
//static_assert(sizeof(BED_QuestNode_RunProcessGraph_GetNodeDescriptionInCS) == 0x000010, "Wrong size on BED_QuestNode_RunProcessGraph_GetNodeDescriptionInCS");
//static_assert(offsetof(BED_QuestNode_RunProcessGraph_GetNodeDescriptionInCS, ReturnValue) == 0x000000, "Member 'BED_QuestNode_RunProcessGraph_GetNodeDescriptionInCS::ReturnValue' has a wrong offset!");

// Function b1-Managed.BED_FSMNode_GI_Loading_RequestTemplatePerformActionsFromArchive.PostPropertyChanged
// 0x0020 (0x0020 - 0x0000)
struct BED_FSMNode_GI_Loading_RequestTemplatePerformActionsFromArchive_PostPropertyChanged final
{
public:
	class FString                                 MemberName;                                        // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash)
	class FString                                 PropertyName;                                      // 0x0010(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash)
};
//static_assert(alignof(BED_FSMNode_GI_Loading_RequestTemplatePerformActionsFromArchive_PostPropertyChanged) == 0x000008, "Wrong alignment on BED_FSMNode_GI_Loading_RequestTemplatePerformActionsFromArchive_PostPropertyChanged");
//static_assert(sizeof(BED_FSMNode_GI_Loading_RequestTemplatePerformActionsFromArchive_PostPropertyChanged) == 0x000020, "Wrong size on BED_FSMNode_GI_Loading_RequestTemplatePerformActionsFromArchive_PostPropertyChanged");
//static_assert(offsetof(BED_FSMNode_GI_Loading_RequestTemplatePerformActionsFromArchive_PostPropertyChanged, MemberName) == 0x000000, "Member 'BED_FSMNode_GI_Loading_RequestTemplatePerformActionsFromArchive_PostPropertyChanged::MemberName' has a wrong offset!");
//static_assert(offsetof(BED_FSMNode_GI_Loading_RequestTemplatePerformActionsFromArchive_PostPropertyChanged, PropertyName) == 0x000010, "Member 'BED_FSMNode_GI_Loading_RequestTemplatePerformActionsFromArchive_PostPropertyChanged::PropertyName' has a wrong offset!");

// Function b1-Managed.BED_FSMNode_GI_Loading_RequestTemplatePerformActionsFromArchive.GetNodeDescriptionInCS
// 0x0010 (0x0010 - 0x0000)
struct BED_FSMNode_GI_Loading_RequestTemplatePerformActionsFromArchive_GetNodeDescriptionInCS final
{
public:
	class FString                                 ReturnValue;                                       // 0x0000(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash)
};
//static_assert(alignof(BED_FSMNode_GI_Loading_RequestTemplatePerformActionsFromArchive_GetNodeDescriptionInCS) == 0x000008, "Wrong alignment on BED_FSMNode_GI_Loading_RequestTemplatePerformActionsFromArchive_GetNodeDescriptionInCS");
//static_assert(sizeof(BED_FSMNode_GI_Loading_RequestTemplatePerformActionsFromArchive_GetNodeDescriptionInCS) == 0x000010, "Wrong size on BED_FSMNode_GI_Loading_RequestTemplatePerformActionsFromArchive_GetNodeDescriptionInCS");
//static_assert(offsetof(BED_FSMNode_GI_Loading_RequestTemplatePerformActionsFromArchive_GetNodeDescriptionInCS, ReturnValue) == 0x000000, "Member 'BED_FSMNode_GI_Loading_RequestTemplatePerformActionsFromArchive_GetNodeDescriptionInCS::ReturnValue' has a wrong offset!");

// Function b1-Managed.BED_FSMNode_GI_Loading_RequestTemplatePostGSLoginFinish.PostPropertyChanged
// 0x0020 (0x0020 - 0x0000)
struct BED_FSMNode_GI_Loading_RequestTemplatePostGSLoginFinish_PostPropertyChanged final
{
public:
	class FString                                 MemberName;                                        // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash)
	class FString                                 PropertyName;                                      // 0x0010(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash)
};
//static_assert(alignof(BED_FSMNode_GI_Loading_RequestTemplatePostGSLoginFinish_PostPropertyChanged) == 0x000008, "Wrong alignment on BED_FSMNode_GI_Loading_RequestTemplatePostGSLoginFinish_PostPropertyChanged");
//static_assert(sizeof(BED_FSMNode_GI_Loading_RequestTemplatePostGSLoginFinish_PostPropertyChanged) == 0x000020, "Wrong size on BED_FSMNode_GI_Loading_RequestTemplatePostGSLoginFinish_PostPropertyChanged");
//static_assert(offsetof(BED_FSMNode_GI_Loading_RequestTemplatePostGSLoginFinish_PostPropertyChanged, MemberName) == 0x000000, "Member 'BED_FSMNode_GI_Loading_RequestTemplatePostGSLoginFinish_PostPropertyChanged::MemberName' has a wrong offset!");
//static_assert(offsetof(BED_FSMNode_GI_Loading_RequestTemplatePostGSLoginFinish_PostPropertyChanged, PropertyName) == 0x000010, "Member 'BED_FSMNode_GI_Loading_RequestTemplatePostGSLoginFinish_PostPropertyChanged::PropertyName' has a wrong offset!");

// Function b1-Managed.BED_FSMNode_GI_Loading_RequestTemplatePostGSLoginFinish.GetNodeDescriptionInCS
// 0x0010 (0x0010 - 0x0000)
struct BED_FSMNode_GI_Loading_RequestTemplatePostGSLoginFinish_GetNodeDescriptionInCS final
{
public:
	class FString                                 ReturnValue;                                       // 0x0000(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash)
};
//static_assert(alignof(BED_FSMNode_GI_Loading_RequestTemplatePostGSLoginFinish_GetNodeDescriptionInCS) == 0x000008, "Wrong alignment on BED_FSMNode_GI_Loading_RequestTemplatePostGSLoginFinish_GetNodeDescriptionInCS");
//static_assert(sizeof(BED_FSMNode_GI_Loading_RequestTemplatePostGSLoginFinish_GetNodeDescriptionInCS) == 0x000010, "Wrong size on BED_FSMNode_GI_Loading_RequestTemplatePostGSLoginFinish_GetNodeDescriptionInCS");
//static_assert(offsetof(BED_FSMNode_GI_Loading_RequestTemplatePostGSLoginFinish_GetNodeDescriptionInCS, ReturnValue) == 0x000000, "Member 'BED_FSMNode_GI_Loading_RequestTemplatePostGSLoginFinish_GetNodeDescriptionInCS::ReturnValue' has a wrong offset!");

// Function b1-Managed.BED_FSMNode_GI_Loading_RequestTemplatePreLeaveLevel.PostPropertyChanged
// 0x0020 (0x0020 - 0x0000)
struct BED_FSMNode_GI_Loading_RequestTemplatePreLeaveLevel_PostPropertyChanged final
{
public:
	class FString                                 MemberName;                                        // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash)
	class FString                                 PropertyName;                                      // 0x0010(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash)
};
//static_assert(alignof(BED_FSMNode_GI_Loading_RequestTemplatePreLeaveLevel_PostPropertyChanged) == 0x000008, "Wrong alignment on BED_FSMNode_GI_Loading_RequestTemplatePreLeaveLevel_PostPropertyChanged");
//static_assert(sizeof(BED_FSMNode_GI_Loading_RequestTemplatePreLeaveLevel_PostPropertyChanged) == 0x000020, "Wrong size on BED_FSMNode_GI_Loading_RequestTemplatePreLeaveLevel_PostPropertyChanged");
//static_assert(offsetof(BED_FSMNode_GI_Loading_RequestTemplatePreLeaveLevel_PostPropertyChanged, MemberName) == 0x000000, "Member 'BED_FSMNode_GI_Loading_RequestTemplatePreLeaveLevel_PostPropertyChanged::MemberName' has a wrong offset!");
//static_assert(offsetof(BED_FSMNode_GI_Loading_RequestTemplatePreLeaveLevel_PostPropertyChanged, PropertyName) == 0x000010, "Member 'BED_FSMNode_GI_Loading_RequestTemplatePreLeaveLevel_PostPropertyChanged::PropertyName' has a wrong offset!");

// Function b1-Managed.BED_FSMNode_GI_Loading_RequestTemplatePreLeaveLevel.GetNodeDescriptionInCS
// 0x0010 (0x0010 - 0x0000)
struct BED_FSMNode_GI_Loading_RequestTemplatePreLeaveLevel_GetNodeDescriptionInCS final
{
public:
	class FString                                 ReturnValue;                                       // 0x0000(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash)
};
//static_assert(alignof(BED_FSMNode_GI_Loading_RequestTemplatePreLeaveLevel_GetNodeDescriptionInCS) == 0x000008, "Wrong alignment on BED_FSMNode_GI_Loading_RequestTemplatePreLeaveLevel_GetNodeDescriptionInCS");
//static_assert(sizeof(BED_FSMNode_GI_Loading_RequestTemplatePreLeaveLevel_GetNodeDescriptionInCS) == 0x000010, "Wrong size on BED_FSMNode_GI_Loading_RequestTemplatePreLeaveLevel_GetNodeDescriptionInCS");
//static_assert(offsetof(BED_FSMNode_GI_Loading_RequestTemplatePreLeaveLevel_GetNodeDescriptionInCS, ReturnValue) == 0x000000, "Member 'BED_FSMNode_GI_Loading_RequestTemplatePreLeaveLevel_GetNodeDescriptionInCS::ReturnValue' has a wrong offset!");

// Function b1-Managed.BED_FSMNode_GI_Loading_RequestTemplateTravelLevelBegin.PostPropertyChanged
// 0x0020 (0x0020 - 0x0000)
struct BED_FSMNode_GI_Loading_RequestTemplateTravelLevelBegin_PostPropertyChanged final
{
public:
	class FString                                 MemberName;                                        // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash)
	class FString                                 PropertyName;                                      // 0x0010(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash)
};
//static_assert(alignof(BED_FSMNode_GI_Loading_RequestTemplateTravelLevelBegin_PostPropertyChanged) == 0x000008, "Wrong alignment on BED_FSMNode_GI_Loading_RequestTemplateTravelLevelBegin_PostPropertyChanged");
//static_assert(sizeof(BED_FSMNode_GI_Loading_RequestTemplateTravelLevelBegin_PostPropertyChanged) == 0x000020, "Wrong size on BED_FSMNode_GI_Loading_RequestTemplateTravelLevelBegin_PostPropertyChanged");
//static_assert(offsetof(BED_FSMNode_GI_Loading_RequestTemplateTravelLevelBegin_PostPropertyChanged, MemberName) == 0x000000, "Member 'BED_FSMNode_GI_Loading_RequestTemplateTravelLevelBegin_PostPropertyChanged::MemberName' has a wrong offset!");
//static_assert(offsetof(BED_FSMNode_GI_Loading_RequestTemplateTravelLevelBegin_PostPropertyChanged, PropertyName) == 0x000010, "Member 'BED_FSMNode_GI_Loading_RequestTemplateTravelLevelBegin_PostPropertyChanged::PropertyName' has a wrong offset!");

// Function b1-Managed.BED_FSMNode_GI_Loading_RequestTemplateTravelLevelBegin.GetNodeDescriptionInCS
// 0x0010 (0x0010 - 0x0000)
struct BED_FSMNode_GI_Loading_RequestTemplateTravelLevelBegin_GetNodeDescriptionInCS final
{
public:
	class FString                                 ReturnValue;                                       // 0x0000(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash)
};
//static_assert(alignof(BED_FSMNode_GI_Loading_RequestTemplateTravelLevelBegin_GetNodeDescriptionInCS) == 0x000008, "Wrong alignment on BED_FSMNode_GI_Loading_RequestTemplateTravelLevelBegin_GetNodeDescriptionInCS");
//static_assert(sizeof(BED_FSMNode_GI_Loading_RequestTemplateTravelLevelBegin_GetNodeDescriptionInCS) == 0x000010, "Wrong size on BED_FSMNode_GI_Loading_RequestTemplateTravelLevelBegin_GetNodeDescriptionInCS");
//static_assert(offsetof(BED_FSMNode_GI_Loading_RequestTemplateTravelLevelBegin_GetNodeDescriptionInCS, ReturnValue) == 0x000000, "Member 'BED_FSMNode_GI_Loading_RequestTemplateTravelLevelBegin_GetNodeDescriptionInCS::ReturnValue' has a wrong offset!");

// Function b1-Managed.BED_FSMNode_GI_Loading_RequestTemplateTravelLevelEnd.PostPropertyChanged
// 0x0020 (0x0020 - 0x0000)
struct BED_FSMNode_GI_Loading_RequestTemplateTravelLevelEnd_PostPropertyChanged final
{
public:
	class FString                                 MemberName;                                        // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash)
	class FString                                 PropertyName;                                      // 0x0010(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash)
};
//static_assert(alignof(BED_FSMNode_GI_Loading_RequestTemplateTravelLevelEnd_PostPropertyChanged) == 0x000008, "Wrong alignment on BED_FSMNode_GI_Loading_RequestTemplateTravelLevelEnd_PostPropertyChanged");
//static_assert(sizeof(BED_FSMNode_GI_Loading_RequestTemplateTravelLevelEnd_PostPropertyChanged) == 0x000020, "Wrong size on BED_FSMNode_GI_Loading_RequestTemplateTravelLevelEnd_PostPropertyChanged");
//static_assert(offsetof(BED_FSMNode_GI_Loading_RequestTemplateTravelLevelEnd_PostPropertyChanged, MemberName) == 0x000000, "Member 'BED_FSMNode_GI_Loading_RequestTemplateTravelLevelEnd_PostPropertyChanged::MemberName' has a wrong offset!");
//static_assert(offsetof(BED_FSMNode_GI_Loading_RequestTemplateTravelLevelEnd_PostPropertyChanged, PropertyName) == 0x000010, "Member 'BED_FSMNode_GI_Loading_RequestTemplateTravelLevelEnd_PostPropertyChanged::PropertyName' has a wrong offset!");

// Function b1-Managed.BED_FSMNode_GI_Loading_RequestTemplateTravelLevelEnd.GetNodeDescriptionInCS
// 0x0010 (0x0010 - 0x0000)
struct BED_FSMNode_GI_Loading_RequestTemplateTravelLevelEnd_GetNodeDescriptionInCS final
{
public:
	class FString                                 ReturnValue;                                       // 0x0000(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash)
};
//static_assert(alignof(BED_FSMNode_GI_Loading_RequestTemplateTravelLevelEnd_GetNodeDescriptionInCS) == 0x000008, "Wrong alignment on BED_FSMNode_GI_Loading_RequestTemplateTravelLevelEnd_GetNodeDescriptionInCS");
//static_assert(sizeof(BED_FSMNode_GI_Loading_RequestTemplateTravelLevelEnd_GetNodeDescriptionInCS) == 0x000010, "Wrong size on BED_FSMNode_GI_Loading_RequestTemplateTravelLevelEnd_GetNodeDescriptionInCS");
//static_assert(offsetof(BED_FSMNode_GI_Loading_RequestTemplateTravelLevelEnd_GetNodeDescriptionInCS, ReturnValue) == 0x000000, "Member 'BED_FSMNode_GI_Loading_RequestTemplateTravelLevelEnd_GetNodeDescriptionInCS::ReturnValue' has a wrong offset!");

// Function b1-Managed.BED_FSMNode_GI_Loading_Reset820DemoGameData.PostPropertyChanged
// 0x0020 (0x0020 - 0x0000)
struct BED_FSMNode_GI_Loading_Reset820DemoGameData_PostPropertyChanged final
{
public:
	class FString                                 MemberName;                                        // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash)
	class FString                                 PropertyName;                                      // 0x0010(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash)
};
//static_assert(alignof(BED_FSMNode_GI_Loading_Reset820DemoGameData_PostPropertyChanged) == 0x000008, "Wrong alignment on BED_FSMNode_GI_Loading_Reset820DemoGameData_PostPropertyChanged");
//static_assert(sizeof(BED_FSMNode_GI_Loading_Reset820DemoGameData_PostPropertyChanged) == 0x000020, "Wrong size on BED_FSMNode_GI_Loading_Reset820DemoGameData_PostPropertyChanged");
//static_assert(offsetof(BED_FSMNode_GI_Loading_Reset820DemoGameData_PostPropertyChanged, MemberName) == 0x000000, "Member 'BED_FSMNode_GI_Loading_Reset820DemoGameData_PostPropertyChanged::MemberName' has a wrong offset!");
//static_assert(offsetof(BED_FSMNode_GI_Loading_Reset820DemoGameData_PostPropertyChanged, PropertyName) == 0x000010, "Member 'BED_FSMNode_GI_Loading_Reset820DemoGameData_PostPropertyChanged::PropertyName' has a wrong offset!");

// Function b1-Managed.BED_FSMNode_GI_Loading_Reset820DemoGameData.GetNodeDescriptionInCS
// 0x0010 (0x0010 - 0x0000)
struct BED_FSMNode_GI_Loading_Reset820DemoGameData_GetNodeDescriptionInCS final
{
public:
	class FString                                 ReturnValue;                                       // 0x0000(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash)
};
//static_assert(alignof(BED_FSMNode_GI_Loading_Reset820DemoGameData_GetNodeDescriptionInCS) == 0x000008, "Wrong alignment on BED_FSMNode_GI_Loading_Reset820DemoGameData_GetNodeDescriptionInCS");
//static_assert(sizeof(BED_FSMNode_GI_Loading_Reset820DemoGameData_GetNodeDescriptionInCS) == 0x000010, "Wrong size on BED_FSMNode_GI_Loading_Reset820DemoGameData_GetNodeDescriptionInCS");
//static_assert(offsetof(BED_FSMNode_GI_Loading_Reset820DemoGameData_GetNodeDescriptionInCS, ReturnValue) == 0x000000, "Member 'BED_FSMNode_GI_Loading_Reset820DemoGameData_GetNodeDescriptionInCS::ReturnValue' has a wrong offset!");

// Function b1-Managed.BED_FSMNode_GI_Loading_ResetGameInstanceData.PostPropertyChanged
// 0x0020 (0x0020 - 0x0000)
struct BED_FSMNode_GI_Loading_ResetGameInstanceData_PostPropertyChanged final
{
public:
	class FString                                 MemberName;                                        // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash)
	class FString                                 PropertyName;                                      // 0x0010(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash)
};
//static_assert(alignof(BED_FSMNode_GI_Loading_ResetGameInstanceData_PostPropertyChanged) == 0x000008, "Wrong alignment on BED_FSMNode_GI_Loading_ResetGameInstanceData_PostPropertyChanged");
//static_assert(sizeof(BED_FSMNode_GI_Loading_ResetGameInstanceData_PostPropertyChanged) == 0x000020, "Wrong size on BED_FSMNode_GI_Loading_ResetGameInstanceData_PostPropertyChanged");
//static_assert(offsetof(BED_FSMNode_GI_Loading_ResetGameInstanceData_PostPropertyChanged, MemberName) == 0x000000, "Member 'BED_FSMNode_GI_Loading_ResetGameInstanceData_PostPropertyChanged::MemberName' has a wrong offset!");
//static_assert(offsetof(BED_FSMNode_GI_Loading_ResetGameInstanceData_PostPropertyChanged, PropertyName) == 0x000010, "Member 'BED_FSMNode_GI_Loading_ResetGameInstanceData_PostPropertyChanged::PropertyName' has a wrong offset!");

// Function b1-Managed.BED_FSMNode_GI_Loading_ResetGameInstanceData.GetNodeDescriptionInCS
// 0x0010 (0x0010 - 0x0000)
struct BED_FSMNode_GI_Loading_ResetGameInstanceData_GetNodeDescriptionInCS final
{
public:
	class FString                                 ReturnValue;                                       // 0x0000(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash)
};
//static_assert(alignof(BED_FSMNode_GI_Loading_ResetGameInstanceData_GetNodeDescriptionInCS) == 0x000008, "Wrong alignment on BED_FSMNode_GI_Loading_ResetGameInstanceData_GetNodeDescriptionInCS");
//static_assert(sizeof(BED_FSMNode_GI_Loading_ResetGameInstanceData_GetNodeDescriptionInCS) == 0x000010, "Wrong size on BED_FSMNode_GI_Loading_ResetGameInstanceData_GetNodeDescriptionInCS");
//static_assert(offsetof(BED_FSMNode_GI_Loading_ResetGameInstanceData_GetNodeDescriptionInCS, ReturnValue) == 0x000000, "Member 'BED_FSMNode_GI_Loading_ResetGameInstanceData_GetNodeDescriptionInCS::ReturnValue' has a wrong offset!");

// Function b1-Managed.BED_FSMNode_GI_Loading_ResumeGame.PostPropertyChanged
// 0x0020 (0x0020 - 0x0000)
struct BED_FSMNode_GI_Loading_ResumeGame_PostPropertyChanged final
{
public:
	class FString                                 MemberName;                                        // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash)
	class FString                                 PropertyName;                                      // 0x0010(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash)
};
//static_assert(alignof(BED_FSMNode_GI_Loading_ResumeGame_PostPropertyChanged) == 0x000008, "Wrong alignment on BED_FSMNode_GI_Loading_ResumeGame_PostPropertyChanged");
//static_assert(sizeof(BED_FSMNode_GI_Loading_ResumeGame_PostPropertyChanged) == 0x000020, "Wrong size on BED_FSMNode_GI_Loading_ResumeGame_PostPropertyChanged");
//static_assert(offsetof(BED_FSMNode_GI_Loading_ResumeGame_PostPropertyChanged, MemberName) == 0x000000, "Member 'BED_FSMNode_GI_Loading_ResumeGame_PostPropertyChanged::MemberName' has a wrong offset!");
//static_assert(offsetof(BED_FSMNode_GI_Loading_ResumeGame_PostPropertyChanged, PropertyName) == 0x000010, "Member 'BED_FSMNode_GI_Loading_ResumeGame_PostPropertyChanged::PropertyName' has a wrong offset!");

// Function b1-Managed.BED_FSMNode_GI_Loading_ResumeGame.GetNodeDescriptionInCS
// 0x0010 (0x0010 - 0x0000)
struct BED_FSMNode_GI_Loading_ResumeGame_GetNodeDescriptionInCS final
{
public:
	class FString                                 ReturnValue;                                       // 0x0000(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash)
};
//static_assert(alignof(BED_FSMNode_GI_Loading_ResumeGame_GetNodeDescriptionInCS) == 0x000008, "Wrong alignment on BED_FSMNode_GI_Loading_ResumeGame_GetNodeDescriptionInCS");
//static_assert(sizeof(BED_FSMNode_GI_Loading_ResumeGame_GetNodeDescriptionInCS) == 0x000010, "Wrong size on BED_FSMNode_GI_Loading_ResumeGame_GetNodeDescriptionInCS");
//static_assert(offsetof(BED_FSMNode_GI_Loading_ResumeGame_GetNodeDescriptionInCS, ReturnValue) == 0x000000, "Member 'BED_FSMNode_GI_Loading_ResumeGame_GetNodeDescriptionInCS::ReturnValue' has a wrong offset!");

// Function b1-Managed.BGG_GameMode.GetSeamlessTravelActorListCS
// 0x0018 (0x0018 - 0x0000)
struct BGG_GameMode_GetSeamlessTravelActorListCS final
{
public:
	uint8                                         bToTransition : 1;                                 // 0x0000(0x0001)(BitIndex: 0x00, PropSize: 0x0001 (Parm, NoDestructor, HasGetValueTypeHash))
	uint8                                         Pad_1[0x7];                                        // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<class AActor*>                         ActorList;                                         // 0x0008(0x0010)(Parm, OutParm)
};
//static_assert(alignof(BGG_GameMode_GetSeamlessTravelActorListCS) == 0x000008, "Wrong alignment on BGG_GameMode_GetSeamlessTravelActorListCS");
//static_assert(sizeof(BGG_GameMode_GetSeamlessTravelActorListCS) == 0x000018, "Wrong size on BGG_GameMode_GetSeamlessTravelActorListCS");
//static_assert(offsetof(BGG_GameMode_GetSeamlessTravelActorListCS, ActorList) == 0x000008, "Member 'BGG_GameMode_GetSeamlessTravelActorListCS::ActorList' has a wrong offset!");

// Function b1-Managed.BGG_GameMode.ChoosePlayerStart
// 0x0010 (0x0010 - 0x0000)
struct BGG_GameMode_ChoosePlayerStart final
{
public:
	class AController*                            Player;                                            // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class AActor*                                 ReturnValue;                                       // 0x0008(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
//static_assert(alignof(BGG_GameMode_ChoosePlayerStart) == 0x000008, "Wrong alignment on BGG_GameMode_ChoosePlayerStart");
//static_assert(sizeof(BGG_GameMode_ChoosePlayerStart) == 0x000010, "Wrong size on BGG_GameMode_ChoosePlayerStart");
//static_assert(offsetof(BGG_GameMode_ChoosePlayerStart, Player) == 0x000000, "Member 'BGG_GameMode_ChoosePlayerStart::Player' has a wrong offset!");
//static_assert(offsetof(BGG_GameMode_ChoosePlayerStart, ReturnValue) == 0x000008, "Member 'BGG_GameMode_ChoosePlayerStart::ReturnValue' has a wrong offset!");

// Function b1-Managed.BED_FSMNode_GI_Loading_ResumePsoCachePrecompile.PostPropertyChanged
// 0x0020 (0x0020 - 0x0000)
struct BED_FSMNode_GI_Loading_ResumePsoCachePrecompile_PostPropertyChanged final
{
public:
	class FString                                 MemberName;                                        // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash)
	class FString                                 PropertyName;                                      // 0x0010(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash)
};
//static_assert(alignof(BED_FSMNode_GI_Loading_ResumePsoCachePrecompile_PostPropertyChanged) == 0x000008, "Wrong alignment on BED_FSMNode_GI_Loading_ResumePsoCachePrecompile_PostPropertyChanged");
//static_assert(sizeof(BED_FSMNode_GI_Loading_ResumePsoCachePrecompile_PostPropertyChanged) == 0x000020, "Wrong size on BED_FSMNode_GI_Loading_ResumePsoCachePrecompile_PostPropertyChanged");
//static_assert(offsetof(BED_FSMNode_GI_Loading_ResumePsoCachePrecompile_PostPropertyChanged, MemberName) == 0x000000, "Member 'BED_FSMNode_GI_Loading_ResumePsoCachePrecompile_PostPropertyChanged::MemberName' has a wrong offset!");
//static_assert(offsetof(BED_FSMNode_GI_Loading_ResumePsoCachePrecompile_PostPropertyChanged, PropertyName) == 0x000010, "Member 'BED_FSMNode_GI_Loading_ResumePsoCachePrecompile_PostPropertyChanged::PropertyName' has a wrong offset!");

// Function b1-Managed.BED_FSMNode_GI_Loading_ResumePsoCachePrecompile.GetNodeDescriptionInCS
// 0x0010 (0x0010 - 0x0000)
struct BED_FSMNode_GI_Loading_ResumePsoCachePrecompile_GetNodeDescriptionInCS final
{
public:
	class FString                                 ReturnValue;                                       // 0x0000(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash)
};
//static_assert(alignof(BED_FSMNode_GI_Loading_ResumePsoCachePrecompile_GetNodeDescriptionInCS) == 0x000008, "Wrong alignment on BED_FSMNode_GI_Loading_ResumePsoCachePrecompile_GetNodeDescriptionInCS");
//static_assert(sizeof(BED_FSMNode_GI_Loading_ResumePsoCachePrecompile_GetNodeDescriptionInCS) == 0x000010, "Wrong size on BED_FSMNode_GI_Loading_ResumePsoCachePrecompile_GetNodeDescriptionInCS");
//static_assert(offsetof(BED_FSMNode_GI_Loading_ResumePsoCachePrecompile_GetNodeDescriptionInCS, ReturnValue) == 0x000000, "Member 'BED_FSMNode_GI_Loading_ResumePsoCachePrecompile_GetNodeDescriptionInCS::ReturnValue' has a wrong offset!");

// Function b1-Managed.BED_FSMNode_GI_Loading_SaveArchiveAndWaitFinish.PostPropertyChanged
// 0x0020 (0x0020 - 0x0000)
struct BED_FSMNode_GI_Loading_SaveArchiveAndWaitFinish_PostPropertyChanged final
{
public:
	class FString                                 MemberName;                                        // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash)
	class FString                                 PropertyName;                                      // 0x0010(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash)
};
//static_assert(alignof(BED_FSMNode_GI_Loading_SaveArchiveAndWaitFinish_PostPropertyChanged) == 0x000008, "Wrong alignment on BED_FSMNode_GI_Loading_SaveArchiveAndWaitFinish_PostPropertyChanged");
//static_assert(sizeof(BED_FSMNode_GI_Loading_SaveArchiveAndWaitFinish_PostPropertyChanged) == 0x000020, "Wrong size on BED_FSMNode_GI_Loading_SaveArchiveAndWaitFinish_PostPropertyChanged");
//static_assert(offsetof(BED_FSMNode_GI_Loading_SaveArchiveAndWaitFinish_PostPropertyChanged, MemberName) == 0x000000, "Member 'BED_FSMNode_GI_Loading_SaveArchiveAndWaitFinish_PostPropertyChanged::MemberName' has a wrong offset!");
//static_assert(offsetof(BED_FSMNode_GI_Loading_SaveArchiveAndWaitFinish_PostPropertyChanged, PropertyName) == 0x000010, "Member 'BED_FSMNode_GI_Loading_SaveArchiveAndWaitFinish_PostPropertyChanged::PropertyName' has a wrong offset!");

// Function b1-Managed.BED_FSMNode_GI_Loading_SaveArchiveAndWaitFinish.GetNodeDescriptionInCS
// 0x0010 (0x0010 - 0x0000)
struct BED_FSMNode_GI_Loading_SaveArchiveAndWaitFinish_GetNodeDescriptionInCS final
{
public:
	class FString                                 ReturnValue;                                       // 0x0000(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash)
};
//static_assert(alignof(BED_FSMNode_GI_Loading_SaveArchiveAndWaitFinish_GetNodeDescriptionInCS) == 0x000008, "Wrong alignment on BED_FSMNode_GI_Loading_SaveArchiveAndWaitFinish_GetNodeDescriptionInCS");
//static_assert(sizeof(BED_FSMNode_GI_Loading_SaveArchiveAndWaitFinish_GetNodeDescriptionInCS) == 0x000010, "Wrong size on BED_FSMNode_GI_Loading_SaveArchiveAndWaitFinish_GetNodeDescriptionInCS");
//static_assert(offsetof(BED_FSMNode_GI_Loading_SaveArchiveAndWaitFinish_GetNodeDescriptionInCS, ReturnValue) == 0x000000, "Member 'BED_FSMNode_GI_Loading_SaveArchiveAndWaitFinish_GetNodeDescriptionInCS::ReturnValue' has a wrong offset!");

// Function b1-Managed.BED_FSMNode_GI_Loading_ServerBattleReady.PostPropertyChanged
// 0x0020 (0x0020 - 0x0000)
struct BED_FSMNode_GI_Loading_ServerBattleReady_PostPropertyChanged final
{
public:
	class FString                                 MemberName;                                        // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash)
	class FString                                 PropertyName;                                      // 0x0010(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash)
};
//static_assert(alignof(BED_FSMNode_GI_Loading_ServerBattleReady_PostPropertyChanged) == 0x000008, "Wrong alignment on BED_FSMNode_GI_Loading_ServerBattleReady_PostPropertyChanged");
//static_assert(sizeof(BED_FSMNode_GI_Loading_ServerBattleReady_PostPropertyChanged) == 0x000020, "Wrong size on BED_FSMNode_GI_Loading_ServerBattleReady_PostPropertyChanged");
//static_assert(offsetof(BED_FSMNode_GI_Loading_ServerBattleReady_PostPropertyChanged, MemberName) == 0x000000, "Member 'BED_FSMNode_GI_Loading_ServerBattleReady_PostPropertyChanged::MemberName' has a wrong offset!");
//static_assert(offsetof(BED_FSMNode_GI_Loading_ServerBattleReady_PostPropertyChanged, PropertyName) == 0x000010, "Member 'BED_FSMNode_GI_Loading_ServerBattleReady_PostPropertyChanged::PropertyName' has a wrong offset!");

// Function b1-Managed.BED_FSMNode_GI_Loading_ServerBattleReady.GetNodeDescriptionInCS
// 0x0010 (0x0010 - 0x0000)
struct BED_FSMNode_GI_Loading_ServerBattleReady_GetNodeDescriptionInCS final
{
public:
	class FString                                 ReturnValue;                                       // 0x0000(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash)
};
//static_assert(alignof(BED_FSMNode_GI_Loading_ServerBattleReady_GetNodeDescriptionInCS) == 0x000008, "Wrong alignment on BED_FSMNode_GI_Loading_ServerBattleReady_GetNodeDescriptionInCS");
//static_assert(sizeof(BED_FSMNode_GI_Loading_ServerBattleReady_GetNodeDescriptionInCS) == 0x000010, "Wrong size on BED_FSMNode_GI_Loading_ServerBattleReady_GetNodeDescriptionInCS");
//static_assert(offsetof(BED_FSMNode_GI_Loading_ServerBattleReady_GetNodeDescriptionInCS, ReturnValue) == 0x000000, "Member 'BED_FSMNode_GI_Loading_ServerBattleReady_GetNodeDescriptionInCS::ReturnValue' has a wrong offset!");

// Function b1-Managed.BGUCameraRig_Crane.ReceiveEndPlay
// 0x0001 (0x0001 - 0x0000)
struct BGUCameraRig_Crane_ReceiveEndPlay final
{
public:
	EEndPlayReason                                EndPlayReason;                                     // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
//static_assert(alignof(BGUCameraRig_Crane_ReceiveEndPlay) == 0x000001, "Wrong alignment on BGUCameraRig_Crane_ReceiveEndPlay");
//static_assert(sizeof(BGUCameraRig_Crane_ReceiveEndPlay) == 0x000001, "Wrong size on BGUCameraRig_Crane_ReceiveEndPlay");
//static_assert(offsetof(BGUCameraRig_Crane_ReceiveEndPlay, EndPlayReason) == 0x000000, "Member 'BGUCameraRig_Crane_ReceiveEndPlay::EndPlayReason' has a wrong offset!");

// Function b1-Managed.AudioTriggerCompFunctionBinder.AudioCallback
// 0x0010 (0x0010 - 0x0000)
struct AudioTriggerCompFunctionBinder_AudioCallback final
{
public:
	EAkCallbackType                               CallbackType;                                      // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_1[0x7];                                        // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UAkCallbackInfo*                        CallbackInfo;                                      // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
//static_assert(alignof(AudioTriggerCompFunctionBinder_AudioCallback) == 0x000008, "Wrong alignment on AudioTriggerCompFunctionBinder_AudioCallback");
//static_assert(sizeof(AudioTriggerCompFunctionBinder_AudioCallback) == 0x000010, "Wrong size on AudioTriggerCompFunctionBinder_AudioCallback");
//static_assert(offsetof(AudioTriggerCompFunctionBinder_AudioCallback, CallbackType) == 0x000000, "Member 'AudioTriggerCompFunctionBinder_AudioCallback::CallbackType' has a wrong offset!");
//static_assert(offsetof(AudioTriggerCompFunctionBinder_AudioCallback, CallbackInfo) == 0x000008, "Member 'AudioTriggerCompFunctionBinder_AudioCallback::CallbackInfo' has a wrong offset!");

// Function b1-Managed.BANS_GSSlowIK.GSNotifyBeginCS
// 0x0048 (0x0048 - 0x0000)
struct BANS_GSSlowIK_GSNotifyBeginCS final
{
public:
	struct FUStGSNotifyParam                      NotifyParam;                                       // 0x0000(0x0040)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
	float                                         TotalDuration;                                     // 0x0040(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
//static_assert(alignof(BANS_GSSlowIK_GSNotifyBeginCS) == 0x000008, "Wrong alignment on BANS_GSSlowIK_GSNotifyBeginCS");
//static_assert(sizeof(BANS_GSSlowIK_GSNotifyBeginCS) == 0x000048, "Wrong size on BANS_GSSlowIK_GSNotifyBeginCS");
//static_assert(offsetof(BANS_GSSlowIK_GSNotifyBeginCS, NotifyParam) == 0x000000, "Member 'BANS_GSSlowIK_GSNotifyBeginCS::NotifyParam' has a wrong offset!");
//static_assert(offsetof(BANS_GSSlowIK_GSNotifyBeginCS, TotalDuration) == 0x000040, "Member 'BANS_GSSlowIK_GSNotifyBeginCS::TotalDuration' has a wrong offset!");

// Function b1-Managed.BANS_GSSlowIK.GSNotifyTickCS
// 0x0048 (0x0048 - 0x0000)
struct BANS_GSSlowIK_GSNotifyTickCS final
{
public:
	struct FUStGSNotifyParam                      NotifyParam;                                       // 0x0000(0x0040)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
	float                                         FrameDeltaTime;                                    // 0x0040(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
//static_assert(alignof(BANS_GSSlowIK_GSNotifyTickCS) == 0x000008, "Wrong alignment on BANS_GSSlowIK_GSNotifyTickCS");
//static_assert(sizeof(BANS_GSSlowIK_GSNotifyTickCS) == 0x000048, "Wrong size on BANS_GSSlowIK_GSNotifyTickCS");
//static_assert(offsetof(BANS_GSSlowIK_GSNotifyTickCS, NotifyParam) == 0x000000, "Member 'BANS_GSSlowIK_GSNotifyTickCS::NotifyParam' has a wrong offset!");
//static_assert(offsetof(BANS_GSSlowIK_GSNotifyTickCS, FrameDeltaTime) == 0x000040, "Member 'BANS_GSSlowIK_GSNotifyTickCS::FrameDeltaTime' has a wrong offset!");

// Function b1-Managed.BANS_GSSlowIK.GSNotifyEndCS
// 0x0040 (0x0040 - 0x0000)
struct BANS_GSSlowIK_GSNotifyEndCS final
{
public:
	struct FUStGSNotifyParam                      NotifyParam;                                       // 0x0000(0x0040)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
//static_assert(alignof(BANS_GSSlowIK_GSNotifyEndCS) == 0x000008, "Wrong alignment on BANS_GSSlowIK_GSNotifyEndCS");
//static_assert(sizeof(BANS_GSSlowIK_GSNotifyEndCS) == 0x000040, "Wrong size on BANS_GSSlowIK_GSNotifyEndCS");
//static_assert(offsetof(BANS_GSSlowIK_GSNotifyEndCS, NotifyParam) == 0x000000, "Member 'BANS_GSSlowIK_GSNotifyEndCS::NotifyParam' has a wrong offset!");

// Function b1-Managed.BED_FSMNode_GI_Loading_SetPSOCacheUsageMask.PostPropertyChanged
// 0x0020 (0x0020 - 0x0000)
struct BED_FSMNode_GI_Loading_SetPSOCacheUsageMask_PostPropertyChanged final
{
public:
	class FString                                 MemberName;                                        // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash)
	class FString                                 PropertyName;                                      // 0x0010(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash)
};
//static_assert(alignof(BED_FSMNode_GI_Loading_SetPSOCacheUsageMask_PostPropertyChanged) == 0x000008, "Wrong alignment on BED_FSMNode_GI_Loading_SetPSOCacheUsageMask_PostPropertyChanged");
//static_assert(sizeof(BED_FSMNode_GI_Loading_SetPSOCacheUsageMask_PostPropertyChanged) == 0x000020, "Wrong size on BED_FSMNode_GI_Loading_SetPSOCacheUsageMask_PostPropertyChanged");
//static_assert(offsetof(BED_FSMNode_GI_Loading_SetPSOCacheUsageMask_PostPropertyChanged, MemberName) == 0x000000, "Member 'BED_FSMNode_GI_Loading_SetPSOCacheUsageMask_PostPropertyChanged::MemberName' has a wrong offset!");
//static_assert(offsetof(BED_FSMNode_GI_Loading_SetPSOCacheUsageMask_PostPropertyChanged, PropertyName) == 0x000010, "Member 'BED_FSMNode_GI_Loading_SetPSOCacheUsageMask_PostPropertyChanged::PropertyName' has a wrong offset!");

// Function b1-Managed.BED_FSMNode_GI_Loading_SetPSOCacheUsageMask.GetNodeDescriptionInCS
// 0x0010 (0x0010 - 0x0000)
struct BED_FSMNode_GI_Loading_SetPSOCacheUsageMask_GetNodeDescriptionInCS final
{
public:
	class FString                                 ReturnValue;                                       // 0x0000(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash)
};
//static_assert(alignof(BED_FSMNode_GI_Loading_SetPSOCacheUsageMask_GetNodeDescriptionInCS) == 0x000008, "Wrong alignment on BED_FSMNode_GI_Loading_SetPSOCacheUsageMask_GetNodeDescriptionInCS");
//static_assert(sizeof(BED_FSMNode_GI_Loading_SetPSOCacheUsageMask_GetNodeDescriptionInCS) == 0x000010, "Wrong size on BED_FSMNode_GI_Loading_SetPSOCacheUsageMask_GetNodeDescriptionInCS");
//static_assert(offsetof(BED_FSMNode_GI_Loading_SetPSOCacheUsageMask_GetNodeDescriptionInCS, ReturnValue) == 0x000000, "Member 'BED_FSMNode_GI_Loading_SetPSOCacheUsageMask_GetNodeDescriptionInCS::ReturnValue' has a wrong offset!");

// Function b1-Managed.BED_FSMNode_GI_Loading_ShowAgreementPolicyInStartGame.PostPropertyChanged
// 0x0020 (0x0020 - 0x0000)
struct BED_FSMNode_GI_Loading_ShowAgreementPolicyInStartGame_PostPropertyChanged final
{
public:
	class FString                                 MemberName;                                        // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash)
	class FString                                 PropertyName;                                      // 0x0010(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash)
};
//static_assert(alignof(BED_FSMNode_GI_Loading_ShowAgreementPolicyInStartGame_PostPropertyChanged) == 0x000008, "Wrong alignment on BED_FSMNode_GI_Loading_ShowAgreementPolicyInStartGame_PostPropertyChanged");
//static_assert(sizeof(BED_FSMNode_GI_Loading_ShowAgreementPolicyInStartGame_PostPropertyChanged) == 0x000020, "Wrong size on BED_FSMNode_GI_Loading_ShowAgreementPolicyInStartGame_PostPropertyChanged");
//static_assert(offsetof(BED_FSMNode_GI_Loading_ShowAgreementPolicyInStartGame_PostPropertyChanged, MemberName) == 0x000000, "Member 'BED_FSMNode_GI_Loading_ShowAgreementPolicyInStartGame_PostPropertyChanged::MemberName' has a wrong offset!");
//static_assert(offsetof(BED_FSMNode_GI_Loading_ShowAgreementPolicyInStartGame_PostPropertyChanged, PropertyName) == 0x000010, "Member 'BED_FSMNode_GI_Loading_ShowAgreementPolicyInStartGame_PostPropertyChanged::PropertyName' has a wrong offset!");

// Function b1-Managed.BED_FSMNode_GI_Loading_ShowAgreementPolicyInStartGame.GetNodeDescriptionInCS
// 0x0010 (0x0010 - 0x0000)
struct BED_FSMNode_GI_Loading_ShowAgreementPolicyInStartGame_GetNodeDescriptionInCS final
{
public:
	class FString                                 ReturnValue;                                       // 0x0000(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash)
};
//static_assert(alignof(BED_FSMNode_GI_Loading_ShowAgreementPolicyInStartGame_GetNodeDescriptionInCS) == 0x000008, "Wrong alignment on BED_FSMNode_GI_Loading_ShowAgreementPolicyInStartGame_GetNodeDescriptionInCS");
//static_assert(sizeof(BED_FSMNode_GI_Loading_ShowAgreementPolicyInStartGame_GetNodeDescriptionInCS) == 0x000010, "Wrong size on BED_FSMNode_GI_Loading_ShowAgreementPolicyInStartGame_GetNodeDescriptionInCS");
//static_assert(offsetof(BED_FSMNode_GI_Loading_ShowAgreementPolicyInStartGame_GetNodeDescriptionInCS, ReturnValue) == 0x000000, "Member 'BED_FSMNode_GI_Loading_ShowAgreementPolicyInStartGame_GetNodeDescriptionInCS::ReturnValue' has a wrong offset!");

// Function b1-Managed.BED_FSMNode_GI_Loading_ShowGameDisclaimerInStartGame.PostPropertyChanged
// 0x0020 (0x0020 - 0x0000)
struct BED_FSMNode_GI_Loading_ShowGameDisclaimerInStartGame_PostPropertyChanged final
{
public:
	class FString                                 MemberName;                                        // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash)
	class FString                                 PropertyName;                                      // 0x0010(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash)
};
//static_assert(alignof(BED_FSMNode_GI_Loading_ShowGameDisclaimerInStartGame_PostPropertyChanged) == 0x000008, "Wrong alignment on BED_FSMNode_GI_Loading_ShowGameDisclaimerInStartGame_PostPropertyChanged");
//static_assert(sizeof(BED_FSMNode_GI_Loading_ShowGameDisclaimerInStartGame_PostPropertyChanged) == 0x000020, "Wrong size on BED_FSMNode_GI_Loading_ShowGameDisclaimerInStartGame_PostPropertyChanged");
//static_assert(offsetof(BED_FSMNode_GI_Loading_ShowGameDisclaimerInStartGame_PostPropertyChanged, MemberName) == 0x000000, "Member 'BED_FSMNode_GI_Loading_ShowGameDisclaimerInStartGame_PostPropertyChanged::MemberName' has a wrong offset!");
//static_assert(offsetof(BED_FSMNode_GI_Loading_ShowGameDisclaimerInStartGame_PostPropertyChanged, PropertyName) == 0x000010, "Member 'BED_FSMNode_GI_Loading_ShowGameDisclaimerInStartGame_PostPropertyChanged::PropertyName' has a wrong offset!");

// Function b1-Managed.BED_FSMNode_GI_Loading_ShowGameDisclaimerInStartGame.GetNodeDescriptionInCS
// 0x0010 (0x0010 - 0x0000)
struct BED_FSMNode_GI_Loading_ShowGameDisclaimerInStartGame_GetNodeDescriptionInCS final
{
public:
	class FString                                 ReturnValue;                                       // 0x0000(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash)
};
//static_assert(alignof(BED_FSMNode_GI_Loading_ShowGameDisclaimerInStartGame_GetNodeDescriptionInCS) == 0x000008, "Wrong alignment on BED_FSMNode_GI_Loading_ShowGameDisclaimerInStartGame_GetNodeDescriptionInCS");
//static_assert(sizeof(BED_FSMNode_GI_Loading_ShowGameDisclaimerInStartGame_GetNodeDescriptionInCS) == 0x000010, "Wrong size on BED_FSMNode_GI_Loading_ShowGameDisclaimerInStartGame_GetNodeDescriptionInCS");
//static_assert(offsetof(BED_FSMNode_GI_Loading_ShowGameDisclaimerInStartGame_GetNodeDescriptionInCS, ReturnValue) == 0x000000, "Member 'BED_FSMNode_GI_Loading_ShowGameDisclaimerInStartGame_GetNodeDescriptionInCS::ReturnValue' has a wrong offset!");

// Function b1-Managed.BED_FSMNode_GI_Loading_ShowHealthyGamingAdviceInStartGame.PostPropertyChanged
// 0x0020 (0x0020 - 0x0000)
struct BED_FSMNode_GI_Loading_ShowHealthyGamingAdviceInStartGame_PostPropertyChanged final
{
public:
	class FString                                 MemberName;                                        // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash)
	class FString                                 PropertyName;                                      // 0x0010(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash)
};
//static_assert(alignof(BED_FSMNode_GI_Loading_ShowHealthyGamingAdviceInStartGame_PostPropertyChanged) == 0x000008, "Wrong alignment on BED_FSMNode_GI_Loading_ShowHealthyGamingAdviceInStartGame_PostPropertyChanged");
//static_assert(sizeof(BED_FSMNode_GI_Loading_ShowHealthyGamingAdviceInStartGame_PostPropertyChanged) == 0x000020, "Wrong size on BED_FSMNode_GI_Loading_ShowHealthyGamingAdviceInStartGame_PostPropertyChanged");
//static_assert(offsetof(BED_FSMNode_GI_Loading_ShowHealthyGamingAdviceInStartGame_PostPropertyChanged, MemberName) == 0x000000, "Member 'BED_FSMNode_GI_Loading_ShowHealthyGamingAdviceInStartGame_PostPropertyChanged::MemberName' has a wrong offset!");
//static_assert(offsetof(BED_FSMNode_GI_Loading_ShowHealthyGamingAdviceInStartGame_PostPropertyChanged, PropertyName) == 0x000010, "Member 'BED_FSMNode_GI_Loading_ShowHealthyGamingAdviceInStartGame_PostPropertyChanged::PropertyName' has a wrong offset!");

// Function b1-Managed.BED_FSMNode_GI_Loading_ShowHealthyGamingAdviceInStartGame.GetNodeDescriptionInCS
// 0x0010 (0x0010 - 0x0000)
struct BED_FSMNode_GI_Loading_ShowHealthyGamingAdviceInStartGame_GetNodeDescriptionInCS final
{
public:
	class FString                                 ReturnValue;                                       // 0x0000(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash)
};
//static_assert(alignof(BED_FSMNode_GI_Loading_ShowHealthyGamingAdviceInStartGame_GetNodeDescriptionInCS) == 0x000008, "Wrong alignment on BED_FSMNode_GI_Loading_ShowHealthyGamingAdviceInStartGame_GetNodeDescriptionInCS");
//static_assert(sizeof(BED_FSMNode_GI_Loading_ShowHealthyGamingAdviceInStartGame_GetNodeDescriptionInCS) == 0x000010, "Wrong size on BED_FSMNode_GI_Loading_ShowHealthyGamingAdviceInStartGame_GetNodeDescriptionInCS");
//static_assert(offsetof(BED_FSMNode_GI_Loading_ShowHealthyGamingAdviceInStartGame_GetNodeDescriptionInCS, ReturnValue) == 0x000000, "Member 'BED_FSMNode_GI_Loading_ShowHealthyGamingAdviceInStartGame_GetNodeDescriptionInCS::ReturnValue' has a wrong offset!");

// Function b1-Managed.BED_FSMNode_GI_Loading_ShowLogoInStartGame.PostPropertyChanged
// 0x0020 (0x0020 - 0x0000)
struct BED_FSMNode_GI_Loading_ShowLogoInStartGame_PostPropertyChanged final
{
public:
	class FString                                 MemberName;                                        // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash)
	class FString                                 PropertyName;                                      // 0x0010(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash)
};
//static_assert(alignof(BED_FSMNode_GI_Loading_ShowLogoInStartGame_PostPropertyChanged) == 0x000008, "Wrong alignment on BED_FSMNode_GI_Loading_ShowLogoInStartGame_PostPropertyChanged");
//static_assert(sizeof(BED_FSMNode_GI_Loading_ShowLogoInStartGame_PostPropertyChanged) == 0x000020, "Wrong size on BED_FSMNode_GI_Loading_ShowLogoInStartGame_PostPropertyChanged");
//static_assert(offsetof(BED_FSMNode_GI_Loading_ShowLogoInStartGame_PostPropertyChanged, MemberName) == 0x000000, "Member 'BED_FSMNode_GI_Loading_ShowLogoInStartGame_PostPropertyChanged::MemberName' has a wrong offset!");
//static_assert(offsetof(BED_FSMNode_GI_Loading_ShowLogoInStartGame_PostPropertyChanged, PropertyName) == 0x000010, "Member 'BED_FSMNode_GI_Loading_ShowLogoInStartGame_PostPropertyChanged::PropertyName' has a wrong offset!");

// Function b1-Managed.BED_FSMNode_GI_Loading_ShowLogoInStartGame.GetNodeDescriptionInCS
// 0x0010 (0x0010 - 0x0000)
struct BED_FSMNode_GI_Loading_ShowLogoInStartGame_GetNodeDescriptionInCS final
{
public:
	class FString                                 ReturnValue;                                       // 0x0000(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash)
};
//static_assert(alignof(BED_FSMNode_GI_Loading_ShowLogoInStartGame_GetNodeDescriptionInCS) == 0x000008, "Wrong alignment on BED_FSMNode_GI_Loading_ShowLogoInStartGame_GetNodeDescriptionInCS");
//static_assert(sizeof(BED_FSMNode_GI_Loading_ShowLogoInStartGame_GetNodeDescriptionInCS) == 0x000010, "Wrong size on BED_FSMNode_GI_Loading_ShowLogoInStartGame_GetNodeDescriptionInCS");
//static_assert(offsetof(BED_FSMNode_GI_Loading_ShowLogoInStartGame_GetNodeDescriptionInCS, ReturnValue) == 0x000000, "Member 'BED_FSMNode_GI_Loading_ShowLogoInStartGame_GetNodeDescriptionInCS::ReturnValue' has a wrong offset!");

// Function b1-Managed.BED_FSMNode_GI_Loading_ShowReplayUI.PostPropertyChanged
// 0x0020 (0x0020 - 0x0000)
struct BED_FSMNode_GI_Loading_ShowReplayUI_PostPropertyChanged final
{
public:
	class FString                                 MemberName;                                        // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash)
	class FString                                 PropertyName;                                      // 0x0010(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash)
};
//static_assert(alignof(BED_FSMNode_GI_Loading_ShowReplayUI_PostPropertyChanged) == 0x000008, "Wrong alignment on BED_FSMNode_GI_Loading_ShowReplayUI_PostPropertyChanged");
//static_assert(sizeof(BED_FSMNode_GI_Loading_ShowReplayUI_PostPropertyChanged) == 0x000020, "Wrong size on BED_FSMNode_GI_Loading_ShowReplayUI_PostPropertyChanged");
//static_assert(offsetof(BED_FSMNode_GI_Loading_ShowReplayUI_PostPropertyChanged, MemberName) == 0x000000, "Member 'BED_FSMNode_GI_Loading_ShowReplayUI_PostPropertyChanged::MemberName' has a wrong offset!");
//static_assert(offsetof(BED_FSMNode_GI_Loading_ShowReplayUI_PostPropertyChanged, PropertyName) == 0x000010, "Member 'BED_FSMNode_GI_Loading_ShowReplayUI_PostPropertyChanged::PropertyName' has a wrong offset!");

// Function b1-Managed.BED_FSMNode_GI_Loading_ShowReplayUI.GetNodeDescriptionInCS
// 0x0010 (0x0010 - 0x0000)
struct BED_FSMNode_GI_Loading_ShowReplayUI_GetNodeDescriptionInCS final
{
public:
	class FString                                 ReturnValue;                                       // 0x0000(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash)
};
//static_assert(alignof(BED_FSMNode_GI_Loading_ShowReplayUI_GetNodeDescriptionInCS) == 0x000008, "Wrong alignment on BED_FSMNode_GI_Loading_ShowReplayUI_GetNodeDescriptionInCS");
//static_assert(sizeof(BED_FSMNode_GI_Loading_ShowReplayUI_GetNodeDescriptionInCS) == 0x000010, "Wrong size on BED_FSMNode_GI_Loading_ShowReplayUI_GetNodeDescriptionInCS");
//static_assert(offsetof(BED_FSMNode_GI_Loading_ShowReplayUI_GetNodeDescriptionInCS, ReturnValue) == 0x000000, "Member 'BED_FSMNode_GI_Loading_ShowReplayUI_GetNodeDescriptionInCS::ReturnValue' has a wrong offset!");

// Function b1-Managed.BED_FSMNode_GI_Loading_SpawnCharacterForClient.PostPropertyChanged
// 0x0020 (0x0020 - 0x0000)
struct BED_FSMNode_GI_Loading_SpawnCharacterForClient_PostPropertyChanged final
{
public:
	class FString                                 MemberName;                                        // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash)
	class FString                                 PropertyName;                                      // 0x0010(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash)
};
//static_assert(alignof(BED_FSMNode_GI_Loading_SpawnCharacterForClient_PostPropertyChanged) == 0x000008, "Wrong alignment on BED_FSMNode_GI_Loading_SpawnCharacterForClient_PostPropertyChanged");
//static_assert(sizeof(BED_FSMNode_GI_Loading_SpawnCharacterForClient_PostPropertyChanged) == 0x000020, "Wrong size on BED_FSMNode_GI_Loading_SpawnCharacterForClient_PostPropertyChanged");
//static_assert(offsetof(BED_FSMNode_GI_Loading_SpawnCharacterForClient_PostPropertyChanged, MemberName) == 0x000000, "Member 'BED_FSMNode_GI_Loading_SpawnCharacterForClient_PostPropertyChanged::MemberName' has a wrong offset!");
//static_assert(offsetof(BED_FSMNode_GI_Loading_SpawnCharacterForClient_PostPropertyChanged, PropertyName) == 0x000010, "Member 'BED_FSMNode_GI_Loading_SpawnCharacterForClient_PostPropertyChanged::PropertyName' has a wrong offset!");

// Function b1-Managed.BED_FSMNode_GI_Loading_SpawnCharacterForClient.GetNodeDescriptionInCS
// 0x0010 (0x0010 - 0x0000)
struct BED_FSMNode_GI_Loading_SpawnCharacterForClient_GetNodeDescriptionInCS final
{
public:
	class FString                                 ReturnValue;                                       // 0x0000(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash)
};
//static_assert(alignof(BED_FSMNode_GI_Loading_SpawnCharacterForClient_GetNodeDescriptionInCS) == 0x000008, "Wrong alignment on BED_FSMNode_GI_Loading_SpawnCharacterForClient_GetNodeDescriptionInCS");
//static_assert(sizeof(BED_FSMNode_GI_Loading_SpawnCharacterForClient_GetNodeDescriptionInCS) == 0x000010, "Wrong size on BED_FSMNode_GI_Loading_SpawnCharacterForClient_GetNodeDescriptionInCS");
//static_assert(offsetof(BED_FSMNode_GI_Loading_SpawnCharacterForClient_GetNodeDescriptionInCS, ReturnValue) == 0x000000, "Member 'BED_FSMNode_GI_Loading_SpawnCharacterForClient_GetNodeDescriptionInCS::ReturnValue' has a wrong offset!");

// Function b1-Managed.BED_FSMNode_GI_Loading_SpawnPlayerPawnWithOutECSBeginPlay.PostPropertyChanged
// 0x0020 (0x0020 - 0x0000)
struct BED_FSMNode_GI_Loading_SpawnPlayerPawnWithOutECSBeginPlay_PostPropertyChanged final
{
public:
	class FString                                 MemberName;                                        // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash)
	class FString                                 PropertyName;                                      // 0x0010(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash)
};
//static_assert(alignof(BED_FSMNode_GI_Loading_SpawnPlayerPawnWithOutECSBeginPlay_PostPropertyChanged) == 0x000008, "Wrong alignment on BED_FSMNode_GI_Loading_SpawnPlayerPawnWithOutECSBeginPlay_PostPropertyChanged");
//static_assert(sizeof(BED_FSMNode_GI_Loading_SpawnPlayerPawnWithOutECSBeginPlay_PostPropertyChanged) == 0x000020, "Wrong size on BED_FSMNode_GI_Loading_SpawnPlayerPawnWithOutECSBeginPlay_PostPropertyChanged");
//static_assert(offsetof(BED_FSMNode_GI_Loading_SpawnPlayerPawnWithOutECSBeginPlay_PostPropertyChanged, MemberName) == 0x000000, "Member 'BED_FSMNode_GI_Loading_SpawnPlayerPawnWithOutECSBeginPlay_PostPropertyChanged::MemberName' has a wrong offset!");
//static_assert(offsetof(BED_FSMNode_GI_Loading_SpawnPlayerPawnWithOutECSBeginPlay_PostPropertyChanged, PropertyName) == 0x000010, "Member 'BED_FSMNode_GI_Loading_SpawnPlayerPawnWithOutECSBeginPlay_PostPropertyChanged::PropertyName' has a wrong offset!");

// Function b1-Managed.BED_FSMNode_GI_Loading_SpawnPlayerPawnWithOutECSBeginPlay.GetNodeDescriptionInCS
// 0x0010 (0x0010 - 0x0000)
struct BED_FSMNode_GI_Loading_SpawnPlayerPawnWithOutECSBeginPlay_GetNodeDescriptionInCS final
{
public:
	class FString                                 ReturnValue;                                       // 0x0000(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash)
};
//static_assert(alignof(BED_FSMNode_GI_Loading_SpawnPlayerPawnWithOutECSBeginPlay_GetNodeDescriptionInCS) == 0x000008, "Wrong alignment on BED_FSMNode_GI_Loading_SpawnPlayerPawnWithOutECSBeginPlay_GetNodeDescriptionInCS");
//static_assert(sizeof(BED_FSMNode_GI_Loading_SpawnPlayerPawnWithOutECSBeginPlay_GetNodeDescriptionInCS) == 0x000010, "Wrong size on BED_FSMNode_GI_Loading_SpawnPlayerPawnWithOutECSBeginPlay_GetNodeDescriptionInCS");
//static_assert(offsetof(BED_FSMNode_GI_Loading_SpawnPlayerPawnWithOutECSBeginPlay_GetNodeDescriptionInCS, ReturnValue) == 0x000000, "Member 'BED_FSMNode_GI_Loading_SpawnPlayerPawnWithOutECSBeginPlay_GetNodeDescriptionInCS::ReturnValue' has a wrong offset!");

// Function b1-Managed.BED_FSMNode_GI_Loading_StartNewGamePlus.PostPropertyChanged
// 0x0020 (0x0020 - 0x0000)
struct BED_FSMNode_GI_Loading_StartNewGamePlus_PostPropertyChanged final
{
public:
	class FString                                 MemberName;                                        // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash)
	class FString                                 PropertyName;                                      // 0x0010(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash)
};
//static_assert(alignof(BED_FSMNode_GI_Loading_StartNewGamePlus_PostPropertyChanged) == 0x000008, "Wrong alignment on BED_FSMNode_GI_Loading_StartNewGamePlus_PostPropertyChanged");
//static_assert(sizeof(BED_FSMNode_GI_Loading_StartNewGamePlus_PostPropertyChanged) == 0x000020, "Wrong size on BED_FSMNode_GI_Loading_StartNewGamePlus_PostPropertyChanged");
//static_assert(offsetof(BED_FSMNode_GI_Loading_StartNewGamePlus_PostPropertyChanged, MemberName) == 0x000000, "Member 'BED_FSMNode_GI_Loading_StartNewGamePlus_PostPropertyChanged::MemberName' has a wrong offset!");
//static_assert(offsetof(BED_FSMNode_GI_Loading_StartNewGamePlus_PostPropertyChanged, PropertyName) == 0x000010, "Member 'BED_FSMNode_GI_Loading_StartNewGamePlus_PostPropertyChanged::PropertyName' has a wrong offset!");

// Function b1-Managed.BED_FSMNode_GI_Loading_StartNewGamePlus.GetNodeDescriptionInCS
// 0x0010 (0x0010 - 0x0000)
struct BED_FSMNode_GI_Loading_StartNewGamePlus_GetNodeDescriptionInCS final
{
public:
	class FString                                 ReturnValue;                                       // 0x0000(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash)
};
//static_assert(alignof(BED_FSMNode_GI_Loading_StartNewGamePlus_GetNodeDescriptionInCS) == 0x000008, "Wrong alignment on BED_FSMNode_GI_Loading_StartNewGamePlus_GetNodeDescriptionInCS");
//static_assert(sizeof(BED_FSMNode_GI_Loading_StartNewGamePlus_GetNodeDescriptionInCS) == 0x000010, "Wrong size on BED_FSMNode_GI_Loading_StartNewGamePlus_GetNodeDescriptionInCS");
//static_assert(offsetof(BED_FSMNode_GI_Loading_StartNewGamePlus_GetNodeDescriptionInCS, ReturnValue) == 0x000000, "Member 'BED_FSMNode_GI_Loading_StartNewGamePlus_GetNodeDescriptionInCS::ReturnValue' has a wrong offset!");

// Function b1-Managed.GuidingRootWidget.OnMouseButtonDown
// 0x0188 (0x0188 - 0x0000)
struct GuidingRootWidget_OnMouseButtonDown final
{
public:
	struct FGeometry                              MyGeometry;                                        // 0x0000(0x0040)(Parm, IsPlainOldData, NoDestructor)
	struct FPointerEvent                          MouseEvent;                                        // 0x0040(0x0090)(ConstParm, Parm, OutParm, ReferenceParm)
	struct FEventReply                            ReturnValue;                                       // 0x00D0(0x00B8)(Parm, OutParm, ReturnParm)
};
//static_assert(alignof(GuidingRootWidget_OnMouseButtonDown) == 0x000008, "Wrong alignment on GuidingRootWidget_OnMouseButtonDown");
//static_assert(sizeof(GuidingRootWidget_OnMouseButtonDown) == 0x000188, "Wrong size on GuidingRootWidget_OnMouseButtonDown");
//static_assert(offsetof(GuidingRootWidget_OnMouseButtonDown, MyGeometry) == 0x000000, "Member 'GuidingRootWidget_OnMouseButtonDown::MyGeometry' has a wrong offset!");
//static_assert(offsetof(GuidingRootWidget_OnMouseButtonDown, MouseEvent) == 0x000040, "Member 'GuidingRootWidget_OnMouseButtonDown::MouseEvent' has a wrong offset!");
//static_assert(offsetof(GuidingRootWidget_OnMouseButtonDown, ReturnValue) == 0x0000D0, "Member 'GuidingRootWidget_OnMouseButtonDown::ReturnValue' has a wrong offset!");

// Function b1-Managed.GuidingRootWidget.OnMouseButtonUp
// 0x0188 (0x0188 - 0x0000)
struct GuidingRootWidget_OnMouseButtonUp final
{
public:
	struct FGeometry                              MyGeometry;                                        // 0x0000(0x0040)(Parm, IsPlainOldData, NoDestructor)
	struct FPointerEvent                          MouseEvent;                                        // 0x0040(0x0090)(ConstParm, Parm, OutParm, ReferenceParm)
	struct FEventReply                            ReturnValue;                                       // 0x00D0(0x00B8)(Parm, OutParm, ReturnParm)
};
//static_assert(alignof(GuidingRootWidget_OnMouseButtonUp) == 0x000008, "Wrong alignment on GuidingRootWidget_OnMouseButtonUp");
//static_assert(sizeof(GuidingRootWidget_OnMouseButtonUp) == 0x000188, "Wrong size on GuidingRootWidget_OnMouseButtonUp");
//static_assert(offsetof(GuidingRootWidget_OnMouseButtonUp, MyGeometry) == 0x000000, "Member 'GuidingRootWidget_OnMouseButtonUp::MyGeometry' has a wrong offset!");
//static_assert(offsetof(GuidingRootWidget_OnMouseButtonUp, MouseEvent) == 0x000040, "Member 'GuidingRootWidget_OnMouseButtonUp::MouseEvent' has a wrong offset!");
//static_assert(offsetof(GuidingRootWidget_OnMouseButtonUp, ReturnValue) == 0x0000D0, "Member 'GuidingRootWidget_OnMouseButtonUp::ReturnValue' has a wrong offset!");

// Function b1-Managed.BED_FSMNode_GI_Loading_SubG_GI_Loading_BattleLevelTravel.GetNodeDescriptionInCS
// 0x0010 (0x0010 - 0x0000)
struct BED_FSMNode_GI_Loading_SubG_GI_Loading_BattleLevelTravel_GetNodeDescriptionInCS final
{
public:
	class FString                                 ReturnValue;                                       // 0x0000(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash)
};
//static_assert(alignof(BED_FSMNode_GI_Loading_SubG_GI_Loading_BattleLevelTravel_GetNodeDescriptionInCS) == 0x000008, "Wrong alignment on BED_FSMNode_GI_Loading_SubG_GI_Loading_BattleLevelTravel_GetNodeDescriptionInCS");
//static_assert(sizeof(BED_FSMNode_GI_Loading_SubG_GI_Loading_BattleLevelTravel_GetNodeDescriptionInCS) == 0x000010, "Wrong size on BED_FSMNode_GI_Loading_SubG_GI_Loading_BattleLevelTravel_GetNodeDescriptionInCS");
//static_assert(offsetof(BED_FSMNode_GI_Loading_SubG_GI_Loading_BattleLevelTravel_GetNodeDescriptionInCS, ReturnValue) == 0x000000, "Member 'BED_FSMNode_GI_Loading_SubG_GI_Loading_BattleLevelTravel_GetNodeDescriptionInCS::ReturnValue' has a wrong offset!");

// Function b1-Managed.BUS_PerformerDestructibleDestroyComp.TickComponentInCS
// 0x0004 (0x0004 - 0x0000)
struct BUS_PerformerDestructibleDestroyComp_TickComponentInCS final
{
public:
	float                                         DeltaTime;                                         // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
//static_assert(alignof(BUS_PerformerDestructibleDestroyComp_TickComponentInCS) == 0x000004, "Wrong alignment on BUS_PerformerDestructibleDestroyComp_TickComponentInCS");
//static_assert(sizeof(BUS_PerformerDestructibleDestroyComp_TickComponentInCS) == 0x000004, "Wrong size on BUS_PerformerDestructibleDestroyComp_TickComponentInCS");
//static_assert(offsetof(BUS_PerformerDestructibleDestroyComp_TickComponentInCS, DeltaTime) == 0x000000, "Member 'BUS_PerformerDestructibleDestroyComp_TickComponentInCS::DeltaTime' has a wrong offset!");

// Function b1-Managed.BUS_PerformerDestructibleDestroyComp.SetEnableDestroyDestructible
// 0x0001 (0x0001 - 0x0000)
struct BUS_PerformerDestructibleDestroyComp_SetEnableDestroyDestructible final
{
public:
	uint8                                         IsEnabled : 1;                                     // 0x0000(0x0001)(BitIndex: 0x00, PropSize: 0x0001 (Parm, NoDestructor, HasGetValueTypeHash))
};
//static_assert(alignof(BUS_PerformerDestructibleDestroyComp_SetEnableDestroyDestructible) == 0x000001, "Wrong alignment on BUS_PerformerDestructibleDestroyComp_SetEnableDestroyDestructible");
//static_assert(sizeof(BUS_PerformerDestructibleDestroyComp_SetEnableDestroyDestructible) == 0x000001, "Wrong size on BUS_PerformerDestructibleDestroyComp_SetEnableDestroyDestructible");

// Function b1-Managed.BUI_Button.OnMouseButtonDoubleClick
// 0x0188 (0x0188 - 0x0000)
struct BUI_Button_OnMouseButtonDoubleClick final
{
public:
	struct FGeometry                              InMyGeometry;                                      // 0x0000(0x0040)(Parm, IsPlainOldData, NoDestructor)
	struct FPointerEvent                          InMouseEvent;                                      // 0x0040(0x0090)(ConstParm, Parm, OutParm, ReferenceParm)
	struct FEventReply                            ReturnValue;                                       // 0x00D0(0x00B8)(Parm, OutParm, ReturnParm)
};
//static_assert(alignof(BUI_Button_OnMouseButtonDoubleClick) == 0x000008, "Wrong alignment on BUI_Button_OnMouseButtonDoubleClick");
//static_assert(sizeof(BUI_Button_OnMouseButtonDoubleClick) == 0x000188, "Wrong size on BUI_Button_OnMouseButtonDoubleClick");
//static_assert(offsetof(BUI_Button_OnMouseButtonDoubleClick, InMyGeometry) == 0x000000, "Member 'BUI_Button_OnMouseButtonDoubleClick::InMyGeometry' has a wrong offset!");
//static_assert(offsetof(BUI_Button_OnMouseButtonDoubleClick, InMouseEvent) == 0x000040, "Member 'BUI_Button_OnMouseButtonDoubleClick::InMouseEvent' has a wrong offset!");
//static_assert(offsetof(BUI_Button_OnMouseButtonDoubleClick, ReturnValue) == 0x0000D0, "Member 'BUI_Button_OnMouseButtonDoubleClick::ReturnValue' has a wrong offset!");

// Function b1-Managed.BUI_Button.OnAnalogValueChanged
// 0x0138 (0x0138 - 0x0000)
struct BUI_Button_OnAnalogValueChanged final
{
public:
	struct FGeometry                              MyGeometry;                                        // 0x0000(0x0040)(Parm, IsPlainOldData, NoDestructor)
	struct FAnalogInputEvent                      InAnalogInputEvent;                                // 0x0040(0x0040)(Parm)
	struct FEventReply                            ReturnValue;                                       // 0x0080(0x00B8)(Parm, OutParm, ReturnParm)
};
//static_assert(alignof(BUI_Button_OnAnalogValueChanged) == 0x000008, "Wrong alignment on BUI_Button_OnAnalogValueChanged");
//static_assert(sizeof(BUI_Button_OnAnalogValueChanged) == 0x000138, "Wrong size on BUI_Button_OnAnalogValueChanged");
//static_assert(offsetof(BUI_Button_OnAnalogValueChanged, MyGeometry) == 0x000000, "Member 'BUI_Button_OnAnalogValueChanged::MyGeometry' has a wrong offset!");
//static_assert(offsetof(BUI_Button_OnAnalogValueChanged, InAnalogInputEvent) == 0x000040, "Member 'BUI_Button_OnAnalogValueChanged::InAnalogInputEvent' has a wrong offset!");
//static_assert(offsetof(BUI_Button_OnAnalogValueChanged, ReturnValue) == 0x000080, "Member 'BUI_Button_OnAnalogValueChanged::ReturnValue' has a wrong offset!");

// Function b1-Managed.BUI_Button.OnAddedToFocusPath
// 0x0008 (0x0008 - 0x0000)
struct BUI_Button_OnAddedToFocusPath final
{
public:
	struct FFocusEvent                            InFocusEvent;                                      // 0x0000(0x0008)(Parm, NoDestructor)
};
//static_assert(alignof(BUI_Button_OnAddedToFocusPath) == 0x000004, "Wrong alignment on BUI_Button_OnAddedToFocusPath");
//static_assert(sizeof(BUI_Button_OnAddedToFocusPath) == 0x000008, "Wrong size on BUI_Button_OnAddedToFocusPath");
//static_assert(offsetof(BUI_Button_OnAddedToFocusPath, InFocusEvent) == 0x000000, "Member 'BUI_Button_OnAddedToFocusPath::InFocusEvent' has a wrong offset!");

// Function b1-Managed.BUI_Button.OnMouseButtonDown
// 0x0188 (0x0188 - 0x0000)
struct BUI_Button_OnMouseButtonDown final
{
public:
	struct FGeometry                              MyGeometry;                                        // 0x0000(0x0040)(Parm, IsPlainOldData, NoDestructor)
	struct FPointerEvent                          MouseEvent;                                        // 0x0040(0x0090)(ConstParm, Parm, OutParm, ReferenceParm)
	struct FEventReply                            ReturnValue;                                       // 0x00D0(0x00B8)(Parm, OutParm, ReturnParm)
};
//static_assert(alignof(BUI_Button_OnMouseButtonDown) == 0x000008, "Wrong alignment on BUI_Button_OnMouseButtonDown");
//static_assert(sizeof(BUI_Button_OnMouseButtonDown) == 0x000188, "Wrong size on BUI_Button_OnMouseButtonDown");
//static_assert(offsetof(BUI_Button_OnMouseButtonDown, MyGeometry) == 0x000000, "Member 'BUI_Button_OnMouseButtonDown::MyGeometry' has a wrong offset!");
//static_assert(offsetof(BUI_Button_OnMouseButtonDown, MouseEvent) == 0x000040, "Member 'BUI_Button_OnMouseButtonDown::MouseEvent' has a wrong offset!");
//static_assert(offsetof(BUI_Button_OnMouseButtonDown, ReturnValue) == 0x0000D0, "Member 'BUI_Button_OnMouseButtonDown::ReturnValue' has a wrong offset!");

// Function b1-Managed.BUI_Button.OnPreviewKeyDown
// 0x0130 (0x0130 - 0x0000)
struct BUI_Button_OnPreviewKeyDown final
{
public:
	struct FGeometry                              MyGeometry;                                        // 0x0000(0x0040)(Parm, IsPlainOldData, NoDestructor)
	struct FKeyEvent                              InKeyEvent;                                        // 0x0040(0x0038)(Parm)
	struct FEventReply                            ReturnValue;                                       // 0x0078(0x00B8)(Parm, OutParm, ReturnParm)
};
//static_assert(alignof(BUI_Button_OnPreviewKeyDown) == 0x000008, "Wrong alignment on BUI_Button_OnPreviewKeyDown");
//static_assert(sizeof(BUI_Button_OnPreviewKeyDown) == 0x000130, "Wrong size on BUI_Button_OnPreviewKeyDown");
//static_assert(offsetof(BUI_Button_OnPreviewKeyDown, MyGeometry) == 0x000000, "Member 'BUI_Button_OnPreviewKeyDown::MyGeometry' has a wrong offset!");
//static_assert(offsetof(BUI_Button_OnPreviewKeyDown, InKeyEvent) == 0x000040, "Member 'BUI_Button_OnPreviewKeyDown::InKeyEvent' has a wrong offset!");
//static_assert(offsetof(BUI_Button_OnPreviewKeyDown, ReturnValue) == 0x000078, "Member 'BUI_Button_OnPreviewKeyDown::ReturnValue' has a wrong offset!");

// Function b1-Managed.BUI_Button.OnMouseButtonUp
// 0x0188 (0x0188 - 0x0000)
struct BUI_Button_OnMouseButtonUp final
{
public:
	struct FGeometry                              MyGeometry;                                        // 0x0000(0x0040)(Parm, IsPlainOldData, NoDestructor)
	struct FPointerEvent                          MouseEvent;                                        // 0x0040(0x0090)(ConstParm, Parm, OutParm, ReferenceParm)
	struct FEventReply                            ReturnValue;                                       // 0x00D0(0x00B8)(Parm, OutParm, ReturnParm)
};
//static_assert(alignof(BUI_Button_OnMouseButtonUp) == 0x000008, "Wrong alignment on BUI_Button_OnMouseButtonUp");
//static_assert(sizeof(BUI_Button_OnMouseButtonUp) == 0x000188, "Wrong size on BUI_Button_OnMouseButtonUp");
//static_assert(offsetof(BUI_Button_OnMouseButtonUp, MyGeometry) == 0x000000, "Member 'BUI_Button_OnMouseButtonUp::MyGeometry' has a wrong offset!");
//static_assert(offsetof(BUI_Button_OnMouseButtonUp, MouseEvent) == 0x000040, "Member 'BUI_Button_OnMouseButtonUp::MouseEvent' has a wrong offset!");
//static_assert(offsetof(BUI_Button_OnMouseButtonUp, ReturnValue) == 0x0000D0, "Member 'BUI_Button_OnMouseButtonUp::ReturnValue' has a wrong offset!");

// Function b1-Managed.BUI_Button.OnMouseEnter
// 0x00D0 (0x00D0 - 0x0000)
struct BUI_Button_OnMouseEnter final
{
public:
	struct FGeometry                              MyGeometry;                                        // 0x0000(0x0040)(Parm, IsPlainOldData, NoDestructor)
	struct FPointerEvent                          MouseEvent;                                        // 0x0040(0x0090)(ConstParm, Parm, OutParm, ReferenceParm)
};
//static_assert(alignof(BUI_Button_OnMouseEnter) == 0x000008, "Wrong alignment on BUI_Button_OnMouseEnter");
//static_assert(sizeof(BUI_Button_OnMouseEnter) == 0x0000D0, "Wrong size on BUI_Button_OnMouseEnter");
//static_assert(offsetof(BUI_Button_OnMouseEnter, MyGeometry) == 0x000000, "Member 'BUI_Button_OnMouseEnter::MyGeometry' has a wrong offset!");
//static_assert(offsetof(BUI_Button_OnMouseEnter, MouseEvent) == 0x000040, "Member 'BUI_Button_OnMouseEnter::MouseEvent' has a wrong offset!");

// Function b1-Managed.BUI_Button.OnMouseLeave
// 0x0090 (0x0090 - 0x0000)
struct BUI_Button_OnMouseLeave final
{
public:
	struct FPointerEvent                          MouseEvent;                                        // 0x0000(0x0090)(ConstParm, Parm, OutParm, ReferenceParm)
};
//static_assert(alignof(BUI_Button_OnMouseLeave) == 0x000008, "Wrong alignment on BUI_Button_OnMouseLeave");
//static_assert(sizeof(BUI_Button_OnMouseLeave) == 0x000090, "Wrong size on BUI_Button_OnMouseLeave");
//static_assert(offsetof(BUI_Button_OnMouseLeave, MouseEvent) == 0x000000, "Member 'BUI_Button_OnMouseLeave::MouseEvent' has a wrong offset!");

// Function b1-Managed.BUI_Button.OnMouseMove
// 0x0188 (0x0188 - 0x0000)
struct BUI_Button_OnMouseMove final
{
public:
	struct FGeometry                              MyGeometry;                                        // 0x0000(0x0040)(Parm, IsPlainOldData, NoDestructor)
	struct FPointerEvent                          MouseEvent;                                        // 0x0040(0x0090)(ConstParm, Parm, OutParm, ReferenceParm)
	struct FEventReply                            ReturnValue;                                       // 0x00D0(0x00B8)(Parm, OutParm, ReturnParm)
};
//static_assert(alignof(BUI_Button_OnMouseMove) == 0x000008, "Wrong alignment on BUI_Button_OnMouseMove");
//static_assert(sizeof(BUI_Button_OnMouseMove) == 0x000188, "Wrong size on BUI_Button_OnMouseMove");
//static_assert(offsetof(BUI_Button_OnMouseMove, MyGeometry) == 0x000000, "Member 'BUI_Button_OnMouseMove::MyGeometry' has a wrong offset!");
//static_assert(offsetof(BUI_Button_OnMouseMove, MouseEvent) == 0x000040, "Member 'BUI_Button_OnMouseMove::MouseEvent' has a wrong offset!");
//static_assert(offsetof(BUI_Button_OnMouseMove, ReturnValue) == 0x0000D0, "Member 'BUI_Button_OnMouseMove::ReturnValue' has a wrong offset!");

// Function b1-Managed.BUI_Button.OnKeyDown
// 0x0130 (0x0130 - 0x0000)
struct BUI_Button_OnKeyDown final
{
public:
	struct FGeometry                              MyGeometry;                                        // 0x0000(0x0040)(Parm, IsPlainOldData, NoDestructor)
	struct FKeyEvent                              InKeyEvent;                                        // 0x0040(0x0038)(Parm)
	struct FEventReply                            ReturnValue;                                       // 0x0078(0x00B8)(Parm, OutParm, ReturnParm)
};
//static_assert(alignof(BUI_Button_OnKeyDown) == 0x000008, "Wrong alignment on BUI_Button_OnKeyDown");
//static_assert(sizeof(BUI_Button_OnKeyDown) == 0x000130, "Wrong size on BUI_Button_OnKeyDown");
//static_assert(offsetof(BUI_Button_OnKeyDown, MyGeometry) == 0x000000, "Member 'BUI_Button_OnKeyDown::MyGeometry' has a wrong offset!");
//static_assert(offsetof(BUI_Button_OnKeyDown, InKeyEvent) == 0x000040, "Member 'BUI_Button_OnKeyDown::InKeyEvent' has a wrong offset!");
//static_assert(offsetof(BUI_Button_OnKeyDown, ReturnValue) == 0x000078, "Member 'BUI_Button_OnKeyDown::ReturnValue' has a wrong offset!");

// Function b1-Managed.BUI_Button.OnCustomWidgetNavigation
// 0x0010 (0x0010 - 0x0000)
struct BUI_Button_OnCustomWidgetNavigation final
{
public:
	EUINavigation                                 Navigation_0;                                      // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_1[0x7];                                        // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UWidget*                                ReturnValue;                                       // 0x0008(0x0008)(ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
//static_assert(alignof(BUI_Button_OnCustomWidgetNavigation) == 0x000008, "Wrong alignment on BUI_Button_OnCustomWidgetNavigation");
//static_assert(sizeof(BUI_Button_OnCustomWidgetNavigation) == 0x000010, "Wrong size on BUI_Button_OnCustomWidgetNavigation");
//static_assert(offsetof(BUI_Button_OnCustomWidgetNavigation, Navigation_0) == 0x000000, "Member 'BUI_Button_OnCustomWidgetNavigation::Navigation_0' has a wrong offset!");
//static_assert(offsetof(BUI_Button_OnCustomWidgetNavigation, ReturnValue) == 0x000008, "Member 'BUI_Button_OnCustomWidgetNavigation::ReturnValue' has a wrong offset!");

// Function b1-Managed.BUI_Button.GetIsMouseEnterSetFocus
// 0x0001 (0x0001 - 0x0000)
struct BUI_Button_GetIsMouseEnterSetFocus final
{
public:
	uint8                                         ReturnValue : 1;                                   // 0x0000(0x0001)(BitIndex: 0x00, PropSize: 0x0001 (Parm, OutParm, ReturnParm, NoDestructor, HasGetValueTypeHash))
};
//static_assert(alignof(BUI_Button_GetIsMouseEnterSetFocus) == 0x000001, "Wrong alignment on BUI_Button_GetIsMouseEnterSetFocus");
//static_assert(sizeof(BUI_Button_GetIsMouseEnterSetFocus) == 0x000001, "Wrong size on BUI_Button_GetIsMouseEnterSetFocus");

// Function b1-Managed.BUI_Button.SetIsMouseEnterSetFocus
// 0x0001 (0x0001 - 0x0000)
struct BUI_Button_SetIsMouseEnterSetFocus final
{
public:
	uint8                                         InIsMouseEnterSetFocus : 1;                        // 0x0000(0x0001)(BitIndex: 0x00, PropSize: 0x0001 (Parm, NoDestructor, HasGetValueTypeHash))
};
//static_assert(alignof(BUI_Button_SetIsMouseEnterSetFocus) == 0x000001, "Wrong alignment on BUI_Button_SetIsMouseEnterSetFocus");
//static_assert(sizeof(BUI_Button_SetIsMouseEnterSetFocus) == 0x000001, "Wrong size on BUI_Button_SetIsMouseEnterSetFocus");

// Function b1-Managed.BUI_Button.OnKeyUp
// 0x0130 (0x0130 - 0x0000)
struct BUI_Button_OnKeyUp final
{
public:
	struct FGeometry                              MyGeometry;                                        // 0x0000(0x0040)(Parm, IsPlainOldData, NoDestructor)
	struct FKeyEvent                              InKeyEvent;                                        // 0x0040(0x0038)(Parm)
	struct FEventReply                            ReturnValue;                                       // 0x0078(0x00B8)(Parm, OutParm, ReturnParm)
};
//static_assert(alignof(BUI_Button_OnKeyUp) == 0x000008, "Wrong alignment on BUI_Button_OnKeyUp");
//static_assert(sizeof(BUI_Button_OnKeyUp) == 0x000130, "Wrong size on BUI_Button_OnKeyUp");
//static_assert(offsetof(BUI_Button_OnKeyUp, MyGeometry) == 0x000000, "Member 'BUI_Button_OnKeyUp::MyGeometry' has a wrong offset!");
//static_assert(offsetof(BUI_Button_OnKeyUp, InKeyEvent) == 0x000040, "Member 'BUI_Button_OnKeyUp::InKeyEvent' has a wrong offset!");
//static_assert(offsetof(BUI_Button_OnKeyUp, ReturnValue) == 0x000078, "Member 'BUI_Button_OnKeyUp::ReturnValue' has a wrong offset!");

// Function b1-Managed.BUI_Button.SetFocusOn
// 0x0002 (0x0002 - 0x0000)
struct BUI_Button_SetFocusOn final
{
public:
	EFocusReason                                  Reason;                                            // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         ReturnValue : 1;                                   // 0x0001(0x0001)(BitIndex: 0x00, PropSize: 0x0001 (Parm, OutParm, ReturnParm, NoDestructor, HasGetValueTypeHash))
};
//static_assert(alignof(BUI_Button_SetFocusOn) == 0x000001, "Wrong alignment on BUI_Button_SetFocusOn");
//static_assert(sizeof(BUI_Button_SetFocusOn) == 0x000002, "Wrong size on BUI_Button_SetFocusOn");
//static_assert(offsetof(BUI_Button_SetFocusOn, Reason) == 0x000000, "Member 'BUI_Button_SetFocusOn::Reason' has a wrong offset!");

// Function b1-Managed.BAN_X2_PlayDBCDataAsset.GSNotifyCS
// 0x0040 (0x0040 - 0x0000)
struct BAN_X2_PlayDBCDataAsset_GSNotifyCS final
{
public:
	struct FUStGSNotifyParam                      NotifyParam;                                       // 0x0000(0x0040)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
//static_assert(alignof(BAN_X2_PlayDBCDataAsset_GSNotifyCS) == 0x000008, "Wrong alignment on BAN_X2_PlayDBCDataAsset_GSNotifyCS");
//static_assert(sizeof(BAN_X2_PlayDBCDataAsset_GSNotifyCS) == 0x000040, "Wrong size on BAN_X2_PlayDBCDataAsset_GSNotifyCS");
//static_assert(offsetof(BAN_X2_PlayDBCDataAsset_GSNotifyCS, NotifyParam) == 0x000000, "Member 'BAN_X2_PlayDBCDataAsset_GSNotifyCS::NotifyParam' has a wrong offset!");

// Function b1-Managed.BED_FSMNode_GI_Loading_SubG_GI_Loading_ClientEnvInit.GetNodeDescriptionInCS
// 0x0010 (0x0010 - 0x0000)
struct BED_FSMNode_GI_Loading_SubG_GI_Loading_ClientEnvInit_GetNodeDescriptionInCS final
{
public:
	class FString                                 ReturnValue;                                       // 0x0000(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash)
};
//static_assert(alignof(BED_FSMNode_GI_Loading_SubG_GI_Loading_ClientEnvInit_GetNodeDescriptionInCS) == 0x000008, "Wrong alignment on BED_FSMNode_GI_Loading_SubG_GI_Loading_ClientEnvInit_GetNodeDescriptionInCS");
//static_assert(sizeof(BED_FSMNode_GI_Loading_SubG_GI_Loading_ClientEnvInit_GetNodeDescriptionInCS) == 0x000010, "Wrong size on BED_FSMNode_GI_Loading_SubG_GI_Loading_ClientEnvInit_GetNodeDescriptionInCS");
//static_assert(offsetof(BED_FSMNode_GI_Loading_SubG_GI_Loading_ClientEnvInit_GetNodeDescriptionInCS, ReturnValue) == 0x000000, "Member 'BED_FSMNode_GI_Loading_SubG_GI_Loading_ClientEnvInit_GetNodeDescriptionInCS::ReturnValue' has a wrong offset!");

// Function b1-Managed.BAN_GSTryHRCounterattack.bIsNativeBranchingPointCS
// 0x0001 (0x0001 - 0x0000)
struct BAN_GSTryHRCounterattack_bIsNativeBranchingPointCS final
{
public:
	uint8                                         ReturnValue : 1;                                   // 0x0000(0x0001)(BitIndex: 0x00, PropSize: 0x0001 (Parm, OutParm, ReturnParm, NoDestructor, HasGetValueTypeHash))
};
//static_assert(alignof(BAN_GSTryHRCounterattack_bIsNativeBranchingPointCS) == 0x000001, "Wrong alignment on BAN_GSTryHRCounterattack_bIsNativeBranchingPointCS");
//static_assert(sizeof(BAN_GSTryHRCounterattack_bIsNativeBranchingPointCS) == 0x000001, "Wrong size on BAN_GSTryHRCounterattack_bIsNativeBranchingPointCS");

// Function b1-Managed.BAN_GSTryHRCounterattack.GSNotifyCS
// 0x0040 (0x0040 - 0x0000)
struct BAN_GSTryHRCounterattack_GSNotifyCS final
{
public:
	struct FUStGSNotifyParam                      NotifyParam;                                       // 0x0000(0x0040)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
//static_assert(alignof(BAN_GSTryHRCounterattack_GSNotifyCS) == 0x000008, "Wrong alignment on BAN_GSTryHRCounterattack_GSNotifyCS");
//static_assert(sizeof(BAN_GSTryHRCounterattack_GSNotifyCS) == 0x000040, "Wrong size on BAN_GSTryHRCounterattack_GSNotifyCS");
//static_assert(offsetof(BAN_GSTryHRCounterattack_GSNotifyCS, NotifyParam) == 0x000000, "Member 'BAN_GSTryHRCounterattack_GSNotifyCS::NotifyParam' has a wrong offset!");

// Function b1-Managed.BED_FSMNode_GI_Loading_SubG_GI_Loading_GSLogin.GetNodeDescriptionInCS
// 0x0010 (0x0010 - 0x0000)
struct BED_FSMNode_GI_Loading_SubG_GI_Loading_GSLogin_GetNodeDescriptionInCS final
{
public:
	class FString                                 ReturnValue;                                       // 0x0000(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash)
};
//static_assert(alignof(BED_FSMNode_GI_Loading_SubG_GI_Loading_GSLogin_GetNodeDescriptionInCS) == 0x000008, "Wrong alignment on BED_FSMNode_GI_Loading_SubG_GI_Loading_GSLogin_GetNodeDescriptionInCS");
//static_assert(sizeof(BED_FSMNode_GI_Loading_SubG_GI_Loading_GSLogin_GetNodeDescriptionInCS) == 0x000010, "Wrong size on BED_FSMNode_GI_Loading_SubG_GI_Loading_GSLogin_GetNodeDescriptionInCS");
//static_assert(offsetof(BED_FSMNode_GI_Loading_SubG_GI_Loading_GSLogin_GetNodeDescriptionInCS, ReturnValue) == 0x000000, "Member 'BED_FSMNode_GI_Loading_SubG_GI_Loading_GSLogin_GetNodeDescriptionInCS::ReturnValue' has a wrong offset!");

// Function b1-Managed.BED_FSMNode_GI_Loading_SubG_GI_Loading_HandleArchiveInTravelLevel.GetNodeDescriptionInCS
// 0x0010 (0x0010 - 0x0000)
struct BED_FSMNode_GI_Loading_SubG_GI_Loading_HandleArchiveInTravelLevel_GetNodeDescriptionInCS final
{
public:
	class FString                                 ReturnValue;                                       // 0x0000(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash)
};
//static_assert(alignof(BED_FSMNode_GI_Loading_SubG_GI_Loading_HandleArchiveInTravelLevel_GetNodeDescriptionInCS) == 0x000008, "Wrong alignment on BED_FSMNode_GI_Loading_SubG_GI_Loading_HandleArchiveInTravelLevel_GetNodeDescriptionInCS");
//static_assert(sizeof(BED_FSMNode_GI_Loading_SubG_GI_Loading_HandleArchiveInTravelLevel_GetNodeDescriptionInCS) == 0x000010, "Wrong size on BED_FSMNode_GI_Loading_SubG_GI_Loading_HandleArchiveInTravelLevel_GetNodeDescriptionInCS");
//static_assert(offsetof(BED_FSMNode_GI_Loading_SubG_GI_Loading_HandleArchiveInTravelLevel_GetNodeDescriptionInCS, ReturnValue) == 0x000000, "Member 'BED_FSMNode_GI_Loading_SubG_GI_Loading_HandleArchiveInTravelLevel_GetNodeDescriptionInCS::ReturnValue' has a wrong offset!");

// Function b1-Managed.BED_FSMNode_GI_Loading_SubG_GI_Loading_HideLoadingUI.GetNodeDescriptionInCS
// 0x0010 (0x0010 - 0x0000)
struct BED_FSMNode_GI_Loading_SubG_GI_Loading_HideLoadingUI_GetNodeDescriptionInCS final
{
public:
	class FString                                 ReturnValue;                                       // 0x0000(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash)
};
//static_assert(alignof(BED_FSMNode_GI_Loading_SubG_GI_Loading_HideLoadingUI_GetNodeDescriptionInCS) == 0x000008, "Wrong alignment on BED_FSMNode_GI_Loading_SubG_GI_Loading_HideLoadingUI_GetNodeDescriptionInCS");
//static_assert(sizeof(BED_FSMNode_GI_Loading_SubG_GI_Loading_HideLoadingUI_GetNodeDescriptionInCS) == 0x000010, "Wrong size on BED_FSMNode_GI_Loading_SubG_GI_Loading_HideLoadingUI_GetNodeDescriptionInCS");
//static_assert(offsetof(BED_FSMNode_GI_Loading_SubG_GI_Loading_HideLoadingUI_GetNodeDescriptionInCS, ReturnValue) == 0x000000, "Member 'BED_FSMNode_GI_Loading_SubG_GI_Loading_HideLoadingUI_GetNodeDescriptionInCS::ReturnValue' has a wrong offset!");

// Function b1-Managed.BED_FSMNode_GI_Loading_SubG_GI_Loading_PostLeaveLevel.GetNodeDescriptionInCS
// 0x0010 (0x0010 - 0x0000)
struct BED_FSMNode_GI_Loading_SubG_GI_Loading_PostLeaveLevel_GetNodeDescriptionInCS final
{
public:
	class FString                                 ReturnValue;                                       // 0x0000(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash)
};
//static_assert(alignof(BED_FSMNode_GI_Loading_SubG_GI_Loading_PostLeaveLevel_GetNodeDescriptionInCS) == 0x000008, "Wrong alignment on BED_FSMNode_GI_Loading_SubG_GI_Loading_PostLeaveLevel_GetNodeDescriptionInCS");
//static_assert(sizeof(BED_FSMNode_GI_Loading_SubG_GI_Loading_PostLeaveLevel_GetNodeDescriptionInCS) == 0x000010, "Wrong size on BED_FSMNode_GI_Loading_SubG_GI_Loading_PostLeaveLevel_GetNodeDescriptionInCS");
//static_assert(offsetof(BED_FSMNode_GI_Loading_SubG_GI_Loading_PostLeaveLevel_GetNodeDescriptionInCS, ReturnValue) == 0x000000, "Member 'BED_FSMNode_GI_Loading_SubG_GI_Loading_PostLeaveLevel_GetNodeDescriptionInCS::ReturnValue' has a wrong offset!");

// Function b1-Managed.BUS_AKMgrComp.OnAkCompAutoDestroyed
// 0x0008 (0x0008 - 0x0000)
struct BUS_AKMgrComp_OnAkCompAutoDestroyed final
{
public:
	class UAkComponent*                           AkComp;                                            // 0x0000(0x0008)(ExportObject, Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
//static_assert(alignof(BUS_AKMgrComp_OnAkCompAutoDestroyed) == 0x000008, "Wrong alignment on BUS_AKMgrComp_OnAkCompAutoDestroyed");
//static_assert(sizeof(BUS_AKMgrComp_OnAkCompAutoDestroyed) == 0x000008, "Wrong size on BUS_AKMgrComp_OnAkCompAutoDestroyed");
//static_assert(offsetof(BUS_AKMgrComp_OnAkCompAutoDestroyed, AkComp) == 0x000000, "Member 'BUS_AKMgrComp_OnAkCompAutoDestroyed::AkComp' has a wrong offset!");

// Function b1-Managed.BUS_AKMgrComp.OnAkEventCallBack
// 0x0010 (0x0010 - 0x0000)
struct BUS_AKMgrComp_OnAkEventCallBack final
{
public:
	EAkCallbackType                               CallbackType;                                      // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_1[0x7];                                        // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UAkCallbackInfo*                        CallbackInfo;                                      // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
//static_assert(alignof(BUS_AKMgrComp_OnAkEventCallBack) == 0x000008, "Wrong alignment on BUS_AKMgrComp_OnAkEventCallBack");
//static_assert(sizeof(BUS_AKMgrComp_OnAkEventCallBack) == 0x000010, "Wrong size on BUS_AKMgrComp_OnAkEventCallBack");
//static_assert(offsetof(BUS_AKMgrComp_OnAkEventCallBack, CallbackType) == 0x000000, "Member 'BUS_AKMgrComp_OnAkEventCallBack::CallbackType' has a wrong offset!");
//static_assert(offsetof(BUS_AKMgrComp_OnAkEventCallBack, CallbackInfo) == 0x000008, "Member 'BUS_AKMgrComp_OnAkEventCallBack::CallbackInfo' has a wrong offset!");

// Function b1-Managed.BAN_SpawnLightningFXActor.GetSoftReferences
// 0x0010 (0x0010 - 0x0000)
struct BAN_SpawnLightningFXActor_GetSoftReferences final
{
public:
	TArray<struct FSoftObjectPath>                ReturnValue;                                       // 0x0000(0x0010)(Parm, OutParm, ReturnParm)
};
//static_assert(alignof(BAN_SpawnLightningFXActor_GetSoftReferences) == 0x000008, "Wrong alignment on BAN_SpawnLightningFXActor_GetSoftReferences");
//static_assert(sizeof(BAN_SpawnLightningFXActor_GetSoftReferences) == 0x000010, "Wrong size on BAN_SpawnLightningFXActor_GetSoftReferences");
//static_assert(offsetof(BAN_SpawnLightningFXActor_GetSoftReferences, ReturnValue) == 0x000000, "Member 'BAN_SpawnLightningFXActor_GetSoftReferences::ReturnValue' has a wrong offset!");

// Function b1-Managed.BAN_SpawnLightningFXActor.GSNotifyCS
// 0x0040 (0x0040 - 0x0000)
struct BAN_SpawnLightningFXActor_GSNotifyCS final
{
public:
	struct FUStGSNotifyParam                      NotifyParam;                                       // 0x0000(0x0040)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
//static_assert(alignof(BAN_SpawnLightningFXActor_GSNotifyCS) == 0x000008, "Wrong alignment on BAN_SpawnLightningFXActor_GSNotifyCS");
//static_assert(sizeof(BAN_SpawnLightningFXActor_GSNotifyCS) == 0x000040, "Wrong size on BAN_SpawnLightningFXActor_GSNotifyCS");
//static_assert(offsetof(BAN_SpawnLightningFXActor_GSNotifyCS, NotifyParam) == 0x000000, "Member 'BAN_SpawnLightningFXActor_GSNotifyCS::NotifyParam' has a wrong offset!");

// Function b1-Managed.BED_FSMNode_GI_Loading_SubG_GI_Loading_PreEnterLevel.GetNodeDescriptionInCS
// 0x0010 (0x0010 - 0x0000)
struct BED_FSMNode_GI_Loading_SubG_GI_Loading_PreEnterLevel_GetNodeDescriptionInCS final
{
public:
	class FString                                 ReturnValue;                                       // 0x0000(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash)
};
//static_assert(alignof(BED_FSMNode_GI_Loading_SubG_GI_Loading_PreEnterLevel_GetNodeDescriptionInCS) == 0x000008, "Wrong alignment on BED_FSMNode_GI_Loading_SubG_GI_Loading_PreEnterLevel_GetNodeDescriptionInCS");
//static_assert(sizeof(BED_FSMNode_GI_Loading_SubG_GI_Loading_PreEnterLevel_GetNodeDescriptionInCS) == 0x000010, "Wrong size on BED_FSMNode_GI_Loading_SubG_GI_Loading_PreEnterLevel_GetNodeDescriptionInCS");
//static_assert(offsetof(BED_FSMNode_GI_Loading_SubG_GI_Loading_PreEnterLevel_GetNodeDescriptionInCS, ReturnValue) == 0x000000, "Member 'BED_FSMNode_GI_Loading_SubG_GI_Loading_PreEnterLevel_GetNodeDescriptionInCS::ReturnValue' has a wrong offset!");

// Function b1-Managed.BED_FSMNode_GI_Loading_SubG_GI_Loading_ResetGameInstanceDataAndSaveArchive.GetNodeDescriptionInCS
// 0x0010 (0x0010 - 0x0000)
struct BED_FSMNode_GI_Loading_SubG_GI_Loading_ResetGameInstanceDataAndSaveArchive_GetNodeDescriptionInCS final
{
public:
	class FString                                 ReturnValue;                                       // 0x0000(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash)
};
//static_assert(alignof(BED_FSMNode_GI_Loading_SubG_GI_Loading_ResetGameInstanceDataAndSaveArchive_GetNodeDescriptionInCS) == 0x000008, "Wrong alignment on BED_FSMNode_GI_Loading_SubG_GI_Loading_ResetGameInstanceDataAndSaveArchive_GetNodeDescriptionInCS");
//static_assert(sizeof(BED_FSMNode_GI_Loading_SubG_GI_Loading_ResetGameInstanceDataAndSaveArchive_GetNodeDescriptionInCS) == 0x000010, "Wrong size on BED_FSMNode_GI_Loading_SubG_GI_Loading_ResetGameInstanceDataAndSaveArchive_GetNodeDescriptionInCS");
//static_assert(offsetof(BED_FSMNode_GI_Loading_SubG_GI_Loading_ResetGameInstanceDataAndSaveArchive_GetNodeDescriptionInCS, ReturnValue) == 0x000000, "Member 'BED_FSMNode_GI_Loading_SubG_GI_Loading_ResetGameInstanceDataAndSaveArchive_GetNodeDescriptionInCS::ReturnValue' has a wrong offset!");

// Function b1-Managed.BED_FSMNode_GI_Loading_SubG_GI_Loading_ReStartGSLogin.GetNodeDescriptionInCS
// 0x0010 (0x0010 - 0x0000)
struct BED_FSMNode_GI_Loading_SubG_GI_Loading_ReStartGSLogin_GetNodeDescriptionInCS final
{
public:
	class FString                                 ReturnValue;                                       // 0x0000(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash)
};
//static_assert(alignof(BED_FSMNode_GI_Loading_SubG_GI_Loading_ReStartGSLogin_GetNodeDescriptionInCS) == 0x000008, "Wrong alignment on BED_FSMNode_GI_Loading_SubG_GI_Loading_ReStartGSLogin_GetNodeDescriptionInCS");
//static_assert(sizeof(BED_FSMNode_GI_Loading_SubG_GI_Loading_ReStartGSLogin_GetNodeDescriptionInCS) == 0x000010, "Wrong size on BED_FSMNode_GI_Loading_SubG_GI_Loading_ReStartGSLogin_GetNodeDescriptionInCS");
//static_assert(offsetof(BED_FSMNode_GI_Loading_SubG_GI_Loading_ReStartGSLogin_GetNodeDescriptionInCS, ReturnValue) == 0x000000, "Member 'BED_FSMNode_GI_Loading_SubG_GI_Loading_ReStartGSLogin_GetNodeDescriptionInCS::ReturnValue' has a wrong offset!");

// Function b1-Managed.BED_FSMNode_GI_Loading_SubG_GI_Loading_SaveArchiveAndWaitFinish.GetNodeDescriptionInCS
// 0x0010 (0x0010 - 0x0000)
struct BED_FSMNode_GI_Loading_SubG_GI_Loading_SaveArchiveAndWaitFinish_GetNodeDescriptionInCS final
{
public:
	class FString                                 ReturnValue;                                       // 0x0000(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash)
};
//static_assert(alignof(BED_FSMNode_GI_Loading_SubG_GI_Loading_SaveArchiveAndWaitFinish_GetNodeDescriptionInCS) == 0x000008, "Wrong alignment on BED_FSMNode_GI_Loading_SubG_GI_Loading_SaveArchiveAndWaitFinish_GetNodeDescriptionInCS");
//static_assert(sizeof(BED_FSMNode_GI_Loading_SubG_GI_Loading_SaveArchiveAndWaitFinish_GetNodeDescriptionInCS) == 0x000010, "Wrong size on BED_FSMNode_GI_Loading_SubG_GI_Loading_SaveArchiveAndWaitFinish_GetNodeDescriptionInCS");
//static_assert(offsetof(BED_FSMNode_GI_Loading_SubG_GI_Loading_SaveArchiveAndWaitFinish_GetNodeDescriptionInCS, ReturnValue) == 0x000000, "Member 'BED_FSMNode_GI_Loading_SubG_GI_Loading_SaveArchiveAndWaitFinish_GetNodeDescriptionInCS::ReturnValue' has a wrong offset!");

// Function b1-Managed.BED_FSMNode_GI_Loading_TeleportTemplateBegin.PostPropertyChanged
// 0x0020 (0x0020 - 0x0000)
struct BED_FSMNode_GI_Loading_TeleportTemplateBegin_PostPropertyChanged final
{
public:
	class FString                                 MemberName;                                        // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash)
	class FString                                 PropertyName;                                      // 0x0010(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash)
};
//static_assert(alignof(BED_FSMNode_GI_Loading_TeleportTemplateBegin_PostPropertyChanged) == 0x000008, "Wrong alignment on BED_FSMNode_GI_Loading_TeleportTemplateBegin_PostPropertyChanged");
//static_assert(sizeof(BED_FSMNode_GI_Loading_TeleportTemplateBegin_PostPropertyChanged) == 0x000020, "Wrong size on BED_FSMNode_GI_Loading_TeleportTemplateBegin_PostPropertyChanged");
//static_assert(offsetof(BED_FSMNode_GI_Loading_TeleportTemplateBegin_PostPropertyChanged, MemberName) == 0x000000, "Member 'BED_FSMNode_GI_Loading_TeleportTemplateBegin_PostPropertyChanged::MemberName' has a wrong offset!");
//static_assert(offsetof(BED_FSMNode_GI_Loading_TeleportTemplateBegin_PostPropertyChanged, PropertyName) == 0x000010, "Member 'BED_FSMNode_GI_Loading_TeleportTemplateBegin_PostPropertyChanged::PropertyName' has a wrong offset!");

// Function b1-Managed.BED_FSMNode_GI_Loading_TeleportTemplateBegin.GetNodeDescriptionInCS
// 0x0010 (0x0010 - 0x0000)
struct BED_FSMNode_GI_Loading_TeleportTemplateBegin_GetNodeDescriptionInCS final
{
public:
	class FString                                 ReturnValue;                                       // 0x0000(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash)
};
//static_assert(alignof(BED_FSMNode_GI_Loading_TeleportTemplateBegin_GetNodeDescriptionInCS) == 0x000008, "Wrong alignment on BED_FSMNode_GI_Loading_TeleportTemplateBegin_GetNodeDescriptionInCS");
//static_assert(sizeof(BED_FSMNode_GI_Loading_TeleportTemplateBegin_GetNodeDescriptionInCS) == 0x000010, "Wrong size on BED_FSMNode_GI_Loading_TeleportTemplateBegin_GetNodeDescriptionInCS");
//static_assert(offsetof(BED_FSMNode_GI_Loading_TeleportTemplateBegin_GetNodeDescriptionInCS, ReturnValue) == 0x000000, "Member 'BED_FSMNode_GI_Loading_TeleportTemplateBegin_GetNodeDescriptionInCS::ReturnValue' has a wrong offset!");

// Function b1-Managed.BED_FSMNode_GI_Loading_TeleportTemplateEnd.PostPropertyChanged
// 0x0020 (0x0020 - 0x0000)
struct BED_FSMNode_GI_Loading_TeleportTemplateEnd_PostPropertyChanged final
{
public:
	class FString                                 MemberName;                                        // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash)
	class FString                                 PropertyName;                                      // 0x0010(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash)
};
//static_assert(alignof(BED_FSMNode_GI_Loading_TeleportTemplateEnd_PostPropertyChanged) == 0x000008, "Wrong alignment on BED_FSMNode_GI_Loading_TeleportTemplateEnd_PostPropertyChanged");
//static_assert(sizeof(BED_FSMNode_GI_Loading_TeleportTemplateEnd_PostPropertyChanged) == 0x000020, "Wrong size on BED_FSMNode_GI_Loading_TeleportTemplateEnd_PostPropertyChanged");
//static_assert(offsetof(BED_FSMNode_GI_Loading_TeleportTemplateEnd_PostPropertyChanged, MemberName) == 0x000000, "Member 'BED_FSMNode_GI_Loading_TeleportTemplateEnd_PostPropertyChanged::MemberName' has a wrong offset!");
//static_assert(offsetof(BED_FSMNode_GI_Loading_TeleportTemplateEnd_PostPropertyChanged, PropertyName) == 0x000010, "Member 'BED_FSMNode_GI_Loading_TeleportTemplateEnd_PostPropertyChanged::PropertyName' has a wrong offset!");

// Function b1-Managed.BED_FSMNode_GI_Loading_TeleportTemplateEnd.GetNodeDescriptionInCS
// 0x0010 (0x0010 - 0x0000)
struct BED_FSMNode_GI_Loading_TeleportTemplateEnd_GetNodeDescriptionInCS final
{
public:
	class FString                                 ReturnValue;                                       // 0x0000(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash)
};
//static_assert(alignof(BED_FSMNode_GI_Loading_TeleportTemplateEnd_GetNodeDescriptionInCS) == 0x000008, "Wrong alignment on BED_FSMNode_GI_Loading_TeleportTemplateEnd_GetNodeDescriptionInCS");
//static_assert(sizeof(BED_FSMNode_GI_Loading_TeleportTemplateEnd_GetNodeDescriptionInCS) == 0x000010, "Wrong size on BED_FSMNode_GI_Loading_TeleportTemplateEnd_GetNodeDescriptionInCS");
//static_assert(offsetof(BED_FSMNode_GI_Loading_TeleportTemplateEnd_GetNodeDescriptionInCS, ReturnValue) == 0x000000, "Member 'BED_FSMNode_GI_Loading_TeleportTemplateEnd_GetNodeDescriptionInCS::ReturnValue' has a wrong offset!");

// Function b1-Managed.BED_FSMNode_GI_Loading_TriggerBackToStandAlone.PostPropertyChanged
// 0x0020 (0x0020 - 0x0000)
struct BED_FSMNode_GI_Loading_TriggerBackToStandAlone_PostPropertyChanged final
{
public:
	class FString                                 MemberName;                                        // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash)
	class FString                                 PropertyName;                                      // 0x0010(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash)
};
//static_assert(alignof(BED_FSMNode_GI_Loading_TriggerBackToStandAlone_PostPropertyChanged) == 0x000008, "Wrong alignment on BED_FSMNode_GI_Loading_TriggerBackToStandAlone_PostPropertyChanged");
//static_assert(sizeof(BED_FSMNode_GI_Loading_TriggerBackToStandAlone_PostPropertyChanged) == 0x000020, "Wrong size on BED_FSMNode_GI_Loading_TriggerBackToStandAlone_PostPropertyChanged");
//static_assert(offsetof(BED_FSMNode_GI_Loading_TriggerBackToStandAlone_PostPropertyChanged, MemberName) == 0x000000, "Member 'BED_FSMNode_GI_Loading_TriggerBackToStandAlone_PostPropertyChanged::MemberName' has a wrong offset!");
//static_assert(offsetof(BED_FSMNode_GI_Loading_TriggerBackToStandAlone_PostPropertyChanged, PropertyName) == 0x000010, "Member 'BED_FSMNode_GI_Loading_TriggerBackToStandAlone_PostPropertyChanged::PropertyName' has a wrong offset!");

// Function b1-Managed.BED_FSMNode_GI_Loading_TriggerBackToStandAlone.GetNodeDescriptionInCS
// 0x0010 (0x0010 - 0x0000)
struct BED_FSMNode_GI_Loading_TriggerBackToStandAlone_GetNodeDescriptionInCS final
{
public:
	class FString                                 ReturnValue;                                       // 0x0000(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash)
};
//static_assert(alignof(BED_FSMNode_GI_Loading_TriggerBackToStandAlone_GetNodeDescriptionInCS) == 0x000008, "Wrong alignment on BED_FSMNode_GI_Loading_TriggerBackToStandAlone_GetNodeDescriptionInCS");
//static_assert(sizeof(BED_FSMNode_GI_Loading_TriggerBackToStandAlone_GetNodeDescriptionInCS) == 0x000010, "Wrong size on BED_FSMNode_GI_Loading_TriggerBackToStandAlone_GetNodeDescriptionInCS");
//static_assert(offsetof(BED_FSMNode_GI_Loading_TriggerBackToStandAlone_GetNodeDescriptionInCS, ReturnValue) == 0x000000, "Member 'BED_FSMNode_GI_Loading_TriggerBackToStandAlone_GetNodeDescriptionInCS::ReturnValue' has a wrong offset!");

// Function b1-Managed.BED_FSMNode_GI_Loading_TriggerTeleportAndWaitFinish.PostPropertyChanged
// 0x0020 (0x0020 - 0x0000)
struct BED_FSMNode_GI_Loading_TriggerTeleportAndWaitFinish_PostPropertyChanged final
{
public:
	class FString                                 MemberName;                                        // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash)
	class FString                                 PropertyName;                                      // 0x0010(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash)
};
//static_assert(alignof(BED_FSMNode_GI_Loading_TriggerTeleportAndWaitFinish_PostPropertyChanged) == 0x000008, "Wrong alignment on BED_FSMNode_GI_Loading_TriggerTeleportAndWaitFinish_PostPropertyChanged");
//static_assert(sizeof(BED_FSMNode_GI_Loading_TriggerTeleportAndWaitFinish_PostPropertyChanged) == 0x000020, "Wrong size on BED_FSMNode_GI_Loading_TriggerTeleportAndWaitFinish_PostPropertyChanged");
//static_assert(offsetof(BED_FSMNode_GI_Loading_TriggerTeleportAndWaitFinish_PostPropertyChanged, MemberName) == 0x000000, "Member 'BED_FSMNode_GI_Loading_TriggerTeleportAndWaitFinish_PostPropertyChanged::MemberName' has a wrong offset!");
//static_assert(offsetof(BED_FSMNode_GI_Loading_TriggerTeleportAndWaitFinish_PostPropertyChanged, PropertyName) == 0x000010, "Member 'BED_FSMNode_GI_Loading_TriggerTeleportAndWaitFinish_PostPropertyChanged::PropertyName' has a wrong offset!");

// Function b1-Managed.BED_FSMNode_GI_Loading_TriggerTeleportAndWaitFinish.GetNodeDescriptionInCS
// 0x0010 (0x0010 - 0x0000)
struct BED_FSMNode_GI_Loading_TriggerTeleportAndWaitFinish_GetNodeDescriptionInCS final
{
public:
	class FString                                 ReturnValue;                                       // 0x0000(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash)
};
//static_assert(alignof(BED_FSMNode_GI_Loading_TriggerTeleportAndWaitFinish_GetNodeDescriptionInCS) == 0x000008, "Wrong alignment on BED_FSMNode_GI_Loading_TriggerTeleportAndWaitFinish_GetNodeDescriptionInCS");
//static_assert(sizeof(BED_FSMNode_GI_Loading_TriggerTeleportAndWaitFinish_GetNodeDescriptionInCS) == 0x000010, "Wrong size on BED_FSMNode_GI_Loading_TriggerTeleportAndWaitFinish_GetNodeDescriptionInCS");
//static_assert(offsetof(BED_FSMNode_GI_Loading_TriggerTeleportAndWaitFinish_GetNodeDescriptionInCS, ReturnValue) == 0x000000, "Member 'BED_FSMNode_GI_Loading_TriggerTeleportAndWaitFinish_GetNodeDescriptionInCS::ReturnValue' has a wrong offset!");

// Function b1-Managed.BED_FSMNode_GI_Loading_UnlockScopeReplayScrubComplete.PostPropertyChanged
// 0x0020 (0x0020 - 0x0000)
struct BED_FSMNode_GI_Loading_UnlockScopeReplayScrubComplete_PostPropertyChanged final
{
public:
	class FString                                 MemberName;                                        // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash)
	class FString                                 PropertyName;                                      // 0x0010(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash)
};
//static_assert(alignof(BED_FSMNode_GI_Loading_UnlockScopeReplayScrubComplete_PostPropertyChanged) == 0x000008, "Wrong alignment on BED_FSMNode_GI_Loading_UnlockScopeReplayScrubComplete_PostPropertyChanged");
//static_assert(sizeof(BED_FSMNode_GI_Loading_UnlockScopeReplayScrubComplete_PostPropertyChanged) == 0x000020, "Wrong size on BED_FSMNode_GI_Loading_UnlockScopeReplayScrubComplete_PostPropertyChanged");
//static_assert(offsetof(BED_FSMNode_GI_Loading_UnlockScopeReplayScrubComplete_PostPropertyChanged, MemberName) == 0x000000, "Member 'BED_FSMNode_GI_Loading_UnlockScopeReplayScrubComplete_PostPropertyChanged::MemberName' has a wrong offset!");
//static_assert(offsetof(BED_FSMNode_GI_Loading_UnlockScopeReplayScrubComplete_PostPropertyChanged, PropertyName) == 0x000010, "Member 'BED_FSMNode_GI_Loading_UnlockScopeReplayScrubComplete_PostPropertyChanged::PropertyName' has a wrong offset!");

// Function b1-Managed.BED_FSMNode_GI_Loading_UnlockScopeReplayScrubComplete.GetNodeDescriptionInCS
// 0x0010 (0x0010 - 0x0000)
struct BED_FSMNode_GI_Loading_UnlockScopeReplayScrubComplete_GetNodeDescriptionInCS final
{
public:
	class FString                                 ReturnValue;                                       // 0x0000(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash)
};
//static_assert(alignof(BED_FSMNode_GI_Loading_UnlockScopeReplayScrubComplete_GetNodeDescriptionInCS) == 0x000008, "Wrong alignment on BED_FSMNode_GI_Loading_UnlockScopeReplayScrubComplete_GetNodeDescriptionInCS");
//static_assert(sizeof(BED_FSMNode_GI_Loading_UnlockScopeReplayScrubComplete_GetNodeDescriptionInCS) == 0x000010, "Wrong size on BED_FSMNode_GI_Loading_UnlockScopeReplayScrubComplete_GetNodeDescriptionInCS");
//static_assert(offsetof(BED_FSMNode_GI_Loading_UnlockScopeReplayScrubComplete_GetNodeDescriptionInCS, ReturnValue) == 0x000000, "Member 'BED_FSMNode_GI_Loading_UnlockScopeReplayScrubComplete_GetNodeDescriptionInCS::ReturnValue' has a wrong offset!");

// Function b1-Managed.BED_FSMNode_GI_Loading_UnrealTravelToServer.PostPropertyChanged
// 0x0020 (0x0020 - 0x0000)
struct BED_FSMNode_GI_Loading_UnrealTravelToServer_PostPropertyChanged final
{
public:
	class FString                                 MemberName;                                        // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash)
	class FString                                 PropertyName;                                      // 0x0010(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash)
};
//static_assert(alignof(BED_FSMNode_GI_Loading_UnrealTravelToServer_PostPropertyChanged) == 0x000008, "Wrong alignment on BED_FSMNode_GI_Loading_UnrealTravelToServer_PostPropertyChanged");
//static_assert(sizeof(BED_FSMNode_GI_Loading_UnrealTravelToServer_PostPropertyChanged) == 0x000020, "Wrong size on BED_FSMNode_GI_Loading_UnrealTravelToServer_PostPropertyChanged");
//static_assert(offsetof(BED_FSMNode_GI_Loading_UnrealTravelToServer_PostPropertyChanged, MemberName) == 0x000000, "Member 'BED_FSMNode_GI_Loading_UnrealTravelToServer_PostPropertyChanged::MemberName' has a wrong offset!");
//static_assert(offsetof(BED_FSMNode_GI_Loading_UnrealTravelToServer_PostPropertyChanged, PropertyName) == 0x000010, "Member 'BED_FSMNode_GI_Loading_UnrealTravelToServer_PostPropertyChanged::PropertyName' has a wrong offset!");

// Function b1-Managed.BED_FSMNode_GI_Loading_UnrealTravelToServer.GetNodeDescriptionInCS
// 0x0010 (0x0010 - 0x0000)
struct BED_FSMNode_GI_Loading_UnrealTravelToServer_GetNodeDescriptionInCS final
{
public:
	class FString                                 ReturnValue;                                       // 0x0000(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash)
};
//static_assert(alignof(BED_FSMNode_GI_Loading_UnrealTravelToServer_GetNodeDescriptionInCS) == 0x000008, "Wrong alignment on BED_FSMNode_GI_Loading_UnrealTravelToServer_GetNodeDescriptionInCS");
//static_assert(sizeof(BED_FSMNode_GI_Loading_UnrealTravelToServer_GetNodeDescriptionInCS) == 0x000010, "Wrong size on BED_FSMNode_GI_Loading_UnrealTravelToServer_GetNodeDescriptionInCS");
//static_assert(offsetof(BED_FSMNode_GI_Loading_UnrealTravelToServer_GetNodeDescriptionInCS, ReturnValue) == 0x000000, "Member 'BED_FSMNode_GI_Loading_UnrealTravelToServer_GetNodeDescriptionInCS::ReturnValue' has a wrong offset!");

// Function b1-Managed.BED_FSMNode_GI_Loading_WaitAllAssetLoadFinsh.PostPropertyChanged
// 0x0020 (0x0020 - 0x0000)
struct BED_FSMNode_GI_Loading_WaitAllAssetLoadFinsh_PostPropertyChanged final
{
public:
	class FString                                 MemberName;                                        // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash)
	class FString                                 PropertyName;                                      // 0x0010(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash)
};
//static_assert(alignof(BED_FSMNode_GI_Loading_WaitAllAssetLoadFinsh_PostPropertyChanged) == 0x000008, "Wrong alignment on BED_FSMNode_GI_Loading_WaitAllAssetLoadFinsh_PostPropertyChanged");
//static_assert(sizeof(BED_FSMNode_GI_Loading_WaitAllAssetLoadFinsh_PostPropertyChanged) == 0x000020, "Wrong size on BED_FSMNode_GI_Loading_WaitAllAssetLoadFinsh_PostPropertyChanged");
//static_assert(offsetof(BED_FSMNode_GI_Loading_WaitAllAssetLoadFinsh_PostPropertyChanged, MemberName) == 0x000000, "Member 'BED_FSMNode_GI_Loading_WaitAllAssetLoadFinsh_PostPropertyChanged::MemberName' has a wrong offset!");
//static_assert(offsetof(BED_FSMNode_GI_Loading_WaitAllAssetLoadFinsh_PostPropertyChanged, PropertyName) == 0x000010, "Member 'BED_FSMNode_GI_Loading_WaitAllAssetLoadFinsh_PostPropertyChanged::PropertyName' has a wrong offset!");

// Function b1-Managed.BED_FSMNode_GI_Loading_WaitAllAssetLoadFinsh.GetNodeDescriptionInCS
// 0x0010 (0x0010 - 0x0000)
struct BED_FSMNode_GI_Loading_WaitAllAssetLoadFinsh_GetNodeDescriptionInCS final
{
public:
	class FString                                 ReturnValue;                                       // 0x0000(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash)
};
//static_assert(alignof(BED_FSMNode_GI_Loading_WaitAllAssetLoadFinsh_GetNodeDescriptionInCS) == 0x000008, "Wrong alignment on BED_FSMNode_GI_Loading_WaitAllAssetLoadFinsh_GetNodeDescriptionInCS");
//static_assert(sizeof(BED_FSMNode_GI_Loading_WaitAllAssetLoadFinsh_GetNodeDescriptionInCS) == 0x000010, "Wrong size on BED_FSMNode_GI_Loading_WaitAllAssetLoadFinsh_GetNodeDescriptionInCS");
//static_assert(offsetof(BED_FSMNode_GI_Loading_WaitAllAssetLoadFinsh_GetNodeDescriptionInCS, ReturnValue) == 0x000000, "Member 'BED_FSMNode_GI_Loading_WaitAllAssetLoadFinsh_GetNodeDescriptionInCS::ReturnValue' has a wrong offset!");

// Function b1-Managed.BED_FSMNode_GI_Loading_WaitCheck820DemoGameVersion.PostPropertyChanged
// 0x0020 (0x0020 - 0x0000)
struct BED_FSMNode_GI_Loading_WaitCheck820DemoGameVersion_PostPropertyChanged final
{
public:
	class FString                                 MemberName;                                        // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash)
	class FString                                 PropertyName;                                      // 0x0010(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash)
};
//static_assert(alignof(BED_FSMNode_GI_Loading_WaitCheck820DemoGameVersion_PostPropertyChanged) == 0x000008, "Wrong alignment on BED_FSMNode_GI_Loading_WaitCheck820DemoGameVersion_PostPropertyChanged");
//static_assert(sizeof(BED_FSMNode_GI_Loading_WaitCheck820DemoGameVersion_PostPropertyChanged) == 0x000020, "Wrong size on BED_FSMNode_GI_Loading_WaitCheck820DemoGameVersion_PostPropertyChanged");
//static_assert(offsetof(BED_FSMNode_GI_Loading_WaitCheck820DemoGameVersion_PostPropertyChanged, MemberName) == 0x000000, "Member 'BED_FSMNode_GI_Loading_WaitCheck820DemoGameVersion_PostPropertyChanged::MemberName' has a wrong offset!");
//static_assert(offsetof(BED_FSMNode_GI_Loading_WaitCheck820DemoGameVersion_PostPropertyChanged, PropertyName) == 0x000010, "Member 'BED_FSMNode_GI_Loading_WaitCheck820DemoGameVersion_PostPropertyChanged::PropertyName' has a wrong offset!");

// Function b1-Managed.BED_FSMNode_GI_Loading_WaitCheck820DemoGameVersion.GetNodeDescriptionInCS
// 0x0010 (0x0010 - 0x0000)
struct BED_FSMNode_GI_Loading_WaitCheck820DemoGameVersion_GetNodeDescriptionInCS final
{
public:
	class FString                                 ReturnValue;                                       // 0x0000(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash)
};
//static_assert(alignof(BED_FSMNode_GI_Loading_WaitCheck820DemoGameVersion_GetNodeDescriptionInCS) == 0x000008, "Wrong alignment on BED_FSMNode_GI_Loading_WaitCheck820DemoGameVersion_GetNodeDescriptionInCS");
//static_assert(sizeof(BED_FSMNode_GI_Loading_WaitCheck820DemoGameVersion_GetNodeDescriptionInCS) == 0x000010, "Wrong size on BED_FSMNode_GI_Loading_WaitCheck820DemoGameVersion_GetNodeDescriptionInCS");
//static_assert(offsetof(BED_FSMNode_GI_Loading_WaitCheck820DemoGameVersion_GetNodeDescriptionInCS, ReturnValue) == 0x000000, "Member 'BED_FSMNode_GI_Loading_WaitCheck820DemoGameVersion_GetNodeDescriptionInCS::ReturnValue' has a wrong offset!");

// Function b1-Managed.BED_FSMNode_GI_Loading_WaitFirstPlayerLogin.PostPropertyChanged
// 0x0020 (0x0020 - 0x0000)
struct BED_FSMNode_GI_Loading_WaitFirstPlayerLogin_PostPropertyChanged final
{
public:
	class FString                                 MemberName;                                        // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash)
	class FString                                 PropertyName;                                      // 0x0010(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash)
};
//static_assert(alignof(BED_FSMNode_GI_Loading_WaitFirstPlayerLogin_PostPropertyChanged) == 0x000008, "Wrong alignment on BED_FSMNode_GI_Loading_WaitFirstPlayerLogin_PostPropertyChanged");
//static_assert(sizeof(BED_FSMNode_GI_Loading_WaitFirstPlayerLogin_PostPropertyChanged) == 0x000020, "Wrong size on BED_FSMNode_GI_Loading_WaitFirstPlayerLogin_PostPropertyChanged");
//static_assert(offsetof(BED_FSMNode_GI_Loading_WaitFirstPlayerLogin_PostPropertyChanged, MemberName) == 0x000000, "Member 'BED_FSMNode_GI_Loading_WaitFirstPlayerLogin_PostPropertyChanged::MemberName' has a wrong offset!");
//static_assert(offsetof(BED_FSMNode_GI_Loading_WaitFirstPlayerLogin_PostPropertyChanged, PropertyName) == 0x000010, "Member 'BED_FSMNode_GI_Loading_WaitFirstPlayerLogin_PostPropertyChanged::PropertyName' has a wrong offset!");

// Function b1-Managed.BED_FSMNode_GI_Loading_WaitFirstPlayerLogin.GetNodeDescriptionInCS
// 0x0010 (0x0010 - 0x0000)
struct BED_FSMNode_GI_Loading_WaitFirstPlayerLogin_GetNodeDescriptionInCS final
{
public:
	class FString                                 ReturnValue;                                       // 0x0000(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash)
};
//static_assert(alignof(BED_FSMNode_GI_Loading_WaitFirstPlayerLogin_GetNodeDescriptionInCS) == 0x000008, "Wrong alignment on BED_FSMNode_GI_Loading_WaitFirstPlayerLogin_GetNodeDescriptionInCS");
//static_assert(sizeof(BED_FSMNode_GI_Loading_WaitFirstPlayerLogin_GetNodeDescriptionInCS) == 0x000010, "Wrong size on BED_FSMNode_GI_Loading_WaitFirstPlayerLogin_GetNodeDescriptionInCS");
//static_assert(offsetof(BED_FSMNode_GI_Loading_WaitFirstPlayerLogin_GetNodeDescriptionInCS, ReturnValue) == 0x000000, "Member 'BED_FSMNode_GI_Loading_WaitFirstPlayerLogin_GetNodeDescriptionInCS::ReturnValue' has a wrong offset!");

// Function b1-Managed.BED_FSMNode_GI_Loading_WaitGSLoginSuccess.PostPropertyChanged
// 0x0020 (0x0020 - 0x0000)
struct BED_FSMNode_GI_Loading_WaitGSLoginSuccess_PostPropertyChanged final
{
public:
	class FString                                 MemberName;                                        // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash)
	class FString                                 PropertyName;                                      // 0x0010(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash)
};
//static_assert(alignof(BED_FSMNode_GI_Loading_WaitGSLoginSuccess_PostPropertyChanged) == 0x000008, "Wrong alignment on BED_FSMNode_GI_Loading_WaitGSLoginSuccess_PostPropertyChanged");
//static_assert(sizeof(BED_FSMNode_GI_Loading_WaitGSLoginSuccess_PostPropertyChanged) == 0x000020, "Wrong size on BED_FSMNode_GI_Loading_WaitGSLoginSuccess_PostPropertyChanged");
//static_assert(offsetof(BED_FSMNode_GI_Loading_WaitGSLoginSuccess_PostPropertyChanged, MemberName) == 0x000000, "Member 'BED_FSMNode_GI_Loading_WaitGSLoginSuccess_PostPropertyChanged::MemberName' has a wrong offset!");
//static_assert(offsetof(BED_FSMNode_GI_Loading_WaitGSLoginSuccess_PostPropertyChanged, PropertyName) == 0x000010, "Member 'BED_FSMNode_GI_Loading_WaitGSLoginSuccess_PostPropertyChanged::PropertyName' has a wrong offset!");

// Function b1-Managed.BED_FSMNode_GI_Loading_WaitGSLoginSuccess.GetNodeDescriptionInCS
// 0x0010 (0x0010 - 0x0000)
struct BED_FSMNode_GI_Loading_WaitGSLoginSuccess_GetNodeDescriptionInCS final
{
public:
	class FString                                 ReturnValue;                                       // 0x0000(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash)
};
//static_assert(alignof(BED_FSMNode_GI_Loading_WaitGSLoginSuccess_GetNodeDescriptionInCS) == 0x000008, "Wrong alignment on BED_FSMNode_GI_Loading_WaitGSLoginSuccess_GetNodeDescriptionInCS");
//static_assert(sizeof(BED_FSMNode_GI_Loading_WaitGSLoginSuccess_GetNodeDescriptionInCS) == 0x000010, "Wrong size on BED_FSMNode_GI_Loading_WaitGSLoginSuccess_GetNodeDescriptionInCS");
//static_assert(offsetof(BED_FSMNode_GI_Loading_WaitGSLoginSuccess_GetNodeDescriptionInCS, ReturnValue) == 0x000000, "Member 'BED_FSMNode_GI_Loading_WaitGSLoginSuccess_GetNodeDescriptionInCS::ReturnValue' has a wrong offset!");

// Function b1-Managed.BgmVolumeFunctionBinder.OnCollisionBeginOverlap
// 0x0108 (0x0108 - 0x0000)
struct BgmVolumeFunctionBinder_OnCollisionBeginOverlap final
{
public:
	class UPrimitiveComponent*                    OverlappedComponent;                               // 0x0000(0x0008)(ExportObject, Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class AActor*                                 OtherActor;                                        // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UPrimitiveComponent*                    OtherComp;                                         // 0x0010(0x0008)(ExportObject, Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         OtherBodyIndex;                                    // 0x0018(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         bFromSweep : 1;                                    // 0x001C(0x0001)(BitIndex: 0x00, PropSize: 0x0001 (Parm, NoDestructor, HasGetValueTypeHash))
	uint8                                         Pad_1D[0x3];                                       // 0x001D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FHitResult                             SweepResult;                                       // 0x0020(0x00E8)(Parm, IsPlainOldData, NoDestructor)
};
//static_assert(alignof(BgmVolumeFunctionBinder_OnCollisionBeginOverlap) == 0x000008, "Wrong alignment on BgmVolumeFunctionBinder_OnCollisionBeginOverlap");
//static_assert(sizeof(BgmVolumeFunctionBinder_OnCollisionBeginOverlap) == 0x000108, "Wrong size on BgmVolumeFunctionBinder_OnCollisionBeginOverlap");
//static_assert(offsetof(BgmVolumeFunctionBinder_OnCollisionBeginOverlap, OverlappedComponent) == 0x000000, "Member 'BgmVolumeFunctionBinder_OnCollisionBeginOverlap::OverlappedComponent' has a wrong offset!");
//static_assert(offsetof(BgmVolumeFunctionBinder_OnCollisionBeginOverlap, OtherActor) == 0x000008, "Member 'BgmVolumeFunctionBinder_OnCollisionBeginOverlap::OtherActor' has a wrong offset!");
//static_assert(offsetof(BgmVolumeFunctionBinder_OnCollisionBeginOverlap, OtherComp) == 0x000010, "Member 'BgmVolumeFunctionBinder_OnCollisionBeginOverlap::OtherComp' has a wrong offset!");
//static_assert(offsetof(BgmVolumeFunctionBinder_OnCollisionBeginOverlap, OtherBodyIndex) == 0x000018, "Member 'BgmVolumeFunctionBinder_OnCollisionBeginOverlap::OtherBodyIndex' has a wrong offset!");
//static_assert(offsetof(BgmVolumeFunctionBinder_OnCollisionBeginOverlap, SweepResult) == 0x000020, "Member 'BgmVolumeFunctionBinder_OnCollisionBeginOverlap::SweepResult' has a wrong offset!");

// Function b1-Managed.BgmVolumeFunctionBinder.OnCollisionEndOverlap
// 0x0108 (0x0108 - 0x0000)
struct BgmVolumeFunctionBinder_OnCollisionEndOverlap final
{
public:
	class UPrimitiveComponent*                    OverlappedComponent;                               // 0x0000(0x0008)(ExportObject, Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class AActor*                                 OtherActor;                                        // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UPrimitiveComponent*                    OtherComp;                                         // 0x0010(0x0008)(ExportObject, Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         OtherBodyIndex;                                    // 0x0018(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         bFromSweep : 1;                                    // 0x001C(0x0001)(BitIndex: 0x00, PropSize: 0x0001 (Parm, NoDestructor, HasGetValueTypeHash))
	uint8                                         Pad_1D[0x3];                                       // 0x001D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FHitResult                             SweepResult;                                       // 0x0020(0x00E8)(Parm, IsPlainOldData, NoDestructor)
};
//static_assert(alignof(BgmVolumeFunctionBinder_OnCollisionEndOverlap) == 0x000008, "Wrong alignment on BgmVolumeFunctionBinder_OnCollisionEndOverlap");
//static_assert(sizeof(BgmVolumeFunctionBinder_OnCollisionEndOverlap) == 0x000108, "Wrong size on BgmVolumeFunctionBinder_OnCollisionEndOverlap");
//static_assert(offsetof(BgmVolumeFunctionBinder_OnCollisionEndOverlap, OverlappedComponent) == 0x000000, "Member 'BgmVolumeFunctionBinder_OnCollisionEndOverlap::OverlappedComponent' has a wrong offset!");
//static_assert(offsetof(BgmVolumeFunctionBinder_OnCollisionEndOverlap, OtherActor) == 0x000008, "Member 'BgmVolumeFunctionBinder_OnCollisionEndOverlap::OtherActor' has a wrong offset!");
//static_assert(offsetof(BgmVolumeFunctionBinder_OnCollisionEndOverlap, OtherComp) == 0x000010, "Member 'BgmVolumeFunctionBinder_OnCollisionEndOverlap::OtherComp' has a wrong offset!");
//static_assert(offsetof(BgmVolumeFunctionBinder_OnCollisionEndOverlap, OtherBodyIndex) == 0x000018, "Member 'BgmVolumeFunctionBinder_OnCollisionEndOverlap::OtherBodyIndex' has a wrong offset!");
//static_assert(offsetof(BgmVolumeFunctionBinder_OnCollisionEndOverlap, SweepResult) == 0x000020, "Member 'BgmVolumeFunctionBinder_OnCollisionEndOverlap::SweepResult' has a wrong offset!");

// Function b1-Managed.BgmVolumeFunctionBinder.OnActorLeave
// 0x0010 (0x0010 - 0x0000)
struct BgmVolumeFunctionBinder_OnActorLeave final
{
public:
	class AActor*                                 OverlapActor;                                      // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class AActor*                                 OtherActor;                                        // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
//static_assert(alignof(BgmVolumeFunctionBinder_OnActorLeave) == 0x000008, "Wrong alignment on BgmVolumeFunctionBinder_OnActorLeave");
//static_assert(sizeof(BgmVolumeFunctionBinder_OnActorLeave) == 0x000010, "Wrong size on BgmVolumeFunctionBinder_OnActorLeave");
//static_assert(offsetof(BgmVolumeFunctionBinder_OnActorLeave, OverlapActor) == 0x000000, "Member 'BgmVolumeFunctionBinder_OnActorLeave::OverlapActor' has a wrong offset!");
//static_assert(offsetof(BgmVolumeFunctionBinder_OnActorLeave, OtherActor) == 0x000008, "Member 'BgmVolumeFunctionBinder_OnActorLeave::OtherActor' has a wrong offset!");

// Function b1-Managed.BgmVolumeFunctionBinder.OnActorEnter
// 0x0010 (0x0010 - 0x0000)
struct BgmVolumeFunctionBinder_OnActorEnter final
{
public:
	class AActor*                                 OverlapActor;                                      // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class AActor*                                 OtherActor;                                        // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
//static_assert(alignof(BgmVolumeFunctionBinder_OnActorEnter) == 0x000008, "Wrong alignment on BgmVolumeFunctionBinder_OnActorEnter");
//static_assert(sizeof(BgmVolumeFunctionBinder_OnActorEnter) == 0x000010, "Wrong size on BgmVolumeFunctionBinder_OnActorEnter");
//static_assert(offsetof(BgmVolumeFunctionBinder_OnActorEnter, OverlapActor) == 0x000000, "Member 'BgmVolumeFunctionBinder_OnActorEnter::OverlapActor' has a wrong offset!");
//static_assert(offsetof(BgmVolumeFunctionBinder_OnActorEnter, OtherActor) == 0x000008, "Member 'BgmVolumeFunctionBinder_OnActorEnter::OtherActor' has a wrong offset!");

// Function b1-Managed.BAN_GSLaunchCharacter.bIsNativeBranchingPointCS
// 0x0001 (0x0001 - 0x0000)
struct BAN_GSLaunchCharacter_bIsNativeBranchingPointCS final
{
public:
	uint8                                         ReturnValue : 1;                                   // 0x0000(0x0001)(BitIndex: 0x00, PropSize: 0x0001 (Parm, OutParm, ReturnParm, NoDestructor, HasGetValueTypeHash))
};
//static_assert(alignof(BAN_GSLaunchCharacter_bIsNativeBranchingPointCS) == 0x000001, "Wrong alignment on BAN_GSLaunchCharacter_bIsNativeBranchingPointCS");
//static_assert(sizeof(BAN_GSLaunchCharacter_bIsNativeBranchingPointCS) == 0x000001, "Wrong size on BAN_GSLaunchCharacter_bIsNativeBranchingPointCS");

// Function b1-Managed.BAN_GSLaunchCharacter.GSNotifyCS
// 0x0040 (0x0040 - 0x0000)
struct BAN_GSLaunchCharacter_GSNotifyCS final
{
public:
	struct FUStGSNotifyParam                      NotifyParam;                                       // 0x0000(0x0040)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
//static_assert(alignof(BAN_GSLaunchCharacter_GSNotifyCS) == 0x000008, "Wrong alignment on BAN_GSLaunchCharacter_GSNotifyCS");
//static_assert(sizeof(BAN_GSLaunchCharacter_GSNotifyCS) == 0x000040, "Wrong size on BAN_GSLaunchCharacter_GSNotifyCS");
//static_assert(offsetof(BAN_GSLaunchCharacter_GSNotifyCS, NotifyParam) == 0x000000, "Member 'BAN_GSLaunchCharacter_GSNotifyCS::NotifyParam' has a wrong offset!");

// Function b1-Managed.BED_FSMNode_GI_Loading_WaitImportantAssetLoadFinsh.PostPropertyChanged
// 0x0020 (0x0020 - 0x0000)
struct BED_FSMNode_GI_Loading_WaitImportantAssetLoadFinsh_PostPropertyChanged final
{
public:
	class FString                                 MemberName;                                        // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash)
	class FString                                 PropertyName;                                      // 0x0010(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash)
};
//static_assert(alignof(BED_FSMNode_GI_Loading_WaitImportantAssetLoadFinsh_PostPropertyChanged) == 0x000008, "Wrong alignment on BED_FSMNode_GI_Loading_WaitImportantAssetLoadFinsh_PostPropertyChanged");
//static_assert(sizeof(BED_FSMNode_GI_Loading_WaitImportantAssetLoadFinsh_PostPropertyChanged) == 0x000020, "Wrong size on BED_FSMNode_GI_Loading_WaitImportantAssetLoadFinsh_PostPropertyChanged");
//static_assert(offsetof(BED_FSMNode_GI_Loading_WaitImportantAssetLoadFinsh_PostPropertyChanged, MemberName) == 0x000000, "Member 'BED_FSMNode_GI_Loading_WaitImportantAssetLoadFinsh_PostPropertyChanged::MemberName' has a wrong offset!");
//static_assert(offsetof(BED_FSMNode_GI_Loading_WaitImportantAssetLoadFinsh_PostPropertyChanged, PropertyName) == 0x000010, "Member 'BED_FSMNode_GI_Loading_WaitImportantAssetLoadFinsh_PostPropertyChanged::PropertyName' has a wrong offset!");

// Function b1-Managed.BED_FSMNode_GI_Loading_WaitImportantAssetLoadFinsh.GetNodeDescriptionInCS
// 0x0010 (0x0010 - 0x0000)
struct BED_FSMNode_GI_Loading_WaitImportantAssetLoadFinsh_GetNodeDescriptionInCS final
{
public:
	class FString                                 ReturnValue;                                       // 0x0000(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash)
};
//static_assert(alignof(BED_FSMNode_GI_Loading_WaitImportantAssetLoadFinsh_GetNodeDescriptionInCS) == 0x000008, "Wrong alignment on BED_FSMNode_GI_Loading_WaitImportantAssetLoadFinsh_GetNodeDescriptionInCS");
//static_assert(sizeof(BED_FSMNode_GI_Loading_WaitImportantAssetLoadFinsh_GetNodeDescriptionInCS) == 0x000010, "Wrong size on BED_FSMNode_GI_Loading_WaitImportantAssetLoadFinsh_GetNodeDescriptionInCS");
//static_assert(offsetof(BED_FSMNode_GI_Loading_WaitImportantAssetLoadFinsh_GetNodeDescriptionInCS, ReturnValue) == 0x000000, "Member 'BED_FSMNode_GI_Loading_WaitImportantAssetLoadFinsh_GetNodeDescriptionInCS::ReturnValue' has a wrong offset!");

// Function b1-Managed.BED_FSMNode_GI_Loading_WaitLevelStreamingLoad.PostPropertyChanged
// 0x0020 (0x0020 - 0x0000)
struct BED_FSMNode_GI_Loading_WaitLevelStreamingLoad_PostPropertyChanged final
{
public:
	class FString                                 MemberName;                                        // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash)
	class FString                                 PropertyName;                                      // 0x0010(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash)
};
//static_assert(alignof(BED_FSMNode_GI_Loading_WaitLevelStreamingLoad_PostPropertyChanged) == 0x000008, "Wrong alignment on BED_FSMNode_GI_Loading_WaitLevelStreamingLoad_PostPropertyChanged");
//static_assert(sizeof(BED_FSMNode_GI_Loading_WaitLevelStreamingLoad_PostPropertyChanged) == 0x000020, "Wrong size on BED_FSMNode_GI_Loading_WaitLevelStreamingLoad_PostPropertyChanged");
//static_assert(offsetof(BED_FSMNode_GI_Loading_WaitLevelStreamingLoad_PostPropertyChanged, MemberName) == 0x000000, "Member 'BED_FSMNode_GI_Loading_WaitLevelStreamingLoad_PostPropertyChanged::MemberName' has a wrong offset!");
//static_assert(offsetof(BED_FSMNode_GI_Loading_WaitLevelStreamingLoad_PostPropertyChanged, PropertyName) == 0x000010, "Member 'BED_FSMNode_GI_Loading_WaitLevelStreamingLoad_PostPropertyChanged::PropertyName' has a wrong offset!");

// Function b1-Managed.BED_FSMNode_GI_Loading_WaitLevelStreamingLoad.GetNodeDescriptionInCS
// 0x0010 (0x0010 - 0x0000)
struct BED_FSMNode_GI_Loading_WaitLevelStreamingLoad_GetNodeDescriptionInCS final
{
public:
	class FString                                 ReturnValue;                                       // 0x0000(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash)
};
//static_assert(alignof(BED_FSMNode_GI_Loading_WaitLevelStreamingLoad_GetNodeDescriptionInCS) == 0x000008, "Wrong alignment on BED_FSMNode_GI_Loading_WaitLevelStreamingLoad_GetNodeDescriptionInCS");
//static_assert(sizeof(BED_FSMNode_GI_Loading_WaitLevelStreamingLoad_GetNodeDescriptionInCS) == 0x000010, "Wrong size on BED_FSMNode_GI_Loading_WaitLevelStreamingLoad_GetNodeDescriptionInCS");
//static_assert(offsetof(BED_FSMNode_GI_Loading_WaitLevelStreamingLoad_GetNodeDescriptionInCS, ReturnValue) == 0x000000, "Member 'BED_FSMNode_GI_Loading_WaitLevelStreamingLoad_GetNodeDescriptionInCS::ReturnValue' has a wrong offset!");

// Function b1-Managed.GSEQC_ProjectileContext.ProvideActorsSetCS
// 0x0010 (0x0010 - 0x0000)
struct GSEQC_ProjectileContext_ProvideActorsSetCS final
{
public:
	class UObject*                                QuerierObject;                                     // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class AActor*                                 QuerierActor;                                      // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
//static_assert(alignof(GSEQC_ProjectileContext_ProvideActorsSetCS) == 0x000008, "Wrong alignment on GSEQC_ProjectileContext_ProvideActorsSetCS");
//static_assert(sizeof(GSEQC_ProjectileContext_ProvideActorsSetCS) == 0x000010, "Wrong size on GSEQC_ProjectileContext_ProvideActorsSetCS");
//static_assert(offsetof(GSEQC_ProjectileContext_ProvideActorsSetCS, QuerierObject) == 0x000000, "Member 'GSEQC_ProjectileContext_ProvideActorsSetCS::QuerierObject' has a wrong offset!");
//static_assert(offsetof(GSEQC_ProjectileContext_ProvideActorsSetCS, QuerierActor) == 0x000008, "Member 'GSEQC_ProjectileContext_ProvideActorsSetCS::QuerierActor' has a wrong offset!");

// Function b1-Managed.BED_FSMNode_GI_Loading_WaitLocalPlayerStartPlay.PostPropertyChanged
// 0x0020 (0x0020 - 0x0000)
struct BED_FSMNode_GI_Loading_WaitLocalPlayerStartPlay_PostPropertyChanged final
{
public:
	class FString                                 MemberName;                                        // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash)
	class FString                                 PropertyName;                                      // 0x0010(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash)
};
//static_assert(alignof(BED_FSMNode_GI_Loading_WaitLocalPlayerStartPlay_PostPropertyChanged) == 0x000008, "Wrong alignment on BED_FSMNode_GI_Loading_WaitLocalPlayerStartPlay_PostPropertyChanged");
//static_assert(sizeof(BED_FSMNode_GI_Loading_WaitLocalPlayerStartPlay_PostPropertyChanged) == 0x000020, "Wrong size on BED_FSMNode_GI_Loading_WaitLocalPlayerStartPlay_PostPropertyChanged");
//static_assert(offsetof(BED_FSMNode_GI_Loading_WaitLocalPlayerStartPlay_PostPropertyChanged, MemberName) == 0x000000, "Member 'BED_FSMNode_GI_Loading_WaitLocalPlayerStartPlay_PostPropertyChanged::MemberName' has a wrong offset!");
//static_assert(offsetof(BED_FSMNode_GI_Loading_WaitLocalPlayerStartPlay_PostPropertyChanged, PropertyName) == 0x000010, "Member 'BED_FSMNode_GI_Loading_WaitLocalPlayerStartPlay_PostPropertyChanged::PropertyName' has a wrong offset!");

// Function b1-Managed.BED_FSMNode_GI_Loading_WaitLocalPlayerStartPlay.GetNodeDescriptionInCS
// 0x0010 (0x0010 - 0x0000)
struct BED_FSMNode_GI_Loading_WaitLocalPlayerStartPlay_GetNodeDescriptionInCS final
{
public:
	class FString                                 ReturnValue;                                       // 0x0000(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash)
};
//static_assert(alignof(BED_FSMNode_GI_Loading_WaitLocalPlayerStartPlay_GetNodeDescriptionInCS) == 0x000008, "Wrong alignment on BED_FSMNode_GI_Loading_WaitLocalPlayerStartPlay_GetNodeDescriptionInCS");
//static_assert(sizeof(BED_FSMNode_GI_Loading_WaitLocalPlayerStartPlay_GetNodeDescriptionInCS) == 0x000010, "Wrong size on BED_FSMNode_GI_Loading_WaitLocalPlayerStartPlay_GetNodeDescriptionInCS");
//static_assert(offsetof(BED_FSMNode_GI_Loading_WaitLocalPlayerStartPlay_GetNodeDescriptionInCS, ReturnValue) == 0x000000, "Member 'BED_FSMNode_GI_Loading_WaitLocalPlayerStartPlay_GetNodeDescriptionInCS::ReturnValue' has a wrong offset!");

// Function b1-Managed.BED_FSMNode_GI_Loading_WaitMatchStart.PostPropertyChanged
// 0x0020 (0x0020 - 0x0000)
struct BED_FSMNode_GI_Loading_WaitMatchStart_PostPropertyChanged final
{
public:
	class FString                                 MemberName;                                        // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash)
	class FString                                 PropertyName;                                      // 0x0010(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash)
};
//static_assert(alignof(BED_FSMNode_GI_Loading_WaitMatchStart_PostPropertyChanged) == 0x000008, "Wrong alignment on BED_FSMNode_GI_Loading_WaitMatchStart_PostPropertyChanged");
//static_assert(sizeof(BED_FSMNode_GI_Loading_WaitMatchStart_PostPropertyChanged) == 0x000020, "Wrong size on BED_FSMNode_GI_Loading_WaitMatchStart_PostPropertyChanged");
//static_assert(offsetof(BED_FSMNode_GI_Loading_WaitMatchStart_PostPropertyChanged, MemberName) == 0x000000, "Member 'BED_FSMNode_GI_Loading_WaitMatchStart_PostPropertyChanged::MemberName' has a wrong offset!");
//static_assert(offsetof(BED_FSMNode_GI_Loading_WaitMatchStart_PostPropertyChanged, PropertyName) == 0x000010, "Member 'BED_FSMNode_GI_Loading_WaitMatchStart_PostPropertyChanged::PropertyName' has a wrong offset!");

// Function b1-Managed.BED_FSMNode_GI_Loading_WaitMatchStart.GetNodeDescriptionInCS
// 0x0010 (0x0010 - 0x0000)
struct BED_FSMNode_GI_Loading_WaitMatchStart_GetNodeDescriptionInCS final
{
public:
	class FString                                 ReturnValue;                                       // 0x0000(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash)
};
//static_assert(alignof(BED_FSMNode_GI_Loading_WaitMatchStart_GetNodeDescriptionInCS) == 0x000008, "Wrong alignment on BED_FSMNode_GI_Loading_WaitMatchStart_GetNodeDescriptionInCS");
//static_assert(sizeof(BED_FSMNode_GI_Loading_WaitMatchStart_GetNodeDescriptionInCS) == 0x000010, "Wrong size on BED_FSMNode_GI_Loading_WaitMatchStart_GetNodeDescriptionInCS");
//static_assert(offsetof(BED_FSMNode_GI_Loading_WaitMatchStart_GetNodeDescriptionInCS, ReturnValue) == 0x000000, "Member 'BED_FSMNode_GI_Loading_WaitMatchStart_GetNodeDescriptionInCS::ReturnValue' has a wrong offset!");

// Function b1-Managed.BAN_GSSetCachePoint.bIsNativeBranchingPointCS
// 0x0001 (0x0001 - 0x0000)
struct BAN_GSSetCachePoint_bIsNativeBranchingPointCS final
{
public:
	uint8                                         ReturnValue : 1;                                   // 0x0000(0x0001)(BitIndex: 0x00, PropSize: 0x0001 (Parm, OutParm, ReturnParm, NoDestructor, HasGetValueTypeHash))
};
//static_assert(alignof(BAN_GSSetCachePoint_bIsNativeBranchingPointCS) == 0x000001, "Wrong alignment on BAN_GSSetCachePoint_bIsNativeBranchingPointCS");
//static_assert(sizeof(BAN_GSSetCachePoint_bIsNativeBranchingPointCS) == 0x000001, "Wrong size on BAN_GSSetCachePoint_bIsNativeBranchingPointCS");

// Function b1-Managed.BAN_GSSetCachePoint.GSNotifyCS
// 0x0040 (0x0040 - 0x0000)
struct BAN_GSSetCachePoint_GSNotifyCS final
{
public:
	struct FUStGSNotifyParam                      NotifyParam;                                       // 0x0000(0x0040)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
//static_assert(alignof(BAN_GSSetCachePoint_GSNotifyCS) == 0x000008, "Wrong alignment on BAN_GSSetCachePoint_GSNotifyCS");
//static_assert(sizeof(BAN_GSSetCachePoint_GSNotifyCS) == 0x000040, "Wrong size on BAN_GSSetCachePoint_GSNotifyCS");
//static_assert(offsetof(BAN_GSSetCachePoint_GSNotifyCS, NotifyParam) == 0x000000, "Member 'BAN_GSSetCachePoint_GSNotifyCS::NotifyParam' has a wrong offset!");

// Function b1-Managed.BED_FSMNode_GI_Loading_WaitPlayerCameraBlend.PostPropertyChanged
// 0x0020 (0x0020 - 0x0000)
struct BED_FSMNode_GI_Loading_WaitPlayerCameraBlend_PostPropertyChanged final
{
public:
	class FString                                 MemberName;                                        // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash)
	class FString                                 PropertyName;                                      // 0x0010(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash)
};
//static_assert(alignof(BED_FSMNode_GI_Loading_WaitPlayerCameraBlend_PostPropertyChanged) == 0x000008, "Wrong alignment on BED_FSMNode_GI_Loading_WaitPlayerCameraBlend_PostPropertyChanged");
//static_assert(sizeof(BED_FSMNode_GI_Loading_WaitPlayerCameraBlend_PostPropertyChanged) == 0x000020, "Wrong size on BED_FSMNode_GI_Loading_WaitPlayerCameraBlend_PostPropertyChanged");
//static_assert(offsetof(BED_FSMNode_GI_Loading_WaitPlayerCameraBlend_PostPropertyChanged, MemberName) == 0x000000, "Member 'BED_FSMNode_GI_Loading_WaitPlayerCameraBlend_PostPropertyChanged::MemberName' has a wrong offset!");
//static_assert(offsetof(BED_FSMNode_GI_Loading_WaitPlayerCameraBlend_PostPropertyChanged, PropertyName) == 0x000010, "Member 'BED_FSMNode_GI_Loading_WaitPlayerCameraBlend_PostPropertyChanged::PropertyName' has a wrong offset!");

// Function b1-Managed.BED_FSMNode_GI_Loading_WaitPlayerCameraBlend.GetNodeDescriptionInCS
// 0x0010 (0x0010 - 0x0000)
struct BED_FSMNode_GI_Loading_WaitPlayerCameraBlend_GetNodeDescriptionInCS final
{
public:
	class FString                                 ReturnValue;                                       // 0x0000(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash)
};
//static_assert(alignof(BED_FSMNode_GI_Loading_WaitPlayerCameraBlend_GetNodeDescriptionInCS) == 0x000008, "Wrong alignment on BED_FSMNode_GI_Loading_WaitPlayerCameraBlend_GetNodeDescriptionInCS");
//static_assert(sizeof(BED_FSMNode_GI_Loading_WaitPlayerCameraBlend_GetNodeDescriptionInCS) == 0x000010, "Wrong size on BED_FSMNode_GI_Loading_WaitPlayerCameraBlend_GetNodeDescriptionInCS");
//static_assert(offsetof(BED_FSMNode_GI_Loading_WaitPlayerCameraBlend_GetNodeDescriptionInCS, ReturnValue) == 0x000000, "Member 'BED_FSMNode_GI_Loading_WaitPlayerCameraBlend_GetNodeDescriptionInCS::ReturnValue' has a wrong offset!");

// Function b1-Managed.BAN_GSQTEDecHP.GSNotifyCS
// 0x0040 (0x0040 - 0x0000)
struct BAN_GSQTEDecHP_GSNotifyCS final
{
public:
	struct FUStGSNotifyParam                      NotifyParam;                                       // 0x0000(0x0040)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
//static_assert(alignof(BAN_GSQTEDecHP_GSNotifyCS) == 0x000008, "Wrong alignment on BAN_GSQTEDecHP_GSNotifyCS");
//static_assert(sizeof(BAN_GSQTEDecHP_GSNotifyCS) == 0x000040, "Wrong size on BAN_GSQTEDecHP_GSNotifyCS");
//static_assert(offsetof(BAN_GSQTEDecHP_GSNotifyCS, NotifyParam) == 0x000000, "Member 'BAN_GSQTEDecHP_GSNotifyCS::NotifyParam' has a wrong offset!");

// Function b1-Managed.BED_FSMNode_GI_Loading_WaitPostLoadMapClient.PostPropertyChanged
// 0x0020 (0x0020 - 0x0000)
struct BED_FSMNode_GI_Loading_WaitPostLoadMapClient_PostPropertyChanged final
{
public:
	class FString                                 MemberName;                                        // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash)
	class FString                                 PropertyName;                                      // 0x0010(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash)
};
//static_assert(alignof(BED_FSMNode_GI_Loading_WaitPostLoadMapClient_PostPropertyChanged) == 0x000008, "Wrong alignment on BED_FSMNode_GI_Loading_WaitPostLoadMapClient_PostPropertyChanged");
//static_assert(sizeof(BED_FSMNode_GI_Loading_WaitPostLoadMapClient_PostPropertyChanged) == 0x000020, "Wrong size on BED_FSMNode_GI_Loading_WaitPostLoadMapClient_PostPropertyChanged");
//static_assert(offsetof(BED_FSMNode_GI_Loading_WaitPostLoadMapClient_PostPropertyChanged, MemberName) == 0x000000, "Member 'BED_FSMNode_GI_Loading_WaitPostLoadMapClient_PostPropertyChanged::MemberName' has a wrong offset!");
//static_assert(offsetof(BED_FSMNode_GI_Loading_WaitPostLoadMapClient_PostPropertyChanged, PropertyName) == 0x000010, "Member 'BED_FSMNode_GI_Loading_WaitPostLoadMapClient_PostPropertyChanged::PropertyName' has a wrong offset!");

// Function b1-Managed.BED_FSMNode_GI_Loading_WaitPostLoadMapClient.GetNodeDescriptionInCS
// 0x0010 (0x0010 - 0x0000)
struct BED_FSMNode_GI_Loading_WaitPostLoadMapClient_GetNodeDescriptionInCS final
{
public:
	class FString                                 ReturnValue;                                       // 0x0000(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash)
};
//static_assert(alignof(BED_FSMNode_GI_Loading_WaitPostLoadMapClient_GetNodeDescriptionInCS) == 0x000008, "Wrong alignment on BED_FSMNode_GI_Loading_WaitPostLoadMapClient_GetNodeDescriptionInCS");
//static_assert(sizeof(BED_FSMNode_GI_Loading_WaitPostLoadMapClient_GetNodeDescriptionInCS) == 0x000010, "Wrong size on BED_FSMNode_GI_Loading_WaitPostLoadMapClient_GetNodeDescriptionInCS");
//static_assert(offsetof(BED_FSMNode_GI_Loading_WaitPostLoadMapClient_GetNodeDescriptionInCS, ReturnValue) == 0x000000, "Member 'BED_FSMNode_GI_Loading_WaitPostLoadMapClient_GetNodeDescriptionInCS::ReturnValue' has a wrong offset!");

// Function b1-Managed.BED_FSMNode_GI_Loading_WaitPsoCachePrecompileFinish.PostPropertyChanged
// 0x0020 (0x0020 - 0x0000)
struct BED_FSMNode_GI_Loading_WaitPsoCachePrecompileFinish_PostPropertyChanged final
{
public:
	class FString                                 MemberName;                                        // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash)
	class FString                                 PropertyName;                                      // 0x0010(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash)
};
//static_assert(alignof(BED_FSMNode_GI_Loading_WaitPsoCachePrecompileFinish_PostPropertyChanged) == 0x000008, "Wrong alignment on BED_FSMNode_GI_Loading_WaitPsoCachePrecompileFinish_PostPropertyChanged");
//static_assert(sizeof(BED_FSMNode_GI_Loading_WaitPsoCachePrecompileFinish_PostPropertyChanged) == 0x000020, "Wrong size on BED_FSMNode_GI_Loading_WaitPsoCachePrecompileFinish_PostPropertyChanged");
//static_assert(offsetof(BED_FSMNode_GI_Loading_WaitPsoCachePrecompileFinish_PostPropertyChanged, MemberName) == 0x000000, "Member 'BED_FSMNode_GI_Loading_WaitPsoCachePrecompileFinish_PostPropertyChanged::MemberName' has a wrong offset!");
//static_assert(offsetof(BED_FSMNode_GI_Loading_WaitPsoCachePrecompileFinish_PostPropertyChanged, PropertyName) == 0x000010, "Member 'BED_FSMNode_GI_Loading_WaitPsoCachePrecompileFinish_PostPropertyChanged::PropertyName' has a wrong offset!");

// Function b1-Managed.BED_FSMNode_GI_Loading_WaitPsoCachePrecompileFinish.GetNodeDescriptionInCS
// 0x0010 (0x0010 - 0x0000)
struct BED_FSMNode_GI_Loading_WaitPsoCachePrecompileFinish_GetNodeDescriptionInCS final
{
public:
	class FString                                 ReturnValue;                                       // 0x0000(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash)
};
//static_assert(alignof(BED_FSMNode_GI_Loading_WaitPsoCachePrecompileFinish_GetNodeDescriptionInCS) == 0x000008, "Wrong alignment on BED_FSMNode_GI_Loading_WaitPsoCachePrecompileFinish_GetNodeDescriptionInCS");
//static_assert(sizeof(BED_FSMNode_GI_Loading_WaitPsoCachePrecompileFinish_GetNodeDescriptionInCS) == 0x000010, "Wrong size on BED_FSMNode_GI_Loading_WaitPsoCachePrecompileFinish_GetNodeDescriptionInCS");
//static_assert(offsetof(BED_FSMNode_GI_Loading_WaitPsoCachePrecompileFinish_GetNodeDescriptionInCS, ReturnValue) == 0x000000, "Member 'BED_FSMNode_GI_Loading_WaitPsoCachePrecompileFinish_GetNodeDescriptionInCS::ReturnValue' has a wrong offset!");

// Function b1-Managed.BED_FSMNode_GI_Loading_WaitReplayPlayerSpawn.PostPropertyChanged
// 0x0020 (0x0020 - 0x0000)
struct BED_FSMNode_GI_Loading_WaitReplayPlayerSpawn_PostPropertyChanged final
{
public:
	class FString                                 MemberName;                                        // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash)
	class FString                                 PropertyName;                                      // 0x0010(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash)
};
//static_assert(alignof(BED_FSMNode_GI_Loading_WaitReplayPlayerSpawn_PostPropertyChanged) == 0x000008, "Wrong alignment on BED_FSMNode_GI_Loading_WaitReplayPlayerSpawn_PostPropertyChanged");
//static_assert(sizeof(BED_FSMNode_GI_Loading_WaitReplayPlayerSpawn_PostPropertyChanged) == 0x000020, "Wrong size on BED_FSMNode_GI_Loading_WaitReplayPlayerSpawn_PostPropertyChanged");
//static_assert(offsetof(BED_FSMNode_GI_Loading_WaitReplayPlayerSpawn_PostPropertyChanged, MemberName) == 0x000000, "Member 'BED_FSMNode_GI_Loading_WaitReplayPlayerSpawn_PostPropertyChanged::MemberName' has a wrong offset!");
//static_assert(offsetof(BED_FSMNode_GI_Loading_WaitReplayPlayerSpawn_PostPropertyChanged, PropertyName) == 0x000010, "Member 'BED_FSMNode_GI_Loading_WaitReplayPlayerSpawn_PostPropertyChanged::PropertyName' has a wrong offset!");

// Function b1-Managed.BED_FSMNode_GI_Loading_WaitReplayPlayerSpawn.GetNodeDescriptionInCS
// 0x0010 (0x0010 - 0x0000)
struct BED_FSMNode_GI_Loading_WaitReplayPlayerSpawn_GetNodeDescriptionInCS final
{
public:
	class FString                                 ReturnValue;                                       // 0x0000(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash)
};
//static_assert(alignof(BED_FSMNode_GI_Loading_WaitReplayPlayerSpawn_GetNodeDescriptionInCS) == 0x000008, "Wrong alignment on BED_FSMNode_GI_Loading_WaitReplayPlayerSpawn_GetNodeDescriptionInCS");
//static_assert(sizeof(BED_FSMNode_GI_Loading_WaitReplayPlayerSpawn_GetNodeDescriptionInCS) == 0x000010, "Wrong size on BED_FSMNode_GI_Loading_WaitReplayPlayerSpawn_GetNodeDescriptionInCS");
//static_assert(offsetof(BED_FSMNode_GI_Loading_WaitReplayPlayerSpawn_GetNodeDescriptionInCS, ReturnValue) == 0x000000, "Member 'BED_FSMNode_GI_Loading_WaitReplayPlayerSpawn_GetNodeDescriptionInCS::ReturnValue' has a wrong offset!");

// Function b1-Managed.BAN_GSReSetHoldShield.bIsNativeBranchingPointCS
// 0x0001 (0x0001 - 0x0000)
struct BAN_GSReSetHoldShield_bIsNativeBranchingPointCS final
{
public:
	uint8                                         ReturnValue : 1;                                   // 0x0000(0x0001)(BitIndex: 0x00, PropSize: 0x0001 (Parm, OutParm, ReturnParm, NoDestructor, HasGetValueTypeHash))
};
//static_assert(alignof(BAN_GSReSetHoldShield_bIsNativeBranchingPointCS) == 0x000001, "Wrong alignment on BAN_GSReSetHoldShield_bIsNativeBranchingPointCS");
//static_assert(sizeof(BAN_GSReSetHoldShield_bIsNativeBranchingPointCS) == 0x000001, "Wrong size on BAN_GSReSetHoldShield_bIsNativeBranchingPointCS");

// Function b1-Managed.BAN_GSReSetHoldShield.GSValidateInputCS
// 0x0008 (0x0008 - 0x0000)
struct BAN_GSReSetHoldShield_GSValidateInputCS final
{
public:
	class AActor*                                 Actor;                                             // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
//static_assert(alignof(BAN_GSReSetHoldShield_GSValidateInputCS) == 0x000008, "Wrong alignment on BAN_GSReSetHoldShield_GSValidateInputCS");
//static_assert(sizeof(BAN_GSReSetHoldShield_GSValidateInputCS) == 0x000008, "Wrong size on BAN_GSReSetHoldShield_GSValidateInputCS");
//static_assert(offsetof(BAN_GSReSetHoldShield_GSValidateInputCS, Actor) == 0x000000, "Member 'BAN_GSReSetHoldShield_GSValidateInputCS::Actor' has a wrong offset!");

// Function b1-Managed.BAN_GSReSetHoldShield.GSNotifyCS
// 0x0040 (0x0040 - 0x0000)
struct BAN_GSReSetHoldShield_GSNotifyCS final
{
public:
	struct FUStGSNotifyParam                      NotifyParam;                                       // 0x0000(0x0040)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
//static_assert(alignof(BAN_GSReSetHoldShield_GSNotifyCS) == 0x000008, "Wrong alignment on BAN_GSReSetHoldShield_GSNotifyCS");
//static_assert(sizeof(BAN_GSReSetHoldShield_GSNotifyCS) == 0x000040, "Wrong size on BAN_GSReSetHoldShield_GSNotifyCS");
//static_assert(offsetof(BAN_GSReSetHoldShield_GSNotifyCS, NotifyParam) == 0x000000, "Member 'BAN_GSReSetHoldShield_GSNotifyCS::NotifyParam' has a wrong offset!");

// Function b1-Managed.BED_FSMNode_GI_Loading_WaitStartGamePsoPrecompileFinish.PostPropertyChanged
// 0x0020 (0x0020 - 0x0000)
struct BED_FSMNode_GI_Loading_WaitStartGamePsoPrecompileFinish_PostPropertyChanged final
{
public:
	class FString                                 MemberName;                                        // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash)
	class FString                                 PropertyName;                                      // 0x0010(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash)
};
//static_assert(alignof(BED_FSMNode_GI_Loading_WaitStartGamePsoPrecompileFinish_PostPropertyChanged) == 0x000008, "Wrong alignment on BED_FSMNode_GI_Loading_WaitStartGamePsoPrecompileFinish_PostPropertyChanged");
//static_assert(sizeof(BED_FSMNode_GI_Loading_WaitStartGamePsoPrecompileFinish_PostPropertyChanged) == 0x000020, "Wrong size on BED_FSMNode_GI_Loading_WaitStartGamePsoPrecompileFinish_PostPropertyChanged");
//static_assert(offsetof(BED_FSMNode_GI_Loading_WaitStartGamePsoPrecompileFinish_PostPropertyChanged, MemberName) == 0x000000, "Member 'BED_FSMNode_GI_Loading_WaitStartGamePsoPrecompileFinish_PostPropertyChanged::MemberName' has a wrong offset!");
//static_assert(offsetof(BED_FSMNode_GI_Loading_WaitStartGamePsoPrecompileFinish_PostPropertyChanged, PropertyName) == 0x000010, "Member 'BED_FSMNode_GI_Loading_WaitStartGamePsoPrecompileFinish_PostPropertyChanged::PropertyName' has a wrong offset!");

// Function b1-Managed.BED_FSMNode_GI_Loading_WaitStartGamePsoPrecompileFinish.GetNodeDescriptionInCS
// 0x0010 (0x0010 - 0x0000)
struct BED_FSMNode_GI_Loading_WaitStartGamePsoPrecompileFinish_GetNodeDescriptionInCS final
{
public:
	class FString                                 ReturnValue;                                       // 0x0000(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash)
};
//static_assert(alignof(BED_FSMNode_GI_Loading_WaitStartGamePsoPrecompileFinish_GetNodeDescriptionInCS) == 0x000008, "Wrong alignment on BED_FSMNode_GI_Loading_WaitStartGamePsoPrecompileFinish_GetNodeDescriptionInCS");
//static_assert(sizeof(BED_FSMNode_GI_Loading_WaitStartGamePsoPrecompileFinish_GetNodeDescriptionInCS) == 0x000010, "Wrong size on BED_FSMNode_GI_Loading_WaitStartGamePsoPrecompileFinish_GetNodeDescriptionInCS");
//static_assert(offsetof(BED_FSMNode_GI_Loading_WaitStartGamePsoPrecompileFinish_GetNodeDescriptionInCS, ReturnValue) == 0x000000, "Member 'BED_FSMNode_GI_Loading_WaitStartGamePsoPrecompileFinish_GetNodeDescriptionInCS::ReturnValue' has a wrong offset!");

// Function b1-Managed.BED_FSMNode_GI_Loading_WaitTick.PostPropertyChanged
// 0x0020 (0x0020 - 0x0000)
struct BED_FSMNode_GI_Loading_WaitTick_PostPropertyChanged final
{
public:
	class FString                                 MemberName;                                        // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash)
	class FString                                 PropertyName;                                      // 0x0010(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash)
};
//static_assert(alignof(BED_FSMNode_GI_Loading_WaitTick_PostPropertyChanged) == 0x000008, "Wrong alignment on BED_FSMNode_GI_Loading_WaitTick_PostPropertyChanged");
//static_assert(sizeof(BED_FSMNode_GI_Loading_WaitTick_PostPropertyChanged) == 0x000020, "Wrong size on BED_FSMNode_GI_Loading_WaitTick_PostPropertyChanged");
//static_assert(offsetof(BED_FSMNode_GI_Loading_WaitTick_PostPropertyChanged, MemberName) == 0x000000, "Member 'BED_FSMNode_GI_Loading_WaitTick_PostPropertyChanged::MemberName' has a wrong offset!");
//static_assert(offsetof(BED_FSMNode_GI_Loading_WaitTick_PostPropertyChanged, PropertyName) == 0x000010, "Member 'BED_FSMNode_GI_Loading_WaitTick_PostPropertyChanged::PropertyName' has a wrong offset!");

// Function b1-Managed.BED_FSMNode_GI_Loading_WaitTick.GetNodeDescriptionInCS
// 0x0010 (0x0010 - 0x0000)
struct BED_FSMNode_GI_Loading_WaitTick_GetNodeDescriptionInCS final
{
public:
	class FString                                 ReturnValue;                                       // 0x0000(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash)
};
//static_assert(alignof(BED_FSMNode_GI_Loading_WaitTick_GetNodeDescriptionInCS) == 0x000008, "Wrong alignment on BED_FSMNode_GI_Loading_WaitTick_GetNodeDescriptionInCS");
//static_assert(sizeof(BED_FSMNode_GI_Loading_WaitTick_GetNodeDescriptionInCS) == 0x000010, "Wrong size on BED_FSMNode_GI_Loading_WaitTick_GetNodeDescriptionInCS");
//static_assert(offsetof(BED_FSMNode_GI_Loading_WaitTick_GetNodeDescriptionInCS, ReturnValue) == 0x000000, "Member 'BED_FSMNode_GI_Loading_WaitTick_GetNodeDescriptionInCS::ReturnValue' has a wrong offset!");

// Function b1-Managed.BANS_JumpWindow.GSNotifyBeginCS
// 0x0048 (0x0048 - 0x0000)
struct BANS_JumpWindow_GSNotifyBeginCS final
{
public:
	struct FUStGSNotifyParam                      NotifyParam;                                       // 0x0000(0x0040)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
	float                                         TotalDuration;                                     // 0x0040(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
//static_assert(alignof(BANS_JumpWindow_GSNotifyBeginCS) == 0x000008, "Wrong alignment on BANS_JumpWindow_GSNotifyBeginCS");
//static_assert(sizeof(BANS_JumpWindow_GSNotifyBeginCS) == 0x000048, "Wrong size on BANS_JumpWindow_GSNotifyBeginCS");
//static_assert(offsetof(BANS_JumpWindow_GSNotifyBeginCS, NotifyParam) == 0x000000, "Member 'BANS_JumpWindow_GSNotifyBeginCS::NotifyParam' has a wrong offset!");
//static_assert(offsetof(BANS_JumpWindow_GSNotifyBeginCS, TotalDuration) == 0x000040, "Member 'BANS_JumpWindow_GSNotifyBeginCS::TotalDuration' has a wrong offset!");

// Function b1-Managed.BANS_JumpWindow.GSNotifyTickCS
// 0x0048 (0x0048 - 0x0000)
struct BANS_JumpWindow_GSNotifyTickCS final
{
public:
	struct FUStGSNotifyParam                      NotifyParam;                                       // 0x0000(0x0040)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
	float                                         FrameDeltaTime;                                    // 0x0040(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
//static_assert(alignof(BANS_JumpWindow_GSNotifyTickCS) == 0x000008, "Wrong alignment on BANS_JumpWindow_GSNotifyTickCS");
//static_assert(sizeof(BANS_JumpWindow_GSNotifyTickCS) == 0x000048, "Wrong size on BANS_JumpWindow_GSNotifyTickCS");
//static_assert(offsetof(BANS_JumpWindow_GSNotifyTickCS, NotifyParam) == 0x000000, "Member 'BANS_JumpWindow_GSNotifyTickCS::NotifyParam' has a wrong offset!");
//static_assert(offsetof(BANS_JumpWindow_GSNotifyTickCS, FrameDeltaTime) == 0x000040, "Member 'BANS_JumpWindow_GSNotifyTickCS::FrameDeltaTime' has a wrong offset!");

// Function b1-Managed.BANS_JumpWindow.GSNotifyEndCS
// 0x0040 (0x0040 - 0x0000)
struct BANS_JumpWindow_GSNotifyEndCS final
{
public:
	struct FUStGSNotifyParam                      NotifyParam;                                       // 0x0000(0x0040)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
//static_assert(alignof(BANS_JumpWindow_GSNotifyEndCS) == 0x000008, "Wrong alignment on BANS_JumpWindow_GSNotifyEndCS");
//static_assert(sizeof(BANS_JumpWindow_GSNotifyEndCS) == 0x000040, "Wrong size on BANS_JumpWindow_GSNotifyEndCS");
//static_assert(offsetof(BANS_JumpWindow_GSNotifyEndCS, NotifyParam) == 0x000000, "Member 'BANS_JumpWindow_GSNotifyEndCS::NotifyParam' has a wrong offset!");

// Function b1-Managed.BUI_ReplayPanel.OnSliderValueChanged
// 0x0004 (0x0004 - 0x0000)
struct BUI_ReplayPanel_OnSliderValueChanged final
{
public:
	float                                         Value;                                             // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
//static_assert(alignof(BUI_ReplayPanel_OnSliderValueChanged) == 0x000004, "Wrong alignment on BUI_ReplayPanel_OnSliderValueChanged");
//static_assert(sizeof(BUI_ReplayPanel_OnSliderValueChanged) == 0x000004, "Wrong size on BUI_ReplayPanel_OnSliderValueChanged");
//static_assert(offsetof(BUI_ReplayPanel_OnSliderValueChanged, Value) == 0x000000, "Member 'BUI_ReplayPanel_OnSliderValueChanged::Value' has a wrong offset!");

// Function b1-Managed.BED_FSMNode_GI_Loading_WaitUntilGameStateInit.PostPropertyChanged
// 0x0020 (0x0020 - 0x0000)
struct BED_FSMNode_GI_Loading_WaitUntilGameStateInit_PostPropertyChanged final
{
public:
	class FString                                 MemberName;                                        // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash)
	class FString                                 PropertyName;                                      // 0x0010(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash)
};
//static_assert(alignof(BED_FSMNode_GI_Loading_WaitUntilGameStateInit_PostPropertyChanged) == 0x000008, "Wrong alignment on BED_FSMNode_GI_Loading_WaitUntilGameStateInit_PostPropertyChanged");
//static_assert(sizeof(BED_FSMNode_GI_Loading_WaitUntilGameStateInit_PostPropertyChanged) == 0x000020, "Wrong size on BED_FSMNode_GI_Loading_WaitUntilGameStateInit_PostPropertyChanged");
//static_assert(offsetof(BED_FSMNode_GI_Loading_WaitUntilGameStateInit_PostPropertyChanged, MemberName) == 0x000000, "Member 'BED_FSMNode_GI_Loading_WaitUntilGameStateInit_PostPropertyChanged::MemberName' has a wrong offset!");
//static_assert(offsetof(BED_FSMNode_GI_Loading_WaitUntilGameStateInit_PostPropertyChanged, PropertyName) == 0x000010, "Member 'BED_FSMNode_GI_Loading_WaitUntilGameStateInit_PostPropertyChanged::PropertyName' has a wrong offset!");

// Function b1-Managed.BED_FSMNode_GI_Loading_WaitUntilGameStateInit.GetNodeDescriptionInCS
// 0x0010 (0x0010 - 0x0000)
struct BED_FSMNode_GI_Loading_WaitUntilGameStateInit_GetNodeDescriptionInCS final
{
public:
	class FString                                 ReturnValue;                                       // 0x0000(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash)
};
//static_assert(alignof(BED_FSMNode_GI_Loading_WaitUntilGameStateInit_GetNodeDescriptionInCS) == 0x000008, "Wrong alignment on BED_FSMNode_GI_Loading_WaitUntilGameStateInit_GetNodeDescriptionInCS");
//static_assert(sizeof(BED_FSMNode_GI_Loading_WaitUntilGameStateInit_GetNodeDescriptionInCS) == 0x000010, "Wrong size on BED_FSMNode_GI_Loading_WaitUntilGameStateInit_GetNodeDescriptionInCS");
//static_assert(offsetof(BED_FSMNode_GI_Loading_WaitUntilGameStateInit_GetNodeDescriptionInCS, ReturnValue) == 0x000000, "Member 'BED_FSMNode_GI_Loading_WaitUntilGameStateInit_GetNodeDescriptionInCS::ReturnValue' has a wrong offset!");

// Function b1-Managed.BANS_GSTireMarks.GSNotifyBeginCS
// 0x0048 (0x0048 - 0x0000)
struct BANS_GSTireMarks_GSNotifyBeginCS final
{
public:
	struct FUStGSNotifyParam                      NotifyParam;                                       // 0x0000(0x0040)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
	float                                         TotalDuration;                                     // 0x0040(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
//static_assert(alignof(BANS_GSTireMarks_GSNotifyBeginCS) == 0x000008, "Wrong alignment on BANS_GSTireMarks_GSNotifyBeginCS");
//static_assert(sizeof(BANS_GSTireMarks_GSNotifyBeginCS) == 0x000048, "Wrong size on BANS_GSTireMarks_GSNotifyBeginCS");
//static_assert(offsetof(BANS_GSTireMarks_GSNotifyBeginCS, NotifyParam) == 0x000000, "Member 'BANS_GSTireMarks_GSNotifyBeginCS::NotifyParam' has a wrong offset!");
//static_assert(offsetof(BANS_GSTireMarks_GSNotifyBeginCS, TotalDuration) == 0x000040, "Member 'BANS_GSTireMarks_GSNotifyBeginCS::TotalDuration' has a wrong offset!");

// Function b1-Managed.BANS_GSTireMarks.GSNotifyTickCS
// 0x0048 (0x0048 - 0x0000)
struct BANS_GSTireMarks_GSNotifyTickCS final
{
public:
	struct FUStGSNotifyParam                      NotifyParam;                                       // 0x0000(0x0040)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
	float                                         FrameDeltaTime;                                    // 0x0040(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
//static_assert(alignof(BANS_GSTireMarks_GSNotifyTickCS) == 0x000008, "Wrong alignment on BANS_GSTireMarks_GSNotifyTickCS");
//static_assert(sizeof(BANS_GSTireMarks_GSNotifyTickCS) == 0x000048, "Wrong size on BANS_GSTireMarks_GSNotifyTickCS");
//static_assert(offsetof(BANS_GSTireMarks_GSNotifyTickCS, NotifyParam) == 0x000000, "Member 'BANS_GSTireMarks_GSNotifyTickCS::NotifyParam' has a wrong offset!");
//static_assert(offsetof(BANS_GSTireMarks_GSNotifyTickCS, FrameDeltaTime) == 0x000040, "Member 'BANS_GSTireMarks_GSNotifyTickCS::FrameDeltaTime' has a wrong offset!");

// Function b1-Managed.BANS_GSTireMarks.GSNotifyEndCS
// 0x0040 (0x0040 - 0x0000)
struct BANS_GSTireMarks_GSNotifyEndCS final
{
public:
	struct FUStGSNotifyParam                      NotifyParam;                                       // 0x0000(0x0040)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
//static_assert(alignof(BANS_GSTireMarks_GSNotifyEndCS) == 0x000008, "Wrong alignment on BANS_GSTireMarks_GSNotifyEndCS");
//static_assert(sizeof(BANS_GSTireMarks_GSNotifyEndCS) == 0x000040, "Wrong size on BANS_GSTireMarks_GSNotifyEndCS");
//static_assert(offsetof(BANS_GSTireMarks_GSNotifyEndCS, NotifyParam) == 0x000000, "Member 'BANS_GSTireMarks_GSNotifyEndCS::NotifyParam' has a wrong offset!");

// Function b1-Managed.BED_FSMNode_PS_TransactionAnyState.PostPropertyChanged
// 0x0020 (0x0020 - 0x0000)
struct BED_FSMNode_PS_TransactionAnyState_PostPropertyChanged final
{
public:
	class FString                                 MemberName;                                        // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash)
	class FString                                 PropertyName;                                      // 0x0010(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash)
};
//static_assert(alignof(BED_FSMNode_PS_TransactionAnyState_PostPropertyChanged) == 0x000008, "Wrong alignment on BED_FSMNode_PS_TransactionAnyState_PostPropertyChanged");
//static_assert(sizeof(BED_FSMNode_PS_TransactionAnyState_PostPropertyChanged) == 0x000020, "Wrong size on BED_FSMNode_PS_TransactionAnyState_PostPropertyChanged");
//static_assert(offsetof(BED_FSMNode_PS_TransactionAnyState_PostPropertyChanged, MemberName) == 0x000000, "Member 'BED_FSMNode_PS_TransactionAnyState_PostPropertyChanged::MemberName' has a wrong offset!");
//static_assert(offsetof(BED_FSMNode_PS_TransactionAnyState_PostPropertyChanged, PropertyName) == 0x000010, "Member 'BED_FSMNode_PS_TransactionAnyState_PostPropertyChanged::PropertyName' has a wrong offset!");

// Function b1-Managed.BED_FSMNode_PS_Transaction_TransactionTask.PostPropertyChanged
// 0x0020 (0x0020 - 0x0000)
struct BED_FSMNode_PS_Transaction_TransactionTask_PostPropertyChanged final
{
public:
	class FString                                 MemberName;                                        // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash)
	class FString                                 PropertyName;                                      // 0x0010(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash)
};
//static_assert(alignof(BED_FSMNode_PS_Transaction_TransactionTask_PostPropertyChanged) == 0x000008, "Wrong alignment on BED_FSMNode_PS_Transaction_TransactionTask_PostPropertyChanged");
//static_assert(sizeof(BED_FSMNode_PS_Transaction_TransactionTask_PostPropertyChanged) == 0x000020, "Wrong size on BED_FSMNode_PS_Transaction_TransactionTask_PostPropertyChanged");
//static_assert(offsetof(BED_FSMNode_PS_Transaction_TransactionTask_PostPropertyChanged, MemberName) == 0x000000, "Member 'BED_FSMNode_PS_Transaction_TransactionTask_PostPropertyChanged::MemberName' has a wrong offset!");
//static_assert(offsetof(BED_FSMNode_PS_Transaction_TransactionTask_PostPropertyChanged, PropertyName) == 0x000010, "Member 'BED_FSMNode_PS_Transaction_TransactionTask_PostPropertyChanged::PropertyName' has a wrong offset!");

// Function b1-Managed.BED_FSMNode_PS_Transaction_TransactionTask.GetNodeDescriptionInCS
// 0x0010 (0x0010 - 0x0000)
struct BED_FSMNode_PS_Transaction_TransactionTask_GetNodeDescriptionInCS final
{
public:
	class FString                                 ReturnValue;                                       // 0x0000(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash)
};
//static_assert(alignof(BED_FSMNode_PS_Transaction_TransactionTask_GetNodeDescriptionInCS) == 0x000008, "Wrong alignment on BED_FSMNode_PS_Transaction_TransactionTask_GetNodeDescriptionInCS");
//static_assert(sizeof(BED_FSMNode_PS_Transaction_TransactionTask_GetNodeDescriptionInCS) == 0x000010, "Wrong size on BED_FSMNode_PS_Transaction_TransactionTask_GetNodeDescriptionInCS");
//static_assert(offsetof(BED_FSMNode_PS_Transaction_TransactionTask_GetNodeDescriptionInCS, ReturnValue) == 0x000000, "Member 'BED_FSMNode_PS_Transaction_TransactionTask_GetNodeDescriptionInCS::ReturnValue' has a wrong offset!");

// Function b1-Managed.BED_GuideAsset.GetRerouteNodeClass
// 0x0008 (0x0008 - 0x0000)
struct BED_GuideAsset_GetRerouteNodeClass final
{
public:
	class UClass*                                 ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
//static_assert(alignof(BED_GuideAsset_GetRerouteNodeClass) == 0x000008, "Wrong alignment on BED_GuideAsset_GetRerouteNodeClass");
//static_assert(sizeof(BED_GuideAsset_GetRerouteNodeClass) == 0x000008, "Wrong size on BED_GuideAsset_GetRerouteNodeClass");
//static_assert(offsetof(BED_GuideAsset_GetRerouteNodeClass, ReturnValue) == 0x000000, "Member 'BED_GuideAsset_GetRerouteNodeClass::ReturnValue' has a wrong offset!");

// Function b1-Managed.BED_GuideAsset.GetStartNodeClass
// 0x0008 (0x0008 - 0x0000)
struct BED_GuideAsset_GetStartNodeClass final
{
public:
	class UClass*                                 ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
//static_assert(alignof(BED_GuideAsset_GetStartNodeClass) == 0x000008, "Wrong alignment on BED_GuideAsset_GetStartNodeClass");
//static_assert(sizeof(BED_GuideAsset_GetStartNodeClass) == 0x000008, "Wrong size on BED_GuideAsset_GetStartNodeClass");
//static_assert(offsetof(BED_GuideAsset_GetStartNodeClass, ReturnValue) == 0x000000, "Member 'BED_GuideAsset_GetStartNodeClass::ReturnValue' has a wrong offset!");

// Function b1-Managed.BED_GuideAsset.GetViewType
// 0x0001 (0x0001 - 0x0000)
struct BED_GuideAsset_GetViewType final
{
public:
	ECalliopeViewType                             ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
//static_assert(alignof(BED_GuideAsset_GetViewType) == 0x000001, "Wrong alignment on BED_GuideAsset_GetViewType");
//static_assert(sizeof(BED_GuideAsset_GetViewType) == 0x000001, "Wrong size on BED_GuideAsset_GetViewType");
//static_assert(offsetof(BED_GuideAsset_GetViewType, ReturnValue) == 0x000000, "Member 'BED_GuideAsset_GetViewType::ReturnValue' has a wrong offset!");

// Function b1-Managed.BANS_GSTriggerSkillCam.GSValidateInputCS
// 0x0008 (0x0008 - 0x0000)
struct BANS_GSTriggerSkillCam_GSValidateInputCS final
{
public:
	class AActor*                                 Actor;                                             // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
//static_assert(alignof(BANS_GSTriggerSkillCam_GSValidateInputCS) == 0x000008, "Wrong alignment on BANS_GSTriggerSkillCam_GSValidateInputCS");
//static_assert(sizeof(BANS_GSTriggerSkillCam_GSValidateInputCS) == 0x000008, "Wrong size on BANS_GSTriggerSkillCam_GSValidateInputCS");
//static_assert(offsetof(BANS_GSTriggerSkillCam_GSValidateInputCS, Actor) == 0x000000, "Member 'BANS_GSTriggerSkillCam_GSValidateInputCS::Actor' has a wrong offset!");

// Function b1-Managed.BANS_GSTriggerSkillCam.GSNotifyBeginCS
// 0x0048 (0x0048 - 0x0000)
struct BANS_GSTriggerSkillCam_GSNotifyBeginCS final
{
public:
	struct FUStGSNotifyParam                      NotifyParam;                                       // 0x0000(0x0040)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
	float                                         TotalDuration;                                     // 0x0040(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
//static_assert(alignof(BANS_GSTriggerSkillCam_GSNotifyBeginCS) == 0x000008, "Wrong alignment on BANS_GSTriggerSkillCam_GSNotifyBeginCS");
//static_assert(sizeof(BANS_GSTriggerSkillCam_GSNotifyBeginCS) == 0x000048, "Wrong size on BANS_GSTriggerSkillCam_GSNotifyBeginCS");
//static_assert(offsetof(BANS_GSTriggerSkillCam_GSNotifyBeginCS, NotifyParam) == 0x000000, "Member 'BANS_GSTriggerSkillCam_GSNotifyBeginCS::NotifyParam' has a wrong offset!");
//static_assert(offsetof(BANS_GSTriggerSkillCam_GSNotifyBeginCS, TotalDuration) == 0x000040, "Member 'BANS_GSTriggerSkillCam_GSNotifyBeginCS::TotalDuration' has a wrong offset!");

// Function b1-Managed.BANS_GSTriggerSkillCam.GSNotifyTickCS
// 0x0048 (0x0048 - 0x0000)
struct BANS_GSTriggerSkillCam_GSNotifyTickCS final
{
public:
	struct FUStGSNotifyParam                      NotifyParam;                                       // 0x0000(0x0040)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
	float                                         FrameDeltaTime;                                    // 0x0040(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
//static_assert(alignof(BANS_GSTriggerSkillCam_GSNotifyTickCS) == 0x000008, "Wrong alignment on BANS_GSTriggerSkillCam_GSNotifyTickCS");
//static_assert(sizeof(BANS_GSTriggerSkillCam_GSNotifyTickCS) == 0x000048, "Wrong size on BANS_GSTriggerSkillCam_GSNotifyTickCS");
//static_assert(offsetof(BANS_GSTriggerSkillCam_GSNotifyTickCS, NotifyParam) == 0x000000, "Member 'BANS_GSTriggerSkillCam_GSNotifyTickCS::NotifyParam' has a wrong offset!");
//static_assert(offsetof(BANS_GSTriggerSkillCam_GSNotifyTickCS, FrameDeltaTime) == 0x000040, "Member 'BANS_GSTriggerSkillCam_GSNotifyTickCS::FrameDeltaTime' has a wrong offset!");

// Function b1-Managed.BANS_GSTriggerSkillCam.GSNotifyEndCS
// 0x0040 (0x0040 - 0x0000)
struct BANS_GSTriggerSkillCam_GSNotifyEndCS final
{
public:
	struct FUStGSNotifyParam                      NotifyParam;                                       // 0x0000(0x0040)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
//static_assert(alignof(BANS_GSTriggerSkillCam_GSNotifyEndCS) == 0x000008, "Wrong alignment on BANS_GSTriggerSkillCam_GSNotifyEndCS");
//static_assert(sizeof(BANS_GSTriggerSkillCam_GSNotifyEndCS) == 0x000040, "Wrong size on BANS_GSTriggerSkillCam_GSNotifyEndCS");
//static_assert(offsetof(BANS_GSTriggerSkillCam_GSNotifyEndCS, NotifyParam) == 0x000000, "Member 'BANS_GSTriggerSkillCam_GSNotifyEndCS::NotifyParam' has a wrong offset!");

// Function b1-Managed.BED_GuideNode_Listener.GetContextOutputsInCS
// 0x0010 (0x0010 - 0x0000)
struct BED_GuideNode_Listener_GetContextOutputsInCS final
{
public:
	TArray<class FName>                           ReturnValue;                                       // 0x0000(0x0010)(Parm, OutParm, ReturnParm)
};
//static_assert(alignof(BED_GuideNode_Listener_GetContextOutputsInCS) == 0x000008, "Wrong alignment on BED_GuideNode_Listener_GetContextOutputsInCS");
//static_assert(sizeof(BED_GuideNode_Listener_GetContextOutputsInCS) == 0x000010, "Wrong size on BED_GuideNode_Listener_GetContextOutputsInCS");
//static_assert(offsetof(BED_GuideNode_Listener_GetContextOutputsInCS, ReturnValue) == 0x000000, "Member 'BED_GuideNode_Listener_GetContextOutputsInCS::ReturnValue' has a wrong offset!");

// Function b1-Managed.BGUFuncLibProjectile.GetAllProjectileBPPathFromDesc_without_C
// 0x0010 (0x0010 - 0x0000)
struct BGUFuncLibProjectile_GetAllProjectileBPPathFromDesc_without_C final
{
public:
	TArray<class FString>                         CurrentUsedBPPath;                                 // 0x0000(0x0010)(Parm, OutParm)
};
//static_assert(alignof(BGUFuncLibProjectile_GetAllProjectileBPPathFromDesc_without_C) == 0x000008, "Wrong alignment on BGUFuncLibProjectile_GetAllProjectileBPPathFromDesc_without_C");
//static_assert(sizeof(BGUFuncLibProjectile_GetAllProjectileBPPathFromDesc_without_C) == 0x000010, "Wrong size on BGUFuncLibProjectile_GetAllProjectileBPPathFromDesc_without_C");
//static_assert(offsetof(BGUFuncLibProjectile_GetAllProjectileBPPathFromDesc_without_C, CurrentUsedBPPath) == 0x000000, "Member 'BGUFuncLibProjectile_GetAllProjectileBPPathFromDesc_without_C::CurrentUsedBPPath' has a wrong offset!");

// Function b1-Managed.BGUFuncLibProjectile.GetAllProjectileBPPathFromDesc_with_C
// 0x0010 (0x0010 - 0x0000)
struct BGUFuncLibProjectile_GetAllProjectileBPPathFromDesc_with_C final
{
public:
	TArray<class FString>                         CurrentUsedBPPath;                                 // 0x0000(0x0010)(Parm, OutParm)
};
//static_assert(alignof(BGUFuncLibProjectile_GetAllProjectileBPPathFromDesc_with_C) == 0x000008, "Wrong alignment on BGUFuncLibProjectile_GetAllProjectileBPPathFromDesc_with_C");
//static_assert(sizeof(BGUFuncLibProjectile_GetAllProjectileBPPathFromDesc_with_C) == 0x000010, "Wrong size on BGUFuncLibProjectile_GetAllProjectileBPPathFromDesc_with_C");
//static_assert(offsetof(BGUFuncLibProjectile_GetAllProjectileBPPathFromDesc_with_C, CurrentUsedBPPath) == 0x000000, "Member 'BGUFuncLibProjectile_GetAllProjectileBPPathFromDesc_with_C::CurrentUsedBPPath' has a wrong offset!");

// Function b1-Managed.BGUFuncLibProjectile.ProjectileAssetMoveCompToBP_Single
// 0x0028 (0x0028 - 0x0000)
struct BGUFuncLibProjectile_ProjectileAssetMoveCompToBP_Single final
{
public:
	class ABGUProjectileBaseActor*                ProjectileBaseActor_CDO;                           // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UBlueprint*                             BP;                                                // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class FString                                 ErrorLog;                                          // 0x0010(0x0010)(Parm, OutParm, ZeroConstructor, HasGetValueTypeHash)
	uint8                                         bNeedLoadData : 1;                                 // 0x0020(0x0001)(BitIndex: 0x00, PropSize: 0x0001 (Parm, NoDestructor, HasGetValueTypeHash))
};
//static_assert(alignof(BGUFuncLibProjectile_ProjectileAssetMoveCompToBP_Single) == 0x000008, "Wrong alignment on BGUFuncLibProjectile_ProjectileAssetMoveCompToBP_Single");
//static_assert(sizeof(BGUFuncLibProjectile_ProjectileAssetMoveCompToBP_Single) == 0x000028, "Wrong size on BGUFuncLibProjectile_ProjectileAssetMoveCompToBP_Single");
//static_assert(offsetof(BGUFuncLibProjectile_ProjectileAssetMoveCompToBP_Single, ProjectileBaseActor_CDO) == 0x000000, "Member 'BGUFuncLibProjectile_ProjectileAssetMoveCompToBP_Single::ProjectileBaseActor_CDO' has a wrong offset!");
//static_assert(offsetof(BGUFuncLibProjectile_ProjectileAssetMoveCompToBP_Single, BP) == 0x000008, "Member 'BGUFuncLibProjectile_ProjectileAssetMoveCompToBP_Single::BP' has a wrong offset!");
//static_assert(offsetof(BGUFuncLibProjectile_ProjectileAssetMoveCompToBP_Single, ErrorLog) == 0x000010, "Member 'BGUFuncLibProjectile_ProjectileAssetMoveCompToBP_Single::ErrorLog' has a wrong offset!");

// Function b1-Managed.BGUFuncLibProjectile.ProjectileAssetMoveCompToBP_Full
// 0x0010 (0x0010 - 0x0000)
struct BGUFuncLibProjectile_ProjectileAssetMoveCompToBP_Full final
{
public:
	class FString                                 ErrorLog;                                          // 0x0000(0x0010)(Parm, OutParm, ZeroConstructor, HasGetValueTypeHash)
};
//static_assert(alignof(BGUFuncLibProjectile_ProjectileAssetMoveCompToBP_Full) == 0x000008, "Wrong alignment on BGUFuncLibProjectile_ProjectileAssetMoveCompToBP_Full");
//static_assert(sizeof(BGUFuncLibProjectile_ProjectileAssetMoveCompToBP_Full) == 0x000010, "Wrong size on BGUFuncLibProjectile_ProjectileAssetMoveCompToBP_Full");
//static_assert(offsetof(BGUFuncLibProjectile_ProjectileAssetMoveCompToBP_Full, ErrorLog) == 0x000000, "Member 'BGUFuncLibProjectile_ProjectileAssetMoveCompToBP_Full::ErrorLog' has a wrong offset!");

// Function b1-Managed.BGUFuncLibProjectile.CreateInteractCompForProjectile
// 0x0028 (0x0028 - 0x0000)
struct BGUFuncLibProjectile_CreateInteractCompForProjectile final
{
public:
	class ABGUProjectileBaseActor*                ProjectileBaseActor_CDO;                           // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UBlueprint*                             BP;                                                // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class FString                                 ErrorLog;                                          // 0x0010(0x0010)(Parm, OutParm, ZeroConstructor, HasGetValueTypeHash)
	uint8                                         ReturnValue : 1;                                   // 0x0020(0x0001)(BitIndex: 0x00, PropSize: 0x0001 (Parm, OutParm, ReturnParm, NoDestructor, HasGetValueTypeHash))
};
//static_assert(alignof(BGUFuncLibProjectile_CreateInteractCompForProjectile) == 0x000008, "Wrong alignment on BGUFuncLibProjectile_CreateInteractCompForProjectile");
//static_assert(sizeof(BGUFuncLibProjectile_CreateInteractCompForProjectile) == 0x000028, "Wrong size on BGUFuncLibProjectile_CreateInteractCompForProjectile");
//static_assert(offsetof(BGUFuncLibProjectile_CreateInteractCompForProjectile, ProjectileBaseActor_CDO) == 0x000000, "Member 'BGUFuncLibProjectile_CreateInteractCompForProjectile::ProjectileBaseActor_CDO' has a wrong offset!");
//static_assert(offsetof(BGUFuncLibProjectile_CreateInteractCompForProjectile, BP) == 0x000008, "Member 'BGUFuncLibProjectile_CreateInteractCompForProjectile::BP' has a wrong offset!");
//static_assert(offsetof(BGUFuncLibProjectile_CreateInteractCompForProjectile, ErrorLog) == 0x000010, "Member 'BGUFuncLibProjectile_CreateInteractCompForProjectile::ErrorLog' has a wrong offset!");

// Function b1-Managed.BGUFuncLibProjectile.CheckEffectsUsedInBulletExpand
// 0x0010 (0x0010 - 0x0000)
struct BGUFuncLibProjectile_CheckEffectsUsedInBulletExpand final
{
public:
	class FString                                 ReturnValue;                                       // 0x0000(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash)
};
//static_assert(alignof(BGUFuncLibProjectile_CheckEffectsUsedInBulletExpand) == 0x000008, "Wrong alignment on BGUFuncLibProjectile_CheckEffectsUsedInBulletExpand");
//static_assert(sizeof(BGUFuncLibProjectile_CheckEffectsUsedInBulletExpand) == 0x000010, "Wrong size on BGUFuncLibProjectile_CheckEffectsUsedInBulletExpand");
//static_assert(offsetof(BGUFuncLibProjectile_CheckEffectsUsedInBulletExpand, ReturnValue) == 0x000000, "Member 'BGUFuncLibProjectile_CheckEffectsUsedInBulletExpand::ReturnValue' has a wrong offset!");

// Function b1-Managed.BGUFuncLibProjectile.ModifyProjectileCheckShapeType
// 0x0030 (0x0030 - 0x0000)
struct BGUFuncLibProjectile_ModifyProjectileCheckShapeType final
{
public:
	class ABGUProjectileBaseActor*                ProjectileBaseActor_CDO;                           // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UBlueprint*                             BP;                                                // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	EProjectileCheckShapeType                     CheckShape;                                        // 0x0010(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_11[0x7];                                       // 0x0011(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 ErrorLog;                                          // 0x0018(0x0010)(Parm, OutParm, ZeroConstructor, HasGetValueTypeHash)
	uint8                                         ReturnValue : 1;                                   // 0x0028(0x0001)(BitIndex: 0x00, PropSize: 0x0001 (Parm, OutParm, ReturnParm, NoDestructor, HasGetValueTypeHash))
};
//static_assert(alignof(BGUFuncLibProjectile_ModifyProjectileCheckShapeType) == 0x000008, "Wrong alignment on BGUFuncLibProjectile_ModifyProjectileCheckShapeType");
//static_assert(sizeof(BGUFuncLibProjectile_ModifyProjectileCheckShapeType) == 0x000030, "Wrong size on BGUFuncLibProjectile_ModifyProjectileCheckShapeType");
//static_assert(offsetof(BGUFuncLibProjectile_ModifyProjectileCheckShapeType, ProjectileBaseActor_CDO) == 0x000000, "Member 'BGUFuncLibProjectile_ModifyProjectileCheckShapeType::ProjectileBaseActor_CDO' has a wrong offset!");
//static_assert(offsetof(BGUFuncLibProjectile_ModifyProjectileCheckShapeType, BP) == 0x000008, "Member 'BGUFuncLibProjectile_ModifyProjectileCheckShapeType::BP' has a wrong offset!");
//static_assert(offsetof(BGUFuncLibProjectile_ModifyProjectileCheckShapeType, CheckShape) == 0x000010, "Member 'BGUFuncLibProjectile_ModifyProjectileCheckShapeType::CheckShape' has a wrong offset!");
//static_assert(offsetof(BGUFuncLibProjectile_ModifyProjectileCheckShapeType, ErrorLog) == 0x000018, "Member 'BGUFuncLibProjectile_ModifyProjectileCheckShapeType::ErrorLog' has a wrong offset!");

// Function b1-Managed.BGUFuncLibProjectile.CreateCheckCompForProjectile
// 0x0030 (0x0030 - 0x0000)
struct BGUFuncLibProjectile_CreateCheckCompForProjectile final
{
public:
	class ABGUProjectileBaseActor*                ProjectileBaseActor_CDO;                           // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UBlueprint*                             BP;                                                // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	EProjectileCheckShapeType                     CheckShape;                                        // 0x0010(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_11[0x7];                                       // 0x0011(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 ErrorLog;                                          // 0x0018(0x0010)(Parm, OutParm, ZeroConstructor, HasGetValueTypeHash)
	uint8                                         bNeedLoadData : 1;                                 // 0x0028(0x0001)(BitIndex: 0x00, PropSize: 0x0001 (Parm, NoDestructor, HasGetValueTypeHash))
	uint8                                         BitPad_28_1 : 7;                                   // 0x0028(0x0001)(Fixing Bit-Field Size For New Byte [ Dumper-7 ])
	uint8                                         ReturnValue : 1;                                   // 0x0029(0x0001)(BitIndex: 0x00, PropSize: 0x0001 (Parm, OutParm, ReturnParm, NoDestructor, HasGetValueTypeHash))
};
//static_assert(alignof(BGUFuncLibProjectile_CreateCheckCompForProjectile) == 0x000008, "Wrong alignment on BGUFuncLibProjectile_CreateCheckCompForProjectile");
//static_assert(sizeof(BGUFuncLibProjectile_CreateCheckCompForProjectile) == 0x000030, "Wrong size on BGUFuncLibProjectile_CreateCheckCompForProjectile");
//static_assert(offsetof(BGUFuncLibProjectile_CreateCheckCompForProjectile, ProjectileBaseActor_CDO) == 0x000000, "Member 'BGUFuncLibProjectile_CreateCheckCompForProjectile::ProjectileBaseActor_CDO' has a wrong offset!");
//static_assert(offsetof(BGUFuncLibProjectile_CreateCheckCompForProjectile, BP) == 0x000008, "Member 'BGUFuncLibProjectile_CreateCheckCompForProjectile::BP' has a wrong offset!");
//static_assert(offsetof(BGUFuncLibProjectile_CreateCheckCompForProjectile, CheckShape) == 0x000010, "Member 'BGUFuncLibProjectile_CreateCheckCompForProjectile::CheckShape' has a wrong offset!");
//static_assert(offsetof(BGUFuncLibProjectile_CreateCheckCompForProjectile, ErrorLog) == 0x000018, "Member 'BGUFuncLibProjectile_CreateCheckCompForProjectile::ErrorLog' has a wrong offset!");

// Function b1-Managed.BGUFuncLibProjectile.ProjectileAssetCheck_Single
// 0x0020 (0x0020 - 0x0000)
struct BGUFuncLibProjectile_ProjectileAssetCheck_Single final
{
public:
	class ABGUProjectileBaseActor*                ProjectileBaseActor_CDO;                           // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class FString                                 ErrorLog;                                          // 0x0008(0x0010)(Parm, OutParm, ZeroConstructor, HasGetValueTypeHash)
	uint8                                         bNeedLoadData : 1;                                 // 0x0018(0x0001)(BitIndex: 0x00, PropSize: 0x0001 (Parm, NoDestructor, HasGetValueTypeHash))
	uint8                                         BitPad_18_1 : 7;                                   // 0x0018(0x0001)(Fixing Bit-Field Size For New Byte [ Dumper-7 ])
	uint8                                         ReturnValue : 1;                                   // 0x0019(0x0001)(BitIndex: 0x00, PropSize: 0x0001 (Parm, OutParm, ReturnParm, NoDestructor, HasGetValueTypeHash))
};
//static_assert(alignof(BGUFuncLibProjectile_ProjectileAssetCheck_Single) == 0x000008, "Wrong alignment on BGUFuncLibProjectile_ProjectileAssetCheck_Single");
//static_assert(sizeof(BGUFuncLibProjectile_ProjectileAssetCheck_Single) == 0x000020, "Wrong size on BGUFuncLibProjectile_ProjectileAssetCheck_Single");
//static_assert(offsetof(BGUFuncLibProjectile_ProjectileAssetCheck_Single, ProjectileBaseActor_CDO) == 0x000000, "Member 'BGUFuncLibProjectile_ProjectileAssetCheck_Single::ProjectileBaseActor_CDO' has a wrong offset!");
//static_assert(offsetof(BGUFuncLibProjectile_ProjectileAssetCheck_Single, ErrorLog) == 0x000008, "Member 'BGUFuncLibProjectile_ProjectileAssetCheck_Single::ErrorLog' has a wrong offset!");

// Function b1-Managed.BGUFuncLibProjectile.ProjectileAssetCheck_Full
// 0x0028 (0x0028 - 0x0000)
struct BGUFuncLibProjectile_ProjectileAssetCheck_Full final
{
public:
	class FString                                 ErrorLog;                                          // 0x0000(0x0010)(Parm, OutParm, ZeroConstructor, HasGetValueTypeHash)
	TArray<class FString>                         MarkDirtyList;                                     // 0x0010(0x0010)(Parm, OutParm)
	uint8                                         ReturnValue : 1;                                   // 0x0020(0x0001)(BitIndex: 0x00, PropSize: 0x0001 (Parm, OutParm, ReturnParm, NoDestructor, HasGetValueTypeHash))
};
//static_assert(alignof(BGUFuncLibProjectile_ProjectileAssetCheck_Full) == 0x000008, "Wrong alignment on BGUFuncLibProjectile_ProjectileAssetCheck_Full");
//static_assert(sizeof(BGUFuncLibProjectile_ProjectileAssetCheck_Full) == 0x000028, "Wrong size on BGUFuncLibProjectile_ProjectileAssetCheck_Full");
//static_assert(offsetof(BGUFuncLibProjectile_ProjectileAssetCheck_Full, ErrorLog) == 0x000000, "Member 'BGUFuncLibProjectile_ProjectileAssetCheck_Full::ErrorLog' has a wrong offset!");
//static_assert(offsetof(BGUFuncLibProjectile_ProjectileAssetCheck_Full, MarkDirtyList) == 0x000010, "Member 'BGUFuncLibProjectile_ProjectileAssetCheck_Full::MarkDirtyList' has a wrong offset!");

// Function b1-Managed.BGUFuncLibProjectile.CheckBuffDispUsedInBullet
// 0x0010 (0x0010 - 0x0000)
struct BGUFuncLibProjectile_CheckBuffDispUsedInBullet final
{
public:
	TArray<int32>                                 ReturnValue;                                       // 0x0000(0x0010)(Parm, OutParm, ReturnParm)
};
//static_assert(alignof(BGUFuncLibProjectile_CheckBuffDispUsedInBullet) == 0x000008, "Wrong alignment on BGUFuncLibProjectile_CheckBuffDispUsedInBullet");
//static_assert(sizeof(BGUFuncLibProjectile_CheckBuffDispUsedInBullet) == 0x000010, "Wrong size on BGUFuncLibProjectile_CheckBuffDispUsedInBullet");
//static_assert(offsetof(BGUFuncLibProjectile_CheckBuffDispUsedInBullet, ReturnValue) == 0x000000, "Member 'BGUFuncLibProjectile_CheckBuffDispUsedInBullet::ReturnValue' has a wrong offset!");

// Function b1-Managed.BGUFuncLibProjectile.FindProjectileAboutFlame
// 0x0018 (0x0018 - 0x0000)
struct BGUFuncLibProjectile_FindProjectileAboutFlame final
{
public:
	class FString                                 ErrorLog;                                          // 0x0000(0x0010)(Parm, OutParm, ZeroConstructor, HasGetValueTypeHash)
	uint8                                         ReturnValue : 1;                                   // 0x0010(0x0001)(BitIndex: 0x00, PropSize: 0x0001 (Parm, OutParm, ReturnParm, NoDestructor, HasGetValueTypeHash))
};
//static_assert(alignof(BGUFuncLibProjectile_FindProjectileAboutFlame) == 0x000008, "Wrong alignment on BGUFuncLibProjectile_FindProjectileAboutFlame");
//static_assert(sizeof(BGUFuncLibProjectile_FindProjectileAboutFlame) == 0x000018, "Wrong size on BGUFuncLibProjectile_FindProjectileAboutFlame");
//static_assert(offsetof(BGUFuncLibProjectile_FindProjectileAboutFlame, ErrorLog) == 0x000000, "Member 'BGUFuncLibProjectile_FindProjectileAboutFlame::ErrorLog' has a wrong offset!");

// Function b1-Managed.BGUFuncLibProjectile.CheckOutAllProjectileBP
// 0x0018 (0x0018 - 0x0000)
struct BGUFuncLibProjectile_CheckOutAllProjectileBP final
{
public:
	class FString                                 CheckOutMap;                                       // 0x0000(0x0010)(Parm, OutParm, ZeroConstructor, HasGetValueTypeHash)
	uint8                                         ReturnValue : 1;                                   // 0x0010(0x0001)(BitIndex: 0x00, PropSize: 0x0001 (Parm, OutParm, ReturnParm, NoDestructor, HasGetValueTypeHash))
};
//static_assert(alignof(BGUFuncLibProjectile_CheckOutAllProjectileBP) == 0x000008, "Wrong alignment on BGUFuncLibProjectile_CheckOutAllProjectileBP");
//static_assert(sizeof(BGUFuncLibProjectile_CheckOutAllProjectileBP) == 0x000018, "Wrong size on BGUFuncLibProjectile_CheckOutAllProjectileBP");
//static_assert(offsetof(BGUFuncLibProjectile_CheckOutAllProjectileBP, CheckOutMap) == 0x000000, "Member 'BGUFuncLibProjectile_CheckOutAllProjectileBP::CheckOutMap' has a wrong offset!");

// Function b1-Managed.BGUFuncLibProjectile.CheckBuffUsedInBullet
// 0x0010 (0x0010 - 0x0000)
struct BGUFuncLibProjectile_CheckBuffUsedInBullet final
{
public:
	TArray<int32>                                 ReturnValue;                                       // 0x0000(0x0010)(Parm, OutParm, ReturnParm)
};
//static_assert(alignof(BGUFuncLibProjectile_CheckBuffUsedInBullet) == 0x000008, "Wrong alignment on BGUFuncLibProjectile_CheckBuffUsedInBullet");
//static_assert(sizeof(BGUFuncLibProjectile_CheckBuffUsedInBullet) == 0x000010, "Wrong size on BGUFuncLibProjectile_CheckBuffUsedInBullet");
//static_assert(offsetof(BGUFuncLibProjectile_CheckBuffUsedInBullet, ReturnValue) == 0x000000, "Member 'BGUFuncLibProjectile_CheckBuffUsedInBullet::ReturnValue' has a wrong offset!");

// Function b1-Managed.BGUFuncLibProjectile.CheckCompHasChildComp
// 0x0010 (0x0010 - 0x0000)
struct BGUFuncLibProjectile_CheckCompHasChildComp final
{
public:
	TArray<class FString>                         ErrorBPPathList;                                   // 0x0000(0x0010)(Parm, OutParm)
};
//static_assert(alignof(BGUFuncLibProjectile_CheckCompHasChildComp) == 0x000008, "Wrong alignment on BGUFuncLibProjectile_CheckCompHasChildComp");
//static_assert(sizeof(BGUFuncLibProjectile_CheckCompHasChildComp) == 0x000010, "Wrong size on BGUFuncLibProjectile_CheckCompHasChildComp");
//static_assert(offsetof(BGUFuncLibProjectile_CheckCompHasChildComp, ErrorBPPathList) == 0x000000, "Member 'BGUFuncLibProjectile_CheckCompHasChildComp::ErrorBPPathList' has a wrong offset!");

// Function b1-Managed.BGUFuncLibProjectile.GetCtrProjectileByID
// 0x0018 (0x0018 - 0x0000)
struct BGUFuncLibProjectile_GetCtrProjectileByID final
{
public:
	class ABGUCharacterCS*                        CurCharacter;                                      // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         ProjectileID;                                      // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class AActor*                                 ReturnValue;                                       // 0x0010(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
//static_assert(alignof(BGUFuncLibProjectile_GetCtrProjectileByID) == 0x000008, "Wrong alignment on BGUFuncLibProjectile_GetCtrProjectileByID");
//static_assert(sizeof(BGUFuncLibProjectile_GetCtrProjectileByID) == 0x000018, "Wrong size on BGUFuncLibProjectile_GetCtrProjectileByID");
//static_assert(offsetof(BGUFuncLibProjectile_GetCtrProjectileByID, CurCharacter) == 0x000000, "Member 'BGUFuncLibProjectile_GetCtrProjectileByID::CurCharacter' has a wrong offset!");
//static_assert(offsetof(BGUFuncLibProjectile_GetCtrProjectileByID, ProjectileID) == 0x000008, "Member 'BGUFuncLibProjectile_GetCtrProjectileByID::ProjectileID' has a wrong offset!");
//static_assert(offsetof(BGUFuncLibProjectile_GetCtrProjectileByID, ReturnValue) == 0x000010, "Member 'BGUFuncLibProjectile_GetCtrProjectileByID::ReturnValue' has a wrong offset!");

// Function b1-Managed.BGUFuncLibProjectile.GetBuffEffectTypes
// 0x0018 (0x0018 - 0x0000)
struct BGUFuncLibProjectile_GetBuffEffectTypes final
{
public:
	int32                                         BuffID;                                            // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_4[0x4];                                        // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<EBuffAndSkillEffectType>               ReturnValue;                                       // 0x0008(0x0010)(Parm, OutParm, ReturnParm)
};
//static_assert(alignof(BGUFuncLibProjectile_GetBuffEffectTypes) == 0x000008, "Wrong alignment on BGUFuncLibProjectile_GetBuffEffectTypes");
//static_assert(sizeof(BGUFuncLibProjectile_GetBuffEffectTypes) == 0x000018, "Wrong size on BGUFuncLibProjectile_GetBuffEffectTypes");
//static_assert(offsetof(BGUFuncLibProjectile_GetBuffEffectTypes, BuffID) == 0x000000, "Member 'BGUFuncLibProjectile_GetBuffEffectTypes::BuffID' has a wrong offset!");
//static_assert(offsetof(BGUFuncLibProjectile_GetBuffEffectTypes, ReturnValue) == 0x000008, "Member 'BGUFuncLibProjectile_GetBuffEffectTypes::ReturnValue' has a wrong offset!");

// Function b1-Managed.BGUFuncLibProjectile.GetProjectileType
// 0x0008 (0x0008 - 0x0000)
struct BGUFuncLibProjectile_GetProjectileType final
{
public:
	int32                                         ProjectileID;                                      // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         ReturnValue;                                       // 0x0004(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
//static_assert(alignof(BGUFuncLibProjectile_GetProjectileType) == 0x000004, "Wrong alignment on BGUFuncLibProjectile_GetProjectileType");
//static_assert(sizeof(BGUFuncLibProjectile_GetProjectileType) == 0x000008, "Wrong size on BGUFuncLibProjectile_GetProjectileType");
//static_assert(offsetof(BGUFuncLibProjectile_GetProjectileType, ProjectileID) == 0x000000, "Member 'BGUFuncLibProjectile_GetProjectileType::ProjectileID' has a wrong offset!");
//static_assert(offsetof(BGUFuncLibProjectile_GetProjectileType, ReturnValue) == 0x000004, "Member 'BGUFuncLibProjectile_GetProjectileType::ReturnValue' has a wrong offset!");

// Function b1-Managed.BED_GuideNode_Mark.GetNodeDescriptionInCS
// 0x0010 (0x0010 - 0x0000)
struct BED_GuideNode_Mark_GetNodeDescriptionInCS final
{
public:
	class FString                                 ReturnValue;                                       // 0x0000(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash)
};
//static_assert(alignof(BED_GuideNode_Mark_GetNodeDescriptionInCS) == 0x000008, "Wrong alignment on BED_GuideNode_Mark_GetNodeDescriptionInCS");
//static_assert(sizeof(BED_GuideNode_Mark_GetNodeDescriptionInCS) == 0x000010, "Wrong size on BED_GuideNode_Mark_GetNodeDescriptionInCS");
//static_assert(offsetof(BED_GuideNode_Mark_GetNodeDescriptionInCS, ReturnValue) == 0x000000, "Member 'BED_GuideNode_Mark_GetNodeDescriptionInCS::ReturnValue' has a wrong offset!");

// Function b1-Managed.BED_MovieNode_Delay.GetNodeDescriptionInCS
// 0x0010 (0x0010 - 0x0000)
struct BED_MovieNode_Delay_GetNodeDescriptionInCS final
{
public:
	class FString                                 ReturnValue;                                       // 0x0000(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash)
};
//static_assert(alignof(BED_MovieNode_Delay_GetNodeDescriptionInCS) == 0x000008, "Wrong alignment on BED_MovieNode_Delay_GetNodeDescriptionInCS");
//static_assert(sizeof(BED_MovieNode_Delay_GetNodeDescriptionInCS) == 0x000010, "Wrong size on BED_MovieNode_Delay_GetNodeDescriptionInCS");
//static_assert(offsetof(BED_MovieNode_Delay_GetNodeDescriptionInCS, ReturnValue) == 0x000000, "Member 'BED_MovieNode_Delay_GetNodeDescriptionInCS::ReturnValue' has a wrong offset!");

// Function b1-Managed.BANS_GSRebirthPointInteract.GSNotifyBeginCS
// 0x0048 (0x0048 - 0x0000)
struct BANS_GSRebirthPointInteract_GSNotifyBeginCS final
{
public:
	struct FUStGSNotifyParam                      NotifyParam;                                       // 0x0000(0x0040)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
	float                                         TotalDuration;                                     // 0x0040(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
//static_assert(alignof(BANS_GSRebirthPointInteract_GSNotifyBeginCS) == 0x000008, "Wrong alignment on BANS_GSRebirthPointInteract_GSNotifyBeginCS");
//static_assert(sizeof(BANS_GSRebirthPointInteract_GSNotifyBeginCS) == 0x000048, "Wrong size on BANS_GSRebirthPointInteract_GSNotifyBeginCS");
//static_assert(offsetof(BANS_GSRebirthPointInteract_GSNotifyBeginCS, NotifyParam) == 0x000000, "Member 'BANS_GSRebirthPointInteract_GSNotifyBeginCS::NotifyParam' has a wrong offset!");
//static_assert(offsetof(BANS_GSRebirthPointInteract_GSNotifyBeginCS, TotalDuration) == 0x000040, "Member 'BANS_GSRebirthPointInteract_GSNotifyBeginCS::TotalDuration' has a wrong offset!");

// Function b1-Managed.BANS_GSRebirthPointInteract.GSNotifyTickCS
// 0x0048 (0x0048 - 0x0000)
struct BANS_GSRebirthPointInteract_GSNotifyTickCS final
{
public:
	struct FUStGSNotifyParam                      NotifyParam;                                       // 0x0000(0x0040)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
	float                                         FrameDeltaTime;                                    // 0x0040(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
//static_assert(alignof(BANS_GSRebirthPointInteract_GSNotifyTickCS) == 0x000008, "Wrong alignment on BANS_GSRebirthPointInteract_GSNotifyTickCS");
//static_assert(sizeof(BANS_GSRebirthPointInteract_GSNotifyTickCS) == 0x000048, "Wrong size on BANS_GSRebirthPointInteract_GSNotifyTickCS");
//static_assert(offsetof(BANS_GSRebirthPointInteract_GSNotifyTickCS, NotifyParam) == 0x000000, "Member 'BANS_GSRebirthPointInteract_GSNotifyTickCS::NotifyParam' has a wrong offset!");
//static_assert(offsetof(BANS_GSRebirthPointInteract_GSNotifyTickCS, FrameDeltaTime) == 0x000040, "Member 'BANS_GSRebirthPointInteract_GSNotifyTickCS::FrameDeltaTime' has a wrong offset!");

// Function b1-Managed.BANS_GSRebirthPointInteract.GSNotifyEndCS
// 0x0040 (0x0040 - 0x0000)
struct BANS_GSRebirthPointInteract_GSNotifyEndCS final
{
public:
	struct FUStGSNotifyParam                      NotifyParam;                                       // 0x0000(0x0040)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
//static_assert(alignof(BANS_GSRebirthPointInteract_GSNotifyEndCS) == 0x000008, "Wrong alignment on BANS_GSRebirthPointInteract_GSNotifyEndCS");
//static_assert(sizeof(BANS_GSRebirthPointInteract_GSNotifyEndCS) == 0x000040, "Wrong size on BANS_GSRebirthPointInteract_GSNotifyEndCS");
//static_assert(offsetof(BANS_GSRebirthPointInteract_GSNotifyEndCS, NotifyParam) == 0x000000, "Member 'BANS_GSRebirthPointInteract_GSNotifyEndCS::NotifyParam' has a wrong offset!");

// Function b1-Managed.BED_MovieNode_PerformerExitPhasePerformance.GetNodeDescriptionInCS
// 0x0010 (0x0010 - 0x0000)
struct BED_MovieNode_PerformerExitPhasePerformance_GetNodeDescriptionInCS final
{
public:
	class FString                                 ReturnValue;                                       // 0x0000(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash)
};
//static_assert(alignof(BED_MovieNode_PerformerExitPhasePerformance_GetNodeDescriptionInCS) == 0x000008, "Wrong alignment on BED_MovieNode_PerformerExitPhasePerformance_GetNodeDescriptionInCS");
//static_assert(sizeof(BED_MovieNode_PerformerExitPhasePerformance_GetNodeDescriptionInCS) == 0x000010, "Wrong size on BED_MovieNode_PerformerExitPhasePerformance_GetNodeDescriptionInCS");
//static_assert(offsetof(BED_MovieNode_PerformerExitPhasePerformance_GetNodeDescriptionInCS, ReturnValue) == 0x000000, "Member 'BED_MovieNode_PerformerExitPhasePerformance_GetNodeDescriptionInCS::ReturnValue' has a wrong offset!");

// Function b1-Managed.BED_MovieNode_ConditionQuery.GetNodeDescriptionInCS
// 0x0010 (0x0010 - 0x0000)
struct BED_MovieNode_ConditionQuery_GetNodeDescriptionInCS final
{
public:
	class FString                                 ReturnValue;                                       // 0x0000(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash)
};
//static_assert(alignof(BED_MovieNode_ConditionQuery_GetNodeDescriptionInCS) == 0x000008, "Wrong alignment on BED_MovieNode_ConditionQuery_GetNodeDescriptionInCS");
//static_assert(sizeof(BED_MovieNode_ConditionQuery_GetNodeDescriptionInCS) == 0x000010, "Wrong size on BED_MovieNode_ConditionQuery_GetNodeDescriptionInCS");
//static_assert(offsetof(BED_MovieNode_ConditionQuery_GetNodeDescriptionInCS, ReturnValue) == 0x000000, "Member 'BED_MovieNode_ConditionQuery_GetNodeDescriptionInCS::ReturnValue' has a wrong offset!");

// Function b1-Managed.BED_MovieNode_PlayerSetCloudMoveEnabled.GetNodeDescriptionInCS
// 0x0010 (0x0010 - 0x0000)
struct BED_MovieNode_PlayerSetCloudMoveEnabled_GetNodeDescriptionInCS final
{
public:
	class FString                                 ReturnValue;                                       // 0x0000(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash)
};
//static_assert(alignof(BED_MovieNode_PlayerSetCloudMoveEnabled_GetNodeDescriptionInCS) == 0x000008, "Wrong alignment on BED_MovieNode_PlayerSetCloudMoveEnabled_GetNodeDescriptionInCS");
//static_assert(sizeof(BED_MovieNode_PlayerSetCloudMoveEnabled_GetNodeDescriptionInCS) == 0x000010, "Wrong size on BED_MovieNode_PlayerSetCloudMoveEnabled_GetNodeDescriptionInCS");
//static_assert(offsetof(BED_MovieNode_PlayerSetCloudMoveEnabled_GetNodeDescriptionInCS, ReturnValue) == 0x000000, "Member 'BED_MovieNode_PlayerSetCloudMoveEnabled_GetNodeDescriptionInCS::ReturnValue' has a wrong offset!");

// Function b1-Managed.BAN_GSRemoveBuffByID.bIsNativeBranchingPointCS
// 0x0001 (0x0001 - 0x0000)
struct BAN_GSRemoveBuffByID_bIsNativeBranchingPointCS final
{
public:
	uint8                                         ReturnValue : 1;                                   // 0x0000(0x0001)(BitIndex: 0x00, PropSize: 0x0001 (Parm, OutParm, ReturnParm, NoDestructor, HasGetValueTypeHash))
};
//static_assert(alignof(BAN_GSRemoveBuffByID_bIsNativeBranchingPointCS) == 0x000001, "Wrong alignment on BAN_GSRemoveBuffByID_bIsNativeBranchingPointCS");
//static_assert(sizeof(BAN_GSRemoveBuffByID_bIsNativeBranchingPointCS) == 0x000001, "Wrong size on BAN_GSRemoveBuffByID_bIsNativeBranchingPointCS");

// Function b1-Managed.BAN_GSRemoveBuffByID.GSNotifyCS
// 0x0040 (0x0040 - 0x0000)
struct BAN_GSRemoveBuffByID_GSNotifyCS final
{
public:
	struct FUStGSNotifyParam                      NotifyParam;                                       // 0x0000(0x0040)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
//static_assert(alignof(BAN_GSRemoveBuffByID_GSNotifyCS) == 0x000008, "Wrong alignment on BAN_GSRemoveBuffByID_GSNotifyCS");
//static_assert(sizeof(BAN_GSRemoveBuffByID_GSNotifyCS) == 0x000040, "Wrong size on BAN_GSRemoveBuffByID_GSNotifyCS");
//static_assert(offsetof(BAN_GSRemoveBuffByID_GSNotifyCS, NotifyParam) == 0x000000, "Member 'BAN_GSRemoveBuffByID_GSNotifyCS::NotifyParam' has a wrong offset!");

// Function b1-Managed.BED_MovieNode_SetStreamingLevelStateInfo.GetNodeDescriptionInCS
// 0x0010 (0x0010 - 0x0000)
struct BED_MovieNode_SetStreamingLevelStateInfo_GetNodeDescriptionInCS final
{
public:
	class FString                                 ReturnValue;                                       // 0x0000(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash)
};
//static_assert(alignof(BED_MovieNode_SetStreamingLevelStateInfo_GetNodeDescriptionInCS) == 0x000008, "Wrong alignment on BED_MovieNode_SetStreamingLevelStateInfo_GetNodeDescriptionInCS");
//static_assert(sizeof(BED_MovieNode_SetStreamingLevelStateInfo_GetNodeDescriptionInCS) == 0x000010, "Wrong size on BED_MovieNode_SetStreamingLevelStateInfo_GetNodeDescriptionInCS");
//static_assert(offsetof(BED_MovieNode_SetStreamingLevelStateInfo_GetNodeDescriptionInCS, ReturnValue) == 0x000000, "Member 'BED_MovieNode_SetStreamingLevelStateInfo_GetNodeDescriptionInCS::ReturnValue' has a wrong offset!");

// Function b1-Managed.BUAnimHumanoidCS_AdvancedMonsterLocomotion.ShouldMoveTurnSwitchLockToFree
// 0x0001 (0x0001 - 0x0000)
struct BUAnimHumanoidCS_AdvancedMonsterLocomotion_ShouldMoveTurnSwitchLockToFree final
{
public:
	uint8                                         ReturnValue : 1;                                   // 0x0000(0x0001)(BitIndex: 0x00, PropSize: 0x0001 (Parm, OutParm, ReturnParm, NoDestructor, HasGetValueTypeHash))
};
//static_assert(alignof(BUAnimHumanoidCS_AdvancedMonsterLocomotion_ShouldMoveTurnSwitchLockToFree) == 0x000001, "Wrong alignment on BUAnimHumanoidCS_AdvancedMonsterLocomotion_ShouldMoveTurnSwitchLockToFree");
//static_assert(sizeof(BUAnimHumanoidCS_AdvancedMonsterLocomotion_ShouldMoveTurnSwitchLockToFree) == 0x000001, "Wrong size on BUAnimHumanoidCS_AdvancedMonsterLocomotion_ShouldMoveTurnSwitchLockToFree");

// Function b1-Managed.BUAnimHumanoidCS_AdvancedMonsterLocomotion.UpdateMoveLoopStateMachine
// 0x0020 (0x0020 - 0x0000)
struct BUAnimHumanoidCS_AdvancedMonsterLocomotion_UpdateMoveLoopStateMachine final
{
public:
	struct FAnimUpdateContext                     Context;                                           // 0x0000(0x0010)(Parm, OutParm, ReferenceParm)
	struct FAnimNodeReference                     Node;                                              // 0x0010(0x0010)(Parm, OutParm, ReferenceParm, NoDestructor)
};
//static_assert(alignof(BUAnimHumanoidCS_AdvancedMonsterLocomotion_UpdateMoveLoopStateMachine) == 0x000008, "Wrong alignment on BUAnimHumanoidCS_AdvancedMonsterLocomotion_UpdateMoveLoopStateMachine");
//static_assert(sizeof(BUAnimHumanoidCS_AdvancedMonsterLocomotion_UpdateMoveLoopStateMachine) == 0x000020, "Wrong size on BUAnimHumanoidCS_AdvancedMonsterLocomotion_UpdateMoveLoopStateMachine");
//static_assert(offsetof(BUAnimHumanoidCS_AdvancedMonsterLocomotion_UpdateMoveLoopStateMachine, Context) == 0x000000, "Member 'BUAnimHumanoidCS_AdvancedMonsterLocomotion_UpdateMoveLoopStateMachine::Context' has a wrong offset!");
//static_assert(offsetof(BUAnimHumanoidCS_AdvancedMonsterLocomotion_UpdateMoveLoopStateMachine, Node) == 0x000010, "Member 'BUAnimHumanoidCS_AdvancedMonsterLocomotion_UpdateMoveLoopStateMachine::Node' has a wrong offset!");

// Function b1-Managed.BUAnimHumanoidCS_AdvancedMonsterLocomotion.ShouldMoveLoopLeftTransFR
// 0x0001 (0x0001 - 0x0000)
struct BUAnimHumanoidCS_AdvancedMonsterLocomotion_ShouldMoveLoopLeftTransFR final
{
public:
	uint8                                         ReturnValue : 1;                                   // 0x0000(0x0001)(BitIndex: 0x00, PropSize: 0x0001 (Parm, OutParm, ReturnParm, NoDestructor, HasGetValueTypeHash))
};
//static_assert(alignof(BUAnimHumanoidCS_AdvancedMonsterLocomotion_ShouldMoveLoopLeftTransFR) == 0x000001, "Wrong alignment on BUAnimHumanoidCS_AdvancedMonsterLocomotion_ShouldMoveLoopLeftTransFR");
//static_assert(sizeof(BUAnimHumanoidCS_AdvancedMonsterLocomotion_ShouldMoveLoopLeftTransFR) == 0x000001, "Wrong size on BUAnimHumanoidCS_AdvancedMonsterLocomotion_ShouldMoveLoopLeftTransFR");

// Function b1-Managed.BUAnimHumanoidCS_AdvancedMonsterLocomotion.ShouldMoveLoopLeftTransBL
// 0x0001 (0x0001 - 0x0000)
struct BUAnimHumanoidCS_AdvancedMonsterLocomotion_ShouldMoveLoopLeftTransBL final
{
public:
	uint8                                         ReturnValue : 1;                                   // 0x0000(0x0001)(BitIndex: 0x00, PropSize: 0x0001 (Parm, OutParm, ReturnParm, NoDestructor, HasGetValueTypeHash))
};
//static_assert(alignof(BUAnimHumanoidCS_AdvancedMonsterLocomotion_ShouldMoveLoopLeftTransBL) == 0x000001, "Wrong alignment on BUAnimHumanoidCS_AdvancedMonsterLocomotion_ShouldMoveLoopLeftTransBL");
//static_assert(sizeof(BUAnimHumanoidCS_AdvancedMonsterLocomotion_ShouldMoveLoopLeftTransBL) == 0x000001, "Wrong size on BUAnimHumanoidCS_AdvancedMonsterLocomotion_ShouldMoveLoopLeftTransBL");

// Function b1-Managed.BUAnimHumanoidCS_AdvancedMonsterLocomotion.ShouldMoveLoopLeftTransFL
// 0x0001 (0x0001 - 0x0000)
struct BUAnimHumanoidCS_AdvancedMonsterLocomotion_ShouldMoveLoopLeftTransFL final
{
public:
	uint8                                         ReturnValue : 1;                                   // 0x0000(0x0001)(BitIndex: 0x00, PropSize: 0x0001 (Parm, OutParm, ReturnParm, NoDestructor, HasGetValueTypeHash))
};
//static_assert(alignof(BUAnimHumanoidCS_AdvancedMonsterLocomotion_ShouldMoveLoopLeftTransFL) == 0x000001, "Wrong alignment on BUAnimHumanoidCS_AdvancedMonsterLocomotion_ShouldMoveLoopLeftTransFL");
//static_assert(sizeof(BUAnimHumanoidCS_AdvancedMonsterLocomotion_ShouldMoveLoopLeftTransFL) == 0x000001, "Wrong size on BUAnimHumanoidCS_AdvancedMonsterLocomotion_ShouldMoveLoopLeftTransFL");

// Function b1-Managed.BUAnimHumanoidCS_AdvancedMonsterLocomotion.ShouldMoveLoopLeftTransBR
// 0x0001 (0x0001 - 0x0000)
struct BUAnimHumanoidCS_AdvancedMonsterLocomotion_ShouldMoveLoopLeftTransBR final
{
public:
	uint8                                         ReturnValue : 1;                                   // 0x0000(0x0001)(BitIndex: 0x00, PropSize: 0x0001 (Parm, OutParm, ReturnParm, NoDestructor, HasGetValueTypeHash))
};
//static_assert(alignof(BUAnimHumanoidCS_AdvancedMonsterLocomotion_ShouldMoveLoopLeftTransBR) == 0x000001, "Wrong alignment on BUAnimHumanoidCS_AdvancedMonsterLocomotion_ShouldMoveLoopLeftTransBR");
//static_assert(sizeof(BUAnimHumanoidCS_AdvancedMonsterLocomotion_ShouldMoveLoopLeftTransBR) == 0x000001, "Wrong size on BUAnimHumanoidCS_AdvancedMonsterLocomotion_ShouldMoveLoopLeftTransBR");

// Function b1-Managed.BUAnimHumanoidCS_AdvancedMonsterLocomotion.UpdateMoveLoopLF2LBOutput
// 0x0020 (0x0020 - 0x0000)
struct BUAnimHumanoidCS_AdvancedMonsterLocomotion_UpdateMoveLoopLF2LBOutput final
{
public:
	struct FAnimUpdateContext                     Context;                                           // 0x0000(0x0010)(Parm, OutParm, ReferenceParm)
	struct FAnimNodeReference                     Node;                                              // 0x0010(0x0010)(Parm, OutParm, ReferenceParm, NoDestructor)
};
//static_assert(alignof(BUAnimHumanoidCS_AdvancedMonsterLocomotion_UpdateMoveLoopLF2LBOutput) == 0x000008, "Wrong alignment on BUAnimHumanoidCS_AdvancedMonsterLocomotion_UpdateMoveLoopLF2LBOutput");
//static_assert(sizeof(BUAnimHumanoidCS_AdvancedMonsterLocomotion_UpdateMoveLoopLF2LBOutput) == 0x000020, "Wrong size on BUAnimHumanoidCS_AdvancedMonsterLocomotion_UpdateMoveLoopLF2LBOutput");
//static_assert(offsetof(BUAnimHumanoidCS_AdvancedMonsterLocomotion_UpdateMoveLoopLF2LBOutput, Context) == 0x000000, "Member 'BUAnimHumanoidCS_AdvancedMonsterLocomotion_UpdateMoveLoopLF2LBOutput::Context' has a wrong offset!");
//static_assert(offsetof(BUAnimHumanoidCS_AdvancedMonsterLocomotion_UpdateMoveLoopLF2LBOutput, Node) == 0x000010, "Member 'BUAnimHumanoidCS_AdvancedMonsterLocomotion_UpdateMoveLoopLF2LBOutput::Node' has a wrong offset!");

// Function b1-Managed.BUAnimHumanoidCS_AdvancedMonsterLocomotion.UpdateMoveLoopRF2RBOutput
// 0x0020 (0x0020 - 0x0000)
struct BUAnimHumanoidCS_AdvancedMonsterLocomotion_UpdateMoveLoopRF2RBOutput final
{
public:
	struct FAnimUpdateContext                     Context;                                           // 0x0000(0x0010)(Parm, OutParm, ReferenceParm)
	struct FAnimNodeReference                     Node;                                              // 0x0010(0x0010)(Parm, OutParm, ReferenceParm, NoDestructor)
};
//static_assert(alignof(BUAnimHumanoidCS_AdvancedMonsterLocomotion_UpdateMoveLoopRF2RBOutput) == 0x000008, "Wrong alignment on BUAnimHumanoidCS_AdvancedMonsterLocomotion_UpdateMoveLoopRF2RBOutput");
//static_assert(sizeof(BUAnimHumanoidCS_AdvancedMonsterLocomotion_UpdateMoveLoopRF2RBOutput) == 0x000020, "Wrong size on BUAnimHumanoidCS_AdvancedMonsterLocomotion_UpdateMoveLoopRF2RBOutput");
//static_assert(offsetof(BUAnimHumanoidCS_AdvancedMonsterLocomotion_UpdateMoveLoopRF2RBOutput, Context) == 0x000000, "Member 'BUAnimHumanoidCS_AdvancedMonsterLocomotion_UpdateMoveLoopRF2RBOutput::Context' has a wrong offset!");
//static_assert(offsetof(BUAnimHumanoidCS_AdvancedMonsterLocomotion_UpdateMoveLoopRF2RBOutput, Node) == 0x000010, "Member 'BUAnimHumanoidCS_AdvancedMonsterLocomotion_UpdateMoveLoopRF2RBOutput::Node' has a wrong offset!");

// Function b1-Managed.BUAnimHumanoidCS_AdvancedMonsterLocomotion.UpdateMoveLoopRB2RFOutput
// 0x0020 (0x0020 - 0x0000)
struct BUAnimHumanoidCS_AdvancedMonsterLocomotion_UpdateMoveLoopRB2RFOutput final
{
public:
	struct FAnimUpdateContext                     Context;                                           // 0x0000(0x0010)(Parm, OutParm, ReferenceParm)
	struct FAnimNodeReference                     Node;                                              // 0x0010(0x0010)(Parm, OutParm, ReferenceParm, NoDestructor)
};
//static_assert(alignof(BUAnimHumanoidCS_AdvancedMonsterLocomotion_UpdateMoveLoopRB2RFOutput) == 0x000008, "Wrong alignment on BUAnimHumanoidCS_AdvancedMonsterLocomotion_UpdateMoveLoopRB2RFOutput");
//static_assert(sizeof(BUAnimHumanoidCS_AdvancedMonsterLocomotion_UpdateMoveLoopRB2RFOutput) == 0x000020, "Wrong size on BUAnimHumanoidCS_AdvancedMonsterLocomotion_UpdateMoveLoopRB2RFOutput");
//static_assert(offsetof(BUAnimHumanoidCS_AdvancedMonsterLocomotion_UpdateMoveLoopRB2RFOutput, Context) == 0x000000, "Member 'BUAnimHumanoidCS_AdvancedMonsterLocomotion_UpdateMoveLoopRB2RFOutput::Context' has a wrong offset!");
//static_assert(offsetof(BUAnimHumanoidCS_AdvancedMonsterLocomotion_UpdateMoveLoopRB2RFOutput, Node) == 0x000010, "Member 'BUAnimHumanoidCS_AdvancedMonsterLocomotion_UpdateMoveLoopRB2RFOutput::Node' has a wrong offset!");

// Function b1-Managed.BUAnimHumanoidCS_AdvancedMonsterLocomotion.UpdateMoveLoopLB2LFOutput
// 0x0020 (0x0020 - 0x0000)
struct BUAnimHumanoidCS_AdvancedMonsterLocomotion_UpdateMoveLoopLB2LFOutput final
{
public:
	struct FAnimUpdateContext                     Context;                                           // 0x0000(0x0010)(Parm, OutParm, ReferenceParm)
	struct FAnimNodeReference                     Node;                                              // 0x0010(0x0010)(Parm, OutParm, ReferenceParm, NoDestructor)
};
//static_assert(alignof(BUAnimHumanoidCS_AdvancedMonsterLocomotion_UpdateMoveLoopLB2LFOutput) == 0x000008, "Wrong alignment on BUAnimHumanoidCS_AdvancedMonsterLocomotion_UpdateMoveLoopLB2LFOutput");
//static_assert(sizeof(BUAnimHumanoidCS_AdvancedMonsterLocomotion_UpdateMoveLoopLB2LFOutput) == 0x000020, "Wrong size on BUAnimHumanoidCS_AdvancedMonsterLocomotion_UpdateMoveLoopLB2LFOutput");
//static_assert(offsetof(BUAnimHumanoidCS_AdvancedMonsterLocomotion_UpdateMoveLoopLB2LFOutput, Context) == 0x000000, "Member 'BUAnimHumanoidCS_AdvancedMonsterLocomotion_UpdateMoveLoopLB2LFOutput::Context' has a wrong offset!");
//static_assert(offsetof(BUAnimHumanoidCS_AdvancedMonsterLocomotion_UpdateMoveLoopLB2LFOutput, Node) == 0x000010, "Member 'BUAnimHumanoidCS_AdvancedMonsterLocomotion_UpdateMoveLoopLB2LFOutput::Node' has a wrong offset!");

// Function b1-Managed.BUAnimHumanoidCS_AdvancedMonsterLocomotion.SetupMoveLoopAdditiveAnim
// 0x0020 (0x0020 - 0x0000)
struct BUAnimHumanoidCS_AdvancedMonsterLocomotion_SetupMoveLoopAdditiveAnim final
{
public:
	struct FAnimUpdateContext                     Context;                                           // 0x0000(0x0010)(Parm, OutParm, ReferenceParm)
	struct FAnimNodeReference                     Node;                                              // 0x0010(0x0010)(Parm, OutParm, ReferenceParm, NoDestructor)
};
//static_assert(alignof(BUAnimHumanoidCS_AdvancedMonsterLocomotion_SetupMoveLoopAdditiveAnim) == 0x000008, "Wrong alignment on BUAnimHumanoidCS_AdvancedMonsterLocomotion_SetupMoveLoopAdditiveAnim");
//static_assert(sizeof(BUAnimHumanoidCS_AdvancedMonsterLocomotion_SetupMoveLoopAdditiveAnim) == 0x000020, "Wrong size on BUAnimHumanoidCS_AdvancedMonsterLocomotion_SetupMoveLoopAdditiveAnim");
//static_assert(offsetof(BUAnimHumanoidCS_AdvancedMonsterLocomotion_SetupMoveLoopAdditiveAnim, Context) == 0x000000, "Member 'BUAnimHumanoidCS_AdvancedMonsterLocomotion_SetupMoveLoopAdditiveAnim::Context' has a wrong offset!");
//static_assert(offsetof(BUAnimHumanoidCS_AdvancedMonsterLocomotion_SetupMoveLoopAdditiveAnim, Node) == 0x000010, "Member 'BUAnimHumanoidCS_AdvancedMonsterLocomotion_SetupMoveLoopAdditiveAnim::Node' has a wrong offset!");

// Function b1-Managed.BUAnimHumanoidCS_AdvancedMonsterLocomotion.ShouldMoveTurnSwitchLock
// 0x0001 (0x0001 - 0x0000)
struct BUAnimHumanoidCS_AdvancedMonsterLocomotion_ShouldMoveTurnSwitchLock final
{
public:
	uint8                                         ReturnValue : 1;                                   // 0x0000(0x0001)(BitIndex: 0x00, PropSize: 0x0001 (Parm, OutParm, ReturnParm, NoDestructor, HasGetValueTypeHash))
};
//static_assert(alignof(BUAnimHumanoidCS_AdvancedMonsterLocomotion_ShouldMoveTurnSwitchLock) == 0x000001, "Wrong alignment on BUAnimHumanoidCS_AdvancedMonsterLocomotion_ShouldMoveTurnSwitchLock");
//static_assert(sizeof(BUAnimHumanoidCS_AdvancedMonsterLocomotion_ShouldMoveTurnSwitchLock) == 0x000001, "Wrong size on BUAnimHumanoidCS_AdvancedMonsterLocomotion_ShouldMoveTurnSwitchLock");

// Function b1-Managed.BUAnimHumanoidCS_AdvancedMonsterLocomotion.ShouldMoveTurnSwitchFree
// 0x0001 (0x0001 - 0x0000)
struct BUAnimHumanoidCS_AdvancedMonsterLocomotion_ShouldMoveTurnSwitchFree final
{
public:
	uint8                                         ReturnValue : 1;                                   // 0x0000(0x0001)(BitIndex: 0x00, PropSize: 0x0001 (Parm, OutParm, ReturnParm, NoDestructor, HasGetValueTypeHash))
};
//static_assert(alignof(BUAnimHumanoidCS_AdvancedMonsterLocomotion_ShouldMoveTurnSwitchFree) == 0x000001, "Wrong alignment on BUAnimHumanoidCS_AdvancedMonsterLocomotion_ShouldMoveTurnSwitchFree");
//static_assert(sizeof(BUAnimHumanoidCS_AdvancedMonsterLocomotion_ShouldMoveTurnSwitchFree) == 0x000001, "Wrong size on BUAnimHumanoidCS_AdvancedMonsterLocomotion_ShouldMoveTurnSwitchFree");

// Function b1-Managed.BUAnimHumanoidCS_AdvancedMonsterLocomotion.UpdateMoveLoopSimpleAnim
// 0x0020 (0x0020 - 0x0000)
struct BUAnimHumanoidCS_AdvancedMonsterLocomotion_UpdateMoveLoopSimpleAnim final
{
public:
	struct FAnimUpdateContext                     Context;                                           // 0x0000(0x0010)(Parm, OutParm, ReferenceParm)
	struct FAnimNodeReference                     Node;                                              // 0x0010(0x0010)(Parm, OutParm, ReferenceParm, NoDestructor)
};
//static_assert(alignof(BUAnimHumanoidCS_AdvancedMonsterLocomotion_UpdateMoveLoopSimpleAnim) == 0x000008, "Wrong alignment on BUAnimHumanoidCS_AdvancedMonsterLocomotion_UpdateMoveLoopSimpleAnim");
//static_assert(sizeof(BUAnimHumanoidCS_AdvancedMonsterLocomotion_UpdateMoveLoopSimpleAnim) == 0x000020, "Wrong size on BUAnimHumanoidCS_AdvancedMonsterLocomotion_UpdateMoveLoopSimpleAnim");
//static_assert(offsetof(BUAnimHumanoidCS_AdvancedMonsterLocomotion_UpdateMoveLoopSimpleAnim, Context) == 0x000000, "Member 'BUAnimHumanoidCS_AdvancedMonsterLocomotion_UpdateMoveLoopSimpleAnim::Context' has a wrong offset!");
//static_assert(offsetof(BUAnimHumanoidCS_AdvancedMonsterLocomotion_UpdateMoveLoopSimpleAnim, Node) == 0x000010, "Member 'BUAnimHumanoidCS_AdvancedMonsterLocomotion_UpdateMoveLoopSimpleAnim::Node' has a wrong offset!");

// Function b1-Managed.BUAnimHumanoidCS_AdvancedMonsterLocomotion.ShouldMoveLoopTransToBL
// 0x0001 (0x0001 - 0x0000)
struct BUAnimHumanoidCS_AdvancedMonsterLocomotion_ShouldMoveLoopTransToBL final
{
public:
	uint8                                         ReturnValue : 1;                                   // 0x0000(0x0001)(BitIndex: 0x00, PropSize: 0x0001 (Parm, OutParm, ReturnParm, NoDestructor, HasGetValueTypeHash))
};
//static_assert(alignof(BUAnimHumanoidCS_AdvancedMonsterLocomotion_ShouldMoveLoopTransToBL) == 0x000001, "Wrong alignment on BUAnimHumanoidCS_AdvancedMonsterLocomotion_ShouldMoveLoopTransToBL");
//static_assert(sizeof(BUAnimHumanoidCS_AdvancedMonsterLocomotion_ShouldMoveLoopTransToBL) == 0x000001, "Wrong size on BUAnimHumanoidCS_AdvancedMonsterLocomotion_ShouldMoveLoopTransToBL");

// Function b1-Managed.BUAnimHumanoidCS_AdvancedMonsterLocomotion.UpdateMoveLoopTransAnim
// 0x0020 (0x0020 - 0x0000)
struct BUAnimHumanoidCS_AdvancedMonsterLocomotion_UpdateMoveLoopTransAnim final
{
public:
	struct FAnimUpdateContext                     Context;                                           // 0x0000(0x0010)(Parm, OutParm, ReferenceParm)
	struct FAnimNodeReference                     Node;                                              // 0x0010(0x0010)(Parm, OutParm, ReferenceParm, NoDestructor)
};
//static_assert(alignof(BUAnimHumanoidCS_AdvancedMonsterLocomotion_UpdateMoveLoopTransAnim) == 0x000008, "Wrong alignment on BUAnimHumanoidCS_AdvancedMonsterLocomotion_UpdateMoveLoopTransAnim");
//static_assert(sizeof(BUAnimHumanoidCS_AdvancedMonsterLocomotion_UpdateMoveLoopTransAnim) == 0x000020, "Wrong size on BUAnimHumanoidCS_AdvancedMonsterLocomotion_UpdateMoveLoopTransAnim");
//static_assert(offsetof(BUAnimHumanoidCS_AdvancedMonsterLocomotion_UpdateMoveLoopTransAnim, Context) == 0x000000, "Member 'BUAnimHumanoidCS_AdvancedMonsterLocomotion_UpdateMoveLoopTransAnim::Context' has a wrong offset!");
//static_assert(offsetof(BUAnimHumanoidCS_AdvancedMonsterLocomotion_UpdateMoveLoopTransAnim, Node) == 0x000010, "Member 'BUAnimHumanoidCS_AdvancedMonsterLocomotion_UpdateMoveLoopTransAnim::Node' has a wrong offset!");

// Function b1-Managed.BUAnimHumanoidCS_AdvancedMonsterLocomotion.ShouldMoveLoopTransToBR
// 0x0001 (0x0001 - 0x0000)
struct BUAnimHumanoidCS_AdvancedMonsterLocomotion_ShouldMoveLoopTransToBR final
{
public:
	uint8                                         ReturnValue : 1;                                   // 0x0000(0x0001)(BitIndex: 0x00, PropSize: 0x0001 (Parm, OutParm, ReturnParm, NoDestructor, HasGetValueTypeHash))
};
//static_assert(alignof(BUAnimHumanoidCS_AdvancedMonsterLocomotion_ShouldMoveLoopTransToBR) == 0x000001, "Wrong alignment on BUAnimHumanoidCS_AdvancedMonsterLocomotion_ShouldMoveLoopTransToBR");
//static_assert(sizeof(BUAnimHumanoidCS_AdvancedMonsterLocomotion_ShouldMoveLoopTransToBR) == 0x000001, "Wrong size on BUAnimHumanoidCS_AdvancedMonsterLocomotion_ShouldMoveLoopTransToBR");

// Function b1-Managed.BUAnimHumanoidCS_AdvancedMonsterLocomotion.ShouldMoveLoopTransToFR
// 0x0001 (0x0001 - 0x0000)
struct BUAnimHumanoidCS_AdvancedMonsterLocomotion_ShouldMoveLoopTransToFR final
{
public:
	uint8                                         ReturnValue : 1;                                   // 0x0000(0x0001)(BitIndex: 0x00, PropSize: 0x0001 (Parm, OutParm, ReturnParm, NoDestructor, HasGetValueTypeHash))
};
//static_assert(alignof(BUAnimHumanoidCS_AdvancedMonsterLocomotion_ShouldMoveLoopTransToFR) == 0x000001, "Wrong alignment on BUAnimHumanoidCS_AdvancedMonsterLocomotion_ShouldMoveLoopTransToFR");
//static_assert(sizeof(BUAnimHumanoidCS_AdvancedMonsterLocomotion_ShouldMoveLoopTransToFR) == 0x000001, "Wrong size on BUAnimHumanoidCS_AdvancedMonsterLocomotion_ShouldMoveLoopTransToFR");

// Function b1-Managed.BUAnimHumanoidCS_AdvancedMonsterLocomotion.ShouldMoveLoopTransToFL
// 0x0001 (0x0001 - 0x0000)
struct BUAnimHumanoidCS_AdvancedMonsterLocomotion_ShouldMoveLoopTransToFL final
{
public:
	uint8                                         ReturnValue : 1;                                   // 0x0000(0x0001)(BitIndex: 0x00, PropSize: 0x0001 (Parm, OutParm, ReturnParm, NoDestructor, HasGetValueTypeHash))
};
//static_assert(alignof(BUAnimHumanoidCS_AdvancedMonsterLocomotion_ShouldMoveLoopTransToFL) == 0x000001, "Wrong alignment on BUAnimHumanoidCS_AdvancedMonsterLocomotion_ShouldMoveLoopTransToFL");
//static_assert(sizeof(BUAnimHumanoidCS_AdvancedMonsterLocomotion_ShouldMoveLoopTransToFL) == 0x000001, "Wrong size on BUAnimHumanoidCS_AdvancedMonsterLocomotion_ShouldMoveLoopTransToFL");

// Function b1-Managed.BUAnimHumanoidCS_AdvancedMonsterLocomotion.UpdateMoveLoopBwdAnim
// 0x0020 (0x0020 - 0x0000)
struct BUAnimHumanoidCS_AdvancedMonsterLocomotion_UpdateMoveLoopBwdAnim final
{
public:
	struct FAnimUpdateContext                     Context;                                           // 0x0000(0x0010)(Parm, OutParm, ReferenceParm)
	struct FAnimNodeReference                     Node;                                              // 0x0010(0x0010)(Parm, OutParm, ReferenceParm, NoDestructor)
};
//static_assert(alignof(BUAnimHumanoidCS_AdvancedMonsterLocomotion_UpdateMoveLoopBwdAnim) == 0x000008, "Wrong alignment on BUAnimHumanoidCS_AdvancedMonsterLocomotion_UpdateMoveLoopBwdAnim");
//static_assert(sizeof(BUAnimHumanoidCS_AdvancedMonsterLocomotion_UpdateMoveLoopBwdAnim) == 0x000020, "Wrong size on BUAnimHumanoidCS_AdvancedMonsterLocomotion_UpdateMoveLoopBwdAnim");
//static_assert(offsetof(BUAnimHumanoidCS_AdvancedMonsterLocomotion_UpdateMoveLoopBwdAnim, Context) == 0x000000, "Member 'BUAnimHumanoidCS_AdvancedMonsterLocomotion_UpdateMoveLoopBwdAnim::Context' has a wrong offset!");
//static_assert(offsetof(BUAnimHumanoidCS_AdvancedMonsterLocomotion_UpdateMoveLoopBwdAnim, Node) == 0x000010, "Member 'BUAnimHumanoidCS_AdvancedMonsterLocomotion_UpdateMoveLoopBwdAnim::Node' has a wrong offset!");

// Function b1-Managed.BUAnimHumanoidCS_AdvancedMonsterLocomotion.UpdateMoveLoopFwdAnim
// 0x0020 (0x0020 - 0x0000)
struct BUAnimHumanoidCS_AdvancedMonsterLocomotion_UpdateMoveLoopFwdAnim final
{
public:
	struct FAnimUpdateContext                     Context;                                           // 0x0000(0x0010)(Parm, OutParm, ReferenceParm)
	struct FAnimNodeReference                     Node;                                              // 0x0010(0x0010)(Parm, OutParm, ReferenceParm, NoDestructor)
};
//static_assert(alignof(BUAnimHumanoidCS_AdvancedMonsterLocomotion_UpdateMoveLoopFwdAnim) == 0x000008, "Wrong alignment on BUAnimHumanoidCS_AdvancedMonsterLocomotion_UpdateMoveLoopFwdAnim");
//static_assert(sizeof(BUAnimHumanoidCS_AdvancedMonsterLocomotion_UpdateMoveLoopFwdAnim) == 0x000020, "Wrong size on BUAnimHumanoidCS_AdvancedMonsterLocomotion_UpdateMoveLoopFwdAnim");
//static_assert(offsetof(BUAnimHumanoidCS_AdvancedMonsterLocomotion_UpdateMoveLoopFwdAnim, Context) == 0x000000, "Member 'BUAnimHumanoidCS_AdvancedMonsterLocomotion_UpdateMoveLoopFwdAnim::Context' has a wrong offset!");
//static_assert(offsetof(BUAnimHumanoidCS_AdvancedMonsterLocomotion_UpdateMoveLoopFwdAnim, Node) == 0x000010, "Member 'BUAnimHumanoidCS_AdvancedMonsterLocomotion_UpdateMoveLoopFwdAnim::Node' has a wrong offset!");

// Function b1-Managed.BUAnimHumanoidCS_AdvancedMonsterLocomotion.ShouldMoveLoopLeftFwd
// 0x0001 (0x0001 - 0x0000)
struct BUAnimHumanoidCS_AdvancedMonsterLocomotion_ShouldMoveLoopLeftFwd final
{
public:
	uint8                                         ReturnValue : 1;                                   // 0x0000(0x0001)(BitIndex: 0x00, PropSize: 0x0001 (Parm, OutParm, ReturnParm, NoDestructor, HasGetValueTypeHash))
};
//static_assert(alignof(BUAnimHumanoidCS_AdvancedMonsterLocomotion_ShouldMoveLoopLeftFwd) == 0x000001, "Wrong alignment on BUAnimHumanoidCS_AdvancedMonsterLocomotion_ShouldMoveLoopLeftFwd");
//static_assert(sizeof(BUAnimHumanoidCS_AdvancedMonsterLocomotion_ShouldMoveLoopLeftFwd) == 0x000001, "Wrong size on BUAnimHumanoidCS_AdvancedMonsterLocomotion_ShouldMoveLoopLeftFwd");

// Function b1-Managed.BUAnimHumanoidCS_AdvancedMonsterLocomotion.ShouldMoveLoopLeftBwd
// 0x0001 (0x0001 - 0x0000)
struct BUAnimHumanoidCS_AdvancedMonsterLocomotion_ShouldMoveLoopLeftBwd final
{
public:
	uint8                                         ReturnValue : 1;                                   // 0x0000(0x0001)(BitIndex: 0x00, PropSize: 0x0001 (Parm, OutParm, ReturnParm, NoDestructor, HasGetValueTypeHash))
};
//static_assert(alignof(BUAnimHumanoidCS_AdvancedMonsterLocomotion_ShouldMoveLoopLeftBwd) == 0x000001, "Wrong alignment on BUAnimHumanoidCS_AdvancedMonsterLocomotion_ShouldMoveLoopLeftBwd");
//static_assert(sizeof(BUAnimHumanoidCS_AdvancedMonsterLocomotion_ShouldMoveLoopLeftBwd) == 0x000001, "Wrong size on BUAnimHumanoidCS_AdvancedMonsterLocomotion_ShouldMoveLoopLeftBwd");

// Function b1-Managed.BUAnimHumanoidCS_AdvancedMonsterLocomotion.ShouldMoveLoopBLToFL
// 0x0001 (0x0001 - 0x0000)
struct BUAnimHumanoidCS_AdvancedMonsterLocomotion_ShouldMoveLoopBLToFL final
{
public:
	uint8                                         ReturnValue : 1;                                   // 0x0000(0x0001)(BitIndex: 0x00, PropSize: 0x0001 (Parm, OutParm, ReturnParm, NoDestructor, HasGetValueTypeHash))
};
//static_assert(alignof(BUAnimHumanoidCS_AdvancedMonsterLocomotion_ShouldMoveLoopBLToFL) == 0x000001, "Wrong alignment on BUAnimHumanoidCS_AdvancedMonsterLocomotion_ShouldMoveLoopBLToFL");
//static_assert(sizeof(BUAnimHumanoidCS_AdvancedMonsterLocomotion_ShouldMoveLoopBLToFL) == 0x000001, "Wrong size on BUAnimHumanoidCS_AdvancedMonsterLocomotion_ShouldMoveLoopBLToFL");

// Function b1-Managed.BUAnimHumanoidCS_AdvancedMonsterLocomotion.ShouldMoveLoopLeftBL
// 0x0001 (0x0001 - 0x0000)
struct BUAnimHumanoidCS_AdvancedMonsterLocomotion_ShouldMoveLoopLeftBL final
{
public:
	uint8                                         ReturnValue : 1;                                   // 0x0000(0x0001)(BitIndex: 0x00, PropSize: 0x0001 (Parm, OutParm, ReturnParm, NoDestructor, HasGetValueTypeHash))
};
//static_assert(alignof(BUAnimHumanoidCS_AdvancedMonsterLocomotion_ShouldMoveLoopLeftBL) == 0x000001, "Wrong alignment on BUAnimHumanoidCS_AdvancedMonsterLocomotion_ShouldMoveLoopLeftBL");
//static_assert(sizeof(BUAnimHumanoidCS_AdvancedMonsterLocomotion_ShouldMoveLoopLeftBL) == 0x000001, "Wrong size on BUAnimHumanoidCS_AdvancedMonsterLocomotion_ShouldMoveLoopLeftBL");

// Function b1-Managed.BUAnimHumanoidCS_AdvancedMonsterLocomotion.SetupMoveStartOutput
// 0x0020 (0x0020 - 0x0000)
struct BUAnimHumanoidCS_AdvancedMonsterLocomotion_SetupMoveStartOutput final
{
public:
	struct FAnimUpdateContext                     Context;                                           // 0x0000(0x0010)(Parm, OutParm, ReferenceParm)
	struct FAnimNodeReference                     Node;                                              // 0x0010(0x0010)(Parm, OutParm, ReferenceParm, NoDestructor)
};
//static_assert(alignof(BUAnimHumanoidCS_AdvancedMonsterLocomotion_SetupMoveStartOutput) == 0x000008, "Wrong alignment on BUAnimHumanoidCS_AdvancedMonsterLocomotion_SetupMoveStartOutput");
//static_assert(sizeof(BUAnimHumanoidCS_AdvancedMonsterLocomotion_SetupMoveStartOutput) == 0x000020, "Wrong size on BUAnimHumanoidCS_AdvancedMonsterLocomotion_SetupMoveStartOutput");
//static_assert(offsetof(BUAnimHumanoidCS_AdvancedMonsterLocomotion_SetupMoveStartOutput, Context) == 0x000000, "Member 'BUAnimHumanoidCS_AdvancedMonsterLocomotion_SetupMoveStartOutput::Context' has a wrong offset!");
//static_assert(offsetof(BUAnimHumanoidCS_AdvancedMonsterLocomotion_SetupMoveStartOutput, Node) == 0x000010, "Member 'BUAnimHumanoidCS_AdvancedMonsterLocomotion_SetupMoveStartOutput::Node' has a wrong offset!");

// Function b1-Managed.BUAnimHumanoidCS_AdvancedMonsterLocomotion.UpdateMoveLoopFLAnim
// 0x0020 (0x0020 - 0x0000)
struct BUAnimHumanoidCS_AdvancedMonsterLocomotion_UpdateMoveLoopFLAnim final
{
public:
	struct FAnimUpdateContext                     Context;                                           // 0x0000(0x0010)(Parm, OutParm, ReferenceParm)
	struct FAnimNodeReference                     Node;                                              // 0x0010(0x0010)(Parm, OutParm, ReferenceParm, NoDestructor)
};
//static_assert(alignof(BUAnimHumanoidCS_AdvancedMonsterLocomotion_UpdateMoveLoopFLAnim) == 0x000008, "Wrong alignment on BUAnimHumanoidCS_AdvancedMonsterLocomotion_UpdateMoveLoopFLAnim");
//static_assert(sizeof(BUAnimHumanoidCS_AdvancedMonsterLocomotion_UpdateMoveLoopFLAnim) == 0x000020, "Wrong size on BUAnimHumanoidCS_AdvancedMonsterLocomotion_UpdateMoveLoopFLAnim");
//static_assert(offsetof(BUAnimHumanoidCS_AdvancedMonsterLocomotion_UpdateMoveLoopFLAnim, Context) == 0x000000, "Member 'BUAnimHumanoidCS_AdvancedMonsterLocomotion_UpdateMoveLoopFLAnim::Context' has a wrong offset!");
//static_assert(offsetof(BUAnimHumanoidCS_AdvancedMonsterLocomotion_UpdateMoveLoopFLAnim, Node) == 0x000010, "Member 'BUAnimHumanoidCS_AdvancedMonsterLocomotion_UpdateMoveLoopFLAnim::Node' has a wrong offset!");

// Function b1-Managed.BUAnimHumanoidCS_AdvancedMonsterLocomotion.UpdateMoveLoopFRAnim
// 0x0020 (0x0020 - 0x0000)
struct BUAnimHumanoidCS_AdvancedMonsterLocomotion_UpdateMoveLoopFRAnim final
{
public:
	struct FAnimUpdateContext                     Context;                                           // 0x0000(0x0010)(Parm, OutParm, ReferenceParm)
	struct FAnimNodeReference                     Node;                                              // 0x0010(0x0010)(Parm, OutParm, ReferenceParm, NoDestructor)
};
//static_assert(alignof(BUAnimHumanoidCS_AdvancedMonsterLocomotion_UpdateMoveLoopFRAnim) == 0x000008, "Wrong alignment on BUAnimHumanoidCS_AdvancedMonsterLocomotion_UpdateMoveLoopFRAnim");
//static_assert(sizeof(BUAnimHumanoidCS_AdvancedMonsterLocomotion_UpdateMoveLoopFRAnim) == 0x000020, "Wrong size on BUAnimHumanoidCS_AdvancedMonsterLocomotion_UpdateMoveLoopFRAnim");
//static_assert(offsetof(BUAnimHumanoidCS_AdvancedMonsterLocomotion_UpdateMoveLoopFRAnim, Context) == 0x000000, "Member 'BUAnimHumanoidCS_AdvancedMonsterLocomotion_UpdateMoveLoopFRAnim::Context' has a wrong offset!");
//static_assert(offsetof(BUAnimHumanoidCS_AdvancedMonsterLocomotion_UpdateMoveLoopFRAnim, Node) == 0x000010, "Member 'BUAnimHumanoidCS_AdvancedMonsterLocomotion_UpdateMoveLoopFRAnim::Node' has a wrong offset!");

// Function b1-Managed.BUAnimHumanoidCS_AdvancedMonsterLocomotion.UpdateMoveLoopBLAnim
// 0x0020 (0x0020 - 0x0000)
struct BUAnimHumanoidCS_AdvancedMonsterLocomotion_UpdateMoveLoopBLAnim final
{
public:
	struct FAnimUpdateContext                     Context;                                           // 0x0000(0x0010)(Parm, OutParm, ReferenceParm)
	struct FAnimNodeReference                     Node;                                              // 0x0010(0x0010)(Parm, OutParm, ReferenceParm, NoDestructor)
};
//static_assert(alignof(BUAnimHumanoidCS_AdvancedMonsterLocomotion_UpdateMoveLoopBLAnim) == 0x000008, "Wrong alignment on BUAnimHumanoidCS_AdvancedMonsterLocomotion_UpdateMoveLoopBLAnim");
//static_assert(sizeof(BUAnimHumanoidCS_AdvancedMonsterLocomotion_UpdateMoveLoopBLAnim) == 0x000020, "Wrong size on BUAnimHumanoidCS_AdvancedMonsterLocomotion_UpdateMoveLoopBLAnim");
//static_assert(offsetof(BUAnimHumanoidCS_AdvancedMonsterLocomotion_UpdateMoveLoopBLAnim, Context) == 0x000000, "Member 'BUAnimHumanoidCS_AdvancedMonsterLocomotion_UpdateMoveLoopBLAnim::Context' has a wrong offset!");
//static_assert(offsetof(BUAnimHumanoidCS_AdvancedMonsterLocomotion_UpdateMoveLoopBLAnim, Node) == 0x000010, "Member 'BUAnimHumanoidCS_AdvancedMonsterLocomotion_UpdateMoveLoopBLAnim::Node' has a wrong offset!");

// Function b1-Managed.BUAnimHumanoidCS_AdvancedMonsterLocomotion.UpdateMoveLoopBRAnim
// 0x0020 (0x0020 - 0x0000)
struct BUAnimHumanoidCS_AdvancedMonsterLocomotion_UpdateMoveLoopBRAnim final
{
public:
	struct FAnimUpdateContext                     Context;                                           // 0x0000(0x0010)(Parm, OutParm, ReferenceParm)
	struct FAnimNodeReference                     Node;                                              // 0x0010(0x0010)(Parm, OutParm, ReferenceParm, NoDestructor)
};
//static_assert(alignof(BUAnimHumanoidCS_AdvancedMonsterLocomotion_UpdateMoveLoopBRAnim) == 0x000008, "Wrong alignment on BUAnimHumanoidCS_AdvancedMonsterLocomotion_UpdateMoveLoopBRAnim");
//static_assert(sizeof(BUAnimHumanoidCS_AdvancedMonsterLocomotion_UpdateMoveLoopBRAnim) == 0x000020, "Wrong size on BUAnimHumanoidCS_AdvancedMonsterLocomotion_UpdateMoveLoopBRAnim");
//static_assert(offsetof(BUAnimHumanoidCS_AdvancedMonsterLocomotion_UpdateMoveLoopBRAnim, Context) == 0x000000, "Member 'BUAnimHumanoidCS_AdvancedMonsterLocomotion_UpdateMoveLoopBRAnim::Context' has a wrong offset!");
//static_assert(offsetof(BUAnimHumanoidCS_AdvancedMonsterLocomotion_UpdateMoveLoopBRAnim, Node) == 0x000010, "Member 'BUAnimHumanoidCS_AdvancedMonsterLocomotion_UpdateMoveLoopBRAnim::Node' has a wrong offset!");

// Function b1-Managed.BUAnimHumanoidCS_AdvancedMonsterLocomotion.UpdateMoveLoopOutput
// 0x0020 (0x0020 - 0x0000)
struct BUAnimHumanoidCS_AdvancedMonsterLocomotion_UpdateMoveLoopOutput final
{
public:
	struct FAnimUpdateContext                     Context;                                           // 0x0000(0x0010)(Parm, OutParm, ReferenceParm)
	struct FAnimNodeReference                     Node;                                              // 0x0010(0x0010)(Parm, OutParm, ReferenceParm, NoDestructor)
};
//static_assert(alignof(BUAnimHumanoidCS_AdvancedMonsterLocomotion_UpdateMoveLoopOutput) == 0x000008, "Wrong alignment on BUAnimHumanoidCS_AdvancedMonsterLocomotion_UpdateMoveLoopOutput");
//static_assert(sizeof(BUAnimHumanoidCS_AdvancedMonsterLocomotion_UpdateMoveLoopOutput) == 0x000020, "Wrong size on BUAnimHumanoidCS_AdvancedMonsterLocomotion_UpdateMoveLoopOutput");
//static_assert(offsetof(BUAnimHumanoidCS_AdvancedMonsterLocomotion_UpdateMoveLoopOutput, Context) == 0x000000, "Member 'BUAnimHumanoidCS_AdvancedMonsterLocomotion_UpdateMoveLoopOutput::Context' has a wrong offset!");
//static_assert(offsetof(BUAnimHumanoidCS_AdvancedMonsterLocomotion_UpdateMoveLoopOutput, Node) == 0x000010, "Member 'BUAnimHumanoidCS_AdvancedMonsterLocomotion_UpdateMoveLoopOutput::Node' has a wrong offset!");

// Function b1-Managed.BUAnimHumanoidCS_AdvancedMonsterLocomotion.UpdateMoveStopOutput
// 0x0020 (0x0020 - 0x0000)
struct BUAnimHumanoidCS_AdvancedMonsterLocomotion_UpdateMoveStopOutput final
{
public:
	struct FAnimUpdateContext                     Context;                                           // 0x0000(0x0010)(Parm, OutParm, ReferenceParm)
	struct FAnimNodeReference                     Node;                                              // 0x0010(0x0010)(Parm, OutParm, ReferenceParm, NoDestructor)
};
//static_assert(alignof(BUAnimHumanoidCS_AdvancedMonsterLocomotion_UpdateMoveStopOutput) == 0x000008, "Wrong alignment on BUAnimHumanoidCS_AdvancedMonsterLocomotion_UpdateMoveStopOutput");
//static_assert(sizeof(BUAnimHumanoidCS_AdvancedMonsterLocomotion_UpdateMoveStopOutput) == 0x000020, "Wrong size on BUAnimHumanoidCS_AdvancedMonsterLocomotion_UpdateMoveStopOutput");
//static_assert(offsetof(BUAnimHumanoidCS_AdvancedMonsterLocomotion_UpdateMoveStopOutput, Context) == 0x000000, "Member 'BUAnimHumanoidCS_AdvancedMonsterLocomotion_UpdateMoveStopOutput::Context' has a wrong offset!");
//static_assert(offsetof(BUAnimHumanoidCS_AdvancedMonsterLocomotion_UpdateMoveStopOutput, Node) == 0x000010, "Member 'BUAnimHumanoidCS_AdvancedMonsterLocomotion_UpdateMoveStopOutput::Node' has a wrong offset!");

// Function b1-Managed.BUAnimHumanoidCS_AdvancedMonsterLocomotion.ShouldMoveLoopLeftFL
// 0x0001 (0x0001 - 0x0000)
struct BUAnimHumanoidCS_AdvancedMonsterLocomotion_ShouldMoveLoopLeftFL final
{
public:
	uint8                                         ReturnValue : 1;                                   // 0x0000(0x0001)(BitIndex: 0x00, PropSize: 0x0001 (Parm, OutParm, ReturnParm, NoDestructor, HasGetValueTypeHash))
};
//static_assert(alignof(BUAnimHumanoidCS_AdvancedMonsterLocomotion_ShouldMoveLoopLeftFL) == 0x000001, "Wrong alignment on BUAnimHumanoidCS_AdvancedMonsterLocomotion_ShouldMoveLoopLeftFL");
//static_assert(sizeof(BUAnimHumanoidCS_AdvancedMonsterLocomotion_ShouldMoveLoopLeftFL) == 0x000001, "Wrong size on BUAnimHumanoidCS_AdvancedMonsterLocomotion_ShouldMoveLoopLeftFL");

// Function b1-Managed.BUAnimHumanoidCS_AdvancedMonsterLocomotion.ShouldMoveLoopLeftFR
// 0x0001 (0x0001 - 0x0000)
struct BUAnimHumanoidCS_AdvancedMonsterLocomotion_ShouldMoveLoopLeftFR final
{
public:
	uint8                                         ReturnValue : 1;                                   // 0x0000(0x0001)(BitIndex: 0x00, PropSize: 0x0001 (Parm, OutParm, ReturnParm, NoDestructor, HasGetValueTypeHash))
};
//static_assert(alignof(BUAnimHumanoidCS_AdvancedMonsterLocomotion_ShouldMoveLoopLeftFR) == 0x000001, "Wrong alignment on BUAnimHumanoidCS_AdvancedMonsterLocomotion_ShouldMoveLoopLeftFR");
//static_assert(sizeof(BUAnimHumanoidCS_AdvancedMonsterLocomotion_ShouldMoveLoopLeftFR) == 0x000001, "Wrong size on BUAnimHumanoidCS_AdvancedMonsterLocomotion_ShouldMoveLoopLeftFR");

// Function b1-Managed.BUAnimHumanoidCS_AdvancedMonsterLocomotion.UpdateMoveTurnOutput
// 0x0020 (0x0020 - 0x0000)
struct BUAnimHumanoidCS_AdvancedMonsterLocomotion_UpdateMoveTurnOutput final
{
public:
	struct FAnimUpdateContext                     Context;                                           // 0x0000(0x0010)(Parm, OutParm, ReferenceParm)
	struct FAnimNodeReference                     Node;                                              // 0x0010(0x0010)(Parm, OutParm, ReferenceParm, NoDestructor)
};
//static_assert(alignof(BUAnimHumanoidCS_AdvancedMonsterLocomotion_UpdateMoveTurnOutput) == 0x000008, "Wrong alignment on BUAnimHumanoidCS_AdvancedMonsterLocomotion_UpdateMoveTurnOutput");
//static_assert(sizeof(BUAnimHumanoidCS_AdvancedMonsterLocomotion_UpdateMoveTurnOutput) == 0x000020, "Wrong size on BUAnimHumanoidCS_AdvancedMonsterLocomotion_UpdateMoveTurnOutput");
//static_assert(offsetof(BUAnimHumanoidCS_AdvancedMonsterLocomotion_UpdateMoveTurnOutput, Context) == 0x000000, "Member 'BUAnimHumanoidCS_AdvancedMonsterLocomotion_UpdateMoveTurnOutput::Context' has a wrong offset!");
//static_assert(offsetof(BUAnimHumanoidCS_AdvancedMonsterLocomotion_UpdateMoveTurnOutput, Node) == 0x000010, "Member 'BUAnimHumanoidCS_AdvancedMonsterLocomotion_UpdateMoveTurnOutput::Node' has a wrong offset!");

// Function b1-Managed.BUAnimHumanoidCS_AdvancedMonsterLocomotion.ShouldMoveLoopLeftBR
// 0x0001 (0x0001 - 0x0000)
struct BUAnimHumanoidCS_AdvancedMonsterLocomotion_ShouldMoveLoopLeftBR final
{
public:
	uint8                                         ReturnValue : 1;                                   // 0x0000(0x0001)(BitIndex: 0x00, PropSize: 0x0001 (Parm, OutParm, ReturnParm, NoDestructor, HasGetValueTypeHash))
};
//static_assert(alignof(BUAnimHumanoidCS_AdvancedMonsterLocomotion_ShouldMoveLoopLeftBR) == 0x000001, "Wrong alignment on BUAnimHumanoidCS_AdvancedMonsterLocomotion_ShouldMoveLoopLeftBR");
//static_assert(sizeof(BUAnimHumanoidCS_AdvancedMonsterLocomotion_ShouldMoveLoopLeftBR) == 0x000001, "Wrong size on BUAnimHumanoidCS_AdvancedMonsterLocomotion_ShouldMoveLoopLeftBR");

// Function b1-Managed.BUAnimHumanoidCS_AdvancedMonsterLocomotion.ShouldMoveLoopFLToBL
// 0x0001 (0x0001 - 0x0000)
struct BUAnimHumanoidCS_AdvancedMonsterLocomotion_ShouldMoveLoopFLToBL final
{
public:
	uint8                                         ReturnValue : 1;                                   // 0x0000(0x0001)(BitIndex: 0x00, PropSize: 0x0001 (Parm, OutParm, ReturnParm, NoDestructor, HasGetValueTypeHash))
};
//static_assert(alignof(BUAnimHumanoidCS_AdvancedMonsterLocomotion_ShouldMoveLoopFLToBL) == 0x000001, "Wrong alignment on BUAnimHumanoidCS_AdvancedMonsterLocomotion_ShouldMoveLoopFLToBL");
//static_assert(sizeof(BUAnimHumanoidCS_AdvancedMonsterLocomotion_ShouldMoveLoopFLToBL) == 0x000001, "Wrong size on BUAnimHumanoidCS_AdvancedMonsterLocomotion_ShouldMoveLoopFLToBL");

// Function b1-Managed.BUAnimHumanoidCS_AdvancedMonsterLocomotion.ShouldMoveLoopFRToBR
// 0x0001 (0x0001 - 0x0000)
struct BUAnimHumanoidCS_AdvancedMonsterLocomotion_ShouldMoveLoopFRToBR final
{
public:
	uint8                                         ReturnValue : 1;                                   // 0x0000(0x0001)(BitIndex: 0x00, PropSize: 0x0001 (Parm, OutParm, ReturnParm, NoDestructor, HasGetValueTypeHash))
};
//static_assert(alignof(BUAnimHumanoidCS_AdvancedMonsterLocomotion_ShouldMoveLoopFRToBR) == 0x000001, "Wrong alignment on BUAnimHumanoidCS_AdvancedMonsterLocomotion_ShouldMoveLoopFRToBR");
//static_assert(sizeof(BUAnimHumanoidCS_AdvancedMonsterLocomotion_ShouldMoveLoopFRToBR) == 0x000001, "Wrong size on BUAnimHumanoidCS_AdvancedMonsterLocomotion_ShouldMoveLoopFRToBR");

// Function b1-Managed.BUAnimHumanoidCS_AdvancedMonsterLocomotion.ShouldMoveLoopBRToFR
// 0x0001 (0x0001 - 0x0000)
struct BUAnimHumanoidCS_AdvancedMonsterLocomotion_ShouldMoveLoopBRToFR final
{
public:
	uint8                                         ReturnValue : 1;                                   // 0x0000(0x0001)(BitIndex: 0x00, PropSize: 0x0001 (Parm, OutParm, ReturnParm, NoDestructor, HasGetValueTypeHash))
};
//static_assert(alignof(BUAnimHumanoidCS_AdvancedMonsterLocomotion_ShouldMoveLoopBRToFR) == 0x000001, "Wrong alignment on BUAnimHumanoidCS_AdvancedMonsterLocomotion_ShouldMoveLoopBRToFR");
//static_assert(sizeof(BUAnimHumanoidCS_AdvancedMonsterLocomotion_ShouldMoveLoopBRToFR) == 0x000001, "Wrong size on BUAnimHumanoidCS_AdvancedMonsterLocomotion_ShouldMoveLoopBRToFR");

// Function b1-Managed.BUAnimHumanoidCS_AdvancedMonsterLocomotion.ShouldMoveLoopToBwd
// 0x0001 (0x0001 - 0x0000)
struct BUAnimHumanoidCS_AdvancedMonsterLocomotion_ShouldMoveLoopToBwd final
{
public:
	uint8                                         ReturnValue : 1;                                   // 0x0000(0x0001)(BitIndex: 0x00, PropSize: 0x0001 (Parm, OutParm, ReturnParm, NoDestructor, HasGetValueTypeHash))
};
//static_assert(alignof(BUAnimHumanoidCS_AdvancedMonsterLocomotion_ShouldMoveLoopToBwd) == 0x000001, "Wrong alignment on BUAnimHumanoidCS_AdvancedMonsterLocomotion_ShouldMoveLoopToBwd");
//static_assert(sizeof(BUAnimHumanoidCS_AdvancedMonsterLocomotion_ShouldMoveLoopToBwd) == 0x000001, "Wrong size on BUAnimHumanoidCS_AdvancedMonsterLocomotion_ShouldMoveLoopToBwd");

// Function b1-Managed.BUAnimHumanoidCS_AdvancedMonsterLocomotion.ShouldMoveLoopToFwd
// 0x0001 (0x0001 - 0x0000)
struct BUAnimHumanoidCS_AdvancedMonsterLocomotion_ShouldMoveLoopToFwd final
{
public:
	uint8                                         ReturnValue : 1;                                   // 0x0000(0x0001)(BitIndex: 0x00, PropSize: 0x0001 (Parm, OutParm, ReturnParm, NoDestructor, HasGetValueTypeHash))
};
//static_assert(alignof(BUAnimHumanoidCS_AdvancedMonsterLocomotion_ShouldMoveLoopToFwd) == 0x000001, "Wrong alignment on BUAnimHumanoidCS_AdvancedMonsterLocomotion_ShouldMoveLoopToFwd");
//static_assert(sizeof(BUAnimHumanoidCS_AdvancedMonsterLocomotion_ShouldMoveLoopToFwd) == 0x000001, "Wrong size on BUAnimHumanoidCS_AdvancedMonsterLocomotion_ShouldMoveLoopToFwd");

// Function b1-Managed.BUAnimHumanoidCS_AdvancedMonsterLocomotion.SetupMoveLoopOutput
// 0x0020 (0x0020 - 0x0000)
struct BUAnimHumanoidCS_AdvancedMonsterLocomotion_SetupMoveLoopOutput final
{
public:
	struct FAnimUpdateContext                     Context;                                           // 0x0000(0x0010)(Parm, OutParm, ReferenceParm)
	struct FAnimNodeReference                     Node;                                              // 0x0010(0x0010)(Parm, OutParm, ReferenceParm, NoDestructor)
};
//static_assert(alignof(BUAnimHumanoidCS_AdvancedMonsterLocomotion_SetupMoveLoopOutput) == 0x000008, "Wrong alignment on BUAnimHumanoidCS_AdvancedMonsterLocomotion_SetupMoveLoopOutput");
//static_assert(sizeof(BUAnimHumanoidCS_AdvancedMonsterLocomotion_SetupMoveLoopOutput) == 0x000020, "Wrong size on BUAnimHumanoidCS_AdvancedMonsterLocomotion_SetupMoveLoopOutput");
//static_assert(offsetof(BUAnimHumanoidCS_AdvancedMonsterLocomotion_SetupMoveLoopOutput, Context) == 0x000000, "Member 'BUAnimHumanoidCS_AdvancedMonsterLocomotion_SetupMoveLoopOutput::Context' has a wrong offset!");
//static_assert(offsetof(BUAnimHumanoidCS_AdvancedMonsterLocomotion_SetupMoveLoopOutput, Node) == 0x000010, "Member 'BUAnimHumanoidCS_AdvancedMonsterLocomotion_SetupMoveLoopOutput::Node' has a wrong offset!");

// Function b1-Managed.BUAnimHumanoidCS_AdvancedMonsterLocomotion.UpdateMoveStartAnim
// 0x0020 (0x0020 - 0x0000)
struct BUAnimHumanoidCS_AdvancedMonsterLocomotion_UpdateMoveStartAnim final
{
public:
	struct FAnimUpdateContext                     Context;                                           // 0x0000(0x0010)(Parm, OutParm, ReferenceParm)
	struct FAnimNodeReference                     Node;                                              // 0x0010(0x0010)(Parm, OutParm, ReferenceParm, NoDestructor)
};
//static_assert(alignof(BUAnimHumanoidCS_AdvancedMonsterLocomotion_UpdateMoveStartAnim) == 0x000008, "Wrong alignment on BUAnimHumanoidCS_AdvancedMonsterLocomotion_UpdateMoveStartAnim");
//static_assert(sizeof(BUAnimHumanoidCS_AdvancedMonsterLocomotion_UpdateMoveStartAnim) == 0x000020, "Wrong size on BUAnimHumanoidCS_AdvancedMonsterLocomotion_UpdateMoveStartAnim");
//static_assert(offsetof(BUAnimHumanoidCS_AdvancedMonsterLocomotion_UpdateMoveStartAnim, Context) == 0x000000, "Member 'BUAnimHumanoidCS_AdvancedMonsterLocomotion_UpdateMoveStartAnim::Context' has a wrong offset!");
//static_assert(offsetof(BUAnimHumanoidCS_AdvancedMonsterLocomotion_UpdateMoveStartAnim, Node) == 0x000010, "Member 'BUAnimHumanoidCS_AdvancedMonsterLocomotion_UpdateMoveStartAnim::Node' has a wrong offset!");

// Function b1-Managed.BUAnimHumanoidCS_AdvancedMonsterLocomotion.SetupMoveStopOutput
// 0x0020 (0x0020 - 0x0000)
struct BUAnimHumanoidCS_AdvancedMonsterLocomotion_SetupMoveStopOutput final
{
public:
	struct FAnimUpdateContext                     Context;                                           // 0x0000(0x0010)(Parm, OutParm, ReferenceParm)
	struct FAnimNodeReference                     Node;                                              // 0x0010(0x0010)(Parm, OutParm, ReferenceParm, NoDestructor)
};
//static_assert(alignof(BUAnimHumanoidCS_AdvancedMonsterLocomotion_SetupMoveStopOutput) == 0x000008, "Wrong alignment on BUAnimHumanoidCS_AdvancedMonsterLocomotion_SetupMoveStopOutput");
//static_assert(sizeof(BUAnimHumanoidCS_AdvancedMonsterLocomotion_SetupMoveStopOutput) == 0x000020, "Wrong size on BUAnimHumanoidCS_AdvancedMonsterLocomotion_SetupMoveStopOutput");
//static_assert(offsetof(BUAnimHumanoidCS_AdvancedMonsterLocomotion_SetupMoveStopOutput, Context) == 0x000000, "Member 'BUAnimHumanoidCS_AdvancedMonsterLocomotion_SetupMoveStopOutput::Context' has a wrong offset!");
//static_assert(offsetof(BUAnimHumanoidCS_AdvancedMonsterLocomotion_SetupMoveStopOutput, Node) == 0x000010, "Member 'BUAnimHumanoidCS_AdvancedMonsterLocomotion_SetupMoveStopOutput::Node' has a wrong offset!");

// Function b1-Managed.BUAnimHumanoidCS_AdvancedMonsterLocomotion.SetupMoveTurnOutput
// 0x0020 (0x0020 - 0x0000)
struct BUAnimHumanoidCS_AdvancedMonsterLocomotion_SetupMoveTurnOutput final
{
public:
	struct FAnimUpdateContext                     Context;                                           // 0x0000(0x0010)(Parm, OutParm, ReferenceParm)
	struct FAnimNodeReference                     Node;                                              // 0x0010(0x0010)(Parm, OutParm, ReferenceParm, NoDestructor)
};
//static_assert(alignof(BUAnimHumanoidCS_AdvancedMonsterLocomotion_SetupMoveTurnOutput) == 0x000008, "Wrong alignment on BUAnimHumanoidCS_AdvancedMonsterLocomotion_SetupMoveTurnOutput");
//static_assert(sizeof(BUAnimHumanoidCS_AdvancedMonsterLocomotion_SetupMoveTurnOutput) == 0x000020, "Wrong size on BUAnimHumanoidCS_AdvancedMonsterLocomotion_SetupMoveTurnOutput");
//static_assert(offsetof(BUAnimHumanoidCS_AdvancedMonsterLocomotion_SetupMoveTurnOutput, Context) == 0x000000, "Member 'BUAnimHumanoidCS_AdvancedMonsterLocomotion_SetupMoveTurnOutput::Context' has a wrong offset!");
//static_assert(offsetof(BUAnimHumanoidCS_AdvancedMonsterLocomotion_SetupMoveTurnOutput, Node) == 0x000010, "Member 'BUAnimHumanoidCS_AdvancedMonsterLocomotion_SetupMoveTurnOutput::Node' has a wrong offset!");

// Function b1-Managed.BUAnimHumanoidCS_AdvancedMonsterLocomotion.UpdateMoveTurnAnim
// 0x0020 (0x0020 - 0x0000)
struct BUAnimHumanoidCS_AdvancedMonsterLocomotion_UpdateMoveTurnAnim final
{
public:
	struct FAnimUpdateContext                     Context;                                           // 0x0000(0x0010)(Parm, OutParm, ReferenceParm)
	struct FAnimNodeReference                     Node;                                              // 0x0010(0x0010)(Parm, OutParm, ReferenceParm, NoDestructor)
};
//static_assert(alignof(BUAnimHumanoidCS_AdvancedMonsterLocomotion_UpdateMoveTurnAnim) == 0x000008, "Wrong alignment on BUAnimHumanoidCS_AdvancedMonsterLocomotion_UpdateMoveTurnAnim");
//static_assert(sizeof(BUAnimHumanoidCS_AdvancedMonsterLocomotion_UpdateMoveTurnAnim) == 0x000020, "Wrong size on BUAnimHumanoidCS_AdvancedMonsterLocomotion_UpdateMoveTurnAnim");
//static_assert(offsetof(BUAnimHumanoidCS_AdvancedMonsterLocomotion_UpdateMoveTurnAnim, Context) == 0x000000, "Member 'BUAnimHumanoidCS_AdvancedMonsterLocomotion_UpdateMoveTurnAnim::Context' has a wrong offset!");
//static_assert(offsetof(BUAnimHumanoidCS_AdvancedMonsterLocomotion_UpdateMoveTurnAnim, Node) == 0x000010, "Member 'BUAnimHumanoidCS_AdvancedMonsterLocomotion_UpdateMoveTurnAnim::Node' has a wrong offset!");

// Function b1-Managed.BUAnimHumanoidCS_AdvancedMonsterLocomotion.UpdateMoveStopAnim
// 0x0020 (0x0020 - 0x0000)
struct BUAnimHumanoidCS_AdvancedMonsterLocomotion_UpdateMoveStopAnim final
{
public:
	struct FAnimUpdateContext                     Context;                                           // 0x0000(0x0010)(Parm, OutParm, ReferenceParm)
	struct FAnimNodeReference                     Node;                                              // 0x0010(0x0010)(Parm, OutParm, ReferenceParm, NoDestructor)
};
//static_assert(alignof(BUAnimHumanoidCS_AdvancedMonsterLocomotion_UpdateMoveStopAnim) == 0x000008, "Wrong alignment on BUAnimHumanoidCS_AdvancedMonsterLocomotion_UpdateMoveStopAnim");
//static_assert(sizeof(BUAnimHumanoidCS_AdvancedMonsterLocomotion_UpdateMoveStopAnim) == 0x000020, "Wrong size on BUAnimHumanoidCS_AdvancedMonsterLocomotion_UpdateMoveStopAnim");
//static_assert(offsetof(BUAnimHumanoidCS_AdvancedMonsterLocomotion_UpdateMoveStopAnim, Context) == 0x000000, "Member 'BUAnimHumanoidCS_AdvancedMonsterLocomotion_UpdateMoveStopAnim::Context' has a wrong offset!");
//static_assert(offsetof(BUAnimHumanoidCS_AdvancedMonsterLocomotion_UpdateMoveStopAnim, Node) == 0x000010, "Member 'BUAnimHumanoidCS_AdvancedMonsterLocomotion_UpdateMoveStopAnim::Node' has a wrong offset!");

// Function b1-Managed.BUAnimHumanoidCS_AdvancedMonsterLocomotion.SetupMoveStartAnim
// 0x0020 (0x0020 - 0x0000)
struct BUAnimHumanoidCS_AdvancedMonsterLocomotion_SetupMoveStartAnim final
{
public:
	struct FAnimUpdateContext                     Context;                                           // 0x0000(0x0010)(Parm, OutParm, ReferenceParm)
	struct FAnimNodeReference                     Node;                                              // 0x0010(0x0010)(Parm, OutParm, ReferenceParm, NoDestructor)
};
//static_assert(alignof(BUAnimHumanoidCS_AdvancedMonsterLocomotion_SetupMoveStartAnim) == 0x000008, "Wrong alignment on BUAnimHumanoidCS_AdvancedMonsterLocomotion_SetupMoveStartAnim");
//static_assert(sizeof(BUAnimHumanoidCS_AdvancedMonsterLocomotion_SetupMoveStartAnim) == 0x000020, "Wrong size on BUAnimHumanoidCS_AdvancedMonsterLocomotion_SetupMoveStartAnim");
//static_assert(offsetof(BUAnimHumanoidCS_AdvancedMonsterLocomotion_SetupMoveStartAnim, Context) == 0x000000, "Member 'BUAnimHumanoidCS_AdvancedMonsterLocomotion_SetupMoveStartAnim::Context' has a wrong offset!");
//static_assert(offsetof(BUAnimHumanoidCS_AdvancedMonsterLocomotion_SetupMoveStartAnim, Node) == 0x000010, "Member 'BUAnimHumanoidCS_AdvancedMonsterLocomotion_SetupMoveStartAnim::Node' has a wrong offset!");

// Function b1-Managed.BUAnimHumanoidCS_AdvancedMonsterLocomotion.ShouldMoveLoopToFL
// 0x0001 (0x0001 - 0x0000)
struct BUAnimHumanoidCS_AdvancedMonsterLocomotion_ShouldMoveLoopToFL final
{
public:
	uint8                                         ReturnValue : 1;                                   // 0x0000(0x0001)(BitIndex: 0x00, PropSize: 0x0001 (Parm, OutParm, ReturnParm, NoDestructor, HasGetValueTypeHash))
};
//static_assert(alignof(BUAnimHumanoidCS_AdvancedMonsterLocomotion_ShouldMoveLoopToFL) == 0x000001, "Wrong alignment on BUAnimHumanoidCS_AdvancedMonsterLocomotion_ShouldMoveLoopToFL");
//static_assert(sizeof(BUAnimHumanoidCS_AdvancedMonsterLocomotion_ShouldMoveLoopToFL) == 0x000001, "Wrong size on BUAnimHumanoidCS_AdvancedMonsterLocomotion_ShouldMoveLoopToFL");

// Function b1-Managed.BUAnimHumanoidCS_AdvancedMonsterLocomotion.ShouldMoveLoopToFR
// 0x0001 (0x0001 - 0x0000)
struct BUAnimHumanoidCS_AdvancedMonsterLocomotion_ShouldMoveLoopToFR final
{
public:
	uint8                                         ReturnValue : 1;                                   // 0x0000(0x0001)(BitIndex: 0x00, PropSize: 0x0001 (Parm, OutParm, ReturnParm, NoDestructor, HasGetValueTypeHash))
};
//static_assert(alignof(BUAnimHumanoidCS_AdvancedMonsterLocomotion_ShouldMoveLoopToFR) == 0x000001, "Wrong alignment on BUAnimHumanoidCS_AdvancedMonsterLocomotion_ShouldMoveLoopToFR");
//static_assert(sizeof(BUAnimHumanoidCS_AdvancedMonsterLocomotion_ShouldMoveLoopToFR) == 0x000001, "Wrong size on BUAnimHumanoidCS_AdvancedMonsterLocomotion_ShouldMoveLoopToFR");

// Function b1-Managed.BUAnimHumanoidCS_AdvancedMonsterLocomotion.ShouldMoveLoopToBL
// 0x0001 (0x0001 - 0x0000)
struct BUAnimHumanoidCS_AdvancedMonsterLocomotion_ShouldMoveLoopToBL final
{
public:
	uint8                                         ReturnValue : 1;                                   // 0x0000(0x0001)(BitIndex: 0x00, PropSize: 0x0001 (Parm, OutParm, ReturnParm, NoDestructor, HasGetValueTypeHash))
};
//static_assert(alignof(BUAnimHumanoidCS_AdvancedMonsterLocomotion_ShouldMoveLoopToBL) == 0x000001, "Wrong alignment on BUAnimHumanoidCS_AdvancedMonsterLocomotion_ShouldMoveLoopToBL");
//static_assert(sizeof(BUAnimHumanoidCS_AdvancedMonsterLocomotion_ShouldMoveLoopToBL) == 0x000001, "Wrong size on BUAnimHumanoidCS_AdvancedMonsterLocomotion_ShouldMoveLoopToBL");

// Function b1-Managed.BUAnimHumanoidCS_AdvancedMonsterLocomotion.ShouldMoveLoopToBR
// 0x0001 (0x0001 - 0x0000)
struct BUAnimHumanoidCS_AdvancedMonsterLocomotion_ShouldMoveLoopToBR final
{
public:
	uint8                                         ReturnValue : 1;                                   // 0x0000(0x0001)(BitIndex: 0x00, PropSize: 0x0001 (Parm, OutParm, ReturnParm, NoDestructor, HasGetValueTypeHash))
};
//static_assert(alignof(BUAnimHumanoidCS_AdvancedMonsterLocomotion_ShouldMoveLoopToBR) == 0x000001, "Wrong alignment on BUAnimHumanoidCS_AdvancedMonsterLocomotion_ShouldMoveLoopToBR");
//static_assert(sizeof(BUAnimHumanoidCS_AdvancedMonsterLocomotion_ShouldMoveLoopToBR) == 0x000001, "Wrong size on BUAnimHumanoidCS_AdvancedMonsterLocomotion_ShouldMoveLoopToBR");

// Function b1-Managed.BUAnimHumanoidCS_AdvancedMonsterLocomotion.SetupMoveTurnAnim
// 0x0020 (0x0020 - 0x0000)
struct BUAnimHumanoidCS_AdvancedMonsterLocomotion_SetupMoveTurnAnim final
{
public:
	struct FAnimUpdateContext                     Context;                                           // 0x0000(0x0010)(Parm, OutParm, ReferenceParm)
	struct FAnimNodeReference                     Node;                                              // 0x0010(0x0010)(Parm, OutParm, ReferenceParm, NoDestructor)
};
//static_assert(alignof(BUAnimHumanoidCS_AdvancedMonsterLocomotion_SetupMoveTurnAnim) == 0x000008, "Wrong alignment on BUAnimHumanoidCS_AdvancedMonsterLocomotion_SetupMoveTurnAnim");
//static_assert(sizeof(BUAnimHumanoidCS_AdvancedMonsterLocomotion_SetupMoveTurnAnim) == 0x000020, "Wrong size on BUAnimHumanoidCS_AdvancedMonsterLocomotion_SetupMoveTurnAnim");
//static_assert(offsetof(BUAnimHumanoidCS_AdvancedMonsterLocomotion_SetupMoveTurnAnim, Context) == 0x000000, "Member 'BUAnimHumanoidCS_AdvancedMonsterLocomotion_SetupMoveTurnAnim::Context' has a wrong offset!");
//static_assert(offsetof(BUAnimHumanoidCS_AdvancedMonsterLocomotion_SetupMoveTurnAnim, Node) == 0x000010, "Member 'BUAnimHumanoidCS_AdvancedMonsterLocomotion_SetupMoveTurnAnim::Node' has a wrong offset!");

// Function b1-Managed.BUAnimHumanoidCS_AdvancedMonsterLocomotion.SetupMoveStopAnim
// 0x0020 (0x0020 - 0x0000)
struct BUAnimHumanoidCS_AdvancedMonsterLocomotion_SetupMoveStopAnim final
{
public:
	struct FAnimUpdateContext                     Context;                                           // 0x0000(0x0010)(Parm, OutParm, ReferenceParm)
	struct FAnimNodeReference                     Node;                                              // 0x0010(0x0010)(Parm, OutParm, ReferenceParm, NoDestructor)
};
//static_assert(alignof(BUAnimHumanoidCS_AdvancedMonsterLocomotion_SetupMoveStopAnim) == 0x000008, "Wrong alignment on BUAnimHumanoidCS_AdvancedMonsterLocomotion_SetupMoveStopAnim");
//static_assert(sizeof(BUAnimHumanoidCS_AdvancedMonsterLocomotion_SetupMoveStopAnim) == 0x000020, "Wrong size on BUAnimHumanoidCS_AdvancedMonsterLocomotion_SetupMoveStopAnim");
//static_assert(offsetof(BUAnimHumanoidCS_AdvancedMonsterLocomotion_SetupMoveStopAnim, Context) == 0x000000, "Member 'BUAnimHumanoidCS_AdvancedMonsterLocomotion_SetupMoveStopAnim::Context' has a wrong offset!");
//static_assert(offsetof(BUAnimHumanoidCS_AdvancedMonsterLocomotion_SetupMoveStopAnim, Node) == 0x000010, "Member 'BUAnimHumanoidCS_AdvancedMonsterLocomotion_SetupMoveStopAnim::Node' has a wrong offset!");

// Function b1-Managed.BUAnimHumanoidCS_AdvancedMonsterLocomotion.SetupMoveLoopAnim
// 0x0020 (0x0020 - 0x0000)
struct BUAnimHumanoidCS_AdvancedMonsterLocomotion_SetupMoveLoopAnim final
{
public:
	struct FAnimUpdateContext                     Context;                                           // 0x0000(0x0010)(Parm, OutParm, ReferenceParm)
	struct FAnimNodeReference                     Node;                                              // 0x0010(0x0010)(Parm, OutParm, ReferenceParm, NoDestructor)
};
//static_assert(alignof(BUAnimHumanoidCS_AdvancedMonsterLocomotion_SetupMoveLoopAnim) == 0x000008, "Wrong alignment on BUAnimHumanoidCS_AdvancedMonsterLocomotion_SetupMoveLoopAnim");
//static_assert(sizeof(BUAnimHumanoidCS_AdvancedMonsterLocomotion_SetupMoveLoopAnim) == 0x000020, "Wrong size on BUAnimHumanoidCS_AdvancedMonsterLocomotion_SetupMoveLoopAnim");
//static_assert(offsetof(BUAnimHumanoidCS_AdvancedMonsterLocomotion_SetupMoveLoopAnim, Context) == 0x000000, "Member 'BUAnimHumanoidCS_AdvancedMonsterLocomotion_SetupMoveLoopAnim::Context' has a wrong offset!");
//static_assert(offsetof(BUAnimHumanoidCS_AdvancedMonsterLocomotion_SetupMoveLoopAnim, Node) == 0x000010, "Member 'BUAnimHumanoidCS_AdvancedMonsterLocomotion_SetupMoveLoopAnim::Node' has a wrong offset!");

// Function b1-Managed.BUAnimHumanoidCS_AdvancedMonsterLocomotion.SetupIdleOutput
// 0x0020 (0x0020 - 0x0000)
struct BUAnimHumanoidCS_AdvancedMonsterLocomotion_SetupIdleOutput final
{
public:
	struct FAnimUpdateContext                     Context;                                           // 0x0000(0x0010)(Parm, OutParm, ReferenceParm)
	struct FAnimNodeReference                     Node;                                              // 0x0010(0x0010)(Parm, OutParm, ReferenceParm, NoDestructor)
};
//static_assert(alignof(BUAnimHumanoidCS_AdvancedMonsterLocomotion_SetupIdleOutput) == 0x000008, "Wrong alignment on BUAnimHumanoidCS_AdvancedMonsterLocomotion_SetupIdleOutput");
//static_assert(sizeof(BUAnimHumanoidCS_AdvancedMonsterLocomotion_SetupIdleOutput) == 0x000020, "Wrong size on BUAnimHumanoidCS_AdvancedMonsterLocomotion_SetupIdleOutput");
//static_assert(offsetof(BUAnimHumanoidCS_AdvancedMonsterLocomotion_SetupIdleOutput, Context) == 0x000000, "Member 'BUAnimHumanoidCS_AdvancedMonsterLocomotion_SetupIdleOutput::Context' has a wrong offset!");
//static_assert(offsetof(BUAnimHumanoidCS_AdvancedMonsterLocomotion_SetupIdleOutput, Node) == 0x000010, "Member 'BUAnimHumanoidCS_AdvancedMonsterLocomotion_SetupIdleOutput::Node' has a wrong offset!");

// Function b1-Managed.BUAnimHumanoidCS_AdvancedMonsterLocomotion.SetupIdleAnim
// 0x0020 (0x0020 - 0x0000)
struct BUAnimHumanoidCS_AdvancedMonsterLocomotion_SetupIdleAnim final
{
public:
	struct FAnimUpdateContext                     Context;                                           // 0x0000(0x0010)(Parm, OutParm, ReferenceParm)
	struct FAnimNodeReference                     Node;                                              // 0x0010(0x0010)(Parm, OutParm, ReferenceParm, NoDestructor)
};
//static_assert(alignof(BUAnimHumanoidCS_AdvancedMonsterLocomotion_SetupIdleAnim) == 0x000008, "Wrong alignment on BUAnimHumanoidCS_AdvancedMonsterLocomotion_SetupIdleAnim");
//static_assert(sizeof(BUAnimHumanoidCS_AdvancedMonsterLocomotion_SetupIdleAnim) == 0x000020, "Wrong size on BUAnimHumanoidCS_AdvancedMonsterLocomotion_SetupIdleAnim");
//static_assert(offsetof(BUAnimHumanoidCS_AdvancedMonsterLocomotion_SetupIdleAnim, Context) == 0x000000, "Member 'BUAnimHumanoidCS_AdvancedMonsterLocomotion_SetupIdleAnim::Context' has a wrong offset!");
//static_assert(offsetof(BUAnimHumanoidCS_AdvancedMonsterLocomotion_SetupIdleAnim, Node) == 0x000010, "Member 'BUAnimHumanoidCS_AdvancedMonsterLocomotion_SetupIdleAnim::Node' has a wrong offset!");

// Function b1-Managed.BUAnimHumanoidCS_AdvancedMonsterLocomotion.ShouldToMove
// 0x0001 (0x0001 - 0x0000)
struct BUAnimHumanoidCS_AdvancedMonsterLocomotion_ShouldToMove final
{
public:
	uint8                                         ReturnValue : 1;                                   // 0x0000(0x0001)(BitIndex: 0x00, PropSize: 0x0001 (Parm, OutParm, ReturnParm, NoDestructor, HasGetValueTypeHash))
};
//static_assert(alignof(BUAnimHumanoidCS_AdvancedMonsterLocomotion_ShouldToMove) == 0x000001, "Wrong alignment on BUAnimHumanoidCS_AdvancedMonsterLocomotion_ShouldToMove");
//static_assert(sizeof(BUAnimHumanoidCS_AdvancedMonsterLocomotion_ShouldToMove) == 0x000001, "Wrong size on BUAnimHumanoidCS_AdvancedMonsterLocomotion_ShouldToMove");

// Function b1-Managed.GPUSplineMesh.ReceiveTick
// 0x0004 (0x0004 - 0x0000)
struct GPUSplineMesh_ReceiveTick final
{
public:
	float                                         DeltaSeconds;                                      // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
//static_assert(alignof(GPUSplineMesh_ReceiveTick) == 0x000004, "Wrong alignment on GPUSplineMesh_ReceiveTick");
//static_assert(sizeof(GPUSplineMesh_ReceiveTick) == 0x000004, "Wrong size on GPUSplineMesh_ReceiveTick");
//static_assert(offsetof(GPUSplineMesh_ReceiveTick, DeltaSeconds) == 0x000000, "Member 'GPUSplineMesh_ReceiveTick::DeltaSeconds' has a wrong offset!");

// Function b1-Managed.BED_StateNode_CustomEnter.GetContextOutputsInCS
// 0x0010 (0x0010 - 0x0000)
struct BED_StateNode_CustomEnter_GetContextOutputsInCS final
{
public:
	TArray<class FName>                           ReturnValue;                                       // 0x0000(0x0010)(Parm, OutParm, ReturnParm)
};
//static_assert(alignof(BED_StateNode_CustomEnter_GetContextOutputsInCS) == 0x000008, "Wrong alignment on BED_StateNode_CustomEnter_GetContextOutputsInCS");
//static_assert(sizeof(BED_StateNode_CustomEnter_GetContextOutputsInCS) == 0x000010, "Wrong size on BED_StateNode_CustomEnter_GetContextOutputsInCS");
//static_assert(offsetof(BED_StateNode_CustomEnter_GetContextOutputsInCS, ReturnValue) == 0x000000, "Member 'BED_StateNode_CustomEnter_GetContextOutputsInCS::ReturnValue' has a wrong offset!");

// Function b1-Managed.BED_StateNode_CustomExit.GetContextInputsInCS
// 0x0010 (0x0010 - 0x0000)
struct BED_StateNode_CustomExit_GetContextInputsInCS final
{
public:
	TArray<class FName>                           ReturnValue;                                       // 0x0000(0x0010)(Parm, OutParm, ReturnParm)
};
//static_assert(alignof(BED_StateNode_CustomExit_GetContextInputsInCS) == 0x000008, "Wrong alignment on BED_StateNode_CustomExit_GetContextInputsInCS");
//static_assert(sizeof(BED_StateNode_CustomExit_GetContextInputsInCS) == 0x000010, "Wrong size on BED_StateNode_CustomExit_GetContextInputsInCS");
//static_assert(offsetof(BED_StateNode_CustomExit_GetContextInputsInCS, ReturnValue) == 0x000000, "Member 'BED_StateNode_CustomExit_GetContextInputsInCS::ReturnValue' has a wrong offset!");

// Function b1-Managed.BGU_EQSPointRecorderActor.OnPostEditMove
// 0x0001 (0x0001 - 0x0000)
struct BGU_EQSPointRecorderActor_OnPostEditMove final
{
public:
	uint8                                         bFinish : 1;                                       // 0x0000(0x0001)(BitIndex: 0x00, PropSize: 0x0001 (Parm, NoDestructor, HasGetValueTypeHash))
};
//static_assert(alignof(BGU_EQSPointRecorderActor_OnPostEditMove) == 0x000001, "Wrong alignment on BGU_EQSPointRecorderActor_OnPostEditMove");
//static_assert(sizeof(BGU_EQSPointRecorderActor_OnPostEditMove) == 0x000001, "Wrong size on BGU_EQSPointRecorderActor_OnPostEditMove");

// Function b1-Managed.BED_BehaviorNode_ControlChildActor.GetNodeDescriptionInCS
// 0x0010 (0x0010 - 0x0000)
struct BED_BehaviorNode_ControlChildActor_GetNodeDescriptionInCS final
{
public:
	class FString                                 ReturnValue;                                       // 0x0000(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash)
};
//static_assert(alignof(BED_BehaviorNode_ControlChildActor_GetNodeDescriptionInCS) == 0x000008, "Wrong alignment on BED_BehaviorNode_ControlChildActor_GetNodeDescriptionInCS");
//static_assert(sizeof(BED_BehaviorNode_ControlChildActor_GetNodeDescriptionInCS) == 0x000010, "Wrong size on BED_BehaviorNode_ControlChildActor_GetNodeDescriptionInCS");
//static_assert(offsetof(BED_BehaviorNode_ControlChildActor_GetNodeDescriptionInCS, ReturnValue) == 0x000000, "Member 'BED_BehaviorNode_ControlChildActor_GetNodeDescriptionInCS::ReturnValue' has a wrong offset!");

// Function b1-Managed.BED_BehaviorNode_PlayLevelSeq.GetNodeDescriptionInCS
// 0x0010 (0x0010 - 0x0000)
struct BED_BehaviorNode_PlayLevelSeq_GetNodeDescriptionInCS final
{
public:
	class FString                                 ReturnValue;                                       // 0x0000(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash)
};
//static_assert(alignof(BED_BehaviorNode_PlayLevelSeq_GetNodeDescriptionInCS) == 0x000008, "Wrong alignment on BED_BehaviorNode_PlayLevelSeq_GetNodeDescriptionInCS");
//static_assert(sizeof(BED_BehaviorNode_PlayLevelSeq_GetNodeDescriptionInCS) == 0x000010, "Wrong size on BED_BehaviorNode_PlayLevelSeq_GetNodeDescriptionInCS");
//static_assert(offsetof(BED_BehaviorNode_PlayLevelSeq_GetNodeDescriptionInCS, ReturnValue) == 0x000000, "Member 'BED_BehaviorNode_PlayLevelSeq_GetNodeDescriptionInCS::ReturnValue' has a wrong offset!");

// Function b1-Managed.BED_MovieNode_PerformerPostEvent.GetNodeDescriptionInCS
// 0x0010 (0x0010 - 0x0000)
struct BED_MovieNode_PerformerPostEvent_GetNodeDescriptionInCS final
{
public:
	class FString                                 ReturnValue;                                       // 0x0000(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash)
};
//static_assert(alignof(BED_MovieNode_PerformerPostEvent_GetNodeDescriptionInCS) == 0x000008, "Wrong alignment on BED_MovieNode_PerformerPostEvent_GetNodeDescriptionInCS");
//static_assert(sizeof(BED_MovieNode_PerformerPostEvent_GetNodeDescriptionInCS) == 0x000010, "Wrong size on BED_MovieNode_PerformerPostEvent_GetNodeDescriptionInCS");
//static_assert(offsetof(BED_MovieNode_PerformerPostEvent_GetNodeDescriptionInCS, ReturnValue) == 0x000000, "Member 'BED_MovieNode_PerformerPostEvent_GetNodeDescriptionInCS::ReturnValue' has a wrong offset!");

// Function b1-Managed.BGUPlayerCharacterCS.SetupPlayerInputComponentCS
// 0x0008 (0x0008 - 0x0000)
struct BGUPlayerCharacterCS_SetupPlayerInputComponentCS final
{
public:
	class UInputComponent*                        PlayerInputComponent_0;                            // 0x0000(0x0008)(ExportObject, Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
//static_assert(alignof(BGUPlayerCharacterCS_SetupPlayerInputComponentCS) == 0x000008, "Wrong alignment on BGUPlayerCharacterCS_SetupPlayerInputComponentCS");
//static_assert(sizeof(BGUPlayerCharacterCS_SetupPlayerInputComponentCS) == 0x000008, "Wrong size on BGUPlayerCharacterCS_SetupPlayerInputComponentCS");
//static_assert(offsetof(BGUPlayerCharacterCS_SetupPlayerInputComponentCS, PlayerInputComponent_0) == 0x000000, "Member 'BGUPlayerCharacterCS_SetupPlayerInputComponentCS::PlayerInputComponent_0' has a wrong offset!");

// Function b1-Managed.BGUPlayerCharacterCS.IsPlayerCharacterCS
// 0x0001 (0x0001 - 0x0000)
struct BGUPlayerCharacterCS_IsPlayerCharacterCS final
{
public:
	uint8                                         ReturnValue : 1;                                   // 0x0000(0x0001)(BitIndex: 0x00, PropSize: 0x0001 (Parm, OutParm, ReturnParm, NoDestructor, HasGetValueTypeHash))
};
//static_assert(alignof(BGUPlayerCharacterCS_IsPlayerCharacterCS) == 0x000001, "Wrong alignment on BGUPlayerCharacterCS_IsPlayerCharacterCS");
//static_assert(sizeof(BGUPlayerCharacterCS_IsPlayerCharacterCS) == 0x000001, "Wrong size on BGUPlayerCharacterCS_IsPlayerCharacterCS");

// Function b1-Managed.BGUPlayerCharacterCS.OnConstructionCS
// 0x0060 (0x0060 - 0x0000)
struct BGUPlayerCharacterCS_OnConstructionCS final
{
public:
	struct FTransform                             Transform;                                         // 0x0000(0x0060)(ConstParm, Parm, OutParm, ReferenceParm, IsPlainOldData, NoDestructor)
};
//static_assert(alignof(BGUPlayerCharacterCS_OnConstructionCS) == 0x000010, "Wrong alignment on BGUPlayerCharacterCS_OnConstructionCS");
//static_assert(sizeof(BGUPlayerCharacterCS_OnConstructionCS) == 0x000060, "Wrong size on BGUPlayerCharacterCS_OnConstructionCS");
//static_assert(offsetof(BGUPlayerCharacterCS_OnConstructionCS, Transform) == 0x000000, "Member 'BGUPlayerCharacterCS_OnConstructionCS::Transform' has a wrong offset!");

// Function b1-Managed.BGUPlayerCharacterCS.ReceiveEndPlay
// 0x0001 (0x0001 - 0x0000)
struct BGUPlayerCharacterCS_ReceiveEndPlay final
{
public:
	EEndPlayReason                                EndPlayReason;                                     // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
//static_assert(alignof(BGUPlayerCharacterCS_ReceiveEndPlay) == 0x000001, "Wrong alignment on BGUPlayerCharacterCS_ReceiveEndPlay");
//static_assert(sizeof(BGUPlayerCharacterCS_ReceiveEndPlay) == 0x000001, "Wrong size on BGUPlayerCharacterCS_ReceiveEndPlay");
//static_assert(offsetof(BGUPlayerCharacterCS_ReceiveEndPlay, EndPlayReason) == 0x000000, "Member 'BGUPlayerCharacterCS_ReceiveEndPlay::EndPlayReason' has a wrong offset!");

// Function b1-Managed.BGUPlayerCharacterCS.OnPossessedCS
// 0x0008 (0x0008 - 0x0000)
struct BGUPlayerCharacterCS_OnPossessedCS final
{
public:
	class AController*                            NewController;                                     // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
//static_assert(alignof(BGUPlayerCharacterCS_OnPossessedCS) == 0x000008, "Wrong alignment on BGUPlayerCharacterCS_OnPossessedCS");
//static_assert(sizeof(BGUPlayerCharacterCS_OnPossessedCS) == 0x000008, "Wrong size on BGUPlayerCharacterCS_OnPossessedCS");
//static_assert(offsetof(BGUPlayerCharacterCS_OnPossessedCS, NewController) == 0x000000, "Member 'BGUPlayerCharacterCS_OnPossessedCS::NewController' has a wrong offset!");

// Function b1-Managed.BGUEQSFunctionBinder.OnEQSFinish
// 0x0030 (0x0030 - 0x0000)
struct BGUEQSFunctionBinder_OnEQSFinish final
{
public:
	TArray<struct FVector>                        Results;                                           // 0x0000(0x0010)(Parm)
	TArray<float>                                 Scores;                                            // 0x0010(0x0010)(Parm)
	struct FGSEQSExParam                          ExParam;                                           // 0x0020(0x000C)(Parm, NoDestructor)
	int32                                         QueryID;                                           // 0x002C(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
//static_assert(alignof(BGUEQSFunctionBinder_OnEQSFinish) == 0x000008, "Wrong alignment on BGUEQSFunctionBinder_OnEQSFinish");
//static_assert(sizeof(BGUEQSFunctionBinder_OnEQSFinish) == 0x000030, "Wrong size on BGUEQSFunctionBinder_OnEQSFinish");
//static_assert(offsetof(BGUEQSFunctionBinder_OnEQSFinish, Results) == 0x000000, "Member 'BGUEQSFunctionBinder_OnEQSFinish::Results' has a wrong offset!");
//static_assert(offsetof(BGUEQSFunctionBinder_OnEQSFinish, Scores) == 0x000010, "Member 'BGUEQSFunctionBinder_OnEQSFinish::Scores' has a wrong offset!");
//static_assert(offsetof(BGUEQSFunctionBinder_OnEQSFinish, ExParam) == 0x000020, "Member 'BGUEQSFunctionBinder_OnEQSFinish::ExParam' has a wrong offset!");
//static_assert(offsetof(BGUEQSFunctionBinder_OnEQSFinish, QueryID) == 0x00002C, "Member 'BGUEQSFunctionBinder_OnEQSFinish::QueryID' has a wrong offset!");

// Function b1-Managed.BED_QuestNode_PlayDBCEfxToInteract.GetNodeDescriptionInCS
// 0x0010 (0x0010 - 0x0000)
struct BED_QuestNode_PlayDBCEfxToInteract_GetNodeDescriptionInCS final
{
public:
	class FString                                 ReturnValue;                                       // 0x0000(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash)
};
//static_assert(alignof(BED_QuestNode_PlayDBCEfxToInteract_GetNodeDescriptionInCS) == 0x000008, "Wrong alignment on BED_QuestNode_PlayDBCEfxToInteract_GetNodeDescriptionInCS");
//static_assert(sizeof(BED_QuestNode_PlayDBCEfxToInteract_GetNodeDescriptionInCS) == 0x000010, "Wrong size on BED_QuestNode_PlayDBCEfxToInteract_GetNodeDescriptionInCS");
//static_assert(offsetof(BED_QuestNode_PlayDBCEfxToInteract_GetNodeDescriptionInCS, ReturnValue) == 0x000000, "Member 'BED_QuestNode_PlayDBCEfxToInteract_GetNodeDescriptionInCS::ReturnValue' has a wrong offset!");

// Function b1-Managed.BED_SkillNode.IsSupportViewType
// 0x0002 (0x0002 - 0x0000)
struct BED_SkillNode_IsSupportViewType final
{
public:
	ECalliopeViewType                             InViewType;                                        // 0x0000(0x0001)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         ReturnValue : 1;                                   // 0x0001(0x0001)(BitIndex: 0x00, PropSize: 0x0001 (Parm, OutParm, ReturnParm, NoDestructor, HasGetValueTypeHash))
};
//static_assert(alignof(BED_SkillNode_IsSupportViewType) == 0x000001, "Wrong alignment on BED_SkillNode_IsSupportViewType");
//static_assert(sizeof(BED_SkillNode_IsSupportViewType) == 0x000002, "Wrong size on BED_SkillNode_IsSupportViewType");
//static_assert(offsetof(BED_SkillNode_IsSupportViewType, InViewType) == 0x000000, "Member 'BED_SkillNode_IsSupportViewType::InViewType' has a wrong offset!");

// Function b1-Managed.BGUPlayMontageBinder.OnInterrupted
// 0x0018 (0x0018 - 0x0000)
struct BGUPlayMontageBinder_OnInterrupted final
{
public:
	int32                                         _ReqIdx;                                           // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_4[0x4];                                        // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UAnimInstance*                          AnimInstance;                                      // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UAnimMontage*                           Montage;                                           // 0x0010(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
//static_assert(alignof(BGUPlayMontageBinder_OnInterrupted) == 0x000008, "Wrong alignment on BGUPlayMontageBinder_OnInterrupted");
//static_assert(sizeof(BGUPlayMontageBinder_OnInterrupted) == 0x000018, "Wrong size on BGUPlayMontageBinder_OnInterrupted");
//static_assert(offsetof(BGUPlayMontageBinder_OnInterrupted, _ReqIdx) == 0x000000, "Member 'BGUPlayMontageBinder_OnInterrupted::_ReqIdx' has a wrong offset!");
//static_assert(offsetof(BGUPlayMontageBinder_OnInterrupted, AnimInstance) == 0x000008, "Member 'BGUPlayMontageBinder_OnInterrupted::AnimInstance' has a wrong offset!");
//static_assert(offsetof(BGUPlayMontageBinder_OnInterrupted, Montage) == 0x000010, "Member 'BGUPlayMontageBinder_OnInterrupted::Montage' has a wrong offset!");

// Function b1-Managed.BGUPlayMontageBinder.OnCompleted
// 0x0018 (0x0018 - 0x0000)
struct BGUPlayMontageBinder_OnCompleted final
{
public:
	int32                                         _ReqIdx;                                           // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_4[0x4];                                        // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UAnimInstance*                          AnimInstance;                                      // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UAnimMontage*                           Montage;                                           // 0x0010(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
//static_assert(alignof(BGUPlayMontageBinder_OnCompleted) == 0x000008, "Wrong alignment on BGUPlayMontageBinder_OnCompleted");
//static_assert(sizeof(BGUPlayMontageBinder_OnCompleted) == 0x000018, "Wrong size on BGUPlayMontageBinder_OnCompleted");
//static_assert(offsetof(BGUPlayMontageBinder_OnCompleted, _ReqIdx) == 0x000000, "Member 'BGUPlayMontageBinder_OnCompleted::_ReqIdx' has a wrong offset!");
//static_assert(offsetof(BGUPlayMontageBinder_OnCompleted, AnimInstance) == 0x000008, "Member 'BGUPlayMontageBinder_OnCompleted::AnimInstance' has a wrong offset!");
//static_assert(offsetof(BGUPlayMontageBinder_OnCompleted, Montage) == 0x000010, "Member 'BGUPlayMontageBinder_OnCompleted::Montage' has a wrong offset!");

// Function b1-Managed.BGUPlayMontageBinder.OnBlendOut
// 0x0018 (0x0018 - 0x0000)
struct BGUPlayMontageBinder_OnBlendOut final
{
public:
	int32                                         _ReqIdx;                                           // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_4[0x4];                                        // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UAnimInstance*                          AnimInstance;                                      // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UAnimMontage*                           Montage;                                           // 0x0010(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
//static_assert(alignof(BGUPlayMontageBinder_OnBlendOut) == 0x000008, "Wrong alignment on BGUPlayMontageBinder_OnBlendOut");
//static_assert(sizeof(BGUPlayMontageBinder_OnBlendOut) == 0x000018, "Wrong size on BGUPlayMontageBinder_OnBlendOut");
//static_assert(offsetof(BGUPlayMontageBinder_OnBlendOut, _ReqIdx) == 0x000000, "Member 'BGUPlayMontageBinder_OnBlendOut::_ReqIdx' has a wrong offset!");
//static_assert(offsetof(BGUPlayMontageBinder_OnBlendOut, AnimInstance) == 0x000008, "Member 'BGUPlayMontageBinder_OnBlendOut::AnimInstance' has a wrong offset!");
//static_assert(offsetof(BGUPlayMontageBinder_OnBlendOut, Montage) == 0x000010, "Member 'BGUPlayMontageBinder_OnBlendOut::Montage' has a wrong offset!");

// Function b1-Managed.CustomShadowComp.TickComponentInCS
// 0x0004 (0x0004 - 0x0000)
struct CustomShadowComp_TickComponentInCS final
{
public:
	float                                         DeltaTime;                                         // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
//static_assert(alignof(CustomShadowComp_TickComponentInCS) == 0x000004, "Wrong alignment on CustomShadowComp_TickComponentInCS");
//static_assert(sizeof(CustomShadowComp_TickComponentInCS) == 0x000004, "Wrong size on CustomShadowComp_TickComponentInCS");
//static_assert(offsetof(CustomShadowComp_TickComponentInCS, DeltaTime) == 0x000000, "Member 'CustomShadowComp_TickComponentInCS::DeltaTime' has a wrong offset!");

// Function b1-Managed.GSBackgroundBlurCS.SetCommParams
// 0x0060 (0x0060 - 0x0000)
struct GSBackgroundBlurCS_SetCommParams final
{
public:
	struct FMatCommParams                         InCommParams;                                      // 0x0000(0x0060)(Parm, NoDestructor, HasGetValueTypeHash)
};
//static_assert(alignof(GSBackgroundBlurCS_SetCommParams) == 0x000008, "Wrong alignment on GSBackgroundBlurCS_SetCommParams");
//static_assert(sizeof(GSBackgroundBlurCS_SetCommParams) == 0x000060, "Wrong size on GSBackgroundBlurCS_SetCommParams");
//static_assert(offsetof(GSBackgroundBlurCS_SetCommParams, InCommParams) == 0x000000, "Member 'GSBackgroundBlurCS_SetCommParams::InCommParams' has a wrong offset!");

// Function b1-Managed.BAN_GSPlayerJump.bIsNativeBranchingPointCS
// 0x0001 (0x0001 - 0x0000)
struct BAN_GSPlayerJump_bIsNativeBranchingPointCS final
{
public:
	uint8                                         ReturnValue : 1;                                   // 0x0000(0x0001)(BitIndex: 0x00, PropSize: 0x0001 (Parm, OutParm, ReturnParm, NoDestructor, HasGetValueTypeHash))
};
//static_assert(alignof(BAN_GSPlayerJump_bIsNativeBranchingPointCS) == 0x000001, "Wrong alignment on BAN_GSPlayerJump_bIsNativeBranchingPointCS");
//static_assert(sizeof(BAN_GSPlayerJump_bIsNativeBranchingPointCS) == 0x000001, "Wrong size on BAN_GSPlayerJump_bIsNativeBranchingPointCS");

// Function b1-Managed.BAN_GSPlayerJump.GSNotifyCS
// 0x0040 (0x0040 - 0x0000)
struct BAN_GSPlayerJump_GSNotifyCS final
{
public:
	struct FUStGSNotifyParam                      NotifyParam;                                       // 0x0000(0x0040)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
//static_assert(alignof(BAN_GSPlayerJump_GSNotifyCS) == 0x000008, "Wrong alignment on BAN_GSPlayerJump_GSNotifyCS");
//static_assert(sizeof(BAN_GSPlayerJump_GSNotifyCS) == 0x000040, "Wrong size on BAN_GSPlayerJump_GSNotifyCS");
//static_assert(offsetof(BAN_GSPlayerJump_GSNotifyCS, NotifyParam) == 0x000000, "Member 'BAN_GSPlayerJump_GSNotifyCS::NotifyParam' has a wrong offset!");

// Function b1-Managed.BSN_MediaCache.GetDisplayName
// 0x0010 (0x0010 - 0x0000)
struct BSN_MediaCache_GetDisplayName final
{
public:
	class FString                                 ReturnValue;                                       // 0x0000(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash)
};
//static_assert(alignof(BSN_MediaCache_GetDisplayName) == 0x000008, "Wrong alignment on BSN_MediaCache_GetDisplayName");
//static_assert(sizeof(BSN_MediaCache_GetDisplayName) == 0x000010, "Wrong size on BSN_MediaCache_GetDisplayName");
//static_assert(offsetof(BSN_MediaCache_GetDisplayName, ReturnValue) == 0x000000, "Member 'BSN_MediaCache_GetDisplayName::ReturnValue' has a wrong offset!");

// Function b1-Managed.BSN_MediaCache.OnNotify
// 0x0010 (0x0010 - 0x0000)
struct BSN_MediaCache_OnNotify final
{
public:
	class UCalliopeLevelSequencePlayer*           Player;                                            // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         InStatus;                                          // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         bInBackwards : 1;                                  // 0x000C(0x0001)(BitIndex: 0x00, PropSize: 0x0001 (Parm, NoDestructor, HasGetValueTypeHash))
};
//static_assert(alignof(BSN_MediaCache_OnNotify) == 0x000008, "Wrong alignment on BSN_MediaCache_OnNotify");
//static_assert(sizeof(BSN_MediaCache_OnNotify) == 0x000010, "Wrong size on BSN_MediaCache_OnNotify");
//static_assert(offsetof(BSN_MediaCache_OnNotify, Player) == 0x000000, "Member 'BSN_MediaCache_OnNotify::Player' has a wrong offset!");
//static_assert(offsetof(BSN_MediaCache_OnNotify, InStatus) == 0x000008, "Member 'BSN_MediaCache_OnNotify::InStatus' has a wrong offset!");

// Function b1-Managed.BAN_GSPlayCameraShake.GSNotifyCS
// 0x0040 (0x0040 - 0x0000)
struct BAN_GSPlayCameraShake_GSNotifyCS final
{
public:
	struct FUStGSNotifyParam                      NotifyParam;                                       // 0x0000(0x0040)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
//static_assert(alignof(BAN_GSPlayCameraShake_GSNotifyCS) == 0x000008, "Wrong alignment on BAN_GSPlayCameraShake_GSNotifyCS");
//static_assert(sizeof(BAN_GSPlayCameraShake_GSNotifyCS) == 0x000040, "Wrong size on BAN_GSPlayCameraShake_GSNotifyCS");
//static_assert(offsetof(BAN_GSPlayCameraShake_GSNotifyCS, NotifyParam) == 0x000000, "Member 'BAN_GSPlayCameraShake_GSNotifyCS::NotifyParam' has a wrong offset!");

// Function b1-Managed.BSNS_ShowSpecialUIV2.GetDisplayName
// 0x0010 (0x0010 - 0x0000)
struct BSNS_ShowSpecialUIV2_GetDisplayName final
{
public:
	class FString                                 ReturnValue;                                       // 0x0000(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash)
};
//static_assert(alignof(BSNS_ShowSpecialUIV2_GetDisplayName) == 0x000008, "Wrong alignment on BSNS_ShowSpecialUIV2_GetDisplayName");
//static_assert(sizeof(BSNS_ShowSpecialUIV2_GetDisplayName) == 0x000010, "Wrong size on BSNS_ShowSpecialUIV2_GetDisplayName");
//static_assert(offsetof(BSNS_ShowSpecialUIV2_GetDisplayName, ReturnValue) == 0x000000, "Member 'BSNS_ShowSpecialUIV2_GetDisplayName::ReturnValue' has a wrong offset!");

// Function b1-Managed.BSNS_ShowSpecialUIV2.OnNotifyBegin
// 0x0010 (0x0010 - 0x0000)
struct BSNS_ShowSpecialUIV2_OnNotifyBegin final
{
public:
	class UCalliopeLevelSequencePlayer*           InPlayer;                                          // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         InStatus;                                          // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         bInBackwards : 1;                                  // 0x000C(0x0001)(BitIndex: 0x00, PropSize: 0x0001 (Parm, NoDestructor, HasGetValueTypeHash))
};
//static_assert(alignof(BSNS_ShowSpecialUIV2_OnNotifyBegin) == 0x000008, "Wrong alignment on BSNS_ShowSpecialUIV2_OnNotifyBegin");
//static_assert(sizeof(BSNS_ShowSpecialUIV2_OnNotifyBegin) == 0x000010, "Wrong size on BSNS_ShowSpecialUIV2_OnNotifyBegin");
//static_assert(offsetof(BSNS_ShowSpecialUIV2_OnNotifyBegin, InPlayer) == 0x000000, "Member 'BSNS_ShowSpecialUIV2_OnNotifyBegin::InPlayer' has a wrong offset!");
//static_assert(offsetof(BSNS_ShowSpecialUIV2_OnNotifyBegin, InStatus) == 0x000008, "Member 'BSNS_ShowSpecialUIV2_OnNotifyBegin::InStatus' has a wrong offset!");

// Function b1-Managed.BSNS_ShowSpecialUIV2.OnNotifyEnd
// 0x0010 (0x0010 - 0x0000)
struct BSNS_ShowSpecialUIV2_OnNotifyEnd final
{
public:
	class UCalliopeLevelSequencePlayer*           Player;                                            // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         InStatus;                                          // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         bInBackwards : 1;                                  // 0x000C(0x0001)(BitIndex: 0x00, PropSize: 0x0001 (Parm, NoDestructor, HasGetValueTypeHash))
};
//static_assert(alignof(BSNS_ShowSpecialUIV2_OnNotifyEnd) == 0x000008, "Wrong alignment on BSNS_ShowSpecialUIV2_OnNotifyEnd");
//static_assert(sizeof(BSNS_ShowSpecialUIV2_OnNotifyEnd) == 0x000010, "Wrong size on BSNS_ShowSpecialUIV2_OnNotifyEnd");
//static_assert(offsetof(BSNS_ShowSpecialUIV2_OnNotifyEnd, Player) == 0x000000, "Member 'BSNS_ShowSpecialUIV2_OnNotifyEnd::Player' has a wrong offset!");
//static_assert(offsetof(BSNS_ShowSpecialUIV2_OnNotifyEnd, InStatus) == 0x000008, "Member 'BSNS_ShowSpecialUIV2_OnNotifyEnd::InStatus' has a wrong offset!");

// Function b1-Managed.BANS_GSAddBuff.GSNotifyBeginCS
// 0x0048 (0x0048 - 0x0000)
struct BANS_GSAddBuff_GSNotifyBeginCS final
{
public:
	struct FUStGSNotifyParam                      NotifyParam;                                       // 0x0000(0x0040)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
	float                                         TotalDuration;                                     // 0x0040(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
//static_assert(alignof(BANS_GSAddBuff_GSNotifyBeginCS) == 0x000008, "Wrong alignment on BANS_GSAddBuff_GSNotifyBeginCS");
//static_assert(sizeof(BANS_GSAddBuff_GSNotifyBeginCS) == 0x000048, "Wrong size on BANS_GSAddBuff_GSNotifyBeginCS");
//static_assert(offsetof(BANS_GSAddBuff_GSNotifyBeginCS, NotifyParam) == 0x000000, "Member 'BANS_GSAddBuff_GSNotifyBeginCS::NotifyParam' has a wrong offset!");
//static_assert(offsetof(BANS_GSAddBuff_GSNotifyBeginCS, TotalDuration) == 0x000040, "Member 'BANS_GSAddBuff_GSNotifyBeginCS::TotalDuration' has a wrong offset!");

// Function b1-Managed.BANS_GSAddBuff.GSNotifyTickCS
// 0x0048 (0x0048 - 0x0000)
struct BANS_GSAddBuff_GSNotifyTickCS final
{
public:
	struct FUStGSNotifyParam                      NotifyParam;                                       // 0x0000(0x0040)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
	float                                         FrameDeltaTime;                                    // 0x0040(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
//static_assert(alignof(BANS_GSAddBuff_GSNotifyTickCS) == 0x000008, "Wrong alignment on BANS_GSAddBuff_GSNotifyTickCS");
//static_assert(sizeof(BANS_GSAddBuff_GSNotifyTickCS) == 0x000048, "Wrong size on BANS_GSAddBuff_GSNotifyTickCS");
//static_assert(offsetof(BANS_GSAddBuff_GSNotifyTickCS, NotifyParam) == 0x000000, "Member 'BANS_GSAddBuff_GSNotifyTickCS::NotifyParam' has a wrong offset!");
//static_assert(offsetof(BANS_GSAddBuff_GSNotifyTickCS, FrameDeltaTime) == 0x000040, "Member 'BANS_GSAddBuff_GSNotifyTickCS::FrameDeltaTime' has a wrong offset!");

// Function b1-Managed.BANS_GSAddBuff.GSNotifyEndCS
// 0x0040 (0x0040 - 0x0000)
struct BANS_GSAddBuff_GSNotifyEndCS final
{
public:
	struct FUStGSNotifyParam                      NotifyParam;                                       // 0x0000(0x0040)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
//static_assert(alignof(BANS_GSAddBuff_GSNotifyEndCS) == 0x000008, "Wrong alignment on BANS_GSAddBuff_GSNotifyEndCS");
//static_assert(sizeof(BANS_GSAddBuff_GSNotifyEndCS) == 0x000040, "Wrong size on BANS_GSAddBuff_GSNotifyEndCS");
//static_assert(offsetof(BANS_GSAddBuff_GSNotifyEndCS, NotifyParam) == 0x000000, "Member 'BANS_GSAddBuff_GSNotifyEndCS::NotifyParam' has a wrong offset!");

// Function b1-Managed.BGP_PlayerControllerCS.GetSeamlessTravelActorListCS
// 0x0018 (0x0018 - 0x0000)
struct BGP_PlayerControllerCS_GetSeamlessTravelActorListCS final
{
public:
	uint8                                         bToEntry : 1;                                      // 0x0000(0x0001)(BitIndex: 0x00, PropSize: 0x0001 (Parm, NoDestructor, HasGetValueTypeHash))
	uint8                                         Pad_1[0x7];                                        // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<class AActor*>                         ActorList;                                         // 0x0008(0x0010)(Parm, OutParm)
};
//static_assert(alignof(BGP_PlayerControllerCS_GetSeamlessTravelActorListCS) == 0x000008, "Wrong alignment on BGP_PlayerControllerCS_GetSeamlessTravelActorListCS");
//static_assert(sizeof(BGP_PlayerControllerCS_GetSeamlessTravelActorListCS) == 0x000018, "Wrong size on BGP_PlayerControllerCS_GetSeamlessTravelActorListCS");
//static_assert(offsetof(BGP_PlayerControllerCS_GetSeamlessTravelActorListCS, ActorList) == 0x000008, "Member 'BGP_PlayerControllerCS_GetSeamlessTravelActorListCS::ActorList' has a wrong offset!");

// Function b1-Managed.BGP_PlayerControllerCS.ConsoleCommandCS
// 0x0010 (0x0010 - 0x0000)
struct BGP_PlayerControllerCS_ConsoleCommandCS final
{
public:
	class FString                                 Command;                                           // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash)
};
//static_assert(alignof(BGP_PlayerControllerCS_ConsoleCommandCS) == 0x000008, "Wrong alignment on BGP_PlayerControllerCS_ConsoleCommandCS");
//static_assert(sizeof(BGP_PlayerControllerCS_ConsoleCommandCS) == 0x000010, "Wrong size on BGP_PlayerControllerCS_ConsoleCommandCS");
//static_assert(offsetof(BGP_PlayerControllerCS_ConsoleCommandCS, Command) == 0x000000, "Member 'BGP_PlayerControllerCS_ConsoleCommandCS::Command' has a wrong offset!");

// Function b1-Managed.BGP_PlayerControllerCS.ReceiveEndPlay
// 0x0001 (0x0001 - 0x0000)
struct BGP_PlayerControllerCS_ReceiveEndPlay final
{
public:
	EEndPlayReason                                EndPlayReason;                                     // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
//static_assert(alignof(BGP_PlayerControllerCS_ReceiveEndPlay) == 0x000001, "Wrong alignment on BGP_PlayerControllerCS_ReceiveEndPlay");
//static_assert(sizeof(BGP_PlayerControllerCS_ReceiveEndPlay) == 0x000001, "Wrong size on BGP_PlayerControllerCS_ReceiveEndPlay");
//static_assert(offsetof(BGP_PlayerControllerCS_ReceiveEndPlay, EndPlayReason) == 0x000000, "Member 'BGP_PlayerControllerCS_ReceiveEndPlay::EndPlayReason' has a wrong offset!");

// Function b1-Managed.BGP_PlayerControllerCS.OnControlledPawnChange
// 0x0010 (0x0010 - 0x0000)
struct BGP_PlayerControllerCS_OnControlledPawnChange final
{
public:
	class AActor*                                 OldPawn;                                           // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class AActor*                                 NewPawn;                                           // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
//static_assert(alignof(BGP_PlayerControllerCS_OnControlledPawnChange) == 0x000008, "Wrong alignment on BGP_PlayerControllerCS_OnControlledPawnChange");
//static_assert(sizeof(BGP_PlayerControllerCS_OnControlledPawnChange) == 0x000010, "Wrong size on BGP_PlayerControllerCS_OnControlledPawnChange");
//static_assert(offsetof(BGP_PlayerControllerCS_OnControlledPawnChange, OldPawn) == 0x000000, "Member 'BGP_PlayerControllerCS_OnControlledPawnChange::OldPawn' has a wrong offset!");
//static_assert(offsetof(BGP_PlayerControllerCS_OnControlledPawnChange, NewPawn) == 0x000008, "Member 'BGP_PlayerControllerCS_OnControlledPawnChange::NewPawn' has a wrong offset!");

// Function b1-Managed.BGP_PlayerControllerCS.GSRpcSendClient
// 0x0010 (0x0010 - 0x0000)
struct BGP_PlayerControllerCS_GSRpcSendClient final
{
public:
	TArray<uint8>                                 SendData;                                          // 0x0000(0x0010)(Parm)
};
//static_assert(alignof(BGP_PlayerControllerCS_GSRpcSendClient) == 0x000008, "Wrong alignment on BGP_PlayerControllerCS_GSRpcSendClient");
//static_assert(sizeof(BGP_PlayerControllerCS_GSRpcSendClient) == 0x000010, "Wrong size on BGP_PlayerControllerCS_GSRpcSendClient");
//static_assert(offsetof(BGP_PlayerControllerCS_GSRpcSendClient, SendData) == 0x000000, "Member 'BGP_PlayerControllerCS_GSRpcSendClient::SendData' has a wrong offset!");

// Function b1-Managed.BGP_PlayerControllerCS.GSRpcSendServer
// 0x0010 (0x0010 - 0x0000)
struct BGP_PlayerControllerCS_GSRpcSendServer final
{
public:
	TArray<uint8>                                 SendData;                                          // 0x0000(0x0010)(Parm)
};
//static_assert(alignof(BGP_PlayerControllerCS_GSRpcSendServer) == 0x000008, "Wrong alignment on BGP_PlayerControllerCS_GSRpcSendServer");
//static_assert(sizeof(BGP_PlayerControllerCS_GSRpcSendServer) == 0x000010, "Wrong size on BGP_PlayerControllerCS_GSRpcSendServer");
//static_assert(offsetof(BGP_PlayerControllerCS_GSRpcSendServer, SendData) == 0x000000, "Member 'BGP_PlayerControllerCS_GSRpcSendServer::SendData' has a wrong offset!");

// Function b1-Managed.BGP_PlayerControllerCS.GetPlayerViewPointCS
// 0x0038 (0x0038 - 0x0000)
struct BGP_PlayerControllerCS_GetPlayerViewPointCS final
{
public:
	struct FVector                                Out_Location;                                      // 0x0000(0x0018)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FRotator                               Out_Rotation;                                      // 0x0018(0x0018)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         ReturnValue : 1;                                   // 0x0030(0x0001)(BitIndex: 0x00, PropSize: 0x0001 (Parm, OutParm, ReturnParm, NoDestructor, HasGetValueTypeHash))
};
//static_assert(alignof(BGP_PlayerControllerCS_GetPlayerViewPointCS) == 0x000008, "Wrong alignment on BGP_PlayerControllerCS_GetPlayerViewPointCS");
//static_assert(sizeof(BGP_PlayerControllerCS_GetPlayerViewPointCS) == 0x000038, "Wrong size on BGP_PlayerControllerCS_GetPlayerViewPointCS");
//static_assert(offsetof(BGP_PlayerControllerCS_GetPlayerViewPointCS, Out_Location) == 0x000000, "Member 'BGP_PlayerControllerCS_GetPlayerViewPointCS::Out_Location' has a wrong offset!");
//static_assert(offsetof(BGP_PlayerControllerCS_GetPlayerViewPointCS, Out_Rotation) == 0x000018, "Member 'BGP_PlayerControllerCS_GetPlayerViewPointCS::Out_Rotation' has a wrong offset!");

// Function b1-Managed.B1NetReplicationGraphConnectionCS.NotifyActorChannelCleanedUpCS
// 0x0010 (0x0010 - 0x0000)
struct B1NetReplicationGraphConnectionCS_NotifyActorChannelCleanedUpCS final
{
public:
	class UActorChannel*                          Channel;                                           // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CloseReason;                                       // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
//static_assert(alignof(B1NetReplicationGraphConnectionCS_NotifyActorChannelCleanedUpCS) == 0x000008, "Wrong alignment on B1NetReplicationGraphConnectionCS_NotifyActorChannelCleanedUpCS");
//static_assert(sizeof(B1NetReplicationGraphConnectionCS_NotifyActorChannelCleanedUpCS) == 0x000010, "Wrong size on B1NetReplicationGraphConnectionCS_NotifyActorChannelCleanedUpCS");
//static_assert(offsetof(B1NetReplicationGraphConnectionCS_NotifyActorChannelCleanedUpCS, Channel) == 0x000000, "Member 'B1NetReplicationGraphConnectionCS_NotifyActorChannelCleanedUpCS::Channel' has a wrong offset!");
//static_assert(offsetof(B1NetReplicationGraphConnectionCS_NotifyActorChannelCleanedUpCS, CloseReason) == 0x000008, "Member 'B1NetReplicationGraphConnectionCS_NotifyActorChannelCleanedUpCS::CloseReason' has a wrong offset!");

// Function b1-Managed.B1NetReplicationGraphConnectionCS.NotifyActorChannelRemovedCS
// 0x0008 (0x0008 - 0x0000)
struct B1NetReplicationGraphConnectionCS_NotifyActorChannelRemovedCS final
{
public:
	class AActor*                                 Actor;                                             // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
//static_assert(alignof(B1NetReplicationGraphConnectionCS_NotifyActorChannelRemovedCS) == 0x000008, "Wrong alignment on B1NetReplicationGraphConnectionCS_NotifyActorChannelRemovedCS");
//static_assert(sizeof(B1NetReplicationGraphConnectionCS_NotifyActorChannelRemovedCS) == 0x000008, "Wrong size on B1NetReplicationGraphConnectionCS_NotifyActorChannelRemovedCS");
//static_assert(offsetof(B1NetReplicationGraphConnectionCS_NotifyActorChannelRemovedCS, Actor) == 0x000000, "Member 'B1NetReplicationGraphConnectionCS_NotifyActorChannelRemovedCS::Actor' has a wrong offset!");

// Function b1-Managed.B1NetReplicationGraphConnectionCS.NotifyActorChannelAddedCS
// 0x0010 (0x0010 - 0x0000)
struct B1NetReplicationGraphConnectionCS_NotifyActorChannelAddedCS final
{
public:
	class AActor*                                 Actor;                                             // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UActorChannel*                          Channel;                                           // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
//static_assert(alignof(B1NetReplicationGraphConnectionCS_NotifyActorChannelAddedCS) == 0x000008, "Wrong alignment on B1NetReplicationGraphConnectionCS_NotifyActorChannelAddedCS");
//static_assert(sizeof(B1NetReplicationGraphConnectionCS_NotifyActorChannelAddedCS) == 0x000010, "Wrong size on B1NetReplicationGraphConnectionCS_NotifyActorChannelAddedCS");
//static_assert(offsetof(B1NetReplicationGraphConnectionCS_NotifyActorChannelAddedCS, Actor) == 0x000000, "Member 'B1NetReplicationGraphConnectionCS_NotifyActorChannelAddedCS::Actor' has a wrong offset!");
//static_assert(offsetof(B1NetReplicationGraphConnectionCS_NotifyActorChannelAddedCS, Channel) == 0x000008, "Member 'B1NetReplicationGraphConnectionCS_NotifyActorChannelAddedCS::Channel' has a wrong offset!");

// Function b1-Managed.BMPS_Base.GetCategoryTextCS
// 0x0010 (0x0010 - 0x0000)
struct BMPS_Base_GetCategoryTextCS final
{
public:
	class FString                                 ReturnValue;                                       // 0x0000(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash)
};
//static_assert(alignof(BMPS_Base_GetCategoryTextCS) == 0x000008, "Wrong alignment on BMPS_Base_GetCategoryTextCS");
//static_assert(sizeof(BMPS_Base_GetCategoryTextCS) == 0x000010, "Wrong size on BMPS_Base_GetCategoryTextCS");
//static_assert(offsetof(BMPS_Base_GetCategoryTextCS, ReturnValue) == 0x000000, "Member 'BMPS_Base_GetCategoryTextCS::ReturnValue' has a wrong offset!");

// Function b1-Managed.BMPS_Base.GetFooterTextCS
// 0x0010 (0x0010 - 0x0000)
struct BMPS_Base_GetFooterTextCS final
{
public:
	class FString                                 ReturnValue;                                       // 0x0000(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash)
};
//static_assert(alignof(BMPS_Base_GetFooterTextCS) == 0x000008, "Wrong alignment on BMPS_Base_GetFooterTextCS");
//static_assert(sizeof(BMPS_Base_GetFooterTextCS) == 0x000010, "Wrong size on BMPS_Base_GetFooterTextCS");
//static_assert(offsetof(BMPS_Base_GetFooterTextCS, ReturnValue) == 0x000000, "Member 'BMPS_Base_GetFooterTextCS::ReturnValue' has a wrong offset!");

// Function b1-Managed.BMPS_CLS.TeardownForPipelineCS
// 0x0008 (0x0008 - 0x0000)
struct BMPS_CLS_TeardownForPipelineCS final
{
public:
	class UMoviePipeline*                         InPipeline;                                        // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
//static_assert(alignof(BMPS_CLS_TeardownForPipelineCS) == 0x000008, "Wrong alignment on BMPS_CLS_TeardownForPipelineCS");
//static_assert(sizeof(BMPS_CLS_TeardownForPipelineCS) == 0x000008, "Wrong size on BMPS_CLS_TeardownForPipelineCS");
//static_assert(offsetof(BMPS_CLS_TeardownForPipelineCS, InPipeline) == 0x000000, "Member 'BMPS_CLS_TeardownForPipelineCS::InPipeline' has a wrong offset!");

// Function b1-Managed.BMPS_CLS.SetupForPipelineCS
// 0x0008 (0x0008 - 0x0000)
struct BMPS_CLS_SetupForPipelineCS final
{
public:
	class UMoviePipeline*                         InPipeline;                                        // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
//static_assert(alignof(BMPS_CLS_SetupForPipelineCS) == 0x000008, "Wrong alignment on BMPS_CLS_SetupForPipelineCS");
//static_assert(sizeof(BMPS_CLS_SetupForPipelineCS) == 0x000008, "Wrong size on BMPS_CLS_SetupForPipelineCS");
//static_assert(offsetof(BMPS_CLS_SetupForPipelineCS, InPipeline) == 0x000000, "Member 'BMPS_CLS_SetupForPipelineCS::InPipeline' has a wrong offset!");

// Function b1-Managed.BMPS_CLS.IgnoreTransientFiltersCS
// 0x0001 (0x0001 - 0x0000)
struct BMPS_CLS_IgnoreTransientFiltersCS final
{
public:
	uint8                                         ReturnValue : 1;                                   // 0x0000(0x0001)(BitIndex: 0x00, PropSize: 0x0001 (Parm, OutParm, ReturnParm, NoDestructor, HasGetValueTypeHash))
};
//static_assert(alignof(BMPS_CLS_IgnoreTransientFiltersCS) == 0x000001, "Wrong alignment on BMPS_CLS_IgnoreTransientFiltersCS");
//static_assert(sizeof(BMPS_CLS_IgnoreTransientFiltersCS) == 0x000001, "Wrong size on BMPS_CLS_IgnoreTransientFiltersCS");

// Function b1-Managed.BMPS_CLS.GetDisplayTextCS
// 0x0010 (0x0010 - 0x0000)
struct BMPS_CLS_GetDisplayTextCS final
{
public:
	class FString                                 ReturnValue;                                       // 0x0000(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash)
};
//static_assert(alignof(BMPS_CLS_GetDisplayTextCS) == 0x000008, "Wrong alignment on BMPS_CLS_GetDisplayTextCS");
//static_assert(sizeof(BMPS_CLS_GetDisplayTextCS) == 0x000010, "Wrong size on BMPS_CLS_GetDisplayTextCS");
//static_assert(offsetof(BMPS_CLS_GetDisplayTextCS, ReturnValue) == 0x000000, "Member 'BMPS_CLS_GetDisplayTextCS::ReturnValue' has a wrong offset!");

// Function b1-Managed.BANS_GSAttackIK.GSNotifyBeginCS
// 0x0048 (0x0048 - 0x0000)
struct BANS_GSAttackIK_GSNotifyBeginCS final
{
public:
	struct FUStGSNotifyParam                      NotifyParam;                                       // 0x0000(0x0040)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
	float                                         TotalDuration;                                     // 0x0040(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
//static_assert(alignof(BANS_GSAttackIK_GSNotifyBeginCS) == 0x000008, "Wrong alignment on BANS_GSAttackIK_GSNotifyBeginCS");
//static_assert(sizeof(BANS_GSAttackIK_GSNotifyBeginCS) == 0x000048, "Wrong size on BANS_GSAttackIK_GSNotifyBeginCS");
//static_assert(offsetof(BANS_GSAttackIK_GSNotifyBeginCS, NotifyParam) == 0x000000, "Member 'BANS_GSAttackIK_GSNotifyBeginCS::NotifyParam' has a wrong offset!");
//static_assert(offsetof(BANS_GSAttackIK_GSNotifyBeginCS, TotalDuration) == 0x000040, "Member 'BANS_GSAttackIK_GSNotifyBeginCS::TotalDuration' has a wrong offset!");

// Function b1-Managed.BANS_GSAttackIK.GSNotifyTickCS
// 0x0048 (0x0048 - 0x0000)
struct BANS_GSAttackIK_GSNotifyTickCS final
{
public:
	struct FUStGSNotifyParam                      NotifyParam;                                       // 0x0000(0x0040)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
	float                                         FrameDeltaTime;                                    // 0x0040(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
//static_assert(alignof(BANS_GSAttackIK_GSNotifyTickCS) == 0x000008, "Wrong alignment on BANS_GSAttackIK_GSNotifyTickCS");
//static_assert(sizeof(BANS_GSAttackIK_GSNotifyTickCS) == 0x000048, "Wrong size on BANS_GSAttackIK_GSNotifyTickCS");
//static_assert(offsetof(BANS_GSAttackIK_GSNotifyTickCS, NotifyParam) == 0x000000, "Member 'BANS_GSAttackIK_GSNotifyTickCS::NotifyParam' has a wrong offset!");
//static_assert(offsetof(BANS_GSAttackIK_GSNotifyTickCS, FrameDeltaTime) == 0x000040, "Member 'BANS_GSAttackIK_GSNotifyTickCS::FrameDeltaTime' has a wrong offset!");

// Function b1-Managed.BANS_GSAttackIK.GSNotifyEndCS
// 0x0040 (0x0040 - 0x0000)
struct BANS_GSAttackIK_GSNotifyEndCS final
{
public:
	struct FUStGSNotifyParam                      NotifyParam;                                       // 0x0000(0x0040)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
//static_assert(alignof(BANS_GSAttackIK_GSNotifyEndCS) == 0x000008, "Wrong alignment on BANS_GSAttackIK_GSNotifyEndCS");
//static_assert(sizeof(BANS_GSAttackIK_GSNotifyEndCS) == 0x000040, "Wrong size on BANS_GSAttackIK_GSNotifyEndCS");
//static_assert(offsetof(BANS_GSAttackIK_GSNotifyEndCS, NotifyParam) == 0x000000, "Member 'BANS_GSAttackIK_GSNotifyEndCS::NotifyParam' has a wrong offset!");

// Function b1-Managed.BMPS_Equip.SetupForPipelineCS
// 0x0008 (0x0008 - 0x0000)
struct BMPS_Equip_SetupForPipelineCS final
{
public:
	class UMoviePipeline*                         InPipeline;                                        // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
//static_assert(alignof(BMPS_Equip_SetupForPipelineCS) == 0x000008, "Wrong alignment on BMPS_Equip_SetupForPipelineCS");
//static_assert(sizeof(BMPS_Equip_SetupForPipelineCS) == 0x000008, "Wrong size on BMPS_Equip_SetupForPipelineCS");
//static_assert(offsetof(BMPS_Equip_SetupForPipelineCS, InPipeline) == 0x000000, "Member 'BMPS_Equip_SetupForPipelineCS::InPipeline' has a wrong offset!");

// Function b1-Managed.BMPS_Equip.GetDisplayTextCS
// 0x0010 (0x0010 - 0x0000)
struct BMPS_Equip_GetDisplayTextCS final
{
public:
	class FString                                 ReturnValue;                                       // 0x0000(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash)
};
//static_assert(alignof(BMPS_Equip_GetDisplayTextCS) == 0x000008, "Wrong alignment on BMPS_Equip_GetDisplayTextCS");
//static_assert(sizeof(BMPS_Equip_GetDisplayTextCS) == 0x000010, "Wrong size on BMPS_Equip_GetDisplayTextCS");
//static_assert(offsetof(BMPS_Equip_GetDisplayTextCS, ReturnValue) == 0x000000, "Member 'BMPS_Equip_GetDisplayTextCS::ReturnValue' has a wrong offset!");

// Function b1-Managed.BMPS_LevelStreaming.TeardownForPipelineCS
// 0x0008 (0x0008 - 0x0000)
struct BMPS_LevelStreaming_TeardownForPipelineCS final
{
public:
	class UMoviePipeline*                         InPipeline;                                        // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
//static_assert(alignof(BMPS_LevelStreaming_TeardownForPipelineCS) == 0x000008, "Wrong alignment on BMPS_LevelStreaming_TeardownForPipelineCS");
//static_assert(sizeof(BMPS_LevelStreaming_TeardownForPipelineCS) == 0x000008, "Wrong size on BMPS_LevelStreaming_TeardownForPipelineCS");
//static_assert(offsetof(BMPS_LevelStreaming_TeardownForPipelineCS, InPipeline) == 0x000000, "Member 'BMPS_LevelStreaming_TeardownForPipelineCS::InPipeline' has a wrong offset!");

// Function b1-Managed.BMPS_LevelStreaming.SetupForPipelineCS
// 0x0008 (0x0008 - 0x0000)
struct BMPS_LevelStreaming_SetupForPipelineCS final
{
public:
	class UMoviePipeline*                         InPipeline;                                        // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
//static_assert(alignof(BMPS_LevelStreaming_SetupForPipelineCS) == 0x000008, "Wrong alignment on BMPS_LevelStreaming_SetupForPipelineCS");
//static_assert(sizeof(BMPS_LevelStreaming_SetupForPipelineCS) == 0x000008, "Wrong size on BMPS_LevelStreaming_SetupForPipelineCS");
//static_assert(offsetof(BMPS_LevelStreaming_SetupForPipelineCS, InPipeline) == 0x000000, "Member 'BMPS_LevelStreaming_SetupForPipelineCS::InPipeline' has a wrong offset!");

// Function b1-Managed.BMPS_LevelStreaming.GetDisplayTextCS
// 0x0010 (0x0010 - 0x0000)
struct BMPS_LevelStreaming_GetDisplayTextCS final
{
public:
	class FString                                 ReturnValue;                                       // 0x0000(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash)
};
//static_assert(alignof(BMPS_LevelStreaming_GetDisplayTextCS) == 0x000008, "Wrong alignment on BMPS_LevelStreaming_GetDisplayTextCS");
//static_assert(sizeof(BMPS_LevelStreaming_GetDisplayTextCS) == 0x000010, "Wrong size on BMPS_LevelStreaming_GetDisplayTextCS");
//static_assert(offsetof(BMPS_LevelStreaming_GetDisplayTextCS, ReturnValue) == 0x000000, "Member 'BMPS_LevelStreaming_GetDisplayTextCS::ReturnValue' has a wrong offset!");

// Function b1-Managed.UGSSuperArmorDescCustomizationHelper.FindDescIdByRowName
// 0x000C (0x000C - 0x0000)
struct UGSSuperArmorDescCustomizationHelper_FindDescIdByRowName final
{
public:
	class FName                                   RowName;                                           // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         ReturnValue;                                       // 0x0008(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
//static_assert(alignof(UGSSuperArmorDescCustomizationHelper_FindDescIdByRowName) == 0x000004, "Wrong alignment on UGSSuperArmorDescCustomizationHelper_FindDescIdByRowName");
//static_assert(sizeof(UGSSuperArmorDescCustomizationHelper_FindDescIdByRowName) == 0x00000C, "Wrong size on UGSSuperArmorDescCustomizationHelper_FindDescIdByRowName");
//static_assert(offsetof(UGSSuperArmorDescCustomizationHelper_FindDescIdByRowName, RowName) == 0x000000, "Member 'UGSSuperArmorDescCustomizationHelper_FindDescIdByRowName::RowName' has a wrong offset!");
//static_assert(offsetof(UGSSuperArmorDescCustomizationHelper_FindDescIdByRowName, ReturnValue) == 0x000008, "Member 'UGSSuperArmorDescCustomizationHelper_FindDescIdByRowName::ReturnValue' has a wrong offset!");

// Function b1-Managed.UGSSuperArmorDescCustomizationHelper.GetRowNameByDescId
// 0x0010 (0x0010 - 0x0000)
struct UGSSuperArmorDescCustomizationHelper_GetRowNameByDescId final
{
public:
	int32                                         DescID;                                            // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class FName                                   RowName;                                           // 0x0004(0x0008)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         ReturnValue : 1;                                   // 0x000C(0x0001)(BitIndex: 0x00, PropSize: 0x0001 (Parm, OutParm, ReturnParm, NoDestructor, HasGetValueTypeHash))
};
//static_assert(alignof(UGSSuperArmorDescCustomizationHelper_GetRowNameByDescId) == 0x000004, "Wrong alignment on UGSSuperArmorDescCustomizationHelper_GetRowNameByDescId");
//static_assert(sizeof(UGSSuperArmorDescCustomizationHelper_GetRowNameByDescId) == 0x000010, "Wrong size on UGSSuperArmorDescCustomizationHelper_GetRowNameByDescId");
//static_assert(offsetof(UGSSuperArmorDescCustomizationHelper_GetRowNameByDescId, DescID) == 0x000000, "Member 'UGSSuperArmorDescCustomizationHelper_GetRowNameByDescId::DescID' has a wrong offset!");
//static_assert(offsetof(UGSSuperArmorDescCustomizationHelper_GetRowNameByDescId, RowName) == 0x000004, "Member 'UGSSuperArmorDescCustomizationHelper_GetRowNameByDescId::RowName' has a wrong offset!");

// Function b1-Managed.UGSSuperArmorDescCustomizationHelper.OnGetRowStrings
// 0x0020 (0x0020 - 0x0000)
struct UGSSuperArmorDescCustomizationHelper_OnGetRowStrings final
{
public:
	TArray<class FString>                         OutStrings;                                        // 0x0000(0x0010)(Parm, OutParm)
	TArray<uint8>                                 OutRestrictedItems;                                // 0x0010(0x0010)(Parm, OutParm)
};
//static_assert(alignof(UGSSuperArmorDescCustomizationHelper_OnGetRowStrings) == 0x000008, "Wrong alignment on UGSSuperArmorDescCustomizationHelper_OnGetRowStrings");
//static_assert(sizeof(UGSSuperArmorDescCustomizationHelper_OnGetRowStrings) == 0x000020, "Wrong size on UGSSuperArmorDescCustomizationHelper_OnGetRowStrings");
//static_assert(offsetof(UGSSuperArmorDescCustomizationHelper_OnGetRowStrings, OutStrings) == 0x000000, "Member 'UGSSuperArmorDescCustomizationHelper_OnGetRowStrings::OutStrings' has a wrong offset!");
//static_assert(offsetof(UGSSuperArmorDescCustomizationHelper_OnGetRowStrings, OutRestrictedItems) == 0x000010, "Member 'UGSSuperArmorDescCustomizationHelper_OnGetRowStrings::OutRestrictedItems' has a wrong offset!");

// Function b1-Managed.BMPS_PerformerConfig.AfterLevelSequenceActorInitializedCS
// 0x0008 (0x0008 - 0x0000)
struct BMPS_PerformerConfig_AfterLevelSequenceActorInitializedCS final
{
public:
	class UMoviePipeline*                         InPipeline;                                        // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
//static_assert(alignof(BMPS_PerformerConfig_AfterLevelSequenceActorInitializedCS) == 0x000008, "Wrong alignment on BMPS_PerformerConfig_AfterLevelSequenceActorInitializedCS");
//static_assert(sizeof(BMPS_PerformerConfig_AfterLevelSequenceActorInitializedCS) == 0x000008, "Wrong size on BMPS_PerformerConfig_AfterLevelSequenceActorInitializedCS");
//static_assert(offsetof(BMPS_PerformerConfig_AfterLevelSequenceActorInitializedCS, InPipeline) == 0x000000, "Member 'BMPS_PerformerConfig_AfterLevelSequenceActorInitializedCS::InPipeline' has a wrong offset!");

// Function b1-Managed.BMPS_PerformerConfig.GetDisplayTextCS
// 0x0010 (0x0010 - 0x0000)
struct BMPS_PerformerConfig_GetDisplayTextCS final
{
public:
	class FString                                 ReturnValue;                                       // 0x0000(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash)
};
//static_assert(alignof(BMPS_PerformerConfig_GetDisplayTextCS) == 0x000008, "Wrong alignment on BMPS_PerformerConfig_GetDisplayTextCS");
//static_assert(sizeof(BMPS_PerformerConfig_GetDisplayTextCS) == 0x000010, "Wrong size on BMPS_PerformerConfig_GetDisplayTextCS");
//static_assert(offsetof(BMPS_PerformerConfig_GetDisplayTextCS, ReturnValue) == 0x000000, "Member 'BMPS_PerformerConfig_GetDisplayTextCS::ReturnValue' has a wrong offset!");

// Function b1-Managed.BSNS_CricketWinFinish.OnNotifyBegin
// 0x0010 (0x0010 - 0x0000)
struct BSNS_CricketWinFinish_OnNotifyBegin final
{
public:
	class UCalliopeLevelSequencePlayer*           InPlayer;                                          // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         InStatus;                                          // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         bInBackwards : 1;                                  // 0x000C(0x0001)(BitIndex: 0x00, PropSize: 0x0001 (Parm, NoDestructor, HasGetValueTypeHash))
};
//static_assert(alignof(BSNS_CricketWinFinish_OnNotifyBegin) == 0x000008, "Wrong alignment on BSNS_CricketWinFinish_OnNotifyBegin");
//static_assert(sizeof(BSNS_CricketWinFinish_OnNotifyBegin) == 0x000010, "Wrong size on BSNS_CricketWinFinish_OnNotifyBegin");
//static_assert(offsetof(BSNS_CricketWinFinish_OnNotifyBegin, InPlayer) == 0x000000, "Member 'BSNS_CricketWinFinish_OnNotifyBegin::InPlayer' has a wrong offset!");
//static_assert(offsetof(BSNS_CricketWinFinish_OnNotifyBegin, InStatus) == 0x000008, "Member 'BSNS_CricketWinFinish_OnNotifyBegin::InStatus' has a wrong offset!");

// Function b1-Managed.BSNS_CricketWinFinish.OnNotifyEnd
// 0x0010 (0x0010 - 0x0000)
struct BSNS_CricketWinFinish_OnNotifyEnd final
{
public:
	class UCalliopeLevelSequencePlayer*           InPlayer;                                          // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         InStatus;                                          // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         bInBackwards : 1;                                  // 0x000C(0x0001)(BitIndex: 0x00, PropSize: 0x0001 (Parm, NoDestructor, HasGetValueTypeHash))
};
//static_assert(alignof(BSNS_CricketWinFinish_OnNotifyEnd) == 0x000008, "Wrong alignment on BSNS_CricketWinFinish_OnNotifyEnd");
//static_assert(sizeof(BSNS_CricketWinFinish_OnNotifyEnd) == 0x000010, "Wrong size on BSNS_CricketWinFinish_OnNotifyEnd");
//static_assert(offsetof(BSNS_CricketWinFinish_OnNotifyEnd, InPlayer) == 0x000000, "Member 'BSNS_CricketWinFinish_OnNotifyEnd::InPlayer' has a wrong offset!");
//static_assert(offsetof(BSNS_CricketWinFinish_OnNotifyEnd, InStatus) == 0x000008, "Member 'BSNS_CricketWinFinish_OnNotifyEnd::InStatus' has a wrong offset!");

// Function b1-Managed.BED_TaskNode_SubGraph.GetContextOutputsInCS
// 0x0010 (0x0010 - 0x0000)
struct BED_TaskNode_SubGraph_GetContextOutputsInCS final
{
public:
	TArray<class FName>                           ReturnValue;                                       // 0x0000(0x0010)(Parm, OutParm, ReturnParm)
};
//static_assert(alignof(BED_TaskNode_SubGraph_GetContextOutputsInCS) == 0x000008, "Wrong alignment on BED_TaskNode_SubGraph_GetContextOutputsInCS");
//static_assert(sizeof(BED_TaskNode_SubGraph_GetContextOutputsInCS) == 0x000010, "Wrong size on BED_TaskNode_SubGraph_GetContextOutputsInCS");
//static_assert(offsetof(BED_TaskNode_SubGraph_GetContextOutputsInCS, ReturnValue) == 0x000000, "Member 'BED_TaskNode_SubGraph_GetContextOutputsInCS::ReturnValue' has a wrong offset!");

// Function b1-Managed.BED_TaskNode_SubGraph.GetContextInputsInCS
// 0x0010 (0x0010 - 0x0000)
struct BED_TaskNode_SubGraph_GetContextInputsInCS final
{
public:
	TArray<class FName>                           ReturnValue;                                       // 0x0000(0x0010)(Parm, OutParm, ReturnParm)
};
//static_assert(alignof(BED_TaskNode_SubGraph_GetContextInputsInCS) == 0x000008, "Wrong alignment on BED_TaskNode_SubGraph_GetContextInputsInCS");
//static_assert(sizeof(BED_TaskNode_SubGraph_GetContextInputsInCS) == 0x000010, "Wrong size on BED_TaskNode_SubGraph_GetContextInputsInCS");
//static_assert(offsetof(BED_TaskNode_SubGraph_GetContextInputsInCS, ReturnValue) == 0x000000, "Member 'BED_TaskNode_SubGraph_GetContextInputsInCS::ReturnValue' has a wrong offset!");

// Function b1-Managed.BED_TaskNode_SubGraph.PostPropertyChanged
// 0x0020 (0x0020 - 0x0000)
struct BED_TaskNode_SubGraph_PostPropertyChanged final
{
public:
	class FString                                 MemberName;                                        // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash)
	class FString                                 PropertyName;                                      // 0x0010(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash)
};
//static_assert(alignof(BED_TaskNode_SubGraph_PostPropertyChanged) == 0x000008, "Wrong alignment on BED_TaskNode_SubGraph_PostPropertyChanged");
//static_assert(sizeof(BED_TaskNode_SubGraph_PostPropertyChanged) == 0x000020, "Wrong size on BED_TaskNode_SubGraph_PostPropertyChanged");
//static_assert(offsetof(BED_TaskNode_SubGraph_PostPropertyChanged, MemberName) == 0x000000, "Member 'BED_TaskNode_SubGraph_PostPropertyChanged::MemberName' has a wrong offset!");
//static_assert(offsetof(BED_TaskNode_SubGraph_PostPropertyChanged, PropertyName) == 0x000010, "Member 'BED_TaskNode_SubGraph_PostPropertyChanged::PropertyName' has a wrong offset!");

// Function b1-Managed.BED_TaskNode_SubGraph.PrePropertyChanged
// 0x0010 (0x0010 - 0x0000)
struct BED_TaskNode_SubGraph_PrePropertyChanged final
{
public:
	class FString                                 PropertyName;                                      // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash)
};
//static_assert(alignof(BED_TaskNode_SubGraph_PrePropertyChanged) == 0x000008, "Wrong alignment on BED_TaskNode_SubGraph_PrePropertyChanged");
//static_assert(sizeof(BED_TaskNode_SubGraph_PrePropertyChanged) == 0x000010, "Wrong size on BED_TaskNode_SubGraph_PrePropertyChanged");
//static_assert(offsetof(BED_TaskNode_SubGraph_PrePropertyChanged, PropertyName) == 0x000000, "Member 'BED_TaskNode_SubGraph_PrePropertyChanged::PropertyName' has a wrong offset!");

// Function b1-Managed.BED_TaskNode_SubGraph.GetAssetToEditInCS
// 0x0008 (0x0008 - 0x0000)
struct BED_TaskNode_SubGraph_GetAssetToEditInCS final
{
public:
	class UObject*                                ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
//static_assert(alignof(BED_TaskNode_SubGraph_GetAssetToEditInCS) == 0x000008, "Wrong alignment on BED_TaskNode_SubGraph_GetAssetToEditInCS");
//static_assert(sizeof(BED_TaskNode_SubGraph_GetAssetToEditInCS) == 0x000008, "Wrong size on BED_TaskNode_SubGraph_GetAssetToEditInCS");
//static_assert(offsetof(BED_TaskNode_SubGraph_GetAssetToEditInCS, ReturnValue) == 0x000000, "Member 'BED_TaskNode_SubGraph_GetAssetToEditInCS::ReturnValue' has a wrong offset!");

// Function b1-Managed.BED_TaskNode_SubGraph.GetNodeDescriptionInCS
// 0x0010 (0x0010 - 0x0000)
struct BED_TaskNode_SubGraph_GetNodeDescriptionInCS final
{
public:
	class FString                                 ReturnValue;                                       // 0x0000(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash)
};
//static_assert(alignof(BED_TaskNode_SubGraph_GetNodeDescriptionInCS) == 0x000008, "Wrong alignment on BED_TaskNode_SubGraph_GetNodeDescriptionInCS");
//static_assert(sizeof(BED_TaskNode_SubGraph_GetNodeDescriptionInCS) == 0x000010, "Wrong size on BED_TaskNode_SubGraph_GetNodeDescriptionInCS");
//static_assert(offsetof(BED_TaskNode_SubGraph_GetNodeDescriptionInCS, ReturnValue) == 0x000000, "Member 'BED_TaskNode_SubGraph_GetNodeDescriptionInCS::ReturnValue' has a wrong offset!");

// Function b1-Managed.BSNS_GSDispInteract.OnNotifyBegin
// 0x0010 (0x0010 - 0x0000)
struct BSNS_GSDispInteract_OnNotifyBegin final
{
public:
	class UCalliopeLevelSequencePlayer*           InPlayer;                                          // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         InStatus;                                          // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         bInBackwards : 1;                                  // 0x000C(0x0001)(BitIndex: 0x00, PropSize: 0x0001 (Parm, NoDestructor, HasGetValueTypeHash))
};
//static_assert(alignof(BSNS_GSDispInteract_OnNotifyBegin) == 0x000008, "Wrong alignment on BSNS_GSDispInteract_OnNotifyBegin");
//static_assert(sizeof(BSNS_GSDispInteract_OnNotifyBegin) == 0x000010, "Wrong size on BSNS_GSDispInteract_OnNotifyBegin");
//static_assert(offsetof(BSNS_GSDispInteract_OnNotifyBegin, InPlayer) == 0x000000, "Member 'BSNS_GSDispInteract_OnNotifyBegin::InPlayer' has a wrong offset!");
//static_assert(offsetof(BSNS_GSDispInteract_OnNotifyBegin, InStatus) == 0x000008, "Member 'BSNS_GSDispInteract_OnNotifyBegin::InStatus' has a wrong offset!");

// Function b1-Managed.BSNS_GSDispInteract.OnNotifyEnd
// 0x0010 (0x0010 - 0x0000)
struct BSNS_GSDispInteract_OnNotifyEnd final
{
public:
	class UCalliopeLevelSequencePlayer*           InPlayer;                                          // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         InStatus;                                          // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         bInBackwards : 1;                                  // 0x000C(0x0001)(BitIndex: 0x00, PropSize: 0x0001 (Parm, NoDestructor, HasGetValueTypeHash))
};
//static_assert(alignof(BSNS_GSDispInteract_OnNotifyEnd) == 0x000008, "Wrong alignment on BSNS_GSDispInteract_OnNotifyEnd");
//static_assert(sizeof(BSNS_GSDispInteract_OnNotifyEnd) == 0x000010, "Wrong size on BSNS_GSDispInteract_OnNotifyEnd");
//static_assert(offsetof(BSNS_GSDispInteract_OnNotifyEnd, InPlayer) == 0x000000, "Member 'BSNS_GSDispInteract_OnNotifyEnd::InPlayer' has a wrong offset!");
//static_assert(offsetof(BSNS_GSDispInteract_OnNotifyEnd, InStatus) == 0x000008, "Member 'BSNS_GSDispInteract_OnNotifyEnd::InStatus' has a wrong offset!");

// Function b1-Managed.BSNS_SetSDFSolverCenter.OnNotifyBegin
// 0x0010 (0x0010 - 0x0000)
struct BSNS_SetSDFSolverCenter_OnNotifyBegin final
{
public:
	class UCalliopeLevelSequencePlayer*           InPlayer;                                          // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         InStatus;                                          // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         bInBackwards : 1;                                  // 0x000C(0x0001)(BitIndex: 0x00, PropSize: 0x0001 (Parm, NoDestructor, HasGetValueTypeHash))
};
//static_assert(alignof(BSNS_SetSDFSolverCenter_OnNotifyBegin) == 0x000008, "Wrong alignment on BSNS_SetSDFSolverCenter_OnNotifyBegin");
//static_assert(sizeof(BSNS_SetSDFSolverCenter_OnNotifyBegin) == 0x000010, "Wrong size on BSNS_SetSDFSolverCenter_OnNotifyBegin");
//static_assert(offsetof(BSNS_SetSDFSolverCenter_OnNotifyBegin, InPlayer) == 0x000000, "Member 'BSNS_SetSDFSolverCenter_OnNotifyBegin::InPlayer' has a wrong offset!");
//static_assert(offsetof(BSNS_SetSDFSolverCenter_OnNotifyBegin, InStatus) == 0x000008, "Member 'BSNS_SetSDFSolverCenter_OnNotifyBegin::InStatus' has a wrong offset!");

// Function b1-Managed.BSNS_SetSDFSolverCenter.OnNotifyEnd
// 0x0010 (0x0010 - 0x0000)
struct BSNS_SetSDFSolverCenter_OnNotifyEnd final
{
public:
	class UCalliopeLevelSequencePlayer*           InPlayer;                                          // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         InStatus;                                          // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         bInBackwards : 1;                                  // 0x000C(0x0001)(BitIndex: 0x00, PropSize: 0x0001 (Parm, NoDestructor, HasGetValueTypeHash))
};
//static_assert(alignof(BSNS_SetSDFSolverCenter_OnNotifyEnd) == 0x000008, "Wrong alignment on BSNS_SetSDFSolverCenter_OnNotifyEnd");
//static_assert(sizeof(BSNS_SetSDFSolverCenter_OnNotifyEnd) == 0x000010, "Wrong size on BSNS_SetSDFSolverCenter_OnNotifyEnd");
//static_assert(offsetof(BSNS_SetSDFSolverCenter_OnNotifyEnd, InPlayer) == 0x000000, "Member 'BSNS_SetSDFSolverCenter_OnNotifyEnd::InPlayer' has a wrong offset!");
//static_assert(offsetof(BSNS_SetSDFSolverCenter_OnNotifyEnd, InStatus) == 0x000008, "Member 'BSNS_SetSDFSolverCenter_OnNotifyEnd::InStatus' has a wrong offset!");

// Function b1-Managed.BED_Behavior_CheckCurrentCastSkillId.PostPropertyChanged
// 0x0020 (0x0020 - 0x0000)
struct BED_Behavior_CheckCurrentCastSkillId_PostPropertyChanged final
{
public:
	class FString                                 MemberName;                                        // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash)
	class FString                                 PropertyName;                                      // 0x0010(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash)
};
//static_assert(alignof(BED_Behavior_CheckCurrentCastSkillId_PostPropertyChanged) == 0x000008, "Wrong alignment on BED_Behavior_CheckCurrentCastSkillId_PostPropertyChanged");
//static_assert(sizeof(BED_Behavior_CheckCurrentCastSkillId_PostPropertyChanged) == 0x000020, "Wrong size on BED_Behavior_CheckCurrentCastSkillId_PostPropertyChanged");
//static_assert(offsetof(BED_Behavior_CheckCurrentCastSkillId_PostPropertyChanged, MemberName) == 0x000000, "Member 'BED_Behavior_CheckCurrentCastSkillId_PostPropertyChanged::MemberName' has a wrong offset!");
//static_assert(offsetof(BED_Behavior_CheckCurrentCastSkillId_PostPropertyChanged, PropertyName) == 0x000010, "Member 'BED_Behavior_CheckCurrentCastSkillId_PostPropertyChanged::PropertyName' has a wrong offset!");

// Function b1-Managed.BSNS_StopAllAnimMontage.OnNotifyBegin
// 0x0010 (0x0010 - 0x0000)
struct BSNS_StopAllAnimMontage_OnNotifyBegin final
{
public:
	class UCalliopeLevelSequencePlayer*           Player;                                            // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         InStatus;                                          // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         bInBackwards : 1;                                  // 0x000C(0x0001)(BitIndex: 0x00, PropSize: 0x0001 (Parm, NoDestructor, HasGetValueTypeHash))
};
//static_assert(alignof(BSNS_StopAllAnimMontage_OnNotifyBegin) == 0x000008, "Wrong alignment on BSNS_StopAllAnimMontage_OnNotifyBegin");
//static_assert(sizeof(BSNS_StopAllAnimMontage_OnNotifyBegin) == 0x000010, "Wrong size on BSNS_StopAllAnimMontage_OnNotifyBegin");
//static_assert(offsetof(BSNS_StopAllAnimMontage_OnNotifyBegin, Player) == 0x000000, "Member 'BSNS_StopAllAnimMontage_OnNotifyBegin::Player' has a wrong offset!");
//static_assert(offsetof(BSNS_StopAllAnimMontage_OnNotifyBegin, InStatus) == 0x000008, "Member 'BSNS_StopAllAnimMontage_OnNotifyBegin::InStatus' has a wrong offset!");

// Function b1-Managed.BSN_ForceTrigger.OnNotify
// 0x0010 (0x0010 - 0x0000)
struct BSN_ForceTrigger_OnNotify final
{
public:
	class UCalliopeLevelSequencePlayer*           InPlayer;                                          // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         InStatus;                                          // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         bInBackwards : 1;                                  // 0x000C(0x0001)(BitIndex: 0x00, PropSize: 0x0001 (Parm, NoDestructor, HasGetValueTypeHash))
};
//static_assert(alignof(BSN_ForceTrigger_OnNotify) == 0x000008, "Wrong alignment on BSN_ForceTrigger_OnNotify");
//static_assert(sizeof(BSN_ForceTrigger_OnNotify) == 0x000010, "Wrong size on BSN_ForceTrigger_OnNotify");
//static_assert(offsetof(BSN_ForceTrigger_OnNotify, InPlayer) == 0x000000, "Member 'BSN_ForceTrigger_OnNotify::InPlayer' has a wrong offset!");
//static_assert(offsetof(BSN_ForceTrigger_OnNotify, InStatus) == 0x000008, "Member 'BSN_ForceTrigger_OnNotify::InStatus' has a wrong offset!");

// Function b1-Managed.BANS_GSSetBattleMainCon.GSNotifyBeginCS
// 0x0048 (0x0048 - 0x0000)
struct BANS_GSSetBattleMainCon_GSNotifyBeginCS final
{
public:
	struct FUStGSNotifyParam                      NotifyParam;                                       // 0x0000(0x0040)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
	float                                         TotalDuration;                                     // 0x0040(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
//static_assert(alignof(BANS_GSSetBattleMainCon_GSNotifyBeginCS) == 0x000008, "Wrong alignment on BANS_GSSetBattleMainCon_GSNotifyBeginCS");
//static_assert(sizeof(BANS_GSSetBattleMainCon_GSNotifyBeginCS) == 0x000048, "Wrong size on BANS_GSSetBattleMainCon_GSNotifyBeginCS");
//static_assert(offsetof(BANS_GSSetBattleMainCon_GSNotifyBeginCS, NotifyParam) == 0x000000, "Member 'BANS_GSSetBattleMainCon_GSNotifyBeginCS::NotifyParam' has a wrong offset!");
//static_assert(offsetof(BANS_GSSetBattleMainCon_GSNotifyBeginCS, TotalDuration) == 0x000040, "Member 'BANS_GSSetBattleMainCon_GSNotifyBeginCS::TotalDuration' has a wrong offset!");

// Function b1-Managed.OverlapBoxFunctionBinder.OnActorLeave
// 0x0010 (0x0010 - 0x0000)
struct OverlapBoxFunctionBinder_OnActorLeave final
{
public:
	class AActor*                                 OverlappedActor;                                   // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class AActor*                                 OtherActor;                                        // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
//static_assert(alignof(OverlapBoxFunctionBinder_OnActorLeave) == 0x000008, "Wrong alignment on OverlapBoxFunctionBinder_OnActorLeave");
//static_assert(sizeof(OverlapBoxFunctionBinder_OnActorLeave) == 0x000010, "Wrong size on OverlapBoxFunctionBinder_OnActorLeave");
//static_assert(offsetof(OverlapBoxFunctionBinder_OnActorLeave, OverlappedActor) == 0x000000, "Member 'OverlapBoxFunctionBinder_OnActorLeave::OverlappedActor' has a wrong offset!");
//static_assert(offsetof(OverlapBoxFunctionBinder_OnActorLeave, OtherActor) == 0x000008, "Member 'OverlapBoxFunctionBinder_OnActorLeave::OtherActor' has a wrong offset!");

// Function b1-Managed.OverlapBoxFunctionBinder.OnActorEnter
// 0x0010 (0x0010 - 0x0000)
struct OverlapBoxFunctionBinder_OnActorEnter final
{
public:
	class AActor*                                 OverlappedActor;                                   // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class AActor*                                 OtherActor;                                        // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
//static_assert(alignof(OverlapBoxFunctionBinder_OnActorEnter) == 0x000008, "Wrong alignment on OverlapBoxFunctionBinder_OnActorEnter");
//static_assert(sizeof(OverlapBoxFunctionBinder_OnActorEnter) == 0x000010, "Wrong size on OverlapBoxFunctionBinder_OnActorEnter");
//static_assert(offsetof(OverlapBoxFunctionBinder_OnActorEnter, OverlappedActor) == 0x000000, "Member 'OverlapBoxFunctionBinder_OnActorEnter::OverlappedActor' has a wrong offset!");
//static_assert(offsetof(OverlapBoxFunctionBinder_OnActorEnter, OtherActor) == 0x000008, "Member 'OverlapBoxFunctionBinder_OnActorEnter::OtherActor' has a wrong offset!");

// Function b1-Managed.BANS_GSSetDmgNumCanEnable.GSNotifyBeginCS
// 0x0048 (0x0048 - 0x0000)
struct BANS_GSSetDmgNumCanEnable_GSNotifyBeginCS final
{
public:
	struct FUStGSNotifyParam                      NotifyParam;                                       // 0x0000(0x0040)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
	float                                         TotalDuration;                                     // 0x0040(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
//static_assert(alignof(BANS_GSSetDmgNumCanEnable_GSNotifyBeginCS) == 0x000008, "Wrong alignment on BANS_GSSetDmgNumCanEnable_GSNotifyBeginCS");
//static_assert(sizeof(BANS_GSSetDmgNumCanEnable_GSNotifyBeginCS) == 0x000048, "Wrong size on BANS_GSSetDmgNumCanEnable_GSNotifyBeginCS");
//static_assert(offsetof(BANS_GSSetDmgNumCanEnable_GSNotifyBeginCS, NotifyParam) == 0x000000, "Member 'BANS_GSSetDmgNumCanEnable_GSNotifyBeginCS::NotifyParam' has a wrong offset!");
//static_assert(offsetof(BANS_GSSetDmgNumCanEnable_GSNotifyBeginCS, TotalDuration) == 0x000040, "Member 'BANS_GSSetDmgNumCanEnable_GSNotifyBeginCS::TotalDuration' has a wrong offset!");

// Function b1-Managed.BAN_GSFallDyingCheck.bIsNativeBranchingPointCS
// 0x0001 (0x0001 - 0x0000)
struct BAN_GSFallDyingCheck_bIsNativeBranchingPointCS final
{
public:
	uint8                                         ReturnValue : 1;                                   // 0x0000(0x0001)(BitIndex: 0x00, PropSize: 0x0001 (Parm, OutParm, ReturnParm, NoDestructor, HasGetValueTypeHash))
};
//static_assert(alignof(BAN_GSFallDyingCheck_bIsNativeBranchingPointCS) == 0x000001, "Wrong alignment on BAN_GSFallDyingCheck_bIsNativeBranchingPointCS");
//static_assert(sizeof(BAN_GSFallDyingCheck_bIsNativeBranchingPointCS) == 0x000001, "Wrong size on BAN_GSFallDyingCheck_bIsNativeBranchingPointCS");

// Function b1-Managed.BAN_GSFallDyingCheck.GSNotifyCS
// 0x0040 (0x0040 - 0x0000)
struct BAN_GSFallDyingCheck_GSNotifyCS final
{
public:
	struct FUStGSNotifyParam                      NotifyParam;                                       // 0x0000(0x0040)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
//static_assert(alignof(BAN_GSFallDyingCheck_GSNotifyCS) == 0x000008, "Wrong alignment on BAN_GSFallDyingCheck_GSNotifyCS");
//static_assert(sizeof(BAN_GSFallDyingCheck_GSNotifyCS) == 0x000040, "Wrong size on BAN_GSFallDyingCheck_GSNotifyCS");
//static_assert(offsetof(BAN_GSFallDyingCheck_GSNotifyCS, NotifyParam) == 0x000000, "Member 'BAN_GSFallDyingCheck_GSNotifyCS::NotifyParam' has a wrong offset!");

// Function b1-Managed.BAN_GSMagicallyChange.bIsNativeBranchingPointCS
// 0x0001 (0x0001 - 0x0000)
struct BAN_GSMagicallyChange_bIsNativeBranchingPointCS final
{
public:
	uint8                                         ReturnValue : 1;                                   // 0x0000(0x0001)(BitIndex: 0x00, PropSize: 0x0001 (Parm, OutParm, ReturnParm, NoDestructor, HasGetValueTypeHash))
};
//static_assert(alignof(BAN_GSMagicallyChange_bIsNativeBranchingPointCS) == 0x000001, "Wrong alignment on BAN_GSMagicallyChange_bIsNativeBranchingPointCS");
//static_assert(sizeof(BAN_GSMagicallyChange_bIsNativeBranchingPointCS) == 0x000001, "Wrong size on BAN_GSMagicallyChange_bIsNativeBranchingPointCS");

// Function b1-Managed.BAN_GSMagicallyChange.GSNotifyCS
// 0x0040 (0x0040 - 0x0000)
struct BAN_GSMagicallyChange_GSNotifyCS final
{
public:
	struct FUStGSNotifyParam                      NotifyParam;                                       // 0x0000(0x0040)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
//static_assert(alignof(BAN_GSMagicallyChange_GSNotifyCS) == 0x000008, "Wrong alignment on BAN_GSMagicallyChange_GSNotifyCS");
//static_assert(sizeof(BAN_GSMagicallyChange_GSNotifyCS) == 0x000040, "Wrong size on BAN_GSMagicallyChange_GSNotifyCS");
//static_assert(offsetof(BAN_GSMagicallyChange_GSNotifyCS, NotifyParam) == 0x000000, "Member 'BAN_GSMagicallyChange_GSNotifyCS::NotifyParam' has a wrong offset!");

// Function b1-Managed.BAN_GSMagicallyChangeRecover.bIsNativeBranchingPointCS
// 0x0001 (0x0001 - 0x0000)
struct BAN_GSMagicallyChangeRecover_bIsNativeBranchingPointCS final
{
public:
	uint8                                         ReturnValue : 1;                                   // 0x0000(0x0001)(BitIndex: 0x00, PropSize: 0x0001 (Parm, OutParm, ReturnParm, NoDestructor, HasGetValueTypeHash))
};
//static_assert(alignof(BAN_GSMagicallyChangeRecover_bIsNativeBranchingPointCS) == 0x000001, "Wrong alignment on BAN_GSMagicallyChangeRecover_bIsNativeBranchingPointCS");
//static_assert(sizeof(BAN_GSMagicallyChangeRecover_bIsNativeBranchingPointCS) == 0x000001, "Wrong size on BAN_GSMagicallyChangeRecover_bIsNativeBranchingPointCS");

// Function b1-Managed.BAN_GSMagicallyChangeRecover.GSNotifyCS
// 0x0040 (0x0040 - 0x0000)
struct BAN_GSMagicallyChangeRecover_GSNotifyCS final
{
public:
	struct FUStGSNotifyParam                      NotifyParam;                                       // 0x0000(0x0040)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
//static_assert(alignof(BAN_GSMagicallyChangeRecover_GSNotifyCS) == 0x000008, "Wrong alignment on BAN_GSMagicallyChangeRecover_GSNotifyCS");
//static_assert(sizeof(BAN_GSMagicallyChangeRecover_GSNotifyCS) == 0x000040, "Wrong size on BAN_GSMagicallyChangeRecover_GSNotifyCS");
//static_assert(offsetof(BAN_GSMagicallyChangeRecover_GSNotifyCS, NotifyParam) == 0x000000, "Member 'BAN_GSMagicallyChangeRecover_GSNotifyCS::NotifyParam' has a wrong offset!");

// Function b1-Managed.BAN_GSTriggerSplineMoveDBC.GSNotifyCS
// 0x0040 (0x0040 - 0x0000)
struct BAN_GSTriggerSplineMoveDBC_GSNotifyCS final
{
public:
	struct FUStGSNotifyParam                      NotifyParam;                                       // 0x0000(0x0040)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
//static_assert(alignof(BAN_GSTriggerSplineMoveDBC_GSNotifyCS) == 0x000008, "Wrong alignment on BAN_GSTriggerSplineMoveDBC_GSNotifyCS");
//static_assert(sizeof(BAN_GSTriggerSplineMoveDBC_GSNotifyCS) == 0x000040, "Wrong size on BAN_GSTriggerSplineMoveDBC_GSNotifyCS");
//static_assert(offsetof(BAN_GSTriggerSplineMoveDBC_GSNotifyCS, NotifyParam) == 0x000000, "Member 'BAN_GSTriggerSplineMoveDBC_GSNotifyCS::NotifyParam' has a wrong offset!");

// Function b1-Managed.BAN_GSPlayMappedSoundFX.GSNotifyCS
// 0x0040 (0x0040 - 0x0000)
struct BAN_GSPlayMappedSoundFX_GSNotifyCS final
{
public:
	struct FUStGSNotifyParam                      NotifyParam;                                       // 0x0000(0x0040)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
//static_assert(alignof(BAN_GSPlayMappedSoundFX_GSNotifyCS) == 0x000008, "Wrong alignment on BAN_GSPlayMappedSoundFX_GSNotifyCS");
//static_assert(sizeof(BAN_GSPlayMappedSoundFX_GSNotifyCS) == 0x000040, "Wrong size on BAN_GSPlayMappedSoundFX_GSNotifyCS");
//static_assert(offsetof(BAN_GSPlayMappedSoundFX_GSNotifyCS, NotifyParam) == 0x000000, "Member 'BAN_GSPlayMappedSoundFX_GSNotifyCS::NotifyParam' has a wrong offset!");

// Function b1-Managed.BUAnimWheel.BlueprintUpdateAnimation
// 0x0004 (0x0004 - 0x0000)
struct BUAnimWheel_BlueprintUpdateAnimation final
{
public:
	float                                         DeltaTimeX;                                        // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
//static_assert(alignof(BUAnimWheel_BlueprintUpdateAnimation) == 0x000004, "Wrong alignment on BUAnimWheel_BlueprintUpdateAnimation");
//static_assert(sizeof(BUAnimWheel_BlueprintUpdateAnimation) == 0x000004, "Wrong size on BUAnimWheel_BlueprintUpdateAnimation");
//static_assert(offsetof(BUAnimWheel_BlueprintUpdateAnimation, DeltaTimeX) == 0x000000, "Member 'BUAnimWheel_BlueprintUpdateAnimation::DeltaTimeX' has a wrong offset!");

// Function b1-Managed.BAN_ShowCommTips.GSNotifyCS
// 0x0040 (0x0040 - 0x0000)
struct BAN_ShowCommTips_GSNotifyCS final
{
public:
	struct FUStGSNotifyParam                      NotifyParam;                                       // 0x0000(0x0040)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
//static_assert(alignof(BAN_ShowCommTips_GSNotifyCS) == 0x000008, "Wrong alignment on BAN_ShowCommTips_GSNotifyCS");
//static_assert(sizeof(BAN_ShowCommTips_GSNotifyCS) == 0x000040, "Wrong size on BAN_ShowCommTips_GSNotifyCS");
//static_assert(offsetof(BAN_ShowCommTips_GSNotifyCS, NotifyParam) == 0x000000, "Member 'BAN_ShowCommTips_GSNotifyCS::NotifyParam' has a wrong offset!");

// Function b1-Managed.BGS_GSEventCollection.Evt_BGS_OnlineChallengeStateTrigger_Multicast_Invoke
// 0x0008 (0x0008 - 0x0000)
struct BGS_GSEventCollection_Evt_BGS_OnlineChallengeStateTrigger_Multicast_Invoke final
{
public:
	int32                                         P1;                                                // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         P2;                                                // 0x0004(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
//static_assert(alignof(BGS_GSEventCollection_Evt_BGS_OnlineChallengeStateTrigger_Multicast_Invoke) == 0x000004, "Wrong alignment on BGS_GSEventCollection_Evt_BGS_OnlineChallengeStateTrigger_Multicast_Invoke");
//static_assert(sizeof(BGS_GSEventCollection_Evt_BGS_OnlineChallengeStateTrigger_Multicast_Invoke) == 0x000008, "Wrong size on BGS_GSEventCollection_Evt_BGS_OnlineChallengeStateTrigger_Multicast_Invoke");
//static_assert(offsetof(BGS_GSEventCollection_Evt_BGS_OnlineChallengeStateTrigger_Multicast_Invoke, P1) == 0x000000, "Member 'BGS_GSEventCollection_Evt_BGS_OnlineChallengeStateTrigger_Multicast_Invoke::P1' has a wrong offset!");
//static_assert(offsetof(BGS_GSEventCollection_Evt_BGS_OnlineChallengeStateTrigger_Multicast_Invoke, P2) == 0x000004, "Member 'BGS_GSEventCollection_Evt_BGS_OnlineChallengeStateTrigger_Multicast_Invoke::P2' has a wrong offset!");

// Function b1-Managed.BGS_GSEventCollection.Evt_BGS_NotifyCopyHatredInfo_Multicast_Invoke
// 0x0018 (0x0018 - 0x0000)
struct BGS_GSEventCollection_Evt_BGS_NotifyCopyHatredInfo_Multicast_Invoke final
{
public:
	class AActor*                                 OriginActor;                                       // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class AActor*                                 CopyActor;                                         // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         bRemoveOriginHatredInfo : 1;                       // 0x0010(0x0001)(BitIndex: 0x00, PropSize: 0x0001 (Parm, NoDestructor, HasGetValueTypeHash))
};
//static_assert(alignof(BGS_GSEventCollection_Evt_BGS_NotifyCopyHatredInfo_Multicast_Invoke) == 0x000008, "Wrong alignment on BGS_GSEventCollection_Evt_BGS_NotifyCopyHatredInfo_Multicast_Invoke");
//static_assert(sizeof(BGS_GSEventCollection_Evt_BGS_NotifyCopyHatredInfo_Multicast_Invoke) == 0x000018, "Wrong size on BGS_GSEventCollection_Evt_BGS_NotifyCopyHatredInfo_Multicast_Invoke");
//static_assert(offsetof(BGS_GSEventCollection_Evt_BGS_NotifyCopyHatredInfo_Multicast_Invoke, OriginActor) == 0x000000, "Member 'BGS_GSEventCollection_Evt_BGS_NotifyCopyHatredInfo_Multicast_Invoke::OriginActor' has a wrong offset!");
//static_assert(offsetof(BGS_GSEventCollection_Evt_BGS_NotifyCopyHatredInfo_Multicast_Invoke, CopyActor) == 0x000008, "Member 'BGS_GSEventCollection_Evt_BGS_NotifyCopyHatredInfo_Multicast_Invoke::CopyActor' has a wrong offset!");

// Function b1-Managed.BGS_GSEventCollection.Evt_BGS_SwitchTickRateLogic_Multicast_Invoke
// 0x0004 (0x0004 - 0x0000)
struct BGS_GSEventCollection_Evt_BGS_SwitchTickRateLogic_Multicast_Invoke final
{
public:
	int32                                         P1;                                                // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
//static_assert(alignof(BGS_GSEventCollection_Evt_BGS_SwitchTickRateLogic_Multicast_Invoke) == 0x000004, "Wrong alignment on BGS_GSEventCollection_Evt_BGS_SwitchTickRateLogic_Multicast_Invoke");
//static_assert(sizeof(BGS_GSEventCollection_Evt_BGS_SwitchTickRateLogic_Multicast_Invoke) == 0x000004, "Wrong size on BGS_GSEventCollection_Evt_BGS_SwitchTickRateLogic_Multicast_Invoke");
//static_assert(offsetof(BGS_GSEventCollection_Evt_BGS_SwitchTickRateLogic_Multicast_Invoke, P1) == 0x000000, "Member 'BGS_GSEventCollection_Evt_BGS_SwitchTickRateLogic_Multicast_Invoke::P1' has a wrong offset!");

// Function b1-Managed.BGS_GSEventCollection.Evt_BGS_SendOnlineScreenMsg_Multicast_Invoke
// 0x0020 (0x0020 - 0x0000)
struct BGS_GSEventCollection_Evt_BGS_SendOnlineScreenMsg_Multicast_Invoke final
{
public:
	EScreenMsgType                                ScreenMsgType;                                     // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_1[0x7];                                        // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 Msg;                                               // 0x0008(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash)
	int32                                         TipsDuration;                                      // 0x0018(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
//static_assert(alignof(BGS_GSEventCollection_Evt_BGS_SendOnlineScreenMsg_Multicast_Invoke) == 0x000008, "Wrong alignment on BGS_GSEventCollection_Evt_BGS_SendOnlineScreenMsg_Multicast_Invoke");
//static_assert(sizeof(BGS_GSEventCollection_Evt_BGS_SendOnlineScreenMsg_Multicast_Invoke) == 0x000020, "Wrong size on BGS_GSEventCollection_Evt_BGS_SendOnlineScreenMsg_Multicast_Invoke");
//static_assert(offsetof(BGS_GSEventCollection_Evt_BGS_SendOnlineScreenMsg_Multicast_Invoke, ScreenMsgType) == 0x000000, "Member 'BGS_GSEventCollection_Evt_BGS_SendOnlineScreenMsg_Multicast_Invoke::ScreenMsgType' has a wrong offset!");
//static_assert(offsetof(BGS_GSEventCollection_Evt_BGS_SendOnlineScreenMsg_Multicast_Invoke, Msg) == 0x000008, "Member 'BGS_GSEventCollection_Evt_BGS_SendOnlineScreenMsg_Multicast_Invoke::Msg' has a wrong offset!");
//static_assert(offsetof(BGS_GSEventCollection_Evt_BGS_SendOnlineScreenMsg_Multicast_Invoke, TipsDuration) == 0x000018, "Member 'BGS_GSEventCollection_Evt_BGS_SendOnlineScreenMsg_Multicast_Invoke::TipsDuration' has a wrong offset!");

// Function b1-Managed.BGS_GSEventCollection.Evt_BGS_NotifySwitchTarget_Multicast_Invoke
// 0x0018 (0x0018 - 0x0000)
struct BGS_GSEventCollection_Evt_BGS_NotifySwitchTarget_Multicast_Invoke final
{
public:
	class AActor*                                 OldTarget;                                         // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class AActor*                                 NewTarget;                                         // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         TriggerTaunt : 1;                                  // 0x0010(0x0001)(BitIndex: 0x00, PropSize: 0x0001 (Parm, NoDestructor, HasGetValueTypeHash))
	ETargetSourceType                             TargetSourceType;                                  // 0x0011(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
//static_assert(alignof(BGS_GSEventCollection_Evt_BGS_NotifySwitchTarget_Multicast_Invoke) == 0x000008, "Wrong alignment on BGS_GSEventCollection_Evt_BGS_NotifySwitchTarget_Multicast_Invoke");
//static_assert(sizeof(BGS_GSEventCollection_Evt_BGS_NotifySwitchTarget_Multicast_Invoke) == 0x000018, "Wrong size on BGS_GSEventCollection_Evt_BGS_NotifySwitchTarget_Multicast_Invoke");
//static_assert(offsetof(BGS_GSEventCollection_Evt_BGS_NotifySwitchTarget_Multicast_Invoke, OldTarget) == 0x000000, "Member 'BGS_GSEventCollection_Evt_BGS_NotifySwitchTarget_Multicast_Invoke::OldTarget' has a wrong offset!");
//static_assert(offsetof(BGS_GSEventCollection_Evt_BGS_NotifySwitchTarget_Multicast_Invoke, NewTarget) == 0x000008, "Member 'BGS_GSEventCollection_Evt_BGS_NotifySwitchTarget_Multicast_Invoke::NewTarget' has a wrong offset!");
//static_assert(offsetof(BGS_GSEventCollection_Evt_BGS_NotifySwitchTarget_Multicast_Invoke, TargetSourceType) == 0x000011, "Member 'BGS_GSEventCollection_Evt_BGS_NotifySwitchTarget_Multicast_Invoke::TargetSourceType' has a wrong offset!");

// Function b1-Managed.BGS_GSEventCollection.Evt_BGS_OnPlayerPostLogin_Multicast_Invoke
// 0x0008 (0x0008 - 0x0000)
struct BGS_GSEventCollection_Evt_BGS_OnPlayerPostLogin_Multicast_Invoke final
{
public:
	class APlayerController*                      NewPlayer;                                         // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
//static_assert(alignof(BGS_GSEventCollection_Evt_BGS_OnPlayerPostLogin_Multicast_Invoke) == 0x000008, "Wrong alignment on BGS_GSEventCollection_Evt_BGS_OnPlayerPostLogin_Multicast_Invoke");
//static_assert(sizeof(BGS_GSEventCollection_Evt_BGS_OnPlayerPostLogin_Multicast_Invoke) == 0x000008, "Wrong size on BGS_GSEventCollection_Evt_BGS_OnPlayerPostLogin_Multicast_Invoke");
//static_assert(offsetof(BGS_GSEventCollection_Evt_BGS_OnPlayerPostLogin_Multicast_Invoke, NewPlayer) == 0x000000, "Member 'BGS_GSEventCollection_Evt_BGS_OnPlayerPostLogin_Multicast_Invoke::NewPlayer' has a wrong offset!");

// Function b1-Managed.BGS_GSEventCollection.Evt_BGS_OnUnitTransited_Multicast_Invoke
// 0x0010 (0x0010 - 0x0000)
struct BGS_GSEventCollection_Evt_BGS_OnUnitTransited_Multicast_Invoke final
{
public:
	class AActor*                                 OldUnit;                                           // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class AActor*                                 NewlySpawnedUnit;                                  // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
//static_assert(alignof(BGS_GSEventCollection_Evt_BGS_OnUnitTransited_Multicast_Invoke) == 0x000008, "Wrong alignment on BGS_GSEventCollection_Evt_BGS_OnUnitTransited_Multicast_Invoke");
//static_assert(sizeof(BGS_GSEventCollection_Evt_BGS_OnUnitTransited_Multicast_Invoke) == 0x000010, "Wrong size on BGS_GSEventCollection_Evt_BGS_OnUnitTransited_Multicast_Invoke");
//static_assert(offsetof(BGS_GSEventCollection_Evt_BGS_OnUnitTransited_Multicast_Invoke, OldUnit) == 0x000000, "Member 'BGS_GSEventCollection_Evt_BGS_OnUnitTransited_Multicast_Invoke::OldUnit' has a wrong offset!");
//static_assert(offsetof(BGS_GSEventCollection_Evt_BGS_OnUnitTransited_Multicast_Invoke, NewlySpawnedUnit) == 0x000008, "Member 'BGS_GSEventCollection_Evt_BGS_OnUnitTransited_Multicast_Invoke::NewlySpawnedUnit' has a wrong offset!");

// Function b1-Managed.BGS_GSEventCollection.Evt_BGS_OnPlayerLogOut_Multicast_Invoke
// 0x0008 (0x0008 - 0x0000)
struct BGS_GSEventCollection_Evt_BGS_OnPlayerLogOut_Multicast_Invoke final
{
public:
	class AController*                            Exitting;                                          // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
//static_assert(alignof(BGS_GSEventCollection_Evt_BGS_OnPlayerLogOut_Multicast_Invoke) == 0x000008, "Wrong alignment on BGS_GSEventCollection_Evt_BGS_OnPlayerLogOut_Multicast_Invoke");
//static_assert(sizeof(BGS_GSEventCollection_Evt_BGS_OnPlayerLogOut_Multicast_Invoke) == 0x000008, "Wrong size on BGS_GSEventCollection_Evt_BGS_OnPlayerLogOut_Multicast_Invoke");
//static_assert(offsetof(BGS_GSEventCollection_Evt_BGS_OnPlayerLogOut_Multicast_Invoke, Exitting) == 0x000000, "Member 'BGS_GSEventCollection_Evt_BGS_OnPlayerLogOut_Multicast_Invoke::Exitting' has a wrong offset!");

// Function b1-Managed.BGS_GSEventCollection.Evt_BGS_ItemFullOnline_Multicast_Invoke
// 0x0004 (0x0004 - 0x0000)
struct BGS_GSEventCollection_Evt_BGS_ItemFullOnline_Multicast_Invoke final
{
public:
	int32                                         P1;                                                // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
//static_assert(alignof(BGS_GSEventCollection_Evt_BGS_ItemFullOnline_Multicast_Invoke) == 0x000004, "Wrong alignment on BGS_GSEventCollection_Evt_BGS_ItemFullOnline_Multicast_Invoke");
//static_assert(sizeof(BGS_GSEventCollection_Evt_BGS_ItemFullOnline_Multicast_Invoke) == 0x000004, "Wrong size on BGS_GSEventCollection_Evt_BGS_ItemFullOnline_Multicast_Invoke");
//static_assert(offsetof(BGS_GSEventCollection_Evt_BGS_ItemFullOnline_Multicast_Invoke, P1) == 0x000000, "Member 'BGS_GSEventCollection_Evt_BGS_ItemFullOnline_Multicast_Invoke::P1' has a wrong offset!");

// Function b1-Managed.BGS_GSEventCollection.Evt_BGS_TestGameState_Multicast_Invoke
// 0x0004 (0x0004 - 0x0000)
struct BGS_GSEventCollection_Evt_BGS_TestGameState_Multicast_Invoke final
{
public:
	int32                                         P1;                                                // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
//static_assert(alignof(BGS_GSEventCollection_Evt_BGS_TestGameState_Multicast_Invoke) == 0x000004, "Wrong alignment on BGS_GSEventCollection_Evt_BGS_TestGameState_Multicast_Invoke");
//static_assert(sizeof(BGS_GSEventCollection_Evt_BGS_TestGameState_Multicast_Invoke) == 0x000004, "Wrong size on BGS_GSEventCollection_Evt_BGS_TestGameState_Multicast_Invoke");
//static_assert(offsetof(BGS_GSEventCollection_Evt_BGS_TestGameState_Multicast_Invoke, P1) == 0x000000, "Member 'BGS_GSEventCollection_Evt_BGS_TestGameState_Multicast_Invoke::P1' has a wrong offset!");

// Function b1-Managed.BGS_GSEventCollection.Evt_BGS_PlayerLogOut_Multicast_Invoke
// 0x0008 (0x0008 - 0x0000)
struct BGS_GSEventCollection_Evt_BGS_PlayerLogOut_Multicast_Invoke final
{
public:
	class APlayerState*                           PlayerState;                                       // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
//static_assert(alignof(BGS_GSEventCollection_Evt_BGS_PlayerLogOut_Multicast_Invoke) == 0x000008, "Wrong alignment on BGS_GSEventCollection_Evt_BGS_PlayerLogOut_Multicast_Invoke");
//static_assert(sizeof(BGS_GSEventCollection_Evt_BGS_PlayerLogOut_Multicast_Invoke) == 0x000008, "Wrong size on BGS_GSEventCollection_Evt_BGS_PlayerLogOut_Multicast_Invoke");
//static_assert(offsetof(BGS_GSEventCollection_Evt_BGS_PlayerLogOut_Multicast_Invoke, PlayerState) == 0x000000, "Member 'BGS_GSEventCollection_Evt_BGS_PlayerLogOut_Multicast_Invoke::PlayerState' has a wrong offset!");

// Function b1-Managed.BGS_GSEventCollection.Evt_BGS_PlayerJoin_Multicast_Invoke
// 0x0008 (0x0008 - 0x0000)
struct BGS_GSEventCollection_Evt_BGS_PlayerJoin_Multicast_Invoke final
{
public:
	class APlayerState*                           PlayerState;                                       // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
//static_assert(alignof(BGS_GSEventCollection_Evt_BGS_PlayerJoin_Multicast_Invoke) == 0x000008, "Wrong alignment on BGS_GSEventCollection_Evt_BGS_PlayerJoin_Multicast_Invoke");
//static_assert(sizeof(BGS_GSEventCollection_Evt_BGS_PlayerJoin_Multicast_Invoke) == 0x000008, "Wrong size on BGS_GSEventCollection_Evt_BGS_PlayerJoin_Multicast_Invoke");
//static_assert(offsetof(BGS_GSEventCollection_Evt_BGS_PlayerJoin_Multicast_Invoke, PlayerState) == 0x000000, "Member 'BGS_GSEventCollection_Evt_BGS_PlayerJoin_Multicast_Invoke::PlayerState' has a wrong offset!");

// Function b1-Managed.BGS_GSEventCollection.Evt_PostMulticastAkEventMultiCast
// 0x0008 (0x0008 - 0x0000)
struct BGS_GSEventCollection_Evt_PostMulticastAkEventMultiCast final
{
public:
	class UAkAudioEvent*                          AkEvent;                                           // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
//static_assert(alignof(BGS_GSEventCollection_Evt_PostMulticastAkEventMultiCast) == 0x000008, "Wrong alignment on BGS_GSEventCollection_Evt_PostMulticastAkEventMultiCast");
//static_assert(sizeof(BGS_GSEventCollection_Evt_PostMulticastAkEventMultiCast) == 0x000008, "Wrong size on BGS_GSEventCollection_Evt_PostMulticastAkEventMultiCast");
//static_assert(offsetof(BGS_GSEventCollection_Evt_PostMulticastAkEventMultiCast, AkEvent) == 0x000000, "Member 'BGS_GSEventCollection_Evt_PostMulticastAkEventMultiCast::AkEvent' has a wrong offset!");

// Function b1-Managed.BGS_GSEventCollection.Evt_BGS_UnitDead_Multicast_Invoke
// 0x0018 (0x0018 - 0x0000)
struct BGS_GSEventCollection_Evt_BGS_UnitDead_Multicast_Invoke final
{
public:
	class FString                                 UnitGuid;                                          // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash)
	EDeadReason                                   DeadReason;                                        // 0x0010(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
//static_assert(alignof(BGS_GSEventCollection_Evt_BGS_UnitDead_Multicast_Invoke) == 0x000008, "Wrong alignment on BGS_GSEventCollection_Evt_BGS_UnitDead_Multicast_Invoke");
//static_assert(sizeof(BGS_GSEventCollection_Evt_BGS_UnitDead_Multicast_Invoke) == 0x000018, "Wrong size on BGS_GSEventCollection_Evt_BGS_UnitDead_Multicast_Invoke");
//static_assert(offsetof(BGS_GSEventCollection_Evt_BGS_UnitDead_Multicast_Invoke, UnitGuid) == 0x000000, "Member 'BGS_GSEventCollection_Evt_BGS_UnitDead_Multicast_Invoke::UnitGuid' has a wrong offset!");
//static_assert(offsetof(BGS_GSEventCollection_Evt_BGS_UnitDead_Multicast_Invoke, DeadReason) == 0x000010, "Member 'BGS_GSEventCollection_Evt_BGS_UnitDead_Multicast_Invoke::DeadReason' has a wrong offset!");

// Function b1-Managed.BGS_GSEventCollection.Evt_BGS_TriggerShortcutMultiCast
// 0x0008 (0x0008 - 0x0000)
struct BGS_GSEventCollection_Evt_BGS_TriggerShortcutMultiCast final
{
public:
	uint8                                         b1 : 1;                                            // 0x0000(0x0001)(BitIndex: 0x00, PropSize: 0x0001 (Parm, NoDestructor, HasGetValueTypeHash))
	uint8                                         Pad_1[0x3];                                        // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         P2;                                                // 0x0004(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
//static_assert(alignof(BGS_GSEventCollection_Evt_BGS_TriggerShortcutMultiCast) == 0x000004, "Wrong alignment on BGS_GSEventCollection_Evt_BGS_TriggerShortcutMultiCast");
//static_assert(sizeof(BGS_GSEventCollection_Evt_BGS_TriggerShortcutMultiCast) == 0x000008, "Wrong size on BGS_GSEventCollection_Evt_BGS_TriggerShortcutMultiCast");
//static_assert(offsetof(BGS_GSEventCollection_Evt_BGS_TriggerShortcutMultiCast, P2) == 0x000004, "Member 'BGS_GSEventCollection_Evt_BGS_TriggerShortcutMultiCast::P2' has a wrong offset!");

// Function b1-Managed.BGS_GSEventCollection.Evt_PostMulticastAkEventServer
// 0x0008 (0x0008 - 0x0000)
struct BGS_GSEventCollection_Evt_PostMulticastAkEventServer final
{
public:
	class UAkAudioEvent*                          AkEvent;                                           // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
//static_assert(alignof(BGS_GSEventCollection_Evt_PostMulticastAkEventServer) == 0x000008, "Wrong alignment on BGS_GSEventCollection_Evt_PostMulticastAkEventServer");
//static_assert(sizeof(BGS_GSEventCollection_Evt_PostMulticastAkEventServer) == 0x000008, "Wrong size on BGS_GSEventCollection_Evt_PostMulticastAkEventServer");
//static_assert(offsetof(BGS_GSEventCollection_Evt_PostMulticastAkEventServer, AkEvent) == 0x000000, "Member 'BGS_GSEventCollection_Evt_PostMulticastAkEventServer::AkEvent' has a wrong offset!");

// Function b1-Managed.BGS_GSEventCollection.Evt_BGS_TriggerShortcutServer
// 0x0008 (0x0008 - 0x0000)
struct BGS_GSEventCollection_Evt_BGS_TriggerShortcutServer final
{
public:
	uint8                                         b1 : 1;                                            // 0x0000(0x0001)(BitIndex: 0x00, PropSize: 0x0001 (Parm, NoDestructor, HasGetValueTypeHash))
	uint8                                         Pad_1[0x3];                                        // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         P2;                                                // 0x0004(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
//static_assert(alignof(BGS_GSEventCollection_Evt_BGS_TriggerShortcutServer) == 0x000004, "Wrong alignment on BGS_GSEventCollection_Evt_BGS_TriggerShortcutServer");
//static_assert(sizeof(BGS_GSEventCollection_Evt_BGS_TriggerShortcutServer) == 0x000008, "Wrong size on BGS_GSEventCollection_Evt_BGS_TriggerShortcutServer");
//static_assert(offsetof(BGS_GSEventCollection_Evt_BGS_TriggerShortcutServer, P2) == 0x000004, "Member 'BGS_GSEventCollection_Evt_BGS_TriggerShortcutServer::P2' has a wrong offset!");

// Function b1-Managed.BGS_GSEventCollection.EndPlayInCS
// 0x0001 (0x0001 - 0x0000)
struct BGS_GSEventCollection_EndPlayInCS final
{
public:
	EEndPlayReason                                EndPlayReason;                                     // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
//static_assert(alignof(BGS_GSEventCollection_EndPlayInCS) == 0x000001, "Wrong alignment on BGS_GSEventCollection_EndPlayInCS");
//static_assert(sizeof(BGS_GSEventCollection_EndPlayInCS) == 0x000001, "Wrong size on BGS_GSEventCollection_EndPlayInCS");
//static_assert(offsetof(BGS_GSEventCollection_EndPlayInCS, EndPlayReason) == 0x000000, "Member 'BGS_GSEventCollection_EndPlayInCS::EndPlayReason' has a wrong offset!");

// Function b1-Managed.BPS_GSEventCollection.Evt_BPS_ServerNotifyClientAuthorityTamerDead_Invoke
// 0x0010 (0x0010 - 0x0000)
struct BPS_GSEventCollection_Evt_BPS_ServerNotifyClientAuthorityTamerDead_Invoke final
{
public:
	TArray<class FString>                         Guids;                                             // 0x0000(0x0010)(Parm)
};
//static_assert(alignof(BPS_GSEventCollection_Evt_BPS_ServerNotifyClientAuthorityTamerDead_Invoke) == 0x000008, "Wrong alignment on BPS_GSEventCollection_Evt_BPS_ServerNotifyClientAuthorityTamerDead_Invoke");
//static_assert(sizeof(BPS_GSEventCollection_Evt_BPS_ServerNotifyClientAuthorityTamerDead_Invoke) == 0x000010, "Wrong size on BPS_GSEventCollection_Evt_BPS_ServerNotifyClientAuthorityTamerDead_Invoke");
//static_assert(offsetof(BPS_GSEventCollection_Evt_BPS_ServerNotifyClientAuthorityTamerDead_Invoke, Guids) == 0x000000, "Member 'BPS_GSEventCollection_Evt_BPS_ServerNotifyClientAuthorityTamerDead_Invoke::Guids' has a wrong offset!");

// Function b1-Managed.BPS_GSEventCollection.Evt_BPS_ServerNotifyClientTamerBackToLoad_Invoke
// 0x0010 (0x0010 - 0x0000)
struct BPS_GSEventCollection_Evt_BPS_ServerNotifyClientTamerBackToLoad_Invoke final
{
public:
	TArray<class FString>                         Guids;                                             // 0x0000(0x0010)(Parm)
};
//static_assert(alignof(BPS_GSEventCollection_Evt_BPS_ServerNotifyClientTamerBackToLoad_Invoke) == 0x000008, "Wrong alignment on BPS_GSEventCollection_Evt_BPS_ServerNotifyClientTamerBackToLoad_Invoke");
//static_assert(sizeof(BPS_GSEventCollection_Evt_BPS_ServerNotifyClientTamerBackToLoad_Invoke) == 0x000010, "Wrong size on BPS_GSEventCollection_Evt_BPS_ServerNotifyClientTamerBackToLoad_Invoke");
//static_assert(offsetof(BPS_GSEventCollection_Evt_BPS_ServerNotifyClientTamerBackToLoad_Invoke, Guids) == 0x000000, "Member 'BPS_GSEventCollection_Evt_BPS_ServerNotifyClientTamerBackToLoad_Invoke::Guids' has a wrong offset!");

// Function b1-Managed.BPS_GSEventCollection.Evt_BPS_SwitchPlayerTransState_Multicast_Invoke
// 0x0010 (0x0010 - 0x0000)
struct BPS_GSEventCollection_Evt_BPS_SwitchPlayerTransState_Multicast_Invoke final
{
public:
	class AActor*                                 OldActor;                                          // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         NewActorResId;                                     // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
//static_assert(alignof(BPS_GSEventCollection_Evt_BPS_SwitchPlayerTransState_Multicast_Invoke) == 0x000008, "Wrong alignment on BPS_GSEventCollection_Evt_BPS_SwitchPlayerTransState_Multicast_Invoke");
//static_assert(sizeof(BPS_GSEventCollection_Evt_BPS_SwitchPlayerTransState_Multicast_Invoke) == 0x000010, "Wrong size on BPS_GSEventCollection_Evt_BPS_SwitchPlayerTransState_Multicast_Invoke");
//static_assert(offsetof(BPS_GSEventCollection_Evt_BPS_SwitchPlayerTransState_Multicast_Invoke, OldActor) == 0x000000, "Member 'BPS_GSEventCollection_Evt_BPS_SwitchPlayerTransState_Multicast_Invoke::OldActor' has a wrong offset!");
//static_assert(offsetof(BPS_GSEventCollection_Evt_BPS_SwitchPlayerTransState_Multicast_Invoke, NewActorResId) == 0x000008, "Member 'BPS_GSEventCollection_Evt_BPS_SwitchPlayerTransState_Multicast_Invoke::NewActorResId' has a wrong offset!");

// Function b1-Managed.BPS_GSEventCollection.Evt_BPS_ClientInitCharacterNetRole_Invoke
// 0x0010 (0x0010 - 0x0000)
struct BPS_GSEventCollection_Evt_BPS_ClientInitCharacterNetRole_Invoke final
{
public:
	TArray<struct FTamerRoleSync>                 Guids;                                             // 0x0000(0x0010)(Parm)
};
//static_assert(alignof(BPS_GSEventCollection_Evt_BPS_ClientInitCharacterNetRole_Invoke) == 0x000008, "Wrong alignment on BPS_GSEventCollection_Evt_BPS_ClientInitCharacterNetRole_Invoke");
//static_assert(sizeof(BPS_GSEventCollection_Evt_BPS_ClientInitCharacterNetRole_Invoke) == 0x000010, "Wrong size on BPS_GSEventCollection_Evt_BPS_ClientInitCharacterNetRole_Invoke");
//static_assert(offsetof(BPS_GSEventCollection_Evt_BPS_ClientInitCharacterNetRole_Invoke, Guids) == 0x000000, "Member 'BPS_GSEventCollection_Evt_BPS_ClientInitCharacterNetRole_Invoke::Guids' has a wrong offset!");

// Function b1-Managed.BPS_GSEventCollection.Evt_BPS_TestPlayerState_Multicast_Invoke
// 0x0004 (0x0004 - 0x0000)
struct BPS_GSEventCollection_Evt_BPS_TestPlayerState_Multicast_Invoke final
{
public:
	int32                                         P1;                                                // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
//static_assert(alignof(BPS_GSEventCollection_Evt_BPS_TestPlayerState_Multicast_Invoke) == 0x000004, "Wrong alignment on BPS_GSEventCollection_Evt_BPS_TestPlayerState_Multicast_Invoke");
//static_assert(sizeof(BPS_GSEventCollection_Evt_BPS_TestPlayerState_Multicast_Invoke) == 0x000004, "Wrong size on BPS_GSEventCollection_Evt_BPS_TestPlayerState_Multicast_Invoke");
//static_assert(offsetof(BPS_GSEventCollection_Evt_BPS_TestPlayerState_Multicast_Invoke, P1) == 0x000000, "Member 'BPS_GSEventCollection_Evt_BPS_TestPlayerState_Multicast_Invoke::P1' has a wrong offset!");

// Function b1-Managed.BPS_GSEventCollection.Evt_BPS_ServerSpawnDynamicTamer_Invoke
// 0x0090 (0x0090 - 0x0000)
struct BPS_GSEventCollection_Evt_BPS_ServerSpawnDynamicTamer_Invoke final
{
public:
	struct FDynamicTamerSpawnReq                  TamerClass;                                        // 0x0000(0x0090)(Parm, HasGetValueTypeHash)
};
//static_assert(alignof(BPS_GSEventCollection_Evt_BPS_ServerSpawnDynamicTamer_Invoke) == 0x000010, "Wrong alignment on BPS_GSEventCollection_Evt_BPS_ServerSpawnDynamicTamer_Invoke");
//static_assert(sizeof(BPS_GSEventCollection_Evt_BPS_ServerSpawnDynamicTamer_Invoke) == 0x000090, "Wrong size on BPS_GSEventCollection_Evt_BPS_ServerSpawnDynamicTamer_Invoke");
//static_assert(offsetof(BPS_GSEventCollection_Evt_BPS_ServerSpawnDynamicTamer_Invoke, TamerClass) == 0x000000, "Member 'BPS_GSEventCollection_Evt_BPS_ServerSpawnDynamicTamer_Invoke::TamerClass' has a wrong offset!");

// Function b1-Managed.BPS_GSEventCollection.Evt_CloseConnectionWithResult_Invoke
// 0x0004 (0x0004 - 0x0000)
struct BPS_GSEventCollection_Evt_CloseConnectionWithResult_Invoke final
{
public:
	EGSNetCloseResult                             CloseResult;                                       // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
//static_assert(alignof(BPS_GSEventCollection_Evt_CloseConnectionWithResult_Invoke) == 0x000004, "Wrong alignment on BPS_GSEventCollection_Evt_CloseConnectionWithResult_Invoke");
//static_assert(sizeof(BPS_GSEventCollection_Evt_CloseConnectionWithResult_Invoke) == 0x000004, "Wrong size on BPS_GSEventCollection_Evt_CloseConnectionWithResult_Invoke");
//static_assert(offsetof(BPS_GSEventCollection_Evt_CloseConnectionWithResult_Invoke, CloseResult) == 0x000000, "Member 'BPS_GSEventCollection_Evt_CloseConnectionWithResult_Invoke::CloseResult' has a wrong offset!");

// Function b1-Managed.BPS_GSEventCollection.Evt_SendServantReq_Multicast_Invoke
// 0x01E0 (0x01E0 - 0x0000)
struct BPS_GSEventCollection_Evt_SendServantReq_Multicast_Invoke final
{
public:
	struct FServantReq                            InServantReq;                                      // 0x0000(0x01E0)(Parm, HasGetValueTypeHash)
};
//static_assert(alignof(BPS_GSEventCollection_Evt_SendServantReq_Multicast_Invoke) == 0x000010, "Wrong alignment on BPS_GSEventCollection_Evt_SendServantReq_Multicast_Invoke");
//static_assert(sizeof(BPS_GSEventCollection_Evt_SendServantReq_Multicast_Invoke) == 0x0001E0, "Wrong size on BPS_GSEventCollection_Evt_SendServantReq_Multicast_Invoke");
//static_assert(offsetof(BPS_GSEventCollection_Evt_SendServantReq_Multicast_Invoke, InServantReq) == 0x000000, "Member 'BPS_GSEventCollection_Evt_SendServantReq_Multicast_Invoke::InServantReq' has a wrong offset!");

// Function b1-Managed.BPS_GSEventCollection.Evt_BPS_ServerActivateTamer_Invoke
// 0x0010 (0x0010 - 0x0000)
struct BPS_GSEventCollection_Evt_BPS_ServerActivateTamer_Invoke final
{
public:
	TArray<class FString>                         Guids;                                             // 0x0000(0x0010)(Parm)
};
//static_assert(alignof(BPS_GSEventCollection_Evt_BPS_ServerActivateTamer_Invoke) == 0x000008, "Wrong alignment on BPS_GSEventCollection_Evt_BPS_ServerActivateTamer_Invoke");
//static_assert(sizeof(BPS_GSEventCollection_Evt_BPS_ServerActivateTamer_Invoke) == 0x000010, "Wrong size on BPS_GSEventCollection_Evt_BPS_ServerActivateTamer_Invoke");
//static_assert(offsetof(BPS_GSEventCollection_Evt_BPS_ServerActivateTamer_Invoke, Guids) == 0x000000, "Member 'BPS_GSEventCollection_Evt_BPS_ServerActivateTamer_Invoke::Guids' has a wrong offset!");

// Function b1-Managed.BPS_GSEventCollection.Evt_TmpTransSendDropItem_Invoke
// 0x0004 (0x0004 - 0x0000)
struct BPS_GSEventCollection_Evt_TmpTransSendDropItem_Invoke final
{
public:
	int32                                         P1;                                                // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
//static_assert(alignof(BPS_GSEventCollection_Evt_TmpTransSendDropItem_Invoke) == 0x000004, "Wrong alignment on BPS_GSEventCollection_Evt_TmpTransSendDropItem_Invoke");
//static_assert(sizeof(BPS_GSEventCollection_Evt_TmpTransSendDropItem_Invoke) == 0x000004, "Wrong size on BPS_GSEventCollection_Evt_TmpTransSendDropItem_Invoke");
//static_assert(offsetof(BPS_GSEventCollection_Evt_TmpTransSendDropItem_Invoke, P1) == 0x000000, "Member 'BPS_GSEventCollection_Evt_TmpTransSendDropItem_Invoke::P1' has a wrong offset!");

// Function b1-Managed.BPS_GSEventCollection.Evt_BPS_SyncRoleDataTmp_Invoke
// 0x0010 (0x0010 - 0x0000)
struct BPS_GSEventCollection_Evt_BPS_SyncRoleDataTmp_Invoke final
{
public:
	TArray<uint8>                                 RoleData;                                          // 0x0000(0x0010)(Parm)
};
//static_assert(alignof(BPS_GSEventCollection_Evt_BPS_SyncRoleDataTmp_Invoke) == 0x000008, "Wrong alignment on BPS_GSEventCollection_Evt_BPS_SyncRoleDataTmp_Invoke");
//static_assert(sizeof(BPS_GSEventCollection_Evt_BPS_SyncRoleDataTmp_Invoke) == 0x000010, "Wrong size on BPS_GSEventCollection_Evt_BPS_SyncRoleDataTmp_Invoke");
//static_assert(offsetof(BPS_GSEventCollection_Evt_BPS_SyncRoleDataTmp_Invoke, RoleData) == 0x000000, "Member 'BPS_GSEventCollection_Evt_BPS_SyncRoleDataTmp_Invoke::RoleData' has a wrong offset!");

// Function b1-Managed.BPS_GSEventCollection.EndPlayInCS
// 0x0001 (0x0001 - 0x0000)
struct BPS_GSEventCollection_EndPlayInCS final
{
public:
	EEndPlayReason                                EndPlayReason;                                     // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
//static_assert(alignof(BPS_GSEventCollection_EndPlayInCS) == 0x000001, "Wrong alignment on BPS_GSEventCollection_EndPlayInCS");
//static_assert(sizeof(BPS_GSEventCollection_EndPlayInCS) == 0x000001, "Wrong size on BPS_GSEventCollection_EndPlayInCS");
//static_assert(offsetof(BPS_GSEventCollection_EndPlayInCS, EndPlayReason) == 0x000000, "Member 'BPS_GSEventCollection_EndPlayInCS::EndPlayReason' has a wrong offset!");

// Function b1-Managed.BPS_GSEventCollection.Evt_RequestSummon_Invoke
// 0x0158 (0x0158 - 0x0000)
struct BPS_GSEventCollection_Evt_RequestSummon_Invoke final
{
public:
	struct FSummonReq                             InSummonReq;                                       // 0x0000(0x0158)(Parm, HasGetValueTypeHash)
};
//static_assert(alignof(BPS_GSEventCollection_Evt_RequestSummon_Invoke) == 0x000008, "Wrong alignment on BPS_GSEventCollection_Evt_RequestSummon_Invoke");
//static_assert(sizeof(BPS_GSEventCollection_Evt_RequestSummon_Invoke) == 0x000158, "Wrong size on BPS_GSEventCollection_Evt_RequestSummon_Invoke");
//static_assert(offsetof(BPS_GSEventCollection_Evt_RequestSummon_Invoke, InSummonReq) == 0x000000, "Member 'BPS_GSEventCollection_Evt_RequestSummon_Invoke::InSummonReq' has a wrong offset!");

// Function b1-Managed.BGUFuncLibSkillCS.BGUCalcSkillMontageScaleRate
// 0x0058 (0x0058 - 0x0000)
struct BGUFuncLibSkillCS_BGUCalcSkillMontageScaleRate final
{
public:
	class ACharacter*                             Unit;                                              // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                TargetPos;                                         // 0x0008(0x0018)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         NotifyBeginTime;                                   // 0x0020(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         NotifyEndTime;                                     // 0x0024(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         AMScaleMinRate;                                    // 0x0028(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         AMScaleMaxRate;                                    // 0x002C(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         AMScaleMoveOffset;                                 // 0x0030(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         AMScaleMoveOffsetZ;                                // 0x0034(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         EnableDebug : 1;                                   // 0x0038(0x0001)(BitIndex: 0x00, PropSize: 0x0001 (Parm, NoDestructor, HasGetValueTypeHash))
	uint8                                         Pad_39[0x7];                                       // 0x0039(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                ReturnValue;                                       // 0x0040(0x0018)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
//static_assert(alignof(BGUFuncLibSkillCS_BGUCalcSkillMontageScaleRate) == 0x000008, "Wrong alignment on BGUFuncLibSkillCS_BGUCalcSkillMontageScaleRate");
//static_assert(sizeof(BGUFuncLibSkillCS_BGUCalcSkillMontageScaleRate) == 0x000058, "Wrong size on BGUFuncLibSkillCS_BGUCalcSkillMontageScaleRate");
//static_assert(offsetof(BGUFuncLibSkillCS_BGUCalcSkillMontageScaleRate, Unit) == 0x000000, "Member 'BGUFuncLibSkillCS_BGUCalcSkillMontageScaleRate::Unit' has a wrong offset!");
//static_assert(offsetof(BGUFuncLibSkillCS_BGUCalcSkillMontageScaleRate, TargetPos) == 0x000008, "Member 'BGUFuncLibSkillCS_BGUCalcSkillMontageScaleRate::TargetPos' has a wrong offset!");
//static_assert(offsetof(BGUFuncLibSkillCS_BGUCalcSkillMontageScaleRate, NotifyBeginTime) == 0x000020, "Member 'BGUFuncLibSkillCS_BGUCalcSkillMontageScaleRate::NotifyBeginTime' has a wrong offset!");
//static_assert(offsetof(BGUFuncLibSkillCS_BGUCalcSkillMontageScaleRate, NotifyEndTime) == 0x000024, "Member 'BGUFuncLibSkillCS_BGUCalcSkillMontageScaleRate::NotifyEndTime' has a wrong offset!");
//static_assert(offsetof(BGUFuncLibSkillCS_BGUCalcSkillMontageScaleRate, AMScaleMinRate) == 0x000028, "Member 'BGUFuncLibSkillCS_BGUCalcSkillMontageScaleRate::AMScaleMinRate' has a wrong offset!");
//static_assert(offsetof(BGUFuncLibSkillCS_BGUCalcSkillMontageScaleRate, AMScaleMaxRate) == 0x00002C, "Member 'BGUFuncLibSkillCS_BGUCalcSkillMontageScaleRate::AMScaleMaxRate' has a wrong offset!");
//static_assert(offsetof(BGUFuncLibSkillCS_BGUCalcSkillMontageScaleRate, AMScaleMoveOffset) == 0x000030, "Member 'BGUFuncLibSkillCS_BGUCalcSkillMontageScaleRate::AMScaleMoveOffset' has a wrong offset!");
//static_assert(offsetof(BGUFuncLibSkillCS_BGUCalcSkillMontageScaleRate, AMScaleMoveOffsetZ) == 0x000034, "Member 'BGUFuncLibSkillCS_BGUCalcSkillMontageScaleRate::AMScaleMoveOffsetZ' has a wrong offset!");
//static_assert(offsetof(BGUFuncLibSkillCS_BGUCalcSkillMontageScaleRate, ReturnValue) == 0x000040, "Member 'BGUFuncLibSkillCS_BGUCalcSkillMontageScaleRate::ReturnValue' has a wrong offset!");

// Function b1-Managed.BGUFuncLibSkillCS.BGUGetLastSkillCastTime
// 0x0010 (0x0010 - 0x0000)
struct BGUFuncLibSkillCS_BGUGetLastSkillCastTime final
{
public:
	class AActor*                                 Unit;                                              // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         SkillID;                                           // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         ReturnValue;                                       // 0x000C(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
//static_assert(alignof(BGUFuncLibSkillCS_BGUGetLastSkillCastTime) == 0x000008, "Wrong alignment on BGUFuncLibSkillCS_BGUGetLastSkillCastTime");
//static_assert(sizeof(BGUFuncLibSkillCS_BGUGetLastSkillCastTime) == 0x000010, "Wrong size on BGUFuncLibSkillCS_BGUGetLastSkillCastTime");
//static_assert(offsetof(BGUFuncLibSkillCS_BGUGetLastSkillCastTime, Unit) == 0x000000, "Member 'BGUFuncLibSkillCS_BGUGetLastSkillCastTime::Unit' has a wrong offset!");
//static_assert(offsetof(BGUFuncLibSkillCS_BGUGetLastSkillCastTime, SkillID) == 0x000008, "Member 'BGUFuncLibSkillCS_BGUGetLastSkillCastTime::SkillID' has a wrong offset!");
//static_assert(offsetof(BGUFuncLibSkillCS_BGUGetLastSkillCastTime, ReturnValue) == 0x00000C, "Member 'BGUFuncLibSkillCS_BGUGetLastSkillCastTime::ReturnValue' has a wrong offset!");

// Function b1-Managed.BGUFuncLibSkillCS.BGUGetCastingSkillID
// 0x0010 (0x0010 - 0x0000)
struct BGUFuncLibSkillCS_BGUGetCastingSkillID final
{
public:
	class ACharacter*                             Unit;                                              // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         ReturnValue;                                       // 0x0008(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
//static_assert(alignof(BGUFuncLibSkillCS_BGUGetCastingSkillID) == 0x000008, "Wrong alignment on BGUFuncLibSkillCS_BGUGetCastingSkillID");
//static_assert(sizeof(BGUFuncLibSkillCS_BGUGetCastingSkillID) == 0x000010, "Wrong size on BGUFuncLibSkillCS_BGUGetCastingSkillID");
//static_assert(offsetof(BGUFuncLibSkillCS_BGUGetCastingSkillID, Unit) == 0x000000, "Member 'BGUFuncLibSkillCS_BGUGetCastingSkillID::Unit' has a wrong offset!");
//static_assert(offsetof(BGUFuncLibSkillCS_BGUGetCastingSkillID, ReturnValue) == 0x000008, "Member 'BGUFuncLibSkillCS_BGUGetCastingSkillID::ReturnValue' has a wrong offset!");

// Function b1-Managed.BGUFuncLibSkillCS.BGUGetLastSkillID
// 0x0010 (0x0010 - 0x0000)
struct BGUFuncLibSkillCS_BGUGetLastSkillID final
{
public:
	class AActor*                                 Unit;                                              // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         ReturnValue;                                       // 0x0008(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
//static_assert(alignof(BGUFuncLibSkillCS_BGUGetLastSkillID) == 0x000008, "Wrong alignment on BGUFuncLibSkillCS_BGUGetLastSkillID");
//static_assert(sizeof(BGUFuncLibSkillCS_BGUGetLastSkillID) == 0x000010, "Wrong size on BGUFuncLibSkillCS_BGUGetLastSkillID");
//static_assert(offsetof(BGUFuncLibSkillCS_BGUGetLastSkillID, Unit) == 0x000000, "Member 'BGUFuncLibSkillCS_BGUGetLastSkillID::Unit' has a wrong offset!");
//static_assert(offsetof(BGUFuncLibSkillCS_BGUGetLastSkillID, ReturnValue) == 0x000008, "Member 'BGUFuncLibSkillCS_BGUGetLastSkillID::ReturnValue' has a wrong offset!");

// Function b1-Managed.GSEQG_PointsOnSphere.DoItemGenerationCS
// 0x0010 (0x0010 - 0x0000)
struct GSEQG_PointsOnSphere_DoItemGenerationCS final
{
public:
	TArray<struct FVector>                        ContextLocations;                                  // 0x0000(0x0010)(ConstParm, Parm, OutParm, ReferenceParm)
};
//static_assert(alignof(GSEQG_PointsOnSphere_DoItemGenerationCS) == 0x000008, "Wrong alignment on GSEQG_PointsOnSphere_DoItemGenerationCS");
//static_assert(sizeof(GSEQG_PointsOnSphere_DoItemGenerationCS) == 0x000010, "Wrong size on GSEQG_PointsOnSphere_DoItemGenerationCS");
//static_assert(offsetof(GSEQG_PointsOnSphere_DoItemGenerationCS, ContextLocations) == 0x000000, "Member 'GSEQG_PointsOnSphere_DoItemGenerationCS::ContextLocations' has a wrong offset!");

// Function b1-Managed.BAIT_Combo.OnPropertyChanged
// 0x0020 (0x0020 - 0x0000)
struct BAIT_Combo_OnPropertyChanged final
{
public:
	class FString                                 MemberName;                                        // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash)
	class FString                                 PropertyName;                                      // 0x0010(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash)
};
//static_assert(alignof(BAIT_Combo_OnPropertyChanged) == 0x000008, "Wrong alignment on BAIT_Combo_OnPropertyChanged");
//static_assert(sizeof(BAIT_Combo_OnPropertyChanged) == 0x000020, "Wrong size on BAIT_Combo_OnPropertyChanged");
//static_assert(offsetof(BAIT_Combo_OnPropertyChanged, MemberName) == 0x000000, "Member 'BAIT_Combo_OnPropertyChanged::MemberName' has a wrong offset!");
//static_assert(offsetof(BAIT_Combo_OnPropertyChanged, PropertyName) == 0x000010, "Member 'BAIT_Combo_OnPropertyChanged::PropertyName' has a wrong offset!");

// Function b1-Managed.BAIT_Combo.QACalcTrueComboArray
// 0x0010 (0x0010 - 0x0000)
struct BAIT_Combo_QACalcTrueComboArray final
{
public:
	TArray<class FString>                         ReturnValue;                                       // 0x0000(0x0010)(Parm, OutParm, ReturnParm)
};
//static_assert(alignof(BAIT_Combo_QACalcTrueComboArray) == 0x000008, "Wrong alignment on BAIT_Combo_QACalcTrueComboArray");
//static_assert(sizeof(BAIT_Combo_QACalcTrueComboArray) == 0x000010, "Wrong size on BAIT_Combo_QACalcTrueComboArray");
//static_assert(offsetof(BAIT_Combo_QACalcTrueComboArray, ReturnValue) == 0x000000, "Member 'BAIT_Combo_QACalcTrueComboArray::ReturnValue' has a wrong offset!");

// Function b1-Managed.BAIT_Combo.QACalcSkillArray
// 0x0010 (0x0010 - 0x0000)
struct BAIT_Combo_QACalcSkillArray final
{
public:
	class FString                                 ReturnValue;                                       // 0x0000(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash)
};
//static_assert(alignof(BAIT_Combo_QACalcSkillArray) == 0x000008, "Wrong alignment on BAIT_Combo_QACalcSkillArray");
//static_assert(sizeof(BAIT_Combo_QACalcSkillArray) == 0x000010, "Wrong size on BAIT_Combo_QACalcSkillArray");
//static_assert(offsetof(BAIT_Combo_QACalcSkillArray, ReturnValue) == 0x000000, "Member 'BAIT_Combo_QACalcSkillArray::ReturnValue' has a wrong offset!");

// Function b1-Managed.BAIT_SwitchAttackAndWander.OnPropertyChanged
// 0x0020 (0x0020 - 0x0000)
struct BAIT_SwitchAttackAndWander_OnPropertyChanged final
{
public:
	class FString                                 MemberName;                                        // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash)
	class FString                                 PropertyName;                                      // 0x0010(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash)
};
//static_assert(alignof(BAIT_SwitchAttackAndWander_OnPropertyChanged) == 0x000008, "Wrong alignment on BAIT_SwitchAttackAndWander_OnPropertyChanged");
//static_assert(sizeof(BAIT_SwitchAttackAndWander_OnPropertyChanged) == 0x000020, "Wrong size on BAIT_SwitchAttackAndWander_OnPropertyChanged");
//static_assert(offsetof(BAIT_SwitchAttackAndWander_OnPropertyChanged, MemberName) == 0x000000, "Member 'BAIT_SwitchAttackAndWander_OnPropertyChanged::MemberName' has a wrong offset!");
//static_assert(offsetof(BAIT_SwitchAttackAndWander_OnPropertyChanged, PropertyName) == 0x000010, "Member 'BAIT_SwitchAttackAndWander_OnPropertyChanged::PropertyName' has a wrong offset!");

// Function b1-Managed.BGURuntimeMeshActor.OnSliceRuntimeMesh
// 0x0038 (0x0038 - 0x0000)
struct BGURuntimeMeshActor_OnSliceRuntimeMesh final
{
public:
	struct FVector                                PlanePosition;                                     // 0x0000(0x0018)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                PlaneNormal;                                       // 0x0018(0x0018)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         ApplyForce;                                        // 0x0030(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
//static_assert(alignof(BGURuntimeMeshActor_OnSliceRuntimeMesh) == 0x000008, "Wrong alignment on BGURuntimeMeshActor_OnSliceRuntimeMesh");
//static_assert(sizeof(BGURuntimeMeshActor_OnSliceRuntimeMesh) == 0x000038, "Wrong size on BGURuntimeMeshActor_OnSliceRuntimeMesh");
//static_assert(offsetof(BGURuntimeMeshActor_OnSliceRuntimeMesh, PlanePosition) == 0x000000, "Member 'BGURuntimeMeshActor_OnSliceRuntimeMesh::PlanePosition' has a wrong offset!");
//static_assert(offsetof(BGURuntimeMeshActor_OnSliceRuntimeMesh, PlaneNormal) == 0x000018, "Member 'BGURuntimeMeshActor_OnSliceRuntimeMesh::PlaneNormal' has a wrong offset!");
//static_assert(offsetof(BGURuntimeMeshActor_OnSliceRuntimeMesh, ApplyForce) == 0x000030, "Member 'BGURuntimeMeshActor_OnSliceRuntimeMesh::ApplyForce' has a wrong offset!");

// Function b1-Managed.B1ReplicationGraphCS.RemoveNetworkActorCS
// 0x0008 (0x0008 - 0x0000)
struct B1ReplicationGraphCS_RemoveNetworkActorCS final
{
public:
	class AActor*                                 Actor;                                             // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
//static_assert(alignof(B1ReplicationGraphCS_RemoveNetworkActorCS) == 0x000008, "Wrong alignment on B1ReplicationGraphCS_RemoveNetworkActorCS");
//static_assert(sizeof(B1ReplicationGraphCS_RemoveNetworkActorCS) == 0x000008, "Wrong size on B1ReplicationGraphCS_RemoveNetworkActorCS");
//static_assert(offsetof(B1ReplicationGraphCS_RemoveNetworkActorCS, Actor) == 0x000000, "Member 'B1ReplicationGraphCS_RemoveNetworkActorCS::Actor' has a wrong offset!");

// Function b1-Managed.B1ReplicationGraphCS.AddNetworkActorCS
// 0x0008 (0x0008 - 0x0000)
struct B1ReplicationGraphCS_AddNetworkActorCS final
{
public:
	class AActor*                                 Actor;                                             // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
//static_assert(alignof(B1ReplicationGraphCS_AddNetworkActorCS) == 0x000008, "Wrong alignment on B1ReplicationGraphCS_AddNetworkActorCS");
//static_assert(sizeof(B1ReplicationGraphCS_AddNetworkActorCS) == 0x000008, "Wrong size on B1ReplicationGraphCS_AddNetworkActorCS");
//static_assert(offsetof(B1ReplicationGraphCS_AddNetworkActorCS, Actor) == 0x000000, "Member 'B1ReplicationGraphCS_AddNetworkActorCS::Actor' has a wrong offset!");

// Function b1-Managed.BANS_GSMatchingTransform.GSNotifyBeginCS
// 0x0048 (0x0048 - 0x0000)
struct BANS_GSMatchingTransform_GSNotifyBeginCS final
{
public:
	struct FUStGSNotifyParam                      NotifyParam;                                       // 0x0000(0x0040)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
	float                                         TotalDuration;                                     // 0x0040(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
//static_assert(alignof(BANS_GSMatchingTransform_GSNotifyBeginCS) == 0x000008, "Wrong alignment on BANS_GSMatchingTransform_GSNotifyBeginCS");
//static_assert(sizeof(BANS_GSMatchingTransform_GSNotifyBeginCS) == 0x000048, "Wrong size on BANS_GSMatchingTransform_GSNotifyBeginCS");
//static_assert(offsetof(BANS_GSMatchingTransform_GSNotifyBeginCS, NotifyParam) == 0x000000, "Member 'BANS_GSMatchingTransform_GSNotifyBeginCS::NotifyParam' has a wrong offset!");
//static_assert(offsetof(BANS_GSMatchingTransform_GSNotifyBeginCS, TotalDuration) == 0x000040, "Member 'BANS_GSMatchingTransform_GSNotifyBeginCS::TotalDuration' has a wrong offset!");

// Function b1-Managed.BANS_GSMatchingTransform.GSNotifyEndCS
// 0x0040 (0x0040 - 0x0000)
struct BANS_GSMatchingTransform_GSNotifyEndCS final
{
public:
	struct FUStGSNotifyParam                      NotifyParam;                                       // 0x0000(0x0040)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
//static_assert(alignof(BANS_GSMatchingTransform_GSNotifyEndCS) == 0x000008, "Wrong alignment on BANS_GSMatchingTransform_GSNotifyEndCS");
//static_assert(sizeof(BANS_GSMatchingTransform_GSNotifyEndCS) == 0x000040, "Wrong size on BANS_GSMatchingTransform_GSNotifyEndCS");
//static_assert(offsetof(BANS_GSMatchingTransform_GSNotifyEndCS, NotifyParam) == 0x000000, "Member 'BANS_GSMatchingTransform_GSNotifyEndCS::NotifyParam' has a wrong offset!");

// Function b1-Managed.BANS_GSMagicWindow.GSNotifyBeginCS
// 0x0048 (0x0048 - 0x0000)
struct BANS_GSMagicWindow_GSNotifyBeginCS final
{
public:
	struct FUStGSNotifyParam                      NotifyParam;                                       // 0x0000(0x0040)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
	float                                         TotalDuration;                                     // 0x0040(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
//static_assert(alignof(BANS_GSMagicWindow_GSNotifyBeginCS) == 0x000008, "Wrong alignment on BANS_GSMagicWindow_GSNotifyBeginCS");
//static_assert(sizeof(BANS_GSMagicWindow_GSNotifyBeginCS) == 0x000048, "Wrong size on BANS_GSMagicWindow_GSNotifyBeginCS");
//static_assert(offsetof(BANS_GSMagicWindow_GSNotifyBeginCS, NotifyParam) == 0x000000, "Member 'BANS_GSMagicWindow_GSNotifyBeginCS::NotifyParam' has a wrong offset!");
//static_assert(offsetof(BANS_GSMagicWindow_GSNotifyBeginCS, TotalDuration) == 0x000040, "Member 'BANS_GSMagicWindow_GSNotifyBeginCS::TotalDuration' has a wrong offset!");

// Function b1-Managed.BGUShadowActorBase.OnConstructionCS
// 0x0060 (0x0060 - 0x0000)
struct BGUShadowActorBase_OnConstructionCS final
{
public:
	struct FTransform                             Transform;                                         // 0x0000(0x0060)(ConstParm, Parm, OutParm, ReferenceParm, IsPlainOldData, NoDestructor)
};
//static_assert(alignof(BGUShadowActorBase_OnConstructionCS) == 0x000010, "Wrong alignment on BGUShadowActorBase_OnConstructionCS");
//static_assert(sizeof(BGUShadowActorBase_OnConstructionCS) == 0x000060, "Wrong size on BGUShadowActorBase_OnConstructionCS");
//static_assert(offsetof(BGUShadowActorBase_OnConstructionCS, Transform) == 0x000000, "Member 'BGUShadowActorBase_OnConstructionCS::Transform' has a wrong offset!");

// Function b1-Managed.BANS_GSAttackRangeOffset.GSNotifyBeginCS
// 0x0048 (0x0048 - 0x0000)
struct BANS_GSAttackRangeOffset_GSNotifyBeginCS final
{
public:
	struct FUStGSNotifyParam                      NotifyParam;                                       // 0x0000(0x0040)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
	float                                         TotalDuration;                                     // 0x0040(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
//static_assert(alignof(BANS_GSAttackRangeOffset_GSNotifyBeginCS) == 0x000008, "Wrong alignment on BANS_GSAttackRangeOffset_GSNotifyBeginCS");
//static_assert(sizeof(BANS_GSAttackRangeOffset_GSNotifyBeginCS) == 0x000048, "Wrong size on BANS_GSAttackRangeOffset_GSNotifyBeginCS");
//static_assert(offsetof(BANS_GSAttackRangeOffset_GSNotifyBeginCS, NotifyParam) == 0x000000, "Member 'BANS_GSAttackRangeOffset_GSNotifyBeginCS::NotifyParam' has a wrong offset!");
//static_assert(offsetof(BANS_GSAttackRangeOffset_GSNotifyBeginCS, TotalDuration) == 0x000040, "Member 'BANS_GSAttackRangeOffset_GSNotifyBeginCS::TotalDuration' has a wrong offset!");

// Function b1-Managed.BANS_GSAttackRangeOffset.GSNotifyTickCS
// 0x0048 (0x0048 - 0x0000)
struct BANS_GSAttackRangeOffset_GSNotifyTickCS final
{
public:
	struct FUStGSNotifyParam                      NotifyParam;                                       // 0x0000(0x0040)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
	float                                         FrameDeltaTime;                                    // 0x0040(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
//static_assert(alignof(BANS_GSAttackRangeOffset_GSNotifyTickCS) == 0x000008, "Wrong alignment on BANS_GSAttackRangeOffset_GSNotifyTickCS");
//static_assert(sizeof(BANS_GSAttackRangeOffset_GSNotifyTickCS) == 0x000048, "Wrong size on BANS_GSAttackRangeOffset_GSNotifyTickCS");
//static_assert(offsetof(BANS_GSAttackRangeOffset_GSNotifyTickCS, NotifyParam) == 0x000000, "Member 'BANS_GSAttackRangeOffset_GSNotifyTickCS::NotifyParam' has a wrong offset!");
//static_assert(offsetof(BANS_GSAttackRangeOffset_GSNotifyTickCS, FrameDeltaTime) == 0x000040, "Member 'BANS_GSAttackRangeOffset_GSNotifyTickCS::FrameDeltaTime' has a wrong offset!");

// Function b1-Managed.BANS_GSAttackRangeOffset.GSNotifyEndCS
// 0x0040 (0x0040 - 0x0000)
struct BANS_GSAttackRangeOffset_GSNotifyEndCS final
{
public:
	struct FUStGSNotifyParam                      NotifyParam;                                       // 0x0000(0x0040)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
//static_assert(alignof(BANS_GSAttackRangeOffset_GSNotifyEndCS) == 0x000008, "Wrong alignment on BANS_GSAttackRangeOffset_GSNotifyEndCS");
//static_assert(sizeof(BANS_GSAttackRangeOffset_GSNotifyEndCS) == 0x000040, "Wrong size on BANS_GSAttackRangeOffset_GSNotifyEndCS");
//static_assert(offsetof(BANS_GSAttackRangeOffset_GSNotifyEndCS, NotifyParam) == 0x000000, "Member 'BANS_GSAttackRangeOffset_GSNotifyEndCS::NotifyParam' has a wrong offset!");

// Function b1-Managed.BGUDroppableDestructionActorBase.SetFloatValueToMaterialAdvect
// 0x000C (0x000C - 0x0000)
struct BGUDroppableDestructionActorBase_SetFloatValueToMaterialAdvect final
{
public:
	class FName                                   ParamName;                                         // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         FloatValue;                                        // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
//static_assert(alignof(BGUDroppableDestructionActorBase_SetFloatValueToMaterialAdvect) == 0x000004, "Wrong alignment on BGUDroppableDestructionActorBase_SetFloatValueToMaterialAdvect");
//static_assert(sizeof(BGUDroppableDestructionActorBase_SetFloatValueToMaterialAdvect) == 0x00000C, "Wrong size on BGUDroppableDestructionActorBase_SetFloatValueToMaterialAdvect");
//static_assert(offsetof(BGUDroppableDestructionActorBase_SetFloatValueToMaterialAdvect, ParamName) == 0x000000, "Member 'BGUDroppableDestructionActorBase_SetFloatValueToMaterialAdvect::ParamName' has a wrong offset!");
//static_assert(offsetof(BGUDroppableDestructionActorBase_SetFloatValueToMaterialAdvect, FloatValue) == 0x000008, "Member 'BGUDroppableDestructionActorBase_SetFloatValueToMaterialAdvect::FloatValue' has a wrong offset!");

// Function b1-Managed.BANS_GSSetCollisionEnabledByTag.GSNotifyBeginCS
// 0x0048 (0x0048 - 0x0000)
struct BANS_GSSetCollisionEnabledByTag_GSNotifyBeginCS final
{
public:
	struct FUStGSNotifyParam                      NotifyParam;                                       // 0x0000(0x0040)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
	float                                         TotalDuration;                                     // 0x0040(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
//static_assert(alignof(BANS_GSSetCollisionEnabledByTag_GSNotifyBeginCS) == 0x000008, "Wrong alignment on BANS_GSSetCollisionEnabledByTag_GSNotifyBeginCS");
//static_assert(sizeof(BANS_GSSetCollisionEnabledByTag_GSNotifyBeginCS) == 0x000048, "Wrong size on BANS_GSSetCollisionEnabledByTag_GSNotifyBeginCS");
//static_assert(offsetof(BANS_GSSetCollisionEnabledByTag_GSNotifyBeginCS, NotifyParam) == 0x000000, "Member 'BANS_GSSetCollisionEnabledByTag_GSNotifyBeginCS::NotifyParam' has a wrong offset!");
//static_assert(offsetof(BANS_GSSetCollisionEnabledByTag_GSNotifyBeginCS, TotalDuration) == 0x000040, "Member 'BANS_GSSetCollisionEnabledByTag_GSNotifyBeginCS::TotalDuration' has a wrong offset!");

// Function b1-Managed.BANS_GSSetCollisionEnabledByTag.GSNotifyEndCS
// 0x0040 (0x0040 - 0x0000)
struct BANS_GSSetCollisionEnabledByTag_GSNotifyEndCS final
{
public:
	struct FUStGSNotifyParam                      NotifyParam;                                       // 0x0000(0x0040)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
//static_assert(alignof(BANS_GSSetCollisionEnabledByTag_GSNotifyEndCS) == 0x000008, "Wrong alignment on BANS_GSSetCollisionEnabledByTag_GSNotifyEndCS");
//static_assert(sizeof(BANS_GSSetCollisionEnabledByTag_GSNotifyEndCS) == 0x000040, "Wrong size on BANS_GSSetCollisionEnabledByTag_GSNotifyEndCS");
//static_assert(offsetof(BANS_GSSetCollisionEnabledByTag_GSNotifyEndCS, NotifyParam) == 0x000000, "Member 'BANS_GSSetCollisionEnabledByTag_GSNotifyEndCS::NotifyParam' has a wrong offset!");

// Function b1-Managed.BANS_FloatingHitState.GSNotifyBeginCS
// 0x0048 (0x0048 - 0x0000)
struct BANS_FloatingHitState_GSNotifyBeginCS final
{
public:
	struct FUStGSNotifyParam                      NotifyParam;                                       // 0x0000(0x0040)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
	float                                         TotalDuration;                                     // 0x0040(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
//static_assert(alignof(BANS_FloatingHitState_GSNotifyBeginCS) == 0x000008, "Wrong alignment on BANS_FloatingHitState_GSNotifyBeginCS");
//static_assert(sizeof(BANS_FloatingHitState_GSNotifyBeginCS) == 0x000048, "Wrong size on BANS_FloatingHitState_GSNotifyBeginCS");
//static_assert(offsetof(BANS_FloatingHitState_GSNotifyBeginCS, NotifyParam) == 0x000000, "Member 'BANS_FloatingHitState_GSNotifyBeginCS::NotifyParam' has a wrong offset!");
//static_assert(offsetof(BANS_FloatingHitState_GSNotifyBeginCS, TotalDuration) == 0x000040, "Member 'BANS_FloatingHitState_GSNotifyBeginCS::TotalDuration' has a wrong offset!");

// Function b1-Managed.BUS_SafeLandVolumeComp.OnActorLeave
// 0x0020 (0x0020 - 0x0000)
struct BUS_SafeLandVolumeComp_OnActorLeave final
{
public:
	class UPrimitiveComponent*                    OverlappedComponent;                               // 0x0000(0x0008)(ExportObject, Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class AActor*                                 OtherActor;                                        // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UPrimitiveComponent*                    OtherComp;                                         // 0x0010(0x0008)(ExportObject, Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         OtherBodyIndex;                                    // 0x0018(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
//static_assert(alignof(BUS_SafeLandVolumeComp_OnActorLeave) == 0x000008, "Wrong alignment on BUS_SafeLandVolumeComp_OnActorLeave");
//static_assert(sizeof(BUS_SafeLandVolumeComp_OnActorLeave) == 0x000020, "Wrong size on BUS_SafeLandVolumeComp_OnActorLeave");
//static_assert(offsetof(BUS_SafeLandVolumeComp_OnActorLeave, OverlappedComponent) == 0x000000, "Member 'BUS_SafeLandVolumeComp_OnActorLeave::OverlappedComponent' has a wrong offset!");
//static_assert(offsetof(BUS_SafeLandVolumeComp_OnActorLeave, OtherActor) == 0x000008, "Member 'BUS_SafeLandVolumeComp_OnActorLeave::OtherActor' has a wrong offset!");
//static_assert(offsetof(BUS_SafeLandVolumeComp_OnActorLeave, OtherComp) == 0x000010, "Member 'BUS_SafeLandVolumeComp_OnActorLeave::OtherComp' has a wrong offset!");
//static_assert(offsetof(BUS_SafeLandVolumeComp_OnActorLeave, OtherBodyIndex) == 0x000018, "Member 'BUS_SafeLandVolumeComp_OnActorLeave::OtherBodyIndex' has a wrong offset!");

// Function b1-Managed.BUS_SafeLandVolumeComp.OnActorEnter
// 0x0010 (0x0010 - 0x0000)
struct BUS_SafeLandVolumeComp_OnActorEnter final
{
public:
	class AActor*                                 OverlappedActor;                                   // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class AActor*                                 OtherActor;                                        // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
//static_assert(alignof(BUS_SafeLandVolumeComp_OnActorEnter) == 0x000008, "Wrong alignment on BUS_SafeLandVolumeComp_OnActorEnter");
//static_assert(sizeof(BUS_SafeLandVolumeComp_OnActorEnter) == 0x000010, "Wrong size on BUS_SafeLandVolumeComp_OnActorEnter");
//static_assert(offsetof(BUS_SafeLandVolumeComp_OnActorEnter, OverlappedActor) == 0x000000, "Member 'BUS_SafeLandVolumeComp_OnActorEnter::OverlappedActor' has a wrong offset!");
//static_assert(offsetof(BUS_SafeLandVolumeComp_OnActorEnter, OtherActor) == 0x000008, "Member 'BUS_SafeLandVolumeComp_OnActorEnter::OtherActor' has a wrong offset!");

// Function b1-Managed.BANS_GSAttachEquipCompToSocket.GSNotifyBeginCS
// 0x0048 (0x0048 - 0x0000)
struct BANS_GSAttachEquipCompToSocket_GSNotifyBeginCS final
{
public:
	struct FUStGSNotifyParam                      NotifyParam;                                       // 0x0000(0x0040)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
	float                                         TotalDuration;                                     // 0x0040(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
//static_assert(alignof(BANS_GSAttachEquipCompToSocket_GSNotifyBeginCS) == 0x000008, "Wrong alignment on BANS_GSAttachEquipCompToSocket_GSNotifyBeginCS");
//static_assert(sizeof(BANS_GSAttachEquipCompToSocket_GSNotifyBeginCS) == 0x000048, "Wrong size on BANS_GSAttachEquipCompToSocket_GSNotifyBeginCS");
//static_assert(offsetof(BANS_GSAttachEquipCompToSocket_GSNotifyBeginCS, NotifyParam) == 0x000000, "Member 'BANS_GSAttachEquipCompToSocket_GSNotifyBeginCS::NotifyParam' has a wrong offset!");
//static_assert(offsetof(BANS_GSAttachEquipCompToSocket_GSNotifyBeginCS, TotalDuration) == 0x000040, "Member 'BANS_GSAttachEquipCompToSocket_GSNotifyBeginCS::TotalDuration' has a wrong offset!");

// Function b1-Managed.BANS_GSAttachEquipCompToSocket.GSNotifyEndCS
// 0x0040 (0x0040 - 0x0000)
struct BANS_GSAttachEquipCompToSocket_GSNotifyEndCS final
{
public:
	struct FUStGSNotifyParam                      NotifyParam;                                       // 0x0000(0x0040)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
//static_assert(alignof(BANS_GSAttachEquipCompToSocket_GSNotifyEndCS) == 0x000008, "Wrong alignment on BANS_GSAttachEquipCompToSocket_GSNotifyEndCS");
//static_assert(sizeof(BANS_GSAttachEquipCompToSocket_GSNotifyEndCS) == 0x000040, "Wrong size on BANS_GSAttachEquipCompToSocket_GSNotifyEndCS");
//static_assert(offsetof(BANS_GSAttachEquipCompToSocket_GSNotifyEndCS, NotifyParam) == 0x000000, "Member 'BANS_GSAttachEquipCompToSocket_GSNotifyEndCS::NotifyParam' has a wrong offset!");

// Function b1-Managed.BGUSpiderNavigationActor.ReceiveTick
// 0x0004 (0x0004 - 0x0000)
struct BGUSpiderNavigationActor_ReceiveTick final
{
public:
	float                                         DeltaSeconds;                                      // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
//static_assert(alignof(BGUSpiderNavigationActor_ReceiveTick) == 0x000004, "Wrong alignment on BGUSpiderNavigationActor_ReceiveTick");
//static_assert(sizeof(BGUSpiderNavigationActor_ReceiveTick) == 0x000004, "Wrong size on BGUSpiderNavigationActor_ReceiveTick");
//static_assert(offsetof(BGUSpiderNavigationActor_ReceiveTick, DeltaSeconds) == 0x000000, "Member 'BGUSpiderNavigationActor_ReceiveTick::DeltaSeconds' has a wrong offset!");

// Function b1-Managed.BUTamerActor.GetHighLODMeshConfig
// 0x00E0 (0x00E0 - 0x0000)
struct BUTamerActor_GetHighLODMeshConfig final
{
public:
	struct FTamerHighLODRootMeshConfig            OutMeshConfig;                                     // 0x0000(0x00D0)(Parm, OutParm)
	uint8                                         ReturnValue : 1;                                   // 0x00D0(0x0001)(BitIndex: 0x00, PropSize: 0x0001 (Parm, OutParm, ReturnParm, NoDestructor, HasGetValueTypeHash))
};
//static_assert(alignof(BUTamerActor_GetHighLODMeshConfig) == 0x000010, "Wrong alignment on BUTamerActor_GetHighLODMeshConfig");
//static_assert(sizeof(BUTamerActor_GetHighLODMeshConfig) == 0x0000E0, "Wrong size on BUTamerActor_GetHighLODMeshConfig");
//static_assert(offsetof(BUTamerActor_GetHighLODMeshConfig, OutMeshConfig) == 0x000000, "Member 'BUTamerActor_GetHighLODMeshConfig::OutMeshConfig' has a wrong offset!");

// Function b1-Managed.BUTamerActor.OnConstructionCS
// 0x0060 (0x0060 - 0x0000)
struct BUTamerActor_OnConstructionCS final
{
public:
	struct FTransform                             Transform;                                         // 0x0000(0x0060)(ConstParm, Parm, OutParm, ReferenceParm, IsPlainOldData, NoDestructor)
};
//static_assert(alignof(BUTamerActor_OnConstructionCS) == 0x000010, "Wrong alignment on BUTamerActor_OnConstructionCS");
//static_assert(sizeof(BUTamerActor_OnConstructionCS) == 0x000060, "Wrong size on BUTamerActor_OnConstructionCS");
//static_assert(offsetof(BUTamerActor_OnConstructionCS, Transform) == 0x000000, "Member 'BUTamerActor_OnConstructionCS::Transform' has a wrong offset!");

// Function b1-Managed.BUTamerActor.ReceiveEndPlay
// 0x0001 (0x0001 - 0x0000)
struct BUTamerActor_ReceiveEndPlay final
{
public:
	EEndPlayReason                                EndPlayReason;                                     // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
//static_assert(alignof(BUTamerActor_ReceiveEndPlay) == 0x000001, "Wrong alignment on BUTamerActor_ReceiveEndPlay");
//static_assert(sizeof(BUTamerActor_ReceiveEndPlay) == 0x000001, "Wrong size on BUTamerActor_ReceiveEndPlay");
//static_assert(offsetof(BUTamerActor_ReceiveEndPlay, EndPlayReason) == 0x000000, "Member 'BUTamerActor_ReceiveEndPlay::EndPlayReason' has a wrong offset!");

// Function b1-Managed.BUTamerActor.CopyPropertiesFromTamerActor
// 0x0008 (0x0008 - 0x0000)
struct BUTamerActor_CopyPropertiesFromTamerActor final
{
public:
	class ABUTamerActor*                          TamerActor;                                        // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
//static_assert(alignof(BUTamerActor_CopyPropertiesFromTamerActor) == 0x000008, "Wrong alignment on BUTamerActor_CopyPropertiesFromTamerActor");
//static_assert(sizeof(BUTamerActor_CopyPropertiesFromTamerActor) == 0x000008, "Wrong size on BUTamerActor_CopyPropertiesFromTamerActor");
//static_assert(offsetof(BUTamerActor_CopyPropertiesFromTamerActor, TamerActor) == 0x000000, "Member 'BUTamerActor_CopyPropertiesFromTamerActor::TamerActor' has a wrong offset!");

// Function b1-Managed.BUTamerActor.CopyPropertiesFromUnitActor
// 0x0008 (0x0008 - 0x0000)
struct BUTamerActor_CopyPropertiesFromUnitActor final
{
public:
	class ABGUCharacterCS*                        Unit;                                              // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
//static_assert(alignof(BUTamerActor_CopyPropertiesFromUnitActor) == 0x000008, "Wrong alignment on BUTamerActor_CopyPropertiesFromUnitActor");
//static_assert(sizeof(BUTamerActor_CopyPropertiesFromUnitActor) == 0x000008, "Wrong size on BUTamerActor_CopyPropertiesFromUnitActor");
//static_assert(offsetof(BUTamerActor_CopyPropertiesFromUnitActor, Unit) == 0x000000, "Member 'BUTamerActor_CopyPropertiesFromUnitActor::Unit' has a wrong offset!");

// Function b1-Managed.BUTamerActor.GetMonster
// 0x0008 (0x0008 - 0x0000)
struct BUTamerActor_GetMonster final
{
public:
	class ABGUCharacterCS*                        ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
//static_assert(alignof(BUTamerActor_GetMonster) == 0x000008, "Wrong alignment on BUTamerActor_GetMonster");
//static_assert(sizeof(BUTamerActor_GetMonster) == 0x000008, "Wrong size on BUTamerActor_GetMonster");
//static_assert(offsetof(BUTamerActor_GetMonster, ReturnValue) == 0x000000, "Member 'BUTamerActor_GetMonster::ReturnValue' has a wrong offset!");

// Function b1-Managed.BUTamerActor.GetActorGuidCS
// 0x0018 (0x0018 - 0x0000)
struct BUTamerActor_GetActorGuidCS final
{
public:
	class FString                                 OutActorGuid;                                      // 0x0000(0x0010)(Parm, OutParm, ZeroConstructor, HasGetValueTypeHash)
	uint8                                         ReturnValue : 1;                                   // 0x0010(0x0001)(BitIndex: 0x00, PropSize: 0x0001 (Parm, OutParm, ReturnParm, NoDestructor, HasGetValueTypeHash))
};
//static_assert(alignof(BUTamerActor_GetActorGuidCS) == 0x000008, "Wrong alignment on BUTamerActor_GetActorGuidCS");
//static_assert(sizeof(BUTamerActor_GetActorGuidCS) == 0x000018, "Wrong size on BUTamerActor_GetActorGuidCS");
//static_assert(offsetof(BUTamerActor_GetActorGuidCS, OutActorGuid) == 0x000000, "Member 'BUTamerActor_GetActorGuidCS::OutActorGuid' has a wrong offset!");

// Function b1-Managed.BUAnim_PostProcess_Quadruped.BlueprintUpdateAnimation
// 0x0004 (0x0004 - 0x0000)
struct BUAnim_PostProcess_Quadruped_BlueprintUpdateAnimation final
{
public:
	float                                         DeltaTimeX;                                        // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
//static_assert(alignof(BUAnim_PostProcess_Quadruped_BlueprintUpdateAnimation) == 0x000004, "Wrong alignment on BUAnim_PostProcess_Quadruped_BlueprintUpdateAnimation");
//static_assert(sizeof(BUAnim_PostProcess_Quadruped_BlueprintUpdateAnimation) == 0x000004, "Wrong size on BUAnim_PostProcess_Quadruped_BlueprintUpdateAnimation");
//static_assert(offsetof(BUAnim_PostProcess_Quadruped_BlueprintUpdateAnimation, DeltaTimeX) == 0x000000, "Member 'BUAnim_PostProcess_Quadruped_BlueprintUpdateAnimation::DeltaTimeX' has a wrong offset!");

// Function b1-Managed.BANSM_AttackRotation.CheckState
// 0x0010 (0x0010 - 0x0000)
struct BANSM_AttackRotation_CheckState final
{
public:
	class UAnimSequenceBase*                      AnimBase;                                          // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CurTime;                                           // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         ReturnValue : 1;                                   // 0x000C(0x0001)(BitIndex: 0x00, PropSize: 0x0001 (Parm, OutParm, ReturnParm, NoDestructor, HasGetValueTypeHash))
};
//static_assert(alignof(BANSM_AttackRotation_CheckState) == 0x000008, "Wrong alignment on BANSM_AttackRotation_CheckState");
//static_assert(sizeof(BANSM_AttackRotation_CheckState) == 0x000010, "Wrong size on BANSM_AttackRotation_CheckState");
//static_assert(offsetof(BANSM_AttackRotation_CheckState, AnimBase) == 0x000000, "Member 'BANSM_AttackRotation_CheckState::AnimBase' has a wrong offset!");
//static_assert(offsetof(BANSM_AttackRotation_CheckState, CurTime) == 0x000008, "Member 'BANSM_AttackRotation_CheckState::CurTime' has a wrong offset!");

// Function b1-Managed.OverlapCompFunctionBinder.OnActorLeave
// 0x0010 (0x0010 - 0x0000)
struct OverlapCompFunctionBinder_OnActorLeave final
{
public:
	class AActor*                                 OverlappedActor;                                   // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class AActor*                                 OtherActor;                                        // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
//static_assert(alignof(OverlapCompFunctionBinder_OnActorLeave) == 0x000008, "Wrong alignment on OverlapCompFunctionBinder_OnActorLeave");
//static_assert(sizeof(OverlapCompFunctionBinder_OnActorLeave) == 0x000010, "Wrong size on OverlapCompFunctionBinder_OnActorLeave");
//static_assert(offsetof(OverlapCompFunctionBinder_OnActorLeave, OverlappedActor) == 0x000000, "Member 'OverlapCompFunctionBinder_OnActorLeave::OverlappedActor' has a wrong offset!");
//static_assert(offsetof(OverlapCompFunctionBinder_OnActorLeave, OtherActor) == 0x000008, "Member 'OverlapCompFunctionBinder_OnActorLeave::OtherActor' has a wrong offset!");

// Function b1-Managed.OverlapCompFunctionBinder.OnActorEnter
// 0x0010 (0x0010 - 0x0000)
struct OverlapCompFunctionBinder_OnActorEnter final
{
public:
	class AActor*                                 OverlappedActor;                                   // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class AActor*                                 OtherActor;                                        // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
//static_assert(alignof(OverlapCompFunctionBinder_OnActorEnter) == 0x000008, "Wrong alignment on OverlapCompFunctionBinder_OnActorEnter");
//static_assert(sizeof(OverlapCompFunctionBinder_OnActorEnter) == 0x000010, "Wrong size on OverlapCompFunctionBinder_OnActorEnter");
//static_assert(offsetof(OverlapCompFunctionBinder_OnActorEnter, OverlappedActor) == 0x000000, "Member 'OverlapCompFunctionBinder_OnActorEnter::OverlappedActor' has a wrong offset!");
//static_assert(offsetof(OverlapCompFunctionBinder_OnActorEnter, OtherActor) == 0x000008, "Member 'OverlapCompFunctionBinder_OnActorEnter::OtherActor' has a wrong offset!");

// Function b1-Managed.BGP_PlayerStateCS.ReceiveEndPlay
// 0x0001 (0x0001 - 0x0000)
struct BGP_PlayerStateCS_ReceiveEndPlay final
{
public:
	EEndPlayReason                                EndPlayReason;                                     // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
//static_assert(alignof(BGP_PlayerStateCS_ReceiveEndPlay) == 0x000001, "Wrong alignment on BGP_PlayerStateCS_ReceiveEndPlay");
//static_assert(sizeof(BGP_PlayerStateCS_ReceiveEndPlay) == 0x000001, "Wrong size on BGP_PlayerStateCS_ReceiveEndPlay");
//static_assert(offsetof(BGP_PlayerStateCS_ReceiveEndPlay, EndPlayReason) == 0x000000, "Member 'BGP_PlayerStateCS_ReceiveEndPlay::EndPlayReason' has a wrong offset!");

// Function b1-Managed.BGW_CameraAdapterMgr.OnViewPortResized
// 0x0008 (0x0008 - 0x0000)
struct BGW_CameraAdapterMgr_OnViewPortResized final
{
public:
	int32                                         NewWidth;                                          // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         NewHeight;                                         // 0x0004(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
//static_assert(alignof(BGW_CameraAdapterMgr_OnViewPortResized) == 0x000004, "Wrong alignment on BGW_CameraAdapterMgr_OnViewPortResized");
//static_assert(sizeof(BGW_CameraAdapterMgr_OnViewPortResized) == 0x000008, "Wrong size on BGW_CameraAdapterMgr_OnViewPortResized");
//static_assert(offsetof(BGW_CameraAdapterMgr_OnViewPortResized, NewWidth) == 0x000000, "Member 'BGW_CameraAdapterMgr_OnViewPortResized::NewWidth' has a wrong offset!");
//static_assert(offsetof(BGW_CameraAdapterMgr_OnViewPortResized, NewHeight) == 0x000004, "Member 'BGW_CameraAdapterMgr_OnViewPortResized::NewHeight' has a wrong offset!");

// Function b1-Managed.BUS_MovementSystem.AIFlyPathMoveMode_Pathfinding_OnDynamicCollisionAlert
// 0x0048 (0x0048 - 0x0000)
struct BUS_MovementSystem_AIFlyPathMoveMode_Pathfinding_OnDynamicCollisionAlert final
{
public:
	struct FDonNavigationDynamicCollisionPayload  Data;                                              // 0x0000(0x0048)(Parm)
};
//static_assert(alignof(BUS_MovementSystem_AIFlyPathMoveMode_Pathfinding_OnDynamicCollisionAlert) == 0x000008, "Wrong alignment on BUS_MovementSystem_AIFlyPathMoveMode_Pathfinding_OnDynamicCollisionAlert");
//static_assert(sizeof(BUS_MovementSystem_AIFlyPathMoveMode_Pathfinding_OnDynamicCollisionAlert) == 0x000048, "Wrong size on BUS_MovementSystem_AIFlyPathMoveMode_Pathfinding_OnDynamicCollisionAlert");
//static_assert(offsetof(BUS_MovementSystem_AIFlyPathMoveMode_Pathfinding_OnDynamicCollisionAlert, Data) == 0x000000, "Member 'BUS_MovementSystem_AIFlyPathMoveMode_Pathfinding_OnDynamicCollisionAlert::Data' has a wrong offset!");

// Function b1-Managed.BUS_MovementSystem.AIFlyPathMoveMode_Pathfinding_OnFinish
// 0x02B8 (0x02B8 - 0x0000)
struct BUS_MovementSystem_AIFlyPathMoveMode_Pathfinding_OnFinish final
{
public:
	struct FDoNNavigationQueryData                Data;                                              // 0x0000(0x02B8)(Parm)
};
//static_assert(alignof(BUS_MovementSystem_AIFlyPathMoveMode_Pathfinding_OnFinish) == 0x000008, "Wrong alignment on BUS_MovementSystem_AIFlyPathMoveMode_Pathfinding_OnFinish");
//static_assert(sizeof(BUS_MovementSystem_AIFlyPathMoveMode_Pathfinding_OnFinish) == 0x0002B8, "Wrong size on BUS_MovementSystem_AIFlyPathMoveMode_Pathfinding_OnFinish");
//static_assert(offsetof(BUS_MovementSystem_AIFlyPathMoveMode_Pathfinding_OnFinish, Data) == 0x000000, "Member 'BUS_MovementSystem_AIFlyPathMoveMode_Pathfinding_OnFinish::Data' has a wrong offset!");

// Function b1-Managed.BUS_MovementSystem.OnAIPathMoveModeMoveComplete
// 0x0008 (0x0008 - 0x0000)
struct BUS_MovementSystem_OnAIPathMoveModeMoveComplete final
{
public:
	int32                                         MoveRequestID;                                     // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	EPathFollowingResult                          Result;                                            // 0x0004(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
//static_assert(alignof(BUS_MovementSystem_OnAIPathMoveModeMoveComplete) == 0x000004, "Wrong alignment on BUS_MovementSystem_OnAIPathMoveModeMoveComplete");
//static_assert(sizeof(BUS_MovementSystem_OnAIPathMoveModeMoveComplete) == 0x000008, "Wrong size on BUS_MovementSystem_OnAIPathMoveModeMoveComplete");
//static_assert(offsetof(BUS_MovementSystem_OnAIPathMoveModeMoveComplete, MoveRequestID) == 0x000000, "Member 'BUS_MovementSystem_OnAIPathMoveModeMoveComplete::MoveRequestID' has a wrong offset!");
//static_assert(offsetof(BUS_MovementSystem_OnAIPathMoveModeMoveComplete, Result) == 0x000004, "Member 'BUS_MovementSystem_OnAIPathMoveModeMoveComplete::Result' has a wrong offset!");

// Function b1-Managed.B1_StartupGameMode.ReceiveEndPlay
// 0x0001 (0x0001 - 0x0000)
struct B1_StartupGameMode_ReceiveEndPlay final
{
public:
	EEndPlayReason                                EndPlayReason;                                     // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
//static_assert(alignof(B1_StartupGameMode_ReceiveEndPlay) == 0x000001, "Wrong alignment on B1_StartupGameMode_ReceiveEndPlay");
//static_assert(sizeof(B1_StartupGameMode_ReceiveEndPlay) == 0x000001, "Wrong size on B1_StartupGameMode_ReceiveEndPlay");
//static_assert(offsetof(B1_StartupGameMode_ReceiveEndPlay, EndPlayReason) == 0x000000, "Member 'B1_StartupGameMode_ReceiveEndPlay::EndPlayReason' has a wrong offset!");

// Function b1-Managed.BUAnimHumanoidCS_MotionMatching.SetupDefaultMMPoseData
// 0x0020 (0x0020 - 0x0000)
struct BUAnimHumanoidCS_MotionMatching_SetupDefaultMMPoseData final
{
public:
	struct FAnimUpdateContext                     Context;                                           // 0x0000(0x0010)(Parm, OutParm, ReferenceParm)
	struct FAnimNodeReference                     Node;                                              // 0x0010(0x0010)(Parm, OutParm, ReferenceParm, NoDestructor)
};
//static_assert(alignof(BUAnimHumanoidCS_MotionMatching_SetupDefaultMMPoseData) == 0x000008, "Wrong alignment on BUAnimHumanoidCS_MotionMatching_SetupDefaultMMPoseData");
//static_assert(sizeof(BUAnimHumanoidCS_MotionMatching_SetupDefaultMMPoseData) == 0x000020, "Wrong size on BUAnimHumanoidCS_MotionMatching_SetupDefaultMMPoseData");
//static_assert(offsetof(BUAnimHumanoidCS_MotionMatching_SetupDefaultMMPoseData, Context) == 0x000000, "Member 'BUAnimHumanoidCS_MotionMatching_SetupDefaultMMPoseData::Context' has a wrong offset!");
//static_assert(offsetof(BUAnimHumanoidCS_MotionMatching_SetupDefaultMMPoseData, Node) == 0x000010, "Member 'BUAnimHumanoidCS_MotionMatching_SetupDefaultMMPoseData::Node' has a wrong offset!");

// Function b1-Managed.BGUBaseOnUnitRotateComponent.TickComponentGS
// 0x0004 (0x0004 - 0x0000)
struct BGUBaseOnUnitRotateComponent_TickComponentGS final
{
public:
	float                                         DeltaSeconds;                                      // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
//static_assert(alignof(BGUBaseOnUnitRotateComponent_TickComponentGS) == 0x000004, "Wrong alignment on BGUBaseOnUnitRotateComponent_TickComponentGS");
//static_assert(sizeof(BGUBaseOnUnitRotateComponent_TickComponentGS) == 0x000004, "Wrong size on BGUBaseOnUnitRotateComponent_TickComponentGS");
//static_assert(offsetof(BGUBaseOnUnitRotateComponent_TickComponentGS, DeltaSeconds) == 0x000000, "Member 'BGUBaseOnUnitRotateComponent_TickComponentGS::DeltaSeconds' has a wrong offset!");

// Function b1-Managed.BGUBaseOnUnitRotateComponent.BGUSetBaseOnUnitRotation
// 0x0038 (0x0038 - 0x0000)
struct BGUBaseOnUnitRotateComponent_BGUSetBaseOnUnitRotation final
{
public:
	class AActor*                                 BaseUnit;                                          // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FRotator                               TargteRotation;                                    // 0x0008(0x0018)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
	struct FVector                                OffsetVector;                                      // 0x0020(0x0018)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
//static_assert(alignof(BGUBaseOnUnitRotateComponent_BGUSetBaseOnUnitRotation) == 0x000008, "Wrong alignment on BGUBaseOnUnitRotateComponent_BGUSetBaseOnUnitRotation");
//static_assert(sizeof(BGUBaseOnUnitRotateComponent_BGUSetBaseOnUnitRotation) == 0x000038, "Wrong size on BGUBaseOnUnitRotateComponent_BGUSetBaseOnUnitRotation");
//static_assert(offsetof(BGUBaseOnUnitRotateComponent_BGUSetBaseOnUnitRotation, BaseUnit) == 0x000000, "Member 'BGUBaseOnUnitRotateComponent_BGUSetBaseOnUnitRotation::BaseUnit' has a wrong offset!");
//static_assert(offsetof(BGUBaseOnUnitRotateComponent_BGUSetBaseOnUnitRotation, TargteRotation) == 0x000008, "Member 'BGUBaseOnUnitRotateComponent_BGUSetBaseOnUnitRotation::TargteRotation' has a wrong offset!");
//static_assert(offsetof(BGUBaseOnUnitRotateComponent_BGUSetBaseOnUnitRotation, OffsetVector) == 0x000020, "Member 'BGUBaseOnUnitRotateComponent_BGUSetBaseOnUnitRotation::OffsetVector' has a wrong offset!");

// Function b1-Managed.BAN_GSDestroyProjectileByID.bIsNativeBranchingPointCS
// 0x0001 (0x0001 - 0x0000)
struct BAN_GSDestroyProjectileByID_bIsNativeBranchingPointCS final
{
public:
	uint8                                         ReturnValue : 1;                                   // 0x0000(0x0001)(BitIndex: 0x00, PropSize: 0x0001 (Parm, OutParm, ReturnParm, NoDestructor, HasGetValueTypeHash))
};
//static_assert(alignof(BAN_GSDestroyProjectileByID_bIsNativeBranchingPointCS) == 0x000001, "Wrong alignment on BAN_GSDestroyProjectileByID_bIsNativeBranchingPointCS");
//static_assert(sizeof(BAN_GSDestroyProjectileByID_bIsNativeBranchingPointCS) == 0x000001, "Wrong size on BAN_GSDestroyProjectileByID_bIsNativeBranchingPointCS");

// Function b1-Managed.BAN_GSDestroyProjectileByID.GSNotifyCS
// 0x0040 (0x0040 - 0x0000)
struct BAN_GSDestroyProjectileByID_GSNotifyCS final
{
public:
	struct FUStGSNotifyParam                      NotifyParam;                                       // 0x0000(0x0040)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
//static_assert(alignof(BAN_GSDestroyProjectileByID_GSNotifyCS) == 0x000008, "Wrong alignment on BAN_GSDestroyProjectileByID_GSNotifyCS");
//static_assert(sizeof(BAN_GSDestroyProjectileByID_GSNotifyCS) == 0x000040, "Wrong size on BAN_GSDestroyProjectileByID_GSNotifyCS");
//static_assert(offsetof(BAN_GSDestroyProjectileByID_GSNotifyCS, NotifyParam) == 0x000000, "Member 'BAN_GSDestroyProjectileByID_GSNotifyCS::NotifyParam' has a wrong offset!");

// Function b1-Managed.BGUCreateDeadConfigComp.ReceiveTick
// 0x0004 (0x0004 - 0x0000)
struct BGUCreateDeadConfigComp_ReceiveTick final
{
public:
	float                                         DeltaSeconds;                                      // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
//static_assert(alignof(BGUCreateDeadConfigComp_ReceiveTick) == 0x000004, "Wrong alignment on BGUCreateDeadConfigComp_ReceiveTick");
//static_assert(sizeof(BGUCreateDeadConfigComp_ReceiveTick) == 0x000004, "Wrong size on BGUCreateDeadConfigComp_ReceiveTick");
//static_assert(offsetof(BGUCreateDeadConfigComp_ReceiveTick, DeltaSeconds) == 0x000000, "Member 'BGUCreateDeadConfigComp_ReceiveTick::DeltaSeconds' has a wrong offset!");

// Function b1-Managed.BAIT_FlyMoveTo.Pathfinding_OnDynamicCollisionAlert
// 0x0048 (0x0048 - 0x0000)
struct BAIT_FlyMoveTo_Pathfinding_OnDynamicCollisionAlert final
{
public:
	struct FDonNavigationDynamicCollisionPayload  Data;                                              // 0x0000(0x0048)(Parm)
};
//static_assert(alignof(BAIT_FlyMoveTo_Pathfinding_OnDynamicCollisionAlert) == 0x000008, "Wrong alignment on BAIT_FlyMoveTo_Pathfinding_OnDynamicCollisionAlert");
//static_assert(sizeof(BAIT_FlyMoveTo_Pathfinding_OnDynamicCollisionAlert) == 0x000048, "Wrong size on BAIT_FlyMoveTo_Pathfinding_OnDynamicCollisionAlert");
//static_assert(offsetof(BAIT_FlyMoveTo_Pathfinding_OnDynamicCollisionAlert, Data) == 0x000000, "Member 'BAIT_FlyMoveTo_Pathfinding_OnDynamicCollisionAlert::Data' has a wrong offset!");

// Function b1-Managed.BAIT_FlyMoveTo.Pathfinding_OnFinish
// 0x02B8 (0x02B8 - 0x0000)
struct BAIT_FlyMoveTo_Pathfinding_OnFinish final
{
public:
	struct FDoNNavigationQueryData                Data;                                              // 0x0000(0x02B8)(Parm)
};
//static_assert(alignof(BAIT_FlyMoveTo_Pathfinding_OnFinish) == 0x000008, "Wrong alignment on BAIT_FlyMoveTo_Pathfinding_OnFinish");
//static_assert(sizeof(BAIT_FlyMoveTo_Pathfinding_OnFinish) == 0x0002B8, "Wrong size on BAIT_FlyMoveTo_Pathfinding_OnFinish");
//static_assert(offsetof(BAIT_FlyMoveTo_Pathfinding_OnFinish, Data) == 0x000000, "Member 'BAIT_FlyMoveTo_Pathfinding_OnFinish::Data' has a wrong offset!");

// Function b1-Managed.BANS_RespectCollisionInASS.GSAllowCrossSection
// 0x0001 (0x0001 - 0x0000)
struct BANS_RespectCollisionInASS_GSAllowCrossSection final
{
public:
	uint8                                         ReturnValue : 1;                                   // 0x0000(0x0001)(BitIndex: 0x00, PropSize: 0x0001 (Parm, OutParm, ReturnParm, NoDestructor, HasGetValueTypeHash))
};
//static_assert(alignof(BANS_RespectCollisionInASS_GSAllowCrossSection) == 0x000001, "Wrong alignment on BANS_RespectCollisionInASS_GSAllowCrossSection");
//static_assert(sizeof(BANS_RespectCollisionInASS_GSAllowCrossSection) == 0x000001, "Wrong size on BANS_RespectCollisionInASS_GSAllowCrossSection");

// Function b1-Managed.BANS_RespectCollisionInASS.GSNotifyBeginCS
// 0x0048 (0x0048 - 0x0000)
struct BANS_RespectCollisionInASS_GSNotifyBeginCS final
{
public:
	struct FUStGSNotifyParam                      NotifyParam;                                       // 0x0000(0x0040)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
	float                                         TotalDuration;                                     // 0x0040(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
//static_assert(alignof(BANS_RespectCollisionInASS_GSNotifyBeginCS) == 0x000008, "Wrong alignment on BANS_RespectCollisionInASS_GSNotifyBeginCS");
//static_assert(sizeof(BANS_RespectCollisionInASS_GSNotifyBeginCS) == 0x000048, "Wrong size on BANS_RespectCollisionInASS_GSNotifyBeginCS");
//static_assert(offsetof(BANS_RespectCollisionInASS_GSNotifyBeginCS, NotifyParam) == 0x000000, "Member 'BANS_RespectCollisionInASS_GSNotifyBeginCS::NotifyParam' has a wrong offset!");
//static_assert(offsetof(BANS_RespectCollisionInASS_GSNotifyBeginCS, TotalDuration) == 0x000040, "Member 'BANS_RespectCollisionInASS_GSNotifyBeginCS::TotalDuration' has a wrong offset!");

// Function b1-Managed.BANS_RespectCollisionInASS.GSNotifyEndCS
// 0x0040 (0x0040 - 0x0000)
struct BANS_RespectCollisionInASS_GSNotifyEndCS final
{
public:
	struct FUStGSNotifyParam                      NotifyParam;                                       // 0x0000(0x0040)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
//static_assert(alignof(BANS_RespectCollisionInASS_GSNotifyEndCS) == 0x000008, "Wrong alignment on BANS_RespectCollisionInASS_GSNotifyEndCS");
//static_assert(sizeof(BANS_RespectCollisionInASS_GSNotifyEndCS) == 0x000040, "Wrong size on BANS_RespectCollisionInASS_GSNotifyEndCS");
//static_assert(offsetof(BANS_RespectCollisionInASS_GSNotifyEndCS, NotifyParam) == 0x000000, "Member 'BANS_RespectCollisionInASS_GSNotifyEndCS::NotifyParam' has a wrong offset!");

// Function b1-Managed.BGUCameraActor.ReceiveEndPlay
// 0x0001 (0x0001 - 0x0000)
struct BGUCameraActor_ReceiveEndPlay final
{
public:
	EEndPlayReason                                EndPlayReason;                                     // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
//static_assert(alignof(BGUCameraActor_ReceiveEndPlay) == 0x000001, "Wrong alignment on BGUCameraActor_ReceiveEndPlay");
//static_assert(sizeof(BGUCameraActor_ReceiveEndPlay) == 0x000001, "Wrong size on BGUCameraActor_ReceiveEndPlay");
//static_assert(offsetof(BGUCameraActor_ReceiveEndPlay, EndPlayReason) == 0x000000, "Member 'BGUCameraActor_ReceiveEndPlay::EndPlayReason' has a wrong offset!");

// Function b1-Managed.BGUCameraRig_Rail.ReceiveEndPlay
// 0x0001 (0x0001 - 0x0000)
struct BGUCameraRig_Rail_ReceiveEndPlay final
{
public:
	EEndPlayReason                                EndPlayReason;                                     // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
//static_assert(alignof(BGUCameraRig_Rail_ReceiveEndPlay) == 0x000001, "Wrong alignment on BGUCameraRig_Rail_ReceiveEndPlay");
//static_assert(sizeof(BGUCameraRig_Rail_ReceiveEndPlay) == 0x000001, "Wrong size on BGUCameraRig_Rail_ReceiveEndPlay");
//static_assert(offsetof(BGUCameraRig_Rail_ReceiveEndPlay, EndPlayReason) == 0x000000, "Member 'BGUCameraRig_Rail_ReceiveEndPlay::EndPlayReason' has a wrong offset!");

// Function b1-Managed.BANS_GSDispInteract.GSNotifyBeginCS
// 0x0048 (0x0048 - 0x0000)
struct BANS_GSDispInteract_GSNotifyBeginCS final
{
public:
	struct FUStGSNotifyParam                      NotifyParam;                                       // 0x0000(0x0040)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
	float                                         TotalDuration;                                     // 0x0040(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
//static_assert(alignof(BANS_GSDispInteract_GSNotifyBeginCS) == 0x000008, "Wrong alignment on BANS_GSDispInteract_GSNotifyBeginCS");
//static_assert(sizeof(BANS_GSDispInteract_GSNotifyBeginCS) == 0x000048, "Wrong size on BANS_GSDispInteract_GSNotifyBeginCS");
//static_assert(offsetof(BANS_GSDispInteract_GSNotifyBeginCS, NotifyParam) == 0x000000, "Member 'BANS_GSDispInteract_GSNotifyBeginCS::NotifyParam' has a wrong offset!");
//static_assert(offsetof(BANS_GSDispInteract_GSNotifyBeginCS, TotalDuration) == 0x000040, "Member 'BANS_GSDispInteract_GSNotifyBeginCS::TotalDuration' has a wrong offset!");

// Function b1-Managed.BANS_GSDispInteract.GSNotifyTickCS
// 0x0048 (0x0048 - 0x0000)
struct BANS_GSDispInteract_GSNotifyTickCS final
{
public:
	struct FUStGSNotifyParam                      NotifyParam;                                       // 0x0000(0x0040)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
	float                                         FrameDeltaTime;                                    // 0x0040(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
//static_assert(alignof(BANS_GSDispInteract_GSNotifyTickCS) == 0x000008, "Wrong alignment on BANS_GSDispInteract_GSNotifyTickCS");
//static_assert(sizeof(BANS_GSDispInteract_GSNotifyTickCS) == 0x000048, "Wrong size on BANS_GSDispInteract_GSNotifyTickCS");
//static_assert(offsetof(BANS_GSDispInteract_GSNotifyTickCS, NotifyParam) == 0x000000, "Member 'BANS_GSDispInteract_GSNotifyTickCS::NotifyParam' has a wrong offset!");
//static_assert(offsetof(BANS_GSDispInteract_GSNotifyTickCS, FrameDeltaTime) == 0x000040, "Member 'BANS_GSDispInteract_GSNotifyTickCS::FrameDeltaTime' has a wrong offset!");

// Function b1-Managed.BANS_GSDispInteract.GSNotifyEndCS
// 0x0040 (0x0040 - 0x0000)
struct BANS_GSDispInteract_GSNotifyEndCS final
{
public:
	struct FUStGSNotifyParam                      NotifyParam;                                       // 0x0000(0x0040)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
//static_assert(alignof(BANS_GSDispInteract_GSNotifyEndCS) == 0x000008, "Wrong alignment on BANS_GSDispInteract_GSNotifyEndCS");
//static_assert(sizeof(BANS_GSDispInteract_GSNotifyEndCS) == 0x000040, "Wrong size on BANS_GSDispInteract_GSNotifyEndCS");
//static_assert(offsetof(BANS_GSDispInteract_GSNotifyEndCS, NotifyParam) == 0x000000, "Member 'BANS_GSDispInteract_GSNotifyEndCS::NotifyParam' has a wrong offset!");

// Function b1-Managed.BED_ProcessStateNode_PlayLevelSequence.GetNodeDescriptionInCS
// 0x0010 (0x0010 - 0x0000)
struct BED_ProcessStateNode_PlayLevelSequence_GetNodeDescriptionInCS final
{
public:
	class FString                                 ReturnValue;                                       // 0x0000(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash)
};
//static_assert(alignof(BED_ProcessStateNode_PlayLevelSequence_GetNodeDescriptionInCS) == 0x000008, "Wrong alignment on BED_ProcessStateNode_PlayLevelSequence_GetNodeDescriptionInCS");
//static_assert(sizeof(BED_ProcessStateNode_PlayLevelSequence_GetNodeDescriptionInCS) == 0x000010, "Wrong size on BED_ProcessStateNode_PlayLevelSequence_GetNodeDescriptionInCS");
//static_assert(offsetof(BED_ProcessStateNode_PlayLevelSequence_GetNodeDescriptionInCS, ReturnValue) == 0x000000, "Member 'BED_ProcessStateNode_PlayLevelSequence_GetNodeDescriptionInCS::ReturnValue' has a wrong offset!");

// Function b1-Managed.BGUFXActorBase.SetFloatValueToMaterialAdvect
// 0x000C (0x000C - 0x0000)
struct BGUFXActorBase_SetFloatValueToMaterialAdvect final
{
public:
	class FName                                   ParamName;                                         // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         FloatValue;                                        // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
//static_assert(alignof(BGUFXActorBase_SetFloatValueToMaterialAdvect) == 0x000004, "Wrong alignment on BGUFXActorBase_SetFloatValueToMaterialAdvect");
//static_assert(sizeof(BGUFXActorBase_SetFloatValueToMaterialAdvect) == 0x00000C, "Wrong size on BGUFXActorBase_SetFloatValueToMaterialAdvect");
//static_assert(offsetof(BGUFXActorBase_SetFloatValueToMaterialAdvect, ParamName) == 0x000000, "Member 'BGUFXActorBase_SetFloatValueToMaterialAdvect::ParamName' has a wrong offset!");
//static_assert(offsetof(BGUFXActorBase_SetFloatValueToMaterialAdvect, FloatValue) == 0x000008, "Member 'BGUFXActorBase_SetFloatValueToMaterialAdvect::FloatValue' has a wrong offset!");

// Function b1-Managed.BGUFXActorBase.OnDestroyDestructible
// 0x0038 (0x0038 - 0x0000)
struct BGUFXActorBase_OnDestroyDestructible final
{
public:
	struct FVector                                HitLocation;                                       // 0x0000(0x0018)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                ImpulseDir;                                        // 0x0018(0x0018)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         ImpulseStrength;                                   // 0x0030(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         Damage;                                            // 0x0034(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
//static_assert(alignof(BGUFXActorBase_OnDestroyDestructible) == 0x000008, "Wrong alignment on BGUFXActorBase_OnDestroyDestructible");
//static_assert(sizeof(BGUFXActorBase_OnDestroyDestructible) == 0x000038, "Wrong size on BGUFXActorBase_OnDestroyDestructible");
//static_assert(offsetof(BGUFXActorBase_OnDestroyDestructible, HitLocation) == 0x000000, "Member 'BGUFXActorBase_OnDestroyDestructible::HitLocation' has a wrong offset!");
//static_assert(offsetof(BGUFXActorBase_OnDestroyDestructible, ImpulseDir) == 0x000018, "Member 'BGUFXActorBase_OnDestroyDestructible::ImpulseDir' has a wrong offset!");
//static_assert(offsetof(BGUFXActorBase_OnDestroyDestructible, ImpulseStrength) == 0x000030, "Member 'BGUFXActorBase_OnDestroyDestructible::ImpulseStrength' has a wrong offset!");
//static_assert(offsetof(BGUFXActorBase_OnDestroyDestructible, Damage) == 0x000034, "Member 'BGUFXActorBase_OnDestroyDestructible::Damage' has a wrong offset!");

// Function b1-Managed.BGUFXActorBase.OnResetDestructible
// 0x0001 (0x0001 - 0x0000)
struct BGUFXActorBase_OnResetDestructible final
{
public:
	uint8                                         IsDestroyed : 1;                                   // 0x0000(0x0001)(BitIndex: 0x00, PropSize: 0x0001 (Parm, NoDestructor, HasGetValueTypeHash))
};
//static_assert(alignof(BGUFXActorBase_OnResetDestructible) == 0x000001, "Wrong alignment on BGUFXActorBase_OnResetDestructible");
//static_assert(sizeof(BGUFXActorBase_OnResetDestructible) == 0x000001, "Wrong size on BGUFXActorBase_OnResetDestructible");

// Function b1-Managed.BGUFXActorBase.OnHitDestructible
// 0x0038 (0x0038 - 0x0000)
struct BGUFXActorBase_OnHitDestructible final
{
public:
	struct FVector                                HitLocation;                                       // 0x0000(0x0018)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                ImpulseDir;                                        // 0x0018(0x0018)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         ImpulseStrength;                                   // 0x0030(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         Damage;                                            // 0x0034(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
//static_assert(alignof(BGUFXActorBase_OnHitDestructible) == 0x000008, "Wrong alignment on BGUFXActorBase_OnHitDestructible");
//static_assert(sizeof(BGUFXActorBase_OnHitDestructible) == 0x000038, "Wrong size on BGUFXActorBase_OnHitDestructible");
//static_assert(offsetof(BGUFXActorBase_OnHitDestructible, HitLocation) == 0x000000, "Member 'BGUFXActorBase_OnHitDestructible::HitLocation' has a wrong offset!");
//static_assert(offsetof(BGUFXActorBase_OnHitDestructible, ImpulseDir) == 0x000018, "Member 'BGUFXActorBase_OnHitDestructible::ImpulseDir' has a wrong offset!");
//static_assert(offsetof(BGUFXActorBase_OnHitDestructible, ImpulseStrength) == 0x000030, "Member 'BGUFXActorBase_OnHitDestructible::ImpulseStrength' has a wrong offset!");
//static_assert(offsetof(BGUFXActorBase_OnHitDestructible, Damage) == 0x000034, "Member 'BGUFXActorBase_OnHitDestructible::Damage' has a wrong offset!");

// Function b1-Managed.BGUFXActorBase.IsDead
// 0x0001 (0x0001 - 0x0000)
struct BGUFXActorBase_IsDead final
{
public:
	uint8                                         ReturnValue : 1;                                   // 0x0000(0x0001)(BitIndex: 0x00, PropSize: 0x0001 (Parm, OutParm, ReturnParm, NoDestructor, HasGetValueTypeHash))
};
//static_assert(alignof(BGUFXActorBase_IsDead) == 0x000001, "Wrong alignment on BGUFXActorBase_IsDead");
//static_assert(sizeof(BGUFXActorBase_IsDead) == 0x000001, "Wrong size on BGUFXActorBase_IsDead");

// Function b1-Managed.BGUDropItemActorCS.DropItemBPFunc
// 0x0004 (0x0004 - 0x0000)
struct BGUDropItemActorCS_DropItemBPFunc final
{
public:
	float                                         FloatParam;                                        // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
//static_assert(alignof(BGUDropItemActorCS_DropItemBPFunc) == 0x000004, "Wrong alignment on BGUDropItemActorCS_DropItemBPFunc");
//static_assert(sizeof(BGUDropItemActorCS_DropItemBPFunc) == 0x000004, "Wrong size on BGUDropItemActorCS_DropItemBPFunc");
//static_assert(offsetof(BGUDropItemActorCS_DropItemBPFunc, FloatParam) == 0x000000, "Member 'BGUDropItemActorCS_DropItemBPFunc::FloatParam' has a wrong offset!");

// Function b1-Managed.BAN_GSAIJumpStart.bIsNativeBranchingPointCS
// 0x0001 (0x0001 - 0x0000)
struct BAN_GSAIJumpStart_bIsNativeBranchingPointCS final
{
public:
	uint8                                         ReturnValue : 1;                                   // 0x0000(0x0001)(BitIndex: 0x00, PropSize: 0x0001 (Parm, OutParm, ReturnParm, NoDestructor, HasGetValueTypeHash))
};
//static_assert(alignof(BAN_GSAIJumpStart_bIsNativeBranchingPointCS) == 0x000001, "Wrong alignment on BAN_GSAIJumpStart_bIsNativeBranchingPointCS");
//static_assert(sizeof(BAN_GSAIJumpStart_bIsNativeBranchingPointCS) == 0x000001, "Wrong size on BAN_GSAIJumpStart_bIsNativeBranchingPointCS");

// Function b1-Managed.BAN_GSAIJumpStart.GSNotifyCS
// 0x0040 (0x0040 - 0x0000)
struct BAN_GSAIJumpStart_GSNotifyCS final
{
public:
	struct FUStGSNotifyParam                      NotifyParam;                                       // 0x0000(0x0040)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
//static_assert(alignof(BAN_GSAIJumpStart_GSNotifyCS) == 0x000008, "Wrong alignment on BAN_GSAIJumpStart_GSNotifyCS");
//static_assert(sizeof(BAN_GSAIJumpStart_GSNotifyCS) == 0x000040, "Wrong size on BAN_GSAIJumpStart_GSNotifyCS");
//static_assert(offsetof(BAN_GSAIJumpStart_GSNotifyCS, NotifyParam) == 0x000000, "Member 'BAN_GSAIJumpStart_GSNotifyCS::NotifyParam' has a wrong offset!");

// Function b1-Managed.BED_TaskNode_GamePass.GetNodeDescriptionInCS
// 0x0010 (0x0010 - 0x0000)
struct BED_TaskNode_GamePass_GetNodeDescriptionInCS final
{
public:
	class FString                                 ReturnValue;                                       // 0x0000(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash)
};
//static_assert(alignof(BED_TaskNode_GamePass_GetNodeDescriptionInCS) == 0x000008, "Wrong alignment on BED_TaskNode_GamePass_GetNodeDescriptionInCS");
//static_assert(sizeof(BED_TaskNode_GamePass_GetNodeDescriptionInCS) == 0x000010, "Wrong size on BED_TaskNode_GamePass_GetNodeDescriptionInCS");
//static_assert(offsetof(BED_TaskNode_GamePass_GetNodeDescriptionInCS, ReturnValue) == 0x000000, "Member 'BED_TaskNode_GamePass_GetNodeDescriptionInCS::ReturnValue' has a wrong offset!");

// Function b1-Managed.BGUPerformerActorCS.OnConstructionCS
// 0x0060 (0x0060 - 0x0000)
struct BGUPerformerActorCS_OnConstructionCS final
{
public:
	struct FTransform                             Transform;                                         // 0x0000(0x0060)(ConstParm, Parm, OutParm, ReferenceParm, IsPlainOldData, NoDestructor)
};
//static_assert(alignof(BGUPerformerActorCS_OnConstructionCS) == 0x000010, "Wrong alignment on BGUPerformerActorCS_OnConstructionCS");
//static_assert(sizeof(BGUPerformerActorCS_OnConstructionCS) == 0x000060, "Wrong size on BGUPerformerActorCS_OnConstructionCS");
//static_assert(offsetof(BGUPerformerActorCS_OnConstructionCS, Transform) == 0x000000, "Member 'BGUPerformerActorCS_OnConstructionCS::Transform' has a wrong offset!");

// Function b1-Managed.BGUPerformerActorCS.EquipFinish
// 0x0004 (0x0004 - 0x0000)
struct BGUPerformerActorCS_EquipFinish final
{
public:
	int32                                         EquipID;                                           // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
//static_assert(alignof(BGUPerformerActorCS_EquipFinish) == 0x000004, "Wrong alignment on BGUPerformerActorCS_EquipFinish");
//static_assert(sizeof(BGUPerformerActorCS_EquipFinish) == 0x000004, "Wrong size on BGUPerformerActorCS_EquipFinish");
//static_assert(offsetof(BGUPerformerActorCS_EquipFinish, EquipID) == 0x000000, "Member 'BGUPerformerActorCS_EquipFinish::EquipID' has a wrong offset!");

// Function b1-Managed.BGUPerformerActorCS.GetActorGuidCS
// 0x0018 (0x0018 - 0x0000)
struct BGUPerformerActorCS_GetActorGuidCS final
{
public:
	class FString                                 OutActorGuid;                                      // 0x0000(0x0010)(Parm, OutParm, ZeroConstructor, HasGetValueTypeHash)
	uint8                                         ReturnValue : 1;                                   // 0x0010(0x0001)(BitIndex: 0x00, PropSize: 0x0001 (Parm, OutParm, ReturnParm, NoDestructor, HasGetValueTypeHash))
};
//static_assert(alignof(BGUPerformerActorCS_GetActorGuidCS) == 0x000008, "Wrong alignment on BGUPerformerActorCS_GetActorGuidCS");
//static_assert(sizeof(BGUPerformerActorCS_GetActorGuidCS) == 0x000018, "Wrong size on BGUPerformerActorCS_GetActorGuidCS");
//static_assert(offsetof(BGUPerformerActorCS_GetActorGuidCS, OutActorGuid) == 0x000000, "Member 'BGUPerformerActorCS_GetActorGuidCS::OutActorGuid' has a wrong offset!");

// Function b1-Managed.GSEQG_WanderPointGenerator.DoItemGenerationCS
// 0x0010 (0x0010 - 0x0000)
struct GSEQG_WanderPointGenerator_DoItemGenerationCS final
{
public:
	TArray<struct FVector>                        ContextLocations;                                  // 0x0000(0x0010)(ConstParm, Parm, OutParm, ReferenceParm)
};
//static_assert(alignof(GSEQG_WanderPointGenerator_DoItemGenerationCS) == 0x000008, "Wrong alignment on GSEQG_WanderPointGenerator_DoItemGenerationCS");
//static_assert(sizeof(GSEQG_WanderPointGenerator_DoItemGenerationCS) == 0x000010, "Wrong size on GSEQG_WanderPointGenerator_DoItemGenerationCS");
//static_assert(offsetof(GSEQG_WanderPointGenerator_DoItemGenerationCS, ContextLocations) == 0x000000, "Member 'GSEQG_WanderPointGenerator_DoItemGenerationCS::ContextLocations' has a wrong offset!");

// Function b1-Managed.BAN_GSFindSceneLocation.bIsNativeBranchingPointCS
// 0x0001 (0x0001 - 0x0000)
struct BAN_GSFindSceneLocation_bIsNativeBranchingPointCS final
{
public:
	uint8                                         ReturnValue : 1;                                   // 0x0000(0x0001)(BitIndex: 0x00, PropSize: 0x0001 (Parm, OutParm, ReturnParm, NoDestructor, HasGetValueTypeHash))
};
//static_assert(alignof(BAN_GSFindSceneLocation_bIsNativeBranchingPointCS) == 0x000001, "Wrong alignment on BAN_GSFindSceneLocation_bIsNativeBranchingPointCS");
//static_assert(sizeof(BAN_GSFindSceneLocation_bIsNativeBranchingPointCS) == 0x000001, "Wrong size on BAN_GSFindSceneLocation_bIsNativeBranchingPointCS");

// Function b1-Managed.BAN_GSFindSceneLocation.GSNotifyCS
// 0x0040 (0x0040 - 0x0000)
struct BAN_GSFindSceneLocation_GSNotifyCS final
{
public:
	struct FUStGSNotifyParam                      NotifyParam;                                       // 0x0000(0x0040)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
//static_assert(alignof(BAN_GSFindSceneLocation_GSNotifyCS) == 0x000008, "Wrong alignment on BAN_GSFindSceneLocation_GSNotifyCS");
//static_assert(sizeof(BAN_GSFindSceneLocation_GSNotifyCS) == 0x000040, "Wrong size on BAN_GSFindSceneLocation_GSNotifyCS");
//static_assert(offsetof(BAN_GSFindSceneLocation_GSNotifyCS, NotifyParam) == 0x000000, "Member 'BAN_GSFindSceneLocation_GSNotifyCS::NotifyParam' has a wrong offset!");

// Function b1-Managed.BUS_GroupAIAreaCompImpl.OverlapBegin
// 0x0010 (0x0010 - 0x0000)
struct BUS_GroupAIAreaCompImpl_OverlapBegin final
{
public:
	class AActor*                                 OverlappedActor;                                   // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class AActor*                                 OtherActor;                                        // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
//static_assert(alignof(BUS_GroupAIAreaCompImpl_OverlapBegin) == 0x000008, "Wrong alignment on BUS_GroupAIAreaCompImpl_OverlapBegin");
//static_assert(sizeof(BUS_GroupAIAreaCompImpl_OverlapBegin) == 0x000010, "Wrong size on BUS_GroupAIAreaCompImpl_OverlapBegin");
//static_assert(offsetof(BUS_GroupAIAreaCompImpl_OverlapBegin, OverlappedActor) == 0x000000, "Member 'BUS_GroupAIAreaCompImpl_OverlapBegin::OverlappedActor' has a wrong offset!");
//static_assert(offsetof(BUS_GroupAIAreaCompImpl_OverlapBegin, OtherActor) == 0x000008, "Member 'BUS_GroupAIAreaCompImpl_OverlapBegin::OtherActor' has a wrong offset!");

// Function b1-Managed.BUS_GroupAIAreaCompImpl.OverlapEnd
// 0x0020 (0x0020 - 0x0000)
struct BUS_GroupAIAreaCompImpl_OverlapEnd final
{
public:
	class UPrimitiveComponent*                    OverlappedComponent;                               // 0x0000(0x0008)(ExportObject, Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class AActor*                                 OtherActor;                                        // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UPrimitiveComponent*                    OtherComp;                                         // 0x0010(0x0008)(ExportObject, Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         OtherBodyIndex;                                    // 0x0018(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
//static_assert(alignof(BUS_GroupAIAreaCompImpl_OverlapEnd) == 0x000008, "Wrong alignment on BUS_GroupAIAreaCompImpl_OverlapEnd");
//static_assert(sizeof(BUS_GroupAIAreaCompImpl_OverlapEnd) == 0x000020, "Wrong size on BUS_GroupAIAreaCompImpl_OverlapEnd");
//static_assert(offsetof(BUS_GroupAIAreaCompImpl_OverlapEnd, OverlappedComponent) == 0x000000, "Member 'BUS_GroupAIAreaCompImpl_OverlapEnd::OverlappedComponent' has a wrong offset!");
//static_assert(offsetof(BUS_GroupAIAreaCompImpl_OverlapEnd, OtherActor) == 0x000008, "Member 'BUS_GroupAIAreaCompImpl_OverlapEnd::OtherActor' has a wrong offset!");
//static_assert(offsetof(BUS_GroupAIAreaCompImpl_OverlapEnd, OtherComp) == 0x000010, "Member 'BUS_GroupAIAreaCompImpl_OverlapEnd::OtherComp' has a wrong offset!");
//static_assert(offsetof(BUS_GroupAIAreaCompImpl_OverlapEnd, OtherBodyIndex) == 0x000018, "Member 'BUS_GroupAIAreaCompImpl_OverlapEnd::OtherBodyIndex' has a wrong offset!");

// Function b1-Managed.BGUCutDeathActor.PreviewPhy
// 0x0008 (0x0008 - 0x0000)
struct BGUCutDeathActor_PreviewPhy final
{
public:
	class ABGUCharacterCS*                        OwnerChar;                                         // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
//static_assert(alignof(BGUCutDeathActor_PreviewPhy) == 0x000008, "Wrong alignment on BGUCutDeathActor_PreviewPhy");
//static_assert(sizeof(BGUCutDeathActor_PreviewPhy) == 0x000008, "Wrong size on BGUCutDeathActor_PreviewPhy");
//static_assert(offsetof(BGUCutDeathActor_PreviewPhy, OwnerChar) == 0x000000, "Member 'BGUCutDeathActor_PreviewPhy::OwnerChar' has a wrong offset!");

// Function b1-Managed.BUS_LandingZoneComp.OnCollisionBeginOverlap
// 0x0108 (0x0108 - 0x0000)
struct BUS_LandingZoneComp_OnCollisionBeginOverlap final
{
public:
	class UPrimitiveComponent*                    OverlappedComponent;                               // 0x0000(0x0008)(ExportObject, Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class AActor*                                 OtherActor;                                        // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UPrimitiveComponent*                    OtherComp;                                         // 0x0010(0x0008)(ExportObject, Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         OtherBodyIndex;                                    // 0x0018(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         bFromSweep : 1;                                    // 0x001C(0x0001)(BitIndex: 0x00, PropSize: 0x0001 (Parm, NoDestructor, HasGetValueTypeHash))
	uint8                                         Pad_1D[0x3];                                       // 0x001D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FHitResult                             SweepResult;                                       // 0x0020(0x00E8)(Parm, IsPlainOldData, NoDestructor)
};
//static_assert(alignof(BUS_LandingZoneComp_OnCollisionBeginOverlap) == 0x000008, "Wrong alignment on BUS_LandingZoneComp_OnCollisionBeginOverlap");
//static_assert(sizeof(BUS_LandingZoneComp_OnCollisionBeginOverlap) == 0x000108, "Wrong size on BUS_LandingZoneComp_OnCollisionBeginOverlap");
//static_assert(offsetof(BUS_LandingZoneComp_OnCollisionBeginOverlap, OverlappedComponent) == 0x000000, "Member 'BUS_LandingZoneComp_OnCollisionBeginOverlap::OverlappedComponent' has a wrong offset!");
//static_assert(offsetof(BUS_LandingZoneComp_OnCollisionBeginOverlap, OtherActor) == 0x000008, "Member 'BUS_LandingZoneComp_OnCollisionBeginOverlap::OtherActor' has a wrong offset!");
//static_assert(offsetof(BUS_LandingZoneComp_OnCollisionBeginOverlap, OtherComp) == 0x000010, "Member 'BUS_LandingZoneComp_OnCollisionBeginOverlap::OtherComp' has a wrong offset!");
//static_assert(offsetof(BUS_LandingZoneComp_OnCollisionBeginOverlap, OtherBodyIndex) == 0x000018, "Member 'BUS_LandingZoneComp_OnCollisionBeginOverlap::OtherBodyIndex' has a wrong offset!");
//static_assert(offsetof(BUS_LandingZoneComp_OnCollisionBeginOverlap, SweepResult) == 0x000020, "Member 'BUS_LandingZoneComp_OnCollisionBeginOverlap::SweepResult' has a wrong offset!");

// Function b1-Managed.BUS_LandingZoneComp.OnCollisionEndOverlap
// 0x0020 (0x0020 - 0x0000)
struct BUS_LandingZoneComp_OnCollisionEndOverlap final
{
public:
	class UPrimitiveComponent*                    OverlappedComponent;                               // 0x0000(0x0008)(ExportObject, Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class AActor*                                 OtherActor;                                        // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UPrimitiveComponent*                    OtherComp;                                         // 0x0010(0x0008)(ExportObject, Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         OtherBodyIndex;                                    // 0x0018(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
//static_assert(alignof(BUS_LandingZoneComp_OnCollisionEndOverlap) == 0x000008, "Wrong alignment on BUS_LandingZoneComp_OnCollisionEndOverlap");
//static_assert(sizeof(BUS_LandingZoneComp_OnCollisionEndOverlap) == 0x000020, "Wrong size on BUS_LandingZoneComp_OnCollisionEndOverlap");
//static_assert(offsetof(BUS_LandingZoneComp_OnCollisionEndOverlap, OverlappedComponent) == 0x000000, "Member 'BUS_LandingZoneComp_OnCollisionEndOverlap::OverlappedComponent' has a wrong offset!");
//static_assert(offsetof(BUS_LandingZoneComp_OnCollisionEndOverlap, OtherActor) == 0x000008, "Member 'BUS_LandingZoneComp_OnCollisionEndOverlap::OtherActor' has a wrong offset!");
//static_assert(offsetof(BUS_LandingZoneComp_OnCollisionEndOverlap, OtherComp) == 0x000010, "Member 'BUS_LandingZoneComp_OnCollisionEndOverlap::OtherComp' has a wrong offset!");
//static_assert(offsetof(BUS_LandingZoneComp_OnCollisionEndOverlap, OtherBodyIndex) == 0x000018, "Member 'BUS_LandingZoneComp_OnCollisionEndOverlap::OtherBodyIndex' has a wrong offset!");

// Function b1-Managed.BAN_GSGhost.GSNotifyCS
// 0x0040 (0x0040 - 0x0000)
struct BAN_GSGhost_GSNotifyCS final
{
public:
	struct FUStGSNotifyParam                      NotifyParam;                                       // 0x0000(0x0040)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
//static_assert(alignof(BAN_GSGhost_GSNotifyCS) == 0x000008, "Wrong alignment on BAN_GSGhost_GSNotifyCS");
//static_assert(sizeof(BAN_GSGhost_GSNotifyCS) == 0x000040, "Wrong size on BAN_GSGhost_GSNotifyCS");
//static_assert(offsetof(BAN_GSGhost_GSNotifyCS, NotifyParam) == 0x000000, "Member 'BAN_GSGhost_GSNotifyCS::NotifyParam' has a wrong offset!");

// Function b1-Managed.BSNS_EnableUnitIK.OnPreviewNotifyBegin
// 0x0010 (0x0010 - 0x0000)
struct BSNS_EnableUnitIK_OnPreviewNotifyBegin final
{
public:
	class UObject*                                InPlaybackContext;                                 // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         InStatus;                                          // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         bInBackwards : 1;                                  // 0x000C(0x0001)(BitIndex: 0x00, PropSize: 0x0001 (Parm, NoDestructor, HasGetValueTypeHash))
};
//static_assert(alignof(BSNS_EnableUnitIK_OnPreviewNotifyBegin) == 0x000008, "Wrong alignment on BSNS_EnableUnitIK_OnPreviewNotifyBegin");
//static_assert(sizeof(BSNS_EnableUnitIK_OnPreviewNotifyBegin) == 0x000010, "Wrong size on BSNS_EnableUnitIK_OnPreviewNotifyBegin");
//static_assert(offsetof(BSNS_EnableUnitIK_OnPreviewNotifyBegin, InPlaybackContext) == 0x000000, "Member 'BSNS_EnableUnitIK_OnPreviewNotifyBegin::InPlaybackContext' has a wrong offset!");
//static_assert(offsetof(BSNS_EnableUnitIK_OnPreviewNotifyBegin, InStatus) == 0x000008, "Member 'BSNS_EnableUnitIK_OnPreviewNotifyBegin::InStatus' has a wrong offset!");

// Function b1-Managed.BSNS_EnableUnitIK.OnPreviewNotifyEnd
// 0x0010 (0x0010 - 0x0000)
struct BSNS_EnableUnitIK_OnPreviewNotifyEnd final
{
public:
	class UObject*                                InPlaybackContext;                                 // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         InStatus;                                          // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         bInBackwards : 1;                                  // 0x000C(0x0001)(BitIndex: 0x00, PropSize: 0x0001 (Parm, NoDestructor, HasGetValueTypeHash))
};
//static_assert(alignof(BSNS_EnableUnitIK_OnPreviewNotifyEnd) == 0x000008, "Wrong alignment on BSNS_EnableUnitIK_OnPreviewNotifyEnd");
//static_assert(sizeof(BSNS_EnableUnitIK_OnPreviewNotifyEnd) == 0x000010, "Wrong size on BSNS_EnableUnitIK_OnPreviewNotifyEnd");
//static_assert(offsetof(BSNS_EnableUnitIK_OnPreviewNotifyEnd, InPlaybackContext) == 0x000000, "Member 'BSNS_EnableUnitIK_OnPreviewNotifyEnd::InPlaybackContext' has a wrong offset!");
//static_assert(offsetof(BSNS_EnableUnitIK_OnPreviewNotifyEnd, InStatus) == 0x000008, "Member 'BSNS_EnableUnitIK_OnPreviewNotifyEnd::InStatus' has a wrong offset!");

// Function b1-Managed.BSNS_EnableUnitIK.OnNotifyBegin
// 0x0010 (0x0010 - 0x0000)
struct BSNS_EnableUnitIK_OnNotifyBegin final
{
public:
	class UCalliopeLevelSequencePlayer*           InPlayer;                                          // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         InStatus;                                          // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         bInBackwards : 1;                                  // 0x000C(0x0001)(BitIndex: 0x00, PropSize: 0x0001 (Parm, NoDestructor, HasGetValueTypeHash))
};
//static_assert(alignof(BSNS_EnableUnitIK_OnNotifyBegin) == 0x000008, "Wrong alignment on BSNS_EnableUnitIK_OnNotifyBegin");
//static_assert(sizeof(BSNS_EnableUnitIK_OnNotifyBegin) == 0x000010, "Wrong size on BSNS_EnableUnitIK_OnNotifyBegin");
//static_assert(offsetof(BSNS_EnableUnitIK_OnNotifyBegin, InPlayer) == 0x000000, "Member 'BSNS_EnableUnitIK_OnNotifyBegin::InPlayer' has a wrong offset!");
//static_assert(offsetof(BSNS_EnableUnitIK_OnNotifyBegin, InStatus) == 0x000008, "Member 'BSNS_EnableUnitIK_OnNotifyBegin::InStatus' has a wrong offset!");

// Function b1-Managed.BSNS_EnableUnitIK.OnNotifyEnd
// 0x0010 (0x0010 - 0x0000)
struct BSNS_EnableUnitIK_OnNotifyEnd final
{
public:
	class UCalliopeLevelSequencePlayer*           InPlayer;                                          // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         InStatus;                                          // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         bInBackwards : 1;                                  // 0x000C(0x0001)(BitIndex: 0x00, PropSize: 0x0001 (Parm, NoDestructor, HasGetValueTypeHash))
};
//static_assert(alignof(BSNS_EnableUnitIK_OnNotifyEnd) == 0x000008, "Wrong alignment on BSNS_EnableUnitIK_OnNotifyEnd");
//static_assert(sizeof(BSNS_EnableUnitIK_OnNotifyEnd) == 0x000010, "Wrong size on BSNS_EnableUnitIK_OnNotifyEnd");
//static_assert(offsetof(BSNS_EnableUnitIK_OnNotifyEnd, InPlayer) == 0x000000, "Member 'BSNS_EnableUnitIK_OnNotifyEnd::InPlayer' has a wrong offset!");
//static_assert(offsetof(BSNS_EnableUnitIK_OnNotifyEnd, InStatus) == 0x000008, "Member 'BSNS_EnableUnitIK_OnNotifyEnd::InStatus' has a wrong offset!");

// Function b1-Managed.BAN_GSQTESceneNotify.GSNotifyCS
// 0x0040 (0x0040 - 0x0000)
struct BAN_GSQTESceneNotify_GSNotifyCS final
{
public:
	struct FUStGSNotifyParam                      NotifyParam;                                       // 0x0000(0x0040)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
//static_assert(alignof(BAN_GSQTESceneNotify_GSNotifyCS) == 0x000008, "Wrong alignment on BAN_GSQTESceneNotify_GSNotifyCS");
//static_assert(sizeof(BAN_GSQTESceneNotify_GSNotifyCS) == 0x000040, "Wrong size on BAN_GSQTESceneNotify_GSNotifyCS");
//static_assert(offsetof(BAN_GSQTESceneNotify_GSNotifyCS, NotifyParam) == 0x000000, "Member 'BAN_GSQTESceneNotify_GSNotifyCS::NotifyParam' has a wrong offset!");

// Function b1-Managed.BAN_GSNotifyBehaviorGraph.bIsNativeBranchingPointCS
// 0x0001 (0x0001 - 0x0000)
struct BAN_GSNotifyBehaviorGraph_bIsNativeBranchingPointCS final
{
public:
	uint8                                         ReturnValue : 1;                                   // 0x0000(0x0001)(BitIndex: 0x00, PropSize: 0x0001 (Parm, OutParm, ReturnParm, NoDestructor, HasGetValueTypeHash))
};
//static_assert(alignof(BAN_GSNotifyBehaviorGraph_bIsNativeBranchingPointCS) == 0x000001, "Wrong alignment on BAN_GSNotifyBehaviorGraph_bIsNativeBranchingPointCS");
//static_assert(sizeof(BAN_GSNotifyBehaviorGraph_bIsNativeBranchingPointCS) == 0x000001, "Wrong size on BAN_GSNotifyBehaviorGraph_bIsNativeBranchingPointCS");

// Function b1-Managed.BAN_GSNotifyBehaviorGraph.GSNotifyCS
// 0x0040 (0x0040 - 0x0000)
struct BAN_GSNotifyBehaviorGraph_GSNotifyCS final
{
public:
	struct FUStGSNotifyParam                      NotifyParam;                                       // 0x0000(0x0040)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
//static_assert(alignof(BAN_GSNotifyBehaviorGraph_GSNotifyCS) == 0x000008, "Wrong alignment on BAN_GSNotifyBehaviorGraph_GSNotifyCS");
//static_assert(sizeof(BAN_GSNotifyBehaviorGraph_GSNotifyCS) == 0x000040, "Wrong size on BAN_GSNotifyBehaviorGraph_GSNotifyCS");
//static_assert(offsetof(BAN_GSNotifyBehaviorGraph_GSNotifyCS, NotifyParam) == 0x000000, "Member 'BAN_GSNotifyBehaviorGraph_GSNotifyCS::NotifyParam' has a wrong offset!");

// Function b1-Managed.BANS_X2_PlayDBCDataAsset.GSNotifyBeginCS
// 0x0048 (0x0048 - 0x0000)
struct BANS_X2_PlayDBCDataAsset_GSNotifyBeginCS final
{
public:
	struct FUStGSNotifyParam                      NotifyParam;                                       // 0x0000(0x0040)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
	float                                         TotalDuration;                                     // 0x0040(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
//static_assert(alignof(BANS_X2_PlayDBCDataAsset_GSNotifyBeginCS) == 0x000008, "Wrong alignment on BANS_X2_PlayDBCDataAsset_GSNotifyBeginCS");
//static_assert(sizeof(BANS_X2_PlayDBCDataAsset_GSNotifyBeginCS) == 0x000048, "Wrong size on BANS_X2_PlayDBCDataAsset_GSNotifyBeginCS");
//static_assert(offsetof(BANS_X2_PlayDBCDataAsset_GSNotifyBeginCS, NotifyParam) == 0x000000, "Member 'BANS_X2_PlayDBCDataAsset_GSNotifyBeginCS::NotifyParam' has a wrong offset!");
//static_assert(offsetof(BANS_X2_PlayDBCDataAsset_GSNotifyBeginCS, TotalDuration) == 0x000040, "Member 'BANS_X2_PlayDBCDataAsset_GSNotifyBeginCS::TotalDuration' has a wrong offset!");

// Function b1-Managed.BANS_X2_PlayDBCDataAsset.GSNotifyEndCS
// 0x0040 (0x0040 - 0x0000)
struct BANS_X2_PlayDBCDataAsset_GSNotifyEndCS final
{
public:
	struct FUStGSNotifyParam                      NotifyParam;                                       // 0x0000(0x0040)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
//static_assert(alignof(BANS_X2_PlayDBCDataAsset_GSNotifyEndCS) == 0x000008, "Wrong alignment on BANS_X2_PlayDBCDataAsset_GSNotifyEndCS");
//static_assert(sizeof(BANS_X2_PlayDBCDataAsset_GSNotifyEndCS) == 0x000040, "Wrong size on BANS_X2_PlayDBCDataAsset_GSNotifyEndCS");
//static_assert(offsetof(BANS_X2_PlayDBCDataAsset_GSNotifyEndCS, NotifyParam) == 0x000000, "Member 'BANS_X2_PlayDBCDataAsset_GSNotifyEndCS::NotifyParam' has a wrong offset!");

// Function b1-Managed.BAN_ShowShrineMain.GSNotifyCS
// 0x0040 (0x0040 - 0x0000)
struct BAN_ShowShrineMain_GSNotifyCS final
{
public:
	struct FUStGSNotifyParam                      NotifyParam;                                       // 0x0000(0x0040)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
//static_assert(alignof(BAN_ShowShrineMain_GSNotifyCS) == 0x000008, "Wrong alignment on BAN_ShowShrineMain_GSNotifyCS");
//static_assert(sizeof(BAN_ShowShrineMain_GSNotifyCS) == 0x000040, "Wrong size on BAN_ShowShrineMain_GSNotifyCS");
//static_assert(offsetof(BAN_ShowShrineMain_GSNotifyCS, NotifyParam) == 0x000000, "Member 'BAN_ShowShrineMain_GSNotifyCS::NotifyParam' has a wrong offset!");

// Function b1-Managed.BANS_PlaySkillSequence.GetSoftReferences
// 0x0010 (0x0010 - 0x0000)
struct BANS_PlaySkillSequence_GetSoftReferences final
{
public:
	TArray<struct FSoftObjectPath>                ReturnValue;                                       // 0x0000(0x0010)(Parm, OutParm, ReturnParm)
};
//static_assert(alignof(BANS_PlaySkillSequence_GetSoftReferences) == 0x000008, "Wrong alignment on BANS_PlaySkillSequence_GetSoftReferences");
//static_assert(sizeof(BANS_PlaySkillSequence_GetSoftReferences) == 0x000010, "Wrong size on BANS_PlaySkillSequence_GetSoftReferences");
//static_assert(offsetof(BANS_PlaySkillSequence_GetSoftReferences, ReturnValue) == 0x000000, "Member 'BANS_PlaySkillSequence_GetSoftReferences::ReturnValue' has a wrong offset!");

// Function b1-Managed.BANS_PlaySkillSequence.GSNotifyBeginCS
// 0x0048 (0x0048 - 0x0000)
struct BANS_PlaySkillSequence_GSNotifyBeginCS final
{
public:
	struct FUStGSNotifyParam                      NotifyParam;                                       // 0x0000(0x0040)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
	float                                         TotalDuration;                                     // 0x0040(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
//static_assert(alignof(BANS_PlaySkillSequence_GSNotifyBeginCS) == 0x000008, "Wrong alignment on BANS_PlaySkillSequence_GSNotifyBeginCS");
//static_assert(sizeof(BANS_PlaySkillSequence_GSNotifyBeginCS) == 0x000048, "Wrong size on BANS_PlaySkillSequence_GSNotifyBeginCS");
//static_assert(offsetof(BANS_PlaySkillSequence_GSNotifyBeginCS, NotifyParam) == 0x000000, "Member 'BANS_PlaySkillSequence_GSNotifyBeginCS::NotifyParam' has a wrong offset!");
//static_assert(offsetof(BANS_PlaySkillSequence_GSNotifyBeginCS, TotalDuration) == 0x000040, "Member 'BANS_PlaySkillSequence_GSNotifyBeginCS::TotalDuration' has a wrong offset!");

// Function b1-Managed.BUS_UpdraftComp.OnActorLeave
// 0x0020 (0x0020 - 0x0000)
struct BUS_UpdraftComp_OnActorLeave final
{
public:
	class UPrimitiveComponent*                    OverlappedComponent;                               // 0x0000(0x0008)(ExportObject, Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class AActor*                                 OtherActor;                                        // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UPrimitiveComponent*                    OtherComp;                                         // 0x0010(0x0008)(ExportObject, Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         OtherBodyIndex;                                    // 0x0018(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
//static_assert(alignof(BUS_UpdraftComp_OnActorLeave) == 0x000008, "Wrong alignment on BUS_UpdraftComp_OnActorLeave");
//static_assert(sizeof(BUS_UpdraftComp_OnActorLeave) == 0x000020, "Wrong size on BUS_UpdraftComp_OnActorLeave");
//static_assert(offsetof(BUS_UpdraftComp_OnActorLeave, OverlappedComponent) == 0x000000, "Member 'BUS_UpdraftComp_OnActorLeave::OverlappedComponent' has a wrong offset!");
//static_assert(offsetof(BUS_UpdraftComp_OnActorLeave, OtherActor) == 0x000008, "Member 'BUS_UpdraftComp_OnActorLeave::OtherActor' has a wrong offset!");
//static_assert(offsetof(BUS_UpdraftComp_OnActorLeave, OtherComp) == 0x000010, "Member 'BUS_UpdraftComp_OnActorLeave::OtherComp' has a wrong offset!");
//static_assert(offsetof(BUS_UpdraftComp_OnActorLeave, OtherBodyIndex) == 0x000018, "Member 'BUS_UpdraftComp_OnActorLeave::OtherBodyIndex' has a wrong offset!");

// Function b1-Managed.BUS_UpdraftComp.OnActorEnter
// 0x0010 (0x0010 - 0x0000)
struct BUS_UpdraftComp_OnActorEnter final
{
public:
	class AActor*                                 OverlappedActor;                                   // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class AActor*                                 OtherActor;                                        // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
//static_assert(alignof(BUS_UpdraftComp_OnActorEnter) == 0x000008, "Wrong alignment on BUS_UpdraftComp_OnActorEnter");
//static_assert(sizeof(BUS_UpdraftComp_OnActorEnter) == 0x000010, "Wrong size on BUS_UpdraftComp_OnActorEnter");
//static_assert(offsetof(BUS_UpdraftComp_OnActorEnter, OverlappedActor) == 0x000000, "Member 'BUS_UpdraftComp_OnActorEnter::OverlappedActor' has a wrong offset!");
//static_assert(offsetof(BUS_UpdraftComp_OnActorEnter, OtherActor) == 0x000008, "Member 'BUS_UpdraftComp_OnActorEnter::OtherActor' has a wrong offset!");

// Function b1-Managed.BANS_GSFaBaoCastSucceed.GSNotifyBeginCS
// 0x0048 (0x0048 - 0x0000)
struct BANS_GSFaBaoCastSucceed_GSNotifyBeginCS final
{
public:
	struct FUStGSNotifyParam                      NotifyParam;                                       // 0x0000(0x0040)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
	float                                         TotalDuration;                                     // 0x0040(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
//static_assert(alignof(BANS_GSFaBaoCastSucceed_GSNotifyBeginCS) == 0x000008, "Wrong alignment on BANS_GSFaBaoCastSucceed_GSNotifyBeginCS");
//static_assert(sizeof(BANS_GSFaBaoCastSucceed_GSNotifyBeginCS) == 0x000048, "Wrong size on BANS_GSFaBaoCastSucceed_GSNotifyBeginCS");
//static_assert(offsetof(BANS_GSFaBaoCastSucceed_GSNotifyBeginCS, NotifyParam) == 0x000000, "Member 'BANS_GSFaBaoCastSucceed_GSNotifyBeginCS::NotifyParam' has a wrong offset!");
//static_assert(offsetof(BANS_GSFaBaoCastSucceed_GSNotifyBeginCS, TotalDuration) == 0x000040, "Member 'BANS_GSFaBaoCastSucceed_GSNotifyBeginCS::TotalDuration' has a wrong offset!");

// Function b1-Managed.BUAnimEquipPreview.BlueprintUpdateAnimation
// 0x0004 (0x0004 - 0x0000)
struct BUAnimEquipPreview_BlueprintUpdateAnimation final
{
public:
	float                                         DeltaTimeX;                                        // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
//static_assert(alignof(BUAnimEquipPreview_BlueprintUpdateAnimation) == 0x000004, "Wrong alignment on BUAnimEquipPreview_BlueprintUpdateAnimation");
//static_assert(sizeof(BUAnimEquipPreview_BlueprintUpdateAnimation) == 0x000004, "Wrong size on BUAnimEquipPreview_BlueprintUpdateAnimation");
//static_assert(offsetof(BUAnimEquipPreview_BlueprintUpdateAnimation, DeltaTimeX) == 0x000000, "Member 'BUAnimEquipPreview_BlueprintUpdateAnimation::DeltaTimeX' has a wrong offset!");

// Function b1-Managed.BUAnimModularMesh.BlueprintThreadSafeUpdateAnimation
// 0x0004 (0x0004 - 0x0000)
struct BUAnimModularMesh_BlueprintThreadSafeUpdateAnimation final
{
public:
	float                                         DeltaTime;                                         // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
//static_assert(alignof(BUAnimModularMesh_BlueprintThreadSafeUpdateAnimation) == 0x000004, "Wrong alignment on BUAnimModularMesh_BlueprintThreadSafeUpdateAnimation");
//static_assert(sizeof(BUAnimModularMesh_BlueprintThreadSafeUpdateAnimation) == 0x000004, "Wrong size on BUAnimModularMesh_BlueprintThreadSafeUpdateAnimation");
//static_assert(offsetof(BUAnimModularMesh_BlueprintThreadSafeUpdateAnimation, DeltaTime) == 0x000000, "Member 'BUAnimModularMesh_BlueprintThreadSafeUpdateAnimation::DeltaTime' has a wrong offset!");

// Function b1-Managed.BUS_SceneWindEffectActorComp.TickComponentInCS
// 0x0004 (0x0004 - 0x0000)
struct BUS_SceneWindEffectActorComp_TickComponentInCS final
{
public:
	float                                         DeltaTime;                                         // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
//static_assert(alignof(BUS_SceneWindEffectActorComp_TickComponentInCS) == 0x000004, "Wrong alignment on BUS_SceneWindEffectActorComp_TickComponentInCS");
//static_assert(sizeof(BUS_SceneWindEffectActorComp_TickComponentInCS) == 0x000004, "Wrong size on BUS_SceneWindEffectActorComp_TickComponentInCS");
//static_assert(offsetof(BUS_SceneWindEffectActorComp_TickComponentInCS, DeltaTime) == 0x000000, "Member 'BUS_SceneWindEffectActorComp_TickComponentInCS::DeltaTime' has a wrong offset!");

// Function b1-Managed.BANS_FBIK_StandBar.GSNotifyBeginCS
// 0x0048 (0x0048 - 0x0000)
struct BANS_FBIK_StandBar_GSNotifyBeginCS final
{
public:
	struct FUStGSNotifyParam                      NotifyParam;                                       // 0x0000(0x0040)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
	float                                         TotalDuration;                                     // 0x0040(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
//static_assert(alignof(BANS_FBIK_StandBar_GSNotifyBeginCS) == 0x000008, "Wrong alignment on BANS_FBIK_StandBar_GSNotifyBeginCS");
//static_assert(sizeof(BANS_FBIK_StandBar_GSNotifyBeginCS) == 0x000048, "Wrong size on BANS_FBIK_StandBar_GSNotifyBeginCS");
//static_assert(offsetof(BANS_FBIK_StandBar_GSNotifyBeginCS, NotifyParam) == 0x000000, "Member 'BANS_FBIK_StandBar_GSNotifyBeginCS::NotifyParam' has a wrong offset!");
//static_assert(offsetof(BANS_FBIK_StandBar_GSNotifyBeginCS, TotalDuration) == 0x000040, "Member 'BANS_FBIK_StandBar_GSNotifyBeginCS::TotalDuration' has a wrong offset!");

// Function b1-Managed.BANS_FBIK_StandBar.GSNotifyTickCS
// 0x0048 (0x0048 - 0x0000)
struct BANS_FBIK_StandBar_GSNotifyTickCS final
{
public:
	struct FUStGSNotifyParam                      NotifyParam;                                       // 0x0000(0x0040)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
	float                                         FrameDeltaTime;                                    // 0x0040(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
//static_assert(alignof(BANS_FBIK_StandBar_GSNotifyTickCS) == 0x000008, "Wrong alignment on BANS_FBIK_StandBar_GSNotifyTickCS");
//static_assert(sizeof(BANS_FBIK_StandBar_GSNotifyTickCS) == 0x000048, "Wrong size on BANS_FBIK_StandBar_GSNotifyTickCS");
//static_assert(offsetof(BANS_FBIK_StandBar_GSNotifyTickCS, NotifyParam) == 0x000000, "Member 'BANS_FBIK_StandBar_GSNotifyTickCS::NotifyParam' has a wrong offset!");
//static_assert(offsetof(BANS_FBIK_StandBar_GSNotifyTickCS, FrameDeltaTime) == 0x000040, "Member 'BANS_FBIK_StandBar_GSNotifyTickCS::FrameDeltaTime' has a wrong offset!");

// Function b1-Managed.BANS_FBIK_StandBar.GSNotifyEndCS
// 0x0040 (0x0040 - 0x0000)
struct BANS_FBIK_StandBar_GSNotifyEndCS final
{
public:
	struct FUStGSNotifyParam                      NotifyParam;                                       // 0x0000(0x0040)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
//static_assert(alignof(BANS_FBIK_StandBar_GSNotifyEndCS) == 0x000008, "Wrong alignment on BANS_FBIK_StandBar_GSNotifyEndCS");
//static_assert(sizeof(BANS_FBIK_StandBar_GSNotifyEndCS) == 0x000040, "Wrong size on BANS_FBIK_StandBar_GSNotifyEndCS");
//static_assert(offsetof(BANS_FBIK_StandBar_GSNotifyEndCS, NotifyParam) == 0x000000, "Member 'BANS_FBIK_StandBar_GSNotifyEndCS::NotifyParam' has a wrong offset!");

// Function b1-Managed.BGUEnvironmentSurfaceEffectMgr.ReceiveEndPlay
// 0x0001 (0x0001 - 0x0000)
struct BGUEnvironmentSurfaceEffectMgr_ReceiveEndPlay final
{
public:
	EEndPlayReason                                EndPlayReason;                                     // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
//static_assert(alignof(BGUEnvironmentSurfaceEffectMgr_ReceiveEndPlay) == 0x000001, "Wrong alignment on BGUEnvironmentSurfaceEffectMgr_ReceiveEndPlay");
//static_assert(sizeof(BGUEnvironmentSurfaceEffectMgr_ReceiveEndPlay) == 0x000001, "Wrong size on BGUEnvironmentSurfaceEffectMgr_ReceiveEndPlay");
//static_assert(offsetof(BGUEnvironmentSurfaceEffectMgr_ReceiveEndPlay, EndPlayReason) == 0x000000, "Member 'BGUEnvironmentSurfaceEffectMgr_ReceiveEndPlay::EndPlayReason' has a wrong offset!");

// Function b1-Managed.BGUEnvironmentSurfaceEffectMgr.ReceiveTick
// 0x0004 (0x0004 - 0x0000)
struct BGUEnvironmentSurfaceEffectMgr_ReceiveTick final
{
public:
	float                                         DeltaSeconds;                                      // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
//static_assert(alignof(BGUEnvironmentSurfaceEffectMgr_ReceiveTick) == 0x000004, "Wrong alignment on BGUEnvironmentSurfaceEffectMgr_ReceiveTick");
//static_assert(sizeof(BGUEnvironmentSurfaceEffectMgr_ReceiveTick) == 0x000004, "Wrong size on BGUEnvironmentSurfaceEffectMgr_ReceiveTick");
//static_assert(offsetof(BGUEnvironmentSurfaceEffectMgr_ReceiveTick, DeltaSeconds) == 0x000000, "Member 'BGUEnvironmentSurfaceEffectMgr_ReceiveTick::DeltaSeconds' has a wrong offset!");

// Function b1-Managed.BUI_LoadingScreenPreview.OnSelectionChanged
// 0x0018 (0x0018 - 0x0000)
struct BUI_LoadingScreenPreview_OnSelectionChanged final
{
public:
	class FString                                 SelectedItem;                                      // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash)
	ESelectInfo                                   SelectionType;                                     // 0x0010(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
//static_assert(alignof(BUI_LoadingScreenPreview_OnSelectionChanged) == 0x000008, "Wrong alignment on BUI_LoadingScreenPreview_OnSelectionChanged");
//static_assert(sizeof(BUI_LoadingScreenPreview_OnSelectionChanged) == 0x000018, "Wrong size on BUI_LoadingScreenPreview_OnSelectionChanged");
//static_assert(offsetof(BUI_LoadingScreenPreview_OnSelectionChanged, SelectedItem) == 0x000000, "Member 'BUI_LoadingScreenPreview_OnSelectionChanged::SelectedItem' has a wrong offset!");
//static_assert(offsetof(BUI_LoadingScreenPreview_OnSelectionChanged, SelectionType) == 0x000010, "Member 'BUI_LoadingScreenPreview_OnSelectionChanged::SelectionType' has a wrong offset!");

// Function b1-Managed.BUI_LoadingScreenPreview.OnTextCommitted
// 0x0020 (0x0020 - 0x0000)
struct BUI_LoadingScreenPreview_OnTextCommitted final
{
public:
	class FText                                   Text;                                              // 0x0000(0x0018)(Parm)
	ETextCommit                                   CommitMethod;                                      // 0x0018(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
//static_assert(alignof(BUI_LoadingScreenPreview_OnTextCommitted) == 0x000008, "Wrong alignment on BUI_LoadingScreenPreview_OnTextCommitted");
//static_assert(sizeof(BUI_LoadingScreenPreview_OnTextCommitted) == 0x000020, "Wrong size on BUI_LoadingScreenPreview_OnTextCommitted");
//static_assert(offsetof(BUI_LoadingScreenPreview_OnTextCommitted, Text) == 0x000000, "Member 'BUI_LoadingScreenPreview_OnTextCommitted::Text' has a wrong offset!");
//static_assert(offsetof(BUI_LoadingScreenPreview_OnTextCommitted, CommitMethod) == 0x000018, "Member 'BUI_LoadingScreenPreview_OnTextCommitted::CommitMethod' has a wrong offset!");

// Function b1-Managed.BGW_OnlineActivity.OnResetAllActiveActivitiesCompleteCS
// 0x0001 (0x0001 - 0x0000)
struct BGW_OnlineActivity_OnResetAllActiveActivitiesCompleteCS final
{
public:
	uint8                                         bWasSuccessful : 1;                                // 0x0000(0x0001)(BitIndex: 0x00, PropSize: 0x0001 (Parm, NoDestructor, HasGetValueTypeHash))
};
//static_assert(alignof(BGW_OnlineActivity_OnResetAllActiveActivitiesCompleteCS) == 0x000001, "Wrong alignment on BGW_OnlineActivity_OnResetAllActiveActivitiesCompleteCS");
//static_assert(sizeof(BGW_OnlineActivity_OnResetAllActiveActivitiesCompleteCS) == 0x000001, "Wrong size on BGW_OnlineActivity_OnResetAllActiveActivitiesCompleteCS");

// Function b1-Managed.BGW_OnlineActivity.OnSetActivityAvailabilityCompleteCS
// 0x0001 (0x0001 - 0x0000)
struct BGW_OnlineActivity_OnSetActivityAvailabilityCompleteCS final
{
public:
	uint8                                         bWasSuccessful : 1;                                // 0x0000(0x0001)(BitIndex: 0x00, PropSize: 0x0001 (Parm, NoDestructor, HasGetValueTypeHash))
};
//static_assert(alignof(BGW_OnlineActivity_OnSetActivityAvailabilityCompleteCS) == 0x000001, "Wrong alignment on BGW_OnlineActivity_OnSetActivityAvailabilityCompleteCS");
//static_assert(sizeof(BGW_OnlineActivity_OnSetActivityAvailabilityCompleteCS) == 0x000001, "Wrong size on BGW_OnlineActivity_OnSetActivityAvailabilityCompleteCS");

// Function b1-Managed.BGW_OnlineActivity.OnGameActivityActivationCompleteCS
// 0x0020 (0x0020 - 0x0000)
struct BGW_OnlineActivity_OnGameActivityActivationCompleteCS final
{
public:
	class FString                                 SActivityId;                                       // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash)
	class FString                                 SSessionStr;                                       // 0x0010(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash)
};
//static_assert(alignof(BGW_OnlineActivity_OnGameActivityActivationCompleteCS) == 0x000008, "Wrong alignment on BGW_OnlineActivity_OnGameActivityActivationCompleteCS");
//static_assert(sizeof(BGW_OnlineActivity_OnGameActivityActivationCompleteCS) == 0x000020, "Wrong size on BGW_OnlineActivity_OnGameActivityActivationCompleteCS");
//static_assert(offsetof(BGW_OnlineActivity_OnGameActivityActivationCompleteCS, SActivityId) == 0x000000, "Member 'BGW_OnlineActivity_OnGameActivityActivationCompleteCS::SActivityId' has a wrong offset!");
//static_assert(offsetof(BGW_OnlineActivity_OnGameActivityActivationCompleteCS, SSessionStr) == 0x000010, "Member 'BGW_OnlineActivity_OnGameActivityActivationCompleteCS::SSessionStr' has a wrong offset!");

// Function b1-Managed.BGW_OnlineActivity.OnSetActivityPriorityCompleteCS
// 0x0001 (0x0001 - 0x0000)
struct BGW_OnlineActivity_OnSetActivityPriorityCompleteCS final
{
public:
	uint8                                         bWasSuccessful : 1;                                // 0x0000(0x0001)(BitIndex: 0x00, PropSize: 0x0001 (Parm, NoDestructor, HasGetValueTypeHash))
};
//static_assert(alignof(BGW_OnlineActivity_OnSetActivityPriorityCompleteCS) == 0x000001, "Wrong alignment on BGW_OnlineActivity_OnSetActivityPriorityCompleteCS");
//static_assert(sizeof(BGW_OnlineActivity_OnSetActivityPriorityCompleteCS) == 0x000001, "Wrong size on BGW_OnlineActivity_OnSetActivityPriorityCompleteCS");

// Function b1-Managed.BGW_OnlineActivity.OnResumeActivityCompleteCS
// 0x0001 (0x0001 - 0x0000)
struct BGW_OnlineActivity_OnResumeActivityCompleteCS final
{
public:
	uint8                                         bWasSuccessful : 1;                                // 0x0000(0x0001)(BitIndex: 0x00, PropSize: 0x0001 (Parm, NoDestructor, HasGetValueTypeHash))
};
//static_assert(alignof(BGW_OnlineActivity_OnResumeActivityCompleteCS) == 0x000001, "Wrong alignment on BGW_OnlineActivity_OnResumeActivityCompleteCS");
//static_assert(sizeof(BGW_OnlineActivity_OnResumeActivityCompleteCS) == 0x000001, "Wrong size on BGW_OnlineActivity_OnResumeActivityCompleteCS");

// Function b1-Managed.BGW_OnlineActivity.OnStartActivityCompleteCS
// 0x0001 (0x0001 - 0x0000)
struct BGW_OnlineActivity_OnStartActivityCompleteCS final
{
public:
	uint8                                         bWasSuccessful : 1;                                // 0x0000(0x0001)(BitIndex: 0x00, PropSize: 0x0001 (Parm, NoDestructor, HasGetValueTypeHash))
};
//static_assert(alignof(BGW_OnlineActivity_OnStartActivityCompleteCS) == 0x000001, "Wrong alignment on BGW_OnlineActivity_OnStartActivityCompleteCS");
//static_assert(sizeof(BGW_OnlineActivity_OnStartActivityCompleteCS) == 0x000001, "Wrong size on BGW_OnlineActivity_OnStartActivityCompleteCS");

// Function b1-Managed.BGW_OnlineActivity.OnEndActivityCompleteCS
// 0x0001 (0x0001 - 0x0000)
struct BGW_OnlineActivity_OnEndActivityCompleteCS final
{
public:
	uint8                                         bWasSuccessful : 1;                                // 0x0000(0x0001)(BitIndex: 0x00, PropSize: 0x0001 (Parm, NoDestructor, HasGetValueTypeHash))
};
//static_assert(alignof(BGW_OnlineActivity_OnEndActivityCompleteCS) == 0x000001, "Wrong alignment on BGW_OnlineActivity_OnEndActivityCompleteCS");
//static_assert(sizeof(BGW_OnlineActivity_OnEndActivityCompleteCS) == 0x000001, "Wrong size on BGW_OnlineActivity_OnEndActivityCompleteCS");

// Function b1-Managed.BGW_OnlineCloud.OnWriteUserCloudFileCompleteCS
// 0x0018 (0x0018 - 0x0000)
struct BGW_OnlineCloud_OnWriteUserCloudFileCompleteCS final
{
public:
	class FString                                 Filename;                                          // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash)
	uint8                                         bWasSuccessful : 1;                                // 0x0010(0x0001)(BitIndex: 0x00, PropSize: 0x0001 (Parm, NoDestructor, HasGetValueTypeHash))
};
//static_assert(alignof(BGW_OnlineCloud_OnWriteUserCloudFileCompleteCS) == 0x000008, "Wrong alignment on BGW_OnlineCloud_OnWriteUserCloudFileCompleteCS");
//static_assert(sizeof(BGW_OnlineCloud_OnWriteUserCloudFileCompleteCS) == 0x000018, "Wrong size on BGW_OnlineCloud_OnWriteUserCloudFileCompleteCS");
//static_assert(offsetof(BGW_OnlineCloud_OnWriteUserCloudFileCompleteCS, Filename) == 0x000000, "Member 'BGW_OnlineCloud_OnWriteUserCloudFileCompleteCS::Filename' has a wrong offset!");

// Function b1-Managed.BGW_OnlineCloud.OnEnumerateUserFilesCompleteCS
// 0x0001 (0x0001 - 0x0000)
struct BGW_OnlineCloud_OnEnumerateUserFilesCompleteCS final
{
public:
	uint8                                         bWasSuccessful : 1;                                // 0x0000(0x0001)(BitIndex: 0x00, PropSize: 0x0001 (Parm, NoDestructor, HasGetValueTypeHash))
};
//static_assert(alignof(BGW_OnlineCloud_OnEnumerateUserFilesCompleteCS) == 0x000001, "Wrong alignment on BGW_OnlineCloud_OnEnumerateUserFilesCompleteCS");
//static_assert(sizeof(BGW_OnlineCloud_OnEnumerateUserFilesCompleteCS) == 0x000001, "Wrong size on BGW_OnlineCloud_OnEnumerateUserFilesCompleteCS");

// Function b1-Managed.BGW_OnlineCloud.OnDeleteUserFilesCompleteCS
// 0x0018 (0x0018 - 0x0000)
struct BGW_OnlineCloud_OnDeleteUserFilesCompleteCS final
{
public:
	class FString                                 Filename;                                          // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash)
	uint8                                         bWasSuccessful : 1;                                // 0x0010(0x0001)(BitIndex: 0x00, PropSize: 0x0001 (Parm, NoDestructor, HasGetValueTypeHash))
};
//static_assert(alignof(BGW_OnlineCloud_OnDeleteUserFilesCompleteCS) == 0x000008, "Wrong alignment on BGW_OnlineCloud_OnDeleteUserFilesCompleteCS");
//static_assert(sizeof(BGW_OnlineCloud_OnDeleteUserFilesCompleteCS) == 0x000018, "Wrong size on BGW_OnlineCloud_OnDeleteUserFilesCompleteCS");
//static_assert(offsetof(BGW_OnlineCloud_OnDeleteUserFilesCompleteCS, Filename) == 0x000000, "Member 'BGW_OnlineCloud_OnDeleteUserFilesCompleteCS::Filename' has a wrong offset!");

// Function b1-Managed.BGW_OnlineCloud.OnReadUserFilesCompleteCS
// 0x0018 (0x0018 - 0x0000)
struct BGW_OnlineCloud_OnReadUserFilesCompleteCS final
{
public:
	class FString                                 Filename;                                          // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash)
	uint8                                         bWasSuccessful : 1;                                // 0x0010(0x0001)(BitIndex: 0x00, PropSize: 0x0001 (Parm, NoDestructor, HasGetValueTypeHash))
};
//static_assert(alignof(BGW_OnlineCloud_OnReadUserFilesCompleteCS) == 0x000008, "Wrong alignment on BGW_OnlineCloud_OnReadUserFilesCompleteCS");
//static_assert(sizeof(BGW_OnlineCloud_OnReadUserFilesCompleteCS) == 0x000018, "Wrong size on BGW_OnlineCloud_OnReadUserFilesCompleteCS");
//static_assert(offsetof(BGW_OnlineCloud_OnReadUserFilesCompleteCS, Filename) == 0x000000, "Member 'BGW_OnlineCloud_OnReadUserFilesCompleteCS::Filename' has a wrong offset!");

// Function b1-Managed.BGW_OnlineIdentity.OnGetUserPrivilegeCompleteCS
// 0x0002 (0x0002 - 0x0000)
struct BGW_OnlineIdentity_OnGetUserPrivilegeCompleteCS final
{
public:
	EBGWUserPrivileges                            Privilege;                                         // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	EBGWPrivilegeResult                           PrivilegeResult;                                   // 0x0001(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
//static_assert(alignof(BGW_OnlineIdentity_OnGetUserPrivilegeCompleteCS) == 0x000001, "Wrong alignment on BGW_OnlineIdentity_OnGetUserPrivilegeCompleteCS");
//static_assert(sizeof(BGW_OnlineIdentity_OnGetUserPrivilegeCompleteCS) == 0x000002, "Wrong size on BGW_OnlineIdentity_OnGetUserPrivilegeCompleteCS");
//static_assert(offsetof(BGW_OnlineIdentity_OnGetUserPrivilegeCompleteCS, Privilege) == 0x000000, "Member 'BGW_OnlineIdentity_OnGetUserPrivilegeCompleteCS::Privilege' has a wrong offset!");
//static_assert(offsetof(BGW_OnlineIdentity_OnGetUserPrivilegeCompleteCS, PrivilegeResult) == 0x000001, "Member 'BGW_OnlineIdentity_OnGetUserPrivilegeCompleteCS::PrivilegeResult' has a wrong offset!");

// Function b1-Managed.BGW_OnlineIdentity.OnRecvAntiAddictionActionCS
// 0x0010 (0x0010 - 0x0000)
struct BGW_OnlineIdentity_OnRecvAntiAddictionActionCS final
{
public:
	class FString                                 RecvActionsJsonStr;                                // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash)
};
//static_assert(alignof(BGW_OnlineIdentity_OnRecvAntiAddictionActionCS) == 0x000008, "Wrong alignment on BGW_OnlineIdentity_OnRecvAntiAddictionActionCS");
//static_assert(sizeof(BGW_OnlineIdentity_OnRecvAntiAddictionActionCS) == 0x000010, "Wrong size on BGW_OnlineIdentity_OnRecvAntiAddictionActionCS");
//static_assert(offsetof(BGW_OnlineIdentity_OnRecvAntiAddictionActionCS, RecvActionsJsonStr) == 0x000000, "Member 'BGW_OnlineIdentity_OnRecvAntiAddictionActionCS::RecvActionsJsonStr' has a wrong offset!");

// Function b1-Managed.BGW_OnlineIdentity.OnLoginCompletedCS
// 0x0001 (0x0001 - 0x0000)
struct BGW_OnlineIdentity_OnLoginCompletedCS final
{
public:
	uint8                                         bSuccessful : 1;                                   // 0x0000(0x0001)(BitIndex: 0x00, PropSize: 0x0001 (Parm, NoDestructor, HasGetValueTypeHash))
};
//static_assert(alignof(BGW_OnlineIdentity_OnLoginCompletedCS) == 0x000001, "Wrong alignment on BGW_OnlineIdentity_OnLoginCompletedCS");
//static_assert(sizeof(BGW_OnlineIdentity_OnLoginCompletedCS) == 0x000001, "Wrong size on BGW_OnlineIdentity_OnLoginCompletedCS");

// Function b1-Managed.BGW_OnlineSession.OnSessionUserInviteAcceptedCS
// 0x0001 (0x0001 - 0x0000)
struct BGW_OnlineSession_OnSessionUserInviteAcceptedCS final
{
public:
	uint8                                         bWasSuccess : 1;                                   // 0x0000(0x0001)(BitIndex: 0x00, PropSize: 0x0001 (Parm, NoDestructor, HasGetValueTypeHash))
};
//static_assert(alignof(BGW_OnlineSession_OnSessionUserInviteAcceptedCS) == 0x000001, "Wrong alignment on BGW_OnlineSession_OnSessionUserInviteAcceptedCS");
//static_assert(sizeof(BGW_OnlineSession_OnSessionUserInviteAcceptedCS) == 0x000001, "Wrong size on BGW_OnlineSession_OnSessionUserInviteAcceptedCS");

// Function b1-Managed.BGW_OnlineSession.OnFindSessionByIdCompleteCS
// 0x0001 (0x0001 - 0x0000)
struct BGW_OnlineSession_OnFindSessionByIdCompleteCS final
{
public:
	uint8                                         Success : 1;                                       // 0x0000(0x0001)(BitIndex: 0x00, PropSize: 0x0001 (Parm, NoDestructor, HasGetValueTypeHash))
};
//static_assert(alignof(BGW_OnlineSession_OnFindSessionByIdCompleteCS) == 0x000001, "Wrong alignment on BGW_OnlineSession_OnFindSessionByIdCompleteCS");
//static_assert(sizeof(BGW_OnlineSession_OnFindSessionByIdCompleteCS) == 0x000001, "Wrong size on BGW_OnlineSession_OnFindSessionByIdCompleteCS");

// Function b1-Managed.BGW_OnlineSession.OnDestroySessionCompleteCS
// 0x0002 (0x0002 - 0x0000)
struct BGW_OnlineSession_OnDestroySessionCompleteCS final
{
public:
	EBGWOnlineSessionType                         SessionType;                                       // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Success : 1;                                       // 0x0001(0x0001)(BitIndex: 0x00, PropSize: 0x0001 (Parm, NoDestructor, HasGetValueTypeHash))
};
//static_assert(alignof(BGW_OnlineSession_OnDestroySessionCompleteCS) == 0x000001, "Wrong alignment on BGW_OnlineSession_OnDestroySessionCompleteCS");
//static_assert(sizeof(BGW_OnlineSession_OnDestroySessionCompleteCS) == 0x000002, "Wrong size on BGW_OnlineSession_OnDestroySessionCompleteCS");
//static_assert(offsetof(BGW_OnlineSession_OnDestroySessionCompleteCS, SessionType) == 0x000000, "Member 'BGW_OnlineSession_OnDestroySessionCompleteCS::SessionType' has a wrong offset!");

// Function b1-Managed.BGW_OnlineSession.OnSearchSessionsCompleteCS
// 0x0001 (0x0001 - 0x0000)
struct BGW_OnlineSession_OnSearchSessionsCompleteCS final
{
public:
	uint8                                         Success : 1;                                       // 0x0000(0x0001)(BitIndex: 0x00, PropSize: 0x0001 (Parm, NoDestructor, HasGetValueTypeHash))
};
//static_assert(alignof(BGW_OnlineSession_OnSearchSessionsCompleteCS) == 0x000001, "Wrong alignment on BGW_OnlineSession_OnSearchSessionsCompleteCS");
//static_assert(sizeof(BGW_OnlineSession_OnSearchSessionsCompleteCS) == 0x000001, "Wrong size on BGW_OnlineSession_OnSearchSessionsCompleteCS");

// Function b1-Managed.BGW_OnlineSession.OnCreateSessionCompleteCS
// 0x0001 (0x0001 - 0x0000)
struct BGW_OnlineSession_OnCreateSessionCompleteCS final
{
public:
	uint8                                         Success : 1;                                       // 0x0000(0x0001)(BitIndex: 0x00, PropSize: 0x0001 (Parm, NoDestructor, HasGetValueTypeHash))
};
//static_assert(alignof(BGW_OnlineSession_OnCreateSessionCompleteCS) == 0x000001, "Wrong alignment on BGW_OnlineSession_OnCreateSessionCompleteCS");
//static_assert(sizeof(BGW_OnlineSession_OnCreateSessionCompleteCS) == 0x000001, "Wrong size on BGW_OnlineSession_OnCreateSessionCompleteCS");

// Function b1-Managed.BGW_OnlineSession.OnJoinSessionCompleteCS
// 0x0001 (0x0001 - 0x0000)
struct BGW_OnlineSession_OnJoinSessionCompleteCS final
{
public:
	EBGWJoinSessionResult                         Result;                                            // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
//static_assert(alignof(BGW_OnlineSession_OnJoinSessionCompleteCS) == 0x000001, "Wrong alignment on BGW_OnlineSession_OnJoinSessionCompleteCS");
//static_assert(sizeof(BGW_OnlineSession_OnJoinSessionCompleteCS) == 0x000001, "Wrong size on BGW_OnlineSession_OnJoinSessionCompleteCS");
//static_assert(offsetof(BGW_OnlineSession_OnJoinSessionCompleteCS, Result) == 0x000000, "Member 'BGW_OnlineSession_OnJoinSessionCompleteCS::Result' has a wrong offset!");

// Function b1-Managed.BAN_GSSetCustomDepthStencil.GSNotifyCS
// 0x0040 (0x0040 - 0x0000)
struct BAN_GSSetCustomDepthStencil_GSNotifyCS final
{
public:
	struct FUStGSNotifyParam                      NotifyParam;                                       // 0x0000(0x0040)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
//static_assert(alignof(BAN_GSSetCustomDepthStencil_GSNotifyCS) == 0x000008, "Wrong alignment on BAN_GSSetCustomDepthStencil_GSNotifyCS");
//static_assert(sizeof(BAN_GSSetCustomDepthStencil_GSNotifyCS) == 0x000040, "Wrong size on BAN_GSSetCustomDepthStencil_GSNotifyCS");
//static_assert(offsetof(BAN_GSSetCustomDepthStencil_GSNotifyCS, NotifyParam) == 0x000000, "Member 'BAN_GSSetCustomDepthStencil_GSNotifyCS::NotifyParam' has a wrong offset!");

// Function b1-Managed.BED_MovieNode_ManipulateStreamingSource.GetNodeDescriptionInCS
// 0x0010 (0x0010 - 0x0000)
struct BED_MovieNode_ManipulateStreamingSource_GetNodeDescriptionInCS final
{
public:
	class FString                                 ReturnValue;                                       // 0x0000(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash)
};
//static_assert(alignof(BED_MovieNode_ManipulateStreamingSource_GetNodeDescriptionInCS) == 0x000008, "Wrong alignment on BED_MovieNode_ManipulateStreamingSource_GetNodeDescriptionInCS");
//static_assert(sizeof(BED_MovieNode_ManipulateStreamingSource_GetNodeDescriptionInCS) == 0x000010, "Wrong size on BED_MovieNode_ManipulateStreamingSource_GetNodeDescriptionInCS");
//static_assert(offsetof(BED_MovieNode_ManipulateStreamingSource_GetNodeDescriptionInCS, ReturnValue) == 0x000000, "Member 'BED_MovieNode_ManipulateStreamingSource_GetNodeDescriptionInCS::ReturnValue' has a wrong offset!");

// Function b1-Managed.BANS_GSAttackState.GSOnSectionManuallyChanged
// 0x0010 (0x0010 - 0x0000)
struct BANS_GSAttackState_GSOnSectionManuallyChanged final
{
public:
	class ABGUCharacter*                          OwnerChar;                                         // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         RemainingDuration;                                 // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
//static_assert(alignof(BANS_GSAttackState_GSOnSectionManuallyChanged) == 0x000008, "Wrong alignment on BANS_GSAttackState_GSOnSectionManuallyChanged");
//static_assert(sizeof(BANS_GSAttackState_GSOnSectionManuallyChanged) == 0x000010, "Wrong size on BANS_GSAttackState_GSOnSectionManuallyChanged");
//static_assert(offsetof(BANS_GSAttackState_GSOnSectionManuallyChanged, OwnerChar) == 0x000000, "Member 'BANS_GSAttackState_GSOnSectionManuallyChanged::OwnerChar' has a wrong offset!");
//static_assert(offsetof(BANS_GSAttackState_GSOnSectionManuallyChanged, RemainingDuration) == 0x000008, "Member 'BANS_GSAttackState_GSOnSectionManuallyChanged::RemainingDuration' has a wrong offset!");

// Function b1-Managed.BANS_GSAttackState.GSAllowCrossSection
// 0x0001 (0x0001 - 0x0000)
struct BANS_GSAttackState_GSAllowCrossSection final
{
public:
	uint8                                         ReturnValue : 1;                                   // 0x0000(0x0001)(BitIndex: 0x00, PropSize: 0x0001 (Parm, OutParm, ReturnParm, NoDestructor, HasGetValueTypeHash))
};
//static_assert(alignof(BANS_GSAttackState_GSAllowCrossSection) == 0x000001, "Wrong alignment on BANS_GSAttackState_GSAllowCrossSection");
//static_assert(sizeof(BANS_GSAttackState_GSAllowCrossSection) == 0x000001, "Wrong size on BANS_GSAttackState_GSAllowCrossSection");

// Function b1-Managed.BANS_GSAttackState.GSNotifyBeginCS
// 0x0048 (0x0048 - 0x0000)
struct BANS_GSAttackState_GSNotifyBeginCS final
{
public:
	struct FUStGSNotifyParam                      NotifyParam;                                       // 0x0000(0x0040)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
	float                                         TotalDuration;                                     // 0x0040(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
//static_assert(alignof(BANS_GSAttackState_GSNotifyBeginCS) == 0x000008, "Wrong alignment on BANS_GSAttackState_GSNotifyBeginCS");
//static_assert(sizeof(BANS_GSAttackState_GSNotifyBeginCS) == 0x000048, "Wrong size on BANS_GSAttackState_GSNotifyBeginCS");
//static_assert(offsetof(BANS_GSAttackState_GSNotifyBeginCS, NotifyParam) == 0x000000, "Member 'BANS_GSAttackState_GSNotifyBeginCS::NotifyParam' has a wrong offset!");
//static_assert(offsetof(BANS_GSAttackState_GSNotifyBeginCS, TotalDuration) == 0x000040, "Member 'BANS_GSAttackState_GSNotifyBeginCS::TotalDuration' has a wrong offset!");

// Function b1-Managed.BANS_GSAttackState.GSNotifyEndCS
// 0x0040 (0x0040 - 0x0000)
struct BANS_GSAttackState_GSNotifyEndCS final
{
public:
	struct FUStGSNotifyParam                      NotifyParam;                                       // 0x0000(0x0040)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
//static_assert(alignof(BANS_GSAttackState_GSNotifyEndCS) == 0x000008, "Wrong alignment on BANS_GSAttackState_GSNotifyEndCS");
//static_assert(sizeof(BANS_GSAttackState_GSNotifyEndCS) == 0x000040, "Wrong size on BANS_GSAttackState_GSNotifyEndCS");
//static_assert(offsetof(BANS_GSAttackState_GSNotifyEndCS, NotifyParam) == 0x000000, "Member 'BANS_GSAttackState_GSNotifyEndCS::NotifyParam' has a wrong offset!");

// Function b1-Managed.BED_ProcessMachineNode_ReportOSS.GetNodeDescriptionInCS
// 0x0010 (0x0010 - 0x0000)
struct BED_ProcessMachineNode_ReportOSS_GetNodeDescriptionInCS final
{
public:
	class FString                                 ReturnValue;                                       // 0x0000(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash)
};
//static_assert(alignof(BED_ProcessMachineNode_ReportOSS_GetNodeDescriptionInCS) == 0x000008, "Wrong alignment on BED_ProcessMachineNode_ReportOSS_GetNodeDescriptionInCS");
//static_assert(sizeof(BED_ProcessMachineNode_ReportOSS_GetNodeDescriptionInCS) == 0x000010, "Wrong size on BED_ProcessMachineNode_ReportOSS_GetNodeDescriptionInCS");
//static_assert(offsetof(BED_ProcessMachineNode_ReportOSS_GetNodeDescriptionInCS, ReturnValue) == 0x000000, "Member 'BED_ProcessMachineNode_ReportOSS_GetNodeDescriptionInCS::ReturnValue' has a wrong offset!");

// Function b1-Managed.BED_QuestNode_ChallengeSuccess.GetNodeDescriptionInCS
// 0x0010 (0x0010 - 0x0000)
struct BED_QuestNode_ChallengeSuccess_GetNodeDescriptionInCS final
{
public:
	class FString                                 ReturnValue;                                       // 0x0000(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash)
};
//static_assert(alignof(BED_QuestNode_ChallengeSuccess_GetNodeDescriptionInCS) == 0x000008, "Wrong alignment on BED_QuestNode_ChallengeSuccess_GetNodeDescriptionInCS");
//static_assert(sizeof(BED_QuestNode_ChallengeSuccess_GetNodeDescriptionInCS) == 0x000010, "Wrong size on BED_QuestNode_ChallengeSuccess_GetNodeDescriptionInCS");
//static_assert(offsetof(BED_QuestNode_ChallengeSuccess_GetNodeDescriptionInCS, ReturnValue) == 0x000000, "Member 'BED_QuestNode_ChallengeSuccess_GetNodeDescriptionInCS::ReturnValue' has a wrong offset!");

// Function b1-Managed.BED_QuestNode_SetInteractState.GetNodeDescriptionInCS
// 0x0010 (0x0010 - 0x0000)
struct BED_QuestNode_SetInteractState_GetNodeDescriptionInCS final
{
public:
	class FString                                 ReturnValue;                                       // 0x0000(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash)
};
//static_assert(alignof(BED_QuestNode_SetInteractState_GetNodeDescriptionInCS) == 0x000008, "Wrong alignment on BED_QuestNode_SetInteractState_GetNodeDescriptionInCS");
//static_assert(sizeof(BED_QuestNode_SetInteractState_GetNodeDescriptionInCS) == 0x000010, "Wrong size on BED_QuestNode_SetInteractState_GetNodeDescriptionInCS");
//static_assert(offsetof(BED_QuestNode_SetInteractState_GetNodeDescriptionInCS, ReturnValue) == 0x000000, "Member 'BED_QuestNode_SetInteractState_GetNodeDescriptionInCS::ReturnValue' has a wrong offset!");

// Function b1-Managed.BED_QuestNode_StopWaveSpawnByChallenge.GetNodeDescriptionInCS
// 0x0010 (0x0010 - 0x0000)
struct BED_QuestNode_StopWaveSpawnByChallenge_GetNodeDescriptionInCS final
{
public:
	class FString                                 ReturnValue;                                       // 0x0000(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash)
};
//static_assert(alignof(BED_QuestNode_StopWaveSpawnByChallenge_GetNodeDescriptionInCS) == 0x000008, "Wrong alignment on BED_QuestNode_StopWaveSpawnByChallenge_GetNodeDescriptionInCS");
//static_assert(sizeof(BED_QuestNode_StopWaveSpawnByChallenge_GetNodeDescriptionInCS) == 0x000010, "Wrong size on BED_QuestNode_StopWaveSpawnByChallenge_GetNodeDescriptionInCS");
//static_assert(offsetof(BED_QuestNode_StopWaveSpawnByChallenge_GetNodeDescriptionInCS, ReturnValue) == 0x000000, "Member 'BED_QuestNode_StopWaveSpawnByChallenge_GetNodeDescriptionInCS::ReturnValue' has a wrong offset!");

// Function b1-Managed.BED_BehaviorNode_BeHurt.GetNodeDescriptionInCS
// 0x0010 (0x0010 - 0x0000)
struct BED_BehaviorNode_BeHurt_GetNodeDescriptionInCS final
{
public:
	class FString                                 ReturnValue;                                       // 0x0000(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash)
};
//static_assert(alignof(BED_BehaviorNode_BeHurt_GetNodeDescriptionInCS) == 0x000008, "Wrong alignment on BED_BehaviorNode_BeHurt_GetNodeDescriptionInCS");
//static_assert(sizeof(BED_BehaviorNode_BeHurt_GetNodeDescriptionInCS) == 0x000010, "Wrong size on BED_BehaviorNode_BeHurt_GetNodeDescriptionInCS");
//static_assert(offsetof(BED_BehaviorNode_BeHurt_GetNodeDescriptionInCS, ReturnValue) == 0x000000, "Member 'BED_BehaviorNode_BeHurt_GetNodeDescriptionInCS::ReturnValue' has a wrong offset!");

// Function b1-Managed.BED_BehaviorNode_BeHurt.IsSupportViewType
// 0x0002 (0x0002 - 0x0000)
struct BED_BehaviorNode_BeHurt_IsSupportViewType final
{
public:
	ECalliopeViewType                             InViewType;                                        // 0x0000(0x0001)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         ReturnValue : 1;                                   // 0x0001(0x0001)(BitIndex: 0x00, PropSize: 0x0001 (Parm, OutParm, ReturnParm, NoDestructor, HasGetValueTypeHash))
};
//static_assert(alignof(BED_BehaviorNode_BeHurt_IsSupportViewType) == 0x000001, "Wrong alignment on BED_BehaviorNode_BeHurt_IsSupportViewType");
//static_assert(sizeof(BED_BehaviorNode_BeHurt_IsSupportViewType) == 0x000002, "Wrong size on BED_BehaviorNode_BeHurt_IsSupportViewType");
//static_assert(offsetof(BED_BehaviorNode_BeHurt_IsSupportViewType, InViewType) == 0x000000, "Member 'BED_BehaviorNode_BeHurt_IsSupportViewType::InViewType' has a wrong offset!");

// Function b1-Managed.BED_ProcessStateNode_ObserveRoleData.GetNodeDescriptionInCS
// 0x0010 (0x0010 - 0x0000)
struct BED_ProcessStateNode_ObserveRoleData_GetNodeDescriptionInCS final
{
public:
	class FString                                 ReturnValue;                                       // 0x0000(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash)
};
//static_assert(alignof(BED_ProcessStateNode_ObserveRoleData_GetNodeDescriptionInCS) == 0x000008, "Wrong alignment on BED_ProcessStateNode_ObserveRoleData_GetNodeDescriptionInCS");
//static_assert(sizeof(BED_ProcessStateNode_ObserveRoleData_GetNodeDescriptionInCS) == 0x000010, "Wrong size on BED_ProcessStateNode_ObserveRoleData_GetNodeDescriptionInCS");
//static_assert(offsetof(BED_ProcessStateNode_ObserveRoleData_GetNodeDescriptionInCS, ReturnValue) == 0x000000, "Member 'BED_ProcessStateNode_ObserveRoleData_GetNodeDescriptionInCS::ReturnValue' has a wrong offset!");

// Function b1-Managed.BANS_GSCallMultiPointsRegister.GSNotifyBeginCS
// 0x0048 (0x0048 - 0x0000)
struct BANS_GSCallMultiPointsRegister_GSNotifyBeginCS final
{
public:
	struct FUStGSNotifyParam                      NotifyParam;                                       // 0x0000(0x0040)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
	float                                         TotalDuration;                                     // 0x0040(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
//static_assert(alignof(BANS_GSCallMultiPointsRegister_GSNotifyBeginCS) == 0x000008, "Wrong alignment on BANS_GSCallMultiPointsRegister_GSNotifyBeginCS");
//static_assert(sizeof(BANS_GSCallMultiPointsRegister_GSNotifyBeginCS) == 0x000048, "Wrong size on BANS_GSCallMultiPointsRegister_GSNotifyBeginCS");
//static_assert(offsetof(BANS_GSCallMultiPointsRegister_GSNotifyBeginCS, NotifyParam) == 0x000000, "Member 'BANS_GSCallMultiPointsRegister_GSNotifyBeginCS::NotifyParam' has a wrong offset!");
//static_assert(offsetof(BANS_GSCallMultiPointsRegister_GSNotifyBeginCS, TotalDuration) == 0x000040, "Member 'BANS_GSCallMultiPointsRegister_GSNotifyBeginCS::TotalDuration' has a wrong offset!");

// Function b1-Managed.GSImage.SetCommParams
// 0x0060 (0x0060 - 0x0000)
struct GSImage_SetCommParams final
{
public:
	struct FMatCommParams                         InCommParams;                                      // 0x0000(0x0060)(Parm, NoDestructor, HasGetValueTypeHash)
};
//static_assert(alignof(GSImage_SetCommParams) == 0x000008, "Wrong alignment on GSImage_SetCommParams");
//static_assert(sizeof(GSImage_SetCommParams) == 0x000060, "Wrong size on GSImage_SetCommParams");
//static_assert(offsetof(GSImage_SetCommParams, InCommParams) == 0x000000, "Member 'GSImage_SetCommParams::InCommParams' has a wrong offset!");

// Function b1-Managed.GSImage.SetUseTimer
// 0x0001 (0x0001 - 0x0000)
struct GSImage_SetUseTimer final
{
public:
	uint8                                         InUseTimer : 1;                                    // 0x0000(0x0001)(BitIndex: 0x00, PropSize: 0x0001 (Parm, NoDestructor, HasGetValueTypeHash))
};
//static_assert(alignof(GSImage_SetUseTimer) == 0x000001, "Wrong alignment on GSImage_SetUseTimer");
//static_assert(sizeof(GSImage_SetUseTimer) == 0x000001, "Wrong size on GSImage_SetUseTimer");

// Function b1-Managed.GSScrollBox.OnMouseEnter
// 0x00D0 (0x00D0 - 0x0000)
struct GSScrollBox_OnMouseEnter final
{
public:
	struct FGeometry                              MyGeometry;                                        // 0x0000(0x0040)(Parm, IsPlainOldData, NoDestructor)
	struct FPointerEvent                          MouseEvent;                                        // 0x0040(0x0090)(ConstParm, Parm, OutParm, ReferenceParm)
};
//static_assert(alignof(GSScrollBox_OnMouseEnter) == 0x000008, "Wrong alignment on GSScrollBox_OnMouseEnter");
//static_assert(sizeof(GSScrollBox_OnMouseEnter) == 0x0000D0, "Wrong size on GSScrollBox_OnMouseEnter");
//static_assert(offsetof(GSScrollBox_OnMouseEnter, MyGeometry) == 0x000000, "Member 'GSScrollBox_OnMouseEnter::MyGeometry' has a wrong offset!");
//static_assert(offsetof(GSScrollBox_OnMouseEnter, MouseEvent) == 0x000040, "Member 'GSScrollBox_OnMouseEnter::MouseEvent' has a wrong offset!");

// Function b1-Managed.GSScrollBox.OnMouseLeave
// 0x0090 (0x0090 - 0x0000)
struct GSScrollBox_OnMouseLeave final
{
public:
	struct FPointerEvent                          MouseEvent;                                        // 0x0000(0x0090)(ConstParm, Parm, OutParm, ReferenceParm)
};
//static_assert(alignof(GSScrollBox_OnMouseLeave) == 0x000008, "Wrong alignment on GSScrollBox_OnMouseLeave");
//static_assert(sizeof(GSScrollBox_OnMouseLeave) == 0x000090, "Wrong size on GSScrollBox_OnMouseLeave");
//static_assert(offsetof(GSScrollBox_OnMouseLeave, MouseEvent) == 0x000000, "Member 'GSScrollBox_OnMouseLeave::MouseEvent' has a wrong offset!");

// Function b1-Managed.GSScrollBox.ScrollOffsetChanged
// 0x0004 (0x0004 - 0x0000)
struct GSScrollBox_ScrollOffsetChanged final
{
public:
	float                                         CurrentOffset;                                     // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
//static_assert(alignof(GSScrollBox_ScrollOffsetChanged) == 0x000004, "Wrong alignment on GSScrollBox_ScrollOffsetChanged");
//static_assert(sizeof(GSScrollBox_ScrollOffsetChanged) == 0x000004, "Wrong size on GSScrollBox_ScrollOffsetChanged");
//static_assert(offsetof(GSScrollBox_ScrollOffsetChanged, CurrentOffset) == 0x000000, "Member 'GSScrollBox_ScrollOffsetChanged::CurrentOffset' has a wrong offset!");

// Function b1-Managed.B1OnlineSessionCS.HandleDisconnectCS
// 0x0010 (0x0010 - 0x0000)
struct B1OnlineSessionCS_HandleDisconnectCS final
{
public:
	class UWorld*                                 World;                                             // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UNetDriver*                             NetDriver;                                         // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
//static_assert(alignof(B1OnlineSessionCS_HandleDisconnectCS) == 0x000008, "Wrong alignment on B1OnlineSessionCS_HandleDisconnectCS");
//static_assert(sizeof(B1OnlineSessionCS_HandleDisconnectCS) == 0x000010, "Wrong size on B1OnlineSessionCS_HandleDisconnectCS");
//static_assert(offsetof(B1OnlineSessionCS_HandleDisconnectCS, World) == 0x000000, "Member 'B1OnlineSessionCS_HandleDisconnectCS::World' has a wrong offset!");
//static_assert(offsetof(B1OnlineSessionCS_HandleDisconnectCS, NetDriver) == 0x000008, "Member 'B1OnlineSessionCS_HandleDisconnectCS::NetDriver' has a wrong offset!");

// Function b1-Managed.B1ReplicationGraphNode_ClientAlwaysRelevant.GatherActorListsForConnectionCS
// 0x0008 (0x0008 - 0x0000)
struct B1ReplicationGraphNode_ClientAlwaysRelevant_GatherActorListsForConnectionCS final
{
public:
	class APlayerController*                      PlayerController;                                  // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
//static_assert(alignof(B1ReplicationGraphNode_ClientAlwaysRelevant_GatherActorListsForConnectionCS) == 0x000008, "Wrong alignment on B1ReplicationGraphNode_ClientAlwaysRelevant_GatherActorListsForConnectionCS");
//static_assert(sizeof(B1ReplicationGraphNode_ClientAlwaysRelevant_GatherActorListsForConnectionCS) == 0x000008, "Wrong size on B1ReplicationGraphNode_ClientAlwaysRelevant_GatherActorListsForConnectionCS");
//static_assert(offsetof(B1ReplicationGraphNode_ClientAlwaysRelevant_GatherActorListsForConnectionCS, PlayerController) == 0x000000, "Member 'B1ReplicationGraphNode_ClientAlwaysRelevant_GatherActorListsForConnectionCS::PlayerController' has a wrong offset!");

// Function b1-Managed.B1ReplicationGraphNode_ClientAlwaysRelevant.NotifyRemoveNetworkActorCS
// 0x0010 (0x0010 - 0x0000)
struct B1ReplicationGraphNode_ClientAlwaysRelevant_NotifyRemoveNetworkActorCS final
{
public:
	class AActor*                                 Actor;                                             // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         bWarnIfNotFound : 1;                               // 0x0008(0x0001)(BitIndex: 0x00, PropSize: 0x0001 (Parm, NoDestructor, HasGetValueTypeHash))
	uint8                                         BitPad_8_1 : 7;                                    // 0x0008(0x0001)(Fixing Bit-Field Size For New Byte [ Dumper-7 ])
	uint8                                         ReturnValue : 1;                                   // 0x0009(0x0001)(BitIndex: 0x00, PropSize: 0x0001 (Parm, OutParm, ReturnParm, NoDestructor, HasGetValueTypeHash))
};
//static_assert(alignof(B1ReplicationGraphNode_ClientAlwaysRelevant_NotifyRemoveNetworkActorCS) == 0x000008, "Wrong alignment on B1ReplicationGraphNode_ClientAlwaysRelevant_NotifyRemoveNetworkActorCS");
//static_assert(sizeof(B1ReplicationGraphNode_ClientAlwaysRelevant_NotifyRemoveNetworkActorCS) == 0x000010, "Wrong size on B1ReplicationGraphNode_ClientAlwaysRelevant_NotifyRemoveNetworkActorCS");
//static_assert(offsetof(B1ReplicationGraphNode_ClientAlwaysRelevant_NotifyRemoveNetworkActorCS, Actor) == 0x000000, "Member 'B1ReplicationGraphNode_ClientAlwaysRelevant_NotifyRemoveNetworkActorCS::Actor' has a wrong offset!");

// Function b1-Managed.B1ReplicationGraphNode_ClientAlwaysRelevant.NotifyAddNetworkActorCS
// 0x0008 (0x0008 - 0x0000)
struct B1ReplicationGraphNode_ClientAlwaysRelevant_NotifyAddNetworkActorCS final
{
public:
	class AActor*                                 Actor;                                             // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
//static_assert(alignof(B1ReplicationGraphNode_ClientAlwaysRelevant_NotifyAddNetworkActorCS) == 0x000008, "Wrong alignment on B1ReplicationGraphNode_ClientAlwaysRelevant_NotifyAddNetworkActorCS");
//static_assert(sizeof(B1ReplicationGraphNode_ClientAlwaysRelevant_NotifyAddNetworkActorCS) == 0x000008, "Wrong size on B1ReplicationGraphNode_ClientAlwaysRelevant_NotifyAddNetworkActorCS");
//static_assert(offsetof(B1ReplicationGraphNode_ClientAlwaysRelevant_NotifyAddNetworkActorCS, Actor) == 0x000000, "Member 'B1ReplicationGraphNode_ClientAlwaysRelevant_NotifyAddNetworkActorCS::Actor' has a wrong offset!");

// Function b1-Managed.BANS_GSSetSkillSuperArmor.GSAllowCrossSection
// 0x0001 (0x0001 - 0x0000)
struct BANS_GSSetSkillSuperArmor_GSAllowCrossSection final
{
public:
	uint8                                         ReturnValue : 1;                                   // 0x0000(0x0001)(BitIndex: 0x00, PropSize: 0x0001 (Parm, OutParm, ReturnParm, NoDestructor, HasGetValueTypeHash))
};
//static_assert(alignof(BANS_GSSetSkillSuperArmor_GSAllowCrossSection) == 0x000001, "Wrong alignment on BANS_GSSetSkillSuperArmor_GSAllowCrossSection");
//static_assert(sizeof(BANS_GSSetSkillSuperArmor_GSAllowCrossSection) == 0x000001, "Wrong size on BANS_GSSetSkillSuperArmor_GSAllowCrossSection");

// Function b1-Managed.BANS_GSSetSkillSuperArmor.UpdateSkillSuperArmorLevelInfo
// 0x0001 (0x0001 - 0x0000)
struct BANS_GSSetSkillSuperArmor_UpdateSkillSuperArmorLevelInfo final
{
public:
	uint8                                         ReturnValue : 1;                                   // 0x0000(0x0001)(BitIndex: 0x00, PropSize: 0x0001 (Parm, OutParm, ReturnParm, NoDestructor, HasGetValueTypeHash))
};
//static_assert(alignof(BANS_GSSetSkillSuperArmor_UpdateSkillSuperArmorLevelInfo) == 0x000001, "Wrong alignment on BANS_GSSetSkillSuperArmor_UpdateSkillSuperArmorLevelInfo");
//static_assert(sizeof(BANS_GSSetSkillSuperArmor_UpdateSkillSuperArmorLevelInfo) == 0x000001, "Wrong size on BANS_GSSetSkillSuperArmor_UpdateSkillSuperArmorLevelInfo");

// Function b1-Managed.BANS_GSSetSkillSuperArmor.GSNotifyBeginCS
// 0x0048 (0x0048 - 0x0000)
struct BANS_GSSetSkillSuperArmor_GSNotifyBeginCS final
{
public:
	struct FUStGSNotifyParam                      NotifyParam;                                       // 0x0000(0x0040)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
	float                                         TotalDuration;                                     // 0x0040(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
//static_assert(alignof(BANS_GSSetSkillSuperArmor_GSNotifyBeginCS) == 0x000008, "Wrong alignment on BANS_GSSetSkillSuperArmor_GSNotifyBeginCS");
//static_assert(sizeof(BANS_GSSetSkillSuperArmor_GSNotifyBeginCS) == 0x000048, "Wrong size on BANS_GSSetSkillSuperArmor_GSNotifyBeginCS");
//static_assert(offsetof(BANS_GSSetSkillSuperArmor_GSNotifyBeginCS, NotifyParam) == 0x000000, "Member 'BANS_GSSetSkillSuperArmor_GSNotifyBeginCS::NotifyParam' has a wrong offset!");
//static_assert(offsetof(BANS_GSSetSkillSuperArmor_GSNotifyBeginCS, TotalDuration) == 0x000040, "Member 'BANS_GSSetSkillSuperArmor_GSNotifyBeginCS::TotalDuration' has a wrong offset!");

// Function b1-Managed.BANS_GSSetSkillSuperArmor.GSNotifyEndCS
// 0x0040 (0x0040 - 0x0000)
struct BANS_GSSetSkillSuperArmor_GSNotifyEndCS final
{
public:
	struct FUStGSNotifyParam                      NotifyParam;                                       // 0x0000(0x0040)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
//static_assert(alignof(BANS_GSSetSkillSuperArmor_GSNotifyEndCS) == 0x000008, "Wrong alignment on BANS_GSSetSkillSuperArmor_GSNotifyEndCS");
//static_assert(sizeof(BANS_GSSetSkillSuperArmor_GSNotifyEndCS) == 0x000040, "Wrong size on BANS_GSSetSkillSuperArmor_GSNotifyEndCS");
//static_assert(offsetof(BANS_GSSetSkillSuperArmor_GSNotifyEndCS, NotifyParam) == 0x000000, "Member 'BANS_GSSetSkillSuperArmor_GSNotifyEndCS::NotifyParam' has a wrong offset!");

// Function b1-Managed.B1ReplicationGraphNode_PlayerRelatedActor.GatherActorListsForConnectionCS
// 0x0008 (0x0008 - 0x0000)
struct B1ReplicationGraphNode_PlayerRelatedActor_GatherActorListsForConnectionCS final
{
public:
	class APlayerController*                      PlayerController;                                  // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
//static_assert(alignof(B1ReplicationGraphNode_PlayerRelatedActor_GatherActorListsForConnectionCS) == 0x000008, "Wrong alignment on B1ReplicationGraphNode_PlayerRelatedActor_GatherActorListsForConnectionCS");
//static_assert(sizeof(B1ReplicationGraphNode_PlayerRelatedActor_GatherActorListsForConnectionCS) == 0x000008, "Wrong size on B1ReplicationGraphNode_PlayerRelatedActor_GatherActorListsForConnectionCS");
//static_assert(offsetof(B1ReplicationGraphNode_PlayerRelatedActor_GatherActorListsForConnectionCS, PlayerController) == 0x000000, "Member 'B1ReplicationGraphNode_PlayerRelatedActor_GatherActorListsForConnectionCS::PlayerController' has a wrong offset!");

// Function b1-Managed.B1ReplicationGraphOnline.ShouldServerMultiCastRPCForPlayerCS
// 0x0020 (0x0020 - 0x0000)
struct B1ReplicationGraphOnline_ShouldServerMultiCastRPCForPlayerCS final
{
public:
	class APlayerController*                      Controller;                                        // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class AActor*                                 Actor;                                             // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int64                                         FuncAddr;                                          // 0x0010(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         ReturnValue : 1;                                   // 0x0018(0x0001)(BitIndex: 0x00, PropSize: 0x0001 (Parm, OutParm, ReturnParm, NoDestructor, HasGetValueTypeHash))
};
//static_assert(alignof(B1ReplicationGraphOnline_ShouldServerMultiCastRPCForPlayerCS) == 0x000008, "Wrong alignment on B1ReplicationGraphOnline_ShouldServerMultiCastRPCForPlayerCS");
//static_assert(sizeof(B1ReplicationGraphOnline_ShouldServerMultiCastRPCForPlayerCS) == 0x000020, "Wrong size on B1ReplicationGraphOnline_ShouldServerMultiCastRPCForPlayerCS");
//static_assert(offsetof(B1ReplicationGraphOnline_ShouldServerMultiCastRPCForPlayerCS, Controller) == 0x000000, "Member 'B1ReplicationGraphOnline_ShouldServerMultiCastRPCForPlayerCS::Controller' has a wrong offset!");
//static_assert(offsetof(B1ReplicationGraphOnline_ShouldServerMultiCastRPCForPlayerCS, Actor) == 0x000008, "Member 'B1ReplicationGraphOnline_ShouldServerMultiCastRPCForPlayerCS::Actor' has a wrong offset!");
//static_assert(offsetof(B1ReplicationGraphOnline_ShouldServerMultiCastRPCForPlayerCS, FuncAddr) == 0x000010, "Member 'B1ReplicationGraphOnline_ShouldServerMultiCastRPCForPlayerCS::FuncAddr' has a wrong offset!");

// Function b1-Managed.B1ReplicationGraphOnline.InitConnectionGraphNodesCS
// 0x0008 (0x0008 - 0x0000)
struct B1ReplicationGraphOnline_InitConnectionGraphNodesCS final
{
public:
	class UNetReplicationGraphConnection*         RepGraphConnection;                                // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
//static_assert(alignof(B1ReplicationGraphOnline_InitConnectionGraphNodesCS) == 0x000008, "Wrong alignment on B1ReplicationGraphOnline_InitConnectionGraphNodesCS");
//static_assert(sizeof(B1ReplicationGraphOnline_InitConnectionGraphNodesCS) == 0x000008, "Wrong size on B1ReplicationGraphOnline_InitConnectionGraphNodesCS");
//static_assert(offsetof(B1ReplicationGraphOnline_InitConnectionGraphNodesCS, RepGraphConnection) == 0x000000, "Member 'B1ReplicationGraphOnline_InitConnectionGraphNodesCS::RepGraphConnection' has a wrong offset!");

// Function b1-Managed.B1ReplicationGraphOnline.RemoveNetworkActorCS
// 0x0008 (0x0008 - 0x0000)
struct B1ReplicationGraphOnline_RemoveNetworkActorCS final
{
public:
	class AActor*                                 Actor;                                             // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
//static_assert(alignof(B1ReplicationGraphOnline_RemoveNetworkActorCS) == 0x000008, "Wrong alignment on B1ReplicationGraphOnline_RemoveNetworkActorCS");
//static_assert(sizeof(B1ReplicationGraphOnline_RemoveNetworkActorCS) == 0x000008, "Wrong size on B1ReplicationGraphOnline_RemoveNetworkActorCS");
//static_assert(offsetof(B1ReplicationGraphOnline_RemoveNetworkActorCS, Actor) == 0x000000, "Member 'B1ReplicationGraphOnline_RemoveNetworkActorCS::Actor' has a wrong offset!");

// Function b1-Managed.B1ReplicationGraphOnline.GSNetworkRemapPathCS
// 0x0028 (0x0028 - 0x0000)
struct B1ReplicationGraphOnline_GSNetworkRemapPathCS final
{
public:
	class UObject*                                Outer_0;                                           // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class FString                                 OriginName;                                        // 0x0008(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash)
	class FString                                 Name_0;                                            // 0x0018(0x0010)(Parm, OutParm, ZeroConstructor, HasGetValueTypeHash)
};
//static_assert(alignof(B1ReplicationGraphOnline_GSNetworkRemapPathCS) == 0x000008, "Wrong alignment on B1ReplicationGraphOnline_GSNetworkRemapPathCS");
//static_assert(sizeof(B1ReplicationGraphOnline_GSNetworkRemapPathCS) == 0x000028, "Wrong size on B1ReplicationGraphOnline_GSNetworkRemapPathCS");
//static_assert(offsetof(B1ReplicationGraphOnline_GSNetworkRemapPathCS, Outer_0) == 0x000000, "Member 'B1ReplicationGraphOnline_GSNetworkRemapPathCS::Outer_0' has a wrong offset!");
//static_assert(offsetof(B1ReplicationGraphOnline_GSNetworkRemapPathCS, OriginName) == 0x000008, "Member 'B1ReplicationGraphOnline_GSNetworkRemapPathCS::OriginName' has a wrong offset!");
//static_assert(offsetof(B1ReplicationGraphOnline_GSNetworkRemapPathCS, Name_0) == 0x000018, "Member 'B1ReplicationGraphOnline_GSNetworkRemapPathCS::Name_0' has a wrong offset!");

// Function b1-Managed.B1ReplicationGraphOnline.AddNetworkActorCS
// 0x0008 (0x0008 - 0x0000)
struct B1ReplicationGraphOnline_AddNetworkActorCS final
{
public:
	class AActor*                                 Actor;                                             // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
//static_assert(alignof(B1ReplicationGraphOnline_AddNetworkActorCS) == 0x000008, "Wrong alignment on B1ReplicationGraphOnline_AddNetworkActorCS");
//static_assert(sizeof(B1ReplicationGraphOnline_AddNetworkActorCS) == 0x000008, "Wrong size on B1ReplicationGraphOnline_AddNetworkActorCS");
//static_assert(offsetof(B1ReplicationGraphOnline_AddNetworkActorCS, Actor) == 0x000000, "Member 'B1ReplicationGraphOnline_AddNetworkActorCS::Actor' has a wrong offset!");

// Function b1-Managed.BED_BehaviorNode_CastSkill.GetNodeDescriptionInCS
// 0x0010 (0x0010 - 0x0000)
struct BED_BehaviorNode_CastSkill_GetNodeDescriptionInCS final
{
public:
	class FString                                 ReturnValue;                                       // 0x0000(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash)
};
//static_assert(alignof(BED_BehaviorNode_CastSkill_GetNodeDescriptionInCS) == 0x000008, "Wrong alignment on BED_BehaviorNode_CastSkill_GetNodeDescriptionInCS");
//static_assert(sizeof(BED_BehaviorNode_CastSkill_GetNodeDescriptionInCS) == 0x000010, "Wrong size on BED_BehaviorNode_CastSkill_GetNodeDescriptionInCS");
//static_assert(offsetof(BED_BehaviorNode_CastSkill_GetNodeDescriptionInCS, ReturnValue) == 0x000000, "Member 'BED_BehaviorNode_CastSkill_GetNodeDescriptionInCS::ReturnValue' has a wrong offset!");

// Function b1-Managed.BGW_WorldSettings.OnLevelPreSave
// 0x0010 (0x0010 - 0x0000)
struct BGW_WorldSettings_OnLevelPreSave final
{
public:
	class ULevel*                                 Level;                                             // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UWorld*                                 World;                                             // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
//static_assert(alignof(BGW_WorldSettings_OnLevelPreSave) == 0x000008, "Wrong alignment on BGW_WorldSettings_OnLevelPreSave");
//static_assert(sizeof(BGW_WorldSettings_OnLevelPreSave) == 0x000010, "Wrong size on BGW_WorldSettings_OnLevelPreSave");
//static_assert(offsetof(BGW_WorldSettings_OnLevelPreSave, Level) == 0x000000, "Member 'BGW_WorldSettings_OnLevelPreSave::Level' has a wrong offset!");
//static_assert(offsetof(BGW_WorldSettings_OnLevelPreSave, World) == 0x000008, "Member 'BGW_WorldSettings_OnLevelPreSave::World' has a wrong offset!");

// Function b1-Managed.BED_BehaviorNode_EnterState.GetNodeDescriptionInCS
// 0x0010 (0x0010 - 0x0000)
struct BED_BehaviorNode_EnterState_GetNodeDescriptionInCS final
{
public:
	class FString                                 ReturnValue;                                       // 0x0000(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash)
};
//static_assert(alignof(BED_BehaviorNode_EnterState_GetNodeDescriptionInCS) == 0x000008, "Wrong alignment on BED_BehaviorNode_EnterState_GetNodeDescriptionInCS");
//static_assert(sizeof(BED_BehaviorNode_EnterState_GetNodeDescriptionInCS) == 0x000010, "Wrong size on BED_BehaviorNode_EnterState_GetNodeDescriptionInCS");
//static_assert(offsetof(BED_BehaviorNode_EnterState_GetNodeDescriptionInCS, ReturnValue) == 0x000000, "Member 'BED_BehaviorNode_EnterState_GetNodeDescriptionInCS::ReturnValue' has a wrong offset!");

// Function b1-Managed.BED_BehaviorNode_EnterState.IsSupportViewType
// 0x0002 (0x0002 - 0x0000)
struct BED_BehaviorNode_EnterState_IsSupportViewType final
{
public:
	ECalliopeViewType                             InViewType;                                        // 0x0000(0x0001)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         ReturnValue : 1;                                   // 0x0001(0x0001)(BitIndex: 0x00, PropSize: 0x0001 (Parm, OutParm, ReturnParm, NoDestructor, HasGetValueTypeHash))
};
//static_assert(alignof(BED_BehaviorNode_EnterState_IsSupportViewType) == 0x000001, "Wrong alignment on BED_BehaviorNode_EnterState_IsSupportViewType");
//static_assert(sizeof(BED_BehaviorNode_EnterState_IsSupportViewType) == 0x000002, "Wrong size on BED_BehaviorNode_EnterState_IsSupportViewType");
//static_assert(offsetof(BED_BehaviorNode_EnterState_IsSupportViewType, InViewType) == 0x000000, "Member 'BED_BehaviorNode_EnterState_IsSupportViewType::InViewType' has a wrong offset!");

// Function b1-Managed.GSEQT_FlyPathFinding.OnPropertyChanged
// 0x0020 (0x0020 - 0x0000)
struct GSEQT_FlyPathFinding_OnPropertyChanged final
{
public:
	class FString                                 MemberName;                                        // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash)
	class FString                                 PropertyName;                                      // 0x0010(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash)
};
//static_assert(alignof(GSEQT_FlyPathFinding_OnPropertyChanged) == 0x000008, "Wrong alignment on GSEQT_FlyPathFinding_OnPropertyChanged");
//static_assert(sizeof(GSEQT_FlyPathFinding_OnPropertyChanged) == 0x000020, "Wrong size on GSEQT_FlyPathFinding_OnPropertyChanged");
//static_assert(offsetof(GSEQT_FlyPathFinding_OnPropertyChanged, MemberName) == 0x000000, "Member 'GSEQT_FlyPathFinding_OnPropertyChanged::MemberName' has a wrong offset!");
//static_assert(offsetof(GSEQT_FlyPathFinding_OnPropertyChanged, PropertyName) == 0x000010, "Member 'GSEQT_FlyPathFinding_OnPropertyChanged::PropertyName' has a wrong offset!");

// Function b1-Managed.GSEQT_FlyPathFinding.ShouldUseCustomItemScore
// 0x0001 (0x0001 - 0x0000)
struct GSEQT_FlyPathFinding_ShouldUseCustomItemScore final
{
public:
	uint8                                         ReturnValue : 1;                                   // 0x0000(0x0001)(BitIndex: 0x00, PropSize: 0x0001 (Parm, OutParm, ReturnParm, NoDestructor, HasGetValueTypeHash))
};
//static_assert(alignof(GSEQT_FlyPathFinding_ShouldUseCustomItemScore) == 0x000001, "Wrong alignment on GSEQT_FlyPathFinding_ShouldUseCustomItemScore");
//static_assert(sizeof(GSEQT_FlyPathFinding_ShouldUseCustomItemScore) == 0x000001, "Wrong size on GSEQT_FlyPathFinding_ShouldUseCustomItemScore");

// Function b1-Managed.GSEQT_FlyPathFinding.ProcessCustomItemScoreCS
// 0x0040 (0x0040 - 0x0000)
struct GSEQT_FlyPathFinding_ProcessCustomItemScoreCS final
{
public:
	struct FGSEnvQueryTestItem                    Item;                                              // 0x0000(0x0040)(ConstParm, Parm, OutParm, ReferenceParm)
};
//static_assert(alignof(GSEQT_FlyPathFinding_ProcessCustomItemScoreCS) == 0x000008, "Wrong alignment on GSEQT_FlyPathFinding_ProcessCustomItemScoreCS");
//static_assert(sizeof(GSEQT_FlyPathFinding_ProcessCustomItemScoreCS) == 0x000040, "Wrong size on GSEQT_FlyPathFinding_ProcessCustomItemScoreCS");
//static_assert(offsetof(GSEQT_FlyPathFinding_ProcessCustomItemScoreCS, Item) == 0x000000, "Member 'GSEQT_FlyPathFinding_ProcessCustomItemScoreCS::Item' has a wrong offset!");

// Function b1-Managed.GSEQT_FlyPathFinding.GetDescriptionDetailsCS
// 0x0010 (0x0010 - 0x0000)
struct GSEQT_FlyPathFinding_GetDescriptionDetailsCS final
{
public:
	class FString                                 ReturnValue;                                       // 0x0000(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash)
};
//static_assert(alignof(GSEQT_FlyPathFinding_GetDescriptionDetailsCS) == 0x000008, "Wrong alignment on GSEQT_FlyPathFinding_GetDescriptionDetailsCS");
//static_assert(sizeof(GSEQT_FlyPathFinding_GetDescriptionDetailsCS) == 0x000010, "Wrong size on GSEQT_FlyPathFinding_GetDescriptionDetailsCS");
//static_assert(offsetof(GSEQT_FlyPathFinding_GetDescriptionDetailsCS, ReturnValue) == 0x000000, "Member 'GSEQT_FlyPathFinding_GetDescriptionDetailsCS::ReturnValue' has a wrong offset!");

// Function b1-Managed.GSEQT_FlyPathFinding.GetDescriptionTitleCS
// 0x0010 (0x0010 - 0x0000)
struct GSEQT_FlyPathFinding_GetDescriptionTitleCS final
{
public:
	class FString                                 ReturnValue;                                       // 0x0000(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash)
};
//static_assert(alignof(GSEQT_FlyPathFinding_GetDescriptionTitleCS) == 0x000008, "Wrong alignment on GSEQT_FlyPathFinding_GetDescriptionTitleCS");
//static_assert(sizeof(GSEQT_FlyPathFinding_GetDescriptionTitleCS) == 0x000010, "Wrong size on GSEQT_FlyPathFinding_GetDescriptionTitleCS");
//static_assert(offsetof(GSEQT_FlyPathFinding_GetDescriptionTitleCS, ReturnValue) == 0x000000, "Member 'GSEQT_FlyPathFinding_GetDescriptionTitleCS::ReturnValue' has a wrong offset!");

// Function b1-Managed.GSEQT_FlyPathFinding.ShouldPrepareContext
// 0x0001 (0x0001 - 0x0000)
struct GSEQT_FlyPathFinding_ShouldPrepareContext final
{
public:
	uint8                                         ReturnValue : 1;                                   // 0x0000(0x0001)(BitIndex: 0x00, PropSize: 0x0001 (Parm, OutParm, ReturnParm, NoDestructor, HasGetValueTypeHash))
};
//static_assert(alignof(GSEQT_FlyPathFinding_ShouldPrepareContext) == 0x000001, "Wrong alignment on GSEQT_FlyPathFinding_ShouldPrepareContext");
//static_assert(sizeof(GSEQT_FlyPathFinding_ShouldPrepareContext) == 0x000001, "Wrong size on GSEQT_FlyPathFinding_ShouldPrepareContext");

// Function b1-Managed.GSEQT_FlyPathFinding.PreProcessItems
// 0x0020 (0x0020 - 0x0000)
struct GSEQT_FlyPathFinding_PreProcessItems final
{
public:
	TArray<class AActor*>                         ContextActors;                                     // 0x0000(0x0010)(ConstParm, Parm, OutParm, ReferenceParm)
	TArray<struct FVector>                        ContextLocations;                                  // 0x0010(0x0010)(ConstParm, Parm, OutParm, ReferenceParm)
};
//static_assert(alignof(GSEQT_FlyPathFinding_PreProcessItems) == 0x000008, "Wrong alignment on GSEQT_FlyPathFinding_PreProcessItems");
//static_assert(sizeof(GSEQT_FlyPathFinding_PreProcessItems) == 0x000020, "Wrong size on GSEQT_FlyPathFinding_PreProcessItems");
//static_assert(offsetof(GSEQT_FlyPathFinding_PreProcessItems, ContextActors) == 0x000000, "Member 'GSEQT_FlyPathFinding_PreProcessItems::ContextActors' has a wrong offset!");
//static_assert(offsetof(GSEQT_FlyPathFinding_PreProcessItems, ContextLocations) == 0x000010, "Member 'GSEQT_FlyPathFinding_PreProcessItems::ContextLocations' has a wrong offset!");

// Function b1-Managed.BUAnimQuadruped.BlueprintThreadSafeUpdateAnimation
// 0x0004 (0x0004 - 0x0000)
struct BUAnimQuadruped_BlueprintThreadSafeUpdateAnimation final
{
public:
	float                                         DeltaTime;                                         // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
//static_assert(alignof(BUAnimQuadruped_BlueprintThreadSafeUpdateAnimation) == 0x000004, "Wrong alignment on BUAnimQuadruped_BlueprintThreadSafeUpdateAnimation");
//static_assert(sizeof(BUAnimQuadruped_BlueprintThreadSafeUpdateAnimation) == 0x000004, "Wrong size on BUAnimQuadruped_BlueprintThreadSafeUpdateAnimation");
//static_assert(offsetof(BUAnimQuadruped_BlueprintThreadSafeUpdateAnimation, DeltaTime) == 0x000000, "Member 'BUAnimQuadruped_BlueprintThreadSafeUpdateAnimation::DeltaTime' has a wrong offset!");

// Function b1-Managed.BED_MovieNode_PlayerLockTarget.GetNodeDescriptionInCS
// 0x0010 (0x0010 - 0x0000)
struct BED_MovieNode_PlayerLockTarget_GetNodeDescriptionInCS final
{
public:
	class FString                                 ReturnValue;                                       // 0x0000(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash)
};
//static_assert(alignof(BED_MovieNode_PlayerLockTarget_GetNodeDescriptionInCS) == 0x000008, "Wrong alignment on BED_MovieNode_PlayerLockTarget_GetNodeDescriptionInCS");
//static_assert(sizeof(BED_MovieNode_PlayerLockTarget_GetNodeDescriptionInCS) == 0x000010, "Wrong size on BED_MovieNode_PlayerLockTarget_GetNodeDescriptionInCS");
//static_assert(offsetof(BED_MovieNode_PlayerLockTarget_GetNodeDescriptionInCS, ReturnValue) == 0x000000, "Member 'BED_MovieNode_PlayerLockTarget_GetNodeDescriptionInCS::ReturnValue' has a wrong offset!");

// Function b1-Managed.BGUChapterSurpriseActor.ReceiveTick
// 0x0004 (0x0004 - 0x0000)
struct BGUChapterSurpriseActor_ReceiveTick final
{
public:
	float                                         DeltaSeconds;                                      // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
//static_assert(alignof(BGUChapterSurpriseActor_ReceiveTick) == 0x000004, "Wrong alignment on BGUChapterSurpriseActor_ReceiveTick");
//static_assert(sizeof(BGUChapterSurpriseActor_ReceiveTick) == 0x000004, "Wrong size on BGUChapterSurpriseActor_ReceiveTick");
//static_assert(offsetof(BGUChapterSurpriseActor_ReceiveTick, DeltaSeconds) == 0x000000, "Member 'BGUChapterSurpriseActor_ReceiveTick::DeltaSeconds' has a wrong offset!");

// Function b1-Managed.BGUFuncLibProceduralMap.BuildProceduralDungeonsInfo
// 0x00B0 (0x00B0 - 0x0000)
struct BGUFuncLibProceduralMap_BuildProceduralDungeonsInfo final
{
public:
	struct FMapProceduralInfo                     MapInfo;                                           // 0x0000(0x00A8)(Parm, OutParm, ReferenceParm, HasGetValueTypeHash)
	uint8                                         ReturnValue : 1;                                   // 0x00A8(0x0001)(BitIndex: 0x00, PropSize: 0x0001 (Parm, OutParm, ReturnParm, NoDestructor, HasGetValueTypeHash))
};
//static_assert(alignof(BGUFuncLibProceduralMap_BuildProceduralDungeonsInfo) == 0x000008, "Wrong alignment on BGUFuncLibProceduralMap_BuildProceduralDungeonsInfo");
//static_assert(sizeof(BGUFuncLibProceduralMap_BuildProceduralDungeonsInfo) == 0x0000B0, "Wrong size on BGUFuncLibProceduralMap_BuildProceduralDungeonsInfo");
//static_assert(offsetof(BGUFuncLibProceduralMap_BuildProceduralDungeonsInfo, MapInfo) == 0x000000, "Member 'BGUFuncLibProceduralMap_BuildProceduralDungeonsInfo::MapInfo' has a wrong offset!");

// Function b1-Managed.BGUFuncLibProceduralMap.GenerateProceduralMapData
// 0x00B0 (0x00B0 - 0x0000)
struct BGUFuncLibProceduralMap_GenerateProceduralMapData final
{
public:
	struct FMapProceduralInfo                     MapInfo;                                           // 0x0000(0x00A8)(Parm, OutParm, ReferenceParm, HasGetValueTypeHash)
	uint8                                         ReturnValue : 1;                                   // 0x00A8(0x0001)(BitIndex: 0x00, PropSize: 0x0001 (Parm, OutParm, ReturnParm, NoDestructor, HasGetValueTypeHash))
};
//static_assert(alignof(BGUFuncLibProceduralMap_GenerateProceduralMapData) == 0x000008, "Wrong alignment on BGUFuncLibProceduralMap_GenerateProceduralMapData");
//static_assert(sizeof(BGUFuncLibProceduralMap_GenerateProceduralMapData) == 0x0000B0, "Wrong size on BGUFuncLibProceduralMap_GenerateProceduralMapData");
//static_assert(offsetof(BGUFuncLibProceduralMap_GenerateProceduralMapData, MapInfo) == 0x000000, "Member 'BGUFuncLibProceduralMap_GenerateProceduralMapData::MapInfo' has a wrong offset!");

// Function b1-Managed.BGUFuncLibProceduralMap.BuildWildernessLinearInfo
// 0x00B0 (0x00B0 - 0x0000)
struct BGUFuncLibProceduralMap_BuildWildernessLinearInfo final
{
public:
	struct FMapProceduralInfo                     MapInfo;                                           // 0x0000(0x00A8)(Parm, OutParm, ReferenceParm, HasGetValueTypeHash)
	uint8                                         ReturnValue : 1;                                   // 0x00A8(0x0001)(BitIndex: 0x00, PropSize: 0x0001 (Parm, OutParm, ReturnParm, NoDestructor, HasGetValueTypeHash))
};
//static_assert(alignof(BGUFuncLibProceduralMap_BuildWildernessLinearInfo) == 0x000008, "Wrong alignment on BGUFuncLibProceduralMap_BuildWildernessLinearInfo");
//static_assert(sizeof(BGUFuncLibProceduralMap_BuildWildernessLinearInfo) == 0x0000B0, "Wrong size on BGUFuncLibProceduralMap_BuildWildernessLinearInfo");
//static_assert(offsetof(BGUFuncLibProceduralMap_BuildWildernessLinearInfo, MapInfo) == 0x000000, "Member 'BGUFuncLibProceduralMap_BuildWildernessLinearInfo::MapInfo' has a wrong offset!");

// Function b1-Managed.BGUFuncLibProceduralMap.InitProceduralMapConfig
// 0x00C0 (0x00C0 - 0x0000)
struct BGUFuncLibProceduralMap_InitProceduralMapConfig final
{
public:
	class UBGWProceduralMapConfigDataAsset*       MapConfigDataAsset;                                // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UBGWProceduralMapBlockMappingDataAsset* MapBlockMappingInfo;                               // 0x0008(0x0008)(Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UBGWCustomLightConfigDataAsset*         MapLightInfo;                                      // 0x0010(0x0008)(Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FMapProceduralInfo                     MapInfo;                                           // 0x0018(0x00A8)(Parm, OutParm, HasGetValueTypeHash)
};
//static_assert(alignof(BGUFuncLibProceduralMap_InitProceduralMapConfig) == 0x000008, "Wrong alignment on BGUFuncLibProceduralMap_InitProceduralMapConfig");
//static_assert(sizeof(BGUFuncLibProceduralMap_InitProceduralMapConfig) == 0x0000C0, "Wrong size on BGUFuncLibProceduralMap_InitProceduralMapConfig");
//static_assert(offsetof(BGUFuncLibProceduralMap_InitProceduralMapConfig, MapConfigDataAsset) == 0x000000, "Member 'BGUFuncLibProceduralMap_InitProceduralMapConfig::MapConfigDataAsset' has a wrong offset!");
//static_assert(offsetof(BGUFuncLibProceduralMap_InitProceduralMapConfig, MapBlockMappingInfo) == 0x000008, "Member 'BGUFuncLibProceduralMap_InitProceduralMapConfig::MapBlockMappingInfo' has a wrong offset!");
//static_assert(offsetof(BGUFuncLibProceduralMap_InitProceduralMapConfig, MapLightInfo) == 0x000010, "Member 'BGUFuncLibProceduralMap_InitProceduralMapConfig::MapLightInfo' has a wrong offset!");
//static_assert(offsetof(BGUFuncLibProceduralMap_InitProceduralMapConfig, MapInfo) == 0x000018, "Member 'BGUFuncLibProceduralMap_InitProceduralMapConfig::MapInfo' has a wrong offset!");

// Function b1-Managed.BGUFuncLibProceduralMap.MapPopulateWithPoints
// 0x00A8 (0x00A8 - 0x0000)
struct BGUFuncLibProceduralMap_MapPopulateWithPoints final
{
public:
	struct FMapProceduralInfo                     MapInfo;                                           // 0x0000(0x00A8)(Parm, OutParm, ReferenceParm, HasGetValueTypeHash)
};
//static_assert(alignof(BGUFuncLibProceduralMap_MapPopulateWithPoints) == 0x000008, "Wrong alignment on BGUFuncLibProceduralMap_MapPopulateWithPoints");
//static_assert(sizeof(BGUFuncLibProceduralMap_MapPopulateWithPoints) == 0x0000A8, "Wrong size on BGUFuncLibProceduralMap_MapPopulateWithPoints");
//static_assert(offsetof(BGUFuncLibProceduralMap_MapPopulateWithPoints, MapInfo) == 0x000000, "Member 'BGUFuncLibProceduralMap_MapPopulateWithPoints::MapInfo' has a wrong offset!");

// Function b1-Managed.BGUFuncLibProceduralMap.MapConnectAllPoints
// 0x00B0 (0x00B0 - 0x0000)
struct BGUFuncLibProceduralMap_MapConnectAllPoints final
{
public:
	struct FMapProceduralInfo                     MapInfo;                                           // 0x0000(0x00A8)(Parm, OutParm, ReferenceParm, HasGetValueTypeHash)
	EMapCatFlag                                   AllowedGeneralCatDir;                              // 0x00A8(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	EMapCatFlag                                   AllowedEntranceOutCatDir;                          // 0x00A9(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	EMapCatFlag                                   AllowedExitInCatDir;                               // 0x00AA(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
//static_assert(alignof(BGUFuncLibProceduralMap_MapConnectAllPoints) == 0x000008, "Wrong alignment on BGUFuncLibProceduralMap_MapConnectAllPoints");
//static_assert(sizeof(BGUFuncLibProceduralMap_MapConnectAllPoints) == 0x0000B0, "Wrong size on BGUFuncLibProceduralMap_MapConnectAllPoints");
//static_assert(offsetof(BGUFuncLibProceduralMap_MapConnectAllPoints, MapInfo) == 0x000000, "Member 'BGUFuncLibProceduralMap_MapConnectAllPoints::MapInfo' has a wrong offset!");
//static_assert(offsetof(BGUFuncLibProceduralMap_MapConnectAllPoints, AllowedGeneralCatDir) == 0x0000A8, "Member 'BGUFuncLibProceduralMap_MapConnectAllPoints::AllowedGeneralCatDir' has a wrong offset!");
//static_assert(offsetof(BGUFuncLibProceduralMap_MapConnectAllPoints, AllowedEntranceOutCatDir) == 0x0000A9, "Member 'BGUFuncLibProceduralMap_MapConnectAllPoints::AllowedEntranceOutCatDir' has a wrong offset!");
//static_assert(offsetof(BGUFuncLibProceduralMap_MapConnectAllPoints, AllowedExitInCatDir) == 0x0000AA, "Member 'BGUFuncLibProceduralMap_MapConnectAllPoints::AllowedExitInCatDir' has a wrong offset!");

// Function b1-Managed.BGUFuncLibProceduralMap.BuildDemoMapInfo
// 0x00B0 (0x00B0 - 0x0000)
struct BGUFuncLibProceduralMap_BuildDemoMapInfo final
{
public:
	struct FMapProceduralInfo                     MapInfo;                                           // 0x0000(0x00A8)(Parm, OutParm, ReferenceParm, HasGetValueTypeHash)
	uint8                                         ReturnValue : 1;                                   // 0x00A8(0x0001)(BitIndex: 0x00, PropSize: 0x0001 (Parm, OutParm, ReturnParm, NoDestructor, HasGetValueTypeHash))
};
//static_assert(alignof(BGUFuncLibProceduralMap_BuildDemoMapInfo) == 0x000008, "Wrong alignment on BGUFuncLibProceduralMap_BuildDemoMapInfo");
//static_assert(sizeof(BGUFuncLibProceduralMap_BuildDemoMapInfo) == 0x0000B0, "Wrong size on BGUFuncLibProceduralMap_BuildDemoMapInfo");
//static_assert(offsetof(BGUFuncLibProceduralMap_BuildDemoMapInfo, MapInfo) == 0x000000, "Member 'BGUFuncLibProceduralMap_BuildDemoMapInfo::MapInfo' has a wrong offset!");

// Function b1-Managed.BAIS_SurroundObstacleTick.OnPropertyChanged
// 0x0020 (0x0020 - 0x0000)
struct BAIS_SurroundObstacleTick_OnPropertyChanged final
{
public:
	class FString                                 MemberName;                                        // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash)
	class FString                                 PropertyName;                                      // 0x0010(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash)
};
//static_assert(alignof(BAIS_SurroundObstacleTick_OnPropertyChanged) == 0x000008, "Wrong alignment on BAIS_SurroundObstacleTick_OnPropertyChanged");
//static_assert(sizeof(BAIS_SurroundObstacleTick_OnPropertyChanged) == 0x000020, "Wrong size on BAIS_SurroundObstacleTick_OnPropertyChanged");
//static_assert(offsetof(BAIS_SurroundObstacleTick_OnPropertyChanged, MemberName) == 0x000000, "Member 'BAIS_SurroundObstacleTick_OnPropertyChanged::MemberName' has a wrong offset!");
//static_assert(offsetof(BAIS_SurroundObstacleTick_OnPropertyChanged, PropertyName) == 0x000010, "Member 'BAIS_SurroundObstacleTick_OnPropertyChanged::PropertyName' has a wrong offset!");

// Function b1-Managed.BGUWeaponBase.Tool_CheckBoxChildren
// 0x0001 (0x0001 - 0x0000)
struct BGUWeaponBase_Tool_CheckBoxChildren final
{
public:
	uint8                                         ReturnValue : 1;                                   // 0x0000(0x0001)(BitIndex: 0x00, PropSize: 0x0001 (Parm, OutParm, ReturnParm, NoDestructor, HasGetValueTypeHash))
};
//static_assert(alignof(BGUWeaponBase_Tool_CheckBoxChildren) == 0x000001, "Wrong alignment on BGUWeaponBase_Tool_CheckBoxChildren");
//static_assert(sizeof(BGUWeaponBase_Tool_CheckBoxChildren) == 0x000001, "Wrong size on BGUWeaponBase_Tool_CheckBoxChildren");

// Function b1-Managed.BGUWeaponBase.WeaponBPFunc
// 0x0004 (0x0004 - 0x0000)
struct BGUWeaponBase_WeaponBPFunc final
{
public:
	float                                         FloatParam;                                        // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
//static_assert(alignof(BGUWeaponBase_WeaponBPFunc) == 0x000004, "Wrong alignment on BGUWeaponBase_WeaponBPFunc");
//static_assert(sizeof(BGUWeaponBase_WeaponBPFunc) == 0x000004, "Wrong size on BGUWeaponBase_WeaponBPFunc");
//static_assert(offsetof(BGUWeaponBase_WeaponBPFunc, FloatParam) == 0x000000, "Member 'BGUWeaponBase_WeaponBPFunc::FloatParam' has a wrong offset!");

// Function b1-Managed.BGUSkillPreviewSystem.TickComponentInCS
// 0x0004 (0x0004 - 0x0000)
struct BGUSkillPreviewSystem_TickComponentInCS final
{
public:
	float                                         DeltaTime;                                         // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
//static_assert(alignof(BGUSkillPreviewSystem_TickComponentInCS) == 0x000004, "Wrong alignment on BGUSkillPreviewSystem_TickComponentInCS");
//static_assert(sizeof(BGUSkillPreviewSystem_TickComponentInCS) == 0x000004, "Wrong size on BGUSkillPreviewSystem_TickComponentInCS");
//static_assert(offsetof(BGUSkillPreviewSystem_TickComponentInCS, DeltaTime) == 0x000000, "Member 'BGUSkillPreviewSystem_TickComponentInCS::DeltaTime' has a wrong offset!");

// Function b1-Managed.BGUSkillPreviewSystem.OnSetPreviewConfig
// 0x0048 (0x0048 - 0x0000)
struct BGUSkillPreviewSystem_OnSetPreviewConfig final
{
public:
	struct FZBBPreviewConfig                      Config;                                            // 0x0000(0x0048)(Parm, HasGetValueTypeHash)
};
//static_assert(alignof(BGUSkillPreviewSystem_OnSetPreviewConfig) == 0x000008, "Wrong alignment on BGUSkillPreviewSystem_OnSetPreviewConfig");
//static_assert(sizeof(BGUSkillPreviewSystem_OnSetPreviewConfig) == 0x000048, "Wrong size on BGUSkillPreviewSystem_OnSetPreviewConfig");
//static_assert(offsetof(BGUSkillPreviewSystem_OnSetPreviewConfig, Config) == 0x000000, "Member 'BGUSkillPreviewSystem_OnSetPreviewConfig::Config' has a wrong offset!");

// Function b1-Managed.BGUSkillPreviewSystem.DrawforDebug
// 0x0008 (0x0008 - 0x0000)
struct BGUSkillPreviewSystem_DrawforDebug final
{
public:
	uint8                                         DrawAll : 1;                                       // 0x0000(0x0001)(BitIndex: 0x00, PropSize: 0x0001 (Parm, NoDestructor, HasGetValueTypeHash))
	uint8                                         Pad_1[0x3];                                        // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         SectorNum;                                         // 0x0004(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
//static_assert(alignof(BGUSkillPreviewSystem_DrawforDebug) == 0x000004, "Wrong alignment on BGUSkillPreviewSystem_DrawforDebug");
//static_assert(sizeof(BGUSkillPreviewSystem_DrawforDebug) == 0x000008, "Wrong size on BGUSkillPreviewSystem_DrawforDebug");
//static_assert(offsetof(BGUSkillPreviewSystem_DrawforDebug, SectorNum) == 0x000004, "Member 'BGUSkillPreviewSystem_DrawforDebug::SectorNum' has a wrong offset!");

// Function b1-Managed.ActorCompContainerCS.ApplyWorldOffsetCS
// 0x0020 (0x0020 - 0x0000)
struct ActorCompContainerCS_ApplyWorldOffsetCS final
{
public:
	struct FVector                                InOffset;                                          // 0x0000(0x0018)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         bWorldShift : 1;                                   // 0x0018(0x0001)(BitIndex: 0x00, PropSize: 0x0001 (Parm, NoDestructor, HasGetValueTypeHash))
};
//static_assert(alignof(ActorCompContainerCS_ApplyWorldOffsetCS) == 0x000008, "Wrong alignment on ActorCompContainerCS_ApplyWorldOffsetCS");
//static_assert(sizeof(ActorCompContainerCS_ApplyWorldOffsetCS) == 0x000020, "Wrong size on ActorCompContainerCS_ApplyWorldOffsetCS");
//static_assert(offsetof(ActorCompContainerCS_ApplyWorldOffsetCS, InOffset) == 0x000000, "Member 'ActorCompContainerCS_ApplyWorldOffsetCS::InOffset' has a wrong offset!");

// Function b1-Managed.ActorCompContainerCS.EndPlayInCS
// 0x0001 (0x0001 - 0x0000)
struct ActorCompContainerCS_EndPlayInCS final
{
public:
	EEndPlayReason                                EndPlayReason;                                     // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
//static_assert(alignof(ActorCompContainerCS_EndPlayInCS) == 0x000001, "Wrong alignment on ActorCompContainerCS_EndPlayInCS");
//static_assert(sizeof(ActorCompContainerCS_EndPlayInCS) == 0x000001, "Wrong size on ActorCompContainerCS_EndPlayInCS");
//static_assert(offsetof(ActorCompContainerCS_EndPlayInCS, EndPlayReason) == 0x000000, "Member 'ActorCompContainerCS_EndPlayInCS::EndPlayReason' has a wrong offset!");

// Function b1-Managed.BGUPOMDecalActor.OnConstructionCS
// 0x0060 (0x0060 - 0x0000)
struct BGUPOMDecalActor_OnConstructionCS final
{
public:
	struct FTransform                             Transform;                                         // 0x0000(0x0060)(ConstParm, Parm, OutParm, ReferenceParm, IsPlainOldData, NoDestructor)
};
//static_assert(alignof(BGUPOMDecalActor_OnConstructionCS) == 0x000010, "Wrong alignment on BGUPOMDecalActor_OnConstructionCS");
//static_assert(sizeof(BGUPOMDecalActor_OnConstructionCS) == 0x000060, "Wrong size on BGUPOMDecalActor_OnConstructionCS");
//static_assert(offsetof(BGUPOMDecalActor_OnConstructionCS, Transform) == 0x000000, "Member 'BGUPOMDecalActor_OnConstructionCS::Transform' has a wrong offset!");

// Function b1-Managed.BED_BehaviorNode_OnUnitTrans.GetNodeDescriptionInCS
// 0x0010 (0x0010 - 0x0000)
struct BED_BehaviorNode_OnUnitTrans_GetNodeDescriptionInCS final
{
public:
	class FString                                 ReturnValue;                                       // 0x0000(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash)
};
//static_assert(alignof(BED_BehaviorNode_OnUnitTrans_GetNodeDescriptionInCS) == 0x000008, "Wrong alignment on BED_BehaviorNode_OnUnitTrans_GetNodeDescriptionInCS");
//static_assert(sizeof(BED_BehaviorNode_OnUnitTrans_GetNodeDescriptionInCS) == 0x000010, "Wrong size on BED_BehaviorNode_OnUnitTrans_GetNodeDescriptionInCS");
//static_assert(offsetof(BED_BehaviorNode_OnUnitTrans_GetNodeDescriptionInCS, ReturnValue) == 0x000000, "Member 'BED_BehaviorNode_OnUnitTrans_GetNodeDescriptionInCS::ReturnValue' has a wrong offset!");

// Function b1-Managed.BED_BehaviorNode_OnUnitTrans.IsSupportViewType
// 0x0002 (0x0002 - 0x0000)
struct BED_BehaviorNode_OnUnitTrans_IsSupportViewType final
{
public:
	ECalliopeViewType                             InViewType;                                        // 0x0000(0x0001)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         ReturnValue : 1;                                   // 0x0001(0x0001)(BitIndex: 0x00, PropSize: 0x0001 (Parm, OutParm, ReturnParm, NoDestructor, HasGetValueTypeHash))
};
//static_assert(alignof(BED_BehaviorNode_OnUnitTrans_IsSupportViewType) == 0x000001, "Wrong alignment on BED_BehaviorNode_OnUnitTrans_IsSupportViewType");
//static_assert(sizeof(BED_BehaviorNode_OnUnitTrans_IsSupportViewType) == 0x000002, "Wrong size on BED_BehaviorNode_OnUnitTrans_IsSupportViewType");
//static_assert(offsetof(BED_BehaviorNode_OnUnitTrans_IsSupportViewType, InViewType) == 0x000000, "Member 'BED_BehaviorNode_OnUnitTrans_IsSupportViewType::InViewType' has a wrong offset!");

// Function b1-Managed.BED_QuestNode_AddBuff.GetNodeDescriptionInCS
// 0x0010 (0x0010 - 0x0000)
struct BED_QuestNode_AddBuff_GetNodeDescriptionInCS final
{
public:
	class FString                                 ReturnValue;                                       // 0x0000(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash)
};
//static_assert(alignof(BED_QuestNode_AddBuff_GetNodeDescriptionInCS) == 0x000008, "Wrong alignment on BED_QuestNode_AddBuff_GetNodeDescriptionInCS");
//static_assert(sizeof(BED_QuestNode_AddBuff_GetNodeDescriptionInCS) == 0x000010, "Wrong size on BED_QuestNode_AddBuff_GetNodeDescriptionInCS");
//static_assert(offsetof(BED_QuestNode_AddBuff_GetNodeDescriptionInCS, ReturnValue) == 0x000000, "Member 'BED_QuestNode_AddBuff_GetNodeDescriptionInCS::ReturnValue' has a wrong offset!");

// Function b1-Managed.BGWDataAsset_UnitDeathDispConfig.SetDefaultDBCAsset
// 0x0068 (0x0068 - 0x0000)
struct BGWDataAsset_UnitDeathDispConfig_SetDefaultDBCAsset final
{
public:
	class UBUC_DispLibDispBaseConfigDataAsset*    _NormalDissolveDBC;                                // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UBUC_DispLibDispBaseConfigDataAsset*    Burn_AbnormalStateDeadDBC;                         // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UBUC_DispLibDispBaseConfigDataAsset*    Burn_AbnormalStateDissolveDBC;                     // 0x0010(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UBUC_DispLibDispBaseConfigDataAsset*    Thunder_AbnormalStateDeadDBC;                      // 0x0018(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UBUC_DispLibDispBaseConfigDataAsset*    Thunder_AbnormalStateDissolveDBC;                  // 0x0020(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UBUC_DispLibDispBaseConfigDataAsset*    Poison_AbnormalStateDeadDBC;                       // 0x0028(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UBUC_DispLibDispBaseConfigDataAsset*    Poison_AbnormalStateDissolveDBC;                   // 0x0030(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UBUC_DispLibDispBaseConfigDataAsset*    Freeze_AbnormalStateDeadDBC;                       // 0x0038(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UBUC_DispLibDispBaseConfigDataAsset*    Freeze_AbnormalStateDissolveDBC;                   // 0x0040(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UBUC_DispLibDispBaseConfigDataAsset*    Yin_AbnormalStateDeadDBC;                          // 0x0048(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UBUC_DispLibDispBaseConfigDataAsset*    Yin_AbnormalStateDissolveDBC;                      // 0x0050(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UBUC_DispLibDispBaseConfigDataAsset*    Yang_AbnormalStateDeadDBC;                         // 0x0058(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UBUC_DispLibDispBaseConfigDataAsset*    Yang_AbnormalStateDissolveDBC;                     // 0x0060(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
//static_assert(alignof(BGWDataAsset_UnitDeathDispConfig_SetDefaultDBCAsset) == 0x000008, "Wrong alignment on BGWDataAsset_UnitDeathDispConfig_SetDefaultDBCAsset");
//static_assert(sizeof(BGWDataAsset_UnitDeathDispConfig_SetDefaultDBCAsset) == 0x000068, "Wrong size on BGWDataAsset_UnitDeathDispConfig_SetDefaultDBCAsset");
//static_assert(offsetof(BGWDataAsset_UnitDeathDispConfig_SetDefaultDBCAsset, _NormalDissolveDBC) == 0x000000, "Member 'BGWDataAsset_UnitDeathDispConfig_SetDefaultDBCAsset::_NormalDissolveDBC' has a wrong offset!");
//static_assert(offsetof(BGWDataAsset_UnitDeathDispConfig_SetDefaultDBCAsset, Burn_AbnormalStateDeadDBC) == 0x000008, "Member 'BGWDataAsset_UnitDeathDispConfig_SetDefaultDBCAsset::Burn_AbnormalStateDeadDBC' has a wrong offset!");
//static_assert(offsetof(BGWDataAsset_UnitDeathDispConfig_SetDefaultDBCAsset, Burn_AbnormalStateDissolveDBC) == 0x000010, "Member 'BGWDataAsset_UnitDeathDispConfig_SetDefaultDBCAsset::Burn_AbnormalStateDissolveDBC' has a wrong offset!");
//static_assert(offsetof(BGWDataAsset_UnitDeathDispConfig_SetDefaultDBCAsset, Thunder_AbnormalStateDeadDBC) == 0x000018, "Member 'BGWDataAsset_UnitDeathDispConfig_SetDefaultDBCAsset::Thunder_AbnormalStateDeadDBC' has a wrong offset!");
//static_assert(offsetof(BGWDataAsset_UnitDeathDispConfig_SetDefaultDBCAsset, Thunder_AbnormalStateDissolveDBC) == 0x000020, "Member 'BGWDataAsset_UnitDeathDispConfig_SetDefaultDBCAsset::Thunder_AbnormalStateDissolveDBC' has a wrong offset!");
//static_assert(offsetof(BGWDataAsset_UnitDeathDispConfig_SetDefaultDBCAsset, Poison_AbnormalStateDeadDBC) == 0x000028, "Member 'BGWDataAsset_UnitDeathDispConfig_SetDefaultDBCAsset::Poison_AbnormalStateDeadDBC' has a wrong offset!");
//static_assert(offsetof(BGWDataAsset_UnitDeathDispConfig_SetDefaultDBCAsset, Poison_AbnormalStateDissolveDBC) == 0x000030, "Member 'BGWDataAsset_UnitDeathDispConfig_SetDefaultDBCAsset::Poison_AbnormalStateDissolveDBC' has a wrong offset!");
//static_assert(offsetof(BGWDataAsset_UnitDeathDispConfig_SetDefaultDBCAsset, Freeze_AbnormalStateDeadDBC) == 0x000038, "Member 'BGWDataAsset_UnitDeathDispConfig_SetDefaultDBCAsset::Freeze_AbnormalStateDeadDBC' has a wrong offset!");
//static_assert(offsetof(BGWDataAsset_UnitDeathDispConfig_SetDefaultDBCAsset, Freeze_AbnormalStateDissolveDBC) == 0x000040, "Member 'BGWDataAsset_UnitDeathDispConfig_SetDefaultDBCAsset::Freeze_AbnormalStateDissolveDBC' has a wrong offset!");
//static_assert(offsetof(BGWDataAsset_UnitDeathDispConfig_SetDefaultDBCAsset, Yin_AbnormalStateDeadDBC) == 0x000048, "Member 'BGWDataAsset_UnitDeathDispConfig_SetDefaultDBCAsset::Yin_AbnormalStateDeadDBC' has a wrong offset!");
//static_assert(offsetof(BGWDataAsset_UnitDeathDispConfig_SetDefaultDBCAsset, Yin_AbnormalStateDissolveDBC) == 0x000050, "Member 'BGWDataAsset_UnitDeathDispConfig_SetDefaultDBCAsset::Yin_AbnormalStateDissolveDBC' has a wrong offset!");
//static_assert(offsetof(BGWDataAsset_UnitDeathDispConfig_SetDefaultDBCAsset, Yang_AbnormalStateDeadDBC) == 0x000058, "Member 'BGWDataAsset_UnitDeathDispConfig_SetDefaultDBCAsset::Yang_AbnormalStateDeadDBC' has a wrong offset!");
//static_assert(offsetof(BGWDataAsset_UnitDeathDispConfig_SetDefaultDBCAsset, Yang_AbnormalStateDissolveDBC) == 0x000060, "Member 'BGWDataAsset_UnitDeathDispConfig_SetDefaultDBCAsset::Yang_AbnormalStateDissolveDBC' has a wrong offset!");

// Function b1-Managed.BED_MovieNode_ShowOrHiddenStreamingLevel.GetNodeDescriptionInCS
// 0x0010 (0x0010 - 0x0000)
struct BED_MovieNode_ShowOrHiddenStreamingLevel_GetNodeDescriptionInCS final
{
public:
	class FString                                 ReturnValue;                                       // 0x0000(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash)
};
//static_assert(alignof(BED_MovieNode_ShowOrHiddenStreamingLevel_GetNodeDescriptionInCS) == 0x000008, "Wrong alignment on BED_MovieNode_ShowOrHiddenStreamingLevel_GetNodeDescriptionInCS");
//static_assert(sizeof(BED_MovieNode_ShowOrHiddenStreamingLevel_GetNodeDescriptionInCS) == 0x000010, "Wrong size on BED_MovieNode_ShowOrHiddenStreamingLevel_GetNodeDescriptionInCS");
//static_assert(offsetof(BED_MovieNode_ShowOrHiddenStreamingLevel_GetNodeDescriptionInCS, ReturnValue) == 0x000000, "Member 'BED_MovieNode_ShowOrHiddenStreamingLevel_GetNodeDescriptionInCS::ReturnValue' has a wrong offset!");

// Function b1-Managed.BED_QuestNode_PlayAnimMontage.GetNodeDescriptionInCS
// 0x0010 (0x0010 - 0x0000)
struct BED_QuestNode_PlayAnimMontage_GetNodeDescriptionInCS final
{
public:
	class FString                                 ReturnValue;                                       // 0x0000(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash)
};
//static_assert(alignof(BED_QuestNode_PlayAnimMontage_GetNodeDescriptionInCS) == 0x000008, "Wrong alignment on BED_QuestNode_PlayAnimMontage_GetNodeDescriptionInCS");
//static_assert(sizeof(BED_QuestNode_PlayAnimMontage_GetNodeDescriptionInCS) == 0x000010, "Wrong size on BED_QuestNode_PlayAnimMontage_GetNodeDescriptionInCS");
//static_assert(offsetof(BED_QuestNode_PlayAnimMontage_GetNodeDescriptionInCS, ReturnValue) == 0x000000, "Member 'BED_QuestNode_PlayAnimMontage_GetNodeDescriptionInCS::ReturnValue' has a wrong offset!");

// Function b1-Managed.BUS_DispInteractAreaComp.OnActorLeave
// 0x0020 (0x0020 - 0x0000)
struct BUS_DispInteractAreaComp_OnActorLeave final
{
public:
	class UPrimitiveComponent*                    OverlappedComponent;                               // 0x0000(0x0008)(ExportObject, Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class AActor*                                 OtherActor;                                        // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UPrimitiveComponent*                    OtherComp;                                         // 0x0010(0x0008)(ExportObject, Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         OtherBodyIndex;                                    // 0x0018(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
//static_assert(alignof(BUS_DispInteractAreaComp_OnActorLeave) == 0x000008, "Wrong alignment on BUS_DispInteractAreaComp_OnActorLeave");
//static_assert(sizeof(BUS_DispInteractAreaComp_OnActorLeave) == 0x000020, "Wrong size on BUS_DispInteractAreaComp_OnActorLeave");
//static_assert(offsetof(BUS_DispInteractAreaComp_OnActorLeave, OverlappedComponent) == 0x000000, "Member 'BUS_DispInteractAreaComp_OnActorLeave::OverlappedComponent' has a wrong offset!");
//static_assert(offsetof(BUS_DispInteractAreaComp_OnActorLeave, OtherActor) == 0x000008, "Member 'BUS_DispInteractAreaComp_OnActorLeave::OtherActor' has a wrong offset!");
//static_assert(offsetof(BUS_DispInteractAreaComp_OnActorLeave, OtherComp) == 0x000010, "Member 'BUS_DispInteractAreaComp_OnActorLeave::OtherComp' has a wrong offset!");
//static_assert(offsetof(BUS_DispInteractAreaComp_OnActorLeave, OtherBodyIndex) == 0x000018, "Member 'BUS_DispInteractAreaComp_OnActorLeave::OtherBodyIndex' has a wrong offset!");

// Function b1-Managed.BUS_DispInteractAreaComp.OnActorEnter
// 0x0010 (0x0010 - 0x0000)
struct BUS_DispInteractAreaComp_OnActorEnter final
{
public:
	class AActor*                                 OverlappedActor;                                   // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class AActor*                                 OtherActor;                                        // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
//static_assert(alignof(BUS_DispInteractAreaComp_OnActorEnter) == 0x000008, "Wrong alignment on BUS_DispInteractAreaComp_OnActorEnter");
//static_assert(sizeof(BUS_DispInteractAreaComp_OnActorEnter) == 0x000010, "Wrong size on BUS_DispInteractAreaComp_OnActorEnter");
//static_assert(offsetof(BUS_DispInteractAreaComp_OnActorEnter, OverlappedActor) == 0x000000, "Member 'BUS_DispInteractAreaComp_OnActorEnter::OverlappedActor' has a wrong offset!");
//static_assert(offsetof(BUS_DispInteractAreaComp_OnActorEnter, OtherActor) == 0x000008, "Member 'BUS_DispInteractAreaComp_OnActorEnter::OtherActor' has a wrong offset!");

// Function b1-Managed.BUS_ManualSplineMoveCompImpl.OnCollisionBeginOverlap
// 0x0108 (0x0108 - 0x0000)
struct BUS_ManualSplineMoveCompImpl_OnCollisionBeginOverlap final
{
public:
	class UPrimitiveComponent*                    OverlappedComponent;                               // 0x0000(0x0008)(ExportObject, Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class AActor*                                 OtherActor;                                        // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UPrimitiveComponent*                    OtherComp;                                         // 0x0010(0x0008)(ExportObject, Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         OtherBodyIndex;                                    // 0x0018(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         bFromSweep : 1;                                    // 0x001C(0x0001)(BitIndex: 0x00, PropSize: 0x0001 (Parm, NoDestructor, HasGetValueTypeHash))
	uint8                                         Pad_1D[0x3];                                       // 0x001D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FHitResult                             SweepResult;                                       // 0x0020(0x00E8)(Parm, IsPlainOldData, NoDestructor)
};
//static_assert(alignof(BUS_ManualSplineMoveCompImpl_OnCollisionBeginOverlap) == 0x000008, "Wrong alignment on BUS_ManualSplineMoveCompImpl_OnCollisionBeginOverlap");
//static_assert(sizeof(BUS_ManualSplineMoveCompImpl_OnCollisionBeginOverlap) == 0x000108, "Wrong size on BUS_ManualSplineMoveCompImpl_OnCollisionBeginOverlap");
//static_assert(offsetof(BUS_ManualSplineMoveCompImpl_OnCollisionBeginOverlap, OverlappedComponent) == 0x000000, "Member 'BUS_ManualSplineMoveCompImpl_OnCollisionBeginOverlap::OverlappedComponent' has a wrong offset!");
//static_assert(offsetof(BUS_ManualSplineMoveCompImpl_OnCollisionBeginOverlap, OtherActor) == 0x000008, "Member 'BUS_ManualSplineMoveCompImpl_OnCollisionBeginOverlap::OtherActor' has a wrong offset!");
//static_assert(offsetof(BUS_ManualSplineMoveCompImpl_OnCollisionBeginOverlap, OtherComp) == 0x000010, "Member 'BUS_ManualSplineMoveCompImpl_OnCollisionBeginOverlap::OtherComp' has a wrong offset!");
//static_assert(offsetof(BUS_ManualSplineMoveCompImpl_OnCollisionBeginOverlap, OtherBodyIndex) == 0x000018, "Member 'BUS_ManualSplineMoveCompImpl_OnCollisionBeginOverlap::OtherBodyIndex' has a wrong offset!");
//static_assert(offsetof(BUS_ManualSplineMoveCompImpl_OnCollisionBeginOverlap, SweepResult) == 0x000020, "Member 'BUS_ManualSplineMoveCompImpl_OnCollisionBeginOverlap::SweepResult' has a wrong offset!");

// Function b1-Managed.BUS_ManualSplineMoveCompImpl.OnCollisionEndOverlap
// 0x0020 (0x0020 - 0x0000)
struct BUS_ManualSplineMoveCompImpl_OnCollisionEndOverlap final
{
public:
	class UPrimitiveComponent*                    OverlappedComponent;                               // 0x0000(0x0008)(ExportObject, Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class AActor*                                 OtherActor;                                        // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UPrimitiveComponent*                    OtherComp;                                         // 0x0010(0x0008)(ExportObject, Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         OtherBodyIndex;                                    // 0x0018(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
//static_assert(alignof(BUS_ManualSplineMoveCompImpl_OnCollisionEndOverlap) == 0x000008, "Wrong alignment on BUS_ManualSplineMoveCompImpl_OnCollisionEndOverlap");
//static_assert(sizeof(BUS_ManualSplineMoveCompImpl_OnCollisionEndOverlap) == 0x000020, "Wrong size on BUS_ManualSplineMoveCompImpl_OnCollisionEndOverlap");
//static_assert(offsetof(BUS_ManualSplineMoveCompImpl_OnCollisionEndOverlap, OverlappedComponent) == 0x000000, "Member 'BUS_ManualSplineMoveCompImpl_OnCollisionEndOverlap::OverlappedComponent' has a wrong offset!");
//static_assert(offsetof(BUS_ManualSplineMoveCompImpl_OnCollisionEndOverlap, OtherActor) == 0x000008, "Member 'BUS_ManualSplineMoveCompImpl_OnCollisionEndOverlap::OtherActor' has a wrong offset!");
//static_assert(offsetof(BUS_ManualSplineMoveCompImpl_OnCollisionEndOverlap, OtherComp) == 0x000010, "Member 'BUS_ManualSplineMoveCompImpl_OnCollisionEndOverlap::OtherComp' has a wrong offset!");
//static_assert(offsetof(BUS_ManualSplineMoveCompImpl_OnCollisionEndOverlap, OtherBodyIndex) == 0x000018, "Member 'BUS_ManualSplineMoveCompImpl_OnCollisionEndOverlap::OtherBodyIndex' has a wrong offset!");

// Function b1-Managed.BED_QuestNode_RaiseAwardProbability.GetNodeDescriptionInCS
// 0x0010 (0x0010 - 0x0000)
struct BED_QuestNode_RaiseAwardProbability_GetNodeDescriptionInCS final
{
public:
	class FString                                 ReturnValue;                                       // 0x0000(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash)
};
//static_assert(alignof(BED_QuestNode_RaiseAwardProbability_GetNodeDescriptionInCS) == 0x000008, "Wrong alignment on BED_QuestNode_RaiseAwardProbability_GetNodeDescriptionInCS");
//static_assert(sizeof(BED_QuestNode_RaiseAwardProbability_GetNodeDescriptionInCS) == 0x000010, "Wrong size on BED_QuestNode_RaiseAwardProbability_GetNodeDescriptionInCS");
//static_assert(offsetof(BED_QuestNode_RaiseAwardProbability_GetNodeDescriptionInCS, ReturnValue) == 0x000000, "Member 'BED_QuestNode_RaiseAwardProbability_GetNodeDescriptionInCS::ReturnValue' has a wrong offset!");

// Function b1-Managed.BSNS_PauseAI.OnNotifyBegin
// 0x0010 (0x0010 - 0x0000)
struct BSNS_PauseAI_OnNotifyBegin final
{
public:
	class UCalliopeLevelSequencePlayer*           InPlayer;                                          // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         InStatus;                                          // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         bInBackwards : 1;                                  // 0x000C(0x0001)(BitIndex: 0x00, PropSize: 0x0001 (Parm, NoDestructor, HasGetValueTypeHash))
};
//static_assert(alignof(BSNS_PauseAI_OnNotifyBegin) == 0x000008, "Wrong alignment on BSNS_PauseAI_OnNotifyBegin");
//static_assert(sizeof(BSNS_PauseAI_OnNotifyBegin) == 0x000010, "Wrong size on BSNS_PauseAI_OnNotifyBegin");
//static_assert(offsetof(BSNS_PauseAI_OnNotifyBegin, InPlayer) == 0x000000, "Member 'BSNS_PauseAI_OnNotifyBegin::InPlayer' has a wrong offset!");
//static_assert(offsetof(BSNS_PauseAI_OnNotifyBegin, InStatus) == 0x000008, "Member 'BSNS_PauseAI_OnNotifyBegin::InStatus' has a wrong offset!");

// Function b1-Managed.BSNS_PauseAI.OnNotifyEnd
// 0x0010 (0x0010 - 0x0000)
struct BSNS_PauseAI_OnNotifyEnd final
{
public:
	class UCalliopeLevelSequencePlayer*           InPlayer;                                          // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         InStatus;                                          // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         bInBackwards : 1;                                  // 0x000C(0x0001)(BitIndex: 0x00, PropSize: 0x0001 (Parm, NoDestructor, HasGetValueTypeHash))
};
//static_assert(alignof(BSNS_PauseAI_OnNotifyEnd) == 0x000008, "Wrong alignment on BSNS_PauseAI_OnNotifyEnd");
//static_assert(sizeof(BSNS_PauseAI_OnNotifyEnd) == 0x000010, "Wrong size on BSNS_PauseAI_OnNotifyEnd");
//static_assert(offsetof(BSNS_PauseAI_OnNotifyEnd, InPlayer) == 0x000000, "Member 'BSNS_PauseAI_OnNotifyEnd::InPlayer' has a wrong offset!");
//static_assert(offsetof(BSNS_PauseAI_OnNotifyEnd, InStatus) == 0x000008, "Member 'BSNS_PauseAI_OnNotifyEnd::InStatus' has a wrong offset!");

// Function b1-Managed.BSN_PostAkEventOnUnit.GetDurationTime
// 0x0004 (0x0004 - 0x0000)
struct BSN_PostAkEventOnUnit_GetDurationTime final
{
public:
	float                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
//static_assert(alignof(BSN_PostAkEventOnUnit_GetDurationTime) == 0x000004, "Wrong alignment on BSN_PostAkEventOnUnit_GetDurationTime");
//static_assert(sizeof(BSN_PostAkEventOnUnit_GetDurationTime) == 0x000004, "Wrong size on BSN_PostAkEventOnUnit_GetDurationTime");
//static_assert(offsetof(BSN_PostAkEventOnUnit_GetDurationTime, ReturnValue) == 0x000000, "Member 'BSN_PostAkEventOnUnit_GetDurationTime::ReturnValue' has a wrong offset!");

// Function b1-Managed.BSN_PostAkEventOnUnit.OnPreviewNotify
// 0x0010 (0x0010 - 0x0000)
struct BSN_PostAkEventOnUnit_OnPreviewNotify final
{
public:
	class UObject*                                InPlaybackContext;                                 // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         InStatus;                                          // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         bInBackwards : 1;                                  // 0x000C(0x0001)(BitIndex: 0x00, PropSize: 0x0001 (Parm, NoDestructor, HasGetValueTypeHash))
};
//static_assert(alignof(BSN_PostAkEventOnUnit_OnPreviewNotify) == 0x000008, "Wrong alignment on BSN_PostAkEventOnUnit_OnPreviewNotify");
//static_assert(sizeof(BSN_PostAkEventOnUnit_OnPreviewNotify) == 0x000010, "Wrong size on BSN_PostAkEventOnUnit_OnPreviewNotify");
//static_assert(offsetof(BSN_PostAkEventOnUnit_OnPreviewNotify, InPlaybackContext) == 0x000000, "Member 'BSN_PostAkEventOnUnit_OnPreviewNotify::InPlaybackContext' has a wrong offset!");
//static_assert(offsetof(BSN_PostAkEventOnUnit_OnPreviewNotify, InStatus) == 0x000008, "Member 'BSN_PostAkEventOnUnit_OnPreviewNotify::InStatus' has a wrong offset!");

// Function b1-Managed.BSN_PostAkEventOnUnit.GetDisplayName
// 0x0010 (0x0010 - 0x0000)
struct BSN_PostAkEventOnUnit_GetDisplayName final
{
public:
	class FString                                 ReturnValue;                                       // 0x0000(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash)
};
//static_assert(alignof(BSN_PostAkEventOnUnit_GetDisplayName) == 0x000008, "Wrong alignment on BSN_PostAkEventOnUnit_GetDisplayName");
//static_assert(sizeof(BSN_PostAkEventOnUnit_GetDisplayName) == 0x000010, "Wrong size on BSN_PostAkEventOnUnit_GetDisplayName");
//static_assert(offsetof(BSN_PostAkEventOnUnit_GetDisplayName, ReturnValue) == 0x000000, "Member 'BSN_PostAkEventOnUnit_GetDisplayName::ReturnValue' has a wrong offset!");

// Function b1-Managed.BSN_PostAkEventOnUnit.OnNotify
// 0x0010 (0x0010 - 0x0000)
struct BSN_PostAkEventOnUnit_OnNotify final
{
public:
	class UCalliopeLevelSequencePlayer*           InPlayer;                                          // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         InStatus;                                          // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         bInBackwards : 1;                                  // 0x000C(0x0001)(BitIndex: 0x00, PropSize: 0x0001 (Parm, NoDestructor, HasGetValueTypeHash))
};
//static_assert(alignof(BSN_PostAkEventOnUnit_OnNotify) == 0x000008, "Wrong alignment on BSN_PostAkEventOnUnit_OnNotify");
//static_assert(sizeof(BSN_PostAkEventOnUnit_OnNotify) == 0x000010, "Wrong size on BSN_PostAkEventOnUnit_OnNotify");
//static_assert(offsetof(BSN_PostAkEventOnUnit_OnNotify, InPlayer) == 0x000000, "Member 'BSN_PostAkEventOnUnit_OnNotify::InPlayer' has a wrong offset!");
//static_assert(offsetof(BSN_PostAkEventOnUnit_OnNotify, InStatus) == 0x000008, "Member 'BSN_PostAkEventOnUnit_OnNotify::InStatus' has a wrong offset!");

// Function b1-Managed.BGUProceduralMapGenerator.OnProceduralStreamLevelLoaded
// 0x0008 (0x0008 - 0x0000)
struct BGUProceduralMapGenerator_OnProceduralStreamLevelLoaded final
{
public:
	int32                                         ID;                                                // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Linkage;                                           // 0x0004(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
//static_assert(alignof(BGUProceduralMapGenerator_OnProceduralStreamLevelLoaded) == 0x000004, "Wrong alignment on BGUProceduralMapGenerator_OnProceduralStreamLevelLoaded");
//static_assert(sizeof(BGUProceduralMapGenerator_OnProceduralStreamLevelLoaded) == 0x000008, "Wrong size on BGUProceduralMapGenerator_OnProceduralStreamLevelLoaded");
//static_assert(offsetof(BGUProceduralMapGenerator_OnProceduralStreamLevelLoaded, ID) == 0x000000, "Member 'BGUProceduralMapGenerator_OnProceduralStreamLevelLoaded::ID' has a wrong offset!");
//static_assert(offsetof(BGUProceduralMapGenerator_OnProceduralStreamLevelLoaded, Linkage) == 0x000004, "Member 'BGUProceduralMapGenerator_OnProceduralStreamLevelLoaded::Linkage' has a wrong offset!");

// Function b1-Managed.BED_MovieNode_PerformerCatchTarget.GetNodeDescriptionInCS
// 0x0010 (0x0010 - 0x0000)
struct BED_MovieNode_PerformerCatchTarget_GetNodeDescriptionInCS final
{
public:
	class FString                                 ReturnValue;                                       // 0x0000(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash)
};
//static_assert(alignof(BED_MovieNode_PerformerCatchTarget_GetNodeDescriptionInCS) == 0x000008, "Wrong alignment on BED_MovieNode_PerformerCatchTarget_GetNodeDescriptionInCS");
//static_assert(sizeof(BED_MovieNode_PerformerCatchTarget_GetNodeDescriptionInCS) == 0x000010, "Wrong size on BED_MovieNode_PerformerCatchTarget_GetNodeDescriptionInCS");
//static_assert(offsetof(BED_MovieNode_PerformerCatchTarget_GetNodeDescriptionInCS, ReturnValue) == 0x000000, "Member 'BED_MovieNode_PerformerCatchTarget_GetNodeDescriptionInCS::ReturnValue' has a wrong offset!");

// Function b1-Managed.BSN_NotifyPlayEnd.OnNotify
// 0x0010 (0x0010 - 0x0000)
struct BSN_NotifyPlayEnd_OnNotify final
{
public:
	class UCalliopeLevelSequencePlayer*           InPlayer;                                          // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         InStatus;                                          // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         bInBackwards : 1;                                  // 0x000C(0x0001)(BitIndex: 0x00, PropSize: 0x0001 (Parm, NoDestructor, HasGetValueTypeHash))
};
//static_assert(alignof(BSN_NotifyPlayEnd_OnNotify) == 0x000008, "Wrong alignment on BSN_NotifyPlayEnd_OnNotify");
//static_assert(sizeof(BSN_NotifyPlayEnd_OnNotify) == 0x000010, "Wrong size on BSN_NotifyPlayEnd_OnNotify");
//static_assert(offsetof(BSN_NotifyPlayEnd_OnNotify, InPlayer) == 0x000000, "Member 'BSN_NotifyPlayEnd_OnNotify::InPlayer' has a wrong offset!");
//static_assert(offsetof(BSN_NotifyPlayEnd_OnNotify, InStatus) == 0x000008, "Member 'BSN_NotifyPlayEnd_OnNotify::InStatus' has a wrong offset!");

// Function b1-Managed.BGUProceduralSpawnSceneItemBase.OnConstructionCS
// 0x0060 (0x0060 - 0x0000)
struct BGUProceduralSpawnSceneItemBase_OnConstructionCS final
{
public:
	struct FTransform                             Transform;                                         // 0x0000(0x0060)(ConstParm, Parm, OutParm, ReferenceParm, IsPlainOldData, NoDestructor)
};
//static_assert(alignof(BGUProceduralSpawnSceneItemBase_OnConstructionCS) == 0x000010, "Wrong alignment on BGUProceduralSpawnSceneItemBase_OnConstructionCS");
//static_assert(sizeof(BGUProceduralSpawnSceneItemBase_OnConstructionCS) == 0x000060, "Wrong size on BGUProceduralSpawnSceneItemBase_OnConstructionCS");
//static_assert(offsetof(BGUProceduralSpawnSceneItemBase_OnConstructionCS, Transform) == 0x000000, "Member 'BGUProceduralSpawnSceneItemBase_OnConstructionCS::Transform' has a wrong offset!");

// Function b1-Managed.BUS_SceneInactiveActorComp.TickComponentInCS
// 0x0004 (0x0004 - 0x0000)
struct BUS_SceneInactiveActorComp_TickComponentInCS final
{
public:
	float                                         DeltaTime;                                         // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
//static_assert(alignof(BUS_SceneInactiveActorComp_TickComponentInCS) == 0x000004, "Wrong alignment on BUS_SceneInactiveActorComp_TickComponentInCS");
//static_assert(sizeof(BUS_SceneInactiveActorComp_TickComponentInCS) == 0x000004, "Wrong size on BUS_SceneInactiveActorComp_TickComponentInCS");
//static_assert(offsetof(BUS_SceneInactiveActorComp_TickComponentInCS, DeltaTime) == 0x000000, "Member 'BUS_SceneInactiveActorComp_TickComponentInCS::DeltaTime' has a wrong offset!");

// Function b1-Managed.BUS_SceneInactiveActorComp.GetSceneActorActivationInfo
// 0x0010 (0x0010 - 0x0000)
struct BUS_SceneInactiveActorComp_GetSceneActorActivationInfo final
{
public:
	TArray<struct FFGSSceneActorActivationInfo>   ReturnValue;                                       // 0x0000(0x0010)(Parm, OutParm, ReturnParm)
};
//static_assert(alignof(BUS_SceneInactiveActorComp_GetSceneActorActivationInfo) == 0x000008, "Wrong alignment on BUS_SceneInactiveActorComp_GetSceneActorActivationInfo");
//static_assert(sizeof(BUS_SceneInactiveActorComp_GetSceneActorActivationInfo) == 0x000010, "Wrong size on BUS_SceneInactiveActorComp_GetSceneActorActivationInfo");
//static_assert(offsetof(BUS_SceneInactiveActorComp_GetSceneActorActivationInfo, ReturnValue) == 0x000000, "Member 'BUS_SceneInactiveActorComp_GetSceneActorActivationInfo::ReturnValue' has a wrong offset!");

// Function b1-Managed.BUS_SceneInactiveActorComp.EndPlayInCS
// 0x0001 (0x0001 - 0x0000)
struct BUS_SceneInactiveActorComp_EndPlayInCS final
{
public:
	EEndPlayReason                                EndPlayReason;                                     // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
//static_assert(alignof(BUS_SceneInactiveActorComp_EndPlayInCS) == 0x000001, "Wrong alignment on BUS_SceneInactiveActorComp_EndPlayInCS");
//static_assert(sizeof(BUS_SceneInactiveActorComp_EndPlayInCS) == 0x000001, "Wrong size on BUS_SceneInactiveActorComp_EndPlayInCS");
//static_assert(offsetof(BUS_SceneInactiveActorComp_EndPlayInCS, EndPlayReason) == 0x000000, "Member 'BUS_SceneInactiveActorComp_EndPlayInCS::EndPlayReason' has a wrong offset!");

// Function b1-Managed.BUS_SceneInactiveActorComp.TryRemoveActivationInfo
// 0x000C (0x000C - 0x0000)
struct BUS_SceneInactiveActorComp_TryRemoveActivationInfo final
{
public:
	EGSSceneActorActivationType                   SceneActorActivationType;                          // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_1[0x3];                                        // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class FName                                   Tag;                                               // 0x0004(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
//static_assert(alignof(BUS_SceneInactiveActorComp_TryRemoveActivationInfo) == 0x000004, "Wrong alignment on BUS_SceneInactiveActorComp_TryRemoveActivationInfo");
//static_assert(sizeof(BUS_SceneInactiveActorComp_TryRemoveActivationInfo) == 0x00000C, "Wrong size on BUS_SceneInactiveActorComp_TryRemoveActivationInfo");
//static_assert(offsetof(BUS_SceneInactiveActorComp_TryRemoveActivationInfo, SceneActorActivationType) == 0x000000, "Member 'BUS_SceneInactiveActorComp_TryRemoveActivationInfo::SceneActorActivationType' has a wrong offset!");
//static_assert(offsetof(BUS_SceneInactiveActorComp_TryRemoveActivationInfo, Tag) == 0x000004, "Member 'BUS_SceneInactiveActorComp_TryRemoveActivationInfo::Tag' has a wrong offset!");

// Function b1-Managed.BUS_SceneInactiveActorComp.TryAddActivationInfo
// 0x0010 (0x0010 - 0x0000)
struct BUS_SceneInactiveActorComp_TryAddActivationInfo final
{
public:
	struct FFGSSceneActorActivationInfo           ActivationInfo;                                    // 0x0000(0x0010)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
//static_assert(alignof(BUS_SceneInactiveActorComp_TryAddActivationInfo) == 0x000004, "Wrong alignment on BUS_SceneInactiveActorComp_TryAddActivationInfo");
//static_assert(sizeof(BUS_SceneInactiveActorComp_TryAddActivationInfo) == 0x000010, "Wrong size on BUS_SceneInactiveActorComp_TryAddActivationInfo");
//static_assert(offsetof(BUS_SceneInactiveActorComp_TryAddActivationInfo, ActivationInfo) == 0x000000, "Member 'BUS_SceneInactiveActorComp_TryAddActivationInfo::ActivationInfo' has a wrong offset!");

// Function b1-Managed.BED_QuestNode_TrainDummyResultReport.GetNodeDescriptionInCS
// 0x0010 (0x0010 - 0x0000)
struct BED_QuestNode_TrainDummyResultReport_GetNodeDescriptionInCS final
{
public:
	class FString                                 ReturnValue;                                       // 0x0000(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash)
};
//static_assert(alignof(BED_QuestNode_TrainDummyResultReport_GetNodeDescriptionInCS) == 0x000008, "Wrong alignment on BED_QuestNode_TrainDummyResultReport_GetNodeDescriptionInCS");
//static_assert(sizeof(BED_QuestNode_TrainDummyResultReport_GetNodeDescriptionInCS) == 0x000010, "Wrong size on BED_QuestNode_TrainDummyResultReport_GetNodeDescriptionInCS");
//static_assert(offsetof(BED_QuestNode_TrainDummyResultReport_GetNodeDescriptionInCS, ReturnValue) == 0x000000, "Member 'BED_QuestNode_TrainDummyResultReport_GetNodeDescriptionInCS::ReturnValue' has a wrong offset!");

// Function b1-Managed.BUS_SeqHelperActorComp.PerformPerceivePlayer
// 0x0008 (0x0008 - 0x0000)
struct BUS_SeqHelperActorComp_PerformPerceivePlayer final
{
public:
	class FName                                   Tag;                                               // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
//static_assert(alignof(BUS_SeqHelperActorComp_PerformPerceivePlayer) == 0x000004, "Wrong alignment on BUS_SeqHelperActorComp_PerformPerceivePlayer");
//static_assert(sizeof(BUS_SeqHelperActorComp_PerformPerceivePlayer) == 0x000008, "Wrong size on BUS_SeqHelperActorComp_PerformPerceivePlayer");
//static_assert(offsetof(BUS_SeqHelperActorComp_PerformPerceivePlayer, Tag) == 0x000000, "Member 'BUS_SeqHelperActorComp_PerformPerceivePlayer::Tag' has a wrong offset!");

// Function b1-Managed.BUS_SeqHelperActorComp.PerformMoveToLocation
// 0x0030 (0x0030 - 0x0000)
struct BUS_SeqHelperActorComp_PerformMoveToLocation final
{
public:
	class FName                                   Tag;                                               // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                Position;                                          // 0x0008(0x0018)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	EAIMoveSpeedType                              SpeedRateType;                                     // 0x0020(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_21[0x3];                                       // 0x0021(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         AcceptableRadius;                                  // 0x0024(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	EBGUMoveAIType                                MoveAIType;                                        // 0x0028(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         IncludeSelfRadius : 1;                             // 0x0029(0x0001)(BitIndex: 0x00, PropSize: 0x0001 (Parm, NoDestructor, HasGetValueTypeHash))
	uint8                                         BitPad_29_1 : 7;                                   // 0x0029(0x0001)(Fixing Bit-Field Size For New Byte [ Dumper-7 ])
	uint8                                         IncludeTargetRadius : 1;                           // 0x002A(0x0001)(BitIndex: 0x00, PropSize: 0x0001 (Parm, NoDestructor, HasGetValueTypeHash))
};
//static_assert(alignof(BUS_SeqHelperActorComp_PerformMoveToLocation) == 0x000008, "Wrong alignment on BUS_SeqHelperActorComp_PerformMoveToLocation");
//static_assert(sizeof(BUS_SeqHelperActorComp_PerformMoveToLocation) == 0x000030, "Wrong size on BUS_SeqHelperActorComp_PerformMoveToLocation");
//static_assert(offsetof(BUS_SeqHelperActorComp_PerformMoveToLocation, Tag) == 0x000000, "Member 'BUS_SeqHelperActorComp_PerformMoveToLocation::Tag' has a wrong offset!");
//static_assert(offsetof(BUS_SeqHelperActorComp_PerformMoveToLocation, Position) == 0x000008, "Member 'BUS_SeqHelperActorComp_PerformMoveToLocation::Position' has a wrong offset!");
//static_assert(offsetof(BUS_SeqHelperActorComp_PerformMoveToLocation, SpeedRateType) == 0x000020, "Member 'BUS_SeqHelperActorComp_PerformMoveToLocation::SpeedRateType' has a wrong offset!");
//static_assert(offsetof(BUS_SeqHelperActorComp_PerformMoveToLocation, AcceptableRadius) == 0x000024, "Member 'BUS_SeqHelperActorComp_PerformMoveToLocation::AcceptableRadius' has a wrong offset!");
//static_assert(offsetof(BUS_SeqHelperActorComp_PerformMoveToLocation, MoveAIType) == 0x000028, "Member 'BUS_SeqHelperActorComp_PerformMoveToLocation::MoveAIType' has a wrong offset!");

// Function b1-Managed.BUS_SeqHelperActorComp.PerformMoveToPlayer
// 0x0014 (0x0014 - 0x0000)
struct BUS_SeqHelperActorComp_PerformMoveToPlayer final
{
public:
	class FName                                   Tag;                                               // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	EAIMoveSpeedType                              SpeedRateType;                                     // 0x0008(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_9[0x3];                                        // 0x0009(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         AcceptableRadius;                                  // 0x000C(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	EBGUMoveAIType                                MoveAIType;                                        // 0x0010(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         IncludeSelfRadius : 1;                             // 0x0011(0x0001)(BitIndex: 0x00, PropSize: 0x0001 (Parm, NoDestructor, HasGetValueTypeHash))
	uint8                                         BitPad_11_1 : 7;                                   // 0x0011(0x0001)(Fixing Bit-Field Size For New Byte [ Dumper-7 ])
	uint8                                         IncludeTargetRadius : 1;                           // 0x0012(0x0001)(BitIndex: 0x00, PropSize: 0x0001 (Parm, NoDestructor, HasGetValueTypeHash))
};
//static_assert(alignof(BUS_SeqHelperActorComp_PerformMoveToPlayer) == 0x000004, "Wrong alignment on BUS_SeqHelperActorComp_PerformMoveToPlayer");
//static_assert(sizeof(BUS_SeqHelperActorComp_PerformMoveToPlayer) == 0x000014, "Wrong size on BUS_SeqHelperActorComp_PerformMoveToPlayer");
//static_assert(offsetof(BUS_SeqHelperActorComp_PerformMoveToPlayer, Tag) == 0x000000, "Member 'BUS_SeqHelperActorComp_PerformMoveToPlayer::Tag' has a wrong offset!");
//static_assert(offsetof(BUS_SeqHelperActorComp_PerformMoveToPlayer, SpeedRateType) == 0x000008, "Member 'BUS_SeqHelperActorComp_PerformMoveToPlayer::SpeedRateType' has a wrong offset!");
//static_assert(offsetof(BUS_SeqHelperActorComp_PerformMoveToPlayer, AcceptableRadius) == 0x00000C, "Member 'BUS_SeqHelperActorComp_PerformMoveToPlayer::AcceptableRadius' has a wrong offset!");
//static_assert(offsetof(BUS_SeqHelperActorComp_PerformMoveToPlayer, MoveAIType) == 0x000010, "Member 'BUS_SeqHelperActorComp_PerformMoveToPlayer::MoveAIType' has a wrong offset!");

// Function b1-Managed.BUS_SeqHelperActorComp.SpawnPlayerPartner
// 0x0080 (0x0080 - 0x0000)
struct BUS_SeqHelperActorComp_SpawnPlayerPartner final
{
public:
	class UClass*                                 Class_0;                                           // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_8[0x8];                                        // 0x0008(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	struct FTransform                             Transform;                                         // 0x0010(0x0060)(Parm, IsPlainOldData, NoDestructor)
	class FName                                   Tag;                                               // 0x0070(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         PauseAI : 1;                                       // 0x0078(0x0001)(BitIndex: 0x00, PropSize: 0x0001 (Parm, NoDestructor, HasGetValueTypeHash))
};
//static_assert(alignof(BUS_SeqHelperActorComp_SpawnPlayerPartner) == 0x000010, "Wrong alignment on BUS_SeqHelperActorComp_SpawnPlayerPartner");
//static_assert(sizeof(BUS_SeqHelperActorComp_SpawnPlayerPartner) == 0x000080, "Wrong size on BUS_SeqHelperActorComp_SpawnPlayerPartner");
//static_assert(offsetof(BUS_SeqHelperActorComp_SpawnPlayerPartner, Class_0) == 0x000000, "Member 'BUS_SeqHelperActorComp_SpawnPlayerPartner::Class_0' has a wrong offset!");
//static_assert(offsetof(BUS_SeqHelperActorComp_SpawnPlayerPartner, Transform) == 0x000010, "Member 'BUS_SeqHelperActorComp_SpawnPlayerPartner::Transform' has a wrong offset!");
//static_assert(offsetof(BUS_SeqHelperActorComp_SpawnPlayerPartner, Tag) == 0x000070, "Member 'BUS_SeqHelperActorComp_SpawnPlayerPartner::Tag' has a wrong offset!");

// Function b1-Managed.BUS_SeqHelperActorComp.UpdateSimpleStates
// 0x000C (0x000C - 0x0000)
struct BUS_SeqHelperActorComp_UpdateSimpleStates final
{
public:
	class FName                                   Tag;                                               // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	EBGUSimpleState                               SimpleState;                                       // 0x0008(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         IsRemoving : 1;                                    // 0x0009(0x0001)(BitIndex: 0x00, PropSize: 0x0001 (Parm, NoDestructor, HasGetValueTypeHash))
};
//static_assert(alignof(BUS_SeqHelperActorComp_UpdateSimpleStates) == 0x000004, "Wrong alignment on BUS_SeqHelperActorComp_UpdateSimpleStates");
//static_assert(sizeof(BUS_SeqHelperActorComp_UpdateSimpleStates) == 0x00000C, "Wrong size on BUS_SeqHelperActorComp_UpdateSimpleStates");
//static_assert(offsetof(BUS_SeqHelperActorComp_UpdateSimpleStates, Tag) == 0x000000, "Member 'BUS_SeqHelperActorComp_UpdateSimpleStates::Tag' has a wrong offset!");
//static_assert(offsetof(BUS_SeqHelperActorComp_UpdateSimpleStates, SimpleState) == 0x000008, "Member 'BUS_SeqHelperActorComp_UpdateSimpleStates::SimpleState' has a wrong offset!");

// Function b1-Managed.BUS_SeqHelperActorComp.NotifyUnitDead
// 0x0008 (0x0008 - 0x0000)
struct BUS_SeqHelperActorComp_NotifyUnitDead final
{
public:
	class FName                                   Tag;                                               // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
//static_assert(alignof(BUS_SeqHelperActorComp_NotifyUnitDead) == 0x000004, "Wrong alignment on BUS_SeqHelperActorComp_NotifyUnitDead");
//static_assert(sizeof(BUS_SeqHelperActorComp_NotifyUnitDead) == 0x000008, "Wrong size on BUS_SeqHelperActorComp_NotifyUnitDead");
//static_assert(offsetof(BUS_SeqHelperActorComp_NotifyUnitDead, Tag) == 0x000000, "Member 'BUS_SeqHelperActorComp_NotifyUnitDead::Tag' has a wrong offset!");

// Function b1-Managed.BUS_SeqHelperActorComp.SetVisibility
// 0x000C (0x000C - 0x0000)
struct BUS_SeqHelperActorComp_SetVisibility final
{
public:
	class FName                                   Tag;                                               // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         IsHidden : 1;                                      // 0x0008(0x0001)(BitIndex: 0x00, PropSize: 0x0001 (Parm, NoDestructor, HasGetValueTypeHash))
	uint8                                         BitPad_8_1 : 7;                                    // 0x0008(0x0001)(Fixing Bit-Field Size For New Byte [ Dumper-7 ])
	uint8                                         EnableCollision : 1;                               // 0x0009(0x0001)(BitIndex: 0x00, PropSize: 0x0001 (Parm, NoDestructor, HasGetValueTypeHash))
};
//static_assert(alignof(BUS_SeqHelperActorComp_SetVisibility) == 0x000004, "Wrong alignment on BUS_SeqHelperActorComp_SetVisibility");
//static_assert(sizeof(BUS_SeqHelperActorComp_SetVisibility) == 0x00000C, "Wrong size on BUS_SeqHelperActorComp_SetVisibility");
//static_assert(offsetof(BUS_SeqHelperActorComp_SetVisibility, Tag) == 0x000000, "Member 'BUS_SeqHelperActorComp_SetVisibility::Tag' has a wrong offset!");

// Function b1-Managed.BUS_SeqHelperActorComp.CatchAsTarget
// 0x0010 (0x0010 - 0x0000)
struct BUS_SeqHelperActorComp_CatchAsTarget final
{
public:
	class FName                                   SelfTag;                                           // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class FName                                   TargetTag;                                         // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
//static_assert(alignof(BUS_SeqHelperActorComp_CatchAsTarget) == 0x000004, "Wrong alignment on BUS_SeqHelperActorComp_CatchAsTarget");
//static_assert(sizeof(BUS_SeqHelperActorComp_CatchAsTarget) == 0x000010, "Wrong size on BUS_SeqHelperActorComp_CatchAsTarget");
//static_assert(offsetof(BUS_SeqHelperActorComp_CatchAsTarget, SelfTag) == 0x000000, "Member 'BUS_SeqHelperActorComp_CatchAsTarget::SelfTag' has a wrong offset!");
//static_assert(offsetof(BUS_SeqHelperActorComp_CatchAsTarget, TargetTag) == 0x000008, "Member 'BUS_SeqHelperActorComp_CatchAsTarget::TargetTag' has a wrong offset!");

// Function b1-Managed.BUS_SeqHelperActorComp.PerformPatrol
// 0x0008 (0x0008 - 0x0000)
struct BUS_SeqHelperActorComp_PerformPatrol final
{
public:
	class FName                                   Tag;                                               // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
//static_assert(alignof(BUS_SeqHelperActorComp_PerformPatrol) == 0x000004, "Wrong alignment on BUS_SeqHelperActorComp_PerformPatrol");
//static_assert(sizeof(BUS_SeqHelperActorComp_PerformPatrol) == 0x000008, "Wrong size on BUS_SeqHelperActorComp_PerformPatrol");
//static_assert(offsetof(BUS_SeqHelperActorComp_PerformPatrol, Tag) == 0x000000, "Member 'BUS_SeqHelperActorComp_PerformPatrol::Tag' has a wrong offset!");

// Function b1-Managed.BUS_SeqHelperActorComp.PlayMontage
// 0x0010 (0x0010 - 0x0000)
struct BUS_SeqHelperActorComp_PlayMontage final
{
public:
	class FName                                   Tag;                                               // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UAnimMontage*                           MontageToPlay;                                     // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
//static_assert(alignof(BUS_SeqHelperActorComp_PlayMontage) == 0x000008, "Wrong alignment on BUS_SeqHelperActorComp_PlayMontage");
//static_assert(sizeof(BUS_SeqHelperActorComp_PlayMontage) == 0x000010, "Wrong size on BUS_SeqHelperActorComp_PlayMontage");
//static_assert(offsetof(BUS_SeqHelperActorComp_PlayMontage, Tag) == 0x000000, "Member 'BUS_SeqHelperActorComp_PlayMontage::Tag' has a wrong offset!");
//static_assert(offsetof(BUS_SeqHelperActorComp_PlayMontage, MontageToPlay) == 0x000008, "Member 'BUS_SeqHelperActorComp_PlayMontage::MontageToPlay' has a wrong offset!");

// Function b1-Managed.BUS_SeqHelperActorComp.DisableAI
// 0x0008 (0x0008 - 0x0000)
struct BUS_SeqHelperActorComp_DisableAI final
{
public:
	class FName                                   Tag;                                               // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
//static_assert(alignof(BUS_SeqHelperActorComp_DisableAI) == 0x000004, "Wrong alignment on BUS_SeqHelperActorComp_DisableAI");
//static_assert(sizeof(BUS_SeqHelperActorComp_DisableAI) == 0x000008, "Wrong size on BUS_SeqHelperActorComp_DisableAI");
//static_assert(offsetof(BUS_SeqHelperActorComp_DisableAI, Tag) == 0x000000, "Member 'BUS_SeqHelperActorComp_DisableAI::Tag' has a wrong offset!");

// Function b1-Managed.BUS_SeqHelperActorComp.EnableAI
// 0x0008 (0x0008 - 0x0000)
struct BUS_SeqHelperActorComp_EnableAI final
{
public:
	class FName                                   Tag;                                               // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
//static_assert(alignof(BUS_SeqHelperActorComp_EnableAI) == 0x000004, "Wrong alignment on BUS_SeqHelperActorComp_EnableAI");
//static_assert(sizeof(BUS_SeqHelperActorComp_EnableAI) == 0x000008, "Wrong size on BUS_SeqHelperActorComp_EnableAI");
//static_assert(offsetof(BUS_SeqHelperActorComp_EnableAI, Tag) == 0x000000, "Member 'BUS_SeqHelperActorComp_EnableAI::Tag' has a wrong offset!");

// Function b1-Managed.BUS_SeqHelperActorComp.AddBuff
// 0x0014 (0x0014 - 0x0000)
struct BUS_SeqHelperActorComp_AddBuff final
{
public:
	class FName                                   Tag;                                               // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         IsRemoving : 1;                                    // 0x0008(0x0001)(BitIndex: 0x00, PropSize: 0x0001 (Parm, NoDestructor, HasGetValueTypeHash))
	uint8                                         Pad_9[0x3];                                        // 0x0009(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         BuffID;                                            // 0x000C(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         Duration;                                          // 0x0010(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
//static_assert(alignof(BUS_SeqHelperActorComp_AddBuff) == 0x000004, "Wrong alignment on BUS_SeqHelperActorComp_AddBuff");
//static_assert(sizeof(BUS_SeqHelperActorComp_AddBuff) == 0x000014, "Wrong size on BUS_SeqHelperActorComp_AddBuff");
//static_assert(offsetof(BUS_SeqHelperActorComp_AddBuff, Tag) == 0x000000, "Member 'BUS_SeqHelperActorComp_AddBuff::Tag' has a wrong offset!");
//static_assert(offsetof(BUS_SeqHelperActorComp_AddBuff, BuffID) == 0x00000C, "Member 'BUS_SeqHelperActorComp_AddBuff::BuffID' has a wrong offset!");
//static_assert(offsetof(BUS_SeqHelperActorComp_AddBuff, Duration) == 0x000010, "Member 'BUS_SeqHelperActorComp_AddBuff::Duration' has a wrong offset!");

// Function b1-Managed.BAN_GSParkourAnimInfo.bIsNativeBranchingPointCS
// 0x0001 (0x0001 - 0x0000)
struct BAN_GSParkourAnimInfo_bIsNativeBranchingPointCS final
{
public:
	uint8                                         ReturnValue : 1;                                   // 0x0000(0x0001)(BitIndex: 0x00, PropSize: 0x0001 (Parm, OutParm, ReturnParm, NoDestructor, HasGetValueTypeHash))
};
//static_assert(alignof(BAN_GSParkourAnimInfo_bIsNativeBranchingPointCS) == 0x000001, "Wrong alignment on BAN_GSParkourAnimInfo_bIsNativeBranchingPointCS");
//static_assert(sizeof(BAN_GSParkourAnimInfo_bIsNativeBranchingPointCS) == 0x000001, "Wrong size on BAN_GSParkourAnimInfo_bIsNativeBranchingPointCS");

// Function b1-Managed.BAN_GSParkourAnimInfo.GSNotifyCS
// 0x0040 (0x0040 - 0x0000)
struct BAN_GSParkourAnimInfo_GSNotifyCS final
{
public:
	struct FUStGSNotifyParam                      NotifyParam;                                       // 0x0000(0x0040)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
//static_assert(alignof(BAN_GSParkourAnimInfo_GSNotifyCS) == 0x000008, "Wrong alignment on BAN_GSParkourAnimInfo_GSNotifyCS");
//static_assert(sizeof(BAN_GSParkourAnimInfo_GSNotifyCS) == 0x000040, "Wrong size on BAN_GSParkourAnimInfo_GSNotifyCS");
//static_assert(offsetof(BAN_GSParkourAnimInfo_GSNotifyCS, NotifyParam) == 0x000000, "Member 'BAN_GSParkourAnimInfo_GSNotifyCS::NotifyParam' has a wrong offset!");

// Function b1-Managed.BAN_GSParkourAnimInfo.SetAnimMovementValue
// 0x0018 (0x0018 - 0x0000)
struct BAN_GSParkourAnimInfo_SetAnimMovementValue final
{
public:
	struct FVector                                Movement;                                          // 0x0000(0x0018)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
//static_assert(alignof(BAN_GSParkourAnimInfo_SetAnimMovementValue) == 0x000008, "Wrong alignment on BAN_GSParkourAnimInfo_SetAnimMovementValue");
//static_assert(sizeof(BAN_GSParkourAnimInfo_SetAnimMovementValue) == 0x000018, "Wrong size on BAN_GSParkourAnimInfo_SetAnimMovementValue");
//static_assert(offsetof(BAN_GSParkourAnimInfo_SetAnimMovementValue, Movement) == 0x000000, "Member 'BAN_GSParkourAnimInfo_SetAnimMovementValue::Movement' has a wrong offset!");

// Function b1-Managed.BGAnimSpider.BlueprintUpdateAnimation
// 0x0004 (0x0004 - 0x0000)
struct BGAnimSpider_BlueprintUpdateAnimation final
{
public:
	float                                         DeltaSeconds;                                      // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
//static_assert(alignof(BGAnimSpider_BlueprintUpdateAnimation) == 0x000004, "Wrong alignment on BGAnimSpider_BlueprintUpdateAnimation");
//static_assert(sizeof(BGAnimSpider_BlueprintUpdateAnimation) == 0x000004, "Wrong size on BGAnimSpider_BlueprintUpdateAnimation");
//static_assert(offsetof(BGAnimSpider_BlueprintUpdateAnimation, DeltaSeconds) == 0x000000, "Member 'BGAnimSpider_BlueprintUpdateAnimation::DeltaSeconds' has a wrong offset!");

// Function b1-Managed.BAN_GSDetachMultipleWeapons.bIsNativeBranchingPointCS
// 0x0001 (0x0001 - 0x0000)
struct BAN_GSDetachMultipleWeapons_bIsNativeBranchingPointCS final
{
public:
	uint8                                         ReturnValue : 1;                                   // 0x0000(0x0001)(BitIndex: 0x00, PropSize: 0x0001 (Parm, OutParm, ReturnParm, NoDestructor, HasGetValueTypeHash))
};
//static_assert(alignof(BAN_GSDetachMultipleWeapons_bIsNativeBranchingPointCS) == 0x000001, "Wrong alignment on BAN_GSDetachMultipleWeapons_bIsNativeBranchingPointCS");
//static_assert(sizeof(BAN_GSDetachMultipleWeapons_bIsNativeBranchingPointCS) == 0x000001, "Wrong size on BAN_GSDetachMultipleWeapons_bIsNativeBranchingPointCS");

// Function b1-Managed.BAN_GSDetachMultipleWeapons.GSNotifyCS
// 0x0040 (0x0040 - 0x0000)
struct BAN_GSDetachMultipleWeapons_GSNotifyCS final
{
public:
	struct FUStGSNotifyParam                      NotifyParam;                                       // 0x0000(0x0040)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
//static_assert(alignof(BAN_GSDetachMultipleWeapons_GSNotifyCS) == 0x000008, "Wrong alignment on BAN_GSDetachMultipleWeapons_GSNotifyCS");
//static_assert(sizeof(BAN_GSDetachMultipleWeapons_GSNotifyCS) == 0x000040, "Wrong size on BAN_GSDetachMultipleWeapons_GSNotifyCS");
//static_assert(offsetof(BAN_GSDetachMultipleWeapons_GSNotifyCS, NotifyParam) == 0x000000, "Member 'BAN_GSDetachMultipleWeapons_GSNotifyCS::NotifyParam' has a wrong offset!");

// Function b1-Managed.BUAnimHumanoidCS_PlayerLocomotion.SetupSequenceTransitionAnim
// 0x0020 (0x0020 - 0x0000)
struct BUAnimHumanoidCS_PlayerLocomotion_SetupSequenceTransitionAnim final
{
public:
	struct FAnimUpdateContext                     Context;                                           // 0x0000(0x0010)(Parm, OutParm, ReferenceParm)
	struct FAnimNodeReference                     Node;                                              // 0x0010(0x0010)(Parm, OutParm, ReferenceParm, NoDestructor)
};
//static_assert(alignof(BUAnimHumanoidCS_PlayerLocomotion_SetupSequenceTransitionAnim) == 0x000008, "Wrong alignment on BUAnimHumanoidCS_PlayerLocomotion_SetupSequenceTransitionAnim");
//static_assert(sizeof(BUAnimHumanoidCS_PlayerLocomotion_SetupSequenceTransitionAnim) == 0x000020, "Wrong size on BUAnimHumanoidCS_PlayerLocomotion_SetupSequenceTransitionAnim");
//static_assert(offsetof(BUAnimHumanoidCS_PlayerLocomotion_SetupSequenceTransitionAnim, Context) == 0x000000, "Member 'BUAnimHumanoidCS_PlayerLocomotion_SetupSequenceTransitionAnim::Context' has a wrong offset!");
//static_assert(offsetof(BUAnimHumanoidCS_PlayerLocomotion_SetupSequenceTransitionAnim, Node) == 0x000010, "Member 'BUAnimHumanoidCS_PlayerLocomotion_SetupSequenceTransitionAnim::Node' has a wrong offset!");

// Function b1-Managed.BUAnimHumanoidCS_PlayerLocomotion.GetRandomIdleAnim
// 0x0020 (0x0020 - 0x0000)
struct BUAnimHumanoidCS_PlayerLocomotion_GetRandomIdleAnim final
{
public:
	struct FAnimUpdateContext                     Context;                                           // 0x0000(0x0010)(Parm, OutParm, ReferenceParm)
	struct FAnimNodeReference                     Node;                                              // 0x0010(0x0010)(Parm, OutParm, ReferenceParm, NoDestructor)
};
//static_assert(alignof(BUAnimHumanoidCS_PlayerLocomotion_GetRandomIdleAnim) == 0x000008, "Wrong alignment on BUAnimHumanoidCS_PlayerLocomotion_GetRandomIdleAnim");
//static_assert(sizeof(BUAnimHumanoidCS_PlayerLocomotion_GetRandomIdleAnim) == 0x000020, "Wrong size on BUAnimHumanoidCS_PlayerLocomotion_GetRandomIdleAnim");
//static_assert(offsetof(BUAnimHumanoidCS_PlayerLocomotion_GetRandomIdleAnim, Context) == 0x000000, "Member 'BUAnimHumanoidCS_PlayerLocomotion_GetRandomIdleAnim::Context' has a wrong offset!");
//static_assert(offsetof(BUAnimHumanoidCS_PlayerLocomotion_GetRandomIdleAnim, Node) == 0x000010, "Member 'BUAnimHumanoidCS_PlayerLocomotion_GetRandomIdleAnim::Node' has a wrong offset!");

// Function b1-Managed.BUAnimHumanoidCS_PlayerLocomotion.SetUpRushStopAnim
// 0x0020 (0x0020 - 0x0000)
struct BUAnimHumanoidCS_PlayerLocomotion_SetUpRushStopAnim final
{
public:
	struct FAnimUpdateContext                     Context;                                           // 0x0000(0x0010)(Parm, OutParm, ReferenceParm)
	struct FAnimNodeReference                     Node;                                              // 0x0010(0x0010)(Parm, OutParm, ReferenceParm, NoDestructor)
};
//static_assert(alignof(BUAnimHumanoidCS_PlayerLocomotion_SetUpRushStopAnim) == 0x000008, "Wrong alignment on BUAnimHumanoidCS_PlayerLocomotion_SetUpRushStopAnim");
//static_assert(sizeof(BUAnimHumanoidCS_PlayerLocomotion_SetUpRushStopAnim) == 0x000020, "Wrong size on BUAnimHumanoidCS_PlayerLocomotion_SetUpRushStopAnim");
//static_assert(offsetof(BUAnimHumanoidCS_PlayerLocomotion_SetUpRushStopAnim, Context) == 0x000000, "Member 'BUAnimHumanoidCS_PlayerLocomotion_SetUpRushStopAnim::Context' has a wrong offset!");
//static_assert(offsetof(BUAnimHumanoidCS_PlayerLocomotion_SetUpRushStopAnim, Node) == 0x000010, "Member 'BUAnimHumanoidCS_PlayerLocomotion_SetUpRushStopAnim::Node' has a wrong offset!");

// Function b1-Managed.BANS_GSSwitchMovementMode.GSNotifyBeginCS
// 0x0048 (0x0048 - 0x0000)
struct BANS_GSSwitchMovementMode_GSNotifyBeginCS final
{
public:
	struct FUStGSNotifyParam                      NotifyParam;                                       // 0x0000(0x0040)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
	float                                         TotalDuration;                                     // 0x0040(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
//static_assert(alignof(BANS_GSSwitchMovementMode_GSNotifyBeginCS) == 0x000008, "Wrong alignment on BANS_GSSwitchMovementMode_GSNotifyBeginCS");
//static_assert(sizeof(BANS_GSSwitchMovementMode_GSNotifyBeginCS) == 0x000048, "Wrong size on BANS_GSSwitchMovementMode_GSNotifyBeginCS");
//static_assert(offsetof(BANS_GSSwitchMovementMode_GSNotifyBeginCS, NotifyParam) == 0x000000, "Member 'BANS_GSSwitchMovementMode_GSNotifyBeginCS::NotifyParam' has a wrong offset!");
//static_assert(offsetof(BANS_GSSwitchMovementMode_GSNotifyBeginCS, TotalDuration) == 0x000040, "Member 'BANS_GSSwitchMovementMode_GSNotifyBeginCS::TotalDuration' has a wrong offset!");

// Function b1-Managed.BANS_GSSwitchMovementMode.GSNotifyEndCS
// 0x0040 (0x0040 - 0x0000)
struct BANS_GSSwitchMovementMode_GSNotifyEndCS final
{
public:
	struct FUStGSNotifyParam                      NotifyParam;                                       // 0x0000(0x0040)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
//static_assert(alignof(BANS_GSSwitchMovementMode_GSNotifyEndCS) == 0x000008, "Wrong alignment on BANS_GSSwitchMovementMode_GSNotifyEndCS");
//static_assert(sizeof(BANS_GSSwitchMovementMode_GSNotifyEndCS) == 0x000040, "Wrong size on BANS_GSSwitchMovementMode_GSNotifyEndCS");
//static_assert(offsetof(BANS_GSSwitchMovementMode_GSNotifyEndCS, NotifyParam) == 0x000000, "Member 'BANS_GSSwitchMovementMode_GSNotifyEndCS::NotifyParam' has a wrong offset!");

// Function b1-Managed.BED_BehaviorNode_PlayPigsyStory.IsSupportViewType
// 0x0002 (0x0002 - 0x0000)
struct BED_BehaviorNode_PlayPigsyStory_IsSupportViewType final
{
public:
	ECalliopeViewType                             InViewType;                                        // 0x0000(0x0001)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         ReturnValue : 1;                                   // 0x0001(0x0001)(BitIndex: 0x00, PropSize: 0x0001 (Parm, OutParm, ReturnParm, NoDestructor, HasGetValueTypeHash))
};
//static_assert(alignof(BED_BehaviorNode_PlayPigsyStory_IsSupportViewType) == 0x000001, "Wrong alignment on BED_BehaviorNode_PlayPigsyStory_IsSupportViewType");
//static_assert(sizeof(BED_BehaviorNode_PlayPigsyStory_IsSupportViewType) == 0x000002, "Wrong size on BED_BehaviorNode_PlayPigsyStory_IsSupportViewType");
//static_assert(offsetof(BED_BehaviorNode_PlayPigsyStory_IsSupportViewType, InViewType) == 0x000000, "Member 'BED_BehaviorNode_PlayPigsyStory_IsSupportViewType::InViewType' has a wrong offset!");

// Function b1-Managed.BGU_DebugActor.OnConstructionCS
// 0x0060 (0x0060 - 0x0000)
struct BGU_DebugActor_OnConstructionCS final
{
public:
	struct FTransform                             Transform;                                         // 0x0000(0x0060)(ConstParm, Parm, OutParm, ReferenceParm, IsPlainOldData, NoDestructor)
};
//static_assert(alignof(BGU_DebugActor_OnConstructionCS) == 0x000010, "Wrong alignment on BGU_DebugActor_OnConstructionCS");
//static_assert(sizeof(BGU_DebugActor_OnConstructionCS) == 0x000060, "Wrong size on BGU_DebugActor_OnConstructionCS");
//static_assert(offsetof(BGU_DebugActor_OnConstructionCS, Transform) == 0x000000, "Member 'BGU_DebugActor_OnConstructionCS::Transform' has a wrong offset!");

// Function b1-Managed.BUS_AIComp.OnTargetPerceptionUpdated
// 0x0060 (0x0060 - 0x0000)
struct BUS_AIComp_OnTargetPerceptionUpdated final
{
public:
	class AActor*                                 Target;                                            // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FAIStimulus                            Stimulus;                                          // 0x0008(0x0058)(Parm, NoDestructor)
};
//static_assert(alignof(BUS_AIComp_OnTargetPerceptionUpdated) == 0x000008, "Wrong alignment on BUS_AIComp_OnTargetPerceptionUpdated");
//static_assert(sizeof(BUS_AIComp_OnTargetPerceptionUpdated) == 0x000060, "Wrong size on BUS_AIComp_OnTargetPerceptionUpdated");
//static_assert(offsetof(BUS_AIComp_OnTargetPerceptionUpdated, Target) == 0x000000, "Member 'BUS_AIComp_OnTargetPerceptionUpdated::Target' has a wrong offset!");
//static_assert(offsetof(BUS_AIComp_OnTargetPerceptionUpdated, Stimulus) == 0x000008, "Member 'BUS_AIComp_OnTargetPerceptionUpdated::Stimulus' has a wrong offset!");

// Function b1-Managed.BUI_ProjectileDebugInfo.OnRegistOwner
// 0x0008 (0x0008 - 0x0000)
struct BUI_ProjectileDebugInfo_OnRegistOwner final
{
public:
	class ABGUProjectileBaseActor*                ProjectileBaseActor;                               // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
//static_assert(alignof(BUI_ProjectileDebugInfo_OnRegistOwner) == 0x000008, "Wrong alignment on BUI_ProjectileDebugInfo_OnRegistOwner");
//static_assert(sizeof(BUI_ProjectileDebugInfo_OnRegistOwner) == 0x000008, "Wrong size on BUI_ProjectileDebugInfo_OnRegistOwner");
//static_assert(offsetof(BUI_ProjectileDebugInfo_OnRegistOwner, ProjectileBaseActor) == 0x000000, "Member 'BUI_ProjectileDebugInfo_OnRegistOwner::ProjectileBaseActor' has a wrong offset!");

// Function b1-Managed.BUS_PlayerCameraCompUObj.OnSwitchCameraGroupTo
// 0x000C (0x000C - 0x0000)
struct BUS_PlayerCameraCompUObj_OnSwitchCameraGroupTo final
{
public:
	int32                                         TargetCameraGroupId;                               // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         Alpha;                                             // 0x0004(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         BlendTime;                                         // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
//static_assert(alignof(BUS_PlayerCameraCompUObj_OnSwitchCameraGroupTo) == 0x000004, "Wrong alignment on BUS_PlayerCameraCompUObj_OnSwitchCameraGroupTo");
//static_assert(sizeof(BUS_PlayerCameraCompUObj_OnSwitchCameraGroupTo) == 0x00000C, "Wrong size on BUS_PlayerCameraCompUObj_OnSwitchCameraGroupTo");
//static_assert(offsetof(BUS_PlayerCameraCompUObj_OnSwitchCameraGroupTo, TargetCameraGroupId) == 0x000000, "Member 'BUS_PlayerCameraCompUObj_OnSwitchCameraGroupTo::TargetCameraGroupId' has a wrong offset!");
//static_assert(offsetof(BUS_PlayerCameraCompUObj_OnSwitchCameraGroupTo, Alpha) == 0x000004, "Member 'BUS_PlayerCameraCompUObj_OnSwitchCameraGroupTo::Alpha' has a wrong offset!");
//static_assert(offsetof(BUS_PlayerCameraCompUObj_OnSwitchCameraGroupTo, BlendTime) == 0x000008, "Member 'BUS_PlayerCameraCompUObj_OnSwitchCameraGroupTo::BlendTime' has a wrong offset!");

// Function b1-Managed.FlowOverlapCompFunctionBinder.OnCollisionBeginOverlap
// 0x0108 (0x0108 - 0x0000)
struct FlowOverlapCompFunctionBinder_OnCollisionBeginOverlap final
{
public:
	class UPrimitiveComponent*                    OverlappedComponent;                               // 0x0000(0x0008)(ExportObject, Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class AActor*                                 OtherActor;                                        // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UPrimitiveComponent*                    OtherComp;                                         // 0x0010(0x0008)(ExportObject, Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         OtherBodyIndex;                                    // 0x0018(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         bFromSweep : 1;                                    // 0x001C(0x0001)(BitIndex: 0x00, PropSize: 0x0001 (Parm, NoDestructor, HasGetValueTypeHash))
	uint8                                         Pad_1D[0x3];                                       // 0x001D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FHitResult                             SweepResult;                                       // 0x0020(0x00E8)(Parm, IsPlainOldData, NoDestructor)
};
//static_assert(alignof(FlowOverlapCompFunctionBinder_OnCollisionBeginOverlap) == 0x000008, "Wrong alignment on FlowOverlapCompFunctionBinder_OnCollisionBeginOverlap");
//static_assert(sizeof(FlowOverlapCompFunctionBinder_OnCollisionBeginOverlap) == 0x000108, "Wrong size on FlowOverlapCompFunctionBinder_OnCollisionBeginOverlap");
//static_assert(offsetof(FlowOverlapCompFunctionBinder_OnCollisionBeginOverlap, OverlappedComponent) == 0x000000, "Member 'FlowOverlapCompFunctionBinder_OnCollisionBeginOverlap::OverlappedComponent' has a wrong offset!");
//static_assert(offsetof(FlowOverlapCompFunctionBinder_OnCollisionBeginOverlap, OtherActor) == 0x000008, "Member 'FlowOverlapCompFunctionBinder_OnCollisionBeginOverlap::OtherActor' has a wrong offset!");
//static_assert(offsetof(FlowOverlapCompFunctionBinder_OnCollisionBeginOverlap, OtherComp) == 0x000010, "Member 'FlowOverlapCompFunctionBinder_OnCollisionBeginOverlap::OtherComp' has a wrong offset!");
//static_assert(offsetof(FlowOverlapCompFunctionBinder_OnCollisionBeginOverlap, OtherBodyIndex) == 0x000018, "Member 'FlowOverlapCompFunctionBinder_OnCollisionBeginOverlap::OtherBodyIndex' has a wrong offset!");
//static_assert(offsetof(FlowOverlapCompFunctionBinder_OnCollisionBeginOverlap, SweepResult) == 0x000020, "Member 'FlowOverlapCompFunctionBinder_OnCollisionBeginOverlap::SweepResult' has a wrong offset!");

// Function b1-Managed.FlowOverlapCompFunctionBinder.OnCollisionEndOverlap
// 0x0020 (0x0020 - 0x0000)
struct FlowOverlapCompFunctionBinder_OnCollisionEndOverlap final
{
public:
	class UPrimitiveComponent*                    OverlappedComponent;                               // 0x0000(0x0008)(ExportObject, Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class AActor*                                 OtherActor;                                        // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UPrimitiveComponent*                    OtherComp;                                         // 0x0010(0x0008)(ExportObject, Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         OtherBodyIndex;                                    // 0x0018(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
//static_assert(alignof(FlowOverlapCompFunctionBinder_OnCollisionEndOverlap) == 0x000008, "Wrong alignment on FlowOverlapCompFunctionBinder_OnCollisionEndOverlap");
//static_assert(sizeof(FlowOverlapCompFunctionBinder_OnCollisionEndOverlap) == 0x000020, "Wrong size on FlowOverlapCompFunctionBinder_OnCollisionEndOverlap");
//static_assert(offsetof(FlowOverlapCompFunctionBinder_OnCollisionEndOverlap, OverlappedComponent) == 0x000000, "Member 'FlowOverlapCompFunctionBinder_OnCollisionEndOverlap::OverlappedComponent' has a wrong offset!");
//static_assert(offsetof(FlowOverlapCompFunctionBinder_OnCollisionEndOverlap, OtherActor) == 0x000008, "Member 'FlowOverlapCompFunctionBinder_OnCollisionEndOverlap::OtherActor' has a wrong offset!");
//static_assert(offsetof(FlowOverlapCompFunctionBinder_OnCollisionEndOverlap, OtherComp) == 0x000010, "Member 'FlowOverlapCompFunctionBinder_OnCollisionEndOverlap::OtherComp' has a wrong offset!");
//static_assert(offsetof(FlowOverlapCompFunctionBinder_OnCollisionEndOverlap, OtherBodyIndex) == 0x000018, "Member 'FlowOverlapCompFunctionBinder_OnCollisionEndOverlap::OtherBodyIndex' has a wrong offset!");

// Function b1-Managed.GSCameraGraph.CameraGraphNode_AutoMoveTrailCamera
// 0x0001 (0x0001 - 0x0000)
struct GSCameraGraph_CameraGraphNode_AutoMoveTrailCamera final
{
public:
	uint8                                         bEnable : 1;                                       // 0x0000(0x0001)(BitIndex: 0x00, PropSize: 0x0001 (Parm, NoDestructor, HasGetValueTypeHash))
};
//static_assert(alignof(GSCameraGraph_CameraGraphNode_AutoMoveTrailCamera) == 0x000001, "Wrong alignment on GSCameraGraph_CameraGraphNode_AutoMoveTrailCamera");
//static_assert(sizeof(GSCameraGraph_CameraGraphNode_AutoMoveTrailCamera) == 0x000001, "Wrong size on GSCameraGraph_CameraGraphNode_AutoMoveTrailCamera");

// Function b1-Managed.GSCameraGraph.CameraGraphNode_LerpPostProcess
// 0x0001 (0x0001 - 0x0000)
struct GSCameraGraph_CameraGraphNode_LerpPostProcess final
{
public:
	uint8                                         bEnable : 1;                                       // 0x0000(0x0001)(BitIndex: 0x00, PropSize: 0x0001 (Parm, NoDestructor, HasGetValueTypeHash))
};
//static_assert(alignof(GSCameraGraph_CameraGraphNode_LerpPostProcess) == 0x000001, "Wrong alignment on GSCameraGraph_CameraGraphNode_LerpPostProcess");
//static_assert(sizeof(GSCameraGraph_CameraGraphNode_LerpPostProcess) == 0x000001, "Wrong size on GSCameraGraph_CameraGraphNode_LerpPostProcess");

// Function b1-Managed.GSCameraGraph.CameraGraphNode_CloudMoveLimit
// 0x0001 (0x0001 - 0x0000)
struct GSCameraGraph_CameraGraphNode_CloudMoveLimit final
{
public:
	uint8                                         bEnable : 1;                                       // 0x0000(0x0001)(BitIndex: 0x00, PropSize: 0x0001 (Parm, NoDestructor, HasGetValueTypeHash))
};
//static_assert(alignof(GSCameraGraph_CameraGraphNode_CloudMoveLimit) == 0x000001, "Wrong alignment on GSCameraGraph_CameraGraphNode_CloudMoveLimit");
//static_assert(sizeof(GSCameraGraph_CameraGraphNode_CloudMoveLimit) == 0x000001, "Wrong size on GSCameraGraph_CameraGraphNode_CloudMoveLimit");

// Function b1-Managed.GSCameraGraph.CameraGraphNode_InverseCamera
// 0x0001 (0x0001 - 0x0000)
struct GSCameraGraph_CameraGraphNode_InverseCamera final
{
public:
	uint8                                         bEnable : 1;                                       // 0x0000(0x0001)(BitIndex: 0x00, PropSize: 0x0001 (Parm, NoDestructor, HasGetValueTypeHash))
};
//static_assert(alignof(GSCameraGraph_CameraGraphNode_InverseCamera) == 0x000001, "Wrong alignment on GSCameraGraph_CameraGraphNode_InverseCamera");
//static_assert(sizeof(GSCameraGraph_CameraGraphNode_InverseCamera) == 0x000001, "Wrong size on GSCameraGraph_CameraGraphNode_InverseCamera");

// Function b1-Managed.GSCameraGraph.CameraGraphNode_TraceVelocity
// 0x0001 (0x0001 - 0x0000)
struct GSCameraGraph_CameraGraphNode_TraceVelocity final
{
public:
	uint8                                         bEnable : 1;                                       // 0x0000(0x0001)(BitIndex: 0x00, PropSize: 0x0001 (Parm, NoDestructor, HasGetValueTypeHash))
};
//static_assert(alignof(GSCameraGraph_CameraGraphNode_TraceVelocity) == 0x000001, "Wrong alignment on GSCameraGraph_CameraGraphNode_TraceVelocity");
//static_assert(sizeof(GSCameraGraph_CameraGraphNode_TraceVelocity) == 0x000001, "Wrong size on GSCameraGraph_CameraGraphNode_TraceVelocity");

// Function b1-Managed.GSCameraGraph.CameraGraphNode_ShootSuction
// 0x0001 (0x0001 - 0x0000)
struct GSCameraGraph_CameraGraphNode_ShootSuction final
{
public:
	uint8                                         bEnable : 1;                                       // 0x0000(0x0001)(BitIndex: 0x00, PropSize: 0x0001 (Parm, NoDestructor, HasGetValueTypeHash))
};
//static_assert(alignof(GSCameraGraph_CameraGraphNode_ShootSuction) == 0x000001, "Wrong alignment on GSCameraGraph_CameraGraphNode_ShootSuction");
//static_assert(sizeof(GSCameraGraph_CameraGraphNode_ShootSuction) == 0x000001, "Wrong size on GSCameraGraph_CameraGraphNode_ShootSuction");

// Function b1-Managed.GSCameraGraph.CameraGraphNode_GuiBeiCamera
// 0x0001 (0x0001 - 0x0000)
struct GSCameraGraph_CameraGraphNode_GuiBeiCamera final
{
public:
	uint8                                         bEnable : 1;                                       // 0x0000(0x0001)(BitIndex: 0x00, PropSize: 0x0001 (Parm, NoDestructor, HasGetValueTypeHash))
};
//static_assert(alignof(GSCameraGraph_CameraGraphNode_GuiBeiCamera) == 0x000001, "Wrong alignment on GSCameraGraph_CameraGraphNode_GuiBeiCamera");
//static_assert(sizeof(GSCameraGraph_CameraGraphNode_GuiBeiCamera) == 0x000001, "Wrong size on GSCameraGraph_CameraGraphNode_GuiBeiCamera");

// Function b1-Managed.GSCameraGraph.CameraGraphNode_PlayerSkill
// 0x0001 (0x0001 - 0x0000)
struct GSCameraGraph_CameraGraphNode_PlayerSkill final
{
public:
	uint8                                         bEnable : 1;                                       // 0x0000(0x0001)(BitIndex: 0x00, PropSize: 0x0001 (Parm, NoDestructor, HasGetValueTypeHash))
};
//static_assert(alignof(GSCameraGraph_CameraGraphNode_PlayerSkill) == 0x000001, "Wrong alignment on GSCameraGraph_CameraGraphNode_PlayerSkill");
//static_assert(sizeof(GSCameraGraph_CameraGraphNode_PlayerSkill) == 0x000001, "Wrong size on GSCameraGraph_CameraGraphNode_PlayerSkill");

// Function b1-Managed.GSCameraGraph.CameraGraphNode_AxisSmooth
// 0x000C (0x000C - 0x0000)
struct GSCameraGraph_CameraGraphNode_AxisSmooth final
{
public:
	uint8                                         bEnable : 1;                                       // 0x0000(0x0001)(BitIndex: 0x00, PropSize: 0x0001 (Parm, NoDestructor, HasGetValueTypeHash))
	uint8                                         BitPad_0_1 : 7;                                    // 0x0000(0x0001)(Fixing Bit-Field Size For New Byte [ Dumper-7 ])
	uint8                                         IsXAxisFixed : 1;                                  // 0x0001(0x0001)(BitIndex: 0x00, PropSize: 0x0001 (Parm, NoDestructor, HasGetValueTypeHash))
	uint8                                         BitPad_1_1 : 7;                                    // 0x0001(0x0001)(Fixing Bit-Field Size For New Byte [ Dumper-7 ])
	uint8                                         IsYAxisFixed : 1;                                  // 0x0002(0x0001)(BitIndex: 0x00, PropSize: 0x0001 (Parm, NoDestructor, HasGetValueTypeHash))
	uint8                                         BitPad_2_1 : 7;                                    // 0x0002(0x0001)(Fixing Bit-Field Size For New Byte [ Dumper-7 ])
	uint8                                         IsZAxisFixed : 1;                                  // 0x0003(0x0001)(BitIndex: 0x00, PropSize: 0x0001 (Parm, NoDestructor, HasGetValueTypeHash))
	float                                         SmoothSpeed;                                       // 0x0004(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CameraLagSpeed;                                    // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
//static_assert(alignof(GSCameraGraph_CameraGraphNode_AxisSmooth) == 0x000004, "Wrong alignment on GSCameraGraph_CameraGraphNode_AxisSmooth");
//static_assert(sizeof(GSCameraGraph_CameraGraphNode_AxisSmooth) == 0x00000C, "Wrong size on GSCameraGraph_CameraGraphNode_AxisSmooth");
//static_assert(offsetof(GSCameraGraph_CameraGraphNode_AxisSmooth, SmoothSpeed) == 0x000004, "Member 'GSCameraGraph_CameraGraphNode_AxisSmooth::SmoothSpeed' has a wrong offset!");
//static_assert(offsetof(GSCameraGraph_CameraGraphNode_AxisSmooth, CameraLagSpeed) == 0x000008, "Member 'GSCameraGraph_CameraGraphNode_AxisSmooth::CameraLagSpeed' has a wrong offset!");

// Function b1-Managed.GSCameraGraph.CameraGraphNode_GiantSkill
// 0x0001 (0x0001 - 0x0000)
struct GSCameraGraph_CameraGraphNode_GiantSkill final
{
public:
	uint8                                         bEnable : 1;                                       // 0x0000(0x0001)(BitIndex: 0x00, PropSize: 0x0001 (Parm, NoDestructor, HasGetValueTypeHash))
};
//static_assert(alignof(GSCameraGraph_CameraGraphNode_GiantSkill) == 0x000001, "Wrong alignment on GSCameraGraph_CameraGraphNode_GiantSkill");
//static_assert(sizeof(GSCameraGraph_CameraGraphNode_GiantSkill) == 0x000001, "Wrong size on GSCameraGraph_CameraGraphNode_GiantSkill");

// Function b1-Managed.GSCameraGraph.CameraGraphNode_SplineMove
// 0x000C (0x000C - 0x0000)
struct GSCameraGraph_CameraGraphNode_SplineMove final
{
public:
	uint8                                         bEnable : 1;                                       // 0x0000(0x0001)(BitIndex: 0x00, PropSize: 0x0001 (Parm, NoDestructor, HasGetValueTypeHash))
	uint8                                         Pad_1[0x3];                                        // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         CameraPitchAdditive;                               // 0x0004(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CameraYawAdditive;                                 // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
//static_assert(alignof(GSCameraGraph_CameraGraphNode_SplineMove) == 0x000004, "Wrong alignment on GSCameraGraph_CameraGraphNode_SplineMove");
//static_assert(sizeof(GSCameraGraph_CameraGraphNode_SplineMove) == 0x00000C, "Wrong size on GSCameraGraph_CameraGraphNode_SplineMove");
//static_assert(offsetof(GSCameraGraph_CameraGraphNode_SplineMove, CameraPitchAdditive) == 0x000004, "Member 'GSCameraGraph_CameraGraphNode_SplineMove::CameraPitchAdditive' has a wrong offset!");
//static_assert(offsetof(GSCameraGraph_CameraGraphNode_SplineMove, CameraYawAdditive) == 0x000008, "Member 'GSCameraGraph_CameraGraphNode_SplineMove::CameraYawAdditive' has a wrong offset!");

// Function b1-Managed.GSCameraGraph.CameraGraphNode_FixedParam
// 0x0001 (0x0001 - 0x0000)
struct GSCameraGraph_CameraGraphNode_FixedParam final
{
public:
	uint8                                         bEnable : 1;                                       // 0x0000(0x0001)(BitIndex: 0x00, PropSize: 0x0001 (Parm, NoDestructor, HasGetValueTypeHash))
};
//static_assert(alignof(GSCameraGraph_CameraGraphNode_FixedParam) == 0x000001, "Wrong alignment on GSCameraGraph_CameraGraphNode_FixedParam");
//static_assert(sizeof(GSCameraGraph_CameraGraphNode_FixedParam) == 0x000001, "Wrong size on GSCameraGraph_CameraGraphNode_FixedParam");

// Function b1-Managed.GSCameraGraph.CameraGraphNode_LockSkill
// 0x0001 (0x0001 - 0x0000)
struct GSCameraGraph_CameraGraphNode_LockSkill final
{
public:
	uint8                                         bEnable : 1;                                       // 0x0000(0x0001)(BitIndex: 0x00, PropSize: 0x0001 (Parm, NoDestructor, HasGetValueTypeHash))
};
//static_assert(alignof(GSCameraGraph_CameraGraphNode_LockSkill) == 0x000001, "Wrong alignment on GSCameraGraph_CameraGraphNode_LockSkill");
//static_assert(sizeof(GSCameraGraph_CameraGraphNode_LockSkill) == 0x000001, "Wrong size on GSCameraGraph_CameraGraphNode_LockSkill");

// Function b1-Managed.GSCameraGraph.CameraGraphNode_AutoTrail
// 0x0018 (0x0018 - 0x0000)
struct GSCameraGraph_CameraGraphNode_AutoTrail final
{
public:
	uint8                                         bEnable : 1;                                       // 0x0000(0x0001)(BitIndex: 0x00, PropSize: 0x0001 (Parm, NoDestructor, HasGetValueTypeHash))
	uint8                                         Pad_1[0x3];                                        // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         InCameraRotationRate;                              // 0x0004(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         InCameraRotationAccelerate;                        // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         InCameraRotationVelocityThreshold;                 // 0x000C(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         InFallingAdjustAngleLimit;                         // 0x0010(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         InFallingAdjustSpeedPercent;                       // 0x0014(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
//static_assert(alignof(GSCameraGraph_CameraGraphNode_AutoTrail) == 0x000004, "Wrong alignment on GSCameraGraph_CameraGraphNode_AutoTrail");
//static_assert(sizeof(GSCameraGraph_CameraGraphNode_AutoTrail) == 0x000018, "Wrong size on GSCameraGraph_CameraGraphNode_AutoTrail");
//static_assert(offsetof(GSCameraGraph_CameraGraphNode_AutoTrail, InCameraRotationRate) == 0x000004, "Member 'GSCameraGraph_CameraGraphNode_AutoTrail::InCameraRotationRate' has a wrong offset!");
//static_assert(offsetof(GSCameraGraph_CameraGraphNode_AutoTrail, InCameraRotationAccelerate) == 0x000008, "Member 'GSCameraGraph_CameraGraphNode_AutoTrail::InCameraRotationAccelerate' has a wrong offset!");
//static_assert(offsetof(GSCameraGraph_CameraGraphNode_AutoTrail, InCameraRotationVelocityThreshold) == 0x00000C, "Member 'GSCameraGraph_CameraGraphNode_AutoTrail::InCameraRotationVelocityThreshold' has a wrong offset!");
//static_assert(offsetof(GSCameraGraph_CameraGraphNode_AutoTrail, InFallingAdjustAngleLimit) == 0x000010, "Member 'GSCameraGraph_CameraGraphNode_AutoTrail::InFallingAdjustAngleLimit' has a wrong offset!");
//static_assert(offsetof(GSCameraGraph_CameraGraphNode_AutoTrail, InFallingAdjustSpeedPercent) == 0x000014, "Member 'GSCameraGraph_CameraGraphNode_AutoTrail::InFallingAdjustSpeedPercent' has a wrong offset!");

// Function b1-Managed.GSCameraGraph.CameraGraphNode_Player
// 0x0001 (0x0001 - 0x0000)
struct GSCameraGraph_CameraGraphNode_Player final
{
public:
	uint8                                         bEnable : 1;                                       // 0x0000(0x0001)(BitIndex: 0x00, PropSize: 0x0001 (Parm, NoDestructor, HasGetValueTypeHash))
};
//static_assert(alignof(GSCameraGraph_CameraGraphNode_Player) == 0x000001, "Wrong alignment on GSCameraGraph_CameraGraphNode_Player");
//static_assert(sizeof(GSCameraGraph_CameraGraphNode_Player) == 0x000001, "Wrong size on GSCameraGraph_CameraGraphNode_Player");

// Function b1-Managed.GSCameraGraph.CameraGraphNode_Curve
// 0x0001 (0x0001 - 0x0000)
struct GSCameraGraph_CameraGraphNode_Curve final
{
public:
	uint8                                         bEnable : 1;                                       // 0x0000(0x0001)(BitIndex: 0x00, PropSize: 0x0001 (Parm, NoDestructor, HasGetValueTypeHash))
};
//static_assert(alignof(GSCameraGraph_CameraGraphNode_Curve) == 0x000001, "Wrong alignment on GSCameraGraph_CameraGraphNode_Curve");
//static_assert(sizeof(GSCameraGraph_CameraGraphNode_Curve) == 0x000001, "Wrong size on GSCameraGraph_CameraGraphNode_Curve");

// Function b1-Managed.GSCameraGraph.CameraGraphNode_Giant
// 0x0001 (0x0001 - 0x0000)
struct GSCameraGraph_CameraGraphNode_Giant final
{
public:
	uint8                                         bEnable : 1;                                       // 0x0000(0x0001)(BitIndex: 0x00, PropSize: 0x0001 (Parm, NoDestructor, HasGetValueTypeHash))
};
//static_assert(alignof(GSCameraGraph_CameraGraphNode_Giant) == 0x000001, "Wrong alignment on GSCameraGraph_CameraGraphNode_Giant");
//static_assert(sizeof(GSCameraGraph_CameraGraphNode_Giant) == 0x000001, "Wrong size on GSCameraGraph_CameraGraphNode_Giant");

// Function b1-Managed.GSCameraGraph.CameraGraphNode_Lock
// 0x0001 (0x0001 - 0x0000)
struct GSCameraGraph_CameraGraphNode_Lock final
{
public:
	uint8                                         bEnable : 1;                                       // 0x0000(0x0001)(BitIndex: 0x00, PropSize: 0x0001 (Parm, NoDestructor, HasGetValueTypeHash))
};
//static_assert(alignof(GSCameraGraph_CameraGraphNode_Lock) == 0x000001, "Wrong alignment on GSCameraGraph_CameraGraphNode_Lock");
//static_assert(sizeof(GSCameraGraph_CameraGraphNode_Lock) == 0x000001, "Wrong size on GSCameraGraph_CameraGraphNode_Lock");

// Function b1-Managed.GSCameraGraph.CameraGraphNode_Dead
// 0x0014 (0x0014 - 0x0000)
struct GSCameraGraph_CameraGraphNode_Dead final
{
public:
	uint8                                         bEnable : 1;                                       // 0x0000(0x0001)(BitIndex: 0x00, PropSize: 0x0001 (Parm, NoDestructor, HasGetValueTypeHash))
	uint8                                         Pad_1[0x3];                                        // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         ArmLength;                                         // 0x0004(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         ArmLengthSpeed;                                    // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CameraPitch;                                       // 0x000C(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CameraPitchSpeed;                                  // 0x0010(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
//static_assert(alignof(GSCameraGraph_CameraGraphNode_Dead) == 0x000004, "Wrong alignment on GSCameraGraph_CameraGraphNode_Dead");
//static_assert(sizeof(GSCameraGraph_CameraGraphNode_Dead) == 0x000014, "Wrong size on GSCameraGraph_CameraGraphNode_Dead");
//static_assert(offsetof(GSCameraGraph_CameraGraphNode_Dead, ArmLength) == 0x000004, "Member 'GSCameraGraph_CameraGraphNode_Dead::ArmLength' has a wrong offset!");
//static_assert(offsetof(GSCameraGraph_CameraGraphNode_Dead, ArmLengthSpeed) == 0x000008, "Member 'GSCameraGraph_CameraGraphNode_Dead::ArmLengthSpeed' has a wrong offset!");
//static_assert(offsetof(GSCameraGraph_CameraGraphNode_Dead, CameraPitch) == 0x00000C, "Member 'GSCameraGraph_CameraGraphNode_Dead::CameraPitch' has a wrong offset!");
//static_assert(offsetof(GSCameraGraph_CameraGraphNode_Dead, CameraPitchSpeed) == 0x000010, "Member 'GSCameraGraph_CameraGraphNode_Dead::CameraPitchSpeed' has a wrong offset!");

// Function b1-Managed.GSCameraGraph.TargetExtendIDEqual
// 0x0008 (0x0008 - 0x0000)
struct GSCameraGraph_TargetExtendIDEqual final
{
public:
	int32                                         ExtendID;                                          // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         ReturnValue : 1;                                   // 0x0004(0x0001)(BitIndex: 0x00, PropSize: 0x0001 (Parm, OutParm, ReturnParm, NoDestructor, HasGetValueTypeHash))
};
//static_assert(alignof(GSCameraGraph_TargetExtendIDEqual) == 0x000004, "Wrong alignment on GSCameraGraph_TargetExtendIDEqual");
//static_assert(sizeof(GSCameraGraph_TargetExtendIDEqual) == 0x000008, "Wrong size on GSCameraGraph_TargetExtendIDEqual");
//static_assert(offsetof(GSCameraGraph_TargetExtendIDEqual, ExtendID) == 0x000000, "Member 'GSCameraGraph_TargetExtendIDEqual::ExtendID' has a wrong offset!");

// Function b1-Managed.GSCameraGraph.CameraGraphNode_G4
// 0x0001 (0x0001 - 0x0000)
struct GSCameraGraph_CameraGraphNode_G4 final
{
public:
	uint8                                         bEnable : 1;                                       // 0x0000(0x0001)(BitIndex: 0x00, PropSize: 0x0001 (Parm, NoDestructor, HasGetValueTypeHash))
};
//static_assert(alignof(GSCameraGraph_CameraGraphNode_G4) == 0x000001, "Wrong alignment on GSCameraGraph_CameraGraphNode_G4");
//static_assert(sizeof(GSCameraGraph_CameraGraphNode_G4) == 0x000001, "Wrong size on GSCameraGraph_CameraGraphNode_G4");

// Function b1-Managed.GSCameraGraph.IsUseGuiBeiCamera
// 0x0001 (0x0001 - 0x0000)
struct GSCameraGraph_IsUseGuiBeiCamera final
{
public:
	uint8                                         ReturnValue : 1;                                   // 0x0000(0x0001)(BitIndex: 0x00, PropSize: 0x0001 (Parm, OutParm, ReturnParm, NoDestructor, HasGetValueTypeHash))
};
//static_assert(alignof(GSCameraGraph_IsUseGuiBeiCamera) == 0x000001, "Wrong alignment on GSCameraGraph_IsUseGuiBeiCamera");
//static_assert(sizeof(GSCameraGraph_IsUseGuiBeiCamera) == 0x000001, "Wrong size on GSCameraGraph_IsUseGuiBeiCamera");

// Function b1-Managed.GSCameraGraph.HasNoCameraInput
// 0x0008 (0x0008 - 0x0000)
struct GSCameraGraph_HasNoCameraInput final
{
public:
	float                                         DurationTime;                                      // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         ReturnValue : 1;                                   // 0x0004(0x0001)(BitIndex: 0x00, PropSize: 0x0001 (Parm, OutParm, ReturnParm, NoDestructor, HasGetValueTypeHash))
};
//static_assert(alignof(GSCameraGraph_HasNoCameraInput) == 0x000004, "Wrong alignment on GSCameraGraph_HasNoCameraInput");
//static_assert(sizeof(GSCameraGraph_HasNoCameraInput) == 0x000008, "Wrong size on GSCameraGraph_HasNoCameraInput");
//static_assert(offsetof(GSCameraGraph_HasNoCameraInput, DurationTime) == 0x000000, "Member 'GSCameraGraph_HasNoCameraInput::DurationTime' has a wrong offset!");

// Function b1-Managed.GSCameraGraph.TargetResIDEqual
// 0x0008 (0x0008 - 0x0000)
struct GSCameraGraph_TargetResIDEqual final
{
public:
	int32                                         TargetResID;                                       // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         ReturnValue : 1;                                   // 0x0004(0x0001)(BitIndex: 0x00, PropSize: 0x0001 (Parm, OutParm, ReturnParm, NoDestructor, HasGetValueTypeHash))
};
//static_assert(alignof(GSCameraGraph_TargetResIDEqual) == 0x000004, "Wrong alignment on GSCameraGraph_TargetResIDEqual");
//static_assert(sizeof(GSCameraGraph_TargetResIDEqual) == 0x000008, "Wrong size on GSCameraGraph_TargetResIDEqual");
//static_assert(offsetof(GSCameraGraph_TargetResIDEqual, TargetResID) == 0x000000, "Member 'GSCameraGraph_TargetResIDEqual::TargetResID' has a wrong offset!");

// Function b1-Managed.GSCameraGraph.HasTarget
// 0x0001 (0x0001 - 0x0000)
struct GSCameraGraph_HasTarget final
{
public:
	uint8                                         ReturnValue : 1;                                   // 0x0000(0x0001)(BitIndex: 0x00, PropSize: 0x0001 (Parm, OutParm, ReturnParm, NoDestructor, HasGetValueTypeHash))
};
//static_assert(alignof(GSCameraGraph_HasTarget) == 0x000001, "Wrong alignment on GSCameraGraph_HasTarget");
//static_assert(sizeof(GSCameraGraph_HasTarget) == 0x000001, "Wrong size on GSCameraGraph_HasTarget");

// Function b1-Managed.GSCameraGraph.IsLocked
// 0x0001 (0x0001 - 0x0000)
struct GSCameraGraph_IsLocked final
{
public:
	uint8                                         ReturnValue : 1;                                   // 0x0000(0x0001)(BitIndex: 0x00, PropSize: 0x0001 (Parm, OutParm, ReturnParm, NoDestructor, HasGetValueTypeHash))
};
//static_assert(alignof(GSCameraGraph_IsLocked) == 0x000001, "Wrong alignment on GSCameraGraph_IsLocked");
//static_assert(sizeof(GSCameraGraph_IsLocked) == 0x000001, "Wrong size on GSCameraGraph_IsLocked");

// Function b1-Managed.GSCameraGraph.IsG4Mode
// 0x0001 (0x0001 - 0x0000)
struct GSCameraGraph_IsG4Mode final
{
public:
	uint8                                         ReturnValue : 1;                                   // 0x0000(0x0001)(BitIndex: 0x00, PropSize: 0x0001 (Parm, OutParm, ReturnParm, NoDestructor, HasGetValueTypeHash))
};
//static_assert(alignof(GSCameraGraph_IsG4Mode) == 0x000001, "Wrong alignment on GSCameraGraph_IsG4Mode");
//static_assert(sizeof(GSCameraGraph_IsG4Mode) == 0x000001, "Wrong size on GSCameraGraph_IsG4Mode");

// Function b1-Managed.BANSM_ComboWindow.CheckState
// 0x0010 (0x0010 - 0x0000)
struct BANSM_ComboWindow_CheckState final
{
public:
	class UAnimSequenceBase*                      AnimBase;                                          // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CurTime;                                           // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         ReturnValue : 1;                                   // 0x000C(0x0001)(BitIndex: 0x00, PropSize: 0x0001 (Parm, OutParm, ReturnParm, NoDestructor, HasGetValueTypeHash))
};
//static_assert(alignof(BANSM_ComboWindow_CheckState) == 0x000008, "Wrong alignment on BANSM_ComboWindow_CheckState");
//static_assert(sizeof(BANSM_ComboWindow_CheckState) == 0x000010, "Wrong size on BANSM_ComboWindow_CheckState");
//static_assert(offsetof(BANSM_ComboWindow_CheckState, AnimBase) == 0x000000, "Member 'BANSM_ComboWindow_CheckState::AnimBase' has a wrong offset!");
//static_assert(offsetof(BANSM_ComboWindow_CheckState, CurTime) == 0x000008, "Member 'BANSM_ComboWindow_CheckState::CurTime' has a wrong offset!");

// Function b1-Managed.BED_TaskNode_PushTaskStageState.GetNodeDescriptionInCS
// 0x0010 (0x0010 - 0x0000)
struct BED_TaskNode_PushTaskStageState_GetNodeDescriptionInCS final
{
public:
	class FString                                 ReturnValue;                                       // 0x0000(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash)
};
//static_assert(alignof(BED_TaskNode_PushTaskStageState_GetNodeDescriptionInCS) == 0x000008, "Wrong alignment on BED_TaskNode_PushTaskStageState_GetNodeDescriptionInCS");
//static_assert(sizeof(BED_TaskNode_PushTaskStageState_GetNodeDescriptionInCS) == 0x000010, "Wrong size on BED_TaskNode_PushTaskStageState_GetNodeDescriptionInCS");
//static_assert(offsetof(BED_TaskNode_PushTaskStageState_GetNodeDescriptionInCS, ReturnValue) == 0x000000, "Member 'BED_TaskNode_PushTaskStageState_GetNodeDescriptionInCS::ReturnValue' has a wrong offset!");

// Function b1-Managed.BANS_GSPreMontageSectionJumpDetection.GetJumpableSectionPrefix
// 0x0010 (0x0010 - 0x0000)
struct BANS_GSPreMontageSectionJumpDetection_GetJumpableSectionPrefix final
{
public:
	class FString                                 ReturnValue;                                       // 0x0000(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash)
};
//static_assert(alignof(BANS_GSPreMontageSectionJumpDetection_GetJumpableSectionPrefix) == 0x000008, "Wrong alignment on BANS_GSPreMontageSectionJumpDetection_GetJumpableSectionPrefix");
//static_assert(sizeof(BANS_GSPreMontageSectionJumpDetection_GetJumpableSectionPrefix) == 0x000010, "Wrong size on BANS_GSPreMontageSectionJumpDetection_GetJumpableSectionPrefix");
//static_assert(offsetof(BANS_GSPreMontageSectionJumpDetection_GetJumpableSectionPrefix, ReturnValue) == 0x000000, "Member 'BANS_GSPreMontageSectionJumpDetection_GetJumpableSectionPrefix::ReturnValue' has a wrong offset!");

// Function b1-Managed.BANS_GSPreMontageSectionJumpDetection.GSNotifyBeginCS
// 0x0048 (0x0048 - 0x0000)
struct BANS_GSPreMontageSectionJumpDetection_GSNotifyBeginCS final
{
public:
	struct FUStGSNotifyParam                      NotifyParam;                                       // 0x0000(0x0040)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
	float                                         TotalDuration;                                     // 0x0040(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
//static_assert(alignof(BANS_GSPreMontageSectionJumpDetection_GSNotifyBeginCS) == 0x000008, "Wrong alignment on BANS_GSPreMontageSectionJumpDetection_GSNotifyBeginCS");
//static_assert(sizeof(BANS_GSPreMontageSectionJumpDetection_GSNotifyBeginCS) == 0x000048, "Wrong size on BANS_GSPreMontageSectionJumpDetection_GSNotifyBeginCS");
//static_assert(offsetof(BANS_GSPreMontageSectionJumpDetection_GSNotifyBeginCS, NotifyParam) == 0x000000, "Member 'BANS_GSPreMontageSectionJumpDetection_GSNotifyBeginCS::NotifyParam' has a wrong offset!");
//static_assert(offsetof(BANS_GSPreMontageSectionJumpDetection_GSNotifyBeginCS, TotalDuration) == 0x000040, "Member 'BANS_GSPreMontageSectionJumpDetection_GSNotifyBeginCS::TotalDuration' has a wrong offset!");

// Function b1-Managed.BANS_GSPreMontageSectionJumpDetection.GetAnimNSType
// 0x0001 (0x0001 - 0x0000)
struct BANS_GSPreMontageSectionJumpDetection_GetAnimNSType final
{
public:
	EGsEnAnimNS                                   ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
//static_assert(alignof(BANS_GSPreMontageSectionJumpDetection_GetAnimNSType) == 0x000001, "Wrong alignment on BANS_GSPreMontageSectionJumpDetection_GetAnimNSType");
//static_assert(sizeof(BANS_GSPreMontageSectionJumpDetection_GetAnimNSType) == 0x000001, "Wrong size on BANS_GSPreMontageSectionJumpDetection_GetAnimNSType");
//static_assert(offsetof(BANS_GSPreMontageSectionJumpDetection_GetAnimNSType, ReturnValue) == 0x000000, "Member 'BANS_GSPreMontageSectionJumpDetection_GetAnimNSType::ReturnValue' has a wrong offset!");

// Function b1-Managed.BANS_GSPreMontageSectionJumpDetection.GSNotifyEndCS
// 0x0040 (0x0040 - 0x0000)
struct BANS_GSPreMontageSectionJumpDetection_GSNotifyEndCS final
{
public:
	struct FUStGSNotifyParam                      NotifyParam;                                       // 0x0000(0x0040)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
//static_assert(alignof(BANS_GSPreMontageSectionJumpDetection_GSNotifyEndCS) == 0x000008, "Wrong alignment on BANS_GSPreMontageSectionJumpDetection_GSNotifyEndCS");
//static_assert(sizeof(BANS_GSPreMontageSectionJumpDetection_GSNotifyEndCS) == 0x000040, "Wrong size on BANS_GSPreMontageSectionJumpDetection_GSNotifyEndCS");
//static_assert(offsetof(BANS_GSPreMontageSectionJumpDetection_GSNotifyEndCS, NotifyParam) == 0x000000, "Member 'BANS_GSPreMontageSectionJumpDetection_GSNotifyEndCS::NotifyParam' has a wrong offset!");

// Function b1-Managed.BUS_MovePhysicsTransformCompImpl.OnRootCompHit
// 0x0118 (0x0118 - 0x0000)
struct BUS_MovePhysicsTransformCompImpl_OnRootCompHit final
{
public:
	class UPrimitiveComponent*                    HitComp;                                           // 0x0000(0x0008)(ExportObject, Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class AActor*                                 OtherActor;                                        // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UPrimitiveComponent*                    OtherComp;                                         // 0x0010(0x0008)(ExportObject, Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                HitImpule;                                         // 0x0018(0x0018)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FHitResult                             Hit;                                               // 0x0030(0x00E8)(Parm, IsPlainOldData, NoDestructor)
};
//static_assert(alignof(BUS_MovePhysicsTransformCompImpl_OnRootCompHit) == 0x000008, "Wrong alignment on BUS_MovePhysicsTransformCompImpl_OnRootCompHit");
//static_assert(sizeof(BUS_MovePhysicsTransformCompImpl_OnRootCompHit) == 0x000118, "Wrong size on BUS_MovePhysicsTransformCompImpl_OnRootCompHit");
//static_assert(offsetof(BUS_MovePhysicsTransformCompImpl_OnRootCompHit, HitComp) == 0x000000, "Member 'BUS_MovePhysicsTransformCompImpl_OnRootCompHit::HitComp' has a wrong offset!");
//static_assert(offsetof(BUS_MovePhysicsTransformCompImpl_OnRootCompHit, OtherActor) == 0x000008, "Member 'BUS_MovePhysicsTransformCompImpl_OnRootCompHit::OtherActor' has a wrong offset!");
//static_assert(offsetof(BUS_MovePhysicsTransformCompImpl_OnRootCompHit, OtherComp) == 0x000010, "Member 'BUS_MovePhysicsTransformCompImpl_OnRootCompHit::OtherComp' has a wrong offset!");
//static_assert(offsetof(BUS_MovePhysicsTransformCompImpl_OnRootCompHit, HitImpule) == 0x000018, "Member 'BUS_MovePhysicsTransformCompImpl_OnRootCompHit::HitImpule' has a wrong offset!");
//static_assert(offsetof(BUS_MovePhysicsTransformCompImpl_OnRootCompHit, Hit) == 0x000030, "Member 'BUS_MovePhysicsTransformCompImpl_OnRootCompHit::Hit' has a wrong offset!");

// Function b1-Managed.BUS_PatrolCompImpl.OnTriggerBoxOverlap
// 0x0010 (0x0010 - 0x0000)
struct BUS_PatrolCompImpl_OnTriggerBoxOverlap final
{
public:
	class AActor*                                 OverlapActor;                                      // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class AActor*                                 OtherActor;                                        // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
//static_assert(alignof(BUS_PatrolCompImpl_OnTriggerBoxOverlap) == 0x000008, "Wrong alignment on BUS_PatrolCompImpl_OnTriggerBoxOverlap");
//static_assert(sizeof(BUS_PatrolCompImpl_OnTriggerBoxOverlap) == 0x000010, "Wrong size on BUS_PatrolCompImpl_OnTriggerBoxOverlap");
//static_assert(offsetof(BUS_PatrolCompImpl_OnTriggerBoxOverlap, OverlapActor) == 0x000000, "Member 'BUS_PatrolCompImpl_OnTriggerBoxOverlap::OverlapActor' has a wrong offset!");
//static_assert(offsetof(BUS_PatrolCompImpl_OnTriggerBoxOverlap, OtherActor) == 0x000008, "Member 'BUS_PatrolCompImpl_OnTriggerBoxOverlap::OtherActor' has a wrong offset!");

// Function b1-Managed.BGG_GameModeB1.GetDefaultPawnClassForController
// 0x0010 (0x0010 - 0x0000)
struct BGG_GameModeB1_GetDefaultPawnClassForController final
{
public:
	class AController*                            InController;                                      // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UClass*                                 ReturnValue;                                       // 0x0008(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
//static_assert(alignof(BGG_GameModeB1_GetDefaultPawnClassForController) == 0x000008, "Wrong alignment on BGG_GameModeB1_GetDefaultPawnClassForController");
//static_assert(sizeof(BGG_GameModeB1_GetDefaultPawnClassForController) == 0x000010, "Wrong size on BGG_GameModeB1_GetDefaultPawnClassForController");
//static_assert(offsetof(BGG_GameModeB1_GetDefaultPawnClassForController, InController) == 0x000000, "Member 'BGG_GameModeB1_GetDefaultPawnClassForController::InController' has a wrong offset!");
//static_assert(offsetof(BGG_GameModeB1_GetDefaultPawnClassForController, ReturnValue) == 0x000008, "Member 'BGG_GameModeB1_GetDefaultPawnClassForController::ReturnValue' has a wrong offset!");

// Function b1-Managed.BGG_GameModeB1.ReceiveEndPlay
// 0x0001 (0x0001 - 0x0000)
struct BGG_GameModeB1_ReceiveEndPlay final
{
public:
	EEndPlayReason                                EndPlayReason;                                     // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
//static_assert(alignof(BGG_GameModeB1_ReceiveEndPlay) == 0x000001, "Wrong alignment on BGG_GameModeB1_ReceiveEndPlay");
//static_assert(sizeof(BGG_GameModeB1_ReceiveEndPlay) == 0x000001, "Wrong size on BGG_GameModeB1_ReceiveEndPlay");
//static_assert(offsetof(BGG_GameModeB1_ReceiveEndPlay, EndPlayReason) == 0x000000, "Member 'BGG_GameModeB1_ReceiveEndPlay::EndPlayReason' has a wrong offset!");

// Function b1-Managed.BGG_GameModeB1.PostLoginCS
// 0x0008 (0x0008 - 0x0000)
struct BGG_GameModeB1_PostLoginCS final
{
public:
	class APlayerController*                      NewPlayer;                                         // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
//static_assert(alignof(BGG_GameModeB1_PostLoginCS) == 0x000008, "Wrong alignment on BGG_GameModeB1_PostLoginCS");
//static_assert(sizeof(BGG_GameModeB1_PostLoginCS) == 0x000008, "Wrong size on BGG_GameModeB1_PostLoginCS");
//static_assert(offsetof(BGG_GameModeB1_PostLoginCS, NewPlayer) == 0x000000, "Member 'BGG_GameModeB1_PostLoginCS::NewPlayer' has a wrong offset!");

// Function b1-Managed.BGG_GameModeB1.ReceiveTick
// 0x0004 (0x0004 - 0x0000)
struct BGG_GameModeB1_ReceiveTick final
{
public:
	float                                         DeltaSeconds;                                      // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
//static_assert(alignof(BGG_GameModeB1_ReceiveTick) == 0x000004, "Wrong alignment on BGG_GameModeB1_ReceiveTick");
//static_assert(sizeof(BGG_GameModeB1_ReceiveTick) == 0x000004, "Wrong size on BGG_GameModeB1_ReceiveTick");
//static_assert(offsetof(BGG_GameModeB1_ReceiveTick, DeltaSeconds) == 0x000000, "Member 'BGG_GameModeB1_ReceiveTick::DeltaSeconds' has a wrong offset!");

// Function b1-Managed.BGG_GameModeB1.LoginOutCS
// 0x0008 (0x0008 - 0x0000)
struct BGG_GameModeB1_LoginOutCS final
{
public:
	class AController*                            Exiting;                                           // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
//static_assert(alignof(BGG_GameModeB1_LoginOutCS) == 0x000008, "Wrong alignment on BGG_GameModeB1_LoginOutCS");
//static_assert(sizeof(BGG_GameModeB1_LoginOutCS) == 0x000008, "Wrong size on BGG_GameModeB1_LoginOutCS");
//static_assert(offsetof(BGG_GameModeB1_LoginOutCS, Exiting) == 0x000000, "Member 'BGG_GameModeB1_LoginOutCS::Exiting' has a wrong offset!");

// Function b1-Managed.BGG_GameModeB1.PreLoginCS
// 0x0040 (0x0040 - 0x0000)
struct BGG_GameModeB1_PreLoginCS final
{
public:
	class FString                                 Options;                                           // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash)
	class FString                                 LoginAddress;                                      // 0x0010(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash)
	class FString                                 UniqueId;                                          // 0x0020(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash)
	class FString                                 ErrorMessage;                                      // 0x0030(0x0010)(Parm, OutParm, ZeroConstructor, HasGetValueTypeHash)
};
//static_assert(alignof(BGG_GameModeB1_PreLoginCS) == 0x000008, "Wrong alignment on BGG_GameModeB1_PreLoginCS");
//static_assert(sizeof(BGG_GameModeB1_PreLoginCS) == 0x000040, "Wrong size on BGG_GameModeB1_PreLoginCS");
//static_assert(offsetof(BGG_GameModeB1_PreLoginCS, Options) == 0x000000, "Member 'BGG_GameModeB1_PreLoginCS::Options' has a wrong offset!");
//static_assert(offsetof(BGG_GameModeB1_PreLoginCS, LoginAddress) == 0x000010, "Member 'BGG_GameModeB1_PreLoginCS::LoginAddress' has a wrong offset!");
//static_assert(offsetof(BGG_GameModeB1_PreLoginCS, UniqueId) == 0x000020, "Member 'BGG_GameModeB1_PreLoginCS::UniqueId' has a wrong offset!");
//static_assert(offsetof(BGG_GameModeB1_PreLoginCS, ErrorMessage) == 0x000030, "Member 'BGG_GameModeB1_PreLoginCS::ErrorMessage' has a wrong offset!");

// Function b1-Managed.BANS_GSAMCurveMove.GSNotifyBeginCS
// 0x0048 (0x0048 - 0x0000)
struct BANS_GSAMCurveMove_GSNotifyBeginCS final
{
public:
	struct FUStGSNotifyParam                      NotifyParam;                                       // 0x0000(0x0040)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
	float                                         TotalDuration;                                     // 0x0040(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
//static_assert(alignof(BANS_GSAMCurveMove_GSNotifyBeginCS) == 0x000008, "Wrong alignment on BANS_GSAMCurveMove_GSNotifyBeginCS");
//static_assert(sizeof(BANS_GSAMCurveMove_GSNotifyBeginCS) == 0x000048, "Wrong size on BANS_GSAMCurveMove_GSNotifyBeginCS");
//static_assert(offsetof(BANS_GSAMCurveMove_GSNotifyBeginCS, NotifyParam) == 0x000000, "Member 'BANS_GSAMCurveMove_GSNotifyBeginCS::NotifyParam' has a wrong offset!");
//static_assert(offsetof(BANS_GSAMCurveMove_GSNotifyBeginCS, TotalDuration) == 0x000040, "Member 'BANS_GSAMCurveMove_GSNotifyBeginCS::TotalDuration' has a wrong offset!");

// Function b1-Managed.BANS_GSAMCurveMove.GSNotifyEndCS
// 0x0040 (0x0040 - 0x0000)
struct BANS_GSAMCurveMove_GSNotifyEndCS final
{
public:
	struct FUStGSNotifyParam                      NotifyParam;                                       // 0x0000(0x0040)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
//static_assert(alignof(BANS_GSAMCurveMove_GSNotifyEndCS) == 0x000008, "Wrong alignment on BANS_GSAMCurveMove_GSNotifyEndCS");
//static_assert(sizeof(BANS_GSAMCurveMove_GSNotifyEndCS) == 0x000040, "Wrong size on BANS_GSAMCurveMove_GSNotifyEndCS");
//static_assert(offsetof(BANS_GSAMCurveMove_GSNotifyEndCS, NotifyParam) == 0x000000, "Member 'BANS_GSAMCurveMove_GSNotifyEndCS::NotifyParam' has a wrong offset!");

// Function b1-Managed.BUS_SeqHelperComp.SetCharacterCollisionProfile
// 0x0008 (0x0008 - 0x0000)
struct BUS_SeqHelperComp_SetCharacterCollisionProfile final
{
public:
	class FName                                   CollisionProfileName;                              // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
//static_assert(alignof(BUS_SeqHelperComp_SetCharacterCollisionProfile) == 0x000004, "Wrong alignment on BUS_SeqHelperComp_SetCharacterCollisionProfile");
//static_assert(sizeof(BUS_SeqHelperComp_SetCharacterCollisionProfile) == 0x000008, "Wrong size on BUS_SeqHelperComp_SetCharacterCollisionProfile");
//static_assert(offsetof(BUS_SeqHelperComp_SetCharacterCollisionProfile, CollisionProfileName) == 0x000000, "Member 'BUS_SeqHelperComp_SetCharacterCollisionProfile::CollisionProfileName' has a wrong offset!");

// Function b1-Managed.BUS_SeqHelperComp.OverrideAIPerceptionSetting
// 0x0014 (0x0014 - 0x0000)
struct BUS_SeqHelperComp_OverrideAIPerceptionSetting final
{
public:
	uint8                                         InEnableVisualize : 1;                             // 0x0000(0x0001)(BitIndex: 0x00, PropSize: 0x0001 (Parm, NoDestructor, HasGetValueTypeHash))
	uint8                                         Pad_1[0x3];                                        // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         InSightRange;                                      // 0x0004(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         InVisionAngleDegrees;                              // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         InHearRange;                                       // 0x000C(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         InPursuitRange;                                    // 0x0010(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
//static_assert(alignof(BUS_SeqHelperComp_OverrideAIPerceptionSetting) == 0x000004, "Wrong alignment on BUS_SeqHelperComp_OverrideAIPerceptionSetting");
//static_assert(sizeof(BUS_SeqHelperComp_OverrideAIPerceptionSetting) == 0x000014, "Wrong size on BUS_SeqHelperComp_OverrideAIPerceptionSetting");
//static_assert(offsetof(BUS_SeqHelperComp_OverrideAIPerceptionSetting, InSightRange) == 0x000004, "Member 'BUS_SeqHelperComp_OverrideAIPerceptionSetting::InSightRange' has a wrong offset!");
//static_assert(offsetof(BUS_SeqHelperComp_OverrideAIPerceptionSetting, InVisionAngleDegrees) == 0x000008, "Member 'BUS_SeqHelperComp_OverrideAIPerceptionSetting::InVisionAngleDegrees' has a wrong offset!");
//static_assert(offsetof(BUS_SeqHelperComp_OverrideAIPerceptionSetting, InHearRange) == 0x00000C, "Member 'BUS_SeqHelperComp_OverrideAIPerceptionSetting::InHearRange' has a wrong offset!");
//static_assert(offsetof(BUS_SeqHelperComp_OverrideAIPerceptionSetting, InPursuitRange) == 0x000010, "Member 'BUS_SeqHelperComp_OverrideAIPerceptionSetting::InPursuitRange' has a wrong offset!");

// Function b1-Managed.BUS_SeqHelperComp.SetMoveToTargetTransform
// 0x0060 (0x0060 - 0x0000)
struct BUS_SeqHelperComp_SetMoveToTargetTransform final
{
public:
	struct FTransform                             Transform;                                         // 0x0000(0x0060)(Parm, IsPlainOldData, NoDestructor)
};
//static_assert(alignof(BUS_SeqHelperComp_SetMoveToTargetTransform) == 0x000010, "Wrong alignment on BUS_SeqHelperComp_SetMoveToTargetTransform");
//static_assert(sizeof(BUS_SeqHelperComp_SetMoveToTargetTransform) == 0x000060, "Wrong size on BUS_SeqHelperComp_SetMoveToTargetTransform");
//static_assert(offsetof(BUS_SeqHelperComp_SetMoveToTargetTransform, Transform) == 0x000000, "Member 'BUS_SeqHelperComp_SetMoveToTargetTransform::Transform' has a wrong offset!");

// Function b1-Managed.BUS_SeqHelperComp.PerformMoveToLocation
// 0x0028 (0x0028 - 0x0000)
struct BUS_SeqHelperComp_PerformMoveToLocation final
{
public:
	struct FVector                                Position;                                          // 0x0000(0x0018)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	EAIMoveSpeedType                              SpeedRateType;                                     // 0x0018(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_19[0x3];                                       // 0x0019(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         AcceptableRadius;                                  // 0x001C(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	EBGUMoveAIType                                MoveAIType;                                        // 0x0020(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         IncludeSelfRadius : 1;                             // 0x0021(0x0001)(BitIndex: 0x00, PropSize: 0x0001 (Parm, NoDestructor, HasGetValueTypeHash))
	uint8                                         BitPad_21_1 : 7;                                   // 0x0021(0x0001)(Fixing Bit-Field Size For New Byte [ Dumper-7 ])
	uint8                                         IncludeTargetRadius : 1;                           // 0x0022(0x0001)(BitIndex: 0x00, PropSize: 0x0001 (Parm, NoDestructor, HasGetValueTypeHash))
};
//static_assert(alignof(BUS_SeqHelperComp_PerformMoveToLocation) == 0x000008, "Wrong alignment on BUS_SeqHelperComp_PerformMoveToLocation");
//static_assert(sizeof(BUS_SeqHelperComp_PerformMoveToLocation) == 0x000028, "Wrong size on BUS_SeqHelperComp_PerformMoveToLocation");
//static_assert(offsetof(BUS_SeqHelperComp_PerformMoveToLocation, Position) == 0x000000, "Member 'BUS_SeqHelperComp_PerformMoveToLocation::Position' has a wrong offset!");
//static_assert(offsetof(BUS_SeqHelperComp_PerformMoveToLocation, SpeedRateType) == 0x000018, "Member 'BUS_SeqHelperComp_PerformMoveToLocation::SpeedRateType' has a wrong offset!");
//static_assert(offsetof(BUS_SeqHelperComp_PerformMoveToLocation, AcceptableRadius) == 0x00001C, "Member 'BUS_SeqHelperComp_PerformMoveToLocation::AcceptableRadius' has a wrong offset!");
//static_assert(offsetof(BUS_SeqHelperComp_PerformMoveToLocation, MoveAIType) == 0x000020, "Member 'BUS_SeqHelperComp_PerformMoveToLocation::MoveAIType' has a wrong offset!");

// Function b1-Managed.BUS_SeqHelperComp.PerformMoveToPlayer
// 0x000C (0x000C - 0x0000)
struct BUS_SeqHelperComp_PerformMoveToPlayer final
{
public:
	EAIMoveSpeedType                              SpeedRateType;                                     // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_1[0x3];                                        // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         AcceptableRadius;                                  // 0x0004(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	EBGUMoveAIType                                MoveAIType;                                        // 0x0008(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         IncludeSelfRadius : 1;                             // 0x0009(0x0001)(BitIndex: 0x00, PropSize: 0x0001 (Parm, NoDestructor, HasGetValueTypeHash))
	uint8                                         BitPad_9_1 : 7;                                    // 0x0009(0x0001)(Fixing Bit-Field Size For New Byte [ Dumper-7 ])
	uint8                                         IncludeTargetRadius : 1;                           // 0x000A(0x0001)(BitIndex: 0x00, PropSize: 0x0001 (Parm, NoDestructor, HasGetValueTypeHash))
};
//static_assert(alignof(BUS_SeqHelperComp_PerformMoveToPlayer) == 0x000004, "Wrong alignment on BUS_SeqHelperComp_PerformMoveToPlayer");
//static_assert(sizeof(BUS_SeqHelperComp_PerformMoveToPlayer) == 0x00000C, "Wrong size on BUS_SeqHelperComp_PerformMoveToPlayer");
//static_assert(offsetof(BUS_SeqHelperComp_PerformMoveToPlayer, SpeedRateType) == 0x000000, "Member 'BUS_SeqHelperComp_PerformMoveToPlayer::SpeedRateType' has a wrong offset!");
//static_assert(offsetof(BUS_SeqHelperComp_PerformMoveToPlayer, AcceptableRadius) == 0x000004, "Member 'BUS_SeqHelperComp_PerformMoveToPlayer::AcceptableRadius' has a wrong offset!");
//static_assert(offsetof(BUS_SeqHelperComp_PerformMoveToPlayer, MoveAIType) == 0x000008, "Member 'BUS_SeqHelperComp_PerformMoveToPlayer::MoveAIType' has a wrong offset!");

// Function b1-Managed.BUS_SeqHelperComp.UpdateSimpleStates
// 0x0002 (0x0002 - 0x0000)
struct BUS_SeqHelperComp_UpdateSimpleStates final
{
public:
	EBGUSimpleState                               SimpleState;                                       // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         IsRemoving : 1;                                    // 0x0001(0x0001)(BitIndex: 0x00, PropSize: 0x0001 (Parm, NoDestructor, HasGetValueTypeHash))
};
//static_assert(alignof(BUS_SeqHelperComp_UpdateSimpleStates) == 0x000001, "Wrong alignment on BUS_SeqHelperComp_UpdateSimpleStates");
//static_assert(sizeof(BUS_SeqHelperComp_UpdateSimpleStates) == 0x000002, "Wrong size on BUS_SeqHelperComp_UpdateSimpleStates");
//static_assert(offsetof(BUS_SeqHelperComp_UpdateSimpleStates, SimpleState) == 0x000000, "Member 'BUS_SeqHelperComp_UpdateSimpleStates::SimpleState' has a wrong offset!");

// Function b1-Managed.BUS_SeqHelperComp.PerformJump
// 0x0010 (0x0010 - 0x0000)
struct BUS_SeqHelperComp_PerformJump final
{
public:
	class UAnimMontage*                           JumpMontage;                                       // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         JumpForce;                                         // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
//static_assert(alignof(BUS_SeqHelperComp_PerformJump) == 0x000008, "Wrong alignment on BUS_SeqHelperComp_PerformJump");
//static_assert(sizeof(BUS_SeqHelperComp_PerformJump) == 0x000010, "Wrong size on BUS_SeqHelperComp_PerformJump");
//static_assert(offsetof(BUS_SeqHelperComp_PerformJump, JumpMontage) == 0x000000, "Member 'BUS_SeqHelperComp_PerformJump::JumpMontage' has a wrong offset!");
//static_assert(offsetof(BUS_SeqHelperComp_PerformJump, JumpForce) == 0x000008, "Member 'BUS_SeqHelperComp_PerformJump::JumpForce' has a wrong offset!");

// Function b1-Managed.GSEaseFunc.EaseInOutQuint
// 0x0014 (0x0014 - 0x0000)
struct GSEaseFunc_EaseInOutQuint final
{
public:
	float                                         Start;                                             // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         End;                                               // 0x0004(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         Alpha;                                             // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         Param;                                             // 0x000C(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         ReturnValue;                                       // 0x0010(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
//static_assert(alignof(GSEaseFunc_EaseInOutQuint) == 0x000004, "Wrong alignment on GSEaseFunc_EaseInOutQuint");
//static_assert(sizeof(GSEaseFunc_EaseInOutQuint) == 0x000014, "Wrong size on GSEaseFunc_EaseInOutQuint");
//static_assert(offsetof(GSEaseFunc_EaseInOutQuint, Start) == 0x000000, "Member 'GSEaseFunc_EaseInOutQuint::Start' has a wrong offset!");
//static_assert(offsetof(GSEaseFunc_EaseInOutQuint, End) == 0x000004, "Member 'GSEaseFunc_EaseInOutQuint::End' has a wrong offset!");
//static_assert(offsetof(GSEaseFunc_EaseInOutQuint, Alpha) == 0x000008, "Member 'GSEaseFunc_EaseInOutQuint::Alpha' has a wrong offset!");
//static_assert(offsetof(GSEaseFunc_EaseInOutQuint, Param) == 0x00000C, "Member 'GSEaseFunc_EaseInOutQuint::Param' has a wrong offset!");
//static_assert(offsetof(GSEaseFunc_EaseInOutQuint, ReturnValue) == 0x000010, "Member 'GSEaseFunc_EaseInOutQuint::ReturnValue' has a wrong offset!");

// Function b1-Managed.GSEaseFunc.BackEaseInOut
// 0x0014 (0x0014 - 0x0000)
struct GSEaseFunc_BackEaseInOut final
{
public:
	float                                         Start;                                             // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         End;                                               // 0x0004(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         Alpha;                                             // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         Param;                                             // 0x000C(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         ReturnValue;                                       // 0x0010(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
//static_assert(alignof(GSEaseFunc_BackEaseInOut) == 0x000004, "Wrong alignment on GSEaseFunc_BackEaseInOut");
//static_assert(sizeof(GSEaseFunc_BackEaseInOut) == 0x000014, "Wrong size on GSEaseFunc_BackEaseInOut");
//static_assert(offsetof(GSEaseFunc_BackEaseInOut, Start) == 0x000000, "Member 'GSEaseFunc_BackEaseInOut::Start' has a wrong offset!");
//static_assert(offsetof(GSEaseFunc_BackEaseInOut, End) == 0x000004, "Member 'GSEaseFunc_BackEaseInOut::End' has a wrong offset!");
//static_assert(offsetof(GSEaseFunc_BackEaseInOut, Alpha) == 0x000008, "Member 'GSEaseFunc_BackEaseInOut::Alpha' has a wrong offset!");
//static_assert(offsetof(GSEaseFunc_BackEaseInOut, Param) == 0x00000C, "Member 'GSEaseFunc_BackEaseInOut::Param' has a wrong offset!");
//static_assert(offsetof(GSEaseFunc_BackEaseInOut, ReturnValue) == 0x000010, "Member 'GSEaseFunc_BackEaseInOut::ReturnValue' has a wrong offset!");

// Function b1-Managed.GSEaseFunc.EaseTransform
// 0x0140 (0x0140 - 0x0000)
struct GSEaseFunc_EaseTransform final
{
public:
	ENGSEasingFunc                                ENGSEasingFunc;                                    // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_1[0xF];                                        // 0x0001(0x000F)(Fixing Size After Last Property [ Dumper-7 ])
	struct FTransform                             Start;                                             // 0x0010(0x0060)(Parm, IsPlainOldData, NoDestructor)
	struct FTransform                             End;                                               // 0x0070(0x0060)(Parm, IsPlainOldData, NoDestructor)
	float                                         Alpha;                                             // 0x00D0(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         Param;                                             // 0x00D4(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         BlendExp;                                          // 0x00D8(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Steps;                                             // 0x00DC(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FTransform                             ReturnValue;                                       // 0x00E0(0x0060)(Parm, OutParm, ReturnParm, IsPlainOldData, NoDestructor)
};
//static_assert(alignof(GSEaseFunc_EaseTransform) == 0x000010, "Wrong alignment on GSEaseFunc_EaseTransform");
//static_assert(sizeof(GSEaseFunc_EaseTransform) == 0x000140, "Wrong size on GSEaseFunc_EaseTransform");
//static_assert(offsetof(GSEaseFunc_EaseTransform, ENGSEasingFunc) == 0x000000, "Member 'GSEaseFunc_EaseTransform::ENGSEasingFunc' has a wrong offset!");
//static_assert(offsetof(GSEaseFunc_EaseTransform, Start) == 0x000010, "Member 'GSEaseFunc_EaseTransform::Start' has a wrong offset!");
//static_assert(offsetof(GSEaseFunc_EaseTransform, End) == 0x000070, "Member 'GSEaseFunc_EaseTransform::End' has a wrong offset!");
//static_assert(offsetof(GSEaseFunc_EaseTransform, Alpha) == 0x0000D0, "Member 'GSEaseFunc_EaseTransform::Alpha' has a wrong offset!");
//static_assert(offsetof(GSEaseFunc_EaseTransform, Param) == 0x0000D4, "Member 'GSEaseFunc_EaseTransform::Param' has a wrong offset!");
//static_assert(offsetof(GSEaseFunc_EaseTransform, BlendExp) == 0x0000D8, "Member 'GSEaseFunc_EaseTransform::BlendExp' has a wrong offset!");
//static_assert(offsetof(GSEaseFunc_EaseTransform, Steps) == 0x0000DC, "Member 'GSEaseFunc_EaseTransform::Steps' has a wrong offset!");
//static_assert(offsetof(GSEaseFunc_EaseTransform, ReturnValue) == 0x0000E0, "Member 'GSEaseFunc_EaseTransform::ReturnValue' has a wrong offset!");

// Function b1-Managed.GSEaseFunc.EaseInQuart
// 0x0014 (0x0014 - 0x0000)
struct GSEaseFunc_EaseInQuart final
{
public:
	float                                         Start;                                             // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         End;                                               // 0x0004(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         Alpha;                                             // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         Param;                                             // 0x000C(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         ReturnValue;                                       // 0x0010(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
//static_assert(alignof(GSEaseFunc_EaseInQuart) == 0x000004, "Wrong alignment on GSEaseFunc_EaseInQuart");
//static_assert(sizeof(GSEaseFunc_EaseInQuart) == 0x000014, "Wrong size on GSEaseFunc_EaseInQuart");
//static_assert(offsetof(GSEaseFunc_EaseInQuart, Start) == 0x000000, "Member 'GSEaseFunc_EaseInQuart::Start' has a wrong offset!");
//static_assert(offsetof(GSEaseFunc_EaseInQuart, End) == 0x000004, "Member 'GSEaseFunc_EaseInQuart::End' has a wrong offset!");
//static_assert(offsetof(GSEaseFunc_EaseInQuart, Alpha) == 0x000008, "Member 'GSEaseFunc_EaseInQuart::Alpha' has a wrong offset!");
//static_assert(offsetof(GSEaseFunc_EaseInQuart, Param) == 0x00000C, "Member 'GSEaseFunc_EaseInQuart::Param' has a wrong offset!");
//static_assert(offsetof(GSEaseFunc_EaseInQuart, ReturnValue) == 0x000010, "Member 'GSEaseFunc_EaseInQuart::ReturnValue' has a wrong offset!");

// Function b1-Managed.GSEaseFunc.BackEaseOut
// 0x0014 (0x0014 - 0x0000)
struct GSEaseFunc_BackEaseOut final
{
public:
	float                                         Start;                                             // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         End;                                               // 0x0004(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         Alpha;                                             // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         Param;                                             // 0x000C(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         ReturnValue;                                       // 0x0010(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
//static_assert(alignof(GSEaseFunc_BackEaseOut) == 0x000004, "Wrong alignment on GSEaseFunc_BackEaseOut");
//static_assert(sizeof(GSEaseFunc_BackEaseOut) == 0x000014, "Wrong size on GSEaseFunc_BackEaseOut");
//static_assert(offsetof(GSEaseFunc_BackEaseOut, Start) == 0x000000, "Member 'GSEaseFunc_BackEaseOut::Start' has a wrong offset!");
//static_assert(offsetof(GSEaseFunc_BackEaseOut, End) == 0x000004, "Member 'GSEaseFunc_BackEaseOut::End' has a wrong offset!");
//static_assert(offsetof(GSEaseFunc_BackEaseOut, Alpha) == 0x000008, "Member 'GSEaseFunc_BackEaseOut::Alpha' has a wrong offset!");
//static_assert(offsetof(GSEaseFunc_BackEaseOut, Param) == 0x00000C, "Member 'GSEaseFunc_BackEaseOut::Param' has a wrong offset!");
//static_assert(offsetof(GSEaseFunc_BackEaseOut, ReturnValue) == 0x000010, "Member 'GSEaseFunc_BackEaseOut::ReturnValue' has a wrong offset!");

// Function b1-Managed.GSEaseFunc.EaseRotator
// 0x0060 (0x0060 - 0x0000)
struct GSEaseFunc_EaseRotator final
{
public:
	ENGSEasingFunc                                ENGSEasingFunc;                                    // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_1[0x7];                                        // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FRotator                               Start;                                             // 0x0008(0x0018)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
	struct FRotator                               End;                                               // 0x0020(0x0018)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
	float                                         Alpha;                                             // 0x0038(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         Param;                                             // 0x003C(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         BlendExp;                                          // 0x0040(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Steps;                                             // 0x0044(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FRotator                               ReturnValue;                                       // 0x0048(0x0018)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor)
};
//static_assert(alignof(GSEaseFunc_EaseRotator) == 0x000008, "Wrong alignment on GSEaseFunc_EaseRotator");
//static_assert(sizeof(GSEaseFunc_EaseRotator) == 0x000060, "Wrong size on GSEaseFunc_EaseRotator");
//static_assert(offsetof(GSEaseFunc_EaseRotator, ENGSEasingFunc) == 0x000000, "Member 'GSEaseFunc_EaseRotator::ENGSEasingFunc' has a wrong offset!");
//static_assert(offsetof(GSEaseFunc_EaseRotator, Start) == 0x000008, "Member 'GSEaseFunc_EaseRotator::Start' has a wrong offset!");
//static_assert(offsetof(GSEaseFunc_EaseRotator, End) == 0x000020, "Member 'GSEaseFunc_EaseRotator::End' has a wrong offset!");
//static_assert(offsetof(GSEaseFunc_EaseRotator, Alpha) == 0x000038, "Member 'GSEaseFunc_EaseRotator::Alpha' has a wrong offset!");
//static_assert(offsetof(GSEaseFunc_EaseRotator, Param) == 0x00003C, "Member 'GSEaseFunc_EaseRotator::Param' has a wrong offset!");
//static_assert(offsetof(GSEaseFunc_EaseRotator, BlendExp) == 0x000040, "Member 'GSEaseFunc_EaseRotator::BlendExp' has a wrong offset!");
//static_assert(offsetof(GSEaseFunc_EaseRotator, Steps) == 0x000044, "Member 'GSEaseFunc_EaseRotator::Steps' has a wrong offset!");
//static_assert(offsetof(GSEaseFunc_EaseRotator, ReturnValue) == 0x000048, "Member 'GSEaseFunc_EaseRotator::ReturnValue' has a wrong offset!");

// Function b1-Managed.GSEaseFunc.BackEaseIn
// 0x0014 (0x0014 - 0x0000)
struct GSEaseFunc_BackEaseIn final
{
public:
	float                                         Start;                                             // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         End;                                               // 0x0004(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         Alpha;                                             // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         Param;                                             // 0x000C(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         ReturnValue;                                       // 0x0010(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
//static_assert(alignof(GSEaseFunc_BackEaseIn) == 0x000004, "Wrong alignment on GSEaseFunc_BackEaseIn");
//static_assert(sizeof(GSEaseFunc_BackEaseIn) == 0x000014, "Wrong size on GSEaseFunc_BackEaseIn");
//static_assert(offsetof(GSEaseFunc_BackEaseIn, Start) == 0x000000, "Member 'GSEaseFunc_BackEaseIn::Start' has a wrong offset!");
//static_assert(offsetof(GSEaseFunc_BackEaseIn, End) == 0x000004, "Member 'GSEaseFunc_BackEaseIn::End' has a wrong offset!");
//static_assert(offsetof(GSEaseFunc_BackEaseIn, Alpha) == 0x000008, "Member 'GSEaseFunc_BackEaseIn::Alpha' has a wrong offset!");
//static_assert(offsetof(GSEaseFunc_BackEaseIn, Param) == 0x00000C, "Member 'GSEaseFunc_BackEaseIn::Param' has a wrong offset!");
//static_assert(offsetof(GSEaseFunc_BackEaseIn, ReturnValue) == 0x000010, "Member 'GSEaseFunc_BackEaseIn::ReturnValue' has a wrong offset!");

// Function b1-Managed.GSEaseFunc.EaseVector
// 0x0060 (0x0060 - 0x0000)
struct GSEaseFunc_EaseVector final
{
public:
	ENGSEasingFunc                                ENGSEasingFunc;                                    // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_1[0x7];                                        // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                Start;                                             // 0x0008(0x0018)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                End;                                               // 0x0020(0x0018)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         Alpha;                                             // 0x0038(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         Param;                                             // 0x003C(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         BlendExp;                                          // 0x0040(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Steps;                                             // 0x0044(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                ReturnValue;                                       // 0x0048(0x0018)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
//static_assert(alignof(GSEaseFunc_EaseVector) == 0x000008, "Wrong alignment on GSEaseFunc_EaseVector");
//static_assert(sizeof(GSEaseFunc_EaseVector) == 0x000060, "Wrong size on GSEaseFunc_EaseVector");
//static_assert(offsetof(GSEaseFunc_EaseVector, ENGSEasingFunc) == 0x000000, "Member 'GSEaseFunc_EaseVector::ENGSEasingFunc' has a wrong offset!");
//static_assert(offsetof(GSEaseFunc_EaseVector, Start) == 0x000008, "Member 'GSEaseFunc_EaseVector::Start' has a wrong offset!");
//static_assert(offsetof(GSEaseFunc_EaseVector, End) == 0x000020, "Member 'GSEaseFunc_EaseVector::End' has a wrong offset!");
//static_assert(offsetof(GSEaseFunc_EaseVector, Alpha) == 0x000038, "Member 'GSEaseFunc_EaseVector::Alpha' has a wrong offset!");
//static_assert(offsetof(GSEaseFunc_EaseVector, Param) == 0x00003C, "Member 'GSEaseFunc_EaseVector::Param' has a wrong offset!");
//static_assert(offsetof(GSEaseFunc_EaseVector, BlendExp) == 0x000040, "Member 'GSEaseFunc_EaseVector::BlendExp' has a wrong offset!");
//static_assert(offsetof(GSEaseFunc_EaseVector, Steps) == 0x000044, "Member 'GSEaseFunc_EaseVector::Steps' has a wrong offset!");
//static_assert(offsetof(GSEaseFunc_EaseVector, ReturnValue) == 0x000048, "Member 'GSEaseFunc_EaseVector::ReturnValue' has a wrong offset!");

// Function b1-Managed.GSEaseFunc.EaseColor
// 0x0020 (0x0020 - 0x0000)
struct GSEaseFunc_EaseColor final
{
public:
	ENGSEasingFunc                                ENGSEasingFunc;                                    // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_1[0x3];                                        // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FColor                                 Start;                                             // 0x0004(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FColor                                 End;                                               // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         Alpha;                                             // 0x000C(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         Param;                                             // 0x0010(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         BlendExp;                                          // 0x0014(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Steps;                                             // 0x0018(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FColor                                 ReturnValue;                                       // 0x001C(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
//static_assert(alignof(GSEaseFunc_EaseColor) == 0x000004, "Wrong alignment on GSEaseFunc_EaseColor");
//static_assert(sizeof(GSEaseFunc_EaseColor) == 0x000020, "Wrong size on GSEaseFunc_EaseColor");
//static_assert(offsetof(GSEaseFunc_EaseColor, ENGSEasingFunc) == 0x000000, "Member 'GSEaseFunc_EaseColor::ENGSEasingFunc' has a wrong offset!");
//static_assert(offsetof(GSEaseFunc_EaseColor, Start) == 0x000004, "Member 'GSEaseFunc_EaseColor::Start' has a wrong offset!");
//static_assert(offsetof(GSEaseFunc_EaseColor, End) == 0x000008, "Member 'GSEaseFunc_EaseColor::End' has a wrong offset!");
//static_assert(offsetof(GSEaseFunc_EaseColor, Alpha) == 0x00000C, "Member 'GSEaseFunc_EaseColor::Alpha' has a wrong offset!");
//static_assert(offsetof(GSEaseFunc_EaseColor, Param) == 0x000010, "Member 'GSEaseFunc_EaseColor::Param' has a wrong offset!");
//static_assert(offsetof(GSEaseFunc_EaseColor, BlendExp) == 0x000014, "Member 'GSEaseFunc_EaseColor::BlendExp' has a wrong offset!");
//static_assert(offsetof(GSEaseFunc_EaseColor, Steps) == 0x000018, "Member 'GSEaseFunc_EaseColor::Steps' has a wrong offset!");
//static_assert(offsetof(GSEaseFunc_EaseColor, ReturnValue) == 0x00001C, "Member 'GSEaseFunc_EaseColor::ReturnValue' has a wrong offset!");

// Function b1-Managed.GSEaseFunc.Ease
// 0x0020 (0x0020 - 0x0000)
struct GSEaseFunc_Ease final
{
public:
	ENGSEasingFunc                                ENGSEasingFunc;                                    // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_1[0x3];                                        // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         Start;                                             // 0x0004(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         End;                                               // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         Alpha;                                             // 0x000C(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         Param;                                             // 0x0010(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         BlendExp;                                          // 0x0014(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Steps;                                             // 0x0018(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         ReturnValue;                                       // 0x001C(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
//static_assert(alignof(GSEaseFunc_Ease) == 0x000004, "Wrong alignment on GSEaseFunc_Ease");
//static_assert(sizeof(GSEaseFunc_Ease) == 0x000020, "Wrong size on GSEaseFunc_Ease");
//static_assert(offsetof(GSEaseFunc_Ease, ENGSEasingFunc) == 0x000000, "Member 'GSEaseFunc_Ease::ENGSEasingFunc' has a wrong offset!");
//static_assert(offsetof(GSEaseFunc_Ease, Start) == 0x000004, "Member 'GSEaseFunc_Ease::Start' has a wrong offset!");
//static_assert(offsetof(GSEaseFunc_Ease, End) == 0x000008, "Member 'GSEaseFunc_Ease::End' has a wrong offset!");
//static_assert(offsetof(GSEaseFunc_Ease, Alpha) == 0x00000C, "Member 'GSEaseFunc_Ease::Alpha' has a wrong offset!");
//static_assert(offsetof(GSEaseFunc_Ease, Param) == 0x000010, "Member 'GSEaseFunc_Ease::Param' has a wrong offset!");
//static_assert(offsetof(GSEaseFunc_Ease, BlendExp) == 0x000014, "Member 'GSEaseFunc_Ease::BlendExp' has a wrong offset!");
//static_assert(offsetof(GSEaseFunc_Ease, Steps) == 0x000018, "Member 'GSEaseFunc_Ease::Steps' has a wrong offset!");
//static_assert(offsetof(GSEaseFunc_Ease, ReturnValue) == 0x00001C, "Member 'GSEaseFunc_Ease::ReturnValue' has a wrong offset!");

// Function b1-Managed.GSEaseFunc.Sin
// 0x0014 (0x0014 - 0x0000)
struct GSEaseFunc_Sin final
{
public:
	float                                         Start;                                             // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         End;                                               // 0x0004(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         Alpha;                                             // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         Param;                                             // 0x000C(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         ReturnValue;                                       // 0x0010(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
//static_assert(alignof(GSEaseFunc_Sin) == 0x000004, "Wrong alignment on GSEaseFunc_Sin");
//static_assert(sizeof(GSEaseFunc_Sin) == 0x000014, "Wrong size on GSEaseFunc_Sin");
//static_assert(offsetof(GSEaseFunc_Sin, Start) == 0x000000, "Member 'GSEaseFunc_Sin::Start' has a wrong offset!");
//static_assert(offsetof(GSEaseFunc_Sin, End) == 0x000004, "Member 'GSEaseFunc_Sin::End' has a wrong offset!");
//static_assert(offsetof(GSEaseFunc_Sin, Alpha) == 0x000008, "Member 'GSEaseFunc_Sin::Alpha' has a wrong offset!");
//static_assert(offsetof(GSEaseFunc_Sin, Param) == 0x00000C, "Member 'GSEaseFunc_Sin::Param' has a wrong offset!");
//static_assert(offsetof(GSEaseFunc_Sin, ReturnValue) == 0x000010, "Member 'GSEaseFunc_Sin::ReturnValue' has a wrong offset!");

// Function b1-Managed.BGUFuncLibNonRuntime.BGUMigrateDataFromUnitCommDesc_OverrideData
// 0x0010 (0x0010 - 0x0000)
struct BGUFuncLibNonRuntime_BGUMigrateDataFromUnitCommDesc_OverrideData final
{
public:
	class FString                                 BlameName;                                         // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash)
};
//static_assert(alignof(BGUFuncLibNonRuntime_BGUMigrateDataFromUnitCommDesc_OverrideData) == 0x000008, "Wrong alignment on BGUFuncLibNonRuntime_BGUMigrateDataFromUnitCommDesc_OverrideData");
//static_assert(sizeof(BGUFuncLibNonRuntime_BGUMigrateDataFromUnitCommDesc_OverrideData) == 0x000010, "Wrong size on BGUFuncLibNonRuntime_BGUMigrateDataFromUnitCommDesc_OverrideData");
//static_assert(offsetof(BGUFuncLibNonRuntime_BGUMigrateDataFromUnitCommDesc_OverrideData, BlameName) == 0x000000, "Member 'BGUFuncLibNonRuntime_BGUMigrateDataFromUnitCommDesc_OverrideData::BlameName' has a wrong offset!");

// Function b1-Managed.BGUFuncLibNonRuntime.BGUEditorRecordSubLevelsInLevelPackage
// 0x0020 (0x0020 - 0x0000)
struct BGUFuncLibNonRuntime_BGUEditorRecordSubLevelsInLevelPackage final
{
public:
	class FString                                 LevelAsset;                                        // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash)
	class FString                                 RecordFilePath;                                    // 0x0010(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash)
};
//static_assert(alignof(BGUFuncLibNonRuntime_BGUEditorRecordSubLevelsInLevelPackage) == 0x000008, "Wrong alignment on BGUFuncLibNonRuntime_BGUEditorRecordSubLevelsInLevelPackage");
//static_assert(sizeof(BGUFuncLibNonRuntime_BGUEditorRecordSubLevelsInLevelPackage) == 0x000020, "Wrong size on BGUFuncLibNonRuntime_BGUEditorRecordSubLevelsInLevelPackage");
//static_assert(offsetof(BGUFuncLibNonRuntime_BGUEditorRecordSubLevelsInLevelPackage, LevelAsset) == 0x000000, "Member 'BGUFuncLibNonRuntime_BGUEditorRecordSubLevelsInLevelPackage::LevelAsset' has a wrong offset!");
//static_assert(offsetof(BGUFuncLibNonRuntime_BGUEditorRecordSubLevelsInLevelPackage, RecordFilePath) == 0x000010, "Member 'BGUFuncLibNonRuntime_BGUEditorRecordSubLevelsInLevelPackage::RecordFilePath' has a wrong offset!");

// Function b1-Managed.BGUFuncLibNonRuntime.BGUAutoAddFootSyncMarkerToAnimSequence
// 0x0020 (0x0020 - 0x0000)
struct BGUFuncLibNonRuntime_BGUAutoAddFootSyncMarkerToAnimSequence final
{
public:
	class UAnimSequence*                          AnimSequence;                                      // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class FName                                   LeftFootBoneName;                                  // 0x0008(0x0008)(Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class FName                                   RightFootBoneName;                                 // 0x0010(0x0008)(Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         GroundFootLimitHeight;                             // 0x0018(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         ReturnValue : 1;                                   // 0x001C(0x0001)(BitIndex: 0x00, PropSize: 0x0001 (Parm, OutParm, ReturnParm, NoDestructor, HasGetValueTypeHash))
};
//static_assert(alignof(BGUFuncLibNonRuntime_BGUAutoAddFootSyncMarkerToAnimSequence) == 0x000008, "Wrong alignment on BGUFuncLibNonRuntime_BGUAutoAddFootSyncMarkerToAnimSequence");
//static_assert(sizeof(BGUFuncLibNonRuntime_BGUAutoAddFootSyncMarkerToAnimSequence) == 0x000020, "Wrong size on BGUFuncLibNonRuntime_BGUAutoAddFootSyncMarkerToAnimSequence");
//static_assert(offsetof(BGUFuncLibNonRuntime_BGUAutoAddFootSyncMarkerToAnimSequence, AnimSequence) == 0x000000, "Member 'BGUFuncLibNonRuntime_BGUAutoAddFootSyncMarkerToAnimSequence::AnimSequence' has a wrong offset!");
//static_assert(offsetof(BGUFuncLibNonRuntime_BGUAutoAddFootSyncMarkerToAnimSequence, LeftFootBoneName) == 0x000008, "Member 'BGUFuncLibNonRuntime_BGUAutoAddFootSyncMarkerToAnimSequence::LeftFootBoneName' has a wrong offset!");
//static_assert(offsetof(BGUFuncLibNonRuntime_BGUAutoAddFootSyncMarkerToAnimSequence, RightFootBoneName) == 0x000010, "Member 'BGUFuncLibNonRuntime_BGUAutoAddFootSyncMarkerToAnimSequence::RightFootBoneName' has a wrong offset!");
//static_assert(offsetof(BGUFuncLibNonRuntime_BGUAutoAddFootSyncMarkerToAnimSequence, GroundFootLimitHeight) == 0x000018, "Member 'BGUFuncLibNonRuntime_BGUAutoAddFootSyncMarkerToAnimSequence::GroundFootLimitHeight' has a wrong offset!");

// Function b1-Managed.BGUFuncLibNonRuntime.BGUDeserializeActorTransformsFromJson
// 0x0020 (0x0020 - 0x0000)
struct BGUFuncLibNonRuntime_BGUDeserializeActorTransformsFromJson final
{
public:
	class FString                                 JsonPath;                                          // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash)
	TArray<class AActor*>                         ActorsToDeserialize;                               // 0x0010(0x0010)(Parm, OutParm, ReferenceParm)
};
//static_assert(alignof(BGUFuncLibNonRuntime_BGUDeserializeActorTransformsFromJson) == 0x000008, "Wrong alignment on BGUFuncLibNonRuntime_BGUDeserializeActorTransformsFromJson");
//static_assert(sizeof(BGUFuncLibNonRuntime_BGUDeserializeActorTransformsFromJson) == 0x000020, "Wrong size on BGUFuncLibNonRuntime_BGUDeserializeActorTransformsFromJson");
//static_assert(offsetof(BGUFuncLibNonRuntime_BGUDeserializeActorTransformsFromJson, JsonPath) == 0x000000, "Member 'BGUFuncLibNonRuntime_BGUDeserializeActorTransformsFromJson::JsonPath' has a wrong offset!");
//static_assert(offsetof(BGUFuncLibNonRuntime_BGUDeserializeActorTransformsFromJson, ActorsToDeserialize) == 0x000010, "Member 'BGUFuncLibNonRuntime_BGUDeserializeActorTransformsFromJson::ActorsToDeserialize' has a wrong offset!");

// Function b1-Managed.BGUFuncLibNonRuntime.BGUGetLeftFootHeightByFootStepConfig
// 0x0018 (0x0018 - 0x0000)
struct BGUFuncLibNonRuntime_BGUGetLeftFootHeightByFootStepConfig final
{
public:
	int32                                         ResID;                                             // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_4[0x4];                                        // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class USkeletalMeshComponent*                 Mesh;                                              // 0x0008(0x0008)(ExportObject, Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         ReturnValue;                                       // 0x0010(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
//static_assert(alignof(BGUFuncLibNonRuntime_BGUGetLeftFootHeightByFootStepConfig) == 0x000008, "Wrong alignment on BGUFuncLibNonRuntime_BGUGetLeftFootHeightByFootStepConfig");
//static_assert(sizeof(BGUFuncLibNonRuntime_BGUGetLeftFootHeightByFootStepConfig) == 0x000018, "Wrong size on BGUFuncLibNonRuntime_BGUGetLeftFootHeightByFootStepConfig");
//static_assert(offsetof(BGUFuncLibNonRuntime_BGUGetLeftFootHeightByFootStepConfig, ResID) == 0x000000, "Member 'BGUFuncLibNonRuntime_BGUGetLeftFootHeightByFootStepConfig::ResID' has a wrong offset!");
//static_assert(offsetof(BGUFuncLibNonRuntime_BGUGetLeftFootHeightByFootStepConfig, Mesh) == 0x000008, "Member 'BGUFuncLibNonRuntime_BGUGetLeftFootHeightByFootStepConfig::Mesh' has a wrong offset!");
//static_assert(offsetof(BGUFuncLibNonRuntime_BGUGetLeftFootHeightByFootStepConfig, ReturnValue) == 0x000010, "Member 'BGUFuncLibNonRuntime_BGUGetLeftFootHeightByFootStepConfig::ReturnValue' has a wrong offset!");

// Function b1-Managed.BGUFuncLibNonRuntime.BGUMigrateDataFromSkillEffectDesc
// 0x0010 (0x0010 - 0x0000)
struct BGUFuncLibNonRuntime_BGUMigrateDataFromSkillEffectDesc final
{
public:
	class FString                                 BlameName;                                         // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash)
};
//static_assert(alignof(BGUFuncLibNonRuntime_BGUMigrateDataFromSkillEffectDesc) == 0x000008, "Wrong alignment on BGUFuncLibNonRuntime_BGUMigrateDataFromSkillEffectDesc");
//static_assert(sizeof(BGUFuncLibNonRuntime_BGUMigrateDataFromSkillEffectDesc) == 0x000010, "Wrong size on BGUFuncLibNonRuntime_BGUMigrateDataFromSkillEffectDesc");
//static_assert(offsetof(BGUFuncLibNonRuntime_BGUMigrateDataFromSkillEffectDesc, BlameName) == 0x000000, "Member 'BGUFuncLibNonRuntime_BGUMigrateDataFromSkillEffectDesc::BlameName' has a wrong offset!");

// Function b1-Managed.BGUFuncLibNonRuntime.BGUSerializeActorTransformsToJson
// 0x0020 (0x0020 - 0x0000)
struct BGUFuncLibNonRuntime_BGUSerializeActorTransformsToJson final
{
public:
	class FString                                 JsonPath;                                          // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash)
	TArray<class AActor*>                         Actors;                                            // 0x0010(0x0010)(Parm)
};
//static_assert(alignof(BGUFuncLibNonRuntime_BGUSerializeActorTransformsToJson) == 0x000008, "Wrong alignment on BGUFuncLibNonRuntime_BGUSerializeActorTransformsToJson");
//static_assert(sizeof(BGUFuncLibNonRuntime_BGUSerializeActorTransformsToJson) == 0x000020, "Wrong size on BGUFuncLibNonRuntime_BGUSerializeActorTransformsToJson");
//static_assert(offsetof(BGUFuncLibNonRuntime_BGUSerializeActorTransformsToJson, JsonPath) == 0x000000, "Member 'BGUFuncLibNonRuntime_BGUSerializeActorTransformsToJson::JsonPath' has a wrong offset!");
//static_assert(offsetof(BGUFuncLibNonRuntime_BGUSerializeActorTransformsToJson, Actors) == 0x000010, "Member 'BGUFuncLibNonRuntime_BGUSerializeActorTransformsToJson::Actors' has a wrong offset!");

// Function b1-Managed.BGUFuncLibNonRuntime.AddMagicallyChangeFadeOutNotify
// 0x0008 (0x0008 - 0x0000)
struct BGUFuncLibNonRuntime_AddMagicallyChangeFadeOutNotify final
{
public:
	class UAnimMontage*                           Montage;                                           // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
//static_assert(alignof(BGUFuncLibNonRuntime_AddMagicallyChangeFadeOutNotify) == 0x000008, "Wrong alignment on BGUFuncLibNonRuntime_AddMagicallyChangeFadeOutNotify");
//static_assert(sizeof(BGUFuncLibNonRuntime_AddMagicallyChangeFadeOutNotify) == 0x000008, "Wrong size on BGUFuncLibNonRuntime_AddMagicallyChangeFadeOutNotify");
//static_assert(offsetof(BGUFuncLibNonRuntime_AddMagicallyChangeFadeOutNotify, Montage) == 0x000000, "Member 'BGUFuncLibNonRuntime_AddMagicallyChangeFadeOutNotify::Montage' has a wrong offset!");

// Function b1-Managed.BGUFuncLibNonRuntime.BGUEditorRecordSubLevelsInWorld
// 0x0018 (0x0018 - 0x0000)
struct BGUFuncLibNonRuntime_BGUEditorRecordSubLevelsInWorld final
{
public:
	class UObject*                                WorldContext;                                      // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class FString                                 RecordFilePath;                                    // 0x0008(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash)
};
//static_assert(alignof(BGUFuncLibNonRuntime_BGUEditorRecordSubLevelsInWorld) == 0x000008, "Wrong alignment on BGUFuncLibNonRuntime_BGUEditorRecordSubLevelsInWorld");
//static_assert(sizeof(BGUFuncLibNonRuntime_BGUEditorRecordSubLevelsInWorld) == 0x000018, "Wrong size on BGUFuncLibNonRuntime_BGUEditorRecordSubLevelsInWorld");
//static_assert(offsetof(BGUFuncLibNonRuntime_BGUEditorRecordSubLevelsInWorld, WorldContext) == 0x000000, "Member 'BGUFuncLibNonRuntime_BGUEditorRecordSubLevelsInWorld::WorldContext' has a wrong offset!");
//static_assert(offsetof(BGUFuncLibNonRuntime_BGUEditorRecordSubLevelsInWorld, RecordFilePath) == 0x000008, "Member 'BGUFuncLibNonRuntime_BGUEditorRecordSubLevelsInWorld::RecordFilePath' has a wrong offset!");

// Function b1-Managed.BGUFuncLibNonRuntime.BGUAddNofityStateByPelvisSpeed
// 0x0038 (0x0038 - 0x0000)
struct BGUFuncLibNonRuntime_BGUAddNofityStateByPelvisSpeed final
{
public:
	class UAnimMontage*                           AnimMontage;                                       // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         SpeedThreshold;                                    // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         BuffID;                                            // 0x000C(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UClass*                                 NewNotifyStateClass;                               // 0x0010(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         FirstRemoveAddBuffID : 1;                          // 0x0018(0x0001)(BitIndex: 0x00, PropSize: 0x0001 (Parm, NoDestructor, HasGetValueTypeHash))
	uint8                                         Pad_19[0x7];                                       // 0x0019(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 SocketName;                                        // 0x0020(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash)
	float                                         TickTime;                                          // 0x0030(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
//static_assert(alignof(BGUFuncLibNonRuntime_BGUAddNofityStateByPelvisSpeed) == 0x000008, "Wrong alignment on BGUFuncLibNonRuntime_BGUAddNofityStateByPelvisSpeed");
//static_assert(sizeof(BGUFuncLibNonRuntime_BGUAddNofityStateByPelvisSpeed) == 0x000038, "Wrong size on BGUFuncLibNonRuntime_BGUAddNofityStateByPelvisSpeed");
//static_assert(offsetof(BGUFuncLibNonRuntime_BGUAddNofityStateByPelvisSpeed, AnimMontage) == 0x000000, "Member 'BGUFuncLibNonRuntime_BGUAddNofityStateByPelvisSpeed::AnimMontage' has a wrong offset!");
//static_assert(offsetof(BGUFuncLibNonRuntime_BGUAddNofityStateByPelvisSpeed, SpeedThreshold) == 0x000008, "Member 'BGUFuncLibNonRuntime_BGUAddNofityStateByPelvisSpeed::SpeedThreshold' has a wrong offset!");
//static_assert(offsetof(BGUFuncLibNonRuntime_BGUAddNofityStateByPelvisSpeed, BuffID) == 0x00000C, "Member 'BGUFuncLibNonRuntime_BGUAddNofityStateByPelvisSpeed::BuffID' has a wrong offset!");
//static_assert(offsetof(BGUFuncLibNonRuntime_BGUAddNofityStateByPelvisSpeed, NewNotifyStateClass) == 0x000010, "Member 'BGUFuncLibNonRuntime_BGUAddNofityStateByPelvisSpeed::NewNotifyStateClass' has a wrong offset!");
//static_assert(offsetof(BGUFuncLibNonRuntime_BGUAddNofityStateByPelvisSpeed, SocketName) == 0x000020, "Member 'BGUFuncLibNonRuntime_BGUAddNofityStateByPelvisSpeed::SocketName' has a wrong offset!");
//static_assert(offsetof(BGUFuncLibNonRuntime_BGUAddNofityStateByPelvisSpeed, TickTime) == 0x000030, "Member 'BGUFuncLibNonRuntime_BGUAddNofityStateByPelvisSpeed::TickTime' has a wrong offset!");

// Function b1-Managed.BGUFuncLibNonRuntime.BGUMigrateDataFromUnitCommDesc
// 0x0010 (0x0010 - 0x0000)
struct BGUFuncLibNonRuntime_BGUMigrateDataFromUnitCommDesc final
{
public:
	class FString                                 BlameName;                                         // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash)
};
//static_assert(alignof(BGUFuncLibNonRuntime_BGUMigrateDataFromUnitCommDesc) == 0x000008, "Wrong alignment on BGUFuncLibNonRuntime_BGUMigrateDataFromUnitCommDesc");
//static_assert(sizeof(BGUFuncLibNonRuntime_BGUMigrateDataFromUnitCommDesc) == 0x000010, "Wrong size on BGUFuncLibNonRuntime_BGUMigrateDataFromUnitCommDesc");
//static_assert(offsetof(BGUFuncLibNonRuntime_BGUMigrateDataFromUnitCommDesc, BlameName) == 0x000000, "Member 'BGUFuncLibNonRuntime_BGUMigrateDataFromUnitCommDesc::BlameName' has a wrong offset!");

// Function b1-Managed.BGUFuncLibNonRuntime.GetTemplateClassFromUnitAsset
// 0x0010 (0x0010 - 0x0000)
struct BGUFuncLibNonRuntime_GetTemplateClassFromUnitAsset final
{
public:
	class UAssetDataArray*                        Assets;                                            // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UClass*                                 ReturnValue;                                       // 0x0008(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
//static_assert(alignof(BGUFuncLibNonRuntime_GetTemplateClassFromUnitAsset) == 0x000008, "Wrong alignment on BGUFuncLibNonRuntime_GetTemplateClassFromUnitAsset");
//static_assert(sizeof(BGUFuncLibNonRuntime_GetTemplateClassFromUnitAsset) == 0x000010, "Wrong size on BGUFuncLibNonRuntime_GetTemplateClassFromUnitAsset");
//static_assert(offsetof(BGUFuncLibNonRuntime_GetTemplateClassFromUnitAsset, Assets) == 0x000000, "Member 'BGUFuncLibNonRuntime_GetTemplateClassFromUnitAsset::Assets' has a wrong offset!");
//static_assert(offsetof(BGUFuncLibNonRuntime_GetTemplateClassFromUnitAsset, ReturnValue) == 0x000008, "Member 'BGUFuncLibNonRuntime_GetTemplateClassFromUnitAsset::ReturnValue' has a wrong offset!");

// Function b1-Managed.BGUFuncLibNonRuntime.BGUSetUpDefaultFootstepAudio
// 0x0028 (0x0028 - 0x0000)
struct BGUFuncLibNonRuntime_BGUSetUpDefaultFootstepAudio final
{
public:
	class ABUTamerActor*                          TamerActor;                                        // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FSoftObjectPath                        AudioPath;                                         // 0x0008(0x0018)(Parm, OutParm, ZeroConstructor, ReferenceParm, HasGetValueTypeHash)
	uint8                                         ReturnValue : 1;                                   // 0x0020(0x0001)(BitIndex: 0x00, PropSize: 0x0001 (Parm, OutParm, ReturnParm, NoDestructor, HasGetValueTypeHash))
};
//static_assert(alignof(BGUFuncLibNonRuntime_BGUSetUpDefaultFootstepAudio) == 0x000008, "Wrong alignment on BGUFuncLibNonRuntime_BGUSetUpDefaultFootstepAudio");
//static_assert(sizeof(BGUFuncLibNonRuntime_BGUSetUpDefaultFootstepAudio) == 0x000028, "Wrong size on BGUFuncLibNonRuntime_BGUSetUpDefaultFootstepAudio");
//static_assert(offsetof(BGUFuncLibNonRuntime_BGUSetUpDefaultFootstepAudio, TamerActor) == 0x000000, "Member 'BGUFuncLibNonRuntime_BGUSetUpDefaultFootstepAudio::TamerActor' has a wrong offset!");
//static_assert(offsetof(BGUFuncLibNonRuntime_BGUSetUpDefaultFootstepAudio, AudioPath) == 0x000008, "Member 'BGUFuncLibNonRuntime_BGUSetUpDefaultFootstepAudio::AudioPath' has a wrong offset!");

// Function b1-Managed.BGUFuncLibNonRuntime.CheckUnitCapsuleCollisions
// 0x0018 (0x0018 - 0x0000)
struct BGUFuncLibNonRuntime_CheckUnitCapsuleCollisions final
{
public:
	class UObject*                                WorldContext;                                      // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class FString                                 ReturnValue;                                       // 0x0008(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash)
};
//static_assert(alignof(BGUFuncLibNonRuntime_CheckUnitCapsuleCollisions) == 0x000008, "Wrong alignment on BGUFuncLibNonRuntime_CheckUnitCapsuleCollisions");
//static_assert(sizeof(BGUFuncLibNonRuntime_CheckUnitCapsuleCollisions) == 0x000018, "Wrong size on BGUFuncLibNonRuntime_CheckUnitCapsuleCollisions");
//static_assert(offsetof(BGUFuncLibNonRuntime_CheckUnitCapsuleCollisions, WorldContext) == 0x000000, "Member 'BGUFuncLibNonRuntime_CheckUnitCapsuleCollisions::WorldContext' has a wrong offset!");
//static_assert(offsetof(BGUFuncLibNonRuntime_CheckUnitCapsuleCollisions, ReturnValue) == 0x000008, "Member 'BGUFuncLibNonRuntime_CheckUnitCapsuleCollisions::ReturnValue' has a wrong offset!");

// Function b1-Managed.BGUFuncLibNonRuntime.GetAllSummonBPPathFromDesc
// 0x0010 (0x0010 - 0x0000)
struct BGUFuncLibNonRuntime_GetAllSummonBPPathFromDesc final
{
public:
	TArray<class FString>                         CurrentUsedBPPath;                                 // 0x0000(0x0010)(Parm, OutParm)
};
//static_assert(alignof(BGUFuncLibNonRuntime_GetAllSummonBPPathFromDesc) == 0x000008, "Wrong alignment on BGUFuncLibNonRuntime_GetAllSummonBPPathFromDesc");
//static_assert(sizeof(BGUFuncLibNonRuntime_GetAllSummonBPPathFromDesc) == 0x000010, "Wrong size on BGUFuncLibNonRuntime_GetAllSummonBPPathFromDesc");
//static_assert(offsetof(BGUFuncLibNonRuntime_GetAllSummonBPPathFromDesc, CurrentUsedBPPath) == 0x000000, "Member 'BGUFuncLibNonRuntime_GetAllSummonBPPathFromDesc::CurrentUsedBPPath' has a wrong offset!");

// Function b1-Managed.BGUFuncLibNonRuntime.CheckBeAttacked2Resources
// 0x0018 (0x0018 - 0x0000)
struct BGUFuncLibNonRuntime_CheckBeAttacked2Resources final
{
public:
	uint8                                         bCheckBasicRuleOnly : 1;                           // 0x0000(0x0001)(BitIndex: 0x00, PropSize: 0x0001 (Parm, NoDestructor, HasGetValueTypeHash))
	uint8                                         Pad_1[0x7];                                        // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 ReturnValue;                                       // 0x0008(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash)
};
//static_assert(alignof(BGUFuncLibNonRuntime_CheckBeAttacked2Resources) == 0x000008, "Wrong alignment on BGUFuncLibNonRuntime_CheckBeAttacked2Resources");
//static_assert(sizeof(BGUFuncLibNonRuntime_CheckBeAttacked2Resources) == 0x000018, "Wrong size on BGUFuncLibNonRuntime_CheckBeAttacked2Resources");
//static_assert(offsetof(BGUFuncLibNonRuntime_CheckBeAttacked2Resources, ReturnValue) == 0x000008, "Member 'BGUFuncLibNonRuntime_CheckBeAttacked2Resources::ReturnValue' has a wrong offset!");

// Function b1-Managed.BGUFuncLibNonRuntime.UpdateHitAudioPreloadList
// 0x0018 (0x0018 - 0x0000)
struct BGUFuncLibNonRuntime_UpdateHitAudioPreloadList final
{
public:
	TArray<class FString>                         PathList_Exist;                                    // 0x0000(0x0010)(Parm, OutParm)
	int32                                         ReturnValue;                                       // 0x0010(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
//static_assert(alignof(BGUFuncLibNonRuntime_UpdateHitAudioPreloadList) == 0x000008, "Wrong alignment on BGUFuncLibNonRuntime_UpdateHitAudioPreloadList");
//static_assert(sizeof(BGUFuncLibNonRuntime_UpdateHitAudioPreloadList) == 0x000018, "Wrong size on BGUFuncLibNonRuntime_UpdateHitAudioPreloadList");
//static_assert(offsetof(BGUFuncLibNonRuntime_UpdateHitAudioPreloadList, PathList_Exist) == 0x000000, "Member 'BGUFuncLibNonRuntime_UpdateHitAudioPreloadList::PathList_Exist' has a wrong offset!");
//static_assert(offsetof(BGUFuncLibNonRuntime_UpdateHitAudioPreloadList, ReturnValue) == 0x000010, "Member 'BGUFuncLibNonRuntime_UpdateHitAudioPreloadList::ReturnValue' has a wrong offset!");

// Function b1-Managed.BGUFuncLibNonRuntime.GetOriFilePathByAssetPath
// 0x0030 (0x0030 - 0x0000)
struct BGUFuncLibNonRuntime_GetOriFilePathByAssetPath final
{
public:
	class FString                                 AssetPathName;                                     // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash)
	class FString                                 AssetName;                                         // 0x0010(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash)
	class FString                                 ReturnValue;                                       // 0x0020(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash)
};
//static_assert(alignof(BGUFuncLibNonRuntime_GetOriFilePathByAssetPath) == 0x000008, "Wrong alignment on BGUFuncLibNonRuntime_GetOriFilePathByAssetPath");
//static_assert(sizeof(BGUFuncLibNonRuntime_GetOriFilePathByAssetPath) == 0x000030, "Wrong size on BGUFuncLibNonRuntime_GetOriFilePathByAssetPath");
//static_assert(offsetof(BGUFuncLibNonRuntime_GetOriFilePathByAssetPath, AssetPathName) == 0x000000, "Member 'BGUFuncLibNonRuntime_GetOriFilePathByAssetPath::AssetPathName' has a wrong offset!");
//static_assert(offsetof(BGUFuncLibNonRuntime_GetOriFilePathByAssetPath, AssetName) == 0x000010, "Member 'BGUFuncLibNonRuntime_GetOriFilePathByAssetPath::AssetName' has a wrong offset!");
//static_assert(offsetof(BGUFuncLibNonRuntime_GetOriFilePathByAssetPath, ReturnValue) == 0x000020, "Member 'BGUFuncLibNonRuntime_GetOriFilePathByAssetPath::ReturnValue' has a wrong offset!");

// Function b1-Managed.BGUFuncLibNonRuntime.BGUAutoAddFootLockCurve
// 0x0028 (0x0028 - 0x0000)
struct BGUFuncLibNonRuntime_BGUAutoAddFootLockCurve final
{
public:
	class UAnimSequence*                          AnimSequence;                                      // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class FName                                   LeftFootBoneName;                                  // 0x0008(0x0008)(Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class FName                                   RightFootBoneName;                                 // 0x0010(0x0008)(Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         FootLockHeight;                                    // 0x0018(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         FootUnlockHeight;                                  // 0x001C(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         FootLockSpeed;                                     // 0x0020(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         FootUnlockSpeed;                                   // 0x0024(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
//static_assert(alignof(BGUFuncLibNonRuntime_BGUAutoAddFootLockCurve) == 0x000008, "Wrong alignment on BGUFuncLibNonRuntime_BGUAutoAddFootLockCurve");
//static_assert(sizeof(BGUFuncLibNonRuntime_BGUAutoAddFootLockCurve) == 0x000028, "Wrong size on BGUFuncLibNonRuntime_BGUAutoAddFootLockCurve");
//static_assert(offsetof(BGUFuncLibNonRuntime_BGUAutoAddFootLockCurve, AnimSequence) == 0x000000, "Member 'BGUFuncLibNonRuntime_BGUAutoAddFootLockCurve::AnimSequence' has a wrong offset!");
//static_assert(offsetof(BGUFuncLibNonRuntime_BGUAutoAddFootLockCurve, LeftFootBoneName) == 0x000008, "Member 'BGUFuncLibNonRuntime_BGUAutoAddFootLockCurve::LeftFootBoneName' has a wrong offset!");
//static_assert(offsetof(BGUFuncLibNonRuntime_BGUAutoAddFootLockCurve, RightFootBoneName) == 0x000010, "Member 'BGUFuncLibNonRuntime_BGUAutoAddFootLockCurve::RightFootBoneName' has a wrong offset!");
//static_assert(offsetof(BGUFuncLibNonRuntime_BGUAutoAddFootLockCurve, FootLockHeight) == 0x000018, "Member 'BGUFuncLibNonRuntime_BGUAutoAddFootLockCurve::FootLockHeight' has a wrong offset!");
//static_assert(offsetof(BGUFuncLibNonRuntime_BGUAutoAddFootLockCurve, FootUnlockHeight) == 0x00001C, "Member 'BGUFuncLibNonRuntime_BGUAutoAddFootLockCurve::FootUnlockHeight' has a wrong offset!");
//static_assert(offsetof(BGUFuncLibNonRuntime_BGUAutoAddFootLockCurve, FootLockSpeed) == 0x000020, "Member 'BGUFuncLibNonRuntime_BGUAutoAddFootLockCurve::FootLockSpeed' has a wrong offset!");
//static_assert(offsetof(BGUFuncLibNonRuntime_BGUAutoAddFootLockCurve, FootUnlockSpeed) == 0x000024, "Member 'BGUFuncLibNonRuntime_BGUAutoAddFootLockCurve::FootUnlockSpeed' has a wrong offset!");

// Function b1-Managed.BGUFuncLibNonRuntime.BindNormalStiffAMInUBAC
// 0x0008 (0x0008 - 0x0000)
struct BGUFuncLibNonRuntime_BindNormalStiffAMInUBAC final
{
public:
	class UBGWDataAsset_UnitBeAttackedConfig*     UBAC;                                              // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
//static_assert(alignof(BGUFuncLibNonRuntime_BindNormalStiffAMInUBAC) == 0x000008, "Wrong alignment on BGUFuncLibNonRuntime_BindNormalStiffAMInUBAC");
//static_assert(sizeof(BGUFuncLibNonRuntime_BindNormalStiffAMInUBAC) == 0x000008, "Wrong size on BGUFuncLibNonRuntime_BindNormalStiffAMInUBAC");
//static_assert(offsetof(BGUFuncLibNonRuntime_BindNormalStiffAMInUBAC, UBAC) == 0x000000, "Member 'BGUFuncLibNonRuntime_BindNormalStiffAMInUBAC::UBAC' has a wrong offset!");

// Function b1-Managed.BGUFuncLibNonRuntime.SetActorCompEditorOnly
// 0x0010 (0x0010 - 0x0000)
struct BGUFuncLibNonRuntime_SetActorCompEditorOnly final
{
public:
	class UActorComponent*                        ActorComp;                                         // 0x0000(0x0008)(ExportObject, Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         bIsEditorOnly : 1;                                 // 0x0008(0x0001)(BitIndex: 0x00, PropSize: 0x0001 (Parm, NoDestructor, HasGetValueTypeHash))
};
//static_assert(alignof(BGUFuncLibNonRuntime_SetActorCompEditorOnly) == 0x000008, "Wrong alignment on BGUFuncLibNonRuntime_SetActorCompEditorOnly");
//static_assert(sizeof(BGUFuncLibNonRuntime_SetActorCompEditorOnly) == 0x000010, "Wrong size on BGUFuncLibNonRuntime_SetActorCompEditorOnly");
//static_assert(offsetof(BGUFuncLibNonRuntime_SetActorCompEditorOnly, ActorComp) == 0x000000, "Member 'BGUFuncLibNonRuntime_SetActorCompEditorOnly::ActorComp' has a wrong offset!");

// Function b1-Managed.BGUFuncLibNonRuntime.GetAllProjectileBPPath
// 0x0010 (0x0010 - 0x0000)
struct BGUFuncLibNonRuntime_GetAllProjectileBPPath final
{
public:
	TArray<class FString>                         PathList_Exist;                                    // 0x0000(0x0010)(Parm, OutParm)
};
//static_assert(alignof(BGUFuncLibNonRuntime_GetAllProjectileBPPath) == 0x000008, "Wrong alignment on BGUFuncLibNonRuntime_GetAllProjectileBPPath");
//static_assert(sizeof(BGUFuncLibNonRuntime_GetAllProjectileBPPath) == 0x000010, "Wrong size on BGUFuncLibNonRuntime_GetAllProjectileBPPath");
//static_assert(offsetof(BGUFuncLibNonRuntime_GetAllProjectileBPPath, PathList_Exist) == 0x000000, "Member 'BGUFuncLibNonRuntime_GetAllProjectileBPPath::PathList_Exist' has a wrong offset!");

// Function b1-Managed.BGUFuncLibNonRuntime.BindDeathDispAMInUDDC
// 0x0008 (0x0008 - 0x0000)
struct BGUFuncLibNonRuntime_BindDeathDispAMInUDDC final
{
public:
	class UBGWDataAsset_UnitDeathDispConfig*      UDDC;                                              // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
//static_assert(alignof(BGUFuncLibNonRuntime_BindDeathDispAMInUDDC) == 0x000008, "Wrong alignment on BGUFuncLibNonRuntime_BindDeathDispAMInUDDC");
//static_assert(sizeof(BGUFuncLibNonRuntime_BindDeathDispAMInUDDC) == 0x000008, "Wrong size on BGUFuncLibNonRuntime_BindDeathDispAMInUDDC");
//static_assert(offsetof(BGUFuncLibNonRuntime_BindDeathDispAMInUDDC, UDDC) == 0x000000, "Member 'BGUFuncLibNonRuntime_BindDeathDispAMInUDDC::UDDC' has a wrong offset!");

// Function b1-Managed.BGUFuncLibNonRuntime.GetResIDFromUnitAsset
// 0x0010 (0x0010 - 0x0000)
struct BGUFuncLibNonRuntime_GetResIDFromUnitAsset final
{
public:
	class UAssetDataArray*                        Assets;                                            // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         ReturnValue;                                       // 0x0008(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
//static_assert(alignof(BGUFuncLibNonRuntime_GetResIDFromUnitAsset) == 0x000008, "Wrong alignment on BGUFuncLibNonRuntime_GetResIDFromUnitAsset");
//static_assert(sizeof(BGUFuncLibNonRuntime_GetResIDFromUnitAsset) == 0x000010, "Wrong size on BGUFuncLibNonRuntime_GetResIDFromUnitAsset");
//static_assert(offsetof(BGUFuncLibNonRuntime_GetResIDFromUnitAsset, Assets) == 0x000000, "Member 'BGUFuncLibNonRuntime_GetResIDFromUnitAsset::Assets' has a wrong offset!");
//static_assert(offsetof(BGUFuncLibNonRuntime_GetResIDFromUnitAsset, ReturnValue) == 0x000008, "Member 'BGUFuncLibNonRuntime_GetResIDFromUnitAsset::ReturnValue' has a wrong offset!");

// Function b1-Managed.BGUFuncLibNonRuntime.CheckHitMoveCapsules
// 0x0018 (0x0018 - 0x0000)
struct BGUFuncLibNonRuntime_CheckHitMoveCapsules final
{
public:
	class UObject*                                WorldContext;                                      // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class FString                                 ReturnValue;                                       // 0x0008(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash)
};
//static_assert(alignof(BGUFuncLibNonRuntime_CheckHitMoveCapsules) == 0x000008, "Wrong alignment on BGUFuncLibNonRuntime_CheckHitMoveCapsules");
//static_assert(sizeof(BGUFuncLibNonRuntime_CheckHitMoveCapsules) == 0x000018, "Wrong size on BGUFuncLibNonRuntime_CheckHitMoveCapsules");
//static_assert(offsetof(BGUFuncLibNonRuntime_CheckHitMoveCapsules, WorldContext) == 0x000000, "Member 'BGUFuncLibNonRuntime_CheckHitMoveCapsules::WorldContext' has a wrong offset!");
//static_assert(offsetof(BGUFuncLibNonRuntime_CheckHitMoveCapsules, ReturnValue) == 0x000008, "Member 'BGUFuncLibNonRuntime_CheckHitMoveCapsules::ReturnValue' has a wrong offset!");

// Function b1-Managed.BGUFuncLibNonRuntime.ProjectileSpawnTest
// 0x0018 (0x0018 - 0x0000)
struct BGUFuncLibNonRuntime_ProjectileSpawnTest final
{
public:
	class AActor*                                 Spawnner;                                          // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class AActor*                                 Target;                                            // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UBGWDataAsset_ProjectileSpawnConfig*    ProjectileSpawnConfig;                             // 0x0010(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
//static_assert(alignof(BGUFuncLibNonRuntime_ProjectileSpawnTest) == 0x000008, "Wrong alignment on BGUFuncLibNonRuntime_ProjectileSpawnTest");
//static_assert(sizeof(BGUFuncLibNonRuntime_ProjectileSpawnTest) == 0x000018, "Wrong size on BGUFuncLibNonRuntime_ProjectileSpawnTest");
//static_assert(offsetof(BGUFuncLibNonRuntime_ProjectileSpawnTest, Spawnner) == 0x000000, "Member 'BGUFuncLibNonRuntime_ProjectileSpawnTest::Spawnner' has a wrong offset!");
//static_assert(offsetof(BGUFuncLibNonRuntime_ProjectileSpawnTest, Target) == 0x000008, "Member 'BGUFuncLibNonRuntime_ProjectileSpawnTest::Target' has a wrong offset!");
//static_assert(offsetof(BGUFuncLibNonRuntime_ProjectileSpawnTest, ProjectileSpawnConfig) == 0x000010, "Member 'BGUFuncLibNonRuntime_ProjectileSpawnTest::ProjectileSpawnConfig' has a wrong offset!");

// Function b1-Managed.BGUFuncLibNonRuntime.GetResIDFromAsset
// 0x0018 (0x0018 - 0x0000)
struct BGUFuncLibNonRuntime_GetResIDFromAsset final
{
public:
	class UAssetDataArray*                        Assets;                                            // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	TArray<class UShapeComponent*>                ReturnValue;                                       // 0x0008(0x0010)(Parm, OutParm, ReturnParm)
};
//static_assert(alignof(BGUFuncLibNonRuntime_GetResIDFromAsset) == 0x000008, "Wrong alignment on BGUFuncLibNonRuntime_GetResIDFromAsset");
//static_assert(sizeof(BGUFuncLibNonRuntime_GetResIDFromAsset) == 0x000018, "Wrong size on BGUFuncLibNonRuntime_GetResIDFromAsset");
//static_assert(offsetof(BGUFuncLibNonRuntime_GetResIDFromAsset, Assets) == 0x000000, "Member 'BGUFuncLibNonRuntime_GetResIDFromAsset::Assets' has a wrong offset!");
//static_assert(offsetof(BGUFuncLibNonRuntime_GetResIDFromAsset, ReturnValue) == 0x000008, "Member 'BGUFuncLibNonRuntime_GetResIDFromAsset::ReturnValue' has a wrong offset!");

// Function b1-Managed.BGUFuncLibNonRuntime.BGUCopyABPSetting
// 0x0010 (0x0010 - 0x0000)
struct BGUFuncLibNonRuntime_BGUCopyABPSetting final
{
public:
	class UBGWDataAsset_AbpHumanoidSetting*       Src;                                               // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UBGWDataAsset_AbpHumanoidSetting*       Dest;                                              // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
//static_assert(alignof(BGUFuncLibNonRuntime_BGUCopyABPSetting) == 0x000008, "Wrong alignment on BGUFuncLibNonRuntime_BGUCopyABPSetting");
//static_assert(sizeof(BGUFuncLibNonRuntime_BGUCopyABPSetting) == 0x000010, "Wrong size on BGUFuncLibNonRuntime_BGUCopyABPSetting");
//static_assert(offsetof(BGUFuncLibNonRuntime_BGUCopyABPSetting, Src) == 0x000000, "Member 'BGUFuncLibNonRuntime_BGUCopyABPSetting::Src' has a wrong offset!");
//static_assert(offsetof(BGUFuncLibNonRuntime_BGUCopyABPSetting, Dest) == 0x000008, "Member 'BGUFuncLibNonRuntime_BGUCopyABPSetting::Dest' has a wrong offset!");

// Function b1-Managed.BGUFuncLibNonRuntime.BGUIsFileExist
// 0x0028 (0x0028 - 0x0000)
struct BGUFuncLibNonRuntime_BGUIsFileExist final
{
public:
	class FString                                 PathWithGameHead;                                  // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash)
	class FString                                 FullPath;                                          // 0x0010(0x0010)(Parm, OutParm, ZeroConstructor, HasGetValueTypeHash)
	uint8                                         ReturnValue : 1;                                   // 0x0020(0x0001)(BitIndex: 0x00, PropSize: 0x0001 (Parm, OutParm, ReturnParm, NoDestructor, HasGetValueTypeHash))
};
//static_assert(alignof(BGUFuncLibNonRuntime_BGUIsFileExist) == 0x000008, "Wrong alignment on BGUFuncLibNonRuntime_BGUIsFileExist");
//static_assert(sizeof(BGUFuncLibNonRuntime_BGUIsFileExist) == 0x000028, "Wrong size on BGUFuncLibNonRuntime_BGUIsFileExist");
//static_assert(offsetof(BGUFuncLibNonRuntime_BGUIsFileExist, PathWithGameHead) == 0x000000, "Member 'BGUFuncLibNonRuntime_BGUIsFileExist::PathWithGameHead' has a wrong offset!");
//static_assert(offsetof(BGUFuncLibNonRuntime_BGUIsFileExist, FullPath) == 0x000010, "Member 'BGUFuncLibNonRuntime_BGUIsFileExist::FullPath' has a wrong offset!");

// Function b1-Managed.BGUFuncLibNonRuntime.SkillSVaild
// 0x0010 (0x0010 - 0x0000)
struct BGUFuncLibNonRuntime_SkillSVaild final
{
public:
	class AActor*                                 Unit;                                              // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         SkillID;                                           // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         ReturnValue : 1;                                   // 0x000C(0x0001)(BitIndex: 0x00, PropSize: 0x0001 (Parm, OutParm, ReturnParm, NoDestructor, HasGetValueTypeHash))
};
//static_assert(alignof(BGUFuncLibNonRuntime_SkillSVaild) == 0x000008, "Wrong alignment on BGUFuncLibNonRuntime_SkillSVaild");
//static_assert(sizeof(BGUFuncLibNonRuntime_SkillSVaild) == 0x000010, "Wrong size on BGUFuncLibNonRuntime_SkillSVaild");
//static_assert(offsetof(BGUFuncLibNonRuntime_SkillSVaild, Unit) == 0x000000, "Member 'BGUFuncLibNonRuntime_SkillSVaild::Unit' has a wrong offset!");
//static_assert(offsetof(BGUFuncLibNonRuntime_SkillSVaild, SkillID) == 0x000008, "Member 'BGUFuncLibNonRuntime_SkillSVaild::SkillID' has a wrong offset!");

// Function b1-Managed.BGUFuncLibNonRuntime.TestCode
// 0x0010 (0x0010 - 0x0000)
struct BGUFuncLibNonRuntime_TestCode final
{
public:
	class FString                                 ReturnValue;                                       // 0x0000(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash)
};
//static_assert(alignof(BGUFuncLibNonRuntime_TestCode) == 0x000008, "Wrong alignment on BGUFuncLibNonRuntime_TestCode");
//static_assert(sizeof(BGUFuncLibNonRuntime_TestCode) == 0x000010, "Wrong size on BGUFuncLibNonRuntime_TestCode");
//static_assert(offsetof(BGUFuncLibNonRuntime_TestCode, ReturnValue) == 0x000000, "Member 'BGUFuncLibNonRuntime_TestCode::ReturnValue' has a wrong offset!");

// Function b1-Managed.BGUFuncLibNonRuntime.GetCDO
// 0x0010 (0x0010 - 0x0000)
struct BGUFuncLibNonRuntime_GetCDO final
{
public:
	class UAssetDataArray*                        Assets;                                            // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UObject*                                ReturnValue;                                       // 0x0008(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
//static_assert(alignof(BGUFuncLibNonRuntime_GetCDO) == 0x000008, "Wrong alignment on BGUFuncLibNonRuntime_GetCDO");
//static_assert(sizeof(BGUFuncLibNonRuntime_GetCDO) == 0x000010, "Wrong size on BGUFuncLibNonRuntime_GetCDO");
//static_assert(offsetof(BGUFuncLibNonRuntime_GetCDO, Assets) == 0x000000, "Member 'BGUFuncLibNonRuntime_GetCDO::Assets' has a wrong offset!");
//static_assert(offsetof(BGUFuncLibNonRuntime_GetCDO, ReturnValue) == 0x000008, "Member 'BGUFuncLibNonRuntime_GetCDO::ReturnValue' has a wrong offset!");

// Function b1-Managed.BUI_Startup.OnChangeNeverShowStartupUI
// 0x0001 (0x0001 - 0x0000)
struct BUI_Startup_OnChangeNeverShowStartupUI final
{
public:
	uint8                                         bChecked : 1;                                      // 0x0000(0x0001)(BitIndex: 0x00, PropSize: 0x0001 (Parm, NoDestructor, HasGetValueTypeHash))
};
//static_assert(alignof(BUI_Startup_OnChangeNeverShowStartupUI) == 0x000001, "Wrong alignment on BUI_Startup_OnChangeNeverShowStartupUI");
//static_assert(sizeof(BUI_Startup_OnChangeNeverShowStartupUI) == 0x000001, "Wrong size on BUI_Startup_OnChangeNeverShowStartupUI");

// Function b1-Managed.BUI_Startup.OnChangeDoEnableEnemyBar
// 0x0001 (0x0001 - 0x0000)
struct BUI_Startup_OnChangeDoEnableEnemyBar final
{
public:
	uint8                                         bChecked : 1;                                      // 0x0000(0x0001)(BitIndex: 0x00, PropSize: 0x0001 (Parm, NoDestructor, HasGetValueTypeHash))
};
//static_assert(alignof(BUI_Startup_OnChangeDoEnableEnemyBar) == 0x000001, "Wrong alignment on BUI_Startup_OnChangeDoEnableEnemyBar");
//static_assert(sizeof(BUI_Startup_OnChangeDoEnableEnemyBar) == 0x000001, "Wrong size on BUI_Startup_OnChangeDoEnableEnemyBar");

// Function b1-Managed.BUI_Startup.OnLevelSelectionChanged
// 0x0018 (0x0018 - 0x0000)
struct BUI_Startup_OnLevelSelectionChanged final
{
public:
	class FString                                 SelectedItem;                                      // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash)
	ESelectInfo                                   SelectionType;                                     // 0x0010(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
//static_assert(alignof(BUI_Startup_OnLevelSelectionChanged) == 0x000008, "Wrong alignment on BUI_Startup_OnLevelSelectionChanged");
//static_assert(sizeof(BUI_Startup_OnLevelSelectionChanged) == 0x000018, "Wrong size on BUI_Startup_OnLevelSelectionChanged");
//static_assert(offsetof(BUI_Startup_OnLevelSelectionChanged, SelectedItem) == 0x000000, "Member 'BUI_Startup_OnLevelSelectionChanged::SelectedItem' has a wrong offset!");
//static_assert(offsetof(BUI_Startup_OnLevelSelectionChanged, SelectionType) == 0x000010, "Member 'BUI_Startup_OnLevelSelectionChanged::SelectionType' has a wrong offset!");

// Function b1-Managed.BUI_Startup.OnChangeApplyByDefault
// 0x0001 (0x0001 - 0x0000)
struct BUI_Startup_OnChangeApplyByDefault final
{
public:
	uint8                                         bChecked : 1;                                      // 0x0000(0x0001)(BitIndex: 0x00, PropSize: 0x0001 (Parm, NoDestructor, HasGetValueTypeHash))
};
//static_assert(alignof(BUI_Startup_OnChangeApplyByDefault) == 0x000001, "Wrong alignment on BUI_Startup_OnChangeApplyByDefault");
//static_assert(sizeof(BUI_Startup_OnChangeApplyByDefault) == 0x000001, "Wrong size on BUI_Startup_OnChangeApplyByDefault");

// Function b1-Managed.BUI_Startup.OnChangeDoLockEnemyHP
// 0x0001 (0x0001 - 0x0000)
struct BUI_Startup_OnChangeDoLockEnemyHP final
{
public:
	uint8                                         bChecked : 1;                                      // 0x0000(0x0001)(BitIndex: 0x00, PropSize: 0x0001 (Parm, NoDestructor, HasGetValueTypeHash))
};
//static_assert(alignof(BUI_Startup_OnChangeDoLockEnemyHP) == 0x000001, "Wrong alignment on BUI_Startup_OnChangeDoLockEnemyHP");
//static_assert(sizeof(BUI_Startup_OnChangeDoLockEnemyHP) == 0x000001, "Wrong size on BUI_Startup_OnChangeDoLockEnemyHP");

// Function b1-Managed.BUI_Startup.OnChangeDoLockStamina
// 0x0001 (0x0001 - 0x0000)
struct BUI_Startup_OnChangeDoLockStamina final
{
public:
	uint8                                         bChecked : 1;                                      // 0x0000(0x0001)(BitIndex: 0x00, PropSize: 0x0001 (Parm, NoDestructor, HasGetValueTypeHash))
};
//static_assert(alignof(BUI_Startup_OnChangeDoLockStamina) == 0x000001, "Wrong alignment on BUI_Startup_OnChangeDoLockStamina");
//static_assert(sizeof(BUI_Startup_OnChangeDoLockStamina) == 0x000001, "Wrong size on BUI_Startup_OnChangeDoLockStamina");

// Function b1-Managed.BUI_Startup.OnChangeDoInvincible
// 0x0001 (0x0001 - 0x0000)
struct BUI_Startup_OnChangeDoInvincible final
{
public:
	uint8                                         bChecked : 1;                                      // 0x0000(0x0001)(BitIndex: 0x00, PropSize: 0x0001 (Parm, NoDestructor, HasGetValueTypeHash))
};
//static_assert(alignof(BUI_Startup_OnChangeDoInvincible) == 0x000001, "Wrong alignment on BUI_Startup_OnChangeDoInvincible");
//static_assert(sizeof(BUI_Startup_OnChangeDoInvincible) == 0x000001, "Wrong size on BUI_Startup_OnChangeDoInvincible");

// Function b1-Managed.BUI_Startup.OnChangeDoLock60FPS
// 0x0001 (0x0001 - 0x0000)
struct BUI_Startup_OnChangeDoLock60FPS final
{
public:
	uint8                                         bChecked : 1;                                      // 0x0000(0x0001)(BitIndex: 0x00, PropSize: 0x0001 (Parm, NoDestructor, HasGetValueTypeHash))
};
//static_assert(alignof(BUI_Startup_OnChangeDoLock60FPS) == 0x000001, "Wrong alignment on BUI_Startup_OnChangeDoLock60FPS");
//static_assert(sizeof(BUI_Startup_OnChangeDoLock60FPS) == 0x000001, "Wrong size on BUI_Startup_OnChangeDoLock60FPS");

// Function b1-Managed.BUI_Startup.OnCMDTextCommitted
// 0x0020 (0x0020 - 0x0000)
struct BUI_Startup_OnCMDTextCommitted final
{
public:
	class FText                                   Text;                                              // 0x0000(0x0018)(Parm)
	ETextCommit                                   CommitMethod;                                      // 0x0018(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
//static_assert(alignof(BUI_Startup_OnCMDTextCommitted) == 0x000008, "Wrong alignment on BUI_Startup_OnCMDTextCommitted");
//static_assert(sizeof(BUI_Startup_OnCMDTextCommitted) == 0x000020, "Wrong size on BUI_Startup_OnCMDTextCommitted");
//static_assert(offsetof(BUI_Startup_OnCMDTextCommitted, Text) == 0x000000, "Member 'BUI_Startup_OnCMDTextCommitted::Text' has a wrong offset!");
//static_assert(offsetof(BUI_Startup_OnCMDTextCommitted, CommitMethod) == 0x000018, "Member 'BUI_Startup_OnCMDTextCommitted::CommitMethod' has a wrong offset!");

// Function b1-Managed.BUI_Startup.OnCancelAllEnemyCD
// 0x0001 (0x0001 - 0x0000)
struct BUI_Startup_OnCancelAllEnemyCD final
{
public:
	uint8                                         bChecked : 1;                                      // 0x0000(0x0001)(BitIndex: 0x00, PropSize: 0x0001 (Parm, NoDestructor, HasGetValueTypeHash))
};
//static_assert(alignof(BUI_Startup_OnCancelAllEnemyCD) == 0x000001, "Wrong alignment on BUI_Startup_OnCancelAllEnemyCD");
//static_assert(sizeof(BUI_Startup_OnCancelAllEnemyCD) == 0x000001, "Wrong size on BUI_Startup_OnCancelAllEnemyCD");

// Function b1-Managed.BUI_Startup.OnChangeDoToggleUI
// 0x0001 (0x0001 - 0x0000)
struct BUI_Startup_OnChangeDoToggleUI final
{
public:
	uint8                                         bChecked : 1;                                      // 0x0000(0x0001)(BitIndex: 0x00, PropSize: 0x0001 (Parm, NoDestructor, HasGetValueTypeHash))
};
//static_assert(alignof(BUI_Startup_OnChangeDoToggleUI) == 0x000001, "Wrong alignment on BUI_Startup_OnChangeDoToggleUI");
//static_assert(sizeof(BUI_Startup_OnChangeDoToggleUI) == 0x000001, "Wrong size on BUI_Startup_OnChangeDoToggleUI");

// Function b1-Managed.BUI_Startup.OnToggleAllEnemyAI
// 0x0001 (0x0001 - 0x0000)
struct BUI_Startup_OnToggleAllEnemyAI final
{
public:
	uint8                                         bChecked : 1;                                      // 0x0000(0x0001)(BitIndex: 0x00, PropSize: 0x0001 (Parm, NoDestructor, HasGetValueTypeHash))
};
//static_assert(alignof(BUI_Startup_OnToggleAllEnemyAI) == 0x000001, "Wrong alignment on BUI_Startup_OnToggleAllEnemyAI");
//static_assert(sizeof(BUI_Startup_OnToggleAllEnemyAI) == 0x000001, "Wrong size on BUI_Startup_OnToggleAllEnemyAI");

// Function b1-Managed.BUI_Startup.OnChangeDoLockHP2
// 0x0001 (0x0001 - 0x0000)
struct BUI_Startup_OnChangeDoLockHP2 final
{
public:
	uint8                                         bChecked : 1;                                      // 0x0000(0x0001)(BitIndex: 0x00, PropSize: 0x0001 (Parm, NoDestructor, HasGetValueTypeHash))
};
//static_assert(alignof(BUI_Startup_OnChangeDoLockHP2) == 0x000001, "Wrong alignment on BUI_Startup_OnChangeDoLockHP2");
//static_assert(sizeof(BUI_Startup_OnChangeDoLockHP2) == 0x000001, "Wrong size on BUI_Startup_OnChangeDoLockHP2");

// Function b1-Managed.BUI_Startup.OnChangeDoVSync
// 0x0001 (0x0001 - 0x0000)
struct BUI_Startup_OnChangeDoVSync final
{
public:
	uint8                                         bChecked : 1;                                      // 0x0000(0x0001)(BitIndex: 0x00, PropSize: 0x0001 (Parm, NoDestructor, HasGetValueTypeHash))
};
//static_assert(alignof(BUI_Startup_OnChangeDoVSync) == 0x000001, "Wrong alignment on BUI_Startup_OnChangeDoVSync");
//static_assert(sizeof(BUI_Startup_OnChangeDoVSync) == 0x000001, "Wrong size on BUI_Startup_OnChangeDoVSync");

// Function b1-Managed.BUI_Startup.OnSetInvisible
// 0x0001 (0x0001 - 0x0000)
struct BUI_Startup_OnSetInvisible final
{
public:
	uint8                                         bChecked : 1;                                      // 0x0000(0x0001)(BitIndex: 0x00, PropSize: 0x0001 (Parm, NoDestructor, HasGetValueTypeHash))
};
//static_assert(alignof(BUI_Startup_OnSetInvisible) == 0x000001, "Wrong alignment on BUI_Startup_OnSetInvisible");
//static_assert(sizeof(BUI_Startup_OnSetInvisible) == 0x000001, "Wrong size on BUI_Startup_OnSetInvisible");

// Function b1-Managed.BGUFuncLibSelectTargetsCS.DeadPhyReset
// 0x0008 (0x0008 - 0x0000)
struct BGUFuncLibSelectTargetsCS_DeadPhyReset final
{
public:
	class AActor*                                 Unit;                                              // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
//static_assert(alignof(BGUFuncLibSelectTargetsCS_DeadPhyReset) == 0x000008, "Wrong alignment on BGUFuncLibSelectTargetsCS_DeadPhyReset");
//static_assert(sizeof(BGUFuncLibSelectTargetsCS_DeadPhyReset) == 0x000008, "Wrong size on BGUFuncLibSelectTargetsCS_DeadPhyReset");
//static_assert(offsetof(BGUFuncLibSelectTargetsCS_DeadPhyReset, Unit) == 0x000000, "Member 'BGUFuncLibSelectTargetsCS_DeadPhyReset::Unit' has a wrong offset!");

// Function b1-Managed.BGUFuncLibSelectTargetsCS.DeadPhyTest
// 0x0008 (0x0008 - 0x0000)
struct BGUFuncLibSelectTargetsCS_DeadPhyTest final
{
public:
	class AActor*                                 Unit;                                              // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
//static_assert(alignof(BGUFuncLibSelectTargetsCS_DeadPhyTest) == 0x000008, "Wrong alignment on BGUFuncLibSelectTargetsCS_DeadPhyTest");
//static_assert(sizeof(BGUFuncLibSelectTargetsCS_DeadPhyTest) == 0x000008, "Wrong size on BGUFuncLibSelectTargetsCS_DeadPhyTest");
//static_assert(offsetof(BGUFuncLibSelectTargetsCS_DeadPhyTest, Unit) == 0x000000, "Member 'BGUFuncLibSelectTargetsCS_DeadPhyTest::Unit' has a wrong offset!");

// Function b1-Managed.BGUFuncLibMeshCS.GetChildBones
// 0x0028 (0x0028 - 0x0000)
struct BGUFuncLibMeshCS_GetChildBones final
{
public:
	class USkeletalMeshComponent*                 SkeletalMeshComp;                                  // 0x0000(0x0008)(ExportObject, Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class FName                                   BaseBoneName;                                      // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	TArray<class FName>                           ChildBoneNames;                                    // 0x0010(0x0010)(Parm, OutParm, ReferenceParm)
	int32                                         ReturnValue;                                       // 0x0020(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
//static_assert(alignof(BGUFuncLibMeshCS_GetChildBones) == 0x000008, "Wrong alignment on BGUFuncLibMeshCS_GetChildBones");
//static_assert(sizeof(BGUFuncLibMeshCS_GetChildBones) == 0x000028, "Wrong size on BGUFuncLibMeshCS_GetChildBones");
//static_assert(offsetof(BGUFuncLibMeshCS_GetChildBones, SkeletalMeshComp) == 0x000000, "Member 'BGUFuncLibMeshCS_GetChildBones::SkeletalMeshComp' has a wrong offset!");
//static_assert(offsetof(BGUFuncLibMeshCS_GetChildBones, BaseBoneName) == 0x000008, "Member 'BGUFuncLibMeshCS_GetChildBones::BaseBoneName' has a wrong offset!");
//static_assert(offsetof(BGUFuncLibMeshCS_GetChildBones, ChildBoneNames) == 0x000010, "Member 'BGUFuncLibMeshCS_GetChildBones::ChildBoneNames' has a wrong offset!");
//static_assert(offsetof(BGUFuncLibMeshCS_GetChildBones, ReturnValue) == 0x000020, "Member 'BGUFuncLibMeshCS_GetChildBones::ReturnValue' has a wrong offset!");

// Function b1-Managed.BED_StateNode_Fork.CanUserAddOutputInCS
// 0x0001 (0x0001 - 0x0000)
struct BED_StateNode_Fork_CanUserAddOutputInCS final
{
public:
	uint8                                         ReturnValue : 1;                                   // 0x0000(0x0001)(BitIndex: 0x00, PropSize: 0x0001 (Parm, OutParm, ReturnParm, NoDestructor, HasGetValueTypeHash))
};
//static_assert(alignof(BED_StateNode_Fork_CanUserAddOutputInCS) == 0x000001, "Wrong alignment on BED_StateNode_Fork_CanUserAddOutputInCS");
//static_assert(sizeof(BED_StateNode_Fork_CanUserAddOutputInCS) == 0x000001, "Wrong size on BED_StateNode_Fork_CanUserAddOutputInCS");

// Function b1-Managed.BGUFuncLibResCS.GetLevelStreamingStateVolumeControlledLevelInfo
// 0x0018 (0x0018 - 0x0000)
struct BGUFuncLibResCS_GetLevelStreamingStateVolumeControlledLevelInfo final
{
public:
	class ABGWLevelStreamingStateVolume*          Volume;                                            // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class FString                                 ReturnValue;                                       // 0x0008(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash)
};
//static_assert(alignof(BGUFuncLibResCS_GetLevelStreamingStateVolumeControlledLevelInfo) == 0x000008, "Wrong alignment on BGUFuncLibResCS_GetLevelStreamingStateVolumeControlledLevelInfo");
//static_assert(sizeof(BGUFuncLibResCS_GetLevelStreamingStateVolumeControlledLevelInfo) == 0x000018, "Wrong size on BGUFuncLibResCS_GetLevelStreamingStateVolumeControlledLevelInfo");
//static_assert(offsetof(BGUFuncLibResCS_GetLevelStreamingStateVolumeControlledLevelInfo, Volume) == 0x000000, "Member 'BGUFuncLibResCS_GetLevelStreamingStateVolumeControlledLevelInfo::Volume' has a wrong offset!");
//static_assert(offsetof(BGUFuncLibResCS_GetLevelStreamingStateVolumeControlledLevelInfo, ReturnValue) == 0x000008, "Member 'BGUFuncLibResCS_GetLevelStreamingStateVolumeControlledLevelInfo::ReturnValue' has a wrong offset!");

// Function b1-Managed.BGUFuncLibResCS.GetLevelAllLevelStreamingDataAssetConfigByCPG
// 0x0020 (0x0020 - 0x0000)
struct BGUFuncLibResCS_GetLevelAllLevelStreamingDataAssetConfigByCPG final
{
public:
	class FString                                 LevelName;                                         // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash)
	class FString                                 ReturnValue;                                       // 0x0010(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash)
};
//static_assert(alignof(BGUFuncLibResCS_GetLevelAllLevelStreamingDataAssetConfigByCPG) == 0x000008, "Wrong alignment on BGUFuncLibResCS_GetLevelAllLevelStreamingDataAssetConfigByCPG");
//static_assert(sizeof(BGUFuncLibResCS_GetLevelAllLevelStreamingDataAssetConfigByCPG) == 0x000020, "Wrong size on BGUFuncLibResCS_GetLevelAllLevelStreamingDataAssetConfigByCPG");
//static_assert(offsetof(BGUFuncLibResCS_GetLevelAllLevelStreamingDataAssetConfigByCPG, LevelName) == 0x000000, "Member 'BGUFuncLibResCS_GetLevelAllLevelStreamingDataAssetConfigByCPG::LevelName' has a wrong offset!");
//static_assert(offsetof(BGUFuncLibResCS_GetLevelAllLevelStreamingDataAssetConfigByCPG, ReturnValue) == 0x000010, "Member 'BGUFuncLibResCS_GetLevelAllLevelStreamingDataAssetConfigByCPG::ReturnValue' has a wrong offset!");

// Function b1-Managed.BGUFuncLibResCS.BGUAddLifeSavingHairWindowToDeathMontage
// 0x0008 (0x0008 - 0x0000)
struct BGUFuncLibResCS_BGUAddLifeSavingHairWindowToDeathMontage final
{
public:
	class UAnimMontage*                           InMontage;                                         // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
//static_assert(alignof(BGUFuncLibResCS_BGUAddLifeSavingHairWindowToDeathMontage) == 0x000008, "Wrong alignment on BGUFuncLibResCS_BGUAddLifeSavingHairWindowToDeathMontage");
//static_assert(sizeof(BGUFuncLibResCS_BGUAddLifeSavingHairWindowToDeathMontage) == 0x000008, "Wrong size on BGUFuncLibResCS_BGUAddLifeSavingHairWindowToDeathMontage");
//static_assert(offsetof(BGUFuncLibResCS_BGUAddLifeSavingHairWindowToDeathMontage, InMontage) == 0x000000, "Member 'BGUFuncLibResCS_BGUAddLifeSavingHairWindowToDeathMontage::InMontage' has a wrong offset!");

// Function b1-Managed.BGUFuncLibResCS.BGUAddBlendPhysicToDeathMontage
// 0x0018 (0x0018 - 0x0000)
struct BGUFuncLibResCS_BGUAddBlendPhysicToDeathMontage final
{
public:
	class UAnimMontage*                           InMontage;                                         // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         Thresholds;                                        // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class FName                                   BoneName;                                          // 0x000C(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
//static_assert(alignof(BGUFuncLibResCS_BGUAddBlendPhysicToDeathMontage) == 0x000008, "Wrong alignment on BGUFuncLibResCS_BGUAddBlendPhysicToDeathMontage");
//static_assert(sizeof(BGUFuncLibResCS_BGUAddBlendPhysicToDeathMontage) == 0x000018, "Wrong size on BGUFuncLibResCS_BGUAddBlendPhysicToDeathMontage");
//static_assert(offsetof(BGUFuncLibResCS_BGUAddBlendPhysicToDeathMontage, InMontage) == 0x000000, "Member 'BGUFuncLibResCS_BGUAddBlendPhysicToDeathMontage::InMontage' has a wrong offset!");
//static_assert(offsetof(BGUFuncLibResCS_BGUAddBlendPhysicToDeathMontage, Thresholds) == 0x000008, "Member 'BGUFuncLibResCS_BGUAddBlendPhysicToDeathMontage::Thresholds' has a wrong offset!");
//static_assert(offsetof(BGUFuncLibResCS_BGUAddBlendPhysicToDeathMontage, BoneName) == 0x00000C, "Member 'BGUFuncLibResCS_BGUAddBlendPhysicToDeathMontage::BoneName' has a wrong offset!");

// Function b1-Managed.BGUFuncLibResCS.BGUGetNewSweepCheckGroupIdInAM
// 0x0010 (0x0010 - 0x0000)
struct BGUFuncLibResCS_BGUGetNewSweepCheckGroupIdInAM final
{
public:
	class UAnimMontage*                           InMontage;                                         // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         ReturnValue;                                       // 0x0008(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
//static_assert(alignof(BGUFuncLibResCS_BGUGetNewSweepCheckGroupIdInAM) == 0x000008, "Wrong alignment on BGUFuncLibResCS_BGUGetNewSweepCheckGroupIdInAM");
//static_assert(sizeof(BGUFuncLibResCS_BGUGetNewSweepCheckGroupIdInAM) == 0x000010, "Wrong size on BGUFuncLibResCS_BGUGetNewSweepCheckGroupIdInAM");
//static_assert(offsetof(BGUFuncLibResCS_BGUGetNewSweepCheckGroupIdInAM, InMontage) == 0x000000, "Member 'BGUFuncLibResCS_BGUGetNewSweepCheckGroupIdInAM::InMontage' has a wrong offset!");
//static_assert(offsetof(BGUFuncLibResCS_BGUGetNewSweepCheckGroupIdInAM, ReturnValue) == 0x000008, "Member 'BGUFuncLibResCS_BGUGetNewSweepCheckGroupIdInAM::ReturnValue' has a wrong offset!");

// Function b1-Managed.BGUFuncLibResCS.BGUSetUnitNameForUBAConfig
// 0x0028 (0x0028 - 0x0000)
struct BGUFuncLibResCS_BGUSetUnitNameForUBAConfig final
{
public:
	class UBGWDataAsset_UnitBeAttackedConfig*     UBAConfig;                                         // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class FString                                 NormalStiffAMPath;                                 // 0x0008(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash)
	class FString                                 UnitResName;                                       // 0x0018(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash)
};
//static_assert(alignof(BGUFuncLibResCS_BGUSetUnitNameForUBAConfig) == 0x000008, "Wrong alignment on BGUFuncLibResCS_BGUSetUnitNameForUBAConfig");
//static_assert(sizeof(BGUFuncLibResCS_BGUSetUnitNameForUBAConfig) == 0x000028, "Wrong size on BGUFuncLibResCS_BGUSetUnitNameForUBAConfig");
//static_assert(offsetof(BGUFuncLibResCS_BGUSetUnitNameForUBAConfig, UBAConfig) == 0x000000, "Member 'BGUFuncLibResCS_BGUSetUnitNameForUBAConfig::UBAConfig' has a wrong offset!");
//static_assert(offsetof(BGUFuncLibResCS_BGUSetUnitNameForUBAConfig, NormalStiffAMPath) == 0x000008, "Member 'BGUFuncLibResCS_BGUSetUnitNameForUBAConfig::NormalStiffAMPath' has a wrong offset!");
//static_assert(offsetof(BGUFuncLibResCS_BGUSetUnitNameForUBAConfig, UnitResName) == 0x000018, "Member 'BGUFuncLibResCS_BGUSetUnitNameForUBAConfig::UnitResName' has a wrong offset!");

// Function b1-Managed.BGUFuncLibResCS.BGUSetUnitNameForUDDConfig
// 0x0028 (0x0028 - 0x0000)
struct BGUFuncLibResCS_BGUSetUnitNameForUDDConfig final
{
public:
	class UBGWDataAsset_UnitDeathDispConfig*      UDDConfig;                                         // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class FString                                 NormalDeadAMPath;                                  // 0x0008(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash)
	class FString                                 UnitResName;                                       // 0x0018(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash)
};
//static_assert(alignof(BGUFuncLibResCS_BGUSetUnitNameForUDDConfig) == 0x000008, "Wrong alignment on BGUFuncLibResCS_BGUSetUnitNameForUDDConfig");
//static_assert(sizeof(BGUFuncLibResCS_BGUSetUnitNameForUDDConfig) == 0x000028, "Wrong size on BGUFuncLibResCS_BGUSetUnitNameForUDDConfig");
//static_assert(offsetof(BGUFuncLibResCS_BGUSetUnitNameForUDDConfig, UDDConfig) == 0x000000, "Member 'BGUFuncLibResCS_BGUSetUnitNameForUDDConfig::UDDConfig' has a wrong offset!");
//static_assert(offsetof(BGUFuncLibResCS_BGUSetUnitNameForUDDConfig, NormalDeadAMPath) == 0x000008, "Member 'BGUFuncLibResCS_BGUSetUnitNameForUDDConfig::NormalDeadAMPath' has a wrong offset!");
//static_assert(offsetof(BGUFuncLibResCS_BGUSetUnitNameForUDDConfig, UnitResName) == 0x000018, "Member 'BGUFuncLibResCS_BGUSetUnitNameForUDDConfig::UnitResName' has a wrong offset!");

// Function b1-Managed.BGUFuncLibResCS.BGUAddNotifyStateToMontage
// 0x0028 (0x0028 - 0x0000)
struct BGUFuncLibResCS_BGUAddNotifyStateToMontage final
{
public:
	class UAnimMontage*                           InMontage;                                         // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class FName                                   TrackName;                                         // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         StartPos;                                          // 0x0010(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         Duration;                                          // 0x0014(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UClass*                                 NotifyClass;                                       // 0x0018(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         bRemoveOldTrack : 1;                               // 0x0020(0x0001)(BitIndex: 0x00, PropSize: 0x0001 (Parm, NoDestructor, HasGetValueTypeHash))
};
//static_assert(alignof(BGUFuncLibResCS_BGUAddNotifyStateToMontage) == 0x000008, "Wrong alignment on BGUFuncLibResCS_BGUAddNotifyStateToMontage");
//static_assert(sizeof(BGUFuncLibResCS_BGUAddNotifyStateToMontage) == 0x000028, "Wrong size on BGUFuncLibResCS_BGUAddNotifyStateToMontage");
//static_assert(offsetof(BGUFuncLibResCS_BGUAddNotifyStateToMontage, InMontage) == 0x000000, "Member 'BGUFuncLibResCS_BGUAddNotifyStateToMontage::InMontage' has a wrong offset!");
//static_assert(offsetof(BGUFuncLibResCS_BGUAddNotifyStateToMontage, TrackName) == 0x000008, "Member 'BGUFuncLibResCS_BGUAddNotifyStateToMontage::TrackName' has a wrong offset!");
//static_assert(offsetof(BGUFuncLibResCS_BGUAddNotifyStateToMontage, StartPos) == 0x000010, "Member 'BGUFuncLibResCS_BGUAddNotifyStateToMontage::StartPos' has a wrong offset!");
//static_assert(offsetof(BGUFuncLibResCS_BGUAddNotifyStateToMontage, Duration) == 0x000014, "Member 'BGUFuncLibResCS_BGUAddNotifyStateToMontage::Duration' has a wrong offset!");
//static_assert(offsetof(BGUFuncLibResCS_BGUAddNotifyStateToMontage, NotifyClass) == 0x000018, "Member 'BGUFuncLibResCS_BGUAddNotifyStateToMontage::NotifyClass' has a wrong offset!");

// Function b1-Managed.BGUFuncLibResCS.CheckoutAndSavePackage
// 0x0028 (0x0028 - 0x0000)
struct BGUFuncLibResCS_CheckoutAndSavePackage final
{
public:
	TArray<class UObject*>                        Objects;                                           // 0x0000(0x0010)(Parm)
	TArray<class UPackage*>                       FailedPackages;                                    // 0x0010(0x0010)(Parm, OutParm)
	uint8                                         bCheckDirty : 1;                                   // 0x0020(0x0001)(BitIndex: 0x00, PropSize: 0x0001 (Parm, NoDestructor, HasGetValueTypeHash))
	uint8                                         BitPad_20_1 : 7;                                   // 0x0020(0x0001)(Fixing Bit-Field Size For New Byte [ Dumper-7 ])
	uint8                                         bPromptToSave : 1;                                 // 0x0021(0x0001)(BitIndex: 0x00, PropSize: 0x0001 (Parm, NoDestructor, HasGetValueTypeHash))
	uint8                                         BitPad_21_1 : 7;                                   // 0x0021(0x0001)(Fixing Bit-Field Size For New Byte [ Dumper-7 ])
	uint8                                         bAlreadyCheckedOut : 1;                            // 0x0022(0x0001)(BitIndex: 0x00, PropSize: 0x0001 (Parm, NoDestructor, HasGetValueTypeHash))
	uint8                                         BitPad_22_1 : 7;                                   // 0x0022(0x0001)(Fixing Bit-Field Size For New Byte [ Dumper-7 ])
	uint8                                         bCanBeDeclined : 1;                                // 0x0023(0x0001)(BitIndex: 0x00, PropSize: 0x0001 (Parm, NoDestructor, HasGetValueTypeHash))
	uint8                                         BitPad_23_1 : 7;                                   // 0x0023(0x0001)(Fixing Bit-Field Size For New Byte [ Dumper-7 ])
	uint8                                         ReturnValue : 1;                                   // 0x0024(0x0001)(BitIndex: 0x00, PropSize: 0x0001 (Parm, OutParm, ReturnParm, NoDestructor, HasGetValueTypeHash))
};
//static_assert(alignof(BGUFuncLibResCS_CheckoutAndSavePackage) == 0x000008, "Wrong alignment on BGUFuncLibResCS_CheckoutAndSavePackage");
//static_assert(sizeof(BGUFuncLibResCS_CheckoutAndSavePackage) == 0x000028, "Wrong size on BGUFuncLibResCS_CheckoutAndSavePackage");
//static_assert(offsetof(BGUFuncLibResCS_CheckoutAndSavePackage, Objects) == 0x000000, "Member 'BGUFuncLibResCS_CheckoutAndSavePackage::Objects' has a wrong offset!");
//static_assert(offsetof(BGUFuncLibResCS_CheckoutAndSavePackage, FailedPackages) == 0x000010, "Member 'BGUFuncLibResCS_CheckoutAndSavePackage::FailedPackages' has a wrong offset!");

// Function b1-Managed.BGUFuncLibResCS.BGUCopyAndRenameDEADAM
// 0x0028 (0x0028 - 0x0000)
struct BGUFuncLibResCS_BGUCopyAndRenameDEADAM final
{
public:
	int32                                         BeginResID;                                        // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         EndResID;                                          // 0x0004(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	TArray<class FString>                         NeedDeleteDeadAMCatalogList;                       // 0x0008(0x0010)(Parm, OutParm)
	TArray<struct FMoveAMPath>                    Result;                                            // 0x0018(0x0010)(Parm, OutParm)
};
//static_assert(alignof(BGUFuncLibResCS_BGUCopyAndRenameDEADAM) == 0x000008, "Wrong alignment on BGUFuncLibResCS_BGUCopyAndRenameDEADAM");
//static_assert(sizeof(BGUFuncLibResCS_BGUCopyAndRenameDEADAM) == 0x000028, "Wrong size on BGUFuncLibResCS_BGUCopyAndRenameDEADAM");
//static_assert(offsetof(BGUFuncLibResCS_BGUCopyAndRenameDEADAM, BeginResID) == 0x000000, "Member 'BGUFuncLibResCS_BGUCopyAndRenameDEADAM::BeginResID' has a wrong offset!");
//static_assert(offsetof(BGUFuncLibResCS_BGUCopyAndRenameDEADAM, EndResID) == 0x000004, "Member 'BGUFuncLibResCS_BGUCopyAndRenameDEADAM::EndResID' has a wrong offset!");
//static_assert(offsetof(BGUFuncLibResCS_BGUCopyAndRenameDEADAM, NeedDeleteDeadAMCatalogList) == 0x000008, "Member 'BGUFuncLibResCS_BGUCopyAndRenameDEADAM::NeedDeleteDeadAMCatalogList' has a wrong offset!");
//static_assert(offsetof(BGUFuncLibResCS_BGUCopyAndRenameDEADAM, Result) == 0x000018, "Member 'BGUFuncLibResCS_BGUCopyAndRenameDEADAM::Result' has a wrong offset!");

// Function b1-Managed.BGUFuncLibResCS.BGUCopyAndRenameBHAM
// 0x0038 (0x0038 - 0x0000)
struct BGUFuncLibResCS_BGUCopyAndRenameBHAM final
{
public:
	class UObject*                                WorldContext;                                      // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         IsB1 : 1;                                          // 0x0008(0x0001)(BitIndex: 0x00, PropSize: 0x0001 (Parm, NoDestructor, HasGetValueTypeHash))
	uint8                                         Pad_9[0x3];                                        // 0x0009(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         BeginResID;                                        // 0x000C(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         EndResID;                                          // 0x0010(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_14[0x4];                                       // 0x0014(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<class FString>                         NeedDeleteBHCatalogList;                           // 0x0018(0x0010)(Parm, OutParm)
	TArray<struct FMoveAMPath>                    Result;                                            // 0x0028(0x0010)(Parm, OutParm)
};
//static_assert(alignof(BGUFuncLibResCS_BGUCopyAndRenameBHAM) == 0x000008, "Wrong alignment on BGUFuncLibResCS_BGUCopyAndRenameBHAM");
//static_assert(sizeof(BGUFuncLibResCS_BGUCopyAndRenameBHAM) == 0x000038, "Wrong size on BGUFuncLibResCS_BGUCopyAndRenameBHAM");
//static_assert(offsetof(BGUFuncLibResCS_BGUCopyAndRenameBHAM, WorldContext) == 0x000000, "Member 'BGUFuncLibResCS_BGUCopyAndRenameBHAM::WorldContext' has a wrong offset!");
//static_assert(offsetof(BGUFuncLibResCS_BGUCopyAndRenameBHAM, BeginResID) == 0x00000C, "Member 'BGUFuncLibResCS_BGUCopyAndRenameBHAM::BeginResID' has a wrong offset!");
//static_assert(offsetof(BGUFuncLibResCS_BGUCopyAndRenameBHAM, EndResID) == 0x000010, "Member 'BGUFuncLibResCS_BGUCopyAndRenameBHAM::EndResID' has a wrong offset!");
//static_assert(offsetof(BGUFuncLibResCS_BGUCopyAndRenameBHAM, NeedDeleteBHCatalogList) == 0x000018, "Member 'BGUFuncLibResCS_BGUCopyAndRenameBHAM::NeedDeleteBHCatalogList' has a wrong offset!");
//static_assert(offsetof(BGUFuncLibResCS_BGUCopyAndRenameBHAM, Result) == 0x000028, "Member 'BGUFuncLibResCS_BGUCopyAndRenameBHAM::Result' has a wrong offset!");

// Function b1-Managed.BGUFuncLibAICS.BGUAISetUnitsTargetAsPlayerByTamerActorTag
// 0x0010 (0x0010 - 0x0000)
struct BGUFuncLibAICS_BGUAISetUnitsTargetAsPlayerByTamerActorTag final
{
public:
	class UObject*                                WorldContextObject;                                // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class FName                                   MatchTag;                                          // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
//static_assert(alignof(BGUFuncLibAICS_BGUAISetUnitsTargetAsPlayerByTamerActorTag) == 0x000008, "Wrong alignment on BGUFuncLibAICS_BGUAISetUnitsTargetAsPlayerByTamerActorTag");
//static_assert(sizeof(BGUFuncLibAICS_BGUAISetUnitsTargetAsPlayerByTamerActorTag) == 0x000010, "Wrong size on BGUFuncLibAICS_BGUAISetUnitsTargetAsPlayerByTamerActorTag");
//static_assert(offsetof(BGUFuncLibAICS_BGUAISetUnitsTargetAsPlayerByTamerActorTag, WorldContextObject) == 0x000000, "Member 'BGUFuncLibAICS_BGUAISetUnitsTargetAsPlayerByTamerActorTag::WorldContextObject' has a wrong offset!");
//static_assert(offsetof(BGUFuncLibAICS_BGUAISetUnitsTargetAsPlayerByTamerActorTag, MatchTag) == 0x000008, "Member 'BGUFuncLibAICS_BGUAISetUnitsTargetAsPlayerByTamerActorTag::MatchTag' has a wrong offset!");

// Function b1-Managed.BGUFuncLibAICS.BGURequestAIWallAndCellMoveToLocation
// 0x0038 (0x0038 - 0x0000)
struct BGUFuncLibAICS_BGURequestAIWallAndCellMoveToLocation final
{
public:
	class AActor*                                 Unit;                                              // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                Position;                                          // 0x0008(0x0018)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	EAIMoveSpeedType                              SpeedRateType;                                     // 0x0020(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_21[0x3];                                       // 0x0021(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         TurnSpeed;                                         // 0x0024(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         AcceptableRadius;                                  // 0x0028(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         IncludeSelfRadius : 1;                             // 0x002C(0x0001)(BitIndex: 0x00, PropSize: 0x0001 (Parm, NoDestructor, HasGetValueTypeHash))
	uint8                                         Pad_2D[0x3];                                       // 0x002D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         ReturnValue;                                       // 0x0030(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
//static_assert(alignof(BGUFuncLibAICS_BGURequestAIWallAndCellMoveToLocation) == 0x000008, "Wrong alignment on BGUFuncLibAICS_BGURequestAIWallAndCellMoveToLocation");
//static_assert(sizeof(BGUFuncLibAICS_BGURequestAIWallAndCellMoveToLocation) == 0x000038, "Wrong size on BGUFuncLibAICS_BGURequestAIWallAndCellMoveToLocation");
//static_assert(offsetof(BGUFuncLibAICS_BGURequestAIWallAndCellMoveToLocation, Unit) == 0x000000, "Member 'BGUFuncLibAICS_BGURequestAIWallAndCellMoveToLocation::Unit' has a wrong offset!");
//static_assert(offsetof(BGUFuncLibAICS_BGURequestAIWallAndCellMoveToLocation, Position) == 0x000008, "Member 'BGUFuncLibAICS_BGURequestAIWallAndCellMoveToLocation::Position' has a wrong offset!");
//static_assert(offsetof(BGUFuncLibAICS_BGURequestAIWallAndCellMoveToLocation, SpeedRateType) == 0x000020, "Member 'BGUFuncLibAICS_BGURequestAIWallAndCellMoveToLocation::SpeedRateType' has a wrong offset!");
//static_assert(offsetof(BGUFuncLibAICS_BGURequestAIWallAndCellMoveToLocation, TurnSpeed) == 0x000024, "Member 'BGUFuncLibAICS_BGURequestAIWallAndCellMoveToLocation::TurnSpeed' has a wrong offset!");
//static_assert(offsetof(BGUFuncLibAICS_BGURequestAIWallAndCellMoveToLocation, AcceptableRadius) == 0x000028, "Member 'BGUFuncLibAICS_BGURequestAIWallAndCellMoveToLocation::AcceptableRadius' has a wrong offset!");
//static_assert(offsetof(BGUFuncLibAICS_BGURequestAIWallAndCellMoveToLocation, ReturnValue) == 0x000030, "Member 'BGUFuncLibAICS_BGURequestAIWallAndCellMoveToLocation::ReturnValue' has a wrong offset!");

// Function b1-Managed.BGUFuncLibAICS.BGURequestAIMoveToLocationWithMM
// 0x0030 (0x0030 - 0x0000)
struct BGUFuncLibAICS_BGURequestAIMoveToLocationWithMM final
{
public:
	class AActor*                                 Unit;                                              // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                Position;                                          // 0x0008(0x0018)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	EAIMoveSpeedType                              SpeedRateType;                                     // 0x0020(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_21[0x3];                                       // 0x0021(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         AcceptableRadius;                                  // 0x0024(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	EBGUMoveAIType                                MoveAIType;                                        // 0x0028(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         IncludeSelfRadius : 1;                             // 0x0029(0x0001)(BitIndex: 0x00, PropSize: 0x0001 (Parm, NoDestructor, HasGetValueTypeHash))
	uint8                                         BitPad_29_1 : 7;                                   // 0x0029(0x0001)(Fixing Bit-Field Size For New Byte [ Dumper-7 ])
	uint8                                         IncludeTargetRadius : 1;                           // 0x002A(0x0001)(BitIndex: 0x00, PropSize: 0x0001 (Parm, NoDestructor, HasGetValueTypeHash))
	EState_MM                                     MotionMatchingState;                               // 0x002B(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         ReturnValue;                                       // 0x002C(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
//static_assert(alignof(BGUFuncLibAICS_BGURequestAIMoveToLocationWithMM) == 0x000008, "Wrong alignment on BGUFuncLibAICS_BGURequestAIMoveToLocationWithMM");
//static_assert(sizeof(BGUFuncLibAICS_BGURequestAIMoveToLocationWithMM) == 0x000030, "Wrong size on BGUFuncLibAICS_BGURequestAIMoveToLocationWithMM");
//static_assert(offsetof(BGUFuncLibAICS_BGURequestAIMoveToLocationWithMM, Unit) == 0x000000, "Member 'BGUFuncLibAICS_BGURequestAIMoveToLocationWithMM::Unit' has a wrong offset!");
//static_assert(offsetof(BGUFuncLibAICS_BGURequestAIMoveToLocationWithMM, Position) == 0x000008, "Member 'BGUFuncLibAICS_BGURequestAIMoveToLocationWithMM::Position' has a wrong offset!");
//static_assert(offsetof(BGUFuncLibAICS_BGURequestAIMoveToLocationWithMM, SpeedRateType) == 0x000020, "Member 'BGUFuncLibAICS_BGURequestAIMoveToLocationWithMM::SpeedRateType' has a wrong offset!");
//static_assert(offsetof(BGUFuncLibAICS_BGURequestAIMoveToLocationWithMM, AcceptableRadius) == 0x000024, "Member 'BGUFuncLibAICS_BGURequestAIMoveToLocationWithMM::AcceptableRadius' has a wrong offset!");
//static_assert(offsetof(BGUFuncLibAICS_BGURequestAIMoveToLocationWithMM, MoveAIType) == 0x000028, "Member 'BGUFuncLibAICS_BGURequestAIMoveToLocationWithMM::MoveAIType' has a wrong offset!");
//static_assert(offsetof(BGUFuncLibAICS_BGURequestAIMoveToLocationWithMM, MotionMatchingState) == 0x00002B, "Member 'BGUFuncLibAICS_BGURequestAIMoveToLocationWithMM::MotionMatchingState' has a wrong offset!");
//static_assert(offsetof(BGUFuncLibAICS_BGURequestAIMoveToLocationWithMM, ReturnValue) == 0x00002C, "Member 'BGUFuncLibAICS_BGURequestAIMoveToLocationWithMM::ReturnValue' has a wrong offset!");

// Function b1-Managed.BGUFuncLibAICS.BGURequestAIUseSkillWithSkillID
// 0x0018 (0x0018 - 0x0000)
struct BGUFuncLibAICS_BGURequestAIUseSkillWithSkillID final
{
public:
	class AActor*                                 Unit;                                              // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         SkillID;                                           // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	ECastSkillSourceType                          SourceType;                                        // 0x000C(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_D[0x3];                                        // 0x000D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         ReturnValue;                                       // 0x0010(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
//static_assert(alignof(BGUFuncLibAICS_BGURequestAIUseSkillWithSkillID) == 0x000008, "Wrong alignment on BGUFuncLibAICS_BGURequestAIUseSkillWithSkillID");
//static_assert(sizeof(BGUFuncLibAICS_BGURequestAIUseSkillWithSkillID) == 0x000018, "Wrong size on BGUFuncLibAICS_BGURequestAIUseSkillWithSkillID");
//static_assert(offsetof(BGUFuncLibAICS_BGURequestAIUseSkillWithSkillID, Unit) == 0x000000, "Member 'BGUFuncLibAICS_BGURequestAIUseSkillWithSkillID::Unit' has a wrong offset!");
//static_assert(offsetof(BGUFuncLibAICS_BGURequestAIUseSkillWithSkillID, SkillID) == 0x000008, "Member 'BGUFuncLibAICS_BGURequestAIUseSkillWithSkillID::SkillID' has a wrong offset!");
//static_assert(offsetof(BGUFuncLibAICS_BGURequestAIUseSkillWithSkillID, SourceType) == 0x00000C, "Member 'BGUFuncLibAICS_BGURequestAIUseSkillWithSkillID::SourceType' has a wrong offset!");
//static_assert(offsetof(BGUFuncLibAICS_BGURequestAIUseSkillWithSkillID, ReturnValue) == 0x000010, "Member 'BGUFuncLibAICS_BGURequestAIUseSkillWithSkillID::ReturnValue' has a wrong offset!");

// Function b1-Managed.BGUFuncLibAICS.BGUAISetUnitsTargetAsPlayer
// 0x0008 (0x0008 - 0x0000)
struct BGUFuncLibAICS_BGUAISetUnitsTargetAsPlayer final
{
public:
	class UObject*                                WorldContextObject;                                // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
//static_assert(alignof(BGUFuncLibAICS_BGUAISetUnitsTargetAsPlayer) == 0x000008, "Wrong alignment on BGUFuncLibAICS_BGUAISetUnitsTargetAsPlayer");
//static_assert(sizeof(BGUFuncLibAICS_BGUAISetUnitsTargetAsPlayer) == 0x000008, "Wrong size on BGUFuncLibAICS_BGUAISetUnitsTargetAsPlayer");
//static_assert(offsetof(BGUFuncLibAICS_BGUAISetUnitsTargetAsPlayer, WorldContextObject) == 0x000000, "Member 'BGUFuncLibAICS_BGUAISetUnitsTargetAsPlayer::WorldContextObject' has a wrong offset!");

// Function b1-Managed.BGUFuncLibAICS.BGURequestAIMoveToLocation
// 0x0030 (0x0030 - 0x0000)
struct BGUFuncLibAICS_BGURequestAIMoveToLocation final
{
public:
	class AActor*                                 Unit;                                              // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                Position;                                          // 0x0008(0x0018)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	EAIMoveSpeedType                              SpeedRateType;                                     // 0x0020(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_21[0x3];                                       // 0x0021(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         AcceptableRadius;                                  // 0x0024(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	EBGUMoveAIType                                MoveAIType;                                        // 0x0028(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         IncludeSelfRadius : 1;                             // 0x0029(0x0001)(BitIndex: 0x00, PropSize: 0x0001 (Parm, NoDestructor, HasGetValueTypeHash))
	uint8                                         BitPad_29_1 : 7;                                   // 0x0029(0x0001)(Fixing Bit-Field Size For New Byte [ Dumper-7 ])
	uint8                                         IncludeTargetRadius : 1;                           // 0x002A(0x0001)(BitIndex: 0x00, PropSize: 0x0001 (Parm, NoDestructor, HasGetValueTypeHash))
	uint8                                         Pad_2B[0x1];                                       // 0x002B(0x0001)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         ReturnValue;                                       // 0x002C(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
//static_assert(alignof(BGUFuncLibAICS_BGURequestAIMoveToLocation) == 0x000008, "Wrong alignment on BGUFuncLibAICS_BGURequestAIMoveToLocation");
//static_assert(sizeof(BGUFuncLibAICS_BGURequestAIMoveToLocation) == 0x000030, "Wrong size on BGUFuncLibAICS_BGURequestAIMoveToLocation");
//static_assert(offsetof(BGUFuncLibAICS_BGURequestAIMoveToLocation, Unit) == 0x000000, "Member 'BGUFuncLibAICS_BGURequestAIMoveToLocation::Unit' has a wrong offset!");
//static_assert(offsetof(BGUFuncLibAICS_BGURequestAIMoveToLocation, Position) == 0x000008, "Member 'BGUFuncLibAICS_BGURequestAIMoveToLocation::Position' has a wrong offset!");
//static_assert(offsetof(BGUFuncLibAICS_BGURequestAIMoveToLocation, SpeedRateType) == 0x000020, "Member 'BGUFuncLibAICS_BGURequestAIMoveToLocation::SpeedRateType' has a wrong offset!");
//static_assert(offsetof(BGUFuncLibAICS_BGURequestAIMoveToLocation, AcceptableRadius) == 0x000024, "Member 'BGUFuncLibAICS_BGURequestAIMoveToLocation::AcceptableRadius' has a wrong offset!");
//static_assert(offsetof(BGUFuncLibAICS_BGURequestAIMoveToLocation, MoveAIType) == 0x000028, "Member 'BGUFuncLibAICS_BGURequestAIMoveToLocation::MoveAIType' has a wrong offset!");
//static_assert(offsetof(BGUFuncLibAICS_BGURequestAIMoveToLocation, ReturnValue) == 0x00002C, "Member 'BGUFuncLibAICS_BGURequestAIMoveToLocation::ReturnValue' has a wrong offset!");

// Function b1-Managed.BGUFuncLibAICS.BGUAISetUnitTargetAsPlayer
// 0x0008 (0x0008 - 0x0000)
struct BGUFuncLibAICS_BGUAISetUnitTargetAsPlayer final
{
public:
	class AActor*                                 Unit;                                              // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
//static_assert(alignof(BGUFuncLibAICS_BGUAISetUnitTargetAsPlayer) == 0x000008, "Wrong alignment on BGUFuncLibAICS_BGUAISetUnitTargetAsPlayer");
//static_assert(sizeof(BGUFuncLibAICS_BGUAISetUnitTargetAsPlayer) == 0x000008, "Wrong size on BGUFuncLibAICS_BGUAISetUnitTargetAsPlayer");
//static_assert(offsetof(BGUFuncLibAICS_BGUAISetUnitTargetAsPlayer, Unit) == 0x000000, "Member 'BGUFuncLibAICS_BGUAISetUnitTargetAsPlayer::Unit' has a wrong offset!");

// Function b1-Managed.BGUFuncLibAICS.BGURequestAIMontageMoveTo
// 0x0020 (0x0020 - 0x0000)
struct BGUFuncLibAICS_BGURequestAIMontageMoveTo final
{
public:
	class AActor*                                 Unit;                                              // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UAnimMontage*                           Montage;                                           // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         ScaleRate;                                         // 0x0010(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         PlayTimeRate;                                      // 0x0014(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         PosOffset;                                         // 0x0018(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         ReturnValue;                                       // 0x001C(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
//static_assert(alignof(BGUFuncLibAICS_BGURequestAIMontageMoveTo) == 0x000008, "Wrong alignment on BGUFuncLibAICS_BGURequestAIMontageMoveTo");
//static_assert(sizeof(BGUFuncLibAICS_BGURequestAIMontageMoveTo) == 0x000020, "Wrong size on BGUFuncLibAICS_BGURequestAIMontageMoveTo");
//static_assert(offsetof(BGUFuncLibAICS_BGURequestAIMontageMoveTo, Unit) == 0x000000, "Member 'BGUFuncLibAICS_BGURequestAIMontageMoveTo::Unit' has a wrong offset!");
//static_assert(offsetof(BGUFuncLibAICS_BGURequestAIMontageMoveTo, Montage) == 0x000008, "Member 'BGUFuncLibAICS_BGURequestAIMontageMoveTo::Montage' has a wrong offset!");
//static_assert(offsetof(BGUFuncLibAICS_BGURequestAIMontageMoveTo, ScaleRate) == 0x000010, "Member 'BGUFuncLibAICS_BGURequestAIMontageMoveTo::ScaleRate' has a wrong offset!");
//static_assert(offsetof(BGUFuncLibAICS_BGURequestAIMontageMoveTo, PlayTimeRate) == 0x000014, "Member 'BGUFuncLibAICS_BGURequestAIMontageMoveTo::PlayTimeRate' has a wrong offset!");
//static_assert(offsetof(BGUFuncLibAICS_BGURequestAIMontageMoveTo, PosOffset) == 0x000018, "Member 'BGUFuncLibAICS_BGURequestAIMontageMoveTo::PosOffset' has a wrong offset!");
//static_assert(offsetof(BGUFuncLibAICS_BGURequestAIMontageMoveTo, ReturnValue) == 0x00001C, "Member 'BGUFuncLibAICS_BGURequestAIMontageMoveTo::ReturnValue' has a wrong offset!");

// Function b1-Managed.BGUFuncLibAICS.BGUUpdateUnitBattleState
// 0x0010 (0x0010 - 0x0000)
struct BGUFuncLibAICS_BGUUpdateUnitBattleState final
{
public:
	class ABGUCharacterCS*                        Unit;                                              // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         IsInBattle : 1;                                    // 0x0008(0x0001)(BitIndex: 0x00, PropSize: 0x0001 (Parm, NoDestructor, HasGetValueTypeHash))
};
//static_assert(alignof(BGUFuncLibAICS_BGUUpdateUnitBattleState) == 0x000008, "Wrong alignment on BGUFuncLibAICS_BGUUpdateUnitBattleState");
//static_assert(sizeof(BGUFuncLibAICS_BGUUpdateUnitBattleState) == 0x000010, "Wrong size on BGUFuncLibAICS_BGUUpdateUnitBattleState");
//static_assert(offsetof(BGUFuncLibAICS_BGUUpdateUnitBattleState, Unit) == 0x000000, "Member 'BGUFuncLibAICS_BGUUpdateUnitBattleState::Unit' has a wrong offset!");

// Function b1-Managed.BGUFuncLibAICS.BGUCancelAICurrentMove
// 0x0008 (0x0008 - 0x0000)
struct BGUFuncLibAICS_BGUCancelAICurrentMove final
{
public:
	class AActor*                                 Unit;                                              // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
//static_assert(alignof(BGUFuncLibAICS_BGUCancelAICurrentMove) == 0x000008, "Wrong alignment on BGUFuncLibAICS_BGUCancelAICurrentMove");
//static_assert(sizeof(BGUFuncLibAICS_BGUCancelAICurrentMove) == 0x000008, "Wrong size on BGUFuncLibAICS_BGUCancelAICurrentMove");
//static_assert(offsetof(BGUFuncLibAICS_BGUCancelAICurrentMove, Unit) == 0x000000, "Member 'BGUFuncLibAICS_BGUCancelAICurrentMove::Unit' has a wrong offset!");

// Function b1-Managed.BGUFuncLibAICS.BGUAITriggerFSMEvent
// 0x0010 (0x0010 - 0x0000)
struct BGUFuncLibAICS_BGUAITriggerFSMEvent final
{
public:
	class AActor*                                 Unit;                                              // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	EBGUFSMEventName                              FSMEvent;                                          // 0x0008(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
//static_assert(alignof(BGUFuncLibAICS_BGUAITriggerFSMEvent) == 0x000008, "Wrong alignment on BGUFuncLibAICS_BGUAITriggerFSMEvent");
//static_assert(sizeof(BGUFuncLibAICS_BGUAITriggerFSMEvent) == 0x000010, "Wrong size on BGUFuncLibAICS_BGUAITriggerFSMEvent");
//static_assert(offsetof(BGUFuncLibAICS_BGUAITriggerFSMEvent, Unit) == 0x000000, "Member 'BGUFuncLibAICS_BGUAITriggerFSMEvent::Unit' has a wrong offset!");
//static_assert(offsetof(BGUFuncLibAICS_BGUAITriggerFSMEvent, FSMEvent) == 0x000008, "Member 'BGUFuncLibAICS_BGUAITriggerFSMEvent::FSMEvent' has a wrong offset!");

// Function b1-Managed.BGUFuncLibAICS.BGUAISwitchSideWalk
// 0x0010 (0x0010 - 0x0000)
struct BGUFuncLibAICS_BGUAISwitchSideWalk final
{
public:
	class AActor*                                 Unit;                                              // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         bEnable : 1;                                       // 0x0008(0x0001)(BitIndex: 0x00, PropSize: 0x0001 (Parm, NoDestructor, HasGetValueTypeHash))
};
//static_assert(alignof(BGUFuncLibAICS_BGUAISwitchSideWalk) == 0x000008, "Wrong alignment on BGUFuncLibAICS_BGUAISwitchSideWalk");
//static_assert(sizeof(BGUFuncLibAICS_BGUAISwitchSideWalk) == 0x000010, "Wrong size on BGUFuncLibAICS_BGUAISwitchSideWalk");
//static_assert(offsetof(BGUFuncLibAICS_BGUAISwitchSideWalk, Unit) == 0x000000, "Member 'BGUFuncLibAICS_BGUAISwitchSideWalk::Unit' has a wrong offset!");

// Function b1-Managed.BGUFuncLibAICS.BGUCancelAIMoveTo
// 0x0010 (0x0010 - 0x0000)
struct BGUFuncLibAICS_BGUCancelAIMoveTo final
{
public:
	class AActor*                                 Unit;                                              // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         RequestIdx;                                        // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
//static_assert(alignof(BGUFuncLibAICS_BGUCancelAIMoveTo) == 0x000008, "Wrong alignment on BGUFuncLibAICS_BGUCancelAIMoveTo");
//static_assert(sizeof(BGUFuncLibAICS_BGUCancelAIMoveTo) == 0x000010, "Wrong size on BGUFuncLibAICS_BGUCancelAIMoveTo");
//static_assert(offsetof(BGUFuncLibAICS_BGUCancelAIMoveTo, Unit) == 0x000000, "Member 'BGUFuncLibAICS_BGUCancelAIMoveTo::Unit' has a wrong offset!");
//static_assert(offsetof(BGUFuncLibAICS_BGUCancelAIMoveTo, RequestIdx) == 0x000008, "Member 'BGUFuncLibAICS_BGUCancelAIMoveTo::RequestIdx' has a wrong offset!");

// Function b1-Managed.BGUFuncLibAICS.BGUAISideWalk
// 0x0018 (0x0018 - 0x0000)
struct BGUFuncLibAICS_BGUAISideWalk final
{
public:
	class AActor*                                 Unit;                                              // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         MoveForwardValue;                                  // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         MoveHorizonValue;                                  // 0x000C(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         ReturnValue;                                       // 0x0010(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
//static_assert(alignof(BGUFuncLibAICS_BGUAISideWalk) == 0x000008, "Wrong alignment on BGUFuncLibAICS_BGUAISideWalk");
//static_assert(sizeof(BGUFuncLibAICS_BGUAISideWalk) == 0x000018, "Wrong size on BGUFuncLibAICS_BGUAISideWalk");
//static_assert(offsetof(BGUFuncLibAICS_BGUAISideWalk, Unit) == 0x000000, "Member 'BGUFuncLibAICS_BGUAISideWalk::Unit' has a wrong offset!");
//static_assert(offsetof(BGUFuncLibAICS_BGUAISideWalk, MoveForwardValue) == 0x000008, "Member 'BGUFuncLibAICS_BGUAISideWalk::MoveForwardValue' has a wrong offset!");
//static_assert(offsetof(BGUFuncLibAICS_BGUAISideWalk, MoveHorizonValue) == 0x00000C, "Member 'BGUFuncLibAICS_BGUAISideWalk::MoveHorizonValue' has a wrong offset!");
//static_assert(offsetof(BGUFuncLibAICS_BGUAISideWalk, ReturnValue) == 0x000010, "Member 'BGUFuncLibAICS_BGUAISideWalk::ReturnValue' has a wrong offset!");

// Function b1-Managed.BGUFunclibEditorUtility.GetAllSkeletalActorWithoutPerfFromSelected
// 0x0020 (0x0020 - 0x0000)
struct BGUFunclibEditorUtility_GetAllSkeletalActorWithoutPerfFromSelected final
{
public:
	TArray<class FString>                         SelectedLevels;                                    // 0x0000(0x0010)(Parm)
	TArray<struct FLevelSkeletalMeshCheckInfoHelper> ReturnValue;                                       // 0x0010(0x0010)(Parm, OutParm, ReturnParm)
};
//static_assert(alignof(BGUFunclibEditorUtility_GetAllSkeletalActorWithoutPerfFromSelected) == 0x000008, "Wrong alignment on BGUFunclibEditorUtility_GetAllSkeletalActorWithoutPerfFromSelected");
//static_assert(sizeof(BGUFunclibEditorUtility_GetAllSkeletalActorWithoutPerfFromSelected) == 0x000020, "Wrong size on BGUFunclibEditorUtility_GetAllSkeletalActorWithoutPerfFromSelected");
//static_assert(offsetof(BGUFunclibEditorUtility_GetAllSkeletalActorWithoutPerfFromSelected, SelectedLevels) == 0x000000, "Member 'BGUFunclibEditorUtility_GetAllSkeletalActorWithoutPerfFromSelected::SelectedLevels' has a wrong offset!");
//static_assert(offsetof(BGUFunclibEditorUtility_GetAllSkeletalActorWithoutPerfFromSelected, ReturnValue) == 0x000010, "Member 'BGUFunclibEditorUtility_GetAllSkeletalActorWithoutPerfFromSelected::ReturnValue' has a wrong offset!");

// Function b1-Managed.BGUFunclibEditorUtility.SetupSkeletalActorInactiveInfo
// 0x0008 (0x0008 - 0x0000)
struct BGUFunclibEditorUtility_SetupSkeletalActorInactiveInfo final
{
public:
	class AActor*                                 InActor;                                           // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
//static_assert(alignof(BGUFunclibEditorUtility_SetupSkeletalActorInactiveInfo) == 0x000008, "Wrong alignment on BGUFunclibEditorUtility_SetupSkeletalActorInactiveInfo");
//static_assert(sizeof(BGUFunclibEditorUtility_SetupSkeletalActorInactiveInfo) == 0x000008, "Wrong size on BGUFunclibEditorUtility_SetupSkeletalActorInactiveInfo");
//static_assert(offsetof(BGUFunclibEditorUtility_SetupSkeletalActorInactiveInfo, InActor) == 0x000000, "Member 'BGUFunclibEditorUtility_SetupSkeletalActorInactiveInfo::InActor' has a wrong offset!");

// Function b1-Managed.BGUFunclibEditorUtility.PrintSkeletalMeshPerfInfoCSV
// 0x0020 (0x0020 - 0x0000)
struct BGUFunclibEditorUtility_PrintSkeletalMeshPerfInfoCSV final
{
public:
	TArray<struct FLevelSkeletalMeshCheckInfoHelper> LevelSkeletalMeshInfo;                             // 0x0000(0x0010)(Parm)
	class FString                                 CSVPath;                                           // 0x0010(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash)
};
//static_assert(alignof(BGUFunclibEditorUtility_PrintSkeletalMeshPerfInfoCSV) == 0x000008, "Wrong alignment on BGUFunclibEditorUtility_PrintSkeletalMeshPerfInfoCSV");
//static_assert(sizeof(BGUFunclibEditorUtility_PrintSkeletalMeshPerfInfoCSV) == 0x000020, "Wrong size on BGUFunclibEditorUtility_PrintSkeletalMeshPerfInfoCSV");
//static_assert(offsetof(BGUFunclibEditorUtility_PrintSkeletalMeshPerfInfoCSV, LevelSkeletalMeshInfo) == 0x000000, "Member 'BGUFunclibEditorUtility_PrintSkeletalMeshPerfInfoCSV::LevelSkeletalMeshInfo' has a wrong offset!");
//static_assert(offsetof(BGUFunclibEditorUtility_PrintSkeletalMeshPerfInfoCSV, CSVPath) == 0x000010, "Member 'BGUFunclibEditorUtility_PrintSkeletalMeshPerfInfoCSV::CSVPath' has a wrong offset!");

// Function b1-Managed.BGUFunclibEditorUtility.CheckIsActorInactiveManaged
// 0x0010 (0x0010 - 0x0000)
struct BGUFunclibEditorUtility_CheckIsActorInactiveManaged final
{
public:
	class AActor*                                 Actor;                                             // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         ReturnValue : 1;                                   // 0x0008(0x0001)(BitIndex: 0x00, PropSize: 0x0001 (Parm, OutParm, ReturnParm, NoDestructor, HasGetValueTypeHash))
};
//static_assert(alignof(BGUFunclibEditorUtility_CheckIsActorInactiveManaged) == 0x000008, "Wrong alignment on BGUFunclibEditorUtility_CheckIsActorInactiveManaged");
//static_assert(sizeof(BGUFunclibEditorUtility_CheckIsActorInactiveManaged) == 0x000010, "Wrong size on BGUFunclibEditorUtility_CheckIsActorInactiveManaged");
//static_assert(offsetof(BGUFunclibEditorUtility_CheckIsActorInactiveManaged, Actor) == 0x000000, "Member 'BGUFunclibEditorUtility_CheckIsActorInactiveManaged::Actor' has a wrong offset!");

// Function b1-Managed.BGUFunclibEditorUtility.GetAllSkeletalActorInLevel
// 0x0018 (0x0018 - 0x0000)
struct BGUFunclibEditorUtility_GetAllSkeletalActorInLevel final
{
public:
	class ULevel*                                 Level;                                             // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	TArray<class AActor*>                         ReturnValue;                                       // 0x0008(0x0010)(Parm, OutParm, ReturnParm)
};
//static_assert(alignof(BGUFunclibEditorUtility_GetAllSkeletalActorInLevel) == 0x000008, "Wrong alignment on BGUFunclibEditorUtility_GetAllSkeletalActorInLevel");
//static_assert(sizeof(BGUFunclibEditorUtility_GetAllSkeletalActorInLevel) == 0x000018, "Wrong size on BGUFunclibEditorUtility_GetAllSkeletalActorInLevel");
//static_assert(offsetof(BGUFunclibEditorUtility_GetAllSkeletalActorInLevel, Level) == 0x000000, "Member 'BGUFunclibEditorUtility_GetAllSkeletalActorInLevel::Level' has a wrong offset!");
//static_assert(offsetof(BGUFunclibEditorUtility_GetAllSkeletalActorInLevel, ReturnValue) == 0x000008, "Member 'BGUFunclibEditorUtility_GetAllSkeletalActorInLevel::ReturnValue' has a wrong offset!");

// Function b1-Managed.BGUFunclibEditorUtility.SwitchDebugWidgetState
// 0x0008 (0x0008 - 0x0000)
struct BGUFunclibEditorUtility_SwitchDebugWidgetState final
{
public:
	class AActor*                                 Actor;                                             // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
//static_assert(alignof(BGUFunclibEditorUtility_SwitchDebugWidgetState) == 0x000008, "Wrong alignment on BGUFunclibEditorUtility_SwitchDebugWidgetState");
//static_assert(sizeof(BGUFunclibEditorUtility_SwitchDebugWidgetState) == 0x000008, "Wrong size on BGUFunclibEditorUtility_SwitchDebugWidgetState");
//static_assert(offsetof(BGUFunclibEditorUtility_SwitchDebugWidgetState, Actor) == 0x000000, "Member 'BGUFunclibEditorUtility_SwitchDebugWidgetState::Actor' has a wrong offset!");

// Function b1-Managed.BGUFunclibEditorUtility.GetAMPathBySkillID
// 0x0018 (0x0018 - 0x0000)
struct BGUFunclibEditorUtility_GetAMPathBySkillID final
{
public:
	int32                                         SkillID;                                           // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_4[0x4];                                        // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 ReturnValue;                                       // 0x0008(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash)
};
//static_assert(alignof(BGUFunclibEditorUtility_GetAMPathBySkillID) == 0x000008, "Wrong alignment on BGUFunclibEditorUtility_GetAMPathBySkillID");
//static_assert(sizeof(BGUFunclibEditorUtility_GetAMPathBySkillID) == 0x000018, "Wrong size on BGUFunclibEditorUtility_GetAMPathBySkillID");
//static_assert(offsetof(BGUFunclibEditorUtility_GetAMPathBySkillID, SkillID) == 0x000000, "Member 'BGUFunclibEditorUtility_GetAMPathBySkillID::SkillID' has a wrong offset!");
//static_assert(offsetof(BGUFunclibEditorUtility_GetAMPathBySkillID, ReturnValue) == 0x000008, "Member 'BGUFunclibEditorUtility_GetAMPathBySkillID::ReturnValue' has a wrong offset!");

// Function b1-Managed.BGUFunclibEditorUtility.GetSkillIDByAMPath
// 0x0020 (0x0020 - 0x0000)
struct BGUFunclibEditorUtility_GetSkillIDByAMPath final
{
public:
	class FString                                 AMPath;                                            // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash)
	TArray<int32>                                 ReturnValue;                                       // 0x0010(0x0010)(Parm, OutParm, ReturnParm)
};
//static_assert(alignof(BGUFunclibEditorUtility_GetSkillIDByAMPath) == 0x000008, "Wrong alignment on BGUFunclibEditorUtility_GetSkillIDByAMPath");
//static_assert(sizeof(BGUFunclibEditorUtility_GetSkillIDByAMPath) == 0x000020, "Wrong size on BGUFunclibEditorUtility_GetSkillIDByAMPath");
//static_assert(offsetof(BGUFunclibEditorUtility_GetSkillIDByAMPath, AMPath) == 0x000000, "Member 'BGUFunclibEditorUtility_GetSkillIDByAMPath::AMPath' has a wrong offset!");
//static_assert(offsetof(BGUFunclibEditorUtility_GetSkillIDByAMPath, ReturnValue) == 0x000010, "Member 'BGUFunclibEditorUtility_GetSkillIDByAMPath::ReturnValue' has a wrong offset!");

// Function b1-Managed.BGUFunclibEditorUtility.PrintStringsToCSV
// 0x0020 (0x0020 - 0x0000)
struct BGUFunclibEditorUtility_PrintStringsToCSV final
{
public:
	TArray<class FString>                         Infos;                                             // 0x0000(0x0010)(Parm)
	class FString                                 CSVPath;                                           // 0x0010(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash)
};
//static_assert(alignof(BGUFunclibEditorUtility_PrintStringsToCSV) == 0x000008, "Wrong alignment on BGUFunclibEditorUtility_PrintStringsToCSV");
//static_assert(sizeof(BGUFunclibEditorUtility_PrintStringsToCSV) == 0x000020, "Wrong size on BGUFunclibEditorUtility_PrintStringsToCSV");
//static_assert(offsetof(BGUFunclibEditorUtility_PrintStringsToCSV, Infos) == 0x000000, "Member 'BGUFunclibEditorUtility_PrintStringsToCSV::Infos' has a wrong offset!");
//static_assert(offsetof(BGUFunclibEditorUtility_PrintStringsToCSV, CSVPath) == 0x000010, "Member 'BGUFunclibEditorUtility_PrintStringsToCSV::CSVPath' has a wrong offset!");

// Function b1-Managed.BGUFuncLibReplication.GetActorNetRole
// 0x0010 (0x0010 - 0x0000)
struct BGUFuncLibReplication_GetActorNetRole final
{
public:
	class AActor*                                 Owner;                                             // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         ReturnValue;                                       // 0x0008(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
//static_assert(alignof(BGUFuncLibReplication_GetActorNetRole) == 0x000008, "Wrong alignment on BGUFuncLibReplication_GetActorNetRole");
//static_assert(sizeof(BGUFuncLibReplication_GetActorNetRole) == 0x000010, "Wrong size on BGUFuncLibReplication_GetActorNetRole");
//static_assert(offsetof(BGUFuncLibReplication_GetActorNetRole, Owner) == 0x000000, "Member 'BGUFuncLibReplication_GetActorNetRole::Owner' has a wrong offset!");
//static_assert(offsetof(BGUFuncLibReplication_GetActorNetRole, ReturnValue) == 0x000008, "Member 'BGUFuncLibReplication_GetActorNetRole::ReturnValue' has a wrong offset!");

// Function b1-Managed.BED_StateAsset.GetExtraDefaultOutputNodesInBranchGraph
// 0x0018 (0x0018 - 0x0000)
struct BED_StateAsset_GetExtraDefaultOutputNodesInBranchGraph final
{
public:
	TArray<class UClass*>                         OutClasses;                                        // 0x0000(0x0010)(Parm, OutParm)
	int32                                         ReturnValue;                                       // 0x0010(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
//static_assert(alignof(BED_StateAsset_GetExtraDefaultOutputNodesInBranchGraph) == 0x000008, "Wrong alignment on BED_StateAsset_GetExtraDefaultOutputNodesInBranchGraph");
//static_assert(sizeof(BED_StateAsset_GetExtraDefaultOutputNodesInBranchGraph) == 0x000018, "Wrong size on BED_StateAsset_GetExtraDefaultOutputNodesInBranchGraph");
//static_assert(offsetof(BED_StateAsset_GetExtraDefaultOutputNodesInBranchGraph, OutClasses) == 0x000000, "Member 'BED_StateAsset_GetExtraDefaultOutputNodesInBranchGraph::OutClasses' has a wrong offset!");
//static_assert(offsetof(BED_StateAsset_GetExtraDefaultOutputNodesInBranchGraph, ReturnValue) == 0x000010, "Member 'BED_StateAsset_GetExtraDefaultOutputNodesInBranchGraph::ReturnValue' has a wrong offset!");

// Function b1-Managed.BED_StateAsset.GetExtraDefaultInputNodesInBranchGraph
// 0x0018 (0x0018 - 0x0000)
struct BED_StateAsset_GetExtraDefaultInputNodesInBranchGraph final
{
public:
	TArray<class UClass*>                         OutClasses;                                        // 0x0000(0x0010)(Parm, OutParm)
	int32                                         ReturnValue;                                       // 0x0010(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
//static_assert(alignof(BED_StateAsset_GetExtraDefaultInputNodesInBranchGraph) == 0x000008, "Wrong alignment on BED_StateAsset_GetExtraDefaultInputNodesInBranchGraph");
//static_assert(sizeof(BED_StateAsset_GetExtraDefaultInputNodesInBranchGraph) == 0x000018, "Wrong size on BED_StateAsset_GetExtraDefaultInputNodesInBranchGraph");
//static_assert(offsetof(BED_StateAsset_GetExtraDefaultInputNodesInBranchGraph, OutClasses) == 0x000000, "Member 'BED_StateAsset_GetExtraDefaultInputNodesInBranchGraph::OutClasses' has a wrong offset!");
//static_assert(offsetof(BED_StateAsset_GetExtraDefaultInputNodesInBranchGraph, ReturnValue) == 0x000010, "Member 'BED_StateAsset_GetExtraDefaultInputNodesInBranchGraph::ReturnValue' has a wrong offset!");

// Function b1-Managed.BED_StateAsset.GetRerouteNodeClassInBranchGraph
// 0x0008 (0x0008 - 0x0000)
struct BED_StateAsset_GetRerouteNodeClassInBranchGraph final
{
public:
	class UClass*                                 ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
//static_assert(alignof(BED_StateAsset_GetRerouteNodeClassInBranchGraph) == 0x000008, "Wrong alignment on BED_StateAsset_GetRerouteNodeClassInBranchGraph");
//static_assert(sizeof(BED_StateAsset_GetRerouteNodeClassInBranchGraph) == 0x000008, "Wrong size on BED_StateAsset_GetRerouteNodeClassInBranchGraph");
//static_assert(offsetof(BED_StateAsset_GetRerouteNodeClassInBranchGraph, ReturnValue) == 0x000000, "Member 'BED_StateAsset_GetRerouteNodeClassInBranchGraph::ReturnValue' has a wrong offset!");

// Function b1-Managed.BED_StateAsset.GetStartNodeClassInBranchGraph
// 0x0008 (0x0008 - 0x0000)
struct BED_StateAsset_GetStartNodeClassInBranchGraph final
{
public:
	class UClass*                                 ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
//static_assert(alignof(BED_StateAsset_GetStartNodeClassInBranchGraph) == 0x000008, "Wrong alignment on BED_StateAsset_GetStartNodeClassInBranchGraph");
//static_assert(sizeof(BED_StateAsset_GetStartNodeClassInBranchGraph) == 0x000008, "Wrong size on BED_StateAsset_GetStartNodeClassInBranchGraph");
//static_assert(offsetof(BED_StateAsset_GetStartNodeClassInBranchGraph, ReturnValue) == 0x000000, "Member 'BED_StateAsset_GetStartNodeClassInBranchGraph::ReturnValue' has a wrong offset!");

// Function b1-Managed.BED_StateAsset.GetExtraDefaultOutputNodes
// 0x0018 (0x0018 - 0x0000)
struct BED_StateAsset_GetExtraDefaultOutputNodes final
{
public:
	TArray<class UClass*>                         OutClasses;                                        // 0x0000(0x0010)(Parm, OutParm)
	int32                                         ReturnValue;                                       // 0x0010(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
//static_assert(alignof(BED_StateAsset_GetExtraDefaultOutputNodes) == 0x000008, "Wrong alignment on BED_StateAsset_GetExtraDefaultOutputNodes");
//static_assert(sizeof(BED_StateAsset_GetExtraDefaultOutputNodes) == 0x000018, "Wrong size on BED_StateAsset_GetExtraDefaultOutputNodes");
//static_assert(offsetof(BED_StateAsset_GetExtraDefaultOutputNodes, OutClasses) == 0x000000, "Member 'BED_StateAsset_GetExtraDefaultOutputNodes::OutClasses' has a wrong offset!");
//static_assert(offsetof(BED_StateAsset_GetExtraDefaultOutputNodes, ReturnValue) == 0x000010, "Member 'BED_StateAsset_GetExtraDefaultOutputNodes::ReturnValue' has a wrong offset!");

// Function b1-Managed.BED_StateAsset.GetExtraDefaultInputNodes
// 0x0018 (0x0018 - 0x0000)
struct BED_StateAsset_GetExtraDefaultInputNodes final
{
public:
	TArray<class UClass*>                         OutClasses;                                        // 0x0000(0x0010)(Parm, OutParm)
	int32                                         ReturnValue;                                       // 0x0010(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
//static_assert(alignof(BED_StateAsset_GetExtraDefaultInputNodes) == 0x000008, "Wrong alignment on BED_StateAsset_GetExtraDefaultInputNodes");
//static_assert(sizeof(BED_StateAsset_GetExtraDefaultInputNodes) == 0x000018, "Wrong size on BED_StateAsset_GetExtraDefaultInputNodes");
//static_assert(offsetof(BED_StateAsset_GetExtraDefaultInputNodes, OutClasses) == 0x000000, "Member 'BED_StateAsset_GetExtraDefaultInputNodes::OutClasses' has a wrong offset!");
//static_assert(offsetof(BED_StateAsset_GetExtraDefaultInputNodes, ReturnValue) == 0x000010, "Member 'BED_StateAsset_GetExtraDefaultInputNodes::ReturnValue' has a wrong offset!");

// Function b1-Managed.BED_StateAsset.GetRerouteNodeClass
// 0x0008 (0x0008 - 0x0000)
struct BED_StateAsset_GetRerouteNodeClass final
{
public:
	class UClass*                                 ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
//static_assert(alignof(BED_StateAsset_GetRerouteNodeClass) == 0x000008, "Wrong alignment on BED_StateAsset_GetRerouteNodeClass");
//static_assert(sizeof(BED_StateAsset_GetRerouteNodeClass) == 0x000008, "Wrong size on BED_StateAsset_GetRerouteNodeClass");
//static_assert(offsetof(BED_StateAsset_GetRerouteNodeClass, ReturnValue) == 0x000000, "Member 'BED_StateAsset_GetRerouteNodeClass::ReturnValue' has a wrong offset!");

// Function b1-Managed.BED_StateAsset.GetStartNodeClass
// 0x0008 (0x0008 - 0x0000)
struct BED_StateAsset_GetStartNodeClass final
{
public:
	class UClass*                                 ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
//static_assert(alignof(BED_StateAsset_GetStartNodeClass) == 0x000008, "Wrong alignment on BED_StateAsset_GetStartNodeClass");
//static_assert(sizeof(BED_StateAsset_GetStartNodeClass) == 0x000008, "Wrong size on BED_StateAsset_GetStartNodeClass");
//static_assert(offsetof(BED_StateAsset_GetStartNodeClass, ReturnValue) == 0x000000, "Member 'BED_StateAsset_GetStartNodeClass::ReturnValue' has a wrong offset!");

// Function b1-Managed.BED_StateAsset.GetViewType
// 0x0001 (0x0001 - 0x0000)
struct BED_StateAsset_GetViewType final
{
public:
	ECalliopeViewType                             ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
//static_assert(alignof(BED_StateAsset_GetViewType) == 0x000001, "Wrong alignment on BED_StateAsset_GetViewType");
//static_assert(sizeof(BED_StateAsset_GetViewType) == 0x000001, "Wrong size on BED_StateAsset_GetViewType");
//static_assert(offsetof(BED_StateAsset_GetViewType, ReturnValue) == 0x000000, "Member 'BED_StateAsset_GetViewType::ReturnValue' has a wrong offset!");

// Function b1-Managed.BGUFuncLibAnim.BGUSetPlayerLocomotionLockMoveDirection
// 0x0010 (0x0010 - 0x0000)
struct BGUFuncLibAnim_BGUSetPlayerLocomotionLockMoveDirection final
{
public:
	class AActor*                                 Owner;                                             // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	ELockMoveDirectionSix                         Direction;                                         // 0x0008(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
//static_assert(alignof(BGUFuncLibAnim_BGUSetPlayerLocomotionLockMoveDirection) == 0x000008, "Wrong alignment on BGUFuncLibAnim_BGUSetPlayerLocomotionLockMoveDirection");
//static_assert(sizeof(BGUFuncLibAnim_BGUSetPlayerLocomotionLockMoveDirection) == 0x000010, "Wrong size on BGUFuncLibAnim_BGUSetPlayerLocomotionLockMoveDirection");
//static_assert(offsetof(BGUFuncLibAnim_BGUSetPlayerLocomotionLockMoveDirection, Owner) == 0x000000, "Member 'BGUFuncLibAnim_BGUSetPlayerLocomotionLockMoveDirection::Owner' has a wrong offset!");
//static_assert(offsetof(BGUFuncLibAnim_BGUSetPlayerLocomotionLockMoveDirection, Direction) == 0x000008, "Member 'BGUFuncLibAnim_BGUSetPlayerLocomotionLockMoveDirection::Direction' has a wrong offset!");

// Function b1-Managed.BGUFuncLibAnim.BGUTryFindCPGIdleNodeWithoutResetGroup
// 0x0010 (0x0010 - 0x0000)
struct BGUFuncLibAnim_BGUTryFindCPGIdleNodeWithoutResetGroup final
{
public:
	class UBED_ProcessAsset*                      CPG;                                               // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	EIdleProcessActionType                        TargetAction;                                      // 0x0008(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         ReturnValue : 1;                                   // 0x0009(0x0001)(BitIndex: 0x00, PropSize: 0x0001 (Parm, OutParm, ReturnParm, NoDestructor, HasGetValueTypeHash))
};
//static_assert(alignof(BGUFuncLibAnim_BGUTryFindCPGIdleNodeWithoutResetGroup) == 0x000008, "Wrong alignment on BGUFuncLibAnim_BGUTryFindCPGIdleNodeWithoutResetGroup");
//static_assert(sizeof(BGUFuncLibAnim_BGUTryFindCPGIdleNodeWithoutResetGroup) == 0x000010, "Wrong size on BGUFuncLibAnim_BGUTryFindCPGIdleNodeWithoutResetGroup");
//static_assert(offsetof(BGUFuncLibAnim_BGUTryFindCPGIdleNodeWithoutResetGroup, CPG) == 0x000000, "Member 'BGUFuncLibAnim_BGUTryFindCPGIdleNodeWithoutResetGroup::CPG' has a wrong offset!");
//static_assert(offsetof(BGUFuncLibAnim_BGUTryFindCPGIdleNodeWithoutResetGroup, TargetAction) == 0x000008, "Member 'BGUFuncLibAnim_BGUTryFindCPGIdleNodeWithoutResetGroup::TargetAction' has a wrong offset!");

// Function b1-Managed.BGUFuncLibAnim.BGUPlayerLocomotionEnterLockMoveState
// 0x0008 (0x0008 - 0x0000)
struct BGUFuncLibAnim_BGUPlayerLocomotionEnterLockMoveState final
{
public:
	class AActor*                                 Owner;                                             // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
//static_assert(alignof(BGUFuncLibAnim_BGUPlayerLocomotionEnterLockMoveState) == 0x000008, "Wrong alignment on BGUFuncLibAnim_BGUPlayerLocomotionEnterLockMoveState");
//static_assert(sizeof(BGUFuncLibAnim_BGUPlayerLocomotionEnterLockMoveState) == 0x000008, "Wrong size on BGUFuncLibAnim_BGUPlayerLocomotionEnterLockMoveState");
//static_assert(offsetof(BGUFuncLibAnim_BGUPlayerLocomotionEnterLockMoveState, Owner) == 0x000000, "Member 'BGUFuncLibAnim_BGUPlayerLocomotionEnterLockMoveState::Owner' has a wrong offset!");

// Function b1-Managed.BGUFuncLibAnim.BGUPlayerLocomotionLockTurnStopDir
// 0x0010 (0x0010 - 0x0000)
struct BGUFuncLibAnim_BGUPlayerLocomotionLockTurnStopDir final
{
public:
	class AActor*                                 Owner;                                             // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	ELockMoveDirectionSix                         Direction;                                         // 0x0008(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
//static_assert(alignof(BGUFuncLibAnim_BGUPlayerLocomotionLockTurnStopDir) == 0x000008, "Wrong alignment on BGUFuncLibAnim_BGUPlayerLocomotionLockTurnStopDir");
//static_assert(sizeof(BGUFuncLibAnim_BGUPlayerLocomotionLockTurnStopDir) == 0x000010, "Wrong size on BGUFuncLibAnim_BGUPlayerLocomotionLockTurnStopDir");
//static_assert(offsetof(BGUFuncLibAnim_BGUPlayerLocomotionLockTurnStopDir, Owner) == 0x000000, "Member 'BGUFuncLibAnim_BGUPlayerLocomotionLockTurnStopDir::Owner' has a wrong offset!");
//static_assert(offsetof(BGUFuncLibAnim_BGUPlayerLocomotionLockTurnStopDir, Direction) == 0x000008, "Member 'BGUFuncLibAnim_BGUPlayerLocomotionLockTurnStopDir::Direction' has a wrong offset!");

// Function b1-Managed.BGUFuncLibAnim.BGUSetMonsterLocomotionLockMoveDir
// 0x0010 (0x0010 - 0x0000)
struct BGUFuncLibAnim_BGUSetMonsterLocomotionLockMoveDir final
{
public:
	class AActor*                                 Owner;                                             // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	EMoveDirectionEight                           MoveDir;                                           // 0x0008(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
//static_assert(alignof(BGUFuncLibAnim_BGUSetMonsterLocomotionLockMoveDir) == 0x000008, "Wrong alignment on BGUFuncLibAnim_BGUSetMonsterLocomotionLockMoveDir");
//static_assert(sizeof(BGUFuncLibAnim_BGUSetMonsterLocomotionLockMoveDir) == 0x000010, "Wrong size on BGUFuncLibAnim_BGUSetMonsterLocomotionLockMoveDir");
//static_assert(offsetof(BGUFuncLibAnim_BGUSetMonsterLocomotionLockMoveDir, Owner) == 0x000000, "Member 'BGUFuncLibAnim_BGUSetMonsterLocomotionLockMoveDir::Owner' has a wrong offset!");
//static_assert(offsetof(BGUFuncLibAnim_BGUSetMonsterLocomotionLockMoveDir, MoveDir) == 0x000008, "Member 'BGUFuncLibAnim_BGUSetMonsterLocomotionLockMoveDir::MoveDir' has a wrong offset!");

// Function b1-Managed.BGUFuncLibAnim.BGUMonsterLocomotionEnterMoveLoop
// 0x0010 (0x0010 - 0x0000)
struct BGUFuncLibAnim_BGUMonsterLocomotionEnterMoveLoop final
{
public:
	class AActor*                                 Owner;                                             // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UAnimInstance*                          MonsterLocomotionAnimInst;                         // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
//static_assert(alignof(BGUFuncLibAnim_BGUMonsterLocomotionEnterMoveLoop) == 0x000008, "Wrong alignment on BGUFuncLibAnim_BGUMonsterLocomotionEnterMoveLoop");
//static_assert(sizeof(BGUFuncLibAnim_BGUMonsterLocomotionEnterMoveLoop) == 0x000010, "Wrong size on BGUFuncLibAnim_BGUMonsterLocomotionEnterMoveLoop");
//static_assert(offsetof(BGUFuncLibAnim_BGUMonsterLocomotionEnterMoveLoop, Owner) == 0x000000, "Member 'BGUFuncLibAnim_BGUMonsterLocomotionEnterMoveLoop::Owner' has a wrong offset!");
//static_assert(offsetof(BGUFuncLibAnim_BGUMonsterLocomotionEnterMoveLoop, MonsterLocomotionAnimInst) == 0x000008, "Member 'BGUFuncLibAnim_BGUMonsterLocomotionEnterMoveLoop::MonsterLocomotionAnimInst' has a wrong offset!");

// Function b1-Managed.BGUFuncLibAnim.BGUMonsterLocomotionLockStopRight
// 0x0010 (0x0010 - 0x0000)
struct BGUFuncLibAnim_BGUMonsterLocomotionLockStopRight final
{
public:
	class AActor*                                 Owner;                                             // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UAnimInstance*                          MonsterLocomotionAnimInst;                         // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
//static_assert(alignof(BGUFuncLibAnim_BGUMonsterLocomotionLockStopRight) == 0x000008, "Wrong alignment on BGUFuncLibAnim_BGUMonsterLocomotionLockStopRight");
//static_assert(sizeof(BGUFuncLibAnim_BGUMonsterLocomotionLockStopRight) == 0x000010, "Wrong size on BGUFuncLibAnim_BGUMonsterLocomotionLockStopRight");
//static_assert(offsetof(BGUFuncLibAnim_BGUMonsterLocomotionLockStopRight, Owner) == 0x000000, "Member 'BGUFuncLibAnim_BGUMonsterLocomotionLockStopRight::Owner' has a wrong offset!");
//static_assert(offsetof(BGUFuncLibAnim_BGUMonsterLocomotionLockStopRight, MonsterLocomotionAnimInst) == 0x000008, "Member 'BGUFuncLibAnim_BGUMonsterLocomotionLockStopRight::MonsterLocomotionAnimInst' has a wrong offset!");

// Function b1-Managed.BGUFuncLibAnim.BGUMonsterLocomotionLockStopLeft
// 0x0010 (0x0010 - 0x0000)
struct BGUFuncLibAnim_BGUMonsterLocomotionLockStopLeft final
{
public:
	class AActor*                                 Owner;                                             // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UAnimInstance*                          MonsterLocomotionAnimInst;                         // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
//static_assert(alignof(BGUFuncLibAnim_BGUMonsterLocomotionLockStopLeft) == 0x000008, "Wrong alignment on BGUFuncLibAnim_BGUMonsterLocomotionLockStopLeft");
//static_assert(sizeof(BGUFuncLibAnim_BGUMonsterLocomotionLockStopLeft) == 0x000010, "Wrong size on BGUFuncLibAnim_BGUMonsterLocomotionLockStopLeft");
//static_assert(offsetof(BGUFuncLibAnim_BGUMonsterLocomotionLockStopLeft, Owner) == 0x000000, "Member 'BGUFuncLibAnim_BGUMonsterLocomotionLockStopLeft::Owner' has a wrong offset!");
//static_assert(offsetof(BGUFuncLibAnim_BGUMonsterLocomotionLockStopLeft, MonsterLocomotionAnimInst) == 0x000008, "Member 'BGUFuncLibAnim_BGUMonsterLocomotionLockStopLeft::MonsterLocomotionAnimInst' has a wrong offset!");

// Function b1-Managed.BGUFuncLibAnim.BGUSetCharacterMontagePlaying
// 0x0010 (0x0010 - 0x0000)
struct BGUFuncLibAnim_BGUSetCharacterMontagePlaying final
{
public:
	class AActor*                                 Owner;                                             // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         IsPlaying : 1;                                     // 0x0008(0x0001)(BitIndex: 0x00, PropSize: 0x0001 (Parm, NoDestructor, HasGetValueTypeHash))
};
//static_assert(alignof(BGUFuncLibAnim_BGUSetCharacterMontagePlaying) == 0x000008, "Wrong alignment on BGUFuncLibAnim_BGUSetCharacterMontagePlaying");
//static_assert(sizeof(BGUFuncLibAnim_BGUSetCharacterMontagePlaying) == 0x000010, "Wrong size on BGUFuncLibAnim_BGUSetCharacterMontagePlaying");
//static_assert(offsetof(BGUFuncLibAnim_BGUSetCharacterMontagePlaying, Owner) == 0x000000, "Member 'BGUFuncLibAnim_BGUSetCharacterMontagePlaying::Owner' has a wrong offset!");

// Function b1-Managed.BGUFuncLibAnim.BGUPlayerLocomotionStartIdle
// 0x0008 (0x0008 - 0x0000)
struct BGUFuncLibAnim_BGUPlayerLocomotionStartIdle final
{
public:
	class AActor*                                 Owner;                                             // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
//static_assert(alignof(BGUFuncLibAnim_BGUPlayerLocomotionStartIdle) == 0x000008, "Wrong alignment on BGUFuncLibAnim_BGUPlayerLocomotionStartIdle");
//static_assert(sizeof(BGUFuncLibAnim_BGUPlayerLocomotionStartIdle) == 0x000008, "Wrong size on BGUFuncLibAnim_BGUPlayerLocomotionStartIdle");
//static_assert(offsetof(BGUFuncLibAnim_BGUPlayerLocomotionStartIdle, Owner) == 0x000000, "Member 'BGUFuncLibAnim_BGUPlayerLocomotionStartIdle::Owner' has a wrong offset!");

// Function b1-Managed.BGUFuncLibAnim.BGUSplineMoveEnterStopState
// 0x0008 (0x0008 - 0x0000)
struct BGUFuncLibAnim_BGUSplineMoveEnterStopState final
{
public:
	class AActor*                                 Owner;                                             // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
//static_assert(alignof(BGUFuncLibAnim_BGUSplineMoveEnterStopState) == 0x000008, "Wrong alignment on BGUFuncLibAnim_BGUSplineMoveEnterStopState");
//static_assert(sizeof(BGUFuncLibAnim_BGUSplineMoveEnterStopState) == 0x000008, "Wrong size on BGUFuncLibAnim_BGUSplineMoveEnterStopState");
//static_assert(offsetof(BGUFuncLibAnim_BGUSplineMoveEnterStopState, Owner) == 0x000000, "Member 'BGUFuncLibAnim_BGUSplineMoveEnterStopState::Owner' has a wrong offset!");

// Function b1-Managed.BGUFuncLibAnim.BGUSetParkourMoveAnimState
// 0x0010 (0x0010 - 0x0000)
struct BGUFuncLibAnim_BGUSetParkourMoveAnimState final
{
public:
	class AActor*                                 Owner;                                             // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	EParkourMoveAnimState                         State;                                             // 0x0008(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
//static_assert(alignof(BGUFuncLibAnim_BGUSetParkourMoveAnimState) == 0x000008, "Wrong alignment on BGUFuncLibAnim_BGUSetParkourMoveAnimState");
//static_assert(sizeof(BGUFuncLibAnim_BGUSetParkourMoveAnimState) == 0x000010, "Wrong size on BGUFuncLibAnim_BGUSetParkourMoveAnimState");
//static_assert(offsetof(BGUFuncLibAnim_BGUSetParkourMoveAnimState, Owner) == 0x000000, "Member 'BGUFuncLibAnim_BGUSetParkourMoveAnimState::Owner' has a wrong offset!");
//static_assert(offsetof(BGUFuncLibAnim_BGUSetParkourMoveAnimState, State) == 0x000008, "Member 'BGUFuncLibAnim_BGUSetParkourMoveAnimState::State' has a wrong offset!");

// Function b1-Managed.BGUFuncLibAnim.BGUSetGlideMoveAnimState
// 0x0010 (0x0010 - 0x0000)
struct BGUFuncLibAnim_BGUSetGlideMoveAnimState final
{
public:
	class AActor*                                 Owner;                                             // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	EGlideMoveAnimState                           State;                                             // 0x0008(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
//static_assert(alignof(BGUFuncLibAnim_BGUSetGlideMoveAnimState) == 0x000008, "Wrong alignment on BGUFuncLibAnim_BGUSetGlideMoveAnimState");
//static_assert(sizeof(BGUFuncLibAnim_BGUSetGlideMoveAnimState) == 0x000010, "Wrong size on BGUFuncLibAnim_BGUSetGlideMoveAnimState");
//static_assert(offsetof(BGUFuncLibAnim_BGUSetGlideMoveAnimState, Owner) == 0x000000, "Member 'BGUFuncLibAnim_BGUSetGlideMoveAnimState::Owner' has a wrong offset!");
//static_assert(offsetof(BGUFuncLibAnim_BGUSetGlideMoveAnimState, State) == 0x000008, "Member 'BGUFuncLibAnim_BGUSetGlideMoveAnimState::State' has a wrong offset!");

// Function b1-Managed.BGUFuncLibAnim.BGURootMotionJumpStart
// 0x0008 (0x0008 - 0x0000)
struct BGUFuncLibAnim_BGURootMotionJumpStart final
{
public:
	class AActor*                                 Owner;                                             // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
//static_assert(alignof(BGUFuncLibAnim_BGURootMotionJumpStart) == 0x000008, "Wrong alignment on BGUFuncLibAnim_BGURootMotionJumpStart");
//static_assert(sizeof(BGUFuncLibAnim_BGURootMotionJumpStart) == 0x000008, "Wrong size on BGUFuncLibAnim_BGURootMotionJumpStart");
//static_assert(offsetof(BGUFuncLibAnim_BGURootMotionJumpStart, Owner) == 0x000000, "Member 'BGUFuncLibAnim_BGURootMotionJumpStart::Owner' has a wrong offset!");

// Function b1-Managed.BGUFuncLibAnim.BGUActorTryPlayMontage
// 0x0030 (0x0030 - 0x0000)
struct BGUFuncLibAnim_BGUActorTryPlayMontage final
{
public:
	class AActor*                                 Owner;                                             // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UAnimMontage*                           Montage;                                           // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class FName                                   StartSectionName;                                  // 0x0010(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	EMontageBindReason                            Reason;                                            // 0x0018(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_19[0x3];                                       // 0x0019(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         Scale;                                             // 0x001C(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         PlayTimeRate;                                      // 0x0020(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         MontagePosOffset;                                  // 0x0024(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         ReturnValue;                                       // 0x0028(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
//static_assert(alignof(BGUFuncLibAnim_BGUActorTryPlayMontage) == 0x000008, "Wrong alignment on BGUFuncLibAnim_BGUActorTryPlayMontage");
//static_assert(sizeof(BGUFuncLibAnim_BGUActorTryPlayMontage) == 0x000030, "Wrong size on BGUFuncLibAnim_BGUActorTryPlayMontage");
//static_assert(offsetof(BGUFuncLibAnim_BGUActorTryPlayMontage, Owner) == 0x000000, "Member 'BGUFuncLibAnim_BGUActorTryPlayMontage::Owner' has a wrong offset!");
//static_assert(offsetof(BGUFuncLibAnim_BGUActorTryPlayMontage, Montage) == 0x000008, "Member 'BGUFuncLibAnim_BGUActorTryPlayMontage::Montage' has a wrong offset!");
//static_assert(offsetof(BGUFuncLibAnim_BGUActorTryPlayMontage, StartSectionName) == 0x000010, "Member 'BGUFuncLibAnim_BGUActorTryPlayMontage::StartSectionName' has a wrong offset!");
//static_assert(offsetof(BGUFuncLibAnim_BGUActorTryPlayMontage, Reason) == 0x000018, "Member 'BGUFuncLibAnim_BGUActorTryPlayMontage::Reason' has a wrong offset!");
//static_assert(offsetof(BGUFuncLibAnim_BGUActorTryPlayMontage, Scale) == 0x00001C, "Member 'BGUFuncLibAnim_BGUActorTryPlayMontage::Scale' has a wrong offset!");
//static_assert(offsetof(BGUFuncLibAnim_BGUActorTryPlayMontage, PlayTimeRate) == 0x000020, "Member 'BGUFuncLibAnim_BGUActorTryPlayMontage::PlayTimeRate' has a wrong offset!");
//static_assert(offsetof(BGUFuncLibAnim_BGUActorTryPlayMontage, MontagePosOffset) == 0x000024, "Member 'BGUFuncLibAnim_BGUActorTryPlayMontage::MontagePosOffset' has a wrong offset!");
//static_assert(offsetof(BGUFuncLibAnim_BGUActorTryPlayMontage, ReturnValue) == 0x000028, "Member 'BGUFuncLibAnim_BGUActorTryPlayMontage::ReturnValue' has a wrong offset!");

// Function b1-Managed.BGUFuncLibAnim.BGUSetUseSnapshotPose
// 0x0010 (0x0010 - 0x0000)
struct BGUFuncLibAnim_BGUSetUseSnapshotPose final
{
public:
	class AActor*                                 Owner;                                             // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         bUseSnapshot : 1;                                  // 0x0008(0x0001)(BitIndex: 0x00, PropSize: 0x0001 (Parm, NoDestructor, HasGetValueTypeHash))
	uint8                                         Pad_9[0x3];                                        // 0x0009(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         BlendTime;                                         // 0x000C(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
//static_assert(alignof(BGUFuncLibAnim_BGUSetUseSnapshotPose) == 0x000008, "Wrong alignment on BGUFuncLibAnim_BGUSetUseSnapshotPose");
//static_assert(sizeof(BGUFuncLibAnim_BGUSetUseSnapshotPose) == 0x000010, "Wrong size on BGUFuncLibAnim_BGUSetUseSnapshotPose");
//static_assert(offsetof(BGUFuncLibAnim_BGUSetUseSnapshotPose, Owner) == 0x000000, "Member 'BGUFuncLibAnim_BGUSetUseSnapshotPose::Owner' has a wrong offset!");
//static_assert(offsetof(BGUFuncLibAnim_BGUSetUseSnapshotPose, BlendTime) == 0x00000C, "Member 'BGUFuncLibAnim_BGUSetUseSnapshotPose::BlendTime' has a wrong offset!");

// Function b1-Managed.BGUFuncLibAnim.BGURootMotionJumpEnd
// 0x0008 (0x0008 - 0x0000)
struct BGUFuncLibAnim_BGURootMotionJumpEnd final
{
public:
	class AActor*                                 Owner;                                             // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
//static_assert(alignof(BGUFuncLibAnim_BGURootMotionJumpEnd) == 0x000008, "Wrong alignment on BGUFuncLibAnim_BGURootMotionJumpEnd");
//static_assert(sizeof(BGUFuncLibAnim_BGURootMotionJumpEnd) == 0x000008, "Wrong size on BGUFuncLibAnim_BGURootMotionJumpEnd");
//static_assert(offsetof(BGUFuncLibAnim_BGURootMotionJumpEnd, Owner) == 0x000000, "Member 'BGUFuncLibAnim_BGURootMotionJumpEnd::Owner' has a wrong offset!");

// Function b1-Managed.BED_TaskAsset.GetExtraDefaultOutputNodesInBranchGraph
// 0x0018 (0x0018 - 0x0000)
struct BED_TaskAsset_GetExtraDefaultOutputNodesInBranchGraph final
{
public:
	TArray<class UClass*>                         OutClasses;                                        // 0x0000(0x0010)(Parm, OutParm)
	int32                                         ReturnValue;                                       // 0x0010(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
//static_assert(alignof(BED_TaskAsset_GetExtraDefaultOutputNodesInBranchGraph) == 0x000008, "Wrong alignment on BED_TaskAsset_GetExtraDefaultOutputNodesInBranchGraph");
//static_assert(sizeof(BED_TaskAsset_GetExtraDefaultOutputNodesInBranchGraph) == 0x000018, "Wrong size on BED_TaskAsset_GetExtraDefaultOutputNodesInBranchGraph");
//static_assert(offsetof(BED_TaskAsset_GetExtraDefaultOutputNodesInBranchGraph, OutClasses) == 0x000000, "Member 'BED_TaskAsset_GetExtraDefaultOutputNodesInBranchGraph::OutClasses' has a wrong offset!");
//static_assert(offsetof(BED_TaskAsset_GetExtraDefaultOutputNodesInBranchGraph, ReturnValue) == 0x000010, "Member 'BED_TaskAsset_GetExtraDefaultOutputNodesInBranchGraph::ReturnValue' has a wrong offset!");

// Function b1-Managed.BED_TaskAsset.GetExtraDefaultInputNodesInBranchGraph
// 0x0018 (0x0018 - 0x0000)
struct BED_TaskAsset_GetExtraDefaultInputNodesInBranchGraph final
{
public:
	TArray<class UClass*>                         OutClasses;                                        // 0x0000(0x0010)(Parm, OutParm)
	int32                                         ReturnValue;                                       // 0x0010(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
//static_assert(alignof(BED_TaskAsset_GetExtraDefaultInputNodesInBranchGraph) == 0x000008, "Wrong alignment on BED_TaskAsset_GetExtraDefaultInputNodesInBranchGraph");
//static_assert(sizeof(BED_TaskAsset_GetExtraDefaultInputNodesInBranchGraph) == 0x000018, "Wrong size on BED_TaskAsset_GetExtraDefaultInputNodesInBranchGraph");
//static_assert(offsetof(BED_TaskAsset_GetExtraDefaultInputNodesInBranchGraph, OutClasses) == 0x000000, "Member 'BED_TaskAsset_GetExtraDefaultInputNodesInBranchGraph::OutClasses' has a wrong offset!");
//static_assert(offsetof(BED_TaskAsset_GetExtraDefaultInputNodesInBranchGraph, ReturnValue) == 0x000010, "Member 'BED_TaskAsset_GetExtraDefaultInputNodesInBranchGraph::ReturnValue' has a wrong offset!");

// Function b1-Managed.BED_TaskAsset.GetRerouteNodeClassInBranchGraph
// 0x0008 (0x0008 - 0x0000)
struct BED_TaskAsset_GetRerouteNodeClassInBranchGraph final
{
public:
	class UClass*                                 ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
//static_assert(alignof(BED_TaskAsset_GetRerouteNodeClassInBranchGraph) == 0x000008, "Wrong alignment on BED_TaskAsset_GetRerouteNodeClassInBranchGraph");
//static_assert(sizeof(BED_TaskAsset_GetRerouteNodeClassInBranchGraph) == 0x000008, "Wrong size on BED_TaskAsset_GetRerouteNodeClassInBranchGraph");
//static_assert(offsetof(BED_TaskAsset_GetRerouteNodeClassInBranchGraph, ReturnValue) == 0x000000, "Member 'BED_TaskAsset_GetRerouteNodeClassInBranchGraph::ReturnValue' has a wrong offset!");

// Function b1-Managed.BED_TaskAsset.GetStartNodeClassInBranchGraph
// 0x0008 (0x0008 - 0x0000)
struct BED_TaskAsset_GetStartNodeClassInBranchGraph final
{
public:
	class UClass*                                 ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
//static_assert(alignof(BED_TaskAsset_GetStartNodeClassInBranchGraph) == 0x000008, "Wrong alignment on BED_TaskAsset_GetStartNodeClassInBranchGraph");
//static_assert(sizeof(BED_TaskAsset_GetStartNodeClassInBranchGraph) == 0x000008, "Wrong size on BED_TaskAsset_GetStartNodeClassInBranchGraph");
//static_assert(offsetof(BED_TaskAsset_GetStartNodeClassInBranchGraph, ReturnValue) == 0x000000, "Member 'BED_TaskAsset_GetStartNodeClassInBranchGraph::ReturnValue' has a wrong offset!");

// Function b1-Managed.BED_TaskAsset.GetExtraDefaultOutputNodes
// 0x0018 (0x0018 - 0x0000)
struct BED_TaskAsset_GetExtraDefaultOutputNodes final
{
public:
	TArray<class UClass*>                         OutClasses;                                        // 0x0000(0x0010)(Parm, OutParm)
	int32                                         ReturnValue;                                       // 0x0010(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
//static_assert(alignof(BED_TaskAsset_GetExtraDefaultOutputNodes) == 0x000008, "Wrong alignment on BED_TaskAsset_GetExtraDefaultOutputNodes");
//static_assert(sizeof(BED_TaskAsset_GetExtraDefaultOutputNodes) == 0x000018, "Wrong size on BED_TaskAsset_GetExtraDefaultOutputNodes");
//static_assert(offsetof(BED_TaskAsset_GetExtraDefaultOutputNodes, OutClasses) == 0x000000, "Member 'BED_TaskAsset_GetExtraDefaultOutputNodes::OutClasses' has a wrong offset!");
//static_assert(offsetof(BED_TaskAsset_GetExtraDefaultOutputNodes, ReturnValue) == 0x000010, "Member 'BED_TaskAsset_GetExtraDefaultOutputNodes::ReturnValue' has a wrong offset!");

// Function b1-Managed.BED_TaskAsset.GetExtraDefaultInputNodes
// 0x0018 (0x0018 - 0x0000)
struct BED_TaskAsset_GetExtraDefaultInputNodes final
{
public:
	TArray<class UClass*>                         OutClasses;                                        // 0x0000(0x0010)(Parm, OutParm)
	int32                                         ReturnValue;                                       // 0x0010(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
//static_assert(alignof(BED_TaskAsset_GetExtraDefaultInputNodes) == 0x000008, "Wrong alignment on BED_TaskAsset_GetExtraDefaultInputNodes");
//static_assert(sizeof(BED_TaskAsset_GetExtraDefaultInputNodes) == 0x000018, "Wrong size on BED_TaskAsset_GetExtraDefaultInputNodes");
//static_assert(offsetof(BED_TaskAsset_GetExtraDefaultInputNodes, OutClasses) == 0x000000, "Member 'BED_TaskAsset_GetExtraDefaultInputNodes::OutClasses' has a wrong offset!");
//static_assert(offsetof(BED_TaskAsset_GetExtraDefaultInputNodes, ReturnValue) == 0x000010, "Member 'BED_TaskAsset_GetExtraDefaultInputNodes::ReturnValue' has a wrong offset!");

// Function b1-Managed.BED_TaskAsset.GetRerouteNodeClass
// 0x0008 (0x0008 - 0x0000)
struct BED_TaskAsset_GetRerouteNodeClass final
{
public:
	class UClass*                                 ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
//static_assert(alignof(BED_TaskAsset_GetRerouteNodeClass) == 0x000008, "Wrong alignment on BED_TaskAsset_GetRerouteNodeClass");
//static_assert(sizeof(BED_TaskAsset_GetRerouteNodeClass) == 0x000008, "Wrong size on BED_TaskAsset_GetRerouteNodeClass");
//static_assert(offsetof(BED_TaskAsset_GetRerouteNodeClass, ReturnValue) == 0x000000, "Member 'BED_TaskAsset_GetRerouteNodeClass::ReturnValue' has a wrong offset!");

// Function b1-Managed.BED_TaskAsset.GetActorGuidOptions
// 0x0028 (0x0028 - 0x0000)
struct BED_TaskAsset_GetActorGuidOptions final
{
public:
	class FString                                 PropertyName;                                      // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash)
	TArray<struct FActorGuidOption>               OutOptions;                                        // 0x0010(0x0010)(Parm, OutParm)
	int32                                         ReturnValue;                                       // 0x0020(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
//static_assert(alignof(BED_TaskAsset_GetActorGuidOptions) == 0x000008, "Wrong alignment on BED_TaskAsset_GetActorGuidOptions");
//static_assert(sizeof(BED_TaskAsset_GetActorGuidOptions) == 0x000028, "Wrong size on BED_TaskAsset_GetActorGuidOptions");
//static_assert(offsetof(BED_TaskAsset_GetActorGuidOptions, PropertyName) == 0x000000, "Member 'BED_TaskAsset_GetActorGuidOptions::PropertyName' has a wrong offset!");
//static_assert(offsetof(BED_TaskAsset_GetActorGuidOptions, OutOptions) == 0x000010, "Member 'BED_TaskAsset_GetActorGuidOptions::OutOptions' has a wrong offset!");
//static_assert(offsetof(BED_TaskAsset_GetActorGuidOptions, ReturnValue) == 0x000020, "Member 'BED_TaskAsset_GetActorGuidOptions::ReturnValue' has a wrong offset!");

// Function b1-Managed.BED_TaskAsset.GetStartNodeClass
// 0x0008 (0x0008 - 0x0000)
struct BED_TaskAsset_GetStartNodeClass final
{
public:
	class UClass*                                 ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
//static_assert(alignof(BED_TaskAsset_GetStartNodeClass) == 0x000008, "Wrong alignment on BED_TaskAsset_GetStartNodeClass");
//static_assert(sizeof(BED_TaskAsset_GetStartNodeClass) == 0x000008, "Wrong size on BED_TaskAsset_GetStartNodeClass");
//static_assert(offsetof(BED_TaskAsset_GetStartNodeClass, ReturnValue) == 0x000000, "Member 'BED_TaskAsset_GetStartNodeClass::ReturnValue' has a wrong offset!");

// Function b1-Managed.BED_TaskAsset.IsEditorOnlyCS
// 0x0001 (0x0001 - 0x0000)
struct BED_TaskAsset_IsEditorOnlyCS final
{
public:
	uint8                                         ReturnValue : 1;                                   // 0x0000(0x0001)(BitIndex: 0x00, PropSize: 0x0001 (Parm, OutParm, ReturnParm, NoDestructor, HasGetValueTypeHash))
};
//static_assert(alignof(BED_TaskAsset_IsEditorOnlyCS) == 0x000001, "Wrong alignment on BED_TaskAsset_IsEditorOnlyCS");
//static_assert(sizeof(BED_TaskAsset_IsEditorOnlyCS) == 0x000001, "Wrong size on BED_TaskAsset_IsEditorOnlyCS");

// Function b1-Managed.BED_TaskAsset.GetViewType
// 0x0001 (0x0001 - 0x0000)
struct BED_TaskAsset_GetViewType final
{
public:
	ECalliopeViewType                             ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
//static_assert(alignof(BED_TaskAsset_GetViewType) == 0x000001, "Wrong alignment on BED_TaskAsset_GetViewType");
//static_assert(sizeof(BED_TaskAsset_GetViewType) == 0x000001, "Wrong size on BED_TaskAsset_GetViewType");
//static_assert(offsetof(BED_TaskAsset_GetViewType, ReturnValue) == 0x000000, "Member 'BED_TaskAsset_GetViewType::ReturnValue' has a wrong offset!");

// Function b1-Managed.BGGGameStateStartUpCS.ReceiveEndPlay
// 0x0001 (0x0001 - 0x0000)
struct BGGGameStateStartUpCS_ReceiveEndPlay final
{
public:
	EEndPlayReason                                EndPlayReason;                                     // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
//static_assert(alignof(BGGGameStateStartUpCS_ReceiveEndPlay) == 0x000001, "Wrong alignment on BGGGameStateStartUpCS_ReceiveEndPlay");
//static_assert(sizeof(BGGGameStateStartUpCS_ReceiveEndPlay) == 0x000001, "Wrong size on BGGGameStateStartUpCS_ReceiveEndPlay");
//static_assert(offsetof(BGGGameStateStartUpCS_ReceiveEndPlay, EndPlayReason) == 0x000000, "Member 'BGGGameStateStartUpCS_ReceiveEndPlay::EndPlayReason' has a wrong offset!");

// Function b1-Managed.BGUFuncLibGMCS.TestReleaseECSWorldObjRef
// 0x0008 (0x0008 - 0x0000)
struct BGUFuncLibGMCS_TestReleaseECSWorldObjRef final
{
public:
	class ABGUCharacterCS*                        Chr;                                               // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
//static_assert(alignof(BGUFuncLibGMCS_TestReleaseECSWorldObjRef) == 0x000008, "Wrong alignment on BGUFuncLibGMCS_TestReleaseECSWorldObjRef");
//static_assert(sizeof(BGUFuncLibGMCS_TestReleaseECSWorldObjRef) == 0x000008, "Wrong size on BGUFuncLibGMCS_TestReleaseECSWorldObjRef");
//static_assert(offsetof(BGUFuncLibGMCS_TestReleaseECSWorldObjRef, Chr) == 0x000000, "Member 'BGUFuncLibGMCS_TestReleaseECSWorldObjRef::Chr' has a wrong offset!");

// Function b1-Managed.BGUFuncLibGMCS.TestDestroyECSWorldObj
// 0x0008 (0x0008 - 0x0000)
struct BGUFuncLibGMCS_TestDestroyECSWorldObj final
{
public:
	class ABGUCharacterCS*                        Chr;                                               // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
//static_assert(alignof(BGUFuncLibGMCS_TestDestroyECSWorldObj) == 0x000008, "Wrong alignment on BGUFuncLibGMCS_TestDestroyECSWorldObj");
//static_assert(sizeof(BGUFuncLibGMCS_TestDestroyECSWorldObj) == 0x000008, "Wrong size on BGUFuncLibGMCS_TestDestroyECSWorldObj");
//static_assert(offsetof(BGUFuncLibGMCS_TestDestroyECSWorldObj, Chr) == 0x000000, "Member 'BGUFuncLibGMCS_TestDestroyECSWorldObj::Chr' has a wrong offset!");

// Function b1-Managed.BGUFuncLibGMCS.PrintTestECSWorldObj
// 0x0008 (0x0008 - 0x0000)
struct BGUFuncLibGMCS_PrintTestECSWorldObj final
{
public:
	class ABGUCharacterCS*                        Chr;                                               // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
//static_assert(alignof(BGUFuncLibGMCS_PrintTestECSWorldObj) == 0x000008, "Wrong alignment on BGUFuncLibGMCS_PrintTestECSWorldObj");
//static_assert(sizeof(BGUFuncLibGMCS_PrintTestECSWorldObj) == 0x000008, "Wrong size on BGUFuncLibGMCS_PrintTestECSWorldObj");
//static_assert(offsetof(BGUFuncLibGMCS_PrintTestECSWorldObj, Chr) == 0x000000, "Member 'BGUFuncLibGMCS_PrintTestECSWorldObj::Chr' has a wrong offset!");

// Function b1-Managed.BGUFuncLibGMCS.IsShenZhenDebug
// 0x0001 (0x0001 - 0x0000)
struct BGUFuncLibGMCS_IsShenZhenDebug final
{
public:
	uint8                                         ReturnValue : 1;                                   // 0x0000(0x0001)(BitIndex: 0x00, PropSize: 0x0001 (Parm, OutParm, ReturnParm, NoDestructor, HasGetValueTypeHash))
};
//static_assert(alignof(BGUFuncLibGMCS_IsShenZhenDebug) == 0x000001, "Wrong alignment on BGUFuncLibGMCS_IsShenZhenDebug");
//static_assert(sizeof(BGUFuncLibGMCS_IsShenZhenDebug) == 0x000001, "Wrong size on BGUFuncLibGMCS_IsShenZhenDebug");

// Function b1-Managed.BGUFuncLibGMCS.TestECSWorldObj
// 0x0008 (0x0008 - 0x0000)
struct BGUFuncLibGMCS_TestECSWorldObj final
{
public:
	class ABGUCharacterCS*                        Chr;                                               // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
//static_assert(alignof(BGUFuncLibGMCS_TestECSWorldObj) == 0x000008, "Wrong alignment on BGUFuncLibGMCS_TestECSWorldObj");
//static_assert(sizeof(BGUFuncLibGMCS_TestECSWorldObj) == 0x000008, "Wrong size on BGUFuncLibGMCS_TestECSWorldObj");
//static_assert(offsetof(BGUFuncLibGMCS_TestECSWorldObj, Chr) == 0x000000, "Member 'BGUFuncLibGMCS_TestECSWorldObj::Chr' has a wrong offset!");

// Function b1-Managed.BGUFuncLibWXLogin.QywxLoginSuccess
// 0x0018 (0x0018 - 0x0000)
struct BGUFuncLibWXLogin_QywxLoginSuccess final
{
public:
	class UObject*                                WorldCtx;                                          // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	TArray<class FString>                         Params_0;                                          // 0x0008(0x0010)(Parm)
};
//static_assert(alignof(BGUFuncLibWXLogin_QywxLoginSuccess) == 0x000008, "Wrong alignment on BGUFuncLibWXLogin_QywxLoginSuccess");
//static_assert(sizeof(BGUFuncLibWXLogin_QywxLoginSuccess) == 0x000018, "Wrong size on BGUFuncLibWXLogin_QywxLoginSuccess");
//static_assert(offsetof(BGUFuncLibWXLogin_QywxLoginSuccess, WorldCtx) == 0x000000, "Member 'BGUFuncLibWXLogin_QywxLoginSuccess::WorldCtx' has a wrong offset!");
//static_assert(offsetof(BGUFuncLibWXLogin_QywxLoginSuccess, Params_0) == 0x000008, "Member 'BGUFuncLibWXLogin_QywxLoginSuccess::Params_0' has a wrong offset!");

// Function b1-Managed.BGUFuncLibWXLogin.WriteLoginCookie
// 0x0020 (0x0020 - 0x0000)
struct BGUFuncLibWXLogin_WriteLoginCookie final
{
public:
	class UObject*                                WorldCtx;                                          // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class FString                                 Val;                                               // 0x0008(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash)
	int32                                         ReturnValue;                                       // 0x0018(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
//static_assert(alignof(BGUFuncLibWXLogin_WriteLoginCookie) == 0x000008, "Wrong alignment on BGUFuncLibWXLogin_WriteLoginCookie");
//static_assert(sizeof(BGUFuncLibWXLogin_WriteLoginCookie) == 0x000020, "Wrong size on BGUFuncLibWXLogin_WriteLoginCookie");
//static_assert(offsetof(BGUFuncLibWXLogin_WriteLoginCookie, WorldCtx) == 0x000000, "Member 'BGUFuncLibWXLogin_WriteLoginCookie::WorldCtx' has a wrong offset!");
//static_assert(offsetof(BGUFuncLibWXLogin_WriteLoginCookie, Val) == 0x000008, "Member 'BGUFuncLibWXLogin_WriteLoginCookie::Val' has a wrong offset!");
//static_assert(offsetof(BGUFuncLibWXLogin_WriteLoginCookie, ReturnValue) == 0x000018, "Member 'BGUFuncLibWXLogin_WriteLoginCookie::ReturnValue' has a wrong offset!");

// Function b1-Managed.BGUFuncLibWXLogin.ReadLoginCookie
// 0x0018 (0x0018 - 0x0000)
struct BGUFuncLibWXLogin_ReadLoginCookie final
{
public:
	class UObject*                                WorldCtx;                                          // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class FString                                 ReturnValue;                                       // 0x0008(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash)
};
//static_assert(alignof(BGUFuncLibWXLogin_ReadLoginCookie) == 0x000008, "Wrong alignment on BGUFuncLibWXLogin_ReadLoginCookie");
//static_assert(sizeof(BGUFuncLibWXLogin_ReadLoginCookie) == 0x000018, "Wrong size on BGUFuncLibWXLogin_ReadLoginCookie");
//static_assert(offsetof(BGUFuncLibWXLogin_ReadLoginCookie, WorldCtx) == 0x000000, "Member 'BGUFuncLibWXLogin_ReadLoginCookie::WorldCtx' has a wrong offset!");
//static_assert(offsetof(BGUFuncLibWXLogin_ReadLoginCookie, ReturnValue) == 0x000008, "Member 'BGUFuncLibWXLogin_ReadLoginCookie::ReturnValue' has a wrong offset!");

// Function b1-Managed.BGUFuncLibWXLogin.SaveUserInfo
// 0x0020 (0x0020 - 0x0000)
struct BGUFuncLibWXLogin_SaveUserInfo final
{
public:
	class UObject*                                WorldCtx;                                          // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class FString                                 Val;                                               // 0x0008(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash)
	int32                                         ReturnValue;                                       // 0x0018(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
//static_assert(alignof(BGUFuncLibWXLogin_SaveUserInfo) == 0x000008, "Wrong alignment on BGUFuncLibWXLogin_SaveUserInfo");
//static_assert(sizeof(BGUFuncLibWXLogin_SaveUserInfo) == 0x000020, "Wrong size on BGUFuncLibWXLogin_SaveUserInfo");
//static_assert(offsetof(BGUFuncLibWXLogin_SaveUserInfo, WorldCtx) == 0x000000, "Member 'BGUFuncLibWXLogin_SaveUserInfo::WorldCtx' has a wrong offset!");
//static_assert(offsetof(BGUFuncLibWXLogin_SaveUserInfo, Val) == 0x000008, "Member 'BGUFuncLibWXLogin_SaveUserInfo::Val' has a wrong offset!");
//static_assert(offsetof(BGUFuncLibWXLogin_SaveUserInfo, ReturnValue) == 0x000018, "Member 'BGUFuncLibWXLogin_SaveUserInfo::ReturnValue' has a wrong offset!");

// Function b1-Managed.BGUFuncLibWXLogin.LoadUserInfo
// 0x0018 (0x0018 - 0x0000)
struct BGUFuncLibWXLogin_LoadUserInfo final
{
public:
	class UObject*                                WorldCtx;                                          // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	TArray<class FString>                         ReturnValue;                                       // 0x0008(0x0010)(Parm, OutParm, ReturnParm)
};
//static_assert(alignof(BGUFuncLibWXLogin_LoadUserInfo) == 0x000008, "Wrong alignment on BGUFuncLibWXLogin_LoadUserInfo");
//static_assert(sizeof(BGUFuncLibWXLogin_LoadUserInfo) == 0x000018, "Wrong size on BGUFuncLibWXLogin_LoadUserInfo");
//static_assert(offsetof(BGUFuncLibWXLogin_LoadUserInfo, WorldCtx) == 0x000000, "Member 'BGUFuncLibWXLogin_LoadUserInfo::WorldCtx' has a wrong offset!");
//static_assert(offsetof(BGUFuncLibWXLogin_LoadUserInfo, ReturnValue) == 0x000008, "Member 'BGUFuncLibWXLogin_LoadUserInfo::ReturnValue' has a wrong offset!");

// Function b1-Managed.BGUFuncLibWXLogin.GetIpList
// 0x0018 (0x0018 - 0x0000)
struct BGUFuncLibWXLogin_GetIpList final
{
public:
	class UObject*                                WorldCtx;                                          // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class FString                                 ReturnValue;                                       // 0x0008(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash)
};
//static_assert(alignof(BGUFuncLibWXLogin_GetIpList) == 0x000008, "Wrong alignment on BGUFuncLibWXLogin_GetIpList");
//static_assert(sizeof(BGUFuncLibWXLogin_GetIpList) == 0x000018, "Wrong size on BGUFuncLibWXLogin_GetIpList");
//static_assert(offsetof(BGUFuncLibWXLogin_GetIpList, WorldCtx) == 0x000000, "Member 'BGUFuncLibWXLogin_GetIpList::WorldCtx' has a wrong offset!");
//static_assert(offsetof(BGUFuncLibWXLogin_GetIpList, ReturnValue) == 0x000008, "Member 'BGUFuncLibWXLogin_GetIpList::ReturnValue' has a wrong offset!");

// Function b1-Managed.FOnAkPostEventCallbackWrapper.Callback
// 0x0010 (0x0010 - 0x0000)
struct FOnAkPostEventCallbackWrapper_Callback final
{
public:
	EAkCallbackType                               CallbackType;                                      // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_1[0x7];                                        // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UAkCallbackInfo*                        CallbackInfo;                                      // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
//static_assert(alignof(FOnAkPostEventCallbackWrapper_Callback) == 0x000008, "Wrong alignment on FOnAkPostEventCallbackWrapper_Callback");
//static_assert(sizeof(FOnAkPostEventCallbackWrapper_Callback) == 0x000010, "Wrong size on FOnAkPostEventCallbackWrapper_Callback");
//static_assert(offsetof(FOnAkPostEventCallbackWrapper_Callback, CallbackType) == 0x000000, "Member 'FOnAkPostEventCallbackWrapper_Callback::CallbackType' has a wrong offset!");
//static_assert(offsetof(FOnAkPostEventCallbackWrapper_Callback, CallbackInfo) == 0x000008, "Member 'FOnAkPostEventCallbackWrapper_Callback::CallbackInfo' has a wrong offset!");

// Function b1-Managed.BAN_GSPlayLevelSequence.bIsNativeBranchingPointCS
// 0x0001 (0x0001 - 0x0000)
struct BAN_GSPlayLevelSequence_bIsNativeBranchingPointCS final
{
public:
	uint8                                         ReturnValue : 1;                                   // 0x0000(0x0001)(BitIndex: 0x00, PropSize: 0x0001 (Parm, OutParm, ReturnParm, NoDestructor, HasGetValueTypeHash))
};
//static_assert(alignof(BAN_GSPlayLevelSequence_bIsNativeBranchingPointCS) == 0x000001, "Wrong alignment on BAN_GSPlayLevelSequence_bIsNativeBranchingPointCS");
//static_assert(sizeof(BAN_GSPlayLevelSequence_bIsNativeBranchingPointCS) == 0x000001, "Wrong size on BAN_GSPlayLevelSequence_bIsNativeBranchingPointCS");

// Function b1-Managed.BAN_GSPlayLevelSequence.GSNotifyCS
// 0x0040 (0x0040 - 0x0000)
struct BAN_GSPlayLevelSequence_GSNotifyCS final
{
public:
	struct FUStGSNotifyParam                      NotifyParam;                                       // 0x0000(0x0040)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
//static_assert(alignof(BAN_GSPlayLevelSequence_GSNotifyCS) == 0x000008, "Wrong alignment on BAN_GSPlayLevelSequence_GSNotifyCS");
//static_assert(sizeof(BAN_GSPlayLevelSequence_GSNotifyCS) == 0x000040, "Wrong size on BAN_GSPlayLevelSequence_GSNotifyCS");
//static_assert(offsetof(BAN_GSPlayLevelSequence_GSNotifyCS, NotifyParam) == 0x000000, "Member 'BAN_GSPlayLevelSequence_GSNotifyCS::NotifyParam' has a wrong offset!");

// Function b1-Managed.GSEQC_SummonContext.ProvideActorsSetCS
// 0x0010 (0x0010 - 0x0000)
struct GSEQC_SummonContext_ProvideActorsSetCS final
{
public:
	class UObject*                                QuerierObject;                                     // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class AActor*                                 QuerierActor;                                      // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
//static_assert(alignof(GSEQC_SummonContext_ProvideActorsSetCS) == 0x000008, "Wrong alignment on GSEQC_SummonContext_ProvideActorsSetCS");
//static_assert(sizeof(GSEQC_SummonContext_ProvideActorsSetCS) == 0x000010, "Wrong size on GSEQC_SummonContext_ProvideActorsSetCS");
//static_assert(offsetof(GSEQC_SummonContext_ProvideActorsSetCS, QuerierObject) == 0x000000, "Member 'GSEQC_SummonContext_ProvideActorsSetCS::QuerierObject' has a wrong offset!");
//static_assert(offsetof(GSEQC_SummonContext_ProvideActorsSetCS, QuerierActor) == 0x000008, "Member 'GSEQC_SummonContext_ProvideActorsSetCS::QuerierActor' has a wrong offset!");

// Function b1-Managed.GSRetainerBox.OnViewWidgetSizeChangedEvent
// 0x0010 (0x0010 - 0x0000)
struct GSRetainerBox_OnViewWidgetSizeChangedEvent final
{
public:
	struct FVector2D                              Size;                                              // 0x0000(0x0010)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
//static_assert(alignof(GSRetainerBox_OnViewWidgetSizeChangedEvent) == 0x000008, "Wrong alignment on GSRetainerBox_OnViewWidgetSizeChangedEvent");
//static_assert(sizeof(GSRetainerBox_OnViewWidgetSizeChangedEvent) == 0x000010, "Wrong size on GSRetainerBox_OnViewWidgetSizeChangedEvent");
//static_assert(offsetof(GSRetainerBox_OnViewWidgetSizeChangedEvent, Size) == 0x000000, "Member 'GSRetainerBox_OnViewWidgetSizeChangedEvent::Size' has a wrong offset!");

// Function b1-Managed.BANS_GSSetCurveValueForCamOffset.GSNotifyBeginCS
// 0x0048 (0x0048 - 0x0000)
struct BANS_GSSetCurveValueForCamOffset_GSNotifyBeginCS final
{
public:
	struct FUStGSNotifyParam                      NotifyParam;                                       // 0x0000(0x0040)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
	float                                         TotalDuration;                                     // 0x0040(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
//static_assert(alignof(BANS_GSSetCurveValueForCamOffset_GSNotifyBeginCS) == 0x000008, "Wrong alignment on BANS_GSSetCurveValueForCamOffset_GSNotifyBeginCS");
//static_assert(sizeof(BANS_GSSetCurveValueForCamOffset_GSNotifyBeginCS) == 0x000048, "Wrong size on BANS_GSSetCurveValueForCamOffset_GSNotifyBeginCS");
//static_assert(offsetof(BANS_GSSetCurveValueForCamOffset_GSNotifyBeginCS, NotifyParam) == 0x000000, "Member 'BANS_GSSetCurveValueForCamOffset_GSNotifyBeginCS::NotifyParam' has a wrong offset!");
//static_assert(offsetof(BANS_GSSetCurveValueForCamOffset_GSNotifyBeginCS, TotalDuration) == 0x000040, "Member 'BANS_GSSetCurveValueForCamOffset_GSNotifyBeginCS::TotalDuration' has a wrong offset!");

// Function b1-Managed.BANS_GSSetCurveValueForCamOffset.GSNotifyEndCS
// 0x0040 (0x0040 - 0x0000)
struct BANS_GSSetCurveValueForCamOffset_GSNotifyEndCS final
{
public:
	struct FUStGSNotifyParam                      NotifyParam;                                       // 0x0000(0x0040)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
//static_assert(alignof(BANS_GSSetCurveValueForCamOffset_GSNotifyEndCS) == 0x000008, "Wrong alignment on BANS_GSSetCurveValueForCamOffset_GSNotifyEndCS");
//static_assert(sizeof(BANS_GSSetCurveValueForCamOffset_GSNotifyEndCS) == 0x000040, "Wrong size on BANS_GSSetCurveValueForCamOffset_GSNotifyEndCS");
//static_assert(offsetof(BANS_GSSetCurveValueForCamOffset_GSNotifyEndCS, NotifyParam) == 0x000000, "Member 'BANS_GSSetCurveValueForCamOffset_GSNotifyEndCS::NotifyParam' has a wrong offset!");

// Function b1-Managed.FGSOnAKBStateBeginWrapper.Callback
// 0x0014 (0x0014 - 0x0000)
struct FGSOnAKBStateBeginWrapper_Callback final
{
public:
	class FName                                   BeginStateName;                                    // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class FName                                   EndStateName;                                      // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         IsFromForceSetStateImmediately : 1;                // 0x0010(0x0001)(BitIndex: 0x00, PropSize: 0x0001 (Parm, NoDestructor, HasGetValueTypeHash))
};
//static_assert(alignof(FGSOnAKBStateBeginWrapper_Callback) == 0x000004, "Wrong alignment on FGSOnAKBStateBeginWrapper_Callback");
//static_assert(sizeof(FGSOnAKBStateBeginWrapper_Callback) == 0x000014, "Wrong size on FGSOnAKBStateBeginWrapper_Callback");
//static_assert(offsetof(FGSOnAKBStateBeginWrapper_Callback, BeginStateName) == 0x000000, "Member 'FGSOnAKBStateBeginWrapper_Callback::BeginStateName' has a wrong offset!");
//static_assert(offsetof(FGSOnAKBStateBeginWrapper_Callback, EndStateName) == 0x000008, "Member 'FGSOnAKBStateBeginWrapper_Callback::EndStateName' has a wrong offset!");

// Function b1-Managed.FOnMultiLineEditableTextBoxCommittedEventWrapper.Callback
// 0x0020 (0x0020 - 0x0000)
struct FOnMultiLineEditableTextBoxCommittedEventWrapper_Callback final
{
public:
	class FText                                   Text;                                              // 0x0000(0x0018)(Parm)
	ETextCommit                                   CommitMethod;                                      // 0x0018(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
//static_assert(alignof(FOnMultiLineEditableTextBoxCommittedEventWrapper_Callback) == 0x000008, "Wrong alignment on FOnMultiLineEditableTextBoxCommittedEventWrapper_Callback");
//static_assert(sizeof(FOnMultiLineEditableTextBoxCommittedEventWrapper_Callback) == 0x000020, "Wrong size on FOnMultiLineEditableTextBoxCommittedEventWrapper_Callback");
//static_assert(offsetof(FOnMultiLineEditableTextBoxCommittedEventWrapper_Callback, Text) == 0x000000, "Member 'FOnMultiLineEditableTextBoxCommittedEventWrapper_Callback::Text' has a wrong offset!");
//static_assert(offsetof(FOnMultiLineEditableTextBoxCommittedEventWrapper_Callback, CommitMethod) == 0x000018, "Member 'FOnMultiLineEditableTextBoxCommittedEventWrapper_Callback::CommitMethod' has a wrong offset!");

// Function b1-Managed.BANS_GSComboKeyCache.GSNotifyBeginCS
// 0x0048 (0x0048 - 0x0000)
struct BANS_GSComboKeyCache_GSNotifyBeginCS final
{
public:
	struct FUStGSNotifyParam                      NotifyParam;                                       // 0x0000(0x0040)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
	float                                         TotalDuration;                                     // 0x0040(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
//static_assert(alignof(BANS_GSComboKeyCache_GSNotifyBeginCS) == 0x000008, "Wrong alignment on BANS_GSComboKeyCache_GSNotifyBeginCS");
//static_assert(sizeof(BANS_GSComboKeyCache_GSNotifyBeginCS) == 0x000048, "Wrong size on BANS_GSComboKeyCache_GSNotifyBeginCS");
//static_assert(offsetof(BANS_GSComboKeyCache_GSNotifyBeginCS, NotifyParam) == 0x000000, "Member 'BANS_GSComboKeyCache_GSNotifyBeginCS::NotifyParam' has a wrong offset!");
//static_assert(offsetof(BANS_GSComboKeyCache_GSNotifyBeginCS, TotalDuration) == 0x000040, "Member 'BANS_GSComboKeyCache_GSNotifyBeginCS::TotalDuration' has a wrong offset!");

// Function b1-Managed.BED_ProcessStateNode_ExecutionSequence.CanUserAddOutputInCS
// 0x0001 (0x0001 - 0x0000)
struct BED_ProcessStateNode_ExecutionSequence_CanUserAddOutputInCS final
{
public:
	uint8                                         ReturnValue : 1;                                   // 0x0000(0x0001)(BitIndex: 0x00, PropSize: 0x0001 (Parm, OutParm, ReturnParm, NoDestructor, HasGetValueTypeHash))
};
//static_assert(alignof(BED_ProcessStateNode_ExecutionSequence_CanUserAddOutputInCS) == 0x000001, "Wrong alignment on BED_ProcessStateNode_ExecutionSequence_CanUserAddOutputInCS");
//static_assert(sizeof(BED_ProcessStateNode_ExecutionSequence_CanUserAddOutputInCS) == 0x000001, "Wrong size on BED_ProcessStateNode_ExecutionSequence_CanUserAddOutputInCS");

// Function b1-Managed.BED_BehaviorNode_LogicalOr.CanUserAddInputInCS
// 0x0001 (0x0001 - 0x0000)
struct BED_BehaviorNode_LogicalOr_CanUserAddInputInCS final
{
public:
	uint8                                         ReturnValue : 1;                                   // 0x0000(0x0001)(BitIndex: 0x00, PropSize: 0x0001 (Parm, OutParm, ReturnParm, NoDestructor, HasGetValueTypeHash))
};
//static_assert(alignof(BED_BehaviorNode_LogicalOr_CanUserAddInputInCS) == 0x000001, "Wrong alignment on BED_BehaviorNode_LogicalOr_CanUserAddInputInCS");
//static_assert(sizeof(BED_BehaviorNode_LogicalOr_CanUserAddInputInCS) == 0x000001, "Wrong size on BED_BehaviorNode_LogicalOr_CanUserAddInputInCS");

// Function b1-Managed.BED_BehaviorNode_LogicalOr.IsSupportViewType
// 0x0002 (0x0002 - 0x0000)
struct BED_BehaviorNode_LogicalOr_IsSupportViewType final
{
public:
	ECalliopeViewType                             InViewType;                                        // 0x0000(0x0001)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         ReturnValue : 1;                                   // 0x0001(0x0001)(BitIndex: 0x00, PropSize: 0x0001 (Parm, OutParm, ReturnParm, NoDestructor, HasGetValueTypeHash))
};
//static_assert(alignof(BED_BehaviorNode_LogicalOr_IsSupportViewType) == 0x000001, "Wrong alignment on BED_BehaviorNode_LogicalOr_IsSupportViewType");
//static_assert(sizeof(BED_BehaviorNode_LogicalOr_IsSupportViewType) == 0x000002, "Wrong size on BED_BehaviorNode_LogicalOr_IsSupportViewType");
//static_assert(offsetof(BED_BehaviorNode_LogicalOr_IsSupportViewType, InViewType) == 0x000000, "Member 'BED_BehaviorNode_LogicalOr_IsSupportViewType::InViewType' has a wrong offset!");

// Function b1-Managed.BGWDataAsset_ProjectileSpawnConfig.AboutEffectCaster
// 0x0001 (0x0001 - 0x0000)
struct BGWDataAsset_ProjectileSpawnConfig_AboutEffectCaster final
{
public:
	uint8                                         ReturnValue : 1;                                   // 0x0000(0x0001)(BitIndex: 0x00, PropSize: 0x0001 (Parm, OutParm, ReturnParm, NoDestructor, HasGetValueTypeHash))
};
//static_assert(alignof(BGWDataAsset_ProjectileSpawnConfig_AboutEffectCaster) == 0x000001, "Wrong alignment on BGWDataAsset_ProjectileSpawnConfig_AboutEffectCaster");
//static_assert(sizeof(BGWDataAsset_ProjectileSpawnConfig_AboutEffectCaster) == 0x000001, "Wrong size on BGWDataAsset_ProjectileSpawnConfig_AboutEffectCaster");

// Function b1-Managed.BED_BehaviorNode_DetectUnitOnce.GetNodeDescriptionInCS
// 0x0010 (0x0010 - 0x0000)
struct BED_BehaviorNode_DetectUnitOnce_GetNodeDescriptionInCS final
{
public:
	class FString                                 ReturnValue;                                       // 0x0000(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash)
};
//static_assert(alignof(BED_BehaviorNode_DetectUnitOnce_GetNodeDescriptionInCS) == 0x000008, "Wrong alignment on BED_BehaviorNode_DetectUnitOnce_GetNodeDescriptionInCS");
//static_assert(sizeof(BED_BehaviorNode_DetectUnitOnce_GetNodeDescriptionInCS) == 0x000010, "Wrong size on BED_BehaviorNode_DetectUnitOnce_GetNodeDescriptionInCS");
//static_assert(offsetof(BED_BehaviorNode_DetectUnitOnce_GetNodeDescriptionInCS, ReturnValue) == 0x000000, "Member 'BED_BehaviorNode_DetectUnitOnce_GetNodeDescriptionInCS::ReturnValue' has a wrong offset!");

// Function b1-Managed.BED_BehaviorNode_DetectUnitOnce.IsSupportViewType
// 0x0002 (0x0002 - 0x0000)
struct BED_BehaviorNode_DetectUnitOnce_IsSupportViewType final
{
public:
	ECalliopeViewType                             InViewType;                                        // 0x0000(0x0001)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         ReturnValue : 1;                                   // 0x0001(0x0001)(BitIndex: 0x00, PropSize: 0x0001 (Parm, OutParm, ReturnParm, NoDestructor, HasGetValueTypeHash))
};
//static_assert(alignof(BED_BehaviorNode_DetectUnitOnce_IsSupportViewType) == 0x000001, "Wrong alignment on BED_BehaviorNode_DetectUnitOnce_IsSupportViewType");
//static_assert(sizeof(BED_BehaviorNode_DetectUnitOnce_IsSupportViewType) == 0x000002, "Wrong size on BED_BehaviorNode_DetectUnitOnce_IsSupportViewType");
//static_assert(offsetof(BED_BehaviorNode_DetectUnitOnce_IsSupportViewType, InViewType) == 0x000000, "Member 'BED_BehaviorNode_DetectUnitOnce_IsSupportViewType::InViewType' has a wrong offset!");

// Function b1-Managed.BED_TaskNode_ObserveUnitsDeadWithOrder.PostPropertyChanged
// 0x0020 (0x0020 - 0x0000)
struct BED_TaskNode_ObserveUnitsDeadWithOrder_PostPropertyChanged final
{
public:
	class FString                                 MemberName;                                        // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash)
	class FString                                 PropertyName;                                      // 0x0010(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash)
};
//static_assert(alignof(BED_TaskNode_ObserveUnitsDeadWithOrder_PostPropertyChanged) == 0x000008, "Wrong alignment on BED_TaskNode_ObserveUnitsDeadWithOrder_PostPropertyChanged");
//static_assert(sizeof(BED_TaskNode_ObserveUnitsDeadWithOrder_PostPropertyChanged) == 0x000020, "Wrong size on BED_TaskNode_ObserveUnitsDeadWithOrder_PostPropertyChanged");
//static_assert(offsetof(BED_TaskNode_ObserveUnitsDeadWithOrder_PostPropertyChanged, MemberName) == 0x000000, "Member 'BED_TaskNode_ObserveUnitsDeadWithOrder_PostPropertyChanged::MemberName' has a wrong offset!");
//static_assert(offsetof(BED_TaskNode_ObserveUnitsDeadWithOrder_PostPropertyChanged, PropertyName) == 0x000010, "Member 'BED_TaskNode_ObserveUnitsDeadWithOrder_PostPropertyChanged::PropertyName' has a wrong offset!");

// Function b1-Managed.BED_TaskNode_ObserveUnitsDeadWithOrder.GetNodeDescriptionInCS
// 0x0010 (0x0010 - 0x0000)
struct BED_TaskNode_ObserveUnitsDeadWithOrder_GetNodeDescriptionInCS final
{
public:
	class FString                                 ReturnValue;                                       // 0x0000(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash)
};
//static_assert(alignof(BED_TaskNode_ObserveUnitsDeadWithOrder_GetNodeDescriptionInCS) == 0x000008, "Wrong alignment on BED_TaskNode_ObserveUnitsDeadWithOrder_GetNodeDescriptionInCS");
//static_assert(sizeof(BED_TaskNode_ObserveUnitsDeadWithOrder_GetNodeDescriptionInCS) == 0x000010, "Wrong size on BED_TaskNode_ObserveUnitsDeadWithOrder_GetNodeDescriptionInCS");
//static_assert(offsetof(BED_TaskNode_ObserveUnitsDeadWithOrder_GetNodeDescriptionInCS, ReturnValue) == 0x000000, "Member 'BED_TaskNode_ObserveUnitsDeadWithOrder_GetNodeDescriptionInCS::ReturnValue' has a wrong offset!");

// Function b1-Managed.BAN_GSPlayBeamFX.GetSoftReferences
// 0x0010 (0x0010 - 0x0000)
struct BAN_GSPlayBeamFX_GetSoftReferences final
{
public:
	TArray<struct FSoftObjectPath>                ReturnValue;                                       // 0x0000(0x0010)(Parm, OutParm, ReturnParm)
};
//static_assert(alignof(BAN_GSPlayBeamFX_GetSoftReferences) == 0x000008, "Wrong alignment on BAN_GSPlayBeamFX_GetSoftReferences");
//static_assert(sizeof(BAN_GSPlayBeamFX_GetSoftReferences) == 0x000010, "Wrong size on BAN_GSPlayBeamFX_GetSoftReferences");
//static_assert(offsetof(BAN_GSPlayBeamFX_GetSoftReferences, ReturnValue) == 0x000000, "Member 'BAN_GSPlayBeamFX_GetSoftReferences::ReturnValue' has a wrong offset!");

// Function b1-Managed.BAN_GSPlayBeamFX.GSNotifyCS
// 0x0040 (0x0040 - 0x0000)
struct BAN_GSPlayBeamFX_GSNotifyCS final
{
public:
	struct FUStGSNotifyParam                      NotifyParam;                                       // 0x0000(0x0040)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
//static_assert(alignof(BAN_GSPlayBeamFX_GSNotifyCS) == 0x000008, "Wrong alignment on BAN_GSPlayBeamFX_GSNotifyCS");
//static_assert(sizeof(BAN_GSPlayBeamFX_GSNotifyCS) == 0x000040, "Wrong size on BAN_GSPlayBeamFX_GSNotifyCS");
//static_assert(offsetof(BAN_GSPlayBeamFX_GSNotifyCS, NotifyParam) == 0x000000, "Member 'BAN_GSPlayBeamFX_GSNotifyCS::NotifyParam' has a wrong offset!");

// Function b1-Managed.BED_MovieNode_PerformerTriggerSkillEffect.GetNodeDescriptionInCS
// 0x0010 (0x0010 - 0x0000)
struct BED_MovieNode_PerformerTriggerSkillEffect_GetNodeDescriptionInCS final
{
public:
	class FString                                 ReturnValue;                                       // 0x0000(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash)
};
//static_assert(alignof(BED_MovieNode_PerformerTriggerSkillEffect_GetNodeDescriptionInCS) == 0x000008, "Wrong alignment on BED_MovieNode_PerformerTriggerSkillEffect_GetNodeDescriptionInCS");
//static_assert(sizeof(BED_MovieNode_PerformerTriggerSkillEffect_GetNodeDescriptionInCS) == 0x000010, "Wrong size on BED_MovieNode_PerformerTriggerSkillEffect_GetNodeDescriptionInCS");
//static_assert(offsetof(BED_MovieNode_PerformerTriggerSkillEffect_GetNodeDescriptionInCS, ReturnValue) == 0x000000, "Member 'BED_MovieNode_PerformerTriggerSkillEffect_GetNodeDescriptionInCS::ReturnValue' has a wrong offset!");

// Function b1-Managed.BED_MovieAsset.GetExtraDefaultOutputNodesInBranchGraph
// 0x0018 (0x0018 - 0x0000)
struct BED_MovieAsset_GetExtraDefaultOutputNodesInBranchGraph final
{
public:
	TArray<class UClass*>                         OutClasses;                                        // 0x0000(0x0010)(Parm, OutParm)
	int32                                         ReturnValue;                                       // 0x0010(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
//static_assert(alignof(BED_MovieAsset_GetExtraDefaultOutputNodesInBranchGraph) == 0x000008, "Wrong alignment on BED_MovieAsset_GetExtraDefaultOutputNodesInBranchGraph");
//static_assert(sizeof(BED_MovieAsset_GetExtraDefaultOutputNodesInBranchGraph) == 0x000018, "Wrong size on BED_MovieAsset_GetExtraDefaultOutputNodesInBranchGraph");
//static_assert(offsetof(BED_MovieAsset_GetExtraDefaultOutputNodesInBranchGraph, OutClasses) == 0x000000, "Member 'BED_MovieAsset_GetExtraDefaultOutputNodesInBranchGraph::OutClasses' has a wrong offset!");
//static_assert(offsetof(BED_MovieAsset_GetExtraDefaultOutputNodesInBranchGraph, ReturnValue) == 0x000010, "Member 'BED_MovieAsset_GetExtraDefaultOutputNodesInBranchGraph::ReturnValue' has a wrong offset!");

// Function b1-Managed.BED_MovieAsset.GetExtraDefaultInputNodesInBranchGraph
// 0x0018 (0x0018 - 0x0000)
struct BED_MovieAsset_GetExtraDefaultInputNodesInBranchGraph final
{
public:
	TArray<class UClass*>                         OutClasses;                                        // 0x0000(0x0010)(Parm, OutParm)
	int32                                         ReturnValue;                                       // 0x0010(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
//static_assert(alignof(BED_MovieAsset_GetExtraDefaultInputNodesInBranchGraph) == 0x000008, "Wrong alignment on BED_MovieAsset_GetExtraDefaultInputNodesInBranchGraph");
//static_assert(sizeof(BED_MovieAsset_GetExtraDefaultInputNodesInBranchGraph) == 0x000018, "Wrong size on BED_MovieAsset_GetExtraDefaultInputNodesInBranchGraph");
//static_assert(offsetof(BED_MovieAsset_GetExtraDefaultInputNodesInBranchGraph, OutClasses) == 0x000000, "Member 'BED_MovieAsset_GetExtraDefaultInputNodesInBranchGraph::OutClasses' has a wrong offset!");
//static_assert(offsetof(BED_MovieAsset_GetExtraDefaultInputNodesInBranchGraph, ReturnValue) == 0x000010, "Member 'BED_MovieAsset_GetExtraDefaultInputNodesInBranchGraph::ReturnValue' has a wrong offset!");

// Function b1-Managed.BED_MovieAsset.GetRerouteNodeClassInBranchGraph
// 0x0008 (0x0008 - 0x0000)
struct BED_MovieAsset_GetRerouteNodeClassInBranchGraph final
{
public:
	class UClass*                                 ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
//static_assert(alignof(BED_MovieAsset_GetRerouteNodeClassInBranchGraph) == 0x000008, "Wrong alignment on BED_MovieAsset_GetRerouteNodeClassInBranchGraph");
//static_assert(sizeof(BED_MovieAsset_GetRerouteNodeClassInBranchGraph) == 0x000008, "Wrong size on BED_MovieAsset_GetRerouteNodeClassInBranchGraph");
//static_assert(offsetof(BED_MovieAsset_GetRerouteNodeClassInBranchGraph, ReturnValue) == 0x000000, "Member 'BED_MovieAsset_GetRerouteNodeClassInBranchGraph::ReturnValue' has a wrong offset!");

// Function b1-Managed.BED_MovieAsset.GetStartNodeClassInBranchGraph
// 0x0008 (0x0008 - 0x0000)
struct BED_MovieAsset_GetStartNodeClassInBranchGraph final
{
public:
	class UClass*                                 ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
//static_assert(alignof(BED_MovieAsset_GetStartNodeClassInBranchGraph) == 0x000008, "Wrong alignment on BED_MovieAsset_GetStartNodeClassInBranchGraph");
//static_assert(sizeof(BED_MovieAsset_GetStartNodeClassInBranchGraph) == 0x000008, "Wrong size on BED_MovieAsset_GetStartNodeClassInBranchGraph");
//static_assert(offsetof(BED_MovieAsset_GetStartNodeClassInBranchGraph, ReturnValue) == 0x000000, "Member 'BED_MovieAsset_GetStartNodeClassInBranchGraph::ReturnValue' has a wrong offset!");

// Function b1-Managed.BED_MovieAsset.GetExtraDefaultOutputNodes
// 0x0018 (0x0018 - 0x0000)
struct BED_MovieAsset_GetExtraDefaultOutputNodes final
{
public:
	TArray<class UClass*>                         OutClasses;                                        // 0x0000(0x0010)(Parm, OutParm)
	int32                                         ReturnValue;                                       // 0x0010(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
//static_assert(alignof(BED_MovieAsset_GetExtraDefaultOutputNodes) == 0x000008, "Wrong alignment on BED_MovieAsset_GetExtraDefaultOutputNodes");
//static_assert(sizeof(BED_MovieAsset_GetExtraDefaultOutputNodes) == 0x000018, "Wrong size on BED_MovieAsset_GetExtraDefaultOutputNodes");
//static_assert(offsetof(BED_MovieAsset_GetExtraDefaultOutputNodes, OutClasses) == 0x000000, "Member 'BED_MovieAsset_GetExtraDefaultOutputNodes::OutClasses' has a wrong offset!");
//static_assert(offsetof(BED_MovieAsset_GetExtraDefaultOutputNodes, ReturnValue) == 0x000010, "Member 'BED_MovieAsset_GetExtraDefaultOutputNodes::ReturnValue' has a wrong offset!");

// Function b1-Managed.BED_MovieAsset.GetExtraDefaultInputNodes
// 0x0018 (0x0018 - 0x0000)
struct BED_MovieAsset_GetExtraDefaultInputNodes final
{
public:
	TArray<class UClass*>                         OutClasses;                                        // 0x0000(0x0010)(Parm, OutParm)
	int32                                         ReturnValue;                                       // 0x0010(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
//static_assert(alignof(BED_MovieAsset_GetExtraDefaultInputNodes) == 0x000008, "Wrong alignment on BED_MovieAsset_GetExtraDefaultInputNodes");
//static_assert(sizeof(BED_MovieAsset_GetExtraDefaultInputNodes) == 0x000018, "Wrong size on BED_MovieAsset_GetExtraDefaultInputNodes");
//static_assert(offsetof(BED_MovieAsset_GetExtraDefaultInputNodes, OutClasses) == 0x000000, "Member 'BED_MovieAsset_GetExtraDefaultInputNodes::OutClasses' has a wrong offset!");
//static_assert(offsetof(BED_MovieAsset_GetExtraDefaultInputNodes, ReturnValue) == 0x000010, "Member 'BED_MovieAsset_GetExtraDefaultInputNodes::ReturnValue' has a wrong offset!");

// Function b1-Managed.BED_MovieAsset.GetRerouteNodeClass
// 0x0008 (0x0008 - 0x0000)
struct BED_MovieAsset_GetRerouteNodeClass final
{
public:
	class UClass*                                 ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
//static_assert(alignof(BED_MovieAsset_GetRerouteNodeClass) == 0x000008, "Wrong alignment on BED_MovieAsset_GetRerouteNodeClass");
//static_assert(sizeof(BED_MovieAsset_GetRerouteNodeClass) == 0x000008, "Wrong size on BED_MovieAsset_GetRerouteNodeClass");
//static_assert(offsetof(BED_MovieAsset_GetRerouteNodeClass, ReturnValue) == 0x000000, "Member 'BED_MovieAsset_GetRerouteNodeClass::ReturnValue' has a wrong offset!");

// Function b1-Managed.BED_MovieAsset.GetStartNodeClass
// 0x0008 (0x0008 - 0x0000)
struct BED_MovieAsset_GetStartNodeClass final
{
public:
	class UClass*                                 ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
//static_assert(alignof(BED_MovieAsset_GetStartNodeClass) == 0x000008, "Wrong alignment on BED_MovieAsset_GetStartNodeClass");
//static_assert(sizeof(BED_MovieAsset_GetStartNodeClass) == 0x000008, "Wrong size on BED_MovieAsset_GetStartNodeClass");
//static_assert(offsetof(BED_MovieAsset_GetStartNodeClass, ReturnValue) == 0x000000, "Member 'BED_MovieAsset_GetStartNodeClass::ReturnValue' has a wrong offset!");

// Function b1-Managed.BED_MovieAsset.GetViewType
// 0x0001 (0x0001 - 0x0000)
struct BED_MovieAsset_GetViewType final
{
public:
	ECalliopeViewType                             ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
//static_assert(alignof(BED_MovieAsset_GetViewType) == 0x000001, "Wrong alignment on BED_MovieAsset_GetViewType");
//static_assert(sizeof(BED_MovieAsset_GetViewType) == 0x000001, "Wrong size on BED_MovieAsset_GetViewType");
//static_assert(offsetof(BED_MovieAsset_GetViewType, ReturnValue) == 0x000000, "Member 'BED_MovieAsset_GetViewType::ReturnValue' has a wrong offset!");

// Function b1-Managed.BED_ComboAsset.GetExtraDefaultOutputNodesInBranchGraph
// 0x0018 (0x0018 - 0x0000)
struct BED_ComboAsset_GetExtraDefaultOutputNodesInBranchGraph final
{
public:
	TArray<class UClass*>                         OutClasses;                                        // 0x0000(0x0010)(Parm, OutParm)
	int32                                         ReturnValue;                                       // 0x0010(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
//static_assert(alignof(BED_ComboAsset_GetExtraDefaultOutputNodesInBranchGraph) == 0x000008, "Wrong alignment on BED_ComboAsset_GetExtraDefaultOutputNodesInBranchGraph");
//static_assert(sizeof(BED_ComboAsset_GetExtraDefaultOutputNodesInBranchGraph) == 0x000018, "Wrong size on BED_ComboAsset_GetExtraDefaultOutputNodesInBranchGraph");
//static_assert(offsetof(BED_ComboAsset_GetExtraDefaultOutputNodesInBranchGraph, OutClasses) == 0x000000, "Member 'BED_ComboAsset_GetExtraDefaultOutputNodesInBranchGraph::OutClasses' has a wrong offset!");
//static_assert(offsetof(BED_ComboAsset_GetExtraDefaultOutputNodesInBranchGraph, ReturnValue) == 0x000010, "Member 'BED_ComboAsset_GetExtraDefaultOutputNodesInBranchGraph::ReturnValue' has a wrong offset!");

// Function b1-Managed.BED_ComboAsset.GetExtraDefaultInputNodesInBranchGraph
// 0x0018 (0x0018 - 0x0000)
struct BED_ComboAsset_GetExtraDefaultInputNodesInBranchGraph final
{
public:
	TArray<class UClass*>                         OutClasses;                                        // 0x0000(0x0010)(Parm, OutParm)
	int32                                         ReturnValue;                                       // 0x0010(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
//static_assert(alignof(BED_ComboAsset_GetExtraDefaultInputNodesInBranchGraph) == 0x000008, "Wrong alignment on BED_ComboAsset_GetExtraDefaultInputNodesInBranchGraph");
//static_assert(sizeof(BED_ComboAsset_GetExtraDefaultInputNodesInBranchGraph) == 0x000018, "Wrong size on BED_ComboAsset_GetExtraDefaultInputNodesInBranchGraph");
//static_assert(offsetof(BED_ComboAsset_GetExtraDefaultInputNodesInBranchGraph, OutClasses) == 0x000000, "Member 'BED_ComboAsset_GetExtraDefaultInputNodesInBranchGraph::OutClasses' has a wrong offset!");
//static_assert(offsetof(BED_ComboAsset_GetExtraDefaultInputNodesInBranchGraph, ReturnValue) == 0x000010, "Member 'BED_ComboAsset_GetExtraDefaultInputNodesInBranchGraph::ReturnValue' has a wrong offset!");

// Function b1-Managed.BED_ComboAsset.GetRerouteNodeClassInBranchGraph
// 0x0008 (0x0008 - 0x0000)
struct BED_ComboAsset_GetRerouteNodeClassInBranchGraph final
{
public:
	class UClass*                                 ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
//static_assert(alignof(BED_ComboAsset_GetRerouteNodeClassInBranchGraph) == 0x000008, "Wrong alignment on BED_ComboAsset_GetRerouteNodeClassInBranchGraph");
//static_assert(sizeof(BED_ComboAsset_GetRerouteNodeClassInBranchGraph) == 0x000008, "Wrong size on BED_ComboAsset_GetRerouteNodeClassInBranchGraph");
//static_assert(offsetof(BED_ComboAsset_GetRerouteNodeClassInBranchGraph, ReturnValue) == 0x000000, "Member 'BED_ComboAsset_GetRerouteNodeClassInBranchGraph::ReturnValue' has a wrong offset!");

// Function b1-Managed.BED_ComboAsset.GetStartNodeClassInBranchGraph
// 0x0008 (0x0008 - 0x0000)
struct BED_ComboAsset_GetStartNodeClassInBranchGraph final
{
public:
	class UClass*                                 ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
//static_assert(alignof(BED_ComboAsset_GetStartNodeClassInBranchGraph) == 0x000008, "Wrong alignment on BED_ComboAsset_GetStartNodeClassInBranchGraph");
//static_assert(sizeof(BED_ComboAsset_GetStartNodeClassInBranchGraph) == 0x000008, "Wrong size on BED_ComboAsset_GetStartNodeClassInBranchGraph");
//static_assert(offsetof(BED_ComboAsset_GetStartNodeClassInBranchGraph, ReturnValue) == 0x000000, "Member 'BED_ComboAsset_GetStartNodeClassInBranchGraph::ReturnValue' has a wrong offset!");

// Function b1-Managed.BED_ComboAsset.GetExtraDefaultOutputNodes
// 0x0018 (0x0018 - 0x0000)
struct BED_ComboAsset_GetExtraDefaultOutputNodes final
{
public:
	TArray<class UClass*>                         OutClasses;                                        // 0x0000(0x0010)(Parm, OutParm)
	int32                                         ReturnValue;                                       // 0x0010(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
//static_assert(alignof(BED_ComboAsset_GetExtraDefaultOutputNodes) == 0x000008, "Wrong alignment on BED_ComboAsset_GetExtraDefaultOutputNodes");
//static_assert(sizeof(BED_ComboAsset_GetExtraDefaultOutputNodes) == 0x000018, "Wrong size on BED_ComboAsset_GetExtraDefaultOutputNodes");
//static_assert(offsetof(BED_ComboAsset_GetExtraDefaultOutputNodes, OutClasses) == 0x000000, "Member 'BED_ComboAsset_GetExtraDefaultOutputNodes::OutClasses' has a wrong offset!");
//static_assert(offsetof(BED_ComboAsset_GetExtraDefaultOutputNodes, ReturnValue) == 0x000010, "Member 'BED_ComboAsset_GetExtraDefaultOutputNodes::ReturnValue' has a wrong offset!");

// Function b1-Managed.BED_ComboAsset.GetExtraDefaultInputNodes
// 0x0018 (0x0018 - 0x0000)
struct BED_ComboAsset_GetExtraDefaultInputNodes final
{
public:
	TArray<class UClass*>                         OutClasses;                                        // 0x0000(0x0010)(Parm, OutParm)
	int32                                         ReturnValue;                                       // 0x0010(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
//static_assert(alignof(BED_ComboAsset_GetExtraDefaultInputNodes) == 0x000008, "Wrong alignment on BED_ComboAsset_GetExtraDefaultInputNodes");
//static_assert(sizeof(BED_ComboAsset_GetExtraDefaultInputNodes) == 0x000018, "Wrong size on BED_ComboAsset_GetExtraDefaultInputNodes");
//static_assert(offsetof(BED_ComboAsset_GetExtraDefaultInputNodes, OutClasses) == 0x000000, "Member 'BED_ComboAsset_GetExtraDefaultInputNodes::OutClasses' has a wrong offset!");
//static_assert(offsetof(BED_ComboAsset_GetExtraDefaultInputNodes, ReturnValue) == 0x000010, "Member 'BED_ComboAsset_GetExtraDefaultInputNodes::ReturnValue' has a wrong offset!");

// Function b1-Managed.BED_ComboAsset.GetRerouteNodeClass
// 0x0008 (0x0008 - 0x0000)
struct BED_ComboAsset_GetRerouteNodeClass final
{
public:
	class UClass*                                 ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
//static_assert(alignof(BED_ComboAsset_GetRerouteNodeClass) == 0x000008, "Wrong alignment on BED_ComboAsset_GetRerouteNodeClass");
//static_assert(sizeof(BED_ComboAsset_GetRerouteNodeClass) == 0x000008, "Wrong size on BED_ComboAsset_GetRerouteNodeClass");
//static_assert(offsetof(BED_ComboAsset_GetRerouteNodeClass, ReturnValue) == 0x000000, "Member 'BED_ComboAsset_GetRerouteNodeClass::ReturnValue' has a wrong offset!");

// Function b1-Managed.BED_ComboAsset.GetStartNodeClass
// 0x0008 (0x0008 - 0x0000)
struct BED_ComboAsset_GetStartNodeClass final
{
public:
	class UClass*                                 ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
//static_assert(alignof(BED_ComboAsset_GetStartNodeClass) == 0x000008, "Wrong alignment on BED_ComboAsset_GetStartNodeClass");
//static_assert(sizeof(BED_ComboAsset_GetStartNodeClass) == 0x000008, "Wrong size on BED_ComboAsset_GetStartNodeClass");
//static_assert(offsetof(BED_ComboAsset_GetStartNodeClass, ReturnValue) == 0x000000, "Member 'BED_ComboAsset_GetStartNodeClass::ReturnValue' has a wrong offset!");

// Function b1-Managed.BED_ComboAsset.GetViewType
// 0x0001 (0x0001 - 0x0000)
struct BED_ComboAsset_GetViewType final
{
public:
	ECalliopeViewType                             ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
//static_assert(alignof(BED_ComboAsset_GetViewType) == 0x000001, "Wrong alignment on BED_ComboAsset_GetViewType");
//static_assert(sizeof(BED_ComboAsset_GetViewType) == 0x000001, "Wrong size on BED_ComboAsset_GetViewType");
//static_assert(offsetof(BED_ComboAsset_GetViewType, ReturnValue) == 0x000000, "Member 'BED_ComboAsset_GetViewType::ReturnValue' has a wrong offset!");

// Function b1-Managed.BED_QuestAsset.OnPropertyChanged
// 0x0020 (0x0020 - 0x0000)
struct BED_QuestAsset_OnPropertyChanged final
{
public:
	class FString                                 MemberName;                                        // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash)
	class FString                                 PropertyName;                                      // 0x0010(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash)
};
//static_assert(alignof(BED_QuestAsset_OnPropertyChanged) == 0x000008, "Wrong alignment on BED_QuestAsset_OnPropertyChanged");
//static_assert(sizeof(BED_QuestAsset_OnPropertyChanged) == 0x000020, "Wrong size on BED_QuestAsset_OnPropertyChanged");
//static_assert(offsetof(BED_QuestAsset_OnPropertyChanged, MemberName) == 0x000000, "Member 'BED_QuestAsset_OnPropertyChanged::MemberName' has a wrong offset!");
//static_assert(offsetof(BED_QuestAsset_OnPropertyChanged, PropertyName) == 0x000010, "Member 'BED_QuestAsset_OnPropertyChanged::PropertyName' has a wrong offset!");

// Function b1-Managed.BED_QuestAsset.GetExtraDefaultOutputNodesInBranchGraph
// 0x0018 (0x0018 - 0x0000)
struct BED_QuestAsset_GetExtraDefaultOutputNodesInBranchGraph final
{
public:
	TArray<class UClass*>                         OutClasses;                                        // 0x0000(0x0010)(Parm, OutParm)
	int32                                         ReturnValue;                                       // 0x0010(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
//static_assert(alignof(BED_QuestAsset_GetExtraDefaultOutputNodesInBranchGraph) == 0x000008, "Wrong alignment on BED_QuestAsset_GetExtraDefaultOutputNodesInBranchGraph");
//static_assert(sizeof(BED_QuestAsset_GetExtraDefaultOutputNodesInBranchGraph) == 0x000018, "Wrong size on BED_QuestAsset_GetExtraDefaultOutputNodesInBranchGraph");
//static_assert(offsetof(BED_QuestAsset_GetExtraDefaultOutputNodesInBranchGraph, OutClasses) == 0x000000, "Member 'BED_QuestAsset_GetExtraDefaultOutputNodesInBranchGraph::OutClasses' has a wrong offset!");
//static_assert(offsetof(BED_QuestAsset_GetExtraDefaultOutputNodesInBranchGraph, ReturnValue) == 0x000010, "Member 'BED_QuestAsset_GetExtraDefaultOutputNodesInBranchGraph::ReturnValue' has a wrong offset!");

// Function b1-Managed.BED_QuestAsset.GetExtraDefaultInputNodesInBranchGraph
// 0x0018 (0x0018 - 0x0000)
struct BED_QuestAsset_GetExtraDefaultInputNodesInBranchGraph final
{
public:
	TArray<class UClass*>                         OutClasses;                                        // 0x0000(0x0010)(Parm, OutParm)
	int32                                         ReturnValue;                                       // 0x0010(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
//static_assert(alignof(BED_QuestAsset_GetExtraDefaultInputNodesInBranchGraph) == 0x000008, "Wrong alignment on BED_QuestAsset_GetExtraDefaultInputNodesInBranchGraph");
//static_assert(sizeof(BED_QuestAsset_GetExtraDefaultInputNodesInBranchGraph) == 0x000018, "Wrong size on BED_QuestAsset_GetExtraDefaultInputNodesInBranchGraph");
//static_assert(offsetof(BED_QuestAsset_GetExtraDefaultInputNodesInBranchGraph, OutClasses) == 0x000000, "Member 'BED_QuestAsset_GetExtraDefaultInputNodesInBranchGraph::OutClasses' has a wrong offset!");
//static_assert(offsetof(BED_QuestAsset_GetExtraDefaultInputNodesInBranchGraph, ReturnValue) == 0x000010, "Member 'BED_QuestAsset_GetExtraDefaultInputNodesInBranchGraph::ReturnValue' has a wrong offset!");

// Function b1-Managed.BED_QuestAsset.GetRerouteNodeClassInBranchGraph
// 0x0008 (0x0008 - 0x0000)
struct BED_QuestAsset_GetRerouteNodeClassInBranchGraph final
{
public:
	class UClass*                                 ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
//static_assert(alignof(BED_QuestAsset_GetRerouteNodeClassInBranchGraph) == 0x000008, "Wrong alignment on BED_QuestAsset_GetRerouteNodeClassInBranchGraph");
//static_assert(sizeof(BED_QuestAsset_GetRerouteNodeClassInBranchGraph) == 0x000008, "Wrong size on BED_QuestAsset_GetRerouteNodeClassInBranchGraph");
//static_assert(offsetof(BED_QuestAsset_GetRerouteNodeClassInBranchGraph, ReturnValue) == 0x000000, "Member 'BED_QuestAsset_GetRerouteNodeClassInBranchGraph::ReturnValue' has a wrong offset!");

// Function b1-Managed.BED_QuestAsset.GetStartNodeClassInBranchGraph
// 0x0008 (0x0008 - 0x0000)
struct BED_QuestAsset_GetStartNodeClassInBranchGraph final
{
public:
	class UClass*                                 ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
//static_assert(alignof(BED_QuestAsset_GetStartNodeClassInBranchGraph) == 0x000008, "Wrong alignment on BED_QuestAsset_GetStartNodeClassInBranchGraph");
//static_assert(sizeof(BED_QuestAsset_GetStartNodeClassInBranchGraph) == 0x000008, "Wrong size on BED_QuestAsset_GetStartNodeClassInBranchGraph");
//static_assert(offsetof(BED_QuestAsset_GetStartNodeClassInBranchGraph, ReturnValue) == 0x000000, "Member 'BED_QuestAsset_GetStartNodeClassInBranchGraph::ReturnValue' has a wrong offset!");

// Function b1-Managed.BED_QuestAsset.GetExtraDefaultOutputNodes
// 0x0018 (0x0018 - 0x0000)
struct BED_QuestAsset_GetExtraDefaultOutputNodes final
{
public:
	TArray<class UClass*>                         OutClasses;                                        // 0x0000(0x0010)(Parm, OutParm)
	int32                                         ReturnValue;                                       // 0x0010(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
//static_assert(alignof(BED_QuestAsset_GetExtraDefaultOutputNodes) == 0x000008, "Wrong alignment on BED_QuestAsset_GetExtraDefaultOutputNodes");
//static_assert(sizeof(BED_QuestAsset_GetExtraDefaultOutputNodes) == 0x000018, "Wrong size on BED_QuestAsset_GetExtraDefaultOutputNodes");
//static_assert(offsetof(BED_QuestAsset_GetExtraDefaultOutputNodes, OutClasses) == 0x000000, "Member 'BED_QuestAsset_GetExtraDefaultOutputNodes::OutClasses' has a wrong offset!");
//static_assert(offsetof(BED_QuestAsset_GetExtraDefaultOutputNodes, ReturnValue) == 0x000010, "Member 'BED_QuestAsset_GetExtraDefaultOutputNodes::ReturnValue' has a wrong offset!");

// Function b1-Managed.BED_QuestAsset.GetExtraDefaultInputNodes
// 0x0018 (0x0018 - 0x0000)
struct BED_QuestAsset_GetExtraDefaultInputNodes final
{
public:
	TArray<class UClass*>                         OutClasses;                                        // 0x0000(0x0010)(Parm, OutParm)
	int32                                         ReturnValue;                                       // 0x0010(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
//static_assert(alignof(BED_QuestAsset_GetExtraDefaultInputNodes) == 0x000008, "Wrong alignment on BED_QuestAsset_GetExtraDefaultInputNodes");
//static_assert(sizeof(BED_QuestAsset_GetExtraDefaultInputNodes) == 0x000018, "Wrong size on BED_QuestAsset_GetExtraDefaultInputNodes");
//static_assert(offsetof(BED_QuestAsset_GetExtraDefaultInputNodes, OutClasses) == 0x000000, "Member 'BED_QuestAsset_GetExtraDefaultInputNodes::OutClasses' has a wrong offset!");
//static_assert(offsetof(BED_QuestAsset_GetExtraDefaultInputNodes, ReturnValue) == 0x000010, "Member 'BED_QuestAsset_GetExtraDefaultInputNodes::ReturnValue' has a wrong offset!");

// Function b1-Managed.BED_QuestAsset.GetRerouteNodeClass
// 0x0008 (0x0008 - 0x0000)
struct BED_QuestAsset_GetRerouteNodeClass final
{
public:
	class UClass*                                 ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
//static_assert(alignof(BED_QuestAsset_GetRerouteNodeClass) == 0x000008, "Wrong alignment on BED_QuestAsset_GetRerouteNodeClass");
//static_assert(sizeof(BED_QuestAsset_GetRerouteNodeClass) == 0x000008, "Wrong size on BED_QuestAsset_GetRerouteNodeClass");
//static_assert(offsetof(BED_QuestAsset_GetRerouteNodeClass, ReturnValue) == 0x000000, "Member 'BED_QuestAsset_GetRerouteNodeClass::ReturnValue' has a wrong offset!");

// Function b1-Managed.BED_QuestAsset.GetStartNodeClass
// 0x0008 (0x0008 - 0x0000)
struct BED_QuestAsset_GetStartNodeClass final
{
public:
	class UClass*                                 ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
//static_assert(alignof(BED_QuestAsset_GetStartNodeClass) == 0x000008, "Wrong alignment on BED_QuestAsset_GetStartNodeClass");
//static_assert(sizeof(BED_QuestAsset_GetStartNodeClass) == 0x000008, "Wrong size on BED_QuestAsset_GetStartNodeClass");
//static_assert(offsetof(BED_QuestAsset_GetStartNodeClass, ReturnValue) == 0x000000, "Member 'BED_QuestAsset_GetStartNodeClass::ReturnValue' has a wrong offset!");

// Function b1-Managed.BED_QuestAsset.GetViewType
// 0x0001 (0x0001 - 0x0000)
struct BED_QuestAsset_GetViewType final
{
public:
	ECalliopeViewType                             ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
//static_assert(alignof(BED_QuestAsset_GetViewType) == 0x000001, "Wrong alignment on BED_QuestAsset_GetViewType");
//static_assert(sizeof(BED_QuestAsset_GetViewType) == 0x000001, "Wrong size on BED_QuestAsset_GetViewType");
//static_assert(offsetof(BED_QuestAsset_GetViewType, ReturnValue) == 0x000000, "Member 'BED_QuestAsset_GetViewType::ReturnValue' has a wrong offset!");

// Function b1-Managed.BED_ComboNode_Condition.GetContextOutputsInCS
// 0x0010 (0x0010 - 0x0000)
struct BED_ComboNode_Condition_GetContextOutputsInCS final
{
public:
	TArray<class FName>                           ReturnValue;                                       // 0x0000(0x0010)(Parm, OutParm, ReturnParm)
};
//static_assert(alignof(BED_ComboNode_Condition_GetContextOutputsInCS) == 0x000008, "Wrong alignment on BED_ComboNode_Condition_GetContextOutputsInCS");
//static_assert(sizeof(BED_ComboNode_Condition_GetContextOutputsInCS) == 0x000010, "Wrong size on BED_ComboNode_Condition_GetContextOutputsInCS");
//static_assert(offsetof(BED_ComboNode_Condition_GetContextOutputsInCS, ReturnValue) == 0x000000, "Member 'BED_ComboNode_Condition_GetContextOutputsInCS::ReturnValue' has a wrong offset!");

// Function b1-Managed.BED_ComboNode_Condition.PostPropertyChanged
// 0x0020 (0x0020 - 0x0000)
struct BED_ComboNode_Condition_PostPropertyChanged final
{
public:
	class FString                                 MemberName;                                        // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash)
	class FString                                 PropertyName;                                      // 0x0010(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash)
};
//static_assert(alignof(BED_ComboNode_Condition_PostPropertyChanged) == 0x000008, "Wrong alignment on BED_ComboNode_Condition_PostPropertyChanged");
//static_assert(sizeof(BED_ComboNode_Condition_PostPropertyChanged) == 0x000020, "Wrong size on BED_ComboNode_Condition_PostPropertyChanged");
//static_assert(offsetof(BED_ComboNode_Condition_PostPropertyChanged, MemberName) == 0x000000, "Member 'BED_ComboNode_Condition_PostPropertyChanged::MemberName' has a wrong offset!");
//static_assert(offsetof(BED_ComboNode_Condition_PostPropertyChanged, PropertyName) == 0x000010, "Member 'BED_ComboNode_Condition_PostPropertyChanged::PropertyName' has a wrong offset!");

// Function b1-Managed.UGSSdkHttpRequestCallbackListener.OnReponseComplete
// 0x0018 (0x0018 - 0x0000)
struct UGSSdkHttpRequestCallbackListener_OnReponseComplete final
{
public:
	uint8                                         bSuccess : 1;                                      // 0x0000(0x0001)(BitIndex: 0x00, PropSize: 0x0001 (Parm, NoDestructor, HasGetValueTypeHash))
	uint8                                         Pad_1[0x3];                                        // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         HttpCode;                                          // 0x0004(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	TArray<uint8>                                 Content;                                           // 0x0008(0x0010)(ConstParm, Parm, OutParm, ReferenceParm)
};
//static_assert(alignof(UGSSdkHttpRequestCallbackListener_OnReponseComplete) == 0x000008, "Wrong alignment on UGSSdkHttpRequestCallbackListener_OnReponseComplete");
//static_assert(sizeof(UGSSdkHttpRequestCallbackListener_OnReponseComplete) == 0x000018, "Wrong size on UGSSdkHttpRequestCallbackListener_OnReponseComplete");
//static_assert(offsetof(UGSSdkHttpRequestCallbackListener_OnReponseComplete, HttpCode) == 0x000004, "Member 'UGSSdkHttpRequestCallbackListener_OnReponseComplete::HttpCode' has a wrong offset!");
//static_assert(offsetof(UGSSdkHttpRequestCallbackListener_OnReponseComplete, Content) == 0x000008, "Member 'UGSSdkHttpRequestCallbackListener_OnReponseComplete::Content' has a wrong offset!");

// Function b1-Managed.BSNS_DisablePhysicalMove.OnNotifyBegin
// 0x0010 (0x0010 - 0x0000)
struct BSNS_DisablePhysicalMove_OnNotifyBegin final
{
public:
	class UCalliopeLevelSequencePlayer*           InPlayer;                                          // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         InStatus;                                          // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         bInBackwards : 1;                                  // 0x000C(0x0001)(BitIndex: 0x00, PropSize: 0x0001 (Parm, NoDestructor, HasGetValueTypeHash))
};
//static_assert(alignof(BSNS_DisablePhysicalMove_OnNotifyBegin) == 0x000008, "Wrong alignment on BSNS_DisablePhysicalMove_OnNotifyBegin");
//static_assert(sizeof(BSNS_DisablePhysicalMove_OnNotifyBegin) == 0x000010, "Wrong size on BSNS_DisablePhysicalMove_OnNotifyBegin");
//static_assert(offsetof(BSNS_DisablePhysicalMove_OnNotifyBegin, InPlayer) == 0x000000, "Member 'BSNS_DisablePhysicalMove_OnNotifyBegin::InPlayer' has a wrong offset!");
//static_assert(offsetof(BSNS_DisablePhysicalMove_OnNotifyBegin, InStatus) == 0x000008, "Member 'BSNS_DisablePhysicalMove_OnNotifyBegin::InStatus' has a wrong offset!");

// Function b1-Managed.BSNS_DisablePhysicalMove.OnNotifyEnd
// 0x0010 (0x0010 - 0x0000)
struct BSNS_DisablePhysicalMove_OnNotifyEnd final
{
public:
	class UCalliopeLevelSequencePlayer*           InPlayer;                                          // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         InStatus;                                          // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         bInBackwards : 1;                                  // 0x000C(0x0001)(BitIndex: 0x00, PropSize: 0x0001 (Parm, NoDestructor, HasGetValueTypeHash))
};
//static_assert(alignof(BSNS_DisablePhysicalMove_OnNotifyEnd) == 0x000008, "Wrong alignment on BSNS_DisablePhysicalMove_OnNotifyEnd");
//static_assert(sizeof(BSNS_DisablePhysicalMove_OnNotifyEnd) == 0x000010, "Wrong size on BSNS_DisablePhysicalMove_OnNotifyEnd");
//static_assert(offsetof(BSNS_DisablePhysicalMove_OnNotifyEnd, InPlayer) == 0x000000, "Member 'BSNS_DisablePhysicalMove_OnNotifyEnd::InPlayer' has a wrong offset!");
//static_assert(offsetof(BSNS_DisablePhysicalMove_OnNotifyEnd, InStatus) == 0x000008, "Member 'BSNS_DisablePhysicalMove_OnNotifyEnd::InStatus' has a wrong offset!");

// Function b1-Managed.BED_BehaviorNode_TriggerAttackStiff_ListenAttacker.GetNodeDescriptionInCS
// 0x0010 (0x0010 - 0x0000)
struct BED_BehaviorNode_TriggerAttackStiff_ListenAttacker_GetNodeDescriptionInCS final
{
public:
	class FString                                 ReturnValue;                                       // 0x0000(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash)
};
//static_assert(alignof(BED_BehaviorNode_TriggerAttackStiff_ListenAttacker_GetNodeDescriptionInCS) == 0x000008, "Wrong alignment on BED_BehaviorNode_TriggerAttackStiff_ListenAttacker_GetNodeDescriptionInCS");
//static_assert(sizeof(BED_BehaviorNode_TriggerAttackStiff_ListenAttacker_GetNodeDescriptionInCS) == 0x000010, "Wrong size on BED_BehaviorNode_TriggerAttackStiff_ListenAttacker_GetNodeDescriptionInCS");
//static_assert(offsetof(BED_BehaviorNode_TriggerAttackStiff_ListenAttacker_GetNodeDescriptionInCS, ReturnValue) == 0x000000, "Member 'BED_BehaviorNode_TriggerAttackStiff_ListenAttacker_GetNodeDescriptionInCS::ReturnValue' has a wrong offset!");

// Function b1-Managed.BED_BehaviorNode_TriggerAttackStiff_ListenAttacker.IsSupportViewType
// 0x0002 (0x0002 - 0x0000)
struct BED_BehaviorNode_TriggerAttackStiff_ListenAttacker_IsSupportViewType final
{
public:
	ECalliopeViewType                             InViewType;                                        // 0x0000(0x0001)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         ReturnValue : 1;                                   // 0x0001(0x0001)(BitIndex: 0x00, PropSize: 0x0001 (Parm, OutParm, ReturnParm, NoDestructor, HasGetValueTypeHash))
};
//static_assert(alignof(BED_BehaviorNode_TriggerAttackStiff_ListenAttacker_IsSupportViewType) == 0x000001, "Wrong alignment on BED_BehaviorNode_TriggerAttackStiff_ListenAttacker_IsSupportViewType");
//static_assert(sizeof(BED_BehaviorNode_TriggerAttackStiff_ListenAttacker_IsSupportViewType) == 0x000002, "Wrong size on BED_BehaviorNode_TriggerAttackStiff_ListenAttacker_IsSupportViewType");
//static_assert(offsetof(BED_BehaviorNode_TriggerAttackStiff_ListenAttacker_IsSupportViewType, InViewType) == 0x000000, "Member 'BED_BehaviorNode_TriggerAttackStiff_ListenAttacker_IsSupportViewType::InViewType' has a wrong offset!");

// Function b1-Managed.BED_ProcessMachineNode_Terminate.IsSupportViewType
// 0x0002 (0x0002 - 0x0000)
struct BED_ProcessMachineNode_Terminate_IsSupportViewType final
{
public:
	ECalliopeViewType                             InViewType;                                        // 0x0000(0x0001)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         ReturnValue : 1;                                   // 0x0001(0x0001)(BitIndex: 0x00, PropSize: 0x0001 (Parm, OutParm, ReturnParm, NoDestructor, HasGetValueTypeHash))
};
//static_assert(alignof(BED_ProcessMachineNode_Terminate_IsSupportViewType) == 0x000001, "Wrong alignment on BED_ProcessMachineNode_Terminate_IsSupportViewType");
//static_assert(sizeof(BED_ProcessMachineNode_Terminate_IsSupportViewType) == 0x000002, "Wrong size on BED_ProcessMachineNode_Terminate_IsSupportViewType");
//static_assert(offsetof(BED_ProcessMachineNode_Terminate_IsSupportViewType, InViewType) == 0x000000, "Member 'BED_ProcessMachineNode_Terminate_IsSupportViewType::InViewType' has a wrong offset!");

// Function b1-Managed.BED_BehaviorNode_Random.GetNodeDescriptionInCS
// 0x0010 (0x0010 - 0x0000)
struct BED_BehaviorNode_Random_GetNodeDescriptionInCS final
{
public:
	class FString                                 ReturnValue;                                       // 0x0000(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash)
};
//static_assert(alignof(BED_BehaviorNode_Random_GetNodeDescriptionInCS) == 0x000008, "Wrong alignment on BED_BehaviorNode_Random_GetNodeDescriptionInCS");
//static_assert(sizeof(BED_BehaviorNode_Random_GetNodeDescriptionInCS) == 0x000010, "Wrong size on BED_BehaviorNode_Random_GetNodeDescriptionInCS");
//static_assert(offsetof(BED_BehaviorNode_Random_GetNodeDescriptionInCS, ReturnValue) == 0x000000, "Member 'BED_BehaviorNode_Random_GetNodeDescriptionInCS::ReturnValue' has a wrong offset!");

// Function b1-Managed.BED_BehaviorNode_Random.IsSupportViewType
// 0x0002 (0x0002 - 0x0000)
struct BED_BehaviorNode_Random_IsSupportViewType final
{
public:
	ECalliopeViewType                             InViewType;                                        // 0x0000(0x0001)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         ReturnValue : 1;                                   // 0x0001(0x0001)(BitIndex: 0x00, PropSize: 0x0001 (Parm, OutParm, ReturnParm, NoDestructor, HasGetValueTypeHash))
};
//static_assert(alignof(BED_BehaviorNode_Random_IsSupportViewType) == 0x000001, "Wrong alignment on BED_BehaviorNode_Random_IsSupportViewType");
//static_assert(sizeof(BED_BehaviorNode_Random_IsSupportViewType) == 0x000002, "Wrong size on BED_BehaviorNode_Random_IsSupportViewType");
//static_assert(offsetof(BED_BehaviorNode_Random_IsSupportViewType, InViewType) == 0x000000, "Member 'BED_BehaviorNode_Random_IsSupportViewType::InViewType' has a wrong offset!");

// Function b1-Managed.UBGWFunctionLibraryCS.SetMapAreaColorDataForEditorUtil
// 0x0028 (0x0028 - 0x0000)
struct UBGWFunctionLibraryCS_SetMapAreaColorDataForEditorUtil final
{
public:
	int32                                         MapId;                                             // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_4[0x4];                                        // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UGSMapAreaBaseData*                     TargetBaseData;                                    // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class FString                                 ErrMsg;                                            // 0x0010(0x0010)(Parm, OutParm, ZeroConstructor, HasGetValueTypeHash)
	int32                                         ReturnValue;                                       // 0x0020(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
//static_assert(alignof(UBGWFunctionLibraryCS_SetMapAreaColorDataForEditorUtil) == 0x000008, "Wrong alignment on UBGWFunctionLibraryCS_SetMapAreaColorDataForEditorUtil");
//static_assert(sizeof(UBGWFunctionLibraryCS_SetMapAreaColorDataForEditorUtil) == 0x000028, "Wrong size on UBGWFunctionLibraryCS_SetMapAreaColorDataForEditorUtil");
//static_assert(offsetof(UBGWFunctionLibraryCS_SetMapAreaColorDataForEditorUtil, MapId) == 0x000000, "Member 'UBGWFunctionLibraryCS_SetMapAreaColorDataForEditorUtil::MapId' has a wrong offset!");
//static_assert(offsetof(UBGWFunctionLibraryCS_SetMapAreaColorDataForEditorUtil, TargetBaseData) == 0x000008, "Member 'UBGWFunctionLibraryCS_SetMapAreaColorDataForEditorUtil::TargetBaseData' has a wrong offset!");
//static_assert(offsetof(UBGWFunctionLibraryCS_SetMapAreaColorDataForEditorUtil, ErrMsg) == 0x000010, "Member 'UBGWFunctionLibraryCS_SetMapAreaColorDataForEditorUtil::ErrMsg' has a wrong offset!");
//static_assert(offsetof(UBGWFunctionLibraryCS_SetMapAreaColorDataForEditorUtil, ReturnValue) == 0x000020, "Member 'UBGWFunctionLibraryCS_SetMapAreaColorDataForEditorUtil::ReturnValue' has a wrong offset!");

// Function b1-Managed.UBGWFunctionLibraryCS.TestCalcPosToMapAreaIDInGame
// 0x0028 (0x0028 - 0x0000)
struct UBGWFunctionLibraryCS_TestCalcPosToMapAreaIDInGame final
{
public:
	int32                                         MapId;                                             // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_4[0x4];                                        // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector2D                              Pos;                                               // 0x0008(0x0010)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UObject*                                WorldContext;                                      // 0x0018(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         ReturnValue;                                       // 0x0020(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
//static_assert(alignof(UBGWFunctionLibraryCS_TestCalcPosToMapAreaIDInGame) == 0x000008, "Wrong alignment on UBGWFunctionLibraryCS_TestCalcPosToMapAreaIDInGame");
//static_assert(sizeof(UBGWFunctionLibraryCS_TestCalcPosToMapAreaIDInGame) == 0x000028, "Wrong size on UBGWFunctionLibraryCS_TestCalcPosToMapAreaIDInGame");
//static_assert(offsetof(UBGWFunctionLibraryCS_TestCalcPosToMapAreaIDInGame, MapId) == 0x000000, "Member 'UBGWFunctionLibraryCS_TestCalcPosToMapAreaIDInGame::MapId' has a wrong offset!");
//static_assert(offsetof(UBGWFunctionLibraryCS_TestCalcPosToMapAreaIDInGame, Pos) == 0x000008, "Member 'UBGWFunctionLibraryCS_TestCalcPosToMapAreaIDInGame::Pos' has a wrong offset!");
//static_assert(offsetof(UBGWFunctionLibraryCS_TestCalcPosToMapAreaIDInGame, WorldContext) == 0x000018, "Member 'UBGWFunctionLibraryCS_TestCalcPosToMapAreaIDInGame::WorldContext' has a wrong offset!");
//static_assert(offsetof(UBGWFunctionLibraryCS_TestCalcPosToMapAreaIDInGame, ReturnValue) == 0x000020, "Member 'UBGWFunctionLibraryCS_TestCalcPosToMapAreaIDInGame::ReturnValue' has a wrong offset!");

// Function b1-Managed.UBGWFunctionLibraryCS.HasSequenceAlreadyPlayed
// 0x0010 (0x0010 - 0x0000)
struct UBGWFunctionLibraryCS_HasSequenceAlreadyPlayed final
{
public:
	class AActor*                                 WorldCtx;                                          // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         SeqID;                                             // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         ReturnValue : 1;                                   // 0x000C(0x0001)(BitIndex: 0x00, PropSize: 0x0001 (Parm, OutParm, ReturnParm, NoDestructor, HasGetValueTypeHash))
};
//static_assert(alignof(UBGWFunctionLibraryCS_HasSequenceAlreadyPlayed) == 0x000008, "Wrong alignment on UBGWFunctionLibraryCS_HasSequenceAlreadyPlayed");
//static_assert(sizeof(UBGWFunctionLibraryCS_HasSequenceAlreadyPlayed) == 0x000010, "Wrong size on UBGWFunctionLibraryCS_HasSequenceAlreadyPlayed");
//static_assert(offsetof(UBGWFunctionLibraryCS_HasSequenceAlreadyPlayed, WorldCtx) == 0x000000, "Member 'UBGWFunctionLibraryCS_HasSequenceAlreadyPlayed::WorldCtx' has a wrong offset!");
//static_assert(offsetof(UBGWFunctionLibraryCS_HasSequenceAlreadyPlayed, SeqID) == 0x000008, "Member 'UBGWFunctionLibraryCS_HasSequenceAlreadyPlayed::SeqID' has a wrong offset!");

// Function b1-Managed.UBGWFunctionLibraryCS.TestCalcPosToMapAreaID
// 0x0028 (0x0028 - 0x0000)
struct UBGWFunctionLibraryCS_TestCalcPosToMapAreaID final
{
public:
	struct FVector2D                              Pos;                                               // 0x0000(0x0010)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UGSMapAreaBaseData*                     MapAreaBaseData;                                   // 0x0010(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UGSMapAreaDetailData*                   MapAreaDetailData;                                 // 0x0018(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         ReturnValue;                                       // 0x0020(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
//static_assert(alignof(UBGWFunctionLibraryCS_TestCalcPosToMapAreaID) == 0x000008, "Wrong alignment on UBGWFunctionLibraryCS_TestCalcPosToMapAreaID");
//static_assert(sizeof(UBGWFunctionLibraryCS_TestCalcPosToMapAreaID) == 0x000028, "Wrong size on UBGWFunctionLibraryCS_TestCalcPosToMapAreaID");
//static_assert(offsetof(UBGWFunctionLibraryCS_TestCalcPosToMapAreaID, Pos) == 0x000000, "Member 'UBGWFunctionLibraryCS_TestCalcPosToMapAreaID::Pos' has a wrong offset!");
//static_assert(offsetof(UBGWFunctionLibraryCS_TestCalcPosToMapAreaID, MapAreaBaseData) == 0x000010, "Member 'UBGWFunctionLibraryCS_TestCalcPosToMapAreaID::MapAreaBaseData' has a wrong offset!");
//static_assert(offsetof(UBGWFunctionLibraryCS_TestCalcPosToMapAreaID, MapAreaDetailData) == 0x000018, "Member 'UBGWFunctionLibraryCS_TestCalcPosToMapAreaID::MapAreaDetailData' has a wrong offset!");
//static_assert(offsetof(UBGWFunctionLibraryCS_TestCalcPosToMapAreaID, ReturnValue) == 0x000020, "Member 'UBGWFunctionLibraryCS_TestCalcPosToMapAreaID::ReturnValue' has a wrong offset!");

// Function b1-Managed.UBGWFunctionLibraryCS.TestPlayMedia
// 0x0018 (0x0018 - 0x0000)
struct UBGWFunctionLibraryCS_TestPlayMedia final
{
public:
	class UMediaPlayer*                           MediaPlayerStop;                                   // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UMediaPlayer*                           MediaPlayerOpen;                                   // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UMediaSource*                           MediaSource;                                       // 0x0010(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
//static_assert(alignof(UBGWFunctionLibraryCS_TestPlayMedia) == 0x000008, "Wrong alignment on UBGWFunctionLibraryCS_TestPlayMedia");
//static_assert(sizeof(UBGWFunctionLibraryCS_TestPlayMedia) == 0x000018, "Wrong size on UBGWFunctionLibraryCS_TestPlayMedia");
//static_assert(offsetof(UBGWFunctionLibraryCS_TestPlayMedia, MediaPlayerStop) == 0x000000, "Member 'UBGWFunctionLibraryCS_TestPlayMedia::MediaPlayerStop' has a wrong offset!");
//static_assert(offsetof(UBGWFunctionLibraryCS_TestPlayMedia, MediaPlayerOpen) == 0x000008, "Member 'UBGWFunctionLibraryCS_TestPlayMedia::MediaPlayerOpen' has a wrong offset!");
//static_assert(offsetof(UBGWFunctionLibraryCS_TestPlayMedia, MediaSource) == 0x000010, "Member 'UBGWFunctionLibraryCS_TestPlayMedia::MediaSource' has a wrong offset!");

// Function b1-Managed.BGGGameStateCS.IsGSEventDebuggerOpenCS
// 0x0001 (0x0001 - 0x0000)
struct BGGGameStateCS_IsGSEventDebuggerOpenCS final
{
public:
	uint8                                         ReturnValue : 1;                                   // 0x0000(0x0001)(BitIndex: 0x00, PropSize: 0x0001 (Parm, OutParm, ReturnParm, NoDestructor, HasGetValueTypeHash))
};
//static_assert(alignof(BGGGameStateCS_IsGSEventDebuggerOpenCS) == 0x000001, "Wrong alignment on BGGGameStateCS_IsGSEventDebuggerOpenCS");
//static_assert(sizeof(BGGGameStateCS_IsGSEventDebuggerOpenCS) == 0x000001, "Wrong size on BGGGameStateCS_IsGSEventDebuggerOpenCS");

// Function b1-Managed.BGGGameStateCS.OnTickDispatchEventCS
// 0x0004 (0x0004 - 0x0000)
struct BGGGameStateCS_OnTickDispatchEventCS final
{
public:
	float                                         DeltaTime;                                         // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
//static_assert(alignof(BGGGameStateCS_OnTickDispatchEventCS) == 0x000004, "Wrong alignment on BGGGameStateCS_OnTickDispatchEventCS");
//static_assert(sizeof(BGGGameStateCS_OnTickDispatchEventCS) == 0x000004, "Wrong size on BGGGameStateCS_OnTickDispatchEventCS");
//static_assert(offsetof(BGGGameStateCS_OnTickDispatchEventCS, DeltaTime) == 0x000000, "Member 'BGGGameStateCS_OnTickDispatchEventCS::DeltaTime' has a wrong offset!");

// Function b1-Managed.BGGGameStateCS.ReceiveEndPlay
// 0x0001 (0x0001 - 0x0000)
struct BGGGameStateCS_ReceiveEndPlay final
{
public:
	EEndPlayReason                                EndPlayReason;                                     // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
//static_assert(alignof(BGGGameStateCS_ReceiveEndPlay) == 0x000001, "Wrong alignment on BGGGameStateCS_ReceiveEndPlay");
//static_assert(sizeof(BGGGameStateCS_ReceiveEndPlay) == 0x000001, "Wrong size on BGGGameStateCS_ReceiveEndPlay");
//static_assert(offsetof(BGGGameStateCS_ReceiveEndPlay, EndPlayReason) == 0x000000, "Member 'BGGGameStateCS_ReceiveEndPlay::EndPlayReason' has a wrong offset!");

// Function b1-Managed.BSN_GainItem.OnNotify
// 0x0010 (0x0010 - 0x0000)
struct BSN_GainItem_OnNotify final
{
public:
	class UCalliopeLevelSequencePlayer*           InPlayer;                                          // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         InStatus;                                          // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         bInBackwards : 1;                                  // 0x000C(0x0001)(BitIndex: 0x00, PropSize: 0x0001 (Parm, NoDestructor, HasGetValueTypeHash))
};
//static_assert(alignof(BSN_GainItem_OnNotify) == 0x000008, "Wrong alignment on BSN_GainItem_OnNotify");
//static_assert(sizeof(BSN_GainItem_OnNotify) == 0x000010, "Wrong size on BSN_GainItem_OnNotify");
//static_assert(offsetof(BSN_GainItem_OnNotify, InPlayer) == 0x000000, "Member 'BSN_GainItem_OnNotify::InPlayer' has a wrong offset!");
//static_assert(offsetof(BSN_GainItem_OnNotify, InStatus) == 0x000008, "Member 'BSN_GainItem_OnNotify::InStatus' has a wrong offset!");

// Function b1-Managed.BGWCellPatitionWorldSubSystem.OnWorldBeginPlayCS
// 0x0008 (0x0008 - 0x0000)
struct BGWCellPatitionWorldSubSystem_OnWorldBeginPlayCS final
{
public:
	class UWorld*                                 InWorld;                                           // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
//static_assert(alignof(BGWCellPatitionWorldSubSystem_OnWorldBeginPlayCS) == 0x000008, "Wrong alignment on BGWCellPatitionWorldSubSystem_OnWorldBeginPlayCS");
//static_assert(sizeof(BGWCellPatitionWorldSubSystem_OnWorldBeginPlayCS) == 0x000008, "Wrong size on BGWCellPatitionWorldSubSystem_OnWorldBeginPlayCS");
//static_assert(offsetof(BGWCellPatitionWorldSubSystem_OnWorldBeginPlayCS, InWorld) == 0x000000, "Member 'BGWCellPatitionWorldSubSystem_OnWorldBeginPlayCS::InWorld' has a wrong offset!");

// Function b1-Managed.BGWCellPatitionWorldSubSystem.OnTickCS
// 0x0004 (0x0004 - 0x0000)
struct BGWCellPatitionWorldSubSystem_OnTickCS final
{
public:
	float                                         DeltaTime;                                         // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
//static_assert(alignof(BGWCellPatitionWorldSubSystem_OnTickCS) == 0x000004, "Wrong alignment on BGWCellPatitionWorldSubSystem_OnTickCS");
//static_assert(sizeof(BGWCellPatitionWorldSubSystem_OnTickCS) == 0x000004, "Wrong size on BGWCellPatitionWorldSubSystem_OnTickCS");
//static_assert(offsetof(BGWCellPatitionWorldSubSystem_OnTickCS, DeltaTime) == 0x000000, "Member 'BGWCellPatitionWorldSubSystem_OnTickCS::DeltaTime' has a wrong offset!");

// Function b1-Managed.BGWCellPatitionWorldSubSystem.DoesSupportWorldTypeCS
// 0x0008 (0x0008 - 0x0000)
struct BGWCellPatitionWorldSubSystem_DoesSupportWorldTypeCS final
{
public:
	int32                                         WorldType;                                         // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         ReturnValue : 1;                                   // 0x0004(0x0001)(BitIndex: 0x00, PropSize: 0x0001 (Parm, OutParm, ReturnParm, NoDestructor, HasGetValueTypeHash))
};
//static_assert(alignof(BGWCellPatitionWorldSubSystem_DoesSupportWorldTypeCS) == 0x000004, "Wrong alignment on BGWCellPatitionWorldSubSystem_DoesSupportWorldTypeCS");
//static_assert(sizeof(BGWCellPatitionWorldSubSystem_DoesSupportWorldTypeCS) == 0x000008, "Wrong size on BGWCellPatitionWorldSubSystem_DoesSupportWorldTypeCS");
//static_assert(offsetof(BGWCellPatitionWorldSubSystem_DoesSupportWorldTypeCS, WorldType) == 0x000000, "Member 'BGWCellPatitionWorldSubSystem_DoesSupportWorldTypeCS::WorldType' has a wrong offset!");

// Function b1-Managed.BGWTickRateOptimizeWorldSubSystem.OnWorldBeginPlayCS
// 0x0008 (0x0008 - 0x0000)
struct BGWTickRateOptimizeWorldSubSystem_OnWorldBeginPlayCS final
{
public:
	class UWorld*                                 InWorld;                                           // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
//static_assert(alignof(BGWTickRateOptimizeWorldSubSystem_OnWorldBeginPlayCS) == 0x000008, "Wrong alignment on BGWTickRateOptimizeWorldSubSystem_OnWorldBeginPlayCS");
//static_assert(sizeof(BGWTickRateOptimizeWorldSubSystem_OnWorldBeginPlayCS) == 0x000008, "Wrong size on BGWTickRateOptimizeWorldSubSystem_OnWorldBeginPlayCS");
//static_assert(offsetof(BGWTickRateOptimizeWorldSubSystem_OnWorldBeginPlayCS, InWorld) == 0x000000, "Member 'BGWTickRateOptimizeWorldSubSystem_OnWorldBeginPlayCS::InWorld' has a wrong offset!");

// Function b1-Managed.BGWTickRateOptimizeWorldSubSystem.DoesSupportWorldTypeCS
// 0x0008 (0x0008 - 0x0000)
struct BGWTickRateOptimizeWorldSubSystem_DoesSupportWorldTypeCS final
{
public:
	int32                                         WorldType;                                         // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         ReturnValue : 1;                                   // 0x0004(0x0001)(BitIndex: 0x00, PropSize: 0x0001 (Parm, OutParm, ReturnParm, NoDestructor, HasGetValueTypeHash))
};
//static_assert(alignof(BGWTickRateOptimizeWorldSubSystem_DoesSupportWorldTypeCS) == 0x000004, "Wrong alignment on BGWTickRateOptimizeWorldSubSystem_DoesSupportWorldTypeCS");
//static_assert(sizeof(BGWTickRateOptimizeWorldSubSystem_DoesSupportWorldTypeCS) == 0x000008, "Wrong size on BGWTickRateOptimizeWorldSubSystem_DoesSupportWorldTypeCS");
//static_assert(offsetof(BGWTickRateOptimizeWorldSubSystem_DoesSupportWorldTypeCS, WorldType) == 0x000000, "Member 'BGWTickRateOptimizeWorldSubSystem_DoesSupportWorldTypeCS::WorldType' has a wrong offset!");

// Function b1-Managed.BANSM_AttackState.CheckState
// 0x0010 (0x0010 - 0x0000)
struct BANSM_AttackState_CheckState final
{
public:
	class UAnimSequenceBase*                      AnimBase;                                          // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CurTime;                                           // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         ReturnValue : 1;                                   // 0x000C(0x0001)(BitIndex: 0x00, PropSize: 0x0001 (Parm, OutParm, ReturnParm, NoDestructor, HasGetValueTypeHash))
};
//static_assert(alignof(BANSM_AttackState_CheckState) == 0x000008, "Wrong alignment on BANSM_AttackState_CheckState");
//static_assert(sizeof(BANSM_AttackState_CheckState) == 0x000010, "Wrong size on BANSM_AttackState_CheckState");
//static_assert(offsetof(BANSM_AttackState_CheckState, AnimBase) == 0x000000, "Member 'BANSM_AttackState_CheckState::AnimBase' has a wrong offset!");
//static_assert(offsetof(BANSM_AttackState_CheckState, CurTime) == 0x000008, "Member 'BANSM_AttackState_CheckState::CurTime' has a wrong offset!");

// Function b1-Managed.BED_BehaviorNode_DetectUnit.GetNodeDescriptionInCS
// 0x0010 (0x0010 - 0x0000)
struct BED_BehaviorNode_DetectUnit_GetNodeDescriptionInCS final
{
public:
	class FString                                 ReturnValue;                                       // 0x0000(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash)
};
//static_assert(alignof(BED_BehaviorNode_DetectUnit_GetNodeDescriptionInCS) == 0x000008, "Wrong alignment on BED_BehaviorNode_DetectUnit_GetNodeDescriptionInCS");
//static_assert(sizeof(BED_BehaviorNode_DetectUnit_GetNodeDescriptionInCS) == 0x000010, "Wrong size on BED_BehaviorNode_DetectUnit_GetNodeDescriptionInCS");
//static_assert(offsetof(BED_BehaviorNode_DetectUnit_GetNodeDescriptionInCS, ReturnValue) == 0x000000, "Member 'BED_BehaviorNode_DetectUnit_GetNodeDescriptionInCS::ReturnValue' has a wrong offset!");

// Function b1-Managed.BED_BehaviorNode_DetectUnit.IsSupportViewType
// 0x0002 (0x0002 - 0x0000)
struct BED_BehaviorNode_DetectUnit_IsSupportViewType final
{
public:
	ECalliopeViewType                             InViewType;                                        // 0x0000(0x0001)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         ReturnValue : 1;                                   // 0x0001(0x0001)(BitIndex: 0x00, PropSize: 0x0001 (Parm, OutParm, ReturnParm, NoDestructor, HasGetValueTypeHash))
};
//static_assert(alignof(BED_BehaviorNode_DetectUnit_IsSupportViewType) == 0x000001, "Wrong alignment on BED_BehaviorNode_DetectUnit_IsSupportViewType");
//static_assert(sizeof(BED_BehaviorNode_DetectUnit_IsSupportViewType) == 0x000002, "Wrong size on BED_BehaviorNode_DetectUnit_IsSupportViewType");
//static_assert(offsetof(BED_BehaviorNode_DetectUnit_IsSupportViewType, InViewType) == 0x000000, "Member 'BED_BehaviorNode_DetectUnit_IsSupportViewType::InViewType' has a wrong offset!");

// Function b1-Managed.BANS_ChangeAimOffset.GSNotifyBeginCS
// 0x0048 (0x0048 - 0x0000)
struct BANS_ChangeAimOffset_GSNotifyBeginCS final
{
public:
	struct FUStGSNotifyParam                      NotifyParam;                                       // 0x0000(0x0040)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
	float                                         TotalDuration;                                     // 0x0040(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
//static_assert(alignof(BANS_ChangeAimOffset_GSNotifyBeginCS) == 0x000008, "Wrong alignment on BANS_ChangeAimOffset_GSNotifyBeginCS");
//static_assert(sizeof(BANS_ChangeAimOffset_GSNotifyBeginCS) == 0x000048, "Wrong size on BANS_ChangeAimOffset_GSNotifyBeginCS");
//static_assert(offsetof(BANS_ChangeAimOffset_GSNotifyBeginCS, NotifyParam) == 0x000000, "Member 'BANS_ChangeAimOffset_GSNotifyBeginCS::NotifyParam' has a wrong offset!");
//static_assert(offsetof(BANS_ChangeAimOffset_GSNotifyBeginCS, TotalDuration) == 0x000040, "Member 'BANS_ChangeAimOffset_GSNotifyBeginCS::TotalDuration' has a wrong offset!");

// Function b1-Managed.BANS_ChangeAimOffset.GSNotifyEndCS
// 0x0040 (0x0040 - 0x0000)
struct BANS_ChangeAimOffset_GSNotifyEndCS final
{
public:
	struct FUStGSNotifyParam                      NotifyParam;                                       // 0x0000(0x0040)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
//static_assert(alignof(BANS_ChangeAimOffset_GSNotifyEndCS) == 0x000008, "Wrong alignment on BANS_ChangeAimOffset_GSNotifyEndCS");
//static_assert(sizeof(BANS_ChangeAimOffset_GSNotifyEndCS) == 0x000040, "Wrong size on BANS_ChangeAimOffset_GSNotifyEndCS");
//static_assert(offsetof(BANS_ChangeAimOffset_GSNotifyEndCS, NotifyParam) == 0x000000, "Member 'BANS_ChangeAimOffset_GSNotifyEndCS::NotifyParam' has a wrong offset!");

// Function b1-Managed.BED_BehaviorNode_GameDataCounter.IsSupportViewType
// 0x0002 (0x0002 - 0x0000)
struct BED_BehaviorNode_GameDataCounter_IsSupportViewType final
{
public:
	ECalliopeViewType                             InViewType;                                        // 0x0000(0x0001)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         ReturnValue : 1;                                   // 0x0001(0x0001)(BitIndex: 0x00, PropSize: 0x0001 (Parm, OutParm, ReturnParm, NoDestructor, HasGetValueTypeHash))
};
//static_assert(alignof(BED_BehaviorNode_GameDataCounter_IsSupportViewType) == 0x000001, "Wrong alignment on BED_BehaviorNode_GameDataCounter_IsSupportViewType");
//static_assert(sizeof(BED_BehaviorNode_GameDataCounter_IsSupportViewType) == 0x000002, "Wrong size on BED_BehaviorNode_GameDataCounter_IsSupportViewType");
//static_assert(offsetof(BED_BehaviorNode_GameDataCounter_IsSupportViewType, InViewType) == 0x000000, "Member 'BED_BehaviorNode_GameDataCounter_IsSupportViewType::InViewType' has a wrong offset!");

// Function b1-Managed.BANS_GSAbortWindow.GSNotifyBeginCS
// 0x0048 (0x0048 - 0x0000)
struct BANS_GSAbortWindow_GSNotifyBeginCS final
{
public:
	struct FUStGSNotifyParam                      NotifyParam;                                       // 0x0000(0x0040)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
	float                                         TotalDuration;                                     // 0x0040(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
//static_assert(alignof(BANS_GSAbortWindow_GSNotifyBeginCS) == 0x000008, "Wrong alignment on BANS_GSAbortWindow_GSNotifyBeginCS");
//static_assert(sizeof(BANS_GSAbortWindow_GSNotifyBeginCS) == 0x000048, "Wrong size on BANS_GSAbortWindow_GSNotifyBeginCS");
//static_assert(offsetof(BANS_GSAbortWindow_GSNotifyBeginCS, NotifyParam) == 0x000000, "Member 'BANS_GSAbortWindow_GSNotifyBeginCS::NotifyParam' has a wrong offset!");
//static_assert(offsetof(BANS_GSAbortWindow_GSNotifyBeginCS, TotalDuration) == 0x000040, "Member 'BANS_GSAbortWindow_GSNotifyBeginCS::TotalDuration' has a wrong offset!");

// Function b1-Managed.BANS_GSCanBlendToDeadAM.GSNotifyBeginCS
// 0x0048 (0x0048 - 0x0000)
struct BANS_GSCanBlendToDeadAM_GSNotifyBeginCS final
{
public:
	struct FUStGSNotifyParam                      NotifyParam;                                       // 0x0000(0x0040)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
	float                                         TotalDuration;                                     // 0x0040(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
//static_assert(alignof(BANS_GSCanBlendToDeadAM_GSNotifyBeginCS) == 0x000008, "Wrong alignment on BANS_GSCanBlendToDeadAM_GSNotifyBeginCS");
//static_assert(sizeof(BANS_GSCanBlendToDeadAM_GSNotifyBeginCS) == 0x000048, "Wrong size on BANS_GSCanBlendToDeadAM_GSNotifyBeginCS");
//static_assert(offsetof(BANS_GSCanBlendToDeadAM_GSNotifyBeginCS, NotifyParam) == 0x000000, "Member 'BANS_GSCanBlendToDeadAM_GSNotifyBeginCS::NotifyParam' has a wrong offset!");
//static_assert(offsetof(BANS_GSCanBlendToDeadAM_GSNotifyBeginCS, TotalDuration) == 0x000040, "Member 'BANS_GSCanBlendToDeadAM_GSNotifyBeginCS::TotalDuration' has a wrong offset!");

// Function b1-Managed.BANS_GSCanBlendToDeadAM.GSNotifyEndCS
// 0x0040 (0x0040 - 0x0000)
struct BANS_GSCanBlendToDeadAM_GSNotifyEndCS final
{
public:
	struct FUStGSNotifyParam                      NotifyParam;                                       // 0x0000(0x0040)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
//static_assert(alignof(BANS_GSCanBlendToDeadAM_GSNotifyEndCS) == 0x000008, "Wrong alignment on BANS_GSCanBlendToDeadAM_GSNotifyEndCS");
//static_assert(sizeof(BANS_GSCanBlendToDeadAM_GSNotifyEndCS) == 0x000040, "Wrong size on BANS_GSCanBlendToDeadAM_GSNotifyEndCS");
//static_assert(offsetof(BANS_GSCanBlendToDeadAM_GSNotifyEndCS, NotifyParam) == 0x000000, "Member 'BANS_GSCanBlendToDeadAM_GSNotifyEndCS::NotifyParam' has a wrong offset!");

// Function b1-Managed.BANS_GSDisableEnterGlide.GSNotifyBeginCS
// 0x0048 (0x0048 - 0x0000)
struct BANS_GSDisableEnterGlide_GSNotifyBeginCS final
{
public:
	struct FUStGSNotifyParam                      NotifyParam;                                       // 0x0000(0x0040)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
	float                                         TotalDuration;                                     // 0x0040(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
//static_assert(alignof(BANS_GSDisableEnterGlide_GSNotifyBeginCS) == 0x000008, "Wrong alignment on BANS_GSDisableEnterGlide_GSNotifyBeginCS");
//static_assert(sizeof(BANS_GSDisableEnterGlide_GSNotifyBeginCS) == 0x000048, "Wrong size on BANS_GSDisableEnterGlide_GSNotifyBeginCS");
//static_assert(offsetof(BANS_GSDisableEnterGlide_GSNotifyBeginCS, NotifyParam) == 0x000000, "Member 'BANS_GSDisableEnterGlide_GSNotifyBeginCS::NotifyParam' has a wrong offset!");
//static_assert(offsetof(BANS_GSDisableEnterGlide_GSNotifyBeginCS, TotalDuration) == 0x000040, "Member 'BANS_GSDisableEnterGlide_GSNotifyBeginCS::TotalDuration' has a wrong offset!");

// Function b1-Managed.BANS_GSDisableEnterGlide.GSNotifyEndCS
// 0x0040 (0x0040 - 0x0000)
struct BANS_GSDisableEnterGlide_GSNotifyEndCS final
{
public:
	struct FUStGSNotifyParam                      NotifyParam;                                       // 0x0000(0x0040)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
//static_assert(alignof(BANS_GSDisableEnterGlide_GSNotifyEndCS) == 0x000008, "Wrong alignment on BANS_GSDisableEnterGlide_GSNotifyEndCS");
//static_assert(sizeof(BANS_GSDisableEnterGlide_GSNotifyEndCS) == 0x000040, "Wrong size on BANS_GSDisableEnterGlide_GSNotifyEndCS");
//static_assert(offsetof(BANS_GSDisableEnterGlide_GSNotifyEndCS, NotifyParam) == 0x000000, "Member 'BANS_GSDisableEnterGlide_GSNotifyEndCS::NotifyParam' has a wrong offset!");

// Function b1-Managed.BED_QuestNode_PlayerCastSkill.PostPropertyChanged
// 0x0020 (0x0020 - 0x0000)
struct BED_QuestNode_PlayerCastSkill_PostPropertyChanged final
{
public:
	class FString                                 MemberName;                                        // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash)
	class FString                                 PropertyName;                                      // 0x0010(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash)
};
//static_assert(alignof(BED_QuestNode_PlayerCastSkill_PostPropertyChanged) == 0x000008, "Wrong alignment on BED_QuestNode_PlayerCastSkill_PostPropertyChanged");
//static_assert(sizeof(BED_QuestNode_PlayerCastSkill_PostPropertyChanged) == 0x000020, "Wrong size on BED_QuestNode_PlayerCastSkill_PostPropertyChanged");
//static_assert(offsetof(BED_QuestNode_PlayerCastSkill_PostPropertyChanged, MemberName) == 0x000000, "Member 'BED_QuestNode_PlayerCastSkill_PostPropertyChanged::MemberName' has a wrong offset!");
//static_assert(offsetof(BED_QuestNode_PlayerCastSkill_PostPropertyChanged, PropertyName) == 0x000010, "Member 'BED_QuestNode_PlayerCastSkill_PostPropertyChanged::PropertyName' has a wrong offset!");

// Function b1-Managed.BED_QuestNode_PlayerCastSkill.GetNodeDescriptionInCS
// 0x0010 (0x0010 - 0x0000)
struct BED_QuestNode_PlayerCastSkill_GetNodeDescriptionInCS final
{
public:
	class FString                                 ReturnValue;                                       // 0x0000(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash)
};
//static_assert(alignof(BED_QuestNode_PlayerCastSkill_GetNodeDescriptionInCS) == 0x000008, "Wrong alignment on BED_QuestNode_PlayerCastSkill_GetNodeDescriptionInCS");
//static_assert(sizeof(BED_QuestNode_PlayerCastSkill_GetNodeDescriptionInCS) == 0x000010, "Wrong size on BED_QuestNode_PlayerCastSkill_GetNodeDescriptionInCS");
//static_assert(offsetof(BED_QuestNode_PlayerCastSkill_GetNodeDescriptionInCS, ReturnValue) == 0x000000, "Member 'BED_QuestNode_PlayerCastSkill_GetNodeDescriptionInCS::ReturnValue' has a wrong offset!");

// Function b1-Managed.BANS_GSMoveWindow.GSNotifyBeginCS
// 0x0048 (0x0048 - 0x0000)
struct BANS_GSMoveWindow_GSNotifyBeginCS final
{
public:
	struct FUStGSNotifyParam                      NotifyParam;                                       // 0x0000(0x0040)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
	float                                         TotalDuration;                                     // 0x0040(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
//static_assert(alignof(BANS_GSMoveWindow_GSNotifyBeginCS) == 0x000008, "Wrong alignment on BANS_GSMoveWindow_GSNotifyBeginCS");
//static_assert(sizeof(BANS_GSMoveWindow_GSNotifyBeginCS) == 0x000048, "Wrong size on BANS_GSMoveWindow_GSNotifyBeginCS");
//static_assert(offsetof(BANS_GSMoveWindow_GSNotifyBeginCS, NotifyParam) == 0x000000, "Member 'BANS_GSMoveWindow_GSNotifyBeginCS::NotifyParam' has a wrong offset!");
//static_assert(offsetof(BANS_GSMoveWindow_GSNotifyBeginCS, TotalDuration) == 0x000040, "Member 'BANS_GSMoveWindow_GSNotifyBeginCS::TotalDuration' has a wrong offset!");

// Function b1-Managed.BANS_GSProcessDeathInASS.GSNotifyBeginCS
// 0x0048 (0x0048 - 0x0000)
struct BANS_GSProcessDeathInASS_GSNotifyBeginCS final
{
public:
	struct FUStGSNotifyParam                      NotifyParam;                                       // 0x0000(0x0040)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
	float                                         TotalDuration;                                     // 0x0040(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
//static_assert(alignof(BANS_GSProcessDeathInASS_GSNotifyBeginCS) == 0x000008, "Wrong alignment on BANS_GSProcessDeathInASS_GSNotifyBeginCS");
//static_assert(sizeof(BANS_GSProcessDeathInASS_GSNotifyBeginCS) == 0x000048, "Wrong size on BANS_GSProcessDeathInASS_GSNotifyBeginCS");
//static_assert(offsetof(BANS_GSProcessDeathInASS_GSNotifyBeginCS, NotifyParam) == 0x000000, "Member 'BANS_GSProcessDeathInASS_GSNotifyBeginCS::NotifyParam' has a wrong offset!");
//static_assert(offsetof(BANS_GSProcessDeathInASS_GSNotifyBeginCS, TotalDuration) == 0x000040, "Member 'BANS_GSProcessDeathInASS_GSNotifyBeginCS::TotalDuration' has a wrong offset!");

// Function b1-Managed.BANS_GSSliceRuntimeMesh.GSNotifyBeginCS
// 0x0048 (0x0048 - 0x0000)
struct BANS_GSSliceRuntimeMesh_GSNotifyBeginCS final
{
public:
	struct FUStGSNotifyParam                      NotifyParam;                                       // 0x0000(0x0040)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
	float                                         TotalDuration;                                     // 0x0040(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
//static_assert(alignof(BANS_GSSliceRuntimeMesh_GSNotifyBeginCS) == 0x000008, "Wrong alignment on BANS_GSSliceRuntimeMesh_GSNotifyBeginCS");
//static_assert(sizeof(BANS_GSSliceRuntimeMesh_GSNotifyBeginCS) == 0x000048, "Wrong size on BANS_GSSliceRuntimeMesh_GSNotifyBeginCS");
//static_assert(offsetof(BANS_GSSliceRuntimeMesh_GSNotifyBeginCS, NotifyParam) == 0x000000, "Member 'BANS_GSSliceRuntimeMesh_GSNotifyBeginCS::NotifyParam' has a wrong offset!");
//static_assert(offsetof(BANS_GSSliceRuntimeMesh_GSNotifyBeginCS, TotalDuration) == 0x000040, "Member 'BANS_GSSliceRuntimeMesh_GSNotifyBeginCS::TotalDuration' has a wrong offset!");

// Function b1-Managed.BANS_GSSliceRuntimeMesh.GSNotifyTickCS
// 0x0048 (0x0048 - 0x0000)
struct BANS_GSSliceRuntimeMesh_GSNotifyTickCS final
{
public:
	struct FUStGSNotifyParam                      NotifyParam;                                       // 0x0000(0x0040)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
	float                                         FrameDeltaTime;                                    // 0x0040(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
//static_assert(alignof(BANS_GSSliceRuntimeMesh_GSNotifyTickCS) == 0x000008, "Wrong alignment on BANS_GSSliceRuntimeMesh_GSNotifyTickCS");
//static_assert(sizeof(BANS_GSSliceRuntimeMesh_GSNotifyTickCS) == 0x000048, "Wrong size on BANS_GSSliceRuntimeMesh_GSNotifyTickCS");
//static_assert(offsetof(BANS_GSSliceRuntimeMesh_GSNotifyTickCS, NotifyParam) == 0x000000, "Member 'BANS_GSSliceRuntimeMesh_GSNotifyTickCS::NotifyParam' has a wrong offset!");
//static_assert(offsetof(BANS_GSSliceRuntimeMesh_GSNotifyTickCS, FrameDeltaTime) == 0x000040, "Member 'BANS_GSSliceRuntimeMesh_GSNotifyTickCS::FrameDeltaTime' has a wrong offset!");

// Function b1-Managed.BANS_GSSliceRuntimeMesh.GSNotifyEndCS
// 0x0040 (0x0040 - 0x0000)
struct BANS_GSSliceRuntimeMesh_GSNotifyEndCS final
{
public:
	struct FUStGSNotifyParam                      NotifyParam;                                       // 0x0000(0x0040)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
//static_assert(alignof(BANS_GSSliceRuntimeMesh_GSNotifyEndCS) == 0x000008, "Wrong alignment on BANS_GSSliceRuntimeMesh_GSNotifyEndCS");
//static_assert(sizeof(BANS_GSSliceRuntimeMesh_GSNotifyEndCS) == 0x000040, "Wrong size on BANS_GSSliceRuntimeMesh_GSNotifyEndCS");
//static_assert(offsetof(BANS_GSSliceRuntimeMesh_GSNotifyEndCS, NotifyParam) == 0x000000, "Member 'BANS_GSSliceRuntimeMesh_GSNotifyEndCS::NotifyParam' has a wrong offset!");

// Function b1-Managed.BED_QuestNode_SetAwardState.GetNodeDescriptionInCS
// 0x0010 (0x0010 - 0x0000)
struct BED_QuestNode_SetAwardState_GetNodeDescriptionInCS final
{
public:
	class FString                                 ReturnValue;                                       // 0x0000(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash)
};
//static_assert(alignof(BED_QuestNode_SetAwardState_GetNodeDescriptionInCS) == 0x000008, "Wrong alignment on BED_QuestNode_SetAwardState_GetNodeDescriptionInCS");
//static_assert(sizeof(BED_QuestNode_SetAwardState_GetNodeDescriptionInCS) == 0x000010, "Wrong size on BED_QuestNode_SetAwardState_GetNodeDescriptionInCS");
//static_assert(offsetof(BED_QuestNode_SetAwardState_GetNodeDescriptionInCS, ReturnValue) == 0x000000, "Member 'BED_QuestNode_SetAwardState_GetNodeDescriptionInCS::ReturnValue' has a wrong offset!");

// Function b1-Managed.BANS_GSModifyDestructible.GSNotifyBeginCS
// 0x0048 (0x0048 - 0x0000)
struct BANS_GSModifyDestructible_GSNotifyBeginCS final
{
public:
	struct FUStGSNotifyParam                      NotifyParam;                                       // 0x0000(0x0040)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
	float                                         TotalDuration;                                     // 0x0040(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
//static_assert(alignof(BANS_GSModifyDestructible_GSNotifyBeginCS) == 0x000008, "Wrong alignment on BANS_GSModifyDestructible_GSNotifyBeginCS");
//static_assert(sizeof(BANS_GSModifyDestructible_GSNotifyBeginCS) == 0x000048, "Wrong size on BANS_GSModifyDestructible_GSNotifyBeginCS");
//static_assert(offsetof(BANS_GSModifyDestructible_GSNotifyBeginCS, NotifyParam) == 0x000000, "Member 'BANS_GSModifyDestructible_GSNotifyBeginCS::NotifyParam' has a wrong offset!");
//static_assert(offsetof(BANS_GSModifyDestructible_GSNotifyBeginCS, TotalDuration) == 0x000040, "Member 'BANS_GSModifyDestructible_GSNotifyBeginCS::TotalDuration' has a wrong offset!");

// Function b1-Managed.BANS_GSModifyDestructible.GSNotifyTickCS
// 0x0048 (0x0048 - 0x0000)
struct BANS_GSModifyDestructible_GSNotifyTickCS final
{
public:
	struct FUStGSNotifyParam                      NotifyParam;                                       // 0x0000(0x0040)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
	float                                         FrameDeltaTime;                                    // 0x0040(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
//static_assert(alignof(BANS_GSModifyDestructible_GSNotifyTickCS) == 0x000008, "Wrong alignment on BANS_GSModifyDestructible_GSNotifyTickCS");
//static_assert(sizeof(BANS_GSModifyDestructible_GSNotifyTickCS) == 0x000048, "Wrong size on BANS_GSModifyDestructible_GSNotifyTickCS");
//static_assert(offsetof(BANS_GSModifyDestructible_GSNotifyTickCS, NotifyParam) == 0x000000, "Member 'BANS_GSModifyDestructible_GSNotifyTickCS::NotifyParam' has a wrong offset!");
//static_assert(offsetof(BANS_GSModifyDestructible_GSNotifyTickCS, FrameDeltaTime) == 0x000040, "Member 'BANS_GSModifyDestructible_GSNotifyTickCS::FrameDeltaTime' has a wrong offset!");

// Function b1-Managed.BANS_GSModifyDestructible.GSNotifyEndCS
// 0x0040 (0x0040 - 0x0000)
struct BANS_GSModifyDestructible_GSNotifyEndCS final
{
public:
	struct FUStGSNotifyParam                      NotifyParam;                                       // 0x0000(0x0040)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
//static_assert(alignof(BANS_GSModifyDestructible_GSNotifyEndCS) == 0x000008, "Wrong alignment on BANS_GSModifyDestructible_GSNotifyEndCS");
//static_assert(sizeof(BANS_GSModifyDestructible_GSNotifyEndCS) == 0x000040, "Wrong size on BANS_GSModifyDestructible_GSNotifyEndCS");
//static_assert(offsetof(BANS_GSModifyDestructible_GSNotifyEndCS, NotifyParam) == 0x000000, "Member 'BANS_GSModifyDestructible_GSNotifyEndCS::NotifyParam' has a wrong offset!");

// Function b1-Managed.BANS_GSDestroyWeapon.GSNotifyBeginCS
// 0x0048 (0x0048 - 0x0000)
struct BANS_GSDestroyWeapon_GSNotifyBeginCS final
{
public:
	struct FUStGSNotifyParam                      NotifyParam;                                       // 0x0000(0x0040)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
	float                                         TotalDuration;                                     // 0x0040(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
//static_assert(alignof(BANS_GSDestroyWeapon_GSNotifyBeginCS) == 0x000008, "Wrong alignment on BANS_GSDestroyWeapon_GSNotifyBeginCS");
//static_assert(sizeof(BANS_GSDestroyWeapon_GSNotifyBeginCS) == 0x000048, "Wrong size on BANS_GSDestroyWeapon_GSNotifyBeginCS");
//static_assert(offsetof(BANS_GSDestroyWeapon_GSNotifyBeginCS, NotifyParam) == 0x000000, "Member 'BANS_GSDestroyWeapon_GSNotifyBeginCS::NotifyParam' has a wrong offset!");
//static_assert(offsetof(BANS_GSDestroyWeapon_GSNotifyBeginCS, TotalDuration) == 0x000040, "Member 'BANS_GSDestroyWeapon_GSNotifyBeginCS::TotalDuration' has a wrong offset!");

// Function b1-Managed.BED_TaskNode_ObserveSequence.GetNodeDescriptionInCS
// 0x0010 (0x0010 - 0x0000)
struct BED_TaskNode_ObserveSequence_GetNodeDescriptionInCS final
{
public:
	class FString                                 ReturnValue;                                       // 0x0000(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash)
};
//static_assert(alignof(BED_TaskNode_ObserveSequence_GetNodeDescriptionInCS) == 0x000008, "Wrong alignment on BED_TaskNode_ObserveSequence_GetNodeDescriptionInCS");
//static_assert(sizeof(BED_TaskNode_ObserveSequence_GetNodeDescriptionInCS) == 0x000010, "Wrong size on BED_TaskNode_ObserveSequence_GetNodeDescriptionInCS");
//static_assert(offsetof(BED_TaskNode_ObserveSequence_GetNodeDescriptionInCS, ReturnValue) == 0x000000, "Member 'BED_TaskNode_ObserveSequence_GetNodeDescriptionInCS::ReturnValue' has a wrong offset!");

// Function b1-Managed.BANS_GSAddPostProcessMat.GSNotifyBeginCS
// 0x0048 (0x0048 - 0x0000)
struct BANS_GSAddPostProcessMat_GSNotifyBeginCS final
{
public:
	struct FUStGSNotifyParam                      NotifyParam;                                       // 0x0000(0x0040)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
	float                                         TotalDuration;                                     // 0x0040(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
//static_assert(alignof(BANS_GSAddPostProcessMat_GSNotifyBeginCS) == 0x000008, "Wrong alignment on BANS_GSAddPostProcessMat_GSNotifyBeginCS");
//static_assert(sizeof(BANS_GSAddPostProcessMat_GSNotifyBeginCS) == 0x000048, "Wrong size on BANS_GSAddPostProcessMat_GSNotifyBeginCS");
//static_assert(offsetof(BANS_GSAddPostProcessMat_GSNotifyBeginCS, NotifyParam) == 0x000000, "Member 'BANS_GSAddPostProcessMat_GSNotifyBeginCS::NotifyParam' has a wrong offset!");
//static_assert(offsetof(BANS_GSAddPostProcessMat_GSNotifyBeginCS, TotalDuration) == 0x000040, "Member 'BANS_GSAddPostProcessMat_GSNotifyBeginCS::TotalDuration' has a wrong offset!");

// Function b1-Managed.BANS_GSAddPostProcessMat.GSNotifyEndCS
// 0x0040 (0x0040 - 0x0000)
struct BANS_GSAddPostProcessMat_GSNotifyEndCS final
{
public:
	struct FUStGSNotifyParam                      NotifyParam;                                       // 0x0000(0x0040)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
//static_assert(alignof(BANS_GSAddPostProcessMat_GSNotifyEndCS) == 0x000008, "Wrong alignment on BANS_GSAddPostProcessMat_GSNotifyEndCS");
//static_assert(sizeof(BANS_GSAddPostProcessMat_GSNotifyEndCS) == 0x000040, "Wrong size on BANS_GSAddPostProcessMat_GSNotifyEndCS");
//static_assert(offsetof(BANS_GSAddPostProcessMat_GSNotifyEndCS, NotifyParam) == 0x000000, "Member 'BANS_GSAddPostProcessMat_GSNotifyEndCS::NotifyParam' has a wrong offset!");

// Function b1-Managed.BANS_GSAutoCheckBlock.GSNotifyBeginCS
// 0x0048 (0x0048 - 0x0000)
struct BANS_GSAutoCheckBlock_GSNotifyBeginCS final
{
public:
	struct FUStGSNotifyParam                      NotifyParam;                                       // 0x0000(0x0040)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
	float                                         TotalDuration;                                     // 0x0040(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
//static_assert(alignof(BANS_GSAutoCheckBlock_GSNotifyBeginCS) == 0x000008, "Wrong alignment on BANS_GSAutoCheckBlock_GSNotifyBeginCS");
//static_assert(sizeof(BANS_GSAutoCheckBlock_GSNotifyBeginCS) == 0x000048, "Wrong size on BANS_GSAutoCheckBlock_GSNotifyBeginCS");
//static_assert(offsetof(BANS_GSAutoCheckBlock_GSNotifyBeginCS, NotifyParam) == 0x000000, "Member 'BANS_GSAutoCheckBlock_GSNotifyBeginCS::NotifyParam' has a wrong offset!");
//static_assert(offsetof(BANS_GSAutoCheckBlock_GSNotifyBeginCS, TotalDuration) == 0x000040, "Member 'BANS_GSAutoCheckBlock_GSNotifyBeginCS::TotalDuration' has a wrong offset!");

// Function b1-Managed.BANS_GSAutoCheckBlock.GSNotifyEndCS
// 0x0040 (0x0040 - 0x0000)
struct BANS_GSAutoCheckBlock_GSNotifyEndCS final
{
public:
	struct FUStGSNotifyParam                      NotifyParam;                                       // 0x0000(0x0040)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
//static_assert(alignof(BANS_GSAutoCheckBlock_GSNotifyEndCS) == 0x000008, "Wrong alignment on BANS_GSAutoCheckBlock_GSNotifyEndCS");
//static_assert(sizeof(BANS_GSAutoCheckBlock_GSNotifyEndCS) == 0x000040, "Wrong size on BANS_GSAutoCheckBlock_GSNotifyEndCS");
//static_assert(offsetof(BANS_GSAutoCheckBlock_GSNotifyEndCS, NotifyParam) == 0x000000, "Member 'BANS_GSAutoCheckBlock_GSNotifyEndCS::NotifyParam' has a wrong offset!");

// Function b1-Managed.BED_TaskNode_QueryCompoundCondition.GetNodeDescriptionInCS
// 0x0010 (0x0010 - 0x0000)
struct BED_TaskNode_QueryCompoundCondition_GetNodeDescriptionInCS final
{
public:
	class FString                                 ReturnValue;                                       // 0x0000(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash)
};
//static_assert(alignof(BED_TaskNode_QueryCompoundCondition_GetNodeDescriptionInCS) == 0x000008, "Wrong alignment on BED_TaskNode_QueryCompoundCondition_GetNodeDescriptionInCS");
//static_assert(sizeof(BED_TaskNode_QueryCompoundCondition_GetNodeDescriptionInCS) == 0x000010, "Wrong size on BED_TaskNode_QueryCompoundCondition_GetNodeDescriptionInCS");
//static_assert(offsetof(BED_TaskNode_QueryCompoundCondition_GetNodeDescriptionInCS, ReturnValue) == 0x000000, "Member 'BED_TaskNode_QueryCompoundCondition_GetNodeDescriptionInCS::ReturnValue' has a wrong offset!");

// Function b1-Managed.BANS_GSCatchAndThrow.GSNotifyBeginCS
// 0x0048 (0x0048 - 0x0000)
struct BANS_GSCatchAndThrow_GSNotifyBeginCS final
{
public:
	struct FUStGSNotifyParam                      NotifyParam;                                       // 0x0000(0x0040)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
	float                                         TotalDuration;                                     // 0x0040(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
//static_assert(alignof(BANS_GSCatchAndThrow_GSNotifyBeginCS) == 0x000008, "Wrong alignment on BANS_GSCatchAndThrow_GSNotifyBeginCS");
//static_assert(sizeof(BANS_GSCatchAndThrow_GSNotifyBeginCS) == 0x000048, "Wrong size on BANS_GSCatchAndThrow_GSNotifyBeginCS");
//static_assert(offsetof(BANS_GSCatchAndThrow_GSNotifyBeginCS, NotifyParam) == 0x000000, "Member 'BANS_GSCatchAndThrow_GSNotifyBeginCS::NotifyParam' has a wrong offset!");
//static_assert(offsetof(BANS_GSCatchAndThrow_GSNotifyBeginCS, TotalDuration) == 0x000040, "Member 'BANS_GSCatchAndThrow_GSNotifyBeginCS::TotalDuration' has a wrong offset!");

// Function b1-Managed.BANS_GSCatchAndThrow.GSNotifyTickCS
// 0x0048 (0x0048 - 0x0000)
struct BANS_GSCatchAndThrow_GSNotifyTickCS final
{
public:
	struct FUStGSNotifyParam                      NotifyParam;                                       // 0x0000(0x0040)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
	float                                         FrameDeltaTime;                                    // 0x0040(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
//static_assert(alignof(BANS_GSCatchAndThrow_GSNotifyTickCS) == 0x000008, "Wrong alignment on BANS_GSCatchAndThrow_GSNotifyTickCS");
//static_assert(sizeof(BANS_GSCatchAndThrow_GSNotifyTickCS) == 0x000048, "Wrong size on BANS_GSCatchAndThrow_GSNotifyTickCS");
//static_assert(offsetof(BANS_GSCatchAndThrow_GSNotifyTickCS, NotifyParam) == 0x000000, "Member 'BANS_GSCatchAndThrow_GSNotifyTickCS::NotifyParam' has a wrong offset!");
//static_assert(offsetof(BANS_GSCatchAndThrow_GSNotifyTickCS, FrameDeltaTime) == 0x000040, "Member 'BANS_GSCatchAndThrow_GSNotifyTickCS::FrameDeltaTime' has a wrong offset!");

// Function b1-Managed.BANS_GSCatchAndThrow.GSNotifyEndCS
// 0x0040 (0x0040 - 0x0000)
struct BANS_GSCatchAndThrow_GSNotifyEndCS final
{
public:
	struct FUStGSNotifyParam                      NotifyParam;                                       // 0x0000(0x0040)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
//static_assert(alignof(BANS_GSCatchAndThrow_GSNotifyEndCS) == 0x000008, "Wrong alignment on BANS_GSCatchAndThrow_GSNotifyEndCS");
//static_assert(sizeof(BANS_GSCatchAndThrow_GSNotifyEndCS) == 0x000040, "Wrong size on BANS_GSCatchAndThrow_GSNotifyEndCS");
//static_assert(offsetof(BANS_GSCatchAndThrow_GSNotifyEndCS, NotifyParam) == 0x000000, "Member 'BANS_GSCatchAndThrow_GSNotifyEndCS::NotifyParam' has a wrong offset!");

// Function b1-Managed.BANS_GSAimOffsetBlendOutToBlendIn.GSNotifyBeginCS
// 0x0048 (0x0048 - 0x0000)
struct BANS_GSAimOffsetBlendOutToBlendIn_GSNotifyBeginCS final
{
public:
	struct FUStGSNotifyParam                      NotifyParam;                                       // 0x0000(0x0040)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
	float                                         TotalDuration;                                     // 0x0040(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
//static_assert(alignof(BANS_GSAimOffsetBlendOutToBlendIn_GSNotifyBeginCS) == 0x000008, "Wrong alignment on BANS_GSAimOffsetBlendOutToBlendIn_GSNotifyBeginCS");
//static_assert(sizeof(BANS_GSAimOffsetBlendOutToBlendIn_GSNotifyBeginCS) == 0x000048, "Wrong size on BANS_GSAimOffsetBlendOutToBlendIn_GSNotifyBeginCS");
//static_assert(offsetof(BANS_GSAimOffsetBlendOutToBlendIn_GSNotifyBeginCS, NotifyParam) == 0x000000, "Member 'BANS_GSAimOffsetBlendOutToBlendIn_GSNotifyBeginCS::NotifyParam' has a wrong offset!");
//static_assert(offsetof(BANS_GSAimOffsetBlendOutToBlendIn_GSNotifyBeginCS, TotalDuration) == 0x000040, "Member 'BANS_GSAimOffsetBlendOutToBlendIn_GSNotifyBeginCS::TotalDuration' has a wrong offset!");

// Function b1-Managed.BANS_GSAimOffsetBlendOutToBlendIn.GSNotifyEndCS
// 0x0040 (0x0040 - 0x0000)
struct BANS_GSAimOffsetBlendOutToBlendIn_GSNotifyEndCS final
{
public:
	struct FUStGSNotifyParam                      NotifyParam;                                       // 0x0000(0x0040)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
//static_assert(alignof(BANS_GSAimOffsetBlendOutToBlendIn_GSNotifyEndCS) == 0x000008, "Wrong alignment on BANS_GSAimOffsetBlendOutToBlendIn_GSNotifyEndCS");
//static_assert(sizeof(BANS_GSAimOffsetBlendOutToBlendIn_GSNotifyEndCS) == 0x000040, "Wrong size on BANS_GSAimOffsetBlendOutToBlendIn_GSNotifyEndCS");
//static_assert(offsetof(BANS_GSAimOffsetBlendOutToBlendIn_GSNotifyEndCS, NotifyParam) == 0x000000, "Member 'BANS_GSAimOffsetBlendOutToBlendIn_GSNotifyEndCS::NotifyParam' has a wrong offset!");

// Function b1-Managed.BANS_GSAISkillFeature.GSNotifyBeginCS
// 0x0048 (0x0048 - 0x0000)
struct BANS_GSAISkillFeature_GSNotifyBeginCS final
{
public:
	struct FUStGSNotifyParam                      NotifyParam;                                       // 0x0000(0x0040)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
	float                                         TotalDuration;                                     // 0x0040(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
//static_assert(alignof(BANS_GSAISkillFeature_GSNotifyBeginCS) == 0x000008, "Wrong alignment on BANS_GSAISkillFeature_GSNotifyBeginCS");
//static_assert(sizeof(BANS_GSAISkillFeature_GSNotifyBeginCS) == 0x000048, "Wrong size on BANS_GSAISkillFeature_GSNotifyBeginCS");
//static_assert(offsetof(BANS_GSAISkillFeature_GSNotifyBeginCS, NotifyParam) == 0x000000, "Member 'BANS_GSAISkillFeature_GSNotifyBeginCS::NotifyParam' has a wrong offset!");
//static_assert(offsetof(BANS_GSAISkillFeature_GSNotifyBeginCS, TotalDuration) == 0x000040, "Member 'BANS_GSAISkillFeature_GSNotifyBeginCS::TotalDuration' has a wrong offset!");

// Function b1-Managed.BANS_GSAddBuffByID.GSValidateInputCS
// 0x0008 (0x0008 - 0x0000)
struct BANS_GSAddBuffByID_GSValidateInputCS final
{
public:
	class AActor*                                 Actor;                                             // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
//static_assert(alignof(BANS_GSAddBuffByID_GSValidateInputCS) == 0x000008, "Wrong alignment on BANS_GSAddBuffByID_GSValidateInputCS");
//static_assert(sizeof(BANS_GSAddBuffByID_GSValidateInputCS) == 0x000008, "Wrong size on BANS_GSAddBuffByID_GSValidateInputCS");
//static_assert(offsetof(BANS_GSAddBuffByID_GSValidateInputCS, Actor) == 0x000000, "Member 'BANS_GSAddBuffByID_GSValidateInputCS::Actor' has a wrong offset!");

// Function b1-Managed.BANS_GSAddBuffByID.GSNotifyBeginCS
// 0x0048 (0x0048 - 0x0000)
struct BANS_GSAddBuffByID_GSNotifyBeginCS final
{
public:
	struct FUStGSNotifyParam                      NotifyParam;                                       // 0x0000(0x0040)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
	float                                         TotalDuration;                                     // 0x0040(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
//static_assert(alignof(BANS_GSAddBuffByID_GSNotifyBeginCS) == 0x000008, "Wrong alignment on BANS_GSAddBuffByID_GSNotifyBeginCS");
//static_assert(sizeof(BANS_GSAddBuffByID_GSNotifyBeginCS) == 0x000048, "Wrong size on BANS_GSAddBuffByID_GSNotifyBeginCS");
//static_assert(offsetof(BANS_GSAddBuffByID_GSNotifyBeginCS, NotifyParam) == 0x000000, "Member 'BANS_GSAddBuffByID_GSNotifyBeginCS::NotifyParam' has a wrong offset!");
//static_assert(offsetof(BANS_GSAddBuffByID_GSNotifyBeginCS, TotalDuration) == 0x000040, "Member 'BANS_GSAddBuffByID_GSNotifyBeginCS::TotalDuration' has a wrong offset!");

// Function b1-Managed.BANS_GSAddBuffByID.GSNotifyTickCS
// 0x0048 (0x0048 - 0x0000)
struct BANS_GSAddBuffByID_GSNotifyTickCS final
{
public:
	struct FUStGSNotifyParam                      NotifyParam;                                       // 0x0000(0x0040)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
	float                                         FrameDeltaTime;                                    // 0x0040(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
//static_assert(alignof(BANS_GSAddBuffByID_GSNotifyTickCS) == 0x000008, "Wrong alignment on BANS_GSAddBuffByID_GSNotifyTickCS");
//static_assert(sizeof(BANS_GSAddBuffByID_GSNotifyTickCS) == 0x000048, "Wrong size on BANS_GSAddBuffByID_GSNotifyTickCS");
//static_assert(offsetof(BANS_GSAddBuffByID_GSNotifyTickCS, NotifyParam) == 0x000000, "Member 'BANS_GSAddBuffByID_GSNotifyTickCS::NotifyParam' has a wrong offset!");
//static_assert(offsetof(BANS_GSAddBuffByID_GSNotifyTickCS, FrameDeltaTime) == 0x000040, "Member 'BANS_GSAddBuffByID_GSNotifyTickCS::FrameDeltaTime' has a wrong offset!");

// Function b1-Managed.BANS_GSAddBuffByID.GSNotifyEndCS
// 0x0040 (0x0040 - 0x0000)
struct BANS_GSAddBuffByID_GSNotifyEndCS final
{
public:
	struct FUStGSNotifyParam                      NotifyParam;                                       // 0x0000(0x0040)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
//static_assert(alignof(BANS_GSAddBuffByID_GSNotifyEndCS) == 0x000008, "Wrong alignment on BANS_GSAddBuffByID_GSNotifyEndCS");
//static_assert(sizeof(BANS_GSAddBuffByID_GSNotifyEndCS) == 0x000040, "Wrong size on BANS_GSAddBuffByID_GSNotifyEndCS");
//static_assert(offsetof(BANS_GSAddBuffByID_GSNotifyEndCS, NotifyParam) == 0x000000, "Member 'BANS_GSAddBuffByID_GSNotifyEndCS::NotifyParam' has a wrong offset!");

// Function b1-Managed.BED_MovieNode_PerformerRemoveBuff.GetNodeDescriptionInCS
// 0x0010 (0x0010 - 0x0000)
struct BED_MovieNode_PerformerRemoveBuff_GetNodeDescriptionInCS final
{
public:
	class FString                                 ReturnValue;                                       // 0x0000(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash)
};
//static_assert(alignof(BED_MovieNode_PerformerRemoveBuff_GetNodeDescriptionInCS) == 0x000008, "Wrong alignment on BED_MovieNode_PerformerRemoveBuff_GetNodeDescriptionInCS");
//static_assert(sizeof(BED_MovieNode_PerformerRemoveBuff_GetNodeDescriptionInCS) == 0x000010, "Wrong size on BED_MovieNode_PerformerRemoveBuff_GetNodeDescriptionInCS");
//static_assert(offsetof(BED_MovieNode_PerformerRemoveBuff_GetNodeDescriptionInCS, ReturnValue) == 0x000000, "Member 'BED_MovieNode_PerformerRemoveBuff_GetNodeDescriptionInCS::ReturnValue' has a wrong offset!");

// Function b1-Managed.BANS_GSAlignAttackToSlope.GSNotifyBeginCS
// 0x0048 (0x0048 - 0x0000)
struct BANS_GSAlignAttackToSlope_GSNotifyBeginCS final
{
public:
	struct FUStGSNotifyParam                      NotifyParam;                                       // 0x0000(0x0040)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
	float                                         TotalDuration;                                     // 0x0040(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
//static_assert(alignof(BANS_GSAlignAttackToSlope_GSNotifyBeginCS) == 0x000008, "Wrong alignment on BANS_GSAlignAttackToSlope_GSNotifyBeginCS");
//static_assert(sizeof(BANS_GSAlignAttackToSlope_GSNotifyBeginCS) == 0x000048, "Wrong size on BANS_GSAlignAttackToSlope_GSNotifyBeginCS");
//static_assert(offsetof(BANS_GSAlignAttackToSlope_GSNotifyBeginCS, NotifyParam) == 0x000000, "Member 'BANS_GSAlignAttackToSlope_GSNotifyBeginCS::NotifyParam' has a wrong offset!");
//static_assert(offsetof(BANS_GSAlignAttackToSlope_GSNotifyBeginCS, TotalDuration) == 0x000040, "Member 'BANS_GSAlignAttackToSlope_GSNotifyBeginCS::TotalDuration' has a wrong offset!");

// Function b1-Managed.BANS_GSAlignAttackToSlope.GSNotifyTickCS
// 0x0048 (0x0048 - 0x0000)
struct BANS_GSAlignAttackToSlope_GSNotifyTickCS final
{
public:
	struct FUStGSNotifyParam                      NotifyParam;                                       // 0x0000(0x0040)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
	float                                         FrameDeltaTime;                                    // 0x0040(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
//static_assert(alignof(BANS_GSAlignAttackToSlope_GSNotifyTickCS) == 0x000008, "Wrong alignment on BANS_GSAlignAttackToSlope_GSNotifyTickCS");
//static_assert(sizeof(BANS_GSAlignAttackToSlope_GSNotifyTickCS) == 0x000048, "Wrong size on BANS_GSAlignAttackToSlope_GSNotifyTickCS");
//static_assert(offsetof(BANS_GSAlignAttackToSlope_GSNotifyTickCS, NotifyParam) == 0x000000, "Member 'BANS_GSAlignAttackToSlope_GSNotifyTickCS::NotifyParam' has a wrong offset!");
//static_assert(offsetof(BANS_GSAlignAttackToSlope_GSNotifyTickCS, FrameDeltaTime) == 0x000040, "Member 'BANS_GSAlignAttackToSlope_GSNotifyTickCS::FrameDeltaTime' has a wrong offset!");

// Function b1-Managed.BANS_GSAlignAttackToSlope.GSNotifyEndCS
// 0x0040 (0x0040 - 0x0000)
struct BANS_GSAlignAttackToSlope_GSNotifyEndCS final
{
public:
	struct FUStGSNotifyParam                      NotifyParam;                                       // 0x0000(0x0040)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
//static_assert(alignof(BANS_GSAlignAttackToSlope_GSNotifyEndCS) == 0x000008, "Wrong alignment on BANS_GSAlignAttackToSlope_GSNotifyEndCS");
//static_assert(sizeof(BANS_GSAlignAttackToSlope_GSNotifyEndCS) == 0x000040, "Wrong size on BANS_GSAlignAttackToSlope_GSNotifyEndCS");
//static_assert(offsetof(BANS_GSAlignAttackToSlope_GSNotifyEndCS, NotifyParam) == 0x000000, "Member 'BANS_GSAlignAttackToSlope_GSNotifyEndCS::NotifyParam' has a wrong offset!");

// Function b1-Managed.BANS_GSAttackIKCancle.GSNotifyBeginCS
// 0x0048 (0x0048 - 0x0000)
struct BANS_GSAttackIKCancle_GSNotifyBeginCS final
{
public:
	struct FUStGSNotifyParam                      NotifyParam;                                       // 0x0000(0x0040)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
	float                                         TotalDuration;                                     // 0x0040(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
//static_assert(alignof(BANS_GSAttackIKCancle_GSNotifyBeginCS) == 0x000008, "Wrong alignment on BANS_GSAttackIKCancle_GSNotifyBeginCS");
//static_assert(sizeof(BANS_GSAttackIKCancle_GSNotifyBeginCS) == 0x000048, "Wrong size on BANS_GSAttackIKCancle_GSNotifyBeginCS");
//static_assert(offsetof(BANS_GSAttackIKCancle_GSNotifyBeginCS, NotifyParam) == 0x000000, "Member 'BANS_GSAttackIKCancle_GSNotifyBeginCS::NotifyParam' has a wrong offset!");
//static_assert(offsetof(BANS_GSAttackIKCancle_GSNotifyBeginCS, TotalDuration) == 0x000040, "Member 'BANS_GSAttackIKCancle_GSNotifyBeginCS::TotalDuration' has a wrong offset!");

// Function b1-Managed.BANS_GSAttackIKCancle.GSNotifyTickCS
// 0x0048 (0x0048 - 0x0000)
struct BANS_GSAttackIKCancle_GSNotifyTickCS final
{
public:
	struct FUStGSNotifyParam                      NotifyParam;                                       // 0x0000(0x0040)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
	float                                         FrameDeltaTime;                                    // 0x0040(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
//static_assert(alignof(BANS_GSAttackIKCancle_GSNotifyTickCS) == 0x000008, "Wrong alignment on BANS_GSAttackIKCancle_GSNotifyTickCS");
//static_assert(sizeof(BANS_GSAttackIKCancle_GSNotifyTickCS) == 0x000048, "Wrong size on BANS_GSAttackIKCancle_GSNotifyTickCS");
//static_assert(offsetof(BANS_GSAttackIKCancle_GSNotifyTickCS, NotifyParam) == 0x000000, "Member 'BANS_GSAttackIKCancle_GSNotifyTickCS::NotifyParam' has a wrong offset!");
//static_assert(offsetof(BANS_GSAttackIKCancle_GSNotifyTickCS, FrameDeltaTime) == 0x000040, "Member 'BANS_GSAttackIKCancle_GSNotifyTickCS::FrameDeltaTime' has a wrong offset!");

// Function b1-Managed.BANS_GSAttackIKCancle.GSNotifyEndCS
// 0x0040 (0x0040 - 0x0000)
struct BANS_GSAttackIKCancle_GSNotifyEndCS final
{
public:
	struct FUStGSNotifyParam                      NotifyParam;                                       // 0x0000(0x0040)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
//static_assert(alignof(BANS_GSAttackIKCancle_GSNotifyEndCS) == 0x000008, "Wrong alignment on BANS_GSAttackIKCancle_GSNotifyEndCS");
//static_assert(sizeof(BANS_GSAttackIKCancle_GSNotifyEndCS) == 0x000040, "Wrong size on BANS_GSAttackIKCancle_GSNotifyEndCS");
//static_assert(offsetof(BANS_GSAttackIKCancle_GSNotifyEndCS, NotifyParam) == 0x000000, "Member 'BANS_GSAttackIKCancle_GSNotifyEndCS::NotifyParam' has a wrong offset!");

// Function b1-Managed.BED_MovieNode_PlayEnd.GetNodeDescriptionInCS
// 0x0010 (0x0010 - 0x0000)
struct BED_MovieNode_PlayEnd_GetNodeDescriptionInCS final
{
public:
	class FString                                 ReturnValue;                                       // 0x0000(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash)
};
//static_assert(alignof(BED_MovieNode_PlayEnd_GetNodeDescriptionInCS) == 0x000008, "Wrong alignment on BED_MovieNode_PlayEnd_GetNodeDescriptionInCS");
//static_assert(sizeof(BED_MovieNode_PlayEnd_GetNodeDescriptionInCS) == 0x000010, "Wrong size on BED_MovieNode_PlayEnd_GetNodeDescriptionInCS");
//static_assert(offsetof(BED_MovieNode_PlayEnd_GetNodeDescriptionInCS, ReturnValue) == 0x000000, "Member 'BED_MovieNode_PlayEnd_GetNodeDescriptionInCS::ReturnValue' has a wrong offset!");

// Function b1-Managed.BANS_GSAttackRotation.GSOnSectionManuallyChanged
// 0x0010 (0x0010 - 0x0000)
struct BANS_GSAttackRotation_GSOnSectionManuallyChanged final
{
public:
	class ABGUCharacter*                          OwnerChar;                                         // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         RemainingDuration;                                 // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
//static_assert(alignof(BANS_GSAttackRotation_GSOnSectionManuallyChanged) == 0x000008, "Wrong alignment on BANS_GSAttackRotation_GSOnSectionManuallyChanged");
//static_assert(sizeof(BANS_GSAttackRotation_GSOnSectionManuallyChanged) == 0x000010, "Wrong size on BANS_GSAttackRotation_GSOnSectionManuallyChanged");
//static_assert(offsetof(BANS_GSAttackRotation_GSOnSectionManuallyChanged, OwnerChar) == 0x000000, "Member 'BANS_GSAttackRotation_GSOnSectionManuallyChanged::OwnerChar' has a wrong offset!");
//static_assert(offsetof(BANS_GSAttackRotation_GSOnSectionManuallyChanged, RemainingDuration) == 0x000008, "Member 'BANS_GSAttackRotation_GSOnSectionManuallyChanged::RemainingDuration' has a wrong offset!");

// Function b1-Managed.BANS_GSAttackRotation.GSAllowCrossSection
// 0x0001 (0x0001 - 0x0000)
struct BANS_GSAttackRotation_GSAllowCrossSection final
{
public:
	uint8                                         ReturnValue : 1;                                   // 0x0000(0x0001)(BitIndex: 0x00, PropSize: 0x0001 (Parm, OutParm, ReturnParm, NoDestructor, HasGetValueTypeHash))
};
//static_assert(alignof(BANS_GSAttackRotation_GSAllowCrossSection) == 0x000001, "Wrong alignment on BANS_GSAttackRotation_GSAllowCrossSection");
//static_assert(sizeof(BANS_GSAttackRotation_GSAllowCrossSection) == 0x000001, "Wrong size on BANS_GSAttackRotation_GSAllowCrossSection");

// Function b1-Managed.BANS_GSAttackRotation.GSNotifyBeginCS
// 0x0048 (0x0048 - 0x0000)
struct BANS_GSAttackRotation_GSNotifyBeginCS final
{
public:
	struct FUStGSNotifyParam                      NotifyParam;                                       // 0x0000(0x0040)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
	float                                         TotalDuration;                                     // 0x0040(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
//static_assert(alignof(BANS_GSAttackRotation_GSNotifyBeginCS) == 0x000008, "Wrong alignment on BANS_GSAttackRotation_GSNotifyBeginCS");
//static_assert(sizeof(BANS_GSAttackRotation_GSNotifyBeginCS) == 0x000048, "Wrong size on BANS_GSAttackRotation_GSNotifyBeginCS");
//static_assert(offsetof(BANS_GSAttackRotation_GSNotifyBeginCS, NotifyParam) == 0x000000, "Member 'BANS_GSAttackRotation_GSNotifyBeginCS::NotifyParam' has a wrong offset!");
//static_assert(offsetof(BANS_GSAttackRotation_GSNotifyBeginCS, TotalDuration) == 0x000040, "Member 'BANS_GSAttackRotation_GSNotifyBeginCS::TotalDuration' has a wrong offset!");

// Function b1-Managed.BANS_GSAttackRotation.GSNotifyEndCS
// 0x0040 (0x0040 - 0x0000)
struct BANS_GSAttackRotation_GSNotifyEndCS final
{
public:
	struct FUStGSNotifyParam                      NotifyParam;                                       // 0x0000(0x0040)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
//static_assert(alignof(BANS_GSAttackRotation_GSNotifyEndCS) == 0x000008, "Wrong alignment on BANS_GSAttackRotation_GSNotifyEndCS");
//static_assert(sizeof(BANS_GSAttackRotation_GSNotifyEndCS) == 0x000040, "Wrong size on BANS_GSAttackRotation_GSNotifyEndCS");
//static_assert(offsetof(BANS_GSAttackRotation_GSNotifyEndCS, NotifyParam) == 0x000000, "Member 'BANS_GSAttackRotation_GSNotifyEndCS::NotifyParam' has a wrong offset!");

// Function b1-Managed.BANS_GSAttackRotation.MarkDirty
// 0x0001 (0x0001 - 0x0000)
struct BANS_GSAttackRotation_MarkDirty final
{
public:
	uint8                                         ReturnValue : 1;                                   // 0x0000(0x0001)(BitIndex: 0x00, PropSize: 0x0001 (Parm, OutParm, ReturnParm, NoDestructor, HasGetValueTypeHash))
};
//static_assert(alignof(BANS_GSAttackRotation_MarkDirty) == 0x000001, "Wrong alignment on BANS_GSAttackRotation_MarkDirty");
//static_assert(sizeof(BANS_GSAttackRotation_MarkDirty) == 0x000001, "Wrong size on BANS_GSAttackRotation_MarkDirty");

// Function b1-Managed.BANS_GSAttackRotationForUpperBody.GSNotifyBeginCS
// 0x0048 (0x0048 - 0x0000)
struct BANS_GSAttackRotationForUpperBody_GSNotifyBeginCS final
{
public:
	struct FUStGSNotifyParam                      NotifyParam;                                       // 0x0000(0x0040)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
	float                                         TotalDuration;                                     // 0x0040(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
//static_assert(alignof(BANS_GSAttackRotationForUpperBody_GSNotifyBeginCS) == 0x000008, "Wrong alignment on BANS_GSAttackRotationForUpperBody_GSNotifyBeginCS");
//static_assert(sizeof(BANS_GSAttackRotationForUpperBody_GSNotifyBeginCS) == 0x000048, "Wrong size on BANS_GSAttackRotationForUpperBody_GSNotifyBeginCS");
//static_assert(offsetof(BANS_GSAttackRotationForUpperBody_GSNotifyBeginCS, NotifyParam) == 0x000000, "Member 'BANS_GSAttackRotationForUpperBody_GSNotifyBeginCS::NotifyParam' has a wrong offset!");
//static_assert(offsetof(BANS_GSAttackRotationForUpperBody_GSNotifyBeginCS, TotalDuration) == 0x000040, "Member 'BANS_GSAttackRotationForUpperBody_GSNotifyBeginCS::TotalDuration' has a wrong offset!");

// Function b1-Managed.BANS_GSAttackRotationForUpperBody.GSNotifyEndCS
// 0x0040 (0x0040 - 0x0000)
struct BANS_GSAttackRotationForUpperBody_GSNotifyEndCS final
{
public:
	struct FUStGSNotifyParam                      NotifyParam;                                       // 0x0000(0x0040)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
//static_assert(alignof(BANS_GSAttackRotationForUpperBody_GSNotifyEndCS) == 0x000008, "Wrong alignment on BANS_GSAttackRotationForUpperBody_GSNotifyEndCS");
//static_assert(sizeof(BANS_GSAttackRotationForUpperBody_GSNotifyEndCS) == 0x000040, "Wrong size on BANS_GSAttackRotationForUpperBody_GSNotifyEndCS");
//static_assert(offsetof(BANS_GSAttackRotationForUpperBody_GSNotifyEndCS, NotifyParam) == 0x000000, "Member 'BANS_GSAttackRotationForUpperBody_GSNotifyEndCS::NotifyParam' has a wrong offset!");

// Function b1-Managed.BANS_GSBlendPhysic.GSNotifyBeginCS
// 0x0048 (0x0048 - 0x0000)
struct BANS_GSBlendPhysic_GSNotifyBeginCS final
{
public:
	struct FUStGSNotifyParam                      NotifyParam;                                       // 0x0000(0x0040)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
	float                                         TotalDuration;                                     // 0x0040(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
//static_assert(alignof(BANS_GSBlendPhysic_GSNotifyBeginCS) == 0x000008, "Wrong alignment on BANS_GSBlendPhysic_GSNotifyBeginCS");
//static_assert(sizeof(BANS_GSBlendPhysic_GSNotifyBeginCS) == 0x000048, "Wrong size on BANS_GSBlendPhysic_GSNotifyBeginCS");
//static_assert(offsetof(BANS_GSBlendPhysic_GSNotifyBeginCS, NotifyParam) == 0x000000, "Member 'BANS_GSBlendPhysic_GSNotifyBeginCS::NotifyParam' has a wrong offset!");
//static_assert(offsetof(BANS_GSBlendPhysic_GSNotifyBeginCS, TotalDuration) == 0x000040, "Member 'BANS_GSBlendPhysic_GSNotifyBeginCS::TotalDuration' has a wrong offset!");

// Function b1-Managed.BED_MovieNode_PerformerSyncTransformToRefObj.GetNodeDescriptionInCS
// 0x0010 (0x0010 - 0x0000)
struct BED_MovieNode_PerformerSyncTransformToRefObj_GetNodeDescriptionInCS final
{
public:
	class FString                                 ReturnValue;                                       // 0x0000(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash)
};
//static_assert(alignof(BED_MovieNode_PerformerSyncTransformToRefObj_GetNodeDescriptionInCS) == 0x000008, "Wrong alignment on BED_MovieNode_PerformerSyncTransformToRefObj_GetNodeDescriptionInCS");
//static_assert(sizeof(BED_MovieNode_PerformerSyncTransformToRefObj_GetNodeDescriptionInCS) == 0x000010, "Wrong size on BED_MovieNode_PerformerSyncTransformToRefObj_GetNodeDescriptionInCS");
//static_assert(offsetof(BED_MovieNode_PerformerSyncTransformToRefObj_GetNodeDescriptionInCS, ReturnValue) == 0x000000, "Member 'BED_MovieNode_PerformerSyncTransformToRefObj_GetNodeDescriptionInCS::ReturnValue' has a wrong offset!");

// Function b1-Managed.BANS_GSCalcAMScale.GSAllowCrossSection
// 0x0001 (0x0001 - 0x0000)
struct BANS_GSCalcAMScale_GSAllowCrossSection final
{
public:
	uint8                                         ReturnValue : 1;                                   // 0x0000(0x0001)(BitIndex: 0x00, PropSize: 0x0001 (Parm, OutParm, ReturnParm, NoDestructor, HasGetValueTypeHash))
};
//static_assert(alignof(BANS_GSCalcAMScale_GSAllowCrossSection) == 0x000001, "Wrong alignment on BANS_GSCalcAMScale_GSAllowCrossSection");
//static_assert(sizeof(BANS_GSCalcAMScale_GSAllowCrossSection) == 0x000001, "Wrong size on BANS_GSCalcAMScale_GSAllowCrossSection");

// Function b1-Managed.BANS_GSCalcAMScale.GSValidateInputCS
// 0x0008 (0x0008 - 0x0000)
struct BANS_GSCalcAMScale_GSValidateInputCS final
{
public:
	class AActor*                                 Actor;                                             // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
//static_assert(alignof(BANS_GSCalcAMScale_GSValidateInputCS) == 0x000008, "Wrong alignment on BANS_GSCalcAMScale_GSValidateInputCS");
//static_assert(sizeof(BANS_GSCalcAMScale_GSValidateInputCS) == 0x000008, "Wrong size on BANS_GSCalcAMScale_GSValidateInputCS");
//static_assert(offsetof(BANS_GSCalcAMScale_GSValidateInputCS, Actor) == 0x000000, "Member 'BANS_GSCalcAMScale_GSValidateInputCS::Actor' has a wrong offset!");

// Function b1-Managed.BANS_GSCalcAMScale.GSNotifyBeginCS
// 0x0048 (0x0048 - 0x0000)
struct BANS_GSCalcAMScale_GSNotifyBeginCS final
{
public:
	struct FUStGSNotifyParam                      NotifyParam;                                       // 0x0000(0x0040)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
	float                                         TotalDuration;                                     // 0x0040(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
//static_assert(alignof(BANS_GSCalcAMScale_GSNotifyBeginCS) == 0x000008, "Wrong alignment on BANS_GSCalcAMScale_GSNotifyBeginCS");
//static_assert(sizeof(BANS_GSCalcAMScale_GSNotifyBeginCS) == 0x000048, "Wrong size on BANS_GSCalcAMScale_GSNotifyBeginCS");
//static_assert(offsetof(BANS_GSCalcAMScale_GSNotifyBeginCS, NotifyParam) == 0x000000, "Member 'BANS_GSCalcAMScale_GSNotifyBeginCS::NotifyParam' has a wrong offset!");
//static_assert(offsetof(BANS_GSCalcAMScale_GSNotifyBeginCS, TotalDuration) == 0x000040, "Member 'BANS_GSCalcAMScale_GSNotifyBeginCS::TotalDuration' has a wrong offset!");

// Function b1-Managed.BANS_GSCamArmLengthCurve.GSNotifyBeginCS
// 0x0048 (0x0048 - 0x0000)
struct BANS_GSCamArmLengthCurve_GSNotifyBeginCS final
{
public:
	struct FUStGSNotifyParam                      NotifyParam;                                       // 0x0000(0x0040)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
	float                                         TotalDuration;                                     // 0x0040(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
//static_assert(alignof(BANS_GSCamArmLengthCurve_GSNotifyBeginCS) == 0x000008, "Wrong alignment on BANS_GSCamArmLengthCurve_GSNotifyBeginCS");
//static_assert(sizeof(BANS_GSCamArmLengthCurve_GSNotifyBeginCS) == 0x000048, "Wrong size on BANS_GSCamArmLengthCurve_GSNotifyBeginCS");
//static_assert(offsetof(BANS_GSCamArmLengthCurve_GSNotifyBeginCS, NotifyParam) == 0x000000, "Member 'BANS_GSCamArmLengthCurve_GSNotifyBeginCS::NotifyParam' has a wrong offset!");
//static_assert(offsetof(BANS_GSCamArmLengthCurve_GSNotifyBeginCS, TotalDuration) == 0x000040, "Member 'BANS_GSCamArmLengthCurve_GSNotifyBeginCS::TotalDuration' has a wrong offset!");

// Function b1-Managed.BANS_GSCamArmLengthCurve.GSNotifyTickCS
// 0x0048 (0x0048 - 0x0000)
struct BANS_GSCamArmLengthCurve_GSNotifyTickCS final
{
public:
	struct FUStGSNotifyParam                      NotifyParam;                                       // 0x0000(0x0040)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
	float                                         FrameDeltaTime;                                    // 0x0040(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
//static_assert(alignof(BANS_GSCamArmLengthCurve_GSNotifyTickCS) == 0x000008, "Wrong alignment on BANS_GSCamArmLengthCurve_GSNotifyTickCS");
//static_assert(sizeof(BANS_GSCamArmLengthCurve_GSNotifyTickCS) == 0x000048, "Wrong size on BANS_GSCamArmLengthCurve_GSNotifyTickCS");
//static_assert(offsetof(BANS_GSCamArmLengthCurve_GSNotifyTickCS, NotifyParam) == 0x000000, "Member 'BANS_GSCamArmLengthCurve_GSNotifyTickCS::NotifyParam' has a wrong offset!");
//static_assert(offsetof(BANS_GSCamArmLengthCurve_GSNotifyTickCS, FrameDeltaTime) == 0x000040, "Member 'BANS_GSCamArmLengthCurve_GSNotifyTickCS::FrameDeltaTime' has a wrong offset!");

// Function b1-Managed.BANS_GSCamArmLengthCurve.GSNotifyEndCS
// 0x0040 (0x0040 - 0x0000)
struct BANS_GSCamArmLengthCurve_GSNotifyEndCS final
{
public:
	struct FUStGSNotifyParam                      NotifyParam;                                       // 0x0000(0x0040)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
//static_assert(alignof(BANS_GSCamArmLengthCurve_GSNotifyEndCS) == 0x000008, "Wrong alignment on BANS_GSCamArmLengthCurve_GSNotifyEndCS");
//static_assert(sizeof(BANS_GSCamArmLengthCurve_GSNotifyEndCS) == 0x000040, "Wrong size on BANS_GSCamArmLengthCurve_GSNotifyEndCS");
//static_assert(offsetof(BANS_GSCamArmLengthCurve_GSNotifyEndCS, NotifyParam) == 0x000000, "Member 'BANS_GSCamArmLengthCurve_GSNotifyEndCS::NotifyParam' has a wrong offset!");

// Function b1-Managed.BANS_GSCamPitchCurve.GSNotifyBeginCS
// 0x0048 (0x0048 - 0x0000)
struct BANS_GSCamPitchCurve_GSNotifyBeginCS final
{
public:
	struct FUStGSNotifyParam                      NotifyParam;                                       // 0x0000(0x0040)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
	float                                         TotalDuration;                                     // 0x0040(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
//static_assert(alignof(BANS_GSCamPitchCurve_GSNotifyBeginCS) == 0x000008, "Wrong alignment on BANS_GSCamPitchCurve_GSNotifyBeginCS");
//static_assert(sizeof(BANS_GSCamPitchCurve_GSNotifyBeginCS) == 0x000048, "Wrong size on BANS_GSCamPitchCurve_GSNotifyBeginCS");
//static_assert(offsetof(BANS_GSCamPitchCurve_GSNotifyBeginCS, NotifyParam) == 0x000000, "Member 'BANS_GSCamPitchCurve_GSNotifyBeginCS::NotifyParam' has a wrong offset!");
//static_assert(offsetof(BANS_GSCamPitchCurve_GSNotifyBeginCS, TotalDuration) == 0x000040, "Member 'BANS_GSCamPitchCurve_GSNotifyBeginCS::TotalDuration' has a wrong offset!");

// Function b1-Managed.BANS_GSCamPitchCurve.GSNotifyTickCS
// 0x0048 (0x0048 - 0x0000)
struct BANS_GSCamPitchCurve_GSNotifyTickCS final
{
public:
	struct FUStGSNotifyParam                      NotifyParam;                                       // 0x0000(0x0040)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
	float                                         FrameDeltaTime;                                    // 0x0040(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
//static_assert(alignof(BANS_GSCamPitchCurve_GSNotifyTickCS) == 0x000008, "Wrong alignment on BANS_GSCamPitchCurve_GSNotifyTickCS");
//static_assert(sizeof(BANS_GSCamPitchCurve_GSNotifyTickCS) == 0x000048, "Wrong size on BANS_GSCamPitchCurve_GSNotifyTickCS");
//static_assert(offsetof(BANS_GSCamPitchCurve_GSNotifyTickCS, NotifyParam) == 0x000000, "Member 'BANS_GSCamPitchCurve_GSNotifyTickCS::NotifyParam' has a wrong offset!");
//static_assert(offsetof(BANS_GSCamPitchCurve_GSNotifyTickCS, FrameDeltaTime) == 0x000040, "Member 'BANS_GSCamPitchCurve_GSNotifyTickCS::FrameDeltaTime' has a wrong offset!");

// Function b1-Managed.BANS_GSCamPitchCurve.GSNotifyEndCS
// 0x0040 (0x0040 - 0x0000)
struct BANS_GSCamPitchCurve_GSNotifyEndCS final
{
public:
	struct FUStGSNotifyParam                      NotifyParam;                                       // 0x0000(0x0040)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
//static_assert(alignof(BANS_GSCamPitchCurve_GSNotifyEndCS) == 0x000008, "Wrong alignment on BANS_GSCamPitchCurve_GSNotifyEndCS");
//static_assert(sizeof(BANS_GSCamPitchCurve_GSNotifyEndCS) == 0x000040, "Wrong size on BANS_GSCamPitchCurve_GSNotifyEndCS");
//static_assert(offsetof(BANS_GSCamPitchCurve_GSNotifyEndCS, NotifyParam) == 0x000000, "Member 'BANS_GSCamPitchCurve_GSNotifyEndCS::NotifyParam' has a wrong offset!");

// Function b1-Managed.BANS_GSCamSASOCurve.GSNotifyBeginCS
// 0x0048 (0x0048 - 0x0000)
struct BANS_GSCamSASOCurve_GSNotifyBeginCS final
{
public:
	struct FUStGSNotifyParam                      NotifyParam;                                       // 0x0000(0x0040)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
	float                                         TotalDuration;                                     // 0x0040(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
//static_assert(alignof(BANS_GSCamSASOCurve_GSNotifyBeginCS) == 0x000008, "Wrong alignment on BANS_GSCamSASOCurve_GSNotifyBeginCS");
//static_assert(sizeof(BANS_GSCamSASOCurve_GSNotifyBeginCS) == 0x000048, "Wrong size on BANS_GSCamSASOCurve_GSNotifyBeginCS");
//static_assert(offsetof(BANS_GSCamSASOCurve_GSNotifyBeginCS, NotifyParam) == 0x000000, "Member 'BANS_GSCamSASOCurve_GSNotifyBeginCS::NotifyParam' has a wrong offset!");
//static_assert(offsetof(BANS_GSCamSASOCurve_GSNotifyBeginCS, TotalDuration) == 0x000040, "Member 'BANS_GSCamSASOCurve_GSNotifyBeginCS::TotalDuration' has a wrong offset!");

// Function b1-Managed.BANS_GSCamSASOCurve.GSNotifyTickCS
// 0x0048 (0x0048 - 0x0000)
struct BANS_GSCamSASOCurve_GSNotifyTickCS final
{
public:
	struct FUStGSNotifyParam                      NotifyParam;                                       // 0x0000(0x0040)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
	float                                         FrameDeltaTime;                                    // 0x0040(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
//static_assert(alignof(BANS_GSCamSASOCurve_GSNotifyTickCS) == 0x000008, "Wrong alignment on BANS_GSCamSASOCurve_GSNotifyTickCS");
//static_assert(sizeof(BANS_GSCamSASOCurve_GSNotifyTickCS) == 0x000048, "Wrong size on BANS_GSCamSASOCurve_GSNotifyTickCS");
//static_assert(offsetof(BANS_GSCamSASOCurve_GSNotifyTickCS, NotifyParam) == 0x000000, "Member 'BANS_GSCamSASOCurve_GSNotifyTickCS::NotifyParam' has a wrong offset!");
//static_assert(offsetof(BANS_GSCamSASOCurve_GSNotifyTickCS, FrameDeltaTime) == 0x000040, "Member 'BANS_GSCamSASOCurve_GSNotifyTickCS::FrameDeltaTime' has a wrong offset!");

// Function b1-Managed.BANS_GSCamSASOCurve.GSNotifyEndCS
// 0x0040 (0x0040 - 0x0000)
struct BANS_GSCamSASOCurve_GSNotifyEndCS final
{
public:
	struct FUStGSNotifyParam                      NotifyParam;                                       // 0x0000(0x0040)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
//static_assert(alignof(BANS_GSCamSASOCurve_GSNotifyEndCS) == 0x000008, "Wrong alignment on BANS_GSCamSASOCurve_GSNotifyEndCS");
//static_assert(sizeof(BANS_GSCamSASOCurve_GSNotifyEndCS) == 0x000040, "Wrong size on BANS_GSCamSASOCurve_GSNotifyEndCS");
//static_assert(offsetof(BANS_GSCamSASOCurve_GSNotifyEndCS, NotifyParam) == 0x000000, "Member 'BANS_GSCamSASOCurve_GSNotifyEndCS::NotifyParam' has a wrong offset!");

// Function b1-Managed.BANS_GSCastDingShen.GSNotifyBeginCS
// 0x0048 (0x0048 - 0x0000)
struct BANS_GSCastDingShen_GSNotifyBeginCS final
{
public:
	struct FUStGSNotifyParam                      NotifyParam;                                       // 0x0000(0x0040)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
	float                                         TotalDuration;                                     // 0x0040(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
//static_assert(alignof(BANS_GSCastDingShen_GSNotifyBeginCS) == 0x000008, "Wrong alignment on BANS_GSCastDingShen_GSNotifyBeginCS");
//static_assert(sizeof(BANS_GSCastDingShen_GSNotifyBeginCS) == 0x000048, "Wrong size on BANS_GSCastDingShen_GSNotifyBeginCS");
//static_assert(offsetof(BANS_GSCastDingShen_GSNotifyBeginCS, NotifyParam) == 0x000000, "Member 'BANS_GSCastDingShen_GSNotifyBeginCS::NotifyParam' has a wrong offset!");
//static_assert(offsetof(BANS_GSCastDingShen_GSNotifyBeginCS, TotalDuration) == 0x000040, "Member 'BANS_GSCastDingShen_GSNotifyBeginCS::TotalDuration' has a wrong offset!");

// Function b1-Managed.BANS_GSCastingState.GSNotifyBeginCS
// 0x0048 (0x0048 - 0x0000)
struct BANS_GSCastingState_GSNotifyBeginCS final
{
public:
	struct FUStGSNotifyParam                      NotifyParam;                                       // 0x0000(0x0040)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
	float                                         TotalDuration;                                     // 0x0040(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
//static_assert(alignof(BANS_GSCastingState_GSNotifyBeginCS) == 0x000008, "Wrong alignment on BANS_GSCastingState_GSNotifyBeginCS");
//static_assert(sizeof(BANS_GSCastingState_GSNotifyBeginCS) == 0x000048, "Wrong size on BANS_GSCastingState_GSNotifyBeginCS");
//static_assert(offsetof(BANS_GSCastingState_GSNotifyBeginCS, NotifyParam) == 0x000000, "Member 'BANS_GSCastingState_GSNotifyBeginCS::NotifyParam' has a wrong offset!");
//static_assert(offsetof(BANS_GSCastingState_GSNotifyBeginCS, TotalDuration) == 0x000040, "Member 'BANS_GSCastingState_GSNotifyBeginCS::TotalDuration' has a wrong offset!");

// Function b1-Managed.BANS_GSCastingState.GSNotifyTickCS
// 0x0048 (0x0048 - 0x0000)
struct BANS_GSCastingState_GSNotifyTickCS final
{
public:
	struct FUStGSNotifyParam                      NotifyParam;                                       // 0x0000(0x0040)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
	float                                         FrameDeltaTime;                                    // 0x0040(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
//static_assert(alignof(BANS_GSCastingState_GSNotifyTickCS) == 0x000008, "Wrong alignment on BANS_GSCastingState_GSNotifyTickCS");
//static_assert(sizeof(BANS_GSCastingState_GSNotifyTickCS) == 0x000048, "Wrong size on BANS_GSCastingState_GSNotifyTickCS");
//static_assert(offsetof(BANS_GSCastingState_GSNotifyTickCS, NotifyParam) == 0x000000, "Member 'BANS_GSCastingState_GSNotifyTickCS::NotifyParam' has a wrong offset!");
//static_assert(offsetof(BANS_GSCastingState_GSNotifyTickCS, FrameDeltaTime) == 0x000040, "Member 'BANS_GSCastingState_GSNotifyTickCS::FrameDeltaTime' has a wrong offset!");

// Function b1-Managed.BANS_GSCastingState.GSNotifyEndCS
// 0x0040 (0x0040 - 0x0000)
struct BANS_GSCastingState_GSNotifyEndCS final
{
public:
	struct FUStGSNotifyParam                      NotifyParam;                                       // 0x0000(0x0040)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
//static_assert(alignof(BANS_GSCastingState_GSNotifyEndCS) == 0x000008, "Wrong alignment on BANS_GSCastingState_GSNotifyEndCS");
//static_assert(sizeof(BANS_GSCastingState_GSNotifyEndCS) == 0x000040, "Wrong size on BANS_GSCastingState_GSNotifyEndCS");
//static_assert(offsetof(BANS_GSCastingState_GSNotifyEndCS, NotifyParam) == 0x000000, "Member 'BANS_GSCastingState_GSNotifyEndCS::NotifyParam' has a wrong offset!");

// Function b1-Managed.BANS_GSChargeKeyCache.GSNotifyBeginCS
// 0x0048 (0x0048 - 0x0000)
struct BANS_GSChargeKeyCache_GSNotifyBeginCS final
{
public:
	struct FUStGSNotifyParam                      NotifyParam;                                       // 0x0000(0x0040)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
	float                                         TotalDuration;                                     // 0x0040(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
//static_assert(alignof(BANS_GSChargeKeyCache_GSNotifyBeginCS) == 0x000008, "Wrong alignment on BANS_GSChargeKeyCache_GSNotifyBeginCS");
//static_assert(sizeof(BANS_GSChargeKeyCache_GSNotifyBeginCS) == 0x000048, "Wrong size on BANS_GSChargeKeyCache_GSNotifyBeginCS");
//static_assert(offsetof(BANS_GSChargeKeyCache_GSNotifyBeginCS, NotifyParam) == 0x000000, "Member 'BANS_GSChargeKeyCache_GSNotifyBeginCS::NotifyParam' has a wrong offset!");
//static_assert(offsetof(BANS_GSChargeKeyCache_GSNotifyBeginCS, TotalDuration) == 0x000040, "Member 'BANS_GSChargeKeyCache_GSNotifyBeginCS::TotalDuration' has a wrong offset!");

// Function b1-Managed.BANS_GSChargeKeyCache.GSNotifyEndCS
// 0x0040 (0x0040 - 0x0000)
struct BANS_GSChargeKeyCache_GSNotifyEndCS final
{
public:
	struct FUStGSNotifyParam                      NotifyParam;                                       // 0x0000(0x0040)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
//static_assert(alignof(BANS_GSChargeKeyCache_GSNotifyEndCS) == 0x000008, "Wrong alignment on BANS_GSChargeKeyCache_GSNotifyEndCS");
//static_assert(sizeof(BANS_GSChargeKeyCache_GSNotifyEndCS) == 0x000040, "Wrong size on BANS_GSChargeKeyCache_GSNotifyEndCS");
//static_assert(offsetof(BANS_GSChargeKeyCache_GSNotifyEndCS, NotifyParam) == 0x000000, "Member 'BANS_GSChargeKeyCache_GSNotifyEndCS::NotifyParam' has a wrong offset!");

// Function b1-Managed.BED_QuestNode_CustomOutput.GetNodeDescriptionInCS
// 0x0010 (0x0010 - 0x0000)
struct BED_QuestNode_CustomOutput_GetNodeDescriptionInCS final
{
public:
	class FString                                 ReturnValue;                                       // 0x0000(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash)
};
//static_assert(alignof(BED_QuestNode_CustomOutput_GetNodeDescriptionInCS) == 0x000008, "Wrong alignment on BED_QuestNode_CustomOutput_GetNodeDescriptionInCS");
//static_assert(sizeof(BED_QuestNode_CustomOutput_GetNodeDescriptionInCS) == 0x000010, "Wrong size on BED_QuestNode_CustomOutput_GetNodeDescriptionInCS");
//static_assert(offsetof(BED_QuestNode_CustomOutput_GetNodeDescriptionInCS, ReturnValue) == 0x000000, "Member 'BED_QuestNode_CustomOutput_GetNodeDescriptionInCS::ReturnValue' has a wrong offset!");

// Function b1-Managed.BANS_GSCloseCollisionCompHitMove.GSNotifyBeginCS
// 0x0048 (0x0048 - 0x0000)
struct BANS_GSCloseCollisionCompHitMove_GSNotifyBeginCS final
{
public:
	struct FUStGSNotifyParam                      NotifyParam;                                       // 0x0000(0x0040)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
	float                                         TotalDuration;                                     // 0x0040(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
//static_assert(alignof(BANS_GSCloseCollisionCompHitMove_GSNotifyBeginCS) == 0x000008, "Wrong alignment on BANS_GSCloseCollisionCompHitMove_GSNotifyBeginCS");
//static_assert(sizeof(BANS_GSCloseCollisionCompHitMove_GSNotifyBeginCS) == 0x000048, "Wrong size on BANS_GSCloseCollisionCompHitMove_GSNotifyBeginCS");
//static_assert(offsetof(BANS_GSCloseCollisionCompHitMove_GSNotifyBeginCS, NotifyParam) == 0x000000, "Member 'BANS_GSCloseCollisionCompHitMove_GSNotifyBeginCS::NotifyParam' has a wrong offset!");
//static_assert(offsetof(BANS_GSCloseCollisionCompHitMove_GSNotifyBeginCS, TotalDuration) == 0x000040, "Member 'BANS_GSCloseCollisionCompHitMove_GSNotifyBeginCS::TotalDuration' has a wrong offset!");

// Function b1-Managed.BANS_GSCloseCollisionCompHitMove.GSNotifyEndCS
// 0x0040 (0x0040 - 0x0000)
struct BANS_GSCloseCollisionCompHitMove_GSNotifyEndCS final
{
public:
	struct FUStGSNotifyParam                      NotifyParam;                                       // 0x0000(0x0040)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
//static_assert(alignof(BANS_GSCloseCollisionCompHitMove_GSNotifyEndCS) == 0x000008, "Wrong alignment on BANS_GSCloseCollisionCompHitMove_GSNotifyEndCS");
//static_assert(sizeof(BANS_GSCloseCollisionCompHitMove_GSNotifyEndCS) == 0x000040, "Wrong size on BANS_GSCloseCollisionCompHitMove_GSNotifyEndCS");
//static_assert(offsetof(BANS_GSCloseCollisionCompHitMove_GSNotifyEndCS, NotifyParam) == 0x000000, "Member 'BANS_GSCloseCollisionCompHitMove_GSNotifyEndCS::NotifyParam' has a wrong offset!");

// Function b1-Managed.BANS_GSCloseGravity.GSNotifyBeginCS
// 0x0048 (0x0048 - 0x0000)
struct BANS_GSCloseGravity_GSNotifyBeginCS final
{
public:
	struct FUStGSNotifyParam                      NotifyParam;                                       // 0x0000(0x0040)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
	float                                         TotalDuration;                                     // 0x0040(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
//static_assert(alignof(BANS_GSCloseGravity_GSNotifyBeginCS) == 0x000008, "Wrong alignment on BANS_GSCloseGravity_GSNotifyBeginCS");
//static_assert(sizeof(BANS_GSCloseGravity_GSNotifyBeginCS) == 0x000048, "Wrong size on BANS_GSCloseGravity_GSNotifyBeginCS");
//static_assert(offsetof(BANS_GSCloseGravity_GSNotifyBeginCS, NotifyParam) == 0x000000, "Member 'BANS_GSCloseGravity_GSNotifyBeginCS::NotifyParam' has a wrong offset!");
//static_assert(offsetof(BANS_GSCloseGravity_GSNotifyBeginCS, TotalDuration) == 0x000040, "Member 'BANS_GSCloseGravity_GSNotifyBeginCS::TotalDuration' has a wrong offset!");

// Function b1-Managed.BANS_GSCloseGravity.GSNotifyEndCS
// 0x0040 (0x0040 - 0x0000)
struct BANS_GSCloseGravity_GSNotifyEndCS final
{
public:
	struct FUStGSNotifyParam                      NotifyParam;                                       // 0x0000(0x0040)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
//static_assert(alignof(BANS_GSCloseGravity_GSNotifyEndCS) == 0x000008, "Wrong alignment on BANS_GSCloseGravity_GSNotifyEndCS");
//static_assert(sizeof(BANS_GSCloseGravity_GSNotifyEndCS) == 0x000040, "Wrong size on BANS_GSCloseGravity_GSNotifyEndCS");
//static_assert(offsetof(BANS_GSCloseGravity_GSNotifyEndCS, NotifyParam) == 0x000000, "Member 'BANS_GSCloseGravity_GSNotifyEndCS::NotifyParam' has a wrong offset!");

// Function b1-Managed.BANS_GSCloseHitMove.GSNotifyBeginCS
// 0x0048 (0x0048 - 0x0000)
struct BANS_GSCloseHitMove_GSNotifyBeginCS final
{
public:
	struct FUStGSNotifyParam                      NotifyParam;                                       // 0x0000(0x0040)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
	float                                         TotalDuration;                                     // 0x0040(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
//static_assert(alignof(BANS_GSCloseHitMove_GSNotifyBeginCS) == 0x000008, "Wrong alignment on BANS_GSCloseHitMove_GSNotifyBeginCS");
//static_assert(sizeof(BANS_GSCloseHitMove_GSNotifyBeginCS) == 0x000048, "Wrong size on BANS_GSCloseHitMove_GSNotifyBeginCS");
//static_assert(offsetof(BANS_GSCloseHitMove_GSNotifyBeginCS, NotifyParam) == 0x000000, "Member 'BANS_GSCloseHitMove_GSNotifyBeginCS::NotifyParam' has a wrong offset!");
//static_assert(offsetof(BANS_GSCloseHitMove_GSNotifyBeginCS, TotalDuration) == 0x000040, "Member 'BANS_GSCloseHitMove_GSNotifyBeginCS::TotalDuration' has a wrong offset!");

// Function b1-Managed.BANS_GSCloseHitMove.GSNotifyEndCS
// 0x0040 (0x0040 - 0x0000)
struct BANS_GSCloseHitMove_GSNotifyEndCS final
{
public:
	struct FUStGSNotifyParam                      NotifyParam;                                       // 0x0000(0x0040)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
//static_assert(alignof(BANS_GSCloseHitMove_GSNotifyEndCS) == 0x000008, "Wrong alignment on BANS_GSCloseHitMove_GSNotifyEndCS");
//static_assert(sizeof(BANS_GSCloseHitMove_GSNotifyEndCS) == 0x000040, "Wrong size on BANS_GSCloseHitMove_GSNotifyEndCS");
//static_assert(offsetof(BANS_GSCloseHitMove_GSNotifyEndCS, NotifyParam) == 0x000000, "Member 'BANS_GSCloseHitMove_GSNotifyEndCS::NotifyParam' has a wrong offset!");

// Function b1-Managed.BED_QuestNode_LevelStream.GetNodeDescriptionInCS
// 0x0010 (0x0010 - 0x0000)
struct BED_QuestNode_LevelStream_GetNodeDescriptionInCS final
{
public:
	class FString                                 ReturnValue;                                       // 0x0000(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash)
};
//static_assert(alignof(BED_QuestNode_LevelStream_GetNodeDescriptionInCS) == 0x000008, "Wrong alignment on BED_QuestNode_LevelStream_GetNodeDescriptionInCS");
//static_assert(sizeof(BED_QuestNode_LevelStream_GetNodeDescriptionInCS) == 0x000010, "Wrong size on BED_QuestNode_LevelStream_GetNodeDescriptionInCS");
//static_assert(offsetof(BED_QuestNode_LevelStream_GetNodeDescriptionInCS, ReturnValue) == 0x000000, "Member 'BED_QuestNode_LevelStream_GetNodeDescriptionInCS::ReturnValue' has a wrong offset!");

// Function b1-Managed.BANS_GSCollisionResponseToChannel.GetCollisionChannelIndex_Capsule
// 0x0010 (0x0010 - 0x0000)
struct BANS_GSCollisionResponseToChannel_GetCollisionChannelIndex_Capsule final
{
public:
	TArray<int32>                                 ReturnValue;                                       // 0x0000(0x0010)(Parm, OutParm, ReturnParm)
};
//static_assert(alignof(BANS_GSCollisionResponseToChannel_GetCollisionChannelIndex_Capsule) == 0x000008, "Wrong alignment on BANS_GSCollisionResponseToChannel_GetCollisionChannelIndex_Capsule");
//static_assert(sizeof(BANS_GSCollisionResponseToChannel_GetCollisionChannelIndex_Capsule) == 0x000010, "Wrong size on BANS_GSCollisionResponseToChannel_GetCollisionChannelIndex_Capsule");
//static_assert(offsetof(BANS_GSCollisionResponseToChannel_GetCollisionChannelIndex_Capsule, ReturnValue) == 0x000000, "Member 'BANS_GSCollisionResponseToChannel_GetCollisionChannelIndex_Capsule::ReturnValue' has a wrong offset!");

// Function b1-Managed.BANS_GSCollisionResponseToChannel.GSNotifyBeginCS
// 0x0048 (0x0048 - 0x0000)
struct BANS_GSCollisionResponseToChannel_GSNotifyBeginCS final
{
public:
	struct FUStGSNotifyParam                      NotifyParam;                                       // 0x0000(0x0040)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
	float                                         TotalDuration;                                     // 0x0040(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
//static_assert(alignof(BANS_GSCollisionResponseToChannel_GSNotifyBeginCS) == 0x000008, "Wrong alignment on BANS_GSCollisionResponseToChannel_GSNotifyBeginCS");
//static_assert(sizeof(BANS_GSCollisionResponseToChannel_GSNotifyBeginCS) == 0x000048, "Wrong size on BANS_GSCollisionResponseToChannel_GSNotifyBeginCS");
//static_assert(offsetof(BANS_GSCollisionResponseToChannel_GSNotifyBeginCS, NotifyParam) == 0x000000, "Member 'BANS_GSCollisionResponseToChannel_GSNotifyBeginCS::NotifyParam' has a wrong offset!");
//static_assert(offsetof(BANS_GSCollisionResponseToChannel_GSNotifyBeginCS, TotalDuration) == 0x000040, "Member 'BANS_GSCollisionResponseToChannel_GSNotifyBeginCS::TotalDuration' has a wrong offset!");

// Function b1-Managed.BANS_GSCollisionResponseToChannel.GetCollisionChannelIndex_Mesh
// 0x0010 (0x0010 - 0x0000)
struct BANS_GSCollisionResponseToChannel_GetCollisionChannelIndex_Mesh final
{
public:
	TArray<int32>                                 ReturnValue;                                       // 0x0000(0x0010)(Parm, OutParm, ReturnParm)
};
//static_assert(alignof(BANS_GSCollisionResponseToChannel_GetCollisionChannelIndex_Mesh) == 0x000008, "Wrong alignment on BANS_GSCollisionResponseToChannel_GetCollisionChannelIndex_Mesh");
//static_assert(sizeof(BANS_GSCollisionResponseToChannel_GetCollisionChannelIndex_Mesh) == 0x000010, "Wrong size on BANS_GSCollisionResponseToChannel_GetCollisionChannelIndex_Mesh");
//static_assert(offsetof(BANS_GSCollisionResponseToChannel_GetCollisionChannelIndex_Mesh, ReturnValue) == 0x000000, "Member 'BANS_GSCollisionResponseToChannel_GetCollisionChannelIndex_Mesh::ReturnValue' has a wrong offset!");

// Function b1-Managed.BANS_GSCollisionResponseToChannel.GSNotifyEndCS
// 0x0040 (0x0040 - 0x0000)
struct BANS_GSCollisionResponseToChannel_GSNotifyEndCS final
{
public:
	struct FUStGSNotifyParam                      NotifyParam;                                       // 0x0000(0x0040)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
//static_assert(alignof(BANS_GSCollisionResponseToChannel_GSNotifyEndCS) == 0x000008, "Wrong alignment on BANS_GSCollisionResponseToChannel_GSNotifyEndCS");
//static_assert(sizeof(BANS_GSCollisionResponseToChannel_GSNotifyEndCS) == 0x000040, "Wrong size on BANS_GSCollisionResponseToChannel_GSNotifyEndCS");
//static_assert(offsetof(BANS_GSCollisionResponseToChannel_GSNotifyEndCS, NotifyParam) == 0x000000, "Member 'BANS_GSCollisionResponseToChannel_GSNotifyEndCS::NotifyParam' has a wrong offset!");

// Function b1-Managed.BANS_GSComboWindow.GSNotifyBeginCS
// 0x0048 (0x0048 - 0x0000)
struct BANS_GSComboWindow_GSNotifyBeginCS final
{
public:
	struct FUStGSNotifyParam                      NotifyParam;                                       // 0x0000(0x0040)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
	float                                         TotalDuration;                                     // 0x0040(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
//static_assert(alignof(BANS_GSComboWindow_GSNotifyBeginCS) == 0x000008, "Wrong alignment on BANS_GSComboWindow_GSNotifyBeginCS");
//static_assert(sizeof(BANS_GSComboWindow_GSNotifyBeginCS) == 0x000048, "Wrong size on BANS_GSComboWindow_GSNotifyBeginCS");
//static_assert(offsetof(BANS_GSComboWindow_GSNotifyBeginCS, NotifyParam) == 0x000000, "Member 'BANS_GSComboWindow_GSNotifyBeginCS::NotifyParam' has a wrong offset!");
//static_assert(offsetof(BANS_GSComboWindow_GSNotifyBeginCS, TotalDuration) == 0x000040, "Member 'BANS_GSComboWindow_GSNotifyBeginCS::TotalDuration' has a wrong offset!");

// Function b1-Managed.BANS_GSComboWindow.GetAnimNSType
// 0x0001 (0x0001 - 0x0000)
struct BANS_GSComboWindow_GetAnimNSType final
{
public:
	EGsEnAnimNS                                   ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
//static_assert(alignof(BANS_GSComboWindow_GetAnimNSType) == 0x000001, "Wrong alignment on BANS_GSComboWindow_GetAnimNSType");
//static_assert(sizeof(BANS_GSComboWindow_GetAnimNSType) == 0x000001, "Wrong size on BANS_GSComboWindow_GetAnimNSType");
//static_assert(offsetof(BANS_GSComboWindow_GetAnimNSType, ReturnValue) == 0x000000, "Member 'BANS_GSComboWindow_GetAnimNSType::ReturnValue' has a wrong offset!");

// Function b1-Managed.BANS_GSCostAttrBySkillEffect.GSNotifyBeginCS
// 0x0048 (0x0048 - 0x0000)
struct BANS_GSCostAttrBySkillEffect_GSNotifyBeginCS final
{
public:
	struct FUStGSNotifyParam                      NotifyParam;                                       // 0x0000(0x0040)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
	float                                         TotalDuration;                                     // 0x0040(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
//static_assert(alignof(BANS_GSCostAttrBySkillEffect_GSNotifyBeginCS) == 0x000008, "Wrong alignment on BANS_GSCostAttrBySkillEffect_GSNotifyBeginCS");
//static_assert(sizeof(BANS_GSCostAttrBySkillEffect_GSNotifyBeginCS) == 0x000048, "Wrong size on BANS_GSCostAttrBySkillEffect_GSNotifyBeginCS");
//static_assert(offsetof(BANS_GSCostAttrBySkillEffect_GSNotifyBeginCS, NotifyParam) == 0x000000, "Member 'BANS_GSCostAttrBySkillEffect_GSNotifyBeginCS::NotifyParam' has a wrong offset!");
//static_assert(offsetof(BANS_GSCostAttrBySkillEffect_GSNotifyBeginCS, TotalDuration) == 0x000040, "Member 'BANS_GSCostAttrBySkillEffect_GSNotifyBeginCS::TotalDuration' has a wrong offset!");

// Function b1-Managed.BANS_GSCostAttrBySkillEffect.GSNotifyEndCS
// 0x0040 (0x0040 - 0x0000)
struct BANS_GSCostAttrBySkillEffect_GSNotifyEndCS final
{
public:
	struct FUStGSNotifyParam                      NotifyParam;                                       // 0x0000(0x0040)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
//static_assert(alignof(BANS_GSCostAttrBySkillEffect_GSNotifyEndCS) == 0x000008, "Wrong alignment on BANS_GSCostAttrBySkillEffect_GSNotifyEndCS");
//static_assert(sizeof(BANS_GSCostAttrBySkillEffect_GSNotifyEndCS) == 0x000040, "Wrong size on BANS_GSCostAttrBySkillEffect_GSNotifyEndCS");
//static_assert(offsetof(BANS_GSCostAttrBySkillEffect_GSNotifyEndCS, NotifyParam) == 0x000000, "Member 'BANS_GSCostAttrBySkillEffect_GSNotifyEndCS::NotifyParam' has a wrong offset!");

// Function b1-Managed.BED_QuestNode_NotifyActor.GetNodeDescriptionInCS
// 0x0010 (0x0010 - 0x0000)
struct BED_QuestNode_NotifyActor_GetNodeDescriptionInCS final
{
public:
	class FString                                 ReturnValue;                                       // 0x0000(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash)
};
//static_assert(alignof(BED_QuestNode_NotifyActor_GetNodeDescriptionInCS) == 0x000008, "Wrong alignment on BED_QuestNode_NotifyActor_GetNodeDescriptionInCS");
//static_assert(sizeof(BED_QuestNode_NotifyActor_GetNodeDescriptionInCS) == 0x000010, "Wrong size on BED_QuestNode_NotifyActor_GetNodeDescriptionInCS");
//static_assert(offsetof(BED_QuestNode_NotifyActor_GetNodeDescriptionInCS, ReturnValue) == 0x000000, "Member 'BED_QuestNode_NotifyActor_GetNodeDescriptionInCS::ReturnValue' has a wrong offset!");

// Function b1-Managed.BANS_GSCostStamina.GSNotifyBeginCS
// 0x0048 (0x0048 - 0x0000)
struct BANS_GSCostStamina_GSNotifyBeginCS final
{
public:
	struct FUStGSNotifyParam                      NotifyParam;                                       // 0x0000(0x0040)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
	float                                         TotalDuration;                                     // 0x0040(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
//static_assert(alignof(BANS_GSCostStamina_GSNotifyBeginCS) == 0x000008, "Wrong alignment on BANS_GSCostStamina_GSNotifyBeginCS");
//static_assert(sizeof(BANS_GSCostStamina_GSNotifyBeginCS) == 0x000048, "Wrong size on BANS_GSCostStamina_GSNotifyBeginCS");
//static_assert(offsetof(BANS_GSCostStamina_GSNotifyBeginCS, NotifyParam) == 0x000000, "Member 'BANS_GSCostStamina_GSNotifyBeginCS::NotifyParam' has a wrong offset!");
//static_assert(offsetof(BANS_GSCostStamina_GSNotifyBeginCS, TotalDuration) == 0x000040, "Member 'BANS_GSCostStamina_GSNotifyBeginCS::TotalDuration' has a wrong offset!");

// Function b1-Managed.BANS_GSCostStamina.GSNotifyTickCS
// 0x0048 (0x0048 - 0x0000)
struct BANS_GSCostStamina_GSNotifyTickCS final
{
public:
	struct FUStGSNotifyParam                      NotifyParam;                                       // 0x0000(0x0040)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
	float                                         FrameDeltaTime;                                    // 0x0040(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
//static_assert(alignof(BANS_GSCostStamina_GSNotifyTickCS) == 0x000008, "Wrong alignment on BANS_GSCostStamina_GSNotifyTickCS");
//static_assert(sizeof(BANS_GSCostStamina_GSNotifyTickCS) == 0x000048, "Wrong size on BANS_GSCostStamina_GSNotifyTickCS");
//static_assert(offsetof(BANS_GSCostStamina_GSNotifyTickCS, NotifyParam) == 0x000000, "Member 'BANS_GSCostStamina_GSNotifyTickCS::NotifyParam' has a wrong offset!");
//static_assert(offsetof(BANS_GSCostStamina_GSNotifyTickCS, FrameDeltaTime) == 0x000040, "Member 'BANS_GSCostStamina_GSNotifyTickCS::FrameDeltaTime' has a wrong offset!");

// Function b1-Managed.BANS_GSCostStamina.GSNotifyEndCS
// 0x0040 (0x0040 - 0x0000)
struct BANS_GSCostStamina_GSNotifyEndCS final
{
public:
	struct FUStGSNotifyParam                      NotifyParam;                                       // 0x0000(0x0040)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
//static_assert(alignof(BANS_GSCostStamina_GSNotifyEndCS) == 0x000008, "Wrong alignment on BANS_GSCostStamina_GSNotifyEndCS");
//static_assert(sizeof(BANS_GSCostStamina_GSNotifyEndCS) == 0x000040, "Wrong size on BANS_GSCostStamina_GSNotifyEndCS");
//static_assert(offsetof(BANS_GSCostStamina_GSNotifyEndCS, NotifyParam) == 0x000000, "Member 'BANS_GSCostStamina_GSNotifyEndCS::NotifyParam' has a wrong offset!");

// Function b1-Managed.BANS_GSDashHitWallCheck.GSNotifyBeginCS
// 0x0048 (0x0048 - 0x0000)
struct BANS_GSDashHitWallCheck_GSNotifyBeginCS final
{
public:
	struct FUStGSNotifyParam                      NotifyParam;                                       // 0x0000(0x0040)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
	float                                         TotalDuration;                                     // 0x0040(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
//static_assert(alignof(BANS_GSDashHitWallCheck_GSNotifyBeginCS) == 0x000008, "Wrong alignment on BANS_GSDashHitWallCheck_GSNotifyBeginCS");
//static_assert(sizeof(BANS_GSDashHitWallCheck_GSNotifyBeginCS) == 0x000048, "Wrong size on BANS_GSDashHitWallCheck_GSNotifyBeginCS");
//static_assert(offsetof(BANS_GSDashHitWallCheck_GSNotifyBeginCS, NotifyParam) == 0x000000, "Member 'BANS_GSDashHitWallCheck_GSNotifyBeginCS::NotifyParam' has a wrong offset!");
//static_assert(offsetof(BANS_GSDashHitWallCheck_GSNotifyBeginCS, TotalDuration) == 0x000040, "Member 'BANS_GSDashHitWallCheck_GSNotifyBeginCS::TotalDuration' has a wrong offset!");

// Function b1-Managed.BANS_GSDashHitWallCheck.GSNotifyTickCS
// 0x0048 (0x0048 - 0x0000)
struct BANS_GSDashHitWallCheck_GSNotifyTickCS final
{
public:
	struct FUStGSNotifyParam                      NotifyParam;                                       // 0x0000(0x0040)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
	float                                         FrameDeltaTime;                                    // 0x0040(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
//static_assert(alignof(BANS_GSDashHitWallCheck_GSNotifyTickCS) == 0x000008, "Wrong alignment on BANS_GSDashHitWallCheck_GSNotifyTickCS");
//static_assert(sizeof(BANS_GSDashHitWallCheck_GSNotifyTickCS) == 0x000048, "Wrong size on BANS_GSDashHitWallCheck_GSNotifyTickCS");
//static_assert(offsetof(BANS_GSDashHitWallCheck_GSNotifyTickCS, NotifyParam) == 0x000000, "Member 'BANS_GSDashHitWallCheck_GSNotifyTickCS::NotifyParam' has a wrong offset!");
//static_assert(offsetof(BANS_GSDashHitWallCheck_GSNotifyTickCS, FrameDeltaTime) == 0x000040, "Member 'BANS_GSDashHitWallCheck_GSNotifyTickCS::FrameDeltaTime' has a wrong offset!");

// Function b1-Managed.BANS_GSDashHitWallCheck.GSNotifyEndCS
// 0x0040 (0x0040 - 0x0000)
struct BANS_GSDashHitWallCheck_GSNotifyEndCS final
{
public:
	struct FUStGSNotifyParam                      NotifyParam;                                       // 0x0000(0x0040)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
//static_assert(alignof(BANS_GSDashHitWallCheck_GSNotifyEndCS) == 0x000008, "Wrong alignment on BANS_GSDashHitWallCheck_GSNotifyEndCS");
//static_assert(sizeof(BANS_GSDashHitWallCheck_GSNotifyEndCS) == 0x000040, "Wrong size on BANS_GSDashHitWallCheck_GSNotifyEndCS");
//static_assert(offsetof(BANS_GSDashHitWallCheck_GSNotifyEndCS, NotifyParam) == 0x000000, "Member 'BANS_GSDashHitWallCheck_GSNotifyEndCS::NotifyParam' has a wrong offset!");

// Function b1-Managed.BANS_GSDodgeComboKeyCache.GSNotifyBeginCS
// 0x0048 (0x0048 - 0x0000)
struct BANS_GSDodgeComboKeyCache_GSNotifyBeginCS final
{
public:
	struct FUStGSNotifyParam                      NotifyParam;                                       // 0x0000(0x0040)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
	float                                         TotalDuration;                                     // 0x0040(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
//static_assert(alignof(BANS_GSDodgeComboKeyCache_GSNotifyBeginCS) == 0x000008, "Wrong alignment on BANS_GSDodgeComboKeyCache_GSNotifyBeginCS");
//static_assert(sizeof(BANS_GSDodgeComboKeyCache_GSNotifyBeginCS) == 0x000048, "Wrong size on BANS_GSDodgeComboKeyCache_GSNotifyBeginCS");
//static_assert(offsetof(BANS_GSDodgeComboKeyCache_GSNotifyBeginCS, NotifyParam) == 0x000000, "Member 'BANS_GSDodgeComboKeyCache_GSNotifyBeginCS::NotifyParam' has a wrong offset!");
//static_assert(offsetof(BANS_GSDodgeComboKeyCache_GSNotifyBeginCS, TotalDuration) == 0x000040, "Member 'BANS_GSDodgeComboKeyCache_GSNotifyBeginCS::TotalDuration' has a wrong offset!");

// Function b1-Managed.BANS_GSDodgeWindow.GSNotifyBeginCS
// 0x0048 (0x0048 - 0x0000)
struct BANS_GSDodgeWindow_GSNotifyBeginCS final
{
public:
	struct FUStGSNotifyParam                      NotifyParam;                                       // 0x0000(0x0040)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
	float                                         TotalDuration;                                     // 0x0040(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
//static_assert(alignof(BANS_GSDodgeWindow_GSNotifyBeginCS) == 0x000008, "Wrong alignment on BANS_GSDodgeWindow_GSNotifyBeginCS");
//static_assert(sizeof(BANS_GSDodgeWindow_GSNotifyBeginCS) == 0x000048, "Wrong size on BANS_GSDodgeWindow_GSNotifyBeginCS");
//static_assert(offsetof(BANS_GSDodgeWindow_GSNotifyBeginCS, NotifyParam) == 0x000000, "Member 'BANS_GSDodgeWindow_GSNotifyBeginCS::NotifyParam' has a wrong offset!");
//static_assert(offsetof(BANS_GSDodgeWindow_GSNotifyBeginCS, TotalDuration) == 0x000040, "Member 'BANS_GSDodgeWindow_GSNotifyBeginCS::TotalDuration' has a wrong offset!");

// Function b1-Managed.BGW_ExceptionUIMgr.Get
// 0x0010 (0x0010 - 0x0000)
struct BGW_ExceptionUIMgr_Get final
{
public:
	class UObject*                                WorldCtx;                                          // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UBGW_ExceptionUIMgr*                    ReturnValue;                                       // 0x0008(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
//static_assert(alignof(BGW_ExceptionUIMgr_Get) == 0x000008, "Wrong alignment on BGW_ExceptionUIMgr_Get");
//static_assert(sizeof(BGW_ExceptionUIMgr_Get) == 0x000010, "Wrong size on BGW_ExceptionUIMgr_Get");
//static_assert(offsetof(BGW_ExceptionUIMgr_Get, WorldCtx) == 0x000000, "Member 'BGW_ExceptionUIMgr_Get::WorldCtx' has a wrong offset!");
//static_assert(offsetof(BGW_ExceptionUIMgr_Get, ReturnValue) == 0x000008, "Member 'BGW_ExceptionUIMgr_Get::ReturnValue' has a wrong offset!");

// Function b1-Managed.BANS_GSEnableIK.GSNotifyBeginCS
// 0x0048 (0x0048 - 0x0000)
struct BANS_GSEnableIK_GSNotifyBeginCS final
{
public:
	struct FUStGSNotifyParam                      NotifyParam;                                       // 0x0000(0x0040)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
	float                                         TotalDuration;                                     // 0x0040(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
//static_assert(alignof(BANS_GSEnableIK_GSNotifyBeginCS) == 0x000008, "Wrong alignment on BANS_GSEnableIK_GSNotifyBeginCS");
//static_assert(sizeof(BANS_GSEnableIK_GSNotifyBeginCS) == 0x000048, "Wrong size on BANS_GSEnableIK_GSNotifyBeginCS");
//static_assert(offsetof(BANS_GSEnableIK_GSNotifyBeginCS, NotifyParam) == 0x000000, "Member 'BANS_GSEnableIK_GSNotifyBeginCS::NotifyParam' has a wrong offset!");
//static_assert(offsetof(BANS_GSEnableIK_GSNotifyBeginCS, TotalDuration) == 0x000040, "Member 'BANS_GSEnableIK_GSNotifyBeginCS::TotalDuration' has a wrong offset!");

// Function b1-Managed.BANS_GSEnableIK.GSNotifyEndCS
// 0x0040 (0x0040 - 0x0000)
struct BANS_GSEnableIK_GSNotifyEndCS final
{
public:
	struct FUStGSNotifyParam                      NotifyParam;                                       // 0x0000(0x0040)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
//static_assert(alignof(BANS_GSEnableIK_GSNotifyEndCS) == 0x000008, "Wrong alignment on BANS_GSEnableIK_GSNotifyEndCS");
//static_assert(sizeof(BANS_GSEnableIK_GSNotifyEndCS) == 0x000040, "Wrong size on BANS_GSEnableIK_GSNotifyEndCS");
//static_assert(offsetof(BANS_GSEnableIK_GSNotifyEndCS, NotifyParam) == 0x000000, "Member 'BANS_GSEnableIK_GSNotifyEndCS::NotifyParam' has a wrong offset!");

// Function b1-Managed.BED_ProcessStateNode_ResetDetect.GetContextOutputsInCS
// 0x0010 (0x0010 - 0x0000)
struct BED_ProcessStateNode_ResetDetect_GetContextOutputsInCS final
{
public:
	TArray<class FName>                           ReturnValue;                                       // 0x0000(0x0010)(Parm, OutParm, ReturnParm)
};
//static_assert(alignof(BED_ProcessStateNode_ResetDetect_GetContextOutputsInCS) == 0x000008, "Wrong alignment on BED_ProcessStateNode_ResetDetect_GetContextOutputsInCS");
//static_assert(sizeof(BED_ProcessStateNode_ResetDetect_GetContextOutputsInCS) == 0x000010, "Wrong size on BED_ProcessStateNode_ResetDetect_GetContextOutputsInCS");
//static_assert(offsetof(BED_ProcessStateNode_ResetDetect_GetContextOutputsInCS, ReturnValue) == 0x000000, "Member 'BED_ProcessStateNode_ResetDetect_GetContextOutputsInCS::ReturnValue' has a wrong offset!");

// Function b1-Managed.BED_ProcessStateNode_ResetDetect.PostPropertyChanged
// 0x0020 (0x0020 - 0x0000)
struct BED_ProcessStateNode_ResetDetect_PostPropertyChanged final
{
public:
	class FString                                 MemberName;                                        // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash)
	class FString                                 PropertyName;                                      // 0x0010(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash)
};
//static_assert(alignof(BED_ProcessStateNode_ResetDetect_PostPropertyChanged) == 0x000008, "Wrong alignment on BED_ProcessStateNode_ResetDetect_PostPropertyChanged");
//static_assert(sizeof(BED_ProcessStateNode_ResetDetect_PostPropertyChanged) == 0x000020, "Wrong size on BED_ProcessStateNode_ResetDetect_PostPropertyChanged");
//static_assert(offsetof(BED_ProcessStateNode_ResetDetect_PostPropertyChanged, MemberName) == 0x000000, "Member 'BED_ProcessStateNode_ResetDetect_PostPropertyChanged::MemberName' has a wrong offset!");
//static_assert(offsetof(BED_ProcessStateNode_ResetDetect_PostPropertyChanged, PropertyName) == 0x000010, "Member 'BED_ProcessStateNode_ResetDetect_PostPropertyChanged::PropertyName' has a wrong offset!");

// Function b1-Managed.BED_ProcessStateNode_ResetDetect.GetNodeDescriptionInCS
// 0x0010 (0x0010 - 0x0000)
struct BED_ProcessStateNode_ResetDetect_GetNodeDescriptionInCS final
{
public:
	class FString                                 ReturnValue;                                       // 0x0000(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash)
};
//static_assert(alignof(BED_ProcessStateNode_ResetDetect_GetNodeDescriptionInCS) == 0x000008, "Wrong alignment on BED_ProcessStateNode_ResetDetect_GetNodeDescriptionInCS");
//static_assert(sizeof(BED_ProcessStateNode_ResetDetect_GetNodeDescriptionInCS) == 0x000010, "Wrong size on BED_ProcessStateNode_ResetDetect_GetNodeDescriptionInCS");
//static_assert(offsetof(BED_ProcessStateNode_ResetDetect_GetNodeDescriptionInCS, ReturnValue) == 0x000000, "Member 'BED_ProcessStateNode_ResetDetect_GetNodeDescriptionInCS::ReturnValue' has a wrong offset!");

// Function b1-Managed.BANS_GSEnableMontageFootstep.GSNotifyBeginCS
// 0x0048 (0x0048 - 0x0000)
struct BANS_GSEnableMontageFootstep_GSNotifyBeginCS final
{
public:
	struct FUStGSNotifyParam                      NotifyParam;                                       // 0x0000(0x0040)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
	float                                         TotalDuration;                                     // 0x0040(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
//static_assert(alignof(BANS_GSEnableMontageFootstep_GSNotifyBeginCS) == 0x000008, "Wrong alignment on BANS_GSEnableMontageFootstep_GSNotifyBeginCS");
//static_assert(sizeof(BANS_GSEnableMontageFootstep_GSNotifyBeginCS) == 0x000048, "Wrong size on BANS_GSEnableMontageFootstep_GSNotifyBeginCS");
//static_assert(offsetof(BANS_GSEnableMontageFootstep_GSNotifyBeginCS, NotifyParam) == 0x000000, "Member 'BANS_GSEnableMontageFootstep_GSNotifyBeginCS::NotifyParam' has a wrong offset!");
//static_assert(offsetof(BANS_GSEnableMontageFootstep_GSNotifyBeginCS, TotalDuration) == 0x000040, "Member 'BANS_GSEnableMontageFootstep_GSNotifyBeginCS::TotalDuration' has a wrong offset!");

// Function b1-Managed.BANS_GSEnableMontageFootstep.GSNotifyEndCS
// 0x0040 (0x0040 - 0x0000)
struct BANS_GSEnableMontageFootstep_GSNotifyEndCS final
{
public:
	struct FUStGSNotifyParam                      NotifyParam;                                       // 0x0000(0x0040)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
//static_assert(alignof(BANS_GSEnableMontageFootstep_GSNotifyEndCS) == 0x000008, "Wrong alignment on BANS_GSEnableMontageFootstep_GSNotifyEndCS");
//static_assert(sizeof(BANS_GSEnableMontageFootstep_GSNotifyEndCS) == 0x000040, "Wrong size on BANS_GSEnableMontageFootstep_GSNotifyEndCS");
//static_assert(offsetof(BANS_GSEnableMontageFootstep_GSNotifyEndCS, NotifyParam) == 0x000000, "Member 'BANS_GSEnableMontageFootstep_GSNotifyEndCS::NotifyParam' has a wrong offset!");

// Function b1-Managed.QATamerDescriber.QADescribeAnimBySkillID
// 0x0018 (0x0018 - 0x0000)
struct QATamerDescriber_QADescribeAnimBySkillID final
{
public:
	int32                                         SkillID;                                           // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_4[0x4];                                        // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 ReturnValue;                                       // 0x0008(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash)
};
//static_assert(alignof(QATamerDescriber_QADescribeAnimBySkillID) == 0x000008, "Wrong alignment on QATamerDescriber_QADescribeAnimBySkillID");
//static_assert(sizeof(QATamerDescriber_QADescribeAnimBySkillID) == 0x000018, "Wrong size on QATamerDescriber_QADescribeAnimBySkillID");
//static_assert(offsetof(QATamerDescriber_QADescribeAnimBySkillID, SkillID) == 0x000000, "Member 'QATamerDescriber_QADescribeAnimBySkillID::SkillID' has a wrong offset!");
//static_assert(offsetof(QATamerDescriber_QADescribeAnimBySkillID, ReturnValue) == 0x000008, "Member 'QATamerDescriber_QADescribeAnimBySkillID::ReturnValue' has a wrong offset!");

// Function b1-Managed.QATamerDescriber.QADescribeAnimByMontage
// 0x0018 (0x0018 - 0x0000)
struct QATamerDescriber_QADescribeAnimByMontage final
{
public:
	class UAnimMontage*                           Montage;                                           // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class FString                                 ReturnValue;                                       // 0x0008(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash)
};
//static_assert(alignof(QATamerDescriber_QADescribeAnimByMontage) == 0x000008, "Wrong alignment on QATamerDescriber_QADescribeAnimByMontage");
//static_assert(sizeof(QATamerDescriber_QADescribeAnimByMontage) == 0x000018, "Wrong size on QATamerDescriber_QADescribeAnimByMontage");
//static_assert(offsetof(QATamerDescriber_QADescribeAnimByMontage, Montage) == 0x000000, "Member 'QATamerDescriber_QADescribeAnimByMontage::Montage' has a wrong offset!");
//static_assert(offsetof(QATamerDescriber_QADescribeAnimByMontage, ReturnValue) == 0x000008, "Member 'QATamerDescriber_QADescribeAnimByMontage::ReturnValue' has a wrong offset!");

// Function b1-Managed.QATamerDescriber.QADescribeBattleArena
// 0x0018 (0x0018 - 0x0000)
struct QATamerDescriber_QADescribeBattleArena final
{
public:
	class ABUTamerActor*                          TM;                                                // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class FString                                 ReturnValue;                                       // 0x0008(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash)
};
//static_assert(alignof(QATamerDescriber_QADescribeBattleArena) == 0x000008, "Wrong alignment on QATamerDescriber_QADescribeBattleArena");
//static_assert(sizeof(QATamerDescriber_QADescribeBattleArena) == 0x000018, "Wrong size on QATamerDescriber_QADescribeBattleArena");
//static_assert(offsetof(QATamerDescriber_QADescribeBattleArena, TM) == 0x000000, "Member 'QATamerDescriber_QADescribeBattleArena::TM' has a wrong offset!");
//static_assert(offsetof(QATamerDescriber_QADescribeBattleArena, ReturnValue) == 0x000008, "Member 'QATamerDescriber_QADescribeBattleArena::ReturnValue' has a wrong offset!");

// Function b1-Managed.QATamerDescriber.QADescribeEngagement
// 0x0018 (0x0018 - 0x0000)
struct QATamerDescriber_QADescribeEngagement final
{
public:
	class ABUTamerActor*                          TM;                                                // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class FString                                 ReturnValue;                                       // 0x0008(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash)
};
//static_assert(alignof(QATamerDescriber_QADescribeEngagement) == 0x000008, "Wrong alignment on QATamerDescriber_QADescribeEngagement");
//static_assert(sizeof(QATamerDescriber_QADescribeEngagement) == 0x000018, "Wrong size on QATamerDescriber_QADescribeEngagement");
//static_assert(offsetof(QATamerDescriber_QADescribeEngagement, TM) == 0x000000, "Member 'QATamerDescriber_QADescribeEngagement::TM' has a wrong offset!");
//static_assert(offsetof(QATamerDescriber_QADescribeEngagement, ReturnValue) == 0x000008, "Member 'QATamerDescriber_QADescribeEngagement::ReturnValue' has a wrong offset!");

// Function b1-Managed.QATamerDescriber.QADescribeBeAttacked
// 0x0018 (0x0018 - 0x0000)
struct QATamerDescriber_QADescribeBeAttacked final
{
public:
	class ABUTamerActor*                          TM;                                                // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class FString                                 ReturnValue;                                       // 0x0008(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash)
};
//static_assert(alignof(QATamerDescriber_QADescribeBeAttacked) == 0x000008, "Wrong alignment on QATamerDescriber_QADescribeBeAttacked");
//static_assert(sizeof(QATamerDescriber_QADescribeBeAttacked) == 0x000018, "Wrong size on QATamerDescriber_QADescribeBeAttacked");
//static_assert(offsetof(QATamerDescriber_QADescribeBeAttacked, TM) == 0x000000, "Member 'QATamerDescriber_QADescribeBeAttacked::TM' has a wrong offset!");
//static_assert(offsetof(QATamerDescriber_QADescribeBeAttacked, ReturnValue) == 0x000008, "Member 'QATamerDescriber_QADescribeBeAttacked::ReturnValue' has a wrong offset!");

// Function b1-Managed.QATamerDescriber.QADescribeCounter
// 0x0018 (0x0018 - 0x0000)
struct QATamerDescriber_QADescribeCounter final
{
public:
	class ABUTamerActor*                          TM;                                                // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class FString                                 ReturnValue;                                       // 0x0008(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash)
};
//static_assert(alignof(QATamerDescriber_QADescribeCounter) == 0x000008, "Wrong alignment on QATamerDescriber_QADescribeCounter");
//static_assert(sizeof(QATamerDescriber_QADescribeCounter) == 0x000018, "Wrong size on QATamerDescriber_QADescribeCounter");
//static_assert(offsetof(QATamerDescriber_QADescribeCounter, TM) == 0x000000, "Member 'QATamerDescriber_QADescribeCounter::TM' has a wrong offset!");
//static_assert(offsetof(QATamerDescriber_QADescribeCounter, ReturnValue) == 0x000008, "Member 'QATamerDescriber_QADescribeCounter::ReturnValue' has a wrong offset!");

// Function b1-Managed.QATamerDescriber.QAGetBTTaskNodes
// 0x0018 (0x0018 - 0x0000)
struct QATamerDescriber_QAGetBTTaskNodes final
{
public:
	class UBehaviorTree*                          BT;                                                // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FBehaviorTreeNodeData                  ReturnValue;                                       // 0x0008(0x0010)(Parm, OutParm, ReturnParm)
};
//static_assert(alignof(QATamerDescriber_QAGetBTTaskNodes) == 0x000008, "Wrong alignment on QATamerDescriber_QAGetBTTaskNodes");
//static_assert(sizeof(QATamerDescriber_QAGetBTTaskNodes) == 0x000018, "Wrong size on QATamerDescriber_QAGetBTTaskNodes");
//static_assert(offsetof(QATamerDescriber_QAGetBTTaskNodes, BT) == 0x000000, "Member 'QATamerDescriber_QAGetBTTaskNodes::BT' has a wrong offset!");
//static_assert(offsetof(QATamerDescriber_QAGetBTTaskNodes, ReturnValue) == 0x000008, "Member 'QATamerDescriber_QAGetBTTaskNodes::ReturnValue' has a wrong offset!");

// Function b1-Managed.QATamerDescriber.QADescribeBattle
// 0x0018 (0x0018 - 0x0000)
struct QATamerDescriber_QADescribeBattle final
{
public:
	class ABUTamerActor*                          TM;                                                // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class FString                                 ReturnValue;                                       // 0x0008(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash)
};
//static_assert(alignof(QATamerDescriber_QADescribeBattle) == 0x000008, "Wrong alignment on QATamerDescriber_QADescribeBattle");
//static_assert(sizeof(QATamerDescriber_QADescribeBattle) == 0x000018, "Wrong size on QATamerDescriber_QADescribeBattle");
//static_assert(offsetof(QATamerDescriber_QADescribeBattle, TM) == 0x000000, "Member 'QATamerDescriber_QADescribeBattle::TM' has a wrong offset!");
//static_assert(offsetof(QATamerDescriber_QADescribeBattle, ReturnValue) == 0x000008, "Member 'QATamerDescriber_QADescribeBattle::ReturnValue' has a wrong offset!");

// Function b1-Managed.QATamerDescriber.QADescribeSkill
// 0x0018 (0x0018 - 0x0000)
struct QATamerDescriber_QADescribeSkill final
{
public:
	class ABUTamerActor*                          TM;                                                // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class FString                                 ReturnValue;                                       // 0x0008(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash)
};
//static_assert(alignof(QATamerDescriber_QADescribeSkill) == 0x000008, "Wrong alignment on QATamerDescriber_QADescribeSkill");
//static_assert(sizeof(QATamerDescriber_QADescribeSkill) == 0x000018, "Wrong size on QATamerDescriber_QADescribeSkill");
//static_assert(offsetof(QATamerDescriber_QADescribeSkill, TM) == 0x000000, "Member 'QATamerDescriber_QADescribeSkill::TM' has a wrong offset!");
//static_assert(offsetof(QATamerDescriber_QADescribeSkill, ReturnValue) == 0x000008, "Member 'QATamerDescriber_QADescribeSkill::ReturnValue' has a wrong offset!");

// Function b1-Managed.QATamerDescriber.QADescribeDeath
// 0x0018 (0x0018 - 0x0000)
struct QATamerDescriber_QADescribeDeath final
{
public:
	class ABUTamerActor*                          TM;                                                // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class FString                                 ReturnValue;                                       // 0x0008(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash)
};
//static_assert(alignof(QATamerDescriber_QADescribeDeath) == 0x000008, "Wrong alignment on QATamerDescriber_QADescribeDeath");
//static_assert(sizeof(QATamerDescriber_QADescribeDeath) == 0x000018, "Wrong size on QATamerDescriber_QADescribeDeath");
//static_assert(offsetof(QATamerDescriber_QADescribeDeath, TM) == 0x000000, "Member 'QATamerDescriber_QADescribeDeath::TM' has a wrong offset!");
//static_assert(offsetof(QATamerDescriber_QADescribeDeath, ReturnValue) == 0x000008, "Member 'QATamerDescriber_QADescribeDeath::ReturnValue' has a wrong offset!");

// Function b1-Managed.QATamerDescriber.QADescribeArt
// 0x0018 (0x0018 - 0x0000)
struct QATamerDescriber_QADescribeArt final
{
public:
	class ABUTamerActor*                          TM;                                                // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class FString                                 ReturnValue;                                       // 0x0008(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash)
};
//static_assert(alignof(QATamerDescriber_QADescribeArt) == 0x000008, "Wrong alignment on QATamerDescriber_QADescribeArt");
//static_assert(sizeof(QATamerDescriber_QADescribeArt) == 0x000018, "Wrong size on QATamerDescriber_QADescribeArt");
//static_assert(offsetof(QATamerDescriber_QADescribeArt, TM) == 0x000000, "Member 'QATamerDescriber_QADescribeArt::TM' has a wrong offset!");
//static_assert(offsetof(QATamerDescriber_QADescribeArt, ReturnValue) == 0x000008, "Member 'QATamerDescriber_QADescribeArt::ReturnValue' has a wrong offset!");

// Function b1-Managed.QATamerDescriber.QADescribeISO
// 0x0018 (0x0018 - 0x0000)
struct QATamerDescriber_QADescribeISO final
{
public:
	class ABUTamerActor*                          TM;                                                // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class FString                                 ReturnValue;                                       // 0x0008(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash)
};
//static_assert(alignof(QATamerDescriber_QADescribeISO) == 0x000008, "Wrong alignment on QATamerDescriber_QADescribeISO");
//static_assert(sizeof(QATamerDescriber_QADescribeISO) == 0x000018, "Wrong size on QATamerDescriber_QADescribeISO");
//static_assert(offsetof(QATamerDescriber_QADescribeISO, TM) == 0x000000, "Member 'QATamerDescriber_QADescribeISO::TM' has a wrong offset!");
//static_assert(offsetof(QATamerDescriber_QADescribeISO, ReturnValue) == 0x000008, "Member 'QATamerDescriber_QADescribeISO::ReturnValue' has a wrong offset!");

// Function b1-Managed.QATamerDescriber.QADescribeBT
// 0x0018 (0x0018 - 0x0000)
struct QATamerDescriber_QADescribeBT final
{
public:
	class UBehaviorTree*                          BT;                                                // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class FString                                 ReturnValue;                                       // 0x0008(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash)
};
//static_assert(alignof(QATamerDescriber_QADescribeBT) == 0x000008, "Wrong alignment on QATamerDescriber_QADescribeBT");
//static_assert(sizeof(QATamerDescriber_QADescribeBT) == 0x000018, "Wrong size on QATamerDescriber_QADescribeBT");
//static_assert(offsetof(QATamerDescriber_QADescribeBT, BT) == 0x000000, "Member 'QATamerDescriber_QADescribeBT::BT' has a wrong offset!");
//static_assert(offsetof(QATamerDescriber_QADescribeBT, ReturnValue) == 0x000008, "Member 'QATamerDescriber_QADescribeBT::ReturnValue' has a wrong offset!");

// Function b1-Managed.BANS_GSHiddenBossBar.GSNotifyBeginCS
// 0x0048 (0x0048 - 0x0000)
struct BANS_GSHiddenBossBar_GSNotifyBeginCS final
{
public:
	struct FUStGSNotifyParam                      NotifyParam;                                       // 0x0000(0x0040)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
	float                                         TotalDuration;                                     // 0x0040(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
//static_assert(alignof(BANS_GSHiddenBossBar_GSNotifyBeginCS) == 0x000008, "Wrong alignment on BANS_GSHiddenBossBar_GSNotifyBeginCS");
//static_assert(sizeof(BANS_GSHiddenBossBar_GSNotifyBeginCS) == 0x000048, "Wrong size on BANS_GSHiddenBossBar_GSNotifyBeginCS");
//static_assert(offsetof(BANS_GSHiddenBossBar_GSNotifyBeginCS, NotifyParam) == 0x000000, "Member 'BANS_GSHiddenBossBar_GSNotifyBeginCS::NotifyParam' has a wrong offset!");
//static_assert(offsetof(BANS_GSHiddenBossBar_GSNotifyBeginCS, TotalDuration) == 0x000040, "Member 'BANS_GSHiddenBossBar_GSNotifyBeginCS::TotalDuration' has a wrong offset!");

// Function b1-Managed.BANS_GSHiddenBossBar.GSNotifyEndCS
// 0x0040 (0x0040 - 0x0000)
struct BANS_GSHiddenBossBar_GSNotifyEndCS final
{
public:
	struct FUStGSNotifyParam                      NotifyParam;                                       // 0x0000(0x0040)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
//static_assert(alignof(BANS_GSHiddenBossBar_GSNotifyEndCS) == 0x000008, "Wrong alignment on BANS_GSHiddenBossBar_GSNotifyEndCS");
//static_assert(sizeof(BANS_GSHiddenBossBar_GSNotifyEndCS) == 0x000040, "Wrong size on BANS_GSHiddenBossBar_GSNotifyEndCS");
//static_assert(offsetof(BANS_GSHiddenBossBar_GSNotifyEndCS, NotifyParam) == 0x000000, "Member 'BANS_GSHiddenBossBar_GSNotifyEndCS::NotifyParam' has a wrong offset!");

// Function b1-Managed.UGSReplayCSharpFuncLibCS.ProcessGameSpecificDemoHeaderCS
// 0x0020 (0x0020 - 0x0000)
struct UGSReplayCSharpFuncLibCS_ProcessGameSpecificDemoHeaderCS final
{
public:
	class FString                                 GameSpecificData;                                  // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash)
	class FString                                 Error;                                             // 0x0010(0x0010)(Parm, OutParm, ZeroConstructor, HasGetValueTypeHash)
};
//static_assert(alignof(UGSReplayCSharpFuncLibCS_ProcessGameSpecificDemoHeaderCS) == 0x000008, "Wrong alignment on UGSReplayCSharpFuncLibCS_ProcessGameSpecificDemoHeaderCS");
//static_assert(sizeof(UGSReplayCSharpFuncLibCS_ProcessGameSpecificDemoHeaderCS) == 0x000020, "Wrong size on UGSReplayCSharpFuncLibCS_ProcessGameSpecificDemoHeaderCS");
//static_assert(offsetof(UGSReplayCSharpFuncLibCS_ProcessGameSpecificDemoHeaderCS, GameSpecificData) == 0x000000, "Member 'UGSReplayCSharpFuncLibCS_ProcessGameSpecificDemoHeaderCS::GameSpecificData' has a wrong offset!");
//static_assert(offsetof(UGSReplayCSharpFuncLibCS_ProcessGameSpecificDemoHeaderCS, Error) == 0x000010, "Member 'UGSReplayCSharpFuncLibCS_ProcessGameSpecificDemoHeaderCS::Error' has a wrong offset!");

// Function b1-Managed.UGSReplayCSharpFuncLibCS.WriteGameSpecificDemoHeaderCS
// 0x0010 (0x0010 - 0x0000)
struct UGSReplayCSharpFuncLibCS_WriteGameSpecificDemoHeaderCS final
{
public:
	TArray<class FString>                         GameSpecificData;                                  // 0x0000(0x0010)(Parm, OutParm)
};
//static_assert(alignof(UGSReplayCSharpFuncLibCS_WriteGameSpecificDemoHeaderCS) == 0x000008, "Wrong alignment on UGSReplayCSharpFuncLibCS_WriteGameSpecificDemoHeaderCS");
//static_assert(sizeof(UGSReplayCSharpFuncLibCS_WriteGameSpecificDemoHeaderCS) == 0x000010, "Wrong size on UGSReplayCSharpFuncLibCS_WriteGameSpecificDemoHeaderCS");
//static_assert(offsetof(UGSReplayCSharpFuncLibCS_WriteGameSpecificDemoHeaderCS, GameSpecificData) == 0x000000, "Member 'UGSReplayCSharpFuncLibCS_WriteGameSpecificDemoHeaderCS::GameSpecificData' has a wrong offset!");

// Function b1-Managed.UGSReplayCSharpFuncLibCS.OnReplaySeverConnectionInit
// 0x0010 (0x0010 - 0x0000)
struct UGSReplayCSharpFuncLibCS_OnReplaySeverConnectionInit final
{
public:
	class UWorld*                                 World;                                             // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UNetConnection*                         SeverConnection;                                   // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
//static_assert(alignof(UGSReplayCSharpFuncLibCS_OnReplaySeverConnectionInit) == 0x000008, "Wrong alignment on UGSReplayCSharpFuncLibCS_OnReplaySeverConnectionInit");
//static_assert(sizeof(UGSReplayCSharpFuncLibCS_OnReplaySeverConnectionInit) == 0x000010, "Wrong size on UGSReplayCSharpFuncLibCS_OnReplaySeverConnectionInit");
//static_assert(offsetof(UGSReplayCSharpFuncLibCS_OnReplaySeverConnectionInit, World) == 0x000000, "Member 'UGSReplayCSharpFuncLibCS_OnReplaySeverConnectionInit::World' has a wrong offset!");
//static_assert(offsetof(UGSReplayCSharpFuncLibCS_OnReplaySeverConnectionInit, SeverConnection) == 0x000008, "Member 'UGSReplayCSharpFuncLibCS_OnReplaySeverConnectionInit::SeverConnection' has a wrong offset!");

// Function b1-Managed.UGSReplayCSharpFuncLibCS.OnReplayScrubComplete
// 0x0008 (0x0008 - 0x0000)
struct UGSReplayCSharpFuncLibCS_OnReplayScrubComplete final
{
public:
	class UWorld*                                 World;                                             // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
//static_assert(alignof(UGSReplayCSharpFuncLibCS_OnReplayScrubComplete) == 0x000008, "Wrong alignment on UGSReplayCSharpFuncLibCS_OnReplayScrubComplete");
//static_assert(sizeof(UGSReplayCSharpFuncLibCS_OnReplayScrubComplete) == 0x000008, "Wrong size on UGSReplayCSharpFuncLibCS_OnReplayScrubComplete");
//static_assert(offsetof(UGSReplayCSharpFuncLibCS_OnReplayScrubComplete, World) == 0x000000, "Member 'UGSReplayCSharpFuncLibCS_OnReplayScrubComplete::World' has a wrong offset!");

// Function b1-Managed.UGSReplayCSharpFuncLibCS.GSNetworkRemapPathCS
// 0x0028 (0x0028 - 0x0000)
struct UGSReplayCSharpFuncLibCS_GSNetworkRemapPathCS final
{
public:
	class UObject*                                Outer_0;                                           // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class FString                                 OriginName;                                        // 0x0008(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash)
	class FString                                 Name_0;                                            // 0x0018(0x0010)(Parm, OutParm, ZeroConstructor, HasGetValueTypeHash)
};
//static_assert(alignof(UGSReplayCSharpFuncLibCS_GSNetworkRemapPathCS) == 0x000008, "Wrong alignment on UGSReplayCSharpFuncLibCS_GSNetworkRemapPathCS");
//static_assert(sizeof(UGSReplayCSharpFuncLibCS_GSNetworkRemapPathCS) == 0x000028, "Wrong size on UGSReplayCSharpFuncLibCS_GSNetworkRemapPathCS");
//static_assert(offsetof(UGSReplayCSharpFuncLibCS_GSNetworkRemapPathCS, Outer_0) == 0x000000, "Member 'UGSReplayCSharpFuncLibCS_GSNetworkRemapPathCS::Outer_0' has a wrong offset!");
//static_assert(offsetof(UGSReplayCSharpFuncLibCS_GSNetworkRemapPathCS, OriginName) == 0x000008, "Member 'UGSReplayCSharpFuncLibCS_GSNetworkRemapPathCS::OriginName' has a wrong offset!");
//static_assert(offsetof(UGSReplayCSharpFuncLibCS_GSNetworkRemapPathCS, Name_0) == 0x000018, "Member 'UGSReplayCSharpFuncLibCS_GSNetworkRemapPathCS::Name_0' has a wrong offset!");

// Function b1-Managed.UGSReplayCSharpFuncLibCS.OnReplayStarted
// 0x0008 (0x0008 - 0x0000)
struct UGSReplayCSharpFuncLibCS_OnReplayStarted final
{
public:
	class UWorld*                                 World;                                             // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
//static_assert(alignof(UGSReplayCSharpFuncLibCS_OnReplayStarted) == 0x000008, "Wrong alignment on UGSReplayCSharpFuncLibCS_OnReplayStarted");
//static_assert(sizeof(UGSReplayCSharpFuncLibCS_OnReplayStarted) == 0x000008, "Wrong size on UGSReplayCSharpFuncLibCS_OnReplayStarted");
//static_assert(offsetof(UGSReplayCSharpFuncLibCS_OnReplayStarted, World) == 0x000000, "Member 'UGSReplayCSharpFuncLibCS_OnReplayStarted::World' has a wrong offset!");

// Function b1-Managed.BANS_GSJumpToPosition.GSNotifyBeginCS
// 0x0048 (0x0048 - 0x0000)
struct BANS_GSJumpToPosition_GSNotifyBeginCS final
{
public:
	struct FUStGSNotifyParam                      NotifyParam;                                       // 0x0000(0x0040)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
	float                                         TotalDuration;                                     // 0x0040(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
//static_assert(alignof(BANS_GSJumpToPosition_GSNotifyBeginCS) == 0x000008, "Wrong alignment on BANS_GSJumpToPosition_GSNotifyBeginCS");
//static_assert(sizeof(BANS_GSJumpToPosition_GSNotifyBeginCS) == 0x000048, "Wrong size on BANS_GSJumpToPosition_GSNotifyBeginCS");
//static_assert(offsetof(BANS_GSJumpToPosition_GSNotifyBeginCS, NotifyParam) == 0x000000, "Member 'BANS_GSJumpToPosition_GSNotifyBeginCS::NotifyParam' has a wrong offset!");
//static_assert(offsetof(BANS_GSJumpToPosition_GSNotifyBeginCS, TotalDuration) == 0x000040, "Member 'BANS_GSJumpToPosition_GSNotifyBeginCS::TotalDuration' has a wrong offset!");

// Function b1-Managed.BANS_GSMarkRolling.GSNotifyBeginCS
// 0x0048 (0x0048 - 0x0000)
struct BANS_GSMarkRolling_GSNotifyBeginCS final
{
public:
	struct FUStGSNotifyParam                      NotifyParam;                                       // 0x0000(0x0040)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
	float                                         TotalDuration;                                     // 0x0040(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
//static_assert(alignof(BANS_GSMarkRolling_GSNotifyBeginCS) == 0x000008, "Wrong alignment on BANS_GSMarkRolling_GSNotifyBeginCS");
//static_assert(sizeof(BANS_GSMarkRolling_GSNotifyBeginCS) == 0x000048, "Wrong size on BANS_GSMarkRolling_GSNotifyBeginCS");
//static_assert(offsetof(BANS_GSMarkRolling_GSNotifyBeginCS, NotifyParam) == 0x000000, "Member 'BANS_GSMarkRolling_GSNotifyBeginCS::NotifyParam' has a wrong offset!");
//static_assert(offsetof(BANS_GSMarkRolling_GSNotifyBeginCS, TotalDuration) == 0x000040, "Member 'BANS_GSMarkRolling_GSNotifyBeginCS::TotalDuration' has a wrong offset!");

// Function b1-Managed.BANS_GSMarkRolling.GSNotifyEndCS
// 0x0040 (0x0040 - 0x0000)
struct BANS_GSMarkRolling_GSNotifyEndCS final
{
public:
	struct FUStGSNotifyParam                      NotifyParam;                                       // 0x0000(0x0040)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
//static_assert(alignof(BANS_GSMarkRolling_GSNotifyEndCS) == 0x000008, "Wrong alignment on BANS_GSMarkRolling_GSNotifyEndCS");
//static_assert(sizeof(BANS_GSMarkRolling_GSNotifyEndCS) == 0x000040, "Wrong size on BANS_GSMarkRolling_GSNotifyEndCS");
//static_assert(offsetof(BANS_GSMarkRolling_GSNotifyEndCS, NotifyParam) == 0x000000, "Member 'BANS_GSMarkRolling_GSNotifyEndCS::NotifyParam' has a wrong offset!");

// Function b1-Managed.BANS_GSMontageJumpToSectionWhenHasBuff.GetJumpableSectionPrefix
// 0x0010 (0x0010 - 0x0000)
struct BANS_GSMontageJumpToSectionWhenHasBuff_GetJumpableSectionPrefix final
{
public:
	class FString                                 ReturnValue;                                       // 0x0000(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash)
};
//static_assert(alignof(BANS_GSMontageJumpToSectionWhenHasBuff_GetJumpableSectionPrefix) == 0x000008, "Wrong alignment on BANS_GSMontageJumpToSectionWhenHasBuff_GetJumpableSectionPrefix");
//static_assert(sizeof(BANS_GSMontageJumpToSectionWhenHasBuff_GetJumpableSectionPrefix) == 0x000010, "Wrong size on BANS_GSMontageJumpToSectionWhenHasBuff_GetJumpableSectionPrefix");
//static_assert(offsetof(BANS_GSMontageJumpToSectionWhenHasBuff_GetJumpableSectionPrefix, ReturnValue) == 0x000000, "Member 'BANS_GSMontageJumpToSectionWhenHasBuff_GetJumpableSectionPrefix::ReturnValue' has a wrong offset!");

// Function b1-Managed.BANS_GSMontageJumpToSectionWhenHasBuff.GSAllowCrossSection
// 0x0001 (0x0001 - 0x0000)
struct BANS_GSMontageJumpToSectionWhenHasBuff_GSAllowCrossSection final
{
public:
	uint8                                         ReturnValue : 1;                                   // 0x0000(0x0001)(BitIndex: 0x00, PropSize: 0x0001 (Parm, OutParm, ReturnParm, NoDestructor, HasGetValueTypeHash))
};
//static_assert(alignof(BANS_GSMontageJumpToSectionWhenHasBuff_GSAllowCrossSection) == 0x000001, "Wrong alignment on BANS_GSMontageJumpToSectionWhenHasBuff_GSAllowCrossSection");
//static_assert(sizeof(BANS_GSMontageJumpToSectionWhenHasBuff_GSAllowCrossSection) == 0x000001, "Wrong size on BANS_GSMontageJumpToSectionWhenHasBuff_GSAllowCrossSection");

// Function b1-Managed.BANS_GSMontageJumpToSectionWhenHasBuff.GSNotifyBeginCS
// 0x0048 (0x0048 - 0x0000)
struct BANS_GSMontageJumpToSectionWhenHasBuff_GSNotifyBeginCS final
{
public:
	struct FUStGSNotifyParam                      NotifyParam;                                       // 0x0000(0x0040)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
	float                                         TotalDuration;                                     // 0x0040(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
//static_assert(alignof(BANS_GSMontageJumpToSectionWhenHasBuff_GSNotifyBeginCS) == 0x000008, "Wrong alignment on BANS_GSMontageJumpToSectionWhenHasBuff_GSNotifyBeginCS");
//static_assert(sizeof(BANS_GSMontageJumpToSectionWhenHasBuff_GSNotifyBeginCS) == 0x000048, "Wrong size on BANS_GSMontageJumpToSectionWhenHasBuff_GSNotifyBeginCS");
//static_assert(offsetof(BANS_GSMontageJumpToSectionWhenHasBuff_GSNotifyBeginCS, NotifyParam) == 0x000000, "Member 'BANS_GSMontageJumpToSectionWhenHasBuff_GSNotifyBeginCS::NotifyParam' has a wrong offset!");
//static_assert(offsetof(BANS_GSMontageJumpToSectionWhenHasBuff_GSNotifyBeginCS, TotalDuration) == 0x000040, "Member 'BANS_GSMontageJumpToSectionWhenHasBuff_GSNotifyBeginCS::TotalDuration' has a wrong offset!");

// Function b1-Managed.BANS_GSMontageJumpToSectionWhenHasBuff.GSNotifyTickCS
// 0x0048 (0x0048 - 0x0000)
struct BANS_GSMontageJumpToSectionWhenHasBuff_GSNotifyTickCS final
{
public:
	struct FUStGSNotifyParam                      NotifyParam;                                       // 0x0000(0x0040)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
	float                                         FrameDeltaTime;                                    // 0x0040(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
//static_assert(alignof(BANS_GSMontageJumpToSectionWhenHasBuff_GSNotifyTickCS) == 0x000008, "Wrong alignment on BANS_GSMontageJumpToSectionWhenHasBuff_GSNotifyTickCS");
//static_assert(sizeof(BANS_GSMontageJumpToSectionWhenHasBuff_GSNotifyTickCS) == 0x000048, "Wrong size on BANS_GSMontageJumpToSectionWhenHasBuff_GSNotifyTickCS");
//static_assert(offsetof(BANS_GSMontageJumpToSectionWhenHasBuff_GSNotifyTickCS, NotifyParam) == 0x000000, "Member 'BANS_GSMontageJumpToSectionWhenHasBuff_GSNotifyTickCS::NotifyParam' has a wrong offset!");
//static_assert(offsetof(BANS_GSMontageJumpToSectionWhenHasBuff_GSNotifyTickCS, FrameDeltaTime) == 0x000040, "Member 'BANS_GSMontageJumpToSectionWhenHasBuff_GSNotifyTickCS::FrameDeltaTime' has a wrong offset!");

// Function b1-Managed.BANS_GSMontageJumpToSectionWhenHasBuff.GetAnimNSType
// 0x0001 (0x0001 - 0x0000)
struct BANS_GSMontageJumpToSectionWhenHasBuff_GetAnimNSType final
{
public:
	EGsEnAnimNS                                   ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
//static_assert(alignof(BANS_GSMontageJumpToSectionWhenHasBuff_GetAnimNSType) == 0x000001, "Wrong alignment on BANS_GSMontageJumpToSectionWhenHasBuff_GetAnimNSType");
//static_assert(sizeof(BANS_GSMontageJumpToSectionWhenHasBuff_GetAnimNSType) == 0x000001, "Wrong size on BANS_GSMontageJumpToSectionWhenHasBuff_GetAnimNSType");
//static_assert(offsetof(BANS_GSMontageJumpToSectionWhenHasBuff_GetAnimNSType, ReturnValue) == 0x000000, "Member 'BANS_GSMontageJumpToSectionWhenHasBuff_GetAnimNSType::ReturnValue' has a wrong offset!");

// Function b1-Managed.BANS_GSMontageJumpToSectionWhenHasBuff.GSNotifyEndCS
// 0x0040 (0x0040 - 0x0000)
struct BANS_GSMontageJumpToSectionWhenHasBuff_GSNotifyEndCS final
{
public:
	struct FUStGSNotifyParam                      NotifyParam;                                       // 0x0000(0x0040)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
//static_assert(alignof(BANS_GSMontageJumpToSectionWhenHasBuff_GSNotifyEndCS) == 0x000008, "Wrong alignment on BANS_GSMontageJumpToSectionWhenHasBuff_GSNotifyEndCS");
//static_assert(sizeof(BANS_GSMontageJumpToSectionWhenHasBuff_GSNotifyEndCS) == 0x000040, "Wrong size on BANS_GSMontageJumpToSectionWhenHasBuff_GSNotifyEndCS");
//static_assert(offsetof(BANS_GSMontageJumpToSectionWhenHasBuff_GSNotifyEndCS, NotifyParam) == 0x000000, "Member 'BANS_GSMontageJumpToSectionWhenHasBuff_GSNotifyEndCS::NotifyParam' has a wrong offset!");

// Function b1-Managed.BED_BehaviorNode_BeAttackedNumFromSkillEffect.GetNodeDescriptionInCS
// 0x0010 (0x0010 - 0x0000)
struct BED_BehaviorNode_BeAttackedNumFromSkillEffect_GetNodeDescriptionInCS final
{
public:
	class FString                                 ReturnValue;                                       // 0x0000(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash)
};
//static_assert(alignof(BED_BehaviorNode_BeAttackedNumFromSkillEffect_GetNodeDescriptionInCS) == 0x000008, "Wrong alignment on BED_BehaviorNode_BeAttackedNumFromSkillEffect_GetNodeDescriptionInCS");
//static_assert(sizeof(BED_BehaviorNode_BeAttackedNumFromSkillEffect_GetNodeDescriptionInCS) == 0x000010, "Wrong size on BED_BehaviorNode_BeAttackedNumFromSkillEffect_GetNodeDescriptionInCS");
//static_assert(offsetof(BED_BehaviorNode_BeAttackedNumFromSkillEffect_GetNodeDescriptionInCS, ReturnValue) == 0x000000, "Member 'BED_BehaviorNode_BeAttackedNumFromSkillEffect_GetNodeDescriptionInCS::ReturnValue' has a wrong offset!");

// Function b1-Managed.BED_BehaviorNode_BeAttackedNumFromSkillEffect.IsSupportViewType
// 0x0002 (0x0002 - 0x0000)
struct BED_BehaviorNode_BeAttackedNumFromSkillEffect_IsSupportViewType final
{
public:
	ECalliopeViewType                             InViewType;                                        // 0x0000(0x0001)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         ReturnValue : 1;                                   // 0x0001(0x0001)(BitIndex: 0x00, PropSize: 0x0001 (Parm, OutParm, ReturnParm, NoDestructor, HasGetValueTypeHash))
};
//static_assert(alignof(BED_BehaviorNode_BeAttackedNumFromSkillEffect_IsSupportViewType) == 0x000001, "Wrong alignment on BED_BehaviorNode_BeAttackedNumFromSkillEffect_IsSupportViewType");
//static_assert(sizeof(BED_BehaviorNode_BeAttackedNumFromSkillEffect_IsSupportViewType) == 0x000002, "Wrong size on BED_BehaviorNode_BeAttackedNumFromSkillEffect_IsSupportViewType");
//static_assert(offsetof(BED_BehaviorNode_BeAttackedNumFromSkillEffect_IsSupportViewType, InViewType) == 0x000000, "Member 'BED_BehaviorNode_BeAttackedNumFromSkillEffect_IsSupportViewType::InViewType' has a wrong offset!");

// Function b1-Managed.BANS_GSPauseAI.GSNotifyBeginCS
// 0x0048 (0x0048 - 0x0000)
struct BANS_GSPauseAI_GSNotifyBeginCS final
{
public:
	struct FUStGSNotifyParam                      NotifyParam;                                       // 0x0000(0x0040)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
	float                                         TotalDuration;                                     // 0x0040(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
//static_assert(alignof(BANS_GSPauseAI_GSNotifyBeginCS) == 0x000008, "Wrong alignment on BANS_GSPauseAI_GSNotifyBeginCS");
//static_assert(sizeof(BANS_GSPauseAI_GSNotifyBeginCS) == 0x000048, "Wrong size on BANS_GSPauseAI_GSNotifyBeginCS");
//static_assert(offsetof(BANS_GSPauseAI_GSNotifyBeginCS, NotifyParam) == 0x000000, "Member 'BANS_GSPauseAI_GSNotifyBeginCS::NotifyParam' has a wrong offset!");
//static_assert(offsetof(BANS_GSPauseAI_GSNotifyBeginCS, TotalDuration) == 0x000040, "Member 'BANS_GSPauseAI_GSNotifyBeginCS::TotalDuration' has a wrong offset!");

// Function b1-Managed.BANS_GSPauseAI.GSNotifyEndCS
// 0x0040 (0x0040 - 0x0000)
struct BANS_GSPauseAI_GSNotifyEndCS final
{
public:
	struct FUStGSNotifyParam                      NotifyParam;                                       // 0x0000(0x0040)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
//static_assert(alignof(BANS_GSPauseAI_GSNotifyEndCS) == 0x000008, "Wrong alignment on BANS_GSPauseAI_GSNotifyEndCS");
//static_assert(sizeof(BANS_GSPauseAI_GSNotifyEndCS) == 0x000040, "Wrong size on BANS_GSPauseAI_GSNotifyEndCS");
//static_assert(offsetof(BANS_GSPauseAI_GSNotifyEndCS, NotifyParam) == 0x000000, "Member 'BANS_GSPauseAI_GSNotifyEndCS::NotifyParam' has a wrong offset!");

// Function b1-Managed.BANS_GSPerfectChargeState.GSNotifyBeginCS
// 0x0048 (0x0048 - 0x0000)
struct BANS_GSPerfectChargeState_GSNotifyBeginCS final
{
public:
	struct FUStGSNotifyParam                      NotifyParam;                                       // 0x0000(0x0040)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
	float                                         TotalDuration;                                     // 0x0040(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
//static_assert(alignof(BANS_GSPerfectChargeState_GSNotifyBeginCS) == 0x000008, "Wrong alignment on BANS_GSPerfectChargeState_GSNotifyBeginCS");
//static_assert(sizeof(BANS_GSPerfectChargeState_GSNotifyBeginCS) == 0x000048, "Wrong size on BANS_GSPerfectChargeState_GSNotifyBeginCS");
//static_assert(offsetof(BANS_GSPerfectChargeState_GSNotifyBeginCS, NotifyParam) == 0x000000, "Member 'BANS_GSPerfectChargeState_GSNotifyBeginCS::NotifyParam' has a wrong offset!");
//static_assert(offsetof(BANS_GSPerfectChargeState_GSNotifyBeginCS, TotalDuration) == 0x000040, "Member 'BANS_GSPerfectChargeState_GSNotifyBeginCS::TotalDuration' has a wrong offset!");

// Function b1-Managed.BANS_GSPerfectChargeState.GSNotifyEndCS
// 0x0040 (0x0040 - 0x0000)
struct BANS_GSPerfectChargeState_GSNotifyEndCS final
{
public:
	struct FUStGSNotifyParam                      NotifyParam;                                       // 0x0000(0x0040)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
//static_assert(alignof(BANS_GSPerfectChargeState_GSNotifyEndCS) == 0x000008, "Wrong alignment on BANS_GSPerfectChargeState_GSNotifyEndCS");
//static_assert(sizeof(BANS_GSPerfectChargeState_GSNotifyEndCS) == 0x000040, "Wrong size on BANS_GSPerfectChargeState_GSNotifyEndCS");
//static_assert(offsetof(BANS_GSPerfectChargeState_GSNotifyEndCS, NotifyParam) == 0x000000, "Member 'BANS_GSPerfectChargeState_GSNotifyEndCS::NotifyParam' has a wrong offset!");

// Function b1-Managed.BANS_GSPlayCameraShake.GSNotifyBeginCS
// 0x0048 (0x0048 - 0x0000)
struct BANS_GSPlayCameraShake_GSNotifyBeginCS final
{
public:
	struct FUStGSNotifyParam                      NotifyParam;                                       // 0x0000(0x0040)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
	float                                         TotalDuration;                                     // 0x0040(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
//static_assert(alignof(BANS_GSPlayCameraShake_GSNotifyBeginCS) == 0x000008, "Wrong alignment on BANS_GSPlayCameraShake_GSNotifyBeginCS");
//static_assert(sizeof(BANS_GSPlayCameraShake_GSNotifyBeginCS) == 0x000048, "Wrong size on BANS_GSPlayCameraShake_GSNotifyBeginCS");
//static_assert(offsetof(BANS_GSPlayCameraShake_GSNotifyBeginCS, NotifyParam) == 0x000000, "Member 'BANS_GSPlayCameraShake_GSNotifyBeginCS::NotifyParam' has a wrong offset!");
//static_assert(offsetof(BANS_GSPlayCameraShake_GSNotifyBeginCS, TotalDuration) == 0x000040, "Member 'BANS_GSPlayCameraShake_GSNotifyBeginCS::TotalDuration' has a wrong offset!");

// Function b1-Managed.BANS_GSPlayCameraShake.GSNotifyTickCS
// 0x0048 (0x0048 - 0x0000)
struct BANS_GSPlayCameraShake_GSNotifyTickCS final
{
public:
	struct FUStGSNotifyParam                      NotifyParam;                                       // 0x0000(0x0040)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
	float                                         FrameDeltaTime;                                    // 0x0040(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
//static_assert(alignof(BANS_GSPlayCameraShake_GSNotifyTickCS) == 0x000008, "Wrong alignment on BANS_GSPlayCameraShake_GSNotifyTickCS");
//static_assert(sizeof(BANS_GSPlayCameraShake_GSNotifyTickCS) == 0x000048, "Wrong size on BANS_GSPlayCameraShake_GSNotifyTickCS");
//static_assert(offsetof(BANS_GSPlayCameraShake_GSNotifyTickCS, NotifyParam) == 0x000000, "Member 'BANS_GSPlayCameraShake_GSNotifyTickCS::NotifyParam' has a wrong offset!");
//static_assert(offsetof(BANS_GSPlayCameraShake_GSNotifyTickCS, FrameDeltaTime) == 0x000040, "Member 'BANS_GSPlayCameraShake_GSNotifyTickCS::FrameDeltaTime' has a wrong offset!");

// Function b1-Managed.BANS_GSPlayCameraShake.GSNotifyEndCS
// 0x0040 (0x0040 - 0x0000)
struct BANS_GSPlayCameraShake_GSNotifyEndCS final
{
public:
	struct FUStGSNotifyParam                      NotifyParam;                                       // 0x0000(0x0040)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
//static_assert(alignof(BANS_GSPlayCameraShake_GSNotifyEndCS) == 0x000008, "Wrong alignment on BANS_GSPlayCameraShake_GSNotifyEndCS");
//static_assert(sizeof(BANS_GSPlayCameraShake_GSNotifyEndCS) == 0x000040, "Wrong size on BANS_GSPlayCameraShake_GSNotifyEndCS");
//static_assert(offsetof(BANS_GSPlayCameraShake_GSNotifyEndCS, NotifyParam) == 0x000000, "Member 'BANS_GSPlayCameraShake_GSNotifyEndCS::NotifyParam' has a wrong offset!");

// Function b1-Managed.BANS_GSPlayDummyAnim.GSNotifyBeginCS
// 0x0048 (0x0048 - 0x0000)
struct BANS_GSPlayDummyAnim_GSNotifyBeginCS final
{
public:
	struct FUStGSNotifyParam                      NotifyParam;                                       // 0x0000(0x0040)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
	float                                         TotalDuration;                                     // 0x0040(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
//static_assert(alignof(BANS_GSPlayDummyAnim_GSNotifyBeginCS) == 0x000008, "Wrong alignment on BANS_GSPlayDummyAnim_GSNotifyBeginCS");
//static_assert(sizeof(BANS_GSPlayDummyAnim_GSNotifyBeginCS) == 0x000048, "Wrong size on BANS_GSPlayDummyAnim_GSNotifyBeginCS");
//static_assert(offsetof(BANS_GSPlayDummyAnim_GSNotifyBeginCS, NotifyParam) == 0x000000, "Member 'BANS_GSPlayDummyAnim_GSNotifyBeginCS::NotifyParam' has a wrong offset!");
//static_assert(offsetof(BANS_GSPlayDummyAnim_GSNotifyBeginCS, TotalDuration) == 0x000040, "Member 'BANS_GSPlayDummyAnim_GSNotifyBeginCS::TotalDuration' has a wrong offset!");

// Function b1-Managed.BANS_GSPlayDummyAnim.GSNotifyEndCS
// 0x0040 (0x0040 - 0x0000)
struct BANS_GSPlayDummyAnim_GSNotifyEndCS final
{
public:
	struct FUStGSNotifyParam                      NotifyParam;                                       // 0x0000(0x0040)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
//static_assert(alignof(BANS_GSPlayDummyAnim_GSNotifyEndCS) == 0x000008, "Wrong alignment on BANS_GSPlayDummyAnim_GSNotifyEndCS");
//static_assert(sizeof(BANS_GSPlayDummyAnim_GSNotifyEndCS) == 0x000040, "Wrong size on BANS_GSPlayDummyAnim_GSNotifyEndCS");
//static_assert(offsetof(BANS_GSPlayDummyAnim_GSNotifyEndCS, NotifyParam) == 0x000000, "Member 'BANS_GSPlayDummyAnim_GSNotifyEndCS::NotifyParam' has a wrong offset!");

// Function b1-Managed.BED_BehaviorNode_NotifyExclusiveItem.GetNodeDescriptionInCS
// 0x0010 (0x0010 - 0x0000)
struct BED_BehaviorNode_NotifyExclusiveItem_GetNodeDescriptionInCS final
{
public:
	class FString                                 ReturnValue;                                       // 0x0000(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash)
};
//static_assert(alignof(BED_BehaviorNode_NotifyExclusiveItem_GetNodeDescriptionInCS) == 0x000008, "Wrong alignment on BED_BehaviorNode_NotifyExclusiveItem_GetNodeDescriptionInCS");
//static_assert(sizeof(BED_BehaviorNode_NotifyExclusiveItem_GetNodeDescriptionInCS) == 0x000010, "Wrong size on BED_BehaviorNode_NotifyExclusiveItem_GetNodeDescriptionInCS");
//static_assert(offsetof(BED_BehaviorNode_NotifyExclusiveItem_GetNodeDescriptionInCS, ReturnValue) == 0x000000, "Member 'BED_BehaviorNode_NotifyExclusiveItem_GetNodeDescriptionInCS::ReturnValue' has a wrong offset!");

// Function b1-Managed.BANS_GSSetCharacterModuleConstraintProfile.GSNotifyBeginCS
// 0x0048 (0x0048 - 0x0000)
struct BANS_GSSetCharacterModuleConstraintProfile_GSNotifyBeginCS final
{
public:
	struct FUStGSNotifyParam                      NotifyParam;                                       // 0x0000(0x0040)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
	float                                         TotalDuration;                                     // 0x0040(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
//static_assert(alignof(BANS_GSSetCharacterModuleConstraintProfile_GSNotifyBeginCS) == 0x000008, "Wrong alignment on BANS_GSSetCharacterModuleConstraintProfile_GSNotifyBeginCS");
//static_assert(sizeof(BANS_GSSetCharacterModuleConstraintProfile_GSNotifyBeginCS) == 0x000048, "Wrong size on BANS_GSSetCharacterModuleConstraintProfile_GSNotifyBeginCS");
//static_assert(offsetof(BANS_GSSetCharacterModuleConstraintProfile_GSNotifyBeginCS, NotifyParam) == 0x000000, "Member 'BANS_GSSetCharacterModuleConstraintProfile_GSNotifyBeginCS::NotifyParam' has a wrong offset!");
//static_assert(offsetof(BANS_GSSetCharacterModuleConstraintProfile_GSNotifyBeginCS, TotalDuration) == 0x000040, "Member 'BANS_GSSetCharacterModuleConstraintProfile_GSNotifyBeginCS::TotalDuration' has a wrong offset!");

// Function b1-Managed.BANS_GSSetCharacterModuleConstraintProfile.GSNotifyEndCS
// 0x0040 (0x0040 - 0x0000)
struct BANS_GSSetCharacterModuleConstraintProfile_GSNotifyEndCS final
{
public:
	struct FUStGSNotifyParam                      NotifyParam;                                       // 0x0000(0x0040)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
//static_assert(alignof(BANS_GSSetCharacterModuleConstraintProfile_GSNotifyEndCS) == 0x000008, "Wrong alignment on BANS_GSSetCharacterModuleConstraintProfile_GSNotifyEndCS");
//static_assert(sizeof(BANS_GSSetCharacterModuleConstraintProfile_GSNotifyEndCS) == 0x000040, "Wrong size on BANS_GSSetCharacterModuleConstraintProfile_GSNotifyEndCS");
//static_assert(offsetof(BANS_GSSetCharacterModuleConstraintProfile_GSNotifyEndCS, NotifyParam) == 0x000000, "Member 'BANS_GSSetCharacterModuleConstraintProfile_GSNotifyEndCS::NotifyParam' has a wrong offset!");

// Function b1-Managed.BED_BehaviorNode_SimpleState.GetNodeDescriptionInCS
// 0x0010 (0x0010 - 0x0000)
struct BED_BehaviorNode_SimpleState_GetNodeDescriptionInCS final
{
public:
	class FString                                 ReturnValue;                                       // 0x0000(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash)
};
//static_assert(alignof(BED_BehaviorNode_SimpleState_GetNodeDescriptionInCS) == 0x000008, "Wrong alignment on BED_BehaviorNode_SimpleState_GetNodeDescriptionInCS");
//static_assert(sizeof(BED_BehaviorNode_SimpleState_GetNodeDescriptionInCS) == 0x000010, "Wrong size on BED_BehaviorNode_SimpleState_GetNodeDescriptionInCS");
//static_assert(offsetof(BED_BehaviorNode_SimpleState_GetNodeDescriptionInCS, ReturnValue) == 0x000000, "Member 'BED_BehaviorNode_SimpleState_GetNodeDescriptionInCS::ReturnValue' has a wrong offset!");

// Function b1-Managed.BANS_GSSpawnActorAndSyncAnimation.GSNotifyBeginCS
// 0x0048 (0x0048 - 0x0000)
struct BANS_GSSpawnActorAndSyncAnimation_GSNotifyBeginCS final
{
public:
	struct FUStGSNotifyParam                      NotifyParam;                                       // 0x0000(0x0040)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
	float                                         TotalDuration;                                     // 0x0040(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
//static_assert(alignof(BANS_GSSpawnActorAndSyncAnimation_GSNotifyBeginCS) == 0x000008, "Wrong alignment on BANS_GSSpawnActorAndSyncAnimation_GSNotifyBeginCS");
//static_assert(sizeof(BANS_GSSpawnActorAndSyncAnimation_GSNotifyBeginCS) == 0x000048, "Wrong size on BANS_GSSpawnActorAndSyncAnimation_GSNotifyBeginCS");
//static_assert(offsetof(BANS_GSSpawnActorAndSyncAnimation_GSNotifyBeginCS, NotifyParam) == 0x000000, "Member 'BANS_GSSpawnActorAndSyncAnimation_GSNotifyBeginCS::NotifyParam' has a wrong offset!");
//static_assert(offsetof(BANS_GSSpawnActorAndSyncAnimation_GSNotifyBeginCS, TotalDuration) == 0x000040, "Member 'BANS_GSSpawnActorAndSyncAnimation_GSNotifyBeginCS::TotalDuration' has a wrong offset!");

// Function b1-Managed.BANS_GSSpawnActorAndSyncAnimation.GSNotifyEndCS
// 0x0040 (0x0040 - 0x0000)
struct BANS_GSSpawnActorAndSyncAnimation_GSNotifyEndCS final
{
public:
	struct FUStGSNotifyParam                      NotifyParam;                                       // 0x0000(0x0040)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
//static_assert(alignof(BANS_GSSpawnActorAndSyncAnimation_GSNotifyEndCS) == 0x000008, "Wrong alignment on BANS_GSSpawnActorAndSyncAnimation_GSNotifyEndCS");
//static_assert(sizeof(BANS_GSSpawnActorAndSyncAnimation_GSNotifyEndCS) == 0x000040, "Wrong size on BANS_GSSpawnActorAndSyncAnimation_GSNotifyEndCS");
//static_assert(offsetof(BANS_GSSpawnActorAndSyncAnimation_GSNotifyEndCS, NotifyParam) == 0x000000, "Member 'BANS_GSSpawnActorAndSyncAnimation_GSNotifyEndCS::NotifyParam' has a wrong offset!");

// Function b1-Managed.BANS_GSSpawnActorAndSyncAnimation.GetAnimNSType
// 0x0001 (0x0001 - 0x0000)
struct BANS_GSSpawnActorAndSyncAnimation_GetAnimNSType final
{
public:
	EGsEnAnimNS                                   ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
//static_assert(alignof(BANS_GSSpawnActorAndSyncAnimation_GetAnimNSType) == 0x000001, "Wrong alignment on BANS_GSSpawnActorAndSyncAnimation_GetAnimNSType");
//static_assert(sizeof(BANS_GSSpawnActorAndSyncAnimation_GetAnimNSType) == 0x000001, "Wrong size on BANS_GSSpawnActorAndSyncAnimation_GetAnimNSType");
//static_assert(offsetof(BANS_GSSpawnActorAndSyncAnimation_GetAnimNSType, ReturnValue) == 0x000000, "Member 'BANS_GSSpawnActorAndSyncAnimation_GetAnimNSType::ReturnValue' has a wrong offset!");

// Function b1-Managed.BANS_GSSwitchAimingSetting.GSNotifyBeginCS
// 0x0048 (0x0048 - 0x0000)
struct BANS_GSSwitchAimingSetting_GSNotifyBeginCS final
{
public:
	struct FUStGSNotifyParam                      NotifyParam;                                       // 0x0000(0x0040)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
	float                                         TotalDuration;                                     // 0x0040(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
//static_assert(alignof(BANS_GSSwitchAimingSetting_GSNotifyBeginCS) == 0x000008, "Wrong alignment on BANS_GSSwitchAimingSetting_GSNotifyBeginCS");
//static_assert(sizeof(BANS_GSSwitchAimingSetting_GSNotifyBeginCS) == 0x000048, "Wrong size on BANS_GSSwitchAimingSetting_GSNotifyBeginCS");
//static_assert(offsetof(BANS_GSSwitchAimingSetting_GSNotifyBeginCS, NotifyParam) == 0x000000, "Member 'BANS_GSSwitchAimingSetting_GSNotifyBeginCS::NotifyParam' has a wrong offset!");
//static_assert(offsetof(BANS_GSSwitchAimingSetting_GSNotifyBeginCS, TotalDuration) == 0x000040, "Member 'BANS_GSSwitchAimingSetting_GSNotifyBeginCS::TotalDuration' has a wrong offset!");

// Function b1-Managed.BANS_GSSwitchAimingSetting.GSNotifyEndCS
// 0x0040 (0x0040 - 0x0000)
struct BANS_GSSwitchAimingSetting_GSNotifyEndCS final
{
public:
	struct FUStGSNotifyParam                      NotifyParam;                                       // 0x0000(0x0040)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
//static_assert(alignof(BANS_GSSwitchAimingSetting_GSNotifyEndCS) == 0x000008, "Wrong alignment on BANS_GSSwitchAimingSetting_GSNotifyEndCS");
//static_assert(sizeof(BANS_GSSwitchAimingSetting_GSNotifyEndCS) == 0x000040, "Wrong size on BANS_GSSwitchAimingSetting_GSNotifyEndCS");
//static_assert(offsetof(BANS_GSSwitchAimingSetting_GSNotifyEndCS, NotifyParam) == 0x000000, "Member 'BANS_GSSwitchAimingSetting_GSNotifyEndCS::NotifyParam' has a wrong offset!");

// Function b1-Managed.BANS_GSSwitchCollisionProfile.GSNotifyBeginCS
// 0x0048 (0x0048 - 0x0000)
struct BANS_GSSwitchCollisionProfile_GSNotifyBeginCS final
{
public:
	struct FUStGSNotifyParam                      NotifyParam;                                       // 0x0000(0x0040)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
	float                                         TotalDuration;                                     // 0x0040(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
//static_assert(alignof(BANS_GSSwitchCollisionProfile_GSNotifyBeginCS) == 0x000008, "Wrong alignment on BANS_GSSwitchCollisionProfile_GSNotifyBeginCS");
//static_assert(sizeof(BANS_GSSwitchCollisionProfile_GSNotifyBeginCS) == 0x000048, "Wrong size on BANS_GSSwitchCollisionProfile_GSNotifyBeginCS");
//static_assert(offsetof(BANS_GSSwitchCollisionProfile_GSNotifyBeginCS, NotifyParam) == 0x000000, "Member 'BANS_GSSwitchCollisionProfile_GSNotifyBeginCS::NotifyParam' has a wrong offset!");
//static_assert(offsetof(BANS_GSSwitchCollisionProfile_GSNotifyBeginCS, TotalDuration) == 0x000040, "Member 'BANS_GSSwitchCollisionProfile_GSNotifyBeginCS::TotalDuration' has a wrong offset!");

// Function b1-Managed.BANS_GSSwitchCollisionProfile.GSNotifyEndCS
// 0x0040 (0x0040 - 0x0000)
struct BANS_GSSwitchCollisionProfile_GSNotifyEndCS final
{
public:
	struct FUStGSNotifyParam                      NotifyParam;                                       // 0x0000(0x0040)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
//static_assert(alignof(BANS_GSSwitchCollisionProfile_GSNotifyEndCS) == 0x000008, "Wrong alignment on BANS_GSSwitchCollisionProfile_GSNotifyEndCS");
//static_assert(sizeof(BANS_GSSwitchCollisionProfile_GSNotifyEndCS) == 0x000040, "Wrong size on BANS_GSSwitchCollisionProfile_GSNotifyEndCS");
//static_assert(offsetof(BANS_GSSwitchCollisionProfile_GSNotifyEndCS, NotifyParam) == 0x000000, "Member 'BANS_GSSwitchCollisionProfile_GSNotifyEndCS::NotifyParam' has a wrong offset!");

// Function b1-Managed.BANS_GSSyncAnimationsIgnoreHitMove.GSNotifyBeginCS
// 0x0048 (0x0048 - 0x0000)
struct BANS_GSSyncAnimationsIgnoreHitMove_GSNotifyBeginCS final
{
public:
	struct FUStGSNotifyParam                      NotifyParam;                                       // 0x0000(0x0040)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
	float                                         TotalDuration;                                     // 0x0040(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
//static_assert(alignof(BANS_GSSyncAnimationsIgnoreHitMove_GSNotifyBeginCS) == 0x000008, "Wrong alignment on BANS_GSSyncAnimationsIgnoreHitMove_GSNotifyBeginCS");
//static_assert(sizeof(BANS_GSSyncAnimationsIgnoreHitMove_GSNotifyBeginCS) == 0x000048, "Wrong size on BANS_GSSyncAnimationsIgnoreHitMove_GSNotifyBeginCS");
//static_assert(offsetof(BANS_GSSyncAnimationsIgnoreHitMove_GSNotifyBeginCS, NotifyParam) == 0x000000, "Member 'BANS_GSSyncAnimationsIgnoreHitMove_GSNotifyBeginCS::NotifyParam' has a wrong offset!");
//static_assert(offsetof(BANS_GSSyncAnimationsIgnoreHitMove_GSNotifyBeginCS, TotalDuration) == 0x000040, "Member 'BANS_GSSyncAnimationsIgnoreHitMove_GSNotifyBeginCS::TotalDuration' has a wrong offset!");

// Function b1-Managed.BANS_GSSyncAnimationsIgnoreHitMove.GSNotifyTickCS
// 0x0048 (0x0048 - 0x0000)
struct BANS_GSSyncAnimationsIgnoreHitMove_GSNotifyTickCS final
{
public:
	struct FUStGSNotifyParam                      NotifyParam;                                       // 0x0000(0x0040)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
	float                                         FrameDeltaTime;                                    // 0x0040(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
//static_assert(alignof(BANS_GSSyncAnimationsIgnoreHitMove_GSNotifyTickCS) == 0x000008, "Wrong alignment on BANS_GSSyncAnimationsIgnoreHitMove_GSNotifyTickCS");
//static_assert(sizeof(BANS_GSSyncAnimationsIgnoreHitMove_GSNotifyTickCS) == 0x000048, "Wrong size on BANS_GSSyncAnimationsIgnoreHitMove_GSNotifyTickCS");
//static_assert(offsetof(BANS_GSSyncAnimationsIgnoreHitMove_GSNotifyTickCS, NotifyParam) == 0x000000, "Member 'BANS_GSSyncAnimationsIgnoreHitMove_GSNotifyTickCS::NotifyParam' has a wrong offset!");
//static_assert(offsetof(BANS_GSSyncAnimationsIgnoreHitMove_GSNotifyTickCS, FrameDeltaTime) == 0x000040, "Member 'BANS_GSSyncAnimationsIgnoreHitMove_GSNotifyTickCS::FrameDeltaTime' has a wrong offset!");

// Function b1-Managed.BANS_GSSyncAnimationsIgnoreHitMove.GSNotifyEndCS
// 0x0040 (0x0040 - 0x0000)
struct BANS_GSSyncAnimationsIgnoreHitMove_GSNotifyEndCS final
{
public:
	struct FUStGSNotifyParam                      NotifyParam;                                       // 0x0000(0x0040)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
//static_assert(alignof(BANS_GSSyncAnimationsIgnoreHitMove_GSNotifyEndCS) == 0x000008, "Wrong alignment on BANS_GSSyncAnimationsIgnoreHitMove_GSNotifyEndCS");
//static_assert(sizeof(BANS_GSSyncAnimationsIgnoreHitMove_GSNotifyEndCS) == 0x000040, "Wrong size on BANS_GSSyncAnimationsIgnoreHitMove_GSNotifyEndCS");
//static_assert(offsetof(BANS_GSSyncAnimationsIgnoreHitMove_GSNotifyEndCS, NotifyParam) == 0x000000, "Member 'BANS_GSSyncAnimationsIgnoreHitMove_GSNotifyEndCS::NotifyParam' has a wrong offset!");

// Function b1-Managed.BANS_GSHitMoveCollisionScale.GSNotifyBeginCS
// 0x0048 (0x0048 - 0x0000)
struct BANS_GSHitMoveCollisionScale_GSNotifyBeginCS final
{
public:
	struct FUStGSNotifyParam                      NotifyParam;                                       // 0x0000(0x0040)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
	float                                         TotalDuration;                                     // 0x0040(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
//static_assert(alignof(BANS_GSHitMoveCollisionScale_GSNotifyBeginCS) == 0x000008, "Wrong alignment on BANS_GSHitMoveCollisionScale_GSNotifyBeginCS");
//static_assert(sizeof(BANS_GSHitMoveCollisionScale_GSNotifyBeginCS) == 0x000048, "Wrong size on BANS_GSHitMoveCollisionScale_GSNotifyBeginCS");
//static_assert(offsetof(BANS_GSHitMoveCollisionScale_GSNotifyBeginCS, NotifyParam) == 0x000000, "Member 'BANS_GSHitMoveCollisionScale_GSNotifyBeginCS::NotifyParam' has a wrong offset!");
//static_assert(offsetof(BANS_GSHitMoveCollisionScale_GSNotifyBeginCS, TotalDuration) == 0x000040, "Member 'BANS_GSHitMoveCollisionScale_GSNotifyBeginCS::TotalDuration' has a wrong offset!");

// Function b1-Managed.BANS_GSHitMoveCollisionScale.GSNotifyEndCS
// 0x0040 (0x0040 - 0x0000)
struct BANS_GSHitMoveCollisionScale_GSNotifyEndCS final
{
public:
	struct FUStGSNotifyParam                      NotifyParam;                                       // 0x0000(0x0040)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
//static_assert(alignof(BANS_GSHitMoveCollisionScale_GSNotifyEndCS) == 0x000008, "Wrong alignment on BANS_GSHitMoveCollisionScale_GSNotifyEndCS");
//static_assert(sizeof(BANS_GSHitMoveCollisionScale_GSNotifyEndCS) == 0x000040, "Wrong size on BANS_GSHitMoveCollisionScale_GSNotifyEndCS");
//static_assert(offsetof(BANS_GSHitMoveCollisionScale_GSNotifyEndCS, NotifyParam) == 0x000000, "Member 'BANS_GSHitMoveCollisionScale_GSNotifyEndCS::NotifyParam' has a wrong offset!");

// Function b1-Managed.BED_MovieNode_Cut.GetNodeDescriptionInCS
// 0x0010 (0x0010 - 0x0000)
struct BED_MovieNode_Cut_GetNodeDescriptionInCS final
{
public:
	class FString                                 ReturnValue;                                       // 0x0000(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash)
};
//static_assert(alignof(BED_MovieNode_Cut_GetNodeDescriptionInCS) == 0x000008, "Wrong alignment on BED_MovieNode_Cut_GetNodeDescriptionInCS");
//static_assert(sizeof(BED_MovieNode_Cut_GetNodeDescriptionInCS) == 0x000010, "Wrong size on BED_MovieNode_Cut_GetNodeDescriptionInCS");
//static_assert(offsetof(BED_MovieNode_Cut_GetNodeDescriptionInCS, ReturnValue) == 0x000000, "Member 'BED_MovieNode_Cut_GetNodeDescriptionInCS::ReturnValue' has a wrong offset!");

// Function b1-Managed.BANS_GSJumpToCeiling.GSNotifyBeginCS
// 0x0048 (0x0048 - 0x0000)
struct BANS_GSJumpToCeiling_GSNotifyBeginCS final
{
public:
	struct FUStGSNotifyParam                      NotifyParam;                                       // 0x0000(0x0040)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
	float                                         TotalDuration;                                     // 0x0040(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
//static_assert(alignof(BANS_GSJumpToCeiling_GSNotifyBeginCS) == 0x000008, "Wrong alignment on BANS_GSJumpToCeiling_GSNotifyBeginCS");
//static_assert(sizeof(BANS_GSJumpToCeiling_GSNotifyBeginCS) == 0x000048, "Wrong size on BANS_GSJumpToCeiling_GSNotifyBeginCS");
//static_assert(offsetof(BANS_GSJumpToCeiling_GSNotifyBeginCS, NotifyParam) == 0x000000, "Member 'BANS_GSJumpToCeiling_GSNotifyBeginCS::NotifyParam' has a wrong offset!");
//static_assert(offsetof(BANS_GSJumpToCeiling_GSNotifyBeginCS, TotalDuration) == 0x000040, "Member 'BANS_GSJumpToCeiling_GSNotifyBeginCS::TotalDuration' has a wrong offset!");

// Function b1-Managed.BANS_GSJumpToCeiling.GSNotifyTickCS
// 0x0048 (0x0048 - 0x0000)
struct BANS_GSJumpToCeiling_GSNotifyTickCS final
{
public:
	struct FUStGSNotifyParam                      NotifyParam;                                       // 0x0000(0x0040)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
	float                                         FrameDeltaTime;                                    // 0x0040(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
//static_assert(alignof(BANS_GSJumpToCeiling_GSNotifyTickCS) == 0x000008, "Wrong alignment on BANS_GSJumpToCeiling_GSNotifyTickCS");
//static_assert(sizeof(BANS_GSJumpToCeiling_GSNotifyTickCS) == 0x000048, "Wrong size on BANS_GSJumpToCeiling_GSNotifyTickCS");
//static_assert(offsetof(BANS_GSJumpToCeiling_GSNotifyTickCS, NotifyParam) == 0x000000, "Member 'BANS_GSJumpToCeiling_GSNotifyTickCS::NotifyParam' has a wrong offset!");
//static_assert(offsetof(BANS_GSJumpToCeiling_GSNotifyTickCS, FrameDeltaTime) == 0x000040, "Member 'BANS_GSJumpToCeiling_GSNotifyTickCS::FrameDeltaTime' has a wrong offset!");

// Function b1-Managed.BANS_GSJumpToCeiling.GSNotifyEndCS
// 0x0040 (0x0040 - 0x0000)
struct BANS_GSJumpToCeiling_GSNotifyEndCS final
{
public:
	struct FUStGSNotifyParam                      NotifyParam;                                       // 0x0000(0x0040)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
//static_assert(alignof(BANS_GSJumpToCeiling_GSNotifyEndCS) == 0x000008, "Wrong alignment on BANS_GSJumpToCeiling_GSNotifyEndCS");
//static_assert(sizeof(BANS_GSJumpToCeiling_GSNotifyEndCS) == 0x000040, "Wrong size on BANS_GSJumpToCeiling_GSNotifyEndCS");
//static_assert(offsetof(BANS_GSJumpToCeiling_GSNotifyEndCS, NotifyParam) == 0x000000, "Member 'BANS_GSJumpToCeiling_GSNotifyEndCS::NotifyParam' has a wrong offset!");

// Function b1-Managed.BANS_GSLimitCharacterOnLand.GSNotifyTickCS
// 0x0048 (0x0048 - 0x0000)
struct BANS_GSLimitCharacterOnLand_GSNotifyTickCS final
{
public:
	struct FUStGSNotifyParam                      NotifyParam;                                       // 0x0000(0x0040)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
	float                                         FrameDeltaTime;                                    // 0x0040(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
//static_assert(alignof(BANS_GSLimitCharacterOnLand_GSNotifyTickCS) == 0x000008, "Wrong alignment on BANS_GSLimitCharacterOnLand_GSNotifyTickCS");
//static_assert(sizeof(BANS_GSLimitCharacterOnLand_GSNotifyTickCS) == 0x000048, "Wrong size on BANS_GSLimitCharacterOnLand_GSNotifyTickCS");
//static_assert(offsetof(BANS_GSLimitCharacterOnLand_GSNotifyTickCS, NotifyParam) == 0x000000, "Member 'BANS_GSLimitCharacterOnLand_GSNotifyTickCS::NotifyParam' has a wrong offset!");
//static_assert(offsetof(BANS_GSLimitCharacterOnLand_GSNotifyTickCS, FrameDeltaTime) == 0x000040, "Member 'BANS_GSLimitCharacterOnLand_GSNotifyTickCS::FrameDeltaTime' has a wrong offset!");

// Function b1-Managed.BED_QuestNode_SaveArchive.GetNodeDescriptionInCS
// 0x0010 (0x0010 - 0x0000)
struct BED_QuestNode_SaveArchive_GetNodeDescriptionInCS final
{
public:
	class FString                                 ReturnValue;                                       // 0x0000(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash)
};
//static_assert(alignof(BED_QuestNode_SaveArchive_GetNodeDescriptionInCS) == 0x000008, "Wrong alignment on BED_QuestNode_SaveArchive_GetNodeDescriptionInCS");
//static_assert(sizeof(BED_QuestNode_SaveArchive_GetNodeDescriptionInCS) == 0x000010, "Wrong size on BED_QuestNode_SaveArchive_GetNodeDescriptionInCS");
//static_assert(offsetof(BED_QuestNode_SaveArchive_GetNodeDescriptionInCS, ReturnValue) == 0x000000, "Member 'BED_QuestNode_SaveArchive_GetNodeDescriptionInCS::ReturnValue' has a wrong offset!");

// Function b1-Managed.BANS_GSMagicKeyCache.GSNotifyBeginCS
// 0x0048 (0x0048 - 0x0000)
struct BANS_GSMagicKeyCache_GSNotifyBeginCS final
{
public:
	struct FUStGSNotifyParam                      NotifyParam;                                       // 0x0000(0x0040)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
	float                                         TotalDuration;                                     // 0x0040(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
//static_assert(alignof(BANS_GSMagicKeyCache_GSNotifyBeginCS) == 0x000008, "Wrong alignment on BANS_GSMagicKeyCache_GSNotifyBeginCS");
//static_assert(sizeof(BANS_GSMagicKeyCache_GSNotifyBeginCS) == 0x000048, "Wrong size on BANS_GSMagicKeyCache_GSNotifyBeginCS");
//static_assert(offsetof(BANS_GSMagicKeyCache_GSNotifyBeginCS, NotifyParam) == 0x000000, "Member 'BANS_GSMagicKeyCache_GSNotifyBeginCS::NotifyParam' has a wrong offset!");
//static_assert(offsetof(BANS_GSMagicKeyCache_GSNotifyBeginCS, TotalDuration) == 0x000040, "Member 'BANS_GSMagicKeyCache_GSNotifyBeginCS::TotalDuration' has a wrong offset!");

// Function b1-Managed.BANS_GSMoveToSceneItem.GSNotifyBeginCS
// 0x0048 (0x0048 - 0x0000)
struct BANS_GSMoveToSceneItem_GSNotifyBeginCS final
{
public:
	struct FUStGSNotifyParam                      NotifyParam;                                       // 0x0000(0x0040)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
	float                                         TotalDuration;                                     // 0x0040(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
//static_assert(alignof(BANS_GSMoveToSceneItem_GSNotifyBeginCS) == 0x000008, "Wrong alignment on BANS_GSMoveToSceneItem_GSNotifyBeginCS");
//static_assert(sizeof(BANS_GSMoveToSceneItem_GSNotifyBeginCS) == 0x000048, "Wrong size on BANS_GSMoveToSceneItem_GSNotifyBeginCS");
//static_assert(offsetof(BANS_GSMoveToSceneItem_GSNotifyBeginCS, NotifyParam) == 0x000000, "Member 'BANS_GSMoveToSceneItem_GSNotifyBeginCS::NotifyParam' has a wrong offset!");
//static_assert(offsetof(BANS_GSMoveToSceneItem_GSNotifyBeginCS, TotalDuration) == 0x000040, "Member 'BANS_GSMoveToSceneItem_GSNotifyBeginCS::TotalDuration' has a wrong offset!");

// Function b1-Managed.BANS_GSMoveToSceneItem.GSNotifyEndCS
// 0x0040 (0x0040 - 0x0000)
struct BANS_GSMoveToSceneItem_GSNotifyEndCS final
{
public:
	struct FUStGSNotifyParam                      NotifyParam;                                       // 0x0000(0x0040)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
//static_assert(alignof(BANS_GSMoveToSceneItem_GSNotifyEndCS) == 0x000008, "Wrong alignment on BANS_GSMoveToSceneItem_GSNotifyEndCS");
//static_assert(sizeof(BANS_GSMoveToSceneItem_GSNotifyEndCS) == 0x000040, "Wrong size on BANS_GSMoveToSceneItem_GSNotifyEndCS");
//static_assert(offsetof(BANS_GSMoveToSceneItem_GSNotifyEndCS, NotifyParam) == 0x000000, "Member 'BANS_GSMoveToSceneItem_GSNotifyEndCS::NotifyParam' has a wrong offset!");

// Function b1-Managed.BED_QuestNode_Teleport.GetNodeDescriptionInCS
// 0x0010 (0x0010 - 0x0000)
struct BED_QuestNode_Teleport_GetNodeDescriptionInCS final
{
public:
	class FString                                 ReturnValue;                                       // 0x0000(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash)
};
//static_assert(alignof(BED_QuestNode_Teleport_GetNodeDescriptionInCS) == 0x000008, "Wrong alignment on BED_QuestNode_Teleport_GetNodeDescriptionInCS");
//static_assert(sizeof(BED_QuestNode_Teleport_GetNodeDescriptionInCS) == 0x000010, "Wrong size on BED_QuestNode_Teleport_GetNodeDescriptionInCS");
//static_assert(offsetof(BED_QuestNode_Teleport_GetNodeDescriptionInCS, ReturnValue) == 0x000000, "Member 'BED_QuestNode_Teleport_GetNodeDescriptionInCS::ReturnValue' has a wrong offset!");

// Function b1-Managed.BANS_GSPhysicsForce.GSNotifyBeginCS
// 0x0048 (0x0048 - 0x0000)
struct BANS_GSPhysicsForce_GSNotifyBeginCS final
{
public:
	struct FUStGSNotifyParam                      NotifyParam;                                       // 0x0000(0x0040)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
	float                                         TotalDuration;                                     // 0x0040(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
//static_assert(alignof(BANS_GSPhysicsForce_GSNotifyBeginCS) == 0x000008, "Wrong alignment on BANS_GSPhysicsForce_GSNotifyBeginCS");
//static_assert(sizeof(BANS_GSPhysicsForce_GSNotifyBeginCS) == 0x000048, "Wrong size on BANS_GSPhysicsForce_GSNotifyBeginCS");
//static_assert(offsetof(BANS_GSPhysicsForce_GSNotifyBeginCS, NotifyParam) == 0x000000, "Member 'BANS_GSPhysicsForce_GSNotifyBeginCS::NotifyParam' has a wrong offset!");
//static_assert(offsetof(BANS_GSPhysicsForce_GSNotifyBeginCS, TotalDuration) == 0x000040, "Member 'BANS_GSPhysicsForce_GSNotifyBeginCS::TotalDuration' has a wrong offset!");

// Function b1-Managed.BANS_GSPhysicsForce.GSNotifyTickCS
// 0x0048 (0x0048 - 0x0000)
struct BANS_GSPhysicsForce_GSNotifyTickCS final
{
public:
	struct FUStGSNotifyParam                      NotifyParam;                                       // 0x0000(0x0040)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
	float                                         FrameDeltaTime;                                    // 0x0040(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
//static_assert(alignof(BANS_GSPhysicsForce_GSNotifyTickCS) == 0x000008, "Wrong alignment on BANS_GSPhysicsForce_GSNotifyTickCS");
//static_assert(sizeof(BANS_GSPhysicsForce_GSNotifyTickCS) == 0x000048, "Wrong size on BANS_GSPhysicsForce_GSNotifyTickCS");
//static_assert(offsetof(BANS_GSPhysicsForce_GSNotifyTickCS, NotifyParam) == 0x000000, "Member 'BANS_GSPhysicsForce_GSNotifyTickCS::NotifyParam' has a wrong offset!");
//static_assert(offsetof(BANS_GSPhysicsForce_GSNotifyTickCS, FrameDeltaTime) == 0x000040, "Member 'BANS_GSPhysicsForce_GSNotifyTickCS::FrameDeltaTime' has a wrong offset!");

// Function b1-Managed.BANS_GSPhysicsForce.GSNotifyEndCS
// 0x0040 (0x0040 - 0x0000)
struct BANS_GSPhysicsForce_GSNotifyEndCS final
{
public:
	struct FUStGSNotifyParam                      NotifyParam;                                       // 0x0000(0x0040)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
//static_assert(alignof(BANS_GSPhysicsForce_GSNotifyEndCS) == 0x000008, "Wrong alignment on BANS_GSPhysicsForce_GSNotifyEndCS");
//static_assert(sizeof(BANS_GSPhysicsForce_GSNotifyEndCS) == 0x000040, "Wrong size on BANS_GSPhysicsForce_GSNotifyEndCS");
//static_assert(offsetof(BANS_GSPhysicsForce_GSNotifyEndCS, NotifyParam) == 0x000000, "Member 'BANS_GSPhysicsForce_GSNotifyEndCS::NotifyParam' has a wrong offset!");

// Function b1-Managed.BANS_GSSetAMSpeedRate.GetModifySpeedRate
// 0x0004 (0x0004 - 0x0000)
struct BANS_GSSetAMSpeedRate_GetModifySpeedRate final
{
public:
	float                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
//static_assert(alignof(BANS_GSSetAMSpeedRate_GetModifySpeedRate) == 0x000004, "Wrong alignment on BANS_GSSetAMSpeedRate_GetModifySpeedRate");
//static_assert(sizeof(BANS_GSSetAMSpeedRate_GetModifySpeedRate) == 0x000004, "Wrong size on BANS_GSSetAMSpeedRate_GetModifySpeedRate");
//static_assert(offsetof(BANS_GSSetAMSpeedRate_GetModifySpeedRate, ReturnValue) == 0x000000, "Member 'BANS_GSSetAMSpeedRate_GetModifySpeedRate::ReturnValue' has a wrong offset!");

// Function b1-Managed.BANS_GSSetAMSpeedRate.GSValidateInputCS
// 0x0008 (0x0008 - 0x0000)
struct BANS_GSSetAMSpeedRate_GSValidateInputCS final
{
public:
	class AActor*                                 Actor;                                             // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
//static_assert(alignof(BANS_GSSetAMSpeedRate_GSValidateInputCS) == 0x000008, "Wrong alignment on BANS_GSSetAMSpeedRate_GSValidateInputCS");
//static_assert(sizeof(BANS_GSSetAMSpeedRate_GSValidateInputCS) == 0x000008, "Wrong size on BANS_GSSetAMSpeedRate_GSValidateInputCS");
//static_assert(offsetof(BANS_GSSetAMSpeedRate_GSValidateInputCS, Actor) == 0x000000, "Member 'BANS_GSSetAMSpeedRate_GSValidateInputCS::Actor' has a wrong offset!");

// Function b1-Managed.BANS_GSSetAMSpeedRate.GSNotifyBeginCS
// 0x0048 (0x0048 - 0x0000)
struct BANS_GSSetAMSpeedRate_GSNotifyBeginCS final
{
public:
	struct FUStGSNotifyParam                      NotifyParam;                                       // 0x0000(0x0040)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
	float                                         TotalDuration;                                     // 0x0040(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
//static_assert(alignof(BANS_GSSetAMSpeedRate_GSNotifyBeginCS) == 0x000008, "Wrong alignment on BANS_GSSetAMSpeedRate_GSNotifyBeginCS");
//static_assert(sizeof(BANS_GSSetAMSpeedRate_GSNotifyBeginCS) == 0x000048, "Wrong size on BANS_GSSetAMSpeedRate_GSNotifyBeginCS");
//static_assert(offsetof(BANS_GSSetAMSpeedRate_GSNotifyBeginCS, NotifyParam) == 0x000000, "Member 'BANS_GSSetAMSpeedRate_GSNotifyBeginCS::NotifyParam' has a wrong offset!");
//static_assert(offsetof(BANS_GSSetAMSpeedRate_GSNotifyBeginCS, TotalDuration) == 0x000040, "Member 'BANS_GSSetAMSpeedRate_GSNotifyBeginCS::TotalDuration' has a wrong offset!");

// Function b1-Managed.BANS_GSSetAMSpeedRate.GetAnimNSType
// 0x0001 (0x0001 - 0x0000)
struct BANS_GSSetAMSpeedRate_GetAnimNSType final
{
public:
	EGsEnAnimNS                                   ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
//static_assert(alignof(BANS_GSSetAMSpeedRate_GetAnimNSType) == 0x000001, "Wrong alignment on BANS_GSSetAMSpeedRate_GetAnimNSType");
//static_assert(sizeof(BANS_GSSetAMSpeedRate_GetAnimNSType) == 0x000001, "Wrong size on BANS_GSSetAMSpeedRate_GetAnimNSType");
//static_assert(offsetof(BANS_GSSetAMSpeedRate_GetAnimNSType, ReturnValue) == 0x000000, "Member 'BANS_GSSetAMSpeedRate_GetAnimNSType::ReturnValue' has a wrong offset!");

// Function b1-Managed.BANS_GSSetAMSpeedRate.GSNotifyEndCS
// 0x0040 (0x0040 - 0x0000)
struct BANS_GSSetAMSpeedRate_GSNotifyEndCS final
{
public:
	struct FUStGSNotifyParam                      NotifyParam;                                       // 0x0000(0x0040)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
//static_assert(alignof(BANS_GSSetAMSpeedRate_GSNotifyEndCS) == 0x000008, "Wrong alignment on BANS_GSSetAMSpeedRate_GSNotifyEndCS");
//static_assert(sizeof(BANS_GSSetAMSpeedRate_GSNotifyEndCS) == 0x000040, "Wrong size on BANS_GSSetAMSpeedRate_GSNotifyEndCS");
//static_assert(offsetof(BANS_GSSetAMSpeedRate_GSNotifyEndCS, NotifyParam) == 0x000000, "Member 'BANS_GSSetAMSpeedRate_GSNotifyEndCS::NotifyParam' has a wrong offset!");

// Function b1-Managed.BANS_GSSetCompVisibility.GSNotifyBeginCS
// 0x0048 (0x0048 - 0x0000)
struct BANS_GSSetCompVisibility_GSNotifyBeginCS final
{
public:
	struct FUStGSNotifyParam                      NotifyParam;                                       // 0x0000(0x0040)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
	float                                         TotalDuration;                                     // 0x0040(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
//static_assert(alignof(BANS_GSSetCompVisibility_GSNotifyBeginCS) == 0x000008, "Wrong alignment on BANS_GSSetCompVisibility_GSNotifyBeginCS");
//static_assert(sizeof(BANS_GSSetCompVisibility_GSNotifyBeginCS) == 0x000048, "Wrong size on BANS_GSSetCompVisibility_GSNotifyBeginCS");
//static_assert(offsetof(BANS_GSSetCompVisibility_GSNotifyBeginCS, NotifyParam) == 0x000000, "Member 'BANS_GSSetCompVisibility_GSNotifyBeginCS::NotifyParam' has a wrong offset!");
//static_assert(offsetof(BANS_GSSetCompVisibility_GSNotifyBeginCS, TotalDuration) == 0x000040, "Member 'BANS_GSSetCompVisibility_GSNotifyBeginCS::TotalDuration' has a wrong offset!");

// Function b1-Managed.BANS_GSSetCompVisibility.GSNotifyTickCS
// 0x0048 (0x0048 - 0x0000)
struct BANS_GSSetCompVisibility_GSNotifyTickCS final
{
public:
	struct FUStGSNotifyParam                      NotifyParam;                                       // 0x0000(0x0040)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
	float                                         FrameDeltaTime;                                    // 0x0040(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
//static_assert(alignof(BANS_GSSetCompVisibility_GSNotifyTickCS) == 0x000008, "Wrong alignment on BANS_GSSetCompVisibility_GSNotifyTickCS");
//static_assert(sizeof(BANS_GSSetCompVisibility_GSNotifyTickCS) == 0x000048, "Wrong size on BANS_GSSetCompVisibility_GSNotifyTickCS");
//static_assert(offsetof(BANS_GSSetCompVisibility_GSNotifyTickCS, NotifyParam) == 0x000000, "Member 'BANS_GSSetCompVisibility_GSNotifyTickCS::NotifyParam' has a wrong offset!");
//static_assert(offsetof(BANS_GSSetCompVisibility_GSNotifyTickCS, FrameDeltaTime) == 0x000040, "Member 'BANS_GSSetCompVisibility_GSNotifyTickCS::FrameDeltaTime' has a wrong offset!");

// Function b1-Managed.BANS_GSSetCompVisibility.GSNotifyEndCS
// 0x0040 (0x0040 - 0x0000)
struct BANS_GSSetCompVisibility_GSNotifyEndCS final
{
public:
	struct FUStGSNotifyParam                      NotifyParam;                                       // 0x0000(0x0040)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
//static_assert(alignof(BANS_GSSetCompVisibility_GSNotifyEndCS) == 0x000008, "Wrong alignment on BANS_GSSetCompVisibility_GSNotifyEndCS");
//static_assert(sizeof(BANS_GSSetCompVisibility_GSNotifyEndCS) == 0x000040, "Wrong size on BANS_GSSetCompVisibility_GSNotifyEndCS");
//static_assert(offsetof(BANS_GSSetCompVisibility_GSNotifyEndCS, NotifyParam) == 0x000000, "Member 'BANS_GSSetCompVisibility_GSNotifyEndCS::NotifyParam' has a wrong offset!");

// Function b1-Managed.BED_ComboNode_Skill.GetNodeDescriptionInCS
// 0x0010 (0x0010 - 0x0000)
struct BED_ComboNode_Skill_GetNodeDescriptionInCS final
{
public:
	class FString                                 ReturnValue;                                       // 0x0000(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash)
};
//static_assert(alignof(BED_ComboNode_Skill_GetNodeDescriptionInCS) == 0x000008, "Wrong alignment on BED_ComboNode_Skill_GetNodeDescriptionInCS");
//static_assert(sizeof(BED_ComboNode_Skill_GetNodeDescriptionInCS) == 0x000010, "Wrong size on BED_ComboNode_Skill_GetNodeDescriptionInCS");
//static_assert(offsetof(BED_ComboNode_Skill_GetNodeDescriptionInCS, ReturnValue) == 0x000000, "Member 'BED_ComboNode_Skill_GetNodeDescriptionInCS::ReturnValue' has a wrong offset!");

// Function b1-Managed.BANS_GSSlowTime.GSNotifyBeginCS
// 0x0048 (0x0048 - 0x0000)
struct BANS_GSSlowTime_GSNotifyBeginCS final
{
public:
	struct FUStGSNotifyParam                      NotifyParam;                                       // 0x0000(0x0040)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
	float                                         TotalDuration;                                     // 0x0040(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
//static_assert(alignof(BANS_GSSlowTime_GSNotifyBeginCS) == 0x000008, "Wrong alignment on BANS_GSSlowTime_GSNotifyBeginCS");
//static_assert(sizeof(BANS_GSSlowTime_GSNotifyBeginCS) == 0x000048, "Wrong size on BANS_GSSlowTime_GSNotifyBeginCS");
//static_assert(offsetof(BANS_GSSlowTime_GSNotifyBeginCS, NotifyParam) == 0x000000, "Member 'BANS_GSSlowTime_GSNotifyBeginCS::NotifyParam' has a wrong offset!");
//static_assert(offsetof(BANS_GSSlowTime_GSNotifyBeginCS, TotalDuration) == 0x000040, "Member 'BANS_GSSlowTime_GSNotifyBeginCS::TotalDuration' has a wrong offset!");

// Function b1-Managed.BANS_GSSpawnBullets.GSValidateInputCS
// 0x0008 (0x0008 - 0x0000)
struct BANS_GSSpawnBullets_GSValidateInputCS final
{
public:
	class AActor*                                 InActor;                                           // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
//static_assert(alignof(BANS_GSSpawnBullets_GSValidateInputCS) == 0x000008, "Wrong alignment on BANS_GSSpawnBullets_GSValidateInputCS");
//static_assert(sizeof(BANS_GSSpawnBullets_GSValidateInputCS) == 0x000008, "Wrong size on BANS_GSSpawnBullets_GSValidateInputCS");
//static_assert(offsetof(BANS_GSSpawnBullets_GSValidateInputCS, InActor) == 0x000000, "Member 'BANS_GSSpawnBullets_GSValidateInputCS::InActor' has a wrong offset!");

// Function b1-Managed.BANS_GSSpawnBullets.GSNotifyBeginCS
// 0x0048 (0x0048 - 0x0000)
struct BANS_GSSpawnBullets_GSNotifyBeginCS final
{
public:
	struct FUStGSNotifyParam                      NotifyParam;                                       // 0x0000(0x0040)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
	float                                         TotalDuration;                                     // 0x0040(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
//static_assert(alignof(BANS_GSSpawnBullets_GSNotifyBeginCS) == 0x000008, "Wrong alignment on BANS_GSSpawnBullets_GSNotifyBeginCS");
//static_assert(sizeof(BANS_GSSpawnBullets_GSNotifyBeginCS) == 0x000048, "Wrong size on BANS_GSSpawnBullets_GSNotifyBeginCS");
//static_assert(offsetof(BANS_GSSpawnBullets_GSNotifyBeginCS, NotifyParam) == 0x000000, "Member 'BANS_GSSpawnBullets_GSNotifyBeginCS::NotifyParam' has a wrong offset!");
//static_assert(offsetof(BANS_GSSpawnBullets_GSNotifyBeginCS, TotalDuration) == 0x000040, "Member 'BANS_GSSpawnBullets_GSNotifyBeginCS::TotalDuration' has a wrong offset!");

// Function b1-Managed.BANS_GSSpawnBullets.GSNotifyEndCS
// 0x0040 (0x0040 - 0x0000)
struct BANS_GSSpawnBullets_GSNotifyEndCS final
{
public:
	struct FUStGSNotifyParam                      NotifyParam;                                       // 0x0000(0x0040)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
//static_assert(alignof(BANS_GSSpawnBullets_GSNotifyEndCS) == 0x000008, "Wrong alignment on BANS_GSSpawnBullets_GSNotifyEndCS");
//static_assert(sizeof(BANS_GSSpawnBullets_GSNotifyEndCS) == 0x000040, "Wrong size on BANS_GSSpawnBullets_GSNotifyEndCS");
//static_assert(offsetof(BANS_GSSpawnBullets_GSNotifyEndCS, NotifyParam) == 0x000000, "Member 'BANS_GSSpawnBullets_GSNotifyEndCS::NotifyParam' has a wrong offset!");

// Function b1-Managed.BANS_GSSpawnBullets.MarkDirty
// 0x0001 (0x0001 - 0x0000)
struct BANS_GSSpawnBullets_MarkDirty final
{
public:
	uint8                                         ReturnValue : 1;                                   // 0x0000(0x0001)(BitIndex: 0x00, PropSize: 0x0001 (Parm, OutParm, ReturnParm, NoDestructor, HasGetValueTypeHash))
};
//static_assert(alignof(BANS_GSSpawnBullets_MarkDirty) == 0x000001, "Wrong alignment on BANS_GSSpawnBullets_MarkDirty");
//static_assert(sizeof(BANS_GSSpawnBullets_MarkDirty) == 0x000001, "Wrong size on BANS_GSSpawnBullets_MarkDirty");

// Function b1-Managed.BANS_GSSwitchPlayerCamID.GSNotifyBeginCS
// 0x0048 (0x0048 - 0x0000)
struct BANS_GSSwitchPlayerCamID_GSNotifyBeginCS final
{
public:
	struct FUStGSNotifyParam                      NotifyParam;                                       // 0x0000(0x0040)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
	float                                         TotalDuration;                                     // 0x0040(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
//static_assert(alignof(BANS_GSSwitchPlayerCamID_GSNotifyBeginCS) == 0x000008, "Wrong alignment on BANS_GSSwitchPlayerCamID_GSNotifyBeginCS");
//static_assert(sizeof(BANS_GSSwitchPlayerCamID_GSNotifyBeginCS) == 0x000048, "Wrong size on BANS_GSSwitchPlayerCamID_GSNotifyBeginCS");
//static_assert(offsetof(BANS_GSSwitchPlayerCamID_GSNotifyBeginCS, NotifyParam) == 0x000000, "Member 'BANS_GSSwitchPlayerCamID_GSNotifyBeginCS::NotifyParam' has a wrong offset!");
//static_assert(offsetof(BANS_GSSwitchPlayerCamID_GSNotifyBeginCS, TotalDuration) == 0x000040, "Member 'BANS_GSSwitchPlayerCamID_GSNotifyBeginCS::TotalDuration' has a wrong offset!");

// Function b1-Managed.BANS_GSSwitchPlayerCamID.GSNotifyEndCS
// 0x0040 (0x0040 - 0x0000)
struct BANS_GSSwitchPlayerCamID_GSNotifyEndCS final
{
public:
	struct FUStGSNotifyParam                      NotifyParam;                                       // 0x0000(0x0040)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
//static_assert(alignof(BANS_GSSwitchPlayerCamID_GSNotifyEndCS) == 0x000008, "Wrong alignment on BANS_GSSwitchPlayerCamID_GSNotifyEndCS");
//static_assert(sizeof(BANS_GSSwitchPlayerCamID_GSNotifyEndCS) == 0x000040, "Wrong size on BANS_GSSwitchPlayerCamID_GSNotifyEndCS");
//static_assert(offsetof(BANS_GSSwitchPlayerCamID_GSNotifyEndCS, NotifyParam) == 0x000000, "Member 'BANS_GSSwitchPlayerCamID_GSNotifyEndCS::NotifyParam' has a wrong offset!");

// Function b1-Managed.BANS_GSTestIn426.GSNotifyBeginCS
// 0x0048 (0x0048 - 0x0000)
struct BANS_GSTestIn426_GSNotifyBeginCS final
{
public:
	struct FUStGSNotifyParam                      NotifyParam;                                       // 0x0000(0x0040)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
	float                                         TotalDuration;                                     // 0x0040(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
//static_assert(alignof(BANS_GSTestIn426_GSNotifyBeginCS) == 0x000008, "Wrong alignment on BANS_GSTestIn426_GSNotifyBeginCS");
//static_assert(sizeof(BANS_GSTestIn426_GSNotifyBeginCS) == 0x000048, "Wrong size on BANS_GSTestIn426_GSNotifyBeginCS");
//static_assert(offsetof(BANS_GSTestIn426_GSNotifyBeginCS, NotifyParam) == 0x000000, "Member 'BANS_GSTestIn426_GSNotifyBeginCS::NotifyParam' has a wrong offset!");
//static_assert(offsetof(BANS_GSTestIn426_GSNotifyBeginCS, TotalDuration) == 0x000040, "Member 'BANS_GSTestIn426_GSNotifyBeginCS::TotalDuration' has a wrong offset!");

// Function b1-Managed.BANS_GSTestIn426.GSNotifyTickCS
// 0x0048 (0x0048 - 0x0000)
struct BANS_GSTestIn426_GSNotifyTickCS final
{
public:
	struct FUStGSNotifyParam                      NotifyParam;                                       // 0x0000(0x0040)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
	float                                         FrameDeltaTime;                                    // 0x0040(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
//static_assert(alignof(BANS_GSTestIn426_GSNotifyTickCS) == 0x000008, "Wrong alignment on BANS_GSTestIn426_GSNotifyTickCS");
//static_assert(sizeof(BANS_GSTestIn426_GSNotifyTickCS) == 0x000048, "Wrong size on BANS_GSTestIn426_GSNotifyTickCS");
//static_assert(offsetof(BANS_GSTestIn426_GSNotifyTickCS, NotifyParam) == 0x000000, "Member 'BANS_GSTestIn426_GSNotifyTickCS::NotifyParam' has a wrong offset!");
//static_assert(offsetof(BANS_GSTestIn426_GSNotifyTickCS, FrameDeltaTime) == 0x000040, "Member 'BANS_GSTestIn426_GSNotifyTickCS::FrameDeltaTime' has a wrong offset!");

// Function b1-Managed.BANS_GSTestIn426.GSNotifyEndCS
// 0x0040 (0x0040 - 0x0000)
struct BANS_GSTestIn426_GSNotifyEndCS final
{
public:
	struct FUStGSNotifyParam                      NotifyParam;                                       // 0x0000(0x0040)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
//static_assert(alignof(BANS_GSTestIn426_GSNotifyEndCS) == 0x000008, "Wrong alignment on BANS_GSTestIn426_GSNotifyEndCS");
//static_assert(sizeof(BANS_GSTestIn426_GSNotifyEndCS) == 0x000040, "Wrong size on BANS_GSTestIn426_GSNotifyEndCS");
//static_assert(offsetof(BANS_GSTestIn426_GSNotifyEndCS, NotifyParam) == 0x000000, "Member 'BANS_GSTestIn426_GSNotifyEndCS::NotifyParam' has a wrong offset!");

// Function b1-Managed.BANS_GSWeaponAimTo.GSNotifyBeginCS
// 0x0048 (0x0048 - 0x0000)
struct BANS_GSWeaponAimTo_GSNotifyBeginCS final
{
public:
	struct FUStGSNotifyParam                      NotifyParam;                                       // 0x0000(0x0040)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
	float                                         TotalDuration;                                     // 0x0040(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
//static_assert(alignof(BANS_GSWeaponAimTo_GSNotifyBeginCS) == 0x000008, "Wrong alignment on BANS_GSWeaponAimTo_GSNotifyBeginCS");
//static_assert(sizeof(BANS_GSWeaponAimTo_GSNotifyBeginCS) == 0x000048, "Wrong size on BANS_GSWeaponAimTo_GSNotifyBeginCS");
//static_assert(offsetof(BANS_GSWeaponAimTo_GSNotifyBeginCS, NotifyParam) == 0x000000, "Member 'BANS_GSWeaponAimTo_GSNotifyBeginCS::NotifyParam' has a wrong offset!");
//static_assert(offsetof(BANS_GSWeaponAimTo_GSNotifyBeginCS, TotalDuration) == 0x000040, "Member 'BANS_GSWeaponAimTo_GSNotifyBeginCS::TotalDuration' has a wrong offset!");

// Function b1-Managed.BANS_GSWeaponAimTo.GSNotifyEndCS
// 0x0040 (0x0040 - 0x0000)
struct BANS_GSWeaponAimTo_GSNotifyEndCS final
{
public:
	struct FUStGSNotifyParam                      NotifyParam;                                       // 0x0000(0x0040)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
//static_assert(alignof(BANS_GSWeaponAimTo_GSNotifyEndCS) == 0x000008, "Wrong alignment on BANS_GSWeaponAimTo_GSNotifyEndCS");
//static_assert(sizeof(BANS_GSWeaponAimTo_GSNotifyEndCS) == 0x000040, "Wrong size on BANS_GSWeaponAimTo_GSNotifyEndCS");
//static_assert(offsetof(BANS_GSWeaponAimTo_GSNotifyEndCS, NotifyParam) == 0x000000, "Member 'BANS_GSWeaponAimTo_GSNotifyEndCS::NotifyParam' has a wrong offset!");

// Function b1-Managed.BANS_GSWeponHide.GSNotifyBeginCS
// 0x0048 (0x0048 - 0x0000)
struct BANS_GSWeponHide_GSNotifyBeginCS final
{
public:
	struct FUStGSNotifyParam                      NotifyParam;                                       // 0x0000(0x0040)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
	float                                         TotalDuration;                                     // 0x0040(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
//static_assert(alignof(BANS_GSWeponHide_GSNotifyBeginCS) == 0x000008, "Wrong alignment on BANS_GSWeponHide_GSNotifyBeginCS");
//static_assert(sizeof(BANS_GSWeponHide_GSNotifyBeginCS) == 0x000048, "Wrong size on BANS_GSWeponHide_GSNotifyBeginCS");
//static_assert(offsetof(BANS_GSWeponHide_GSNotifyBeginCS, NotifyParam) == 0x000000, "Member 'BANS_GSWeponHide_GSNotifyBeginCS::NotifyParam' has a wrong offset!");
//static_assert(offsetof(BANS_GSWeponHide_GSNotifyBeginCS, TotalDuration) == 0x000040, "Member 'BANS_GSWeponHide_GSNotifyBeginCS::TotalDuration' has a wrong offset!");

// Function b1-Managed.BANS_GSWeponHide.GSNotifyEndCS
// 0x0040 (0x0040 - 0x0000)
struct BANS_GSWeponHide_GSNotifyEndCS final
{
public:
	struct FUStGSNotifyParam                      NotifyParam;                                       // 0x0000(0x0040)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
//static_assert(alignof(BANS_GSWeponHide_GSNotifyEndCS) == 0x000008, "Wrong alignment on BANS_GSWeponHide_GSNotifyEndCS");
//static_assert(sizeof(BANS_GSWeponHide_GSNotifyEndCS) == 0x000040, "Wrong size on BANS_GSWeponHide_GSNotifyEndCS");
//static_assert(offsetof(BANS_GSWeponHide_GSNotifyEndCS, NotifyParam) == 0x000000, "Member 'BANS_GSWeponHide_GSNotifyEndCS::NotifyParam' has a wrong offset!");

// Function b1-Managed.BGU_ValidateMgrFuncLib.ImArtDev
// 0x0008 (0x0008 - 0x0000)
struct BGU_ValidateMgrFuncLib_ImArtDev final
{
public:
	class AActor*                                 Actor;                                             // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
//static_assert(alignof(BGU_ValidateMgrFuncLib_ImArtDev) == 0x000008, "Wrong alignment on BGU_ValidateMgrFuncLib_ImArtDev");
//static_assert(sizeof(BGU_ValidateMgrFuncLib_ImArtDev) == 0x000008, "Wrong size on BGU_ValidateMgrFuncLib_ImArtDev");
//static_assert(offsetof(BGU_ValidateMgrFuncLib_ImArtDev, Actor) == 0x000000, "Member 'BGU_ValidateMgrFuncLib_ImArtDev::Actor' has a wrong offset!");

// Function b1-Managed.BANS_PlayRotAMByCamRotInAM.GSNotifyBeginCS
// 0x0048 (0x0048 - 0x0000)
struct BANS_PlayRotAMByCamRotInAM_GSNotifyBeginCS final
{
public:
	struct FUStGSNotifyParam                      NotifyParam;                                       // 0x0000(0x0040)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
	float                                         TotalDuration;                                     // 0x0040(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
//static_assert(alignof(BANS_PlayRotAMByCamRotInAM_GSNotifyBeginCS) == 0x000008, "Wrong alignment on BANS_PlayRotAMByCamRotInAM_GSNotifyBeginCS");
//static_assert(sizeof(BANS_PlayRotAMByCamRotInAM_GSNotifyBeginCS) == 0x000048, "Wrong size on BANS_PlayRotAMByCamRotInAM_GSNotifyBeginCS");
//static_assert(offsetof(BANS_PlayRotAMByCamRotInAM_GSNotifyBeginCS, NotifyParam) == 0x000000, "Member 'BANS_PlayRotAMByCamRotInAM_GSNotifyBeginCS::NotifyParam' has a wrong offset!");
//static_assert(offsetof(BANS_PlayRotAMByCamRotInAM_GSNotifyBeginCS, TotalDuration) == 0x000040, "Member 'BANS_PlayRotAMByCamRotInAM_GSNotifyBeginCS::TotalDuration' has a wrong offset!");

// Function b1-Managed.BANS_PlayRotAMByCamRotInAM.GSNotifyTickCS
// 0x0048 (0x0048 - 0x0000)
struct BANS_PlayRotAMByCamRotInAM_GSNotifyTickCS final
{
public:
	struct FUStGSNotifyParam                      NotifyParam;                                       // 0x0000(0x0040)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
	float                                         FrameDeltaTime;                                    // 0x0040(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
//static_assert(alignof(BANS_PlayRotAMByCamRotInAM_GSNotifyTickCS) == 0x000008, "Wrong alignment on BANS_PlayRotAMByCamRotInAM_GSNotifyTickCS");
//static_assert(sizeof(BANS_PlayRotAMByCamRotInAM_GSNotifyTickCS) == 0x000048, "Wrong size on BANS_PlayRotAMByCamRotInAM_GSNotifyTickCS");
//static_assert(offsetof(BANS_PlayRotAMByCamRotInAM_GSNotifyTickCS, NotifyParam) == 0x000000, "Member 'BANS_PlayRotAMByCamRotInAM_GSNotifyTickCS::NotifyParam' has a wrong offset!");
//static_assert(offsetof(BANS_PlayRotAMByCamRotInAM_GSNotifyTickCS, FrameDeltaTime) == 0x000040, "Member 'BANS_PlayRotAMByCamRotInAM_GSNotifyTickCS::FrameDeltaTime' has a wrong offset!");

// Function b1-Managed.BANS_PlayRotAMByCamRotInAM.GSNotifyEndCS
// 0x0040 (0x0040 - 0x0000)
struct BANS_PlayRotAMByCamRotInAM_GSNotifyEndCS final
{
public:
	struct FUStGSNotifyParam                      NotifyParam;                                       // 0x0000(0x0040)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
//static_assert(alignof(BANS_PlayRotAMByCamRotInAM_GSNotifyEndCS) == 0x000008, "Wrong alignment on BANS_PlayRotAMByCamRotInAM_GSNotifyEndCS");
//static_assert(sizeof(BANS_PlayRotAMByCamRotInAM_GSNotifyEndCS) == 0x000040, "Wrong size on BANS_PlayRotAMByCamRotInAM_GSNotifyEndCS");
//static_assert(offsetof(BANS_PlayRotAMByCamRotInAM_GSNotifyEndCS, NotifyParam) == 0x000000, "Member 'BANS_PlayRotAMByCamRotInAM_GSNotifyEndCS::NotifyParam' has a wrong offset!");

// Function b1-Managed.BANS_SetCurveValueToHair.GetAnimNSType
// 0x0001 (0x0001 - 0x0000)
struct BANS_SetCurveValueToHair_GetAnimNSType final
{
public:
	EGsEnAnimNS                                   ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
//static_assert(alignof(BANS_SetCurveValueToHair_GetAnimNSType) == 0x000001, "Wrong alignment on BANS_SetCurveValueToHair_GetAnimNSType");
//static_assert(sizeof(BANS_SetCurveValueToHair_GetAnimNSType) == 0x000001, "Wrong size on BANS_SetCurveValueToHair_GetAnimNSType");
//static_assert(offsetof(BANS_SetCurveValueToHair_GetAnimNSType, ReturnValue) == 0x000000, "Member 'BANS_SetCurveValueToHair_GetAnimNSType::ReturnValue' has a wrong offset!");

// Function b1-Managed.BED_ProcessMachineNode_Battle.GetContextOutputsInCS
// 0x0010 (0x0010 - 0x0000)
struct BED_ProcessMachineNode_Battle_GetContextOutputsInCS final
{
public:
	TArray<class FName>                           ReturnValue;                                       // 0x0000(0x0010)(Parm, OutParm, ReturnParm)
};
//static_assert(alignof(BED_ProcessMachineNode_Battle_GetContextOutputsInCS) == 0x000008, "Wrong alignment on BED_ProcessMachineNode_Battle_GetContextOutputsInCS");
//static_assert(sizeof(BED_ProcessMachineNode_Battle_GetContextOutputsInCS) == 0x000010, "Wrong size on BED_ProcessMachineNode_Battle_GetContextOutputsInCS");
//static_assert(offsetof(BED_ProcessMachineNode_Battle_GetContextOutputsInCS, ReturnValue) == 0x000000, "Member 'BED_ProcessMachineNode_Battle_GetContextOutputsInCS::ReturnValue' has a wrong offset!");

// Function b1-Managed.BANS_SetMPCParam.GSNotifyBeginCS
// 0x0048 (0x0048 - 0x0000)
struct BANS_SetMPCParam_GSNotifyBeginCS final
{
public:
	struct FUStGSNotifyParam                      NotifyParam;                                       // 0x0000(0x0040)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
	float                                         TotalDuration;                                     // 0x0040(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
//static_assert(alignof(BANS_SetMPCParam_GSNotifyBeginCS) == 0x000008, "Wrong alignment on BANS_SetMPCParam_GSNotifyBeginCS");
//static_assert(sizeof(BANS_SetMPCParam_GSNotifyBeginCS) == 0x000048, "Wrong size on BANS_SetMPCParam_GSNotifyBeginCS");
//static_assert(offsetof(BANS_SetMPCParam_GSNotifyBeginCS, NotifyParam) == 0x000000, "Member 'BANS_SetMPCParam_GSNotifyBeginCS::NotifyParam' has a wrong offset!");
//static_assert(offsetof(BANS_SetMPCParam_GSNotifyBeginCS, TotalDuration) == 0x000040, "Member 'BANS_SetMPCParam_GSNotifyBeginCS::TotalDuration' has a wrong offset!");

// Function b1-Managed.BANS_SwicthMoveState.GSNotifyBeginCS
// 0x0048 (0x0048 - 0x0000)
struct BANS_SwicthMoveState_GSNotifyBeginCS final
{
public:
	struct FUStGSNotifyParam                      NotifyParam;                                       // 0x0000(0x0040)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
	float                                         TotalDuration;                                     // 0x0040(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
//static_assert(alignof(BANS_SwicthMoveState_GSNotifyBeginCS) == 0x000008, "Wrong alignment on BANS_SwicthMoveState_GSNotifyBeginCS");
//static_assert(sizeof(BANS_SwicthMoveState_GSNotifyBeginCS) == 0x000048, "Wrong size on BANS_SwicthMoveState_GSNotifyBeginCS");
//static_assert(offsetof(BANS_SwicthMoveState_GSNotifyBeginCS, NotifyParam) == 0x000000, "Member 'BANS_SwicthMoveState_GSNotifyBeginCS::NotifyParam' has a wrong offset!");
//static_assert(offsetof(BANS_SwicthMoveState_GSNotifyBeginCS, TotalDuration) == 0x000040, "Member 'BANS_SwicthMoveState_GSNotifyBeginCS::TotalDuration' has a wrong offset!");

// Function b1-Managed.BANS_SwicthMoveState.GSNotifyEndCS
// 0x0040 (0x0040 - 0x0000)
struct BANS_SwicthMoveState_GSNotifyEndCS final
{
public:
	struct FUStGSNotifyParam                      NotifyParam;                                       // 0x0000(0x0040)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
//static_assert(alignof(BANS_SwicthMoveState_GSNotifyEndCS) == 0x000008, "Wrong alignment on BANS_SwicthMoveState_GSNotifyEndCS");
//static_assert(sizeof(BANS_SwicthMoveState_GSNotifyEndCS) == 0x000040, "Wrong size on BANS_SwicthMoveState_GSNotifyEndCS");
//static_assert(offsetof(BANS_SwicthMoveState_GSNotifyEndCS, NotifyParam) == 0x000000, "Member 'BANS_SwicthMoveState_GSNotifyEndCS::NotifyParam' has a wrong offset!");

// Function b1-Managed.BAN_EnterSkillCameraGroup.bIsNativeBranchingPointCS
// 0x0001 (0x0001 - 0x0000)
struct BAN_EnterSkillCameraGroup_bIsNativeBranchingPointCS final
{
public:
	uint8                                         ReturnValue : 1;                                   // 0x0000(0x0001)(BitIndex: 0x00, PropSize: 0x0001 (Parm, OutParm, ReturnParm, NoDestructor, HasGetValueTypeHash))
};
//static_assert(alignof(BAN_EnterSkillCameraGroup_bIsNativeBranchingPointCS) == 0x000001, "Wrong alignment on BAN_EnterSkillCameraGroup_bIsNativeBranchingPointCS");
//static_assert(sizeof(BAN_EnterSkillCameraGroup_bIsNativeBranchingPointCS) == 0x000001, "Wrong size on BAN_EnterSkillCameraGroup_bIsNativeBranchingPointCS");

// Function b1-Managed.BAN_EnterSkillCameraGroup.GSNotifyCS
// 0x0040 (0x0040 - 0x0000)
struct BAN_EnterSkillCameraGroup_GSNotifyCS final
{
public:
	struct FUStGSNotifyParam                      NotifyParam;                                       // 0x0000(0x0040)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
//static_assert(alignof(BAN_EnterSkillCameraGroup_GSNotifyCS) == 0x000008, "Wrong alignment on BAN_EnterSkillCameraGroup_GSNotifyCS");
//static_assert(sizeof(BAN_EnterSkillCameraGroup_GSNotifyCS) == 0x000040, "Wrong size on BAN_EnterSkillCameraGroup_GSNotifyCS");
//static_assert(offsetof(BAN_EnterSkillCameraGroup_GSNotifyCS, NotifyParam) == 0x000000, "Member 'BAN_EnterSkillCameraGroup_GSNotifyCS::NotifyParam' has a wrong offset!");

// Function b1-Managed.BED_ProcessMachineNode_Story.GetNodeDescriptionInCS
// 0x0010 (0x0010 - 0x0000)
struct BED_ProcessMachineNode_Story_GetNodeDescriptionInCS final
{
public:
	class FString                                 ReturnValue;                                       // 0x0000(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash)
};
//static_assert(alignof(BED_ProcessMachineNode_Story_GetNodeDescriptionInCS) == 0x000008, "Wrong alignment on BED_ProcessMachineNode_Story_GetNodeDescriptionInCS");
//static_assert(sizeof(BED_ProcessMachineNode_Story_GetNodeDescriptionInCS) == 0x000010, "Wrong size on BED_ProcessMachineNode_Story_GetNodeDescriptionInCS");
//static_assert(offsetof(BED_ProcessMachineNode_Story_GetNodeDescriptionInCS, ReturnValue) == 0x000000, "Member 'BED_ProcessMachineNode_Story_GetNodeDescriptionInCS::ReturnValue' has a wrong offset!");

// Function b1-Managed.BANS_GSHandleBattleMessage.bIsNativeBranchingPointCS
// 0x0001 (0x0001 - 0x0000)
struct BANS_GSHandleBattleMessage_bIsNativeBranchingPointCS final
{
public:
	uint8                                         ReturnValue : 1;                                   // 0x0000(0x0001)(BitIndex: 0x00, PropSize: 0x0001 (Parm, OutParm, ReturnParm, NoDestructor, HasGetValueTypeHash))
};
//static_assert(alignof(BANS_GSHandleBattleMessage_bIsNativeBranchingPointCS) == 0x000001, "Wrong alignment on BANS_GSHandleBattleMessage_bIsNativeBranchingPointCS");
//static_assert(sizeof(BANS_GSHandleBattleMessage_bIsNativeBranchingPointCS) == 0x000001, "Wrong size on BANS_GSHandleBattleMessage_bIsNativeBranchingPointCS");

// Function b1-Managed.BANS_GSHandleBattleMessage.GSNotifyCS
// 0x0040 (0x0040 - 0x0000)
struct BANS_GSHandleBattleMessage_GSNotifyCS final
{
public:
	struct FUStGSNotifyParam                      NotifyParam;                                       // 0x0000(0x0040)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
//static_assert(alignof(BANS_GSHandleBattleMessage_GSNotifyCS) == 0x000008, "Wrong alignment on BANS_GSHandleBattleMessage_GSNotifyCS");
//static_assert(sizeof(BANS_GSHandleBattleMessage_GSNotifyCS) == 0x000040, "Wrong size on BANS_GSHandleBattleMessage_GSNotifyCS");
//static_assert(offsetof(BANS_GSHandleBattleMessage_GSNotifyCS, NotifyParam) == 0x000000, "Member 'BANS_GSHandleBattleMessage_GSNotifyCS::NotifyParam' has a wrong offset!");

// Function b1-Managed.BAN_GSSummonUnit.GSNotifyCS
// 0x0040 (0x0040 - 0x0000)
struct BAN_GSSummonUnit_GSNotifyCS final
{
public:
	struct FUStGSNotifyParam                      NotifyParam;                                       // 0x0000(0x0040)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
//static_assert(alignof(BAN_GSSummonUnit_GSNotifyCS) == 0x000008, "Wrong alignment on BAN_GSSummonUnit_GSNotifyCS");
//static_assert(sizeof(BAN_GSSummonUnit_GSNotifyCS) == 0x000040, "Wrong size on BAN_GSSummonUnit_GSNotifyCS");
//static_assert(offsetof(BAN_GSSummonUnit_GSNotifyCS, NotifyParam) == 0x000000, "Member 'BAN_GSSummonUnit_GSNotifyCS::NotifyParam' has a wrong offset!");

// Function b1-Managed.BAN_ShowMapTips.GSNotifyCS
// 0x0040 (0x0040 - 0x0000)
struct BAN_ShowMapTips_GSNotifyCS final
{
public:
	struct FUStGSNotifyParam                      NotifyParam;                                       // 0x0000(0x0040)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
//static_assert(alignof(BAN_ShowMapTips_GSNotifyCS) == 0x000008, "Wrong alignment on BAN_ShowMapTips_GSNotifyCS");
//static_assert(sizeof(BAN_ShowMapTips_GSNotifyCS) == 0x000040, "Wrong size on BAN_ShowMapTips_GSNotifyCS");
//static_assert(offsetof(BAN_ShowMapTips_GSNotifyCS, NotifyParam) == 0x000000, "Member 'BAN_ShowMapTips_GSNotifyCS::NotifyParam' has a wrong offset!");

// Function b1-Managed.BANS_SpawnFXByDispConfig.GSNotifyBeginCS
// 0x0048 (0x0048 - 0x0000)
struct BANS_SpawnFXByDispConfig_GSNotifyBeginCS final
{
public:
	struct FUStGSNotifyParam                      NotifyParam;                                       // 0x0000(0x0040)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
	float                                         TotalDuration;                                     // 0x0040(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
//static_assert(alignof(BANS_SpawnFXByDispConfig_GSNotifyBeginCS) == 0x000008, "Wrong alignment on BANS_SpawnFXByDispConfig_GSNotifyBeginCS");
//static_assert(sizeof(BANS_SpawnFXByDispConfig_GSNotifyBeginCS) == 0x000048, "Wrong size on BANS_SpawnFXByDispConfig_GSNotifyBeginCS");
//static_assert(offsetof(BANS_SpawnFXByDispConfig_GSNotifyBeginCS, NotifyParam) == 0x000000, "Member 'BANS_SpawnFXByDispConfig_GSNotifyBeginCS::NotifyParam' has a wrong offset!");
//static_assert(offsetof(BANS_SpawnFXByDispConfig_GSNotifyBeginCS, TotalDuration) == 0x000040, "Member 'BANS_SpawnFXByDispConfig_GSNotifyBeginCS::TotalDuration' has a wrong offset!");

// Function b1-Managed.BANS_SpawnFXByDispConfig.GSNotifyEndCS
// 0x0040 (0x0040 - 0x0000)
struct BANS_SpawnFXByDispConfig_GSNotifyEndCS final
{
public:
	struct FUStGSNotifyParam                      NotifyParam;                                       // 0x0000(0x0040)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
//static_assert(alignof(BANS_SpawnFXByDispConfig_GSNotifyEndCS) == 0x000008, "Wrong alignment on BANS_SpawnFXByDispConfig_GSNotifyEndCS");
//static_assert(sizeof(BANS_SpawnFXByDispConfig_GSNotifyEndCS) == 0x000040, "Wrong size on BANS_SpawnFXByDispConfig_GSNotifyEndCS");
//static_assert(offsetof(BANS_SpawnFXByDispConfig_GSNotifyEndCS, NotifyParam) == 0x000000, "Member 'BANS_SpawnFXByDispConfig_GSNotifyEndCS::NotifyParam' has a wrong offset!");

// Function b1-Managed.BANS_SweepHitSceneItems.GSNotifyBeginCS
// 0x0048 (0x0048 - 0x0000)
struct BANS_SweepHitSceneItems_GSNotifyBeginCS final
{
public:
	struct FUStGSNotifyParam                      NotifyParam;                                       // 0x0000(0x0040)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
	float                                         TotalDuration;                                     // 0x0040(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
//static_assert(alignof(BANS_SweepHitSceneItems_GSNotifyBeginCS) == 0x000008, "Wrong alignment on BANS_SweepHitSceneItems_GSNotifyBeginCS");
//static_assert(sizeof(BANS_SweepHitSceneItems_GSNotifyBeginCS) == 0x000048, "Wrong size on BANS_SweepHitSceneItems_GSNotifyBeginCS");
//static_assert(offsetof(BANS_SweepHitSceneItems_GSNotifyBeginCS, NotifyParam) == 0x000000, "Member 'BANS_SweepHitSceneItems_GSNotifyBeginCS::NotifyParam' has a wrong offset!");
//static_assert(offsetof(BANS_SweepHitSceneItems_GSNotifyBeginCS, TotalDuration) == 0x000040, "Member 'BANS_SweepHitSceneItems_GSNotifyBeginCS::TotalDuration' has a wrong offset!");

// Function b1-Managed.BANS_SweepHitSceneItems.GSNotifyTickCS
// 0x0048 (0x0048 - 0x0000)
struct BANS_SweepHitSceneItems_GSNotifyTickCS final
{
public:
	struct FUStGSNotifyParam                      NotifyParam;                                       // 0x0000(0x0040)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
	float                                         FrameDeltaTime;                                    // 0x0040(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
//static_assert(alignof(BANS_SweepHitSceneItems_GSNotifyTickCS) == 0x000008, "Wrong alignment on BANS_SweepHitSceneItems_GSNotifyTickCS");
//static_assert(sizeof(BANS_SweepHitSceneItems_GSNotifyTickCS) == 0x000048, "Wrong size on BANS_SweepHitSceneItems_GSNotifyTickCS");
//static_assert(offsetof(BANS_SweepHitSceneItems_GSNotifyTickCS, NotifyParam) == 0x000000, "Member 'BANS_SweepHitSceneItems_GSNotifyTickCS::NotifyParam' has a wrong offset!");
//static_assert(offsetof(BANS_SweepHitSceneItems_GSNotifyTickCS, FrameDeltaTime) == 0x000040, "Member 'BANS_SweepHitSceneItems_GSNotifyTickCS::FrameDeltaTime' has a wrong offset!");

// Function b1-Managed.BANS_SweepHitSceneItems.GSNotifyEndCS
// 0x0040 (0x0040 - 0x0000)
struct BANS_SweepHitSceneItems_GSNotifyEndCS final
{
public:
	struct FUStGSNotifyParam                      NotifyParam;                                       // 0x0000(0x0040)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
//static_assert(alignof(BANS_SweepHitSceneItems_GSNotifyEndCS) == 0x000008, "Wrong alignment on BANS_SweepHitSceneItems_GSNotifyEndCS");
//static_assert(sizeof(BANS_SweepHitSceneItems_GSNotifyEndCS) == 0x000040, "Wrong size on BANS_SweepHitSceneItems_GSNotifyEndCS");
//static_assert(offsetof(BANS_SweepHitSceneItems_GSNotifyEndCS, NotifyParam) == 0x000000, "Member 'BANS_SweepHitSceneItems_GSNotifyEndCS::NotifyParam' has a wrong offset!");

// Function b1-Managed.GSSecondOrderDynamicsUtil.CurSecOrdDynUpdate
// 0x0010 (0x0010 - 0x0000)
struct GSSecondOrderDynamicsUtil_CurSecOrdDynUpdate final
{
public:
	float                                         T;                                                 // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         X;                                                 // 0x0004(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         XD;                                                // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         ReturnValue;                                       // 0x000C(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
//static_assert(alignof(GSSecondOrderDynamicsUtil_CurSecOrdDynUpdate) == 0x000004, "Wrong alignment on GSSecondOrderDynamicsUtil_CurSecOrdDynUpdate");
//static_assert(sizeof(GSSecondOrderDynamicsUtil_CurSecOrdDynUpdate) == 0x000010, "Wrong size on GSSecondOrderDynamicsUtil_CurSecOrdDynUpdate");
//static_assert(offsetof(GSSecondOrderDynamicsUtil_CurSecOrdDynUpdate, T) == 0x000000, "Member 'GSSecondOrderDynamicsUtil_CurSecOrdDynUpdate::T' has a wrong offset!");
//static_assert(offsetof(GSSecondOrderDynamicsUtil_CurSecOrdDynUpdate, X) == 0x000004, "Member 'GSSecondOrderDynamicsUtil_CurSecOrdDynUpdate::X' has a wrong offset!");
//static_assert(offsetof(GSSecondOrderDynamicsUtil_CurSecOrdDynUpdate, XD) == 0x000008, "Member 'GSSecondOrderDynamicsUtil_CurSecOrdDynUpdate::XD' has a wrong offset!");
//static_assert(offsetof(GSSecondOrderDynamicsUtil_CurSecOrdDynUpdate, ReturnValue) == 0x00000C, "Member 'GSSecondOrderDynamicsUtil_CurSecOrdDynUpdate::ReturnValue' has a wrong offset!");

// Function b1-Managed.GSSecondOrderDynamicsUtil.InitCurSecOrdDyn
// 0x0010 (0x0010 - 0x0000)
struct GSSecondOrderDynamicsUtil_InitCurSecOrdDyn final
{
public:
	float                                         F;                                                 // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         Z;                                                 // 0x0004(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         R;                                                 // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         X0;                                                // 0x000C(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
//static_assert(alignof(GSSecondOrderDynamicsUtil_InitCurSecOrdDyn) == 0x000004, "Wrong alignment on GSSecondOrderDynamicsUtil_InitCurSecOrdDyn");
//static_assert(sizeof(GSSecondOrderDynamicsUtil_InitCurSecOrdDyn) == 0x000010, "Wrong size on GSSecondOrderDynamicsUtil_InitCurSecOrdDyn");
//static_assert(offsetof(GSSecondOrderDynamicsUtil_InitCurSecOrdDyn, F) == 0x000000, "Member 'GSSecondOrderDynamicsUtil_InitCurSecOrdDyn::F' has a wrong offset!");
//static_assert(offsetof(GSSecondOrderDynamicsUtil_InitCurSecOrdDyn, Z) == 0x000004, "Member 'GSSecondOrderDynamicsUtil_InitCurSecOrdDyn::Z' has a wrong offset!");
//static_assert(offsetof(GSSecondOrderDynamicsUtil_InitCurSecOrdDyn, R) == 0x000008, "Member 'GSSecondOrderDynamicsUtil_InitCurSecOrdDyn::R' has a wrong offset!");
//static_assert(offsetof(GSSecondOrderDynamicsUtil_InitCurSecOrdDyn, X0) == 0x00000C, "Member 'GSSecondOrderDynamicsUtil_InitCurSecOrdDyn::X0' has a wrong offset!");

// Function b1-Managed.BANS_GSSyncAnimations.GSNotifyBeginCS
// 0x0048 (0x0048 - 0x0000)
struct BANS_GSSyncAnimations_GSNotifyBeginCS final
{
public:
	struct FUStGSNotifyParam                      NotifyParam;                                       // 0x0000(0x0040)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
	float                                         TotalDuration;                                     // 0x0040(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
//static_assert(alignof(BANS_GSSyncAnimations_GSNotifyBeginCS) == 0x000008, "Wrong alignment on BANS_GSSyncAnimations_GSNotifyBeginCS");
//static_assert(sizeof(BANS_GSSyncAnimations_GSNotifyBeginCS) == 0x000048, "Wrong size on BANS_GSSyncAnimations_GSNotifyBeginCS");
//static_assert(offsetof(BANS_GSSyncAnimations_GSNotifyBeginCS, NotifyParam) == 0x000000, "Member 'BANS_GSSyncAnimations_GSNotifyBeginCS::NotifyParam' has a wrong offset!");
//static_assert(offsetof(BANS_GSSyncAnimations_GSNotifyBeginCS, TotalDuration) == 0x000040, "Member 'BANS_GSSyncAnimations_GSNotifyBeginCS::TotalDuration' has a wrong offset!");

// Function b1-Managed.BANS_GSSyncAnimations.GSNotifyTickCS
// 0x0048 (0x0048 - 0x0000)
struct BANS_GSSyncAnimations_GSNotifyTickCS final
{
public:
	struct FUStGSNotifyParam                      NotifyParam;                                       // 0x0000(0x0040)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
	float                                         FrameDeltaTime;                                    // 0x0040(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
//static_assert(alignof(BANS_GSSyncAnimations_GSNotifyTickCS) == 0x000008, "Wrong alignment on BANS_GSSyncAnimations_GSNotifyTickCS");
//static_assert(sizeof(BANS_GSSyncAnimations_GSNotifyTickCS) == 0x000048, "Wrong size on BANS_GSSyncAnimations_GSNotifyTickCS");
//static_assert(offsetof(BANS_GSSyncAnimations_GSNotifyTickCS, NotifyParam) == 0x000000, "Member 'BANS_GSSyncAnimations_GSNotifyTickCS::NotifyParam' has a wrong offset!");
//static_assert(offsetof(BANS_GSSyncAnimations_GSNotifyTickCS, FrameDeltaTime) == 0x000040, "Member 'BANS_GSSyncAnimations_GSNotifyTickCS::FrameDeltaTime' has a wrong offset!");

// Function b1-Managed.BANS_GSSyncAnimations.GetAnimNSType
// 0x0001 (0x0001 - 0x0000)
struct BANS_GSSyncAnimations_GetAnimNSType final
{
public:
	EGsEnAnimNS                                   ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
//static_assert(alignof(BANS_GSSyncAnimations_GetAnimNSType) == 0x000001, "Wrong alignment on BANS_GSSyncAnimations_GetAnimNSType");
//static_assert(sizeof(BANS_GSSyncAnimations_GetAnimNSType) == 0x000001, "Wrong size on BANS_GSSyncAnimations_GetAnimNSType");
//static_assert(offsetof(BANS_GSSyncAnimations_GetAnimNSType, ReturnValue) == 0x000000, "Member 'BANS_GSSyncAnimations_GetAnimNSType::ReturnValue' has a wrong offset!");

// Function b1-Managed.BANS_GSSyncAnimations.GSNotifyEndCS
// 0x0040 (0x0040 - 0x0000)
struct BANS_GSSyncAnimations_GSNotifyEndCS final
{
public:
	struct FUStGSNotifyParam                      NotifyParam;                                       // 0x0000(0x0040)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
//static_assert(alignof(BANS_GSSyncAnimations_GSNotifyEndCS) == 0x000008, "Wrong alignment on BANS_GSSyncAnimations_GSNotifyEndCS");
//static_assert(sizeof(BANS_GSSyncAnimations_GSNotifyEndCS) == 0x000040, "Wrong size on BANS_GSSyncAnimations_GSNotifyEndCS");
//static_assert(offsetof(BANS_GSSyncAnimations_GSNotifyEndCS, NotifyParam) == 0x000000, "Member 'BANS_GSSyncAnimations_GSNotifyEndCS::NotifyParam' has a wrong offset!");

// Function b1-Managed.BANS_TriggerSkillCameraGroup.GSNotifyBeginCS
// 0x0048 (0x0048 - 0x0000)
struct BANS_TriggerSkillCameraGroup_GSNotifyBeginCS final
{
public:
	struct FUStGSNotifyParam                      NotifyParam;                                       // 0x0000(0x0040)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
	float                                         TotalDuration;                                     // 0x0040(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
//static_assert(alignof(BANS_TriggerSkillCameraGroup_GSNotifyBeginCS) == 0x000008, "Wrong alignment on BANS_TriggerSkillCameraGroup_GSNotifyBeginCS");
//static_assert(sizeof(BANS_TriggerSkillCameraGroup_GSNotifyBeginCS) == 0x000048, "Wrong size on BANS_TriggerSkillCameraGroup_GSNotifyBeginCS");
//static_assert(offsetof(BANS_TriggerSkillCameraGroup_GSNotifyBeginCS, NotifyParam) == 0x000000, "Member 'BANS_TriggerSkillCameraGroup_GSNotifyBeginCS::NotifyParam' has a wrong offset!");
//static_assert(offsetof(BANS_TriggerSkillCameraGroup_GSNotifyBeginCS, TotalDuration) == 0x000040, "Member 'BANS_TriggerSkillCameraGroup_GSNotifyBeginCS::TotalDuration' has a wrong offset!");

// Function b1-Managed.BANS_TriggerSkillCameraGroup.GSNotifyEndCS
// 0x0040 (0x0040 - 0x0000)
struct BANS_TriggerSkillCameraGroup_GSNotifyEndCS final
{
public:
	struct FUStGSNotifyParam                      NotifyParam;                                       // 0x0000(0x0040)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
//static_assert(alignof(BANS_TriggerSkillCameraGroup_GSNotifyEndCS) == 0x000008, "Wrong alignment on BANS_TriggerSkillCameraGroup_GSNotifyEndCS");
//static_assert(sizeof(BANS_TriggerSkillCameraGroup_GSNotifyEndCS) == 0x000040, "Wrong size on BANS_TriggerSkillCameraGroup_GSNotifyEndCS");
//static_assert(offsetof(BANS_TriggerSkillCameraGroup_GSNotifyEndCS, NotifyParam) == 0x000000, "Member 'BANS_TriggerSkillCameraGroup_GSNotifyEndCS::NotifyParam' has a wrong offset!");

// Function b1-Managed.BED_BehaviorNode_MulticastCachedPointSet.GetNodeDescriptionInCS
// 0x0010 (0x0010 - 0x0000)
struct BED_BehaviorNode_MulticastCachedPointSet_GetNodeDescriptionInCS final
{
public:
	class FString                                 ReturnValue;                                       // 0x0000(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash)
};
//static_assert(alignof(BED_BehaviorNode_MulticastCachedPointSet_GetNodeDescriptionInCS) == 0x000008, "Wrong alignment on BED_BehaviorNode_MulticastCachedPointSet_GetNodeDescriptionInCS");
//static_assert(sizeof(BED_BehaviorNode_MulticastCachedPointSet_GetNodeDescriptionInCS) == 0x000010, "Wrong size on BED_BehaviorNode_MulticastCachedPointSet_GetNodeDescriptionInCS");
//static_assert(offsetof(BED_BehaviorNode_MulticastCachedPointSet_GetNodeDescriptionInCS, ReturnValue) == 0x000000, "Member 'BED_BehaviorNode_MulticastCachedPointSet_GetNodeDescriptionInCS::ReturnValue' has a wrong offset!");

// Function b1-Managed.BANS_GSAttachDropItemToSocket.GSNotifyBeginCS
// 0x0048 (0x0048 - 0x0000)
struct BANS_GSAttachDropItemToSocket_GSNotifyBeginCS final
{
public:
	struct FUStGSNotifyParam                      NotifyParam;                                       // 0x0000(0x0040)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
	float                                         TotalDuration;                                     // 0x0040(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
//static_assert(alignof(BANS_GSAttachDropItemToSocket_GSNotifyBeginCS) == 0x000008, "Wrong alignment on BANS_GSAttachDropItemToSocket_GSNotifyBeginCS");
//static_assert(sizeof(BANS_GSAttachDropItemToSocket_GSNotifyBeginCS) == 0x000048, "Wrong size on BANS_GSAttachDropItemToSocket_GSNotifyBeginCS");
//static_assert(offsetof(BANS_GSAttachDropItemToSocket_GSNotifyBeginCS, NotifyParam) == 0x000000, "Member 'BANS_GSAttachDropItemToSocket_GSNotifyBeginCS::NotifyParam' has a wrong offset!");
//static_assert(offsetof(BANS_GSAttachDropItemToSocket_GSNotifyBeginCS, TotalDuration) == 0x000040, "Member 'BANS_GSAttachDropItemToSocket_GSNotifyBeginCS::TotalDuration' has a wrong offset!");

// Function b1-Managed.BANS_GSAttachDropItemToSocket.GSNotifyEndCS
// 0x0040 (0x0040 - 0x0000)
struct BANS_GSAttachDropItemToSocket_GSNotifyEndCS final
{
public:
	struct FUStGSNotifyParam                      NotifyParam;                                       // 0x0000(0x0040)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
//static_assert(alignof(BANS_GSAttachDropItemToSocket_GSNotifyEndCS) == 0x000008, "Wrong alignment on BANS_GSAttachDropItemToSocket_GSNotifyEndCS");
//static_assert(sizeof(BANS_GSAttachDropItemToSocket_GSNotifyEndCS) == 0x000040, "Wrong size on BANS_GSAttachDropItemToSocket_GSNotifyEndCS");
//static_assert(offsetof(BANS_GSAttachDropItemToSocket_GSNotifyEndCS, NotifyParam) == 0x000000, "Member 'BANS_GSAttachDropItemToSocket_GSNotifyEndCS::NotifyParam' has a wrong offset!");

// Function b1-Managed.BED_ProcessMachineNode_State.GetBranchGraphToEditInCS
// 0x0018 (0x0018 - 0x0000)
struct BED_ProcessMachineNode_State_GetBranchGraphToEditInCS final
{
public:
	class FString                                 OutBranchGraphIdentifier;                          // 0x0000(0x0010)(Parm, OutParm, ZeroConstructor, HasGetValueTypeHash)
	uint8                                         ReturnValue : 1;                                   // 0x0010(0x0001)(BitIndex: 0x00, PropSize: 0x0001 (Parm, OutParm, ReturnParm, NoDestructor, HasGetValueTypeHash))
};
//static_assert(alignof(BED_ProcessMachineNode_State_GetBranchGraphToEditInCS) == 0x000008, "Wrong alignment on BED_ProcessMachineNode_State_GetBranchGraphToEditInCS");
//static_assert(sizeof(BED_ProcessMachineNode_State_GetBranchGraphToEditInCS) == 0x000018, "Wrong size on BED_ProcessMachineNode_State_GetBranchGraphToEditInCS");
//static_assert(offsetof(BED_ProcessMachineNode_State_GetBranchGraphToEditInCS, OutBranchGraphIdentifier) == 0x000000, "Member 'BED_ProcessMachineNode_State_GetBranchGraphToEditInCS::OutBranchGraphIdentifier' has a wrong offset!");

// Function b1-Managed.BED_ProcessMachineNode_State.GetContextOutputsInCS
// 0x0010 (0x0010 - 0x0000)
struct BED_ProcessMachineNode_State_GetContextOutputsInCS final
{
public:
	TArray<class FName>                           ReturnValue;                                       // 0x0000(0x0010)(Parm, OutParm, ReturnParm)
};
//static_assert(alignof(BED_ProcessMachineNode_State_GetContextOutputsInCS) == 0x000008, "Wrong alignment on BED_ProcessMachineNode_State_GetContextOutputsInCS");
//static_assert(sizeof(BED_ProcessMachineNode_State_GetContextOutputsInCS) == 0x000010, "Wrong size on BED_ProcessMachineNode_State_GetContextOutputsInCS");
//static_assert(offsetof(BED_ProcessMachineNode_State_GetContextOutputsInCS, ReturnValue) == 0x000000, "Member 'BED_ProcessMachineNode_State_GetContextOutputsInCS::ReturnValue' has a wrong offset!");

// Function b1-Managed.BED_ProcessMachineNode_State.PostPropertyChanged
// 0x0020 (0x0020 - 0x0000)
struct BED_ProcessMachineNode_State_PostPropertyChanged final
{
public:
	class FString                                 MemberName;                                        // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash)
	class FString                                 PropertyName;                                      // 0x0010(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash)
};
//static_assert(alignof(BED_ProcessMachineNode_State_PostPropertyChanged) == 0x000008, "Wrong alignment on BED_ProcessMachineNode_State_PostPropertyChanged");
//static_assert(sizeof(BED_ProcessMachineNode_State_PostPropertyChanged) == 0x000020, "Wrong size on BED_ProcessMachineNode_State_PostPropertyChanged");
//static_assert(offsetof(BED_ProcessMachineNode_State_PostPropertyChanged, MemberName) == 0x000000, "Member 'BED_ProcessMachineNode_State_PostPropertyChanged::MemberName' has a wrong offset!");
//static_assert(offsetof(BED_ProcessMachineNode_State_PostPropertyChanged, PropertyName) == 0x000010, "Member 'BED_ProcessMachineNode_State_PostPropertyChanged::PropertyName' has a wrong offset!");

// Function b1-Managed.BED_ProcessMachineNode_State.GetNodeDescriptionInCS
// 0x0010 (0x0010 - 0x0000)
struct BED_ProcessMachineNode_State_GetNodeDescriptionInCS final
{
public:
	class FString                                 ReturnValue;                                       // 0x0000(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash)
};
//static_assert(alignof(BED_ProcessMachineNode_State_GetNodeDescriptionInCS) == 0x000008, "Wrong alignment on BED_ProcessMachineNode_State_GetNodeDescriptionInCS");
//static_assert(sizeof(BED_ProcessMachineNode_State_GetNodeDescriptionInCS) == 0x000010, "Wrong size on BED_ProcessMachineNode_State_GetNodeDescriptionInCS");
//static_assert(offsetof(BED_ProcessMachineNode_State_GetNodeDescriptionInCS, ReturnValue) == 0x000000, "Member 'BED_ProcessMachineNode_State_GetNodeDescriptionInCS::ReturnValue' has a wrong offset!");

// Function b1-Managed.BAN_GSCollectTrigger.bIsNativeBranchingPointCS
// 0x0001 (0x0001 - 0x0000)
struct BAN_GSCollectTrigger_bIsNativeBranchingPointCS final
{
public:
	uint8                                         ReturnValue : 1;                                   // 0x0000(0x0001)(BitIndex: 0x00, PropSize: 0x0001 (Parm, OutParm, ReturnParm, NoDestructor, HasGetValueTypeHash))
};
//static_assert(alignof(BAN_GSCollectTrigger_bIsNativeBranchingPointCS) == 0x000001, "Wrong alignment on BAN_GSCollectTrigger_bIsNativeBranchingPointCS");
//static_assert(sizeof(BAN_GSCollectTrigger_bIsNativeBranchingPointCS) == 0x000001, "Wrong size on BAN_GSCollectTrigger_bIsNativeBranchingPointCS");

// Function b1-Managed.BAN_GSCollectTrigger.GSNotifyCS
// 0x0040 (0x0040 - 0x0000)
struct BAN_GSCollectTrigger_GSNotifyCS final
{
public:
	struct FUStGSNotifyParam                      NotifyParam;                                       // 0x0000(0x0040)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
//static_assert(alignof(BAN_GSCollectTrigger_GSNotifyCS) == 0x000008, "Wrong alignment on BAN_GSCollectTrigger_GSNotifyCS");
//static_assert(sizeof(BAN_GSCollectTrigger_GSNotifyCS) == 0x000040, "Wrong size on BAN_GSCollectTrigger_GSNotifyCS");
//static_assert(offsetof(BAN_GSCollectTrigger_GSNotifyCS, NotifyParam) == 0x000000, "Member 'BAN_GSCollectTrigger_GSNotifyCS::NotifyParam' has a wrong offset!");

// Function b1-Managed.BAN_GSEndForcePerformance.bIsNativeBranchingPointCS
// 0x0001 (0x0001 - 0x0000)
struct BAN_GSEndForcePerformance_bIsNativeBranchingPointCS final
{
public:
	uint8                                         ReturnValue : 1;                                   // 0x0000(0x0001)(BitIndex: 0x00, PropSize: 0x0001 (Parm, OutParm, ReturnParm, NoDestructor, HasGetValueTypeHash))
};
//static_assert(alignof(BAN_GSEndForcePerformance_bIsNativeBranchingPointCS) == 0x000001, "Wrong alignment on BAN_GSEndForcePerformance_bIsNativeBranchingPointCS");
//static_assert(sizeof(BAN_GSEndForcePerformance_bIsNativeBranchingPointCS) == 0x000001, "Wrong size on BAN_GSEndForcePerformance_bIsNativeBranchingPointCS");

// Function b1-Managed.BAN_GSEndForcePerformance.GSNotifyCS
// 0x0040 (0x0040 - 0x0000)
struct BAN_GSEndForcePerformance_GSNotifyCS final
{
public:
	struct FUStGSNotifyParam                      NotifyParam;                                       // 0x0000(0x0040)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
//static_assert(alignof(BAN_GSEndForcePerformance_GSNotifyCS) == 0x000008, "Wrong alignment on BAN_GSEndForcePerformance_GSNotifyCS");
//static_assert(sizeof(BAN_GSEndForcePerformance_GSNotifyCS) == 0x000040, "Wrong size on BAN_GSEndForcePerformance_GSNotifyCS");
//static_assert(offsetof(BAN_GSEndForcePerformance_GSNotifyCS, NotifyParam) == 0x000000, "Member 'BAN_GSEndForcePerformance_GSNotifyCS::NotifyParam' has a wrong offset!");

// Function b1-Managed.BED_QuestNode_BackToCheckPoint.GetNodeDescriptionInCS
// 0x0010 (0x0010 - 0x0000)
struct BED_QuestNode_BackToCheckPoint_GetNodeDescriptionInCS final
{
public:
	class FString                                 ReturnValue;                                       // 0x0000(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash)
};
//static_assert(alignof(BED_QuestNode_BackToCheckPoint_GetNodeDescriptionInCS) == 0x000008, "Wrong alignment on BED_QuestNode_BackToCheckPoint_GetNodeDescriptionInCS");
//static_assert(sizeof(BED_QuestNode_BackToCheckPoint_GetNodeDescriptionInCS) == 0x000010, "Wrong size on BED_QuestNode_BackToCheckPoint_GetNodeDescriptionInCS");
//static_assert(offsetof(BED_QuestNode_BackToCheckPoint_GetNodeDescriptionInCS, ReturnValue) == 0x000000, "Member 'BED_QuestNode_BackToCheckPoint_GetNodeDescriptionInCS::ReturnValue' has a wrong offset!");

// Function b1-Managed.BAN_GSSetSimpleState.GSNotifyCS
// 0x0040 (0x0040 - 0x0000)
struct BAN_GSSetSimpleState_GSNotifyCS final
{
public:
	struct FUStGSNotifyParam                      NotifyParam;                                       // 0x0000(0x0040)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
//static_assert(alignof(BAN_GSSetSimpleState_GSNotifyCS) == 0x000008, "Wrong alignment on BAN_GSSetSimpleState_GSNotifyCS");
//static_assert(sizeof(BAN_GSSetSimpleState_GSNotifyCS) == 0x000040, "Wrong size on BAN_GSSetSimpleState_GSNotifyCS");
//static_assert(offsetof(BAN_GSSetSimpleState_GSNotifyCS, NotifyParam) == 0x000000, "Member 'BAN_GSSetSimpleState_GSNotifyCS::NotifyParam' has a wrong offset!");

// Function b1-Managed.BAN_GSAIJumpEnd.bIsNativeBranchingPointCS
// 0x0001 (0x0001 - 0x0000)
struct BAN_GSAIJumpEnd_bIsNativeBranchingPointCS final
{
public:
	uint8                                         ReturnValue : 1;                                   // 0x0000(0x0001)(BitIndex: 0x00, PropSize: 0x0001 (Parm, OutParm, ReturnParm, NoDestructor, HasGetValueTypeHash))
};
//static_assert(alignof(BAN_GSAIJumpEnd_bIsNativeBranchingPointCS) == 0x000001, "Wrong alignment on BAN_GSAIJumpEnd_bIsNativeBranchingPointCS");
//static_assert(sizeof(BAN_GSAIJumpEnd_bIsNativeBranchingPointCS) == 0x000001, "Wrong size on BAN_GSAIJumpEnd_bIsNativeBranchingPointCS");

// Function b1-Managed.BAN_GSAIJumpEnd.GSNotifyCS
// 0x0040 (0x0040 - 0x0000)
struct BAN_GSAIJumpEnd_GSNotifyCS final
{
public:
	struct FUStGSNotifyParam                      NotifyParam;                                       // 0x0000(0x0040)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
//static_assert(alignof(BAN_GSAIJumpEnd_GSNotifyCS) == 0x000008, "Wrong alignment on BAN_GSAIJumpEnd_GSNotifyCS");
//static_assert(sizeof(BAN_GSAIJumpEnd_GSNotifyCS) == 0x000040, "Wrong size on BAN_GSAIJumpEnd_GSNotifyCS");
//static_assert(offsetof(BAN_GSAIJumpEnd_GSNotifyCS, NotifyParam) == 0x000000, "Member 'BAN_GSAIJumpEnd_GSNotifyCS::NotifyParam' has a wrong offset!");

// Function b1-Managed.BED_MovieNode_PerformerHiddenInGame.GetNodeDescriptionInCS
// 0x0010 (0x0010 - 0x0000)
struct BED_MovieNode_PerformerHiddenInGame_GetNodeDescriptionInCS final
{
public:
	class FString                                 ReturnValue;                                       // 0x0000(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash)
};
//static_assert(alignof(BED_MovieNode_PerformerHiddenInGame_GetNodeDescriptionInCS) == 0x000008, "Wrong alignment on BED_MovieNode_PerformerHiddenInGame_GetNodeDescriptionInCS");
//static_assert(sizeof(BED_MovieNode_PerformerHiddenInGame_GetNodeDescriptionInCS) == 0x000010, "Wrong size on BED_MovieNode_PerformerHiddenInGame_GetNodeDescriptionInCS");
//static_assert(offsetof(BED_MovieNode_PerformerHiddenInGame_GetNodeDescriptionInCS, ReturnValue) == 0x000000, "Member 'BED_MovieNode_PerformerHiddenInGame_GetNodeDescriptionInCS::ReturnValue' has a wrong offset!");

// Function b1-Managed.BAN_GSCallPointsRegister.bIsNativeBranchingPointCS
// 0x0001 (0x0001 - 0x0000)
struct BAN_GSCallPointsRegister_bIsNativeBranchingPointCS final
{
public:
	uint8                                         ReturnValue : 1;                                   // 0x0000(0x0001)(BitIndex: 0x00, PropSize: 0x0001 (Parm, OutParm, ReturnParm, NoDestructor, HasGetValueTypeHash))
};
//static_assert(alignof(BAN_GSCallPointsRegister_bIsNativeBranchingPointCS) == 0x000001, "Wrong alignment on BAN_GSCallPointsRegister_bIsNativeBranchingPointCS");
//static_assert(sizeof(BAN_GSCallPointsRegister_bIsNativeBranchingPointCS) == 0x000001, "Wrong size on BAN_GSCallPointsRegister_bIsNativeBranchingPointCS");

// Function b1-Managed.BAN_GSCallPointsRegister.GSNotifyCS
// 0x0040 (0x0040 - 0x0000)
struct BAN_GSCallPointsRegister_GSNotifyCS final
{
public:
	struct FUStGSNotifyParam                      NotifyParam;                                       // 0x0000(0x0040)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
//static_assert(alignof(BAN_GSCallPointsRegister_GSNotifyCS) == 0x000008, "Wrong alignment on BAN_GSCallPointsRegister_GSNotifyCS");
//static_assert(sizeof(BAN_GSCallPointsRegister_GSNotifyCS) == 0x000040, "Wrong size on BAN_GSCallPointsRegister_GSNotifyCS");
//static_assert(offsetof(BAN_GSCallPointsRegister_GSNotifyCS, NotifyParam) == 0x000000, "Member 'BAN_GSCallPointsRegister_GSNotifyCS::NotifyParam' has a wrong offset!");

// Function b1-Managed.CanvasCoordTransMainWidget.OnTickCallback
// 0x0004 (0x0004 - 0x0000)
struct CanvasCoordTransMainWidget_OnTickCallback final
{
public:
	float                                         DeltaTime;                                         // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
//static_assert(alignof(CanvasCoordTransMainWidget_OnTickCallback) == 0x000004, "Wrong alignment on CanvasCoordTransMainWidget_OnTickCallback");
//static_assert(sizeof(CanvasCoordTransMainWidget_OnTickCallback) == 0x000004, "Wrong size on CanvasCoordTransMainWidget_OnTickCallback");
//static_assert(offsetof(CanvasCoordTransMainWidget_OnTickCallback, DeltaTime) == 0x000000, "Member 'CanvasCoordTransMainWidget_OnTickCallback::DeltaTime' has a wrong offset!");

// Function b1-Managed.BANS_GSCallPointsRegister.GSNotifyBeginCS
// 0x0048 (0x0048 - 0x0000)
struct BANS_GSCallPointsRegister_GSNotifyBeginCS final
{
public:
	struct FUStGSNotifyParam                      NotifyParam;                                       // 0x0000(0x0040)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
	float                                         TotalDuration;                                     // 0x0040(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
//static_assert(alignof(BANS_GSCallPointsRegister_GSNotifyBeginCS) == 0x000008, "Wrong alignment on BANS_GSCallPointsRegister_GSNotifyBeginCS");
//static_assert(sizeof(BANS_GSCallPointsRegister_GSNotifyBeginCS) == 0x000048, "Wrong size on BANS_GSCallPointsRegister_GSNotifyBeginCS");
//static_assert(offsetof(BANS_GSCallPointsRegister_GSNotifyBeginCS, NotifyParam) == 0x000000, "Member 'BANS_GSCallPointsRegister_GSNotifyBeginCS::NotifyParam' has a wrong offset!");
//static_assert(offsetof(BANS_GSCallPointsRegister_GSNotifyBeginCS, TotalDuration) == 0x000040, "Member 'BANS_GSCallPointsRegister_GSNotifyBeginCS::TotalDuration' has a wrong offset!");

// Function b1-Managed.BED_QuestNode_PostAkEvent.GetNodeDescriptionInCS
// 0x0010 (0x0010 - 0x0000)
struct BED_QuestNode_PostAkEvent_GetNodeDescriptionInCS final
{
public:
	class FString                                 ReturnValue;                                       // 0x0000(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash)
};
//static_assert(alignof(BED_QuestNode_PostAkEvent_GetNodeDescriptionInCS) == 0x000008, "Wrong alignment on BED_QuestNode_PostAkEvent_GetNodeDescriptionInCS");
//static_assert(sizeof(BED_QuestNode_PostAkEvent_GetNodeDescriptionInCS) == 0x000010, "Wrong size on BED_QuestNode_PostAkEvent_GetNodeDescriptionInCS");
//static_assert(offsetof(BED_QuestNode_PostAkEvent_GetNodeDescriptionInCS, ReturnValue) == 0x000000, "Member 'BED_QuestNode_PostAkEvent_GetNodeDescriptionInCS::ReturnValue' has a wrong offset!");

// Function b1-Managed.BAN_GSIncreaseChargeLevel.bIsNativeBranchingPointCS
// 0x0001 (0x0001 - 0x0000)
struct BAN_GSIncreaseChargeLevel_bIsNativeBranchingPointCS final
{
public:
	uint8                                         ReturnValue : 1;                                   // 0x0000(0x0001)(BitIndex: 0x00, PropSize: 0x0001 (Parm, OutParm, ReturnParm, NoDestructor, HasGetValueTypeHash))
};
//static_assert(alignof(BAN_GSIncreaseChargeLevel_bIsNativeBranchingPointCS) == 0x000001, "Wrong alignment on BAN_GSIncreaseChargeLevel_bIsNativeBranchingPointCS");
//static_assert(sizeof(BAN_GSIncreaseChargeLevel_bIsNativeBranchingPointCS) == 0x000001, "Wrong size on BAN_GSIncreaseChargeLevel_bIsNativeBranchingPointCS");

// Function b1-Managed.BAN_GSIncreaseChargeLevel.GSNotifyCS
// 0x0040 (0x0040 - 0x0000)
struct BAN_GSIncreaseChargeLevel_GSNotifyCS final
{
public:
	struct FUStGSNotifyParam                      NotifyParam;                                       // 0x0000(0x0040)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
//static_assert(alignof(BAN_GSIncreaseChargeLevel_GSNotifyCS) == 0x000008, "Wrong alignment on BAN_GSIncreaseChargeLevel_GSNotifyCS");
//static_assert(sizeof(BAN_GSIncreaseChargeLevel_GSNotifyCS) == 0x000040, "Wrong size on BAN_GSIncreaseChargeLevel_GSNotifyCS");
//static_assert(offsetof(BAN_GSIncreaseChargeLevel_GSNotifyCS, NotifyParam) == 0x000000, "Member 'BAN_GSIncreaseChargeLevel_GSNotifyCS::NotifyParam' has a wrong offset!");

// Function b1-Managed.BAN_GSAttachWeaponToSocket.bIsNativeBranchingPointCS
// 0x0001 (0x0001 - 0x0000)
struct BAN_GSAttachWeaponToSocket_bIsNativeBranchingPointCS final
{
public:
	uint8                                         ReturnValue : 1;                                   // 0x0000(0x0001)(BitIndex: 0x00, PropSize: 0x0001 (Parm, OutParm, ReturnParm, NoDestructor, HasGetValueTypeHash))
};
//static_assert(alignof(BAN_GSAttachWeaponToSocket_bIsNativeBranchingPointCS) == 0x000001, "Wrong alignment on BAN_GSAttachWeaponToSocket_bIsNativeBranchingPointCS");
//static_assert(sizeof(BAN_GSAttachWeaponToSocket_bIsNativeBranchingPointCS) == 0x000001, "Wrong size on BAN_GSAttachWeaponToSocket_bIsNativeBranchingPointCS");

// Function b1-Managed.BAN_GSAttachWeaponToSocket.GSNotifyCS
// 0x0040 (0x0040 - 0x0000)
struct BAN_GSAttachWeaponToSocket_GSNotifyCS final
{
public:
	struct FUStGSNotifyParam                      NotifyParam;                                       // 0x0000(0x0040)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
//static_assert(alignof(BAN_GSAttachWeaponToSocket_GSNotifyCS) == 0x000008, "Wrong alignment on BAN_GSAttachWeaponToSocket_GSNotifyCS");
//static_assert(sizeof(BAN_GSAttachWeaponToSocket_GSNotifyCS) == 0x000040, "Wrong size on BAN_GSAttachWeaponToSocket_GSNotifyCS");
//static_assert(offsetof(BAN_GSAttachWeaponToSocket_GSNotifyCS, NotifyParam) == 0x000000, "Member 'BAN_GSAttachWeaponToSocket_GSNotifyCS::NotifyParam' has a wrong offset!");

// Function b1-Managed.BAN_GSAwakePartner.bIsNativeBranchingPointCS
// 0x0001 (0x0001 - 0x0000)
struct BAN_GSAwakePartner_bIsNativeBranchingPointCS final
{
public:
	uint8                                         ReturnValue : 1;                                   // 0x0000(0x0001)(BitIndex: 0x00, PropSize: 0x0001 (Parm, OutParm, ReturnParm, NoDestructor, HasGetValueTypeHash))
};
//static_assert(alignof(BAN_GSAwakePartner_bIsNativeBranchingPointCS) == 0x000001, "Wrong alignment on BAN_GSAwakePartner_bIsNativeBranchingPointCS");
//static_assert(sizeof(BAN_GSAwakePartner_bIsNativeBranchingPointCS) == 0x000001, "Wrong size on BAN_GSAwakePartner_bIsNativeBranchingPointCS");

// Function b1-Managed.BAN_GSAwakePartner.GSNotifyCS
// 0x0040 (0x0040 - 0x0000)
struct BAN_GSAwakePartner_GSNotifyCS final
{
public:
	struct FUStGSNotifyParam                      NotifyParam;                                       // 0x0000(0x0040)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
//static_assert(alignof(BAN_GSAwakePartner_GSNotifyCS) == 0x000008, "Wrong alignment on BAN_GSAwakePartner_GSNotifyCS");
//static_assert(sizeof(BAN_GSAwakePartner_GSNotifyCS) == 0x000040, "Wrong size on BAN_GSAwakePartner_GSNotifyCS");
//static_assert(offsetof(BAN_GSAwakePartner_GSNotifyCS, NotifyParam) == 0x000000, "Member 'BAN_GSAwakePartner_GSNotifyCS::NotifyParam' has a wrong offset!");

// Function b1-Managed.BAN_GSB1SpawnDecalActor.GSNotifyCS
// 0x0040 (0x0040 - 0x0000)
struct BAN_GSB1SpawnDecalActor_GSNotifyCS final
{
public:
	struct FUStGSNotifyParam                      NotifyParam;                                       // 0x0000(0x0040)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
//static_assert(alignof(BAN_GSB1SpawnDecalActor_GSNotifyCS) == 0x000008, "Wrong alignment on BAN_GSB1SpawnDecalActor_GSNotifyCS");
//static_assert(sizeof(BAN_GSB1SpawnDecalActor_GSNotifyCS) == 0x000040, "Wrong size on BAN_GSB1SpawnDecalActor_GSNotifyCS");
//static_assert(offsetof(BAN_GSB1SpawnDecalActor_GSNotifyCS, NotifyParam) == 0x000000, "Member 'BAN_GSB1SpawnDecalActor_GSNotifyCS::NotifyParam' has a wrong offset!");

// Function b1-Managed.BAN_GSCallMasterUseSkill.bIsNativeBranchingPointCS
// 0x0001 (0x0001 - 0x0000)
struct BAN_GSCallMasterUseSkill_bIsNativeBranchingPointCS final
{
public:
	uint8                                         ReturnValue : 1;                                   // 0x0000(0x0001)(BitIndex: 0x00, PropSize: 0x0001 (Parm, OutParm, ReturnParm, NoDestructor, HasGetValueTypeHash))
};
//static_assert(alignof(BAN_GSCallMasterUseSkill_bIsNativeBranchingPointCS) == 0x000001, "Wrong alignment on BAN_GSCallMasterUseSkill_bIsNativeBranchingPointCS");
//static_assert(sizeof(BAN_GSCallMasterUseSkill_bIsNativeBranchingPointCS) == 0x000001, "Wrong size on BAN_GSCallMasterUseSkill_bIsNativeBranchingPointCS");

// Function b1-Managed.BAN_GSCallMasterUseSkill.GSNotifyCS
// 0x0040 (0x0040 - 0x0000)
struct BAN_GSCallMasterUseSkill_GSNotifyCS final
{
public:
	struct FUStGSNotifyParam                      NotifyParam;                                       // 0x0000(0x0040)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
//static_assert(alignof(BAN_GSCallMasterUseSkill_GSNotifyCS) == 0x000008, "Wrong alignment on BAN_GSCallMasterUseSkill_GSNotifyCS");
//static_assert(sizeof(BAN_GSCallMasterUseSkill_GSNotifyCS) == 0x000040, "Wrong size on BAN_GSCallMasterUseSkill_GSNotifyCS");
//static_assert(offsetof(BAN_GSCallMasterUseSkill_GSNotifyCS, NotifyParam) == 0x000000, "Member 'BAN_GSCallMasterUseSkill_GSNotifyCS::NotifyParam' has a wrong offset!");

// Function b1-Managed.BAN_GSDestroyFXCompByTag.GSNotifyCS
// 0x0040 (0x0040 - 0x0000)
struct BAN_GSDestroyFXCompByTag_GSNotifyCS final
{
public:
	struct FUStGSNotifyParam                      NotifyParam;                                       // 0x0000(0x0040)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
//static_assert(alignof(BAN_GSDestroyFXCompByTag_GSNotifyCS) == 0x000008, "Wrong alignment on BAN_GSDestroyFXCompByTag_GSNotifyCS");
//static_assert(sizeof(BAN_GSDestroyFXCompByTag_GSNotifyCS) == 0x000040, "Wrong size on BAN_GSDestroyFXCompByTag_GSNotifyCS");
//static_assert(offsetof(BAN_GSDestroyFXCompByTag_GSNotifyCS, NotifyParam) == 0x000000, "Member 'BAN_GSDestroyFXCompByTag_GSNotifyCS::NotifyParam' has a wrong offset!");

// Function b1-Managed.BGUStaminaBarUIComp.TickComponentGS
// 0x0004 (0x0004 - 0x0000)
struct BGUStaminaBarUIComp_TickComponentGS final
{
public:
	float                                         DeltaTime;                                         // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
//static_assert(alignof(BGUStaminaBarUIComp_TickComponentGS) == 0x000004, "Wrong alignment on BGUStaminaBarUIComp_TickComponentGS");
//static_assert(sizeof(BGUStaminaBarUIComp_TickComponentGS) == 0x000004, "Wrong size on BGUStaminaBarUIComp_TickComponentGS");
//static_assert(offsetof(BGUStaminaBarUIComp_TickComponentGS, DeltaTime) == 0x000000, "Member 'BGUStaminaBarUIComp_TickComponentGS::DeltaTime' has a wrong offset!");

// Function b1-Managed.BGUStaminaBarUIComp.SetGSEnabled
// 0x0001 (0x0001 - 0x0000)
struct BGUStaminaBarUIComp_SetGSEnabled final
{
public:
	uint8                                         IsEnabled : 1;                                     // 0x0000(0x0001)(BitIndex: 0x00, PropSize: 0x0001 (Parm, NoDestructor, HasGetValueTypeHash))
};
//static_assert(alignof(BGUStaminaBarUIComp_SetGSEnabled) == 0x000001, "Wrong alignment on BGUStaminaBarUIComp_SetGSEnabled");
//static_assert(sizeof(BGUStaminaBarUIComp_SetGSEnabled) == 0x000001, "Wrong size on BGUStaminaBarUIComp_SetGSEnabled");

// Function b1-Managed.BAN_GSDetachWeapon.bIsNativeBranchingPointCS
// 0x0001 (0x0001 - 0x0000)
struct BAN_GSDetachWeapon_bIsNativeBranchingPointCS final
{
public:
	uint8                                         ReturnValue : 1;                                   // 0x0000(0x0001)(BitIndex: 0x00, PropSize: 0x0001 (Parm, OutParm, ReturnParm, NoDestructor, HasGetValueTypeHash))
};
//static_assert(alignof(BAN_GSDetachWeapon_bIsNativeBranchingPointCS) == 0x000001, "Wrong alignment on BAN_GSDetachWeapon_bIsNativeBranchingPointCS");
//static_assert(sizeof(BAN_GSDetachWeapon_bIsNativeBranchingPointCS) == 0x000001, "Wrong size on BAN_GSDetachWeapon_bIsNativeBranchingPointCS");

// Function b1-Managed.BAN_GSDetachWeapon.GSNotifyCS
// 0x0040 (0x0040 - 0x0000)
struct BAN_GSDetachWeapon_GSNotifyCS final
{
public:
	struct FUStGSNotifyParam                      NotifyParam;                                       // 0x0000(0x0040)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
//static_assert(alignof(BAN_GSDetachWeapon_GSNotifyCS) == 0x000008, "Wrong alignment on BAN_GSDetachWeapon_GSNotifyCS");
//static_assert(sizeof(BAN_GSDetachWeapon_GSNotifyCS) == 0x000040, "Wrong size on BAN_GSDetachWeapon_GSNotifyCS");
//static_assert(offsetof(BAN_GSDetachWeapon_GSNotifyCS, NotifyParam) == 0x000000, "Member 'BAN_GSDetachWeapon_GSNotifyCS::NotifyParam' has a wrong offset!");

// Function b1-Managed.BAN_GSEnableAIPerception.bIsNativeBranchingPointCS
// 0x0001 (0x0001 - 0x0000)
struct BAN_GSEnableAIPerception_bIsNativeBranchingPointCS final
{
public:
	uint8                                         ReturnValue : 1;                                   // 0x0000(0x0001)(BitIndex: 0x00, PropSize: 0x0001 (Parm, OutParm, ReturnParm, NoDestructor, HasGetValueTypeHash))
};
//static_assert(alignof(BAN_GSEnableAIPerception_bIsNativeBranchingPointCS) == 0x000001, "Wrong alignment on BAN_GSEnableAIPerception_bIsNativeBranchingPointCS");
//static_assert(sizeof(BAN_GSEnableAIPerception_bIsNativeBranchingPointCS) == 0x000001, "Wrong size on BAN_GSEnableAIPerception_bIsNativeBranchingPointCS");

// Function b1-Managed.BAN_GSEnableAIPerception.GSNotifyCS
// 0x0040 (0x0040 - 0x0000)
struct BAN_GSEnableAIPerception_GSNotifyCS final
{
public:
	struct FUStGSNotifyParam                      NotifyParam;                                       // 0x0000(0x0040)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
//static_assert(alignof(BAN_GSEnableAIPerception_GSNotifyCS) == 0x000008, "Wrong alignment on BAN_GSEnableAIPerception_GSNotifyCS");
//static_assert(sizeof(BAN_GSEnableAIPerception_GSNotifyCS) == 0x000040, "Wrong size on BAN_GSEnableAIPerception_GSNotifyCS");
//static_assert(offsetof(BAN_GSEnableAIPerception_GSNotifyCS, NotifyParam) == 0x000000, "Member 'BAN_GSEnableAIPerception_GSNotifyCS::NotifyParam' has a wrong offset!");

// Function b1-Managed.B1X2_DispWorld.ReceiveEndPlay
// 0x0001 (0x0001 - 0x0000)
struct B1X2_DispWorld_ReceiveEndPlay final
{
public:
	EEndPlayReason                                EndPlayReason;                                     // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
//static_assert(alignof(B1X2_DispWorld_ReceiveEndPlay) == 0x000001, "Wrong alignment on B1X2_DispWorld_ReceiveEndPlay");
//static_assert(sizeof(B1X2_DispWorld_ReceiveEndPlay) == 0x000001, "Wrong size on B1X2_DispWorld_ReceiveEndPlay");
//static_assert(offsetof(B1X2_DispWorld_ReceiveEndPlay, EndPlayReason) == 0x000000, "Member 'B1X2_DispWorld_ReceiveEndPlay::EndPlayReason' has a wrong offset!");

// Function b1-Managed.AnimNotify_GSFootStep_FootL.GSNotifyCS
// 0x0040 (0x0040 - 0x0000)
struct AnimNotify_GSFootStep_FootL_GSNotifyCS final
{
public:
	struct FUStGSNotifyParam                      NotifyParam;                                       // 0x0000(0x0040)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
//static_assert(alignof(AnimNotify_GSFootStep_FootL_GSNotifyCS) == 0x000008, "Wrong alignment on AnimNotify_GSFootStep_FootL_GSNotifyCS");
//static_assert(sizeof(AnimNotify_GSFootStep_FootL_GSNotifyCS) == 0x000040, "Wrong size on AnimNotify_GSFootStep_FootL_GSNotifyCS");
//static_assert(offsetof(AnimNotify_GSFootStep_FootL_GSNotifyCS, NotifyParam) == 0x000000, "Member 'AnimNotify_GSFootStep_FootL_GSNotifyCS::NotifyParam' has a wrong offset!");

// Function b1-Managed.AnimNotify_GSFootStep_FootR.GSNotifyCS
// 0x0040 (0x0040 - 0x0000)
struct AnimNotify_GSFootStep_FootR_GSNotifyCS final
{
public:
	struct FUStGSNotifyParam                      NotifyParam;                                       // 0x0000(0x0040)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
//static_assert(alignof(AnimNotify_GSFootStep_FootR_GSNotifyCS) == 0x000008, "Wrong alignment on AnimNotify_GSFootStep_FootR_GSNotifyCS");
//static_assert(sizeof(AnimNotify_GSFootStep_FootR_GSNotifyCS) == 0x000040, "Wrong size on AnimNotify_GSFootStep_FootR_GSNotifyCS");
//static_assert(offsetof(AnimNotify_GSFootStep_FootR_GSNotifyCS, NotifyParam) == 0x000000, "Member 'AnimNotify_GSFootStep_FootR_GSNotifyCS::NotifyParam' has a wrong offset!");

// Function b1-Managed.AnimNotifyState_GSFootSlide.GSNotifyBeginCS
// 0x0048 (0x0048 - 0x0000)
struct AnimNotifyState_GSFootSlide_GSNotifyBeginCS final
{
public:
	struct FUStGSNotifyParam                      NotifyParam;                                       // 0x0000(0x0040)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
	float                                         TotalDuration;                                     // 0x0040(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
//static_assert(alignof(AnimNotifyState_GSFootSlide_GSNotifyBeginCS) == 0x000008, "Wrong alignment on AnimNotifyState_GSFootSlide_GSNotifyBeginCS");
//static_assert(sizeof(AnimNotifyState_GSFootSlide_GSNotifyBeginCS) == 0x000048, "Wrong size on AnimNotifyState_GSFootSlide_GSNotifyBeginCS");
//static_assert(offsetof(AnimNotifyState_GSFootSlide_GSNotifyBeginCS, NotifyParam) == 0x000000, "Member 'AnimNotifyState_GSFootSlide_GSNotifyBeginCS::NotifyParam' has a wrong offset!");
//static_assert(offsetof(AnimNotifyState_GSFootSlide_GSNotifyBeginCS, TotalDuration) == 0x000040, "Member 'AnimNotifyState_GSFootSlide_GSNotifyBeginCS::TotalDuration' has a wrong offset!");

// Function b1-Managed.BED_QuestNode_AwardPrizesRandom.PostPropertyChanged
// 0x0020 (0x0020 - 0x0000)
struct BED_QuestNode_AwardPrizesRandom_PostPropertyChanged final
{
public:
	class FString                                 MemberName;                                        // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash)
	class FString                                 PropertyName;                                      // 0x0010(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash)
};
//static_assert(alignof(BED_QuestNode_AwardPrizesRandom_PostPropertyChanged) == 0x000008, "Wrong alignment on BED_QuestNode_AwardPrizesRandom_PostPropertyChanged");
//static_assert(sizeof(BED_QuestNode_AwardPrizesRandom_PostPropertyChanged) == 0x000020, "Wrong size on BED_QuestNode_AwardPrizesRandom_PostPropertyChanged");
//static_assert(offsetof(BED_QuestNode_AwardPrizesRandom_PostPropertyChanged, MemberName) == 0x000000, "Member 'BED_QuestNode_AwardPrizesRandom_PostPropertyChanged::MemberName' has a wrong offset!");
//static_assert(offsetof(BED_QuestNode_AwardPrizesRandom_PostPropertyChanged, PropertyName) == 0x000010, "Member 'BED_QuestNode_AwardPrizesRandom_PostPropertyChanged::PropertyName' has a wrong offset!");

// Function b1-Managed.BED_QuestNode_AwardPrizesRandom.GetNodeDescriptionInCS
// 0x0010 (0x0010 - 0x0000)
struct BED_QuestNode_AwardPrizesRandom_GetNodeDescriptionInCS final
{
public:
	class FString                                 ReturnValue;                                       // 0x0000(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash)
};
//static_assert(alignof(BED_QuestNode_AwardPrizesRandom_GetNodeDescriptionInCS) == 0x000008, "Wrong alignment on BED_QuestNode_AwardPrizesRandom_GetNodeDescriptionInCS");
//static_assert(sizeof(BED_QuestNode_AwardPrizesRandom_GetNodeDescriptionInCS) == 0x000010, "Wrong size on BED_QuestNode_AwardPrizesRandom_GetNodeDescriptionInCS");
//static_assert(offsetof(BED_QuestNode_AwardPrizesRandom_GetNodeDescriptionInCS, ReturnValue) == 0x000000, "Member 'BED_QuestNode_AwardPrizesRandom_GetNodeDescriptionInCS::ReturnValue' has a wrong offset!");

// Function b1-Managed.BANS_GSMontageJumpToSection.GetJumpableSectionPrefix
// 0x0010 (0x0010 - 0x0000)
struct BANS_GSMontageJumpToSection_GetJumpableSectionPrefix final
{
public:
	class FString                                 ReturnValue;                                       // 0x0000(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash)
};
//static_assert(alignof(BANS_GSMontageJumpToSection_GetJumpableSectionPrefix) == 0x000008, "Wrong alignment on BANS_GSMontageJumpToSection_GetJumpableSectionPrefix");
//static_assert(sizeof(BANS_GSMontageJumpToSection_GetJumpableSectionPrefix) == 0x000010, "Wrong size on BANS_GSMontageJumpToSection_GetJumpableSectionPrefix");
//static_assert(offsetof(BANS_GSMontageJumpToSection_GetJumpableSectionPrefix, ReturnValue) == 0x000000, "Member 'BANS_GSMontageJumpToSection_GetJumpableSectionPrefix::ReturnValue' has a wrong offset!");

// Function b1-Managed.BANS_GSMontageJumpToSection.GSAllowCrossSection
// 0x0001 (0x0001 - 0x0000)
struct BANS_GSMontageJumpToSection_GSAllowCrossSection final
{
public:
	uint8                                         ReturnValue : 1;                                   // 0x0000(0x0001)(BitIndex: 0x00, PropSize: 0x0001 (Parm, OutParm, ReturnParm, NoDestructor, HasGetValueTypeHash))
};
//static_assert(alignof(BANS_GSMontageJumpToSection_GSAllowCrossSection) == 0x000001, "Wrong alignment on BANS_GSMontageJumpToSection_GSAllowCrossSection");
//static_assert(sizeof(BANS_GSMontageJumpToSection_GSAllowCrossSection) == 0x000001, "Wrong size on BANS_GSMontageJumpToSection_GSAllowCrossSection");

// Function b1-Managed.BANS_GSMontageJumpToSection.GSNotifyBeginCS
// 0x0048 (0x0048 - 0x0000)
struct BANS_GSMontageJumpToSection_GSNotifyBeginCS final
{
public:
	struct FUStGSNotifyParam                      NotifyParam;                                       // 0x0000(0x0040)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
	float                                         TotalDuration;                                     // 0x0040(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
//static_assert(alignof(BANS_GSMontageJumpToSection_GSNotifyBeginCS) == 0x000008, "Wrong alignment on BANS_GSMontageJumpToSection_GSNotifyBeginCS");
//static_assert(sizeof(BANS_GSMontageJumpToSection_GSNotifyBeginCS) == 0x000048, "Wrong size on BANS_GSMontageJumpToSection_GSNotifyBeginCS");
//static_assert(offsetof(BANS_GSMontageJumpToSection_GSNotifyBeginCS, NotifyParam) == 0x000000, "Member 'BANS_GSMontageJumpToSection_GSNotifyBeginCS::NotifyParam' has a wrong offset!");
//static_assert(offsetof(BANS_GSMontageJumpToSection_GSNotifyBeginCS, TotalDuration) == 0x000040, "Member 'BANS_GSMontageJumpToSection_GSNotifyBeginCS::TotalDuration' has a wrong offset!");

// Function b1-Managed.BANS_GSMontageJumpToSection.GetAnimNSType
// 0x0001 (0x0001 - 0x0000)
struct BANS_GSMontageJumpToSection_GetAnimNSType final
{
public:
	EGsEnAnimNS                                   ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
//static_assert(alignof(BANS_GSMontageJumpToSection_GetAnimNSType) == 0x000001, "Wrong alignment on BANS_GSMontageJumpToSection_GetAnimNSType");
//static_assert(sizeof(BANS_GSMontageJumpToSection_GetAnimNSType) == 0x000001, "Wrong size on BANS_GSMontageJumpToSection_GetAnimNSType");
//static_assert(offsetof(BANS_GSMontageJumpToSection_GetAnimNSType, ReturnValue) == 0x000000, "Member 'BANS_GSMontageJumpToSection_GetAnimNSType::ReturnValue' has a wrong offset!");

// Function b1-Managed.BAN_GSMontageJumpToSectionByCondition.bIsNativeBranchingPointCS
// 0x0001 (0x0001 - 0x0000)
struct BAN_GSMontageJumpToSectionByCondition_bIsNativeBranchingPointCS final
{
public:
	uint8                                         ReturnValue : 1;                                   // 0x0000(0x0001)(BitIndex: 0x00, PropSize: 0x0001 (Parm, OutParm, ReturnParm, NoDestructor, HasGetValueTypeHash))
};
//static_assert(alignof(BAN_GSMontageJumpToSectionByCondition_bIsNativeBranchingPointCS) == 0x000001, "Wrong alignment on BAN_GSMontageJumpToSectionByCondition_bIsNativeBranchingPointCS");
//static_assert(sizeof(BAN_GSMontageJumpToSectionByCondition_bIsNativeBranchingPointCS) == 0x000001, "Wrong size on BAN_GSMontageJumpToSectionByCondition_bIsNativeBranchingPointCS");

// Function b1-Managed.BAN_GSMontageJumpToSectionByCondition.GetJumpableSectionPrefix
// 0x0010 (0x0010 - 0x0000)
struct BAN_GSMontageJumpToSectionByCondition_GetJumpableSectionPrefix final
{
public:
	class FString                                 ReturnValue;                                       // 0x0000(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash)
};
//static_assert(alignof(BAN_GSMontageJumpToSectionByCondition_GetJumpableSectionPrefix) == 0x000008, "Wrong alignment on BAN_GSMontageJumpToSectionByCondition_GetJumpableSectionPrefix");
//static_assert(sizeof(BAN_GSMontageJumpToSectionByCondition_GetJumpableSectionPrefix) == 0x000010, "Wrong size on BAN_GSMontageJumpToSectionByCondition_GetJumpableSectionPrefix");
//static_assert(offsetof(BAN_GSMontageJumpToSectionByCondition_GetJumpableSectionPrefix, ReturnValue) == 0x000000, "Member 'BAN_GSMontageJumpToSectionByCondition_GetJumpableSectionPrefix::ReturnValue' has a wrong offset!");

// Function b1-Managed.BAN_GSMontageJumpToSectionByCondition.GetAnimNType
// 0x0001 (0x0001 - 0x0000)
struct BAN_GSMontageJumpToSectionByCondition_GetAnimNType final
{
public:
	EGsEnAnimN                                    ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
//static_assert(alignof(BAN_GSMontageJumpToSectionByCondition_GetAnimNType) == 0x000001, "Wrong alignment on BAN_GSMontageJumpToSectionByCondition_GetAnimNType");
//static_assert(sizeof(BAN_GSMontageJumpToSectionByCondition_GetAnimNType) == 0x000001, "Wrong size on BAN_GSMontageJumpToSectionByCondition_GetAnimNType");
//static_assert(offsetof(BAN_GSMontageJumpToSectionByCondition_GetAnimNType, ReturnValue) == 0x000000, "Member 'BAN_GSMontageJumpToSectionByCondition_GetAnimNType::ReturnValue' has a wrong offset!");

// Function b1-Managed.BAN_GSMontageJumpToSectionByCondition.GSNotifyCS
// 0x0040 (0x0040 - 0x0000)
struct BAN_GSMontageJumpToSectionByCondition_GSNotifyCS final
{
public:
	struct FUStGSNotifyParam                      NotifyParam;                                       // 0x0000(0x0040)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
//static_assert(alignof(BAN_GSMontageJumpToSectionByCondition_GSNotifyCS) == 0x000008, "Wrong alignment on BAN_GSMontageJumpToSectionByCondition_GSNotifyCS");
//static_assert(sizeof(BAN_GSMontageJumpToSectionByCondition_GSNotifyCS) == 0x000040, "Wrong size on BAN_GSMontageJumpToSectionByCondition_GSNotifyCS");
//static_assert(offsetof(BAN_GSMontageJumpToSectionByCondition_GSNotifyCS, NotifyParam) == 0x000000, "Member 'BAN_GSMontageJumpToSectionByCondition_GSNotifyCS::NotifyParam' has a wrong offset!");

// Function b1-Managed.BED_QuestNode_SpawnBossTrace.GetNodeDescriptionInCS
// 0x0010 (0x0010 - 0x0000)
struct BED_QuestNode_SpawnBossTrace_GetNodeDescriptionInCS final
{
public:
	class FString                                 ReturnValue;                                       // 0x0000(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash)
};
//static_assert(alignof(BED_QuestNode_SpawnBossTrace_GetNodeDescriptionInCS) == 0x000008, "Wrong alignment on BED_QuestNode_SpawnBossTrace_GetNodeDescriptionInCS");
//static_assert(sizeof(BED_QuestNode_SpawnBossTrace_GetNodeDescriptionInCS) == 0x000010, "Wrong size on BED_QuestNode_SpawnBossTrace_GetNodeDescriptionInCS");
//static_assert(offsetof(BED_QuestNode_SpawnBossTrace_GetNodeDescriptionInCS, ReturnValue) == 0x000000, "Member 'BED_QuestNode_SpawnBossTrace_GetNodeDescriptionInCS::ReturnValue' has a wrong offset!");

// Function b1-Managed.BAN_GSMoveActor.GSNotifyCS
// 0x0040 (0x0040 - 0x0000)
struct BAN_GSMoveActor_GSNotifyCS final
{
public:
	struct FUStGSNotifyParam                      NotifyParam;                                       // 0x0000(0x0040)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
//static_assert(alignof(BAN_GSMoveActor_GSNotifyCS) == 0x000008, "Wrong alignment on BAN_GSMoveActor_GSNotifyCS");
//static_assert(sizeof(BAN_GSMoveActor_GSNotifyCS) == 0x000040, "Wrong size on BAN_GSMoveActor_GSNotifyCS");
//static_assert(offsetof(BAN_GSMoveActor_GSNotifyCS, NotifyParam) == 0x000000, "Member 'BAN_GSMoveActor_GSNotifyCS::NotifyParam' has a wrong offset!");

// Function b1-Managed.BAN_GSParkourLandCanMove.bIsNativeBranchingPointCS
// 0x0001 (0x0001 - 0x0000)
struct BAN_GSParkourLandCanMove_bIsNativeBranchingPointCS final
{
public:
	uint8                                         ReturnValue : 1;                                   // 0x0000(0x0001)(BitIndex: 0x00, PropSize: 0x0001 (Parm, OutParm, ReturnParm, NoDestructor, HasGetValueTypeHash))
};
//static_assert(alignof(BAN_GSParkourLandCanMove_bIsNativeBranchingPointCS) == 0x000001, "Wrong alignment on BAN_GSParkourLandCanMove_bIsNativeBranchingPointCS");
//static_assert(sizeof(BAN_GSParkourLandCanMove_bIsNativeBranchingPointCS) == 0x000001, "Wrong size on BAN_GSParkourLandCanMove_bIsNativeBranchingPointCS");

// Function b1-Managed.BAN_GSParkourLandCanMove.GSNotifyCS
// 0x0040 (0x0040 - 0x0000)
struct BAN_GSParkourLandCanMove_GSNotifyCS final
{
public:
	struct FUStGSNotifyParam                      NotifyParam;                                       // 0x0000(0x0040)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
//static_assert(alignof(BAN_GSParkourLandCanMove_GSNotifyCS) == 0x000008, "Wrong alignment on BAN_GSParkourLandCanMove_GSNotifyCS");
//static_assert(sizeof(BAN_GSParkourLandCanMove_GSNotifyCS) == 0x000040, "Wrong size on BAN_GSParkourLandCanMove_GSNotifyCS");
//static_assert(offsetof(BAN_GSParkourLandCanMove_GSNotifyCS, NotifyParam) == 0x000000, "Member 'BAN_GSParkourLandCanMove_GSNotifyCS::NotifyParam' has a wrong offset!");

// Function b1-Managed.BAN_GSPlayDummyAnim.bIsNativeBranchingPointCS
// 0x0001 (0x0001 - 0x0000)
struct BAN_GSPlayDummyAnim_bIsNativeBranchingPointCS final
{
public:
	uint8                                         ReturnValue : 1;                                   // 0x0000(0x0001)(BitIndex: 0x00, PropSize: 0x0001 (Parm, OutParm, ReturnParm, NoDestructor, HasGetValueTypeHash))
};
//static_assert(alignof(BAN_GSPlayDummyAnim_bIsNativeBranchingPointCS) == 0x000001, "Wrong alignment on BAN_GSPlayDummyAnim_bIsNativeBranchingPointCS");
//static_assert(sizeof(BAN_GSPlayDummyAnim_bIsNativeBranchingPointCS) == 0x000001, "Wrong size on BAN_GSPlayDummyAnim_bIsNativeBranchingPointCS");

// Function b1-Managed.BAN_GSPlayDummyAnim.GSNotifyCS
// 0x0040 (0x0040 - 0x0000)
struct BAN_GSPlayDummyAnim_GSNotifyCS final
{
public:
	struct FUStGSNotifyParam                      NotifyParam;                                       // 0x0000(0x0040)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
//static_assert(alignof(BAN_GSPlayDummyAnim_GSNotifyCS) == 0x000008, "Wrong alignment on BAN_GSPlayDummyAnim_GSNotifyCS");
//static_assert(sizeof(BAN_GSPlayDummyAnim_GSNotifyCS) == 0x000040, "Wrong size on BAN_GSPlayDummyAnim_GSNotifyCS");
//static_assert(offsetof(BAN_GSPlayDummyAnim_GSNotifyCS, NotifyParam) == 0x000000, "Member 'BAN_GSPlayDummyAnim_GSNotifyCS::NotifyParam' has a wrong offset!");

// Function b1-Managed.BAN_GSPlaySequence.bIsNativeBranchingPointCS
// 0x0001 (0x0001 - 0x0000)
struct BAN_GSPlaySequence_bIsNativeBranchingPointCS final
{
public:
	uint8                                         ReturnValue : 1;                                   // 0x0000(0x0001)(BitIndex: 0x00, PropSize: 0x0001 (Parm, OutParm, ReturnParm, NoDestructor, HasGetValueTypeHash))
};
//static_assert(alignof(BAN_GSPlaySequence_bIsNativeBranchingPointCS) == 0x000001, "Wrong alignment on BAN_GSPlaySequence_bIsNativeBranchingPointCS");
//static_assert(sizeof(BAN_GSPlaySequence_bIsNativeBranchingPointCS) == 0x000001, "Wrong size on BAN_GSPlaySequence_bIsNativeBranchingPointCS");

// Function b1-Managed.BAN_GSPlaySequence.GetSoftReferences
// 0x0010 (0x0010 - 0x0000)
struct BAN_GSPlaySequence_GetSoftReferences final
{
public:
	TArray<struct FSoftObjectPath>                ReturnValue;                                       // 0x0000(0x0010)(Parm, OutParm, ReturnParm)
};
//static_assert(alignof(BAN_GSPlaySequence_GetSoftReferences) == 0x000008, "Wrong alignment on BAN_GSPlaySequence_GetSoftReferences");
//static_assert(sizeof(BAN_GSPlaySequence_GetSoftReferences) == 0x000010, "Wrong size on BAN_GSPlaySequence_GetSoftReferences");
//static_assert(offsetof(BAN_GSPlaySequence_GetSoftReferences, ReturnValue) == 0x000000, "Member 'BAN_GSPlaySequence_GetSoftReferences::ReturnValue' has a wrong offset!");

// Function b1-Managed.BAN_GSPlaySequence.GSNotifyCS
// 0x0040 (0x0040 - 0x0000)
struct BAN_GSPlaySequence_GSNotifyCS final
{
public:
	struct FUStGSNotifyParam                      NotifyParam;                                       // 0x0000(0x0040)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
//static_assert(alignof(BAN_GSPlaySequence_GSNotifyCS) == 0x000008, "Wrong alignment on BAN_GSPlaySequence_GSNotifyCS");
//static_assert(sizeof(BAN_GSPlaySequence_GSNotifyCS) == 0x000040, "Wrong size on BAN_GSPlaySequence_GSNotifyCS");
//static_assert(offsetof(BAN_GSPlaySequence_GSNotifyCS, NotifyParam) == 0x000000, "Member 'BAN_GSPlaySequence_GSNotifyCS::NotifyParam' has a wrong offset!");

// Function b1-Managed.BAN_GSRagDoll.GSNotifyCS
// 0x0040 (0x0040 - 0x0000)
struct BAN_GSRagDoll_GSNotifyCS final
{
public:
	struct FUStGSNotifyParam                      NotifyParam;                                       // 0x0000(0x0040)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
//static_assert(alignof(BAN_GSRagDoll_GSNotifyCS) == 0x000008, "Wrong alignment on BAN_GSRagDoll_GSNotifyCS");
//static_assert(sizeof(BAN_GSRagDoll_GSNotifyCS) == 0x000040, "Wrong size on BAN_GSRagDoll_GSNotifyCS");
//static_assert(offsetof(BAN_GSRagDoll_GSNotifyCS, NotifyParam) == 0x000000, "Member 'BAN_GSRagDoll_GSNotifyCS::NotifyParam' has a wrong offset!");

// Function b1-Managed.BAN_GSRemoveSceneItemData.bIsNativeBranchingPointCS
// 0x0001 (0x0001 - 0x0000)
struct BAN_GSRemoveSceneItemData_bIsNativeBranchingPointCS final
{
public:
	uint8                                         ReturnValue : 1;                                   // 0x0000(0x0001)(BitIndex: 0x00, PropSize: 0x0001 (Parm, OutParm, ReturnParm, NoDestructor, HasGetValueTypeHash))
};
//static_assert(alignof(BAN_GSRemoveSceneItemData_bIsNativeBranchingPointCS) == 0x000001, "Wrong alignment on BAN_GSRemoveSceneItemData_bIsNativeBranchingPointCS");
//static_assert(sizeof(BAN_GSRemoveSceneItemData_bIsNativeBranchingPointCS) == 0x000001, "Wrong size on BAN_GSRemoveSceneItemData_bIsNativeBranchingPointCS");

// Function b1-Managed.BAN_GSRemoveSceneItemData.GSNotifyCS
// 0x0040 (0x0040 - 0x0000)
struct BAN_GSRemoveSceneItemData_GSNotifyCS final
{
public:
	struct FUStGSNotifyParam                      NotifyParam;                                       // 0x0000(0x0040)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
//static_assert(alignof(BAN_GSRemoveSceneItemData_GSNotifyCS) == 0x000008, "Wrong alignment on BAN_GSRemoveSceneItemData_GSNotifyCS");
//static_assert(sizeof(BAN_GSRemoveSceneItemData_GSNotifyCS) == 0x000040, "Wrong size on BAN_GSRemoveSceneItemData_GSNotifyCS");
//static_assert(offsetof(BAN_GSRemoveSceneItemData_GSNotifyCS, NotifyParam) == 0x000000, "Member 'BAN_GSRemoveSceneItemData_GSNotifyCS::NotifyParam' has a wrong offset!");

// Function b1-Managed.BAN_GSSetActorScale.bIsNativeBranchingPointCS
// 0x0001 (0x0001 - 0x0000)
struct BAN_GSSetActorScale_bIsNativeBranchingPointCS final
{
public:
	uint8                                         ReturnValue : 1;                                   // 0x0000(0x0001)(BitIndex: 0x00, PropSize: 0x0001 (Parm, OutParm, ReturnParm, NoDestructor, HasGetValueTypeHash))
};
//static_assert(alignof(BAN_GSSetActorScale_bIsNativeBranchingPointCS) == 0x000001, "Wrong alignment on BAN_GSSetActorScale_bIsNativeBranchingPointCS");
//static_assert(sizeof(BAN_GSSetActorScale_bIsNativeBranchingPointCS) == 0x000001, "Wrong size on BAN_GSSetActorScale_bIsNativeBranchingPointCS");

// Function b1-Managed.BAN_GSSetActorScale.GSNotifyCS
// 0x0040 (0x0040 - 0x0000)
struct BAN_GSSetActorScale_GSNotifyCS final
{
public:
	struct FUStGSNotifyParam                      NotifyParam;                                       // 0x0000(0x0040)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
//static_assert(alignof(BAN_GSSetActorScale_GSNotifyCS) == 0x000008, "Wrong alignment on BAN_GSSetActorScale_GSNotifyCS");
//static_assert(sizeof(BAN_GSSetActorScale_GSNotifyCS) == 0x000040, "Wrong size on BAN_GSSetActorScale_GSNotifyCS");
//static_assert(offsetof(BAN_GSSetActorScale_GSNotifyCS, NotifyParam) == 0x000000, "Member 'BAN_GSSetActorScale_GSNotifyCS::NotifyParam' has a wrong offset!");

// Function b1-Managed.BED_MovieNode_PerformerSetTransform.GetNodeDescriptionInCS
// 0x0010 (0x0010 - 0x0000)
struct BED_MovieNode_PerformerSetTransform_GetNodeDescriptionInCS final
{
public:
	class FString                                 ReturnValue;                                       // 0x0000(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash)
};
//static_assert(alignof(BED_MovieNode_PerformerSetTransform_GetNodeDescriptionInCS) == 0x000008, "Wrong alignment on BED_MovieNode_PerformerSetTransform_GetNodeDescriptionInCS");
//static_assert(sizeof(BED_MovieNode_PerformerSetTransform_GetNodeDescriptionInCS) == 0x000010, "Wrong size on BED_MovieNode_PerformerSetTransform_GetNodeDescriptionInCS");
//static_assert(offsetof(BED_MovieNode_PerformerSetTransform_GetNodeDescriptionInCS, ReturnValue) == 0x000000, "Member 'BED_MovieNode_PerformerSetTransform_GetNodeDescriptionInCS::ReturnValue' has a wrong offset!");

// Function b1-Managed.BAN_GSSetCompVisibility.bIsNativeBranchingPointCS
// 0x0001 (0x0001 - 0x0000)
struct BAN_GSSetCompVisibility_bIsNativeBranchingPointCS final
{
public:
	uint8                                         ReturnValue : 1;                                   // 0x0000(0x0001)(BitIndex: 0x00, PropSize: 0x0001 (Parm, OutParm, ReturnParm, NoDestructor, HasGetValueTypeHash))
};
//static_assert(alignof(BAN_GSSetCompVisibility_bIsNativeBranchingPointCS) == 0x000001, "Wrong alignment on BAN_GSSetCompVisibility_bIsNativeBranchingPointCS");
//static_assert(sizeof(BAN_GSSetCompVisibility_bIsNativeBranchingPointCS) == 0x000001, "Wrong size on BAN_GSSetCompVisibility_bIsNativeBranchingPointCS");

// Function b1-Managed.BAN_GSSetCompVisibility.GSNotifyCS
// 0x0040 (0x0040 - 0x0000)
struct BAN_GSSetCompVisibility_GSNotifyCS final
{
public:
	struct FUStGSNotifyParam                      NotifyParam;                                       // 0x0000(0x0040)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
//static_assert(alignof(BAN_GSSetCompVisibility_GSNotifyCS) == 0x000008, "Wrong alignment on BAN_GSSetCompVisibility_GSNotifyCS");
//static_assert(sizeof(BAN_GSSetCompVisibility_GSNotifyCS) == 0x000040, "Wrong size on BAN_GSSetCompVisibility_GSNotifyCS");
//static_assert(offsetof(BAN_GSSetCompVisibility_GSNotifyCS, NotifyParam) == 0x000000, "Member 'BAN_GSSetCompVisibility_GSNotifyCS::NotifyParam' has a wrong offset!");

// Function b1-Managed.BAN_GSSetFPStateEnd.GSNotifyCS
// 0x0040 (0x0040 - 0x0000)
struct BAN_GSSetFPStateEnd_GSNotifyCS final
{
public:
	struct FUStGSNotifyParam                      NotifyParam;                                       // 0x0000(0x0040)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
//static_assert(alignof(BAN_GSSetFPStateEnd_GSNotifyCS) == 0x000008, "Wrong alignment on BAN_GSSetFPStateEnd_GSNotifyCS");
//static_assert(sizeof(BAN_GSSetFPStateEnd_GSNotifyCS) == 0x000040, "Wrong size on BAN_GSSetFPStateEnd_GSNotifyCS");
//static_assert(offsetof(BAN_GSSetFPStateEnd_GSNotifyCS, NotifyParam) == 0x000000, "Member 'BAN_GSSetFPStateEnd_GSNotifyCS::NotifyParam' has a wrong offset!");

// Function b1-Managed.BAN_GSSpawnStaticMeshActor.GSNotifyCS
// 0x0040 (0x0040 - 0x0000)
struct BAN_GSSpawnStaticMeshActor_GSNotifyCS final
{
public:
	struct FUStGSNotifyParam                      NotifyParam;                                       // 0x0000(0x0040)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
//static_assert(alignof(BAN_GSSpawnStaticMeshActor_GSNotifyCS) == 0x000008, "Wrong alignment on BAN_GSSpawnStaticMeshActor_GSNotifyCS");
//static_assert(sizeof(BAN_GSSpawnStaticMeshActor_GSNotifyCS) == 0x000040, "Wrong size on BAN_GSSpawnStaticMeshActor_GSNotifyCS");
//static_assert(offsetof(BAN_GSSpawnStaticMeshActor_GSNotifyCS, NotifyParam) == 0x000000, "Member 'BAN_GSSpawnStaticMeshActor_GSNotifyCS::NotifyParam' has a wrong offset!");

// Function b1-Managed.BAN_GSSpawnLightningActor.GSNotifyCS
// 0x0040 (0x0040 - 0x0000)
struct BAN_GSSpawnLightningActor_GSNotifyCS final
{
public:
	struct FUStGSNotifyParam                      NotifyParam;                                       // 0x0000(0x0040)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
//static_assert(alignof(BAN_GSSpawnLightningActor_GSNotifyCS) == 0x000008, "Wrong alignment on BAN_GSSpawnLightningActor_GSNotifyCS");
//static_assert(sizeof(BAN_GSSpawnLightningActor_GSNotifyCS) == 0x000040, "Wrong size on BAN_GSSpawnLightningActor_GSNotifyCS");
//static_assert(offsetof(BAN_GSSpawnLightningActor_GSNotifyCS, NotifyParam) == 0x000000, "Member 'BAN_GSSpawnLightningActor_GSNotifyCS::NotifyParam' has a wrong offset!");

// Function b1-Managed.BAN_GSSpawnSceneItem.bIsNativeBranchingPointCS
// 0x0001 (0x0001 - 0x0000)
struct BAN_GSSpawnSceneItem_bIsNativeBranchingPointCS final
{
public:
	uint8                                         ReturnValue : 1;                                   // 0x0000(0x0001)(BitIndex: 0x00, PropSize: 0x0001 (Parm, OutParm, ReturnParm, NoDestructor, HasGetValueTypeHash))
};
//static_assert(alignof(BAN_GSSpawnSceneItem_bIsNativeBranchingPointCS) == 0x000001, "Wrong alignment on BAN_GSSpawnSceneItem_bIsNativeBranchingPointCS");
//static_assert(sizeof(BAN_GSSpawnSceneItem_bIsNativeBranchingPointCS) == 0x000001, "Wrong size on BAN_GSSpawnSceneItem_bIsNativeBranchingPointCS");

// Function b1-Managed.BAN_GSSpawnSceneItem.GSNotifyCS
// 0x0040 (0x0040 - 0x0000)
struct BAN_GSSpawnSceneItem_GSNotifyCS final
{
public:
	struct FUStGSNotifyParam                      NotifyParam;                                       // 0x0000(0x0040)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
//static_assert(alignof(BAN_GSSpawnSceneItem_GSNotifyCS) == 0x000008, "Wrong alignment on BAN_GSSpawnSceneItem_GSNotifyCS");
//static_assert(sizeof(BAN_GSSpawnSceneItem_GSNotifyCS) == 0x000040, "Wrong size on BAN_GSSpawnSceneItem_GSNotifyCS");
//static_assert(offsetof(BAN_GSSpawnSceneItem_GSNotifyCS, NotifyParam) == 0x000000, "Member 'BAN_GSSpawnSceneItem_GSNotifyCS::NotifyParam' has a wrong offset!");

// Function b1-Managed.BED_MovieNode_Timer.GetNodeDescriptionInCS
// 0x0010 (0x0010 - 0x0000)
struct BED_MovieNode_Timer_GetNodeDescriptionInCS final
{
public:
	class FString                                 ReturnValue;                                       // 0x0000(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash)
};
//static_assert(alignof(BED_MovieNode_Timer_GetNodeDescriptionInCS) == 0x000008, "Wrong alignment on BED_MovieNode_Timer_GetNodeDescriptionInCS");
//static_assert(sizeof(BED_MovieNode_Timer_GetNodeDescriptionInCS) == 0x000010, "Wrong size on BED_MovieNode_Timer_GetNodeDescriptionInCS");
//static_assert(offsetof(BED_MovieNode_Timer_GetNodeDescriptionInCS, ReturnValue) == 0x000000, "Member 'BED_MovieNode_Timer_GetNodeDescriptionInCS::ReturnValue' has a wrong offset!");

// Function b1-Managed.BAN_GSSplineFlyMove.bIsNativeBranchingPointCS
// 0x0001 (0x0001 - 0x0000)
struct BAN_GSSplineFlyMove_bIsNativeBranchingPointCS final
{
public:
	uint8                                         ReturnValue : 1;                                   // 0x0000(0x0001)(BitIndex: 0x00, PropSize: 0x0001 (Parm, OutParm, ReturnParm, NoDestructor, HasGetValueTypeHash))
};
//static_assert(alignof(BAN_GSSplineFlyMove_bIsNativeBranchingPointCS) == 0x000001, "Wrong alignment on BAN_GSSplineFlyMove_bIsNativeBranchingPointCS");
//static_assert(sizeof(BAN_GSSplineFlyMove_bIsNativeBranchingPointCS) == 0x000001, "Wrong size on BAN_GSSplineFlyMove_bIsNativeBranchingPointCS");

// Function b1-Managed.BAN_GSSplineFlyMove.GSNotifyCS
// 0x0040 (0x0040 - 0x0000)
struct BAN_GSSplineFlyMove_GSNotifyCS final
{
public:
	struct FUStGSNotifyParam                      NotifyParam;                                       // 0x0000(0x0040)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
//static_assert(alignof(BAN_GSSplineFlyMove_GSNotifyCS) == 0x000008, "Wrong alignment on BAN_GSSplineFlyMove_GSNotifyCS");
//static_assert(sizeof(BAN_GSSplineFlyMove_GSNotifyCS) == 0x000040, "Wrong size on BAN_GSSplineFlyMove_GSNotifyCS");
//static_assert(offsetof(BAN_GSSplineFlyMove_GSNotifyCS, NotifyParam) == 0x000000, "Member 'BAN_GSSplineFlyMove_GSNotifyCS::NotifyParam' has a wrong offset!");

// Function b1-Managed.BAN_GSSwitchMovementMode.bIsNativeBranchingPointCS
// 0x0001 (0x0001 - 0x0000)
struct BAN_GSSwitchMovementMode_bIsNativeBranchingPointCS final
{
public:
	uint8                                         ReturnValue : 1;                                   // 0x0000(0x0001)(BitIndex: 0x00, PropSize: 0x0001 (Parm, OutParm, ReturnParm, NoDestructor, HasGetValueTypeHash))
};
//static_assert(alignof(BAN_GSSwitchMovementMode_bIsNativeBranchingPointCS) == 0x000001, "Wrong alignment on BAN_GSSwitchMovementMode_bIsNativeBranchingPointCS");
//static_assert(sizeof(BAN_GSSwitchMovementMode_bIsNativeBranchingPointCS) == 0x000001, "Wrong size on BAN_GSSwitchMovementMode_bIsNativeBranchingPointCS");

// Function b1-Managed.BAN_GSSwitchMovementMode.GSNotifyCS
// 0x0040 (0x0040 - 0x0000)
struct BAN_GSSwitchMovementMode_GSNotifyCS final
{
public:
	struct FUStGSNotifyParam                      NotifyParam;                                       // 0x0000(0x0040)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
//static_assert(alignof(BAN_GSSwitchMovementMode_GSNotifyCS) == 0x000008, "Wrong alignment on BAN_GSSwitchMovementMode_GSNotifyCS");
//static_assert(sizeof(BAN_GSSwitchMovementMode_GSNotifyCS) == 0x000040, "Wrong size on BAN_GSSwitchMovementMode_GSNotifyCS");
//static_assert(offsetof(BAN_GSSwitchMovementMode_GSNotifyCS, NotifyParam) == 0x000000, "Member 'BAN_GSSwitchMovementMode_GSNotifyCS::NotifyParam' has a wrong offset!");

// Function b1-Managed.BAN_GSTriggerChargeSkill.bIsNativeBranchingPointCS
// 0x0001 (0x0001 - 0x0000)
struct BAN_GSTriggerChargeSkill_bIsNativeBranchingPointCS final
{
public:
	uint8                                         ReturnValue : 1;                                   // 0x0000(0x0001)(BitIndex: 0x00, PropSize: 0x0001 (Parm, OutParm, ReturnParm, NoDestructor, HasGetValueTypeHash))
};
//static_assert(alignof(BAN_GSTriggerChargeSkill_bIsNativeBranchingPointCS) == 0x000001, "Wrong alignment on BAN_GSTriggerChargeSkill_bIsNativeBranchingPointCS");
//static_assert(sizeof(BAN_GSTriggerChargeSkill_bIsNativeBranchingPointCS) == 0x000001, "Wrong size on BAN_GSTriggerChargeSkill_bIsNativeBranchingPointCS");

// Function b1-Managed.BAN_GSTriggerChargeSkill.GSValidateInputCS
// 0x0008 (0x0008 - 0x0000)
struct BAN_GSTriggerChargeSkill_GSValidateInputCS final
{
public:
	class AActor*                                 Actor;                                             // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
//static_assert(alignof(BAN_GSTriggerChargeSkill_GSValidateInputCS) == 0x000008, "Wrong alignment on BAN_GSTriggerChargeSkill_GSValidateInputCS");
//static_assert(sizeof(BAN_GSTriggerChargeSkill_GSValidateInputCS) == 0x000008, "Wrong size on BAN_GSTriggerChargeSkill_GSValidateInputCS");
//static_assert(offsetof(BAN_GSTriggerChargeSkill_GSValidateInputCS, Actor) == 0x000000, "Member 'BAN_GSTriggerChargeSkill_GSValidateInputCS::Actor' has a wrong offset!");

// Function b1-Managed.BAN_GSTriggerChargeSkill.GSNotifyCS
// 0x0040 (0x0040 - 0x0000)
struct BAN_GSTriggerChargeSkill_GSNotifyCS final
{
public:
	struct FUStGSNotifyParam                      NotifyParam;                                       // 0x0000(0x0040)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
//static_assert(alignof(BAN_GSTriggerChargeSkill_GSNotifyCS) == 0x000008, "Wrong alignment on BAN_GSTriggerChargeSkill_GSNotifyCS");
//static_assert(sizeof(BAN_GSTriggerChargeSkill_GSNotifyCS) == 0x000040, "Wrong size on BAN_GSTriggerChargeSkill_GSNotifyCS");
//static_assert(offsetof(BAN_GSTriggerChargeSkill_GSNotifyCS, NotifyParam) == 0x000000, "Member 'BAN_GSTriggerChargeSkill_GSNotifyCS::NotifyParam' has a wrong offset!");

// Function b1-Managed.BAN_GSTriggerCostItem.bIsNativeBranchingPointCS
// 0x0001 (0x0001 - 0x0000)
struct BAN_GSTriggerCostItem_bIsNativeBranchingPointCS final
{
public:
	uint8                                         ReturnValue : 1;                                   // 0x0000(0x0001)(BitIndex: 0x00, PropSize: 0x0001 (Parm, OutParm, ReturnParm, NoDestructor, HasGetValueTypeHash))
};
//static_assert(alignof(BAN_GSTriggerCostItem_bIsNativeBranchingPointCS) == 0x000001, "Wrong alignment on BAN_GSTriggerCostItem_bIsNativeBranchingPointCS");
//static_assert(sizeof(BAN_GSTriggerCostItem_bIsNativeBranchingPointCS) == 0x000001, "Wrong size on BAN_GSTriggerCostItem_bIsNativeBranchingPointCS");

// Function b1-Managed.BAN_GSTriggerCostItem.GSNotifyCS
// 0x0040 (0x0040 - 0x0000)
struct BAN_GSTriggerCostItem_GSNotifyCS final
{
public:
	struct FUStGSNotifyParam                      NotifyParam;                                       // 0x0000(0x0040)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
//static_assert(alignof(BAN_GSTriggerCostItem_GSNotifyCS) == 0x000008, "Wrong alignment on BAN_GSTriggerCostItem_GSNotifyCS");
//static_assert(sizeof(BAN_GSTriggerCostItem_GSNotifyCS) == 0x000040, "Wrong size on BAN_GSTriggerCostItem_GSNotifyCS");
//static_assert(offsetof(BAN_GSTriggerCostItem_GSNotifyCS, NotifyParam) == 0x000000, "Member 'BAN_GSTriggerCostItem_GSNotifyCS::NotifyParam' has a wrong offset!");

// Function b1-Managed.BAN_GSTriggerEffect.bIsNativeBranchingPointCS
// 0x0001 (0x0001 - 0x0000)
struct BAN_GSTriggerEffect_bIsNativeBranchingPointCS final
{
public:
	uint8                                         ReturnValue : 1;                                   // 0x0000(0x0001)(BitIndex: 0x00, PropSize: 0x0001 (Parm, OutParm, ReturnParm, NoDestructor, HasGetValueTypeHash))
};
//static_assert(alignof(BAN_GSTriggerEffect_bIsNativeBranchingPointCS) == 0x000001, "Wrong alignment on BAN_GSTriggerEffect_bIsNativeBranchingPointCS");
//static_assert(sizeof(BAN_GSTriggerEffect_bIsNativeBranchingPointCS) == 0x000001, "Wrong size on BAN_GSTriggerEffect_bIsNativeBranchingPointCS");

// Function b1-Managed.BAN_GSTriggerEffect.GSValidateInputCS
// 0x0008 (0x0008 - 0x0000)
struct BAN_GSTriggerEffect_GSValidateInputCS final
{
public:
	class AActor*                                 Actor;                                             // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
//static_assert(alignof(BAN_GSTriggerEffect_GSValidateInputCS) == 0x000008, "Wrong alignment on BAN_GSTriggerEffect_GSValidateInputCS");
//static_assert(sizeof(BAN_GSTriggerEffect_GSValidateInputCS) == 0x000008, "Wrong size on BAN_GSTriggerEffect_GSValidateInputCS");
//static_assert(offsetof(BAN_GSTriggerEffect_GSValidateInputCS, Actor) == 0x000000, "Member 'BAN_GSTriggerEffect_GSValidateInputCS::Actor' has a wrong offset!");

// Function b1-Managed.BAN_GSTriggerEffect.GSNotifyCS
// 0x0040 (0x0040 - 0x0000)
struct BAN_GSTriggerEffect_GSNotifyCS final
{
public:
	struct FUStGSNotifyParam                      NotifyParam;                                       // 0x0000(0x0040)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
//static_assert(alignof(BAN_GSTriggerEffect_GSNotifyCS) == 0x000008, "Wrong alignment on BAN_GSTriggerEffect_GSNotifyCS");
//static_assert(sizeof(BAN_GSTriggerEffect_GSNotifyCS) == 0x000040, "Wrong size on BAN_GSTriggerEffect_GSNotifyCS");
//static_assert(offsetof(BAN_GSTriggerEffect_GSNotifyCS, NotifyParam) == 0x000000, "Member 'BAN_GSTriggerEffect_GSNotifyCS::NotifyParam' has a wrong offset!");

// Function b1-Managed.BAN_GSTryAttachSceneItem.bIsNativeBranchingPointCS
// 0x0001 (0x0001 - 0x0000)
struct BAN_GSTryAttachSceneItem_bIsNativeBranchingPointCS final
{
public:
	uint8                                         ReturnValue : 1;                                   // 0x0000(0x0001)(BitIndex: 0x00, PropSize: 0x0001 (Parm, OutParm, ReturnParm, NoDestructor, HasGetValueTypeHash))
};
//static_assert(alignof(BAN_GSTryAttachSceneItem_bIsNativeBranchingPointCS) == 0x000001, "Wrong alignment on BAN_GSTryAttachSceneItem_bIsNativeBranchingPointCS");
//static_assert(sizeof(BAN_GSTryAttachSceneItem_bIsNativeBranchingPointCS) == 0x000001, "Wrong size on BAN_GSTryAttachSceneItem_bIsNativeBranchingPointCS");

// Function b1-Managed.BAN_GSTryAttachSceneItem.GSNotifyCS
// 0x0040 (0x0040 - 0x0000)
struct BAN_GSTryAttachSceneItem_GSNotifyCS final
{
public:
	struct FUStGSNotifyParam                      NotifyParam;                                       // 0x0000(0x0040)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
//static_assert(alignof(BAN_GSTryAttachSceneItem_GSNotifyCS) == 0x000008, "Wrong alignment on BAN_GSTryAttachSceneItem_GSNotifyCS");
//static_assert(sizeof(BAN_GSTryAttachSceneItem_GSNotifyCS) == 0x000040, "Wrong size on BAN_GSTryAttachSceneItem_GSNotifyCS");
//static_assert(offsetof(BAN_GSTryAttachSceneItem_GSNotifyCS, NotifyParam) == 0x000000, "Member 'BAN_GSTryAttachSceneItem_GSNotifyCS::NotifyParam' has a wrong offset!");

// Function b1-Managed.BAN_GSTryFindSceneItem.bIsNativeBranchingPointCS
// 0x0001 (0x0001 - 0x0000)
struct BAN_GSTryFindSceneItem_bIsNativeBranchingPointCS final
{
public:
	uint8                                         ReturnValue : 1;                                   // 0x0000(0x0001)(BitIndex: 0x00, PropSize: 0x0001 (Parm, OutParm, ReturnParm, NoDestructor, HasGetValueTypeHash))
};
//static_assert(alignof(BAN_GSTryFindSceneItem_bIsNativeBranchingPointCS) == 0x000001, "Wrong alignment on BAN_GSTryFindSceneItem_bIsNativeBranchingPointCS");
//static_assert(sizeof(BAN_GSTryFindSceneItem_bIsNativeBranchingPointCS) == 0x000001, "Wrong size on BAN_GSTryFindSceneItem_bIsNativeBranchingPointCS");

// Function b1-Managed.BAN_GSTryFindSceneItem.GSNotifyCS
// 0x0040 (0x0040 - 0x0000)
struct BAN_GSTryFindSceneItem_GSNotifyCS final
{
public:
	struct FUStGSNotifyParam                      NotifyParam;                                       // 0x0000(0x0040)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
//static_assert(alignof(BAN_GSTryFindSceneItem_GSNotifyCS) == 0x000008, "Wrong alignment on BAN_GSTryFindSceneItem_GSNotifyCS");
//static_assert(sizeof(BAN_GSTryFindSceneItem_GSNotifyCS) == 0x000040, "Wrong size on BAN_GSTryFindSceneItem_GSNotifyCS");
//static_assert(offsetof(BAN_GSTryFindSceneItem_GSNotifyCS, NotifyParam) == 0x000000, "Member 'BAN_GSTryFindSceneItem_GSNotifyCS::NotifyParam' has a wrong offset!");

// Function b1-Managed.BAN_HandleAiConversation.bIsNativeBranchingPointCS
// 0x0001 (0x0001 - 0x0000)
struct BAN_HandleAiConversation_bIsNativeBranchingPointCS final
{
public:
	uint8                                         ReturnValue : 1;                                   // 0x0000(0x0001)(BitIndex: 0x00, PropSize: 0x0001 (Parm, OutParm, ReturnParm, NoDestructor, HasGetValueTypeHash))
};
//static_assert(alignof(BAN_HandleAiConversation_bIsNativeBranchingPointCS) == 0x000001, "Wrong alignment on BAN_HandleAiConversation_bIsNativeBranchingPointCS");
//static_assert(sizeof(BAN_HandleAiConversation_bIsNativeBranchingPointCS) == 0x000001, "Wrong size on BAN_HandleAiConversation_bIsNativeBranchingPointCS");

// Function b1-Managed.BAN_HandleAiConversation.GSNotifyCS
// 0x0040 (0x0040 - 0x0000)
struct BAN_HandleAiConversation_GSNotifyCS final
{
public:
	struct FUStGSNotifyParam                      NotifyParam;                                       // 0x0000(0x0040)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
//static_assert(alignof(BAN_HandleAiConversation_GSNotifyCS) == 0x000008, "Wrong alignment on BAN_HandleAiConversation_GSNotifyCS");
//static_assert(sizeof(BAN_HandleAiConversation_GSNotifyCS) == 0x000040, "Wrong size on BAN_HandleAiConversation_GSNotifyCS");
//static_assert(offsetof(BAN_HandleAiConversation_GSNotifyCS, NotifyParam) == 0x000000, "Member 'BAN_HandleAiConversation_GSNotifyCS::NotifyParam' has a wrong offset!");

// Function b1-Managed.BAN_SkillValidAttackEnded.bIsNativeBranchingPointCS
// 0x0001 (0x0001 - 0x0000)
struct BAN_SkillValidAttackEnded_bIsNativeBranchingPointCS final
{
public:
	uint8                                         ReturnValue : 1;                                   // 0x0000(0x0001)(BitIndex: 0x00, PropSize: 0x0001 (Parm, OutParm, ReturnParm, NoDestructor, HasGetValueTypeHash))
};
//static_assert(alignof(BAN_SkillValidAttackEnded_bIsNativeBranchingPointCS) == 0x000001, "Wrong alignment on BAN_SkillValidAttackEnded_bIsNativeBranchingPointCS");
//static_assert(sizeof(BAN_SkillValidAttackEnded_bIsNativeBranchingPointCS) == 0x000001, "Wrong size on BAN_SkillValidAttackEnded_bIsNativeBranchingPointCS");

// Function b1-Managed.BAN_SkillValidAttackEnded.GSNotifyCS
// 0x0040 (0x0040 - 0x0000)
struct BAN_SkillValidAttackEnded_GSNotifyCS final
{
public:
	struct FUStGSNotifyParam                      NotifyParam;                                       // 0x0000(0x0040)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
//static_assert(alignof(BAN_SkillValidAttackEnded_GSNotifyCS) == 0x000008, "Wrong alignment on BAN_SkillValidAttackEnded_GSNotifyCS");
//static_assert(sizeof(BAN_SkillValidAttackEnded_GSNotifyCS) == 0x000040, "Wrong size on BAN_SkillValidAttackEnded_GSNotifyCS");
//static_assert(offsetof(BAN_SkillValidAttackEnded_GSNotifyCS, NotifyParam) == 0x000000, "Member 'BAN_SkillValidAttackEnded_GSNotifyCS::NotifyParam' has a wrong offset!");

// Function b1-Managed.BUI_DebugDrawRoundRect.SetRefRectPosCenter
// 0x0010 (0x0010 - 0x0000)
struct BUI_DebugDrawRoundRect_SetRefRectPosCenter final
{
public:
	struct FVector2D                              RefPos;                                            // 0x0000(0x0010)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
//static_assert(alignof(BUI_DebugDrawRoundRect_SetRefRectPosCenter) == 0x000008, "Wrong alignment on BUI_DebugDrawRoundRect_SetRefRectPosCenter");
//static_assert(sizeof(BUI_DebugDrawRoundRect_SetRefRectPosCenter) == 0x000010, "Wrong size on BUI_DebugDrawRoundRect_SetRefRectPosCenter");
//static_assert(offsetof(BUI_DebugDrawRoundRect_SetRefRectPosCenter, RefPos) == 0x000000, "Member 'BUI_DebugDrawRoundRect_SetRefRectPosCenter::RefPos' has a wrong offset!");

// Function b1-Managed.BUI_DebugDrawRoundRect.SetRadiusCfg
// 0x0020 (0x0020 - 0x0000)
struct BUI_DebugDrawRoundRect_SetRadiusCfg final
{
public:
	struct FVector4                               InRadiusCfg;                                       // 0x0000(0x0020)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
//static_assert(alignof(BUI_DebugDrawRoundRect_SetRadiusCfg) == 0x000010, "Wrong alignment on BUI_DebugDrawRoundRect_SetRadiusCfg");
//static_assert(sizeof(BUI_DebugDrawRoundRect_SetRadiusCfg) == 0x000020, "Wrong size on BUI_DebugDrawRoundRect_SetRadiusCfg");
//static_assert(offsetof(BUI_DebugDrawRoundRect_SetRadiusCfg, InRadiusCfg) == 0x000000, "Member 'BUI_DebugDrawRoundRect_SetRadiusCfg::InRadiusCfg' has a wrong offset!");

// Function b1-Managed.BAN_SpawnLightningFXActor_MultiSockets.GSNotifyCS
// 0x0040 (0x0040 - 0x0000)
struct BAN_SpawnLightningFXActor_MultiSockets_GSNotifyCS final
{
public:
	struct FUStGSNotifyParam                      NotifyParam;                                       // 0x0000(0x0040)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
//static_assert(alignof(BAN_SpawnLightningFXActor_MultiSockets_GSNotifyCS) == 0x000008, "Wrong alignment on BAN_SpawnLightningFXActor_MultiSockets_GSNotifyCS");
//static_assert(sizeof(BAN_SpawnLightningFXActor_MultiSockets_GSNotifyCS) == 0x000040, "Wrong size on BAN_SpawnLightningFXActor_MultiSockets_GSNotifyCS");
//static_assert(offsetof(BAN_SpawnLightningFXActor_MultiSockets_GSNotifyCS, NotifyParam) == 0x000000, "Member 'BAN_SpawnLightningFXActor_MultiSockets_GSNotifyCS::NotifyParam' has a wrong offset!");

// Function b1-Managed.BAN_TeleportPlayerTo.bIsNativeBranchingPointCS
// 0x0001 (0x0001 - 0x0000)
struct BAN_TeleportPlayerTo_bIsNativeBranchingPointCS final
{
public:
	uint8                                         ReturnValue : 1;                                   // 0x0000(0x0001)(BitIndex: 0x00, PropSize: 0x0001 (Parm, OutParm, ReturnParm, NoDestructor, HasGetValueTypeHash))
};
//static_assert(alignof(BAN_TeleportPlayerTo_bIsNativeBranchingPointCS) == 0x000001, "Wrong alignment on BAN_TeleportPlayerTo_bIsNativeBranchingPointCS");
//static_assert(sizeof(BAN_TeleportPlayerTo_bIsNativeBranchingPointCS) == 0x000001, "Wrong size on BAN_TeleportPlayerTo_bIsNativeBranchingPointCS");

// Function b1-Managed.BAN_TeleportPlayerTo.GSNotifyCS
// 0x0040 (0x0040 - 0x0000)
struct BAN_TeleportPlayerTo_GSNotifyCS final
{
public:
	struct FUStGSNotifyParam                      NotifyParam;                                       // 0x0000(0x0040)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
//static_assert(alignof(BAN_TeleportPlayerTo_GSNotifyCS) == 0x000008, "Wrong alignment on BAN_TeleportPlayerTo_GSNotifyCS");
//static_assert(sizeof(BAN_TeleportPlayerTo_GSNotifyCS) == 0x000040, "Wrong size on BAN_TeleportPlayerTo_GSNotifyCS");
//static_assert(offsetof(BAN_TeleportPlayerTo_GSNotifyCS, NotifyParam) == 0x000000, "Member 'BAN_TeleportPlayerTo_GSNotifyCS::NotifyParam' has a wrong offset!");

// Function b1-Managed.BANS_GSAttackWarnning.GSNotifyBeginCS
// 0x0048 (0x0048 - 0x0000)
struct BANS_GSAttackWarnning_GSNotifyBeginCS final
{
public:
	struct FUStGSNotifyParam                      NotifyParam;                                       // 0x0000(0x0040)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
	float                                         TotalDuration;                                     // 0x0040(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
//static_assert(alignof(BANS_GSAttackWarnning_GSNotifyBeginCS) == 0x000008, "Wrong alignment on BANS_GSAttackWarnning_GSNotifyBeginCS");
//static_assert(sizeof(BANS_GSAttackWarnning_GSNotifyBeginCS) == 0x000048, "Wrong size on BANS_GSAttackWarnning_GSNotifyBeginCS");
//static_assert(offsetof(BANS_GSAttackWarnning_GSNotifyBeginCS, NotifyParam) == 0x000000, "Member 'BANS_GSAttackWarnning_GSNotifyBeginCS::NotifyParam' has a wrong offset!");
//static_assert(offsetof(BANS_GSAttackWarnning_GSNotifyBeginCS, TotalDuration) == 0x000040, "Member 'BANS_GSAttackWarnning_GSNotifyBeginCS::TotalDuration' has a wrong offset!");

// Function b1-Managed.BANS_GSAttackWarnning.GSNotifyTickCS
// 0x0048 (0x0048 - 0x0000)
struct BANS_GSAttackWarnning_GSNotifyTickCS final
{
public:
	struct FUStGSNotifyParam                      NotifyParam;                                       // 0x0000(0x0040)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
	float                                         FrameDeltaTime;                                    // 0x0040(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
//static_assert(alignof(BANS_GSAttackWarnning_GSNotifyTickCS) == 0x000008, "Wrong alignment on BANS_GSAttackWarnning_GSNotifyTickCS");
//static_assert(sizeof(BANS_GSAttackWarnning_GSNotifyTickCS) == 0x000048, "Wrong size on BANS_GSAttackWarnning_GSNotifyTickCS");
//static_assert(offsetof(BANS_GSAttackWarnning_GSNotifyTickCS, NotifyParam) == 0x000000, "Member 'BANS_GSAttackWarnning_GSNotifyTickCS::NotifyParam' has a wrong offset!");
//static_assert(offsetof(BANS_GSAttackWarnning_GSNotifyTickCS, FrameDeltaTime) == 0x000040, "Member 'BANS_GSAttackWarnning_GSNotifyTickCS::FrameDeltaTime' has a wrong offset!");

// Function b1-Managed.BANS_GSAttackWarnning.GSNotifyEndCS
// 0x0040 (0x0040 - 0x0000)
struct BANS_GSAttackWarnning_GSNotifyEndCS final
{
public:
	struct FUStGSNotifyParam                      NotifyParam;                                       // 0x0000(0x0040)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
//static_assert(alignof(BANS_GSAttackWarnning_GSNotifyEndCS) == 0x000008, "Wrong alignment on BANS_GSAttackWarnning_GSNotifyEndCS");
//static_assert(sizeof(BANS_GSAttackWarnning_GSNotifyEndCS) == 0x000040, "Wrong size on BANS_GSAttackWarnning_GSNotifyEndCS");
//static_assert(offsetof(BANS_GSAttackWarnning_GSNotifyEndCS, NotifyParam) == 0x000000, "Member 'BANS_GSAttackWarnning_GSNotifyEndCS::NotifyParam' has a wrong offset!");

// Function b1-Managed.BED_ProcessStateNode_QueryCompoundCondition.GetNodeDescriptionInCS
// 0x0010 (0x0010 - 0x0000)
struct BED_ProcessStateNode_QueryCompoundCondition_GetNodeDescriptionInCS final
{
public:
	class FString                                 ReturnValue;                                       // 0x0000(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash)
};
//static_assert(alignof(BED_ProcessStateNode_QueryCompoundCondition_GetNodeDescriptionInCS) == 0x000008, "Wrong alignment on BED_ProcessStateNode_QueryCompoundCondition_GetNodeDescriptionInCS");
//static_assert(sizeof(BED_ProcessStateNode_QueryCompoundCondition_GetNodeDescriptionInCS) == 0x000010, "Wrong size on BED_ProcessStateNode_QueryCompoundCondition_GetNodeDescriptionInCS");
//static_assert(offsetof(BED_ProcessStateNode_QueryCompoundCondition_GetNodeDescriptionInCS, ReturnValue) == 0x000000, "Member 'BED_ProcessStateNode_QueryCompoundCondition_GetNodeDescriptionInCS::ReturnValue' has a wrong offset!");

// Function b1-Managed.BGUDestructibleActorBase.ReceiveTick
// 0x0004 (0x0004 - 0x0000)
struct BGUDestructibleActorBase_ReceiveTick final
{
public:
	float                                         DeltaSeconds;                                      // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
//static_assert(alignof(BGUDestructibleActorBase_ReceiveTick) == 0x000004, "Wrong alignment on BGUDestructibleActorBase_ReceiveTick");
//static_assert(sizeof(BGUDestructibleActorBase_ReceiveTick) == 0x000004, "Wrong size on BGUDestructibleActorBase_ReceiveTick");
//static_assert(offsetof(BGUDestructibleActorBase_ReceiveTick, DeltaSeconds) == 0x000000, "Member 'BGUDestructibleActorBase_ReceiveTick::DeltaSeconds' has a wrong offset!");

// Function b1-Managed.BGUDestructibleActorBase.PlayDestructedEffect
// 0x0010 (0x0010 - 0x0000)
struct BGUDestructibleActorBase_PlayDestructedEffect final
{
public:
	float                                         SinkDelay;                                         // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         SinkVelocity;                                      // 0x0004(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class AActor*                                 AtkActor;                                          // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
//static_assert(alignof(BGUDestructibleActorBase_PlayDestructedEffect) == 0x000008, "Wrong alignment on BGUDestructibleActorBase_PlayDestructedEffect");
//static_assert(sizeof(BGUDestructibleActorBase_PlayDestructedEffect) == 0x000010, "Wrong size on BGUDestructibleActorBase_PlayDestructedEffect");
//static_assert(offsetof(BGUDestructibleActorBase_PlayDestructedEffect, SinkDelay) == 0x000000, "Member 'BGUDestructibleActorBase_PlayDestructedEffect::SinkDelay' has a wrong offset!");
//static_assert(offsetof(BGUDestructibleActorBase_PlayDestructedEffect, SinkVelocity) == 0x000004, "Member 'BGUDestructibleActorBase_PlayDestructedEffect::SinkVelocity' has a wrong offset!");
//static_assert(offsetof(BGUDestructibleActorBase_PlayDestructedEffect, AtkActor) == 0x000008, "Member 'BGUDestructibleActorBase_PlayDestructedEffect::AtkActor' has a wrong offset!");

// Function b1-Managed.BED_QuestNode_PlayerCastMagic.GetNodeDescriptionInCS
// 0x0010 (0x0010 - 0x0000)
struct BED_QuestNode_PlayerCastMagic_GetNodeDescriptionInCS final
{
public:
	class FString                                 ReturnValue;                                       // 0x0000(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash)
};
//static_assert(alignof(BED_QuestNode_PlayerCastMagic_GetNodeDescriptionInCS) == 0x000008, "Wrong alignment on BED_QuestNode_PlayerCastMagic_GetNodeDescriptionInCS");
//static_assert(sizeof(BED_QuestNode_PlayerCastMagic_GetNodeDescriptionInCS) == 0x000010, "Wrong size on BED_QuestNode_PlayerCastMagic_GetNodeDescriptionInCS");
//static_assert(offsetof(BED_QuestNode_PlayerCastMagic_GetNodeDescriptionInCS, ReturnValue) == 0x000000, "Member 'BED_QuestNode_PlayerCastMagic_GetNodeDescriptionInCS::ReturnValue' has a wrong offset!");

// Function b1-Managed.BED_QuestNode_PlayerUseItem.GetNodeDescriptionInCS
// 0x0010 (0x0010 - 0x0000)
struct BED_QuestNode_PlayerUseItem_GetNodeDescriptionInCS final
{
public:
	class FString                                 ReturnValue;                                       // 0x0000(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash)
};
//static_assert(alignof(BED_QuestNode_PlayerUseItem_GetNodeDescriptionInCS) == 0x000008, "Wrong alignment on BED_QuestNode_PlayerUseItem_GetNodeDescriptionInCS");
//static_assert(sizeof(BED_QuestNode_PlayerUseItem_GetNodeDescriptionInCS) == 0x000010, "Wrong size on BED_QuestNode_PlayerUseItem_GetNodeDescriptionInCS");
//static_assert(offsetof(BED_QuestNode_PlayerUseItem_GetNodeDescriptionInCS, ReturnValue) == 0x000000, "Member 'BED_QuestNode_PlayerUseItem_GetNodeDescriptionInCS::ReturnValue' has a wrong offset!");

// Function b1-Managed.BGUSeqAKBActor.GetPredicToStateCfgEasingTime
// 0x0010 (0x0010 - 0x0000)
struct BGUSeqAKBActor_GetPredicToStateCfgEasingTime final
{
public:
	class FName                                   TargetState;                                       // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         PredicCfgEasingTime;                               // 0x0008(0x0004)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         PredicCfgDelayEasingTime;                          // 0x000C(0x0004)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
//static_assert(alignof(BGUSeqAKBActor_GetPredicToStateCfgEasingTime) == 0x000004, "Wrong alignment on BGUSeqAKBActor_GetPredicToStateCfgEasingTime");
//static_assert(sizeof(BGUSeqAKBActor_GetPredicToStateCfgEasingTime) == 0x000010, "Wrong size on BGUSeqAKBActor_GetPredicToStateCfgEasingTime");
//static_assert(offsetof(BGUSeqAKBActor_GetPredicToStateCfgEasingTime, TargetState) == 0x000000, "Member 'BGUSeqAKBActor_GetPredicToStateCfgEasingTime::TargetState' has a wrong offset!");
//static_assert(offsetof(BGUSeqAKBActor_GetPredicToStateCfgEasingTime, PredicCfgEasingTime) == 0x000008, "Member 'BGUSeqAKBActor_GetPredicToStateCfgEasingTime::PredicCfgEasingTime' has a wrong offset!");
//static_assert(offsetof(BGUSeqAKBActor_GetPredicToStateCfgEasingTime, PredicCfgDelayEasingTime) == 0x00000C, "Member 'BGUSeqAKBActor_GetPredicToStateCfgEasingTime::PredicCfgDelayEasingTime' has a wrong offset!");

// Function b1-Managed.BGUSeqAKBActor.GSBeforeInitAddBindingActor
// 0x0010 (0x0010 - 0x0000)
struct BGUSeqAKBActor_GSBeforeInitAddBindingActor final
{
public:
	class FName                                   BindingActorTagName;                               // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class AActor*                                 InActor;                                           // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
//static_assert(alignof(BGUSeqAKBActor_GSBeforeInitAddBindingActor) == 0x000008, "Wrong alignment on BGUSeqAKBActor_GSBeforeInitAddBindingActor");
//static_assert(sizeof(BGUSeqAKBActor_GSBeforeInitAddBindingActor) == 0x000010, "Wrong size on BGUSeqAKBActor_GSBeforeInitAddBindingActor");
//static_assert(offsetof(BGUSeqAKBActor_GSBeforeInitAddBindingActor, BindingActorTagName) == 0x000000, "Member 'BGUSeqAKBActor_GSBeforeInitAddBindingActor::BindingActorTagName' has a wrong offset!");
//static_assert(offsetof(BGUSeqAKBActor_GSBeforeInitAddBindingActor, InActor) == 0x000008, "Member 'BGUSeqAKBActor_GSBeforeInitAddBindingActor::InActor' has a wrong offset!");

// Function b1-Managed.BGUSeqAKBActor.OnAKBStateInteruptFunc
// 0x0014 (0x0014 - 0x0000)
struct BGUSeqAKBActor_OnAKBStateInteruptFunc final
{
public:
	class FName                                   BegineState;                                       // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class FName                                   EndState;                                          // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         IsForceImSet : 1;                                  // 0x0010(0x0001)(BitIndex: 0x00, PropSize: 0x0001 (Parm, NoDestructor, HasGetValueTypeHash))
};
//static_assert(alignof(BGUSeqAKBActor_OnAKBStateInteruptFunc) == 0x000004, "Wrong alignment on BGUSeqAKBActor_OnAKBStateInteruptFunc");
//static_assert(sizeof(BGUSeqAKBActor_OnAKBStateInteruptFunc) == 0x000014, "Wrong size on BGUSeqAKBActor_OnAKBStateInteruptFunc");
//static_assert(offsetof(BGUSeqAKBActor_OnAKBStateInteruptFunc, BegineState) == 0x000000, "Member 'BGUSeqAKBActor_OnAKBStateInteruptFunc::BegineState' has a wrong offset!");
//static_assert(offsetof(BGUSeqAKBActor_OnAKBStateInteruptFunc, EndState) == 0x000008, "Member 'BGUSeqAKBActor_OnAKBStateInteruptFunc::EndState' has a wrong offset!");

// Function b1-Managed.BGUSeqAKBActor.WoodTestAnimKeyState
// 0x0028 (0x0028 - 0x0000)
struct BGUSeqAKBActor_WoodTestAnimKeyState final
{
public:
	class FString                                 AnimName;                                          // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash)
	class FString                                 TargetState;                                       // 0x0010(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash)
	float                                         InStateDelayEasingTime;                            // 0x0020(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         IsForce : 1;                                       // 0x0024(0x0001)(BitIndex: 0x00, PropSize: 0x0001 (Parm, NoDestructor, HasGetValueTypeHash))
};
//static_assert(alignof(BGUSeqAKBActor_WoodTestAnimKeyState) == 0x000008, "Wrong alignment on BGUSeqAKBActor_WoodTestAnimKeyState");
//static_assert(sizeof(BGUSeqAKBActor_WoodTestAnimKeyState) == 0x000028, "Wrong size on BGUSeqAKBActor_WoodTestAnimKeyState");
//static_assert(offsetof(BGUSeqAKBActor_WoodTestAnimKeyState, AnimName) == 0x000000, "Member 'BGUSeqAKBActor_WoodTestAnimKeyState::AnimName' has a wrong offset!");
//static_assert(offsetof(BGUSeqAKBActor_WoodTestAnimKeyState, TargetState) == 0x000010, "Member 'BGUSeqAKBActor_WoodTestAnimKeyState::TargetState' has a wrong offset!");
//static_assert(offsetof(BGUSeqAKBActor_WoodTestAnimKeyState, InStateDelayEasingTime) == 0x000020, "Member 'BGUSeqAKBActor_WoodTestAnimKeyState::InStateDelayEasingTime' has a wrong offset!");

// Function b1-Managed.BGUSeqAKBActor.OnAKBStateBeginFunc
// 0x0014 (0x0014 - 0x0000)
struct BGUSeqAKBActor_OnAKBStateBeginFunc final
{
public:
	class FName                                   BegineState;                                       // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class FName                                   EndState;                                          // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         IsForceImSet : 1;                                  // 0x0010(0x0001)(BitIndex: 0x00, PropSize: 0x0001 (Parm, NoDestructor, HasGetValueTypeHash))
};
//static_assert(alignof(BGUSeqAKBActor_OnAKBStateBeginFunc) == 0x000004, "Wrong alignment on BGUSeqAKBActor_OnAKBStateBeginFunc");
//static_assert(sizeof(BGUSeqAKBActor_OnAKBStateBeginFunc) == 0x000014, "Wrong size on BGUSeqAKBActor_OnAKBStateBeginFunc");
//static_assert(offsetof(BGUSeqAKBActor_OnAKBStateBeginFunc, BegineState) == 0x000000, "Member 'BGUSeqAKBActor_OnAKBStateBeginFunc::BegineState' has a wrong offset!");
//static_assert(offsetof(BGUSeqAKBActor_OnAKBStateBeginFunc, EndState) == 0x000008, "Member 'BGUSeqAKBActor_OnAKBStateBeginFunc::EndState' has a wrong offset!");

// Function b1-Managed.BGUSeqAKBActor.OnAKBStateEndFunc
// 0x0014 (0x0014 - 0x0000)
struct BGUSeqAKBActor_OnAKBStateEndFunc final
{
public:
	class FName                                   BegineState;                                       // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class FName                                   EndState;                                          // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         IsForceImSet : 1;                                  // 0x0010(0x0001)(BitIndex: 0x00, PropSize: 0x0001 (Parm, NoDestructor, HasGetValueTypeHash))
};
//static_assert(alignof(BGUSeqAKBActor_OnAKBStateEndFunc) == 0x000004, "Wrong alignment on BGUSeqAKBActor_OnAKBStateEndFunc");
//static_assert(sizeof(BGUSeqAKBActor_OnAKBStateEndFunc) == 0x000014, "Wrong size on BGUSeqAKBActor_OnAKBStateEndFunc");
//static_assert(offsetof(BGUSeqAKBActor_OnAKBStateEndFunc, BegineState) == 0x000000, "Member 'BGUSeqAKBActor_OnAKBStateEndFunc::BegineState' has a wrong offset!");
//static_assert(offsetof(BGUSeqAKBActor_OnAKBStateEndFunc, EndState) == 0x000008, "Member 'BGUSeqAKBActor_OnAKBStateEndFunc::EndState' has a wrong offset!");

// Function b1-Managed.BGUSeqAKBActor.ToState
// 0x0010 (0x0010 - 0x0000)
struct BGUSeqAKBActor_ToState final
{
public:
	class FName                                   TargetState;                                       // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         InStateDelayEasingTime;                            // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         InStateOverideEasingTime;                          // 0x000C(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
//static_assert(alignof(BGUSeqAKBActor_ToState) == 0x000004, "Wrong alignment on BGUSeqAKBActor_ToState");
//static_assert(sizeof(BGUSeqAKBActor_ToState) == 0x000010, "Wrong size on BGUSeqAKBActor_ToState");
//static_assert(offsetof(BGUSeqAKBActor_ToState, TargetState) == 0x000000, "Member 'BGUSeqAKBActor_ToState::TargetState' has a wrong offset!");
//static_assert(offsetof(BGUSeqAKBActor_ToState, InStateDelayEasingTime) == 0x000008, "Member 'BGUSeqAKBActor_ToState::InStateDelayEasingTime' has a wrong offset!");
//static_assert(offsetof(BGUSeqAKBActor_ToState, InStateOverideEasingTime) == 0x00000C, "Member 'BGUSeqAKBActor_ToState::InStateOverideEasingTime' has a wrong offset!");

// Function b1-Managed.BGUSeqAKBActor.DoTick
// 0x0004 (0x0004 - 0x0000)
struct BGUSeqAKBActor_DoTick final
{
public:
	float                                         DeltaSeconds;                                      // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
//static_assert(alignof(BGUSeqAKBActor_DoTick) == 0x000004, "Wrong alignment on BGUSeqAKBActor_DoTick");
//static_assert(sizeof(BGUSeqAKBActor_DoTick) == 0x000004, "Wrong size on BGUSeqAKBActor_DoTick");
//static_assert(offsetof(BGUSeqAKBActor_DoTick, DeltaSeconds) == 0x000000, "Member 'BGUSeqAKBActor_DoTick::DeltaSeconds' has a wrong offset!");

// Function b1-Managed.BGUEquipPreviewActorBase.OnConstructionCS
// 0x0060 (0x0060 - 0x0000)
struct BGUEquipPreviewActorBase_OnConstructionCS final
{
public:
	struct FTransform                             Transform;                                         // 0x0000(0x0060)(ConstParm, Parm, OutParm, ReferenceParm, IsPlainOldData, NoDestructor)
};
//static_assert(alignof(BGUEquipPreviewActorBase_OnConstructionCS) == 0x000010, "Wrong alignment on BGUEquipPreviewActorBase_OnConstructionCS");
//static_assert(sizeof(BGUEquipPreviewActorBase_OnConstructionCS) == 0x000060, "Wrong size on BGUEquipPreviewActorBase_OnConstructionCS");
//static_assert(offsetof(BGUEquipPreviewActorBase_OnConstructionCS, Transform) == 0x000000, "Member 'BGUEquipPreviewActorBase_OnConstructionCS::Transform' has a wrong offset!");

// Function b1-Managed.BGUTransPreviewActorBase.OnConstructionCS
// 0x0060 (0x0060 - 0x0000)
struct BGUTransPreviewActorBase_OnConstructionCS final
{
public:
	struct FTransform                             Transform;                                         // 0x0000(0x0060)(ConstParm, Parm, OutParm, ReferenceParm, IsPlainOldData, NoDestructor)
};
//static_assert(alignof(BGUTransPreviewActorBase_OnConstructionCS) == 0x000010, "Wrong alignment on BGUTransPreviewActorBase_OnConstructionCS");
//static_assert(sizeof(BGUTransPreviewActorBase_OnConstructionCS) == 0x000060, "Wrong size on BGUTransPreviewActorBase_OnConstructionCS");
//static_assert(offsetof(BGUTransPreviewActorBase_OnConstructionCS, Transform) == 0x000000, "Member 'BGUTransPreviewActorBase_OnConstructionCS::Transform' has a wrong offset!");

// Function b1-Managed.BGUBoundCircleComp.TickComponentGS
// 0x0004 (0x0004 - 0x0000)
struct BGUBoundCircleComp_TickComponentGS final
{
public:
	float                                         DeltaTime;                                         // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
//static_assert(alignof(BGUBoundCircleComp_TickComponentGS) == 0x000004, "Wrong alignment on BGUBoundCircleComp_TickComponentGS");
//static_assert(sizeof(BGUBoundCircleComp_TickComponentGS) == 0x000004, "Wrong size on BGUBoundCircleComp_TickComponentGS");
//static_assert(offsetof(BGUBoundCircleComp_TickComponentGS, DeltaTime) == 0x000000, "Member 'BGUBoundCircleComp_TickComponentGS::DeltaTime' has a wrong offset!");

// Function b1-Managed.BGUBoundCircleComp.SetGSEnabled
// 0x0001 (0x0001 - 0x0000)
struct BGUBoundCircleComp_SetGSEnabled final
{
public:
	uint8                                         IsEnabled : 1;                                     // 0x0000(0x0001)(BitIndex: 0x00, PropSize: 0x0001 (Parm, NoDestructor, HasGetValueTypeHash))
};
//static_assert(alignof(BGUBoundCircleComp_SetGSEnabled) == 0x000001, "Wrong alignment on BGUBoundCircleComp_SetGSEnabled");
//static_assert(sizeof(BGUBoundCircleComp_SetGSEnabled) == 0x000001, "Wrong size on BGUBoundCircleComp_SetGSEnabled");

// Function b1-Managed.BGUBoundCircleComp.AddDragVec
// 0x0020 (0x0020 - 0x0000)
struct BGUBoundCircleComp_AddDragVec final
{
public:
	struct FVector                                DragVectorInWorld;                                 // 0x0000(0x0018)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         DragFactor;                                        // 0x0018(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
//static_assert(alignof(BGUBoundCircleComp_AddDragVec) == 0x000008, "Wrong alignment on BGUBoundCircleComp_AddDragVec");
//static_assert(sizeof(BGUBoundCircleComp_AddDragVec) == 0x000020, "Wrong size on BGUBoundCircleComp_AddDragVec");
//static_assert(offsetof(BGUBoundCircleComp_AddDragVec, DragVectorInWorld) == 0x000000, "Member 'BGUBoundCircleComp_AddDragVec::DragVectorInWorld' has a wrong offset!");
//static_assert(offsetof(BGUBoundCircleComp_AddDragVec, DragFactor) == 0x000018, "Member 'BGUBoundCircleComp_AddDragVec::DragFactor' has a wrong offset!");

// Function b1-Managed.BUS_LeavesSkillManageComp.TickComponentInCS
// 0x0004 (0x0004 - 0x0000)
struct BUS_LeavesSkillManageComp_TickComponentInCS final
{
public:
	float                                         DeltaTime;                                         // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
//static_assert(alignof(BUS_LeavesSkillManageComp_TickComponentInCS) == 0x000004, "Wrong alignment on BUS_LeavesSkillManageComp_TickComponentInCS");
//static_assert(sizeof(BUS_LeavesSkillManageComp_TickComponentInCS) == 0x000004, "Wrong size on BUS_LeavesSkillManageComp_TickComponentInCS");
//static_assert(offsetof(BUS_LeavesSkillManageComp_TickComponentInCS, DeltaTime) == 0x000000, "Member 'BUS_LeavesSkillManageComp_TickComponentInCS::DeltaTime' has a wrong offset!");

// Function b1-Managed.BUS_LeavesSkillManageComp.EndPlayInCS
// 0x0001 (0x0001 - 0x0000)
struct BUS_LeavesSkillManageComp_EndPlayInCS final
{
public:
	EEndPlayReason                                EndPlayReason;                                     // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
//static_assert(alignof(BUS_LeavesSkillManageComp_EndPlayInCS) == 0x000001, "Wrong alignment on BUS_LeavesSkillManageComp_EndPlayInCS");
//static_assert(sizeof(BUS_LeavesSkillManageComp_EndPlayInCS) == 0x000001, "Wrong size on BUS_LeavesSkillManageComp_EndPlayInCS");
//static_assert(offsetof(BUS_LeavesSkillManageComp_EndPlayInCS, EndPlayReason) == 0x000000, "Member 'BUS_LeavesSkillManageComp_EndPlayInCS::EndPlayReason' has a wrong offset!");

// Function b1-Managed.BGUFunctionLibraryManaged.FixFontForPIEPreviewInEditorDebug
// 0x0008 (0x0008 - 0x0000)
struct BGUFunctionLibraryManaged_FixFontForPIEPreviewInEditorDebug final
{
public:
	class UUserWidget*                            TargetWidget;                                      // 0x0000(0x0008)(ExportObject, Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
//static_assert(alignof(BGUFunctionLibraryManaged_FixFontForPIEPreviewInEditorDebug) == 0x000008, "Wrong alignment on BGUFunctionLibraryManaged_FixFontForPIEPreviewInEditorDebug");
//static_assert(sizeof(BGUFunctionLibraryManaged_FixFontForPIEPreviewInEditorDebug) == 0x000008, "Wrong size on BGUFunctionLibraryManaged_FixFontForPIEPreviewInEditorDebug");
//static_assert(offsetof(BGUFunctionLibraryManaged_FixFontForPIEPreviewInEditorDebug, TargetWidget) == 0x000000, "Member 'BGUFunctionLibraryManaged_FixFontForPIEPreviewInEditorDebug::TargetWidget' has a wrong offset!");

// Function b1-Managed.BGUFunctionLibraryManaged.BatchReplaceMapSpawnerWithTamer
// 0x0008 (0x0008 - 0x0000)
struct BGUFunctionLibraryManaged_BatchReplaceMapSpawnerWithTamer final
{
public:
	class UObject*                                WorldContext;                                      // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
//static_assert(alignof(BGUFunctionLibraryManaged_BatchReplaceMapSpawnerWithTamer) == 0x000008, "Wrong alignment on BGUFunctionLibraryManaged_BatchReplaceMapSpawnerWithTamer");
//static_assert(sizeof(BGUFunctionLibraryManaged_BatchReplaceMapSpawnerWithTamer) == 0x000008, "Wrong size on BGUFunctionLibraryManaged_BatchReplaceMapSpawnerWithTamer");
//static_assert(offsetof(BGUFunctionLibraryManaged_BatchReplaceMapSpawnerWithTamer, WorldContext) == 0x000000, "Member 'BGUFunctionLibraryManaged_BatchReplaceMapSpawnerWithTamer::WorldContext' has a wrong offset!");

// Function b1-Managed.BGUFunctionLibraryManaged.IsContainNonexistentTaskStage
// 0x0010 (0x0010 - 0x0000)
struct BGUFunctionLibraryManaged_IsContainNonexistentTaskStage final
{
public:
	class UBED_CalliopeAssetBase*                 InAsset;                                           // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         ReturnValue : 1;                                   // 0x0008(0x0001)(BitIndex: 0x00, PropSize: 0x0001 (Parm, OutParm, ReturnParm, NoDestructor, HasGetValueTypeHash))
};
//static_assert(alignof(BGUFunctionLibraryManaged_IsContainNonexistentTaskStage) == 0x000008, "Wrong alignment on BGUFunctionLibraryManaged_IsContainNonexistentTaskStage");
//static_assert(sizeof(BGUFunctionLibraryManaged_IsContainNonexistentTaskStage) == 0x000010, "Wrong size on BGUFunctionLibraryManaged_IsContainNonexistentTaskStage");
//static_assert(offsetof(BGUFunctionLibraryManaged_IsContainNonexistentTaskStage, InAsset) == 0x000000, "Member 'BGUFunctionLibraryManaged_IsContainNonexistentTaskStage::InAsset' has a wrong offset!");

// Function b1-Managed.BGUFunctionLibraryManaged.SetShaderPipelineCacheEnabled
// 0x0018 (0x0018 - 0x0000)
struct BGUFunctionLibraryManaged_SetShaderPipelineCacheEnabled final
{
public:
	class UObject*                                WorldContext;                                      // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         IsEnable : 1;                                      // 0x0008(0x0001)(BitIndex: 0x00, PropSize: 0x0001 (Parm, NoDestructor, HasGetValueTypeHash))
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class APlayerController*                      TargetPlayerController;                            // 0x0010(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
//static_assert(alignof(BGUFunctionLibraryManaged_SetShaderPipelineCacheEnabled) == 0x000008, "Wrong alignment on BGUFunctionLibraryManaged_SetShaderPipelineCacheEnabled");
//static_assert(sizeof(BGUFunctionLibraryManaged_SetShaderPipelineCacheEnabled) == 0x000018, "Wrong size on BGUFunctionLibraryManaged_SetShaderPipelineCacheEnabled");
//static_assert(offsetof(BGUFunctionLibraryManaged_SetShaderPipelineCacheEnabled, WorldContext) == 0x000000, "Member 'BGUFunctionLibraryManaged_SetShaderPipelineCacheEnabled::WorldContext' has a wrong offset!");
//static_assert(offsetof(BGUFunctionLibraryManaged_SetShaderPipelineCacheEnabled, TargetPlayerController) == 0x000010, "Member 'BGUFunctionLibraryManaged_SetShaderPipelineCacheEnabled::TargetPlayerController' has a wrong offset!");

// Function b1-Managed.BGUFunctionLibraryManaged.AutoGenTamerFromUnitBlueprint
// 0x0020 (0x0020 - 0x0000)
struct BGUFunctionLibraryManaged_AutoGenTamerFromUnitBlueprint final
{
public:
	class UObject*                                WorldContext;                                      // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class FString                                 Folder;                                            // 0x0008(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash)
	uint8                                         bRecursive : 1;                                    // 0x0018(0x0001)(BitIndex: 0x00, PropSize: 0x0001 (Parm, NoDestructor, HasGetValueTypeHash))
};
//static_assert(alignof(BGUFunctionLibraryManaged_AutoGenTamerFromUnitBlueprint) == 0x000008, "Wrong alignment on BGUFunctionLibraryManaged_AutoGenTamerFromUnitBlueprint");
//static_assert(sizeof(BGUFunctionLibraryManaged_AutoGenTamerFromUnitBlueprint) == 0x000020, "Wrong size on BGUFunctionLibraryManaged_AutoGenTamerFromUnitBlueprint");
//static_assert(offsetof(BGUFunctionLibraryManaged_AutoGenTamerFromUnitBlueprint, WorldContext) == 0x000000, "Member 'BGUFunctionLibraryManaged_AutoGenTamerFromUnitBlueprint::WorldContext' has a wrong offset!");
//static_assert(offsetof(BGUFunctionLibraryManaged_AutoGenTamerFromUnitBlueprint, Folder) == 0x000008, "Member 'BGUFunctionLibraryManaged_AutoGenTamerFromUnitBlueprint::Folder' has a wrong offset!");

// Function b1-Managed.BGUFunctionLibraryManaged.BatchReplaceMapUnitWithTamer
// 0x0008 (0x0008 - 0x0000)
struct BGUFunctionLibraryManaged_BatchReplaceMapUnitWithTamer final
{
public:
	class UObject*                                WorldContext;                                      // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
//static_assert(alignof(BGUFunctionLibraryManaged_BatchReplaceMapUnitWithTamer) == 0x000008, "Wrong alignment on BGUFunctionLibraryManaged_BatchReplaceMapUnitWithTamer");
//static_assert(sizeof(BGUFunctionLibraryManaged_BatchReplaceMapUnitWithTamer) == 0x000008, "Wrong size on BGUFunctionLibraryManaged_BatchReplaceMapUnitWithTamer");
//static_assert(offsetof(BGUFunctionLibraryManaged_BatchReplaceMapUnitWithTamer, WorldContext) == 0x000000, "Member 'BGUFunctionLibraryManaged_BatchReplaceMapUnitWithTamer::WorldContext' has a wrong offset!");

// Function b1-Managed.BGUFunctionLibraryManaged.ConvertToTamerPathFromBPPath
// 0x0028 (0x0028 - 0x0000)
struct BGUFunctionLibraryManaged_ConvertToTamerPathFromBPPath final
{
public:
	class UObject*                                WorldContext;                                      // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class FString                                 BPPath;                                            // 0x0008(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash)
	class FString                                 ReturnValue;                                       // 0x0018(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash)
};
//static_assert(alignof(BGUFunctionLibraryManaged_ConvertToTamerPathFromBPPath) == 0x000008, "Wrong alignment on BGUFunctionLibraryManaged_ConvertToTamerPathFromBPPath");
//static_assert(sizeof(BGUFunctionLibraryManaged_ConvertToTamerPathFromBPPath) == 0x000028, "Wrong size on BGUFunctionLibraryManaged_ConvertToTamerPathFromBPPath");
//static_assert(offsetof(BGUFunctionLibraryManaged_ConvertToTamerPathFromBPPath, WorldContext) == 0x000000, "Member 'BGUFunctionLibraryManaged_ConvertToTamerPathFromBPPath::WorldContext' has a wrong offset!");
//static_assert(offsetof(BGUFunctionLibraryManaged_ConvertToTamerPathFromBPPath, BPPath) == 0x000008, "Member 'BGUFunctionLibraryManaged_ConvertToTamerPathFromBPPath::BPPath' has a wrong offset!");
//static_assert(offsetof(BGUFunctionLibraryManaged_ConvertToTamerPathFromBPPath, ReturnValue) == 0x000018, "Member 'BGUFunctionLibraryManaged_ConvertToTamerPathFromBPPath::ReturnValue' has a wrong offset!");

// Function b1-Managed.BGUFunctionLibraryManaged.UnRegGSGridConScreenAdapter
// 0x0010 (0x0010 - 0x0000)
struct BGUFunctionLibraryManaged_UnRegGSGridConScreenAdapter final
{
public:
	class UObject*                                WorldContext;                                      // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UGSGridConScreenAdapter*                RefGSGridConScreenAdapter;                         // 0x0008(0x0008)(ExportObject, Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
//static_assert(alignof(BGUFunctionLibraryManaged_UnRegGSGridConScreenAdapter) == 0x000008, "Wrong alignment on BGUFunctionLibraryManaged_UnRegGSGridConScreenAdapter");
//static_assert(sizeof(BGUFunctionLibraryManaged_UnRegGSGridConScreenAdapter) == 0x000010, "Wrong size on BGUFunctionLibraryManaged_UnRegGSGridConScreenAdapter");
//static_assert(offsetof(BGUFunctionLibraryManaged_UnRegGSGridConScreenAdapter, WorldContext) == 0x000000, "Member 'BGUFunctionLibraryManaged_UnRegGSGridConScreenAdapter::WorldContext' has a wrong offset!");
//static_assert(offsetof(BGUFunctionLibraryManaged_UnRegGSGridConScreenAdapter, RefGSGridConScreenAdapter) == 0x000008, "Member 'BGUFunctionLibraryManaged_UnRegGSGridConScreenAdapter::RefGSGridConScreenAdapter' has a wrong offset!");

// Function b1-Managed.BGUFunctionLibraryManaged.IsAnyStoryNodeHasGainItem
// 0x0010 (0x0010 - 0x0000)
struct BGUFunctionLibraryManaged_IsAnyStoryNodeHasGainItem final
{
public:
	class UBED_CalliopeAssetBase*                 InAsset;                                           // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         ReturnValue : 1;                                   // 0x0008(0x0001)(BitIndex: 0x00, PropSize: 0x0001 (Parm, OutParm, ReturnParm, NoDestructor, HasGetValueTypeHash))
};
//static_assert(alignof(BGUFunctionLibraryManaged_IsAnyStoryNodeHasGainItem) == 0x000008, "Wrong alignment on BGUFunctionLibraryManaged_IsAnyStoryNodeHasGainItem");
//static_assert(sizeof(BGUFunctionLibraryManaged_IsAnyStoryNodeHasGainItem) == 0x000010, "Wrong size on BGUFunctionLibraryManaged_IsAnyStoryNodeHasGainItem");
//static_assert(offsetof(BGUFunctionLibraryManaged_IsAnyStoryNodeHasGainItem, InAsset) == 0x000000, "Member 'BGUFunctionLibraryManaged_IsAnyStoryNodeHasGainItem::InAsset' has a wrong offset!");

// Function b1-Managed.BGUFunctionLibraryManaged.BGUChangeChapterLightBase
// 0x0010 (0x0010 - 0x0000)
struct BGUFunctionLibraryManaged_BGUChangeChapterLightBase final
{
public:
	class UObject*                                WorldContext;                                      // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         LightBase;                                         // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
//static_assert(alignof(BGUFunctionLibraryManaged_BGUChangeChapterLightBase) == 0x000008, "Wrong alignment on BGUFunctionLibraryManaged_BGUChangeChapterLightBase");
//static_assert(sizeof(BGUFunctionLibraryManaged_BGUChangeChapterLightBase) == 0x000010, "Wrong size on BGUFunctionLibraryManaged_BGUChangeChapterLightBase");
//static_assert(offsetof(BGUFunctionLibraryManaged_BGUChangeChapterLightBase, WorldContext) == 0x000000, "Member 'BGUFunctionLibraryManaged_BGUChangeChapterLightBase::WorldContext' has a wrong offset!");
//static_assert(offsetof(BGUFunctionLibraryManaged_BGUChangeChapterLightBase, LightBase) == 0x000008, "Member 'BGUFunctionLibraryManaged_BGUChangeChapterLightBase::LightBase' has a wrong offset!");

// Function b1-Managed.BGUFunctionLibraryManaged.RegGSGridConScreenAdapter
// 0x0010 (0x0010 - 0x0000)
struct BGUFunctionLibraryManaged_RegGSGridConScreenAdapter final
{
public:
	class UObject*                                WorldContext;                                      // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UGSGridConScreenAdapter*                RefGSGridConScreenAdapter;                         // 0x0008(0x0008)(ExportObject, Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
//static_assert(alignof(BGUFunctionLibraryManaged_RegGSGridConScreenAdapter) == 0x000008, "Wrong alignment on BGUFunctionLibraryManaged_RegGSGridConScreenAdapter");
//static_assert(sizeof(BGUFunctionLibraryManaged_RegGSGridConScreenAdapter) == 0x000010, "Wrong size on BGUFunctionLibraryManaged_RegGSGridConScreenAdapter");
//static_assert(offsetof(BGUFunctionLibraryManaged_RegGSGridConScreenAdapter, WorldContext) == 0x000000, "Member 'BGUFunctionLibraryManaged_RegGSGridConScreenAdapter::WorldContext' has a wrong offset!");
//static_assert(offsetof(BGUFunctionLibraryManaged_RegGSGridConScreenAdapter, RefGSGridConScreenAdapter) == 0x000008, "Member 'BGUFunctionLibraryManaged_RegGSGridConScreenAdapter::RefGSGridConScreenAdapter' has a wrong offset!");

// Function b1-Managed.BGUFunctionLibraryManaged.CreateTamerFromUnitClass
// 0x0028 (0x0028 - 0x0000)
struct BGUFunctionLibraryManaged_CreateTamerFromUnitClass final
{
public:
	class UObject*                                WorldContext;                                      // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UClass*                                 UnitClass;                                         // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UObject*                                TamerObject;                                       // 0x0010(0x0008)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UClass*                                 TamerClass;                                        // 0x0018(0x0008)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         ReturnValue : 1;                                   // 0x0020(0x0001)(BitIndex: 0x00, PropSize: 0x0001 (Parm, OutParm, ReturnParm, NoDestructor, HasGetValueTypeHash))
};
//static_assert(alignof(BGUFunctionLibraryManaged_CreateTamerFromUnitClass) == 0x000008, "Wrong alignment on BGUFunctionLibraryManaged_CreateTamerFromUnitClass");
//static_assert(sizeof(BGUFunctionLibraryManaged_CreateTamerFromUnitClass) == 0x000028, "Wrong size on BGUFunctionLibraryManaged_CreateTamerFromUnitClass");
//static_assert(offsetof(BGUFunctionLibraryManaged_CreateTamerFromUnitClass, WorldContext) == 0x000000, "Member 'BGUFunctionLibraryManaged_CreateTamerFromUnitClass::WorldContext' has a wrong offset!");
//static_assert(offsetof(BGUFunctionLibraryManaged_CreateTamerFromUnitClass, UnitClass) == 0x000008, "Member 'BGUFunctionLibraryManaged_CreateTamerFromUnitClass::UnitClass' has a wrong offset!");
//static_assert(offsetof(BGUFunctionLibraryManaged_CreateTamerFromUnitClass, TamerObject) == 0x000010, "Member 'BGUFunctionLibraryManaged_CreateTamerFromUnitClass::TamerObject' has a wrong offset!");
//static_assert(offsetof(BGUFunctionLibraryManaged_CreateTamerFromUnitClass, TamerClass) == 0x000018, "Member 'BGUFunctionLibraryManaged_CreateTamerFromUnitClass::TamerClass' has a wrong offset!");

// Function b1-Managed.BGUFunctionLibraryManaged.CreateTamerFromBPPath
// 0x0030 (0x0030 - 0x0000)
struct BGUFunctionLibraryManaged_CreateTamerFromBPPath final
{
public:
	class UObject*                                WorldContext;                                      // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class FString                                 BPPath;                                            // 0x0008(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash)
	class UObject*                                TamerObject;                                       // 0x0018(0x0008)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UClass*                                 TamerClass;                                        // 0x0020(0x0008)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         ReturnValue : 1;                                   // 0x0028(0x0001)(BitIndex: 0x00, PropSize: 0x0001 (Parm, OutParm, ReturnParm, NoDestructor, HasGetValueTypeHash))
};
//static_assert(alignof(BGUFunctionLibraryManaged_CreateTamerFromBPPath) == 0x000008, "Wrong alignment on BGUFunctionLibraryManaged_CreateTamerFromBPPath");
//static_assert(sizeof(BGUFunctionLibraryManaged_CreateTamerFromBPPath) == 0x000030, "Wrong size on BGUFunctionLibraryManaged_CreateTamerFromBPPath");
//static_assert(offsetof(BGUFunctionLibraryManaged_CreateTamerFromBPPath, WorldContext) == 0x000000, "Member 'BGUFunctionLibraryManaged_CreateTamerFromBPPath::WorldContext' has a wrong offset!");
//static_assert(offsetof(BGUFunctionLibraryManaged_CreateTamerFromBPPath, BPPath) == 0x000008, "Member 'BGUFunctionLibraryManaged_CreateTamerFromBPPath::BPPath' has a wrong offset!");
//static_assert(offsetof(BGUFunctionLibraryManaged_CreateTamerFromBPPath, TamerObject) == 0x000018, "Member 'BGUFunctionLibraryManaged_CreateTamerFromBPPath::TamerObject' has a wrong offset!");
//static_assert(offsetof(BGUFunctionLibraryManaged_CreateTamerFromBPPath, TamerClass) == 0x000020, "Member 'BGUFunctionLibraryManaged_CreateTamerFromBPPath::TamerClass' has a wrong offset!");

// Function b1-Managed.BGUFunctionLibraryManaged.FixTransactionalTamer
// 0x0008 (0x0008 - 0x0000)
struct BGUFunctionLibraryManaged_FixTransactionalTamer final
{
public:
	class UObject*                                WorldContext;                                      // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
//static_assert(alignof(BGUFunctionLibraryManaged_FixTransactionalTamer) == 0x000008, "Wrong alignment on BGUFunctionLibraryManaged_FixTransactionalTamer");
//static_assert(sizeof(BGUFunctionLibraryManaged_FixTransactionalTamer) == 0x000008, "Wrong size on BGUFunctionLibraryManaged_FixTransactionalTamer");
//static_assert(offsetof(BGUFunctionLibraryManaged_FixTransactionalTamer, WorldContext) == 0x000000, "Member 'BGUFunctionLibraryManaged_FixTransactionalTamer::WorldContext' has a wrong offset!");

// Function b1-Managed.BGUFunctionLibraryManaged.BGUActiveUIBlackOut
// 0x0010 (0x0010 - 0x0000)
struct BGUFunctionLibraryManaged_BGUActiveUIBlackOut final
{
public:
	class UObject*                                WorldContext;                                      // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         IsActive : 1;                                      // 0x0008(0x0001)(BitIndex: 0x00, PropSize: 0x0001 (Parm, NoDestructor, HasGetValueTypeHash))
};
//static_assert(alignof(BGUFunctionLibraryManaged_BGUActiveUIBlackOut) == 0x000008, "Wrong alignment on BGUFunctionLibraryManaged_BGUActiveUIBlackOut");
//static_assert(sizeof(BGUFunctionLibraryManaged_BGUActiveUIBlackOut) == 0x000010, "Wrong size on BGUFunctionLibraryManaged_BGUActiveUIBlackOut");
//static_assert(offsetof(BGUFunctionLibraryManaged_BGUActiveUIBlackOut, WorldContext) == 0x000000, "Member 'BGUFunctionLibraryManaged_BGUActiveUIBlackOut::WorldContext' has a wrong offset!");

// Function b1-Managed.BGUFunctionLibraryManaged.FindAllNodeByClass
// 0x0020 (0x0020 - 0x0000)
struct BGUFunctionLibraryManaged_FindAllNodeByClass final
{
public:
	class UBED_CalliopeAssetBase*                 InAsset;                                           // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UClass*                                 NodeClass;                                         // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	TArray<class UBED_CalliopeNodeBae*>           Nodes;                                             // 0x0010(0x0010)(Parm, OutParm)
};
//static_assert(alignof(BGUFunctionLibraryManaged_FindAllNodeByClass) == 0x000008, "Wrong alignment on BGUFunctionLibraryManaged_FindAllNodeByClass");
//static_assert(sizeof(BGUFunctionLibraryManaged_FindAllNodeByClass) == 0x000020, "Wrong size on BGUFunctionLibraryManaged_FindAllNodeByClass");
//static_assert(offsetof(BGUFunctionLibraryManaged_FindAllNodeByClass, InAsset) == 0x000000, "Member 'BGUFunctionLibraryManaged_FindAllNodeByClass::InAsset' has a wrong offset!");
//static_assert(offsetof(BGUFunctionLibraryManaged_FindAllNodeByClass, NodeClass) == 0x000008, "Member 'BGUFunctionLibraryManaged_FindAllNodeByClass::NodeClass' has a wrong offset!");
//static_assert(offsetof(BGUFunctionLibraryManaged_FindAllNodeByClass, Nodes) == 0x000010, "Member 'BGUFunctionLibraryManaged_FindAllNodeByClass::Nodes' has a wrong offset!");

// Function b1-Managed.BGUFunctionLibraryManaged.BGUSaveTempWidget
// 0x0008 (0x0008 - 0x0000)
struct BGUFunctionLibraryManaged_BGUSaveTempWidget final
{
public:
	class UUserWidget*                            TmpWidget;                                         // 0x0000(0x0008)(ExportObject, Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
//static_assert(alignof(BGUFunctionLibraryManaged_BGUSaveTempWidget) == 0x000008, "Wrong alignment on BGUFunctionLibraryManaged_BGUSaveTempWidget");
//static_assert(sizeof(BGUFunctionLibraryManaged_BGUSaveTempWidget) == 0x000008, "Wrong size on BGUFunctionLibraryManaged_BGUSaveTempWidget");
//static_assert(offsetof(BGUFunctionLibraryManaged_BGUSaveTempWidget, TmpWidget) == 0x000000, "Member 'BGUFunctionLibraryManaged_BGUSaveTempWidget::TmpWidget' has a wrong offset!");

// Function b1-Managed.BGUFunctionLibraryManaged.BGUSetPageActive
// 0x0010 (0x0010 - 0x0000)
struct BGUFunctionLibraryManaged_BGUSetPageActive final
{
public:
	class UObject*                                WorldContext;                                      // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	EUIPageID                                     PageId;                                            // 0x0008(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         IsActive : 1;                                      // 0x0009(0x0001)(BitIndex: 0x00, PropSize: 0x0001 (Parm, NoDestructor, HasGetValueTypeHash))
};
//static_assert(alignof(BGUFunctionLibraryManaged_BGUSetPageActive) == 0x000008, "Wrong alignment on BGUFunctionLibraryManaged_BGUSetPageActive");
//static_assert(sizeof(BGUFunctionLibraryManaged_BGUSetPageActive) == 0x000010, "Wrong size on BGUFunctionLibraryManaged_BGUSetPageActive");
//static_assert(offsetof(BGUFunctionLibraryManaged_BGUSetPageActive, WorldContext) == 0x000000, "Member 'BGUFunctionLibraryManaged_BGUSetPageActive::WorldContext' has a wrong offset!");
//static_assert(offsetof(BGUFunctionLibraryManaged_BGUSetPageActive, PageId) == 0x000008, "Member 'BGUFunctionLibraryManaged_BGUSetPageActive::PageId' has a wrong offset!");

// Function b1-Managed.BGUFunctionLibraryManaged.FindOrLoadClass
// 0x0018 (0x0018 - 0x0000)
struct BGUFunctionLibraryManaged_FindOrLoadClass final
{
public:
	class FString                                 ClassName;                                         // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash)
	class UClass*                                 ReturnValue;                                       // 0x0010(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
//static_assert(alignof(BGUFunctionLibraryManaged_FindOrLoadClass) == 0x000008, "Wrong alignment on BGUFunctionLibraryManaged_FindOrLoadClass");
//static_assert(sizeof(BGUFunctionLibraryManaged_FindOrLoadClass) == 0x000018, "Wrong size on BGUFunctionLibraryManaged_FindOrLoadClass");
//static_assert(offsetof(BGUFunctionLibraryManaged_FindOrLoadClass, ClassName) == 0x000000, "Member 'BGUFunctionLibraryManaged_FindOrLoadClass::ClassName' has a wrong offset!");
//static_assert(offsetof(BGUFunctionLibraryManaged_FindOrLoadClass, ReturnValue) == 0x000010, "Member 'BGUFunctionLibraryManaged_FindOrLoadClass::ReturnValue' has a wrong offset!");

// Function b1-Managed.BGUFunctionLibraryManaged.BGUSwitchPage
// 0x0010 (0x0010 - 0x0000)
struct BGUFunctionLibraryManaged_BGUSwitchPage final
{
public:
	class UObject*                                WorldContext;                                      // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	EUIPageID                                     PageId;                                            // 0x0008(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
//static_assert(alignof(BGUFunctionLibraryManaged_BGUSwitchPage) == 0x000008, "Wrong alignment on BGUFunctionLibraryManaged_BGUSwitchPage");
//static_assert(sizeof(BGUFunctionLibraryManaged_BGUSwitchPage) == 0x000010, "Wrong size on BGUFunctionLibraryManaged_BGUSwitchPage");
//static_assert(offsetof(BGUFunctionLibraryManaged_BGUSwitchPage, WorldContext) == 0x000000, "Member 'BGUFunctionLibraryManaged_BGUSwitchPage::WorldContext' has a wrong offset!");
//static_assert(offsetof(BGUFunctionLibraryManaged_BGUSwitchPage, PageId) == 0x000008, "Member 'BGUFunctionLibraryManaged_BGUSwitchPage::PageId' has a wrong offset!");

// Function b1-Managed.BGUFunctionLibraryManaged.RunScriptGM
// 0x0018 (0x0018 - 0x0000)
struct BGUFunctionLibraryManaged_RunScriptGM final
{
public:
	class FString                                 GMCommand;                                         // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash)
	class UObject*                                WorldContext;                                      // 0x0010(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
//static_assert(alignof(BGUFunctionLibraryManaged_RunScriptGM) == 0x000008, "Wrong alignment on BGUFunctionLibraryManaged_RunScriptGM");
//static_assert(sizeof(BGUFunctionLibraryManaged_RunScriptGM) == 0x000018, "Wrong size on BGUFunctionLibraryManaged_RunScriptGM");
//static_assert(offsetof(BGUFunctionLibraryManaged_RunScriptGM, GMCommand) == 0x000000, "Member 'BGUFunctionLibraryManaged_RunScriptGM::GMCommand' has a wrong offset!");
//static_assert(offsetof(BGUFunctionLibraryManaged_RunScriptGM, WorldContext) == 0x000010, "Member 'BGUFunctionLibraryManaged_RunScriptGM::WorldContext' has a wrong offset!");

// Function b1-Managed.BGW_PlayerController_U3.ProcessPlayerInputCS
// 0x0008 (0x0008 - 0x0000)
struct BGW_PlayerController_U3_ProcessPlayerInputCS final
{
public:
	float                                         DeltaTime;                                         // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         bGamePaused : 1;                                   // 0x0004(0x0001)(BitIndex: 0x00, PropSize: 0x0001 (Parm, NoDestructor, HasGetValueTypeHash))
};
//static_assert(alignof(BGW_PlayerController_U3_ProcessPlayerInputCS) == 0x000004, "Wrong alignment on BGW_PlayerController_U3_ProcessPlayerInputCS");
//static_assert(sizeof(BGW_PlayerController_U3_ProcessPlayerInputCS) == 0x000008, "Wrong size on BGW_PlayerController_U3_ProcessPlayerInputCS");
//static_assert(offsetof(BGW_PlayerController_U3_ProcessPlayerInputCS, DeltaTime) == 0x000000, "Member 'BGW_PlayerController_U3_ProcessPlayerInputCS::DeltaTime' has a wrong offset!");

// Function b1-Managed.BGW_PlayerController_U3.OnAxisMoveSidewaysGamepad
// 0x0004 (0x0004 - 0x0000)
struct BGW_PlayerController_U3_OnAxisMoveSidewaysGamepad final
{
public:
	float                                         AxisValue;                                         // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
//static_assert(alignof(BGW_PlayerController_U3_OnAxisMoveSidewaysGamepad) == 0x000004, "Wrong alignment on BGW_PlayerController_U3_OnAxisMoveSidewaysGamepad");
//static_assert(sizeof(BGW_PlayerController_U3_OnAxisMoveSidewaysGamepad) == 0x000004, "Wrong size on BGW_PlayerController_U3_OnAxisMoveSidewaysGamepad");
//static_assert(offsetof(BGW_PlayerController_U3_OnAxisMoveSidewaysGamepad, AxisValue) == 0x000000, "Member 'BGW_PlayerController_U3_OnAxisMoveSidewaysGamepad::AxisValue' has a wrong offset!");

// Function b1-Managed.BGW_PlayerController_U3.OnAxisMoveForwardGamepad
// 0x0004 (0x0004 - 0x0000)
struct BGW_PlayerController_U3_OnAxisMoveForwardGamepad final
{
public:
	float                                         AxisValue;                                         // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
//static_assert(alignof(BGW_PlayerController_U3_OnAxisMoveForwardGamepad) == 0x000004, "Wrong alignment on BGW_PlayerController_U3_OnAxisMoveForwardGamepad");
//static_assert(sizeof(BGW_PlayerController_U3_OnAxisMoveForwardGamepad) == 0x000004, "Wrong size on BGW_PlayerController_U3_OnAxisMoveForwardGamepad");
//static_assert(offsetof(BGW_PlayerController_U3_OnAxisMoveForwardGamepad, AxisValue) == 0x000000, "Member 'BGW_PlayerController_U3_OnAxisMoveForwardGamepad::AxisValue' has a wrong offset!");

// Function b1-Managed.BGW_PlayerController_U3.OnAxisMoveSideways
// 0x0004 (0x0004 - 0x0000)
struct BGW_PlayerController_U3_OnAxisMoveSideways final
{
public:
	float                                         AxisValue;                                         // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
//static_assert(alignof(BGW_PlayerController_U3_OnAxisMoveSideways) == 0x000004, "Wrong alignment on BGW_PlayerController_U3_OnAxisMoveSideways");
//static_assert(sizeof(BGW_PlayerController_U3_OnAxisMoveSideways) == 0x000004, "Wrong size on BGW_PlayerController_U3_OnAxisMoveSideways");
//static_assert(offsetof(BGW_PlayerController_U3_OnAxisMoveSideways, AxisValue) == 0x000000, "Member 'BGW_PlayerController_U3_OnAxisMoveSideways::AxisValue' has a wrong offset!");

// Function b1-Managed.BGW_PlayerController_U3.OnAxisMoveForward
// 0x0004 (0x0004 - 0x0000)
struct BGW_PlayerController_U3_OnAxisMoveForward final
{
public:
	float                                         AxisValue;                                         // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
//static_assert(alignof(BGW_PlayerController_U3_OnAxisMoveForward) == 0x000004, "Wrong alignment on BGW_PlayerController_U3_OnAxisMoveForward");
//static_assert(sizeof(BGW_PlayerController_U3_OnAxisMoveForward) == 0x000004, "Wrong size on BGW_PlayerController_U3_OnAxisMoveForward");
//static_assert(offsetof(BGW_PlayerController_U3_OnAxisMoveForward, AxisValue) == 0x000000, "Member 'BGW_PlayerController_U3_OnAxisMoveForward::AxisValue' has a wrong offset!");

// Function b1-Managed.BGW_ChapterViewMgrV2.OnAKBStateEndFunc
// 0x0014 (0x0014 - 0x0000)
struct BGW_ChapterViewMgrV2_OnAKBStateEndFunc final
{
public:
	class FName                                   BeginStateName;                                    // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class FName                                   EndStateName;                                      // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         IsForceImSet : 1;                                  // 0x0010(0x0001)(BitIndex: 0x00, PropSize: 0x0001 (Parm, NoDestructor, HasGetValueTypeHash))
};
//static_assert(alignof(BGW_ChapterViewMgrV2_OnAKBStateEndFunc) == 0x000004, "Wrong alignment on BGW_ChapterViewMgrV2_OnAKBStateEndFunc");
//static_assert(sizeof(BGW_ChapterViewMgrV2_OnAKBStateEndFunc) == 0x000014, "Wrong size on BGW_ChapterViewMgrV2_OnAKBStateEndFunc");
//static_assert(offsetof(BGW_ChapterViewMgrV2_OnAKBStateEndFunc, BeginStateName) == 0x000000, "Member 'BGW_ChapterViewMgrV2_OnAKBStateEndFunc::BeginStateName' has a wrong offset!");
//static_assert(offsetof(BGW_ChapterViewMgrV2_OnAKBStateEndFunc, EndStateName) == 0x000008, "Member 'BGW_ChapterViewMgrV2_OnAKBStateEndFunc::EndStateName' has a wrong offset!");

// Function b1-Managed.BGW_ChapterViewMgr.OnAKBStateEndFunc
// 0x0014 (0x0014 - 0x0000)
struct BGW_ChapterViewMgr_OnAKBStateEndFunc final
{
public:
	class FName                                   BeginStateName;                                    // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class FName                                   EndStateName;                                      // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         IsForceImSet : 1;                                  // 0x0010(0x0001)(BitIndex: 0x00, PropSize: 0x0001 (Parm, NoDestructor, HasGetValueTypeHash))
};
//static_assert(alignof(BGW_ChapterViewMgr_OnAKBStateEndFunc) == 0x000004, "Wrong alignment on BGW_ChapterViewMgr_OnAKBStateEndFunc");
//static_assert(sizeof(BGW_ChapterViewMgr_OnAKBStateEndFunc) == 0x000014, "Wrong size on BGW_ChapterViewMgr_OnAKBStateEndFunc");
//static_assert(offsetof(BGW_ChapterViewMgr_OnAKBStateEndFunc, BeginStateName) == 0x000000, "Member 'BGW_ChapterViewMgr_OnAKBStateEndFunc::BeginStateName' has a wrong offset!");
//static_assert(offsetof(BGW_ChapterViewMgr_OnAKBStateEndFunc, EndStateName) == 0x000008, "Member 'BGW_ChapterViewMgr_OnAKBStateEndFunc::EndStateName' has a wrong offset!");

// Function b1-Managed.BED_FSMAsset.GetExtraDefaultOutputNodesInBranchGraph
// 0x0018 (0x0018 - 0x0000)
struct BED_FSMAsset_GetExtraDefaultOutputNodesInBranchGraph final
{
public:
	TArray<class UClass*>                         OutClasses;                                        // 0x0000(0x0010)(Parm, OutParm)
	int32                                         ReturnValue;                                       // 0x0010(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
//static_assert(alignof(BED_FSMAsset_GetExtraDefaultOutputNodesInBranchGraph) == 0x000008, "Wrong alignment on BED_FSMAsset_GetExtraDefaultOutputNodesInBranchGraph");
//static_assert(sizeof(BED_FSMAsset_GetExtraDefaultOutputNodesInBranchGraph) == 0x000018, "Wrong size on BED_FSMAsset_GetExtraDefaultOutputNodesInBranchGraph");
//static_assert(offsetof(BED_FSMAsset_GetExtraDefaultOutputNodesInBranchGraph, OutClasses) == 0x000000, "Member 'BED_FSMAsset_GetExtraDefaultOutputNodesInBranchGraph::OutClasses' has a wrong offset!");
//static_assert(offsetof(BED_FSMAsset_GetExtraDefaultOutputNodesInBranchGraph, ReturnValue) == 0x000010, "Member 'BED_FSMAsset_GetExtraDefaultOutputNodesInBranchGraph::ReturnValue' has a wrong offset!");

// Function b1-Managed.BED_FSMAsset.GetExtraDefaultInputNodesInBranchGraph
// 0x0018 (0x0018 - 0x0000)
struct BED_FSMAsset_GetExtraDefaultInputNodesInBranchGraph final
{
public:
	TArray<class UClass*>                         OutClasses;                                        // 0x0000(0x0010)(Parm, OutParm)
	int32                                         ReturnValue;                                       // 0x0010(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
//static_assert(alignof(BED_FSMAsset_GetExtraDefaultInputNodesInBranchGraph) == 0x000008, "Wrong alignment on BED_FSMAsset_GetExtraDefaultInputNodesInBranchGraph");
//static_assert(sizeof(BED_FSMAsset_GetExtraDefaultInputNodesInBranchGraph) == 0x000018, "Wrong size on BED_FSMAsset_GetExtraDefaultInputNodesInBranchGraph");
//static_assert(offsetof(BED_FSMAsset_GetExtraDefaultInputNodesInBranchGraph, OutClasses) == 0x000000, "Member 'BED_FSMAsset_GetExtraDefaultInputNodesInBranchGraph::OutClasses' has a wrong offset!");
//static_assert(offsetof(BED_FSMAsset_GetExtraDefaultInputNodesInBranchGraph, ReturnValue) == 0x000010, "Member 'BED_FSMAsset_GetExtraDefaultInputNodesInBranchGraph::ReturnValue' has a wrong offset!");

// Function b1-Managed.BED_FSMAsset.GetRerouteNodeClassInBranchGraph
// 0x0008 (0x0008 - 0x0000)
struct BED_FSMAsset_GetRerouteNodeClassInBranchGraph final
{
public:
	class UClass*                                 ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
//static_assert(alignof(BED_FSMAsset_GetRerouteNodeClassInBranchGraph) == 0x000008, "Wrong alignment on BED_FSMAsset_GetRerouteNodeClassInBranchGraph");
//static_assert(sizeof(BED_FSMAsset_GetRerouteNodeClassInBranchGraph) == 0x000008, "Wrong size on BED_FSMAsset_GetRerouteNodeClassInBranchGraph");
//static_assert(offsetof(BED_FSMAsset_GetRerouteNodeClassInBranchGraph, ReturnValue) == 0x000000, "Member 'BED_FSMAsset_GetRerouteNodeClassInBranchGraph::ReturnValue' has a wrong offset!");

// Function b1-Managed.BED_FSMAsset.GetStartNodeClassInBranchGraph
// 0x0008 (0x0008 - 0x0000)
struct BED_FSMAsset_GetStartNodeClassInBranchGraph final
{
public:
	class UClass*                                 ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
//static_assert(alignof(BED_FSMAsset_GetStartNodeClassInBranchGraph) == 0x000008, "Wrong alignment on BED_FSMAsset_GetStartNodeClassInBranchGraph");
//static_assert(sizeof(BED_FSMAsset_GetStartNodeClassInBranchGraph) == 0x000008, "Wrong size on BED_FSMAsset_GetStartNodeClassInBranchGraph");
//static_assert(offsetof(BED_FSMAsset_GetStartNodeClassInBranchGraph, ReturnValue) == 0x000000, "Member 'BED_FSMAsset_GetStartNodeClassInBranchGraph::ReturnValue' has a wrong offset!");

// Function b1-Managed.BED_FSMAsset.GetExtraDefaultOutputNodes
// 0x0018 (0x0018 - 0x0000)
struct BED_FSMAsset_GetExtraDefaultOutputNodes final
{
public:
	TArray<class UClass*>                         OutClasses;                                        // 0x0000(0x0010)(Parm, OutParm)
	int32                                         ReturnValue;                                       // 0x0010(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
//static_assert(alignof(BED_FSMAsset_GetExtraDefaultOutputNodes) == 0x000008, "Wrong alignment on BED_FSMAsset_GetExtraDefaultOutputNodes");
//static_assert(sizeof(BED_FSMAsset_GetExtraDefaultOutputNodes) == 0x000018, "Wrong size on BED_FSMAsset_GetExtraDefaultOutputNodes");
//static_assert(offsetof(BED_FSMAsset_GetExtraDefaultOutputNodes, OutClasses) == 0x000000, "Member 'BED_FSMAsset_GetExtraDefaultOutputNodes::OutClasses' has a wrong offset!");
//static_assert(offsetof(BED_FSMAsset_GetExtraDefaultOutputNodes, ReturnValue) == 0x000010, "Member 'BED_FSMAsset_GetExtraDefaultOutputNodes::ReturnValue' has a wrong offset!");

// Function b1-Managed.BED_FSMAsset.GetExtraDefaultInputNodes
// 0x0018 (0x0018 - 0x0000)
struct BED_FSMAsset_GetExtraDefaultInputNodes final
{
public:
	TArray<class UClass*>                         OutClasses;                                        // 0x0000(0x0010)(Parm, OutParm)
	int32                                         ReturnValue;                                       // 0x0010(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
//static_assert(alignof(BED_FSMAsset_GetExtraDefaultInputNodes) == 0x000008, "Wrong alignment on BED_FSMAsset_GetExtraDefaultInputNodes");
//static_assert(sizeof(BED_FSMAsset_GetExtraDefaultInputNodes) == 0x000018, "Wrong size on BED_FSMAsset_GetExtraDefaultInputNodes");
//static_assert(offsetof(BED_FSMAsset_GetExtraDefaultInputNodes, OutClasses) == 0x000000, "Member 'BED_FSMAsset_GetExtraDefaultInputNodes::OutClasses' has a wrong offset!");
//static_assert(offsetof(BED_FSMAsset_GetExtraDefaultInputNodes, ReturnValue) == 0x000010, "Member 'BED_FSMAsset_GetExtraDefaultInputNodes::ReturnValue' has a wrong offset!");

// Function b1-Managed.BED_FSMAsset.GetRerouteNodeClass
// 0x0008 (0x0008 - 0x0000)
struct BED_FSMAsset_GetRerouteNodeClass final
{
public:
	class UClass*                                 ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
//static_assert(alignof(BED_FSMAsset_GetRerouteNodeClass) == 0x000008, "Wrong alignment on BED_FSMAsset_GetRerouteNodeClass");
//static_assert(sizeof(BED_FSMAsset_GetRerouteNodeClass) == 0x000008, "Wrong size on BED_FSMAsset_GetRerouteNodeClass");
//static_assert(offsetof(BED_FSMAsset_GetRerouteNodeClass, ReturnValue) == 0x000000, "Member 'BED_FSMAsset_GetRerouteNodeClass::ReturnValue' has a wrong offset!");

// Function b1-Managed.BED_FSMAsset.GetStartNodeClass
// 0x0008 (0x0008 - 0x0000)
struct BED_FSMAsset_GetStartNodeClass final
{
public:
	class UClass*                                 ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
//static_assert(alignof(BED_FSMAsset_GetStartNodeClass) == 0x000008, "Wrong alignment on BED_FSMAsset_GetStartNodeClass");
//static_assert(sizeof(BED_FSMAsset_GetStartNodeClass) == 0x000008, "Wrong size on BED_FSMAsset_GetStartNodeClass");
//static_assert(offsetof(BED_FSMAsset_GetStartNodeClass, ReturnValue) == 0x000000, "Member 'BED_FSMAsset_GetStartNodeClass::ReturnValue' has a wrong offset!");

// Function b1-Managed.BED_FSMAsset.GetViewType
// 0x0001 (0x0001 - 0x0000)
struct BED_FSMAsset_GetViewType final
{
public:
	ECalliopeViewType                             ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
//static_assert(alignof(BED_FSMAsset_GetViewType) == 0x000001, "Wrong alignment on BED_FSMAsset_GetViewType");
//static_assert(sizeof(BED_FSMAsset_GetViewType) == 0x000001, "Wrong size on BED_FSMAsset_GetViewType");
//static_assert(offsetof(BED_FSMAsset_GetViewType, ReturnValue) == 0x000000, "Member 'BED_FSMAsset_GetViewType::ReturnValue' has a wrong offset!");

// Function b1-Managed.BED_BehaviorNode_BeKilled.GetNodeDescriptionInCS
// 0x0010 (0x0010 - 0x0000)
struct BED_BehaviorNode_BeKilled_GetNodeDescriptionInCS final
{
public:
	class FString                                 ReturnValue;                                       // 0x0000(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash)
};
//static_assert(alignof(BED_BehaviorNode_BeKilled_GetNodeDescriptionInCS) == 0x000008, "Wrong alignment on BED_BehaviorNode_BeKilled_GetNodeDescriptionInCS");
//static_assert(sizeof(BED_BehaviorNode_BeKilled_GetNodeDescriptionInCS) == 0x000010, "Wrong size on BED_BehaviorNode_BeKilled_GetNodeDescriptionInCS");
//static_assert(offsetof(BED_BehaviorNode_BeKilled_GetNodeDescriptionInCS, ReturnValue) == 0x000000, "Member 'BED_BehaviorNode_BeKilled_GetNodeDescriptionInCS::ReturnValue' has a wrong offset!");

// Function b1-Managed.BED_BehaviorNode_BeKilled.IsSupportViewType
// 0x0002 (0x0002 - 0x0000)
struct BED_BehaviorNode_BeKilled_IsSupportViewType final
{
public:
	ECalliopeViewType                             InViewType;                                        // 0x0000(0x0001)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         ReturnValue : 1;                                   // 0x0001(0x0001)(BitIndex: 0x00, PropSize: 0x0001 (Parm, OutParm, ReturnParm, NoDestructor, HasGetValueTypeHash))
};
//static_assert(alignof(BED_BehaviorNode_BeKilled_IsSupportViewType) == 0x000001, "Wrong alignment on BED_BehaviorNode_BeKilled_IsSupportViewType");
//static_assert(sizeof(BED_BehaviorNode_BeKilled_IsSupportViewType) == 0x000002, "Wrong size on BED_BehaviorNode_BeKilled_IsSupportViewType");
//static_assert(offsetof(BED_BehaviorNode_BeKilled_IsSupportViewType, InViewType) == 0x000000, "Member 'BED_BehaviorNode_BeKilled_IsSupportViewType::InViewType' has a wrong offset!");

// Function b1-Managed.BED_BehaviorNode_GenAndCachePointSet.GetNodeDescriptionInCS
// 0x0010 (0x0010 - 0x0000)
struct BED_BehaviorNode_GenAndCachePointSet_GetNodeDescriptionInCS final
{
public:
	class FString                                 ReturnValue;                                       // 0x0000(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash)
};
//static_assert(alignof(BED_BehaviorNode_GenAndCachePointSet_GetNodeDescriptionInCS) == 0x000008, "Wrong alignment on BED_BehaviorNode_GenAndCachePointSet_GetNodeDescriptionInCS");
//static_assert(sizeof(BED_BehaviorNode_GenAndCachePointSet_GetNodeDescriptionInCS) == 0x000010, "Wrong size on BED_BehaviorNode_GenAndCachePointSet_GetNodeDescriptionInCS");
//static_assert(offsetof(BED_BehaviorNode_GenAndCachePointSet_GetNodeDescriptionInCS, ReturnValue) == 0x000000, "Member 'BED_BehaviorNode_GenAndCachePointSet_GetNodeDescriptionInCS::ReturnValue' has a wrong offset!");

// Function b1-Managed.BED_BehaviorNode_TriggerSkillEffect.GetNodeDescriptionInCS
// 0x0010 (0x0010 - 0x0000)
struct BED_BehaviorNode_TriggerSkillEffect_GetNodeDescriptionInCS final
{
public:
	class FString                                 ReturnValue;                                       // 0x0000(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash)
};
//static_assert(alignof(BED_BehaviorNode_TriggerSkillEffect_GetNodeDescriptionInCS) == 0x000008, "Wrong alignment on BED_BehaviorNode_TriggerSkillEffect_GetNodeDescriptionInCS");
//static_assert(sizeof(BED_BehaviorNode_TriggerSkillEffect_GetNodeDescriptionInCS) == 0x000010, "Wrong size on BED_BehaviorNode_TriggerSkillEffect_GetNodeDescriptionInCS");
//static_assert(offsetof(BED_BehaviorNode_TriggerSkillEffect_GetNodeDescriptionInCS, ReturnValue) == 0x000000, "Member 'BED_BehaviorNode_TriggerSkillEffect_GetNodeDescriptionInCS::ReturnValue' has a wrong offset!");

// Function b1-Managed.BED_MovieNode_LoadOrUnloadStreamingLevel.GetNodeDescriptionInCS
// 0x0010 (0x0010 - 0x0000)
struct BED_MovieNode_LoadOrUnloadStreamingLevel_GetNodeDescriptionInCS final
{
public:
	class FString                                 ReturnValue;                                       // 0x0000(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash)
};
//static_assert(alignof(BED_MovieNode_LoadOrUnloadStreamingLevel_GetNodeDescriptionInCS) == 0x000008, "Wrong alignment on BED_MovieNode_LoadOrUnloadStreamingLevel_GetNodeDescriptionInCS");
//static_assert(sizeof(BED_MovieNode_LoadOrUnloadStreamingLevel_GetNodeDescriptionInCS) == 0x000010, "Wrong size on BED_MovieNode_LoadOrUnloadStreamingLevel_GetNodeDescriptionInCS");
//static_assert(offsetof(BED_MovieNode_LoadOrUnloadStreamingLevel_GetNodeDescriptionInCS, ReturnValue) == 0x000000, "Member 'BED_MovieNode_LoadOrUnloadStreamingLevel_GetNodeDescriptionInCS::ReturnValue' has a wrong offset!");

// Function b1-Managed.BED_MovieNode_PlayFromMarkedFrame.GetNodeDescriptionInCS
// 0x0010 (0x0010 - 0x0000)
struct BED_MovieNode_PlayFromMarkedFrame_GetNodeDescriptionInCS final
{
public:
	class FString                                 ReturnValue;                                       // 0x0000(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash)
};
//static_assert(alignof(BED_MovieNode_PlayFromMarkedFrame_GetNodeDescriptionInCS) == 0x000008, "Wrong alignment on BED_MovieNode_PlayFromMarkedFrame_GetNodeDescriptionInCS");
//static_assert(sizeof(BED_MovieNode_PlayFromMarkedFrame_GetNodeDescriptionInCS) == 0x000010, "Wrong size on BED_MovieNode_PlayFromMarkedFrame_GetNodeDescriptionInCS");
//static_assert(offsetof(BED_MovieNode_PlayFromMarkedFrame_GetNodeDescriptionInCS, ReturnValue) == 0x000000, "Member 'BED_MovieNode_PlayFromMarkedFrame_GetNodeDescriptionInCS::ReturnValue' has a wrong offset!");

// Function b1-Managed.BED_ProcessStateNode_ObserveSequence.GetNodeDescriptionInCS
// 0x0010 (0x0010 - 0x0000)
struct BED_ProcessStateNode_ObserveSequence_GetNodeDescriptionInCS final
{
public:
	class FString                                 ReturnValue;                                       // 0x0000(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash)
};
//static_assert(alignof(BED_ProcessStateNode_ObserveSequence_GetNodeDescriptionInCS) == 0x000008, "Wrong alignment on BED_ProcessStateNode_ObserveSequence_GetNodeDescriptionInCS");
//static_assert(sizeof(BED_ProcessStateNode_ObserveSequence_GetNodeDescriptionInCS) == 0x000010, "Wrong size on BED_ProcessStateNode_ObserveSequence_GetNodeDescriptionInCS");
//static_assert(offsetof(BED_ProcessStateNode_ObserveSequence_GetNodeDescriptionInCS, ReturnValue) == 0x000000, "Member 'BED_ProcessStateNode_ObserveSequence_GetNodeDescriptionInCS::ReturnValue' has a wrong offset!");

// Function b1-Managed.BED_ProcessMachineNode_NPCState.GetBranchGraphToEditInCS
// 0x0018 (0x0018 - 0x0000)
struct BED_ProcessMachineNode_NPCState_GetBranchGraphToEditInCS final
{
public:
	class FString                                 OutBranchGraphIdentifier;                          // 0x0000(0x0010)(Parm, OutParm, ZeroConstructor, HasGetValueTypeHash)
	uint8                                         ReturnValue : 1;                                   // 0x0010(0x0001)(BitIndex: 0x00, PropSize: 0x0001 (Parm, OutParm, ReturnParm, NoDestructor, HasGetValueTypeHash))
};
//static_assert(alignof(BED_ProcessMachineNode_NPCState_GetBranchGraphToEditInCS) == 0x000008, "Wrong alignment on BED_ProcessMachineNode_NPCState_GetBranchGraphToEditInCS");
//static_assert(sizeof(BED_ProcessMachineNode_NPCState_GetBranchGraphToEditInCS) == 0x000018, "Wrong size on BED_ProcessMachineNode_NPCState_GetBranchGraphToEditInCS");
//static_assert(offsetof(BED_ProcessMachineNode_NPCState_GetBranchGraphToEditInCS, OutBranchGraphIdentifier) == 0x000000, "Member 'BED_ProcessMachineNode_NPCState_GetBranchGraphToEditInCS::OutBranchGraphIdentifier' has a wrong offset!");

// Function b1-Managed.BED_ProcessMachineNode_NPCState.GetContextOutputsInCS
// 0x0010 (0x0010 - 0x0000)
struct BED_ProcessMachineNode_NPCState_GetContextOutputsInCS final
{
public:
	TArray<class FName>                           ReturnValue;                                       // 0x0000(0x0010)(Parm, OutParm, ReturnParm)
};
//static_assert(alignof(BED_ProcessMachineNode_NPCState_GetContextOutputsInCS) == 0x000008, "Wrong alignment on BED_ProcessMachineNode_NPCState_GetContextOutputsInCS");
//static_assert(sizeof(BED_ProcessMachineNode_NPCState_GetContextOutputsInCS) == 0x000010, "Wrong size on BED_ProcessMachineNode_NPCState_GetContextOutputsInCS");
//static_assert(offsetof(BED_ProcessMachineNode_NPCState_GetContextOutputsInCS, ReturnValue) == 0x000000, "Member 'BED_ProcessMachineNode_NPCState_GetContextOutputsInCS::ReturnValue' has a wrong offset!");

// Function b1-Managed.BED_ProcessMachineNode_NPCState.PostPropertyChanged
// 0x0020 (0x0020 - 0x0000)
struct BED_ProcessMachineNode_NPCState_PostPropertyChanged final
{
public:
	class FString                                 MemberName;                                        // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash)
	class FString                                 PropertyName;                                      // 0x0010(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash)
};
//static_assert(alignof(BED_ProcessMachineNode_NPCState_PostPropertyChanged) == 0x000008, "Wrong alignment on BED_ProcessMachineNode_NPCState_PostPropertyChanged");
//static_assert(sizeof(BED_ProcessMachineNode_NPCState_PostPropertyChanged) == 0x000020, "Wrong size on BED_ProcessMachineNode_NPCState_PostPropertyChanged");
//static_assert(offsetof(BED_ProcessMachineNode_NPCState_PostPropertyChanged, MemberName) == 0x000000, "Member 'BED_ProcessMachineNode_NPCState_PostPropertyChanged::MemberName' has a wrong offset!");
//static_assert(offsetof(BED_ProcessMachineNode_NPCState_PostPropertyChanged, PropertyName) == 0x000010, "Member 'BED_ProcessMachineNode_NPCState_PostPropertyChanged::PropertyName' has a wrong offset!");

// Function b1-Managed.BED_ProcessMachineNode_NPCState.GetNodeDescriptionInCS
// 0x0010 (0x0010 - 0x0000)
struct BED_ProcessMachineNode_NPCState_GetNodeDescriptionInCS final
{
public:
	class FString                                 ReturnValue;                                       // 0x0000(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash)
};
//static_assert(alignof(BED_ProcessMachineNode_NPCState_GetNodeDescriptionInCS) == 0x000008, "Wrong alignment on BED_ProcessMachineNode_NPCState_GetNodeDescriptionInCS");
//static_assert(sizeof(BED_ProcessMachineNode_NPCState_GetNodeDescriptionInCS) == 0x000010, "Wrong size on BED_ProcessMachineNode_NPCState_GetNodeDescriptionInCS");
//static_assert(offsetof(BED_ProcessMachineNode_NPCState_GetNodeDescriptionInCS, ReturnValue) == 0x000000, "Member 'BED_ProcessMachineNode_NPCState_GetNodeDescriptionInCS::ReturnValue' has a wrong offset!");

// Function b1-Managed.BED_ProcessMachineNode_SaveArchive.GetNodeDescriptionInCS
// 0x0010 (0x0010 - 0x0000)
struct BED_ProcessMachineNode_SaveArchive_GetNodeDescriptionInCS final
{
public:
	class FString                                 ReturnValue;                                       // 0x0000(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash)
};
//static_assert(alignof(BED_ProcessMachineNode_SaveArchive_GetNodeDescriptionInCS) == 0x000008, "Wrong alignment on BED_ProcessMachineNode_SaveArchive_GetNodeDescriptionInCS");
//static_assert(sizeof(BED_ProcessMachineNode_SaveArchive_GetNodeDescriptionInCS) == 0x000010, "Wrong size on BED_ProcessMachineNode_SaveArchive_GetNodeDescriptionInCS");
//static_assert(offsetof(BED_ProcessMachineNode_SaveArchive_GetNodeDescriptionInCS, ReturnValue) == 0x000000, "Member 'BED_ProcessMachineNode_SaveArchive_GetNodeDescriptionInCS::ReturnValue' has a wrong offset!");

// Function b1-Managed.BED_QuestNode_QuitGame.GetNodeDescriptionInCS
// 0x0010 (0x0010 - 0x0000)
struct BED_QuestNode_QuitGame_GetNodeDescriptionInCS final
{
public:
	class FString                                 ReturnValue;                                       // 0x0000(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash)
};
//static_assert(alignof(BED_QuestNode_QuitGame_GetNodeDescriptionInCS) == 0x000008, "Wrong alignment on BED_QuestNode_QuitGame_GetNodeDescriptionInCS");
//static_assert(sizeof(BED_QuestNode_QuitGame_GetNodeDescriptionInCS) == 0x000010, "Wrong size on BED_QuestNode_QuitGame_GetNodeDescriptionInCS");
//static_assert(offsetof(BED_QuestNode_QuitGame_GetNodeDescriptionInCS, ReturnValue) == 0x000000, "Member 'BED_QuestNode_QuitGame_GetNodeDescriptionInCS::ReturnValue' has a wrong offset!");

// Function b1-Managed.BED_QuestNode_PlayerCondition.PostPropertyChanged
// 0x0020 (0x0020 - 0x0000)
struct BED_QuestNode_PlayerCondition_PostPropertyChanged final
{
public:
	class FString                                 MemberName;                                        // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash)
	class FString                                 PropertyName;                                      // 0x0010(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash)
};
//static_assert(alignof(BED_QuestNode_PlayerCondition_PostPropertyChanged) == 0x000008, "Wrong alignment on BED_QuestNode_PlayerCondition_PostPropertyChanged");
//static_assert(sizeof(BED_QuestNode_PlayerCondition_PostPropertyChanged) == 0x000020, "Wrong size on BED_QuestNode_PlayerCondition_PostPropertyChanged");
//static_assert(offsetof(BED_QuestNode_PlayerCondition_PostPropertyChanged, MemberName) == 0x000000, "Member 'BED_QuestNode_PlayerCondition_PostPropertyChanged::MemberName' has a wrong offset!");
//static_assert(offsetof(BED_QuestNode_PlayerCondition_PostPropertyChanged, PropertyName) == 0x000010, "Member 'BED_QuestNode_PlayerCondition_PostPropertyChanged::PropertyName' has a wrong offset!");

// Function b1-Managed.BED_QuestNode_PlayerCondition.GetNodeDescriptionInCS
// 0x0010 (0x0010 - 0x0000)
struct BED_QuestNode_PlayerCondition_GetNodeDescriptionInCS final
{
public:
	class FString                                 ReturnValue;                                       // 0x0000(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash)
};
//static_assert(alignof(BED_QuestNode_PlayerCondition_GetNodeDescriptionInCS) == 0x000008, "Wrong alignment on BED_QuestNode_PlayerCondition_GetNodeDescriptionInCS");
//static_assert(sizeof(BED_QuestNode_PlayerCondition_GetNodeDescriptionInCS) == 0x000010, "Wrong size on BED_QuestNode_PlayerCondition_GetNodeDescriptionInCS");
//static_assert(offsetof(BED_QuestNode_PlayerCondition_GetNodeDescriptionInCS, ReturnValue) == 0x000000, "Member 'BED_QuestNode_PlayerCondition_GetNodeDescriptionInCS::ReturnValue' has a wrong offset!");

// Function b1-Managed.BED_QuestNode_PlayerMoveToTrainDummyTarget.GetNodeDescriptionInCS
// 0x0010 (0x0010 - 0x0000)
struct BED_QuestNode_PlayerMoveToTrainDummyTarget_GetNodeDescriptionInCS final
{
public:
	class FString                                 ReturnValue;                                       // 0x0000(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash)
};
//static_assert(alignof(BED_QuestNode_PlayerMoveToTrainDummyTarget_GetNodeDescriptionInCS) == 0x000008, "Wrong alignment on BED_QuestNode_PlayerMoveToTrainDummyTarget_GetNodeDescriptionInCS");
//static_assert(sizeof(BED_QuestNode_PlayerMoveToTrainDummyTarget_GetNodeDescriptionInCS) == 0x000010, "Wrong size on BED_QuestNode_PlayerMoveToTrainDummyTarget_GetNodeDescriptionInCS");
//static_assert(offsetof(BED_QuestNode_PlayerMoveToTrainDummyTarget_GetNodeDescriptionInCS, ReturnValue) == 0x000000, "Member 'BED_QuestNode_PlayerMoveToTrainDummyTarget_GetNodeDescriptionInCS::ReturnValue' has a wrong offset!");

// Function b1-Managed.BED_QuestNode_PlayerLockTrainDummyTarget.GetNodeDescriptionInCS
// 0x0010 (0x0010 - 0x0000)
struct BED_QuestNode_PlayerLockTrainDummyTarget_GetNodeDescriptionInCS final
{
public:
	class FString                                 ReturnValue;                                       // 0x0000(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash)
};
//static_assert(alignof(BED_QuestNode_PlayerLockTrainDummyTarget_GetNodeDescriptionInCS) == 0x000008, "Wrong alignment on BED_QuestNode_PlayerLockTrainDummyTarget_GetNodeDescriptionInCS");
//static_assert(sizeof(BED_QuestNode_PlayerLockTrainDummyTarget_GetNodeDescriptionInCS) == 0x000010, "Wrong size on BED_QuestNode_PlayerLockTrainDummyTarget_GetNodeDescriptionInCS");
//static_assert(offsetof(BED_QuestNode_PlayerLockTrainDummyTarget_GetNodeDescriptionInCS, ReturnValue) == 0x000000, "Member 'BED_QuestNode_PlayerLockTrainDummyTarget_GetNodeDescriptionInCS::ReturnValue' has a wrong offset!");

// Function b1-Managed.BED_QuestNode_UnitTeleport.GetNodeDescriptionInCS
// 0x0010 (0x0010 - 0x0000)
struct BED_QuestNode_UnitTeleport_GetNodeDescriptionInCS final
{
public:
	class FString                                 ReturnValue;                                       // 0x0000(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash)
};
//static_assert(alignof(BED_QuestNode_UnitTeleport_GetNodeDescriptionInCS) == 0x000008, "Wrong alignment on BED_QuestNode_UnitTeleport_GetNodeDescriptionInCS");
//static_assert(sizeof(BED_QuestNode_UnitTeleport_GetNodeDescriptionInCS) == 0x000010, "Wrong size on BED_QuestNode_UnitTeleport_GetNodeDescriptionInCS");
//static_assert(offsetof(BED_QuestNode_UnitTeleport_GetNodeDescriptionInCS, ReturnValue) == 0x000000, "Member 'BED_QuestNode_UnitTeleport_GetNodeDescriptionInCS::ReturnValue' has a wrong offset!");

// Function b1-Managed.GSUIMiscUtil.GSUpdateABSMatSrcPosSizeForImg
// 0x0008 (0x0008 - 0x0000)
struct GSUIMiscUtil_GSUpdateABSMatSrcPosSizeForImg final
{
public:
	class UImage*                                 RefImage;                                          // 0x0000(0x0008)(ExportObject, Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
//static_assert(alignof(GSUIMiscUtil_GSUpdateABSMatSrcPosSizeForImg) == 0x000008, "Wrong alignment on GSUIMiscUtil_GSUpdateABSMatSrcPosSizeForImg");
//static_assert(sizeof(GSUIMiscUtil_GSUpdateABSMatSrcPosSizeForImg) == 0x000008, "Wrong size on GSUIMiscUtil_GSUpdateABSMatSrcPosSizeForImg");
//static_assert(offsetof(GSUIMiscUtil_GSUpdateABSMatSrcPosSizeForImg, RefImage) == 0x000000, "Member 'GSUIMiscUtil_GSUpdateABSMatSrcPosSizeForImg::RefImage' has a wrong offset!");

// Function b1-Managed.GSUIMiscUtil.GSUpdateABSMatCoverPosForImg
// 0x0018 (0x0018 - 0x0000)
struct GSUIMiscUtil_GSUpdateABSMatCoverPosForImg final
{
public:
	class UImage*                                 RefImage;                                          // 0x0000(0x0008)(ExportObject, Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector2D                              ScreenRefPos;                                      // 0x0008(0x0010)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
//static_assert(alignof(GSUIMiscUtil_GSUpdateABSMatCoverPosForImg) == 0x000008, "Wrong alignment on GSUIMiscUtil_GSUpdateABSMatCoverPosForImg");
//static_assert(sizeof(GSUIMiscUtil_GSUpdateABSMatCoverPosForImg) == 0x000018, "Wrong size on GSUIMiscUtil_GSUpdateABSMatCoverPosForImg");
//static_assert(offsetof(GSUIMiscUtil_GSUpdateABSMatCoverPosForImg, RefImage) == 0x000000, "Member 'GSUIMiscUtil_GSUpdateABSMatCoverPosForImg::RefImage' has a wrong offset!");
//static_assert(offsetof(GSUIMiscUtil_GSUpdateABSMatCoverPosForImg, ScreenRefPos) == 0x000008, "Member 'GSUIMiscUtil_GSUpdateABSMatCoverPosForImg::ScreenRefPos' has a wrong offset!");

// Function b1-Managed.GSUIMiscUtil.GSUpdateABSMatSrcPosSize
// 0x0010 (0x0010 - 0x0000)
struct GSUIMiscUtil_GSUpdateABSMatSrcPosSize final
{
public:
	class UWidget*                                RefWidget;                                         // 0x0000(0x0008)(ExportObject, Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UMaterialInstanceDynamic*               RefABSDynamicInst;                                 // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
//static_assert(alignof(GSUIMiscUtil_GSUpdateABSMatSrcPosSize) == 0x000008, "Wrong alignment on GSUIMiscUtil_GSUpdateABSMatSrcPosSize");
//static_assert(sizeof(GSUIMiscUtil_GSUpdateABSMatSrcPosSize) == 0x000010, "Wrong size on GSUIMiscUtil_GSUpdateABSMatSrcPosSize");
//static_assert(offsetof(GSUIMiscUtil_GSUpdateABSMatSrcPosSize, RefWidget) == 0x000000, "Member 'GSUIMiscUtil_GSUpdateABSMatSrcPosSize::RefWidget' has a wrong offset!");
//static_assert(offsetof(GSUIMiscUtil_GSUpdateABSMatSrcPosSize, RefABSDynamicInst) == 0x000008, "Member 'GSUIMiscUtil_GSUpdateABSMatSrcPosSize::RefABSDynamicInst' has a wrong offset!");

// Function b1-Managed.GSUIMiscUtil.GSUpdateABSMatCoverPos
// 0x0018 (0x0018 - 0x0000)
struct GSUIMiscUtil_GSUpdateABSMatCoverPos final
{
public:
	class UMaterialInstanceDynamic*               RefABSDynamicInst;                                 // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector2D                              ScreenRefPos;                                      // 0x0008(0x0010)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
//static_assert(alignof(GSUIMiscUtil_GSUpdateABSMatCoverPos) == 0x000008, "Wrong alignment on GSUIMiscUtil_GSUpdateABSMatCoverPos");
//static_assert(sizeof(GSUIMiscUtil_GSUpdateABSMatCoverPos) == 0x000018, "Wrong size on GSUIMiscUtil_GSUpdateABSMatCoverPos");
//static_assert(offsetof(GSUIMiscUtil_GSUpdateABSMatCoverPos, RefABSDynamicInst) == 0x000000, "Member 'GSUIMiscUtil_GSUpdateABSMatCoverPos::RefABSDynamicInst' has a wrong offset!");
//static_assert(offsetof(GSUIMiscUtil_GSUpdateABSMatCoverPos, ScreenRefPos) == 0x000008, "Member 'GSUIMiscUtil_GSUpdateABSMatCoverPos::ScreenRefPos' has a wrong offset!");

// Function b1-Managed.UDSSettingFunctionBinder.OnMonitorAsPrimaryChange
// 0x0004 (0x0004 - 0x0000)
struct UDSSettingFunctionBinder_OnMonitorAsPrimaryChange final
{
public:
	int32                                         MonitorIdx;                                        // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
//static_assert(alignof(UDSSettingFunctionBinder_OnMonitorAsPrimaryChange) == 0x000004, "Wrong alignment on UDSSettingFunctionBinder_OnMonitorAsPrimaryChange");
//static_assert(sizeof(UDSSettingFunctionBinder_OnMonitorAsPrimaryChange) == 0x000004, "Wrong size on UDSSettingFunctionBinder_OnMonitorAsPrimaryChange");
//static_assert(offsetof(UDSSettingFunctionBinder_OnMonitorAsPrimaryChange, MonitorIdx) == 0x000000, "Member 'UDSSettingFunctionBinder_OnMonitorAsPrimaryChange::MonitorIdx' has a wrong offset!");

// Function b1-Managed.UDSSettingFunctionBinder.OnViewportResizedEvent
// 0x0008 (0x0008 - 0x0000)
struct UDSSettingFunctionBinder_OnViewportResizedEvent final
{
public:
	struct FIntPoint                              NewSize;                                           // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
//static_assert(alignof(UDSSettingFunctionBinder_OnViewportResizedEvent) == 0x000004, "Wrong alignment on UDSSettingFunctionBinder_OnViewportResizedEvent");
//static_assert(sizeof(UDSSettingFunctionBinder_OnViewportResizedEvent) == 0x000008, "Wrong size on UDSSettingFunctionBinder_OnViewportResizedEvent");
//static_assert(offsetof(UDSSettingFunctionBinder_OnViewportResizedEvent, NewSize) == 0x000000, "Member 'UDSSettingFunctionBinder_OnViewportResizedEvent::NewSize' has a wrong offset!");

// Function b1-Managed.BED_ProcessMachineNode_Idle.GetContextOutputsInCS
// 0x0010 (0x0010 - 0x0000)
struct BED_ProcessMachineNode_Idle_GetContextOutputsInCS final
{
public:
	TArray<class FName>                           ReturnValue;                                       // 0x0000(0x0010)(Parm, OutParm, ReturnParm)
};
//static_assert(alignof(BED_ProcessMachineNode_Idle_GetContextOutputsInCS) == 0x000008, "Wrong alignment on BED_ProcessMachineNode_Idle_GetContextOutputsInCS");
//static_assert(sizeof(BED_ProcessMachineNode_Idle_GetContextOutputsInCS) == 0x000010, "Wrong size on BED_ProcessMachineNode_Idle_GetContextOutputsInCS");
//static_assert(offsetof(BED_ProcessMachineNode_Idle_GetContextOutputsInCS, ReturnValue) == 0x000000, "Member 'BED_ProcessMachineNode_Idle_GetContextOutputsInCS::ReturnValue' has a wrong offset!");

// Function b1-Managed.BED_ProcessMachineNode_Idle.PostPropertyChanged
// 0x0020 (0x0020 - 0x0000)
struct BED_ProcessMachineNode_Idle_PostPropertyChanged final
{
public:
	class FString                                 MemberName;                                        // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash)
	class FString                                 PropertyName;                                      // 0x0010(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash)
};
//static_assert(alignof(BED_ProcessMachineNode_Idle_PostPropertyChanged) == 0x000008, "Wrong alignment on BED_ProcessMachineNode_Idle_PostPropertyChanged");
//static_assert(sizeof(BED_ProcessMachineNode_Idle_PostPropertyChanged) == 0x000020, "Wrong size on BED_ProcessMachineNode_Idle_PostPropertyChanged");
//static_assert(offsetof(BED_ProcessMachineNode_Idle_PostPropertyChanged, MemberName) == 0x000000, "Member 'BED_ProcessMachineNode_Idle_PostPropertyChanged::MemberName' has a wrong offset!");
//static_assert(offsetof(BED_ProcessMachineNode_Idle_PostPropertyChanged, PropertyName) == 0x000010, "Member 'BED_ProcessMachineNode_Idle_PostPropertyChanged::PropertyName' has a wrong offset!");

// Function b1-Managed.GSTileView.OnMouseEnter
// 0x00D0 (0x00D0 - 0x0000)
struct GSTileView_OnMouseEnter final
{
public:
	struct FGeometry                              MyGeometry;                                        // 0x0000(0x0040)(Parm, IsPlainOldData, NoDestructor)
	struct FPointerEvent                          MouseEvent;                                        // 0x0040(0x0090)(ConstParm, Parm, OutParm, ReferenceParm)
};
//static_assert(alignof(GSTileView_OnMouseEnter) == 0x000008, "Wrong alignment on GSTileView_OnMouseEnter");
//static_assert(sizeof(GSTileView_OnMouseEnter) == 0x0000D0, "Wrong size on GSTileView_OnMouseEnter");
//static_assert(offsetof(GSTileView_OnMouseEnter, MyGeometry) == 0x000000, "Member 'GSTileView_OnMouseEnter::MyGeometry' has a wrong offset!");
//static_assert(offsetof(GSTileView_OnMouseEnter, MouseEvent) == 0x000040, "Member 'GSTileView_OnMouseEnter::MouseEvent' has a wrong offset!");

// Function b1-Managed.GSTileView.OnMouseLeave
// 0x0090 (0x0090 - 0x0000)
struct GSTileView_OnMouseLeave final
{
public:
	struct FPointerEvent                          MouseEvent;                                        // 0x0000(0x0090)(ConstParm, Parm, OutParm, ReferenceParm)
};
//static_assert(alignof(GSTileView_OnMouseLeave) == 0x000008, "Wrong alignment on GSTileView_OnMouseLeave");
//static_assert(sizeof(GSTileView_OnMouseLeave) == 0x000090, "Wrong size on GSTileView_OnMouseLeave");
//static_assert(offsetof(GSTileView_OnMouseLeave, MouseEvent) == 0x000000, "Member 'GSTileView_OnMouseLeave::MouseEvent' has a wrong offset!");

// Function b1-Managed.GSTileView.PreConstruct
// 0x0001 (0x0001 - 0x0000)
struct GSTileView_PreConstruct final
{
public:
	uint8                                         IsDesignTime : 1;                                  // 0x0000(0x0001)(BitIndex: 0x00, PropSize: 0x0001 (Parm, NoDestructor, HasGetValueTypeHash))
};
//static_assert(alignof(GSTileView_PreConstruct) == 0x000001, "Wrong alignment on GSTileView_PreConstruct");
//static_assert(sizeof(GSTileView_PreConstruct) == 0x000001, "Wrong size on GSTileView_PreConstruct");

// Function b1-Managed.GSTileViewPanel.OnViewWidgetSizeChangedEvent
// 0x0010 (0x0010 - 0x0000)
struct GSTileViewPanel_OnViewWidgetSizeChangedEvent final
{
public:
	struct FVector2D                              Size;                                              // 0x0000(0x0010)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
//static_assert(alignof(GSTileViewPanel_OnViewWidgetSizeChangedEvent) == 0x000008, "Wrong alignment on GSTileViewPanel_OnViewWidgetSizeChangedEvent");
//static_assert(sizeof(GSTileViewPanel_OnViewWidgetSizeChangedEvent) == 0x000010, "Wrong size on GSTileViewPanel_OnViewWidgetSizeChangedEvent");
//static_assert(offsetof(GSTileViewPanel_OnViewWidgetSizeChangedEvent, Size) == 0x000000, "Member 'GSTileViewPanel_OnViewWidgetSizeChangedEvent::Size' has a wrong offset!");

// Function b1-Managed.GSTileViewPanel.OnEntryWidgetGeneratedEvent
// 0x0008 (0x0008 - 0x0000)
struct GSTileViewPanel_OnEntryWidgetGeneratedEvent final
{
public:
	class UUserWidget*                            Widget;                                            // 0x0000(0x0008)(ExportObject, Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
//static_assert(alignof(GSTileViewPanel_OnEntryWidgetGeneratedEvent) == 0x000008, "Wrong alignment on GSTileViewPanel_OnEntryWidgetGeneratedEvent");
//static_assert(sizeof(GSTileViewPanel_OnEntryWidgetGeneratedEvent) == 0x000008, "Wrong size on GSTileViewPanel_OnEntryWidgetGeneratedEvent");
//static_assert(offsetof(GSTileViewPanel_OnEntryWidgetGeneratedEvent, Widget) == 0x000000, "Member 'GSTileViewPanel_OnEntryWidgetGeneratedEvent::Widget' has a wrong offset!");

// Function b1-Managed.GSTileViewPanel.OnEntryWidgetReleasedEvent
// 0x0008 (0x0008 - 0x0000)
struct GSTileViewPanel_OnEntryWidgetReleasedEvent final
{
public:
	class UUserWidget*                            Widget;                                            // 0x0000(0x0008)(ExportObject, Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
//static_assert(alignof(GSTileViewPanel_OnEntryWidgetReleasedEvent) == 0x000008, "Wrong alignment on GSTileViewPanel_OnEntryWidgetReleasedEvent");
//static_assert(sizeof(GSTileViewPanel_OnEntryWidgetReleasedEvent) == 0x000008, "Wrong size on GSTileViewPanel_OnEntryWidgetReleasedEvent");
//static_assert(offsetof(GSTileViewPanel_OnEntryWidgetReleasedEvent, Widget) == 0x000000, "Member 'GSTileViewPanel_OnEntryWidgetReleasedEvent::Widget' has a wrong offset!");

// Function b1-Managed.GSTileViewPanel.ItemScrolledIntoViewEvent
// 0x0010 (0x0010 - 0x0000)
struct GSTileViewPanel_ItemScrolledIntoViewEvent final
{
public:
	class UObject*                                Item;                                              // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UUserWidget*                            Widget;                                            // 0x0008(0x0008)(ExportObject, Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
//static_assert(alignof(GSTileViewPanel_ItemScrolledIntoViewEvent) == 0x000008, "Wrong alignment on GSTileViewPanel_ItemScrolledIntoViewEvent");
//static_assert(sizeof(GSTileViewPanel_ItemScrolledIntoViewEvent) == 0x000010, "Wrong size on GSTileViewPanel_ItemScrolledIntoViewEvent");
//static_assert(offsetof(GSTileViewPanel_ItemScrolledIntoViewEvent, Item) == 0x000000, "Member 'GSTileViewPanel_ItemScrolledIntoViewEvent::Item' has a wrong offset!");
//static_assert(offsetof(GSTileViewPanel_ItemScrolledIntoViewEvent, Widget) == 0x000008, "Member 'GSTileViewPanel_ItemScrolledIntoViewEvent::Widget' has a wrong offset!");

// Function b1-Managed.GSTileViewPanel.OnEntryInitializedEvent
// 0x0010 (0x0010 - 0x0000)
struct GSTileViewPanel_OnEntryInitializedEvent final
{
public:
	class UObject*                                Item;                                              // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UUserWidget*                            Widget;                                            // 0x0008(0x0008)(ExportObject, Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
//static_assert(alignof(GSTileViewPanel_OnEntryInitializedEvent) == 0x000008, "Wrong alignment on GSTileViewPanel_OnEntryInitializedEvent");
//static_assert(sizeof(GSTileViewPanel_OnEntryInitializedEvent) == 0x000010, "Wrong size on GSTileViewPanel_OnEntryInitializedEvent");
//static_assert(offsetof(GSTileViewPanel_OnEntryInitializedEvent, Item) == 0x000000, "Member 'GSTileViewPanel_OnEntryInitializedEvent::Item' has a wrong offset!");
//static_assert(offsetof(GSTileViewPanel_OnEntryInitializedEvent, Widget) == 0x000008, "Member 'GSTileViewPanel_OnEntryInitializedEvent::Widget' has a wrong offset!");

// Function b1-Managed.BED_CalliopeInteractor.SetCustomOutputNodeEventName
// 0x0018 (0x0018 - 0x0000)
struct BED_CalliopeInteractor_SetCustomOutputNodeEventName final
{
public:
	class UCalliopeNode*                          Node;                                              // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class FName                                   InEventName;                                       // 0x0008(0x0008)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         ReturnValue : 1;                                   // 0x0010(0x0001)(BitIndex: 0x00, PropSize: 0x0001 (Parm, OutParm, ReturnParm, NoDestructor, HasGetValueTypeHash))
};
//static_assert(alignof(BED_CalliopeInteractor_SetCustomOutputNodeEventName) == 0x000008, "Wrong alignment on BED_CalliopeInteractor_SetCustomOutputNodeEventName");
//static_assert(sizeof(BED_CalliopeInteractor_SetCustomOutputNodeEventName) == 0x000018, "Wrong size on BED_CalliopeInteractor_SetCustomOutputNodeEventName");
//static_assert(offsetof(BED_CalliopeInteractor_SetCustomOutputNodeEventName, Node) == 0x000000, "Member 'BED_CalliopeInteractor_SetCustomOutputNodeEventName::Node' has a wrong offset!");
//static_assert(offsetof(BED_CalliopeInteractor_SetCustomOutputNodeEventName, InEventName) == 0x000008, "Member 'BED_CalliopeInteractor_SetCustomOutputNodeEventName::InEventName' has a wrong offset!");

// Function b1-Managed.BED_CalliopeInteractor.SetCustomInputNodeEventName
// 0x0018 (0x0018 - 0x0000)
struct BED_CalliopeInteractor_SetCustomInputNodeEventName final
{
public:
	class UCalliopeNode*                          Node;                                              // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class FName                                   InEventName;                                       // 0x0008(0x0008)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         ReturnValue : 1;                                   // 0x0010(0x0001)(BitIndex: 0x00, PropSize: 0x0001 (Parm, OutParm, ReturnParm, NoDestructor, HasGetValueTypeHash))
};
//static_assert(alignof(BED_CalliopeInteractor_SetCustomInputNodeEventName) == 0x000008, "Wrong alignment on BED_CalliopeInteractor_SetCustomInputNodeEventName");
//static_assert(sizeof(BED_CalliopeInteractor_SetCustomInputNodeEventName) == 0x000018, "Wrong size on BED_CalliopeInteractor_SetCustomInputNodeEventName");
//static_assert(offsetof(BED_CalliopeInteractor_SetCustomInputNodeEventName, Node) == 0x000000, "Member 'BED_CalliopeInteractor_SetCustomInputNodeEventName::Node' has a wrong offset!");
//static_assert(offsetof(BED_CalliopeInteractor_SetCustomInputNodeEventName, InEventName) == 0x000008, "Member 'BED_CalliopeInteractor_SetCustomInputNodeEventName::InEventName' has a wrong offset!");

// Function b1-Managed.BED_CalliopeInteractor.GetExecutionMultiGateNodeClasses
// 0x0018 (0x0018 - 0x0000)
struct BED_CalliopeInteractor_GetExecutionMultiGateNodeClasses final
{
public:
	TArray<class UClass*>                         OutClasses;                                        // 0x0000(0x0010)(Parm, OutParm)
	int32                                         ReturnValue;                                       // 0x0010(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
//static_assert(alignof(BED_CalliopeInteractor_GetExecutionMultiGateNodeClasses) == 0x000008, "Wrong alignment on BED_CalliopeInteractor_GetExecutionMultiGateNodeClasses");
//static_assert(sizeof(BED_CalliopeInteractor_GetExecutionMultiGateNodeClasses) == 0x000018, "Wrong size on BED_CalliopeInteractor_GetExecutionMultiGateNodeClasses");
//static_assert(offsetof(BED_CalliopeInteractor_GetExecutionMultiGateNodeClasses, OutClasses) == 0x000000, "Member 'BED_CalliopeInteractor_GetExecutionMultiGateNodeClasses::OutClasses' has a wrong offset!");
//static_assert(offsetof(BED_CalliopeInteractor_GetExecutionMultiGateNodeClasses, ReturnValue) == 0x000010, "Member 'BED_CalliopeInteractor_GetExecutionMultiGateNodeClasses::ReturnValue' has a wrong offset!");

// Function b1-Managed.BED_CalliopeInteractor.GetExecutionSequenceNodeClasses
// 0x0018 (0x0018 - 0x0000)
struct BED_CalliopeInteractor_GetExecutionSequenceNodeClasses final
{
public:
	TArray<class UClass*>                         OutClasses;                                        // 0x0000(0x0010)(Parm, OutParm)
	int32                                         ReturnValue;                                       // 0x0010(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
//static_assert(alignof(BED_CalliopeInteractor_GetExecutionSequenceNodeClasses) == 0x000008, "Wrong alignment on BED_CalliopeInteractor_GetExecutionSequenceNodeClasses");
//static_assert(sizeof(BED_CalliopeInteractor_GetExecutionSequenceNodeClasses) == 0x000018, "Wrong size on BED_CalliopeInteractor_GetExecutionSequenceNodeClasses");
//static_assert(offsetof(BED_CalliopeInteractor_GetExecutionSequenceNodeClasses, OutClasses) == 0x000000, "Member 'BED_CalliopeInteractor_GetExecutionSequenceNodeClasses::OutClasses' has a wrong offset!");
//static_assert(offsetof(BED_CalliopeInteractor_GetExecutionSequenceNodeClasses, ReturnValue) == 0x000010, "Member 'BED_CalliopeInteractor_GetExecutionSequenceNodeClasses::ReturnValue' has a wrong offset!");

// Function b1-Managed.BED_CalliopeInteractor.GetComponentObserverNodeClasses
// 0x0018 (0x0018 - 0x0000)
struct BED_CalliopeInteractor_GetComponentObserverNodeClasses final
{
public:
	TArray<class UClass*>                         OutClasses;                                        // 0x0000(0x0010)(Parm, OutParm)
	int32                                         ReturnValue;                                       // 0x0010(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
//static_assert(alignof(BED_CalliopeInteractor_GetComponentObserverNodeClasses) == 0x000008, "Wrong alignment on BED_CalliopeInteractor_GetComponentObserverNodeClasses");
//static_assert(sizeof(BED_CalliopeInteractor_GetComponentObserverNodeClasses) == 0x000018, "Wrong size on BED_CalliopeInteractor_GetComponentObserverNodeClasses");
//static_assert(offsetof(BED_CalliopeInteractor_GetComponentObserverNodeClasses, OutClasses) == 0x000000, "Member 'BED_CalliopeInteractor_GetComponentObserverNodeClasses::OutClasses' has a wrong offset!");
//static_assert(offsetof(BED_CalliopeInteractor_GetComponentObserverNodeClasses, ReturnValue) == 0x000010, "Member 'BED_CalliopeInteractor_GetComponentObserverNodeClasses::ReturnValue' has a wrong offset!");

// Function b1-Managed.BED_CalliopeInteractor.GetCustomOutputNodeEventName
// 0x0018 (0x0018 - 0x0000)
struct BED_CalliopeInteractor_GetCustomOutputNodeEventName final
{
public:
	class UCalliopeNode*                          Node;                                              // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class FName                                   OutEventName;                                      // 0x0008(0x0008)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         ReturnValue : 1;                                   // 0x0010(0x0001)(BitIndex: 0x00, PropSize: 0x0001 (Parm, OutParm, ReturnParm, NoDestructor, HasGetValueTypeHash))
};
//static_assert(alignof(BED_CalliopeInteractor_GetCustomOutputNodeEventName) == 0x000008, "Wrong alignment on BED_CalliopeInteractor_GetCustomOutputNodeEventName");
//static_assert(sizeof(BED_CalliopeInteractor_GetCustomOutputNodeEventName) == 0x000018, "Wrong size on BED_CalliopeInteractor_GetCustomOutputNodeEventName");
//static_assert(offsetof(BED_CalliopeInteractor_GetCustomOutputNodeEventName, Node) == 0x000000, "Member 'BED_CalliopeInteractor_GetCustomOutputNodeEventName::Node' has a wrong offset!");
//static_assert(offsetof(BED_CalliopeInteractor_GetCustomOutputNodeEventName, OutEventName) == 0x000008, "Member 'BED_CalliopeInteractor_GetCustomOutputNodeEventName::OutEventName' has a wrong offset!");

// Function b1-Managed.BED_CalliopeInteractor.GetCustomInputNodeEventName
// 0x0018 (0x0018 - 0x0000)
struct BED_CalliopeInteractor_GetCustomInputNodeEventName final
{
public:
	class UCalliopeNode*                          Node;                                              // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class FName                                   OutEventName;                                      // 0x0008(0x0008)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         ReturnValue : 1;                                   // 0x0010(0x0001)(BitIndex: 0x00, PropSize: 0x0001 (Parm, OutParm, ReturnParm, NoDestructor, HasGetValueTypeHash))
};
//static_assert(alignof(BED_CalliopeInteractor_GetCustomInputNodeEventName) == 0x000008, "Wrong alignment on BED_CalliopeInteractor_GetCustomInputNodeEventName");
//static_assert(sizeof(BED_CalliopeInteractor_GetCustomInputNodeEventName) == 0x000018, "Wrong size on BED_CalliopeInteractor_GetCustomInputNodeEventName");
//static_assert(offsetof(BED_CalliopeInteractor_GetCustomInputNodeEventName, Node) == 0x000000, "Member 'BED_CalliopeInteractor_GetCustomInputNodeEventName::Node' has a wrong offset!");
//static_assert(offsetof(BED_CalliopeInteractor_GetCustomInputNodeEventName, OutEventName) == 0x000008, "Member 'BED_CalliopeInteractor_GetCustomInputNodeEventName::OutEventName' has a wrong offset!");

// Function b1-Managed.BED_CalliopeInteractor.GetCustomOutputNodeClasses
// 0x0018 (0x0018 - 0x0000)
struct BED_CalliopeInteractor_GetCustomOutputNodeClasses final
{
public:
	TArray<class UClass*>                         OutClasses;                                        // 0x0000(0x0010)(Parm, OutParm)
	int32                                         ReturnValue;                                       // 0x0010(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
//static_assert(alignof(BED_CalliopeInteractor_GetCustomOutputNodeClasses) == 0x000008, "Wrong alignment on BED_CalliopeInteractor_GetCustomOutputNodeClasses");
//static_assert(sizeof(BED_CalliopeInteractor_GetCustomOutputNodeClasses) == 0x000018, "Wrong size on BED_CalliopeInteractor_GetCustomOutputNodeClasses");
//static_assert(offsetof(BED_CalliopeInteractor_GetCustomOutputNodeClasses, OutClasses) == 0x000000, "Member 'BED_CalliopeInteractor_GetCustomOutputNodeClasses::OutClasses' has a wrong offset!");
//static_assert(offsetof(BED_CalliopeInteractor_GetCustomOutputNodeClasses, ReturnValue) == 0x000010, "Member 'BED_CalliopeInteractor_GetCustomOutputNodeClasses::ReturnValue' has a wrong offset!");

// Function b1-Managed.BED_CalliopeInteractor.GetCustomInputNodeClasses
// 0x0018 (0x0018 - 0x0000)
struct BED_CalliopeInteractor_GetCustomInputNodeClasses final
{
public:
	TArray<class UClass*>                         OutClasses;                                        // 0x0000(0x0010)(Parm, OutParm)
	int32                                         ReturnValue;                                       // 0x0010(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
//static_assert(alignof(BED_CalliopeInteractor_GetCustomInputNodeClasses) == 0x000008, "Wrong alignment on BED_CalliopeInteractor_GetCustomInputNodeClasses");
//static_assert(sizeof(BED_CalliopeInteractor_GetCustomInputNodeClasses) == 0x000018, "Wrong size on BED_CalliopeInteractor_GetCustomInputNodeClasses");
//static_assert(offsetof(BED_CalliopeInteractor_GetCustomInputNodeClasses, OutClasses) == 0x000000, "Member 'BED_CalliopeInteractor_GetCustomInputNodeClasses::OutClasses' has a wrong offset!");
//static_assert(offsetof(BED_CalliopeInteractor_GetCustomInputNodeClasses, ReturnValue) == 0x000010, "Member 'BED_CalliopeInteractor_GetCustomInputNodeClasses::ReturnValue' has a wrong offset!");

// Function b1-Managed.BED_CalliopeInteractor.GetSubGraphNodeClasses
// 0x0018 (0x0018 - 0x0000)
struct BED_CalliopeInteractor_GetSubGraphNodeClasses final
{
public:
	TArray<class UClass*>                         OutClasses;                                        // 0x0000(0x0010)(Parm, OutParm)
	int32                                         ReturnValue;                                       // 0x0010(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
//static_assert(alignof(BED_CalliopeInteractor_GetSubGraphNodeClasses) == 0x000008, "Wrong alignment on BED_CalliopeInteractor_GetSubGraphNodeClasses");
//static_assert(sizeof(BED_CalliopeInteractor_GetSubGraphNodeClasses) == 0x000018, "Wrong size on BED_CalliopeInteractor_GetSubGraphNodeClasses");
//static_assert(offsetof(BED_CalliopeInteractor_GetSubGraphNodeClasses, OutClasses) == 0x000000, "Member 'BED_CalliopeInteractor_GetSubGraphNodeClasses::OutClasses' has a wrong offset!");
//static_assert(offsetof(BED_CalliopeInteractor_GetSubGraphNodeClasses, ReturnValue) == 0x000010, "Member 'BED_CalliopeInteractor_GetSubGraphNodeClasses::ReturnValue' has a wrong offset!");

// Function b1-Managed.BED_CalliopeInteractor.GetRerouteNodeClasses
// 0x0018 (0x0018 - 0x0000)
struct BED_CalliopeInteractor_GetRerouteNodeClasses final
{
public:
	TArray<class UClass*>                         OutClasses;                                        // 0x0000(0x0010)(Parm, OutParm)
	int32                                         ReturnValue;                                       // 0x0010(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
//static_assert(alignof(BED_CalliopeInteractor_GetRerouteNodeClasses) == 0x000008, "Wrong alignment on BED_CalliopeInteractor_GetRerouteNodeClasses");
//static_assert(sizeof(BED_CalliopeInteractor_GetRerouteNodeClasses) == 0x000018, "Wrong size on BED_CalliopeInteractor_GetRerouteNodeClasses");
//static_assert(offsetof(BED_CalliopeInteractor_GetRerouteNodeClasses, OutClasses) == 0x000000, "Member 'BED_CalliopeInteractor_GetRerouteNodeClasses::OutClasses' has a wrong offset!");
//static_assert(offsetof(BED_CalliopeInteractor_GetRerouteNodeClasses, ReturnValue) == 0x000010, "Member 'BED_CalliopeInteractor_GetRerouteNodeClasses::ReturnValue' has a wrong offset!");

// Function b1-Managed.BED_CalliopeInteractor.GetFinishNodeClasses
// 0x0018 (0x0018 - 0x0000)
struct BED_CalliopeInteractor_GetFinishNodeClasses final
{
public:
	TArray<class UClass*>                         OutClasses;                                        // 0x0000(0x0010)(Parm, OutParm)
	int32                                         ReturnValue;                                       // 0x0010(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
//static_assert(alignof(BED_CalliopeInteractor_GetFinishNodeClasses) == 0x000008, "Wrong alignment on BED_CalliopeInteractor_GetFinishNodeClasses");
//static_assert(sizeof(BED_CalliopeInteractor_GetFinishNodeClasses) == 0x000018, "Wrong size on BED_CalliopeInteractor_GetFinishNodeClasses");
//static_assert(offsetof(BED_CalliopeInteractor_GetFinishNodeClasses, OutClasses) == 0x000000, "Member 'BED_CalliopeInteractor_GetFinishNodeClasses::OutClasses' has a wrong offset!");
//static_assert(offsetof(BED_CalliopeInteractor_GetFinishNodeClasses, ReturnValue) == 0x000010, "Member 'BED_CalliopeInteractor_GetFinishNodeClasses::ReturnValue' has a wrong offset!");

// Function b1-Managed.BED_CalliopeInteractor.GetStartNodeClasses
// 0x0018 (0x0018 - 0x0000)
struct BED_CalliopeInteractor_GetStartNodeClasses final
{
public:
	TArray<class UClass*>                         OutClasses;                                        // 0x0000(0x0010)(Parm, OutParm)
	int32                                         ReturnValue;                                       // 0x0010(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
//static_assert(alignof(BED_CalliopeInteractor_GetStartNodeClasses) == 0x000008, "Wrong alignment on BED_CalliopeInteractor_GetStartNodeClasses");
//static_assert(sizeof(BED_CalliopeInteractor_GetStartNodeClasses) == 0x000018, "Wrong size on BED_CalliopeInteractor_GetStartNodeClasses");
//static_assert(offsetof(BED_CalliopeInteractor_GetStartNodeClasses, OutClasses) == 0x000000, "Member 'BED_CalliopeInteractor_GetStartNodeClasses::OutClasses' has a wrong offset!");
//static_assert(offsetof(BED_CalliopeInteractor_GetStartNodeClasses, ReturnValue) == 0x000010, "Member 'BED_CalliopeInteractor_GetStartNodeClasses::ReturnValue' has a wrong offset!");

// Function b1-Managed.BED_BehaviorAsset.GetExtraDefaultOutputNodesInBranchGraph
// 0x0018 (0x0018 - 0x0000)
struct BED_BehaviorAsset_GetExtraDefaultOutputNodesInBranchGraph final
{
public:
	TArray<class UClass*>                         OutClasses;                                        // 0x0000(0x0010)(Parm, OutParm)
	int32                                         ReturnValue;                                       // 0x0010(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
//static_assert(alignof(BED_BehaviorAsset_GetExtraDefaultOutputNodesInBranchGraph) == 0x000008, "Wrong alignment on BED_BehaviorAsset_GetExtraDefaultOutputNodesInBranchGraph");
//static_assert(sizeof(BED_BehaviorAsset_GetExtraDefaultOutputNodesInBranchGraph) == 0x000018, "Wrong size on BED_BehaviorAsset_GetExtraDefaultOutputNodesInBranchGraph");
//static_assert(offsetof(BED_BehaviorAsset_GetExtraDefaultOutputNodesInBranchGraph, OutClasses) == 0x000000, "Member 'BED_BehaviorAsset_GetExtraDefaultOutputNodesInBranchGraph::OutClasses' has a wrong offset!");
//static_assert(offsetof(BED_BehaviorAsset_GetExtraDefaultOutputNodesInBranchGraph, ReturnValue) == 0x000010, "Member 'BED_BehaviorAsset_GetExtraDefaultOutputNodesInBranchGraph::ReturnValue' has a wrong offset!");

// Function b1-Managed.BED_BehaviorAsset.GetExtraDefaultInputNodesInBranchGraph
// 0x0018 (0x0018 - 0x0000)
struct BED_BehaviorAsset_GetExtraDefaultInputNodesInBranchGraph final
{
public:
	TArray<class UClass*>                         OutClasses;                                        // 0x0000(0x0010)(Parm, OutParm)
	int32                                         ReturnValue;                                       // 0x0010(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
//static_assert(alignof(BED_BehaviorAsset_GetExtraDefaultInputNodesInBranchGraph) == 0x000008, "Wrong alignment on BED_BehaviorAsset_GetExtraDefaultInputNodesInBranchGraph");
//static_assert(sizeof(BED_BehaviorAsset_GetExtraDefaultInputNodesInBranchGraph) == 0x000018, "Wrong size on BED_BehaviorAsset_GetExtraDefaultInputNodesInBranchGraph");
//static_assert(offsetof(BED_BehaviorAsset_GetExtraDefaultInputNodesInBranchGraph, OutClasses) == 0x000000, "Member 'BED_BehaviorAsset_GetExtraDefaultInputNodesInBranchGraph::OutClasses' has a wrong offset!");
//static_assert(offsetof(BED_BehaviorAsset_GetExtraDefaultInputNodesInBranchGraph, ReturnValue) == 0x000010, "Member 'BED_BehaviorAsset_GetExtraDefaultInputNodesInBranchGraph::ReturnValue' has a wrong offset!");

// Function b1-Managed.BED_BehaviorAsset.GetRerouteNodeClassInBranchGraph
// 0x0008 (0x0008 - 0x0000)
struct BED_BehaviorAsset_GetRerouteNodeClassInBranchGraph final
{
public:
	class UClass*                                 ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
//static_assert(alignof(BED_BehaviorAsset_GetRerouteNodeClassInBranchGraph) == 0x000008, "Wrong alignment on BED_BehaviorAsset_GetRerouteNodeClassInBranchGraph");
//static_assert(sizeof(BED_BehaviorAsset_GetRerouteNodeClassInBranchGraph) == 0x000008, "Wrong size on BED_BehaviorAsset_GetRerouteNodeClassInBranchGraph");
//static_assert(offsetof(BED_BehaviorAsset_GetRerouteNodeClassInBranchGraph, ReturnValue) == 0x000000, "Member 'BED_BehaviorAsset_GetRerouteNodeClassInBranchGraph::ReturnValue' has a wrong offset!");

// Function b1-Managed.BED_BehaviorAsset.GetStartNodeClassInBranchGraph
// 0x0008 (0x0008 - 0x0000)
struct BED_BehaviorAsset_GetStartNodeClassInBranchGraph final
{
public:
	class UClass*                                 ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
//static_assert(alignof(BED_BehaviorAsset_GetStartNodeClassInBranchGraph) == 0x000008, "Wrong alignment on BED_BehaviorAsset_GetStartNodeClassInBranchGraph");
//static_assert(sizeof(BED_BehaviorAsset_GetStartNodeClassInBranchGraph) == 0x000008, "Wrong size on BED_BehaviorAsset_GetStartNodeClassInBranchGraph");
//static_assert(offsetof(BED_BehaviorAsset_GetStartNodeClassInBranchGraph, ReturnValue) == 0x000000, "Member 'BED_BehaviorAsset_GetStartNodeClassInBranchGraph::ReturnValue' has a wrong offset!");

// Function b1-Managed.BED_BehaviorAsset.GetExtraDefaultOutputNodes
// 0x0018 (0x0018 - 0x0000)
struct BED_BehaviorAsset_GetExtraDefaultOutputNodes final
{
public:
	TArray<class UClass*>                         OutClasses;                                        // 0x0000(0x0010)(Parm, OutParm)
	int32                                         ReturnValue;                                       // 0x0010(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
//static_assert(alignof(BED_BehaviorAsset_GetExtraDefaultOutputNodes) == 0x000008, "Wrong alignment on BED_BehaviorAsset_GetExtraDefaultOutputNodes");
//static_assert(sizeof(BED_BehaviorAsset_GetExtraDefaultOutputNodes) == 0x000018, "Wrong size on BED_BehaviorAsset_GetExtraDefaultOutputNodes");
//static_assert(offsetof(BED_BehaviorAsset_GetExtraDefaultOutputNodes, OutClasses) == 0x000000, "Member 'BED_BehaviorAsset_GetExtraDefaultOutputNodes::OutClasses' has a wrong offset!");
//static_assert(offsetof(BED_BehaviorAsset_GetExtraDefaultOutputNodes, ReturnValue) == 0x000010, "Member 'BED_BehaviorAsset_GetExtraDefaultOutputNodes::ReturnValue' has a wrong offset!");

// Function b1-Managed.BED_BehaviorAsset.GetExtraDefaultInputNodes
// 0x0018 (0x0018 - 0x0000)
struct BED_BehaviorAsset_GetExtraDefaultInputNodes final
{
public:
	TArray<class UClass*>                         OutClasses;                                        // 0x0000(0x0010)(Parm, OutParm)
	int32                                         ReturnValue;                                       // 0x0010(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
//static_assert(alignof(BED_BehaviorAsset_GetExtraDefaultInputNodes) == 0x000008, "Wrong alignment on BED_BehaviorAsset_GetExtraDefaultInputNodes");
//static_assert(sizeof(BED_BehaviorAsset_GetExtraDefaultInputNodes) == 0x000018, "Wrong size on BED_BehaviorAsset_GetExtraDefaultInputNodes");
//static_assert(offsetof(BED_BehaviorAsset_GetExtraDefaultInputNodes, OutClasses) == 0x000000, "Member 'BED_BehaviorAsset_GetExtraDefaultInputNodes::OutClasses' has a wrong offset!");
//static_assert(offsetof(BED_BehaviorAsset_GetExtraDefaultInputNodes, ReturnValue) == 0x000010, "Member 'BED_BehaviorAsset_GetExtraDefaultInputNodes::ReturnValue' has a wrong offset!");

// Function b1-Managed.BED_BehaviorAsset.GetRerouteNodeClass
// 0x0008 (0x0008 - 0x0000)
struct BED_BehaviorAsset_GetRerouteNodeClass final
{
public:
	class UClass*                                 ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
//static_assert(alignof(BED_BehaviorAsset_GetRerouteNodeClass) == 0x000008, "Wrong alignment on BED_BehaviorAsset_GetRerouteNodeClass");
//static_assert(sizeof(BED_BehaviorAsset_GetRerouteNodeClass) == 0x000008, "Wrong size on BED_BehaviorAsset_GetRerouteNodeClass");
//static_assert(offsetof(BED_BehaviorAsset_GetRerouteNodeClass, ReturnValue) == 0x000000, "Member 'BED_BehaviorAsset_GetRerouteNodeClass::ReturnValue' has a wrong offset!");

// Function b1-Managed.BED_BehaviorAsset.GetStartNodeClass
// 0x0008 (0x0008 - 0x0000)
struct BED_BehaviorAsset_GetStartNodeClass final
{
public:
	class UClass*                                 ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
//static_assert(alignof(BED_BehaviorAsset_GetStartNodeClass) == 0x000008, "Wrong alignment on BED_BehaviorAsset_GetStartNodeClass");
//static_assert(sizeof(BED_BehaviorAsset_GetStartNodeClass) == 0x000008, "Wrong size on BED_BehaviorAsset_GetStartNodeClass");
//static_assert(offsetof(BED_BehaviorAsset_GetStartNodeClass, ReturnValue) == 0x000000, "Member 'BED_BehaviorAsset_GetStartNodeClass::ReturnValue' has a wrong offset!");

// Function b1-Managed.BED_BehaviorAsset.GetViewType
// 0x0001 (0x0001 - 0x0000)
struct BED_BehaviorAsset_GetViewType final
{
public:
	ECalliopeViewType                             ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
//static_assert(alignof(BED_BehaviorAsset_GetViewType) == 0x000001, "Wrong alignment on BED_BehaviorAsset_GetViewType");
//static_assert(sizeof(BED_BehaviorAsset_GetViewType) == 0x000001, "Wrong size on BED_BehaviorAsset_GetViewType");
//static_assert(offsetof(BED_BehaviorAsset_GetViewType, ReturnValue) == 0x000000, "Member 'BED_BehaviorAsset_GetViewType::ReturnValue' has a wrong offset!");

// Function b1-Managed.BED_BehaviorNode_AddBuff.GetNodeDescriptionInCS
// 0x0010 (0x0010 - 0x0000)
struct BED_BehaviorNode_AddBuff_GetNodeDescriptionInCS final
{
public:
	class FString                                 ReturnValue;                                       // 0x0000(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash)
};
//static_assert(alignof(BED_BehaviorNode_AddBuff_GetNodeDescriptionInCS) == 0x000008, "Wrong alignment on BED_BehaviorNode_AddBuff_GetNodeDescriptionInCS");
//static_assert(sizeof(BED_BehaviorNode_AddBuff_GetNodeDescriptionInCS) == 0x000010, "Wrong size on BED_BehaviorNode_AddBuff_GetNodeDescriptionInCS");
//static_assert(offsetof(BED_BehaviorNode_AddBuff_GetNodeDescriptionInCS, ReturnValue) == 0x000000, "Member 'BED_BehaviorNode_AddBuff_GetNodeDescriptionInCS::ReturnValue' has a wrong offset!");

// Function b1-Managed.BED_BehaviorNode_DetectExclusiveItemState.GetNodeDescriptionInCS
// 0x0010 (0x0010 - 0x0000)
struct BED_BehaviorNode_DetectExclusiveItemState_GetNodeDescriptionInCS final
{
public:
	class FString                                 ReturnValue;                                       // 0x0000(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash)
};
//static_assert(alignof(BED_BehaviorNode_DetectExclusiveItemState_GetNodeDescriptionInCS) == 0x000008, "Wrong alignment on BED_BehaviorNode_DetectExclusiveItemState_GetNodeDescriptionInCS");
//static_assert(sizeof(BED_BehaviorNode_DetectExclusiveItemState_GetNodeDescriptionInCS) == 0x000010, "Wrong size on BED_BehaviorNode_DetectExclusiveItemState_GetNodeDescriptionInCS");
//static_assert(offsetof(BED_BehaviorNode_DetectExclusiveItemState_GetNodeDescriptionInCS, ReturnValue) == 0x000000, "Member 'BED_BehaviorNode_DetectExclusiveItemState_GetNodeDescriptionInCS::ReturnValue' has a wrong offset!");

// Function b1-Managed.BED_BehaviorNode_DetectForce.GetNodeDescriptionInCS
// 0x0010 (0x0010 - 0x0000)
struct BED_BehaviorNode_DetectForce_GetNodeDescriptionInCS final
{
public:
	class FString                                 ReturnValue;                                       // 0x0000(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash)
};
//static_assert(alignof(BED_BehaviorNode_DetectForce_GetNodeDescriptionInCS) == 0x000008, "Wrong alignment on BED_BehaviorNode_DetectForce_GetNodeDescriptionInCS");
//static_assert(sizeof(BED_BehaviorNode_DetectForce_GetNodeDescriptionInCS) == 0x000010, "Wrong size on BED_BehaviorNode_DetectForce_GetNodeDescriptionInCS");
//static_assert(offsetof(BED_BehaviorNode_DetectForce_GetNodeDescriptionInCS, ReturnValue) == 0x000000, "Member 'BED_BehaviorNode_DetectForce_GetNodeDescriptionInCS::ReturnValue' has a wrong offset!");

// Function b1-Managed.BED_BehaviorNode_ExitState.GetNodeDescriptionInCS
// 0x0010 (0x0010 - 0x0000)
struct BED_BehaviorNode_ExitState_GetNodeDescriptionInCS final
{
public:
	class FString                                 ReturnValue;                                       // 0x0000(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash)
};
//static_assert(alignof(BED_BehaviorNode_ExitState_GetNodeDescriptionInCS) == 0x000008, "Wrong alignment on BED_BehaviorNode_ExitState_GetNodeDescriptionInCS");
//static_assert(sizeof(BED_BehaviorNode_ExitState_GetNodeDescriptionInCS) == 0x000010, "Wrong size on BED_BehaviorNode_ExitState_GetNodeDescriptionInCS");
//static_assert(offsetof(BED_BehaviorNode_ExitState_GetNodeDescriptionInCS, ReturnValue) == 0x000000, "Member 'BED_BehaviorNode_ExitState_GetNodeDescriptionInCS::ReturnValue' has a wrong offset!");

// Function b1-Managed.BED_BehaviorNode_ExitState.IsSupportViewType
// 0x0002 (0x0002 - 0x0000)
struct BED_BehaviorNode_ExitState_IsSupportViewType final
{
public:
	ECalliopeViewType                             InViewType;                                        // 0x0000(0x0001)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         ReturnValue : 1;                                   // 0x0001(0x0001)(BitIndex: 0x00, PropSize: 0x0001 (Parm, OutParm, ReturnParm, NoDestructor, HasGetValueTypeHash))
};
//static_assert(alignof(BED_BehaviorNode_ExitState_IsSupportViewType) == 0x000001, "Wrong alignment on BED_BehaviorNode_ExitState_IsSupportViewType");
//static_assert(sizeof(BED_BehaviorNode_ExitState_IsSupportViewType) == 0x000002, "Wrong size on BED_BehaviorNode_ExitState_IsSupportViewType");
//static_assert(offsetof(BED_BehaviorNode_ExitState_IsSupportViewType, InViewType) == 0x000000, "Member 'BED_BehaviorNode_ExitState_IsSupportViewType::InViewType' has a wrong offset!");

// Function b1-Managed.BED_BehaviorNode_LogicalAnd.CanUserAddInputInCS
// 0x0001 (0x0001 - 0x0000)
struct BED_BehaviorNode_LogicalAnd_CanUserAddInputInCS final
{
public:
	uint8                                         ReturnValue : 1;                                   // 0x0000(0x0001)(BitIndex: 0x00, PropSize: 0x0001 (Parm, OutParm, ReturnParm, NoDestructor, HasGetValueTypeHash))
};
//static_assert(alignof(BED_BehaviorNode_LogicalAnd_CanUserAddInputInCS) == 0x000001, "Wrong alignment on BED_BehaviorNode_LogicalAnd_CanUserAddInputInCS");
//static_assert(sizeof(BED_BehaviorNode_LogicalAnd_CanUserAddInputInCS) == 0x000001, "Wrong size on BED_BehaviorNode_LogicalAnd_CanUserAddInputInCS");

// Function b1-Managed.BED_BehaviorNode_LogicalAnd.IsSupportViewType
// 0x0002 (0x0002 - 0x0000)
struct BED_BehaviorNode_LogicalAnd_IsSupportViewType final
{
public:
	ECalliopeViewType                             InViewType;                                        // 0x0000(0x0001)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         ReturnValue : 1;                                   // 0x0001(0x0001)(BitIndex: 0x00, PropSize: 0x0001 (Parm, OutParm, ReturnParm, NoDestructor, HasGetValueTypeHash))
};
//static_assert(alignof(BED_BehaviorNode_LogicalAnd_IsSupportViewType) == 0x000001, "Wrong alignment on BED_BehaviorNode_LogicalAnd_IsSupportViewType");
//static_assert(sizeof(BED_BehaviorNode_LogicalAnd_IsSupportViewType) == 0x000002, "Wrong size on BED_BehaviorNode_LogicalAnd_IsSupportViewType");
//static_assert(offsetof(BED_BehaviorNode_LogicalAnd_IsSupportViewType, InViewType) == 0x000000, "Member 'BED_BehaviorNode_LogicalAnd_IsSupportViewType::InViewType' has a wrong offset!");

// Function b1-Managed.BED_BehaviorNode_Sequence.CanUserAddOutputInCS
// 0x0001 (0x0001 - 0x0000)
struct BED_BehaviorNode_Sequence_CanUserAddOutputInCS final
{
public:
	uint8                                         ReturnValue : 1;                                   // 0x0000(0x0001)(BitIndex: 0x00, PropSize: 0x0001 (Parm, OutParm, ReturnParm, NoDestructor, HasGetValueTypeHash))
};
//static_assert(alignof(BED_BehaviorNode_Sequence_CanUserAddOutputInCS) == 0x000001, "Wrong alignment on BED_BehaviorNode_Sequence_CanUserAddOutputInCS");
//static_assert(sizeof(BED_BehaviorNode_Sequence_CanUserAddOutputInCS) == 0x000001, "Wrong size on BED_BehaviorNode_Sequence_CanUserAddOutputInCS");

// Function b1-Managed.BED_BehaviorNode_Sequence.IsSupportViewType
// 0x0002 (0x0002 - 0x0000)
struct BED_BehaviorNode_Sequence_IsSupportViewType final
{
public:
	ECalliopeViewType                             InViewType;                                        // 0x0000(0x0001)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         ReturnValue : 1;                                   // 0x0001(0x0001)(BitIndex: 0x00, PropSize: 0x0001 (Parm, OutParm, ReturnParm, NoDestructor, HasGetValueTypeHash))
};
//static_assert(alignof(BED_BehaviorNode_Sequence_IsSupportViewType) == 0x000001, "Wrong alignment on BED_BehaviorNode_Sequence_IsSupportViewType");
//static_assert(sizeof(BED_BehaviorNode_Sequence_IsSupportViewType) == 0x000002, "Wrong size on BED_BehaviorNode_Sequence_IsSupportViewType");
//static_assert(offsetof(BED_BehaviorNode_Sequence_IsSupportViewType, InViewType) == 0x000000, "Member 'BED_BehaviorNode_Sequence_IsSupportViewType::InViewType' has a wrong offset!");

// Function b1-Managed.BED_BehaviorNode_Start.IsSupportViewType
// 0x0002 (0x0002 - 0x0000)
struct BED_BehaviorNode_Start_IsSupportViewType final
{
public:
	ECalliopeViewType                             InViewType;                                        // 0x0000(0x0001)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         ReturnValue : 1;                                   // 0x0001(0x0001)(BitIndex: 0x00, PropSize: 0x0001 (Parm, OutParm, ReturnParm, NoDestructor, HasGetValueTypeHash))
};
//static_assert(alignof(BED_BehaviorNode_Start_IsSupportViewType) == 0x000001, "Wrong alignment on BED_BehaviorNode_Start_IsSupportViewType");
//static_assert(sizeof(BED_BehaviorNode_Start_IsSupportViewType) == 0x000002, "Wrong size on BED_BehaviorNode_Start_IsSupportViewType");
//static_assert(offsetof(BED_BehaviorNode_Start_IsSupportViewType, InViewType) == 0x000000, "Member 'BED_BehaviorNode_Start_IsSupportViewType::InViewType' has a wrong offset!");

// Function b1-Managed.BED_BehaviorNode_UnitStateTrigger.GetNodeDescriptionInCS
// 0x0010 (0x0010 - 0x0000)
struct BED_BehaviorNode_UnitStateTrigger_GetNodeDescriptionInCS final
{
public:
	class FString                                 ReturnValue;                                       // 0x0000(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash)
};
//static_assert(alignof(BED_BehaviorNode_UnitStateTrigger_GetNodeDescriptionInCS) == 0x000008, "Wrong alignment on BED_BehaviorNode_UnitStateTrigger_GetNodeDescriptionInCS");
//static_assert(sizeof(BED_BehaviorNode_UnitStateTrigger_GetNodeDescriptionInCS) == 0x000010, "Wrong size on BED_BehaviorNode_UnitStateTrigger_GetNodeDescriptionInCS");
//static_assert(offsetof(BED_BehaviorNode_UnitStateTrigger_GetNodeDescriptionInCS, ReturnValue) == 0x000000, "Member 'BED_BehaviorNode_UnitStateTrigger_GetNodeDescriptionInCS::ReturnValue' has a wrong offset!");

// Function b1-Managed.BED_MovieNode_CustomEvent.GetNodeDescriptionInCS
// 0x0010 (0x0010 - 0x0000)
struct BED_MovieNode_CustomEvent_GetNodeDescriptionInCS final
{
public:
	class FString                                 ReturnValue;                                       // 0x0000(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash)
};
//static_assert(alignof(BED_MovieNode_CustomEvent_GetNodeDescriptionInCS) == 0x000008, "Wrong alignment on BED_MovieNode_CustomEvent_GetNodeDescriptionInCS");
//static_assert(sizeof(BED_MovieNode_CustomEvent_GetNodeDescriptionInCS) == 0x000010, "Wrong size on BED_MovieNode_CustomEvent_GetNodeDescriptionInCS");
//static_assert(offsetof(BED_MovieNode_CustomEvent_GetNodeDescriptionInCS, ReturnValue) == 0x000000, "Member 'BED_MovieNode_CustomEvent_GetNodeDescriptionInCS::ReturnValue' has a wrong offset!");

// Function b1-Managed.BED_MovieNode_PerformerStopWaiting.GetNodeDescriptionInCS
// 0x0010 (0x0010 - 0x0000)
struct BED_MovieNode_PerformerStopWaiting_GetNodeDescriptionInCS final
{
public:
	class FString                                 ReturnValue;                                       // 0x0000(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash)
};
//static_assert(alignof(BED_MovieNode_PerformerStopWaiting_GetNodeDescriptionInCS) == 0x000008, "Wrong alignment on BED_MovieNode_PerformerStopWaiting_GetNodeDescriptionInCS");
//static_assert(sizeof(BED_MovieNode_PerformerStopWaiting_GetNodeDescriptionInCS) == 0x000010, "Wrong size on BED_MovieNode_PerformerStopWaiting_GetNodeDescriptionInCS");
//static_assert(offsetof(BED_MovieNode_PerformerStopWaiting_GetNodeDescriptionInCS, ReturnValue) == 0x000000, "Member 'BED_MovieNode_PerformerStopWaiting_GetNodeDescriptionInCS::ReturnValue' has a wrong offset!");

// Function b1-Managed.BED_MovieNode_Start.GetNodeDescriptionInCS
// 0x0010 (0x0010 - 0x0000)
struct BED_MovieNode_Start_GetNodeDescriptionInCS final
{
public:
	class FString                                 ReturnValue;                                       // 0x0000(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash)
};
//static_assert(alignof(BED_MovieNode_Start_GetNodeDescriptionInCS) == 0x000008, "Wrong alignment on BED_MovieNode_Start_GetNodeDescriptionInCS");
//static_assert(sizeof(BED_MovieNode_Start_GetNodeDescriptionInCS) == 0x000010, "Wrong size on BED_MovieNode_Start_GetNodeDescriptionInCS");
//static_assert(offsetof(BED_MovieNode_Start_GetNodeDescriptionInCS, ReturnValue) == 0x000000, "Member 'BED_MovieNode_Start_GetNodeDescriptionInCS::ReturnValue' has a wrong offset!");

// Function b1-Managed.BED_ProcessAsset.OnPropertyChanged
// 0x0020 (0x0020 - 0x0000)
struct BED_ProcessAsset_OnPropertyChanged final
{
public:
	class FString                                 MemberName;                                        // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash)
	class FString                                 PropertyName;                                      // 0x0010(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash)
};
//static_assert(alignof(BED_ProcessAsset_OnPropertyChanged) == 0x000008, "Wrong alignment on BED_ProcessAsset_OnPropertyChanged");
//static_assert(sizeof(BED_ProcessAsset_OnPropertyChanged) == 0x000020, "Wrong size on BED_ProcessAsset_OnPropertyChanged");
//static_assert(offsetof(BED_ProcessAsset_OnPropertyChanged, MemberName) == 0x000000, "Member 'BED_ProcessAsset_OnPropertyChanged::MemberName' has a wrong offset!");
//static_assert(offsetof(BED_ProcessAsset_OnPropertyChanged, PropertyName) == 0x000010, "Member 'BED_ProcessAsset_OnPropertyChanged::PropertyName' has a wrong offset!");

// Function b1-Managed.BED_ProcessAsset.UnregisterNode
// 0x0010 (0x0010 - 0x0000)
struct BED_ProcessAsset_UnregisterNode final
{
public:
	struct FCalliopeGuid                          NodeGuid;                                          // 0x0000(0x0010)(ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, HasGetValueTypeHash)
};
//static_assert(alignof(BED_ProcessAsset_UnregisterNode) == 0x000004, "Wrong alignment on BED_ProcessAsset_UnregisterNode");
//static_assert(sizeof(BED_ProcessAsset_UnregisterNode) == 0x000010, "Wrong size on BED_ProcessAsset_UnregisterNode");
//static_assert(offsetof(BED_ProcessAsset_UnregisterNode, NodeGuid) == 0x000000, "Member 'BED_ProcessAsset_UnregisterNode::NodeGuid' has a wrong offset!");

// Function b1-Managed.BED_ProcessAsset.RegisterNode
// 0x0018 (0x0018 - 0x0000)
struct BED_ProcessAsset_RegisterNode final
{
public:
	struct FCalliopeGuid                          NewGuid;                                           // 0x0000(0x0010)(ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, HasGetValueTypeHash)
	class UCalliopeNode*                          NewNode;                                           // 0x0010(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
//static_assert(alignof(BED_ProcessAsset_RegisterNode) == 0x000008, "Wrong alignment on BED_ProcessAsset_RegisterNode");
//static_assert(sizeof(BED_ProcessAsset_RegisterNode) == 0x000018, "Wrong size on BED_ProcessAsset_RegisterNode");
//static_assert(offsetof(BED_ProcessAsset_RegisterNode, NewGuid) == 0x000000, "Member 'BED_ProcessAsset_RegisterNode::NewGuid' has a wrong offset!");
//static_assert(offsetof(BED_ProcessAsset_RegisterNode, NewNode) == 0x000010, "Member 'BED_ProcessAsset_RegisterNode::NewNode' has a wrong offset!");

// Function b1-Managed.BED_ProcessAsset.HasRevertCondition
// 0x0001 (0x0001 - 0x0000)
struct BED_ProcessAsset_HasRevertCondition final
{
public:
	uint8                                         ReturnValue : 1;                                   // 0x0000(0x0001)(BitIndex: 0x00, PropSize: 0x0001 (Parm, OutParm, ReturnParm, NoDestructor, HasGetValueTypeHash))
};
//static_assert(alignof(BED_ProcessAsset_HasRevertCondition) == 0x000001, "Wrong alignment on BED_ProcessAsset_HasRevertCondition");
//static_assert(sizeof(BED_ProcessAsset_HasRevertCondition) == 0x000001, "Wrong size on BED_ProcessAsset_HasRevertCondition");

// Function b1-Managed.BED_ProcessAsset.GetExtraDefaultOutputNodesInBranchGraph
// 0x0018 (0x0018 - 0x0000)
struct BED_ProcessAsset_GetExtraDefaultOutputNodesInBranchGraph final
{
public:
	TArray<class UClass*>                         OutClasses;                                        // 0x0000(0x0010)(Parm, OutParm)
	int32                                         ReturnValue;                                       // 0x0010(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
//static_assert(alignof(BED_ProcessAsset_GetExtraDefaultOutputNodesInBranchGraph) == 0x000008, "Wrong alignment on BED_ProcessAsset_GetExtraDefaultOutputNodesInBranchGraph");
//static_assert(sizeof(BED_ProcessAsset_GetExtraDefaultOutputNodesInBranchGraph) == 0x000018, "Wrong size on BED_ProcessAsset_GetExtraDefaultOutputNodesInBranchGraph");
//static_assert(offsetof(BED_ProcessAsset_GetExtraDefaultOutputNodesInBranchGraph, OutClasses) == 0x000000, "Member 'BED_ProcessAsset_GetExtraDefaultOutputNodesInBranchGraph::OutClasses' has a wrong offset!");
//static_assert(offsetof(BED_ProcessAsset_GetExtraDefaultOutputNodesInBranchGraph, ReturnValue) == 0x000010, "Member 'BED_ProcessAsset_GetExtraDefaultOutputNodesInBranchGraph::ReturnValue' has a wrong offset!");

// Function b1-Managed.BED_ProcessAsset.GetExtraDefaultInputNodesInBranchGraph
// 0x0018 (0x0018 - 0x0000)
struct BED_ProcessAsset_GetExtraDefaultInputNodesInBranchGraph final
{
public:
	TArray<class UClass*>                         OutClasses;                                        // 0x0000(0x0010)(Parm, OutParm)
	int32                                         ReturnValue;                                       // 0x0010(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
//static_assert(alignof(BED_ProcessAsset_GetExtraDefaultInputNodesInBranchGraph) == 0x000008, "Wrong alignment on BED_ProcessAsset_GetExtraDefaultInputNodesInBranchGraph");
//static_assert(sizeof(BED_ProcessAsset_GetExtraDefaultInputNodesInBranchGraph) == 0x000018, "Wrong size on BED_ProcessAsset_GetExtraDefaultInputNodesInBranchGraph");
//static_assert(offsetof(BED_ProcessAsset_GetExtraDefaultInputNodesInBranchGraph, OutClasses) == 0x000000, "Member 'BED_ProcessAsset_GetExtraDefaultInputNodesInBranchGraph::OutClasses' has a wrong offset!");
//static_assert(offsetof(BED_ProcessAsset_GetExtraDefaultInputNodesInBranchGraph, ReturnValue) == 0x000010, "Member 'BED_ProcessAsset_GetExtraDefaultInputNodesInBranchGraph::ReturnValue' has a wrong offset!");

// Function b1-Managed.BED_ProcessAsset.GetRerouteNodeClassInBranchGraph
// 0x0008 (0x0008 - 0x0000)
struct BED_ProcessAsset_GetRerouteNodeClassInBranchGraph final
{
public:
	class UClass*                                 ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
//static_assert(alignof(BED_ProcessAsset_GetRerouteNodeClassInBranchGraph) == 0x000008, "Wrong alignment on BED_ProcessAsset_GetRerouteNodeClassInBranchGraph");
//static_assert(sizeof(BED_ProcessAsset_GetRerouteNodeClassInBranchGraph) == 0x000008, "Wrong size on BED_ProcessAsset_GetRerouteNodeClassInBranchGraph");
//static_assert(offsetof(BED_ProcessAsset_GetRerouteNodeClassInBranchGraph, ReturnValue) == 0x000000, "Member 'BED_ProcessAsset_GetRerouteNodeClassInBranchGraph::ReturnValue' has a wrong offset!");

// Function b1-Managed.BED_ProcessAsset.GetStartNodeClassInBranchGraph
// 0x0008 (0x0008 - 0x0000)
struct BED_ProcessAsset_GetStartNodeClassInBranchGraph final
{
public:
	class UClass*                                 ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
//static_assert(alignof(BED_ProcessAsset_GetStartNodeClassInBranchGraph) == 0x000008, "Wrong alignment on BED_ProcessAsset_GetStartNodeClassInBranchGraph");
//static_assert(sizeof(BED_ProcessAsset_GetStartNodeClassInBranchGraph) == 0x000008, "Wrong size on BED_ProcessAsset_GetStartNodeClassInBranchGraph");
//static_assert(offsetof(BED_ProcessAsset_GetStartNodeClassInBranchGraph, ReturnValue) == 0x000000, "Member 'BED_ProcessAsset_GetStartNodeClassInBranchGraph::ReturnValue' has a wrong offset!");

// Function b1-Managed.BED_ProcessAsset.GetExtraDefaultOutputNodes
// 0x0018 (0x0018 - 0x0000)
struct BED_ProcessAsset_GetExtraDefaultOutputNodes final
{
public:
	TArray<class UClass*>                         OutClasses;                                        // 0x0000(0x0010)(Parm, OutParm)
	int32                                         ReturnValue;                                       // 0x0010(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
//static_assert(alignof(BED_ProcessAsset_GetExtraDefaultOutputNodes) == 0x000008, "Wrong alignment on BED_ProcessAsset_GetExtraDefaultOutputNodes");
//static_assert(sizeof(BED_ProcessAsset_GetExtraDefaultOutputNodes) == 0x000018, "Wrong size on BED_ProcessAsset_GetExtraDefaultOutputNodes");
//static_assert(offsetof(BED_ProcessAsset_GetExtraDefaultOutputNodes, OutClasses) == 0x000000, "Member 'BED_ProcessAsset_GetExtraDefaultOutputNodes::OutClasses' has a wrong offset!");
//static_assert(offsetof(BED_ProcessAsset_GetExtraDefaultOutputNodes, ReturnValue) == 0x000010, "Member 'BED_ProcessAsset_GetExtraDefaultOutputNodes::ReturnValue' has a wrong offset!");

// Function b1-Managed.BED_ProcessAsset.GetExtraDefaultInputNodes
// 0x0018 (0x0018 - 0x0000)
struct BED_ProcessAsset_GetExtraDefaultInputNodes final
{
public:
	TArray<class UClass*>                         OutClasses;                                        // 0x0000(0x0010)(Parm, OutParm)
	int32                                         ReturnValue;                                       // 0x0010(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
//static_assert(alignof(BED_ProcessAsset_GetExtraDefaultInputNodes) == 0x000008, "Wrong alignment on BED_ProcessAsset_GetExtraDefaultInputNodes");
//static_assert(sizeof(BED_ProcessAsset_GetExtraDefaultInputNodes) == 0x000018, "Wrong size on BED_ProcessAsset_GetExtraDefaultInputNodes");
//static_assert(offsetof(BED_ProcessAsset_GetExtraDefaultInputNodes, OutClasses) == 0x000000, "Member 'BED_ProcessAsset_GetExtraDefaultInputNodes::OutClasses' has a wrong offset!");
//static_assert(offsetof(BED_ProcessAsset_GetExtraDefaultInputNodes, ReturnValue) == 0x000010, "Member 'BED_ProcessAsset_GetExtraDefaultInputNodes::ReturnValue' has a wrong offset!");

// Function b1-Managed.BED_ProcessAsset.GetRerouteNodeClass
// 0x0008 (0x0008 - 0x0000)
struct BED_ProcessAsset_GetRerouteNodeClass final
{
public:
	class UClass*                                 ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
//static_assert(alignof(BED_ProcessAsset_GetRerouteNodeClass) == 0x000008, "Wrong alignment on BED_ProcessAsset_GetRerouteNodeClass");
//static_assert(sizeof(BED_ProcessAsset_GetRerouteNodeClass) == 0x000008, "Wrong size on BED_ProcessAsset_GetRerouteNodeClass");
//static_assert(offsetof(BED_ProcessAsset_GetRerouteNodeClass, ReturnValue) == 0x000000, "Member 'BED_ProcessAsset_GetRerouteNodeClass::ReturnValue' has a wrong offset!");

// Function b1-Managed.BED_ProcessAsset.GetStartNodeClass
// 0x0008 (0x0008 - 0x0000)
struct BED_ProcessAsset_GetStartNodeClass final
{
public:
	class UClass*                                 ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
//static_assert(alignof(BED_ProcessAsset_GetStartNodeClass) == 0x000008, "Wrong alignment on BED_ProcessAsset_GetStartNodeClass");
//static_assert(sizeof(BED_ProcessAsset_GetStartNodeClass) == 0x000008, "Wrong size on BED_ProcessAsset_GetStartNodeClass");
//static_assert(offsetof(BED_ProcessAsset_GetStartNodeClass, ReturnValue) == 0x000000, "Member 'BED_ProcessAsset_GetStartNodeClass::ReturnValue' has a wrong offset!");

// Function b1-Managed.BED_ProcessAsset.CanManageStates
// 0x0001 (0x0001 - 0x0000)
struct BED_ProcessAsset_CanManageStates final
{
public:
	uint8                                         ReturnValue : 1;                                   // 0x0000(0x0001)(BitIndex: 0x00, PropSize: 0x0001 (Parm, OutParm, ReturnParm, NoDestructor, HasGetValueTypeHash))
};
//static_assert(alignof(BED_ProcessAsset_CanManageStates) == 0x000001, "Wrong alignment on BED_ProcessAsset_CanManageStates");
//static_assert(sizeof(BED_ProcessAsset_CanManageStates) == 0x000001, "Wrong size on BED_ProcessAsset_CanManageStates");

// Function b1-Managed.BED_ProcessAsset.IsEditorOnlyCS
// 0x0001 (0x0001 - 0x0000)
struct BED_ProcessAsset_IsEditorOnlyCS final
{
public:
	uint8                                         ReturnValue : 1;                                   // 0x0000(0x0001)(BitIndex: 0x00, PropSize: 0x0001 (Parm, OutParm, ReturnParm, NoDestructor, HasGetValueTypeHash))
};
//static_assert(alignof(BED_ProcessAsset_IsEditorOnlyCS) == 0x000001, "Wrong alignment on BED_ProcessAsset_IsEditorOnlyCS");
//static_assert(sizeof(BED_ProcessAsset_IsEditorOnlyCS) == 0x000001, "Wrong size on BED_ProcessAsset_IsEditorOnlyCS");

// Function b1-Managed.BED_ProcessAsset.GetViewType
// 0x0001 (0x0001 - 0x0000)
struct BED_ProcessAsset_GetViewType final
{
public:
	ECalliopeViewType                             ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
//static_assert(alignof(BED_ProcessAsset_GetViewType) == 0x000001, "Wrong alignment on BED_ProcessAsset_GetViewType");
//static_assert(sizeof(BED_ProcessAsset_GetViewType) == 0x000001, "Wrong size on BED_ProcessAsset_GetViewType");
//static_assert(offsetof(BED_ProcessAsset_GetViewType, ReturnValue) == 0x000000, "Member 'BED_ProcessAsset_GetViewType::ReturnValue' has a wrong offset!");

// Function b1-Managed.BED_ProcessStateNode_DetectStart.GetContextOutputsInCS
// 0x0010 (0x0010 - 0x0000)
struct BED_ProcessStateNode_DetectStart_GetContextOutputsInCS final
{
public:
	TArray<class FName>                           ReturnValue;                                       // 0x0000(0x0010)(Parm, OutParm, ReturnParm)
};
//static_assert(alignof(BED_ProcessStateNode_DetectStart_GetContextOutputsInCS) == 0x000008, "Wrong alignment on BED_ProcessStateNode_DetectStart_GetContextOutputsInCS");
//static_assert(sizeof(BED_ProcessStateNode_DetectStart_GetContextOutputsInCS) == 0x000010, "Wrong size on BED_ProcessStateNode_DetectStart_GetContextOutputsInCS");
//static_assert(offsetof(BED_ProcessStateNode_DetectStart_GetContextOutputsInCS, ReturnValue) == 0x000000, "Member 'BED_ProcessStateNode_DetectStart_GetContextOutputsInCS::ReturnValue' has a wrong offset!");

// Function b1-Managed.BED_ProcessStateNode_DetectStart.PostPropertyChanged
// 0x0020 (0x0020 - 0x0000)
struct BED_ProcessStateNode_DetectStart_PostPropertyChanged final
{
public:
	class FString                                 MemberName;                                        // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash)
	class FString                                 PropertyName;                                      // 0x0010(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash)
};
//static_assert(alignof(BED_ProcessStateNode_DetectStart_PostPropertyChanged) == 0x000008, "Wrong alignment on BED_ProcessStateNode_DetectStart_PostPropertyChanged");
//static_assert(sizeof(BED_ProcessStateNode_DetectStart_PostPropertyChanged) == 0x000020, "Wrong size on BED_ProcessStateNode_DetectStart_PostPropertyChanged");
//static_assert(offsetof(BED_ProcessStateNode_DetectStart_PostPropertyChanged, MemberName) == 0x000000, "Member 'BED_ProcessStateNode_DetectStart_PostPropertyChanged::MemberName' has a wrong offset!");
//static_assert(offsetof(BED_ProcessStateNode_DetectStart_PostPropertyChanged, PropertyName) == 0x000010, "Member 'BED_ProcessStateNode_DetectStart_PostPropertyChanged::PropertyName' has a wrong offset!");

// Function b1-Managed.BED_ProcessStateNode_DetectStart.GetNodeDescriptionInCS
// 0x0010 (0x0010 - 0x0000)
struct BED_ProcessStateNode_DetectStart_GetNodeDescriptionInCS final
{
public:
	class FString                                 ReturnValue;                                       // 0x0000(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash)
};
//static_assert(alignof(BED_ProcessStateNode_DetectStart_GetNodeDescriptionInCS) == 0x000008, "Wrong alignment on BED_ProcessStateNode_DetectStart_GetNodeDescriptionInCS");
//static_assert(sizeof(BED_ProcessStateNode_DetectStart_GetNodeDescriptionInCS) == 0x000010, "Wrong size on BED_ProcessStateNode_DetectStart_GetNodeDescriptionInCS");
//static_assert(offsetof(BED_ProcessStateNode_DetectStart_GetNodeDescriptionInCS, ReturnValue) == 0x000000, "Member 'BED_ProcessStateNode_DetectStart_GetNodeDescriptionInCS::ReturnValue' has a wrong offset!");

// Function b1-Managed.BED_ProcessStateNode_DisableDetect.GetContextOutputsInCS
// 0x0010 (0x0010 - 0x0000)
struct BED_ProcessStateNode_DisableDetect_GetContextOutputsInCS final
{
public:
	TArray<class FName>                           ReturnValue;                                       // 0x0000(0x0010)(Parm, OutParm, ReturnParm)
};
//static_assert(alignof(BED_ProcessStateNode_DisableDetect_GetContextOutputsInCS) == 0x000008, "Wrong alignment on BED_ProcessStateNode_DisableDetect_GetContextOutputsInCS");
//static_assert(sizeof(BED_ProcessStateNode_DisableDetect_GetContextOutputsInCS) == 0x000010, "Wrong size on BED_ProcessStateNode_DisableDetect_GetContextOutputsInCS");
//static_assert(offsetof(BED_ProcessStateNode_DisableDetect_GetContextOutputsInCS, ReturnValue) == 0x000000, "Member 'BED_ProcessStateNode_DisableDetect_GetContextOutputsInCS::ReturnValue' has a wrong offset!");

// Function b1-Managed.BED_ProcessStateNode_DisableDetect.PostPropertyChanged
// 0x0020 (0x0020 - 0x0000)
struct BED_ProcessStateNode_DisableDetect_PostPropertyChanged final
{
public:
	class FString                                 MemberName;                                        // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash)
	class FString                                 PropertyName;                                      // 0x0010(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash)
};
//static_assert(alignof(BED_ProcessStateNode_DisableDetect_PostPropertyChanged) == 0x000008, "Wrong alignment on BED_ProcessStateNode_DisableDetect_PostPropertyChanged");
//static_assert(sizeof(BED_ProcessStateNode_DisableDetect_PostPropertyChanged) == 0x000020, "Wrong size on BED_ProcessStateNode_DisableDetect_PostPropertyChanged");
//static_assert(offsetof(BED_ProcessStateNode_DisableDetect_PostPropertyChanged, MemberName) == 0x000000, "Member 'BED_ProcessStateNode_DisableDetect_PostPropertyChanged::MemberName' has a wrong offset!");
//static_assert(offsetof(BED_ProcessStateNode_DisableDetect_PostPropertyChanged, PropertyName) == 0x000010, "Member 'BED_ProcessStateNode_DisableDetect_PostPropertyChanged::PropertyName' has a wrong offset!");

// Function b1-Managed.BED_ProcessStateNode_DisableDetect.GetNodeDescriptionInCS
// 0x0010 (0x0010 - 0x0000)
struct BED_ProcessStateNode_DisableDetect_GetNodeDescriptionInCS final
{
public:
	class FString                                 ReturnValue;                                       // 0x0000(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash)
};
//static_assert(alignof(BED_ProcessStateNode_DisableDetect_GetNodeDescriptionInCS) == 0x000008, "Wrong alignment on BED_ProcessStateNode_DisableDetect_GetNodeDescriptionInCS");
//static_assert(sizeof(BED_ProcessStateNode_DisableDetect_GetNodeDescriptionInCS) == 0x000010, "Wrong size on BED_ProcessStateNode_DisableDetect_GetNodeDescriptionInCS");
//static_assert(offsetof(BED_ProcessStateNode_DisableDetect_GetNodeDescriptionInCS, ReturnValue) == 0x000000, "Member 'BED_ProcessStateNode_DisableDetect_GetNodeDescriptionInCS::ReturnValue' has a wrong offset!");

// Function b1-Managed.BED_ProcessStateNode_EnableDetect.GetContextOutputsInCS
// 0x0010 (0x0010 - 0x0000)
struct BED_ProcessStateNode_EnableDetect_GetContextOutputsInCS final
{
public:
	TArray<class FName>                           ReturnValue;                                       // 0x0000(0x0010)(Parm, OutParm, ReturnParm)
};
//static_assert(alignof(BED_ProcessStateNode_EnableDetect_GetContextOutputsInCS) == 0x000008, "Wrong alignment on BED_ProcessStateNode_EnableDetect_GetContextOutputsInCS");
//static_assert(sizeof(BED_ProcessStateNode_EnableDetect_GetContextOutputsInCS) == 0x000010, "Wrong size on BED_ProcessStateNode_EnableDetect_GetContextOutputsInCS");
//static_assert(offsetof(BED_ProcessStateNode_EnableDetect_GetContextOutputsInCS, ReturnValue) == 0x000000, "Member 'BED_ProcessStateNode_EnableDetect_GetContextOutputsInCS::ReturnValue' has a wrong offset!");

// Function b1-Managed.BED_ProcessStateNode_EnableDetect.PostPropertyChanged
// 0x0020 (0x0020 - 0x0000)
struct BED_ProcessStateNode_EnableDetect_PostPropertyChanged final
{
public:
	class FString                                 MemberName;                                        // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash)
	class FString                                 PropertyName;                                      // 0x0010(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash)
};
//static_assert(alignof(BED_ProcessStateNode_EnableDetect_PostPropertyChanged) == 0x000008, "Wrong alignment on BED_ProcessStateNode_EnableDetect_PostPropertyChanged");
//static_assert(sizeof(BED_ProcessStateNode_EnableDetect_PostPropertyChanged) == 0x000020, "Wrong size on BED_ProcessStateNode_EnableDetect_PostPropertyChanged");
//static_assert(offsetof(BED_ProcessStateNode_EnableDetect_PostPropertyChanged, MemberName) == 0x000000, "Member 'BED_ProcessStateNode_EnableDetect_PostPropertyChanged::MemberName' has a wrong offset!");
//static_assert(offsetof(BED_ProcessStateNode_EnableDetect_PostPropertyChanged, PropertyName) == 0x000010, "Member 'BED_ProcessStateNode_EnableDetect_PostPropertyChanged::PropertyName' has a wrong offset!");

// Function b1-Managed.BED_ProcessStateNode_EnableDetect.GetNodeDescriptionInCS
// 0x0010 (0x0010 - 0x0000)
struct BED_ProcessStateNode_EnableDetect_GetNodeDescriptionInCS final
{
public:
	class FString                                 ReturnValue;                                       // 0x0000(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash)
};
//static_assert(alignof(BED_ProcessStateNode_EnableDetect_GetNodeDescriptionInCS) == 0x000008, "Wrong alignment on BED_ProcessStateNode_EnableDetect_GetNodeDescriptionInCS");
//static_assert(sizeof(BED_ProcessStateNode_EnableDetect_GetNodeDescriptionInCS) == 0x000010, "Wrong size on BED_ProcessStateNode_EnableDetect_GetNodeDescriptionInCS");
//static_assert(offsetof(BED_ProcessStateNode_EnableDetect_GetNodeDescriptionInCS, ReturnValue) == 0x000000, "Member 'BED_ProcessStateNode_EnableDetect_GetNodeDescriptionInCS::ReturnValue' has a wrong offset!");

// Function b1-Managed.BED_ProcessStateNode_Log.GetNodeDescriptionInCS
// 0x0010 (0x0010 - 0x0000)
struct BED_ProcessStateNode_Log_GetNodeDescriptionInCS final
{
public:
	class FString                                 ReturnValue;                                       // 0x0000(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash)
};
//static_assert(alignof(BED_ProcessStateNode_Log_GetNodeDescriptionInCS) == 0x000008, "Wrong alignment on BED_ProcessStateNode_Log_GetNodeDescriptionInCS");
//static_assert(sizeof(BED_ProcessStateNode_Log_GetNodeDescriptionInCS) == 0x000010, "Wrong size on BED_ProcessStateNode_Log_GetNodeDescriptionInCS");
//static_assert(offsetof(BED_ProcessStateNode_Log_GetNodeDescriptionInCS, ReturnValue) == 0x000000, "Member 'BED_ProcessStateNode_Log_GetNodeDescriptionInCS::ReturnValue' has a wrong offset!");

// Function b1-Managed.BED_ProcessStateNode_LogicalOr.CanUserAddInputInCS
// 0x0001 (0x0001 - 0x0000)
struct BED_ProcessStateNode_LogicalOr_CanUserAddInputInCS final
{
public:
	uint8                                         ReturnValue : 1;                                   // 0x0000(0x0001)(BitIndex: 0x00, PropSize: 0x0001 (Parm, OutParm, ReturnParm, NoDestructor, HasGetValueTypeHash))
};
//static_assert(alignof(BED_ProcessStateNode_LogicalOr_CanUserAddInputInCS) == 0x000001, "Wrong alignment on BED_ProcessStateNode_LogicalOr_CanUserAddInputInCS");
//static_assert(sizeof(BED_ProcessStateNode_LogicalOr_CanUserAddInputInCS) == 0x000001, "Wrong size on BED_ProcessStateNode_LogicalOr_CanUserAddInputInCS");

// Function b1-Managed.BED_ProcessStateNode_NotifySelf.GetContextOutputsInCS
// 0x0010 (0x0010 - 0x0000)
struct BED_ProcessStateNode_NotifySelf_GetContextOutputsInCS final
{
public:
	TArray<class FName>                           ReturnValue;                                       // 0x0000(0x0010)(Parm, OutParm, ReturnParm)
};
//static_assert(alignof(BED_ProcessStateNode_NotifySelf_GetContextOutputsInCS) == 0x000008, "Wrong alignment on BED_ProcessStateNode_NotifySelf_GetContextOutputsInCS");
//static_assert(sizeof(BED_ProcessStateNode_NotifySelf_GetContextOutputsInCS) == 0x000010, "Wrong size on BED_ProcessStateNode_NotifySelf_GetContextOutputsInCS");
//static_assert(offsetof(BED_ProcessStateNode_NotifySelf_GetContextOutputsInCS, ReturnValue) == 0x000000, "Member 'BED_ProcessStateNode_NotifySelf_GetContextOutputsInCS::ReturnValue' has a wrong offset!");

// Function b1-Managed.BED_ProcessStateNode_NotifySelf.PostPropertyChanged
// 0x0020 (0x0020 - 0x0000)
struct BED_ProcessStateNode_NotifySelf_PostPropertyChanged final
{
public:
	class FString                                 MemberName;                                        // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash)
	class FString                                 PropertyName;                                      // 0x0010(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash)
};
//static_assert(alignof(BED_ProcessStateNode_NotifySelf_PostPropertyChanged) == 0x000008, "Wrong alignment on BED_ProcessStateNode_NotifySelf_PostPropertyChanged");
//static_assert(sizeof(BED_ProcessStateNode_NotifySelf_PostPropertyChanged) == 0x000020, "Wrong size on BED_ProcessStateNode_NotifySelf_PostPropertyChanged");
//static_assert(offsetof(BED_ProcessStateNode_NotifySelf_PostPropertyChanged, MemberName) == 0x000000, "Member 'BED_ProcessStateNode_NotifySelf_PostPropertyChanged::MemberName' has a wrong offset!");
//static_assert(offsetof(BED_ProcessStateNode_NotifySelf_PostPropertyChanged, PropertyName) == 0x000010, "Member 'BED_ProcessStateNode_NotifySelf_PostPropertyChanged::PropertyName' has a wrong offset!");

// Function b1-Managed.BED_ProcessStateNode_NotifySelf.GetNodeDescriptionInCS
// 0x0010 (0x0010 - 0x0000)
struct BED_ProcessStateNode_NotifySelf_GetNodeDescriptionInCS final
{
public:
	class FString                                 ReturnValue;                                       // 0x0000(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash)
};
//static_assert(alignof(BED_ProcessStateNode_NotifySelf_GetNodeDescriptionInCS) == 0x000008, "Wrong alignment on BED_ProcessStateNode_NotifySelf_GetNodeDescriptionInCS");
//static_assert(sizeof(BED_ProcessStateNode_NotifySelf_GetNodeDescriptionInCS) == 0x000010, "Wrong size on BED_ProcessStateNode_NotifySelf_GetNodeDescriptionInCS");
//static_assert(offsetof(BED_ProcessStateNode_NotifySelf_GetNodeDescriptionInCS, ReturnValue) == 0x000000, "Member 'BED_ProcessStateNode_NotifySelf_GetNodeDescriptionInCS::ReturnValue' has a wrong offset!");

// Function b1-Managed.BED_ProcessStateNode_ObserveActor.GetNodeDescriptionInCS
// 0x0010 (0x0010 - 0x0000)
struct BED_ProcessStateNode_ObserveActor_GetNodeDescriptionInCS final
{
public:
	class FString                                 ReturnValue;                                       // 0x0000(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash)
};
//static_assert(alignof(BED_ProcessStateNode_ObserveActor_GetNodeDescriptionInCS) == 0x000008, "Wrong alignment on BED_ProcessStateNode_ObserveActor_GetNodeDescriptionInCS");
//static_assert(sizeof(BED_ProcessStateNode_ObserveActor_GetNodeDescriptionInCS) == 0x000010, "Wrong size on BED_ProcessStateNode_ObserveActor_GetNodeDescriptionInCS");
//static_assert(offsetof(BED_ProcessStateNode_ObserveActor_GetNodeDescriptionInCS, ReturnValue) == 0x000000, "Member 'BED_ProcessStateNode_ObserveActor_GetNodeDescriptionInCS::ReturnValue' has a wrong offset!");

// Function b1-Managed.BED_ProcessStateNode_Timer.GetNodeDescriptionInCS
// 0x0010 (0x0010 - 0x0000)
struct BED_ProcessStateNode_Timer_GetNodeDescriptionInCS final
{
public:
	class FString                                 ReturnValue;                                       // 0x0000(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash)
};
//static_assert(alignof(BED_ProcessStateNode_Timer_GetNodeDescriptionInCS) == 0x000008, "Wrong alignment on BED_ProcessStateNode_Timer_GetNodeDescriptionInCS");
//static_assert(sizeof(BED_ProcessStateNode_Timer_GetNodeDescriptionInCS) == 0x000010, "Wrong size on BED_ProcessStateNode_Timer_GetNodeDescriptionInCS");
//static_assert(offsetof(BED_ProcessStateNode_Timer_GetNodeDescriptionInCS, ReturnValue) == 0x000000, "Member 'BED_ProcessStateNode_Timer_GetNodeDescriptionInCS::ReturnValue' has a wrong offset!");

// Function b1-Managed.BED_ProcessMachineNode_Fork.CanUserAddOutputInCS
// 0x0001 (0x0001 - 0x0000)
struct BED_ProcessMachineNode_Fork_CanUserAddOutputInCS final
{
public:
	uint8                                         ReturnValue : 1;                                   // 0x0000(0x0001)(BitIndex: 0x00, PropSize: 0x0001 (Parm, OutParm, ReturnParm, NoDestructor, HasGetValueTypeHash))
};
//static_assert(alignof(BED_ProcessMachineNode_Fork_CanUserAddOutputInCS) == 0x000001, "Wrong alignment on BED_ProcessMachineNode_Fork_CanUserAddOutputInCS");
//static_assert(sizeof(BED_ProcessMachineNode_Fork_CanUserAddOutputInCS) == 0x000001, "Wrong size on BED_ProcessMachineNode_Fork_CanUserAddOutputInCS");

// Function b1-Managed.BED_ProcessMachineNode_Fork.IsSupportViewType
// 0x0002 (0x0002 - 0x0000)
struct BED_ProcessMachineNode_Fork_IsSupportViewType final
{
public:
	ECalliopeViewType                             InViewType;                                        // 0x0000(0x0001)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         ReturnValue : 1;                                   // 0x0001(0x0001)(BitIndex: 0x00, PropSize: 0x0001 (Parm, OutParm, ReturnParm, NoDestructor, HasGetValueTypeHash))
};
//static_assert(alignof(BED_ProcessMachineNode_Fork_IsSupportViewType) == 0x000001, "Wrong alignment on BED_ProcessMachineNode_Fork_IsSupportViewType");
//static_assert(sizeof(BED_ProcessMachineNode_Fork_IsSupportViewType) == 0x000002, "Wrong size on BED_ProcessMachineNode_Fork_IsSupportViewType");
//static_assert(offsetof(BED_ProcessMachineNode_Fork_IsSupportViewType, InViewType) == 0x000000, "Member 'BED_ProcessMachineNode_Fork_IsSupportViewType::InViewType' has a wrong offset!");

// Function b1-Managed.BUI_DataValidatePanel.OnCheckDisplayFull
// 0x0001 (0x0001 - 0x0000)
struct BUI_DataValidatePanel_OnCheckDisplayFull final
{
public:
	uint8                                         bIsChecked : 1;                                    // 0x0000(0x0001)(BitIndex: 0x00, PropSize: 0x0001 (Parm, NoDestructor, HasGetValueTypeHash))
};
//static_assert(alignof(BUI_DataValidatePanel_OnCheckDisplayFull) == 0x000001, "Wrong alignment on BUI_DataValidatePanel_OnCheckDisplayFull");
//static_assert(sizeof(BUI_DataValidatePanel_OnCheckDisplayFull) == 0x000001, "Wrong size on BUI_DataValidatePanel_OnCheckDisplayFull");

// Function b1-Managed.BED_ProcessMachineNode_Join.CanUserAddInputInCS
// 0x0001 (0x0001 - 0x0000)
struct BED_ProcessMachineNode_Join_CanUserAddInputInCS final
{
public:
	uint8                                         ReturnValue : 1;                                   // 0x0000(0x0001)(BitIndex: 0x00, PropSize: 0x0001 (Parm, OutParm, ReturnParm, NoDestructor, HasGetValueTypeHash))
};
//static_assert(alignof(BED_ProcessMachineNode_Join_CanUserAddInputInCS) == 0x000001, "Wrong alignment on BED_ProcessMachineNode_Join_CanUserAddInputInCS");
//static_assert(sizeof(BED_ProcessMachineNode_Join_CanUserAddInputInCS) == 0x000001, "Wrong size on BED_ProcessMachineNode_Join_CanUserAddInputInCS");

// Function b1-Managed.BED_ProcessMachineNode_Join.IsSupportViewType
// 0x0002 (0x0002 - 0x0000)
struct BED_ProcessMachineNode_Join_IsSupportViewType final
{
public:
	ECalliopeViewType                             InViewType;                                        // 0x0000(0x0001)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         ReturnValue : 1;                                   // 0x0001(0x0001)(BitIndex: 0x00, PropSize: 0x0001 (Parm, OutParm, ReturnParm, NoDestructor, HasGetValueTypeHash))
};
//static_assert(alignof(BED_ProcessMachineNode_Join_IsSupportViewType) == 0x000001, "Wrong alignment on BED_ProcessMachineNode_Join_IsSupportViewType");
//static_assert(sizeof(BED_ProcessMachineNode_Join_IsSupportViewType) == 0x000002, "Wrong size on BED_ProcessMachineNode_Join_IsSupportViewType");
//static_assert(offsetof(BED_ProcessMachineNode_Join_IsSupportViewType, InViewType) == 0x000000, "Member 'BED_ProcessMachineNode_Join_IsSupportViewType::InViewType' has a wrong offset!");

// Function b1-Managed.BED_QuestNode_AiConversation.GetNodeDescriptionInCS
// 0x0010 (0x0010 - 0x0000)
struct BED_QuestNode_AiConversation_GetNodeDescriptionInCS final
{
public:
	class FString                                 ReturnValue;                                       // 0x0000(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash)
};
//static_assert(alignof(BED_QuestNode_AiConversation_GetNodeDescriptionInCS) == 0x000008, "Wrong alignment on BED_QuestNode_AiConversation_GetNodeDescriptionInCS");
//static_assert(sizeof(BED_QuestNode_AiConversation_GetNodeDescriptionInCS) == 0x000010, "Wrong size on BED_QuestNode_AiConversation_GetNodeDescriptionInCS");
//static_assert(offsetof(BED_QuestNode_AiConversation_GetNodeDescriptionInCS, ReturnValue) == 0x000000, "Member 'BED_QuestNode_AiConversation_GetNodeDescriptionInCS::ReturnValue' has a wrong offset!");

// Function b1-Managed.BED_QuestNode_GainItem.GetNodeDescriptionInCS
// 0x0010 (0x0010 - 0x0000)
struct BED_QuestNode_GainItem_GetNodeDescriptionInCS final
{
public:
	class FString                                 ReturnValue;                                       // 0x0000(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash)
};
//static_assert(alignof(BED_QuestNode_GainItem_GetNodeDescriptionInCS) == 0x000008, "Wrong alignment on BED_QuestNode_GainItem_GetNodeDescriptionInCS");
//static_assert(sizeof(BED_QuestNode_GainItem_GetNodeDescriptionInCS) == 0x000010, "Wrong size on BED_QuestNode_GainItem_GetNodeDescriptionInCS");
//static_assert(offsetof(BED_QuestNode_GainItem_GetNodeDescriptionInCS, ReturnValue) == 0x000000, "Member 'BED_QuestNode_GainItem_GetNodeDescriptionInCS::ReturnValue' has a wrong offset!");

// Function b1-Managed.BED_QuestNode_GamePass.GetNodeDescriptionInCS
// 0x0010 (0x0010 - 0x0000)
struct BED_QuestNode_GamePass_GetNodeDescriptionInCS final
{
public:
	class FString                                 ReturnValue;                                       // 0x0000(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash)
};
//static_assert(alignof(BED_QuestNode_GamePass_GetNodeDescriptionInCS) == 0x000008, "Wrong alignment on BED_QuestNode_GamePass_GetNodeDescriptionInCS");
//static_assert(sizeof(BED_QuestNode_GamePass_GetNodeDescriptionInCS) == 0x000010, "Wrong size on BED_QuestNode_GamePass_GetNodeDescriptionInCS");
//static_assert(offsetof(BED_QuestNode_GamePass_GetNodeDescriptionInCS, ReturnValue) == 0x000000, "Member 'BED_QuestNode_GamePass_GetNodeDescriptionInCS::ReturnValue' has a wrong offset!");

// Function b1-Managed.BED_QuestNode_OlineScreenMsg.GetNodeDescriptionInCS
// 0x0010 (0x0010 - 0x0000)
struct BED_QuestNode_OlineScreenMsg_GetNodeDescriptionInCS final
{
public:
	class FString                                 ReturnValue;                                       // 0x0000(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash)
};
//static_assert(alignof(BED_QuestNode_OlineScreenMsg_GetNodeDescriptionInCS) == 0x000008, "Wrong alignment on BED_QuestNode_OlineScreenMsg_GetNodeDescriptionInCS");
//static_assert(sizeof(BED_QuestNode_OlineScreenMsg_GetNodeDescriptionInCS) == 0x000010, "Wrong size on BED_QuestNode_OlineScreenMsg_GetNodeDescriptionInCS");
//static_assert(offsetof(BED_QuestNode_OlineScreenMsg_GetNodeDescriptionInCS, ReturnValue) == 0x000000, "Member 'BED_QuestNode_OlineScreenMsg_GetNodeDescriptionInCS::ReturnValue' has a wrong offset!");

// Function b1-Managed.BED_QuestNode_RemoveBuff.GetNodeDescriptionInCS
// 0x0010 (0x0010 - 0x0000)
struct BED_QuestNode_RemoveBuff_GetNodeDescriptionInCS final
{
public:
	class FString                                 ReturnValue;                                       // 0x0000(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash)
};
//static_assert(alignof(BED_QuestNode_RemoveBuff_GetNodeDescriptionInCS) == 0x000008, "Wrong alignment on BED_QuestNode_RemoveBuff_GetNodeDescriptionInCS");
//static_assert(sizeof(BED_QuestNode_RemoveBuff_GetNodeDescriptionInCS) == 0x000010, "Wrong size on BED_QuestNode_RemoveBuff_GetNodeDescriptionInCS");
//static_assert(offsetof(BED_QuestNode_RemoveBuff_GetNodeDescriptionInCS, ReturnValue) == 0x000000, "Member 'BED_QuestNode_RemoveBuff_GetNodeDescriptionInCS::ReturnValue' has a wrong offset!");

// Function b1-Managed.BED_QuestNode_SwitchCameraGroup.GetNodeDescriptionInCS
// 0x0010 (0x0010 - 0x0000)
struct BED_QuestNode_SwitchCameraGroup_GetNodeDescriptionInCS final
{
public:
	class FString                                 ReturnValue;                                       // 0x0000(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash)
};
//static_assert(alignof(BED_QuestNode_SwitchCameraGroup_GetNodeDescriptionInCS) == 0x000008, "Wrong alignment on BED_QuestNode_SwitchCameraGroup_GetNodeDescriptionInCS");
//static_assert(sizeof(BED_QuestNode_SwitchCameraGroup_GetNodeDescriptionInCS) == 0x000010, "Wrong size on BED_QuestNode_SwitchCameraGroup_GetNodeDescriptionInCS");
//static_assert(offsetof(BED_QuestNode_SwitchCameraGroup_GetNodeDescriptionInCS, ReturnValue) == 0x000000, "Member 'BED_QuestNode_SwitchCameraGroup_GetNodeDescriptionInCS::ReturnValue' has a wrong offset!");

// Function b1-Managed.BED_ComboNode_Restart.GetContextOutputsInCS
// 0x0010 (0x0010 - 0x0000)
struct BED_ComboNode_Restart_GetContextOutputsInCS final
{
public:
	TArray<class FName>                           ReturnValue;                                       // 0x0000(0x0010)(Parm, OutParm, ReturnParm)
};
//static_assert(alignof(BED_ComboNode_Restart_GetContextOutputsInCS) == 0x000008, "Wrong alignment on BED_ComboNode_Restart_GetContextOutputsInCS");
//static_assert(sizeof(BED_ComboNode_Restart_GetContextOutputsInCS) == 0x000010, "Wrong size on BED_ComboNode_Restart_GetContextOutputsInCS");
//static_assert(offsetof(BED_ComboNode_Restart_GetContextOutputsInCS, ReturnValue) == 0x000000, "Member 'BED_ComboNode_Restart_GetContextOutputsInCS::ReturnValue' has a wrong offset!");

// Function b1-Managed.BED_ComboNode_Restart.GetContextInputsInCS
// 0x0010 (0x0010 - 0x0000)
struct BED_ComboNode_Restart_GetContextInputsInCS final
{
public:
	TArray<class FName>                           ReturnValue;                                       // 0x0000(0x0010)(Parm, OutParm, ReturnParm)
};
//static_assert(alignof(BED_ComboNode_Restart_GetContextInputsInCS) == 0x000008, "Wrong alignment on BED_ComboNode_Restart_GetContextInputsInCS");
//static_assert(sizeof(BED_ComboNode_Restart_GetContextInputsInCS) == 0x000010, "Wrong size on BED_ComboNode_Restart_GetContextInputsInCS");
//static_assert(offsetof(BED_ComboNode_Restart_GetContextInputsInCS, ReturnValue) == 0x000000, "Member 'BED_ComboNode_Restart_GetContextInputsInCS::ReturnValue' has a wrong offset!");

// Function b1-Managed.BED_QuestNode_BlendToCamera.GetNodeDescriptionInCS
// 0x0010 (0x0010 - 0x0000)
struct BED_QuestNode_BlendToCamera_GetNodeDescriptionInCS final
{
public:
	class FString                                 ReturnValue;                                       // 0x0000(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash)
};
//static_assert(alignof(BED_QuestNode_BlendToCamera_GetNodeDescriptionInCS) == 0x000008, "Wrong alignment on BED_QuestNode_BlendToCamera_GetNodeDescriptionInCS");
//static_assert(sizeof(BED_QuestNode_BlendToCamera_GetNodeDescriptionInCS) == 0x000010, "Wrong size on BED_QuestNode_BlendToCamera_GetNodeDescriptionInCS");
//static_assert(offsetof(BED_QuestNode_BlendToCamera_GetNodeDescriptionInCS, ReturnValue) == 0x000000, "Member 'BED_QuestNode_BlendToCamera_GetNodeDescriptionInCS::ReturnValue' has a wrong offset!");

// Function b1-Managed.BED_QuestNode_CustomInput.GetNodeDescriptionInCS
// 0x0010 (0x0010 - 0x0000)
struct BED_QuestNode_CustomInput_GetNodeDescriptionInCS final
{
public:
	class FString                                 ReturnValue;                                       // 0x0000(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash)
};
//static_assert(alignof(BED_QuestNode_CustomInput_GetNodeDescriptionInCS) == 0x000008, "Wrong alignment on BED_QuestNode_CustomInput_GetNodeDescriptionInCS");
//static_assert(sizeof(BED_QuestNode_CustomInput_GetNodeDescriptionInCS) == 0x000010, "Wrong size on BED_QuestNode_CustomInput_GetNodeDescriptionInCS");
//static_assert(offsetof(BED_QuestNode_CustomInput_GetNodeDescriptionInCS, ReturnValue) == 0x000000, "Member 'BED_QuestNode_CustomInput_GetNodeDescriptionInCS::ReturnValue' has a wrong offset!");

// Function b1-Managed.BED_QuestNode_ExecutionSequence.CanUserAddOutputInCS
// 0x0001 (0x0001 - 0x0000)
struct BED_QuestNode_ExecutionSequence_CanUserAddOutputInCS final
{
public:
	uint8                                         ReturnValue : 1;                                   // 0x0000(0x0001)(BitIndex: 0x00, PropSize: 0x0001 (Parm, OutParm, ReturnParm, NoDestructor, HasGetValueTypeHash))
};
//static_assert(alignof(BED_QuestNode_ExecutionSequence_CanUserAddOutputInCS) == 0x000001, "Wrong alignment on BED_QuestNode_ExecutionSequence_CanUserAddOutputInCS");
//static_assert(sizeof(BED_QuestNode_ExecutionSequence_CanUserAddOutputInCS) == 0x000001, "Wrong size on BED_QuestNode_ExecutionSequence_CanUserAddOutputInCS");

// Function b1-Managed.BED_QuestNode_Log.GetNodeDescriptionInCS
// 0x0010 (0x0010 - 0x0000)
struct BED_QuestNode_Log_GetNodeDescriptionInCS final
{
public:
	class FString                                 ReturnValue;                                       // 0x0000(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash)
};
//static_assert(alignof(BED_QuestNode_Log_GetNodeDescriptionInCS) == 0x000008, "Wrong alignment on BED_QuestNode_Log_GetNodeDescriptionInCS");
//static_assert(sizeof(BED_QuestNode_Log_GetNodeDescriptionInCS) == 0x000010, "Wrong size on BED_QuestNode_Log_GetNodeDescriptionInCS");
//static_assert(offsetof(BED_QuestNode_Log_GetNodeDescriptionInCS, ReturnValue) == 0x000000, "Member 'BED_QuestNode_Log_GetNodeDescriptionInCS::ReturnValue' has a wrong offset!");

// Function b1-Managed.BED_QuestNode_Log.IsSupportViewType
// 0x0002 (0x0002 - 0x0000)
struct BED_QuestNode_Log_IsSupportViewType final
{
public:
	ECalliopeViewType                             InViewType;                                        // 0x0000(0x0001)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         ReturnValue : 1;                                   // 0x0001(0x0001)(BitIndex: 0x00, PropSize: 0x0001 (Parm, OutParm, ReturnParm, NoDestructor, HasGetValueTypeHash))
};
//static_assert(alignof(BED_QuestNode_Log_IsSupportViewType) == 0x000001, "Wrong alignment on BED_QuestNode_Log_IsSupportViewType");
//static_assert(sizeof(BED_QuestNode_Log_IsSupportViewType) == 0x000002, "Wrong size on BED_QuestNode_Log_IsSupportViewType");
//static_assert(offsetof(BED_QuestNode_Log_IsSupportViewType, InViewType) == 0x000000, "Member 'BED_QuestNode_Log_IsSupportViewType::InViewType' has a wrong offset!");

// Function b1-Managed.BED_QuestNode_LogicalOr.CanUserAddInputInCS
// 0x0001 (0x0001 - 0x0000)
struct BED_QuestNode_LogicalOr_CanUserAddInputInCS final
{
public:
	uint8                                         ReturnValue : 1;                                   // 0x0000(0x0001)(BitIndex: 0x00, PropSize: 0x0001 (Parm, OutParm, ReturnParm, NoDestructor, HasGetValueTypeHash))
};
//static_assert(alignof(BED_QuestNode_LogicalOr_CanUserAddInputInCS) == 0x000001, "Wrong alignment on BED_QuestNode_LogicalOr_CanUserAddInputInCS");
//static_assert(sizeof(BED_QuestNode_LogicalOr_CanUserAddInputInCS) == 0x000001, "Wrong size on BED_QuestNode_LogicalOr_CanUserAddInputInCS");

// Function b1-Managed.BED_QuestNode_ObserveByCondition.PostPropertyChanged
// 0x0020 (0x0020 - 0x0000)
struct BED_QuestNode_ObserveByCondition_PostPropertyChanged final
{
public:
	class FString                                 MemberName;                                        // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash)
	class FString                                 PropertyName;                                      // 0x0010(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash)
};
//static_assert(alignof(BED_QuestNode_ObserveByCondition_PostPropertyChanged) == 0x000008, "Wrong alignment on BED_QuestNode_ObserveByCondition_PostPropertyChanged");
//static_assert(sizeof(BED_QuestNode_ObserveByCondition_PostPropertyChanged) == 0x000020, "Wrong size on BED_QuestNode_ObserveByCondition_PostPropertyChanged");
//static_assert(offsetof(BED_QuestNode_ObserveByCondition_PostPropertyChanged, MemberName) == 0x000000, "Member 'BED_QuestNode_ObserveByCondition_PostPropertyChanged::MemberName' has a wrong offset!");
//static_assert(offsetof(BED_QuestNode_ObserveByCondition_PostPropertyChanged, PropertyName) == 0x000010, "Member 'BED_QuestNode_ObserveByCondition_PostPropertyChanged::PropertyName' has a wrong offset!");

// Function b1-Managed.BED_QuestNode_ObserveByCondition.GetNodeDescriptionInCS
// 0x0010 (0x0010 - 0x0000)
struct BED_QuestNode_ObserveByCondition_GetNodeDescriptionInCS final
{
public:
	class FString                                 ReturnValue;                                       // 0x0000(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash)
};
//static_assert(alignof(BED_QuestNode_ObserveByCondition_GetNodeDescriptionInCS) == 0x000008, "Wrong alignment on BED_QuestNode_ObserveByCondition_GetNodeDescriptionInCS");
//static_assert(sizeof(BED_QuestNode_ObserveByCondition_GetNodeDescriptionInCS) == 0x000010, "Wrong size on BED_QuestNode_ObserveByCondition_GetNodeDescriptionInCS");
//static_assert(offsetof(BED_QuestNode_ObserveByCondition_GetNodeDescriptionInCS, ReturnValue) == 0x000000, "Member 'BED_QuestNode_ObserveByCondition_GetNodeDescriptionInCS::ReturnValue' has a wrong offset!");

// Function b1-Managed.BED_QuestNode_SubGraph.GetContextOutputsInCS
// 0x0010 (0x0010 - 0x0000)
struct BED_QuestNode_SubGraph_GetContextOutputsInCS final
{
public:
	TArray<class FName>                           ReturnValue;                                       // 0x0000(0x0010)(Parm, OutParm, ReturnParm)
};
//static_assert(alignof(BED_QuestNode_SubGraph_GetContextOutputsInCS) == 0x000008, "Wrong alignment on BED_QuestNode_SubGraph_GetContextOutputsInCS");
//static_assert(sizeof(BED_QuestNode_SubGraph_GetContextOutputsInCS) == 0x000010, "Wrong size on BED_QuestNode_SubGraph_GetContextOutputsInCS");
//static_assert(offsetof(BED_QuestNode_SubGraph_GetContextOutputsInCS, ReturnValue) == 0x000000, "Member 'BED_QuestNode_SubGraph_GetContextOutputsInCS::ReturnValue' has a wrong offset!");

// Function b1-Managed.BED_QuestNode_SubGraph.GetContextInputsInCS
// 0x0010 (0x0010 - 0x0000)
struct BED_QuestNode_SubGraph_GetContextInputsInCS final
{
public:
	TArray<class FName>                           ReturnValue;                                       // 0x0000(0x0010)(Parm, OutParm, ReturnParm)
};
//static_assert(alignof(BED_QuestNode_SubGraph_GetContextInputsInCS) == 0x000008, "Wrong alignment on BED_QuestNode_SubGraph_GetContextInputsInCS");
//static_assert(sizeof(BED_QuestNode_SubGraph_GetContextInputsInCS) == 0x000010, "Wrong size on BED_QuestNode_SubGraph_GetContextInputsInCS");
//static_assert(offsetof(BED_QuestNode_SubGraph_GetContextInputsInCS, ReturnValue) == 0x000000, "Member 'BED_QuestNode_SubGraph_GetContextInputsInCS::ReturnValue' has a wrong offset!");

// Function b1-Managed.BED_QuestNode_SubGraph.PostPropertyChanged
// 0x0020 (0x0020 - 0x0000)
struct BED_QuestNode_SubGraph_PostPropertyChanged final
{
public:
	class FString                                 MemberName;                                        // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash)
	class FString                                 PropertyName;                                      // 0x0010(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash)
};
//static_assert(alignof(BED_QuestNode_SubGraph_PostPropertyChanged) == 0x000008, "Wrong alignment on BED_QuestNode_SubGraph_PostPropertyChanged");
//static_assert(sizeof(BED_QuestNode_SubGraph_PostPropertyChanged) == 0x000020, "Wrong size on BED_QuestNode_SubGraph_PostPropertyChanged");
//static_assert(offsetof(BED_QuestNode_SubGraph_PostPropertyChanged, MemberName) == 0x000000, "Member 'BED_QuestNode_SubGraph_PostPropertyChanged::MemberName' has a wrong offset!");
//static_assert(offsetof(BED_QuestNode_SubGraph_PostPropertyChanged, PropertyName) == 0x000010, "Member 'BED_QuestNode_SubGraph_PostPropertyChanged::PropertyName' has a wrong offset!");

// Function b1-Managed.BED_QuestNode_SubGraph.PrePropertyChanged
// 0x0010 (0x0010 - 0x0000)
struct BED_QuestNode_SubGraph_PrePropertyChanged final
{
public:
	class FString                                 PropertyName;                                      // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash)
};
//static_assert(alignof(BED_QuestNode_SubGraph_PrePropertyChanged) == 0x000008, "Wrong alignment on BED_QuestNode_SubGraph_PrePropertyChanged");
//static_assert(sizeof(BED_QuestNode_SubGraph_PrePropertyChanged) == 0x000010, "Wrong size on BED_QuestNode_SubGraph_PrePropertyChanged");
//static_assert(offsetof(BED_QuestNode_SubGraph_PrePropertyChanged, PropertyName) == 0x000000, "Member 'BED_QuestNode_SubGraph_PrePropertyChanged::PropertyName' has a wrong offset!");

// Function b1-Managed.BED_QuestNode_SubGraph.GetAssetToEditInCS
// 0x0008 (0x0008 - 0x0000)
struct BED_QuestNode_SubGraph_GetAssetToEditInCS final
{
public:
	class UObject*                                ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
//static_assert(alignof(BED_QuestNode_SubGraph_GetAssetToEditInCS) == 0x000008, "Wrong alignment on BED_QuestNode_SubGraph_GetAssetToEditInCS");
//static_assert(sizeof(BED_QuestNode_SubGraph_GetAssetToEditInCS) == 0x000008, "Wrong size on BED_QuestNode_SubGraph_GetAssetToEditInCS");
//static_assert(offsetof(BED_QuestNode_SubGraph_GetAssetToEditInCS, ReturnValue) == 0x000000, "Member 'BED_QuestNode_SubGraph_GetAssetToEditInCS::ReturnValue' has a wrong offset!");

// Function b1-Managed.BED_QuestNode_SubGraph.GetNodeDescriptionInCS
// 0x0010 (0x0010 - 0x0000)
struct BED_QuestNode_SubGraph_GetNodeDescriptionInCS final
{
public:
	class FString                                 ReturnValue;                                       // 0x0000(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash)
};
//static_assert(alignof(BED_QuestNode_SubGraph_GetNodeDescriptionInCS) == 0x000008, "Wrong alignment on BED_QuestNode_SubGraph_GetNodeDescriptionInCS");
//static_assert(sizeof(BED_QuestNode_SubGraph_GetNodeDescriptionInCS) == 0x000010, "Wrong size on BED_QuestNode_SubGraph_GetNodeDescriptionInCS");
//static_assert(offsetof(BED_QuestNode_SubGraph_GetNodeDescriptionInCS, ReturnValue) == 0x000000, "Member 'BED_QuestNode_SubGraph_GetNodeDescriptionInCS::ReturnValue' has a wrong offset!");

// Function b1-Managed.BED_QuestNode_Timer.GetNodeDescriptionInCS
// 0x0010 (0x0010 - 0x0000)
struct BED_QuestNode_Timer_GetNodeDescriptionInCS final
{
public:
	class FString                                 ReturnValue;                                       // 0x0000(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash)
};
//static_assert(alignof(BED_QuestNode_Timer_GetNodeDescriptionInCS) == 0x000008, "Wrong alignment on BED_QuestNode_Timer_GetNodeDescriptionInCS");
//static_assert(sizeof(BED_QuestNode_Timer_GetNodeDescriptionInCS) == 0x000010, "Wrong size on BED_QuestNode_Timer_GetNodeDescriptionInCS");
//static_assert(offsetof(BED_QuestNode_Timer_GetNodeDescriptionInCS, ReturnValue) == 0x000000, "Member 'BED_QuestNode_Timer_GetNodeDescriptionInCS::ReturnValue' has a wrong offset!");

// Function b1-Managed.BED_StateNode_Join.CanUserAddInputInCS
// 0x0001 (0x0001 - 0x0000)
struct BED_StateNode_Join_CanUserAddInputInCS final
{
public:
	uint8                                         ReturnValue : 1;                                   // 0x0000(0x0001)(BitIndex: 0x00, PropSize: 0x0001 (Parm, OutParm, ReturnParm, NoDestructor, HasGetValueTypeHash))
};
//static_assert(alignof(BED_StateNode_Join_CanUserAddInputInCS) == 0x000001, "Wrong alignment on BED_StateNode_Join_CanUserAddInputInCS");
//static_assert(sizeof(BED_StateNode_Join_CanUserAddInputInCS) == 0x000001, "Wrong size on BED_StateNode_Join_CanUserAddInputInCS");

// Function b1-Managed.BED_StateNode_Junction.GetNodeDescriptionInCS
// 0x0010 (0x0010 - 0x0000)
struct BED_StateNode_Junction_GetNodeDescriptionInCS final
{
public:
	class FString                                 ReturnValue;                                       // 0x0000(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash)
};
//static_assert(alignof(BED_StateNode_Junction_GetNodeDescriptionInCS) == 0x000008, "Wrong alignment on BED_StateNode_Junction_GetNodeDescriptionInCS");
//static_assert(sizeof(BED_StateNode_Junction_GetNodeDescriptionInCS) == 0x000010, "Wrong size on BED_StateNode_Junction_GetNodeDescriptionInCS");
//static_assert(offsetof(BED_StateNode_Junction_GetNodeDescriptionInCS, ReturnValue) == 0x000000, "Member 'BED_StateNode_Junction_GetNodeDescriptionInCS::ReturnValue' has a wrong offset!");

// Function b1-Managed.BED_StateNode_Single.GetContextOutputsInCS
// 0x0010 (0x0010 - 0x0000)
struct BED_StateNode_Single_GetContextOutputsInCS final
{
public:
	TArray<class FName>                           ReturnValue;                                       // 0x0000(0x0010)(Parm, OutParm, ReturnParm)
};
//static_assert(alignof(BED_StateNode_Single_GetContextOutputsInCS) == 0x000008, "Wrong alignment on BED_StateNode_Single_GetContextOutputsInCS");
//static_assert(sizeof(BED_StateNode_Single_GetContextOutputsInCS) == 0x000010, "Wrong size on BED_StateNode_Single_GetContextOutputsInCS");
//static_assert(offsetof(BED_StateNode_Single_GetContextOutputsInCS, ReturnValue) == 0x000000, "Member 'BED_StateNode_Single_GetContextOutputsInCS::ReturnValue' has a wrong offset!");

// Function b1-Managed.BED_StateNode_Single.GetContextInputsInCS
// 0x0010 (0x0010 - 0x0000)
struct BED_StateNode_Single_GetContextInputsInCS final
{
public:
	TArray<class FName>                           ReturnValue;                                       // 0x0000(0x0010)(Parm, OutParm, ReturnParm)
};
//static_assert(alignof(BED_StateNode_Single_GetContextInputsInCS) == 0x000008, "Wrong alignment on BED_StateNode_Single_GetContextInputsInCS");
//static_assert(sizeof(BED_StateNode_Single_GetContextInputsInCS) == 0x000010, "Wrong size on BED_StateNode_Single_GetContextInputsInCS");
//static_assert(offsetof(BED_StateNode_Single_GetContextInputsInCS, ReturnValue) == 0x000000, "Member 'BED_StateNode_Single_GetContextInputsInCS::ReturnValue' has a wrong offset!");

// Function b1-Managed.BED_StateNode_Single.PostPropertyChanged
// 0x0020 (0x0020 - 0x0000)
struct BED_StateNode_Single_PostPropertyChanged final
{
public:
	class FString                                 MemberName;                                        // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash)
	class FString                                 PropertyName;                                      // 0x0010(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash)
};
//static_assert(alignof(BED_StateNode_Single_PostPropertyChanged) == 0x000008, "Wrong alignment on BED_StateNode_Single_PostPropertyChanged");
//static_assert(sizeof(BED_StateNode_Single_PostPropertyChanged) == 0x000020, "Wrong size on BED_StateNode_Single_PostPropertyChanged");
//static_assert(offsetof(BED_StateNode_Single_PostPropertyChanged, MemberName) == 0x000000, "Member 'BED_StateNode_Single_PostPropertyChanged::MemberName' has a wrong offset!");
//static_assert(offsetof(BED_StateNode_Single_PostPropertyChanged, PropertyName) == 0x000010, "Member 'BED_StateNode_Single_PostPropertyChanged::PropertyName' has a wrong offset!");

// Function b1-Managed.BED_StateNode_Single.GetAssetToEditInCS
// 0x0008 (0x0008 - 0x0000)
struct BED_StateNode_Single_GetAssetToEditInCS final
{
public:
	class UObject*                                ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
//static_assert(alignof(BED_StateNode_Single_GetAssetToEditInCS) == 0x000008, "Wrong alignment on BED_StateNode_Single_GetAssetToEditInCS");
//static_assert(sizeof(BED_StateNode_Single_GetAssetToEditInCS) == 0x000008, "Wrong size on BED_StateNode_Single_GetAssetToEditInCS");
//static_assert(offsetof(BED_StateNode_Single_GetAssetToEditInCS, ReturnValue) == 0x000000, "Member 'BED_StateNode_Single_GetAssetToEditInCS::ReturnValue' has a wrong offset!");

// Function b1-Managed.BED_StateNode_Single.PrePropertyChanged
// 0x0010 (0x0010 - 0x0000)
struct BED_StateNode_Single_PrePropertyChanged final
{
public:
	class FString                                 PropertyName;                                      // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash)
};
//static_assert(alignof(BED_StateNode_Single_PrePropertyChanged) == 0x000008, "Wrong alignment on BED_StateNode_Single_PrePropertyChanged");
//static_assert(sizeof(BED_StateNode_Single_PrePropertyChanged) == 0x000010, "Wrong size on BED_StateNode_Single_PrePropertyChanged");
//static_assert(offsetof(BED_StateNode_Single_PrePropertyChanged, PropertyName) == 0x000000, "Member 'BED_StateNode_Single_PrePropertyChanged::PropertyName' has a wrong offset!");

// Function b1-Managed.BED_StateNode_Single.GetNodeDescriptionInCS
// 0x0010 (0x0010 - 0x0000)
struct BED_StateNode_Single_GetNodeDescriptionInCS final
{
public:
	class FString                                 ReturnValue;                                       // 0x0000(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash)
};
//static_assert(alignof(BED_StateNode_Single_GetNodeDescriptionInCS) == 0x000008, "Wrong alignment on BED_StateNode_Single_GetNodeDescriptionInCS");
//static_assert(sizeof(BED_StateNode_Single_GetNodeDescriptionInCS) == 0x000010, "Wrong size on BED_StateNode_Single_GetNodeDescriptionInCS");
//static_assert(offsetof(BED_StateNode_Single_GetNodeDescriptionInCS, ReturnValue) == 0x000000, "Member 'BED_StateNode_Single_GetNodeDescriptionInCS::ReturnValue' has a wrong offset!");

// Function b1-Managed.BED_StateNode_Single.SetSubGraphAssetInPIE
// 0x0008 (0x0008 - 0x0000)
struct BED_StateNode_Single_SetSubGraphAssetInPIE final
{
public:
	class UCalliopeAsset*                         InSubGraphAsset;                                   // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
//static_assert(alignof(BED_StateNode_Single_SetSubGraphAssetInPIE) == 0x000008, "Wrong alignment on BED_StateNode_Single_SetSubGraphAssetInPIE");
//static_assert(sizeof(BED_StateNode_Single_SetSubGraphAssetInPIE) == 0x000008, "Wrong size on BED_StateNode_Single_SetSubGraphAssetInPIE");
//static_assert(offsetof(BED_StateNode_Single_SetSubGraphAssetInPIE, InSubGraphAsset) == 0x000000, "Member 'BED_StateNode_Single_SetSubGraphAssetInPIE::InSubGraphAsset' has a wrong offset!");

// Function b1-Managed.BED_StateNode_Single.IsSubGraphNode
// 0x0001 (0x0001 - 0x0000)
struct BED_StateNode_Single_IsSubGraphNode final
{
public:
	uint8                                         ReturnValue : 1;                                   // 0x0000(0x0001)(BitIndex: 0x00, PropSize: 0x0001 (Parm, OutParm, ReturnParm, NoDestructor, HasGetValueTypeHash))
};
//static_assert(alignof(BED_StateNode_Single_IsSubGraphNode) == 0x000001, "Wrong alignment on BED_StateNode_Single_IsSubGraphNode");
//static_assert(sizeof(BED_StateNode_Single_IsSubGraphNode) == 0x000001, "Wrong size on BED_StateNode_Single_IsSubGraphNode");

// Function b1-Managed.BED_TaskNode_ExecutionSequence.CanUserAddOutputInCS
// 0x0001 (0x0001 - 0x0000)
struct BED_TaskNode_ExecutionSequence_CanUserAddOutputInCS final
{
public:
	uint8                                         ReturnValue : 1;                                   // 0x0000(0x0001)(BitIndex: 0x00, PropSize: 0x0001 (Parm, OutParm, ReturnParm, NoDestructor, HasGetValueTypeHash))
};
//static_assert(alignof(BED_TaskNode_ExecutionSequence_CanUserAddOutputInCS) == 0x000001, "Wrong alignment on BED_TaskNode_ExecutionSequence_CanUserAddOutputInCS");
//static_assert(sizeof(BED_TaskNode_ExecutionSequence_CanUserAddOutputInCS) == 0x000001, "Wrong size on BED_TaskNode_ExecutionSequence_CanUserAddOutputInCS");

// Function b1-Managed.BED_TaskNode_LogicalAnd.CanUserAddInputInCS
// 0x0001 (0x0001 - 0x0000)
struct BED_TaskNode_LogicalAnd_CanUserAddInputInCS final
{
public:
	uint8                                         ReturnValue : 1;                                   // 0x0000(0x0001)(BitIndex: 0x00, PropSize: 0x0001 (Parm, OutParm, ReturnParm, NoDestructor, HasGetValueTypeHash))
};
//static_assert(alignof(BED_TaskNode_LogicalAnd_CanUserAddInputInCS) == 0x000001, "Wrong alignment on BED_TaskNode_LogicalAnd_CanUserAddInputInCS");
//static_assert(sizeof(BED_TaskNode_LogicalAnd_CanUserAddInputInCS) == 0x000001, "Wrong size on BED_TaskNode_LogicalAnd_CanUserAddInputInCS");

// Function b1-Managed.BED_TaskNode_ObserveUnitByCondition.PostPropertyChanged
// 0x0020 (0x0020 - 0x0000)
struct BED_TaskNode_ObserveUnitByCondition_PostPropertyChanged final
{
public:
	class FString                                 MemberName;                                        // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash)
	class FString                                 PropertyName;                                      // 0x0010(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash)
};
//static_assert(alignof(BED_TaskNode_ObserveUnitByCondition_PostPropertyChanged) == 0x000008, "Wrong alignment on BED_TaskNode_ObserveUnitByCondition_PostPropertyChanged");
//static_assert(sizeof(BED_TaskNode_ObserveUnitByCondition_PostPropertyChanged) == 0x000020, "Wrong size on BED_TaskNode_ObserveUnitByCondition_PostPropertyChanged");
//static_assert(offsetof(BED_TaskNode_ObserveUnitByCondition_PostPropertyChanged, MemberName) == 0x000000, "Member 'BED_TaskNode_ObserveUnitByCondition_PostPropertyChanged::MemberName' has a wrong offset!");
//static_assert(offsetof(BED_TaskNode_ObserveUnitByCondition_PostPropertyChanged, PropertyName) == 0x000010, "Member 'BED_TaskNode_ObserveUnitByCondition_PostPropertyChanged::PropertyName' has a wrong offset!");

// Function b1-Managed.BED_TaskNode_ObserveUnitByCondition.GetNodeDescriptionInCS
// 0x0010 (0x0010 - 0x0000)
struct BED_TaskNode_ObserveUnitByCondition_GetNodeDescriptionInCS final
{
public:
	class FString                                 ReturnValue;                                       // 0x0000(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash)
};
//static_assert(alignof(BED_TaskNode_ObserveUnitByCondition_GetNodeDescriptionInCS) == 0x000008, "Wrong alignment on BED_TaskNode_ObserveUnitByCondition_GetNodeDescriptionInCS");
//static_assert(sizeof(BED_TaskNode_ObserveUnitByCondition_GetNodeDescriptionInCS) == 0x000010, "Wrong size on BED_TaskNode_ObserveUnitByCondition_GetNodeDescriptionInCS");
//static_assert(offsetof(BED_TaskNode_ObserveUnitByCondition_GetNodeDescriptionInCS, ReturnValue) == 0x000000, "Member 'BED_TaskNode_ObserveUnitByCondition_GetNodeDescriptionInCS::ReturnValue' has a wrong offset!");

// Function b1-Managed.BED_TaskNode_ObserveRoleData.GetNodeDescriptionInCS
// 0x0010 (0x0010 - 0x0000)
struct BED_TaskNode_ObserveRoleData_GetNodeDescriptionInCS final
{
public:
	class FString                                 ReturnValue;                                       // 0x0000(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash)
};
//static_assert(alignof(BED_TaskNode_ObserveRoleData_GetNodeDescriptionInCS) == 0x000008, "Wrong alignment on BED_TaskNode_ObserveRoleData_GetNodeDescriptionInCS");
//static_assert(sizeof(BED_TaskNode_ObserveRoleData_GetNodeDescriptionInCS) == 0x000010, "Wrong size on BED_TaskNode_ObserveRoleData_GetNodeDescriptionInCS");
//static_assert(offsetof(BED_TaskNode_ObserveRoleData_GetNodeDescriptionInCS, ReturnValue) == 0x000000, "Member 'BED_TaskNode_ObserveRoleData_GetNodeDescriptionInCS::ReturnValue' has a wrong offset!");

// Function b1-Managed.BUI_EnemyBloodBarPure.DoGSInit
// 0x0008 (0x0008 - 0x0000)
struct BUI_EnemyBloodBarPure_DoGSInit final
{
public:
	class AActor*                                 OwnerCharacter;                                    // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
//static_assert(alignof(BUI_EnemyBloodBarPure_DoGSInit) == 0x000008, "Wrong alignment on BUI_EnemyBloodBarPure_DoGSInit");
//static_assert(sizeof(BUI_EnemyBloodBarPure_DoGSInit) == 0x000008, "Wrong size on BUI_EnemyBloodBarPure_DoGSInit");
//static_assert(offsetof(BUI_EnemyBloodBarPure_DoGSInit, OwnerCharacter) == 0x000000, "Member 'BUI_EnemyBloodBarPure_DoGSInit::OwnerCharacter' has a wrong offset!");

// Function b1-Managed.BUI_EnemyBloodBarPure.DoShowIn
// 0x0008 (0x0008 - 0x0000)
struct BUI_EnemyBloodBarPure_DoShowIn final
{
public:
	class AActor*                                 Owner;                                             // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
//static_assert(alignof(BUI_EnemyBloodBarPure_DoShowIn) == 0x000008, "Wrong alignment on BUI_EnemyBloodBarPure_DoShowIn");
//static_assert(sizeof(BUI_EnemyBloodBarPure_DoShowIn) == 0x000008, "Wrong size on BUI_EnemyBloodBarPure_DoShowIn");
//static_assert(offsetof(BUI_EnemyBloodBarPure_DoShowIn, Owner) == 0x000000, "Member 'BUI_EnemyBloodBarPure_DoShowIn::Owner' has a wrong offset!");

// Function b1-Managed.BUI_BossBar.GSInit
// 0x0008 (0x0008 - 0x0000)
struct BUI_BossBar_GSInit final
{
public:
	class AActor*                                 InOwnerCharacter;                                  // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
//static_assert(alignof(BUI_BossBar_GSInit) == 0x000008, "Wrong alignment on BUI_BossBar_GSInit");
//static_assert(sizeof(BUI_BossBar_GSInit) == 0x000008, "Wrong size on BUI_BossBar_GSInit");
//static_assert(offsetof(BUI_BossBar_GSInit, InOwnerCharacter) == 0x000000, "Member 'BUI_BossBar_GSInit::InOwnerCharacter' has a wrong offset!");

// Function b1-Managed.BED_TaskNode_RunProcessGraph.PostPropertyChanged
// 0x0020 (0x0020 - 0x0000)
struct BED_TaskNode_RunProcessGraph_PostPropertyChanged final
{
public:
	class FString                                 MemberName;                                        // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash)
	class FString                                 PropertyName;                                      // 0x0010(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash)
};
//static_assert(alignof(BED_TaskNode_RunProcessGraph_PostPropertyChanged) == 0x000008, "Wrong alignment on BED_TaskNode_RunProcessGraph_PostPropertyChanged");
//static_assert(sizeof(BED_TaskNode_RunProcessGraph_PostPropertyChanged) == 0x000020, "Wrong size on BED_TaskNode_RunProcessGraph_PostPropertyChanged");
//static_assert(offsetof(BED_TaskNode_RunProcessGraph_PostPropertyChanged, MemberName) == 0x000000, "Member 'BED_TaskNode_RunProcessGraph_PostPropertyChanged::MemberName' has a wrong offset!");
//static_assert(offsetof(BED_TaskNode_RunProcessGraph_PostPropertyChanged, PropertyName) == 0x000010, "Member 'BED_TaskNode_RunProcessGraph_PostPropertyChanged::PropertyName' has a wrong offset!");

// Function b1-Managed.BED_TaskNode_RunProcessGraph.PrePropertyChanged
// 0x0010 (0x0010 - 0x0000)
struct BED_TaskNode_RunProcessGraph_PrePropertyChanged final
{
public:
	class FString                                 PropertyName;                                      // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash)
};
//static_assert(alignof(BED_TaskNode_RunProcessGraph_PrePropertyChanged) == 0x000008, "Wrong alignment on BED_TaskNode_RunProcessGraph_PrePropertyChanged");
//static_assert(sizeof(BED_TaskNode_RunProcessGraph_PrePropertyChanged) == 0x000010, "Wrong size on BED_TaskNode_RunProcessGraph_PrePropertyChanged");
//static_assert(offsetof(BED_TaskNode_RunProcessGraph_PrePropertyChanged, PropertyName) == 0x000000, "Member 'BED_TaskNode_RunProcessGraph_PrePropertyChanged::PropertyName' has a wrong offset!");

// Function b1-Managed.BED_TaskNode_RunProcessGraph.GetAssetToEditInCS
// 0x0008 (0x0008 - 0x0000)
struct BED_TaskNode_RunProcessGraph_GetAssetToEditInCS final
{
public:
	class UObject*                                ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
//static_assert(alignof(BED_TaskNode_RunProcessGraph_GetAssetToEditInCS) == 0x000008, "Wrong alignment on BED_TaskNode_RunProcessGraph_GetAssetToEditInCS");
//static_assert(sizeof(BED_TaskNode_RunProcessGraph_GetAssetToEditInCS) == 0x000008, "Wrong size on BED_TaskNode_RunProcessGraph_GetAssetToEditInCS");
//static_assert(offsetof(BED_TaskNode_RunProcessGraph_GetAssetToEditInCS, ReturnValue) == 0x000000, "Member 'BED_TaskNode_RunProcessGraph_GetAssetToEditInCS::ReturnValue' has a wrong offset!");

// Function b1-Managed.BED_TaskNode_RunProcessGraph.GetNodeDescriptionInCS
// 0x0010 (0x0010 - 0x0000)
struct BED_TaskNode_RunProcessGraph_GetNodeDescriptionInCS final
{
public:
	class FString                                 ReturnValue;                                       // 0x0000(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash)
};
//static_assert(alignof(BED_TaskNode_RunProcessGraph_GetNodeDescriptionInCS) == 0x000008, "Wrong alignment on BED_TaskNode_RunProcessGraph_GetNodeDescriptionInCS");
//static_assert(sizeof(BED_TaskNode_RunProcessGraph_GetNodeDescriptionInCS) == 0x000010, "Wrong size on BED_TaskNode_RunProcessGraph_GetNodeDescriptionInCS");
//static_assert(offsetof(BED_TaskNode_RunProcessGraph_GetNodeDescriptionInCS, ReturnValue) == 0x000000, "Member 'BED_TaskNode_RunProcessGraph_GetNodeDescriptionInCS::ReturnValue' has a wrong offset!");

// Function b1-Managed.BED_TaskNode_SaveArchive.GetNodeDescriptionInCS
// 0x0010 (0x0010 - 0x0000)
struct BED_TaskNode_SaveArchive_GetNodeDescriptionInCS final
{
public:
	class FString                                 ReturnValue;                                       // 0x0000(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash)
};
//static_assert(alignof(BED_TaskNode_SaveArchive_GetNodeDescriptionInCS) == 0x000008, "Wrong alignment on BED_TaskNode_SaveArchive_GetNodeDescriptionInCS");
//static_assert(sizeof(BED_TaskNode_SaveArchive_GetNodeDescriptionInCS) == 0x000010, "Wrong size on BED_TaskNode_SaveArchive_GetNodeDescriptionInCS");
//static_assert(offsetof(BED_TaskNode_SaveArchive_GetNodeDescriptionInCS, ReturnValue) == 0x000000, "Member 'BED_TaskNode_SaveArchive_GetNodeDescriptionInCS::ReturnValue' has a wrong offset!");

// Function b1-Managed.SkillsRefCheckToolUtility.CheckMontage
// 0x0018 (0x0018 - 0x0000)
struct SkillsRefCheckToolUtility_CheckMontage final
{
public:
	int32                                         SkillID;                                           // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_4[0x4];                                        // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 Path;                                              // 0x0008(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash)
};
//static_assert(alignof(SkillsRefCheckToolUtility_CheckMontage) == 0x000008, "Wrong alignment on SkillsRefCheckToolUtility_CheckMontage");
//static_assert(sizeof(SkillsRefCheckToolUtility_CheckMontage) == 0x000018, "Wrong size on SkillsRefCheckToolUtility_CheckMontage");
//static_assert(offsetof(SkillsRefCheckToolUtility_CheckMontage, SkillID) == 0x000000, "Member 'SkillsRefCheckToolUtility_CheckMontage::SkillID' has a wrong offset!");
//static_assert(offsetof(SkillsRefCheckToolUtility_CheckMontage, Path) == 0x000008, "Member 'SkillsRefCheckToolUtility_CheckMontage::Path' has a wrong offset!");

// Function b1-Managed.SkillsRefCheckToolUtility.CheckNotify
// 0x00C0 (0x00C0 - 0x0000)
struct SkillsRefCheckToolUtility_CheckNotify final
{
public:
	int32                                         SkillID;                                           // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_4[0x4];                                        // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FAnimNotifyEvent                       Notify;                                            // 0x0008(0x00B8)(Parm)
};
//static_assert(alignof(SkillsRefCheckToolUtility_CheckNotify) == 0x000008, "Wrong alignment on SkillsRefCheckToolUtility_CheckNotify");
//static_assert(sizeof(SkillsRefCheckToolUtility_CheckNotify) == 0x0000C0, "Wrong size on SkillsRefCheckToolUtility_CheckNotify");
//static_assert(offsetof(SkillsRefCheckToolUtility_CheckNotify, SkillID) == 0x000000, "Member 'SkillsRefCheckToolUtility_CheckNotify::SkillID' has a wrong offset!");
//static_assert(offsetof(SkillsRefCheckToolUtility_CheckNotify, Notify) == 0x000008, "Member 'SkillsRefCheckToolUtility_CheckNotify::Notify' has a wrong offset!");

// Function b1-Managed.GSMovePanel.SetOffset
// 0x0004 (0x0004 - 0x0000)
struct GSMovePanel_SetOffset final
{
public:
	float                                         Offset_0;                                          // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
//static_assert(alignof(GSMovePanel_SetOffset) == 0x000004, "Wrong alignment on GSMovePanel_SetOffset");
//static_assert(sizeof(GSMovePanel_SetOffset) == 0x000004, "Wrong size on GSMovePanel_SetOffset");
//static_assert(offsetof(GSMovePanel_SetOffset, Offset_0) == 0x000000, "Member 'GSMovePanel_SetOffset::Offset_0' has a wrong offset!");

// Function b1-Managed.GSMovePanel.SetScale
// 0x0004 (0x0004 - 0x0000)
struct GSMovePanel_SetScale final
{
public:
	float                                         Scale_0;                                           // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
//static_assert(alignof(GSMovePanel_SetScale) == 0x000004, "Wrong alignment on GSMovePanel_SetScale");
//static_assert(sizeof(GSMovePanel_SetScale) == 0x000004, "Wrong size on GSMovePanel_SetScale");
//static_assert(offsetof(GSMovePanel_SetScale, Scale_0) == 0x000000, "Member 'GSMovePanel_SetScale::Scale_0' has a wrong offset!");

// Function b1-Managed.GSMovePanel.SetSpeed
// 0x0004 (0x0004 - 0x0000)
struct GSMovePanel_SetSpeed final
{
public:
	float                                         Speed_0;                                           // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
//static_assert(alignof(GSMovePanel_SetSpeed) == 0x000004, "Wrong alignment on GSMovePanel_SetSpeed");
//static_assert(sizeof(GSMovePanel_SetSpeed) == 0x000004, "Wrong size on GSMovePanel_SetSpeed");
//static_assert(offsetof(GSMovePanel_SetSpeed, Speed_0) == 0x000000, "Member 'GSMovePanel_SetSpeed::Speed_0' has a wrong offset!");

// Function b1-Managed.BST_PostAudioOnUnit.GetDurationTime
// 0x0004 (0x0004 - 0x0000)
struct BST_PostAudioOnUnit_GetDurationTime final
{
public:
	float                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
//static_assert(alignof(BST_PostAudioOnUnit_GetDurationTime) == 0x000004, "Wrong alignment on BST_PostAudioOnUnit_GetDurationTime");
//static_assert(sizeof(BST_PostAudioOnUnit_GetDurationTime) == 0x000004, "Wrong size on BST_PostAudioOnUnit_GetDurationTime");
//static_assert(offsetof(BST_PostAudioOnUnit_GetDurationTime, ReturnValue) == 0x000000, "Member 'BST_PostAudioOnUnit_GetDurationTime::ReturnValue' has a wrong offset!");

// Function b1-Managed.BST_PostAudioOnUnit.GetDisplayName
// 0x0010 (0x0010 - 0x0000)
struct BST_PostAudioOnUnit_GetDisplayName final
{
public:
	class FString                                 ReturnValue;                                       // 0x0000(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash)
};
//static_assert(alignof(BST_PostAudioOnUnit_GetDisplayName) == 0x000008, "Wrong alignment on BST_PostAudioOnUnit_GetDisplayName");
//static_assert(sizeof(BST_PostAudioOnUnit_GetDisplayName) == 0x000010, "Wrong size on BST_PostAudioOnUnit_GetDisplayName");
//static_assert(offsetof(BST_PostAudioOnUnit_GetDisplayName, ReturnValue) == 0x000000, "Member 'BST_PostAudioOnUnit_GetDisplayName::ReturnValue' has a wrong offset!");

// Function b1-Managed.BST_PostAudioOnUnit.Evaluate
// 0x0008 (0x0008 - 0x0000)
struct BST_PostAudioOnUnit_Evaluate final
{
public:
	class UMovieSceneCalliopeSectionData*         InSectionData;                                     // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
//static_assert(alignof(BST_PostAudioOnUnit_Evaluate) == 0x000008, "Wrong alignment on BST_PostAudioOnUnit_Evaluate");
//static_assert(sizeof(BST_PostAudioOnUnit_Evaluate) == 0x000008, "Wrong size on BST_PostAudioOnUnit_Evaluate");
//static_assert(offsetof(BST_PostAudioOnUnit_Evaluate, InSectionData) == 0x000000, "Member 'BST_PostAudioOnUnit_Evaluate::InSectionData' has a wrong offset!");

// Function b1-Managed.BST_PostAudioOnUnit.SetEvent_Editor
// 0x0008 (0x0008 - 0x0000)
struct BST_PostAudioOnUnit_SetEvent_Editor final
{
public:
	class UAkAudioEvent*                          Event;                                             // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
//static_assert(alignof(BST_PostAudioOnUnit_SetEvent_Editor) == 0x000008, "Wrong alignment on BST_PostAudioOnUnit_SetEvent_Editor");
//static_assert(sizeof(BST_PostAudioOnUnit_SetEvent_Editor) == 0x000008, "Wrong size on BST_PostAudioOnUnit_SetEvent_Editor");
//static_assert(offsetof(BST_PostAudioOnUnit_SetEvent_Editor, Event) == 0x000000, "Member 'BST_PostAudioOnUnit_SetEvent_Editor::Event' has a wrong offset!");

// Function b1-Managed.BST_PostAudioOnUnit.SectionBeingDestroyed
// 0x0008 (0x0008 - 0x0000)
struct BST_PostAudioOnUnit_SectionBeingDestroyed final
{
public:
	class UMovieSceneCalliopeSectionData*         InSectionData;                                     // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
//static_assert(alignof(BST_PostAudioOnUnit_SectionBeingDestroyed) == 0x000008, "Wrong alignment on BST_PostAudioOnUnit_SectionBeingDestroyed");
//static_assert(sizeof(BST_PostAudioOnUnit_SectionBeingDestroyed) == 0x000008, "Wrong size on BST_PostAudioOnUnit_SectionBeingDestroyed");
//static_assert(offsetof(BST_PostAudioOnUnit_SectionBeingDestroyed, InSectionData) == 0x000000, "Member 'BST_PostAudioOnUnit_SectionBeingDestroyed::InSectionData' has a wrong offset!");

// Function b1-Managed.BST_PostAudioOnUnit.MakeSectionData
// 0x0008 (0x0008 - 0x0000)
struct BST_PostAudioOnUnit_MakeSectionData final
{
public:
	class UMovieSceneCalliopeSectionData*         ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
//static_assert(alignof(BST_PostAudioOnUnit_MakeSectionData) == 0x000008, "Wrong alignment on BST_PostAudioOnUnit_MakeSectionData");
//static_assert(sizeof(BST_PostAudioOnUnit_MakeSectionData) == 0x000008, "Wrong size on BST_PostAudioOnUnit_MakeSectionData");
//static_assert(offsetof(BST_PostAudioOnUnit_MakeSectionData, ReturnValue) == 0x000000, "Member 'BST_PostAudioOnUnit_MakeSectionData::ReturnValue' has a wrong offset!");

// Function b1-Managed.SequenceSectionContext_PostAudioOnUnit.PostEventCallbackHandler
// 0x0010 (0x0010 - 0x0000)
struct SequenceSectionContext_PostAudioOnUnit_PostEventCallbackHandler final
{
public:
	EAkCallbackType                               CallbackType;                                      // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_1[0x7];                                        // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UAkCallbackInfo*                        CallbackInfo;                                      // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
//static_assert(alignof(SequenceSectionContext_PostAudioOnUnit_PostEventCallbackHandler) == 0x000008, "Wrong alignment on SequenceSectionContext_PostAudioOnUnit_PostEventCallbackHandler");
//static_assert(sizeof(SequenceSectionContext_PostAudioOnUnit_PostEventCallbackHandler) == 0x000010, "Wrong size on SequenceSectionContext_PostAudioOnUnit_PostEventCallbackHandler");
//static_assert(offsetof(SequenceSectionContext_PostAudioOnUnit_PostEventCallbackHandler, CallbackType) == 0x000000, "Member 'SequenceSectionContext_PostAudioOnUnit_PostEventCallbackHandler::CallbackType' has a wrong offset!");
//static_assert(offsetof(SequenceSectionContext_PostAudioOnUnit_PostEventCallbackHandler, CallbackInfo) == 0x000008, "Member 'SequenceSectionContext_PostAudioOnUnit_PostEventCallbackHandler::CallbackInfo' has a wrong offset!");

// Function b1-Managed.BSNS_MarkCannotBeSkip.OnNotifyBegin
// 0x0010 (0x0010 - 0x0000)
struct BSNS_MarkCannotBeSkip_OnNotifyBegin final
{
public:
	class UCalliopeLevelSequencePlayer*           InPlayer;                                          // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         InStatus;                                          // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         bInBackwards : 1;                                  // 0x000C(0x0001)(BitIndex: 0x00, PropSize: 0x0001 (Parm, NoDestructor, HasGetValueTypeHash))
};
//static_assert(alignof(BSNS_MarkCannotBeSkip_OnNotifyBegin) == 0x000008, "Wrong alignment on BSNS_MarkCannotBeSkip_OnNotifyBegin");
//static_assert(sizeof(BSNS_MarkCannotBeSkip_OnNotifyBegin) == 0x000010, "Wrong size on BSNS_MarkCannotBeSkip_OnNotifyBegin");
//static_assert(offsetof(BSNS_MarkCannotBeSkip_OnNotifyBegin, InPlayer) == 0x000000, "Member 'BSNS_MarkCannotBeSkip_OnNotifyBegin::InPlayer' has a wrong offset!");
//static_assert(offsetof(BSNS_MarkCannotBeSkip_OnNotifyBegin, InStatus) == 0x000008, "Member 'BSNS_MarkCannotBeSkip_OnNotifyBegin::InStatus' has a wrong offset!");

// Function b1-Managed.BSNS_MarkCannotBeSkip.OnNotifyEnd
// 0x0010 (0x0010 - 0x0000)
struct BSNS_MarkCannotBeSkip_OnNotifyEnd final
{
public:
	class UCalliopeLevelSequencePlayer*           InPlayer;                                          // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         InStatus;                                          // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         bInBackwards : 1;                                  // 0x000C(0x0001)(BitIndex: 0x00, PropSize: 0x0001 (Parm, NoDestructor, HasGetValueTypeHash))
};
//static_assert(alignof(BSNS_MarkCannotBeSkip_OnNotifyEnd) == 0x000008, "Wrong alignment on BSNS_MarkCannotBeSkip_OnNotifyEnd");
//static_assert(sizeof(BSNS_MarkCannotBeSkip_OnNotifyEnd) == 0x000010, "Wrong size on BSNS_MarkCannotBeSkip_OnNotifyEnd");
//static_assert(offsetof(BSNS_MarkCannotBeSkip_OnNotifyEnd, InPlayer) == 0x000000, "Member 'BSNS_MarkCannotBeSkip_OnNotifyEnd::InPlayer' has a wrong offset!");
//static_assert(offsetof(BSNS_MarkCannotBeSkip_OnNotifyEnd, InStatus) == 0x000008, "Member 'BSNS_MarkCannotBeSkip_OnNotifyEnd::InStatus' has a wrong offset!");

// Function b1-Managed.BSNS_ShowSpecialUI.GetDisplayName
// 0x0010 (0x0010 - 0x0000)
struct BSNS_ShowSpecialUI_GetDisplayName final
{
public:
	class FString                                 ReturnValue;                                       // 0x0000(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash)
};
//static_assert(alignof(BSNS_ShowSpecialUI_GetDisplayName) == 0x000008, "Wrong alignment on BSNS_ShowSpecialUI_GetDisplayName");
//static_assert(sizeof(BSNS_ShowSpecialUI_GetDisplayName) == 0x000010, "Wrong size on BSNS_ShowSpecialUI_GetDisplayName");
//static_assert(offsetof(BSNS_ShowSpecialUI_GetDisplayName, ReturnValue) == 0x000000, "Member 'BSNS_ShowSpecialUI_GetDisplayName::ReturnValue' has a wrong offset!");

// Function b1-Managed.BSNS_ShowSpecialUI.OnNotifyBegin
// 0x0010 (0x0010 - 0x0000)
struct BSNS_ShowSpecialUI_OnNotifyBegin final
{
public:
	class UCalliopeLevelSequencePlayer*           InPlayer;                                          // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         InStatus;                                          // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         bInBackwards : 1;                                  // 0x000C(0x0001)(BitIndex: 0x00, PropSize: 0x0001 (Parm, NoDestructor, HasGetValueTypeHash))
};
//static_assert(alignof(BSNS_ShowSpecialUI_OnNotifyBegin) == 0x000008, "Wrong alignment on BSNS_ShowSpecialUI_OnNotifyBegin");
//static_assert(sizeof(BSNS_ShowSpecialUI_OnNotifyBegin) == 0x000010, "Wrong size on BSNS_ShowSpecialUI_OnNotifyBegin");
//static_assert(offsetof(BSNS_ShowSpecialUI_OnNotifyBegin, InPlayer) == 0x000000, "Member 'BSNS_ShowSpecialUI_OnNotifyBegin::InPlayer' has a wrong offset!");
//static_assert(offsetof(BSNS_ShowSpecialUI_OnNotifyBegin, InStatus) == 0x000008, "Member 'BSNS_ShowSpecialUI_OnNotifyBegin::InStatus' has a wrong offset!");

// Function b1-Managed.BSN_AddBuffOnUnit.OnPreviewNotify
// 0x0010 (0x0010 - 0x0000)
struct BSN_AddBuffOnUnit_OnPreviewNotify final
{
public:
	class UObject*                                InPlaybackContext;                                 // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         InStatus;                                          // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         bInBackwards : 1;                                  // 0x000C(0x0001)(BitIndex: 0x00, PropSize: 0x0001 (Parm, NoDestructor, HasGetValueTypeHash))
};
//static_assert(alignof(BSN_AddBuffOnUnit_OnPreviewNotify) == 0x000008, "Wrong alignment on BSN_AddBuffOnUnit_OnPreviewNotify");
//static_assert(sizeof(BSN_AddBuffOnUnit_OnPreviewNotify) == 0x000010, "Wrong size on BSN_AddBuffOnUnit_OnPreviewNotify");
//static_assert(offsetof(BSN_AddBuffOnUnit_OnPreviewNotify, InPlaybackContext) == 0x000000, "Member 'BSN_AddBuffOnUnit_OnPreviewNotify::InPlaybackContext' has a wrong offset!");
//static_assert(offsetof(BSN_AddBuffOnUnit_OnPreviewNotify, InStatus) == 0x000008, "Member 'BSN_AddBuffOnUnit_OnPreviewNotify::InStatus' has a wrong offset!");

// Function b1-Managed.BSN_AddBuffOnUnit.OnNotify
// 0x0010 (0x0010 - 0x0000)
struct BSN_AddBuffOnUnit_OnNotify final
{
public:
	class UCalliopeLevelSequencePlayer*           InPlayer;                                          // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         InStatus;                                          // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         bInBackwards : 1;                                  // 0x000C(0x0001)(BitIndex: 0x00, PropSize: 0x0001 (Parm, NoDestructor, HasGetValueTypeHash))
};
//static_assert(alignof(BSN_AddBuffOnUnit_OnNotify) == 0x000008, "Wrong alignment on BSN_AddBuffOnUnit_OnNotify");
//static_assert(sizeof(BSN_AddBuffOnUnit_OnNotify) == 0x000010, "Wrong size on BSN_AddBuffOnUnit_OnNotify");
//static_assert(offsetof(BSN_AddBuffOnUnit_OnNotify, InPlayer) == 0x000000, "Member 'BSN_AddBuffOnUnit_OnNotify::InPlayer' has a wrong offset!");
//static_assert(offsetof(BSN_AddBuffOnUnit_OnNotify, InStatus) == 0x000008, "Member 'BSN_AddBuffOnUnit_OnNotify::InStatus' has a wrong offset!");

// Function b1-Managed.BSN_ChangeBT.OnNotify
// 0x0010 (0x0010 - 0x0000)
struct BSN_ChangeBT_OnNotify final
{
public:
	class UCalliopeLevelSequencePlayer*           InPlayer;                                          // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         InStatus;                                          // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         bInBackwards : 1;                                  // 0x000C(0x0001)(BitIndex: 0x00, PropSize: 0x0001 (Parm, NoDestructor, HasGetValueTypeHash))
};
//static_assert(alignof(BSN_ChangeBT_OnNotify) == 0x000008, "Wrong alignment on BSN_ChangeBT_OnNotify");
//static_assert(sizeof(BSN_ChangeBT_OnNotify) == 0x000010, "Wrong size on BSN_ChangeBT_OnNotify");
//static_assert(offsetof(BSN_ChangeBT_OnNotify, InPlayer) == 0x000000, "Member 'BSN_ChangeBT_OnNotify::InPlayer' has a wrong offset!");
//static_assert(offsetof(BSN_ChangeBT_OnNotify, InStatus) == 0x000008, "Member 'BSN_ChangeBT_OnNotify::InStatus' has a wrong offset!");

// Function b1-Managed.BSN_DetachCameraInSkillSequence.OnNotify
// 0x0010 (0x0010 - 0x0000)
struct BSN_DetachCameraInSkillSequence_OnNotify final
{
public:
	class UCalliopeLevelSequencePlayer*           InPlayer;                                          // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         InStatus;                                          // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         bInBackwards : 1;                                  // 0x000C(0x0001)(BitIndex: 0x00, PropSize: 0x0001 (Parm, NoDestructor, HasGetValueTypeHash))
};
//static_assert(alignof(BSN_DetachCameraInSkillSequence_OnNotify) == 0x000008, "Wrong alignment on BSN_DetachCameraInSkillSequence_OnNotify");
//static_assert(sizeof(BSN_DetachCameraInSkillSequence_OnNotify) == 0x000010, "Wrong size on BSN_DetachCameraInSkillSequence_OnNotify");
//static_assert(offsetof(BSN_DetachCameraInSkillSequence_OnNotify, InPlayer) == 0x000000, "Member 'BSN_DetachCameraInSkillSequence_OnNotify::InPlayer' has a wrong offset!");
//static_assert(offsetof(BSN_DetachCameraInSkillSequence_OnNotify, InStatus) == 0x000008, "Member 'BSN_DetachCameraInSkillSequence_OnNotify::InStatus' has a wrong offset!");

// Function b1-Managed.BSN_HideUI.OnNotify
// 0x0010 (0x0010 - 0x0000)
struct BSN_HideUI_OnNotify final
{
public:
	class UCalliopeLevelSequencePlayer*           InPlayer;                                          // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         InStatus;                                          // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         bInBackwards : 1;                                  // 0x000C(0x0001)(BitIndex: 0x00, PropSize: 0x0001 (Parm, NoDestructor, HasGetValueTypeHash))
};
//static_assert(alignof(BSN_HideUI_OnNotify) == 0x000008, "Wrong alignment on BSN_HideUI_OnNotify");
//static_assert(sizeof(BSN_HideUI_OnNotify) == 0x000010, "Wrong size on BSN_HideUI_OnNotify");
//static_assert(offsetof(BSN_HideUI_OnNotify, InPlayer) == 0x000000, "Member 'BSN_HideUI_OnNotify::InPlayer' has a wrong offset!");
//static_assert(offsetof(BSN_HideUI_OnNotify, InStatus) == 0x000008, "Member 'BSN_HideUI_OnNotify::InStatus' has a wrong offset!");

// Function b1-Managed.BSN_RemoveBuffOnUnit.OnPreviewNotify
// 0x0010 (0x0010 - 0x0000)
struct BSN_RemoveBuffOnUnit_OnPreviewNotify final
{
public:
	class UObject*                                InPlaybackContext;                                 // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         InStatus;                                          // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         bInBackwards : 1;                                  // 0x000C(0x0001)(BitIndex: 0x00, PropSize: 0x0001 (Parm, NoDestructor, HasGetValueTypeHash))
};
//static_assert(alignof(BSN_RemoveBuffOnUnit_OnPreviewNotify) == 0x000008, "Wrong alignment on BSN_RemoveBuffOnUnit_OnPreviewNotify");
//static_assert(sizeof(BSN_RemoveBuffOnUnit_OnPreviewNotify) == 0x000010, "Wrong size on BSN_RemoveBuffOnUnit_OnPreviewNotify");
//static_assert(offsetof(BSN_RemoveBuffOnUnit_OnPreviewNotify, InPlaybackContext) == 0x000000, "Member 'BSN_RemoveBuffOnUnit_OnPreviewNotify::InPlaybackContext' has a wrong offset!");
//static_assert(offsetof(BSN_RemoveBuffOnUnit_OnPreviewNotify, InStatus) == 0x000008, "Member 'BSN_RemoveBuffOnUnit_OnPreviewNotify::InStatus' has a wrong offset!");

// Function b1-Managed.BSN_RemoveBuffOnUnit.OnNotify
// 0x0010 (0x0010 - 0x0000)
struct BSN_RemoveBuffOnUnit_OnNotify final
{
public:
	class UCalliopeLevelSequencePlayer*           InPlayer;                                          // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         InStatus;                                          // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         bInBackwards : 1;                                  // 0x000C(0x0001)(BitIndex: 0x00, PropSize: 0x0001 (Parm, NoDestructor, HasGetValueTypeHash))
};
//static_assert(alignof(BSN_RemoveBuffOnUnit_OnNotify) == 0x000008, "Wrong alignment on BSN_RemoveBuffOnUnit_OnNotify");
//static_assert(sizeof(BSN_RemoveBuffOnUnit_OnNotify) == 0x000010, "Wrong size on BSN_RemoveBuffOnUnit_OnNotify");
//static_assert(offsetof(BSN_RemoveBuffOnUnit_OnNotify, InPlayer) == 0x000000, "Member 'BSN_RemoveBuffOnUnit_OnNotify::InPlayer' has a wrong offset!");
//static_assert(offsetof(BSN_RemoveBuffOnUnit_OnNotify, InStatus) == 0x000008, "Member 'BSN_RemoveBuffOnUnit_OnNotify::InStatus' has a wrong offset!");

// Function b1-Managed.BSN_SetUnitTransform.OnPreviewNotify
// 0x0010 (0x0010 - 0x0000)
struct BSN_SetUnitTransform_OnPreviewNotify final
{
public:
	class UObject*                                InPlaybackContext;                                 // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         InStatus;                                          // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         bInBackwards : 1;                                  // 0x000C(0x0001)(BitIndex: 0x00, PropSize: 0x0001 (Parm, NoDestructor, HasGetValueTypeHash))
};
//static_assert(alignof(BSN_SetUnitTransform_OnPreviewNotify) == 0x000008, "Wrong alignment on BSN_SetUnitTransform_OnPreviewNotify");
//static_assert(sizeof(BSN_SetUnitTransform_OnPreviewNotify) == 0x000010, "Wrong size on BSN_SetUnitTransform_OnPreviewNotify");
//static_assert(offsetof(BSN_SetUnitTransform_OnPreviewNotify, InPlaybackContext) == 0x000000, "Member 'BSN_SetUnitTransform_OnPreviewNotify::InPlaybackContext' has a wrong offset!");
//static_assert(offsetof(BSN_SetUnitTransform_OnPreviewNotify, InStatus) == 0x000008, "Member 'BSN_SetUnitTransform_OnPreviewNotify::InStatus' has a wrong offset!");

// Function b1-Managed.BSN_SetUnitTransform.OnNotify
// 0x0010 (0x0010 - 0x0000)
struct BSN_SetUnitTransform_OnNotify final
{
public:
	class UCalliopeLevelSequencePlayer*           InPlayer;                                          // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         InStatus;                                          // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         bInBackwards : 1;                                  // 0x000C(0x0001)(BitIndex: 0x00, PropSize: 0x0001 (Parm, NoDestructor, HasGetValueTypeHash))
};
//static_assert(alignof(BSN_SetUnitTransform_OnNotify) == 0x000008, "Wrong alignment on BSN_SetUnitTransform_OnNotify");
//static_assert(sizeof(BSN_SetUnitTransform_OnNotify) == 0x000010, "Wrong size on BSN_SetUnitTransform_OnNotify");
//static_assert(offsetof(BSN_SetUnitTransform_OnNotify, InPlayer) == 0x000000, "Member 'BSN_SetUnitTransform_OnNotify::InPlayer' has a wrong offset!");
//static_assert(offsetof(BSN_SetUnitTransform_OnNotify, InStatus) == 0x000008, "Member 'BSN_SetUnitTransform_OnNotify::InStatus' has a wrong offset!");

// Function b1-Managed.BSN_ShowUI.OnNotify
// 0x0010 (0x0010 - 0x0000)
struct BSN_ShowUI_OnNotify final
{
public:
	class UCalliopeLevelSequencePlayer*           InPlayer;                                          // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         InStatus;                                          // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         bInBackwards : 1;                                  // 0x000C(0x0001)(BitIndex: 0x00, PropSize: 0x0001 (Parm, NoDestructor, HasGetValueTypeHash))
};
//static_assert(alignof(BSN_ShowUI_OnNotify) == 0x000008, "Wrong alignment on BSN_ShowUI_OnNotify");
//static_assert(sizeof(BSN_ShowUI_OnNotify) == 0x000010, "Wrong size on BSN_ShowUI_OnNotify");
//static_assert(offsetof(BSN_ShowUI_OnNotify, InPlayer) == 0x000000, "Member 'BSN_ShowUI_OnNotify::InPlayer' has a wrong offset!");
//static_assert(offsetof(BSN_ShowUI_OnNotify, InStatus) == 0x000008, "Member 'BSN_ShowUI_OnNotify::InStatus' has a wrong offset!");

// Function b1-Managed.FOnUserScrolledEventWrapper.Callback
// 0x0004 (0x0004 - 0x0000)
struct FOnUserScrolledEventWrapper_Callback final
{
public:
	float                                         CurrentOffset;                                     // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
//static_assert(alignof(FOnUserScrolledEventWrapper_Callback) == 0x000004, "Wrong alignment on FOnUserScrolledEventWrapper_Callback");
//static_assert(sizeof(FOnUserScrolledEventWrapper_Callback) == 0x000004, "Wrong size on FOnUserScrolledEventWrapper_Callback");
//static_assert(offsetof(FOnUserScrolledEventWrapper_Callback, CurrentOffset) == 0x000000, "Member 'FOnUserScrolledEventWrapper_Callback::CurrentOffset' has a wrong offset!");

// Function b1-Managed.FOnPointerEventWrapper.Callback
// 0x0188 (0x0188 - 0x0000)
struct FOnPointerEventWrapper_Callback final
{
public:
	struct FGeometry                              Geometry;                                          // 0x0000(0x0040)(Parm, IsPlainOldData, NoDestructor)
	struct FPointerEvent                          PointerEvent;                                      // 0x0040(0x0090)(Parm)
	struct FEventReply                            ReturnValue;                                       // 0x00D0(0x00B8)(Parm, OutParm, ReturnParm)
};
//static_assert(alignof(FOnPointerEventWrapper_Callback) == 0x000008, "Wrong alignment on FOnPointerEventWrapper_Callback");
//static_assert(sizeof(FOnPointerEventWrapper_Callback) == 0x000188, "Wrong size on FOnPointerEventWrapper_Callback");
//static_assert(offsetof(FOnPointerEventWrapper_Callback, Geometry) == 0x000000, "Member 'FOnPointerEventWrapper_Callback::Geometry' has a wrong offset!");
//static_assert(offsetof(FOnPointerEventWrapper_Callback, PointerEvent) == 0x000040, "Member 'FOnPointerEventWrapper_Callback::PointerEvent' has a wrong offset!");
//static_assert(offsetof(FOnPointerEventWrapper_Callback, ReturnValue) == 0x0000D0, "Member 'FOnPointerEventWrapper_Callback::ReturnValue' has a wrong offset!");

// Function b1-Managed.FGSOnAKBStateInteruptWrapper.Callback
// 0x0014 (0x0014 - 0x0000)
struct FGSOnAKBStateInteruptWrapper_Callback final
{
public:
	class FName                                   BeginStateName;                                    // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class FName                                   EndStateName;                                      // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         IsFromForceSetStateImmediately : 1;                // 0x0010(0x0001)(BitIndex: 0x00, PropSize: 0x0001 (Parm, NoDestructor, HasGetValueTypeHash))
};
//static_assert(alignof(FGSOnAKBStateInteruptWrapper_Callback) == 0x000004, "Wrong alignment on FGSOnAKBStateInteruptWrapper_Callback");
//static_assert(sizeof(FGSOnAKBStateInteruptWrapper_Callback) == 0x000014, "Wrong size on FGSOnAKBStateInteruptWrapper_Callback");
//static_assert(offsetof(FGSOnAKBStateInteruptWrapper_Callback, BeginStateName) == 0x000000, "Member 'FGSOnAKBStateInteruptWrapper_Callback::BeginStateName' has a wrong offset!");
//static_assert(offsetof(FGSOnAKBStateInteruptWrapper_Callback, EndStateName) == 0x000008, "Member 'FGSOnAKBStateInteruptWrapper_Callback::EndStateName' has a wrong offset!");

// Function b1-Managed.FGSOnAKBStateEndWrapper.Callback
// 0x0014 (0x0014 - 0x0000)
struct FGSOnAKBStateEndWrapper_Callback final
{
public:
	class FName                                   BeginStateName;                                    // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class FName                                   EndStateName;                                      // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         IsFromForceSetStateImmediately : 1;                // 0x0010(0x0001)(BitIndex: 0x00, PropSize: 0x0001 (Parm, NoDestructor, HasGetValueTypeHash))
};
//static_assert(alignof(FGSOnAKBStateEndWrapper_Callback) == 0x000004, "Wrong alignment on FGSOnAKBStateEndWrapper_Callback");
//static_assert(sizeof(FGSOnAKBStateEndWrapper_Callback) == 0x000014, "Wrong size on FGSOnAKBStateEndWrapper_Callback");
//static_assert(offsetof(FGSOnAKBStateEndWrapper_Callback, BeginStateName) == 0x000000, "Member 'FGSOnAKBStateEndWrapper_Callback::BeginStateName' has a wrong offset!");
//static_assert(offsetof(FGSOnAKBStateEndWrapper_Callback, EndStateName) == 0x000008, "Member 'FGSOnAKBStateEndWrapper_Callback::EndStateName' has a wrong offset!");

// Function b1-Managed.FOnSelectionChangedWrapper.Callback
// 0x0018 (0x0018 - 0x0000)
struct FOnSelectionChangedWrapper_Callback final
{
public:
	class FString                                 SelectedItem;                                      // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash)
	ESelectInfo                                   SelectionType;                                     // 0x0010(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
//static_assert(alignof(FOnSelectionChangedWrapper_Callback) == 0x000008, "Wrong alignment on FOnSelectionChangedWrapper_Callback");
//static_assert(sizeof(FOnSelectionChangedWrapper_Callback) == 0x000018, "Wrong size on FOnSelectionChangedWrapper_Callback");
//static_assert(offsetof(FOnSelectionChangedWrapper_Callback, SelectedItem) == 0x000000, "Member 'FOnSelectionChangedWrapper_Callback::SelectedItem' has a wrong offset!");
//static_assert(offsetof(FOnSelectionChangedWrapper_Callback, SelectionType) == 0x000010, "Member 'FOnSelectionChangedWrapper_Callback::SelectionType' has a wrong offset!");

// Function b1-Managed.FOnCheckBoxComponentStateChangedWrapper.Callback
// 0x0001 (0x0001 - 0x0000)
struct FOnCheckBoxComponentStateChangedWrapper_Callback final
{
public:
	uint8                                         bIsChecked : 1;                                    // 0x0000(0x0001)(BitIndex: 0x00, PropSize: 0x0001 (Parm, NoDestructor, HasGetValueTypeHash))
};
//static_assert(alignof(FOnCheckBoxComponentStateChangedWrapper_Callback) == 0x000001, "Wrong alignment on FOnCheckBoxComponentStateChangedWrapper_Callback");
//static_assert(sizeof(FOnCheckBoxComponentStateChangedWrapper_Callback) == 0x000001, "Wrong size on FOnCheckBoxComponentStateChangedWrapper_Callback");

// Function b1-Managed.FGSOnButtonCheckStateChangedWrapper.Callback
// 0x0008 (0x0008 - 0x0000)
struct FGSOnButtonCheckStateChangedWrapper_Callback final
{
public:
	int32                                         GSID;                                              // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         bIsChecked : 1;                                    // 0x0004(0x0001)(BitIndex: 0x00, PropSize: 0x0001 (Parm, NoDestructor, HasGetValueTypeHash))
};
//static_assert(alignof(FGSOnButtonCheckStateChangedWrapper_Callback) == 0x000004, "Wrong alignment on FGSOnButtonCheckStateChangedWrapper_Callback");
//static_assert(sizeof(FGSOnButtonCheckStateChangedWrapper_Callback) == 0x000008, "Wrong size on FGSOnButtonCheckStateChangedWrapper_Callback");
//static_assert(offsetof(FGSOnButtonCheckStateChangedWrapper_Callback, GSID) == 0x000000, "Member 'FGSOnButtonCheckStateChangedWrapper_Callback::GSID' has a wrong offset!");

// Function b1-Managed.FOnMultiLineEditableTextChangedEventWrapper.Callback
// 0x0018 (0x0018 - 0x0000)
struct FOnMultiLineEditableTextChangedEventWrapper_Callback final
{
public:
	class FText                                   Text;                                              // 0x0000(0x0018)(Parm)
};
//static_assert(alignof(FOnMultiLineEditableTextChangedEventWrapper_Callback) == 0x000008, "Wrong alignment on FOnMultiLineEditableTextChangedEventWrapper_Callback");
//static_assert(sizeof(FOnMultiLineEditableTextChangedEventWrapper_Callback) == 0x000018, "Wrong size on FOnMultiLineEditableTextChangedEventWrapper_Callback");
//static_assert(offsetof(FOnMultiLineEditableTextChangedEventWrapper_Callback, Text) == 0x000000, "Member 'FOnMultiLineEditableTextChangedEventWrapper_Callback::Text' has a wrong offset!");

// Function b1-Managed.FOnEditableTextBoxCommittedEventWrapper.Callback
// 0x0020 (0x0020 - 0x0000)
struct FOnEditableTextBoxCommittedEventWrapper_Callback final
{
public:
	class FText                                   Text;                                              // 0x0000(0x0018)(Parm)
	ETextCommit                                   CommitMethod;                                      // 0x0018(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
//static_assert(alignof(FOnEditableTextBoxCommittedEventWrapper_Callback) == 0x000008, "Wrong alignment on FOnEditableTextBoxCommittedEventWrapper_Callback");
//static_assert(sizeof(FOnEditableTextBoxCommittedEventWrapper_Callback) == 0x000020, "Wrong size on FOnEditableTextBoxCommittedEventWrapper_Callback");
//static_assert(offsetof(FOnEditableTextBoxCommittedEventWrapper_Callback, Text) == 0x000000, "Member 'FOnEditableTextBoxCommittedEventWrapper_Callback::Text' has a wrong offset!");
//static_assert(offsetof(FOnEditableTextBoxCommittedEventWrapper_Callback, CommitMethod) == 0x000018, "Member 'FOnEditableTextBoxCommittedEventWrapper_Callback::CommitMethod' has a wrong offset!");

// Function b1-Managed.FOnEditableTextBoxChangedEventWrapper.Callback
// 0x0018 (0x0018 - 0x0000)
struct FOnEditableTextBoxChangedEventWrapper_Callback final
{
public:
	class FText                                   Text;                                              // 0x0000(0x0018)(Parm)
};
//static_assert(alignof(FOnEditableTextBoxChangedEventWrapper_Callback) == 0x000008, "Wrong alignment on FOnEditableTextBoxChangedEventWrapper_Callback");
//static_assert(sizeof(FOnEditableTextBoxChangedEventWrapper_Callback) == 0x000018, "Wrong size on FOnEditableTextBoxChangedEventWrapper_Callback");
//static_assert(offsetof(FOnEditableTextBoxChangedEventWrapper_Callback, Text) == 0x000000, "Member 'FOnEditableTextBoxChangedEventWrapper_Callback::Text' has a wrong offset!");

// Function b1-Managed.FOnFloatValueChangedEventWrapper.Callback
// 0x0004 (0x0004 - 0x0000)
struct FOnFloatValueChangedEventWrapper_Callback final
{
public:
	float                                         Value;                                             // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
//static_assert(alignof(FOnFloatValueChangedEventWrapper_Callback) == 0x000004, "Wrong alignment on FOnFloatValueChangedEventWrapper_Callback");
//static_assert(sizeof(FOnFloatValueChangedEventWrapper_Callback) == 0x000004, "Wrong size on FOnFloatValueChangedEventWrapper_Callback");
//static_assert(offsetof(FOnFloatValueChangedEventWrapper_Callback, Value) == 0x000000, "Member 'FOnFloatValueChangedEventWrapper_Callback::Value' has a wrong offset!");

// Function b1-Managed.FOnKeySelectedWrapper.Callback
// 0x0020 (0x0020 - 0x0000)
struct FOnKeySelectedWrapper_Callback final
{
public:
	struct FInputChord                            SelectedKey;                                       // 0x0000(0x0020)(Parm, HasGetValueTypeHash)
};
//static_assert(alignof(FOnKeySelectedWrapper_Callback) == 0x000008, "Wrong alignment on FOnKeySelectedWrapper_Callback");
//static_assert(sizeof(FOnKeySelectedWrapper_Callback) == 0x000020, "Wrong size on FOnKeySelectedWrapper_Callback");
//static_assert(offsetof(FOnKeySelectedWrapper_Callback, SelectedKey) == 0x000000, "Member 'FOnKeySelectedWrapper_Callback::SelectedKey' has a wrong offset!");

// Function b1-Managed.FOnEditableTextChangedEventWrapper.Callback
// 0x0018 (0x0018 - 0x0000)
struct FOnEditableTextChangedEventWrapper_Callback final
{
public:
	class FText                                   Text;                                              // 0x0000(0x0018)(Parm)
};
//static_assert(alignof(FOnEditableTextChangedEventWrapper_Callback) == 0x000008, "Wrong alignment on FOnEditableTextChangedEventWrapper_Callback");
//static_assert(sizeof(FOnEditableTextChangedEventWrapper_Callback) == 0x000018, "Wrong size on FOnEditableTextChangedEventWrapper_Callback");
//static_assert(offsetof(FOnEditableTextChangedEventWrapper_Callback, Text) == 0x000000, "Member 'FOnEditableTextChangedEventWrapper_Callback::Text' has a wrong offset!");

// Function b1-Managed.FDownloadImageDelegateWrapper.Callback
// 0x0008 (0x0008 - 0x0000)
struct FDownloadImageDelegateWrapper_Callback final
{
public:
	class UTexture2DDynamic*                      Texture;                                           // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
//static_assert(alignof(FDownloadImageDelegateWrapper_Callback) == 0x000008, "Wrong alignment on FDownloadImageDelegateWrapper_Callback");
//static_assert(sizeof(FDownloadImageDelegateWrapper_Callback) == 0x000008, "Wrong size on FDownloadImageDelegateWrapper_Callback");
//static_assert(offsetof(FDownloadImageDelegateWrapper_Callback, Texture) == 0x000000, "Member 'FDownloadImageDelegateWrapper_Callback::Texture' has a wrong offset!");

// Function b1-Managed.FluidSimulationComponent.TickComponentInCS
// 0x0004 (0x0004 - 0x0000)
struct FluidSimulationComponent_TickComponentInCS final
{
public:
	float                                         DeltaTime;                                         // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
//static_assert(alignof(FluidSimulationComponent_TickComponentInCS) == 0x000004, "Wrong alignment on FluidSimulationComponent_TickComponentInCS");
//static_assert(sizeof(FluidSimulationComponent_TickComponentInCS) == 0x000004, "Wrong size on FluidSimulationComponent_TickComponentInCS");
//static_assert(offsetof(FluidSimulationComponent_TickComponentInCS, DeltaTime) == 0x000000, "Member 'FluidSimulationComponent_TickComponentInCS::DeltaTime' has a wrong offset!");

// Function b1-Managed.FluidSimulationComponent.RemoveActor
// 0x0008 (0x0008 - 0x0000)
struct FluidSimulationComponent_RemoveActor final
{
public:
	class AActor*                                 Actor;                                             // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
//static_assert(alignof(FluidSimulationComponent_RemoveActor) == 0x000008, "Wrong alignment on FluidSimulationComponent_RemoveActor");
//static_assert(sizeof(FluidSimulationComponent_RemoveActor) == 0x000008, "Wrong size on FluidSimulationComponent_RemoveActor");
//static_assert(offsetof(FluidSimulationComponent_RemoveActor, Actor) == 0x000000, "Member 'FluidSimulationComponent_RemoveActor::Actor' has a wrong offset!");

// Function b1-Managed.FluidSimulationComponent.AddActor
// 0x0008 (0x0008 - 0x0000)
struct FluidSimulationComponent_AddActor final
{
public:
	class AActor*                                 Actor;                                             // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
//static_assert(alignof(FluidSimulationComponent_AddActor) == 0x000008, "Wrong alignment on FluidSimulationComponent_AddActor");
//static_assert(sizeof(FluidSimulationComponent_AddActor) == 0x000008, "Wrong size on FluidSimulationComponent_AddActor");
//static_assert(offsetof(FluidSimulationComponent_AddActor, Actor) == 0x000000, "Member 'FluidSimulationComponent_AddActor::Actor' has a wrong offset!");

// Function b1-Managed.LandscapeBpBrushTest.Initialize
// 0x0070 (0x0070 - 0x0000)
struct LandscapeBpBrushTest_Initialize final
{
public:
	struct FTransform                             InLandscapeTransform;                              // 0x0000(0x0060)(Parm, IsPlainOldData, NoDestructor)
	struct FIntPoint                              InLandscapeSize;                                   // 0x0060(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FIntPoint                              InLandscapeRenderTargetSize;                       // 0x0068(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
//static_assert(alignof(LandscapeBpBrushTest_Initialize) == 0x000010, "Wrong alignment on LandscapeBpBrushTest_Initialize");
//static_assert(sizeof(LandscapeBpBrushTest_Initialize) == 0x000070, "Wrong size on LandscapeBpBrushTest_Initialize");
//static_assert(offsetof(LandscapeBpBrushTest_Initialize, InLandscapeTransform) == 0x000000, "Member 'LandscapeBpBrushTest_Initialize::InLandscapeTransform' has a wrong offset!");
//static_assert(offsetof(LandscapeBpBrushTest_Initialize, InLandscapeSize) == 0x000060, "Member 'LandscapeBpBrushTest_Initialize::InLandscapeSize' has a wrong offset!");
//static_assert(offsetof(LandscapeBpBrushTest_Initialize, InLandscapeRenderTargetSize) == 0x000068, "Member 'LandscapeBpBrushTest_Initialize::InLandscapeRenderTargetSize' has a wrong offset!");

// Function b1-Managed.LandscapeBpBrushTest.Render
// 0x0020 (0x0020 - 0x0000)
struct LandscapeBpBrushTest_Render final
{
public:
	uint8                                         InIsHeightmap : 1;                                 // 0x0000(0x0001)(BitIndex: 0x00, PropSize: 0x0001 (Parm, NoDestructor, HasGetValueTypeHash))
	uint8                                         Pad_1[0x7];                                        // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UTextureRenderTarget2D*                 InCombinedResult;                                  // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class FName                                   InWeightmapLayerName;                              // 0x0010(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UTextureRenderTarget2D*                 ReturnValue;                                       // 0x0018(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
//static_assert(alignof(LandscapeBpBrushTest_Render) == 0x000008, "Wrong alignment on LandscapeBpBrushTest_Render");
//static_assert(sizeof(LandscapeBpBrushTest_Render) == 0x000020, "Wrong size on LandscapeBpBrushTest_Render");
//static_assert(offsetof(LandscapeBpBrushTest_Render, InCombinedResult) == 0x000008, "Member 'LandscapeBpBrushTest_Render::InCombinedResult' has a wrong offset!");
//static_assert(offsetof(LandscapeBpBrushTest_Render, InWeightmapLayerName) == 0x000010, "Member 'LandscapeBpBrushTest_Render::InWeightmapLayerName' has a wrong offset!");
//static_assert(offsetof(LandscapeBpBrushTest_Render, ReturnValue) == 0x000018, "Member 'LandscapeBpBrushTest_Render::ReturnValue' has a wrong offset!");

// Function b1-Managed.LandscapeLayerBrush.ReceiveTick
// 0x0004 (0x0004 - 0x0000)
struct LandscapeLayerBrush_ReceiveTick final
{
public:
	float                                         DeltaSeconds;                                      // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
//static_assert(alignof(LandscapeLayerBrush_ReceiveTick) == 0x000004, "Wrong alignment on LandscapeLayerBrush_ReceiveTick");
//static_assert(sizeof(LandscapeLayerBrush_ReceiveTick) == 0x000004, "Wrong size on LandscapeLayerBrush_ReceiveTick");
//static_assert(offsetof(LandscapeLayerBrush_ReceiveTick, DeltaSeconds) == 0x000000, "Member 'LandscapeLayerBrush_ReceiveTick::DeltaSeconds' has a wrong offset!");

// Function b1-Managed.LandscapeLayerBrush.Initialize
// 0x0070 (0x0070 - 0x0000)
struct LandscapeLayerBrush_Initialize final
{
public:
	struct FTransform                             InLandscapeTransform;                              // 0x0000(0x0060)(Parm, IsPlainOldData, NoDestructor)
	struct FIntPoint                              InLandscapeSize;                                   // 0x0060(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FIntPoint                              InLandscapeRenderTargetSize;                       // 0x0068(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
//static_assert(alignof(LandscapeLayerBrush_Initialize) == 0x000010, "Wrong alignment on LandscapeLayerBrush_Initialize");
//static_assert(sizeof(LandscapeLayerBrush_Initialize) == 0x000070, "Wrong size on LandscapeLayerBrush_Initialize");
//static_assert(offsetof(LandscapeLayerBrush_Initialize, InLandscapeTransform) == 0x000000, "Member 'LandscapeLayerBrush_Initialize::InLandscapeTransform' has a wrong offset!");
//static_assert(offsetof(LandscapeLayerBrush_Initialize, InLandscapeSize) == 0x000060, "Member 'LandscapeLayerBrush_Initialize::InLandscapeSize' has a wrong offset!");
//static_assert(offsetof(LandscapeLayerBrush_Initialize, InLandscapeRenderTargetSize) == 0x000068, "Member 'LandscapeLayerBrush_Initialize::InLandscapeRenderTargetSize' has a wrong offset!");

// Function b1-Managed.LandscapeLayerBrush.Render
// 0x0020 (0x0020 - 0x0000)
struct LandscapeLayerBrush_Render final
{
public:
	uint8                                         InIsHeightmap : 1;                                 // 0x0000(0x0001)(BitIndex: 0x00, PropSize: 0x0001 (Parm, NoDestructor, HasGetValueTypeHash))
	uint8                                         Pad_1[0x7];                                        // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UTextureRenderTarget2D*                 InCombinedResult;                                  // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class FName                                   InWeightmapLayerName;                              // 0x0010(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UTextureRenderTarget2D*                 ReturnValue;                                       // 0x0018(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
//static_assert(alignof(LandscapeLayerBrush_Render) == 0x000008, "Wrong alignment on LandscapeLayerBrush_Render");
//static_assert(sizeof(LandscapeLayerBrush_Render) == 0x000020, "Wrong size on LandscapeLayerBrush_Render");
//static_assert(offsetof(LandscapeLayerBrush_Render, InCombinedResult) == 0x000008, "Member 'LandscapeLayerBrush_Render::InCombinedResult' has a wrong offset!");
//static_assert(offsetof(LandscapeLayerBrush_Render, InWeightmapLayerName) == 0x000010, "Member 'LandscapeLayerBrush_Render::InWeightmapLayerName' has a wrong offset!");
//static_assert(offsetof(LandscapeLayerBrush_Render, ReturnValue) == 0x000018, "Member 'LandscapeLayerBrush_Render::ReturnValue' has a wrong offset!");

// Function b1-Managed.LandscapeRoadBrush.ReceiveTick
// 0x0004 (0x0004 - 0x0000)
struct LandscapeRoadBrush_ReceiveTick final
{
public:
	float                                         DeltaSeconds;                                      // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
//static_assert(alignof(LandscapeRoadBrush_ReceiveTick) == 0x000004, "Wrong alignment on LandscapeRoadBrush_ReceiveTick");
//static_assert(sizeof(LandscapeRoadBrush_ReceiveTick) == 0x000004, "Wrong size on LandscapeRoadBrush_ReceiveTick");
//static_assert(offsetof(LandscapeRoadBrush_ReceiveTick, DeltaSeconds) == 0x000000, "Member 'LandscapeRoadBrush_ReceiveTick::DeltaSeconds' has a wrong offset!");

// Function b1-Managed.LandscapeRoadBrush.Initialize
// 0x0070 (0x0070 - 0x0000)
struct LandscapeRoadBrush_Initialize final
{
public:
	struct FTransform                             InLandscapeTransform;                              // 0x0000(0x0060)(Parm, IsPlainOldData, NoDestructor)
	struct FIntPoint                              InLandscapeSize;                                   // 0x0060(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FIntPoint                              InLandscapeRenderTargetSize;                       // 0x0068(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
//static_assert(alignof(LandscapeRoadBrush_Initialize) == 0x000010, "Wrong alignment on LandscapeRoadBrush_Initialize");
//static_assert(sizeof(LandscapeRoadBrush_Initialize) == 0x000070, "Wrong size on LandscapeRoadBrush_Initialize");
//static_assert(offsetof(LandscapeRoadBrush_Initialize, InLandscapeTransform) == 0x000000, "Member 'LandscapeRoadBrush_Initialize::InLandscapeTransform' has a wrong offset!");
//static_assert(offsetof(LandscapeRoadBrush_Initialize, InLandscapeSize) == 0x000060, "Member 'LandscapeRoadBrush_Initialize::InLandscapeSize' has a wrong offset!");
//static_assert(offsetof(LandscapeRoadBrush_Initialize, InLandscapeRenderTargetSize) == 0x000068, "Member 'LandscapeRoadBrush_Initialize::InLandscapeRenderTargetSize' has a wrong offset!");

// Function b1-Managed.LandscapeRoadBrush.Render
// 0x0020 (0x0020 - 0x0000)
struct LandscapeRoadBrush_Render final
{
public:
	uint8                                         InIsHeightmap : 1;                                 // 0x0000(0x0001)(BitIndex: 0x00, PropSize: 0x0001 (Parm, NoDestructor, HasGetValueTypeHash))
	uint8                                         Pad_1[0x7];                                        // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UTextureRenderTarget2D*                 InCombinedResult;                                  // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class FName                                   InWeightmapLayerName;                              // 0x0010(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UTextureRenderTarget2D*                 ReturnValue;                                       // 0x0018(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
//static_assert(alignof(LandscapeRoadBrush_Render) == 0x000008, "Wrong alignment on LandscapeRoadBrush_Render");
//static_assert(sizeof(LandscapeRoadBrush_Render) == 0x000020, "Wrong size on LandscapeRoadBrush_Render");
//static_assert(offsetof(LandscapeRoadBrush_Render, InCombinedResult) == 0x000008, "Member 'LandscapeRoadBrush_Render::InCombinedResult' has a wrong offset!");
//static_assert(offsetof(LandscapeRoadBrush_Render, InWeightmapLayerName) == 0x000010, "Member 'LandscapeRoadBrush_Render::InWeightmapLayerName' has a wrong offset!");
//static_assert(offsetof(LandscapeRoadBrush_Render, ReturnValue) == 0x000018, "Member 'LandscapeRoadBrush_Render::ReturnValue' has a wrong offset!");

// Function b1-Managed.LandscapeRoadSpline.ReceiveTick
// 0x0004 (0x0004 - 0x0000)
struct LandscapeRoadSpline_ReceiveTick final
{
public:
	float                                         DeltaSeconds;                                      // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
//static_assert(alignof(LandscapeRoadSpline_ReceiveTick) == 0x000004, "Wrong alignment on LandscapeRoadSpline_ReceiveTick");
//static_assert(sizeof(LandscapeRoadSpline_ReceiveTick) == 0x000004, "Wrong size on LandscapeRoadSpline_ReceiveTick");
//static_assert(offsetof(LandscapeRoadSpline_ReceiveTick, DeltaSeconds) == 0x000000, "Member 'LandscapeRoadSpline_ReceiveTick::DeltaSeconds' has a wrong offset!");

// Function b1-Managed.BANS_GSB1TimedPlayNiagaraFX.GetSoftReferences
// 0x0010 (0x0010 - 0x0000)
struct BANS_GSB1TimedPlayNiagaraFX_GetSoftReferences final
{
public:
	TArray<struct FSoftObjectPath>                ReturnValue;                                       // 0x0000(0x0010)(Parm, OutParm, ReturnParm)
};
//static_assert(alignof(BANS_GSB1TimedPlayNiagaraFX_GetSoftReferences) == 0x000008, "Wrong alignment on BANS_GSB1TimedPlayNiagaraFX_GetSoftReferences");
//static_assert(sizeof(BANS_GSB1TimedPlayNiagaraFX_GetSoftReferences) == 0x000010, "Wrong size on BANS_GSB1TimedPlayNiagaraFX_GetSoftReferences");
//static_assert(offsetof(BANS_GSB1TimedPlayNiagaraFX_GetSoftReferences, ReturnValue) == 0x000000, "Member 'BANS_GSB1TimedPlayNiagaraFX_GetSoftReferences::ReturnValue' has a wrong offset!");

// Function b1-Managed.BANS_GSB1TimedPlayNiagaraFX.GSNotifyBeginCS
// 0x0048 (0x0048 - 0x0000)
struct BANS_GSB1TimedPlayNiagaraFX_GSNotifyBeginCS final
{
public:
	struct FUStGSNotifyParam                      NotifyParam;                                       // 0x0000(0x0040)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
	float                                         TotalDuration;                                     // 0x0040(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
//static_assert(alignof(BANS_GSB1TimedPlayNiagaraFX_GSNotifyBeginCS) == 0x000008, "Wrong alignment on BANS_GSB1TimedPlayNiagaraFX_GSNotifyBeginCS");
//static_assert(sizeof(BANS_GSB1TimedPlayNiagaraFX_GSNotifyBeginCS) == 0x000048, "Wrong size on BANS_GSB1TimedPlayNiagaraFX_GSNotifyBeginCS");
//static_assert(offsetof(BANS_GSB1TimedPlayNiagaraFX_GSNotifyBeginCS, NotifyParam) == 0x000000, "Member 'BANS_GSB1TimedPlayNiagaraFX_GSNotifyBeginCS::NotifyParam' has a wrong offset!");
//static_assert(offsetof(BANS_GSB1TimedPlayNiagaraFX_GSNotifyBeginCS, TotalDuration) == 0x000040, "Member 'BANS_GSB1TimedPlayNiagaraFX_GSNotifyBeginCS::TotalDuration' has a wrong offset!");

// Function b1-Managed.BANS_GSB1TimedPlayNiagaraFX.GSNotifyEndCS
// 0x0040 (0x0040 - 0x0000)
struct BANS_GSB1TimedPlayNiagaraFX_GSNotifyEndCS final
{
public:
	struct FUStGSNotifyParam                      NotifyParam;                                       // 0x0000(0x0040)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
//static_assert(alignof(BANS_GSB1TimedPlayNiagaraFX_GSNotifyEndCS) == 0x000008, "Wrong alignment on BANS_GSB1TimedPlayNiagaraFX_GSNotifyEndCS");
//static_assert(sizeof(BANS_GSB1TimedPlayNiagaraFX_GSNotifyEndCS) == 0x000040, "Wrong size on BANS_GSB1TimedPlayNiagaraFX_GSNotifyEndCS");
//static_assert(offsetof(BANS_GSB1TimedPlayNiagaraFX_GSNotifyEndCS, NotifyParam) == 0x000000, "Member 'BANS_GSB1TimedPlayNiagaraFX_GSNotifyEndCS::NotifyParam' has a wrong offset!");

// Function b1-Managed.BGG_GameModeB1Net.ReceiveEndPlay
// 0x0001 (0x0001 - 0x0000)
struct BGG_GameModeB1Net_ReceiveEndPlay final
{
public:
	EEndPlayReason                                EndPlayReason;                                     // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
//static_assert(alignof(BGG_GameModeB1Net_ReceiveEndPlay) == 0x000001, "Wrong alignment on BGG_GameModeB1Net_ReceiveEndPlay");
//static_assert(sizeof(BGG_GameModeB1Net_ReceiveEndPlay) == 0x000001, "Wrong size on BGG_GameModeB1Net_ReceiveEndPlay");
//static_assert(offsetof(BGG_GameModeB1Net_ReceiveEndPlay, EndPlayReason) == 0x000000, "Member 'BGG_GameModeB1Net_ReceiveEndPlay::EndPlayReason' has a wrong offset!");

// Function b1-Managed.BGG_GameModeB1Net.PostLoginCS
// 0x0008 (0x0008 - 0x0000)
struct BGG_GameModeB1Net_PostLoginCS final
{
public:
	class APlayerController*                      NewPlayer;                                         // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
//static_assert(alignof(BGG_GameModeB1Net_PostLoginCS) == 0x000008, "Wrong alignment on BGG_GameModeB1Net_PostLoginCS");
//static_assert(sizeof(BGG_GameModeB1Net_PostLoginCS) == 0x000008, "Wrong size on BGG_GameModeB1Net_PostLoginCS");
//static_assert(offsetof(BGG_GameModeB1Net_PostLoginCS, NewPlayer) == 0x000000, "Member 'BGG_GameModeB1Net_PostLoginCS::NewPlayer' has a wrong offset!");

// Function b1-Managed.MyTestHttpListener.OnRequestProgress
// 0x000C (0x000C - 0x0000)
struct MyTestHttpListener_OnRequestProgress final
{
public:
	int32                                         SentBytes;                                         // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         LReceivedBytes;                                    // 0x0004(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         LTotalBytes;                                       // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
//static_assert(alignof(MyTestHttpListener_OnRequestProgress) == 0x000004, "Wrong alignment on MyTestHttpListener_OnRequestProgress");
//static_assert(sizeof(MyTestHttpListener_OnRequestProgress) == 0x00000C, "Wrong size on MyTestHttpListener_OnRequestProgress");
//static_assert(offsetof(MyTestHttpListener_OnRequestProgress, SentBytes) == 0x000000, "Member 'MyTestHttpListener_OnRequestProgress::SentBytes' has a wrong offset!");
//static_assert(offsetof(MyTestHttpListener_OnRequestProgress, LReceivedBytes) == 0x000004, "Member 'MyTestHttpListener_OnRequestProgress::LReceivedBytes' has a wrong offset!");
//static_assert(offsetof(MyTestHttpListener_OnRequestProgress, LTotalBytes) == 0x000008, "Member 'MyTestHttpListener_OnRequestProgress::LTotalBytes' has a wrong offset!");

// Function b1-Managed.MyTestHttpListener.OnReponseComplete
// 0x0018 (0x0018 - 0x0000)
struct MyTestHttpListener_OnReponseComplete final
{
public:
	uint8                                         bSuccess : 1;                                      // 0x0000(0x0001)(BitIndex: 0x00, PropSize: 0x0001 (Parm, NoDestructor, HasGetValueTypeHash))
	uint8                                         Pad_1[0x3];                                        // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         HttpCode;                                          // 0x0004(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	TArray<uint8>                                 Content;                                           // 0x0008(0x0010)(ConstParm, Parm, OutParm, ReferenceParm)
};
//static_assert(alignof(MyTestHttpListener_OnReponseComplete) == 0x000008, "Wrong alignment on MyTestHttpListener_OnReponseComplete");
//static_assert(sizeof(MyTestHttpListener_OnReponseComplete) == 0x000018, "Wrong size on MyTestHttpListener_OnReponseComplete");
//static_assert(offsetof(MyTestHttpListener_OnReponseComplete, HttpCode) == 0x000004, "Member 'MyTestHttpListener_OnReponseComplete::HttpCode' has a wrong offset!");
//static_assert(offsetof(MyTestHttpListener_OnReponseComplete, Content) == 0x000008, "Member 'MyTestHttpListener_OnReponseComplete::Content' has a wrong offset!");

// Function b1-Managed.MyTestHttpListener.IsNeedProgress
// 0x0001 (0x0001 - 0x0000)
struct MyTestHttpListener_IsNeedProgress final
{
public:
	uint8                                         ReturnValue : 1;                                   // 0x0000(0x0001)(BitIndex: 0x00, PropSize: 0x0001 (Parm, OutParm, ReturnParm, NoDestructor, HasGetValueTypeHash))
};
//static_assert(alignof(MyTestHttpListener_IsNeedProgress) == 0x000001, "Wrong alignment on MyTestHttpListener_IsNeedProgress");
//static_assert(sizeof(MyTestHttpListener_IsNeedProgress) == 0x000001, "Wrong size on MyTestHttpListener_IsNeedProgress");

// Function b1-Managed.SharpPerfTest.ReceiveTick
// 0x0004 (0x0004 - 0x0000)
struct SharpPerfTest_ReceiveTick final
{
public:
	float                                         DeltaSeconds;                                      // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
//static_assert(alignof(SharpPerfTest_ReceiveTick) == 0x000004, "Wrong alignment on SharpPerfTest_ReceiveTick");
//static_assert(sizeof(SharpPerfTest_ReceiveTick) == 0x000004, "Wrong size on SharpPerfTest_ReceiveTick");
//static_assert(offsetof(SharpPerfTest_ReceiveTick, DeltaSeconds) == 0x000000, "Member 'SharpPerfTest_ReceiveTick::DeltaSeconds' has a wrong offset!");

// Function b1-Managed.SharpPerfTest.TickInCS
// 0x0004 (0x0004 - 0x0000)
struct SharpPerfTest_TickInCS final
{
public:
	float                                         DeltaTime;                                         // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
//static_assert(alignof(SharpPerfTest_TickInCS) == 0x000004, "Wrong alignment on SharpPerfTest_TickInCS");
//static_assert(sizeof(SharpPerfTest_TickInCS) == 0x000004, "Wrong size on SharpPerfTest_TickInCS");
//static_assert(offsetof(SharpPerfTest_TickInCS, DeltaTime) == 0x000000, "Member 'SharpPerfTest_TickInCS::DeltaTime' has a wrong offset!");

// Function b1-Managed.SharpPerfTest.DelegateCB
// 0x0010 (0x0010 - 0x0000)
struct SharpPerfTest_DelegateCB final
{
public:
	int32                                         P1;                                                // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         P2;                                                // 0x0004(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         P3;                                                // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         P4;                                                // 0x000C(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
//static_assert(alignof(SharpPerfTest_DelegateCB) == 0x000004, "Wrong alignment on SharpPerfTest_DelegateCB");
//static_assert(sizeof(SharpPerfTest_DelegateCB) == 0x000010, "Wrong size on SharpPerfTest_DelegateCB");
//static_assert(offsetof(SharpPerfTest_DelegateCB, P1) == 0x000000, "Member 'SharpPerfTest_DelegateCB::P1' has a wrong offset!");
//static_assert(offsetof(SharpPerfTest_DelegateCB, P2) == 0x000004, "Member 'SharpPerfTest_DelegateCB::P2' has a wrong offset!");
//static_assert(offsetof(SharpPerfTest_DelegateCB, P3) == 0x000008, "Member 'SharpPerfTest_DelegateCB::P3' has a wrong offset!");
//static_assert(offsetof(SharpPerfTest_DelegateCB, P4) == 0x00000C, "Member 'SharpPerfTest_DelegateCB::P4' has a wrong offset!");

// Function b1-Managed.IL2CPPUnitTestFuncLib.GetIL2CPPTestValue
// 0x0008 (0x0008 - 0x0000)
struct IL2CPPUnitTestFuncLib_GetIL2CPPTestValue final
{
public:
	int32                                         TestVal;                                           // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         ReturnValue;                                       // 0x0004(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
//static_assert(alignof(IL2CPPUnitTestFuncLib_GetIL2CPPTestValue) == 0x000004, "Wrong alignment on IL2CPPUnitTestFuncLib_GetIL2CPPTestValue");
//static_assert(sizeof(IL2CPPUnitTestFuncLib_GetIL2CPPTestValue) == 0x000008, "Wrong size on IL2CPPUnitTestFuncLib_GetIL2CPPTestValue");
//static_assert(offsetof(IL2CPPUnitTestFuncLib_GetIL2CPPTestValue, TestVal) == 0x000000, "Member 'IL2CPPUnitTestFuncLib_GetIL2CPPTestValue::TestVal' has a wrong offset!");
//static_assert(offsetof(IL2CPPUnitTestFuncLib_GetIL2CPPTestValue, ReturnValue) == 0x000004, "Member 'IL2CPPUnitTestFuncLib_GetIL2CPPTestValue::ReturnValue' has a wrong offset!");

// Function b1-Managed.IL2CPPUnitTest.IntRetTest2
// 0x0010 (0x0010 - 0x0000)
struct IL2CPPUnitTest_IntRetTest2 final
{
public:
	int32                                         P1;                                                // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         P2;                                                // 0x0004(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         bP3 : 1;                                           // 0x0008(0x0001)(BitIndex: 0x00, PropSize: 0x0001 (Parm, NoDestructor, HasGetValueTypeHash))
	uint8                                         Pad_9[0x3];                                        // 0x0009(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         ReturnValue;                                       // 0x000C(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
//static_assert(alignof(IL2CPPUnitTest_IntRetTest2) == 0x000004, "Wrong alignment on IL2CPPUnitTest_IntRetTest2");
//static_assert(sizeof(IL2CPPUnitTest_IntRetTest2) == 0x000010, "Wrong size on IL2CPPUnitTest_IntRetTest2");
//static_assert(offsetof(IL2CPPUnitTest_IntRetTest2, P1) == 0x000000, "Member 'IL2CPPUnitTest_IntRetTest2::P1' has a wrong offset!");
//static_assert(offsetof(IL2CPPUnitTest_IntRetTest2, P2) == 0x000004, "Member 'IL2CPPUnitTest_IntRetTest2::P2' has a wrong offset!");
//static_assert(offsetof(IL2CPPUnitTest_IntRetTest2, ReturnValue) == 0x00000C, "Member 'IL2CPPUnitTest_IntRetTest2::ReturnValue' has a wrong offset!");

// Function b1-Managed.IL2CPPUnitTest.BoolRetTest
// 0x000C (0x000C - 0x0000)
struct IL2CPPUnitTest_BoolRetTest final
{
public:
	int32                                         P1;                                                // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         P2;                                                // 0x0004(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         bP3 : 1;                                           // 0x0008(0x0001)(BitIndex: 0x00, PropSize: 0x0001 (Parm, NoDestructor, HasGetValueTypeHash))
	uint8                                         BitPad_8_1 : 7;                                    // 0x0008(0x0001)(Fixing Bit-Field Size For New Byte [ Dumper-7 ])
	uint8                                         ReturnValue : 1;                                   // 0x0009(0x0001)(BitIndex: 0x00, PropSize: 0x0001 (Parm, OutParm, ReturnParm, NoDestructor, HasGetValueTypeHash))
};
//static_assert(alignof(IL2CPPUnitTest_BoolRetTest) == 0x000004, "Wrong alignment on IL2CPPUnitTest_BoolRetTest");
//static_assert(sizeof(IL2CPPUnitTest_BoolRetTest) == 0x00000C, "Wrong size on IL2CPPUnitTest_BoolRetTest");
//static_assert(offsetof(IL2CPPUnitTest_BoolRetTest, P1) == 0x000000, "Member 'IL2CPPUnitTest_BoolRetTest::P1' has a wrong offset!");
//static_assert(offsetof(IL2CPPUnitTest_BoolRetTest, P2) == 0x000004, "Member 'IL2CPPUnitTest_BoolRetTest::P2' has a wrong offset!");

// Function b1-Managed.IL2CPPUnitTest.IntRetTest
// 0x0014 (0x0014 - 0x0000)
struct IL2CPPUnitTest_IntRetTest final
{
public:
	int32                                         P1;                                                // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         P2;                                                // 0x0004(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         bP3 : 1;                                           // 0x0008(0x0001)(BitIndex: 0x00, PropSize: 0x0001 (Parm, NoDestructor, HasGetValueTypeHash))
	uint8                                         Pad_9[0x3];                                        // 0x0009(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         Out1;                                              // 0x000C(0x0004)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         ReturnValue;                                       // 0x0010(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
//static_assert(alignof(IL2CPPUnitTest_IntRetTest) == 0x000004, "Wrong alignment on IL2CPPUnitTest_IntRetTest");
//static_assert(sizeof(IL2CPPUnitTest_IntRetTest) == 0x000014, "Wrong size on IL2CPPUnitTest_IntRetTest");
//static_assert(offsetof(IL2CPPUnitTest_IntRetTest, P1) == 0x000000, "Member 'IL2CPPUnitTest_IntRetTest::P1' has a wrong offset!");
//static_assert(offsetof(IL2CPPUnitTest_IntRetTest, P2) == 0x000004, "Member 'IL2CPPUnitTest_IntRetTest::P2' has a wrong offset!");
//static_assert(offsetof(IL2CPPUnitTest_IntRetTest, Out1) == 0x00000C, "Member 'IL2CPPUnitTest_IntRetTest::Out1' has a wrong offset!");
//static_assert(offsetof(IL2CPPUnitTest_IntRetTest, ReturnValue) == 0x000010, "Member 'IL2CPPUnitTest_IntRetTest::ReturnValue' has a wrong offset!");

// Function b1-Managed.IL2CPPUnitTest.TickInCS
// 0x0004 (0x0004 - 0x0000)
struct IL2CPPUnitTest_TickInCS final
{
public:
	float                                         DeltaTime;                                         // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
//static_assert(alignof(IL2CPPUnitTest_TickInCS) == 0x000004, "Wrong alignment on IL2CPPUnitTest_TickInCS");
//static_assert(sizeof(IL2CPPUnitTest_TickInCS) == 0x000004, "Wrong size on IL2CPPUnitTest_TickInCS");
//static_assert(offsetof(IL2CPPUnitTest_TickInCS, DeltaTime) == 0x000000, "Member 'IL2CPPUnitTest_TickInCS::DeltaTime' has a wrong offset!");

// Function b1-Managed.IL2CPPUnitTest.TestPassComplexStruct
// 0x0028 (0x0028 - 0x0000)
struct IL2CPPUnitTest_TestPassComplexStruct final
{
public:
	struct FIL2CPPUnitTestStructOuter             OuterStruct;                                       // 0x0000(0x0028)(Parm, HasGetValueTypeHash)
};
//static_assert(alignof(IL2CPPUnitTest_TestPassComplexStruct) == 0x000008, "Wrong alignment on IL2CPPUnitTest_TestPassComplexStruct");
//static_assert(sizeof(IL2CPPUnitTest_TestPassComplexStruct) == 0x000028, "Wrong size on IL2CPPUnitTest_TestPassComplexStruct");
//static_assert(offsetof(IL2CPPUnitTest_TestPassComplexStruct, OuterStruct) == 0x000000, "Member 'IL2CPPUnitTest_TestPassComplexStruct::OuterStruct' has a wrong offset!");

// Function b1-Managed.IL2CPPUnitTest.DelegateCB
// 0x0010 (0x0010 - 0x0000)
struct IL2CPPUnitTest_DelegateCB final
{
public:
	int32                                         P1;                                                // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         P2;                                                // 0x0004(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         P3;                                                // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         P4;                                                // 0x000C(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
//static_assert(alignof(IL2CPPUnitTest_DelegateCB) == 0x000004, "Wrong alignment on IL2CPPUnitTest_DelegateCB");
//static_assert(sizeof(IL2CPPUnitTest_DelegateCB) == 0x000010, "Wrong size on IL2CPPUnitTest_DelegateCB");
//static_assert(offsetof(IL2CPPUnitTest_DelegateCB, P1) == 0x000000, "Member 'IL2CPPUnitTest_DelegateCB::P1' has a wrong offset!");
//static_assert(offsetof(IL2CPPUnitTest_DelegateCB, P2) == 0x000004, "Member 'IL2CPPUnitTest_DelegateCB::P2' has a wrong offset!");
//static_assert(offsetof(IL2CPPUnitTest_DelegateCB, P3) == 0x000008, "Member 'IL2CPPUnitTest_DelegateCB::P3' has a wrong offset!");
//static_assert(offsetof(IL2CPPUnitTest_DelegateCB, P4) == 0x00000C, "Member 'IL2CPPUnitTest_DelegateCB::P4' has a wrong offset!");

// Function b1-Managed.IL2CPPUnitTest.CallInBP
// 0x0010 (0x0010 - 0x0000)
struct IL2CPPUnitTest_CallInBP final
{
public:
	class FString                                 CheckIt;                                           // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash)
};
//static_assert(alignof(IL2CPPUnitTest_CallInBP) == 0x000008, "Wrong alignment on IL2CPPUnitTest_CallInBP");
//static_assert(sizeof(IL2CPPUnitTest_CallInBP) == 0x000010, "Wrong size on IL2CPPUnitTest_CallInBP");
//static_assert(offsetof(IL2CPPUnitTest_CallInBP, CheckIt) == 0x000000, "Member 'IL2CPPUnitTest_CallInBP::CheckIt' has a wrong offset!");

// Function b1-Managed.GSGridConScreenAdapter.UpdateForAdaptInEditorMode
// 0x000C (0x000C - 0x0000)
struct GSGridConScreenAdapter_UpdateForAdaptInEditorMode final
{
public:
	float                                         DeltaTime;                                         // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         RefViewPortWidth;                                  // 0x0004(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         RefViewPortHeight;                                 // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
//static_assert(alignof(GSGridConScreenAdapter_UpdateForAdaptInEditorMode) == 0x000004, "Wrong alignment on GSGridConScreenAdapter_UpdateForAdaptInEditorMode");
//static_assert(sizeof(GSGridConScreenAdapter_UpdateForAdaptInEditorMode) == 0x00000C, "Wrong size on GSGridConScreenAdapter_UpdateForAdaptInEditorMode");
//static_assert(offsetof(GSGridConScreenAdapter_UpdateForAdaptInEditorMode, DeltaTime) == 0x000000, "Member 'GSGridConScreenAdapter_UpdateForAdaptInEditorMode::DeltaTime' has a wrong offset!");
//static_assert(offsetof(GSGridConScreenAdapter_UpdateForAdaptInEditorMode, RefViewPortWidth) == 0x000004, "Member 'GSGridConScreenAdapter_UpdateForAdaptInEditorMode::RefViewPortWidth' has a wrong offset!");
//static_assert(offsetof(GSGridConScreenAdapter_UpdateForAdaptInEditorMode, RefViewPortHeight) == 0x000008, "Member 'GSGridConScreenAdapter_UpdateForAdaptInEditorMode::RefViewPortHeight' has a wrong offset!");

// Function b1-Managed.GSGridConScreenAdapter.UpdateForAdapt
// 0x0004 (0x0004 - 0x0000)
struct GSGridConScreenAdapter_UpdateForAdapt final
{
public:
	float                                         DeltaTime;                                         // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
//static_assert(alignof(GSGridConScreenAdapter_UpdateForAdapt) == 0x000004, "Wrong alignment on GSGridConScreenAdapter_UpdateForAdapt");
//static_assert(sizeof(GSGridConScreenAdapter_UpdateForAdapt) == 0x000004, "Wrong size on GSGridConScreenAdapter_UpdateForAdapt");
//static_assert(offsetof(GSGridConScreenAdapter_UpdateForAdapt, DeltaTime) == 0x000000, "Member 'GSGridConScreenAdapter_UpdateForAdapt::DeltaTime' has a wrong offset!");

// Function b1-Managed.GSProcBar.SetMaxIncPercent
// 0x0004 (0x0004 - 0x0000)
struct GSProcBar_SetMaxIncPercent final
{
public:
	float                                         InMaxIncPercent;                                   // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
//static_assert(alignof(GSProcBar_SetMaxIncPercent) == 0x000004, "Wrong alignment on GSProcBar_SetMaxIncPercent");
//static_assert(sizeof(GSProcBar_SetMaxIncPercent) == 0x000004, "Wrong size on GSProcBar_SetMaxIncPercent");
//static_assert(offsetof(GSProcBar_SetMaxIncPercent, InMaxIncPercent) == 0x000000, "Member 'GSProcBar_SetMaxIncPercent::InMaxIncPercent' has a wrong offset!");

// Function b1-Managed.GSButton.GSOnLostFocused
// 0x0008 (0x0008 - 0x0000)
struct GSButton_GSOnLostFocused final
{
public:
	struct FFocusEvent                            FocusEvent;                                        // 0x0000(0x0008)(Parm, NoDestructor)
};
//static_assert(alignof(GSButton_GSOnLostFocused) == 0x000004, "Wrong alignment on GSButton_GSOnLostFocused");
//static_assert(sizeof(GSButton_GSOnLostFocused) == 0x000008, "Wrong size on GSButton_GSOnLostFocused");
//static_assert(offsetof(GSButton_GSOnLostFocused, FocusEvent) == 0x000000, "Member 'GSButton_GSOnLostFocused::FocusEvent' has a wrong offset!");

// Function b1-Managed.GSButton.GSOnFocused
// 0x0008 (0x0008 - 0x0000)
struct GSButton_GSOnFocused final
{
public:
	struct FFocusEvent                            FocusEvent;                                        // 0x0000(0x0008)(Parm, NoDestructor)
};
//static_assert(alignof(GSButton_GSOnFocused) == 0x000004, "Wrong alignment on GSButton_GSOnFocused");
//static_assert(sizeof(GSButton_GSOnFocused) == 0x000008, "Wrong size on GSButton_GSOnFocused");
//static_assert(offsetof(GSButton_GSOnFocused, FocusEvent) == 0x000000, "Member 'GSButton_GSOnFocused::FocusEvent' has a wrong offset!");

// Function b1-Managed.GSRoundRectCS.CalcMappingRoundRectPoint
// 0x0060 (0x0060 - 0x0000)
struct GSRoundRectCS_CalcMappingRoundRectPoint final
{
public:
	struct FVector2D                              PosInViewPort;                                     // 0x0000(0x0010)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         IsInFront : 1;                                     // 0x0010(0x0001)(BitIndex: 0x00, PropSize: 0x0001 (Parm, NoDestructor, HasGetValueTypeHash))
	uint8                                         Pad_11[0x7];                                       // 0x0011(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector2D                              InnerContentRectSize;                              // 0x0018(0x0010)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector2D                              InnerContentRectAlign;                             // 0x0028(0x0010)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         IsOuter : 1;                                       // 0x0038(0x0001)(BitIndex: 0x00, PropSize: 0x0001 (Parm, NoDestructor, HasGetValueTypeHash))
	uint8                                         Pad_39[0x7];                                       // 0x0039(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector2D                              BorderPosRefRoundRect;                             // 0x0040(0x0010)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         RectAngle;                                         // 0x0050(0x0004)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         OutIndicatorType;                                  // 0x0054(0x0004)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         ReturnValue : 1;                                   // 0x0058(0x0001)(BitIndex: 0x00, PropSize: 0x0001 (Parm, OutParm, ReturnParm, NoDestructor, HasGetValueTypeHash))
};
//static_assert(alignof(GSRoundRectCS_CalcMappingRoundRectPoint) == 0x000008, "Wrong alignment on GSRoundRectCS_CalcMappingRoundRectPoint");
//static_assert(sizeof(GSRoundRectCS_CalcMappingRoundRectPoint) == 0x000060, "Wrong size on GSRoundRectCS_CalcMappingRoundRectPoint");
//static_assert(offsetof(GSRoundRectCS_CalcMappingRoundRectPoint, PosInViewPort) == 0x000000, "Member 'GSRoundRectCS_CalcMappingRoundRectPoint::PosInViewPort' has a wrong offset!");
//static_assert(offsetof(GSRoundRectCS_CalcMappingRoundRectPoint, InnerContentRectSize) == 0x000018, "Member 'GSRoundRectCS_CalcMappingRoundRectPoint::InnerContentRectSize' has a wrong offset!");
//static_assert(offsetof(GSRoundRectCS_CalcMappingRoundRectPoint, InnerContentRectAlign) == 0x000028, "Member 'GSRoundRectCS_CalcMappingRoundRectPoint::InnerContentRectAlign' has a wrong offset!");
//static_assert(offsetof(GSRoundRectCS_CalcMappingRoundRectPoint, BorderPosRefRoundRect) == 0x000040, "Member 'GSRoundRectCS_CalcMappingRoundRectPoint::BorderPosRefRoundRect' has a wrong offset!");
//static_assert(offsetof(GSRoundRectCS_CalcMappingRoundRectPoint, RectAngle) == 0x000050, "Member 'GSRoundRectCS_CalcMappingRoundRectPoint::RectAngle' has a wrong offset!");
//static_assert(offsetof(GSRoundRectCS_CalcMappingRoundRectPoint, OutIndicatorType) == 0x000054, "Member 'GSRoundRectCS_CalcMappingRoundRectPoint::OutIndicatorType' has a wrong offset!");

// Function b1-Managed.GSRoundRectCS.GetLastUpdateCenterPos
// 0x0010 (0x0010 - 0x0000)
struct GSRoundRectCS_GetLastUpdateCenterPos final
{
public:
	struct FVector2D                              ReturnValue;                                       // 0x0000(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
//static_assert(alignof(GSRoundRectCS_GetLastUpdateCenterPos) == 0x000008, "Wrong alignment on GSRoundRectCS_GetLastUpdateCenterPos");
//static_assert(sizeof(GSRoundRectCS_GetLastUpdateCenterPos) == 0x000010, "Wrong size on GSRoundRectCS_GetLastUpdateCenterPos");
//static_assert(offsetof(GSRoundRectCS_GetLastUpdateCenterPos, ReturnValue) == 0x000000, "Member 'GSRoundRectCS_GetLastUpdateCenterPos::ReturnValue' has a wrong offset!");

// Function b1-Managed.GSRoundRectCS.IsInRoundRect
// 0x0018 (0x0018 - 0x0000)
struct GSRoundRectCS_IsInRoundRect final
{
public:
	struct FVector2D                              PosInViewPort;                                     // 0x0000(0x0010)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         ReturnValue : 1;                                   // 0x0010(0x0001)(BitIndex: 0x00, PropSize: 0x0001 (Parm, OutParm, ReturnParm, NoDestructor, HasGetValueTypeHash))
};
//static_assert(alignof(GSRoundRectCS_IsInRoundRect) == 0x000008, "Wrong alignment on GSRoundRectCS_IsInRoundRect");
//static_assert(sizeof(GSRoundRectCS_IsInRoundRect) == 0x000018, "Wrong size on GSRoundRectCS_IsInRoundRect");
//static_assert(offsetof(GSRoundRectCS_IsInRoundRect, PosInViewPort) == 0x000000, "Member 'GSRoundRectCS_IsInRoundRect::PosInViewPort' has a wrong offset!");

// Function b1-Managed.GSRoundRectCS.SetDebugDraw
// 0x0001 (0x0001 - 0x0000)
struct GSRoundRectCS_SetDebugDraw final
{
public:
	uint8                                         IsDebugDraw : 1;                                   // 0x0000(0x0001)(BitIndex: 0x00, PropSize: 0x0001 (Parm, NoDestructor, HasGetValueTypeHash))
};
//static_assert(alignof(GSRoundRectCS_SetDebugDraw) == 0x000001, "Wrong alignment on GSRoundRectCS_SetDebugDraw");
//static_assert(sizeof(GSRoundRectCS_SetDebugDraw) == 0x000001, "Wrong size on GSRoundRectCS_SetDebugDraw");

// Function b1-Managed.GSRoundRectCS.GetDebugDraw
// 0x0001 (0x0001 - 0x0000)
struct GSRoundRectCS_GetDebugDraw final
{
public:
	uint8                                         ReturnValue : 1;                                   // 0x0000(0x0001)(BitIndex: 0x00, PropSize: 0x0001 (Parm, OutParm, ReturnParm, NoDestructor, HasGetValueTypeHash))
};
//static_assert(alignof(GSRoundRectCS_GetDebugDraw) == 0x000001, "Wrong alignment on GSRoundRectCS_GetDebugDraw");
//static_assert(sizeof(GSRoundRectCS_GetDebugDraw) == 0x000001, "Wrong size on GSRoundRectCS_GetDebugDraw");

// Function b1-Managed.BED_LevelConfUtil.GetLevelStreamingBoundingBox
// 0x0038 (0x0038 - 0x0000)
struct BED_LevelConfUtil_GetLevelStreamingBoundingBox final
{
public:
	class ULevelStreaming*                        LevelStreaming;                                    // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                Center;                                            // 0x0008(0x0018)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                BoxExtent;                                         // 0x0020(0x0018)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
//static_assert(alignof(BED_LevelConfUtil_GetLevelStreamingBoundingBox) == 0x000008, "Wrong alignment on BED_LevelConfUtil_GetLevelStreamingBoundingBox");
//static_assert(sizeof(BED_LevelConfUtil_GetLevelStreamingBoundingBox) == 0x000038, "Wrong size on BED_LevelConfUtil_GetLevelStreamingBoundingBox");
//static_assert(offsetof(BED_LevelConfUtil_GetLevelStreamingBoundingBox, LevelStreaming) == 0x000000, "Member 'BED_LevelConfUtil_GetLevelStreamingBoundingBox::LevelStreaming' has a wrong offset!");
//static_assert(offsetof(BED_LevelConfUtil_GetLevelStreamingBoundingBox, Center) == 0x000008, "Member 'BED_LevelConfUtil_GetLevelStreamingBoundingBox::Center' has a wrong offset!");
//static_assert(offsetof(BED_LevelConfUtil_GetLevelStreamingBoundingBox, BoxExtent) == 0x000020, "Member 'BED_LevelConfUtil_GetLevelStreamingBoundingBox::BoxExtent' has a wrong offset!");

// Function b1-Managed.BED_BehaviorNode_AiConversation.GetNodeDescriptionInCS
// 0x0010 (0x0010 - 0x0000)
struct BED_BehaviorNode_AiConversation_GetNodeDescriptionInCS final
{
public:
	class FString                                 ReturnValue;                                       // 0x0000(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash)
};
//static_assert(alignof(BED_BehaviorNode_AiConversation_GetNodeDescriptionInCS) == 0x000008, "Wrong alignment on BED_BehaviorNode_AiConversation_GetNodeDescriptionInCS");
//static_assert(sizeof(BED_BehaviorNode_AiConversation_GetNodeDescriptionInCS) == 0x000010, "Wrong size on BED_BehaviorNode_AiConversation_GetNodeDescriptionInCS");
//static_assert(offsetof(BED_BehaviorNode_AiConversation_GetNodeDescriptionInCS, ReturnValue) == 0x000000, "Member 'BED_BehaviorNode_AiConversation_GetNodeDescriptionInCS::ReturnValue' has a wrong offset!");

// Function b1-Managed.BED_BehaviorNode_AiConversation.IsSupportViewType
// 0x0002 (0x0002 - 0x0000)
struct BED_BehaviorNode_AiConversation_IsSupportViewType final
{
public:
	ECalliopeViewType                             InViewType;                                        // 0x0000(0x0001)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         ReturnValue : 1;                                   // 0x0001(0x0001)(BitIndex: 0x00, PropSize: 0x0001 (Parm, OutParm, ReturnParm, NoDestructor, HasGetValueTypeHash))
};
//static_assert(alignof(BED_BehaviorNode_AiConversation_IsSupportViewType) == 0x000001, "Wrong alignment on BED_BehaviorNode_AiConversation_IsSupportViewType");
//static_assert(sizeof(BED_BehaviorNode_AiConversation_IsSupportViewType) == 0x000002, "Wrong size on BED_BehaviorNode_AiConversation_IsSupportViewType");
//static_assert(offsetof(BED_BehaviorNode_AiConversation_IsSupportViewType, InViewType) == 0x000000, "Member 'BED_BehaviorNode_AiConversation_IsSupportViewType::InViewType' has a wrong offset!");

// Function b1-Managed.BGW_CharacterViewMgr.OnAKBStateEndFunc
// 0x0014 (0x0014 - 0x0000)
struct BGW_CharacterViewMgr_OnAKBStateEndFunc final
{
public:
	class FName                                   BeginStateName;                                    // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class FName                                   EndStateName;                                      // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         IsForceImSet : 1;                                  // 0x0010(0x0001)(BitIndex: 0x00, PropSize: 0x0001 (Parm, NoDestructor, HasGetValueTypeHash))
};
//static_assert(alignof(BGW_CharacterViewMgr_OnAKBStateEndFunc) == 0x000004, "Wrong alignment on BGW_CharacterViewMgr_OnAKBStateEndFunc");
//static_assert(sizeof(BGW_CharacterViewMgr_OnAKBStateEndFunc) == 0x000014, "Wrong size on BGW_CharacterViewMgr_OnAKBStateEndFunc");
//static_assert(offsetof(BGW_CharacterViewMgr_OnAKBStateEndFunc, BeginStateName) == 0x000000, "Member 'BGW_CharacterViewMgr_OnAKBStateEndFunc::BeginStateName' has a wrong offset!");
//static_assert(offsetof(BGW_CharacterViewMgr_OnAKBStateEndFunc, EndStateName) == 0x000008, "Member 'BGW_CharacterViewMgr_OnAKBStateEndFunc::EndStateName' has a wrong offset!");

// Function b1-Managed.BGW_LevelStreamingManger.OnUnloadLevelStreamingFinish
// 0x0008 (0x0008 - 0x0000)
struct BGW_LevelStreamingManger_OnUnloadLevelStreamingFinish final
{
public:
	int32                                         ActionID;                                          // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Linkage;                                           // 0x0004(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
//static_assert(alignof(BGW_LevelStreamingManger_OnUnloadLevelStreamingFinish) == 0x000004, "Wrong alignment on BGW_LevelStreamingManger_OnUnloadLevelStreamingFinish");
//static_assert(sizeof(BGW_LevelStreamingManger_OnUnloadLevelStreamingFinish) == 0x000008, "Wrong size on BGW_LevelStreamingManger_OnUnloadLevelStreamingFinish");
//static_assert(offsetof(BGW_LevelStreamingManger_OnUnloadLevelStreamingFinish, ActionID) == 0x000000, "Member 'BGW_LevelStreamingManger_OnUnloadLevelStreamingFinish::ActionID' has a wrong offset!");
//static_assert(offsetof(BGW_LevelStreamingManger_OnUnloadLevelStreamingFinish, Linkage) == 0x000004, "Member 'BGW_LevelStreamingManger_OnUnloadLevelStreamingFinish::Linkage' has a wrong offset!");

// Function b1-Managed.BGW_LevelStreamingManger.OnLoadLevelStreamingFinish
// 0x0008 (0x0008 - 0x0000)
struct BGW_LevelStreamingManger_OnLoadLevelStreamingFinish final
{
public:
	int32                                         ActionID;                                          // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Linkage;                                           // 0x0004(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
//static_assert(alignof(BGW_LevelStreamingManger_OnLoadLevelStreamingFinish) == 0x000004, "Wrong alignment on BGW_LevelStreamingManger_OnLoadLevelStreamingFinish");
//static_assert(sizeof(BGW_LevelStreamingManger_OnLoadLevelStreamingFinish) == 0x000008, "Wrong size on BGW_LevelStreamingManger_OnLoadLevelStreamingFinish");
//static_assert(offsetof(BGW_LevelStreamingManger_OnLoadLevelStreamingFinish, ActionID) == 0x000000, "Member 'BGW_LevelStreamingManger_OnLoadLevelStreamingFinish::ActionID' has a wrong offset!");
//static_assert(offsetof(BGW_LevelStreamingManger_OnLoadLevelStreamingFinish, Linkage) == 0x000004, "Member 'BGW_LevelStreamingManger_OnLoadLevelStreamingFinish::Linkage' has a wrong offset!");

// Function b1-Managed.GSEQC_CachedEnterBattlePoint.ProvideSingleLocationCS
// 0x0010 (0x0010 - 0x0000)
struct GSEQC_CachedEnterBattlePoint_ProvideSingleLocationCS final
{
public:
	class UObject*                                QuerierObject;                                     // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class AActor*                                 QuerierActor;                                      // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
//static_assert(alignof(GSEQC_CachedEnterBattlePoint_ProvideSingleLocationCS) == 0x000008, "Wrong alignment on GSEQC_CachedEnterBattlePoint_ProvideSingleLocationCS");
//static_assert(sizeof(GSEQC_CachedEnterBattlePoint_ProvideSingleLocationCS) == 0x000010, "Wrong size on GSEQC_CachedEnterBattlePoint_ProvideSingleLocationCS");
//static_assert(offsetof(GSEQC_CachedEnterBattlePoint_ProvideSingleLocationCS, QuerierObject) == 0x000000, "Member 'GSEQC_CachedEnterBattlePoint_ProvideSingleLocationCS::QuerierObject' has a wrong offset!");
//static_assert(offsetof(GSEQC_CachedEnterBattlePoint_ProvideSingleLocationCS, QuerierActor) == 0x000008, "Member 'GSEQC_CachedEnterBattlePoint_ProvideSingleLocationCS::QuerierActor' has a wrong offset!");

// Function b1-Managed.GSEQC_CachedGroupAIHotZonePoint.ProvideSingleLocationCS
// 0x0010 (0x0010 - 0x0000)
struct GSEQC_CachedGroupAIHotZonePoint_ProvideSingleLocationCS final
{
public:
	class UObject*                                QuerierObject;                                     // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class AActor*                                 QuerierActor;                                      // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
//static_assert(alignof(GSEQC_CachedGroupAIHotZonePoint_ProvideSingleLocationCS) == 0x000008, "Wrong alignment on GSEQC_CachedGroupAIHotZonePoint_ProvideSingleLocationCS");
//static_assert(sizeof(GSEQC_CachedGroupAIHotZonePoint_ProvideSingleLocationCS) == 0x000010, "Wrong size on GSEQC_CachedGroupAIHotZonePoint_ProvideSingleLocationCS");
//static_assert(offsetof(GSEQC_CachedGroupAIHotZonePoint_ProvideSingleLocationCS, QuerierObject) == 0x000000, "Member 'GSEQC_CachedGroupAIHotZonePoint_ProvideSingleLocationCS::QuerierObject' has a wrong offset!");
//static_assert(offsetof(GSEQC_CachedGroupAIHotZonePoint_ProvideSingleLocationCS, QuerierActor) == 0x000008, "Member 'GSEQC_CachedGroupAIHotZonePoint_ProvideSingleLocationCS::QuerierActor' has a wrong offset!");

// Function b1-Managed.GSEQC_CachedSceneItem.ProvideActorsSetCS
// 0x0010 (0x0010 - 0x0000)
struct GSEQC_CachedSceneItem_ProvideActorsSetCS final
{
public:
	class UObject*                                QuerierObject;                                     // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class AActor*                                 QuerierActor;                                      // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
//static_assert(alignof(GSEQC_CachedSceneItem_ProvideActorsSetCS) == 0x000008, "Wrong alignment on GSEQC_CachedSceneItem_ProvideActorsSetCS");
//static_assert(sizeof(GSEQC_CachedSceneItem_ProvideActorsSetCS) == 0x000010, "Wrong size on GSEQC_CachedSceneItem_ProvideActorsSetCS");
//static_assert(offsetof(GSEQC_CachedSceneItem_ProvideActorsSetCS, QuerierObject) == 0x000000, "Member 'GSEQC_CachedSceneItem_ProvideActorsSetCS::QuerierObject' has a wrong offset!");
//static_assert(offsetof(GSEQC_CachedSceneItem_ProvideActorsSetCS, QuerierActor) == 0x000008, "Member 'GSEQC_CachedSceneItem_ProvideActorsSetCS::QuerierActor' has a wrong offset!");

// Function b1-Managed.GSEQG_NeutralAnimalSpawnPoints.DoItemGenerationCS
// 0x0010 (0x0010 - 0x0000)
struct GSEQG_NeutralAnimalSpawnPoints_DoItemGenerationCS final
{
public:
	TArray<struct FVector>                        ContextLocations;                                  // 0x0000(0x0010)(ConstParm, Parm, OutParm, ReferenceParm)
};
//static_assert(alignof(GSEQG_NeutralAnimalSpawnPoints_DoItemGenerationCS) == 0x000008, "Wrong alignment on GSEQG_NeutralAnimalSpawnPoints_DoItemGenerationCS");
//static_assert(sizeof(GSEQG_NeutralAnimalSpawnPoints_DoItemGenerationCS) == 0x000010, "Wrong size on GSEQG_NeutralAnimalSpawnPoints_DoItemGenerationCS");
//static_assert(offsetof(GSEQG_NeutralAnimalSpawnPoints_DoItemGenerationCS, ContextLocations) == 0x000000, "Member 'GSEQG_NeutralAnimalSpawnPoints_DoItemGenerationCS::ContextLocations' has a wrong offset!");

// Function b1-Managed.GSEQC_QATargetLocationContext.ProvideLocationsSetCS
// 0x0010 (0x0010 - 0x0000)
struct GSEQC_QATargetLocationContext_ProvideLocationsSetCS final
{
public:
	class UObject*                                QuerierObject;                                     // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class AActor*                                 QuerierActor;                                      // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
//static_assert(alignof(GSEQC_QATargetLocationContext_ProvideLocationsSetCS) == 0x000008, "Wrong alignment on GSEQC_QATargetLocationContext_ProvideLocationsSetCS");
//static_assert(sizeof(GSEQC_QATargetLocationContext_ProvideLocationsSetCS) == 0x000010, "Wrong size on GSEQC_QATargetLocationContext_ProvideLocationsSetCS");
//static_assert(offsetof(GSEQC_QATargetLocationContext_ProvideLocationsSetCS, QuerierObject) == 0x000000, "Member 'GSEQC_QATargetLocationContext_ProvideLocationsSetCS::QuerierObject' has a wrong offset!");
//static_assert(offsetof(GSEQC_QATargetLocationContext_ProvideLocationsSetCS, QuerierActor) == 0x000008, "Member 'GSEQC_QATargetLocationContext_ProvideLocationsSetCS::QuerierActor' has a wrong offset!");

// Function b1-Managed.GSEQC_SkillBaseTargetContext.ProvideActorsSetCS
// 0x0010 (0x0010 - 0x0000)
struct GSEQC_SkillBaseTargetContext_ProvideActorsSetCS final
{
public:
	class UObject*                                QuerierObject;                                     // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class AActor*                                 QuerierActor;                                      // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
//static_assert(alignof(GSEQC_SkillBaseTargetContext_ProvideActorsSetCS) == 0x000008, "Wrong alignment on GSEQC_SkillBaseTargetContext_ProvideActorsSetCS");
//static_assert(sizeof(GSEQC_SkillBaseTargetContext_ProvideActorsSetCS) == 0x000010, "Wrong size on GSEQC_SkillBaseTargetContext_ProvideActorsSetCS");
//static_assert(offsetof(GSEQC_SkillBaseTargetContext_ProvideActorsSetCS, QuerierObject) == 0x000000, "Member 'GSEQC_SkillBaseTargetContext_ProvideActorsSetCS::QuerierObject' has a wrong offset!");
//static_assert(offsetof(GSEQC_SkillBaseTargetContext_ProvideActorsSetCS, QuerierActor) == 0x000008, "Member 'GSEQC_SkillBaseTargetContext_ProvideActorsSetCS::QuerierActor' has a wrong offset!");

// Function b1-Managed.GSEQG_ActorsByTag.DoItemGenerationCS
// 0x0010 (0x0010 - 0x0000)
struct GSEQG_ActorsByTag_DoItemGenerationCS final
{
public:
	TArray<struct FVector>                        ContextLocations;                                  // 0x0000(0x0010)(ConstParm, Parm, OutParm, ReferenceParm)
};
//static_assert(alignof(GSEQG_ActorsByTag_DoItemGenerationCS) == 0x000008, "Wrong alignment on GSEQG_ActorsByTag_DoItemGenerationCS");
//static_assert(sizeof(GSEQG_ActorsByTag_DoItemGenerationCS) == 0x000010, "Wrong size on GSEQG_ActorsByTag_DoItemGenerationCS");
//static_assert(offsetof(GSEQG_ActorsByTag_DoItemGenerationCS, ContextLocations) == 0x000000, "Member 'GSEQG_ActorsByTag_DoItemGenerationCS::ContextLocations' has a wrong offset!");

// Function b1-Managed.GSEQG_LandingPointGenerator.DoItemGenerationCS
// 0x0010 (0x0010 - 0x0000)
struct GSEQG_LandingPointGenerator_DoItemGenerationCS final
{
public:
	TArray<struct FVector>                        ContextLocations;                                  // 0x0000(0x0010)(ConstParm, Parm, OutParm, ReferenceParm)
};
//static_assert(alignof(GSEQG_LandingPointGenerator_DoItemGenerationCS) == 0x000008, "Wrong alignment on GSEQG_LandingPointGenerator_DoItemGenerationCS");
//static_assert(sizeof(GSEQG_LandingPointGenerator_DoItemGenerationCS) == 0x000010, "Wrong size on GSEQG_LandingPointGenerator_DoItemGenerationCS");
//static_assert(offsetof(GSEQG_LandingPointGenerator_DoItemGenerationCS, ContextLocations) == 0x000000, "Member 'GSEQG_LandingPointGenerator_DoItemGenerationCS::ContextLocations' has a wrong offset!");

// Function b1-Managed.GSEQG_SummonSpawnPointGenerator.DoItemGenerationCS
// 0x0010 (0x0010 - 0x0000)
struct GSEQG_SummonSpawnPointGenerator_DoItemGenerationCS final
{
public:
	TArray<struct FVector>                        ContextLocations;                                  // 0x0000(0x0010)(ConstParm, Parm, OutParm, ReferenceParm)
};
//static_assert(alignof(GSEQG_SummonSpawnPointGenerator_DoItemGenerationCS) == 0x000008, "Wrong alignment on GSEQG_SummonSpawnPointGenerator_DoItemGenerationCS");
//static_assert(sizeof(GSEQG_SummonSpawnPointGenerator_DoItemGenerationCS) == 0x000010, "Wrong size on GSEQG_SummonSpawnPointGenerator_DoItemGenerationCS");
//static_assert(offsetof(GSEQG_SummonSpawnPointGenerator_DoItemGenerationCS, ContextLocations) == 0x000000, "Member 'GSEQG_SummonSpawnPointGenerator_DoItemGenerationCS::ContextLocations' has a wrong offset!");

// Function b1-Managed.GSEQC_CaptainContext.ProvideSingleActorCS
// 0x0010 (0x0010 - 0x0000)
struct GSEQC_CaptainContext_ProvideSingleActorCS final
{
public:
	class UObject*                                QuerierObject;                                     // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class AActor*                                 QuerierActor;                                      // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
//static_assert(alignof(GSEQC_CaptainContext_ProvideSingleActorCS) == 0x000008, "Wrong alignment on GSEQC_CaptainContext_ProvideSingleActorCS");
//static_assert(sizeof(GSEQC_CaptainContext_ProvideSingleActorCS) == 0x000010, "Wrong size on GSEQC_CaptainContext_ProvideSingleActorCS");
//static_assert(offsetof(GSEQC_CaptainContext_ProvideSingleActorCS, QuerierObject) == 0x000000, "Member 'GSEQC_CaptainContext_ProvideSingleActorCS::QuerierObject' has a wrong offset!");
//static_assert(offsetof(GSEQC_CaptainContext_ProvideSingleActorCS, QuerierActor) == 0x000008, "Member 'GSEQC_CaptainContext_ProvideSingleActorCS::QuerierActor' has a wrong offset!");

// Function b1-Managed.GSEQC_PlayerContext.ProvideActorsSetCS
// 0x0010 (0x0010 - 0x0000)
struct GSEQC_PlayerContext_ProvideActorsSetCS final
{
public:
	class UObject*                                QuerierObject;                                     // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class AActor*                                 QuerierActor;                                      // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
//static_assert(alignof(GSEQC_PlayerContext_ProvideActorsSetCS) == 0x000008, "Wrong alignment on GSEQC_PlayerContext_ProvideActorsSetCS");
//static_assert(sizeof(GSEQC_PlayerContext_ProvideActorsSetCS) == 0x000010, "Wrong size on GSEQC_PlayerContext_ProvideActorsSetCS");
//static_assert(offsetof(GSEQC_PlayerContext_ProvideActorsSetCS, QuerierObject) == 0x000000, "Member 'GSEQC_PlayerContext_ProvideActorsSetCS::QuerierObject' has a wrong offset!");
//static_assert(offsetof(GSEQC_PlayerContext_ProvideActorsSetCS, QuerierActor) == 0x000008, "Member 'GSEQC_PlayerContext_ProvideActorsSetCS::QuerierActor' has a wrong offset!");

// Function b1-Managed.GSEQC_QuerierNavProjectLocation.ProvideLocationsSetCS
// 0x0010 (0x0010 - 0x0000)
struct GSEQC_QuerierNavProjectLocation_ProvideLocationsSetCS final
{
public:
	class UObject*                                QuerierObject;                                     // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class AActor*                                 QuerierActor;                                      // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
//static_assert(alignof(GSEQC_QuerierNavProjectLocation_ProvideLocationsSetCS) == 0x000008, "Wrong alignment on GSEQC_QuerierNavProjectLocation_ProvideLocationsSetCS");
//static_assert(sizeof(GSEQC_QuerierNavProjectLocation_ProvideLocationsSetCS) == 0x000010, "Wrong size on GSEQC_QuerierNavProjectLocation_ProvideLocationsSetCS");
//static_assert(offsetof(GSEQC_QuerierNavProjectLocation_ProvideLocationsSetCS, QuerierObject) == 0x000000, "Member 'GSEQC_QuerierNavProjectLocation_ProvideLocationsSetCS::QuerierObject' has a wrong offset!");
//static_assert(offsetof(GSEQC_QuerierNavProjectLocation_ProvideLocationsSetCS, QuerierActor) == 0x000008, "Member 'GSEQC_QuerierNavProjectLocation_ProvideLocationsSetCS::QuerierActor' has a wrong offset!");

// Function b1-Managed.GSEQC_TargetContext.ProvideActorsSetCS
// 0x0010 (0x0010 - 0x0000)
struct GSEQC_TargetContext_ProvideActorsSetCS final
{
public:
	class UObject*                                QuerierObject;                                     // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class AActor*                                 QuerierActor;                                      // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
//static_assert(alignof(GSEQC_TargetContext_ProvideActorsSetCS) == 0x000008, "Wrong alignment on GSEQC_TargetContext_ProvideActorsSetCS");
//static_assert(sizeof(GSEQC_TargetContext_ProvideActorsSetCS) == 0x000010, "Wrong size on GSEQC_TargetContext_ProvideActorsSetCS");
//static_assert(offsetof(GSEQC_TargetContext_ProvideActorsSetCS, QuerierObject) == 0x000000, "Member 'GSEQC_TargetContext_ProvideActorsSetCS::QuerierObject' has a wrong offset!");
//static_assert(offsetof(GSEQC_TargetContext_ProvideActorsSetCS, QuerierActor) == 0x000008, "Member 'GSEQC_TargetContext_ProvideActorsSetCS::QuerierActor' has a wrong offset!");

// Function b1-Managed.TileViewDemoEntryWidget.OnItemSelectionChangedCallback
// 0x0001 (0x0001 - 0x0000)
struct TileViewDemoEntryWidget_OnItemSelectionChangedCallback final
{
public:
	uint8                                         IsSelected : 1;                                    // 0x0000(0x0001)(BitIndex: 0x00, PropSize: 0x0001 (Parm, NoDestructor, HasGetValueTypeHash))
};
//static_assert(alignof(TileViewDemoEntryWidget_OnItemSelectionChangedCallback) == 0x000001, "Wrong alignment on TileViewDemoEntryWidget_OnItemSelectionChangedCallback");
//static_assert(sizeof(TileViewDemoEntryWidget_OnItemSelectionChangedCallback) == 0x000001, "Wrong size on TileViewDemoEntryWidget_OnItemSelectionChangedCallback");

// Function b1-Managed.TileViewDemoEntryWidget.OnListItemObjectSetCallback
// 0x0008 (0x0008 - 0x0000)
struct TileViewDemoEntryWidget_OnListItemObjectSetCallback final
{
public:
	class UObject*                                ListItemObject;                                    // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
//static_assert(alignof(TileViewDemoEntryWidget_OnListItemObjectSetCallback) == 0x000008, "Wrong alignment on TileViewDemoEntryWidget_OnListItemObjectSetCallback");
//static_assert(sizeof(TileViewDemoEntryWidget_OnListItemObjectSetCallback) == 0x000008, "Wrong size on TileViewDemoEntryWidget_OnListItemObjectSetCallback");
//static_assert(offsetof(TileViewDemoEntryWidget_OnListItemObjectSetCallback, ListItemObject) == 0x000000, "Member 'TileViewDemoEntryWidget_OnListItemObjectSetCallback::ListItemObject' has a wrong offset!");

// Function b1-Managed.GSEQC_TeamContext.ProvideActorsSetCS
// 0x0010 (0x0010 - 0x0000)
struct GSEQC_TeamContext_ProvideActorsSetCS final
{
public:
	class UObject*                                QuerierObject;                                     // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class AActor*                                 QuerierActor;                                      // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
//static_assert(alignof(GSEQC_TeamContext_ProvideActorsSetCS) == 0x000008, "Wrong alignment on GSEQC_TeamContext_ProvideActorsSetCS");
//static_assert(sizeof(GSEQC_TeamContext_ProvideActorsSetCS) == 0x000010, "Wrong size on GSEQC_TeamContext_ProvideActorsSetCS");
//static_assert(offsetof(GSEQC_TeamContext_ProvideActorsSetCS, QuerierObject) == 0x000000, "Member 'GSEQC_TeamContext_ProvideActorsSetCS::QuerierObject' has a wrong offset!");
//static_assert(offsetof(GSEQC_TeamContext_ProvideActorsSetCS, QuerierActor) == 0x000008, "Member 'GSEQC_TeamContext_ProvideActorsSetCS::QuerierActor' has a wrong offset!");

// Function b1-Managed.GSEQG_CertainPointGenerator.DoItemGenerationCS
// 0x0010 (0x0010 - 0x0000)
struct GSEQG_CertainPointGenerator_DoItemGenerationCS final
{
public:
	TArray<struct FVector>                        ContextLocations;                                  // 0x0000(0x0010)(ConstParm, Parm, OutParm, ReferenceParm)
};
//static_assert(alignof(GSEQG_CertainPointGenerator_DoItemGenerationCS) == 0x000008, "Wrong alignment on GSEQG_CertainPointGenerator_DoItemGenerationCS");
//static_assert(sizeof(GSEQG_CertainPointGenerator_DoItemGenerationCS) == 0x000010, "Wrong size on GSEQG_CertainPointGenerator_DoItemGenerationCS");
//static_assert(offsetof(GSEQG_CertainPointGenerator_DoItemGenerationCS, ContextLocations) == 0x000000, "Member 'GSEQG_CertainPointGenerator_DoItemGenerationCS::ContextLocations' has a wrong offset!");

// Function b1-Managed.GSEQG_CircleAroundProjectile.DoItemGenerationCS
// 0x0010 (0x0010 - 0x0000)
struct GSEQG_CircleAroundProjectile_DoItemGenerationCS final
{
public:
	TArray<struct FVector>                        ContextLocations;                                  // 0x0000(0x0010)(ConstParm, Parm, OutParm, ReferenceParm)
};
//static_assert(alignof(GSEQG_CircleAroundProjectile_DoItemGenerationCS) == 0x000008, "Wrong alignment on GSEQG_CircleAroundProjectile_DoItemGenerationCS");
//static_assert(sizeof(GSEQG_CircleAroundProjectile_DoItemGenerationCS) == 0x000010, "Wrong size on GSEQG_CircleAroundProjectile_DoItemGenerationCS");
//static_assert(offsetof(GSEQG_CircleAroundProjectile_DoItemGenerationCS, ContextLocations) == 0x000000, "Member 'GSEQG_CircleAroundProjectile_DoItemGenerationCS::ContextLocations' has a wrong offset!");

// Function b1-Managed.GSEQG_SphericalLineTracePointGenerator.DoItemGenerationCS
// 0x0010 (0x0010 - 0x0000)
struct GSEQG_SphericalLineTracePointGenerator_DoItemGenerationCS final
{
public:
	TArray<struct FVector>                        ContextLocations;                                  // 0x0000(0x0010)(ConstParm, Parm, OutParm, ReferenceParm)
};
//static_assert(alignof(GSEQG_SphericalLineTracePointGenerator_DoItemGenerationCS) == 0x000008, "Wrong alignment on GSEQG_SphericalLineTracePointGenerator_DoItemGenerationCS");
//static_assert(sizeof(GSEQG_SphericalLineTracePointGenerator_DoItemGenerationCS) == 0x000010, "Wrong size on GSEQG_SphericalLineTracePointGenerator_DoItemGenerationCS");
//static_assert(offsetof(GSEQG_SphericalLineTracePointGenerator_DoItemGenerationCS, ContextLocations) == 0x000000, "Member 'GSEQG_SphericalLineTracePointGenerator_DoItemGenerationCS::ContextLocations' has a wrong offset!");

// Function b1-Managed.GSEQT_CheckAngle.ShouldPrepareContext
// 0x0001 (0x0001 - 0x0000)
struct GSEQT_CheckAngle_ShouldPrepareContext final
{
public:
	uint8                                         ReturnValue : 1;                                   // 0x0000(0x0001)(BitIndex: 0x00, PropSize: 0x0001 (Parm, OutParm, ReturnParm, NoDestructor, HasGetValueTypeHash))
};
//static_assert(alignof(GSEQT_CheckAngle_ShouldPrepareContext) == 0x000001, "Wrong alignment on GSEQT_CheckAngle_ShouldPrepareContext");
//static_assert(sizeof(GSEQT_CheckAngle_ShouldPrepareContext) == 0x000001, "Wrong size on GSEQT_CheckAngle_ShouldPrepareContext");

// Function b1-Managed.GSEQT_CheckAngle.ProcessItemCS
// 0x0038 (0x0038 - 0x0000)
struct GSEQT_CheckAngle_ProcessItemCS final
{
public:
	class UWorld*                                 World;                                             // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                ItemLocation;                                      // 0x0008(0x0018)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class AActor*                                 ItemActor;                                         // 0x0020(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class AActor*                                 Querier;                                           // 0x0028(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         ReturnValue : 1;                                   // 0x0030(0x0001)(BitIndex: 0x00, PropSize: 0x0001 (Parm, OutParm, ReturnParm, NoDestructor, HasGetValueTypeHash))
};
//static_assert(alignof(GSEQT_CheckAngle_ProcessItemCS) == 0x000008, "Wrong alignment on GSEQT_CheckAngle_ProcessItemCS");
//static_assert(sizeof(GSEQT_CheckAngle_ProcessItemCS) == 0x000038, "Wrong size on GSEQT_CheckAngle_ProcessItemCS");
//static_assert(offsetof(GSEQT_CheckAngle_ProcessItemCS, World) == 0x000000, "Member 'GSEQT_CheckAngle_ProcessItemCS::World' has a wrong offset!");
//static_assert(offsetof(GSEQT_CheckAngle_ProcessItemCS, ItemLocation) == 0x000008, "Member 'GSEQT_CheckAngle_ProcessItemCS::ItemLocation' has a wrong offset!");
//static_assert(offsetof(GSEQT_CheckAngle_ProcessItemCS, ItemActor) == 0x000020, "Member 'GSEQT_CheckAngle_ProcessItemCS::ItemActor' has a wrong offset!");
//static_assert(offsetof(GSEQT_CheckAngle_ProcessItemCS, Querier) == 0x000028, "Member 'GSEQT_CheckAngle_ProcessItemCS::Querier' has a wrong offset!");

// Function b1-Managed.GSEQT_OverlapByObjectType.GetDescriptionTitleCS
// 0x0010 (0x0010 - 0x0000)
struct GSEQT_OverlapByObjectType_GetDescriptionTitleCS final
{
public:
	class FString                                 ReturnValue;                                       // 0x0000(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash)
};
//static_assert(alignof(GSEQT_OverlapByObjectType_GetDescriptionTitleCS) == 0x000008, "Wrong alignment on GSEQT_OverlapByObjectType_GetDescriptionTitleCS");
//static_assert(sizeof(GSEQT_OverlapByObjectType_GetDescriptionTitleCS) == 0x000010, "Wrong size on GSEQT_OverlapByObjectType_GetDescriptionTitleCS");
//static_assert(offsetof(GSEQT_OverlapByObjectType_GetDescriptionTitleCS, ReturnValue) == 0x000000, "Member 'GSEQT_OverlapByObjectType_GetDescriptionTitleCS::ReturnValue' has a wrong offset!");

// Function b1-Managed.GSEQT_OverlapByObjectType.ShouldPrepareContext
// 0x0001 (0x0001 - 0x0000)
struct GSEQT_OverlapByObjectType_ShouldPrepareContext final
{
public:
	uint8                                         ReturnValue : 1;                                   // 0x0000(0x0001)(BitIndex: 0x00, PropSize: 0x0001 (Parm, OutParm, ReturnParm, NoDestructor, HasGetValueTypeHash))
};
//static_assert(alignof(GSEQT_OverlapByObjectType_ShouldPrepareContext) == 0x000001, "Wrong alignment on GSEQT_OverlapByObjectType_ShouldPrepareContext");
//static_assert(sizeof(GSEQT_OverlapByObjectType_ShouldPrepareContext) == 0x000001, "Wrong size on GSEQT_OverlapByObjectType_ShouldPrepareContext");

// Function b1-Managed.GSEQT_OverlapByObjectType.ProcessItemCS
// 0x0038 (0x0038 - 0x0000)
struct GSEQT_OverlapByObjectType_ProcessItemCS final
{
public:
	class UWorld*                                 World;                                             // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                ItemLocation;                                      // 0x0008(0x0018)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class AActor*                                 ItemActor;                                         // 0x0020(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class AActor*                                 Querier;                                           // 0x0028(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         ReturnValue : 1;                                   // 0x0030(0x0001)(BitIndex: 0x00, PropSize: 0x0001 (Parm, OutParm, ReturnParm, NoDestructor, HasGetValueTypeHash))
};
//static_assert(alignof(GSEQT_OverlapByObjectType_ProcessItemCS) == 0x000008, "Wrong alignment on GSEQT_OverlapByObjectType_ProcessItemCS");
//static_assert(sizeof(GSEQT_OverlapByObjectType_ProcessItemCS) == 0x000038, "Wrong size on GSEQT_OverlapByObjectType_ProcessItemCS");
//static_assert(offsetof(GSEQT_OverlapByObjectType_ProcessItemCS, World) == 0x000000, "Member 'GSEQT_OverlapByObjectType_ProcessItemCS::World' has a wrong offset!");
//static_assert(offsetof(GSEQT_OverlapByObjectType_ProcessItemCS, ItemLocation) == 0x000008, "Member 'GSEQT_OverlapByObjectType_ProcessItemCS::ItemLocation' has a wrong offset!");
//static_assert(offsetof(GSEQT_OverlapByObjectType_ProcessItemCS, ItemActor) == 0x000020, "Member 'GSEQT_OverlapByObjectType_ProcessItemCS::ItemActor' has a wrong offset!");
//static_assert(offsetof(GSEQT_OverlapByObjectType_ProcessItemCS, Querier) == 0x000028, "Member 'GSEQT_OverlapByObjectType_ProcessItemCS::Querier' has a wrong offset!");

// Function b1-Managed.GSEQT_STByResID.ShouldPrepareContext
// 0x0001 (0x0001 - 0x0000)
struct GSEQT_STByResID_ShouldPrepareContext final
{
public:
	uint8                                         ReturnValue : 1;                                   // 0x0000(0x0001)(BitIndex: 0x00, PropSize: 0x0001 (Parm, OutParm, ReturnParm, NoDestructor, HasGetValueTypeHash))
};
//static_assert(alignof(GSEQT_STByResID_ShouldPrepareContext) == 0x000001, "Wrong alignment on GSEQT_STByResID_ShouldPrepareContext");
//static_assert(sizeof(GSEQT_STByResID_ShouldPrepareContext) == 0x000001, "Wrong size on GSEQT_STByResID_ShouldPrepareContext");

// Function b1-Managed.GSEQT_STByResID.ProcessItemCS
// 0x0038 (0x0038 - 0x0000)
struct GSEQT_STByResID_ProcessItemCS final
{
public:
	class UWorld*                                 World;                                             // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                ItemLocation;                                      // 0x0008(0x0018)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class AActor*                                 ItemActor;                                         // 0x0020(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class AActor*                                 Querier;                                           // 0x0028(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         ReturnValue : 1;                                   // 0x0030(0x0001)(BitIndex: 0x00, PropSize: 0x0001 (Parm, OutParm, ReturnParm, NoDestructor, HasGetValueTypeHash))
};
//static_assert(alignof(GSEQT_STByResID_ProcessItemCS) == 0x000008, "Wrong alignment on GSEQT_STByResID_ProcessItemCS");
//static_assert(sizeof(GSEQT_STByResID_ProcessItemCS) == 0x000038, "Wrong size on GSEQT_STByResID_ProcessItemCS");
//static_assert(offsetof(GSEQT_STByResID_ProcessItemCS, World) == 0x000000, "Member 'GSEQT_STByResID_ProcessItemCS::World' has a wrong offset!");
//static_assert(offsetof(GSEQT_STByResID_ProcessItemCS, ItemLocation) == 0x000008, "Member 'GSEQT_STByResID_ProcessItemCS::ItemLocation' has a wrong offset!");
//static_assert(offsetof(GSEQT_STByResID_ProcessItemCS, ItemActor) == 0x000020, "Member 'GSEQT_STByResID_ProcessItemCS::ItemActor' has a wrong offset!");
//static_assert(offsetof(GSEQT_STByResID_ProcessItemCS, Querier) == 0x000028, "Member 'GSEQT_STByResID_ProcessItemCS::Querier' has a wrong offset!");

// Function b1-Managed.GSEQT_STPriority.ShouldPrepareContext
// 0x0001 (0x0001 - 0x0000)
struct GSEQT_STPriority_ShouldPrepareContext final
{
public:
	uint8                                         ReturnValue : 1;                                   // 0x0000(0x0001)(BitIndex: 0x00, PropSize: 0x0001 (Parm, OutParm, ReturnParm, NoDestructor, HasGetValueTypeHash))
};
//static_assert(alignof(GSEQT_STPriority_ShouldPrepareContext) == 0x000001, "Wrong alignment on GSEQT_STPriority_ShouldPrepareContext");
//static_assert(sizeof(GSEQT_STPriority_ShouldPrepareContext) == 0x000001, "Wrong size on GSEQT_STPriority_ShouldPrepareContext");

// Function b1-Managed.GSEQT_STPriority.ProcessItemCS
// 0x0038 (0x0038 - 0x0000)
struct GSEQT_STPriority_ProcessItemCS final
{
public:
	class UWorld*                                 World;                                             // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                ItemLocation;                                      // 0x0008(0x0018)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class AActor*                                 ItemActor;                                         // 0x0020(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class AActor*                                 Querier;                                           // 0x0028(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         ReturnValue : 1;                                   // 0x0030(0x0001)(BitIndex: 0x00, PropSize: 0x0001 (Parm, OutParm, ReturnParm, NoDestructor, HasGetValueTypeHash))
};
//static_assert(alignof(GSEQT_STPriority_ProcessItemCS) == 0x000008, "Wrong alignment on GSEQT_STPriority_ProcessItemCS");
//static_assert(sizeof(GSEQT_STPriority_ProcessItemCS) == 0x000038, "Wrong size on GSEQT_STPriority_ProcessItemCS");
//static_assert(offsetof(GSEQT_STPriority_ProcessItemCS, World) == 0x000000, "Member 'GSEQT_STPriority_ProcessItemCS::World' has a wrong offset!");
//static_assert(offsetof(GSEQT_STPriority_ProcessItemCS, ItemLocation) == 0x000008, "Member 'GSEQT_STPriority_ProcessItemCS::ItemLocation' has a wrong offset!");
//static_assert(offsetof(GSEQT_STPriority_ProcessItemCS, ItemActor) == 0x000020, "Member 'GSEQT_STPriority_ProcessItemCS::ItemActor' has a wrong offset!");
//static_assert(offsetof(GSEQT_STPriority_ProcessItemCS, Querier) == 0x000028, "Member 'GSEQT_STPriority_ProcessItemCS::Querier' has a wrong offset!");

// Function b1-Managed.BGUAudioSystem.OnDead
// 0x0008 (0x0008 - 0x0000)
struct BGUAudioSystem_OnDead final
{
public:
	class AActor*                                 Attacker;                                          // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
//static_assert(alignof(BGUAudioSystem_OnDead) == 0x000008, "Wrong alignment on BGUAudioSystem_OnDead");
//static_assert(sizeof(BGUAudioSystem_OnDead) == 0x000008, "Wrong size on BGUAudioSystem_OnDead");
//static_assert(offsetof(BGUAudioSystem_OnDead, Attacker) == 0x000000, "Member 'BGUAudioSystem_OnDead::Attacker' has a wrong offset!");

// Function b1-Managed.BGWTeleportNamedPoint.ReceiveEndPlay
// 0x0001 (0x0001 - 0x0000)
struct BGWTeleportNamedPoint_ReceiveEndPlay final
{
public:
	EEndPlayReason                                EndPlayReason;                                     // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
//static_assert(alignof(BGWTeleportNamedPoint_ReceiveEndPlay) == 0x000001, "Wrong alignment on BGWTeleportNamedPoint_ReceiveEndPlay");
//static_assert(sizeof(BGWTeleportNamedPoint_ReceiveEndPlay) == 0x000001, "Wrong size on BGWTeleportNamedPoint_ReceiveEndPlay");
//static_assert(offsetof(BGWTeleportNamedPoint_ReceiveEndPlay, EndPlayReason) == 0x000000, "Member 'BGWTeleportNamedPoint_ReceiveEndPlay::EndPlayReason' has a wrong offset!");

// Function b1-Managed.BUAnimationAnalyzer.GenerateNewAACSAsset
// 0x0010 (0x0010 - 0x0000)
struct BUAnimationAnalyzer_GenerateNewAACSAsset final
{
public:
	class UAnimationAnalyzer*                     OrgAA;                                             // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UBUAnimationAnalyzer*                   ReturnValue;                                       // 0x0008(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
//static_assert(alignof(BUAnimationAnalyzer_GenerateNewAACSAsset) == 0x000008, "Wrong alignment on BUAnimationAnalyzer_GenerateNewAACSAsset");
//static_assert(sizeof(BUAnimationAnalyzer_GenerateNewAACSAsset) == 0x000010, "Wrong size on BUAnimationAnalyzer_GenerateNewAACSAsset");
//static_assert(offsetof(BUAnimationAnalyzer_GenerateNewAACSAsset, OrgAA) == 0x000000, "Member 'BUAnimationAnalyzer_GenerateNewAACSAsset::OrgAA' has a wrong offset!");
//static_assert(offsetof(BUAnimationAnalyzer_GenerateNewAACSAsset, ReturnValue) == 0x000008, "Member 'BUAnimationAnalyzer_GenerateNewAACSAsset::ReturnValue' has a wrong offset!");

// Function b1-Managed.BUAnimationAnalyzer.RequireAnimationsLoadAtDesiredReferences
// 0x0018 (0x0018 - 0x0000)
struct BUAnimationAnalyzer_RequireAnimationsLoadAtDesiredReferences final
{
public:
	int32                                         Ref;                                               // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         bLoadAll : 1;                                      // 0x0004(0x0001)(BitIndex: 0x00, PropSize: 0x0001 (Parm, NoDestructor, HasGetValueTypeHash))
	uint8                                         Pad_5[0x3];                                        // 0x0005(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class UObject*                                Obj;                                               // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         ReturnValue;                                       // 0x0010(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
//static_assert(alignof(BUAnimationAnalyzer_RequireAnimationsLoadAtDesiredReferences) == 0x000008, "Wrong alignment on BUAnimationAnalyzer_RequireAnimationsLoadAtDesiredReferences");
//static_assert(sizeof(BUAnimationAnalyzer_RequireAnimationsLoadAtDesiredReferences) == 0x000018, "Wrong size on BUAnimationAnalyzer_RequireAnimationsLoadAtDesiredReferences");
//static_assert(offsetof(BUAnimationAnalyzer_RequireAnimationsLoadAtDesiredReferences, Ref) == 0x000000, "Member 'BUAnimationAnalyzer_RequireAnimationsLoadAtDesiredReferences::Ref' has a wrong offset!");
//static_assert(offsetof(BUAnimationAnalyzer_RequireAnimationsLoadAtDesiredReferences, Obj) == 0x000008, "Member 'BUAnimationAnalyzer_RequireAnimationsLoadAtDesiredReferences::Obj' has a wrong offset!");
//static_assert(offsetof(BUAnimationAnalyzer_RequireAnimationsLoadAtDesiredReferences, ReturnValue) == 0x000010, "Member 'BUAnimationAnalyzer_RequireAnimationsLoadAtDesiredReferences::ReturnValue' has a wrong offset!");

// Function b1-Managed.BUAnimationAnalyzer.CheckIsFirstLoadRequireDesireAsset
// 0x0008 (0x0008 - 0x0000)
struct BUAnimationAnalyzer_CheckIsFirstLoadRequireDesireAsset final
{
public:
	int32                                         Ref;                                               // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         ReturnValue : 1;                                   // 0x0004(0x0001)(BitIndex: 0x00, PropSize: 0x0001 (Parm, OutParm, ReturnParm, NoDestructor, HasGetValueTypeHash))
};
//static_assert(alignof(BUAnimationAnalyzer_CheckIsFirstLoadRequireDesireAsset) == 0x000004, "Wrong alignment on BUAnimationAnalyzer_CheckIsFirstLoadRequireDesireAsset");
//static_assert(sizeof(BUAnimationAnalyzer_CheckIsFirstLoadRequireDesireAsset) == 0x000008, "Wrong size on BUAnimationAnalyzer_CheckIsFirstLoadRequireDesireAsset");
//static_assert(offsetof(BUAnimationAnalyzer_CheckIsFirstLoadRequireDesireAsset, Ref) == 0x000000, "Member 'BUAnimationAnalyzer_CheckIsFirstLoadRequireDesireAsset::Ref' has a wrong offset!");

// Function b1-Managed.BUAnimationAnalyzer.MMAnimationSeqUsingNotify_Inner
// 0x0010 (0x0010 - 0x0000)
struct BUAnimationAnalyzer_MMAnimationSeqUsingNotify_Inner final
{
public:
	int32                                         Ref;                                               // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_4[0x4];                                        // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class AActor*                                 Owner;                                             // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
//static_assert(alignof(BUAnimationAnalyzer_MMAnimationSeqUsingNotify_Inner) == 0x000008, "Wrong alignment on BUAnimationAnalyzer_MMAnimationSeqUsingNotify_Inner");
//static_assert(sizeof(BUAnimationAnalyzer_MMAnimationSeqUsingNotify_Inner) == 0x000010, "Wrong size on BUAnimationAnalyzer_MMAnimationSeqUsingNotify_Inner");
//static_assert(offsetof(BUAnimationAnalyzer_MMAnimationSeqUsingNotify_Inner, Ref) == 0x000000, "Member 'BUAnimationAnalyzer_MMAnimationSeqUsingNotify_Inner::Ref' has a wrong offset!");
//static_assert(offsetof(BUAnimationAnalyzer_MMAnimationSeqUsingNotify_Inner, Owner) == 0x000008, "Member 'BUAnimationAnalyzer_MMAnimationSeqUsingNotify_Inner::Owner' has a wrong offset!");

// Function b1-Managed.BUAnimationAnalyzer.AddToABPSettingSameToAA
// 0x0020 (0x0020 - 0x0000)
struct BUAnimationAnalyzer_AddToABPSettingSameToAA final
{
public:
	class UBGWDataAsset_AbpHumanoidSetting*       ABP_Setting;                                       // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class FString                                 OrgAAPackageName;                                  // 0x0008(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash)
	uint8                                         ReturnValue : 1;                                   // 0x0018(0x0001)(BitIndex: 0x00, PropSize: 0x0001 (Parm, OutParm, ReturnParm, NoDestructor, HasGetValueTypeHash))
};
//static_assert(alignof(BUAnimationAnalyzer_AddToABPSettingSameToAA) == 0x000008, "Wrong alignment on BUAnimationAnalyzer_AddToABPSettingSameToAA");
//static_assert(sizeof(BUAnimationAnalyzer_AddToABPSettingSameToAA) == 0x000020, "Wrong size on BUAnimationAnalyzer_AddToABPSettingSameToAA");
//static_assert(offsetof(BUAnimationAnalyzer_AddToABPSettingSameToAA, ABP_Setting) == 0x000000, "Member 'BUAnimationAnalyzer_AddToABPSettingSameToAA::ABP_Setting' has a wrong offset!");
//static_assert(offsetof(BUAnimationAnalyzer_AddToABPSettingSameToAA, OrgAAPackageName) == 0x000008, "Member 'BUAnimationAnalyzer_AddToABPSettingSameToAA::OrgAAPackageName' has a wrong offset!");

// Function b1-Managed.BUAnimationAnalyzer.FindABPSettingSameToAA
// 0x0020 (0x0020 - 0x0000)
struct BUAnimationAnalyzer_FindABPSettingSameToAA final
{
public:
	class UBGWDataAsset_AbpHumanoidSetting*       ABP_Setting;                                       // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class FString                                 OrgAAPackageName;                                  // 0x0008(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash)
	uint8                                         ReturnValue : 1;                                   // 0x0018(0x0001)(BitIndex: 0x00, PropSize: 0x0001 (Parm, OutParm, ReturnParm, NoDestructor, HasGetValueTypeHash))
};
//static_assert(alignof(BUAnimationAnalyzer_FindABPSettingSameToAA) == 0x000008, "Wrong alignment on BUAnimationAnalyzer_FindABPSettingSameToAA");
//static_assert(sizeof(BUAnimationAnalyzer_FindABPSettingSameToAA) == 0x000020, "Wrong size on BUAnimationAnalyzer_FindABPSettingSameToAA");
//static_assert(offsetof(BUAnimationAnalyzer_FindABPSettingSameToAA, ABP_Setting) == 0x000000, "Member 'BUAnimationAnalyzer_FindABPSettingSameToAA::ABP_Setting' has a wrong offset!");
//static_assert(offsetof(BUAnimationAnalyzer_FindABPSettingSameToAA, OrgAAPackageName) == 0x000008, "Member 'BUAnimationAnalyzer_FindABPSettingSameToAA::OrgAAPackageName' has a wrong offset!");

// Function b1-Managed.BGAnimDragon.BlueprintThreadSafeUpdateAnimation
// 0x0004 (0x0004 - 0x0000)
struct BGAnimDragon_BlueprintThreadSafeUpdateAnimation final
{
public:
	float                                         DeltaSeconds;                                      // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
//static_assert(alignof(BGAnimDragon_BlueprintThreadSafeUpdateAnimation) == 0x000004, "Wrong alignment on BGAnimDragon_BlueprintThreadSafeUpdateAnimation");
//static_assert(sizeof(BGAnimDragon_BlueprintThreadSafeUpdateAnimation) == 0x000004, "Wrong size on BGAnimDragon_BlueprintThreadSafeUpdateAnimation");
//static_assert(offsetof(BGAnimDragon_BlueprintThreadSafeUpdateAnimation, DeltaSeconds) == 0x000000, "Member 'BGAnimDragon_BlueprintThreadSafeUpdateAnimation::DeltaSeconds' has a wrong offset!");

// Function b1-Managed.BGAnimDragon.BlueprintUpdateAnimation
// 0x0004 (0x0004 - 0x0000)
struct BGAnimDragon_BlueprintUpdateAnimation final
{
public:
	float                                         DeltaTimeX;                                        // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
//static_assert(alignof(BGAnimDragon_BlueprintUpdateAnimation) == 0x000004, "Wrong alignment on BGAnimDragon_BlueprintUpdateAnimation");
//static_assert(sizeof(BGAnimDragon_BlueprintUpdateAnimation) == 0x000004, "Wrong size on BGAnimDragon_BlueprintUpdateAnimation");
//static_assert(offsetof(BGAnimDragon_BlueprintUpdateAnimation, DeltaTimeX) == 0x000000, "Member 'BGAnimDragon_BlueprintUpdateAnimation::DeltaTimeX' has a wrong offset!");

// Function b1-Managed.BUAnimHumanoidCS_CloudLocomotion.SetupIdleAnim
// 0x0020 (0x0020 - 0x0000)
struct BUAnimHumanoidCS_CloudLocomotion_SetupIdleAnim final
{
public:
	struct FAnimUpdateContext                     Context;                                           // 0x0000(0x0010)(Parm, OutParm, ReferenceParm)
	struct FAnimNodeReference                     Node;                                              // 0x0010(0x0010)(Parm, OutParm, ReferenceParm, NoDestructor)
};
//static_assert(alignof(BUAnimHumanoidCS_CloudLocomotion_SetupIdleAnim) == 0x000008, "Wrong alignment on BUAnimHumanoidCS_CloudLocomotion_SetupIdleAnim");
//static_assert(sizeof(BUAnimHumanoidCS_CloudLocomotion_SetupIdleAnim) == 0x000020, "Wrong size on BUAnimHumanoidCS_CloudLocomotion_SetupIdleAnim");
//static_assert(offsetof(BUAnimHumanoidCS_CloudLocomotion_SetupIdleAnim, Context) == 0x000000, "Member 'BUAnimHumanoidCS_CloudLocomotion_SetupIdleAnim::Context' has a wrong offset!");
//static_assert(offsetof(BUAnimHumanoidCS_CloudLocomotion_SetupIdleAnim, Node) == 0x000010, "Member 'BUAnimHumanoidCS_CloudLocomotion_SetupIdleAnim::Node' has a wrong offset!");

// Function b1-Managed.BUAnimHumanoidCS_QuadrupedLocomotion.SetupLandStopAnim
// 0x0020 (0x0020 - 0x0000)
struct BUAnimHumanoidCS_QuadrupedLocomotion_SetupLandStopAnim final
{
public:
	struct FAnimUpdateContext                     Context;                                           // 0x0000(0x0010)(Parm, OutParm, ReferenceParm)
	struct FAnimNodeReference                     Node;                                              // 0x0010(0x0010)(Parm, OutParm, ReferenceParm, NoDestructor)
};
//static_assert(alignof(BUAnimHumanoidCS_QuadrupedLocomotion_SetupLandStopAnim) == 0x000008, "Wrong alignment on BUAnimHumanoidCS_QuadrupedLocomotion_SetupLandStopAnim");
//static_assert(sizeof(BUAnimHumanoidCS_QuadrupedLocomotion_SetupLandStopAnim) == 0x000020, "Wrong size on BUAnimHumanoidCS_QuadrupedLocomotion_SetupLandStopAnim");
//static_assert(offsetof(BUAnimHumanoidCS_QuadrupedLocomotion_SetupLandStopAnim, Context) == 0x000000, "Member 'BUAnimHumanoidCS_QuadrupedLocomotion_SetupLandStopAnim::Context' has a wrong offset!");
//static_assert(offsetof(BUAnimHumanoidCS_QuadrupedLocomotion_SetupLandStopAnim, Node) == 0x000010, "Member 'BUAnimHumanoidCS_QuadrupedLocomotion_SetupLandStopAnim::Node' has a wrong offset!");

// Function b1-Managed.BUAnimHumanoidCS_QuadrupedLocomotion.SetupLandMoveAnim
// 0x0020 (0x0020 - 0x0000)
struct BUAnimHumanoidCS_QuadrupedLocomotion_SetupLandMoveAnim final
{
public:
	struct FAnimUpdateContext                     Context;                                           // 0x0000(0x0010)(Parm, OutParm, ReferenceParm)
	struct FAnimNodeReference                     Node;                                              // 0x0010(0x0010)(Parm, OutParm, ReferenceParm, NoDestructor)
};
//static_assert(alignof(BUAnimHumanoidCS_QuadrupedLocomotion_SetupLandMoveAnim) == 0x000008, "Wrong alignment on BUAnimHumanoidCS_QuadrupedLocomotion_SetupLandMoveAnim");
//static_assert(sizeof(BUAnimHumanoidCS_QuadrupedLocomotion_SetupLandMoveAnim) == 0x000020, "Wrong size on BUAnimHumanoidCS_QuadrupedLocomotion_SetupLandMoveAnim");
//static_assert(offsetof(BUAnimHumanoidCS_QuadrupedLocomotion_SetupLandMoveAnim, Context) == 0x000000, "Member 'BUAnimHumanoidCS_QuadrupedLocomotion_SetupLandMoveAnim::Context' has a wrong offset!");
//static_assert(offsetof(BUAnimHumanoidCS_QuadrupedLocomotion_SetupLandMoveAnim, Node) == 0x000010, "Member 'BUAnimHumanoidCS_QuadrupedLocomotion_SetupLandMoveAnim::Node' has a wrong offset!");

// Function b1-Managed.BUAnimHumanoidCS_QuadrupedLocomotion.GetRandomIdleAnim
// 0x0020 (0x0020 - 0x0000)
struct BUAnimHumanoidCS_QuadrupedLocomotion_GetRandomIdleAnim final
{
public:
	struct FAnimUpdateContext                     Context;                                           // 0x0000(0x0010)(Parm, OutParm, ReferenceParm)
	struct FAnimNodeReference                     Node;                                              // 0x0010(0x0010)(Parm, OutParm, ReferenceParm, NoDestructor)
};
//static_assert(alignof(BUAnimHumanoidCS_QuadrupedLocomotion_GetRandomIdleAnim) == 0x000008, "Wrong alignment on BUAnimHumanoidCS_QuadrupedLocomotion_GetRandomIdleAnim");
//static_assert(sizeof(BUAnimHumanoidCS_QuadrupedLocomotion_GetRandomIdleAnim) == 0x000020, "Wrong size on BUAnimHumanoidCS_QuadrupedLocomotion_GetRandomIdleAnim");
//static_assert(offsetof(BUAnimHumanoidCS_QuadrupedLocomotion_GetRandomIdleAnim, Context) == 0x000000, "Member 'BUAnimHumanoidCS_QuadrupedLocomotion_GetRandomIdleAnim::Context' has a wrong offset!");
//static_assert(offsetof(BUAnimHumanoidCS_QuadrupedLocomotion_GetRandomIdleAnim, Node) == 0x000010, "Member 'BUAnimHumanoidCS_QuadrupedLocomotion_GetRandomIdleAnim::Node' has a wrong offset!");

// Function b1-Managed.BUAnimHumanoidCS_QuadrupedLocomotion.SetupFallAnim
// 0x0020 (0x0020 - 0x0000)
struct BUAnimHumanoidCS_QuadrupedLocomotion_SetupFallAnim final
{
public:
	struct FAnimUpdateContext                     Context;                                           // 0x0000(0x0010)(Parm, OutParm, ReferenceParm)
	struct FAnimNodeReference                     Node;                                              // 0x0010(0x0010)(Parm, OutParm, ReferenceParm, NoDestructor)
};
//static_assert(alignof(BUAnimHumanoidCS_QuadrupedLocomotion_SetupFallAnim) == 0x000008, "Wrong alignment on BUAnimHumanoidCS_QuadrupedLocomotion_SetupFallAnim");
//static_assert(sizeof(BUAnimHumanoidCS_QuadrupedLocomotion_SetupFallAnim) == 0x000020, "Wrong size on BUAnimHumanoidCS_QuadrupedLocomotion_SetupFallAnim");
//static_assert(offsetof(BUAnimHumanoidCS_QuadrupedLocomotion_SetupFallAnim, Context) == 0x000000, "Member 'BUAnimHumanoidCS_QuadrupedLocomotion_SetupFallAnim::Context' has a wrong offset!");
//static_assert(offsetof(BUAnimHumanoidCS_QuadrupedLocomotion_SetupFallAnim, Node) == 0x000010, "Member 'BUAnimHumanoidCS_QuadrupedLocomotion_SetupFallAnim::Node' has a wrong offset!");

// Function b1-Managed.BUAnimHumanoidCS_AnimCurveBodySeparation.UpdateBodySeparationBlend
// 0x0020 (0x0020 - 0x0000)
struct BUAnimHumanoidCS_AnimCurveBodySeparation_UpdateBodySeparationBlend final
{
public:
	struct FAnimUpdateContext                     Context;                                           // 0x0000(0x0010)(Parm, OutParm, ReferenceParm)
	struct FAnimNodeReference                     Node;                                              // 0x0010(0x0010)(Parm, OutParm, ReferenceParm, NoDestructor)
};
//static_assert(alignof(BUAnimHumanoidCS_AnimCurveBodySeparation_UpdateBodySeparationBlend) == 0x000008, "Wrong alignment on BUAnimHumanoidCS_AnimCurveBodySeparation_UpdateBodySeparationBlend");
//static_assert(sizeof(BUAnimHumanoidCS_AnimCurveBodySeparation_UpdateBodySeparationBlend) == 0x000020, "Wrong size on BUAnimHumanoidCS_AnimCurveBodySeparation_UpdateBodySeparationBlend");
//static_assert(offsetof(BUAnimHumanoidCS_AnimCurveBodySeparation_UpdateBodySeparationBlend, Context) == 0x000000, "Member 'BUAnimHumanoidCS_AnimCurveBodySeparation_UpdateBodySeparationBlend::Context' has a wrong offset!");
//static_assert(offsetof(BUAnimHumanoidCS_AnimCurveBodySeparation_UpdateBodySeparationBlend, Node) == 0x000010, "Member 'BUAnimHumanoidCS_AnimCurveBodySeparation_UpdateBodySeparationBlend::Node' has a wrong offset!");

// Function b1-Managed.BUAnimHumanoidCS_AnimCurveBodySeparation.InitBodySeparationBlend
// 0x0020 (0x0020 - 0x0000)
struct BUAnimHumanoidCS_AnimCurveBodySeparation_InitBodySeparationBlend final
{
public:
	struct FAnimUpdateContext                     Context;                                           // 0x0000(0x0010)(Parm, OutParm, ReferenceParm)
	struct FAnimNodeReference                     Node;                                              // 0x0010(0x0010)(Parm, OutParm, ReferenceParm, NoDestructor)
};
//static_assert(alignof(BUAnimHumanoidCS_AnimCurveBodySeparation_InitBodySeparationBlend) == 0x000008, "Wrong alignment on BUAnimHumanoidCS_AnimCurveBodySeparation_InitBodySeparationBlend");
//static_assert(sizeof(BUAnimHumanoidCS_AnimCurveBodySeparation_InitBodySeparationBlend) == 0x000020, "Wrong size on BUAnimHumanoidCS_AnimCurveBodySeparation_InitBodySeparationBlend");
//static_assert(offsetof(BUAnimHumanoidCS_AnimCurveBodySeparation_InitBodySeparationBlend, Context) == 0x000000, "Member 'BUAnimHumanoidCS_AnimCurveBodySeparation_InitBodySeparationBlend::Context' has a wrong offset!");
//static_assert(offsetof(BUAnimHumanoidCS_AnimCurveBodySeparation_InitBodySeparationBlend, Node) == 0x000010, "Member 'BUAnimHumanoidCS_AnimCurveBodySeparation_InitBodySeparationBlend::Node' has a wrong offset!");

// Function b1-Managed.BUAnim_PostProcess.BlueprintUpdateAnimation
// 0x0004 (0x0004 - 0x0000)
struct BUAnim_PostProcess_BlueprintUpdateAnimation final
{
public:
	float                                         DeltaTimeX;                                        // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
//static_assert(alignof(BUAnim_PostProcess_BlueprintUpdateAnimation) == 0x000004, "Wrong alignment on BUAnim_PostProcess_BlueprintUpdateAnimation");
//static_assert(sizeof(BUAnim_PostProcess_BlueprintUpdateAnimation) == 0x000004, "Wrong size on BUAnim_PostProcess_BlueprintUpdateAnimation");
//static_assert(offsetof(BUAnim_PostProcess_BlueprintUpdateAnimation, DeltaTimeX) == 0x000000, "Member 'BUAnim_PostProcess_BlueprintUpdateAnimation::DeltaTimeX' has a wrong offset!");

// Function b1-Managed.TestCaseUI.CustomTick
// 0x0048 (0x0048 - 0x0000)
struct TestCaseUI_CustomTick final
{
public:
	struct FGeometry                              MyGeometry;                                        // 0x0000(0x0040)(Parm, IsPlainOldData, NoDestructor)
	float                                         InDeltaTime;                                       // 0x0040(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
//static_assert(alignof(TestCaseUI_CustomTick) == 0x000008, "Wrong alignment on TestCaseUI_CustomTick");
//static_assert(sizeof(TestCaseUI_CustomTick) == 0x000048, "Wrong size on TestCaseUI_CustomTick");
//static_assert(offsetof(TestCaseUI_CustomTick, MyGeometry) == 0x000000, "Member 'TestCaseUI_CustomTick::MyGeometry' has a wrong offset!");
//static_assert(offsetof(TestCaseUI_CustomTick, InDeltaTime) == 0x000040, "Member 'TestCaseUI_CustomTick::InDeltaTime' has a wrong offset!");

// Function b1-Managed.BUI_RoundRectDemo.UpdatePosRefWorldPos
// 0x0020 (0x0020 - 0x0000)
struct BUI_RoundRectDemo_UpdatePosRefWorldPos final
{
public:
	class UWidget*                                TargetWidget;                                      // 0x0000(0x0008)(ExportObject, Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                WorldPos;                                          // 0x0008(0x0018)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
//static_assert(alignof(BUI_RoundRectDemo_UpdatePosRefWorldPos) == 0x000008, "Wrong alignment on BUI_RoundRectDemo_UpdatePosRefWorldPos");
//static_assert(sizeof(BUI_RoundRectDemo_UpdatePosRefWorldPos) == 0x000020, "Wrong size on BUI_RoundRectDemo_UpdatePosRefWorldPos");
//static_assert(offsetof(BUI_RoundRectDemo_UpdatePosRefWorldPos, TargetWidget) == 0x000000, "Member 'BUI_RoundRectDemo_UpdatePosRefWorldPos::TargetWidget' has a wrong offset!");
//static_assert(offsetof(BUI_RoundRectDemo_UpdatePosRefWorldPos, WorldPos) == 0x000008, "Member 'BUI_RoundRectDemo_UpdatePosRefWorldPos::WorldPos' has a wrong offset!");

// Function b1-Managed.BUI_RoundRectDemo.UpdateShow
// 0x0004 (0x0004 - 0x0000)
struct BUI_RoundRectDemo_UpdateShow final
{
public:
	float                                         InDeltaTime;                                       // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
//static_assert(alignof(BUI_RoundRectDemo_UpdateShow) == 0x000004, "Wrong alignment on BUI_RoundRectDemo_UpdateShow");
//static_assert(sizeof(BUI_RoundRectDemo_UpdateShow) == 0x000004, "Wrong size on BUI_RoundRectDemo_UpdateShow");
//static_assert(offsetof(BUI_RoundRectDemo_UpdateShow, InDeltaTime) == 0x000000, "Member 'BUI_RoundRectDemo_UpdateShow::InDeltaTime' has a wrong offset!");

// Function b1-Managed.BUI_MouseButtonEvent.OnUserWidgetAnimationSequenceEvent
// 0x0004 (0x0004 - 0x0000)
struct BUI_MouseButtonEvent_OnUserWidgetAnimationSequenceEvent final
{
public:
	int32                                         Param;                                             // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
//static_assert(alignof(BUI_MouseButtonEvent_OnUserWidgetAnimationSequenceEvent) == 0x000004, "Wrong alignment on BUI_MouseButtonEvent_OnUserWidgetAnimationSequenceEvent");
//static_assert(sizeof(BUI_MouseButtonEvent_OnUserWidgetAnimationSequenceEvent) == 0x000004, "Wrong size on BUI_MouseButtonEvent_OnUserWidgetAnimationSequenceEvent");
//static_assert(offsetof(BUI_MouseButtonEvent_OnUserWidgetAnimationSequenceEvent, Param) == 0x000000, "Member 'BUI_MouseButtonEvent_OnUserWidgetAnimationSequenceEvent::Param' has a wrong offset!");

// Function b1-Managed.BUI_MouseButtonEvent.OnMouseButtonDown
// 0x0188 (0x0188 - 0x0000)
struct BUI_MouseButtonEvent_OnMouseButtonDown final
{
public:
	struct FGeometry                              MyGeometry;                                        // 0x0000(0x0040)(Parm, IsPlainOldData, NoDestructor)
	struct FPointerEvent                          MouseEvent;                                        // 0x0040(0x0090)(ConstParm, Parm, OutParm, ReferenceParm)
	struct FEventReply                            ReturnValue;                                       // 0x00D0(0x00B8)(Parm, OutParm, ReturnParm)
};
//static_assert(alignof(BUI_MouseButtonEvent_OnMouseButtonDown) == 0x000008, "Wrong alignment on BUI_MouseButtonEvent_OnMouseButtonDown");
//static_assert(sizeof(BUI_MouseButtonEvent_OnMouseButtonDown) == 0x000188, "Wrong size on BUI_MouseButtonEvent_OnMouseButtonDown");
//static_assert(offsetof(BUI_MouseButtonEvent_OnMouseButtonDown, MyGeometry) == 0x000000, "Member 'BUI_MouseButtonEvent_OnMouseButtonDown::MyGeometry' has a wrong offset!");
//static_assert(offsetof(BUI_MouseButtonEvent_OnMouseButtonDown, MouseEvent) == 0x000040, "Member 'BUI_MouseButtonEvent_OnMouseButtonDown::MouseEvent' has a wrong offset!");
//static_assert(offsetof(BUI_MouseButtonEvent_OnMouseButtonDown, ReturnValue) == 0x0000D0, "Member 'BUI_MouseButtonEvent_OnMouseButtonDown::ReturnValue' has a wrong offset!");

// Function b1-Managed.BUI_MouseButtonEvent.OnMouseButtonUp
// 0x0188 (0x0188 - 0x0000)
struct BUI_MouseButtonEvent_OnMouseButtonUp final
{
public:
	struct FGeometry                              MyGeometry;                                        // 0x0000(0x0040)(Parm, IsPlainOldData, NoDestructor)
	struct FPointerEvent                          MouseEvent;                                        // 0x0040(0x0090)(ConstParm, Parm, OutParm, ReferenceParm)
	struct FEventReply                            ReturnValue;                                       // 0x00D0(0x00B8)(Parm, OutParm, ReturnParm)
};
//static_assert(alignof(BUI_MouseButtonEvent_OnMouseButtonUp) == 0x000008, "Wrong alignment on BUI_MouseButtonEvent_OnMouseButtonUp");
//static_assert(sizeof(BUI_MouseButtonEvent_OnMouseButtonUp) == 0x000188, "Wrong size on BUI_MouseButtonEvent_OnMouseButtonUp");
//static_assert(offsetof(BUI_MouseButtonEvent_OnMouseButtonUp, MyGeometry) == 0x000000, "Member 'BUI_MouseButtonEvent_OnMouseButtonUp::MyGeometry' has a wrong offset!");
//static_assert(offsetof(BUI_MouseButtonEvent_OnMouseButtonUp, MouseEvent) == 0x000040, "Member 'BUI_MouseButtonEvent_OnMouseButtonUp::MouseEvent' has a wrong offset!");
//static_assert(offsetof(BUI_MouseButtonEvent_OnMouseButtonUp, ReturnValue) == 0x0000D0, "Member 'BUI_MouseButtonEvent_OnMouseButtonUp::ReturnValue' has a wrong offset!");

// Function b1-Managed.BUI_MouseButtonEvent.OnMouseLeave
// 0x0090 (0x0090 - 0x0000)
struct BUI_MouseButtonEvent_OnMouseLeave final
{
public:
	struct FPointerEvent                          MouseEvent;                                        // 0x0000(0x0090)(ConstParm, Parm, OutParm, ReferenceParm)
};
//static_assert(alignof(BUI_MouseButtonEvent_OnMouseLeave) == 0x000008, "Wrong alignment on BUI_MouseButtonEvent_OnMouseLeave");
//static_assert(sizeof(BUI_MouseButtonEvent_OnMouseLeave) == 0x000090, "Wrong size on BUI_MouseButtonEvent_OnMouseLeave");
//static_assert(offsetof(BUI_MouseButtonEvent_OnMouseLeave, MouseEvent) == 0x000000, "Member 'BUI_MouseButtonEvent_OnMouseLeave::MouseEvent' has a wrong offset!");

// Function b1-Managed.BUI_MouseButtonEvent.OnMouseEnter
// 0x00D0 (0x00D0 - 0x0000)
struct BUI_MouseButtonEvent_OnMouseEnter final
{
public:
	struct FGeometry                              MyGeometry;                                        // 0x0000(0x0040)(Parm, IsPlainOldData, NoDestructor)
	struct FPointerEvent                          MouseEvent;                                        // 0x0040(0x0090)(ConstParm, Parm, OutParm, ReferenceParm)
};
//static_assert(alignof(BUI_MouseButtonEvent_OnMouseEnter) == 0x000008, "Wrong alignment on BUI_MouseButtonEvent_OnMouseEnter");
//static_assert(sizeof(BUI_MouseButtonEvent_OnMouseEnter) == 0x0000D0, "Wrong size on BUI_MouseButtonEvent_OnMouseEnter");
//static_assert(offsetof(BUI_MouseButtonEvent_OnMouseEnter, MyGeometry) == 0x000000, "Member 'BUI_MouseButtonEvent_OnMouseEnter::MyGeometry' has a wrong offset!");
//static_assert(offsetof(BUI_MouseButtonEvent_OnMouseEnter, MouseEvent) == 0x000040, "Member 'BUI_MouseButtonEvent_OnMouseEnter::MouseEvent' has a wrong offset!");

// Function b1-Managed.BUI_MouseButtonEvent.OnMouseMove
// 0x0188 (0x0188 - 0x0000)
struct BUI_MouseButtonEvent_OnMouseMove final
{
public:
	struct FGeometry                              MyGeometry;                                        // 0x0000(0x0040)(Parm, IsPlainOldData, NoDestructor)
	struct FPointerEvent                          MouseEvent;                                        // 0x0040(0x0090)(ConstParm, Parm, OutParm, ReferenceParm)
	struct FEventReply                            ReturnValue;                                       // 0x00D0(0x00B8)(Parm, OutParm, ReturnParm)
};
//static_assert(alignof(BUI_MouseButtonEvent_OnMouseMove) == 0x000008, "Wrong alignment on BUI_MouseButtonEvent_OnMouseMove");
//static_assert(sizeof(BUI_MouseButtonEvent_OnMouseMove) == 0x000188, "Wrong size on BUI_MouseButtonEvent_OnMouseMove");
//static_assert(offsetof(BUI_MouseButtonEvent_OnMouseMove, MyGeometry) == 0x000000, "Member 'BUI_MouseButtonEvent_OnMouseMove::MyGeometry' has a wrong offset!");
//static_assert(offsetof(BUI_MouseButtonEvent_OnMouseMove, MouseEvent) == 0x000040, "Member 'BUI_MouseButtonEvent_OnMouseMove::MouseEvent' has a wrong offset!");
//static_assert(offsetof(BUI_MouseButtonEvent_OnMouseMove, ReturnValue) == 0x0000D0, "Member 'BUI_MouseButtonEvent_OnMouseMove::ReturnValue' has a wrong offset!");

// Function b1-Managed.BUI_MouseButtonEvent.Tick
// 0x0048 (0x0048 - 0x0000)
struct BUI_MouseButtonEvent_Tick final
{
public:
	struct FGeometry                              MyGeometry;                                        // 0x0000(0x0040)(Parm, IsPlainOldData, NoDestructor)
	float                                         InDeltaTime;                                       // 0x0040(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
//static_assert(alignof(BUI_MouseButtonEvent_Tick) == 0x000008, "Wrong alignment on BUI_MouseButtonEvent_Tick");
//static_assert(sizeof(BUI_MouseButtonEvent_Tick) == 0x000048, "Wrong size on BUI_MouseButtonEvent_Tick");
//static_assert(offsetof(BUI_MouseButtonEvent_Tick, MyGeometry) == 0x000000, "Member 'BUI_MouseButtonEvent_Tick::MyGeometry' has a wrong offset!");
//static_assert(offsetof(BUI_MouseButtonEvent_Tick, InDeltaTime) == 0x000040, "Member 'BUI_MouseButtonEvent_Tick::InDeltaTime' has a wrong offset!");

// Function b1-Managed.BUI_UnitDebugInfo.OnRegistOwner
// 0x0008 (0x0008 - 0x0000)
struct BUI_UnitDebugInfo_OnRegistOwner final
{
public:
	class ABGUCharacterCS*                        UnitActor;                                         // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
//static_assert(alignof(BUI_UnitDebugInfo_OnRegistOwner) == 0x000008, "Wrong alignment on BUI_UnitDebugInfo_OnRegistOwner");
//static_assert(sizeof(BUI_UnitDebugInfo_OnRegistOwner) == 0x000008, "Wrong size on BUI_UnitDebugInfo_OnRegistOwner");
//static_assert(offsetof(BUI_UnitDebugInfo_OnRegistOwner, UnitActor) == 0x000000, "Member 'BUI_UnitDebugInfo_OnRegistOwner::UnitActor' has a wrong offset!");

// Function b1-Managed.BUI_ZBBPanel.GenerateReport
// 0x0018 (0x0018 - 0x0000)
struct BUI_ZBBPanel_GenerateReport final
{
public:
	class FString                                 SelectedItem;                                      // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash)
	ESelectInfo                                   SelectionType;                                     // 0x0010(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
//static_assert(alignof(BUI_ZBBPanel_GenerateReport) == 0x000008, "Wrong alignment on BUI_ZBBPanel_GenerateReport");
//static_assert(sizeof(BUI_ZBBPanel_GenerateReport) == 0x000018, "Wrong size on BUI_ZBBPanel_GenerateReport");
//static_assert(offsetof(BUI_ZBBPanel_GenerateReport, SelectedItem) == 0x000000, "Member 'BUI_ZBBPanel_GenerateReport::SelectedItem' has a wrong offset!");
//static_assert(offsetof(BUI_ZBBPanel_GenerateReport, SelectionType) == 0x000010, "Member 'BUI_ZBBPanel_GenerateReport::SelectionType' has a wrong offset!");

// Function b1-Managed.BP_ActorTouchDraggingController.OnTick
// 0x0004 (0x0004 - 0x0000)
struct BP_ActorTouchDraggingController_OnTick final
{
public:
	float                                         DeltaTime;                                         // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
//static_assert(alignof(BP_ActorTouchDraggingController_OnTick) == 0x000004, "Wrong alignment on BP_ActorTouchDraggingController_OnTick");
//static_assert(sizeof(BP_ActorTouchDraggingController_OnTick) == 0x000004, "Wrong size on BP_ActorTouchDraggingController_OnTick");
//static_assert(offsetof(BP_ActorTouchDraggingController_OnTick, DeltaTime) == 0x000000, "Member 'BP_ActorTouchDraggingController_OnTick::DeltaTime' has a wrong offset!");

// Function b1-Managed.WBP_ActorDraggingController.OnMouseButtonDown
// 0x0188 (0x0188 - 0x0000)
struct WBP_ActorDraggingController_OnMouseButtonDown final
{
public:
	struct FGeometry                              MyGeometry;                                        // 0x0000(0x0040)(Parm, IsPlainOldData, NoDestructor)
	struct FPointerEvent                          MouseEvent;                                        // 0x0040(0x0090)(ConstParm, Parm, OutParm, ReferenceParm)
	struct FEventReply                            ReturnValue;                                       // 0x00D0(0x00B8)(Parm, OutParm, ReturnParm)
};
//static_assert(alignof(WBP_ActorDraggingController_OnMouseButtonDown) == 0x000008, "Wrong alignment on WBP_ActorDraggingController_OnMouseButtonDown");
//static_assert(sizeof(WBP_ActorDraggingController_OnMouseButtonDown) == 0x000188, "Wrong size on WBP_ActorDraggingController_OnMouseButtonDown");
//static_assert(offsetof(WBP_ActorDraggingController_OnMouseButtonDown, MyGeometry) == 0x000000, "Member 'WBP_ActorDraggingController_OnMouseButtonDown::MyGeometry' has a wrong offset!");
//static_assert(offsetof(WBP_ActorDraggingController_OnMouseButtonDown, MouseEvent) == 0x000040, "Member 'WBP_ActorDraggingController_OnMouseButtonDown::MouseEvent' has a wrong offset!");
//static_assert(offsetof(WBP_ActorDraggingController_OnMouseButtonDown, ReturnValue) == 0x0000D0, "Member 'WBP_ActorDraggingController_OnMouseButtonDown::ReturnValue' has a wrong offset!");

// Function b1-Managed.WBP_ActorDraggingController.OnDragCancelled
// 0x0098 (0x0098 - 0x0000)
struct WBP_ActorDraggingController_OnDragCancelled final
{
public:
	struct FPointerEvent                          PointerEvent;                                      // 0x0000(0x0090)(ConstParm, Parm, OutParm, ReferenceParm)
	class UDragDropOperation*                     Operation;                                         // 0x0090(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
//static_assert(alignof(WBP_ActorDraggingController_OnDragCancelled) == 0x000008, "Wrong alignment on WBP_ActorDraggingController_OnDragCancelled");
//static_assert(sizeof(WBP_ActorDraggingController_OnDragCancelled) == 0x000098, "Wrong size on WBP_ActorDraggingController_OnDragCancelled");
//static_assert(offsetof(WBP_ActorDraggingController_OnDragCancelled, PointerEvent) == 0x000000, "Member 'WBP_ActorDraggingController_OnDragCancelled::PointerEvent' has a wrong offset!");
//static_assert(offsetof(WBP_ActorDraggingController_OnDragCancelled, Operation) == 0x000090, "Member 'WBP_ActorDraggingController_OnDragCancelled::Operation' has a wrong offset!");

// Function b1-Managed.WBP_ActorDraggingController.OnDragDetected
// 0x00D8 (0x00D8 - 0x0000)
struct WBP_ActorDraggingController_OnDragDetected final
{
public:
	struct FGeometry                              MyGeometry;                                        // 0x0000(0x0040)(Parm, IsPlainOldData, NoDestructor)
	struct FPointerEvent                          PointerEvent;                                      // 0x0040(0x0090)(ConstParm, Parm, OutParm, ReferenceParm)
	class UDragDropOperation*                     Operation;                                         // 0x00D0(0x0008)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
//static_assert(alignof(WBP_ActorDraggingController_OnDragDetected) == 0x000008, "Wrong alignment on WBP_ActorDraggingController_OnDragDetected");
//static_assert(sizeof(WBP_ActorDraggingController_OnDragDetected) == 0x0000D8, "Wrong size on WBP_ActorDraggingController_OnDragDetected");
//static_assert(offsetof(WBP_ActorDraggingController_OnDragDetected, MyGeometry) == 0x000000, "Member 'WBP_ActorDraggingController_OnDragDetected::MyGeometry' has a wrong offset!");
//static_assert(offsetof(WBP_ActorDraggingController_OnDragDetected, PointerEvent) == 0x000040, "Member 'WBP_ActorDraggingController_OnDragDetected::PointerEvent' has a wrong offset!");
//static_assert(offsetof(WBP_ActorDraggingController_OnDragDetected, Operation) == 0x0000D0, "Member 'WBP_ActorDraggingController_OnDragDetected::Operation' has a wrong offset!");

// Function b1-Managed.WBP_ActorDraggingController.OnMouseButtonDownCallback
// 0x0188 (0x0188 - 0x0000)
struct WBP_ActorDraggingController_OnMouseButtonDownCallback final
{
public:
	struct FGeometry                              MyGeometry;                                        // 0x0000(0x0040)(Parm, IsPlainOldData, NoDestructor)
	struct FPointerEvent                          MouseEvent;                                        // 0x0040(0x0090)(Parm)
	struct FEventReply                            ReturnValue;                                       // 0x00D0(0x00B8)(Parm, OutParm, ReturnParm)
};
//static_assert(alignof(WBP_ActorDraggingController_OnMouseButtonDownCallback) == 0x000008, "Wrong alignment on WBP_ActorDraggingController_OnMouseButtonDownCallback");
//static_assert(sizeof(WBP_ActorDraggingController_OnMouseButtonDownCallback) == 0x000188, "Wrong size on WBP_ActorDraggingController_OnMouseButtonDownCallback");
//static_assert(offsetof(WBP_ActorDraggingController_OnMouseButtonDownCallback, MyGeometry) == 0x000000, "Member 'WBP_ActorDraggingController_OnMouseButtonDownCallback::MyGeometry' has a wrong offset!");
//static_assert(offsetof(WBP_ActorDraggingController_OnMouseButtonDownCallback, MouseEvent) == 0x000040, "Member 'WBP_ActorDraggingController_OnMouseButtonDownCallback::MouseEvent' has a wrong offset!");
//static_assert(offsetof(WBP_ActorDraggingController_OnMouseButtonDownCallback, ReturnValue) == 0x0000D0, "Member 'WBP_ActorDraggingController_OnMouseButtonDownCallback::ReturnValue' has a wrong offset!");

// Function b1-Managed.WBP_ActorDraggingController.OnDragOver
// 0x00E0 (0x00E0 - 0x0000)
struct WBP_ActorDraggingController_OnDragOver final
{
public:
	struct FGeometry                              MyGeometry;                                        // 0x0000(0x0040)(Parm, IsPlainOldData, NoDestructor)
	struct FPointerEvent                          PointerEvent;                                      // 0x0040(0x0090)(Parm)
	class UDragDropOperation*                     Operation;                                         // 0x00D0(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         ReturnValue : 1;                                   // 0x00D8(0x0001)(BitIndex: 0x00, PropSize: 0x0001 (Parm, OutParm, ReturnParm, NoDestructor, HasGetValueTypeHash))
};
//static_assert(alignof(WBP_ActorDraggingController_OnDragOver) == 0x000008, "Wrong alignment on WBP_ActorDraggingController_OnDragOver");
//static_assert(sizeof(WBP_ActorDraggingController_OnDragOver) == 0x0000E0, "Wrong size on WBP_ActorDraggingController_OnDragOver");
//static_assert(offsetof(WBP_ActorDraggingController_OnDragOver, MyGeometry) == 0x000000, "Member 'WBP_ActorDraggingController_OnDragOver::MyGeometry' has a wrong offset!");
//static_assert(offsetof(WBP_ActorDraggingController_OnDragOver, PointerEvent) == 0x000040, "Member 'WBP_ActorDraggingController_OnDragOver::PointerEvent' has a wrong offset!");
//static_assert(offsetof(WBP_ActorDraggingController_OnDragOver, Operation) == 0x0000D0, "Member 'WBP_ActorDraggingController_OnDragOver::Operation' has a wrong offset!");

// Function b1-Managed.WBP_ActorDraggingController.OnDragCancelledCallback
// 0x0098 (0x0098 - 0x0000)
struct WBP_ActorDraggingController_OnDragCancelledCallback final
{
public:
	struct FPointerEvent                          PointerEvent;                                      // 0x0000(0x0090)(Parm)
	class UDragDropOperation*                     Operation;                                         // 0x0090(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
//static_assert(alignof(WBP_ActorDraggingController_OnDragCancelledCallback) == 0x000008, "Wrong alignment on WBP_ActorDraggingController_OnDragCancelledCallback");
//static_assert(sizeof(WBP_ActorDraggingController_OnDragCancelledCallback) == 0x000098, "Wrong size on WBP_ActorDraggingController_OnDragCancelledCallback");
//static_assert(offsetof(WBP_ActorDraggingController_OnDragCancelledCallback, PointerEvent) == 0x000000, "Member 'WBP_ActorDraggingController_OnDragCancelledCallback::PointerEvent' has a wrong offset!");
//static_assert(offsetof(WBP_ActorDraggingController_OnDragCancelledCallback, Operation) == 0x000090, "Member 'WBP_ActorDraggingController_OnDragCancelledCallback::Operation' has a wrong offset!");

// Function b1-Managed.WBP_ActorDraggingController.OnDragDetectedCallback
// 0x00D0 (0x00D0 - 0x0000)
struct WBP_ActorDraggingController_OnDragDetectedCallback final
{
public:
	struct FGeometry                              MyGeometry;                                        // 0x0000(0x0040)(Parm, IsPlainOldData, NoDestructor)
	struct FPointerEvent                          PointerEvent;                                      // 0x0040(0x0090)(Parm)
};
//static_assert(alignof(WBP_ActorDraggingController_OnDragDetectedCallback) == 0x000008, "Wrong alignment on WBP_ActorDraggingController_OnDragDetectedCallback");
//static_assert(sizeof(WBP_ActorDraggingController_OnDragDetectedCallback) == 0x0000D0, "Wrong size on WBP_ActorDraggingController_OnDragDetectedCallback");
//static_assert(offsetof(WBP_ActorDraggingController_OnDragDetectedCallback, MyGeometry) == 0x000000, "Member 'WBP_ActorDraggingController_OnDragDetectedCallback::MyGeometry' has a wrong offset!");
//static_assert(offsetof(WBP_ActorDraggingController_OnDragDetectedCallback, PointerEvent) == 0x000040, "Member 'WBP_ActorDraggingController_OnDragDetectedCallback::PointerEvent' has a wrong offset!");

// Function b1-Managed.WBP_ActorDraggingController.OnDragOverCallback
// 0x00E0 (0x00E0 - 0x0000)
struct WBP_ActorDraggingController_OnDragOverCallback final
{
public:
	struct FGeometry                              MyGeometry;                                        // 0x0000(0x0040)(Parm, IsPlainOldData, NoDestructor)
	struct FPointerEvent                          PointerEvent;                                      // 0x0040(0x0090)(Parm)
	class UDragDropOperation*                     Operation;                                         // 0x00D0(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         ReturnValue : 1;                                   // 0x00D8(0x0001)(BitIndex: 0x00, PropSize: 0x0001 (Parm, OutParm, ReturnParm, NoDestructor, HasGetValueTypeHash))
};
//static_assert(alignof(WBP_ActorDraggingController_OnDragOverCallback) == 0x000008, "Wrong alignment on WBP_ActorDraggingController_OnDragOverCallback");
//static_assert(sizeof(WBP_ActorDraggingController_OnDragOverCallback) == 0x0000E0, "Wrong size on WBP_ActorDraggingController_OnDragOverCallback");
//static_assert(offsetof(WBP_ActorDraggingController_OnDragOverCallback, MyGeometry) == 0x000000, "Member 'WBP_ActorDraggingController_OnDragOverCallback::MyGeometry' has a wrong offset!");
//static_assert(offsetof(WBP_ActorDraggingController_OnDragOverCallback, PointerEvent) == 0x000040, "Member 'WBP_ActorDraggingController_OnDragOverCallback::PointerEvent' has a wrong offset!");
//static_assert(offsetof(WBP_ActorDraggingController_OnDragOverCallback, Operation) == 0x0000D0, "Member 'WBP_ActorDraggingController_OnDragOverCallback::Operation' has a wrong offset!");

// Function b1-Managed.UI_EditorUtilSample.ConstructCS
// 0x0008 (0x0008 - 0x0000)
struct UI_EditorUtilSample_ConstructCS final
{
public:
	class UObject*                                Widget;                                            // 0x0000(0x0008)(ExportObject, Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
//static_assert(alignof(UI_EditorUtilSample_ConstructCS) == 0x000008, "Wrong alignment on UI_EditorUtilSample_ConstructCS");
//static_assert(sizeof(UI_EditorUtilSample_ConstructCS) == 0x000008, "Wrong size on UI_EditorUtilSample_ConstructCS");
//static_assert(offsetof(UI_EditorUtilSample_ConstructCS, Widget) == 0x000000, "Member 'UI_EditorUtilSample_ConstructCS::Widget' has a wrong offset!");

// Function b1-Managed.UI_EditorUtilSample.TickCS
// 0x0048 (0x0048 - 0x0000)
struct UI_EditorUtilSample_TickCS final
{
public:
	struct FGeometry                              MyGeometry;                                        // 0x0000(0x0040)(Parm, IsPlainOldData, NoDestructor)
	float                                         InDeltaTime;                                       // 0x0040(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
//static_assert(alignof(UI_EditorUtilSample_TickCS) == 0x000008, "Wrong alignment on UI_EditorUtilSample_TickCS");
//static_assert(sizeof(UI_EditorUtilSample_TickCS) == 0x000048, "Wrong size on UI_EditorUtilSample_TickCS");
//static_assert(offsetof(UI_EditorUtilSample_TickCS, MyGeometry) == 0x000000, "Member 'UI_EditorUtilSample_TickCS::MyGeometry' has a wrong offset!");
//static_assert(offsetof(UI_EditorUtilSample_TickCS, InDeltaTime) == 0x000040, "Member 'UI_EditorUtilSample_TickCS::InDeltaTime' has a wrong offset!");

// Function b1-Managed.BUI_GMCameraPanel.CheckBox_CameraGroup01_OnCheckStateChanged
// 0x0001 (0x0001 - 0x0000)
struct BUI_GMCameraPanel_CheckBox_CameraGroup01_OnCheckStateChanged final
{
public:
	uint8                                         bChecked : 1;                                      // 0x0000(0x0001)(BitIndex: 0x00, PropSize: 0x0001 (Parm, NoDestructor, HasGetValueTypeHash))
};
//static_assert(alignof(BUI_GMCameraPanel_CheckBox_CameraGroup01_OnCheckStateChanged) == 0x000001, "Wrong alignment on BUI_GMCameraPanel_CheckBox_CameraGroup01_OnCheckStateChanged");
//static_assert(sizeof(BUI_GMCameraPanel_CheckBox_CameraGroup01_OnCheckStateChanged) == 0x000001, "Wrong size on BUI_GMCameraPanel_CheckBox_CameraGroup01_OnCheckStateChanged");

// Function b1-Managed.BUI_GMCameraPanel.CheckBox_UnlockDefault_OnCheckStateChanged
// 0x0001 (0x0001 - 0x0000)
struct BUI_GMCameraPanel_CheckBox_UnlockDefault_OnCheckStateChanged final
{
public:
	uint8                                         bChecked : 1;                                      // 0x0000(0x0001)(BitIndex: 0x00, PropSize: 0x0001 (Parm, NoDestructor, HasGetValueTypeHash))
};
//static_assert(alignof(BUI_GMCameraPanel_CheckBox_UnlockDefault_OnCheckStateChanged) == 0x000001, "Wrong alignment on BUI_GMCameraPanel_CheckBox_UnlockDefault_OnCheckStateChanged");
//static_assert(sizeof(BUI_GMCameraPanel_CheckBox_UnlockDefault_OnCheckStateChanged) == 0x000001, "Wrong size on BUI_GMCameraPanel_CheckBox_UnlockDefault_OnCheckStateChanged");

// Function b1-Managed.BUI_GMCameraPanel.CheckBox_CameraGroup03_OnCheckStateChanged
// 0x0001 (0x0001 - 0x0000)
struct BUI_GMCameraPanel_CheckBox_CameraGroup03_OnCheckStateChanged final
{
public:
	uint8                                         bChecked : 1;                                      // 0x0000(0x0001)(BitIndex: 0x00, PropSize: 0x0001 (Parm, NoDestructor, HasGetValueTypeHash))
};
//static_assert(alignof(BUI_GMCameraPanel_CheckBox_CameraGroup03_OnCheckStateChanged) == 0x000001, "Wrong alignment on BUI_GMCameraPanel_CheckBox_CameraGroup03_OnCheckStateChanged");
//static_assert(sizeof(BUI_GMCameraPanel_CheckBox_CameraGroup03_OnCheckStateChanged) == 0x000001, "Wrong size on BUI_GMCameraPanel_CheckBox_CameraGroup03_OnCheckStateChanged");

// Function b1-Managed.BUI_GMCameraPanel.CheckBox_CameraGroup02_OnCheckStateChanged
// 0x0001 (0x0001 - 0x0000)
struct BUI_GMCameraPanel_CheckBox_CameraGroup02_OnCheckStateChanged final
{
public:
	uint8                                         bChecked : 1;                                      // 0x0000(0x0001)(BitIndex: 0x00, PropSize: 0x0001 (Parm, NoDestructor, HasGetValueTypeHash))
};
//static_assert(alignof(BUI_GMCameraPanel_CheckBox_CameraGroup02_OnCheckStateChanged) == 0x000001, "Wrong alignment on BUI_GMCameraPanel_CheckBox_CameraGroup02_OnCheckStateChanged");
//static_assert(sizeof(BUI_GMCameraPanel_CheckBox_CameraGroup02_OnCheckStateChanged) == 0x000001, "Wrong size on BUI_GMCameraPanel_CheckBox_CameraGroup02_OnCheckStateChanged");

// Function b1-Managed.BUI_GMCameraPanel.CheckBox_LockDefault_OnCheckStateChanged
// 0x0001 (0x0001 - 0x0000)
struct BUI_GMCameraPanel_CheckBox_LockDefault_OnCheckStateChanged final
{
public:
	uint8                                         bChecked : 1;                                      // 0x0000(0x0001)(BitIndex: 0x00, PropSize: 0x0001 (Parm, NoDestructor, HasGetValueTypeHash))
};
//static_assert(alignof(BUI_GMCameraPanel_CheckBox_LockDefault_OnCheckStateChanged) == 0x000001, "Wrong alignment on BUI_GMCameraPanel_CheckBox_LockDefault_OnCheckStateChanged");
//static_assert(sizeof(BUI_GMCameraPanel_CheckBox_LockDefault_OnCheckStateChanged) == 0x000001, "Wrong size on BUI_GMCameraPanel_CheckBox_LockDefault_OnCheckStateChanged");

// Function b1-Managed.BUI_GMCameraPanel.CheckBox_UnlockClose_OnCheckStateChanged
// 0x0001 (0x0001 - 0x0000)
struct BUI_GMCameraPanel_CheckBox_UnlockClose_OnCheckStateChanged final
{
public:
	uint8                                         bChecked : 1;                                      // 0x0000(0x0001)(BitIndex: 0x00, PropSize: 0x0001 (Parm, NoDestructor, HasGetValueTypeHash))
};
//static_assert(alignof(BUI_GMCameraPanel_CheckBox_UnlockClose_OnCheckStateChanged) == 0x000001, "Wrong alignment on BUI_GMCameraPanel_CheckBox_UnlockClose_OnCheckStateChanged");
//static_assert(sizeof(BUI_GMCameraPanel_CheckBox_UnlockClose_OnCheckStateChanged) == 0x000001, "Wrong size on BUI_GMCameraPanel_CheckBox_UnlockClose_OnCheckStateChanged");

// Function b1-Managed.BUI_GMCameraPanel.CheckBox_UnlockFree_OnCheckStateChanged
// 0x0001 (0x0001 - 0x0000)
struct BUI_GMCameraPanel_CheckBox_UnlockFree_OnCheckStateChanged final
{
public:
	uint8                                         bChecked : 1;                                      // 0x0000(0x0001)(BitIndex: 0x00, PropSize: 0x0001 (Parm, NoDestructor, HasGetValueTypeHash))
};
//static_assert(alignof(BUI_GMCameraPanel_CheckBox_UnlockFree_OnCheckStateChanged) == 0x000001, "Wrong alignment on BUI_GMCameraPanel_CheckBox_UnlockFree_OnCheckStateChanged");
//static_assert(sizeof(BUI_GMCameraPanel_CheckBox_UnlockFree_OnCheckStateChanged) == 0x000001, "Wrong size on BUI_GMCameraPanel_CheckBox_UnlockFree_OnCheckStateChanged");

// Function b1-Managed.BUI_GMCameraPanel.CheckBox_LockClose_OnCheckStateChanged
// 0x0001 (0x0001 - 0x0000)
struct BUI_GMCameraPanel_CheckBox_LockClose_OnCheckStateChanged final
{
public:
	uint8                                         bChecked : 1;                                      // 0x0000(0x0001)(BitIndex: 0x00, PropSize: 0x0001 (Parm, NoDestructor, HasGetValueTypeHash))
};
//static_assert(alignof(BUI_GMCameraPanel_CheckBox_LockClose_OnCheckStateChanged) == 0x000001, "Wrong alignment on BUI_GMCameraPanel_CheckBox_LockClose_OnCheckStateChanged");
//static_assert(sizeof(BUI_GMCameraPanel_CheckBox_LockClose_OnCheckStateChanged) == 0x000001, "Wrong size on BUI_GMCameraPanel_CheckBox_LockClose_OnCheckStateChanged");

// Function b1-Managed.BUI_GMCameraPanel.CheckBox_UnlockFar_OnCheckStateChanged
// 0x0001 (0x0001 - 0x0000)
struct BUI_GMCameraPanel_CheckBox_UnlockFar_OnCheckStateChanged final
{
public:
	uint8                                         bChecked : 1;                                      // 0x0000(0x0001)(BitIndex: 0x00, PropSize: 0x0001 (Parm, NoDestructor, HasGetValueTypeHash))
};
//static_assert(alignof(BUI_GMCameraPanel_CheckBox_UnlockFar_OnCheckStateChanged) == 0x000001, "Wrong alignment on BUI_GMCameraPanel_CheckBox_UnlockFar_OnCheckStateChanged");
//static_assert(sizeof(BUI_GMCameraPanel_CheckBox_UnlockFar_OnCheckStateChanged) == 0x000001, "Wrong size on BUI_GMCameraPanel_CheckBox_UnlockFar_OnCheckStateChanged");

// Function b1-Managed.BUI_GMCameraPanel.CheckBox_UnlockMid_OnCheckStateChanged
// 0x0001 (0x0001 - 0x0000)
struct BUI_GMCameraPanel_CheckBox_UnlockMid_OnCheckStateChanged final
{
public:
	uint8                                         bChecked : 1;                                      // 0x0000(0x0001)(BitIndex: 0x00, PropSize: 0x0001 (Parm, NoDestructor, HasGetValueTypeHash))
};
//static_assert(alignof(BUI_GMCameraPanel_CheckBox_UnlockMid_OnCheckStateChanged) == 0x000001, "Wrong alignment on BUI_GMCameraPanel_CheckBox_UnlockMid_OnCheckStateChanged");
//static_assert(sizeof(BUI_GMCameraPanel_CheckBox_UnlockMid_OnCheckStateChanged) == 0x000001, "Wrong size on BUI_GMCameraPanel_CheckBox_UnlockMid_OnCheckStateChanged");

// Function b1-Managed.BUI_GMCameraPanel.CheckBox_LockMid_OnCheckStateChanged
// 0x0001 (0x0001 - 0x0000)
struct BUI_GMCameraPanel_CheckBox_LockMid_OnCheckStateChanged final
{
public:
	uint8                                         bChecked : 1;                                      // 0x0000(0x0001)(BitIndex: 0x00, PropSize: 0x0001 (Parm, NoDestructor, HasGetValueTypeHash))
};
//static_assert(alignof(BUI_GMCameraPanel_CheckBox_LockMid_OnCheckStateChanged) == 0x000001, "Wrong alignment on BUI_GMCameraPanel_CheckBox_LockMid_OnCheckStateChanged");
//static_assert(sizeof(BUI_GMCameraPanel_CheckBox_LockMid_OnCheckStateChanged) == 0x000001, "Wrong size on BUI_GMCameraPanel_CheckBox_LockMid_OnCheckStateChanged");

// Function b1-Managed.BUI_GMCameraPanel.CheckBox_LockFar_OnCheckStateChanged
// 0x0001 (0x0001 - 0x0000)
struct BUI_GMCameraPanel_CheckBox_LockFar_OnCheckStateChanged final
{
public:
	uint8                                         bChecked : 1;                                      // 0x0000(0x0001)(BitIndex: 0x00, PropSize: 0x0001 (Parm, NoDestructor, HasGetValueTypeHash))
};
//static_assert(alignof(BUI_GMCameraPanel_CheckBox_LockFar_OnCheckStateChanged) == 0x000001, "Wrong alignment on BUI_GMCameraPanel_CheckBox_LockFar_OnCheckStateChanged");
//static_assert(sizeof(BUI_GMCameraPanel_CheckBox_LockFar_OnCheckStateChanged) == 0x000001, "Wrong size on BUI_GMCameraPanel_CheckBox_LockFar_OnCheckStateChanged");

// Function b1-Managed.BUI_GMSkillPanel.OnToggleJYBS
// 0x0001 (0x0001 - 0x0000)
struct BUI_GMSkillPanel_OnToggleJYBS final
{
public:
	uint8                                         IsChecked : 1;                                     // 0x0000(0x0001)(BitIndex: 0x00, PropSize: 0x0001 (Parm, NoDestructor, HasGetValueTypeHash))
};
//static_assert(alignof(BUI_GMSkillPanel_OnToggleJYBS) == 0x000001, "Wrong alignment on BUI_GMSkillPanel_OnToggleJYBS");
//static_assert(sizeof(BUI_GMSkillPanel_OnToggleJYBS) == 0x000001, "Wrong size on BUI_GMSkillPanel_OnToggleJYBS");

// Function b1-Managed.BUI_GMSkillPanel.OnToggleFTXD
// 0x0001 (0x0001 - 0x0000)
struct BUI_GMSkillPanel_OnToggleFTXD final
{
public:
	uint8                                         IsChecked : 1;                                     // 0x0000(0x0001)(BitIndex: 0x00, PropSize: 0x0001 (Parm, NoDestructor, HasGetValueTypeHash))
};
//static_assert(alignof(BUI_GMSkillPanel_OnToggleFTXD) == 0x000001, "Wrong alignment on BUI_GMSkillPanel_OnToggleFTXD");
//static_assert(sizeof(BUI_GMSkillPanel_OnToggleFTXD) == 0x000001, "Wrong size on BUI_GMSkillPanel_OnToggleFTXD");

// Function b1-Managed.BUI_GMSkillPanel.OnToggleTTTB
// 0x0001 (0x0001 - 0x0000)
struct BUI_GMSkillPanel_OnToggleTTTB final
{
public:
	uint8                                         IsChecked : 1;                                     // 0x0000(0x0001)(BitIndex: 0x00, PropSize: 0x0001 (Parm, NoDestructor, HasGetValueTypeHash))
};
//static_assert(alignof(BUI_GMSkillPanel_OnToggleTTTB) == 0x000001, "Wrong alignment on BUI_GMSkillPanel_OnToggleTTTB");
//static_assert(sizeof(BUI_GMSkillPanel_OnToggleTTTB) == 0x000001, "Wrong size on BUI_GMSkillPanel_OnToggleTTTB");

// Function b1-Managed.BUI_GMSkillPanel.OnToggleCCG
// 0x0001 (0x0001 - 0x0000)
struct BUI_GMSkillPanel_OnToggleCCG final
{
public:
	uint8                                         IsChecked : 1;                                     // 0x0000(0x0001)(BitIndex: 0x00, PropSize: 0x0001 (Parm, NoDestructor, HasGetValueTypeHash))
};
//static_assert(alignof(BUI_GMSkillPanel_OnToggleCCG) == 0x000001, "Wrong alignment on BUI_GMSkillPanel_OnToggleCCG");
//static_assert(sizeof(BUI_GMSkillPanel_OnToggleCCG) == 0x000001, "Wrong size on BUI_GMSkillPanel_OnToggleCCG");

// Function b1-Managed.BUI_GMSkillPanel.OnToggleZZG
// 0x0001 (0x0001 - 0x0000)
struct BUI_GMSkillPanel_OnToggleZZG final
{
public:
	uint8                                         IsChecked : 1;                                     // 0x0000(0x0001)(BitIndex: 0x00, PropSize: 0x0001 (Parm, NoDestructor, HasGetValueTypeHash))
};
//static_assert(alignof(BUI_GMSkillPanel_OnToggleZZG) == 0x000001, "Wrong alignment on BUI_GMSkillPanel_OnToggleZZG");
//static_assert(sizeof(BUI_GMSkillPanel_OnToggleZZG) == 0x000001, "Wrong size on BUI_GMSkillPanel_OnToggleZZG");

// Function b1-Managed.BUI_GMSkillPanel.OnToggleJC
// 0x0001 (0x0001 - 0x0000)
struct BUI_GMSkillPanel_OnToggleJC final
{
public:
	uint8                                         IsChecked : 1;                                     // 0x0000(0x0001)(BitIndex: 0x00, PropSize: 0x0001 (Parm, NoDestructor, HasGetValueTypeHash))
};
//static_assert(alignof(BUI_GMSkillPanel_OnToggleJC) == 0x000001, "Wrong alignment on BUI_GMSkillPanel_OnToggleJC");
//static_assert(sizeof(BUI_GMSkillPanel_OnToggleJC) == 0x000001, "Wrong size on BUI_GMSkillPanel_OnToggleJC");

// Function b1-Managed.BUI_GMSkillPanel.OnToggleFS
// 0x0001 (0x0001 - 0x0000)
struct BUI_GMSkillPanel_OnToggleFS final
{
public:
	uint8                                         IsChecked : 1;                                     // 0x0000(0x0001)(BitIndex: 0x00, PropSize: 0x0001 (Parm, NoDestructor, HasGetValueTypeHash))
};
//static_assert(alignof(BUI_GMSkillPanel_OnToggleFS) == 0x000001, "Wrong alignment on BUI_GMSkillPanel_OnToggleFS");
//static_assert(sizeof(BUI_GMSkillPanel_OnToggleFS) == 0x000001, "Wrong size on BUI_GMSkillPanel_OnToggleFS");

// Function b1-Managed.BUI_GMSkillPanel.OnToggleDS
// 0x0001 (0x0001 - 0x0000)
struct BUI_GMSkillPanel_OnToggleDS final
{
public:
	uint8                                         IsChecked : 1;                                     // 0x0000(0x0001)(BitIndex: 0x00, PropSize: 0x0001 (Parm, NoDestructor, HasGetValueTypeHash))
};
//static_assert(alignof(BUI_GMSkillPanel_OnToggleDS) == 0x000001, "Wrong alignment on BUI_GMSkillPanel_OnToggleDS");
//static_assert(sizeof(BUI_GMSkillPanel_OnToggleDS) == 0x000001, "Wrong size on BUI_GMSkillPanel_OnToggleDS");

// Function b1-Managed.BUI_GMUI.OnChangeDoEnableEnemyBar
// 0x0001 (0x0001 - 0x0000)
struct BUI_GMUI_OnChangeDoEnableEnemyBar final
{
public:
	uint8                                         IsChecked : 1;                                     // 0x0000(0x0001)(BitIndex: 0x00, PropSize: 0x0001 (Parm, NoDestructor, HasGetValueTypeHash))
};
//static_assert(alignof(BUI_GMUI_OnChangeDoEnableEnemyBar) == 0x000001, "Wrong alignment on BUI_GMUI_OnChangeDoEnableEnemyBar");
//static_assert(sizeof(BUI_GMUI_OnChangeDoEnableEnemyBar) == 0x000001, "Wrong size on BUI_GMUI_OnChangeDoEnableEnemyBar");

// Function b1-Managed.BUI_GMUI.OnChangeDoLockEnemyHP
// 0x0001 (0x0001 - 0x0000)
struct BUI_GMUI_OnChangeDoLockEnemyHP final
{
public:
	uint8                                         IsChecked : 1;                                     // 0x0000(0x0001)(BitIndex: 0x00, PropSize: 0x0001 (Parm, NoDestructor, HasGetValueTypeHash))
};
//static_assert(alignof(BUI_GMUI_OnChangeDoLockEnemyHP) == 0x000001, "Wrong alignment on BUI_GMUI_OnChangeDoLockEnemyHP");
//static_assert(sizeof(BUI_GMUI_OnChangeDoLockEnemyHP) == 0x000001, "Wrong size on BUI_GMUI_OnChangeDoLockEnemyHP");

// Function b1-Managed.BUI_GMUI.OnChangeDoLockStamina
// 0x0001 (0x0001 - 0x0000)
struct BUI_GMUI_OnChangeDoLockStamina final
{
public:
	uint8                                         IsChecked : 1;                                     // 0x0000(0x0001)(BitIndex: 0x00, PropSize: 0x0001 (Parm, NoDestructor, HasGetValueTypeHash))
};
//static_assert(alignof(BUI_GMUI_OnChangeDoLockStamina) == 0x000001, "Wrong alignment on BUI_GMUI_OnChangeDoLockStamina");
//static_assert(sizeof(BUI_GMUI_OnChangeDoLockStamina) == 0x000001, "Wrong size on BUI_GMUI_OnChangeDoLockStamina");

// Function b1-Managed.BUI_GMUI.OnChangeDoInvincible
// 0x0001 (0x0001 - 0x0000)
struct BUI_GMUI_OnChangeDoInvincible final
{
public:
	uint8                                         IsChecked : 1;                                     // 0x0000(0x0001)(BitIndex: 0x00, PropSize: 0x0001 (Parm, NoDestructor, HasGetValueTypeHash))
};
//static_assert(alignof(BUI_GMUI_OnChangeDoInvincible) == 0x000001, "Wrong alignment on BUI_GMUI_OnChangeDoInvincible");
//static_assert(sizeof(BUI_GMUI_OnChangeDoInvincible) == 0x000001, "Wrong size on BUI_GMUI_OnChangeDoInvincible");

// Function b1-Managed.BUI_GMUI.OnCancelAllEnemyCD
// 0x0001 (0x0001 - 0x0000)
struct BUI_GMUI_OnCancelAllEnemyCD final
{
public:
	uint8                                         bCancel : 1;                                       // 0x0000(0x0001)(BitIndex: 0x00, PropSize: 0x0001 (Parm, NoDestructor, HasGetValueTypeHash))
};
//static_assert(alignof(BUI_GMUI_OnCancelAllEnemyCD) == 0x000001, "Wrong alignment on BUI_GMUI_OnCancelAllEnemyCD");
//static_assert(sizeof(BUI_GMUI_OnCancelAllEnemyCD) == 0x000001, "Wrong size on BUI_GMUI_OnCancelAllEnemyCD");

// Function b1-Managed.BUI_GMUI.OnToggleAllEnemyAI
// 0x0001 (0x0001 - 0x0000)
struct BUI_GMUI_OnToggleAllEnemyAI final
{
public:
	uint8                                         IsChecked : 1;                                     // 0x0000(0x0001)(BitIndex: 0x00, PropSize: 0x0001 (Parm, NoDestructor, HasGetValueTypeHash))
};
//static_assert(alignof(BUI_GMUI_OnToggleAllEnemyAI) == 0x000001, "Wrong alignment on BUI_GMUI_OnToggleAllEnemyAI");
//static_assert(sizeof(BUI_GMUI_OnToggleAllEnemyAI) == 0x000001, "Wrong size on BUI_GMUI_OnToggleAllEnemyAI");

// Function b1-Managed.BUI_GMUI.OnChangeDoToggleUI
// 0x0001 (0x0001 - 0x0000)
struct BUI_GMUI_OnChangeDoToggleUI final
{
public:
	uint8                                         IsChecked : 1;                                     // 0x0000(0x0001)(BitIndex: 0x00, PropSize: 0x0001 (Parm, NoDestructor, HasGetValueTypeHash))
};
//static_assert(alignof(BUI_GMUI_OnChangeDoToggleUI) == 0x000001, "Wrong alignment on BUI_GMUI_OnChangeDoToggleUI");
//static_assert(sizeof(BUI_GMUI_OnChangeDoToggleUI) == 0x000001, "Wrong size on BUI_GMUI_OnChangeDoToggleUI");

// Function b1-Managed.BUI_GMUI.OnChangeDoLockHP2
// 0x0001 (0x0001 - 0x0000)
struct BUI_GMUI_OnChangeDoLockHP2 final
{
public:
	uint8                                         IsChecked : 1;                                     // 0x0000(0x0001)(BitIndex: 0x00, PropSize: 0x0001 (Parm, NoDestructor, HasGetValueTypeHash))
};
//static_assert(alignof(BUI_GMUI_OnChangeDoLockHP2) == 0x000001, "Wrong alignment on BUI_GMUI_OnChangeDoLockHP2");
//static_assert(sizeof(BUI_GMUI_OnChangeDoLockHP2) == 0x000001, "Wrong size on BUI_GMUI_OnChangeDoLockHP2");

// Function b1-Managed.BUI_GMUI.OnSetInvisible
// 0x0001 (0x0001 - 0x0000)
struct BUI_GMUI_OnSetInvisible final
{
public:
	uint8                                         IsChecked : 1;                                     // 0x0000(0x0001)(BitIndex: 0x00, PropSize: 0x0001 (Parm, NoDestructor, HasGetValueTypeHash))
};
//static_assert(alignof(BUI_GMUI_OnSetInvisible) == 0x000001, "Wrong alignment on BUI_GMUI_OnSetInvisible");
//static_assert(sizeof(BUI_GMUI_OnSetInvisible) == 0x000001, "Wrong size on BUI_GMUI_OnSetInvisible");

// Function b1-Managed.BUI_GM_CalliopePanel.RefreshInstanceListWithFilter
// 0x0020 (0x0020 - 0x0000)
struct BUI_GM_CalliopePanel_RefreshInstanceListWithFilter final
{
public:
	class FString                                 InFilterStr;                                       // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash)
	TArray<class FName>                           Instances;                                         // 0x0010(0x0010)(Parm, OutParm)
};
//static_assert(alignof(BUI_GM_CalliopePanel_RefreshInstanceListWithFilter) == 0x000008, "Wrong alignment on BUI_GM_CalliopePanel_RefreshInstanceListWithFilter");
//static_assert(sizeof(BUI_GM_CalliopePanel_RefreshInstanceListWithFilter) == 0x000020, "Wrong size on BUI_GM_CalliopePanel_RefreshInstanceListWithFilter");
//static_assert(offsetof(BUI_GM_CalliopePanel_RefreshInstanceListWithFilter, InFilterStr) == 0x000000, "Member 'BUI_GM_CalliopePanel_RefreshInstanceListWithFilter::InFilterStr' has a wrong offset!");
//static_assert(offsetof(BUI_GM_CalliopePanel_RefreshInstanceListWithFilter, Instances) == 0x000010, "Member 'BUI_GM_CalliopePanel_RefreshInstanceListWithFilter::Instances' has a wrong offset!");

// Function b1-Managed.BUI_GM_CalliopePanel.GetInstanceDebugInfo
// 0x0018 (0x0018 - 0x0000)
struct BUI_GM_CalliopePanel_GetInstanceDebugInfo final
{
public:
	class FName                                   InInstanceName;                                    // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class FString                                 ReturnValue;                                       // 0x0008(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash)
};
//static_assert(alignof(BUI_GM_CalliopePanel_GetInstanceDebugInfo) == 0x000008, "Wrong alignment on BUI_GM_CalliopePanel_GetInstanceDebugInfo");
//static_assert(sizeof(BUI_GM_CalliopePanel_GetInstanceDebugInfo) == 0x000018, "Wrong size on BUI_GM_CalliopePanel_GetInstanceDebugInfo");
//static_assert(offsetof(BUI_GM_CalliopePanel_GetInstanceDebugInfo, InInstanceName) == 0x000000, "Member 'BUI_GM_CalliopePanel_GetInstanceDebugInfo::InInstanceName' has a wrong offset!");
//static_assert(offsetof(BUI_GM_CalliopePanel_GetInstanceDebugInfo, ReturnValue) == 0x000008, "Member 'BUI_GM_CalliopePanel_GetInstanceDebugInfo::ReturnValue' has a wrong offset!");

// Function b1-Managed.BUI_GM_HatredAndTargetPanel.RefreshInstanceListWithFilterRadius
// 0x0030 (0x0030 - 0x0000)
struct BUI_GM_HatredAndTargetPanel_RefreshInstanceListWithFilterRadius final
{
public:
	class FString                                 _FilterRadius;                                     // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash)
	TArray<class FName>                           Instances;                                         // 0x0010(0x0010)(Parm, OutParm)
	TArray<class AActor*>                         Units;                                             // 0x0020(0x0010)(Parm, OutParm)
};
//static_assert(alignof(BUI_GM_HatredAndTargetPanel_RefreshInstanceListWithFilterRadius) == 0x000008, "Wrong alignment on BUI_GM_HatredAndTargetPanel_RefreshInstanceListWithFilterRadius");
//static_assert(sizeof(BUI_GM_HatredAndTargetPanel_RefreshInstanceListWithFilterRadius) == 0x000030, "Wrong size on BUI_GM_HatredAndTargetPanel_RefreshInstanceListWithFilterRadius");
//static_assert(offsetof(BUI_GM_HatredAndTargetPanel_RefreshInstanceListWithFilterRadius, _FilterRadius) == 0x000000, "Member 'BUI_GM_HatredAndTargetPanel_RefreshInstanceListWithFilterRadius::_FilterRadius' has a wrong offset!");
//static_assert(offsetof(BUI_GM_HatredAndTargetPanel_RefreshInstanceListWithFilterRadius, Instances) == 0x000010, "Member 'BUI_GM_HatredAndTargetPanel_RefreshInstanceListWithFilterRadius::Instances' has a wrong offset!");
//static_assert(offsetof(BUI_GM_HatredAndTargetPanel_RefreshInstanceListWithFilterRadius, Units) == 0x000020, "Member 'BUI_GM_HatredAndTargetPanel_RefreshInstanceListWithFilterRadius::Units' has a wrong offset!");

// Function b1-Managed.BUI_GM_HatredAndTargetPanel.SetNeedShowDebugTargetInfos
// 0x0010 (0x0010 - 0x0000)
struct BUI_GM_HatredAndTargetPanel_SetNeedShowDebugTargetInfos final
{
public:
	class AActor*                                 Target;                                            // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Value;                                             // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
//static_assert(alignof(BUI_GM_HatredAndTargetPanel_SetNeedShowDebugTargetInfos) == 0x000008, "Wrong alignment on BUI_GM_HatredAndTargetPanel_SetNeedShowDebugTargetInfos");
//static_assert(sizeof(BUI_GM_HatredAndTargetPanel_SetNeedShowDebugTargetInfos) == 0x000010, "Wrong size on BUI_GM_HatredAndTargetPanel_SetNeedShowDebugTargetInfos");
//static_assert(offsetof(BUI_GM_HatredAndTargetPanel_SetNeedShowDebugTargetInfos, Target) == 0x000000, "Member 'BUI_GM_HatredAndTargetPanel_SetNeedShowDebugTargetInfos::Target' has a wrong offset!");
//static_assert(offsetof(BUI_GM_HatredAndTargetPanel_SetNeedShowDebugTargetInfos, Value) == 0x000008, "Member 'BUI_GM_HatredAndTargetPanel_SetNeedShowDebugTargetInfos::Value' has a wrong offset!");

// Function b1-Managed.BUI_GM_HatredAndTargetPanel.GetDebugTargetInfo
// 0x0010 (0x0010 - 0x0000)
struct BUI_GM_HatredAndTargetPanel_GetDebugTargetInfo final
{
public:
	class AActor*                                 Target;                                            // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         ReturnValue;                                       // 0x0008(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
//static_assert(alignof(BUI_GM_HatredAndTargetPanel_GetDebugTargetInfo) == 0x000008, "Wrong alignment on BUI_GM_HatredAndTargetPanel_GetDebugTargetInfo");
//static_assert(sizeof(BUI_GM_HatredAndTargetPanel_GetDebugTargetInfo) == 0x000010, "Wrong size on BUI_GM_HatredAndTargetPanel_GetDebugTargetInfo");
//static_assert(offsetof(BUI_GM_HatredAndTargetPanel_GetDebugTargetInfo, Target) == 0x000000, "Member 'BUI_GM_HatredAndTargetPanel_GetDebugTargetInfo::Target' has a wrong offset!");
//static_assert(offsetof(BUI_GM_HatredAndTargetPanel_GetDebugTargetInfo, ReturnValue) == 0x000008, "Member 'BUI_GM_HatredAndTargetPanel_GetDebugTargetInfo::ReturnValue' has a wrong offset!");

// Function b1-Managed.BUI_LoopWidget.SetActiveLoop
// 0x0001 (0x0001 - 0x0000)
struct BUI_LoopWidget_SetActiveLoop final
{
public:
	uint8                                         InActiveLoop : 1;                                  // 0x0000(0x0001)(BitIndex: 0x00, PropSize: 0x0001 (Parm, NoDestructor, HasGetValueTypeHash))
};
//static_assert(alignof(BUI_LoopWidget_SetActiveLoop) == 0x000001, "Wrong alignment on BUI_LoopWidget_SetActiveLoop");
//static_assert(sizeof(BUI_LoopWidget_SetActiveLoop) == 0x000001, "Wrong size on BUI_LoopWidget_SetActiveLoop");

// Function b1-Managed.BUI_LoopWidget.GetActiveLoop
// 0x0001 (0x0001 - 0x0000)
struct BUI_LoopWidget_GetActiveLoop final
{
public:
	uint8                                         ReturnValue : 1;                                   // 0x0000(0x0001)(BitIndex: 0x00, PropSize: 0x0001 (Parm, OutParm, ReturnParm, NoDestructor, HasGetValueTypeHash))
};
//static_assert(alignof(BUI_LoopWidget_GetActiveLoop) == 0x000001, "Wrong alignment on BUI_LoopWidget_GetActiveLoop");
//static_assert(sizeof(BUI_LoopWidget_GetActiveLoop) == 0x000001, "Wrong size on BUI_LoopWidget_GetActiveLoop");

// Function b1-Managed.BUI_LoopWidget.Reset
// 0x0001 (0x0001 - 0x0000)
struct BUI_LoopWidget_Reset final
{
public:
	uint8                                         ReturnValue : 1;                                   // 0x0000(0x0001)(BitIndex: 0x00, PropSize: 0x0001 (Parm, OutParm, ReturnParm, NoDestructor, HasGetValueTypeHash))
};
//static_assert(alignof(BUI_LoopWidget_Reset) == 0x000001, "Wrong alignment on BUI_LoopWidget_Reset");
//static_assert(sizeof(BUI_LoopWidget_Reset) == 0x000001, "Wrong size on BUI_LoopWidget_Reset");

// Function b1-Managed.BUI_RoundRectDemoOne.UpdatePosRefWorldPos
// 0x0020 (0x0020 - 0x0000)
struct BUI_RoundRectDemoOne_UpdatePosRefWorldPos final
{
public:
	class UWidget*                                TargetWidget;                                      // 0x0000(0x0008)(ExportObject, Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                WorldPos;                                          // 0x0008(0x0018)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
//static_assert(alignof(BUI_RoundRectDemoOne_UpdatePosRefWorldPos) == 0x000008, "Wrong alignment on BUI_RoundRectDemoOne_UpdatePosRefWorldPos");
//static_assert(sizeof(BUI_RoundRectDemoOne_UpdatePosRefWorldPos) == 0x000020, "Wrong size on BUI_RoundRectDemoOne_UpdatePosRefWorldPos");
//static_assert(offsetof(BUI_RoundRectDemoOne_UpdatePosRefWorldPos, TargetWidget) == 0x000000, "Member 'BUI_RoundRectDemoOne_UpdatePosRefWorldPos::TargetWidget' has a wrong offset!");
//static_assert(offsetof(BUI_RoundRectDemoOne_UpdatePosRefWorldPos, WorldPos) == 0x000008, "Member 'BUI_RoundRectDemoOne_UpdatePosRefWorldPos::WorldPos' has a wrong offset!");

// Function b1-Managed.BUI_RoundRectDemoOne.UpdateShow
// 0x0004 (0x0004 - 0x0000)
struct BUI_RoundRectDemoOne_UpdateShow final
{
public:
	float                                         InDeltaTime;                                       // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
//static_assert(alignof(BUI_RoundRectDemoOne_UpdateShow) == 0x000004, "Wrong alignment on BUI_RoundRectDemoOne_UpdateShow");
//static_assert(sizeof(BUI_RoundRectDemoOne_UpdateShow) == 0x000004, "Wrong size on BUI_RoundRectDemoOne_UpdateShow");
//static_assert(offsetof(BUI_RoundRectDemoOne_UpdateShow, InDeltaTime) == 0x000000, "Member 'BUI_RoundRectDemoOne_UpdateShow::InDeltaTime' has a wrong offset!");

// Function b1-Managed.BUI_BarCSharp.UpdateBarWithCurLength
// 0x0008 (0x0008 - 0x0000)
struct BUI_BarCSharp_UpdateBarWithCurLength final
{
public:
	class UNamedSlot*                             InBarSlot;                                         // 0x0000(0x0008)(ExportObject, Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
//static_assert(alignof(BUI_BarCSharp_UpdateBarWithCurLength) == 0x000008, "Wrong alignment on BUI_BarCSharp_UpdateBarWithCurLength");
//static_assert(sizeof(BUI_BarCSharp_UpdateBarWithCurLength) == 0x000008, "Wrong size on BUI_BarCSharp_UpdateBarWithCurLength");
//static_assert(offsetof(BUI_BarCSharp_UpdateBarWithCurLength, InBarSlot) == 0x000000, "Member 'BUI_BarCSharp_UpdateBarWithCurLength::InBarSlot' has a wrong offset!");

// Function b1-Managed.BUI_BarCSharp.InitSetCurAndMaxValue
// 0x000C (0x000C - 0x0000)
struct BUI_BarCSharp_InitSetCurAndMaxValue final
{
public:
	float                                         InMaxValue;                                        // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         InCurValue;                                        // 0x0004(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         InIsReCalcMaxLen : 1;                              // 0x0008(0x0001)(BitIndex: 0x00, PropSize: 0x0001 (Parm, NoDestructor, HasGetValueTypeHash))
};
//static_assert(alignof(BUI_BarCSharp_InitSetCurAndMaxValue) == 0x000004, "Wrong alignment on BUI_BarCSharp_InitSetCurAndMaxValue");
//static_assert(sizeof(BUI_BarCSharp_InitSetCurAndMaxValue) == 0x00000C, "Wrong size on BUI_BarCSharp_InitSetCurAndMaxValue");
//static_assert(offsetof(BUI_BarCSharp_InitSetCurAndMaxValue, InMaxValue) == 0x000000, "Member 'BUI_BarCSharp_InitSetCurAndMaxValue::InMaxValue' has a wrong offset!");
//static_assert(offsetof(BUI_BarCSharp_InitSetCurAndMaxValue, InCurValue) == 0x000004, "Member 'BUI_BarCSharp_InitSetCurAndMaxValue::InCurValue' has a wrong offset!");

// Function b1-Managed.BUI_BarCSharp.CalcBarLengthByValue
// 0x0008 (0x0008 - 0x0000)
struct BUI_BarCSharp_CalcBarLengthByValue final
{
public:
	float                                         InValue;                                           // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         ReturnValue;                                       // 0x0004(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
//static_assert(alignof(BUI_BarCSharp_CalcBarLengthByValue) == 0x000004, "Wrong alignment on BUI_BarCSharp_CalcBarLengthByValue");
//static_assert(sizeof(BUI_BarCSharp_CalcBarLengthByValue) == 0x000008, "Wrong size on BUI_BarCSharp_CalcBarLengthByValue");
//static_assert(offsetof(BUI_BarCSharp_CalcBarLengthByValue, InValue) == 0x000000, "Member 'BUI_BarCSharp_CalcBarLengthByValue::InValue' has a wrong offset!");
//static_assert(offsetof(BUI_BarCSharp_CalcBarLengthByValue, ReturnValue) == 0x000004, "Member 'BUI_BarCSharp_CalcBarLengthByValue::ReturnValue' has a wrong offset!");

// Function b1-Managed.BUI_BarCSharp.UninterruptDecrease
// 0x0004 (0x0004 - 0x0000)
struct BUI_BarCSharp_UninterruptDecrease final
{
public:
	float                                         DecreaseValueIn;                                   // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
//static_assert(alignof(BUI_BarCSharp_UninterruptDecrease) == 0x000004, "Wrong alignment on BUI_BarCSharp_UninterruptDecrease");
//static_assert(sizeof(BUI_BarCSharp_UninterruptDecrease) == 0x000004, "Wrong size on BUI_BarCSharp_UninterruptDecrease");
//static_assert(offsetof(BUI_BarCSharp_UninterruptDecrease, DecreaseValueIn) == 0x000000, "Member 'BUI_BarCSharp_UninterruptDecrease::DecreaseValueIn' has a wrong offset!");

// Function b1-Managed.BUI_BarCSharp.UpdateCurMaxValue
// 0x0004 (0x0004 - 0x0000)
struct BUI_BarCSharp_UpdateCurMaxValue final
{
public:
	float                                         InValue;                                           // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
//static_assert(alignof(BUI_BarCSharp_UpdateCurMaxValue) == 0x000004, "Wrong alignment on BUI_BarCSharp_UpdateCurMaxValue");
//static_assert(sizeof(BUI_BarCSharp_UpdateCurMaxValue) == 0x000004, "Wrong size on BUI_BarCSharp_UpdateCurMaxValue");
//static_assert(offsetof(BUI_BarCSharp_UpdateCurMaxValue, InValue) == 0x000000, "Member 'BUI_BarCSharp_UpdateCurMaxValue::InValue' has a wrong offset!");

// Function b1-Managed.BUI_BarCSharp.UpdateBarByLength
// 0x0010 (0x0010 - 0x0000)
struct BUI_BarCSharp_UpdateBarByLength final
{
public:
	class UWidget*                                InBarWidget;                                       // 0x0000(0x0008)(ExportObject, Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         InBarLength;                                       // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
//static_assert(alignof(BUI_BarCSharp_UpdateBarByLength) == 0x000008, "Wrong alignment on BUI_BarCSharp_UpdateBarByLength");
//static_assert(sizeof(BUI_BarCSharp_UpdateBarByLength) == 0x000010, "Wrong size on BUI_BarCSharp_UpdateBarByLength");
//static_assert(offsetof(BUI_BarCSharp_UpdateBarByLength, InBarWidget) == 0x000000, "Member 'BUI_BarCSharp_UpdateBarByLength::InBarWidget' has a wrong offset!");
//static_assert(offsetof(BUI_BarCSharp_UpdateBarByLength, InBarLength) == 0x000008, "Member 'BUI_BarCSharp_UpdateBarByLength::InBarLength' has a wrong offset!");

// Function b1-Managed.BUI_BarCSharp.UpdateBarByValue
// 0x0010 (0x0010 - 0x0000)
struct BUI_BarCSharp_UpdateBarByValue final
{
public:
	class UNamedSlot*                             InBarSlot;                                         // 0x0000(0x0008)(ExportObject, Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         InValue;                                           // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
//static_assert(alignof(BUI_BarCSharp_UpdateBarByValue) == 0x000008, "Wrong alignment on BUI_BarCSharp_UpdateBarByValue");
//static_assert(sizeof(BUI_BarCSharp_UpdateBarByValue) == 0x000010, "Wrong size on BUI_BarCSharp_UpdateBarByValue");
//static_assert(offsetof(BUI_BarCSharp_UpdateBarByValue, InBarSlot) == 0x000000, "Member 'BUI_BarCSharp_UpdateBarByValue::InBarSlot' has a wrong offset!");
//static_assert(offsetof(BUI_BarCSharp_UpdateBarByValue, InValue) == 0x000008, "Member 'BUI_BarCSharp_UpdateBarByValue::InValue' has a wrong offset!");

// Function b1-Managed.BUI_BarCSharp.CalcCurBarLength
// 0x0004 (0x0004 - 0x0000)
struct BUI_BarCSharp_CalcCurBarLength final
{
public:
	float                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
//static_assert(alignof(BUI_BarCSharp_CalcCurBarLength) == 0x000004, "Wrong alignment on BUI_BarCSharp_CalcCurBarLength");
//static_assert(sizeof(BUI_BarCSharp_CalcCurBarLength) == 0x000004, "Wrong size on BUI_BarCSharp_CalcCurBarLength");
//static_assert(offsetof(BUI_BarCSharp_CalcCurBarLength, ReturnValue) == 0x000000, "Member 'BUI_BarCSharp_CalcCurBarLength::ReturnValue' has a wrong offset!");

// Function b1-Managed.BUI_BarCSharp.BarChangeValue
// 0x0004 (0x0004 - 0x0000)
struct BUI_BarCSharp_BarChangeValue final
{
public:
	float                                         ChangeValue;                                       // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
//static_assert(alignof(BUI_BarCSharp_BarChangeValue) == 0x000004, "Wrong alignment on BUI_BarCSharp_BarChangeValue");
//static_assert(sizeof(BUI_BarCSharp_BarChangeValue) == 0x000004, "Wrong size on BUI_BarCSharp_BarChangeValue");
//static_assert(offsetof(BUI_BarCSharp_BarChangeValue, ChangeValue) == 0x000000, "Member 'BUI_BarCSharp_BarChangeValue::ChangeValue' has a wrong offset!");

// Function b1-Managed.BUI_BarCSharp.ChangeMaxValue
// 0x0004 (0x0004 - 0x0000)
struct BUI_BarCSharp_ChangeMaxValue final
{
public:
	float                                         InValue;                                           // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
//static_assert(alignof(BUI_BarCSharp_ChangeMaxValue) == 0x000004, "Wrong alignment on BUI_BarCSharp_ChangeMaxValue");
//static_assert(sizeof(BUI_BarCSharp_ChangeMaxValue) == 0x000004, "Wrong size on BUI_BarCSharp_ChangeMaxValue");
//static_assert(offsetof(BUI_BarCSharp_ChangeMaxValue, InValue) == 0x000000, "Member 'BUI_BarCSharp_ChangeMaxValue::InValue' has a wrong offset!");

// Function b1-Managed.BUI_BarCSharp.ValueIncrease
// 0x0004 (0x0004 - 0x0000)
struct BUI_BarCSharp_ValueIncrease final
{
public:
	float                                         IncreaseValueIn;                                   // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
//static_assert(alignof(BUI_BarCSharp_ValueIncrease) == 0x000004, "Wrong alignment on BUI_BarCSharp_ValueIncrease");
//static_assert(sizeof(BUI_BarCSharp_ValueIncrease) == 0x000004, "Wrong size on BUI_BarCSharp_ValueIncrease");
//static_assert(offsetof(BUI_BarCSharp_ValueIncrease, IncreaseValueIn) == 0x000000, "Member 'BUI_BarCSharp_ValueIncrease::IncreaseValueIn' has a wrong offset!");

// Function b1-Managed.BUI_BarCSharp.ValueDecrease
// 0x0004 (0x0004 - 0x0000)
struct BUI_BarCSharp_ValueDecrease final
{
public:
	float                                         DecreaseValueIn;                                   // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
//static_assert(alignof(BUI_BarCSharp_ValueDecrease) == 0x000004, "Wrong alignment on BUI_BarCSharp_ValueDecrease");
//static_assert(sizeof(BUI_BarCSharp_ValueDecrease) == 0x000004, "Wrong size on BUI_BarCSharp_ValueDecrease");
//static_assert(offsetof(BUI_BarCSharp_ValueDecrease, DecreaseValueIn) == 0x000000, "Member 'BUI_BarCSharp_ValueDecrease::DecreaseValueIn' has a wrong offset!");

// Function b1-Managed.BUI_EnemyBar.GSInit
// 0x0008 (0x0008 - 0x0000)
struct BUI_EnemyBar_GSInit final
{
public:
	class AActor*                                 InOwnerCharacter;                                  // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
//static_assert(alignof(BUI_EnemyBar_GSInit) == 0x000008, "Wrong alignment on BUI_EnemyBar_GSInit");
//static_assert(sizeof(BUI_EnemyBar_GSInit) == 0x000008, "Wrong size on BUI_EnemyBar_GSInit");
//static_assert(offsetof(BUI_EnemyBar_GSInit, InOwnerCharacter) == 0x000000, "Member 'BUI_EnemyBar_GSInit::InOwnerCharacter' has a wrong offset!");

}

