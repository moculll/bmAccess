#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: GeometryScriptingCore

#include "Basic.hpp"

#include "CoreUObject_structs.hpp"


namespace SDK
{

// Enum GeometryScriptingCore.EGeometryScriptCollisionGenerationMethod
// NumValues: 0x0008
enum class EGeometryScriptCollisionGenerationMethod : uint8
{
	AlignedBoxes                             = 0,
	OrientedBoxes                            = 1,
	MinimalSpheres                           = 2,
	Capsules                                 = 3,
	ConvexHulls                              = 4,
	SweptHulls                               = 5,
	MinVolumeShapes                          = 6,
	EGeometryScriptCollisionGenerationMethod_MAX = 7,
};

// Enum GeometryScriptingCore.EGeometryScriptSweptHullAxis
// NumValues: 0x0006
enum class EGeometryScriptSweptHullAxis : uint8
{
	X                                        = 0,
	Y                                        = 1,
	Z                                        = 2,
	SmallestBoxDimension                     = 3,
	SmallestVolume                           = 4,
	EGeometryScriptSweptHullAxis_MAX         = 5,
};

// Enum GeometryScriptingCore.EGeometryScriptOutcomePins
// NumValues: 0x0003
enum class EGeometryScriptOutcomePins : uint8
{
	Failure                                  = 0,
	Success                                  = 1,
	EGeometryScriptOutcomePins_MAX           = 2,
};

// Enum GeometryScriptingCore.EGeometryScriptSearchOutcomePins
// NumValues: 0x0003
enum class EGeometryScriptSearchOutcomePins : uint8
{
	Found                                    = 0,
	NotFound                                 = 1,
	EGeometryScriptSearchOutcomePins_MAX     = 2,
};

// Enum GeometryScriptingCore.EGeometryScriptContainmentOutcomePins
// NumValues: 0x0003
enum class EGeometryScriptContainmentOutcomePins : uint8
{
	Inside                                   = 0,
	Outside                                  = 1,
	EGeometryScriptContainmentOutcomePins_MAX = 2,
};

// Enum GeometryScriptingCore.EGeometryScriptLODType
// NumValues: 0x0005
enum class EGeometryScriptLODType : uint8
{
	MaxAvailable                             = 0,
	HiResSourceModel                         = 1,
	SourceModel                              = 2,
	RenderData                               = 3,
	EGeometryScriptLODType_MAX               = 4,
};

// Enum GeometryScriptingCore.EGeometryScriptIndexType
// NumValues: 0x0006
enum class EGeometryScriptIndexType : uint8
{
	Any                                      = 0,
	Triangle                                 = 1,
	Vertex                                   = 2,
	MaterialID                               = 3,
	PolygroupID                              = 4,
	EGeometryScriptIndexType_MAX             = 5,
};

// Enum GeometryScriptingCore.EGeometryScriptDebugMessageType
// NumValues: 0x0003
enum class EGeometryScriptDebugMessageType : uint8
{
	ErrorMessage                             = 0,
	WarningMessage                           = 1,
	EGeometryScriptDebugMessageType_MAX      = 2,
};

// Enum GeometryScriptingCore.EGeometryScriptErrorType
// NumValues: 0x0005
enum class EGeometryScriptErrorType : uint8
{
	NoError                                  = 0,
	UnknownError                             = 1,
	InvalidInputs                            = 2,
	OperationFailed                          = 3,
	EGeometryScriptErrorType_MAX             = 4,
};

// Enum GeometryScriptingCore.EGeometryScriptBooleanOperation
// NumValues: 0x0004
enum class EGeometryScriptBooleanOperation : uint8
{
	Union                                    = 0,
	Intersection                             = 1,
	Subtract                                 = 2,
	EGeometryScriptBooleanOperation_MAX      = 3,
};

// Enum GeometryScriptingCore.EGeometryScriptFlareType
// NumValues: 0x0004
enum class EGeometryScriptFlareType : uint8
{
	SinMode                                  = 0,
	SinSquaredMode                           = 1,
	TriangleMode                             = 2,
	EGeometryScriptFlareType_MAX             = 3,
};

// Enum GeometryScriptingCore.EGeometryScriptMathWarpType
// NumValues: 0x0004
enum class EGeometryScriptMathWarpType : uint8
{
	SinWave1D                                = 0,
	SinWave2D                                = 1,
	SinWave3D                                = 2,
	EGeometryScriptMathWarpType_MAX          = 3,
};

// Enum GeometryScriptingCore.EGeometryScriptTangentTypes
// NumValues: 0x0003
enum class EGeometryScriptTangentTypes : uint8
{
	FastMikkT                                = 0,
	PerTriangle                              = 1,
	EGeometryScriptTangentTypes_MAX          = 2,
};

// Enum GeometryScriptingCore.EGeometryScriptPrimitivePolygroupMode
// NumValues: 0x0004
enum class EGeometryScriptPrimitivePolygroupMode : uint8
{
	SingleGroup                              = 0,
	PerFace                                  = 1,
	PerQuad                                  = 2,
	EGeometryScriptPrimitivePolygroupMode_MAX = 3,
};

// Enum GeometryScriptingCore.EGeometryScriptPrimitiveOriginMode
// NumValues: 0x0003
enum class EGeometryScriptPrimitiveOriginMode : uint8
{
	Center                                   = 0,
	Base                                     = 1,
	EGeometryScriptPrimitiveOriginMode_MAX   = 2,
};

// Enum GeometryScriptingCore.EGeometryScriptPrimitiveUVMode
// NumValues: 0x0003
enum class EGeometryScriptPrimitiveUVMode : uint8
{
	Uniform                                  = 0,
	ScaleToFill                              = 1,
	EGeometryScriptPrimitiveUVMode_MAX       = 2,
};

// Enum GeometryScriptingCore.EGeometryScriptFillHolesMethod
// NumValues: 0x0006
enum class EGeometryScriptFillHolesMethod : uint8
{
	Automatic                                = 0,
	MinimalFill                              = 1,
	PolygonTriangulation                     = 2,
	TriangleFan                              = 3,
	PlanarProjection                         = 4,
	EGeometryScriptFillHolesMethod_MAX       = 5,
};

// Enum GeometryScriptingCore.EGeometryScriptRemoveHiddenTrianglesMethod
// NumValues: 0x0003
enum class EGeometryScriptRemoveHiddenTrianglesMethod : uint8
{
	FastWindingNumber                        = 0,
	RaycastOcclusionTest                     = 1,
	EGeometryScriptRemoveHiddenTrianglesMethod_MAX = 2,
};

// Enum GeometryScriptingCore.EGeometryScriptRemoveMeshSimplificationType
// NumValues: 0x0004
enum class EGeometryScriptRemoveMeshSimplificationType : uint8
{
	StandardQEM                              = 0,
	VolumePreserving                         = 1,
	AttributeAware                           = 2,
	EGeometryScriptRemoveMeshSimplificationType_MAX = 3,
};

// Enum GeometryScriptingCore.EGeometryScriptUVFlattenMethod
// NumValues: 0x0003
enum class EGeometryScriptUVFlattenMethod : uint8
{
	ExpMap                                   = 0,
	Conformal                                = 1,
	EGeometryScriptUVFlattenMethod_MAX       = 2,
};

// Enum GeometryScriptingCore.EGeometryScriptUVIslandSource
// NumValues: 0x0003
enum class EGeometryScriptUVIslandSource : uint8
{
	PolyGroups                               = 0,
	UVIslands                                = 1,
	EGeometryScriptUVIslandSource_MAX        = 2,
};

// Enum GeometryScriptingCore.EGeometryScriptGridSizingMethod
// NumValues: 0x0003
enum class EGeometryScriptGridSizingMethod : uint8
{
	GridCellSize                             = 0,
	GridResolution                           = 1,
	EGeometryScriptGridSizingMethod_MAX      = 2,
};

// Enum GeometryScriptingCore.EGeometryScriptMorphologicalOpType
// NumValues: 0x0005
enum class EGeometryScriptMorphologicalOpType : uint8
{
	Dilate                                   = 0,
	Contract                                 = 1,
	Close                                    = 2,
	Open                                     = 3,
	EGeometryScriptMorphologicalOpType_MAX   = 4,
};

// ScriptStruct GeometryScriptingCore.GeometryScriptCollisionFromMeshOptions
// 0x0020 (0x0020 - 0x0000)
struct FGeometryScriptCollisionFromMeshOptions final
{
public:
	bool                                          bEmitTransaction;                                  // 0x0000(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EGeometryScriptCollisionGenerationMethod      Method;                                            // 0x0001(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bAutoDetectSpheres;                                // 0x0002(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bAutoDetectBoxes;                                  // 0x0003(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bAutoDetectCapsules;                               // 0x0004(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_5[0x3];                                        // 0x0005(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         MinThickness;                                      // 0x0008(0x0004)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bSimplifyHulls;                                    // 0x000C(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_D[0x3];                                        // 0x000D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         ConvexHullTargetFaceCount;                         // 0x0010(0x0004)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         SweptHullSimplifyTolerance;                        // 0x0014(0x0004)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EGeometryScriptSweptHullAxis                  SweptHullAxis;                                     // 0x0018(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bRemoveFullyContainedShapes;                       // 0x0019(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1A[0x2];                                       // 0x001A(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         MaxShapeCount;                                     // 0x001C(0x0004)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
//static_assert(alignof(FGeometryScriptCollisionFromMeshOptions) == 0x000004, "Wrong alignment on FGeometryScriptCollisionFromMeshOptions");
//static_assert(sizeof(FGeometryScriptCollisionFromMeshOptions) == 0x000020, "Wrong size on FGeometryScriptCollisionFromMeshOptions");
//static_assert(offsetof(FGeometryScriptCollisionFromMeshOptions, bEmitTransaction) == 0x000000, "Member 'FGeometryScriptCollisionFromMeshOptions::bEmitTransaction' has a wrong offset!");
//static_assert(offsetof(FGeometryScriptCollisionFromMeshOptions, Method) == 0x000001, "Member 'FGeometryScriptCollisionFromMeshOptions::Method' has a wrong offset!");
//static_assert(offsetof(FGeometryScriptCollisionFromMeshOptions, bAutoDetectSpheres) == 0x000002, "Member 'FGeometryScriptCollisionFromMeshOptions::bAutoDetectSpheres' has a wrong offset!");
//static_assert(offsetof(FGeometryScriptCollisionFromMeshOptions, bAutoDetectBoxes) == 0x000003, "Member 'FGeometryScriptCollisionFromMeshOptions::bAutoDetectBoxes' has a wrong offset!");
//static_assert(offsetof(FGeometryScriptCollisionFromMeshOptions, bAutoDetectCapsules) == 0x000004, "Member 'FGeometryScriptCollisionFromMeshOptions::bAutoDetectCapsules' has a wrong offset!");
//static_assert(offsetof(FGeometryScriptCollisionFromMeshOptions, MinThickness) == 0x000008, "Member 'FGeometryScriptCollisionFromMeshOptions::MinThickness' has a wrong offset!");
//static_assert(offsetof(FGeometryScriptCollisionFromMeshOptions, bSimplifyHulls) == 0x00000C, "Member 'FGeometryScriptCollisionFromMeshOptions::bSimplifyHulls' has a wrong offset!");
//static_assert(offsetof(FGeometryScriptCollisionFromMeshOptions, ConvexHullTargetFaceCount) == 0x000010, "Member 'FGeometryScriptCollisionFromMeshOptions::ConvexHullTargetFaceCount' has a wrong offset!");
//static_assert(offsetof(FGeometryScriptCollisionFromMeshOptions, SweptHullSimplifyTolerance) == 0x000014, "Member 'FGeometryScriptCollisionFromMeshOptions::SweptHullSimplifyTolerance' has a wrong offset!");
//static_assert(offsetof(FGeometryScriptCollisionFromMeshOptions, SweptHullAxis) == 0x000018, "Member 'FGeometryScriptCollisionFromMeshOptions::SweptHullAxis' has a wrong offset!");
//static_assert(offsetof(FGeometryScriptCollisionFromMeshOptions, bRemoveFullyContainedShapes) == 0x000019, "Member 'FGeometryScriptCollisionFromMeshOptions::bRemoveFullyContainedShapes' has a wrong offset!");
//static_assert(offsetof(FGeometryScriptCollisionFromMeshOptions, MaxShapeCount) == 0x00001C, "Member 'FGeometryScriptCollisionFromMeshOptions::MaxShapeCount' has a wrong offset!");

// ScriptStruct GeometryScriptingCore.GeometryScriptSetSimpleCollisionOptions
// 0x0001 (0x0001 - 0x0000)
struct FGeometryScriptSetSimpleCollisionOptions final
{
public:
	bool                                          bEmitTransaction;                                  // 0x0000(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
//static_assert(alignof(FGeometryScriptSetSimpleCollisionOptions) == 0x000001, "Wrong alignment on FGeometryScriptSetSimpleCollisionOptions");
//static_assert(sizeof(FGeometryScriptSetSimpleCollisionOptions) == 0x000001, "Wrong size on FGeometryScriptSetSimpleCollisionOptions");
//static_assert(offsetof(FGeometryScriptSetSimpleCollisionOptions, bEmitTransaction) == 0x000000, "Member 'FGeometryScriptSetSimpleCollisionOptions::bEmitTransaction' has a wrong offset!");

// ScriptStruct GeometryScriptingCore.GeometryScriptConvexHullOptions
// 0x000C (0x000C - 0x0000)
struct FGeometryScriptConvexHullOptions final
{
public:
	bool                                          bPrefilterVertices;                                // 0x0000(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x3];                                        // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         PrefilterGridResolution;                           // 0x0004(0x0004)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         SimplifyToFaceCount;                               // 0x0008(0x0004)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
//static_assert(alignof(FGeometryScriptConvexHullOptions) == 0x000004, "Wrong alignment on FGeometryScriptConvexHullOptions");
//static_assert(sizeof(FGeometryScriptConvexHullOptions) == 0x00000C, "Wrong size on FGeometryScriptConvexHullOptions");
//static_assert(offsetof(FGeometryScriptConvexHullOptions, bPrefilterVertices) == 0x000000, "Member 'FGeometryScriptConvexHullOptions::bPrefilterVertices' has a wrong offset!");
//static_assert(offsetof(FGeometryScriptConvexHullOptions, PrefilterGridResolution) == 0x000004, "Member 'FGeometryScriptConvexHullOptions::PrefilterGridResolution' has a wrong offset!");
//static_assert(offsetof(FGeometryScriptConvexHullOptions, SimplifyToFaceCount) == 0x000008, "Member 'FGeometryScriptConvexHullOptions::SimplifyToFaceCount' has a wrong offset!");

// ScriptStruct GeometryScriptingCore.GeometryScriptSweptHullOptions
// 0x0018 (0x0018 - 0x0000)
struct FGeometryScriptSweptHullOptions final
{
public:
	bool                                          bPrefilterVertices;                                // 0x0000(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x3];                                        // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         PrefilterGridResolution;                           // 0x0004(0x0004)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         MinThickness;                                      // 0x0008(0x0004)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bSimplify;                                         // 0x000C(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_D[0x3];                                        // 0x000D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         MinEdgeLength;                                     // 0x0010(0x0004)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         SimplifyTolerance;                                 // 0x0014(0x0004)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
//static_assert(alignof(FGeometryScriptSweptHullOptions) == 0x000004, "Wrong alignment on FGeometryScriptSweptHullOptions");
//static_assert(sizeof(FGeometryScriptSweptHullOptions) == 0x000018, "Wrong size on FGeometryScriptSweptHullOptions");
//static_assert(offsetof(FGeometryScriptSweptHullOptions, bPrefilterVertices) == 0x000000, "Member 'FGeometryScriptSweptHullOptions::bPrefilterVertices' has a wrong offset!");
//static_assert(offsetof(FGeometryScriptSweptHullOptions, PrefilterGridResolution) == 0x000004, "Member 'FGeometryScriptSweptHullOptions::PrefilterGridResolution' has a wrong offset!");
//static_assert(offsetof(FGeometryScriptSweptHullOptions, MinThickness) == 0x000008, "Member 'FGeometryScriptSweptHullOptions::MinThickness' has a wrong offset!");
//static_assert(offsetof(FGeometryScriptSweptHullOptions, bSimplify) == 0x00000C, "Member 'FGeometryScriptSweptHullOptions::bSimplify' has a wrong offset!");
//static_assert(offsetof(FGeometryScriptSweptHullOptions, MinEdgeLength) == 0x000010, "Member 'FGeometryScriptSweptHullOptions::MinEdgeLength' has a wrong offset!");
//static_assert(offsetof(FGeometryScriptSweptHullOptions, SimplifyTolerance) == 0x000014, "Member 'FGeometryScriptSweptHullOptions::SimplifyTolerance' has a wrong offset!");

// ScriptStruct GeometryScriptingCore.GeometryScriptMeshReadLOD
// 0x0008 (0x0008 - 0x0000)
struct FGeometryScriptMeshReadLOD final
{
public:
	EGeometryScriptLODType                        LODType;                                           // 0x0000(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x3];                                        // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         LODIndex;                                          // 0x0004(0x0004)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
//static_assert(alignof(FGeometryScriptMeshReadLOD) == 0x000004, "Wrong alignment on FGeometryScriptMeshReadLOD");
//static_assert(sizeof(FGeometryScriptMeshReadLOD) == 0x000008, "Wrong size on FGeometryScriptMeshReadLOD");
//static_assert(offsetof(FGeometryScriptMeshReadLOD, LODType) == 0x000000, "Member 'FGeometryScriptMeshReadLOD::LODType' has a wrong offset!");
//static_assert(offsetof(FGeometryScriptMeshReadLOD, LODIndex) == 0x000004, "Member 'FGeometryScriptMeshReadLOD::LODIndex' has a wrong offset!");

// ScriptStruct GeometryScriptingCore.GeometryScriptMeshWriteLOD
// 0x0008 (0x0008 - 0x0000)
struct FGeometryScriptMeshWriteLOD final
{
public:
	bool                                          bWriteHiResSource;                                 // 0x0000(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x3];                                        // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         LODIndex;                                          // 0x0004(0x0004)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
//static_assert(alignof(FGeometryScriptMeshWriteLOD) == 0x000004, "Wrong alignment on FGeometryScriptMeshWriteLOD");
//static_assert(sizeof(FGeometryScriptMeshWriteLOD) == 0x000008, "Wrong size on FGeometryScriptMeshWriteLOD");
//static_assert(offsetof(FGeometryScriptMeshWriteLOD, bWriteHiResSource) == 0x000000, "Member 'FGeometryScriptMeshWriteLOD::bWriteHiResSource' has a wrong offset!");
//static_assert(offsetof(FGeometryScriptMeshWriteLOD, LODIndex) == 0x000004, "Member 'FGeometryScriptMeshWriteLOD::LODIndex' has a wrong offset!");

// ScriptStruct GeometryScriptingCore.GeometryScriptTriangle
// 0x0048 (0x0048 - 0x0000)
struct FGeometryScriptTriangle final
{
public:
	struct FVector                                Vector0;                                           // 0x0000(0x0018)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                Vector1;                                           // 0x0018(0x0018)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                Vector2;                                           // 0x0030(0x0018)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
//static_assert(alignof(FGeometryScriptTriangle) == 0x000008, "Wrong alignment on FGeometryScriptTriangle");
//static_assert(sizeof(FGeometryScriptTriangle) == 0x000048, "Wrong size on FGeometryScriptTriangle");
//static_assert(offsetof(FGeometryScriptTriangle, Vector0) == 0x000000, "Member 'FGeometryScriptTriangle::Vector0' has a wrong offset!");
//static_assert(offsetof(FGeometryScriptTriangle, Vector1) == 0x000018, "Member 'FGeometryScriptTriangle::Vector1' has a wrong offset!");
//static_assert(offsetof(FGeometryScriptTriangle, Vector2) == 0x000030, "Member 'FGeometryScriptTriangle::Vector2' has a wrong offset!");

// ScriptStruct GeometryScriptingCore.GeometryScriptTrianglePoint
// 0x0038 (0x0038 - 0x0000)
struct FGeometryScriptTrianglePoint final
{
public:
	bool                                          bValid;                                            // 0x0000(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x3];                                        // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         TriangleID;                                        // 0x0004(0x0004)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                Position;                                          // 0x0008(0x0018)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                BaryCoords;                                        // 0x0020(0x0018)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
//static_assert(alignof(FGeometryScriptTrianglePoint) == 0x000008, "Wrong alignment on FGeometryScriptTrianglePoint");
//static_assert(sizeof(FGeometryScriptTrianglePoint) == 0x000038, "Wrong size on FGeometryScriptTrianglePoint");
//static_assert(offsetof(FGeometryScriptTrianglePoint, bValid) == 0x000000, "Member 'FGeometryScriptTrianglePoint::bValid' has a wrong offset!");
//static_assert(offsetof(FGeometryScriptTrianglePoint, TriangleID) == 0x000004, "Member 'FGeometryScriptTrianglePoint::TriangleID' has a wrong offset!");
//static_assert(offsetof(FGeometryScriptTrianglePoint, Position) == 0x000008, "Member 'FGeometryScriptTrianglePoint::Position' has a wrong offset!");
//static_assert(offsetof(FGeometryScriptTrianglePoint, BaryCoords) == 0x000020, "Member 'FGeometryScriptTrianglePoint::BaryCoords' has a wrong offset!");

// ScriptStruct GeometryScriptingCore.GeometryScriptUVTriangle
// 0x0030 (0x0030 - 0x0000)
struct FGeometryScriptUVTriangle final
{
public:
	struct FVector2D                              UV0;                                               // 0x0000(0x0010)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector2D                              UV1;                                               // 0x0010(0x0010)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector2D                              UV2;                                               // 0x0020(0x0010)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
//static_assert(alignof(FGeometryScriptUVTriangle) == 0x000008, "Wrong alignment on FGeometryScriptUVTriangle");
//static_assert(sizeof(FGeometryScriptUVTriangle) == 0x000030, "Wrong size on FGeometryScriptUVTriangle");
//static_assert(offsetof(FGeometryScriptUVTriangle, UV0) == 0x000000, "Member 'FGeometryScriptUVTriangle::UV0' has a wrong offset!");
//static_assert(offsetof(FGeometryScriptUVTriangle, UV1) == 0x000010, "Member 'FGeometryScriptUVTriangle::UV1' has a wrong offset!");
//static_assert(offsetof(FGeometryScriptUVTriangle, UV2) == 0x000020, "Member 'FGeometryScriptUVTriangle::UV2' has a wrong offset!");

// ScriptStruct GeometryScriptingCore.GeometryScriptColorFlags
// 0x0004 (0x0004 - 0x0000)
struct FGeometryScriptColorFlags final
{
public:
	bool                                          bRed;                                              // 0x0000(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bGreen;                                            // 0x0001(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bBlue;                                             // 0x0002(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bAlpha;                                            // 0x0003(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
//static_assert(alignof(FGeometryScriptColorFlags) == 0x000001, "Wrong alignment on FGeometryScriptColorFlags");
//static_assert(sizeof(FGeometryScriptColorFlags) == 0x000004, "Wrong size on FGeometryScriptColorFlags");
//static_assert(offsetof(FGeometryScriptColorFlags, bRed) == 0x000000, "Member 'FGeometryScriptColorFlags::bRed' has a wrong offset!");
//static_assert(offsetof(FGeometryScriptColorFlags, bGreen) == 0x000001, "Member 'FGeometryScriptColorFlags::bGreen' has a wrong offset!");
//static_assert(offsetof(FGeometryScriptColorFlags, bBlue) == 0x000002, "Member 'FGeometryScriptColorFlags::bBlue' has a wrong offset!");
//static_assert(offsetof(FGeometryScriptColorFlags, bAlpha) == 0x000003, "Member 'FGeometryScriptColorFlags::bAlpha' has a wrong offset!");

// ScriptStruct GeometryScriptingCore.GeometryScriptGroupLayer
// 0x0008 (0x0008 - 0x0000)
struct FGeometryScriptGroupLayer final
{
public:
	bool                                          bDefaultLayer;                                     // 0x0000(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x3];                                        // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         ExtendedLayerIndex;                                // 0x0004(0x0004)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
//static_assert(alignof(FGeometryScriptGroupLayer) == 0x000004, "Wrong alignment on FGeometryScriptGroupLayer");
//static_assert(sizeof(FGeometryScriptGroupLayer) == 0x000008, "Wrong size on FGeometryScriptGroupLayer");
//static_assert(offsetof(FGeometryScriptGroupLayer, bDefaultLayer) == 0x000000, "Member 'FGeometryScriptGroupLayer::bDefaultLayer' has a wrong offset!");
//static_assert(offsetof(FGeometryScriptGroupLayer, ExtendedLayerIndex) == 0x000004, "Member 'FGeometryScriptGroupLayer::ExtendedLayerIndex' has a wrong offset!");

// ScriptStruct GeometryScriptingCore.GeometryScriptIndexList
// 0x0018 (0x0018 - 0x0000)
struct alignas(0x08) FGeometryScriptIndexList final
{
public:
	EGeometryScriptIndexType                      IndexType;                                         // 0x0000(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x17];                                       // 0x0001(0x0017)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
//static_assert(alignof(FGeometryScriptIndexList) == 0x000008, "Wrong alignment on FGeometryScriptIndexList");
//static_assert(sizeof(FGeometryScriptIndexList) == 0x000018, "Wrong size on FGeometryScriptIndexList");
//static_assert(offsetof(FGeometryScriptIndexList, IndexType) == 0x000000, "Member 'FGeometryScriptIndexList::IndexType' has a wrong offset!");

// ScriptStruct GeometryScriptingCore.GeometryScriptTriangleList
// 0x0010 (0x0010 - 0x0000)
struct alignas(0x08) FGeometryScriptTriangleList final
{
public:
	uint8                                         Pad_0[0x10];                                       // 0x0000(0x0010)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
//static_assert(alignof(FGeometryScriptTriangleList) == 0x000008, "Wrong alignment on FGeometryScriptTriangleList");
//static_assert(sizeof(FGeometryScriptTriangleList) == 0x000010, "Wrong size on FGeometryScriptTriangleList");

// ScriptStruct GeometryScriptingCore.GeometryScriptVectorList
// 0x0010 (0x0010 - 0x0000)
struct alignas(0x08) FGeometryScriptVectorList final
{
public:
	uint8                                         Pad_0[0x10];                                       // 0x0000(0x0010)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
//static_assert(alignof(FGeometryScriptVectorList) == 0x000008, "Wrong alignment on FGeometryScriptVectorList");
//static_assert(sizeof(FGeometryScriptVectorList) == 0x000010, "Wrong size on FGeometryScriptVectorList");

// ScriptStruct GeometryScriptingCore.GeometryScriptUVList
// 0x0010 (0x0010 - 0x0000)
struct alignas(0x08) FGeometryScriptUVList final
{
public:
	uint8                                         Pad_0[0x10];                                       // 0x0000(0x0010)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
//static_assert(alignof(FGeometryScriptUVList) == 0x000008, "Wrong alignment on FGeometryScriptUVList");
//static_assert(sizeof(FGeometryScriptUVList) == 0x000010, "Wrong size on FGeometryScriptUVList");

// ScriptStruct GeometryScriptingCore.GeometryScriptColorList
// 0x0010 (0x0010 - 0x0000)
struct alignas(0x08) FGeometryScriptColorList final
{
public:
	uint8                                         Pad_0[0x10];                                       // 0x0000(0x0010)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
//static_assert(alignof(FGeometryScriptColorList) == 0x000008, "Wrong alignment on FGeometryScriptColorList");
//static_assert(sizeof(FGeometryScriptColorList) == 0x000010, "Wrong size on FGeometryScriptColorList");

// ScriptStruct GeometryScriptingCore.GeometryScriptDynamicMeshBVH
// 0x0020 (0x0020 - 0x0000)
struct alignas(0x08) FGeometryScriptDynamicMeshBVH final
{
public:
	uint8                                         Pad_0[0x20];                                       // 0x0000(0x0020)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
//static_assert(alignof(FGeometryScriptDynamicMeshBVH) == 0x000008, "Wrong alignment on FGeometryScriptDynamicMeshBVH");
//static_assert(sizeof(FGeometryScriptDynamicMeshBVH) == 0x000020, "Wrong size on FGeometryScriptDynamicMeshBVH");

// ScriptStruct GeometryScriptingCore.GeometryScriptDebugMessage
// 0x0020 (0x0020 - 0x0000)
struct FGeometryScriptDebugMessage final
{
public:
	EGeometryScriptDebugMessageType               MessageType;                                       // 0x0000(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EGeometryScriptErrorType                      ErrorType;                                         // 0x0001(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2[0x6];                                        // 0x0002(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	class FText                                   Message;                                           // 0x0008(0x0018)(BlueprintVisible, NativeAccessSpecifierPublic)
};
//static_assert(alignof(FGeometryScriptDebugMessage) == 0x000008, "Wrong alignment on FGeometryScriptDebugMessage");
//static_assert(sizeof(FGeometryScriptDebugMessage) == 0x000020, "Wrong size on FGeometryScriptDebugMessage");
//static_assert(offsetof(FGeometryScriptDebugMessage, MessageType) == 0x000000, "Member 'FGeometryScriptDebugMessage::MessageType' has a wrong offset!");
//static_assert(offsetof(FGeometryScriptDebugMessage, ErrorType) == 0x000001, "Member 'FGeometryScriptDebugMessage::ErrorType' has a wrong offset!");
//static_assert(offsetof(FGeometryScriptDebugMessage, Message) == 0x000008, "Member 'FGeometryScriptDebugMessage::Message' has a wrong offset!");

// ScriptStruct GeometryScriptingCore.GeometryScriptCopyMeshFromAssetOptions
// 0x0003 (0x0003 - 0x0000)
struct FGeometryScriptCopyMeshFromAssetOptions final
{
public:
	bool                                          bApplyBuildSettings;                               // 0x0000(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bRequestTangents;                                  // 0x0001(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bIgnoreRemoveDegenerates;                          // 0x0002(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
//static_assert(alignof(FGeometryScriptCopyMeshFromAssetOptions) == 0x000001, "Wrong alignment on FGeometryScriptCopyMeshFromAssetOptions");
//static_assert(sizeof(FGeometryScriptCopyMeshFromAssetOptions) == 0x000003, "Wrong size on FGeometryScriptCopyMeshFromAssetOptions");
//static_assert(offsetof(FGeometryScriptCopyMeshFromAssetOptions, bApplyBuildSettings) == 0x000000, "Member 'FGeometryScriptCopyMeshFromAssetOptions::bApplyBuildSettings' has a wrong offset!");
//static_assert(offsetof(FGeometryScriptCopyMeshFromAssetOptions, bRequestTangents) == 0x000001, "Member 'FGeometryScriptCopyMeshFromAssetOptions::bRequestTangents' has a wrong offset!");
//static_assert(offsetof(FGeometryScriptCopyMeshFromAssetOptions, bIgnoreRemoveDegenerates) == 0x000002, "Member 'FGeometryScriptCopyMeshFromAssetOptions::bIgnoreRemoveDegenerates' has a wrong offset!");

// ScriptStruct GeometryScriptingCore.GeometryScriptNaniteOptions
// 0x000C (0x000C - 0x0000)
struct FGeometryScriptNaniteOptions final
{
public:
	bool                                          bEnabled;                                          // 0x0000(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x3];                                        // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         FallbackPercentTriangles;                          // 0x0004(0x0004)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         FallbackRelativeError;                             // 0x0008(0x0004)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
//static_assert(alignof(FGeometryScriptNaniteOptions) == 0x000004, "Wrong alignment on FGeometryScriptNaniteOptions");
//static_assert(sizeof(FGeometryScriptNaniteOptions) == 0x00000C, "Wrong size on FGeometryScriptNaniteOptions");
//static_assert(offsetof(FGeometryScriptNaniteOptions, bEnabled) == 0x000000, "Member 'FGeometryScriptNaniteOptions::bEnabled' has a wrong offset!");
//static_assert(offsetof(FGeometryScriptNaniteOptions, FallbackPercentTriangles) == 0x000004, "Member 'FGeometryScriptNaniteOptions::FallbackPercentTriangles' has a wrong offset!");
//static_assert(offsetof(FGeometryScriptNaniteOptions, FallbackRelativeError) == 0x000008, "Member 'FGeometryScriptNaniteOptions::FallbackRelativeError' has a wrong offset!");

// ScriptStruct GeometryScriptingCore.GeometryScriptCopyMeshToAssetOptions
// 0x0040 (0x0040 - 0x0000)
struct FGeometryScriptCopyMeshToAssetOptions final
{
public:
	bool                                          bEnableRecomputeNormals;                           // 0x0000(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bEnableRecomputeTangents;                          // 0x0001(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bEnableRemoveDegenerates;                          // 0x0002(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bReplaceMaterials;                                 // 0x0003(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_4[0x4];                                        // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<class UMaterialInterface*>             NewMaterials;                                      // 0x0008(0x0010)(BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<class FName>                           NewMaterialSlotNames;                              // 0x0018(0x0010)(BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
	bool                                          bApplyNaniteSettings;                              // 0x0028(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_29[0x3];                                       // 0x0029(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FGeometryScriptNaniteOptions           NaniteSettings;                                    // 0x002C(0x000C)(BlueprintVisible, NoDestructor, NativeAccessSpecifierPublic)
	bool                                          bEmitTransaction;                                  // 0x0038(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bDeferMeshPostEditChange;                          // 0x0039(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_3A[0x6];                                       // 0x003A(0x0006)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
//static_assert(alignof(FGeometryScriptCopyMeshToAssetOptions) == 0x000008, "Wrong alignment on FGeometryScriptCopyMeshToAssetOptions");
//static_assert(sizeof(FGeometryScriptCopyMeshToAssetOptions) == 0x000040, "Wrong size on FGeometryScriptCopyMeshToAssetOptions");
//static_assert(offsetof(FGeometryScriptCopyMeshToAssetOptions, bEnableRecomputeNormals) == 0x000000, "Member 'FGeometryScriptCopyMeshToAssetOptions::bEnableRecomputeNormals' has a wrong offset!");
//static_assert(offsetof(FGeometryScriptCopyMeshToAssetOptions, bEnableRecomputeTangents) == 0x000001, "Member 'FGeometryScriptCopyMeshToAssetOptions::bEnableRecomputeTangents' has a wrong offset!");
//static_assert(offsetof(FGeometryScriptCopyMeshToAssetOptions, bEnableRemoveDegenerates) == 0x000002, "Member 'FGeometryScriptCopyMeshToAssetOptions::bEnableRemoveDegenerates' has a wrong offset!");
//static_assert(offsetof(FGeometryScriptCopyMeshToAssetOptions, bReplaceMaterials) == 0x000003, "Member 'FGeometryScriptCopyMeshToAssetOptions::bReplaceMaterials' has a wrong offset!");
//static_assert(offsetof(FGeometryScriptCopyMeshToAssetOptions, NewMaterials) == 0x000008, "Member 'FGeometryScriptCopyMeshToAssetOptions::NewMaterials' has a wrong offset!");
//static_assert(offsetof(FGeometryScriptCopyMeshToAssetOptions, NewMaterialSlotNames) == 0x000018, "Member 'FGeometryScriptCopyMeshToAssetOptions::NewMaterialSlotNames' has a wrong offset!");
//static_assert(offsetof(FGeometryScriptCopyMeshToAssetOptions, bApplyNaniteSettings) == 0x000028, "Member 'FGeometryScriptCopyMeshToAssetOptions::bApplyNaniteSettings' has a wrong offset!");
//static_assert(offsetof(FGeometryScriptCopyMeshToAssetOptions, NaniteSettings) == 0x00002C, "Member 'FGeometryScriptCopyMeshToAssetOptions::NaniteSettings' has a wrong offset!");
//static_assert(offsetof(FGeometryScriptCopyMeshToAssetOptions, bEmitTransaction) == 0x000038, "Member 'FGeometryScriptCopyMeshToAssetOptions::bEmitTransaction' has a wrong offset!");
//static_assert(offsetof(FGeometryScriptCopyMeshToAssetOptions, bDeferMeshPostEditChange) == 0x000039, "Member 'FGeometryScriptCopyMeshToAssetOptions::bDeferMeshPostEditChange' has a wrong offset!");

// ScriptStruct GeometryScriptingCore.GeometryScriptSimpleMeshBuffers
// 0x00D0 (0x00D0 - 0x0000)
struct FGeometryScriptSimpleMeshBuffers final
{
public:
	TArray<struct FVector>                        Vertices;                                          // 0x0000(0x0010)(BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<struct FVector>                        Normals;                                           // 0x0010(0x0010)(BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<struct FVector2D>                      UV0;                                               // 0x0020(0x0010)(BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<struct FVector2D>                      UV1;                                               // 0x0030(0x0010)(BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<struct FVector2D>                      UV2;                                               // 0x0040(0x0010)(BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<struct FVector2D>                      UV3;                                               // 0x0050(0x0010)(BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<struct FVector2D>                      UV4;                                               // 0x0060(0x0010)(BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<struct FVector2D>                      UV5;                                               // 0x0070(0x0010)(BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<struct FVector2D>                      UV6;                                               // 0x0080(0x0010)(BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<struct FVector2D>                      UV7;                                               // 0x0090(0x0010)(BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<struct FLinearColor>                   VertexColors;                                      // 0x00A0(0x0010)(BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<struct FIntVector>                     Triangles;                                         // 0x00B0(0x0010)(BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<int32>                                 TriGroupIDs;                                       // 0x00C0(0x0010)(BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
};
//static_assert(alignof(FGeometryScriptSimpleMeshBuffers) == 0x000008, "Wrong alignment on FGeometryScriptSimpleMeshBuffers");
//static_assert(sizeof(FGeometryScriptSimpleMeshBuffers) == 0x0000D0, "Wrong size on FGeometryScriptSimpleMeshBuffers");
//static_assert(offsetof(FGeometryScriptSimpleMeshBuffers, Vertices) == 0x000000, "Member 'FGeometryScriptSimpleMeshBuffers::Vertices' has a wrong offset!");
//static_assert(offsetof(FGeometryScriptSimpleMeshBuffers, Normals) == 0x000010, "Member 'FGeometryScriptSimpleMeshBuffers::Normals' has a wrong offset!");
//static_assert(offsetof(FGeometryScriptSimpleMeshBuffers, UV0) == 0x000020, "Member 'FGeometryScriptSimpleMeshBuffers::UV0' has a wrong offset!");
//static_assert(offsetof(FGeometryScriptSimpleMeshBuffers, UV1) == 0x000030, "Member 'FGeometryScriptSimpleMeshBuffers::UV1' has a wrong offset!");
//static_assert(offsetof(FGeometryScriptSimpleMeshBuffers, UV2) == 0x000040, "Member 'FGeometryScriptSimpleMeshBuffers::UV2' has a wrong offset!");
//static_assert(offsetof(FGeometryScriptSimpleMeshBuffers, UV3) == 0x000050, "Member 'FGeometryScriptSimpleMeshBuffers::UV3' has a wrong offset!");
//static_assert(offsetof(FGeometryScriptSimpleMeshBuffers, UV4) == 0x000060, "Member 'FGeometryScriptSimpleMeshBuffers::UV4' has a wrong offset!");
//static_assert(offsetof(FGeometryScriptSimpleMeshBuffers, UV5) == 0x000070, "Member 'FGeometryScriptSimpleMeshBuffers::UV5' has a wrong offset!");
//static_assert(offsetof(FGeometryScriptSimpleMeshBuffers, UV6) == 0x000080, "Member 'FGeometryScriptSimpleMeshBuffers::UV6' has a wrong offset!");
//static_assert(offsetof(FGeometryScriptSimpleMeshBuffers, UV7) == 0x000090, "Member 'FGeometryScriptSimpleMeshBuffers::UV7' has a wrong offset!");
//static_assert(offsetof(FGeometryScriptSimpleMeshBuffers, VertexColors) == 0x0000A0, "Member 'FGeometryScriptSimpleMeshBuffers::VertexColors' has a wrong offset!");
//static_assert(offsetof(FGeometryScriptSimpleMeshBuffers, Triangles) == 0x0000B0, "Member 'FGeometryScriptSimpleMeshBuffers::Triangles' has a wrong offset!");
//static_assert(offsetof(FGeometryScriptSimpleMeshBuffers, TriGroupIDs) == 0x0000C0, "Member 'FGeometryScriptSimpleMeshBuffers::TriGroupIDs' has a wrong offset!");

// ScriptStruct GeometryScriptingCore.GeometryScriptMeshBooleanOptions
// 0x0008 (0x0008 - 0x0000)
struct FGeometryScriptMeshBooleanOptions final
{
public:
	bool                                          bFillHoles;                                        // 0x0000(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bSimplifyOutput;                                   // 0x0001(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2[0x2];                                        // 0x0002(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         SimplifyPlanarTolerance;                           // 0x0004(0x0004)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
//static_assert(alignof(FGeometryScriptMeshBooleanOptions) == 0x000004, "Wrong alignment on FGeometryScriptMeshBooleanOptions");
//static_assert(sizeof(FGeometryScriptMeshBooleanOptions) == 0x000008, "Wrong size on FGeometryScriptMeshBooleanOptions");
//static_assert(offsetof(FGeometryScriptMeshBooleanOptions, bFillHoles) == 0x000000, "Member 'FGeometryScriptMeshBooleanOptions::bFillHoles' has a wrong offset!");
//static_assert(offsetof(FGeometryScriptMeshBooleanOptions, bSimplifyOutput) == 0x000001, "Member 'FGeometryScriptMeshBooleanOptions::bSimplifyOutput' has a wrong offset!");
//static_assert(offsetof(FGeometryScriptMeshBooleanOptions, SimplifyPlanarTolerance) == 0x000004, "Member 'FGeometryScriptMeshBooleanOptions::SimplifyPlanarTolerance' has a wrong offset!");

// ScriptStruct GeometryScriptingCore.GeometryScriptMeshSelfUnionOptions
// 0x000C (0x000C - 0x0000)
struct FGeometryScriptMeshSelfUnionOptions final
{
public:
	bool                                          bFillHoles;                                        // 0x0000(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bTrimFlaps;                                        // 0x0001(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bSimplifyOutput;                                   // 0x0002(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_3[0x1];                                        // 0x0003(0x0001)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         SimplifyPlanarTolerance;                           // 0x0004(0x0004)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         WindingThreshold;                                  // 0x0008(0x0004)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
//static_assert(alignof(FGeometryScriptMeshSelfUnionOptions) == 0x000004, "Wrong alignment on FGeometryScriptMeshSelfUnionOptions");
//static_assert(sizeof(FGeometryScriptMeshSelfUnionOptions) == 0x00000C, "Wrong size on FGeometryScriptMeshSelfUnionOptions");
//static_assert(offsetof(FGeometryScriptMeshSelfUnionOptions, bFillHoles) == 0x000000, "Member 'FGeometryScriptMeshSelfUnionOptions::bFillHoles' has a wrong offset!");
//static_assert(offsetof(FGeometryScriptMeshSelfUnionOptions, bTrimFlaps) == 0x000001, "Member 'FGeometryScriptMeshSelfUnionOptions::bTrimFlaps' has a wrong offset!");
//static_assert(offsetof(FGeometryScriptMeshSelfUnionOptions, bSimplifyOutput) == 0x000002, "Member 'FGeometryScriptMeshSelfUnionOptions::bSimplifyOutput' has a wrong offset!");
//static_assert(offsetof(FGeometryScriptMeshSelfUnionOptions, SimplifyPlanarTolerance) == 0x000004, "Member 'FGeometryScriptMeshSelfUnionOptions::SimplifyPlanarTolerance' has a wrong offset!");
//static_assert(offsetof(FGeometryScriptMeshSelfUnionOptions, WindingThreshold) == 0x000008, "Member 'FGeometryScriptMeshSelfUnionOptions::WindingThreshold' has a wrong offset!");

// ScriptStruct GeometryScriptingCore.GeometryScriptMeshPlaneCutOptions
// 0x0008 (0x0008 - 0x0000)
struct FGeometryScriptMeshPlaneCutOptions final
{
public:
	bool                                          bFillHoles;                                        // 0x0000(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bFillSpans;                                        // 0x0001(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bFlipCutSide;                                      // 0x0002(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_3[0x1];                                        // 0x0003(0x0001)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         UVWorldDimension;                                  // 0x0004(0x0004)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
//static_assert(alignof(FGeometryScriptMeshPlaneCutOptions) == 0x000004, "Wrong alignment on FGeometryScriptMeshPlaneCutOptions");
//static_assert(sizeof(FGeometryScriptMeshPlaneCutOptions) == 0x000008, "Wrong size on FGeometryScriptMeshPlaneCutOptions");
//static_assert(offsetof(FGeometryScriptMeshPlaneCutOptions, bFillHoles) == 0x000000, "Member 'FGeometryScriptMeshPlaneCutOptions::bFillHoles' has a wrong offset!");
//static_assert(offsetof(FGeometryScriptMeshPlaneCutOptions, bFillSpans) == 0x000001, "Member 'FGeometryScriptMeshPlaneCutOptions::bFillSpans' has a wrong offset!");
//static_assert(offsetof(FGeometryScriptMeshPlaneCutOptions, bFlipCutSide) == 0x000002, "Member 'FGeometryScriptMeshPlaneCutOptions::bFlipCutSide' has a wrong offset!");
//static_assert(offsetof(FGeometryScriptMeshPlaneCutOptions, UVWorldDimension) == 0x000004, "Member 'FGeometryScriptMeshPlaneCutOptions::UVWorldDimension' has a wrong offset!");

// ScriptStruct GeometryScriptingCore.GeometryScriptMeshPlaneSliceOptions
// 0x000C (0x000C - 0x0000)
struct FGeometryScriptMeshPlaneSliceOptions final
{
public:
	bool                                          bFillHoles;                                        // 0x0000(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bFillSpans;                                        // 0x0001(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2[0x2];                                        // 0x0002(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         GapWidth;                                          // 0x0004(0x0004)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         UVWorldDimension;                                  // 0x0008(0x0004)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
//static_assert(alignof(FGeometryScriptMeshPlaneSliceOptions) == 0x000004, "Wrong alignment on FGeometryScriptMeshPlaneSliceOptions");
//static_assert(sizeof(FGeometryScriptMeshPlaneSliceOptions) == 0x00000C, "Wrong size on FGeometryScriptMeshPlaneSliceOptions");
//static_assert(offsetof(FGeometryScriptMeshPlaneSliceOptions, bFillHoles) == 0x000000, "Member 'FGeometryScriptMeshPlaneSliceOptions::bFillHoles' has a wrong offset!");
//static_assert(offsetof(FGeometryScriptMeshPlaneSliceOptions, bFillSpans) == 0x000001, "Member 'FGeometryScriptMeshPlaneSliceOptions::bFillSpans' has a wrong offset!");
//static_assert(offsetof(FGeometryScriptMeshPlaneSliceOptions, GapWidth) == 0x000004, "Member 'FGeometryScriptMeshPlaneSliceOptions::GapWidth' has a wrong offset!");
//static_assert(offsetof(FGeometryScriptMeshPlaneSliceOptions, UVWorldDimension) == 0x000008, "Member 'FGeometryScriptMeshPlaneSliceOptions::UVWorldDimension' has a wrong offset!");

// ScriptStruct GeometryScriptingCore.GeometryScriptMeshMirrorOptions
// 0x0003 (0x0003 - 0x0000)
struct FGeometryScriptMeshMirrorOptions final
{
public:
	bool                                          bApplyPlaneCut;                                    // 0x0000(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bFlipCutSide;                                      // 0x0001(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bWeldAlongPlane;                                   // 0x0002(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
//static_assert(alignof(FGeometryScriptMeshMirrorOptions) == 0x000001, "Wrong alignment on FGeometryScriptMeshMirrorOptions");
//static_assert(sizeof(FGeometryScriptMeshMirrorOptions) == 0x000003, "Wrong size on FGeometryScriptMeshMirrorOptions");
//static_assert(offsetof(FGeometryScriptMeshMirrorOptions, bApplyPlaneCut) == 0x000000, "Member 'FGeometryScriptMeshMirrorOptions::bApplyPlaneCut' has a wrong offset!");
//static_assert(offsetof(FGeometryScriptMeshMirrorOptions, bFlipCutSide) == 0x000001, "Member 'FGeometryScriptMeshMirrorOptions::bFlipCutSide' has a wrong offset!");
//static_assert(offsetof(FGeometryScriptMeshMirrorOptions, bWeldAlongPlane) == 0x000002, "Member 'FGeometryScriptMeshMirrorOptions::bWeldAlongPlane' has a wrong offset!");

// ScriptStruct GeometryScriptingCore.GeometryScriptIsSameMeshOptions
// 0x000C (0x000C - 0x0000)
struct FGeometryScriptIsSameMeshOptions final
{
public:
	bool                                          bCheckConnectivity;                                // 0x0000(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bCheckEdgeIDs;                                     // 0x0001(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bCheckNormals;                                     // 0x0002(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bCheckColors;                                      // 0x0003(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bCheckUVs;                                         // 0x0004(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bCheckGroups;                                      // 0x0005(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bCheckAttributes;                                  // 0x0006(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_7[0x1];                                        // 0x0007(0x0001)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         Epsilon;                                           // 0x0008(0x0004)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
//static_assert(alignof(FGeometryScriptIsSameMeshOptions) == 0x000004, "Wrong alignment on FGeometryScriptIsSameMeshOptions");
//static_assert(sizeof(FGeometryScriptIsSameMeshOptions) == 0x00000C, "Wrong size on FGeometryScriptIsSameMeshOptions");
//static_assert(offsetof(FGeometryScriptIsSameMeshOptions, bCheckConnectivity) == 0x000000, "Member 'FGeometryScriptIsSameMeshOptions::bCheckConnectivity' has a wrong offset!");
//static_assert(offsetof(FGeometryScriptIsSameMeshOptions, bCheckEdgeIDs) == 0x000001, "Member 'FGeometryScriptIsSameMeshOptions::bCheckEdgeIDs' has a wrong offset!");
//static_assert(offsetof(FGeometryScriptIsSameMeshOptions, bCheckNormals) == 0x000002, "Member 'FGeometryScriptIsSameMeshOptions::bCheckNormals' has a wrong offset!");
//static_assert(offsetof(FGeometryScriptIsSameMeshOptions, bCheckColors) == 0x000003, "Member 'FGeometryScriptIsSameMeshOptions::bCheckColors' has a wrong offset!");
//static_assert(offsetof(FGeometryScriptIsSameMeshOptions, bCheckUVs) == 0x000004, "Member 'FGeometryScriptIsSameMeshOptions::bCheckUVs' has a wrong offset!");
//static_assert(offsetof(FGeometryScriptIsSameMeshOptions, bCheckGroups) == 0x000005, "Member 'FGeometryScriptIsSameMeshOptions::bCheckGroups' has a wrong offset!");
//static_assert(offsetof(FGeometryScriptIsSameMeshOptions, bCheckAttributes) == 0x000006, "Member 'FGeometryScriptIsSameMeshOptions::bCheckAttributes' has a wrong offset!");
//static_assert(offsetof(FGeometryScriptIsSameMeshOptions, Epsilon) == 0x000008, "Member 'FGeometryScriptIsSameMeshOptions::Epsilon' has a wrong offset!");

// ScriptStruct GeometryScriptingCore.GeometryScriptMeasureMeshDistanceOptions
// 0x0001 (0x0001 - 0x0000)
struct FGeometryScriptMeasureMeshDistanceOptions final
{
public:
	bool                                          bSymmetric;                                        // 0x0000(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
//static_assert(alignof(FGeometryScriptMeasureMeshDistanceOptions) == 0x000001, "Wrong alignment on FGeometryScriptMeasureMeshDistanceOptions");
//static_assert(sizeof(FGeometryScriptMeasureMeshDistanceOptions) == 0x000001, "Wrong size on FGeometryScriptMeasureMeshDistanceOptions");
//static_assert(offsetof(FGeometryScriptMeasureMeshDistanceOptions, bSymmetric) == 0x000000, "Member 'FGeometryScriptMeasureMeshDistanceOptions::bSymmetric' has a wrong offset!");

// ScriptStruct GeometryScriptingCore.GeometryScriptBendWarpOptions
// 0x000C (0x000C - 0x0000)
struct FGeometryScriptBendWarpOptions final
{
public:
	bool                                          bSymmetricExtents;                                 // 0x0000(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x3];                                        // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         LowerExtent;                                       // 0x0004(0x0004)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bBidirectional;                                    // 0x0008(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x3];                                        // 0x0009(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
//static_assert(alignof(FGeometryScriptBendWarpOptions) == 0x000004, "Wrong alignment on FGeometryScriptBendWarpOptions");
//static_assert(sizeof(FGeometryScriptBendWarpOptions) == 0x00000C, "Wrong size on FGeometryScriptBendWarpOptions");
//static_assert(offsetof(FGeometryScriptBendWarpOptions, bSymmetricExtents) == 0x000000, "Member 'FGeometryScriptBendWarpOptions::bSymmetricExtents' has a wrong offset!");
//static_assert(offsetof(FGeometryScriptBendWarpOptions, LowerExtent) == 0x000004, "Member 'FGeometryScriptBendWarpOptions::LowerExtent' has a wrong offset!");
//static_assert(offsetof(FGeometryScriptBendWarpOptions, bBidirectional) == 0x000008, "Member 'FGeometryScriptBendWarpOptions::bBidirectional' has a wrong offset!");

// ScriptStruct GeometryScriptingCore.GeometryScriptTwistWarpOptions
// 0x000C (0x000C - 0x0000)
struct FGeometryScriptTwistWarpOptions final
{
public:
	bool                                          bSymmetricExtents;                                 // 0x0000(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x3];                                        // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         LowerExtent;                                       // 0x0004(0x0004)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bBidirectional;                                    // 0x0008(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x3];                                        // 0x0009(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
//static_assert(alignof(FGeometryScriptTwistWarpOptions) == 0x000004, "Wrong alignment on FGeometryScriptTwistWarpOptions");
//static_assert(sizeof(FGeometryScriptTwistWarpOptions) == 0x00000C, "Wrong size on FGeometryScriptTwistWarpOptions");
//static_assert(offsetof(FGeometryScriptTwistWarpOptions, bSymmetricExtents) == 0x000000, "Member 'FGeometryScriptTwistWarpOptions::bSymmetricExtents' has a wrong offset!");
//static_assert(offsetof(FGeometryScriptTwistWarpOptions, LowerExtent) == 0x000004, "Member 'FGeometryScriptTwistWarpOptions::LowerExtent' has a wrong offset!");
//static_assert(offsetof(FGeometryScriptTwistWarpOptions, bBidirectional) == 0x000008, "Member 'FGeometryScriptTwistWarpOptions::bBidirectional' has a wrong offset!");

// ScriptStruct GeometryScriptingCore.GeometryScriptFlareWarpOptions
// 0x000C (0x000C - 0x0000)
struct FGeometryScriptFlareWarpOptions final
{
public:
	bool                                          bSymmetricExtents;                                 // 0x0000(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x3];                                        // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         LowerExtent;                                       // 0x0004(0x0004)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EGeometryScriptFlareType                      FlareType;                                         // 0x0008(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x3];                                        // 0x0009(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
//static_assert(alignof(FGeometryScriptFlareWarpOptions) == 0x000004, "Wrong alignment on FGeometryScriptFlareWarpOptions");
//static_assert(sizeof(FGeometryScriptFlareWarpOptions) == 0x00000C, "Wrong size on FGeometryScriptFlareWarpOptions");
//static_assert(offsetof(FGeometryScriptFlareWarpOptions, bSymmetricExtents) == 0x000000, "Member 'FGeometryScriptFlareWarpOptions::bSymmetricExtents' has a wrong offset!");
//static_assert(offsetof(FGeometryScriptFlareWarpOptions, LowerExtent) == 0x000004, "Member 'FGeometryScriptFlareWarpOptions::LowerExtent' has a wrong offset!");
//static_assert(offsetof(FGeometryScriptFlareWarpOptions, FlareType) == 0x000008, "Member 'FGeometryScriptFlareWarpOptions::FlareType' has a wrong offset!");

// ScriptStruct GeometryScriptingCore.GeometryScriptPerlinNoiseLayerOptions
// 0x0028 (0x0028 - 0x0000)
struct FGeometryScriptPerlinNoiseLayerOptions final
{
public:
	float                                         Magnitude;                                         // 0x0000(0x0004)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Frequency;                                         // 0x0004(0x0004)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                FrequencyShift;                                    // 0x0008(0x0018)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         RandomSeed;                                        // 0x0020(0x0004)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_24[0x4];                                       // 0x0024(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
//static_assert(alignof(FGeometryScriptPerlinNoiseLayerOptions) == 0x000008, "Wrong alignment on FGeometryScriptPerlinNoiseLayerOptions");
//static_assert(sizeof(FGeometryScriptPerlinNoiseLayerOptions) == 0x000028, "Wrong size on FGeometryScriptPerlinNoiseLayerOptions");
//static_assert(offsetof(FGeometryScriptPerlinNoiseLayerOptions, Magnitude) == 0x000000, "Member 'FGeometryScriptPerlinNoiseLayerOptions::Magnitude' has a wrong offset!");
//static_assert(offsetof(FGeometryScriptPerlinNoiseLayerOptions, Frequency) == 0x000004, "Member 'FGeometryScriptPerlinNoiseLayerOptions::Frequency' has a wrong offset!");
//static_assert(offsetof(FGeometryScriptPerlinNoiseLayerOptions, FrequencyShift) == 0x000008, "Member 'FGeometryScriptPerlinNoiseLayerOptions::FrequencyShift' has a wrong offset!");
//static_assert(offsetof(FGeometryScriptPerlinNoiseLayerOptions, RandomSeed) == 0x000020, "Member 'FGeometryScriptPerlinNoiseLayerOptions::RandomSeed' has a wrong offset!");

// ScriptStruct GeometryScriptingCore.GeometryScriptMathWarpOptions
// 0x000C (0x000C - 0x0000)
struct FGeometryScriptMathWarpOptions final
{
public:
	float                                         Magnitude;                                         // 0x0000(0x0004)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Frequency;                                         // 0x0004(0x0004)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         FrequencyShift;                                    // 0x0008(0x0004)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
//static_assert(alignof(FGeometryScriptMathWarpOptions) == 0x000004, "Wrong alignment on FGeometryScriptMathWarpOptions");
//static_assert(sizeof(FGeometryScriptMathWarpOptions) == 0x00000C, "Wrong size on FGeometryScriptMathWarpOptions");
//static_assert(offsetof(FGeometryScriptMathWarpOptions, Magnitude) == 0x000000, "Member 'FGeometryScriptMathWarpOptions::Magnitude' has a wrong offset!");
//static_assert(offsetof(FGeometryScriptMathWarpOptions, Frequency) == 0x000004, "Member 'FGeometryScriptMathWarpOptions::Frequency' has a wrong offset!");
//static_assert(offsetof(FGeometryScriptMathWarpOptions, FrequencyShift) == 0x000008, "Member 'FGeometryScriptMathWarpOptions::FrequencyShift' has a wrong offset!");

// ScriptStruct GeometryScriptingCore.GeometryScriptPerlinNoiseOptions
// 0x0030 (0x0030 - 0x0000)
struct FGeometryScriptPerlinNoiseOptions final
{
public:
	struct FGeometryScriptPerlinNoiseLayerOptions BaseLayer;                                         // 0x0000(0x0028)(BlueprintVisible, NoDestructor, NativeAccessSpecifierPublic)
	bool                                          bApplyAlongNormal;                                 // 0x0028(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_29[0x7];                                       // 0x0029(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
//static_assert(alignof(FGeometryScriptPerlinNoiseOptions) == 0x000008, "Wrong alignment on FGeometryScriptPerlinNoiseOptions");
//static_assert(sizeof(FGeometryScriptPerlinNoiseOptions) == 0x000030, "Wrong size on FGeometryScriptPerlinNoiseOptions");
//static_assert(offsetof(FGeometryScriptPerlinNoiseOptions, BaseLayer) == 0x000000, "Member 'FGeometryScriptPerlinNoiseOptions::BaseLayer' has a wrong offset!");
//static_assert(offsetof(FGeometryScriptPerlinNoiseOptions, bApplyAlongNormal) == 0x000028, "Member 'FGeometryScriptPerlinNoiseOptions::bApplyAlongNormal' has a wrong offset!");

// ScriptStruct GeometryScriptingCore.GeometryScriptIterativeMeshSmoothingOptions
// 0x0008 (0x0008 - 0x0000)
struct FGeometryScriptIterativeMeshSmoothingOptions final
{
public:
	int32                                         NumIterations;                                     // 0x0000(0x0004)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Alpha;                                             // 0x0004(0x0004)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
//static_assert(alignof(FGeometryScriptIterativeMeshSmoothingOptions) == 0x000004, "Wrong alignment on FGeometryScriptIterativeMeshSmoothingOptions");
//static_assert(sizeof(FGeometryScriptIterativeMeshSmoothingOptions) == 0x000008, "Wrong size on FGeometryScriptIterativeMeshSmoothingOptions");
//static_assert(offsetof(FGeometryScriptIterativeMeshSmoothingOptions, NumIterations) == 0x000000, "Member 'FGeometryScriptIterativeMeshSmoothingOptions::NumIterations' has a wrong offset!");
//static_assert(offsetof(FGeometryScriptIterativeMeshSmoothingOptions, Alpha) == 0x000004, "Member 'FGeometryScriptIterativeMeshSmoothingOptions::Alpha' has a wrong offset!");

// ScriptStruct GeometryScriptingCore.GeometryScriptDisplaceFromTextureOptions
// 0x0030 (0x0030 - 0x0000)
struct FGeometryScriptDisplaceFromTextureOptions final
{
public:
	float                                         Magnitude;                                         // 0x0000(0x0004)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_4[0x4];                                        // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector2D                              UVScale;                                           // 0x0008(0x0010)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector2D                              UVOffset;                                          // 0x0018(0x0010)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Center;                                            // 0x0028(0x0004)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         ImageChannel;                                      // 0x002C(0x0004)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
//static_assert(alignof(FGeometryScriptDisplaceFromTextureOptions) == 0x000008, "Wrong alignment on FGeometryScriptDisplaceFromTextureOptions");
//static_assert(sizeof(FGeometryScriptDisplaceFromTextureOptions) == 0x000030, "Wrong size on FGeometryScriptDisplaceFromTextureOptions");
//static_assert(offsetof(FGeometryScriptDisplaceFromTextureOptions, Magnitude) == 0x000000, "Member 'FGeometryScriptDisplaceFromTextureOptions::Magnitude' has a wrong offset!");
//static_assert(offsetof(FGeometryScriptDisplaceFromTextureOptions, UVScale) == 0x000008, "Member 'FGeometryScriptDisplaceFromTextureOptions::UVScale' has a wrong offset!");
//static_assert(offsetof(FGeometryScriptDisplaceFromTextureOptions, UVOffset) == 0x000018, "Member 'FGeometryScriptDisplaceFromTextureOptions::UVOffset' has a wrong offset!");
//static_assert(offsetof(FGeometryScriptDisplaceFromTextureOptions, Center) == 0x000028, "Member 'FGeometryScriptDisplaceFromTextureOptions::Center' has a wrong offset!");
//static_assert(offsetof(FGeometryScriptDisplaceFromTextureOptions, ImageChannel) == 0x00002C, "Member 'FGeometryScriptDisplaceFromTextureOptions::ImageChannel' has a wrong offset!");

// ScriptStruct GeometryScriptingCore.GeometryScriptMeshOffsetOptions
// 0x0018 (0x0018 - 0x0000)
struct FGeometryScriptMeshOffsetOptions final
{
public:
	float                                         OffsetDistance;                                    // 0x0000(0x0004)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bFixedBoundary;                                    // 0x0004(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_5[0x3];                                        // 0x0005(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         SolveSteps;                                        // 0x0008(0x0004)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         SmoothAlpha;                                       // 0x000C(0x0004)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bReprojectDuringSmoothing;                         // 0x0010(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_11[0x3];                                       // 0x0011(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         BoundaryAlpha;                                     // 0x0014(0x0004)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
//static_assert(alignof(FGeometryScriptMeshOffsetOptions) == 0x000004, "Wrong alignment on FGeometryScriptMeshOffsetOptions");
//static_assert(sizeof(FGeometryScriptMeshOffsetOptions) == 0x000018, "Wrong size on FGeometryScriptMeshOffsetOptions");
//static_assert(offsetof(FGeometryScriptMeshOffsetOptions, OffsetDistance) == 0x000000, "Member 'FGeometryScriptMeshOffsetOptions::OffsetDistance' has a wrong offset!");
//static_assert(offsetof(FGeometryScriptMeshOffsetOptions, bFixedBoundary) == 0x000004, "Member 'FGeometryScriptMeshOffsetOptions::bFixedBoundary' has a wrong offset!");
//static_assert(offsetof(FGeometryScriptMeshOffsetOptions, SolveSteps) == 0x000008, "Member 'FGeometryScriptMeshOffsetOptions::SolveSteps' has a wrong offset!");
//static_assert(offsetof(FGeometryScriptMeshOffsetOptions, SmoothAlpha) == 0x00000C, "Member 'FGeometryScriptMeshOffsetOptions::SmoothAlpha' has a wrong offset!");
//static_assert(offsetof(FGeometryScriptMeshOffsetOptions, bReprojectDuringSmoothing) == 0x000010, "Member 'FGeometryScriptMeshOffsetOptions::bReprojectDuringSmoothing' has a wrong offset!");
//static_assert(offsetof(FGeometryScriptMeshOffsetOptions, BoundaryAlpha) == 0x000014, "Member 'FGeometryScriptMeshOffsetOptions::BoundaryAlpha' has a wrong offset!");

// ScriptStruct GeometryScriptingCore.GeometryScriptMeshExtrudeOptions
// 0x0028 (0x0028 - 0x0000)
struct FGeometryScriptMeshExtrudeOptions final
{
public:
	float                                         ExtrudeDistance;                                   // 0x0000(0x0004)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_4[0x4];                                        // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                ExtrudeDirection;                                  // 0x0008(0x0018)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         UVScale;                                           // 0x0020(0x0004)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bSolidsToShells;                                   // 0x0024(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_25[0x3];                                       // 0x0025(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
//static_assert(alignof(FGeometryScriptMeshExtrudeOptions) == 0x000008, "Wrong alignment on FGeometryScriptMeshExtrudeOptions");
//static_assert(sizeof(FGeometryScriptMeshExtrudeOptions) == 0x000028, "Wrong size on FGeometryScriptMeshExtrudeOptions");
//static_assert(offsetof(FGeometryScriptMeshExtrudeOptions, ExtrudeDistance) == 0x000000, "Member 'FGeometryScriptMeshExtrudeOptions::ExtrudeDistance' has a wrong offset!");
//static_assert(offsetof(FGeometryScriptMeshExtrudeOptions, ExtrudeDirection) == 0x000008, "Member 'FGeometryScriptMeshExtrudeOptions::ExtrudeDirection' has a wrong offset!");
//static_assert(offsetof(FGeometryScriptMeshExtrudeOptions, UVScale) == 0x000020, "Member 'FGeometryScriptMeshExtrudeOptions::UVScale' has a wrong offset!");
//static_assert(offsetof(FGeometryScriptMeshExtrudeOptions, bSolidsToShells) == 0x000024, "Member 'FGeometryScriptMeshExtrudeOptions::bSolidsToShells' has a wrong offset!");

// ScriptStruct GeometryScriptingCore.GeometryScriptMeshBevelOptions
// 0x00C0 (0x00C0 - 0x0000)
struct FGeometryScriptMeshBevelOptions final
{
public:
	float                                         BevelDistance;                                     // 0x0000(0x0004)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bInferMaterialID;                                  // 0x0004(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_5[0x3];                                        // 0x0005(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         SetMaterialID;                                     // 0x0008(0x0004)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bApplyFilterBox;                                   // 0x000C(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_D[0x3];                                        // 0x000D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FBox                                   FilterBox;                                         // 0x0010(0x0038)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, NativeAccessSpecifierPublic)
	uint8                                         Pad_48[0x8];                                       // 0x0048(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	struct FTransform                             FilterBoxTransform;                                // 0x0050(0x0060)(BlueprintVisible, IsPlainOldData, NoDestructor, AdvancedDisplay, NativeAccessSpecifierPublic)
	bool                                          bFullyContained;                                   // 0x00B0(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_B1[0xF];                                       // 0x00B1(0x000F)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
//static_assert(alignof(FGeometryScriptMeshBevelOptions) == 0x000010, "Wrong alignment on FGeometryScriptMeshBevelOptions");
//static_assert(sizeof(FGeometryScriptMeshBevelOptions) == 0x0000C0, "Wrong size on FGeometryScriptMeshBevelOptions");
//static_assert(offsetof(FGeometryScriptMeshBevelOptions, BevelDistance) == 0x000000, "Member 'FGeometryScriptMeshBevelOptions::BevelDistance' has a wrong offset!");
//static_assert(offsetof(FGeometryScriptMeshBevelOptions, bInferMaterialID) == 0x000004, "Member 'FGeometryScriptMeshBevelOptions::bInferMaterialID' has a wrong offset!");
//static_assert(offsetof(FGeometryScriptMeshBevelOptions, SetMaterialID) == 0x000008, "Member 'FGeometryScriptMeshBevelOptions::SetMaterialID' has a wrong offset!");
//static_assert(offsetof(FGeometryScriptMeshBevelOptions, bApplyFilterBox) == 0x00000C, "Member 'FGeometryScriptMeshBevelOptions::bApplyFilterBox' has a wrong offset!");
//static_assert(offsetof(FGeometryScriptMeshBevelOptions, FilterBox) == 0x000010, "Member 'FGeometryScriptMeshBevelOptions::FilterBox' has a wrong offset!");
//static_assert(offsetof(FGeometryScriptMeshBevelOptions, FilterBoxTransform) == 0x000050, "Member 'FGeometryScriptMeshBevelOptions::FilterBoxTransform' has a wrong offset!");
//static_assert(offsetof(FGeometryScriptMeshBevelOptions, bFullyContained) == 0x0000B0, "Member 'FGeometryScriptMeshBevelOptions::bFullyContained' has a wrong offset!");

// ScriptStruct GeometryScriptingCore.GeometryScriptCalculateNormalsOptions
// 0x0002 (0x0002 - 0x0000)
struct FGeometryScriptCalculateNormalsOptions final
{
public:
	bool                                          bAngleWeighted;                                    // 0x0000(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bAreaWeighted;                                     // 0x0001(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
//static_assert(alignof(FGeometryScriptCalculateNormalsOptions) == 0x000001, "Wrong alignment on FGeometryScriptCalculateNormalsOptions");
//static_assert(sizeof(FGeometryScriptCalculateNormalsOptions) == 0x000002, "Wrong size on FGeometryScriptCalculateNormalsOptions");
//static_assert(offsetof(FGeometryScriptCalculateNormalsOptions, bAngleWeighted) == 0x000000, "Member 'FGeometryScriptCalculateNormalsOptions::bAngleWeighted' has a wrong offset!");
//static_assert(offsetof(FGeometryScriptCalculateNormalsOptions, bAreaWeighted) == 0x000001, "Member 'FGeometryScriptCalculateNormalsOptions::bAreaWeighted' has a wrong offset!");

// ScriptStruct GeometryScriptingCore.GeometryScriptSplitNormalsOptions
// 0x0014 (0x0014 - 0x0000)
struct FGeometryScriptSplitNormalsOptions final
{
public:
	bool                                          bSplitByOpeningAngle;                              // 0x0000(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x3];                                        // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         OpeningAngleDeg;                                   // 0x0004(0x0004)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bSplitByFaceGroup;                                 // 0x0008(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x3];                                        // 0x0009(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FGeometryScriptGroupLayer              GroupLayer;                                        // 0x000C(0x0008)(BlueprintVisible, NoDestructor, NativeAccessSpecifierPublic)
};
//static_assert(alignof(FGeometryScriptSplitNormalsOptions) == 0x000004, "Wrong alignment on FGeometryScriptSplitNormalsOptions");
//static_assert(sizeof(FGeometryScriptSplitNormalsOptions) == 0x000014, "Wrong size on FGeometryScriptSplitNormalsOptions");
//static_assert(offsetof(FGeometryScriptSplitNormalsOptions, bSplitByOpeningAngle) == 0x000000, "Member 'FGeometryScriptSplitNormalsOptions::bSplitByOpeningAngle' has a wrong offset!");
//static_assert(offsetof(FGeometryScriptSplitNormalsOptions, OpeningAngleDeg) == 0x000004, "Member 'FGeometryScriptSplitNormalsOptions::OpeningAngleDeg' has a wrong offset!");
//static_assert(offsetof(FGeometryScriptSplitNormalsOptions, bSplitByFaceGroup) == 0x000008, "Member 'FGeometryScriptSplitNormalsOptions::bSplitByFaceGroup' has a wrong offset!");
//static_assert(offsetof(FGeometryScriptSplitNormalsOptions, GroupLayer) == 0x00000C, "Member 'FGeometryScriptSplitNormalsOptions::GroupLayer' has a wrong offset!");

// ScriptStruct GeometryScriptingCore.GeometryScriptTangentsOptions
// 0x0008 (0x0008 - 0x0000)
struct FGeometryScriptTangentsOptions final
{
public:
	EGeometryScriptTangentTypes                   Type;                                              // 0x0000(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x3];                                        // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         UVLayer;                                           // 0x0004(0x0004)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
//static_assert(alignof(FGeometryScriptTangentsOptions) == 0x000004, "Wrong alignment on FGeometryScriptTangentsOptions");
//static_assert(sizeof(FGeometryScriptTangentsOptions) == 0x000008, "Wrong size on FGeometryScriptTangentsOptions");
//static_assert(offsetof(FGeometryScriptTangentsOptions, Type) == 0x000000, "Member 'FGeometryScriptTangentsOptions::Type' has a wrong offset!");
//static_assert(offsetof(FGeometryScriptTangentsOptions, UVLayer) == 0x000004, "Member 'FGeometryScriptTangentsOptions::UVLayer' has a wrong offset!");

// ScriptStruct GeometryScriptingCore.GeometryScriptPrimitiveOptions
// 0x0003 (0x0003 - 0x0000)
struct FGeometryScriptPrimitiveOptions final
{
public:
	EGeometryScriptPrimitivePolygroupMode         PolygroupMode;                                     // 0x0000(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bFlipOrientation;                                  // 0x0001(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EGeometryScriptPrimitiveUVMode                UVMode;                                            // 0x0002(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
//static_assert(alignof(FGeometryScriptPrimitiveOptions) == 0x000001, "Wrong alignment on FGeometryScriptPrimitiveOptions");
//static_assert(sizeof(FGeometryScriptPrimitiveOptions) == 0x000003, "Wrong size on FGeometryScriptPrimitiveOptions");
//static_assert(offsetof(FGeometryScriptPrimitiveOptions, PolygroupMode) == 0x000000, "Member 'FGeometryScriptPrimitiveOptions::PolygroupMode' has a wrong offset!");
//static_assert(offsetof(FGeometryScriptPrimitiveOptions, bFlipOrientation) == 0x000001, "Member 'FGeometryScriptPrimitiveOptions::bFlipOrientation' has a wrong offset!");
//static_assert(offsetof(FGeometryScriptPrimitiveOptions, UVMode) == 0x000002, "Member 'FGeometryScriptPrimitiveOptions::UVMode' has a wrong offset!");

// ScriptStruct GeometryScriptingCore.GeometryScriptRevolveOptions
// 0x0014 (0x0014 - 0x0000)
struct FGeometryScriptRevolveOptions final
{
public:
	float                                         RevolveDegrees;                                    // 0x0000(0x0004)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         DegreeOffset;                                      // 0x0004(0x0004)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bReverseDirection;                                 // 0x0008(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bHardNormals;                                      // 0x0009(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_A[0x2];                                        // 0x000A(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         HardNormalAngle;                                   // 0x000C(0x0004)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bProfileAtMidpoint;                                // 0x0010(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bFillPartialRevolveEndcaps;                        // 0x0011(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_12[0x2];                                       // 0x0012(0x0002)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
//static_assert(alignof(FGeometryScriptRevolveOptions) == 0x000004, "Wrong alignment on FGeometryScriptRevolveOptions");
//static_assert(sizeof(FGeometryScriptRevolveOptions) == 0x000014, "Wrong size on FGeometryScriptRevolveOptions");
//static_assert(offsetof(FGeometryScriptRevolveOptions, RevolveDegrees) == 0x000000, "Member 'FGeometryScriptRevolveOptions::RevolveDegrees' has a wrong offset!");
//static_assert(offsetof(FGeometryScriptRevolveOptions, DegreeOffset) == 0x000004, "Member 'FGeometryScriptRevolveOptions::DegreeOffset' has a wrong offset!");
//static_assert(offsetof(FGeometryScriptRevolveOptions, bReverseDirection) == 0x000008, "Member 'FGeometryScriptRevolveOptions::bReverseDirection' has a wrong offset!");
//static_assert(offsetof(FGeometryScriptRevolveOptions, bHardNormals) == 0x000009, "Member 'FGeometryScriptRevolveOptions::bHardNormals' has a wrong offset!");
//static_assert(offsetof(FGeometryScriptRevolveOptions, HardNormalAngle) == 0x00000C, "Member 'FGeometryScriptRevolveOptions::HardNormalAngle' has a wrong offset!");
//static_assert(offsetof(FGeometryScriptRevolveOptions, bProfileAtMidpoint) == 0x000010, "Member 'FGeometryScriptRevolveOptions::bProfileAtMidpoint' has a wrong offset!");
//static_assert(offsetof(FGeometryScriptRevolveOptions, bFillPartialRevolveEndcaps) == 0x000011, "Member 'FGeometryScriptRevolveOptions::bFillPartialRevolveEndcaps' has a wrong offset!");

// ScriptStruct GeometryScriptingCore.GeometryScriptWeldEdgesOptions
// 0x0008 (0x0008 - 0x0000)
struct FGeometryScriptWeldEdgesOptions final
{
public:
	float                                         Tolerance;                                         // 0x0000(0x0004)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bOnlyUniquePairs;                                  // 0x0004(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_5[0x3];                                        // 0x0005(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
//static_assert(alignof(FGeometryScriptWeldEdgesOptions) == 0x000004, "Wrong alignment on FGeometryScriptWeldEdgesOptions");
//static_assert(sizeof(FGeometryScriptWeldEdgesOptions) == 0x000008, "Wrong size on FGeometryScriptWeldEdgesOptions");
//static_assert(offsetof(FGeometryScriptWeldEdgesOptions, Tolerance) == 0x000000, "Member 'FGeometryScriptWeldEdgesOptions::Tolerance' has a wrong offset!");
//static_assert(offsetof(FGeometryScriptWeldEdgesOptions, bOnlyUniquePairs) == 0x000004, "Member 'FGeometryScriptWeldEdgesOptions::bOnlyUniquePairs' has a wrong offset!");

// ScriptStruct GeometryScriptingCore.GeometryScriptFillHolesOptions
// 0x0002 (0x0002 - 0x0000)
struct FGeometryScriptFillHolesOptions final
{
public:
	EGeometryScriptFillHolesMethod                FillMethod;                                        // 0x0000(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x1];                                        // 0x0001(0x0001)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
//static_assert(alignof(FGeometryScriptFillHolesOptions) == 0x000001, "Wrong alignment on FGeometryScriptFillHolesOptions");
//static_assert(sizeof(FGeometryScriptFillHolesOptions) == 0x000002, "Wrong size on FGeometryScriptFillHolesOptions");
//static_assert(offsetof(FGeometryScriptFillHolesOptions, FillMethod) == 0x000000, "Member 'FGeometryScriptFillHolesOptions::FillMethod' has a wrong offset!");

// ScriptStruct GeometryScriptingCore.GeometryScriptRemoveSmallComponentOptions
// 0x000C (0x000C - 0x0000)
struct FGeometryScriptRemoveSmallComponentOptions final
{
public:
	float                                         MinVolume;                                         // 0x0000(0x0004)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         MinArea;                                           // 0x0004(0x0004)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         MinTriangleCount;                                  // 0x0008(0x0004)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
//static_assert(alignof(FGeometryScriptRemoveSmallComponentOptions) == 0x000004, "Wrong alignment on FGeometryScriptRemoveSmallComponentOptions");
//static_assert(sizeof(FGeometryScriptRemoveSmallComponentOptions) == 0x00000C, "Wrong size on FGeometryScriptRemoveSmallComponentOptions");
//static_assert(offsetof(FGeometryScriptRemoveSmallComponentOptions, MinVolume) == 0x000000, "Member 'FGeometryScriptRemoveSmallComponentOptions::MinVolume' has a wrong offset!");
//static_assert(offsetof(FGeometryScriptRemoveSmallComponentOptions, MinArea) == 0x000004, "Member 'FGeometryScriptRemoveSmallComponentOptions::MinArea' has a wrong offset!");
//static_assert(offsetof(FGeometryScriptRemoveSmallComponentOptions, MinTriangleCount) == 0x000008, "Member 'FGeometryScriptRemoveSmallComponentOptions::MinTriangleCount' has a wrong offset!");

// ScriptStruct GeometryScriptingCore.GeometryScriptRemoveHiddenTrianglesOptions
// 0x001C (0x001C - 0x0000)
struct FGeometryScriptRemoveHiddenTrianglesOptions final
{
public:
	EGeometryScriptRemoveHiddenTrianglesMethod    Method;                                            // 0x0000(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x3];                                        // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         SamplesPerTriangle;                                // 0x0004(0x0004)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         ShrinkSelection;                                   // 0x0008(0x0004)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         WindingIsoValue;                                   // 0x000C(0x0004)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         RaysPerSample;                                     // 0x0010(0x0004)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         NormalOffset;                                      // 0x0014(0x0004)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bCompactResult;                                    // 0x0018(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_19[0x3];                                       // 0x0019(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
//static_assert(alignof(FGeometryScriptRemoveHiddenTrianglesOptions) == 0x000004, "Wrong alignment on FGeometryScriptRemoveHiddenTrianglesOptions");
//static_assert(sizeof(FGeometryScriptRemoveHiddenTrianglesOptions) == 0x00001C, "Wrong size on FGeometryScriptRemoveHiddenTrianglesOptions");
//static_assert(offsetof(FGeometryScriptRemoveHiddenTrianglesOptions, Method) == 0x000000, "Member 'FGeometryScriptRemoveHiddenTrianglesOptions::Method' has a wrong offset!");
//static_assert(offsetof(FGeometryScriptRemoveHiddenTrianglesOptions, SamplesPerTriangle) == 0x000004, "Member 'FGeometryScriptRemoveHiddenTrianglesOptions::SamplesPerTriangle' has a wrong offset!");
//static_assert(offsetof(FGeometryScriptRemoveHiddenTrianglesOptions, ShrinkSelection) == 0x000008, "Member 'FGeometryScriptRemoveHiddenTrianglesOptions::ShrinkSelection' has a wrong offset!");
//static_assert(offsetof(FGeometryScriptRemoveHiddenTrianglesOptions, WindingIsoValue) == 0x00000C, "Member 'FGeometryScriptRemoveHiddenTrianglesOptions::WindingIsoValue' has a wrong offset!");
//static_assert(offsetof(FGeometryScriptRemoveHiddenTrianglesOptions, RaysPerSample) == 0x000010, "Member 'FGeometryScriptRemoveHiddenTrianglesOptions::RaysPerSample' has a wrong offset!");
//static_assert(offsetof(FGeometryScriptRemoveHiddenTrianglesOptions, NormalOffset) == 0x000014, "Member 'FGeometryScriptRemoveHiddenTrianglesOptions::NormalOffset' has a wrong offset!");
//static_assert(offsetof(FGeometryScriptRemoveHiddenTrianglesOptions, bCompactResult) == 0x000018, "Member 'FGeometryScriptRemoveHiddenTrianglesOptions::bCompactResult' has a wrong offset!");

// ScriptStruct GeometryScriptingCore.GeometryScriptPlanarSimplifyOptions
// 0x0004 (0x0004 - 0x0000)
struct FGeometryScriptPlanarSimplifyOptions final
{
public:
	float                                         AngleThreshold;                                    // 0x0000(0x0004)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
//static_assert(alignof(FGeometryScriptPlanarSimplifyOptions) == 0x000004, "Wrong alignment on FGeometryScriptPlanarSimplifyOptions");
//static_assert(sizeof(FGeometryScriptPlanarSimplifyOptions) == 0x000004, "Wrong size on FGeometryScriptPlanarSimplifyOptions");
//static_assert(offsetof(FGeometryScriptPlanarSimplifyOptions, AngleThreshold) == 0x000000, "Member 'FGeometryScriptPlanarSimplifyOptions::AngleThreshold' has a wrong offset!");

// ScriptStruct GeometryScriptingCore.GeometryScriptPolygroupSimplifyOptions
// 0x0004 (0x0004 - 0x0000)
struct FGeometryScriptPolygroupSimplifyOptions final
{
public:
	float                                         AngleThreshold;                                    // 0x0000(0x0004)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
//static_assert(alignof(FGeometryScriptPolygroupSimplifyOptions) == 0x000004, "Wrong alignment on FGeometryScriptPolygroupSimplifyOptions");
//static_assert(sizeof(FGeometryScriptPolygroupSimplifyOptions) == 0x000004, "Wrong size on FGeometryScriptPolygroupSimplifyOptions");
//static_assert(offsetof(FGeometryScriptPolygroupSimplifyOptions, AngleThreshold) == 0x000000, "Member 'FGeometryScriptPolygroupSimplifyOptions::AngleThreshold' has a wrong offset!");

// ScriptStruct GeometryScriptingCore.GeometryScriptSimplifyMeshOptions
// 0x0006 (0x0006 - 0x0000)
struct FGeometryScriptSimplifyMeshOptions final
{
public:
	EGeometryScriptRemoveMeshSimplificationType   Method;                                            // 0x0000(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bAllowSeamCollapse;                                // 0x0001(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bAllowSeamSmoothing;                               // 0x0002(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bAllowSeamSplits;                                  // 0x0003(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bPreserveVertexPositions;                          // 0x0004(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bRetainQuadricMemory;                              // 0x0005(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
//static_assert(alignof(FGeometryScriptSimplifyMeshOptions) == 0x000001, "Wrong alignment on FGeometryScriptSimplifyMeshOptions");
//static_assert(sizeof(FGeometryScriptSimplifyMeshOptions) == 0x000006, "Wrong size on FGeometryScriptSimplifyMeshOptions");
//static_assert(offsetof(FGeometryScriptSimplifyMeshOptions, Method) == 0x000000, "Member 'FGeometryScriptSimplifyMeshOptions::Method' has a wrong offset!");
//static_assert(offsetof(FGeometryScriptSimplifyMeshOptions, bAllowSeamCollapse) == 0x000001, "Member 'FGeometryScriptSimplifyMeshOptions::bAllowSeamCollapse' has a wrong offset!");
//static_assert(offsetof(FGeometryScriptSimplifyMeshOptions, bAllowSeamSmoothing) == 0x000002, "Member 'FGeometryScriptSimplifyMeshOptions::bAllowSeamSmoothing' has a wrong offset!");
//static_assert(offsetof(FGeometryScriptSimplifyMeshOptions, bAllowSeamSplits) == 0x000003, "Member 'FGeometryScriptSimplifyMeshOptions::bAllowSeamSplits' has a wrong offset!");
//static_assert(offsetof(FGeometryScriptSimplifyMeshOptions, bPreserveVertexPositions) == 0x000004, "Member 'FGeometryScriptSimplifyMeshOptions::bPreserveVertexPositions' has a wrong offset!");
//static_assert(offsetof(FGeometryScriptSimplifyMeshOptions, bRetainQuadricMemory) == 0x000005, "Member 'FGeometryScriptSimplifyMeshOptions::bRetainQuadricMemory' has a wrong offset!");

// ScriptStruct GeometryScriptingCore.GeometryScriptSpatialQueryOptions
// 0x000C (0x000C - 0x0000)
struct FGeometryScriptSpatialQueryOptions final
{
public:
	float                                         MaxDistance;                                       // 0x0000(0x0004)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bAllowUnsafeModifiedQueries;                       // 0x0004(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_5[0x3];                                        // 0x0005(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         WindingIsoThreshold;                               // 0x0008(0x0004)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
//static_assert(alignof(FGeometryScriptSpatialQueryOptions) == 0x000004, "Wrong alignment on FGeometryScriptSpatialQueryOptions");
//static_assert(sizeof(FGeometryScriptSpatialQueryOptions) == 0x00000C, "Wrong size on FGeometryScriptSpatialQueryOptions");
//static_assert(offsetof(FGeometryScriptSpatialQueryOptions, MaxDistance) == 0x000000, "Member 'FGeometryScriptSpatialQueryOptions::MaxDistance' has a wrong offset!");
//static_assert(offsetof(FGeometryScriptSpatialQueryOptions, bAllowUnsafeModifiedQueries) == 0x000004, "Member 'FGeometryScriptSpatialQueryOptions::bAllowUnsafeModifiedQueries' has a wrong offset!");
//static_assert(offsetof(FGeometryScriptSpatialQueryOptions, WindingIsoThreshold) == 0x000008, "Member 'FGeometryScriptSpatialQueryOptions::WindingIsoThreshold' has a wrong offset!");

// ScriptStruct GeometryScriptingCore.GeometryScriptRayHitResult
// 0x0040 (0x0040 - 0x0000)
struct FGeometryScriptRayHitResult final
{
public:
	bool                                          bHit;                                              // 0x0000(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x3];                                        // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         RayParameter;                                      // 0x0004(0x0004)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         HitTriangleID;                                     // 0x0008(0x0004)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                HitPosition;                                       // 0x0010(0x0018)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                HitBaryCoords;                                     // 0x0028(0x0018)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
//static_assert(alignof(FGeometryScriptRayHitResult) == 0x000008, "Wrong alignment on FGeometryScriptRayHitResult");
//static_assert(sizeof(FGeometryScriptRayHitResult) == 0x000040, "Wrong size on FGeometryScriptRayHitResult");
//static_assert(offsetof(FGeometryScriptRayHitResult, bHit) == 0x000000, "Member 'FGeometryScriptRayHitResult::bHit' has a wrong offset!");
//static_assert(offsetof(FGeometryScriptRayHitResult, RayParameter) == 0x000004, "Member 'FGeometryScriptRayHitResult::RayParameter' has a wrong offset!");
//static_assert(offsetof(FGeometryScriptRayHitResult, HitTriangleID) == 0x000008, "Member 'FGeometryScriptRayHitResult::HitTriangleID' has a wrong offset!");
//static_assert(offsetof(FGeometryScriptRayHitResult, HitPosition) == 0x000010, "Member 'FGeometryScriptRayHitResult::HitPosition' has a wrong offset!");
//static_assert(offsetof(FGeometryScriptRayHitResult, HitBaryCoords) == 0x000028, "Member 'FGeometryScriptRayHitResult::HitBaryCoords' has a wrong offset!");

// ScriptStruct GeometryScriptingCore.GeometryScriptPNTessellateOptions
// 0x0001 (0x0001 - 0x0000)
struct FGeometryScriptPNTessellateOptions final
{
public:
	bool                                          bRecomputeNormals;                                 // 0x0000(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
//static_assert(alignof(FGeometryScriptPNTessellateOptions) == 0x000001, "Wrong alignment on FGeometryScriptPNTessellateOptions");
//static_assert(sizeof(FGeometryScriptPNTessellateOptions) == 0x000001, "Wrong size on FGeometryScriptPNTessellateOptions");
//static_assert(offsetof(FGeometryScriptPNTessellateOptions, bRecomputeNormals) == 0x000000, "Member 'FGeometryScriptPNTessellateOptions::bRecomputeNormals' has a wrong offset!");

// ScriptStruct GeometryScriptingCore.GeometryScriptRepackUVsOptions
// 0x0008 (0x0008 - 0x0000)
struct FGeometryScriptRepackUVsOptions final
{
public:
	int32                                         TargetImageWidth;                                  // 0x0000(0x0004)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bOptimizeIslandRotation;                           // 0x0004(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_5[0x3];                                        // 0x0005(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
//static_assert(alignof(FGeometryScriptRepackUVsOptions) == 0x000004, "Wrong alignment on FGeometryScriptRepackUVsOptions");
//static_assert(sizeof(FGeometryScriptRepackUVsOptions) == 0x000008, "Wrong size on FGeometryScriptRepackUVsOptions");
//static_assert(offsetof(FGeometryScriptRepackUVsOptions, TargetImageWidth) == 0x000000, "Member 'FGeometryScriptRepackUVsOptions::TargetImageWidth' has a wrong offset!");
//static_assert(offsetof(FGeometryScriptRepackUVsOptions, bOptimizeIslandRotation) == 0x000004, "Member 'FGeometryScriptRepackUVsOptions::bOptimizeIslandRotation' has a wrong offset!");

// ScriptStruct GeometryScriptingCore.GeometryScriptExpMapUVOptions
// 0x0008 (0x0008 - 0x0000)
struct FGeometryScriptExpMapUVOptions final
{
public:
	int32                                         NormalSmoothingRounds;                             // 0x0000(0x0004)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         NormalSmoothingAlpha;                              // 0x0004(0x0004)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
//static_assert(alignof(FGeometryScriptExpMapUVOptions) == 0x000004, "Wrong alignment on FGeometryScriptExpMapUVOptions");
//static_assert(sizeof(FGeometryScriptExpMapUVOptions) == 0x000008, "Wrong size on FGeometryScriptExpMapUVOptions");
//static_assert(offsetof(FGeometryScriptExpMapUVOptions, NormalSmoothingRounds) == 0x000000, "Member 'FGeometryScriptExpMapUVOptions::NormalSmoothingRounds' has a wrong offset!");
//static_assert(offsetof(FGeometryScriptExpMapUVOptions, NormalSmoothingAlpha) == 0x000004, "Member 'FGeometryScriptExpMapUVOptions::NormalSmoothingAlpha' has a wrong offset!");

// ScriptStruct GeometryScriptingCore.GeometryScriptRecomputeUVsOptions
// 0x0018 (0x0018 - 0x0000)
struct FGeometryScriptRecomputeUVsOptions final
{
public:
	EGeometryScriptUVFlattenMethod                Method;                                            // 0x0000(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EGeometryScriptUVIslandSource                 IslandSource;                                      // 0x0001(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2[0x2];                                        // 0x0002(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	struct FGeometryScriptExpMapUVOptions         ExpMapOptions;                                     // 0x0004(0x0008)(BlueprintVisible, NoDestructor, NativeAccessSpecifierPublic)
	struct FGeometryScriptGroupLayer              GroupLayer;                                        // 0x000C(0x0008)(BlueprintVisible, NoDestructor, NativeAccessSpecifierPublic)
	bool                                          bAutoAlignIslandsWithAxes;                         // 0x0014(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_15[0x3];                                       // 0x0015(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
//static_assert(alignof(FGeometryScriptRecomputeUVsOptions) == 0x000004, "Wrong alignment on FGeometryScriptRecomputeUVsOptions");
//static_assert(sizeof(FGeometryScriptRecomputeUVsOptions) == 0x000018, "Wrong size on FGeometryScriptRecomputeUVsOptions");
//static_assert(offsetof(FGeometryScriptRecomputeUVsOptions, Method) == 0x000000, "Member 'FGeometryScriptRecomputeUVsOptions::Method' has a wrong offset!");
//static_assert(offsetof(FGeometryScriptRecomputeUVsOptions, IslandSource) == 0x000001, "Member 'FGeometryScriptRecomputeUVsOptions::IslandSource' has a wrong offset!");
//static_assert(offsetof(FGeometryScriptRecomputeUVsOptions, ExpMapOptions) == 0x000004, "Member 'FGeometryScriptRecomputeUVsOptions::ExpMapOptions' has a wrong offset!");
//static_assert(offsetof(FGeometryScriptRecomputeUVsOptions, GroupLayer) == 0x00000C, "Member 'FGeometryScriptRecomputeUVsOptions::GroupLayer' has a wrong offset!");
//static_assert(offsetof(FGeometryScriptRecomputeUVsOptions, bAutoAlignIslandsWithAxes) == 0x000014, "Member 'FGeometryScriptRecomputeUVsOptions::bAutoAlignIslandsWithAxes' has a wrong offset!");

// ScriptStruct GeometryScriptingCore.GeometryScriptPatchBuilderOptions
// 0x0034 (0x0034 - 0x0000)
struct FGeometryScriptPatchBuilderOptions final
{
public:
	int32                                         InitialPatchCount;                                 // 0x0000(0x0004)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         MinPatchSize;                                      // 0x0004(0x0004)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         PatchCurvatureAlignmentWeight;                     // 0x0008(0x0004)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         PatchMergingMetricThresh;                          // 0x000C(0x0004)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         PatchMergingAngleThresh;                           // 0x0010(0x0004)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FGeometryScriptExpMapUVOptions         ExpMapOptions;                                     // 0x0014(0x0008)(BlueprintVisible, NoDestructor, NativeAccessSpecifierPublic)
	bool                                          bRespectInputGroups;                               // 0x001C(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1D[0x3];                                       // 0x001D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FGeometryScriptGroupLayer              GroupLayer;                                        // 0x0020(0x0008)(BlueprintVisible, NoDestructor, NativeAccessSpecifierPublic)
	bool                                          bAutoPack;                                         // 0x0028(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_29[0x3];                                       // 0x0029(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FGeometryScriptRepackUVsOptions        PackingOptions;                                    // 0x002C(0x0008)(BlueprintVisible, NoDestructor, NativeAccessSpecifierPublic)
};
//static_assert(alignof(FGeometryScriptPatchBuilderOptions) == 0x000004, "Wrong alignment on FGeometryScriptPatchBuilderOptions");
//static_assert(sizeof(FGeometryScriptPatchBuilderOptions) == 0x000034, "Wrong size on FGeometryScriptPatchBuilderOptions");
//static_assert(offsetof(FGeometryScriptPatchBuilderOptions, InitialPatchCount) == 0x000000, "Member 'FGeometryScriptPatchBuilderOptions::InitialPatchCount' has a wrong offset!");
//static_assert(offsetof(FGeometryScriptPatchBuilderOptions, MinPatchSize) == 0x000004, "Member 'FGeometryScriptPatchBuilderOptions::MinPatchSize' has a wrong offset!");
//static_assert(offsetof(FGeometryScriptPatchBuilderOptions, PatchCurvatureAlignmentWeight) == 0x000008, "Member 'FGeometryScriptPatchBuilderOptions::PatchCurvatureAlignmentWeight' has a wrong offset!");
//static_assert(offsetof(FGeometryScriptPatchBuilderOptions, PatchMergingMetricThresh) == 0x00000C, "Member 'FGeometryScriptPatchBuilderOptions::PatchMergingMetricThresh' has a wrong offset!");
//static_assert(offsetof(FGeometryScriptPatchBuilderOptions, PatchMergingAngleThresh) == 0x000010, "Member 'FGeometryScriptPatchBuilderOptions::PatchMergingAngleThresh' has a wrong offset!");
//static_assert(offsetof(FGeometryScriptPatchBuilderOptions, ExpMapOptions) == 0x000014, "Member 'FGeometryScriptPatchBuilderOptions::ExpMapOptions' has a wrong offset!");
//static_assert(offsetof(FGeometryScriptPatchBuilderOptions, bRespectInputGroups) == 0x00001C, "Member 'FGeometryScriptPatchBuilderOptions::bRespectInputGroups' has a wrong offset!");
//static_assert(offsetof(FGeometryScriptPatchBuilderOptions, GroupLayer) == 0x000020, "Member 'FGeometryScriptPatchBuilderOptions::GroupLayer' has a wrong offset!");
//static_assert(offsetof(FGeometryScriptPatchBuilderOptions, bAutoPack) == 0x000028, "Member 'FGeometryScriptPatchBuilderOptions::bAutoPack' has a wrong offset!");
//static_assert(offsetof(FGeometryScriptPatchBuilderOptions, PackingOptions) == 0x00002C, "Member 'FGeometryScriptPatchBuilderOptions::PackingOptions' has a wrong offset!");

// ScriptStruct GeometryScriptingCore.GeometryScriptXAtlasOptions
// 0x0004 (0x0004 - 0x0000)
struct FGeometryScriptXAtlasOptions final
{
public:
	int32                                         MaxIterations;                                     // 0x0000(0x0004)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
//static_assert(alignof(FGeometryScriptXAtlasOptions) == 0x000004, "Wrong alignment on FGeometryScriptXAtlasOptions");
//static_assert(sizeof(FGeometryScriptXAtlasOptions) == 0x000004, "Wrong size on FGeometryScriptXAtlasOptions");
//static_assert(offsetof(FGeometryScriptXAtlasOptions, MaxIterations) == 0x000000, "Member 'FGeometryScriptXAtlasOptions::MaxIterations' has a wrong offset!");

// ScriptStruct GeometryScriptingCore.GeometryScript3DGridParameters
// 0x000C (0x000C - 0x0000)
struct FGeometryScript3DGridParameters final
{
public:
	EGeometryScriptGridSizingMethod               SizeMethod;                                        // 0x0000(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x3];                                        // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         GridCellSize;                                      // 0x0004(0x0004)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         GridResolution;                                    // 0x0008(0x0004)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
//static_assert(alignof(FGeometryScript3DGridParameters) == 0x000004, "Wrong alignment on FGeometryScript3DGridParameters");
//static_assert(sizeof(FGeometryScript3DGridParameters) == 0x00000C, "Wrong size on FGeometryScript3DGridParameters");
//static_assert(offsetof(FGeometryScript3DGridParameters, SizeMethod) == 0x000000, "Member 'FGeometryScript3DGridParameters::SizeMethod' has a wrong offset!");
//static_assert(offsetof(FGeometryScript3DGridParameters, GridCellSize) == 0x000004, "Member 'FGeometryScript3DGridParameters::GridCellSize' has a wrong offset!");
//static_assert(offsetof(FGeometryScript3DGridParameters, GridResolution) == 0x000008, "Member 'FGeometryScript3DGridParameters::GridResolution' has a wrong offset!");

// ScriptStruct GeometryScriptingCore.GeometryScriptSolidifyOptions
// 0x001C (0x001C - 0x0000)
struct FGeometryScriptSolidifyOptions final
{
public:
	struct FGeometryScript3DGridParameters        GridParameters;                                    // 0x0000(0x000C)(BlueprintVisible, NoDestructor, NativeAccessSpecifierPublic)
	float                                         WindingThreshold;                                  // 0x000C(0x0004)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bSolidAtBoundaries;                                // 0x0010(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_11[0x3];                                       // 0x0011(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         ExtendBounds;                                      // 0x0014(0x0004)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         SurfaceSearchSteps;                                // 0x0018(0x0004)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
//static_assert(alignof(FGeometryScriptSolidifyOptions) == 0x000004, "Wrong alignment on FGeometryScriptSolidifyOptions");
//static_assert(sizeof(FGeometryScriptSolidifyOptions) == 0x00001C, "Wrong size on FGeometryScriptSolidifyOptions");
//static_assert(offsetof(FGeometryScriptSolidifyOptions, GridParameters) == 0x000000, "Member 'FGeometryScriptSolidifyOptions::GridParameters' has a wrong offset!");
//static_assert(offsetof(FGeometryScriptSolidifyOptions, WindingThreshold) == 0x00000C, "Member 'FGeometryScriptSolidifyOptions::WindingThreshold' has a wrong offset!");
//static_assert(offsetof(FGeometryScriptSolidifyOptions, bSolidAtBoundaries) == 0x000010, "Member 'FGeometryScriptSolidifyOptions::bSolidAtBoundaries' has a wrong offset!");
//static_assert(offsetof(FGeometryScriptSolidifyOptions, ExtendBounds) == 0x000014, "Member 'FGeometryScriptSolidifyOptions::ExtendBounds' has a wrong offset!");
//static_assert(offsetof(FGeometryScriptSolidifyOptions, SurfaceSearchSteps) == 0x000018, "Member 'FGeometryScriptSolidifyOptions::SurfaceSearchSteps' has a wrong offset!");

// ScriptStruct GeometryScriptingCore.GeometryScriptMorphologyOptions
// 0x0024 (0x0024 - 0x0000)
struct FGeometryScriptMorphologyOptions final
{
public:
	struct FGeometryScript3DGridParameters        SDFGridParameters;                                 // 0x0000(0x000C)(BlueprintVisible, NoDestructor, NativeAccessSpecifierPublic)
	bool                                          bUseSeparateMeshGrid;                              // 0x000C(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_D[0x3];                                        // 0x000D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FGeometryScript3DGridParameters        MeshGridParameters;                                // 0x0010(0x000C)(BlueprintVisible, NoDestructor, NativeAccessSpecifierPublic)
	EGeometryScriptMorphologicalOpType            Operation;                                         // 0x001C(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1D[0x3];                                       // 0x001D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         Distance;                                          // 0x0020(0x0004)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
//static_assert(alignof(FGeometryScriptMorphologyOptions) == 0x000004, "Wrong alignment on FGeometryScriptMorphologyOptions");
//static_assert(sizeof(FGeometryScriptMorphologyOptions) == 0x000024, "Wrong size on FGeometryScriptMorphologyOptions");
//static_assert(offsetof(FGeometryScriptMorphologyOptions, SDFGridParameters) == 0x000000, "Member 'FGeometryScriptMorphologyOptions::SDFGridParameters' has a wrong offset!");
//static_assert(offsetof(FGeometryScriptMorphologyOptions, bUseSeparateMeshGrid) == 0x00000C, "Member 'FGeometryScriptMorphologyOptions::bUseSeparateMeshGrid' has a wrong offset!");
//static_assert(offsetof(FGeometryScriptMorphologyOptions, MeshGridParameters) == 0x000010, "Member 'FGeometryScriptMorphologyOptions::MeshGridParameters' has a wrong offset!");
//static_assert(offsetof(FGeometryScriptMorphologyOptions, Operation) == 0x00001C, "Member 'FGeometryScriptMorphologyOptions::Operation' has a wrong offset!");
//static_assert(offsetof(FGeometryScriptMorphologyOptions, Distance) == 0x000020, "Member 'FGeometryScriptMorphologyOptions::Distance' has a wrong offset!");

// ScriptStruct GeometryScriptingCore.GeometryScriptCopyMeshFromComponentOptions
// 0x000C (0x000C - 0x0000)
struct FGeometryScriptCopyMeshFromComponentOptions final
{
public:
	bool                                          bWantNormals;                                      // 0x0000(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bWantTangents;                                     // 0x0001(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2[0x2];                                        // 0x0002(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	struct FGeometryScriptMeshReadLOD             RequestedLOD;                                      // 0x0004(0x0008)(BlueprintVisible, NoDestructor, NativeAccessSpecifierPublic)
};
//static_assert(alignof(FGeometryScriptCopyMeshFromComponentOptions) == 0x000004, "Wrong alignment on FGeometryScriptCopyMeshFromComponentOptions");
//static_assert(sizeof(FGeometryScriptCopyMeshFromComponentOptions) == 0x00000C, "Wrong size on FGeometryScriptCopyMeshFromComponentOptions");
//static_assert(offsetof(FGeometryScriptCopyMeshFromComponentOptions, bWantNormals) == 0x000000, "Member 'FGeometryScriptCopyMeshFromComponentOptions::bWantNormals' has a wrong offset!");
//static_assert(offsetof(FGeometryScriptCopyMeshFromComponentOptions, bWantTangents) == 0x000001, "Member 'FGeometryScriptCopyMeshFromComponentOptions::bWantTangents' has a wrong offset!");
//static_assert(offsetof(FGeometryScriptCopyMeshFromComponentOptions, RequestedLOD) == 0x000004, "Member 'FGeometryScriptCopyMeshFromComponentOptions::RequestedLOD' has a wrong offset!");

}

