#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: CustomLightSystem

#include "Basic.hpp"

#include "CoreUObject_structs.hpp"
#include "Engine_structs.hpp"


namespace SDK
{

// Enum CustomLightSystem.EWaterReflectionMode
// NumValues: 0x0004
enum class EWaterReflectionMode : uint8
{
	None                                     = 0,
	Lumen                                    = 1,
	ReflectionSphere                         = 3,
	EWaterReflectionMode_MAX                 = 4,
};

// ScriptStruct CustomLightSystem.CLSDirectionalLightData
// 0x01A0 (0x01A0 - 0x0000)
struct FCLSDirectionalLightData final
{
public:
	class FString                                 Name;                                              // 0x0000(0x0010)(Edit, ZeroConstructor, EditConst, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bValid;                                            // 0x0010(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_11[0x3];                                       // 0x0011(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         Intensity;                                         // 0x0014(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FColor                                 LightColor;                                        // 0x0018(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         bAffectsWorld : 1;                                 // 0x001C(0x0001)(BitIndex: 0x00, PropSize: 0x0001 (NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         CastShadows : 1;                                   // 0x001C(0x0001)(BitIndex: 0x01, PropSize: 0x0001 (NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         CastStaticShadows : 1;                             // 0x001C(0x0001)(BitIndex: 0x02, PropSize: 0x0001 (NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         CastDynamicShadows : 1;                            // 0x001C(0x0001)(BitIndex: 0x03, PropSize: 0x0001 (NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         bAffectTranslucentLighting : 1;                    // 0x001C(0x0001)(BitIndex: 0x04, PropSize: 0x0001 (NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         bTransmission : 1;                                 // 0x001C(0x0001)(BitIndex: 0x05, PropSize: 0x0001 (NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         bCastVolumetricShadow : 1;                         // 0x001C(0x0001)(BitIndex: 0x06, PropSize: 0x0001 (NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         bCastDeepShadow : 1;                               // 0x001C(0x0001)(BitIndex: 0x07, PropSize: 0x0001 (NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         Pad_1D[0x3];                                       // 0x001D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	ECastRayTracedShadow                          CastRaytracedShadow;                               // 0x0020(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_21[0x3];                                       // 0x0021(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	uint8                                         bAffectReflection : 1;                             // 0x0024(0x0001)(BitIndex: 0x00, PropSize: 0x0001 (NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         bAffectGlobalIllumination : 1;                     // 0x0024(0x0001)(BitIndex: 0x01, PropSize: 0x0001 (NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         Pad_25[0x3];                                       // 0x0025(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         DeepShadowLayerDistribution;                       // 0x0028(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         IndirectLightingIntensity;                         // 0x002C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         VolumetricScatteringIntensity;                     // 0x0030(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         SamplesPerPixel;                                   // 0x0034(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Temperature;                                       // 0x0038(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         MaxDrawDistance;                                   // 0x003C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         MaxDistanceFadeRange;                              // 0x0040(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         bUseTemperature : 1;                               // 0x0044(0x0001)(BitIndex: 0x00, PropSize: 0x0001 (NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         Pad_45[0x3];                                       // 0x0045(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         SpecularScale;                                     // 0x0048(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         ShadowResolutionScale;                             // 0x004C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         ShadowBias;                                        // 0x0050(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         ShadowSlopeBias;                                   // 0x0054(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         ShadowSharpen;                                     // 0x0058(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         ContactShadowLength;                               // 0x005C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         ContactShadowLengthInWS : 1;                       // 0x0060(0x0001)(BitIndex: 0x00, PropSize: 0x0001 (NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         CastTranslucentShadows : 1;                        // 0x0060(0x0001)(BitIndex: 0x01, PropSize: 0x0001 (NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         bCastShadowsFromCinematicObjectsOnly : 1;          // 0x0060(0x0001)(BitIndex: 0x02, PropSize: 0x0001 (NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         bAffectDynamicIndirectLighting : 1;                // 0x0060(0x0001)(BitIndex: 0x03, PropSize: 0x0001 (NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         bForceCachedShadowsForMovablePrimitives : 1;       // 0x0060(0x0001)(BitIndex: 0x04, PropSize: 0x0001 (NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         Pad_61[0x3];                                       // 0x0061(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FLightingChannels                      LightingChannels;                                  // 0x0064(0x0001)(NoDestructor, NativeAccessSpecifierPublic)
	uint8                                         Pad_65[0x3];                                       // 0x0065(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class UMaterialInterface*                     LightFunctionMaterial;                             // 0x0068(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                LightFunctionScale;                                // 0x0070(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UTextureLightProfile*                   IESTexture;                                        // 0x0088(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         bUseIESBrightness : 1;                             // 0x0090(0x0001)(BitIndex: 0x00, PropSize: 0x0001 (NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         Pad_91[0x3];                                       // 0x0091(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         IESBrightnessScale;                                // 0x0094(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         LightFunctionFadeDistance;                         // 0x0098(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         DisabledBrightness;                                // 0x009C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         bEnableLightShaftBloom : 1;                        // 0x00A0(0x0001)(BitIndex: 0x00, PropSize: 0x0001 (NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         Pad_A1[0x3];                                       // 0x00A1(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         BloomScale;                                        // 0x00A4(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         BloomThreshold;                                    // 0x00A8(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         BloomMaxBrightness;                                // 0x00AC(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FColor                                 BloomTint;                                         // 0x00B0(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bUseRayTracedDistanceFieldShadows;                 // 0x00B4(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_B5[0x3];                                       // 0x00B5(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         RayStartOffsetDepthScale;                          // 0x00B8(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         ShadowCascadeBiasDistribution;                     // 0x00BC(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         bEnableLightShaftOcclusion : 1;                    // 0x00C0(0x0001)(BitIndex: 0x00, PropSize: 0x0001 (NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         Pad_C1[0x3];                                       // 0x00C1(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         OcclusionMaskDarkness;                             // 0x00C4(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         OcclusionDepthRange;                               // 0x00C8(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_CC[0x4];                                       // 0x00CC(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                LightShaftOverrideDirection;                       // 0x00D0(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         DynamicShadowDistanceMovableLight;                 // 0x00E8(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         DynamicShadowDistanceStationaryLight;              // 0x00EC(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         DynamicShadowCascades;                             // 0x00F0(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         CascadeDistributionExponent;                       // 0x00F4(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         CascadeTransitionFraction;                         // 0x00F8(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         ShadowDistanceFadeoutFraction;                     // 0x00FC(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         bUseInsetShadowsForMovableObjects : 1;             // 0x0100(0x0001)(BitIndex: 0x00, PropSize: 0x0001 (NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         Pad_101[0x3];                                      // 0x0101(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         FarShadowCascadeCount;                             // 0x0104(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         FarShadowDistance;                                 // 0x0108(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         DistanceFieldShadowDistance;                       // 0x010C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         LightSourceAngle;                                  // 0x0110(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         LightSourceSoftAngle;                              // 0x0114(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         ShadowSourceAngleFactor;                           // 0x0118(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         TraceDistance;                                     // 0x011C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         bAtmosphereSunLight : 1;                           // 0x0120(0x0001)(BitIndex: 0x00, PropSize: 0x0001 (NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         Pad_121[0x3];                                      // 0x0121(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         AtmosphereSunLightIndex;                           // 0x0124(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FLinearColor                           AtmosphereSunDiskColorScale;                       // 0x0128(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         bPerPixelAtmosphereTransmittance : 1;              // 0x0138(0x0001)(BitIndex: 0x00, PropSize: 0x0001 (NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         bCastShadowsOnClouds : 1;                          // 0x0138(0x0001)(BitIndex: 0x01, PropSize: 0x0001 (NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         bCastShadowsOnAtmosphere : 1;                      // 0x0138(0x0001)(BitIndex: 0x02, PropSize: 0x0001 (NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         bCastCloudShadows : 1;                             // 0x0138(0x0001)(BitIndex: 0x03, PropSize: 0x0001 (NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         Pad_139[0x3];                                      // 0x0139(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         CloudShadowStrength;                               // 0x013C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         CloudShadowOnAtmosphereStrength;                   // 0x0140(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         CloudShadowOnSurfaceStrength;                      // 0x0144(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         CloudShadowDepthBias;                              // 0x0148(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         CloudShadowExtent;                                 // 0x014C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         CloudShadowMapResolutionScale;                     // 0x0150(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         CloudShadowRaySampleCountScale;                    // 0x0154(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FLinearColor                           CloudScatteredLuminanceScale;                      // 0x0158(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FLightmassDirectionalLightSettings     LightmassSettings;                                 // 0x0168(0x0010)(NoDestructor, NativeAccessSpecifierPublic)
	uint8                                         bCastModulatedShadows : 1;                         // 0x0178(0x0001)(BitIndex: 0x00, PropSize: 0x0001 (NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         Pad_179[0x3];                                      // 0x0179(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FColor                                 ModulatedShadowColor;                              // 0x017C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         ShadowAmount;                                      // 0x0180(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_184[0x4];                                      // 0x0184(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FRotator                               Rotation;                                          // 0x0188(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
};
//static_assert(alignof(FCLSDirectionalLightData) == 0x000008, "Wrong alignment on FCLSDirectionalLightData");
//static_assert(sizeof(FCLSDirectionalLightData) == 0x0001A0, "Wrong size on FCLSDirectionalLightData");
//static_assert(offsetof(FCLSDirectionalLightData, Name) == 0x000000, "Member 'FCLSDirectionalLightData::Name' has a wrong offset!");
//static_assert(offsetof(FCLSDirectionalLightData, bValid) == 0x000010, "Member 'FCLSDirectionalLightData::bValid' has a wrong offset!");
//static_assert(offsetof(FCLSDirectionalLightData, Intensity) == 0x000014, "Member 'FCLSDirectionalLightData::Intensity' has a wrong offset!");
//static_assert(offsetof(FCLSDirectionalLightData, LightColor) == 0x000018, "Member 'FCLSDirectionalLightData::LightColor' has a wrong offset!");
//static_assert(offsetof(FCLSDirectionalLightData, CastRaytracedShadow) == 0x000020, "Member 'FCLSDirectionalLightData::CastRaytracedShadow' has a wrong offset!");
//static_assert(offsetof(FCLSDirectionalLightData, DeepShadowLayerDistribution) == 0x000028, "Member 'FCLSDirectionalLightData::DeepShadowLayerDistribution' has a wrong offset!");
//static_assert(offsetof(FCLSDirectionalLightData, IndirectLightingIntensity) == 0x00002C, "Member 'FCLSDirectionalLightData::IndirectLightingIntensity' has a wrong offset!");
//static_assert(offsetof(FCLSDirectionalLightData, VolumetricScatteringIntensity) == 0x000030, "Member 'FCLSDirectionalLightData::VolumetricScatteringIntensity' has a wrong offset!");
//static_assert(offsetof(FCLSDirectionalLightData, SamplesPerPixel) == 0x000034, "Member 'FCLSDirectionalLightData::SamplesPerPixel' has a wrong offset!");
//static_assert(offsetof(FCLSDirectionalLightData, Temperature) == 0x000038, "Member 'FCLSDirectionalLightData::Temperature' has a wrong offset!");
//static_assert(offsetof(FCLSDirectionalLightData, MaxDrawDistance) == 0x00003C, "Member 'FCLSDirectionalLightData::MaxDrawDistance' has a wrong offset!");
//static_assert(offsetof(FCLSDirectionalLightData, MaxDistanceFadeRange) == 0x000040, "Member 'FCLSDirectionalLightData::MaxDistanceFadeRange' has a wrong offset!");
//static_assert(offsetof(FCLSDirectionalLightData, SpecularScale) == 0x000048, "Member 'FCLSDirectionalLightData::SpecularScale' has a wrong offset!");
//static_assert(offsetof(FCLSDirectionalLightData, ShadowResolutionScale) == 0x00004C, "Member 'FCLSDirectionalLightData::ShadowResolutionScale' has a wrong offset!");
//static_assert(offsetof(FCLSDirectionalLightData, ShadowBias) == 0x000050, "Member 'FCLSDirectionalLightData::ShadowBias' has a wrong offset!");
//static_assert(offsetof(FCLSDirectionalLightData, ShadowSlopeBias) == 0x000054, "Member 'FCLSDirectionalLightData::ShadowSlopeBias' has a wrong offset!");
//static_assert(offsetof(FCLSDirectionalLightData, ShadowSharpen) == 0x000058, "Member 'FCLSDirectionalLightData::ShadowSharpen' has a wrong offset!");
//static_assert(offsetof(FCLSDirectionalLightData, ContactShadowLength) == 0x00005C, "Member 'FCLSDirectionalLightData::ContactShadowLength' has a wrong offset!");
//static_assert(offsetof(FCLSDirectionalLightData, LightingChannels) == 0x000064, "Member 'FCLSDirectionalLightData::LightingChannels' has a wrong offset!");
//static_assert(offsetof(FCLSDirectionalLightData, LightFunctionMaterial) == 0x000068, "Member 'FCLSDirectionalLightData::LightFunctionMaterial' has a wrong offset!");
//static_assert(offsetof(FCLSDirectionalLightData, LightFunctionScale) == 0x000070, "Member 'FCLSDirectionalLightData::LightFunctionScale' has a wrong offset!");
//static_assert(offsetof(FCLSDirectionalLightData, IESTexture) == 0x000088, "Member 'FCLSDirectionalLightData::IESTexture' has a wrong offset!");
//static_assert(offsetof(FCLSDirectionalLightData, IESBrightnessScale) == 0x000094, "Member 'FCLSDirectionalLightData::IESBrightnessScale' has a wrong offset!");
//static_assert(offsetof(FCLSDirectionalLightData, LightFunctionFadeDistance) == 0x000098, "Member 'FCLSDirectionalLightData::LightFunctionFadeDistance' has a wrong offset!");
//static_assert(offsetof(FCLSDirectionalLightData, DisabledBrightness) == 0x00009C, "Member 'FCLSDirectionalLightData::DisabledBrightness' has a wrong offset!");
//static_assert(offsetof(FCLSDirectionalLightData, BloomScale) == 0x0000A4, "Member 'FCLSDirectionalLightData::BloomScale' has a wrong offset!");
//static_assert(offsetof(FCLSDirectionalLightData, BloomThreshold) == 0x0000A8, "Member 'FCLSDirectionalLightData::BloomThreshold' has a wrong offset!");
//static_assert(offsetof(FCLSDirectionalLightData, BloomMaxBrightness) == 0x0000AC, "Member 'FCLSDirectionalLightData::BloomMaxBrightness' has a wrong offset!");
//static_assert(offsetof(FCLSDirectionalLightData, BloomTint) == 0x0000B0, "Member 'FCLSDirectionalLightData::BloomTint' has a wrong offset!");
//static_assert(offsetof(FCLSDirectionalLightData, bUseRayTracedDistanceFieldShadows) == 0x0000B4, "Member 'FCLSDirectionalLightData::bUseRayTracedDistanceFieldShadows' has a wrong offset!");
//static_assert(offsetof(FCLSDirectionalLightData, RayStartOffsetDepthScale) == 0x0000B8, "Member 'FCLSDirectionalLightData::RayStartOffsetDepthScale' has a wrong offset!");
//static_assert(offsetof(FCLSDirectionalLightData, ShadowCascadeBiasDistribution) == 0x0000BC, "Member 'FCLSDirectionalLightData::ShadowCascadeBiasDistribution' has a wrong offset!");
//static_assert(offsetof(FCLSDirectionalLightData, OcclusionMaskDarkness) == 0x0000C4, "Member 'FCLSDirectionalLightData::OcclusionMaskDarkness' has a wrong offset!");
//static_assert(offsetof(FCLSDirectionalLightData, OcclusionDepthRange) == 0x0000C8, "Member 'FCLSDirectionalLightData::OcclusionDepthRange' has a wrong offset!");
//static_assert(offsetof(FCLSDirectionalLightData, LightShaftOverrideDirection) == 0x0000D0, "Member 'FCLSDirectionalLightData::LightShaftOverrideDirection' has a wrong offset!");
//static_assert(offsetof(FCLSDirectionalLightData, DynamicShadowDistanceMovableLight) == 0x0000E8, "Member 'FCLSDirectionalLightData::DynamicShadowDistanceMovableLight' has a wrong offset!");
//static_assert(offsetof(FCLSDirectionalLightData, DynamicShadowDistanceStationaryLight) == 0x0000EC, "Member 'FCLSDirectionalLightData::DynamicShadowDistanceStationaryLight' has a wrong offset!");
//static_assert(offsetof(FCLSDirectionalLightData, DynamicShadowCascades) == 0x0000F0, "Member 'FCLSDirectionalLightData::DynamicShadowCascades' has a wrong offset!");
//static_assert(offsetof(FCLSDirectionalLightData, CascadeDistributionExponent) == 0x0000F4, "Member 'FCLSDirectionalLightData::CascadeDistributionExponent' has a wrong offset!");
//static_assert(offsetof(FCLSDirectionalLightData, CascadeTransitionFraction) == 0x0000F8, "Member 'FCLSDirectionalLightData::CascadeTransitionFraction' has a wrong offset!");
//static_assert(offsetof(FCLSDirectionalLightData, ShadowDistanceFadeoutFraction) == 0x0000FC, "Member 'FCLSDirectionalLightData::ShadowDistanceFadeoutFraction' has a wrong offset!");
//static_assert(offsetof(FCLSDirectionalLightData, FarShadowCascadeCount) == 0x000104, "Member 'FCLSDirectionalLightData::FarShadowCascadeCount' has a wrong offset!");
//static_assert(offsetof(FCLSDirectionalLightData, FarShadowDistance) == 0x000108, "Member 'FCLSDirectionalLightData::FarShadowDistance' has a wrong offset!");
//static_assert(offsetof(FCLSDirectionalLightData, DistanceFieldShadowDistance) == 0x00010C, "Member 'FCLSDirectionalLightData::DistanceFieldShadowDistance' has a wrong offset!");
//static_assert(offsetof(FCLSDirectionalLightData, LightSourceAngle) == 0x000110, "Member 'FCLSDirectionalLightData::LightSourceAngle' has a wrong offset!");
//static_assert(offsetof(FCLSDirectionalLightData, LightSourceSoftAngle) == 0x000114, "Member 'FCLSDirectionalLightData::LightSourceSoftAngle' has a wrong offset!");
//static_assert(offsetof(FCLSDirectionalLightData, ShadowSourceAngleFactor) == 0x000118, "Member 'FCLSDirectionalLightData::ShadowSourceAngleFactor' has a wrong offset!");
//static_assert(offsetof(FCLSDirectionalLightData, TraceDistance) == 0x00011C, "Member 'FCLSDirectionalLightData::TraceDistance' has a wrong offset!");
//static_assert(offsetof(FCLSDirectionalLightData, AtmosphereSunLightIndex) == 0x000124, "Member 'FCLSDirectionalLightData::AtmosphereSunLightIndex' has a wrong offset!");
//static_assert(offsetof(FCLSDirectionalLightData, AtmosphereSunDiskColorScale) == 0x000128, "Member 'FCLSDirectionalLightData::AtmosphereSunDiskColorScale' has a wrong offset!");
//static_assert(offsetof(FCLSDirectionalLightData, CloudShadowStrength) == 0x00013C, "Member 'FCLSDirectionalLightData::CloudShadowStrength' has a wrong offset!");
//static_assert(offsetof(FCLSDirectionalLightData, CloudShadowOnAtmosphereStrength) == 0x000140, "Member 'FCLSDirectionalLightData::CloudShadowOnAtmosphereStrength' has a wrong offset!");
//static_assert(offsetof(FCLSDirectionalLightData, CloudShadowOnSurfaceStrength) == 0x000144, "Member 'FCLSDirectionalLightData::CloudShadowOnSurfaceStrength' has a wrong offset!");
//static_assert(offsetof(FCLSDirectionalLightData, CloudShadowDepthBias) == 0x000148, "Member 'FCLSDirectionalLightData::CloudShadowDepthBias' has a wrong offset!");
//static_assert(offsetof(FCLSDirectionalLightData, CloudShadowExtent) == 0x00014C, "Member 'FCLSDirectionalLightData::CloudShadowExtent' has a wrong offset!");
//static_assert(offsetof(FCLSDirectionalLightData, CloudShadowMapResolutionScale) == 0x000150, "Member 'FCLSDirectionalLightData::CloudShadowMapResolutionScale' has a wrong offset!");
//static_assert(offsetof(FCLSDirectionalLightData, CloudShadowRaySampleCountScale) == 0x000154, "Member 'FCLSDirectionalLightData::CloudShadowRaySampleCountScale' has a wrong offset!");
//static_assert(offsetof(FCLSDirectionalLightData, CloudScatteredLuminanceScale) == 0x000158, "Member 'FCLSDirectionalLightData::CloudScatteredLuminanceScale' has a wrong offset!");
//static_assert(offsetof(FCLSDirectionalLightData, LightmassSettings) == 0x000168, "Member 'FCLSDirectionalLightData::LightmassSettings' has a wrong offset!");
//static_assert(offsetof(FCLSDirectionalLightData, ModulatedShadowColor) == 0x00017C, "Member 'FCLSDirectionalLightData::ModulatedShadowColor' has a wrong offset!");
//static_assert(offsetof(FCLSDirectionalLightData, ShadowAmount) == 0x000180, "Member 'FCLSDirectionalLightData::ShadowAmount' has a wrong offset!");
//static_assert(offsetof(FCLSDirectionalLightData, Rotation) == 0x000188, "Member 'FCLSDirectionalLightData::Rotation' has a wrong offset!");

// ScriptStruct CustomLightSystem.CLSPlayerLightDataBase
// 0x0028 (0x0028 - 0x0000)
struct FCLSPlayerLightDataBase final
{
public:
	float                                         Intensity;                                         // 0x0000(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FColor                                 Color;                                             // 0x0004(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Radius;                                            // 0x0008(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         AttenuationRadius;                                 // 0x000C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bCastShadows;                                      // 0x0010(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          CastShadowMapShadow;                               // 0x0011(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_12[0x2];                                       // 0x0012(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         ContactShadowLength;                               // 0x0014(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bUseTemperature;                                   // 0x0018(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_19[0x3];                                       // 0x0019(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         Temperature;                                       // 0x001C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         VolumetricScatteringIntensity;                     // 0x0020(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         SpecularScale;                                     // 0x0024(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
//static_assert(alignof(FCLSPlayerLightDataBase) == 0x000004, "Wrong alignment on FCLSPlayerLightDataBase");
//static_assert(sizeof(FCLSPlayerLightDataBase) == 0x000028, "Wrong size on FCLSPlayerLightDataBase");
//static_assert(offsetof(FCLSPlayerLightDataBase, Intensity) == 0x000000, "Member 'FCLSPlayerLightDataBase::Intensity' has a wrong offset!");
//static_assert(offsetof(FCLSPlayerLightDataBase, Color) == 0x000004, "Member 'FCLSPlayerLightDataBase::Color' has a wrong offset!");
//static_assert(offsetof(FCLSPlayerLightDataBase, Radius) == 0x000008, "Member 'FCLSPlayerLightDataBase::Radius' has a wrong offset!");
//static_assert(offsetof(FCLSPlayerLightDataBase, AttenuationRadius) == 0x00000C, "Member 'FCLSPlayerLightDataBase::AttenuationRadius' has a wrong offset!");
//static_assert(offsetof(FCLSPlayerLightDataBase, bCastShadows) == 0x000010, "Member 'FCLSPlayerLightDataBase::bCastShadows' has a wrong offset!");
//static_assert(offsetof(FCLSPlayerLightDataBase, CastShadowMapShadow) == 0x000011, "Member 'FCLSPlayerLightDataBase::CastShadowMapShadow' has a wrong offset!");
//static_assert(offsetof(FCLSPlayerLightDataBase, ContactShadowLength) == 0x000014, "Member 'FCLSPlayerLightDataBase::ContactShadowLength' has a wrong offset!");
//static_assert(offsetof(FCLSPlayerLightDataBase, bUseTemperature) == 0x000018, "Member 'FCLSPlayerLightDataBase::bUseTemperature' has a wrong offset!");
//static_assert(offsetof(FCLSPlayerLightDataBase, Temperature) == 0x00001C, "Member 'FCLSPlayerLightDataBase::Temperature' has a wrong offset!");
//static_assert(offsetof(FCLSPlayerLightDataBase, VolumetricScatteringIntensity) == 0x000020, "Member 'FCLSPlayerLightDataBase::VolumetricScatteringIntensity' has a wrong offset!");
//static_assert(offsetof(FCLSPlayerLightDataBase, SpecularScale) == 0x000024, "Member 'FCLSPlayerLightDataBase::SpecularScale' has a wrong offset!");

// ScriptStruct CustomLightSystem.CLSSkyLightData
// 0x0140 (0x0140 - 0x0000)
struct FCLSSkyLightData final
{
public:
	class FString                                 Name;                                              // 0x0000(0x0010)(Edit, ZeroConstructor, EditConst, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bValid;                                            // 0x0010(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_11[0x3];                                       // 0x0011(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         Intensity;                                         // 0x0014(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FColor                                 LightColor;                                        // 0x0018(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         bAffectsWorld : 1;                                 // 0x001C(0x0001)(BitIndex: 0x00, PropSize: 0x0001 (NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         CastShadows : 1;                                   // 0x001C(0x0001)(BitIndex: 0x01, PropSize: 0x0001 (NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         CastStaticShadows : 1;                             // 0x001C(0x0001)(BitIndex: 0x02, PropSize: 0x0001 (NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         CastDynamicShadows : 1;                            // 0x001C(0x0001)(BitIndex: 0x03, PropSize: 0x0001 (NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         bAffectTranslucentLighting : 1;                    // 0x001C(0x0001)(BitIndex: 0x04, PropSize: 0x0001 (NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         bTransmission : 1;                                 // 0x001C(0x0001)(BitIndex: 0x05, PropSize: 0x0001 (NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         bCastVolumetricShadow : 1;                         // 0x001C(0x0001)(BitIndex: 0x06, PropSize: 0x0001 (NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         bCastDeepShadow : 1;                               // 0x001C(0x0001)(BitIndex: 0x07, PropSize: 0x0001 (NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         Pad_1D[0x3];                                       // 0x001D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	ECastRayTracedShadow                          CastRaytracedShadow;                               // 0x0020(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_21[0x3];                                       // 0x0021(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	uint8                                         bAffectReflection : 1;                             // 0x0024(0x0001)(BitIndex: 0x00, PropSize: 0x0001 (NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         bAffectGlobalIllumination : 1;                     // 0x0024(0x0001)(BitIndex: 0x01, PropSize: 0x0001 (NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         Pad_25[0x3];                                       // 0x0025(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         DeepShadowLayerDistribution;                       // 0x0028(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         IndirectLightingIntensity;                         // 0x002C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         VolumetricScatteringIntensity;                     // 0x0030(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         SamplesPerPixel;                                   // 0x0034(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bRealTimeCapture;                                  // 0x0038(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ESkyLightSourceType                           SourceType;                                        // 0x0039(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_3A[0x6];                                       // 0x003A(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	class UTextureCube*                           Cubemap;                                           // 0x0040(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bCaptureSceneForReflection;                        // 0x0048(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_49[0x3];                                       // 0x0049(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         SourceCubemapAngle;                                // 0x004C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint32                                        CubemapResolution;                                 // 0x0050(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FSHIrradianceMap                       IrradianceEnvMapSH;                                // 0x0054(0x0094)(NoDestructor, NativeAccessSpecifierPublic)
	TArray<uint8>                                 CapturedDataForReflection;                         // 0x00E8(0x0010)(ZeroConstructor, NativeAccessSpecifierPublic)
	float                                         SkyDistanceThreshold;                              // 0x00F8(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bCaptureEmissiveOnly;                              // 0x00FC(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bLowerHemisphereIsBlack;                           // 0x00FD(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_FE[0x2];                                       // 0x00FE(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	struct FLinearColor                           LowerHemisphereColor;                              // 0x0100(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         OcclusionMaxDistance;                              // 0x0110(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Contrast;                                          // 0x0114(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         OcclusionExponent;                                 // 0x0118(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         MinOcclusion;                                      // 0x011C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FColor                                 OcclusionTint;                                     // 0x0120(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         bCloudAmbientOcclusion : 1;                        // 0x0124(0x0001)(BitIndex: 0x00, PropSize: 0x0001 (NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         Pad_125[0x3];                                      // 0x0125(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         CloudAmbientOcclusionStrength;                     // 0x0128(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         CloudAmbientOcclusionExtent;                       // 0x012C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         CloudAmbientOcclusionMapResolutionScale;           // 0x0130(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         CloudAmbientOcclusionApertureScale;                // 0x0134(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EOcclusionCombineMode                         OcclusionCombineMode;                              // 0x0138(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_139[0x7];                                      // 0x0139(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
//static_assert(alignof(FCLSSkyLightData) == 0x000008, "Wrong alignment on FCLSSkyLightData");
//static_assert(sizeof(FCLSSkyLightData) == 0x000140, "Wrong size on FCLSSkyLightData");
//static_assert(offsetof(FCLSSkyLightData, Name) == 0x000000, "Member 'FCLSSkyLightData::Name' has a wrong offset!");
//static_assert(offsetof(FCLSSkyLightData, bValid) == 0x000010, "Member 'FCLSSkyLightData::bValid' has a wrong offset!");
//static_assert(offsetof(FCLSSkyLightData, Intensity) == 0x000014, "Member 'FCLSSkyLightData::Intensity' has a wrong offset!");
//static_assert(offsetof(FCLSSkyLightData, LightColor) == 0x000018, "Member 'FCLSSkyLightData::LightColor' has a wrong offset!");
//static_assert(offsetof(FCLSSkyLightData, CastRaytracedShadow) == 0x000020, "Member 'FCLSSkyLightData::CastRaytracedShadow' has a wrong offset!");
//static_assert(offsetof(FCLSSkyLightData, DeepShadowLayerDistribution) == 0x000028, "Member 'FCLSSkyLightData::DeepShadowLayerDistribution' has a wrong offset!");
//static_assert(offsetof(FCLSSkyLightData, IndirectLightingIntensity) == 0x00002C, "Member 'FCLSSkyLightData::IndirectLightingIntensity' has a wrong offset!");
//static_assert(offsetof(FCLSSkyLightData, VolumetricScatteringIntensity) == 0x000030, "Member 'FCLSSkyLightData::VolumetricScatteringIntensity' has a wrong offset!");
//static_assert(offsetof(FCLSSkyLightData, SamplesPerPixel) == 0x000034, "Member 'FCLSSkyLightData::SamplesPerPixel' has a wrong offset!");
//static_assert(offsetof(FCLSSkyLightData, bRealTimeCapture) == 0x000038, "Member 'FCLSSkyLightData::bRealTimeCapture' has a wrong offset!");
//static_assert(offsetof(FCLSSkyLightData, SourceType) == 0x000039, "Member 'FCLSSkyLightData::SourceType' has a wrong offset!");
//static_assert(offsetof(FCLSSkyLightData, Cubemap) == 0x000040, "Member 'FCLSSkyLightData::Cubemap' has a wrong offset!");
//static_assert(offsetof(FCLSSkyLightData, bCaptureSceneForReflection) == 0x000048, "Member 'FCLSSkyLightData::bCaptureSceneForReflection' has a wrong offset!");
//static_assert(offsetof(FCLSSkyLightData, SourceCubemapAngle) == 0x00004C, "Member 'FCLSSkyLightData::SourceCubemapAngle' has a wrong offset!");
//static_assert(offsetof(FCLSSkyLightData, CubemapResolution) == 0x000050, "Member 'FCLSSkyLightData::CubemapResolution' has a wrong offset!");
//static_assert(offsetof(FCLSSkyLightData, IrradianceEnvMapSH) == 0x000054, "Member 'FCLSSkyLightData::IrradianceEnvMapSH' has a wrong offset!");
//static_assert(offsetof(FCLSSkyLightData, CapturedDataForReflection) == 0x0000E8, "Member 'FCLSSkyLightData::CapturedDataForReflection' has a wrong offset!");
//static_assert(offsetof(FCLSSkyLightData, SkyDistanceThreshold) == 0x0000F8, "Member 'FCLSSkyLightData::SkyDistanceThreshold' has a wrong offset!");
//static_assert(offsetof(FCLSSkyLightData, bCaptureEmissiveOnly) == 0x0000FC, "Member 'FCLSSkyLightData::bCaptureEmissiveOnly' has a wrong offset!");
//static_assert(offsetof(FCLSSkyLightData, bLowerHemisphereIsBlack) == 0x0000FD, "Member 'FCLSSkyLightData::bLowerHemisphereIsBlack' has a wrong offset!");
//static_assert(offsetof(FCLSSkyLightData, LowerHemisphereColor) == 0x000100, "Member 'FCLSSkyLightData::LowerHemisphereColor' has a wrong offset!");
//static_assert(offsetof(FCLSSkyLightData, OcclusionMaxDistance) == 0x000110, "Member 'FCLSSkyLightData::OcclusionMaxDistance' has a wrong offset!");
//static_assert(offsetof(FCLSSkyLightData, Contrast) == 0x000114, "Member 'FCLSSkyLightData::Contrast' has a wrong offset!");
//static_assert(offsetof(FCLSSkyLightData, OcclusionExponent) == 0x000118, "Member 'FCLSSkyLightData::OcclusionExponent' has a wrong offset!");
//static_assert(offsetof(FCLSSkyLightData, MinOcclusion) == 0x00011C, "Member 'FCLSSkyLightData::MinOcclusion' has a wrong offset!");
//static_assert(offsetof(FCLSSkyLightData, OcclusionTint) == 0x000120, "Member 'FCLSSkyLightData::OcclusionTint' has a wrong offset!");
//static_assert(offsetof(FCLSSkyLightData, CloudAmbientOcclusionStrength) == 0x000128, "Member 'FCLSSkyLightData::CloudAmbientOcclusionStrength' has a wrong offset!");
//static_assert(offsetof(FCLSSkyLightData, CloudAmbientOcclusionExtent) == 0x00012C, "Member 'FCLSSkyLightData::CloudAmbientOcclusionExtent' has a wrong offset!");
//static_assert(offsetof(FCLSSkyLightData, CloudAmbientOcclusionMapResolutionScale) == 0x000130, "Member 'FCLSSkyLightData::CloudAmbientOcclusionMapResolutionScale' has a wrong offset!");
//static_assert(offsetof(FCLSSkyLightData, CloudAmbientOcclusionApertureScale) == 0x000134, "Member 'FCLSSkyLightData::CloudAmbientOcclusionApertureScale' has a wrong offset!");
//static_assert(offsetof(FCLSSkyLightData, OcclusionCombineMode) == 0x000138, "Member 'FCLSSkyLightData::OcclusionCombineMode' has a wrong offset!");

// ScriptStruct CustomLightSystem.CLSAtmosphericFogData
// 0x00B0 (0x00B0 - 0x0000)
struct FCLSAtmosphericFogData final
{
public:
	class FString                                 Name;                                              // 0x0000(0x0010)(Edit, ZeroConstructor, EditConst, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bValid;                                            // 0x0010(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ESkyAtmosphereTransformMode                   TransformMode;                                     // 0x0011(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_12[0x2];                                       // 0x0012(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         BottomRadius;                                      // 0x0014(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FColor                                 GroundAlbedo;                                      // 0x0018(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         AtmosphereHeight;                                  // 0x001C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         MultiScatteringFactor;                             // 0x0020(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         TraceSampleCountScale;                             // 0x0024(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         RayleighScatteringScale;                           // 0x0028(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FLinearColor                           RayleighScattering;                                // 0x002C(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         RayleighExponentialDistribution;                   // 0x003C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         MieScatteringScale;                                // 0x0040(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FLinearColor                           MieScattering;                                     // 0x0044(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         MieAbsorptionScale;                                // 0x0054(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FLinearColor                           MieAbsorption;                                     // 0x0058(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         MieAnisotropy;                                     // 0x0068(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         MieExponentialDistribution;                        // 0x006C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         OtherAbsorptionScale;                              // 0x0070(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FLinearColor                           OtherAbsorption;                                   // 0x0074(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FTentDistribution                      OtherTentDistribution;                             // 0x0084(0x000C)(NoDestructor, NativeAccessSpecifierPublic)
	struct FLinearColor                           SkyLuminanceFactor;                                // 0x0090(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         AerialPespectiveViewDistanceScale;                 // 0x00A0(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         HeightFogContribution;                             // 0x00A4(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         TransmittanceMinLightElevationAngle;               // 0x00A8(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         AerialPerspectiveStartDepth;                       // 0x00AC(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
//static_assert(alignof(FCLSAtmosphericFogData) == 0x000008, "Wrong alignment on FCLSAtmosphericFogData");
//static_assert(sizeof(FCLSAtmosphericFogData) == 0x0000B0, "Wrong size on FCLSAtmosphericFogData");
//static_assert(offsetof(FCLSAtmosphericFogData, Name) == 0x000000, "Member 'FCLSAtmosphericFogData::Name' has a wrong offset!");
//static_assert(offsetof(FCLSAtmosphericFogData, bValid) == 0x000010, "Member 'FCLSAtmosphericFogData::bValid' has a wrong offset!");
//static_assert(offsetof(FCLSAtmosphericFogData, TransformMode) == 0x000011, "Member 'FCLSAtmosphericFogData::TransformMode' has a wrong offset!");
//static_assert(offsetof(FCLSAtmosphericFogData, BottomRadius) == 0x000014, "Member 'FCLSAtmosphericFogData::BottomRadius' has a wrong offset!");
//static_assert(offsetof(FCLSAtmosphericFogData, GroundAlbedo) == 0x000018, "Member 'FCLSAtmosphericFogData::GroundAlbedo' has a wrong offset!");
//static_assert(offsetof(FCLSAtmosphericFogData, AtmosphereHeight) == 0x00001C, "Member 'FCLSAtmosphericFogData::AtmosphereHeight' has a wrong offset!");
//static_assert(offsetof(FCLSAtmosphericFogData, MultiScatteringFactor) == 0x000020, "Member 'FCLSAtmosphericFogData::MultiScatteringFactor' has a wrong offset!");
//static_assert(offsetof(FCLSAtmosphericFogData, TraceSampleCountScale) == 0x000024, "Member 'FCLSAtmosphericFogData::TraceSampleCountScale' has a wrong offset!");
//static_assert(offsetof(FCLSAtmosphericFogData, RayleighScatteringScale) == 0x000028, "Member 'FCLSAtmosphericFogData::RayleighScatteringScale' has a wrong offset!");
//static_assert(offsetof(FCLSAtmosphericFogData, RayleighScattering) == 0x00002C, "Member 'FCLSAtmosphericFogData::RayleighScattering' has a wrong offset!");
//static_assert(offsetof(FCLSAtmosphericFogData, RayleighExponentialDistribution) == 0x00003C, "Member 'FCLSAtmosphericFogData::RayleighExponentialDistribution' has a wrong offset!");
//static_assert(offsetof(FCLSAtmosphericFogData, MieScatteringScale) == 0x000040, "Member 'FCLSAtmosphericFogData::MieScatteringScale' has a wrong offset!");
//static_assert(offsetof(FCLSAtmosphericFogData, MieScattering) == 0x000044, "Member 'FCLSAtmosphericFogData::MieScattering' has a wrong offset!");
//static_assert(offsetof(FCLSAtmosphericFogData, MieAbsorptionScale) == 0x000054, "Member 'FCLSAtmosphericFogData::MieAbsorptionScale' has a wrong offset!");
//static_assert(offsetof(FCLSAtmosphericFogData, MieAbsorption) == 0x000058, "Member 'FCLSAtmosphericFogData::MieAbsorption' has a wrong offset!");
//static_assert(offsetof(FCLSAtmosphericFogData, MieAnisotropy) == 0x000068, "Member 'FCLSAtmosphericFogData::MieAnisotropy' has a wrong offset!");
//static_assert(offsetof(FCLSAtmosphericFogData, MieExponentialDistribution) == 0x00006C, "Member 'FCLSAtmosphericFogData::MieExponentialDistribution' has a wrong offset!");
//static_assert(offsetof(FCLSAtmosphericFogData, OtherAbsorptionScale) == 0x000070, "Member 'FCLSAtmosphericFogData::OtherAbsorptionScale' has a wrong offset!");
//static_assert(offsetof(FCLSAtmosphericFogData, OtherAbsorption) == 0x000074, "Member 'FCLSAtmosphericFogData::OtherAbsorption' has a wrong offset!");
//static_assert(offsetof(FCLSAtmosphericFogData, OtherTentDistribution) == 0x000084, "Member 'FCLSAtmosphericFogData::OtherTentDistribution' has a wrong offset!");
//static_assert(offsetof(FCLSAtmosphericFogData, SkyLuminanceFactor) == 0x000090, "Member 'FCLSAtmosphericFogData::SkyLuminanceFactor' has a wrong offset!");
//static_assert(offsetof(FCLSAtmosphericFogData, AerialPespectiveViewDistanceScale) == 0x0000A0, "Member 'FCLSAtmosphericFogData::AerialPespectiveViewDistanceScale' has a wrong offset!");
//static_assert(offsetof(FCLSAtmosphericFogData, HeightFogContribution) == 0x0000A4, "Member 'FCLSAtmosphericFogData::HeightFogContribution' has a wrong offset!");
//static_assert(offsetof(FCLSAtmosphericFogData, TransmittanceMinLightElevationAngle) == 0x0000A8, "Member 'FCLSAtmosphericFogData::TransmittanceMinLightElevationAngle' has a wrong offset!");
//static_assert(offsetof(FCLSAtmosphericFogData, AerialPerspectiveStartDepth) == 0x0000AC, "Member 'FCLSAtmosphericFogData::AerialPerspectiveStartDepth' has a wrong offset!");

// ScriptStruct CustomLightSystem.CLSHeightFogData
// 0x00C8 (0x00C8 - 0x0000)
struct FCLSHeightFogData final
{
public:
	class FString                                 Name;                                              // 0x0000(0x0010)(Edit, ZeroConstructor, EditConst, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bValid;                                            // 0x0010(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_11[0x3];                                       // 0x0011(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         FogDensity;                                        // 0x0014(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         FogHeightFalloff;                                  // 0x0018(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FExponentialHeightFogData              SecondFogData;                                     // 0x001C(0x000C)(NoDestructor, NativeAccessSpecifierPublic)
	struct FLinearColor                           FogInscatteringLuminance;                          // 0x0028(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UTextureCube*                           InscatteringColorCubemap;                          // 0x0038(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         InscatteringColorCubemapAngle;                     // 0x0040(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FLinearColor                           InscatteringTextureTint;                           // 0x0044(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         FullyDirectionalInscatteringColorDistance;         // 0x0054(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         NonDirectionalInscatteringColorDistance;           // 0x0058(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         DirectionalInscatteringExponent;                   // 0x005C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         DirectionalInscatteringStartDistance;              // 0x0060(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FLinearColor                           DirectionalInscatteringLuminance;                  // 0x0064(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         FogMaxOpacity;                                     // 0x0074(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         StartDistance;                                     // 0x0078(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         FogCutoffDistance;                                 // 0x007C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bEnableVolumetricFog;                              // 0x0080(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_81[0x3];                                       // 0x0081(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         VolumetricFogScatteringDistribution;               // 0x0084(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FColor                                 VolumetricFogAlbedo;                               // 0x0088(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FLinearColor                           VolumetricFogEmissive;                             // 0x008C(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         VolumetricFogExtinctionScale;                      // 0x009C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         VolumetricFogDistance;                             // 0x00A0(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         VolumetricFogStaticLightingScatteringIntensity;    // 0x00A4(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bOverrideLightColorsWithFogInscatteringColors;     // 0x00A8(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_A9[0x7];                                       // 0x00A9(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                Location;                                          // 0x00B0(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
//static_assert(alignof(FCLSHeightFogData) == 0x000008, "Wrong alignment on FCLSHeightFogData");
//static_assert(sizeof(FCLSHeightFogData) == 0x0000C8, "Wrong size on FCLSHeightFogData");
//static_assert(offsetof(FCLSHeightFogData, Name) == 0x000000, "Member 'FCLSHeightFogData::Name' has a wrong offset!");
//static_assert(offsetof(FCLSHeightFogData, bValid) == 0x000010, "Member 'FCLSHeightFogData::bValid' has a wrong offset!");
//static_assert(offsetof(FCLSHeightFogData, FogDensity) == 0x000014, "Member 'FCLSHeightFogData::FogDensity' has a wrong offset!");
//static_assert(offsetof(FCLSHeightFogData, FogHeightFalloff) == 0x000018, "Member 'FCLSHeightFogData::FogHeightFalloff' has a wrong offset!");
//static_assert(offsetof(FCLSHeightFogData, SecondFogData) == 0x00001C, "Member 'FCLSHeightFogData::SecondFogData' has a wrong offset!");
//static_assert(offsetof(FCLSHeightFogData, FogInscatteringLuminance) == 0x000028, "Member 'FCLSHeightFogData::FogInscatteringLuminance' has a wrong offset!");
//static_assert(offsetof(FCLSHeightFogData, InscatteringColorCubemap) == 0x000038, "Member 'FCLSHeightFogData::InscatteringColorCubemap' has a wrong offset!");
//static_assert(offsetof(FCLSHeightFogData, InscatteringColorCubemapAngle) == 0x000040, "Member 'FCLSHeightFogData::InscatteringColorCubemapAngle' has a wrong offset!");
//static_assert(offsetof(FCLSHeightFogData, InscatteringTextureTint) == 0x000044, "Member 'FCLSHeightFogData::InscatteringTextureTint' has a wrong offset!");
//static_assert(offsetof(FCLSHeightFogData, FullyDirectionalInscatteringColorDistance) == 0x000054, "Member 'FCLSHeightFogData::FullyDirectionalInscatteringColorDistance' has a wrong offset!");
//static_assert(offsetof(FCLSHeightFogData, NonDirectionalInscatteringColorDistance) == 0x000058, "Member 'FCLSHeightFogData::NonDirectionalInscatteringColorDistance' has a wrong offset!");
//static_assert(offsetof(FCLSHeightFogData, DirectionalInscatteringExponent) == 0x00005C, "Member 'FCLSHeightFogData::DirectionalInscatteringExponent' has a wrong offset!");
//static_assert(offsetof(FCLSHeightFogData, DirectionalInscatteringStartDistance) == 0x000060, "Member 'FCLSHeightFogData::DirectionalInscatteringStartDistance' has a wrong offset!");
//static_assert(offsetof(FCLSHeightFogData, DirectionalInscatteringLuminance) == 0x000064, "Member 'FCLSHeightFogData::DirectionalInscatteringLuminance' has a wrong offset!");
//static_assert(offsetof(FCLSHeightFogData, FogMaxOpacity) == 0x000074, "Member 'FCLSHeightFogData::FogMaxOpacity' has a wrong offset!");
//static_assert(offsetof(FCLSHeightFogData, StartDistance) == 0x000078, "Member 'FCLSHeightFogData::StartDistance' has a wrong offset!");
//static_assert(offsetof(FCLSHeightFogData, FogCutoffDistance) == 0x00007C, "Member 'FCLSHeightFogData::FogCutoffDistance' has a wrong offset!");
//static_assert(offsetof(FCLSHeightFogData, bEnableVolumetricFog) == 0x000080, "Member 'FCLSHeightFogData::bEnableVolumetricFog' has a wrong offset!");
//static_assert(offsetof(FCLSHeightFogData, VolumetricFogScatteringDistribution) == 0x000084, "Member 'FCLSHeightFogData::VolumetricFogScatteringDistribution' has a wrong offset!");
//static_assert(offsetof(FCLSHeightFogData, VolumetricFogAlbedo) == 0x000088, "Member 'FCLSHeightFogData::VolumetricFogAlbedo' has a wrong offset!");
//static_assert(offsetof(FCLSHeightFogData, VolumetricFogEmissive) == 0x00008C, "Member 'FCLSHeightFogData::VolumetricFogEmissive' has a wrong offset!");
//static_assert(offsetof(FCLSHeightFogData, VolumetricFogExtinctionScale) == 0x00009C, "Member 'FCLSHeightFogData::VolumetricFogExtinctionScale' has a wrong offset!");
//static_assert(offsetof(FCLSHeightFogData, VolumetricFogDistance) == 0x0000A0, "Member 'FCLSHeightFogData::VolumetricFogDistance' has a wrong offset!");
//static_assert(offsetof(FCLSHeightFogData, VolumetricFogStaticLightingScatteringIntensity) == 0x0000A4, "Member 'FCLSHeightFogData::VolumetricFogStaticLightingScatteringIntensity' has a wrong offset!");
//static_assert(offsetof(FCLSHeightFogData, bOverrideLightColorsWithFogInscatteringColors) == 0x0000A8, "Member 'FCLSHeightFogData::bOverrideLightColorsWithFogInscatteringColors' has a wrong offset!");
//static_assert(offsetof(FCLSHeightFogData, Location) == 0x0000B0, "Member 'FCLSHeightFogData::Location' has a wrong offset!");

// ScriptStruct CustomLightSystem.CLSMpcData
// 0x00A0 (0x00A0 - 0x0000)
struct FCLSMpcData final
{
public:
	TMap<class FString, float>                    MPCFloatPropertyMap;                               // 0x0000(0x0050)(Edit, EditConst, NativeAccessSpecifierPublic)
	TMap<class FString, struct FLinearColor>      MPCVectorPropertyMap;                              // 0x0050(0x0050)(Edit, EditConst, NativeAccessSpecifierPublic)
};
//static_assert(alignof(FCLSMpcData) == 0x000008, "Wrong alignment on FCLSMpcData");
//static_assert(sizeof(FCLSMpcData) == 0x0000A0, "Wrong size on FCLSMpcData");
//static_assert(offsetof(FCLSMpcData, MPCFloatPropertyMap) == 0x000000, "Member 'FCLSMpcData::MPCFloatPropertyMap' has a wrong offset!");
//static_assert(offsetof(FCLSMpcData, MPCVectorPropertyMap) == 0x000050, "Member 'FCLSMpcData::MPCVectorPropertyMap' has a wrong offset!");

// ScriptStruct CustomLightSystem.CLSCustomVariableData
// 0x0038 (0x0038 - 0x0000)
struct FCLSCustomVariableData final
{
public:
	class FString                                 Name;                                              // 0x0000(0x0010)(Edit, ZeroConstructor, EditConst, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bValid;                                            // 0x0010(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EWaterReflectionMode                          WaterReflectionMode;                               // 0x0011(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_12[0x2];                                       // 0x0012(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         GIIntensityScale;                                  // 0x0014(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         GISpecularFactor;                                  // 0x0018(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         GIShadowIntensityScale;                            // 0x001C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         ReflectionDiffuseBoost;                            // 0x0020(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         GISkyLightIntensity;                               // 0x0024(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         GISkyLightIndirectIntensity;                       // 0x0028(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         SkylightIntensityMultiplier;                       // 0x002C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         HZBTraversalRelativeDepthThickness;                // 0x0030(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         LumenHZBTraversalOverride;                         // 0x0034(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
//static_assert(alignof(FCLSCustomVariableData) == 0x000008, "Wrong alignment on FCLSCustomVariableData");
//static_assert(sizeof(FCLSCustomVariableData) == 0x000038, "Wrong size on FCLSCustomVariableData");
//static_assert(offsetof(FCLSCustomVariableData, Name) == 0x000000, "Member 'FCLSCustomVariableData::Name' has a wrong offset!");
//static_assert(offsetof(FCLSCustomVariableData, bValid) == 0x000010, "Member 'FCLSCustomVariableData::bValid' has a wrong offset!");
//static_assert(offsetof(FCLSCustomVariableData, WaterReflectionMode) == 0x000011, "Member 'FCLSCustomVariableData::WaterReflectionMode' has a wrong offset!");
//static_assert(offsetof(FCLSCustomVariableData, GIIntensityScale) == 0x000014, "Member 'FCLSCustomVariableData::GIIntensityScale' has a wrong offset!");
//static_assert(offsetof(FCLSCustomVariableData, GISpecularFactor) == 0x000018, "Member 'FCLSCustomVariableData::GISpecularFactor' has a wrong offset!");
//static_assert(offsetof(FCLSCustomVariableData, GIShadowIntensityScale) == 0x00001C, "Member 'FCLSCustomVariableData::GIShadowIntensityScale' has a wrong offset!");
//static_assert(offsetof(FCLSCustomVariableData, ReflectionDiffuseBoost) == 0x000020, "Member 'FCLSCustomVariableData::ReflectionDiffuseBoost' has a wrong offset!");
//static_assert(offsetof(FCLSCustomVariableData, GISkyLightIntensity) == 0x000024, "Member 'FCLSCustomVariableData::GISkyLightIntensity' has a wrong offset!");
//static_assert(offsetof(FCLSCustomVariableData, GISkyLightIndirectIntensity) == 0x000028, "Member 'FCLSCustomVariableData::GISkyLightIndirectIntensity' has a wrong offset!");
//static_assert(offsetof(FCLSCustomVariableData, SkylightIntensityMultiplier) == 0x00002C, "Member 'FCLSCustomVariableData::SkylightIntensityMultiplier' has a wrong offset!");
//static_assert(offsetof(FCLSCustomVariableData, HZBTraversalRelativeDepthThickness) == 0x000030, "Member 'FCLSCustomVariableData::HZBTraversalRelativeDepthThickness' has a wrong offset!");
//static_assert(offsetof(FCLSCustomVariableData, LumenHZBTraversalOverride) == 0x000034, "Member 'FCLSCustomVariableData::LumenHZBTraversalOverride' has a wrong offset!");

// ScriptStruct CustomLightSystem.CLSPlayerLightData
// 0x0068 (0x0068 - 0x0000)
struct FCLSPlayerLightData final
{
public:
	bool                                          bValid;                                            // 0x0000(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x7];                                        // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 Name;                                              // 0x0008(0x0010)(Edit, ZeroConstructor, EditConst, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FCLSPlayerLightDataBase                FrontLightData;                                    // 0x0018(0x0028)(Edit, EditConst, NoDestructor, NativeAccessSpecifierPublic)
	struct FCLSPlayerLightDataBase                BackLightData;                                     // 0x0040(0x0028)(Edit, EditConst, NoDestructor, NativeAccessSpecifierPublic)
};
//static_assert(alignof(FCLSPlayerLightData) == 0x000008, "Wrong alignment on FCLSPlayerLightData");
//static_assert(sizeof(FCLSPlayerLightData) == 0x000068, "Wrong size on FCLSPlayerLightData");
//static_assert(offsetof(FCLSPlayerLightData, bValid) == 0x000000, "Member 'FCLSPlayerLightData::bValid' has a wrong offset!");
//static_assert(offsetof(FCLSPlayerLightData, Name) == 0x000008, "Member 'FCLSPlayerLightData::Name' has a wrong offset!");
//static_assert(offsetof(FCLSPlayerLightData, FrontLightData) == 0x000018, "Member 'FCLSPlayerLightData::FrontLightData' has a wrong offset!");
//static_assert(offsetof(FCLSPlayerLightData, BackLightData) == 0x000040, "Member 'FCLSPlayerLightData::BackLightData' has a wrong offset!");

// ScriptStruct CustomLightSystem.CLSLightData
// 0x05D0 (0x05D0 - 0x0000)
struct FCLSLightData final
{
public:
	class FString                                 Name;                                              // 0x0000(0x0010)(Edit, ZeroConstructor, EditConst, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FCLSDirectionalLightData               DirectionalLightData;                              // 0x0010(0x01A0)(Edit, EditConst, NativeAccessSpecifierPublic)
	struct FCLSSkyLightData                       SkyLightData;                                      // 0x01B0(0x0140)(Edit, EditConst, NativeAccessSpecifierPublic)
	struct FCLSAtmosphericFogData                 AtmosphericFogData;                                // 0x02F0(0x00B0)(Edit, EditConst, NativeAccessSpecifierPublic)
	struct FCLSHeightFogData                      HeightFogData;                                     // 0x03A0(0x00C8)(Edit, EditConst, NativeAccessSpecifierPublic)
	struct FCLSMpcData                            MpcData;                                           // 0x0468(0x00A0)(Edit, EditConst, NativeAccessSpecifierPublic)
	struct FCLSCustomVariableData                 CustomVariableData;                                // 0x0508(0x0038)(Edit, EditConst, NativeAccessSpecifierPublic)
	struct FCLSPlayerLightData                    PlayerLightData;                                   // 0x0540(0x0068)(Edit, EditConst, NativeAccessSpecifierPublic)
	float                                         LengthOfBuffSpace;                                 // 0x05A8(0x0004)(Edit, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         SortWeight;                                        // 0x05AC(0x0004)(Edit, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         SpeedAlpha;                                        // 0x05B0(0x0004)(Edit, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         PlayerLightSpeedAlpha;                             // 0x05B4(0x0004)(Edit, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bUseCustomBlendOutSpeed;                           // 0x05B8(0x0001)(Edit, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_5B9[0x3];                                      // 0x05B9(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         CustomBlendOutSpeedAlpha;                          // 0x05BC(0x0004)(Edit, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<class FString>                         CommandLines;                                      // 0x05C0(0x0010)(Edit, ZeroConstructor, EditConst, NativeAccessSpecifierPublic)
};
//static_assert(alignof(FCLSLightData) == 0x000008, "Wrong alignment on FCLSLightData");
//static_assert(sizeof(FCLSLightData) == 0x0005D0, "Wrong size on FCLSLightData");
//static_assert(offsetof(FCLSLightData, Name) == 0x000000, "Member 'FCLSLightData::Name' has a wrong offset!");
//static_assert(offsetof(FCLSLightData, DirectionalLightData) == 0x000010, "Member 'FCLSLightData::DirectionalLightData' has a wrong offset!");
//static_assert(offsetof(FCLSLightData, SkyLightData) == 0x0001B0, "Member 'FCLSLightData::SkyLightData' has a wrong offset!");
//static_assert(offsetof(FCLSLightData, AtmosphericFogData) == 0x0002F0, "Member 'FCLSLightData::AtmosphericFogData' has a wrong offset!");
//static_assert(offsetof(FCLSLightData, HeightFogData) == 0x0003A0, "Member 'FCLSLightData::HeightFogData' has a wrong offset!");
//static_assert(offsetof(FCLSLightData, MpcData) == 0x000468, "Member 'FCLSLightData::MpcData' has a wrong offset!");
//static_assert(offsetof(FCLSLightData, CustomVariableData) == 0x000508, "Member 'FCLSLightData::CustomVariableData' has a wrong offset!");
//static_assert(offsetof(FCLSLightData, PlayerLightData) == 0x000540, "Member 'FCLSLightData::PlayerLightData' has a wrong offset!");
//static_assert(offsetof(FCLSLightData, LengthOfBuffSpace) == 0x0005A8, "Member 'FCLSLightData::LengthOfBuffSpace' has a wrong offset!");
//static_assert(offsetof(FCLSLightData, SortWeight) == 0x0005AC, "Member 'FCLSLightData::SortWeight' has a wrong offset!");
//static_assert(offsetof(FCLSLightData, SpeedAlpha) == 0x0005B0, "Member 'FCLSLightData::SpeedAlpha' has a wrong offset!");
//static_assert(offsetof(FCLSLightData, PlayerLightSpeedAlpha) == 0x0005B4, "Member 'FCLSLightData::PlayerLightSpeedAlpha' has a wrong offset!");
//static_assert(offsetof(FCLSLightData, bUseCustomBlendOutSpeed) == 0x0005B8, "Member 'FCLSLightData::bUseCustomBlendOutSpeed' has a wrong offset!");
//static_assert(offsetof(FCLSLightData, CustomBlendOutSpeedAlpha) == 0x0005BC, "Member 'FCLSLightData::CustomBlendOutSpeedAlpha' has a wrong offset!");
//static_assert(offsetof(FCLSLightData, CommandLines) == 0x0005C0, "Member 'FCLSLightData::CommandLines' has a wrong offset!");

// ScriptStruct CustomLightSystem.CLSBlendDataBase
// 0x0048 (0x0048 - 0x0000)
struct FCLSBlendDataBase
{
public:
	bool                                          bInitialized;                                      // 0x0000(0x0001)(Edit, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0xF];                                        // 0x0001(0x000F)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 TargetName;                                        // 0x0010(0x0010)(Edit, ZeroConstructor, EditConst, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         SpeedAlpha;                                        // 0x0020(0x0004)(Edit, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bOriginUseCustomBlendOutSpeed;                     // 0x0024(0x0001)(Edit, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_25[0x3];                                       // 0x0025(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         OriginCustomBlendOutSpeedAlpha;                    // 0x0028(0x0004)(Edit, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bTargetUseCustomBlendOutSpeed;                     // 0x002C(0x0001)(Edit, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2D[0x3];                                       // 0x002D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         TargetCustomBlendOutSpeedAlpha;                    // 0x0030(0x0004)(Edit, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         CurrentAlpha;                                      // 0x0034(0x0004)(Edit, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         TargetAlpha;                                       // 0x0038(0x0004)(Edit, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         CurrentPercentage;                                 // 0x003C(0x0004)(Edit, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_40[0x8];                                       // 0x0040(0x0008)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
//static_assert(alignof(FCLSBlendDataBase) == 0x000008, "Wrong alignment on FCLSBlendDataBase");
//static_assert(sizeof(FCLSBlendDataBase) == 0x000048, "Wrong size on FCLSBlendDataBase");
//static_assert(offsetof(FCLSBlendDataBase, bInitialized) == 0x000000, "Member 'FCLSBlendDataBase::bInitialized' has a wrong offset!");
//static_assert(offsetof(FCLSBlendDataBase, TargetName) == 0x000010, "Member 'FCLSBlendDataBase::TargetName' has a wrong offset!");
//static_assert(offsetof(FCLSBlendDataBase, SpeedAlpha) == 0x000020, "Member 'FCLSBlendDataBase::SpeedAlpha' has a wrong offset!");
//static_assert(offsetof(FCLSBlendDataBase, bOriginUseCustomBlendOutSpeed) == 0x000024, "Member 'FCLSBlendDataBase::bOriginUseCustomBlendOutSpeed' has a wrong offset!");
//static_assert(offsetof(FCLSBlendDataBase, OriginCustomBlendOutSpeedAlpha) == 0x000028, "Member 'FCLSBlendDataBase::OriginCustomBlendOutSpeedAlpha' has a wrong offset!");
//static_assert(offsetof(FCLSBlendDataBase, bTargetUseCustomBlendOutSpeed) == 0x00002C, "Member 'FCLSBlendDataBase::bTargetUseCustomBlendOutSpeed' has a wrong offset!");
//static_assert(offsetof(FCLSBlendDataBase, TargetCustomBlendOutSpeedAlpha) == 0x000030, "Member 'FCLSBlendDataBase::TargetCustomBlendOutSpeedAlpha' has a wrong offset!");
//static_assert(offsetof(FCLSBlendDataBase, CurrentAlpha) == 0x000034, "Member 'FCLSBlendDataBase::CurrentAlpha' has a wrong offset!");
//static_assert(offsetof(FCLSBlendDataBase, TargetAlpha) == 0x000038, "Member 'FCLSBlendDataBase::TargetAlpha' has a wrong offset!");
//static_assert(offsetof(FCLSBlendDataBase, CurrentPercentage) == 0x00003C, "Member 'FCLSBlendDataBase::CurrentPercentage' has a wrong offset!");

// ScriptStruct CustomLightSystem.CLSOtherBlendData
// 0x1170 (0x11B8 - 0x0048)
struct FCLSOtherBlendData final : public FCLSBlendDataBase
{
public:
	struct FCLSLightData                          OriginData;                                        // 0x0048(0x05D0)(Edit, EditConst, NativeAccessSpecifierPublic)
	struct FCLSLightData                          TargetData;                                        // 0x0618(0x05D0)(Edit, EditConst, NativeAccessSpecifierPublic)
	struct FCLSLightData                          CurrentData;                                       // 0x0BE8(0x05D0)(Edit, EditConst, NativeAccessSpecifierPublic)
};
//static_assert(alignof(FCLSOtherBlendData) == 0x000008, "Wrong alignment on FCLSOtherBlendData");
//static_assert(sizeof(FCLSOtherBlendData) == 0x0011B8, "Wrong size on FCLSOtherBlendData");
//static_assert(offsetof(FCLSOtherBlendData, OriginData) == 0x000048, "Member 'FCLSOtherBlendData::OriginData' has a wrong offset!");
//static_assert(offsetof(FCLSOtherBlendData, TargetData) == 0x000618, "Member 'FCLSOtherBlendData::TargetData' has a wrong offset!");
//static_assert(offsetof(FCLSOtherBlendData, CurrentData) == 0x000BE8, "Member 'FCLSOtherBlendData::CurrentData' has a wrong offset!");

// ScriptStruct CustomLightSystem.CLSDirectionalLightBlendData
// 0x04E0 (0x0528 - 0x0048)
struct FCLSDirectionalLightBlendData final : public FCLSBlendDataBase
{
public:
	struct FCLSDirectionalLightData               OriginData;                                        // 0x0048(0x01A0)(Edit, EditConst, NativeAccessSpecifierPublic)
	struct FCLSDirectionalLightData               TargetData;                                        // 0x01E8(0x01A0)(Edit, EditConst, NativeAccessSpecifierPublic)
	struct FCLSDirectionalLightData               CurrentData;                                       // 0x0388(0x01A0)(Edit, EditConst, NativeAccessSpecifierPublic)
};
//static_assert(alignof(FCLSDirectionalLightBlendData) == 0x000008, "Wrong alignment on FCLSDirectionalLightBlendData");
//static_assert(sizeof(FCLSDirectionalLightBlendData) == 0x000528, "Wrong size on FCLSDirectionalLightBlendData");
//static_assert(offsetof(FCLSDirectionalLightBlendData, OriginData) == 0x000048, "Member 'FCLSDirectionalLightBlendData::OriginData' has a wrong offset!");
//static_assert(offsetof(FCLSDirectionalLightBlendData, TargetData) == 0x0001E8, "Member 'FCLSDirectionalLightBlendData::TargetData' has a wrong offset!");
//static_assert(offsetof(FCLSDirectionalLightBlendData, CurrentData) == 0x000388, "Member 'FCLSDirectionalLightBlendData::CurrentData' has a wrong offset!");

// ScriptStruct CustomLightSystem.CLSSkyLightBlendData
// 0x03C0 (0x0408 - 0x0048)
struct FCLSSkyLightBlendData final : public FCLSBlendDataBase
{
public:
	struct FCLSSkyLightData                       OriginData;                                        // 0x0048(0x0140)(Edit, EditConst, NativeAccessSpecifierPublic)
	struct FCLSSkyLightData                       TargetData;                                        // 0x0188(0x0140)(Edit, EditConst, NativeAccessSpecifierPublic)
	struct FCLSSkyLightData                       CurrentData;                                       // 0x02C8(0x0140)(Edit, EditConst, NativeAccessSpecifierPublic)
};
//static_assert(alignof(FCLSSkyLightBlendData) == 0x000008, "Wrong alignment on FCLSSkyLightBlendData");
//static_assert(sizeof(FCLSSkyLightBlendData) == 0x000408, "Wrong size on FCLSSkyLightBlendData");
//static_assert(offsetof(FCLSSkyLightBlendData, OriginData) == 0x000048, "Member 'FCLSSkyLightBlendData::OriginData' has a wrong offset!");
//static_assert(offsetof(FCLSSkyLightBlendData, TargetData) == 0x000188, "Member 'FCLSSkyLightBlendData::TargetData' has a wrong offset!");
//static_assert(offsetof(FCLSSkyLightBlendData, CurrentData) == 0x0002C8, "Member 'FCLSSkyLightBlendData::CurrentData' has a wrong offset!");

// ScriptStruct CustomLightSystem.CLSAtmosphereBlendData
// 0x0210 (0x0258 - 0x0048)
struct FCLSAtmosphereBlendData final : public FCLSBlendDataBase
{
public:
	struct FCLSAtmosphericFogData                 OriginData;                                        // 0x0048(0x00B0)(Edit, EditConst, NativeAccessSpecifierPublic)
	struct FCLSAtmosphericFogData                 TargetData;                                        // 0x00F8(0x00B0)(Edit, EditConst, NativeAccessSpecifierPublic)
	struct FCLSAtmosphericFogData                 CurrentData;                                       // 0x01A8(0x00B0)(Edit, EditConst, NativeAccessSpecifierPublic)
};
//static_assert(alignof(FCLSAtmosphereBlendData) == 0x000008, "Wrong alignment on FCLSAtmosphereBlendData");
//static_assert(sizeof(FCLSAtmosphereBlendData) == 0x000258, "Wrong size on FCLSAtmosphereBlendData");
//static_assert(offsetof(FCLSAtmosphereBlendData, OriginData) == 0x000048, "Member 'FCLSAtmosphereBlendData::OriginData' has a wrong offset!");
//static_assert(offsetof(FCLSAtmosphereBlendData, TargetData) == 0x0000F8, "Member 'FCLSAtmosphereBlendData::TargetData' has a wrong offset!");
//static_assert(offsetof(FCLSAtmosphereBlendData, CurrentData) == 0x0001A8, "Member 'FCLSAtmosphereBlendData::CurrentData' has a wrong offset!");

// ScriptStruct CustomLightSystem.CLSHeightFogBlendData
// 0x0258 (0x02A0 - 0x0048)
struct FCLSHeightFogBlendData final : public FCLSBlendDataBase
{
public:
	struct FCLSHeightFogData                      OriginData;                                        // 0x0048(0x00C8)(Edit, EditConst, NativeAccessSpecifierPublic)
	struct FCLSHeightFogData                      TargetData;                                        // 0x0110(0x00C8)(Edit, EditConst, NativeAccessSpecifierPublic)
	struct FCLSHeightFogData                      CurrentData;                                       // 0x01D8(0x00C8)(Edit, EditConst, NativeAccessSpecifierPublic)
};
//static_assert(alignof(FCLSHeightFogBlendData) == 0x000008, "Wrong alignment on FCLSHeightFogBlendData");
//static_assert(sizeof(FCLSHeightFogBlendData) == 0x0002A0, "Wrong size on FCLSHeightFogBlendData");
//static_assert(offsetof(FCLSHeightFogBlendData, OriginData) == 0x000048, "Member 'FCLSHeightFogBlendData::OriginData' has a wrong offset!");
//static_assert(offsetof(FCLSHeightFogBlendData, TargetData) == 0x000110, "Member 'FCLSHeightFogBlendData::TargetData' has a wrong offset!");
//static_assert(offsetof(FCLSHeightFogBlendData, CurrentData) == 0x0001D8, "Member 'FCLSHeightFogBlendData::CurrentData' has a wrong offset!");

// ScriptStruct CustomLightSystem.CLSCustomBlendData
// 0x00A8 (0x00F0 - 0x0048)
struct FCLSCustomBlendData final : public FCLSBlendDataBase
{
public:
	struct FCLSCustomVariableData                 OriginData;                                        // 0x0048(0x0038)(Edit, EditConst, NativeAccessSpecifierPublic)
	struct FCLSCustomVariableData                 TargetData;                                        // 0x0080(0x0038)(Edit, EditConst, NativeAccessSpecifierPublic)
	struct FCLSCustomVariableData                 CurrentData;                                       // 0x00B8(0x0038)(Edit, EditConst, NativeAccessSpecifierPublic)
};
//static_assert(alignof(FCLSCustomBlendData) == 0x000008, "Wrong alignment on FCLSCustomBlendData");
//static_assert(sizeof(FCLSCustomBlendData) == 0x0000F0, "Wrong size on FCLSCustomBlendData");
//static_assert(offsetof(FCLSCustomBlendData, OriginData) == 0x000048, "Member 'FCLSCustomBlendData::OriginData' has a wrong offset!");
//static_assert(offsetof(FCLSCustomBlendData, TargetData) == 0x000080, "Member 'FCLSCustomBlendData::TargetData' has a wrong offset!");
//static_assert(offsetof(FCLSCustomBlendData, CurrentData) == 0x0000B8, "Member 'FCLSCustomBlendData::CurrentData' has a wrong offset!");

// ScriptStruct CustomLightSystem.CLSPointLightBlendData
// 0x0150 (0x0198 - 0x0048)
struct FCLSPointLightBlendData final : public FCLSBlendDataBase
{
public:
	uint8                                         Pad_48[0x18];                                      // 0x0048(0x0018)(Fixing Size After Last Property [ Dumper-7 ])
	struct FCLSPlayerLightData                    OriginData;                                        // 0x0060(0x0068)(Edit, EditConst, NativeAccessSpecifierPublic)
	struct FCLSPlayerLightData                    TargetData;                                        // 0x00C8(0x0068)(Edit, EditConst, NativeAccessSpecifierPublic)
	struct FCLSPlayerLightData                    CurrentData;                                       // 0x0130(0x0068)(Edit, EditConst, NativeAccessSpecifierPublic)
};
//static_assert(alignof(FCLSPointLightBlendData) == 0x000008, "Wrong alignment on FCLSPointLightBlendData");
//static_assert(sizeof(FCLSPointLightBlendData) == 0x000198, "Wrong size on FCLSPointLightBlendData");
//static_assert(offsetof(FCLSPointLightBlendData, OriginData) == 0x000060, "Member 'FCLSPointLightBlendData::OriginData' has a wrong offset!");
//static_assert(offsetof(FCLSPointLightBlendData, TargetData) == 0x0000C8, "Member 'FCLSPointLightBlendData::TargetData' has a wrong offset!");
//static_assert(offsetof(FCLSPointLightBlendData, CurrentData) == 0x000130, "Member 'FCLSPointLightBlendData::CurrentData' has a wrong offset!");

// ScriptStruct CustomLightSystem.CLSCategoryWatchData
// 0x0050 (0x0050 - 0x0000)
struct FCLSCategoryWatchData
{
public:
	class FString                                 OriginData;                                        // 0x0000(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 CurrentData;                                       // 0x0010(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 TargetData;                                        // 0x0020(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         SpeedAlpha;                                        // 0x0030(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bOriginUseCustomBlendOutSpeed;                     // 0x0034(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_35[0x3];                                       // 0x0035(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         OriginCustomBlendOutSpeedAlpha;                    // 0x0038(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bTargetUseCustomBlendOutSpeed;                     // 0x003C(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_3D[0x3];                                       // 0x003D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         TargetCustomBlendOutSpeedAlpha;                    // 0x0040(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         CurrentAlpha;                                      // 0x0044(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         TargetAlpha;                                       // 0x0048(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         CurrentPercentage;                                 // 0x004C(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
//static_assert(alignof(FCLSCategoryWatchData) == 0x000008, "Wrong alignment on FCLSCategoryWatchData");
//static_assert(sizeof(FCLSCategoryWatchData) == 0x000050, "Wrong size on FCLSCategoryWatchData");
//static_assert(offsetof(FCLSCategoryWatchData, OriginData) == 0x000000, "Member 'FCLSCategoryWatchData::OriginData' has a wrong offset!");
//static_assert(offsetof(FCLSCategoryWatchData, CurrentData) == 0x000010, "Member 'FCLSCategoryWatchData::CurrentData' has a wrong offset!");
//static_assert(offsetof(FCLSCategoryWatchData, TargetData) == 0x000020, "Member 'FCLSCategoryWatchData::TargetData' has a wrong offset!");
//static_assert(offsetof(FCLSCategoryWatchData, SpeedAlpha) == 0x000030, "Member 'FCLSCategoryWatchData::SpeedAlpha' has a wrong offset!");
//static_assert(offsetof(FCLSCategoryWatchData, bOriginUseCustomBlendOutSpeed) == 0x000034, "Member 'FCLSCategoryWatchData::bOriginUseCustomBlendOutSpeed' has a wrong offset!");
//static_assert(offsetof(FCLSCategoryWatchData, OriginCustomBlendOutSpeedAlpha) == 0x000038, "Member 'FCLSCategoryWatchData::OriginCustomBlendOutSpeedAlpha' has a wrong offset!");
//static_assert(offsetof(FCLSCategoryWatchData, bTargetUseCustomBlendOutSpeed) == 0x00003C, "Member 'FCLSCategoryWatchData::bTargetUseCustomBlendOutSpeed' has a wrong offset!");
//static_assert(offsetof(FCLSCategoryWatchData, TargetCustomBlendOutSpeedAlpha) == 0x000040, "Member 'FCLSCategoryWatchData::TargetCustomBlendOutSpeedAlpha' has a wrong offset!");
//static_assert(offsetof(FCLSCategoryWatchData, CurrentAlpha) == 0x000044, "Member 'FCLSCategoryWatchData::CurrentAlpha' has a wrong offset!");
//static_assert(offsetof(FCLSCategoryWatchData, TargetAlpha) == 0x000048, "Member 'FCLSCategoryWatchData::TargetAlpha' has a wrong offset!");
//static_assert(offsetof(FCLSCategoryWatchData, CurrentPercentage) == 0x00004C, "Member 'FCLSCategoryWatchData::CurrentPercentage' has a wrong offset!");

// ScriptStruct CustomLightSystem.CLSPlayerLightWatchData
// 0x0050 (0x00A0 - 0x0050)
struct FCLSPlayerLightWatchData final : public FCLSCategoryWatchData
{
public:
	struct FCLSPlayerLightDataBase                FrontLightData;                                    // 0x0050(0x0028)(Edit, BlueprintVisible, BlueprintReadOnly, EditConst, NoDestructor, NativeAccessSpecifierPublic)
	struct FCLSPlayerLightDataBase                BackLightData;                                     // 0x0078(0x0028)(Edit, BlueprintVisible, BlueprintReadOnly, EditConst, NoDestructor, NativeAccessSpecifierPublic)
};
//static_assert(alignof(FCLSPlayerLightWatchData) == 0x000008, "Wrong alignment on FCLSPlayerLightWatchData");
//static_assert(sizeof(FCLSPlayerLightWatchData) == 0x0000A0, "Wrong size on FCLSPlayerLightWatchData");
//static_assert(offsetof(FCLSPlayerLightWatchData, FrontLightData) == 0x000050, "Member 'FCLSPlayerLightWatchData::FrontLightData' has a wrong offset!");
//static_assert(offsetof(FCLSPlayerLightWatchData, BackLightData) == 0x000078, "Member 'FCLSPlayerLightWatchData::BackLightData' has a wrong offset!");

// ScriptStruct CustomLightSystem.CLSVolumeWatchData
// 0x0028 (0x0028 - 0x0000)
struct FCLSVolumeWatchData final
{
public:
	bool                                          bValid;                                            // 0x0000(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x7];                                        // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 Name;                                              // 0x0008(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Level;                                             // 0x0018(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         DynamicLevel;                                      // 0x001C(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bInVolume;                                         // 0x0020(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_21[0x3];                                       // 0x0021(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         DistanceToPoint;                                   // 0x0024(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
//static_assert(alignof(FCLSVolumeWatchData) == 0x000008, "Wrong alignment on FCLSVolumeWatchData");
//static_assert(sizeof(FCLSVolumeWatchData) == 0x000028, "Wrong size on FCLSVolumeWatchData");
//static_assert(offsetof(FCLSVolumeWatchData, bValid) == 0x000000, "Member 'FCLSVolumeWatchData::bValid' has a wrong offset!");
//static_assert(offsetof(FCLSVolumeWatchData, Name) == 0x000008, "Member 'FCLSVolumeWatchData::Name' has a wrong offset!");
//static_assert(offsetof(FCLSVolumeWatchData, Level) == 0x000018, "Member 'FCLSVolumeWatchData::Level' has a wrong offset!");
//static_assert(offsetof(FCLSVolumeWatchData, DynamicLevel) == 0x00001C, "Member 'FCLSVolumeWatchData::DynamicLevel' has a wrong offset!");
//static_assert(offsetof(FCLSVolumeWatchData, bInVolume) == 0x000020, "Member 'FCLSVolumeWatchData::bInVolume' has a wrong offset!");
//static_assert(offsetof(FCLSVolumeWatchData, DistanceToPoint) == 0x000024, "Member 'FCLSVolumeWatchData::DistanceToPoint' has a wrong offset!");

// ScriptStruct CustomLightSystem.CLSWatchData
// 0x0290 (0x0290 - 0x0000)
struct FCLSWatchData final
{
public:
	struct FCLSCategoryWatchData                  DirectionalLightData;                              // 0x0000(0x0050)(Edit, BlueprintVisible, BlueprintReadOnly, EditConst, NativeAccessSpecifierPublic)
	struct FCLSCategoryWatchData                  SkyLightData;                                      // 0x0050(0x0050)(Edit, BlueprintVisible, BlueprintReadOnly, EditConst, NativeAccessSpecifierPublic)
	struct FCLSCategoryWatchData                  AtmosphereData;                                    // 0x00A0(0x0050)(Edit, BlueprintVisible, BlueprintReadOnly, EditConst, NativeAccessSpecifierPublic)
	struct FCLSCategoryWatchData                  HeightFogData;                                     // 0x00F0(0x0050)(Edit, BlueprintVisible, BlueprintReadOnly, EditConst, NativeAccessSpecifierPublic)
	struct FCLSCategoryWatchData                  CustomVariableData;                                // 0x0140(0x0050)(Edit, BlueprintVisible, BlueprintReadOnly, EditConst, NativeAccessSpecifierPublic)
	struct FCLSCategoryWatchData                  OtherData;                                         // 0x0190(0x0050)(Edit, BlueprintVisible, BlueprintReadOnly, EditConst, NativeAccessSpecifierPublic)
	struct FCLSPlayerLightWatchData               PlayerLightData;                                   // 0x01E0(0x00A0)(Edit, BlueprintVisible, BlueprintReadOnly, EditConst, NativeAccessSpecifierPublic)
	TArray<struct FCLSVolumeWatchData>            VolumeData;                                        // 0x0280(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, NativeAccessSpecifierPublic)
};
//static_assert(alignof(FCLSWatchData) == 0x000008, "Wrong alignment on FCLSWatchData");
//static_assert(sizeof(FCLSWatchData) == 0x000290, "Wrong size on FCLSWatchData");
//static_assert(offsetof(FCLSWatchData, DirectionalLightData) == 0x000000, "Member 'FCLSWatchData::DirectionalLightData' has a wrong offset!");
//static_assert(offsetof(FCLSWatchData, SkyLightData) == 0x000050, "Member 'FCLSWatchData::SkyLightData' has a wrong offset!");
//static_assert(offsetof(FCLSWatchData, AtmosphereData) == 0x0000A0, "Member 'FCLSWatchData::AtmosphereData' has a wrong offset!");
//static_assert(offsetof(FCLSWatchData, HeightFogData) == 0x0000F0, "Member 'FCLSWatchData::HeightFogData' has a wrong offset!");
//static_assert(offsetof(FCLSWatchData, CustomVariableData) == 0x000140, "Member 'FCLSWatchData::CustomVariableData' has a wrong offset!");
//static_assert(offsetof(FCLSWatchData, OtherData) == 0x000190, "Member 'FCLSWatchData::OtherData' has a wrong offset!");
//static_assert(offsetof(FCLSWatchData, PlayerLightData) == 0x0001E0, "Member 'FCLSWatchData::PlayerLightData' has a wrong offset!");
//static_assert(offsetof(FCLSWatchData, VolumeData) == 0x000280, "Member 'FCLSWatchData::VolumeData' has a wrong offset!");

// ScriptStruct CustomLightSystem.CLSVolumeProcessParameters
// 0x0010 (0x0010 - 0x0000)
struct FCLSVolumeProcessParameters final
{
public:
	TArray<class FString>                         CommandLines;                                      // 0x0000(0x0010)(Edit, BlueprintVisible, ZeroConstructor, EditConst, NativeAccessSpecifierPublic)
};
//static_assert(alignof(FCLSVolumeProcessParameters) == 0x000008, "Wrong alignment on FCLSVolumeProcessParameters");
//static_assert(sizeof(FCLSVolumeProcessParameters) == 0x000010, "Wrong size on FCLSVolumeProcessParameters");
//static_assert(offsetof(FCLSVolumeProcessParameters, CommandLines) == 0x000000, "Member 'FCLSVolumeProcessParameters::CommandLines' has a wrong offset!");

// ScriptStruct CustomLightSystem.CLSMaterialParametersCollectionFloatProperty
// 0x0018 (0x0018 - 0x0000)
struct FCLSMaterialParametersCollectionFloatProperty final
{
public:
	class FString                                 MaterialParameter;                                 // 0x0000(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         FValue;                                            // 0x0010(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_14[0x4];                                       // 0x0014(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
//static_assert(alignof(FCLSMaterialParametersCollectionFloatProperty) == 0x000008, "Wrong alignment on FCLSMaterialParametersCollectionFloatProperty");
//static_assert(sizeof(FCLSMaterialParametersCollectionFloatProperty) == 0x000018, "Wrong size on FCLSMaterialParametersCollectionFloatProperty");
//static_assert(offsetof(FCLSMaterialParametersCollectionFloatProperty, MaterialParameter) == 0x000000, "Member 'FCLSMaterialParametersCollectionFloatProperty::MaterialParameter' has a wrong offset!");
//static_assert(offsetof(FCLSMaterialParametersCollectionFloatProperty, FValue) == 0x000010, "Member 'FCLSMaterialParametersCollectionFloatProperty::FValue' has a wrong offset!");

// ScriptStruct CustomLightSystem.CLSMaterialParametersCollectionVectorProperty
// 0x0020 (0x0020 - 0x0000)
struct FCLSMaterialParametersCollectionVectorProperty final
{
public:
	class FString                                 MaterialParameter;                                 // 0x0000(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FLinearColor                           FValue;                                            // 0x0010(0x0010)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
//static_assert(alignof(FCLSMaterialParametersCollectionVectorProperty) == 0x000008, "Wrong alignment on FCLSMaterialParametersCollectionVectorProperty");
//static_assert(sizeof(FCLSMaterialParametersCollectionVectorProperty) == 0x000020, "Wrong size on FCLSMaterialParametersCollectionVectorProperty");
//static_assert(offsetof(FCLSMaterialParametersCollectionVectorProperty, MaterialParameter) == 0x000000, "Member 'FCLSMaterialParametersCollectionVectorProperty::MaterialParameter' has a wrong offset!");
//static_assert(offsetof(FCLSMaterialParametersCollectionVectorProperty, FValue) == 0x000010, "Member 'FCLSMaterialParametersCollectionVectorProperty::FValue' has a wrong offset!");

// ScriptStruct CustomLightSystem.CLSMaterialParametersCollectionProperty
// 0x0020 (0x0020 - 0x0000)
struct FCLSMaterialParametersCollectionProperty final
{
public:
	TArray<struct FCLSMaterialParametersCollectionFloatProperty> MaterialParametersCollectionFloatProperty;         // 0x0000(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<struct FCLSMaterialParametersCollectionVectorProperty> MaterialParametersCollectionVectorProperty;        // 0x0010(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
};
//static_assert(alignof(FCLSMaterialParametersCollectionProperty) == 0x000008, "Wrong alignment on FCLSMaterialParametersCollectionProperty");
//static_assert(sizeof(FCLSMaterialParametersCollectionProperty) == 0x000020, "Wrong size on FCLSMaterialParametersCollectionProperty");
//static_assert(offsetof(FCLSMaterialParametersCollectionProperty, MaterialParametersCollectionFloatProperty) == 0x000000, "Member 'FCLSMaterialParametersCollectionProperty::MaterialParametersCollectionFloatProperty' has a wrong offset!");
//static_assert(offsetof(FCLSMaterialParametersCollectionProperty, MaterialParametersCollectionVectorProperty) == 0x000010, "Member 'FCLSMaterialParametersCollectionProperty::MaterialParametersCollectionVectorProperty' has a wrong offset!");

// ScriptStruct CustomLightSystem.CLSPlayerLightProperty
// 0x0054 (0x0054 - 0x0000)
struct FCLSPlayerLightProperty final
{
public:
	bool                                          bEnable;                                           // 0x0000(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x3];                                        // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FCLSPlayerLightDataBase                FrontLightData;                                    // 0x0004(0x0028)(Edit, BlueprintVisible, NoDestructor, NativeAccessSpecifierPublic)
	struct FCLSPlayerLightDataBase                BackLightData;                                     // 0x002C(0x0028)(Edit, BlueprintVisible, NoDestructor, NativeAccessSpecifierPublic)
};
//static_assert(alignof(FCLSPlayerLightProperty) == 0x000004, "Wrong alignment on FCLSPlayerLightProperty");
//static_assert(sizeof(FCLSPlayerLightProperty) == 0x000054, "Wrong size on FCLSPlayerLightProperty");
//static_assert(offsetof(FCLSPlayerLightProperty, bEnable) == 0x000000, "Member 'FCLSPlayerLightProperty::bEnable' has a wrong offset!");
//static_assert(offsetof(FCLSPlayerLightProperty, FrontLightData) == 0x000004, "Member 'FCLSPlayerLightProperty::FrontLightData' has a wrong offset!");
//static_assert(offsetof(FCLSPlayerLightProperty, BackLightData) == 0x00002C, "Member 'FCLSPlayerLightProperty::BackLightData' has a wrong offset!");

// ScriptStruct CustomLightSystem.CLSTagData
// 0x000C (0x000C - 0x0000)
struct FCLSTagData final
{
public:
	int32                                         LightManagerID;                                    // 0x0000(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Index;                                             // 0x0004(0x0004)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         CLSComponentType;                                  // 0x0008(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
//static_assert(alignof(FCLSTagData) == 0x000004, "Wrong alignment on FCLSTagData");
//static_assert(sizeof(FCLSTagData) == 0x00000C, "Wrong size on FCLSTagData");
//static_assert(offsetof(FCLSTagData, LightManagerID) == 0x000000, "Member 'FCLSTagData::LightManagerID' has a wrong offset!");
//static_assert(offsetof(FCLSTagData, Index) == 0x000004, "Member 'FCLSTagData::Index' has a wrong offset!");
//static_assert(offsetof(FCLSTagData, CLSComponentType) == 0x000008, "Member 'FCLSTagData::CLSComponentType' has a wrong offset!");

}

