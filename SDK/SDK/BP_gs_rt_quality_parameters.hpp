#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: BP_gs_rt_quality

#include "Basic.hpp"

#include "RT_Parameters_structs.hpp"
#include "Enum_RT_Quality_Preset_structs.hpp"


namespace SDK::Params
{

// Function BP_gs_rt_quality.BP_gs_rt_quality_C.ExecuteUbergraph_BP_gs_rt_quality
// 0x0010 (0x0010 - 0x0000)
struct BP_gs_rt_quality_C_ExecuteUbergraph_BP_gs_rt_quality final
{
public:
	int32                                         EntryPoint;                                        // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	Enum_RT_Quality_Preset                        Temp_byte_Variable;                                // 0x0004(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	Enum_RT_Quality_Preset                        Temp_byte_Variable_1;                              // 0x0005(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         K2Node_Event_Quality;                              // 0x0006(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_Event_bInEnable;                            // 0x0007(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         CallFunc_GetValidValue_ReturnValue;                // 0x0008(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_Event_bEnable;                              // 0x0009(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_NotEqual_ByteByte_ReturnValue;            // 0x000A(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_EqualEqual_ByteByte_ReturnValue;          // 0x000B(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Temp_bool_Variable;                                // 0x000C(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	Enum_RT_Quality_Preset                        K2Node_Select_Default;                             // 0x000D(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_EqualEqual_ByteByte_ReturnValue_1;        // 0x000E(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
//static_assert(alignof(BP_gs_rt_quality_C_ExecuteUbergraph_BP_gs_rt_quality) == 0x000004, "Wrong alignment on BP_gs_rt_quality_C_ExecuteUbergraph_BP_gs_rt_quality");
//static_assert(sizeof(BP_gs_rt_quality_C_ExecuteUbergraph_BP_gs_rt_quality) == 0x000010, "Wrong size on BP_gs_rt_quality_C_ExecuteUbergraph_BP_gs_rt_quality");
//static_assert(offsetof(BP_gs_rt_quality_C_ExecuteUbergraph_BP_gs_rt_quality, EntryPoint) == 0x000000, "Member 'BP_gs_rt_quality_C_ExecuteUbergraph_BP_gs_rt_quality::EntryPoint' has a wrong offset!");
//static_assert(offsetof(BP_gs_rt_quality_C_ExecuteUbergraph_BP_gs_rt_quality, Temp_byte_Variable) == 0x000004, "Member 'BP_gs_rt_quality_C_ExecuteUbergraph_BP_gs_rt_quality::Temp_byte_Variable' has a wrong offset!");
//static_assert(offsetof(BP_gs_rt_quality_C_ExecuteUbergraph_BP_gs_rt_quality, Temp_byte_Variable_1) == 0x000005, "Member 'BP_gs_rt_quality_C_ExecuteUbergraph_BP_gs_rt_quality::Temp_byte_Variable_1' has a wrong offset!");
//static_assert(offsetof(BP_gs_rt_quality_C_ExecuteUbergraph_BP_gs_rt_quality, K2Node_Event_Quality) == 0x000006, "Member 'BP_gs_rt_quality_C_ExecuteUbergraph_BP_gs_rt_quality::K2Node_Event_Quality' has a wrong offset!");
//static_assert(offsetof(BP_gs_rt_quality_C_ExecuteUbergraph_BP_gs_rt_quality, K2Node_Event_bInEnable) == 0x000007, "Member 'BP_gs_rt_quality_C_ExecuteUbergraph_BP_gs_rt_quality::K2Node_Event_bInEnable' has a wrong offset!");
//static_assert(offsetof(BP_gs_rt_quality_C_ExecuteUbergraph_BP_gs_rt_quality, CallFunc_GetValidValue_ReturnValue) == 0x000008, "Member 'BP_gs_rt_quality_C_ExecuteUbergraph_BP_gs_rt_quality::CallFunc_GetValidValue_ReturnValue' has a wrong offset!");
//static_assert(offsetof(BP_gs_rt_quality_C_ExecuteUbergraph_BP_gs_rt_quality, K2Node_Event_bEnable) == 0x000009, "Member 'BP_gs_rt_quality_C_ExecuteUbergraph_BP_gs_rt_quality::K2Node_Event_bEnable' has a wrong offset!");
//static_assert(offsetof(BP_gs_rt_quality_C_ExecuteUbergraph_BP_gs_rt_quality, CallFunc_NotEqual_ByteByte_ReturnValue) == 0x00000A, "Member 'BP_gs_rt_quality_C_ExecuteUbergraph_BP_gs_rt_quality::CallFunc_NotEqual_ByteByte_ReturnValue' has a wrong offset!");
//static_assert(offsetof(BP_gs_rt_quality_C_ExecuteUbergraph_BP_gs_rt_quality, CallFunc_EqualEqual_ByteByte_ReturnValue) == 0x00000B, "Member 'BP_gs_rt_quality_C_ExecuteUbergraph_BP_gs_rt_quality::CallFunc_EqualEqual_ByteByte_ReturnValue' has a wrong offset!");
//static_assert(offsetof(BP_gs_rt_quality_C_ExecuteUbergraph_BP_gs_rt_quality, Temp_bool_Variable) == 0x00000C, "Member 'BP_gs_rt_quality_C_ExecuteUbergraph_BP_gs_rt_quality::Temp_bool_Variable' has a wrong offset!");
//static_assert(offsetof(BP_gs_rt_quality_C_ExecuteUbergraph_BP_gs_rt_quality, K2Node_Select_Default) == 0x00000D, "Member 'BP_gs_rt_quality_C_ExecuteUbergraph_BP_gs_rt_quality::K2Node_Select_Default' has a wrong offset!");
//static_assert(offsetof(BP_gs_rt_quality_C_ExecuteUbergraph_BP_gs_rt_quality, CallFunc_EqualEqual_ByteByte_ReturnValue_1) == 0x00000E, "Member 'BP_gs_rt_quality_C_ExecuteUbergraph_BP_gs_rt_quality::CallFunc_EqualEqual_ByteByte_ReturnValue_1' has a wrong offset!");

// Function BP_gs_rt_quality.BP_gs_rt_quality_C.ForceUpdateRTX
// 0xF690 (0xF690 - 0x0000)
struct BP_gs_rt_quality_C_ForceUpdateRTX final
{
public:
	struct FRT_Parameters                         K2Node_MakeStruct_RT_Parameters;                   // 0x0000(0x1ED0)(HasGetValueTypeHash)
	struct FRT_Parameters                         K2Node_MakeStruct_RT_Parameters_1;                 // 0x1ED0(0x1ED0)(HasGetValueTypeHash)
	struct FRT_Parameters                         K2Node_MakeStruct_RT_Parameters_2;                 // 0x3DA0(0x1ED0)(HasGetValueTypeHash)
	struct FRT_Parameters                         K2Node_MakeStruct_RT_Parameters_3;                 // 0x5C70(0x1ED0)(HasGetValueTypeHash)
	bool                                          K2Node_SwitchEnum_CmpSuccess;                      // 0x7B40(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_7B41[0xF];                                     // 0x7B41(0x000F)(Fixing Size After Last Property [ Dumper-7 ])
	struct FRT_Parameters                         K2Node_MakeStruct_RT_Parameters_4;                 // 0x7B50(0x1ED0)(HasGetValueTypeHash)
	struct FRT_Parameters                         K2Node_MakeStruct_RT_Parameters_5;                 // 0x9A20(0x1ED0)(HasGetValueTypeHash)
	struct FRT_Parameters                         K2Node_MakeStruct_RT_Parameters_6;                 // 0xB8F0(0x1ED0)(HasGetValueTypeHash)
	struct FRT_Parameters                         K2Node_MakeStruct_RT_Parameters_7;                 // 0xD7C0(0x1ED0)(HasGetValueTypeHash)
};
//static_assert(alignof(BP_gs_rt_quality_C_ForceUpdateRTX) == 0x000010, "Wrong alignment on BP_gs_rt_quality_C_ForceUpdateRTX");
//static_assert(sizeof(BP_gs_rt_quality_C_ForceUpdateRTX) == 0x00F690, "Wrong size on BP_gs_rt_quality_C_ForceUpdateRTX");
//static_assert(offsetof(BP_gs_rt_quality_C_ForceUpdateRTX, K2Node_MakeStruct_RT_Parameters) == 0x000000, "Member 'BP_gs_rt_quality_C_ForceUpdateRTX::K2Node_MakeStruct_RT_Parameters' has a wrong offset!");
//static_assert(offsetof(BP_gs_rt_quality_C_ForceUpdateRTX, K2Node_MakeStruct_RT_Parameters_1) == 0x001ED0, "Member 'BP_gs_rt_quality_C_ForceUpdateRTX::K2Node_MakeStruct_RT_Parameters_1' has a wrong offset!");
//static_assert(offsetof(BP_gs_rt_quality_C_ForceUpdateRTX, K2Node_MakeStruct_RT_Parameters_2) == 0x003DA0, "Member 'BP_gs_rt_quality_C_ForceUpdateRTX::K2Node_MakeStruct_RT_Parameters_2' has a wrong offset!");
//static_assert(offsetof(BP_gs_rt_quality_C_ForceUpdateRTX, K2Node_MakeStruct_RT_Parameters_3) == 0x005C70, "Member 'BP_gs_rt_quality_C_ForceUpdateRTX::K2Node_MakeStruct_RT_Parameters_3' has a wrong offset!");
//static_assert(offsetof(BP_gs_rt_quality_C_ForceUpdateRTX, K2Node_SwitchEnum_CmpSuccess) == 0x007B40, "Member 'BP_gs_rt_quality_C_ForceUpdateRTX::K2Node_SwitchEnum_CmpSuccess' has a wrong offset!");
//static_assert(offsetof(BP_gs_rt_quality_C_ForceUpdateRTX, K2Node_MakeStruct_RT_Parameters_4) == 0x007B50, "Member 'BP_gs_rt_quality_C_ForceUpdateRTX::K2Node_MakeStruct_RT_Parameters_4' has a wrong offset!");
//static_assert(offsetof(BP_gs_rt_quality_C_ForceUpdateRTX, K2Node_MakeStruct_RT_Parameters_5) == 0x009A20, "Member 'BP_gs_rt_quality_C_ForceUpdateRTX::K2Node_MakeStruct_RT_Parameters_5' has a wrong offset!");
//static_assert(offsetof(BP_gs_rt_quality_C_ForceUpdateRTX, K2Node_MakeStruct_RT_Parameters_6) == 0x00B8F0, "Member 'BP_gs_rt_quality_C_ForceUpdateRTX::K2Node_MakeStruct_RT_Parameters_6' has a wrong offset!");
//static_assert(offsetof(BP_gs_rt_quality_C_ForceUpdateRTX, K2Node_MakeStruct_RT_Parameters_7) == 0x00D7C0, "Member 'BP_gs_rt_quality_C_ForceUpdateRTX::K2Node_MakeStruct_RT_Parameters_7' has a wrong offset!");

// Function BP_gs_rt_quality.BP_gs_rt_quality_C.GetRTXQuality
// 0x0001 (0x0001 - 0x0000)
struct BP_gs_rt_quality_C_GetRTXQuality final
{
public:
	uint8                                         ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
//static_assert(alignof(BP_gs_rt_quality_C_GetRTXQuality) == 0x000001, "Wrong alignment on BP_gs_rt_quality_C_GetRTXQuality");
//static_assert(sizeof(BP_gs_rt_quality_C_GetRTXQuality) == 0x000001, "Wrong size on BP_gs_rt_quality_C_GetRTXQuality");
//static_assert(offsetof(BP_gs_rt_quality_C_GetRTXQuality, ReturnValue) == 0x000000, "Member 'BP_gs_rt_quality_C_GetRTXQuality::ReturnValue' has a wrong offset!");

// Function BP_gs_rt_quality.BP_gs_rt_quality_C.IsDLSSRREnabled
// 0x0002 (0x0002 - 0x0000)
struct BP_gs_rt_quality_C_IsDLSSRREnabled final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsDLSSRREnabled_ReturnValue;              // 0x0001(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
//static_assert(alignof(BP_gs_rt_quality_C_IsDLSSRREnabled) == 0x000001, "Wrong alignment on BP_gs_rt_quality_C_IsDLSSRREnabled");
//static_assert(sizeof(BP_gs_rt_quality_C_IsDLSSRREnabled) == 0x000002, "Wrong size on BP_gs_rt_quality_C_IsDLSSRREnabled");
//static_assert(offsetof(BP_gs_rt_quality_C_IsDLSSRREnabled, ReturnValue) == 0x000000, "Member 'BP_gs_rt_quality_C_IsDLSSRREnabled::ReturnValue' has a wrong offset!");
//static_assert(offsetof(BP_gs_rt_quality_C_IsDLSSRREnabled, CallFunc_IsDLSSRREnabled_ReturnValue) == 0x000001, "Member 'BP_gs_rt_quality_C_IsDLSSRREnabled::CallFunc_IsDLSSRREnabled_ReturnValue' has a wrong offset!");

// Function BP_gs_rt_quality.BP_gs_rt_quality_C.IsRTXEnabled
// 0x0002 (0x0002 - 0x0000)
struct BP_gs_rt_quality_C_IsRTXEnabled final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_NotEqual_ByteByte_ReturnValue;            // 0x0001(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
//static_assert(alignof(BP_gs_rt_quality_C_IsRTXEnabled) == 0x000001, "Wrong alignment on BP_gs_rt_quality_C_IsRTXEnabled");
//static_assert(sizeof(BP_gs_rt_quality_C_IsRTXEnabled) == 0x000002, "Wrong size on BP_gs_rt_quality_C_IsRTXEnabled");
//static_assert(offsetof(BP_gs_rt_quality_C_IsRTXEnabled, ReturnValue) == 0x000000, "Member 'BP_gs_rt_quality_C_IsRTXEnabled::ReturnValue' has a wrong offset!");
//static_assert(offsetof(BP_gs_rt_quality_C_IsRTXEnabled, CallFunc_NotEqual_ByteByte_ReturnValue) == 0x000001, "Member 'BP_gs_rt_quality_C_IsRTXEnabled::CallFunc_NotEqual_ByteByte_ReturnValue' has a wrong offset!");

// Function BP_gs_rt_quality.BP_gs_rt_quality_C.SetDlssRREnable
// 0x0001 (0x0001 - 0x0000)
struct BP_gs_rt_quality_C_SetDlssRREnable final
{
public:
	bool                                          bEnable;                                           // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
//static_assert(alignof(BP_gs_rt_quality_C_SetDlssRREnable) == 0x000001, "Wrong alignment on BP_gs_rt_quality_C_SetDlssRREnable");
//static_assert(sizeof(BP_gs_rt_quality_C_SetDlssRREnable) == 0x000001, "Wrong size on BP_gs_rt_quality_C_SetDlssRREnable");
//static_assert(offsetof(BP_gs_rt_quality_C_SetDlssRREnable, bEnable) == 0x000000, "Member 'BP_gs_rt_quality_C_SetDlssRREnable::bEnable' has a wrong offset!");

// Function BP_gs_rt_quality.BP_gs_rt_quality_C.SetRTXEnabled
// 0x0001 (0x0001 - 0x0000)
struct BP_gs_rt_quality_C_SetRTXEnabled final
{
public:
	bool                                          bInEnable;                                         // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
//static_assert(alignof(BP_gs_rt_quality_C_SetRTXEnabled) == 0x000001, "Wrong alignment on BP_gs_rt_quality_C_SetRTXEnabled");
//static_assert(sizeof(BP_gs_rt_quality_C_SetRTXEnabled) == 0x000001, "Wrong size on BP_gs_rt_quality_C_SetRTXEnabled");
//static_assert(offsetof(BP_gs_rt_quality_C_SetRTXEnabled, bInEnable) == 0x000000, "Member 'BP_gs_rt_quality_C_SetRTXEnabled::bInEnable' has a wrong offset!");

// Function BP_gs_rt_quality.BP_gs_rt_quality_C.SetRTXQuality
// 0x0001 (0x0001 - 0x0000)
struct BP_gs_rt_quality_C_SetRTXQuality final
{
public:
	uint8                                         Quality;                                           // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
//static_assert(alignof(BP_gs_rt_quality_C_SetRTXQuality) == 0x000001, "Wrong alignment on BP_gs_rt_quality_C_SetRTXQuality");
//static_assert(sizeof(BP_gs_rt_quality_C_SetRTXQuality) == 0x000001, "Wrong size on BP_gs_rt_quality_C_SetRTXQuality");
//static_assert(offsetof(BP_gs_rt_quality_C_SetRTXQuality, Quality) == 0x000000, "Member 'BP_gs_rt_quality_C_SetRTXQuality::Quality' has a wrong offset!");

}

