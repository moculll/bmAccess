#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: SpiderNavigation

#include "Basic.hpp"

#include "Engine_classes.hpp"
#include "CoreUObject_structs.hpp"
#include "SpiderNavigation_structs.hpp"


namespace SDK
{

// Class SpiderNavigation.SpiderNavGridBuilder
// 0x0150 (0x03C8 - 0x0278)
class ASpiderNavGridBuilder final : public AActor
{
public:
	class UBoxComponent*                          VolumeBox;                                         // 0x0278(0x0008)(Edit, ExportObject, ZeroConstructor, EditConst, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TSubclassOf<class ASpiderNavGridTracer>       TracerActorBP;                                     // 0x0280(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TSubclassOf<class ASpiderNavPoint>            NavPointActorBP;                                   // 0x0288(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TSubclassOf<class ASpiderNavPointEdge>        NavPointEdgeActorBP;                               // 0x0290(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         GridStepSize;                                      // 0x0298(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_29C[0x4];                                      // 0x029C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<class AActor*>                         ActorsWhiteList;                                   // 0x02A0(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
	bool                                          bUseActorWhiteList;                                // 0x02B0(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2B1[0x7];                                      // 0x02B1(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<class AActor*>                         ActorsBlackList;                                   // 0x02B8(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
	bool                                          bUseActorBlackList;                                // 0x02C8(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bAutoRemoveTracers;                                // 0x02C9(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bAutoSaveGrid;                                     // 0x02CA(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2CB[0x1];                                      // 0x02CB(0x0001)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         BounceNavDistance;                                 // 0x02CC(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         TraceDistanceModificator;                          // 0x02D0(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         ClosePointsFilterModificator;                      // 0x02D4(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         ConnectionSphereRadiusModificator;                 // 0x02D8(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         TraceDistanceForEdgesModificator;                  // 0x02DC(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         EgdeDeviationModificator;                          // 0x02E0(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bSingleDirectionTrace;                             // 0x02E4(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2E5[0xE3];                                     // 0x02E5(0x00E3)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	int32 BuildGrid();
	void DrawDebugRelations();
	void SaveGrid();

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"SpiderNavGridBuilder">();
	}
	static class ASpiderNavGridBuilder* GetDefaultObj()
	{
		return GetDefaultObjImpl<ASpiderNavGridBuilder>();
	}
};
//static_assert(alignof(ASpiderNavGridBuilder) == 0x000008, "Wrong alignment on ASpiderNavGridBuilder");
//static_assert(sizeof(ASpiderNavGridBuilder) == 0x0003C8, "Wrong size on ASpiderNavGridBuilder");
//static_assert(offsetof(ASpiderNavGridBuilder, VolumeBox) == 0x000278, "Member 'ASpiderNavGridBuilder::VolumeBox' has a wrong offset!");
//static_assert(offsetof(ASpiderNavGridBuilder, TracerActorBP) == 0x000280, "Member 'ASpiderNavGridBuilder::TracerActorBP' has a wrong offset!");
//static_assert(offsetof(ASpiderNavGridBuilder, NavPointActorBP) == 0x000288, "Member 'ASpiderNavGridBuilder::NavPointActorBP' has a wrong offset!");
//static_assert(offsetof(ASpiderNavGridBuilder, NavPointEdgeActorBP) == 0x000290, "Member 'ASpiderNavGridBuilder::NavPointEdgeActorBP' has a wrong offset!");
//static_assert(offsetof(ASpiderNavGridBuilder, GridStepSize) == 0x000298, "Member 'ASpiderNavGridBuilder::GridStepSize' has a wrong offset!");
//static_assert(offsetof(ASpiderNavGridBuilder, ActorsWhiteList) == 0x0002A0, "Member 'ASpiderNavGridBuilder::ActorsWhiteList' has a wrong offset!");
//static_assert(offsetof(ASpiderNavGridBuilder, bUseActorWhiteList) == 0x0002B0, "Member 'ASpiderNavGridBuilder::bUseActorWhiteList' has a wrong offset!");
//static_assert(offsetof(ASpiderNavGridBuilder, ActorsBlackList) == 0x0002B8, "Member 'ASpiderNavGridBuilder::ActorsBlackList' has a wrong offset!");
//static_assert(offsetof(ASpiderNavGridBuilder, bUseActorBlackList) == 0x0002C8, "Member 'ASpiderNavGridBuilder::bUseActorBlackList' has a wrong offset!");
//static_assert(offsetof(ASpiderNavGridBuilder, bAutoRemoveTracers) == 0x0002C9, "Member 'ASpiderNavGridBuilder::bAutoRemoveTracers' has a wrong offset!");
//static_assert(offsetof(ASpiderNavGridBuilder, bAutoSaveGrid) == 0x0002CA, "Member 'ASpiderNavGridBuilder::bAutoSaveGrid' has a wrong offset!");
//static_assert(offsetof(ASpiderNavGridBuilder, BounceNavDistance) == 0x0002CC, "Member 'ASpiderNavGridBuilder::BounceNavDistance' has a wrong offset!");
//static_assert(offsetof(ASpiderNavGridBuilder, TraceDistanceModificator) == 0x0002D0, "Member 'ASpiderNavGridBuilder::TraceDistanceModificator' has a wrong offset!");
//static_assert(offsetof(ASpiderNavGridBuilder, ClosePointsFilterModificator) == 0x0002D4, "Member 'ASpiderNavGridBuilder::ClosePointsFilterModificator' has a wrong offset!");
//static_assert(offsetof(ASpiderNavGridBuilder, ConnectionSphereRadiusModificator) == 0x0002D8, "Member 'ASpiderNavGridBuilder::ConnectionSphereRadiusModificator' has a wrong offset!");
//static_assert(offsetof(ASpiderNavGridBuilder, TraceDistanceForEdgesModificator) == 0x0002DC, "Member 'ASpiderNavGridBuilder::TraceDistanceForEdgesModificator' has a wrong offset!");
//static_assert(offsetof(ASpiderNavGridBuilder, EgdeDeviationModificator) == 0x0002E0, "Member 'ASpiderNavGridBuilder::EgdeDeviationModificator' has a wrong offset!");
//static_assert(offsetof(ASpiderNavGridBuilder, bSingleDirectionTrace) == 0x0002E4, "Member 'ASpiderNavGridBuilder::bSingleDirectionTrace' has a wrong offset!");

// Class SpiderNavigation.SpiderNavGridSaveGame
// 0x0108 (0x0130 - 0x0028)
class USpiderNavGridSaveGame final : public USaveGame
{
public:
	TMap<int32, struct FVector>                   NavLocations;                                      // 0x0028(0x0050)(NativeAccessSpecifierPublic)
	TMap<int32, struct FVector>                   NavNormals;                                        // 0x0078(0x0050)(NativeAccessSpecifierPublic)
	TMap<int32, struct FSpiderNavRelations>       NavRelations;                                      // 0x00C8(0x0050)(NativeAccessSpecifierPublic)
	class FString                                 SaveSlotName;                                      // 0x0118(0x0010)(ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint32                                        UserIndex;                                         // 0x0128(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_12C[0x4];                                      // 0x012C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"SpiderNavGridSaveGame">();
	}
	static class USpiderNavGridSaveGame* GetDefaultObj()
	{
		return GetDefaultObjImpl<USpiderNavGridSaveGame>();
	}
};
//static_assert(alignof(USpiderNavGridSaveGame) == 0x000008, "Wrong alignment on USpiderNavGridSaveGame");
//static_assert(sizeof(USpiderNavGridSaveGame) == 0x000130, "Wrong size on USpiderNavGridSaveGame");
//static_assert(offsetof(USpiderNavGridSaveGame, NavLocations) == 0x000028, "Member 'USpiderNavGridSaveGame::NavLocations' has a wrong offset!");
//static_assert(offsetof(USpiderNavGridSaveGame, NavNormals) == 0x000078, "Member 'USpiderNavGridSaveGame::NavNormals' has a wrong offset!");
//static_assert(offsetof(USpiderNavGridSaveGame, NavRelations) == 0x0000C8, "Member 'USpiderNavGridSaveGame::NavRelations' has a wrong offset!");
//static_assert(offsetof(USpiderNavGridSaveGame, SaveSlotName) == 0x000118, "Member 'USpiderNavGridSaveGame::SaveSlotName' has a wrong offset!");
//static_assert(offsetof(USpiderNavGridSaveGame, UserIndex) == 0x000128, "Member 'USpiderNavGridSaveGame::UserIndex' has a wrong offset!");

// Class SpiderNavigation.SpiderNavGridTracer
// 0x0008 (0x0280 - 0x0278)
class ASpiderNavGridTracer final : public AActor
{
public:
	class USphereComponent*                       CollisionComp;                                     // 0x0278(0x0008)(Edit, BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"SpiderNavGridTracer">();
	}
	static class ASpiderNavGridTracer* GetDefaultObj()
	{
		return GetDefaultObjImpl<ASpiderNavGridTracer>();
	}
};
//static_assert(alignof(ASpiderNavGridTracer) == 0x000008, "Wrong alignment on ASpiderNavGridTracer");
//static_assert(sizeof(ASpiderNavGridTracer) == 0x000280, "Wrong size on ASpiderNavGridTracer");
//static_assert(offsetof(ASpiderNavGridTracer, CollisionComp) == 0x000278, "Member 'ASpiderNavGridTracer::CollisionComp' has a wrong offset!");

// Class SpiderNavigation.SpiderNavigation
// 0x0078 (0x02F0 - 0x0278)
class ASpiderNavigation final : public AActor
{
public:
	uint8                                         Pad_278[0x70];                                     // 0x0278(0x0070)(Fixing Size After Last Property [ Dumper-7 ])
	bool                                          bAutoLoadGrid;                                     // 0x02E8(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2E9[0x3];                                      // 0x02E9(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         DebugLinesThickness;                               // 0x02EC(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

public:
	void DrawDebugRelations();
	struct FVector FindClosestNodeLocation(const struct FVector& Location);
	struct FVector FindClosestNodeNormal(const struct FVector& Location);
	bool FindNextLocationAndNormal(const struct FVector& CurrentLocation, const struct FVector& TargetLocation, struct FVector* NextLocation, struct FVector* Normal);
	TArray<struct FVector> FindPath(const struct FVector& Start, const struct FVector& End, bool* bFoundCompletePath);
	int32 GetNavNodesCount();
	bool LoadGrid();

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"SpiderNavigation">();
	}
	static class ASpiderNavigation* GetDefaultObj()
	{
		return GetDefaultObjImpl<ASpiderNavigation>();
	}
};
//static_assert(alignof(ASpiderNavigation) == 0x000008, "Wrong alignment on ASpiderNavigation");
//static_assert(sizeof(ASpiderNavigation) == 0x0002F0, "Wrong size on ASpiderNavigation");
//static_assert(offsetof(ASpiderNavigation, bAutoLoadGrid) == 0x0002E8, "Member 'ASpiderNavigation::bAutoLoadGrid' has a wrong offset!");
//static_assert(offsetof(ASpiderNavigation, DebugLinesThickness) == 0x0002EC, "Member 'ASpiderNavigation::DebugLinesThickness' has a wrong offset!");

// Class SpiderNavigation.SpiderNavPoint
// 0x0040 (0x02B8 - 0x0278)
class ASpiderNavPoint : public AActor
{
public:
	class USphereComponent*                       CollisionComp;                                     // 0x0278(0x0008)(Edit, BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_280[0x38];                                     // 0x0280(0x0038)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"SpiderNavPoint">();
	}
	static class ASpiderNavPoint* GetDefaultObj()
	{
		return GetDefaultObjImpl<ASpiderNavPoint>();
	}
};
//static_assert(alignof(ASpiderNavPoint) == 0x000008, "Wrong alignment on ASpiderNavPoint");
//static_assert(sizeof(ASpiderNavPoint) == 0x0002B8, "Wrong size on ASpiderNavPoint");
//static_assert(offsetof(ASpiderNavPoint, CollisionComp) == 0x000278, "Member 'ASpiderNavPoint::CollisionComp' has a wrong offset!");

// Class SpiderNavigation.SpiderNavPointEdge
// 0x0000 (0x02B8 - 0x02B8)
class ASpiderNavPointEdge final : public ASpiderNavPoint
{
public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"SpiderNavPointEdge">();
	}
	static class ASpiderNavPointEdge* GetDefaultObj()
	{
		return GetDefaultObjImpl<ASpiderNavPointEdge>();
	}
};
//static_assert(alignof(ASpiderNavPointEdge) == 0x000008, "Wrong alignment on ASpiderNavPointEdge");
//static_assert(sizeof(ASpiderNavPointEdge) == 0x0002B8, "Wrong size on ASpiderNavPointEdge");

}

