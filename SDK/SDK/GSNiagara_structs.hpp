#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: GSNiagara

#include "Basic.hpp"

#include "CoreUObject_structs.hpp"


namespace SDK
{

// ScriptStruct GSNiagara.GSNiagaraParticleInfoConfig
// 0x0038 (0x0038 - 0x0000)
struct FGSNiagaraParticleInfoConfig final
{
public:
	int32                                         ParticleType;                                      // 0x0000(0x0004)(Edit, BlueprintVisible, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bParticleLifetimeLoop;                             // 0x0004(0x0001)(Edit, BlueprintVisible, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_5[0x3];                                        // 0x0005(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector2D                              ParticleSpriteSize;                                // 0x0008(0x0010)(Edit, BlueprintVisible, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector2D                              ParticleSpriteOffset;                              // 0x0018(0x0010)(Edit, BlueprintVisible, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 ParticleConfigRemark;                              // 0x0028(0x0010)(Edit, BlueprintVisible, ZeroConstructor, EditConst, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
//static_assert(alignof(FGSNiagaraParticleInfoConfig) == 0x000008, "Wrong alignment on FGSNiagaraParticleInfoConfig");
//static_assert(sizeof(FGSNiagaraParticleInfoConfig) == 0x000038, "Wrong size on FGSNiagaraParticleInfoConfig");
//static_assert(offsetof(FGSNiagaraParticleInfoConfig, ParticleType) == 0x000000, "Member 'FGSNiagaraParticleInfoConfig::ParticleType' has a wrong offset!");
//static_assert(offsetof(FGSNiagaraParticleInfoConfig, bParticleLifetimeLoop) == 0x000004, "Member 'FGSNiagaraParticleInfoConfig::bParticleLifetimeLoop' has a wrong offset!");
//static_assert(offsetof(FGSNiagaraParticleInfoConfig, ParticleSpriteSize) == 0x000008, "Member 'FGSNiagaraParticleInfoConfig::ParticleSpriteSize' has a wrong offset!");
//static_assert(offsetof(FGSNiagaraParticleInfoConfig, ParticleSpriteOffset) == 0x000018, "Member 'FGSNiagaraParticleInfoConfig::ParticleSpriteOffset' has a wrong offset!");
//static_assert(offsetof(FGSNiagaraParticleInfoConfig, ParticleConfigRemark) == 0x000028, "Member 'FGSNiagaraParticleInfoConfig::ParticleConfigRemark' has a wrong offset!");

// ScriptStruct GSNiagara.GSNiagaraParticleSpriteMapping
// 0x0004 (0x0004 - 0x0000)
struct FGSNiagaraParticleSpriteMapping final
{
public:
	int32                                         SpriteIndex;                                       // 0x0000(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
//static_assert(alignof(FGSNiagaraParticleSpriteMapping) == 0x000004, "Wrong alignment on FGSNiagaraParticleSpriteMapping");
//static_assert(sizeof(FGSNiagaraParticleSpriteMapping) == 0x000004, "Wrong size on FGSNiagaraParticleSpriteMapping");
//static_assert(offsetof(FGSNiagaraParticleSpriteMapping, SpriteIndex) == 0x000000, "Member 'FGSNiagaraParticleSpriteMapping::SpriteIndex' has a wrong offset!");

// ScriptStruct GSNiagara.GSNiagaraParticleInfo
// 0x0050 (0x0050 - 0x0000)
struct FGSNiagaraParticleInfo final
{
public:
	int32                                         ParticleType;                                      // 0x0000(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_4[0x4];                                        // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                Position;                                          // 0x0008(0x0018)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                Size;                                              // 0x0020(0x0018)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Duration;                                          // 0x0038(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FLinearColor                           Color;                                             // 0x003C(0x0010)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Intensity;                                         // 0x004C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
//static_assert(alignof(FGSNiagaraParticleInfo) == 0x000008, "Wrong alignment on FGSNiagaraParticleInfo");
//static_assert(sizeof(FGSNiagaraParticleInfo) == 0x000050, "Wrong size on FGSNiagaraParticleInfo");
//static_assert(offsetof(FGSNiagaraParticleInfo, ParticleType) == 0x000000, "Member 'FGSNiagaraParticleInfo::ParticleType' has a wrong offset!");
//static_assert(offsetof(FGSNiagaraParticleInfo, Position) == 0x000008, "Member 'FGSNiagaraParticleInfo::Position' has a wrong offset!");
//static_assert(offsetof(FGSNiagaraParticleInfo, Size) == 0x000020, "Member 'FGSNiagaraParticleInfo::Size' has a wrong offset!");
//static_assert(offsetof(FGSNiagaraParticleInfo, Duration) == 0x000038, "Member 'FGSNiagaraParticleInfo::Duration' has a wrong offset!");
//static_assert(offsetof(FGSNiagaraParticleInfo, Color) == 0x00003C, "Member 'FGSNiagaraParticleInfo::Color' has a wrong offset!");
//static_assert(offsetof(FGSNiagaraParticleInfo, Intensity) == 0x00004C, "Member 'FGSNiagaraParticleInfo::Intensity' has a wrong offset!");

}

