#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: UnrealExtent

#include "Basic.hpp"

#include "CoreUObject_structs.hpp"
#include "SlateCore_structs.hpp"
#include "Engine_structs.hpp"
#include "MovieSceneTracks_structs.hpp"
#include "MovieScene_structs.hpp"


namespace SDK
{

// Enum UnrealExtent.ERotateType
// NumValues: 0x0004
enum class ERotateType : uint8
{
	PITCH                                    = 0,
	YAW                                      = 1,
	ROLL                                     = 2,
	ERotateType_MAX                          = 3,
};

// Enum UnrealExtent.EGSNiagaraSysParamType
// NumValues: 0x0007
enum class EGSNiagaraSysParamType : uint8
{
	GSNPT_None                               = 0,
	GSNPT_Float                              = 1,
	GSNPT_Bool                               = 2,
	GSNPT_Int                                = 3,
	GSNPT_Vector                             = 4,
	GSNPT_LinearColor                        = 5,
	GSNPT_MAX                                = 6,
};

// Enum UnrealExtent.EGSToggleActorTickEnableType
// NumValues: 0x0007
enum class EGSToggleActorTickEnableType : uint8
{
	ActorTick                                = 0,
	MoveComp                                 = 1,
	SKMeshComp                               = 2,
	AkComp                                   = 3,
	AIComp                                   = 4,
	INCLUDE_CHILD_ACTOR                      = 5,
	EGSToggleActorTickEnableType_MAX         = 6,
};

// Enum UnrealExtent.EConfigIniFileNames
// NumValues: 0x0012
enum class EConfigIniFileNames : uint8
{
	GEngineIni                               = 0,
	GGameIni                                 = 1,
	GGameUserSettingsIni                     = 2,
	GEditorIni                               = 3,
	GEditorKeyBindingsIni                    = 4,
	GEditorLayoutIni                         = 5,
	GEditorSettingsIni                       = 6,
	GEditorPerProjectIni                     = 7,
	GCompatIni                               = 8,
	GLightmassIni                            = 9,
	GScalabilityIni                          = 10,
	GHardwareIni                             = 11,
	GInputIni                                = 12,
	GRuntimeOptionsIni                       = 13,
	GInstallBundleIni                        = 14,
	GDeviceProfilesIni                       = 15,
	GSGameVersionIni                         = 16,
	EConfigIniFileNames_MAX                  = 17,
};

// Enum UnrealExtent.EGSQualityLevel
// NumValues: 0x0007
enum class EGSQualityLevel : uint8
{
	INVALID                                  = 0,
	LOW                                      = 1,
	MEDIUM                                   = 2,
	HIGH                                     = 3,
	EPIC                                     = 4,
	CINE                                     = 5,
	EGSQualityLevel_MAX                      = 6,
};

// Enum UnrealExtent.EGSCapturedStatType
// NumValues: 0x0005
enum class EGSCapturedStatType : uint8
{
	NONE                                     = 0,
	CYCLE                                    = 1,
	MEMORY                                   = 2,
	NUM                                      = 3,
	EGSCapturedStatType_MAX                  = 4,
};

// Enum UnrealExtent.EEffectTypeManagerCullMode
// NumValues: 0x0004
enum class EEffectTypeManagerCullMode : uint8
{
	Enabled                                  = 0,
	Paused                                   = 1,
	Disabled                                 = 2,
	EEffectTypeManagerCullMode_MAX           = 3,
};

// Enum UnrealExtent.EBGWNATType
// NumValues: 0x000C
enum class EBGWNATType : uint8
{
	SONY_NAT_TYPE_UNKNOWN                    = 0,
	SONY_NAT_TYPE_1                          = 1,
	SONY_NAT_TYPE_2                          = 2,
	SONY_NAT_TYPE_3                          = 3,
	STEAM_IS_BEHIND_NAT                      = 4,
	STEAM_NOT_BEHIND_NAT                     = 5,
	EOS_NAT_Unknown                          = 6,
	EOS_NAT_Open                             = 7,
	EOS_NAT_Moderate                         = 8,
	EOS_NAT_Strict                           = 9,
	NotSupport                               = 10,
	EBGWNATType_MAX                          = 11,
};

// Enum UnrealExtent.EScalabilityQuality
// NumValues: 0x0007
enum class EScalabilityQuality : uint8
{
	INVALID                                  = 0,
	LOW                                      = 1,
	MEDIUM                                   = 2,
	HIGH                                     = 3,
	EPIC                                     = 4,
	CINE                                     = 5,
	EScalabilityQuality_MAX                  = 6,
};

// Enum UnrealExtent.EGSScreenMode
// NumValues: 0x0004
enum class EGSScreenMode : uint8
{
	FULL_SCREEN                              = 0,
	WINDOWED_NO_BORDER                       = 1,
	WINDOWED                                 = 2,
	EGSScreenMode_MAX                        = 3,
};

// Enum UnrealExtent.EGSPriorityMode
// NumValues: 0x0003
enum class EGSPriorityMode : uint8
{
	QUALITY_PRIOR                            = 0,
	PERF_PRIOR                               = 1,
	EGSPriorityMode_MAX                      = 2,
};

// Enum UnrealExtent.EGSGraphicsMemoryMode
// NumValues: 0x0004
enum class EGSGraphicsMemoryMode : uint8
{
	DEDICATED                                = 0,
	SHARED                                   = 1,
	TOTAL                                    = 2,
	EGSGraphicsMemoryMode_MAX                = 3,
};

// Enum UnrealExtent.UGSE_BULKDATA_LOCKMODE
// NumValues: 0x0003
enum class EUGSE_BULKDATA_LOCKMODE : uint8
{
	LOCK_READ_ONLY                           = 1,
	LOCK_READ_WRITE                          = 2,
	LOCK_READ_MAX                            = 3,
};

// Enum UnrealExtent.ERRIndicatorType
// NumValues: 0x0006
enum class ERRIndicatorType : uint8
{
	Top                                      = 0,
	Bottom                                   = 1,
	Left                                     = 2,
	Right                                    = 3,
	Middle                                   = 4,
	ERRIndicatorType_MAX                     = 5,
};

// Enum UnrealExtent.EGSUIConflictNavigationType
// NumValues: 0x0004
enum class EGSUIConflictNavigationType : uint8
{
	Gamepad_DPad                             = 0,
	Gamepad_Left                             = 1,
	Keyboard                                 = 2,
	EGSUIConflictNavigationType_MAX          = 3,
};

// Enum UnrealExtent.ESampleType
// NumValues: 0x0003
enum class ESampleType : uint8
{
	Nearest                                  = 0,
	Bilinear                                 = 1,
	ESampleType_MAX                          = 2,
};

// Enum UnrealExtent.EGSBitmapJustification
// NumValues: 0x0004
enum class EGSBitmapJustification : uint8
{
	Left                                     = 0,
	Middle                                   = 1,
	Right                                    = 2,
	EGSBitmapJustification_MAX               = 3,
};

// Enum UnrealExtent.EStatUISimulatedGraphicsCard
// NumValues: 0x000E
enum class EStatUISimulatedGraphicsCard : uint8
{
	GTX_1050Ti                               = 0,
	GTX_1660                                 = 1,
	GTX_1660Ti                               = 2,
	RTX_2060                                 = 3,
	RTX_2060S                                = 4,
	RTX_2070                                 = 5,
	RTX_2080                                 = 6,
	RTX_2080Ti                               = 7,
	RTX_3060                                 = 8,
	RTX_3070                                 = 9,
	RTX_3080                                 = 10,
	RTX_3080Ti                               = 11,
	RTX_3090                                 = 12,
	EStatUISimulatedGraphicsCard_MAX         = 13,
};

// ScriptStruct UnrealExtent.AutoMovementViewingPattern
// 0x0058 (0x0058 - 0x0000)
struct FAutoMovementViewingPattern final
{
public:
	class FString                                 PathPointsFilePath;                                // 0x0000(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bUseSparseVersion;                                 // 0x0010(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bVisualizeScatteredPoints;                         // 0x0011(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_12[0x2];                                       // 0x0012(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         PointInstanceScale;                                // 0x0014(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FRotator                               InitialRotation;                                   // 0x0018(0x0018)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	struct FIntVector                             DirectionCount;                                    // 0x0030(0x000C)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         TotalPitchDegree;                                  // 0x003C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         TotalYawDegree;                                    // 0x0040(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         DistanceCheckBias;                                 // 0x0044(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         RotationCheckBias;                                 // 0x0048(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         PoseTickTotalCount;                                // 0x004C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bUseVirtualPlayer;                                 // 0x0050(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bAttractEnemy;                                     // 0x0051(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_52[0x6];                                       // 0x0052(0x0006)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
//static_assert(alignof(FAutoMovementViewingPattern) == 0x000008, "Wrong alignment on FAutoMovementViewingPattern");
//static_assert(sizeof(FAutoMovementViewingPattern) == 0x000058, "Wrong size on FAutoMovementViewingPattern");
//static_assert(offsetof(FAutoMovementViewingPattern, PathPointsFilePath) == 0x000000, "Member 'FAutoMovementViewingPattern::PathPointsFilePath' has a wrong offset!");
//static_assert(offsetof(FAutoMovementViewingPattern, bUseSparseVersion) == 0x000010, "Member 'FAutoMovementViewingPattern::bUseSparseVersion' has a wrong offset!");
//static_assert(offsetof(FAutoMovementViewingPattern, bVisualizeScatteredPoints) == 0x000011, "Member 'FAutoMovementViewingPattern::bVisualizeScatteredPoints' has a wrong offset!");
//static_assert(offsetof(FAutoMovementViewingPattern, PointInstanceScale) == 0x000014, "Member 'FAutoMovementViewingPattern::PointInstanceScale' has a wrong offset!");
//static_assert(offsetof(FAutoMovementViewingPattern, InitialRotation) == 0x000018, "Member 'FAutoMovementViewingPattern::InitialRotation' has a wrong offset!");
//static_assert(offsetof(FAutoMovementViewingPattern, DirectionCount) == 0x000030, "Member 'FAutoMovementViewingPattern::DirectionCount' has a wrong offset!");
//static_assert(offsetof(FAutoMovementViewingPattern, TotalPitchDegree) == 0x00003C, "Member 'FAutoMovementViewingPattern::TotalPitchDegree' has a wrong offset!");
//static_assert(offsetof(FAutoMovementViewingPattern, TotalYawDegree) == 0x000040, "Member 'FAutoMovementViewingPattern::TotalYawDegree' has a wrong offset!");
//static_assert(offsetof(FAutoMovementViewingPattern, DistanceCheckBias) == 0x000044, "Member 'FAutoMovementViewingPattern::DistanceCheckBias' has a wrong offset!");
//static_assert(offsetof(FAutoMovementViewingPattern, RotationCheckBias) == 0x000048, "Member 'FAutoMovementViewingPattern::RotationCheckBias' has a wrong offset!");
//static_assert(offsetof(FAutoMovementViewingPattern, PoseTickTotalCount) == 0x00004C, "Member 'FAutoMovementViewingPattern::PoseTickTotalCount' has a wrong offset!");
//static_assert(offsetof(FAutoMovementViewingPattern, bUseVirtualPlayer) == 0x000050, "Member 'FAutoMovementViewingPattern::bUseVirtualPlayer' has a wrong offset!");
//static_assert(offsetof(FAutoMovementViewingPattern, bAttractEnemy) == 0x000051, "Member 'FAutoMovementViewingPattern::bAttractEnemy' has a wrong offset!");

// ScriptStruct UnrealExtent.GSNotifyEventTimeInfo
// 0x0008 (0x0008 - 0x0000)
struct FGSNotifyEventTimeInfo final
{
public:
	float                                         TriggerTime;                                       // 0x0000(0x0004)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         EndTriggerTime;                                    // 0x0004(0x0004)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
//static_assert(alignof(FGSNotifyEventTimeInfo) == 0x000004, "Wrong alignment on FGSNotifyEventTimeInfo");
//static_assert(sizeof(FGSNotifyEventTimeInfo) == 0x000008, "Wrong size on FGSNotifyEventTimeInfo");
//static_assert(offsetof(FGSNotifyEventTimeInfo, TriggerTime) == 0x000000, "Member 'FGSNotifyEventTimeInfo::TriggerTime' has a wrong offset!");
//static_assert(offsetof(FGSNotifyEventTimeInfo, EndTriggerTime) == 0x000004, "Member 'FGSNotifyEventTimeInfo::EndTriggerTime' has a wrong offset!");

// ScriptStruct UnrealExtent.AutoMovementHeatmapConfig
// 0x0068 (0x0068 - 0x0000)
struct FAutoMovementHeatmapConfig final
{
public:
	struct FVector                                HeatmapPlaneOrigin;                                // 0x0000(0x0018)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                HeatmapPlaneSize;                                  // 0x0018(0x0018)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 HeatmapTexParentFolder;                            // 0x0030(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 HeatmapBaseImgPath;                                // 0x0040(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 HeatmapProfilingFilePath;                          // 0x0050(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         HeatmapIntensityScale;                             // 0x0060(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         HeatmapTileCount;                                  // 0x0064(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
//static_assert(alignof(FAutoMovementHeatmapConfig) == 0x000008, "Wrong alignment on FAutoMovementHeatmapConfig");
//static_assert(sizeof(FAutoMovementHeatmapConfig) == 0x000068, "Wrong size on FAutoMovementHeatmapConfig");
//static_assert(offsetof(FAutoMovementHeatmapConfig, HeatmapPlaneOrigin) == 0x000000, "Member 'FAutoMovementHeatmapConfig::HeatmapPlaneOrigin' has a wrong offset!");
//static_assert(offsetof(FAutoMovementHeatmapConfig, HeatmapPlaneSize) == 0x000018, "Member 'FAutoMovementHeatmapConfig::HeatmapPlaneSize' has a wrong offset!");
//static_assert(offsetof(FAutoMovementHeatmapConfig, HeatmapTexParentFolder) == 0x000030, "Member 'FAutoMovementHeatmapConfig::HeatmapTexParentFolder' has a wrong offset!");
//static_assert(offsetof(FAutoMovementHeatmapConfig, HeatmapBaseImgPath) == 0x000040, "Member 'FAutoMovementHeatmapConfig::HeatmapBaseImgPath' has a wrong offset!");
//static_assert(offsetof(FAutoMovementHeatmapConfig, HeatmapProfilingFilePath) == 0x000050, "Member 'FAutoMovementHeatmapConfig::HeatmapProfilingFilePath' has a wrong offset!");
//static_assert(offsetof(FAutoMovementHeatmapConfig, HeatmapIntensityScale) == 0x000060, "Member 'FAutoMovementHeatmapConfig::HeatmapIntensityScale' has a wrong offset!");
//static_assert(offsetof(FAutoMovementHeatmapConfig, HeatmapTileCount) == 0x000064, "Member 'FAutoMovementHeatmapConfig::HeatmapTileCount' has a wrong offset!");

// ScriptStruct UnrealExtent.TamerRefLineTraceContext
// 0x0038 (0x0038 - 0x0000)
struct FTamerRefLineTraceContext final
{
public:
	int32                                         RefID;                                             // 0x0000(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_4[0x4];                                        // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<struct FVector>                        TraceEnds;                                         // 0x0008(0x0010)(ZeroConstructor, NativeAccessSpecifierPublic)
	struct FVector                                Location;                                          // 0x0018(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         CapsuleHalfHeight;                                 // 0x0030(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_34[0x4];                                       // 0x0034(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
//static_assert(alignof(FTamerRefLineTraceContext) == 0x000008, "Wrong alignment on FTamerRefLineTraceContext");
//static_assert(sizeof(FTamerRefLineTraceContext) == 0x000038, "Wrong size on FTamerRefLineTraceContext");
//static_assert(offsetof(FTamerRefLineTraceContext, RefID) == 0x000000, "Member 'FTamerRefLineTraceContext::RefID' has a wrong offset!");
//static_assert(offsetof(FTamerRefLineTraceContext, TraceEnds) == 0x000008, "Member 'FTamerRefLineTraceContext::TraceEnds' has a wrong offset!");
//static_assert(offsetof(FTamerRefLineTraceContext, Location) == 0x000018, "Member 'FTamerRefLineTraceContext::Location' has a wrong offset!");
//static_assert(offsetof(FTamerRefLineTraceContext, CapsuleHalfHeight) == 0x000030, "Member 'FTamerRefLineTraceContext::CapsuleHalfHeight' has a wrong offset!");

// ScriptStruct UnrealExtent.GSPathPointStatInfo
// 0x0078 (0x0078 - 0x0000)
struct FGSPathPointStatInfo final
{
public:
	TMap<class FString, float>                    StatNameAndValue;                                  // 0x0000(0x0050)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
	struct FVector                                Position;                                          // 0x0050(0x0018)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 Duration;                                          // 0x0068(0x0010)(Edit, BlueprintVisible, ZeroConstructor, EditConst, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
//static_assert(alignof(FGSPathPointStatInfo) == 0x000008, "Wrong alignment on FGSPathPointStatInfo");
//static_assert(sizeof(FGSPathPointStatInfo) == 0x000078, "Wrong size on FGSPathPointStatInfo");
//static_assert(offsetof(FGSPathPointStatInfo, StatNameAndValue) == 0x000000, "Member 'FGSPathPointStatInfo::StatNameAndValue' has a wrong offset!");
//static_assert(offsetof(FGSPathPointStatInfo, Position) == 0x000050, "Member 'FGSPathPointStatInfo::Position' has a wrong offset!");
//static_assert(offsetof(FGSPathPointStatInfo, Duration) == 0x000068, "Member 'FGSPathPointStatInfo::Duration' has a wrong offset!");

// ScriptStruct UnrealExtent.CapturedInfoSequencePerPoint
// 0x0018 (0x0018 - 0x0000)
struct FCapturedInfoSequencePerPoint final
{
public:
	TArray<float>                                 CapturedInfoSequencePerPoint;                      // 0x0000(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
	EGSCapturedStatType                           StatType;                                          // 0x0010(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_11[0x7];                                       // 0x0011(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
//static_assert(alignof(FCapturedInfoSequencePerPoint) == 0x000008, "Wrong alignment on FCapturedInfoSequencePerPoint");
//static_assert(sizeof(FCapturedInfoSequencePerPoint) == 0x000018, "Wrong size on FCapturedInfoSequencePerPoint");
//static_assert(offsetof(FCapturedInfoSequencePerPoint, CapturedInfoSequencePerPoint) == 0x000000, "Member 'FCapturedInfoSequencePerPoint::CapturedInfoSequencePerPoint' has a wrong offset!");
//static_assert(offsetof(FCapturedInfoSequencePerPoint, StatType) == 0x000010, "Member 'FCapturedInfoSequencePerPoint::StatType' has a wrong offset!");

// ScriptStruct UnrealExtent.ColorBufferPtr
// 0x0008 (0x0008 - 0x0000)
struct FColorBufferPtr final
{
public:
	uint8                                         B;                                                 // 0x0000(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         G;                                                 // 0x0001(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         R;                                                 // 0x0002(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         A;                                                 // 0x0003(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         AlignmentDummy;                                    // 0x0004(0x0004)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
//static_assert(alignof(FColorBufferPtr) == 0x000004, "Wrong alignment on FColorBufferPtr");
//static_assert(sizeof(FColorBufferPtr) == 0x000008, "Wrong size on FColorBufferPtr");
//static_assert(offsetof(FColorBufferPtr, B) == 0x000000, "Member 'FColorBufferPtr::B' has a wrong offset!");
//static_assert(offsetof(FColorBufferPtr, G) == 0x000001, "Member 'FColorBufferPtr::G' has a wrong offset!");
//static_assert(offsetof(FColorBufferPtr, R) == 0x000002, "Member 'FColorBufferPtr::R' has a wrong offset!");
//static_assert(offsetof(FColorBufferPtr, A) == 0x000003, "Member 'FColorBufferPtr::A' has a wrong offset!");
//static_assert(offsetof(FColorBufferPtr, AlignmentDummy) == 0x000004, "Member 'FColorBufferPtr::AlignmentDummy' has a wrong offset!");

// ScriptStruct UnrealExtent.CapturedInfoArrayPerPoint
// 0x0050 (0x0050 - 0x0000)
struct FCapturedInfoArrayPerPoint final
{
public:
	TMap<class FString, struct FCapturedInfoSequencePerPoint> InfoMap;                                           // 0x0000(0x0050)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
};
//static_assert(alignof(FCapturedInfoArrayPerPoint) == 0x000008, "Wrong alignment on FCapturedInfoArrayPerPoint");
//static_assert(sizeof(FCapturedInfoArrayPerPoint) == 0x000050, "Wrong size on FCapturedInfoArrayPerPoint");
//static_assert(offsetof(FCapturedInfoArrayPerPoint, InfoMap) == 0x000000, "Member 'FCapturedInfoArrayPerPoint::InfoMap' has a wrong offset!");

// ScriptStruct UnrealExtent.AsyncLineTraceSingleResult
// 0x0018 (0x0018 - 0x0000)
struct FAsyncLineTraceSingleResult final
{
public:
	int32                                         ReqID;                                             // 0x0000(0x0004)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_4[0x4];                                        // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<struct FHitResult>                     HitResults;                                        // 0x0008(0x0010)(BlueprintVisible, ZeroConstructor, ContainsInstancedReference, NativeAccessSpecifierPublic)
};
//static_assert(alignof(FAsyncLineTraceSingleResult) == 0x000008, "Wrong alignment on FAsyncLineTraceSingleResult");
//static_assert(sizeof(FAsyncLineTraceSingleResult) == 0x000018, "Wrong size on FAsyncLineTraceSingleResult");
//static_assert(offsetof(FAsyncLineTraceSingleResult, ReqID) == 0x000000, "Member 'FAsyncLineTraceSingleResult::ReqID' has a wrong offset!");
//static_assert(offsetof(FAsyncLineTraceSingleResult, HitResults) == 0x000008, "Member 'FAsyncLineTraceSingleResult::HitResults' has a wrong offset!");

// ScriptStruct UnrealExtent.AsyncLineTraceReq
// 0x0038 (0x0038 - 0x0000)
struct FAsyncLineTraceReq final
{
public:
	int32                                         ReqID;                                             // 0x0000(0x0004)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_4[0x4];                                        // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                TraceStart;                                        // 0x0008(0x0018)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                TraceEnd;                                          // 0x0020(0x0018)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
//static_assert(alignof(FAsyncLineTraceReq) == 0x000008, "Wrong alignment on FAsyncLineTraceReq");
//static_assert(sizeof(FAsyncLineTraceReq) == 0x000038, "Wrong size on FAsyncLineTraceReq");
//static_assert(offsetof(FAsyncLineTraceReq, ReqID) == 0x000000, "Member 'FAsyncLineTraceReq::ReqID' has a wrong offset!");
//static_assert(offsetof(FAsyncLineTraceReq, TraceStart) == 0x000008, "Member 'FAsyncLineTraceReq::TraceStart' has a wrong offset!");
//static_assert(offsetof(FAsyncLineTraceReq, TraceEnd) == 0x000020, "Member 'FAsyncLineTraceReq::TraceEnd' has a wrong offset!");

// ScriptStruct UnrealExtent.AsyncLineTraceReqArray
// 0x0010 (0x0010 - 0x0000)
struct FAsyncLineTraceReqArray final
{
public:
	TArray<struct FAsyncLineTraceReq>             ReqArr;                                            // 0x0000(0x0010)(BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
};
//static_assert(alignof(FAsyncLineTraceReqArray) == 0x000008, "Wrong alignment on FAsyncLineTraceReqArray");
//static_assert(sizeof(FAsyncLineTraceReqArray) == 0x000010, "Wrong size on FAsyncLineTraceReqArray");
//static_assert(offsetof(FAsyncLineTraceReqArray, ReqArr) == 0x000000, "Member 'FAsyncLineTraceReqArray::ReqArr' has a wrong offset!");

// ScriptStruct UnrealExtent.BGUMaterialParameterInfo
// 0x0010 (0x0020 - 0x0010)
struct FBGUMaterialParameterInfo final : public FMaterialParameterInfo
{
public:
	class UMaterialFunctionInterface*             LayerMaterial;                                     // 0x0010(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UMaterialFunctionInterface*             BlendMaterial;                                     // 0x0018(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
//static_assert(alignof(FBGUMaterialParameterInfo) == 0x000008, "Wrong alignment on FBGUMaterialParameterInfo");
//static_assert(sizeof(FBGUMaterialParameterInfo) == 0x000020, "Wrong size on FBGUMaterialParameterInfo");
//static_assert(offsetof(FBGUMaterialParameterInfo, LayerMaterial) == 0x000010, "Member 'FBGUMaterialParameterInfo::LayerMaterial' has a wrong offset!");
//static_assert(offsetof(FBGUMaterialParameterInfo, BlendMaterial) == 0x000018, "Member 'FBGUMaterialParameterInfo::BlendMaterial' has a wrong offset!");

// ScriptStruct UnrealExtent.BGUScalarParameterInfoAndCurve
// 0x0118 (0x0118 - 0x0000)
struct FBGUScalarParameterInfoAndCurve final
{
public:
	struct FMaterialParameterInfo                 ParameterInfo;                                     // 0x0000(0x0010)(NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FBGUMaterialParameterInfo              BGUParameterInfo;                                  // 0x0010(0x0020)(NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FMovieSceneFloatChannel                ParameterCurve;                                    // 0x0030(0x00E8)(NativeAccessSpecifierPublic)
};
//static_assert(alignof(FBGUScalarParameterInfoAndCurve) == 0x000008, "Wrong alignment on FBGUScalarParameterInfoAndCurve");
//static_assert(sizeof(FBGUScalarParameterInfoAndCurve) == 0x000118, "Wrong size on FBGUScalarParameterInfoAndCurve");
//static_assert(offsetof(FBGUScalarParameterInfoAndCurve, ParameterInfo) == 0x000000, "Member 'FBGUScalarParameterInfoAndCurve::ParameterInfo' has a wrong offset!");
//static_assert(offsetof(FBGUScalarParameterInfoAndCurve, BGUParameterInfo) == 0x000010, "Member 'FBGUScalarParameterInfoAndCurve::BGUParameterInfo' has a wrong offset!");
//static_assert(offsetof(FBGUScalarParameterInfoAndCurve, ParameterCurve) == 0x000030, "Member 'FBGUScalarParameterInfoAndCurve::ParameterCurve' has a wrong offset!");

// ScriptStruct UnrealExtent.BGUVectorParameterInfoAndCurves
// 0x02E8 (0x02E8 - 0x0000)
struct FBGUVectorParameterInfoAndCurves final
{
public:
	struct FMaterialParameterInfo                 ParameterInfo;                                     // 0x0000(0x0010)(NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FBGUMaterialParameterInfo              BGUParameterInfo;                                  // 0x0010(0x0020)(NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FMovieSceneFloatChannel                XCurve;                                            // 0x0030(0x00E8)(NativeAccessSpecifierPublic)
	struct FMovieSceneFloatChannel                YCurve;                                            // 0x0118(0x00E8)(NativeAccessSpecifierPublic)
	struct FMovieSceneFloatChannel                ZCurve;                                            // 0x0200(0x00E8)(NativeAccessSpecifierPublic)
};
//static_assert(alignof(FBGUVectorParameterInfoAndCurves) == 0x000008, "Wrong alignment on FBGUVectorParameterInfoAndCurves");
//static_assert(sizeof(FBGUVectorParameterInfoAndCurves) == 0x0002E8, "Wrong size on FBGUVectorParameterInfoAndCurves");
//static_assert(offsetof(FBGUVectorParameterInfoAndCurves, ParameterInfo) == 0x000000, "Member 'FBGUVectorParameterInfoAndCurves::ParameterInfo' has a wrong offset!");
//static_assert(offsetof(FBGUVectorParameterInfoAndCurves, BGUParameterInfo) == 0x000010, "Member 'FBGUVectorParameterInfoAndCurves::BGUParameterInfo' has a wrong offset!");
//static_assert(offsetof(FBGUVectorParameterInfoAndCurves, XCurve) == 0x000030, "Member 'FBGUVectorParameterInfoAndCurves::XCurve' has a wrong offset!");
//static_assert(offsetof(FBGUVectorParameterInfoAndCurves, YCurve) == 0x000118, "Member 'FBGUVectorParameterInfoAndCurves::YCurve' has a wrong offset!");
//static_assert(offsetof(FBGUVectorParameterInfoAndCurves, ZCurve) == 0x000200, "Member 'FBGUVectorParameterInfoAndCurves::ZCurve' has a wrong offset!");

// ScriptStruct UnrealExtent.BGUColorParameterInfoAndCurves
// 0x03D0 (0x03D0 - 0x0000)
struct FBGUColorParameterInfoAndCurves final
{
public:
	struct FMaterialParameterInfo                 ParameterInfo;                                     // 0x0000(0x0010)(NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FBGUMaterialParameterInfo              BGUParameterInfo;                                  // 0x0010(0x0020)(NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FMovieSceneFloatChannel                RedCurve;                                          // 0x0030(0x00E8)(NativeAccessSpecifierPublic)
	struct FMovieSceneFloatChannel                GreenCurve;                                        // 0x0118(0x00E8)(NativeAccessSpecifierPublic)
	struct FMovieSceneFloatChannel                BlueCurve;                                         // 0x0200(0x00E8)(NativeAccessSpecifierPublic)
	struct FMovieSceneFloatChannel                AlphaCurve;                                        // 0x02E8(0x00E8)(NativeAccessSpecifierPublic)
};
//static_assert(alignof(FBGUColorParameterInfoAndCurves) == 0x000008, "Wrong alignment on FBGUColorParameterInfoAndCurves");
//static_assert(sizeof(FBGUColorParameterInfoAndCurves) == 0x0003D0, "Wrong size on FBGUColorParameterInfoAndCurves");
//static_assert(offsetof(FBGUColorParameterInfoAndCurves, ParameterInfo) == 0x000000, "Member 'FBGUColorParameterInfoAndCurves::ParameterInfo' has a wrong offset!");
//static_assert(offsetof(FBGUColorParameterInfoAndCurves, BGUParameterInfo) == 0x000010, "Member 'FBGUColorParameterInfoAndCurves::BGUParameterInfo' has a wrong offset!");
//static_assert(offsetof(FBGUColorParameterInfoAndCurves, RedCurve) == 0x000030, "Member 'FBGUColorParameterInfoAndCurves::RedCurve' has a wrong offset!");
//static_assert(offsetof(FBGUColorParameterInfoAndCurves, GreenCurve) == 0x000118, "Member 'FBGUColorParameterInfoAndCurves::GreenCurve' has a wrong offset!");
//static_assert(offsetof(FBGUColorParameterInfoAndCurves, BlueCurve) == 0x000200, "Member 'FBGUColorParameterInfoAndCurves::BlueCurve' has a wrong offset!");
//static_assert(offsetof(FBGUColorParameterInfoAndCurves, AlphaCurve) == 0x0002E8, "Member 'FBGUColorParameterInfoAndCurves::AlphaCurve' has a wrong offset!");

// ScriptStruct UnrealExtent.BGUMovieSceneComponentMaterialSectionTemplate
// 0x0038 (0x00B8 - 0x0080)
struct FBGUMovieSceneComponentMaterialSectionTemplate final : public FMovieSceneParameterSectionTemplate
{
public:
	TArray<struct FBGUScalarParameterInfoAndCurve> ScalarParams;                                      // 0x0080(0x0010)(ZeroConstructor, NativeAccessSpecifierPrivate)
	TArray<struct FBGUVectorParameterInfoAndCurves> VectorParams;                                      // 0x0090(0x0010)(ZeroConstructor, NativeAccessSpecifierPrivate)
	TArray<struct FBGUColorParameterInfoAndCurves> ColorParams;                                       // 0x00A0(0x0010)(ZeroConstructor, NativeAccessSpecifierPrivate)
	int32                                         MaterialIndex;                                     // 0x00B0(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	bool                                          bAffectClothMaterial;                              // 0x00B4(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	bool                                          bAffectAllMaterial;                                // 0x00B5(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         Pad_B6[0x2];                                       // 0x00B6(0x0002)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
//static_assert(alignof(FBGUMovieSceneComponentMaterialSectionTemplate) == 0x000008, "Wrong alignment on FBGUMovieSceneComponentMaterialSectionTemplate");
//static_assert(sizeof(FBGUMovieSceneComponentMaterialSectionTemplate) == 0x0000B8, "Wrong size on FBGUMovieSceneComponentMaterialSectionTemplate");
//static_assert(offsetof(FBGUMovieSceneComponentMaterialSectionTemplate, ScalarParams) == 0x000080, "Member 'FBGUMovieSceneComponentMaterialSectionTemplate::ScalarParams' has a wrong offset!");
//static_assert(offsetof(FBGUMovieSceneComponentMaterialSectionTemplate, VectorParams) == 0x000090, "Member 'FBGUMovieSceneComponentMaterialSectionTemplate::VectorParams' has a wrong offset!");
//static_assert(offsetof(FBGUMovieSceneComponentMaterialSectionTemplate, ColorParams) == 0x0000A0, "Member 'FBGUMovieSceneComponentMaterialSectionTemplate::ColorParams' has a wrong offset!");
//static_assert(offsetof(FBGUMovieSceneComponentMaterialSectionTemplate, MaterialIndex) == 0x0000B0, "Member 'FBGUMovieSceneComponentMaterialSectionTemplate::MaterialIndex' has a wrong offset!");
//static_assert(offsetof(FBGUMovieSceneComponentMaterialSectionTemplate, bAffectClothMaterial) == 0x0000B4, "Member 'FBGUMovieSceneComponentMaterialSectionTemplate::bAffectClothMaterial' has a wrong offset!");
//static_assert(offsetof(FBGUMovieSceneComponentMaterialSectionTemplate, bAffectAllMaterial) == 0x0000B5, "Member 'FBGUMovieSceneComponentMaterialSectionTemplate::bAffectAllMaterial' has a wrong offset!");

// ScriptStruct UnrealExtent.IntPtr
// 0x0008 (0x0008 - 0x0000)
struct FIntPtr final
{
public:
	int32                                         LowerBits;                                         // 0x0000(0x0004)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         HigherBits;                                        // 0x0004(0x0004)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
//static_assert(alignof(FIntPtr) == 0x000004, "Wrong alignment on FIntPtr");
//static_assert(sizeof(FIntPtr) == 0x000008, "Wrong size on FIntPtr");
//static_assert(offsetof(FIntPtr, LowerBits) == 0x000000, "Member 'FIntPtr::LowerBits' has a wrong offset!");
//static_assert(offsetof(FIntPtr, HigherBits) == 0x000004, "Member 'FIntPtr::HigherBits' has a wrong offset!");

// ScriptStruct UnrealExtent.GSInputActionKeyMapping
// 0x0014 (0x0014 - 0x0000)
struct FGSInputActionKeyMapping final
{
public:
	class FName                                   ActionName;                                        // 0x0000(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         bShift : 1;                                        // 0x0008(0x0001)(BitIndex: 0x00, PropSize: 0x0001 (Edit, BlueprintVisible, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         bCtrl : 1;                                         // 0x0008(0x0001)(BitIndex: 0x01, PropSize: 0x0001 (Edit, BlueprintVisible, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         bAlt : 1;                                          // 0x0008(0x0001)(BitIndex: 0x02, PropSize: 0x0001 (Edit, BlueprintVisible, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         bCmd : 1;                                          // 0x0008(0x0001)(BitIndex: 0x03, PropSize: 0x0001 (Edit, BlueprintVisible, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         Pad_9[0x3];                                        // 0x0009(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class FName                                   Key;                                               // 0x000C(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
//static_assert(alignof(FGSInputActionKeyMapping) == 0x000004, "Wrong alignment on FGSInputActionKeyMapping");
//static_assert(sizeof(FGSInputActionKeyMapping) == 0x000014, "Wrong size on FGSInputActionKeyMapping");
//static_assert(offsetof(FGSInputActionKeyMapping, ActionName) == 0x000000, "Member 'FGSInputActionKeyMapping::ActionName' has a wrong offset!");
//static_assert(offsetof(FGSInputActionKeyMapping, Key) == 0x00000C, "Member 'FGSInputActionKeyMapping::Key' has a wrong offset!");

// ScriptStruct UnrealExtent.GSInputAxisKeyMapping
// 0x0014 (0x0014 - 0x0000)
struct FGSInputAxisKeyMapping final
{
public:
	class FName                                   AxisName;                                          // 0x0000(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Scale;                                             // 0x0008(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   Key;                                               // 0x000C(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
//static_assert(alignof(FGSInputAxisKeyMapping) == 0x000004, "Wrong alignment on FGSInputAxisKeyMapping");
//static_assert(sizeof(FGSInputAxisKeyMapping) == 0x000014, "Wrong size on FGSInputAxisKeyMapping");
//static_assert(offsetof(FGSInputAxisKeyMapping, AxisName) == 0x000000, "Member 'FGSInputAxisKeyMapping::AxisName' has a wrong offset!");
//static_assert(offsetof(FGSInputAxisKeyMapping, Scale) == 0x000008, "Member 'FGSInputAxisKeyMapping::Scale' has a wrong offset!");
//static_assert(offsetof(FGSInputAxisKeyMapping, Key) == 0x00000C, "Member 'FGSInputAxisKeyMapping::Key' has a wrong offset!");

// ScriptStruct UnrealExtent.GSNiagaraSysParam
// 0x0040 (0x0040 - 0x0000)
struct FGSNiagaraSysParam final
{
public:
	class FName                                   Name;                                              // 0x0000(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EGSNiagaraSysParamType                        ParamType;                                         // 0x0008(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x3];                                        // 0x0009(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         FloatValue;                                        // 0x000C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          BoolValue;                                         // 0x0010(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_11[0x3];                                       // 0x0011(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         IntValue;                                          // 0x0014(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                VectorValue;                                       // 0x0018(0x0018)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FLinearColor                           LinearColorValue;                                  // 0x0030(0x0010)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
//static_assert(alignof(FGSNiagaraSysParam) == 0x000008, "Wrong alignment on FGSNiagaraSysParam");
//static_assert(sizeof(FGSNiagaraSysParam) == 0x000040, "Wrong size on FGSNiagaraSysParam");
//static_assert(offsetof(FGSNiagaraSysParam, Name) == 0x000000, "Member 'FGSNiagaraSysParam::Name' has a wrong offset!");
//static_assert(offsetof(FGSNiagaraSysParam, ParamType) == 0x000008, "Member 'FGSNiagaraSysParam::ParamType' has a wrong offset!");
//static_assert(offsetof(FGSNiagaraSysParam, FloatValue) == 0x00000C, "Member 'FGSNiagaraSysParam::FloatValue' has a wrong offset!");
//static_assert(offsetof(FGSNiagaraSysParam, BoolValue) == 0x000010, "Member 'FGSNiagaraSysParam::BoolValue' has a wrong offset!");
//static_assert(offsetof(FGSNiagaraSysParam, IntValue) == 0x000014, "Member 'FGSNiagaraSysParam::IntValue' has a wrong offset!");
//static_assert(offsetof(FGSNiagaraSysParam, VectorValue) == 0x000018, "Member 'FGSNiagaraSysParam::VectorValue' has a wrong offset!");
//static_assert(offsetof(FGSNiagaraSysParam, LinearColorValue) == 0x000030, "Member 'FGSNiagaraSysParam::LinearColorValue' has a wrong offset!");

// ScriptStruct UnrealExtent.GSMontageAndNotifiesWarp
// 0x0018 (0x0018 - 0x0000)
struct FGSMontageAndNotifiesWarp final
{
public:
	class UAnimMontage*                           AM;                                                // 0x0000(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<struct FAnimNotifyEvent>               ANEArr;                                            // 0x0008(0x0010)(Edit, BlueprintVisible, ZeroConstructor, ContainsInstancedReference, NativeAccessSpecifierPublic)
};
//static_assert(alignof(FGSMontageAndNotifiesWarp) == 0x000008, "Wrong alignment on FGSMontageAndNotifiesWarp");
//static_assert(sizeof(FGSMontageAndNotifiesWarp) == 0x000018, "Wrong size on FGSMontageAndNotifiesWarp");
//static_assert(offsetof(FGSMontageAndNotifiesWarp, AM) == 0x000000, "Member 'FGSMontageAndNotifiesWarp::AM' has a wrong offset!");
//static_assert(offsetof(FGSMontageAndNotifiesWarp, ANEArr) == 0x000008, "Member 'FGSMontageAndNotifiesWarp::ANEArr' has a wrong offset!");

// ScriptStruct UnrealExtent.AnimNotifyEventSimple
// 0x0038 (0x0038 - 0x0000)
struct FAnimNotifyEventSimple final
{
public:
	float                                         StartTime;                                         // 0x0000(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Duration;                                          // 0x0004(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   NotifyName;                                        // 0x0008(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UAnimNotify*                            Notify;                                            // 0x0010(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UAnimNotifyState*                       NotifyStateClass;                                  // 0x0018(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 GuidString;                                        // 0x0020(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         TrackIndex;                                        // 0x0030(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_34[0x4];                                       // 0x0034(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
//static_assert(alignof(FAnimNotifyEventSimple) == 0x000008, "Wrong alignment on FAnimNotifyEventSimple");
//static_assert(sizeof(FAnimNotifyEventSimple) == 0x000038, "Wrong size on FAnimNotifyEventSimple");
//static_assert(offsetof(FAnimNotifyEventSimple, StartTime) == 0x000000, "Member 'FAnimNotifyEventSimple::StartTime' has a wrong offset!");
//static_assert(offsetof(FAnimNotifyEventSimple, Duration) == 0x000004, "Member 'FAnimNotifyEventSimple::Duration' has a wrong offset!");
//static_assert(offsetof(FAnimNotifyEventSimple, NotifyName) == 0x000008, "Member 'FAnimNotifyEventSimple::NotifyName' has a wrong offset!");
//static_assert(offsetof(FAnimNotifyEventSimple, Notify) == 0x000010, "Member 'FAnimNotifyEventSimple::Notify' has a wrong offset!");
//static_assert(offsetof(FAnimNotifyEventSimple, NotifyStateClass) == 0x000018, "Member 'FAnimNotifyEventSimple::NotifyStateClass' has a wrong offset!");
//static_assert(offsetof(FAnimNotifyEventSimple, GuidString) == 0x000020, "Member 'FAnimNotifyEventSimple::GuidString' has a wrong offset!");
//static_assert(offsetof(FAnimNotifyEventSimple, TrackIndex) == 0x000030, "Member 'FAnimNotifyEventSimple::TrackIndex' has a wrong offset!");

// ScriptStruct UnrealExtent.BehaviorTreeNodeData
// 0x0010 (0x0010 - 0x0000)
struct FBehaviorTreeNodeData final
{
public:
	TArray<class UBTTaskNode*>                    TaskNodeList;                                      // 0x0000(0x0010)(BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
};
//static_assert(alignof(FBehaviorTreeNodeData) == 0x000008, "Wrong alignment on FBehaviorTreeNodeData");
//static_assert(sizeof(FBehaviorTreeNodeData) == 0x000010, "Wrong size on FBehaviorTreeNodeData");
//static_assert(offsetof(FBehaviorTreeNodeData, TaskNodeList) == 0x000000, "Member 'FBehaviorTreeNodeData::TaskNodeList' has a wrong offset!");

// ScriptStruct UnrealExtent.GSCapturedStatResult
// 0x0018 (0x0018 - 0x0000)
struct FGSCapturedStatResult final
{
public:
	class FString                                 StatName;                                          // 0x0000(0x0010)(Edit, BlueprintVisible, ZeroConstructor, EditConst, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Value;                                             // 0x0010(0x0004)(Edit, BlueprintVisible, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EGSCapturedStatType                           StatType;                                          // 0x0014(0x0001)(Edit, BlueprintVisible, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_15[0x3];                                       // 0x0015(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
//static_assert(alignof(FGSCapturedStatResult) == 0x000008, "Wrong alignment on FGSCapturedStatResult");
//static_assert(sizeof(FGSCapturedStatResult) == 0x000018, "Wrong size on FGSCapturedStatResult");
//static_assert(offsetof(FGSCapturedStatResult, StatName) == 0x000000, "Member 'FGSCapturedStatResult::StatName' has a wrong offset!");
//static_assert(offsetof(FGSCapturedStatResult, Value) == 0x000010, "Member 'FGSCapturedStatResult::Value' has a wrong offset!");
//static_assert(offsetof(FGSCapturedStatResult, StatType) == 0x000014, "Member 'FGSCapturedStatResult::StatType' has a wrong offset!");

// ScriptStruct UnrealExtent.CachedActivityIntentReceivedParamCS
// 0x0030 (0x0030 - 0x0000)
struct FCachedActivityIntentReceivedParamCS final
{
public:
	class FString                                 UserId;                                            // 0x0000(0x0010)(BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 ActivityId;                                        // 0x0010(0x0010)(BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 SessionId;                                         // 0x0020(0x0010)(BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
//static_assert(alignof(FCachedActivityIntentReceivedParamCS) == 0x000008, "Wrong alignment on FCachedActivityIntentReceivedParamCS");
//static_assert(sizeof(FCachedActivityIntentReceivedParamCS) == 0x000030, "Wrong size on FCachedActivityIntentReceivedParamCS");
//static_assert(offsetof(FCachedActivityIntentReceivedParamCS, UserId) == 0x000000, "Member 'FCachedActivityIntentReceivedParamCS::UserId' has a wrong offset!");
//static_assert(offsetof(FCachedActivityIntentReceivedParamCS, ActivityId) == 0x000010, "Member 'FCachedActivityIntentReceivedParamCS::ActivityId' has a wrong offset!");
//static_assert(offsetof(FCachedActivityIntentReceivedParamCS, SessionId) == 0x000020, "Member 'FCachedActivityIntentReceivedParamCS::SessionId' has a wrong offset!");

// ScriptStruct UnrealExtent.GamePresets
// 0x0020 (0x0020 - 0x0000)
struct FGamePresets final
{
public:
	int32                                         Difficulty;                                        // 0x0000(0x0004)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Priority;                                          // 0x0004(0x0004)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         InvertVerticalViewFor1stPersonView;                // 0x0008(0x0004)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         InvertHorizontalViewFor1stPersonView;              // 0x000C(0x0004)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         InvertVerticalViewFor3rdPersonView;                // 0x0010(0x0004)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         InvertHorizontalViewFor3rdPersonView;              // 0x0014(0x0004)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         DisplaySubtitles;                                  // 0x0018(0x0004)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         AudioLanguage;                                     // 0x001C(0x0004)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
//static_assert(alignof(FGamePresets) == 0x000004, "Wrong alignment on FGamePresets");
//static_assert(sizeof(FGamePresets) == 0x000020, "Wrong size on FGamePresets");
//static_assert(offsetof(FGamePresets, Difficulty) == 0x000000, "Member 'FGamePresets::Difficulty' has a wrong offset!");
//static_assert(offsetof(FGamePresets, Priority) == 0x000004, "Member 'FGamePresets::Priority' has a wrong offset!");
//static_assert(offsetof(FGamePresets, InvertVerticalViewFor1stPersonView) == 0x000008, "Member 'FGamePresets::InvertVerticalViewFor1stPersonView' has a wrong offset!");
//static_assert(offsetof(FGamePresets, InvertHorizontalViewFor1stPersonView) == 0x00000C, "Member 'FGamePresets::InvertHorizontalViewFor1stPersonView' has a wrong offset!");
//static_assert(offsetof(FGamePresets, InvertVerticalViewFor3rdPersonView) == 0x000010, "Member 'FGamePresets::InvertVerticalViewFor3rdPersonView' has a wrong offset!");
//static_assert(offsetof(FGamePresets, InvertHorizontalViewFor3rdPersonView) == 0x000014, "Member 'FGamePresets::InvertHorizontalViewFor3rdPersonView' has a wrong offset!");
//static_assert(offsetof(FGamePresets, DisplaySubtitles) == 0x000018, "Member 'FGamePresets::DisplaySubtitles' has a wrong offset!");
//static_assert(offsetof(FGamePresets, AudioLanguage) == 0x00001C, "Member 'FGamePresets::AudioLanguage' has a wrong offset!");

// ScriptStruct UnrealExtent.GridlyTableCell
// 0x0030 (0x0030 - 0x0000)
struct FGridlyTableCell final
{
public:
	class FString                                 ColumnId;                                          // 0x0000(0x0010)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 DependencyStatus;                                  // 0x0010(0x0010)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 Value;                                             // 0x0020(0x0010)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
//static_assert(alignof(FGridlyTableCell) == 0x000008, "Wrong alignment on FGridlyTableCell");
//static_assert(sizeof(FGridlyTableCell) == 0x000030, "Wrong size on FGridlyTableCell");
//static_assert(offsetof(FGridlyTableCell, ColumnId) == 0x000000, "Member 'FGridlyTableCell::ColumnId' has a wrong offset!");
//static_assert(offsetof(FGridlyTableCell, DependencyStatus) == 0x000010, "Member 'FGridlyTableCell::DependencyStatus' has a wrong offset!");
//static_assert(offsetof(FGridlyTableCell, Value) == 0x000020, "Member 'FGridlyTableCell::Value' has a wrong offset!");

// ScriptStruct UnrealExtent.GridlyTableRow
// 0x0030 (0x0030 - 0x0000)
struct FGridlyTableRow final
{
public:
	class FString                                 ID;                                                // 0x0000(0x0010)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 Path;                                              // 0x0010(0x0010)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<struct FGridlyTableCell>               Cells;                                             // 0x0020(0x0010)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NativeAccessSpecifierPublic)
};
//static_assert(alignof(FGridlyTableRow) == 0x000008, "Wrong alignment on FGridlyTableRow");
//static_assert(sizeof(FGridlyTableRow) == 0x000030, "Wrong size on FGridlyTableRow");
//static_assert(offsetof(FGridlyTableRow, ID) == 0x000000, "Member 'FGridlyTableRow::ID' has a wrong offset!");
//static_assert(offsetof(FGridlyTableRow, Path) == 0x000010, "Member 'FGridlyTableRow::Path' has a wrong offset!");
//static_assert(offsetof(FGridlyTableRow, Cells) == 0x000020, "Member 'FGridlyTableRow::Cells' has a wrong offset!");

// ScriptStruct UnrealExtent.GSConnectionInfo
// 0x0058 (0x0058 - 0x0000)
struct FGSConnectionInfo final
{
public:
	class FString                                 URLInfo;                                           // 0x0000(0x0010)(BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         InSpeedByte;                                       // 0x0010(0x0004)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         OutSpeedByte;                                      // 0x0014(0x0004)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	double                                        NetLagMS;                                          // 0x0018(0x0008)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FUniqueNetIdRepl                       PlayerId;                                          // 0x0020(0x0030)(BlueprintVisible, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         PktLostRate;                                       // 0x0050(0x0004)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_54[0x4];                                       // 0x0054(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
//static_assert(alignof(FGSConnectionInfo) == 0x000008, "Wrong alignment on FGSConnectionInfo");
//static_assert(sizeof(FGSConnectionInfo) == 0x000058, "Wrong size on FGSConnectionInfo");
//static_assert(offsetof(FGSConnectionInfo, URLInfo) == 0x000000, "Member 'FGSConnectionInfo::URLInfo' has a wrong offset!");
//static_assert(offsetof(FGSConnectionInfo, InSpeedByte) == 0x000010, "Member 'FGSConnectionInfo::InSpeedByte' has a wrong offset!");
//static_assert(offsetof(FGSConnectionInfo, OutSpeedByte) == 0x000014, "Member 'FGSConnectionInfo::OutSpeedByte' has a wrong offset!");
//static_assert(offsetof(FGSConnectionInfo, NetLagMS) == 0x000018, "Member 'FGSConnectionInfo::NetLagMS' has a wrong offset!");
//static_assert(offsetof(FGSConnectionInfo, PlayerId) == 0x000020, "Member 'FGSConnectionInfo::PlayerId' has a wrong offset!");
//static_assert(offsetof(FGSConnectionInfo, PktLostRate) == 0x000050, "Member 'FGSConnectionInfo::PktLostRate' has a wrong offset!");

// ScriptStruct UnrealExtent.SequenceBindingIDInCS
// 0x0018 (0x0018 - 0x0000)
struct FSequenceBindingIDInCS final
{
public:
	int32                                         SequenceID;                                        // 0x0000(0x0004)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Space;                                             // 0x0004(0x0004)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FGuid                                  Guid;                                              // 0x0008(0x0010)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
//static_assert(alignof(FSequenceBindingIDInCS) == 0x000004, "Wrong alignment on FSequenceBindingIDInCS");
//static_assert(sizeof(FSequenceBindingIDInCS) == 0x000018, "Wrong size on FSequenceBindingIDInCS");
//static_assert(offsetof(FSequenceBindingIDInCS, SequenceID) == 0x000000, "Member 'FSequenceBindingIDInCS::SequenceID' has a wrong offset!");
//static_assert(offsetof(FSequenceBindingIDInCS, Space) == 0x000004, "Member 'FSequenceBindingIDInCS::Space' has a wrong offset!");
//static_assert(offsetof(FSequenceBindingIDInCS, Guid) == 0x000008, "Member 'FSequenceBindingIDInCS::Guid' has a wrong offset!");

// ScriptStruct UnrealExtent.GSScalabilityQualities
// 0x0010 (0x0010 - 0x0000)
struct FGSScalabilityQualities final
{
public:
	float                                         ResolutionQualityScale;                            // 0x0000(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EScalabilityQuality                           ViewDistanceQuality;                               // 0x0004(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EScalabilityQuality                           AntiAliasingQuality;                               // 0x0005(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EScalabilityQuality                           ShadowQuality;                                     // 0x0006(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EScalabilityQuality                           PostProcessQuality;                                // 0x0007(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EScalabilityQuality                           TextureQuality;                                    // 0x0008(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EScalabilityQuality                           EffectsQuality;                                    // 0x0009(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EScalabilityQuality                           FoliageQuality;                                    // 0x000A(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EScalabilityQuality                           ShadingQuality;                                    // 0x000B(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EScalabilityQuality                           GlobalIlluminationQuality;                         // 0x000C(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EScalabilityQuality                           ReflectionQuality;                                 // 0x000D(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_E[0x2];                                        // 0x000E(0x0002)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
//static_assert(alignof(FGSScalabilityQualities) == 0x000004, "Wrong alignment on FGSScalabilityQualities");
//static_assert(sizeof(FGSScalabilityQualities) == 0x000010, "Wrong size on FGSScalabilityQualities");
//static_assert(offsetof(FGSScalabilityQualities, ResolutionQualityScale) == 0x000000, "Member 'FGSScalabilityQualities::ResolutionQualityScale' has a wrong offset!");
//static_assert(offsetof(FGSScalabilityQualities, ViewDistanceQuality) == 0x000004, "Member 'FGSScalabilityQualities::ViewDistanceQuality' has a wrong offset!");
//static_assert(offsetof(FGSScalabilityQualities, AntiAliasingQuality) == 0x000005, "Member 'FGSScalabilityQualities::AntiAliasingQuality' has a wrong offset!");
//static_assert(offsetof(FGSScalabilityQualities, ShadowQuality) == 0x000006, "Member 'FGSScalabilityQualities::ShadowQuality' has a wrong offset!");
//static_assert(offsetof(FGSScalabilityQualities, PostProcessQuality) == 0x000007, "Member 'FGSScalabilityQualities::PostProcessQuality' has a wrong offset!");
//static_assert(offsetof(FGSScalabilityQualities, TextureQuality) == 0x000008, "Member 'FGSScalabilityQualities::TextureQuality' has a wrong offset!");
//static_assert(offsetof(FGSScalabilityQualities, EffectsQuality) == 0x000009, "Member 'FGSScalabilityQualities::EffectsQuality' has a wrong offset!");
//static_assert(offsetof(FGSScalabilityQualities, FoliageQuality) == 0x00000A, "Member 'FGSScalabilityQualities::FoliageQuality' has a wrong offset!");
//static_assert(offsetof(FGSScalabilityQualities, ShadingQuality) == 0x00000B, "Member 'FGSScalabilityQualities::ShadingQuality' has a wrong offset!");
//static_assert(offsetof(FGSScalabilityQualities, GlobalIlluminationQuality) == 0x00000C, "Member 'FGSScalabilityQualities::GlobalIlluminationQuality' has a wrong offset!");
//static_assert(offsetof(FGSScalabilityQualities, ReflectionQuality) == 0x00000D, "Member 'FGSScalabilityQualities::ReflectionQuality' has a wrong offset!");

// ScriptStruct UnrealExtent.GSMonitorInfo
// 0x0038 (0x0038 - 0x0000)
struct FGSMonitorInfo final
{
public:
	class FString                                 Name;                                              // 0x0000(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 ID;                                                // 0x0010(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bIsPrimary;                                        // 0x0020(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_21[0x3];                                       // 0x0021(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FIntPoint                              NativeResolution;                                  // 0x0024(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FIntPoint                              DisplayResolution;                                 // 0x002C(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_34[0x4];                                       // 0x0034(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
//static_assert(alignof(FGSMonitorInfo) == 0x000008, "Wrong alignment on FGSMonitorInfo");
//static_assert(sizeof(FGSMonitorInfo) == 0x000038, "Wrong size on FGSMonitorInfo");
//static_assert(offsetof(FGSMonitorInfo, Name) == 0x000000, "Member 'FGSMonitorInfo::Name' has a wrong offset!");
//static_assert(offsetof(FGSMonitorInfo, ID) == 0x000010, "Member 'FGSMonitorInfo::ID' has a wrong offset!");
//static_assert(offsetof(FGSMonitorInfo, bIsPrimary) == 0x000020, "Member 'FGSMonitorInfo::bIsPrimary' has a wrong offset!");
//static_assert(offsetof(FGSMonitorInfo, NativeResolution) == 0x000024, "Member 'FGSMonitorInfo::NativeResolution' has a wrong offset!");
//static_assert(offsetof(FGSMonitorInfo, DisplayResolution) == 0x00002C, "Member 'FGSMonitorInfo::DisplayResolution' has a wrong offset!");

// ScriptStruct UnrealExtent.ProjWidgetInfo
// 0x0070 (0x0070 - 0x0000)
struct FProjWidgetInfo final
{
public:
	class UWidget*                                Widget;                                            // 0x0000(0x0008)(Edit, BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                WorldPos;                                          // 0x0008(0x0018)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UGSRoundRectQuick*                      RoundRect;                                         // 0x0020(0x0008)(Edit, BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          UseRoundRectCalSize;                               // 0x0028(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_29[0x7];                                       // 0x0029(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector2D                              RoundRectCalSize;                                  // 0x0030(0x0010)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UGSRoundRectQuick*                      HideRoundRect;                                     // 0x0040(0x0008)(Edit, BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          NeedCheckProjView;                                 // 0x0048(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_49[0x3];                                       // 0x0049(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         ShowDistanceMax;                                   // 0x004C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          UseDistanceZoom;                                   // 0x0050(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_51[0x3];                                       // 0x0051(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         MinScale;                                          // 0x0054(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         MaxScale;                                          // 0x0058(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         ScaleRate;                                         // 0x005C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         XMinScale;                                         // 0x0060(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         XMaxScale;                                         // 0x0064(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         YMinScale;                                         // 0x0068(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         YMaxScale;                                         // 0x006C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
//static_assert(alignof(FProjWidgetInfo) == 0x000008, "Wrong alignment on FProjWidgetInfo");
//static_assert(sizeof(FProjWidgetInfo) == 0x000070, "Wrong size on FProjWidgetInfo");
//static_assert(offsetof(FProjWidgetInfo, Widget) == 0x000000, "Member 'FProjWidgetInfo::Widget' has a wrong offset!");
//static_assert(offsetof(FProjWidgetInfo, WorldPos) == 0x000008, "Member 'FProjWidgetInfo::WorldPos' has a wrong offset!");
//static_assert(offsetof(FProjWidgetInfo, RoundRect) == 0x000020, "Member 'FProjWidgetInfo::RoundRect' has a wrong offset!");
//static_assert(offsetof(FProjWidgetInfo, UseRoundRectCalSize) == 0x000028, "Member 'FProjWidgetInfo::UseRoundRectCalSize' has a wrong offset!");
//static_assert(offsetof(FProjWidgetInfo, RoundRectCalSize) == 0x000030, "Member 'FProjWidgetInfo::RoundRectCalSize' has a wrong offset!");
//static_assert(offsetof(FProjWidgetInfo, HideRoundRect) == 0x000040, "Member 'FProjWidgetInfo::HideRoundRect' has a wrong offset!");
//static_assert(offsetof(FProjWidgetInfo, NeedCheckProjView) == 0x000048, "Member 'FProjWidgetInfo::NeedCheckProjView' has a wrong offset!");
//static_assert(offsetof(FProjWidgetInfo, ShowDistanceMax) == 0x00004C, "Member 'FProjWidgetInfo::ShowDistanceMax' has a wrong offset!");
//static_assert(offsetof(FProjWidgetInfo, UseDistanceZoom) == 0x000050, "Member 'FProjWidgetInfo::UseDistanceZoom' has a wrong offset!");
//static_assert(offsetof(FProjWidgetInfo, MinScale) == 0x000054, "Member 'FProjWidgetInfo::MinScale' has a wrong offset!");
//static_assert(offsetof(FProjWidgetInfo, MaxScale) == 0x000058, "Member 'FProjWidgetInfo::MaxScale' has a wrong offset!");
//static_assert(offsetof(FProjWidgetInfo, ScaleRate) == 0x00005C, "Member 'FProjWidgetInfo::ScaleRate' has a wrong offset!");
//static_assert(offsetof(FProjWidgetInfo, XMinScale) == 0x000060, "Member 'FProjWidgetInfo::XMinScale' has a wrong offset!");
//static_assert(offsetof(FProjWidgetInfo, XMaxScale) == 0x000064, "Member 'FProjWidgetInfo::XMaxScale' has a wrong offset!");
//static_assert(offsetof(FProjWidgetInfo, YMinScale) == 0x000068, "Member 'FProjWidgetInfo::YMinScale' has a wrong offset!");
//static_assert(offsetof(FProjWidgetInfo, YMaxScale) == 0x00006C, "Member 'FProjWidgetInfo::YMaxScale' has a wrong offset!");

// ScriptStruct UnrealExtent.ProjResult
// 0x0038 (0x0038 - 0x0000)
struct FProjResult final
{
public:
	bool                                          IsInSight;                                         // 0x0000(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          IsInRound;                                         // 0x0001(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2[0x6];                                        // 0x0002(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector2D                              ScrPos;                                            // 0x0008(0x0010)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         RectAngle;                                         // 0x0018(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         IndicatorType;                                     // 0x001C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Scale;                                             // 0x0020(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_24[0x4];                                       // 0x0024(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector2D                              SizeScale;                                         // 0x0028(0x0010)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
//static_assert(alignof(FProjResult) == 0x000008, "Wrong alignment on FProjResult");
//static_assert(sizeof(FProjResult) == 0x000038, "Wrong size on FProjResult");
//static_assert(offsetof(FProjResult, IsInSight) == 0x000000, "Member 'FProjResult::IsInSight' has a wrong offset!");
//static_assert(offsetof(FProjResult, IsInRound) == 0x000001, "Member 'FProjResult::IsInRound' has a wrong offset!");
//static_assert(offsetof(FProjResult, ScrPos) == 0x000008, "Member 'FProjResult::ScrPos' has a wrong offset!");
//static_assert(offsetof(FProjResult, RectAngle) == 0x000018, "Member 'FProjResult::RectAngle' has a wrong offset!");
//static_assert(offsetof(FProjResult, IndicatorType) == 0x00001C, "Member 'FProjResult::IndicatorType' has a wrong offset!");
//static_assert(offsetof(FProjResult, Scale) == 0x000020, "Member 'FProjResult::Scale' has a wrong offset!");
//static_assert(offsetof(FProjResult, SizeScale) == 0x000028, "Member 'FProjResult::SizeScale' has a wrong offset!");

// ScriptStruct UnrealExtent.TextFoldingConfig
// 0x0020 (0x0020 - 0x0000)
struct FTextFoldingConfig final
{
public:
	int32                                         BeginIndex;                                        // 0x0000(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         EndIndex;                                          // 0x0004(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         DisplayWidth;                                      // 0x0008(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 SubstituteString;                                  // 0x0010(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
//static_assert(alignof(FTextFoldingConfig) == 0x000008, "Wrong alignment on FTextFoldingConfig");
//static_assert(sizeof(FTextFoldingConfig) == 0x000020, "Wrong size on FTextFoldingConfig");
//static_assert(offsetof(FTextFoldingConfig, BeginIndex) == 0x000000, "Member 'FTextFoldingConfig::BeginIndex' has a wrong offset!");
//static_assert(offsetof(FTextFoldingConfig, EndIndex) == 0x000004, "Member 'FTextFoldingConfig::EndIndex' has a wrong offset!");
//static_assert(offsetof(FTextFoldingConfig, DisplayWidth) == 0x000008, "Member 'FTextFoldingConfig::DisplayWidth' has a wrong offset!");
//static_assert(offsetof(FTextFoldingConfig, SubstituteString) == 0x000010, "Member 'FTextFoldingConfig::SubstituteString' has a wrong offset!");

// ScriptStruct UnrealExtent.ActorInfo
// 0x0008 (0x0008 - 0x0000)
struct alignas(0x04) FActorInfo final
{
public:
	uint8                                         Pad_0[0x8];                                        // 0x0000(0x0008)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
//static_assert(alignof(FActorInfo) == 0x000004, "Wrong alignment on FActorInfo");
//static_assert(sizeof(FActorInfo) == 0x000008, "Wrong size on FActorInfo");

// ScriptStruct UnrealExtent.GSRichCaltureConfig
// 0x0014 (0x0014 - 0x0000)
struct FGSRichCaltureConfig final
{
public:
	float                                         LinePercent;                                       // 0x0000(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FMargin                                Margin;                                            // 0x0004(0x0010)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
};
//static_assert(alignof(FGSRichCaltureConfig) == 0x000004, "Wrong alignment on FGSRichCaltureConfig");
//static_assert(sizeof(FGSRichCaltureConfig) == 0x000014, "Wrong size on FGSRichCaltureConfig");
//static_assert(offsetof(FGSRichCaltureConfig, LinePercent) == 0x000000, "Member 'FGSRichCaltureConfig::LinePercent' has a wrong offset!");
//static_assert(offsetof(FGSRichCaltureConfig, Margin) == 0x000004, "Member 'FGSRichCaltureConfig::Margin' has a wrong offset!");

// ScriptStruct UnrealExtent.Mesh
// 0x0020 (0x0020 - 0x0000)
struct FMesh final
{
public:
	TArray<int32>                                 Indices;                                           // 0x0000(0x0010)(ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<struct FVector3f>                      Positions;                                         // 0x0010(0x0010)(ZeroConstructor, NativeAccessSpecifierPublic)
};
//static_assert(alignof(FMesh) == 0x000008, "Wrong alignment on FMesh");
//static_assert(sizeof(FMesh) == 0x000020, "Wrong size on FMesh");
//static_assert(offsetof(FMesh, Indices) == 0x000000, "Member 'FMesh::Indices' has a wrong offset!");
//static_assert(offsetof(FMesh, Positions) == 0x000010, "Member 'FMesh::Positions' has a wrong offset!");

// ScriptStruct UnrealExtent.LandscapeReaderWeightData
// 0x0048 (0x0048 - 0x0000)
struct FLandscapeReaderWeightData final
{
public:
	class FString                                 LayerName;                                         // 0x0000(0x0010)(Edit, ZeroConstructor, EditConst, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 PhysicMatName;                                     // 0x0010(0x0010)(Edit, ZeroConstructor, EditConst, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         SurfaceType;                                       // 0x0020(0x0001)(Edit, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_21[0x3];                                       // 0x0021(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FLinearColor                           LayerUsageDebugColor;                              // 0x0024(0x0010)(Edit, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_34[0x4];                                       // 0x0034(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<uint8>                                 ArrData;                                           // 0x0038(0x0010)(ZeroConstructor, NativeAccessSpecifierPublic)
};
//static_assert(alignof(FLandscapeReaderWeightData) == 0x000008, "Wrong alignment on FLandscapeReaderWeightData");
//static_assert(sizeof(FLandscapeReaderWeightData) == 0x000048, "Wrong size on FLandscapeReaderWeightData");
//static_assert(offsetof(FLandscapeReaderWeightData, LayerName) == 0x000000, "Member 'FLandscapeReaderWeightData::LayerName' has a wrong offset!");
//static_assert(offsetof(FLandscapeReaderWeightData, PhysicMatName) == 0x000010, "Member 'FLandscapeReaderWeightData::PhysicMatName' has a wrong offset!");
//static_assert(offsetof(FLandscapeReaderWeightData, SurfaceType) == 0x000020, "Member 'FLandscapeReaderWeightData::SurfaceType' has a wrong offset!");
//static_assert(offsetof(FLandscapeReaderWeightData, LayerUsageDebugColor) == 0x000024, "Member 'FLandscapeReaderWeightData::LayerUsageDebugColor' has a wrong offset!");
//static_assert(offsetof(FLandscapeReaderWeightData, ArrData) == 0x000038, "Member 'FLandscapeReaderWeightData::ArrData' has a wrong offset!");

// ScriptStruct UnrealExtent.LandscapeReaderAllWeightData
// 0x0010 (0x0010 - 0x0000)
struct FLandscapeReaderAllWeightData final
{
public:
	TArray<struct FLandscapeReaderWeightData>     AllLayerData;                                      // 0x0000(0x0010)(Edit, ZeroConstructor, EditConst, NativeAccessSpecifierPublic)
};
//static_assert(alignof(FLandscapeReaderAllWeightData) == 0x000008, "Wrong alignment on FLandscapeReaderAllWeightData");
//static_assert(sizeof(FLandscapeReaderAllWeightData) == 0x000010, "Wrong size on FLandscapeReaderAllWeightData");
//static_assert(offsetof(FLandscapeReaderAllWeightData, AllLayerData) == 0x000000, "Member 'FLandscapeReaderAllWeightData::AllLayerData' has a wrong offset!");

// ScriptStruct UnrealExtent.LayerData
// 0x0048 (0x0048 - 0x0000)
struct FLayerData final
{
public:
	class FString                                 LayerName;                                         // 0x0000(0x0010)(Edit, ZeroConstructor, EditConst, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 PhysicMatName;                                     // 0x0010(0x0010)(Edit, ZeroConstructor, EditConst, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         SurfaceType;                                       // 0x0020(0x0001)(Edit, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_21[0x3];                                       // 0x0021(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FLinearColor                           LayerUsageDebugColor;                              // 0x0024(0x0010)(Edit, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_34[0x4];                                       // 0x0034(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<uint8>                                 WeightData;                                        // 0x0038(0x0010)(ZeroConstructor, NativeAccessSpecifierPublic)
};
//static_assert(alignof(FLayerData) == 0x000008, "Wrong alignment on FLayerData");
//static_assert(sizeof(FLayerData) == 0x000048, "Wrong size on FLayerData");
//static_assert(offsetof(FLayerData, LayerName) == 0x000000, "Member 'FLayerData::LayerName' has a wrong offset!");
//static_assert(offsetof(FLayerData, PhysicMatName) == 0x000010, "Member 'FLayerData::PhysicMatName' has a wrong offset!");
//static_assert(offsetof(FLayerData, SurfaceType) == 0x000020, "Member 'FLayerData::SurfaceType' has a wrong offset!");
//static_assert(offsetof(FLayerData, LayerUsageDebugColor) == 0x000024, "Member 'FLayerData::LayerUsageDebugColor' has a wrong offset!");
//static_assert(offsetof(FLayerData, WeightData) == 0x000038, "Member 'FLayerData::WeightData' has a wrong offset!");

// ScriptStruct UnrealExtent.AllLayerData
// 0x0020 (0x0020 - 0x0000)
struct FAllLayerData final
{
public:
	TArray<struct FLayerData>                     AllLayerData;                                      // 0x0000(0x0010)(Edit, ZeroConstructor, EditConst, NativeAccessSpecifierPublic)
	TArray<uint16>                                HeightData;                                        // 0x0010(0x0010)(ZeroConstructor, NativeAccessSpecifierPublic)
};
//static_assert(alignof(FAllLayerData) == 0x000008, "Wrong alignment on FAllLayerData");
//static_assert(sizeof(FAllLayerData) == 0x000020, "Wrong size on FAllLayerData");
//static_assert(offsetof(FAllLayerData, AllLayerData) == 0x000000, "Member 'FAllLayerData::AllLayerData' has a wrong offset!");
//static_assert(offsetof(FAllLayerData, HeightData) == 0x000010, "Member 'FAllLayerData::HeightData' has a wrong offset!");

// ScriptStruct UnrealExtent.BilinearSamplePoint
// 0x0028 (0x0028 - 0x0000)
struct alignas(0x04) FBilinearSamplePoint final
{
public:
	uint8                                         Pad_0[0x28];                                       // 0x0000(0x0028)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
//static_assert(alignof(FBilinearSamplePoint) == 0x000004, "Wrong alignment on FBilinearSamplePoint");
//static_assert(sizeof(FBilinearSamplePoint) == 0x000028, "Wrong size on FBilinearSamplePoint");

// ScriptStruct UnrealExtent.RTAvatarRectLightConfig
// 0x0080 (0x0080 - 0x0000)
struct FRTAvatarRectLightConfig final
{
public:
	struct FTransform                             LightTransform;                                    // 0x0000(0x0060)(Edit, BlueprintVisible, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	float                                         Intensity;                                         // 0x0060(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FLinearColor                           LightColor;                                        // 0x0064(0x0010)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         SourceWidth;                                       // 0x0074(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         SourceHeight;                                      // 0x0078(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_7C[0x4];                                       // 0x007C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
//static_assert(alignof(FRTAvatarRectLightConfig) == 0x000010, "Wrong alignment on FRTAvatarRectLightConfig");
//static_assert(sizeof(FRTAvatarRectLightConfig) == 0x000080, "Wrong size on FRTAvatarRectLightConfig");
//static_assert(offsetof(FRTAvatarRectLightConfig, LightTransform) == 0x000000, "Member 'FRTAvatarRectLightConfig::LightTransform' has a wrong offset!");
//static_assert(offsetof(FRTAvatarRectLightConfig, Intensity) == 0x000060, "Member 'FRTAvatarRectLightConfig::Intensity' has a wrong offset!");
//static_assert(offsetof(FRTAvatarRectLightConfig, LightColor) == 0x000064, "Member 'FRTAvatarRectLightConfig::LightColor' has a wrong offset!");
//static_assert(offsetof(FRTAvatarRectLightConfig, SourceWidth) == 0x000074, "Member 'FRTAvatarRectLightConfig::SourceWidth' has a wrong offset!");
//static_assert(offsetof(FRTAvatarRectLightConfig, SourceHeight) == 0x000078, "Member 'FRTAvatarRectLightConfig::SourceHeight' has a wrong offset!");

// ScriptStruct UnrealExtent.FadeObjStruct
// 0x0030 (0x0030 - 0x0000)
struct FFadeObjStruct final
{
public:
	class UPrimitiveComponent*                    PrimitiveComp;                                     // 0x0000(0x0008)(ExportObject, ZeroConstructor, Transient, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<class UMaterialInterface*>             baseMatInterface;                                  // 0x0008(0x0010)(ZeroConstructor, Transient, NativeAccessSpecifierPublic)
	TArray<class UMaterialInstanceDynamic*>       FadeMID;                                           // 0x0018(0x0010)(ZeroConstructor, Transient, NativeAccessSpecifierPublic)
	float                                         FadeCurrent;                                       // 0x0028(0x0004)(ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bToHide;                                           // 0x002C(0x0001)(ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2D[0x3];                                       // 0x002D(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
//static_assert(alignof(FFadeObjStruct) == 0x000008, "Wrong alignment on FFadeObjStruct");
//static_assert(sizeof(FFadeObjStruct) == 0x000030, "Wrong size on FFadeObjStruct");
//static_assert(offsetof(FFadeObjStruct, PrimitiveComp) == 0x000000, "Member 'FFadeObjStruct::PrimitiveComp' has a wrong offset!");
//static_assert(offsetof(FFadeObjStruct, baseMatInterface) == 0x000008, "Member 'FFadeObjStruct::baseMatInterface' has a wrong offset!");
//static_assert(offsetof(FFadeObjStruct, FadeMID) == 0x000018, "Member 'FFadeObjStruct::FadeMID' has a wrong offset!");
//static_assert(offsetof(FFadeObjStruct, FadeCurrent) == 0x000028, "Member 'FFadeObjStruct::FadeCurrent' has a wrong offset!");
//static_assert(offsetof(FFadeObjStruct, bToHide) == 0x00002C, "Member 'FFadeObjStruct::bToHide' has a wrong offset!");

// ScriptStruct UnrealExtent.StatUISimulatedGraphicsCardScaleFactor
// 0x0058 (0x0058 - 0x0000)
struct FStatUISimulatedGraphicsCardScaleFactor final
{
public:
	EStatUISimulatedGraphicsCard                  GraphicsCard;                                      // 0x0000(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x7];                                        // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TMap<class FString, float>                    PerformanceScaleFactorMap;                         // 0x0008(0x0050)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
};
//static_assert(alignof(FStatUISimulatedGraphicsCardScaleFactor) == 0x000008, "Wrong alignment on FStatUISimulatedGraphicsCardScaleFactor");
//static_assert(sizeof(FStatUISimulatedGraphicsCardScaleFactor) == 0x000058, "Wrong size on FStatUISimulatedGraphicsCardScaleFactor");
//static_assert(offsetof(FStatUISimulatedGraphicsCardScaleFactor, GraphicsCard) == 0x000000, "Member 'FStatUISimulatedGraphicsCardScaleFactor::GraphicsCard' has a wrong offset!");
//static_assert(offsetof(FStatUISimulatedGraphicsCardScaleFactor, PerformanceScaleFactorMap) == 0x000008, "Member 'FStatUISimulatedGraphicsCardScaleFactor::PerformanceScaleFactorMap' has a wrong offset!");

// ScriptStruct UnrealExtent.StatInfoThreshold
// 0x0048 (0x0048 - 0x0000)
struct FStatInfoThreshold final
{
public:
	class FString                                 StatName;                                          // 0x0000(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 Label;                                             // 0x0010(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Value;                                             // 0x0020(0x0004)(Edit, BlueprintVisible, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_24[0x4];                                       // 0x0024(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 ValueString;                                       // 0x0028(0x0010)(Edit, BlueprintVisible, ZeroConstructor, EditConst, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         MediumThreshold;                                   // 0x0038(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         HighThreshold;                                     // 0x003C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         SevereThreshold;                                   // 0x0040(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_44[0x4];                                       // 0x0044(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
//static_assert(alignof(FStatInfoThreshold) == 0x000008, "Wrong alignment on FStatInfoThreshold");
//static_assert(sizeof(FStatInfoThreshold) == 0x000048, "Wrong size on FStatInfoThreshold");
//static_assert(offsetof(FStatInfoThreshold, StatName) == 0x000000, "Member 'FStatInfoThreshold::StatName' has a wrong offset!");
//static_assert(offsetof(FStatInfoThreshold, Label) == 0x000010, "Member 'FStatInfoThreshold::Label' has a wrong offset!");
//static_assert(offsetof(FStatInfoThreshold, Value) == 0x000020, "Member 'FStatInfoThreshold::Value' has a wrong offset!");
//static_assert(offsetof(FStatInfoThreshold, ValueString) == 0x000028, "Member 'FStatInfoThreshold::ValueString' has a wrong offset!");
//static_assert(offsetof(FStatInfoThreshold, MediumThreshold) == 0x000038, "Member 'FStatInfoThreshold::MediumThreshold' has a wrong offset!");
//static_assert(offsetof(FStatInfoThreshold, HighThreshold) == 0x00003C, "Member 'FStatInfoThreshold::HighThreshold' has a wrong offset!");
//static_assert(offsetof(FStatInfoThreshold, SevereThreshold) == 0x000040, "Member 'FStatInfoThreshold::SevereThreshold' has a wrong offset!");

// ScriptStruct UnrealExtent.VATAnimClipInfo
// 0x0020 (0x0020 - 0x0000)
struct FVATAnimClipInfo final
{
public:
	int32                                         State;                                             // 0x0000(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         StartFrame;                                        // 0x0004(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         EndFrame;                                          // 0x0008(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 Name;                                              // 0x0010(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
//static_assert(alignof(FVATAnimClipInfo) == 0x000008, "Wrong alignment on FVATAnimClipInfo");
//static_assert(sizeof(FVATAnimClipInfo) == 0x000020, "Wrong size on FVATAnimClipInfo");
//static_assert(offsetof(FVATAnimClipInfo, State) == 0x000000, "Member 'FVATAnimClipInfo::State' has a wrong offset!");
//static_assert(offsetof(FVATAnimClipInfo, StartFrame) == 0x000004, "Member 'FVATAnimClipInfo::StartFrame' has a wrong offset!");
//static_assert(offsetof(FVATAnimClipInfo, EndFrame) == 0x000008, "Member 'FVATAnimClipInfo::EndFrame' has a wrong offset!");
//static_assert(offsetof(FVATAnimClipInfo, Name) == 0x000010, "Member 'FVATAnimClipInfo::Name' has a wrong offset!");

// ScriptStruct UnrealExtent.VATAnimMachineConfig
// 0x0028 (0x0028 - 0x0000)
struct FVATAnimMachineConfig final
{
public:
	float                                         PlaySpeed;                                         // 0x0000(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         FrameRate;                                         // 0x0004(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         BlendRatio;                                        // 0x0008(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          Loop;                                              // 0x000C(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_D[0x3];                                        // 0x000D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class UTexture2D*                             ClipTexture;                                       // 0x0010(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         WindDirectionX;                                    // 0x0018(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         WindDirectionY;                                    // 0x001C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         WindIntensity;                                     // 0x0020(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         IdleClip;                                          // 0x0024(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
//static_assert(alignof(FVATAnimMachineConfig) == 0x000008, "Wrong alignment on FVATAnimMachineConfig");
//static_assert(sizeof(FVATAnimMachineConfig) == 0x000028, "Wrong size on FVATAnimMachineConfig");
//static_assert(offsetof(FVATAnimMachineConfig, PlaySpeed) == 0x000000, "Member 'FVATAnimMachineConfig::PlaySpeed' has a wrong offset!");
//static_assert(offsetof(FVATAnimMachineConfig, FrameRate) == 0x000004, "Member 'FVATAnimMachineConfig::FrameRate' has a wrong offset!");
//static_assert(offsetof(FVATAnimMachineConfig, BlendRatio) == 0x000008, "Member 'FVATAnimMachineConfig::BlendRatio' has a wrong offset!");
//static_assert(offsetof(FVATAnimMachineConfig, Loop) == 0x00000C, "Member 'FVATAnimMachineConfig::Loop' has a wrong offset!");
//static_assert(offsetof(FVATAnimMachineConfig, ClipTexture) == 0x000010, "Member 'FVATAnimMachineConfig::ClipTexture' has a wrong offset!");
//static_assert(offsetof(FVATAnimMachineConfig, WindDirectionX) == 0x000018, "Member 'FVATAnimMachineConfig::WindDirectionX' has a wrong offset!");
//static_assert(offsetof(FVATAnimMachineConfig, WindDirectionY) == 0x00001C, "Member 'FVATAnimMachineConfig::WindDirectionY' has a wrong offset!");
//static_assert(offsetof(FVATAnimMachineConfig, WindIntensity) == 0x000020, "Member 'FVATAnimMachineConfig::WindIntensity' has a wrong offset!");
//static_assert(offsetof(FVATAnimMachineConfig, IdleClip) == 0x000024, "Member 'FVATAnimMachineConfig::IdleClip' has a wrong offset!");

}

