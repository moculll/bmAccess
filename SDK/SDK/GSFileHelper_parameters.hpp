#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: GSFileHelper

#include "Basic.hpp"


namespace SDK::Params
{

// Function GSFileHelper.GSFileHelper.CreateDirectory
// 0x0018 (0x0018 - 0x0000)
struct GSFileHelper_CreateDirectory final
{
public:
	class FString                                 Directory;                                         // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0010(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_11[0x7];                                       // 0x0011(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
//static_assert(alignof(GSFileHelper_CreateDirectory) == 0x000008, "Wrong alignment on GSFileHelper_CreateDirectory");
//static_assert(sizeof(GSFileHelper_CreateDirectory) == 0x000018, "Wrong size on GSFileHelper_CreateDirectory");
//static_assert(offsetof(GSFileHelper_CreateDirectory, Directory) == 0x000000, "Member 'GSFileHelper_CreateDirectory::Directory' has a wrong offset!");
//static_assert(offsetof(GSFileHelper_CreateDirectory, ReturnValue) == 0x000010, "Member 'GSFileHelper_CreateDirectory::ReturnValue' has a wrong offset!");

// Function GSFileHelper.GSFileHelper.DeleteDirectory
// 0x0018 (0x0018 - 0x0000)
struct GSFileHelper_DeleteDirectory final
{
public:
	class FString                                 Directory;                                         // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0010(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_11[0x7];                                       // 0x0011(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
//static_assert(alignof(GSFileHelper_DeleteDirectory) == 0x000008, "Wrong alignment on GSFileHelper_DeleteDirectory");
//static_assert(sizeof(GSFileHelper_DeleteDirectory) == 0x000018, "Wrong size on GSFileHelper_DeleteDirectory");
//static_assert(offsetof(GSFileHelper_DeleteDirectory, Directory) == 0x000000, "Member 'GSFileHelper_DeleteDirectory::Directory' has a wrong offset!");
//static_assert(offsetof(GSFileHelper_DeleteDirectory, ReturnValue) == 0x000010, "Member 'GSFileHelper_DeleteDirectory::ReturnValue' has a wrong offset!");

// Function GSFileHelper.GSFileHelper.DeleteFile
// 0x0018 (0x0018 - 0x0000)
struct GSFileHelper_DeleteFile final
{
public:
	class FString                                 Filename;                                          // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0010(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_11[0x7];                                       // 0x0011(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
//static_assert(alignof(GSFileHelper_DeleteFile) == 0x000008, "Wrong alignment on GSFileHelper_DeleteFile");
//static_assert(sizeof(GSFileHelper_DeleteFile) == 0x000018, "Wrong size on GSFileHelper_DeleteFile");
//static_assert(offsetof(GSFileHelper_DeleteFile, Filename) == 0x000000, "Member 'GSFileHelper_DeleteFile::Filename' has a wrong offset!");
//static_assert(offsetof(GSFileHelper_DeleteFile, ReturnValue) == 0x000010, "Member 'GSFileHelper_DeleteFile::ReturnValue' has a wrong offset!");

// Function GSFileHelper.GSFileHelper.DirectoryExists
// 0x0018 (0x0018 - 0x0000)
struct GSFileHelper_DirectoryExists final
{
public:
	class FString                                 Directory;                                         // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0010(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_11[0x7];                                       // 0x0011(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
//static_assert(alignof(GSFileHelper_DirectoryExists) == 0x000008, "Wrong alignment on GSFileHelper_DirectoryExists");
//static_assert(sizeof(GSFileHelper_DirectoryExists) == 0x000018, "Wrong size on GSFileHelper_DirectoryExists");
//static_assert(offsetof(GSFileHelper_DirectoryExists, Directory) == 0x000000, "Member 'GSFileHelper_DirectoryExists::Directory' has a wrong offset!");
//static_assert(offsetof(GSFileHelper_DirectoryExists, ReturnValue) == 0x000010, "Member 'GSFileHelper_DirectoryExists::ReturnValue' has a wrong offset!");

// Function GSFileHelper.GSFileHelper.FileExists
// 0x0018 (0x0018 - 0x0000)
struct GSFileHelper_FileExists final
{
public:
	class FString                                 Filename;                                          // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0010(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_11[0x7];                                       // 0x0011(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
//static_assert(alignof(GSFileHelper_FileExists) == 0x000008, "Wrong alignment on GSFileHelper_FileExists");
//static_assert(sizeof(GSFileHelper_FileExists) == 0x000018, "Wrong size on GSFileHelper_FileExists");
//static_assert(offsetof(GSFileHelper_FileExists, Filename) == 0x000000, "Member 'GSFileHelper_FileExists::Filename' has a wrong offset!");
//static_assert(offsetof(GSFileHelper_FileExists, ReturnValue) == 0x000010, "Member 'GSFileHelper_FileExists::ReturnValue' has a wrong offset!");

// Function GSFileHelper.GSFileHelper.FileSize
// 0x0018 (0x0018 - 0x0000)
struct GSFileHelper_FileSize final
{
public:
	class FString                                 Filename;                                          // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int64                                         ReturnValue;                                       // 0x0010(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
//static_assert(alignof(GSFileHelper_FileSize) == 0x000008, "Wrong alignment on GSFileHelper_FileSize");
//static_assert(sizeof(GSFileHelper_FileSize) == 0x000018, "Wrong size on GSFileHelper_FileSize");
//static_assert(offsetof(GSFileHelper_FileSize, Filename) == 0x000000, "Member 'GSFileHelper_FileSize::Filename' has a wrong offset!");
//static_assert(offsetof(GSFileHelper_FileSize, ReturnValue) == 0x000010, "Member 'GSFileHelper_FileSize::ReturnValue' has a wrong offset!");

// Function GSFileHelper.GSFileHelper.FindFiles
// 0x0030 (0x0030 - 0x0000)
struct GSFileHelper_FindFiles final
{
public:
	class FString                                 Directory;                                         // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<class FString>                         FoundFiles;                                        // 0x0010(0x0010)(Parm, OutParm, ZeroConstructor, NativeAccessSpecifierPublic)
	class FString                                 FileExtension;                                     // 0x0020(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
//static_assert(alignof(GSFileHelper_FindFiles) == 0x000008, "Wrong alignment on GSFileHelper_FindFiles");
//static_assert(sizeof(GSFileHelper_FindFiles) == 0x000030, "Wrong size on GSFileHelper_FindFiles");
//static_assert(offsetof(GSFileHelper_FindFiles, Directory) == 0x000000, "Member 'GSFileHelper_FindFiles::Directory' has a wrong offset!");
//static_assert(offsetof(GSFileHelper_FindFiles, FoundFiles) == 0x000010, "Member 'GSFileHelper_FindFiles::FoundFiles' has a wrong offset!");
//static_assert(offsetof(GSFileHelper_FindFiles, FileExtension) == 0x000020, "Member 'GSFileHelper_FindFiles::FileExtension' has a wrong offset!");

// Function GSFileHelper.GSFileHelper.FindFilesRecursively
// 0x0030 (0x0030 - 0x0000)
struct GSFileHelper_FindFilesRecursively final
{
public:
	class FString                                 Directory;                                         // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<class FString>                         FoundFiles;                                        // 0x0010(0x0010)(Parm, OutParm, ZeroConstructor, NativeAccessSpecifierPublic)
	class FString                                 FileExtension;                                     // 0x0020(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
//static_assert(alignof(GSFileHelper_FindFilesRecursively) == 0x000008, "Wrong alignment on GSFileHelper_FindFilesRecursively");
//static_assert(sizeof(GSFileHelper_FindFilesRecursively) == 0x000030, "Wrong size on GSFileHelper_FindFilesRecursively");
//static_assert(offsetof(GSFileHelper_FindFilesRecursively, Directory) == 0x000000, "Member 'GSFileHelper_FindFilesRecursively::Directory' has a wrong offset!");
//static_assert(offsetof(GSFileHelper_FindFilesRecursively, FoundFiles) == 0x000010, "Member 'GSFileHelper_FindFilesRecursively::FoundFiles' has a wrong offset!");
//static_assert(offsetof(GSFileHelper_FindFilesRecursively, FileExtension) == 0x000020, "Member 'GSFileHelper_FindFilesRecursively::FileExtension' has a wrong offset!");

// Function GSFileHelper.GSFileHelper.GetTimeStampTicks
// 0x0018 (0x0018 - 0x0000)
struct GSFileHelper_GetTimeStampTicks final
{
public:
	class FString                                 Filename;                                          // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int64                                         ReturnValue;                                       // 0x0010(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
//static_assert(alignof(GSFileHelper_GetTimeStampTicks) == 0x000008, "Wrong alignment on GSFileHelper_GetTimeStampTicks");
//static_assert(sizeof(GSFileHelper_GetTimeStampTicks) == 0x000018, "Wrong size on GSFileHelper_GetTimeStampTicks");
//static_assert(offsetof(GSFileHelper_GetTimeStampTicks, Filename) == 0x000000, "Member 'GSFileHelper_GetTimeStampTicks::Filename' has a wrong offset!");
//static_assert(offsetof(GSFileHelper_GetTimeStampTicks, ReturnValue) == 0x000010, "Member 'GSFileHelper_GetTimeStampTicks::ReturnValue' has a wrong offset!");

// Function GSFileHelper.GSFileHelper.ReadFile
// 0x0028 (0x0028 - 0x0000)
struct GSFileHelper_ReadFile final
{
public:
	class FString                                 Filename;                                          // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<uint8>                                 BytesToRead;                                       // 0x0010(0x0010)(Parm, OutParm, ZeroConstructor, NativeAccessSpecifierPublic)
	bool                                          IsStandardPath;                                    // 0x0020(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0021(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_22[0x6];                                       // 0x0022(0x0006)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
//static_assert(alignof(GSFileHelper_ReadFile) == 0x000008, "Wrong alignment on GSFileHelper_ReadFile");
//static_assert(sizeof(GSFileHelper_ReadFile) == 0x000028, "Wrong size on GSFileHelper_ReadFile");
//static_assert(offsetof(GSFileHelper_ReadFile, Filename) == 0x000000, "Member 'GSFileHelper_ReadFile::Filename' has a wrong offset!");
//static_assert(offsetof(GSFileHelper_ReadFile, BytesToRead) == 0x000010, "Member 'GSFileHelper_ReadFile::BytesToRead' has a wrong offset!");
//static_assert(offsetof(GSFileHelper_ReadFile, IsStandardPath) == 0x000020, "Member 'GSFileHelper_ReadFile::IsStandardPath' has a wrong offset!");
//static_assert(offsetof(GSFileHelper_ReadFile, ReturnValue) == 0x000021, "Member 'GSFileHelper_ReadFile::ReturnValue' has a wrong offset!");

// Function GSFileHelper.GSFileHelper.WriteFile
// 0x0028 (0x0028 - 0x0000)
struct GSFileHelper_WriteFile final
{
public:
	class FString                                 Filename;                                          // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<uint8>                                 BytesToWrite;                                      // 0x0010(0x0010)(Parm, ZeroConstructor, NativeAccessSpecifierPublic)
	bool                                          bAppend;                                           // 0x0020(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          IsStandardPath;                                    // 0x0021(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0022(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_23[0x5];                                       // 0x0023(0x0005)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
//static_assert(alignof(GSFileHelper_WriteFile) == 0x000008, "Wrong alignment on GSFileHelper_WriteFile");
//static_assert(sizeof(GSFileHelper_WriteFile) == 0x000028, "Wrong size on GSFileHelper_WriteFile");
//static_assert(offsetof(GSFileHelper_WriteFile, Filename) == 0x000000, "Member 'GSFileHelper_WriteFile::Filename' has a wrong offset!");
//static_assert(offsetof(GSFileHelper_WriteFile, BytesToWrite) == 0x000010, "Member 'GSFileHelper_WriteFile::BytesToWrite' has a wrong offset!");
//static_assert(offsetof(GSFileHelper_WriteFile, bAppend) == 0x000020, "Member 'GSFileHelper_WriteFile::bAppend' has a wrong offset!");
//static_assert(offsetof(GSFileHelper_WriteFile, IsStandardPath) == 0x000021, "Member 'GSFileHelper_WriteFile::IsStandardPath' has a wrong offset!");
//static_assert(offsetof(GSFileHelper_WriteFile, ReturnValue) == 0x000022, "Member 'GSFileHelper_WriteFile::ReturnValue' has a wrong offset!");

}

