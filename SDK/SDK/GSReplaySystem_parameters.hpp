#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: GSReplaySystem

#include "Basic.hpp"


namespace SDK::Params
{

// Function GSReplaySystem.GSReplayCSharpFuncLib.GSNetworkRemapPath
// 0x0018 (0x0018 - 0x0000)
struct GSReplayCSharpFuncLib_GSNetworkRemapPath final
{
public:
	const class UObject*                          Outer_0;                                           // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 Name_0;                                            // 0x0008(0x0010)(Parm, OutParm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
//static_assert(alignof(GSReplayCSharpFuncLib_GSNetworkRemapPath) == 0x000008, "Wrong alignment on GSReplayCSharpFuncLib_GSNetworkRemapPath");
//static_assert(sizeof(GSReplayCSharpFuncLib_GSNetworkRemapPath) == 0x000018, "Wrong size on GSReplayCSharpFuncLib_GSNetworkRemapPath");
//static_assert(offsetof(GSReplayCSharpFuncLib_GSNetworkRemapPath, Outer_0) == 0x000000, "Member 'GSReplayCSharpFuncLib_GSNetworkRemapPath::Outer_0' has a wrong offset!");
//static_assert(offsetof(GSReplayCSharpFuncLib_GSNetworkRemapPath, Name_0) == 0x000008, "Member 'GSReplayCSharpFuncLib_GSNetworkRemapPath::Name_0' has a wrong offset!");

// Function GSReplaySystem.GSReplayCSharpFuncLib.GSNetworkRemapPathCS
// 0x0028 (0x0028 - 0x0000)
struct GSReplayCSharpFuncLib_GSNetworkRemapPathCS final
{
public:
	const class UObject*                          Outer_0;                                           // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 OriginName;                                        // 0x0008(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 Name_0;                                            // 0x0018(0x0010)(Parm, OutParm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
//static_assert(alignof(GSReplayCSharpFuncLib_GSNetworkRemapPathCS) == 0x000008, "Wrong alignment on GSReplayCSharpFuncLib_GSNetworkRemapPathCS");
//static_assert(sizeof(GSReplayCSharpFuncLib_GSNetworkRemapPathCS) == 0x000028, "Wrong size on GSReplayCSharpFuncLib_GSNetworkRemapPathCS");
//static_assert(offsetof(GSReplayCSharpFuncLib_GSNetworkRemapPathCS, Outer_0) == 0x000000, "Member 'GSReplayCSharpFuncLib_GSNetworkRemapPathCS::Outer_0' has a wrong offset!");
//static_assert(offsetof(GSReplayCSharpFuncLib_GSNetworkRemapPathCS, OriginName) == 0x000008, "Member 'GSReplayCSharpFuncLib_GSNetworkRemapPathCS::OriginName' has a wrong offset!");
//static_assert(offsetof(GSReplayCSharpFuncLib_GSNetworkRemapPathCS, Name_0) == 0x000018, "Member 'GSReplayCSharpFuncLib_GSNetworkRemapPathCS::Name_0' has a wrong offset!");

// Function GSReplaySystem.GSReplayCSharpFuncLib.OnPreScrub
// 0x0008 (0x0008 - 0x0000)
struct GSReplayCSharpFuncLib_OnPreScrub final
{
public:
	class UWorld*                                 World;                                             // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
//static_assert(alignof(GSReplayCSharpFuncLib_OnPreScrub) == 0x000008, "Wrong alignment on GSReplayCSharpFuncLib_OnPreScrub");
//static_assert(sizeof(GSReplayCSharpFuncLib_OnPreScrub) == 0x000008, "Wrong size on GSReplayCSharpFuncLib_OnPreScrub");
//static_assert(offsetof(GSReplayCSharpFuncLib_OnPreScrub, World) == 0x000000, "Member 'GSReplayCSharpFuncLib_OnPreScrub::World' has a wrong offset!");

// Function GSReplaySystem.GSReplayCSharpFuncLib.OnProcessGameSpecificDemoHeader
// 0x0020 (0x0020 - 0x0000)
struct GSReplayCSharpFuncLib_OnProcessGameSpecificDemoHeader final
{
public:
	TArray<class FString>                         GameSpecificData;                                  // 0x0000(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
	class FString                                 Error;                                             // 0x0010(0x0010)(Parm, OutParm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
//static_assert(alignof(GSReplayCSharpFuncLib_OnProcessGameSpecificDemoHeader) == 0x000008, "Wrong alignment on GSReplayCSharpFuncLib_OnProcessGameSpecificDemoHeader");
//static_assert(sizeof(GSReplayCSharpFuncLib_OnProcessGameSpecificDemoHeader) == 0x000020, "Wrong size on GSReplayCSharpFuncLib_OnProcessGameSpecificDemoHeader");
//static_assert(offsetof(GSReplayCSharpFuncLib_OnProcessGameSpecificDemoHeader, GameSpecificData) == 0x000000, "Member 'GSReplayCSharpFuncLib_OnProcessGameSpecificDemoHeader::GameSpecificData' has a wrong offset!");
//static_assert(offsetof(GSReplayCSharpFuncLib_OnProcessGameSpecificDemoHeader, Error) == 0x000010, "Member 'GSReplayCSharpFuncLib_OnProcessGameSpecificDemoHeader::Error' has a wrong offset!");

// Function GSReplaySystem.GSReplayCSharpFuncLib.OnReplayScrubComplete
// 0x0008 (0x0008 - 0x0000)
struct GSReplayCSharpFuncLib_OnReplayScrubComplete final
{
public:
	class UWorld*                                 World;                                             // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
//static_assert(alignof(GSReplayCSharpFuncLib_OnReplayScrubComplete) == 0x000008, "Wrong alignment on GSReplayCSharpFuncLib_OnReplayScrubComplete");
//static_assert(sizeof(GSReplayCSharpFuncLib_OnReplayScrubComplete) == 0x000008, "Wrong size on GSReplayCSharpFuncLib_OnReplayScrubComplete");
//static_assert(offsetof(GSReplayCSharpFuncLib_OnReplayScrubComplete, World) == 0x000000, "Member 'GSReplayCSharpFuncLib_OnReplayScrubComplete::World' has a wrong offset!");

// Function GSReplaySystem.GSReplayCSharpFuncLib.OnReplaySeverConnectionInit
// 0x0010 (0x0010 - 0x0000)
struct GSReplayCSharpFuncLib_OnReplaySeverConnectionInit final
{
public:
	class UWorld*                                 World;                                             // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UNetConnection*                         SeverConnection;                                   // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
//static_assert(alignof(GSReplayCSharpFuncLib_OnReplaySeverConnectionInit) == 0x000008, "Wrong alignment on GSReplayCSharpFuncLib_OnReplaySeverConnectionInit");
//static_assert(sizeof(GSReplayCSharpFuncLib_OnReplaySeverConnectionInit) == 0x000010, "Wrong size on GSReplayCSharpFuncLib_OnReplaySeverConnectionInit");
//static_assert(offsetof(GSReplayCSharpFuncLib_OnReplaySeverConnectionInit, World) == 0x000000, "Member 'GSReplayCSharpFuncLib_OnReplaySeverConnectionInit::World' has a wrong offset!");
//static_assert(offsetof(GSReplayCSharpFuncLib_OnReplaySeverConnectionInit, SeverConnection) == 0x000008, "Member 'GSReplayCSharpFuncLib_OnReplaySeverConnectionInit::SeverConnection' has a wrong offset!");

// Function GSReplaySystem.GSReplayCSharpFuncLib.OnReplayStarted
// 0x0008 (0x0008 - 0x0000)
struct GSReplayCSharpFuncLib_OnReplayStarted final
{
public:
	class UWorld*                                 World;                                             // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
//static_assert(alignof(GSReplayCSharpFuncLib_OnReplayStarted) == 0x000008, "Wrong alignment on GSReplayCSharpFuncLib_OnReplayStarted");
//static_assert(sizeof(GSReplayCSharpFuncLib_OnReplayStarted) == 0x000008, "Wrong size on GSReplayCSharpFuncLib_OnReplayStarted");
//static_assert(offsetof(GSReplayCSharpFuncLib_OnReplayStarted, World) == 0x000000, "Member 'GSReplayCSharpFuncLib_OnReplayStarted::World' has a wrong offset!");

// Function GSReplaySystem.GSReplayCSharpFuncLib.OnWriteGameSpecificDemoHeader
// 0x0010 (0x0010 - 0x0000)
struct GSReplayCSharpFuncLib_OnWriteGameSpecificDemoHeader final
{
public:
	TArray<class FString>                         GameSpecificData;                                  // 0x0000(0x0010)(Parm, OutParm, ZeroConstructor, NativeAccessSpecifierPublic)
};
//static_assert(alignof(GSReplayCSharpFuncLib_OnWriteGameSpecificDemoHeader) == 0x000008, "Wrong alignment on GSReplayCSharpFuncLib_OnWriteGameSpecificDemoHeader");
//static_assert(sizeof(GSReplayCSharpFuncLib_OnWriteGameSpecificDemoHeader) == 0x000010, "Wrong size on GSReplayCSharpFuncLib_OnWriteGameSpecificDemoHeader");
//static_assert(offsetof(GSReplayCSharpFuncLib_OnWriteGameSpecificDemoHeader, GameSpecificData) == 0x000000, "Member 'GSReplayCSharpFuncLib_OnWriteGameSpecificDemoHeader::GameSpecificData' has a wrong offset!");

// Function GSReplaySystem.GSReplayCSharpFuncLib.ProcessGameSpecificDemoHeaderCS
// 0x0020 (0x0020 - 0x0000)
struct GSReplayCSharpFuncLib_ProcessGameSpecificDemoHeaderCS final
{
public:
	class FString                                 GameSpecificData;                                  // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 Error;                                             // 0x0010(0x0010)(Parm, OutParm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
//static_assert(alignof(GSReplayCSharpFuncLib_ProcessGameSpecificDemoHeaderCS) == 0x000008, "Wrong alignment on GSReplayCSharpFuncLib_ProcessGameSpecificDemoHeaderCS");
//static_assert(sizeof(GSReplayCSharpFuncLib_ProcessGameSpecificDemoHeaderCS) == 0x000020, "Wrong size on GSReplayCSharpFuncLib_ProcessGameSpecificDemoHeaderCS");
//static_assert(offsetof(GSReplayCSharpFuncLib_ProcessGameSpecificDemoHeaderCS, GameSpecificData) == 0x000000, "Member 'GSReplayCSharpFuncLib_ProcessGameSpecificDemoHeaderCS::GameSpecificData' has a wrong offset!");
//static_assert(offsetof(GSReplayCSharpFuncLib_ProcessGameSpecificDemoHeaderCS, Error) == 0x000010, "Member 'GSReplayCSharpFuncLib_ProcessGameSpecificDemoHeaderCS::Error' has a wrong offset!");

// Function GSReplaySystem.GSReplayCSharpFuncLib.SetDemoCurrentTime
// 0x0004 (0x0004 - 0x0000)
struct GSReplayCSharpFuncLib_SetDemoCurrentTime final
{
public:
	float                                         InTimeToSet;                                       // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
//static_assert(alignof(GSReplayCSharpFuncLib_SetDemoCurrentTime) == 0x000004, "Wrong alignment on GSReplayCSharpFuncLib_SetDemoCurrentTime");
//static_assert(sizeof(GSReplayCSharpFuncLib_SetDemoCurrentTime) == 0x000004, "Wrong size on GSReplayCSharpFuncLib_SetDemoCurrentTime");
//static_assert(offsetof(GSReplayCSharpFuncLib_SetDemoCurrentTime, InTimeToSet) == 0x000000, "Member 'GSReplayCSharpFuncLib_SetDemoCurrentTime::InTimeToSet' has a wrong offset!");

// Function GSReplaySystem.GSReplayCSharpFuncLib.SetViewTargetPlayer
// 0x0008 (0x0008 - 0x0000)
struct GSReplayCSharpFuncLib_SetViewTargetPlayer final
{
public:
	int32                                         PlayerId;                                          // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0004(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_5[0x3];                                        // 0x0005(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
//static_assert(alignof(GSReplayCSharpFuncLib_SetViewTargetPlayer) == 0x000004, "Wrong alignment on GSReplayCSharpFuncLib_SetViewTargetPlayer");
//static_assert(sizeof(GSReplayCSharpFuncLib_SetViewTargetPlayer) == 0x000008, "Wrong size on GSReplayCSharpFuncLib_SetViewTargetPlayer");
//static_assert(offsetof(GSReplayCSharpFuncLib_SetViewTargetPlayer, PlayerId) == 0x000000, "Member 'GSReplayCSharpFuncLib_SetViewTargetPlayer::PlayerId' has a wrong offset!");
//static_assert(offsetof(GSReplayCSharpFuncLib_SetViewTargetPlayer, ReturnValue) == 0x000004, "Member 'GSReplayCSharpFuncLib_SetViewTargetPlayer::ReturnValue' has a wrong offset!");

// Function GSReplaySystem.GSReplayCSharpFuncLib.WriteGameSpecificDemoHeaderCS
// 0x0010 (0x0010 - 0x0000)
struct GSReplayCSharpFuncLib_WriteGameSpecificDemoHeaderCS final
{
public:
	TArray<class FString>                         GameSpecificData;                                  // 0x0000(0x0010)(Parm, OutParm, ZeroConstructor, NativeAccessSpecifierPublic)
};
//static_assert(alignof(GSReplayCSharpFuncLib_WriteGameSpecificDemoHeaderCS) == 0x000008, "Wrong alignment on GSReplayCSharpFuncLib_WriteGameSpecificDemoHeaderCS");
//static_assert(sizeof(GSReplayCSharpFuncLib_WriteGameSpecificDemoHeaderCS) == 0x000010, "Wrong size on GSReplayCSharpFuncLib_WriteGameSpecificDemoHeaderCS");
//static_assert(offsetof(GSReplayCSharpFuncLib_WriteGameSpecificDemoHeaderCS, GameSpecificData) == 0x000000, "Member 'GSReplayCSharpFuncLib_WriteGameSpecificDemoHeaderCS::GameSpecificData' has a wrong offset!");

// Function GSReplaySystem.GSReplayFuncLib.GetDemoCurrentTime
// 0x0010 (0x0010 - 0x0000)
struct GSReplayFuncLib_GetDemoCurrentTime final
{
public:
	const class UObject*                          WorldContext;                                      // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         ReturnValue;                                       // 0x0008(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
//static_assert(alignof(GSReplayFuncLib_GetDemoCurrentTime) == 0x000008, "Wrong alignment on GSReplayFuncLib_GetDemoCurrentTime");
//static_assert(sizeof(GSReplayFuncLib_GetDemoCurrentTime) == 0x000010, "Wrong size on GSReplayFuncLib_GetDemoCurrentTime");
//static_assert(offsetof(GSReplayFuncLib_GetDemoCurrentTime, WorldContext) == 0x000000, "Member 'GSReplayFuncLib_GetDemoCurrentTime::WorldContext' has a wrong offset!");
//static_assert(offsetof(GSReplayFuncLib_GetDemoCurrentTime, ReturnValue) == 0x000008, "Member 'GSReplayFuncLib_GetDemoCurrentTime::ReturnValue' has a wrong offset!");

// Function GSReplaySystem.GSReplayFuncLib.GetDemoPlayTimeDilation
// 0x0010 (0x0010 - 0x0000)
struct GSReplayFuncLib_GetDemoPlayTimeDilation final
{
public:
	const class UObject*                          WorldContext;                                      // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         ReturnValue;                                       // 0x0008(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
//static_assert(alignof(GSReplayFuncLib_GetDemoPlayTimeDilation) == 0x000008, "Wrong alignment on GSReplayFuncLib_GetDemoPlayTimeDilation");
//static_assert(sizeof(GSReplayFuncLib_GetDemoPlayTimeDilation) == 0x000010, "Wrong size on GSReplayFuncLib_GetDemoPlayTimeDilation");
//static_assert(offsetof(GSReplayFuncLib_GetDemoPlayTimeDilation, WorldContext) == 0x000000, "Member 'GSReplayFuncLib_GetDemoPlayTimeDilation::WorldContext' has a wrong offset!");
//static_assert(offsetof(GSReplayFuncLib_GetDemoPlayTimeDilation, ReturnValue) == 0x000008, "Member 'GSReplayFuncLib_GetDemoPlayTimeDilation::ReturnValue' has a wrong offset!");

// Function GSReplaySystem.GSReplayFuncLib.GetDemoTotalTime
// 0x0010 (0x0010 - 0x0000)
struct GSReplayFuncLib_GetDemoTotalTime final
{
public:
	const class UObject*                          WorldContext;                                      // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         ReturnValue;                                       // 0x0008(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
//static_assert(alignof(GSReplayFuncLib_GetDemoTotalTime) == 0x000008, "Wrong alignment on GSReplayFuncLib_GetDemoTotalTime");
//static_assert(sizeof(GSReplayFuncLib_GetDemoTotalTime) == 0x000010, "Wrong size on GSReplayFuncLib_GetDemoTotalTime");
//static_assert(offsetof(GSReplayFuncLib_GetDemoTotalTime, WorldContext) == 0x000000, "Member 'GSReplayFuncLib_GetDemoTotalTime::WorldContext' has a wrong offset!");
//static_assert(offsetof(GSReplayFuncLib_GetDemoTotalTime, ReturnValue) == 0x000008, "Member 'GSReplayFuncLib_GetDemoTotalTime::ReturnValue' has a wrong offset!");

// Function GSReplaySystem.GSReplayFuncLib.GetLastCheckpointTime
// 0x0010 (0x0010 - 0x0000)
struct GSReplayFuncLib_GetLastCheckpointTime final
{
public:
	const class UObject*                          WorldContext;                                      // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	double                                        ReturnValue;                                       // 0x0008(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
//static_assert(alignof(GSReplayFuncLib_GetLastCheckpointTime) == 0x000008, "Wrong alignment on GSReplayFuncLib_GetLastCheckpointTime");
//static_assert(sizeof(GSReplayFuncLib_GetLastCheckpointTime) == 0x000010, "Wrong size on GSReplayFuncLib_GetLastCheckpointTime");
//static_assert(offsetof(GSReplayFuncLib_GetLastCheckpointTime, WorldContext) == 0x000000, "Member 'GSReplayFuncLib_GetLastCheckpointTime::WorldContext' has a wrong offset!");
//static_assert(offsetof(GSReplayFuncLib_GetLastCheckpointTime, ReturnValue) == 0x000008, "Member 'GSReplayFuncLib_GetLastCheckpointTime::ReturnValue' has a wrong offset!");

// Function GSReplaySystem.GSReplayFuncLib.IsLoadingCheckpoint
// 0x0010 (0x0010 - 0x0000)
struct GSReplayFuncLib_IsLoadingCheckpoint final
{
public:
	const class UObject*                          WorldContext;                                      // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0008(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
//static_assert(alignof(GSReplayFuncLib_IsLoadingCheckpoint) == 0x000008, "Wrong alignment on GSReplayFuncLib_IsLoadingCheckpoint");
//static_assert(sizeof(GSReplayFuncLib_IsLoadingCheckpoint) == 0x000010, "Wrong size on GSReplayFuncLib_IsLoadingCheckpoint");
//static_assert(offsetof(GSReplayFuncLib_IsLoadingCheckpoint, WorldContext) == 0x000000, "Member 'GSReplayFuncLib_IsLoadingCheckpoint::WorldContext' has a wrong offset!");
//static_assert(offsetof(GSReplayFuncLib_IsLoadingCheckpoint, ReturnValue) == 0x000008, "Member 'GSReplayFuncLib_IsLoadingCheckpoint::ReturnValue' has a wrong offset!");

// Function GSReplaySystem.GSReplayFuncLib.IsPlayingReplay
// 0x0010 (0x0010 - 0x0000)
struct GSReplayFuncLib_IsPlayingReplay final
{
public:
	const class UObject*                          WorldContext;                                      // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0008(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
//static_assert(alignof(GSReplayFuncLib_IsPlayingReplay) == 0x000008, "Wrong alignment on GSReplayFuncLib_IsPlayingReplay");
//static_assert(sizeof(GSReplayFuncLib_IsPlayingReplay) == 0x000010, "Wrong size on GSReplayFuncLib_IsPlayingReplay");
//static_assert(offsetof(GSReplayFuncLib_IsPlayingReplay, WorldContext) == 0x000000, "Member 'GSReplayFuncLib_IsPlayingReplay::WorldContext' has a wrong offset!");
//static_assert(offsetof(GSReplayFuncLib_IsPlayingReplay, ReturnValue) == 0x000008, "Member 'GSReplayFuncLib_IsPlayingReplay::ReturnValue' has a wrong offset!");

// Function GSReplaySystem.GSReplayFuncLib.IsRecordingReplay
// 0x0010 (0x0010 - 0x0000)
struct GSReplayFuncLib_IsRecordingReplay final
{
public:
	const class UObject*                          WorldContext;                                      // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0008(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
//static_assert(alignof(GSReplayFuncLib_IsRecordingReplay) == 0x000008, "Wrong alignment on GSReplayFuncLib_IsRecordingReplay");
//static_assert(sizeof(GSReplayFuncLib_IsRecordingReplay) == 0x000010, "Wrong size on GSReplayFuncLib_IsRecordingReplay");
//static_assert(offsetof(GSReplayFuncLib_IsRecordingReplay, WorldContext) == 0x000000, "Member 'GSReplayFuncLib_IsRecordingReplay::WorldContext' has a wrong offset!");
//static_assert(offsetof(GSReplayFuncLib_IsRecordingReplay, ReturnValue) == 0x000008, "Member 'GSReplayFuncLib_IsRecordingReplay::ReturnValue' has a wrong offset!");

// Function GSReplaySystem.GSReplayFuncLib.IsReplayPause
// 0x0010 (0x0010 - 0x0000)
struct GSReplayFuncLib_IsReplayPause final
{
public:
	const class UObject*                          WorldContext;                                      // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0008(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
//static_assert(alignof(GSReplayFuncLib_IsReplayPause) == 0x000008, "Wrong alignment on GSReplayFuncLib_IsReplayPause");
//static_assert(sizeof(GSReplayFuncLib_IsReplayPause) == 0x000010, "Wrong size on GSReplayFuncLib_IsReplayPause");
//static_assert(offsetof(GSReplayFuncLib_IsReplayPause, WorldContext) == 0x000000, "Member 'GSReplayFuncLib_IsReplayPause::WorldContext' has a wrong offset!");
//static_assert(offsetof(GSReplayFuncLib_IsReplayPause, ReturnValue) == 0x000008, "Member 'GSReplayFuncLib_IsReplayPause::ReturnValue' has a wrong offset!");

// Function GSReplaySystem.GSReplayFuncLib.PauseReplay
// 0x0010 (0x0010 - 0x0000)
struct GSReplayFuncLib_PauseReplay final
{
public:
	const class UObject*                          WorldContext;                                      // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bPause;                                            // 0x0008(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
//static_assert(alignof(GSReplayFuncLib_PauseReplay) == 0x000008, "Wrong alignment on GSReplayFuncLib_PauseReplay");
//static_assert(sizeof(GSReplayFuncLib_PauseReplay) == 0x000010, "Wrong size on GSReplayFuncLib_PauseReplay");
//static_assert(offsetof(GSReplayFuncLib_PauseReplay, WorldContext) == 0x000000, "Member 'GSReplayFuncLib_PauseReplay::WorldContext' has a wrong offset!");
//static_assert(offsetof(GSReplayFuncLib_PauseReplay, bPause) == 0x000008, "Member 'GSReplayFuncLib_PauseReplay::bPause' has a wrong offset!");

// Function GSReplaySystem.GSReplayFuncLib.PlayReplayFromLocalFile
// 0x0028 (0x0028 - 0x0000)
struct GSReplayFuncLib_PlayReplayFromLocalFile final
{
public:
	const class UObject*                          WorldContext;                                      // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 Name_0;                                            // 0x0008(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<class FString>                         InOptions;                                         // 0x0018(0x0010)(Parm, ZeroConstructor, NativeAccessSpecifierPublic)
};
//static_assert(alignof(GSReplayFuncLib_PlayReplayFromLocalFile) == 0x000008, "Wrong alignment on GSReplayFuncLib_PlayReplayFromLocalFile");
//static_assert(sizeof(GSReplayFuncLib_PlayReplayFromLocalFile) == 0x000028, "Wrong size on GSReplayFuncLib_PlayReplayFromLocalFile");
//static_assert(offsetof(GSReplayFuncLib_PlayReplayFromLocalFile, WorldContext) == 0x000000, "Member 'GSReplayFuncLib_PlayReplayFromLocalFile::WorldContext' has a wrong offset!");
//static_assert(offsetof(GSReplayFuncLib_PlayReplayFromLocalFile, Name_0) == 0x000008, "Member 'GSReplayFuncLib_PlayReplayFromLocalFile::Name_0' has a wrong offset!");
//static_assert(offsetof(GSReplayFuncLib_PlayReplayFromLocalFile, InOptions) == 0x000018, "Member 'GSReplayFuncLib_PlayReplayFromLocalFile::InOptions' has a wrong offset!");

// Function GSReplaySystem.GSReplayFuncLib.RecordReplayToLocalFile
// 0x0038 (0x0038 - 0x0000)
struct GSReplayFuncLib_RecordReplayToLocalFile final
{
public:
	const class UObject*                          WorldContext;                                      // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 Name_0;                                            // 0x0008(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 FriendlyName;                                      // 0x0018(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<class FString>                         InOptions;                                         // 0x0028(0x0010)(Parm, ZeroConstructor, NativeAccessSpecifierPublic)
};
//static_assert(alignof(GSReplayFuncLib_RecordReplayToLocalFile) == 0x000008, "Wrong alignment on GSReplayFuncLib_RecordReplayToLocalFile");
//static_assert(sizeof(GSReplayFuncLib_RecordReplayToLocalFile) == 0x000038, "Wrong size on GSReplayFuncLib_RecordReplayToLocalFile");
//static_assert(offsetof(GSReplayFuncLib_RecordReplayToLocalFile, WorldContext) == 0x000000, "Member 'GSReplayFuncLib_RecordReplayToLocalFile::WorldContext' has a wrong offset!");
//static_assert(offsetof(GSReplayFuncLib_RecordReplayToLocalFile, Name_0) == 0x000008, "Member 'GSReplayFuncLib_RecordReplayToLocalFile::Name_0' has a wrong offset!");
//static_assert(offsetof(GSReplayFuncLib_RecordReplayToLocalFile, FriendlyName) == 0x000018, "Member 'GSReplayFuncLib_RecordReplayToLocalFile::FriendlyName' has a wrong offset!");
//static_assert(offsetof(GSReplayFuncLib_RecordReplayToLocalFile, InOptions) == 0x000028, "Member 'GSReplayFuncLib_RecordReplayToLocalFile::InOptions' has a wrong offset!");

// Function GSReplaySystem.GSReplayFuncLib.RegisterCSharpFuncLibObj
// 0x0010 (0x0010 - 0x0000)
struct GSReplayFuncLib_RegisterCSharpFuncLibObj final
{
public:
	const class UObject*                          WorldContext;                                      // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UGSReplayCSharpFuncLib*                 CSharpFuncLibObj;                                  // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
//static_assert(alignof(GSReplayFuncLib_RegisterCSharpFuncLibObj) == 0x000008, "Wrong alignment on GSReplayFuncLib_RegisterCSharpFuncLibObj");
//static_assert(sizeof(GSReplayFuncLib_RegisterCSharpFuncLibObj) == 0x000010, "Wrong size on GSReplayFuncLib_RegisterCSharpFuncLibObj");
//static_assert(offsetof(GSReplayFuncLib_RegisterCSharpFuncLibObj, WorldContext) == 0x000000, "Member 'GSReplayFuncLib_RegisterCSharpFuncLibObj::WorldContext' has a wrong offset!");
//static_assert(offsetof(GSReplayFuncLib_RegisterCSharpFuncLibObj, CSharpFuncLibObj) == 0x000008, "Member 'GSReplayFuncLib_RegisterCSharpFuncLibObj::CSharpFuncLibObj' has a wrong offset!");

// Function GSReplaySystem.GSReplayFuncLib.RegisterNetworkRemapPath
// 0x0010 (0x0010 - 0x0000)
struct GSReplayFuncLib_RegisterNetworkRemapPath final
{
public:
	const class UObject*                          WorldContext;                                      // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0008(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
//static_assert(alignof(GSReplayFuncLib_RegisterNetworkRemapPath) == 0x000008, "Wrong alignment on GSReplayFuncLib_RegisterNetworkRemapPath");
//static_assert(sizeof(GSReplayFuncLib_RegisterNetworkRemapPath) == 0x000010, "Wrong size on GSReplayFuncLib_RegisterNetworkRemapPath");
//static_assert(offsetof(GSReplayFuncLib_RegisterNetworkRemapPath, WorldContext) == 0x000000, "Member 'GSReplayFuncLib_RegisterNetworkRemapPath::WorldContext' has a wrong offset!");
//static_assert(offsetof(GSReplayFuncLib_RegisterNetworkRemapPath, ReturnValue) == 0x000008, "Member 'GSReplayFuncLib_RegisterNetworkRemapPath::ReturnValue' has a wrong offset!");

// Function GSReplaySystem.GSReplayFuncLib.RequestCheckpoint
// 0x0008 (0x0008 - 0x0000)
struct GSReplayFuncLib_RequestCheckpoint final
{
public:
	const class UObject*                          WorldContext;                                      // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
//static_assert(alignof(GSReplayFuncLib_RequestCheckpoint) == 0x000008, "Wrong alignment on GSReplayFuncLib_RequestCheckpoint");
//static_assert(sizeof(GSReplayFuncLib_RequestCheckpoint) == 0x000008, "Wrong size on GSReplayFuncLib_RequestCheckpoint");
//static_assert(offsetof(GSReplayFuncLib_RequestCheckpoint, WorldContext) == 0x000000, "Member 'GSReplayFuncLib_RequestCheckpoint::WorldContext' has a wrong offset!");

// Function GSReplaySystem.GSReplayFuncLib.SetActorPrioritizationEnabled
// 0x0010 (0x0010 - 0x0000)
struct GSReplayFuncLib_SetActorPrioritizationEnabled final
{
public:
	const class UObject*                          WorldContext;                                      // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bInPrioritizeActors;                               // 0x0008(0x0001)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
//static_assert(alignof(GSReplayFuncLib_SetActorPrioritizationEnabled) == 0x000008, "Wrong alignment on GSReplayFuncLib_SetActorPrioritizationEnabled");
//static_assert(sizeof(GSReplayFuncLib_SetActorPrioritizationEnabled) == 0x000010, "Wrong size on GSReplayFuncLib_SetActorPrioritizationEnabled");
//static_assert(offsetof(GSReplayFuncLib_SetActorPrioritizationEnabled, WorldContext) == 0x000000, "Member 'GSReplayFuncLib_SetActorPrioritizationEnabled::WorldContext' has a wrong offset!");
//static_assert(offsetof(GSReplayFuncLib_SetActorPrioritizationEnabled, bInPrioritizeActors) == 0x000008, "Member 'GSReplayFuncLib_SetActorPrioritizationEnabled::bInPrioritizeActors' has a wrong offset!");

// Function GSReplaySystem.GSReplayFuncLib.SetDemoCurrentTime
// 0x0010 (0x0010 - 0x0000)
struct GSReplayFuncLib_SetDemoCurrentTime final
{
public:
	const class UObject*                          WorldContext;                                      // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         CurrentTime;                                       // 0x0008(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
//static_assert(alignof(GSReplayFuncLib_SetDemoCurrentTime) == 0x000008, "Wrong alignment on GSReplayFuncLib_SetDemoCurrentTime");
//static_assert(sizeof(GSReplayFuncLib_SetDemoCurrentTime) == 0x000010, "Wrong size on GSReplayFuncLib_SetDemoCurrentTime");
//static_assert(offsetof(GSReplayFuncLib_SetDemoCurrentTime, WorldContext) == 0x000000, "Member 'GSReplayFuncLib_SetDemoCurrentTime::WorldContext' has a wrong offset!");
//static_assert(offsetof(GSReplayFuncLib_SetDemoCurrentTime, CurrentTime) == 0x000008, "Member 'GSReplayFuncLib_SetDemoCurrentTime::CurrentTime' has a wrong offset!");

// Function GSReplaySystem.GSReplayFuncLib.SetDemoPlayTimeDilation
// 0x0010 (0x0010 - 0x0000)
struct GSReplayFuncLib_SetDemoPlayTimeDilation final
{
public:
	const class UObject*                          WorldContext;                                      // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         InDemoPlayTimeDilation;                            // 0x0008(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
//static_assert(alignof(GSReplayFuncLib_SetDemoPlayTimeDilation) == 0x000008, "Wrong alignment on GSReplayFuncLib_SetDemoPlayTimeDilation");
//static_assert(sizeof(GSReplayFuncLib_SetDemoPlayTimeDilation) == 0x000010, "Wrong size on GSReplayFuncLib_SetDemoPlayTimeDilation");
//static_assert(offsetof(GSReplayFuncLib_SetDemoPlayTimeDilation, WorldContext) == 0x000000, "Member 'GSReplayFuncLib_SetDemoPlayTimeDilation::WorldContext' has a wrong offset!");
//static_assert(offsetof(GSReplayFuncLib_SetDemoPlayTimeDilation, InDemoPlayTimeDilation) == 0x000008, "Member 'GSReplayFuncLib_SetDemoPlayTimeDilation::InDemoPlayTimeDilation' has a wrong offset!");

// Function GSReplaySystem.GSReplayFuncLib.SkipTime
// 0x0010 (0x0010 - 0x0000)
struct GSReplayFuncLib_SkipTime final
{
public:
	const class UObject*                          WorldContext;                                      // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         InTimeToSkip;                                      // 0x0008(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
//static_assert(alignof(GSReplayFuncLib_SkipTime) == 0x000008, "Wrong alignment on GSReplayFuncLib_SkipTime");
//static_assert(sizeof(GSReplayFuncLib_SkipTime) == 0x000010, "Wrong size on GSReplayFuncLib_SkipTime");
//static_assert(offsetof(GSReplayFuncLib_SkipTime, WorldContext) == 0x000000, "Member 'GSReplayFuncLib_SkipTime::WorldContext' has a wrong offset!");
//static_assert(offsetof(GSReplayFuncLib_SkipTime, InTimeToSkip) == 0x000008, "Member 'GSReplayFuncLib_SkipTime::InTimeToSkip' has a wrong offset!");

// Function GSReplaySystem.GSReplayFuncLib.StopReplay
// 0x0008 (0x0008 - 0x0000)
struct GSReplayFuncLib_StopReplay final
{
public:
	const class UObject*                          WorldContext;                                      // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
//static_assert(alignof(GSReplayFuncLib_StopReplay) == 0x000008, "Wrong alignment on GSReplayFuncLib_StopReplay");
//static_assert(sizeof(GSReplayFuncLib_StopReplay) == 0x000008, "Wrong size on GSReplayFuncLib_StopReplay");
//static_assert(offsetof(GSReplayFuncLib_StopReplay, WorldContext) == 0x000000, "Member 'GSReplayFuncLib_StopReplay::WorldContext' has a wrong offset!");

// Function GSReplaySystem.GSReplayFuncLib.UnregisterCSharpFuncLibObj
// 0x0008 (0x0008 - 0x0000)
struct GSReplayFuncLib_UnregisterCSharpFuncLibObj final
{
public:
	const class UObject*                          WorldContext;                                      // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
//static_assert(alignof(GSReplayFuncLib_UnregisterCSharpFuncLibObj) == 0x000008, "Wrong alignment on GSReplayFuncLib_UnregisterCSharpFuncLibObj");
//static_assert(sizeof(GSReplayFuncLib_UnregisterCSharpFuncLibObj) == 0x000008, "Wrong size on GSReplayFuncLib_UnregisterCSharpFuncLibObj");
//static_assert(offsetof(GSReplayFuncLib_UnregisterCSharpFuncLibObj, WorldContext) == 0x000000, "Member 'GSReplayFuncLib_UnregisterCSharpFuncLibObj::WorldContext' has a wrong offset!");

// Function GSReplaySystem.GSReplayFuncLib.UnRegisterNetworkRemapPath
// 0x0008 (0x0008 - 0x0000)
struct GSReplayFuncLib_UnRegisterNetworkRemapPath final
{
public:
	const class UObject*                          WorldContext;                                      // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
//static_assert(alignof(GSReplayFuncLib_UnRegisterNetworkRemapPath) == 0x000008, "Wrong alignment on GSReplayFuncLib_UnRegisterNetworkRemapPath");
//static_assert(sizeof(GSReplayFuncLib_UnRegisterNetworkRemapPath) == 0x000008, "Wrong size on GSReplayFuncLib_UnRegisterNetworkRemapPath");
//static_assert(offsetof(GSReplayFuncLib_UnRegisterNetworkRemapPath, WorldContext) == 0x000000, "Member 'GSReplayFuncLib_UnRegisterNetworkRemapPath::WorldContext' has a wrong offset!");

}

